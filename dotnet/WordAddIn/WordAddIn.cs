using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using Word = Microsoft.Office.Interop.Word;
using Office = Microsoft.Office.Core;
using Microsoft.Office.Tools.Word;
using Microsoft.Office.Tools.Word.Extensions;
using System.Windows.Forms;

namespace WordAddIn
{
    public partial class WordAddIn
    {
        public BrowserDialog browserDialog = null;

        private void ThisAddIn_Startup(object sender, System.EventArgs e)
        {
            this.Application.DocumentChange += new Word.ApplicationEvents4_DocumentChangeEventHandler(on_document_changed);

            // Only called on user interaction...
            this.Application.DocumentOpen += new Word.ApplicationEvents4_DocumentOpenEventHandler(on_document_open);

            // Bevor merging starts (Only called on user interaction)
            this.Application.MailMergeBeforeMerge += new Word.ApplicationEvents4_MailMergeBeforeMergeEventHandler(on_merge_start);
            this.Application.MailMergeDataSourceLoad += new Word.ApplicationEvents4_MailMergeDataSourceLoadEventHandler(on_datasource_load);
        }

        private void ThisAddIn_Shutdown(object sender, System.EventArgs e)
        {

        }

        public void on_document_open(Word.Document doc)
        {
        }

        void on_document_before_save(object sender, Microsoft.Office.Tools.Word.SaveEventArgs e)
        {
            if (MessageBox.Show("Do you want to save the document?", "BeforeSave",
                MessageBoxButtons.YesNo) == DialogResult.No)
            {
                e.Cancel = true;
            }
        }

        // Called when ever a document is opend by word or one is activated
        public void on_document_changed()
        {
            Globals.Ribbons.Ribbon.buttonCreateMailMerge.Enabled = true;
            Word.Document doc = this.Application.ActiveDocument;

            SyracuseOfficeCustomData customData = SyracuseOfficeCustomData.getFromDocument(doc);
            if (customData != null) // Document generated by X3 and supplied with additional data
            {
                String mode = customData.getCreateMode();
                if ("2".Equals(mode))
                {
                    CreateNewMailMergeDocument();
                }
                else if ("4".Equals(mode))
                {
                    if (customData.isForceRefresh())
                    {
                        CreateWordReportTemplate();
                    }
                }
                else if (!"".Equals(mode))
                {
                    if (customData.isForceRefresh())
                    {
                        CreateMailMerge(doc);
                    }
                }
                Globals.Ribbons.Ribbon.buttonCreateMailMerge.Enabled = false;
            }
        }

        public void on_datasource_load(Word.Document doc) 
        {
        }

        public void on_merge_start(Word.Document doc, int StartRecord, int EndRecord, ref bool Cancel)
        {
        }

        public void Connect()
        {
            if (browserDialog == null)
            {
                browserDialog = new BrowserDialog();
                browserDialog.Connect("http://localhost:8124");
            }
        }

        public void ServerSettings()
        {
            ServerSettings settings = new ServerSettings();
            if (settings.ShowDialog() == DialogResult.OK)
            {
                String connectUrl = settings.GetConnectUrl();
            }
        }

        public void CreateNewMailMergeDocument()
        {
            Word.Document doc = this.Application.ActiveDocument;
            SyracuseOfficeCustomData customData = SyracuseOfficeCustomData.getFromDocument(doc);
            if (customData == null)
            {
                return;
            }

            String name = doc.Name;

            // close dummy doc served by syracuse
            ((Word._Document) doc).Close(false);

            // Open new file wizard
            if (Application.Dialogs[Word.WdWordDialog.wdDialogFileNew].Show() != -1)
            {
                // Creating document cancelled
                return;
            }

            Word.Document newDoc = this.Application.ActiveDocument;

            // Propose name for save dialog
            newDoc.BuiltInDocumentProperties[Word.WdBuiltInProperty.wdPropertyTitle] = name;

            // Create new custom data for document
            SyracuseOfficeCustomData newCustomData = SyracuseOfficeCustomData.getFromDocument(newDoc, true);
            newCustomData.setDictionary(customData.getDictionary());
            newCustomData.setCreateMode("3");
            newCustomData.writeDictionaryToDocument();
            CreateMailMerge(newDoc);

            Globals.Ribbons.Ribbon.buttonCreateMailMerge.Enabled = false;
        }

        public void CreateWordReportTemplate()
        {
            Word.Document doc = this.Application.ActiveDocument;
            SyracuseOfficeCustomData customData = SyracuseOfficeCustomData.getFromDocument(doc);
            if (customData == null)
            {
                return;
            }

            if (!ConnectedToServer())
            {
                return;
            }
            browserDialog.CreateWordReportTemplate(doc);
            customData = SyracuseOfficeCustomData.getFromDocument(doc);
            if (customData != null)
            {
                customData.setForceRefresh(false);
                customData.writeDictionaryToDocument();
            }

            Globals.Ribbons.Ribbon.buttonCreateMailMerge.Enabled = false;
        }

        // Add MailMerge DS to active Document after selecting DS
        public void CreateMailMerge(Word.Document doc)
        {
            if (!ConnectedToServer())
            {
                return;
            }
            browserDialog.CreateMailMergeDocument(doc);
            SyracuseOfficeCustomData customData = SyracuseOfficeCustomData.getFromDocument(doc);
            if (customData != null)
            {
                customData.setForceRefresh(false);
                customData.writeDictionaryToDocument();
            }
        }

        public void SaveDocumentToX3(Word.Document doc)
        {
            if (!ConnectedToServer())
            {
                return;
            }
            browserDialog.SaveDocumentToX3(doc);
        }
        
        public Boolean ConnectedToServer() 
        {
            if (browserDialog == null)
            {
                Connect();
            }
            return true;
        }
        
        #region Von VSTO generierter Code

        /// <summary>
        /// Erforderliche Methode für die Designerunterstützung.
        /// Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
        /// </summary>
        private void InternalStartup()
        {
            this.Startup += new System.EventHandler(ThisAddIn_Startup);
            this.Shutdown += new System.EventHandler(ThisAddIn_Shutdown);
        }
        
        #endregion
    }
}
