"use strict";
/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, ok: false, asyncTest: false, test: false, strictEqual: false, same: false, start: false, stop: false */

var config = require('config'); // must be first syracuse require
var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseUrl = "http://localhost:" + port;
var mongodb = require('streamline-mongodb');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var httpClient = require('syracuse-httpclient/lib/httpClient');
var sys = require("util");

var tracer; // = console.log;
var application, contract, dataset;

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var testData = require('syracuse-sdata/test/fixtures/testDB');
var testEndPoint = testData.endpoint;

testEndPoint.datasets = {
	test: {
		driver: "mongodb",
		database: "test",
		hostname: "localhost",
		port: config.collaboration.port || 27017
	}
};

config.sdata.endpoints.push(testEndPoint);

var cookie;

var doStop = false;
QUnit.module(module.id, {
	setup: function() {}
});

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(testEndPoint.datasets.test.hostname, testEndPoint.datasets.test.port, {});
	var db = adminTestFixtures.newMongoDb(testEndPoint.datasets.test.database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	tracer && tracer("dropping admin db");
	server = new mongodb.Server(testEndPoint.datasets.test.hostname, testEndPoint.datasets.test.port, {});
	db = adminTestFixtures.newMongoDb("mongodb_admin_test", server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");

	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	start();
});

function getCookie(_, otherBaseUrl, login, pass) {
	var response = httpClient.httpRequest(_, {
		url: otherBaseUrl != null ? otherBaseUrl + "/syracuse-main/html/main.html" : baseUrl + "/syracuse-main/html/main.html",
		user: login || "guest",
		password: pass || "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

function send(_, cookie, method, url, data, statusCode, step, throwErr) {
	url = url.indexOf("http") === 0 ? url : baseUrl + "/sdata/qunit/sdataTest/test/" + url;
	var opts = {
		method: method,
		url: url,
		headers: {
			"content-type": "application/json",
			cookie: cookie,
			accept: "application/json"
		}
	};
	var response = httpClient.httpRequest(_, opts);

	if (data) {
		response = response.end(JSON.stringify(data)).response(_);
	} else {
		response = response.end().response(_);
	}

	// Deal with the redirection
	if (response.statusCode === 301) {
		tracer && tracer("Redirect: " + sys.inspect(response.headers.location));
		opts.url = response.headers.location;
		response = httpClient.httpRequest(_, opts);

		if (data) {
			response = response.end(JSON.stringify(data)).response(_);
		} else {
			response = response.end().response(_);
		}
	}

	if (statusCode && step) {
		if (throwErr && response.statusCode !== statusCode) {
			throw new Error("Request failed");
		} else {
			strictEqual(response.statusCode, statusCode, step + " OK");
		}
	}

	var content = response.readAll(_);
	var resp;
	try {
		resp = JSON.parse(content);
	} catch (e) {
		//tracer && tracer("Error while parsing: " + content);
	}
	if (response.statusCode !== (statusCode || 200)) {
		tracer && tracer("POST Request URL: " + url + "\nData: " + JSON.stringify(data, null, 2));
		tracer && tracer("Bad response: " + JSON.stringify(resp, null, 2));
	}
	return resp;
}


var appUuid = {}, endpointUuid = {};

function addApplication(_, cookie, url, application, contract) {

	var appBody;

	if (!appUuid[application]) {

		appBody = send(_, cookie, "get", url + "applications?sdataWhere=(application eq '" + application + "' and contract eq '" + contract + "')", null, 200, "Retrieve applications list");
		if (appBody && appBody.$resources && appBody.$resources[0] && appBody.$resources[0].$uuid) {
			appUuid[application] = appBody.$resources[0].$uuid;
		} else {
			// Create Application
			appBody = send(_, cookie, "post", url + "applications", {
				description: "HELP Unit tests application for " + application.toUpperCase(),
				protocol: application !== "x3" ? "syracuse" : "x3",
				application: application,
				contract: contract
			}, 201, "Create application '" + application + "' for contract '" + contract + "'");
			tracer && tracer("appBody=" + JSON.stringify(appBody, null, 2));
			appUuid[application] = appBody.$uuid;
		}
	}
}

function addEndpoint(_, cookie, url, application, contract, dataset) {

	var endpointBody;

	if (!endpointUuid[application]) {

		endpointBody = send(_, cookie, "get", url + "endPoints?sdataWhere=(application eq '" + application + "' and contract eq '" + contract + "' and dataset eq '" + dataset + "')", null, 200, "Retrieve endPoints list");
		if (endpointBody && endpointBody.$resources && endpointBody.$resources[0] && endpointBody.$resources[0].$uuid) {
			endpointUuid[application] = endpointBody.$resources[0].$uuid;
			ok(true, "Endpoint already exists");
		} else {
			var endPointData = {
				description: "HELP Unit tests endpoint for " + application.toUpperCase(),
				helpBaseUrl: "http://localhost/qunithelp/",
				application: application,
				contract: contract,
				dataset: dataset,
				enableSearch: false,
				databaseDriver: "mongodb",
				databaseHost: "localhost",
				databasePort: config.collaboration.port || 27017,
				applicationRef: {
					$uuid: appUuid[application]
				}
			};

			// Create Endpoint
			endpointBody = send(_, cookie, "post", url + "endPoints", endPointData, 201, "Create endpoint for application '" + application + "', contract '" + contract + "' and dataset '" + dataset + "'");

			endpointUuid[application] = endpointBody.$uuid;
			ok(true, "Set Endpoint");
		}
	} else {
		ok(true, "Endpoint already set");
	}
}



function basicGetTests(_, cookie, throwErr) {
	send(_, cookie, "get", baseUrl + "/help/en-us/index.htm", null, 200, "Get online help main page", throwErr);
	send(_, cookie, "get", baseUrl + "/help/en-us/ADXHelp_main.css", null, 200, "Get online help main CSS", throwErr);
	send(_, cookie, "get", baseUrl + "/help/en-us/CANNOT_LOCATE.htm", null, 404, "Get bad page : TEMPORARY 500 INSTEAD OF 404", throwErr);
}

application = "qunit";
contract = "sdataTest";
dataset = "test";

asyncTest("Data setup", function(_) {

	var url = baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/";
	cookie = getCookie(_, baseUrl);
	addApplication(_, cookie, url, application, contract);
	addEndpoint(_, cookie, url, application, contract, dataset);

	start();
});

var proxyOK;
asyncTest("Manage proxy", function(_) {
	var url = baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/";
	cookie = getCookie(_, baseUrl);
	// Create Proxy configuration
	var name = "proxyTest";
	var confBody = send(_, cookie, "post", url + "proxyConfigurations", {
		name: name,
		host: "ecvmdevprod2", // This is Grenoble proxy server
		port: 80
	}, 201, "Create proxy configuration '" + name + "'");
	var body = send(_, cookie, "get", url + "settings", null, 200, "Retrieve global settings list");
	var settingUuid = body.$resources[0].$uuid;
	send(_, cookie, "put", url + "settings('" + settingUuid + "')?representation=setting.$edit", {
		proxy: true,
		proxyConf: {
			$uuid: confBody.$uuid
		},
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	}, 200, "Update globals settings with proxy configuration");

	body = send(_, cookie, "get", url + "proxyConfigurations('" + confBody.$uuid + "')/$service/test?representation=proxyConfiguration.$details&count=50", null, 0, false);
	proxyOK = adminTestFixtures.onlyInfo(body.$diagnoses);
	start();
});

asyncTest("Proxy GET Help index.htm", function(_) {
	if (proxyOK) {
		basicGetTests(_, cookie);
	} else {
		try {
			basicGetTests(_, cookie, true);
		} catch (e) {
			ok(true, "PROXY UNREACHABLE BUT NEEDED TO EXECUTE THIS TEST");
		}
	}
	start();
});

test("stop  tests", 0, function() {
	doStop = true;
	start();
});