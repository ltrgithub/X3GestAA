{
  "name": "git-wrapper2",
  "description": "A wrapper around the git executable with convenience functions for common commands",
  "tags": [
    "git"
  ],
  "version": "0.2.5",
  "author": {
    "name": "Matthew Phillips",
    "email": "matthew@matthewphillips.info",
    "url": "http://www.matthewphillips.info"
  },
  "repository": {
    "type": "git",
    "url": "http://code.matthewphillips.info/git/matthew/git-wrapper2.git"
  },
  "bugs": {
    "url": "http://code.matthewphillips.info/matthew/git-wrapper2/issues"
  },
  "main": "./git.js",
  "engines": {
    "node": ">=0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "readme": "git-wrapper2\n===========\n\nA wrapper around the git executable. Built on top of the original [git-wrapper](https://github.com/pvorb/node-git-wrapper), **git-wrapper2** provides additional convenience functions for commit git tasks, like `commit`ing changes and `push`ing them to a remote repository. Additionally git-wrapper2 emits events for many tasks so that you can observe changes throughout your application.\n\n## Installation\n\n    npm install git-wrapper2\n\n## API\n\n### var git = new Git(options);\n\nConstructor. See [git(1)](http://git-scm.com/docs/git) for available options.\n\n  * `options` Object. Examples: `{ paginate: true }` enables pagination.\n    `{ 'git-dir': '../.git' }` specifies a different `.git` directory.\n\n### git.exec(command [[, options], args], callback);\n\nExecutes a git command. See [the Git Reference](http://git-scm.com/docs/) for\navailable commands.\n\n  * `command`   String.         Examples: `'init'`, `'log'`, `'commit'`, etc.\n  * `options`   Object.         The options for a git command. E.g.\n                                `{ f: true }` to force a command (equivalent\n                                to adding `-f` on the command line).\n  * `args`      Array[String].  The arguments for a git command. E.g. some\n                                files for `git add`.\n  * `callback`  Function.       `callback(err, msg)`.\n\n### git.isRepo(callback);\n\nChecks to see if the directory is a git repository. Callback returns a `boolean` indicating whether it is or not.\n\n  * `callback` Function.        `callback(isRepo)`.\n\n### git.clone(repo, dir, callback);\n\nClones a repository to the destination `dir`.\n\n  * `repo`     String.          Remote repository.\n  * `dir`      String.          Local directory to clone into.\n  * `cal.back` Function.        `callback(err, msg)`.\n\n### git.pull([remote], [branch], callback)\n\nPerforms a `git pull` command against the repository. If `remote` or `branch` are not provided they will default to `origin` and `master` respectively.\n\n  * `remote`   String.          Name of the remote target.\n  * `branch`   String.          Branch name to pull.\n  * `callback` Function.        `callback(err, msg)`.\n\n### git.add(which, callback)\n\nPerform a `git add` command, staging files for a commit.\n\n  * `which`    String.          Which files to stage, seperated by spaces.\n  * `callback` Function.        `callback(err, msg)`.\n\n### git.commit(msg, callback)\n\nCommits staged changes with the given `msg` as the commit message.\n\n  * `msg`      String.          Body of the commit message.\n  * `callback` Function.        `callback(err, msg)`.\n\n### git.push([remote], [branch], callback)\n\nPushes changes in the local repository to a remote. If `remote` or `branch` are not provided, the defaults will be `origin` and `master` respectively.\n\n  * `remote`   String.          Name of the remote target.\n  * `callback` Function.        `callback(err, msg)`.\n\n### git.save(msg, callback)\n\nConvenience function for performing `git.add`, `git.commit`, and `git.push` in one function call. Using this will automatically stage all unstaged changes, commit, and then push.\n\n  * `msg`      String.          Body of the commit message.\n  * `callback` Function.        `callback(err, msg)`.\n\n### git.log(options, callback)\n\nPerforms a `git log` command, returning the results. `options` are an array of command line options you might want to provide, such as `['-n', 2]` to limit the results to only the last 2 commits.\n\n  * `options`   Array.          Command line options for the `git log` command.\n  * `calllback` Function.       `callback(err, msg)`.\n\n## Events\n\nSeveral events are emitted when actions are performed against a git repository.\n\n### clone\n\nEmitted when the repository is cloned.\n\n### commit\n\nEmitted when a `commit` occurs.\n\n### saved\n\nEmitted when a full `save` operation is performed and completed.\n\n## Bugs and Issues\n\nIf you encounter any bugs or issues, feel free to email me at matthew at matthewphillips.info.\n",
  "readmeFilename": "README.md",
  "_id": "git-wrapper2@0.2.5",
  "dist": {
    "shasum": "d49bede9756675eb0a825f122bfc8a3a117b742f",
    "tarball": "http://registry.npmjs.org/git-wrapper2/-/git-wrapper2-0.2.5.tgz"
  },
  "_from": "git-wrapper2@",
  "_npmVersion": "1.3.21",
  "_npmUser": {
    "name": "matthewp",
    "email": "matthew@matthewphillips.info"
  },
  "maintainers": [
    {
      "name": "matthewp",
      "email": "matthew@matthewphillips.info"
    }
  ],
  "directories": {},
  "_shasum": "d49bede9756675eb0a825f122bfc8a3a117b742f",
  "_resolved": "https://registry.npmjs.org/git-wrapper2/-/git-wrapper2-0.2.5.tgz"
}
