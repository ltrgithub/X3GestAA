/*** Generated by streamline 0.12.1 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; QUnit.module(module.id); 
var flows = require('streamline/lib/util/flows'); 

function delay(_, val) { var __frame = { name: 'delay', line: 4 }; return __func(_, this, arguments, delay, 0, __frame, function __$delay() { 
        return flows.nextTick(__cb(_, __frame, 1, 0, function __$delay() { 
            return _(null, val); }, true, false)); }); } 


function delayFail(_, err) { var __frame = { name: 'delayFail', line: 9 }; return __func(_, this, arguments, delayFail, 0, __frame, function __$delayFail() { 
        return flows.nextTick(__cb(_, __frame, 1, 0, function __$delayFail() { 
            return _(err); }, true, false)); }); } 


function sparse() { 
    var a = []; 
    a[2] = 33; 
    a[5] = 44; 
    a[7] = 99; 
    return a; } 


function dump(a) { 
    return a.reduce(function (s, v) { 
        return s + '/' + v; }, ''); } 



asyncTest('each', 7, function __1(_) { var result; var __frame = { name: '__1', line: 28 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { result = 1; 
        
        return flows.each(__cb(_, __frame, 2, 0, function __$__1() { 
            
            
            strictEqual(result, 24); 
            result = 1; 
            return [ 1, 2, 3, 4 ].forEach_(__cb(_, __frame, 7, 0, function __$__1() { 
                
                
                
                strictEqual(result, 24); 
                result = 1; 
                return [ 1, 2, 3, 4 ].forEach_(__cb(_, __frame, 13, 0, function __$__1() { 
                    
                    
                    
                    strictEqual(result, 24); 
                    result = 1; 
                    return [ 1, 2, 3, 4 ].forEach_(__cb(_, __frame, 19, 0, function __$__1() { 
                        
                        
                        
                        
                        
                        strictEqual(result, 24); 
                        result = 1; 
                        return [ 1, 2, 3, 4 ].forEach_(__cb(_, __frame, 27, 0, function __$__1() { 
                            
                            
                            
                            strictEqual(result, 24); 
                            result = ''; 
                            return sparse().forEach_(__cb(_, __frame, 33, 0, function __$__1() { 
                                
                                
                                
                                strictEqual(result, '/2:33/5:44/7:99'); 
                                result = ''; 
                                return sparse().forEach_(__cb(_, __frame, 39, 0, function __$__1() { 
                                    
                                    
                                    
                                    strictEqual(result, '/2:33/5:44/7:99'); 
                                    start(); _(); }, true, false), -1, function __7(_, val, i) { var v; var __frame = { name: '__7', line: 67 }; return __func(_, this, arguments, __7, 0, __frame, function __$__7() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; result = result + '/' + i + ':' + v; _(); }, true, false), val); }); }); }, true, false), function __6(_, val, i) { var v; var __frame = { name: '__6', line: 61 }; return __func(_, this, arguments, __6, 0, __frame, function __$__6() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; result = result + '/' + i + ':' + v; _(); }, true, false), val); }); }); }, true, false), -1, function __5(_, val) { var v; var __frame = { name: '__5', line: 55 }; return __func(_, this, arguments, __5, 0, __frame, function __$__5() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; result = result * v; _(); }, true, false), val); }); }); }, true, false), { parallel: 2 }, function __4(_, val) { var v; var __frame = { name: '__4', line: 49 }; return __func(_, this, arguments, __4, 0, __frame, function __$__4() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; result = result * v; _(); }, true, false), val); }); }); }, true, false), 2, function __3(_, val) { var v; var __frame = { name: '__3', line: 41 }; return __func(_, this, arguments, __3, 0, __frame, function __$__3() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; result = result * v; _(); }, true, false), val); }); }); }, true, false), function __2(_, val) { var v; var __frame = { name: '__2', line: 35 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; result = result * v; _(); }, true, false), val); }); }); }, true, false), [ 1, 2, 3, 4 ], function __1(_, val) { var __frame = { name: '__1', line: 30 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __1) { result = result * __1; _(); }, true, false), val); }); }); }); }); 

asyncTest('map', 9, function __2(_) { var result; var __frame = { name: '__2', line: 74 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { 
        return flows.map(__cb(_, __frame, 1, 0, function ___(__0, __8) { result = __8; 
            
            
            deepEqual(result, [ 2, 4, 6, 8 ]); 
            return [ 1, 2, 3, 4 ].map_(__cb(_, __frame, 5, 0, function ___(__0, __9) { result = __9; 
                
                
                deepEqual(result, [ 2, 4, 6, 8 ]); 
                return [ 1, 2, 3, 4 ].map_(__cb(_, __frame, 9, 0, function ___(__0, __10) { result = __10; 
                    
                    
                    deepEqual(result, [ 2, 4, 6, 8 ]); 
                    return [ 1, 2, 3, 4 ].map_(__cb(_, __frame, 13, 0, function ___(__0, __11) { result = __11; 
                        
                        
                        
                        
                        deepEqual(result, [ 2, 4, 6, 8 ]); 
                        return [ 1, 2, 3, 4 ].map_(__cb(_, __frame, 19, 0, function ___(__0, __12) { result = __12; 
                            
                            
                            deepEqual(result, [ 2, 4, 6, 8 ]); 
                            return sparse().map_(__cb(_, __frame, 23, 0, function ___(__0, __13) { result = __13; 
                                
                                
                                
                                strictEqual(result.length, 8); 
                                strictEqual(dump(result), '/2:33/5:44/7:99'); 
                                return sparse().map_(__cb(_, __frame, 29, 0, function ___(__0, __14) { result = __14; 
                                    
                                    
                                    
                                    strictEqual(result.length, 8); 
                                    strictEqual(dump(result), '/2:33/5:44/7:99'); 
                                    start(); _(); }, true, false), -1, function __7(_, val, i) { var v; var __frame = { name: '__7', line: 103 }; return __func(_, this, arguments, __7, 0, __frame, function __$__7() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; return _(null, i + ':' + v); }, true, false), val); }); }); }, true, false), function __6(_, val, i) { var v; var __frame = { name: '__6', line: 97 }; return __func(_, this, arguments, __6, 0, __frame, function __$__6() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; return _(null, i + ':' + v); }, true, false), val); }); }); }, true, false), -1, function __5(_, val) { var __frame = { name: '__5', line: 93 }; return __func(_, this, arguments, __5, 0, __frame, function __$__5() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = 2 * __2; return _(null, __1); }, true, false), val); }); }); }, true, false), { parallel: 2 }, function __4(_, val) { var __frame = { name: '__4', line: 89 }; return __func(_, this, arguments, __4, 0, __frame, function __$__4() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = 2 * __2; return _(null, __1); }, true, false), val); }); }); }, true, false), 2, function __3(_, val) { var __frame = { name: '__3', line: 83 }; return __func(_, this, arguments, __3, 0, __frame, function __$__3() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = 2 * __2; return _(null, __1); }, true, false), val); }); }); }, true, false), function __2(_, val) { var __frame = { name: '__2', line: 79 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = 2 * __2; return _(null, __1); }, true, false), val); }); }); }, true, false), [ 1, 2, 3, 4 ], function __1(_, val) { var __frame = { name: '__1', line: 75 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = 2 * __2; return _(null, __1); }, true, false), val); }); }); }); }); 

asyncTest('filter', 9, function __3(_) { var result; var __frame = { name: '__3', line: 111 }; return __func(_, this, arguments, __3, 0, __frame, function __$__3() { 
        return flows.filter(__cb(_, __frame, 1, 0, function ___(__0, __8) { result = __8; 
            
            
            deepEqual(result, [ 1, 3 ]); 
            return [ 1, 2, 3, 4 ].filter_(__cb(_, __frame, 5, 0, function ___(__0, __9) { result = __9; 
                
                
                deepEqual(result, [ 1, 3 ]); 
                return [ 1, 2, 3, 4 ].filter_(__cb(_, __frame, 9, 0, function ___(__0, __10) { result = __10; 
                    
                    
                    deepEqual(result, [ 1, 3 ]); 
                    return [ 1, 2, 3, 4 ].filter_(__cb(_, __frame, 13, 0, function ___(__0, __11) { result = __11; 
                        
                        
                        
                        
                        deepEqual(result, [ 1, 3 ]); 
                        return [ 1, 2, 3, 4 ].filter_(__cb(_, __frame, 19, 0, function ___(__0, __12) { result = __12; 
                            
                            
                            deepEqual(result, [ 1, 3 ]); 
                            return sparse().filter_(__cb(_, __frame, 23, 0, function ___(__0, __13) { result = __13; 
                                
                                
                                strictEqual(result.length, 2); 
                                deepEqual(result, [ 33, 99 ]); 
                                return sparse().filter_(__cb(_, __frame, 28, 0, function ___(__0, __14) { result = __14; 
                                    
                                    
                                    strictEqual(result.length, 2); 
                                    deepEqual(result, [ 33, 99 ]); 
                                    start(); _(); }, true, false), -1, function __7(_, val, i) { var __frame = { name: '__7', line: 139 }; return __func(_, this, arguments, __7, 0, __frame, function __$__7() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 % 2; return _(null, __1); }, true, false), val); }); }); }, true, false), function __6(_, val, i) { var __frame = { name: '__6', line: 134 }; return __func(_, this, arguments, __6, 0, __frame, function __$__6() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 % 2; return _(null, __1); }, true, false), val); }); }); }, true, false), -1, function __5(_, val) { var __frame = { name: '__5', line: 130 }; return __func(_, this, arguments, __5, 0, __frame, function __$__5() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 % 2; return _(null, __1); }, true, false), val); }); }); }, true, false), { parallel: 2 }, function __4(_, val) { var __frame = { name: '__4', line: 126 }; return __func(_, this, arguments, __4, 0, __frame, function __$__4() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 % 2; return _(null, __1); }, true, false), val); }); }); }, true, false), 2, function __3(_, val) { var __frame = { name: '__3', line: 120 }; return __func(_, this, arguments, __3, 0, __frame, function __$__3() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 % 2; return _(null, __1); }, true, false), val); }); }); }, true, false), function __2(_, val) { var __frame = { name: '__2', line: 116 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 % 2; return _(null, __1); }, true, false), val); }); }); }, true, false), [ 1, 2, 3, 4 ], function __1(_, val) { var __frame = { name: '__1', line: 112 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 % 2; return _(null, __1); }, true, false), val); }); }); }); }); 

asyncTest('every true', 9, function __4(_) { var result; var __frame = { name: '__4', line: 146 }; return __func(_, this, arguments, __4, 0, __frame, function __$__4() { 
        return flows.every(__cb(_, __frame, 1, 0, function ___(__0, __10) { result = __10; 
            
            
            strictEqual(result, true); 
            return [ 1, 2, 3, 4 ].every_(__cb(_, __frame, 5, 0, function ___(__0, __11) { result = __11; 
                
                
                strictEqual(result, true); 
                return [ 1, 2, 3, 4 ].every_(__cb(_, __frame, 9, 0, function ___(__0, __12) { result = __12; 
                    
                    
                    strictEqual(result, true); 
                    return [ 1, 2, 3, 4 ].every_(__cb(_, __frame, 13, 0, function ___(__0, __13) { result = __13; 
                        
                        
                        
                        
                        strictEqual(result, true); 
                        return [ 1, 2, 3, 4 ].every_(__cb(_, __frame, 19, 0, function ___(__0, __14) { result = __14; 
                            
                            
                            strictEqual(result, true); 
                            return sparse().every_(__cb(_, __frame, 23, 0, function ___(__0, __15) { result = __15; 
                                
                                
                                strictEqual(result, true); 
                                return sparse().every_(__cb(_, __frame, 27, 0, function ___(__0, __16) { result = __16; 
                                    
                                    
                                    strictEqual(result, true); 
                                    return [ 1, 4, 9, 16 ].every_(__cb(_, __frame, 31, 0, function ___(__0, __17) { result = __17; 
                                        
                                        
                                        strictEqual(result, true); 
                                        return [ 1, 4, 9, 16 ].every_(__cb(_, __frame, 35, 0, function ___(__0, __18) { result = __18; 
                                            
                                            
                                            strictEqual(result, true); 
                                            start(); _(); }, true, false), -1, function __9(_, val, i) { var __frame = { name: '__9', line: 181 }; return __func(_, this, arguments, __9, 0, __frame, function __$__9() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 4; return _(null, __1); }, true, false), i); }); }); }, true, false), function __8(_, val, i) { var __frame = { name: '__8', line: 177 }; return __func(_, this, arguments, __8, 0, __frame, function __$__8() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 4; return _(null, __1); }, true, false), i); }); }); }, true, false), -1, function __7(_, val, i) { var __frame = { name: '__7', line: 173 }; return __func(_, this, arguments, __7, 0, __frame, function __$__7() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 > 30; return _(null, __1); }, true, false), val); }); }); }, true, false), function __6(_, val, i) { var __frame = { name: '__6', line: 169 }; return __func(_, this, arguments, __6, 0, __frame, function __$__6() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 > 30; return _(null, __1); }, true, false), val); }); }); }, true, false), -1, function __5(_, val) { var __frame = { name: '__5', line: 165 }; return __func(_, this, arguments, __5, 0, __frame, function __$__5() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 5; return _(null, __1); }, true, false), val); }); }); }, true, false), { parallel: 2 }, function __4(_, val) { var __frame = { name: '__4', line: 161 }; return __func(_, this, arguments, __4, 0, __frame, function __$__4() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 5; return _(null, __1); }, true, false), val); }); }); }, true, false), 2, function __3(_, val) { var __frame = { name: '__3', line: 155 }; return __func(_, this, arguments, __3, 0, __frame, function __$__3() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 5; return _(null, __1); }, true, false), val); }); }); }, true, false), function __2(_, val) { var __frame = { name: '__2', line: 151 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 5; return _(null, __1); }, true, false), val); }); }); }, true, false), [ 1, 2, 3, 4 ], function __1(_, val) { var __frame = { name: '__1', line: 147 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 5; return _(null, __1); }, true, false), val); }); }); }); }); 

asyncTest('every false', 9, function __5(_) { var result; var __frame = { name: '__5', line: 187 }; return __func(_, this, arguments, __5, 0, __frame, function __$__5() { 
        return flows.every(__cb(_, __frame, 1, 0, function ___(__0, __10) { result = __10; 
            
            
            strictEqual(result, false); 
            return [ 1, 2, 3, 4 ].every_(__cb(_, __frame, 5, 0, function ___(__0, __11) { result = __11; 
                
                
                strictEqual(result, false); 
                return [ 1, 2, 3, 4 ].every_(__cb(_, __frame, 9, 0, function ___(__0, __12) { result = __12; 
                    
                    
                    strictEqual(result, false); 
                    return [ 1, 2, 3, 4 ].every_(__cb(_, __frame, 13, 0, function ___(__0, __13) { result = __13; 
                        
                        
                        
                        
                        strictEqual(result, false); 
                        return [ 1, 2, 3, 4 ].every_(__cb(_, __frame, 19, 0, function ___(__0, __14) { result = __14; 
                            
                            
                            strictEqual(result, false); 
                            return sparse().every_(__cb(_, __frame, 23, 0, function ___(__0, __15) { result = __15; 
                                
                                
                                strictEqual(result, false); 
                                return sparse().every_(__cb(_, __frame, 27, 0, function ___(__0, __16) { result = __16; 
                                    
                                    
                                    strictEqual(result, false); 
                                    return [ 1, 4, 9, 16 ].every_(__cb(_, __frame, 31, 0, function ___(__0, __17) { result = __17; 
                                        
                                        
                                        strictEqual(result, false); 
                                        return [ 1, 4, 9, 16 ].every_(__cb(_, __frame, 35, 0, function ___(__0, __18) { result = __18; 
                                            
                                            
                                            strictEqual(result, false); 
                                            start(); _(); }, true, false), -1, function __9(_, val, i) { var __frame = { name: '__9', line: 222 }; return __func(_, this, arguments, __9, 0, __frame, function __$__9() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 3; return _(null, __1); }, true, false), i); }); }); }, true, false), function __8(_, val, i) { var __frame = { name: '__8', line: 218 }; return __func(_, this, arguments, __8, 0, __frame, function __$__8() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 3; return _(null, __1); }, true, false), i); }); }); }, true, false), -1, function __7(_, val) { var __frame = { name: '__7', line: 214 }; return __func(_, this, arguments, __7, 0, __frame, function __$__7() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 > 40; return _(null, __1); }, true, false), val); }); }); }, true, false), function __6(_, val) { var __frame = { name: '__6', line: 210 }; return __func(_, this, arguments, __6, 0, __frame, function __$__6() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 > 40; return _(null, __1); }, true, false), val); }); }); }, true, false), -1, function __5(_, val) { var __frame = { name: '__5', line: 206 }; return __func(_, this, arguments, __5, 0, __frame, function __$__5() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 3; return _(null, __1); }, true, false), val); }); }); }, true, false), { parallel: 2 }, function __4(_, val) { var __frame = { name: '__4', line: 202 }; return __func(_, this, arguments, __4, 0, __frame, function __$__4() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 3; return _(null, __1); }, true, false), val); }); }); }, true, false), 2, function __3(_, val) { var __frame = { name: '__3', line: 196 }; return __func(_, this, arguments, __3, 0, __frame, function __$__3() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 3; return _(null, __1); }, true, false), val); }); }); }, true, false), function __2(_, val) { var __frame = { name: '__2', line: 192 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 3; return _(null, __1); }, true, false), val); }); }); }, true, false), [ 1, 2, 3, 4 ], function __1(_, val) { var __frame = { name: '__1', line: 188 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 3; return _(null, __1); }, true, false), val); }); }); }); }); 

asyncTest('some true', 9, function __6(_) { var result; var __frame = { name: '__6', line: 228 }; return __func(_, this, arguments, __6, 0, __frame, function __$__6() { 
        return flows.some(__cb(_, __frame, 1, 0, function ___(__0, __10) { result = __10; 
            
            
            strictEqual(result, true); 
            return [ 1, 2, 3, 4 ].some_(__cb(_, __frame, 5, 0, function ___(__0, __11) { result = __11; 
                
                
                strictEqual(result, true); 
                return [ 1, 2, 3, 4 ].some_(__cb(_, __frame, 9, 0, function ___(__0, __12) { result = __12; 
                    
                    
                    strictEqual(result, true); 
                    return [ 1, 2, 3, 4 ].some_(__cb(_, __frame, 13, 0, function ___(__0, __13) { result = __13; 
                        
                        
                        
                        
                        strictEqual(result, true); 
                        return [ 1, 2, 3, 4 ].some_(__cb(_, __frame, 19, 0, function ___(__0, __14) { result = __14; 
                            
                            
                            strictEqual(result, true); 
                            return sparse().some_(__cb(_, __frame, 23, 0, function ___(__0, __15) { result = __15; 
                                
                                
                                strictEqual(result, true); 
                                return sparse().some_(__cb(_, __frame, 27, 0, function ___(__0, __16) { result = __16; 
                                    
                                    
                                    strictEqual(result, true); 
                                    return [ 1, 4, 9, 16 ].some_(__cb(_, __frame, 31, 0, function ___(__0, __17) { result = __17; 
                                        
                                        
                                        strictEqual(result, true); 
                                        return [ 1, 4, 9, 16 ].some_(__cb(_, __frame, 35, 0, function ___(__0, __18) { result = __18; 
                                            
                                            
                                            strictEqual(result, true); 
                                            start(); _(); }, true, false), -1, function __9(_, val, i) { var __frame = { name: '__9', line: 263 }; return __func(_, this, arguments, __9, 0, __frame, function __$__9() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 === 2; return _(null, __1); }, true, false), i); }); }); }, true, false), function __8(_, val, i) { var __frame = { name: '__8', line: 259 }; return __func(_, this, arguments, __8, 0, __frame, function __$__8() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 === 2; return _(null, __1); }, true, false), i); }); }); }, true, false), -1, function __7(_, val) { var __frame = { name: '__7', line: 255 }; return __func(_, this, arguments, __7, 0, __frame, function __$__7() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 > 30; return _(null, __1); }, true, false), val); }); }); }, true, false), function __6(_, val) { var __frame = { name: '__6', line: 251 }; return __func(_, this, arguments, __6, 0, __frame, function __$__6() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 > 30; return _(null, __1); }, true, false), val); }); }); }, true, false), -1, function __5(_, val) { var __frame = { name: '__5', line: 247 }; return __func(_, this, arguments, __5, 0, __frame, function __$__5() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 3; return _(null, __1); }, true, false), val); }); }); }, true, false), { parallel: 2 }, function __4(_, val) { var __frame = { name: '__4', line: 243 }; return __func(_, this, arguments, __4, 0, __frame, function __$__4() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 3; return _(null, __1); }, true, false), val); }); }); }, true, false), 2, function __3(_, val) { var __frame = { name: '__3', line: 237 }; return __func(_, this, arguments, __3, 0, __frame, function __$__3() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 3; return _(null, __1); }, true, false), val); }); }); }, true, false), function __2(_, val) { var __frame = { name: '__2', line: 233 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 3; return _(null, __1); }, true, false), val); }); }); }, true, false), [ 1, 2, 3, 4 ], function __1(_, val) { var __frame = { name: '__1', line: 229 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 3; return _(null, __1); }, true, false), val); }); }); }); }); 

asyncTest('some false', 9, function __7(_) { var result; var __frame = { name: '__7', line: 269 }; return __func(_, this, arguments, __7, 0, __frame, function __$__7() { 
        return flows.some(__cb(_, __frame, 1, 0, function ___(__0, __10) { result = __10; 
            
            
            strictEqual(result, false); 
            return [ 1, 2, 3, 4 ].some_(__cb(_, __frame, 5, 0, function ___(__0, __11) { result = __11; 
                
                
                strictEqual(result, false); 
                return [ 1, 2, 3, 4 ].some_(__cb(_, __frame, 9, 0, function ___(__0, __12) { result = __12; 
                    
                    
                    strictEqual(result, false); 
                    return [ 1, 2, 3, 4 ].some_(__cb(_, __frame, 13, 0, function ___(__0, __13) { result = __13; 
                        
                        
                        
                        
                        strictEqual(result, false); 
                        return [ 1, 2, 3, 4 ].some_(__cb(_, __frame, 19, 0, function ___(__0, __14) { result = __14; 
                            
                            
                            strictEqual(result, false); 
                            return sparse().some_(__cb(_, __frame, 23, 0, function ___(__0, __15) { result = __15; 
                                
                                
                                strictEqual(result, false); 
                                return sparse().some_(__cb(_, __frame, 27, 0, function ___(__0, __16) { result = __16; 
                                    
                                    
                                    strictEqual(result, false); 
                                    return [ 1, 4, 9, 16 ].some_(__cb(_, __frame, 31, 0, function ___(__0, __17) { result = __17; 
                                        
                                        
                                        strictEqual(result, false); 
                                        return [ 1, 4, 9, 16 ].some_(__cb(_, __frame, 35, 0, function ___(__0, __18) { result = __18; 
                                            
                                            
                                            strictEqual(result, false); 
                                            start(); _(); }, true, false), -1, function __9(_, val, i) { var __frame = { name: '__9', line: 304 }; return __func(_, this, arguments, __9, 0, __frame, function __$__9() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 === 9; return _(null, __1); }, true, false), i); }); }); }, true, false), function __8(_, val, i) { var __frame = { name: '__8', line: 300 }; return __func(_, this, arguments, __8, 0, __frame, function __$__8() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 === 9; return _(null, __1); }, true, false), i); }); }); }, true, false), -1, function __7(_, val) { var __frame = { name: '__7', line: 296 }; return __func(_, this, arguments, __7, 0, __frame, function __$__7() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = !(__2 > 20); return _(null, __1); }, true, false), val); }); }); }, true, false), function __6(_, val) { var __frame = { name: '__6', line: 292 }; return __func(_, this, arguments, __6, 0, __frame, function __$__6() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = !(__2 > 20); return _(null, __1); }, true, false), val); }); }); }, true, false), -1, function __5(_, val) { var __frame = { name: '__5', line: 288 }; return __func(_, this, arguments, __5, 0, __frame, function __$__5() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 0; return _(null, __1); }, true, false), val); }); }); }, true, false), { parallel: 2 }, function __4(_, val) { var __frame = { name: '__4', line: 284 }; return __func(_, this, arguments, __4, 0, __frame, function __$__4() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 0; return _(null, __1); }, true, false), val); }); }); }, true, false), 2, function __3(_, val) { var __frame = { name: '__3', line: 278 }; return __func(_, this, arguments, __3, 0, __frame, function __$__3() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 0; return _(null, __1); }, true, false), val); }); }); }, true, false), function __2(_, val) { var __frame = { name: '__2', line: 274 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 0; return _(null, __1); }, true, false), val); }); }); }, true, false), [ 1, 2, 3, 4 ], function __1(_, val) { var __frame = { name: '__1', line: 270 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = __2 < 0; return _(null, __1); }, true, false), val); }); }); }); }); 

asyncTest('reduce', 3, function __8(_) { var result; var __frame = { name: '__8', line: 310 }; return __func(_, this, arguments, __8, 0, __frame, function __$__8() { 
        return flows.reduce(__cb(_, __frame, 1, 0, function ___(__0, __4) { result = __4; 
            
            
            strictEqual(result, 24); 
            return [ 1, 2, 3, 4 ].reduce_(__cb(_, __frame, 5, 0, function ___(__0, __5) { result = __5; 
                
                
                strictEqual(result, 24); 
                return sparse().reduce_(__cb(_, __frame, 9, 0, function ___(__0, __6) { result = __6; 
                    
                    
                    strictEqual(result, '/332/445/997'); 
                    start(); _(); }, true, false), function __3(_, v, val, i) { var __frame = { name: '__3', line: 319 }; return __func(_, this, arguments, __3, 0, __frame, function __$__3() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = v + '/' + __2 + i; return _(null, __1); }, true, false), val); }); }, ''); }, true, false), function __2(_, v, val) { var __frame = { name: '__2', line: 315 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = v * __2; return _(null, __1); }, true, false), val); }); }, 1); }, true, false), [ 1, 2, 3, 4 ], function __1(_, v, val) { var __frame = { name: '__1', line: 311 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = v * __2; return _(null, __1); }, true, false), val); }); }, 1); }); }); 

asyncTest('reduceRight', 3, function __9(_) { var result; var __frame = { name: '__9', line: 325 }; return __func(_, this, arguments, __9, 0, __frame, function __$__9() { 
        return flows.reduceRight(__cb(_, __frame, 1, 0, function ___(__0, __4) { result = __4; 
            
            
            strictEqual(result, 24); 
            return [ 1, 2, 3, 4 ].reduceRight_(__cb(_, __frame, 5, 0, function ___(__0, __5) { result = __5; 
                
                
                strictEqual(result, 24); 
                return sparse().reduceRight_(__cb(_, __frame, 9, 0, function ___(__0, __6) { result = __6; 
                    
                    
                    strictEqual(result, '/997/445/332'); 
                    start(); _(); }, true, false), function __3(_, v, val, i) { var __frame = { name: '__3', line: 334 }; return __func(_, this, arguments, __3, 0, __frame, function __$__3() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = v + '/' + __2 + i; return _(null, __1); }, true, false), val); }); }, ''); }, true, false), function __2(_, v, val) { var __frame = { name: '__2', line: 330 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = v * __2; return _(null, __1); }, true, false), val); }); }, 1); }, true, false), [ 1, 2, 3, 4 ], function __1(_, v, val) { var __frame = { name: '__1', line: 326 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return delay(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = v * __2; return _(null, __1); }, true, false), val); }); }, 1); }); }); 

asyncTest('sort', 4, function __10(_) { var array; var __frame = { name: '__10', line: 340 }; return __func(_, this, arguments, __10, 0, __frame, function __$__10() { array = [ 1, 2, 3, 4 ]; 
        
        return flows.sort(__cb(_, __frame, 2, 0, function __$__10() { 
            
            
            deepEqual(array, [ 1, 2, 3, 4 ], 'In order array sort ok'); 
            return array.sort_(__cb(_, __frame, 6, 0, function __$__10() { 
                
                
                deepEqual(array, [ 1, 2, 3, 4 ], 'In order array sort ok'); 
                array = [ 4, 3, 2, 1 ]; 
                return array.sort_(__cb(_, __frame, 11, 0, function __$__10() { 
                    
                    
                    deepEqual(array, [ 1, 2, 3, 4 ], 'Reverse array sort ok'); 
                    array = [ 3, 1, 2, 4 ]; 
                    return array.sort_(__cb(_, __frame, 16, 0, function __$__10() { 
                        
                        
                        deepEqual(array, [ 1, 2, 3, 4 ], 'Random array sort ok'); 
                        start(); _(); }, true, false), function __4(_, a, b) { var __frame = { name: '__4', line: 356 }; return __func(_, this, arguments, __4, 0, __frame, function __$__4() { return delay(__cb(_, __frame, 1, 0, _, true, false), a - b); }); }); }, true, false), function __3(_, a, b) { var __frame = { name: '__3', line: 351 }; return __func(_, this, arguments, __3, 0, __frame, function __$__3() { return delay(__cb(_, __frame, 1, 0, _, true, false), a - b); }); }); }, true, false), function __2(_, a, b) { var __frame = { name: '__2', line: 346 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return delay(__cb(_, __frame, 1, 0, _, true, false), a - b); }); }); }, true, false), array, function __1(_, a, b) { var __frame = { name: '__1', line: 342 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return delay(__cb(_, __frame, 1, 0, _, true, false), a - b); }); }); }); }); 

asyncTest('collectAll', 4, function __11(_) { var total, peak, count, results; 
    
    
    
    
    function doIt(i) { 
        return function __1(_) { var __frame = { name: '__1', line: 368 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { 
                count++; 
                peak = Math.max(count, peak); 
                return setTimeout(__cb(_, __frame, 3, 0, function __$__1() { 
                    return delay(__cb(_, __frame, 4, 0, function ___(__0, __1) { total = __1 + total; 
                        count--; 
                        return _(null, 2 * i); }, true, false), i); }, true, false), 10); }); }; } var __frame = { name: '__11', line: 362 }; return __func(_, this, arguments, __11, 0, __frame, function __$__11() { total = 0; peak = 0; count = 0; 
        
        
        
        return flows.spray([ doIt(1), doIt(2), doIt(3) ]).collectAll(__cb(_, __frame, 16, 0, function ___(__0, __1) { results = __1; 
            equal(total, 6); 
            ok(peak >= 2); 
            equal(count, 0); 
            deepEqual(results, [ 2, 4, 6 ]); 
            start(); _(); }, true, false)); }); }); 

asyncTest('collectOne', 4, function __12(_) { var total, peak, count, result; 
    
    
    
    
    function doIt(i) { 
        return function __1(_) { var __frame = { name: '__1', line: 391 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { 
                count++; 
                peak = Math.max(count, peak); 
                return setTimeout(__cb(_, __frame, 3, 0, function __$__1() { 
                    return delay(__cb(_, __frame, 4, 0, function ___(__0, __1) { total = __1 + total; 
                        count--; 
                        return _(null, 2 * i); }, true, false), i); }, true, false), 10); }); }; } var __frame = { name: '__12', line: 385 }; return __func(_, this, arguments, __12, 0, __frame, function __$__12() { total = 0; peak = 0; count = 0; 
        
        
        
        return flows.spray([ doIt(1), doIt(2), doIt(3) ]).collectOne(__cb(_, __frame, 16, 0, function ___(__0, __1) { result = __1; 
            ok(total == 1 || total == 2); 
            ok(peak >= 2); 
            ok(count > 0); 
            ok(result == 2 || result == 4); 
            start(); _(); }, true, false)); }); }); 

asyncTest('collectAll with limit', 1, function __13(_) { var total, peak, count, results; 
    
    
    
    
    function doIt(i) { 
        return function __1(_) { var __frame = { name: '__1', line: 414 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { 
                count++; 
                peak = Math.max(count, peak); 
                return setTimeout(__cb(_, __frame, 3, 0, function __$__1() { 
                    return delay(__cb(_, __frame, 4, 0, function ___(__0, __1) { total = __1 + total; 
                        count--; 
                        return _(null, 2 * i); }, true, false), i); }, true, false), 10); }); }; } var __frame = { name: '__13', line: 408 }; return __func(_, this, arguments, __13, 0, __frame, function __$__13() { total = 0; peak = 0; count = 0; 
        
        
        
        return flows.spray([ doIt(1), doIt(2), doIt(3) ], 2).collectAll(__cb(_, __frame, 16, 0, function ___(__0, __1) { results = __1; 
            deepEqual([ total, peak, count, results ], [ 6, 2, 0, [ 2, 4, 6 ] ]); 
            start(); _(); }, true, false)); }); }); 

asyncTest('contexts', 3, function __14(_) { var result; 
    function testContext(_, x) { var y; var __frame = { name: 'testContext', line: 429 }; return __func(_, this, arguments, testContext, 0, __frame, function __$testContext() { 
            flows.setContext({ val: x }); 
            
            
            return delay(__cb(_, __frame, 4, 0, function ___(__0, __1) { y = __1; 
                strictEqual(y, 2 * flows.getContext().val); 
                return _(null, y + 1); }, true, false), 2 * x); }); } var __frame = { name: '__14', line: 428 }; return __func(_, this, arguments, __14, 0, __frame, function __$__14() { 
        
        
        return flows.spray([ function __1(_) { 
                
                var __frame = { name: '__1', line: 440 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { 
                    return testContext(__cb(_, __frame, 1, 0, _, true, false), 3); }); }, function __2(_) { 
                
                
                var __frame = { name: '__2', line: 444 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { 
                    return testContext(__cb(_, __frame, 1, 0, _, true, false), 5); }); } ]).collectAll(__cb(_, __frame, 20, 0, function ___(__0, __3) { 
            
            
            result = __3; 
            deepEqual(result, [ 7, 11 ]); 
            start(); _(); }, true, false)); }); }); 


asyncTest('futures multiplex', 3, function __15(_) { var result1, result2, result3, f1, f10; 
    
    
    
    
    function doIt(future, _) { var __frame = { name: 'doIt', line: 458 }; return __func(_, this, arguments, doIt, 1, __frame, function __$doIt() { 
            return future(__cb(_, __frame, 1, 0, function ___(__0, __1) { result1 = __1 + result1; 
                return future(__cb(_, __frame, 2, 0, function ___(__0, __2) { result2 = __2 + result2; 
                    return delay(__cb(_, __frame, 3, 0, function __$doIt() { 
                        return future(__cb(_, __frame, 4, 0, function ___(__0, __3) { result3 = __3 + result3; _(); }, true, false)); }, true, false)); }, true, false)); }, true, false)); }); } var __frame = { name: '__15', line: 453 }; return __func(_, this, arguments, __15, 0, __frame, function __$__15() { result1 = 0; result2 = 0; result3 = 0; f1 = delay(false, 1); 
        
        
        f10 = delay(false, 10); 
        
        
        return flows.collect(__cb(_, __frame, 15, 0, function __$__15() { 
            
            deepEqual(result1, 12); 
            deepEqual(result2, 12); 
            deepEqual(result3, 12); 
            start(); _(); }, true, false), [ doIt(f1, false), doIt(f10, false), doIt(f1, false) ]); }); }); 


asyncTest('trampoline', 1, function __16(_) { 
    function sums(_, n) { var fn; var __frame = { name: 'sums', line: 477 }; return __func(_, this, arguments, sums, 0, __frame, function __$sums() { fn = function fn__1(_) { 
                var __frame = { name: 'fn__1', line: 478 }; return __func(_, this, arguments, fn__1, 0, __frame, function __$fn__1() { 
                    return function __$fn__1(_) { var __1 = n > 0; return function __$fn__1(__then) { if (__1) { return sums(__cb(_, __frame, 1, 0, function ___(__0, __3) { var __2 = n + __3; return _(null, __2); }, true, false), n - 1); } else { __then(); } }(function __$fn__1() { return _(null, 0); }); }(__cb(_, __frame, 1, 0, _, true, false)); }); }; 
            
            return function __$sums(__then) { if (n % 1000 === 0) { return flows.trampoline(__cb(_, __frame, 4, 0, _, true, false), fn); } else { 
                    return fn(__cb(_, __frame, 5, 0, _, true, false)); } }(_); }); } var __frame = { name: '__16', line: 476 }; return __func(_, this, arguments, __16, 0, __frame, function __$__16() { 
        
        return sums(__cb(_, __frame, 8, 0, function ___(__0, __1) { equals(__1, 50000 * 100001); 
            start(); _(); }, true, false), 100000); }); }); 


asyncTest('trampoline preserves context', 2, function __17(_) { var globals, fn, result; var __frame = { name: '__17', line: 488 }; return __func(_, this, arguments, __17, 0, __frame, function __$__17() { globals = require('streamline/lib/globals'); 
        fn = function fn__1(_) { 
            var __frame = { name: 'fn__1', line: 490 }; return __func(_, this, arguments, fn__1, 0, __frame, function __$fn__1() { 
                return _(null, globals.context.val); }); }; 
        
        globals.context.val = 'abc'; 
        return flows.trampoline(__cb(_, __frame, 6, 0, function ___(__0, __2) { result = __2; 
            strictEqual(result, 'abc'); 
            strictEqual(globals.context.val, 'abc'); 
            start(); _(); }, true, false), fn); }); });