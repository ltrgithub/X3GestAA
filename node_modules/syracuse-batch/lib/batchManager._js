"use strict";

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var tracer = require('syracuse-core').getTracer("batch");
var flows = require('streamline-runtime').flows;
var locale = require('streamline-locale');
var ez = require('ez-streams');
var x3client = require('syracuse-x3/lib/client');
var x3FolderHelper = require('syracuse-collaboration/lib/entities/lookupX3Folder');
var helpers = require('syracuse-core').helpers;
var config0 = require('config');
var globals = require('streamline-runtime').globals;
var multiTenant = (config0.hosting && config0.hosting.multiTenant);

// this map will retains all X3 batch clients
var clients = {};

exports.getBatchClient = function(code) {
	if (multiTenant) {
		var tenantId = globals.context.tenantId;
		var clients0 = clients[tenantId];
		return clients0 ? clients0[code] : undefined;
	}
	//console.error("SERVERS KEYS: " + JSON.stringify(Object.keys(clients), null, 2));
	return clients[code];
};

function getLocalePrefFromX3Lang(_, lang) {
	var iso = locale.defaultIso(lang);
	if (!iso) throw new Error(locale.format(module, "langIncorrect", lang));
	return getLocalePrefFromIso(_, iso);
}

var localesMap = {};

function getLocalePrefFromIso(_, iso) {
	var db = adminHelper.getCollaborationOrm(_);
	if (iso.length === 2) iso = locale.longIso(iso);
	locale.setCurrent(_, iso);
	var codeIso = iso.substring(0, 3) + iso.substring(3).toUpperCase();
	tracer.debug && tracer.debug("Use language: " + codeIso);
	if (!localesMap[codeIso]) localesMap[codeIso] = db.fetchInstances(_, db.model.getEntity(_, "localePreference"), {
		jsonWhere: {
			code: codeIso
		}
	})[0];
	if (!localesMap[codeIso]) throw new Error("Can't find locale preference corresponding to '" + iso + "'");
	return localesMap[codeIso];
}

exports.X3BatchClient = helpers.defineClass(function(options) {
	options = options || {};
	this.queueSize = options.queueSize || 100000;
	this.created = 0;
	this.q = ez.devices.queue({
		max: this.queueSize,
	});
	this.readFunnel = flows.funnel(1);
	this.destroyFunnel = flows.funnel(1);

}, null, {
	init: function(_, context, batchSrvInst) {
		if (batchSrvInst) {

			this.code = batchSrvInst.code(_);
			this.x3solution = batchSrvInst.x3solution(_);
			this.auto = batchSrvInst.auto(_);
			this.execInterval = batchSrvInst.execInterval(_) || 0;
			this.killOverTime = batchSrvInst.killOverTime(_) || 0;
			this.maxQueries = batchSrvInst.maxQueries(_) || 0;
			this.tags = batchSrvInst.tags(_) || "MAIN";
			this.refFolder = batchSrvInst.refFolder(_) || "X3";
			this.refUser = batchSrvInst.refUser(_) || "ADMIN";
			this.refLang = batchSrvInst.refLang(_) || "ENG";

			this.requestsFunnel = flows.funnel(this.maxQueries);
			if (multiTenant) {
				var tenantId = globals.context.tenantId;
				var clients0 = clients[tenantId];
				if (!clients0)
					clients0 = clients[tenantId] = {};
				clients0[this.code] = this;
			} else
				clients[this.code] = this;
		}


		tracer.info && tracer.info("[" + this.alias + "] X3 batch client initialized");
		this.initialized = true;
		return batchSrvInst;
	},
	start: function(_, context, batchSrvInst) {
		this.init(_, context, batchSrvInst);
		this.started = true;
		var self = this;
		this.refClients = [];
		batchSrvInst.x3solution(_).getServers(_, batchSrvInst.tags(_)).forEach_(_, function(_, srv) {
			var cli = self.createClient(_, context, {
				x3server: srv,
				lang: self.refLang,
				user: self.refUser,
				folder: self.refFolder,
				localePref: getLocalePrefFromX3Lang(_, self.refLang)
			});
			if (cli) {
				self.refClients.push(cli);
				context && context.instance && context.instance.$diagnoses.push({
					$severity: "success",
					$message: locale.format(module, "clientCreated", cli.pid, cli.x3server.serverHost(_), cli.x3server.serverPort(_))
				});
			}
		});
		batchSrvInst.status(_, "running");
		batchSrvInst.save(_);
		return batchSrvInst;
	},
	stop: function(_, context, batchSrvInst) {
		try {
			var self = this;
			this.refClients.forEach_(_, function(_, cli) {
				cli.disconnect(_);
				var msg = locale.format(module, "clientDisconnected", cli.pid, cli.x3server.serverHost(_), cli.x3server.serverPort(_));
				context && context.instance && context.instance.$diagnoses.push({
					$severity: "success",
					$message: msg
				});
				tracer.debug && tracer.debug("[" + self.code + "] " + msg);
			});
		} catch (e) {
			console.error(e.stack);
			context && context.instance && context.instance.$addError(e.message);
		}

		this.refClients = null;
		batchSrvInst.status(_, "stopped");
		batchSrvInst.save(_);
		return batchSrvInst;
	},
	createClient: function(_, context, options) {
		var self = this;
		try {
			var adminEP = adminHelper.getCollaborationEndpoint(_);
			var client = x3client.create({
				x3solution: this.x3solution,
				x3serverTags: this.tags,
				x3server: options.x3server
			});
			var _x3 = client.connect(_, {
				server: "",
				folder: options.folder,
				locale: options.lang,
				runtimeLog: options.runtimeLogFlag || "",
				runtimeLogDir: options.runtimeLogDir || ""
			});
			client.pid = _x3.pid;
			var session = context && (context.httpSession || context.session);
			var peer = session && (session.getData("requestInfo") || {}).peerAddress;
			this.sid = client.createSession(_, {
				locale: options.lang,
				userName: options.user,
				adxtyp: options.adxtyp || 35, // adxtyp = 35 for batch
				localePreferences: options.localePref,
				baseUrl: context && context.baseUrl,
				collaborationBaseUrl: adminEP && session ? session.host + adminHelper.getCollaborationEndpoint(_).getBaseUrl(_) : "",
				peerAddress: peer
			});
			tracer.debug && tracer.debug("[" + self.code + "] " + locale.format(module, "clientCreated", client.pid, client.x3server.serverHost(_), client.x3server.serverPort(_)));

			return client;
		} catch (e) {
			console.error(e.stack);
			context && context.instance && context.instance.$addError(e.message);
		}
	},
	propagateConfig: function() {
		//"/sdata/x3/erp/<dataset>/$service/rpc?module=ASYRSRVBATCH&name=ABATCH_MNGT_ALLPARAMS"
	},
	getRequests: function(_) {
		if (this.refClients && this.refClients.length > 0) {

			var params = {
				head: {
					method: "GET",
					url: "/sdata/x3/erp/X3/ASYRREQ?representation=ASYRREQ.$query&orderby=DAT,HEURE,NUMREQ",
					"accept": "application/json"
				},
				body: {}
			};
			var response = this.refClient.jsonSend(_, params);
			console.error("RESP: " + JSON.stringify(response, null, 2));
		}
	}

});

exports.initBatchServers = function(_) {
	var db = adminHelper.getCollaborationOrm(_);
	var x3solutions = db.fetchInstances(_, db.getEntity(_, "x3solution"));
	var bsEntity = db.getEntity(_, "batchServer");
	x3solutions.forEach_(_, function(_, s) {
		var bs = null,
			bss = db.fetchInstances(_, bsEntity, {
				jsonWhere: {
					code: s.code(_)
				}
			});
		// Get existing batch server config
		if (bss.length > 0) bs = bss[0];
		// create if if doesn't exist
		if (!bs) {
			bs = bsEntity.createInstance(_, db);
			bs.code(_, s.code(_));
			bs.x3solution(_, s);

			// compute ref endpoint
			var ep;
			if (s) {
				var motherFolders = x3FolderHelper.getFoldersFromJson(_, s, function(f) {
					return f.mother && f.mother.length === 0;
				});
				if (motherFolders && motherFolders.length > 0) {
					ep = s.getEp(_, motherFolders[0].name);
					if (!ep) {
						ep = s.createEndpoint(_, motherFolders[0].name);
					}
					if (ep) {
						bs.refEndpoint(_, ep);
					}
				}
			}
			bs.save(_);
		}

		// reset statuses
		if (bs.status(_) === "running") {
			bs.status(_, "stopped");
			bs.save(_);
		}

		// start the batch server
		if (bs.auto(_)) {
			bs.start(_);
		}

	});
};