"use strict";

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var tracer = require('syracuse-core').getTracer("batch");
var flows = require('streamline-runtime').flows;
var locale = require('syracuse-core').locale;
var ez = require('ez-streams');
var querystring = require('querystring');
var x3client = require('syracuse-x3/lib/client');
var x3FolderHelper = require('syracuse-collaboration/lib/entities/lookupX3Folder');
var X3BatchException = require("syracuse-batch/lib/x3BatchException").X3BatchException;

var helpers = require('syracuse-core').helpers;
var config0 = require('config');
var globals = require('streamline-runtime').globals;
var multiTenant = (config0.hosting && config0.hosting.multiTenant);

// to not execute controller loop
var simulation = config0.x3batch && config0.x3batch.simulation;
// to not trace some debug results
var lightDebugTraces = config0.x3batch && config0.x3batch.lightDebugTraces;

// this map will retains all X3 batch clients
var bClients = {};

exports.getBatchClient = function(code, start, ignoreErr) {
	var bc;
	if (multiTenant) {
		var tenantId = globals.context.tenantId;
		var bClients0 = bClients[tenantId];
		bc = bClients0 ? bClients0[code] : undefined;
	} else
		bc = bClients[code];
	//console.error("SERVERS KEYS: " + JSON.stringify(Object.keys(bClients), null, 2));
	if (!bc) {
		if (start) {
			return new exports.X3BatchClient(code);
		} else if (!ignoreErr) {
			throw new Error("Batch is not initialized for the solution '" + code + "'");
		}
	}
	return bc;
};

function removeBatchClient(code) {
	if (multiTenant) {
		var tenantId = globals.context.tenantId;
		var bClients0 = bClients[tenantId];
		if (bClients0) delete bClients0[code];
	} else {
		delete bClients[code];
	}
}

function getLocalePrefFromX3Lang(_, lang) {
	var iso = locale.defaultIso(lang);
	if (!iso) throw new Error(locale.format(module, "langIncorrect", lang));
	return getLocalePrefFromIso(_, iso);
}

var localesMap = {};

function getLocalePrefFromIso(_, iso) {
	var db = adminHelper.getCollaborationOrm(_);
	if (iso.length === 2) iso = locale.longIso(iso);
	locale.setCurrent(_, iso);
	var codeIso = iso.substring(0, 3) + iso.substring(3).toUpperCase();
	tracer.debug && tracer.debug("Use language: " + codeIso);
	if (!localesMap[codeIso]) localesMap[codeIso] = db.fetchInstance(_, db.model.getEntity(_, "localePreference"), {
		jsonWhere: {
			code: codeIso
		}
	});
	if (!localesMap[codeIso]) throw new Error("Can't find locale preference corresponding to '" + iso + "'");
	return localesMap[codeIso];
}

exports.X3BatchClient = helpers.defineClass(function(code) {
	this.code = code;
}, null, {
	_init: function(_, diagnoses, batchSrvInst) {
		var self = this;
		this.db = adminHelper.getCollaborationOrm(_);
		if (!batchSrvInst) {
			batchSrvInst = this.db.fetchInstance(_, this.db.model.getEntity(_, "batchServer"), {
				jsonWhere: {
					code: this.code
				}
			});
			if (!batchSrvInst) throw new Error(locale.format(module, "noBatchServer", this.code));
		}
		this.x3solutionCode = batchSrvInst.x3solution(_).code(_);
		this.totalMaxQueries = 0;
		this.monoPendings = {}; // datasets will be stored here to know if a mono request is pending
		//
		// this.code = batchSrvInst.code(_);
		this.auto = batchSrvInst.auto(_);
		this.execInterval = batchSrvInst.execInterval(_);
		// the two following are only necessary for X3 side
		this.killOverTime = batchSrvInst.killOverTime(_);
		this.maxDelay = batchSrvInst.maxDelay(_);
		//

		this.refUrl = batchSrvInst.refUrl(_);
		this.refFolder = batchSrvInst.refFolder(_);
		if (!this.refUrl || !this.refFolder) throw new Error(locale.format("noRefEndpoint"));
		this.refUser = batchSrvInst.refUser(_) || "ADMIN";
		this.refLang = batchSrvInst.refLang(_) || "ENG";

		// consider configuration that match to configurations where maxQueries is > 0
		var confEnabled = batchSrvInst.runtimes(_).toArray(_).filter_(_, function(_, r) {
			return r.maxQueries(_) > 0;
		});
		if (confEnabled.length === 0) throw new Error(locale.format(module, "noConfEnabled"));


		// select corresponding runtimes in x3solution
		var servers = batchSrvInst.x3solution(_).getServersByDescription(_, confEnabled.map_(_, function(_, r) {
			return r.description(_);
		}));
		var srvDescriptions = servers.map_(_, function(_, s) {
			return s.description(_);
		});

		var cl = this.adminClients = {};
		this.srvQueue = ez.devices.queue();
		// watch missing servers to alert with trace and/or diagnoses
		confEnabled.forEach_(_, function(_, conf) {
			if (srvDescriptions.indexOf(conf.description(_)) === -1) {
				var msg = locale.format(module, "srvNotAvailable", conf.description(_));
				diagnoses && diagnoses.push({
					$severity: "warning",
					$message: msg
				});
				tracer.debug && tracer.debug("[" + self.code + "] " + msg);
			} else {

				var srv = servers.filter_(_, function(_, s) {
					return s.description(_) === conf.description(_);
				})[0];
				if (srv && conf.maxQueries(_) > 0) {
					cl[srv.description(_)] = null;
					self._addSrvInQueue(_, diagnoses, srv.description(_), conf.maxQueries(_), srv.isMain(_));
				}

			}
		});

		return batchSrvInst;
	},
	start: function(_, diagnoses, batchSrvInst) {


		try {
			batchSrvInst = batchSrvInst || this.db.fetchInstance(_, this.db.model.getEntity(_, "batchServer"), {
				jsonWhere: {
					code: this.code
				}
			});
			tracer.info && tracer.info("############## [" + this.code + "]  Batch server starting ##############");
			this._init(_, diagnoses, batchSrvInst);
			if (multiTenant) {
				var tenantId = globals.context.tenantId;
				var bClients0 = bClients[tenantId];
				if (!bClients0)
					bClients0 = bClients[tenantId] = {};
				bClients0[this.code] = this;
			} else {
				bClients[this.code] = this;
			}

			if (this.srvQueue.contents().length === 0) {
				var errMsg = locale.format(module, "noAdmClientCreated");
				tracer.error && tracer.error(errMsg);
				diagnoses && diagnoses.push({
					$severity: "error",
					$message: errMsg
				});
				this.stop(_, diagnoses, batchSrvInst);
				return batchSrvInst;
			}

			// propagate configuration on one server only
			this._mngtAllParams(_, diagnoses, this.adminClients[Object.keys(this.adminClients)[0]]);


			// synchronize already pending queries
			var queries = this._listQueries(_, {
				where: "FLAG in (2, 5)"
			});
			this.srvQueue.adjust(function(arr) {
				return arr.map(function(s) {
					queries.filter(function(q) {
						return (q.SERVER.toLowerCase() + ":" + q.PORT) === s.descr;
					}).forEach(function(q) {
						s._queries.push(q);
					});
					return s;
				});
			});

			tracer.info && tracer.info("[" + this.code + "] X3 batch clients initialized: " + JSON.stringify(Object.keys(this.adminClients)));

			this.status = "running";
			// set status running
			if (batchSrvInst.status(_) !== "running") {
				batchSrvInst.status(_, "running");
				batchSrvInst.save(_);
			}
			tracer.info && tracer.info("############## [" + this.code + "]  Batch server started ##############\n");
			// start watching queries
			this._launchWatchLoop(_);
		} catch (e) {
			// stop the batch server if config propagation failed
			this.stop(_, null, batchSrvInst);
			if (e instanceof X3BatchException) {
				return;
			}
			console.error(e.stack);
			diagnoses && diagnoses.push({
				$severity: "error",
				$message: e.message,
				$stackTrace: e.safeStack
			});
			tracer.error && tracer.error("[" + this.code + "] " + e.message);
		}
		return batchSrvInst;
	},
	stopAll: function(_, diagnoses, batchSrvInst) {
		return this.stop(_, diagnoses, batchSrvInst, true);
	},
	stop: function(_, diagnoses, batchSrvInst, stopPendings) {
		tracer.info && tracer.info("############## [" + this.code + "]  Batch server stopping ##############");
		try {
			batchSrvInst = batchSrvInst || this.db.fetchInstance(_, this.db.model.getEntity(_, "batchServer"), {
				jsonWhere: {
					code: this.code
				}
			});
			this.status = "stopping";
			// set status stopped
			batchSrvInst.status(_, "stopping");
			batchSrvInst.save(_);

			// stop watching queries
			this._stopWatchLoop();

			// stop pendings queries
			if (stopPendings) {
				this._mngtStopServReq(_, diagnoses);
			}

			var servers = this.srvQueue.contents();
			//console.error("SERVERS: "+JSON.stringify(servers,null,2));
			// disconnect all administrative clients
			for (var i = 0; i < servers.length; i++) {
				this.srvQueue.read(_);
				var cliList = Object.keys(this.adminClients);
				//console.error("CLIENTS: "+JSON.stringify(cliList,null,2));
				var cli = this.adminClients[cliList[i]];
				if (cli) {
					try {
						cli.disconnect(_);
						var msg = locale.format(module, "clientDisconnected", cli.pid, cli.x3server.description(_));
						diagnoses && diagnoses.push({
							$severity: "success",
							$message: msg
						});
						tracer.info && tracer.info("[" + this.code + "] " + msg);

					} catch (e) {
						tracer.error && tracer.error("[" + this.code + "] Disconnection failed on client " + (cli && cli.pid));
					}
				}
			}
			// finally flush the clients map
			this.adminClients = {};
			if (this.countPendingRequests() === 0) {
				this.status === "stopped";
				this._setBatchInstanceStopped(_, batchSrvInst);
			}
		} catch (e) {
			console.error(e.stack);
			diagnoses && diagnoses.push({
				$severity: "error",
				$message: e.message
			});
		}
		return batchSrvInst;
	},
	countPendingRequests: function() {
		return this.srvQueue.contents().reduce(function(prev, curr) {
			return prev + curr._queries.length;
		}, 0);
	},
	_setBatchInstanceStopped: function(_, batchSrvInst) {
		var bs = batchSrvInst || this.db.fetchInstance(_, this.db.model.getEntity(_, "batchServer"), {
			jsonWhere: {
				code: this.code
			}
		});
		if (!bs) throw new Error(locale.format(module, "noBatchServer", this.code));
		tracer.info && tracer.info("############## [" + this.code + "]  Batch server stopped ##############\n");
		bs.status(_, "stopped");
		bs.save(_);
		removeBatchClient(this.code);
	},
	_createAdminClient: function(_, diagnoses, srvConf, options) {
		options = options || {};
		// create as many client as we have x3 runtimes
		var admCli = this._createClient(_, diagnoses, {
			x3server: this._getX3Server(_, srvConf.descr, {
				throwErr: true
			}),
			lang: this.refLang,
			user: this.refUser,
			folder: this.refFolder,
			throwErr: options.throwErr
		});
		if (admCli) {
			var successMsg = locale.format(module, "clientCreated", admCli.pid, srvConf.descr);
			tracer.info && tracer.info("[" + this.code + "] " + successMsg);
			diagnoses && diagnoses.push({
				$severity: "info",
				$message: successMsg
			});

			// put conf in client itself ; this will be useful to recreate client when steam will be closed unexpectedly
			admCli._srvConf = srvConf;
			// store administrative client
			this.adminClients[srvConf.descr] = admCli;
			this.totalMaxQueries += srvConf._maxQueries;
		} else {
			var errConnMsg = locale.format(module, "x3ConnectionFailed", srvConf.descr);
			tracer.error && tracer.error("[" + this.code + "] " + errConnMsg);
			diagnoses && diagnoses.push({
				$severity: "error",
				$message: errConnMsg
			});
		}
	},
	_createClient: function(_, diagnoses, options) {
		try {
			var adminEP = adminHelper.getCollaborationEndpoint(_);
			// ensure endpoint exists
			var x3sol = this._getX3Solution(_);
			var ep = x3sol.getEp(_, options.folder);
			if (!ep) ep = x3sol.createEndpoint(_, options.folder);

			// create X3 client
			var client = x3client.create({
				x3solution: this._getX3Solution(_),
				x3server: options.x3server
			});
			var localePref = getLocalePrefFromX3Lang(_, options.lang);
			var _x3 = client.connect(_, {
				server: this._getX3Solution(_).serverHost(_),
				folder: options.folder,
				locale: localePref.code(_),
				runtimeLog: options.runtimeLogFlag || "",
				runtimeLogDir: options.runtimeLogDir || ""
			});
			client.pid = _x3.pid;

			// !!!
			// this part of code doesn't retrieve session on syracuse startup
			// it works only when 'start' service is called manually
			var context = globals.context;
			var session = context && (context.httpSession || context.session);
			var host = session ? ((context.secure ? "https" : "http") + "://" + session.host) : "";
			// the impact is that baseUrl and collaborationBaseUrl are only sub urls like '/sdata/x3/erp/...'
			// !!!

			var sessionOpt = {
				userName: options.user,
				adxtyp: options.adxtyp || 35, // adxtyp = 35 for batch
				locale: localePref.code(_),
				localePreferences: options.localePref,
				baseUrl: host ? host + ep.getBaseUrl(_) : "", //context && context.baseUrl,
				collaborationBaseUrl: host ? (adminEP ? host + adminHelper.getCollaborationEndpoint(_).getBaseUrl(_) : "") : ""
			};
			//console.error("Session opt: "+require('util').inspect(sessionOpt,null,2));
			this.sid = client.createSession(_, sessionOpt);

			return client;
		} catch (e) {
			if (e.$diagnoses) {
				diagnoses && diagnoses.concat(e.$diagnoses);
				tracer.error && tracer.error("[" + this.code + "] X3 client connection failed: " + JSON.stringify(e.$diagnoses, null, 2));
			} else {
				if (!options.throwErr) tracer.error && tracer.error("[" + this.code + "] X3 client connection failed: " + e.stack);
				diagnoses && diagnoses.push({
					$severity: "error",
					$message: e.message
				});
				e.$diagnoses = [{
					$severity: "error",
					$message: e.message
				}];
			}
			// important to throw before calling removeSrvFromQueue in some cases !
			if (options.throwErr) throw e;
			this._removeSrvFromQueue(_, diagnoses, options.x3server.description(_));
		}
	},
	_getAdminClient: function(_, idx) {
		var self = this;
		idx = idx != null ? idx : 0;
		var cliList = Object.keys(this.adminClients);
		var cli;
		if (cliList.length === 0) {
			var e = new Error("[" + this.code + "] No administrative client found. Restart of batch controller will be done !!!");
			tracer.error && tracer.error(e.message);
			this.stop(function(err) {
				if (err) throw err;
				self.start(flows.check);
			});
			throw e;
		} else {
			cli = this.adminClients[cliList[idx]];
			//		console.error("KEY: "+cliList[idx]);
			//		console.error("Clients available: "+require('util').inspect(this.adminClients,null,1));
			if (cli && !cli.isAlive()) {
				tracer.warn && tracer.warn("[" + this.code + "] Admin client on '" + cli.x3server.description(_) + "' fall... Try to reconnect it");
				this.totalMaxQueries -= cli._srvConf._maxQueries;
				try {
					cli = this._createAdminClient(_, null, cli._srvConf);
				} catch (e) {
					this._removeSrvFromQueue(_, null, cli.x3server.description(_));
				}
			}
		}

		return cli;
	},
	_getX3Solution: function(_) {
		var solution = this.db.fetchInstance(_, this.db.model.getEntity(_, "x3solution"), {
			jsonWhere: {
				code: this.x3solutionCode
			}
		});
		if (!solution) throw new Error("No X3 solution found with code '" + this.x3solutionCode + "'");
		return solution;
	},
	_getX3Server: function(_, descr, options) {
		options = options || [];
		var sol = this._getX3Solution(_);
		var servers = sol.runtimes(_).toArray(_).filter_(_, function(_, s) {
			return s.description(_).toLowerCase() === descr.toLowerCase();
		});
		if (servers.length === 0) throw new Error("No X3 server found with description '" + descr + "'");
		if (options.throwErr && (servers[0].banned(_) || servers[0].disabled(_))) throw new Error("X3 server '" + descr + "' is not available");
		return servers[0];
	},
	_removeSrvFromQueue: function(_, diagnoses, descr) {
		var self = this;
		try {
			var mustDisconnect = false;
			this.srvQueue.adjust(function(arr) {
				return arr.filter(function(s) {
					if (s.descr === descr) {
						tracer.warn && tracer.warn("[" + self.code + "] Server '" + descr + "' is removed from batch server list");
						console.error("BB" + new Error("BBB").stack);
						self.totalMaxQueries -= s._maxQueries;
						mustDisconnect = true;
						return false;
					}
					return true;
				});
			});
			if (mustDisconnect) {
				if (this.adminClients[descr] && this.adminClients[descr].isAlive()) {
					this.adminClients[descr].disconnect(_);
					var msgDisc = locale.format(module, "clientDisconnected", this.adminClients[descr].pid, descr);
					tracer.info && tracer.info("[" + this.code + "] " + msgDisc);
					diagnoses && diagnoses.push({
						$severity: "info",
						$message: msgDisc
					});
				}
				delete this.adminClients[descr];
			}
			var msgDel = locale.format(module, "hostDeleted", descr);
			tracer.info && tracer.info("[" + this.code + "] " + msgDel);
			diagnoses && diagnoses.push({
				$severity: "warning",
				$message: msgDel
			});
		} catch (e) {
			console.error("[" + this.code + "] An error occured when purging server where we can't connect\n" + e.stack);
		}
	},
	_addSrvInQueue: function(_, diagnoses, descr, maxQueries, isMain) {
		var srvConf = {
			descr: descr.toLowerCase(),
			_maxQueries: maxQueries, // set max number
			_queries: [], // init array
			_isMain: isMain
		};
		this.srvQueue.put(srvConf);
		try {
			this._createAdminClient(_, diagnoses, srvConf, {
				throwErr: true
			});
		} catch (e) {
			tracer.error && tracer.error("[" + this.code + "] Create connection failed: " + e.message);
			return;
		}
		var msg = locale.format(module, "hostInserted", descr, maxQueries);
		tracer.info && tracer.info("[" + this.code + "] " + msg);
		diagnoses && diagnoses.push({
			$severity: "info",
			$message: msg
		});
	},
	_updateSrvInQueue: function(_, diagnoses, oldDescr, newDescr, maxQueries, isMain, reconnect) {
		for (var i = 0; i < this.srvQueue.contents().length; i++) {
			var s = this.srvQueue.contents()[i];
			if (s.descr === oldDescr) {
				if (maxQueries != null) {
					this.totalMaxQueries -= s._maxQueries;
					this.totalMaxQueries += maxQueries;
					s._maxQueries = maxQueries;
				}
				if (newDescr) s.descr = newDescr;
				if (isMain != null) s._isMain = isMain;

				// if host or port changed, we must disconnect administrative client and recreate new one
				if (reconnect) {
					if (this.adminClients[oldDescr] && this.adminClients[oldDescr].isAlive()) {
						this.adminClients[oldDescr].disconnect(_);
						var msgDisc = locale.format(module, "clientDisconnected", this.adminClients[oldDescr].pid, oldDescr);
						tracer.info && tracer.info("[" + this.code + "] " + msgDisc);
						diagnoses && diagnoses.push({
							$severity: "info",
							$message: msgDisc
						});
					}
					delete this.adminClients[oldDescr];
					// create new administrative connection
					try {
						this._createAdminClient(_, diagnoses, s, {
							throwErr: true
						});
					} catch (e) {
						tracer.error && tracer.error("[" + this.code + "] Change connection failed: " + e.message);
						return;
					}
				}

				var msg = locale.format(module, "hostUpdated", newDescr || oldDescr, maxQueries);
				tracer.info && tracer.info("[" + this.code + "] " + msg);
				diagnoses.push({
					$severity: "info",
					$message: msg
				});
				return true;
			}
		}
	},
	_launchWatchLoop: function(_) {
		// execute one first time to not have to wait for scheduling...
		this._executeControlLoop(_);
		// execute watch function every execInterval time
		this.loopInterval = flows.setInterval(this._executeControlLoop.bind(this), this.execInterval * 1000);
		tracer.info && tracer.info("[" + this.code + "] Queries listener is enabled and will handle " + this.totalMaxQueries + " queries every " + this.execInterval + " seconds");
	},
	_stopWatchLoop: function() {
		if (this.loopInterval) {
			// stop watch loop
			clearInterval(this.loopInterval);
			this.loopInterval = null;
			tracer.info && tracer.info("[" + this.code + "] Queries listener disabled");
		}
	},
	_sdataRequest: function(_, diagnoses, client, url, alias, method, body, options) {
		function _inspectResponse(_, resp) {
			if (resp) {
				if (!options.noTraces) tracer.debug && tracer.debug("[" + self.code + "] " + alias + " call result: " + JSON.stringify(resp, null, 2));
				if (resp.head && resp.head.status) {
					if (resp.head.status !== 200) {
						var diags = (resp.body && resp.body.$diagnoses) || [];
						if (diags.length === 0 && resp.head.message) {
							diags.push({
								$severity: "error",
								$message: locale.format(module, "x3err", alias, resp.head.message)
							});
						}
						if (diags && diags.length > 0) {
							diags.forEach(function(d) {
								diagnoses && diagnoses.push(d);
								tracer.error && tracer.error("[" + self.code + "] " + alias + " call result: " + resp.head.status + " - " + d.$message + "\n" + d.safeStack);
							});
							// some actions need to be blocking (like configuration propagation)
							if (options.throwErr) throw new X3BatchException(diags[0].$message);
						}
					} else {
						if (!options.noTraces) tracer.info && tracer.info("[" + self.code + "] " + alias + " call result: " + resp.head.status);
						return resp.body;
					}
				}
			}
			return null;
		}
		//
		//
		var self = this;
		options = options || {};
		var params = {
			head: {
				method: method,
				url: url,
				accept: "application/json",
				"content-type": "application/json"
			},
			body: body
		};

		if (client && client._srvConf && !client.isAlive()) {
			tracer.error && tracer.error("[" + this.code + "] client " + client.pid + " is not alive !!!");
			return;
		} else if (!client) {
			tracer.error && tracer.error("No client provided to execute sdata request '" + alias + "'");
			return;
		}

		if (!options.noTraces) {
			tracer.debug && tracer.debug("[" + this.code + "] Execute sdata request on " + client.x3server.description(_) + " with adonix: " + (client && client.pid) + " - alive: " + (client && client.isAlive()) + " (url=" + url + ")");
			tracer.debug && tracer.debug("[" + this.code + "] " + alias + " call params: " + JSON.stringify(params, null, 2));
		}

		var resp = client.jsonSend(_, params);
		return _inspectResponse(_, resp);
	},
	_execRpc: function(_, diagnoses, client, mod, name, method, body, options) {
		var url = this.refUrl + "/$service/rpc?module=" + mod + "&name=" + name;
		return this._sdataRequest(_, diagnoses, client, url, mod + ":" + name, method, body, options);
	},
	_mngtAllParams: function(_, diagnoses, client) {
		this._execRpc(_, diagnoses, client, "ASYRSRVBATCH", "ABATCH_MNGT_ALLPARAMS", "POST", {
			execInterval: this.execInterval,
			killOverTime: this.killOverTime,
			maxDelay: this.maxDelay
		}, {
			throwErr: true
		});
	},
	_mngtStopServReq: function(_, diagnoses) {
		for (var i = 0; i < Object.keys(this.adminClients).length; i++) {
			var cli = this._getAdminClient(_, i);
			if (cli) {
				this._execRpc(_, diagnoses, cli, "ASYRSRVBATCH", "ABATCH_STOP_SERVREQ", "POST", {
					server: cli.x3server.serverHost(_),
					port: cli.x3server.serverPort(_)
				});
			}
		}
	},
	_mngtServReq: function(_, diagnoses) {
		for (var i = 0; i < Object.keys(this.adminClients).length; i++) {
			var cli = this._getAdminClient(_, i);
			if (cli) {

				this._execRpc(_, diagnoses, cli, "ASYRSRVBATCH", "ABATCH_MNGT_SERVREQ", "POST", {
					server: cli.x3server.serverHost(_),
					port: cli.x3server.serverPort(_)
				});
				this._refreshPendingQueries(_, cli._srvConf);
			}
		}
	},
	_mngtAllReq: function(_, diagnoses) {
		this._execRpc(_, diagnoses, this._getAdminClient(_), "ASYRSRVBATCH", "ABATCH_MNGT_ALLREQ", "POST", {});
	},
	_mngtAllErr: function(_, diagnoses, numreq, diags) {
		var self = this;
		diags.forEach_(_, function(_, d) {
			self._execRpc(_, diagnoses, self._getAdminClient(_), "ASYRSRVBATCH", "ABATCH_MNGT_ALLERR", "POST", {
				numreq: numreq,
				$severity: d.$severity,
				$message: d.$message
			});
		});
	},
	_listQueries: function(_, params, options) {
		params = params || {};
		options = options || {};
		var _representation = options.representation || "ASYRREQ";
		params.representation = _representation + ".$query";
		//
		var url = this.refUrl + "/" + _representation + "?" + querystring.stringify(params);
		var resp = this._sdataRequest(_, null, this._getAdminClient(_), url, _representation, "GET", {}, options);
		return (resp && resp.$resources) || [];
	},
	_stopRecurrent: function(_, diagnoses, folderName) {
		for (var i = 0; i < Object.keys(this.adminClients).length; i++) {
			var cli = this._getAdminClient(_, i);
			if (cli) this._execRpc(_, diagnoses, cli, "ASYRSRVBATCH", "ABATCH_STOP_RECURRENT", "POST", {
				server: cli.x3server.serverHost(_),
				port: cli.x3server.serverPort(_),
				folder: folderName
			});
		}
	},
	_execQuery: function(_, srvConf, query, options) {
		var self = this;
		options = options || {};
		options.throwErr = true;


		if (query.MONO) {
			if (!this.monoPendings[query.DOSSIER]) {

				this.monoPendings[query.DOSSIER] = query.NUMREQ;

				// call X3 service ABATCH_STOP_RECURRENT to ask to stop all recurrent requests
				this._stopRecurrent(_, null, query.DOSSIER);
			}

			var pendingOnFolder = this._listQueries(_, {
				where: "(DOSSIER eq '" + query.DOSSIER + "')",
				orderBy: "FLAG desc,DAT asc,HEURE asc,NUMREQ asc"
			}, {
				noTraces: lightDebugTraces,
				representation: "ASYRREQPEND",
				throwErr: true
			});

			var monoFound = false;
			pendingOnFolder = pendingOnFolder.filter(function(q) {
				var isMyMono = (q.NUMREQ === query.NUMREQ);
				monoFound = monoFound || isMyMono;
				return !isMyMono;
			});
			if (!monoFound) {
				tracer.warn && tracer.warn("[" + self.code + "] Mono not retrieved in list and has probably been deleted");
				return;
			}

			tracer.info && tracer.info("[" + self.code + "] Consider mono " + query.NUMREQ + " - check pending or waiting requests : '" + query.DOSSIER + "': " + JSON.stringify(pendingOnFolder.map(function(q) {
				return q.NUMREQ;
			})));

			if (pendingOnFolder.length > 0) {
				tracer.info && tracer.info("[" + this.code + "] Some requests are pending or waiting on folder '" + query.DOSSIER + "', then the mono '" + query.NUMREQ + "' can't be executed now");
				return;
			} else {
				tracer.info && tracer.info("[" + this.code + "] No requests are pending or waiting on folder '" + query.DOSSIER + "', then the mono '" + query.NUMREQ + "' can be executed");
			}

		} else if (this.monoPendings[query.DOSSIER]) {
			tracer.info && tracer.info("[" + this.code + "] Mono request '" + this.monoPendings[query.DOSSIER] + "' is pending or waiting on folder '" + query.DOSSIER + "', then the query '" + query.NUMREQ + "' can be executed");
			return;
		}

		var cli = this._createClient(_, null, {
			x3server: this._getX3Server(_, srvConf.descr),
			lang: query.LAN,
			user: query.LOGIN,
			folder: query.DOSSIER,
			localePref: getLocalePrefFromIso(_, query.LANISO),
			throwErr: true
		});

		tracer.info && tracer.info("[" + this.code + "] Execute query " + (query.MONO ? " (MONO) " : "") + "'" + query.NUMREQ + "' on server " + srvConf.descr + " with client '" + cli.pid + "'");
		var url = "/sdata/x3/erp/" + query.DOSSIER + "/$service/batch?requestId=" + query.NUMREQ;
		// Ask X3 to execute query
		this._sdataRequest(function(err) {
			if (err) {
				self._listQueries(function(err2, _q) {
					if (err2) tracer.error && tracer.error("[" + self.code + "] Error when listing queries to get interruption reason: " + err2.stack);
					if (_q && _q.length && (_q[0].FLAG === 5 || _q[0].FLAG === 6)) {
						tracer.warn && tracer.warn("[" + self.code + "] The query '" + query.NUMREQ + "' has been aborted");
					} else {
						tracer.error && tracer.error("[" + self.code + "] An error occured when executing query '" + query.NUMREQ + "': " + err.stack);
					}
				}, {
					where: "(NUMREQ eq " + query.NUMREQ + ")"
				}, {
					noTraces: lightDebugTraces
				});
			}
			if (cli && cli.isAlive()) {
				tracer.info && tracer.info("[" + self.code + "] Disconnect batch client " + cli.pid);
				cli.disconnect(flows.ignore);
				cli = null;
			}
			// remove pending requests from memory
			srvConf._queries.splice(srvConf._queries.findIndex(function(q) {
				if (q.NUMREQ === query.NUMREQ) {
					// remove Mono from memory map
					if (query.MONO && self.monoPendings[query.DOSSIER] === query.NUMREQ) {
						delete self.monoPendings[query.DOSSIER];
					}
					return true;
				}
			}), 1);

			// if batch server is currently stopping and there are no other request pending
			if (self.status === "stopping" && self.countPendingRequests() === 0) {
				self.status === "stopped";
				// if administrative client are also stopped
				if (Object.keys(self.adminClients).length === 0) {
					self._setBatchInstanceStopped(flows.ignore);
				}
			}

		}, null, cli, url, "Batch request " + query.NUMREQ, "POST", {}, options);
		// add the query number in server instance
		srvConf._queries.push(query);
	},
	_refreshPendingQueries: function(_, _srvConf) {
		// TODO: Split where to 15 NUMREQ max !!!
		var self = this;
		// if requests are pending on this server, we check their status and actualize the list on server instance
		var newPending = [];
		if (_srvConf._queries.length > 0) {
			// get the requests list with only previous launched requests numbers
			var temp = _srvConf._queries.map(function(q) {
				return q.NUMREQ;
			}).join(',');

			var queriesWhere = "(NUMREQ in (" + temp + "))";
			var queries = self._listQueries(_, {
				where: queriesWhere
			}, {
				noTraces: lightDebugTraces
			});
			queries.forEach_(_, function(_, query) {
				tracer.info && tracer.info("[" + self.code + "] Query " + query.NUMREQ + " status: " + query.FLAG);
				if (query.FLAG === 1 || query.FLAG === 2 || query.FLAG === 5) {
					// keep in array if still running (or waiting because just launched)
					newPending.push(query);
				} else {
					// if a mono ended, set endpoint free to launch new requests
					if (query.MONO) {
						if (self.monoPendings[query.DOSSIER] === query.NUMREQ) {
							delete self.monoPendings[query.DOSSIER];
						}
					}
				}
			});
		}
		// this check is mandatory for deleted mono requests
		Object.keys(this.monoPendings).forEach_(_, function(_, k) {
			var monoNum = self.monoPendings[k];
			var _queries = self._listQueries(_, {
				where: "(NUMREQ eq " + monoNum + ")"
			}, {
				noTraces: lightDebugTraces
			});
			if (_queries.length === 0) delete self.monoPendings[k];
		});

		_srvConf._queries = newPending;
		tracer.info && tracer.info("[" + this.code + "] Pending queries on " + _srvConf.descr + ": " + _srvConf._queries.length + "/" + _srvConf._maxQueries + " " + JSON.stringify(_srvConf._queries.map(function(q) {
			return q.NUMREQ;
		})));
	},
	_executeControlLoop: function(_) {

		function _selectServer(_, mainOnly) {

			var srvConf;
			// select Main server if available (set in the config with a maxQueries parameter)				
			var nbSrvConcerned = 0;
			if (mainOnly && self.srvQueue.contents().length > 1) {
				self.srvQueue.adjust(function(arr) {
					return arr.sort(function(srvA, srvB) {
						if (srvA._isMain) {
							nbSrvConcerned++;
							return -1;
						} else if (srvB._isMain) {
							nbSrvConcerned++;
							return 1;
						}
						return 0;
					});
				});
			} else {
				nbSrvConcerned = self.srvQueue.contents().length;
			}
			//console.error("QUEUE ORDER: "+JSON.stringify(self.srvQueue.contents().map(function(s) {return s.descr;}),null,2));
			// if first server is not MAIN and request must be executed on main
			if (mainOnly && nbSrvConcerned === 0) {
				tracer.warn && tracer.warn("[" + self.code + "] No Main server available");
				throw new Error(locale.format(module, "noMainSrv"));
			}
			for (var i = 0; i < nbSrvConcerned; i++) {
				// pop a server from the queue
				srvConf = self.srvQueue.read(_);

				// get srv instance
				var srv = self._getX3Server(_, srvConf.descr);
				// refresh pending requests list
				self._refreshPendingQueries(_, srvConf);
				if (srv.disabled(_) || srv.banned(_)) {
					tracer.warn && tracer.warn("[" + self.code + "] The server '" + srvConf.descr + "' is not available and will be removed from batch controller list");
					// put again in the queue to remove properly
					self.srvQueue.put(srvConf);
					self._removeSrvFromQueue(_, null, srv.description(_));
				} else if (srvConf._queries.length < srvConf._maxQueries) {
					// if max number of concurrent queries is not reached for this server, return the server
					// the server instance will be put again in the queue after the launch of the query
					tracer.info && tracer.info("[" + self.code + "] Select (" + (mainOnly ? "MAIN" : "LB") + ") '" + srvConf.descr + "' server: pending: " + srvConf._queries.length + " - max: " + srvConf._maxQueries);
					return srvConf;
				} else {
					// if max number of concurrent queries is reached for this server, put the server again in the queue
					tracer.warn && tracer.warn("[" + self.code + "] Ignore (because is full) '" + srvConf.descr + "' server: pending: " + srvConf._queries.length + " - max: " + srvConf._maxQueries);
					// console.error("MAX QUERIES REACHED SO PUT THE SRV CONF IN THE QUEUE");
					self.srvQueue.put(srvConf);
				}
			}
			tracer.warn && tracer.warn("[" + self.code + "] No free slot found on servers");

		}
		//
		//
		if (!this.loopRunning) {
			this.loopRunning = true;
			var self = this;
			tracer.info && tracer.info("============== [" + this.code + "]  begin control loop ==============");
			tracer.info && tracer.info("[" + this.code + "] The batch controller can handle " + this.totalMaxQueries + " queries simultaneously");

			//console.error("Servers queue contents: " + JSON.stringify(this.srvQueue.contents(), null, 2));

			try {
				this._mngtServReq(_);
				this._mngtAllReq(_);

				var queries = this._listQueries(_, {
					count: this.totalMaxQueries,
					orderBy: "FLAG desc,DAT asc,HEURE asc,NUMREQ asc"
				}, {
					// ASYRREQPEND allows to get only requests :
					// - not concerned by folder busy by mono requests
					// - EXENOW eq true
					representation: "ASYRREQPEND"
				});

				// consider only request with "stand by" status (1) and EXENOW flag set (that means the execution datetime is reached)
				queries = queries.filter(function(q) {
					return q.FLAG === 1 && q.EXENOW === true;
				});
				tracer.info && tracer.info("[" + self.code + "] Nb queries to execute (" + queries.length + ") " + queries.map(function(q) {
					return q.NUMREQ;
				}));

				var queriesWaiting = [];
				for (var i = 0; i < queries.length; i++) {
					var query = queries[i];
					tracer.info && tracer.info("************** [" + self.code + "] Begin to consider query " + query.NUMREQ + "**************");
					var srvConf = _selectServer(_, query.MAISRV);
					if (srvConf) {
						try {
							// simulation mode can be used to test server selection algorithm but to not execute queries
							if (!simulation) {
								this._execQuery(_, srvConf, query);
							}
						} catch (e) {
							if (e instanceof X3BatchException) {
								tracer.error && tracer.error("[" + this.code + "] Query execution failed '" + query.NUMREQ + "' on server " + srvConf.descr + "\n" + e.message);
							} else {
								tracer.error && tracer.error("[" + this.code + "] Query execution failed '" + query.NUMREQ + ": " + e.message);
								this._mngtAllErr(_, null, query.NUMREQ, e.$diagnoses || [{
									$severity: "error",
									$message: e.message
								}]);
							}
						} finally {
							// put the server instance in the queue
							// console.error("Put server configuration into the queue");
							this.srvQueue.put(srvConf);
						}
					} else {
						queriesWaiting.push(query.NUMREQ);
					}
					tracer.info && tracer.info("************** [" + self.code + "] End to consider query " + query.NUMREQ + "**************");
				}
				if (queriesWaiting.length) {
					tracer.info && tracer.info("[" + self.code + "] Queries waiting for free servers: " + JSON.stringify(queriesWaiting));
				}
			} catch (e) {
				tracer.error && tracer.error("[" + this.code + "] An error occured during control loop\n" + e.stack);
			} finally {
				tracer.info && tracer.info("============== [" + this.code + "]  end control loop ================\n");
				this.loopRunning = false;
			}
		} else {
			tracer.warn && tracer.warn("[" + this.code + "] previous loop not ended !!!"); // probably due to active debugger on X3 supervisor side
		}
	}

});

exports.initBatchServers = function(_) {
	var db = adminHelper.getCollaborationOrm(_);
	var x3solutions = db.fetchInstances(_, db.getEntity(_, "x3solution"));
	var bsEntity = db.getEntity(_, "batchServer");
	x3solutions.forEach_(_, function(_, s) {
		var bs = db.fetchInstance(_, bsEntity, {
			jsonWhere: {
				code: s.code(_)
			}
		});

		// create if if doesn't exist
		if (!bs) {
			bs = bsEntity.createInstance(_, db);
			bs.code(_, s.code(_));
			bs.x3solution(_, s);

			// compute ref endpoint
			var ep;
			if (s) {
				try {
					var motherFolders = x3FolderHelper.getFoldersFromJson(_, s, function(f) {
						return f.mother && f.mother.length === 0;
					});
					if (motherFolders && motherFolders.length > 0) {
						ep = s.getEp(_, motherFolders[0].name);
						if (!ep) {
							ep = s.createEndpoint(_, motherFolders[0].name);
						}
						if (ep) {
							bs.refEndpoint(_, ep);
						}
					}
				} catch (e) {
					console.error("An error occured when synchronising x3 solution and batch server '" + s.code(_) + "'\n" + e.stack);
				}
			}
		}
		// reset status
		if (bs.status(_) === "running" || bs.status(_) === "stopping") {
			bs.status(_, "stopped");
		}
		// synchronize runtimes list with x3solution configuration
		try {
			bs.syncServers(_);
		} catch (e) {
			console.error(e.stack);
		}
		// persist data
		bs.save(_);

		if (!s.batchServer(_)) {
			s.batchServer(_, bs);
			s.save(_);
		}

		// start the batch server
		if (bs.active(_) && bs.auto(_)) {
			bs.start(_);
		}

	});
};