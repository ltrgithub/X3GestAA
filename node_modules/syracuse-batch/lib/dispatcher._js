"use strict";
var syracuse;
var url = require('url');
var batchManager = require('./batchManager');
var mock = require('syracuse-load/lib/mock');
var config = require('config');
var globals = require('streamline-runtime').globals;

var multiTenant = config.hosting && config.hosting.multiTenant;

exports.dispatcher = function(config) {
	return function(_, request, response) {
		console.log("DISP " + request.url);
		syracuse = syracuse || require('syracuse-main/lib/syracuse');
		if (syracuse.server instanceof mock.MockStreamServer && !request.fromNanny && !request._request.fromNanny || !(syracuse.server instanceof mock.MockStreamServer) && (!config.system || !config.system.enableDevelopmentFeatures)) {
			response.writeHead("404", {});
			return response.end("Resource not found.");
		}
		var parsed = url.parse(request.url, true);
		var parts = parsed.pathname.split('/');
		var tenant = parsed.query.tenantId;
		if (multiTenant && tenant && !syracuse.initializedTenant(tenant)) {
			response.writeHead("200", {});
			console.log("Ignored");
			return response.end("Ignored");
		} else {
			globals.context.tenantId = tenant;
		}
		var command = parsed.pathname.split('/')[2];
		console.log("TENANT " + globals.context.tenantId);
		try {
			var client = batchManager.getBatchClient(parsed.query.code, (command === "start"));
			if (command in client)
			// TODO: 1st parameter: diagnoses array
			// second parameter: instance of batch Server (will be created internally when necessary)
				client[command](_, undefined, undefined);
			response.end("OK");
		} catch (e) {
			console.error("Batch server dispatcher error: " + e.stack);

			response.writeHead(500, {
				"Content-Type": "application/json",
				"Content-length": ("" + e).length
			});
			response.end("" + e);
		}
	};
};