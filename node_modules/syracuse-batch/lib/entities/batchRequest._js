"use strict";

var locale = require('streamline-locale');
var bm = require('syracuse-batch/lib/batchManager');
var lbMode = (process.argv[2] && (process.argv[2].substr(0, 1) === "W" || process.argv[2].substr(0, 1) === "N"));
var multiTenant;

exports.entity = {
	$isPersistent: false,
	$properties: {
		FLAG: {
			$title: "Flag"
		},
		NUMREQ: {
			$title: "Request number",
			$type: "integer"
		},
		DOSSIER: {
			$title: "Folder"
		},
		LOGIN: {
			$title: "User"
		},
		DAT: {
			$title: "Date",
			$type: "date"
		},
		HDEB: {
			$title: "Start time",
			$type: "time"
		},
		HEURE: {
			$title: "End time",
			$type: "time"
		},
		LANISO: {
			$title: "Language"
		},
		SERVER: {
			$title: "Server"
		},
		PORT: {
			$title: "Port",
			$type: "integer"
		},
		MONO: {
			$title: "Mono",
			$type: "boolean"
		},
		RECURRENT: {
			$tilte: "Recurrent",
			$type: "boolean"
		}
	},
	$titleTemplate: "Batch server",
	$valueTemplate: "Batch server",
	$descriptionTemplate: "Batch server",
	$relations: {},
	$functions: {},
	$init: function(_, instance, context) {

		var code = context && context.parameters && context.parameters.code;
		if (multiTenant === undefined) {
			var config = require('config');
			multiTenant = !! (config.hosting && config.hosting.multiTenant);
		}
		var result;

		var bc = bm.getBatchClient(code);
		if (!bc) {
			if (!multiTenant) throw new Error("Batch server '" + code + "' is not available");
		} else {
			result = {};
			result[context.request.connection.localPort] = bc.getRequests(_);
		}


		instance.alias(_, alias);
		var content = false;
		if (result) Object.keys(result).forEach_(_, function(_, key) {
			content = true;
			addInfosLine(_, key, result[key]);
		});
		if (!content && multiTenant) {
			instance.$addDiagnose("info", "Batch server " + code + " not yet started anywhere");
		}
		// if (!instance.$diagnoses || instance.$diagnoses.length === 0)
		//	instance.$addDiagnose("info", "Test");
	},

	$fetchInstances: function(_, context, parameters) {
		return bm.getBatchClient(this.code(_)).requests(_, parameters);
	},
};