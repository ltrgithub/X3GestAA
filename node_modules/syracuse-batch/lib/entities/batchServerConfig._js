"use strict";
var locale = require('streamline-locale');

exports.entity = {
	$titleTemplate: "X3 server",
	$descriptionTemplate: "X3 server settings",
	$valueTemplate: "{description}",
	$helpPage: "Administration-reference_Sage-ERP-X3-Servers",
	$isPersistent: false,
	$properties: {
		description: {
			$title: "Description",
			$description: "Friendly name",
			$isMandatory: true,
			$isUnique: true,
			$compute: function(_, instance) {
				return instance.serverHost(_) + ":" + instance.serverPort(_);
			},
			$isHidden: true
		},
		serverHost: {
			$title: "Server host",
			$description: "Physical server name or IP address",
			$isReadOnly: true
		},
		serverPort: {
			$title: "Server port",
			$type: "integer",
			$isReadOnly: true
		},
		maxQueries: {
			$title: "Maximum no. active queries",
			$type: "integer",
			$default: 0
		},
	},
	$events: {
		$beforeSave: [

			function(_, instance) {
				if (instance._parent && instance.$snapshot && instance.$snapshot.maxQueries(_) !== instance.maxQueries(_)) {
					var bsClient = instance._parent.getClient(_, false, true);
					// batch configuration propagation
					if (instance.maxQueries(_) > 0) {
						instance._parent.$diagnoses = instance._parent.$diagnoses || [];
						if (bsClient) {
							// this flag alreadyExists concerns the batch controller itself (and not the entity)
							// here we are synchronizing configurations and batch controller runtime
							var alreadyExists = bsClient._updateSrvInQueue(_, instance._parent.$diagnoses, instance.description(_), null, instance.maxQueries(_));
							if (!alreadyExists) {
								// if the batch controller server entry doesn't exists
								var x3srv = instance._parent.x3solution(_).runtimes(_).toArray(_).filter_(_, function(_, srv) {
									return srv.description(_) === instance.description(_);
								});
								x3srv = x3srv && x3srv[0];
								// we create the entry on the fly
								if (x3srv) {
									bsClient._addSrvInQueue(_, instance._parent.$diagnoses, instance.description(_), instance.maxQueries(_), x3srv.isMain(_));
								}
							}
						}
					} else {
						if (bsClient) {
							bsClient._removeSrvFromQueue(_, instance._parent.$diagnoses, instance.description(_));

						}
					}
				}
			}
		]
	}
};