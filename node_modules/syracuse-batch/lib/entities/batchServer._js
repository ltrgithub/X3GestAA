"use strict";

var locale = require('streamline-locale');
var bm = require('syracuse-batch/lib/batchManager');
var X3BatchClient = bm.X3BatchClient;
var config = require('config');

exports.entity = {
	$titleTemplate: "Batch server",
	$valueTemplate: "{code}",
	$descriptionTemplate: "Batch server",
	$properties: {
		code: {
			$title: "Code",
			$isReadOnly: true,
			$isUnique: true,
			$isMandatory: true,
			$linksToDetails: true
		},
		active: {
			$type: "boolean",
			$title: "Active",
			$default: false
		},
		auto: {
			$type: "boolean",
			$title: "Auto start",
			$default: false
		},
		execInterval: {
			$title: "Time between two searches (sec)",
			$type: "integer",
			$isMandatory: function(_, instance) {
				return instance.active(_);
			},
			$default: 30,
			$isNullable: true
		},
		killOverTime: {
			$title: "Timeout search time (sec)",
			$type: "integer",
			$isMandatory: function(_, instance) {
				return instance.active(_);
			},
			$default: 30,
			$isNullable: true
		},
		maxDelay: {
			$title: "Maximum delay to launch a query (minutes)",
			$type: "integer",
			$default: 0,
			$isNullable: true
		},
		status: {
			$title: "Status",
			$isReadOnly: true,
			$enum: [{
				$value: "running",
				$title: "Running"
			}, {
				$value: "stopped",
				$title: "Stopped"
			}, {
				$value: "unavailable",
				$title: "Unavailable"
			}],
			$default: "stopped"
		},
		refFolder: {
			$title: "Folder",
			$description: "Mother folder used for administrative tasks",
			$default: "X3",
			$isNullable: false
		},
		refUser: {
			$title: "X3 user",
			$description: "X3 user used for administrative tasks",
			$default: "ADMIN",
			$isNullable: false
		},
		refLang: {
			$title: "X3 language",
			$description: "X3 language used for administrative tasks",
			$default: "ENG",
			$isNullable: false
		},
		refUrl: {
			$isHidden: true,
			$isNullable: true
		}
	},
	$relations: {
		x3solution: {
			$type: "x3solution",
			$isMandatory: true,
			$isReadOnly: true,
			$cascadeDelete: true,
			$propagate: function(_, instance, val) {
				if (val) {
					instance.code(_, val.code(_));
				}
			}
		},
		runtimes: {
			$type: "batchServerConfigs",
			$isChild: true,
		},
		refEndpoint: {
			$type: "endPoint",
			$title: "Administrative endpoint",
			$description: "Endpoint corresponding to mother folder used for administrative tasks",
			$isMandatory: true,
			$nullOnDelete: true,
			$isNullable: true,
			$propagate: function(_, instance, val) {
				if (val === null) {
					instance.refFolder(_, null);
					instance.refUrl(_, null);
					instance.stop(_);
				} else if (val) {
					instance.refFolder(_, val.x3ServerFolder(_));
					instance.refUrl(_, val.getBaseUrl(_));
				}
			}
		}
	},
	$functions: {
		getClient: function(_, start) {
			return bm.getBatchClient(this.code(_), start);
		},
		start: function(_, diagnoses) {
			this.getClient(_, true).start(_, diagnoses, this, undefined);
		},
		stop: function(_, diagnoses) {
			this.getClient(_).stop(_, diagnoses, this, undefined);
		},
		stopAll: function(_, diagnoses, stopPendings) {
			this.getClient(_).stopAll(_, diagnoses, this, undefined);
		},
		syncServers: function(_, startup) {
			var confEntity = this._db.getEntity(_, "batchServerConfig");
			var self = this;
			var sList = [];
			var rList = this.runtimes(_).toArray(_).map_(_, function(_, r) {
				return r.description(_);
			});
			this.x3solution(_).runtimes(_).toArray(_).forEach_(_, function(_, r) {
				sList.push(r.description(_));
				// if not already synchronized
				if (rList.indexOf(r.description(_)) === -1) {
					var c = confEntity.createInstance(_, self._db);
					c.serverHost(_, r.serverHost(_));
					c.serverPort(_, r.serverPort(_));
					c.maxQueries(_, 0);
					self.runtimes(_).set(_, c);
				}
			});
			var mustRestart = false;
			this.runtimes(_).toArray(_).forEach_(_, function(_, r) {
				if (sList.indexOf(r.description(_)) === -1) {
					r.deleteSelf(_);
					mustRestart = !startup && true;
				}
			});
			this.save(_);
			this.x3solution(_).batchServer(_, this);
			this.x3solution(_).save(_);
			if (mustRestart) {
				this.stop(_);
				this.start(_);
			}
		},
	},
	$services: {
		start: {
			$title: "Start",
			$description: "Start batch controller",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) !== "stopped";
			},
			$execute: function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				instance.start(_, instance.$diagnoses);
			},
		},
		stop: {
			$title: "Stop",
			$description: "Stop batch controller only",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) === "stopped";
			},
			$execute: function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				instance.stop(_, instance.$diagnoses);
			},
		},
		stopAll: {
			$title: "Stop ALL",
			$description: "Stop batch server and all pending queries",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) === "stopped";
			},
			$execute: function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				instance.stopAll(_, instance.$diagnoses);
			},
		},
		_mngtAllParams: {
			$title: "_mngtAllParams",
			$description: "_mngtAllParams",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) !== "running";
			},
			$execute: function(_, context, instance) {
				instance.getClient(_)._mngtAllParams(_);
			},
		},
		_mngtAllReq: {
			$title: "_mngtAllReq",
			$description: "_mngtAllReq",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) !== "running";
			},
			$execute: function(_, context, instance) {
				instance.getClient(_)._mngtAllReq(_);
			},
		},
		_mngtServReq: {
			$title: "_mngtServReq",
			$description: "_mngtServReq",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) !== "running";
			},
			$execute: function(_, context, instance) {
				instance.getClient(_)._mngtServReq(_);
			},
		},

		queries: {
			$method: "GET",
			$isMethod: true,
			$title: "Query management",
			$parameters: {
				$url: "{refUrl}/ASYRREQ?representation=ASYRREQ.$query&orderby=NUMREQ desc",
				$method: "GET",
				$properties: {}
			},
			$execute: function(_, context, instance) {
				// Do nothing
			},
		},
	},
	$events: {
		$canDelete: [

			function(_, instance) {
				if (instance.active(_))
					instance.$addError(locale.format(module, "serverActive"));
			}
		],
		$beforeSave: [

			function(_, instance) { // report to nanny process that batch process should be started/stopped. These notifications should not happen more often than necessary, but shoud
				// never be omitted when they are necessary. The following ensures that the notifications are not omitted and that they do not happen more often
				// than necessary only when in the beginning there are 0 active instances and then simultaneously several are activated or: all active instances are
				// deactivated simultaneously (these are rare situations).
				if (config.mockServer) { // find out whether "active" flag has changed 	
					var count = instance._db.count(_, instance.getEntity(_), {
						jsonWhere: {
							active: true
						}
					});
					if (count === 0) {
						// no active instance. Therefore current instance is either new or inactive in database. 
						// Notification is necessary when it is now active
						if (instance.active(_)) instance._notifyActive = 2; // report change anyway 
					} else {
						// conditions:
						// instance.$created: current server not in database: already other server is active, therefore no check necessary
						// instance.active(_): is instance now active, either it was not active before (and therefore another instance was active) or active flag has not changed 
						if (!instance.$created && !instance.active(_)) {
							var oldInstance = instance._db.fetchInstance(_, instance.getEntity(_), instance.$uuid);
							// only interesting case: flag has now changed from true to false, so maybe there are no active servers any more
							if (!oldInstance || oldInstance.active(_))
								instance._notifyActive = (count === 1 ? 2 : 1); // when there are at least 2 active instances in the beginning, re-check after   
							// saving whether there is no active instance left. Reason for double-checking: when several instances
							// are deactivated at the same time, there must be at least one signal to the nanny process)
						}
					}
				}
			}
		],
		$afterSave: [

			function(_, instance) { // named user check
				// update host data when either "active" instance is newly created or "active" flag is changed
				if (config.mockServer && (instance._notifyActive === 2 || instance._notifyActive === 1 && 0 === instance._db.count(_, instance.getEntity(_), {
					jsonWhere: {
						active: true
					}
				}))) {
					var options = {
						path: "/nannyCommand/notifyNannies/update",
						method: "PUT"
					};
					try {
						console.log(config.mockServer.mockClient.simpleRequest(options, null, _));
					} catch (e) {
						console.log("Error " + e);
					}
				}
				instance._notifyActive = undefined;
			}
		],
	},

};