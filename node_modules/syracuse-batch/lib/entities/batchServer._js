"use strict";

var locale = require('streamline-locale');
var bm = require('syracuse-batch/lib/batchManager');
var X3BatchClient = bm.X3BatchClient;


exports.entity = {
	$titleTemplate: "Batch server",
	$valueTemplate: "Batch server",
	$descriptionTemplate: "Batch server",
	$properties: {
		code: {
			$title: "Code",
			$isReadOnly: true,
			$isUnique: true,
			$isMandatory: true,
			$linksToDetails: true
		},
		active: {
			$type: "boolean",
			$title: "Active",
			$default: false
		},
		auto: {
			$type: "boolean",
			$title: "Auto start",
			$default: false
		},
		execInterval: {
			$title: "Time between two searches (sec)",
			$type: "integer",
			$isMandatory: function(_, instance) {
				return instance.active(_);
			},
			$default: null,
			$isNullable: true
		},
		killOverTime: {
			$title: "Timeout search time (sec)",
			$type: "integer",
			$isMandatory: function(_, instance) {
				return instance.active(_);
			},
			$default: null,
			$isNullable: true
		},
		maxDelay: {
			$title: "Maximum delay to launch a query (minutes)",
			$type: "integer",
			$default: null,
			$isNullable: true
		},
		maxQueries: {
			$title: "Maximum no. active queries",
			$type: "integer",
			$default: null,
			$isNullable: true
		},
		status: {
			$title: "Status",
			$enum: [{
				$value: "running",
				$title: "Running"
			}, {
				$value: "stopped",
				$title: "Stopped"
			}, {
				$value: "unavailable",
				$title: "Unavailable"
			}],
			$default: "stopped"
		},
		tags: {
			$title: "X3 server tags",
			$default: "MAIN"
		},
		refFolder: {
			$title: "Folder",
			$description: "Mother folder used for administrative tasks",
			$default: "X3",
			$isNullable: false
		},
		refUser: {
			$title: "X3 user",
			$description: "X3 user used for administrative tasks",
			$default: "ADMIN",
			$isNullable: false
		},
		refLang: {
			$title: "X3 language",
			$description: "X3 language used for administrative tasks",
			$default: "ENG",
			$isNullable: false
		},
		refUrl: {
			$isHidden: true
		}


	},
	$relations: {
		x3solution: {
			$type: "x3solution",
			$isMandatory: true,
			$isReadOnly: true,
			$propagate: function(_, instance, val) {
				if (val) {
					instance.code(_, val.code(_));
				}
			}
		},
		refEndpoint: {
			$type: "endPoint",
			$title: "Administrative endpoint",
			$description: "Endpoint corresponding to mother folder used for administrative tasks",
			$isMandatory: true,
			$propagate: function(_, instance, val) {
				if (val) {
					instance.refUrl(_, val.getBaseUrl(_));
				}
			}
		}
	},
	$functions: {
		getClient: function(_, start, noerror) {
			var bc = bm.getBatchClient(this.code(_));
			if (!bc) {
				if (start) {
					bc = new X3BatchClient();
				} else {
					if (noerror) return undefined;
					throw new Error("Batch is not initialized for the solution '" + this.code(_) + "'");
				}
			}
			return bc;
		},
		start: function(_, context) {
			this.getClient(_, true).start(_, context, this);
		},
		stop: function(_, context) {
			this.getClient(_).stop(_, context, this);
		},
	},
	$services: {
		start: {
			$title: "Start",
			$description: "Start",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) !== "stopped";
			},
			$execute: function(_, context, instance) {
				instance.$diagnoses = instance.$diagnoses || [];
				instance.start(_, context);
			},
		},
		stop: {
			$title: "Stop",
			$description: "Stop",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) === "stopped";
			},
			$execute: function(_, context, instance) {
				instance.$diagnoses = context.instance.$diagnoses || [];
				instance.stop(_, context);
			},
		},
		_mngtAllParams: {
			$title: "_mngtAllParams",
			$description: "_mngtAllParams",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) !== "running";
			},
			$execute: function(_, context, instance) {
				instance.getClient(_)._mngtAllParams(_);
			},
		},
		_mngtAllReq: {
			$title: "_mngtAllReq",
			$description: "_mngtAllReq",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) !== "running";
			},
			$execute: function(_, context, instance) {
				instance.getClient(_)._mngtAllReq(_);
			},
		},
		_mngtServReq: {
			$title: "_mngtServReq",
			$description: "_mngtServReq",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) !== "running";
			},
			$execute: function(_, context, instance) {
				instance.getClient(_)._mngtServReq(_);
			},
		},

		queries: {
			$method: "GET",
			$isMethod: true,
			$title: "Query management",
			$parameters: {
				$url: "{refUrl}/ASYRREQ?representation=ASYRREQ.$query&filter=null&orderby=NUMREQ DESC",
				$method: "GET",
				$properties: {}
			},
			$execute: function(_, context, instance) {
				// Do nothing
			},
		},
	}
};