"use strict";

var generic = require('ez-streams').devices.generic;
var oracle = require('oracledb');

/// !doc
/// ## ez-streams wrapper for oracle
/// 
/// `var ezoracle = require('ez-oracle');`
/// 
var active = 0;
var tracer = console.error;

module.exports = {
	/// * `reader = ezoracle.reader(cursor)`  
	reader: function read(connection, sql, args) {
		// console.log(">>>>> " + sql);
		var rd, stopped;
		//if (ord) ord.reader = rd;
		return generic.reader(function(_) {
			if (!rd && !stopped) {
				//sql = sql.replace(/\$/g, '_').replace(/\bABN(\.| )/g, '');
				tracer && tracer("READER OPEN: " + ++active + ", SQL:" + sql, args);
				rd = connection.execute(sql, args, {
					resultSet: true,
					outFormat: oracle.OBJECT,
				}, ~_);
			}
			if (!rd) return undefined;
			var row = rd.resultSet.getRow(~_);
			tracer && tracer("ROW: " + JSON.stringify(row));
			if (!row) {
				rd.resultSet.close(~_);
				tracer && tracer("READER CLOSED: " + --active)
				rd = null;
				return undefined;
			}
			return row;
		}, function stop() {
			tracer && tracer("READER STOPPED: " + active + ", alreadyStopped=" + stopped);
			stopped = true;
			if (rd) rd.resultSet.close(function(err) {
				if (err) throw err;
				tracer && tracer("READER CLOSED: " + --active)
			});
			rd = null;
		});
	},


	/// * `writer = ezoracle.writer(statement)`  
	writer: function(connection, sql) {
		var trace;
		var tablename;
/*
		trace = function(str) {
			try {
				if (!tablename) {
					var result = / (into|INTO) \"?(\w+)\"?\.\"?(\w+)\"]?/.exec(sql);
					tablename = result[2] + '.' + result[3];
				}
			} catch (err) {
				console.log("Could not retrieve tablename from " + sql);
			}
			console.log(tablename + " : " + str);
		}
*/
		trace && trace("writer initialized : " + sql);

		var statement = connection.prepare(sql);
		return generic.writer(function(_, row) {
			if (row === undefined) {
				statement = null; 
				return;
			} else if (statement) {
				var values = [];
				Object.keys(row).forEach(function(key)
				{
					var value = row[key];
					if (Buffer.isBuffer(value))
					{
						// Buffers must be sent to Oracle as hex strings
						value = value.toString('hex');
					}
					values.push(value);
				});
				trace && trace("Writing values " + JSON.stringify(values));
				statement.execute(values, ~_);
			}
		});
	},
};