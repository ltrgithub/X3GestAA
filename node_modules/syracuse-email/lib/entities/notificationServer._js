"use strict";

var mustache = require('mustache');
var locale = require("syracuse-core/lib/locale");
var ezmailer = require('ez-mailer');
var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;
var tracer = require("syracuse-trace/lib/helper").getTracer("email");

function buildTheme(_, emailOptions, theme, isTemplate) {
	emailOptions.html = isTemplate ? mustache.render(theme.html(_), {
		template: emailOptions.html
	}) : theme.html(_);
	theme.images(_).toArray(_).forEach_(_, function(_, img) {
		var fName = img.name(_);
		var fContent = img.file(_);
		if (fContent.fileExists(_)) {
			var b64 = fContent.createReadableStream(_).readAll(_);
			emailOptions.attachments = emailOptions.attachments || [];
			emailOptions.attachments.push({
				filename: fName,
				content: b64.toString("base64"),
				encoding: 'base64',
				cid: fName + '@img'
			});
		}
	});
}

exports.entity = {
	$titleTemplate: "Notification server",
	$valueTemplate: "{code}",
	$properties: {
		code: {
			$title: "Name",
			$isMandatory: true,
			$isUnique: true,
			$linksToDetails: true
		},
		description: {
			$title: "Description",
			$isLocalized: true
		},
		type: {
			$title: "Type",
			$enum: [{
				$value: "SMTP",
				$title: "SMTP"
			}],
			$default: "SMTP"
		},
		service: {
			$title: "Service",
			$isHidden: true // waiting avenger to reactivate this feature
		},
		host: {
			$title: "Mail server",
			$isMandatory: true
		},
		port: {
			$title: "Port",
			$type: "integer",
			$default: 0
		},
		secureConnection: {
			$title: "Secure connection",
			$type: "boolean",
			$default: false
		},
		clientHost: {
			$title: "Client server name",
		},
		authentication: {
			$title: "Authentication",
			$default: "none",
			$enum: [{
				$value: "none",
				$title: "No authentication"
			}, {
				$value: "password",
				$title: "Authentication with user and password"
			}]
		},
		user: {
			$title: "User",
			$isHidden: function(_, instance) {
				return instance.authentication(_) !== "password";
			}
		},
		password: {
			$title: "Password",
			$isHidden: function(_, instance) {
				return instance.authentication(_) !== "password";
			},
			$type: "password",
			$salt: "",
			$capabilities: "confirm",
			$encrypt: true
		},
		sender: {
			$title: "Sender email",
			$format: "$email",
			$isMandatory: true
		},
		idleTime: {
			$title: "Idle time",
			$type: "integer",
			$default: 10000
		},
		rejectUnauthorized: {
			$title: "TLS reject unauthorized",
			$type: "boolean",
			$default: true,
			$propagate: function(_, instance, val) {
				if (val === false) {
					instance.$diagnoses.push({
						$severity: "warning",
						$message: locale.format(module, "rejectUnauthorizedWarn")
					});
				}
			}
		}
	},
	$relations: {
		options: {
			$title: "More options",
			$type: "notificationServerOptions",
			$isChild: true
		},
		mailerTheme: {
			$title: "Default theme",
			$type: "notificationTheme"
		},
		cacerts: {
			$title: "CA certificates of mail server for TLS",
			$type: "caCertificates",
			$inv: "notificationServers",
			$isComputed: true
		}
	},
	$functions: {
		notify: function(_, options, values, themeName, isTemplate) {
			var emailOptions = options || {};
			if (!emailOptions.to) throw new Error(locale.format(module, "noRecipient"));

			if (!emailOptions.from) emailOptions.from = this.sender(_);

			var themeInst;
			// theme can be ignore with null value !
			if (themeName === undefined) {
				// get default theme
				themeInst = this.mailerTheme(_);
			} else {
				var db = adminHelper.getCollaborationOrm(_);
				var entity = db.getEntity(_, "notificationTheme");
				themeInst = db.fetchInstance(_, entity, {
					sdataWhere: '(name eq "' + themeName + '")'
				});
			}

			if (themeInst) {
				buildTheme(_, emailOptions, themeInst, isTemplate);
			}

			tracer.debug && tracer.debug("Notify action on '" + this.code(_) + "' configuration: " + JSON.stringify(emailOptions, null, 2));
			tracer.debug && tracer.debug("Mustache values '" + JSON.stringify(values, null, 2));
			var mailer = ezmailer.writer(this.mailerOptions(_));
			var formatter = ezmailer.messageFormatter(emailOptions);
			mailer.writeAll(_, formatter(_, {
				view: values,
				attachments: emailOptions.attachments
			}));

			return;
		},
		// returns SMTP options in the format expected by nodemailer
		mailerOptions: function(_) {
			var secure = this.secureConnection(_);
			var service = this.service(_);
			var options = service ? {
				service: service,
				authMethod: 'LOGIN', // FOR NOW - needs to be configured
			} : {
				//name: this.clientHost(_),
				host: this.host(_),
				port: this.port(_) || (secure ? 465 : 25),
				secure: secure
			};
			switch (this.authentication(_)) {
				case 'none':
					break;
				case 'password':
					var auth = options.auth = {};
					auth.user = this.user(_);
					auth.pass = this.password(_);
					break;
			}

			var moreOpt = this.options(_).toArray(_);
			moreOpt.forEach_(_, function(_, o) {
				var val = o.value(_);
				if (val.indexOf('{') === 0 || val.indexOf('[') === 0) {
					try {
						val = JSON.parse(val);
					} catch (e) {
						console.error("Can't parse JSON for value of '" + o.key(_) + "': " + e.safeStack);
					}
				}
				options[o.key(_)] = val;
			});

			// CA certificates
			var cacerts = this.cacerts(_).toArray(_);
			if (cacerts.length) {
				options.tls = options.tls || {};
				options.tls.ca = cacerts.map_(_, function(_, cacert) {
					return cacert.getPEMCertificate(_);
				});
			}
			if (!this.rejectUnauthorized(_)) {
				options.tls = options.tls || {};
				options.tls.rejectUnauthorized = false;
			}
			tracer.debug && tracer.debug("Options: " + JSON.stringify(options, null, 2));
			return options;
		},
	},
	$services: {
		test: {
			$method: "post",
			$title: "Test configuration",
			$isMethod: true,
			$parameters: {
				$properties: {
					"email": {
						$title: "Recipient Email address",
						$description: "Address which should be used to send test email",
						$type: "application/x-string",
						$value: "",
						$isMandatory: true,
					}
				}
			},
			$execute: function(_, context, instance, parameters) {
				if (!parameters) {
					parameters = context.parameters;
				}
				if (!parameters.email) {
					instance.$addError(locale.format(module, "noRecipient"));
					return;
				}
				instance.$diagnoses = instance.$diagnoses || [];
				try {
					var title = locale.format(module, "testMailTitle", instance.code(_));
					var text = locale.format(module, "testMailContent", instance.description(_), instance.host(_), instance.port(_), instance.secureConnection(_), instance.user(_));
					var sig = locale.format(module, "testMailSig");
					instance.notify(_, {
						to: parameters.email,
						subject: title,
						text: text
					}, {
						title: title,
						subtitle: locale.format(module, "testMailSubtitle"),
						content: text,
						signature: sig,
						link: {
							href: (context.secure ? "https://" : "http://") + context.request.headers.host + "/syracuse-main/html/main.html?url=" + context.baseUrl + "/notificationServers('" + instance.$uuid + "')?representation=notificationServer.$details",
							label: locale.format(module, "mailLinkLabel")
						},
						info: {
							date: {
								label: locale.format(module, "dateLabel"),
								value: new Date().toDateString()
							},
							time: {
								label: locale.format(module, "timeLabel"),
								value: new Date().toLocaleTimeString()
							}
						}
					});

					instance.$diagnoses = instance.$diagnoses || [];
					instance.$diagnoses.push({
						$severity: "info",
						$message: "Test Mail sent successfully",
					});
				} catch (e) {
					instance.$diagnoses.push({
						$severity: "error",
						$message: e.message + (e.response ? " - " + e.response : ""),
						$stackTrace: e.safeStack
					});
				}
			}
		}
	}
};

exports.optEntity = {
	$titleTemplate: "Notification server options",
	$valueTemplate: "{key}:{value}",
	$properties: {
		key: {
			$title: "Key",
			$isMandatory: true,
			$isUnique: true
		},
		value: {
			$title: "Value",
			$isMandatory: true
		},
	}
};