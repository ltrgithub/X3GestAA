"use strict";

var mailer = require('nodemailer');
var cache = {};
var tracer; // = console.log;
/// !doc
/// -------------
/// ## mail function 
/// 
/// ``` javascript
/// var status = mail.sendMail(_, server, options);
/// ```
/// 
/// Send an email to a specified SMTP server
/// Remarks: 
/// - The underlying framework also allows sendmail and Amazon SES
/// - This function (at the moment) establishes a connection and destroys it again and is therefore not very efficient.
///   The underlying framework supports connection pools etc. to make sending many emails much more efficient.
/// 
/// Parameters:
/// - server: instance of `notificationServer` entity to use
/// - options: options for sending emails
/// Here is a list of available email options:
/// - **from** - The e-mail address of the sender. All e-mail addresses can be plain `sender@server.com` or formatted `Sender Name <sender@server.com>`
/// - **to** - Comma separated list or an array of recipients e-mail addresses that will appear on the `To:` field
/// - **cc** - Comma separated list or an array of recipients e-mail addresses that will appear on the `Cc:` field
/// - **bcc** - Comma separated list or an array of recipients e-mail addresses that will appear on the `Bcc:` field
/// - **replyTo** - An e-mail address that will appear on the `Reply-To:` field
/// - **inReplyTo** - The message-id this message is replying
/// - **references** - Message-id list
/// - **subject** - The subject of the e-mail
/// - **text** - The plaintext version of the message
/// - **html** - The HTML version of the message
/// - **generateTextFromHTML** - if set to true uses HTML to generate plain text body part from the HTML if the text is not defined
/// - **headers** - An object of additional header fields `{"X-Key-Name": "key value"}` (NB! values are passed as is, you should do your own encoding to 7bit and folding if needed)
/// - **attachments** - An array of attachment objects.
/// - **alternatives** - An array of alternative text contents (in addition to text and html parts)
/// - **envelope** - optional SMTP envelope, if auto generated envelope is not suitable
/// - **messageId** - optional Message-Id value, random value will be generated if not set. Set to false to omit the Message-Id header
/// - **date** - optional Date value, current UTC string will be used if not set
/// - **encoding** - optional transfer encoding for the textual parts (defaults to "quoted-printable")
/// - **charset** - optional output character set for the textual parts (defaults to "utf-8")
/// 
/// Return value: throw an error in the case of an error, in case of success: a confirmation message, e. g. "250 2.0.0 Ok: queued as 009B4168E50"  
/// 
/// 
/// 
exports.sendMail = function(_, server, options) {
	var emailTime = Date.now();

	function cleanup() {
		var conn = cache[key];
		if (conn && conn[0] <= emailTime) {
			delete cache[key];
			tracer && tracer("Remove connection");
			conn[1].close();
		}
	}
	if (!server) throw new Error("No mail server available");
	var smtpOptions = server.mailerOptions(_);
	// generate key
	var key = Object.keys(smtpOptions).sort().map(function(element) {
		return element + "$" + smtpOptions[element];
	}).join(";");
	// console.log("KEY "+key);
	var connection = cache[key];
	if (!connection) {
		var smtpTransport = mailer.createTransport("SMTP", smtpOptions);
		// console.log("NEW connection");
		connection = [emailTime, smtpTransport];
		cache[key] = connection;
	} else {
		// console.log("use connection")
		connection[0] = emailTime;
	};
	try {
		return connection[1].sendMail(options, ~_);
	} finally {
		setTimeout(cleanup, server.idleTime(_) || 10000);
	}
};