"use strict";

var helpers = require('syracuse-core/lib/helpers');
var tracer = require("syracuse-trace/lib/helper").getTracer("notifications");
var globals = require('streamline/lib/globals');
var eventManager = require('syracuse-notification/lib/eventManager');
var util = require('util');
var io = require('socket.io');

var _cb = function(err, res) {
	if (err) throw err;
	return res;
};

var clients = {};

function getClientSockets(sockets, logins) {
	var res = [];
	if (logins.length > 0) {
		logins.forEach(function(login) {
			res.push(sockets.sockets && sockets.sockets.filter(function(s) {
				return clients[login] && clients[login].indexOf(s.id) !== -1;
			}));
		});
	}

	return res;
}

var SocketHandler = helpers.defineClass(function(_, sock) {
	this.sock = sock;
	this.initEvents(_);

}, null, {
	initEvents: function(_) {
		var self = this;
		this.sock.on('connection', function(client) {
			client.on('connect', function(login) {
				tracer.info && tracer.info("* IO CONNECT: " + login);
				tracer.info && tracer.info("* IO CLIENT: " + util.inspect(client, null, 3));
				clients[login] = clients[login] || [];
				clients[login].push(client);
			});

			//console.log("SOCKETS: "+util.inspect(clients,null,3));

			//console.log("CLIENTS: "+util.inspect(clients,null,3));
			tracer.info && tracer.info("Client connected");
			client.on('message', function(event) {
				tracer.info && tracer.info("* IO MESSAGE SENT BY CLIENT: " + JSON.stringify(event, null, 2));
				var message = eventManager.createMessage(_cb, event.title, event.message, event.to, event.severity);


				client.broadcast.emit('message', message);

				//				var sockets = getClientSockets(self.sock.sockets, event.to);
				//				sockets.forEach(function(s) {
				//					s.emit('message', message);
				//				});

			});


			client.on('get events', function(count) {
				tracer.info && tracer.info("* IO GET EVENTS");
				var events = eventManager.getEvents(_cb, count || 20);
				client.emit('events', events);
			});
		});
	}
});

exports.create = function(_, socket) {
	tracer.info && tracer.info("Create socket handler");
	var sh = new SocketHandler(_, socket);
};