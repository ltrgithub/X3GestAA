"use strict";

var helpers = require('syracuse-core/lib/helpers');
var tracer = require("syracuse-trace/lib/helper").getTracer("notifications");
var globals = require('streamline/lib/globals');
var uuid = require('syracuse-core/lib/helpers').uuid;
var util = require('util');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var mongodb = require('streamline-mongodb');

var db;

var Event = helpers.defineClass(function(_, type, data, from, to, severity, link) {

	this.type = type;
	this.from = from;
	this.to = to;
	this.severity = severity;
	this.data = data;
	this.link = link;
	this.firstName = getFirstName(_, this.from);

}, null, {
	serialize: function() {
		var d = new Date();
		var stamp = d.getHours() + ':' + d.getMinutes();
		var res = {
			_id: uuid.generate(),
			type: this.type,
			stamp: stamp,
			to: this.to,
			from: this.from,
			severity: this.severity,
			data: this.data
		};
		if (this.link) res.link = this.link;
		if (this.firstName) res.firstName = this.firstName;
		return res;
	}
});


var EventMessage = helpers.defineClass(function(_, type, title, message, from, to, severity, link) {
	Event.call(this, _, type, {
			thumbnail: null,
			title: title,
			message: message
		},
		from, to, severity, link);
}, Event, {});

function getEventCollection(_) {
	db = db || adminHelper.getCollaborationOrm(_);
	return db.db.collection("NotificationEvent", _);
}

var getFirstName = exports.getFirstName = function(_, login) {
	db = db || adminHelper.getCollaborationOrm(_);
	var col = db.db.collection("User", _);
	var arr = col.find({
		login: login
	}).toArray(_);
	return arr && arr[0] && arr[0].firstName;
};

exports.createMessage = function(_, type, title, message, from, to, severity, link) {
	var evt = new EventMessage(_, type, title, message, from, to, severity, link).serialize();
	getEventCollection(_).insert(evt, _);
	return evt;
};

exports.getEvents = function(_, login, count) {
	var events = getEventCollection(_).find({
		$or: [{
			to: login
		}, {
			to: "*"
		}]
	}).toArray(_);
	return events;
};

exports.getOfflineUsers = function(_, connectedUsers) {
	db = db || adminHelper.getCollaborationOrm(_);
	var col = db.db.collection("User", _);
	var users = col.find({
		login: {
			$nin: connectedUsers
		}
	}).toArray(_);
	return users;
};