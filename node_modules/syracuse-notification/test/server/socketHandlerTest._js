"use strict";
var locale = require('syracuse-core/lib/locale');
var mongodb = require('streamline-mongodb');
var x3helpers = require('syracuse-x3/lib/helpers');
var helpers = require('syracuse-core/lib/helpers');
var x3writer = require("syracuse-x3/lib/convergence/automata/x3writer");
var config = require('config'); // must be first syracuse require

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var jsonImport = require("syracuse-import/lib/jsonImport");
var globals = require('streamline/lib/globals');
var socketio = require('socket.io');
var socketioClient = require('socket.io/node_modules/socket.io-client');
var syracuse = require("syracuse-main/lib/syracuse");
var socketIoHandler = require('syracuse-notification/lib/socketHandler').getSocketHandler;
var flows = require("streamline/lib/util/flows");
var done;


QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_convdemo");

var requestCount = 0;
var MAX_REQUESTS = 11;

var baseUrl = "http://localhost:3004";
var contractUrl = "/sdata/syracuse/collaboration/mongodb_demo/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";

var cookie = "";
var x3sId;
var applicationId;
var adminEp;



function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_convdemo");
}





asyncTest("register / unregister service ", function(_) {
	// register nothin
	socketIoHandler.register("id", "nothin", function() {
		//nothin
	});
	strictEqual(socketIoHandler.listSocketEvent && socketIoHandler.listSocketEvent.id !== null, true, "register nothin ok");

	socketIoHandler.unregister("id");
	strictEqual(socketIoHandler.listSocketEvent && socketIoHandler.listSocketEvent.id == null, true, "unregister nothin ok");

	// register with connect and disconnect
	socketIoHandler.register("id", "nothin", function() {
		//connect
	}, function() {
		// disconnect
	});
	strictEqual(socketIoHandler.listSocketEvent && socketIoHandler.listSocketEvent.id !== null, true, "register with connect and disconnect ok");

	socketIoHandler.unregister("id");
	strictEqual(socketIoHandler.listSocketEvent && socketIoHandler.listSocketEvent.id == null, true, "unregister with connect and disconnect ok");

	// register with connect disconnect and event
	socketIoHandler.register("id", "nothin", function() {
		//connect
	}, function() {
		// disconnect
	}, {
		event1: function() {
			//event 1
		},
		event2: function() {
			//event 2
		},

	});
	strictEqual(socketIoHandler.listSocketEvent && socketIoHandler.listSocketEvent.id !== null, true, "register with connect and disconnect and event ok");

	socketIoHandler.unregister("id");
	strictEqual(socketIoHandler.listSocketEvent && socketIoHandler.listSocketEvent.id == null, true, "unregister with connect and disconnect and event ok");

	var connect = false;
	socketIoHandler.register("id", "/testAddConnectDisconnect", function(io, hd) {
		connect = true;
	}, function(io, hd) {
		connect = false;
	});
	var events = socketIoHandler.listSocketEvent && socketIoHandler.listSocketEvent.id;
	strictEqual(events !== null, true, "register id - connect and disconnect");
	strictEqual(events.onDisconnection !== null, true, "connection function ok");
	strictEqual(events.onConnection !== null, true, "disconnection function ok");
	strictEqual(events.message == null, true, "event list ok");

	events.onConnection();
	strictEqual(connect, true, "connect function handler ok");

	events.onDisconnection();
	strictEqual(connect, false, "disconnect function handler ok");

	var eventStr = "";
	socketIoHandler.register("id", "/testAddConnectDisconnect", function(io, hd) {
		connect = true;
	}, function(io, hd) {
		connect = false;
	}, {
		event1: function() {
			eventStr = 'event1';
		},
		event2: function() {
			eventStr = 'event2';
		}
	});
	var events = socketIoHandler.listSocketEvent && socketIoHandler.listSocketEvent.id;

	strictEqual(events.message != null, true, "event list ok");
	strictEqual(events.message.event1 !== null, true, "event list ok");
	strictEqual(events.message.event2 !== null, true, "event list ok");
	events.message.event1();
	strictEqual(eventStr, 'event1', "event1 function handler ok");

	events.message.event2();
	strictEqual(eventStr, 'event2', "event2 function handler ok");

	socketIoHandler.unregister("id");
	strictEqual(socketIoHandler.listSocketEvent && socketIoHandler.listSocketEvent.id == null, true, "unregister event ok");


	start();
});


asyncTest("stop  tests", function(_) {
	done = true;
	start();
});