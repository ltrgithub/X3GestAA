"use strict";
var locale = require('syracuse-core/lib/locale');
var CvgClient = require('syracuse-x3/lib/convergence/client/CvgClient').CvgClient;
var CvgSession = require('syracuse-x3/lib/cvgSession');
var mongodb = require('streamline-mongodb');
var CvgIst = require('syracuse-x3/lib/convergence/types/CvgIst').CvgIst;
var x3helpers = require('syracuse-x3/lib/helpers');
var helpers = require('syracuse-core/lib/helpers');
var Session = require("syracuse-session/lib/session").Session;
var x3writer = require("syracuse-x3/lib/convergence/automata/x3writer");
var config = require('config'); // must be first syracuse require
var syracuse = require('syracuse-main/lib/syracuse');

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var jsonImport = require("syracuse-import/lib/jsonImport");
var globals = require('streamline/lib/globals');

var flows = require("streamline/lib/util/flows");
var localConfig = x3helpers.config("x3fusion", null, {});
var done;


QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_convdemo");

var requestCount = 0;
var MAX_REQUESTS = 11;

var baseUrl = "http://localhost:3004";
var contractUrl = "/sdata/syracuse/collaboration/mongodb_demo/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";

var cookie = "";
var x3sId;
var applicationId;
var adminEp;



function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_convdemo");
}


asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_convdemo"].hostname, endPoint.datasets["mongodb_convdemo"].port, {});
	var db = adminTestFixtures.newMongoDb(endPoint.datasets["mongodb_convdemo"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);


	ok(true, "mongodb initialized");
	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse.startServers(_, port);
	ok(true, "server initialized");
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_convdemo);
	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", {});
	start();
});


asyncTest("register a push server serivce ", 0, function(_) {
	// register nothin
	socketIoHandler.register("id", "nothin", function() {
		//nothin
	});
	strictEqual(this.listSocketEvent && this.listSocketEvent.id, true, "register nothin ok");

	socketIoHandler.unregister("id");
	strictEqual(this.listSocketEvent && this.listSocketEvent.id, false, "unregister nothin ok");

	// register with connect and disconnect
	socketIoHandler.register("id", "nothin", function() {
		//connect
	}, function() {
		// disconnect
	});
	strictEqual(this.listSocketEvent && this.listSocketEvent.id, true, "register with connect and disconnect ok");

	socketIoHandler.unregister("id");
	strictEqual(this.listSocketEvent && this.listSocketEvent.id, false, "unregister with connect and disconnect ok");

	// register with connect disconnect and event
	socketIoHandler.register("id", "nothin", function() {
		//connect
	}, function() {
		// disconnect
	}, {
		event1: function() {
			//event 1
		},
		event2: function() {
			//event 2
		},

	});
	strictEqual(this.listSocketEvent && this.listSocketEvent.id, true, "register with connect and disconnect and event ok");

	socketIoHandler.unregister("id");
	strictEqual(this.listSocketEvent && this.listSocketEvent.id, false, "unregister with connect and disconnect and event ok");

	var connect = false;
	socketIoHandler.register("id", "testConnect", function() {
		connect = true;
	}, function() {
		connect = false;
	});

	socketeIo.connet("localhost:3004");


});

asyncTest("stop  tests", 0, function(_) {
	done = true;
	start();
});