"use strict";

var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;

function aggr(_, context, type, site, tests) {

	var orm = adminHelper.getCollaborationOrm(_);
	orm.connect(_);
	var collection = context.db.db.collection('healthLogs', _);

	var cursor = collection.find({
		type: type,
		site: site._data.site.split(' ').join('').toUpperCase()
	}, {
		sort: {
			currentTime: -1
		},
		limit: 1
	}).toArray(_)[0];
	if (cursor && cursor.tests){
		tests.testArray = tests.testArray.concat(cursor.tests);
		if (type !== 'farm'){
			tests.logTime = cursor.currentTime;
		}
		else{
			tests.UQlogTime = cursor.currentTime;
		}
	} 
}


function getHealth(_, context) {

	//  get sites entity
	var db = context.db;
	var sites = db.fetchInstances(_, db.getEntity(_, 'site'));

	return {
		'$resources': sites.map_(_, function(_, site) {
			return getSiteHealth(_, context, site);
		})
	};
}
exports.getHealth = getHealth;

function getSiteHealth(_, context, site) {

	var tests = {testArray:[], logTime:'', UQlogTime:''};

	//First, check latest farm log record
	aggr(_, context, 'farm', site, tests);
	//Next, check latest api log record
	aggr(_, context, 'api', site, tests);

	var health = tests.testArray.reduce(function(r, test) {
		r[test.name.replace('ResponseTime', 'Healthy')] = test.ms < 60000 && test.error === undefined;
		r[test.name] = test.ms;
		r.healthy = r.healthy && r[test.name.replace('ResponseTime', 'Healthy')];
		return r;
	}, {
		customer: site.customer(_).$uuid,
		site: site.$uuid,
		name: site.site(_),
		logTime: tests.logTime,
		UQLogTime: tests.UQlogTime,
		healthy: true
	});
	return health;
}
exports.getSiteHealth = getSiteHealth;


function getUsage(_, context, usageType) {
	//  get sites entity
	var db = context.db;
	var sites = db.fetchInstances(_, db.getEntity(_, 'site'));

	return {
		'$resources': sites.map_(_, function(_, site) {
			return getSiteUsage(_, context, site, usageType);
		})
	};
}
exports.getUsage = getUsage;

function getSiteUsage(_, context, site, usageType) {
	
	var tests = {testArray:[], logTime:''};

	//check latest usage metric log record
	aggr(_, context, usageType + 'Usage', site, tests);

	var usage = tests.testArray.reduce(function(r, test) {
		if (test.error !== undefined) r[test.name + 'Error'] = test.error;
		r[test.name + 'Unit'] = test.unit;
		r[test.name + 'Average'] = test.average;
		r[test.name + 'Minimum'] = test.minimum;
		r[test.name + 'Maximum'] = test.maximum;
		return r;
	}, {
		customer: site.customer(_).$uuid,
		site: site.$uuid,
		name: site.site(_),
		logTime: tests.logTime
	});
	return usage;
}
exports.getSiteUsage = getSiteUsage;