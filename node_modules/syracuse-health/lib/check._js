'use strict';

var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;

function getHealth(_, context) {

	//  get sites entity
	var db = context.db;
	var sites = db.fetchInstances(_, db.getEntity(_, 'site'));

	return {
		'$resources': sites.map_(_, function(_, site) {
			return getSiteHealth(_, context, site);
		})
	};
}
exports.getHealth = getHealth;

function getSiteHealth(_, context, site) {

	//Aggregate data for site to determine if actual health
	var orm = adminHelper.getCollaborationOrm(_);
	orm.connect(_);
	var collection = context.db.db.collection('healthLogs', _);

	var tests = [];

	function aggr(_, type) {
		var cursor = collection.find({
			type: type,
			site: site._data.site.toUpperCase()
		}, {
			sort: {
				currentTime: -1
			},
			limit: 1
		}).toArray(_)[0];
		if (cursor && cursor.tests) tests = tests.concat(cursor.tests);
	}

	//First, check latest farm log record
	aggr(_, 'farm');

	//Next, check latest api log record
	aggr(_, 'api');

	var health = tests.reduce(function(r, test) {
		r[test.name.replace('ResponseTime', 'Healthy')] = test.ms < 60000 && test.error === undefined;
		r[test.name] = test.ms;
		r.healthy = r.healthy && r[test.name.replace('ResponseTime', 'Healthy')];
		return r;
	}, {
		customer: site.customer(_).$uuid,
		site: site.$uuid,
		name: site.site(_),
		healthy: true
	});

	return health;
}
exports.getSiteHealth = getSiteHealth;