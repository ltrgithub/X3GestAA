'use strict';

var config = require('config');

var AWS = require('aws-sdk');
AWS.config.update(config.aws);
var cloudwatch = new AWS.CloudWatch({
	apiVersion: '2010-08-01'
});

function createAlerts(_, site) {

	var alerts = [
		{
			key:'indexPageResponseTime',
			name: 'indexPage',
			description: 'Alert for Syracuse Login page',
			operator: 'GreaterThanOrEqualToThreshold',
			statistic: 'Average'
		},
		{
			key:'elasticSearchResponseTime',
			name: 'elasticSearch',
			description: 'Alert for Elasticsearch server',
			operator: 'GreaterThanOrEqualToThreshold',
			statistic: 'Average'
		},
		{
			key:'mongoDbResponseTime',
			name: 'mongoDb',
			description: 'Alert for MongoDb cluster',
			operator: 'GreaterThanOrEqualToThreshold',
			statistic: 'Average'
		},
		{
			key:'dbResponseTime',
			name: 'dbServer',
			description: 'Alert for application db',
			operator: 'GreaterThanOrEqualToThreshold',
			statistic: 'Average'
		},
		{
			key:'x3ServerResponseTime',
			name: 'x3Server',
			description: 'Alert for application server',
			operator: 'GreaterThanOrEqualToThreshold',
			statistic: 'Average'
		},
		{
			key:'esUQResponseTime',
			name: 'esUserQuery',
			description: 'Alert for Elasticsearch',
			operator: 'GreaterThanOrEqualToThreshold',
			statistic: 'Average'
		},
		{
			key:'mongoUQResponseTime',
			name: 'mongoUserQuery',
			description: 'Alert for MongoDb',
			operator: 'GreaterThanOrEqualToThreshold',
			statistic: 'Average'
		},
		{
			key:'xmResponseTime',
			name: 'xmClients',
			description: 'Alert for XM Symphony Clients',
			operator: 'GreaterThanOrEqualToThreshold',
			statistic: 'Average'
		}
	];

	//Make sure site is in Active status before creating alerts.
	if(site.status(_) != 'active')
		throw new Error('Site status must be active');

	var alertCount = alerts.length;
	for (var i in alerts){
		//Check if alert already exists before attempting to add it
		var params = {
		      AlarmNames: [
		        site.site(_) + '_' + alerts[i].name + '_' + config.alerts.env
		      ],
	    };
	    var data = cloudwatch.describeAlarms(params, ~_);
	    if(data.MetricAlarms.length > 0){
	        //console.log('AlertExists = ' + site.site(_) + '_' + alerts[i].name);
	        alertCount -= 1;
	    }
	    else {
	    	var params = {
				  AlarmName: site.site(_) + '_' + alerts[i].name + '_' + config.alerts.env,
				  ComparisonOperator: alerts[i].operator,
				  EvaluationPeriods: config.alerts.consecutivePeriods,
				  MetricName: alerts[i].key,
				  Namespace: 'Site',
				  Period: config.alerts.period,
				  Statistic: alerts[i].statistic,
				  Threshold: config.alerts.threshold,
				  ActionsEnabled: config.alerts.actionsEnabled,
				  AlarmActions: [
				    config.alerts.actions
				  ],
				  AlarmDescription: site.site(_) + '_' + alerts[i].description,
				  Dimensions: [
				        {
				          Name:'Site ID',
				          Value:site.site(_)
				        },
				      ],
				};
			//console.log('params = ',params);
			cloudwatch.putMetricAlarm(params, function(err, data) {
			  if (err) console.log(err, err.stack); // an error occurred
			  //else     console.log(data);           // successful response
			});
		}
	};
	//If all alerts already exist in Cloudwatch, throw an error to let user know.
	if(alertCount === 0)
		throw new Error('Alerts already exist.');
};
exports.createAlerts = createAlerts;
