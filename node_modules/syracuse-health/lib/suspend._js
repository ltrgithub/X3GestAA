"use strict";

var config = require('config');
var httpClient = require('ez-streams').devices.http.client;
var fs = require('fs');
var path = require('path');

function getSiteStatus(_, request, response) {
	var options = getOptions({});
	var sslPath = path.join(__dirname + '../../../syracuse-main/lib/ssl/');
	var url = options.baseUrl + "sites?representation=site.%24query&count=5&where=(site%20like%20'%25"+request.headers.host+"%25')&startIndex=1";

	var clientOptions = {
		url: url,
		rejectUnauthorized: false,
		method: 'GET',
		key: fs.readFileSync(sslPath + 'seos.key'),
		cert: fs.readFileSync(sslPath + 'seos.crt'),
		headers: {
			//Authorization: 'Basic c2t5YWRtOiRreVdlYiR2YyQwMSE=',
			'content-type': 'application/json',
			'Accept': 'application/json',
		}
	};

	var resp = '';
	try {
		resp = httpClient(clientOptions).end().response(_);
	} catch(e) {
		var redirectUri = options.landingPage + 'interruption';
		return redirectUri;
	}
	if (resp.statusCode !== 200) throw new Error("bad response from web api:" + url + " - " + resp.statusCode);

	var body = resp.readAll(_) || {};
	try {
		body = JSON.parse(body);
	} catch (e) {
		return console.error('body:', body);
	}

	var sites = body.$resources;
	if (sites.length === 0) throw new Error("site not found: " + request.headers.host);

	var status = sites[0].status;
	var redirectUri = options.landingPage;

	switch(status) {
		case 'suspended':
			redirectUri += 'suspend';
			break;
		case 'interruption':
			redirectUri += 'interruption';
			break;
		case 'maintenance':
			redirectUri += 'maintenance';
			break;
		default:
			return;
	}

	return redirectUri =  redirectUri + '?siteId=' + sites[0].$uuid;
}

exports.getSiteStatus = getSiteStatus;

function getOptions(options) {
	options.localTest = configOpts.localTest;
	options.host = configOpts.host;
	options.port = (configOpts.port != "80") ? (":" + configOpts.port) : "";
	options.dataset = configOpts.dataset;
	var hosting = options.localTest ? "http://" : "https://";
	options.baseHost = hosting + options.host + options.port;
	options.baseUrl = options.baseHost + '/sdata/sky/automation/' + options.dataset + '/';
	options.landingPage = configOpts.landingPage;
	return options;
}

var configOpts = {
	localTest: config.hosting.sitecheck.localTest || false,
	host: config.hosting.sitecheck.host || 'localhost',
	port: config.hosting.sitecheck.port || '8124',
	dataset: config.hosting.sitecheck.dataset || 'production',
	landingPage: config.hosting.sitecheck.landingPage || 'http://localhost:8080/'
};