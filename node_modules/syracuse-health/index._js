"use strict";

var config = require('config');
var globals = require('streamline/lib/globals');
var flows = require('streamline/lib/util/flows');
var ez = require('ez-streams');
var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;
var searchEngine = require('syracuse-search/lib/elasticSearch');
var parallel = config.health.parallel || 4;
var os = require('os');

var AWS = require('aws-sdk');
AWS.config.update(config.aws);

config.health = config.health || {};

var perTenant = {};
var startTime = new Date();

exports.addTenant = function(tenant) {
	perTenant[tenant] = perTenant[tenant] || {
		exceptions: 0,
		lastExceptions: 0,
		lastTime: null,
	};
};

var tests = {
	mongoUQResponseTime: function(_) {
		var orm = adminHelper.getCollaborationOrm(_);
		orm.connect(_);
		var users = orm.db.collection("User", _).find({
			login: "admin"
		}).toArray(_);
		if (users.length !== 1 || users[0].login !== "admin") throw new Error("bad user list: " + users.length);
	},
	esUQResponseTime: function(_) {
		var indexName = adminHelper.getCollaborationEndpoint(_).getIndexName(_, 'en-us');
		var q = {
			query: {
				filtered: {
					query: {
						query_string: {
							query: "admin",
							analyze_wildcard: true,
							default_operator: "AND"
						}
					}
				}
			}
		};
		var resp = ez.devices.http.client({
			url: searchEngine.serverConfig.baseUrl + '/' + globals.context.tenantId + '.' + indexName + "/user/_search",
			method: "POST",
			headers: {
				"content-type": "application/json"
			}
		}).write(_, JSON.stringify(q), "utf8").end().response(_);
		if (resp.statusCode !== 200) throw new Error("elastic search test: bad status code: " + resp.statusCode);
		var result = JSON.parse(resp.readAll(_));
		//console.log(JSON.stringify(result, null, 2));
		if (!result || !result.hits || !Array.isArray(result.hits.hits)) throw new Error("elastic search test: bad response");
		var found = result.hits.hits.some(function(hit) {
			return hit._source.login === "admin";
		});
		if (!found) throw new Error("elastic search test: admin user not found in index");
	},
};

function doTest(_, name, data) {
	var result = {
		name: name,
	};
	var t0 = new Date();
	try {
		tests[name](_);
	} catch (ex) {
		result.error = ex.message;
		result.stack = ex.stack;
		data.exceptions++;
	} finally {
		result.ms = new Date() - t0;
		//Log to AWS Cloudwatch if config.cloudwatch is true.
		if (config.health.cloudwatch) logAWS(_, result);
	}
	return result;
}

function logAWS(_, result) {
	var cloudwatch = new AWS.CloudWatch({
		apiVersion: '2010-08-01'
	});
	//Publish health metric to Cloudwatch.  Passing latency time.  If error occurs, setting
	//latency to 1 minute which should trigger a cloud watch alarm.
	var value = 0;
	if (result.error !== undefined) {
		value = 60000;
	} else {
		value = result.ms;
	}
	var params = {
		Namespace: 'Site',
		MetricData: [{
			MetricName: result.name,
			Unit: 'Milliseconds',
			Dimensions: [{
				Name: 'Site ID',
				Value: globals.context.tenantId
			}, ],
			Value: value
		}]
	};
	cloudwatch.putMetricData(params, function(err, data) {
		if (err) console.log(err, err.stack);
		else console.log(data);
	});
	return;
}

function timings(_) {}

function getTenantHealth(_, tenant) {
	var data = perTenant[tenant];
	var t = new Date();
	globals.context.tenantId = tenant;
	try {
		return {
			type: 'farm',
			site: tenant.toUpperCase(),
			startTime: startTime,
			currentTime: t,
			previousTime: data.lastTime,
			hostname: os.hostname(),
			pid: process.pid,
			tests: Object.keys(tests).map_(_, function(_, name) {
				return doTest(_, name, data);
			}),
			memory: process.memoryUsage(),
			totalExceptions: data.exceptions,
			newExceptions: data.exceptions - data.lastExceptions,
			timings: timings(_),
		};
	} finally {
		globals.context.tenantId = "";
		data.lastTime = t;
		data.lastExceptions = data.exceptions;
		console.log(data.lastTime);
	}
}

function getHealth(_) {
	return Object.keys(perTenant).map_(_, parallel, getTenantHealth);
}

function logHealth(_, health) {
	if (health.length === 0) return;
	//console.log('\n\n JSON.stringify(health) = ' + JSON.stringify(health));
	try {
		var resp = ez.devices.http.client({
			url: config.health.logUrl,
			method: "POST",
			headers: {
				//"rejectUnauthorized": false,
				//"Authorization": 'Basic YWRtaW46YWRtaW4=',
				"content-type": "application/json"
			}
		}).write(_, JSON.stringify(health), "utf8").end().response(_);
		var body = resp.readAll(_);
		console.log(resp.statusCode + ": body=" + body); // debugging
	} catch (ex) {
		console.log(ex.stack); // for now
	}
}

if (config.health.logUrl) flows.setInterval(function(_) {
	try {
		logHealth(_, getHealth(_));
		//console.log('context = ' + Object.keys(globals.context));
	} catch (ex) {
		console.log(ex.stack);
	}
}, (config.health.delay || 60) * 1000);