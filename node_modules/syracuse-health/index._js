"use strict";

var config = require('config');
var globals = require('streamline-runtime').globals;
var flows = require('streamline-runtime').flows;
var ez = require('ez-streams');
var adminHelper = require('@sage/syracuse-lib/src/collaboration/helpers').AdminHelper;
var searchEngine = require('syracuse-search/lib/elasticSearch');
var parallel = config.health.parallel || 4;
var os = require('os');
var streams = require('streamline-streams');

var mongodb = require('mongodb');
var ReplSet = mongodb.ReplSet;

var AWS = require('aws-sdk');
AWS.config.update(config.aws);

config.health = config.health || {};

var perTenant = {};
var startTime = new Date();
var sites = {};

var siteCheck = function(url, _) {
	var request = streams.httpRequest({
		url: url,
		rejectUnauthorized: false,
		method: 'GET',
		headers: {
			'content-type': 'text/json',
			'Authorization': 'Basic ' + config.health.site
		}
	});
	try {
		var resp = request.end().response(_);
		var jsonResp = resp.readAll(_);
		return jsonResp;
	} catch (e) {
		//console.log(e);
		return;
	}
};

exports.addTenant = function(tenant) {
	perTenant[tenant] = perTenant[tenant] || {
		exceptions: 0,
		lastExceptions: 0,
		lastTime: null,
	};
};

function initializeMongoDB(mongoHost, mongoPort, mongoDatabase, _) {
	var hostArray = mongoHost.split(",");
	if (hostArray.length > 1) {
		var servers = [];
		var mongoServer = '';
		var port = 0;
		for (var i = 0; i < hostArray.length; i++) {
			//Need to parse out of existing collaboration.hostname configuration
			var pos = hostArray[i].indexOf(':');
			if (pos > 0) {
				mongoServer = hostArray[i].substring(0, pos);
				port = hostArray[i].substring(pos + 1);
			} else {
				mongoServer = hostArray[i];
				port = mongoPort;
			}
			servers[i] = new mongodb.Server(mongoServer, 27017, {});
		}
		var replSet = new ReplSet(servers, {});
		var db = new mongodb.Db(mongoDatabase || 'syracuse', replSet, {
			w: 1, // majority
			readPreference: "primaryPreferred",
			slaveOk: true
		});
	} else {
		var server = new mongodb.Server(mongoHost || 'localhost', mongoPort || 27017, {});
		var db = new mongodb.Db(mongoDatabase || 'syracuse', server, {
			w: 1, // majority
			readPreference: "primaryPreferred",
			slaveOk: true
		});
	}
	return db;
}

var tests = {

	mongoUQResponseTime: function(_, tenant) {
		var db = initializeMongoDB(config.collaboration.hostname, config.collaboration.port, tenant + '-syracuse', _);
		var res = db.open(_);
		var coll = db.collection('User', _);
		var cursor = coll.find({
			login: 'admin'
		}).toArray(_);
		db.close(_);
		if (cursor[0] == undefined) throw new Error("Unsuccesful User query.");
	},

	esUQResponseTime: function(_, tenant) {
		var indexName = adminHelper.getCollaborationEndpoint(_).getIndexName(_, 'en-us');
		var q = {
			query: {
				filtered: {
					query: {
						query_string: {
							query: "admin",
							analyze_wildcard: true,
							default_operator: "AND"
						}
					}
				}
			}
		};
		var resp = ez.devices.http.client({
			url: searchEngine.serverConfig.baseUrl + '/' + tenant + '.' + config.health.esIndex + '.' + indexName + "/user/_search",
			method: "POST",
			headers: {
				"content-type": "application/json"
			}
		}).write(_, JSON.stringify(q), "utf8").end().response(_);
		if (resp.statusCode !== 200) throw new Error("elastic search test: bad status code: " + resp.statusCode);
		var result = JSON.parse(resp.readAll(_));
		//console.log(JSON.stringify(result, null, 2));
		if (!result || !result.hits || !Array.isArray(result.hits.hits)) throw new Error("elastic search test: bad response");
		var found = result.hits.hits.some(function(hit) {
			return hit._source.login === "admin";
		});
		if (!found) throw new Error("elastic search test: admin user not found in index");
	},
};

function doTest(_, name, data, tenant, status) {
	var result = {
		name: name,
	};

	//Make sure site is active before running actual tests and logging to Cloudwatch
	if (status !== 'active') {
		result.error = 'Site not active.  Site status is ' + status + '.';
		result.ms = 0;
		data.exceptions++;
	} else {
		var t0 = new Date();
		try {
			tests[name](_, tenant);
		} catch (ex) {
			result.error = ex.message;
			result.stack = ex.stack;
			data.exceptions++;
		} finally {
			result.ms = new Date() - t0;
			//Log to AWS Cloudwatch if config.cloudwatch is true.
			if (config.health.cloudwatch) logAWS(_, result, tenant);
		}
	}
	return result;
}

function logAWS(_, result, tenant) {

	//if (!globals.context.tenantId) return;

	var cloudwatch = new AWS.CloudWatch({
		apiVersion: '2010-08-01'
	});
	//Publish health metric to Cloudwatch.  Passing latency time.  If error occurs, setting
	//latency to 1 minute which should trigger a cloud watch alarm.
	var value = 0;
	if (result.error !== undefined) {
		value = 60000;
	} else {
		value = result.ms;
	}
	var params = {
		Namespace: 'Site',
		MetricData: [{
			MetricName: result.name,
			Unit: 'Milliseconds',
			Dimensions: [{
				Name: 'Site ID',
				Value: tenant //globals.context.tenantId
			}, ],
			Value: value
		}]
	};
	//console.log('For site ' + tenant + ', Cloudwatch logging = ',params);
	cloudwatch.putMetricData(params, function(err, data) {
		if (err) console.log(err, err.stack);
		//else console.log(data);
	});
	return;
}

function timings(_) {}

function getTenantHealth(_, tenant) {
	var site = '';
	var siteID = '';
	var status = 'Invalid Site';
	var siteList = sites.sites;

	for (var i in siteList) {
		site = siteList[i].site;
		if (site == tenant) {
			siteID = siteList[i].id;
			status = siteList[i].status;
			break;
		}
	}

	if (status != 'Invalid Site') {
		var url = config.health.siteUrl + "/sites('" + siteID + "')/$service/siteHealth";
		var healthLog = siteCheck(url, _);
		healthLog = JSON.parse(healthLog);
		var now = new Date(Date.now());
		var lastLogDate = new Date(healthLog.UQLogTime);
		var diff = (now - lastLogDate) / 1000; //in seconds
		//Don't log if another node process is already logging for this site
		if (diff < (config.health.delay * .8)) { //use 80% of delay
			return '';
		}
	} else {
		return '';
	}

	var data = perTenant[tenant];
	var t = new Date();
	try {
		return {
			type: 'farm',
			site: tenant.toUpperCase(),
			siteStatus: status,
			startTime: startTime,
			currentTime: t,
			previousTime: data.lastTime,
			hostname: os.hostname(),
			pid: process.pid,
			tests: Object.keys(tests).map_(_, function(_, name) {
				return doTest(_, name, data, tenant, status);
			}),
			memory: process.memoryUsage(),
			totalExceptions: data.exceptions,
			newExceptions: data.exceptions - data.lastExceptions,
			timings: timings(_),
		};
	} finally {
		data.lastTime = t;
		data.lastExceptions = data.exceptions;
		//console.log(data.lastTime);
	}
}

function getHealth(_) {
	return Object.keys(perTenant).map_(_, parallel, function(_, tenantId) {
		globals.context = {
			tenantId: tenantId
		};
		getTenantHealth(_, tenantId);
	});
}

function logHealth(_, health) {

	if (health.length === 0) return;
	//console.log('\n\n JSON.stringify(health) = ' + JSON.stringify(health));
	try {
		var resp = ez.devices.http.client({
			url: config.health.logUrl,
			rejectUnauthorized: false,
			method: "POST",
			headers: {
				"content-type": "application/json"
			}
		}).write(_, JSON.stringify(health), "utf8").end().response(_);
		var body = resp.readAll(_);
		//console.log(resp.statusCode + ": body=" + body); // debugging
	} catch (ex) {
		console.log(ex.stack); // for now
	}
}

if (config.health.logUrl) flows.setInterval(function(_) {
	try {
		sites = siteCheck(config.health.siteUrl + '/sites/$service/siteList', _);
		sites = JSON.parse(sites);

		var health = getHealth(_);
		//Remove sites that did not log
		var res = JSON.stringify(health);
		res = res.replace(/"",/g, '');
		res = res.replace(/,""/g, '');
		if (res != '[""]') {
			health = JSON.parse(res);
			logHealth(_, health);
		}
	} catch (ex) {
		console.log(ex.stack);
	}
}, (config.health.delay || 60) * 1000);