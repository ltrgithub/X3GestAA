"use strict";

var program = require('commander');
var config = require('../index').config;
var sync = require("etna-etl/lib/sync").newSync(config.etna, config.etna.trace);

if (!config.etna) throw new Error("config.etna missing");

program
	.version("0.1.0", '-v, --version')
	.option('-e, --exportMeta', 'export metadata and push it to git')
	.option('-i, --importMeta', 'retrieve metadata from git and import it to mongodb/sql database')
	.option('-E, --exportData', 'export data from source sql database')
	.option('-I, --importData', 'import data into destination oracle database')
	.option('-t, --exportTexts', 'export texts')
	.option('-s, --syncTexts', 'synchronize texts')
	.option('-x, --test', 'Test')
	.parse(process.argv);


var t0 = Date.now();

if (program.exportMeta) sync.exportMetadataAndPush(_);
else if (program.importMeta) sync.importMetadata(_);
else if (program.exportData) sync.exportData(_);
else if (program.importData) sync.importData(_);
else if (program.exportTexts) sync.exportTexts(_);
else if (program.syncTexts) {
	// sync.syncText(_, "atexte");
	sync.syncText(_, "aplstd");
} else if (program.test) {
	//sync.exportMetadataAndPush(_, 'tables', ['ABANK'], {skipGit:true, skipTexts:true});
	// sync.exportMetadataAndPush(_, 'classes', ['ABANK', 'ATABLE'], {skipGit:true, skipTexts:true});
	// sync.exportMetadataAndPush(_, 'tables', ['ABANK', 'ATABLE', 'AABREV'], {
	// 	skipGit: false,
	// 	skipTexts: true
	// });

	/*
	sync.exportMetadataAndPush(_, 'tables', ['AOBJTXT'], {
		skipGit: true,
		skipTexts: true
	});
*/
	sync.exportMetadataAndPush(_, 'screens', ['PTH1'], {
		skipGit: true,
		skipTexts: true
	});
	// sync.exportMetadataAndPush(_, 'classes', ['CAI'], {
	// 	skipGit: true,
	// 	skipTexts: true
	// });
	// sync.exportMetadataAndPush(_, 'classes', ['EXPENSES'], {
	// 	skipGit: true,
	// 	skipTexts: true
	// });
	//sync.exportMetadataAndPush(_, 'windows', ['OACLA'], {skipGit:true, skipTexts:true});
	//	sync.exportMetadataAndPush(_, 'classes', ['TCAWRKHISSUI'], {skipGit:true, skipTexts:true});
	//	sync.exportMetadataAndPush(_, 'classes', null, {skipGit:true, skipTexts:true});
	//	sync.exportMetadataAndPush(_, 'tables', null, {skipGit:true, skipTexts:true});
	//sync.exportMetadataAndPush(_, 'contenttypes', null, {skipGit:true, skipTexts:true});
	//sync.exportMetadataAndPush(_, 'contexts', null, {skipGit:true, skipTexts:true});
	//sync.exportMetadataAndPush(_, 'functions', null, {skipGit:true, skipTexts:true});
	//sync.exportMetadataAndPush(_, 'globvars', null, {skipGit:true, skipTexts:true});
	//sync.exportMetadataAndPush(_, 'inquiries', null, {skipGit:true, skipTexts:true});

	//	sync.exportMetadataAndPush(_, 'tables', ['ABANK', 'ATABLE'], {skipGit:false, skipTexts:true});

	// sync.exportMetadataAndPush(_, 'tables', ['ABANK'], {
	// 	skipGit: false,
	// 	// skipTexts: true
	// });

	// sync.exportMetadataAndPush(_, 'misctables', [6], {
	// 	skipGit: true,
	// 	skipTexts: true
	// });


	//sync.exportMetadataAndPush(_, 'processes', ['1099MISC'], {skipGit:true, skipTexts:true});
	//sync.exportMetadataAndPush(_, 'reports', ['ACODIF'], {skipGit:true, skipTexts:true});
	//sync.exportMetadataAndPush(_, 'reports', null, {skipGit:true, skipTexts:true});
	//sync.exportMetadataAndPush(_, 'representations', ['ABANK'], {skipGit:true, skipTexts:true});
	// sync.exportMetadataAndPush(_, 'representations', ['SQUOTE'], {skipGit:true, skipTexts:true});
	//sync.exportMetadataAndPush(_, 'views', ['ADICADX'], {skipGit:true, skipTexts:true});


	//	sync.exportMetadataAndPush(_, 'classes', ['ABANK'], {skipGit:true, skipTexts:true});
	/*	
	var AWS = require('aws-sdk');
	var tunnel = require('tunnel');
	AWS.config.update({
		region: "eu-central-1",
		accessKeyId: 'AKIAIIJQTF546WRH6E6Q',
		secretAccessKey: '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',
	});

	var tunnelingAgent = tunnel.httpsOverHttp({
		proxy: {
			host: '172.31.34.9',
			port: 8080,
		}
	});

	AWS.config.update({
		httpOptions: {
			agent: tunnelingAgent
		}
	});


	var s3 = new AWS.S3();
	var s3Cfg = {
		connector: s3,
		settings: {
			bucket: 'sdeniaud.data',
			//key:'test.json',
		}
	};


	//sync.exportMetadataAndPush(_, null, null, {skipGit:true});
	//sync.exportMetadataAndPush(_, "tables", ["AABREV", "ABANK", "ATABLE"], false, {skipGit:true});

	//sync.exportMetadataAndPush(_, "datatypes", ["CCR"], {skipGit:true});
	//sync.importMetadata(_, {skipGit:true});

	// var ezS3 = require('ez-s3');
	// var s3Writer = ezS3.writer(_, s3Cfg.connector, s3Cfg.settings);
	// s3Writer.write(_, 'coucou');
	// s3Writer.write(_);

	//sync.exportData(_); //, s3Cfg);
	//sync.importData(_);
	//	sync.importFilesFromS3(_, s3Cfg);

	//sync.syncText(_, "atexte");
	//sync.syncText(_, "aplstd");

	setTimeout(~_, 5000);
*/
} else
	program.help();

config.etna.trace && config.etna.trace("execution completed in " + Math.round((Date.now() - t0) / 1000) + " seconds");

process.exit(0);