"use strict";
var config = require('../../../nodelocal').config.etna;
if (!config) throw new Error("etna section missing in nodelocal.js");
var supervisor = require("etna-supervisor/lib/supervisor");
var fs = require("streamline-fs");
var file = require("ez-streams").devices.file;
var jsonTrans = require("ez-streams").transforms.json;

var tmpRoot = config.tmpRoot;
var dataDir = tmpRoot + "/DATA";

var table;

function init(_) {
	if (!fs.exists(tmpRoot, _)) fs.mkdir(tmpRoot, _);
	if (!fs.exists(dataDir, _)) fs.mkdir(dataDir, _);
}

var skipList = /^(ACLOB|ADOCCLB|ADOCFLD|AESPION|AUDIT\w+|STAT|AMOULINETTE|APROCTEXTE|AWRKHIS\w+|CONTACT2)$/;

exports.exportAll = function(_) {
	init(_);
	var etnaSqlStore;
	try {
		etnaSqlStore = config.SUPERV.etnaSqlStore;
		config.SUPERV.etnaSqlStore = config.SUPERV.x3SqlStore;
		var superv = supervisor.create(_, "SUPERV");
		var dictReader = superv.reader(_, 'Table');
		var max = 100000;
		var gotIt = !config.start;
		dictReader.forEach(_, function(_, table) {
			if (!(gotIt = gotIt || table.name === config.start)) return;
			if (skipList.test(table.name)) return;
			var reader = table.reader(_, null, null, null, true);
			var writer = file.text.writer(dataDir + "/" + table.name + ".json");
			var rec, count = 0;
			try {
				reader.map(function(_, rec) {
					rec.ROWID = undefined;
					count++;
					if (count % 10000 === 0) console.log(table.name + ": " + count + " ...");
					return rec;
				}).transform(jsonTrans.formatter({
					space: '\t',
				})).pipe(_, writer);
			} catch (ex) {
				if (/ORA-00942/.test(ex.message)) console.log(table.name + ": " + ex.message);
				else console.log(ex.message); // TEMP HACK FOR INCONSISTENT DATA throw ex;
			}
			console.log(table.name + ": " + count);
		});
		console.log("DONE!");
	} finally {
		config.SUPERV.etnaSqlStore = etnaSqlStore;
	}
};

exports.importAll = function(_) {
	init(_);
	var superv = supervisor.create(_, "SUPERV");
	if (!config.SUPERV.sqlStore.writable) throw new Error("cannot import: database is read-only");
	var gotIt = !config.start;
	fs.readdir(dataDir, _).forEach_(_, function(_, fname) {
		var name = fname.substring(0, fname.length - 5); // strip .json extension
		if (!(gotIt = gotIt || name === config.start)) return;
		if (skipList.test(name)) return;
		console.log(name + ": reading");
		var table = superv.load(_, 'Table', name);
		if (!table) {
			console.log(name + ": cannot import: no metadata");
			return;
		}
		try {
			table.deleteIndexes(_);
		} catch (ex) {
			if (/ORA-01418/.test(ex.message)); //return console.error(name + ": " + ex.message);
			else throw ex;
		}
		try {
			table.drop(_);
		} catch (ex) {
			if (/ORA-00942/.test(ex.message)); //return console.error(name + ": " + ex.message);
			else throw ex;
		}
		table.create(_);

		var reader = file.text.reader(dataDir + '/' + fname);
		try {
			var count = reader.transform(jsonTrans.parser()).forEach(_, function(_, data, i) {
				if (i > 0 && i % 10000 === 0) console.log(table.name + ": " + i + " ...");
				table.convertIn(data);
				table.insert(_, data);
			});
			table.createIndexes(_);
			console.log(table.name + ": " + count + " inserted");
		} catch (ex) {
			if (/ORA-/.test(ex.message)) console.error(name + ": " + ex.message);
			else console.error(ex.stack);
			//throw ex;
		}
	});
	console.log("DONE!");
};
/*
if (this === require.main) {
	init(_);
	if (process.argv[2] === '-i') exports.importAll(_);
	else if (process.argv[2] === '-e') exports.exportAll(_);
	else throw new Error("usage: _node sqldump [-i|-e]");
	process.exit(0);
}
*/
