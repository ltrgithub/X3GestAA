"use strict";
var supervisor = require("etna-supervisor/lib/supervisor");
var fs = require("streamline-fs");
var file = require("ez-streams").devices.file;
var jsonTrans = require("ez-streams").transforms.json;

var skipList = /^(ACLOB|ADOCCLB|ADOCFLD|AESPION|AUDIT\w+|STAT|AMOULINETTE|APROCTEXTE|AWRKHIS\w+|CONTACT2)$/;

exports.exportAll = function(_, config, tracker) {
	function trace(str) {
		if (tracker) tracker.phaseDetail = str;
		if (config.trace) config.trace(str);
	}
	var dataDir = config.solutionPath + "/" + config.folderName + "/DATA";
	if (!fs.exists(dataDir, _)) fs.mkdir(dataDir, _);
	var superv = supervisor.create(_, config);
	var dictReader = superv.reader(_, 'Table');
	var max = 100000;
	dictReader.forEach(_, function(_, table) {
		if (skipList.test(table.name)) return;
		if (tracker && tracker.abortRequested) return;
		if (tracker) tracker.phase = "exporting " + table.name;

		superv.sqlDriver.withConnection(_, function(_, cnx) {
			var reader = table.reader(_, cnx, null, null, null, true);
			var writer = file.text.writer(dataDir + "/" + table.name + ".json");
			var rec, count = 0;
			try {
				reader.map(function(_, rec) {
					rec.ROWID = undefined;
					count++;
					trace(table.name + ": " + count + " ...");
					return rec;
				}).transform(jsonTrans.formatter({
					space: '\t',
				})).pipe(_, writer);
			} catch (ex) {
				if (/ORA-00942/.test(ex.message)) trace(table.name + ": " + ex.message);
				else console.error(ex.message); // TEMP HACK FOR INCONSISTENT DATA throw ex;
			}
			trace(table.name + ": " + count);
		});
	});
	trace("DONE!");
};

exports.importAll = function(_, config, tracker) {
	// don't take risks with non local SQL databases for now
	if (config.sql.hostname !== "localhost") throw new Error("IMPORT only allowed on localhost");

	function trace(str) {
		if (tracker) tracker.phaseDetail = str;
		if (config.trace) config.trace(str);
	}
	var dataDir = config.solutionPath + "/" + config.folderName + "/DATA";
	if (!fs.exists(dataDir, _)) fs.mkdir(dataDir, _);
	var superv = supervisor.create(_, config);
	fs.readdir(dataDir, _).forEach_(_, function(_, fname) {
		var name = fname.substring(0, fname.length - 5); // strip .json extension
		if (skipList.test(name)) return;
		if (tracker && tracker.abortRequested) return;
		if (tracker) tracker.phase = "importing " + name;
		trace(name + ": reading");
		var table = superv.load(_, 'Table', name);
		if (!table) {
			trace(name + ": cannot import: no metadata");
			return;
		}
		table.deleteIndexes(_, true);
		try {
			table.drop(_, true);
		} catch (ex) {
			// I get error 00600 on ADOVAL -- investigate why later
			console.error(name + ": DROP FAILED: " + ex.stack);
			return;
		}
		table.create(_);

		var reader = file.text.reader(dataDir + '/' + fname);
		superv.sqlDriver.withConnection(_, function(_, cnx) {
			try {
				var writer = table.writer(_, cnx);
				var count = reader.transform(jsonTrans.parser()).map(function(_, data, i) {
					trace(table.name + ": " + i + " ...");
					table.convertIn(data);
					return data;
				}).pipe(_, writer).count;
				table.createIndexes(_);
				trace(table.name + ": " + count + " inserted");
			} catch (ex) {
				if (/ORA-/.test(ex.message)) trace(name + ": " + ex.message);
				else console.error(ex.message);
				//throw ex;
			}
		});
	});
	trace("DONE!");
};
/*
if (this === require.main) {
	init(_);
	if (process.argv[2] === '-i') exports.importAll(_);
	else if (process.argv[2] === '-e') exports.exportAll(_);
	else throw new Error("usage: _node sqldump [-i|-e]");
	process.exit(0);
}
*/