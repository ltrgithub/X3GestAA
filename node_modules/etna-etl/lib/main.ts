/// <reference path="../node_modules/@sage/etna/lib/etna-ambient.d.ts" />
import { _ } from 'streamline-runtime';
import * as commander from 'commander';
import { Options } from './export-entity';

var config = require('../index').config;
if (!config.etna) throw new Error("config.etna missing");


var program = require('commander');
program
	.version("0.1.0", '-v, --version')
	.option('-e, --exportMeta', 'export metadata and push it to git')
	.option('-y, --entityType <entityType>', 'type of entity to export')
	.option('-n, --entityNames <entityNames>', 'names of the entity to export')
	.option('-i, --importMeta', 'retrieve metadata from git and import it to mongodb/sql database')
	.option('-s, --syncTexts', 'synchronize texts')
	.option('-t, --test', 'Test')
	.option('-z, --textServer <textServer>', 'send texts to the text server')
	.option('-p, --product <product>', 'send texts to the text server for product')
	.option('-o, --outputFolder <outputFolder>', 'the folder to which metadata have to be extracted')
	.parse(process.argv);

program.outputFolder = program.outputFolder || "C:\\temp\\metadata_syracuse";

function run(_: _) {
	var t0 = Date.now();
	var sync = require('./sync').newSync(_, {
		userConfig: true,
		etnaConfig: config.etna,
		outputFolder: program.outputFolder,
	}, config.etna.trace);


	if (program.exportMeta && ((!program.entityType && !program.entityNames))) {
		// Full export
		console.log("exportMetadataAndPush full")
		sync.exportMetadataAndPush(_, undefined, undefined, {
			exportToMongo: true
		});
	} else if (program.exportMeta && program.entityType) {
		// Export for a single entity
		var entityNames: string[];
		if (program.entityNames) entityNames = program.entityNames.split(',');
		var options: Options = {
			skipGit: true,
			skipTexts: true,
			exportToMongo: true,
			// specialExport: true,
			// modulesFilter: [2, 3, 4, 5, 6, 7, 8, 9, 12],
			//		modulesFilter: [9, 15, 20],
		};
		console.log("exportMetadataAndPush entityType:" + program.entityType + " entityNames:", entityNames);
		sync.exportMetadataAndPush(_, program.entityType, entityNames, options);

	} else if (program.importMeta) {
		sync.importMetadata(_, {
			exportToMongo: true
		});
	} else if (program.syncTexts) {
		// sync.syncText(_, "atexte");
		sync.syncText(_, "aplstd");
	} else if (program.textServer) {
		sync.syncTextServer(_, program.textServer, program.product);
	} else if (program.test2) {
		sync.importMetadataToMongo(_);
	} else if (program.test) {
		var options: Options = {
			skipGit: true,
			skipTexts: true,
			// specialExport: true,
			// modulesFilter: [2, 3, 4, 5, 6, 7, 8, 9, 12],
			//		modulesFilter: [9, 15, 20],
		};

		sync.exportMetadataAndPush(_, 'screens');


		// sync.importMetadata(_, {skipGit: true, absoluteFilenames:['c:\\test\\docker\\SUPERV\\test-metadata\\SUPERV\\ACTIONS\\CONTSEL.json']});
		// sync.importMetadata(_, {skipGit: true, absoluteFilenames:['c:\\test\\docker\\SUPERV\\test-metadata\\SUPERV\\DATATYPES\\ABIMG.json']});

		// sync.exportMetadataAndPush(_, 'classes', ['AQCPOS'], options);


		// sync.exportMetadataAndPush(_, undefined, undefined, options);
		// sync.exportMetadataAndPush(_, 'recurringtask', ['ACOMPOBJ1'], options);
		// sync.exportMetadataAndPush(_, 'facttables', ['TEST'], options);
		// sync.exportMetadataAndPush(_, 'reservedbrackets', ['STD'], options);	
		// sync.exportMetadataAndPush(_, 'controltables', ['DOCTYPVER'], options);
		// sync.exportMetadataAndPush(_, 'actions', ['ACRELNK'], options);

		// sync.exportMetadataAndPush(_, 'tables', ['ABANK'], options);
		// sync.exportMetadataAndPush(_, 'inquiryscreens', ['ALO~STD'], options);
		// sync.exportMetadataAndPush(_, 'inquiryscreens', undefined, options);
		// sync.exportMetadataAndPush(_, 'graphicprocesses', undefined, options);

		// PAIE V6
		// sync.exportMetadataAndPush(_, 'screens', undefined, options);
		// sync.exportMetadataAndPush(_, 'processes', undefined, options);
		// sync.exportMetadataAndPush(_, 'functions', undefined, options);
		// sync.exportMetadataAndPush(_, 'windows', undefined, options);
		// sync.exportMetadataAndPush(_, 'globvars', undefined, options);
		// sync.exportMetadataAndPush(_, 'misctables', undefined, options);
		// sync.exportMetadataAndPush(_, 'datatypes', undefined, options);
		// sync.exportMetadataAndPush(_, 'reports', undefined, options);
		// sync.exportMetadataAndPush(_, 'entrypoints', undefined, options);
		// sync.exportMetadataAndPush(_, 'inquiries', undefined, options);


		// sync.exportMetadataAndPush(_, 'objects', undefined, options);
		// sync.exportMetadataAndPush(_, 'parameters', undefined, options);

		// GX3APP
		// sync.exportMetadataAndPush(_, 'objects', undefined, options);
		// sync.exportMetadataAndPush(_, 'parameters', undefined, options);


		// sync.exportMetadataAndPush(_, 'actions', undefined, options);
		// sync.exportMetadataAndPush(_, 'activitycodes', undefined, options);
		// sync.exportMetadataAndPush(_, 'classes', undefined, options);

		// sync.exportMetadataAndPush(_, 'contenttypes', undefined, options);
		// sync.exportMetadataAndPush(_, 'contexts', undefined, options);
		// sync.exportMetadataAndPush(_, 'datatypes', undefined, options);

		// sync.exportMetadataAndPush(_, 'entrypoints', undefined, options);

		// sync.exportMetadataAndPush(_, 'functions', undefined, options);
		// sync.exportMetadataAndPush(_, 'globvars', undefined, options);

		// sync.exportMetadataAndPush(_, 'inquiries', undefined, options);
		// sync.exportMetadataAndPush(_, 'misctables', undefined, options);



		// sync.exportMetadataAndPush(_, 'parameters', undefined, options);
		// sync.exportMetadataAndPush(_, 'processes', undefined, options);
		// sync.exportMetadataAndPush(_, 'reports', undefined, options);
		// sync.exportMetadataAndPush(_, 'representations', undefined, options);


		// sync.exportMetadataAndPush(_, 'parameters', undefined, options);
		// sync.exportMetadataAndPush(_, 'screens', undefined, options);
		// sync.exportMetadataAndPush(_, 'objects', undefined, options);
		// sync.exportMetadataAndPush(_, 'tables', undefined, options);
		// sync.exportMetadataAndPush(_, 'views', undefined, options);
		// sync.exportMetadataAndPush(_, 'windows', undefined, options);

		// sync.exportMetadataAndPush(_, undefined, undefined, options);

		// sync.exportMetadataAndPush(_, 'screens', ['ABF0'], options);

		// sync.exportMetadataAndPush(_, 'tables', ['ABICOND'], options);
		// sync.exportMetadataAndPush(_, 'tables', ['BPADDRESS'], options);

		// sync.exportMetadataAndPush(_, 'actions', ['ABIIMP'], options);
		// sync.exportMetadataAndPush(_, 'actions', ['ABATPAR'], options);
		// sync.exportMetadataAndPush(_, 'activitycodes', ['ABI'], options);

		// sync.importMetadataToMongo(_, ["meta/SUPERV/CONTEXTS/ALEGCUR.json"]);

		// sync.exportMetadataAndPush(_, 'classes', ['ABANK', 'ATABLE'], options);

		// sync.exportMetadataAndPush(_, 'screens', ['ABRMODIF'], options);

		// sync.exportMetadataAndPush(_, 'representations', ['ABANK'], options);

		// sync.exportMetadataAndPush(_, 'representations', ['AQCPROC01'], options);


		// sync.exportMetadataAndPush(_, 'classes', ['AQCORDER'], options);

		// sync.exportMetadataAndPush(_, 'classes', ['ACTXPARAM'], options);

		// sync.exportMetadataAndPush(_, 'tables', ['ABANK', 'ATABLE', 'AABREV'], options);
		// sync.exportMetadataAndPush(_, 'tables', ['ABICOND'], options);
		// sync.exportMetadataAndPush(_, 'representations', undefined, options);

		// sync.exportMetadataAndPush(_, 'tables', ['ABANK'], options);

		// sync.exportMetadataAndPush(_, 'tables', ['AOBJTXT'], options);
		// sync.exportMetadataAndPush(_, 'screens', ['PTH1'], options);
		// sync.exportMetadataAndPush(_, 'classes', ['CAI'], options);
		// sync.exportMetadataAndPush(_, 'classes', ['EXPENSES'], options);
		// sync.exportMetadataAndPush(_, 'windows', ['OACLA'], options);
		// sync.exportMetadataAndPush(_, 'classes', ['TCAWRKHISSUI'], options);
		// sync.exportMetadataAndPush(_, 'classes', null, options);
		// sync.exportMetadataAndPush(_, 'tables', null, options);
		// sync.exportMetadataAndPush(_, 'contenttypes', null, options);
		// sync.exportMetadataAndPush(_, 'contexts', null, options);
		// sync.exportMetadataAndPush(_, 'functions', null, options);
		// sync.exportMetadataAndPush(_, 'globvars', null, options);
		// sync.exportMetadataAndPush(_, 'inquiries', null, options);

		// sync.exportMetadataAndPush(_, 'tables', ['ABANK', 'ATABLE'], {skipGit:false, skipTexts:true});

		// sync.exportMetadataAndPush(_, 'tables', ['ABANK'], {
		// 	skipGit: false,
		// 	// skipTexts: true
		// });

		// sync.exportMetadataAndPush(_, 'misctables', [6], options);


		// sync.exportMetadataAndPush(_, 'processes', ['1099MISC'], options);
		// sync.exportMetadataAndPush(_, 'reports', ['ACODIF'], options);
		// sync.exportMetadataAndPush(_, 'reports', null, options);
		// sync.exportMetadataAndPush(_, 'representations', ['ABANK'], options);
		// sync.exportMetadataAndPush(_, 'representations', ['SQUOTE'], options);
		// sync.exportMetadataAndPush(_, 'views', ['ADICADX'], options);


		// sync.exportMetadataAndPush(_, 'classes', ['ABANK'], options);
		/*	
	var AWS = require('aws-sdk');
	var tunnel = require('tunnel');
	AWS.config.update({
		region: "eu-central-1",
		accessKeyId: 'AKIAIIJQTF546WRH6E6Q',
		secretAccessKey: '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',
	});

	var tunnelingAgent = tunnel.httpsOverHttp({
		proxy: {
			host: '172.31.34.9',
			port: 8080,
		}
	});

	AWS.config.update({
		httpOptions: {
			agent: tunnelingAgent
		}
	});


	var s3 = new AWS.S3();
	var s3Cfg = {
		connector: s3,
		settings: {
			bucket: 'sdeniaud.data',
			//key:'test.json',
		}
	};


	// sync.exportMetadataAndPush(_, null, null, {skipGit:true});
	// sync.exportMetadataAndPush(_, "tables", ["AABREV", "ABANK", "ATABLE"], false, {skipGit:true});

	// sync.exportMetadataAndPush(_, "datatypes", ["CCR"], {skipGit:true});
	// sync.importMetadata(_, {skipGit:true});

	// var ezS3 = require('ez-s3');
	// var s3Writer = ezS3.writer(_, s3Cfg.connector, s3Cfg.settings);
	// s3Writer.write(_, 'coucou');
	// s3Writer.write(_);

	// sync.syncText(_, "atexte");
	// sync.syncText(_, "aplstd");

	setTimeout(_, 5000);
*/
	} else
		program.help();

	config.etna.trace && config.etna.trace("execution completed in " + Math.round((Date.now() - t0) / 1000) + " seconds");

	process.exit(0);
}

_.run(run);