"use strict";
var locale = require('streamline-locale'),
	fs = require("streamline-fs"),
	path = require('path'),
	mongodb = require('mongodb'),
	datetime = require('syracuse-core').types.datetime,
	jsonHelper = require('scm-helper/lib/jsonHelper');

exports.newImporter = function(_, config) {
	var trace = config.trace;
	var jsondir = config.metaFolder;
	var mongoConfig = config.mongo || {};
	var mgConf = mongoConfig;
	var dbUrl = "mongodb://" + (mgConf.connectionString || ((mgConf.host || "localhost") + ":" + (mgConf.port || 27017))) + "/" + (mgConf.database || "x3meta");

	trace && trace(locale.format(module, "importToMongoWithUrl", dbUrl));
	var db = mongodb.MongoClient.connect(dbUrl, mgConf.options || {
		db: {
			w: 1
		}
	}, _);

	// files[xxx] contains only ABSOLUTE filenames
	var files = {
		/*		
		TEXTS: [],
		MENUS: []
*/
	};

	buildFilesList(_);

	function buildFilesList(_) {
		// Note : config.absoluteFilenames contains ABSOLUTE filenames
		if (config.absoluteFilenames && config.absoluteFilenames.length) {
			config.absoluteFilenames.forEach(function(absoluteFilename) {
				var result = jsonHelper.parseMetaFilename(absoluteFilename);
				files[result.type] = files[result.type] || [];
				files[result.type].push(absoluteFilename);
			});
			return;
		}

		// No filenames are provided, we have to parse jsondir to retrieve all the available metadata files

		fs.readdir(jsondir, _).forEach_(_, function(_, module) {
			var moduleDir = path.join(jsondir, module);
			if (fs.stat(moduleDir, _).isDirectory()) {
				fs.readdir(moduleDir, _).forEach_(_, function(_, type) {
					var typeDir = path.join(moduleDir, type);
					if (fs.stat(typeDir, _).isDirectory()) {
						var entries = fs.readdir(typeDir, _);

						entries.filter(function(name) {
							return (/\.json$/).test(name);
						}).forEach_(_, function(_, name) {
							files[type] = files[type] || [];
							files[type].push(path.join(typeDir, name));
						});

						entries.filter(function(name) {
							return (/^\w\w\w$/).test(name);
						}).forEach_(_, function(_, lan) {
							fs.readdir(typeDir + "/" + lan, _).filter(function(name) {
								return (/\.json$/).test(name);
							}).forEach_(_, function(_, name) {
								var dest = type === "MENUS" ? files.MENUS : files.TEXTS;
								var absoluteFilename = path.join(jsondir, module, type, lan, name);
								if (config.absoluteFilenames) {
									// The file must belong to the provided list of files to process
									if (config.absoluteFilenames.indexOf(absoluteFilename) == -1) {
										return;
									}
								}
								dest.push(absoluteFilename);
							});
						});
					}
				});
			}
		});

	}

	return {
		open: function(_) {
			//db.open(_);
			return this;
		},
		fillTables: function(_, entity, tracker, dropCollectionBeforeImport) {

			function addDiagnose(message, severity) {
				if (!tracker) {
					return;
				}
				tracker.$diagnoses = tracker.$diagnoses || [];
				tracker.$diagnoses.push({
					$severity: severity || "info",
					$message: message,
				});
			}

			trace && trace(locale.format(module, "insertMetadaWithType", entity.title));
			var t0 = Date.now();
			var coln = db.collection(entity.tableName, _);

			if (dropCollectionBeforeImport) {
				addDiagnose(locale.format(module, "fullSyncDropCollection", entity.tableName));
				coln.drop();
			}

			var filesToLoad = files[entity.subdir] || [];

			var importedFilesCount = 0;
			var etag = datetime.now().toString();
			filesToLoad.forEach_(_, function(_, filename, i) {
				if (tracker && tracker.abortRequested) {
					return;
				}

				var msg = locale.format(module, "importJSONWithCount", entity.title, i + 1, filesToLoad.length, filename);
				addDiagnose(msg);
				trace && trace(msg);

				importedFilesCount++;
				var data;
				try {
					data = jsonHelper.readJsonFile(_, filename, entity, {
						dontCreateEmptyLines: true
					});
					data = jsonHelper.decodeObject(data);
				} catch (err) {
					var msg = locale.format(module, "importJSONError", filename, err.message);
					trace && trace(msg);
					addDiagnose(msg, "error");
					console.error(msg);
					return;
				}
				var filter = entity.primaryKey.reduce(function(total, item) {
					total[item] = data[item];
					return total;
				}, {});

				data._etag = etag;
				coln.update(filter, data, {
					upsert: true
				}, _);

			});
			if (tracker && tracker.abortRequested) {
				return;
			}
			trace && trace(locale.format(module, "importDone", entity.title, filesToLoad.length, Math.round((Date.now() - t0) / 1000)));

			var msg = locale.format(module, "createUniqueIndex", entity.title, entity.primaryKey);
			addDiagnose(msg);
			trace & trace(msg);
			var keys = entity.primaryKey.reduce(function(global, item) {
				global[item] = 1;
				return global;
			}, {});
			coln.ensureIndex(keys, {
				unique: true
			}, _);
			return importedFilesCount;
		},
	};
};