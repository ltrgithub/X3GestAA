"use strict";

var helpers = require('syracuse-core/lib/helpers');
var globals = require('streamline/lib/globals');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var util = require('util');
var not = require('syracuse-event/lib/scheduler');
var evt = require('syracuse-collaboration/lib/entities/notificationEvent');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var datetime = require("syracuse-core/lib/types/datetime");
var date = require("syracuse-core/lib/types/date");
var setTimeout = require('streamline/lib/util/flows').setTimeout;


function wait(time, _) {
	setTimeout(_, time);
}


var doStop = false;

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(_ >> function() {
				process.kill(process.pid);
			}, 0);
		}
	}
});

var db;

asyncTest("init environnement", 1, function(_) {
	//
	db = adminTestFixtures.initializeTestEnvironnement(_);
	ok(db != null, "Environnement initialized");
	//
	start();
});

asyncTest("Replacements", 9, function(_) {
	var entity = db.model.getEntity(_, "user");
	var whereClause = "(login eq \"guest\")";
	var user = db.fetchInstance(_, db.model.getEntity(_, "user"), {
		sdataWhere: whereClause
	});
	var whereClause = "(code eq \"fr-FR\")";
	var localePreference = db.fetchInstance(_, db.model.getEntity(_, "localePreference"), {
		sdataWhere: whereClause
	});
	strictEqual(evt._localize(_, "abc", {}, user, localePreference), "abc", "No replacement");
	strictEqual(evt._localize(_, {
		"en-us": "TEXTEN",
		"fr-fr": "TEXTFR {bla}"
	}, {
		bla: "buh"
	}, user, localePreference), "TEXTFR buh", "Localized original text");
	strictEqual(evt._localize(_, "abc {bla} {bla2} {bla3}", {
		bla: "BLA",
		bla2: {
			"en-us": "ENBLA2",
			"fr-fr": "FRBLA2"
		}
	}, user, localePreference), "abc BLA FRBLA2 {bla3}", "Properties replacements");
	var utcvalue = "2013-10-15";
	var date1 = date.parse(utcvalue);
	var format = localePreference.shortDate(_);
	var formatted = date1.toString(format);
	var formatted2 = date.fromJsDate(new Date(utcvalue)).toString(format);
	strictEqual(evt._localize(_, "abc {bla} {bla2}", {
		bla: utcvalue,
		bla2: date1
	}, user, localePreference), "abc " + utcvalue + " " + formatted, "Date replacements without format");
	strictEqual(evt._localize(_, "abc {date:bla} {date:bla2} {date:bla3}", {
		bla: utcvalue,
		bla2: date1,
		bla3: new Date(utcvalue)
	}, user, localePreference), "abc " + formatted + " " + formatted + " " + formatted2, "Date replacements with format");
	var utcvalue = "2013-10-15 10:10:10 GMT+0000";
	var date2 = datetime.parse(utcvalue);
	var format = localePreference.shortDatetime(_);
	var formatted = date2.toString(format);
	var formatted2 = datetime.fromJsDate(new Date(utcvalue)).toString(format);
	strictEqual(evt._localize(_, "abc {bla} {bla2}", {
		bla: utcvalue,
		bla2: date2
	}, user, localePreference), "abc " + utcvalue + " " + formatted, "Date replacements without format");
	strictEqual(evt._localize(_, "abc {datetime:bla} {datetime:bla2} {datetime:bla3}", {
		bla: utcvalue,
		bla2: date2,
		bla3: new Date(utcvalue)
	}, user, localePreference), "abc " + formatted + " " + formatted + " " + formatted2, "Date replacements with format");
	strictEqual(evt._localize(_, "abc {user.login} {user.blabla}", {
		bla: utcvalue,
		bla2: date2,
		bla3: new Date(utcvalue)
	}, user, localePreference), "abc " + user.login(_) + " {user.blabla}", "User data");
	strictEqual(evt._localize(_, "abc {bla}", {
		bla: "{bla2}",
		bla2: "{bla3}",
		bla3: "{bla}a"
	}, user, localePreference), "abc {bla3}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "Test with recursion");
	start();
});



asyncTest("test array function", 38, function(_) {
	strictEqual(not._insert([], 0).join(","), "0", "empty array");
	strictEqual(not._insert([1], 0).join(","), "0,1", "insert 0 into [1]");
	strictEqual(not._insert([1], 1).join(","), "1", "insert 1 into [1]");
	strictEqual(not._insert([1], 2).join(","), "1,2", "insert 2 into [1]");
	strictEqual(not._insert([1, 3], 0).join(","), "0,1,3", "insert 0 into [1,3]");
	strictEqual(not._insert([1, 3], 1).join(","), "1,3", "insert 1 into [1,3]");
	strictEqual(not._insert([1, 3], 2).join(","), "1,2,3", "insert 2 into [1,3]");
	strictEqual(not._insert([1, 3], 3).join(","), "1,3", "insert 3 into [1,3]");
	strictEqual(not._insert([1, 3], 5).join(","), "1,3,5", "insert 5 into [1,3]");
	strictEqual(not._insert([1, 3, 5], 0).join(","), "0,1,3,5", "insert 0 into [1,3,5]");
	strictEqual(not._insert([1, 3, 5], 1).join(","), "1,3,5", "insert 1 into [1,3,5]");
	strictEqual(not._insert([1, 3, 5], 2).join(","), "1,2,3,5", "insert 2 into [1,3,5]");
	strictEqual(not._insert([1, 3, 5], 3).join(","), "1,3,5", "insert 3 into [1,3,5]");
	strictEqual(not._insert([1, 3, 5], 4).join(","), "1,3,4,5", "insert 4 into [1,3,5]");
	strictEqual(not._insert([1, 3, 5], 5).join(","), "1,3,5", "insert 5 into [1,3,5]");
	strictEqual(not._insert([1, 3, 5], 6).join(","), "1,3,5,6", "insert 6 into [1,3,5]");
	strictEqual(not._insert([1, 3, 5, 7], 0).join(","), "0,1,3,5,7", "insert 0 into [1,3,5,7]");
	strictEqual(not._insert([1, 3, 5, 7], 1).join(","), "1,3,5,7", "insert 1 into [1,3,5,7]");
	strictEqual(not._insert([1, 3, 5, 7], 2).join(","), "1,2,3,5,7", "insert 2 into [1,3,5,7]");
	strictEqual(not._insert([1, 3, 5, 7], 3).join(","), "1,3,5,7", "insert 3 into [1,3,5,7]");
	strictEqual(not._insert([1, 3, 5, 7], 4).join(","), "1,3,4,5,7", "insert 4 into [1,3,5,7]");
	strictEqual(not._insert([1, 3, 5, 7], 5).join(","), "1,3,5,7", "insert 5 into [1,3,5,7]");
	strictEqual(not._insert([1, 3, 5, 7], 6).join(","), "1,3,5,6,7", "insert 6 into [1,3,5,7]");
	strictEqual(not._insert([1, 3, 5, 7], 7).join(","), "1,3,5,7", "insert 7 into [1,3,5,7]");
	strictEqual(not._insert([1, 3, 5, 7], 8).join(","), "1,3,5,7,8", "insert 8 into [1,3,5,7]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 0).join(","), "0,1,3,5,7,9,11", "insert 0 into [1,3,5,7,9,11]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 1).join(","), "1,3,5,7,9,11", "insert 1 into [1,3,5,7,9,11]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 2).join(","), "1,2,3,5,7,9,11", "insert 2 into [1,3,5,7,9,11]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 3).join(","), "1,3,5,7,9,11", "insert 3 into [1,3,5,7,9,11]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 4).join(","), "1,3,4,5,7,9,11", "insert 4 into [1,3,5,7,9,11]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 5).join(","), "1,3,5,7,9,11", "insert 5 into [1,3,5,7,9,11]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 6).join(","), "1,3,5,6,7,9,11", "insert 6 into [1,3,5,7,9,11]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 7).join(","), "1,3,5,7,9,11", "insert 7 into [1,3,5,7,9,11]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 8).join(","), "1,3,5,7,8,9,11", "insert 8 into [1,3,5,7,9,11]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 9).join(","), "1,3,5,7,9,11", "insert 9 into [1,3,5,7,9,11]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 10).join(","), "1,3,5,7,9,10,11", "insert 10 into [1,3,5,7,9,11]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 11).join(","), "1,3,5,7,9,11", "insert 11 into [1,3,5,7,9,11]");
	strictEqual(not._insert([1, 3, 5, 7, 9, 11], 12).join(","), "1,3,5,7,9,11,12", "insert 12 into [1,3,5,7,9,11]");
	start();
});

asyncTest("schedule one task", 7, function(_) {
	var entity = db.model.getEntity(_, "eventTime");
	var testData = [];
	not._setTestData(db, testData);
	var now = Date.now();
	not.schedule(_, undefined, "1", now, {
		test: 1
	}, 1);
	strictEqual(db.count(_, entity, {}), 0, "0 row in database");
	wait(1000, _);
	strictEqual(testData.join(","), "1", "1 task immediately");

	var testData = [2];
	not._setTestData(db, testData);
	var now = Date.now();
	not.schedule(_, undefined, "1", new Date(now + 1500), {
		test: 1
	}, 1);
	strictEqual(db.count(_, entity, {}), 1, "1 row in database");
	wait(500, _);
	strictEqual(db.count(_, entity, {}), 1, "1 row in database");
	strictEqual(testData.join(","), "2", "1 task not started");
	wait(1500, _);
	strictEqual(testData.join(","), "2,1", "1 task completed");
	strictEqual(db.count(_, entity, {}), 0, "0 row in database");
	start();
});

asyncTest("change one task", 12, function(_) {
	var entity = db.model.getEntity(_, "eventTime");
	var testData = [3];
	not._setTestData(db, testData);
	var now = Date.now();
	not.schedule(_, undefined, "2", now + 3500, {
		test: 1
	}, 1);
	strictEqual(db.count(_, entity, {}), 1, "changed event before original event - 1 row in database");
	wait(500, _);
	not.schedule(_, undefined, "2", now + 1500, {
		test: 2
	}, 1);
	strictEqual(db.count(_, entity, {}), 1, "1 row in database after change");

	strictEqual(testData.join(","), "3", "1 task  in 1 second");
	wait(1500, _);
	strictEqual(testData.join(","), "3,2", "1 changed task completed");
	strictEqual(db.count(_, entity, {}), 0, "0 row in database");
	wait(1700, _);
	strictEqual(testData.join(","), "3,2", "1 changed task completed, even later");

	var testData = [4];
	not._setTestData(db, testData);
	var now = Date.now();
	not.schedule(_, undefined, "2", now + 1500, {
		test: 1
	}, 1);
	strictEqual(db.count(_, entity, {}), 1, "changed event after original event - 1 row in database");
	wait(500, _);
	not.schedule(_, undefined, "2", now + 3500, {
		test: 2
	}, 1);
	strictEqual(db.count(_, entity, {}), 1, "1 row in database after change");

	strictEqual(testData.join(","), "4", "1 task  in 1 second");
	wait(1500, _);
	strictEqual(testData.join(","), "4", "task not yet executed");
	wait(1700, _);
	strictEqual(testData.join(","), "4,2", "1 changed task completed");
	strictEqual(db.count(_, entity, {}), 0, "0 row in database");

	start();
});


asyncTest("scheduleAll", 5, function(_) {
	var entity = db.model.getEntity(_, "eventTime");
	var testData = [5];
	not._setTestData(db, testData);
	var now = Date.now();
	not.schedule(_, undefined, "2", now + 1500, {
		test: 2
	}, 1);
	not.schedule(_, undefined, "1", now + 1500, {
		test: 1
	}, 1);
	strictEqual(db.count(_, entity, {}), 2, "schedule event - 2 rows in database");
	not.scheduleAll(_, undefined, [
		["3", now + 2000, {
			test: 4
		}],
		["2", now + 4000, {
			test: 6
		}]
	], 1);
	strictEqual(db.count(_, entity, {}), 2, "changed event replaces original event - 2 rows in database");
	wait(2500, _);
	strictEqual(testData.join(","), "5,4", "1 replaced task completed");
	wait(2000, _);
	strictEqual(testData.join(","), "5,4,6", "all tasks completed");
	strictEqual(db.count(_, entity, {}), 0, "0 row in database");

	start();
});

asyncTest("scheduleAll with equal times", 4, function(_) {
	var entity = db.model.getEntity(_, "eventTime");
	var testData = [6];
	not._setTestData(db, testData);
	var now = Date.now();
	not.scheduleAll(_, undefined, [
		["1", now + 4000, {
			test: 1
		}],
		["2", now + 4000, {
			test: 2
		}],
		["3", now + 4000, {
			test: 3
		}],
		["4", now + 4000, {
			test: 9
		}]
	], 1);
	not.scheduleAll(_, undefined, [
		["1", now + 1500, {
			test: 4
		}],
		["2", now + 1500, {
			test: 5
		}],
		["3", now + 4000, {
			test: 3
		}],
		["4", now + 4000, {
			test: 9
		}]
	], 1);
	strictEqual(db.count(_, entity, {}), 4, "changed event replaces original event - 3 rows in database");
	wait(2000, _);
	strictEqual(testData.sort().join(","), "4,5,6", "2 replaced tasks completed");
	wait(2000, _);
	strictEqual(testData.sort().join(","), "3,4,5,6,9", "all tasks completed");
	strictEqual(db.count(_, entity, {}), 0, "0 row in database");

	start();
});



asyncTest("stop tests", 0, function(_) {
	doStop = true;
	start();
});