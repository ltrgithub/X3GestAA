"use strict";
var decimal = require("syracuse-core/lib/types/decimal");

var numberFormat = require("./numberFormat");

exports.validate = function(value, constraints, errors) {
	if (value == null) {
		if (constraints.$isMandatory) return errors.push("value is mandatory");
		if (!constraints.$isNullable) return errors.push("value cannot be null");
		return;
	}
	if (typeof value == "string") {
		value = parseInt(value);
	} else if (typeof value !== "number" || (value % 1 !== 0)) {
		errors.push("value must be an integer");
		return;
	}
	if (constraints.$divisibleBy != null) if (value % constraints.$divisibleBy !== 0) errors.push("value must be divisible by" + constraints.$divisibleBy);
	if (constraints.$enum != null && !constraints.$enum.some(function(elt) {
		return elt.$value == value;
	})) errors.push("value must be one of the values in enum array");
	if (constraints.$minimum != null) {
		if (constraints.$minimumCanEqual) {
			if (value < constraints.$minimum) errors.push("value must be >= " + constraints.$minimum);
		} else {
			if (value <= constraints.$minimum) errors.push("value must be > " + constraints.$minimum);
		}
	}
	if (constraints.$maximum != null) {
		if (constraints.$maximumCanEqual) {
			if (value > constraints.$maximum) errors.push("value must be >= " + constraints.$maximum);
		} else {
			if (value >= constraints.$maximum) errors.push("value must be > " + constraints.$maximum);
		}
	}
};

exports.parse = function(str, format) {
	return Math.floor(numberFormat.parse(str, format));
};

exports.format = function(val, format) {
	return numberFormat.format(val, format);
};

exports.add = function(n1, n2) {
	return n1 + n2;
};

exports.subtract = function(n1, n2) {
	return n1 - n2;
};

exports.numberValue = function(val) {
	return parseInt(val, 10);
};

exports.defaultValue = 0;

// ==== old parse method ===

//exports.parse = function(value, gs, ds){
//    gs = (gs === ".") ? "[.]" : gs;
//    return decimal.make(value.toString().replace(new RegExp(gs || " ", "g"), ""), 0);
//}