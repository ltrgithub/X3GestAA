"use strict";
/* @flow */
exports.calcMimeType = function(bin: Buffer): string {
	var mimeType = "application/octet-stream";
	if (isBlobImgGif(bin)) {
		mimeType = "image/gif";
	} else if (isBlobImgJpg(bin)) {
		mimeType = "image/jpeg";
	} else if (isBlobImgBMP(bin)) {
		mimeType = "image/bmp";
	} else if (isBlobImgPng(bin)) {
		mimeType = "image/png";
	} else if (isBlobImgTiff(bin)) {
		mimeType = "image/tiff";
	}
	return mimeType;
};

/**
 * BMP File contains 0x42 0x4d ("BM") in the first two bytes of the file header
 *
 * For more information see:
 * http://en.wikipedia.org/wiki/.BMP
 *
 * @param bin
 * @return
 */
function isBlobImgBMP(bin) {
	return bin[0] === 0x42 && bin[1] === 0x4d;
}

/**
 * GIF Files are identified by the first three characters containing
 * 0x47 0x49 0x46 - ("GIF") the following 3 characters "87a" or "89a"
 *
 * For more information see:
 * http://en.wikipedia.org/wiki/.GIF
 *
 * @param bin
 * @return
 */
function isBlobImgGif(bin) {
	return bin[0] === 0x47 && bin[1] === 0x49 && bin[2] === 0x46;
}

/**
 *
 * JPEG SOI (Start of Image) marker : 0xFF 0xD8
 *
 * For more information see:
 * http://en.wikipedia.org/wiki/.JPEG
 *
 * @param bin
 * @return
 */
function isBlobImgJpg(bin) {
	return bin[0] === 0xff && bin[1] === 0xd8;
}

/**
 *
 * PNG file signature The first eight bytes of a PNG file always contain the
 * following (hex) 0x89 0x50 0x4e 0x47 0x0d 0x0a 0x1a 0x0a
 * (ASCII C notation) \211 P N G \r \n \032 \n
 *
 * For more information see:
 * http://en.wikipedia.org/wiki/.PNG
 *
 * @param bin
 * @return
 */
function isBlobImgPng(bin) {
	return bin[0] === 137 && bin[1] === 80 && bin[2] === 78 && bin[3] === 71 && bin[4] === 13 && bin[5] === 10 && bin[6] === 26 && bin[7] === 10;
}

/**
 * TIFF files all begin with a two byte indicator of the byte order
 * "II" (0x49 0x49) for little-endian (i.e. Intel) or "MM" (0x4D 0x4D) for
 * big-endian (i.e. Motorola)
 *
 * For more information see:
 * http://en.wikipedia.org/wiki/TIFF
 *
 * @param bin
 * @return
 */
function isBlobImgTiff(bin) {
	return (bin[0] === 0x4D && bin[1] === 0x4D) || (bin[0] === 0x49 && bin[1] === 0x49);
}