"use strict";
/// !doc
///
/// # Resource utility functions
///
/// ```javascript
/// var resUtil = require('syracuse-core/lib/resource/util');
/// ```
///

var types = require("syracuse-core/lib/types/allTypes");

exports.parseValue = function(prop, val) {
	if (val == null) return val;

	switch (prop.type) {
	case "date":
	case "datetime":
	case "time":
		return val ? types[prop.type].parse(val) : null;
	case "decimal":
		return types.decimal.make(val, prop.scale);
	case "integer":
		if (typeof val === "object") return parseInt(val.toString(), 10);
		if (typeof val === "string") return parseInt(val, 10);
		else return val;
	default:
		return val;
	}
};
exports.formatValue = function(prop, val, name) {
	if (val == null) return val;
	// array elements
	if(prop.$isArray && Array.isArray(val))
		return val.map(function(v) {
			return exports.formatValue(prop, v);
		});
	//
	switch (prop.type) {
	case "date":
	case "time":
	case "datetime":
	case "decimal":
		return val.toString();
	default:
		return val;
	}
};

exports.compare = function(prop, a, b) {
	switch (prop.type) {
	case "date":
	case "time":
	case "datetime":
		return a.compare(b);
	default:
		return a.compareTo(b);
	}
}

/// -------------
/// ##parseCapabilities($capabilities)
/// 
/// Parses the `$capabilities` string and returns an object with boolean property for each capability.
/// 
exports.parseCapabilities = function($capabilities) {
	var $capability = {};
	if ($capabilities != null) {
		$capabilities.split(",").forEach(function($prop) {
			$capability[$prop] = true;
		});
	}
	return $capability;
}