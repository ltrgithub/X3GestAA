var helpers = require("syracuse-core/lib/helpers");
var walkPath = helpers.object.walkPath;
var forEachKey = helpers.object.forEachKey;

var _templatePattern = /(\{.*?\})/g;

var Template = exports.Template = function (expression) {
	this.expression = expression;
	this.matches = typeof expression === "string" ? expression.match(_templatePattern) : null;
}
helpers.defineClass(Template, null, {
	_getPathValue : function(path, obj) {
		var self = this;
		var path = walkPath(obj, path);
		return path ? path.resource[path.property] : undefined;
	},
	isTemplate : function() {
		var self = this;
		return self.matches != null;
	},
	resolve : function(obj, fallbackObj) {
		var self = this;
		if (!self.matches)
			return null;
		var result = this.expression;
		self.matches.forEach(function(match) {
			var propertyPath = match.substr(1, match.length - 2);
			var value = self._getPathValue(propertyPath, obj);
			if (value === undefined) {
				value = self._getPathValue(propertyPath, fallbackObj);
			}
			result = result.replace(match, value);
		});
		return result;
	}
});



function _isLeaf(value) {
	//Gérer dates et types syracuse...
	if (value == null) //A voir si à garder
		return true;
	return {"string":1, "boolean":1, "number":1}[typeof value];
}

var Resource = exports.Resource = function (proto, instance) {
	if (!proto)
		return;
	this._proto = proto;
	this._instance = instance;
	this._relativePath = "";
};

Resource.createSubResource = function(parentResource, path) {
	var r = new Resource();
	r._proto = parentResource._proto;
	r._instance = parentResource._instance;
	path = parentResource._relativePath ? parentResource._relativePath + "." + path : path;
	r._relativePath = path;
	return r;i
};

helpers.defineClass(Resource, null, {
	_getAbsolutePath : function (propertyPath) {
		var self = this;
		return self._relativePath ? self._relativePath + "." + propertyPath : propertyPath;
	},
	_getInstanceValue : function(propertyPath, pathIsAbsolute) {
		var self = this;
		return self._getValue(propertyPath, self._instance, pathIsAbsolute);
	},
	_getProtoValue : function(propertyPath, pathIsAbsolute) {
		var self = this;
		return self._getValue(propertyPath, self._proto, pathIsAbsolute);
	},
	_getValue : function(propertyPath, obj, pathIsAbsolute) {
		var self = this;
		if (!pathIsAbsolute) {
			propertyPath = self._getAbsolutePath(propertyPath);
		}
		var path = walkPath(obj, propertyPath);
		return path ? path.resource[path.property] : undefined;
	},
	_getMatchesFromExpression : function(expression) {
		var self = this;
		if (typeof expression != "string") {
			return null;
		}
		var matches = expression.match(_templatePattern);
		if (!matches)
			return null;
		return matches;
	},
	getValue: function(propertyPath) {
		var self = this;
		var value = self._getInstanceValue(propertyPath);
		if (value === undefined) {
			value = self._getProtoValue(propertyPath);
			var templatedValue = self.parse(value);
			if (templatedValue != null) {
				value = templatedValue;
			} else if (!_isLeaf(value)) {
				return Resource.createSubResource(self, propertyPath);
			}
		} else {
			if (Array.isArray(value)) {
				if (value.length && !(value[0] instanceof Resource)) {
					value = value.map(function(v) {
						return new Resource(v, self.getChildProto(propertyPath));
					});
					self.setValue(propertyPath, value);
				}
			} else {
				if (!_isLeaf(value)) {
					return Resource.createSubResource(self, propertyPath);
				}
			}
		}
		return value;
	},
	setValue: function(propertyPath, val) {
		var self = this;
		propertyPath = self._getAbsolutePath(propertyPath);
		var path = walkPath(self._instance, propertyPath);
		path.resource[path.property] = val;
	},
	getChildProto : function(propertyPath) {
		var self = this;
		var itemProto = self._proto.$properties[propertyPath];
		if (itemProto && itemProto.$item)
			return itemProto.$item;
	},
	createChild: function(propertyPath, data) {
		var self = this;
		var value = self._getInstanceValue(propertyPath);
		if (value !== undefined && Array.isArray(value)) {
			var childProto = self.getChildProto(propertyPath);
			if (childProto) {
				return new Resource(childProto, data);
			}
		}
	},
	parse : function(expression) {
		var self = this;
		var matches = self._getMatchesFromExpression(expression);
		if (!matches)
			return null;
		matches.forEach(function(match) {
			var propertyPath = match.trim().substr(1, match.length - 2);
			var value = self._getInstanceValue(propertyPath, true);
			if (value === undefined) {
				value = self._getProtoValue(propertyPath, true);
			}
			expression = expression.replace(match.trim(), value);
		});
		return expression;
	},
	getTemplateInfo : function(propertyPath) {
		var self = this;
		var expression = self._getProtoValue(propertyPath);
		var matches = self._getMatchesFromExpression(expression);
		if (!matches)
			return null;
		var linkedProperties = matches.map(function(match) {
			var propertyPath = match.trim().substr(1, match.length - 2);
			return propertyPath;
		})
		return {
			linkedProperties : linkedProperties
		};
	}
});