"use strict";

var root = {};

/// !doc
/// 
/// ## Very basic generic registry
/// 
/// data is organized as /namespace/key/attribute -> value
/// 
/// registry = require('syracuse-core/lib/registry');
/// 
/// * `registry.put(ns, [key, [atb, val]])`  
///   with 4 parameters registers val at /ns/key/atb  
///   with 2 parameters registers an empty bucket at /ns/key 
///   with 1 parameter registers an empty namespace at /ns  
exports.put = function(ns, key, atb, val) {
	var cat = root[ns] || (root[ns] = {});
	if (arguments.length === 1) return cat;
	var entry = cat[key] || (cat[key] = {});
	if (arguments.length === 2) return entry;
	entry[atb] = val;
};

/// * `registry.delete(ns[, key[, atb]])`  
///   with 3 parameters deletes attribute /ns/key/atb  
///   with 2 parameters deletes entire bucket /ns/key  
///   with 1 parameter, deletes entire namespace /ns  
exports.delete = function(ns, key, atb) {
	var cat, entry;
	if (arguments.length === 1) {
		delete root[ns];
		return;
	}
	if (!(cat = root[ns])) return;
	if (arguments.length === 2) {
		delete cat[key];
		return;
	}
	if (!(entry = cat[key])) return;
	delete entry[atb];
};

/// * `val = registry.get(ns[, key[, atb]])`  
///   queries the registry.  
///   with 3 parameters returns value at /ns/key/atb
///   with 2 parameters returns bucket at /ns/key
///   with 2 parameter1 returns namespace /ns
exports.get = function(ns, key, atb) {
	var cat, entry;
	cat = root[ns];
	if (arguments.length === 1) {
		return cat;
	}
	entry = cat[key];
	if (arguments.length === 2) {
		return entry;
	}
	return entry[atb];
};

/// * `registry.scanExtensions(fn)`  
exports.scanExtensions = function(fn) {
	var fs = require('fs');
	var fsp = require('path');
	var rootDir = fsp.join(__dirname, '/../..');
	fs.readdirSync(rootDir).forEach(function(sub) {
		if (fs.existsSync(fsp.join(rootDir, sub, "package.json"))) {
			var pack = require(sub + '/package.json');
			var extensions = pack && pack.sage && pack.sage.x3 && pack.sage.x3.extensions;
			if (extensions) fn(extensions, sub, pack);
		}
	});
};