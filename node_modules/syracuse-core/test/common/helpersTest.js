"use strict";
var module = QUnit.module;

var helpers = require("syracuse-core/lib/helpers");

module('core helpers');

test('Object extend helper', 8, function() {
	var src = {
		a: "aaa",
		c: "ccc"
	};
	var ext = {
		b: "bbb",
		c: "c-c"
	};
	deepEqual(helpers.object.extend(src, ext), {
		a: "aaa",
		c: "ccc",
		b: "bbb"
	}, "extend (override not set)");

	src = {
		a: "aaa",
		c: "ccc"
	};
	deepEqual(helpers.object.extend(src, ext, false), {
		a: "aaa",
		c: "ccc",
		b: "bbb"
	}, "extend (override set to false)");

	src = {
		a: "aaa",
		c: "ccc"
	};
	deepEqual(helpers.object.extend(src, ext, true), {
		a: "aaa",
		c: "c-c",
		b: "bbb"
	}, "extend overriding with a string");

	src = {
		a: "aaa",
		c: "ccc"
	};
	ext = {
		b: "bbb",
		c: {
			c1: "ccc"
		}
	};
	deepEqual(helpers.object.extend(src, ext, true), {
		a: "aaa",
		c: {
			c1: "ccc"
		},
		b: "bbb"
	}, "extend overriding with an object");

	src = {
		a: "aaa",
		c: "ccc"
	};
	ext = {
		b: "bbb",
		c: {
			c1: "cc1",
			c2: "cc2"
		}
	};
	deepEqual(helpers.object.extend(src, ext, true), {
		a: "aaa",
		c: {
			c1: "cc1",
			c2: "cc2"
		},
		b: "bbb"
	}, "extend overriding with an object property");

	src = {
		a: "aaa",
		c: {
			c1: "cc1",
			c2: "cc2",
			c3: "cc3"
		}
	};
	ext = {
		b: "bbb",
		c: {
			c1: "cc1",
			c2: "c-2"
		}
	};
	deepEqual(helpers.object.extend(src, ext, true), {
		a: "aaa",
		c: {
			c1: "cc1",
			c2: "c-2"
		},
		b: "bbb"
	}, "extend overriding with an object property (deep mode not set)");

	src = {
		a: "aaa",
		c: {
			c1: "cc1",
			c2: "cc2",
			c3: "cc3"
		}
	};
	ext = {
		b: "bbb",
		c: {
			c1: "cc1",
			c2: "c-2"
		}
	};
	deepEqual(helpers.object.extend(src, ext, true, false), {
		a: "aaa",
		c: {
			c1: "cc1",
			c2: "c-2"
		},
		b: "bbb"
	}, "extend overriding with an object property (deep mode set to false)");

	src = {
		a: "aaa",
		c: {
			c1: "cc1",
			c2: "cc2",
			c3: "cc3"
		}
	};
	deepEqual(helpers.object.extend(src, ext, true, true), {
		a: "aaa",
		c: {
			c1: "cc1",
			c2: "c-2",
			c3: "cc3"
		},
		b: "bbb"
	}, "extend overriding with an object property (deep mode set to true)");
});

test('Object isFunction helper', 6, function() {
	ok(helpers.object.isFunction(function() {}), "Function");
	ok(!helpers.object.isFunction("hello"), "'hello' String is not a Function");
	ok(!helpers.object.isFunction(123), "123 Number is not a Function");
	ok(!helpers.object.isFunction({}), "Object is not a Function");
	ok(!helpers.object.isFunction([1,2,3]), "Array is not a Function");
	ok(!helpers.object.isFunction(/abc/), "RegEx is not a Function");
});