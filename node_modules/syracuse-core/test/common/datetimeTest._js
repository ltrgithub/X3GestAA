"use strict";
//
/* global QUnit: false, ok: false, asyncTest: false, test: false, equal: false, strictEqual: false, same: false, start: false, stop: false */

QUnit.module(module.id);
var datetime = require("syracuse-core/lib/types/datetime");
var locale = require('streamline-locale');

test('basic', 9, function() {
	var d = datetime.make(2010, 10, 13, 15, 25, 3, 424);

	strictEqual(d.year, 2010, "year ok");
	strictEqual(d.month, 10, "month ok");
	strictEqual(d.day, 13, "day ok");
	strictEqual(d.weekDay, datetime.wednesday, "weekday ok");
	strictEqual(d.yearDay, 286, "yearday ok");
	strictEqual(d.hour, 15, "hour ok");
	strictEqual(d.minute, 25, "minute ok");
	strictEqual(d.second, 3, "second ok");
	strictEqual(d.millisecond, 424, "millisecond ok");
});

test('add', function() {
	var d = datetime.makeUtc(2010, 1, 1, 0, 0, 0, 0);
	strictEqual(d.toString(), "2010-01-01T00:00:00.000Z", "base date");
	var d1 = d.addDayFractions(0.5);
	strictEqual(d1.toString(), "2010-01-01T12:00:00.000Z", "add 0.5 days");
});


asyncTest('parse', 17, function(_) {
	// WARNING tests with AM/PM may not work correctly without setting locale

	var d = datetime.parse("2010-10-13T13:25:03.424Z");
	strictEqual(d.year, 2010, "parse check year (no format)");
	strictEqual(d.month, 10, "parse check month (no format)");
	strictEqual(d.day, 13, "parse check day (no format)");
	strictEqual(d.hour, 15, "parse check hour (no format)"); // WARNING Test only passes in Paris time zone
	strictEqual(d.minute, 25, "parse check minute (no format)");
	strictEqual(d.second, 3, "parse check second (no format)");
	strictEqual(d.millisecond, 424, "parse check millisecond (no format)");

	locale.setCurrent(_, 'en-GB');
	d = datetime.parse("2010-10-13 13.25.03", "yyyy-MM-dd' 'HH.mm.ss");
	strictEqual(d.year, 2010, "parse check year (yyyy-MM-dd' 'HH.mm.ss)");
	strictEqual(d.month, 10, "parse check month (yyyy-MM-dd' 'HH.mm.ss)");
	strictEqual(d.day, 13, "parse check day (yyyy-MM-dd' 'HH.mm.ss)");
	strictEqual(d.hour, 13, "parse check hour (yyyy-MM-dd' 'HH.mm.ss)");
	strictEqual(d.minute, 25, "parse check minute (yyyy-MM-dd' 'HH.mm.ss)");
	strictEqual(d.second, 3, "parse check second (yyyy-MM-dd' 'HH.mm.ss)");
	strictEqual(d.millisecond, 0, "parse check millisecond (yyyy-MM-dd' 'HH.mm.ss)");

	// WARNING Following Tests only pass in Paris time zone
	strictEqual(datetime.parse("datetime value was : 2/13/95 7:10:01 PM", "'datetime value was : 'M/d/yy' 'h:mm:ss tt").toString(), "1995-02-13T18:10:01.000Z", "parse.toString() tricky example");
	strictEqual(datetime.parse("date is : 2 February 1995 4:24:13 AM", "'date is : 'd MMMM yyyy h:mm:ss tt").toString(), "1995-02-02T03:24:13.000Z", "parse.toString() and month name");
	strictEqual(datetime.parse("date is : Thu 2 February 2012 4:24:13 A", "'date is : 'ddd d MMMM yyyy h:mm:ss t").toString(), "2012-02-02T03:24:13.000Z", "parse.toString() and abbreviated day name");

	start();
});

asyncTest('format', 5, function(_) {
	// WARNING tests with AM/PM may not work correctly without setting locale
	// WARNING Test only passes in Paris time zone
	strictEqual(datetime.make(2010, 10, 13, 15, 25, 3, 424).toString(), "2010-10-13T13:25:03.424Z", "no format arg");

	locale.setCurrent(_, 'en-GB');
	strictEqual(datetime.make(2010, 10, 3, 15, 25, 3, 424).toString("yy/d/M h:mm:ss tt"), "10/3/10 3:25:03 PM", "format --> yy/d/M h:mm:ss tt");
	strictEqual(datetime.make(2010, 8, 13, 15, 25, 3, 424).toString("'created on : 'M/d/yyyy hh.mm.ss t"), "created on : 8/13/2010 03.25.03 P", "format --> 'created on : 'M/d/yyyy hh.mm.ss t");
	strictEqual(datetime.make(2010, 10, 13, 15, 25, 3, 424).toString("'Time''s : 'MM-dd-yyyy hh''''mm''''ss tt"), "Time's : 10-13-2010 03'25'03 PM", "format with quotes");

	locale.setCurrent(_, 'fr-FR');
	strictEqual(datetime.make(2010, 10, 2, 15, 25, 3, 424).toString("d MMM yyyy HH.mm.ss"), "2 oct. 2010 15.25.03", "format with abbreviated month name");
	start();
});