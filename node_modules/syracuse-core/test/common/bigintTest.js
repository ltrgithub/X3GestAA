"use strict";
QUnit.module(module.id);

var bigInt = require("syracuse-core/lib/types/bigint");

test('API', 28, function(){
	var b1 = bigInt.make("-123456789012345678901234567890");
	var b2 = bigInt.make(123456789012345);
	var b3 = bigInt.make(100);
	strictEqual(b1.abs().toString(), "123456789012345678901234567890", "abs ok");
	strictEqual(b1.add(b2).toString(), "-123456789012345555444445555545", "add ok");
	strictEqual(b3.bitCount(), 3, "bitCount ok");
	strictEqual(b3.bitLength(), 7, "bitLength ok");
	strictEqual(b3.clearBit(6).toString(), "36", "clearBit ok");
	strictEqual(bigInt.make("123456789012345555444445555545").compareTo(bigInt.make("123456789012345555444445555545")) , 0, "compareTo ok");
	strictEqual(b1.clone().toString(), "-123456789012345678901234567890", "clone ok");
	var b4=bigInt.make(12345678901234590);
	strictEqual( b4.divide(b3).toString(), "123456789012345", "divide ok");
	strictEqual(bigInt.make('1234567890123456789012345678901100000000').divide(bigInt.make('1234567890123456789012345678901100000000')).toString(), "1", "divide ok");
	strictEqual(bigInt.make('1234567890123456789012345678901100000000').divide(bigInt.make('-1234567890123456789012345678901100000000')).toString(), "-1", "divide ok");
	
	strictEqual(b2.divideAndRemainder(b3)[0].toString(), "1234567890123", "divideAndRemainder[0] ok");
	strictEqual(b2.divideAndRemainder(b3)[1].toString(), "45", "divideAndRemainder[1] ok");
	strictEqual(b3.intValue(), 100, "intValue ok");
	strictEqual(b1.equals(bigInt.make("-123456789012345678901234567890")), true, "equals ok");
	strictEqual(b1.max(b2).toString(), "123456789012345", "max ok");
	strictEqual(b1.min(b2).toString(), "-123456789012345678901234567890", "min ok");
	strictEqual(b2.mod(b3).toString(), "45", "mod ok");
	b4=b2.clone(b2);
	b4.dMultiply(Math.pow(10,9));
	strictEqual(b4.toString(), "123456789012345000000000", "dMultiply ok");
	strictEqual(b2.multiply(b3).toString(), "12345678901234500", "multiply ok");
	strictEqual(b3.pow(10).toString(), "100000000000000000000", "pow ok");
	strictEqual(b1.remainder(b3).toString(), "-90", "remainder ok");
	strictEqual(b3.setBit(0).toString(), "101", "setBit ok");
	strictEqual(b3.shiftLeft(1).toString(), "200", "shiftLeft ok");
	strictEqual(b3.shiftRight(1).toString(), "50", "shiftRight ok");
	strictEqual(b1.signum(0), -1, "signum ok");
	strictEqual(b3.testBit(1), false, "testBit ok");
	strictEqual(b1.toString(), "-123456789012345678901234567890", "toString ok");
	strictEqual( bigInt.make("-123456789012345555444445555545").subtract(b2).toString(), "-123456789012345678901234567890", "subtract ok");
});



