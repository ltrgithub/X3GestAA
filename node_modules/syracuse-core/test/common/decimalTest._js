"use strict";

QUnit.module(module.id);
var decimal = require("../../lib/types/decimal");
var locale = require('streamline-locale');

test('constructor', 6, function() {
	var b1 = decimal.make("-123456789012345678901234567890.11", 8);
	strictEqual(b1.toString(), "-123456789012345678901234567890.11000000", "toString ok");
	var b2 = decimal.make("0.000056789012345678901234567890", 5);
	strictEqual(b2.toString(), "0.00005", "toString ok");
	var b3 = decimal.make(123456789.01234, 7);
	strictEqual(b3.toString(), "123456789.0123400", "toString ok");
	var b4 = decimal.make(-1e-10);
	strictEqual(b4.toString(), "-0.0000000001", "toString ok");
	var b5 = decimal.make(0.06 + 0.01, 4);
	strictEqual(b5.toString(), "0.0700", "toString ok");
	b5 = decimal.make(-1, 8);
	strictEqual(b5.toString(), "-1.00000000", "toString ok");
});

test('basic API', 32, function() {
	var b1 = decimal.make(0.06, 4);
	var b2 = decimal.make(0.01, 4);
	strictEqual(b1.add(b2).toString(), "0.0700", "add ok");
	b1 = decimal.make("-123456789012345678901234567890.11", 8);
	b2 = decimal.make("123456789012345678901234567890.11", 8);
	strictEqual(b1.add(b2).toString(), "0.00000000", "add ok");
	strictEqual(b1.add(b2.negate()).subtract(b1).toString(), "-123456789012345678901234567890.11000000", "negate,subtract ok");
	strictEqual(decimal.make("-123456789012345678901234567890.11", 8).compareTo(decimal.make("-123456789012345678901234567890.11", 8)), 0, "compareTo ok");
	strictEqual(b2.divide(b1).toString(), "-1.00000000", "divide ok");
	b1 = decimal.make("8901234567890123456789.11", 8);
	strictEqual(b1.divide(decimal.make(0.06, 4)).toString(), "148353909464835390946485.16666667", "divide ok");
	strictEqual(b1.negate().divide(decimal.make(0.06, 4)).toString(), "-148353909464835390946485.16666667", "divide ok");
	strictEqual(b1.divide(decimal.make(0.03, 4)).toString(), "296707818929670781892970.33333333", "divide ok");
	strictEqual(b1.negate().divide(decimal.make(0.03, 4)).toString(), "-296707818929670781892970.33333333", "divide ok");
	b1 = decimal.make("8901234567890123456789.118", 8);
	strictEqual(b1.setScale(2).toString(), "8901234567890123456789.12", "setScale ok");
	strictEqual(b1.negate().setScale(2).toString(), "-8901234567890123456789.12", "setScale ok");
	b1 = decimal.make("8901234567890123456789.112", 8);
	strictEqual(b1.setScale(2).toString(), "8901234567890123456789.11", "setScale ok");
	strictEqual(b1.negate().setScale(2).toString(), "-8901234567890123456789.11", "setScale ok");
	b1 = decimal.make("8901234567890123456789.115", 8);
	strictEqual(b1.setScale(2).toString(), "8901234567890123456789.12", "setScale ok");

	strictEqual(b1.negate().setScale(2).toString(), "-8901234567890123456789.11", "setScale ok");

	strictEqual(b1.numberValue(), 8901234567890123456789.12, "numberValue ok");
	b1 = decimal.make(0.06, 4);
	b2 = decimal.make(0.001, 4);
	strictEqual(b1.multiply(b2).toString(), "0.0001", "multiply ok");
	strictEqual(b1.multiply(b2).numberValue(), 0.0001, "numberValue ok");
	strictEqual(Math.round(1.5), 2, "Math.round(1.5)   ok");
	strictEqual(Math.round(2.5), 3, "Math.round(2.5) ok");
	strictEqual(Math.round(-1.5), -1, "Math.round(-1.5) ok");
	strictEqual(Math.round(-2.5), -2, "Math.round(-2.5) ok");
	b1 = decimal.make(1.5, 4);
	b2 = decimal.make(2.5, 4);

	strictEqual(b1.setScale(0, decimal.HALF_CEILING).toString(), "2", "(1.5).setScale(0)   ok");
	strictEqual(b2.setScale(0, decimal.HALF_CEILING).toString(), "3", "(2.5).setScale(0) ok");
	strictEqual(b1.negate().setScale(0, decimal.HALF_CEILING).toString(), "-1", "(-1.5).setScale(0) ok");
	strictEqual(b2.negate().setScale(0, decimal.HALF_CEILING).toString(), "-2", "(-2.5).setScale(0) ok");
	strictEqual(b1.setScale(0, decimal.HALF_EVEN).toString(), "2", "(1.5, HALF_EVEN).setScale(0)   ok");
	strictEqual(b2.setScale(0, decimal.HALF_EVEN).toString(), "2", "(2.5, HALF_EVEN).setScale(0) ok");
	strictEqual(b1.negate().setScale(0, decimal.HALF_EVEN).toString(), "-2", "(1.5, HALF_EVEN).setScale(0) ok");
	strictEqual(b2.negate().setScale(0, decimal.HALF_EVEN).toString(), "-2", "(2.5, HALF_EVEN).setScale(0) ok");
	strictEqual(decimal.parseOld("-125 123,87", " ", ",").toString(), "-125123.8700000000", "parse ok");
	strictEqual(decimal.parseOld("").toString(), "0.0000000000", "parse of empty ok");

});

test('format with ts and ds', 6, function() {
	var b1 = decimal.make("-123456789012345678901234567890.11", 8);
	strictEqual(b1.toString(" ", ","), "-123 456 789 012 345 678 901 234 567 890,11000000", "toString(' ',',') ok");
	strictEqual(b1.toString(".", ","), "-123.456.789.012.345.678.901.234.567.890,11000000", "toString('.',',') ok");
	strictEqual(b1.toString(","), "-123,456,789,012,345,678,901,234,567,890.11000000", "toString(',') ok");
	strictEqual(b1.toString("'"), "-123'456'789'012'345'678'901'234'567'890.11000000", "toString(''') ok");
	strictEqual(b1.toString("", ","), "-123456789012345678901234567890,11000000", "toString('',',') ok");
	b1 = decimal.make("-23456789012345678901234567890.11", 8);
	strictEqual(b1.toString(".", ","), "-23.456.789.012.345.678.901.234.567.890,11000000", "toString('.',',') ok (num.length%3 != 0)");
});

test('parse with ts and ds', 2, function() {
	strictEqual(decimal.parseOld("-125 123,87", " ", ",").toString(), "-125123.8700000000", "parse ok");
	strictEqual(decimal.parseOld("2.0000000000", " ", ".").toString(), "2.0000000000", "parse ok");
});

// === new parsing method, with format ===
asyncTest('parse(value,format)', 19, function(_) {

	var localePreferences = {
		"numberDecimalSeparator": ",",
		"numberGroupSeparator": " "
	};

	locale.setCurrent(_, 'en-US', localePreferences); // gs=","	ds="." 	for en-US, but shouldn't be considered, since localePreferences are set differently

	// % model %
	//strictEqual(decimal.parse("formattedNumber", "format"), "expectedValue", "format: | value: | parse ok");

	strictEqual(decimal.parse("12345.67").toString(), decimal.make("12345.67").toString(), "no format 1/2 (decimal). parse ok");
	strictEqual(decimal.parse("12345").toString(), decimal.make("12345").toString(), "no format 2/2 (integer). parse ok");
	strictEqual(decimal.parse("12345,67", "0.0#").toString(), decimal.make("12345.67").toString(), "format: 0.0# | value: 12345,67 | parse ok");
	strictEqual(decimal.parse("12 345,6", "0,000.0").toString(), decimal.make("12345.6").toString(), "format: 0,000.0 | value: 12 345.6 | parse ok");
	strictEqual(decimal.parse("12345", "0").toString(), decimal.make("12345").toString(), "format: 0 | value: 12345 | parse ok");
	strictEqual(decimal.parse("-12345,67", "0.##").toString(), decimal.make("-12345.67").toString(), "format: 0.## | value: -12345.67| parse ok");
	strictEqual(decimal.parse("12300%", "0.#%").toString(), decimal.make("123").toString(), "format: 0.#% | value: 12300%| parse ok");
	strictEqual(decimal.parse("123000‰", "0‰").toString(), decimal.make("123").toString(), "format: 0‰ | value: 123000 | parse ok");
	strictEqual(decimal.parse("123 pièces", "0' pièces'").toString(), decimal.make("123").toString(), "format: 0' pièces' | value: 123 pièces| parse ok");
	strictEqual(decimal.parse("'test' : 12,30 test", "'''test'' :' 0.00 'test'").toString(), decimal.make("12.3").toString(), "format: '''test'' :' 0.00 'test' | value: 'test' : 12,30 test| parse ok");
	strictEqual(decimal.parse("-test 14", "'-test '0").toString(), decimal.make("14").toString(), "format: '-test '0 | value: -test 14| parse ok");

	// list separator
	strictEqual(decimal.parse("123,45", "0.00;(0.00);'zero'").toString(), decimal.make("123.45").toString(), "format: 0.00;(0.00);'zero' | value: 123.45 | parse ok");
	strictEqual(decimal.parse("(123,45)", "0.00;(0.00);'zero'").toString(), decimal.make("-123.45").toString(), "format: 0.00;(0.00);'zero' | value: (123.45) | parse ok");
	strictEqual(decimal.parse("zero", "0.00;(0.00);'zero'").toString(), decimal.make("0").toString(), "format: 0.00;(0.00);'zero' | value: zero | parse ok");
	strictEqual(decimal.parse("123", "+0;(0);'0'").toString(), decimal.make("123").toString(), "format: +0;(0);'0' | value: 123 | parse ok");
	strictEqual(decimal.parse("(123)", "+0;(0);'0'").toString(), decimal.make("-123").toString(), "format: +0;(0);'0' | value: (123) | parse ok");
	strictEqual(decimal.parse("0", "+0;(0);'0'").toString(), decimal.make("0").toString(), "format: +0;(0);'0' | value: 0 | parse ok");

	// '#' only
	strictEqual(decimal.parse("+1 234,56", "+#,###.##").toString(), decimal.make("1234.56").toString(), "format: +#,###.## | value: +1 234,56 | format ok");
	strictEqual(decimal.parse(",5", "#,###.##").toString(), decimal.make("0.5").toString(), "format: #,###.## | value: ,5 | format ok");

	// $raw
	/*
	strictEqual(decimal.parse("0.5548", "$raw").toString(), "0.5548", "format: $raw | value: 0.5548 | format ok");
	strictEqual(decimal.parse("554.8", "$raw").toString(), "554.8", "format: $raw | value: 554.8 | format ok");
	strictEqual(decimal.parse("55.540248", "$raw").toString(), "55.540248".toString(), "format: $raw | value: 55.540248 | format ok");
	strictEqual(decimal.parse("55540248", "$raw").toString(), "55540248".toString(), "format: $raw | value: 55540248 | format ok");
	*/

	start();
});

asyncTest('format(value,format)', 31, function(_) {
	// % model %
	//strictEqual(decimal.format("rawInteger", "format"), "formattedNumberExpected", "format: | value: | format ok");

	locale.setCurrent(_, 'fr-CH'); // gs="'"	ds="."

	strictEqual(decimal.format(1234.56), "1'234.56", "no format (with decimal part). format ok");
	strictEqual(decimal.format(123456), "123'456", "no format (without decimal part). format ok");
	strictEqual(decimal.format(-12345678910.11), "-12'345'678'910.11", "no format (negative + decimal part). format ok");

	strictEqual(decimal.format(0.25, "0%"), "25%", "format: 0% | value: 0.25 | format ok");
	strictEqual(decimal.format(-0.123, "0.00‰"), "-123.00‰", "format: 0.00‰| value: -0.123| format ok");

	strictEqual(decimal.format(8123.718, "0.00"), "8123.72", "format: 0.00 | value: 8123.718 | format ok");
	strictEqual(decimal.format(2.3, "0.00"), "2.30", "format: 0.00 | value: 2.3 | format ok");
	strictEqual(decimal.format(18, "0.00"), "18.00", "format: 0.00 | value: 18 | format ok");

	strictEqual(decimal.format(8123.718, "0.0#"), "8123.72", "format: 0.0# | value: 18123.718| format ok");
	strictEqual(decimal.format(2.3, "0.0#"), "2.3", "format: 0.0# | value: 2.3 | format ok");
	strictEqual(decimal.format(18, "0.0#"), "18.0", "format: 0.0# | value: 18 | format ok");

	strictEqual(decimal.format(8123.718, "0.##"), "8123.72", "format: 0.## | value: 18123.718| format ok");
	strictEqual(decimal.format(2.3, "0.##"), "2.3", "format: 0.## | value: 2.3 | format ok");
	strictEqual(decimal.format(18, "0.##"), "18", "format: 0.## | value: 18 | format ok");

	strictEqual(decimal.format(8123.718, "#,##0.00"), "8'123.72", "format: #,##0.00 | value: 18123.718| format ok");
	strictEqual(decimal.format(2.3, "#,##0.00"), "2.30", "format: #,##0.00 | value: 2.3 | format ok");
	strictEqual(decimal.format(18, "#,##0.00"), "18.00", "format: #,##0.00 | value: 18 | format ok");

	// decimal number and non decimal format
	strictEqual(decimal.format(1234.56, "#,##0"), "1'235", "format: #,##0 | value: 1234.56 | format ok");

	// integer number and decimal format
	strictEqual(decimal.format(1234, "#,##0.##"), "1'234", "format: #,##0.## | value: 1234 | format ok");
	strictEqual(decimal.format(1234, "#,##0.00"), "1'234.00", "format: #,##0.00 | value: 1234 | format ok");

	// sign format
	strictEqual(decimal.format(1234.56, "+#,##0"), "+1'235", "format: +#,##0 | value: 1234.56 | format ok");
	strictEqual(decimal.format(-1234.56, "+#,##0"), "-1'235", "format: +#,##0 | value: 1234.56 | format ok");

	// list formats
	strictEqual(decimal.format(123.4, "+0.00;(0.00);'zero'"), "+123.40", "format: 0.00;(0.00);'zero'| value: 123.4 | format ok");
	strictEqual(decimal.format(-123.4, "0.00;(0.00);'zero'"), "(123.40)", "format: 0.00;(0.00);'zero'| value: -123.4 | format ok");
	strictEqual(decimal.format(0, "0.00;(0.00);'zero'"), "zero", "format: 0.00;(0.00);'zero'| value: 0 | format ok");

	// '#' only
	strictEqual(decimal.format(1234.56, "+#,###.##"), "+1'234.56", "format: +#,###.## | value: 1234.56 | format ok");
	strictEqual(decimal.format(-234.56, "+#,###.#"), "-234.6", "format: +#,###.# | value: 234.56 | format ok");
	strictEqual(decimal.format(1234.5, "#,###.##"), "1'234.5", "format: #,###.# | value: 1234.5 | format ok");
	strictEqual(decimal.format(0.5, "#,###.##"), ".5", "format: #,###.# | value: 0.5 | format ok");

	// padding
	strictEqual(decimal.format(12.5, "000.00"), "012.50", "format: 000.00 | value: 12.5 | format ok");

	// with literals ... 
	strictEqual(decimal.format(12.3, "'''test'' :' 0.00 'test'"), "'test' : 12.30 test", "format: '''test'' :' 0.00 'test' | value: 12.3 | parse ok");

	// $raw
	/*
	strictEqual(decimal.format(0.5, "$raw"), "0.5", "format: $raw | value: 0.5 | format ok");
	strictEqual(decimal.format(501, "$raw"), "501", "format: $raw | value: 501 | format ok");
	strictEqual(decimal.format(0.08418105, "$raw"), "0.08418105", "format: $raw | value: 0.08418105 | format ok");
	strictEqual(decimal.format(418105, "$raw"), "418105", "format: $raw | value: 418105 | format ok");
	*/
	start();
});