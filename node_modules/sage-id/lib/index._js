"use strict";
/// !doc
/// ## Sage ID SSO core API
///
/// `var sageid = require("sage-id");
///
var helpers = require('syracuse-core/lib/helpers');
var tracer = helpers.debug.tracer("session.trace");
var jsxml = require('jsxml');
var QUnit = require('../test/qunit/qunit.js');
var notificationList = {};

tracer = tracer || console.log;

/// * `sageid.create(options)
/// Create the authentication module with respected options
exports.create = function(options) {
	return new function() {
		/// Run setOptions(options) function to setup post data
		setOptions(options);

		/// * `Please reference the following URL for sample request/response web help
		/// https://services.sso.staging.services.sage.com/sso/webssoservice/web/help


		var self = this;

		/// * `authenticate(request, response, session, _)
		/// Initial authentication module that will redirect to Sage ID Sign In page
		/// Returns false as user has not yet been autheticated through Sage ID
		var signOnStart = function(request, response, session, _) {
			/// * `Setup post data for StartSignOnAttempt request to Sage ID
			/// See web help for StartSignOnAttemptRequest
			/// https://services.sso.staging.services.sage.com/sso/webssoservice/web/help/operations/WebStartSignOnAttempt
			var opt = options.signOn;
			var postData = "<StartSignOnAttemptRequest>" + //
				"<SuccessUri xmlns=\"http://sso.sage.com\">" + opt.SuccessUri + "</SuccessUri>" + //
				"<FailureUri xmlns=\"http://sso.sage.com\">" + opt.FailureUri + "</FailureUri>" + //
				"<CancelAllowed xmlns=\"http://sso.sage.com\">" + opt.CancelAllowed + "</CancelAllowed>" + //
				"<State xmlns=\"http://sso.sage.com\">" + opt.State + "</State>" + //
				"<SessionLengthMinutes xmlns=\"http://sso.sage.com\">" + opt.SessionLengthMinutes + "</SessionLengthMinutes>" + //
				"</StartSignOnAttemptRequest>";

			// Initialize start sign on options
			var json = client(_, options, 'StartSignOnAttempt', postData);

			// Parse out signOnAttemptId and redirectURI for later use
			var signOnAttemptId = json.StartSignOnAttemptResponse.SignOnAttemptId.$value;
			var redirectUri = json.StartSignOnAttemptResponse.RedirectUri.$value;

			// Store response in session for future use.
			session.StartSignOnAttemptResponse = json.StartSignOnAttemptResponse;

			// Redirect web page to redirectURI from Sage ID response
			response.writeHead(307, {
				"Content-Type": "text/html",
				"Location": redirectUri,
			});
			response.end('<html>Use <a href="' + redirectUri + '">Login</a> if redirect does not work automatically</html>');

			// Return false since user has not been authenticated into Sage ID
			return false;
		};

		/// * `signOnSuccess(request, response, session, _)
		/// Closes authentication attempt for Sage ID sign in
		/// Returns JSON data containing email, sessionId, accessToken and identityId from Sage ID
		var signOnSuccess = function(request, response, session, _) {
			var match = request.url.substring(options.prefix.length).split(/[\/\?]/);
			// resultId is necessary for completing sign on attempt
			var resultId = match[1];
			// Check presence of session and SignOnAttemptId in session.
			if (!session) throw new Error("no session");
			if (!session.StartSignOnAttemptResponse || !session.StartSignOnAttemptResponse.SignOnAttemptId) throw new Error("invalid SSO info");

			/// * `Setup post data for EndSignOnAttemptRequest request to Sage ID
			/// See web help for EndSignOnAttemptRequest
			/// https://services.sso.staging.services.sage.com/sso/webssoservice/web/help/operations/WebEndSignOnAttempt
			var postData = "<EndSignOnAttemptRequest>" + //
				"<ResultId xmlns=\"http://sso.sage.com\">" + resultId + "</ResultId>" + //
				"</EndSignOnAttemptRequest>";

			// Initialize end sign on options
			var json = client(_, options, 'EndSignOnAttempt', postData);

			// Parse out email, displayName, identityId, and accessToken
			var email = json.EndSignOnAttemptResponse.SuccessResult.EmailAddress;
			var displayName = json.EndSignOnAttemptResponse.SuccessResult.DisplayName;
			var identityId = json.EndSignOnAttemptResponse.SuccessResult.IdentityId;
			var accessToken = json.EndSignOnAttemptResponse.SuccessResult.UserAuthenticationToken;
			var sessionId = json.EndSignOnAttemptResponse.SuccessResult.SessionId;

			// Store response in session, for future use
			session.EndSignOnAttemptResponse = json.EndSignOnAttemptResponse.SuccessResult;

			// Create json containing email and unique identityId
			return {
				email: email,
				identityId: identityId,
				accessToken: accessToken,
				auth: true,
				sessionId: sessionId
			};
		};

		/// * `signup(request, response, session, _)
		/// Initial register module that will redirect to Sage ID Sign Up page
		/// Returns false as user has not yet been registered with Sage ID
		var registerStart = function(request, response, session, _) {
			/// * `Setup post data for StartSignOnAttempt request to Sage ID
			/// See web help for StartSignOnAttemptRequest
			/// https://services.sso.staging.services.sage.com/sso/webssoservice/web/help/operations/WebStartSignOnAttempt
			var opt = options.register;
			var postData = "<StartNewUserRegistrationAttemptRequest>" + //
				"<SuccessUri xmlns=\"http://sso.sage.com\">" + opt.SuccessUri + "</SuccessUri>" + //
				"<FailureUri xmlns=\"http://sso.sage.com\">" + opt.FailureUri + "</FailureUri>" + //
				"<CancelAllowed xmlns=\"http://sso.sage.com\">" + opt.CancelAllowed + "</CancelAllowed>" + //
				"<State xmlns=\"http://sso.sage.com\">" + opt.State + "</State>" + "<SessionLengthMinutes xmlns=\"http://sso.sage.com\">" + opt.SessionLengthMinutes + "</SessionLengthMinutes>" + //
				"<SignOnAfterSuccess xmlns=\"http://sso.sage.com\">" + opt.SignOnAfterSuccess + "</SignOnAfterSuccess>" + //
				"<ActivateAfterSuccess xmlns=\"http://sso.sage.com\">" + opt.ActivateAfterSuccess + "</ActivateAfterSuccess>" + //
				"</StartNewUserRegistrationAttemptRequest>";

			// Initialize start sign on options
			var json = client(_, options, 'StartNewUserRegistrationAttempt', postData);

			// Parse out RegistrationAttemptId and redirectURI for later use
			var regAttemptId = json.StartRegistrationAttemptResponse.RegistrationAttemptId.$value;
			var redirectUri = json.StartRegistrationAttemptResponse.RedirectUri.$value;

			// Store response in session for future use.
			session.StartRegistrationAttemptResponse = json.StartRegistrationAttemptResponse;
			// Redirect web page to redirectURI from Sage ID response
			response.writeHead(307, {
				"Content-Type": "text/html",
				"Location": redirectUri,
			});
			response.end('<html>Use <a href="' + redirectUri + '">Login</a> if redirect does not work automatically</html>');

			// Return false since user has not been authenticated into Sage ID
			return false;
		};

		/// * `registerSuccess(request, response, session, _)
		/// Closes sign up attempt for Sage ID
		/// Returns JSON data containing email, sessionId, accessToken and identityId from Sage ID
		var registerSuccess = function(request, response, session, _) {
			var match = request.url.substring(options.prefix.length).split('/');
			// resultId is necessary for completing sign on attempt
			var resultId = match[1];
			// Check presence of session and SignOnAttemptId in session.
			if (!session) throw new Error("no session");
			if (!session.StartRegistrationAttemptResponse || !session.StartRegistrationAttemptResponse.RegistrationAttemptId) throw new Error("invalid SSO info");

			/// * `Setup post data for EndRegistrationAttemptRequest request to Sage ID
			/// See web help for EndRegistrationAttemptRequest
			/// https://services.sso.staging.services.sage.com/sso/webssoservice/web/help/operations/WebEndNewUserRegistrationAttempt
			var postData = "<EndRegistrationAttemptRequest>" + //
				"<ResultId xmlns=\"http://sso.sage.com\">" + resultId + "</ResultId>" + //
				"</EndRegistrationAttemptRequest>";

			// Initialize end sign up options
			var json = client(_, options, 'EndNewUserRegistrationAttempt', postData);

			// Parse out email, displayName, identityId, and accessToken
			var email = json.EndRegistrationAttemptResponse.RegistrationSuccessResult.SuccessResult.EmailAddress;
			var displayName = json.EndRegistrationAttemptResponse.RegistrationSuccessResult.SuccessResult.DisplayName;
			var identityId = json.EndRegistrationAttemptResponse.RegistrationSuccessResult.SuccessResult.IdentityId;
			var accessToken = json.EndRegistrationAttemptResponse.RegistrationSuccessResult.SuccessResult.UserAuthenticationToken;
			var sessionId = json.EndRegistrationAttemptResponse.RegistrationSuccessResult.SuccessResult.SessionId;

			// Store response in session, for future use
			session.EndRegistrationAttemptResponse = json.EndRegistrationAttemptResponse.RegistrationSuccessResult;

			// Create json containing email and unique identityId
			return {
				email: email,
				identityId: identityId,
				accessToken: accessToken,
				auth: true,
				sessionId: sessionId
			};
		};

		/// * `logout(request, response, session, _)
		/// Logout module that will remove session
		/// Returns false as user has been removed from session and must re-authenticate
		this.logout = function(request, response, session, _) {
			/// * `Setup post data for WebSessionSignOff request to Sage ID
			/// See web help for WebSessionSignOff
			/// https://services.sso.staging.services.sage.com/sso/webssoservice/web/help/operations/WebSessionSignOff

			// Extract sessionId from session
			var sessionId = "";
			if (session.EndSignOnAttemptResponse)
				sessionId = session.EndSignOnAttemptResponse.SessionId;
			else if (session.EndRegistrationAttemptResponse)
				sessionId = session.EndRegistrationAttemptResponse.SuccessResult.SessionId;
			else throw new Error("Cannot find session ID");

			var postData = "<SessionSignOffRequest>" + //
				"<SessionId xmlns=\"http://sso.sage.com\">" + sessionId + "</SessionId>" + //
				"</SessionSignOffRequest>";

			// Initialize sign out options
			var json = client(_, options, 'SessionSignOff', postData);

			// Parse out signOffAttempt, either true or false
			var signOffAttempt = json.SessionSignOffResponse.Success.$value;

			if (!signOffAttempt) {
				throw new Error("Sage ID Sign Out failed!");
			}
			return signOffAttempt;
		};

		/// * `sessionHandle(request, response, session, _)
		/// Determine which method should be used to hanlde current Sage ID session
		var sessionHandle = function(request, response, session, _) {
			// Read request body and decode from Base64 format
			// Data is decoded to XML
			var reqBody = request.readAll(_);
			var buf = new Buffer(reqBody, 'base64');
			var xml = buf.toString();
			// Parse xml data in readable JSON
			var reqJSON = jsxml.parse(xml);

			// Extract notification ID from parsed JSON
			var notifyId = reqJSON.Notification.NotificationId;
			// Extract notification from list
			var notification = notificationList[notifyId];
			// If notification does not exist handle the notification
			// Else disregard notification and remove ID from notification list
			var authData = {
				sessionNotify: false,
				auth: false
			};
			if (!notification) {
				notificationList[notifyId] = true;
				// Extract notification type from JSON
				// Either ExpiryDue or Ended
				var notificationType = reqJSON.Notification.Type.split('.')[1];
				// Extract parameters where sessionId, expirationTimestamp, and emailAddress are located
				var parameters = reqJSON.Notification.Parameters.Parameter;
				// Extract sessionId from JSON
				var sessionId = parameters[0].Value;
				// Extract expireTime, time and date session will expire
				var expireTime = parameters[2].Value;
				var expireDate = new Date(expireTime);
				if (!sessionId)
					throw new Error("Cannot find session ID");
				// Return authData with sessionId, notificationType, and expiration date of session
				authData = {
					sessionNotify: true,
					auth: false,
					sessionId: sessionId,
					notificationType: notificationType,
					expireDate: expireDate
				};
			} else {
				// Remove notification from list
				delete notificationList[notifyId];
			}
			return authData;
		};

		/// * `sessionExtend(request, response, sessionId, _)
		/// Extends Sage ID session
		/// Returns JSON data containing email and new accessToken to replace old one
		this.sessionExtend = function(request, response, session, _) {
			/// * `Setup post data for WebSessionExtend request to Sage ID
			/// See web help for WebSessionExtend
			/// https://services.sso.staging.services.sage.com/sso/webssoservice/web/help/operations/WebSessionExtend

			// Extract last activity date and time from session
			var lastActivity = session.lastAccess;

			// New expiration date is current time plus 30 mins, based on Syracuse timeout
			var newExpirationDate = new Date(new Date(lastActivity).getTime() + 1800000);
			// Extract sessionId from session
			var sessionId = "";
			if (session.EndSignOnAttemptResponse)
				sessionId = session.EndSignOnAttemptResponse.SessionId;
			else
				sessionId = session.EndRegistrationAttemptResponse.SessionId;

			var postData = "<SessionExtendRequest>" + //
				"<SessionId xmlns=\"http://sso.sage.com\">" + sessionId + "</SessionId>" + //
				"<SessionExpiry xmlns=\"http://sso.sage.com\">" + newExpirationDate.toISOString() + "</SessionExpiry>" + //
				"</SessionExtendRequest>";

			// Initialize extend options
			var json = client(_, options, 'SessionExtend', postData);

			// Parse out new accessToken
			var accessToken = json.SessionExtendResponse.UserAuthenticationToken.$value;
			var email = "";
			// Overwrite token in session with new one
			if (session.EndSignOnAttemptResponse) {
				session.EndSignOnAttemptResponse.UserAuthenticationToken = accessToken;
				email = session.EndSignOnAttemptResponse.EmailAddress;
			} else {
				session.EndRegistrationAttemptResponse.UserAuthenticationToken = accessToken;
				email = session.EndRegistrationAttemptResponse.EmailAddress;
			}
			// Remove session expiration mark
			session.expireDue = false;
			// Return authData, auth is false as no authentication is required
			return {
				auth: true,
				accessToken: accessToken,
				email: email
			};
		};

		/// * `sessionEnd(request, response, sessionId, _)
		/// Session has ended
		/// Return sessionEnd true to have application handle session
		var sessionEnd = function(request, response, session, _) {
			var authData = {
				auth: false,
				sessionEnded: true
			};
			return authData;
		};

		// URL routes
		// Start URLs cause a redirect and return false.
		// The other URLs return an authData object.
		// The auth property of the authData object indicates if user is still authenticated
		var routes = {
			// Redirect to begin Sage ID Sign In
			signOnStart: signOnStart,
			// Redirect for successful Sage ID Sign In
			signOnSuccess: signOnSuccess,
			// Redirect to begin Sage ID Sign Up
			registerStart: registerStart,
			// Redirect for successful Sage ID Sign Up
			registerSuccess: registerSuccess,
			// Redirect for session handling of Sage ID
			notify: sessionHandle
		};

		/// * `dispatch(request, response, session, _)
		/// Dispatcher module that will redirect to correct method based on URL
		/// Returns respected method
		this.dispatch = function(request, response, session, _) {
			tracer && tracer("Sage ID: begin dispatch url=" + request.url);
			var seg = request.url.substring(options.prefix.length).split(/[\/\?]/)[0];
			var route = routes[seg];
			if (!route)
				throw new Error("bad url: " + request.url);
			var result = route(request, response, session, _);
			tracer && tracer("Sage ID: end dispatch result=" + result);			
			return result;
		};
	};
};

/// * `setOptions(options)
/// Setup all postData variables
/// If variable was not passed, it gets defaulted
function setOptions(options) {
	// Setup SageID base URL
	options.sageIdBase = options.sageIdBase || "https://services.sso.staging.services.sage.com/SSO";

	// Setup SageID prefix
	options.prefix = options.prefix || "/sage-id/";

	// Setup start sign on variables signOn
	var opt;
	opt = (options.signOn = options.signOn || {});
	opt.SuccessUri = opt.SuccessUri || (options.CallbackBase + "signOnSuccess/{0}");
	opt.FailureUri = opt.FailureUri || options.FailureUri;
	opt.CancelAllowed = opt.CancelAllowed || options.CancelAllowed || false;
	opt.State = opt.State || options.State || "test";
	opt.SessionLengthMinutes = opt.SessionLengthMinutes || options.SessionLengthMinutes || 60;

	// Setup start sign up variables register
	opt = (options.register = options.register || {});
	opt.SuccessUri = opt.SuccessUri ||  (options.CallbackBase + "registerSuccess/{0}");
	opt.FailureUri = opt.FailureUri || options.FailureUri;
	opt.CancelAllowed = opt.CancelAllowed || options.CancelAllowed || false;
	opt.State = opt.State || options.State || "test";
	opt.SessionLengthMinutes = opt.SessionLengthMinutes || options.SessionLengthMinutes || 60;
	opt.SignOnAfterSuccess = opt.SignOnAfterSuccess || options.SignOnAfterSuccess || false;
	opt.ActivateAfterSuccess = opt.ActivateAfterSuccess || options.ActivateAfterSuccess || false;
}

function client(_, options, action, postData) {

	var clientOptions = {
		method: "POST",
		url: options.sageIdBase + "/WebSSOService/web/Web" + action,
		pfx: options.pfx_object,
		passphrase: options.pass,
		headers: {
			'Content-Type': 'text/xml',
			'Content-Length': Buffer.byteLength(postData)
		}
	};
	tracer && tracer("Sage ID: begin call url=" + clientOptions.url)

	// Check which request type is being used
	// Either ez-stream http client or syracuse based http client
	var httpClient = options.httpClient || require("ez-streams").devices.http.client;

	// Initialize request out to Sage ID
	var req = options.httpClient ? httpClient(_, clientOptions) : httpClient(clientOptions);

	// Write post data to request
	req.end(new Buffer(postData));
	var resp = req.response(_);
	tracer && tracer("Sage ID: end call status=" + resp.statusCode);

	// Check to ensure response comes back OK
	if (resp.statusCode !== 200) throw new Error("bad response from " + action + ": " + resp.statusCode);

	// Read all data from Sage ID response
	var body = resp.readAll(_);

	// Convert xml response to JSON
	var json = {};
	try {
		json = jsxml.parse(body);
	} catch (ex) {}

	return json;
}
