'use strict';

var fs = require('streamline-fs');
var fsp = require('path');
var helpers = require('../helpers');
var health = require('syracuse-health/lib/check');

module.exports = {
	$titleTemplate: 'Site {customer} {site}',
	$helpPage: 'SKY-reference-site',
	$createActionTitle: 'New site',
	$listTitle: 'List of Sites',
	$properties: {
		site: {
			$title: 'Site',
			$isMandatory: true,
			$linksToDetails: true,
		},
		shortName: {
			$title: 'Short Name',
			$isMandatory: true,
		},
		isDefault: {
			$title: 'Default site',
			$type: 'boolean',
			$default: false,
		},
		status: {
			$title: 'Status',
			//			$isReadOnly: true,
			$default: 'created',
		},
		uri: {
			$title: 'Site URI',
			$isReadOnly: true,
		},
		ipX3: {
			$title: 'IP of X3 instance',
			$isReadOnly: true,
		},
		ipORA: {
			$title: 'IP of Oracle instance',
			$isReadOnly: true,
		},
		isTest: {
			$title: 'Test site',
			$type: 'boolean',
			$default: false,
			$isHidden: true,
		},
	},
	$relations: {
		customer: {
			$title: 'Customer',
			$type: 'customer',
			$inv: 'sites',
			$isMandatory: true,
		},
		subscriptions: {
			$title: 'Subscriptions',
			$type: 'subscriptions',
			$inv: 'site',
			$isComputed: true
		},
	},
	$searchIndex: {
		$fields: ['site']
	},
	$uniqueConstraints: [
		['customer', 'site']
	],
	$functions: {},
	$services: {
		provision: {
			$title: 'Provision',
			$method: 'POST',
			$invocationMode: 'async',
			$capabilities: 'abort',
			$isMethod: true,
			$execute: function(_, context, instance) {
				var service = 'provision';
				setStatus(_, context, instance, service);
			},
		},
		activate: {
			$title: 'Activate',
			$method: 'POST',
			$invocationMode: 'async',
			$capabilities: 'abort',
			$isMethod: true,
			$execute: function(_, context, instance) {
				var service = 'activate';
				setStatus(_, context, instance, service);
			}
		},
		suspend: {
			$title: 'Suspend',
			$method: 'POST',
			$invocationMode: 'async',
			$capabilities: 'abort',
			$isMethod: true,
			$execute: function(_, context, instance) {
				var service = 'suspend';
				setStatus(_, context, instance, service);
			}
		},
		shelve: {
			$title: 'Shelve',
			$method: 'POST',
			$invocationMode: 'async',
			$capabilities: 'abort',
			$isMethod: true,
			$execute: function(_, context, instance) {
				var service = 'shelve';
				setStatus(_, context, instance, service);
			}
		},
		restore: {
			$title: 'Restore',
			$method: 'POST',
			$invocationMode: 'async',
			$capabilities: 'abort',
			$isMethod: true,
			$execute: function(_, context, instance) {
				var service = 'restore';
				setStatus(_, context, instance, service);
			}
		},
		'delete': {
			$title: 'Delete',
			$method: 'POST',
			$invocationMode: 'async',
			$capabilities: 'abort',
			$isMethod: true,
			$execute: function(_, context, instance) {
				var service = 'delete';
				setStatus(_, context, instance, service);
			}
		},
		siteHealth: {
			$title: 'Check site health',
			$method: 'GET',
			$isMethod: true,
			$isHidden: true,
			$execute: function(_, context, instance) {
				return health.getSiteHealth(_, context, instance);
			},
		},
		health: {
			$title: 'Health all sites',
			$method: 'GET',
			$isHidden: true,
			$execute: function(_, context) {
				return health.getHealth(_, context);
			},
		},
		siteX3Usage: {
			$title: 'Check site usage metrics',
			$method: 'GET',
			$isMethod: true,
			$isHidden: true,
			$execute: function(_, context, instance) {
				return health.getSiteUsage(_, context, instance, 'x3');
			},
		},
		x3Usage: {
			$title: 'Usage Metrics all sites',
			$method: 'GET',
			$isHidden: true,
			$execute: function(_, context) {
				return health.getUsage(_, context, 'x3');
			},
		},
		siteDbUsage: {
			$title: 'Check site usage metrics',
			$method: 'GET',
			$isMethod: true,
			$isHidden: true,
			$execute: function(_, context, instance) {
				return health.getSiteUsage(_, context, instance, 'db');
			},
		},
		dbUsage: {
			$title: 'Usage Metrics all sites',
			$method: 'GET',
			$isHidden: true,
			$execute: function(_, context) {
				return health.getUsage(_, context, 'db');
			},
		},
	},
};

function codify(str) {
	return str.replace(/[^\w]/gi, '').toLowerCase();
}

function setStatus(_, context, instance, service) {
	helpers.tracker = context.tracker;
	helpers.log('I-phase: Service process started:', service);
	var site = codify(instance.site(_));
	var customer = codify(instance.customer(_).customer(_));

	/**
	 * provision: changes the status from created to provisioned.
	 * activate: changes the status from provisioned, hibernating or suspended to active.
	 * suspend: changes the status from active, hibernating or provisioned to suspended.
	 * shelve: changes the status from suspended to shelved.
	 * restore: changes the status from shelved to suspended.
	 * delete: changes the status from suspended, shelved, created, provisioned to deleted.
	 */
	var statusMap = {
		'provision': {
			curr: ['created'],
			next: 'provisioned',
			params: {
				customer: customer,
				site: site,
				stack: instance.shortName(_),
			},
		},
		'activate': {
			curr: ['provisioned', 'hibernating', 'suspended'],
			next: 'active',
			params: instance.status(_) === 'provisioned' ? null : {
				stack: instance.shortName(_)
			},
			postOp: require('../services/activate'),
		},
		'suspend': {
			curr: ['active', 'hibernating', 'provisioned'],
			next: 'suspended',
			params: {
				stack: instance.shortName(_),
			},
		},
		'shelve': {
			curr: ['suspended'],
			next: 'shelved',
			params: {
				stack: instance.shortName(_),
			},
			postOp: require('../services/delete'),
		},
		'restore': {
			curr: ['shelved'],
			next: 'suspended',
			params: {
				customer: customer,
				site: site,
				stack: instance.shortName(_),
			},
		},
		'delete': {
			curr: ['suspended', 'shelved', 'created', 'provisioned'],
			next: 'deleted',
			postOp: require('../services/delete'),
		},
	};

	if (!statusMap[service] || statusMap[service].curr.indexOf(instance.status(_)) === -1)
		throw new Error('Invalid status change!');

	// call to ops for service
	if (statusMap[service].params && !instance.isTest(_)) helpers.ops(_, service, statusMap[service].params);

	if (statusMap[service].postOp) statusMap[service].postOp(_, context, instance);

	instance.status(_, statusMap[service].next);
	instance.save(_);
	helpers.log('I-phase: Service process completed:', service);
}
