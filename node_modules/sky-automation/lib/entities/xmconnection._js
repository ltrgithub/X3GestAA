'use strict';
var config = require('config');
var helpers = require('../helpers');

module.exports = {
	$titleTemplate: 'XM Connection {customer}',
	$helpPage: 'SKY-reference-xmconnection',
	$createActionTitle: 'New XM connection',
	$listTitle: 'List of XM Connections',
	$properties: {
		site: {
			$title: 'Site Name',
			$isMandatory: true,
			$linksToDetails: true,
		},		
		endpoint: {
			$title: 'Endpoint',
			$isMandatory: true,
			$linksToDetails: true,
		},
		x3WebServicePool: {
			$title: 'Web Service Pool',
			$isReadOnly: true,
			$compute: function(_, instance) {
				return getX3WebServicePool(_, instance);
			}			
		},
		x3WebServiceUrl: {
			$title: 'Web Service URL',
			$isReadOnly: true,
			$compute: function(_, instance) {
				return getX3WebServiceUrl(_, instance);
			}			
		},
		oauthUrl: {
			$title: 'OAuth retrieval URL',
		},
		sqlServer: {
			$title: 'SQL Server',
			$isReadOnly: true,
			$compute: function(_, instance) {
				return getSqlServer(_, instance);
			}
		},
		sqlPort: {
			$title: 'SQL Port',
			$isReadOnly: true,
			$compute: function(_, instance) {
				return getSqlPort(_, instance);
			}
		},		
		sqlUser: {
			$title: 'SQL User',
			$isReadOnly: true,
			$compute: function(_, instance) {
				return getSqlUser(_, instance);
			}
		},
		sqlPassword: {
			$title: 'SQL Password',
			$isReadOnly: true,
			$compute: function(_, instance) {
				return getSqlPassword(_, instance);
			}
		},
		sqlDatabase: {
			$title: 'SQL Database',
			$isReadOnly: true,
			$compute: function(_, instance) {
				return getSqlDatabase(_, instance);
			}			
		}
	},
	$searchIndex: {
		$fields: ['site','endpoint']
	},
  	$uniqueConstraints: [
		["site", "endpoint"]
	]
}

function getX3WebServicePool(_, instance) {
	return 'SYMPHONY';
}

function getX3WebServiceUrl(_, instance) {
	var site = getSite(_, instance);
	var location = getWebServiceLocation(_, site);
	return location;
}

function getSqlServer(_, instance) {
	var site = getSite(_, instance);
	return site['ipORA'];
}

function getSqlPort(_, instance) {
	return 1450;
}

function getSqlUser(_, instance) {
	return 'Symphony';
}

function getSqlPassword(_, instance) {
	return 'OhXjFLt4zKVMViOumw==';
}

function getSqlDatabase(_, instance) {
	return 'sagex3';
}

function getSite(_, instance) {
	var collabUrl = config.xmSymphony.api + instance._db.baseUrl;
	var where = encodeURIComponent("site eq '" + instance._data['site'] + "'");
	var result = helpers.client(_, collabUrl + '/sites?where=' + where);
	if (result.statusCode !== 200) return helpers.error('getSite', result);
	return result.resource0;
}

function getWebServiceLocation(_, site) {
	var collabUrl = site['uri'] + ':8443/sdata/syracuse/collaboration/syracuse';
	var where = encodeURIComponent("name eq 'CAdxWebServiceXmlCC'");
	var result = helpers.clientCert(_, collabUrl + '/soapGenerics?where=' + where);
	if (result.statusCode !== 200) return helpers.error('get getWebSvcLocation', result);
	return site['uri'] + result.resource0.stub.ports[0].location;
}
