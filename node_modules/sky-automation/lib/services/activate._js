'use strict';
var mongodb = require('streamline-mongodb');
var config = require('config');
var helpers = require('../helpers');
var ec2 = require('../aws/ec2');
var uuid = require('syracuse-core/lib/uuid');
var flows = require('streamline/lib/util/flows');


module.exports = function(_, context, instance) {
    var clientDB = instance.site(_)+"-syracuse";
    var DB_NAME = 'syracuse'
    if (instance.status(_) !== 'provisioned' || !instance.uri(_) || instance.isTest(_)) return;
    console.log(getDateTime() + "Activate Start");

    // Initializes MongoDB Instance
    var db = initializeMongoDB(config.skyAutomation.mongo.server,config.skyAutomation.mongo.port,clientDB.toLowerCase());
    db.open(_);
    console.log(getDateTime() + "Mongo Database Connection Formed");

    //Finds the X3 ERP Application document from Mongo
    var x3ErpApplication = mongoFind(_,db,"Application",{"application":"x3","contract":"erp"})[0];
    console.log(getDateTime() + "X3 ERP Application Found");

    //Queries AWS API to get computer name from the instance
    var instanceTags = ec2.getInstanceTagsFromIP(_, instance.ipX3(_));
    var instanceName = ec2.getInstanceNameFromTags(_, instanceTags);
    console.log(getDateTime() + "Instance name retrieved form AWS");

     //  Creates X3 Server
    var x3Servers = mongoFind(_,db,"system.namespaces",{name: clientDB.toLowerCase() + ".X3server"},1)
    if (typeof x3Servers === 'undefined'){
            var collection = db.createCollection("X3server", _);
    }
    var serverId = uuid.generate('-');
    var server = {
        "_id": serverId,
        "description" : {
        "en-us" : instanceName,
        "default" : instanceName
      },
      "serverHost" : instanceName,
      "serverPort" : 1807,
      "serverTimeout" : 60000,
      "webServerPort" : 80,
      "boServer" : { },
      "certificate" : { },
      "_creUser" : "admin",
      "_updUser" : "admin",
      "_tick" : null,
      "_endpoint" : null
    };

    mongoInsertRecord(_,db,"X3server",server);
    console.log(getDateTime() + "X3 Server Created");

    // Creates SEED and X3 Endpoints
    var ids = {
        application:x3ErpApplication._id,
        X3server:serverId

    }
    setupEndpoint(_,db,"SEED",ids)
    setupEndpoint(_,db,"X3",ids)
    console.log(getDateTime() + "SEED and X3 Endpoints Created");

    // Attaches Logins to Sage ID for cAdmin
    var contacts = instance.customer(_).contacts(_)._array;
    var cAdminContact = Array.isArray(contacts) && contacts.length ? contacts[0] : null;

    var sAdminContact = config.sage_id.devOpsEmail || 'SageERPX3DevOps@sage.com';

    setupUser(_,db,'Customer administrator',cAdminContact.sageEmail(_));
    setupUser(_,db,'Super administrator', sAdminContact);

    console.log(getDateTime() + "Activation Completed");
        db.close(_);
    };


function initializeMongoDB(mongoHost, mongoPort, mongoDatabase) {
  var server = new mongodb.Server(mongoHost || 'localhost', mongoPort || 27017, {});
  var db = new mongodb.Db(mongoDatabase || 'syracuse', server, {
    w: 1 // majority
  });
  return db;
}

function initializeMongoDB(mongoHost, mongoPort, mongoDatabase) {
  var server = new mongodb.Server(mongoHost || 'localhost', mongoPort || 27017, {});
  var db = new mongodb.Db(mongoDatabase || 'syracuse', server, {
    w: 1 // majority
  });
  return db;
}

//Executes a Mongo Find query but will wait unti data is populated in the array before releasing control or a timeout
function mongoFind(_, db,collection,query,timeout){
    var timeout = timeout || 300
    var counter = 0
    do{
        var doc = db.collection(collection, _).find(query, _).toArray(_);
        if (counter >=timeout) {
            var result = {
                statusCode: 500,
                body: {
                    "Collection":collection,
                    Query: query
                }
            };

            return helpers.error("Mongo Database Query", result);;
        }
        counter++;
        flows.sleep(_, 1000);
    }while (typeof doc[0] === 'undefined');
   return doc;
}

function mongoInsertRecord(_, db, collection, record) {
  db.collection(collection, _).insert(record, _);
}

function mongoUpdateRecord(_, db, collection, search, record) {
    db.collection(collection, _).update(search, record, { upsert: true }, _);
}

function setupEndpoint(_,db,endpointName,ids){
    var endPointId = uuid.generate('-');
    var endPoint = {
        "_id" : endPointId,
        "description" : {
        "en-us" : endpointName,
        "default" : endpointName
      },
      "application" : "x3",
      "contract" : "erp",
      "protocol" : "x3",
      "dataset" : endpointName,
      "localDatabase" : false,
      "databaseDriver" : "mongodb",
      "databasePort" : 27017,
      "x3ServerFolder" : endpointName,
      "x3SolutionName" : "X3V7",
      "applicationRef" : {
        "_uuid" : ids.application
      },
      "x3server" : {
        "_uuid" : ids.X3server
      },
      "menuProfileToRoles" : [],
      "roleToProfessionCodes" : [],
      "_tick" : null,
      "_endpoint" : null
    }

    mongoInsertRecord(_,db,"EndPoint",endPoint);

    var cadminGroup  = mongoFind(_,db,"Group",{"description.default":"Customer administrators"})[0]
    var groupEndpoint = {
                "_uuid" : endPointId,
                "_creUser" : "admin",
                "_updUser" : "admin"
    }
    cadminGroup.endPoints.push(groupEndpoint);
    mongoUpdateRecord(_,db,"Group",{'_id' : cadminGroup._id},cadminGroup);

    var sadminGroup  = mongoFind(_,db,"Group",{"description.default":"Super administrators"})[0];
    sadminGroup.endPoints.push(groupEndpoint);
    mongoUpdateRecord(_,db,"Group",{'_id' : sadminGroup._id},sadminGroup);
}

function setupUser(_, db,user,email){
    var user = mongoFind(_,db,"User",{"lastName" : user})[0];
    user.email = email;
    user.authentication = 'sage-id';
    mongoUpdateRecord(_, db, "User", {'_id':user._id}, user);
}

function getDateTime() {

    var date = new Date();

    var hour = date.getHours();
    hour = (hour < 10 ? "0" : "") + hour;

    var min  = date.getMinutes();
    min = (min < 10 ? "0" : "") + min;

    var sec  = date.getSeconds();
    sec = (sec < 10 ? "0" : "") + sec;

    var year = date.getFullYear();

    var month = date.getMonth() + 1;
    month = (month < 10 ? "0" : "") + month;

    var day  = date.getDate();
    day = (day < 10 ? "0" : "") + day;

    return year + ":" + month + ":" + day + ":" + hour + ":" + min + ":" + sec;

}
