'use strict';
var mongodb = require('streamline-mongodb');
var config = require('config');
var helpers = require('../helpers');
var ec2 = require('../aws/ec2');
var uuid = require('syracuse-core/lib/uuid');
var flows = require('streamline/lib/util/flows');
var repl_set = require('mongodb/node-mongodb-native/lib/mongodb/connection/repl_set/repl_set');
var nodemailer = require('ez-mailer/node_modules/nodemailer');
var smtpTransport = require('ez-mailer/node_modules/nodemailer/node_modules/nodemailer-smtp-transport');

module.exports = function(_, context, instance) {
    var clientDB = instance.site(_)+"-syracuse";
    var DB_NAME = 'syracuse'
    if (instance.status(_) !== 'provisioned' || !instance.uri(_) || instance.isTest(_)) return;
    console.log(getDateTime() + "Activate Start");

    // Initializes MongoDB Instance
    var db = initializeMongoDB(config.skyAutomation.mongo.server,config.skyAutomation.mongo.port,clientDB.toLowerCase());
    db.open(_);
    console.log(getDateTime() + "Mongo Database Connection Formed");

    //Finds the X3 ERP Application document from Mongo
    var x3ErpApplication = mongoFind(_,db,"Application",{"application":"x3","contract":"erp"})[0];
    console.log(getDateTime() + "X3 ERP Application Found");

    //Queries AWS API to get computer name from the instance
    var instanceTags = ec2.getInstanceTagsFromIP(_, instance.ipX3(_));
    var instanceName = ec2.getInstanceNameFromTags(_, instanceTags);
    console.log(getDateTime() + "Instance name retrieved form AWS");


    var solutionId = uuid.generate('-');
    var applicationId = x3ErpApplication._id;

    //Create X3 Solution
    setupSolution(_,db,solutionId,applicationId,instanceName);
    console.log(getDateTime() + "X3 Solution Created");

    // Creates SEED and X3 Endpoints
    setupEndpoint(_,db,"SEED",applicationId,solutionId);
    setupEndpoint(_,db,"X3",applicationId,solutionId);
    console.log(getDateTime() + "SEED and X3 Endpoints Created");

    // Attaches Logins to Sage ID for cAdmin
    var contacts = instance.customer(_).contacts(_)._array;
    var cAdminContact = Array.isArray(contacts) && contacts.length ? contacts[0] : null;

    var sAdminContact = config.sage_id.devOpsEmail || 'SageERPX3DevOps@sage.com';

    setupUser(_,db,'Customer administrator',cAdminContact.sageEmail(_));
    setupUser(_,db,'Super administrator', sAdminContact);

    console.log(getDateTime() + "Activation Completed");
    db.close(_);

    if (instance.opa(_) && config.opa && config.opa.emailSettings) {
      console.log(getDateTime() + " Send email to DevOps");
      notifyDevOps(_, instance);
    }
};


function initializeMongoDB(mongoHost, mongoPort, mongoDatabase) {
  var hostArray = mongoHost.split(",")
  if (hostArray.length > 1) {
    var servers = [];
    for (var i = 0; i < hostArray.length; i++) {
      servers[i] = new mongodb.Server(hostArray[i] || 'localhost', mongoPort || 27017, {});
    }
    var replSet = repl_set.ReplSet(servers,{});
    var db = new mongodb.Db(mongoDatabase || 'syracuse', replSet, {
      w: 1 // majority
    });
  } else {
    var server = new mongodb.Server(mongoHost || 'localhost', mongoPort || 27017, {});
    var db = new mongodb.Db(mongoDatabase || 'syracuse', server, {
      w: 1 // majority
    });
  }
  return db;
}

//Executes a Mongo Find query but will wait unti data is populated in the array before releasing control or a timeout
function mongoFind(_, db,collection,query,timeout){
    var timeout = timeout || 300
    var counter = 0
    do{
        var doc = db.collection(collection, _).find(query, _).toArray(_);
        if (counter >=timeout) {
            var result = {
                statusCode: 500,
                body: {
                    "Collection":collection,
                    Query: query
                }
            };

            return helpers.error("Mongo Database Query", result);
        }
        counter++;
        flows.sleep(_, 1000);
    }while (typeof doc[0] === 'undefined');
   return doc;
}

function mongoInsertRecord(_, db, collection, record) {
  db.collection(collection, _).insert(record, _);
}

function mongoUpdateRecord(_, db, collection, search, record) {
    db.collection(collection, _).update(search, record, { upsert: true }, _);
}

function setupSolution(_,db,solutionId,applicationId,instanceName){
    var solution = {
      "_id" : solutionId,
      "description" : {
        "en-us" : instanceName,
        "default" : instanceName
      },
      "serverHost" : instanceName,
      "serverPort" : 1807,
      "serverTimeout" : 60000,
      "webServerPort" : 80,
      "boServer" : {
        
      },
      "certificate" : {
        
      },
      "_creUser" : "admin",
      "_updUser" : "admin",
      "_tick" : null,
      "_endpoint" : null,
      "code" : "X3CLOUD - " + instanceName,
      "solutionName" : "X3CLOUD",
      "proxy" : false,
      "application" : {
        "_uuid" : applicationId
      },
      "runtimes" : [
            {
              "serverHost" : instanceName,
              "serverPort" : 1807,
              "tag" : "MAIN",
              "exclusive" : false,
              "banTimeout" : 60,
              "banned" : false,
              "errorTry" : 0,
              "autoConfig" : true,
              "disabled" : false,
              "_uuid" : uuid.generate('-'),
              "_creUser" : "admin",
              "_updUser" : "admin"
            }
      ]
    }

    mongoInsertRecord(_,db,"X3solution",solution);
}


function setupEndpoint(_,db,endpointName,applicationId,solutionId){
    var endPointId = uuid.generate('-');
    var endPoint = {
      "_id" : endPointId,
      "description" : {
        "en-us" : endpointName,
        "default" : endpointName
      },
      "application" : "x3",
      "contract" : "erp",
      "protocol" : "x3",
      "dataset" : endpointName,
      "localDatabase" : false,
      "databaseDriver" : "mongodb",
      "databasePort" : 27017,
      "x3ServerFolder" : endpointName,
      "x3SolutionName" : "X3CLOUD",
      "applicationRef" : {
        "_uuid" : applicationId
      },
      "menuProfileToRoles" : [],
      "roleToProfessionCodes" : [],
      "_tick" : null,
      "_endpoint" : null,
      "x3Historic" : false,
      "x3solution" : {
        "_uuid" : solutionId
      }
    }

    mongoInsertRecord(_,db,"EndPoint",endPoint);

    var cadminGroup  = mongoFind(_,db,"Group",{"description.default":"Customer administrators"})[0]
    var groupEndpoint = {
                "_uuid" : endPointId,
                "_creUser" : "admin",
                "_updUser" : "admin"
    }
    cadminGroup.endPoints.push(groupEndpoint);
    mongoUpdateRecord(_,db,"Group",{'_id' : cadminGroup._id},cadminGroup);

    var sadminGroup  = mongoFind(_,db,"Group",{"description.default":"Super administrators"})[0];
    sadminGroup.endPoints.push(groupEndpoint);
    mongoUpdateRecord(_,db,"Group",{'_id' : sadminGroup._id},sadminGroup);
}

function setupUser(_, db,user,email){
    var user = mongoFind(_,db,"User",{"lastName" : user})[0];
    user.email = email;
    user.authentication = 'sage-id';
    mongoUpdateRecord(_, db, "User", {'_id':user._id}, user);
}

function getDateTime() {

    var date = new Date();

    var hour = date.getHours();
    hour = (hour < 10 ? "0" : "") + hour;

    var min  = date.getMinutes();
    min = (min < 10 ? "0" : "") + min;

    var sec  = date.getSeconds();
    sec = (sec < 10 ? "0" : "") + sec;

    var year = date.getFullYear();

    var month = date.getMonth() + 1;
    month = (month < 10 ? "0" : "") + month;

    var day  = date.getDate();
    day = (day < 10 ? "0" : "") + day;

    return year + ":" + month + ":" + day + ":" + hour + ":" + min + ":" + sec;

}

function notifyDevOps(_, instance) {
  var emailConfig = (config.opa && config.opa.emailSettings) ? config.opa.emailSettings : {};
  var transport = nodemailer.createTransport(smtpTransport({
      host: emailConfig.host,
      port: emailConfig.port,
  }));

  var emailSubject = emailConfig.text.subject + instance.site(_);
  var emailHtml = emailConfig.text.html;
  emailHtml = emailHtml.replace("+//+replacesite+//+", instance.site(_));
  emailHtml = emailHtml.replace("+//+replaceurl+//+", instance.uri(_));
  // setup e-mail data from config file
  var mailOptions = {
      from: emailConfig.text.from,
      to: emailConfig.text.to,
      subject: emailSubject,
      html: emailHtml
  };

  // send mail with defined transport object
  var info = transport.sendMail(mailOptions, ~_);
  var response = info.response;
  if (response.indexOf('OK') === -1)
    return helpers.error("Error occurred while submitting email: ", response);
  console.log(getDateTime() + " Send email to DevOps complete");
}