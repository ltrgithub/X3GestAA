'use strict';

var config = require('config');
var helpers = require('../helpers');
var ec2 = require('../aws/ec2');

module.exports = function(_, context, instance) {
	if (instance.status(_) !== 'provisioned' || !instance.uri(_) || instance.isTest(_)) return;

	var collabUrl = instance.uri(_) + '/sdata/syracuse/collaboration/syracuse/';

	// get the list of applications
	var result = helpers.client(_, collabUrl + 'applications');
	if (result.statusCode !== 200) return helpers.error('get applications', result);
	var application = result.body.$resources ? result.body.$resources.filter(function(res) {
		return res.application === 'x3' && res.contract === 'erp';
	})[0] : {};

	// Prepare array of groupIds to be attached to SEED endpoint
	var groupIds = [];
	result = helpers.client(_, collabUrl + 'groups');
	if (result.statusCode !== 200) return helpers.error('get groups', result);
	// Get super administrators group
	var sadmingroup = result.body.$resources ? result.body.$resources.filter(function(res) {
		return res.description === 'Super administrators';
	})[0] : {};
	var sagroup = {
		'$uuid': sadmingroup.$key
	};
	groupIds.push(sagroup);
	// Get customer administrators group
	var cadmingroup = result.body.$resources ? result.body.$resources.filter(function(res) {
		return res.description === 'Customer administrators';
	})[0] : {};
	var cagroup = {
		'$uuid': cadmingroup.$key
	};
	groupIds.push(cagroup);

	// create X3Servers and endpoints
	// Change description and host to server name
	var instanceTags = ec2.getInstanceTagsFromIP(_, instance.ipX3(_));
	var instanceName = ec2.getInstanceNameFromTags(_, instanceTags);
	var x3server = {
		description: instanceName,
		serverHost: instanceName,
		serverPort: 1807
	};
	
	result = helpers.client(_, collabUrl + 'x3servers', x3server);
	if (result.statusCode !== 201) return helpers.error('init x3servers', result);
	x3server = result.body;

	var epSeed = {
		'description': 'SEED',
		'x3server': {
			'$uuid': x3server.$uuid
		},
		'x3ServerFolder': 'SEED',
		'x3SolutionName': 'X3V7',
		'application': 'x3',
		'applicationRef': {
			'$uuid': application.$uuid
		},
		'groups': groupIds,
		'dataset': 'SEED'
	};
	result = helpers.client(_, collabUrl + 'endPoints', epSeed);
	if (result.statusCode !== 201) return helpers.error('init SEED enpoint', result);
	epSeed = result.body;

	var epX3 = {
		'description': 'X3',
		'x3server': {
			'$uuid': x3server.$uuid
		},
		'x3ServerFolder': 'X3',
		'x3SolutionName': 'X3V7',
		'application': 'x3',
		'applicationRef': {
			'$uuid': application.$uuid
		},
		'groups': groupIds,
		'dataset': 'X3'
	};

	result = helpers.client(_, collabUrl + 'endPoints', epX3);
	if (result.statusCode !== 201) return helpers.error('init X3 endpoint', result);
	epX3 = result.body;

	// set Sage ID Email from customer as customer admin user email
	result = helpers.client(_, collabUrl + 'users');
	if (result.statusCode !== 200) return helpers.error('get users', result);
	var cadmin = result.body.$resources ? result.body.$resources.filter(function(res) {
		return res.login === 'admca';
	})[0] : null;
	var contacts = instance.customer(_).contacts(_)._array;
	var contact = Array.isArray(contacts) && contacts.length ? contacts[0] : null;

	if (cadmin && contact) {
		cadmin.email = contact.sageEmail(_);
		cadmin.authentication = 'sage-id';
		delete cadmin["$factory"];
		delete cadmin["$factoryOwner"];
		delete cadmin["$properties"];
		result = helpers.client(_, collabUrl + 'users', cadmin, 'PUT');
		if (result.statusCode !== 201) return helpers.error('set Sage ID data for customer admin', result);
	}

	// Set Sage ID Email from DevOps as super admin user email
	// and change super admin authentication to 'sage-id'
	result = helpers.client(_, collabUrl + 'users');
	if (result.statusCode !== 200) return helpers.error('get users', result);
	var sadmin = result.body.$resources ? result.body.$resources.filter(function(res) {
		return res.login === 'admin';
	})[0] : null;

	if (sadmin) {
		// Change to option from nodelocal
		sadmin.email = config.sage_id.devOpsEmail || 'SageERPX3DevOps@sage.com';
		sadmin.authentication = 'sage-id';
		delete sadmin["$factory"];
		delete sadmin["$factoryOwner"];
		delete sadmin["$properties"];
		result = helpers.client(_, collabUrl + 'users', sadmin, 'PUT');
		if (result.statusCode !== 201) return helpers.error('set Sage ID data for super admin', result);
	}

	// push license to site
	//TODO:  This errors out when provisioning from Web API with blank subscription
	var subscriptions = instance.subscriptions(_)._array;
	var license = Array.isArray(subscriptions) && subscriptions.length ? subscriptions[0].license(_) : null;
	result = license ? helpers.client(_, instance.uri(_) + '/nannyCommand/notifyOne/license/set', license, 'PUT') : {};
	if (result.statusCode !== 201) return helpers.error('init license', result);

	//TODO:  These calls are not working
	// // kick off the Search Index
	// result = helpers.client(_, collabUrl + 'endPoints/$services/initSearchIndex', epSeed);
	// if (result.statusCode !== 200) return helpers.error('init SEED search index', result);

	// result = helpers.client(_, collabUrl + 'endPoints/$services/initSearchIndex', epX3);
	// if (result.statusCode !== 200) return helpers.error('init X3 search index', result);
};
