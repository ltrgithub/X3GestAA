'use strict';

var ez = require('ez-streams');
var flows = require('streamline-runtime').flows;
var helpers = require('@sage/syracuse-core').helpers;
var mongodb = require('mongodb');

var config = require('config');

config.unit_test = config.unit_test || {};
var testConfig = config.unit_test.skyAutomation = config.unit_test.skyAutomation || {};
testConfig.port = testConfig.port || 3004;
testConfig.dataset = testConfig.dataset || 'production';

var baseHost = 'http://localhost:' + testConfig.port;
var baseUrl = baseHost + '/sdata/sky/automation/' + testConfig.dataset + '/';

var result, result2;

var cleanup = true;

// 2 assertions

function get(_, url, skipTest) {
	var response = ez.devices.http.client({
		method: 'get',
		url: url,
		headers: {
			Authorization: 'Basic YWRtaW46YWRtaW4='
		}
	}).end().response(_);
	var data = response.readAll(_);
	var body = '';
	try {
		body = JSON.parse(data);
	} catch (ex) {}
	if (!skipTest) strictEqual(response.statusCode, 200);
	return {
		statusCode: response.statusCode,
		headers: response.headers,
		body: body,
		resource0: body && body.$resources ? body.$resources[0] : '',
	};
}

function poll(_, url) {
	var result;
	while (true) {
		result = get(_, url, true);
		if (result.statusCode !== 202) break;
		flows.sleep(_, result.body.$pollingMillis || testConfig.pollingMillis || 100);
	}
	return result;
}

// 2 assertions

function post(_, path, data, async, statusCode) {
	statusCode = statusCode || 200;
	var qs = async ? '?trackngId=' + helpers.uuid.generate() : '';
	var url = baseUrl + path + qs;
	//console.log('post:', url);
	var response = ez.devices.http.client({
		method: 'post',
		url: url,
		headers: {
			Authorization: 'Basic YWRtaW46YWRtaW4=',
			'content-type': 'application/json'
		}
	}).end(JSON.stringify(data)).response(_);
	var body = response.readAll(_);
	try {
		body = JSON.parse(body);
	} catch (e) {
		return console.error('body:', body);
	}
	var result;
	if (async) {
		strictEqual(response.statusCode, 202);
		result = poll(_, baseHost + response.headers.location, statusCode);
	} else {
		ok(true, 'dummy assertion');
		result = {
			statusCode: response.statusCode,
			headers: response.headers,
			body: body,
		};
	}
	if (result.body.$diagnoses) console.error('diagnoses:', result.body.$diagnoses);
	strictEqual(result.statusCode, statusCode);
	return result;
}

// 2 assertions

function del(_, url) {
	var response = ez.devices.http.client({
		method: 'delete',
		url: url,
		headers: {
			Authorization: 'Basic YWRtaW46YWRtaW4='
		}
	}).end().response(_);
	var data = response.readAll(_);
	var body = '';
	try {
		body = JSON.parse(data);
	} catch (ex) {}
	strictEqual(response.statusCode, 200);
	return {
		statusCode: response.statusCode,
		headers: response.headers,
		body: body,
		diagnosis: body && body.$diagnoses ? body.$diagnoses[0].$message : ''
	};
}

function buildUrl(entityType, entity, activity) {
	return entityType + "('" + entity.$uuid + "')" + (activity ? '/' + activity : '');
}

import { assert } from 'chai';
Object.keys(assert).forEach(key => { if (key !== 'isNaN') global[key] = assert[key]; });

describe(module.id, () => {

// skip the test if not enabled by config
if (!config.skyAutomation) {
	it('TESTS SKIPPED: module is not enabled in nodelocal.js', function() {
		ok(true, "dummy test");
	});
} else {

//start syracuse server
it('initialize syracuse test server', function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, testConfig.port);
	ok(true, 'server initialized');
});

it('init database', function(_) {
	var host = 'localhost',
		port = 27017;
	config.sdata.endpoints.push({
		application: 'sky',
		contract: 'automation',
		datasets: {
			driver: 'mongodb',
			hostname: host,
			database: testConfig.dataset,
			port: port
		}
	});

	var server = new mongodb.Server(host, port, {});
	var db = new mongodb.Db(testConfig.dataset, server, {
		w: 'majority'
	});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, 'mongodb initialized');
});

// only tests that expected is a subset of got

function compare(got, expected, path) {
	path = path || '';
	if (expected && typeof expected === 'object' && got && typeof got === 'object') {
		Object.keys(expected).forEach(function(key) {
			compare(got[key], expected[key], path + '/' + key);
		});
	} else {
		strictEqual(got, expected, 'comparing ' + path);
	}
}


// create customer

var customer1 = {
	'$uuid': 'b30b57f6-852f-4c34-bed4-a54278a584c3',
	'customer': 'ACME Corp.',
	'shortName': 'acme',
	'accountNumber': '1234567890',
	'comments': 'comments on customer',
	'addresses': [{
		'address1': '220 W Kensinger Dr',
		'address2': 'Suite 100',
		'city': 'Cranberry Twp',
		'region': 'PA',
		'postalCode': '16066',
		'country': 'US'
	}],
	'contacts': [{
		'firstName': 'Drew',
		'lastName': 'Fyock',
		'email': 'drew.fyock@sage.com',
		'phone': '+17248148000',
		'sageId': 'xxxxxxx',
		'sageEmail': 'drew.fyock@sage.com'
	}],
};

it('create customer', function(_) {
	result = post(_, 'customers', customer1, false, 201);
	ok(result.headers.location != null, 'header location');
	result2 = get(_, result.headers.location);
	compare(result2.body, customer1);
});


// create site

var site1 = {
	'$uuid': '7525cd1b-a116-45fe-afc2-3a026ef9392d',
	'customer': {
		$uuid: customer1.$uuid
	},
	'site': 'site1',
	'shortName': 'a1b2c3d4e5',
	'isTest': true,
	'ipX3': '10.198.2.27',
	'ipORA': '10.198.2.35',
};
var site2 = {
	'$uuid': '8d3715af-c132-4d32-8d2b-ccba5e6d7b21',
	'customer': {
		$uuid: customer1.$uuid
	},
	'site': 'site2',
	'shortName': 'e5d4c3b2a1',
	'isDefault': true,
	'isTest': true,
};

it('create site', function(_) {
	result = post(_, 'sites', site1, false, 201);
	ok(result.headers.location != null, 'header location');
	result2 = get(_, result.headers.location);
	site1.status = result2.body.status;
	compare(result2.body, site1);

	result = post(_, 'sites', site2, false, 201);
	ok(result.headers.location != null, 'header location');
	result2 = get(_, result.headers.location);
	site2.status = result2.body.status;
	compare(result2.body, site2);

});


// subset of site2
var defSite2 = {
	$uuid: site2.$uuid,
	site: site2.site
};

it('get default site', function(_) {
	result = get(_, baseUrl + buildUrl('customers', customer1, '$service/defaultSite'));
	compare(result.body, defSite2);
});


// create subscription for site

var license1 = {
	'fileType': 'License',
	'generationStamp': '2014-06-17T10:06:54Z',
	'partnerId': '',
	'licenseType': 'NFR',
	'product': {
		'code': '1',
		'version': '7'
	},
	'policy': {
		'code': 'ERPX3',
		'version': '1.0'
	},
	'licensedTo': {
		'name': 'Sage France',
		'reference': 'SAGEFR',
		'registrationNumber': '',
		'address': {
			'address1': '10 rue Fructidor',
			'address2': '',
			'address3': '',
			'city': 'PARIS CEDEX',
			'zip': '75834',
			'state': '',
			'country': 'France'
		}
	},
	'reseller': {
		'name': 'Sage France',
		'reference': 'SAGEFR',
		'registrationNumber': '',
		'address': {
			'address1': '10 rue Fructidor',
			'address2': '',
			'address3': '',
			'city': 'PARIS CEDEX',
			'zip': '75834',
			'state': '',
			'country': 'France'
		}
	},
	'serial': '106001000001',
	'validity': [
		'1970-01-01',
		'2015-06-01'
	],
	'sessionControl': 'concurrent',
	'modules': [{
		'code': '1'
	}, {
		'code': '2'
	}, {
		'code': '3'
	}, {
		'code': '4'
	}, {
		'code': '5'
	}, {
		'code': '6'
	}, {
		'code': '7'
	}, {
		'code': '8'
	}, {
		'code': '9'
	}, {
		'code': '10'
	}, {
		'code': '11'
	}, {
		'code': '12'
	}, {
		'code': '13'
	}, {
		'code': '14'
	}, {
		'code': '15'
	}, {
		'code': '16'
	}, {
		'code': '17'
	}, {
		'code': '18'
	}, {
		'code': '19'
	}],
	'activityCodes': [{
		'code': 'ABI'
	}, {
		'code': 'CCN'
	}, {
		'code': 'CFG'
	}, {
		'code': 'GDD'
	}, {
		'code': 'KAT'
	}, {
		'code': 'KAU'
	}, {
		'code': 'KBE'
	}, {
		'code': 'KCH'
	}, {
		'code': 'KDE'
	}, {
		'code': 'KFR'
	}, {
		'code': 'KIT'
	}, {
		'code': 'KPL'
	}, {
		'code': 'KPO'
	}, {
		'code': 'KRU'
	}, {
		'code': 'KSP'
	}, {
		'code': 'KSW'
	}, {
		'code': 'KUK'
	}, {
		'code': 'KUS'
	}, {
		'code': 'LEG'
	}, {
		'code': 'MWM'
	}],
	'languages': [{
		'code': 'CHI'
	}, {
		'code': 'ENG'
	}, {
		'code': 'FRA'
	}, {
		'code': 'GER'
	}, {
		'code': 'BRI'
	}, {
		'code': 'ITA'
	}, {
		'code': 'POL'
	}, {
		'code': 'POR'
	}, {
		'code': 'RUS'
	}, {
		'code': 'SPA'
	}],
	'legislations': [{
		'code': 'AUS'
	}, {
		'code': 'AUT'
	}, {
		'code': 'BEL'
	}, {
		'code': 'SWI'
	}, {
		'code': 'GER'
	}, {
		'code': 'FRA'
	}, {
		'code': 'ITA'
	}, {
		'code': 'POL'
	}, {
		'code': 'POR'
	}, {
		'code': 'RUS'
	}, {
		'code': 'SPA'
	}, {
		'code': 'BRI'
	}, {
		'code': 'USA'
	}, {
		'code': 'ZAF'
	}, {
		'code': 'ANG'
	}, {
		'code': 'CHI'
	}],
	'sessionTypes': [{
		'code': 'all',
		'max': 600
	}],
	'badges': [{
		'code': 'ERPDEV',
		'max': 100
	}, {
		'code': 'ERPDIS',
		'max': 100
	}, {
		'code': 'ERPFIN',
		'max': 100
	}, {
		'code': 'ERPFULL',
		'max': 100
	}, {
		'code': 'ERPMAN',
		'max': 100
	}, {
		'code': 'ERPTRAN',
		'max': 100
	}],
	'parameters': [{
		'code': 'ACTGANTT',
		'value': true
	}, {
		'code': 'MAXFIXEDASSETS',
		'value': 102500
	}, {
		'code': 'MAXWEIGHTING',
		'value': 1
	}, {
		'code': 'MAXTERMINALRF',
		'value': 100
	}, {
		'code': 'MAXWEBSERVICES',
		'value': 100
	}],
	'signature': 'ksUPHSYio7qe7Z3e+mzuWCrhOuxSLNYhry7zZHohBqWVeHWKBwfTBWZ8Ld7VILGeHkMRx4b6SX2cZuWw6h52taqV25qWwnAQB5izdopntYZiJvFjlWG/MSrH0Pyci8mJDxsA+sSRfacRgXAqA4KTaTLUVADBGc6zsN10F6yIMkzx4qTcw+Gw3FxRXWtsx2T87BKdwkfO4G+4p+kAcI9DtUO7CaJLvzC2VMfhVhaxHUrANYqFAnaMmiIHjMBfifY4YiEHDIrssr/TZvEUBmbEKiuIMswv6wKG+IvliupQIOmEqPvC5LcGd6i/JqW76ctvAUURGdqcQtZ39oagGAmRkJLDZAxtApOAS0hWqH8tJX7PlFrrCDYOrnV6/qCGy32sMl1zqv8+r8RH20uzDkMyEAFynNlfaSamV98l3KGgeGSc+tKy5Xpr8QyiWyLnskEKzZFKx1eaY3tAGBd7uuFS1obDo0hP7RTWVOyYKNI/HpF3XayiAbBeW6ymlWr6GI92RvHbhr7JfQ2WsWt+AaC4ZagHS112XgO8ipLzqIRkDBzleiQFOOWu1b6ApWbB0OneLW3TxYQ446Cqn+huVvSNs7q6T1qhbu2UMQujpgxOIUNqQtViG/x7KTyYnR78nob4Jfbu3qgMofFQT+H1Vt43oPdAukMcrR7ux3zWzzuPdlc=',
	'signatureText': 'SAGE SAS'
};

var hibernate1 = {
	enabled: true,
	tags: ['06:30', '16:30', '5', '-8:00'],
};

var subscription1 = {
	'$uuid': '72d9d500-0c46-11e4-9191-0800200c9a66',
	'site': {
		$uuid: site1.$uuid
	},
	'license': license1,
	'hibernate': hibernate1,
};

it('update site subscription', function(_) {
	result = post(_, 'subscriptions', subscription1, false, 201);
	ok(result.headers.location != null, 'header location');
	result2 = get(_, result.headers.location);
	compare(result2.body, subscription1);
});

it('provision site', function(_) {
	result = post(_, buildUrl('sites', site1, '$service/provision'), {}, true);
});

it('activate site', function(_) {
	result = post(_, buildUrl('sites', site1, '$service/activate'), {}, true);
});

// site health - status must be active
it('get site health', function(_) {
	result = get(_, baseUrl + 'sites/$service/health');
	compare(result.resource0, {
		healthy: true
	});
});

it('suspend site', function(_) {
	result = post(_, buildUrl('sites', site1, '$service/suspend'), {}, true);
});

it('shelve site', function(_) {
	result = post(_, buildUrl('sites', site1, '$service/shelve'), {}, true);
});

it('restore site', function(_) {
	result = post(_, buildUrl('sites', site1, '$service/restore'), {}, true);
});

it('delete site', function(_) {
	result = post(_, buildUrl('sites', site1, '$service/delete'), {}, true);
});


// delete subscription, site, customer entities
if (cleanup) {

	it('delete subscription', function(_) {
		result = del(_, baseUrl + buildUrl('subscriptions', subscription1), subscription1);
		ok(/deleted/.test(result.diagnosis), 'site deleted');
	});

	it('delete site', function(_) {
		result = del(_, baseUrl + buildUrl('sites', site1), site1);
		ok(/deleted/.test(result.diagnosis), 'site deleted');

		result = del(_, baseUrl + buildUrl('sites', site2), site2);
		ok(/deleted/.test(result.diagnosis), 'site deleted');

	});

	it('delete customer', function(_) {
		result = del(_, baseUrl + buildUrl('customers', customer1), customer1);
		ok(/deleted/.test(result.diagnosis), 'customer deleted');
	});
}
}
});
