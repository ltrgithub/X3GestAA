require('streamline').register();
exports.$exported = true;
var AWS = require('aws-sdk');
var ez = require('ez-streams');

//Need to figure out better way for storing access keys
//AWS.config.update({accessKeyId: 'AKIAJEZP7LDCT2BXPHNA', secretAccessKey: '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'});
//AWS.config.update({region: 'us-west-1'});
var config = require('config');
AWS.config.update(config.aws);


var healthCheck = function(_, checkURL) {
	var request = ez.devices.http.client({
		url: checkURL,
		method: 'GET',
		headers: {
			'content-type': 'text/json',
		},
	});
	try {
		var resp = request.end().response(_);
		//console.log("status=" + resp.statusCode);
		var jsonResp = resp.readAll(_);
		if (resp.statusCode != 200) {
			//console.log('\n\n Health Check Response = ' + jsonResp.toString());
		} else {
			//console.log('\n\n Health Check Response = ' + jsonResp.toString());
		}
		return jsonResp;
	} catch (e) {
		return;
	}
};


exports.farmHealthTestFailed = function(_, parms) {

	var cloudwatch = new AWS.CloudWatch({
		apiVersion: '2010-08-01'
	});
	var fail = false;
	var failElasticSearch = false;
	var failSyracuse = false;
	var failMongodb = false;
	var paramsAPIElasticSearch = 0;
	var paramsAPISyracuse = 0;
	var paramsAPIMongodb = 0;

	//Perform heath check on Elastic Search
	var url = 'http://' + parms.elasticSearchEIP + ':9200';
	var result1 = healthCheck(_, url);
	var retVal;

	//if (err) throw err;
	if (result1 !== undefined) {
		retVal = JSON.parse(result1);
			//console.log('\n\n result '  + retVal['ok']);
		if (retVal['ok'] === true) {
			//console.log('Elastic Search Success.')
		} else {
			fail = true;
			failElasticSearch = true;
			paramsAPIElasticSearch = 1;
		}
	} else {
		fail = true;
		failElasticSearch = true;
		paramsAPIElasticSearch = 1;
	}


	//Perform Syracuse connection test
	url = 'http://' + parms.syracuseEIP + ':8124/index.html';
	result3 = healthCheck(_, url);

	//if (err) throw err;
	var n = 0;
	if (result3 !== undefined) {
		retVal = result3.toString();
		n = retVal.indexOf('<div class="s-start">');
	}
	if (n > 0) {
		//console.log('\n\n result'  + n + " Success");
	} else {
		//console.log('\n\n result'  + "Failure");
		fail = true;
		failSyracuse = true;
		paramsAPISyracuse = 1;
	}


	//Perform Mongodb connection test
	var mongo = require('mongodb');
	var server = new mongo.Server(parms.mongodbEIP, '27017');
	db = new mongo.Db('Syracuse', server, {
		fsync: true
	});
	var result2;
	try {
		result2 = db.open(_);
		//console.log("Connected to database");
	} catch (e) {
		//console.log("Error in open().");
		//console.log(err);
		fail = true;
		failMongodb = true;
		paramsAPIMongodb = 1;
	}
	db.close();


	//Publish metrics to Cloudwatch - Elastic Search
	var params = {
		Namespace: 'SyracuseFarm',
		MetricData: [{
			MetricName: 'ElasticSearchHealthCheckFailed',
			Dimensions: [{
				Name: 'ElasticIP',
				Value: parms.elasticSearchEIP
			}, ],
			Value: paramsAPIElasticSearch
		}]
	};
	cloudwatch.putMetricData(params, function(err, data) {
		if (err) console.log(err, err.stack);
		else console.log(data);
	});

	//Publish metric to Cloudwatch - Syracuse Server
	params = {
		Namespace: 'SyracuseFarm',
		MetricData: [{
			MetricName: 'SyracuseHealthCheckFailed',
			Dimensions: [{
				Name: 'ElasticIP',
				Value: parms.syracuseEIP
			}, ],
			Value: paramsAPISyracuse
		}]
	};
	cloudwatch.putMetricData(params, function(err, data) {
		if (err) console.log(err, err.stack);
		else console.log(data);
	});

	//Publish metric to Cloudwatch - Mongodb Connection
	params = {
		Namespace: 'SyracuseFarm',
		MetricData: [{
			MetricName: 'MongoDBHealthCheckFailed',
			Dimensions: [{
				Name: 'ElasticIP',
				Value: parms.mongodbEIP
			}, ],
			Value: paramsAPISyracuse
		}]
	};
	cloudwatch.putMetricData(params, function(err, data) {
		if (err) console.log(err, err.stack);
		else console.log(data);
	});


	return {
		fail: fail,
		failElasticSearch: failElasticSearch,
		failSyracuse: failSyracuse,
		failMongodb: failMongodb
	};
};

exports.x3ServerHealthTestFailed = function(_, parms) {

	var _stream = null;
	var fail = false;
	var paramsAPIX3Server = 0;
	var cloudwatch = new AWS.CloudWatch({
		apiVersion: '2010-08-01'
	});

	var _client = ez.devices.net.tcpClient('1807', parms.x3EIP, {
		// read: {
		// 	timeout: 600000
		// }
	});

	try {
		_stream = _client.connect(_);
		_stream.close(_);
		// return [{
		// 	$severity: "info",
		// 	$message: "connectionSuccess  " + params.address + ":" + params.port
		// }];
	} catch (e) {
		// return [{
		// 	$severity: "error",
		// 	$message: "connectionRefused:  " + params.address + ":" + params.port + ",  " + e.message
		// }];
		fail = true;
		paramsAPIX3Server = 1;
	}


	//Publish metric to Cloudwatch - X3 Server Connection
	var params = {
		Namespace: 'Tenants',
		MetricData: [{
			MetricName: 'X3ServerHealthCheckFailed',
			Dimensions: [{
				Name: 'ElasticIP',
				Value: parms.x3EIP
			}],
			Value: paramsAPIX3Server
		}]
	};

	cloudwatch.putMetricData(params, function(err, data) {
		if (err) console.log(err, err.stack);
		else console.log(data);
	});



	return {
		fail: fail
	};

};
