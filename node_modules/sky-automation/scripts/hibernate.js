'use strict';

var config = require('config');
var AWS = require('aws-sdk');

AWS.config.update(config.aws);
var ec2 = new AWS.EC2({apiVersion: '2014-06-15'});

exports.createInstanceTags = function(instanceId, instanceTags) {
  var params = {
    Resources: [
      instanceId
    ],
    Tags: Object.keys(instanceTags).map(function(tag) {
      return {
        Key: tag,
        Value: instanceTags[tag]
      };
    })
  };

  ec2.createTags(params, function(err, data) {
    if (err)
      console.log(err, err.stack);
    /*else
      console.log("Tags created successfully");*/
  });
};

exports.getInstanceIdFromIP = function(instanceIP, callback) {
  var params = {
    Filters: [{
      Name: 'private-ip-address',
      Values: [
        instanceIP,
      ]
    }, ],
  };
  ec2.describeInstances(params, function(err, data) {
    var id = "";
    if (err)
      console.log(err, err.stack);
    else if (data && data.Reservations.length > 0) {
      var reservations = data.Reservations;
      var instances = reservations[0].Instances;
      var instance = instances[0];
      id = instance.InstanceId;
      callback(id);
    }
  });
};

exports.validateTags = function(instanceTags) {
  var valid = validateTimeFormat(instanceTags[0]);
  if (!valid)
    throw new Error("Invalid 24 hour format - Start Time - example '00:00'");

  valid = validateTimeFormat(instanceTags[1]);
  if (!valid)
    throw new Error("Invalid 24 hour format - End Time - example '00:00'");

  validateStartEnd(instanceTags[0], instanceTags[1]);

  if (typeof instanceTags[2] !== "number" && Number(instanceTags[2]) === "NaN")
    throw new Error("Invalid value, not a number");

  if (Number(instanceTags[2]) > 100)
    throw new Error("Invalid value, too large");
};

exports.updateToGMT = function(instanceTags) {
  var timeOffset = validateTimeOffset(instanceTags[3]);

  var startGMT = addTimeOffset(instanceTags[0], timeOffset);
  var endGMT = addTimeOffset(instanceTags[1], timeOffset);

  instanceTags[0] = startGMT;
  instanceTags[1] = endGMT;
};

function validateTimeFormat(timeStr) {
  return (timeStr.search(/^\d{2}:\d{2}$/) != -1) &&
    (timeStr.substr(0, 2) >= 0 && timeStr.substr(0, 2) <= 24) &&
    (timeStr.substr(3, 2) >= 0 && timeStr.substr(3, 2) <= 59);
}

function validateStartEnd(startTime, endTime) {
  var startHour = startTime.substr(0, 2);
  var startMinute = startTime.substr(3, 2);
  var endHour = endTime.substr(0, 2);
  var endMinute = endTime.substr(3, 2);

  var startTimeObject = new Date();
  startTimeObject.setHours(startHour, startMinute, 0);

  var endTimeObject = new Date();
  endTimeObject.setHours(endHour, endMinute, 0);
  if (startTimeObject > endTimeObject)
    throw new Error("Invalid start and end times, start time after end time");
}

function validateTimeOffset(timeOffset) {
  if (timeOffset.length > 6)
    throw new Error("Invalid timezone offset length, please format correctly '-08:00'");

  var sign = "";
  if (timeOffset.charAt(0) === "-" || timeOffset.charAt(0) === "=")
    sign = timeOffset.substr(0, 1);
  if (timeOffset.indexOf(':') > -1) {
    var timeStr = "";
    if (sign)
      timeStr = timeOffset.substr(1).split(':');
    else
      timeStr = timeOffset.split(':');

    if (isNaN(timeStr[0]) || isNaN(timeStr[1]))
      throw new Error("Invalid timezone offset, not a number, please format correctly '-08:00'");
    else {
      if (timeStr[0].length === 1)
        timeStr[0] = "0" + timeStr[0];
    }

    if (sign)
      return sign + timeStr[0] + ":" + timeStr[1];
    else
      return "+" + timeStr[0] + ":" + timeStr[1];
  } else {
    if (sign)
      timeOffset = timeOffset.substr(1);
    if (timeOffset.length === 1)
      timeOffset = "0" + timeOffset;

    if (isNaN(timeOffset))
      throw new Error("Invalid timezone offset, not a single number, please format correctly '-08:00'");

    if (sign)
      return timeOffset + ":00";
    else
      return "+" + timeOffset + ":00";
  }
}

function addTimeOffset(time, timeOffset) {
  var sign = timeOffset.substr(0, 1);

  var offsetHour = Number(timeOffset.substr(1).split(':')[0]);
  var offsetMinute = Number(timeOffset.substr(1).split(':')[1]);

  var timeHour = Number(time.split(':')[0]);
  var timeMinute = Number(time.split(':')[1]);

  var gmtHours = "";
  var gmtMinutes = "";
  if (sign === "+") {
    gmtHours = timeHour - offsetHour;
    gmtMinutes = timeMinute - offsetMinute;

    if (gmtMinutes < 0) {
      gmtMinutes = gmtMinutes + 60;
      gmtHours--;
    }

    if (gmtHours < 0)
      gmtHours = gmtHours + 24;
  } else {
    gmtHours = timeHour + offsetHour;
    gmtMinutes = timeMinute + offsetMinute;

    if (gmtMinutes > 59) {
      gmtMinutes = gmtMinutes - 60;
      gmtHours++;
    }

    if (gmtHours > 23)
      gmtHours = gmtHours - 24;
  }

  if (gmtHours.length === 1)
    gmtHours = "0" + gmtHours;
  if (gmtMinutes.length === 1)
    gmtMinutes = "0" + gmtMinutes;

  return gmtHours + ":" + gmtMinutes;
}