"use strict";
/*
Coût de création en millisecondes pour 1000 instances assez grosses :

lazyProxy : 38
Resource : 1

Scan les propriétés des objets et sous objets :

lazyProxy first pass : 960
Resource first pass : 1003

Scan les propriétés des objets et sous objets une seconde fois (cache) :

lazyProxy second pass : 336
Resource second pass : 975

*/

var module = QUnit.module;
var helpers = require("syracuse-core/lib/helpers");
var proxy = require("syracuse-core/lib/resource/resourceProxy");
var proxyOtherWays = require("./resourceProxyOtherWays");

var Resource = proxy.Resource;

var employeesData = require("../fixtures/employeeData").data;
var employeeProto = require("../fixtures/employeeProto").data;
var employeesDelta = require("../fixtures/employeeDelta").data;

var deepProxy = proxyOtherWays.deepProxy;
var simpleMerge = proxyOtherWays.simpleMerge;
var simpleMergeWithTemplates = proxyOtherWays.simpleMergeWithTemplates;
var lazyProxyNew = proxyOtherWays.lazyProxyNew;
var lazyProxy = proxyOtherWays.lazyProxy;
var Prototype = proxyOtherWays.Prototype;
var PrototypeV2 = proxyOtherWays.PrototypeV2;
var getInstanceConstructor = proxyOtherWays.getInstanceConstructor;
var createInstance = proxyOtherWays.createInstance;

var methodForMerging = lazyProxy; //Choice between create, simpleMerge and simpleMergeWithTemplates, applied to all tests

var allEmps = [];

function _getEmpData(proto) {
	proto = proto || helpers.object.clone(employeeProto, true);
	var delta = _getDelta();
	return methodForMerging(delta, proto);
}

function _getEmpBigData(proto, num) {
	var allEmp = helpers.object.clone(employeesDelta, true);
	allEmp.$resources = [];
	for (var i = 0; i < num; i++) {
		var emp = helpers.object.clone(employeesDelta.$resources[0], true);
		allEmp.$resources.push(emp);
	}
	return allEmp;
}

var _logActive = true;

function _log(mess) {
	if (_logActive) console.log(mess);
}

function _getResource() {
	var proto = _getProto();
	var delta = _getDelta();
	return new Resource(proto, delta);
}

function _getDelta() {
	return helpers.object.clone(employeesDelta.$resources[0], true);
}

function _getProto() {
	return helpers.object.clone(employeeProto, true);
}

var alls = [];

test("Performances initialisation", function() {

	_log("Performances creation");

	function _testAll(num) {
		_log("with " + num + " entries");

		function _startTest(fn, name) {
			var proto = helpers.object.clone(employeeProto, true);
			var allEmp = _getEmpBigData(proto, num);
			var start = new Date().getTime();
			allEmp.$resources.forEach(function(resource) {
				var emp = fn(resource, proto);
				alls.push(emp);
			});
			var end = new Date().getTime();
			var ellasped = end - start;
			_log(name + " : " + ellasped);
			equal(ellasped < num, true, "should be less than one milli by record");
		}
		_startTest(lazyProxy, "lazyProxy");
		_startTest(deepProxy, "Proxy");
		_startTest(simpleMerge, "simpleMerge");
		_startTest(simpleMergeWithTemplates, "simpleMergeWithTemplates");
		_startTest(function(resource, proto) {
			return new Resource(proto, resource);
		}, "Resource");
	}

	//	_testAll(10);
	_testAll(100);
	//	_testAll(1000);

	_log("##########");

});

test("Performances getter", function() {

	_log("Performances getter");

	function _testAll(num) {
		_log("with " + num + " entries");

		function _startTest(fn, name, isResource) {
			var browseObj;
			if (isResource) {
				browseObj = _resourceBrowser;
			} else {
				browseObj = _browseObj;
			}
			var proto = helpers.object.clone(employeeProto, true);
			allEmps = _getEmpBigData(proto, num);
			allEmps = allEmps.$resources.map(function(resource) {
				return fn(resource, proto);
			});

			var result = []; //Need an array to avoid optimisation

			var start = new Date().getTime();

			function _resourceBrowser(obj) {
				if (!obj) return;
				var o = obj._proto;
				if (obj._relativePath) {
					o = helpers.object.walkPath(obj._proto, obj._relativePath);
					o = o.resource[o.property];
				}
				if (typeof o == "object" && o !== null) {
					Object.keys(o).forEach(function(key) {
						nbProperties++;
						var v = obj.getValue(key);
						if (typeof v == "object") {
							if (Array.isArray(v)) {
								v.forEach(function(vElem) {
									_resourceBrowser(vElem, nbProperties);
								});
							} else {
								if (o != null) {
									_resourceBrowser(v, nbProperties);
								}
							}
						} else {
							result.push(v);
						}
					});
				} else {
					result.push(o);
				}

			}

			function _browseObj(obj) {
				if (obj == null) return;
				Object.keys(obj).forEach(function(key) {
					var v = obj[key];
					nbProperties++;
					if (typeof v == "object") {
						if (Array.isArray(v)) {
							v.forEach(function(vElem) {
								_browseObj(vElem, nbProperties);
							});
						} else {
							_browseObj(v, nbProperties);
						}
					} else {
						result.push(v); //Histoire de se servir de v si type primitif. Peur qu'il y ait une optim sinon.
					}
				});
			}
			var nbProperties = 0;
			allEmps.forEach(function(emp) {
				nbProperties = 0;
				browseObj(emp);
			});
			var end = new Date().getTime();
			var ellasped = end - start;

			//Refaire une deuxième fois pour le cache.
			_log(name + " first pass : " + ellasped);

			result = [];
			start = new Date().getTime();

			allEmps.forEach(function(emp) {
				browseObj(emp);
			});
			end = new Date().getTime();
			ellasped = end - start;

			_log(name + " second pass : " + ellasped);
			_log(name + " properties found : " + nbProperties);
			_log(name + " nb root keys : " + Object.keys(allEmps[0]).length);
		}
		_startTest(lazyProxy, "lazyProxy");

		_startTest(deepProxy, "Proxy");
		_startTest(simpleMerge, "simpleMerge");
		_startTest(simpleMergeWithTemplates, "simpleMergeWithTemplates");

		_startTest(function(resource, proto) {
			return new Resource(proto, resource);
		}, "Resource", true);

	}

	_testAll(100);

	_log("########");

});

test("getValue with primitives", function() {
	var resource = _getResource();
	equal(resource.getValue("lastName"), "Coudeyras", "should get properties from instance");
	equal(resource.getValue("$actions.$save.$title"), "Save", "should get properties from proto");
});

test("templates", function() {
	var resource = _getResource();
	equal(resource.getValue("$title"), "Employee Alexis Coudeyras with id 36613838-3035-6463-2d32-6532302d3131", "should resolve template");
	var address = resource.getValue("address");
	equal(address.getValue("description"), "341 rue de la villette 02200 vauxbuin France", "should resolve templates when part of it's values are on instance and other parts are on proto");
	equal(resource.getValue("address.description"), "341 rue de la villette 02200 vauxbuin France", "should resolve templates when part of it's values are on instance and other parts are on proto");
});

test("method getTemplateInfo", function() {
	var resource = _getResource();
	var v = resource.getTemplateInfo("$title");
	equal(v.linkedProperties.length, 3, "should return linkedProperties when template");
	equal(v.linkedProperties[0], "firstName", "should return linkedProperties when template");
	equal(v.linkedProperties[1], "lastName", "should return linkedProperties when template");
	equal(v.linkedProperties[2], "$uuid", "should return linkedProperties when template");
	equal(resource.getTemplateInfo("lastName"), null, "should return null when not a template");
});

test("updating resource with setValue", function() {
	var resource = _getResource();
	resource.setValue("lastName", "Coz");
	equal(resource.getValue("lastName"), "Coz", "should get properties from instance after modification");
	equal(resource.getValue("$title"), "Employee Alexis Coz with id 36613838-3035-6463-2d32-6532302d3131", "should resolve template");
});

test("with arrays", function() {
	var resource = _getResource();
	var childs = resource.getValue("childs");
	equal(Array.isArray(childs), true, "should be an array");
	equal(typeof childs[0].getValue, "function", "should return an array of Resource");
	var delta = helpers.object.clone(employeesDelta.$resources[0], true);
	equal(childs.length, delta.childs.length, "with the same size than the original array");
});

test("creating/updating childs of a resource", function() {
	var resource = _getResource();
	var childs = resource.getValue("childs");
	var child = resource.createChild("childs", {
		firstName: "Tim",
		lastName: "Robinson"
	});
	equal(child.getValue("firstName"), "Tim", "should be able to get instance data");
	equal(child.getValue("fullName"), "Tim Robinson", "templates should work on childs");
	child.setValue("firstName", "Bob");
	equal(child.getValue("firstName"), "Bob", "should be able to set instance data");

	childs.push(child);
	equal(childs.length, 3, "should have modified childs instance");
	equal(childs[childs.length - 1].getValue("fullName"), "Bob Robinson");

	childs = resource.getValue("childs");
	equal(childs.length, 3, "should have modified childs");
	equal(childs[childs.length - 1].getValue("fullName"), "Bob Robinson");

	//Child avec formule pour accéder à la resource.

	/*
	var child2 = childs.createChild({
		firstName : "Bill",
		lastName : "Clinton"
	});
	equal(child.getValue("fullName"), "Bill Clinton", "if the resource is an array of resource, should be able to create a child without path parameter");	
	*/

});

test("with objects", function() {
	var resource = _getResource();
	equal(typeof resource.getValue("$actions.$save").getValue, "function", "should return a resource for objects on proto");
	equal(typeof resource.getValue("address").getValue, "function", "should return a resource for objects on instance");
	var child = resource.getValue("childs[0]");
	equal(typeof child.getValue, "function", "should return a resource for items of arrays");

	var address = resource.getValue("address");
	equal(address.getValue("description"), "341 rue de la villette 02200 vauxbuin France", "relatives paths should work");

	address.setValue("country", "UK");
	equal(address.getValue("description"), "341 rue de la villette 02200 vauxbuin UK", "updating on sub resource should work");
	resource.setValue("address", {
		"num": "12",
		"street": "rue du pont",
		"city": "paris",
		"postalCode": "75017"
	}); //No country, so we go back to proto en get France instead of UK
	equal(address.getValue("description"), "12 rue du pont 75017 paris France", "updating full object should work");

	resource = _getResource();
	resource = resource.getValue("$properties");
	resource = resource.getValue("childs");
	equal(resource.getValue("$type"), "application/x-list; vnd.sage.syracuse.representation=x3.erp.folder1.childs.$edit", "should allow navigation in sub objects");

});

return;

throw new Error("rename file to _.js before enabling next test");

asyncTest("with new proto on prototype", function(_) {
	var protoDesc = helpers.object.clone(employeeProto, true);
	var Instance = getInstanceConstructor(protoDesc);

	var delta = _getDelta();
	var resource = new Instance(_, delta);

	var delta2 = _getDelta();
	var resource2 = new Instance(_, delta2);

	equal(resource.lastName, "Coudeyras", "should get instance values");
	equal(resource.title, 1, "should get proto values if not defined in instance");

	resource.lastName = "Coz";
	equal(resource.lastName, "Coz", "should set on instance");
	resource.title = 2;
	equal(resource.title, 2, "should set on instance");

	equal(resource.address.street, "rue de la villette", "should get instance values on sub objects");
	equal(resource.address.country, "France", "should get proto values on sub objects if not defined in instance");

	resource.address.country = "UK";
	equal(resource2.address.country, "France", "modifications of a resource should not impact other resources with same proto, even for sub objects");
	equal(resource.address.country, "UK", "should set on instance for sub objects");

	equal(resource.address, resource.address, "should cache already accessed sub objects");
	equal(resource2.address, resource2.address, "should cache already accessed sub objects");

	equal(resource2.lastName, "Coudeyras", "modifications of a resource should not impact other resources with same proto");
	resource.lastName = "Coudeyras";
	resource.address.country = undefined; //delete ne marche pas !!!

	equal(resource.$title, "Employee Alexis Coudeyras with id 36613838-3035-6463-2d32-6532302d3131", "should resolve template");
	var address = resource.address;
	equal(address.description, "341 rue de la villette 02200 vauxbuin France", "should resolve templates when part of it's values are on instance and other parts are on proto");
	equal(resource.address.description, "341 rue de la villette 02200 vauxbuin France", "should resolve templates when part of it's values are on instance and other parts are on proto");
	//tester avec templates des childs

	var childs = resource.childs;

	equal(childs.length, 2, "should be able to retrieve arrays");
	equal(childs[0].firstName, "Bob", "should be able to retrieve array item values on instance");
	equal(childs[0].fullName, "Bob Simon", "should be able to retrieve array item values on instance");
	equal(resource.childs[0].fullName, "Bob Simon", "should be able to retrieve array item values on instance");
	resource.childs.push({
		firstName: "Tim",
		lastName: "Tom"
	});
	equal(resource.childs.length, 3, "should be able to retrieve array item values on instance");
	equal(resource.childs[2].fullName, "Tim Tom", "should be able to retrieve array item values on instance");
	var obj = {
		firstName: "Kim",
		lastName: "Kom"
	};
	resource.childs.push(obj);
	equal(resource.childs[3].fullName, "Kim Kom", "should be able to retrieve array item values on instance");

	//obj n'est pas modifié par contre

	var childs = resource.childs;
	childs.push(obj);
	equal(childs[4].firstName, "Kim", "should be able to retrieve array item values on instance");
	equal(childs[4].fullName, "Kim Kom", "should be able to retrieve array item values on instance"); //marche pas!!!

});

/*
test("with new proto V2", function() {
	var v;
	var proto = helpers.object.clone(employeeProto, true);
	var delta = helpers.object.clone(employeesDelta.$resources[0], true);
	
	var p = new PrototypeV2(proto);
	equal(p.getValue(delta, "lastName"), "Coudeyras", "should get properties from instance");
	equal(p.getValue(delta, "$actions.$save.$title"), "Save", "should get properties from proto");
	v = p.getValue(delta, "$title");
	equal(v, "Employee Alexis Coudeyras with id 36613838-3035-6463-2d32-6532302d3131", "should resolve template");
	v = p.getTemplateInfo("$title");
	equal(v.linkedProperties.length, 3, "should return linkedProperties when template");
	equal(v.linkedProperties[0], "firstName", "should return linkedProperties when template");
	equal(v.linkedProperties[1], "lastName", "should return linkedProperties when template");
	equal(v.linkedProperties[2], "$uuid", "should return linkedProperties when template");
	delta.lastName = "Coz";
	equal(p.getValue(delta, "lastName"), "Coz", "should get properties from instance after modification");
	
	var childs = p.getValue(delta, "childs");
	equal(childs.length, 2, "shoud get childs array");
	equal(childs[0].firstName, "Bob", "should merge item array with $item and apply templates");
	equal(childs[0].fullName, undefined, "no templates when getting a child");
	
	var childs = p.getValue(delta, "childs");
	var childProto = p.getChildProto("childs");
	equal(childs[0].fullName, undefined, "no templates when getting a child");
		
	var childProto = p.getChildProto("childs");
	equal(childProto instanceof PrototypeV2, true, "should be able to get new proto");
	equal(childProto.getValue(childs[childs.length - 1], "fullName"), "Jim Kennedy", "child proto should work");
	
	//createChild
	
	//tester modification de l'array
	
	//var child = proto.getValue(child[0], "fullName"); //Voir si childs est bien impacté
		
	var child = p.createChild(delta, "childs", {
		"$uuid" : "78901238-3035-6463-2d32-6532302d3131",
		"firstName" : "Tim",
		"lastName" : "Robinson"
	}); //Should return the new child ???
	equal(v.length, 3, "existing instances of wrapper should have been impacted"); //Do not work
	equal(p.getValue(delta, "childs")[2].getValue("firstName"), "Tim");
	equal(p.getValue(delta, "childs")[2].getValue("fullName").value, "Tim Robinson");
	
	//p.getChildProto();
	childs.push({
		firstName : "aze"
	});
		
	//create un wrapper
	
	//getLinkedProperties
	//createChild
	
	//Penible, toujours devoir faire un getValue avec un addChild
	//+ un coup c'est addChild, un coup on bosse avec l'objet directement
	//setValue ne servant à rien.
});

test("with new proto", function() {
	var v;
	var proto = helpers.object.clone(employeeProto, true);
	var delta = helpers.object.clone(employeesDelta.$resources[0], true);
	
	var p = new Prototype(proto);
	equal(p.getValue(delta, "lastName"), "Coudeyras", "should get properties from instance");
	equal(p.getValue(delta, "$actions.$save.$title"), "Save", "should get properties from proto");
	v = p.getValue(delta, "$title");
	equal(v.value, "Employee Alexis Coudeyras with id 36613838-3035-6463-2d32-6532302d3131", "should resolve template");
	equal(v.linkedProperties.length, 3, "should return linkedProperties when template");
	equal(v.linkedProperties[0], "firstName", "should return linkedProperties when template");
	equal(v.linkedProperties[1], "lastName", "should return linkedProperties when template");
	equal(v.linkedProperties[2], "$uuid", "should return linkedProperties when template");
	delta.lastName = "Coz";
	equal(p.getValue(delta, "lastName"), "Coz", "should get properties from instance after modification");
	v = p.getValue(delta, "childs");
	equal(v.length, 2, "shoud get childs array");
	equal(v[0].getValue("fullName").value, "Bob Simon", "should merge item array with $item and apply templates");
	var child = p.createChild(delta, "childs", {
		"$uuid" : "78901238-3035-6463-2d32-6532302d3131",
		"firstName" : "Tim",
		"lastName" : "Robinson"
	}); //Should return the new child ???
	equal(v.length, 3, "existing instances of wrapper should have been impacted"); //Do not work
	equal(p.getValue(delta, "childs")[2].getValue("firstName"), "Tim");
	equal(p.getValue(delta, "childs")[2].getValue("fullName").value, "Tim Robinson");
	
	//p.getChildProto();
	var childs = p.getValue(instance, "childs");
	var proto = p.getChildProto("childs");
	var child = proto.getValue(child[0], "fullName");
	childs.push({
		firstName : "aze"
	});
	var child = proto.getValue(childs[childs.length - 1], "fullName");
		
});

test("templates ", function() {
	var emp1 = _getEmpData();
	var emp2 = _getEmpData();
	
	equal(emp1.$links.$details.$url, "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('36613838-3035-6463-2d32-6532302d3131')", "should apply templates");
	equal(emp1.$title, "Employee Alexis Coudeyras with id 36613838-3035-6463-2d32-6532302d3131", "should work with multiples values");
	emp1.$uuid = "AZEAZE";
	equal(emp1.$links.$details.$url, "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('AZEAZE')", "should be dynamic templates");
	equal(emp1.$links.$details.$url, "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('AZEAZE')", "should work with arrays");
	equal(emp1.address.description, "341 rue de la villette 02200 vauxbuin France", "should work with sub properties, when some of them are on obj an others on proto");
	equal(emp1.childTitle, "Has child Jim", "should work with arrays");
	emp1.childTitle = "Has child {child[1].firstName}";
	equal(emp1.childTitle, "Has child ", "shoud always return empty string if expression returns nothing");
	emp1.childTitle = "Has child {childs[3].firstName}";
	equal(emp1.childTitle, "Has child ", "shoud always return empty string if expression returns nothing");
	equal(emp1.$links.address.$url, "http://www.google?geoloc=341 rue de la villette 02200 vauxbuin France", "template should be able to contains properties that contains templates");
	
});

test("test modifications on proto and on object", function() {
	var proto = helpers.object.clone(employeeProto, true);
	var emp1 = _getEmpData(proto);
	var emp2 = _getEmpData(proto);

	strictEqual(emp1.title, 1, "init test");
	strictEqual(emp2.title, 1, "init test");
	emp1.title = 2;
	notEqual(emp1.title, emp2.title, "when changing one child, do not affect the other child");	
	strictEqual(emp1.$actions.$save.$title, emp2.$actions.$save.$title, "init test");	
	emp1.$actions.$save.$title = "Enregistrer";

	notEqual(emp1.$actions.$save.$title, emp2.$actions.$save.$title, "when changing a sub property of one child, do not affect the other child");
	proto.$actions.$save.$title = "Enregistrer";
	equal(emp1.$actions.$save.$title, emp2.$actions.$save.$title, "when modifying proto, should impact childs");
	emp1.childs[0].firstName = "Jérémy";
	notEqual(emp1.childs[0].firstName, emp2.childs[0].firstName, "with arrays when changing one child, do not affect the other child");
});

test("with arrays ($item)", function() {
	var proto = helpers.object.clone(employeeProto, true);
	var emp1 = _getEmpData(proto);
	var emp2 = _getEmpData(proto);
	var childs1 = emp1.childs;
	equal(childs1[0].firstName, "Bob", "init test");
	equal(childs1[0].fullName, "Bob Simon", "should merge with $item in proto");
	equal(childs1[1].fullName, "Jim Kennedy", "should merge with $item in proto");
	//Changes
	childs1[0].firstName = "Billy"
	equal(childs1[0].fullName, "Billy Simon", "should accept changes on child an refresh template");
	equal(childs1[1].fullName, "Jim Kennedy", "changes should not affect other childs");
	
	//Override template by value
	childs1[0].fullName = "Titi"
	equal(childs1[0].fullName, "Titi", "template should allow override by value");
	equal(childs1[1].fullName, "Jim Kennedy", "override should not affect other childs");
	
	emp1 = _getEmpData(proto);
	equal(emp1.childs[0].fullName, "Bob Simon", "should merge with $item in proto");
	var newChild = {
		"$uuid" : "78901238-3035-6463-2d32-6532302d3131",
		"firstName" : "Tim",
		"lastName" : "Robinson"
	};
	equal(newChild.fullName, undefined, "no fullName in original object");
	var len = emp1.childs.push(newChild);
	equal(len, 3, "push should return the new length");
	equal(emp1.childs.length, 3, "should have added childs in array");
	equal(emp1.childs[2].fullName, "Tim Robinson", "should work when adding stuff to array");
	equal(newChild.fullName, "Tim Robinson", "original object is now a proxy");

	emp1 = _getEmpData(proto);
	emp1.childs[2] = {
		"$uuid" : "78901238-3035-6463-2d32-6532302d3131",
		"firstName" : "Tim",
		"lastName" : "Robinson"
	}
	equal(emp1.childs[2].fullName, "Tim Robinson", "should work when adding stuff to array");
	
});

test("with resource values", function() {
	var emp1 = _getEmpData();	
	equal(emp1.$properties.country.$lookup.$url, "http://localhost:8124/sdata/sprint1/settings/sprint1/countriesDiff", "should preserve values and subvalues");
});

test("change handling", function() {
	var emp1 = _getEmpData();
	var emp2 = _getEmpData();
	
	equal(emp1.$links.$details.$url, "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('36613838-3035-6463-2d32-6532302d3131')", "init test");
	emp1.$links.$details.$url = "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('{firstName}')";
	equal(emp1.$links.$details.$url, "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('Alexis')", "should refresh when changing template");
	emp1.$links.$details.$url = "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('NOTEMPLATE')";
	equal(emp1.$links.$details.$url, "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('NOTEMPLATE')", "should work when replacing template value with non template value");
	emp1.$links.$details.$url = "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('NOTEMPLATE2')";
	equal(emp1.$links.$details.$url, "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('NOTEMPLATE2')", "should work with two updates on same property (cache)");
	emp1.$links.$details.$url = "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('NOTEMPLATE3')";
	emp1.$links.$details.$url = "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('NOTEMPLATE4')";
	equal(emp1.$links.$details.$url, "http://localhost:8124/sdata/sprint1/settings/sprint1/employees('NOTEMPLATE4')", "should work with two updates with no read on same property (cache)");
});

test("change handling with objects", function() {
	emp1 = _getEmpData();
	equal(emp1.$links.address.$url, "http://www.google?geoloc=341 rue de la villette 02200 vauxbuin France", "init test");
	emp1.address = {
		"num" : "12",
		"street" : "rue du pont",
		"city" : "paris",
		"postalCode" : "75017",
		"test" : "test {address.city}"
	};
	TESTON = true;
	equal(emp1.address.num, "12", "should be able to replace a full object");	
	TESTON = false;
	
	equal(emp1.address.test, "test paris", "should be able to replace a full object with templates properties");	
	equal(emp1.$links.address.$url, "http://www.google?geoloc=12 rue du pont 75017 paris France", "template should keep shorking");
	
});

test("with added properties by default (not in proto, not in resource) like $diagnoses", function() {
	var emp1 = _getEmpData();
	var emp2 = _getEmpData();
	
	strictEqual(emp1.$properties.firstName.$diagnoses, undefined, "undefined by default");
	//setting value
	emp1.$properties.firstName.$diagnoses = [{ "severity": "warning", "message": "order date cannot be after shipping date" }];
	equal(emp1.$properties.firstName.$diagnoses.length, 1, "when setted should contains value");
    equal(emp1.$properties.firstName.$diagnoses[0].severity, "warning", "when setted should contains value");
	strictEqual(emp2.$properties.firstName.$diagnoses, undefined, "should not pollute other childs");
	strictEqual(employeeProto.$properties.firstName.$diagnoses, undefined, "should not pollute proto")
	
	emp1.$properties.firstName.$diagnoses.push({ "severity": "error", "message": "not found" });
	equal(emp1.$properties.firstName.$diagnoses.length, 2, "should work");
    equal(emp1.$properties.firstName.$diagnoses[0].severity, "warning", "should work");
	strictEqual(employeeProto.$properties.firstName.$diagnoses, undefined, "should not pollute proto")
	
	delta = helpers.object.clone(employeesDelta.$resources[0], true);
	delta2 = helpers.object.clone(delta, true);
	delta.$properties.firstName = {};
	delta.$properties.firstName.$diagnoses = [{ "severity": "info", "message": "just an info" }];
	emp1 = methodForMerging(delta, employeeProto);
	emp2 = methodForMerging(delta2, employeeProto);
	equal(emp1.$properties.firstName.$diagnoses.length, 1, "when already setted in resource, should find it");
    equal(emp1.$properties.firstName.$diagnoses[0].severity, "info", "when already setted in resource, should find it");
	strictEqual(emp2.$properties.firstName.$diagnoses, undefined, "should not pollute other childs");
	emp1.$properties.firstName.$diagnoses.push({"severity" : "nothing", "message" : "nothing"});
	equal(emp1.$properties.firstName.$diagnoses.length, 2, "when already setted in resource, should find it");
	equal(emp1.$properties.firstName.$diagnoses[1].severity, "nothing", "when already setted in resource, should find it");
	strictEqual(emp2.$properties.firstName.$diagnoses, undefined, "should not pollute other childs");
	emp1.$properties.firstName.$diagnoses = undefined;
	strictEqual(emp1.$properties.firstName.$diagnoses, undefined, "should able to set it to undefined")

});

*/