"use strict";
var config = require('config'); // must be first syracuse require
var tracer = console.log;
var formatter = require("syracuse-ui/lib/field/helpers/format");


var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});
asyncTest("test simple format ", function(_) {

	// case with empty value
	var value = formatter.format("", 'K:2A', "application/x-string");
	strictEqual(value, "", "don't format empty value, value='' format=K:2A res=" + value);
	// case with empty format
	value = formatter.format("test", '', "application/x-string");
	strictEqual(value, "test", "no format defined, value=test format=K:2A res=" + value);

	// case with empty type
	value = formatter.format("test", 'K:2A', "");
	strictEqual(value, "test", "no type defined, value=test format=K:2A res=" + value);

	// case with another type that is not taken in account
	value = formatter.format("test", 'K:2A', "test");
	strictEqual(value, "test", "case with another type that is not taken in account, value=test format=K:2A res=" + value);

	// case with asking upper value to a string
	value = formatter.format("test", 'K:4A', "application/x-string");
	strictEqual(value, "TEST", "format the to uppercase, value=test format=K:4A res=" + value);

	// case with asking upper value to a string
	value = formatter.format("TEST", 'K:4a', "application/x-string");
	strictEqual(value, "test", "format the to lowervase, value=TEST format=K:4a res=" + value);

	// value longer than format
	try {
		value = formatter.format("test", 'K:2A', "application/x-string");
		ok(false, "exception raised test is longer that format defined, value=test format=K:2A res=" + value);
	} catch (e) {
		strictEqual(e.message, "value is too long regarding field format", "exception raised test is longer that format defined exp=" + e.message);

	}
	// format longer is greater than string value
	value = formatter.format("test12", 'K:7B', "application/x-string");
	strictEqual(value, "TEST12", "value shorter than format and contain digit, value=test12 format=K:7B res=" + value);


	//parse
	try {
		value = formatter.format("test12", 'K:7A', "application/x-string");
		ok(false, "exception raised test12");
	} catch (e) {
		strictEqual(e.message, "value doesn't match field format or type", "value shorter than format and contain digit but contains digit exp=" + e.message);
	}


	// test format that contain multiple elements B,b,A,a
	value = formatter.format("TE12aefa1", 'K:4b2A3B', "application/x-string");
	strictEqual(value, "te12AEFA1", "test more complexe format that include B, A, b and a , value=TE12aefa1 format=K:4b2A3B res=" + value);

	// multiple elment with too long value
	try {
		value = formatter.format("TE12aefa1abcaba", 'K:4b2A3B', "application/x-string");
		ok(false, "exception raised TE12aefa1abcaba");
	} catch (e) {
		strictEqual(e.message, "value is too long regarding field format", "exception raised test is too long and multiple format A and B define exp=" + e.message);
	}


	// with unkown format
	value = formatter.format("test", 'K:4X', "application/x-string");
	strictEqual(value, "test", "with unknown format, value=test format=K:4X res=" + value);

	// with known and unkown format and valid string for known format
	value = formatter.format("testabcde123A1", 'K:4X5A3#2b', "application/x-string");
	strictEqual(value, "testABCDE123a1", "with unknown format and known format and valid string for kown format, value=testabcde123A1 format=K:4X5A3#2b res=" + value);

	//with know and unkown format and some string that are invalid regarding the forma t
	try {
		value = formatter.format("testabcde123A1", 'K:4X5A3#2a', "application/x-string");
	} catch (e) {
		strictEqual(e.message, "value doesn't match field format or type", "with know and unkown format and some string that are invalid regarding the format exp=" + e.message);
	}

	// without k and without digit in the format
	value = formatter.format("t2A3", 'ABab', "application/x-string");
	strictEqual(value, "T2a3", "without k and without digit in the format, value=t2A3 format=ABab res=" + value);

	start();
});



asyncTest("test super format ", function(_) {

	// case with empty value
	var value = formatter.format("t12est12", 'K:8c', "application/x-string", {
		'c': {
			chars: ['A', 'B']
		}
	});
	strictEqual(value, "T12EST12", "format super type, value='t12est12' format=K:8c res=" + value);

	var formatExt = {
		c: {
			chars: ["A", "#"],
			stdType: ["-", "/", "_"]
		},
		d: {
			chars: ["c"],
			stdType: ["*", '$', '?', '\%']
		},
		e: {
			chars: ["c"],
			stdType: ["_"]
		},
		f: {
			chars: ["d"],
			stdType: ["~"]
		},
		u: {
			chars: ["B"],
			stdType: ["_"]
		},
		v: {
			chars: ["u"],
			stdType: ["-"]
		}
	};
	value = formatter.format('ddd', 'K:3c', "application/x-string", formatExt);
	strictEqual(value, "DDD", "format super type, value='ddd' format=K:3c res=" + value);

	value = formatter.format('d-d', 'K:3c', "application/x-string", formatExt);
	strictEqual(value, "D-D", "format super type, value='d-d' format=K:3c res=" + value);

	value = formatter.format('abc', 'K:3c', "application/x-string", formatExt);
	strictEqual(value, "ABC", "format super type, value='ABC' format=K:3c res=" + value);

	value = formatter.format('2-bc', 'K:4c', "application/x-string", formatExt);
	strictEqual(value, "2-BC", "format super type, value='2-bc' format=K:4c res=" + value);

	try {
		value = formatter.format('A-bC2', 'K:3c', "application/x-string", formatExt);
		ok(false, "format super type, value='A-bC2' format=K:3c res=" + value);
	} catch (e) {
		strictEqual(e.message, "value is too long regarding field format", "exception raised  format super type, value='A-bC2' format=K:3c res=" + e.message);
	}


	value = formatter.format('2/_', 'K:3c', "application/x-string", formatExt);
	strictEqual(value, "2/_", "format super type, value='2/_' format=K:3c res=" + value);


	value = formatter.format('222', 'K:3c', "application/x-string", formatExt);
	strictEqual(value, "222", "format super type, value='222' format=K:3c res=" + value);

	value = formatter.format('2Z2', 'K:3c', "application/x-string", formatExt);
	strictEqual(value, "2Z2", "format super type, value='2Z2' format=K:3c res=" + value);

	value = formatter.format('2-2', 'K:3c', "application/x-string", formatExt);
	strictEqual(value, "2-2", "format super type, value='2-2' format=K:3c res=" + value);

	/*value = formatter.format('A2/3-?3P_*_~Z2E__Z-','K:[c=\']3c[\' - d=\']3d[\' - e=\']3e[\'- f=\']4f[\' - u=\']3u[\' - v=\']3v[\']', formatExt);
	strictEqual(value,'c=\'A2/\' - d=\'3-?\' - e=\'3P_\'- f=\'*_~Z\' - u=\'2E_\' - v=\'_Z-\'',"format super type, value='A2/3-?3P_*_~Z2E__Z-' format=K:3c res="+value)
	*/
	start();
});

asyncTest("stop", 0, function(_) {
	doStop = true;
	start();
});