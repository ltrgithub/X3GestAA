"use strict";
var config = require('config'); // must be first syracuse require
var _map = require("syracuse-ui/lib/tests/pages/map").map;
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var _phantom = require("syracuse-phantomjs");
var tracer = console.log;
var mongodb = require('mongodb');
var testData = require('../fixtures/testContract');
var testEndPoint = testData.endpoint;

var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var _serverUrl = "http://localhost:" + port;
var _path = "/syracuse-main/html/main.html?url=";

testEndPoint.datasets = {
	test: {
		driver: "mongodb",
		database: "test",
		hostname: "localhost",
		port: config.collaboration.port || 27017
	}
};
config.sdata.endpoints.push(testEndPoint);
var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var _phantomInstance;



asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(testEndPoint.datasets.test.hostname, testEndPoint.datasets.test.port, {});
	var db = adminTestFixtures.newMongoDb(testEndPoint.datasets.test.database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	db = adminTestFixtures.initializeTestEnvironnement(_);
	ok(db != null, "Environnement initialized");
	start();
});


function _openPage($menu) {
	asyncTest("launch all ui test page " + $menu.$title, function(_) {
		ok(true, $menu.$title);
		_phantomInstance = _phantom.create(_);

		var page = _phantomInstance.createPage(_);
		// test grid
		var $url = _serverUrl + _path + encodeURIComponent($menu.$url);
		var status = page.open($url, {
			headers: {
				Authorization: adminTestFixtures.makeBasicAuthorizationToken("admin", "admin")
			}
		}, _);
		strictEqual(status, "success", "Page open success " + $url);
		var units = page.evaluate(function() {
			return syra_site && syra_site.mainPage.runUnits();
		}, _);

		units &&
			units.forEach(function(unit) {
				if (unit.assertResult) {
					unit.assertResult.forEach(function(assert) {
						strictEqual(assert.success, true, assert.message);
					});
				}
			});
		page.close();
		_phantomInstance.exit(_);
		start();
	});
}


for (var ii = 0; ii < _map.length; ii++) {
	var group = _map[ii];
	if (group.$menus) {
		for (var mm = 0; mm < group.$menus.length; mm++) {
			var $menu = group.$menus[mm];
			$menu.$hasUnitTest && _openPage($menu);
		}
	}
}
/*
 _map.forEach(function(group){
 group.$menus &&
 group.$menus.forEach(function($menu){
 $menu.$hasUnitTest && _openPage($menu);
 });
 });
 */
asyncTest("stop", 0, function(_) {

	doStop = true;
	start();
}); // Dummy comment to clean up rollout repository #6948