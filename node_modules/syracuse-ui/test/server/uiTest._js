"use strict";
var config = require('config'); // must be first syracuse require
var _map = require("syracuse-ui/lib/tests/pages/map").map;
var testAdmin = require('@sage/syracuse-core').apis.get('test-admin');
var _phantom = require("syracuse-phantomjs");
var tracer = console.log;
var mongodb = require('mongodb');
var testData = require('../fixtures/testContract');
var testEndPoint = testData.endpoint;

var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var _serverUrl = "http://localhost:" + port;
var _path = "/syracuse-main/html/main.html?url=";

testEndPoint.datasets = {
	test: {
		driver: "mongodb",
		database: "test",
		hostname: "localhost",
		port: config.collaboration.port || 27017
	}
};
config.sdata.endpoints.push(testEndPoint);
QUnit.module(module.id, {
	setup: function() {}
});

var _phantomInstance;

// skip the test if not enabled by config
if (config.unit_test && config.unit_test.suppress && config.unit_test.suppress.uiTest) {
	it('TESTS SKIPPED: module is suppressed in nodelocal.js', function() {});
} else {
	it('init database', function(_) {
		var server = new mongodb.Server(testEndPoint.datasets.test.hostname, testEndPoint.datasets.test.port, {});
		var db = testAdmin.newMongoDb(testEndPoint.datasets.test.database, server, {});
		db = db.open(_);
		db.dropDatabase(_);
		db = testAdmin.initializeTestEnvironnement(_);
		ok(db != null, "Environnement initialized");
		_phantomInstance = _phantom.create(_);
		ok(_phantomInstance != null, "Created phantom proxy");
	});


	function _openPage($menu) {
		it("launch all ui test page " + $menu.$title, function(_) {
			ok(true, $menu.$title);

			var page = _phantomInstance.createPage(_);
			// test grid
			var $url = _serverUrl + _path + encodeURIComponent($menu.$url);
			var status = page.openWait($url, {
				headers: {
					Authorization: testAdmin.makeBasicAuthorizationToken("admin", "admin")
				}
			}, _);
			strictEqual(status, "success", "Page open success " + $url);
			var units = page.evaluate(function() {
				return syra_site && syra_site.mainPage.runUnits();
			}, _);

			units &&
				units.forEach(function(unit) {
					if (unit.assertResult) {
						unit.assertResult.forEach(function(assert) {
							strictEqual(assert.success, true, assert.message);
						});
					}
				});
			page.close(_);
		});
	}


	for (var ii = 0; ii < _map.length; ii++) {
		var group = _map[ii];
		if (group.$menus) {
			for (var mm = 0; mm < group.$menus.length; mm++) {
				var $menu = group.$menus[mm];
				$menu.$hasUnitTest && _openPage($menu);
			}
		}
	}
	/*
     _map.forEach(function(group){
     group.$menus &&
     group.$menus.forEach(function($menu){
     $menu.$hasUnitTest && _openPage($menu);
     });
     });
     */
	it('stop', function(_) {
		try {
			_phantomInstance.exit(_);
			_phantomInstance = null;
			ok(true, "Deleted phantom proxy");
		} catch (ex) {
			// killing phantom does not always work - test should not fail because of this
			console.error(ex.stack);
			ok(true, "Phantom kill failed (ignored)");
		}
	}); // Dummy comment to clean up rollout repository #6948
}