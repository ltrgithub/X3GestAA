"use strict";

var config = require('config'); // must be first syracuse require
var helpers = require('@sage/syracuse-core').helpers;
var sys = require("util");

var phantom = require("syracuse-phantomjs");
var mongodb = require('mongodb');

var testAdmin = require('@sage/syracuse-core').apis.get('test-admin');

var tracer = console.log;

var testData = require('../fixtures/testContract');
var testEndPoint = testData.endpoint;

testEndPoint.datasets = {
	test: {
		driver: "mongodb",
		database: "test",
		hostname: "localhost",
		port: config.collaboration.port || 27017
	}
};
config.sdata.endpoints.push(testEndPoint);


import {
	assert
} from 'chai';
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {

	var port = (config.unit_test && config.unit_test.serverPort) || 3004;
	var serverUrl = "http://localhost:" + port;
	var sdataUrl = "/sdata/unit_test/ui/test";
	var baseUrl = serverUrl + sdataUrl;

	var db;
	it('init database', function(_) {
		//
		var server = new mongodb.Server(testEndPoint.datasets.test.hostname,
			testEndPoint.datasets.test.port, {});
		db = testAdmin.newMongoDb(testEndPoint.datasets.test.database,
			server, {});
		db = db.open(_);
		db.dropDatabase(_);
		//
		db = testAdmin.initializeTestEnvironnement(_);
		ok(db != null, "Environnement initialized");

	});

	var cookie;
	var parent1;
	var propUrl;
	it('data setup', function(_) {
		cookie = testAdmin.getCookie(_, serverUrl, "admin", "admin");
		//
		parent1 = testAdmin.post(_, cookie, baseUrl + "/parentEntities", {
			code: "test_code",
			children: [{
				code: "child1",
				children: [{
					code: "sub_child1"
				}]
			}]
		}, 201);
		testAdmin.post(_, cookie, serverUrl + parent1.$shortUrl + "/children('" + parent1.children[0].$uuid + "')/children('" + parent1.children[0].children[0].$uuid + "')/binProp", {
			test: 1
		}, 204, false, {
			"x-file-name": "testFile.txt"
		});
		var body = testAdmin.get(_, cookie, serverUrl + parent1.$shortUrl + "?representation=parentEntity.$details", 200);
		propUrl = serverUrl + parent1.$shortUrl + "/children('" + parent1.children[0].$uuid + "')/children('" + parent1.children[0].children[0].$uuid + "')/binProp";
		body = testAdmin.get(_, cookie, propUrl, 200);
		//    console.log("body", sys.inspect(body, null, 4));

	});

	it('open page with nocompress=false', function(_) {
		var ph = phantom.create(_);
		var page = ph.createPage(_);
		// open
		var status = page.openWait(serverUrl + "/syracuse-main/html/main.html?url=" + encodeURIComponent(parent1.$shortUrl + "?representation=parentEntity.$details"), {
			headers: {
				Authorization: testAdmin.makeBasicAuthorizationToken("admin", "admin")
			}
		}, _);
		strictEqual(status, "success", "Page open success");

		var binPropProtoUrl = page.evaluate(function() {
			return syra_site && syra_site.mainPage.$prototype.$properties.children.$item.$properties.children.$item.$properties.binProp.$url;
		}, _);
		strictEqual(binPropProtoUrl, "{$shortUrl}/binProp", "Binary property prototype ok");
		// load cards
		page.evaluate(function() {
			var $$actBtn = $("a.s-grid-rowcard-btn");

			// trigger click event
			var e = document.createEvent('MouseEvents');
			e.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
			$$actBtn[0].dispatchEvent(e);
		}, _);
		// find the link, check the url
		var url = page.evaluate(function() {
			var $$link = $("a.s-inplace-file-link");

			return $$link[0].href;
		}, _);
		strictEqual(url, propUrl, "Expected prop url ok");
	});
}); // Dummy comment to clean up rollout repository #6948