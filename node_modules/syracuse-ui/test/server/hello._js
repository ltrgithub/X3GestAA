"use strict";

var helpers = require('@sage/syracuse-core').helpers;
var testAdmin = require('@sage/syracuse-core').apis.get('test-admin');
var locale = require('streamline-locale');
var phantom = require("syracuse-phantomjs");
var path = require("path");

var config = require('config'); // must be first syracuse require
var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseUrl = "http://localhost:" + port;

const assert = require('chai').assert;
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {

	var db;
	var ep;
	var phOptions = {};

	it('Init database', function(_) {
		locale.setCurrent(_, "en-us");
		//
		db = testAdmin.initializeTestEnvironnement(_);
		ok(db != null, "Environnement initialized");
		//
	});

	it('Simple load', function(_) {
		// create phantom instance
		var ph = phantom.create(_, phOptions);

		// open page with phantom
		var page = ph.createPage(_);
		var status = page.open(baseUrl, {}, _);

		// assertion on successfull connection
		strictEqual(status, "success", "Success");

		ph.exit(_);

	});


	it('Load with cookie', function(_) {

		var cookie = testAdmin.getCookie(_, baseUrl);

		// create phantom instance
		var ph = phantom.create(_, phOptions);

		// add cookie for authentication purposes
		ph.addCookie(cookie, _);

		// open page with phantom
		var page = ph.createPage(_);
		var status = page.open(baseUrl, {}, _);

		// assertion on successfull connection
		strictEqual(status, "success", "Success");

		ph.exit(_);

	});


	it("Load applications query page and click on 'New Application' action", function(_) {

		// /!\ LOCALE IS fr-FR

		var cookie = testAdmin.getCookie(_, baseUrl);

		// create phantom instance
		var ph = phantom.create(_, phOptions);

		// phantom error handler
		ph.onError = function(msg, trace) {
			var msgStack = ['PHANTOM ERROR: ' + msg];
			if (trace && trace.length) {
				msgStack.push('TRACE:');
				trace.forEach(function(t) {
					msgStack.push(' -> ' + (t.file || t.sourceURL) + ': ' + t.line + (t.function ? ' (in function ' + t.function+')' : ''));
				});
			}
			console.error(msgStack.join('\n'));
			ph.exit(function(err) {
				if (err) throw err;
			});
		};

		// handle cookies
		//ph.set("cookiesEnabled", true, _);
		//console.log("ph.cookiesEnabled : " + ph.get("cookiesEnabled",_));
		// build cookie as JSON
		//var phCookies = [];
		/*for (var ii=0,jj=cookie.length; ii<jj; ii++){
			var arr = cookie[ii].split(";");
			var cook = {};
			for (var mm=0,pp=arr.length; mm < pp; mm++){
				var cc = arr[mm].split("=");
				if (cc[0] !== ""){
					if(cc[0].trim().toLowerCase() === "syracuse.sid.3004" || cc[0].trim().toLowerCase() === "client.id"){
						cook.name = cc[0];
						cook.value = cc[1];
						cook.domain = "localhost:3004";
					}
					else{
						cook[cc[0].trim().toLowerCase()] = cc.length > 1 ? cc[1] : true;
					}
				}
			}
			phCookies.push(cook);
		}*/

		// open page with phantom
		var page = ph.createPage(_);

		// set custom header. add Authorization
		var token = "admin:admin";
		token = new Buffer(token, "utf8").toString("base64");
		ph.set("customHeaders", {
			"Authorization": "Basic " + token
		}, _);
		//console.log("page customHeaders: " + JSON.stringify(page.get("customHeaders",_),undefined,4));


		// handlers for page event (load start, load finish, console message, error)
		page.onConsoleMessage = function(msg) {
			console.log(msg);
		};
		page.onLoadFinished = function(status) {
			console.log('Load Finished: ' + status);
		};
		page.onLoadStarted = function() {
			console.log('Load Started');
		};
		page.onError = function(msg, trace) {
			var msgStack = ['ERROR: ' + msg];

			if (trace && trace.length) {
				msgStack.push('TRACE:');
				trace.forEach(function(t) {
					msgStack.push(' -> ' + t.file + ': ' + t.line + (t.function ? ' (in function "' + t.function+'")' : ''));
				});
			}

			console.error(msgStack.join('\n'));
		};

		/*page.onInitialized = function () {
			console.log("page initialized");
			var self = this;
		    page.evaluate(function () {
		        console.log("PhantomJS sets window in onInitialized: " + window);
		        window.phantomLoadStarted = {
		        	onLoadMainPage : function(syraPage){
		        		//self 
		        		console.log("syraPage : " + syraPage);
		        	}
		        };
		        console.log("after set window");
		    });
		};*/

		// handlers for request/response events
		/*page.onResourceRequested = function (req) {
        console.log('requested: ' + JSON.stringify(req, undefined, 4));
    };

    page.onResourceReceived = function (res) {
        console.log('received: ' + JSON.stringify(res, undefined, 4));
    };*/


		// open 'list of applications' page
		// /!\ Domain 'localhost' and port '3004'
		var status = page.open(baseUrl + "/syracuse-main/html/main.html?url=/sdata/syracuse/collaboration/syracuse/applications?representation=application.$query", {}, _);

		console.log("status: " + status);


		// timeout in order to wait end of load page (ajax requests can't be caught)
		//setTimeout(_,20000);

		// apply dom actions. trigger click on 'new application' button
		var res = page.evaluate(function() {
			console.log("Evaluate that returns document.title");

			window.phantomLoadStarted = {
				onLoadMainPage: function(syraPage) {
					//self 
					console.log("syraPage : " + syraPage);
				}
			};

			// get 'new application' button		
			var $$actBtn = $('a[title="Nouvelle application"]');

			// trigger click event
			var e = document.createEvent('MouseEvents');
			e.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
			$$actBtn[0].dispatchEvent(e);

			//console.log("window.phantom:" + window.phantom);

			// return page title
			return document.title;
		}, _);


		console.log("res value: " + res);


		// wait loading of page after click
		setTimeout(_, 20000);

		var newRes = page.evaluate(function() {
			// return new page title
			return document.title;
		}, _);


		console.log("newRes value: " + newRes);

		// wrapper ...
		/*var st = (function waitLoad(cb) {
			page.onLoadFinished = function(st) {
				console.log("inside waitLoad");
		    	cb(null, st);
			};
			//console.log("res:" + res);
			// click btn
			//page.sendEvent('click',res.offsetLeft, res.offsetTop, 'left', _);

			cb(null,"success");
			//res.click();
		})(_);
		console.log("waitLoad status : " + st);*/



		// assertion on successfull connection
		strictEqual(status, "success", "Success");
	});
});