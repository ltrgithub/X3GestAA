"use strict";
/* global QUnit: false, ok: false, asyncTest: false, test: false, equal: false, strictEqual: false, same: false, start: false, stop: false */
var _url = require('syracuse-ui/lib/controller/url');

function MockSite() {
	window.syra_url = _url;
}

MockSite.prototype = {};

QUnit.module(module.id, {
	setup: function() {
		window.syra_site = window.syra_site || new MockSite();
	},
	teardown: function() {}
});

var host = "PO037285:5493",
	corsUrl = "/sdata/safex3/studio/-/$service/openInEditor?folder=SUPERV&server=aws-x3-devsup&port=17000&filename=SUBZEB.src&lang=FRA&ospwd=CRYPT:uvase&user=ERBOU&pwd=9B8E36ADE34FAD4002A67E5C&osuser=erbou&iver=1.6.2.r120-v20100330-1426";

// http://localhost:8124/index.html

asyncTest("CORS request with callbacks", function() {
	// test("CORS request", function() {
	var failed;

	syra_ajax.sendCorsRequest({
		url: "https://github.com/",
		onreadystatechange: function(e) {
			console.log("onreadystatechange");
			// logXhr(this);
		},

		onloadstart: function(e) {
			console.log("onloadstart");
			// logXhr(this);
		},

		onprogress: function(e) {
			console.log("onprogress");
			// logXhr(this);
		},

		onabort: function(e) {
			console.log("onabort");
			// logXhr(this);
			failed = true;
			// start();
		},

		onerror: function(e) {
			console.log("onerror: status=" + this.status);
			// logXhr(this);
			failed = this.status && this.status != 200;
			// start();
		},

		onload: function(e) {
			console.log("onload");
			// logXhr(this);
		},

		ontimeout: function(e) {
			console.log("ontimeout");
			failed = true;
			// logXhr(this);
		},

		onloadend: function(e) {
			console.log("onloadend");
			// logXhr(this);
			ok(!failed, "CORS request succeeded");
			start();
		}
	});
});

function logXhr(xhr) {
	console.log('XHR status: ' + xhr.status);
	if ('statusText' in xhr) {
		// Firefox doesn't allow access to statusText when there's an error.
		console.log('XHR status text: ' + xhr.statusText);
	}

	var headers = xhr.getAllResponseHeaders();
	if (headers) {
		console.log('XHR exposed response headers: ' + headers);
	}

	var text = xhr.responseText;
	if (text) {
		try {
			// Log the details of the body.
			// If this is a request to the local test server, the response body will
			// be a JSON object containing the request and response HTTP details.
			var response = JSON.parse(text);
			console.log('text: ' + text.substring(0, 30) + "...");
			// for (var i = 0; i < response.length; i++) {
			//   var r = response[i];
			//   if (r['requestType'] == 'preflight') {
			//     this.logPreflight(r);
			//   } else {
			//     this.logCors(r);
			//   }
			// }
		} catch (e) {
			// Response was not JSON
			// Don't log the body.
		}
	}
}