"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CardViewDecorator = require("./cardViewDecorator").CardViewDecorator;
var GridRecord = require('./gridRecord').GridRecord;
var vgridHelper = require('./vgridHelper');

function GridBuilder(){
}

exports.GridBuilder = helpers.defineClass(GridBuilder, null, {
    initialize: function(){
        this.$defaultSkin = "s-" + this.list.$item.$format;
        this.RecordClass = GridRecord;
        this.list.$item.$isTopLabelAlignment = true;
    },
    parseItems: function(callback){
        var $fieldProperties = this.list.$fieldProperties;
        this.list.$item.$layout.$items.forEach(function($item){
            var $field = $fieldProperties[$item.$bind];
            if ($field && !$field.$isHidden && !$item.$isHidden) {
                callback($item, $field);
            }
        });
    },
    emptyBody: function(addEmptySlot, redraw){
        var self = this;
        if (self.list.$item.$format == "vgrid") {
            vgridHelper.emptyBody(self, addEmptySlot, redraw);
        }
        else {
            if (redraw) {
                this._makeTitleRow();
            }
            $(self._body).empty();
            if (addEmptySlot) {
                var emptySlot = document.createElement("td");
                emptySlot.className = this.list.$skin + "-empty-slot";
                emptySlot.setAttribute("colspan", self._orderCols.length);
                self._body.appendChild(document.createElement("tr")).appendChild(emptySlot);
            }
        }
    },
    _setBodyHeight: function(){
        if (this._bodySlot.style.overflowY != "auto") {
            this._bodySlot.style.overflowY = "auto";
        }
        var bodyHeight = this.list.$item.$fitContainer ? 0 : this._$fixedBodyHeight;
        if (!bodyHeight) {
            this._containerHeight = this.list.$$container[0].offsetHeight - ((this.list.$$item.outerHeight() - this.list.$$item.height()));
            bodyHeight = this._containerHeight - (this._$$bodySlot.offset().top - this.list.$$container.offset().top) - this._hscroller.offsetHeight;
        }
        bodyHeight = Math.max(40, bodyHeight);
        if (Math.abs(bodyHeight - (this._$$bodySlot.height())) < 2) {
            bodyHeight = this._$$bodySlot.height();
        }
        this._bodySlot.style.height = bodyHeight + "px";
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if ((metaData.$fixedBodyHeight !== undefined) || (metaData.$fitContainer !== undefined)) {
            this.list.$item.$fixedBodyHeight = metaData.$fixedBodyHeight;
            this.list.$item.$fitContainer = metaData.$fitContainer;
            this._$fixedBodyHeight = parseInt(this.list.$item.$fixedBodyHeight || 0, 10);
            this.onWindowResize();
        }
        if (onAuthoring) {
            if (metaData.$graphMode !== undefined) {
                this._toggleDataList(metaData.$graphMode != "graph");
            }
            if (metaData.$cardsWidth !== undefined) {
                this.list.$item.$cardsWidth = metaData.$cardsWidth;
            }
            if (metaData.$cards !== undefined || metaData.$cardsPosition !== undefined) {
                if (metaData.$cards !== undefined) {
                    this.list.$item.$cards = metaData.$cards;
                }
                if (metaData.$cardsPosition !== undefined) {
                    this.list.$item.$cardsPosition = metaData.$cardsPosition;
                }
                if (this.cardview) {
                    this.cardview.release();
                }
                this.list.reloadBuilder();
            }
            if (metaData.$cardsWidth !== undefined) {
                if (this.cardview) {
                    this.cardview._cardSlot.style.width = this.list.$item.$cardsWidth + "%";
                }
            }
        }
    },
    _toggleDataList: function(show){
        if (this._tableBody) {
            this._tableBody.style.display = show ? "" : "none";
        }
        else {
            this._orderCols = [];
            this.cols = {};
            this._headSlot = document.createElement("div");
            this._headSlot.className = this.list.$skin + "-slot-head";
            this._headTable = document.createElement("table");
            this._headTable.style.display = "none";
            this._headTable.className = this.list.$skin + "-table-head";
            this._headTable.setAttribute("cellspacing", "0");
            this._headTable.setAttribute("cellpadding", "0");
            this._headSlot.appendChild(this._headTable);
            
            this._hscroller = document.createElement("div");
            this._hscroller.className = this.list.$skin + "-h-scroll";
            this._hscroller.appendChild(this._hscrollBody = document.createElement("div"));
            this._hscrollBody.className = this.list.$skin + "-h-scroll-body";
            
            this._$$bodySlot = $(this._bodySlot = document.createElement("div"));
            this._bodySlot.className = this.list.$skin + "-slot-body";
            this._bodyTable = document.createElement("table");
            this._bodyTable.style.display = "none";
            this._bodyTable.className = this.list.$skin + "-table-body";
            this._bodyTable.setAttribute("cellspacing", "0");
            this._bodyTable.setAttribute("cellpadding", "0");
            this._bodySlot.appendChild(this._bodyTable);
            
            this.scrollLinks = document.createElement("div");
            this.scrollLinks.className = "s-list-scroll-links";
            document.site.setZIndex(this.scrollLinks);
            document.site.$$container[0].appendChild(this.scrollLinks);
            this.scrollLeftLink = document.createElement("a");
            this.scrollLeftLink.className = "s-list-scroll-left";
            this.scrollLinks.appendChild(this.scrollLeftLink);
            this.scrollRightLink = document.createElement("a");
            this.scrollRightLink.className = "s-list-scroll-right";
            this.scrollLinks.appendChild(this.scrollRightLink);
            
            this._bodyColgroup = this._bodyTable.appendChild(document.createElement("colgroup"));
            this._headColgroup = this._headTable.appendChild(document.createElement("colgroup"));
            this._thead = this._headTable.appendChild(document.createElement("thead"));
            this.list._core.appendChild(this._headSlot);
            this.list._core.appendChild(this._bodySlot);
            this.list._core.appendChild(this._hscroller);
            
            
            this.list._store.setSortCapability(true);
            
            this._$$body = $(this._body = this._bodyTable.appendChild(document.createElement("tbody")));
            
            this.list._store.loadSelector();
            this._makeTitleRow();
            this._headTable.style.display = "";
            this._bodySlot.style.visibility = "hidden";
            this._bindScrollEvent(true);
        }
    },
    onWindowResize: function(initialize){
        if (!this.disposed && this._bodySlot) {
            var self = this;
            delete self._maxCol;
            if (self.list.$item.$format == "grid") {
                if (!self._maxCol && self._bodySlot.clientWidth) {
                    self.widthTotal = 0;
                    self._maxCol = self._orderCols[0];
                    self._orderCols.forEach(function(col){
                        self.widthTotal += col.widthValue;
                        if (col.widthValue > self._maxCol.widthValue) {
                            self._maxCol = col;
                        }
                    });
                    if (self.widthTotal < (self._bodySlot.clientWidth)) {
                        self._maxCol.groupHead.style.width = self._maxCol.groupBody.style.width = ((self._$$bodySlot.width() - 1 - self.widthTotal) + self._maxCol.widthValue) + "px";
                    }
                }
                self._hscrollBody.style.width = self.widthTotal + "px";
            }
            if (self._bodySlot.scrollHeight > (self._bodySlot.clientHeight + 1)) {
                self._headSlot.style.marginRight = "17px";
            }
            else {
                self._headSlot.style.marginRight = ""
            }
            if (self._bodySlot.scrollWidth > (self._bodySlot.clientWidth + 1)) {
                self._hscroller.style.display = "";
                self._bodyOffset = self._$$bodySlot.offset();
            }
            else {
                self._hscroller.style.display = "none";
                delete self._bodyOffset;
            }
            if (self._$fixedBodyHeight || self.list.$item.$fitContainer) {
                self._setBodyHeight(initialize);
            }
            else {
                if (this._bodySlot.style.overflowY == "auto") {
                    this._bodySlot.style.overflowY = "";
                    this._bodySlot.style.height = "";
                }
            }
        }
    },
    _bindScrollEvent: function(bind){
        var self = this;
        if (bind) {
            self._hscroller.addEventListener("scroll", self._onHScroll = function(event){
                if (!self._scrollingDisable) {
                    self._scrollingDisable = true;
                    self._bodySlot.scrollLeft = self._headSlot.scrollLeft = self._hscroller.scrollLeft;
                    self._scrollingDisable = false;
                }
            }, false);
            self._bodySlot.addEventListener("scroll", self._onBodyScroll = function(event){
                if (!self._scrollingDisable) {
                    self._hscroller.scrollLeft = self._headSlot.scrollLeft = self._bodySlot.scrollLeft;
                    self._scrollingDisable = false;
                }
            }, false);
            /*
             self.list._core.addEventListener("mousemove", self._onBodyMouseMove = function(event){
             if (self._bodyOffset && !self._scrollingDisable) {
             self.scrollLinks.style.left = (self._bodyOffset.left - 20) + "px";
             self.scrollLinks.style.top = event.clientY + "px";
             
             // self.scrollLeftLink.style.display = "":"none";
             //self.scrollRightLink.style.display = "":"none";
             }
             }, false);
             self.list._core.addEventListener("mouseout", self._onBodyMouseOut = function(event){
             self.scrollLinks.style.display = "none";
             }, false);
             self.list._core.addEventListener("mouseover", self._onBodyMouseOver = function(event){
             if (self._bodyOffset && self.scrollLinks.style.display != "") {
             self.scrollLinks.style.display = "";
             }
             }, false);
             */
            self._headSlot.addEventListener("scroll", self._onHeadScroll = function(event){
                if (!self._scrollingDisable) {
                    self._hscroller.scrollLeft = self._bodySlot.scrollLeft = self._headSlot.scrollLeft;
                    self._scrollingDisable = false;
                }
            }, false);
        }
        else {
            if (self._hscroller && self._onHScroll) {
                self._hscroller.removeEventListener("scroll", self._onHScroll, false);
                delete self._onHScroll;
            }
            if (self._bodySlot) {
                if (self._onBodyScroll) {
                    self._bodySlot.removeEventListener("scroll", self._onBodyScroll, false);
                    delete self._onBodyScroll;
                }
                /*
                 if (self._onBodyMouseMove) {
                 self._bodySlot.removeEventListener("mousemove", self._onBodyMouseMove, false);
                 delete self._onBodyMouseMove;
                 }
                 if (self._onBodyMouseOut) {
                 self._bodySlot.removeEventListener("mouseout", self._onBodyMouseOut, false);
                 delete self._onBodyMouseOut;
                 }
                 if (self._onBodyMouseOver) {
                 self._bodySlot.removeEventListener("mouseover", self._onBodyMouseOver, false);
                 delete self._onBodyMouseOver;
                 }
                 */
            }
            if (self._headSlot && self._onHeadScroll) {
                self._headSlot.removeEventListener("scroll", self._onHeadScroll, false);
                delete self._onHeadScroll;
            }
        }
    },
    appendFieldCol: function(slot, $item, $field){
        var col = this.cols[$item.$bind] = this._appendCol();
        col.slot = slot;
        var title;
        if ($field.$capabilities && ($field.$capabilities.indexOf("sort") >= 0)) {
            title = this.list.sortCapability.appendSortLink(col, $item);
        }
        else {
            title = document.createElement("div");
            title.className = this.list.$skin + "-title-label";
        }
        var text = this.list.getLocalizedTitle($field.$title || "");
        $(title).text(text);
        title.setAttribute("title", text);
        
        col.titleCell.className = this.gridCss.title;
        col.titleCell.appendChild(title);
        slot.appendChild(col.titleCell);
        
        //set colgroup
        this.maxMinWidth = 0;
        var width = $item.$width || $field.$width;
        if (width) {
            col.groupHead.style.width = col.groupBody.style.width = width;
            col.widthValue = parseInt(width.replace("px", ""), 10);
        }
        else {
            var $width = document.site.getFieldWidth($field, this.list.$isEditMode);
            col.widthValue = $width.$width;
            if ($width.$charWidth) {
                col.widthValue = ($width.$charWidth * ($field.$maxLength || $width.$maxLength));
            }
        }
        col.widthValue = Math.max(40, col.widthValue);
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        col.groupBody.setAttribute("data-s-bind", $item.$bind);
        return col;
    },
    _makeTitleRow: function(){
        var self = this;
        self._orderCols = [];
        if (self.list.$item.$format == "vgrid") {
            vgridHelper.makeTitleRow(self);
        }
        else {
            if (self.titleRow) {
                $(self.titleRow).empty();
            }
            else {
                self.titleRow = self._thead.appendChild(document.createElement("tr"));
            }
            document.site.emptyDom(self._bodyColgroup);
            document.site.emptyDom(self._headColgroup);
            self.titleRow.style.display = self.list.$item.$isTitleRowHidden ? "none" : "";
            self.list.filterCapability.ensureQuickFilter();
            
            if (self.list.$item.$isRowIndexVisible) {
                self.list.filterCapability.appendEmptyCell();
                self._orderCols.push(this._appendRowIndexCol(self.titleRow));
            }
            
            if (self.cardview && self.cardview.$cardsPosition == "inline") {
                self.list.filterCapability.appendEmptyCell();
                self._orderCols.push(self._appendCardViewCol(self.titleRow));
            }
            if (!self.list.$item.$isMenuRecordHidden) {
                //contextmenu
                self.list.filterCapability.appendEmptyCell();
                self._orderCols.push(self._appendContextMenusCol(self.titleRow));
            }
            
            if (self.list._store.selector.appendToTitle) {
                self.list.filterCapability.appendFlagCell();
                self._orderCols.push(self._appendRecordSelectorCol(self.titleRow));
            }
            self.parseItems(function($item, $field){
                self._orderCols.push(self.appendFieldCol(self.titleRow, $item, $field));
                self.list.filterCapability.appendFieldCell($item, $field);
            });
        }
    },
    _appendCol: function(){
        return {
            titleCell: document.createElement("th"),
            groupBody: this._bodyColgroup.appendChild(document.createElement("col")),
            groupHead: this._headColgroup.appendChild(document.createElement("col"))
        };
    },
    _appendRowIndexCol: function(slot){
        var col = this.cols.$rowIndex = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        slot.appendChild(col.titleCell);
        col.widthValue = (this.list.$capability.reorder) ? 35 : 25;
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        return col;
    },
    _appendCardViewCol: function(slot){
        var col = this.cols.$cards = this._appendCol();
        col.groupHead.style.width = col.groupBody.style.width = (col.widthValue = 20) + "px";
        col.slot = slot;
        col.titleCell.className = this.gridCss.title + " s-list-cards-cell";
        var opener = document.createElement("a");
        opener.className = this.list.$skin + "-cardview-opener s-close";
        slot.appendChild(col.titleCell).appendChild(opener);
        return col;
    },
    _appendRecordSelectorCol: function(slot){
        var col = this.cols.$recordSelector = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        this.list._store.selector.appendToTitle(slot.appendChild(col.titleCell));
        col.widthValue = this.list._store.selector.getWidth();
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        return col;
    },
    _appendContextMenusCol: function(slot){
        var col = this.cols.$contextMenus = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        slot.appendChild(col.titleCell);
        col.$quickActions = {};
        col.widthValue = col.width = 0;
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        return col;
    },
    setContextMenusCol: function($quickAction, isRemoved){
        var col = this.cols.$contextMenus;
        if (isRemoved) {
            if (!$quickAction) {
                col.$quickActions = {};
                col.widthValue = col.width = 0;
                col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
            }
            else {
                if (col.$quickActions[$quickAction]) {
                    delete col.$quickActions[$quickAction];
                    col.widthValue = (col.width -= 17) + 4;
                    col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
                }
            }
        }
        else {
            if (!col.$quickActions[$quickAction]) {
                col.$quickActions[$quickAction] = true;
                col.widthValue = (col.width += 17) + 4;
                col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
            }
        }
    },
    ensureCardView: function(){
        var self = this
        var $arrayBinds = [];
        if (!self.list.$item.$cards) {
            self.parseItems(function($item, $field){
                if ($field) {
                    switch ($field.$type) {
                        case "application/x-array":
                        case "application/x-object":
                            if (!$field.$isHidden) {
                                if (self.list.$item.$cards) {
                                    $field.$isHidden = true;
                                }
                                else {
                                    $arrayBinds.push($item.$bind);
                                }
                            }
                            break;
                    }
                }
            });
            if ($arrayBinds.length > 0) {
                self.list.$item.$layout.$items = self.list.$item.$layout.$items.filter(function($item){
                    return $arrayBinds.indexOf($item.$bind) < 0;
                });
                self.list.$item.$cards = {
                    $layout: {
                        $layoutType: "tabs",
                        $items: $arrayBinds.map(function($bind){
                            return {
                                $category: "section",
                                $title: self.list.$fieldProperties[$bind].$title,
                                $layout: {
                                    $items: [{
                                        $bind: $bind,
                                        $isTitleHidden: true
                                    }]
                                }
                            
                            };
                        })
                    }
                };
            }
        }
        if (self.list.$item.$cards) {
            self.cardview = new CardViewDecorator();
            self.cardview.initialize(self);
        }
    },
    drawBuilder: function(){
        var $skin = this.list.$skin = this.list.$item.$skin || this.$defaultSkin;
        this.gridCss = {
            title: $skin + "-title-cell",
            cell: $skin + "-cell",
            rowIndex: $skin + "-cell " + $skin + "-row-index"
        };
        this.ensureCardView();
        this.list.applyDesignMetaData(this.list.$item, false);
        this.list.setState(this.list.$field);
        this.list.parseCapabilities(this.list.$prototype.$capabilities);
        this._toggleDataList(true);
        this.list.articleParent.bind(this.list, this.list.$item.$bind);
        this.list.applyCapabilities();
        this._bodyTable.style.display = "";
    },
    onAfterDataBinding: function(){
        if (this.cardview) {
            if (this.cardview.$cardsPosition != "inline" && Object.keys(this.list_store.selector.records).length == 0) {
                if (this.list._store._records.length > 0) {
                    this.list_store.selector.select(this.list._store._records[0].$uuid, true);
                }
            }
        }
    },
    dispose: function(){
        if (this.list && this.list._store && this.list.filterCapability) {
            this.list.filterCapability.removeQuickFilter();
        }
        this._bindScrollEvent(false);
        delete this.$layoutOptions;
        delete this.list;
    }
});
