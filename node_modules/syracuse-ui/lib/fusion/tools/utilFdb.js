"use strict";
var helpers = require('syracuse-core/lib/helpers');
var jQuery = $;
// Exports
exports.getTimer = function(start){
    return new _classTimer(start);
};
exports.log = function(){
    if (window.console) {
        var res = [];
        for (var i = 0; i < arguments.length; i++) {
            res.push(exports.formatJson(arguments[i]));
        }
        var args = [_getLogId.call(this) + res.join('\n')];
        if (window.console.log.apply) 
            window.console.log.apply(window.console, args);
        else 
            window.console.log(Array.prototype.slice.call(args));
    }
}
exports.logEx = function(options){
    var console = window.console, res = [], args, chanel = console ? console.log : null, toJson;
    if (console) {
        if (options && options.severety && console[options.severety]) {
            chanel = console[options.severety];
        }
        toJson = options && options.toJson;
        for (var i = 1; i < arguments.length; i++) {
            res.push(toJson ? exports.formatJson(arguments[i]) : arguments[i]);
        }
        args = _getLogId.call(this) + res.join(toJson ? '\n' : " # ");
        if (chanel.call) {
            chanel.call(console, args);
        }
        else {
            chanel(Array.prototype.slice.call(args));
        }
    }
}
function _getLogId() {
    return this._logId !== undefined ? "(" + this._logId + ") " : "";
}
exports.formatJson = function(o, replacer, space){
    return o != null ? JSON.stringify(o, replacer, space ? space : "   ") : o;
}
exports.formatInt = function(num, leading0){
    if (leading0 == null) 
        return num.toString();
    num = Math.round(num);
    while (num > Math.pow(10, leading0 + 1)) 
        num = parseInt(num / 10, 10);
    var res = "";
    for (var i = leading0; i >= 0; i--) {
        if (num < Math.pow(10, i)) 
            res += "0";
        else 
            break;
    }
    return res += num;
}
exports.err2Str = function(err, log){
    try {
        if (err == null) 
            return "Null error";
        if (_.isString(e)) 
            return e;
        if (_.isNumber(e)) 
            return e + "";
        if (_.isArray(e)) 
            return e.join('\n');
        if (e instanceof Error) {
            return _jsErr2Str(e);
        }
        else 
            if (e.type) {
                switch (err.type) {
                    case "ajax":{
                    }
                }
            }
    } 
    catch (f) {
    }
    var res = e.toString();
    if (log && console) 
        console.log(res);
    return res;
}
// Statics
function _parseFName(fname, indent){
    var res = [];
    if (fname) {
        indent = indent != null ? indent : "";
        fname = fname.replace(/[\n\\\/]/g, '$');
        fname = fname.split('$');
        for (var i = 0; i < fname.length; i++) {
            if (fname[i].toLowerCase().indexOf('.js') >= 0) {
                res.push(indent + fname[i]);
            }
        }
    }
    return res.join(res.length > 0 ? '\n' : '')
}

function _jsErr2Str(e){
    var props = ["message", "fileName", "lineNumber", "stack", "source"];
    var res = [];
    if (e.message != null) 
        res.push("message: " + e.message);
    if (e.fileName != null) 
        res.push("fileName: " + _parseFName(e.fileName));
    if (e.lineNumber != null) 
        res.push("lineNumber: " + e.lineNumber);
    if (e.stack != null) 
        res.push("stack:\n" + _parseFName(e.stack, "   "));
    if (e.source != null) 
        res.push("source:\n  " + e.source);
    for (var p in e) {
        if (p != null && p != "message" && p != "source" && p != "stack" && p != "fileName" && p != "lineNumber") {
            var x = e[p];
            if (x != null) {
                if (typeof x == "object") {
                    res.push("\n" + p + ":")
                    for (var q in x) {
                        var y = x[q];
                        if (y != null) {
                            res.push("\t" + q + ": " + y.toString())
                        }
                    }
                    res.push("\n")
                }
                else {
                    res.push(p + ": " + x.toString())
                }
            }
        }
    }
    return res.join('\n');
}

var _classTimer = helpers.defineClass(function Timer(start){
    this.reset();
    if (start === true) 
        this.start();
}, null, {
    reset: function(){
        this._stop = null;
        this._start = null;
    },
    start: function(){
        this.reset();
        this._start = new Date().getTime();
        return this._start;
    },
    stop: function(){
        if (this._stop != null) 
            this._stop = new Date().getTime();
        return this._stop;
    },
    elapsedMs: function(){
        var stop = this._stop != null ? this._stop : new Date().getTime();
        return this._start == null ? 0 : stop - this._start;
    },
    toString: function(){
        return this.elapsedMs();
    },
    inter: function(){
        return this._start == null ? 0 : new Date().getTime() - this._start;
    }
});
exports.propByPath = function(json, path){
    if (json == null) 
        return null;
    path = (path || "").trim();
    if (path.length == 0) 
        return json;
    path = path.split(".");
    var curNode = json;
    for (var i = 0; i < path.length; i++) {
        curNode = curNode[path[i]];
        if (curNode == null) 
            return null;
    }
    return curNode;
};
exports.clearObject = function(o){
    if (o == null) 
        return o;
    if (jQuery.isArray(o)) {
        jQuery.each(o, function(i, v){
            exports.clearObject(v);
        });
        o.length = 0;
        return o;
    }
    if (jQuery.isPlainObject(o)) {
        for (var p in o) {
            exports.clearObject(o[p]);
            delete o[p];
        }
    }
};
exports.createHandler = function(){
    var args = jQuery.makeArray(arguments);
    if (args.length < 2) 
        return null;
    var func = args.shift();
    var thisObject = args.shift();
    var handler = function cllbck(){
        var nargs = jQuery.makeArray(arguments);
        var arglen = nargs.length;
        var i, len = args.length;
        if ((arglen > 0) && jQuery.browser.mozilla && cllbck.useTimeout) {
            for (var ii = 0, ll = arglen - 1; ii < ll; ii++) {
                nargs[ii] = nargs[ii + 1];
            }
            arglen--;
            nargs.length = arglen;
        }
        if (len > 0) {
            nargs.length = arglen + len;
            for (i = 0; i < len; i++) {
                nargs[arglen + i] = args[i];
            }
        }
        if (func) 
            return func.apply(thisObject, nargs);
        else 
            return false;
    }
    return handler;
};
exports.callHandlerLater = function(){
    if (arguments.length < 3) 
        return 0;
    var args = jQuery.makeArray(arguments);
    var delay = args.shift();
    var handler = exports.createHandler.apply(null, args);
    if (jQuery.browser.mozilla) 
        handler.useTimeout = true;
    return window.setTimeout(handler, delay);
};
function _replaceClass(text, oldClass, newClass){
    var toggle = newClass == null;
    var a = text.split(" ");
    if (a) {
        if (newClass && newClass.length > 0) {
            var i = a.indexOf(newClass);
            if (i >= 0) 
                return text;
        }
        i = a.indexOf(oldClass);
        if (i >= 0) {
            if (toggle || newClass == "") {
                a.splice(i, 1);
            }
            else {
                a[i] = newClass;
            }
        }
        else {
            if (toggle) 
                newClass = oldClass;
            if (newClass != "") {
                a[a.length] = newClass;
            }
        }
        return a.join(" ");
    }
    else 
        return newClass;
};
exports.replaceClass = function(ele, oldClass, newClass){
    if (ele.jquery) 
        ele = ele[0];
    if (ele.classList) {
        try {
            if (newClass == null) {
                ele.classList.toggle(oldClass);
            }
            else {
                if (oldClass) 
                    ele.classList.remove(oldClass);
                if (newClass) 
                    ele.classList.add(newClass);
            }
            return true;
        } 
        catch (e) {
        }
    }
    var clss = ele.className;
    var s = _replaceClass(clss, oldClass, newClass);
    if (s != clss) {
        ele.className = s;
        return true;
    }
    return false;
};
exports.removeClass = function(e, klass){
    if (e.jquery) 
        e = e[0];
    klass = klass.split(' ');
    for (var i = 0; i < klass.length; i++) {
        var c = klass[i];
        if (c.length == 0) 
            continue;
        if (e.classList) 
            e.classList.remove(c);
        else 
            e.className = _replaceClass(e.className, c, "");
    }
};
exports.addClass = function(e, klass){
    if (e.jquery) 
        e = e[0];
    klass = klass.split(' ');
    for (var i = 0; i < klass.length; i++) {
        var c = klass[i];
        if (c.length == 0) 
            continue;
        if (e.classList) 
            e.classList.add(c);
        else 
            e.className = _replaceClass(e.className, "", c);
    }
};
// elmt = tag li ou s-fusion-ltree-body - force=true -> force add klass - force=false --> force remove false - undefiend --> Toggle
exports.toggleClass = function(e, klass, force){
    return exports.replaceClass(e, force === true ? "" : klass, force === false ? "" : force === true ? klass : undefined);
};
exports.hasClass = function(e, klass){
    if (e.jquery) 
        e = e[0];
    if (e.classList) {
        return e.classList.contains(klass);
    }
    else {
        return (" " + e.className + " ").indexOf(" " + klass + " ") >= 0;
    }
};
exports.children = function(node, tag, first){
    var res = [];
    if (node && tag) {
        if (node.jquery) 
            node = node[0];
        tag = tag.toUpperCase();
        var child = node.firstChild;
        while (child != null) {
            if (child.nodeType == 1 && child.nodeName == tag) {
                if (first) 
                    return $(child);
                res.push($(child));
            }
            child = child.nextSibling;
        }
    }
    return first ? null : res;
};
exports.closest = function(e, tag, stop){
    if (!e && !tag) 
        return null;
    if (e.jquery) 
        e = e[0];
    tag = tag.toUpperCase();
    var stop = stop || document.body;
    while (e != stop && e.nodeName != tag) 
        e = e.parentNode;
    return e == stop ? null : e;
};
exports.appendText = function(node, txt){
    if (node.jquery) 
        node = node[0];
    node.appendChild(document.createTextNode(txt));
};
