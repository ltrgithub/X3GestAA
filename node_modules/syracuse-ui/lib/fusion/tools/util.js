"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Commons utilities for Fusion client
 */
var helpers = require('syracuse-core/lib/helpers');
var utilBis = require('./utilFdb');
var locale = require('syracuse-core/lib/locale');
var msgBox = require('syracuse-ui/lib/fusion/core/client/sap/msgbox');
var _diagnosSeverity = ["info", "warning", "transient", "error", "fatal", "success"];

var _defAjaxErrMess = "Unexpected error received from web server.";
var _defAjaxOrigin = "Ajax module";
var _logCount = 0;
exports.backOfficeNice = "X3 server";
exports.ourCompanyLabel = "Sage";
exports.cltFusionNice = "Classic pages client";
exports.cltFormatterNice = "Format module";

exports.isWarnDiagnosis = function(severity) {
	return severity == _diagnosSeverity[1];
};
exports.isErrDiagnosis = function(severity, includeWarning) {
	var ret = false;
	if (severity == _diagnosSeverity[4] || severity == _diagnosSeverity[3] || (severity == _diagnosSeverity[1] && includeWarning)) {
		ret = true;
	}
	return ret;
};

exports.isKnownDiagnosisSeverity = function(severity) {
	return _diagnosSeverity.indexOf(severity) >= 0;
};

exports.getDiagnosesFromAjax = function(errAjax, messObj) {
	var errMess, diagnoses = null;
	if (_.isString(errAjax.data)) {
		if (errAjax.data.indexOf("$diagnoses") >= 0 || errAjax.data.indexOf("diagnoses") >= 0) {
			try {
				errMess = JSON.parse(errAjax.data);
				diagnoses = errMess.$diagnoses || errMess.diagnoses;
			} catch (ex) {
				diagnoses = [exports.makeDiagnosis(_defAjaxErrMess)];
			}
		} else {
			if (errAjax.data && errAjax.data.length > 0) {
				diagnoses = [exports.makeDiagnosis(errAjax.data)];
			} else {
				if (errAjax.status && errAjax.status == 404) {
					if (!messObj) {
						errMess = "Can't get resource on web server\nHTTP status";
					} else {
						errMess = _.isString(messObj) ? syra_fusion.getMessage("5") + "\n" + syra_fusion.getMessage("6") : messObj.getlabel("error", "14", "Can't get resource on web server") + "\n" + messObj.getlabel("error", "15", "HTTP status");
					}
					diagnoses = [exports.makeDiagnosis(errMess + " : 404")];
				} else {
					if (!messObj) {
						errMess = "HTTP error.\nHTTP status";
					} else {
						errMess = _.isString(messObj) ? syra_fusion.getMessage("7") + "\n" + syra_fusion.getMessage("6") : messObj.getlabel("error", "16", "HTTP error") + "\n" + messObj.getlabel("error", "15", "HTTP status");
					}
					diagnoses = [exports.makeDiagnosis(errMess + " : " + errAjax.status || "???")];
				}
			}
		}
	} else {
		diagnoses = errAjax.data.$diagnoses || errAjax.data.diagnoses;
	}
	if (diagnoses && !diagnoses[0].$origin) {
		diagnoses[0].$origin = _defAjaxOrigin;
	}
	return diagnoses;
};

exports.getLoadPageErrFromAjax = function(error, pageName, messObj) {
	var err = exports.isOurAjaxErrEx(error),
		diagnoses, diagnosis;
	var mess1 = "Unexpected error retrieving window description on web server : ";
	var mess2 = "The expected function could not be opened. Please, contact your system administrator if the issue persists.";
	if (messObj) {
		mess1 = messObj.getlabel("error", "10", mess1);
		mess2 = messObj.getlabel("error", "26", mess2);
	}
	diagnosis = exports.makeDiagnosis(mess1 + " '" + (pageName || "????") + "'.\n" + mess2, 3, null, "10", exports.cltFusionNice, null, null);
	if (err && (diagnoses = [exports.makeDiagnosesFromOurAjaxErrEx(err)])) {
		if (diagnoses[0].$diagnoses) {
			diagnoses[0].$stackTrace = diagnoses[0].$diagnoses[0].message || diagnoses[0].$diagnoses[0].$message || "";
			delete diagnoses[0].$diagnoses;
		}
	} else {
		diagnoses = exports.getDiagnosesFromAjax(error, messObj);
	}
	if (diagnoses) {
		diagnoses.splice(0, 0, diagnosis);
	} else {
		diagnoses = diagnosis;
	}
	return diagnoses;
};

exports.isOurAjaxErr = function(ajaxErr) {
	var err = null;
	if (!ajaxErr) {
		return null;
	}
	if (_.isObject(ajaxErr.data)) {
		err = ajaxErr.data;
	} else {
		if (ajaxErr.data == undefined || ajaxErr.data.length == 0) {
			return null;
		}
		try {
			err = JSON.parse(ajaxErr.data);
		} catch (ex) {
			err = null;
		}
	}
	if (err && (err.msgDefault || (err.msgCode && err.errCode))) {
		if (!err.errCode) {
			err.errCode = "KILL";
		}
		return err;
	} else {
		return null;
	}
};

exports.isOurAjaxErrEx = function(ajaxErr) {
	var err = null;
	if (ajaxErr && _.isObject(ajaxErr.data)) {
		err = ajaxErr.data;
	} else
	if (ajaxErr) {
		if (ajaxErr.data !== undefined && ajaxErr.data.length > 0) {
			try {
				err = JSON.parse(ajaxErr.data);
			} catch (ex) {
				err = null;
			}
		}
	}
	if (err && (err.$recoveryCode || err.$origin)) {
		if (!err.$recoveryCode) {
			err.$recoveryCode = "KILL";
		}
	} else
	if ((err = exports.isOurAjaxErr(ajaxErr))) {
		// Compatibility mode
		err.$message = err.msgDefault;
		err.$diagnoses = exports.duplicateObj(err.diagnoses);
		err.$recoveryCode = err.errCode;
		err.$details = err.errMsg;
		err.$messageCode = err.msgCode;
		delete err.msgDefault;
		delete err.errCode;
		delete err.errMsg;
		delete err.msgCode;
		delete err.diagnoses;
	} else {
		err = null;
	}
	return err;
};

exports.getMessageFromOurAjaxErrEx = function(ourErr, messObj) {
	return messObj && ourErr.$messageCode ? messObj.getlabel("error", ourErr.$messageCode.toString(), ourErr.message || ourErr.$message || _defAjaxErrMess) : ourErr.message || ourErr.$message || _defAjaxErrMess;
};

exports.releaseOurAjaxErrEx = function(ourErr) {
	_.each(ourErr.$diagnoses, function(elt, idx) {
		delete this[idx];
	}, ourErr.$diagnoses);
	delete ourErr.$diagnoses;
};

exports.makeOurAjaxErrEx = function(behavior, diagnoses, messCode, defMess, detail, origin) {
	var diagnosis = exports.makeDiagnosis(defMess, _diagnosSeverity[3], null, messCode, origin || exports.cltFusionNice, detail, null, diagnoses);
	diagnosis.$messageCode = messCode;
	diagnosis.$recoveryCode = behavior;
	return diagnosis;
};

exports.makeDiagnosesFromOurAjaxErrEx = function(ourErr, messObj) {
	ourErr.$message = exports.getMessageFromOurAjaxErrEx(ourErr, messObj);
	ourErr.appCode = ourErr.appCode || ourErr.$messageCode;
	ourErr.$severity = ourErr.severity || ourErr.$severity || _diagnosSeverity[3];
	ourErr.$origin = ourErr.$origin || exports.cltFusionNice;
	return ourErr;
};

exports.diagnosesToOurErrEx = function(diagnoses) {
	var diag = diagnoses,
		ourErr = {
			"li": []
		}, mainDiagnosis = 0,
		topSevevity = 0,
		diagSeverity, diagStack, diagDetail, sep;
	if (_.isArray(diagnoses)) {
		// Main diagnosis should be the first one with "$diagnoses" member, or the first one with the height severity.
		_.each(diagnoses, function(diagnosis, idx) {
			var diagSeverityInner = diagnosis.severity || diagnosis.$severity;
			if (topSevevity !== null && diagnosis.$diagnoses) {
				mainDiagnosis = idx;
				topSevevity = null;
			} else
			if (topSevevity !== null && diagSeverityInner) {
				diagSeverityInner = diagSeverityInner.toLowerCase();
				_.find(_diagnosSeverity, function(severity, i) {
					if (severity == diagSeverityInner) {
						if (i > topSevevity) {
							topSevevity = i;
							mainDiagnosis = idx;
							return true;
						} else {
							return false;
						}
					}
				});
			}
		});
		if (!diagnoses[mainDiagnosis].$diagnoses) {
			diagnoses[mainDiagnosis].$diagnoses = [];
		}
		_.each(diagnoses, function(diagnosis, idx) {
			if (idx != mainDiagnosis) {
				diagnoses[mainDiagnosis].$diagnoses.push(diagnosis);
			}
		});
		diag = diagnoses[mainDiagnosis];
	}
	// Now, build our error
	ourErr.type = 3;
	if ((diagSeverity = diag.severity || diag.$severity)) {
		diagSeverity = diagSeverity.toLowerCase();
		_.find(_diagnosSeverity, function(severity, idx) {
			if (severity == diagSeverity) {
				ourErr.type = idx;
				return true;
			} else {
				return false;
			}
		});
	}
	ourErr.li[0] = diag.message || diag.$message;
	sep = ourErr.li[0].charAt(ourErr.li[0].length - 1);
	if ([".", "?", "!", ":", ";"].indexOf(sep) < 0) {
		ourErr.li[0] += ".";
	}
	if ((!diag.$diagnoses || diag.$diagnoses.length == 0) && ((diagStack = diag.stackTrace || diag.$stackTrace))) {
		diag.$diagnoses = [];
		diag.$diagnoses.push(exports.makeDiagnosis(syra_fusion.getMessage("stackT"), 3, diagStack));
		delete diag.stackTrace;
		delete diag.$stackTrace;
	} else
	if ((diagStack = diag.stackTrace || diag.$stackTrace)) {
		if ((diagDetail = diag.$details || diag.details)) {
			diag.$details = null;
			diag.details = null;
		}
		diag.$diagnoses.splice(0, 0, exports.makeDiagnosis(diagDetail || syra_fusion.getMessage("stackT"), 3, diagStack));
	}
	ourErr.howTalking = diag.$origin;
	ourErr.details = (diag.$details || "") + (diag.appCode || diag.sdataCode ? (" - Error code : [" + (diag.appCode || diag.sdataCode) + "]") : "");
	ourErr.diagnoses = diag.$diagnoses;
	ourErr.links = diag.$links;
	_.each(ourErr.diagnoses, function(diagnosis, idx) {
		if ((diagnosis.$stackTrace || diagnosis.stackTrace) && !diagnosis.$message && !diagnosis.message) {
			diagnosis.$message = syra_fusion.getMessage("stackT");
		}
	});
	return ourErr;
};

exports.makeDiagnosisFromException = function(ex) {
	return exports.makeDiagnosis(ex.message, _diagnosSeverity[3], ex.stack);
};

exports.makeDiagnosisLocale = function(labelCode, labelCodeArgs, labelString, severity, details, stack, origin, links, appCode) {
	var mess = labelString;
	if (labelCode) {
		mess = syra_local[labelCode];
		mess = !labelCodeArgs || labelCodeArgs.length == 0 || !mess ? (mess || labelCode) : locale.format.apply(locale, [mess].concat(labelCodeArgs));
	}
	return exports.makeDiagnosis(mess, severity, stack, appCode, origin, details, links);
};

exports.makeDiagnosis = function(label, severity, stackTrace, appCode, origin, details, links, childDiagnoses) {
	var severityEx = _diagnosSeverity[3],
		num;
	if (severity !== undefined && severity !== null) {
		if (_.isString(severity)) {
			num = parseInt(severity, 10);
			if (isNaN(num)) {
				severityEx = severity.length > 0 ? severity : severityEx;
			} else {
				severityEx = num < _diagnosSeverity.length && num >= 0 ? _diagnosSeverity[num] : severityEx;
			}
		} else {
			severityEx = severity < _diagnosSeverity.length && severity >= 0 ? _diagnosSeverity[severity] : severityEx;
		}
	}
	return {
		"$message": label || (severityEx == "success" ? "" : "Unknown message"),
		"$severity": severityEx,
		"$stackTrace": stackTrace,
		"appCode": appCode || "0",
		"$details": details,
		"$diagnoses": childDiagnoses,
		"$origin": origin || exports.cltFusionNice,
		"$links": links
	};
};

exports.duplicateObj = function(input, callback) {
	var output = Array.isArray(input) ? [] : (input ? {} : null);
	_.each(input, function(value, key) {
		if (!Array.isArray(value) && !_.isObject(value)) {
			if (!callback) {
				this[key] = value;
			} else {
				callback(this, key, value);
			}
		} else {
			this[key] = exports.duplicateObj(value, callback);
		}
	}, output);
	return output;
};

exports.appendObj = function(source, target) {
	function _appendInner(from, to) {
		_.each(from, function(node, name) {
			var isObj, i, len;
			if (Array.isArray(node) || (isObj = _.isObject(node))) {
				if (this.hasOwnProperty(name)) {
					if (isObj) {
						_appendInner(node, this[name]);
					} else {
						for (i = 0, len = node.length; i < len; i++) {
							this[name].push(node[i]);
						}
					}
				} else {
					this[name] = exports.duplicateObj(node);
				}
			} else {
				this[name] = node;
			}
		}, to);
	}
	_appendInner(source, target);
};

exports.arrayFind = function(array, iterator, context) {
	var result = -1;
	_.any(array, function(value, index, list) {
		if (iterator.call(context, value, index, list)) {
			result = index;
			return true;
		}
	});
	return result;
};

exports.leftPad = function(string, length, padValue) {
	return new Array(Math.max(length - string.length, 0) + 1).join(padValue) + string;
};

exports.rightPad = function(string, length, padValue) {
	return s + new Array(Math.max(length - string.length, 0) + 1).join(padValue);
};

var _classLog = helpers.defineClass(function Log(options) {
	_.extend(this, options);
	this._logId = options && options.logId || _logCount++;
	this._pdbgOn = false;
	this._ptrcOn = false;
	this._ptmrOn = false;
	this._pexcOn = false;
	this._pdpsOn = false;
	this._bxp = "_p";
	this._bxpLen = 2;
	this._axp = "On";
	this.setLog(options && options.on || null);
	this._report = [];
	this._showReport = false;
}, null, {
	getLogSwitch: function() {
		var objKeys, j, len, swtch = {};
		objKeys = Object.keys(this);
		for (j = 0, len = objKeys.length; j < len; j++) {
			if (objKeys[j].substr(0, this._bxpLen) == this._bxp) {
				swtch[objKeys[j]] = this[objKeys[j]];
			}
		}
		return swtch;
	},
	toggleLog: function(showReport) {
		var flags = this.getLogSwitch(),
			turnOn = true,
			j, len, array;
		if (flags && (array = Object.keys(flags)) && (len = array.length) > 0) {
			for (j = 0; j < len; j++) {
				if (this[array[j]]) {
					turnOn = false;
					break;
				}
			}
		}
		this.setLog({
			"all": turnOn
		});
		if (!turnOn && this._showReport) {
			this._dispReport();
		} else
		if (turnOn) {
			this._showReport = showReport;
		}
		return turnOn;
	},
	isTraceEnable: function() {
		return !!(this._ptrcOn);
	},
	setLog: function(options) {
		var objKeys, j, len;
		if (options) {
			if (options.all != undefined) {
				objKeys = Object.keys(this);
				for (j = 0, len = objKeys.length; j < len; j++) {
					if (objKeys[j].substr(0, this._bxpLen) == this._bxp) {
						this[objKeys[j]] = options.all;
					}
				}
			} else {
				objKeys = Object.keys(options);
				for (j = 0, len = objKeys.length; j < len; j++) {
					if (this[this._bxp + objKeys[j] + this._axp] != undefined) {
						this[this._bxp + objKeys[j] + this._axp] = options[objKeys[j]];
					}
				}
			}
		}
	},
	debug: function(options) {
		if (this._pdbgOn) {
			utilBis.logEx.apply(this, arguments);
		}
	},
	trace: function(options) {
		if (this._ptrcOn) {
			if (options.severety && this._showReport) {
				this._report.push(exports.makeDiagnosis("Trace", "info", utilBis.logEx.apply(this, arguments)));
			} else {
				utilBis.logEx.apply(this, arguments);
			}
		}
	},
	timer: function(options) {
		if (this._ptmrOn) {
			this._report.push(exports.makeDiagnosis("Timing", "warning", utilBis.logEx.call(this, {
				"severety": "info"
			}, ">>>> TIMING " + (this.id ? ("for [" + this.id + "]") : "") + ">>>> " + arguments[1])));
			if (arguments.length > 2) {
				utilBis.logEx.apply(this, [options].concat(Array.prototype.slice.call(arguments, 2)));
			}
		}
	},
	dumpStack: function() {
		if (this._pdpsOn && window.console && window.console.trace) {
			window.console.trace();
		}
	},
	exception: function(options) {
		var opts = options || {}, mess;
		if (this._excOn) {
			if (opts.alert) {
				mess = "A javacript exception occurred.\nPlease, check your browser console for more detail";
				if (opts.messObj) {
					mess = opts.messObj.getlabel("error", "20", mess);
				}
				alert(mess + (opts.ex ? " : '" + opts.ex.message + "'." : "."));
			}
			opts.severety = "error";
			utilBis.logEx.apply(this, [opts].concat(Array.prototype.slice.call(arguments, 1)));
		}
	},
	_dispReport: function(options) {
		var boxOpts, boxParams, diag = [];
		var self = this;
		boxParams = exports.diagnosesToOurErrEx([exports.makeDiagnosis("Classic client : timing and trace report", "info", null, 0, null, "", null, this._report)]);
		msgBox.setMsgBoxDefaultProp(boxParams, 0, 0, null, null, true);
		boxOpts = msgBox.getMsgBoxOpts.call(this, boxParams);
		boxOpts.callback = function() {
			self._report = [];
		};
		if (syra_site) {
			setTimeout(function() {
				syra_alert.dialog(boxOpts);
			}, 50);
		}
	}
});
exports.getLog = function(opts) {
	return new _classLog(opts);
};
exports.getDefaultLogSwitches = function(global, sess, force) {
	if (force || (sess && sess.user === "DEBUG" && (!global || !global.logSwitches))) {
		return {
			"on": {
				"all": true
			}
		};
	} else
	if (global && global.logSwitches) {
		return {
			"on": global.logSwitches
		};
	} else {
		return null;
	}
};
exports.wrapObjMethods = function(obj, before, after) {
	var old;
	obj._mapWrap_ = {};
	for (var x in obj) {
		old = obj[x];
		if (Object.prototype.toString.call(old) == '[object ' + "Function" + ']') {
			obj._mapWrap_[x] = old;
			obj[x] = function() {
				var t = null,
					args = arguments,
					ret;
				for (var y in obj) {
					if (!t && (obj[y] === args.callee)) {
						t = y;
					}
				}
				before.call(obj, obj, t);
				ret = obj._mapWrap_[t].apply(obj, args);
				after.call(obj, obj, t);
				return ret;
			};
		}
	}
};