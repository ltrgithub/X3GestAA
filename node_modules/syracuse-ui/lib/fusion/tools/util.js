"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Commons utilities for Fusion client
 */

var helpers = require('syracuse-core/lib/helpers');
var utilBis = require('./utilFdb');
var _diagnosSeverity = ["info", "warning", "transient", "error", "fatal"];

exports.ourCompanyLabel = "Sage";

exports.makeDiagnosis = function (label, severity, stackTrace, appCode){
	return { 
		"message": label || "Unknown error", 
		"severity": severity ? _diagnosSeverity[severity] : "error", 
		"stackTrace": stackTrace || null,
		"appCode": appCode || null
	};
};

exports.prependDiagnosisMess = function (diagnosis , mess){
    if(_.isArray(diagnosis)) {
        diagnosis[0].message = mess + (diagnosis[0].message || "");  
    }
    else {
        diagnosis.message = mess + (diagnosis.message || "");  
    }
};

exports.diagnosesToOurErr = function (diagnoses){
    // TODO : improve, validate!
    var diag = _.isArray(diagnoses) ? diagnoses : [diagnoses], ourErr = {"li": []}, temp;
    ourErr.type = 0;
    _.each(diag, function(err, idx){
        this.li[idx] = (err.message || "") +  (err.appCode || err.sdataCode  ? (" [" + (err.appCode || err.sdataCode) + "]") : "") + (err.stackTrace ? ("\n" + err.stackTrace) : "");
        if(err.severity) {
            temp = _.find(_diagnosSeverity, function(severity, idx) {
                if(severity == err.severity.toLowerCase()) {
                    ourErr.type = idx > ourErr.type ? idx : ourErr.type;
                    return true;
                }
                else {
                    return false;
                }
            });
        }
    }, ourErr);
    return ourErr;
};

exports.duplicateObj = function (input, callback){
	var output = Array.isArray(input) ? [] : {};
    _.each(input, function(value, key){
    	if(!Array.isArray(value) && !_.isObject(value)) {
            if(!callback) {
        	   this[key] = value;            
            }
            else {
                callback(this, key, value);
            }
    	}
    	else {
        	this[key] = exports.duplicateObj(value, callback);
        }
    }, output);
    return output;
};

exports.arrayFind = function (array, iterator, context){
    var result = -1;
    _.any(array, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = index;
        return true;
      }
    });
    return result;
};

exports.getDiagnosesFromAjax = function (errAjax, messObj){
    // TODO : improve, especially HTTP status code...
    if(_.isString(errAjax.data)) {
        if(errAjax.data.indexOf("$diagnoses") >= 0) {
            return JSON.parse(errAjax.data).$diagnoses;
        }
        else if(errAjax.data.indexOf("diagnoses") >= 0) {
            return JSON.parse(errAjax.data).diagnoses;
        }
        else {
            if (errAjax.data && errAjax.data.length > 0) {
                return [exports.makeDiagnosis(errAjax.data)];
            }
            else {
                if (errAjax.status && errAjax.status == 404) {
                    return [exports.makeDiagnosis(messObj.getlabel("error", "14", "Can't get resource on web server") + "\n" + messObj.getlabel("error", "15", "HTTP status") + " : 404")];
                }
                else {
                    return [exports.makeDiagnosis(messObj.getlabel("error", "16", "HTTP error") + "\n" + messObj.getlabel("error", "15", "HTTP status") + " : " + errAjax.status || "???")];
                }
            }
        }
    }
    else {
        return errAjax.data.$diagnoses || errAjax.data.diagnoses;
    }
};

exports.leftPad = function(string,length,padValue){
        return new Array(Math.max(length-string.length,0)+1).join(padValue)+string;
};

exports.rightPad = function(string,length,padValue){
        return s+new Array(Math.max(length-string.length,0)+1).join(padValue);
};

var _classLog = helpers.defineClass(function Log(options) {
        _.extend(this, options);
    }, null, {
    debug: function(options) {
        utilBis.log(Array.prototype.slice.call(arguments, 1));
    },
    trace: function(options) {
        utilBis.log(Array.prototype.slice.call(arguments, 1));
    },
    timer: function(options) {
        utilBis.log(">>>> TIMING " + (this.id ? ("for [" + this.id + "]") : "") + ": " );
        utilBis.log(Array.prototype.slice.call(arguments, 1));
    }
});
exports.getLog = function(opts) {
    return new _classLog(opts);
};