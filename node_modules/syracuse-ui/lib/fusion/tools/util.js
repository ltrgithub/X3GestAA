"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Commons utilities for Fusion client
 */

var helpers = require('syracuse-core/lib/helpers');
var utilBis = require('./utilFdb');
var localize = require('syracuse-ui/lib/fusion/tools/localize').localize;
var _diagnosSeverity = ["info", "warning", "transient", "error", "fatal"];

var _defAjaxErrMess = "Unexpected error received from web server.";
exports.ourCompanyLabel = "Sage";

exports.getDiagnosesFromAjax = function (errAjax, messObj){
    var errMess;
    if(_.isString(errAjax.data)) {
        if(errAjax.data.indexOf("$diagnoses") >= 0 || errAjax.data.indexOf("diagnoses") >= 0) {
            try {
                errMess = JSON.parse(errAjax.data);
                return errMess.$diagnoses || errMess.diagnoses;
            }
            catch(ex) {
                return [exports.makeDiagnosis(_defAjaxErrMess)];
            }
        }
        else {
            if (errAjax.data && errAjax.data.length > 0) {
                return [exports.makeDiagnosis(errAjax.data)];
            }
            else {
                if (errAjax.status && errAjax.status == 404) {
                    if(!messObj) {
                        errMess = "Can't get resource on web server\nHTTP status";
                    }
                    else {
                        errMess = _.isString(messObj) ? localize.getMessage(messObj, "5") + "\n" + localize.getMessage(messObj, "6") : messObj.getlabel("error", "14", "Can't get resource on web server") + "\n" + messObj.getlabel("error", "15", "HTTP status");
                    }
                    return [exports.makeDiagnosis(errMess + " : 404")];
                }
                else {
                    if(!messObj) {
                        errMess = "HTTP error.\nHTTP status";
                    }
                    else {
                        errMess = _.isString(messObj) ? localize.getMessage(messObj, "7") + "\n" + localize.getMessage(messObj, "6") : messObj.getlabel("error", "16", "HTTP error") + "\n" + messObj.getlabel("error", "15", "HTTP status");
                    }
                    return [exports.makeDiagnosis(errMess + " : " + errAjax.status || "???")];
                }
            }
        }
    }
    else {
        return errAjax.data.$diagnoses || errAjax.data.diagnoses;
    }
};

exports.isOurAjaxErr = function (ajaxErr){
    var err = null;
	if (!ajaxErr) {
        return null;
    }
    if(_.isObject(ajaxErr.data)) {
        err = ajaxErr.data;
    }
    else {
		if (ajaxErr.data==undefined || ajaxErr.data.length==0) return null;
        try {
            err = JSON.parse(ajaxErr.data);
        } catch(ex) {
            err = null;
        }
    }
    if(err && (err.msgDefault || (err.msgCode && err.errCode))) {
        if(!err.errCode) {
            err.errCode = "KILL";
        }
        return err;
    }
    else {
        return null;
    }
};

exports.getMessageFromOurAjaxErr = function (ourErr, messObj){
    return messObj && ourErr.msgCode ? messObj.getlabel("error", ourErr.msgCode.toString(), ourErr.msgDefault || defAjaxErrMess) : ourErr.msgDefault || _defAjaxErrMess;
 };

exports.makeDiagnosesFromOurAjaxErr = function (ourErr, messObj){
    var diagnosis = exports.makeDiagnosis(exports.getMessageFromOurAjaxErr(ourErr, messObj), 4, "", ourErr.msgCode);
    if(ourErr.diagnoses && _.isArray(ourErr.diagnoses)) {
        ourErr.diagnoses.unshift(diagnosis);
        return ourErr.diagnoses;
    }
    else {
        return [diagnosis];
    }
 };

exports.makeOurAjaxErr = function (behavior, diagnoses, messCode, defMess){
    return { 
        "msgDefault": defMess, 
        "msgCode": messCode,
        "errCode": behavior,
        "diagnoses": diagnoses ? exports.duplicateObj(diagnoses) : []
    };
};

exports.makeDiagnosis = function (label, severity, stackTrace, appCode){
	return { 
		"message": label || "Unknown error", 
		"severity": severity ? _diagnosSeverity[severity] : "error", 
		"stackTrace": stackTrace,
		"appCode": appCode
	};
};

exports.prependDiagnosisMess = function (diagnosis , mess){
    if(_.isArray(diagnosis)) {
        diagnosis[0].message = mess + (diagnosis[0].message || "");  
    }
    else {
        diagnosis.message = mess + (diagnosis.message || "");  
    }
};

exports.diagnosesToOurErr = function (diagnoses){
    // TODO : improve, validate!
    var diag = _.isArray(diagnoses) ? diagnoses : [diagnoses], ourErr = {"li": []}, temp;
    ourErr.type = 0;
    _.each(diag, function(err, idx){
        this.li[idx] = (err.message || "") +  (err.appCode || err.sdataCode  ? (" [" + (err.appCode || err.sdataCode) + "]") : "") + (err.stackTrace ? ("\n\nStack :\n " + err.stackTrace) : "");
        if(err.severity) {
            temp = _.find(_diagnosSeverity, function(severity, idx) {
                if(severity == err.severity.toLowerCase()) {
                    ourErr.type = idx > ourErr.type ? idx : ourErr.type;
                    return true;
                }
                else {
                    return false;
                }
            });
        }
    }, ourErr);
    return ourErr;
};

exports.duplicateObj = function (input, callback){
	var output = Array.isArray(input) ? [] : {};
    _.each(input, function(value, key){
    	if(!Array.isArray(value) && !_.isObject(value)) {
            if(!callback) {
        	   this[key] = value;            
            }
            else {
                callback(this, key, value);
            }
    	}
    	else {
        	this[key] = exports.duplicateObj(value, callback);
        }
    }, output);
    return output;
};

exports.arrayFind = function (array, iterator, context){
    var result = -1;
    _.any(array, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = index;
        return true;
      }
    });
    return result;
};

exports.leftPad = function(string,length,padValue){
        return new Array(Math.max(length-string.length,0)+1).join(padValue)+string;
};

exports.rightPad = function(string,length,padValue){
        return s+new Array(Math.max(length-string.length,0)+1).join(padValue);
};

var _classLog = helpers.defineClass(function Log(options) {
        _.extend(this, options);
    }, null, {
    debug: function(options) {
        utilBis.logEx.apply(this, arguments);
    },
    trace: function(options) {
        utilBis.logEx.apply(this, arguments);
    },
    timer: function(options) {
        utilBis.logEx({"severety": "info"}, ">>>> TIMING " + (this.id ? ("for [" + this.id + "]") : "") + ">>>> " + arguments[1]);
        if(arguments.length > 2) {
             utilBis.logEx.apply(this, [options].concat(Array.prototype.slice.call(arguments, 2)));
        }
    },
    dumpStack: function(){
        if(window.console && window.console.trace) {
            window.console.trace();
        }
    },
    exception: function(options) {
        var opts = options || {};
        if(opts.messObj) {
            alert (opts.messObj.getlabel("error", "20", "A javacript exception occurred.\nPlease, check your browser console for more detail") + ( opts.ex ? " : '" + opts.ex.message + "'." : "."));
        }
        opts.severety = "error";
        utilBis.logEx.apply(this, [opts].concat(Array.prototype.slice.call(arguments, 1)));
    }
});
exports.getLog = function(opts) {
    return new _classLog(opts);
};