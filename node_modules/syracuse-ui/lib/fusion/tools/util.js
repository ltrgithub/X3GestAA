"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Commons utilities for Fusion client
 */

var helpers = require('syracuse-core/lib/helpers');
var utilBis = require('./utilFdb');
var localize = require('syracuse-ui/lib/fusion/tools/localize').localize;
var _diagnosSeverity = ["info", "warning", "transient", "error", "fatal"];

var _defAjaxErrMess = "Unexpected error received from web server.";
var _defAjaxOrigin = "Ajax module";
var _logCount = 0;
exports.backOfficeNice = "ERP X3 server";
exports.ourCompanyLabel = "Sage";
exports.cltFusionNice = "Convergence client";

exports.getDiagnosesFromAjax = function (errAjax, messObj){
    var errMess, diagnoses = null;
    if(_.isString(errAjax.data)) {
        if(errAjax.data.indexOf("$diagnoses") >= 0 || errAjax.data.indexOf("diagnoses") >= 0) {
            try {
                errMess = JSON.parse(errAjax.data);
                diagnoses = errMess.$diagnoses || errMess.diagnoses;
            }
            catch(ex) {
                diagnoses = [exports.makeDiagnosis(_defAjaxErrMess)];
            }
        }
        else {
            if (errAjax.data && errAjax.data.length > 0) {
                diagnoses = [exports.makeDiagnosis(errAjax.data)];
            }
            else {
                if (errAjax.status && errAjax.status == 404) {
                    if(!messObj) {
                        errMess = "Can't get resource on web server\nHTTP status";
                    }
                    else {
                        errMess = _.isString(messObj) ? localize.getMessage(messObj, "5") + "\n" + localize.getMessage(messObj, "6") : messObj.getlabel("error", "14", "Can't get resource on web server") + "\n" + messObj.getlabel("error", "15", "HTTP status");
                    }
                    diagnoses = [exports.makeDiagnosis(errMess + " : 404")];
                }
                else {
                    if(!messObj) {
                        errMess = "HTTP error.\nHTTP status";
                    }
                    else {
                        errMess = _.isString(messObj) ? localize.getMessage(messObj, "7") + "\n" + localize.getMessage(messObj, "6") : messObj.getlabel("error", "16", "HTTP error") + "\n" + messObj.getlabel("error", "15", "HTTP status");
                    }
                    diagnoses = [exports.makeDiagnosis(errMess + " : " + errAjax.status || "???")];
                }
            }
        }
    }
    else {
        diagnoses = errAjax.data.$diagnoses || errAjax.data.diagnoses;
    }
    if(diagnoses && !diagnoses[0].$origin) {
        diagnoses[0].$origin = _defAjaxOrigin;
    }
    return diagnoses;
};

exports.isOurAjaxErr = function (ajaxErr){
    var err = null;
	if (!ajaxErr) {
        return null;
    }
    if(_.isObject(ajaxErr.data)) {
        err = ajaxErr.data;
    }
    else {
		if (ajaxErr.data == undefined || ajaxErr.data.length == 0){
            return null;
        }
        try {
            err = JSON.parse(ajaxErr.data);
        } catch(ex) {
            err = null;
        }
    }
    if(err && (err.msgDefault || (err.msgCode && err.errCode))) {
        if(!err.errCode) {
            err.errCode = "KILL";
        }
        return err;
    }
    else {
        return null;
    }
};

exports.isOurAjaxErrEx = function (ajaxErr){
    var err = null;
    if(ajaxErr && _.isObject(ajaxErr.data)) {
        err = ajaxErr.data;
    }
    else if (ajaxErr){
        if (ajaxErr.data !== undefined && ajaxErr.data.length > 0){
            try {
                err = JSON.parse(ajaxErr.data);
            }
            catch(ex) {
                err = null;
            }
        }
    }
    if(err && (err.message || (err.$messageCode && err.$recoveryCode))) {
        if(!err.$recoveryCode) {
            err.$recoveryCode = "KILL";
        }
    }
    else if((err = exports.isOurAjaxErr(ajaxErr))) {
        // Compatibility mode
        err.message = err.msgDefault;
        err.$diagnoses = exports.duplicateObj(err.diagnoses);
        err.$recoveryCode = err.errCode;
        err.$details = err.errMsg;
        err.$messageCode = err.msgCode;
        delete err.msgDefault;
        delete err.errCode;
        delete err.errMsg;
        delete err.msgCode;
        delete err.diagnoses;
    }
    else {
        err = null;
    }
    return err;
};

exports.getMessageFromOurAjaxErrEx = function (ourErr, messObj){
    return messObj && ourErr.$messageCode ? messObj.getlabel("error", ourErr.$messageCode.toString(), ourErr.message || defAjaxErrMess) : ourErr.message || _defAjaxErrMess;
};

exports.releaseOurAjaxErrEx = function (ourErr){
    _.each(ourErr.$diagnoses, function(elt, idx) {
        delete this[idx];
    }, ourErr.$diagnoses);
    delete ourErr.$diagnoses;
};

exports.makeOurAjaxErrEx = function (behavior, diagnoses, messCode, defMess, detail, origin){
    var diagnosis = exports.makeDiagnosis(defMess, _diagnosSeverity[3], null, messCode, origin || exports.cltFusionNice, detail, null, diagnoses);
    diagnosis.$messageCode = messCode;
    diagnosis.$recoveryCode = behavior;
    return diagnosis;
};

exports.makeDiagnosesFromOurAjaxErrEx = function (ourErr, messObj){
    ourErr.message = exports.getMessageFromOurAjaxErrEx(ourErr, messObj);
    ourErr.appCode = ourErr.appCode || ourErr.$messageCode;
    ourErr.severity =  ourErr.severity || _diagnosSeverity[3];
    ourErr.$origin = ourErr.$origin || exports.cltFusionNice;
    return ourErr;
};

exports.diagnosesToOurErrEx = function (diagnoses){
    var diag = diagnoses, ourErr = {"li": []}, mainDiagnosis = 0, topSevevity = 0;
    if(_.isArray(diagnoses)) {
        // Main diagnosis should be the first one with "$diagnoses" member, or the first one with the height severity.
        _.each(diagnoses, function(diagnosis, idx){
            if(topSevevity !== null && diagnosis.$diagnoses) {
                mainDiagnosis = idx;
                topSevevity = null;
            }
            else if( topSevevity !== null && diagnosis.severity) {
                _.find(_diagnosSeverity, function(severity, i) {
                    if(severity == diagnosis.severity.toLowerCase()) {
                        if(i > topSevevity) {
                            topSevevity = i;
                            mainDiagnosis = idx;
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                });
            }
        });
        if (!diagnoses[mainDiagnosis].$diagnoses) {
            diagnoses[mainDiagnosis].$diagnoses = [];
        }
        _.each(diagnoses, function(diagnosis, idx){
            if(idx != mainDiagnosis) {
                diagnoses[mainDiagnosis].$diagnoses.push(diagnosis);
            }
        });
        diag = diagnoses[mainDiagnosis];
    }
    // Now, build our error
    ourErr.type = 3;
    if(diag.severity) {
        _.find(_diagnosSeverity, function(severity, idx) {
            if(severity == diag.severity.toLowerCase()) {
                ourErr.type = idx;
                return true;
            }
            else {
                return false;
            }
        });
    }
    ourErr.li[0] = diag.message;
    if(!diag.$diagnoses || diag.$diagnoses.length == 0 && diag.stackTrace) {
        diag.$diagnoses = [];
        diag.$diagnoses.push(exports.makeDiagnosis ("Stack trace", 3, diag.stackTrace));
        delete diag.stackTrace;
    }
    else if(diag.stackTrace) {
        ourErr.li[1] = diag.stackTrace;
    }
    ourErr.howTalking = diag.$origin;
    ourErr.details = (diag.$details || "") + (diag.appCode || diag.sdataCode  ? (" - Error code : [" + (diag.appCode || diag.sdataCode) + "]") : "");
    ourErr.diagnoses = diag.$diagnoses;
    ourErr.links = diag.$links;
    return ourErr;
};

exports.makeDiagnosis = function (label, severity, stackTrace, appCode, origin, details, links, childDiagnoses){
	return { 
		"message": label || "Unknown error", 
		"severity": severity ? _diagnosSeverity[severity] : _diagnosSeverity[3], 
		"stackTrace": stackTrace,
		"appCode": appCode || "0",
        "$details": details,
        "$diagnoses": childDiagnoses,
        "$origin": origin,
        "$links": links
	};
};

exports.duplicateObj = function (input, callback){
	var output = Array.isArray(input) ? [] : (input ? {} : null);
    _.each(input, function(value, key){
    	if(!Array.isArray(value) && !_.isObject(value)) {
            if(!callback) {
        	   this[key] = value;            
            }
            else {
                callback(this, key, value);
            }
    	}
    	else {
        	this[key] = exports.duplicateObj(value, callback);
        }
    }, output);
    return output;
};

exports.arrayFind = function (array, iterator, context){
    var result = -1;
    _.any(array, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = index;
        return true;
      }
    });
    return result;
};

exports.leftPad = function(string,length,padValue){
        return new Array(Math.max(length-string.length,0)+1).join(padValue)+string;
};

exports.rightPad = function(string,length,padValue){
        return s+new Array(Math.max(length-string.length,0)+1).join(padValue);
};

var _classLog = helpers.defineClass(function Log(options) {
        _.extend(this, options);
        this._logId = options && options.logId || _logCount++;
        this._pdbgOn = false;
        this._ptrcOn = false;
        this._ptmrOn = false;
        this._pexcOn = false;
        this._pdpsOn = false;
        this._bxp = "_p";
        this._axp = "On";
        this.setLog(options && options.on || null);
    }, null, {
    setLog: function(options) {
        var objKeys, j, len;
        if(options) {
            if(options.all != undefined) {
                objKeys = Object.keys(this);
                for (j = 0, len = objKeys.length; j < len; j++) {
                    if (objKeys[j].substr(0,2) == this._bxp) {
                        this[objKeys[j]] = options.all;
                    }
                }
            }
            else {
                objKeys = Object.keys(options);
                for (j = 0, len = objKeys.length; j < len; j++) {
                    if (this[this._bxp + objKeys[j] + this._axp] != undefined) {
                        this[this._bxp + objKeys[j] + this._axp] = options[objKeys[j]];
                    }
                }
            }
        }
    },
    debug: function(options) {
        if(this._pdbgOn) {
            utilBis.logEx.apply(this, arguments);
        }
    },
    trace: function(options) {
        if(this._ptrcOn) {
            utilBis.logEx.apply(this, arguments);
        }
    },
    timer: function(options) {
        if(this._ptmrOn) {
            utilBis.logEx.call(this, {"severety": "info"}, ">>>> TIMING " + (this.id ? ("for [" + this.id + "]") : "") + ">>>> " + arguments[1]);
            if(arguments.length > 2) {
                 utilBis.logEx.apply(this, [options].concat(Array.prototype.slice.call(arguments, 2)));
            }
        }
    },
    dumpStack: function(){
        if(this._pdpsOn && window.console && window.console.trace) {
            window.console.trace();
        }
    },
    exception: function(options) {
        var opts = options || {}, mess;
        if(this._excOn) {
            if(opts.alert) {
                mess = "A javacript exception occurred.\nPlease, check your browser console for more detail";
                if(opts.messObj) {
                    mess = opts.messObj.getlabel("error", "20", mess);
                }
                alert (mess + ( opts.ex ? " : '" + opts.ex.message + "'." : "."));
            }
            opts.severety = "error";
            utilBis.logEx.apply(this, [opts].concat(Array.prototype.slice.call(arguments, 1)));
        }
    }
});
exports.getLog = function(opts) {
    return new _classLog(opts);
};
exports.getDefaultLogSwitches = function(global, sess, force) {
    if(force || (sess && (sess.user === "CMI" || sess.user === "LV") && (!global || !global.logSwitches))) {
        return {"on": {"all": true}};
    }
    else if(global && global.logSwitches) {
        return {"on": global.logSwitches};
    }
    else {
        return null;
    }
};