"use strict";
var helpers = require('syracuse-core/lib/helpers');

function BarBlock(){
    this.leftList = null;
}

exports.BarBlock = helpers.defineClass(BarBlock, null, {
    load: function(bar, $item, index){
        var self = this;
        self.bar = bar;
        self.boxParent = bar;
        self.index = index;
        self.id = document.controller.generateUUID();
        self.$item = $item;
        self.$item.$XID = self.$item.$XID || $item.$bind;
        self.$item.$title = self.$item.$title || bar.fusionPage.$prototype.$properties[$item.$bind].$title;
        
        var dom = document.createElement("section");
        dom.className = "s-fusion-block";
        self.$$item = $(dom).attr("id", self.id);
        
        dom = document.createElement("a");
        dom.className = "s-fusion-block-title";
        self.$$title = $(dom).bind("click", function(){
            self.collapse(true);
            return false;
        });
        this.setTitle(self.$item.$title);
        dom = document.createElement("div");
        dom.className = "s-fusion-block-body";
        self.$$body = $(dom);
        
        dom = document.createElement("header");
        dom.className = "s-fusion-block-header";
        self.$$header = $(dom).append(self.$$title);
        
        dom = document.createElement("footer");
        dom.className = "s-fusion-block-footer";
        self.$$footer = $(dom)
        self._navSteps = {};
        return self.$$item.append(self.$$header).append(self.$$body).append(self.$$footer);
    },
    setTitle: function(ttl){
        var ttl = ttl || "";
        if (ttl.length > 0 && ttl[1] == "@") {
            ttl = this.bar.fusionPage._renderExpression(ttl);
        }
        this.$$title.text(ttl);
        
    },
    appendPrevStep: function(){
        this._appendNavStep({
            $step: "prev",
            $title: "Previous"
        });
    },
    appendNextStep: function(){
        this._appendNavStep({
            $step: "next",
            $title: "Next"
        });
    },
    collapse: function(show, isFirstTime, onDrawBar){
        var self = this;
        self.bar.fusionPage.externalAdapter.onBoxToggle({
            box: self,
            open: show,
            onDrawParent: onDrawBar,
            isFirstTime: !self.box,
            doEvent: function(){
                if (show && self.bar.openedBlock && (self.bar.openedBlock != self)) {
                    self.bar.openedBlock.collapse(false);
                }
                self.bar.openedBlock = self;
                self.$$footer[0].style.display = show ? "" : "none";
                self.$$body[0].style.display = show ? "" : "none";
                self.$$header.toggleClass("s-open", show);
                self.$$item.toggleClass("s-open", show);
                if (show) {
                    // self.$$item[0].style.height = self.bar.getExpandedBlockHeight(self) + "px";
                    self.onWindowResize();
                }
                else {
                    self.$$item[0].style.height = "";
                }
                if (!self.box) {
                    self.$item.$isTitleHidden = true;
                    self.box = document.itemFactory.load(self.$$body.empty(), {
                        $category: "block",
                        $skin: "s-fusion-block-core",
                        $layout: {
                            $items: [self.$item]
                        }
                    }, self.bar.fusionPage);
                    self.onWindowResize();
                }
            }
        });
    },
    _appendNavStep: function(options){
        var self = this;
        var link = document.createElement("a");
        link.className = "s-fusion-block-nav s-fusion-block-nav-" + options.$step;
        link.setAttribute("data-s-step", options.$step);
        self._navSteps[options.$step] = $(link).bind("click", function(){
            self.bar.blocks[this.className.indexOf("prev") > 0 ? (self.index - 1) : (self.index + 1)].collapse(true);
            return false;
        }).attr("data-s-step", options.$step).appendTo(self.$$footer).text(options.$title);
    },
    onWindowResize: function(){
        if (this.$$item.is(':visible')) {
            var height = this.bar.getExpandedBlockHeight(this);
            this.$$item[0].style.height = height + "px";
            if (this.leftList) {
                //this.leftList.resize(height - this.$$footer.outerHeight() - this.$$header.outerHeight() - (this.$$body.outerHeight() - this.$$body.innerHeight()));
                this.$$body.height(height - (this.$$footer.outerHeight() + this.$$header.outerHeight()));
                if (this.box) {
                    this.box.$$body.height(height - (this.$$footer.outerHeight() + this.$$header.outerHeight()));
                }
                this.leftList.resize(this.$$body.height());
            }
        }
    },
    dispose: function(){
        if (this.$$title) {
            this.$$title.unbind();
        }
        delete this.box;
        delete this.bar;
        if (this.leftList) 
            delete this.leftList;
    }
});
