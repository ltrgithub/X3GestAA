"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var formatApi = require('syracuse-ui/lib/fusion/field/formatApi');
var FusionBar = require('syracuse-ui/lib/fusion/article/fusionBar').FusionBar;
var NavigationList = require("syracuse-ui/lib/fusion/field/collection/leftList").NavigationList;
var requestActions = require('../core/client/sap/srvactions');
var cvgPageConverter = require('syracuse-x3/lib/cvgPageConverter');

var _fieldTypes = {
	"application/x-choice": require('syracuse-ui/lib/fusion/field/choiceField').FusionChoiceField,
	"application/x-boolean": require('syracuse-ui/lib/field/booleanField').BooleanField,
	"application/x-date": require('syracuse-ui/lib/field/datetimeField').DateTimeField,
	"application/x-integer": require('syracuse-ui/lib/field/numericField').NumericField,
	"image": require('syracuse-ui/lib/fusion/field/imageField').FusionImageField,
	"application/x-exportxls": require('syracuse-ui/lib/fusion/field/exportXlsField').ExportXlsField,
	"application/x-binary": require('/syracuse-ui/lib/fusion/field/documentField').CvgDocumentField
};
_fieldTypes["application/x-time"] = _fieldTypes["application/x-datetime"] = _fieldTypes["application/x-date"];
_fieldTypes["application/x-decimal"] = _fieldTypes["application/x-real"] = _fieldTypes["application/x-integer"];
var vignetteFormats = {
	"$dhtml": require('syracuse-ui/lib/fusion/field/htmlVignetteField').DHTMLVignetteField,
};

function SheetPage() {}

exports.SheetPage = helpers.defineClass(SheetPage, DesktopPage, {
	loadBox: function(initData) {
		this.isBookmarkEnabled = true;
		this.isFusionPage = true;
		if (!this.$prototype.$fusionBar) {
			var $rootItems = this.$item.$layout.$items;
			if ($rootItems && $rootItems.length == 2) {
				if ($rootItems[0].$items && $rootItems[0].$items[0].$category == "fusionBar") {
					this.$prototype.$fusionBar = $rootItems[0].$items[0];
					this.$item.$layout = $rootItems[1];
				}
			}
		} else {
			if (!this.$item.$isSimplified) {
				var test = JSON.stringify(this.$item.$layout);
				this.$item.$layout = syra_site.layoutUpdater.cleanConvergenceSetting(this.$item.$layout);
				this.$item.$isSimplified = true;
			}
		}
		this.$breadCrumb = [];
		if (this.$item.externalAdapter && this.$item.externalAdapter.sheets && this.$item.externalAdapter.sheets.length > 0) {
			for (var i = 0; i < this.$item.externalAdapter.sheets.length; i++) {
				this.$breadCrumb.push(this.$item.externalAdapter.sheets[i].getTitle());
			}
		}
		DesktopPage.prototype.loadBox.call(this, initData);
		this.loadFusionBar();

		this.ensureSiteFusionHeader();
		this.setHeaderLinkState();
		syra_site.fusionGateway.showSiteFusionHeader(true);
	},
	onBreadcrumbClick: function(picker, event) {
		this.externalAdapter.onCloseSheet(this, event);
	},
	appendPageMenus: function(slot) {
		if (this.$item && this.$item.$menus && this.$item.$menus.length) {
			this.$item.$menus[0].$isMenusBag = true;
		}
		DesktopPage.prototype.appendPageMenus.call(this, slot);
	},
	drawBox: function() {
		DesktopPage.prototype.drawBox.call(this);
		this.domItem.setAttribute("data-s-fusion-page", "1");
	},
	loadFusionBar: function() {
		if (this.$prototype.$fusionBar) {
			if (!this.fusionBar) {
				(this.fusionBar = new FusionBar()).load(this, this.$prototype.$fusionBar);
			}
		}
	},
	ensureSiteFusionHeader: function() {
		if (!syra_site.fusionHeaderHomeLink) {
			var cvgAct = requestActions.getSrvAction("SRV_ADXEXECUTE");
			syra_site.fusionHeaderFunctionLink = syra_site.loadNewItem(syra_site.headerTop, {
				$bind: cvgAct,
				$category: "link",
				$noText: true,
				$skin: "s-site-func-link",
				$act: cvgAct
			});
			syra_site.fusionHeaderFunctionLink.setMenu({
				$title: syra_local.fusionHeaderFunctionLink
			});
			syra_site.fusionHeaderHomeLink = syra_site.loadNewItem(syra_site.headerTop, {
				$bind: "$home",
				$category: "link",
				$noText: true,
				$skin: "s-site-fusion-home"
			});
			syra_site.fusionHeaderHomeLink.setMenu({
				$title: syra_local.userProfile_siteTabLink
			});
			syra_site.fusionHeaderHomeLink.$target = "blank";
		}
	},
	resizeArticle: function(resize) {
		if (this._displayded !== false) {
			DesktopPage.prototype.resizeArticle.call(this, resize);
		}

	},
	setHeaderLinkState: function() {
		var meta = {
			"$links": {}
		}, id = requestActions.getSrvAction("SRV_ADXEXECUTE");
		meta.$links[id] = {
			"$isHidden": false,
			"$isDisabled": !(!this.$facet || syraUtil.isFacetWithGotoFct(this.$facet))
		};
		syra_site.applyChange(meta);
	},
	bind: function(item, $bind) {
		(this.boundFields[$bind] = this.boundFields[$bind] || []).push(item);
		var data, $fusionPageMeta = syraUtil.getFusionPageMeta(this);
		if ($fusionPageMeta && $fusionPageMeta.winModel && (data = $fusionPageMeta.winModel.getDataStoreValue($bind, null, true))) {
			if (!item.isList) {
				item.setDataBind(data.val, data.rcd, data.meta);
			} else {
				if (data.val) {
					item.page.applyChange(data.val);
					delete data.val[$bind];
				}
				if (data.meta) {
					item.page.applyChange(data.meta);
				}
			}
		}
	},
	createField: function($field, $item, boxParent, $class) {
		var field, fieldClass;
		var fusionController, fusionSession, numSettings;
		switch ($class) {
			case "application/x-array":
				if ($item.$isNavigationList || this.isNavigationListItem($item.$bind, true)) {
					fieldClass = NavigationList;
					$item.$format = $item.$format || "grid";
				} else {
					//Hack LV : layout popupview for all grid waitting proto
					//TODO : updating proto
					$item.$popupCard = {
						$layout: {
							$items: []
						}
					};
					var $binds = Object.keys($field.$item.$properties);
					var $row;
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						if (!$field.$item.$properties[$binds[ii]].$isExcluded) {
							if ($row && $row.$items.length == 3) {
								$row = null;
							}
							if (!$row) {
								$item.$popupCard.$layout.$items.push($row = {
									$layoutType: "row",
									$items: []
								});
							}
							$row.$items.push({
								$bind: $binds[ii]
							});
						}
					}
					if ($row && $row.$items.length < 3) {
						while ($row.$items.length < 3) {
							$row.$items.push({
								$category: "space"
							});
						}
					}
				}
				break;
			case "application/x-password":
				fieldClass = _fieldTypes[$class];
				$item.$isConfirmDisabled = true;
				break;
			case "image":
				fieldClass = _fieldTypes[$class];
				$field.$url = syraUtil.getFusionController(boxParent).getImageUrl(($item && $item.$bind) ? syraUtil.getFusionPageMeta(this).winId + $item.$bind : null);
				break;
			case "application/x-vignette":
				fieldClass = vignetteFormats[$field.$format];
				break;
			case "application/x-document":
				if ($field.$contentType === "application/x-exportxls") {
					fieldClass = _fieldTypes["application/x-exportxls"];
					$field.$url = syraUtil.getFusionController(boxParent).getDocumentUrl(($item && $item.$bind) ? syraUtil.getFusionPageMeta(this).winId + $item.$bind : null);
				} else {
					fieldClass = _fieldTypes[$class];
				}
				break;
			default:
				fieldClass = _fieldTypes[$class];
				break;
		}
		if (fieldClass) {
			field = new fieldClass();
			field.$field = $field;
			if ($class == "application/x-boolean") {
				field.statusValues = {
					on: sapUtil.check.on,
					off: sapUtil.check.off
				};
			} else
			if ($class === "application/x-date" || $class === "application/x-time" || $class === "application/x-datetime") {
				field.formatEx = {
					"formatApi": formatApi.getApi($class),
					"localFormat": formatApi.getLocalFormat($class),
					"localFormatDisplay": formatApi.getLocalFormat($class, $field.$format),
					"formatObj": formatApi.processFormat(formatApi.getLocalFormat($class))
				};
				field.formatEx._formatInput = field.formatEx.formatApi.formatInput;
			} else
			if ($class === "application/x-integer" || $class === "application/x-decimal" || $class === "application/x-real") {
				fusionSession = ((fusionController = syraUtil.getFusionController(boxParent)) ? fusionController.getSession() : null);
				numSettings = fusionSession ? fusionSession.getRegional(false, true) : {};
				field.formatEx = {
					"formatApi": formatApi.getApi($class),
					"numFormatObj": formatApi.getLocale().getNumberFormatObj($class, numSettings.decimalSep || ".", numSettings.thousandSep || "", 3),
					"_checkSep": false
				};
				field.formatEx.localFormat = field.formatEx.numFormatObj.numFormat;
				field.formatEx._formatInput = field.formatEx.formatApi.formatInput;
			}
		}
		return field;
	},
	getCurrNavigationList: function() {
		var list;
		if (this.fusionBar && this.fusionBar.openedBlock) {
			list = this.fusionBar.openedBlock.leftList;
		}
		return list;
	},
	isNavigationListItem: function($bind, listItem) {
		// Same as "sapUtil.isListTab()" ... but shortcut to avoid multiple calls
		return $bind && $bind.charAt(0) === sapUtil.specialScrnId.leftZone && (!listItem || $bind.length == 2);
	},
	getScreenInstFromRank: function(rank, isTab, isLeftList, isButton) {
		return sapUtil.getScreenInst(rank, isTab, isLeftList, isButton);
	},
	getFieldScope: function(fiedId, isCell, isSec) {
		var scope = {}, tabSec;
		if (isCell) {
			scope.rank = parseInt(sapUtil.getFieldId(fiedId), 10);
			scope.isCell = true;
		} else
		if (isSec) {
			tabSec = sapUtil.isFolderTab(fiedId);
			scope.sectionRank = sapUtil.getScreenRank(tabSec || fiedId);
			scope.sectionId = sapUtil.getScreenId(tabSec || fiedId);
			scope.isTabSec = tabSec;
		} else {
			if (!(scope.isArray = sapUtil.isBlockInst(fiedId))) {
				scope.rank = parseInt(sapUtil.getFieldId(fiedId), 10);
			} else {
				scope.rank = 0;
			}
			scope.sectionRank = sapUtil.getScreenRank(fiedId);
			scope.sectionId = sapUtil.getScreenId(fiedId);
			scope.blockRank = sapUtil.getBlockRank(fiedId);
		}
		return scope;
	},
	applyShortCuts: function(shortcurts, event, focusField) {
		if (!focusField) {
			focusField = (this.focusField && !this.focusField.disposed) ? this.focusField : null;
		}
		if (shortcurts.esc) {
			if (shortcurts.f5) {
				//refresh
				syra_menus.clickMenu(this, "2823");
				return true;
			}
			if (shortcurts.f6) {
				syra_menus.clickMenu(this, "1172");
				return true;
			}
			if (shortcurts.f7 || (shortcurts[":"] && shortcurts.shift) || shortcurts.s || shortcurts.divide) {
				//gotofunction
				syra_menus.clickMenu(this, "1186");
				return true;
			}
			if (shortcurts.f9) {
				this.focusField && syra_menus.tunnel.click(this.focusField);
				return true;
			}
			if (shortcurts.n) {
				syra_menus.clickMenu(this, "1115");
				return true;
			}
			if (shortcurts.tab) {
				//nextFieldConvGrid
				if (this.focusField && this.focusField.arrayLevel === "cell") {
					this.focusField.page.externalAdapter.onFieldClickPicker({
						"field": this.focusField,
						"pickerType": "cancelEdit"
					});
				}
				return true;
			}
			if ((shortcurts.h && (shortcurts.a || shortcurts.l)) || shortcurts.f11) {
				if (this.fusionBar) {
					this.fusionBar.collapse();
				}
				if (shortcurts.l) {
					return true; // shortcut only for fusionbar
				}
				//not return to apply default hide
			}
		}
		return DesktopPage.prototype.applyShortCuts.call(this, shortcurts, event, focusField);
	},
	ensurePersistPrototype: function() {
		if (!this.$persistPrototype) {
			this.$persistPrototype = helpers.object.clone(this.$prototype, true);
		}
		if (this.$persistPrototype.$convertState != "persistent") {
			cvgPageConverter.makePersistent(this.$persistPrototype);
		}
		return this.$persistPrototype;
	},
	makeArticlePersistent: function($article) {
		if (this.$prototype.$generatorVersion) {
			cvgPageConverter.makePersistent(helpers.object.clone(this.$prototype, true), $article);
			$article.$generatorVersion = 1;
		}
	},
	convertPersistToVolatil: function($article) {
		if ($article && $article.$generatorVersion) {
			var persist = this.ensurePersistPrototype();
			if (this.$prototype.$convertState == "persistent") {
				persist = this.$prototype; //ensure proto is converted
			} else {
				persist = helpers.object.clone(persist, true);
			}
			cvgPageConverter.makeVolatile(persist, $article);
		}
	},
	initializeArticle: function($itemPage) {
		var $protoArticle = this.$prototype.$article;
		var $article = $itemPage.$representation.$article;
		if ($article) {
			delete $article.$menus;
			this.convertPersistToVolatil($article);
			this.convertPersistToVolatil($protoArticle);
		} else {
			$article = $protoArticle;
			this.convertPersistToVolatil($protoArticle);
		}
		$article = this.ensureDefaultArticle($article, this.$prototype);
		if (this.$prototype && !this.$prototype.$fusionBar && $protoArticle) {
			this.$prototype.$fusionBar = $protoArticle.$fusionBar;
			delete $protoArticle.$fusionBar;
		}
		return $article;
	},
	dispose: function() {
		delete this.externalAdapter;
		syraUtil.deleteFusionPageMeta(this);
		DesktopPage.prototype.dispose.call(this);
	}
});