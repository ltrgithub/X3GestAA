"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var formatApi = require('syracuse-ui/lib/fusion/field/formatApi');
var FusionBar = require('syracuse-ui/lib/fusion/article/fusionBar').FusionBar;
var requestActions = require('../core/client/sap/srvactions');
var cvgPageConverter = require('syracuse-x3/lib/cvgPageConverter');

var _fieldTypes = {
	"application/x-choice": require('syracuse-ui/lib/fusion/field/choiceField').FusionChoiceField,
	"application/x-boolean": require('syracuse-ui/lib/field/booleanField').BooleanField,
	"application/x-date": require('syracuse-ui/lib/field/datetimeField').DateTimeField,
	"application/x-integer": require('syracuse-ui/lib/field/numericField').NumericField,
	"image": require('syracuse-ui/lib/fusion/field/imageField').FusionImageField,
	"application/x-exportxls": require('syracuse-ui/lib/fusion/field/exportXlsField').ExportXlsField,
	"application/x-binary": require('syracuse-ui/lib/fusion/field/documentField').CvgDocumentField
};
_fieldTypes["application/x-time"] = _fieldTypes["application/x-datetime"] = _fieldTypes["application/x-date"];
_fieldTypes["application/x-decimal"] = _fieldTypes["application/x-real"] = _fieldTypes["application/x-integer"];
var vignetteFormats = {
	"$dhtml": require('syracuse-ui/lib/fusion/field/htmlVignetteField').DHTMLVignetteField,
};

function SheetPage() {}

exports.SheetPage = helpers.defineClass(SheetPage, DesktopPage, {
	loadBox: function(initData) {
		this.isBookmarkEnabled = true;
		this.isFusionPage = true;
		if (!this.$prototype.$fusionBar) {
			var $rootItems = this.$item.$layout.$items;
			if ($rootItems && $rootItems.length == 2) {
				if ($rootItems[0].$items && $rootItems[0].$items[0].$category == "fusionBar") {
					this.$prototype.$fusionBar = $rootItems[0].$items[0];
					this.$item.$layout = $rootItems[1];
				}
			}
		} else {
			if (!this.$item.$isSimplified) {
				var test = JSON.stringify(this.$item.$layout);
				this.$item.$layout = syra_site.layoutUpdater.cleanConvergenceSetting(this.$item.$layout);
				this.$item.$isSimplified = true;
			}
		}

		DesktopPage.prototype.loadBox.call(this, initData);
		this.loadFusionBar();

		this.ensureSiteFusionHeader();
		this.setHeaderLinkState();
		syra_site.fusionGateway.showSiteFusionHeader(true);
	},
	onBreadcrumbClick: function(event, btn) {
		this.externalAdapter.onCloseSheet(this, event);
	},
	loadFusionBar: function() {
		if (this.$prototype.$fusionBar) {
			if (!this.fusionBar) {
				(this.fusionBar = new FusionBar()).load(this, this.$prototype.$fusionBar);
			}
		}
	},
	ensureSiteFusionHeader: function() {
		if (!syra_site.fusionHeaderHomeLink) {
			var cvgAct = requestActions.getSrvAction("SRV_ADXEXECUTE");
			syra_site.fusionHeaderFunctionLink = syra_site.loadNewItem(syra_site.headerTop, {
				$bind: cvgAct,
				$category: "link",
				$noText: true,
				$skin: "s-site-func-link",
				$act: cvgAct,
				$shortCutTip: "ESC F7, ESC S, ESC ?"
			});
			syra_site.fusionHeaderFunctionLink.setMenu({
				$title: syra_local.fusionHeaderFunctionLink
			});
			syra_site.fusionHeaderHomeLink = syra_site.loadNewItem(syra_site.headerTop, {
				$bind: "$home",
				$category: "link",
				$noText: true,
				$skin: "s-site-fusion-home",
				$shortCutTip: "ESC G H"
			});
			syra_site.fusionHeaderHomeLink.setMenu({
				$title: syra_local.userProfile_siteTabLink
			});
			syra_site.fusionHeaderHomeLink.$target = "blank";
		}
	},
	setHeaderLinkState: function() {
		var meta = {
			"$links": {}
		}, id = requestActions.getSrvAction("SRV_ADXEXECUTE");
		meta.$links[id] = {
			"$isHidden": false,
			"$isDisabled": !(!this.$facet || syraUtil.isFacetWithGotoFct(this.$facet))
		};
		syra_site.applyChange(meta);
	},
	bind: function(item, $bind) {
		(this.boundFields[$bind] = this.boundFields[$bind] || []).push(item);
		var data, $fusionPageMeta = syraUtil.getFusionPageMeta(this);
		if ($fusionPageMeta && $fusionPageMeta.winModel && (data = $fusionPageMeta.winModel.getDataStoreValue($bind, null, true))) {
			if (!item.isArrayField) {
				item.setDataBind(data.val, data.rcd, data.meta);
			} else {
				if (data.val) {
					item.page.applyChange(data.val);
					delete data.val[$bind];
				}
				if (data.meta) {
					item.page.applyChange(data.meta);
				}
			}
		}
	},
	createField: function($field, $item, boxParent, $class) {
		var field, fieldClass;
		var fusionController, fusionSession, numSettings;
		switch ($class) {
			case "application/x-array":
				if ($item.$isNavigationList || this.isNavigationListItem($item.$bind, true)) {
					$field.$isFusionNavigationList = true;
					$item.$format = $item.$format || "grid";
					$item.$cssCell = "s-grid-navig-cell";
				} else {
					$field.$useContiguousSelection = true;
					$field.$isEntityFusionList = true;
					if (!$field.$treeview) {
						if ($item.$selectMode == undefined) {
							$item.$selectMode = "multi";
						}
						$item.$selectByRowIndex = $item.$isRowIndexVisible = true;
					}
				}
				break;
			case "application/x-password":
				fieldClass = _fieldTypes[$class];
				$item.$isConfirmDisabled = true;
				break;
			case "image":
				fieldClass = _fieldTypes[$class];
				$field.$url = syraUtil.getFusionController(boxParent).getImageUrl(($item && $item.$bind) ? syraUtil.getFusionPageMeta(this).winId + $item.$bind : null);
				break;
			case "application/x-vignette":
				fieldClass = vignetteFormats[$field.$format];
				break;
			case "application/x-document":
				if ($field.$contentType === "application/x-exportxls") {
					fieldClass = _fieldTypes["application/x-exportxls"];
					$field.$url = syraUtil.getFusionController(boxParent).getDocumentUrl(($item && $item.$bind) ? syraUtil.getFusionPageMeta(this).winId + $item.$bind : null);
				} else {
					fieldClass = _fieldTypes[$class];
				}
				break;
			default:
				fieldClass = _fieldTypes[$class];
				break;
		}
		if (fieldClass) {
			field = new fieldClass();
			field.$field = $field;
			switch ($class) {
				case "application/x-boolean":
					field.statusValues = {
						on: sapUtil.check.on,
						off: sapUtil.check.off
					};
					break;
				case "application/x-date":
				case "application/x-time":
				case "application/x-datetime":
					field.formatEx = {
						"formatApi": formatApi.getApi($class),
						"localFormat": formatApi.getLocalFormat($class),
						"localFormatDisplay": formatApi.getLocalFormat($class, $field.$format),
						"formatObj": formatApi.processFormat(formatApi.getLocalFormat($class))
					};
					field.formatEx._formatInput = field.formatEx.formatApi.formatInput;
					break;
				case "application/x-integer":
				case "application/x-decimal":
				case "application/x-real":
					fusionSession = ((fusionController = syraUtil.getFusionController(boxParent)) ? fusionController.getSession() : null);
					numSettings = fusionSession ? fusionSession.getRegional(false, true) : {};
					field.formatEx = {
						"formatApi": formatApi.getApi($class),
						"numFormatObj": formatApi.getLocale().getNumberFormatObj($class, numSettings.decimalSep || ".", numSettings.thousandSep || "", 3),
						"_checkSep": false
					};
					field.formatEx.localFormat = field.formatEx.numFormatObj.numFormat;
					field.formatEx._formatInput = field.formatEx.formatApi.formatInput;
					break;

			}
		}
		return field;
	},
	getCurrNavigationList: function() {
		return this.fusionBar && this.fusionBar.openedBlock && this.fusionBar.openedBlock.leftList;
	},
	isNavigationListItem: function($bind, listItem) {
		// Same as "sapUtil.isListTab()" ... but shortcut to avoid multiple calls
		return $bind && $bind.charAt(0) === sapUtil.specialScrnId.leftZone && (!listItem || $bind.length == 2);
	},
	getScreenInstFromRank: function(rank, isTab, isLeftList, isButton) {
		return sapUtil.getScreenInst(rank, isTab, isLeftList, isButton);
	},
	getFieldScope: function(fiedId, isCell, isSec) {
		var scope = {}, tabSec;
		if (isCell) {
			scope.rank = parseInt(sapUtil.getFieldId(fiedId), 10);
			scope.isCell = true;
		} else
		if (isSec) {
			tabSec = sapUtil.isFolderTab(fiedId);
			scope.sectionRank = sapUtil.getScreenRank(tabSec || fiedId);
			scope.sectionId = sapUtil.getScreenId(tabSec || fiedId);
			scope.isTabSec = tabSec;
		} else {
			if (!(scope.isArray = sapUtil.isBlockInst(fiedId))) {
				scope.rank = parseInt(sapUtil.getFieldId(fiedId), 10);
			} else {
				scope.rank = 0;
			}
			scope.sectionRank = sapUtil.getScreenRank(fiedId);
			scope.sectionId = sapUtil.getScreenId(fiedId);
			scope.blockRank = sapUtil.getBlockRank(fiedId);
		}
		return scope;
	},

	ensurePersistPrototype: function() {
		if (!this.$persistPrototype) {
			this.$persistPrototype = helpers.object.clone(this.$prototype, true);
		}
		if (this.$persistPrototype.$convertState != "persistent") {
			cvgPageConverter.makePersistent(this.$persistPrototype);
		}
		return this.$persistPrototype;
	},
	makeArticlePersistent: function($article) {
		if (this.$prototype.$generatorVersion) {
			cvgPageConverter.makePersistent(helpers.object.clone(this.$prototype, true), $article);
			$article.$generatorVersion = 1;
		}
		if (this.$prototype.$generatorBuild) {
			$article.$generatorBuild = this.$prototype.$generatorBuild;
		}
	},
	convertPersistToVolatil: function($article) {
		if ($article && $article.$generatorVersion) {
			var persist = this.ensurePersistPrototype();
			if (this.$prototype.$convertState == "persistent") {
				persist = this.$prototype; //ensure proto is converted
			} else {
				persist = helpers.object.clone(persist, true);
			}
			cvgPageConverter.makeVolatile(persist, $article);
		}
	},
	initializePage: function($itemPage) {
		var $protoArticle = this.$prototype.$article;
		var $article = $itemPage.$representation.$article;
		if ($article) {
			delete $article.$menus;
			this.convertPersistToVolatil($article);
			this.convertPersistToVolatil($protoArticle);
		} else {
			$article = $protoArticle;
			this.convertPersistToVolatil($protoArticle);
		}
		$article = this.ensureDefaultArticle($article, this.$prototype);
		if (this.$prototype && !this.$prototype.$fusionBar && $protoArticle) {
			this.$prototype.$fusionBar = $protoArticle.$fusionBar;
			delete $protoArticle.$fusionBar;
		}
		return $article;
	},

	validateKeyPress: function(charCode, event) {
		if (event.keyCode != 13) {
			if (this.shortcutSpyerList && this.shortcutSpyerList.validateKeyPress) {
				return this.shortcutSpyerList.validateKeyPress(charCode, event);
			}
			return true;
		}
	},

	dispose: function() {
		delete this.externalAdapter;
		syraUtil.deleteFusionPageMeta(this);
		DesktopPage.prototype.dispose.call(this);
	}
});