"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var formatApi = require('syracuse-ui/lib/fusion/field/formatApi');
var FusionBar = require('syracuse-ui/lib/fusion/article/fusionBar').FusionBar;
var NavigationList = require("syracuse-ui/lib/fusion/field/collection/leftList").NavigationList;

var _fieldTypes = {
    "application/x-choice": require('syracuse-ui/lib/fusion/field/choiceField').FusionChoiceField,
    "application/x-boolean": require('syracuse-ui/lib/field/booleanField').BooleanField,
    "application/x-tree$xstd": require("syracuse-ui/lib/fusion/field/collection/listgridtree").LGridTreeStd,
    "application/x-tree$xpick": require("syracuse-ui/lib/fusion/field/collection/listgridtree").LGridTreePick,
    "application/x-tree$xrec": require("syracuse-ui/lib/fusion/field/collection/listgridtree").LGridTreeRec,
    "application/x-date": require('syracuse-ui/lib/field/datetimeField').DateTimeField,
    "application/x-integer": require('syracuse-ui/lib/field/numericField').NumericField,
    "image": require('syracuse-ui/lib/fusion/field/imageField').FusionImageField
    //"application/x-xslgraphic": require('./xslGraphic').XslGraphic,
};
_fieldTypes["application/x-time"] = _fieldTypes["application/x-datetime"] = _fieldTypes["application/x-date"];
_fieldTypes["application/x-decimal"] = _fieldTypes["application/x-real"] = _fieldTypes["application/x-integer"];

function cleanLayoutSetting($layout, $parentLayout){
    if ($layout && $layout.$items) {
        if ($layout.$layoutType == "row") {
            if ($layout.$items && $layout.$items.length == 1) {
                $layout = $layout.$items[0];
                if ($layout.$layout) {
                    $layout.$layout = cleanLayoutSetting($layout.$layout);
                }
                else {
                    if ($layout.$layoutType) {
                        $layout = cleanLayoutSetting($layout);
                    }
                }
            }
        }
        if ($layout.$items) {
            for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
                var $child = $layout.$items[ii];
                if ($child.$layout) {
                    $child.$layout = cleanLayoutSetting($child.$layout);
                }
                else {
                    if ($child.$layoutType) {
                        $layout.$items[ii] = cleanLayoutSetting($child);
                    }
                }
            }
        }
    }
    return $layout;
}

exports.cleanLayoutSetting = cleanLayoutSetting;

function SheetPage(){
}

exports.SheetPage = helpers.defineClass(SheetPage, DesktopPage, {
    loadBox: function(initData){
        this.$isFusionPage = true;
        if (!this.$item.$fusionBar) {
            var $rootItems = this.$item.$layout.$items;
            if ($rootItems && $rootItems.length == 2) {
                if ($rootItems[0].$items && $rootItems[0].$items[0].$category == "fusionBar") {
                    this.$item.$fusionBar = $rootItems[0].$items[0];
                    this.$item.$layout = $rootItems[1];
                }
            }
        }
        else {
            if (!this.$item.$isSimplified) {
                var test = JSON.stringify(this.$item.$layout);
                this.$item.$layout = cleanLayoutSetting(this.$item.$layout);
                this.$item.$isSimplified = true;
            }
        }
        DesktopPage.prototype.loadBox.call(this, initData);
        this.loadFusionBar();
    },
    drawBox: function(){
        DesktopPage.prototype.drawBox.call(this);
        this.isFusionPage = true;
        this.$$item.attr("data-s-fusion-page", "1");
    },
    loadFusionBar: function(){
        if (this.$item.$fusionBar && !this.fusionBar) {
            (this.fusionBar = new FusionBar()).load(this, this.$item.$fusionBar);
        }
    },
    reloadLayout: function($item){
        if (this.fusionBar) {
            if (this.fusionBar._slot) {
                document.site.removeDomChild(this.fusionBar._slot);
            }
            document.controller.disposeObject(this.fusionBar);
            this.fusionBar = null;
        }
        DesktopPage.prototype.reloadLayout.call(this, $item);
        this.$fusionPageMeta.winModel.initializeFieldsColl(this);
        this.loadFusionBar();
        this.applyActionLinkChange(this.$prototype);
        this.applyActionLinkChange(this.dataset);
    },
    bind: function(item, $bind){
        var data, $fusionPageMeta = syraUtil.getFusionPageMeta(this);
        (this.boundFields[$bind] = this.boundFields[$bind] || []).push(item);
        if ($fusionPageMeta && $fusionPageMeta.winModel && (data = $fusionPageMeta.winModel.getDataStoreValue($bind, null, true))) {
            if (syraUtil.getFieldType(item) !== syraUtil.dataTypes.collectionType) {
                item.setDataBind(data.val, data.rcd, data.meta);
            }
            else {
                if (data.val) {
                    item.page.applyChange(data.val);
                    delete data.val[$bind];
                }
                if (data.meta) {
                    item.page.applyChange(data.meta);
                }
            }
        }
    },
    createField: function($field, $item, boxParent, $class){
        var field, fieldClass;
        var fusionController, fusionSession, numSettings;
        if ($item.$isNavigationList || ($class === "application/x-array" && sapUtil.isListTab($item.$bind))) {
            fieldClass = NavigationList;
            $item.$format = "grid";
        }
        else {
            fieldClass = _fieldTypes[$class];
            switch ($class) {
                case "application/x-password":
                    $item.$isConfirmDisabled = true;
                    break;
                case "application/x-tree":
                    $class += (("$" + $item.$format) || "");
                    fieldClass = _fieldTypes[$class];
                    break;
                case "image":
                    $field.$url = syraUtil.getFusionController(boxParent).getImageUrl(($item && $item.$bind) ? syraUtil.getFusionPageMeta(this).winId + $item.$bind : null);
                    break;
            }
        }
        if (fieldClass) {
            field = new fieldClass();
            field.$field = $field;
            if ($class == "application/x-boolean") {
                field.statusValues = {
                    on: sapUtil.check.on,
                    off: sapUtil.check.off
                };
            }
            else 
                if ($class === "application/x-date" || $class === "application/x-time" || $class === "application/x-datetime") {
                    field.formatEx = {
                        "formatApi": formatApi.getApi($class),
                        "localFormat": formatApi.getLocalFormat($class),
                        "localFormatDisplay": formatApi.getLocalFormat($class, $field.$format),
                        "formatObj": formatApi.processFormat(formatApi.getLocalFormat($class))
                    };
                    field.formatEx._formatInput = field.formatEx.formatApi.formatInput;
                }
                else 
                    if ($class === "application/x-integer" || $class === "application/x-decimal" || $class === "application/x-real") {
                        fusionSession = ((fusionController = syraUtil.getFusionController(boxParent)) ? fusionController.getSession() : null);
                        numSettings = fusionSession ? fusionSession.getRegional(false, true) : {};
                        field.formatEx = {
                            "formatApi": formatApi.getApi($class),
                            "numFormatObj": formatApi.getLocale().getNumberFormatObj($class, numSettings.decimalSep || ".", numSettings.thousandSep || "", 3),
                            "_checkSep": false
                        };
                        field.formatEx.localFormat = field.formatEx.numFormatObj.numFormat;
                        field.formatEx._formatInput = field.formatEx.formatApi.formatInput;
                    }
        }
        return field;
    },
    dispose: function(){
        delete this.$$fusionMemHost;
        delete this.externalAdapter;
        syraUtil.deleteFusionPageMeta(this);
        DesktopPage.prototype.dispose.call(this);
    }
});
