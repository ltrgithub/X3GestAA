"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var formatApi = require('syracuse-ui/lib/fusion/field/formatApi');
var FusionBar = require('syracuse-ui/lib/fusion/article/fusionBar').FusionBar;
var NavigationList = require("syracuse-ui/lib/fusion/field/collection/leftList").NavigationList;
var requestActions = require('../core/client/sap/srvactions');
var localize = require('syracuse-ui/lib/fusion/tools/localize').localize;
var cvgPageConverter = require('syracuse-x3/lib/cvgPageConverter');

var _fieldTypes = {
    "application/x-choice": require('syracuse-ui/lib/fusion/field/choiceField').FusionChoiceField,
    "application/x-boolean": require('syracuse-ui/lib/field/booleanField').BooleanField,
    "application/x-date": require('syracuse-ui/lib/field/datetimeField').DateTimeField,
    "application/x-integer": require('syracuse-ui/lib/field/numericField').NumericField,
    "image": require('syracuse-ui/lib/fusion/field/imageField').FusionImageField,
    "application/x-exportxls": require('syracuse-ui/lib/fusion/field/exportXlsField').ExportXlsField,
    "application/x-binary": require('/syracuse-ui/lib/fusion/field/documentField').CvgDocumentField
};
_fieldTypes["application/x-time"] = _fieldTypes["application/x-datetime"] = _fieldTypes["application/x-date"];
_fieldTypes["application/x-decimal"] = _fieldTypes["application/x-real"] = _fieldTypes["application/x-integer"];

function cleanLayoutSetting($layout, $parentLayout){
    if ($layout && $layout.$items) {
        if ($layout.$layoutType == "row") {
            if ($layout.$items && $layout.$items.length == 1) {
                $layout = $layout.$items[0];
                if ($layout.$layout) {
                    $layout.$layout = cleanLayoutSetting($layout.$layout);
                }
                else {
                    if ($layout.$layoutType) {
                        $layout = cleanLayoutSetting($layout);
                    }
                }
            }
        }
        if ($layout.$items) {
            for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
                var $child = $layout.$items[ii];
                if ($child.$layout) {
                    $child.$layout = cleanLayoutSetting($child.$layout);
                }
                else {
                    if ($child.$layoutType) {
                        $layout.$items[ii] = cleanLayoutSetting($child);
                    }
                }
            }
        }
    }
    return $layout;
}

exports.cleanLayoutSetting = cleanLayoutSetting;

function SheetPage(){
}

exports.SheetPage = helpers.defineClass(SheetPage, DesktopPage, {
    cleanLayoutSetting: function($layout, $parentLayout){
        return cleanLayoutSetting($layout, $parentLayout);
    },
    loadBox: function(initData, $initDiagnoses){
        var self = this;
        this.$isFusionPage = true;
        if (!this.$prototype.$fusionBar) {
            var $rootItems = this.$item.$layout.$items;
            if ($rootItems && $rootItems.length == 2) {
                if ($rootItems[0].$items && $rootItems[0].$items[0].$category == "fusionBar") {
                    this.$prototype.$fusionBar = $rootItems[0].$items[0];
                    this.$item.$layout = $rootItems[1];
                }
            }
        }
        else {
            if (!this.$item.$isSimplified) {
                var test = JSON.stringify(this.$item.$layout);
                this.$item.$layout = this.cleanLayoutSetting(this.$item.$layout);
                this.$item.$isSimplified = true;
            }
        }
        this.$breadCrumb = [];
        if (this.$item.externalAdapter && this.$item.externalAdapter.sheets && this.$item.externalAdapter.sheets.length > 0) {
            for (var i = 0; i < this.$item.externalAdapter.sheets.length; i++) {
                this.$breadCrumb.push(this.$item.externalAdapter.sheets[i].getTitle());
            }
        }
        DesktopPage.prototype.loadBox.call(this, initData, $initDiagnoses);
        this.$$item.delegate("." + this.$skin + "-breadcrumb-link", "click", function(event){
            self.page.externalAdapter.onCloseSheet(self, event);
            event.stopPropagation();
            return false;
        });
        this.loadFusionBar();
        this._setHeader();
        this.onWindowResize();
    },
    appendPageMenus: function(slot){
        if (this.$item && this.$item.$menus && this.$item.$menus.length) {
            this.$item.$menus[0].$isMenusBag = true;
        }
        DesktopPage.prototype.appendPageMenus.call(this, slot);
    },
    drawBox: function(){
        DesktopPage.prototype.drawBox.call(this);
        this.isFusionPage = true;
        this.$$item.attr("data-s-fusion-page", "1");
    },
    loadFusionBar: function(){
        if (this.$prototype.$fusionBar) {
            if (!this.fusionBar) {
                (this.fusionBar = new FusionBar()).load(this, this.$prototype.$fusionBar);
            }
        }
    },
    _setHeader: function(){
        var $$headerRight = $(syraUtil.pageHeaderK.rightCvgSelector);
        var $$newTab, fctItem, div, id = syraUtil.pageHeaderK.linkGotoId, cvgAct = requestActions.getSrvAction("SRV_ADXEXECUTE");
        if ($$headerRight && !$$headerRight.find("#" + id)[0]) {
            fctItem = {
                $bind: cvgAct,
                $category: "link",
                $noText: true,
                $title: localize.getMessage(null, "siteLinkFunc"),
                $skin: id + "-link",
                $act: cvgAct
            };
            div = document.createElement("div");
            div.setAttribute("id", id);
            if (!($$newTab = $$headerRight.find("#s-site-tab"))) {
                document.site.loadNewItem($$headerRight[0].appendChild(div), fctItem);
            }
            else {
                document.site.loadNewItem($$headerRight[0].insertBefore(div, $$newTab[0]), fctItem);
            }
        };
        if ($$headerRight) {
            this.setHeaderLinkState();
            syraUtil.toggleHeader(false);
        }
    },
    setHeaderLinkState: function(){
        var meta = {
            "$links": {}
        }, id = requestActions.getSrvAction("SRV_ADXEXECUTE");
        meta.$links[id] = {
            "$isHidden": false,
            "$isDisabled": !(!this.$facet || syraUtil.isFacetWithGotoFct(this.$facet))
        };
        document.site.applyChange(meta);
    },
    bind: function(item, $bind){
        var data, $fusionPageMeta = syraUtil.getFusionPageMeta(this);
        (this.boundFields[$bind] = this.boundFields[$bind] || []).push(item);
        if ($fusionPageMeta && $fusionPageMeta.winModel && (data = $fusionPageMeta.winModel.getDataStoreValue($bind, null, true))) {
            if (syraUtil.getFieldType(item) !== syraUtil.dataTypes.collectionType) {
                item.setDataBind(data.val, data.rcd, data.meta);
            }
            else {
                if (data.val) {
                    item.page.applyChange(data.val);
                    delete data.val[$bind];
                }
                if (data.meta) {
                    item.page.applyChange(data.meta);
                }
            }
        }
    },
    createField: function($field, $item, boxParent, $class){
        var field, fieldClass;
        var fusionController, fusionSession, numSettings;
        switch ($class) {
            case "application/x-array":
                if ($item.$isNavigationList || this.isNavigationListItem($item.$bind, true)) {
                    fieldClass = NavigationList;
                    $item.$format = $item.$format || "grid";
                }
                else {
                    //Hack LV : layout popupview for all grid waitting proto
                    //TODO : updating proto
                    if (!$item.$popupCard) {
                        $item.$popupCard = {
                            $layout: {
                                $items: []
                            }
                        };
                        var count = 0, items, ii;
                        for (var key in $field.$item.$properties) {
                            if (count % 3 === 0) {
                                ii = $item.$popupCard.$layout.$items.push({
                                    $layoutType: "row",
                                    $items: []
                                });
                                items = $item.$popupCard.$layout.$items[ii - 1].$items;
                            }
                            items.push({
                                $bind: key
                            });
                            count++;
                        }
                    }
                }
                break;
            case "application/x-password":
                fieldClass = _fieldTypes[$class];
                $item.$isConfirmDisabled = true;
                break;
            case "image":
                fieldClass = _fieldTypes[$class];
                $field.$url = syraUtil.getFusionController(boxParent).getImageUrl(($item && $item.$bind) ? syraUtil.getFusionPageMeta(this).winId + $item.$bind : null);
                break;
            case "application/x-document":
                if ($field.$contentType === "application/x-exportxls") {
                    fieldClass = _fieldTypes["application/x-exportxls"];
                    $field.$url = syraUtil.getFusionController(boxParent).getDocumentUrl(($item && $item.$bind) ? syraUtil.getFusionPageMeta(this).winId + $item.$bind : null);
                }
                else {
                    fieldClass = _fieldTypes[$class];
                }
                break;
            default:
                fieldClass = _fieldTypes[$class];
                break;
        }
        if (fieldClass) {
            field = new fieldClass();
            field.$field = $field;
            if ($class == "application/x-boolean") {
                field.statusValues = {
                    on: sapUtil.check.on,
                    off: sapUtil.check.off
                };
            }
            else 
                if ($class === "application/x-date" || $class === "application/x-time" || $class === "application/x-datetime") {
                    field.formatEx = {
                        "formatApi": formatApi.getApi($class),
                        "localFormat": formatApi.getLocalFormat($class),
                        "localFormatDisplay": formatApi.getLocalFormat($class, $field.$format),
                        "formatObj": formatApi.processFormat(formatApi.getLocalFormat($class))
                    };
                    field.formatEx._formatInput = field.formatEx.formatApi.formatInput;
                }
                else 
                    if ($class === "application/x-integer" || $class === "application/x-decimal" || $class === "application/x-real") {
                        fusionSession = ((fusionController = syraUtil.getFusionController(boxParent)) ? fusionController.getSession() : null);
                        numSettings = fusionSession ? fusionSession.getRegional(false, true) : {};
                        field.formatEx = {
                            "formatApi": formatApi.getApi($class),
                            "numFormatObj": formatApi.getLocale().getNumberFormatObj($class, numSettings.decimalSep || ".", numSettings.thousandSep || "", 3),
                            "_checkSep": false
                        };
                        field.formatEx.localFormat = field.formatEx.numFormatObj.numFormat;
                        field.formatEx._formatInput = field.formatEx.formatApi.formatInput;
                    }
        }
        return field;
    },
    getCurrNavigationList: function(){
        var list;
        if (this.fusionBar && this.fusionBar.openedBlock) {
            list = this.fusionBar.openedBlock.leftList;
        }
        return list;
    },
    isNavigationListItem: function($bind, listItem){
        // Same as "sapUtil.isListTab()" ... but shortcut to avoid multiple calls
        return $bind && $bind.charAt(0) === sapUtil.specialScrnId.leftZone && (!listItem || $bind.length == 2) ;
    },
    applyShortCuts: function(shortcurts, event, focusField){
        if (!focusField) {
            focusField = (this.focusField && !this.focusField.disposed) ? this.focusField : null;
        }
        if (shortcurts.esc) {
            if (shortcurts.f5) {
                //refresh
                this.clickMenu("2823");
                return true;
            }
            if (shortcurts.f6) {
                this.clickMenu("1172");
                return true;
            }
            if (shortcurts.f7 || (shortcurts[":"] && shortcurts.shift) || shortcurts.s || shortcurts.divide) {
                //gotofunction
                this.clickMenu("1186");
                return true;
            }
            if (shortcurts.f9) {
                if (this.focusField && this.focusField.clickTunnelPicker) {
                    this.focusField.clickTunnelPicker();
                }
                return true;
            }
            if (shortcurts.n) {
                this.clickMenu("1115");
                return true;
            }
            if (shortcurts.tab) {
                //nextFieldConvGrid
                if (this.focusField && this.focusField.arrayLevel === "cell") {
                    this.focusField.page.externalAdapter.onFieldClickPicker({
                        "field": this.focusField,
                        "pickerType": "cancelEdit"
                    });
                }
                return true;
            }
            if ((shortcurts.h && (shortcurts.a || shortcurts.l)) || shortcurts.f11) {
                if (this.fusionBar) {
                    this.fusionBar.collapse();
                }
                if (shortcurts.l) {
                    return true; // shortcut only for fusionbar
                }
                //not return to apply default hide
            }
        }
        return DesktopPage.prototype.applyShortCuts.call(this, shortcurts, event, focusField);
    },
    ensurePersistPrototype: function(){
        if (!this.$persistPrototype) {
            this.$persistPrototype = helpers.object.clone(this.$prototype, true);
        }
        if (this.$persistPrototype.$convertState != "persistent") {
            cvgPageConverter.makePersistent(this.$persistPrototype);
        }
        return this.$persistPrototype;
    },
    persistArticle: function($article){
        if (this.$prototype.$generatorVersion) {
            cvgPageConverter.makePersistent(helpers.object.clone(this.$prototype, true), $article);
            $article.$generatorVersion = 1;
        }
    },
    convertPersistToVolatil: function($article){
        if ($article && $article.$generatorVersion) {
            var persist = this.ensurePersistPrototype();
            if (this.$prototype.$convertState == "persistent") {
                persist = this.$prototype; //ensure proto is converted
            }
            else {
                persist = helpers.object.clone(persist, true);
            }
            cvgPageConverter.makeVolatile(persist, $article);
        }
    },
    initializeArticle: function($itemPage){
        var $protoArticle = this.$prototype.$article;
        var $article = $itemPage.$representation.$article;
        if ($article) {
            delete $article.$menus;
            this.convertPersistToVolatil($article);
            this.convertPersistToVolatil($protoArticle);
        }
        else {
            $article = $protoArticle;
            this.convertPersistToVolatil($protoArticle);
        }
        $article = this.ensureDefaultArticle($article, this.$prototype);
        if (this.$prototype && !this.$prototype.$fusionBar && $protoArticle) {
            this.$prototype.$fusionBar = $protoArticle.$fusionBar;
            delete $protoArticle.$fusionBar;
        }
        return $article;
    },
    dispose: function(){
        delete this.$$fusionMemHost;
        delete this.externalAdapter;
        syraUtil.deleteFusionPageMeta(this);
        DesktopPage.prototype.dispose.call(this);
    }
});
