"use strict";
var helpers = require('syracuse-core').helpers;
var utilEx = require('syracuse-ui/lib/fusion/tools/util');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var _culture = require('syracuse-ui/lib/fusion/field/culture');
var FusionBar = require('syracuse-ui/lib/fusion/article/fusionBar').FusionBar;
var requestActions = require('../core/client/sap/srvactions');
var cvgPageConverter = require('syracuse-x3/lib/cvgPageConverter');
var _fieldTypes = {
	"application/x-choice": require('syracuse-ui/lib/fusion/field/choiceField').FusionChoiceField,
	"application/x-boolean": require('syracuse-ui/lib/field/booleanField').BooleanField,
	"application/x-date": require('syracuse-ui/lib/field/datetimeField').DateTimeField,
	"application/x-integer": require('syracuse-ui/lib/field/numericField').NumericField,
	"image": require('syracuse-ui/lib/fusion/field/documentField').FusionImageField,
	"application/x-exportxls": require('syracuse-ui/lib/fusion/field/exportXlsField').ExportXlsField,
	"application/x-binary": require('syracuse-ui/lib/fusion/field/documentField').CvgDocumentField
};
_fieldTypes["application/x-time"] = _fieldTypes["application/x-datetime"] = _fieldTypes["application/x-date"];
_fieldTypes["application/x-decimal"] = _fieldTypes["application/x-real"] = _fieldTypes["application/x-integer"];
var vignetteFormats = {
	"$dhtml": require('syracuse-ui/lib/fusion/field/htmlVignetteField').DHTMLVignetteField,
};

function SheetPage() {}

exports.SheetPage = helpers.defineClass(SheetPage, DesktopPage, {
	load: function(initData) {
		this.isBackButtonDisabled = true;
		this.isFusionPage = true;
		if (!this.$prototype.$fusionBar) {
			var $rootItems = this.$item.$layout.$items;
			if ($rootItems && $rootItems.length == 2) {
				if ($rootItems[0].$items && $rootItems[0].$items[0].$category == "fusionBar") {
					this.$prototype.$fusionBar = $rootItems[0].$items[0];
					this.$item.$layout = $rootItems[1];
				}
			}
		} else {
			if (!this.$item.$isSimplified) {
				this.$item.$layout = syra_layout.cleanConvergenceSetting(this.$item.$layout);
				this.$item.$isSimplified = true;
			}
		}

		DesktopPage.prototype.load.call(this, initData);
		this.loadFusionBar();

		this.setHeaderLinkState();
		syra_fusion.showSiteFusionHeader(true);
	},
	onBreadcrumbClick: function(event, btn) {
		this.externalAdapter.onCloseSheet(this, event);
	},
	loadFusionBar: function() {
		if (this.$prototype.$fusionBar) {
			if (!this.fusionBar) {
				(this.fusionBar = new FusionBar()).load(this, this.$prototype.$fusionBar);
			}
		}
	},

	setHeaderLinkState: function() {
		var meta = {
			"$links": {}
		}, id = requestActions.getSrvAction("SRV_ADXEXECUTE");
		meta.$links[id] = {
			"$isHidden": false,
			"$isDisabled": !(!this.$facet || syra_fusion.syraUtil.isFacetWithGotoFct(this.$facet))
		};
		syra_site.applyChange(meta);
	},
	bind: function(item, $bind) {
		if (!this.boundFields[$bind]) {
			// Hack SAM 113584 & #7858 - see also same hack in itemManager.js
			(this.boundFields[$bind] = []).push(item);
		}
		var data, $fusionPageMeta = syra_fusion.syraUtil.getFusionPageMeta(this);
		if ($fusionPageMeta && $fusionPageMeta.winModel && (data = $fusionPageMeta.winModel.getDataStoreValue($bind, null, true))) {
			if (!item.isArrayField) {
				item.setValue(data.val, data.meta, data.rcd);
			} else {
				if (data.val) {
					item.page.applyChange(data.val);
					delete data.val[$bind];
				}
				if (data.meta) {
					item.page.applyChange(data.meta);
				}
			}
		}
	},
	createField: function($field, $item, boxParent, $class) {
		var field, fieldClass;
		var fusionController, fusionSession, numSettings;
		switch ($class) {
			case "application/x-array":
				if ($item.$isNavigationList || this.isNavigationListItem($item.$bind, true)) {
					$field.$isFusionNavigationList = true;
					$item.$format = $item.$format || "grid";
					$item.$cssCell = "s-grid-navig-cell";
					$item.$cssRow = "s-grid-navig-row";
				} else {
					$field.$useContiguousSelection = true;
					$field.$isEntityFusionList = true;
					if (!$field.$treeview) {
						if ($item.$selectMode == undefined) {
							$item.$selectMode = "multi";
						} else if ($item.$selectMode == "row" && !$field.$decorator && !$field.$cube) {
							// Hack to WA modelisation/generator issue #114809 : we force "multi" if we are not on a treeview
							$item.$selectMode = "multi";
						}
						$item.$selectByRowIndex = $item.$isRowIndexVisible = true;
					}
				}
				break;
			case "application/x-password":
				fieldClass = _fieldTypes[$class];
				$item.$isConfirmDisabled = true;
				break;
			case "image":
				fieldClass = _fieldTypes[$class];
				$field.$url = syra_fusion.syraUtil.getFusionController(boxParent).getImageUrl(($item && $item.$bind) ? syra_fusion.syraUtil.getFusionPageMeta(this).winId + $item.$bind : null);
				break;
			case "application/x-vignette":
				fieldClass = vignetteFormats[$field.$format];
				break;
			case "application/x-document":
				if ($field.$contentType === "application/x-exportxls") {
					fieldClass = _fieldTypes["application/x-exportxls"];
					$field.$url = syra_fusion.syraUtil.getFusionController(boxParent).getDocumentUrl(($item && $item.$bind) ? syra_fusion.syraUtil.getFusionPageMeta(this).winId + $item.$bind : null);
				} else {
					fieldClass = _fieldTypes[$class];
				}
				break;
			default:
				fieldClass = _fieldTypes[$class];
				break;
		}
		if (fieldClass) {
			field = new fieldClass();
			field.$field = $field;
			switch ($class) {
				case "application/x-boolean":
					field.statusValues = {
						on: syra_fusion.sapUtil.check.on,
						off: syra_fusion.sapUtil.check.off
					};
					break;
				case "application/x-date":
				case "application/x-time":
				case "application/x-datetime":
					field.formatEx = {
						formatApi: _culture.api[$class],
						localFormat: _culture.format.get($class),
						localFormatDisplay: _culture.format.get($class, $field.$format),
						formatObj: _culture.processFormat(_culture.format.get($class))
					};
					field.formatEx._formatInput = field.formatEx.formatApi.formatInput;
					break;
				case "application/x-integer":
				case "application/x-decimal":
				case "application/x-real":
					fusionSession = ((fusionController = syra_fusion.syraUtil.getFusionController(boxParent)) ? fusionController.getSession() : null);
					numSettings = fusionSession ? fusionSession.getRegional(false, true) : {};

					field.formatApi = _culture.api[$class];
					field.numFormatObj = _culture.format.getNumberFormatObj($class, numSettings.decimalSep || ".", numSettings.thousandSep || "", 3);
					field._checkSep = false;
					field.localFormat = field.numFormatObj.numFormat;
					field._formatInput = field.formatApi.formatInput;
					field.formatApi.regionalOptions = field.numFormatObj;
					break;

			}
		}
		return field;
	},
	getCurrNavigationList: function() {
		return this.fusionBar && this.fusionBar.openedBlock && this.fusionBar.openedBlock.leftList;
	},
	isNavigationListItem: function($bind, listItem) {
		// Same as "syra_fusion.sapUtil.isListTab()" ... but shortcut to avoid multiple calls
		return $bind && $bind.charAt(0) === syra_fusion.sapUtil.specialScrnId.leftZone && (!listItem || $bind.length == 2);
	},
	getScreenInstFromRank: function(rank, isTab, isLeftList, isButton) {
		return syra_fusion.sapUtil.getScreenInst(rank, isTab, isLeftList, isButton);
	},
	getFieldScope: function(fiedId, isCell, isSec) {
		var scope = {}, tabSec;
		if (isCell) {
			scope.rank = parseInt(syra_fusion.sapUtil.getFieldId(fiedId), 10);
			scope.isCell = true;
		} else
		if (isSec) {
			tabSec = syra_fusion.sapUtil.isFolderTab(fiedId);
			scope.sectionRank = syra_fusion.sapUtil.getScreenRank(tabSec || fiedId);
			scope.sectionId = syra_fusion.sapUtil.getScreenId(tabSec || fiedId);
			scope.isTabSec = tabSec;
		} else {
			if (!(scope.isArray = syra_fusion.sapUtil.isBlockInst(fiedId))) {
				scope.rank = parseInt(syra_fusion.sapUtil.getFieldId(fiedId), 10);
			} else {
				scope.rank = 0;
			}
			scope.sectionRank = syra_fusion.sapUtil.getScreenRank(fiedId);
			scope.sectionId = syra_fusion.sapUtil.getScreenId(fiedId);
			scope.blockRank = syra_fusion.sapUtil.getBlockRank(fiedId);
		}
		return scope;
	},

	ensurePersistPrototype: function() {
		if (!this.$persistPrototype) {
			this.$persistPrototype = syra_site.clone(this.$prototype);
		}
		if (this.$persistPrototype.$convertState != "persistent") {
			cvgPageConverter.makePersistent(this.$persistPrototype);
		}
		return this.$persistPrototype;
	},
	makeArticlePersistent: function($article) {
		if (this.$prototype.$generatorVersion) {
			cvgPageConverter.makePersistent(syra_site.clone(this.$prototype), $article);
			$article.$generatorVersion = 1;
		}
		if (this.$prototype.$generatorBuild) {
			$article.$generatorBuild = this.$prototype.$generatorBuild;
		}
	},
	convertPersistToVolatil: function($article) {
		if ($article && $article.$generatorVersion) {
			var persist = this.ensurePersistPrototype();
			if (this.$prototype.$convertState == "persistent") {
				persist = this.$prototype; //ensure proto is converted
			} else {
				persist = syra_site.clone(persist);
			}
			cvgPageConverter.makeVolatile(persist, $article);
		}
	},
	initializePage: function($itemPage) {
		var $protoArticle = this.$prototype.$article;
		var $article = $itemPage.$representation.$article;
		if ($article) {
			delete $article.$menus;
			this.convertPersistToVolatil($article);
			this.convertPersistToVolatil($protoArticle);
		} else {
			$article = $protoArticle;
			this.convertPersistToVolatil($protoArticle);
		}
		$article = syra_pageBuilder.ensureDefaultArticle(this, $article, this.$prototype);
		if (this.$prototype && !this.$prototype.$fusionBar && $protoArticle) {
			this.$prototype.$fusionBar = $protoArticle.$fusionBar;
			delete $protoArticle.$fusionBar;
		}
		return $article;
	},

	validateKeyPress: function(charCode, event) {
		if (event.keyCode != 13) {
			if (this.shortcutSpyerList && this.shortcutSpyerList.validateKeyPress) {
				return this.shortcutSpyerList.validateKeyPress(charCode, event);
			}
			return true;
		}
	},
	onUncaughtError: function(options) {
		var err, stack, bProcess = true,
			unCaughtObj;
		try {
			var fusionSite = syra_fusion && syra_fusion.activatedBook && syra_fusion.activatedBook.fusionSite;
			if (fusionSite && fusionSite.controller && fusionSite.controller._sapController) {
				unCaughtObj = fusionSite.uncaughtErrorObj;
				if (!fusionSite.uncaughtErrorCount || fusionSite.uncaughtErrorCount < 3) {
					if (fusionSite.uncaughtErrorCount === undefined) {
						fusionSite.uncaughtErrorCount = 1;
						fusionSite.uncaughtErrorObj = {
							"url": options.url,
							"ln": options.lineNumber,
							"err": options.error
						};
					} else
					if (fusionSite.uncaughtErrorCount == 1 && options.url === unCaughtObj.url && options.error === unCaughtObj.err && options.lineNumber === unCaughtObj.ln) {
						// Same error twvice
						bProcess = false;
					} else {
						fusionSite.uncaughtErrorCount++;
						delete fusionSite.uncaughtErrorObj;
						fusionSite.uncaughtErrorObj = {};
					}
				} else {
					bProcess = false;
				}
				if (bProcess) {
					stack = "url: " + (options.url || "?") + "\nlineNumber: " + (options.lineNumber || "-1") + "\n" + (options.error || "");
					err = [utilEx.makeDiagnosis(fusionSite._session.getlabel("error", "27", syra_fusion.getMessage("16")), 4, stack, "27", utilEx.cltFusionNice, options.message || "")];
					fusionSite.controller._sapController._sapException(null, err, {
						"typ": "DelSess",
						"panic": true
					});
				} else {
					fusionSite.controller.forceUnlockUI();
					delete fusionSite.uncaughtErrorCount;
					delete fusionSite.uncaughtErrorObj;
					syra_alert.dispose();
					options.message = fusionSite._session.getlabel("error", "28", syra_fusion.getMessage("17"));
					options.doEvent();
				}
			} else {
				options.doEvent();
			}
		} catch (ex) {
			options.doEvent();
		}
	},
	dispose: function() {
		delete this.externalAdapter;
		syra_fusion.syraUtil.deleteFusionPageMeta(this);
		DesktopPage.prototype.dispose.call(this);
	}
});