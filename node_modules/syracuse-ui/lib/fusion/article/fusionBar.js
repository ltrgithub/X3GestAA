"use strict";
var helpers = require('syracuse-core/lib/helpers');
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;

function FusionBar(){
}

exports.FusionBar = helpers.defineClass(FusionBar, null, {
    load: function(fusionPage, $fusionBar){
        this.fusionPage = fusionPage;
        this.preferences = document.site.ensurePreferences();
        this.preferences.convergenceBar = this.preferences.convergenceBar || {};
        if (this.preferences.convergenceBar.isDocked === undefined) {
            this.preferences.convergenceBar.isDocked = true;
        }
        this.$$slot = $(this._slot = document.createElement("div"));
        this._slot.className = "s-fusion-bar-slot";
        this.fusionPage.$$item.prepend(this._slot);
        
        this._bar = document.createElement("div");
        this._bar.className = "s-fusion-bar";
        this.$$bar = $(this._bar);
        this._appendHeader();
        
        
        this._body = document.createElement("div");
        this._body.className = "s-fusion-bar-body";
        this._bar.appendChild(this._body);
        
        var count = $fusionBar.$items.length;
        this.blocks = []
        for (var ii = 0; ii < count; ii++) {
            this.blocks.push(this.createBlock($fusionBar.$items[ii], ii, count));
        }
        this.$$bar.appendTo(this._slot);
        if (!this.openedBlock && count > 0) {
            this.collapseBlock(this.blocks[0], true, null, true);
        }
        this._bindEvents(true);
        this._ensureState();
    },
    onClickPicker: function(pickerId, event){
        switch (pickerId) {
            case "s-bar-dockMode":
                this.preferences.convergenceBar.isDocked = !this.preferences.convergenceBar.isDocked;
                break;
            case "s-bar-collapse":
                this.preferences.convergenceBar.isCollapsed = !this.preferences.convergenceBar.isCollapsed;
                break;
            case "s-bar-prev":
            case "s-bar-next":
                var block = this._findBlock($(event.target));
                this.collapseBlock(this.blocks[pickerId == "s-bar-prev" ? (block.index - 1) : (block.index + 1)], true);
                break;
            case "s-bar-title":
                this.collapseBlock(this._findBlock($(event.target)), true);
                break;
        }
        this._ensureState();
        this.onWindowResize();
    },
    _bindEvents: function($bind){
        var self = this;
        if ($bind) {
            self.$$slot.bind("mouseenter mouseleave", function(event){
                clearTimeout(self._closeTimeout);
                if ((event.type == "mouseleave" && !self.preferences.convergenceBar.isCollapsed && !self.preferences.convergenceBar.isDocked) ||
                (event.type == "mouseenter" && self.preferences.convergenceBar.isCollapsed)) {
                    self._closeTimeout = setTimeout(function(){
                        self.preferences.convergenceBar.isCollapsed = !self.preferences.convergenceBar.isCollapsed;
                        self._ensureState();
                        self.onWindowResize();
                    }, 300);
                }
            });
        }
        else {
            if (self.$$slot) {
                self.$$slot.unbind();
            }
        }
    },
    _appendHeader: function(){
        this._header = document.createElement("header");
        this._header.className = "s-fusion-bar-header";
        
        this.dockMode = document.createElement("a");
        this.dockMode.setAttribute("data-s-picker", "s-bar-dockMode");
        this.dockMode.className = "s-fusion-bar-docked";
        this._header.appendChild(this.dockMode);
        
        this.collapse = document.createElement("a");
        this.collapse.setAttribute("data-s-picker", "s-bar-collapse");
        this.collapse.className = "s-fusion-bar-collapse";
        this._header.appendChild(this.collapse);
        
        this._bar.appendChild(this._header);
        
        this.pickerBar = document.createElement("a");
        this.pickerBar.setAttribute("data-s-picker", "s-bar-collapse");
        this.pickerBar.className = "s-fusion-bar-picker";
        this._bar.appendChild(this.pickerBar);
        
    },
    createBlock: function($item, index, count){
        var block = {
            boxParent: this,
            index: index,
            id: helpers.uuid.generate(),
            $item: $item
        };
        var fusionSess = (syraUtil.getFusionController(this.fusionPage)).getSession();
        $item.$XID = $item.$XID || $item.$bind;
        $item.$title = $item.$title || this.fusionPage.$prototype.$properties[$item.$bind].$title;
        
        var blockItem = document.createElement("section");
        blockItem.className = "s-fusion-block";
        blockItem.setAttribute("id", block.id);
        blockItem.setAttribute("data-s-block", block.index);
        block.$$item = $(blockItem);
        
        var title = document.createElement("a");
        title.setAttribute("data-s-picker", "s-bar-title");
        title.className = "s-fusion-bar-block-title";
        var $title = $item.$title || "";
        if ($title.length > 0 && $title[1] == "@") {
            $title = this.fusionPage._renderExpression($title);
        }
        title.textContent = $title;
        
        var dom = document.createElement("div");
        dom.className = "s-fusion-block-body";
        block.$$body = $(dom);
        
        dom = document.createElement("header");
        dom.className = "s-fusion-block-header";
        dom.appendChild(title);
        block.$$header = $(dom);
        
        
        dom = document.createElement("footer");
        dom.style.display = "none";
        dom.className = "s-fusion-block-footer";
        block.$$footer = $(dom)
        block.$$item.append(block.$$header).append(block.$$body).append(block.$$footer);
        this._body.appendChild(blockItem);
        
        if (index > 0 && count > 1) {
            var link = document.createElement("a");
            link.setAttribute("data-s-picker", "s-bar-prev");
            link.className = "s-fusion-bar-nav-prev";
            block.$$footer[0].appendChild(link).textContent = fusionSess.getlabel("text", "23", "previous");
        }
        if (index < (count - 1)) {
            var link = document.createElement("a");
            link.setAttribute("data-s-picker", "s-bar-next");
            link.className = "s-fusion-bar-nav-next";
            block.$$footer[0].appendChild(link).textContent = fusionSess.getlabel("text", "24", "next");
        }
        return block;
    },
    collapseBlock: function(block, show, isFirstTime, onDrawBar){
        var self = this;
        self.fusionPage.externalAdapter.onBoxToggle({
            box: block,
            open: show,
            onDrawParent: onDrawBar,
            isFirstTime: !block.islistLoaded,
            doEvent: function(){
                if (show && self.openedBlock && (self.openedBlock != block)) {
                    self.collapseBlock(self.openedBlock, false);
                }
                self.openedBlock = block;
                block.$$footer[0].style.display = show ? "" : "none";
                block.$$body[0].style.display = show ? "" : "none";
                block.$$header.toggleClass("s-open", show);
                block.$$item.toggleClass("s-open", show);
                if (show) {
                    if (!block.islistLoaded) {
                        block.islistLoaded = true;
                        block.$item.$isTitleHidden = true;
                        if (self.fusionPage.$prototype.$properties[block.$item.$bind].$type == "application/x-array") {
                            block.$item.$isNavigationList = true;
                        }
                        block.leftList = self.fusionPage.loadNewItem(block.$$body.empty()[0], block.$item);
                    }
                    self.onWindowResize();
                }
                else {
                    block.$$item[0].style.height = "";
                }
            }
        });
    },
    _findBlock: function($$target){
        var index = parseInt($$target.closest("[data-s-block]").attr("data-s-block"), 10);
        return this.blocks[index];
    },
    _ensureState: function(){
        if (this.preferences.convergenceBar.isCollapsed) {
            this._slot.style.width = "15px";
            this._header.style.display = "none";
            this._body.style.display = "none";
            this.pickerBar.style.width = "15px";
            if (!this.preferences.convergenceBar.isDocked) {
                this._bar.style.width = "15px";
            }
        }
        else {
            this.pickerBar.style.width = "";
            if (this.preferences.convergenceBar.isDocked) {
                this.dockMode.className = "s-fusion-bar-docked";
                this._slot.style.width = "300px";
                this._bar.style.position = "";
                this._bar.style.width = "";
            }
            else {
                this.dockMode.className = "s-fusion-bar-float";
                this._slot.style.width = "15px";
                document.site.setZIndex(this._bar);
                this._bar.style.position = "absolute";
                this._bar.style.width = "300px";
                this._bar.style.top = "0px";
                this._bar.style.left = "0px";
            }
            this._header.style.display = "";
            this._body.style.display = "";
        }
    },
    onWindowResize: function(){
        var self = this;
        if (this.$$bar && this._slot) {
            var height = document.site.body.clientHeight;
            if (height) {
                this._bar.style.height = height + "px";
                this.pickerBar.style.height = height + "px";
                this._body.style.height = (height - this._body.offsetTop) + "px";
                if (this.openedBlock) {
                    var blockHeight = 0;
                    for (var ii = 0, jj = this.blocks.length; ii < jj; ii++) {
                        var block = this.blocks[ii];
                        if (block != this.openedBlock) {
                            blockHeight += block.$$item.outerHeight(true);
                        }
                    }
                    blockHeight = this._body.clientHeight - blockHeight;
                    this.openedBlock.$$item[0].style.height = blockHeight + "px";
                    this.openedBlock.$$body.height(this.openedBlock.$$item.height() - (this.openedBlock.$$footer.outerHeight(true) + this.openedBlock.$$header.outerHeight(true)));
                    if (this.openedBlock.leftList) {
                        this.openedBlock.leftList.resize(this.openedBlock.$$body.height());
                    }
                }
            }
        }
    },
    getArticle: function(){
        return this.fusionPage.getArticle();
    },
    dispose: function(){
        this._bindEvents(false);
        
        if (this.blocks) {
            this.blocks.forEach(function(block){
                delete block.leftList;
            });
            delete this.blocks;
        }
        delete this.fusionPage;
    }
});
