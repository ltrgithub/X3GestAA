"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

function FusionBar(){
}

exports.FusionBar = helpers.defineClass(FusionBar, null, {
    load: function(fusionPage, $fusionBar){
        var self = this;
        self.fusionPage = fusionPage;
        var div = document.createElement("div");
        div.className = "s-fusion-bar-slot";
        self.$$slot = $(div).prependTo(self.fusionPage.$$item);
        
        self.localize = locale.resources(module)();
        self.$$bar = $(document.createElement("div")).attr("id", "s-fusion-bar");
        
        var count = $fusionBar.$items.length;
        self.blocks = $fusionBar.$items.map(function($item, index){
            return self.createBlock($item, index);
        });
        self.$$bar.appendTo(self.$$slot);
        if (!self.openedBlock && count > 0) {
            self.collapseBlock(self.blocks[0], true, null, true);
        }
        
        self.$$bar.delegate("a.s-fusion-block-nav", "click", function(){
            var block = self._findBlock($(this));
            self.collapseBlock(self.blocks[this.className.indexOf("prev") > 0 ? (block.index - 1) : (block.index + 1)], true);
        }).delegate("a.s-fusion-block-title", "click", function(){
            self.collapseBlock(self._findBlock($(this)), true);
            return false;
        });
    },
    getExpandedBlockHeight: function(expanded){
        var self = this;
        var height = 0;
        self.blocks.forEach(function(block){
            if (block != expanded) {
                height += block.$$item.outerHeight(true);
            }
        });
        return self.$$bar.height() - height;
    },
    createBlock: function($item, index){
        var block = {
            boxParent: this,
            index: index,
            id: document.controller.generateUUID(),
            $item: $item
        };
        $item.$XID = $item.$XID || $item.$bind;
        $item.$title = $item.$title || this.fusionPage.$prototype.$properties[$item.$bind].$title;
        
        var dom = document.createElement("section");
        dom.className = "s-fusion-block";
        dom.setAttribute("id", block.id);
        dom.setAttribute("data-s-block", block.index);
        block.$$item = $(dom);
        
        var title = document.createElement("a");
        title.className = "s-fusion-block-title";
        var $title = $item.$title || "";
        if ($title.length > 0 && $title[1] == "@") {
            $title = this.fusionPage._renderExpression($title);
        }
        title.textContent = $title;
        
        dom = document.createElement("div");
        dom.className = "s-fusion-block-body";
        block.$$body = $(dom);
        
        dom = document.createElement("header");
        dom.className = "s-fusion-block-header";
        dom.appendChild(title);
        block.$$header = $(dom);
        
        dom = document.createElement("footer");
        dom.className = "s-fusion-block-footer";
        block.$$footer = $(dom)
        block.$$item.append(block.$$header).append(block.$$body).append(block.$$footer);
        this.$$bar.append(block.$$item);
        if (index > 0 && count > 1) {
            var link = document.createElement("a");
            link.className = "s-fusion-block-nav s-fusion-block-nav-prev";
            block.$$footer[0].appendChild(link).textContent = self.localize.previous_step;
        }
        if (index < (count - 1)) {
            var link = document.createElement("a");
            link.className = "s-fusion-block-nav s-fusion-block-nav-next";
            block.$$footer[0].appendChild(link).textContent = self.localize.next_step;
        }
    },
    collapseBlock: function(block, show, isFirstTime, onDrawBar){
        var self = this;
        self.fusionPage.externalAdapter.onBoxToggle({
            box: block,
            open: show,
            onDrawParent: onDrawBar,
            isFirstTime: !block.islistLoaded,
            doEvent: function(){
                if (show && self.openedBlock && (self.openedBlock != block)) {
                    self.collapseBlock(self.openedBlock, false);
                }
                self.openedBlock = block;
                block.$$footer[0].style.display = show ? "" : "none";
                block.$$body[0].style.display = show ? "" : "none";
                block.$$header.toggleClass("s-open", show);
                block.$$item.toggleClass("s-open", show);
                if (show) {
                    if (!block.islistLoaded) {
                        block.islistLoaded = true;
                        block.$item.$isTitleHidden = true;
                        document.itemFactory.load(block.$$body.empty(), block.$item, self.fusionPage);
                    }
                    self.onWindowResize();
                }
                else {
                    block.$$item[0].style.height = "";
                }
            }
        });
    },
    _findBlock: function($$target){
        var index = parseInt($$target.closest("[data-s-block]").attr("data-s-block"), 10);
        return this.blocks[index];
    },
    onWindowResize: function(){
        var self = this;
        if (self.$$bar && self.$$slot) {
            var height = window.innerHeight - (document.site._$$header.height())
            self.$$slot.height(height);
            var style = self.$$bar[0].style;
            style.width = self.$$slot.width() + "px";
            style.height = height + "px";
            if (self.openedBlock) {
                var height = self.getExpandedBlockHeight(this);
                self.openedBlock.$$item[0].style.height = height + "px";
                if (self.openedBlock.leftList) {
                    self.openedBlock.$$body.height(height - (self.openedBlock.$$footer.outerHeight() + self.openedBlock.$$header.outerHeight()));
                    self.openedBlock.leftList.resize(self.openedBlock.$$body.height());
                }
            }
        }
    },
    addLeftList: function(leftList){
        var self = this, block = null;
        var body = leftList.$$container.closest(".s-fusion-block-body");
        for (var i = 0, len = self.blocks.length; i < len && block == null; i++) {
            if (self.blocks[i].$$body.is(body)) {
                block = self.blocks[i];
            }
        }
        if (block) {
            block.leftList = leftList;
        }
    },
    getArticle: function(){
        return this.fusionPage.getArticle();
    },
    dispose: function(){
        if (this.$$bar) {
            this.$$bar.undelegate();
        }
        delete this.localize;
        if (this.blocks) {
            this.blocks.forEach(function(block){
                delete block.leftList;
            });
            delete this.blocks;
        }
        delete this.fusionPage;
    }
});
