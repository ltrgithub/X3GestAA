"use strict";
var helpers = require('syracuse-core/lib/helpers');
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;

function FusionBar() {}

exports.FusionBar = helpers.defineClass(FusionBar, null, {
	load: function(fusionPage, $fusionBar) {
		this.fusionPage = fusionPage;
		this.preferences = document.site.ensurePreferences();
		if (!this.preferences.convergenceBar) {
			this.preferences.convergenceBar = {
				isDocked: true,
				isCollapsed: false
			};
		}
		this.$$slot = $(this._slot = document.createElement("div"));
		this._slot.className = "s-fusion-bar-slot";
		this.fusionPage.$$item.prepend(this._slot);

		this._bar = document.createElement("div");
		this._bar.className = "s-fusion-bar";
		this.$$bar = $(this._bar);
		this.appendPickerBar();

		this.body = document.createElement("div");
		this.body.className = "s-fusion-bar-body";
		this._bar.appendChild(this.body);

		var count = $fusionBar.$items.length;
		this.blocks = [];
		for (var ii = 0; ii < count; ii++) {
			this.blocks.push(this.createBlock($fusionBar.$items[ii], ii, count));
		}
		this.$$bar.appendTo(this._slot);
		if (!this.openedBlock && count > 0) {
			this.collapseBlock(this.blocks[0], true, null, true);
		}
		this.fusionPage.attachToPageResizeListener(true, this);
		this.ensureState();
		if (this.fusionPage.designer) {
			this.toggleUIDesign(true);
		}
	},
	collapse: function() {
		this._widgetResizer.isEnabled = !(this.preferences.convergenceBar.isCollapsed = !this.preferences.convergenceBar.isCollapsed);
		this.ensureState();
		document.site.resize();
	},
	expand: function() {
		//this._widgetResizer.isEnabled = !(this.preferences.convergenceBar.isCollapsed = !this.preferences.convergenceBar.isCollapsed);
		this.preferences.convergenceBar.isCollapsed = false;
		this.ensureState();
		document.site.resize();
	},
	onClickPicker: function(btn, event) {
		switch (btn.getAttribute("data-s-picker")) {
			case "s-bar-dockMode":
				this.preferences.convergenceBar.isDocked = !this.preferences.convergenceBar.isDocked;
				this.ensureState();
				document.site.resize();
				break;
			case "s-bar-collapse":
				this.collapse();
				break;
			case "s-bar-title":
				this.collapseBlock(this._findBlock($(event.target)), true);
				this.ensureState();
				document.site.resize();
				break;
		}
	},
	appendPickerBar: function() {
		var self = this;
		self.resizeBar = document.createElement("a");
		self.resizeBar.className = "s-fusion-bar-resizer";
		self.openerPicker = document.createElement("a");
		self.openerPicker.className = "s-fusion-bar-opener";
		self.openerPicker.setAttribute("data-s-picker", "s-bar-collapse");
		self.resizeBar.appendChild(self.openerPicker);
		self._bar.appendChild(self.resizeBar);
		self._widgetResizer = document.site.setWidgetResizable({
			source: self,
			slot: self._slot,
			dragSpot: null,
			direction: {
				right: true
			},
			minWidth: 300,
			resizerSpot: self.resizeBar,
			onResize: function(resizer, moving) {
				if (!moving) {
					document.site.toggleClass(self.resizeBar, "s-resizing", document.site.resizing);
					document.site.toggleClass(self.openerPicker, "s-resizing", document.site.resizing);
				}
			}
		});
		self._widgetResizer.isEnabled = !self.preferences.convergenceBar.isCollapsed;

	},
	createBlock: function($item, index, count) {
		var block = {
			boxParent: this,
			index: index,
			id: helpers.uuid.generate(),
			$item: $item
		};
		var fusionSess = (syraUtil.getFusionController(this.fusionPage)).getSession();
		$item.$XID = $item.$XID || $item.$bind;
		$item.$title = $item.$title || this.fusionPage.$prototype.$properties[$item.$bind].$title;

		var blockItem = document.createElement("section");
		blockItem.className = "s-fusion-block";
		blockItem.setAttribute("id", block.id);
		blockItem.setAttribute("data-s-block", block.index);
		block.$$item = $(blockItem);

		var title = document.createElement("a");
		title.setAttribute("data-s-picker", "s-bar-title");
		title.className = "s-fusion-bar-block-title";
		var $title = $item.$title || "";
		if ($title.length > 0 && $title[1] == "@") {
			$title = this.fusionPage.renderExpression($title);
		}
		title.textContent = $title;

		var dom = document.createElement("div");
		dom.className = "s-fusion-block-body";
		block.$$body = $(dom);

		dom = document.createElement("header");
		dom.className = "s-fusion-block-header";
		dom.appendChild(title);
		block.$$header = $(dom);

		block.$$item.append(block.$$header).append(block.$$body);
		this.body.appendChild(blockItem);
		return block;
	},
	collapseBlock: function(block, show, isFirstTime, onDrawBar) {
		var self = this;
		self.fusionPage.externalAdapter.onBoxToggle({
			box: block,
			open: show,
			onDrawParent: onDrawBar,
			isFirstTime: !block.islistLoaded,
			doEvent: function() {
				if (show && self.openedBlock && (self.openedBlock != block)) {
					self.collapseBlock(self.openedBlock, false);
				}
				self.openedBlock = block;
				block.$$body[0].style.display = show ? "" : "none";
				block.$$header.toggleClass("s-open", show);
				block.$$item.toggleClass("s-open", show);
				if (show) {
					if (!block.islistLoaded) {
						block.islistLoaded = true;
						block.$item.$isTitleHidden = true;
						if (self.fusionPage.$prototype.$properties[block.$item.$bind].$type == "application/x-array") {
							block.$item.$isNavigationList = true;
						}
						block.leftList = self.fusionPage.loadNewItem(block.$$body.empty()[0], block.$item);
					}
					self.onWindowResize();
				} else {
					block.$$item[0].style.height = "";
				}
			}
		});
	},
	_findBlock: function($$target) {
		var index = parseInt($$target.closest("[data-s-block]").attr("data-s-block"), 10);
		return this.blocks[index];
	},
	ensureState: function() {
		if (this.preferences.convergenceBar.isCollapsed) {
			this.isCollapsed = true;
			this.openedWidth = this.$$slot.outerWidth();
			this._slot.style.width = "10px";
			//$(this._slot).removeClass("expanded");
			//$(this._slot).addClass("collapsed");
			this.body.style.display = "none";
			this.resizeBar.className = "s-fusion-bar-resizer s-close";
			this.openerPicker.className = "s-fusion-bar-opener s-close";
			if (!this.preferences.convergenceBar.isDocked) {
				this._bar.style.width = "10px";
				//$(this._bar).removeClass("expanded");
				//$(this._bar).addClass("collapsed");
			}
		} else {
			this.isCollapsed = false;
			this.resizeBar.className = "s-fusion-bar-resizer";
			this.openerPicker.className = "s-fusion-bar-opener";
			this.resizeBar.style.width = "";
			this.body.style.display = "";
			if (this.preferences.convergenceBar.isDocked) {
				this._slot.style.width = (this.openedWidth || 300) + "px";
				//this._slot.className+=" expanded";
				//$(this._slot).toggleClass("expanded", true);
				//$(this._slot).removeClass("collapsed");
				this._bar.style.position = "";
				//this._bar.style.width = "";
			} else {
				//this._slot.style.width = "10px";
				//$(this._slot).toggleClass("collapsed", true);
				document.site.setZIndex(this._bar);
				this._bar.style.position = "absolute";
				this._bar.style.width = "300px";
				//$(this._bar).removeClass("collapsed");
				//$(this._bar).addClass("expanded");
				//this._bar.className+=" expanded";
				this._bar.style.top = "0px";
				this._bar.style.left = "0px";
			}
			this.body.style.display = "";
		}
	},
	onWindowResize: function() {
		var self = this;
		if (this.$$bar && this._slot) {
			var height = document.site.body.clientHeight;
			if (height) {
				if (this.preferences.convergenceBar.isCollapsed != this.isCollapsed) {
					this.ensureState();
				}
				if (this.authoringOverlay) {
					var style = this.authoringOverlay.style;
					var offset = this.$$bar.offset();
					style.top = offset.top + "px";
					style.left = offset.left + "px";
					style.height = this.$$bar.outerHeight(true) + "px";
					style.width = this.$$bar.outerWidth(true) + "px";
				}
				this._bar.style.height = height + "px";
				this.resizeBar.style.height = height + "px";
				this.openerPicker.style.top = ((height - this.openerPicker.clientHeight) / 2) + "px";
				this.body.style.height = (height - this.body.offsetTop) + "px";
				if (this.openedBlock) {
					var blockHeight = 0;
					for (var ii = 0, jj = this.blocks.length; ii < jj; ii++) {
						var block = this.blocks[ii];
						if (block != this.openedBlock) {
							blockHeight += block.$$item.outerHeight(true);
						}
					}
					blockHeight = this.body.clientHeight - blockHeight;
					this.openedBlock.$$item[0].style.height = blockHeight + "px";
					this.openedBlock.$$body.height(this.openedBlock.$$item.height() - this.openedBlock.$$header.outerHeight(true));
					if (this.openedBlock.leftList) {
						this.openedBlock.leftList.resize(this.openedBlock.$$body.height());
					}
				}
			}
		}
	},
	getArticle: function() {
		return this.fusionPage.getArticle();
	},
	toggleUIDesign: function(enable, isOnPreviewMode) {
		if (enable) {
			if (!this.authoringOverlay) {
				this.authoringOverlay = document.createElement("div");
				this.authoringOverlay.className = "s-fusion-bar-overlay";
				document.site.setZIndex(this.authoringOverlay);
				document.site.layoutSlot.appendChild(this.authoringOverlay);
			}
			this._slot.style.display = this.authoringOverlay.style.display = isOnPreviewMode ? "" : "none";
			this.onWindowResize();
		} else {
			if (this.authoringOverlay) {
				document.site.removeDomChild(this.authoringOverlay);
				delete this.authoringOverlay;
			}
			this._slot.style.display = "";
		}
	},
	dispose: function() {
		if (this._widgetResizer) {
			this._widgetResizer.dispose();
			this._widgetResizer = null;
		}
		if (this.fusionPage) {
			this.fusionPage.attachToPageResizeListener(false, this);
		}
		this.toggleUIDesign(false);
		if (this.blocks) {
			this.blocks.forEach(function(block) {
				delete block.leftList;
			});
			delete this.blocks;
		}
		delete this.fusionPage;
	}
});