"use strict";
var helpers = require('syracuse-core/lib/helpers');

var BarBlock = require('./barBlock').BarBlock;

function FusionBar(){
}

exports.FusionBar = helpers.defineClass(FusionBar, null, {
    load: function(fusionPage, $fusionBar){
        this.$fusionBar = $fusionBar;
        this.fusionPage = fusionPage;
        var div = document.createElement("div");
        div.className = "s-fusion-bar-slot";
        this.$$slot = $(div).prependTo(this.fusionPage.$$item);
        this.drawBar();
        this.onWindowResize();
    },
    getExpandedBlockHeight: function(expanded){
        var self = this;
        var height = 0;
        self.blocks.forEach(function(block){
            if (block != expanded) {
                height += block.$$item.outerHeight(true);
            }
        });
        return self.$$bar.height() - height;
    },
    drawBar: function(){
        var self = this;
        self.$$bar = $(document.createElement("div")).attr("id", "s-fusion-bar");
        var count = self.$fusionBar.$items.length;
        self.blocks = self.$fusionBar.$items.map(function($item, index){
            var block = new BarBlock();
            self.$$bar.append(block.load(self, $item, index));
            if (index > 0 && count > 1) {
                block.appendPrevStep();
            }
            if (index < (count - 1)) {
                block.appendNextStep();
            }
            return block;
        });
        if (!self.openedBlock && count > 0) {
            self.blocks[0].collapse(true, null, true);
        }
        self.$$bar.appendTo(self.$$slot);
    },
    onWindowResize: function(){
        var self = this;
        if (self._resizeTimeout) {
            clearTimeout(self._resizeTimeout);
        }
        self._resizeTimeout = setTimeout(function(){
            if (self.$$bar && self.$$slot) {
                var height = window.innerHeight - (document.site._$$header.height())
                self.$$slot.height(height);
                var style = self.$$bar[0].style;
                style.width = self.$$slot.width() + "px";
                style.height = height + "px";
                if (self.openedBlock) {
                    self.openedBlock.onWindowResize();
                }
            }
        }, 10);
    },
    // FDB
    addLeftList: function(leftList){
        var self = this, block = null;
        var body = leftList.$$container.closest(".s-fusion-block-body");
        for (var i = 0, len = self.blocks.length; i < len && block == null; i++) {
            if (self.blocks[i].$$body.is(body)) {
                block = self.blocks[i];
            }
        }
        if (block) {
            block.leftList = leftList;
            block.onWindowResize();
        }
    },
    getArticle: function(){
        return this.fusionPage.getArticle();
    },
    dispose: function(){
        var self = this;
        if (self._resizeTimeout) {
            clearTimeout(self._resizeTimeout);
        }
        if (self.blocks) {
            self.blocks.forEach(function(block){
                document.controller.disposeObject(block);
            });
            delete self.blocks;
        }
        if (self._navSteps) {
            Object.key(self._navSteps).forEach(function($step){
                self._navSteps[$step].unbind();
            });
            delete self._navSteps;
        }
        if (self.openedBlock) {
            self.openedBlock.dispose();
            delete self.openedBlock;
        }
        delete self.fusionPage;
    }
});
