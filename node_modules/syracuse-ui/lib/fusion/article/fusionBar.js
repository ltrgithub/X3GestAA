"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

var BarBlock = require('./barBlock').BarBlock;

function FusionBar(){
}

exports.FusionBar = helpers.defineClass(FusionBar, null, {
    load: function(fusionPage, $fusionBar){
        this.$fusionBar = $fusionBar;
        this.fusionPage = fusionPage;
        var div = document.createElement("div");
        div.className = "s-fusion-bar-slot";
        this.$$slot = $(div).prependTo(this.fusionPage.$$item);
        this.drawBar();
    },
    getExpandedBlockHeight: function(expanded){
        var self = this;
        var height = 0;
        self.blocks.forEach(function(block){
            if (block != expanded) {
                height += block.$$item.outerHeight(true);
            }
        });
        return self.$$bar.height() - height;
    },
    drawBar: function(){
        var self = this;
        var localize = locale.resources(module)();
        self.$$bar = $(document.createElement("div")).attr("id", "s-fusion-bar");
        self._bindEvents(true);
        var count = self.$fusionBar.$items.length;
        self.blocks = self.$fusionBar.$items.map(function($item, index){
            var block = new BarBlock();
            self.$$bar.append(block.load(self, $item, index));
            if (index > 0 && count > 1) {
                self._appendNavStep(block, "prev", localize.previous_step);
            }
            if (index < (count - 1)) {
                self._appendNavStep(block, "next", localize.next_step);
            }
            return block;
        });
        self.$$bar.appendTo(self.$$slot);
        if (!self.openedBlock && count > 0) {
            self.blocks[0].collapse(true, null, true);
        }
    },
    _appendNavStep: function(block, $step, $title){
        var link = document.createElement("a");
        link.className = "s-fusion-block-nav s-fusion-block-nav-" + $step;
        link.textContent = $title;
        block.$$footer[0].appendChild(link);
    },
    _findBlock: function($$target){
        var index = parseInt($$target.closest("[data-s-block]").attr("data-s-block"), 10);
        return this.blocks[index];
    },
    _bindEvents: function(bind){
        var self = this;
        if (bind) {
            self.$$bar.delegate("a.s-fusion-block-nav", "click", function(){
                var block = self._findBlock($(this));
                self.blocks[this.className.indexOf("prev") > 0 ? (block.index - 1) : (block.index + 1)].collapse(true);
            }).delegate("a.s-fusion-block-title", "click", function(){
                self._findBlock($(this)).collapse(true);
                return false;
            });
        }
        else {
            self.$$bar.undelegate();
        }
    },
    onWindowResize: function(){
        var self = this;
        if (self.$$bar && self.$$slot) {
            var height = window.innerHeight - (document.site._$$header.height())
            self.$$slot.height(height);
            var style = self.$$bar[0].style;
            style.width = self.$$slot.width() + "px";
            style.height = height + "px";
            if (self.openedBlock) {
                var height = self.getExpandedBlockHeight(this);
                self.openedBlock.$$item[0].style.height = height + "px";
                if (self.openedBlock.leftList) {
                    self.openedBlock.$$body.height(height - (self.openedBlock.$$footer.outerHeight() + self.openedBlock.$$header.outerHeight()));
                    self.openedBlock.leftList.resize(self.openedBlock.$$body.height());
                }
            }
        }
    },
    addLeftList: function(leftList){
        var self = this, block = null;
        var body = leftList.$$container.closest(".s-fusion-block-body");
        for (var i = 0, len = self.blocks.length; i < len && block == null; i++) {
            if (self.blocks[i].$$body.is(body)) {
                block = self.blocks[i];
            }
        }
        if (block) {
            block.leftList = leftList;
        }
    },
    getArticle: function(){
        return this.fusionPage.getArticle();
    },
    dispose: function(){
        this._bindEvents(false);
        if (this.blocks) {
            this.blocks.forEach(function(block){
                document.controller.disposeObject(block);
            });
            delete this.blocks;
        }
        if (this.openedBlock) {
            this.openedBlock.dispose();
            delete this.openedBlock;
        }
        delete this.fusionPage;
    }
});
