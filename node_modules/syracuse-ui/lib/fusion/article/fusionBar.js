"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

function FusionBar(){
}

exports.FusionBar = helpers.defineClass(FusionBar, null, {
    ensurePreferences: function(){
        var preferences = document.site.ensurePreferences();
        return preferences.convergenceBar = preferences.convergenceBar || {};
    },
    load: function(fusionPage, $fusionBar){
        var self = this;
        self.fusionPage = fusionPage;
        
        var preferences = self.ensurePreferences();
        if (preferences.isDocked === undefined) {
            preferences.isDocked = true;
        }
        
        self._slot = document.createElement("div");
        self._slot.className = "s-fusion-bar-slot";
        self.$$slot = $(self._slot).prependTo(self.fusionPage.$$item);
        
        self.localize = locale.resources(module)();
        self._bar = document.createElement("div");
        self._bar.className = "s-fusion-bar";
        self.$$bar = $(self._bar);
        self._appendHeader();
        
        var count = $fusionBar.$items.length;
        self.blocks = $fusionBar.$items.map(function($item, index){
            return self.createBlock($item, index, count);
        });
        self.$$bar.appendTo(self.$$slot);
        if (!self.openedBlock && count > 0) {
            self.collapseBlock(self.blocks[0], true, null, true);
        }
        self._bindEvents(true);
        
    },
    _bindEvents: function($bind){
        var self = this;
        if ($bind) {
            self.$$slot.delegate("a.s-fusion-block-nav", "click", function(){
                var block = self._findBlock($(this));
                self.collapseBlock(self.blocks[this.className.indexOf("prev") > 0 ? (block.index - 1) : (block.index + 1)], true);
            }).delegate("a.s-fusion-block-title", "click", function(){
                self.collapseBlock(self._findBlock($(this)), true);
                return false;
            }).delegate("a[data-s-picker]", "click", function(){
                var retValue;
                var preferences = self.ensurePreferences();
                switch (this.getAttribute("data-s-picker")) {
                    case "dockMode":
                        preferences.isDocked = !preferences.isDocked;
                        retValue = false;
                        break;
                    case "collapse":
                        preferences.isCollapsed = !preferences.isCollapsed;
                        self._isAutoCollapseDisabled = false;
                        retValue = false;
                        break;
                }
                if (retValue === false) {
                    self.onWindowResize();
                }
                return retValue;
            }).bind("mouseenter mouseleave", function(event){
                var preferences = self.ensurePreferences();
                clearTimeout(self._closeTimeout);
                if (event.type == "mouseleave") {
                    if (!self._isAutoCollapseDisabled) {
                        if (!preferences.isDocked && !preferences.isCollapsed) {
                            self._closeTimeout = setTimeout(function(){
                                preferences.isCollapsed = true;
                                self.onWindowResize();
                            }, 500);
                        }
                    }
                    delete self._isAutoCollapseDisabled;
                    
                }
                else {
                    if (!self._isAutoCollapseDisabled) {
                        if (!preferences.isDocked && preferences.isCollapsed) {
                            self._closeTimeout = setTimeout(function(){
                                preferences.isCollapsed = false;
                                self.onWindowResize();
                            }, 500);
                        }
                    }
                    delete self._isAutoCollapseDisabled;
                }
            });
        }
        else {
            if (self.$$slot) {
                self.$$slot.undelegate().unbind();
            }
        }
    },
    _appendHeader: function(){
        var barHeader = document.createElement("header");
        barHeader.className = "s-fusion-bar-header";
        
        this.dockMode = document.createElement("a");
        this.dockMode.setAttribute("data-s-picker", "dockMode");
        this.dockMode.className = "s-fusion-bar-docked";
        barHeader.appendChild(this.dockMode);
        
        this.collapse = document.createElement("a");
        this.collapse.setAttribute("data-s-picker", "collapse");
        this.collapse.className = "s-fusion-bar-collapse";
        barHeader.appendChild(this.collapse);
        
        this.$$barHeader = $(this._bar.appendChild(barHeader));
        
        this.expand = document.createElement("a");
        this.expand.style.display = "none";
        this.expand.setAttribute("data-s-picker", "collapse");
        this.expand.className = "s-fusion-bar-expand";
        this._slot.appendChild(this.expand);
        
    },
    createBlock: function($item, index, count){
        var block = {
            boxParent: this,
            index: index,
            id: helpers.uuid.generate(),
            $item: $item
        };
        $item.$XID = $item.$XID || $item.$bind;
        $item.$title = $item.$title || this.fusionPage.$prototype.$properties[$item.$bind].$title;
        
        var dom = document.createElement("section");
        dom.className = "s-fusion-block";
        dom.setAttribute("id", block.id);
        dom.setAttribute("data-s-block", block.index);
        block.$$item = $(dom);
        
        var title = document.createElement("a");
        title.className = "s-fusion-block-title";
        var $title = $item.$title || "";
        if ($title.length > 0 && $title[1] == "@") {
            $title = this.fusionPage._renderExpression($title);
        }
        title.textContent = $title;
        
        dom = document.createElement("div");
        dom.className = "s-fusion-block-body";
        block.$$body = $(dom);
        
        dom = document.createElement("header");
        dom.className = "s-fusion-block-header";
        dom.appendChild(title);
        block.$$header = $(dom);
        
        dom = document.createElement("footer");
        dom.className = "s-fusion-block-footer";
        block.$$footer = $(dom)
        block.$$item.append(block.$$header).append(block.$$body).append(block.$$footer);
        this.$$bar.append(block.$$item);
        
        if (index > 0 && count > 1) {
            var link = document.createElement("a");
            link.className = "s-fusion-block-nav s-fusion-block-nav-prev";
            block.$$footer[0].appendChild(link).textContent = this.localize.previous_step;
        }
        if (index < (count - 1)) {
            var link = document.createElement("a");
            link.className = "s-fusion-block-nav s-fusion-block-nav-next";
            block.$$footer[0].appendChild(link).textContent = this.localize.next_step;
        }
        return block;
    },
    collapseBlock: function(block, show, isFirstTime, onDrawBar){
        var self = this;
        self.fusionPage.externalAdapter.onBoxToggle({
            box: block,
            open: show,
            onDrawParent: onDrawBar,
            isFirstTime: !block.islistLoaded,
            doEvent: function(){
                if (show && self.openedBlock && (self.openedBlock != block)) {
                    self.collapseBlock(self.openedBlock, false);
                }
                self.openedBlock = block;
                block.$$footer[0].style.display = show ? "" : "none";
                block.$$body[0].style.display = show ? "" : "none";
                block.$$header.toggleClass("s-open", show);
                block.$$item.toggleClass("s-open", show);
                if (show) {
                    if (!block.islistLoaded) {
                        block.islistLoaded = true;
                        block.$item.$isTitleHidden = true;
                        block.leftList = document.itemFactory.load(block.$$body.empty(), block.$item, self.fusionPage);
                    }
                    self.onWindowResize();
                }
                else {
                    block.$$item[0].style.height = "";
                }
            }
        });
    },
    _findBlock: function($$target){
        var index = parseInt($$target.closest("[data-s-block]").attr("data-s-block"), 10);
        return this.blocks[index];
    },
    onWindowResize: function(){
        var self = this;
        if (self.$$bar && self.$$slot) {
            var barHeight = document.site.$$body[0].clientHeight;
            if (barHeight) {
                if (this.ensurePreferences().isCollapsed) {
                    this._slot.style.width = "10px";
                    this._bar.style.display = "none";
                    this.expand.style.display = "";
                }
                else {
                    if (this.ensurePreferences().isDocked) {
                        this.dockMode.className = "s-fusion-bar-docked";
                        this._slot.style.width = "300px";
                        this._bar.style.width = "300px";
                        this._bar.style.top = "";
                        this._bar.style.left = "";
                        this._bar.style.position = "";
                    }
                    else {
                        barHeight = document.site.$$body[0].scrollHeight;
                        this.dockMode.className = "s-fusion-bar-float";
                        this._slot.style.width = "10px";
                        document.site.setZIndex(this._bar);
                        this._bar.style.position = "absolute";
                        this._bar.style.width = "300px";
                        this._bar.style.top = "0px";
                        this._bar.style.left = "0px";
                    }
                    this._bar.style.display = "";
                    this.expand.style.display = "none";
                }
                this._bar.style.height = barHeight + "px";
                //this._barBody.style.height = (barHeight - this.$$barHeader.outerHeight(true)) + "px";
                if (self.openedBlock) {
                    var blockHeight = self.$$barHeader.outerHeight(true);
                    self.blocks.forEach(function(block){
                        if (block != self.openedBlock) {
                            blockHeight += block.$$item.outerHeight(true);
                        }
                    });
                    blockHeight = self.$$bar.height() - blockHeight;
                    self.openedBlock.$$item[0].style.height = blockHeight + "px";
                    if (self.openedBlock.leftList) {
                        self.openedBlock.$$body.height(blockHeight - (self.openedBlock.$$footer.outerHeight(true) + self.openedBlock.$$header.outerHeight(true)));
                        self.openedBlock.leftList.resize(self.openedBlock.$$body.height());
                    }
                }
            }
        }
    },
    getArticle: function(){
        return this.fusionPage.getArticle();
    },
    dispose: function(){
        this._bindEvents(false);
        delete this.localize;
        if (this.blocks) {
            this.blocks.forEach(function(block){
                delete block.leftList;
            });
            delete this.blocks;
        }
        delete this.fusionPage;
    }
});
