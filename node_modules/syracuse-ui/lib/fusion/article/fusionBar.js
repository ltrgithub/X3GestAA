"use strict";
var helpers = require('syracuse-core/lib/helpers');
var BarSplitter = require("syracuse-ui/lib/page/bar/barSplitter").BarSplitter;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;

function FusionBar() {}

exports.FusionBar = helpers.defineClass(FusionBar, BarSplitter, {
	load: function(page, $fusionBar) {
		this.minWidth = 300;
		this.userPreferenceKey = "convergenceBar";
		this.options = {
			resizeDirection: "left",
			$skins: {
				bar: "s-fusion-bar",
				openerPicker: "s-fusion-bar-opener",
				resizePicker: "s-fusion-bar-resizer"
			}
		};
		if (syra_site.isTabletDevice) {
			this.options.isAutoModeDisabled = true;
			this.options.$viewMode = "float";
		}

		this.barSlot = document.createElement("div");
		this.barSlot.className = "s-fusion-bar-slot";

		this.barBody = document.createElement("div");
		this.barBody.className = "s-fusion-bar-body";
		this.$fusionBar = $fusionBar;
		page.domItem.insertBefore(this.barSlot, page.domItem.firstChild);
		BarSplitter.prototype.load.call(this, page);
		var count = this.$fusionBar.$items.length;
		this.blocks = [];
		for (var ii = 0; ii < count; ii++) {
			this.blocks.push(this.createBlock(this.$fusionBar.$items[ii], ii, count));
		}
		if (!this.openedBlock && count > 0) {
			this.collapseBlock(this.blocks[0], true, true);
		}
	},
	onBlockTitleClick: function(event, picker) {
		for (var ii = 0, jj = this.blocks.length; ii < jj; ii++) {
			if (this.blocks[ii].title == picker) {
				this.collapseBlock(this.blocks[ii], true);
				break;
			}
		}
	},
	createBlock: function($item, index, count) {
		var block = {
			boxParent: this,
			index: index,
			id: helpers.uuid.generate(),
			$item: $item
		};
		var fusionSess = (syraUtil.getFusionController(this.page)).getSession();
		$item.$XID = $item.$XID || $item.$bind;
		$item.$title = $item.$title || this.page.$prototype.$properties[$item.$bind].$title;

		block.domItem = document.createElement("section");
		block.domItem.className = "s-fusion-block";
		block.domItem.setAttribute("id", block.id);
		block.domItem.setAttribute("data-s-block", block.index);

		block.title = document.createElement("a");
		block.title.syraItem = this.id;
		block.title.setAttribute("href", "#");
		block.title.className = "s-fusion-bar-block-title";
		block.title.syraOnClick = "onBlockTitleClick";
		var $title = $item.$title || "";
		if ($title.length > 0 && $title[1] == "@") {
			$title = syra_site.expressionMaker.render(this.page, $title);
		}
		block.title.textContent = $title;
		block.body = document.createElement("div");
		block.body.className = "s-fusion-block-body";

		block.header = document.createElement("header");
		block.header.className = "s-fusion-block-header";
		block.header.appendChild(block.title);

		block.domItem.appendChild(block.header);
		block.domItem.appendChild(block.body);
		this.barBody.appendChild(block.domItem);
		return block;
	},
	collapseBlock: function(block, show, onDrawBar) {
		var self = this;
		self.page.externalAdapter.onBoxToggle({
			box: block,
			open: show,
			onDrawParent: onDrawBar,
			isFirstTime: !block.leftList,
			doEvent: function() {
				if (show && self.openedBlock && (self.openedBlock != block)) {
					self.collapseBlock(self.openedBlock, false);
				}
				self.openedBlock = block;
				block.body.style.display = show ? "" : "none";
				syra_site.dom.toggleClass(block.header, "s-open", show);
				syra_site.dom.toggleClass(block.domItem, "s-open", show);
				if (show) {
					if (!block.leftList) {
						block.$item.$isTitleHidden = true;
						if (self.page.$prototype.$properties[block.$item.$bind].$type == "application/x-array") {
							block.$item.$isNavigationList = true;
						}
						syra_site.dom.empty(block.body);
						block.leftList = self.page.loadNewItem(block.body, block.$item);
					} else {
						if (block.leftList && block.leftList.validateDisplay) {
							block.leftList.disableDisplayValidation = false;
							block.leftList.validateDisplay();
						}
					}
					self.resizeBar();
					if (!onDrawBar) {
						block.leftList && block.leftList.resizeArticle(true);
					}
				} else {
					if (block.leftList) {
						block.leftList.disableDisplayValidation = true;
					}
					block.domItem.style.height = "";
				}
			}
		});
	},
	onEndDDResizing: function() {
		if (this.openedBlock && this.openedBlock.leftList) {
			this.openedBlock.leftList.resizeArticle(true);
		}
	},
	resizeBar: function() {
		if (BarSplitter.prototype.resizeBar.call(this)) {
			if (this.openedBlock) {
				var blockHeight = 0;
				for (var ii = 0, jj = this.blocks.length; ii < jj; ii++) {
					var block = this.blocks[ii];
					if (block != this.openedBlock) {
						if (!block.height) {
							block.height = block.domItem.getBoundingClientRect().height;
						}
						blockHeight += block.height;
					}
				}
				this.openedBlock.domItem.style.height = (this.barBody.clientHeight - blockHeight) + "px";
				this.openedBlock.body.style.height = (this.openedBlock.domItem.clientHeight - this.openedBlock.header.getBoundingClientRect().height) + "px";
			}
		}
	},
	setFocusBar: function(select, bindList) {
		var block, ii = 0,
			jj = this.blocks ? this.blocks.length : 0,
			ret = false;
		for (ii = 0; ii < jj; ii++) {
			block = this.blocks[ii];
			if (block.$item && block.$item.$bind === bindList) {
				break;
			}
		}
		if (ii < jj) {
			ret = true;
			block.title.focus();
		}
		return ret;
	},
	dispose: function() {
		if (this.blocks) {
			for (var ii = 0, jj = this.blocks.length; ii < jj; ii++) {
				delete this.blocks[ii].leftList;
			}
			delete this.blocks;
		}
		this.$fusionBar = null;
		BarSplitter.prototype.dispose.call(this);
	}
});