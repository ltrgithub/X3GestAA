"use strict";
var helpers = require('syracuse-core/lib/helpers');

function BarBlock(){
    this.leftList = null;
}

helpers.defineClass(BarBlock, null, {
    load: function(bar, $item, index){
        var self = this;
        self.bar = bar;
        self.boxParent = bar;
        self.index = index;
        self.id = document.controller.generateUUID();
        self.$item = $item;
        self.$item.$XID = self.$item.$XID || $item.$bind;
        self.$item.$title = self.$item.$title || bar.fusionPage.$prototype.$[$item.$bind].$title;
        
        
        var dom = document.createElement("section");
        dom.className = "s-fusion-block";
        self.$$item = $(dom).attr("id", self.id);
        
        dom = document.createElement("a");
        dom.className = "s-fusion-block-title";
        self.$$title = $(dom).bind("click", function(){
            self.collapse(true);
            return false;
        });
        this.setTitle(self.$item.$title);
        dom = document.createElement("div");
        dom.className = "s-fusion-block-body";
        self.$$body = $(dom).text("self content appears on page 1.");
        
        dom = document.createElement("header");
        dom.className = "s-fusion-block-header";
        self.$$header = $(dom).append(self.$$title);
        
        dom = document.createElement("footer");
        dom.className = "s-fusion-block-footer";
        self.$$footer = $(dom)
        self._navSteps = {};
        return self.$$item.append(self.$$header).append(self.$$body).append(self.$$footer);
    },
    setTitle: function(ttl){
        var ttl = ttl || "";
        if (ttl.length > 0 && ttl[1] == "@") {
            ttl = this.bar.fusionPage._renderExpression(ttl);
        }
        this.$$title.text(ttl);
        
    },
    appendPrevStep: function(){
        this._appendNavStep({
            $step: "prev",
            $title: "Previous"
        });
    },
    appendNextStep: function(){
        this._appendNavStep({
            $step: "next",
            $title: "Next"
        });
    },
    collapse: function(show, isFirstTime, onDrawBar){
        var self = this;
        self.bar.fusionPage.externalAdapter.onBoxToggle({
            box: self,
            open: show,
            onDrawParent: onDrawBar,
            isFirstTime: !self.box,
            doEvent: function(){
                if (show && self.bar.openedBlock && (self.bar.openedBlock != self)) {
                    self.bar.openedBlock.collapse(false);
                }
                self.bar.openedBlock = self;
                self.$$footer[0].style.display = show ? "" : "none";
                self.$$body[0].style.display = show ? "" : "none";
                self.$$header.toggleClass("s-open", show);
                self.$$item.toggleClass("s-open", show);
                if (show) {
                    // self.$$item[0].style.height = self.bar.getExpandedBlockHeight(self) + "px";
                    self.onWindowResize();
                }
                else {
                    self.$$item[0].style.height = "";
                }
                if (!self.box) {
                    self.$item.$isTitleHidden = true;
                    self.box = document.itemFactory.load(self.$$body.empty(), {
                        $category: "block",
                        $skin: "s-fusion-block-core",
                        $layout: {
                            $items: [self.$item]
                        }
                    }, self.bar.fusionPage);
                }
            }
        });
    },
    _appendNavStep: function(options){
        var self = this;
        var link = document.createElement("a");
        link.className = "s-fusion-block-nav s-fusion-block-nav-" + options.$step;
        link.setAttribute("data-s-step", options.$step);
        self._navSteps[options.$step] = $(link).bind("click", function(){
            self.bar.blocks[this.className.indexOf("prev") > 0 ? (self.index - 1) : (self.index + 1)].collapse(true);
            return false;
        }).attr("data-s-step", options.$step).appendTo(self.$$footer).text(options.$title);
    },
    onWindowResize: function(){
        if (this.$$item.is(':visible')) {
            var height = this.bar.getExpandedBlockHeight(this);
            this.$$item[0].style.height = height + "px";
            if (this.leftList) {
                this.leftList.resize(height - this.$$footer.outerHeight() - this.$$header.outerHeight() - (this.$$body.outerHeight() - this.$$body.innerHeight()));
            }
        }
    },
    dispose: function(){
        if (this.$$title) {
            this.$$title.unbind();
        }
        delete this.box;
        delete this.bar;
        if (this.leftList) 
            delete this.leftList;
    }
});

function FusionBar(){
}

exports.FusionBar = helpers.defineClass(FusionBar, null, {
    load: function(fusionPage, $fusionBar){
        this.$fusionBar = $fusionBar;
        this.fusionPage = fusionPage;
        var div = document.createElement("div");
        div.className = "s-fusion-bar-slot";
        this.$$slot = $(div).prependTo(this.fusionPage.$$item);
        this.drawBar();
        this.onWindowResize();
    },
    getExpandedBlockHeight: function(expanded){
        var self = this;
        var height = 0;
        self.blocks.forEach(function(block){
            if (block != expanded) {
                height += block.$$item.outerHeight(true);
            }
        });
        return self.$$bar.height() - height;
    },
    drawBar: function(){
        var self = this;
        self.$$bar = $(document.createElement("div")).attr("id", "s-fusion-bar");
        
        var count = self.$fusionBar.$items.length;
        self.blocks = self.$fusionBar.$items.map(function($item, index){
            var block = new BarBlock();
            self.$$bar.append(block.load(self, $item, index));
            if (index > 0 && count > 1) {
                block.appendPrevStep();
            }
            if (index < (count - 1)) {
                block.appendNextStep();
            }
            return block;
        });
        if (!self.openedBlock && count > 0) {
            self.blocks[0].collapse(true, null, true);
        }
        self.$$bar.appendTo(self.$$slot);
    },
    onWindowResize: function(){
        var self = this;
        setTimeout(function(){
            if (self.$$bar && self.$$slot) {
                var style = self.$$bar[0].style;
                style.width = self.$$slot.width() + "px";
                style.height = self.$$slot.height() + "px";
                if (self.openedBlock) {
                    // self.openedBlock.$$item[0].style.height = self.getExpandedBlockHeight(self.openedBlock) + "px";				
                    self.openedBlock.onWindowResize();
                }
            }
        }, 10);
    },
    // FDB
    addLeftList: function(leftList){
        var self = this, block = null;
        var body = leftList.$$container.closest(".s-fusion-block-body");
        for (var i = 0, len = self.blocks.length; i < len && block == null; i++) {
            if (self.blocks[i].$$body.is(body)) {
                block = self.blocks[i];
            }
        }
        if (block) {
            block.leftList = leftList;
            block.onWindowResize();
        }
    },
    getArticle: function(){
        return this.fusionPage.getArticle();
    },
    dispose: function(){
        var self = this;
        if (self.blocks) {
            self.blocks.forEach(function(block){
                document.controller.disposeObject(block);
            });
            delete self.blocks;
        }
        if (self._navSteps) {
            Object.key(self._navSteps).forEach(function($step){
                self._navSteps[$step].unbind();
            });
            delete self._navSteps;
        }
        if (self.openedBlock) {
            self.openedBlock.dispose();
            delete self.openedBlock;
        }
        delete self.fusionPage;
    }
});
