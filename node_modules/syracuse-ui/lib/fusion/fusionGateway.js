"use strict";
var helpers = require('syracuse-core/lib/helpers');
var FusionSite = require('syracuse-ui/lib/fusion/core/client/inplace').FusionSite;
var WorkBook = require('./workBook').WorkBook;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;
var Breadcrumb = require('./breadcrumb').Breadcrumb;

var _keyHook = [keys["VK_TAB"], keys["VK_ENTER"], 73];

function FusionGateway(){
    this._books = [];
    this._bindEventsEx();
}

exports.FusionGateway = helpers.defineClass(FusionGateway, null, {
    _bindEventsEx: function(httpQuery){
        var self = this;
        $(document).delegate("body", "keydown", function(event){
            var $fusionPageMeta, doEvt, isGrid = false, winId, logger;
            if (!_.include(_keyHook, event.keyCode)) {
                return true;
            }
            // Are we on an active fusion sheet currently displayed
            $fusionPageMeta = self.activatedBook && self.activatedBook.selectedSheet ? syraUtil.getFusionPageMeta(self.activatedBook.selectedSheet) : null;
            winId = $fusionPageMeta && $fusionPageMeta.controller.isSapActiveWindow($fusionPageMeta.winModel.getWinId()) ? $fusionPageMeta.winModel.getWinId() : null;
            if ($fusionPageMeta && winId && self.activatedBook.selectedSheet.$$item && self.activatedBook.selectedSheet.$$item.is(":visible")) {
                if ((logger = $fusionPageMeta.controller ? $fusionPageMeta.controller.getLogger() : null)) {
                    logger.trace({}, "**onGatewayEvent : [" + event.type + "] for " + $fusionPageMeta.winModel.syraModel.getTitle());
                }
                doEvt = $fusionPageMeta.winModel.onWinEvent(event, $fusionPageMeta.controller);
                if (doEvt != undefined && !doEvt) {
                    event.stopImmediatePropagation();
                }
            }
            return doEvt;
        });
    },
    _unbindEventsEx: function(){
        $(document).undelegate("body", "keydown");
    },
    openMainPage: function(httpQuery){
        if (!this.breadcrumb) {
            (this.breadcrumb = new Breadcrumb()).load(this);
        }
        httpQuery.appendHost();
        var found = this.findBookByUrl(httpQuery);
        if (found) {
            this.activateBook(found.book);
        }
        else {
            this.openBook(httpQuery)
        }
        
    },
    findBookById: function(id){
        var found;
        for (var ii = 0; ii < this._books.length; ii++) {
            if (this._books[ii].id == id) {
                found = {
                    book: this._books[ii],
                    index: ii
                }
                break;
            }
        }
        return found;
    },
    findBookByUrl: function(httpQuery){
        var found;
        for (var ii = 0; ii < this._books.length; ii++) {
            if (httpQuery.$url == this._books[ii].httpQuery.$url) {
                found = {
                    book: this._books[ii],
                    index: ii
                }
                break;
            }
        }
        return found;
    },
    openBook: function(httpQuery){
        var self = this;
        var book = new WorkBook();
        book.httpQuery = httpQuery;
        book.fusionGateway = self;
        if (document.site.mainPage) {
            book.openerHttpQuery = document.site.mainPage.openerHttpQuery;
        }
        book.id = helpers.uuid.generate();
        self._books.push(book);
        (book.fusionSite = new FusionSite()).create(book.id, {
            instance: book,
            controller: document.controller,
            site: document.site
        }, null);
        self.breadcrumb.onBooksChange(self._books);
        book.fusionSite.connect(httpQuery, function(metaData){
            if (metaData) {
                document.site.showDiagnoses({
                    $diagnoses: metaData.$diagnoses
                });
            }
            self.closeBook(book, true);
        });
    },
    closeBook: function(book, noNavigation){
        book.onReleaseBook();
        if (this.activatedBook == book) {
            this.activatedBook = null;
        }
        var openerHttpQuery = book.openerHttpQuery;
        var found = this.findBookById(book.id);
        if (found) {
            this._books.splice(found.index, 1);
        }
        book.dispose();
        this.breadcrumb.onBooksChange(this._books);
        if (!noNavigation) {
            if (openerHttpQuery) {
                openerHttpQuery.$url = openerHttpQuery.fullUrl;
                document.controller._openMainPage(openerHttpQuery);
            }
            else {
                document.site.openHomeLink();
            }
        }
    },
    activateBook: function(book){
        if (this.activatedBook) {
            if (this.activatedBook != book) {
                this.activatedBook.onActivate(false);
                this.activatedBook = book;
                book.onActivate(true);
            }
        }
        book.selectSheet();
    },
    dispose: function(){
        if (this.breadcrumb) {
            this.breadcrumb.dispose();
            delete this.breadcrumb;
        }
        this._unbindEventsEx();
        delete this.activatedBook;
        this._books.forEach(function(book){
            book.dispose();
        });
        delete this._books;
    }
});
