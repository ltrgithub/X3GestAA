"use strict";
var helpers = require('syracuse-core/lib/helpers');
var FusionSite = require('syracuse-ui/lib/fusion/core/client/inplace').FusionSite;
var WorkBook = require('./workBook').WorkBook;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var util = require('syracuse-ui/lib/fusion/tools/util');
var filterMaker = require('syracuse-ui/lib/fusion/core/tools/filterMaker');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;

var _keyHook = [keys["VK_TAB"], keys["VK_ENTER"], 73];

function FusionGateway() {

}

exports.FusionGateway = helpers.defineClass(FusionGateway, null, {
	initialize: function() {
		this._books = [];
		this.filterMaker = filterMaker;
	},
	onKeyDow: function(event) {
		var $fusionPageMeta, doEvt, isGrid = false,
			winId, logger;
		if (!_.include(_keyHook, event.keyCode)) {
			return true;
		}
		// Are we on an active fusion sheet currently displayed
		$fusionPageMeta = this.activatedBook && this.activatedBook.selectedSheet ? syraUtil.getFusionPageMeta(this.activatedBook.selectedSheet) : null;
		winId = $fusionPageMeta && $fusionPageMeta.controller.isSapActiveWindow($fusionPageMeta.winModel.getWinId()) ? $fusionPageMeta.winModel.getWinId() : null;
		if ($fusionPageMeta && !syraUtil.isMsgBoxOpened() && winId && this.activatedBook.selectedSheet.$$item && this.activatedBook.selectedSheet.$$item.is(":visible")) {
			if ((logger = $fusionPageMeta.controller ? $fusionPageMeta.controller.getLogger() : null)) {
				logger.trace({}, "**onGatewayEvent : [" + event.type + "] for " + $fusionPageMeta.winModel.syraModel.getTitle());
			}
			doEvt = $fusionPageMeta.winModel.onWinEvent(event, $fusionPageMeta.controller);
			if (doEvt != undefined && !doEvt) {
				event.stopImmediatePropagation();
			}
		}
		return doEvt;
	},
	openMainPage: function(openerUrlSegments) {
		openerUrlSegments.$url = document.site.urlMaker.addHost(openerUrlSegments.$url);
		this.openBook(openerUrlSegments);
	},
	findBookById: function(id) {
		var found;
		for (var ii = 0; ii < this._books.length; ii++) {
			if (this._books[ii].id == id) {
				found = {
					book: this._books[ii],
					index: ii
				};
				break;
			}
		}
		return found;
	},
	openBook: function(openerUrlSegments) {
		/* if (this._books && this._books.length > 0) {
         this.activateBook(this._books[0]);
         var session = this._books[0].fusionSite.controller.getSession();
         document.site.showMessage({
         $type: "info",
         $title: session.getlabel("text", 202, "Activity management"),
         $message: session.getlabel("text", 203, " Please, close this activity before opening another"),
         });
         return;
         }*/
		var self = this;
		var book = new WorkBook();
		this.activateBook(book);
		book.openerUrlSegments = openerUrlSegments;
		book.fusionGateway = self;
		if (document.site.mainPage) {
			book.openeropenerUrlSegments = document.site.mainPage.openerUrlSegments;
		}
		book.id = helpers.uuid.generate();
		self._books.push(book);
		(book.fusionSite = new FusionSite()).create(book.id, {
			instance: book,
			controller: document.controller,
			site: document.site
		}, null);
		book.fusionSite.connect(openerUrlSegments, function(metaData, navigate) {
			if (metaData) {
				document.site.showDiagnoses({
					$diagnoses: metaData.$diagnoses
				});
			}
			self.closeBook(book, !navigate);
		});
	},
	showSiteFusionHeader: function(show) {
		var site = document.site;
		var link, i, len, exoLinks = ["homeLink", "navigationLink"];
		if (!show && site.closeSearchFieldPopup) {
			site.closeSearchFieldPopup();
		}
		if (site.fusionHeaderHomeLink) {
			site.fusionHeaderFunctionLink.mn.style.display = site.fusionHeaderHomeLink.style.display = show ? "" : "none";
		}
		for (i = 0, len = exoLinks.length; i < len; i++) {
			if ((link = site[exoLinks[i]]))
				link.mn.style.display = show ? "none" : "";
		}
		if (site.searchField) {
			site.searchField.domItem.style.display = show ? "none" : "";
		}
	},
	getActivatedSheet: function() {
		return this.activatedBook && this.activatedBook.selectedSheet;
	},
	closeBook: function(book, noNavigation) {
		if (this.activatedBook == book) {
			this.activatedBook = null;
		}
		var openeropenerUrlSegments = book.openeropenerUrlSegments;
		var found = this.findBookById(book.id);
		if (found) {
			this._books.splice(found.index, 1);
		}
		book.dispose();

		this.showSiteFusionHeader(false);

		if (!noNavigation) {
			if (openeropenerUrlSegments) {
				document.site.history.load(openeropenerUrlSegments.$url);
			} else {
				document.site.gotoHome();
			}
		}
	},
	activateBook: function(book) {
		if (this.activatedBook) {
			if (this.activatedBook != book) {
				this.activatedBook.onActivate(false);
				this.activatedBook = book;
				book.onActivate(true);
			}
		} else {
			this.activatedBook = book;
		}
		book.selectSheet();
	},
	canDetachBooks: function() {
		// In order to prevent Convergence client from detaching books on timeout while pending long polling
		var i, len, pendingSess = false;
		for (i = 0, len = this._books.length; i < len; i++) {
			if (this._books[i].fusionSite.isRequestPending()) {
				pendingSess = true;
				break;
			}
		}
		return !pendingSess;
	},
	detachAllBooksPanic: function() {
		var i, len = this._books.length,
			tabSid = [],
			nieme, masterBookCtrl, strgSid = null;
		if (len > 0) {
			for (i = 0; i < len; i++) {
				if ((nieme = this._books[i]) && (nieme = nieme.fusionSite) && (nieme = nieme.sid)) {
					tabSid.push("&sid_" + i + "=" + nieme);
				}
			}
			if (tabSid.length > 1) {
				tabSid.splice(0, 1);
				strgSid = tabSid.join("");
			}
			if ((masterBookCtrl = this._books[0].fusionSite.controller)) {
				masterBookCtrl.delSapSessExPanic(strgSid);
			}
		}
	},
	detachAllBooks: function(notifyHoster, timeout, force, noNavigateOnClose, opts) {
		var i, len, tabSid = [],
			tabClt = [],
			curr = 0,
			max = 0,
			svrtSuccess = "success",
			diagOk = util.makeDiagnosis("", svrtSuccess, null, "39");
		for (i = 0, len = this._books.length; i < len; i++) {
			tabClt[i] = {
				"cltRef": this._books[i]
			};
			if (this._books[i] && this._books[i].fusionSite && this._books[i].fusionSite.sid) {
				tabSid.push(this._books[i].fusionSite.sid);
			}
		}
		max = tabClt.length;
		if (opts && opts.panic && max > 0) {
			// Massive close on panic!
			if (tabSid.length > 1) {
				tabSid.splice(0, 1);
			} else {
				tabSid = null;
			}
			tabClt[0].cltRef.fusionSite.emergencyCltClose("detachAllBooksPanic", tabSid);
			//notifyHoster(diagOk);     //Not necessary... because panic!
			return;
		}

		function release() {
			for (i = 0; i < max; i++) {
				delete tabClt[i].cltRef;
			}
		}

		function walkDetach(diagnosis, hardDetach) {
			var currErr, forceEx = hardDetach !== null && hardDetach !== undefined ? hardDetach : force;
			if ((diagnosis.severity || diagnosis.$severity) == svrtSuccess) {
				if (curr == max) {
					release();
					notifyHoster(diagnosis);
				} else {
					tabClt[curr++].cltRef.fusionSite.disconnect(walkDetach, timeout, forceEx, noNavigateOnClose);
				}
			} else {
				currErr = curr - 1;
				notifyHoster(diagnosis, currErr, tabClt[currErr].cltRef, function(forceDetach) {
					if (forceDetach) {
						curr = currErr;
						walkDetach(diagOk, true);
					} else {
						release();
					}
				});
			}
		}
		if (max > 0) {
			walkDetach(diagOk);
		} else {
			notifyHoster(util.makeDiagnosis("", svrtSuccess, null, "0"));
		}
	},
	dispose: function() {
		delete this.activatedBook;
		this._books.forEach(function(book) {
			book.dispose();
		});
		this._books = this.filterMaker = null;
	}
});