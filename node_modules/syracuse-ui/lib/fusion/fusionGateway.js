"use strict";
var helpers = require('syracuse-core/lib/helpers');
var FusionSite = require('syracuse-ui/lib/fusion/core/client/inplace').FusionSite;
var WorkBook = require('./workBook').WorkBook;
var _sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util');
var util = require('syracuse-ui/lib/fusion/tools/util');
var _requestActions = require('syracuse-ui/lib/fusion/core/client/sap/srvactions');

var _messageCodes = ["3", "4", "5", "8", "9", "12", "13", "14", "16", "19", "20", "21", "23"];

exports.gateway = {
	defLang: "en-US",
	_books: [],
	sapUtil: _sapUtil.Fusion,
	syraUtil: _sapUtil.Syra,
	filterMaker: require('syracuse-ui/lib/fusion/core/tools/filterMaker'),
	getMessage: function(code) {
		var mess = syra_local["fusion_" + code];
		if (mess && _messageCodes.indexOf(code) >= 0) {
			mess += "\n" + syra_local.fusion_18;
		}
		if (!mess) {
			mess = "***localized message unknown***";
		}
		return mess || _unknow;
	},
	onWindowBeforeUnload: function(event) {
		if (this._books && this._books.length > 0) {
			return syra_local.disconnect_convergence_unload.replace("{booksNb}", this._books.length);
		}
	},
	_promptOnUserProfileChange: function(reason, cbckContinue, cbckCancel) {
		if (this._books && this._books.length) {
			var mess, $title;
			var prefLocal = "onuserprofilechange_";
			if (reason == "logout") {
				mess = syra_local[prefLocal + reason];
				$title = syra_local[prefLocal + "title" + reason];
			} else {
				if (!reason || !(mess = syra_local[prefLocal + reason])) {
					mess = syra_local[prefLocal + "defaultmess"];
				}
				mess += ("\n" + syra_local[prefLocal + "mark"]);
				$title = syra_local[prefLocal + "title"];
			}
			mess += ("\n" + String.fromCharCode(1) + "\n" + syra_local[prefLocal + "confirm"]);
			syra_alert.modal({
				$message: mess,
				$title: $title,
				$type: "warning",
				$buttons: "yesno",
				$isAutoClose: 40000,
				$default: "yes",
				click: function(response, closedBy) {
					var close = closedBy == "yes" || closedBy == "auto";
					if (!close) {
						syra_site.topPanel.toggle(false);
						if (cbckCancel) {
							cbckCancel();
						}
					} else {
						cbckContinue();
					}
					return true;
				}
			});
		} else {
			cbckContinue();
		}
	},
	onUserActionUnload: function(callback, cancelCallback, reason, noPrompt) {
		var self = this;
		if (!noPrompt) {
			self._promptOnUserProfileChange(reason, function() {
				self._onUserActionUnloadEx(callback, cancelCallback);
			}, cancelCallback);
		} else {
			self._onUserActionUnloadEx(callback, cancelCallback);
		}
	},
	_onUserActionUnloadEx: function(callback, cancelCallback) {
		var self = this;

		function notifyHoster(diag, client, clientRef, cbck) {
			if ((diag.severity || diag.$severity) !== "success") {
				syra_alert.modal({
					$message: diag.message || diag.$message || syra_local.disconnect_userunload_msg,
					$type: "warning",
					$buttons: "okcancel",
					$isAutoClose: 25000,
					$default: "ok",
					$title: diag.$title || syra_local.disconnect_userunload_title,
					click: function(response, closedBy) {
						var close = closedBy == "ok" || closedBy == "auto";
						if (!close) {
							syra_site.topPanel.toggle(false);
							self.activateBook(clientRef);
							if (cancelCallback) {
								cancelCallback();
							}
						}
						setTimeout(function() {
							cbck(close);
						}, 5);
						return true;
					}
				});
			} else {
				callback();
			}
		}
		if (self._books && self._books.length) {
			// check if there is an ongoing dialogue between client and server
			// yes -> can't proceed. show alert message
			// no -> proceed (see below)
			self.detachAllBooks(notifyHoster, false, false, true);
		} else {
			callback();
		}
	},
	updateRequestTimer: function() {
		var self = this;

		function notifyHoster(diag, client, clientRef) {
			if ((diag.severity || diag.$severity) !== "success") {
				//debugger; // severity is supposed to be success, cause detach has been forced
			} else {
				setTimeout(function() {
					syra_alert.info(syra_local.disconnect_timeout_info);
				}, 1000);
			}
		}
		// maintain session by sending a useless request to server
		function callbackConfirm() {
			syra_ajax.get({
				url: "/sdata/syracuse/collaboration/syracuse/sessionInfos?representation=sessionInfo.$query&count=1",
				success: function(data) {}
			});
		}
		// convergence sessions will be closed and you will head back to syracuse 
		function callbackCancel() {
			//TODO
			self.detachAllBooks(notifyHoster, true, true, false);
		}

		if (self._books && self._books.length > 0) {
			var delay = 180000; // 3 minutes
			var timeout = syra_site.userProfile.getServerSessionTimeOut && (syra_site.userProfile.getServerSessionTimeOut() - delay) || 120000; // 2 minutes default
			// if negative
			timeout = timeout <= 0 ? 120000 : timeout;

			// clear any previous ongoing timeout
			clearTimeout(self.serverTimeOutHandler);

			// run timer
			self.serverTimeOutHandler = setTimeout(function() {
				if (self.canDetachBooks()) {
					syra_alert.modal({
						$message: syra_local.disconnect_timeout_msg,
						$type: "warning",
						$buttons: "yesno",
						$isAutoClose: 25000,
						$default: "no",
						$title: syra_local.disconnect_timeout_title,
						click: function(response, closedBy) {
							var close = closedBy == "yes";
							if (!close) {
								callbackCancel();
							} else {
								callbackConfirm();
							}
							return true;
						}
					});
				} else {
					callbackConfirm();
				}
			}, timeout);

		} else {
			clearTimeout(self.serverTimeOutHandler);
		}
	},
	openMainPage: function(openerUrlSegments) {
		openerUrlSegments.$url = syra_url.addHost(openerUrlSegments.$url);
		this.openBook(openerUrlSegments);
	},
	findBookById: function(id) {
		var found;
		for (var ii = 0; ii < this._books.length; ii++) {
			if (this._books[ii].id == id) {
				found = {
					book: this._books[ii],
					index: ii
				};
				break;
			}
		}
		return found;
	},
	openBook: function(openerUrlSegments) {
		var self = this;
		var book = new WorkBook();
		this.activateBook(book);
		book.openerUrlSegments = openerUrlSegments;
		if (syra_site.mainPage) {
			book.openeropenerUrlSegments = syra_site.mainPage.openerUrlSegments;
		}
		book.id = helpers.uuid.generate();
		self._books.push(book);
		(book.fusionSite = new FusionSite()).create(book.id, {
			instance: book
		}, null);
		book.fusionSite.connect(openerUrlSegments, function(metaData, navigate) {
			metaData && syra_alert.show(metaData.$diagnoses);
			self.closeBook(book, !navigate);
		});
	},
	showSiteFusionHeader: function(show) {
		if (syra_site.searcher) {
			!show && syra_site.searcher.closeSuggest();
			syra_dom.hide(syra_site.searcher.domItem, show);
		}
		if (show) {
			if (!syra_site.fusionGotoFunctionLink) {
				var cvgAct = _requestActions.getSrvAction("SRV_ADXEXECUTE");
				syra_site.fusionGotoFunctionLink = syra_site.addItem(syra_site.headerTop, {
					$bind: cvgAct,
					$category: "link",
					$noText: true,
					$skin: "s-site-goto-function",
					$act: cvgAct,
					$shortCutTip: syra_shortCuts.tip.searchBox
				});
				syra_site.fusionGotoFunctionLink.setMenu({
					$title: syra_local.site_link_goto_function
				});
				syra_site.headerTop.insertBefore(syra_site.fusionGotoFunctionLink.domItem, syra_site.homeLink.domItem);
			}
		}
		var $binds = ["home", "navigation"];
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var link = syra_site[$bind + "Link"];
			syra_dom.toggleClass(link.domItem, "s-fusion-link", show);
			link.isExternalHidden = true;
			link.setMenu({
				$title: syra_local["site_link_" + $bind + (show ? "_fusion" : "")]
			});
			link.$target = show ? "blank" : "";
		}

		syra_site.fusionGotoFunctionLink && syra_site.fusionGotoFunctionLink.showMenuItem(show);

	},
	getActivatedSheet: function() {
		return this.activatedBook && this.activatedBook.selectedSheet;
	},
	closeBook: function(book, noNavigation) {
		if (this.activatedBook == book) {
			this.activatedBook = null;
		}
		var openeropenerUrlSegments = book.openeropenerUrlSegments;
		var found = this.findBookById(book.id);
		if (found) {
			this._books.splice(found.index, 1);
		}
		book.dispose();

		this.showSiteFusionHeader(false);

		if (!syra_fusion.isClosingAll && !noNavigation) {
			syra_url.history.load({
				$url: openeropenerUrlSegments ? openeropenerUrlSegments.$url : syra_site.menuItems.$navigation[0].$url
			});
		}
	},
	activateBook: function(book) {
		if (this.activatedBook) {
			if (this.activatedBook != book) {
				this.activatedBook.onActivate(false);
				this.activatedBook = book;
				book.onActivate(true);
			}
		} else {
			this.activatedBook = book;
		}
		book.selectSheet();
	},
	canDetachBooks: function() {
		// In order to prevent Convergence client from detaching books on timeout while pending long polling
		var i, len, pendingSess = false;
		for (i = 0, len = this._books.length; i < len; i++) {
			if (this._books[i].fusionSite.isRequestPending()) {
				pendingSess = true;
				break;
			}
		}
		return !pendingSess;
	},
	detachAllBooksPanic: function() {
		var len = (this._books && this._books.length) || 0;
		if (len > 0) {
			var tabSid = [],
				nieme, masterBookCtrl, strgSid = null;
			for (var ii = 0; ii < len; ii++) {
				if ((nieme = this._books[ii]) && (nieme = nieme.fusionSite) && (nieme = nieme.sid)) {
					tabSid.push("&sid_" + ii + "=" + nieme);
				}
			}
			if (tabSid.length > 1) {
				tabSid.splice(0, 1);
				strgSid = tabSid.join("");
			}
			if ((masterBookCtrl = this._books[0].fusionSite.controller)) {
				masterBookCtrl.delSapSessExPanic(strgSid);
			}
		}
	},
	detachAllBooks: function(notifyHoster, timeout, force, noNavigateOnClose, opts) {
		var i, len, tabSid = [],
			tabClt = [],
			curr = 0,
			max = 0,
			svrtSuccess = "success",
			diagOk = util.makeDiagnosis("", svrtSuccess, null, "39");
		for (i = 0, len = this._books.length; i < len; i++) {
			tabClt[i] = {
				"cltRef": this._books[i]
			};
			if (this._books[i] && this._books[i].fusionSite && this._books[i].fusionSite.sid) {
				tabSid.push(this._books[i].fusionSite.sid);
			}
		}
		max = tabClt.length;
		if (opts && opts.panic && max > 0) {
			// Massive close on panic!
			if (tabSid.length > 1) {
				tabSid.splice(0, 1);
			} else {
				tabSid = null;
			}
			tabClt[0].cltRef.fusionSite.emergencyCltClose("detachAllBooksPanic", tabSid);
			//notifyHoster(diagOk);     //Not necessary... because panic!
			return;
		}

		function release() {
			for (i = 0; i < max; i++) {
				delete tabClt[i].cltRef;
			}
		}

		function walkDetach(diagnosis, hardDetach) {
			var currErr, forceEx = hardDetach !== null && hardDetach !== undefined ? hardDetach : force;
			if ((diagnosis.severity || diagnosis.$severity) == svrtSuccess) {
				if (curr == max) {
					release();
					notifyHoster(diagnosis);
				} else {
					tabClt[curr++].cltRef.fusionSite.disconnect(walkDetach, timeout, forceEx, noNavigateOnClose);
				}
			} else {
				currErr = curr - 1;
				notifyHoster(diagnosis, currErr, tabClt[currErr].cltRef, function(forceDetach) {
					if (forceDetach) {
						curr = currErr;
						walkDetach(diagOk, true);
					} else {
						release();
					}
				});
			}
		}
		if (max > 0) {
			walkDetach(diagOk);
		} else {
			notifyHoster(util.makeDiagnosis("", svrtSuccess, null, "0"));
		}
	},
	onBlockExRpc: function(field, proxy, values, opt) {
		var callDesc;
		if (typeof proxy === 'object') {
			callDesc = proxy;
			proxy = undefined;
		}
		opt = opt || {};
		field.page.externalAdapter.onBlockExRpc({
			field: field,
			call: {
				proxy: proxy,
				callDesc: callDesc,
				values: values,
				onError: opt.onError,
				callback: function(res) {
					if (!opt.isErrorIgnore) {
						var $diagnoses = !res ? [{
							message: "No result",
							severity: "error"
						}] : res.$diagnoses || null;
						if ($diagnoses) {
							syra_alert.error($diagnoses);
							return;
						}
					}
					opt.callback && opt.callback(res);
				}
			}
		});
	},
	dispose: function() {
		delete this.activatedBook;
		this._books.forEach(function(book) {
			book.dispose();
		});
		this._books = this.filterMaker = null;
	}
};