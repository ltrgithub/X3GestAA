"use strict";
var helpers = require('syracuse-core/lib/helpers');
var box = require('syracuse-ui/lib/article/box').Box;
var util = require('syracuse-ui/lib/fusion/core/client/sap/util');
var utilEx = require('syracuse-ui/lib/fusion/tools/util');
var requestActions = require('syracuse-ui/lib/fusion/core/client/sap/srvactions');
var localize = require('syracuse-ui/lib/fusion/tools/localize').localize;
var sapUtil = util.Fusion;
var syraUtil = util.Syra;


function WorkBook(){
    this.sheets = [];
}

exports.WorkBook = helpers.defineClass(WorkBook, null, {
    releaseMainPage: function(options){
        this._unselectSheet(this.selectedSheet);
        this.fusionGateway.breadcrumb._closePopup();
    },    
    setDataBindArray: function(field, $resources, record, metaData){
        return true;
    },
    setDataBind: function(field, $resources, record, metaData){
        if (metaData) {
            if (metaData.tit != undefined) {
                field.setTitle(metaData.tit);
            }
            if (!(metaData.dch === undefined) && field.removeListItems) {
                // "dch" = null mean 'restaure initial values', dch = [x, y, z,...] mean exclude x, y, z,... values
                field.removeListItems(metaData.dch);
            }
            if (metaData.stt != undefined && field.setState) {
                field.setState(sapUtil.getState(metaData.stt));
            }
            if (metaData.sty != undefined && field.applyFieldStyle) {
                field.applyFieldStyle({
                    "$valueStyle": metaData.sty
                });
            }
        }
        return true;
    },
    notifyFldMandatoryErr: function(){
        return false;
    },
    applyDesignStyle: function(field, $field, $item){
        var controller, style, propStyle = $field.$fieldStyle || $field.$valueStyle || $field.$titleStyle, ret = false;
        if (propStyle && (controller = syraUtil.getFusionController(field))) {
            style = {
                "sty": propStyle
            };
            if (propStyle.charAt(0) === ";") {
                ret = true;
            }
            else 
                if (sapUtil.cureStyle(style, $item.$bind, controller.getSession())) {
                    if (style.sty.length > 0 && style.sty.charAt(0) != ";") {
                        style.sty = ";" + style.sty;
                    }
                    $field[$field.$fieldStyle ? "$fieldStyle" : ($field.$valueStyle ? "$valueStyle" : "$titleStyle")] = style.sty;
                    ret = true;
                }
        }
        return ret;
    },
    setPickerValue: function(options){
        var doEvt = true;
        if (this.fusionSite.controller) {
            var widget = (options.target && options.target.arrayLevel) ? options.target.arrayLevel : "field";
            doEvt = this.fusionSite.controller.triggerAdx("wdgt." + widget + ".calendarclosed", {
                "target": options.target,
                "data": options
            });
        }
        if (doEvt && options.doStatements) {
            options.doStatements(options);
        }
    },
    _unselectSheet: function(sheet){
        if (sheet && sheet.$$item) {
            if (!sheet.$$fusionMemHost) {
                sheet.$$fusionMemHost = $("<div/>");
            }
            sheet.$$fusionMemHost.append(sheet.$$item);
            sheet.isSelected = false;
        }
    },
    selectSheet: function(sheet){
        var sheetMeta;
        if (this.fusionGateway.activatedBook && this.fusionGateway.activatedBook != this) {
            this.fusionGateway.activatedBook(this);
        }
        else {
            if (sheet && this.selectedSheet && this.selectedSheet != sheet) {
                this._unselectSheet(this.selectedSheet);
                delete this.selectedSheet;
            }
            sheet = sheet || this.sheets[this.sheets.length - 1];
            if (document.site.mainPage != this.selectedSheet) {
                document.site._releaseMainPage();
            }
            this.selectedSheet = sheet;
            if (this.selectedSheet.$$item.closest(document.site.$$body).length == 0) {
                document.site.$$body[0].style.display = "none";
                document.site.mainPage = this.selectedSheet;
                this.selectedSheet.$$item.appendTo(this.selectedSheet.$$container = document.site.$$body);
                document.site.$$body[0].style.display = "";
                sheetMeta = syraUtil.getFusionPageMeta(this.selectedSheet);
                //!sheetMeta.controller.isSapActiveWindow(sheetMeta.winModel.getWinId())
                this.selectedSheet.isSelected = true;
            }
            document.site.resize();
        }
    },
    loadSheet: function($itemPage, $facet, opts){
        this.fusionGateway.breadcrumb._closePopup();
        if (syraUtil.isDialogFacet($facet)) {
            this.selectedSheet = this._loadDialog($itemPage, $facet, opts);
        }
        else {
            if (this.sheets.length == 0) {
                this.selectedSheet = document.site.onMainPageChange($itemPage);
            }
            else {
                this._unselectSheet(this.selectedSheet);
                document.site.$$body[0].style.display = "none";
                $itemPage.boxParent = null;
                $itemPage.$$container = document.site.$$body;
                this.selectedSheet = document.site.loadNewPage($itemPage);
                document.site.$$body[0].style.display = "";
            }
        }
        this.selectedSheet.isSelected = true;
        document.site.resize();
        this.selectedSheet.onWindowResize();
        this.fusionGateway.activatedBook = this;
        this.sheets.push(this.selectedSheet);
        return this.selectedSheet;
    },
    closeSheet: function(event, fusionDispose){
        var sheet = event.data.sheet, found;
        if (sheet) {
            for (var ii = this.sheets.length - 1; ii >= 0; ii--) {
                if (this.sheets[ii] == sheet) {
                    if (sheet == this.selectedSheet) {
                        this._unselectSheet(sheet);
                    }
                    this.sheets.splice(ii, 1);
                    this._disposeSheet(sheet);
                    found = ii;
                    break;
                }
            }
            if (found != undefined && (--found) >= 0) {
                this.selectSheet(this.sheets[found]);
            }
        }
    },
    _loadDialog: function($itemPage, $facet, opts){
        var options = opts || {}, self = this, dialog;
        // Set dialog options. TODO : improve options settings according $facet...
        options.$itemPage = $itemPage;
        options.boxParent = this;
        options.onClose = function(validated, dispose){
            if (!dispose) {
                // Close must be confirm by server. So, we return "false"
                self.fusionSite.controller.triggerAdx("wdgt.win.close", {
                    "target": dialog,
                    "type": "close"
                });
                // Warning : normaly, server will force window close, and then, client controller "close stub" may call "dispose" method of "Dialog" class and, finally, all should be released safety!
                return false;
            }
            else {
                return true;
            }
        };
        // Update sheets manager
        if (this.sheets.length > 0) {
            this._unselectSheet(this.selectedSheet);
            delete this.selectedSheet;
        }
        // Open dialog and return is content (i.e page)
        $itemPage.boxParent = null;
        dialog = box.prototype.openDialog.call(this, options);
        return dialog._content;
    },
    onActivate: function(status){
        if (status === false) {
            this._unselectSheet(this.selectedSheet);
            delete this.selectedSheet;
        }
        this.fusionSite.onActivate(status);
    },
    onReleaseBook: function(event){
        // Called by fusionGatway, on "closeBook()"
    },
    _disposeSheet: function(sheet){
        var dialog = null;
        if (sheet && !sheet.disposed) {
            if (sheet.$$fusionMemHost) {
                sheet.$$fusionMemHost.remove();
            }
            delete sheet.externalAdapter;
            if (this._dialogs) {
                for (var ii = 0, jj = this._dialogs.length; ii < jj; ii++) {
                    if (this._dialogs[ii]._content == sheet) {
                        this.closeDialog.call(this, dialog = this._dialogs[ii]);
                        break;
                    }
                }
            }
            if (dialog) {
                document.controller.disposeObject(dialog);
            }
            else {
                document.controller.disposeObject(sheet);
            }
        }
    },
    onMenuItemClick: function(options){
        var doEvt = true;
        if (!document.site.authorPage) {
            var article = options.menuItem && options.menuItem.getArticle ? options.menuItem.getArticle() : null;
            var articleMeta = article ? syraUtil.getMetaFromObject(article) : null;
            var isLeftListItem = articleMeta && articleMeta.$bind && sapUtil.isListTab(articleMeta.$bind) || null;
            var action = (!isLeftListItem && article && article.arrayLevel) ? (article.arrayLevel + ".action") : "link.click";
            if (this.fusionSite.controller) {
                doEvt = this.fusionSite.controller.triggerAdx("wdgt." + action, {
                    "target": options.menuItem,
                    "type": "click"
                }, isLeftListItem);
            }
        }
        if (doEvt) {
            options.doEvent();
        }
    },
    onBoxToggle: function(options){
        if (document.site.authorPage) {
            if (options.doEvent) {
                options.doEvent();
            }
        }
        else {
            var doEvt = true;
            var targetType = null, boxMeta = null, xid = null;
            if (this.fusionSite.controller && (boxMeta = syraUtil.getMetaFromObject(options.box))) {
                targetType = (xid = sapUtil.isFolderTab(boxMeta[sapUtil.metaNameMap.xid])) ? "tabs" : null;
                targetType = xid ? targetType : ((xid = sapUtil.isListTab(boxMeta[sapUtil.metaNameMap.xid])) ? "list" : null);
                if (targetType && !options.onDrawParent && !this.fusionSite.controller.isFixtureMode()) {
                    doEvt = this.fusionSite.controller.triggerAdx("wdgt." + targetType + ".toggle", {
                        "target": options.box,
                        "type": "toggle",
                        "data": options
                    }, xid);
                }
                if (doEvt) {
                    options.doEvent();
                    if (targetType) {
                        this.fusionSite.controller.triggerAdx("wdgt." + targetType + ".toggled", {
                            "target": options.box,
                            "type": "toggled",
                            "data": options
                        }, xid);
                    }
                }
            }
        }
    },
    onBoxClick: function(options){
        if (document.site.authorPage) {
            if (options.doEvent) {
                options.doEvent();
            }
        }
        else {
            var doEvt = true, targetType = null, boxMeta = null, xid = null;
            if (this.fusionSite.controller && (boxMeta = syraUtil.getMetaFromObject(options.box))) {
                targetType = (xid = sapUtil.isFolderTab(boxMeta[sapUtil.metaNameMap.xid])) ? "tabs" : null;
                targetType = xid ? targetType : ((xid = sapUtil.isListTab(boxMeta[sapUtil.metaNameMap.xid])) ? "list" : null);
                if (targetType && !this.fusionSite.controller.isFixtureMode()) {
                    doEvt = this.fusionSite.controller.triggerAdx("wdgt." + targetType + ".click", {
                        "target": options.box,
                        "type": "click",
                        "data": options
                    }, xid);
                }
                if (doEvt && options.doEvent) {
                    options.doEvent();
                }
                else 
                    if (doEvt === false) {
                        options.event.stopImmediatePropagation();
                    }
            }
        }
    },
    onFieldEvent: function(options, redirect){
        var doEvt = true;
        if (!document.site.authorPage) {
            var listner, currIstEdit;
            this.fusionSite._session.logger.trace({}, "**onFieldEvent : [" + options.event.type + "] on field [" + (syraUtil.getMetaFromObject(options.field)).$bind + " " + (options.field && options.field.arrayLevel ? options.field.arrayLevel : "field") + "]");
            switch (options.event.type) {
                case "click":
                    listner = "wdgt." + (options.field && options.field.arrayLevel && !sapUtil.isListScreen(syraUtil.getMetaFromObject(options.field).$bind) ? options.field.arrayLevel : "field") + "." + options.event.type;
                    this.fusionSite._session.logger.trace({}, " -----> Listner : [" + listner + "] field type : [" + syraUtil.getFieldType(options.field) + "] Edit :[" + this.fusionSite.controller._sapController.getCurrInst().edit + "]");
                    doEvt = this.fusionSite.controller.triggerAdx(listner, {
                        "target": options.field,
                        "type": options.event.type,
                        "data": {
                            "nativeEvt": options.event
                        }
                    });
                    if (!doEvt) {
                        options.event.stopImmediatePropagation();
                    }
                    break;
                case "keydown":
                    //listner = "wdgt.field." + options.event.type
                    listner = "wdgt." + (!redirect && options.field && options.field.arrayLevel && !sapUtil.isListScreen(syraUtil.getMetaFromObject(options.field).$bind) ? options.field.arrayLevel : "field") + "." + options.event.type;
                    this.fusionSite._session.logger.trace({}, " -----> Listner : [" + listner + "] field type : [" + syraUtil.getFieldType(options.field) + "] Edit :[" + this.fusionSite.controller._sapController.getCurrInst().edit + "]");
                    doEvt = this.fusionSite.controller.triggerAdx(listner, {
                        "target": options.field,
                        "type": options.event.type,
                        "data": {
                            "nativeEvt": options.event,
                            "nativeOpt": options
                        }
                    });
                    if (!doEvt) {
                        options.event.stopImmediatePropagation();
                    }
                    break;
                case "change":
                    listner = "wdgt." + (options.field && options.field.arrayLevel && !sapUtil.isListScreen(syraUtil.getMetaFromObject(options.field).$bind) && syraUtil.getFieldType(options.field) == syraUtil.dataTypes.booleanType ? options.field.arrayLevel : "field") + "." + options.event.type
                    this.fusionSite._session.logger.trace({}, " -----> Listner : [" + listner + "] field type : [" + syraUtil.getFieldType(options.field) + "] Edit :[" + this.fusionSite.controller._sapController.getCurrInst().edit + "]");
                    doEvt = this.fusionSite.controller.triggerAdx(listner, {
                        "target": options.field,
                        "type": options.event.type,
                        "data": {
                            "nativeEvt": options.event
                        }
                    });
                    if (!doEvt) {
                        options.event.stopImmediatePropagation();
                    }
                    break;
                case "keyup":
                    break;
                case "focusin":
                    break;
                case "focusout":
                    break;
            }
        }
        if (doEvt) {
            options.doEvent();
        }
        else 
            if (doEvt === false) {
                options.event.preventDefault();
                options.event.stopPropagation();
                options.event.stopImmediatePropagation();
            }
        return doEvt;
    },
    onSelectRecordEvent: function(options){
        var doEvt = true;
        if (!document.site.authorPage) {
            this.fusionSite._session.logger.trace({}, "**onSelectRecordEvent : [" + options.event.type + "] on record [" + (syraUtil.getMetaFromObject(options.field)).$bind + " " + options.uuidTarget + " " + (options.field && options.field.arrayLevel ? options.field.arrayLevel : "field") + "]");
            var list = options ? options.field : null, listMeta = null;
            if (list && this.fusionSite.controller && (listMeta = syraUtil.getMetaFromObject(options.field))) {
                // Note :  options{field, list, uuidTarget, isSelected,event, doEvent()
                /* 
                 * if (isNaN(options.uuidTarget))
                 return;
                 */
                //Pas glop� revoir : confusion uuid et recordIndex
                if (sapUtil.isListScreen(syraUtil.getMetaFromObject(options.field).$bind)) {
                    var doEvt = this.fusionSite.controller.triggerAdx("wdgt.list.selline", {
                        "target": list,
                        "type": "selline",
                        "data": {
                            "nativeEvt": options.event,
                            "line": parseInt(options.uuidTarget, 10) + 1,
                            "xid": listMeta.$bind,
                            "doEvent": options.doEvent
                        }
                    });
                }
                else {
                    var doEvt = this.fusionSite.controller.triggerAdx("wdgt.grid.selline", {
                        "target": options.field,
                        "type": options.event.type,
                        "data": {
                            "nativeEvt": options.event,
                            "uuid": options.uuidTarget
                        }
                    });
                }
            }
        }
        if (doEvt && options.doEvent) {
            options.doEvent();
        }
    },
    onSortClickEvent: function(options){
        var list = options ? options.field : null;
        var doEvt = true;
        if (list && this.fusionSite.controller) {
            doEvt = this.fusionSite.controller.triggerAdx("wdgt.list.sortLocal", {
                "target": list,
                "type": "sortLocal",
                "data": {
                    doEvent: options.doEvent
                }
            });
        }
        if (doEvt && options.doEvent) {
            options.doEvent();
        }
    },
    onGlobalClick: function(event){
        var currWindow = this.selectedSheet && this.selectedSheet.$fusionPageMeta && this.selectedSheet.$fusionPageMeta.winModel, fusionController = currWindow ? syraUtil.getFusionController(this.selectedSheet) : null;
        var doEvt, logger;
        if ((logger = fusionController ? fusionController.getLogger() : null)) {
            logger.trace({}, "**onPageEvent : " + "'" + currWindow.getTitle() + "'" + " [" + event.type + "]");
        }
        doEvt = !fusionController ? true : fusionController.triggerAdx("wdgt.win." + event.type, {
            "target": currWindow,
            "type": event.type,
            "data": {
                "nativeEvt": event
            }
        });
        if (doEvt != undefined && !doEvt) {
            event.stopImmediatePropagation();
        }
        return doEvt;
    },
    onFieldClickPicker: function(options){
        var widget = (options.field && options.field.arrayLevel) ? options.field.arrayLevel : "field";
        var doEvt = this.fusionSite.controller.triggerAdx("wdgt." + widget + ".picker", {
            "target": options.field,
            "type": "picker",
            "data": options
        });
        if (doEvt && options.doEvent) {
            options.doEvent();
        }
    },
    onFieldNotifyChange: function(options){
        var doEvt = false;
        //TODO - a revoir peut sans doute mieux faire!
        if (options && options.doEvent && options.field && options.field.$item && options.field.$item.$bind === "$itemsPerPage") {
            doEvt = true;
        }
        if (doEvt) {
            options.doEvent();
        }
    },
    closeDialog: function(dialog){
        box.prototype.closeDialog(this, dialog);
    },
    closeDialogs: function(dispose){
        box.prototype.closeDialogs(this, dispose);
    },
    release: function(){
        // Disconnect fusion Site
    },
    onUncaughtError: function(options){
        var err, stack, bProcess = true, unCaughtObj;
        try {
            if (this.fusionSite && this.fusionSite.controller && this.fusionSite.controller._sapController) {
                unCaughtObj = this.fusionSite.uncaughtErrorObj
                if (!this.fusionSite.uncaughtErrorCount || this.fusionSite.uncaughtErrorCount < 3) {
                    if (this.fusionSite.uncaughtErrorCount === undefined) {
                        this.fusionSite.uncaughtErrorCount = 1;
                        this.fusionSite.uncaughtErrorObj = {
                            "url": options.url,
                            "ln": options.lineNumber,
                            "err": options.error
                        };
                    }
                    else 
                        if (this.fusionSite.uncaughtErrorCount == 1 && options.url === unCaughtObj.url && options.error === unCaughtObj.err && options.lineNumber === unCaughtObj.ln) {
                            // Same error twvice
                            bProcess = false;
                        }
                        else {
                            this.fusionSite.uncaughtErrorCount++;
                            delete this.fusionSite.uncaughtErrorObj;
                            this.fusionSite.uncaughtErrorObj = {};
                        }
                }
                else {
                    bProcess = false;
                }
                if (bProcess) {
                    stack = "url: " + (options.url || "?") + "\nlineNumber: " + (options.lineNumber || "-1") + "\n" + (options.error || "");
                    err = [utilEx.makeDiagnosis(this.fusionSite._session.getlabel("error", "27", localize.getMessage(this.fusionSite._session.cdIsoLang, "16")), 4, stack, "27", utilEx.cltFusionNice, options.errorMsg || "")];
                    this.fusionSite.controller._sapController._sapException(null, err, {
                        "typ": "RqstSrv",
                        "act": requestActions.getSrvAction("SRV_FIN_APPLI")
                    });
                }
                else {
                    delete this.fusionSite.uncaughtErrorCount;
                    delete this.fusionSite.uncaughtErrorObj;
                    document.controller.disposeObject(document.site._msgBox);
                    options.errorMsg = this.fusionSite._session.getlabel("error", "28", localize.getMessage(this.fusionSite._session.cdIsoLang, "17"));
                    options.doEvent();
                }
            }
            else {
                options.doEvent();
            }
        } 
        catch (ex) {
            options.doEvent();
        }
    },
    dispose: function(){
        this.closeDialogs(true);
        if (this.fusionSite) {
            this.fusionSite.dispose();
            delete this.fusionSite;
        }
        if (this.sheets) {
            for (var ii = 0, jj = this.sheets.length; ii < jj; ii++) {
                this._disposeSheet(this.sheets[ii]);
            }
            delete this.sheets;
        }
        this.httpQuery = this.openerHttpQuery = this.selectedSheet = this.fusionGateway = null;
    }
});
