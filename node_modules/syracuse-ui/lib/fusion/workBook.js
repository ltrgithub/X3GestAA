"use strict";
var helpers = require('syracuse-core/lib/helpers');
var util = require('syracuse-ui/lib/fusion/core/client/sap/util');
var utilEx = require('syracuse-ui/lib/fusion/tools/util');
var requestActions = require('syracuse-ui/lib/fusion/core/client/sap/srvactions');
var sapUtil = util.Fusion;
var syraUtil = util.Syra;

function WorkBook() {
	this.sheets = [];
	this.dash = null;
}

exports.WorkBook = helpers.defineClass(WorkBook, null, {
	releaseMainPage: function() {
		this._unselectSheet(this.selectedSheet, null, null);
		this._toggleDialogSheets(false);
	},

	_getMainSheetFromDialog: function(dialog) {
		var found = -1;
		var realMainSheet = null;
		for (var i = 0; i < this.sheets.length && found === -1; i++) {
			if (this.sheets[i].id === dialog.id)
				found = i;
		}
		if (found !== -1 && found > 0) {
			var nonDialog = -1;
			for (var i = found; i >= 0 && nonDialog === -1; i--) {
				if (!this.sheets[i].dialogWrapper)
					nonDialog = i;
			}
			if (nonDialog !== -1) {
				realMainSheet = this.sheets[nonDialog];
			}
		}
		syra_site.mainPage = realMainSheet ? realMainSheet : dialog;
		if (!realMainSheet) {
			realMainSheet = this.dash;
		}
		return realMainSheet;
	},

	_toggleDialogSheets: function(show, sheet2Show) {
		syra_dlg.activateAll(this, show);
		if (show) {
			var ensMP = false;
			for (var ii = this.sheets.length - 1; ii >= 0; ii--) {
				var sheet = this.sheets[ii];
				if (!sheet.dialogWrapper && !ensMP) {
					syra_site.toggleMainPage(sheet, true);
					ensMP = true;
				} else
				if (ensMP && sheet.dialogWrapper) {
					sheet.dialogWrapper.activate(false);
				}
			}
			if (!ensMP && this.dash) {
				// So dashboard!
				syra_site.toggleMainPage(this.dash, true);
			}
		}
	},
	sortArray: function(list, $orderBy) {
		var cvgWin = syraUtil.getFusionPageMeta(list);
		if ((cvgWin = cvgWin && cvgWin.winModel)) {
			list.clientDataset = cvgWin.getDataStoreValue(list.$item.$bind, null, false, true, {
				"rawVal": true,
				"sort": {
					"$orderBy": $orderBy
				}
			});
			return false;
		}
		return true;
	},
	getPagerTotalRcdLabel: function(pagerBoundList, theoreticNb, dfltLabel) {
		var listMeta, realNb = null,
			cvgWin = syraUtil.getFusionPageMeta(pagerBoundList);
		if ((cvgWin = cvgWin && cvgWin.winModel) && (listMeta = syraUtil.getMetaFromObject(pagerBoundList)) && listMeta.$bind) {
			realNb = cvgWin.getDataStoreRecordsNumber(listMeta.$bind);
		}
		realNb = realNb !== null ? realNb : theoreticNb;
		return realNb + " " + (realNb > 1 ? dfltLabel[1] : dfltLabel[0]);
	},
	setDataBind: function(field, $resources, record, metaData) {
		if (metaData) {
			if (metaData.tit != undefined) {
				field.setTitle(metaData.tit);
			}
			if (field.removeListItems && field.$field.$format == "$combo") {
				// "dch" = null mean 'restaure initial values', dch = [x, y, z,...] mean exclude x, y, z,... values
				field.removeListItems(metaData.dch);
			}
			if (!(metaData.setch === undefined)) {
				field.forceEnum(metaData.setch);
			}
			if (metaData.stt != undefined && field.setState) {
				field.setState(sapUtil.getState(metaData.stt));
			}
			if (metaData.sty != undefined) {
				syra_fields.applyCustomStyle(field, {
					"$valueStyle": metaData.sty
				});
			}
		}
		return true;
	},
	notifyFldMandatoryErr: function() {
		return false;
	},
	applyDesignStyle: function(field, $field, $item) {
		var controller, style, propStyle = $field.$fieldStyle || $field.$valueStyle || $field.$titleStyle,
			ret = false;
		if (propStyle && (controller = syraUtil.getFusionController(field))) {
			style = {
				"sty": propStyle
			};
			if (propStyle.charAt(0) === ";") {
				ret = true;
			} else
			if (sapUtil.cureStyle(style, $item.$bind, controller.getSession())) {
				if (style.sty.length > 0 && style.sty.charAt(0) != ";") {
					style.sty = ";" + style.sty;
				}
				$field[$field.$fieldStyle ? "$fieldStyle" : ($field.$valueStyle ? "$valueStyle" : "$titleStyle")] = style.sty;
				ret = true;
			}
		}
		return ret;
	},
	setButtonValue: function(options) {
		var doEvt = true;
		if (this.fusionSite.controller) {
			var widget = (options.target && options.target.arrayLevel) ? ((sapUtil.isListScreen(syraUtil.getMetaFromObject(options.target).$bind)) ? "list" : options.target.arrayLevel) : "field";

			doEvt = this.fusionSite.controller.triggerAdx("wdgt." + widget + ".calendarclosed", {
				"target": options.target,
				"data": options
			});
		}
		if (doEvt && options.doStatements) {
			options.doStatements(options);
		}
	},
	_unselectSheet: function(sheet, onOpenNewOne, nextOneSheet) {
		var realSheet, ret = false;
		if (sheet && sheet.domItem) {
			if (sheet.dialogWrapper) {
				realSheet = this._getMainSheetFromDialog(sheet);
			}
			if (!realSheet) {
				realSheet = sheet;
			}
			if (!realSheet.dialogWrapper && (nextOneSheet == null || (nextOneSheet != realSheet && !onOpenNewOne))) {
				ret = true;
				syra_site.toggleMainPage(realSheet, false);
			}
			return ret;
		}
	},
	selectSheet: function(sheet) {
		if ((sheet = sheet || this.sheets[this.sheets.length - 1])) {
			this.selectedSheet = sheet == this.dash ? null : sheet;
			if (sheet.dialogWrapper) {
				this._toggleDialogSheets(true, sheet);
			} else
				syra_site.toggleMainPage(sheet, true);
			if (sheet.setHeaderLinkState) {
				sheet.setHeaderLinkState();
			}
			syra_site.checkMainPageBookmarkStatus();
		}
	},
	_getDashBoard: function() {
		if (!this.dash) {
			var categories = ["navigation", "landing"];
			var pages = syra_pageBuilder.getLoaded();
			for (var ii = 0, jj = pages.length; ii < jj; ii++) {
				if (categories.indexOf(pages[ii].$pageCategory) >= 0) {
					this.dash = pages[ii];
					break;
				}
			}
		}
	},
	loadSheet: function($itemPage, $facet, opts, onLoaded) {
		var self = this;
		if (syraUtil.isDialogFacet($facet)) {
			$itemPage.$isEditMode = $facet != "$lookup";
			if (self.sheets.length == 0 && $itemPage.$isEditMode) {
				syra_site.refreshMainPageSecurity($itemPage);
			}
			self._loadDialog($itemPage, $facet, opts, function(dlg) {
				self.sheets.push(self.selectedSheet = dlg._content);
				onLoaded(self.selectedSheet);
			});

		} else {
			self._getDashBoard();
			if (self.sheets.length == 0) {
				syra_site.onMainPageChange($itemPage, function(page) {
					page.displayed = true;
					self.sheets.push(self.selectedSheet = page);
					onLoaded(page);
				});
			} else {
				self._toggleDialogSheets(false);
				self._unselectSheet(self.selectedSheet, true, null);
				$itemPage.boxParent = null;
				$itemPage.layoutSlot = syra_site.body;
				if (self.sheets.length === 1 && self.sheets[0].dialogWrapper) {
					syra_site.onMainPageChange($itemPage, function(page) {
						page.displayed = true;
						self.sheets.push(self.selectedSheet = page);
						onLoaded(page);
					});
				} else {
					syra_dom.hide(syra_site.body, true);
					$itemPage.onMainPagechange = true;
					syra_pageBuilder.load($itemPage, function(page) {
						page.displayed = true;
						self.sheets.push(self.selectedSheet = page);
						onLoaded(page);
					});
				}
			}
		}
	},
	closeSheet: function(event, fusionDispose) {
		var sheet, unSelSheet, newSheet, found, ii;
		if ((sheet = event.data.sheet)) {
			for (ii = this.sheets.length - 1; ii >= 0; ii--) {
				if (this.sheets[ii] == sheet) {
					unSelSheet = sheet == this.selectedSheet ? sheet : null;
					found = ii;
					break;
				}
			}
			if (found != undefined) {
				if ((--found) >= 0) {
					newSheet = this.sheets[found];
				}
				if (unSelSheet) {
					this._unselectSheet(sheet, false, newSheet);
				}

				this.sheets.splice(ii, 1);
				this._disposeSheet(sheet);

				if (newSheet || this.dash) {
					this.selectSheet(newSheet || this.dash);
				}
			}
		}
	},
	onCloseSheet: function(sheet) {
		this.fusionSite.controller.triggerAdx("wdgt.win.close", {
			"target": sheet,
			"type": "close"
		});
		return false;
	},
	onCloseAllSheets: function(callback) {
		this.sheets.length &&
			this.fusionSite.controller.triggerAdx("wdgt.win.closeall", {
				"target": this,
				"type": "close",
				"callback": callback
			});
		return false;
	},
	_loadDialog: function($itemPage, $facet, opts, onLoaded) {
		var options = opts || {}, self = this;
		options.$itemPage = $itemPage;
		options.onClose = function(validated, dispose, dlg) {
			if (!dispose) {
				// Close must be confirm by server. So, we return "false"
				self.fusionSite.controller.triggerAdx("wdgt.win.close", {
					"target": dlg,
					"type": "close"
				});
				// Warning : normaly, server will force window close, and then, client controller "close stub" may call "dispose" method of "Dialog" class and, finally, all should be released safety!
				return false;
			} else {
				return true;
			}
		};
		if (opts && opts.validate) {
			options.onValidate = function(sheet, dlg) {
				self.fusionSite.controller.triggerAdx("wdgt.win.validate", {
					"target": dlg,
					"page": sheet.page
				});
				return false;
			};
		};
		// Update sheets manager
		if (this.sheets.length > 0) {
			delete this.selectedSheet;
		}
		this._getDashBoard();
		// Open dialog and return is content (i.e page)
		$itemPage.boxParent = null;
		options.onLoaded = onLoaded;
		if ($facet == "$lookup" || $facet == "$select") {
			syra_dlg.openLookup(this, options);
		} else {
			syra_dlg.openPage(this, options);
		}
	},
	onActivate: function(status) {
		if (status === false) {
			this._unselectSheet(this.selectedSheet);
			delete this.selectedSheet;
		}
		this._toggleDialogSheets(status !== false);
		this.fusionSite && this.fusionSite.onActivate(status);
	},
	_disposeSheet: function(sheet) {
		if (sheet && !sheet.disposed) {
			delete sheet.externalAdapter;
			(sheet.dialogWrapper || sheet).dispose();
		}
	},
	onMenuItemClick: function(options) {
		var doEvt = true;
		var article;
		if (options.menuItem) {
			if (options.menuItem.contextField && options.menuItem.contextField.isArrayField) {
				article = options.menuItem.contextField;
			}
			article = article || options.menuItem.articleParent;
		}
		var articleMeta = article ? syraUtil.getMetaFromObject(article) : null;
		var isLeftListItem = articleMeta && articleMeta.$bind && sapUtil.isListTab(articleMeta.$bind) || null;
		var action = (!isLeftListItem && article && article.arrayLevel) ? (article.arrayLevel + ".action") : "link.click";
		if (this.fusionSite.controller) {
			doEvt = this.fusionSite.controller.triggerAdx("wdgt." + action, {
				"target": options.menuItem,
				"type": "click",
				"data": options
			}, isLeftListItem);
		}
		if (doEvt) {
			options.doEvent();
		}
	},
	onBoxToggle: function(options) {
		if (this.isPageDesigned()) {
			if (options.doEvent) {
				options.doEvent();
			}
		} else {
			var doEvt = true,
				targetType = null,
				boxMeta = null,
				xid = null;
			if (this.fusionSite.controller && (boxMeta = syraUtil.getMetaFromObject(options.box))) {
				targetType = (xid = sapUtil.isFolderTab(boxMeta[sapUtil.metaNameMap.xid])) ? "tabs" : null;
				targetType = xid ? targetType : ((xid = sapUtil.isListTab(boxMeta[sapUtil.metaNameMap.xid])) ? "list" : null);
				if (targetType && !options.onDrawParent && !this.fusionSite.controller.isFixtureMode()) {
					doEvt = this.fusionSite.controller.triggerAdx("wdgt." + targetType + ".toggle", {
						"target": options.box,
						"type": "toggle",
						"data": options
					}, xid);
				}
				if (doEvt) {
					options.doEvent();
					if (targetType) {
						this.fusionSite.controller.triggerAdx("wdgt." + targetType + ".toggled", {
							"target": options.box,
							"type": "toggled",
							"data": options
						}, xid);
					}
				}
			}
		}
	},
	onBoxClick: function(options) {
		if (this.isPageDesigned()) {
			if (options.doEvent) {
				options.doEvent();
			}
		} else {
			var doEvt = true,
				targetType = null,
				boxMeta = null,
				xid = null;
			if (this.fusionSite.controller && (boxMeta = syraUtil.getMetaFromObject(options.box))) {
				targetType = (xid = sapUtil.isFolderTab(boxMeta[sapUtil.metaNameMap.xid])) ? "tabs" : null;
				targetType = xid ? targetType : ((xid = sapUtil.isListTab(boxMeta[sapUtil.metaNameMap.xid])) ? "list" : null);
				this.fusionSite._session.logger.trace({}, "**onBoxClick : [click] " + targetType);
				if (targetType && !this.fusionSite.controller.isFixtureMode()) {
					doEvt = this.fusionSite.controller.triggerAdx("wdgt." + targetType + ".click", {
						"target": options.box,
						"type": "click",
						"data": options
					}, xid);
				}
				if (doEvt && options.doEvent) {
					options.doEvent();
				} else
				if (doEvt === false) {
					options.event.stopPropagation();
				}
			}
		}
	},
	isPageDesigned: function() {
		return this.selectedSheet && this.selectedSheet.designer;
	},
	applyShortCut: function(field, shortcuts, event) {
		if (field && field.$item && field.$item.$bind == "$search") {
			if (shortcuts.enter)
				return false;
			return true;
		}
		var fieldCxt, sapController = this.fusionSite.controller._sapController,
			doEvt = true;
		if ((fieldCxt = sapController.getCurrInst())) {
			if (!field.isField && !field.isArrayField) {
				return false; // todo : manage shortcuts here for no field and no list - fusionBar ...
			}
			if (field.$item.$isFilterMode) {
				doEvt = this.fusionSite.controller.triggerAdx("wdgt.list.applyShortCut", {
					"target": field,
					"data": {
						"shortcuts": shortcuts
					}
				}, fieldCxt.xid);
			} else
			if (!(field.arrayLevel && field.arrayLevel === "cell")) {
				doEvt = this.fusionSite.controller.triggerAdx("wdgt.field.applyShortCut", {
					"target": field,
					"event": event,
					"data": {
						"shortcuts": shortcuts
					}
				}, fieldCxt.xid);
			} else {
				doEvt = this.fusionSite.controller.triggerAdx("wdgt.cell.applyShortCut", {
					"target": field,
					"event": event,
					"data": {
						"line": fieldCxt.nl,
						"shortcuts": shortcuts
					}
				}, fieldCxt.xid);
			}
			return !doEvt;
		}
		return false;
	},
	applyEscape: function(field) {
		// syraUtil.log("applyEscape ",field);
		var doEvt = true;
		var fieldCxt, currValue, oldValue, result, $fieldMeta, $fusionPageMeta, sapController = this.fusionSite.controller._sapController;
		if ((fieldCxt = sapController.getCurrInst())) {
			if (field.arrayLevel && field.arrayLevel === "cell") {
				doEvt = this.fusionSite.controller.triggerAdx("wdgt.cell.escape", {
					"target": field,
					"data": {
						line: fieldCxt.nl
					}
				}, fieldCxt.xid);
				return !doEvt;
			} else {
				doEvt = this.fusionSite.controller.triggerAdx("wdgt.field.escape", {
					"target": field,
				}, fieldCxt.xid);
				return !doEvt;
			}
		}
		return false;
	},
	onFieldEvent: function(options, redirect) {
		// if(options.event.type!="focusin" && options.event.type!="focusout") syraUtil.log("onFieldEvent "+ options.event.type,options, redirect);
		var doEvt = true,
			logger;
		var listner, aListner = ["wdgt", "", options.event.type];
		if (!this.isPageDesigned() && options.field) {
			if ((logger = this.fusionSite && this.fusionSite._session && this.fusionSite._session.logger)) {
				logger.trace({}, "**onFieldEvent : [" + options.event.type + "] on target [" + (syraUtil.getMetaFromObject(options.field)).$bind + " " + (options.field && options.field.arrayLevel ? options.field.arrayLevel : "field") + "]");
			} else {
				logger = {
					"trace": function() {
						return null;
					}
				};
			}
			//Hack lv : for cardview popup waitting fix in field.js (arrayLevel=cell on field cardview)
			// TODO : best solution for arraylevel popupview fields
			if (!options.field.arrayLevel && (options.field.articleParent.arrayLevel == "record")) {
				options.field.arrayLevel = "cell";
			}
			switch (options.event.type) {
				case "focusin":
					if (syra_site.isTabletDevice) {
						var currentCxt = this.fusionSite.controller._sapController.getCurrInst();
						var $fusionPageMeta = syraUtil.getFusionPageMeta(options.field);
						var $fieldMeta = syraUtil.getMetaFromObject(options.field);
						var fieldCxt = sapUtil.makeIst($fusionPageMeta.winModel.getWinId(), $fieldMeta.$bind, syraUtil.getFieldNL(options.field) || 0);
						if (!sapUtil.cmpIst(currentCxt, fieldCxt, true)) {
							aListner[2] = "mousedown";
						}
					}
				case "click":
				case "keyup":
				case "keydown":
				case "mousedown":
					aListner[1] = "field";
					if (!redirect && options.field.arrayLevel) {
						if (!sapUtil.isListScreen(syraUtil.getMetaFromObject(options.field).$bind)) {
							aListner[1] = options.field.arrayLevel;
						} else {
							aListner[1] = "list";
						}
					}
					logger.trace({}, " -----> Call listner : [" + aListner.join(".") + "] field type : [" + syraUtil.getFieldType(options.field) + "]");
					doEvt = this.fusionSite.controller.triggerAdx(aListner.join("."), {
						"target": options.field,
						"type": options.event.type,
						"data": {
							"nativeEvt": options.event,
							"nativeOpt": options
						}
					});
					if (!doEvt) {
						options.event.stopPropagation();
					}
					break;
				case "change":
					listner = "wdgt." + (options.field && options.field.arrayLevel && !sapUtil.isListScreen(syraUtil.getMetaFromObject(options.field).$bind) && syraUtil.getFieldType(options.field) == syraUtil.dataTypes.booleanType ? options.field.arrayLevel : "field") + "." + options.event.type;
					logger.trace({}, " -----> Call listner : [" + listner + "] field type : [" + syraUtil.getFieldType(options.field) + "] Edit :[" + this.fusionSite.controller._sapController.getCurrInst().edit + "]");
					doEvt = this.fusionSite.controller.triggerAdx(listner, {
						"target": options.field,
						"type": options.event.type,
						"data": {
							"nativeEvt": options.event
						}
					});
					if (!doEvt) {
						options.event.stopPropagation();
					}
					break;
				case "focusout":
					break;
				case "input":
					doEvt = this.fusionSite.controller.triggerAdx("wdgt.field.input", {
						"target": options.field,
						"type": options.event.type,
					});
					if (!doEvt) {
						options.event.stopPropagation();
					}
					break;
			}
		}
		if (doEvt) {
			return options.doEvent();
		} else
		if (doEvt === false) {
			options.event.preventDefault();
			options.event.stopPropagation();
		}
		return true;
	},
	onSelectRecordEvent: function(options) {
		var doEvt = true;
		if (!this.isPageDesigned()) {
			this.fusionSite._session.logger.trace({}, "**onSelectRecordEvent : [" + options.event.type + "] on record [" + (syraUtil.getMetaFromObject(options.field)).$bind + " " + options.uuidTarget + " " + (options.field && options.field.arrayLevel ? options.field.arrayLevel : "field") + "]");
			var list = options ? options.field : null,
				listMeta = null;
			if (list && this.fusionSite.controller && (listMeta = syraUtil.getMetaFromObject(options.field))) {
				// Note :  options{field, list, uuidTarget, isSelected,event, doEvent()
				/*
                 * if (isNaN(options.uuidTarget))
                 return;
                 */
				if (sapUtil.isListScreen(syraUtil.getMetaFromObject(options.field).$bind)) {
					var doEvt = this.fusionSite.controller.triggerAdx("wdgt.list.selline", {
						"target": list,
						"type": "selline",
						"data": {
							"nativeEvt": options.event,
							"line": (options.uuidTarget != undefined ? list.findDataRecord(options.uuidTarget).dataRecord.$serverIndex + 1 : undefined),
							"recTarget": (options.uuidTarget != undefined ? list.findDataRecord(options.uuidTarget) : undefined),
							"xid": listMeta.$bind,
							"isSelected": options.isSelected,
							"doEvent": options.doEvent
						}
					});
				} else {
					var doEvt = this.fusionSite.controller.triggerAdx((options.hasEscapeRowButton ? "wdgt.grid.escape" : "wdgt.grid.selline"), {
						"target": options.field,
						"type": options.event.type,
						"data": {
							"nativeEvt": options.event,
							"uuid": options.uuidTarget
						}
					});
				}
			}
		}
		if (doEvt && options.doEvent) {
			options.doEvent(sapUtil.isEmptyGridDataRecord);
		}
	},
	onSortClickEvent: function(options) {
		var list = options ? options.field : null;
		this.fusionSite._session.logger.trace({}, "**onSortClickEvent : [" + options.event.type + "] on target [" + (syraUtil.getMetaFromObject(options.field)).$bind + " " + (options.field && options.field.arrayLevel ? options.field.arrayLevel : "field") + "]");
		var fieldMeta = syraUtil.getMetaFromObject(list);
		var isLeftListItem = (fieldMeta && fieldMeta.$bind && sapUtil.isListScreen(fieldMeta.$bind) || null);
		var doEvt = true;
		if (!options.event.ctrlKey && list && this.fusionSite.controller) {
			doEvt = this.fusionSite.controller.triggerAdx("wdgt." + (isLeftListItem ? "list" : "grid") + ".sortLocal", {
				"target": list,
				"type": "sortLocal",
				"data": {
					doEvent: options.doEvent,
					nativeEvt: options.event
				}
			});
		}
		if (doEvt && options.doEvent) {
			options.doEvent();
		}
	},
	onSearchClickEvent: function(options) {
		var list = options ? options.field : null,
			doEvt = true;
		if (list && this.fusionSite.controller) {
			doEvt = this.fusionSite.controller.triggerAdx("wdgt.grid.searchLocal", {
				"target": list,
				"type": "searchLocal",
				"data": {
					doEvent: options.doEvent,
					nativeEvt: options.event,
					found: options.found
				}
			});
		}
	},
	onGlobalClick: function(event) {
		var currWindow = this.selectedSheet && this.selectedSheet.$fusionPageMeta && this.selectedSheet.$fusionPageMeta.winModel,
			fusionController = currWindow ? syraUtil.getFusionController(this.selectedSheet) : null;
		var doEvt, logger;
		if ((logger = fusionController ? fusionController.getLogger() : null)) {
			logger.trace({}, "**onPageEvent : " + "'" + currWindow.getTitle() + "'" + " [" + event.type + "]");
		}
		doEvt = (!fusionController || event.target.type == "file") ? true : fusionController.triggerAdx("wdgt.win." + event.type, {
			"target": currWindow,
			"type": event.type,
			"data": {
				"nativeEvt": event
			}
		});
		if (doEvt != undefined && !doEvt) {
			event.stopPropagation();
		}
		return doEvt;
	},
	onFieldClickPicker: function(options) {
		var list = null;
		if (options && options.field) {
			switch (options.field.arrayLevel) {
				case "array":
					list = options.field;
					var ii = 0;
					ii++;
					break;
				case "record":
					list = options.field.articleParent;
					var ii = 0;
					ii++;
					break;
				case "cell":
					list = options.field.articleParent.articleParent;
					var ii = 0;
					ii++;
					break;
			}
		}

		var fieldMeta = (list) ? syraUtil.getMetaFromObject(list) : null;
		var isLeftListItem = (fieldMeta && fieldMeta.$bind && sapUtil.isListScreen(fieldMeta.$bind) || null);

		var widget = (isLeftListItem) ? "list" : (options.field && options.field.arrayLevel) ? options.field.arrayLevel : "field";
		var doEvt = this.fusionSite.controller.triggerAdx("wdgt." + widget + ".picker", {
			"target": options.field,
			"type": "picker",
			"data": options
		});
		if (doEvt && options.doEvent) {
			options.doEvent();
		}
	},
	onFilterEvent: function(options) {
		var doEvt = true,
			doEvt = this.fusionSite.controller.triggerAdx("wdgt.list." + options.type, {
				"target": options.list,
				"data": options
			});
		if (doEvt && options.doEvent) {
			options.doEvent();
		}
	},
	onBeforeUploadFiles: function(options) {
		var doEvt = true,
			listner;
		listner = "wdgt.file.upload";
		doEvt = this.fusionSite.controller.triggerAdx(listner, {
			"target": options.field,
			"type": "upload",
			"data": options
		});
		if (doEvt) {
			options.doEvent();
		}
		return doEvt;
	},
	onUploadSucceeded: function(options) {
		this.fusionSite.controller.triggerAdx("wdgt.file.uploadSucceeded", {
			"target": options.field,
			"type": "uploadSucceeded",
			"file": options.file
		});
	},
	onUploadDone: function(options) {
		this.fusionSite.controller.triggerAdx("wdgt.file.uploadDone", {
			"target": options.field,
			"type": "uploadDone",
			"file": options.file
		});
	},
	onRemoveUploadedFile: function(options) {
		var doEvt = true,
			doEvt = this.fusionSite.controller.triggerAdx("wdgt.file.uploadRemove", {
				"target": options.field,
				"type": "uploadRemove",
				"data": options
			});
		if (doEvt) {
			options.doEvent();
		};
		return doEvt;
	},
	onRemoveUploadedFileSucceeded: function(options) {
		var doEvt = true,
			doEvt = this.fusionSite.controller.triggerAdx("wdgt.file.uploadRemoveSucceeded", {
				"target": options.field,
				"type": "uploadRemoveSucceeded",
				"data": options
			});
		if (doEvt && options.doEvent) {
			options.doEvent();
		};
		return doEvt;
	},
	onBlockExRpc: function(options) {
		var doEvt = this.isPageDesigned() ? false : this.fusionSite.controller.triggerAdx("wdgt.xblock.rpc", {
			"target": options.field,
			"type": "rpc",
			"data": options
		});
		if (doEvt && options.doEvent) {
			options.doEvent(options);
			delete options.doEvent;
		}
	},
	onGraphClickPicker: function(options) {
		var doEvt = this.isPageDesigned() ? true : this.fusionSite.controller.triggerAdx("wdgt.graph.picker", {
			"target": options.field,
			"type": "picker",
			"data": options
		});
		if (doEvt && options.doEvent) {
			options.doEvent();
		}
	},
	onGraphClickLink: function(options) {
		var data = {
			"target": {
				"$act": options.link.linkId
			}
		};
		var doEvt = this.fusionSite.controller.triggerAdx("wdgt.link.click", data);
		if (doEvt && options.doEvent) {
			options.doEvent();
		}
		return doEvt;
	},
	getFormatedValFromHelperVal: function(field, helperValue) {
		var formated = null,
			fmt;
		var fieldMeta = syraUtil.getMetaFromObject(field);
		var controller = syraUtil.getFusionController(field);
		var pageMeta = syraUtil.getFusionPageMeta(field);
		controller = controller ? controller._sapController : null;
		if (controller && controller.fmtWrapper && field.formatApi && field.formatApi.formatFromHelperVal && fieldMeta && pageMeta) {
			fmt = pageMeta.winModel.getDataFmt(fieldMeta.$bind, syraUtil.getFieldNL(field));
			formated = field.formatApi.formatFromHelperVal(helperValue, fmt, controller.fmtWrapper);
		}
		return formated;
	},
	getFieldEvalTitle: function(field) {
		var ret = null,
			fieldMeta = syraUtil.getMetaFromObject(field),
			pageMeta;
		if (fieldMeta && fieldMeta.$bind && (pageMeta = syraUtil.getFusionPageMeta(field)) && pageMeta.winModel) {
			ret = pageMeta.winModel.getEntityMetaByCriteria(fieldMeta.$bind, "tit", fieldMeta.$bind, -1);
		}
		return ret;
	},
	onFieldNotifyChange: function(options) {
		var doEvt = false;
		//TODO - a revoir peut sans doute mieux faire!
		if (options && options.doEvent && options.field && options.field.$item && (options.field.$item.$bind === "$itemsPerPage" || options.field.$item.$bind === "$search")) {
			doEvt = true;
		}
		if (doEvt) {
			options.doEvent();
		}
	},
	release: function() {
		// Disconnect fusion Site
	},
	onUncaughtError: function(options) {
		var err, stack, bProcess = true,
			unCaughtObj;
		try {
			if (this.fusionSite && this.fusionSite.controller && this.fusionSite.controller._sapController) {
				unCaughtObj = this.fusionSite.uncaughtErrorObj;
				if (!this.fusionSite.uncaughtErrorCount || this.fusionSite.uncaughtErrorCount < 3) {
					if (this.fusionSite.uncaughtErrorCount === undefined) {
						this.fusionSite.uncaughtErrorCount = 1;
						this.fusionSite.uncaughtErrorObj = {
							"url": options.url,
							"ln": options.lineNumber,
							"err": options.error
						};
					} else
					if (this.fusionSite.uncaughtErrorCount == 1 && options.url === unCaughtObj.url && options.error === unCaughtObj.err && options.lineNumber === unCaughtObj.ln) {
						// Same error twvice
						bProcess = false;
					} else {
						this.fusionSite.uncaughtErrorCount++;
						delete this.fusionSite.uncaughtErrorObj;
						this.fusionSite.uncaughtErrorObj = {};
					}
				} else {
					bProcess = false;
				}
				if (bProcess) {
					stack = "url: " + (options.url || "?") + "\nlineNumber: " + (options.lineNumber || "-1") + "\n" + (options.error || "");
					err = [utilEx.makeDiagnosis(this.fusionSite._session.getlabel("error", "27", syra_fusion.getMessage("16")), 4, stack, "27", utilEx.cltFusionNice, options.errorMsg || "")];
					this.fusionSite.controller._sapController._sapException(null, err, {
						"typ": "DelSess",
						"panic": true
					});
				} else {
					this.fusionSite.controller.forceUnlockUI();
					delete this.fusionSite.uncaughtErrorCount;
					delete this.fusionSite.uncaughtErrorObj;
					syra_diagnose.box.dispose();
					options.errorMsg = this.fusionSite._session.getlabel("error", "28", syra_fusion.getMessage("17"));
					options.doEvent();
				}
			} else {
				options.doEvent();
			}
		} catch (ex) {
			options.doEvent();
		}
	},
	dispose: function() {
		syra_dlg.closeAll(this, true);
		if (this.fusionSite) {
			this.fusionSite.dispose();
			delete this.fusionSite;
		}
		if (this.sheets) {
			for (var ii = 0, jj = this.sheets.length; ii < jj; ii++) {
				this._disposeSheet(this.sheets[ii]);
			}
			delete this.sheets;
		}
		if (syra_fusion.activatedBook == this) {
			delete syra_fusion.activatedBook;
		}
		this.openerUrlSegments = this.selectedSheet = null;
	}
});