"use strict";
var helpers = require('syracuse-core/lib/helpers');
var fieldFactory = require('syracuse-ui/lib/fusion/field/fieldFactory');
var util = require('syracuse-ui/lib/fusion/core/client/sap/util');
var sapUtil = util.Fusion;
var syraUtil = util.Syra;
function WorkBook(){
    this.sheets = [];
}

exports.WorkBook = helpers.defineClass(WorkBook, null, {
    releaseMainPage: function(options){
        this.$$slot.empty().append(this.sheets[0].$$container.children());
        this.fusionGateway.closeMenus();
    },
    createField: function($field, $item, boxParent, $class){
        return fieldFactory.create($field, $item, boxParent, $class);
    },
    setDataBind: function(field, $resources, record, metaData){
        if (metaData) {
            if (metaData.tit) {
                field.setTitle(metaData.tit);
            }
            if (metaData.dch && field.removeListItems) {
                field.removeListItems(metaData.dch);
            }
            if (metaData.stt) {
                if (field.setState) {
                    field.setState(sapUtil.getState(metaData.stt))
                }
                // TODO : deal with $isReadOnly
            }
            if (metaData.sty) {
                // TODO
            }
        }
        return true;
    },
    unselectSheet: function(){
        if (this.selectedSheet && this.selectedSheet.$$item) {
            if (!this.selectedSheet.$$fusionMemHost) {
                this.selectedSheet.$$fusionMemHost = $("<div/>");
            }
            this.selectedSheet.$$fusionMemHost.append(this.selectedSheet.$$item);
            this.selectedSheet.selectSheet(false);
            delete this.selectedSheet;
        }
    },
    selectSheet: function(sheet){
        if (this.selectedSheet && this.selectedSheet != sheet) {
            this.unselectSheet();
        }
        if (document.site.$$body) {
            document.site.$$body[0].style.display = "none";
            (this.selectedSheet = sheet).$$item.appendTo(sheet.$$container = document.site.$$body);
            document.site.$$body[0].style.display = "";
            sheet.toggleSheetOverlay(sheet != this.sheets[this.sheets.length - 1]);
            this.selectedSheet.selectSheet(true);
            if (this.fusionGateway.activatedBook != this) {
                this.fusionGateway.activatedBook.onActivate(false);
                this.fusionGateway.activatedBook = this;
                this.onActivate(true);
            }
        }
    },
    loadSheet: function($itemPage){
        if (this.sheets.length == 0) {
            this.selectedSheet = document.site.onMainPageChange($itemPage);
        }
        else {
            this.unselectSheet();
            document.site.$$body[0].style.display = "none";
            $itemPage.boxParent = null;
            $itemPage.$$container = document.site.$$body;
            this.fusionGateway.closeMenus();
            this.selectedSheet = document.itemFactory.loadPage($itemPage);
            document.site.$$body[0].style.display = "";
        }
        this.selectedSheet.selectSheet(true);
        this.fusionGateway.activatedBook = this;
        this.sheets.push(this.selectedSheet);
        return this.selectedSheet;
    },
    closeSheet: function(event, fusionDispose){
        var sheet = event.data.sheet;
        if (sheet) {
            for (var ii = this.sheets.length - 1; ii >= 0; ii--) {
                if (this.sheets[ii] == sheet) {
                    if (sheet == this.selectedSheet) {
                        this.unselectSheet(sheet);
                    }
                    this.sheets.splice(ii, 1);
                    this._disposeSheet(sheet);
                    break;
                }
            }
            if ((--ii) >= 0) {
                this.selectSheet(this.sheets[ii]);
            }
        }
    },
    onActivate: function(satus){
        this.fusionSite.onActivate(satus);
    },
    onReleaseBook: function(event){
        // Called by fusionGatway, on "_releaseBook()"
    },
    _disposeSheet: function(sheet){
        if (sheet && !sheet.disposed) {
            if (sheet.$$fusionMemHost) {
                sheet.$$fusionMemHost.remove();
            }
            delete sheet.externalAdapter;
            document.controller.disposeObject(sheet);
        }
    },
    onMenuItemClick: function(options){
        var doEvt = true;
        if (this.fusionSite.controller) {
            doEvt = this.fusionSite.controller.trigger("wdgt.link.click", {
                "target": options.menuItem,
                "type": "click"
            });
        }
        if (doEvt) {
            options.doEvent();
        }
    },
    onBoxToggle: function(options){
        var doEvt = true, targetType = null, boxMeta = null, xid = null;
        if (this.fusionSite.controller && (boxMeta = syraUtil.getMetaFromObject(options.box))) {
            targetType = (xid = sapUtil.isFolderTab(boxMeta[sapUtil.metaNameMap.xid])) ? "tabs" : null;
            targetType = xid ? targetType : ((xid = sapUtil.isListTab(boxMeta[sapUtil.metaNameMap.xid])) ? "list" : null);
            if (targetType && !options.onDrawParent && !this.fusionSite.controller.isFixtureMode()) {
                doEvt = this.fusionSite.controller.trigger("wdgt." + targetType + ".toggle", {
                    "target": options.box,
                    "type": "toggle",
                    "data": options
                }, xid);
            }
            if (doEvt) {
                options.doEvent();
                if (targetType) {
                    this.fusionSite.controller.trigger("wdgt." + targetType + ".toggled", {
                        "target": options.box,
                        "type": "toggled",
                        "data": options
                    }, xid);
                }
            }
        }
    },
    onBoxClick: function(options){
        var doEvt = true, targetType = null, boxMeta = null, xid = null;
        if (this.fusionSite.controller && (boxMeta = syraUtil.getMetaFromObject(options.box))) {
            targetType = (xid = sapUtil.isFolderTab(boxMeta[sapUtil.metaNameMap.xid])) ? "tabs" : null;
            targetType = xid ? targetType : ((xid = sapUtil.isListTab(boxMeta[sapUtil.metaNameMap.xid])) ? "list" : null);
            if (targetType && !this.fusionSite.controller.isFixtureMode()) {
                doEvt = this.fusionSite.controller.trigger("wdgt." + targetType + ".click", {
                    "target": options.box,
                    "type": "click",
                    "data": options
                }, xid);
            }
            if (doEvt && options.doEvent) {
                options.doEvent();
            }
        }
    },
    onFieldEvent: function(options) {
        var doEvt = false;
        console.log("**onFieldEvent : [" + options.event.type + "] on field [" + (syraUtil.getMetaFromObject(options.field)).$bind + "]");
        switch (options.event.type) {
           case "keydown":
           case "click":
                doEvt = this.fusionSite.controller.trigger("wdgt.field." + options.event.type, {
                        "target": options.field, "type": options.event.type, "data": {"nativeEvt": options.event}});
                if(!doEvt) {
                    options.event.stopImmediatePropagation();
                }
               break;
           case "change":
               break;
           case "keyup":
                break;
            case "focusin":
                break;
            case "focusout":
                break;
         }
        if(doEvt) {
            options.doEvent();
        }
        return doEvt;
    },
    onSelectRecordEvent: function(options) {
        var list = options ? options.field : null, listMeta = null;
        if (list && this.fusionSite.controller && (listMeta = syraUtil.getMetaFromObject(options.field))) {
            // Note :  options{field, list, uuidTarget, isSelected,event, doEvent()
            if (isNaN(options.uuidTarget)) return;
            this.fusionSite.controller.trigger("wdgt.list.selline", {
                "target": list,
                "type": "selline",
                "data": {
                    line: parseInt(options.uuidTarget, 10) + 1,
                    xid: listMeta.$bind,
                    doEvent:options.doEvent
                }
            });
        }
    },
    onFieldNotifyChange: function(options) {
        var doEvt = false;
        /*if(doEvt) {
            options.doEvent();
        }*/
    },
    release: function(){
        // Disconnect fusion Site
    },
    dispose: function(){
        var self = this;
        if (self.fusionSite) {
            self.fusionSite.dispose();
            delete self.fusionSite;
        }
        if (self.sheets) {
            self.sheets.forEach(function(sheet){
                self._disposeSheet(sheet);
            });
            delete self.sheets;
        }
        delete self.selectedSheet;
        delete self.fusionGateway;
    }
});
