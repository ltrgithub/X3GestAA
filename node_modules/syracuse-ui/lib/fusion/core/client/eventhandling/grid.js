"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Grid event handling classes
 */


var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var requestActions = require('../sap/srvactions');
var util = require('syracuse-ui/lib/fusion/tools/util');

var _evtProcGrid = {};
exports.GridEventHandling = _evtProcGrid;

/* "Server page input" event handling class for "Grid" widget */
_evtProcGrid.sap = function () {
	this.eventListeners = function () {
		return [["wdgt.grid.clickline", focusLine, true, true],
				["wdgt.grid.clickcell", focusCell, true, true],
				["wdgt.grid.clickcellCheck", focusCellCheckBox, true, true]
		];
	};
	function focusLine(event) {
		var processed = undefined, currIst, $fusionPageMeta, newIst, srvAct, focus;
        if (event.target && ($fusionPageMeta = syraUtil.getFusionPageMeta(event.target))) {
 			currIst = this.sapController.getCurrInst();
 			newIst = sapUtil.makeIst($fusionPageMeta.winModel.getWinId(), event.data.xid, event.data.line);
 			focus = sapUtil.cmpIst(currIst, newIst);
			console.log(" focusLine currIst:" + JSON.stringify(currIst) + " newIst:"+JSON.stringify(newIst));
 			if(!focus || currIst.nl != event.data.line) {
 				newIst.nl = event.data.line;
	 			srvAct = requestActions.getSrvAction("SRV_COMMANDGRID");
	            event.result = {"$act": srvAct};
	            event.result.params = {"target": newIst};
	            processed = true;
	        }				
        }
        return processed;
	}
	function focusCell(event) {
		var processed = undefined, currIst, $fusionPageMeta, newIst, srvAct, focus,send=false;
        if (event.target && ($fusionPageMeta = syraUtil.getFusionPageMeta(event.target))) {
 			currIst = this.sapController.getCurrInst();
 			newIst = sapUtil.makeIst($fusionPageMeta.winModel.getWinId(), event.data.xid, event.data.line);
 			focus = sapUtil.cmpIst(currIst, newIst);
			console.log(" focusCell currIst:" + JSON.stringify(currIst) + " newIst:"+JSON.stringify(newIst));
			if(event.target.boxParent.builder._hasFocus()){ // focus on this table
				if(!event.target.boxParent.builder._isTableEditing() || !focus){ // not current edit mod or change focus on this table
					srvAct = requestActions.getSrvAction("SRV_GETFOCUSCELL");    // ask for editing
					send=true;
				}
			}else{
				// focus not on this table
				srvAct = requestActions.getSrvActionEX("SUP_CELL_EDIT");
				send=true;
			}
			if(send){
				newIst.nl = event.data.line;
				event.result = {"$act": srvAct};
				event.result.params = {"target": newIst};
				processed = true;	
			}
        }
        return processed;
	}
	function focusCellCheckBox(event) {
			 var processed = undefined, fieldIst, currIst ,$fusionPageMeta, $fieldMeta, $field, newVal, srvAct, srvActChaine=null;
			if (event.target && ($fusionPageMeta = syraUtil.getFusionPageMeta(event.target))) {
            // Misc init
			 	currIst = this.sapController.getCurrInst();
				fieldIst = sapUtil.makeIst($fusionPageMeta.winModel.getWinId(), event.data.xid, event.data.line);
				focus = sapUtil.cmpIst(currIst, fieldIst);
				if(!event.target.boxParent.builder._hasFocus()){ // focus not on this table 
					  srvAct = requestActions.getSrvActionEX("SUP_CELL_EDIT");
					  srvActChaine=requestActions.getSrvAction("SRV_COMMANDGRID");
					  newVal=(event.target.boxParent.builder.rows[event.data.line-1].getDataSrcValue(event.data.xid)== sapUtil.check.off ? sapUtil.check.on : sapUtil.check.off);
				}else { // focus on this table 
					if (!event.target.boxParent.builder._isTableEditing()){ //command mod
						if (!focus){
							srvAct = requestActions.getSrvActionEX("SUP_CELL_EDIT");
							srvActChaine=requestActions.getSrvAction("SRV_COMMANDGRID");
							newVal=(event.target.boxParent.builder.rows[event.data.line-1].getDataSrcValue(event.data.xid)== sapUtil.check.off ? sapUtil.check.on : sapUtil.check.off);
						}else{
							srvAct = requestActions.getSrvAction("SRV_GETFOCUSCELL");
							srvActChaine=requestActions.getSrvAction("SRV_COMMANDGRID");
							newVal=(event.target.boxParent.builder.rows[event.data.line-1].getDataSrcValue(event.data.xid)== sapUtil.check.off ? sapUtil.check.on : sapUtil.check.off);
						}
					}else{ 	 //edit mod
						if (!focus){ // focus not on this check
							srvAct = requestActions.getSrvAction("SRV_GETFOCUSCELL");
							srvActChaine=requestActions.getSrvAction("SRV_GETFOCUSCELL");
							newVal=(event.target.boxParent.builder.rows[event.data.line-1].getDataSrcValue(event.data.xid)== sapUtil.check.off ? sapUtil.check.on : sapUtil.check.off);
						}else{	// focus on this check
							srvAct = requestActions.getSrvAction("SRV_GETFOCUSCELL");
							newVal=(event.target.boxParent.builder.rows[event.data.line-1].getDataSrcValue(event.data.xid)== sapUtil.check.off ? sapUtil.check.off : sapUtil.check.on);
						}
					}
				}	
				fieldIst.nl = event.data.line;
				event.result = {"$act": srvAct};
				event.result.post = {"exposeReply": true, "callback": toggleFieldAfterClick, "args": [this, event.target, fieldIst, newVal,srvActChaine]};
				event.result.params = {"target": fieldIst};
				processed = true;	
			}else{
			}
			return processed;
	}
    function toggleFieldAfterClick(reply, evtHandlingObj, $field, fieldIst, newValue,srvActChaine){
        var fieldValue = evtHandlingObj.sapController.getEntityValueInReply(reply, fieldIst), value, chain = null;
        if(fieldValue == null && fieldValue == undefined) {
            // Ok, field value has not been updated by the server after focus/click, we can process post local update...
            value = util.duplicateObj(fieldIst);
            value.v = newValue;
            evtHandlingObj.sapController.forceValue(value, false, true);
            // ...and finally we inform the server by this change
            if(srvActChaine) {
				chain = {"$act": srvActChaine, "params": {"target": fieldIst}, "post": null}
			}
        }
        return chain;
    }
};
