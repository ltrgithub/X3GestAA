"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Grid event handling classes
 */
/*
 * ["wdgt.grid.clickline", focusLine, true, true],
 ["wdgt.cell.click", clickCell, true, true],
 ["wdgt.grid.clickcellCheck", focusCellCheckBox, true, true],
 ["wdgt.grid.clickcellIco", focusCellIco, true, true],
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var requestActions = require('../sap/srvactions');
var util = require('syracuse-ui/lib/fusion/tools/util');

var _evtProcGrid = {};
exports.GridEventHandling = _evtProcGrid;

/* "Server page input" event handling class for "Grid" widget */
_evtProcGrid.sap = function(){
    this.eventListeners = function(){
        return [["wdgt.cell.click", clickCell, true, true], ["wdgt.grid.selline", selectLine, true, true], ["wdgt.record.action", actionLine, true, true],["wdgt.array.action", actionArray, true, true]];
    };
    function actionLine(event){
        var processed = undefined, nl, xid,currIst, isEdit, newIst, firstFocus,changeLine, acts = {}, $fusionPageMeta, srvActEx, srvAct;
        if (event.target && ($fusionPageMeta = syraUtil.getFusionPageMeta(event.target))) {
            nl = parseInt(event.target.getArticle().$uuid, 10) + 1;
			/***************************
			 * hack temporaire : objectif trouver la premiere colonne sur laquelle l'utilisateur peut cliquer
			 */
            xid = event.target.getArticle().getArticleParent().$item.$layout.$items[0].$bind
			/***************************************
			 * 
			 */
			currIst = this.sapController.getCurrInst();
            newIst = sapUtil.makeIst($fusionPageMeta.winModel.getWinId(), xid, nl);
            firstFocus = !cmpIstBlock(currIst, newIst);
            changeLine = (!firstFocus && currIst.nl != nl)
			isEdit=(!firstFocus && !changeLine && currIst.edit)
            switch (event.target.$bind) {
                case "$delete":{
                    srvActEx = "SUP_LINE_DELETE";
                    srvAct = "SRV_DELETELINEGRID";
                    break
                }
                case "$create":{
                    srvActEx = "SUP_LINE_INSERT";
                    srvAct = "SRV_INSERTLINEGRID";
                    break
                }
            }
            if (firstFocus || changeLine || isEdit) { // focus not already on this table or line change same ligne but edit field
                acts.srvAct = requestActions.getSrvActionEX(srvActEx);
                acts.send = true;
            }
            else {
                acts.srvAct = requestActions.getSrvAction(srvAct);
                acts.send = true;
            }
            if (acts.send) {
                event.result = {
                    "$act": acts.srvAct
                };
                event.result.params = {
                    "target": newIst
                }
                event.result.post = acts.post
                processed = true;
            }
        }
        return true;
    };
    function actionArray(event){
        var processed = undefined, nl, xid,currIst, newIst, firstFocus,changeLine, acts = {}, $fusionPageMeta, srvActEx, srvAct;
        if (event.target && ($fusionPageMeta = syraUtil.getFusionPageMeta(event.target))) {
		}
		return true;
 	}  ; 
    function selectLine(event){
        var processed = undefined, fieldInfo = {}, $fusionPageMeta, newIst, acts = {}, targetType;
        if (event.target && ($fusionPageMeta = syraUtil.getFusionPageMeta(event.target))) {
            fieldInfo.nl = event.data.line;
            fieldInfo.xid = syraUtil.getMetaFromObject(event.target).$bind;
            fieldInfo.currIst = this.sapController.getCurrInst();
            newIst = sapUtil.makeIst($fusionPageMeta.winModel.getWinId(), fieldInfo.xid, fieldInfo.nl);
            fieldInfo.firstFocus = !cmpIstBlock(fieldInfo.currIst, newIst);
            if (fieldInfo.firstFocus) { // focus not already on this table
                acts.srvAct = requestActions.getSrvAction("SRV_COMMANDGRID"); // ask for focus
                acts.send = true;
            }
            if (acts.send) {
                event.result = {
                    "$act": acts.srvAct
                };
                event.result.params = {
                    "target": newIst
                }
                event.result.post = acts.post
                processed = true;
            }
        }
        return false;
    }
    function clickCell(event){
        // "target":... "type":... "data": {"nativeEvt:..."}
        var processed = undefined, fieldInfo = {}, $fusionPageMeta, newIst, acts, targetType;
        
        if (event.target && ($fusionPageMeta = syraUtil.getFusionPageMeta(event.target))) {
            fieldInfo.nl = event.target.getArticle().$uuid + 1
            fieldInfo.xid = syraUtil.getMetaFromObject(event.target).$bind
            fieldInfo.currIst = this.sapController.getCurrInst();
            newIst = sapUtil.makeIst($fusionPageMeta.winModel.getWinId(), fieldInfo.xid, fieldInfo.nl);
            fieldInfo.focus = sapUtil.cmpIst(fieldInfo.currIst, newIst);
            fieldInfo.firstFocus = !cmpIstBlock(fieldInfo.currIst, newIst);
            fieldInfo.target = event.target
            targetType = syraUtil.getFieldType(event.target)
            console.log(" focusCell currIst: " + JSON.stringify(fieldInfo.currIst) + " newIst: " + JSON.stringify(newIst) + "typ: " + targetType);
            fieldInfo.readOnlyByModel = syraUtil.isFieldModelReadOnly($fusionPageMeta.winModel.getProto(), null, fieldInfo.xid);
            switch (targetType) {
                case syraUtil.dataTypes.booleanType:{
                    acts = clickCellBoolean(this, fieldInfo, newIst);
                    break;
                }
                case syraUtil.dataTypes.iconType:{
                    acts = clickCellIcon(this, fieldInfo);
                    break;
                }
                default:
                    acts = clickCellDefault(this, fieldInfo);
                    break;
            }
            if (acts.send) {
                event.result = {
                    "$act": acts.srvAct
                };
                event.result.params = {
                    "target": newIst
                }
                event.result.post = acts.post
                processed = true;
            }
        }
        return processed;
    }
    function clickCellDefault(listeningObject, fieldInfo){
        var acts = {
            "send": false,
            "srvAct": null,
            "post": null
        };
        if (!fieldInfo.focus) { // focus change
            if (fieldInfo.target.$isReadOnly) {
                acts.srvAct = requestActions.getSrvAction("SRV_COMMANDGRID"); // ask for focus
                acts.send = true;
            }
            else 
                if (!fieldInfo.firstFocus) { // focus already on this table
                    acts.srvAct = requestActions.getSrvAction("SRV_GETFOCUSCELL"); // ask for editing
                    acts.send = true;
                }
                else {
                    // focus not on this table
                    acts.srvAct = requestActions.getSrvActionEX("SUP_CELL_EDIT"); //774 SRV_COMMANDGRID + SRV_GETFOCUSCELL
                    acts.send = true;
                }
        }
        return acts;
    };
    /*TODO: Retour mode commande si mode commande avant click, reste en mode saisie si non
     */
    function clickCellBoolean(listeningObject, fieldInfo, newIst){
        var acts = clickCellDefault(listeningObject, fieldInfo);
        if (!acts.srvAct) {
            if (!fieldInfo.target.$isReadOnly) { // focus on this field
                acts.srvAct = requestActions.getSrvAction("SRV_GETFOCUSCELL"); // SRV_GETFOCUSCELL + SRV_GETFOCUSCELL
                acts.send = true;
            }
        }
        var newVal = (fieldInfo.target.currentValue == sapUtil.check.off ? sapUtil.check.on : sapUtil.check.off);
        var actionNext = (acts.srvAct == requestActions.getSrvActionEX("SUP_CELL_EDIT") || (!fieldInfo.firstFocus && !fieldInfo.currIst.edit)) ? requestActions.getSrvAction("SRV_COMMANDGRID") : requestActions.getSrvAction("SRV_GETFOCUSCELL")
        acts.post = {
            "exposeReply": true,
            "callback": toggleFieldAfterClick,
            "args": [listeningObject, fieldInfo.target, newIst, newVal, actionNext]
        };
        return acts;
    };
    /*TODO:Retour mode commande si mode commande avant click, reste en mode saisie si non
     */
    function clickCellIcon(listeningObject, fieldInfo){
        var acts = {
            "send": false,
            "srvAct": null,
            "post": null
        };
        if (!fieldInfo.focus) { // focus change
            if (!fieldInfo.firstFocus) { // focus already on this table
                acts.srvAct = requestActions.getSrvActionEX("SUP_CELL_ICOCLICKFOCUS"); // 776 SRV_GETFOCUSCELL + SRV_KIB
                acts.send = true;
            }
            else {
                // focus not on this table
                acts.srvAct = requestActions.getSrvActionEX("SUP_CELL_ICOCLICK"); //775 SRV_COMMANDGRID + SRV_GETFOCUSCELL + SRV_KIB
                acts.send = true;
            }
        }
        else {
            acts.srvAct = requestActions.getSrvAction("SRV_KIB"); //
            acts.send = true;
        }
        return acts;
    }
    
    function toggleFieldAfterClick(reply, evtHandlingObj, $field, fieldIst, newValue, srvActChaine){
        var fieldValue = evtHandlingObj.sapController.getEntityValueInReply(reply, fieldIst), value, chain = null;
        if (fieldValue == null && fieldValue == undefined) {
            // Ok, field value has not been updated by the server after focus/click, we can process post local update...
            value = util.duplicateObj(fieldIst);
            value.v = newValue;
            evtHandlingObj.sapController.forceValue(value, false, true);
            // ...and finally we inform the server by this change
            if (srvActChaine) {
                chain = {
                    "$act": srvActChaine,
                    "params": {
                        "target": fieldIst
                    },
                    "post": null
                }
            }
        }
        return chain;
    }
    function cmpIstBlock(a, b){
        return (a && b && a.win === b.win && a.xid.charAt(0) === b.xid.charAt(0) && a.xid.charAt(1) === b.xid.charAt(1))
    }
};
