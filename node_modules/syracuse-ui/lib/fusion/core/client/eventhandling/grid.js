"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Grid event handling classes
 */
/*
 * ["wdgt.grid.clickline", focusLine, true, true],
 ["wdgt.cell.click", clickCell, true, true],
 ["wdgt.grid.clickcellCheck", focusCellCheckBox, true, true],
 ["wdgt.grid.clickcellIco", focusCellIco, true, true],
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var requestActions = require('../sap/srvactions');
var util = require('syracuse-ui/lib/fusion/tools/util');
var svcFmt = require('syracuse-ui/lib/fusion/core/tools/format').svcFormatter;

var _evtProcGrid = {};
exports.GridEventHandling = _evtProcGrid;

/* "Server page input" event handling class for "Grid" widget */
_evtProcGrid.sap = function(){
    this.eventListeners = function(){
        return [["wdgt.cell.click", clickCellTab, true, true], ["wdgt.cell.change", changeCellTab, true, true], ["wdgt.grid.selline", selectLine, true, true], ["wdgt.record.action", actionLine, true, true], ["wdgt.array.action", actionArray, true, true], ["wdgt.cell.picker", clickPicker, true, true], ["wdgt.cell.calendarclosed", onDatePickerClose, true, true]];
    };
    function actionLine(event){
        var processed = undefined, fieldInfo = _getFieldInfo.call(this, event), acts = {}, srvActEx, srvAct;
        if (event.target) {
            switch (event.target.$bind) {
                case "$delete":
                    srvActEx = "SUP_LINE_DELETE";
                    srvAct = "SRV_DELETELINEGRID";
					processed=true
                    break;
                case "$create":
                    srvActEx = "SUP_LINE_INSERT";
                    srvAct = "SRV_INSERTLINEGRID";
					processed=true
                    break;
            }
            if (fieldInfo.firstFocus || fieldInfo.changeLine || fieldInfo.isEdit) { // focus not already on this table or line change or same ligne but edit field
                acts.srvAct = requestActions.getSrvActionEX(srvActEx);
            }
            else {
                acts.srvAct = requestActions.getSrvAction(srvAct);
            }
            event.result = {
                "$act": acts.srvAct
            };
            event.result.params = {
                "target": fieldInfo.fieldIst
            }
            event.result.post = acts.post
        }
        return processed;
    };
    function actionArray(event){
        var processed = undefined;
        if (event.target) {
            switch (event.target.$bind) {
                case "$delete":
                    processed = deleteLines.call(this, event);
                    break;
            }
        }
        return processed;
    };
    function deleteLines(event){
        //SUP_LINES_DELETE //SRV_DELETELINESGRID
        if (event.target) {
            var sIndex = event.target.getArticle().getSelectedRecordIndexes();
            if (!event.data) {
                event.data = {}
            }
            if (sIndex.length > 0) {
                event.data.line = sIndex[0].start + 1;
                var fieldInfo = _getFieldInfo.call(this, event)
                if (fieldInfo.firstFocus || fieldInfo.changeLine || fieldInfo.isEdit) { // focus not already on this table or line change or same ligne but edit field
                    event.result = {
                        "$act": requestActions.getSrvActionEX("SUP_LINES_DELETE")
                    }
                }
                else {
                    event.result = {
                        "$act": requestActions.getSrvAction("SRV_DELETELINESGRID")
                    }
                }
                event.result.params = {
                    "target": fieldInfo.fieldIst
                }
                event.result.params.std = [];
                event.result.params.std.push(sIndex[0].count);
            }
        }
        return true
    }
    function selectLine(event){
        var processed = undefined, fieldInfo = _getFieldInfo.call(this, event), acts = {},l,recordIndex;
        if (event.target) {
			l=event.target.getSelectedRecordIndexes();
			if(l.length>0 && fieldInfo.nl){
				recordIndex=fieldInfo.nl-1;
				if(event.data.nativeEvt.currentTarget.checked && recordIndex!=l[0].start+l[0].count && recordIndex!=l[0].start-1){
					event.data.nativeEvt.currentTarget.checked=false;
					return true
				}
				if(!event.data.nativeEvt.currentTarget.checked && recordIndex!=l[0].start+l[0].count-1 && recordIndex!=l[0].start){
					event.data.nativeEvt.currentTarget.checked=true;
					return true				
				} 
			}
            if (fieldInfo.firstFocus) { // focus not already on this table 
                acts.srvAct = requestActions.getSrvAction("SRV_COMMANDGRID"); // ask for focus 
                acts.send = true;
            }
            if (acts.send) {
                event.result = {
                    "$act": acts.srvAct
                };
                event.result.params = {
                    "target": fieldInfo.fieldIst
                }
                event.result.post = acts.post
            }
        }
        return false;
    };
    function clickPicker(event){
        var process = undefined, pickerType;
        if (event.data) {
            if ((pickerType = event.data.pickerType)) {
                switch (pickerType) {
                    case "menus":
                        break;
                    case "tunnel":
                        break;
                    case "lookup":
                        break;
                    case "date":
                        process = clickCell.call(this, event);
                        process = datePickerClick.call(this, event, process);
                        break;
                    default:
                        process = clickCell.call(this, event)
                        break;
                }
            }
        }
        return process
    };
    function datePickerClick(event, process){
        if (process && !syraUtil.getPopupDateFromField(event.target)) {
            event.result.post = {
                "callback": function(evtHandlingObj, initialEvent, callerField){
                    var fieldContext = evtHandlingObj.sapController.getCurrInst();
                    _openDatePicker(true, fieldContext.raw ? svcFmt.formReply(fieldContext.raw, fieldContext.fmt) : null, evtHandlingObj, initialEvent, callerField);
                },
                "args": [this, event, event.target]
            };
        }
        else 
            if (!syraUtil.getPopupDateFromField(event.target)) {
                var fieldContext = this.sapController.getCurrInst();
                var currValue = syraUtil.getFusionPageMeta(event.target).winModel.getValue(syraUtil.getMetaFromObject(event.target).$bind, event.target.getArticle().$recordIndex + 1);
                if (currValue.v) {
                    event.result = {
                        "$act": requestActions.svcFormat
                    };
                    event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.toRaw, currValue.v, fieldContext.fmt, syraUtil.getFieldType(event.target), fieldContext);
                    event.result.post = {
                        "callback": _openDatePicker,
                        "args": [this, event, event.target]
                    };
                    process = true;
                }
                else {
                    var self = this
                    setTimeout(function(){
                        _openDatePicker(true, null, self, event, event.target);
                    }, 10);
                    process = true;
                }
            }
        return process;
    };
    function changeCellTab(event){
        var processed = undefined, fieldInfo = _getFieldInfo.call(this, event);
        if (fieldInfo.isCheck) {
            return clickCell.call(this, event)
        }
    }
    function clickCellTab(event){
        var processed = undefined, fieldInfo = _getFieldInfo.call(this, event);
            return clickCell.call(this, event)
        }
    function clickCell(event){
        // "target":... "type":... "data": {"nativeEvt:..."}
        var processed = undefined, fieldInfo = _getFieldInfo.call(this, event), acts;
        if (event.target) {
            switch (fieldInfo.type) {
                case syraUtil.dataTypes.booleanType:
                    acts = clickCellBoolean.call(this, fieldInfo, fieldInfo.fieldIst);
                    break;
                case syraUtil.dataTypes.iconType:
                    acts = clickCellIcon.call(this, fieldInfo);
                    break;
                case syraUtil.dataTypes.dateType:
                    acts = clickCellDefault.call(this, fieldInfo);
                    break;
                default:
                    acts = clickCellDefault.call(this, fieldInfo);
                    if (fieldInfo.data.doEvent) {
                        if (acts.send) {
                            acts.post = {
                                "callback": fieldInfo.data.doEvent,
                                "args": []
                            };
                        }
                    }
                    break;
            }
            if (acts.send) {
                event.result = {
                    "$act": acts.srvAct
                };
                event.result.params = {
                    "target": fieldInfo.fieldIst
                }
                event.result.post = acts.post
                processed = true;
            }
        }
        return processed;
    }
    function clickCellDefault(fieldInfo){
        var acts = {
            "send": false,
            "srvAct": null,
            "post": null
        };
        if (!fieldInfo.focus) { // focus change
            if (fieldInfo.target.$isReadOnly) {
                acts.srvAct = requestActions.getSrvAction("SRV_COMMANDGRID"); // ask for focus
                acts.send = true;
            }
            else 
                if (!fieldInfo.firstFocus) { // focus already on this table
                    acts.srvAct = requestActions.getSrvAction("SRV_GETFOCUSCELL"); // ask for editing
                    acts.send = true;
                }
                else {
                    // focus not on this table
                    acts.srvAct = requestActions.getSrvActionEX("SUP_CELL_EDIT"); //774 SRV_COMMANDGRID + SRV_GETFOCUSCELL
                    acts.send = true;
                }
        }
        return acts;
    };
    function clickCellBoolean(fieldInfo, newIst){
        var acts = clickCellDefault.call(this, fieldInfo);
        if (!acts.srvAct) {
            if (!fieldInfo.target.$isReadOnly) { // focus on this field
                acts.srvAct = requestActions.getSrvAction("SRV_GETFOCUSCELL"); // SRV_GETFOCUSCELL + SRV_GETFOCUSCELL
                acts.send = true;
            }
        }
        var newVal = (fieldInfo.target.currentValue == sapUtil.check.off ? sapUtil.check.on : sapUtil.check.off);
        var actionNext = (acts.srvAct == requestActions.getSrvActionEX("SUP_CELL_EDIT") || (!fieldInfo.firstFocus && !fieldInfo.currIst.edit)) ? requestActions.getSrvAction("SRV_COMMANDGRID") : requestActions.getSrvAction("SRV_GETFOCUSCELL")
        acts.post = {
            "exposeReply": true,
            "callback": toggleFieldAfterClick,
            "args": [this, fieldInfo.target, newIst, newVal, actionNext]
        };
        return acts;
    };
    function clickCellIcon(fieldInfo){
        var acts = {
            "send": false,
            "srvAct": null,
            "post": null
        };
        if (!fieldInfo.focus) { // focus change
            if (!fieldInfo.firstFocus) { // focus already on this table
                acts.srvAct = requestActions.getSrvActionEX("SUP_CELL_ICOCLICKFOCUS"); // 776 SRV_GETFOCUSCELL + SRV_KIB
                acts.send = true;
            }
            else {
                // focus not on this table
                acts.srvAct = requestActions.getSrvActionEX("SUP_CELL_ICOCLICK"); //775 SRV_COMMANDGRID + SRV_GETFOCUSCELL + SRV_KIB
                acts.send = true;
            }
        }
        else {
            acts.srvAct = requestActions.getSrvAction("SRV_KIB"); //
            acts.send = true;
        }
        return acts;
    }
    
    function toggleFieldAfterClick(reply, evtHandlingObj, $field, fieldIst, newValue, srvActChaine){
        var fieldValue = evtHandlingObj.sapController.getEntityValueInReply(reply, fieldIst), value, chain = null;
        if (fieldValue == null && fieldValue == undefined) {
            // Ok, field value has not been updated by the server after focus/click, we can process post local update...
            value = util.duplicateObj(fieldIst);
            value.v = newValue;
            evtHandlingObj.sapController.forceValue(value, false, true);
            // ...and finally we inform the server by this change
            if (srvActChaine) {
                chain = {
                    "$act": srvActChaine,
                    "params": {
                        "target": fieldIst
                    },
                    "post": null
                }
            }
        }
        return chain;
    }
    function onDatePickerClose(event){
        var processed = undefined, fieldInfo;
        if (event.target && (fieldInfo = _getFieldInfo.call(this, event)) && fieldInfo.focus) {
            event.result = {
                "$act": requestActions.svcFormat
            };
            event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.rawToEdit, event.data.internalValue, fieldInfo.currIst.fmt, fieldInfo.type, fieldInfo.currIst);
            event.result.post = {
                "callback": function(succeeded, reply, evtHandlingObj, initialEvent){
                    if (fieldInfo.focus) {
                        syraUtil.getFusionPageMeta(initialEvent.target).winModel.setCurrCtxPopup(null);
                        initialEvent.data.doStatements({
                            "value": svcFmt.getReplyResult(reply)
                        });
                        delete initialEvent.doStatements;
                    }
                },
                "args": [this, event, event.target, fieldInfo]
            };
            processed = true;
        }
        return processed;
    };
    function _openDatePicker(succeeded, result, evtHandlingObj, initialEvent, field){
        var session, $fusionPageMeta = syraUtil.getFusionPageMeta(field);
        if (!syraUtil.getPopupDateFromField(field)) {
            if (succeeded) {
                initialEvent.data.doEvent(result ? {
                    "internalValue": parseInt(svcFmt.getReplyResult(result), 10)
                } : null);
                $fusionPageMeta.winModel.setCurrCtxPopup(field);
            }
            else {
                session = (evtHandlingObj.sapController.getSiteController()).getSession();
                $fusionPageMeta.winModel._showFieldError(field, [session.getlabel("error", "22", "Date entered is invalid; calendar can not be opened")]);
            }
        }
        delete initialEvent.data.doEvent;
    };
    function _getFieldInfo(event){
        var nl = (event.data && event.data.line) ? event.data.line : event.target.getArticle().$recordIndex + 1, fieldInfo = sapUtil.getFieldInfo(_getXElement(event.target), nl), $fusionPageMeta = syraUtil.getFusionPageMeta(event.target);
        fieldInfo.data = event.data;
        fieldInfo.nl = nl
        fieldInfo.xid = syraUtil.getMetaFromObject(_getXElement(event.target)).$bind;
        fieldInfo.currIst = this.sapController.getCurrInst();
        fieldInfo.focus = sapUtil.cmpIst(fieldInfo.currIst, fieldInfo.fieldIst);
        fieldInfo.target = event.target;
        fieldInfo.firstFocus = !sapUtil.cmpIstBlock(fieldInfo.currIst, fieldInfo.fieldIst);
        fieldInfo.changeLine = (!fieldInfo.firstFocus && fieldInfo.currIst.nl != fieldInfo.nl);
        fieldInfo.isEdit = (!fieldInfo.firstFocus && !fieldInfo.changeLine && fieldInfo.currIst.edit);
        return fieldInfo;
    }
    function _getXElement(field){
        var arrayLevel = (field.arrayLevel ? field.arrayLevel : (field.getArticle() ? field.getArticle().arrayLevel : field));
        switch (arrayLevel) {
            case "cell":
                return field;
            case "record":
                return field.getArticle().getArticleParent();
            case "array":
                return field.getArticle();
            default:
                return field
        }
    }
};
