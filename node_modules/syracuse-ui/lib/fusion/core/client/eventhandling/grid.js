"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Grid event handling classes
 */
/*
 * ["wdgt.grid.clickline", focusLine, true, true],
 ["wdgt.cell.click", clickCell, true, true],
 ["wdgt.grid.clickcellCheck", focusCellCheckBox, true, true],
 ["wdgt.grid.clickcellIco", focusCellIco, true, true],
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var evtTools = require('../eventhandling/common').CommonEventHandlingTools;
var requestActions = require('../sap/srvactions');
var util = require('syracuse-ui/lib/fusion/tools/util');
var svcFmt = require('syracuse-ui/lib/fusion/core/tools/format').svcFormatter;
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;

var _evtProcGrid = {};
exports.GridEventHandling = _evtProcGrid;

/* "Server page input" event handling class for "Grid" widget */
_evtProcGrid.sap = function(){
    this.eventListeners = function(){
        return [["wdgt.cell.click", clickCellTab, true, true], 
				["wdgt.cell.change", changeCellTab, true, true], 
				["wdgt.grid.selline", selectLine, true, true], 
				["wdgt.record.action", actionLine, true, true], 
				["wdgt.array.action", actionArray, true, true], 
				["wdgt.cell.picker", clickPicker, true, true], 
				["wdgt.record.picker", clickRecordPicker, true, true], 
				["wdgt.cell.calendarclosed", onDatePickerClose, true, true], 
				["wdgt.cell.keydown", keyDownCellTab, true, true],
				["wdgt.grid.sortLocal", sortLocal, true, true]
				];
    };
    function sortLocal(event){
		var self = this, fieldInfo = _getFieldInfo(event),ist;
		if (!event.target) {
			return undefined;
		}
		var sap = this.sapController;
		if(event.data.nativeEvt.ctrlKey){
			_unSort(event);
			return true;
		}else{
			if (fieldInfo.firstFocus || fieldInfo.currIst.edit) {
				ist=sapUtil.makeIst(fieldInfo.fieldIst.win, fieldInfo.fieldIst.xid, 1)
				event.result = {
					"$act": requestActions.getSrvAction("SRV_COMMANDGRID"),
					"params": {
						"target": ist
					},
					"post": {
						"callback": event.data.doEvent,
						"args": [sapUtil.isEmptyGridDataRecord]
					}
				}
				return true;
			}
		}
		return false
	}
	function _unSort(event){
		var fieldInfo = _getFieldInfo(event);
		 fieldInfo.array.helper.fetchClientRecordSet(fieldInfo.array, {params:{orderBy:null}});
	}
    function actionLine(event){
        var processed = undefined, fieldInfo = _getFieldInfo(event), acts = {}, srvActEx, srvAct, srvActNum;
        if (event.target) {
        	fieldInfo.array.unSelectLines()
            switch (event.target.$bind) {
                case "$delete":
                    srvActEx = "SUP_LINE_DELETE";
                    srvAct = "SRV_DELETELINEGRID";
                    processed = true
                    break;
                case "$create":
                    srvActEx = "SUP_LINE_INSERT";
                    srvAct = "SRV_INSERTLINEGRID";
                    processed = true
                    break;
                default:
                    srvActNum = event.target.$act;
                    processed = true
                    break;
                    
            }
            if (srvActNum) {
                acts.srvAct = srvActNum
            }
            else {
                if (fieldInfo.firstFocus || fieldInfo.changeLine || fieldInfo.isEdit && srvActEx) { // focus not already on this table or line change or same ligne but edit field
                    acts.srvAct = requestActions.getSrvActionEX(srvActEx);
                }
                else {
                    acts.srvAct = requestActions.getSrvAction(srvAct);
                }
            }
            event.result = {
                "$act": acts.srvAct
            };
            event.result.params = {
                "target": fieldInfo.fieldIst
            }
            event.result.post = acts.post
        }
        return processed;
    };
    function actionArray(event){
        var processed = undefined;
        if (event.target) {
            switch (event.target.$bind) {
                case "$delete":
                    processed = deleteLines.call(this, event);
                    break;
            }
        }
        return processed;
    };
    function deleteLines(event){
        //SUP_LINES_DELETE //SRV_DELETELINESGRID
        if (event.target) {
            var sIndex = event.target.getArticle().getSelectedRecordIndexes();
            if (!event.data) {
                event.data = {}
            }
            if (sIndex.length > 0) {
                event.data.line = sIndex[0].start + sIndex[0].count;
                var fieldInfo = _getFieldInfo(event)
                if (fieldInfo.firstFocus || fieldInfo.changeLine || fieldInfo.isEdit) { // focus not already on this table or line change or same ligne but edit field
                    event.result = {
                        "$act": requestActions.getSrvActionEX("SUP_LINES_DELETE"),
                        "params": {
                            "target": fieldInfo.fieldIst,
                            "sudo": [null, [sIndex[0].start + 1,sIndex[0].count]]
                        }
                    }
                }
                else {
                    event.result = {
                        "$act": requestActions.getSrvAction("SRV_DELETELINESGRID"),
                        "params": {
                            "target": fieldInfo.fieldIst,
                            "std": [sIndex[0].start + 1,sIndex[0].count]
                        }
                    }
                }
            }
        }
        return true
    }
    function selectLine(event){
        var processed = undefined, fieldInfo = _getFieldInfo(event), acts = {}, l, serverIndex,recordData;
        if(event.data.uuid!=undefined){
        	if(sapUtil.isEmptyGridDataRecord(event.target,{uuid:event.data.uuid})){
        		return true;
        	}
        }
        if (event.target) {
        	l = event.target.getSelectedRecordIndexes();
           if(event.data.nativeEvt.shiftKey && l.length >0 && !fieldInfo.isSortedArray){
           		 serverIndex = fieldInfo.nl - 1;
           		 var items=[]
           		 for (var ii=0;ii<fieldInfo.array.dataset.length;ii++){
           		 	if(recordData=fieldInfo.array.recordsMap[fieldInfo.array.dataset[ii].$uuid]){
       		 			if(recordData.$serverIndex>=l[0].start && recordData.$serverIndex <= serverIndex){
       		 				items.push({$uuid:recordData.$uuid,$isSelected:true})
       		 			}else{
       		 				items.push({$uuid:recordData.$uuid,$isSelected:false})
       		 			} 
       		 		}else{
       		 			if(fieldInfo.array.dataset[ii].$serverIndex >=l[0].start && fieldInfo.array.dataset[ii].$serverIndex <= serverIndex){
       		 				fieldInfo.array.dataset[ii].$isSelected=true
       		 			}else{
       		 				fieldInfo.array.dataset[ii].$isSelected=false
       		 			}
       		 		}
           		 }
           		 if(items.length>0){
           		 	event.target.applyMetaData({$items:items})
           		 }
           }else{
				if(l.length >0) {
					fieldInfo.array.unSelectLines()       
				}  	
           }
            if ((fieldInfo.changeLine || fieldInfo.firstFocus) && (!event.data.nativeEvt.shiftKey || l.length ==0)) { // focus not already on this table or check and change line
                acts.srvAct = requestActions.getSrvAction("SRV_COMMANDGRID"); // ask for focus 
                acts.send = true;
                if(fieldInfo.fieldIst.nl===0){fieldInfo.fieldIst.nl=1}
            }
            if (acts.send) {
                event.result = {
                    "$act": acts.srvAct
                };
                event.result.params = {
                    "target": fieldInfo.fieldIst
                }
                event.result.post = acts.post
            }
        }
        return false;
    }
    function clickPicker(event){
        var process = undefined, pickerType, fieldInfo = _getFieldInfo(event);
        if (fieldInfo.readOnlyByModel) {
            return true
        };
        if (event.data) {
            if (pickerType = event.data.pickerType) {
                switch (pickerType) {
                    case "menus":
                        process = clickCell.call(this, event, fieldInfo);
                        process = menuCtxPickerClick.call(this, event, process, fieldInfo);
                        break;
                    case "tunnel":
                    case "lookup":
                        process = clickCell.call(this, event, fieldInfo);
                        process = innerPickerClick.call(this, event, process, fieldInfo, pickerType);
                        break;
                    case "date":
                        process = clickCell.call(this, event, fieldInfo);
                        process = datePickerClick.call(this, event, process, fieldInfo);
                        break;
                    default:
                        process = clickCell.call(this, event, fieldInfo)
                        break;
                }
            }
        }
        return process;
    };
    function clickRecordPicker(event){
        var process = undefined, pickerType, fieldInfo = _getFieldInfo(event);
        if (fieldInfo.xid == "$itemsPerPage") 
            return false
        if (fieldInfo.firstFocus || fieldInfo.changeLine || fieldInfo.isEdit) {
            process = setFoucusLine.call(this, event, fieldInfo);
        }
        if (event.data) {
            if (pickerType = event.data.pickerType) {
                switch (pickerType) {
                    case "menus":
                        process = menuCtxPickerClick.call(this, event, process, fieldInfo,true);
                        break;
                    default:
                        break;
                }
                
            }
        }
        return process;
    };
    function menuCtxPickerClick(event, process, fieldInfo,record){
        var popupCtx = syraUtil.getPopupCtxFromField(event.target), exclude = undefined, target = false, links;
        if(event.target && ((links = (event.target.$prototype || event.target.$rootLinks))) && (links = (links.$links || links.$links))) {
            if (links.$tunnel) {
                exclude = {};
                exclude[new String(requestActions.getSrvAction("SRV_TUNNEL"))] = true;
            }
            if (links.$lookup) {
                exclude = exclude || {};
                exclude[new String(requestActions.getSrvAction("SRV_BOITE_SELECTION"))] = true;
            }
        }
        if (fieldInfo && !popupCtx) {
            if (process && event.result && event.result.$act) {
                switch (event.result.$act) {
                    case requestActions.getSrvAction("SRV_COMMANDGRID"):
                        if (record) {
							event.result.$act = requestActions.getSrvActionEX("SUP_CELL_FOCUS_CTX");
						}
						else {
							event.result.$act = requestActions.getSrvActionEX("SUP_CELL_FOCUS_EDIT_CTX"); 
						}
						target=true
                        break;
                    case requestActions.getSrvAction("SRV_GETFOCUSCELL"):
                        event.result.$act = requestActions.getSrvActionEX("SUP_CELL_EDIT_CTX");
						target=false
                        break;
                    case requestActions.getSrvActionEX("SUP_CELL_EDIT"):
                        event.result.$act = requestActions.getSrvActionEX("SUP_CELL_FOCUS_EDIT_CTX");
						target=true
                        break;
                    default:
                        break;
                }
            }
            else {
				target=true;
				if (!record && !fieldInfo.isEdit) {
					event.result = {
	                    "$act": requestActions.getSrvActionEX("SUP_CELL_EDIT_CTX")
					};
				}
				else {
					event.result = {
	                    "$act": requestActions.getSrvAction("SRV_OPEN_CTXMENU")
					};
				}
	
				if (target) {
					event.result.params = {
						"target": fieldInfo.fieldIst
					}
				}
            }
            if (event.data.doEvent) {
                event.result.post = {
                    "exposeReply": true,
                    "callback": evtTools.openFieldCtx,
                    "args": [this, event, event.target, fieldInfo, exclude]
                };
            }
            process = true;
        }
        else {
            if (popupCtx && event.data.doEvent) {
                event.data.doEvent();
                delete event.data.doEvent;
            }
        }
        return process;
    };
    function innerPickerClick(event, process, fieldInfo, pickerType){
        var act = (pickerType == "tunnel" ? "DRILL" : "SELECT");
        if (process) {
            switch (event.result.$act) {
                case requestActions.getSrvAction("SRV_COMMANDGRID"):
                    event.result.$act = requestActions.getSrvActionEX("SUP_CELL_FOCUS_" + act);
                    break;
                case requestActions.getSrvAction("SRV_GETFOCUSCELL"):
                    event.result.$act = requestActions.getSrvActionEX("SUP_CELL_EDIT_" + act);
                    break;
                case requestActions.getSrvActionEX("SUP_CELL_EDIT"):
                    event.result.$act = requestActions.getSrvActionEX("SUP_CELL_FOCUS_EDIT_" + act);
                    break;
            }
            event.result.post = null;
        }
        else {
            event.result = {
                "$act": (pickerType == "tunnel" ? requestActions.getSrvAction("SRV_TUNNEL") : requestActions.getSrvAction("SRV_BOITE_SELECTION"))
            };
            event.result.params = {
                "target": fieldInfo.fieldIst
            }
            event.result.post = null
            process = true;
        }
        return process;
    };
    function datePickerClick(event, process, fieldInfo){
        if (process && !syraUtil.getPopupDateFromField(event.target)) {
            event.result.post = {
                "callback": function(evtHandlingObj, initialEvent, callerField){
                    var fieldContext = evtHandlingObj.sapController.getCurrInst();
                    evtTools.openDatePicker(true, fieldContext.raw ? svcFmt.formReply(fieldContext.raw, fieldContext.fmt) : null, evtHandlingObj, initialEvent, callerField, fieldInfo);
                },
                "args": [this, event, event.target, fieldInfo]
            };
        }
        else 
            if (!syraUtil.getPopupDateFromField(event.target)) {
                var fieldContext = this.sapController.getCurrInst();
                var currValue = syraUtil.getFusionPageMeta(event.target).winModel.getDataInputValue(syraUtil.getMetaFromObject(event.target).$bind, event.target.getArticle().$serverIndex + 1);
                if (currValue && currValue.v) {
                    event.result = {
                        "$act": requestActions.svcFormat
                    };
                    event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.toRaw, currValue.v, fieldContext.fmt, syraUtil.getFieldType(event.target), fieldContext);
                    event.result.post = {
                        "callback": evtTools.openDatePicker,
                        "args": [this, event, event.target, fieldInfo]
                    };
                    process = true;
                }
                else {
                    var self = this
                    setTimeout(function(){
                        evtTools.openDatePicker(true, null, self, event, event.target, fieldInfo);
                    }, 10);
                    process = true;
                }
            }
        return process;
    };
    function changeCellTab(event){
        var processed = undefined, fieldInfo = _getFieldInfo(event);
        if (fieldInfo.isCheck) {
            return clickCell.call(this, event, fieldInfo)
        }
    }
    function clickCellTab(event){
        var processed = undefined, fieldInfo = _getFieldInfo(event);
		if(isNaN(fieldInfo.nl)) return false;
        if (!fieldInfo.isCheck) {
            return clickCell.call(this, event, fieldInfo)
        }
    }
    function keyDownCellTab(event){
        var processed = undefined, fieldInfo = _getFieldInfo(event), doEvt, keycode = event.data.nativeEvt.keyCode, acts = undefined,target;
		if (isNaN(fieldInfo.nl)) {
			event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
			return false
		}
	    if (event.target && !sapUtil.isSpecialKey(keycode)) {
            switch (keycode) {
                case keys["VK_ENTER"]:
                    if (fieldInfo.isEdit) {
                        acts = requestActions.getSrvAction("SRV_COMMANDGRID");
						target=true;
						processed = true;
                    }
                    else {
                        event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
                        return false
                    }
                    break;
                case keys["VK_ESCAPE"]:
                    if (fieldInfo.isEdit) {
                        acts = requestActions.getSrvAction("SRV_ABANDONLINE")
						target=true;
						processed = true;
                    }
                    else {
                        event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
                        return false
                    }
                    break;
				case keys["VK_TAB"]:
					if(!fieldInfo.isEdit /*&& !fieldInfo.target.$isReadOnly*/ ){
						if (!event.data.nativeEvt.shiftKey) {
							acts = requestActions.getSrvActionEX("SUP_CELL_EDIT_TAB")
						}else{
							acts = requestActions.getSrvAction("SRV_CHAMP_PRECEDENT")
						}
						target=true;
						processed = true; 
					}else{
					    event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
                        return false;
					};
					break;	
				case keys["VK_UP"]:
				case keys["VK_DOWN"]:
				case keys["VK_LEFT"]:
				case keys["VK_RIGHT"]:
				case keys["VK_HOME"]:
				case keys["VK_END"]:
				case keys["VK_PGUP"]:
				case keys["VK_PGDOWN"]:
				case keys["VK_F1"]:
				case keys["VK_F2"]:
				case keys["VK_F3"]:
				case keys["VK_F4"]:
				case keys["VK_F10"]:
                        event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
                        return false;
					break;
                default:
                    if (fieldInfo.isEdit) {
                        event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
                        return false
                    }
                    else {
                       if (!fieldInfo.target.$isReadOnly) {
                       	unSortBeforeEdit(fieldInfo)
					   	acts = requestActions.getSrvAction("SRV_GETFOCUSCELL");
					   	target = true
					   	processed = false;
					   }
                    }
            }
            if (acts) {
				event.result = {
					"$act": acts
				};
				if (target) {
					event.result.params = {
						"target": fieldInfo.fieldIst
					}
				}
                if (fieldInfo.data.doEvent) {
                    event.result.post = {
                        "callback": fieldInfo.data.doEvent,
                        "args": []
                    }
                }
            }
        }      
        return processed
    }
    function clickCell(event, fieldInfo){
        // "target":... "type":... "data": {"nativeEvt:..."}
        if(!fieldInfo.target.$isReadOnly){
        	unSortBeforeEdit(fieldInfo)
        }
        fieldInfo.array.unSelectLines()
        var processed = undefined, acts;
        if (event.target) {
            switch (fieldInfo.type) {
                case syraUtil.dataTypes.booleanType:
                    acts = clickCellBoolean.call(this, fieldInfo, fieldInfo.fieldIst);
                    break;
                case syraUtil.dataTypes.iconType:
                    acts = clickCellIcon.call(this, fieldInfo);
                    break;
                case syraUtil.dataTypes.dateType:
                    acts = clickCellDefault.call(this, fieldInfo);
                    break;
                default:
                    acts = clickCellDefault.call(this, fieldInfo);
                    if (fieldInfo.data.doEvent) {
                        if (acts.send) {
                            acts.post = {
                                "callback": fieldInfo.data.doEvent,
                                "args": []
                            };
                        }
                    }
                    break;
            }
            if (acts.send) {
                event.result = {
                    "$act": acts.srvAct
                };
                event.result.params = {
                    "target": fieldInfo.fieldIst
                }
                event.result.post = acts.post
                processed = true;
            }
        }
        return processed;
    }
	function unSortBeforeEdit(fieldInfo) {
        if(fieldInfo && fieldInfo.winModel && fieldInfo.winModel._isLocalFmt) {
            return;
        }
		if (fieldInfo.array.sortCapability && fieldInfo.array.sortCapability._$orderBy) {
			fieldInfo.array.helper.fetchClientRecordSet(fieldInfo.array, {
				params : {
					orderBy : null
				}
			})
		}
	}
    function setFoucusLine(event, fieldInfo){
        var processed = undefined, acts = {
            "send": false,
            "srvAct": null,
            "post": null
        };
        if (event.target) {
            acts.srvAct = requestActions.getSrvAction("SRV_COMMANDGRID"); // ask for focus
            acts.send = true;
            
            if (fieldInfo.data.doEvent) {
                if (acts.send) {
                    acts.post = {
                        "callback": fieldInfo.data.doEvent,
                        "args": []
                    };
                }
            }
        }
        if (acts.send) {
            event.result = {
                "$act": acts.srvAct
            };
            event.result.params = {
                "target": fieldInfo.fieldIst
            }
            event.result.post = acts.post
            processed = true;
        }
        return processed;
    }
    function clickCellDefault(fieldInfo){
        var acts = {
            "send": false,
            "srvAct": null,
            "post": null
        };
        if (!fieldInfo.hasFocus) { // focus change
            if (fieldInfo.target.$isReadOnly) {
				acts.srvAct = requestActions.getSrvAction("SRV_COMMANDGRID"); // ask for focus
				acts.send = true;
			}
			else {
                if (!fieldInfo.firstFocus) { // focus already on this table
                    if (fieldInfo.changeLine) {
						acts.srvAct = requestActions.getSrvActionEX("SUP_CELL_EDIT"); //774 SRV_COMMANDGRID + SRV_GETFOCUSCELL
                    	acts.send = true;
                    }
                    else {
                        acts.srvAct = requestActions.getSrvAction("SRV_GETFOCUSCELL"); // ask for editing
                        acts.send = true;
                    }
                }
                else {
                    // focus not on this table
                    acts.srvAct = requestActions.getSrvActionEX("SUP_CELL_EDIT"); //774 SRV_COMMANDGRID + SRV_GETFOCUSCELL
                    acts.send = true;
                }
			}
        }else{
                if (!fieldInfo.isEdit && !fieldInfo.target.$isReadOnly) { // focus already on this table but fiend not edit mode
                    acts.srvAct = requestActions.getSrvAction("SRV_GETFOCUSCELL"); // ask for editing
                    acts.send = true;
                }			
		}
        return acts;
    };
    function clickCellBoolean(fieldInfo, newIst){
        var acts = clickCellDefault.call(this, fieldInfo);
        if (!acts.srvAct) {
            if (!fieldInfo.target.$isReadOnly) { // focus on this field
                acts.srvAct = requestActions.getSrvAction("SRV_GETFOCUSCELL"); // SRV_GETFOCUSCELL + SRV_GETFOCUSCELL
                acts.send = true;
            }
        }
        var newVal = (fieldInfo.target.currentValue == sapUtil.check.off ? sapUtil.check.on : sapUtil.check.off);
        var actionNext = (acts.srvAct == requestActions.getSrvActionEX("SUP_CELL_EDIT") || (!fieldInfo.firstFocus && !fieldInfo.currIst.edit)) ? requestActions.getSrvAction("SRV_COMMANDGRID") : requestActions.getSrvAction("SRV_GETFOCUSCELL")
        acts.post = {
            "exposeReply": true,
            "callback": evtTools.toggleFieldAfterClick,
            "onErrCallBack": evtTools.restoreFieldAfterClick,
            "args": [this, fieldInfo.target, newIst, newVal, true, actionNext, fieldInfo.target.currentValue]
        };
        return acts;
    };
    function clickCellIcon(fieldInfo){
        var acts = {
            "send": false,
            "srvAct": null,
            "post": null
        };
        if (!fieldInfo.hasFocus) { // focus change
            if (!fieldInfo.firstFocus) { // focus already on this table
                acts.srvAct = requestActions.getSrvActionEX("SUP_CELL_ICOCLICKFOCUS"); // 776 SRV_GETFOCUSCELL + SRV_KIB
                acts.send = true;
            }
            else {
                // focus not on this table
                acts.srvAct = requestActions.getSrvActionEX("SUP_CELL_ICOCLICK"); //775 SRV_COMMANDGRID + SRV_GETFOCUSCELL + SRV_KIB
                acts.send = true;
            }
        }
        else {
            acts.srvAct = requestActions.getSrvAction("SRV_KIB"); //
            acts.send = true;
        }
        return acts;
    }
    function onDatePickerClose(event){
        var processed = undefined, fieldInfo;
        if (event.target && (fieldInfo = _getFieldInfo(event)) && fieldInfo.hasFocus) {
            event.result = {
                "$act": requestActions.svcFormat
            };
            event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.rawToEdit, event.data.internalValue, fieldInfo.currIst.fmt, fieldInfo.type, fieldInfo.currIst);
            event.result.post = {
                "callback": function(succeeded, reply, evtHandlingObj, initialEvent){
                    if (fieldInfo.hasFocus) {
                        syraUtil.getFusionPageMeta(initialEvent.target).winModel.setCurrCtxPopup(null);
                        initialEvent.data.doStatements({
                            "value": svcFmt.getReplyResult(reply)
                        });
                        delete initialEvent.doStatements;
                    }
                },
                "args": [this, event, event.target, fieldInfo]
            };
            processed = true;
        }
        return processed;
    };
    function _getFieldInfo(event){
        var nl = _getNoLine(event), fieldInfo = evtTools.getFieldInfo(_getXElement(event.target), nl), $fusionPageMeta = syraUtil.getFusionPageMeta(event.target);
        fieldInfo.data = event.data;
        fieldInfo.nl = nl
        fieldInfo.xid = syraUtil.getMetaFromObject(_getXElement(event.target)).$bind;
		if (fieldInfo.xid.length == 2) {
			fieldInfo.xid += "1";
			fieldInfo.fieldIst.xid=fieldInfo.xid
		}
		fieldInfo.blockIst=sapUtil.makeIst(fieldInfo.fieldIst.win, sapUtil.getBlockInst(fieldInfo.xid), fieldInfo.nl);
        fieldInfo.currIst = syraUtil.getFusionController(event.target)._sapController.getCurrInst();
        fieldInfo.hasFocus = sapUtil.cmpIst(fieldInfo.currIst, fieldInfo.fieldIst);
        fieldInfo.target = event.target;
        fieldInfo.firstFocus = !sapUtil.cmpIstBlock(fieldInfo.currIst, fieldInfo.fieldIst);
        fieldInfo.changeLine = (!fieldInfo.firstFocus && fieldInfo.currIst.nl != fieldInfo.nl);
        fieldInfo.isEdit = (!fieldInfo.firstFocus && !fieldInfo.changeLine && fieldInfo.currIst.edit);
        fieldInfo.array=_getXElementGrid(event.target)
        fieldInfo.isSortedArray=(fieldInfo.array && fieldInfo.array.sortCapability && fieldInfo.array.sortCapability._$orderBy)?true:false
        return fieldInfo;
    }
	function _getNoLine(event){
		if (event.data) {
			if (event.data.line) 
				return event.data.line;
			if (event.data.uuid) 
				return event.target.recordsMap[event.data.uuid].$serverIndex + 1
		}
		if(event.target.arrayLevel=="record"){
			return event.target.getArticle().$serverIndex + 1
		}
		if (event.target.$uuid){ 
			return event.target.recordsMap[event.target.$uuid].$serverIndex + 1
		}
		return event.target.getArticle().$serverIndex + 1
	}
    function _getXElement(field){
        var arrayLevel = (field.arrayLevel ? field.arrayLevel : (field.getArticle() ? field.getArticle().arrayLevel : field));
        switch (arrayLevel) {
            case "cell":
                return field;
            case "record":
                return field.getArticle().getArticleParent();
            case "array":
                return field.getArticle();
            default:
                return field
        }
    }
    function _getXElementGrid(field){
        var arrayLevel = (field.arrayLevel ? field.arrayLevel : (field.getArticle() ? field.getArticle().arrayLevel : field));
        switch (arrayLevel) {
            case "cell":
                return field.getArticle().getArticleParent();;
            case "record":
                return ((field.getArticleParent && field.getArticleParent()) || (field.getArticle && field.getArticle().getArticleParent()) || field.articleParent)
            default:
                return field
        }
    }
};
