"use strict";
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var evtTools = require('../eventhandling/common').CommonEventHandlingTools;
var requestActions = require('../sap/srvactions');
var util = require('syracuse-ui/lib/fusion/tools/util');

/**
 * @fileoverview Fusion "Graphical block" event handling classes
 */
var _evtProcBlockEx = {};
exports.BlockExEventHandling = _evtProcBlockEx;

/* "Server page input" events handling class for "Graphical block" controls*/
_evtProcBlockEx.sap = function() {
	this.eventListeners = function() {
		return [
			["wdgt.graph.picker", onClickPicker, true, true], ["wdgt.xblock.rpc", onCallSP, true, true]];

	};

	function _setSerieMenuCtx(reply, evtHandlingObj, initialEvent, target, targeInfo, rcdUuid, forceEmpty) {
		var ctxEx = [],
			ctx = evtHandlingObj.sapController.getTargetCtxMenuFromReply(reply);
		if (!forceEmpty && ctx && ctx.length > 0) {
			_.each(ctx, function(item, idx) {
				this.push({
					"$title": item[2],
					"linkId": item[0]
				});
			}, ctxEx);
		}
		initialEvent.data.doEvent(null, ctxEx);
		delete initialEvent.data.doEvent;
	}

	function _onErrSerieMenuCtx(ctrlFailed, reply, evtHandlingObj, initialEvent, target, targeInfo, rcdUuid, forceEmpty) {
		initialEvent.data.doEvent();
	}

	function onCallSP(event) {
		var processed = undefined,
			fieldInfo, ackCallRqst;
		if (event.target && event.data && (fieldInfo = evtTools.getFieldInfo(event.target))) {

			if (this.sapController.buildAckCallRqst(event, _ensureIst(fieldInfo), event.data.call, event.data.callFunc)) {
				processed = true;
			} else {
				event.data.doEvent = event.data.call && event.data.call.callback || event.data.doEvent;
			}
		} else {
			// Let it be... improve!
		}
		return processed;
	}

	function _ensureIst(fieldinfo) {
		if (fieldinfo.type == syraUtil.dataTypes.collectionType && fieldinfo.fieldIst && sapUtil.isBlockInst(fieldinfo.fieldIst.xid)) {
			return sapUtil.makeIst(fieldinfo.fieldIst.win, fieldinfo.fieldIst.xid + "2", fieldinfo.fieldIst.nl ? fieldinfo.fieldIst.nl : 1);
		}
		return fieldinfo.fieldIst;
	}

	function onClickPicker(event) {
		var processed = undefined,
			hasFocus, fieldInfo, isArrayOnEdit = null,
			act, collName, forceEmptyCtx = false;
		if (event.target && event.target.attachedField && (fieldInfo = evtTools.getFieldInfo(event.target.attachedField, null))) {
			hasFocus = this.sapController.hasFocus(fieldInfo.fieldIst, null, null, true, true);
			switch (event.data.pickerType) {
				case "menus":
					if (event.data.grapLevel && event.data.grapLevel == "measure") {
						if (fieldInfo.type == syraUtil.dataTypes.collectionType) {
							collName = sapUtil.getBlockInst(fieldInfo.$fieldMeta.$bind);
							isArrayOnEdit = (hasFocus && (isArrayOnEdit = this.sapController.getCurrInst()) ? isArrayOnEdit.edit : false);
							act = !isArrayOnEdit ? requestActions.getSrvActionEX("SUP_CELL_FOCUS_CTX") : requestActions.getSrvAction("SRV_ABANDONLINE");
							fieldInfo.fieldIst.nl = isArrayOnEdit ? 0 : (event.data.rcdUuid !== null ? fieldInfo.winModel.getCollRcdIdx(collName, event.data.rcdUuid, false) : event.data.rcdLineId);
							forceEmptyCtx = isArrayOnEdit; // TODO : improve ==> super act SRV_ABANDONLINE + SRV_COMMANDGRID + SRV_OPEN_CTXMENU
						} else {
							act = hasFocus ? requestActions.getSrvAction("SRV_OPEN_CTXMENU") : requestActions.getSrvAction("SUP_FIELD_CTX");
						}
						event.result = {
							"$act": act,
							"params": {
								"target": fieldInfo.fieldIst
							}
						};
						event.result.post = {
							"exposeReply": true,
							"callback": _setSerieMenuCtx,
							"onErrCallBack": _onErrSerieMenuCtx,
							"args": [this, event, event.target, fieldInfo, event.data.rcdUuid, forceEmptyCtx]
						};
						processed = true;
					}
					break;
				default:
					break;
			}
		} else {
			// Let it be... improve!
		}
		return processed;
	}

};