"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
 /**
 * @fileoverview Fusion "Selimp et cie" windows event handling classes
 */

var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var printerHelpers = require('syracuse-ui/lib/site/aside/printerSetup').helpers;
var requestActions = require('../sap/srvactions');

var _evtProcSelimp = {};
exports.SelimpEventHandling = _evtProcSelimp;

/* "Printer Setup dialogs" events handling class for "Selimp" et cie controls */
_evtProcSelimp.sap = function() {
	this.eventListeners = function() {
		return [
			["sap.extdlg.loaded", onDlgLoaded, false, false],
			["wdgt.link.click", onClick, true, true],
			["wdgt.win.close", onClose, true, true],
			["wdgt.record.picker", onClickRcdPicker, true, true],
			["wdgt.record.action", onActRcd, true, true],
			["wdgt.grid.selline", onSelRcd, true, true],
			["wdgt.cell.click", onClickCell, true, true]
		];
	};

	function _isEvtFromExtendDialog(printerController) {
		return printerController.dialogStack.length === 2;
	}

	function _getActionRqst(printerController, linkId, data, rqst) {
		var ret = {"closeLink": true}, extdDiag = _isEvtFromExtendDialog(printerController), act = null, rqstData;
		rqst.params = {"notModified": true, "selpr": {}};
		rqstData = rqst.params.selpr;
		switch (linkId) {
			case "$save":
				if(extdDiag) {
					act = "PRINTER_OPTS_OK";
					rqstData.todo = "...";
				}
				else {
					act = "PRINTER_SEL_OK";
					rqstData.selected = {"name": printerHelpers.getPrinterName(data)};
				}
				break;
			case "$properties":
				act = "PRINTER_SEL_OPTS";
				rqstData.printerName =  printerHelpers.getPrinterName(data);
				ret.closeLink = false;
				break;
			default:
				act = extdDiag ? "PRINTER_OPTS_CANCEL" : "PRINTER_SEL_CANCEL";
				break;
		}
		if(act) {
			rqst.$act = requestActions.getProxyAction(act);
		}
		else {
			ret = null;
		}
		return ret;
	}

	function _setCurrPrt (event) {
		var page;
		this._currPrinterRcd = event.target ? (event.data && event.data.uuid ? event.target.recordsMap[event.data.uuid].dataset : (event.target.getArticle()).dataset) : null;
		if(this._currPrinterRcd && (page = syraUtil.getPage(event.target))) {
			printerHelpers.applyCapabilities(syraUtil.getBoundFldsFromPage(page), this._currPrinterRcd);
		}
	}

	function _onClickPrinterGrid(self, event) {
		var processed = undefined;
		_setCurrPrt.call(self, event);
		return processed;
	}

	function onDlgLoaded(event) {
		var extdDiag = _isEvtFromExtendDialog(this.printerController), boundFields;
		if(!extdDiag && event.target) {
			boundFields = syraUtil.getBoundFldsFromPage(syraUtil.getPage(event.target.getSyraPage()));
			if((this._currPrinterRcd = printerHelpers.getDefaultPrinterRcd(boundFields))) {
				printerHelpers.applyCapabilities(boundFields, this._currPrinterRcd);
			}
		}
		return;
	}

	function onActRcd(event) {
		var processed = undefined, ret, linkId;
		if ((linkId = event.target.$bind) && linkId !== "$recordCard") {
			if(this._currPrinterRcd) {
				event.result = {};
				ret = _getActionRqst(this.printerController, linkId, this._currPrinterRcd, event.result);
				processed = ret ? true : processed;
			}
		}
		return processed;
	}

	function onSelRcd(event) {
		return _onClickPrinterGrid(this, event);
	}

	function onClickCell(event) {
		return _onClickPrinterGrid(this, event);
	}

	function onClickRcdPicker(event) {
		return _onClickPrinterGrid(this, event);
	}

	function onClick(event) {
		var processed = undefined, linkId = null, ret, dialogMeta;
		if (event.target && (linkId = event.target.$bind)) {
			event.result = {};
			if((ret = _getActionRqst(this.printerController, linkId, this._currPrinterRcd, event.result))) {
				if(ret.closeLink) {
					delete this._currPrinterRcd;
					dialogMeta = this.printerController.unstackDialog();
					this.sapController.stubWinClose([dialogMeta.id], null, {});
				}
				processed = true;
			}
		}
		return processed;
	}

	function onClose(event) {
		if(!event.target) {
			event.target = {};
		}
		event.target.$bind = "$cancel";
		return onClick.call(this, event);
	}
};