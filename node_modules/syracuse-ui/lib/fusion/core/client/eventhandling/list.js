"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion "Left List" event handling classes
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var requestActions = require('../sap/srvactions');
var util = require('syracuse-ui/lib/fusion/tools/util');
var evtTools = require('../eventhandling/common').CommonEventHandlingTools;
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;

var _evtProcList = {};
exports.ListEventHandling = _evtProcList;

function getchangeLineActMap(winModel, isPickList, checked){
    // Right now, only lists embedded in Selbox and Choose windows have a particular behaviour...
    var winName = winModel ? winModel.getWinName() : null, actMap = [], actSelLine, actSelLineSup, forceSel = true;
    if (winName && winName === sapUtil.specialWindow.selbox.id || winName === sapUtil.specialWindow.choose.id) {
        actMap.push(forceSel);
        actMap.push(requestActions.getSrvAction("SRV_BRWSELECTLINE"));
        actMap.push(requestActions.getSrvActionEX("SUP_LIST_SELLINEEX"));
    }
    else {
        actMap.push(null);
        if (isPickList) {
            if (checked) {
                actMap.push(requestActions.getSrvActionEX("SUP_LIST_PICKING_SELECT")); //select picking one line
                actMap.push(requestActions.getSrvActionEX("SUP_LIST_PICKING_FOCUS_SELECT")); //set focus and select picking one line
            }
            else {
                actMap.push(requestActions.getSrvActionEX("SUP_LIST_PICKING_UNSELECT"));//unselect picking one line
                actMap.push(requestActions.getSrvActionEX("SUP_LIST_PICKING_FOCUS_UNSELECT")); //set focus and unselect picking one line	
            }
        }
        else {
            actMap.push(requestActions.getSrvAction("SRV_BRWCHANGELINE"));
            actMap.push(requestActions.getSrvActionEX("SUP_LIST_SELLINE"));
        }
    }
    return actMap;
}

function _listIst(event, sapCtrl, listXid){
    var listXid = listXid ? listXid : event.target.$item.$bind;
    var $fusionPageMeta = syraUtil.getFusionPageMeta(event.target);
    return sapUtil.makeIst(syraUtil.getFusionPageMeta(event.target).winModel.getWinId(), listXid, sapCtrl.getCurrInst().nl);
}

function _isPickList(event){
    if (event.target && event.target.$item) {
        return (event.target.$item.$isNavigationList && event.target.$item.$selectMode === "multi");
    }
    return false;
}

function _hasFocus(event, sapCtrl, listXid){
    return sapUtil.cmpIst(sapCtrl.getCurrInst(), _listIst(event, sapCtrl, listXid));
}

function _displayError(sap, error, callBack, notifyComplete){
    if (error == null || (typeof(error) == 'string' && error.length == 0)) {
        error = {
            data: {
                "message": "!!No errror message!!"
            }
        };
    }
    var ourErr = util.isOurAjaxErrEx(error);
    if (ourErr) {
        var diagnoses = util.makeDiagnosesFromOurAjaxErrEx(ourErr, sap._session);
    }
    else {
        var diagnoses = util.getDiagnosesFromAjax(error, sap._session);
    }
    sap._sapException(null, diagnoses, null, null, callBack, true === notifyComplete);
}

/* "Server page input" event handling class for "Left List" widget */
_evtProcList.sap = function(){
    this.eventListeners = function(){
        return [["wdgt.list.toggle", beforeToggle, true, true], 
                ["wdgt.list.selline", selectLine, true, true],
                ["wdgt.list.toggled", afterToggle], 
                ["wdgt.list.sortLocal", sortLocal, true, true],
                ["wdgt.list.operatorchange", operatorChange, true, true],
                ["wdgt.list.operatorclick", operatorClick, true, true],
                ["wdgt.list.keydown", keyDown, true, true],
                ["wdgt.list.click", clickQuickSelField, true, true]
                ];
    };
    
    function beforeToggle(event, listXid){
        var processed = undefined, sap = this.sapController;
        if (event.target && event.data.open) {
            if (!_hasFocus(event, sap, listXid)) {
                event.result = {
                    "$act": requestActions.getSrvAction("SRV_GETFOCUS")
                };
                event.result.params = {
                    "target": _listIst(event, sap, listXid)
                };
                event.result.post = {"callback": event.data.doEvent, "args": []};
                processed = true;
            }
        }
        return processed;
    }
    
    function afterToggle(event, listXid){
        return undefined;
    }
    
    function sortLocal(event){
        var self = this;
        if (!event.target) 
            return undefined;
        var sap = this.sapController;
        var ist = _listIst(event, sap, event.target.getXid());
        if (!_hasFocus(event, sap, event.target.getXid())) {
            event.result = {
                "$act": requestActions.getSrvAction("SRV_GETFOCUS"),
                "params": {
                    "target": ist
                },
				"post": {
					"callback": event.data.doEvent,
					"args": []
				}
            }
            return true;
        }
		return false
    }

	function operatorChange(event) {
		var sap = this.sapController, listXid = _listIst(event, sap, event.target.getXid()), fieldInfo = _getFieldInfo(event), hasFocus = _hasFocus(event, sap, event.target.getXid());

		 var value = event.data.filter.record.dataset[event.data.filter.$bind];
		 if (event.data.operator==="none" && value != null && value != "") {
			var field = event.data.filter.record.boundFields[event.data.filter.$bind][0];
			event.data.filter.record.dataset[event.data.filter.$bind]="";
			field.setDataValue(null);
		}
		if((event.data.operator==="none" && (value==undefined || value == null || value == "")) ||  ( (value!==undefined  && value !== null && value !== "")) ){
			var filters = event.target.getQuickSelValues();
			event.result = {
				"$act" : requestActions.getSrvActionEX("SUP_LIST_FILTER"),
				"params" : {
					"target" : listXid
				}
			};
			event.result.post = {
				"exposeReply" : true,
				"callback" : nextQuickSel,
				"args" : [this, fieldInfo ,event.data.filter.$bind]
			};
			if (hasFocus) {
				event.result.params.std = filters;
			} else {
				event.result.params.sudo = [null, filters];
			}
		}else{
			event.data.filter.record.boundFields[event.data.filter.$bind][0].focus();
			return false;
		}
		return true;
	}

    function operatorClick(event){
		var self = this;
		var processed = undefined, sap = this.sapController;
		if (event.target) {
			var listXid = _listIst(event, sap, event.target.getXid());
			if (!_hasFocus(event, sap, event.target.getXid())) {
				event.result = {
					"$act" : requestActions.getSrvAction("SRV_GETFOCUS")
				};
				event.result.params = {
					"target" : listXid
				};
				event.result.post = {
					"callback" : event.data.doEvent,
					"args" : []
				};
				processed = true;
			}
		}
		return processed;
    }
    
    function clickQuickSelField(event){
   		var fieldInfo = _getFieldInfo(event)
		if(fieldInfo.firstFocus){
			event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
		}
    }
    function selectLine(event){
        var processed = undefined, $fusionPageMeta, sap = this.sapController,srvAct, args=[],cuist,checked;
        if (event.target && ($fusionPageMeta = syraUtil.getFusionPageMeta(event.target))) {
        	checked=event.data.nativeEvt.currentTarget.checked
            var actionsMap = getchangeLineActMap($fusionPageMeta.winModel, _isPickList(event), event.data.nativeEvt.currentTarget.checked);
            var focus = _hasFocus(event, sap, event.data.xid);
            if (!focus || sap.getCurrInst().nl != event.data.line || event.data.line==undefined || actionsMap[0]) {
                var listIst = _listIst(event, sap, event.data.xid);
                
				if (focus) {
					srvAct = actionsMap[1];
					if (_isPickList(event)) {
						_setArgs(args,event.data.line,event.target,checked);
					}else{
						listIst.nl = event.data.line;
					}
				}else{
					 srvAct= actionsMap[2];
					 if (_isPickList(event)) {
					 	args.push([]);
					 	_setArgs(args,event.data.line,event.target,checked);
					 }else{
						listIst.nl = event.data.line;
					}
				}
                event.result = {
                    "$act": srvAct,
                    params: {
                        "target": listIst
                    }
                }
				if (_isPickList(event)){
					event.result.params.sudo=args
				}
                processed = true;
            }
        }
        return processed;
    }
    function _setArgs(args,lines,list,checked){
    	var arg=[];
    	if(lines!=undefined){
    		if(Array.isArray(lines)) {
    			args.push(lines);
    		}else{
    			args.push([lines]);
    		}
    		
    	}else{
	    	for( var ii=0;ii<list.dataset.length;ii++){
	    		if((checked && !list.dataset[ii].$isSelected) || (!checked && list.dataset[ii].$isSelected)){
	    			arg.push(list.dataset[ii].$serverIndex+1)
	    		}
	    	}
	    	args.push([arg])
	    }
    }
    function keyDown(event){
        var processed = undefined, fieldInfo = _getFieldInfo(event), doEvt, keycode = event.data.nativeEvt.keyCode, acts = undefined,target;
		var filters, self=this;
		if (isNaN(fieldInfo.nl)) {
			event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
			return false
		}
		if (event.target && !sapUtil.isSpecialKey(keycode)) {
			switch (keycode) {
				case keys["VK_ENTER"]:
					filters = fieldInfo.array.getQuickSelValues();
					event.result = {
						"$act" : requestActions.getSrvActionEX("SUP_LIST_FILTER")
					};
					event.result.params = {
						"target" : fieldInfo.blockIst
					};
					event.result.params.sudo = [filters, null];
					processed = true;
					break;
				case keys["VK_TAB"]:
					if (!event.data.nativeEvt.shiftKey) {
						filters = fieldInfo.array.getQuickSelValues();
						event.result = {
							"$act" : requestActions.getSrvActionEX("SUP_LIST_FILTER")
						};
						event.result.params = {
							"target" : fieldInfo.blockIst
						};
						event.result.params.sudo = [filters, null];
						event.result.post = {
							"exposeReply" : true,
							"callback" : nextQuickSel,
							"args" : [this, fieldInfo, null, true]
						};
						processed = true;
					}	
					break;
				default:
					event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
					processed = false;
			}
			if (processed) {
				if (fieldInfo.data.doEvent) {
					event.result.post = {
						"callback" : fieldInfo.data.doEvent,
						"args" : []
					}
				}
			}
		} 
        return processed
    }
    function nextQuickSel(reply, evtHandlingObj, fieldInfo,$bind, next){
    	var exec=true,field;
    	if(reply) exec=sapUtil.cmpIstBlock(fieldInfo.blockIst,evtHandlingObj.sapController.getTargetIstFromReply(reply));
    	if(exec){
    		if(field = fieldInfo.array.getNextQuickSelField($bind?$bind:fieldInfo.$fieldMeta.$bind,next)){
    			setTimeout(function(){field[0].focus()},10)
    		}
    		
    	}
    }
    function _getFieldInfo(event){
        var nl = _getNoLine(event), fieldInfo = evtTools.getFieldInfo(_getXElement(event.target), nl), $fusionPageMeta = syraUtil.getFusionPageMeta(event.target);
        fieldInfo.data = event.data;
        fieldInfo.nl = nl
        fieldInfo.xid = syraUtil.getMetaFromObject(_getXElement(event.target)).$bind;
		if (fieldInfo.xid.length == 2) {
			fieldInfo.xid += "1";
			fieldInfo.fieldIst.xid=fieldInfo.xid
		}
		fieldInfo.blockIst=sapUtil.makeIst(fieldInfo.fieldIst.win, sapUtil.getBlockInst(fieldInfo.xid), fieldInfo.nl);
        fieldInfo.currIst = syraUtil.getFusionController(event.target)._sapController.getCurrInst();
        fieldInfo.hasFocus = sapUtil.cmpIst(fieldInfo.currIst, fieldInfo.fieldIst);
        fieldInfo.target = event.target;
        fieldInfo.firstFocus = !sapUtil.cmpIstBlock(fieldInfo.currIst, fieldInfo.fieldIst);
        fieldInfo.changeLine = (!fieldInfo.firstFocus && fieldInfo.currIst.nl != fieldInfo.nl);
        fieldInfo.isEdit = (!fieldInfo.firstFocus && !fieldInfo.changeLine && fieldInfo.currIst.edit);
        fieldInfo.array=_getXElementGrid(event.target)
        fieldInfo.isSortedArray=(fieldInfo.array && fieldInfo.array.sortCapability && fieldInfo.array.sortCapability._$orderBy)?true:false
        return fieldInfo;
    }
	function _getNoLine(event){
		if (event.data) {
			if (event.data.line) 
				return event.data.line;
		}
		return 0
	}
    function _getXElement(field){
        var arrayLevel = (field.arrayLevel ? field.arrayLevel : (field.getArticle() ? field.getArticle().arrayLevel : field));
        switch (arrayLevel) {
            case "cell":
                return field;
            case "record":
                return field.getArticle().getArticleParent();
            case "array":
                return field.getArticle();
            default:
                return field
        }
    }
    function _getXElementGrid(field){
        var arrayLevel = (field.arrayLevel ? field.arrayLevel : (field.getArticle() ? field.getArticle().arrayLevel : field));
        switch (arrayLevel) {
            case "cell":
                return field.getArticle().getArticleParent();;
            case "record":
                return ((field.getArticleParent && field.getArticleParent()) || (field.getArticle && field.getArticle().getArticleParent()) || field.articleParent)
            default:
                return field
        }
    }
};
