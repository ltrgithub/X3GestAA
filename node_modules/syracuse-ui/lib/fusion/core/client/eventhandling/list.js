"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion "Left List" event handling classes
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var requestActions = require('../sap/srvactions');
var util = require('syracuse-ui/lib/fusion/tools/util');

var _evtProcList = {};
exports.ListEventHandling = _evtProcList;

function getchangeLineActMap(winModel){
    // Right now, only lists embedded in Selbox and Choose windows have a particular behaviour...
    var winName = winModel ? winModel.getWinName() : null, actSelLine = "SRV_BRWCHANGELINE", actSelLineSup = "SUP_LIST_SELLINE", forceSel = false;
    if (winName && winName === sapUtil.specialWindow.selbox.id || winName === sapUtil.specialWindow.choose.id) {
        forceSel = true;
        actSelLine = "SRV_BRWSELECTLINE";
        actSelLineSup = "SUP_LIST_SELLINEEX";
    }
    return [forceSel, requestActions.getSrvAction(actSelLine), requestActions.getSrvActionEX(actSelLineSup)];
}

function _listIst(event, sapCtrl, listXid){
    var listXid = listXid ? listXid : event.target.$item.$bind;
    var $fusionPageMeta = syraUtil.getFusionPageMeta(event.target);
    return sapUtil.makeIst(syraUtil.getFusionPageMeta(event.target).winModel.getWinId(), listXid, sapCtrl.getCurrInst().nl);
}

function _hasFocus(event, sapCtrl, listXid){
    return sapUtil.cmpIst(sapCtrl.getCurrInst(), _listIst(event, sapCtrl, listXid));
}

function _displayError(sap, error,callBack, notifyComplete){
	if (error==null || (typeof(error) == 'string' && error.length==0)){
		error={
			data:{"msgDefault":"!!No errror message!!"}
		};
	}
	var ourErr=util.isOurAjaxErr(error);
	if (ourErr) {
		var diagnoses = util.makeDiagnosesFromOurAjaxErr(ourErr, sap._session);
	} else {
		var diagnoses = util.getDiagnosesFromAjax(error, sap._session);
	}
	sap._sapException(null, diagnoses, null, null ,callBack, true===notifyComplete);
}

/* "Server page input" event handling class for "Left List" widget */
_evtProcList.sap = function(){
    this.eventListeners = function(){
        return [["wdgt.list.toggle", beforeToggle, true, true], ["wdgt.list.selline", selectLine, true, true], ["wdgt.list.toggled", afterToggle], ["wdgt.list.sortLocal", sortLocal, true, true]];
    };
    
    function beforeToggle(event, listXid){
        var processed = undefined, sap = this.sapController;
        if (event.target && event.data.open) {
            if (!_hasFocus(event, sap, listXid)) {
                event.data.doEvent();
                event.result = {
                    "$act": requestActions.getSrvAction("SRV_GETFOCUS")
                };
                event.result.params = {
                    "target": _listIst(event, sap, listXid)
                };
                /*
                 Bp: Lorsqu'on click sur le tiroir d'une liste gauche pour la premiere fois, les données sont bindees avant que
                 L'objet grind ne soit cree.
                 J'execute donc le doEvent avant d'envoyer l'action getfocus.
                 cela peut peut-etre pose un bp (e voir) si le serveur refuse le posItionnement sur cette liste (Je ne suis pas certain que le cas existe ?)
                 Il y a sans peut-etre mieux e faire.
                 */
                //event.result.post = {"callback": event.data.doEvent, "args": []};
                processed = true;
            }
        }
        return processed;
    }
    
    function afterToggle(event, listXid){
        return undefined;
    }
    
    function sortLocal(event){
        var self = this;
        if (!event.target) return undefined;
        var sap = this.sapController;
        var ist = _listIst(event, sap, event.target.getXid());
        if (!_hasFocus(event, sap, event.target.getXid())) {
            event.result = {
                "$act": requestActions.getSrvAction("SRV_GETFOCUS"),
                "params": {
                    "target": ist
                },
                "post": {
                    "callback": function(evtHandlingObj){
                        self.controller.triggerAdx(event._name, event);
                    },
                    "args": []
                }
            }
            return true;
        }
        else {
            //{ "win": win, "xid": xid, "nl": nl || 0 }
            event.result = {
                "$act": requestActions.svcGridSort,
            	"params": {
                	"target": ist
				},
				"post": {
					"callback": function(succeded, reply, evt, me){
						if (succeded){
							if (! succeded) sap.getLogger.debug({"severety": "error"}, "Error reading grid sort data");
							alert("svcGridSort - "+ succeded?"OK":"KO");
							event.data.doEvent();
							delete event.data.doEvent;
						}else{
							_displayError(me.sapController, reply);
						}
					},
					"args": [event,self]
				}
            };
            return true;
        }
    }
    
    function selectLine(event){
        var processed = undefined, $fusionPageMeta, sap = this.sapController;
        if (event.target && ($fusionPageMeta = syraUtil.getFusionPageMeta(event.target))) {
            var actionsMap = getchangeLineActMap($fusionPageMeta.winModel);
            var focus = _hasFocus(event, sap, event.data.xid);
            if (!focus || sap.getCurrInst().nl != event.data.line || actionsMap[0]) {
                var listIst = _listIst(event, sap, event.data.xid);
                listIst.nl = event.data.line;
                var srvAct = focus ? actionsMap[1] : actionsMap[2];
                event.result = {
					"$act": srvAct,
					params: {
						"target": listIst
					},
					post: {
						"callback": event.data.doEvent,
						"args": []
					}
				}
                processed = true;
            }
        }
        return processed;
    }
};
