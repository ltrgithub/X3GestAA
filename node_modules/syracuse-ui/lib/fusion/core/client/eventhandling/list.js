"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion "Left List" event handling classes
 */
var requestActions = require('../sap/srvactions');
var util = require('syracuse-ui/lib/fusion/tools/util');
var evtTools = require('../eventhandling/common').CommonEventHandlingTools;
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;
var _gridFilter = require('syracuse-ui/lib/field/filter/gridFilter');
var _evtProcList = {};
exports.ListEventHandling = _evtProcList;
/* "Server page input" event handling class for "Left List" widget */
_evtProcList.sap = function() {
	this.eventListeners = function() {
		return [["wdgt.list.toggle", beforeToggle, true, true], ["wdgt.list.selline", selectLine, true, true], ["wdgt.list.toggled", afterToggle], ["wdgt.list.sortLocal", sortLocal, true, true], ["wdgt.list.operatorchange", operatorChange, true, true], ["wdgt.list.clearFilter", clearFilter, true, true], ["wdgt.list.operatorclick", operatorClick, true, true], ["wdgt.list.keydown", keyDown, true, true], ["wdgt.list.applyShortCut", applyShortCut, true, true], ["wdgt.list.click", clickQuickSelField, true, true], ["wdgt.list.picker", clickPicker, true, true], ["wdgt.list.calendarclosed", onDatePickerClose, true, true]];
	};

	function beforeToggle(event, listXid) {
		var processed = undefined,
			listXid = listXid ? listXid : event.target.$item.$bind,
			$fusionPageMeta = syra_fusion.syraUtil.getFusionPageMeta(event.target);
		var listIst = syra_fusion.sapUtil.makeIst(syra_fusion.syraUtil.getFusionPageMeta(event.target).winModel.getWinId(), listXid, this.sapController.getCurrInst().nl);
		if (event.target && event.data.open) {
			if (!syra_fusion.sapUtil.cmpIst(this.sapController.getCurrInst(), listIst)) {
				event.result = {
					"$act": requestActions.getSrvAction("SRV_GETFOCUS")
				};
				event.result.params = {
					"target": listIst
				};
				event.result.post = {
					"callback": event.data.doEvent,
					"args": []
				};
				processed = true;
			}
		}
		return processed;
	}

	function afterToggle(event, listXid) {
		return undefined;
	}

	function sortLocal(event) {
		if (!event.target)
			return undefined;
		var fieldInfo = _getFieldInfo(event);
		if (fieldInfo.firstFocus) {
			event.result = {
				"$act": requestActions.getSrvAction("SRV_GETFOCUS"),
				"params": {
					"target": fieldInfo.blockIst
				},
				"post": {
					"callback": event.data.doEvent,
					"args": []
				}
			};
			return true;
		}
		return false;
	}

	function clearFilter(event) {
		this._triggerFilter(event);
		return true;
	}

	function operatorChange(event) {
		var fieldInfo = _getFieldInfo(event),
			field = event.data.filter,
			value = field.getInputValue();
		if (event.data.operator === "none" && value != null && value != "") {
			field.articleParent.dataset[field.$item.$bind] = "";
			field.setValue(null);
		}
		if ((event.data.operator === "none" && (value == undefined || value == null || value == "")) || ((value !== undefined && value !== null && value !== ""))) {
			this._triggerFilter(event, field.$item.$bind);
		} else {
			field.focus();
			return false;
		}
		return true;
	}

	this._triggerFilter = function(opt, $bind, next) {
		var fieldInfo = _getFieldInfo(opt);
		opt.result = {
			$act: requestActions.getSrvActionEX("SUP_LIST_FILTER"),
			params: {
				target: fieldInfo.blockIst,
				sudo: [_gridFilter.fusion.getQuickSelValues(fieldInfo.array), null]
			}
		};
		if ($bind != undefined || next != undefined) {
			opt.result.post = {
				"exposeReply": true,
				"callback": nextQuickSel,
				"args": [this, fieldInfo, $bind, next]
			};
		}
	};

	function operatorClick(event) {
		var processed = undefined,
			fieldInfo = _getFieldInfo(event);
		if (event.target) {
			if (fieldInfo.firstFocus) {
				event.result = {
					"$act": requestActions.getSrvAction("SRV_GETFOCUS")
				};
				event.result.params = {
					"target": fieldInfo.blockIst
				};
				event.result.post = {
					"callback": event.data.doEvent,
					"args": []
				};
				processed = true;
			}
		}
		return processed;
	}

	function clickQuickSelField(event) {
		//var fieldInfo = _getFieldInfo(event);
		//      if(fieldInfo.firstFocus){
		//
		// event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
		//}    
	}

	function clickPicker(event) {
		var fieldInfo = _getFieldInfo(event);
		switch (event.data.pickerType) {
			case "openTreeNode":
				if (fieldInfo.list.isRecursive) {
					return expendLine(fieldInfo, event);
				} else {
					return false;
				};
				break;
			case "date":
				if (fieldInfo.firstFocus) {
					event.result = {
						"$act": requestActions.getSrvAction("SRV_GETFOCUS")
					};
					event.result.params = {
						"target": fieldInfo.blockIst
					};
					datePickerClick.call(this, event, true, fieldInfo);
				} else {
					datePickerClick.call(this, event, false, fieldInfo);
				}
				return true;
				break;
			default:
				return false;
		}
	}

	function datePickerClick(event, process, fieldInfo) {
		var value = fieldInfo.data.field.getInputValue();
		if (process && !syra_fusion.syraUtil.getPopupDateFromField(event.target)) {
			if (value) {
				event.result.post = {
					"callback": function(evtHandlingObj, eventObj, fieldInfoObj, val) {
						evtTools.checkDate(evtHandlingObj, eventObj, fieldInfoObj, val, fieldInfoObj.fieldIst.fmt, true);
					},
					"args": [this, event, fieldInfo, value]
				};

			} else {
				event.result.post = {
					"callback": function(evtHandlingObj, initialEvent, callerField, fieldInfoObj) {
						var fieldContext = evtHandlingObj.sapController.getCurrInst();
						evtTools.openDatePicker(true, null, evtHandlingObj, initialEvent, callerField, fieldInfoObj, true);
					},
					"args": [this, event, event.target, fieldInfo]
				};
			}
		} else
		if (!syra_fusion.syraUtil.getPopupDateFromField(event.target)) {
			var fieldContext = this.sapController.getCurrInst();
			if (value) {
				evtTools.checkDate(this, event, fieldInfo, value, fieldInfo.fieldIst.fmt, true);
				process = true;
			} else {
				var self = this;
				setTimeout(function() {
					evtTools.openDatePicker(true, null, self, event, event.target, fieldInfo, true);
				}, 10);
				process = true;
			}
		}
		return process;
	}

	function onDatePickerClose(event) {
		var processed = undefined,
			fieldInfo;
		if (event.target && (fieldInfo = _getFieldInfo(event)) && !fieldInfo.firstFocus) {
			evtTools.closeDatePicker(this, event, fieldInfo, fieldInfo.fieldIst.fmt);

			processed = true;
		}
		return processed;
	}

	function selectLine(event) {
		var fieldInfo = _getFieldInfo(event);
		return (fieldInfo.list.isPick) ? _selectLinePicking(event, fieldInfo) : (fieldInfo.list.isHerarchy ? _selectLineHierarchy(event, fieldInfo) : _selectLineList(event, fieldInfo));
	}

	function expendLine(fieldInfo, event) {
		var actionsMap = [],
			args = [];
		event.result = {
			$act: null,
			params: {
				target: null
			}
		};
		if (fieldInfo.isLeaf && fieldInfo.$key) {
			actionsMap.push(requestActions.getSrvAction("SRV_TREEEXPANDLINE"));
			actionsMap.push(requestActions.getSrvActionEX("SUP_LIST_TREEEXPANDLINE")); //1044 + 1062
			if (fieldInfo.firstFocus) {
				args.push([]);
				_setArgs(args, fieldInfo.$key, event.target);
				event.result.$act = actionsMap[1];
				event.result.params.sudo = args;
			} else {
				event.result.$act = actionsMap[0];
				event.result.params.std = [fieldInfo.$key];
			}
			fieldInfo.blockIst.nl = 0;
			event.result.params.target = fieldInfo.blockIst;
			if (fieldInfo.data.doEvent) {
				event.result.post = {
					"callback": fieldInfo.data.doEvent,
					"args": []
				};
			}
			return true;
		}
		return false;
	}

	function _selectLinePicking(event, fieldInfo) {
		var checked = event.data.isSelected,
			srvAct, args = [];
		var newData, leafs = [],
			branchs = [],
			keys = [];
		if (fieldInfo.isLeaf) {
			_setArgs(args, fieldInfo.$key, event.target, checked);
		} else {
			// TODO : Framework send leaf list
			_selectLinesPick(leafs, branchs, keys, syra_item.findRecordByServerIndex(fieldInfo.array, event.data.recTarget.dataRecord.$serverIndex), checked, fieldInfo);
			if (leafs.length > 0 || branchs.length > 0) {
				newData = {};
				newData.$isPartialDelta = true;
				newData[fieldInfo.blockIst.xid] = branchs.concat(leafs);
				event.target.page.applyChange(newData);
			}
			_setArgs(args, [keys], event.target, checked);
		};
		if (fieldInfo.firstFocus) {
			srvAct = checked ? "SUP_LIST_PICKING_FOCUS_SELECT" : "SUP_LIST_PICKING_FOCUS_UNSELECT";
			args.unshift([]);
		} else {
			srvAct = checked ? "SUP_LIST_PICKING_SELECT" : "SUP_LIST_PICKING_UNSELECT";
		}
		fieldInfo.blockIst.nl = 0;
		event.result = {
			"$act": requestActions.getSrvActionEX(srvAct),
			params: {
				"target": fieldInfo.blockIst
			}
		};
		event.result.params.sudo = args;
		return true;
	}

	function _selectLinesPick(leafs, branchs, keys, record, checked, fieldInfo) {
		if (record) {
			if (record.dataset && ((record.dataset.$isSelected && !checked) || (!record.dataset.$isSelected && checked))) {
				if (!record.treeNode || record.treeNode.children.length == 0) {
					leafs.push({
						$uuid: record.$uuid,
						$isSelected: checked,
						$index: record.$serverIndex //$serverIndex ?
					});
					keys.push(record.dataset.$key);
				} else {
					branchs.push({
						$uuid: record.$uuid,
						$isSelected: checked,
						$index: record.$serverIndex //$serverIndex ?
					});
				}
			}
			if (record.treeNode) {
				for (var i = 0; i < record.treeNode.children.length; i++) {
					_selectLinesPick(leafs, branchs, keys, record.list.recordsMap[record.treeNode.children[i]], checked, fieldInfo);
				}
			}
		}
	}

	function _selectLineHierarchy(event, fieldInfo) {
		var checked, actionsMap = [],
			args = [];
		event.result = {
			$act: null,
			params: {
				target: null
			}
		};
		if (fieldInfo.isLeaf) {
			if (fieldInfo.list.isRecursive) {
				actionsMap.push(requestActions.getSrvAction("SRV_TREESELECTLINE"));
				actionsMap.push(requestActions.getSrvActionEX("SUP_LIST_TREESELECTLINE")); //1044 + 1061
			} else {
				actionsMap.push(requestActions.getSrvAction("SRV_TREECHANGELINE"));
				actionsMap.push(requestActions.getSrvActionEX("SUP_LIST_TREECHANGELINE")); //1044 + 1060
			}
			if (fieldInfo.firstFocus) {
				args.push([]);
				_setArgs(args, fieldInfo.$key, event.target, checked);
				event.result.$act = actionsMap[1];
				event.result.params.sudo = args;
			} else {
				event.result.$act = actionsMap[0];
				event.result.params.std = [fieldInfo.$key];
			}
			fieldInfo.blockIst.nl = 0;
			event.result.params.target = fieldInfo.blockIst;
			return true;
		} else {
			return false;
		}
	}

	function _selectLineList(event, fieldInfo) {
		var checked, actionsMap = [],
			args = [];
		event.result = {
			$act: null,
			params: {
				target: null
			}
		};
		actionsMap = fieldInfo.list.isSelbox || fieldInfo.list.isChoose ? ["SRV_BRWSELECTLINE", "SUP_LIST_SELLINEEX"] : ["SRV_BRWCHANGELINE", "SUP_LIST_SELLINE"];
		if (fieldInfo.firstFocus) {
			args.push([]);
			_setArgs(args, fieldInfo.$key, event.target, checked);
			event.result.$act = requestActions.getSrvActionEX(actionsMap[1]);
			event.result.params.sudo = args;
		} else {
			event.result.$act = requestActions.getSrvAction(actionsMap[0]);
			event.result.params.std = [fieldInfo.$key];
		}
		fieldInfo.blockIst.nl = 0;
		event.result.params.target = fieldInfo.blockIst;
		return true;
	}

	function _setArgs(args, key, list, checked) {
		var arg = [];
		if (key != undefined && key != null) {
			if (Array.isArray(key)) {
				args.push(key);
			} else {
				args.push([key]);
			}
		} else {
			for (var ii = 0; ii < list.dataset.length; ii++) {
				if ((checked && !list.dataset[ii].$isSelected) || (!checked && list.dataset[ii].$isSelected)) {
					arg.push(list.dataset[ii].$key);
				}
			}
			args.push([arg]);
		}
	}

	function applyShortCut(opt) {
		if (opt.data.shortcuts.enter) {
			this._triggerFilter(opt);
			return true;
		}
		if (opt.data.shortcuts.tab) {
			this._triggerFilter(opt, null, !opt.data.shortcuts.shift);
			return true;
		}
	}

	function keyDown(event) {
		return;
		var processed = undefined,
			fieldInfo = _getFieldInfo(event),
			doEvt, keycode = event.data.nativeEvt.keyCode,
			acts = undefined,
			target;
		var filters;
		if (isNaN(fieldInfo.nl)) {
			event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
			return false;
		}
		var shortcuts = (event.data.nativeOpt) ? (event.data.nativeOpt.shortcuts || {}) : {};
		if (shortcuts.up || shortcuts.down) {
			return true; // focus is on quisk sel field shortcut applied by leftList
		}
		if (event.target && !syra_fusion.sapUtil.isSpecialKey(keycode)) {
			// TODO : check if list has focus (discard line) to send "SRV_BRWRAPIDESEL" rather than "SUP_LIST_FILTER"
			// No : Because when you tab or enter on filter you want to stay on filter, not to set focus on an other field !
			switch (keycode) {
				case keys["VK_ENTER"]:

					break;
				case keys["VK_TAB"]:

					break;
				default:
					event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
					processed = false;
			}
			if (processed) {
				if (fieldInfo.data.doEvent) {
					event.result.post = {
						"callback": fieldInfo.data.doEvent,
						"args": []
					};
				}
			}
		}
		return processed;
	}

	function nextQuickSel(reply, evtHandlingObj, fieldInfo, $bind, next) {
		var exec = true,
			field;
		if (reply)
			exec = syra_fusion.sapUtil.cmpIstBlock(fieldInfo.blockIst, evtHandlingObj.sapController.getTargetIstFromReply(reply));
		if (exec && !fieldInfo.array.disposed) {
			if (field = _gridFilter.fusion.getNextQuickSelField(fieldInfo.array, $bind ? $bind : fieldInfo.$fieldMeta.$bind, next)) {
				setTimeout(function() {
					field[0].focus();
				}, 10);
			}
		}
	}

	function _getFieldInfo(event) {
		var nl = (event.data && event.data.line) ? event.data.line : 0,
			fieldInfo = evtTools.getFieldInfo(syra_fusion.syraUtil.getXElement(event.target), nl),
			$fusionPageMeta = syra_fusion.syraUtil.getFusionPageMeta(event.target),
			winName, record, treeNode = null;
		fieldInfo.isLeaf = true;
		fieldInfo.data = event.data;
		fieldInfo.nl = nl;
		fieldInfo.xid = syra_fusion.syraUtil.getMetaFromObject(syra_fusion.syraUtil.getXElement(event.target)).$bind;
		if (fieldInfo.xid.length == 2) {
			fieldInfo.xid += "1";
			fieldInfo.fieldIst.xid = fieldInfo.xid;
		}
		fieldInfo.blockIst = syra_fusion.sapUtil.makeIst(fieldInfo.fieldIst.win, syra_fusion.sapUtil.getBlockInst(fieldInfo.xid), fieldInfo.nl);
		if (!fieldInfo.fieldIst.fmt) {
			fieldInfo.fieldIst.fmt = fieldInfo.winModel._getFmtColl(fieldInfo.xid, fieldInfo.blockIst.xid, (fieldInfo.nl ? fieldInfo.nl : 1));
		}
		fieldInfo.currIst = syra_fusion.syraUtil.getFusionController(event.target)._sapController.getCurrInst();

		fieldInfo.hasFocus = syra_fusion.sapUtil.cmpIst(fieldInfo.currIst, fieldInfo.fieldIst);
		fieldInfo.target = event.target;
		fieldInfo.firstFocus = !syra_fusion.sapUtil.cmpIstBlock(fieldInfo.currIst, fieldInfo.fieldIst);
		fieldInfo.changeLine = (!fieldInfo.firstFocus && fieldInfo.currIst.nl != fieldInfo.nl);
		fieldInfo.isEdit = (!fieldInfo.firstFocus && !fieldInfo.changeLine && fieldInfo.currIst.edit);
		fieldInfo.array = syra_fusion.syraUtil.getXElementGrid(event.target);
		fieldInfo.isSortedArray = (fieldInfo.array && fieldInfo.array) ? true : false;
		fieldInfo.list = {
			isSelbox: false,
			isChoose: false
		};
		fieldInfo.list.isHerarchy = (event.target.$item && event.target.$item.$isNavigationList && fieldInfo.array && fieldInfo.array.treeDecorator) ? true : false;
		fieldInfo.list.isPick = (event.target.$item && event.target.$item.$isNavigationList && event.target.$item.$selectMode === "multi") ? true : false;
		fieldInfo.list.isRecursive = fieldInfo.$fieldMeta.$isNodeLazyLoad;
		if (event.target.$item && !event.target.$item.$isNavigationList) {
			winName = $fusionPageMeta.winModel ? $fusionPageMeta.winModel.getWinName() : null;
			fieldInfo.list.isSelbox = (winName && winName === syra_fusion.sapUtil.specialWindow.selbox.id);
			fieldInfo.list.isChoose = (winName && winName === syra_fusion.sapUtil.specialWindow.choose.id);
		}
		if (fieldInfo.list.isRecursive) {
			fieldInfo.$key = (event.data.recTarget) ? event.data.recTarget.dataRecord.$key : event.data.field.dataset.$key;
			fieldInfo.isLeaf = (event.data.field && (treeNode = event.data.field.treeNode) && treeNode.children && treeNode.children.length > 0) ? false : true;
		} else
		if (fieldInfo.list.isHerarchy) {
			record = syra_item.findRecordByServerIndex(fieldInfo.array, event.data.recTarget.dataRecord.$serverIndex);
			if (record && record.treeNode && record.treeNode.children) {
				fieldInfo.isLeaf = (record.treeNode.children.length == 0);
			}
			fieldInfo.$key = event.data.recTarget.dataRecord.$key;
		} else {
			record = syra_item.findRecordByServerIndex(fieldInfo.array, nl - 1);
			if (record)
				fieldInfo.$key = record.dataset.$key;
		}
		return fieldInfo;
	}
};