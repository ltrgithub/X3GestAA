"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion "Left List" event handling classes
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var requestActions = require('../sap/srvactions');
var util = require('syracuse-ui/lib/fusion/tools/util');
var evtTools = require('../eventhandling/common').CommonEventHandlingTools;
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;
var svcFmt = require('syracuse-ui/lib/fusion/core/tools/format').svcFormatter;

var _evtProcList = {};
exports.ListEventHandling = _evtProcList;
/* "Server page input" event handling class for "Left List" widget */
_evtProcList.sap = function() {
	this.eventListeners = function() {
		return [["wdgt.list.toggle", beforeToggle, true, true], ["wdgt.list.selline", selectLine, true, true], ["wdgt.list.toggled", afterToggle], ["wdgt.list.sortLocal", sortLocal, true, true], ["wdgt.list.operatorchange", operatorChange, true, true], ["wdgt.list.operatorclick", operatorClick, true, true], ["wdgt.list.keydown", keyDown, true, true], ["wdgt.list.click", clickQuickSelField, true, true], ["wdgt.list.picker", clickPicker, true, true], ["wdgt.list.calendarclosed", onDatePickerClose, true, true]];
	};

	function beforeToggle(event, listXid) {
		var processed = undefined,
			listXid = listXid ? listXid : event.target.$item.$bind,
			$fusionPageMeta = syraUtil.getFusionPageMeta(event.target);
		var listIst = sapUtil.makeIst(syraUtil.getFusionPageMeta(event.target).winModel.getWinId(), listXid, this.sapController.getCurrInst().nl);
		if (event.target && event.data.open) {
			if (!sapUtil.cmpIst(this.sapController.getCurrInst(), listIst)) {
				event.result = {
					"$act": requestActions.getSrvAction("SRV_GETFOCUS")
				};
				event.result.params = {
					"target": listIst
				};
				event.result.post = {
					"callback": event.data.doEvent,
					"args": []
				};
				processed = true;
			}
		}
		return processed;
	}

	function afterToggle(event, listXid) {
		return undefined;
	}

	function sortLocal(event) {
		if (!event.target)
			return undefined;
		var fieldInfo = _getFieldInfo(event);
		if (fieldInfo.firstFocus) {
			event.result = {
				"$act": requestActions.getSrvAction("SRV_GETFOCUS"),
				"params": {
					"target": fieldInfo.blockIst
				},
				"post": {
					"callback": event.data.doEvent,
					"args": []
				}
			};
			return true;
		}
		return false;
	}

	function operatorChange(event) {
		var fieldInfo = _getFieldInfo(event),
			field = event.data.filter.record.boundFields[event.data.filter.$bind][0],
			value = field.getInputValue();
		if (event.data.operator === "none" && value != null && value != "") {
			event.data.filter.record.dataset[event.data.filter.$bind] = "";
			field.setDataValue(null);
		}
		if ((event.data.operator === "none" && (value == undefined || value == null || value == "")) || ((value !== undefined && value !== null && value !== ""))) {
			var filters = event.target.getQuickSelValues();
			event.result = {
				"$act": requestActions.getSrvActionEX("SUP_LIST_FILTER"),
				"params": {
					"target": fieldInfo.blockIst
				}
			};
			event.result.post = {
				"exposeReply": true,
				"callback": nextQuickSel,
				"args": [this, fieldInfo, event.data.filter.$bind]
			};
			event.result.params.sudo = [filters, null];
		} else {
			event.data.filter.record.boundFields[event.data.filter.$bind][0].focus();
			return false;
		}
		return true;
	}

	function operatorClick(event) {
		var processed = undefined,
			fieldInfo = _getFieldInfo(event);
		if (event.target) {
			if (fieldInfo.firstFocus) {
				event.result = {
					"$act": requestActions.getSrvAction("SRV_GETFOCUS")
				};
				event.result.params = {
					"target": fieldInfo.blockIst
				};
				event.result.post = {
					"callback": event.data.doEvent,
					"args": []
				};
				processed = true;
			}
		}
		return processed;
	}

	function clickQuickSelField(event) {
		/*var fieldInfo = _getFieldInfo(event);
        if(fieldInfo.firstFocus){    
            event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
         }*/
	}

	function clickPicker(event) {
		var fieldInfo = _getFieldInfo(event);
		switch (event.data.pickerType) {
			case "openTreeNode":
				if (fieldInfo.list.isRecursive) {
					return expendLine(fieldInfo, event);
				} else {
					return false;
				};
				break;
			case "date":
				if (fieldInfo.firstFocus) {
					event.result = {
						"$act": requestActions.getSrvAction("SRV_GETFOCUS")
					};
					event.result.params = {
						"target": fieldInfo.blockIst
					};
					datePickerClick.call(this, event, true, fieldInfo);
				} else {
					datePickerClick.call(this, event, false, fieldInfo);
				}
				return true;
				break;
			default:
				return false;
		}
	}

	function datePickerClick(event, process, fieldInfo) {
		var value = fieldInfo.data.field.getInputValue();
		if (process && !syraUtil.getPopupDateFromField(event.target)) {
			if (value) {
				event.result.post = {
					"callback": function(evtHandlingObj, eventObj, fieldInfoObj, val) {
						checkDate(evtHandlingObj, eventObj, fieldInfoObj, val);
					},
					"args": [this, event, fieldInfo, value]
				};

			} else {
				event.result.post = {
					"callback": function(evtHandlingObj, initialEvent, callerField, fieldInfoObj) {
						var fieldContext = evtHandlingObj.sapController.getCurrInst();
						openDatePicker(true, null, evtHandlingObj, initialEvent, callerField, fieldInfoObj);
					},
					"args": [this, event, event.target, fieldInfo]
				};
			}
		} else
		if (!syraUtil.getPopupDateFromField(event.target)) {
			var fieldContext = this.sapController.getCurrInst();
			if (value) {
				checkDate(this, event, fieldInfo, value);
				process = true;
			} else {
				var self = this;
				setTimeout(function() {
					openDatePicker(true, null, self, event, event.target, fieldInfo);
				}, 10);
				process = true;
			}
		}
		return process;
	};

	function checkDate(evtHandlingObj, event, fieldInfo, value) {
		event.result = {
			"$act": requestActions.svcFormat
		};
		event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.toRaw, value, fieldInfo.fieldIst.fmt, syraUtil.getFieldType(event.target), null);
		event.result.post = {
			"callback": openDatePicker,
			"args": [evtHandlingObj, event, event.target, fieldInfo]
		};
	}

	function openDatePicker(succeeded, result, evtHandlingObj, initialEvent, field, callerFieldInfo) {
		var session, messErr = null;
		if (!syraUtil.getPopupDateFromField(field)) {
			if (succeeded) {
				initialEvent.data.doEvent((result) ? {
					"internalValue": parseInt(svcFmt.getReplyResult(result), 10)
				} : null);
				callerFieldInfo.winModel.setCurrCtxPopup(field);
			} else {
				session = (evtHandlingObj.sapController.getSiteController()).getSession();
				messErr = [session.getlabel("error", "22", "Date entered is invalid; calendar can not be opened")];
			}
			callerFieldInfo.winModel.setFieldError(field, messErr, succeeded);
		}
		delete initialEvent.data.doEvent;
	}

	function onDatePickerClose(event) {
		var processed = undefined,
			fieldInfo;
		if (event.target && (fieldInfo = _getFieldInfo(event)) && !fieldInfo.firstFocus) {
			event.result = {
				"$act": requestActions.svcFormat
			};
			event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.rawToEdit, event.data.internalValue, fieldInfo.fieldIst.fmt, fieldInfo.type, fieldInfo.currIst);
			event.result.post = {
				"callback": function(succeeded, reply, evtHandlingObj, initialEvent) {
					if (!fieldInfo.firstFocus) {
						syraUtil.getFusionPageMeta(initialEvent.target).winModel.setCurrCtxPopup(null);
						initialEvent.data.doStatements({
							"value": svcFmt.getReplyResult(reply)
						});
						delete initialEvent.doStatements;
					}
				},
				"args": [this, event, event.target, fieldInfo]
			};
			processed = true;
		}
		return processed;
	};

	function selectLine(event) {
		var fieldInfo = _getFieldInfo(event);
		return (fieldInfo.list.isPick) ? _selectLinePicking(event, fieldInfo) : (fieldInfo.list.isHerarchy ? _selectLineHierarchy(event, fieldInfo) : _selectLineList(event, fieldInfo));
	};

	function expendLine(fieldInfo, event) {
		var actionsMap = [],
			args = [];
		event.result = {
			$act: null,
			params: {
				target: null
			}
		};
		if (fieldInfo.isLeaf && fieldInfo.$key) {
			actionsMap.push(requestActions.getSrvAction("SRV_TREEEXPANDLINE"));
			actionsMap.push(requestActions.getSrvActionEX("SUP_LIST_TREEEXPANDLINE")); //1044 + 1062
			if (fieldInfo.firstFocus) {
				args.push([]);
				_setArgs(args, fieldInfo.$key, event.target);
				event.result.$act = actionsMap[1];
				event.result.params.sudo = args;
			} else {
				event.result.$act = actionsMap[0];
				event.result.params.std = [fieldInfo.$key];
			}
			fieldInfo.blockIst.nl = 0;
			event.result.params.target = fieldInfo.blockIst;
			if (fieldInfo.data.doEvent) {
				event.result.post = {
					"callback": fieldInfo.data.doEvent,
					"args": []
				};
			}
			return true;
		}
		return false;
	}

	function _selectLinePicking(event, fieldInfo) {
		var checked = event.data.isSelected,
			srvAct, args = [];
		var newData, leafs = [],
			branchs = [],
			keys = [];
		if (fieldInfo.isLeaf) {
			_setArgs(args, fieldInfo.$key, event.target, checked);
		} else {
			// TODO : Framework send leaf list
			_selectLinesPick(leafs, branchs, keys, fieldInfo.array.findRecordByServerIndex(event.data.recTarget.dataRecord.$serverIndex), checked, fieldInfo);
			if (leafs.length > 0 || branchs.length > 0) {
				newData = {};
				newData.$isPartialDelta = true;
				newData[fieldInfo.blockIst.xid] = branchs.concat(leafs);
				event.target.page.applyChange(newData);
			}
			_setArgs(args, [keys], event.target, checked);
		};
		if (fieldInfo.firstFocus) {
			srvAct = checked ? "SUP_LIST_PICKING_FOCUS_SELECT" : "SUP_LIST_PICKING_FOCUS_UNSELECT";
			args.unshift([]);
		} else {
			srvAct = checked ? "SUP_LIST_PICKING_SELECT" : "SUP_LIST_PICKING_UNSELECT";
		}
		fieldInfo.blockIst.nl = 0;
		event.result = {
			"$act": requestActions.getSrvActionEX(srvAct),
			params: {
				"target": fieldInfo.blockIst
			}
		};
		event.result.params.sudo = args;
		return true;
	}

	function _selectLinesPick(leafs, branchs, keys, record, checked, fieldInfo) {
		var treeNode = null;
		if (record) {
			if (record.dataset && ((record.dataset.$isSelected && !checked) || (!record.dataset.$isSelected && checked))) {
				treeNode = record.getTreeNode();
				if (!treeNode || treeNode.children.length == 0) {
					leafs.push({
						$uuid: record.$uuid,
						$isSelected: checked,
						$index: record.$serverIndex //$serverIndex ?
					});
					keys.push(record.dataset.$key);
				} else {
					branchs.push({
						$uuid: record.$uuid,
						$isSelected: checked,
						$index: record.$serverIndex //$serverIndex ?
					});
				}
			}
			treeNode = record.getTreeNode();
			if (treeNode) {
				for (var i = 0; i < treeNode.children.length; i++) {
					_selectLinesPick(leafs, branchs, keys, fieldInfo.array.findRecordByServerIndex(treeNode.children[i].$uuid), checked, fieldInfo);
				}
			}
		}
	}

	function _selectLineHierarchy(event, fieldInfo) {
		var checked, actionsMap = [],
			args = [];
		event.result = {
			$act: null,
			params: {
				target: null
			}
		};
		if (fieldInfo.isLeaf) {
			if (fieldInfo.list.isRecursive) {
				actionsMap.push(requestActions.getSrvAction("SRV_TREESELECTLINE"));
				actionsMap.push(requestActions.getSrvActionEX("SUP_LIST_TREESELECTLINE")); //1044 + 1061		
			} else {
				actionsMap.push(requestActions.getSrvAction("SRV_TREECHANGELINE"));
				actionsMap.push(requestActions.getSrvActionEX("SUP_LIST_TREECHANGELINE")); //1044 + 1060			
			}
			if (fieldInfo.firstFocus) {
				args.push([]);
				_setArgs(args, fieldInfo.$key, event.target, checked);
				event.result.$act = actionsMap[1];
				event.result.params.sudo = args;
			} else {
				event.result.$act = actionsMap[0];
				event.result.params.std = [fieldInfo.$key];
			}
			fieldInfo.blockIst.nl = 0;
			event.result.params.target = fieldInfo.blockIst;
			return true;
		} else {
			return false;
		}
	}

	function _selectLineList(event, fieldInfo) {
		var checked, actionsMap = [],
			args = [];
		event.result = {
			$act: null,
			params: {
				target: null
			}
		};
		actionsMap = fieldInfo.list.isSelbox || fieldInfo.list.isChoose ? ["SRV_BRWSELECTLINE", "SUP_LIST_SELLINEEX"] : ["SRV_BRWCHANGELINE", "SUP_LIST_SELLINE"];
		if (fieldInfo.firstFocus) {
			args.push([]);
			_setArgs(args, fieldInfo.$key, event.target, checked);
			event.result.$act = requestActions.getSrvActionEX(actionsMap[1]);
			event.result.params.sudo = args;
		} else {
			event.result.$act = requestActions.getSrvAction(actionsMap[0]);
			event.result.params.std = [fieldInfo.$key];
		}
		fieldInfo.blockIst.nl = 0;
		event.result.params.target = fieldInfo.blockIst;
		return true;
	}

	function _setArgs(args, key, list, checked) {
		var arg = [];
		if (key != undefined && key != null) {
			if (Array.isArray(key)) {
				args.push(key);
			} else {
				args.push([key]);
			}
		} else {
			for (var ii = 0; ii < list.dataset.length; ii++) {
				if ((checked && !list.dataset[ii].$isSelected) || (!checked && list.dataset[ii].$isSelected)) {
					arg.push(list.dataset[ii].$key);
				}
			}
			args.push([arg]);
		}
	}

	function keyDown(event) {
		var processed = undefined,
			fieldInfo = _getFieldInfo(event),
			doEvt, keycode = event.data.nativeEvt.keyCode,
			acts = undefined,
			target;
		var filters;
		if (isNaN(fieldInfo.nl)) {
			event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
			return false;
		}
		var shortcuts = (event.data.nativeOpt) ? (event.data.nativeOpt.shortcuts || {}) : {};
		if (shortcuts.up || shortcuts.down) {
			return true; // focus is on quisk sel field shortcut applied by leftList
		}
		if (event.target && !sapUtil.isSpecialKey(keycode)) {
			// TODO : check if list has focus (discard line) to send "SRV_BRWRAPIDESEL" rather than "SUP_LIST_FILTER"
			// No : Because when you tab or enter on filter you want to stay on filter, not to set focus on an other field !
			switch (keycode) {
				case keys["VK_ENTER"]:
					filters = fieldInfo.array.getQuickSelValues();
					event.result = {
						"$act": requestActions.getSrvActionEX("SUP_LIST_FILTER")
					};
					event.result.params = {
						"target": fieldInfo.blockIst
					};
					event.result.params.sudo = [filters, null];
					processed = true;
					break;
				case keys["VK_TAB"]:
					if (!event.data.nativeEvt.shiftKey) {
						filters = fieldInfo.array.getQuickSelValues();
						event.result = {
							"$act": requestActions.getSrvActionEX("SUP_LIST_FILTER")
						};
						event.result.params = {
							"target": fieldInfo.blockIst
						};
						event.result.params.sudo = [filters, null];
						event.result.post = {
							"exposeReply": true,
							"callback": nextQuickSel,
							"args": [this, fieldInfo, null, true]
						};
						processed = true;
					}
					break;
				default:
					event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
					processed = false;
			}
			if (processed) {
				if (fieldInfo.data.doEvent) {
					event.result.post = {
						"callback": fieldInfo.data.doEvent,
						"args": []
					};
				}
			}
		}
		return processed;
	}

	function nextQuickSel(reply, evtHandlingObj, fieldInfo, $bind, next) {
		var exec = true,
			field;
		if (reply)
			exec = sapUtil.cmpIstBlock(fieldInfo.blockIst, evtHandlingObj.sapController.getTargetIstFromReply(reply));
		if (exec) {
			if (field = fieldInfo.array.getNextQuickSelField($bind ? $bind : fieldInfo.$fieldMeta.$bind, next)) {
				setTimeout(function() {
					field[0].focus();
				}, 10);
			}
		}
	}

	function _getFieldInfo(event) {
		var nl = (event.data && event.data.line) ? event.data.line : 0,
			fieldInfo = evtTools.getFieldInfo(_getXElement(event.target), nl),
			$fusionPageMeta = syraUtil.getFusionPageMeta(event.target),
			winName, record, treeNode = null;
		fieldInfo.isLeaf = true;
		fieldInfo.data = event.data;
		fieldInfo.nl = nl;
		fieldInfo.xid = syraUtil.getMetaFromObject(_getXElement(event.target)).$bind;
		if (fieldInfo.xid.length == 2) {
			fieldInfo.xid += "1";
			fieldInfo.fieldIst.xid = fieldInfo.xid;
		}
		fieldInfo.blockIst = sapUtil.makeIst(fieldInfo.fieldIst.win, sapUtil.getBlockInst(fieldInfo.xid), fieldInfo.nl);
		if (!fieldInfo.fieldIst.fmt) {
			fieldInfo.fieldIst.fmt = fieldInfo.winModel._getFmtColl(fieldInfo.xid, fieldInfo.blockIst.xid, (fieldInfo.nl ? fieldInfo.nl : 1));
		}
		fieldInfo.currIst = syraUtil.getFusionController(event.target)._sapController.getCurrInst();

		fieldInfo.hasFocus = sapUtil.cmpIst(fieldInfo.currIst, fieldInfo.fieldIst);
		fieldInfo.target = event.target;
		fieldInfo.firstFocus = !sapUtil.cmpIstBlock(fieldInfo.currIst, fieldInfo.fieldIst);
		fieldInfo.changeLine = (!fieldInfo.firstFocus && fieldInfo.currIst.nl != fieldInfo.nl);
		fieldInfo.isEdit = (!fieldInfo.firstFocus && !fieldInfo.changeLine && fieldInfo.currIst.edit);
		fieldInfo.array = _getXElementGrid(event.target);
		fieldInfo.isSortedArray = (fieldInfo.array && fieldInfo.array.sortCapability && fieldInfo.array.sortCapability._$orderBy) ? true : false;
		fieldInfo.list = {
			isSelbox: false,
			isChoose: false
		};
		fieldInfo.list.isHerarchy = (event.target.$item && event.target.$item.$isNavigationList && fieldInfo.array && fieldInfo.array.treeDecorator) ? true : false;
		fieldInfo.list.isPick = (event.target.$item && event.target.$item.$isNavigationList && event.target.$item.$selectMode === "multi") ? true : false;
		fieldInfo.list.isRecursive = fieldInfo.$fieldMeta.$isNodeLazyLoad;
		if (event.target.$item && !event.target.$item.$isNavigationList) {
			winName = $fusionPageMeta.winModel ? $fusionPageMeta.winModel.getWinName() : null;
			fieldInfo.list.isSelbox = (winName && winName === sapUtil.specialWindow.selbox.id);
			fieldInfo.list.isChoose = (winName && winName === sapUtil.specialWindow.choose.id);
		}
		if (fieldInfo.list.isRecursive) {
			fieldInfo.$key = (event.data.recTarget) ? event.data.recTarget.dataRecord.$key : event.data.field.dataset.$key;
			fieldInfo.isLeaf = (event.data.field && (treeNode = event.data.field.getTreeNode()) && treeNode.children && treeNode.children.length > 0) ? false : true;
		} else
		if (fieldInfo.list.isHerarchy) {
			record = fieldInfo.array.findRecordByServerIndex(event.data.recTarget.dataRecord.$serverIndex);
			if (record && (treeNode = record.getTreeNode()) && treeNode.children) {
				fieldInfo.isLeaf = (treeNode.children.length == 0);
			}
			fieldInfo.$key = event.data.recTarget.dataRecord.$key;
		} else {
			record = fieldInfo.array.findRecordByServerIndex(nl - 1);
			if (record)
				fieldInfo.$key = record.dataset.$key;
		}
		return fieldInfo;
	}

	function _getXElement(field) {
		var arrayLevel = (field.arrayLevel ? field.arrayLevel : (field.getArticle() ? field.getArticle().arrayLevel : field));
		switch (arrayLevel) {
			case "cell":
				return field;
			case "record":
				return field.getArticle().articleParent;
			case "array":
				return field.getArticle();
			default:
				return field;
		}
	}

	function _getXElementGrid(field) {
		var arrayLevel = (field.arrayLevel ? field.arrayLevel : (field.getArticle() ? field.getArticle().arrayLevel : field));
		switch (arrayLevel) {
			case "cell":
				return field.getArticle().articleParent;
			case "record":
				return field.list || field.articleParent.list;
			default:
				return field;
		}
	}
};