"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Window event handling classes
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var requestActions = require('../sap/srvactions');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;

var _evtProcWindow = {};
exports.WindowEventHandling = _evtProcWindow;

/* "Server page input" event handling class for "Window" */
_evtProcWindow.sap = function(){
    this.eventListeners = function(){
        return [["wdgt.win.keydown", onKeyDown, true, true], ["wdgt.win.dblclick", onDblClick, true, true], ["wdgt.win.click", onClick, true, true], ["wdgt.field.keydown", onFieldKeyDown, true, true], ["wdgt.field.click", onFieldClick, true, true]];
    };
    
    function onKeyDown(event){
        var processed = undefined, $$field = $(event.data.nativeEvt.target), $$cont;
        if (event.target) {
            switch (event.data.nativeEvt.keyCode) {
                case keys["VK_TAB"]:
                    if (!($$cont = $$field.closest("." + syraUtil.pageSectionK.bar)) || $$cont.length == 0 || event.data.nativeEvt.target.tagName.toLowerCase() != "input") {
                        // TODO : le if ci-dessus permet de gérer les input dans liste gauche... mais pas bon pour autant... à reprendre!
                        event.result = {
                            "$act": requestActions.getSrvAction(event.data.nativeEvt.shiftKey ? "SRV_CHAMP_PRECEDENT" : "SRV_CHAMP_SUIVANT")
                        };
                        processed = true;
                    }
                    break;
                    
                case keys["VK_ENTER"]:
                    if (event.target && event.target.$item.$bind.charAt(0) == "b") {
                        var grid = event.target.boxParent.boxParent;
                        var currIst = this.sapController.getCurrInst();
                        var listIst = grid.getIst();
                        var filters = grid.getQuickSelValues();
                        if (sapUtil.cmpIst(currIst, listIst)) {                        
                            event.result = {
                                $act: requestActions.getSrvAction("SRV_BRWRAPIDESEL"),
                                params: {
                                    target: listIst,
                                    std: filters
                                }
                            }
                            
                        }
                        else {
                            event.result = {
                                $act: requestActions.getSrvActionEX("SUP_LIST_FILTER"),
                                params: {
                                    target: listIst,
                                    sudo: [filters]
                                }
                            }
                        }
                        processed = true;
                    }
                    break;
            }
        }
        return processed;
    }
    
    function onDblClick(event){
        var processed = false;
        return processed;
    }
    
    function onClick(event){
        var processed = undefined, $$field, currIst, $$cont;
        if (event.target && ($$field = $(event.data.nativeEvt.target))) {
            $$cont = $$field.closest("." + syraUtil.pageSectionK.body);
            if (($$cont && $$cont.length > 0) ||
            _.find(syraUtil.pageSectionK, function(cssK){
                return $$field.hasClass(cssK);
            })) {
                currIst = this.sapController.getCurrInst();
                event.target.setFocus(currIst.xid, (currIst.nl || 0), (currIst.edit === null ? true : currIst.edit));
                processed = true;
            }
        }
        return processed;
<<<<<<< .mine    }
    
    function onFieldKeyDown(event){
        return onKeyDown.call(this, event);
    }
    
    function onFieldClick(event){
        var processed = undefined, fieldIst, currIst, $fusionPageMeta, $fieldMeta;
        if (event.target && ($fusionPageMeta = syraUtil.getFusionPageMeta(event.target)) && ($fieldMeta = syraUtil.getMetaFromObject(event.target)) && ($fusionPageMeta.winModel.getProto())[$fieldMeta.$bind]) {
            fieldIst = sapUtil.makeIst($fusionPageMeta.winModel.getWinId(), $fieldMeta.$bind);
            currIst = this.sapController.getCurrInst();
            if (!sapUtil.cmpIst(currIst, fieldIst)) {
                event.result = {
                    "$act": requestActions.getSrvAction("SRV_GETFOCUS")
                };
                event.result.params = {
                    "target": fieldIst
                };
                processed = true;
            }
            else {
                processed = true;
            }
        }
        else {
            // Let it be!
        }
        return processed;
    }
=======	}

	function onFieldKeyDown(event) {
       return onKeyDown(event);
	}

	function onFieldClick(event) {
		var processed = undefined, fieldIst, $fusionPageMeta, $fieldMeta;
		if (event.target && ($fusionPageMeta = syraUtil.getFusionPageMeta(event.target)) && ($fieldMeta = syraUtil.getMetaFromObject(event.target)) && ($fusionPageMeta.winModel.getProto())[$fieldMeta.$bind]){
 			fieldIst = sapUtil.makeIst($fusionPageMeta.winModel.getWinId(), $fieldMeta.$bind);
			if(!this.sapController.hasFocus(fieldIst)) {
				event.result = {"$act": requestActions.getSrvAction("SRV_GETFOCUS")};
				event.result.params = {"target": fieldIst};
				processed = true; 				
			}
			else {
				processed = true;
			}
		}
		else{
			// Let it be!
		}        
		return processed;
	}
>>>>>>> .theirs};
