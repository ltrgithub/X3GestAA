"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Window event handling classes
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var util = require('syracuse-ui/lib/fusion/tools/util');
var requestActions = require('../sap/srvactions');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;

var _evtProcWindow = {};
exports.WindowEventHandling = _evtProcWindow;

/* "Server page input" event handling class for "Window" */
_evtProcWindow.sap = function(){
    this.eventListeners = function(){
        return [
        	["wdgt.win.keydown", onKeyDown, true, true],
        	["wdgt.win.dblclick", onDblClick, true, true],
        	["wdgt.win.click", onClick, true, true],
            ["wdgt.field.keydown", onFieldKeyDown, true, true],
         	["wdgt.field.click", onFieldClick, true, true]
    	];
    };
    
    function onKeyDown(event){
        var processed = undefined, $$field = $(event.data.nativeEvt.target), $$cont, $itemMeta;
        if (event.target) {
            switch (event.data.nativeEvt.keyCode) {
                case keys["VK_TAB"]:
                    if (!($$cont = $$field.closest("." + syraUtil.pageSectionK.bar)) || $$cont.length == 0 || event.data.nativeEvt.target.tagName.toLowerCase() != "input") {
                        // TODO : le if ci-dessus permet de gérer les input dans liste gauche... mais pas bon pour autant... à reprendre!
                        event.result = {
                            "$act": requestActions.getSrvAction(event.data.nativeEvt.shiftKey ? "SRV_CHAMP_PRECEDENT" : "SRV_CHAMP_SUIVANT")
                        };
                        processed = true;
                    }
                    break;
                    
                case keys["VK_ENTER"]:
                    if (($itemMeta = syraUtil.getMetaFromObject(event.target)) && sapUtil.isListScreen($itemMeta.$bind)) {
                        var grid = event.target.boxParent.boxParent;
                        var listIst = grid.getIst();
                        var filters = grid.getQuickSelValues();
                        if (this.sapController.hasFocus(listIst)) {
                            event.result = {
                                $act: requestActions.getSrvAction("SRV_BRWRAPIDESEL"),
                                params: {target: listIst, std: filters}
                            };
                        }
                        else {
                            event.result = {
                                $act: requestActions.getSrvActionEX("SUP_LIST_FILTER"),
                                params: {target: listIst, sudo: [filters]}
                            };
                        }
                        processed = true;
                    }
                    break;
            }
        }
        return processed;
    }

    function onDblClick(event){
        var processed = false;
        return processed;
    }

    function onClick(event){
        var processed = undefined, $$field, currIst, $$cont;
        if (event.target && ($$field = $(event.data.nativeEvt.target))) {
            $$cont = $$field.closest("." + syraUtil.pageSectionK.body);
            if (($$cont && $$cont.length > 0) || _.find(syraUtil.pageSectionK, function(cssK){return $$field.hasClass(cssK);})) {
                currIst = this.sapController.getCurrInst(true);
                event.target.setFocus(null, currIst.xid, (currIst.nl || 0), (currIst.edit === null ? true : currIst.edit));
                processed = true;
            }
        }
        return processed;
    }

    function onFieldKeyDown(event){
        return onKeyDown.call(this, event);
    }

    function toggleFieldAfterClick(reply, evtHandlingObj, $field, fieldIst, newVAlue){
        var fieldValue = evtHandlingObj.sapController.getEntityValueInReply(reply, fieldIst), value, chain = null;
        if(fieldValue == null && fieldValue == undefined) {
            // Ok, field value has not been updated by the server after focus/click, we can process post local update...
            value = util.duplicateObj(fieldIst);
            value.v = newVAlue;
            evtHandlingObj.sapController.forceValue(value, false, true);
            // ...and finally we inform the server by this change
            chain = getliveNotifyValueParams(fieldIst, null);
        }
        return chain;
    }

    function getliveNotifyValueParams(fieldIst, post){
        return {"$act": requestActions.getSrvAction("SRV_GETFOCUS"), "params": {"target": fieldIst}, "post": post};
    }

    function onFieldClick(event){
        var processed = undefined, fieldIst, $fusionPageMeta, $fieldMeta, readOnlyByModel = false, isRadio = false, isCheck = false, $field, newVal;
        if (event.target && ($fusionPageMeta = syraUtil.getFusionPageMeta(event.target)) && ($fieldMeta = syraUtil.getMetaFromObject(event.target)) && ($fusionPageMeta.winModel.getProto())[$fieldMeta.$bind]) {
            // Misc init
            fieldIst = sapUtil.makeIst($fusionPageMeta.winModel.getWinId(), $fieldMeta.$bind);
            readOnlyByModel = syraUtil.isFieldModelReadOnly($fusionPageMeta.winModel.getProto(), null, $fieldMeta.$bind);
            if(($field = event.target.$field)) {
                isCheck = $field.$type == syraUtil.dataTypes.booleanType ? true : false;
                if(!isCheck && $field.$type == syraUtil.dataTypes.choiceType) {
                    isRadio = $field.$format == syraUtil.wdgtTypes.radio ? true : false;
                }
            }
            // What should we do with this event?
            if (!this.sapController.hasFocus(fieldIst) && !readOnlyByModel) {
                event.result = {"$act": requestActions.getSrvAction("SRV_GETFOCUS")};
                event.result.params = {"target": fieldIst};
                if(event.data.doEvent) {
                    event.result.post = {"callback": event.data.doEvent, "args": []};
                }
                else if(isCheck || isRadio) {
                    newVal = isRadio ? event.target.getInputValue() : (event.target.currentValue == sapUtil.check.off ? sapUtil.check.on : sapUtil.check.off);
                    event.result.post = {"exposeReply": true, "callback": toggleFieldAfterClick, "args": [this, event.target, fieldIst, newVal]};
                }
                processed = true;
            }
            else if(!readOnlyByModel && (isCheck || isRadio)) {
                event.result = getliveNotifyValueParams(fieldIst, null);
                processed = true;
            }
            if(readOnlyByModel) {
                this.sapController.setLocalIst(fieldIst);
            }
        }
        else {
            // Let it be!
        }
        return processed;
    }
};
