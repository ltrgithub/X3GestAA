"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Window event handling classes
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var util = require('syracuse-ui/lib/fusion/tools/util');
var requestActions = require('../sap/srvactions');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;

var _evtProcWindow = {};
exports.WindowEventHandling = _evtProcWindow;

/* "Server page input" event handling class for "Window" */
_evtProcWindow.sap = function(){
    this.eventListeners = function(){
        return [
            ["wdgt.win.keydown", onKeyDown, true, true],
            ["wdgt.win.dblclick", onDblClick, true, true],
            ["wdgt.win.click", onClick, true, true],
            ["wdgt.win.close", onClose, true, true],
            ["wdgt.field.keydown", onFieldKeyDown, true, true],
            ["wdgt.field.click", onFieldClick, true, true],
            ["wdgt.field.picker", onFieldClickPicker, true, true],
            ["wdgt.field.change", onFieldChange, true, true]
        ];
    };
      
    function onKeyDown(event){
        var processed = undefined, $$field = $(event.data.nativeEvt.target), $$cont, $itemMeta;
        if (event.target) {
            switch (event.data.nativeEvt.keyCode) {
                case keys["VK_TAB"]:
                    if (!($$cont = $$field.closest("." + syraUtil.pageSectionK.bar)) || $$cont.length == 0 || event.data.nativeEvt.target.tagName.toLowerCase() != "input") {
                        // TODO : le if ci-dessus permet de gérer les input dans liste gauche... mais pas bon pour autant... à reprendre!
                        event.result = {"$act": requestActions.getSrvAction(event.data.nativeEvt.shiftKey ? "SRV_CHAMP_PRECEDENT" : "SRV_CHAMP_SUIVANT")};
                        processed = true;
                    }
                    break;
                case keys["VK_ENTER"]:
                    if (($itemMeta = syraUtil.getMetaFromObject(event.target)) && sapUtil.isListScreen($itemMeta.$bind)) {
                        var grid = event.target.boxParent.boxParent;
                        var listIst = grid.getIst();
                        var filters = grid.getQuickSelValues();
                        if (this.sapController.hasFocus(listIst)) {
                            event.result = {
                                $act: requestActions.getSrvAction("SRV_BRWRAPIDESEL"),
                                params: {target: listIst, std: filters}
                            };
                        }
                        else {
                            event.result = {
                                $act: requestActions.getSrvActionEX("SUP_LIST_FILTER"),
                                params: {target: listIst, sudo: [null, filters]}
                            };
                        }
                        processed = true;
                    }
                    break;
            }
        }
        return processed;
    }
    
    function onDblClick(event){
        var processed = undefined;
        return processed;
    }
    
    function onClose(event){
        var processed = undefined;
        event.result = {"$act": requestActions.getSrvAction("SRV_ABANDON")};
        processed = true;
        return processed;
    }
    
    function onClick(event){
        var processed = undefined, $$field, currIst, $$cont;
        if (event.target && ($$field = $(event.data.nativeEvt.target))) {
            $$cont = $$field.closest("." + syraUtil.pageSectionK.body);
            if (($$cont && $$cont.length > 0) || _.find(syraUtil.pageSectionK, function(cssK){return $$field.hasClass(cssK);})) {
                currIst = this.sapController.getCurrInst(true);
                event.target.setFocus(null, currIst.xid, (currIst.nl || 0), (currIst.edit === null ? true : currIst.edit));
                processed = true;
            }
        }
        return processed;
    }
    
     function _getFieldInfo(field){
        var fieldInfo = {"readOnlyByModel": false, "isRadio": false, "isCheck": false, "isCombo": false, "isIco": false};
        if (field && (fieldInfo.$fusionPageMeta = syraUtil.getFusionPageMeta(field)) && (fieldInfo.$fieldMeta = syraUtil.getMetaFromObject(field)) && (fieldInfo.$fusionPageMeta.winModel.getProto())[fieldInfo.$fieldMeta.$bind]) {
            fieldInfo.fieldIst = sapUtil.makeIst(fieldInfo.$fusionPageMeta.winModel.getWinId(), fieldInfo.$fieldMeta.$bind);
            fieldInfo.readOnlyByModel = syraUtil.isFieldModelReadOnly(fieldInfo.$fusionPageMeta.winModel.getProto(), null, fieldInfo.$fieldMeta.$bind);
            if ((fieldInfo.$field = field.$field)) {
                fieldInfo.isCheck = fieldInfo.$field.$type == syraUtil.dataTypes.booleanType ? true : false;
                if (!fieldInfo.isCheck && fieldInfo.$field.$type == syraUtil.dataTypes.choiceType) {
                    fieldInfo.isRadio = fieldInfo.$field.$format == syraUtil.wdgtTypes.radio ? true : false;
                    fieldInfo.isCombo = !fieldInfo.isRadio;
                }
                else {
                    fieldInfo.isIco = fieldInfo.$field.$type == syraUtil.dataTypes.iconType ? true : false;
                }
            }
        }
        return fieldInfo.$field ? fieldInfo : null;
    }
   
    function _toggleFieldAfterClick(reply, evtHandlingObj, $field, fieldIst, newVAlue){
        var fieldValue = evtHandlingObj.sapController.getEntityValueInReply(reply, fieldIst), value, chain = null;
        if (fieldValue == null || fieldValue === undefined) {
            // Ok, field value has not been updated by the server after focus/click, we can process post local update...
            value = util.duplicateObj(fieldIst);
            value.v = newVAlue;
            evtHandlingObj.sapController.forceValue(value, false, true);
            // ...and finally we inform the server by this change
            chain = _getliveNotifyValueParams(fieldIst, null);
        }
        return chain;
    }
    
    function _getliveNotifyValueParams(fieldIst, post){
        return {"$act": requestActions.getSrvAction("SRV_GETFOCUS"), "params": {"target": fieldIst}, "post": post};
    }
    
    function _openFieldCtx(reply, evtHandlingObj, initialEvent, field, fieldInfo){
        var ctxEx = [], lkEx = {}, ctx = evtHandlingObj.sapController.getTargetCtxMenuFromReply(reply);
        if (ctx) {
            // Get items
             _.each(ctx, function(item, idx) {
                if(item[1]) {
                    this.push({"txt": item[2], "act": item[0], "id": "link" + idx});
                }
            }, ctxEx);
            // Set menu items
            evtHandlingObj.sapController.setCurrCtxMenu(ctxEx);
            sapUtil.appendMnus2Syra(lkEx, ctxEx, false);
            field.applyMetaData(lkEx);
            // Open Popup
            initialEvent.data.doEvent();
            fieldInfo.$fusionPageMeta.winModel.setCurrCtxPopup(field._popupMenus);
        }
        delete initialEvent.data.doEvent;
    }

    function onFieldKeyDown(event){
        return onKeyDown.call(this, event);
    }

    function onFieldClick(event){
        var processed = undefined, fieldInfo;
        if (event.target && (fieldInfo = _getFieldInfo(event.target)) && !fieldInfo.isCheck) {
            // Init
            fieldInfo.$fusionPageMeta.winModel.closeCurrCtxPopup();
            // What should we do with this event?
            if (!fieldInfo.readOnlyByModel && !this.sapController.hasFocus(fieldInfo.fieldIst)) {
                event.result = {"$act": !fieldInfo.isIco ? requestActions.getSrvAction("SRV_GETFOCUS") : requestActions.getSrvActionEX("SUP_FIELD_ICOCLICK")};
                event.result.params = {"target": fieldInfo.fieldIst};
                if (event.data.doEvent) {
                    event.result.post = {"callback": event.data.doEvent, "args": []};
                }
                else if (fieldInfo.isRadio) {
                        event.result.post = {"exposeReply": true, "callback": _toggleFieldAfterClick, "args": [this, event.target, fieldInfo.fieldIst, event.target.getInputValue()]};
                }
                processed = true;
            }
            else if (!fieldInfo.readOnlyByModel) {
                if (fieldInfo.isRadio) {
                    event.result = _getliveNotifyValueParams(fieldInfo.fieldIst, null);
                    processed = true;
                }
                else if (fieldInfo.isIco) {
                    event.result = {"$act": requestActions.getSrvAction("SRV_KIB")};
                    event.result.params = {"target": fieldInfo.fieldIst};
                    processed = true;
                }
            }
            if (fieldInfo.readOnlyByModel) {
                this.sapController.setLocalIst(fieldInfo.fieldIst);
            }
        }
        else {
            // Let it be!
        }
        return processed;
    }
    
    function onFieldClickPicker(event){
        var processed = undefined, pickerType, fieldInfo = null, isCtx = false, params = null, act = null, actEx;
        if (event.data) {
            // Init
            if ((pickerType = event.data.pickerType)) {
                switch (pickerType) {
                    case "contextMenu":
                        isCtx = true;
                        act = "SRV_OPEN_CTXMENU";
                        actEx = "SUP_FIELD_CTX";
                        params = (fieldInfo = _getFieldInfo(event.target)) ? {"target": fieldInfo.fieldIst} : null;
                        break;
                    case "tunnel":
                        act = "SRV_TUNNEL";
                        actEx = "SUP_FIELD_DRILL";
                        break;
                    case "lookup":
                        act = "SRV_BOITE_SELECTION";
                        actEx = "SUP_FIELD_SELECT";
                        break;
                    default:
                        // Field own picker, like  "choice arrow", "numeric-up", "numeric-down", etc...
                        return onFieldClick.call(this, event);
                        break;
                }
            }
            fieldInfo = fieldInfo || _getFieldInfo(event.target);
            fieldInfo.$fusionPageMeta.winModel.closeCurrCtxPopup();
            // Set action...
            if (act && fieldInfo && !fieldInfo.readOnlyByModel) {
                if (this.sapController.hasFocus(fieldInfo.fieldIst)) {
                    event.result = {"$act": requestActions.getSrvAction(act)};
                    event.result.params = params;
                }
                else {
                    event.result = {"$act": requestActions.getSrvActionEX(actEx)};
                    event.result.params = {"target": fieldInfo.fieldIst};
                }
                if (event.data.doEvent && isCtx) {
                    event.result.post = {"exposeReply": isCtx, "callback": isCtx ? _openFieldCtx : event.data.doEvent, "args": isCtx ? [this, event, event.target, fieldInfo] : []};
                }
                processed = true;
            }
        }
        else {
            // Let it be!
        }
        return processed;
    }
        
    function onFieldChange(event){
        var processed = undefined, fieldInfo, hasFocus;
        if (event.target && (fieldInfo = _getFieldInfo(event.target))) {
            // What should we do with this event?
            hasFocus = this.sapController.hasFocus(fieldInfo.fieldIst);
            if ((fieldInfo.isCombo || fieldInfo.isCheck) && hasFocus) {
                event.result = _getliveNotifyValueParams(fieldInfo.fieldIst, null);
                processed = true;
            }
            else if(fieldInfo.isCheck && !hasFocus) {
                event.result = _getliveNotifyValueParams(fieldInfo.fieldIst, {"exposeReply": true, "callback": _toggleFieldAfterClick, "args": [this, event.target, fieldInfo.fieldIst, event.target.getInputValue()]});
                processed = true;
            }
        }
        else {
            // Let it be!
        }
        return processed;
    }
};
