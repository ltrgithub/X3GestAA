"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Window event handling classes
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var util = require('syracuse-ui/lib/fusion/tools/util');
var requestActions = require('../sap/srvactions');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;
var svcFmt = require('syracuse-ui/lib/fusion/core/tools/format').svcFormatter;
var evtTools = require('../eventhandling/common').CommonEventHandlingTools;
var msgBox = require('syracuse-ui/lib/fusion/core/client/sap/msgbox');
var utilBis = require('syracuse-ui/lib/fusion/tools/utilFdb');
var KisTypeAcceptFmt = require('syracuse-ui/lib/fusion/core/client/sap/format').isTypeAcceptFmt;

var _vkEnterExcludeType = {};
_vkEnterExcludeType[syraUtil.dataTypes.rtfType] = true;
_vkEnterExcludeType[syraUtil.dataTypes.htmlType] = true;
_vkEnterExcludeType[syraUtil.dataTypes.choiceType] = false;

var _evtProcWindow = {};
exports.WindowEventHandling = _evtProcWindow;

/* "Server page input" event handling class for "Window" */
_evtProcWindow.sap = function() {
	//TODO : Presence à tort de ["wdgt.cell.keyup", onFieldKeyUp, false, false] -> Comprend pas à quoi ça sert ???
	this.eventListeners = function() {
		return [
			["wdgt.win.keydown", onKeyDown, true, true], ["wdgt.win.dblclick", onDblClick, true, true], ["wdgt.win.click", onClick, true, true], ["wdgt.win.close", onClose, true, true], ["wdgt.win.closeall", onCloseAll, true, true], ["wdgt.field.input", onInput, true, true], ["wdgt.field.keydown", onFieldKeyDown, true, true], ["wdgt.field.click", onFieldClick, true, true], ["wdgt.field.mousedown", onFieldClick, true, true], ["wdgt.field.picker", onFieldClickPicker, true, true], ["wdgt.field.change", onFieldChange, true, true], ["wdgt.field.calendarclosed", onDatePickerClose, true, true], ["wdgt.field.keyup", onFieldKeyUp, true, true], ["wdgt.cell.keyup", onFieldKeyUp, false, false], ["wdgt.file.upload", onFileUpload, true, true]];
	};

	function _testAckCallResponse(reply, sapCrl, currFld) {
		var TODO = "Test ack_call, remove!!!";
		//sapCrl._session.logger.debug({"toJson": true},  reply);
	}

	function _showSessInfo(sapController, currField, filedInf, curWin) {
		var diagnoses = [],
			info = sapController._session.getSessInfo(),
			boxParams, boxOpts, lastWin, fmt, fn = "",
			fnEx;
		lastWin = sapController._wndwsStack.getWindow(sapController._wndwsStack.length());
		fmt = lastWin && currField ? lastWin.getDataFmt(currField.xid, currField.nl || 1) : "???";
		if (filedInf.$field && (fnEx = filedInf.$field.$X3Name)) {
			fnEx = fnEx.split("_");
			fn = fnEx.length > 1 ? (fnEx[1] + " - screen : " + fnEx[0]) : fnEx[0];
		}
		fnEx = fn && currField.xid ? (fn + " - code : " + currField.xid) : (currField.xid || "???");
		fnEx += fmt ? (" (format : " + fmt) + ")" : "";
		diagnoses.push(util.makeDiagnosis("Current field is : " + fnEx, "info", null, 0, null, "", null, []));
		if (filedInf && filedInf.$field) {
			diagnoses[0].$diagnoses.push(util.makeDiagnosis("Current Fied informations", "info", utilBis.formatJson(filedInf.$field), 1));
		}
		_.each(info, function(value, key) {
			diagnoses[0].$diagnoses.push(util.makeDiagnosis(key + " informations", "info", utilBis.formatJson(value), 1));
		});
		if (lastWin) {
			diagnoses[0].$diagnoses.push(util.makeDiagnosis("Windows informations", "info", utilBis.formatJson(lastWin._mdata), 1));
		}
		boxParams = util.diagnosesToOurErrEx(diagnoses);
		msgBox.setMsgBoxDefaultProp(boxParams, 0, 0, null, null, true);
		boxOpts = msgBox.getMsgBoxOpts.call(sapController, boxParams);
		boxOpts.callback = function() {
			if (currField) {
				sapController._wndwsStack.setFocus(currField.win, true, sapUtil.focusStyle.std.code, currField.xid, currField.nl || 1, true);
			}
		};
		setTimeout(function() {
			syraUtil.msgBox(boxOpts);
		}, 50);
	}

	function _onClickExcludeForceFocus($$nativeEvtTarget) {
		var $$fieldParent, exclude = false;
		if (($$fieldParent = $$nativeEvtTarget.parent()) && $$fieldParent.length > 0 && $$fieldParent.hasClass("s-field-file-link")) {
			// Linked document
			exclude = true;
		} else if ($$nativeEvtTarget.hasClass(syraUtil.gridFusionK.scroll_right) || $$nativeEvtTarget.hasClass(syraUtil.gridFusionK.scroll_left)) {
			// Scroll on grid
			exclude = true;
		}
		return exclude;
	}

	function onInput(event) {
		var processed = undefined,
			fieldCxt = this.sapController.getCurrInst(),
			fieldInfo;
		var $itemMeta = syraUtil.getMetaFromObject(event.target);
		if (fieldCxt && (fieldInfo = _getFieldInfo(event.target, fieldCxt.nl)) && syraUtil.isPlainTextField($itemMeta, fieldInfo.type)) {
			if (event.target.dirty) {
				//console.log("On input");
				event.target.setDirty(true);
			}
		}
		return processed;
	}
	//TODO : Clean code : escape on keydown

	function onKeyDown(event) {
		var processed = undefined,
			$$field = $(event.data.nativeEvt.target),
			$$cont, $itemMeta;
		var oldValue, fieldCxt, currValue, fieldInfo, keyCode = event.data.nativeEvt.keyCode;
		var shortCuts = (event.data && event.data.nativeOpt) ? event.data.nativeOpt.shortcuts : null;
		if (shortCuts) {
			if (shortCuts.down || shortCuts.up) return false;
		}
		if (!event.target) return processed;
		switch (keyCode) {
			case keys["VK_ENTER"]:
				if (!syraUtil.isMsgBoxOpened()) {
					$itemMeta = syraUtil.getMetaFromObject(event.target);
					fieldInfo = _getFieldInfo(event.target);
					if ((fieldInfo && _vkEnterExcludeType[fieldInfo.type]) || (fieldInfo && fieldInfo.type == syraUtil.dataTypes.stringType && $itemMeta.$rows)) {
						processed = undefined;
					} else {
						event.result = {
							"$act": requestActions.getSrvAction("SRV_VALIDE_ECRAN")
						};
						processed = true;
					}
				}
				break;
			case 74:
				var self = this,
					TODO = "Test ack_call, remove!!!";
				if (event.data.nativeEvt.ctrlKey && event.data.nativeEvt.altKey) {
					setTimeout(function() {
						//(self.sapController.getSiteController()).triggerAdx("wdgt.xblock.rpc", {"target": event.target, "type": "rpc", "data": {"call": {"proxy": "TEST_ADD", "values": [3.25, 2.78], "callback": _testAckCallResponse, "callbackArgs": [self.sapController, self.sapController.getCurrInst()]}}});
						//(self.sapController.getSiteController()).triggerAdx("wdgt.xblock.rpc", {"target": event.target, "type": "rpc", "data": {"call": {"proxy": "TEST_CMI", "values": [["string1 1 origin", "string1 2 origin", "string1 3 origin", "string1 4 origin", "string1 5 origin"], ["string2 1 origin", "string2 2 origin", "string2 3 origin", "string2 4 origin", "string2 5 origin"], "STRING1", [1,2,3,4,5,6]], "callback": _testAckCallResponse, "callbackArgs": [self.sapController, self.sapController.getCurrInst()]}}});
						event.target.page.externalAdapter.onBlockExRpc({
							"field": event.target,
							"call": {
								"proxy": "TEST_CMI",
								"values": [
									["string1 1 origin ùﭸ", "string1 2 origin", "string1 3 origin", "string1 4 origin", "string1 5 origin"],
									["string2 1 origin", "string2 2 origin", "string2 3 origin", "string2 4 origin", "string2 5 origin"], "STRING1", [1, 2, 3, 4, 5, 6]
								],
								"callback": _testAckCallResponse,
								"callbackArgs": [self.sapController, self.sapController.getCurrInst()]
							}
						});
						//event.target.page.externalAdapter.onBlockExRpc({"field" : event.target, "callFunc": true, "call": {"proxy": "TEST_FUNC_CMI", "values": [["string1 1 origin ùﭸ", "string1 2 origin", "string1 3 origin", "string1 4 origin", "string1 5 origin"], ["string2 1 origin", "string2 2 origin", "string2 3 origin", "string2 4 origin", "string2 5 origin"], "STRING1", [1,2,3,4,5,6]], "callback": _testAckCallResponse, "callbackArgs": [self.sapController, self.sapController.getCurrInst()]}});
					}, 50);
				}
				break;
			case 68:
			case 100:
				if (event.data.nativeEvt.altKey) {
					if (this.sapController.getSiteController()) {
						(this.sapController.getSiteController()).toggleLog();
					}
				}
				break;
			case 73:
				if (event.data.nativeEvt.ctrlKey && event.data.nativeEvt.altKey) {
					fieldCxt = this.sapController.getCurrInst();
					fieldInfo = fieldCxt ? _getFieldInfo(event.target, fieldCxt.nl) : null;
					_showSessInfo(this.sapController, fieldCxt, fieldInfo, fieldInfo ? fieldInfo.winModel : null);
				}
				break;
			case keys["VK_TAB"]:
				//TODO : Clean escpae code
			case keys["VK_ESCAPE"]:
				if (!($$cont = $$field.closest("." + syraUtil.pageSectionK.bar)) || $$cont.length == 0 || event.data.nativeEvt.target.tagName.toLowerCase() != "input") {
					// TODO : le if ci-dessus permet de gérer les input dans liste gauche... mais pas bon pour autant... à reprendre!
					if (keyCode == keys["VK_TAB"]) {
						event.result = {
							"$act": requestActions.getSrvAction(event.data.nativeEvt.shiftKey ? "SRV_CHAMP_PRECEDENT" : "SRV_CHAMP_SUIVANT")
						};
						processed = true;
					}
					if (!event.noControl && event.data.nativeEvt.shiftKey || keyCode == keys["VK_ESCAPE"]) {
						// Restore original data sent by server if value does not respect control/format pattern (that is what action "ESC" & "SRV_CHAMP_PRECEDENT" mean)
						if ((fieldCxt = this.sapController.getCurrInst()) && (fieldInfo = _getFieldInfo(event.target, fieldCxt.nl))) {
							currValue = fieldInfo.winModel.getDataInputValue(fieldInfo.fieldIst.xid, fieldInfo.fieldIst.nl);
							if (currValue && currValue.v && sapUtil.needToControlField(fieldInfo.type)) {
								/* Warning : code below may seem strange, but initialy, we adopted the same behaviour for "ESC" and "SHIFT_ESCAPE", i.e if control failed, then recovery".
                             Now we force a recovery for "ESC" (see "else" statement), but we kept the piece of code to back... if necessary!*/
								if (keyCode == keys["VK_TAB"] && fieldCxt.fmt) {
									event.result = {
										"$act": requestActions.svcFormat
									};
									event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.toDisplay, currValue.v, fieldCxt.fmt, fieldInfo.type, fieldInfo.fieldIst);
									event.result.post = {
										"callback": function(succeeded, result, evtHandlingObj, initialEvt, callerFieldInfo) {
											var data;
											if (!succeeded) {
												data = callerFieldInfo.winModel.getDataStoreValue(callerFieldInfo.$fieldMeta.$bind, callerFieldInfo.fieldIst.nl, false, true);
												callerFieldInfo.winModel.setDataStoreValue(callerFieldInfo.$fieldMeta.$bind, callerFieldInfo.fieldIst.nl, data, {
													"noStoreCommmit": true,
													"formatted": true
												});
											}
											if (initialEvt.data.nativeEvt.keyCode !== keys["VK_ESCAPE"]) {
												initialEvt.noControl = true;
												evtHandlingObj.controller.triggerAdx(initialEvt._name, initialEvt);
											}
										},
										"args": [this, event, fieldInfo]
									};
								} else if (keyCode == keys["VK_ESCAPE"]) {
									oldValue = fieldInfo.winModel.getDataStoreValue(fieldInfo.$fieldMeta.$bind, fieldInfo.fieldIst.nl, false, true);
									if (fieldCxt.fmt) {
										event.result = {
											"$act": requestActions.svcFormat
										};
										event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.toEdit, oldValue, fieldCxt.fmt, fieldInfo.type, fieldInfo.fieldIst);
										event.result.post = {
											"callback": function(succeeded, result, evtHandlingObj, initialEvt, callerFieldInfo) {
												// #3211 add nl parameter
												callerFieldInfo.winModel.removeFocus(callerFieldInfo.$fieldMeta.$bind, callerFieldInfo.fieldIst.nl);
												callerFieldInfo.winModel.setDataStoreValue(callerFieldInfo.$fieldMeta.$bind, callerFieldInfo.fieldIst.nl, succeeded ? svcFmt.getReplyResult(result) : oldValue, {
													"noStoreCommmit": true,
													"formatted": true
												});
											},
											"args": [this, event, fieldInfo]
										};
									} else {
										// #3211 add nl parameter
										fieldInfo.winModel.removeFocus(fieldInfo.$fieldMeta.$bind, fieldInfo.fieldIst.nl);
										setTimeout(function() {
											fieldInfo.winModel.setDataStoreValue(fieldInfo.$fieldMeta.$bind, fieldInfo.fieldIst.nl, oldValue, {
												"noStoreCommmit": true,
												"formatted": true
											});
										}, 10);
									}
								}
								processed = true;
							}
						}
					}
				}
				break;
		}
		return processed;
	}

	function onFieldKeyUp(event) {
		var processed = undefined,
			fieldCxt, currValue, fieldInfo, control, formatW = this.sapController.fmtWrapper,
			$$field = $(event.data.nativeEvt.target);
		var $itemMeta = syraUtil.getMetaFromObject(event.target),
			keyCode = event.data.nativeEvt.keyCode,
			$$cont, oldValue;
		if ($itemMeta && sapUtil.isListScreen($itemMeta.$bind) && event.target.boxParent.boxParent) {
			// Nothing special in this case (ie quick filter in array)
		} else {
			switch (keyCode) {
				//TODO : escape must not be manage here
				case keys["VK_ESCAPE"]:
					if (!($$cont = $$field.closest("." + syraUtil.pageSectionK.bar)) || $$cont.length == 0 || event.data.nativeEvt.target.tagName.toLowerCase() != "input") {
						if ((fieldCxt = this.sapController.getCurrInst()) && (fieldInfo = _getFieldInfo(event.target, fieldCxt.nl))) {
							currValue = fieldInfo.winModel.getDataInputValue(fieldInfo.fieldIst.xid, fieldInfo.fieldIst.nl);
							if (currValue && currValue.v && sapUtil.needToControlField(fieldInfo.type)) {
								oldValue = fieldInfo.winModel.getDataStoreValue(fieldInfo.$fieldMeta.$bind, fieldInfo.fieldIst.nl, false, true);
								if (fieldCxt.fmt) {
									event.result = {
										"$act": requestActions.svcFormat
									};
									event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.toEdit, oldValue, fieldCxt.fmt, fieldInfo.type, fieldInfo.fieldIst);
									event.result.post = {
										"callback": function(succeeded, result, evtHandlingObj, initialEvt, callerFieldInfo) {
											// #3211 add nl parameter
											callerFieldInfo.winModel.removeFocus(callerFieldInfo.$fieldMeta.$bind, callerFieldInfo.fieldIst.nl);
											callerFieldInfo.winModel.setDataStoreValue(callerFieldInfo.$fieldMeta.$bind, callerFieldInfo.fieldIst.nl, succeeded ? svcFmt.getReplyResult(result) : oldValue, {
												"noStoreCommmit": true,
												"formatted": true
											});
										},
										"args": [this, event, fieldInfo]
									};
								} else {
									// #3211 add nl parameter
									fieldInfo.winModel.removeFocus(fieldInfo.$fieldMeta.$bind, fieldInfo.fieldIst.nl);
									setTimeout(function() {
										fieldInfo.winModel.setDataStoreValue(fieldInfo.$fieldMeta.$bind, fieldInfo.fieldIst.nl, oldValue, {
											"noStoreCommmit": true,
											"formatted": true
										});
									}, 10);
								}
								processed = true;
							}
						}
					}
					break;
				case keys["VK_TAB"]:
				case keys["VK_ENTER"]:
					break;
				default:
					if (formatW) {
						fieldCxt = this.sapController.getCurrInst();
						if ((fieldInfo = fieldCxt ? _getFieldInfo(event.target, fieldCxt.nl) : null)) {
							currValue = KisTypeAcceptFmt[fieldInfo.type] && fieldCxt.fmt ? fieldInfo.winModel.getDataInputValue(fieldInfo.fieldIst.xid, fieldInfo.fieldIst.nl) : null;
							control = currValue && currValue.v ? formatW.editToDisplay(fieldCxt.fmt, currValue.v) : {
								"succeeded": true
							};
							fieldInfo.winModel.setFieldError(event.target, control.succeeded ? null : [" "], control.succeeded);
						}
					}
			}
		}
		return processed;
	}

	function onDblClick(event) {
		var processed = true;
		return processed;
	}

	function onClose(event) {
		var processed = undefined;
		event.result = {
			"$act": requestActions.getSrvAction("SRV_ABANDON")
		};
		processed = true;
		return processed;
	}

	function onCloseAll(event) {
		// Hack lv ti avoid error waiting find solution
		if (event.target.sheets.length && event.target.sheets[event.target.sheets.length - 1].$fusionPageMeta.winModel._mdata.name == "_FORMULA") {
			return false;
		}
		var processed = undefined,
			wins = [],
			currist = this.sapController.getCurrInst();
		for (var ii = (event.target.sheets.length - 1); ii > 0; ii--) {
			wins.push( /*event.target.sheets[ii].$fusionPageMeta.winId*/ null);
		}
		if (wins.length == 0) wins.push(null);
		event.result = {
			"$act": requestActions.getSrvActionEX("SUP_WINS_CLOSE"),
			"params": {
				"sudo": wins,
				"target": "portal"
			},
			post: {
				"callback": function(reply) {
					event.callback( !! (sapUtil.isEndSessReply(reply)));
				},
				"onErrCallBack": function(ctrlFailed, reply) {
					event.callback( !! (sapUtil.isEndSessReply(reply)));
				},
				"exposeReply": true
			}
		};
		processed = true;
		return processed;
	}

	function onClick(event) {        
		var processed = undefined,
			$$field, currIst, $$cont;
		if (event.target && ($$field = $(event.data.nativeEvt.target))) {
			$$cont = $$field.closest("." + syraUtil.pageSectionK.body);            
			if (($$cont && $$cont.length > 0) || _.find(syraUtil.pageSectionK, function(cssK) {
				return $$field.hasClass(cssK);
			})) {
				// Warning... have to check exception...
				if (!_onClickExcludeForceFocus($$field)) {
					currIst = this.sapController.getCurrInst(true);
					event.target.setFocus(true, undefined, currIst.xid, (currIst.nl || 0), (currIst.edit === null ? true : currIst.edit));
					processed = true;                
				}
			}        
		}        
		return processed;    
	}

	function _getFieldInfo(field, line) {
		return evtTools.getFieldInfo(field, line);
	}

	function onFieldKeyDown(event) {
		return onKeyDown.call(this, event);
	}

	function onFileUpload(event) {
		var processed = undefined,
			fieldInfo, isFileOnError;
		if (event.target && (fieldInfo = _getFieldInfo(event.target)) && !fieldInfo.readOnlyByModel && !fieldInfo.isReadOnly && !fieldInfo.isDisabled) {
			if (fieldInfo.type === syraUtil.dataTypes.imageType) {
				isFileOnError = _uploadCtrlImage;
			} else {
				isFileOnError = _uploadCtrlFile;
			}
			if (!this.sapController.hasFocus(fieldInfo.fieldIst)) {
				event.result = {
					"$act": requestActions.getSrvAction("SRV_GETFOCUS")
				};
				event.result.params = {
					"target": fieldInfo.fieldIst
				};
				event.result.post = {
					"exposeReply": true,
					"callback": isFileOnError,
					"args": [this, event]
				};
				processed = true;
			} else {
				if (isFileOnError(null, this, event)) {
					processed = true;
				} else {
					processed = false;
				}
			}
		} else {
			this.sapController.setLocalIst(fieldInfo.fieldIst);
			processed = true;
		}
		return processed;

	}

	function _uploadCtrlImage(reply, evtHandlingObj, event) {
		var error = false,
			session, err, lerr, messErr = null;
		if (event.data.files[0]) {
			if (event.data.files.length > 1) {
				err = "51";
				lerr = "Upload one file only.";
			}
			if (event.target.$field.$maxByteLength && event.data.files[0].size > event.target.$field.$maxByteLength) {
				err = "52";
				lerr = "File too large.";
			}
			if (!event.target.acceptFilter.match(event.data.files[0].type) || event.data.files[0].type === "") {
				err = "53";
				lerr = "File type not supported.";
			}
			if (err) {
				session = evtHandlingObj.controller.getSession();
				messErr = [session.getlabel("error", err, lerr)];
				error = true;
			}
			syraUtil.getFusionPageMeta(event.target).winModel.setFieldError(event.target, messErr, !error);
			if (reply) {
				if (error) {
					return undefined;
				} else {
					if (event.data.doEvent) event.data.doEvent();
				}
			}
		}
		return error;
	}

	function _uploadCtrlFile(event) {

	}

	function _fixIERadioClick(field, fieldInfo) {
		// Cf. SAM 96133
		var oldValue = fieldInfo.winModel.getDataStoreValue(fieldInfo.$fieldMeta.$bind, fieldInfo.fieldIst.nl, false, true);
		if (oldValue != null && oldValue != undefined) {
			field.setDataValue(oldValue);
		}
	}

	function onFieldClick(event, force) {
		var processed = undefined,
			fieldInfo;
		if (event.target && (fieldInfo = _getFieldInfo(event.target)) && (force || !evtTools.discardFieldEvent(event.type, fieldInfo))) {
			// What should we do with this event?
			if (!fieldInfo.readOnlyByModel && !this.sapController.hasFocus(fieldInfo.fieldIst)) {
				event.result = {
					"$act": !fieldInfo.isIco ? requestActions.getSrvAction("SRV_GETFOCUS") : requestActions.getSrvActionEX("SUP_FIELD_ICOCLICK")
				};
				event.result.params = {
					"target": fieldInfo.fieldIst
				};
				if (event.data.doEvent) {
					event.result.post = {
						"callback": event.data.doEvent,
						"args": []
					};
				} else if (fieldInfo.isRadio) {
					event.result.post = {
						"exposeReply": true,
						"callback": evtTools.toggleFieldAfterClick,
						"args": [this, event.target, fieldInfo.fieldIst, event.target.getDataValue(), true, requestActions.getSrvAction("SRV_GETFOCUS")]
					};
					if ($.browser.msie) {
						_fixIERadioClick(event.target, fieldInfo);
					}
				} else if (fieldInfo.type == syraUtil.dataTypes.flash) {
					event.result.post = {
						"exposeReply": false,
						"callback": function(evtHandlingObj, $fld, fldIst) {
							return {
								"$act": requestActions.getSrvAction("SRV_GETFOCUS"),
								"params": {
									"v": "",
									"target": fldIst
								}
							};
						},
						"args": [this, event.target, fieldInfo.fieldIst]
					};
				}
				processed = true;
			} else if (!fieldInfo.readOnlyByModel) {
				if (fieldInfo.isRadio) {
					event.result = evtTools.getliveNotifyValueParams(fieldInfo.fieldIst, {
						"exposeReply": true,
						"callback": evtTools.toggleFieldAfterClick,
						"args": [this, event.target, fieldInfo.fieldIst, event.target.getDataValue(), false]
					}, requestActions.getSrvAction("SRV_GETFOCUS"));
					if ($.browser.msie) {
						_fixIERadioClick(event.target, fieldInfo);
					}
					processed = true;
				} else if (fieldInfo.isIco) {
					event.result = {
						"$act": requestActions.getSrvAction("SRV_KIB")
					};
					event.result.params = {
						"target": fieldInfo.fieldIst
					};
					processed = true;
				}
			}
			if (fieldInfo.readOnlyByModel) {
				this.sapController.setLocalIst(fieldInfo.fieldIst);
			}
		} else {
			// Let it be!
		}
		return processed;
	}

	function onDatePickerClick(event) {
		var processed = undefined,
			fieldInfo, currValue, fieldCxt, self = this;
		if (event.target && (fieldInfo = _getFieldInfo(event.target))) {
			if (!fieldInfo.readOnlyByModel && !this.sapController.hasFocus(fieldInfo.fieldIst)) {
				// Request focus
				event.result = {
					"$act": requestActions.getSrvAction("SRV_GETFOCUS")
				};
				event.result.params = {
					"target": fieldInfo.fieldIst
				};
				event.result.post = {
					"callback": function(evtHandlingObj, initialEvent, callerField) {
						var fieldContext = evtHandlingObj.sapController.getCurrInst();
						evtTools.openDatePicker(true, fieldContext.raw ? svcFmt.formReply(fieldContext.raw, fieldContext.fmt) : null, evtHandlingObj, initialEvent, callerField, fieldInfo);
					},
					"args": [this, event, event.target, fieldInfo]
				};
				processed = true;
			} else if (!fieldInfo.readOnlyByModel && !syraUtil.getPopupDateFromField(event.target)) {
				// Open picker
				fieldCxt = this.sapController.getCurrInst();
				currValue = fieldInfo.winModel.getDataInputValue(fieldInfo.fieldIst.xid, fieldInfo.fieldIst.nl);
				if (currValue && currValue.v) {
					event.result = {
						"$act": requestActions.svcFormat
					};
					event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.toRaw, currValue.v, fieldCxt.fmt, fieldInfo.type, fieldInfo.fieldIst);
					event.result.post = {
						"callback": evtTools.openDatePicker,
						"args": [this, event, event.target, fieldInfo]
					};
					processed = true;
				} else {
					setTimeout(function() {
						evtTools.openDatePicker(true, null, self, event, event.target, fieldInfo);
					}, 10);
					processed = true;
				}
			}
			if (fieldInfo.readOnlyByModel && !syraUtil.getPopupDateFromField(event.target)) {
				// Nothing... sorry!
				this.sapController.setLocalIst(fieldInfo.fieldIst);
				processed = true;
			}
		} else {
			// Let it be!
		}
		return processed;
	}

	function onDatePickerClose(event) {
		var processed = undefined,
			fieldInfo, fieldCxt;
		if (event.target && (fieldInfo = _getFieldInfo(event.target)) && this.sapController.hasFocus(fieldInfo.fieldIst)) {
			fieldCxt = this.sapController.getCurrInst();
			event.result = {
				"$act": requestActions.svcFormat
			};
			event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.rawToEdit, event.data.internalValue, fieldCxt.fmt, fieldInfo.type, fieldInfo.fieldIst);
			event.result.post = {
				"callback": function(succeeded, reply, evtHandlingObj, initialEvent, callerField, callerFieldInfo) {
					if (evtHandlingObj.sapController.hasFocus(callerFieldInfo.fieldIst)) {
						fieldInfo.winModel.setCurrCtxPopup(null);
						initialEvent.data.doStatements({
							"value": svcFmt.getReplyResult(reply)
						});
						delete initialEvent.doStatements;
					}
				},
				"args": [this, event, event.target, fieldInfo]
			};
			processed = true;
		}
		return processed;
	}

	function onFieldClickPicker(event) {
		var processed = undefined,
			pickerType, fieldInfo = null,
			isCtx = false,
			params = null,
			act = null,
			actEx, popupCtx;
		if (event.data) {
			// Init
			if ((pickerType = event.data.pickerType)) {
				switch (pickerType) {
					case "menus":
						params = (fieldInfo = _getFieldInfo(event.target)) ? {
							"target": fieldInfo.fieldIst
						} : null;
						isCtx = true;
						popupCtx = syraUtil.getPopupCtxFromField(event.target);
						if (fieldInfo && !popupCtx) {
							// Ctx popup is not already displayed
							act = "SRV_OPEN_CTXMENU";
							actEx = "SUP_FIELD_CTX";
						} else if (popupCtx && event.data.doEvent) {
							// Ctx popup is already displayed : force close popup
							event.data.doEvent();
							delete event.data.doEvent;
						}
						break;
					case "tunnel":
						act = "SRV_TUNNEL";
						actEx = "SUP_FIELD_DRILL";
						break;
					case "lookup":
						act = "SRV_BOITE_SELECTION";
						actEx = "SUP_FIELD_SELECT";
						break;
					case "date":
						return onDatePickerClick.call(this, event);
						break;
					case "help":
						return evtTools.onFieldHelp(event, _getFieldInfo(event.target));
						break;
					default:
						// Field own picker, like  "choice arrow",  etc...
						return onFieldClick.call(this, event, true);
						break;
				}
			}
			fieldInfo = fieldInfo || _getFieldInfo(event.target);
			// Set action...
			if (act && fieldInfo && !fieldInfo.readOnlyByModel) {
				if (this.sapController.hasFocus(fieldInfo.fieldIst)) {
					event.result = {
						"$act": requestActions.getSrvAction(act)
					};
					event.result.params = params;
				} else {
					event.result = {
						"$act": requestActions.getSrvActionEX(actEx)
					};
					event.result.params = {
						"target": fieldInfo.fieldIst
					};
				}
				if (event.data.doEvent && isCtx) {
					var exclude = undefined,
						links;
					if (event.target && ((links = (event.target.$prototype || event.target.$rootLinks))) && (links = (links.$links || links.$links))) {
						if (links.$tunnel) {
							exclude = {};
							exclude[new String(requestActions.getSrvAction("SRV_TUNNEL"))] = true;
						}
						if (links.$lookup) {
							exclude = exclude || {};
							exclude[new String(requestActions.getSrvAction("SRV_BOITE_SELECTION"))] = true;
						}
					}
					event.result.post = {
						"exposeReply": isCtx,
						"callback": isCtx ? evtTools.openFieldCtx : event.data.doEvent,
						"args": isCtx ? [this, event, event.target, fieldInfo, exclude] : []
					};
				}
				processed = true;
			}
		} else {
			// Let it be!
		}
		return processed;
	}

	function onFieldChange(event) {
		var processed = undefined,
			fieldInfo, hasFocus, oldValue;
		if (event.target && (fieldInfo = _getFieldInfo(event.target))) {
			// What should we do with this event?
			hasFocus = this.sapController.hasFocus(fieldInfo.fieldIst);
			if ((fieldInfo.isCombo || fieldInfo.isCheck) && hasFocus) {
				event.result = evtTools.getliveNotifyValueParams(fieldInfo.fieldIst, null, requestActions.getSrvAction("SRV_GETFOCUS"));
				processed = true;
			} else if (fieldInfo.isCheck && !hasFocus) {
				oldValue = fieldInfo.winModel.getDataStoreValue(fieldInfo.$fieldMeta.$bind, fieldInfo.fieldIst.nl, false, true);
				oldValue = oldValue !== sapUtil.check.off && oldValue !== sapUtil.check.on ? sapUtil.check.off : oldValue;
				event.result = evtTools.getliveNotifyValueParams(fieldInfo.fieldIst, {
					"exposeReply": true,
					"callback": evtTools.toggleFieldAfterClick,
					"onErrCallBack": evtTools.restoreFieldAfterClick,
					"args": [this, event.target, fieldInfo.fieldIst, event.target.getDataValue(), true, requestActions.getSrvAction("SRV_GETFOCUS"), oldValue]
				}, requestActions.getSrvAction("SRV_GETFOCUS"));
				processed = true;
			}
		} else {
			// Let it be!
		}
		return processed;
	}
};