"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Window event handling classes
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var util = require('syracuse-ui/lib/fusion/tools/util');
var requestActions = require('../sap/srvactions');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;
var svcFmt = require('syracuse-ui/lib/fusion/core/tools/format').svcFormatter;
var evtTools= require('../eventhandling/common').CommonEventHandlingTools;
var msgBox = require('syracuse-ui/lib/fusion/core/client/sap/msgbox');
var utilBis = require('syracuse-ui/lib/fusion/tools/utilFdb');

var _evtProcWindow = {};
exports.WindowEventHandling = _evtProcWindow;

/* "Server page input" event handling class for "Window" */
_evtProcWindow.sap = function(){
    this.eventListeners = function(){
        return [
            ["wdgt.win.keydown", onKeyDown, true, true],
            ["wdgt.win.dblclick", onDblClick, true, true],
            ["wdgt.win.click", onClick, true, true],
            ["wdgt.win.close", onClose, true, true],
            ["wdgt.field.keydown", onFieldKeyDown, true, true],
            ["wdgt.field.click", onFieldClick, true, true],
            ["wdgt.field.picker", onFieldClickPicker, true, true],
            ["wdgt.field.change", onFieldChange, true, true],
            ["wdgt.field.calendarclosed", onDatePickerClose, true, true],
            ["wdgt.file.upload", onFileUpload, true, true]
        ];
    };
    
    function _testAckCallResponse(reply, sapCrl, currFld) {
        var TODO = "Test ack_call, remove!!!"
        //sapCrl._session.logger.debug({"toJson": true},  reply);
    }
    
    function _testLogout(hoster, onTimeout, mustForce) {
        var _elapse = utilBis.getTimer(true);
        function doLogout (diag) {
            console.log ("Convergence clients closed processed without error. Engage hoster logout/release.\n\t- Detail : " + diag.message + " (code " + diag.appCode + ").\n\t- Duration : " + _elapse.elapsedMs());
        }
        function promptUser (diag, client, clientRef) {
            console.log ("Close confirmed by user on error '" + diag.$details + "'' for convergence client id " + client);
            return true;
        }
        document.controller.fusionGateway.detachAllBooks(function(diagnosis, cltId, cltRef) {
            if(diagnosis.severity !== "success") {
                console.log ("closed processed with error '" + diagnosis.$details + "' on convergence client id " + cltId + "!\n\tMessage : " + diagnosis.message + " (code " + diagnosis.appCode + ").");
                return promptUser(diagnosis, cltId, cltRef);
            }
            else {
                doLogout(diagnosis);
            }
        }, onTimeout, mustForce);
        return undefined;
    }

    function _showSessInfo(sapController, currField, curWin){
        var diagnoses = [], info = sapController._session.getSessInfo(), boxParams, boxOpts, lastWin;
        diagnoses.push(util.makeDiagnosis("Current session informations...", "info", null, 0, null, "Nobody is perfect ;-)", null, []));
        _.each(info, function(value, key) {
            diagnoses[0].$diagnoses.push(util.makeDiagnosis(key +  " informations", "info", utilBis.formatJson(value), 1));
        });
        lastWin = sapController._wndwsStack.getWindow(sapController._wndwsStack.length() + 1);
        if(lastWin) {
            diagnoses[0].$diagnoses.push(util.makeDiagnosis("Windows informations", "info", utilBis.formatJson(lastWin._mdata), 1));
        }
        boxParams = util.diagnosesToOurErrEx(diagnoses);
        msgBox.setMsgBoxDefaultProp(boxParams, 0, 0, null, null, true);
        boxOpts = msgBox.getMsgBoxOpts.call(sapController, boxParams);
        boxOpts.callback = function () {
            if (currField) {
                sapController._wndwsStack.setFocus(currField.win, sapUtil.focusStyle.std.code, currField.xid, currField.nl || 1, true);                           
            }
        }
        setTimeout(function(){syraUtil.msgBox(boxOpts);}, 50);
    }

    function onKeyDown(event){
        var processed = undefined, $$field = $(event.data.nativeEvt.target), $$cont, $itemMeta;
        var oldValue, fieldCxt, currValue, fieldInfo, keyCode = event.data.nativeEvt.keyCode;
        var grid, listIst, filters, hasFocus;
        if (event.target) {
            switch (keyCode) {
                case 74:
                    var self = this, TODO = "Test ack_call, remove!!!"
                     if(event.data.nativeEvt.ctrlKey && event.data.nativeEvt.altKey) {
                        return _testLogout(this.controller._site, false, false);
                        setTimeout(function() {
                            //(self.sapController.getSiteController()).triggerAdx("wdgt.xblock.rpc", {"target": event.target, "type": "rpc", "data": {"call": {"proxy": "TEST_ADD", "values": [3.25, 2.78], "callback": _testAckCallResponse, "callbackArgs": [self.sapController, self.sapController.getCurrInst()]}}});
                            //(self.sapController.getSiteController()).triggerAdx("wdgt.xblock.rpc", {"target": event.target, "type": "rpc", "data": {"call": {"proxy": "TEST_CMI", "values": [["string1 1 origin", "string1 2 origin", "string1 3 origin", "string1 4 origin", "string1 5 origin"], ["string2 1 origin", "string2 2 origin", "string2 3 origin", "string2 4 origin", "string2 5 origin"], "STRING1", [1,2,3,4,5,6]], "callback": _testAckCallResponse, "callbackArgs": [self.sapController, self.sapController.getCurrInst()]}}});
                            event.target.page.externalAdapter.onBlockExRpc({"field" : event.target, "call": {"proxy": "TEST_CMI", "values": [["string1 1 origin ùﭸ", "string1 2 origin", "string1 3 origin", "string1 4 origin", "string1 5 origin"], ["string2 1 origin", "string2 2 origin", "string2 3 origin", "string2 4 origin", "string2 5 origin"], "STRING1", [1,2,3,4,5,6]], "callback": _testAckCallResponse, "callbackArgs": [self.sapController, self.sapController.getCurrInst()]}});
                            //event.target.page.externalAdapter.onBlockExRpc({"field" : event.target, "callFunc": true, "call": {"proxy": "TEST_FUNC_CMI", "values": [["string1 1 origin ùﭸ", "string1 2 origin", "string1 3 origin", "string1 4 origin", "string1 5 origin"], ["string2 1 origin", "string2 2 origin", "string2 3 origin", "string2 4 origin", "string2 5 origin"], "STRING1", [1,2,3,4,5,6]], "callback": _testAckCallResponse, "callbackArgs": [self.sapController, self.sapController.getCurrInst()]}});
                        }, 50);
                    }
                    break;
               case 68:
               case 100:
                    if(event.data.nativeEvt.ctrlKey && event.data.nativeEvt.altKey) {
                        if(this.sapController.getlogger()) {
                            (this.sapController.getlogger()).toggleLog();
                        }
                    }
                    break;
              case 73:
                    if(event.data.nativeEvt.ctrlKey && event.data.nativeEvt.altKey) {
                        fieldCxt = this.sapController.getCurrInst();
                        fieldInfo = fieldCxt ? _getFieldInfo(event.target, fieldCxt.nl) : null;
                        _showSessInfo(this.sapController,  fieldCxt, fieldInfo ? fieldInfo.winModel : null);
                    }
                    break;
                case keys["VK_TAB"]:
                case keys["VK_ESCAPE"]:
                    if (!($$cont = $$field.closest("." + syraUtil.pageSectionK.bar)) || $$cont.length == 0 || event.data.nativeEvt.target.tagName.toLowerCase() != "input") {
                        // TODO : le if ci-dessus permet de gérer les input dans liste gauche... mais pas bon pour autant... à reprendre!
                        if (keyCode == keys["VK_TAB"]) {
                            event.result = {
                                "$act": requestActions.getSrvAction(event.data.nativeEvt.shiftKey ? "SRV_CHAMP_PRECEDENT" : "SRV_CHAMP_SUIVANT")
                            };
                            processed = true;
                        }
                        if (!event.noControl && event.data.nativeEvt.shiftKey || keyCode == keys["VK_ESCAPE"]) {
                            // Restore original data sent by server if value does nor respect control/format pattern (that is what action "ESC" & "SRV_CHAMP_PRECEDENT" mean)
                            if ((fieldCxt = this.sapController.getCurrInst()) && (fieldInfo = _getFieldInfo(event.target, fieldCxt.nl))) {
                                currValue = fieldInfo.winModel.getValue(fieldInfo.fieldIst.xid, fieldInfo.fieldIst.nl);
                                if (currValue && currValue.v && sapUtil.needToControlField(fieldInfo.type)) {
                                    /* Warning : code below may seem strange, but initialy, we adopted the same behaviour for "ESC" and "SHIFT_ESCAPE", i.e if control failed, then recovery".
                                       Now we force a recovery for "ESC" (see "else" statement), but we kept the piece of code to back... if necessary!*/
                                    if (keyCode == keys["VK_TAB"] && fieldCxt.fmt) {
                                        event.result = {
                                            "$act": requestActions.svcFormat
                                        };
                                        event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.toDisplay, currValue.v, fieldCxt.fmt, fieldInfo.type, fieldInfo.fieldIst);
                                        event.result.post = {
                                            "callback": function(succeeded, result, evtHandlingObj, initialEvt, callerFieldInfo){
                                                var data;
                                                if (!succeeded) {
                                                    data = callerFieldInfo.winModel.getDatasetValue(callerFieldInfo.$fieldMeta.$bind, callerFieldInfo.fieldIst.nl, false, true);
                                                    callerFieldInfo.winModel.setDataValue(callerFieldInfo.$fieldMeta.$bind, callerFieldInfo.fieldIst.nl, data, {
                                                        "noStoreCommmit": true
                                                    });
                                                }
                                                if (initialEvt.data.nativeEvt.keyCode !== keys["VK_ESCAPE"]) {
                                                    initialEvt.noControl = true;
                                                    evtHandlingObj.controller.triggerAdx(initialEvt._name, initialEvt);
                                                }
                                            },
                                            "args": [this, event, fieldInfo]
                                        };
                                    }
                                    else 
                                        if (keyCode == keys["VK_ESCAPE"]) {
                                            oldValue = fieldInfo.winModel.getDatasetValue(fieldInfo.$fieldMeta.$bind, fieldInfo.fieldIst.nl, false, true);
                                            if (fieldCxt.fmt) {
                                                event.result = {"$act": requestActions.svcFormat};
                                                event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.toEdit, oldValue, fieldCxt.fmt, fieldInfo.type, fieldInfo.fieldIst);
                                                event.result.post = {
                                                    "callback": function(succeeded, result, evtHandlingObj, initialEvt, callerFieldInfo){
                                                        callerFieldInfo.winModel.removeFocus(callerFieldInfo.$fieldMeta.$bind);
                                                        callerFieldInfo.winModel.setDataValue(callerFieldInfo.$fieldMeta.$bind, callerFieldInfo.fieldIst.nl, succeeded ? svcFmt.getReplyResult(result) : oldValue, {
                                                            "noStoreCommmit": true
                                                        });
                                                    },
                                                    "args": [this, event, fieldInfo]
                                                };
                                            }
                                            else {
                                                fieldInfo.winModel.removeFocus(fieldInfo.$fieldMeta.$bind);
                                                setTimeout(function(){
                                                    fieldInfo.winModel.setDataValue(fieldInfo.$fieldMeta.$bind, fieldInfo.fieldIst.nl, oldValue, {
                                                        "noStoreCommmit": true
                                                    });
                                                }, 10);
                                            }
                                        }
                                        processed = true;
                                }
                            }
                        }
                    }
                    break;
                case keys["VK_ENTER"]:
                    if(syraUtil.isMsgBoxOpened() ) {
                        break;
                    }
                    if (($itemMeta = syraUtil.getMetaFromObject(event.target)) && sapUtil.isListScreen($itemMeta.$bind) && (grid = event.target.boxParent.boxParent)) {
                        filters = grid.getQuickSelValues();
                        hasFocus = this.sapController.hasFocus((listIst = grid.getIst()));
                        event.result = {"$act": hasFocus ? requestActions.getSrvAction("SRV_BRWRAPIDESEL") : requestActions.getSrvActionEX("SUP_LIST_FILTER"), "params": {"target": listIst}};
                        if(hasFocus) {
                            event.result.params.std = filters;
                        }
                        else {
                            event.result.params.sudo = [null, filters];
                        }
                        processed = true;
                    }
                    else {
                        event.result = {"$act": requestActions.getSrvAction("SRV_VALIDE_ECRAN")};
                        processed = true;                   
                    }
                    break;
            }
        }
        return processed;
    }
    
    function onDblClick(event){
        var processed = true;
        return processed;
    }
    
    function onClose(event){
        var processed = undefined;
        event.result = {
            "$act": requestActions.getSrvAction("SRV_ABANDON")
        };
        processed = true;
        return processed;
    }
    
    function onClick(event){
        var processed = undefined, $$field, currIst, $$cont;
        if (event.target && ($$field = $(event.data.nativeEvt.target))) {
            $$cont = $$field.closest("." + syraUtil.pageSectionK.body);
            if (($$cont && $$cont.length > 0) || _.find(syraUtil.pageSectionK, function(cssK){return $$field.hasClass(cssK);})) {
                currIst = this.sapController.getCurrInst(true);
                event.target.setFocus(null, currIst.xid, (currIst.nl || 0), (currIst.edit === null ? true : currIst.edit));
                processed = true;
            }
        }
        return processed;
    }
    
    function _getFieldInfo(field, line){
        return evtTools.getFieldInfo(field, line);
    }
    function onFieldKeyDown(event){
        return onKeyDown.call(this, event);
    }
    function onFileUpload(event){
    	var processed = undefined, fieldInfo,doEvent;
	    if (event.target && (fieldInfo = _getFieldInfo(event.target)) && !fieldInfo.readOnlyByModel) {
    		 if(event.target.$field.$type===syraUtil.dataTypes.imageType){
    			doEvent=_uploadCtrlImage
    			
    		}else{
    			doEvent=_uploadCtrlFile
    		}
	    	if(!this.sapController.hasFocus(fieldInfo.fieldIst)){
	    		event.result = {"$act": requestActions.getSrvAction("SRV_GETFOCUS")}
	    		event.result.params = {"target": fieldInfo.fieldIst};
	    	    event.result.post = {
                    "exposeReply": true,
                    "callback": doEvent,
                    "args": [this, event]
                };	
                processed=true
	    	}else{
	    		processed=doEvent(null,this,event)
	    	}
		}else{
			this.sapController.setLocalIst(fieldInfo.fieldIst);
			processed=true
		}	
    	return processed
    	
    }
    function _uploadCtrlImage(reply,evtHandlingObj,event){
    		var processed = undefined ,session,err,lerr
			if(event.data.files.length>1){
				err="51";
				lerr="Upload one file only."
			}
			//TODO - test size blob
			/*if(options.files[0].size > ???){
				err="52"
				lerr="File too large."
			}*/
			if(!event.target.acceptFilter.match(event.data.files[0].type)){
					err="53";
					lerr="File type not supported."
			}
			if(err){
				var session=evtHandlingObj.controller.getSession();
				syraUtil.getFusionPageMeta(event.target).winModel._showFieldError(event.target, [session.getlabel("error", err, lerr)])
			} else{
				event.target.showErrors([]);
			} 
			if(!err && reply && event.data.doEvent){
				event.data.doEvent()
			}
			return processed
    }
    function _uploadCtrlFile(event){
    	
    }
    function onFieldClick(event){
        var processed = undefined, fieldInfo;
        if (event.target && (fieldInfo = _getFieldInfo(event.target)) && !fieldInfo.isCheck) {
            // What should we do with this event?
            if (!fieldInfo.readOnlyByModel && !this.sapController.hasFocus(fieldInfo.fieldIst)) {
                event.result = {"$act": !fieldInfo.isIco ? requestActions.getSrvAction("SRV_GETFOCUS") : requestActions.getSrvActionEX("SUP_FIELD_ICOCLICK")};
                event.result.params = {"target": fieldInfo.fieldIst};
                if (event.data.doEvent) {
                    event.result.post = {"callback": event.data.doEvent, "args": []};
                }
                else 
                    if (fieldInfo.isRadio) {
                        event.result.post = {
                            "exposeReply": true,
                            "callback": evtTools.toggleFieldAfterClick,
                            "args": [this, event.target, fieldInfo.fieldIst, event.target.getDataValue(), true,requestActions.getSrvAction("SRV_GETFOCUS")]
                        };
                    }
                processed = true;
            }
            else 
                if (!fieldInfo.readOnlyByModel) {
                    if (fieldInfo.isRadio) {
                        event.result = evtTools.getliveNotifyValueParams(fieldInfo.fieldIst, {
                            "exposeReply": true,
                            "callback": evtTools.toggleFieldAfterClick,
                            "args": [this, event.target, fieldInfo.fieldIst, event.target.getDataValue(), false]
                        },requestActions.getSrvAction("SRV_GETFOCUS"));
                        processed = true;
                    }
                    else 
                        if (fieldInfo.isIco) {
                            event.result = {"$act": requestActions.getSrvAction("SRV_KIB")};
                            event.result.params = {"target": fieldInfo.fieldIst};
                            processed = true;
                        }
                }
            if (fieldInfo.readOnlyByModel) {
                this.sapController.setLocalIst(fieldInfo.fieldIst);
            }
        }
        else {
            // Let it be!
        }
        return processed;
    }
    
    function onDatePickerClick(event){
        var processed = undefined, fieldInfo, currValue, fieldCxt, self = this;
        if (event.target && (fieldInfo = _getFieldInfo(event.target))) {
            if (!fieldInfo.readOnlyByModel && !this.sapController.hasFocus(fieldInfo.fieldIst)) {
                // Request focus
                event.result = {"$act": requestActions.getSrvAction("SRV_GETFOCUS")};
                event.result.params = {"target": fieldInfo.fieldIst};
                event.result.post = {
                    "callback": function(evtHandlingObj, initialEvent, callerField){
                        var fieldContext = evtHandlingObj.sapController.getCurrInst();
                        evtTools.openDatePicker(true, fieldContext.raw ? svcFmt.formReply(fieldContext.raw, fieldContext.fmt) : null, evtHandlingObj, initialEvent, callerField, fieldInfo);
                    },
                    "args": [this, event, event.target, fieldInfo]
                };
                processed = true;
            }
            else 
                if (!fieldInfo.readOnlyByModel && !syraUtil.getPopupDateFromField(event.target)) {
                    // Open picker
                    fieldCxt = this.sapController.getCurrInst();
                    currValue = fieldInfo.winModel.getValue(fieldInfo.fieldIst.xid, fieldInfo.fieldIst.nl);
                    if (currValue.v) {
                        event.result = {"$act": requestActions.svcFormat};
                        event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.toRaw, currValue.v, fieldCxt.fmt, fieldInfo.type, fieldInfo.fieldIst);
                        event.result.post = {
                            "callback": evtTools.openDatePicker,
                            "args": [this, event, event.target, fieldInfo]
                        };
                        processed = true;
                    }
                    else {
                        setTimeout(function(){
                            evtTools.openDatePicker(true, null, self, event, event.target, fieldInfo);
                        }, 10);
                        processed = true;
                    }
                }
            if (fieldInfo.readOnlyByModel && !syraUtil.getPopupDateFromField(event.target)) {
                // Nothing... sorry!
                this.sapController.setLocalIst(fieldInfo.fieldIst);
                processed = true;
            }
        }
        else {
            // Let it be!
        }
        return processed;
    }
    
    function onDatePickerClose(event){
        var processed = undefined, fieldInfo, fieldCxt;
        if (event.target && (fieldInfo = _getFieldInfo(event.target)) && this.sapController.hasFocus(fieldInfo.fieldIst)) {
            fieldCxt = this.sapController.getCurrInst();
            event.result = {"$act": requestActions.svcFormat};
            event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.rawToEdit, event.data.internalValue, fieldCxt.fmt, fieldInfo.type, fieldInfo.fieldIst);
            event.result.post = {
                "callback": function(succeeded, reply, evtHandlingObj, initialEvent, callerField, callerFieldInfo){
                    if (evtHandlingObj.sapController.hasFocus(callerFieldInfo.fieldIst)) {
                        fieldInfo.winModel.setCurrCtxPopup(null);
                        initialEvent.data.doStatements({"value": svcFmt.getReplyResult(reply)});
                        delete initialEvent.doStatements;
                    }
                },
                "args": [this, event, event.target, fieldInfo]
            };
            processed = true;
        }
        return processed;
    }
    
    
    function onFieldClickPicker(event){
        var processed = undefined, pickerType, fieldInfo = null, isCtx = false, params = null, act = null, actEx, popupCtx;
        if (event.data) {
            // Init
            if ((pickerType = event.data.pickerType)) {
                switch (pickerType) {
                    case "menus":
                        params = (fieldInfo = _getFieldInfo(event.target)) ? {"target": fieldInfo.fieldIst} : null;
                        isCtx = true;
                        popupCtx = syraUtil.getPopupCtxFromField(event.target);
                        if (fieldInfo && !popupCtx) {
                            // Ctx popup is not already displayed
                            act = "SRV_OPEN_CTXMENU";
                            actEx = "SUP_FIELD_CTX";
                        }
                        else 
                            if (popupCtx && event.data.doEvent) {
                                // Ctx popup is already displayed : force close popup
                                event.data.doEvent();
                                delete event.data.doEvent;
                            }
                        break;
                    case "tunnel":
                        act = "SRV_TUNNEL";
                        actEx = "SUP_FIELD_DRILL";
                        break;
                    case "lookup":
                        act = "SRV_BOITE_SELECTION";
                        actEx = "SUP_FIELD_SELECT";
                        break;
                    case "date":
                        return onDatePickerClick.call(this, event);
                        break;
                    default:
                        // Field own picker, like  "choice arrow",  etc...
                        return onFieldClick.call(this, event);
                        break;
                }
            }
            fieldInfo = fieldInfo || _getFieldInfo(event.target);
            // Set action...
            if (act && fieldInfo && !fieldInfo.readOnlyByModel) {
                if (this.sapController.hasFocus(fieldInfo.fieldIst)) {
                    event.result = {"$act": requestActions.getSrvAction(act)};
                    event.result.params = params;
                }
                else {
                    event.result = {"$act": requestActions.getSrvActionEX(actEx)};
                    event.result.params = {"target": fieldInfo.fieldIst};
                }
                if (event.data.doEvent && isCtx) {
                    event.result.post = {
                        "exposeReply": isCtx,
                        "callback": isCtx ?  evtTools.openFieldCtx : event.data.doEvent,
                        "args": isCtx ? [this, event, event.target, fieldInfo] : []
                    };
                }
                processed = true;
            }
        }
        else {
            // Let it be!
        }
        return processed;
    }
    
    function onFieldChange(event){
        var processed = undefined, fieldInfo, hasFocus, oldValue;
        if (event.target && (fieldInfo = _getFieldInfo(event.target))) {
            // What should we do with this event?
            hasFocus = this.sapController.hasFocus(fieldInfo.fieldIst);
            if ((fieldInfo.isCombo || fieldInfo.isCheck) && hasFocus) {
                event.result = evtTools.getliveNotifyValueParams(fieldInfo.fieldIst, null,requestActions.getSrvAction("SRV_GETFOCUS"));
                processed = true;
            }
            else if (fieldInfo.isCheck && !hasFocus) {
                oldValue = fieldInfo.winModel.getDatasetValue(fieldInfo.$fieldMeta.$bind, fieldInfo.fieldIst.nl, false, true);
                oldValue = oldValue !== sapUtil.check.off && oldValue !== sapUtil.check.on ? sapUtil.check.off : oldValue;
                event.result = evtTools.getliveNotifyValueParams(fieldInfo.fieldIst, {
                    "exposeReply": true, "callback": evtTools.toggleFieldAfterClick, "onErrCallBack": evtTools.restoreFieldAfterClick,
                    "args": [this, event.target, fieldInfo.fieldIst, event.target.getDataValue(), true, requestActions.getSrvAction("SRV_GETFOCUS"), oldValue]
                }, requestActions.getSrvAction("SRV_GETFOCUS"));
                processed = true;
            }
        }
        else {
            // Let it be!
        }
        return processed;
    }
};
