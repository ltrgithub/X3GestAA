"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Window event handling classes
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var util = require('syracuse-ui/lib/fusion/tools/util');
var requestActions = require('../sap/srvactions');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;
var svcFmt = require('syracuse-ui/lib/fusion/core/tools/format').svcFormatter;
var evtTools = require('../eventhandling/common').CommonEventHandlingTools;
var KisTypeAcceptFmt = require('syracuse-ui/lib/fusion/core/client/sap/format').isTypeAcceptFmt;

var _vkEnterExcludeType = {};
_vkEnterExcludeType[syraUtil.dataTypes.rtfType] = true;
_vkEnterExcludeType[syraUtil.dataTypes.htmlType] = true;
_vkEnterExcludeType[syraUtil.dataTypes.choiceType] = false;
_vkEnterExcludeType[syraUtil.dataTypes.flash] = true;

var _evtProcWindow = {};
exports.WindowEventHandling = _evtProcWindow;

/* "Server page input" event handling class for "Window" */
_evtProcWindow.sap = function() {
	//TODO : Presence à tort de ["wdgt.cell.keyup", onFieldKeyUp, false, false] -> Comprend pas à quoi ça sert ???
	this.eventListeners = function() {
		return [["wdgt.win.keydown", onKeyDown, true, true], ["wdgt.win.dblclick", onDblClick, true, true], ["wdgt.win.click", onClick, true, true], ["wdgt.win.close", onClose, true, true], ["wdgt.win.closeall", onCloseAll, true, true], ["wdgt.field.applyShortCut", applyShortCut, true, true], ["wdgt.field.escape", applyEscape, true, true], ["wdgt.field.input", onInput, true, true], ["wdgt.field.keydown", onFieldKeyDown, true, true], ["wdgt.field.click", onFieldClick, true, true], ["wdgt.field.mousedown", onFieldClick, true, true], ["wdgt.field.picker", onFieldClickPicker, true, true], ["wdgt.field.change", onFieldChange, true, true], ["wdgt.field.calendarclosed", onDatePickerClose, true, true], ["wdgt.field.keyup", onFieldKeyUp, true, true], ["wdgt.cell.keyup", onFieldKeyUp, false, false], ["wdgt.file.upload", onFileUpload, true, true], ["wdgt.file.uploadRemove", onFileUploadRemove, true, true]];
	};

	function _testAckCallResponse(reply, sapCrl, currFld) {
		var TODO = "Test ack_call, remove!!!";
		//sapCrl._session.logger.debug({"toJson": true},  reply);
	}

	function _onClickExcludeForceFocus($$nativeEvtTarget) {
		var $$fieldParent, exclude = false;
		if (($$fieldParent = $$nativeEvtTarget.parent()) && $$fieldParent.length > 0 && $$fieldParent.hasClass("s-field-file-link")) {
			// Linked document
			exclude = true;
		} else
		if ($$nativeEvtTarget.hasClass(syraUtil.gridFusionK.scroll_right) || $$nativeEvtTarget.hasClass(syraUtil.gridFusionK.scroll_left)) {
			// Scroll on grid
			exclude = true;
		}
		return exclude;
	}

	function onInput(event) {
		var processed = undefined,
			fieldCxt = this.sapController.getCurrInst(),
			fieldInfo;
		var $itemMeta = syraUtil.getMetaFromObject(event.target);
		if (fieldCxt && (fieldInfo = _getFieldInfo(event.target, fieldCxt.nl)) && syraUtil.isPlainTextField($itemMeta, fieldInfo.type)) {
			if (event.target.dirty) {
				event.target.setDirty(true);
			}
		}
		return processed;
	}

	function applyEnter(opt) {
		if (opt.target.isTextArea)
			return true;
		var processed = undefined,
			fieldInfo = _getFieldInfo(opt.target),
			$itemMeta = syraUtil.getMetaFromObject(opt.target);
		if (!syra_diagnose.box.messageBox) {
			if ((fieldInfo && _vkEnterExcludeType[fieldInfo.type]) || (fieldInfo && fieldInfo.type == syraUtil.dataTypes.stringType && $itemMeta.$rows)) {
				processed = undefined;
			} else {
				opt.result = {
					"$act": requestActions.getSrvAction("SRV_VALIDE_ECRAN")
				};
				processed = true;
			}
		} else {
			return false;
		}
		return processed;
	}

	function applyTab(opt) {
		var fieldInfo = _getFieldInfo(opt.target);
		opt.result = {
			"$act": requestActions.getSrvAction(opt.data.shortcuts.shift ? "SRV_CHAMP_PRECEDENT" : "SRV_CHAMP_SUIVANT")
		};
		return true;
	}

	function applyArrowUp(opt) {
		if (opt.target.isTextArea)
			return true;
		return false;
	}

	function applyArrowDown(opt) {
		if (opt.target.isTextArea)
			return true;
		return false;
	}

	function applyShortCut(opt) {
		if (opt.data.shortcuts.enter) {
			return applyEnter(opt);
		} else
		if (opt.data.shortcuts.tab) {
			return applyTab(opt);
		} else
		if (opt.data.shortcuts.up) {
			return applyArrowUp(opt);
		} else
		if (opt.data.shortcuts.down) {
			return applyArrowDown(opt);
		} else
		if (opt.data.shortcuts.i) {
			return evtTools.applyKeyI(opt);
		} else
		if (opt.data.shortcuts.backspace) {
			var fieldInfo = _getFieldInfo(opt.target);
			if (fieldInfo && fieldInfo.isReadOnly) {
				opt.event.preventDefault();
				opt.event.stopPropagation();
				return true;
			}
		}
		return false;
	}

	function applyEscape(opt) {
		var applied = false;
		var $fieldMeta = syraUtil.getMetaFromObject(opt.target),
			$fusionPageMeta = syraUtil.getFusionPageMeta(opt.target),
			fieldCxt = this.sapController.getCurrInst(),
			currValue = $fusionPageMeta.winModel.getDataInputValue(fieldCxt.xid, 0),
			oldValue, result;
		if (currValue && currValue.v != undefined && sapUtil.needToControlField(syraUtil.getFieldType(opt.target))) {
			oldValue = $fusionPageMeta.winModel.getDataStoreValue($fieldMeta.$bind, 0, false, true);
			if (fieldCxt.fmt) {
				result = this.sapController.fmtWrapper.displayToEdit(fieldCxt.fmt, oldValue);
				if (currValue.v !== (result.succeeded ? result.edit : oldValue)) {
					$fusionPageMeta.winModel.removeFocus($fieldMeta.$bind, 0);
					$fusionPageMeta.winModel.setDataStoreValue($fieldMeta.$bind, 0, result.succeeded ? result.edit : oldValue, {
						"noStoreCommmit": true,
						"formatted": true
					});
					applied = true;
				}
			}
		}
		return applied;
	}

	function onKeyDown(event) {
		return false;
	}

	function onFieldKeyUp(event) {
		var processed = undefined,
			fieldCxt, currValue, fieldInfo, control, formatW = this.sapController.fmtWrapper,
			$$field = $(event.data.nativeEvt.target);
		var $itemMeta = syraUtil.getMetaFromObject(event.target),
			keyCode = event.data.nativeEvt.keyCode,
			$$cont, oldValue;
		//syraUtil.log("windowEx onFieldKeyUp", keyCode, event);
		if ($itemMeta && sapUtil.isListScreen($itemMeta.$bind) && event.target.boxParent.boxParent) {
			// Nothing special in this case (ie quick filter in array)
		} else {
			switch (keyCode) {
				case keys["VK_TAB"]:
				case keys["VK_ENTER"]:
					break;
				default:
					if (formatW) {
						fieldCxt = this.sapController.getCurrInst();
						if ((fieldInfo = fieldCxt ? _getFieldInfo(event.target, fieldCxt.nl) : null)) {
							if (fieldInfo && !fieldInfo.isReadOnly) {
								currValue = KisTypeAcceptFmt[fieldInfo.type] && fieldCxt.fmt ? fieldInfo.winModel.getDataInputValue(fieldInfo.fieldIst.xid, fieldInfo.fieldIst.nl, event) : null;
								control = currValue && currValue.v ? formatW.editToDisplay(fieldCxt.fmt, currValue.v) : {
									"succeeded": true
								};
								fieldInfo.winModel.setFieldError(event.target, control.succeeded ? null : [""], control.succeeded);
							}
						}
					}
			}
		}
		return processed;
	}

	function onDblClick(event) {
		var processed = true;
		return processed;
	}

	function onClose(event) {
		var processed = undefined;
		event.result = {
			"$act": requestActions.getSrvAction("SRV_ABANDON")
		};
		processed = true;
		return processed;
	}

	function onCloseAll(event) {
		// Hack lv ti avoid error waiting find solution
		if (event.target.sheets.length && event.target.sheets[event.target.sheets.length - 1].$fusionPageMeta.winModel._mdata.name == "_FORMULA") {
			return false;
		}
		var processed = undefined,
			wins = [],
			currist = this.sapController.getCurrInst();
		for (var ii = (event.target.sheets.length - 1); ii > 0; ii--) {
			wins.push( /*event.target.sheets[ii].$fusionPageMeta.winId*/ null);
		}
		if (wins.length == 0)
			wins.push(null);
		event.result = {
			"$act": requestActions.getSrvActionEX("SUP_WINS_CLOSE"),
			"params": {
				"sudo": wins,
				"target": "portal"
			},
			post: {
				"callback": function(reply) {
					event.callback( !! (sapUtil.isEndSessReply(reply)));
				},
				"onErrCallBack": function(ctrlFailed, reply) {
					event.callback( !! (sapUtil.isEndSessReply(reply)));
				},
				"exposeReply": true
			}
		};
		processed = true;
		return processed;
	}

	function onClick(event) {
		var processed = undefined,
			$$field, currIst, $$cont;
		if (event.target && ($$field = $(event.data.nativeEvt.target))) {
			$$cont = $$field.closest("." + syraUtil.pageSectionK.body);
			if (($$cont && $$cont.length > 0) ||
				_.find(syraUtil.pageSectionK, function(cssK) {
					return $$field.hasClass(cssK);
				})) {
				// Warning... have to check exception...
				if (!_onClickExcludeForceFocus($$field)) {
					currIst = this.sapController.getCurrInst(true);
					event.target.setFocus(true, undefined, currIst.xid, (currIst.nl || 0), (currIst.edit === null ? true : currIst.edit));
					processed = true;
				}
			}
		}
		return processed;
	}

	function _getFieldInfo(field, line) {
		return evtTools.getFieldInfo(field, line);
	}

	function onFieldKeyDown(event) {
		return onKeyDown.call(this, event);
	}

	function onFileUpload(event) {
		var processed = undefined,
			fieldInfo, isFileOnError;
		if (event.target && (fieldInfo = _getFieldInfo(event.target)) && !fieldInfo.readOnlyByModel && !fieldInfo.isReadOnly && !fieldInfo.isDisabled) {
			if (fieldInfo.type === syraUtil.dataTypes.imageType) {
				isFileOnError = _uploadCtrlImage;
			} else {
				isFileOnError = _uploadCtrlFile;
			}
			if (!this.sapController.hasFocus(fieldInfo.fieldIst)) {
				event.result = {
					"$act": requestActions.getSrvAction("SRV_GETFOCUS")
				};
				event.result.params = {
					"target": fieldInfo.fieldIst
				};
				event.result.post = {
					"exposeReply": true,
					"callback": isFileOnError,
					"args": [this, event]
				};
				processed = true;
			} else {
				if (isFileOnError(null, this, event)) {
					processed = true;
				} else {
					processed = false;
				}
			}
		} else {
			this.sapController.setLocalIst(fieldInfo.fieldIst);
			processed = true;
		}
		return processed;

	}

	function onFileUploadRemove(event) {
		var processed = undefined,
			fieldInfo;
		if (event.target && (fieldInfo = _getFieldInfo(event.target)) && !fieldInfo.readOnlyByModel && !fieldInfo.isReadOnly && !fieldInfo.isDisabled) {
			if (!this.sapController.hasFocus(fieldInfo.fieldIst)) {
				event.result = {
					"$act": requestActions.getSrvAction("SRV_GETFOCUS")
				};
				event.result.params = {
					"target": fieldInfo.fieldIst
				};
				event.result.post = {
					"exposeReply": false,
					"callback": event.data.doEvent,
					"args": []
				};
				processed = true;
			}
		} else {
			this.sapController.setLocalIst(fieldInfo.fieldIst);
			processed = true;
		}
		return processed;
	}

	function _uploadCtrlImage(reply, evtHandlingObj, event) {
		var error = false,
			session, err, lerr, messErr = null;
		if (event.data.files[0]) {
			if (event.data.files.length > 1) {
				err = "51";
				lerr = "Upload one file only.";
			}
			if (event.target.$field.$maxByteLength && event.data.files[0].size > event.target.$field.$maxByteLength) {
				err = "52";
				lerr = "File too large.";
			}
			if (event.target.$field.$acceptedTypes.indexOf(event.data.files[0].type) < 0 || event.data.files[0].type === "") {
				err = "53";
				lerr = "File type not supported.";
			}
			if (err) {
				session = evtHandlingObj.controller.getSession();
				messErr = [session.getlabel("error", err, lerr)];
				error = true;
			}
			syraUtil.getFusionPageMeta(event.target).winModel.setFieldError(event.target, messErr, !error);
			if (reply) {
				if (error) {
					return undefined;
				} else {
					if (event.data.doEvent)
						event.data.doEvent();
				}
			}
		}
		return error;
	}

	function _uploadCtrlFile(event) {}

	function onFieldClick(event, force) {
		// syraUtil.log("onFieldClick",event,force)
		var processed = undefined,
			fieldInfo;
		if (event.target && (fieldInfo = _getFieldInfo(event.target)) && (force || !evtTools.discardFieldEvent(event.type, fieldInfo))) {
			var nativeEvt = event && event.data && event.data.nativeEvt;
			// What should we do with this event?
			if (!fieldInfo.readOnlyByModel && !this.sapController.hasFocus(fieldInfo.fieldIst)) {
				event.result = {
					"$act": !fieldInfo.isIco ? requestActions.getSrvAction("SRV_GETFOCUS") : requestActions.getSrvActionEX("SUP_FIELD_ICOCLICK")
				};
				event.result.params = {
					"target": fieldInfo.fieldIst
				};
				if (event.data.doEvent) {
					event.result.post = {
						"callback": event.data.doEvent,
						"args": []
					};
				} else
				if (fieldInfo.type == syraUtil.dataTypes.flash) {
					event.result.post = {
						"exposeReply": false,
						"callback": function(evtHandlingObj, $fld, fldIst) {
							return {
								"$act": requestActions.getSrvAction("SRV_GETFOCUS"),
								"params": {
									"v": "",
									"target": fldIst
								}
							};
						},
						"args": [this, event.target, fieldInfo.fieldIst]
					};
				}
				processed = true;
			} else
			if (!fieldInfo.readOnlyByModel) {
				if (fieldInfo.isIco) {
					event.result = {
						"$act": requestActions.getSrvAction("SRV_KIB")
					};
					event.result.params = {
						"target": fieldInfo.fieldIst
					};
					processed = true;
				}
			}
			if (fieldInfo.readOnlyByModel) {
				this.sapController.setLocalIst(fieldInfo.fieldIst);
			}
		} else {
			// Let it be!
		}
		return processed;
	}

	function onDatePickerClick(event) {
		var processed = undefined,
			fieldInfo, currValue, fieldCxt, self = this;
		if (event.target && (fieldInfo = _getFieldInfo(event.target))) {
			if (!fieldInfo.readOnlyByModel && !this.sapController.hasFocus(fieldInfo.fieldIst)) {
				// Request focus
				event.result = {
					"$act": requestActions.getSrvAction("SRV_GETFOCUS")
				};
				event.result.params = {
					"target": fieldInfo.fieldIst
				};
				event.result.post = {
					"callback": function(evtHandlingObj, initialEvent, callerField) {
						var fieldContext = evtHandlingObj.sapController.getCurrInst();
						evtTools.openDatePicker(true, fieldContext.raw ? svcFmt.formReply(fieldContext.raw, fieldContext.fmt) : null, evtHandlingObj, initialEvent, callerField, fieldInfo);
					},
					"args": [this, event, event.target, fieldInfo]
				};
				processed = true;
			} else
			if (!fieldInfo.readOnlyByModel && !syraUtil.getPopupDateFromField(event.target)) {
				// Open picker
				fieldCxt = this.sapController.getCurrInst();
				currValue = fieldInfo.winModel.getDataInputValue(fieldInfo.fieldIst.xid, fieldInfo.fieldIst.nl);
				if (currValue && currValue.v) {
					event.result = {
						"$act": requestActions.svcFormat
					};
					event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.toRaw, currValue.v, fieldCxt.fmt, fieldInfo.type, fieldInfo.fieldIst);
					event.result.post = {
						"callback": evtTools.openDatePicker,
						"args": [this, event, event.target, fieldInfo]
					};
					processed = true;
				} else {
					setTimeout(function() {
						evtTools.openDatePicker(true, null, self, event, event.target, fieldInfo);
					}, 10);
					processed = true;
				}
			}
			if (fieldInfo.readOnlyByModel && !syraUtil.getPopupDateFromField(event.target)) {
				// Nothing... sorry!
				this.sapController.setLocalIst(fieldInfo.fieldIst);
				processed = true;
			}
		} else {
			// Let it be!
		}
		return processed;
	}

	function onDatePickerClose(event) {
		var processed = undefined,
			fieldInfo, fieldCxt;
		if (event.target && (fieldInfo = _getFieldInfo(event.target)) && this.sapController.hasFocus(fieldInfo.fieldIst)) {
			fieldCxt = this.sapController.getCurrInst();
			event.result = {
				"$act": requestActions.svcFormat
			};
			event.result.params = svcFmt.buildRqst(svcFmt.fmtSvc.rawToEdit, event.data.internalValue, fieldCxt.fmt, fieldInfo.type, fieldInfo.fieldIst);
			event.result.post = {
				"callback": function(succeeded, reply, evtHandlingObj, initialEvent, callerField, callerFieldInfo) {
					if (evtHandlingObj.sapController.hasFocus(callerFieldInfo.fieldIst)) {
						initialEvent.data.doStatements({
							"value": svcFmt.getReplyResult(reply)
						});
						delete initialEvent.doStatements;
					}
				},
				"args": [this, event, event.target, fieldInfo]
			};
			processed = true;
		}
		return processed;
	}

	function onFieldClickPicker(event) {
		var processed = undefined,
			pickerType, fieldInfo = null,
			isCtx = false,
			params = null,
			acts = null;
		if (event.data) {
			// Init
			if ((pickerType = event.data.pickerType)) {
				switch (pickerType) {
					case "menus":
						params = (fieldInfo = _getFieldInfo(event.target)) ? {
							"target": fieldInfo.fieldIst
						} : null;
						isCtx = true;
						var menusPopup = event.target && event.target.menusPopup;
						if (fieldInfo && !menusPopup) {
							// Ctx popup is not already displayed
							acts = {
								hasFocus: {
									act: "SRV_OPEN_CTXMENU",
									ex: false
								},
								setFocus: {
									act: "SUP_FIELD_CTX",
									ex: true
								}
							};
						} else
						if (menusPopup && event.data.doEvent) {
							// Ctx popup is already displayed : force close popup
							event.data.doEvent();
							delete event.data.doEvent;
						}
						break;
					case "$tunnel":
						acts = {
							hasFocus: {
								act: "SRV_TUNNEL",
								ex: false
							},
							setFocus: {
								act: "SUP_FIELD_DRILL",
								ex: true
							}
						};
						break;
					case "$lookup":
						acts = {
							hasFocus: {
								act: "SUP_CURRENTFIELD_SELECT",
								ex: true
							},
							setFocus: {
								act: "SUP_FIELD_SELECT",
								ex: true
							}
						};
						break;
					case "date":
						return onDatePickerClick.call(this, event);
						break;
					case "help":
						return evtTools.onFieldHelp(event, _getFieldInfo(event.target));
						break;
					default:
						// Field own picker, like  "choice arrow",  etc...
						return onFieldClick.call(this, event, true);
						break;
				}
			}
			fieldInfo = fieldInfo || _getFieldInfo(event.target);
			// Set action...
			if (acts && fieldInfo && !fieldInfo.readOnlyByModel) {
				if (this.sapController.hasFocus(fieldInfo.fieldIst)) {
					event.result = {};
					event.result.$act = acts.hasFocus.ex ? requestActions.getSrvActionEX(acts.hasFocus.act) : requestActions.getSrvAction(acts.hasFocus.act);
					event.result.params = acts.hasFocus.ex ? {
						"target": fieldInfo.fieldIst
					} : params;
				} else {
					event.result = {};
					event.result.$act = acts.setFocus.ex ? requestActions.getSrvActionEX(acts.setFocus.act) : requestActions.sSrvAction(acts.setFocus.act);
					event.result.params = {
						"target": fieldInfo.fieldIst
					};
				}
				if (event.data.doEvent && isCtx) {
					var exclude = undefined;
					var links = event.target && event.target.$menus;
					if (links) {
						if (links.$tunnel) {
							exclude = {};
							exclude[new String(requestActions.getSrvAction("SRV_TUNNEL"))] = true;
						}
						if (links.$lookup) {
							exclude = exclude || {};
							exclude[new String(requestActions.getSrvAction("SRV_BOITE_SELECTION"))] = true;
						}
					}
					event.result.post = {
						"exposeReply": isCtx,
						"callback": isCtx ? evtTools.openFieldCtx : event.data.doEvent,
						"args": isCtx ? [this, event, event.target, fieldInfo, exclude] : []
					};
				}
				processed = true;
			}
		} else {
			// Let it be!
		}
		return processed;
	}

	function onFieldChange(event) {
		// syraUtil.log("onFieldChange",event)
		var nativeEvt = event && event.data && event.data.nativeEvt;
		var processed = undefined,
			fieldInfo, hasFocus, oldValue;
		if (event.target && (fieldInfo = _getFieldInfo(event.target))) {
			// What should we do with this event?
			hasFocus = this.sapController.hasFocus(fieldInfo.fieldIst);
			if (fieldInfo.isCombo && hasFocus) {
				event.result = evtTools.getliveNotifyValueParams(fieldInfo.fieldIst, null, requestActions.getSrvAction("SRV_GETFOCUS"));
				processed = true;
			} else
			if (fieldInfo.isCheck || fieldInfo.isRadio) {
				oldValue = fieldInfo.winModel.getDataStoreValue(fieldInfo.$fieldMeta.$bind, fieldInfo.fieldIst.nl, false, true);
				if (fieldInfo.isCheck) {
					oldValue = oldValue !== sapUtil.check.off && oldValue !== sapUtil.check.on ? sapUtil.check.off : oldValue;
				}
				event.result = evtTools.getliveNotifyValueParams(fieldInfo.fieldIst, {
					"exposeReply": true,
					"callback": evtTools.toggleFieldAfterClick,
					"onErrCallBack": evtTools.restoreFieldAfterClick,
					"args": [this, event.target, fieldInfo.fieldIst, event.target.getDataValue(nativeEvt), !hasFocus, (!hasFocus) ? requestActions.getSrvAction("SRV_GETFOCUS") : null, oldValue]
				}, requestActions.getSrvAction("SRV_GETFOCUS"));
				processed = true;
			}
		} else {
			// Let it be!
		}
		return processed;
	}
};