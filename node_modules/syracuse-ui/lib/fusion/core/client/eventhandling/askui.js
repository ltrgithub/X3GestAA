"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion "Askui" windows event handling classes
 */

var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var Askui = require('../sap/askui');

var _evtProcAskui = {};
exports.AskuiEventHandling = _evtProcAskui;

/* "Askui dialogs" events handling class for "Askui" et cie controls */
_evtProcAskui.sap = function() {
	this.eventListeners = function() {
		return [
		["sap.extdlg.loaded", onDlgLoaded, false, false], ["sap.extdlg.activate", onDlgActivate, false, false], ["sap.extdlg.abort", onAbort, false, false], ["wdgt.link.click", onClick, true, true], ["wdgt.win.close", onClose, true, true], ["wdgt.file.upload", onFileUpload, true, true], ["wdgt.file.uploadSucceeded", onFileUploadSucceeded, true, true], ["wdgt.file.uploadDone", onFileUploadDone, true, true]];
	};

	function _updateLinksStatus(page, links) {
		var i, len = links.length,
			updateItem = {
				"$links": {}
			};
		for (i = 0; i < len; i++) {
			updateItem.$links[links[i].$bind] = {
				"$isDisabled": links[i].$isDisabled
			};
		}
		page.applyChange(updateItem);
	}

	function _isOurUploadFld(self, field) {
		return field && field === self._ctx.upLoadStatus.field;
	}

	function _initUploadDlg(self, dialog, dialogName) {
		/*Askui RETOUR = ""  With   "UIAsk=" + chr$(1) + "upLoadFile",
		& "UIUrl=" + chr$(1) + "/sdata/x3/erp/SUPERV/$service/upload?fileName='{$fileName}'",
		& "UIMaxLength=" + chr$(1) + "222222222",
		& "UIFilename=" + chr$(1) + "$myfileName"*/

		var boundFields, uploadFldBind, uploadFlName, statementParams;
		self._ctx.upLoadStatus = {};
		if ((boundFields = syraUtil.getBoundFldsFromPage(dialog)) && (statementParams = self._ctx.statementParams)) {
			// Init data and meta (i.e. filters...)
			uploadFldBind = self.askuiController.getFieldName(dialogName, "upLoadFld");
			uploadFlName = self.askuiController.getFieldName(dialogName, "upLoadflName");
			self._ctx.upLoadStatus.field = boundFields[uploadFldBind][0];
			// Parse URL to retrieve File Name... if one has been defined: 
			if (statementParams.UIFilename && statementParams.UIUrl.indexOf(statementParams.UIFilename) >= 0) {
				statementParams.UIUrl = statementParams.UIUrl.replace(statementParams.UIFilename, uploadFlName);
				self._ctx.upLoadStatus.$fileName = uploadFlName;
			}
			self._ctx.upLoadStatus.field.setDataBind({
				"$url": statementParams.UIUrl,
				"$type": "binary"
			}, {}, null, null);
			self._ctx.upLoadStatus.field._$$inputFile.trigger("click");
		}
	}

	function onFileUpload(event, data) {
		var processed = undefined,
			sizeOk = true,
			dataChange = {}, files;
		if (_isOurUploadFld(this, event.target) && event.data && (files = event.data.files) && files.length > 0) {
			if (this._ctx.statementParams.UIMaxLength && files[0].size > parseInt(this._ctx.statementParams.UIMaxLength, 10)) {
				//sizeOk = false;
			}
			if (sizeOk) {
				if (this._ctx.upLoadStatus.$fileName) {
					dataChange[this._ctx.upLoadStatus.$fileName] = files[0].name;
					this._ctx.currDlg.applyChange(dataChange);
				}
				this._ctx.statementPending = true;
				_updateLinksStatus(this._ctx.currDlg, [{
					"$bind": "$ok",
					"$isDisabled": true
				}, {
					"$bind": "$cancel",
					"$isDisabled": true
				}]);
			}
		} else {
			processed = true;
		}
		return processed;
	}

	function onFileUploadSucceeded(event) {
		var processed = undefined;
		if (_isOurUploadFld(this, event.target)) {
			this._ctx.upLoadStatus.succeeded = true;
			this._ctx.statementPending = false;
			_updateLinksStatus(this._ctx.currDlg, [{
				"$bind": "$ok",
				"$isDisabled": false
			}, {
				"$bind": "$cancel",
				"$isDisabled": false
			}]);
			// Should close automaticaly our "upload" dialog?? => call "onClose()."
		}
		return processed;
	}

	function onFileUploadDone(event) {
		var processed = undefined;
		if (_isOurUploadFld(this, event.target)) {
			this._ctx.statementPending = false;
			_updateLinksStatus(this._ctx.currDlg, [{
				"$bind": "$cancel",
				"$isDisabled": false
			}]);
		}
		return processed;
	}

	function _closeDlg(self) {
		self.askuiController.closeDialog();
		_releaseCtx.call(self);
	}

	function onDlgLoaded(event, dialogId, dialogName, askStatement, callbackAct) {
		var isUploadDlg = dialogName == "upload",
			page = event.target;
		_release.call(this);
		this._ctx = {
			"currDlg": page,
			"statement": askStatement,
			"statementParams": event.data,
			"callback": callbackAct
		};
		if (isUploadDlg) {
			_initUploadDlg(this, page, dialogName);
		}
	}

	function onDlgActivate(event, dialogId) {

	}

	function onClick(event) {
		var processed = undefined,
			linkId = null,
			ret = {
				"closeLink": false
			}, status = Askui.returnStatus.cancel,
			self = this;
		if (event.target && (linkId = event.target.$bind)) {
			switch (linkId) {
				case "$ok":
					status = Askui.returnStatus.success;
				case "$cancel":
				default:
					ret.closeLink = true;
					break;
			}
			if (ret.closeLink && !this._ctx.statementPending) {
				setTimeout(function() {
					self._ctx.callback(status);
					_closeDlg(self);
				}, 10);
				processed = true;
			}
		}
		return processed;
	}

	function onClose(event) {
		if (!event.target) {
			event.target = {};
		}
		event.target.$bind = "$cancel";
		return onClick.call(this, event);
	}

	function onAbort(event) {
		var processed = undefined;
		_release.call(this);
		return processed;
	}

	function _releaseCtx() {
		if (this._ctx) {
			delete this._ctx.currDlg;
			delete this._ctx.callback;
			delete this._ctx.statementParams;
			if (this._ctx.upLoadStatus) {
				delete this._ctx.upLoadStatus.field;
			}
		}
	}

	function _release() {
		_releaseCtx.call(this);
		if (this._ctx) {
			delete this._ctx;
		}
	}
};