"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Common tools for Fusion event handling
 */
var util = require('syracuse-ui/lib/fusion/tools/util');
var requestActions = require('../sap/srvactions');
var utilBis = require('syracuse-ui/lib/fusion/tools/utilFdb');
var msgBox = require('syracuse-ui/lib/fusion/core/client/sap/msgbox');

var _cvgLinkPrefK = "_cvgDynLink_";
var _processOnClickForTypes = {};

function _getProcessOnClickForTypes() {
	if (!_processOnClickForTypes) {
		var type = _processOnClickForTypes = {};
		type[syra_fusion.syraUtil.dataTypes.booleanType] = true;
		type[syra_fusion.syraUtil.dataTypes.rtfType] = true;
		type[syra_fusion.syraUtil.dataTypes.iconType] = true;
		type[syra_fusion.syraUtil.dataTypes.htmlType] = true;
		type[syra_fusion.syraUtil.dataTypes.imageType] = true;
		type[syra_fusion.syraUtil.dataTypes.choiceType] = false;
		type[syra_fusion.syraUtil.dataTypes.flash] = false;
	}
	return _processOnClickForTypes;
}


function _getCvgLinkIdInArticle(article, links) {
	var i, len, mnus = article.menuItems,
		mnusArray = mnus ? Object.keys(mnus) : [],
		found = false,
		sb;
	for (i = 0, len = mnusArray.length; i < len; i++) {
		if (mnusArray[i].indexOf(_cvgLinkPrefK) >= 0) {
			sb = mnus[mnusArray[i]][0].$sourceBind;
			links[sb || mnusArray[i]] = null;
			found = true;
		}
	}
	return found;
}

function _showSessInfo(sapController, currField, filedInf, curWin) {
	var diagnoses = [],
		info = sapController._session.getSessInfo(),
		boxParams, boxOpts, lastWin, fmt, fn = "",
		fnEx;
	lastWin = sapController._wndwsStack.getWindow(sapController._wndwsStack.length());
	fmt = lastWin && currField ? lastWin.getDataFmt(currField.xid, currField.nl || 1) : "???";
	if (filedInf.$field && (fnEx = filedInf.$field.$X3Name)) {
		fnEx = fnEx.split("_");
		fn = fnEx.length > 1 ? (fnEx[1] + " - screen : " + fnEx[0]) : fnEx[0];
	}
	fnEx = fn && currField.xid ? (fn + " - code : " + currField.xid) : (currField.xid || "???");
	fnEx += fmt ? (" (format : " + fmt) + ")" : "";
	diagnoses.push(util.makeDiagnosis("Current field is : " + fnEx, "info", null, 0, null, "", null, []));
	if (filedInf && filedInf.$field) {
		diagnoses[0].$diagnoses.push(util.makeDiagnosis("Current Fied informations", "info", utilBis.formatJson(filedInf.$field), 1));
	}
	if (filedInf && filedInf.$fieldMeta) {
		diagnoses[0].$diagnoses.push(util.makeDiagnosis("Current Fied layout properties", "info", utilBis.formatJson(filedInf.$fieldMeta), 1));
	}
	_.each(info, function(value, key) {
		diagnoses[0].$diagnoses.push(util.makeDiagnosis(key + " informations", "info", utilBis.formatJson(value), 1));
	});
	if (lastWin) {
		diagnoses[0].$diagnoses.push(util.makeDiagnosis("Windows informations", "info", utilBis.formatJson(lastWin._mdata), 1));
	}
	boxParams = util.diagnosesToOurErrEx(diagnoses);
	msgBox.setMsgBoxDefaultProp(boxParams, 0, 0, null, null, true);
	boxOpts = msgBox.getMsgBoxOpts.call(sapController, boxParams);
	boxOpts.callback = function() {
		if (currField) {
			sapController._wndwsStack.setFocus(currField.win, true, syra_fusion.sapUtil.focusStyle.std.code, currField.xid, currField.nl || 1, true);
		}
	};
	setTimeout(function() {
		syra_alert.modal(boxOpts);
	}, 50);
}

function _getArrayMetaLink(field, fieldInfo, line, rcdLevel, arrayLevel, links, sapController, raz) {
	var change = {
		"$isPartialDelta": true
	}, bind = fieldInfo.$fieldMeta.$bind,
		collName = bind ? syra_fusion.sapUtil.getBlockInst(bind) : null,
		filled = false;
	var root, uuid = bind && fieldInfo && fieldInfo.winModel;
	var article, list = fieldInfo.array,
		cap = list && list.$capability;
	if (arrayLevel && uuid) {
		root = change.$properties = {};
		root = root[collName] = {};
	} else
	if ((uuid = uuid ? fieldInfo.winModel.getCollRcdUUID(collName, line) : null) !== null) {
		root = change[collName] = [{
			"$uuid": uuid,
			"$index": line - 1
		}];
		root = root[0];
		if (!rcdLevel) {
			root.$properties = {};
			root = root.$properties[bind] = {};
		}
	}
	if (uuid !== null) {
		// Just force raz
		if (raz) {
			//if ((article = field.articleParent) && article.menuItems) {
			if ((article = field) && article.menuItems) {
				root.$links = {};
				filled = _getCvgLinkIdInArticle(article, root.$links);
			}
		} else
		if (links) {
			// Add links
			_.each(links, function(value, key) {
				this[key] = value;
			}, root);
			filled = true;
		}
		// Set meta on 'capabilities' links
		if (!raz && cap) {
			// Check status & rules on insert/delete
			if (!root.$links) {
				root.$links = {};
			}
			if (rcdLevel && (cap.insert || cap["delete"])) {
				if (exports.CommonEventHandlingTools.getGridRecordLinks(list, cap, collName, fieldInfo, sapController, root.$links)) {
					filled = true;
				}
			} else
			if (arrayLevel && (cap["deleteAll"] || cap["copy"])) {
				if (exports.CommonEventHandlingTools.getGridLinks(list, cap, collName, fieldInfo, sapController, root.$links)) {
					filled = true;
				}
			}
		}
	}
	return filled ? change : null;
}

exports.CommonEventHandlingTools = {
	getGridRecordLinks: function(grid, capabilities, bind, fieldInfo, sapController, links) {
		var status, defined = false;
		var isGridDisabled = fieldInfo.winModel.getEntityMetaByCriteria(bind, "_fullyDisabledAtRuntime", bind, -1);
		var isGridFull = fieldInfo.winModel.isCollFull(bind);
		var lastLine = grid.dataset.length === fieldInfo.nl;
		if (capabilities.insert) {
			status = sapController.isActionEnabled(fieldInfo.winModel.getWinId(), requestActions.getSrvAction("SRV_INSERTLINEGRID"));
			links.$create = {
				"$isHidden": isGridFull || lastLine || isGridDisabled || grid.$orderBy ? true : (status === null ? false : !status)
			};
			defined = true;
		}
		if (capabilities["delete"]) {
			status = sapController.isActionEnabled(fieldInfo.winModel.getWinId(), requestActions.getSrvAction("SRV_DELETELINEGRID"));
			links.$delete = {
				"$isHidden": isGridDisabled || (lastLine && !isGridFull) || grid.$orderBy ? true : (status === null ? false : !status)
			};
			defined = true;
		}
		return defined;
	},
	getGridLinks: function(grid, capabilities, bind, fieldInfo, sapController, links) {
		var status, defined = false;
		var isGridDisabled = fieldInfo.winModel.getEntityMetaByCriteria(bind, "_fullyDisabledAtRuntime", bind, -1);
		var isGridFull = fieldInfo.winModel.isCollFull(bind);
		var recordsSelected = (grid.selector && grid.selector.getSelectedList());
		if (capabilities.deleteAll) {
			if (!isGridFull && grid.dataset.length == 1) {
				status = false;
			} else {
				status = sapController.isActionEnabled(fieldInfo.winModel.getWinId(), requestActions.getSrvAction("SRV_DELETELINESGRID"));
			}
			if (status === null)
				status = true;
			links.$delete = {
				"$isHidden": (isGridDisabled || grid.$orderBy) ? true : !status,
				"$title": syra_local[recordsSelected.length && exports.CommonEventHandlingTools._isArraySelectionContiguous(recordsSelected) ? "flDelete" : "flDeleteAll"]
			};
			if (capabilities.copy) {
				links.$cut = {
					"$isHidden": (isGridDisabled || grid.$orderBy) ? true : ((status && recordsSelected.length && exports.CommonEventHandlingTools._isArraySelectionContiguous(recordsSelected)) ? false : true)
				};
			}
			defined = true;
		}
		if (capabilities.copy) {
			links.$copy = {
				"$isHidden": (isGridDisabled || grid.$orderBy) ? true : (recordsSelected.length && exports.CommonEventHandlingTools._isArraySelectionContiguous(recordsSelected)) ? false : true
			};
			links.$paste = {
				"$isHidden": (isGridDisabled || grid.$orderBy) ? true : !grid.x3LinesCopied
			};
		}
		if (links.$tabularExport) {

		}

		return defined;
	},
	discardFieldEvent: function(evtName, fldInfo) {
		var discard = false;
		switch (evtName) {
			case "click":
				discard = fldInfo.isCheck || fldInfo.isRadio || !_getProcessOnClickForTypes()[fldInfo.type];
				break;
			case "mousedown":
				discard = fldInfo.isCheck || fldInfo.isRadio || _getProcessOnClickForTypes()[fldInfo.type];
				break;
			default:
				break;
		}
		return discard;
	},
	openDatePicker: function(succeeded, result, evtHandlingObj, initialEvent, field, callerFieldInfo, force) {
		var value = null;
		if (field && !field.disposed && (evtHandlingObj.sapController.hasFocus(callerFieldInfo.fieldIst) || force) && !syra_fusion.syraUtil.getPopupDateFromField(field)) {
			if (!succeeded) {
				// New behavior according US #101357-45
				value = "";
			} else {
				value = result ? parseInt(result.result, 10) : (result === "" ? result : null);
			}
			initialEvent.data.doEvent(value !== null ? {
				"internalValue": value
			} : value);
			callerFieldInfo.winModel.setFieldError(field, null, true);
		}
		delete initialEvent.data.doEvent;
	},
	closeDatePicker: function(evtHandlingObj, event, fieldInfo, fieldFormat) {
		var fmtW = evtHandlingObj.sapController.fmtWrapper;
		var fmtOuput = fmtW.formatSvc(fmtW.svcFormatterID.rawToEdit, event.data.internalValue, fieldFormat, fieldInfo.type);
		event.data.doStatements({
			"value": fmtOuput.result
		});
		delete event.data.doStatements;
	},
	openFieldCtx: function(reply, evtHandlingObj, initialEvent, field, fieldInfo, exclude, readOnly) {
		if (field && !field.disposed) {
			var ctxEx = [],
				article, lkEx = {}, ctx = evtHandlingObj.sapController.getTargetCtxMenuFromReply(reply),
				meta, arrayLevel, rcdLevel = null,
				cellLevel = null,
				openCtx = false;
			if (ctx) {
				// Get items
				_.each(ctx, function(item, idx) {
					if (item[1] && (!exclude || !exclude[item[0]])) {
						this.push({
							"txt": item[2],
							"act": item[0],
							"id": _cvgLinkPrefK + idx
						});
					}
				}, ctxEx);
			}
			if (field.arrayLevel && field.arrayLevel === "array") {
				var me = (readOnly ? {} : {
					"txt": evtHandlingObj.controller.getSession().getlabel("text", 200, "Export excel"),
					"act": "2",
					"id": "$tabularExport"
				});
				if (exports.CommonEventHandlingTools._checkCtxMenuEntry(me)) {
					ctxEx.push(me);
				}
				arrayLevel = true;
			} else
			if (field.arrayLevel) {
				rcdLevel = field.arrayLevel === "record";
				cellLevel = field.arrayLevel === "cell";
			}
			if (ctxEx.length > 0) {
				evtHandlingObj.sapController.setCurrCtxMenu(ctxEx);
				syra_fusion.sapUtil.appendMnus2Syra(lkEx, ctxEx, false);
				openCtx = true;
			}
			if (arrayLevel || rcdLevel !== null) {
				if ((meta = _getArrayMetaLink(field, fieldInfo, fieldInfo.nl, rcdLevel, arrayLevel, null, null, true))) {
					// Raz convergence old items
					field.page.applyChange(meta);
				}
				if ((meta = _getArrayMetaLink(field, fieldInfo, fieldInfo.nl, rcdLevel, arrayLevel, openCtx ? lkEx : null, evtHandlingObj.sapController))) {
					// Add new items
					field.page.applyChange(meta);
					openCtx = true;
				} else
				if (rcdLevel) {
					// Warning : openCtx should be always true for "arrayLevel", even if "meta" == null... cause cardview item
					openCtx = true;
				} else
				if (cellLevel) {
					// Warning : openCtx should be true if there is tunnel, even if meta null
					if (field.$menus && field.$menus.$tunnel) {
						openCtx = true;
					}

				}
			} else
			if (openCtx) {
				meta = {
					"$links": {}
				};
				if (_getCvgLinkIdInArticle(field.articleParent, meta.$links)) {
					// Raz convergence old items
					field.applyMetaData(meta);
				}
				field.applyMetaData(lkEx);
			}
			if (openCtx) {
				initialEvent.data.doEvent();
			}
		}
		delete initialEvent.data.doEvent;
	},
	_isArraySelectionContiguous: function(recordsSelected) {
		if (recordsSelected.length < 1)
			return false;
		var rec = recordsSelected[0];
		for (var i = 1, l = recordsSelected.length; i < l; i++) {
			if ((recordsSelected[i].$serverIndex - rec.$serverIndex) > 1)
				return false;
			rec = recordsSelected[i];
		}
		return true;
	},
	// will be overridden by special client types (like tablet) to remove some of the platform dependent menu entries 
	_checkCtxMenuEntry: function(me) {
		if (me && me.id && me.id === "$tabularExport" && syra_site.isTabletDevice) {
			return false;
		}
		// all items ok by default
		return true;
	},
	getFieldInfo: function(field, nl) {
		var fieldInfo = {
			"readOnlyByModel": false,
			"isRadio": false,
			"isCheck": false,
			"isCombo": false,
			"isIco": false,
			"isDate": false
		};
		if (field && (fieldInfo.$fusionPageMeta = syra_fusion.syraUtil.getFusionPageMeta(field)) && (fieldInfo.$fieldMeta = syra_fusion.syraUtil.getMetaFromObject(field)) && ((fieldInfo.$fusionPageMeta.winModel.getProto())[fieldInfo.$fieldMeta.$bind] || field.arrayLevel === "cell")) {
			fieldInfo.fieldIst = syra_fusion.sapUtil.makeIst(fieldInfo.$fusionPageMeta.winModel.getWinId(), fieldInfo.$fieldMeta.$bind, nl || 0);
			fieldInfo.readOnlyByModel = syra_fusion.syraUtil.isFieldModelReadOnly(fieldInfo.$fusionPageMeta.winModel.getProto(), null, fieldInfo.$fieldMeta.$bind);
			fieldInfo.isReadOnly = field.$isReadOnly ? field.$isReadOnly : false;
			fieldInfo.isDisabled = field.$isDisabled ? field.$isDisabled : false;
			fieldInfo.winModel = fieldInfo.$fusionPageMeta.winModel;
			fieldInfo.type = syra_fusion.syraUtil.getFieldType(field);
			fieldInfo.popupPicker = field.popupPicker;
			if ((fieldInfo.$field = field.$field)) {
				fieldInfo.isCheck = fieldInfo.$field.$type == syra_fusion.syraUtil.dataTypes.booleanType ? true : false;
				if (!fieldInfo.isCheck && fieldInfo.$field.$type == syra_fusion.syraUtil.dataTypes.choiceType) {
					if (fieldInfo.$fieldMeta && fieldInfo.$fieldMeta.$format) {
						fieldInfo.isRadio = fieldInfo.$fieldMeta.$format == syra_fusion.syraUtil.wdgtTypes.radio ? true : false;
					} else {
						fieldInfo.isRadio = fieldInfo.$field.$format == syra_fusion.syraUtil.wdgtTypes.radio ? true : false;
					}
					fieldInfo.isCombo = !fieldInfo.isRadio;
				} else {
					fieldInfo.isIco = fieldInfo.$field.$type == syra_fusion.syraUtil.dataTypes.iconType ? true : false;
				}
			}
		}
		return fieldInfo.$field ? fieldInfo : null;
	},
	toggleFieldAfterClick: function(reply, evtHandlingObj, $field, fieldIst, newValue, notifySrv, act, oldValue, fromGrid) {
		var fieldValue = evtHandlingObj.sapController.getEntityValueInReply(reply, fieldIst),
			value, chain = null;
		if (fieldValue && fromGrid) {
			// Fix SAM 98586
			if (oldValue != fieldValue) {
				newValue = (fieldValue == syra_fusion.sapUtil.check.off ? syra_fusion.sapUtil.check.on : syra_fusion.sapUtil.check.off);
			}
			oldValue = fieldValue;
		}
		if (fieldValue == null || fieldValue === undefined || fieldValue === oldValue) {
			// Ok, field value has not been updated by the server after focus/click, we can process post local update...
			value = util.duplicateObj(fieldIst);
			value.v = newValue;
			evtHandlingObj.sapController.forceValue(value, false, true);
			// ... and finally we inform the server by this change
			if (notifySrv) {
				chain = {
					"$act": act,
					"params": {
						"target": fieldIst
					}
				};
			}
		}
		return chain;
	},
	restoreFieldAfterClick: function(isCrlFailed, reply, evtHandlingObj, $field, fieldIst, newValue, notifySrv, act, oldValue, fromGrid) {
		// Ok, restore old field value... except if the reason is due to a format control exception, or other good reason (cf. SAM #112376)
		var value, fieldValue, ret = null;
		var redirWin, redirBox = evtHandlingObj.sapController.getTargetBoxFromReply(reply);
		if (!redirBox && (redirWin = evtHandlingObj.sapController.getTargetIstFromReply(reply))) {
			redirWin = redirWin.win && redirWin.win != fieldIst.win ? true : false;
		}
		if (redirWin || redirBox) {
			// SAM #112376
			ret = exports.CommonEventHandlingTools.toggleFieldAfterClick(reply, evtHandlingObj, $field, fieldIst, newValue, notifySrv, act, oldValue, fromGrid);
		} else if (!isCrlFailed) {
			fieldValue = evtHandlingObj.sapController.getEntityValueInReply(reply, fieldIst);
			value = util.duplicateObj(fieldIst);
			value.v = fieldValue === null || fieldValue === undefined ? oldValue : fieldValue;
			evtHandlingObj.sapController.forceValue(value, false, true);
		}
		return ret;
	},
	getliveNotifyValueParams: function(fieldIst, post, act) {
		return {
			"$act": act,
			"params": {
				"target": fieldIst
			},
			"post": post
		};
	},
	onFieldHelp: function(evt, fieldInfo) {
		evt.result = {
			"$act": requestActions.svcHelp
		};
		evt.opts = {
			"$link": fieldInfo ? syra_fusion.sapUtil.helpHandler.fld.linkId : syra_fusion.sapUtil.helpHandler.fct.linkId
		};
		return true;
	},
	applyKeyI: function(opt) {
		if (opt.data.shortcuts.esc && opt.data.shortcuts.alt) {
			var fieldInfo = this.getFieldInfo(opt.target);
			var sapController = syra_fusion.syraUtil.getFusionController(opt.target)._sapController;
			var fieldCxt = sapController.getCurrInst();
			_showSessInfo(sapController, fieldCxt, fieldInfo, fieldInfo ? fieldInfo.winModel : null);
			return true;
		}
		return false;
	},
	applyKeyD: function(opt) {
		if (opt.data.shortcuts.esc && opt.data.shortcuts.alt) {
			var sapController = syra_fusion.syraUtil.getFusionController(opt.target)._sapController;
			if (sapController.getSiteController()) {
				(sapController.getSiteController()).toggleLog(true);
			}
			return true;
		}
		return false;
	}
};