"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Common tools for Fusion event handling
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var util = require('syracuse-ui/lib/fusion/tools/util');
var svcFmt = require('syracuse-ui/lib/fusion/core/tools/format').svcFormatter;
var requestActions = require('../sap/srvactions');

function _getArrayMetaLink(fieldInfo, line, rcdLevel, links) {
    var change = null, collName = sapUtil.getBlockInst(fieldInfo.$fieldMeta.$bind);
    var root, uuid = fieldInfo && fieldInfo.winModel ? fieldInfo.winModel.getCollRcdUUID(collName, fieldInfo.nl) : null;
    if(uuid !== null) {
        change = {"$isPartialDelta": true};
        root = change[collName] = [{"$uuid": uuid}];
        root = root[0];
        if(!rcdLevel) {
            root.$properties = {};
            root = root.$properties[fieldInfo.$fieldMeta.$bind] = {};
        }
        _.each(links, function(value, key) {
            this [key] = value;
        }, root);
    }
    return change;
 }

exports.CommonEventHandlingTools = {
    openDatePicker: function(succeeded, result, evtHandlingObj, initialEvent, field, callerFieldInfo){
        var session;
        if (evtHandlingObj.sapController.hasFocus(callerFieldInfo.fieldIst) && !syraUtil.getPopupDateFromField(field)) {
            if (succeeded) {
                initialEvent.data.doEvent(result ? {
                    "internalValue": parseInt(svcFmt.getReplyResult(result), 10)
                } : null);
                callerFieldInfo.winModel.setCurrCtxPopup(field);
            }
            else {
                session = (evtHandlingObj.sapController.getSiteController()).getSession();
                callerFieldInfo.winModel._showFieldError(field, [session.getlabel("error", "22", "Date entered is invalid; calendar can not be opened")]);
            }
        }
        delete initialEvent.data.doEvent;
    },
    openFieldCtx:function(reply, evtHandlingObj, initialEvent, field, fieldInfo, exclude){
        var ctxEx = [], lkEx = {}, ctx = evtHandlingObj.sapController.getTargetCtxMenuFromReply(reply), meta;
        if(!ctx) {ctx=[]}
        if (ctx) {
            // Get items
            _.each(ctx, function(item, idx){
                if (item[1] && (!exclude || !exclude[item[0]])) {
                    this.push({
                        "txt": item[2],
                        "act": item[0],
                        "id": "link" + idx
                    });
                }
            }, ctxEx);
            if(ctxEx.length===0) {
            	ctxEx.push({
                        "txt": evtHandlingObj.controller.getSession().getlabel("error", "54", "no available action"),
                        "act":(fieldInfo && fieldInfo.array)?requestActions.getSrvAction("SRV_COMMANDGRID"):requestActions.getSrvAction("SRV_GETFOCUS"),
                        "id":"link" +(fieldInfo && fieldInfo.array)?requestActions.getSrvAction("SRV_COMMANDGRID"):requestActions.getSrvAction("SRV_GETFOCUS")
                    })
            }
            // Set menu items
            evtHandlingObj.sapController.setCurrCtxMenu(ctxEx);
            sapUtil.appendMnus2Syra(lkEx, ctxEx, false);
            if(!fieldInfo.nl || !field.arrayLevel) {
                field.applyMetaData(lkEx);
            }
            else if((meta = _getArrayMetaLink(fieldInfo, fieldInfo.nl, field.arrayLevel && field.arrayLevel === "record", lkEx))){
                field.page.applyChange(meta);                
            }
            // Open Popup
            initialEvent.data.doEvent();
            fieldInfo.winModel.setCurrCtxPopup(field);
        }
        delete initialEvent.data.doEvent;
    },
    getFieldInfo: function(field,nl){
        var fieldInfo = {
            "readOnlyByModel": false,
            "isRadio": false,
            "isCheck": false,
            "isCombo": false,
            "isIco": false,
            "isDate" : false
        };
        if (field && (fieldInfo.$fusionPageMeta = syraUtil.getFusionPageMeta(field)) && (fieldInfo.$fieldMeta = syraUtil.getMetaFromObject(field)) && ((fieldInfo.$fusionPageMeta.winModel.getProto())[fieldInfo.$fieldMeta.$bind] || field.arrayLevel==="cell")) {
            fieldInfo.fieldIst = sapUtil.makeIst(fieldInfo.$fusionPageMeta.winModel.getWinId(), fieldInfo.$fieldMeta.$bind,nl||0);
            fieldInfo.readOnlyByModel = syraUtil.isFieldModelReadOnly(fieldInfo.$fusionPageMeta.winModel.getProto(), null, fieldInfo.$fieldMeta.$bind);
	 		fieldInfo.isReadOnly=field.$isReadOnly?field.$isReadOnly:false;
	 		fieldInfo.isDisabled=field.$isDisabled?field.$isDisabled:false;
            fieldInfo.winModel = fieldInfo.$fusionPageMeta.winModel;
            fieldInfo.type = syraUtil.getFieldType(field);
            if ((fieldInfo.$field = field.$field)) {
                fieldInfo.isCheck = fieldInfo.$field.$type == syraUtil.dataTypes.booleanType ? true : false;
                if (!fieldInfo.isCheck && fieldInfo.$field.$type == syraUtil.dataTypes.choiceType) {
                    fieldInfo.isRadio = fieldInfo.$field.$format == syraUtil.wdgtTypes.radio ? true : false;
                    fieldInfo.isCombo = !fieldInfo.isRadio;
                }
                else {
                    fieldInfo.isIco = fieldInfo.$field.$type == syraUtil.dataTypes.iconType ? true : false;
                }
            }
        }
        return fieldInfo.$field ? fieldInfo : null;
    },
    toggleFieldAfterClick: function(reply, evtHandlingObj, $field, fieldIst, newValue, notifySrv, act, oldValue){
        var fieldValue = evtHandlingObj.sapController.getEntityValueInReply(reply, fieldIst), value, chain = null;
        if (fieldValue == null || fieldValue === undefined || fieldValue === oldValue) {
            // Ok, field value has not been updated by the server after focus/click, we can process post local update...
            value = util.duplicateObj(fieldIst);
            value.v = newValue;
            evtHandlingObj.sapController.forceValue(value, false, true);
            // ...and finally we inform the server by this change
            if (notifySrv) {
                chain = {"$act": act, "params": {"target": fieldIst}};
            }
        }
        return chain;
    },
    restoreFieldAfterClick: function(isCrlFailed, reply, evtHandlingObj, $field, fieldIst, newValue, notifySrv, act, oldValue){
        // Ok, restore old field value... except if the reason is due to a format control exception
        if(!isCrlFailed) {
            var value = util.duplicateObj(fieldIst);
            value.v = oldValue;
            evtHandlingObj.sapController.forceValue(value, false, true);
        }
        return null;
    },
    getliveNotifyValueParams: function(fieldIst, post, act){
        return {"$act": act, "params": {"target": fieldIst}, "post": post};
    },
    cancelSortArray : function(array, arrayInfo) {
    	if(array.sortCapability && array.sortCapability._$orderBy){
        		array.fetchClientRecordSet({params:{orderBy:null}})
       }
    }

}
