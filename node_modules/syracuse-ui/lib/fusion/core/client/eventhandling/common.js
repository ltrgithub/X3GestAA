"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Common tools for Fusion event handling
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var util = require('syracuse-ui/lib/fusion/tools/util');
var svcFmt = require('syracuse-ui/lib/fusion/core/tools/format').svcFormatter;
var requestActions = require('../sap/srvactions');

var _cvgLinkPrefK = "_cvgDynLink_";
var _processOnClickForTypes = {};
_processOnClickForTypes[syraUtil.dataTypes.booleanType] = true;
_processOnClickForTypes[syraUtil.dataTypes.rtfType] = true;
_processOnClickForTypes[syraUtil.dataTypes.iconType] = true;
_processOnClickForTypes[syraUtil.dataTypes.htmlType] = true;
_processOnClickForTypes[syraUtil.dataTypes.imageType] = true;
_processOnClickForTypes[syraUtil.dataTypes.choiceType] = true;

function _getCvgLinkIdInArticle(article, links) {
	var i, len, mnus = article.menuItems,
		mnusArray = mnus ? Object.keys(mnus) : [],
		found = false,
		sb;
	for (i = 0, len = mnusArray.length; i < len; i++) {
		if (mnusArray[i].indexOf(_cvgLinkPrefK) >= 0) {
			sb = mnus[mnusArray[i]][0].$sourceBind;
			links[sb || mnusArray[i]] = null;
			found = true;
		}
	}
	return found;
}

function _getArrayMetaLink(field, fieldInfo, line, rcdLevel, arrayLevel, links, sapController, raz) {
	var change = {
		"$isPartialDelta": true
	}, bind = fieldInfo.$fieldMeta.$bind,
		collName = bind ? sapUtil.getBlockInst(bind) : null,
		filled = false;
	var root, uuid = bind && fieldInfo && fieldInfo.winModel,
		isListDisabled;
	var list = fieldInfo.array,
		cap = list && list.$capability,
		iStatus, dStatus, isGridFull, lastLine, article;
	if (arrayLevel && uuid) {
		root = change.$properties = {};
		root = root[collName] = {};
	} else if ((uuid = uuid ? fieldInfo.winModel.getCollRcdUUID(collName, line) : null) !== null) {
		root = change[collName] = [{
			"$uuid": uuid,
			"$index": line - 1
		}];
		root = root[0];
		if (!rcdLevel) {
			root.$properties = {};
			root = root.$properties[bind] = {};
		}
	}
	if (uuid !== null) {
		// Just force raz
		if (raz) {
			if ((article = field.getArticle()) && article.menuItems) {
				root.$links = {};
				filled = _getCvgLinkIdInArticle(article, root.$links);
			}
		} else if (links) {
			// Add links
			_.each(links, function(value, key) {
				this[key] = value;
			}, root);
			filled = true;
		}
		// Set meta on 'capabilities' links
		if (!raz && cap) {
			// Check status & rules on insert/delete
			isListDisabled = fieldInfo.winModel.getEntityMetaByCriteria(collName, "_fullyDisabled", collName, -1);
			isGridFull = fieldInfo.winModel.isCollFull(collName);
			if (rcdLevel && (cap.insert || cap["delete"])) {
				lastLine = list.dataset.length === fieldInfo.nl;
				if (!root.$links) {
					root.$links = {};
				}
				if (cap.insert) {
					iStatus = sapController.isActionEnabled(fieldInfo.winModel.getWinId(), requestActions.getSrvAction("SRV_INSERTLINEGRID"));
					root.$links.$create = {
						"$isHidden": isGridFull || lastLine || isListDisabled ? true : (iStatus === null ? false : !iStatus)
					};
				}
				if (cap["delete"]) {
					dStatus = sapController.isActionEnabled(fieldInfo.winModel.getWinId(), requestActions.getSrvAction("SRV_DELETELINEGRID"));
					root.$links.$delete = {
						"$isHidden": isListDisabled || (lastLine && !isGridFull) ? true : (dStatus === null ? false : !dStatus)
					};
				}
				filled = true;
			} else if (arrayLevel && cap["deleteAll"]) {
				if (!isGridFull && list.dataset.length == 1) {
					dStatus = false;
				} else {
					dStatus = sapController.isActionEnabled(fieldInfo.winModel.getWinId(), requestActions.getSrvAction("SRV_DELETELINESGRID"));
				}
				if (!root.$links) {
					root.$links = {};
				}
				root.$links.$delete = {
					"$isHidden": isListDisabled ? true : (dStatus === null ? false : !dStatus)
				};
				filled = true;
			}
		}
	}
	return filled ? change : null;
}

exports.CommonEventHandlingTools = {
	discardFieldEvent: function(evtName, fldInfo) {
		var discard = false;
		switch (evtName) {
			case "click":
				discard = fldInfo.isCheck || (!_processOnClickForTypes[fldInfo.type] || fldInfo.isCombo);
				break;
			case "mousedown":
				discard = fldInfo.isCheck || (_processOnClickForTypes[fldInfo.type] && !fldInfo.isCombo);
				break;
			default:
				break;
		}
		return discard;
	},
	openDatePicker: function(succeeded, result, evtHandlingObj, initialEvent, field, callerFieldInfo) {
		var session;
		if (field && !field.disposed && evtHandlingObj.sapController.hasFocus(callerFieldInfo.fieldIst) && !syraUtil.getPopupDateFromField(field)) {
			if (succeeded) {
				initialEvent.data.doEvent(result ? {
					"internalValue": parseInt(svcFmt.getReplyResult(result), 10)
				} : null);
				callerFieldInfo.winModel.setCurrCtxPopup(field);
			} else {
				session = (evtHandlingObj.sapController.getSiteController()).getSession();
				callerFieldInfo.winModel.showFieldError(field, [session.getlabel("error", "22", "Date entered is invalid; calendar can not be opened")]);
			}
		}
		delete initialEvent.data.doEvent;
	},
	openFieldCtx: function(reply, evtHandlingObj, initialEvent, field, fieldInfo, exclude) {
		if (field && !field.disposed) {
			var ctxEx = [],
				article,
				lkEx = {}, ctx = evtHandlingObj.sapController.getTargetCtxMenuFromReply(reply),
				meta, arrayLevel, rcdLevel = null,
				openCtx = false;
			if (ctx) {
				// Get items
				_.each(ctx, function(item, idx) {
					if (item[1] && (!exclude || !exclude[item[0]])) {
						this.push({
							"txt": item[2],
							"act": item[0],
							"id": _cvgLinkPrefK + idx
						});
					}
				}, ctxEx);
			}
			if (field.arrayLevel && field.arrayLevel === "array") {
				var me = {
					"txt": evtHandlingObj.controller.getSession().getlabel("text", 200, "Export excel"),
					"act": "2",
					"id": "$tabularExport"
				};
				if (exports.CommonEventHandlingTools._checkCtxMenuEntry(me)) {
					ctxEx.push(me);
				}
				arrayLevel = true;
			} else if (field.arrayLevel) {
				rcdLevel = field.arrayLevel === "record";
			}
			if (ctxEx.length > 0) {
				evtHandlingObj.sapController.setCurrCtxMenu(ctxEx);
				sapUtil.appendMnus2Syra(lkEx, ctxEx, false);
				openCtx = true;
			}
			if (arrayLevel || rcdLevel !== null) {
				if ((meta = _getArrayMetaLink(field, fieldInfo, fieldInfo.nl, rcdLevel, arrayLevel, null, null, true))) {
					// Raz convergence old items
					field.page.applyChange(meta);
				}
				if ((meta = _getArrayMetaLink(field, fieldInfo, fieldInfo.nl, rcdLevel, arrayLevel, openCtx ? lkEx : null, evtHandlingObj.sapController))) {
					// Add new items
					field.page.applyChange(meta);
					openCtx = true;
				} else if (rcdLevel) {
					// Warning : openCtx should be always true for "arrayLevel", even if "meta" == null... cause cardview item
					openCtx = true;
				}
			} else if (openCtx) {
				meta = {
					"$links": {}
				};
				if (_getCvgLinkIdInArticle(field.getArticle(), meta.$links)) {
					// Raz convergence old items
					field.applyMetaData(meta);
				}
				field.applyMetaData(lkEx);
			}
			if (openCtx) {
				initialEvent.data.doEvent();
				fieldInfo.winModel.setCurrCtxPopup(field);
			}
		}
		delete initialEvent.data.doEvent;
	},
	// will be overridden by special client types (like tablet) to remove some of the platform dependent menu entries 
	_checkCtxMenuEntry: function(me) {
		// all items ok by default
		return true;
	},
	getFieldInfo: function(field, nl) {
		var fieldInfo = {
			"readOnlyByModel": false,
			"isRadio": false,
			"isCheck": false,
			"isCombo": false,
			"isIco": false,
			"isDate": false
		};
		if (field && (fieldInfo.$fusionPageMeta = syraUtil.getFusionPageMeta(field)) && (fieldInfo.$fieldMeta = syraUtil.getMetaFromObject(field)) && ((fieldInfo.$fusionPageMeta.winModel.getProto())[fieldInfo.$fieldMeta.$bind] || field.arrayLevel === "cell")) {
			fieldInfo.fieldIst = sapUtil.makeIst(fieldInfo.$fusionPageMeta.winModel.getWinId(), fieldInfo.$fieldMeta.$bind, nl || 0);
			fieldInfo.readOnlyByModel = syraUtil.isFieldModelReadOnly(fieldInfo.$fusionPageMeta.winModel.getProto(), null, fieldInfo.$fieldMeta.$bind);
			fieldInfo.isReadOnly = field.$isReadOnly ? field.$isReadOnly : false;
			fieldInfo.isDisabled = field.$isDisabled ? field.$isDisabled : false;
			fieldInfo.winModel = fieldInfo.$fusionPageMeta.winModel;
			fieldInfo.type = syraUtil.getFieldType(field);
			if ((fieldInfo.$field = field.$field)) {
				fieldInfo.isCheck = fieldInfo.$field.$type == syraUtil.dataTypes.booleanType ? true : false;
				if (!fieldInfo.isCheck && fieldInfo.$field.$type == syraUtil.dataTypes.choiceType) {
					fieldInfo.isRadio = fieldInfo.$field.$format == syraUtil.wdgtTypes.radio ? true : false;
					fieldInfo.isCombo = !fieldInfo.isRadio;
				} else {
					fieldInfo.isIco = fieldInfo.$field.$type == syraUtil.dataTypes.iconType ? true : false;
				}
			}
		}
		return fieldInfo.$field ? fieldInfo : null;
	},
	toggleFieldAfterClick: function(reply, evtHandlingObj, $field, fieldIst, newValue, notifySrv, act, oldValue) {
		var fieldValue = evtHandlingObj.sapController.getEntityValueInReply(reply, fieldIst),
			value, chain = null;
		if (fieldValue == null || fieldValue === undefined || fieldValue === oldValue) {
			// Ok, field value has not been updated by the server after focus/click, we can process post local update...
			value = util.duplicateObj(fieldIst);
			value.v = newValue;
			evtHandlingObj.sapController.forceValue(value, false, true);
			// ...and finally we inform the server by this change
			if (notifySrv) {
				chain = {
					"$act": act,
					"params": {
						"target": fieldIst
					}
				};
			}
		}
		return chain;
	},
	restoreFieldAfterClick: function(isCrlFailed, reply, evtHandlingObj, $field, fieldIst, newValue, notifySrv, act, oldValue) {
		// Ok, restore old field value... except if the reason is due to a format control exception
		if (!isCrlFailed) {
			var value = util.duplicateObj(fieldIst);
			value.v = oldValue;
			evtHandlingObj.sapController.forceValue(value, false, true);
		}
		return null;
	},
	getliveNotifyValueParams: function(fieldIst, post, act) {
		return {
			"$act": act,
			"params": {
				"target": fieldIst
			},
			"post": post
		};
	},
	onFieldHelp: function(evt, fieldInfo) {
		evt.result = {
			"$act": requestActions.svcHelp
		};
		evt.opts = {
			"$link": fieldInfo ? sapUtil.helpHandler.fld.linkId : sapUtil.helpHandler.fct.linkId
		};
		return true;
	}
};