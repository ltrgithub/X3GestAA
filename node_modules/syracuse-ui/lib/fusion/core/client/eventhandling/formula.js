"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion "Formula wizard" windows event handling class
 */

var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var util = require('syracuse-ui/lib/fusion/tools/util');
var evtTools = require('../eventhandling/common').CommonEventHandlingTools;
var requestActions = require('../sap/srvactions');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;


var _evtProcFormula = {};
exports.FormulaEventHandling = _evtProcFormula;

/* "Formula wizard dialogs" events handling class */
_evtProcFormula.sap = function() {
	this.eventListeners = function() {
		return [
			["wdgt.list.selline", selectLine, true, true], ["wdgt.field.keydown", keyDown, true, true], ["wdgt.link.click", onClick, true, true]
		];
	};

	function onClick(event) {
		//TODO : à factorise avec grid, list, ...
		var $menu = event.target.$item,
			act;
		if ((act = event.target.$act) || (act = $menu && $menu.$act)) {
			// Action should be an expression...
			if (typeof act == 'string' && act.indexOf("{") >= 0 && (actEx = _getActionId(act))) {
				act = actEx;
			}
			// Native link
			event.result = {
				"$act": act
			};
			event.opts = {
				"$link": event.target.$bind
			};

			var p = event.target.page;
			var val = (p.itemFormula ? p.itemFormula.getDataValue() : "");
			event.result.params = {
				v: val
			};
		}
		return true;
	};

	function keyDown(event) {
		var processed = undefined,
			fieldInfo = _getFieldInfo(event),
			keycode = event.data.nativeEvt.keyCode;
		if (event.target && !sapUtil.isSpecialKey(keycode)) {
			switch (keycode) {
				case keys["VK_ENTER"]:
					return true;
					break;
				case keys["VK_TAB"]:
					return true;
					break;
				case keys["VK_ESCAPE"]:
					return true;
					break;
				default:
					return false;
			}
		}
		return false;
	};

	function selectLine(event) {
		var fieldInfo = _getFieldInfo(event);
		if (fieldInfo.isSpecialNode) {
			event.result = {
				$act: null,
				params: {
					target: {}
				}
			};
			// send a 1071 action 
			event.result.$act = requestActions.getSrvAction("SRV_ELEMENT_FORMULE");
			event.result.params.v = fieldInfo.$key;
			return true;
		} else {
			var itemForm = fieldInfo.target.page.itemFormula;
			itemForm.formulaFull = itemForm.getDataValue();
			if (!itemForm.formulaFull) {
				itemForm.formulaFull = fieldInfo.formula;
			} else {
				if (itemForm.formulaFull.indexOf('%') !== -1) itemForm.formulaFull = itemForm.formulaFull.replace('%', fieldInfo.formula);
				else itemForm.formulaFull = itemForm.formulaFull + fieldInfo.formula;
			}
			itemForm.setInputValue(itemForm.formulaFull.indexOf('%') ? itemForm.formulaFull.replace('%', '') : itemForm.formulaFull);

			return true;
		}
	};

	function _setItemFormula(fieldInfo) {
		if (!fieldInfo.target.page.itemFormula) {
			var keys = Object.keys(fieldInfo.winModel.syraModel.idMap);
			// find AA1
			var found = null;
			for (var i = 0; i < keys.length && !found; i++) {
				var item = fieldInfo.winModel.syraModel.idMap[keys[i]];
				if (item.$item && item.$item.$bind === 'AA1') {
					found = item;
				}
			}
			if (found) {
				fieldInfo.target.page.itemFormula = found;
			}
		}
	};

	function _getFieldInfo(event) {
		var nl = (event.data && event.data.line) ? event.data.line : 0,
			fieldInfo = evtTools.getFieldInfo(_getXElement(event.target), nl),
			$fusionPageMeta = syraUtil.getFusionPageMeta(event.target),
			record, treeNode = null;
		fieldInfo.isLeaf = true;
		fieldInfo.nl = nl;
		fieldInfo.xid = syraUtil.getMetaFromObject(_getXElement(event.target)).$bind;
		fieldInfo.blockIst = sapUtil.makeIst(fieldInfo.fieldIst.win, sapUtil.getBlockInst(fieldInfo.xid), 0);
		fieldInfo.data = event.data;
		fieldInfo.array = _getXElementGrid(event.target);
		fieldInfo.target = event.target;
		_setItemFormula(fieldInfo);
		if (fieldInfo.data.recTarget) {
			var srvIdx = fieldInfo.data.recTarget.dataRecordIndex;
			record = fieldInfo.array.helper.findRecordByServerIndex(fieldInfo.array, srvIdx);
			if (record && (treeNode = record.getTreeNode()) && treeNode.children) {
				fieldInfo.isLeaf = (treeNode.children.length == 0);
			}
			if ((!fieldInfo.isLeaf || treeNode.parentId == "") && fieldInfo.data.recTarget.dataRecord[fieldInfo.blockIst.xid + "0"]) {
				fieldInfo.isSpecialNode = true;
				fieldInfo.$key = fieldInfo.data.recTarget.dataRecord[fieldInfo.blockIst.xid + "0"];
			} else {
				fieldInfo.formula = fieldInfo.data.recTarget.dataRecord.extends5;
			}
		}
		return fieldInfo;
	};
	//TODO : à factorise avec grid, list, ...  

	function _getXElement(field) {
		var arrayLevel = (field.arrayLevel ? field.arrayLevel : (field.getArticle() ? field.getArticle().arrayLevel : field));
		switch (arrayLevel) {
			case "cell":
				return field;
			case "record":
				return field.getArticle().articleParent;
			case "array":
				return field.getArticle();
			default:
				return field;
		}
	};
	//TODO : à factorise avec grid, list, ...  

	function _getXElementGrid(field) {
		var arrayLevel = (field.arrayLevel ? field.arrayLevel : (field.getArticle() ? field.getArticle().arrayLevel : field));
		switch (arrayLevel) {
			case "cell":
				return field.getArticle().articleParent;;
			case "record":
				return ((field.getArticleParent && field.getArticleParent()) || (field.getArticle && field.getArticle().getArticleParent()) || field.articleParent);
			default:
				return field;
		}
	};
	//TODO : à factorise avec Link  ...

	function _getActionId(actionExpr) {
		var actStrg, actTab, ret = null,
			matches = actionExpr.match(/(\{.*?\})/g);
		if (matches && matches.length > 0) {
			if (matches[0].indexOf("@") >= 0) {
				actStrg = matches[0].substr(1, matches[0].length - 2);
				if ((actTab = actStrg.split("@")) && actTab.length > 0) {
					ret = requestActions.getActionByCategorie(actTab[0], actTab[1]);
				}
			} else {
				// Others expression patterns...
			}
		}
		return ret;
	}
};