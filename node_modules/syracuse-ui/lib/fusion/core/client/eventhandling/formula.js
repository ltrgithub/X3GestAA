"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion "Formula wizard" windows event handling class
 */
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var util = require('syracuse-ui/lib/fusion/tools/util');
var evtTools = require('../eventhandling/common').CommonEventHandlingTools;
var requestActions = require('../sap/srvactions');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;


var _evtProcFormula = {};
exports.FormulaEventHandling = _evtProcFormula;

/* "Formula wizard dialogs" events handling class */
_evtProcFormula.sap = function() {
	this.eventListeners = function() {
		return [["wdgt.grid.selline", selectLine, true, true], ["wdgt.field.keydown", keyDown, true, true], ["wdgt.field.keyup", keyUp, true, true], ["wdgt.field.mousedown", onFieldMD, true, true], ["wdgt.field.click", click, true, true], ["wdgt.link.click", onLinkClick, true, true], ["wdgt.record.picker", clickRecordPicker, true, true], ["wdgt.win.close", onClose, true, true], ["wdgt.win.closeall", onCloseAll, true, true], ["wdgt.win.validate", onValidate, true, true]];
	};

	function _getActParams(winFormula) {
		var fld;
		return {
			"v": winFormula && (fld = winFormula._formulaFld) ? fld.getDataValue() : "",
			"xType": syraUtil.dataTypes.stringType,
			"xFmt": sapUtil.fieldModeType.edit
		};
	}

	function clickRecordPicker(event) {
		return undefined;
	}

	function onFieldMD(event) {
		return undefined;
	}

	function click(event) {
		event.target.caretPosition = event.target.getCaretPosition();
		event.target.selectionEnd = event.target.input.selectionEnd;
		event.target.selectionStart = event.target.input.selectionStart;
		return true;
	}

	function helpUrl(event, fieldInfo) {
		var found = _findItem(fieldInfo, "help");
		if (found) {
			if (found.$field.$location.helpKey) {
				event.result = {
					"$act": requestActions.svcHelp,
					"post": {
						"callback": help,
						"args": [found]
					},
				};
				event.opts = {
					"$link": "$4glHelp",
					"$keyword": found.$field.$location.helpKey,
					"$title": ""
				};
			}
		}
		return true;
	}

	function help(url, target, show) {
		var metaData = {};
		//if (show !== undefined) metaData.stt = (show) ? 458711 : 456611;
		target.setDataBind(url, null, metaData, null);
	}

	function onLinkClick(event) {
		//TODO : à factorise avec grid, list, ...
		var act, $menu = event.target.$item;
		if ((act = event.target.$act) || (act = $menu && $menu.$act)) {
			// Action should be an expression...
			if (typeof act == 'string' && act.indexOf("{") >= 0 && (actEx = _getActionId(act))) {
				act = actEx;
			}
			// Native link
			event.result = {
				"$act": act,
				"params": _getActParams(this.winModel)
			};
			event.opts = {
				"$link": event.target.$bind
			};
		}
		return true;
	};

	function onClose(event) {
		event.result = {
			$act: requestActions.getSrvAction("SRV_ABANDON"),
			params: {
				v: ""
			}
		};
		return true;
	};

	function onCloseAll(event) {
		var wins = [];
		for (var ii = (event.target.sheets.length - 1); ii > 0; ii--) {
			wins.push( /*event.target.sheets[ii].$fusionPageMeta.winId*/ null);
		}
		if (wins.length == 0)
			wins.push(null);
		event.result = {
			"$act": requestActions.getSrvActionEX("SUP_WINS_CLOSE"),
			"params": {
				"sudo": wins,
				"v": ""
			},
			post: {
				"callback": function() {
					event.callback();
				},
				"onErrCallBack": function() {
					event.callback();
				},
				"args": [this, event]
			},

		};
		return true;
	}

	function onValidate(event) {
		event.result = {
			"$act": requestActions.getSrvAction("SRV_CHAMP_SUIVANT"),
			"params": _getActParams(this.winModel)
		};
		return true;
	}

	function keyDown(event) {
		var ret = false,
			processed = undefined,
			keycode = event.data.nativeEvt.keyCode;
		if (event.target && !sapUtil.isSpecialKey(keycode)) {
			switch (keycode) {
				case keys["VK_TAB"]:
				case keys["VK_ESCAPE"]:
					ret = true;
					break;
				case keys["VK_ENTER"]:
					ret = this.winModel && event && event.target && event.target == this.winModel._formulaFld ? false : true;
				default:
					ret = false;
			}
		}
		return ret;
	};

	function keyUp(event) {
		event.target.caretPosition = event.target.getCaretPosition();
		event.target.selectionEnd = event.target.input.selectionEnd;
		event.target.selectionStart = event.target.input.selectionStart;
		return false;
	};

	function selectLine(event) {
		var fieldInfo = _getFieldInfo(event),
			found;
		if (fieldInfo.isSpecialNode) {
			event.result = {
				$act: null,
				params: {
					target: {}
				}
			};
			// send a 1071 action 
			event.result.$act = requestActions.getSrvAction("SRV_ELEMENT_FORMULE");
			event.result.params.v = fieldInfo.$key;
			return true;
		} else {
			var itemForm = this.winModel._formulaFld;
			itemForm.formulaFull = itemForm.getDataValue();
			if (itemForm.boxParent.$opened) {
				if (!itemForm.formulaFull) {
					itemForm.formulaFull = fieldInfo.formula;
					itemForm.caretPosition = itemForm.formulaFull;
				} else {
					if (itemForm.formulaFull.indexOf('%') !== -1)
						itemForm.formulaFull = itemForm.formulaFull.replace('%', fieldInfo.formula);
					else
						itemForm.formulaFull = itemForm.formulaFull.substr(0, Math.min(itemForm.caretPosition, itemForm.selectionStart)) + fieldInfo.formula + itemForm.formulaFull.substr(Math.max(itemForm.caretPosition, (itemForm.selectionEnd ? itemForm.selectionEnd : 0)));
				}
				itemForm.setInputValue(itemForm.formulaFull.indexOf('%') ? itemForm.formulaFull.replace('%', '') : itemForm.formulaFull);
				itemForm.caretPosition = itemForm.formulaFull.length;
				itemForm.selectionEnd = itemForm.caretPosition;
				itemForm.selectionStart = itemForm.caretPosition;
			}
			if (fieldInfo.helpKey && (found = _findItem(fieldInfo, "help"))) {
				found.$field.$location.helpKey = fieldInfo.helpKey;
				helpUrl(event, fieldInfo);
			}
			return true;
		}
	};

	function _findItem(fieldInfo, name) {
		var keys = Object.keys(fieldInfo.winModel.syraModel.idMap);
		for (var i = 0; i < keys.length; i++) {
			var item = fieldInfo.winModel.syraModel.idMap[keys[i]];
			if (item.$item && item.$item.$bind === name) {
				return item;
			}
		}
		return null;
	}

	function _getFieldInfo(event) {
		var nl = (event.data && event.data.line) ? event.data.line : 0,
			fieldInfo = evtTools.getFieldInfo(_getXElement(event.target), nl),
			$fusionPageMeta = syraUtil.getFusionPageMeta(event.target),
			record, treeNode = null;
		fieldInfo.isLeaf = true;
		fieldInfo.nl = nl;
		fieldInfo.xid = syraUtil.getMetaFromObject(_getXElement(event.target)).$bind;
		//fieldInfo.blockIst = sapUtil.makeIst(fieldInfo.fieldIst.win, sapUtil.getBlockInst(fieldInfo.xid), 0);
		fieldInfo.data = event.data;
		fieldInfo.array = _getXElementGrid(event.target);
		fieldInfo.target = event.target;
		var recTarget = (fieldInfo.data.uuid !== undefined ? fieldInfo.array.findDataRecord(fieldInfo.data.uuid) : undefined);
		if (recTarget) {
			var srvIdx = recTarget.dataRecordIndex;
			record = fieldInfo.array.findRecordByServerIndex(srvIdx);
			if (record && (treeNode = record.getTreeNode()) && treeNode.children) {
				fieldInfo.isLeaf = (treeNode.children.length == 0);
			}
			if ((!fieldInfo.isLeaf || treeNode.parentId == "") && recTarget.dataRecord[fieldInfo.xid + "2"]) {
				fieldInfo.isSpecialNode = true;
				fieldInfo.$key = recTarget.dataRecord[fieldInfo.xid + "2"];
			} else {
				fieldInfo.formula = recTarget.dataRecord[fieldInfo.xid + "6"];
				fieldInfo.helpKey = (fieldInfo.xid == "fl" ? "" : recTarget.dataRecord[fieldInfo.xid + "5"]);
			}
		}
		return fieldInfo;
	};
	//TODO : à factorise avec grid, list, ...  

	function _getXElement(field) {
		var arrayLevel = field.arrayLevel || (field.articleParent && field.articleParent.arrayLevel);
		if (arrayLevel == "record") {
			return field.articleParent.articleParent;
		}
		return field;
	};
	//TODO : à factorise avec grid, list, ...  

	function _getXElementGrid(field) {
		var arrayLevel = (field.arrayLevel ? field.arrayLevel : (field.articleParent ? field.articleParent.arrayLevel : field));
		switch (arrayLevel) {
			case "cell":
				return field.articleParent.articleParent;
			case "record":
				return field.list || field.articleParent.list;
			default:
				return field;
		}
	};
	//TODO : à factorise avec Link  ...

	function _getActionId(actionExpr) {
		var actStrg, actTab, ret = null,
			matches = actionExpr.match(/(\{.*?\})/g);
		if (matches && matches.length > 0) {
			if (matches[0].indexOf("@") >= 0) {
				actStrg = matches[0].substr(1, matches[0].length - 2);
				if ((actTab = actStrg.split("@")) && actTab.length > 0) {
					ret = requestActions.getActionByCategorie(actTab[0], actTab[1]);
				}
			} else {
				// Others expression patterns...
			}
		}
		return ret;
	}
};