"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview  Asynchronous job registration/management
 */

 
var helpers = require('syracuse-core/lib/helpers');
var util = require('syracuse-ui/lib/fusion/tools/util');
var hosterJobHandler = require('syracuse-ui/lib/jobs/jobsHandler').JobsHandler;


var _KStatementsStub = {"submitted" : "register", "pending": "progress", "done" : "finished"};
var _KuuidProp = "uuid";


function AsyncJobsManagement(){
}

exports.AsyncJobsManagement = helpers.defineClass(AsyncJobsManagement, null, {
    initialize: function(siteController, hosterController) {
        this._siteController = siteController;
        this._hosterController = hosterController;
        this._jobTypesClass = {"report": exports.ReportJob};
        this._jobList = {};
        this._jobsPending = 0;
        this._jobsCount = 0;
    },

    processStatements: function(jobType, statements) {
        var result = {"status": null, "$diagnoses": {}}, i, j, leni, lenj, jobStatements = Object.keys(statements), jobStatement;
        for (i = 0, leni = jobStatements.length; i < leni; i++) {
            jobStatement = jobStatements[i];
            if(_KStatementsStub[jobStatement]) {
                result.$diagnoses[jobStatement] = [];
                for (j = 0, lenj = statements[jobStatement].length; j < lenj; j++) {
                    result.$diagnoses[jobStatement][j] = this[_KStatementsStub[jobStatement]].call(this, jobType, statements[jobStatement][j]);
                }
            }
        }
        return result;
    },

    register: function(jobType, params){
        var id, job = this._jobTypesClass[jobType] ? new this._jobTypesClass[jobType]() : null, ret = true, result, $diag = null;
        if(job) {
            job._typeId = jobType;
            job._phase = "registered";
            id = job.initialize(params);
            this._jobList[id] = job;
            this._jobsPending++;
            this._jobsCount++;
            try {
                // Hoster must check "registered" diagnoses!
                job._hosterJobHandler = new hosterJobHandler();
                result = job._hosterJobHandler.register(job.getProperties(), (job._phase = "started"), job.getProgressScvId());
                if(result.$diagnoses && result.$diagnoses.length > 0) {
                    // TODO : check diagnoses ret = false or true...
                    //$diag = [];
                }
            }
            catch (e){
                // TODO : make execption diagnosis
                $diag = [];
                ret = false;
            }
        }
        return $diag;
    },

    isJobsPending: function(params){
        return this._jobsPending > 0 ? true : false;
    },

    progress: function(params){
        var job = this._jobList[params[_KuuidProp]];
        if(job) {
            // TODO : check $diagnoses
            job._phase = "pending";
        }
        // TODO : notify site hoster!!!
    },

    finished: function(jobType, params){
       var job = this._jobList[params[_KuuidProp]], ret = true;
        if(job) {
            // TODO : check $diagnoses
            job._phase = "done";
            this._jobsPending--;
        }
        // TODO : release/dispose job + notify site hoster + etc...!!!
        return ret;
    },


    releaseAsyncJob: function(jobId, opts){
        var status = false, hosterJH;
        if(this._jobList[jobId] && this._jobList[jobId].release) {
            status = this._jobList[jobId].release(opts);
            if((hosterJH = this._jobList[jobId]._hosterJobHandler) && hosterJH.release) {
                hosterJH.release(this._jobList[jobId].getDeleteScvId());
            }
        }
        if(status) {
            this._jobsPending--;
        }
        return status;
    },

    releaseAllAsyncJobs: function(opts, doDispose){
        var status = true, st, i, len, jobsArray = Object.keys(this._jobList), hosterJH;
        for (i = 0, len = jobsArray.length; i < len; i++) {
            st = this.releaseAsyncJob(jobsArray[i], opts);
            if(doDispose) {
                if((hosterJH = this._jobList[jobsArray[i]]._hosterJobHandler) && hosterJH.dispose) {
                    hosterJH.dispose();
                }
                this._jobList[jobsArray[i]].dispose();
                delete this._jobList[jobsArray[i]];
            }
            status = !st ? false : status;
        }
        this._jobsPending = 0;
        return status;
    },

    dispose: function(){
        this.releaseAllAsyncJobs(null, true)
        delete this._siteController;
        delete this._hosterController;
    }
});


function AsyncJob(){
}

exports.AsyncJob = helpers.defineClass(AsyncJob, null, {   
    initialize: function(props) {
        this._props = props ? util.duplicateObj(props) : {};
        this.trackId = this._props[_KuuidProp] || helpers.uuid.generate();
        return this.trackId;
    },

    release: function(opts){
        return true;
    },

    getDeleteScvId: function(){
        return "delete";
    },

    getProgressScvId: function(){
        return "progress";
    },

    dispose: function(){
    },

    getTrackId: function() {
        return this.trackId;
    },

    getProperties: function() {
        return this._props;
    }
});


function ReportJob(){
}

exports.ReportJob = helpers.defineClass(ReportJob, AsyncJob, {
    initialize: function(params){
        var jobId;
        // TODO : specific statements...
        jobId = exports.AsyncJob.prototype.initialize.call(this, params);
        return jobId;
    },

    getProgressScvId: function(){
        return "getState";
    },

    getDeleteScvId: function(){
        return "cancel";
    },

    release: function(opts){
        // TODO : specific statements...
       return exports.AsyncJob.prototype.release.call(this, opts);
    },

    dispose: function(){
        // TODO : specific statements...
       exports.AsyncJob.prototype.dispose.call(this);
    }
});
