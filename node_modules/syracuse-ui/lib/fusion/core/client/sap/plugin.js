"use strict";

/*
 Copyright (c)2014 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview	Plugin management (Calllog, Callocx, etc...)
 */
var helpers = require('@sage/syracuse-core').helpers;
var util = require('syracuse-ui/lib/fusion/tools/util');

var _pluginConstructors = {};
var _KerrDefCode = {
	"errn": {
		"ok": 0,
		"unknown": 1,
		"internalException": 2,
		"methodNotExist": 3,
		"noDesc": 4,
		"noConstructor": 5,
		"noId": 6,
		"noInstance": 7,
		"popupBlocker": 8
	},
	"errt": {
		"ok": 0,
		"internal": 1,
		"component": 2
	}
};

function plugInCustomErr(errn, errt, mess) {
	this.errn = errn;
	this.errt = errt;
	if (mess) {
		this.message = mess;
	}
}

helpers.defineClass(plugInCustomErr, Error, {});


// Plugin Manager class
exports.PluginManager = helpers.defineClass(function PluginManager(hoster) {
	this._plugins = {};
	this.hoster = hoster;
	this._instances = ["dontremove"];
}, null, {
	dispatchCommand: function(pluginParams, hosterAck) {
		var _dbgInf = {
			"totalduration": (new Date()).getTime(),
			"exceptiondetail": null,
			"trace": null
		};
		var idEx, dummy, command, plugin, constructor = pluginParams && pluginParams.class,
			result = null,
			error = _KerrDefCode.errn.noDesc;
		// Dispatch command
		try {
			if (constructor && (command = pluginParams.method)) {
				error = _KerrDefCode.errn.noConstructor;
				if (_pluginConstructors[constructor]) {
					error = null;
					if (this["_disp_" + command]) {
						result = this["_disp_" + command](constructor, pluginParams);
					} else {
						idEx = this._getIdEx(constructor, pluginParams.id);
						if (idEx && this._plugins[idEx]) {
							result = plugin.obj[command].call(plugin.obj, constructor, pluginParams);
						} else {
							error = !idEx ? _KerrDefCode.errn.noId : _KerrDefCode.errn.noInstance;
						}
					}
				}
			}
		} catch (e) {
			error = e;
			if (e.errn == null && e.errt == null) {
				error.errn = _KerrDefCode.errn.internalException;
				error.errt = _KerrDefCode.errt.internal;
			}
		} finally {
			_dbgInf.totalduration = (new Date()).getTime() - _dbgInf.totalduration;
			if (error) {
				if (constructor) {
					if (typeof error == "number") {
						error = new plugInCustomErr(error, _KerrDefCode.errt.internal);
					}
					result = this._getPluginClassError(constructor, command, pluginParams, error);
				} else {
					// Should not be possible (by protocol)... so we do nothing!
				}
			}
			if (hosterAck) {
				hosterAck(result.action, result.data, result.options);
			}
		}
	},
	_getRank: function() {
		var i, len = this._instances.length,
			rank = -1;
		for (i = 0, len = this._instances.length; i < len; i++) {
			if (this._instances[i] == null) {
				rank = i;
				break;
			}
		}
		if (rank < 0) {
			rank = this._instances.length;
		}
		return rank;
	},
	isPluginsPending: function() {
		var pluginsArray = Object.keys(this._plugins);
		return pluginsArray.length > 0 ? true : false;
	},
	_getIdEx: function(constructor, id) {
		return constructor && id != null ? (constructor + "_" + id) : null;
	},
	_getPluginClassError: function(constructor, command, params, error) {
		var result, dummy = new _pluginConstructors[constructor]();
		this._initializePlugin(dummy);
		result = dummy.onUnexpectedErr(command, params, params.id, error, constructor);
		this._releasePlugin(dummy);
		return result;
	},
	_initializePlugin: function(plugin, data, rank) {
		plugin._pluginManager = this;
		if (data) {
			plugin._data = data;
		}
		if (rank != null) {
			plugin._id = rank;
			plugin._subClass = data.name;
			this._instances[rank] = plugin;
		}
	},
	_releasePlugin: function(plugin) {
		plugin._pluginManager = null;
		if (plugin._id != null) {
			this._instances[plugin._id] = null;
		}
	},
	_disposePlugin: function(id, data, force) {
		var plugin = this._plugins[id];
		var result = plugin.dispose(data, force);
		this._releasePlugin(plugin);
		delete this._plugins[id];
		return result;
	},
	_disp_new: function(constructor, data) {
		try {
			var rank = this._getRank();
			var id = this._getIdEx(constructor, rank);
			this._plugins[id] = new _pluginConstructors[constructor]();
			this._initializePlugin(this._plugins[id], data, rank);
			return this._plugins[id].create(data);
		} catch (e) {
			if (id && this._plugins[id]) {
				this._disposePlugin(id, null, true);
			}
			throw e;
		}
	},
	_disp_delete: function(constructor, data) {
		var result, idEx = this._getIdEx(constructor, data.id);
		if (idEx != null && this._plugins[idEx]) {
			result = this._disposePlugin(idEx, data);
		} else {
			result = this._getPluginClassError(constructor, "delete", data, new plugInCustomErr(idEx != null ? _KerrDefCode.errn.noInstance : _KerrDefCode.errn.noId, _KerrDefCode.errt.internal));
		}
		return result;
	},
	dispose: function() {
		var i, len, pluginsArray = Object.keys(this._plugins);
		for (i = 0, len = pluginsArray.length; i < len; i++) {
			this._disposePlugin(pluginsArray[i], null, true);
		}
		this.hoster = null;
	}
});

// Plugin core class
var Plugin = helpers.defineClass(function Plugin() {}, null, {
	checkError: function(error) {
		if (error.errt != null && error.errt == _KerrDefCode.errt.internal && error.errn != null && this._pluginManager.hoster.getMessLabel) {
			error.message = this._pluginManager.hoster.getMessLabel(error.errn + 54, "error") + (error.message ? (" : " + error.message) : "");
		}
	},
	_serializeResult: function(data, err, method, instanceId) {
		var reply = {
			"method": method,
			"id": instanceId
		};
		if (!err) {
			reply.result = {
				"errn": _KerrDefCode.errn.ok,
				"errm": "",
				"errt": _KerrDefCode.errt.ok,
				"errl": 0
			};
		} else {
			reply.result = {
				"errn": err.errn != null ? err.errn : _KerrDefCode.errn.unknown,
				"errm": err.message,
				"errt": err.errt != null ? err.errt : _KerrDefCode.errt.internal,
				"errl": err.line != null ? err.line : 0
			};
		}
		reply["return"] = data || null;
		return reply;
	},
	serializeReply: function(action, method, instanceId, data, error, opts) {
		return {
			"action": action,
			"data": this._serializeResult(data, error, method, instanceId),
			"options": opts || null
		};
	},
	getFinalURL: function(baseURL) {
		return baseURL.replace("$sessions", "$plugin");
	},
	dispose: function(data, force) {
		return this.destroy(data, force);
	}
});


// Asynchronous Plugin class
var _AsyncPlugin = helpers.defineClass(function() {}, Plugin, {
	launch: function(args, isDebugOn) {
		var err = null,
			winSize = isDebugOn ? 600 : 1;
		var winRef = window.open(this.protocol + args || "", "" + this._id, "width=" + winSize + ",height=" + winSize);
		if (winRef && winRef.close) {
			setTimeout(function() {
				winRef.close();
			}, isDebugOn ? 30000 : 5000);
		} else
		if (!winRef) {
			err = new plugInCustomErr(_KerrDefCode.errn.popupBlocker, _KerrDefCode.errt.internal);
			syra_alert.warn(this._pluginManager.hoster.getMessLabel("76", "error") + "\n" + this._pluginManager.hoster.getMessLabel("77", "error"));
		}
		return err;
	}
});


// Ilog Plugin class
var _IlogPlugin = helpers.defineClass(function() {}, _AsyncPlugin, {
	protocol: "SafeV2ILOGConnector:",
	create: function(params) {
		var ret, appType, error, args = [],
			argP = "/",
			argS = ":",
			argSep = " ",
			i, len;
		var hoster = this._pluginManager.hoster;
		var logger = util.getLog(util.getDefaultLogSwitches(document.syraTrans, {}));
		var isHTTPS = false,
			isDebug = logger && logger.isTraceEnable();
		switch (this._subClass) {
			case "scale":
				appType = "2";
				break;
			default:
				appType = "1";
		}
		args.push(["a", appType]);
		if (isDebug) {
			args.push(["d", "1"]);
		}
		if (isHTTPS) {
			args.push(["h", "1"]);
		}
		args.push(["i", this._id]);
		args.push(["l", hoster.getLang() + "/" + hoster.getLang(true)]);
		if (this._data.module) {
			args.push(["m", this._data.module]);
		}
		args.push(["s", params.cookieSess]);
		args.push(["t", document.title]);
		args.push(["u", this.getFinalURL(hoster.getBaseUrl())]);
		for (i = 0, len = args.length; i < len; i++) {
			args[i] = argP + args[i][0] + argS + args[i][1];
		}
		error = this.launch(args.join(argSep), isDebug);
		return this._serializeReply("PLUGIN_ILOG_ACK_NEW", params.methodId, params.method, error ? 0 : this._id, error);
	},
	destroy: function(params, force) {
		// Nothing special to do at now...
		return force ? {} : this._serializeReply("PLUGIN_ILOG_ACK_CLOSE", 999, params.method, this._id);
	},
	onUnexpectedErr: function(method, params, id, err, constructor) {
		return this._serializeReply("PLUGIN_ILOG_ACK_CLOSE", 999, method, method != "new" ? id : 0, err);
	},
	_serializeReply: function(actionId, methodId, method, instanceId, error) {
		var data = {},
			errCode, errMess;
		if (!error) {
			data.name = methodId.toString();
			switch (data.name.length) {
				case 1:
					data.name = "00" + data.name;
					break;
				case 2:
					data.name = "0" + data.name;
					break;
				default:
					break;
			}
			data.value = "N" + String.fromCharCode(1) + "F" + String.fromCharCode(instanceId);
		} else {
			this.checkError(error);
			errCode = (-1 * error.errn).toString();
			errMess = error.message ? error.message.substring(0, 254) : "";
			data.name = "990";
			data.value = "N" + String.fromCharCode(1) + "X" + errMess.length + "X" + errCode.length + "F" + String.fromCharCode(instanceId) + errMess + errCode;
		}
		return this.serializeReply(actionId, method, instanceId, {
			"property": data
		}, error);
	}
});

// Crystal Report Plugin class
var _CrystalReportPlugin = helpers.defineClass(function() {}, _AsyncPlugin, {
	create: function(params) {
		var ret, error, args = [],
			argP = "/",
			argS = ":",
			argSep = " ",
			i, len;
		var hoster = this._pluginManager.hoster;
		var logger = util.getLog(util.getDefaultLogSwitches(document.syraTrans, {}));
		var isHTTPS = false,
			isDebug = logger && logger.isTraceEnable();
		switch (this._subClass) {
			case "developement":
			default:
				args.push(["a", params.Statement]);
				args.push(["e", params.EndpointProxy]);
				args.push(["g", params.Lang]);
				args.push(["k", params.ReportID]);
				args.push(["p", params.PrintServer]);
				args.push(["t", params.Report]);
				args.push(["v", params.StorageArea || "[REPORT]"]);
				if (params.DBType && params.DBName && params.DBServer) {
					args.push(["o", (params.ODBCName || params.Solution || "") + "~" + (params.ODBCDriver || "") + "^" + params.DBType + "|" + params.DBName + "@" + params.DBServer + ":" + (params.DBPort || "")]);
				}
				this.protocol = "SafeV2ReportDeveloper:";
				break;
		}
		if (isDebug) {
			args.push(["d", "1"]);
		}
		if (isHTTPS) {
			args.push(["h", "1"]);
		}
		args.push(["i", this._id]);
		args.push(["l", hoster.getLang() + "/" + hoster.getLang(true)]);
		args.push(["s", params.cookieSess]);
		args.push(["u", syra_url.addHost("")]);
		for (i = 0, len = args.length; i < len; i++) {
			args[i] = argP + args[i][0] + argS + args[i][1];
		}
		error = this.launch(args.join(argSep), isDebug);
		return this._serializeReply("PLUGIN_CRDEV_ACK", params.method, this._id, error);
	},
	destroy: function(params, force) {
		// Nothing special to do at now...
		return force ? {} : this._serializeReply("PLUGIN_CRDEV_ACK", params.method, this._id);
	},
	onUnexpectedErr: function(method, params, id, err, constructor) {
		return this._serializeReply("PLUGIN_CRDEV_ACK", method, id || 1, err, constructor);
	},
	_serializeReply: function(actionId, method, instanceId, error, constructor) {
		var data = {},
			options = null;
		// Currently we just have a sub-class ("developement")... put keep in mind to add a "switch" statement if any further sub-classes to manage
		data.name = "ReportDev";
		data.value = "";
		options = {
			"autoRelease": true,
			"autoReleaseParams": this._data ? util.duplicateObj(this._data) : {}
		};
		if (!this._data) {
			options.autoReleaseParams.class = constructor;
		}
		options.autoReleaseParams.id = this._id != null ? this._id : instanceId;

		// Error handling
		if (error) {
			this.checkError(error);
			data.value = error.message ? error.message.substring(0, 254) : "";
		}
		return this.serializeReply(actionId, method, instanceId, {
			"property": data
		}, error, options);
	}
});

// COM Plugin class
var _ComPlugin = helpers.defineClass(function() {}, Plugin, {
	create: function(params) {},
	destroy: function(params, force) {},
	onUnexpectedErr: function(method, params, id, err, constructor) {},
	_serializeReply: function(actionId, methodId, method, instanceId, error) {}
});

// Plugin constructors map
_pluginConstructors.ILOG = _IlogPlugin;
_pluginConstructors.COM = _ComPlugin;
_pluginConstructors.CrystalReport = _CrystalReportPlugin;