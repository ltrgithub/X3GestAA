"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Utilities for Fusion Edit Protocol
 */
/* Fusion Legacy Protocol */
function _getRank(inst, type){
    return inst.charCodeAt(type) - 64;
}

exports.Fusion = {
    _fNS: "syraTrans",
    specialScrnId: {
        "buttons": "a",
        "leftZone": "b",
        "gfolder": "c"
    },
    metaNameMap: {
        "xid": "$XID"
    },
    check: {
        "off": 1,
        "on": 2
    },
    dataSetMvt: {
        "del": 0,
        "insrt": 1,
        "delAll": 1024
    },
    screensArray: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "a", "b", "c"],
    statusFlag: {
        "state": 0x0001,
        "readOnly": 0x0002,
        "show": 0x0004,
        "selected": 0x0008
    },
    statusMask: {
        "state": 0x00010000,
        "readOnly": 0x00020000,
        "show": 0x00040000,
        "selected": 0x00080000
    },
    getState: function(stt){
        var state = {};
        state.$isHidden = stt & this.statusMask.show ? !(stt & this.statusFlag.show) : undefined;
        state.$isDisabled = stt & this.statusMask.state ? !(stt & this.statusFlag.state) : undefined;
        state.$isReadOnly = stt & this.statusMask.readOnly ? !!(stt & this.statusFlag.readOnly) : undefined;
        state.$isSelected = stt & this.statusMask.selected ? !!(stt & this.statusFlag.selected) : undefined;
        return state;
    },
    getNumStatus: function(){
        var res = 0, m, f, propName;
        _.each(arguments, function(prop){
            propName = (_.keys(prop))[0];
            m = this.statusMask[propName];
            f = prop[propName] ? this.statusFlag[propName] : 0;
            res = (m != null && f != null) ? (res + m + f) : res;
        }, this);
        return res;
    },
    getWinRank: function(inst){
        return _getRank(inst, 0) - 1;
    },
    isSpecialScrnId: function(instAlpha){
        return _.include(this.specialScrnId, instAlpha.charAt(0));
    },
    isButtonScreen: function(instAlpha){
        return (instAlpha && instAlpha.charAt(0) === exports.Fusion.specialScrnId.buttons ? true : false);
    },
    isTabScreen: function(instAlpha){
        return (instAlpha && instAlpha.charAt(0) === exports.Fusion.specialScrnId.gfolder ? true : false);
    },
    isListScreen: function(instAlpha){
        return (instAlpha && instAlpha.charAt(0) === exports.Fusion.specialScrnId.leftZone ? true : false);
    },
    isListTab: function(instAlpha){
        return (instAlpha && instAlpha.charAt(0) === exports.Fusion.specialScrnId.leftZone && instAlpha.length == 2 ? instAlpha : null);
    },
    isFolderTab: function(instAlpha){
        return (instAlpha && instAlpha.charAt(0) === exports.Fusion.specialScrnId.gfolder && instAlpha.length == 2 ? instAlpha.charAt(1) : null);
    },
    isSpecialWin: function(name){
        return name.charAt(0) === "&";
    },
    getWinId: function(rank){
        return String.fromCharCode(rank + 64);
    },
    getBlockInst: function(instAlpha){
        return instAlpha.substr(0, 2);
    },
    isBlockInst: function(instAlpha){
        return (instAlpha.length == 2);
    },
    getScreenId: function(instAlpha){
        return instAlpha.charAt(0);
    },
    getFirstChild: function(entityName, coll){
        return _.find(coll, function(child, childName){
            var len = entityName.length;
            return (childName.length > len && childName.substring(0, len) == entityName);
        });
    },
    appendMnus2Syra: function(proto, menus){
        if (menus) {
            var links = exports.Syra.mapMnus2Links(menus, "typ", "txt", "act", "id", "rnk", "idf");
            exports.Syra.appendLinks2Proto(proto, links);
        }
    },
    cmpIst: function(a, b){
        var ret = false;
        if (a && b && a.win === b.win && a.xid === b.xid) {
            ret = a.nl === b.nl || a.nl == 0 && b.nl == undefined || b.nl == 0 && a.nl == undefined ? true : false;
            if (!ret && b.nl == undefined || a.nl == undefined) {
                // If "nl" is not defined, we assume it is not significant in the comparaison (lax way...)
                ret = true;
            }
        }
        return ret;
    },
    makeIst: function(win, xid, nl){
        return {
            "win": win,
            "xid": xid,
            "nl": nl || 0
        };
    },
    getTargetIstFromReply: function(reply){
        return reply && reply.sap && reply.sap.target && reply.sap.target.ist ? reply.sap.target.ist : null;
    }
};

/* Syracuse Protocol */
exports.Syra = {
    collectionType: "application/x-collection",
    treeType: "application/x-tree",
    defaultType: "application/x-string",
    pageSectionK: {
        body: "s-page-data",
        menu: "s-page-menus",
        bar: "s-fusion-bar-slot"
    },
    gridFusionK: {
        cont: "s-field-grid-fusion"
    },
    
    getProtoFromPage: function(page){
        return (page ? page.$prototype : null);
    },
    get$FromPage: function(page){
        var $proto = this.getProtoFromPage(page);
        return ($proto ? $proto.$ : null);
    },
    getBoundFldsFromPage: function(page){
        return (page ? page.boundFields : null);
    },
    getBoundMnusFromPage: function(page){
        return (page ? page.menuItems : null);
    },
    getPage: function(syraObject){
        return (syraObject.boxParent ? syraObject.boxParent.getArticle() : syraObject);
    },
    getMetaFromObject: function(syraObject){
        return syraObject.$item;
    },
    getFusionPageMeta: function(syraObject){
        var page = this.getPage(syraObject);
        return (page ? page.$fusionPageMeta : null);
    },
    getFusionController: function(syraObject){
        var page = this.getPage(syraObject);
        return (page ? (page.$fusionPageMeta ? page.$fusionPageMeta.controller : null) : null);
    },
    deleteFusionPageMeta: function(page){
        if (page.$fusionPageMeta) {
            if (page.$fusionPageMeta.winModel) {
                delete page.$fusionPageMeta.winModel;
            }
            if (page.$fusionPageMeta.controller) {
                delete page.$fusionPageMeta.controller;
            }
            delete page.$fusionPageMeta;
        }
    },
    mapMnus2Links: function(mapIn, type, title, action, id, rank, father){
        // TODO : improve with hierarchy!
        var map2;
        return _.map(mapIn, function(mapFrom, idx){
            map2 = null;
            if(mapFrom[action] && mapFrom[action] > 0) {    // HACK... waiting hierarchy spec.
                map2 = {};
                map2[mapFrom[id]] = {
                    "$title": mapFrom[title],
                    "$act": mapFrom[action],
                    "$category": "link"
                };
                return map2;
            }
        });
    },
    appendLinks2Proto: function(proto, links){
        if (proto.$prototype.$links === undefined) {
            proto.$prototype.$links = {};
        }
        _.each(links, function(link){
            if (link) {
                _.extend(proto.$prototype.$links, link);
            }
        });
    },
    msgBox: function(options){
        document.site.showMessage(options);
    },
    setTabFocus: function($tab){
        $tab.$$header.focus();
    },
    isFieldModelReadOnly: function ($model, $field, fieldName){
        if(!$model && $field) {
            var $fusionPageMeta = exports.Syra.getFusionPageMeta($field);
            var $fieldMeta = exports.Syra.getMetaFromObject($field);
            if ($fusionPageMeta && $fieldMeta) {
                $model = $fusionPageMeta.winModel.getProto();
                fieldName = $fieldMeta.$bind;
            }
        }
        return $model && fieldName && $model[fieldName] && $model[fieldName].$isReadOnly ? true : false;
    }
};
// FDB
exports.fixtureMode = function(o){
    return exports.Syra.getFusionController(o).isFixtureMode()
};
