"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Utilities for Fusion Edit Protocol
 */
var util = require('syracuse-ui/lib/fusion/tools/util');
var speckeys = require('syracuse-ui/lib/fusion/tools/constant').keybordSpecialKey;

/* Fusion Legacy Protocol */

function _getRank(inst, type) {
	return inst.charCodeAt(type) - 64;
}

exports.Fusion = {
	_fNS: "syraTrans",
	cnxStatus: {
		"unestablished": 0x0000,
		"establishing": 0x0001,
		"polling": 0x0002,
		"established": 0x0004,
		"closing": 0x0008,
		"closedByClt": 0x0010,
		"closedBySrv": 0x0020,
		"closedByPortal": 0x0040,
		"closedPanic": 0x0080,
		"deleting": 0x0100,
		"deleted": 0x0200,
		"deletedFailed": 0x0400,
		"released": 0x0800
	},
	specialScrnId: {
		"buttons": "a",
		"leftZone": "b",
		"gfolder": "c"
	},
	specialWindow: {
		"selbox": {
			"name": "AASELECT",
			"id": "_SELBOX"
		},
		"choose": {
			"name": "AACHOOSE",
			"id": "_CHOOSE"
		},
		"formula": {
			"name": "AAFORMULA",
			"id": "_FORMULA"
		}
	},
	metaNameMap: {
		"xid": "$XID"
	},
	check: {
		"off": 1,
		"on": 2
	},
	dataSetMvt: {
		"del": 0,
		"insrt": 1,
		"delAll": 1024
	},
	screensArray: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "a", "b", "c"],
	statusFlag: {
		"state": 0x0001,
		"readOnly": 0x0002,
		"show": 0x0004,
		"selected": 0x0008
	},
	statusMask: {
		"state": 0x00010000,
		"readOnly": 0x00020000,
		"show": 0x00040000,
		"selected": 0x00080000
	},
	fieldModeType: {
		"show": "SHOW",
		"edit": "EDIT",
		"rough": "ROUGH"
	},
	focusStyle: {
		"fmtErr": {
			"css": "s-field-input-error",
			"code": "fmtErr"
		},
		"std": {
			"css": null,
			"code": "std"
		}
	},
	helpHandler: {
		"fld": {
			"linkId": "$fieldHelp",
			"cat": "FLD"
		},
		"obj": {
			"linkId": "$filedHelp",
			"cat": "OBJ"
		},
		"fct": {
			"linkId": "$fonctionHelp",
			"cat": "FCT"
		},
		"4gl": {
			"linkId": "$4glHelp",
			"cat": "L4G"
		}
	},
	getWinExtProps: function(extProps) {
		var tab, props = null;
		if (extProps && (tab = extProps.split(";")) && tab.length > 0) {
			props = {
				"title": tab[0],
				"width": (tab.length > 1 ? tab[1] : null),
				"height": (tab.length > 2 ? tab[2] : null),
				"transaction": (tab.length > 3 ? tab[3] : null)
			};
		}
		return props;
	},
	getState: function(stt) {
		var state = {};
		if (stt & this.statusMask.show) {
			state.$isHidden = !(stt & this.statusFlag.show);
		}
		if (stt & this.statusMask.state) {
			state.$isDisabled = !(stt & this.statusFlag.state);
		}
		if (stt & this.statusMask.readOnly) {
			state.$isReadOnly = !! (stt & this.statusFlag.readOnly);
		}
		if (stt & this.statusMask.selected) {
			state.$isSelected = !! (stt & this.statusFlag.selected);
		}
		return state;
	},
	isStateStated: function(stt) {
		var sc = this.statusMask;
		return (stt & sc.show || stt & sc.state || stt & sc.readOnly || stt & sc.selected);
	},
	isStateStatedBis: function(stt) {
		var sc = this.statusMask;
		return (stt & sc.state || stt & sc.readOnly);
	},
	setState: function(state, stt) {
		if (state.$isHidden != undefined) {
			stt += stt & this.statusMask.show ? 0 : this.statusMask.show;
			if (stt & this.statusFlag.show && state.$isHidden) {
				stt -= this.statusFlag.show;
			} else if (!(stt & this.statusFlag.show) && !state.$isHidden) {
				stt += this.statusFlag.show;
			}
		}
		if (state.$isDisabled != undefined) {
			stt += stt & this.statusMask.state ? 0 : this.statusMask.state;
			if (stt & this.statusFlag.state && state.$isDisabled) {
				stt -= this.statusFlag.state;
			} else if (!(stt & this.statusFlag.state) && !state.$isDisabled) {
				stt += this.statusFlag.state;
			}
		}
		if (state.$isReadOnly != undefined) {
			stt += stt & this.statusMask.readOnly ? 0 : this.statusMask.readOnly;
			if (stt & this.statusFlag.readOnly && !state.$isReadOnly) {
				stt -= this.statusFlag.readOnly;
			} else if (!(stt & this.statusFlag.readOnly) && state.$isReadOnly) {
				stt += this.statusFlag.readOnly;
			}
		}
		if (state.$isSelected != undefined) {
			stt += stt & this.statusMask.selected ? 0 : this.statusMask.selected;
			if (stt & this.statusFlag.selected && !state.$isSelected) {
				stt -= this.statusFlag.selected;
			} else if (!(stt & this.statusFlag.selected) && state.$isSelected) {
				stt += this.statusFlag.selected;
			}
		}
		return stt;
	},
	removeStateMask: function(state, stt) {
		if (state.hasOwnProperty("$isHidden") && (stt & this.statusMask.show)) {
			stt -= this.statusMask.show;
		}
		if (state.hasOwnProperty("$isDisabled") && (stt & this.statusMask.state)) {
			stt -= this.statusMask.state;
		}
		if (state.hasOwnProperty("$isReadOnly") && (stt & this.statusMask.readOnly)) {
			stt -= this.statusMask.readOnly;
		}
		if (state.hasOwnProperty("$isSelected") && (stt & this.statusMask.selected)) {
			stt -= this.statusMask.selected;
		}
		return stt;
	},
	getNumStatus: function() {
		var res = 0,
			m, f, propName;
		_.each(arguments, function(prop) {
			propName = (_.keys(prop))[0];
			m = this.statusMask[propName];
			f = prop[propName] ? this.statusFlag[propName] : 0;
			res = (m != null && f != null) ? (res + m + f) : res;
		}, this);
		return res;
	},
	adjustIcoFieldData: function(data) {
		var state, num = data.v === undefined ? 0 : (data.v === null || data.v.length == 0 ? -1 : parseInt(data.v, 10)),
			disable = null;
		// Deal with disable & readonly (disable overrides, readonly is rerouted)
		state = data.stt ? this.getState(data.stt) : {};
		if (state.$isReadOnly != undefined) {
			disable = state.$isReadOnly;
			data.stt = this.setState({
				"$isDisabled": disable
			}, data.stt || 0);
			data.stt = this.removeStateMask({
				"$isReadOnly": ""
			}, data.stt);
		}
		// Hidden?
		if (num < 0) {
			data.v = null;
		}
		// Note : Negative value, empy value or NULL value mean "hidden", but "$isHidden" meta is priority
		if (state.$isHidden === undefined && data.v !== undefined) {
			data.stt = this.setState({
				"$isHidden": num < 0 ? true : false
			}, data.stt || 0);
		}
		return data;
	},
	getWinRank: function(inst) {
		return _getRank(inst, 0) - 1;
	},
	getScreenRank: function(xid) {
		return _getRank(xid, 0);
	},
	isSpecialScrnId: function(instAlpha) {
		return _.include(this.specialScrnId, instAlpha.charAt(0));
	},
	isButtonScreen: function(instAlpha) {
		return (instAlpha && instAlpha.charAt(0) === exports.Fusion.specialScrnId.buttons ? true : false);
	},
	getButtonValue: function() {
		return this.getObjFieldValue("", this.fieldModeType.show);
	},
	isTabScreen: function(instAlpha) {
		return (instAlpha && instAlpha.charAt(0) === exports.Fusion.specialScrnId.gfolder ? true : false);
	},
	isListScreen: function(instAlpha) {
		return (instAlpha && instAlpha.charAt(0) === exports.Fusion.specialScrnId.leftZone ? true : false);
	},
	isListTab: function(instAlpha) {
		return (this.isListScreen(instAlpha) && instAlpha.length == 2 ? instAlpha : null);
	},
	isFolderTab: function(instAlpha) {
		return (this.isTabScreen(instAlpha) && instAlpha.length == 2 ? instAlpha.charAt(1) : null);
	},
	isSpecialWin: function(name) {
		return _.find(this.specialWindow, function(winDef) {
			return winDef.id == name;
		});
	},
	getWinId: function(rank) {
		return String.fromCharCode(rank + 64 + 1);
	},
	getFieldId: function(instAlpha) {
		return instAlpha.substr(2);
	},
	getBlockInst: function(instAlpha) {
		return instAlpha.substr(0, 2);
	},
	isBlockInst: function(instAlpha) {
		return (instAlpha.length == 2);
	},
	isLineGridInst: function(ist) {
		if (!ist || !ist.xid || !ist.nl) return false;
		var ret = (parseInt(ist.xid.substr(2), 10) === 1);
		return (ret && ist.nl > 0);
	},
	isGridInst: function(ist) {
		if (!ist || !ist.xid || !ist.nl) return false;
		return (ist.nl > 0);
	},
	isScreenInst: function(instAlpha) {
		return (instAlpha.length == 1);
	},
	isFieldInst: function(instAlpha) {
		return (instAlpha && instAlpha.length > 2);
	},
	getScreenId: function(instAlpha) {
		return instAlpha.charAt(0);
	},
	getFirstChild: function(entityName, coll) {
		return _.find(coll, function(child, childName) {
			var len = entityName.length;
			return (childName.length > len && childName.substring(0, len) == entityName);
		});
	},
	needToControlField: function(fldT) {
		var srT = exports.Syra.dataTypes;
		return fldT == srT.stringType || fldT == srT.dateType || fldT == srT.integerType || fldT == srT.decType || fldT == srT.realType || fldT == srT.timeType || fldT == srT.passwdType ? true : false;
	},
	appendMnus2Syra: function(representation, menus, isActions) {
		if (menus) {
			var links = exports.Syra.mapMnus2Links(menus, "txt", "act", "id", "typ", "rnk", "idf");
			exports.Syra.appendLinks2Proto((exports.Syra.getProtoFromPage(representation) || representation), links, isActions);
		}
	},
	isNullIst: function(ist) {
		return ist && ist.win && ist.xid && _getRank(ist.win, 0) > 0 && _getRank(ist.xid, 0) > 0 ? false : true;
	},
	cmpIst: function(a, b, strict) {
		var ret = false;
		if (a && b && a.win === b.win && a.xid === b.xid) {
			ret = a.nl === b.nl || a.nl == 0 && b.nl == undefined || b.nl == 0 && a.nl == undefined ? true : false;
			if (!ret && !strict && (b.nl == undefined || a.nl == undefined)) {
				// If "nl" is not defined, we assume it is not significant in the comparaison (lax way...)
				ret = true;
			}
		}
		return ret;
	},
	cmpIstEx: function(a, b, discardLine) {
		var save, ret, aBlock = this.isBlockInst(a.xid),
			bBlock = this.isBlockInst(b.xid);
		if ((aBlock && !bBlock) || (!aBlock && bBlock)) {
			return this.cmpIstGrid(a, b, discardLine);
		} else {
			if (discardLine) {
				save = a.nl;
				a.nl = b.nl;
				ret = this.cmpIst(a, b);
				a.nl = save;
			} else {
				ret = this.cmpIst(a, b);
			}
			return ret;
		}
	},
	cmpIstBlock: function(a, b) {
		return (a && b && a.win === b.win && a.xid.charAt(0) === b.xid.charAt(0) && a.xid.charAt(1) === b.xid.charAt(1));
	},
	cmpIstGrid: function(a, b, discardLine) {
		var ret = this.cmpIstBlock(a, b);
		if (!discardLine && ret && a.nl && b.nl) {
			ret = (a.nl == b.nl);
		}
		return ret;
	},
	makeIst: function(win, xid, nl, nlUndef) {
		return {
			"win": win,
			"xid": xid,
			"nl": nl || (nlUndef ? undefined : 0)
		};
	},
	getObjFieldValue: function(value, modeType, ctxProps, notModified) {
		return {
			"v": value,
			"xFmt": modeType,
			"ctx": ctxProps,
			"notModified": notModified ? true : false
		};
	},
	cureStyle: function(meta, fieldName, session) {
		var sty = meta.sty,
			sess, ret = false;
		if (sty === undefined || sty === null || sty.length == 0 || (sty.length == 1 && sty.charAt(0) === ";")) {
			if (sty != undefined) {
				meta.sty = "";
			}
			ret = true;
		} else if (session) {
			meta.sty = session.getStyleClass(sty);
			if (meta.sty === null) {
				session.logger.trace({
					"severety": "warn"
				}, "Style '" + sty + "' is not defined. Can't apply style for field '" + fieldName + "'");
				delete meta.sty;
			} else {
				ret = true;
			}
		}
		return ret;
	},
	isFixtureMode: function(object) {
		return exports.Syra.getFusionController(object).isFixtureMode();
	},
	isSpecialKey: function(keycode) {
		var k;
		for (k in speckeys) {
			if (speckeys[k] == keycode) return true;
		}
		return false;
	},
	getIdxFromNL: function(nl) {
		return nl !== undefined && nl > 0 ? nl - 1 : undefined;
	},
	isEmptyGridDataRecord: function(list, data) {
		var dataSetRecord, empty = false,
			value;
		if (data.uuid) {
			data.dataRecord = (list.helper.findDataRecord(list, data.uuid).dataRecord || null);
		}
		if (!data.dataRecord || data.dataRecord.$serverIndex < (list.dataset.length - 1)) {
			return false;
		} else {
			return exports.Fusion.isEmptyGridDataRecordEx(list.$fieldProperties, data.dataRecord);
		}
	},
	isEmptyGridDataRecordEx: function(listFldProps, dataRecord) {
		var empty = true,
			value;
		for (var key in dataRecord) {
			if (listFldProps[key]) {
				if ((value = dataRecord[key]) === null) {
					empty = true;
				} else {
					switch (listFldProps[key].$type) {
						case exports.Syra.dataTypes.stringType:
							empty = (value === "");
							break;
						case exports.Syra.dataTypes.booleanType:
							empty = (value === -1);
							break;
						case exports.Syra.dataTypes.dateType:
							empty = (value === "");
							break;
						case exports.Syra.dataTypes.choiceType:
							empty = (value === -1);
							break;
						case exports.Syra.dataTypes.integerType:
							empty = (value === "");
							break;
						case exports.Syra.dataTypes.iconType:
							empty = (value === -1 || value === "" || value === "-1");
							break;
						case exports.Syra.dataTypes.decType:
							empty = (value === "");
							break;
						case exports.Syra.dataTypes.realType:
							empty = (value === "");
							break;
						case exports.Syra.dataTypes.timeType:
							empty = (value === "");
							break;
						default:
							empty = true;
					}
					if (!empty) {
						return false;
					}
				}
			}
		}
		return empty;
	},
	checkPopupCard: function(oldIst, newIst, grid) {
		if (!grid) return;
		if (oldIst.win !== newIst.win) return;
		if (!this.cmpIstBlock(oldIst, newIst)) {
			if (grid.builder.recordCardView) {
				grid.builder.togglePopup();
			}
		}
	},
	setFieldMod: function(field, ist) {
		if (this.isGridInst(ist)) {
			field = (field ? field.getField(ist.xid, ist.nl - 1) : null);
		}
		if (field && field._input) {
			document.site.toggleClass(field._input, "s-x3mode-command", !ist.edit);
		}
	}
};

/* Syracuse Protocol */
exports.Syra = {
	mainPage: "syracuse-main/html/main.html",
	helpToken: {
		"bUrl": "$baseHelpUrl",
		"cat": "$category",
		"kw": "$keyword",
		"ttl": "$title"
	},
	dataTypes: {
		defaultType: "application/x-string",
		stringType: "application/x-string",
		collectionType: "application/x-array",
		treeType: "application/x-tree",
		booleanType: "application/x-boolean",
		rtfType: "text/rtf",
		dateType: "application/x-date",
		choiceType: "application/x-choice",
		integerType: "application/x-integer",
		iconType: "application/x-icon",
		decType: "application/x-decimal",
		realType: "application/x-real",
		timeType: "application/x-time",
		passwdType: "application/x-password",
		htmlType: "text/html",
		imageType: "image",
		reference: "application/x-reference"
	},
	wdgtTypes: {
		radio: "$radios",
		combo: "$combo"
	},
	pageHeaderK: {
		rightSelector: "#s-site-header-top-right",
		rightCvgSelector: "#s-site-header-top-right-fusion",
		linkGotoId: "s-site-func"
	},
	pageSectionK: {
		body: "s-page-data",
		menu: "s-page-menubar-body",
		bar: "s-fusion-bar-slot"
	},
	gridFusionK: {
		cont: "s-list",
		scroll_right: "s-list-btn-scroll-right",
		scroll_left: "s-list-btn-scroll-left"
	},
	pageFacet: {
		lookup: "$lookup",
		modal2: "$modal2",
		modal3: "$modal3",
		edit: "$edit"
	},
	_mapNullValue: {},
	getUserLocalPref: function() {
		return document.site && document.site.userProfile && document.site.userProfile.dataset && document.site.userProfile.dataset.selectedLocale;
	},
	getUserName: function() {
		var user = document.site;
		return (user && (user = document.site.userProfile) && (user = user.dataset) && (user = user.user) && (user = user.login)) ? user : null;
	},
	getPopupCtxFromField: function(field) {
		if (field && field.arrayLevel && field.arrayLevel == "record") {
			return field.menusBox && field.menusBox._popupMenus;
		} else {
			return field && field.menusBox && field.menusBox._popupMenus;
		}
	},
	getPopupDateFromField: function(field) {
		return field && field.popupPicker;
	},
	mapWinTypeToFacet: function(winType) {
		return this.win2Facet[winType];
	},
	isDialogFacet: function($facet) {
		return exports.Syra.dialogFacet.indexOf($facet) >= 0 ? true : false;
	},
	isFacetWithGotoFct: function($facet) {
		return exports.Syra.gotoFctMnuFacet.indexOf($facet) >= 0 ? true : false;
	},
	getProtoFromPage: function(page) {
		return (page ? page.$prototype : null);
	},
	getCollFieldsFromProto: function(proto, coll) {
		return (proto[coll] && proto[coll].$item ? proto[coll].$item.$properties : null);
	},
	getCollFieldsFromCollObj: function(collField) {
		var proto;
		return (collField && (proto = collField.$field) && (proto = proto.$item) ? proto.$properties : null);
	},
	get$FromPage: function(page) {
		var $proto = this.getProtoFromPage(page);
		return ($proto ? $proto.$properties : null);
	},
	geChooseLstPropFromProperties: function(properties) {
		var ret = exports.Fusion.specialScrnId.leftZone + exports.Fusion.screensArray[0];
		return (ret = properties[ret]) && (ret = ret.$item) && (ret = ret.$properties);
	},
	getBoundFldsFromPage: function(page) {
		return (page ? page.boundFields : null);
	},
	getBoundMnusFromPage: function(page) {
		return (page ? page.menuItems : null);
	},
	getPage: function(syraObject) {
		var obj = syraObject,
			page = syraObject;
		while ((!page || !page.$fusionPageMeta) && obj.boxParent) {
			page = obj.boxParent.getArticle();
			obj = obj.boxParent;
		}
		if (!page || !page.$fusionPageMeta) {
			page = syraObject.page;
		}
		return page;
	},
	getEntityProto: function(entity, syraProto) {
		var coll, proto = null;
		if (entity && syraProto) {
			if (!(proto = syraProto[entity])) {
				coll = exports.Fusion.getBlockInst(entity);
				if (syraProto[coll] && syraProto[coll].$type == this.dataTypes.collectionType) {
					proto = (this.getCollFieldsFromProto(syraProto, coll))[entity];
				}
			}
		}
		return proto;
	},
	isEntityMandatory: function(entity, syraProto) {
		var $entity = exports.Syra.getEntityProto(entity, syraProto);
		return $entity ? $entity.$isMandatory : null;
	},
	getEntityType: function(entity, syraProto, keepRef) {
		var $entity = exports.Syra.getEntityProto(entity, syraProto),
			type = null,
			refProperty;
		if ($entity && (type = $entity.$type)) {
			if (type == this.dataTypes.reference && !keepRef && (refProperty = this.getRefPropertyEntity($entity))) {
				type = refProperty.proto.$type;
			}
		}
		return type;
	},
	getRefPropertyEntity: function(entityProto) {
		var refPropItem, matches, props, refProp = null,
			propName;
		if ((refPropItem = entityProto.$item) && refPropItem.$value && (props = refPropItem.$properties)) {
			if ((matches = refPropItem.$value.match(/(\{.*?\})/g)) && matches.length > 0) {
				propName = matches[0].substr(1, matches[0].length - 2);
				refProp = {
					"property": propName,
					"proto": props[propName]
				};
				if (refPropItem.$title && (matches = refPropItem.$title.match(/(\{.*?\})/g)) && matches.length > 0) {
					refProp.propTitle = matches[0].substr(1, matches[0].length - 2);
				}
			}
		}
		return refProp;
	},
	getFieldType: function(fieldObj, keepRef) {
		var type = null,
			refProp;
		if (fieldObj.$field) {
			type = fieldObj.$field.$type;
			if (type == this.dataTypes.reference && !keepRef && (refProp = this.getRefPropertyEntity(fieldObj.$field))) {
				type = refProp.proto.$type;
			}
		}
		return type;
	},
	isPlainTextField: function($fieldItem, fieldType) {
		return $fieldItem && $fieldItem.$rows && fieldType == exports.Syra.dataTypes.stringType;
	},
	getMetaFromObject: function(syraObject) {
		return syraObject.$item;
	},
	getFusionPageMeta: function(syraObject) {
		var page = this.getPage(syraObject),
			pageMeta = page ? page.$fusionPageMeta : null;
		if (!pageMeta && !page && syraObject.options && syraObject.options.$itemPage) {
			// Need to do that for "Dialog" class pages...
			pageMeta = syraObject.options.$itemPage.$fusionPageMeta;
		}
		return pageMeta;
	},
	getFusionController: function(syraObject) {
		var page = this.getPage(syraObject);
		return (page ? (page.$fusionPageMeta ? page.$fusionPageMeta.controller : null) : null);
	},
	deleteFusionPageMeta: function(page) {
		var pMeta;
		if ((pMeta = page.$fusionPageMeta)) {
			if (pMeta._privateEventManager) {
				delete pMeta._privateEventManager;
			}
			delete pMeta.winModel;
			delete pMeta.controller;
			delete page.$fusionPageMeta;
		}
	},
	mapMnus2Links: function(mapIn, title, action, id, type, rank, father) {
		var map2;
		return _.map(mapIn, function(mapFrom, idx) {
			map2 = null;
			if (mapFrom[action] && mapFrom[action] > 0) {
				map2 = {};
				map2[mapFrom[id]] = {
					"$title": mapFrom[title],
					"$act": mapFrom[action]
				};
				return map2;
			}
		});
	},
	appendLinks2Proto: function(proto, links, isActions) {
		var node = isActions ? "$actions" : "$links";
		if (proto[node] === undefined) {
			proto[node] = {};
		}
		_.each(links, function(link) {
			if (link) {
				_.extend(proto[node], link);
			}
		});
	},
	msgBox: function(options) {
		var ourSite = document.site;
		if (ourSite && ourSite.showMessage) {
			ourSite.showMessage(options);
		}
	},
	showDiagnoses: function(diagnoses, item, option, autoHide) {
		var ourSite = document.site,
			hide = autoHide && autoHide >= 0 ? {
				"autoHideTimeOut": autoHide
			} : null;
		if (ourSite && ourSite.showDiagnoses) {
			ourSite.showDiagnoses({
				"$diagnoses": diagnoses,
				"autoHide": hide
			}, item, option);
		}
	},
	isMsgBoxOpened: function() {
		return document.site.messageBox && !document.site.messageBox.disposed;
	},
	setTabFocus: function($tab) {
		$($tab.tabTitle).focus();
	},
	showTab: function($tab, data) {
		if ($tab && $tab.tabTitle) {
			$($tab.tabTitle).trigger("click", data);
		}
	},
	isFieldModelReadOnly: function($model, $field, fieldName) {
		if (!$model && $field) {
			var $fusionPageMeta = exports.Syra.getFusionPageMeta($field);
			var $fieldMeta = exports.Syra.getMetaFromObject($field);
			if ($fusionPageMeta && $fieldMeta) {
				$model = $fusionPageMeta.winModel.getProto();
				fieldName = $fieldMeta.$bind;
			}
		}
		return $model && fieldName && $model[fieldName] && $model[fieldName].$isReadOnly ? true : false;
	},
	purgeStateMeta: function(fldModel, stateMeta) {
		var sc;
		if (fldModel.$isReadOnly) {
			// Avoid to apply meta 'readonly or disabled' on a field stated 'read only' by model (like in cs client)
			stateMeta = exports.Fusion.removeStateMask({
				"$isDisabled": "",
				"$isReadOnly": ""
			}, stateMeta);
			// Should call 'exports.Fusion.isStateStated()'... but to be more effective, direct test! 
			sc = exports.Fusion.statusMask;
			return (stateMeta & sc.show || stateMeta & sc.selected) ? stateMeta : null;
		}
		return stateMeta;
	},
	razStyleOnInput: function(input, styleColl, excludeStyle) {
		_.each(styleColl, function(stl, name) {
			if (name != excludeStyle && stl.css) {
				document.site.toggleClass(input, stl.css, false);
			}
		});
	},
	appendProto: function(proto, append, appendCallback) {
		function appendInner(from, to) {
			_.each(from, function(node, name) {
				if (Array.isArray(node) || _.isObject(node)) {
					if (this.hasOwnProperty(name)) {
						appendInner(node, this[name]);
					} else {
						this[name] = util.duplicateObj(node, appendCallback);
					}
				}
			}, to);
		}
		if (proto) {
			appendInner(append, proto);
		}
	},
	getLocalization: function(key, localization) {
		return key && key.replace(/\{(@[\w-]+)\}/g, function(match, p1) {
			return (localization && localization[p1]) || match;
		});
	},
	toggleHeader: function(on) {
		var selector = exports.Syra.pageHeaderK,
			statf = "none",
			stats = "";
		if (!on && document.site && document.site.closeSearchFieldPopup) {
			document.site.closeSearchFieldPopup();
		}
		$(selector.rightCvgSelector).css("display", on ? statf : stats);
		$(selector.rightSelector).css("display", on ? stats : statf);
	},
	translateNullValue: function(fieldType) {
		var ret = this._mapNullValue[fieldType];
		return ret !== undefined ? ret : null;
	},
	isEntityInGridCard: function(entityName, gridField) {
		var ret = false,
			gridMeta = exports.Syra.getMetaFromObject(gridField),
			layout;

		function walk(items) {
			var i, len, found = false;
			for (i = 0, len = items.length; i < len; i++) {
				if (items[i].$items && walk(items[i].$items) || items[i].$bind == entityName) {
					found = true;
					break;
				}
			}
			return found;
		}
		if (gridMeta && gridMeta.$cards && (layout = gridMeta.$cards.$layout)) {
			ret = walk(layout.$items);
		}
		return ret;
	}
};
exports.Syra.win2Facet = {
	"fullscreen": exports.Syra.pageFacet.edit,
	"dialog": exports.Syra.pageFacet.modal2,
	"message": exports.Syra.pageFacet.modal3
};
exports.Syra.dialogFacet = [exports.Syra.pageFacet.lookup, exports.Syra.pageFacet.modal2, exports.Syra.pageFacet.modal3];
exports.Syra.gotoFctMnuFacet = [exports.Syra.pageFacet.modal2, exports.Syra.pageFacet.edit];
exports.Syra._mapNullValue[exports.Syra.dataTypes.dateType] = "";
exports.Syra._mapNullValue[exports.Syra.dataTypes.timeType] = "";
exports.Syra._mapNullValue[exports.Syra.dataTypes.choiceType] = 0;