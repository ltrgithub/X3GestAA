"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview ACK_CALL Request/Reply management
 */

var helpers = require('syracuse-core/lib/helpers');
var jsXML = require('jsxml/lib/jsxml');
var util = require('syracuse-ui/lib/fusion/tools/util');
var requestActions = require('../sap/srvactions');
var sapUtil = require('./util').Fusion;

var _stdCallDef = {
	"LINKVUE": {
		"spgm": "SUBAPSMON:LINKVUE",
		"params": [{
			"dim": 1,
			"typ": "STRU",
			"siz": 10
		}, {
			"dim": 1,
			"typ": "STRU",
			"siz": 3
		}, {
			"dim": 1,
			"typ": "STRU",
			"siz": 100
		}]
	},
	"AINTERFL": {
		"spgm": "AINTERFL:AINTERFL",
		"params": [{
			"dim": 1,
			"typ": "CLOB",
			"siz": 7
		}, {
			"dim": 20,
			"typ": "STRU",
			"siz": 100
		}, {
			"dim": 20,
			"typ": "INT",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "INT",
			"siz": 0
		}]
	},
	"MAJHIER": {
		"spgm": "AMAJHIER:MAJHIER",
		"params": [{
			"dim": 1,
			"typ": "STRU",
			"siz": 1
		}, {
			"dim": 1,
			"typ": "INT",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "INT",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "INT",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "STRU",
			"siz": 100
		}, {
			"dim": 1,
			"typ": "INT",
			"siz": 0
		}]
	},
	"GET_INFO": {
		"spgm": "CNSX1MCSPV:GET_INFO",
		"params": [{
			"dim": 1,
			"typ": "STRU",
			"siz": 20
		}, {
			"dim": 1,
			"typ": "INT",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "INT",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "STRU",
			"siz": 20
		}, {
			"dim": 1,
			"typ": "INT",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "INT",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "CLOB",
			"siz": 6
		}]
	},
	"MOVE_ORDER": {
		"spgm": "CNSX1MCSPV:MOVE_ORDER",
		"params": [{
			"dim": 1,
			"typ": "INT",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "STRU",
			"siz": 10
		}, {
			"dim": 1,
			"typ": "STRU",
			"siz": 10
		}, {
			"dim": 1,
			"typ": "CLOB",
			"siz": 6
		}]
	},
	"EXEFNC1": {
		"spgm": "EXEFNC:EXEFNC1",
		"params": [{
			"dim": 1,
			"typ": "STRU",
			"siz": 12
		}, {
			"dim": 1,
			"typ": "STRU",
			"siz": 5
		}]
	}
};
var _testCallDef = {
	"TEST_ADD": {
		"spgm": "QLFWSADD:ADDDECIMAL",
		"params": [{
			"dim": 1,
			"typ": "DCB",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "DCB",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "DCB",
			"siz": 0
		}]
	},
	"TEST_CMI": {
		"spgm": "ZZCMIACKCALL:TEST3",
		"params": [{
			"dim": 8,
			"typ": "STRU",
			"siz": 250
		}, {
			"dim": 8,
			"typ": "STRU",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "STRU",
			"siz": 250
		}, {
			"dim": 6,
			"typ": "INT",
			"siz": 0
		}]
	},
	"TEST_FUNC_CMI": {
		"spgm": "ZZCMIACKCALL:TEST_FUNC_CMI",
		"ret": {
			"typ": "STRU"
		},
		"params": [{
			"dim": 8,
			"typ": "STRU",
			"siz": 250
		}, {
			"dim": 8,
			"typ": "STRU",
			"siz": 0
		}, {
			"dim": 1,
			"typ": "STRU",
			"siz": 250
		}, {
			"dim": 6,
			"typ": "INT",
			"siz": 0
		}]
	}
};
var _KcallFmt = "xml";

/* RPC Stack Management class */

function AckCallStack() {}

exports.AckCallStack = helpers.defineClass(AckCallStack, null, {
	initialize: function(hoster, jsonCallFmt) {
		this._stack = [];
		this._hoster = hoster;
		this.focusSrvAct = {
			"deflt": "SRV_GETFOCUS"
		};
		this.focusSrvAct[syra_fusion.syraUtil.dataTypes.collectionType] = "SRV_COMMANDGRID";
		_KcallFmt = jsonCallFmt ? "json" : _KcallFmt;
	},

	buildRequest: function(request, target, callParams, isFunc) {
		var win, entityDef, ackCallRqst = null,
			ret = false,
			hasFocus, act, callP = {}, params = {
				"target": target
			};
		try {
			ackCallRqst = this.stackRqst(callParams, isFunc);
			hasFocus = this._hoster.hasFocus(target);
			//TODO : Be carrefull hasfocus uses methodes that don't take account of nl.
			callP[_KcallFmt] = ackCallRqst.serializeRqst();
			if (hasFocus || sapUtil.isListScreen(target.xid)) {
				act = isFunc ? "SRV_FUNC" : "SRV_CALL";
				params.std = [callP];
			} else {
				if ((win = this._hoster.getWindow(target)) && (entityDef = win.getEntityEx(target))) {
					act = this.focusSrvAct[entityDef.type] || this.focusSrvAct.deflt;
				} else {
					act = this.focusSrvAct[syra_fusion.syraUtil.dataTypes.collectionType];
				}
			}
			request.result = {
				"$act": requestActions.getSrvAction(act),
				"params": params
			};
			request.result.post = {
				"onSvcPendingCallback": function() {
					ackCallRqst.remove.call(ackCallRqst);
				}
			};
			if (!hasFocus) {
				// Super action is not compliant with "rpc" action. Have to work with client "action chaining" mecanism.
				request.result.post.callback = function(self) {
					ackCallRqst.remove.call(ackCallRqst);
					self.buildRequest(request, target, callParams, isFunc);
					return request.result;
				};
				request.result.post.args = [this];
				if (callParams && callParams.onError) {
					request.result.post.onErrCallBack = function() {
						callParams.onError();
						ackCallRqst.remove.call(ackCallRqst);
					};
				}
			}
			ret = true;
		} catch (ex) {
			try {
				if (ackCallRqst) {
					ackCallRqst.remove();
				}
				if (request && request.result) {
					if (request.result.params) {
						delete request.result.params.call;
					}
					if (request.result.post) {
						delete request.result.post.onSvcPendingCallback;
						delete request.result.post.callback;
						delete request.result.post.onErrCallBack;
						request.result.post.args = null;
					}
				}
			} catch (ex) {

			}
			if (!request.data) {
				request.data = {};
			}
			request.data.$diagnoses = [util.makeDiagnosis(this._hoster.getMessLabel("31", "error", "An unexpected javascript error occured."), 3, ex.stack, "31", util.cltFusionNice, "Script error catched in 'onCallSP@blockex.js()' : " + ex.message)];
		}
		return ret;
	},

	stackRqst: function(callParams, isFunc) {
		var len = this._stack.length;
		this._stack.push((new AckCallRequest()).initialize(callParams, isFunc, this, len));
		return this._stack[len];
	},

	removeRqst: function(idx) {
		var len = this._stack.length,
			rqst = len > idx ? this._stack.splice(idx, 1) : null;
		if (rqst && rqst[0]) {
			setTimeout(function() {
				rqst[0].dispose();
			}, 0);
		}
	},

	dispatchReply: function(reply) {
		// Last call stacked must be dispatched first (lifo)!
		var len = this._stack.length,
			rqst = len > 0 ? this._stack.splice(this._stack.length - 1, 1) : null,
			result = null,
			ret = null;
		if (rqst && rqst[0]) {
			if (rqst[0].replyCallBack.callback) {
				try {
					result = rqst[0].loadReply(reply) || this.diagnosisReply("32", "dispatchReply()@AckCallStack", "32", rqst[0].spgm);
				} catch (ex) {

					result = this.diagnosisReply("31", ex.stack || "dispatchReply()@AckCallStack", "31", rqst[0].spgm + " : " + ex.message);
				}
				this.log("trace", {
					"severety": "info",
					"toJson": true
				}, "Dispatch NDRESULT : ", result);
				rqst[0].replyCallBack.callback.apply(rqst[0], rqst[0].replyCallBack.args ? ([result].concat(rqst[0].replyCallBack.args)) : [result]);
			}
			rqst[0].dispose();
		} else {
			ret = {
				"ok": false,
				"diagnoses": util.makeDiagnosis(this.getErrMessLabel("33"), 3, "dispatchReply()@AckCallStack", "33")
			};
			this.log("trace", {
				"severety": "info",
				"toJson": true
			}, "Dispatch NDRESULT failed : ", ret);
		}
		return ret;
	},

	diagnosisReply: function(message, stack, appCode, detail, diagnosis) {
		var messEx = isNaN(parseInt(message, 10)) ? message : this.getErrMessLabel(message);
		return {
			"failed": true,
			"$diagnoses": [diagnosis || util.makeDiagnosis(messEx, 3, stack, appCode, null, detail)]
		};
	},

	getErrMessLabel: function(cdMess, def) {
		return this._hoster.getMessLabel ? this._hoster.getMessLabel(cdMess, "error", def || "...") : def || "...";
	},

	log: function(type) {
		var logger = this._hoster.getlogger ? this._hoster.getlogger() : null;
		if (logger && logger[type]) {
			logger[type].apply(logger, Array.prototype.slice.call(arguments, 1));
		}
	},

	dispose: function() {
		var i, len;
		for (i = 0, len = this._stack.length; i < len; i++) {
			this._stack[i].dispose();
		}
		delete this._hoster;
	}
});

/* RPC Request Management class */

function AckCallRequest() {}

AckCallRequest = helpers.defineClass(AckCallRequest, null, {
	initialize: function(request, isFunc, hoster, id, dbgFlags) {
		this._desc = request.callDesc || _stdCallDef[request.proxy] || _testCallDef[request.proxy];
		this._argsDesc = (this._desc && this._desc.params) || [];
		this._args = request.values || null;
		this._reply = null;
		this._func = isFunc;
		this._funcRet = this._desc && this._desc.ret ? this._desc.ret.typ || "CLOB" : "CLOB";
		this.spgm = (this._desc && this._desc.spgm) || "";
		this.replyCallBack = {
			"callback": request.callback,
			"args": request.callbackArgs
		};
		this._replyFmt = request.callbackFmt || "json";
		this._hoster = hoster;
		this._id = id;
		this._dbgFlags = dbgFlags;
		return this;
	},

	serializeRqst: function() {
		var ret = _KcallFmt === "xml" ? this._serializeRqst2XML() : this._serializeRqst2JSON();
		this._hoster.log("trace", {
			"severety": "info",
			"toJson": true
		}, "Ack_call serialized '", ret);
		return ret;

	},

	remove: function() {
		this._hoster.removeRqst(this._id);
	},

	_serializeRqst2XML: function() {
		var i, j, lenArgs, lenArgsDesc = this._argsDesc.length,
			xheader = '<spgm id="' + this.spgm + '">',
			xfooter = '</spgm>',
			xparams = [],
			xparam, nb;
		if (this._args && lenArgsDesc > 0) {
			for (i = 0; i < lenArgsDesc; i++) {
				nb = 0;
				if (this._args[i] !== null && this._args[i] !== undefined) {
					nb = this._argsDesc[i].dim > 1 ? this._args[i].length : 1;
				}
				xparam = ['<param dim="', this._argsDesc[i].dim, '" nb="', nb, '" size="', this._argsDesc[i].siz, '" typ="', this._argsDesc[i].typ, '">'];
				if (nb > 0) {
					if (this._argsDesc[i].dim == 1) {
						xparam.push('<resu><![CDATA[', this._args[i], ']]></resu>');
					} else {
						for (j = 0, lenArgs = this._args[i].length; j < lenArgs; j++) {
							xparam.push('<resu><![CDATA[', this._args[i][j], ']]></resu>');
						}
					}
				}
				xparam.push('</param>');
				xparams.push(xparam.join(""));
			}
		}
		return [xheader, xparams.join(""), xfooter].join("");
	},

	_serializeRqst2JSON: function() {
		var i, j, lenArgs, lenArgsDesc = this._argsDesc.length,
			rqstJ = {
				"spgm": this.spgm,
				"params": []
			}, nb;
		if (this._args && lenArgsDesc > 0) {
			for (i = 0; i < lenArgsDesc; i++) {
				nb = 0;
				if (this._args[i] !== null && this._args[i] !== undefined) {
					nb = this._argsDesc[i].dim > 1 ? this._args[i].length : 1;
				}
				rqstJ.params[i] = {
					"dim": this._argsDesc[i].dim,
					"nb": nb,
					"size": this._argsDesc[i].siz,
					"typ": this._argsDesc[i].typ,
					"resu": []
				};
				if (nb > 0) {
					if (this._argsDesc[i].dim == 1) {
						rqstJ.params[i].resu[0] = this._args[i];
					} else {
						for (j = 0, lenArgs = this._args[i].length; j < lenArgs; j++) {
							rqstJ.params[i].resu[j] = this._args[i][j];
						}
					}
				}
			}
		}
		if (this._dbgFlags) {
			rqstJ.debugFlags = {};
			rqstJ.debugFlags.trace = this._dbgFlags & 0x0001;
			rqstJ.debugFlags.exceptiondetail = this._dbgFlags & 0x0002;
			rqstJ.debugFlags.execduration = this._dbgFlags & 0x0004;
			rqstJ.debugFlags.totalduration = this._dbgFlags & 0x0008;
		}
		return rqstJ;
	},

	loadReply: function(reply) {
		var replyEx = _KcallFmt === "xml" ? reply.xml : reply.json;
		this._reply = null;
		if (replyEx) {
			if (_KcallFmt === this._replyFmt) {
				if (_KcallFmt === "json") {
					this._replyJSON2JSON(replyEx);
				} else {
					return replyEx;
				}
			} else if (_KcallFmt == "xml") {
				this._replyXML2JSON(replyEx);
			} else {
				this._replyJSON2XML(replyEx);
			}
		}
		return this._reply;
	},

	_replyJSON2JSON: function(replyJSON) {
		var i, leni, params, param, paramNum;
		this._reply = {
			"argsModified": []
		};
		if (!replyJSON.result || replyJSON.result.errn === undefined || replyJSON.result.errn !== 0) {
			if (replyJSON.result) {
				this._reply = this._hoster.diagnosisReply(null, null, null, null, this._getSpgmDiagnosis(replyJSON.result));
			} else {
				this._reply = this._hoster.diagnosisReply("32", "_replyXML2JSON()@AckCallRequest", "32", this.spgm);
			}
		} else {
			this._initArgsModifed(this._reply.argsModified);
			if (replyJSON.params) {
				params = replyJSON.params;
				for (i = 0, leni = params.length; i < leni; i++) {
					param = params[i];
					paramNum = param.num;
					if (this._argsDesc[paramNum].dim > 1) {
						this._reply.argsModified[paramNum][param.poste] = param.resu;
					} else {
						this._reply.argsModified[paramNum] = param.resu;
					}
				}
			}
			if (this._func) {
				this._reply.
				return = replyJSON.
				return ?replyJSON.
				return .resu: undefined;
			}
			if (replyJSON.debugInfos) {
				this._reply.debugInfos = util.duplicateObj(replyJSON.debugInfos);
			}
		}
	},

	_replyXML2JSON: function(replyXML) {
		var replyDOM, i, leni, params, param, paramNum;
		if ((replyDOM = jsXML.parse(replyXML))) {
			this._reply = {
				"argsModified": []
			};
			if (!replyDOM["spgm"] || !replyDOM["spgm"].$ || replyDOM["spgm"].$["errn"] === undefined || replyDOM["spgm"].$["errn"] !== "0") {
				if (replyDOM["spgm"] && replyDOM["spgm"].$) {
					this._reply = this._hoster.diagnosisReply(null, null, null, null, this._getSpgmDiagnosis(replyDOM["spgm"].$));
				} else {
					this._reply = this._hoster.diagnosisReply("32", "_replyXML2JSON()@AckCallRequest", "32", this.spgm);
				}
			} else {
				this._initArgsModifed(this._reply.argsModified);
				if (replyDOM["spgm"]["param"]) {
					params = !Array.isArray(replyDOM["spgm"]["param"]) ? [replyDOM["spgm"]["param"]] : replyDOM["spgm"]["param"];
					for (i = 0, leni = params.length; i < leni; i++) {
						param = params[i];
						paramNum = parseInt(param.$.num, 10);
						if (this._argsDesc[paramNum].dim > 1) {
							this._reply.argsModified[paramNum][parseInt(param.$.poste, 10)] = this._getArgValFromStrg(this._argsDesc[paramNum].typ, _.isObject(param.resu) ? param.resu.$cdata : param.resu);
						} else {
							this._reply.argsModified[paramNum] = this._getArgValFromStrg(this._argsDesc[paramNum].typ, _.isObject(param.resu) ? param.resu.$cdata : param.resu);
						}
					}
				}
				if (this._func) {
					this._reply.
					return = replyDOM["spgm"]["resu"] ? this._getArgValFromStrg(this._func.typ, _.isObject(replyDOM["spgm"]["resu"]) ? replyDOM["spgm"]["resu"].$cdata : replyDOM["spgm"]["resu"]) : undefined;
				}
			}
		} else {
			this._reply = this._hoster.diagnosisReply("35", "_replyXML2JSON()@AckCallRequest", "36", this.spgm);
		}
	},

	_replyJSON2XML: function() {
		// TODO if necessary
	},

	_getSpgmDiagnosis: function(spgmErr) {
		var split = spgmErr["errm"].split(".adx : "),
			stack = null,
			mess = "";
		if (split.length > 1) {
			mess = split[1];
			stack = split[0];
		}
		return util.makeDiagnosis(this.spgm + " : " + this._hoster.getErrMessLabel("34") + (mess ? ("\n" + mess) : ""), 3, (spgmErr["errp"] || stack || spgmErr["errm"] || "...") + " at line : " + (spgmErr["errl"] || "-1"), spgmErr["errn"] || "-1", util.backOfficeNice);
	},

	_getArgValFromStrg: function(type, strgVal) {
		switch (type.substring(0, 2)) {
			case "ST":
			case "CL":
				return strgVal;
				break;
			case "IN":
			case "SH":
			case "LI":
				return parseInt(strgVal, 10);
				break;
			case "DA":
				// DATE : TODO
				return strgVal;
				break;
			case "NU":
				return null;
				break;
			case "BL":
				// BLOB : TODO
				return null;
				break;
			case "DO":
			case "FL":
			case "DC":
				return parseFloat(strgVal);
				break;
			default:
				return null;
				break;
		}
	},

	_initArgsModifed: function(argsModified) {
		var i, leni;
		for (i = 0, leni = this._argsDesc.length; i < leni; i++) {
			argsModified[i] = this._argsDesc[i].dim > 1 ? new Array(this._argsDesc[i].dim) : undefined;
		}
	},

	dispose: function() {
		delete this._desc;
		delete this._argsDesc;
		delete this._args;
		if (this._reply) {
			delete this._reply.argsModified;
			delete this._reply.
			return;
		}
		delete this.replyCallBack.callback;
		delete this.replyCallBack.args;
		delete this._hoster;
	}
});