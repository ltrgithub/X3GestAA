"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview File Selection/updload/download management (Askui)
 */
var srvAct = require('./srvactions');

/**
 * Template of "actionsList" object
 *	"actionsList": {
 * 		"srv": {
 *			"1254" : {
 *				"st": false,
 *				"insts": {
 *					"B" : [{"id": "aB1", "type": "$links"}, {"id": "SSSS", "type": "$actions"}],
 *					"C" : [{"id": "aB1", "type": "$links"}, {"id": "SSSS", "type": "$actions"}]
 *				}
 *			},
 *			"1545": {
 *	 			...
 *	 		}
 *		},
 *		"local": {
 *			"20": {
 *	 			...
 *	 		},
 *			"21": {
 *	 			...
 *	 		}
 *		}
 * }
 */

var helpers = require('syracuse-core/lib/helpers');
var syraUtil = require('./util').Syra;

var _actionK = {
	"srvCatg": "srv",
	"localCatg": "local"
};

function ActionsList() {
	this._winActions = {};
	this._winActions[_actionK.srvCatg] = {};
	this._winActions[_actionK.localCatg] = {};
	this._globalActions = {};
	this._globalActions[_actionK.srvCatg] = {};
	this._globalActions[_actionK.localCatg] = {};
	this._winsStack = null;
}

exports.ActionsList = helpers.defineClass(ActionsList, null, {
	initialize: function(_windowsStack) {
		this._winsStack = _windowsStack;
		this._globalActions[_actionK.srvCatg][srvAct.getSrvAction("SRV_EXPXLSGRID")] = {
			"st": true
		};
	},

	getState: function(action, winId, categorie) {
		var actionMap, state = null,
			actionDesc;
		if ((actionMap = this._winActions[categorie || _actionK.srvCatg]) && (actionMap = actionMap[action])) {
			actionDesc = actionMap.insts[winId] || actionMap.orphan[winId];
			state = actionDesc ? actionMap.st : null;
		}
		if (state === null && (actionMap = this._globalActions[categorie || _actionK.srvCatg]) && (actionMap = actionMap[action])) {
			state = actionMap.st;
		}
		return state;
	},

	setState: function(actions, currWinId, categorie, notify, notifyFor) {
		var acts = (!Array.isArray(actions) ? [actions] : actions),
			ret = null,
			i, len, action;
		var shortCutW = this._winActions[categorie || _actionK.srvCatg];
		var shortCutG = this._globalActions[categorie || _actionK.srvCatg];
		for (i = 0, len = acts.length; i < len; i++) {
			action = acts[i];
			if (shortCutG[action.id]) {
				shortCutG[action.id].st = action.st;
			}
			if (!shortCutW[action.id]) {
				// An orphan action, not bound on a standard $link or $action, previously registered
				shortCutW[action.id] = this._initActProps(action.st);
				shortCutW[action.id].orphan[currWinId] = {
					"type": "unknown",
					"st": action.st
				};
			} else if (shortCutW[action.id].st != action.st) {
				shortCutW[action.id].st = action.st;
				this._refreshItems(shortCutW[action.id], action.id, categorie, false, notify, notifyFor);
			} else if (shortCutW[action.id]._pendingInst) {
				this._refreshItems(shortCutW[action.id], action.id, categorie, true, notify, notifyFor);
			}
		}
		return ret; // TODO : set return code...
	},

	registerWinActions: function(winActs, winId, type, opts, categorie) {
		_.each(winActs, function(winAct, instAct) {
			this._registerWinAct(instAct, winId, winAct.$act, type, true, opts, categorie);
		}, this);
	},

	unregisterAllWinActions: function(winId) {
		var idEx = this._winsStack._getWinIdEx(winId);
		_.each([_actionK.localCatg, _actionK.srvCatg], function(catg) {
			_.each(this._winActions[catg], function(act, actId) {
				if (act._pendingInst) {
					_.each(act._pendingInst, function(value, key) {
						if (key == idEx.id) {
							delete act._pendingInst[key];
						}
					});
					if (Object.keys.length == 0) {
						delete act._pendingInst;
					}
				}
				if (act.insts && act.insts[idEx.id]) {
					delete this._winActions[catg][actId].insts[idEx.id];
				}
				if (act.orphan && act.orphan[idEx.id]) {
					delete this._winActions[catg][actId].orphan[idEx.id];
				}
			}, this);
		}, this);
	},

	_initActProps: function(status) {
		return {
			"st": status,
			"insts": {},
			"orphan": {}
		};
	},

	_registerWinAct: function(inst, winId, actId, type, status, opts, categorie) {
		var shortCut = this._winActions[categorie || _actionK.srvCatg],
			idEx = this._winsStack._getWinIdEx(winId),
			alreadyRegistered = true;
		if (!shortCut[actId]) {
			shortCut[actId] = this._initActProps(status || false);
			alreadyRegistered = false;
		}
		if (!shortCut[actId].insts[idEx.id]) {
			shortCut[actId].insts[idEx.id] = [];
			if (alreadyRegistered) {
				if (!shortCut[actId]._pendingInst) {
					shortCut[actId]._pendingInst = {};
				}
				shortCut[actId]._pendingInst[idEx.id] = shortCut[actId].insts[idEx.id];
			}
		}
		shortCut[actId].insts[idEx.id].push({
			"id": inst,
			"type": type
		});
	},

	_refreshItems: function(action, actId, categorie, pendingInst, notify, notifyFor) {
		var catg = categorie || _actionK.srvCatg,
			boundActItems = null,
			syraModel;
		_.each(pendingInst ? action._pendingInst : action.insts, function(insts, winId) {
			if (catg == _actionK.srvCatg) {
				boundActItems = syraUtil.getBoundMnusFromPage((syraModel = this._winsStack.getSyraModel(winId)));
				if (notify && notifyFor[actId]) {
					notify(winId, syraModel, actId, action.st);
				}
			} else {
				// Local action... TODO if necessary....
			}
			if (boundActItems) {
				_.each(insts, function(inst) {
					if (boundActItems[inst.id]) {
						_.each(boundActItems[inst.id], function(menuItem) {
							menuItem.setMenu({
								$isDisabled: !action.st
							});
							//menuItem.disable(!action.st);
						});
					}
				});
			} else {
				// TODO : need to register warning or error?
			}
		}, this);
		if (action._pendingInst) {
			_.each(action._pendingInst, function(value, key) {
				delete action._pendingInst[key];
			});
			delete action._pendingInst;
		}
	},

	dispose: function() {
		if (this._winActions) {
			// Free inside "this._winActions"... if necesary
			if (this._winsStack) {
				this._winsStack.enumStack(function(winId) {
					this.unregisterAllWinActions(winId);
				}, this);
			}
			delete this._winActions;
		}
		if (this._winsStack) {
			delete this._winsStack;
		}
		if (this._globalActions) {
			this._globalActions = null;
		}

	}
});