"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview File Selection/updload/download management (Askui)
 */

/**
 * Template of "actionsList" object
 *	"actionsList": {
 * 		"srv": {
 *			"1254" : {
 *				"st": false,
 *				"pending": true,
 *				"insts": {
 *					"B" : [{"id": "aB1", "type": "$links"}, {"id": "SSSS", "type": "$actions"}],
 *					"C" : [{"id": "aB1", "type": "$links"}, {"id": "SSSS", "type": "$actions"}]
 *				}
 *			},
 *			"1545": {
 *	 			...
 *	 		}
 *		},
 *		"local": {
 *			"20": {
 *	 			...
 *	 		},
 *			"21": {
 *	 			...
 *	 		}
 *		}
 * }
 */
 
var helpers = require('syracuse-core/lib/helpers');
var syraUtil = require('./util').Syra;


var _actionK = {"srvCatg": "srv", "localCatg": "local"};

function ActionsList(){
   	this._actions = {};
   	this._actions[_actionK.srvCatg] = {};
   	this._actions[_actionK.localCatg] = {};
   	this._winsStack = null;
}

exports.ActionsList = helpers.defineClass(ActionsList, null, {
     initialize: function(_windowsStack){
        this._winsStack = _windowsStack;
    },

    setState: function(actions, categorie){
    	var acts = (!Array.isArray(actions) ? [actions] : null), refresh, ret = null;
    	var shortCut = this._actions[categorie || _actionK.srvCatg];
		_.each(acts || actions, function(action){
			if(!shortCut[action.id]){
				shortCut[action.id] = this._initActProps(action.st, true);
			}
			else if (shortCut[action.id].st != action.st) {
				shortCut[action.id].st = action.st;
				this._refreshItems(shortCut[action.id], categorie);
			}
		}, this);
		return ret;	// TODO : set return code...
	},

	registerWinActions: function(winActs, winId, type, opts, categorie) {
		_.each(winActs, function(winAct, instAct){
			this._register(instAct, winId, winAct.$act, type, true, opts, categorie);
		}, this);
	},

	unregisterAllWinActions: function(winId) {
	    var idEx = this._winsStack._getWinIdEx(winId);
		_.each([_actionK.localCatg, _actionK.srvCatg], function(catg){
			_.each(this._actions[catg], function(act, actId){
				if(act.insts && act.insts[idEx.id] ){
					delete this._actions[catg][actId].insts[idEx.id];
				}
			}, this);
		}, this);
	},

	refreshAllItems: function(categorie) {
		var catg = categorie || _actionK.srvCatg;
		_.each(this._actions[catg], function(action){
			if(action.pending) {
				if(!_.isEmpty(action.insts)) {
					this._refreshItems(action, catg);
				}
				action.pending = false;
			}
		}, this);
	},

	_initActProps: function(status, pending) {
		return {"st": status, "insts": {}, "pending": pending};
	},

	_register: function(inst, winId, actId, type, status, opts, categorie) {
		var shortCut = this._actions[categorie || _actionK.srvCatg], idEx = this._winsStack._getWinIdEx(winId);
		if (!shortCut[actId]) {
			shortCut[actId] = this._initActProps(status || false, false);
		}
		if(!shortCut[actId].insts[idEx.id]){
			shortCut[actId].insts[idEx.id] = [];
		}
		shortCut[actId].insts[idEx.id].push({"id": inst, "type": type});
	},

	_refreshItems: function(action, categorie) {
		var catg = categorie || _actionK.srvCatg, boundActItems = null;
		_.each(action.insts, function(insts, winId){
			if(catg == _actionK.srvCatg)
			{
				boundActItems = syraUtil.getBoundMnusFromPage(this._winsStack.getSyraModel(winId)); 
			}
			else
			{
				// Local action... TODO if necessary....
			}	
			if (boundActItems) {
				_.each(insts, function(inst){
					if(boundActItems[inst.id]){
						_.each(boundActItems[inst.id], function(menuItem){
							menuItem.disable(!action.st);
						});		
					}
				});
			}
			else {
				// TODO : need to register warning or error?
			}
		}, this);
	},

    dispose: function(){
   		if(this._winsStack){
    		delete this._winsStack;
    	}
    	if(this._actions){
    		// Free inside "this._actions" if necesary... TODO
     		delete this._actions;
    	}
    }
});