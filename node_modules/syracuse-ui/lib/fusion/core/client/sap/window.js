"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion "Window" Classes (Stack, model, etc...) and Utilities 
 */

 
var helpers = require('syracuse-core/lib/helpers');
var util = require('syracuse-ui/lib/fusion/tools/util');
var sapUtil = require('./util').Fusion;
var syraUtil = require('./util').Syra;
var Action = require('./action');
var EntityStore = require('./entityStore').EntityStore;


var _winK = {
    "stubWins": {"entities": "setEntities", "statBar": "_setStatusBar", "tit": "_setTitle"},
    "actsType": ["$links", "$actions"],
    "stackDeb": 2,
    "portalWin": "A",
    "fusionPageK": "s-page-trans"
 };
 var _instVtbl = {"default": {"getValue": "getDataValue", "setFocus": "focus", "setData": "_setDatadField", "getData": "_getDataField", "isDatasetColl": false}};
     _instVtbl[syraUtil.treeType] = {"getValue": "getDataValue", "setFocus": "focus", "setData": "_setDataTree", "getData": "_getDataTree", "isDatasetColl": false};
     _instVtbl[syraUtil.collectionType] = {"getValue": "getDataValue", "setFocus": "setFocus", "setData": "_setDataGrid", "getData": "_getDataGrid", "isDatasetColl": true, "removeFocus": "resetFocus"};
     _instVtbl[syraUtil.rtfType] = {"getValue": "_getEditContents", "setFocus": "focus", "setData": "_setDatadField", "getData": "_getDataField", "isDatasetColl": false, "removeFocus": "resetFocus"};

/* Window Stack Management class */
function WinStack(){
    this._stack = [];
    for (var i = 0; i < _winK.stackDeb ; i++) {
        this._stack[i] = null;
    }
	this._windows = {};
    this._actionsList = null;
}

exports.WinStack = helpers.defineClass(WinStack, null, {
    initialize: function(sapController){
        // Misc
        (this._actionsList = new Action.ActionsList()).initialize(this);
        this._sapController = sapController;
        // Hard declaration of the "portal" Window...
        var idEx = this._getWinIdEx(_winK.portalWin);
        (this._windows[idEx.id] = new WinModel()).initialize(idEx, null, null);
        this._stack[idEx.rank] = idEx.id;
    },

    length: function(){
    	return this._stack.length - _winK.stackDeb;
    },

    isActiveWindow: function(id){
         return !!(this.length() == (this._getWinIdEx(id)).rank);
    },

    setActionsState: function(actions){
        return this._actionsList.setState(actions);
    },

    shouldDiscardClose: function(closeId, openWins){
    	// "close" and "open" clauses on the same Window ID,  in the same reply, and this ID is not already in the Window Stack
        if(openWins) {
        	var idEx = this._getWinIdEx(closeId);
         	return (openWins[idEx.id] && !this._windows[idEx.id] ? true : false);
        }
    },

    shouldDiscardOpen: function(openId, closeWins){
    	// "close" and "open" clauses on the same Window ID,  in the same reply, and this ID is not already in the Window Stack
        if(closeWins) {
        	var idEx = this._getWinIdEx(openId);
        	return (_.indexOf(closeWins, idEx.id) >= 0 && !this._windows[idEx.id] ? true : false);
        }
    },

    stack: function(id, winDef, syraPageModel){
        // Register Window
    	var idEx = this._getWinIdEx(id), proto;
    	(this._windows[idEx.id] = new WinModel()).initialize(idEx, winDef, syraPageModel);
    	this._stack.push(idEx.id);
        // Register Window actions
        proto = syraUtil.getProtoFromPage(syraPageModel);
        _.each(_winK.actsType, function(type){
            this.registerWinActions(proto[type], idEx.id, type);
        }, this._actionsList);
        this._sapController.getSiteController().trigger("sap.win.stacked", {"target": this._windows[idEx.id],
            "type": "opened", "data": {}});
    },

    unStack: function(id, rank, dispose){
    	var idEx = this._getWinIdEx(id), win = this._windows[idEx.id], syraPage = null;
    	if(win){
            this._actionsList.unregisterAllWinActions(idEx.id);
            this._sapController.getSiteController().trigger("sap.win.unstack", {"target": this._windows[idEx.id],
                "type": "close",
                "data": {}
            }, dispose);
            syraPage = win.getSyraPage();
     		win.dispose();
    		delete this._windows[idEx.id];
    		this._stack.splice(idEx.rank, 1);
            this._sapController.getSiteController().trigger("sap.win.unstacked", {"target": null,
                "type": "closed",
                "data": {"sheet": syraPage}
            }, dispose);
    		// TODO : check error?
    	}
    	else {
    		//TODO : error?
    	}
    },

    getWindow: function(winId){
        var idEx = this._getWinIdEx(winId);
        return this._windows[idEx.id] || null;
    },

    getSyraModel: function(winId){
        var win = this.getWindow(winId);
        return (win ? win.syraModel : null);
    },

    applyChange: function(winId, change){
        var ret = null, retEx = {}, idEx = this._getWinIdEx(winId);
        if(this._windows[idEx.id]) {
            _.each(change, function(data, type) {
                if(_winK.stubWins[type] && this._windows[idEx.id][_winK.stubWins[type]]) {
                    retEx[type] = this._windows[idEx.id][_winK.stubWins[type]](data);
                }
            }, this);
        }
        else {
            // TODO : exception, return code, etc...
        }
        _.each(retEx, function(diagnoses, task) {
            if (diagnoses){
                // TODO : check return code ==> ret = ...
            }
        }, this); 
        return ret;
    },

    setFocus: function (winId, entity) {
        var ret = null, idEx = this._getWinIdEx(winId);
        if(this._windows[idEx.id]) {
            if(sapUtil.isSpecialScrnId(entity)) {
                if(sapUtil.isButtonScreen(entity)) {
                    ret = {"ok": true, "srvAct": true, "act": "SRV_CHAMP_SUIVANT", "params": this._windows[idEx.id]._getButtonValue()};
                }
                else if(sapUtil.isTabScreen(entity)) {
                    var $articleMeta = null, $tab = _.find(this._windows[idEx.id].syraModel.idMap, function(article) {
                        $articleMeta = syraUtil.getMetaFromObject(article);
                        return $articleMeta && sapUtil.isTabScreen($articleMeta[sapUtil.metaNameMap.xid]) && $articleMeta.$opened;
                    });
                    if($tab) {
                        syraUtil.setTabFocus($tab);
                    }
                }
                else if (sapUtil.isListScreen(entity)) {
                    // TODO!
                }
            }
            else {
                ret = WinModel.prototype.setFocus.apply(this._windows[idEx.id], Array.prototype.slice.call(arguments, 1));
            }
        }
        else {
            // TODO : error!
        }
        return ret;
    },

    getValue: function (winId, entity) {
        var ret = null, idEx = this._getWinIdEx(winId);
        if(this._windows[idEx.id]) {
            if(sapUtil.isSpecialScrnId(entity)) {
                if(sapUtil.isButtonScreen(entity) || sapUtil.isListScreen(entity)) {
                    ret = (this._windows[idEx.id])._getButtonValue();
                }
                else if(sapUtil.isTabScreen(entity)) {
                    ret = sapUtil.getObjFieldValue(this._sapController.getCurrTabIdx(), sapUtil.fieldModeType.rough);
                }
            }
            else if (!entity || entity.length === 0) {
                // We are on a window (preview screen, formula editor, Standard window, etc...)
                ret = null;
            }
            else {
                ret = WinModel.prototype.getValue.apply(this._windows[idEx.id], Array.prototype.slice.call(arguments, 1));
            }
        }
        return ret;
    },

    removeFocus: function (winId) {
        var idEx = this._getWinIdEx(winId);
        if(this._windows[idEx.id]) {
            WinModel.prototype.removeFocus.apply(this._windows[idEx.id], Array.prototype.slice.call(arguments, 1));
        }
    },

    _getWinIdEx: function(id){
        var idEx = {"id" : id, "rank": id};
        (_.isNumber(id) ? idEx.id = sapUtil.getWinId(id) : idEx.rank = sapUtil.getWinRank(id));
        return idEx;
    },

    enumStack: function(iterator, context){
        var args = arguments;
        if(this._stack.length > 0) {
           for (var i = this._stack.length - 1; i >= _winK.stackDeb; i--) {
                iterator.apply(context, _.union(this._stack[i], i, Array.prototype.slice.call(args, 2)));
            }
        }
    },

    findStack: function(iterator, context){
        var win = null, args = arguments;
        if(this._stack.length > 0) {
           for (var i = this._stack.length - 1; i >= _winK.stackDeb; i--) {
                if(iterator.apply(context, _.union(this._stack[i], i, Array.prototype.slice.call(args, 2)))) {
                    win = this._stack[i];
                    break;
                }
            }
        }
        return win;
    },

    dispose: function(force){
        // Hard dispose for Portal Window
        var portalId = this._getWinIdEx(_winK.portalWin), winPortal = this._windows[portalId.id];
        winPortal.dispose();
        delete this._windows[portalId.id];
        // Dispose other windows ...
        this.enumStack(this.unStack, this, true);
        delete this._stack;
        if(this._actionsList){
            this._actionsList.dispose();
            delete this._actionsList;
        }
    	delete this._windows;
        if(this._sapController) {
            delete this._sapController;
        }
        // TODO : vérifier si on est bien cohérent... pas un dispose sauvage!?
    }
});


/* Window model class */
function WinModel(){
}

WinModel = helpers.defineClass(WinModel, null, {
    initialize: function(idEx, winDef, syraModel){
        var $fusionPageMeta = syraModel ? syraUtil.getFusionPageMeta(syraModel) : null;
    	this._idEx = idEx;
    	this._mdata = winDef ? util.duplicateObj(winDef) : null;
        this.syraModel = syraModel;
        this._fieldsColl = {"proto" : syraUtil.get$FromPage(syraModel), "bound": syraUtil.getBoundFldsFromPage(syraModel)};
        this._dataset = {};
        this._statusBar = {};
        this._title = "";
        this._pendingMeta = {};
        _.each(sapUtil.screensArray, function(item){this._pendingMeta[item] = {"fields": {}, "conts": {}};}, this);
        if($fusionPageMeta) {
            $fusionPageMeta.winModel = this;
        }
        if(this.syraModel) {
            this._$$syraPageItem = this.syraModel.$$item;
            this._$$syraPageItem.addClass(_winK.fusionPageK);
            this._bindEvents();
       }
    },

    _bindEvents: function(){
        var self = this;
        this._$$syraPageItem.on("click", "." + _winK.fusionPageK + " *", null, function(event){
            var $fusionPageMeta = syraUtil.getFusionPageMeta(self.syraModel), doEvt;
            console.log("**onPageEvent : " + "'" + self.syraModel.getTitle() + "'" + " [" + event.type + "]");
            doEvt = self.onWinEvent(event, $fusionPageMeta.controller);
            if(doEvt != undefined && !doEvt) {
                 event.stopImmediatePropagation();
                 //event.stopPropagation();
            } 
            return doEvt;           
        });
    },

    onWinEvent: function(event, controller){
        // Is it a fusion grid or one of these children?
        var $$target, $$cont, id, $cont, $contMeta, doEvt, isGrid = false, isField = false, caught = false;
        $$cont = ($$target = $(event.target)) ? $$target.closest("." + syraUtil.gridFusionK.cont) : null;
        $cont = ($$cont && (id = $$cont.attr("id"))) ? this.syraModel.idMap[id] : null;
        isGrid = ($cont && ($contMeta = syraUtil.getMetaFromObject($cont))) ? (this.getProto())[$contMeta.$bind] : null;
        // So, notify grid...
        if(isGrid && event.type == "click"){
            caught = true;
            doEvt = $cont.onClick(controller, event);
        }
        // Is it a fusion field?
        if(!isGrid)
        {
            $cont = ($$target && (id = $$target.attr("data-s-field"))) ? this.syraModel.idMap[id] : null;
            isField = ($cont && ($contMeta = syraUtil.getMetaFromObject($cont))) ? (this.getProto())[$contMeta.$bind] : null;
        }
        // Field fusion events are caught by dedicated handler...
        if(!caught && !isField) {
            // General case
            doEvt = controller.trigger("wdgt.win." + event.type, {"target": this, "type": event.type, "data": {"nativeEvt": event}});
        }
        return doEvt;
    },

    _unBindEvents: function(){
        this._$$syraPageItem.off();
    },

    _getButtonValue: function(){
        return sapUtil.getObjFieldValue("", sapUtil.fieldModeType.show);
    },

    _getEntityEx: function(entity){
        var $entityEx, entityEx, $entities = this.getProto(), $type;
        $type = (($entityEx = $entities[(entityEx = sapUtil.getBlockInst(entity))]) && $entityEx && $entityEx.$type == syraUtil.collectionType) ? $entityEx.$type : ($entities[entity] ? $entities[entity].$type : null);
        $entityEx = $entityEx || $entities[(entityEx = entity)];
        return {"type": $type, "entity": $entityEx ? entityEx : null};
    },

    _getEntityType: function(entity){
        var $entities = this.getProto(), coll = sapUtil.getBlockInst(entity), $entity = $entities[entity];
        if($entities[coll] && $entities[coll].$type == syraUtil.collectionType) {
            $entity = (syraUtil.getCollFieldsFromProto($entities, coll))[entity];
        }
        return $entity ? $entity.$type : null;
    },

    getWinId: function(){
        return this._idEx.id;
    },

    getSyraPage: function(){
        return this.syraModel;
    },

    getTitle: function(){
        return this._title.length > 0 ? this._title : (this.syraModel && this.syraModel.$prototype && this.syraModel.$prototype.$title ? this.syraModel.$prototype.$title : "No title...");
    },

    getProto: function(){
        return this._fieldsColl.proto;
    },

    setContainerPending: function(screenId){
        _.each(this._pendingMeta[screenId].conts, function(data, containerName) {
            this._setDataContainer(containerName, data);
        }, this);
        delete this._pendingMeta[screenId].conts;
        this._pendingMeta[screenId].conts = {};
    },

    getDatasetValue: function(entityName){
        var $type, $entity = this._dataset[entityName];        
        if($entity) {
            $type = $entity.$type || "default";
            return this[_instVtbl[$type] ? _instVtbl[$type].getData : _instVtbl["default"].getData](entityName);
        }
        else {
            return null;
        }
    },

    getValue: function (entity) {
        var $entityEx, $bounds = this._fieldsColl.bound, ret = null, value = null, modeType = null, entityType = null;
        // Get current field value
        $entityEx = this._getEntityEx(entity);
        if($entityEx.entity) {
            if($bounds[$entityEx.entity] && $bounds[$entityEx.entity].length > 0) {
                // TODO deal with XBlocks... $bounds[$entityEx.entity][0] or $bounds[$entityEx.entity][n]
                value = $bounds[$entityEx.entity][0][_instVtbl[$entityEx.type] ? _instVtbl[$entityEx.type].getValue : _instVtbl["default"].getValue].apply($bounds[$entityEx.entity][0], arguments);
                entityType = this._getEntityType(entity);
                modeType = entityType && entityType == syraUtil.defaultType ? sapUtil.fieldModeType.edit : sapUtil.fieldModeType.show;
            }
        }
        // Get current value mode type (show, edit, rough)
        if(value != null && value != undefined && modeType) {
            ret = sapUtil.getObjFieldValue(value, modeType);
        }
        return ret;
    },

    setFocus: function (entity) {
        var $entityEx, $bounds = this._fieldsColl.bound, ret = null;
        if (!entity || entity.length === 0) {
            // TODO : focus to a window : preview screen? formula editor? Standard window?
        }
        else {
            $entityEx = this._getEntityEx(entity);
            if($entityEx.entity) {
                if($bounds[$entityEx.entity] && $bounds[$entityEx.entity].length > 0) {
                    // TODO deal with XBlocks... $bounds[$entityEx.entity][0] or $bounds[$entityEx.entity][n]
                    // TODO : deal with disabled fields!
                    $bounds[$entityEx.entity][0][_instVtbl[$entityEx.type] ? _instVtbl[$entityEx.type].setFocus : _instVtbl["default"].setFocus].apply($bounds[$entityEx.entity][0], arguments);
                }
                else
                {
                    // TODO :  no field bound : next field? (MF Grid??)
                }
            }
            else {
                // TODO : Don't exist in proto : next field?
            }
        }
        return ret;
    },

    removeFocus: function (entity) {
        var $entityEx = this._getEntityEx(entity), $bounds = this._fieldsColl.bound, proxy, args = arguments;
        if($entityEx.entity && $bounds[$entityEx.entity] && (proxy = _instVtbl[$entityEx.type] ? _instVtbl[$entityEx.type].removeFocus : _instVtbl["default"].removeFocus)) {
            _.each($bounds[$entityEx.entity], function(item){
                if(item[proxy]) {
                    item[proxy].apply(item, args);
                }
            });
        }
    },

    setEntities: function(entities){
        /*var test = document.syraXTestX.cmi.reply.OACV_4.entities;
        _.each(test, function (entitie, instance) {
            if (!entities[instance]) {
                entities[instance] = {};
            }
            _.extend(entities[instance], entitie);
        });*/
        var $type, $entities = this.getProto(), $bounds = this._fieldsColl.bound, screen;
        _.each(entities, function(data, entityName) {
            $type = ($entities[entityName] ? ($entities[entityName].$type || "default") : null);
            if($entities[entityName]) {
                // Add entity to dataset if necessary
                if (!this._dataset[entityName]) {
                    (this._dataset[entityName] = new EntityStore()).initialize($type, _instVtbl[$type] ? _instVtbl[$type].isDatasetColl : _instVtbl["default"].isDatasetColl);
                }
                // Set data               
                this[_instVtbl[$type] ? _instVtbl[$type].setData : _instVtbl["default"].setData](entityName, $entities[entityName], $bounds[entityName], data);
                if(!$bounds[entityName]) {
                    this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName] = true;
                }                   
            }
            else {
                // Perhaps is it a container entity?
                if(!this._setDataContainer(entityName, data) && (screen = sapUtil.getScreenId(entityName))) { 
                    (!this._pendingMeta[screen].conts[entityName] ? this._pendingMeta[screen].conts[entityName] = {} : void(0));
                    _.extend(this._pendingMeta[screen].conts[entityName], data);
                }

            }
        }, this);
        return null;
    },

    _setStatusBar: function(status){
        // TODO : Notify Hoster?
        return null;
    },

    _setTitle: function(title){
        this.syraModel.renderTitle(this._title = title);
        return null;
    },

    _setDatadField: function(entityName, entity, entityBound, data){
        // Bind data & md
        if (entityBound) {
            _.each(entityBound, function(item){
                item.setDataBind(data.v, null, data);
            });
        }
        // Update dataset (data & md)
        _.extend(this._dataset[entityName].data, data);
        return null;
    },

    _setDataGrid: function(entityName, entity, entityBound, data){
        var todo = (new Date()).getTime(), mvtCode, delta, rcd = {};
        // First, apply delete/insert
        if(data.$mvt) {
            _.each(data.$mvt, function(mvt){
                mvtCode = mvt[0] == sapUtil.dataSetMvt.del ? (mvt.length == 1 ? sapUtil.dataSetMvt.delAll : sapUtil.dataSetMvt.del) : sapUtil.dataSetMvt.insrt;
                delta = this._dataset[entityName].applyMvt(mvtCode, mvt[1], mvt[2]);
                if(delta && (delta.mvtData.length > 0 || delta.delAll)) {
                    this._bindDataGrid(entityBound, delta.mvtData, {"$isDelta": delta.isDelta, "$range": delta.mvtMeta}, null);                   
                }
            }, this);            
        }
        // Update data in dataset
        if(data.$rcd) {
            rcd["$isDelta"] = this._dataset[entityName].storeDataColl(data.$rcd);
        }
        // Update meta-data in dataset
        if(data.$meta){
            this._dataset[entityName].storeMetaColl(data.$meta);
        }
        // Binding...
        console.log("Local Binding Duration: " + ((new Date()).getTime() - todo));
        if(data.$rcd) {
            this._bindDataGrid(entityBound, data.$rcd, rcd);
        }
        if(data.$meta) {
            this._bindDataGrid(entityBound, undefined, null, data.$meta);
        }
        console.log("Total Binding Duration: " + ((new Date()).getTime() - todo));
        return null;
    },

    _bindDataGrid: function(entityBound, $resources, record, metaData){
        if(entityBound){
            _.each(entityBound, function(item){
                item.setDataBind($resources, record, metaData);
            });
        }
    },
    
    _setDataTree: function(entityName, entity, entityBound, data){
        // TODO : improve??
        if(entityBound){
            _.each(entityBound, function(item){
                item.setDataBind(data.$rcd, data.$mvt, data.$meta);
            });
        }
        // Update dataset (data & md)
        _.extend(this._dataset[entityName].data, data);
        //this.data = util.duplicateObj(data)
        return null;
    },

    _setDataContainer: function(containerName, data){
        var obj = this._getContainerObj(containerName);
        if(obj) {
            (data.tit ? obj.renderTitle(data.tit) : void(0));
           // TODO : Other (stt, etc..)
        }
        return obj ? true : false;
    },
 
    _getContainerObj: function(containerName){
        var firstField = sapUtil.getFirstChild(containerName, this._fieldsColl.bound);
        return (firstField ? sapUtil.isBlockInst(containerName) ? firstField[0].boxParent : (firstField[0].boxParent ? firstField[0].boxParent.boxParent : null) : null);
    },
   
    _getDataField: function(entityName){
        var data = {"val": this._dataset[entityName].data.v, "rcd": null, "meta": null};
        if (this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName]) {
            data.meta = this._dataset[entityName].data;
            delete this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName];
        }
        return data;
    },

    _getDataGrid: function(entityName){
        var data = {"val": this._dataset[entityName].data, "rcd": {}, "meta": null};
        if (this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName]) {
            data.meta = this._dataset[entityName].meta;
            delete this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName];
        }
        return data;
     },

    _getDataTree: function(entityName){
        // TODO : improve??
		var dataSet=this._dataset[entityName].data;
        var data = {"val": dataSet.$rcd, "rcd": null, "meta": null};
        if (this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName]) {
            data.meta = dataSet.$meta;
            data.rcd = dataSet.$mvt;
            delete this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName];
        }
        return data;
    },

    dispose: function(){
        if(this.syraModel) {
            this._unBindEvents();
            delete this._$$syraPageItem;
            delete this.syraModel;
            if(this._fieldsColl.proto) {
                delete this._fieldsColl.proto;             
            }
            if(this._fieldsColl.bound) {
                delete this._fieldsColl.bound;             
            }
        }
        _.each(this._dataset, function (entityStore) {
            entityStore.dispose();
        });
        delete this._dataset;
        delete this._statusBar; // TODO : notify hoster to remove status elements
    	// Free instance...
    	// TODO : Free children here?
    }
});