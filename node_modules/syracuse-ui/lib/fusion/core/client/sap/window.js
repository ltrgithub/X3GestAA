"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion "Window" Classes (Stack, model, etc...) and Utilities
 */
var helpers = require('syracuse-core/lib/helpers');
var util = require('syracuse-ui/lib/fusion/tools/util');
var sapUtil = require('./util').Fusion;
var syraUtil = require('./util').Syra;
var Action = require('./action');
var EntityStore = require('./entityStore').EntityStore;


var _winK = {
    "stubWins": {"entities": "setEntities", "statBar": "_setStatusBar", "tit": "_setTitle"},
    "actsType": ["$links", "$actions"],
    "stackDeb": 2,
    "portalWin": "A",
    "fusionPageK": "s-page-trans"
};
var _instVtbl = {"default": {"getValue": "getDataValue", "setFocus": "focus", "setData": "_setDatadField", "getData": "_getDataField", "getCtxProps": "_getFieldCtxProps", "isDatasetColl": false, "isDirty": "dirty"}};
    _instVtbl[syraUtil.dataTypes.treeType] = {"setData": "_setDataTree", "getData": "_getDataTree"};
    _instVtbl[syraUtil.dataTypes.collectionType] = {"setFocus": "setFocus", "setData": "_setDataColl", "getData": "_getDataColl", "isDatasetColl": true, "removeFocus": "resetFocus", "setFocusStyle": "setFocusStyle"};
    _instVtbl[syraUtil.dataTypes.rtfType] = {"getValue": "getInputValue", "removeFocus": "resetFocus", "getCtxProps": "_getRtfFieldCtxProps", "isDirty": "isDirty"};
    _instVtbl[syraUtil.dataTypes.iconType] = {"setData": "_setDataIconField"};
    _instVtbl[syraUtil.dataTypes.htmlType] = _instVtbl[syraUtil.dataTypes.rtfType];

/* Misc utilities */
function _storeCommit(rule){
    return rule && rule.hasOwnProperty("noStoreCommmit") ? !rule.noStoreCommmit : true;
}

/* Window Stack Management class */
function WinStack(){
    this._stack = [];
    for (var i = 0; i < _winK.stackDeb; i++) {
        this._stack[i] = null;
    }
    this._windows = {};
    this._actionsList = null;
}

exports.WinStack = helpers.defineClass(WinStack, null, {
    initialize: function(sapController){
        // Misc
        (this._actionsList = new Action.ActionsList()).initialize(this);
        this._sapController = sapController;
        // Hard declaration of the "portal" Window...
        var idEx = this._getWinIdEx(_winK.portalWin);
        (this._windows[idEx.id] = new WinModel()).initialize(idEx, null, null);
        this._stack[idEx.rank] = idEx.id;
    },
    
    length: function(){
        return this._stack.length - _winK.stackDeb;
    },
    
    isActiveWindow: function(id){
        return !!(this.length() == (this._getWinIdEx(id)).rank);
    },
    
    setActionsState: function(actions){
        return this._actionsList.setState(actions);
    },
    
    shouldDiscardClose: function(closeId, openWins){
        // "close" and "open" clauses on the same Window ID,  in the same reply, and this ID is not already in the Window Stack
        if (openWins) {
            var idEx = this._getWinIdEx(closeId);
            return (openWins[idEx.id] && !this._windows[idEx.id] ? true : false);
        }
    },
    
    shouldDiscardOpen: function(openId, closeWins){
        // Obsolet. TODO : remove
        // "close" and "open" clauses on the same Window ID,  in the same reply, and this ID is not already in the Window Stack
        if (closeWins) {
            var idEx = this._getWinIdEx(openId);
            return (_.indexOf(closeWins, idEx.id) >= 0 && !this._windows[idEx.id] ? true : false);
        }
    },
    
    stack: function(id, winDef, syraPageModel){
        // Register Window
        var idEx = this._getWinIdEx(id), proto;
        (this._windows[idEx.id] = new WinModel()).initialize(idEx, winDef, syraPageModel);
        this._stack.push(idEx.id);
        // Register Window actions
        proto = syraUtil.getProtoFromPage(syraPageModel);
        _.each(_winK.actsType, function(type){
            this.registerWinActions(proto[type], idEx.id, type);
        }, this._actionsList);
        this._sapController.getSiteController().triggerAdx("sap.win.stacked", {
            "target": this._windows[idEx.id],
            "type": "opened",
            "data": {}
        });
    },
    
    unStack: function(id, rank, dispose){
        var idEx = this._getWinIdEx(id), win = this._windows[idEx.id], syraPage = null;
        if (win) {
            this._actionsList.unregisterAllWinActions(idEx.id);
            this._sapController.getSiteController().triggerAdx("sap.win.unstack", {
                "target": this._windows[idEx.id],
                "type": "close",
                "data": {}
            }, dispose);
            syraPage = win.getSyraPage();
            win.dispose();
            delete this._windows[idEx.id];
            this._stack.splice(idEx.rank, 1);
            this._sapController.getSiteController().triggerAdx("sap.win.unstacked", {
                "target": null,
                "type": "closed",
                "data": {
                    "sheet": syraPage
                }
            }, dispose);
            // TODO : check error?
        }
        else {
            //TODO : error?
        }
    },
    
    getWindow: function(winId){
        var idEx = this._getWinIdEx(winId);
        return this._windows[idEx.id] || null;
    },
    
    getWindowProto: function(winId){
        var win = this.getWindow(winId);
        return (win ? win.getProto() : null);
    },
    
    getSyraModel: function(winId){
        var win = this.getWindow(winId);
        return (win ? win.syraModel : null);
    },
    
    applyChange: function(winId, change, options){
        var ret = null, retEx = {}, idEx = this._getWinIdEx(winId);
        if (this._windows[idEx.id]) {
            _.each(change, function(data, type){
                if (_winK.stubWins[type] && this._windows[idEx.id][_winK.stubWins[type]]) {
                    retEx[type] = this._windows[idEx.id][_winK.stubWins[type]](data, options);
                }
            }, this);
        }
        else {
            // TODO : exception, return code, etc...
        }
        _.each(retEx, function(diagnoses, task){
            if (diagnoses) {
                // TODO : check return code ==> ret = ...
            }
        }, this);
        return ret;
    },
    
    postBuildInit: function(winId){
        var win = this.getWindow(winId), pageFacet, syraModel;
        if (win) {
            pageFacet = win.getSyraPageFacet();
            syraModel = win.getSyraPage();
            // Get Ptr to Tab Folder
            if (syraModel && pageFacet === syraUtil.pageFacet.edit) {
                win.$folderTabs = _.filter(syraModel.idMap, function(article){
                    var $articleMeta;
                    return ($articleMeta = syraUtil.getMetaFromObject(article)) && sapUtil.isTabScreen($articleMeta[sapUtil.metaNameMap.xid]);
                });
                if (win.$folderTabs) {
                    _.sortBy(win.$folderTabs, function(tab){
                        return (syraUtil.getMetaFromObject(tab))[sapUtil.metaNameMap.xid];
                    });
                }
            }
        }
    },
    
    showWinTab: function(winId, tabNum){
        var win = this.getWindow(winId), $tab = win && win.$folderTabs ? win.$folderTabs[tabNum - 1] : null;
        if ($tab && $tab.$$header) {
            $tab.$$header.trigger("click", {
                "internal": true
            });
        }
        return $tab ? true : false;
    },
    
    setFocus: function(winId, style, entity, extra){
        var ret = null, idEx = this._getWinIdEx(winId), $tab;
        if (this._windows[idEx.id]) {
            if (sapUtil.isSpecialScrnId(entity)) {
                if (sapUtil.isButtonScreen(entity)) {
                    ret = {
                        "ok": true,
                        "srvAct": true,
                        "act": "SRV_CHAMP_SUIVANT",
                        "params": sapUtil.getButtonValue()
                    };
                }
                else 
                    if (sapUtil.isTabScreen(entity)) {
                        $tab = _.find(this._windows[idEx.id].$folderTabs, function(tab){
                            var $tabMeta = syraUtil.getMetaFromObject(tab);
                            return $tabMeta && $tabMeta.$opened;
                        });
                        if ($tab) {
                            syraUtil.setTabFocus($tab);
                        }
                    }
                    else 
                        if (sapUtil.isListScreen(entity)) {
                        // TODO!
                        }
            }
            else {
                ret = WinModel.prototype.setFocus.apply(this._windows[idEx.id], Array.prototype.slice.call(arguments, 1));
            }
        }
        else {
            // TODO : error!
        }
        return ret;
    },
    
    setDataValue: function(winId){
        var ret = false, winModel = this.getWindow(winId);
        if (winModel) {
            WinModel.prototype.setDataValue.apply(winModel, Array.prototype.slice.call(arguments, 1));
            ret = true;
        }
        return ret;
    },
    
    getValue: function(winId, entity){
        var ret = null, idEx = this._getWinIdEx(winId);
        if (this._windows[idEx.id]) {
            if (sapUtil.isSpecialScrnId(entity)) {
                if (sapUtil.isButtonScreen(entity) || sapUtil.isListScreen(entity)) {
                    ret = sapUtil.getButtonValue();
                }
                else 
                    if (sapUtil.isTabScreen(entity)) {
                        ret = sapUtil.getObjFieldValue(this._sapController.getCurrTabIdx(), sapUtil.fieldModeType.rough);
                    }
            }
            else 
                if (!entity || entity.length === 0) {
                    // We are on a window (preview screen, formula editor, Standard window, etc...)
                    ret = null;
                }
                else {
                    ret = WinModel.prototype.getValue.apply(this._windows[idEx.id], Array.prototype.slice.call(arguments, 1));
                }
        }
        return ret;
    },
    
    removeFocus: function(winId){
        var idEx = this._getWinIdEx(winId);
        if (this._windows[idEx.id]) {
            WinModel.prototype.removeFocus.apply(this._windows[idEx.id], Array.prototype.slice.call(arguments, 1));
        }
    },
    
    _getWinIdEx: function(id){
        var idEx = {
            "id": id,
            "rank": id
        };
        (_.isNumber(id) ? idEx.id = sapUtil.getWinId(id) : idEx.rank = sapUtil.getWinRank(id));
        return idEx;
    },
    
    enumStack: function(iterator, context){
        var args = arguments;
        if (this._stack.length > 0) {
            for (var i = this._stack.length - 1; i >= _winK.stackDeb; i--) {
                iterator.apply(context, [this._stack[i], i].concat(Array.prototype.slice.call(args, 2)));
            }
        }
    },
    
    findStack: function(iterator, context){
        var win = null, args = arguments;
        if (this._stack.length > 0) {
            for (var i = this._stack.length - 1; i >= _winK.stackDeb; i--) {
                if (iterator.apply(context, [this._stack[i], i].concat(Array.prototype.slice.call(args, 2)))) {
                    win = this._stack[i];
                    break;
                }
            }
        }
        return win;
    },
    
    dispose: function(force){
        // Hard dispose for Portal Window
        var portalId = this._getWinIdEx(_winK.portalWin), winPortal = this._windows[portalId.id];
        winPortal.dispose();
        delete this._windows[portalId.id];
        // Dispose other windows ...
        this.enumStack(this.unStack, this, true);
        delete this._stack;
        if (this._actionsList) {
            this._actionsList.dispose();
            delete this._actionsList;
        }
        delete this._windows;
        if (this._sapController) {
            delete this._sapController;
        }
        // TODO : vérifier si on est bien cohérent... pas un dispose sauvage!?
    }
});


/* Window model class */
function WinModel(){
}

WinModel = helpers.defineClass(WinModel, null, {
    initialize: function(idEx, winDef, syraModel){
        var $fusionPageMeta = syraModel ? syraUtil.getFusionPageMeta(syraModel) : null, extd;
        this._idEx = idEx;
        this._mdata = winDef ? util.duplicateObj(winDef) : null;
        this.syraModel = syraModel;
        this._fieldsColl = {
            "proto": syraUtil.get$FromPage(syraModel),
            "bound": syraUtil.getBoundFldsFromPage(syraModel)
        };
        this._dataset = {};
        this._statusBar = {};
        this._title = "";
        this._pendingMeta = {};
        _.each(sapUtil.screensArray, function(item){
            this._pendingMeta[item] = {
                "fields": {},
                "conts": {}
            };
        }, this);
        if ($fusionPageMeta) {
            $fusionPageMeta.winModel = this;
        }
        if (this.syraModel) {
            this._$$syraPageItem = this.syraModel.$$item;
            this._$$syraPageItem.addClass(_winK.fusionPageK);
            this._bindEvents();
        }
        if (this._mdata && this._mdata.name && sapUtil.isSpecialWin(this._mdata.name)) {
            extd = this._getExtendProps();
            if (extd && extd.title) {
                this._setTitle(extd.title);
            }
        }
    },
    
    _bindEvents: function(){
        var self = this, fusionController = syraUtil.getFusionController(self.syraModel);
        // Add global internal listener for this window
        fusionController.addGlobalListeners(function(event){
            self.closeCurrCtxPopup(event.target);
        }, this);
    },
    
    onWinEvent: function(event, controller){
        // Is it a fusion grid or one of these children?
        var $$target, $$cont, id, $cont, $contMeta, doEvt = true, isGrid = false, isField = false, caught = false;
        $$cont = ($$target = $(event.target)) ? $$target.closest("." + syraUtil.gridFusionK.cont) : null;
        isGrid = $$cont && $$cont.length > 0 ? true : false;
        // So, we are on a grid article and at now we let the caller processed the event...
        if (isGrid && event.type == "click") {
            caught = true;
            doEvt = true;
        }
        // Is it a fusion field?
        if (!isGrid) {
            $cont = ($$target && (id = $$target.attr("data-s-field"))) ? this.syraModel.idMap[id] : null;
            isField = ($cont && ($contMeta = syraUtil.getMetaFromObject($cont))) ? (this.getProto())[$contMeta.$bind] : null;
        }
        // Field fusion events are caught by dedicated handler...
        if (!caught && !isField) {
            // General case
            doEvt = controller.triggerAdx("wdgt.win." + event.type, {
                "target": this,
                "type": event.type,
                "data": {
                    "nativeEvt": event
                }
            });
        }
        return doEvt;
    },
    
    _unBindEvents: function(){
        this._$$syraPageItem.off();
    },
    
    getWinName: function(){
        return this._mdata && this._mdata.name ? this._mdata.name : null;
    },
    
    _getSession: function(){
        var fusionController = syraUtil.getFusionController(this.syraModel);
        return fusionController ? fusionController.getSession() : null;
    },
    
    _getEntityEx: function(entity){
        var $entityEx, entityEx, $entities = this.getProto(), $type;
        $type = (($entityEx = $entities[(entityEx = sapUtil.getBlockInst(entity))]) && $entityEx && $entityEx.$type == syraUtil.dataTypes.collectionType) ? $entityEx.$type : ($entities[entity] ? $entities[entity].$type : null);
        $entityEx = $entityEx || $entities[(entityEx = entity)];
        return {
            "type": $type,
            "entity": $entityEx ? entityEx : null
        };
    },
    
    _getExtendProps: function(){
        var tab, props = null;
        if (this._mdata && this._mdata.extend) {
            if ((tab = this._mdata.extend.split(";")) && tab.length > 0) {
                props = {
                    "title": tab[0],
                    "width": (tab.length > 1 ? tab[1] : null),
                    "height": (tab.length > 2 ? tab[2] : null)
                };
            }
        }
        return props;
    },
    
    getWinId: function(){
        return this._idEx.id;
    },
    
    getSyraPage: function(){
        return this.syraModel;
    },
    
    getSyraPageFacet: function(){
        return this.syraModel.$facet;
    },
    
    getTitle: function(){
        return this._title.length > 0 ? this._title : (this.syraModel && this.syraModel.$prototype && this.syraModel.$prototype.$title ? this.syraModel.$prototype.$title : "No title...");
    },
    
    getProto: function(){
        return this._fieldsColl.proto;
    },
    
    setCurrCtxPopup: function(field){
        if (this._currCtxPopupField) {
            delete this._currCtxPopupField;
        }
        this._currCtxPopupField = field;
    },
    
    closeCurrCtxPopup: function(obj){
        var popup, field;
        if (this._currCtxPopupField) {
            if ((popup = syraUtil.getPopupDateFromField(this._currCtxPopupField))) {
                // DateTime popup
                field = this._currCtxPopupField;
                delete this._currCtxPopupField;
                field.$$item.find(".s-" + (obj.arrayLevel ? "inplace" : "field") + "-date-picker").trigger("click");
            }
            else 
                if ((popup = syraUtil.getPopupCtxFromField(this._currCtxPopupField))) {
                    // Contextual popup
                    delete this._currCtxPopupField;
                    $(document).trigger("click." + popup._autoCloseNamespace);
                }
        }
    },
    
    setContainerPending: function(screenId){
        _.each(this._pendingMeta[screenId].conts, function(data, containerName){
            this._setDataContainer(containerName, data);
        }, this);
        delete this._pendingMeta[screenId].conts;
        this._pendingMeta[screenId].conts = {};
    },
    
    setDataValue: function(entityName, line, value, options){
        var data = {}, collId;
        if (line !== null && line !== undefined && line > 0) {
            // Warning : record must exist! 
            collId = sapUtil.getBlockInst(entityName);
            data[collId] = {
                "$rcd": [{
                    "$uuid": line - 1
                }]
            };
            data[collId].$rcd[0][entityName] = value;
        }
        else {
            data[entityName] = {
                "v": value
            };
        }
        this.setEntities(data, options);
    },
    
    getDatasetValue: function(entityName){
        var $type, $entityEx = this._getEntityEx(entityName);
        if ($entityEx) {
            $type = $entityEx.type || "default";
            return this[_instVtbl[$type] && _instVtbl[$type].getData ? _instVtbl[$type].getData : _instVtbl["default"].getData].apply(this, arguments);
        }
        else {
            return null;
        }
    },
    
    getValue: function(entity){
        var $entityEx, $bounds = this._fieldsColl.bound, ret = null, value = null, modeType = sapUtil.fieldModeType.show, entityType = null, isDirtyProxy, ctxProxy, ctxProps = null, notModified = undefined;
        // Get current field value & properties
        $entityEx = this._getEntityEx(entity);
        if ($entityEx.entity) {
            if ($bounds[$entityEx.entity] && $bounds[$entityEx.entity].length > 0) {
                // TODO deal with XBlocks... $bounds[$entityEx.entity][0] or $bounds[$entityEx.entity][n]
                if ((isDirtyProxy = _instVtbl[$entityEx.type] ? (_instVtbl[$entityEx.type].isDirty || _instVtbl["default"].isDirty) : _instVtbl["default"].isDirty) && $bounds[$entityEx.entity][0][isDirtyProxy] && !$bounds[$entityEx.entity][0][isDirtyProxy]()) {
                    notModified = true;
                    value = undefined;
                }
                else {
                    value = $bounds[$entityEx.entity][0][_instVtbl[$entityEx.type] && _instVtbl[$entityEx.type].getValue ? _instVtbl[$entityEx.type].getValue : _instVtbl["default"].getValue].apply($bounds[$entityEx.entity][0], arguments);
                }
                entityType = sapUtil.getEntityType(entity, this.getProto());
                //modeType = entityType && (entityType == syraUtil.dataTypes.stringType || entityType == syraUtil.dataTypes.dateType) ? sapUtil.fieldModeType.edit : sapUtil.fieldModeType.show;
                modeType = entityType ? sapUtil.fieldModeType.edit : sapUtil.fieldModeType.show;
            }
            // Get current field context properties
            if ((ctxProxy = _instVtbl[entityType] && _instVtbl[entityType].getCtxProps || _instVtbl["default"].getCtxProps)) {
                ctxProps = this[ctxProxy]($entityEx.entity, $bounds);
            }
        }
        // Embed current value mode type (show, edit, rough), contextual properties, etc...
        if ((value !== null && value !== undefined) || notModified) {
            ret = sapUtil.getObjFieldValue(value, modeType, ctxProps, notModified);
        }
        return ret;
    },
    
    setFocus: function(style, entity){
        var self = this, $entityEx, $bounds = this._fieldsColl.bound, ret = null, args, setFocusProxy, setFocusStyleProxy, $screenTab = null, screenTab, evtData;
        if (!entity || entity.length === 0) {
            // TODO : focus to a window : preview screen? formula editor? Standard window?
        }
        else {
            if (($entityEx = this._getEntityEx(entity)) && $entityEx.entity) {
                // First, check if target is in a screen whose folder has not yet been opened...
                if (this.$folderTabs && (screenTab = sapUtil.getScreenId($entityEx.entity))) {
                    $screenTab = _.find(this.$folderTabs, function(tab){
                        var $tabMeta = syraUtil.getMetaFromObject(tab);
                        return $tabMeta && screenTab == sapUtil.isFolderTab($tabMeta[sapUtil.metaNameMap.xid]) && !$tabMeta.$opened;
                    });
                }
                if ($screenTab && $screenTab.$$header) {
                    // So target is on a none displayed folder screen, we fire a "click" on the corresponding tab folder
                    args = arguments;
                    evtData = {
                        "internal": true,
                        "callback": function(){
                            self.setFocus.apply(self, args);
                        }
                    };
                    $screenTab.$$header.trigger("click", evtData);
                    if (!evtData.ok) {
                        // TODO : change folder failed... what we should do?
                        return ret;
                    }
                    return ret;
                }
                // So, screen is online
                if ($bounds[$entityEx.entity] && $bounds[$entityEx.entity].length > 0) {
                    // TODO deal with XBlocks... $bounds[$entityEx.entity][0] or $bounds[$entityEx.entity][n]
                    // TODO : deal with disabled fields!
                    args = Array.prototype.slice.call(arguments, 1);
                    setFocusProxy = _instVtbl[$entityEx.type] && _instVtbl[$entityEx.type].setFocus ? _instVtbl[$entityEx.type].setFocus : _instVtbl["default"].setFocus;
                    if (setFocusProxy && $bounds[$entityEx.entity][0][setFocusProxy]) {
                        $bounds[$entityEx.entity][0][setFocusProxy].apply($bounds[$entityEx.entity][0], args);
                    }
                    setFocusStyleProxy = _instVtbl[$entityEx.type] && _instVtbl[$entityEx.type].setFocusStyle ? _instVtbl[$entityEx.type].setFocusStyle : _instVtbl["default"].setFocusStyle;
                    if (setFocusStyleProxy && $bounds[$entityEx.entity][0][setFocusStyleProxy]) {
                        $bounds[$entityEx.entity][0][setFocusStyleProxy].apply($bounds[$entityEx.entity][0], [style].concat(args));
                    }
                    else {
                        // ... call Fusion default stub...
                        this._setFocusStyleDef.apply(this, [$bounds[$entityEx.entity][0], $entityEx.entity, $entityEx.type, style].concat(args));
                    }
                }
                else {
                    // TODO :  no field bound : next field? (MF Grid??)
                }
            }
            else {
                // TODO : Don't exist in proto : next field?
            }
        }
        return ret;
    },
    
    _setFocusStyleDef: function($field, entityEx, entityExType, style, entity, nl, isEdit, params){
        var sess;
        if (entityExType == syraUtil.dataTypes.collectionType && $field._store._records.length >= nl) {
            $field = ($field._store._records[nl - 1].boundFields && $field._store._records[nl - 1].boundFields[entity] ? $field._store._records[nl - 1].boundFields[entity][0] : null);
        }
        if (style && $field && $field._input) {
            // Raz
            syraUtil.razStyleOnInput($field._input, sapUtil.focusStyle, style);
            this._showFieldError($field, null, true);
            // Set
            if (sapUtil.focusStyle[style] && sapUtil.focusStyle[style].css) {
                document.site.toggleClass($field._input, sapUtil.focusStyle[style].css, true);
                if (style == sapUtil.focusStyle.fmtErr.code && (sess = this._getSession())) {
                    this._showFieldError($field, [sess.getlabel("error", "12", "Value does not respect format or type")]);
                }
            }
        }
    },
    
    removeFocus: function(entity){
        var $entityEx, $bounds, proxy;
        if (entity && entity.length > 0) {
            $entityEx = this._getEntityEx(entity);
            $bounds = this._fieldsColl.bound;
            if ($entityEx.entity && $bounds[$entityEx.entity] && $bounds[$entityEx.entity].length > 0) {
                if ((proxy = _instVtbl[$entityEx.type] ? _instVtbl[$entityEx.type].removeFocus : _instVtbl["default"].removeFocus) && $bounds[$entityEx.entity][0][proxy]) {
                    $bounds[$entityEx.entity][0][proxy].apply($bounds[$entityEx.entity][0], arguments);
                }
                else {
                    // ... call Fusion default stub...
                    this._removeFocusDef.apply(this, [$bounds[$entityEx.entity][0], $entityEx.entity, $entityEx.type, entity].concat(Array.prototype.slice.call(arguments, 1)));
                }
            }
        }
    },
    
    _removeFocusDef: function($field, entityEx, entityExType, entity, nl){
        if (entityExType == syraUtil.dataTypes.collectionType && nl >=0 && $field._store._records.length >= nl) {
            $field = ($field._store._records[nl - 1].boundFields && $field._store._records[nl - 1].boundFields[entity] ? $field._store._records[nl - 1].boundFields[entity][0] : null);
        }
        if($field) {
            this._showFieldError($field, null, true);
            if ($field._input) {
                syraUtil.razStyleOnInput($field._input, sapUtil.focusStyle, "");
            }
        }
    },
    
    setEntities: function(entities, options){
        /*var test = document.syraXTestX.cmi.reply.OACV_4.entities;
         _.each(test, function (entitie, instance) {
         if (!entities[instance]) {
         entities[instance] = {};
         }
         _.extend(entities[instance], entitie);
         });*/
        var $type, $entities = this.getProto(), $bounds = this._fieldsColl.bound, screen;
        _.each(entities, function(data, entityName){
            $type = ($entities[entityName] ? ($entities[entityName].$type || "default") : null);
            if ($entities[entityName]) {
                this.setData(entityName, $type, $bounds[entityName], data, options);
            }
            else {
                // Perhaps is it a container entity?
                if (!this._setDataContainer(entityName, data) && (screen = sapUtil.getScreenId(entityName))) {
                    (!this._pendingMeta[screen].conts[entityName] ? this._pendingMeta[screen].conts[entityName] = {} : void (0));
                    _.extend(this._pendingMeta[screen].conts[entityName], data);
                }
                
            }
        }, this);
        return null;
    },
    
    setData: function(entityName, entityType, entityBounds, data, options){
        // Add entity to dataset if necessary
        entityType = entityType || "default";
        if (!this._dataset[entityName]) {
            (this._dataset[entityName] = new EntityStore()).initialize(entityType, _instVtbl[entityType] ? _instVtbl[entityType].isDatasetColl : _instVtbl["default"].isDatasetColl, entityName);
        }
        // Set data
        entityBounds = entityBounds || this._fieldsColl.bound[entityName];
        this[_instVtbl[entityType] && _instVtbl[entityType].setData ? _instVtbl[entityType].setData : _instVtbl["default"].setData](entityName, entityBounds, data, options);
        if (!entityBounds) {
            this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName] = true;
        }
    },
    
    _setStatusBar: function(status, options){
        // TODO : Notify Hoster?
        return null;
    },
    
    _setTitle: function(title, options){
        this.syraModel.setTitle(this._title = title);
        return null;
    },
    
    _setDatadField: function(entityName, entityBound, data, options){
        // Adjust "style" meta
        sapUtil.cureStyle(data, entityName, this._getSession());
        // Bind data & md
        if (entityBound && (!options || !options.noUI)) {
            _.each(entityBound, function(item){
                item.setDataBind(data.v, null, data);
            });
        }
        // Update dataset (data & md)
        if (_storeCommit(options)) {
            for (var prop in data) {
                this._dataset[entityName].data[prop] = data[prop];
            }
        }
        return null;
    },
    
    _setDataIconField: function(entityName, entityBound, data, options){
        data = sapUtil.adjustIcoFieldData(data);
        this._setDatadField(entityName, entityBound, data, options);
        return null;
    },
    
    _setDataColl: function(entityName, entityBound, data, options){
        var mvtCode, delta, rcd = {}, commit = _storeCommit(options), self = this, elapse = (new Date()).getTime(), syraElapseEx = {"data": 0, "mvt": 0, "meta": 0}, syraElapse = 0, styObj, styEx, setUI = (!options || !options.noUI);
        var logger, fusionController = syraUtil.getFusionController(this.syraModel), leftListColl = sapUtil.isListScreen(entityName), change = {};
        logger = fusionController ? fusionController.getLogger() : null;
        // Optimization : no data store update for left list collection!
        if (leftListColl) {
            commit = false;
            options = options || {};
            options.lf = true;
        }
        // Apply delete/insert/update on data
        syraElapseEx = this._dataset[entityName].applyDataCollEx(data, commit, options, function(update, options){
            var change = {}, tick;
            change[entityName] = update;
            tick = setUI ? self._bindDataColl(entityName, entityBound, change, options, logger) : 0;
            delete change[entityName];
            return tick;
        });
        // Apply meta-data
        if (data.$meta) {
            if(commit) {
                this._dataset[entityName].storeMetaColl(data.$meta);
            }
            if (setUI) {
                this._dataset[entityName].getMetaColl(change, data.$meta, this._getSession(), options);
                syraElapseEx.meta = this._bindDataColl(entityName, entityBound, change, {"$isPartialDelta": true}, logger);
            }
        }
        if (logger) {
            syraElapse += (syraElapseEx.data + syraElapseEx.mvt + (syraElapseEx.meta || 0));
            logger.trace({"severety": "info"}, "Binding Duration for '" + entityName + "' ==> Fusion : " + ((new Date()).getTime() - elapse - syraElapse) + " - Syra : " + syraElapse + " (with apply Mvt : " + syraElapseEx.mvt + ", update data : " + syraElapseEx.data + ", and meta : " + (syraElapseEx.meta || 0) + ")");
        }
        return null;
    },
    
    _bindDataColl: function(entityName, entityBound, $resources, options, logger){
        var elapse = (new Date()).getTime();
        $resources.$isPartialDelta = options && options.$isPartialDelta;
        if (logger && entityName) {
            logger.trace({"severety": "warn", "toJson": true}, "==> update for " + entityName + " (partial delta : " + ($resources.$isPartialDelta ? "true" : "false") + ")", $resources);
        }
        if (entityBound) {
            _.each(entityBound, function(item){
                 item.page.applyChange($resources);
            });
        }
        return (new Date()).getTime() - elapse;
    },
    
    _setDataTree: function(entityName, entityBound, data, options){
        // TODO : improve??
        if (entityBound && (!options || !options.noUI)) {
            _.each(entityBound, function(item){
                item.setDataBind(data.$rcd, data.$mvt, data.$meta);
            });
        }
        // Update dataset (data & md).... but, warning : for now we don't update data store (remove 2 next lines otherwise)
        options = options || {};
        options.noStoreCommmit = true;
        if (_storeCommit(options)) {
            _.extend(this._dataset[entityName].data, data);
        }
        return null;
    },
    
    _setDataContainer: function(containerName, data){
        var obj = this._getContainerObj(containerName);
        sapUtil.cureStyle(data, containerName, this._getSession());
        if (obj) {
            (data.tit ? obj.setTitle(data.tit) : void (0));
            if (data.sty) {
                // TODO : set style to container (block or section) and all children...              
            }
        }
        return obj ? true : false;
    },
    
    _getContainerObj: function(containerName){
        var firstField = sapUtil.getFirstChild(containerName, this._fieldsColl.bound), $screenTab = null, contObj = null;
        if (firstField) {
            contObj = (sapUtil.isBlockInst(containerName) ? firstField[0].boxParent : (firstField[0].boxParent ? firstField[0].boxParent.boxParent : null));
        }
        else 
            if (sapUtil.isScreenInst(containerName) && this.$folderTabs) {
                $screenTab = _.find(this.$folderTabs, function(tab){
                    var $tabMeta = syraUtil.getMetaFromObject(tab);
                    return $tabMeta && containerName == sapUtil.isFolderTab($tabMeta[sapUtil.metaNameMap.xid]);
                });
            }
        return contObj || $screenTab;
    },
    
    _getDataField: function(entityName, line, isExternalFmt, onlyValue){
        var dataSet, data;
        if(!this._dataset[entityName]) {
          return isExternalFmt ? {} : (onlyValue ? null : {});
        }
        dataSet = this._dataset[entityName].data;
        data = isExternalFmt ? {"val": dataSet.v, "rcd": null, "meta": onlyValue ? null : dataSet} : (onlyValue ? dataSet.v : dataSet);
        if (this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName] && isExternalFmt) {
            data.meta = dataSet;
            delete this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName];
        }
        return data;
    },
    
    _getDataColl: function(entityName, line, isExternalFmt, onlyValue){
        var data, isLinesColl = sapUtil.isBlockInst(entityName), dateSet, options;
        if(!this._dataset[entityName] && isLinesColl) {
            return {};
        }
        dateSet = isLinesColl ? this._dataset[entityName].data : this._dataset[sapUtil.getBlockInst(entityName)].data;
        if (line === undefined || line === null) {
            if (isLinesColl) {
                // Full collection
                if(isExternalFmt) {
                    data = {"val": {"$isPartialDelta": false}};
                    data.val[entityName] = dateSet;
                    if (this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName]) {
                        data["meta"] = {"$isPartialDelta": true};
                        this._dataset[entityName].getMetaColl(data["meta"], this._dataset[entityName].meta, this._getSession(), options);
                        delete this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName];
                    }
                }
                else {
                    data = dateSet;
                }
            }
            else {
                // Full row...
            }
        }
        else {
            if (isLinesColl) {
                data = isExternalFmt ? {"val": dateSet[line - 1]} : dateSet[line - 1];
            }
            else {
                data = isExternalFmt ? {"val": dateSet[line - 1][entityName]} : dateSet[line - 1][entityName];
            }
        }
        if (data && !data.rcd && isExternalFmt) {
            data.rcd = {};
        }
        return data;
    },
        
    _getDataTree: function(entityName, line, isExternalFmt){
        // TODO : improve??
        var dataSet = this._dataset[entityName].data;
        var data = isExternalFmt ? {
            "val": dataSet.$rcd,
            "rcd": null,
            "meta": null
        } : dataSet;
        if (this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName]) {
            data.meta = dataSet.$meta;
            data.rcd = dataSet.$mvt;
            delete this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName];
        }
        return data;
    },
    
    _getFieldCtxProps: function(entityName, entityBound){
        var ctx = {};
        if (entityBound[entityName][0].getCaretPosition) {
            ctx["crsr"] = entityBound[entityName][0].getCaretPosition() + 1;
        }
        // Others properies???
        return ctx;
    },
    
    _getRtfFieldCtxProps: function(entityName, entityBound){
        return this._getFieldCtxProps(entityName, entityBound);
    },
    
    _showFieldError: function(field, errors, raz){
        var len;
        if (field.showErrors) {
            if ((raz || (len = errors.length) == 0) && field.$displayedDiagnoses) {
                field.showErrors([]);
            }
            else 
                if (len > 0) {
                    field.showErrors(errors, {
                        "noViewer": true
                    });
                }
        }
    },
    
    dispose: function(){
        var fusionController;
        if (this.syraModel) {
            this._unBindEvents();
            if ((fusionController = syraUtil.getFusionController(this.syraModel))) {
                fusionController.rmGlobalListeners(this);
            }
            delete this._$$syraPageItem;
            _.each(this.$folderTabs, function($tabs, idx){
                delete this[idx];
            }, this.$folderTabs);
            delete this.syraModel;
            if (this._fieldsColl.proto) {
                delete this._fieldsColl.proto;
            }
            if (this._fieldsColl.bound) {
                delete this._fieldsColl.bound;
            }
        }
        delete this._currCtxPopupField;
        _.each(this._dataset, function(entityStore){
            entityStore.dispose();
        });
        delete this._dataset;
        delete this._statusBar; // TODO : notify hoster to remove status elements
        // Free instance...
        // TODO : Free children here?
    }
});
