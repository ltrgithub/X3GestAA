"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion "Window" Classes (Stack, model, etc...) and Utilities
 */
var helpers = require('syracuse-core/lib/helpers');
var util = require('syracuse-ui/lib/fusion/tools/util');
var sapUtil = require('./util').Fusion;
var syraUtil = require('./util').Syra;
var Action = require('./action');
var EntityStore = require('./entityStore').EntityStore;
var MenuManagement = require('./winMenu').MenuManagement;


var _winK = {
    "stubWins": {"entities": "setEntitiesValue", "statBar": "_setStatusBar", "tit": "_setTitle"},
    "actsType": ["$links", "$actions"],
    "stackDeb": 1,
    "portalWin": "A",
    "fusionPageK": "s-page-trans"
};
var _instVtbl = {"default": {"_getDataInput": "getDataValue", "setFocus": "focus", "_setDataStore": "_setDataField", "_getDataStore": "_getDataField", "_getDataFmt": "_getFmtField", "getCtxProps": "_getFieldCtxProps", "isDatasetColl": false, "isDirty": "dirty"}};
    _instVtbl[syraUtil.dataTypes.treeType] = {"_setDataStore": "_setDataTree", "_getDataStore": "_getDataTree", "_getDataFmt": "_getFmtTree"};
    _instVtbl[syraUtil.dataTypes.collectionType] = {"_getDataInput": "_getValueCel","setFocus": "setFocus", "_setDataStore": "_setDataColl", "_getDataStore": "_getDataColl", "_getDataFmt": "_getFmtColl", "isDatasetColl": true, "removeFocus": "resetFocus", "setFocusStyle": "setFocusStyle"};
    _instVtbl[syraUtil.dataTypes.rtfType] = {"_getDataInput": "getInputValue", "removeFocus": "resetFocus", "getCtxProps": "_getRtfFieldCtxProps", "isDirty": "isDirty"};
    _instVtbl[syraUtil.dataTypes.iconType] = {"_setDataStore": "_setDataIconField"};
	_instVtbl[syraUtil.dataTypes.imageType] = {"_setDataStore": "_setDataImageField"};
    _instVtbl[syraUtil.dataTypes.reference] = {"_getDataInput": "_getValueFieldRef", "_setDataStore": "_setDataFieldRef", "_getDataStore": "_getDataFieldRef", "isDatasetColl": false};
    _instVtbl[syraUtil.dataTypes.choiceType] = {"_getDataInput": "_getValueChoiceField"};
    _instVtbl[syraUtil.dataTypes.htmlType] = _instVtbl[syraUtil.dataTypes.rtfType];

/* Misc utilities */
function _storeCommit(rule){
    return rule && rule.hasOwnProperty("noStoreCommmit") ? !rule.noStoreCommmit : true;
}
function _getNextFieldDescObj(params, action){
    return {"ok": true, "srvAct": true, "act": action, "params": util.duplicateObj(params)};
}
function _getArrayBoundCell($array, entity, idx){
    return idx !== undefined && idx >=0 ? $array.getField(entity, idx) : undefined;
}
function _getFocusFldForBounds($fieldBounds, $entityType, len){
    var i, $bound = $fieldBounds[len - 1], meta;
    for (i = 0; i < len; i++) {
        if ((meta = syraUtil.getMetaFromObject($fieldBounds[i]))) {
            if ($entityType == syraUtil.dataTypes.collectionType && meta.$format && meta.$format == "grid") {
                // TODO : improve... cas du mode dual, etc, ...
                $bound = $fieldBounds[i];
                break;
            }
            else if($entityType !== syraUtil.dataTypes.collectionType) {
                // TODO : What about graphical bloc linked to other type?
            }     
        }
    }
    return $bound;
}
function _getValueFldForBounds($fieldBounds, $entityType, len){
    var i, $bound = $fieldBounds[len - 1], meta;
    for (i = 0; i < len; i++) {
        if ((meta = syraUtil.getMetaFromObject($fieldBounds[i]))) {
            if ($entityType == syraUtil.dataTypes.collectionType && meta.$format && meta.$format == "grid") {
                $bound = $fieldBounds[i];
                break;
            }
            else if($entityType !== syraUtil.dataTypes.collectionType) {
                // TODO : What about graphical bloc linked to other type?
            }     
        }
    }
    return $bound;
}


/* Window Stack Management class */
function WinStack(){
    this._stack = [];
    for (var i = 0; i < _winK.stackDeb; i++) {
        this._stack[i] = null;
    }
    this._windows = {};
    this._actionsList = null;
}

exports.WinStack = helpers.defineClass(WinStack, null, {
    initialize: function(sapController){
        // Misc
        (this._actionsList = new Action.ActionsList()).initialize(this);
        this._sapController = sapController;
        // Hard declaration of the "portal" Window...
        var idEx = this._getWinIdEx(_winK.portalWin);
        (this._windows[idEx.id] = new WinModel()).initialize(idEx, null, null);
        this._stack[idEx.rank] = idEx.id;
        // Menus management
        this.winMenus = new MenuManagement();

    },

    setGlobalMenu: function(session, cmnMenus) {
        this.winMenus.initialize(this, session, cmnMenus);
    },
    
    setWinMenu: function(winId, facet, menu, winProto) {
        this.winMenus.addMnuBarToProto(winId, facet, menu, winProto);
    },

    length: function(){
        return this._stack.length - _winK.stackDeb;
    },
    
    isActiveWindow: function(id){
        return !!(this.length() == (this._getWinIdEx(id)).rank);
    },

    getBoundField: function(winId, xid, opts){
        var win = this.getWindow(winId);
        return win ? win.getBoundField(xid, opts) : null;
    },
    
    getEntityType: function(winId, xid, opts){
        var win = this.getWindow(winId), proto = win ? win.getProto() : null;
        return proto ? syraUtil.getEntityType(xid, proto, opts && opts.keepRef ? true : false) : null;
    },

    setActionsState: function(actions){
        var self = this;
        return this._actionsList.setState(actions, null, function (winId, syraPage, actId, enable) {
            // Show/hide registered menus, according action status
            self.winMenus.updateMnuItem(syraPage, actId, !enable);
        }, this.winMenus.hideAccordingActivation);
    },
    
    isActionEnabled: function(winId, action, categorie){
        var win = this._getWinIdEx(winId);
        return win ? this._actionsList.getState(action, win.id, categorie) : false;
    },

    shouldDiscardCloseOpen: function(closeId, openWins){
        // "close" and "open" clauses on the same Window ID...
        var ret = false, idExClose, closeWin, discardAllWinType = true;
        if (openWins && (idExClose = this._getWinIdEx(closeId))) {
            if(openWins[idExClose.id]) {
                if(!this._windows[idExClose.id]) {
                    // Win ID is not already in the Window Stack, wich means open, then close on the same window ==> discard open/close
                    ret = true;
                }
                else if ((closeWin = this.getWindow(idExClose.id)) && closeWin.isSameWin(openWins[idExClose.id]) && (discardAllWinType || sapUtil.isSpecialWin(closeWin.getWinName()))) {
                    // Avoid to close then reopen same win/function
                    ret = true;
                }
            }
        }
        return ret;
    },

    razWinData: function(winId){
        var win = this.getWindow(winId);
        if(win) {
            win._releaseDataEx();
            win._initDataEx({"keepDataset": true});
        }
    },

    stack: function(id, winDef, syraPageModel){
        // Register Window
        var idEx = this._getWinIdEx(id), proto;
        (this._windows[idEx.id] = new WinModel()).initialize(idEx, winDef, syraPageModel, this._sapController.fmtWrapper, this.winMenus);
        this._stack.push(idEx.id);
        // Register Window actions
        proto = syraUtil.getProtoFromPage(syraPageModel);
        _.each(_winK.actsType, function(type){
            this.registerWinActions(proto[type], idEx.id, type);
        }, this._actionsList);
        this._sapController.getSiteController().triggerAdx("sap.win.stacked", {
            "target": this._windows[idEx.id],
            "type": "opened",
            "data": {}
        });
    },
    
    unStack: function(id, rank, dispose){
        var idEx = this._getWinIdEx(id), win = this._windows[idEx.id], syraPage = null;
        if (win) {
            this.winMenus.releaseWinMenu(id);
            this._actionsList.unregisterAllWinActions(idEx.id);
            this._sapController.getSiteController().triggerAdx("sap.win.unstack", {
                "target": this._windows[idEx.id],
                "type": "close",
                "data": {}
            }, dispose);
            syraPage = win.getSyraPage();
            win.dispose();
            delete this._windows[idEx.id];
            this._stack.splice(idEx.rank, 1);
            this._sapController.getSiteController().triggerAdx("sap.win.unstacked", {
                "target": null,
                "type": "closed",
                "data": {
                    "sheet": syraPage
                }
            }, dispose);
            // TODO : check error?
        }
        else {
            //TODO : error?
        }
    },
    
    getWindow: function(winId){
        var idEx = this._getWinIdEx(winId);
        return this._windows[idEx.id] || null;
    },
    
    getWindowProto: function(winId){
        var win = this.getWindow(winId);
        return (win ? win.getProto() : null);
    },
    
    getSyraModel: function(winId){
        var win = this.getWindow(winId);
        return (win ? win.syraModel : null);
    },
    
    applyChange: function(winId, change, options, fromSrv, srvReply){
        var ret = null, retEx = {}, idEx = this._getWinIdEx(winId);
        if(!options) {
            options = {};
        }
        options.currSrvTarget = fromSrv && srvReply && this._sapController.getTargetIstFromReply(srvReply);
        if (this._windows[idEx.id]) {
            _.each(change, function(data, type){
                if (_winK.stubWins[type] && this._windows[idEx.id][_winK.stubWins[type]]) {
                    retEx[type] = this._windows[idEx.id][_winK.stubWins[type]](data, options, fromSrv);
                }
            }, this);
        }
        else {
            // TODO : exception, return code, etc...
        }
        _.each(retEx, function(diagnoses, task){
            if (diagnoses) {
                // TODO : check return code ==> ret = ...
            }
        }, this);
        if(options.currSrvTarget) {
            delete options.currSrvTarget;
        }
        return ret;
    },
    
    postBuildInit: function(winId){
        var win = this.getWindow(winId), pageFacet, syraModel, sortTabs, barLists, i, len, metaBar, metaObj = {}, listId;
        if (win && (syraModel = win.getSyraPage())) {
            pageFacet = win.getSyraPageFacet();
            // Get Ptr to Tab Folder
            if (pageFacet === syraUtil.pageFacet.edit) {
                win.$folderTabs = _.filter(syraModel.idMap, function(article){
                    var $articleMeta;
                    return ($articleMeta = syraUtil.getMetaFromObject(article)) && sapUtil.isTabScreen($articleMeta[sapUtil.metaNameMap.xid]);
                });
                if (win.$folderTabs) {
                    sortTabs = _.sortBy(win.$folderTabs, function(tab){
                        return (syraUtil.getMetaFromObject(tab))[sapUtil.metaNameMap.xid];
                    });
                    win.$folderTabs = sortTabs;
                }
            }
            // Extra process for window preview
            if (win.isPreviewWin() && syraModel.fusionBar && (barLists = syraModel.fusionBar.blocks)) {
                metaBar = sapUtil.setState({"$isDisabled": true, "$isHidden": true}, 0);
                for (i = 0, len = barLists.length; i < len; i++) {
                    listId = syraUtil.getMetaFromObject(barLists[i]);
                    if((listId = listId.$bind)) {
                        metaObj[listId] = {"$meta": {"stt": [[listId, 0, metaBar]]}};
                    }
                }
                win.setEntitiesValue(metaObj);
            }
        }
    },
    
    showWinTab: function(winId, tabNum){
        var win = this.getWindow(winId), $tab = win && win.$folderTabs ? win.$folderTabs[tabNum - 1] : null;
        syraUtil.showTab($tab, {"internal": true});
        return $tab ? true : false;
    },
    
    setFocus: function(winId, highlight, style, entity, extra){
        var ret = null, idEx = this._getWinIdEx(winId), $tab;
        if (this._windows[idEx.id]) {
            if (sapUtil.isSpecialScrnId(entity)) {
                if (sapUtil.isButtonScreen(entity)) {
                    ret = _getNextFieldDescObj(sapUtil.getButtonValue(), "SRV_CHAMP_SUIVANT");
                }
                else 
                    if (sapUtil.isTabScreen(entity)) {
                        $tab = _.find(this._windows[idEx.id].$folderTabs, function(tab){
                            var $tabMeta = syraUtil.getMetaFromObject(tab);
                            return $tabMeta && $tabMeta.$opened;
                        });
                        if ($tab) {
                            syraUtil.setTabFocus($tab);
                        }
                    }
                    else 
                        if (sapUtil.isListScreen(entity)) {
                            // Nothing!
                        }
            }
            else {
                ret = WinModel.prototype.setFocus.apply(this._windows[idEx.id], Array.prototype.slice.call(arguments, 1));
            }
        }
        else {
            // TODO : error!
        }
        return ret;
    },
    
    setDataStoreValue: function(winId){
        var ret = false, winModel = this.getWindow(winId);
        if (winModel) {
            WinModel.prototype.setDataStoreValue.apply(winModel, Array.prototype.slice.call(arguments, 1));
            ret = true;
        }
        return ret;
    },
    
    getDataFmt: function(winId, xid, line, opts){
        var winModel = this.getWindow(winId);
        return winModel ? WinModel.prototype.getDataFmt.call(winModel, xid, line, opts) : null;
    },

    getDataStoreValue: function(winId){
        var winModel = this.getWindow(winId);
        return winModel ? WinModel.prototype.getDataStoreValue.apply(winModel, Array.prototype.slice.call(arguments, 1)) : null;
    },

    getDataInputValue: function(winId, entity){
        var ret = null, idEx = this._getWinIdEx(winId);
        if (this._windows[idEx.id]) {
            if (sapUtil.isSpecialScrnId(entity)) {
                if (sapUtil.isButtonScreen(entity) || sapUtil.isListScreen(entity)) {
                    ret = sapUtil.getButtonValue();
                }
                else 
                    if (sapUtil.isTabScreen(entity)) {
                        ret = sapUtil.getObjFieldValue(this._sapController.getCurrTabIdx(), sapUtil.fieldModeType.rough);
                    }
            }
            else 
                if (!entity || entity.length === 0) {
                    // We are on a window (preview screen, formula editor, Standard window, etc...)
                    ret = null;
                }
                else {
                    ret = WinModel.prototype.getDataInputValue.apply(this._windows[idEx.id], Array.prototype.slice.call(arguments, 1));
                }
        }
        return ret;
    },
    
    removeFocus: function(winId){
        var idEx = this._getWinIdEx(winId);
        if (this._windows[idEx.id]) {
            WinModel.prototype.removeFocus.apply(this._windows[idEx.id], Array.prototype.slice.call(arguments, 1));
        }
    },
    
    _getWinIdEx: function(id){
        var idEx = {"id": id, "rank": id};
        (_.isNumber(id) ? idEx.id = sapUtil.getWinId(id) : idEx.rank = sapUtil.getWinRank(id));
        return idEx;
    },
    
    enumStack: function(iterator, context){
        var args = arguments;
        if (this._stack && this._stack.length > 0) {
            for (var i = this._stack.length - 1; i >= _winK.stackDeb; i--) {
                iterator.apply(context, [this._stack[i], i].concat(Array.prototype.slice.call(args, 2)));
            }
        }
    },
    
    findStack: function(iterator, context){
        var win = null, args = arguments;
        if (this._stack && this._stack.length > 0) {
            for (var i = this._stack.length - 1; i >= _winK.stackDeb; i--) {
                if (iterator.apply(context, [this._stack[i], i].concat(Array.prototype.slice.call(args, 2)))) {
                    win = this._stack[i];
                    break;
                }
            }
        }
        return win;
    },
    
    dispose: function(force){
        // Hard dispose for Portal Window
        var portalId = this._getWinIdEx(_winK.portalWin), winPortal = this._windows[portalId.id];
        winPortal.dispose();
        delete this._windows[portalId.id];
        // Dispose other windows ...
        this.enumStack(this.unStack, this, true);
        // Menus
        if(this.winMenus) {
            this.winMenus.dispose();
            delete this.winMenus;
        }
        delete this._stack;
        if (this._actionsList) {
            this._actionsList.dispose();
            delete this._actionsList;
        }
        delete this._windows;
        if (this._sapController) {
            delete this._sapController;
        }
    }
});


/* Window model class */
function WinModel(){
}

WinModel = helpers.defineClass(WinModel, null, {
    initialize: function(idEx, winDef, syraModel, fmtWrapper, menuManager){
        var $fusionPageMeta = syraModel ? syraUtil.getFusionPageMeta(syraModel) : null, extd, specialWin;
        this._idEx = idEx;
        this._mdata = winDef ? util.duplicateObj(winDef) : null;
        this.syraModel = syraModel;
        this._fmtWrapper = fmtWrapper;
        this._menuManager = menuManager;
        this._initDataEx();
		this.initializeFieldsColl(syraModel);
        
        this._title = "";
        if ($fusionPageMeta) {
            $fusionPageMeta.winModel = this;
        }
        if (this.syraModel) {
            this._$$syraPageItem = this.syraModel.$$item;
            this._$$syraPageItem.addClass(_winK.fusionPageK);
            this._bindEvents();
        }
        if (this._mdata && this._mdata.name && (specialWin = sapUtil.isSpecialWin(this._mdata.name))) {
            if(specialWin.id == sapUtil.specialWindow.formula.id) {
                this._formula = new _formulaWin(this._mdata.extend || "");
            }
            else {
                extd = this._getExtendProps();
                if (extd && extd.title) {
                    this._setTitle(extd.title);
                }
            }
        }
        this._isNodeWS = this._getSession() ? (this._getSession()).isNodeWS() : null;
    },

	initializeFieldsColl : function(syraModel){
		this._fieldsColl = {
            "proto": syraUtil.get$FromPage(syraModel),
            "bound": syraUtil.getBoundFldsFromPage(syraModel)
        };
	},

    _initDataEx: function(opts){
        var i, datasetArray = this._dataset ? Object.keys(this._dataset) : null, len = datasetArray ? datasetArray.length : 0;
        if (opts && opts.keepDataset && len > 0) {
            for (i = 0; i < len; i++) {
                this._dataset[datasetArray[i]].initStore(this._fmtWrapper.locales);
            }
        }
        else {
            this._dataset = {};
            this._entityRefTitleMap = {};
        }
        this._statusBar = {"ico": {}, "txt": {}};
        this._pendingMeta = {};
        _.each(sapUtil.screensArray, function(item){
            this._pendingMeta[item] = {"fields": {}, "conts": {}};
        }, this);
    },

    _releaseDataEx: function(opts){
        this._statusBar = null;     // TODO : notify hoster to remove status elements... improve...
        _.each(sapUtil.screensArray, function(item){
           delete this._pendingMeta[item].fields;
           delete this._pendingMeta[item].conts;
        }, this);
        _.each(this._dataset, function(entityStore){
            entityStore[opts && opts.disposeStore ? "dispose" : "releaseStore"]();
        });
    },

    _bindEvents: function(){
        var self = this, fusionController = syraUtil.getFusionController(self.syraModel);
        // Add global internal listener for this window
        fusionController.addGlobalListeners(function(event){
            self.closeCurrCtxPopup(event.target);
        }, this);
    },
    
    onWinEvent: function(event, controller){
        // Is it a fusion grid or one of these children?
        var $$target, $$cont, id, $cont, $contMeta, doEvt = true, isGrid = false, isField = false, caught = false;
        $$cont = ($$target = $(event.target)) ? $$target.closest("." + syraUtil.gridFusionK.cont) : null;
        isGrid = $$cont && $$cont.length > 0 ? true : false;
        // So, we are on a grid article and at now we let the caller processed the event...
        if (isGrid && event.type == "click") {
            caught = true;
            doEvt = true;
        }
        // Is it a fusion field?
        if (!isGrid) {
            $cont = ($$target && (id = $$target.attr("data-s-field"))) ? this.syraModel.idMap[id] : null;
            isField = ($cont && ($contMeta = syraUtil.getMetaFromObject($cont))) ? (this.getProto())[$contMeta.$bind] : null;
        }
        // Field fusion events are caught by dedicated handler...
        if (!caught && !isField) {
            // General case
            doEvt = controller.triggerAdx("wdgt.win." + event.type, {
                "target": this,
                "type": event.type,
                "data": {
                    "nativeEvt": event
                }
            });
        }
        return doEvt;
    },
    
    _unBindEvents: function(){
        this._$$syraPageItem.off();
    },
    
    isSameWin: function(winMeta2Cmp){
        var ret = false;
        if(this._mdata && this._mdata.name && this._mdata.name === winMeta2Cmp.name){
            ret = (!winMeta2Cmp.func && !this._mdata.func) || (winMeta2Cmp.func === this._mdata.func);
        }
        return ret;
    },

    isPreviewWin: function(){
        var extendInfo;
        return this._mdata && (extendInfo = this._mdata.extend) && extendInfo.localeCompare("&WIN_PREVIEW") == 0;
    },

    getWinName: function(){
        return this._mdata && this._mdata.name ? this._mdata.name : null;
    },
    
    _getSession: function(){
        var fusionController = this.syraModel ? syraUtil.getFusionController(this.syraModel) : null;
        return fusionController ? fusionController.getSession() : null;
    },
    
    getEntityEx: function(entity){
        var $entityEx, entityEx = null, $entities = this.getProto(), $type = null;
        if($entities) {
            $type = (($entityEx = $entities[(entityEx = sapUtil.getBlockInst(entity))]) && $entityEx && $entityEx.$type == syraUtil.dataTypes.collectionType) ? $entityEx.$type : ($entities[entity] ? $entities[entity].$type : null);
            $entityEx = $entityEx || $entities[(entityEx = entity)];
            return {"type": $type, "entity": $entityEx ? entityEx : null};
        }
        else {
            return null;
        }
     },
    
    _getExtendProps: function(){
        return this._mdata ? sapUtil.getWinExtProps(this._mdata.extend) : null;
    },
    
    getBoundField: function(entityName, opts){
        var boundFld = null, len, $entityEx = this.getEntityEx(entityName), $bounds = this._fieldsColl.bound;
        if ($bounds && $entityEx && $entityEx.entity && $bounds[$entityEx.entity] && ((len = $bounds[$entityEx.entity].length) > 0)) {
            if(len == 1) {
                boundFld = $bounds[$entityEx.entity][0];
            }
            else {
                // TODO    
            }
        }
        return boundFld;
    },

    getWinId: function(){
        return this._idEx.id;
    },
    
    getSyraPage: function(){
        return this.syraModel;
    },
    
    getSyraPageFacet: function(){
        return this.syraModel.$facet;
    },
    
    getTitle: function(){
        return this._title.length > 0 ? this._title : (this.syraModel && this.syraModel.$prototype && this.syraModel.$prototype.$title ? this.syraModel.$prototype.$title : "No title...");
    },
    
    getProto: function(){
        return this._fieldsColl.proto;
    },

    getEntityMetaByCriteria: function(entity, type, target, level){
        return this._dataset[entity] ? this._dataset[entity].getMetaByCriteria(type, target, level) : null;
    },
  
    setCurrCtxPopup: function(field){
        if (this._currCtxPopupField) {
            delete this._currCtxPopupField;
        }
        this._currCtxPopupField = field;
    },
    
    closeCurrCtxPopup: function(obj){
        var popup, field;
        if (this._currCtxPopupField) {
            if ((popup = syraUtil.getPopupDateFromField(this._currCtxPopupField))) {
                // DateTime popup
                field = this._currCtxPopupField;
                delete this._currCtxPopupField;
                field.$$item.find(".s-" + (obj.arrayLevel ? "inplace" : "field") + "-date-picker").trigger("click");
            }
            else 
                if ((popup = syraUtil.getPopupCtxFromField(this._currCtxPopupField))) {
                    // Contextual popup
                    delete this._currCtxPopupField;
                    $(document).trigger("click." + popup._autoCloseNamespace);
                }
        }
    },
    
    setContainerPending: function(screenId){
        _.each(this._pendingMeta[screenId].conts, function(data, containerName){
            this._setDataContainer(containerName, data);
        }, this);
        delete this._pendingMeta[screenId].conts;
        this._pendingMeta[screenId].conts = {};
    },
    
    setDataStoreValue: function(entityName, line, value, options){
        var data = {}, collId;
        if (line !== null && line !== undefined && line > 0) {
            // Warning : record must exist! 
            collId = sapUtil.getBlockInst(entityName);
            data[collId] = {
                "$rcd": [{
                    "$uuid": line - 1
                }]
            };
            data[collId].$rcd[0][entityName] = value;
        }
        else {
            data[entityName] = {
                "v": value
            };
        }
        this.setEntitiesValue(data, options);
    },
    
    getDataFmt: function(entityName, line, opts){
        var $type, $entityEx = this.getEntityEx(entityName);
        if ($entityEx) {
            $type = $entityEx.type || "default";
            return this[_instVtbl[$type] && _instVtbl[$type]._getDataFmt ? _instVtbl[$type]._getDataFmt : _instVtbl["default"]._getDataFmt].call(this, entityName, $entityEx.entity, line, opts);
        }
        else {
            return null;
        }
    },

    getDataStoreValue: function(entityName){
        var $type, $entityEx = this.getEntityEx(entityName);
        if ($entityEx) {
            $type = $entityEx.type || "default";
            return this[_instVtbl[$type] && _instVtbl[$type]._getDataStore ? _instVtbl[$type]._getDataStore : _instVtbl["default"]._getDataStore].apply(this, arguments);
        }
        else {
            return null;
        }
    },
    
    getDataInputValue: function(entity, nl){
        var $entityEx, $bounds = this._fieldsColl.bound, ret = null, value = null, modeType = sapUtil.fieldModeType.show, entityType = null, isDirtyProxy, ctxProxy, ctxProps = null, notModified = undefined, isNotModified = false;
        var $boundField = null, len, index, getValueProxy;
        // Get current field value & properties
        $entityEx = this.getEntityEx(entity);
        if ($entityEx.entity) {
            if ($bounds[$entityEx.entity] && ((len = $bounds[$entityEx.entity].length) > 0)) {
                $boundField = len == 1 ? $bounds[$entityEx.entity][0] : _getValueFldForBounds($bounds[$entityEx.entity], $entityEx.type, len);
                index = sapUtil.getIdxFromNL(nl);
                isNotModified = (isDirtyProxy = _instVtbl[$entityEx.type] ? (_instVtbl[$entityEx.type].isDirty || _instVtbl["default"].isDirty) : _instVtbl["default"].isDirty) && $boundField[isDirtyProxy] && !$boundField[isDirtyProxy]()
                if(isNotModified || !$boundField.$isEditMode) {
                    notModified = true;
                    value = undefined;
                }
                else {
                	getValueProxy=_instVtbl[$entityEx.type] && _instVtbl[$entityEx.type]._getDataInput ? _instVtbl[$entityEx.type]._getDataInput : _instVtbl["default"]._getDataInput;
                    if($boundField[getValueProxy] ){
                    	value = $boundField[getValueProxy].call($boundField, entity, index);
                    }
                    else{
                    	value = this[getValueProxy].apply(this, [$boundField, entity, index])
                    }
                    // Check "null" value : we have to translate "null" value returned par Syracuse framework, according to our protocol.
                    if(value === null) {
                        value = syraUtil.translateNullValue($entityEx.type);
                    }
                }
                entityType = syraUtil.getEntityType(entity, this.getProto());
                //modeType = entityType && (entityType == syraUtil.dataTypes.stringType || entityType == syraUtil.dataTypes.dateType) ? sapUtil.fieldModeType.edit : sapUtil.fieldModeType.show;
                modeType = entityType ? sapUtil.fieldModeType.edit : sapUtil.fieldModeType.show;
                // Get current field context properties
                if ((ctxProxy = _instVtbl[entityType] && _instVtbl[entityType].getCtxProps || _instVtbl["default"].getCtxProps)) {
                    ctxProps = this[ctxProxy]($boundField, index);
                }
            }
        }
        // Embed current value mode type (show, edit, rough), contextual properties, etc...
        if ((value !== null && value !== undefined) || notModified) {
            ret = sapUtil.getObjFieldValue(value, modeType, ctxProps, notModified);
        }
        return ret;
    },

    _getValueCel:function($boundField, entity, index){
    	var value=$boundField[_instVtbl["default"]._getDataInput].call($boundField, entity, index), fusionController = syraUtil.getFusionController(this.syraModel), nbDataSet;
    	if(value==null && fusionController._sapController.getCurrInst().edit){
    		nbDataSet=$boundField.dataset.length
    		for (var i=0; i<$boundField.dataset.length;i++){
    			if($boundField.dataset[i].$index===index){
    				return $boundField.dataset[i][entity]
    			}
    		}
    	}
    	return value;
    },

   _getValueChoiceField:function($boundField, entity, index){
        var value, $entity = $boundField.$field;
        if($boundField.$field && $boundField.$field.$format != "$combo") {
            value = $boundField[_instVtbl["default"]._getDataInput].call($boundField, entity, index);
        }
        else {
            value = $boundField.saveClientValue();
            if(value === null) {
                // "Empty" combo field after applying meta "remove item combo"
                value = 0;
            }
        }
        return value;
    },

    _getValueFieldRef:function($boundField, entity){
        // We never have reference field in collection (x-array)
        var value, $entity = $boundField.$field || (this.getProto())[entity], refProps = syraUtil.getRefPropertyEntity($entity), property = null;
        value = $boundField.getDataValue();
        return value !== null && refProps ? value[refProps.property] : value;
    },

    setFocus: function(highlight, style, entity, nl){
        var self = this, $entityEx, $bounds = this._fieldsColl.bound, args, setFocusProxy, setFocusStyleProxy, $screenTab = null, screenTab, evtData, $boundField, len, index;
        var retOk = null, proxyFocusable = true, ret = _getNextFieldDescObj(sapUtil.getObjFieldValue(null, sapUtil.fieldModeType.show, null, true), "SRV_CHAMP_INACTIF"); 
        if (!entity || sapUtil.getScreenRank(entity) == 0) {
            if(sapUtil.specialWindow.formula.id == this.getWinName() && this._formula) {
                ret = this._formula.setFocus() || retOk;
            }
            else {
                // TODO : Others ==> preview screen? standard window?
                ret = retOk;
            }
        }
        else {
            if (($entityEx = this.getEntityEx(entity)) && $entityEx.entity) {
                // First, check if target is in a screen whose folder has not yet been opened...
                if (this.$folderTabs && this.$folderTabs.length > 1 && (screenTab = sapUtil.getScreenId($entityEx.entity))) {
                    $screenTab = _.find(this.$folderTabs, function(tab){
                        var $tabMeta = syraUtil.getMetaFromObject(tab);
                        return $tabMeta && screenTab == sapUtil.isFolderTab($tabMeta[sapUtil.metaNameMap.xid]) && !$tabMeta.$opened;
                    });
                }
                if ($screenTab && $screenTab.tabTitle) {
                    // So target is on a none displayed folder screen, we fire a "click" on the corresponding tab folder
                    args = arguments;
                    evtData = {"internal": true, "callback": function(){self.setFocus.apply(self, args);}};
                    syraUtil.showTab( $screenTab, evtData);
                    if (!evtData.ok) {
                        // TODO : change folder failed... what we should do?
                        return retOk;
                    }
                    return retOk;
                }
                // So, screen is online
                if ($bounds[$entityEx.entity] && ((len = $bounds[$entityEx.entity].length) > 0)) {
                    $boundField = len == 1 ? $bounds[$entityEx.entity][0] : _getFocusFldForBounds($bounds[$entityEx.entity], $entityEx.type, len);
                    index = sapUtil.getIdxFromNL(nl);
                    args = arguments.length > 4 ? [highlight, entity, index].concat(Array.prototype.slice.call(arguments, 4)) : [highlight, entity, index];
                    setFocusProxy = _instVtbl[$entityEx.type] && _instVtbl[$entityEx.type].setFocus ? _instVtbl[$entityEx.type].setFocus : _instVtbl["default"].setFocus;
                    if (setFocusProxy && $boundField[setFocusProxy]) {
                        proxyFocusable = $boundField[setFocusProxy].apply($boundField, args);
                    }
                    if(proxyFocusable || proxyFocusable === undefined) {
                        setFocusStyleProxy = _instVtbl[$entityEx.type] && _instVtbl[$entityEx.type].setFocusStyle ? _instVtbl[$entityEx.type].setFocusStyle : _instVtbl["default"].setFocusStyle;
                        if (setFocusStyleProxy && $boundField[setFocusStyleProxy]) {
                            $boundField[setFocusStyleProxy].apply($boundField, [style].concat(args));
                        }
                        else {
                            // ... call Fusion default stub...
                            this._setFocusStyleDef.apply(this, [$boundField, $entityEx.entity, $entityEx.type, style].concat(args));
                        }
                        ret = retOk;
                    }
                }
            }
        }
        return ret;
    },
    
    _setFocusStyleDef: function($field, entityEx, entityExType, style, highlight, entity, idx, isEdit, params){
        var sess, boundCell;
        if (entityExType == syraUtil.dataTypes.collectionType) {
            boundCell = _getArrayBoundCell($field, entity, idx);
            $field = boundCell !== undefined ? boundCell : $field;
        }
        if (style && $field) {
            // Raz
            this.showFieldError($field, null, true);
            // Set
            if (style == sapUtil.focusStyle.fmtErr.code && (sess = this._getSession())) {
                this.showFieldError($field, [sess.getlabel("error", "12", "Value does not respect format or type")]);
            }
        }
    },
    
    removeFocus: function(entity, nl){
        var $entityEx, $bounds, proxy, $boundField, len, index;
        if (entity && entity.length > 0) {
            $entityEx = this.getEntityEx(entity);
            $bounds = this._fieldsColl.bound;
            if ($entityEx.entity && $bounds[$entityEx.entity] && ((len = $bounds[$entityEx.entity].length) > 0)) {
                index = sapUtil.getIdxFromNL(nl);
                $boundField = len == 1 ? $bounds[$entityEx.entity][0] : _getFocusFldForBounds($bounds[$entityEx.entity], $entityEx.type, len);
                if ((proxy = _instVtbl[$entityEx.type] ? _instVtbl[$entityEx.type].removeFocus : _instVtbl["default"].removeFocus) && $boundField[proxy]) {
                    $boundField[proxy].call($boundField, entity, index);
                }
                else {
                    // ... call Fusion default stub...
                    this._removeFocusDef.call(this, $boundField, $entityEx.entity, $entityEx.type, entity, index);
                }
            }
        }
    },
    
    _removeFocusDef: function($field, entityEx, entityExType, entity, idx){
        var boundCell;
        if (entityExType == syraUtil.dataTypes.collectionType) {
            boundCell = _getArrayBoundCell($field, entity, idx);
            $field = boundCell !== undefined ? boundCell : $field;
        }
        if($field) {
            this.showFieldError($field, null, true);
        }
    },
    
    setEntitiesValue: function(entities, options, fromSrv){
        /*var test = document.syraXTestX.cmi.reply.OACV_4.entities;
         _.each(test, function (entitie, instance) {
         if (!entities[instance]) {
         entities[instance] = {};
         }
         _.extend(entities[instance], entitie);
         });*/
        var $entities = this.getProto(), $bounds = this._fieldsColl.bound, screen, page;
        _.each(entities, function(data, entityName){
            var entityBounds, $type = ($entities[entityName] ? ($entities[entityName].$type || "default") : null), features, store;
            if ($entities[entityName]) {
                // Add entity to dataset if necessary
                if (!this._dataset[entityName]) {
                    store = this._dataset[entityName] = new EntityStore()
                    features = store.initialize($type, _instVtbl[$type] ? _instVtbl[$type].isDatasetColl : _instVtbl["default"].isDatasetColl, entityName, $entities[entityName], this._fmtWrapper, {"isNodeWS": this._isNodeWS, "locales": this._fmtWrapper.locales});
                    if(features && features.refTitle) {
                        this._entityRefTitleMap[features.refTitle.name] = features.refTitle.refField;                        
                    }
                }
                // Set data
                entityBounds = $bounds[entityName];
                this[_instVtbl[$type] && _instVtbl[$type]._setDataStore ? _instVtbl[$type]._setDataStore : _instVtbl["default"]._setDataStore](entityName, entityBounds, $entities, entities, data, options);
                if (!entityBounds) {
                    this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName] = true;
                }
            }
            else {
                // Perhaps is it a container entity?
                if (!this._setDataContainer(entityName, data) && (screen = sapUtil.getScreenId(entityName))) {
                    (!this._pendingMeta[screen].conts[entityName] ? this._pendingMeta[screen].conts[entityName] = {} : void (0));
                    _.extend(this._pendingMeta[screen].conts[entityName], data);
                }
                
            }
        }, this);
        if(fromSrv) {
            // UI framework have to be notified when update data is done
            if((page = syraUtil.getPage(this.syraModel)) && page.applyChange){
                page.applyChange();
            }
        }
        return null;
    },
    
    _setStatusBar: function(status, options, fromSrv){
        var len, i, winMns, ret, item, zone, page = syraUtil.getPage(this.syraModel);
        if(status.ico && (winMns = this._menuManager)) {
            for (i = 0, len = status.ico.length; i < len; i++) {
                item =  status.ico[i];
                if(item[0] > 0) {
                    ret = winMns.addStatusIco(this.getWinId(), page, item[1], item[0], this._statusBar.ico[item[1]] ? true : false);
                    this._statusBar.ico[item[1]] = item[0];
                }
                else {
                    ret = winMns.removeStatusIco(this.getWinId(), page, item[1], this._statusBar.ico[item[1]]);
                }
            }
        }
        if(status.t) {
            // TODO : Notify Hoster?
            for (i = 0, len = status.t.length; i < len; i++) {
                item =  status.t[i];
                zone = i > 0 ?  "zn1" : "zn2";
                //ret = item.length > 0 ? updateStatus(zone, item) : razStatus(zone);
            }
        }
        if(status.notify) {
            syraUtil.showDiagnoses(status.notify);
        }
        return null;
    },
    
    _setTitle: function(title, options, fromSrv){
        this.syraModel.setTitle(this._title = title);
        return null;
    },
    
    _setDataField: function(entityName, entityBound, winProto, recordSet, data, options, refProps){
        // Adjust "style" meta
        var newRawValue = false, newFmt = false, dataPtr = this._dataset[entityName].data, fmt, refTitle, refValue = {}, entities = {};
        var commit = _storeCommit(options), rawValueEx, rawValue, yetFormatted;
        sapUtil.cureStyle(data, entityName, this._getSession());
        // Check Format
        if(dataPtr.fmt !== undefined) {
            yetFormatted = options && options.formatted;
            // If entity accept format "dataPtr.fmt" is not undefined... then check if there is a new format in meta
            fmt = dataPtr.fmt;
            if(data.fmt) {
                fmt = data.fmt;
                newFmt = true;
            }
            // Set new raw value... if necessary
            if(data.v !== undefined && data.v !== null && fmt) {
                if(!yetFormatted) {
                    rawValue = data.v;
                }
                else if (commit){
                    rawValueEx = this._fmtWrapper.unformat(data.v, this._dataset[entityName].realType, fmt, true);
                    rawValue = rawValueEx.succeeded ? rawValueEx.raw : data.v;
                }
                newRawValue = true;
            }
            else {
                rawValue = dataPtr.$rawV;
            }
            // Formatting data if necessary...
            if(!yetFormatted && fmt && (newFmt || newRawValue)) {
                try {
                    data.v = (!rawValue && !dataPtr._fmtEmpty) ? rawValue : this._fmtWrapper.formatter.formatField({"format": fmt}, rawValue, true, true);
                }
                catch (e){
                    data.v = rawValue;
                }
            }
        }
        // Bind data & md
        if (entityBound && (!options || !options.noUI)) {
            _.each(entityBound, function(item){
                if(!refProps) {
                    item.setDataBind(data.v, null, data);
                }
                else {
                    // So we are on a "reference field"!
                    if(data.v !== null && data.v !== undefined && !data.v) {
                        // RAZ
                        refValue = null;
                    }
                    else {
                        refValue[refProps.property] = data.v;
                        if(refProps.propTitle) {
                            // Retrieve reference title... it's a bit clumsy, but we have to be sure to initialize/set properly title data in store 
                            if (recordSet && recordSet[refProps.propTitle] !== undefined && recordSet[refProps.propTitle].v != undefined) {
                                entities[refProps.propTitle] = recordSet[refProps.propTitle];
                                this.setEntitiesValue(entities, {"noUI": true});
                                delete recordSet[refProps.propTitle];
                            }
                            refValue[refProps.propTitle] = this.getDataStoreValue(refProps.propTitle, 0, false, true);
                        }
                    }
                    item.setDataBind(refValue, null, data);
                }
            }, this);
        }
        else if (!entityBound && (!options || !options.noUI) && (refTitle = this._entityRefTitleMap[entityName]) && !recordSet[refTitle.entityName]) {
            // Reference title update without is code
            refProps = syraUtil.getRefPropertyEntity(refTitle._proto);
            if(refProps && (entityBound = this._fieldsColl.bound[refTitle.entityName])) {
                refValue[refProps.propTitle] = data.v;
                refValue[refProps.property] = this.getDataStoreValue(refTitle.entityName, 0, false, true);
                _.each(entityBound, function(item){
                    item.setDataBind(refValue, null, data);
                });
            }
        }
        // Update dataset (data & md)
        if (commit) {
            for (var prop in data) {
                dataPtr[prop] = data[prop];
            }
            if(newRawValue) {
                dataPtr.$rawV = rawValue;
            }
        }
        return null;
    },

    _setDataFieldRef: function(entityName, entityBounds, winProto, recordSet, data, options){
        // We never have reference field in collection (x-array)
        var $entity = winProto[entityName], refProps = syraUtil.getRefPropertyEntity($entity), type = refProps ? refProps.proto.$type : "";
        this[_instVtbl[type] && _instVtbl[type]._setDataStore ? _instVtbl[type]._setDataStore : _instVtbl["default"]._setDataStore](entityName, entityBounds, winProto, recordSet, data, options, refProps);
    },
    
    _setDataIconField: function(entityName, entityBound, winProto, recordSet, data, options, refProps){
        data = sapUtil.adjustIcoFieldData(data);
        return this._setDataField(entityName, entityBound, winProto, recordSet, data, options, refProps);
     },

    _setDataImageField: function(entityName, entityBound, winProto, recordSet, data, options, refProps){
    	var fusionController = syraUtil.getFusionController(this.syraModel),state;
    	if(data.stt){
    		state=sapUtil.getState(data.stt)
    		for(var key in state){data[key]=state[key]}
    	}
    	if(data.v && data.v!=""){
    		data.v={'$url': fusionController.getImageUrl(data.v)}
    	}
        return this._setDataField(entityName, entityBound, winProto, recordSet, data, options, refProps);
    },

    _setDataColl: function(entityName, entityBound, winProto, recordSet, data, options){
        var mvtCode, delta, rcd = {}, commit = _storeCommit(options), self = this, elapseUnsort = 0, elapse = (new Date()).getTime(), syraElapseEx = {"data": 0, "mvt": 0, "meta": 0}, syraElapse = 0, styObj, styEx, setUI = (!options || !options.noUI);
        var logger, fusionController = syraUtil.getFusionController(this.syraModel), leftListColl = sapUtil.isListScreen(entityName), change = {};
        //For authoring mode, it's necessary to store left list data... so now left list collection are processed like others collection.
        var forceLFdataStore = true;
        if (leftListColl && !forceLFdataStore) {
            // Optimization : no data store update for left list collection!
            commit = entityBound ? false : commit;
            options = options || {};
            options.lf = true;
        }
        // Apply delete/insert/update on data
        logger = fusionController ? fusionController.getLogger() : null;
        syraElapseEx = this._dataset[entityName].applyDataCollEx(data, commit, options,
            function(update, updateOpts){
                var change = {}, tick;
                change[entityName] = update;
                tick = setUI ? self._bindDataColl(entityName, entityBound, change, updateOpts, options, logger) : 0;
                delete change[entityName];
                return tick;
            },
            function () {
                var elapseUs = (new Date()).getTime();
                if (entityBound) {
                    _.each(entityBound, function(item){
                        if( item.sortCapability && item.sortCapability._$orderBy) {
                            item.helper.fetchClientRecordSet(item, {params:{orderBy:null}});
                        }
                    });
                }
                elapseUnsort += ((new Date()).getTime() - elapseUs);
            });
        // Apply meta-data
        if (data.$meta) {
            if(commit) {
                this._dataset[entityName].storeMetaColl(data.$meta);
            }
            if (setUI && entityBound) {
                this._dataset[entityName].getMetaColl(change, data.$meta, this._getSession(), options);
                syraElapseEx.meta = this._bindDataColl(entityName, entityBound, change, {"$isPartialDelta": true}, options, logger);
            }
        }
        if (logger) {
            syraElapse += (syraElapseEx.data + syraElapseEx.mvt +  elapseUnsort + (syraElapseEx.meta || 0));
            logger.trace({"severety": "info"}, "Binding Duration for '" + entityName + "' ==> Fusion : " + ((new Date()).getTime() - elapse - syraElapse) + " (including Format : " + (this._dataset[entityName]._tgFmt || "unavailable") + ") - Syra : " + syraElapse + " (including apply Mvt : " + syraElapseEx.mvt + ", update data : " + syraElapseEx.data +  ", unsort : " + elapseUnsort + ", and meta : " + (syraElapseEx.meta || 0) + ")");
        }
        return null;
    },
    
    _bindDataColl: function(entityName, entityBound, $resources, bindOpts, setDataOpts, logger){
        var elapse = (new Date()).getTime(), discardUnsort = setDataOpts && setDataOpts.discardUnsort;
        $resources.$isPartialDelta = bindOpts && bindOpts.$isPartialDelta;
        if (logger && entityName) {
            //logger.trace({"severety": "warn", "toJson": true}, "==> update for " + entityName + " (partial delta : " + ($resources.$isPartialDelta ? "true" : "false") + ")", $resources);
        }
        if (entityBound) {
            _.each(entityBound, function(item){
                if(bindOpts.unsortBefore && !discardUnsort && item.sortCapability && item.sortCapability._$orderBy){
                    // Cancel sort
                    item.helper.fetchClientRecordSet(item, {params:{orderBy:null}});
                }
                item.page.applyChange($resources);
                if(bindOpts.unsortAfter && !discardUnsort && item.sortCapability && item.sortCapability._$orderBy){
                    // Cancel sort...
                    item.helper.fetchClientRecordSet(item, {params:{orderBy:null}});
                }
            });
        }
        return (new Date()).getTime() - elapse;
    },
    
    _setDataTree: function(entityName, entityBound, winProto, recordSet, data, options){
        // TODO : improve??
        if (entityBound && (!options || !options.noUI)) {
            _.each(entityBound, function(item){
                item.setDataBind(data.$rcd, data.$mvt, data.$meta);
            });
        }
        // Update dataset (data & md).... but, warning : for now we don't update data store (remove 2 next lines otherwise)
        options = options || {};
        options.noStoreCommmit = true;
        if (_storeCommit(options)) {
            _.extend(this._dataset[entityName].data, data);
        }
        return null;
    },
    
    _setDataContainer: function(containerName, data){
        var obj = this._getContainerObj(containerName);
        sapUtil.cureStyle(data, containerName, this._getSession());
        if (obj) {
            (data.tit ? obj.setTitle(data.tit) : void (0));
            if (data.sty) {
                // TODO : set style to container (block or section) and all children...              
            }
        }
        return obj ? true : false;
    },
    
    _getContainerObj: function(containerName){
        var firstField = sapUtil.getFirstChild(containerName, this._fieldsColl.bound), $screenTab = null, contObj = null;
        if (firstField) {
            contObj = (sapUtil.isBlockInst(containerName) ? firstField[0].boxParent : (firstField[0].boxParent ? firstField[0].boxParent.boxParent : null));
        }
        else 
            if (sapUtil.isScreenInst(containerName) && this.$folderTabs) {
                $screenTab = _.find(this.$folderTabs, function(tab){
                    var $tabMeta = syraUtil.getMetaFromObject(tab);
                    return $tabMeta && containerName == sapUtil.isFolderTab($tabMeta[sapUtil.metaNameMap.xid]);
                });
            }
        return contObj || $screenTab;
    },
    
    _getDataField: function(entityName, line, isExternalWrap, onlyValue, opts){
        var dataSet, data, getRawVal;
        if(!this._dataset[entityName]) {
          return isExternalWrap ? {} : (onlyValue ? null : {});
        }
        dataSet = this._dataset[entityName].data;
        getRawVal = !!(opts && opts.rawVal && dataSet.$rawV !== undefined);
        data = isExternalWrap ? {"val": getRawVal ? dataSet.$rawV : dataSet.v, "rcd": null, "meta": onlyValue ? null : dataSet} : (onlyValue ? (getRawVal ? dataSet.$rawV : dataSet.v) : dataSet);
        if (this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName] && isExternalWrap) {
            data.meta = dataSet;
            delete this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName];
        }
        return data;
    },
    
    _getDataFieldRef: function(entityName, line, isExternalWrap, onlyValue, opts){
        // We never have reference field in collection (x-array)
        var dataValue, data, type = "", proto = this.getProto(), $entity = proto[entityName], refProps = syraUtil.getRefPropertyEntity($entity), property = null;
        if(refProps) {
            type = refProps.proto.$type;
        }
        data = this[_instVtbl[type] && _instVtbl[type]._getDataStore ? _instVtbl[type]._getDataStore : _instVtbl["default"]._getDataStore].apply(this, arguments);
        if(isExternalWrap && data && type) {
            dataValue = data.val;
            data.val = {};
            data.val[refProps.property] = dataValue;
        }
        return data;
    },

    _getDataColl: function(entityName, line, isExternalWrap, onlyValue, opts){
        var data, isLinesColl = sapUtil.isBlockInst(entityName), dataSet, options, getRawVal, rawVal, i, len, parentEntity;
        if(!this._dataset[entityName] && isLinesColl) {
            return {};
        }
        dataSet = isLinesColl ? this._dataset[entityName].data : this._dataset[(parentEntity = sapUtil.getBlockInst(entityName))].data;
        if (line === undefined || line === null) {
            if (isLinesColl) {
                // Full collection
                if(opts && opts.sort) {
                    data = this._dataset[entityName].sortDataColl(opts.sort.$orderBy, opts.rawVal, opts.sort);
                }
                else {
                    if(isExternalWrap) {
                        data = {"val": {"$isPartialDelta": false}};
                        data.val[entityName] = dataSet;
                        if (this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName]) {
                            data["meta"] = {"$isPartialDelta": true};
                            this._dataset[entityName].getMetaColl(data["meta"], this._dataset[entityName].meta, this._getSession(), options);
                            delete this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName];
                        }
                    }
                    else {
                        data = dataSet;
                    }
                }
            }
            else if((len = dataSet.length)) {
                // Full Col...
                data = this._dataset[parentEntity].getColumnsDataColl(entityName, opts && opts.rawVal, opts && opts.sort);
                if(isExternalWrap) {
                    data = {"val": data};
                }
            }
        }
        else {
            if (isLinesColl) {
                data = isExternalWrap ? {"val": dataSet[line - 1]} : dataSet[line - 1];
            }
            else {
                getRawVal = !!(opts && opts.rawVal && (rawVal = dataSet[line - 1].$rawV[entityName]));
                data = isExternalWrap ? {"val": getRawVal ? rawVal.v : dataSet[line - 1][entityName]} : (getRawVal ? rawVal.v : dataSet[line - 1][entityName]);
            }
        }
        if (data && !data.rcd && isExternalWrap) {
            data.rcd = {};
        }
        return data;
    },
        
    _getDataTree: function(entityName, line, isExternalWrap, onlyValue, opts){
        // TODO : improve??
        var dataSet = this._dataset[entityName].data;
        var data = isExternalWrap ? {"val": dataSet.$rcd, "rcd": null, "meta": null} : dataSet;
        if (this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName]) {
            data.meta = dataSet.$meta;
            data.rcd = dataSet.$mvt;
            delete this._pendingMeta[sapUtil.getScreenId(entityName)].fields[entityName];
        }
        return data;
    },

    _getFmtField: function(entityName, parentEntity, line, opts){
        var dataset = this._dataset[entityName];
        return dataset ? dataset.data.fmt : null;
    },

    _getFmtColl: function(entityName, parentEntity, line, opts){
        var dataset = this._dataset[parentEntity];
        return dataset ? dataset.getFmtColl(entityName, line - 1) : null;
    },

    _getFmtTree: function(entityName, parentEntity, line, opts){
        return null;
    },
    
    _getFieldCtxProps: function(boundField, idx){
        var ctx = {};
        if (boundField.getCaretPosition) {
            ctx["crsr"] = boundField.getCaretPosition(idx) + 1;
        }
        // Others properies???
        return ctx;
    },
    
    _getRtfFieldCtxProps: function(boundField, idx){
        return this._getFieldCtxProps(boundField, idx);
    },
    
    showFieldError: function(field, errors, raz){
        var len;
        if (field.showErrors) {
            if ((raz || (len = errors.length) == 0) && field.$displayedDiagnoses) {
                field.showErrors([]);
            }
            else 
                if (len > 0) {
                    field.showErrors(errors, {
                        "noViewer": true
                    });
                }
        }
    },

    getCollRcdUUID: function (collName, nl, zeroBased){
        return this._dataset && this._dataset[collName] ? this._dataset[collName].getCollRcdUUID(nl - (!zeroBased ? 1 : 0)) : null;
    },

    getCollRcdIdx: function (collName, uuid, zeroBased){
        return this._dataset && this._dataset[collName] ? (this._dataset[collName].getCollRcdIdx(uuid) + (zeroBased ? 0 : 1)) : null;
    },
    
    dispose: function(){
        var fusionController, i, len, arr;
        if (this.syraModel) {
            this._unBindEvents();
            if ((fusionController = syraUtil.getFusionController(this.syraModel))) {
                fusionController.rmGlobalListeners(this);
            }
            delete this._$$syraPageItem;
            _.each(this.$folderTabs, function($tabs, idx){
                delete this[idx];
            }, this.$folderTabs);
            delete this.syraModel;
            if (this._fieldsColl.proto) {
                delete this._fieldsColl.proto;
            }
            if (this._fieldsColl.bound) {
                delete this._fieldsColl.bound;
            }
            arr = Object.keys(this._entityRefTitleMap);
            for (i = 0, len = arr.length; i < len; i++) {
                delete this._entityRefTitleMap[arr[i]];
            }
        }
        delete this._currCtxPopupField;
        delete this._fmtWrapper;
        delete this._menuManager;
        if(this._formula) {
            this._formula.dispose();
            delete this._formula;
        }
        this._releaseDataEx({"disposeStore": true});
    }
});

/* Formula window class */
var _formulaWin = helpers.defineClass(
    function(formula) {
        this._initialF = formula;
        this._firstFocus = false;
    }, null, {
    
    setFocus: function() {
        alert("Sorry, formula editor is not yet available. \nComming soon!")
        return _getNextFieldDescObj(sapUtil.getObjFieldValue("", sapUtil.fieldModeType.show, null, false), "SRV_ABANDON");
        /*
        if(!this._firstFocus ) {
            // Need to bind initial value to predefined formula field...
            this._firstFocus = true;
        }
        // Need to force current instance on pseudo predefined formula field... to validate
        return null;
        */
    },

    dispose: function() {
    }
});