"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Edit Protocol controller
 */


var helpers = require('syracuse-core/lib/helpers');
var util = require('syracuse-ui/lib/fusion/tools/util');
var srvAct = require('./srvactions');
var msgBox = require('./msgbox');
var Askui = require('./askui');
var Printer = require('./selimp');
var Rpc = require('./rpc');
var Ackcall = require('./ackcall');
var Window = require('./window');
var sapUtil = require('./util').Fusion;
var syraUtil = require('./util').Syra;
var requestActions = require('./srvactions');


var _sapK = {
	"stubMisc": {"help": "_stubSapMisc_help", "openf": "_stubSapMisc_openf"},
	"stubTarget": {"ist": "_stubSapTarget_ist", "box": "_stubSapTarget_box", "rpc": "_stubSapTarget_rpc", "askui": "_stubSapTarget_askui", "selpr": "_stubSapTarget_selpr", "portal": "_stubSapTarget_portal"},
	"pNodes" : {"sess": "session", "srvOps": "srvop", "sap": "sap"}
};
var _sapAuto = [
	{"root": _sapK.pNodes.sess, "catg": "close", "id": null, "subid": null, "exec": "_stubSessClose", "end": true, "next": false},
	{"root": _sapK.pNodes.sess, "catg": "reboot", "id": null, "subid": null, "exec": "_stubSessReboot", "end": true, "next": false},
	{"root": _sapK.pNodes.sess, "catg": "settings", "id": null, "subid": null, "exec": "_stubSessSets", "end": false, "next": true},
	{"root": _sapK.pNodes.sess, "catg": "open", "id": null, "subid": null, "exec": "_stubSessOpen", "end": false, "next": true},
	{"root": _sapK.pNodes.srvOps, "catg": "request", "id": null, "subid": null, "exec": "_stubSrvopRequest", "end": false, "next": true},
	{"root": _sapK.pNodes.sap, "catg": "func", "id": "close", "subid": null, "exec": "_stubWinClose", "end": false, "next": true},
	{"root": _sapK.pNodes.sap, "catg": "func", "id": "open", "subid": null, "exec": "_stubWinOpen", "end": false, "next": true},
	{"root": _sapK.pNodes.sap, "catg": "acts", "id": null, "subid": null, "exec": "_stubActs", "end": false, "next": true},
	{"root": _sapK.pNodes.sap, "catg": "previous", "id": null, "subid": null, "exec": "_stubSetPrevValue", "end": false, "next": true},
	{"root": _sapK.pNodes.sap, "catg": "wins", "id": null, "subid": null, "exec": "_stubSetWins", "end": false, "next": true},
	{"root": _sapK.pNodes.sap, "catg": "misc", "id": null, "subid": null, "exec": "_stubSapMisc", "end": false, "next": true},
	{"root": _sapK.pNodes.sap, "catg": "rpc", "id": "spgm", "subid": null, "exec": "_stubSapCallReply", "end": false, "next": true},
	{"root": _sapK.pNodes.sap, "catg": "target", "id": null, "subid": null, "exec": "_stubSapTarget", "end": false, "next": false}
];
var _sapAbort = [
	{"root": _sapK.pNodes.sap, "catg": "target", "id": "box", "subid": null, "exec": "_replyAbortBoxEnd", "end": false, "next": true},
	{"root": _sapK.pNodes.sap, "catg": "target", "id": "box", "subid": null, "exec": "_replyAbortBoxInf", "end": false, "next": true},
	{"root": _sapK.pNodes.sess, "catg": "close", "id": null, "subid": null, "exec": "_replyAbortClose", "end": true, "next": true},
	{"root": _sapK.pNodes.sess, "catg": "reboot", "id": null, "subid": null, "exec": "_replyAbortClose", "end": true, "next": true}
];

exports.getSessSetsFromReply = function(reply){
	return (reply[_sapK.pNodes.sess] ? reply[_sapK.pNodes.sess].settings : null);
};
exports.getsrvOptsFromReply = function(reply){
	return reply[_sapK.pNodes.srvOps];
};
exports.cleanInitialReply = function(reply){
	if(reply[_sapK.pNodes.sess] && reply[_sapK.pNodes.sess].settings) {
		delete reply[_sapK.pNodes.sess].settings;
	}
	if(reply[_sapK.pNodes.srvOps]) {
		delete reply[_sapK.pNodes.srvOps];
	}
};

function SapController(){
}

exports.Controller = helpers.defineClass(SapController, null, {
    initialize: function(siteController, srvOpts){
    	this._srvOpts = srvOpts;		// TODO : define and set Web server options (trace, etc...)
    	this._siteController = siteController;
    	this._session = null;
   
 		(this._wndwsStack = new Window.WinStack()).initialize(this);
		this._ackcallStack = [];
	   	this._currCtx = {"ist": sapUtil.makeIst("A", "", 0), "localIst": null, "ctxMenu":[], "v": null, "screenTab": {}};
		this._sapActivity = {"lastRqst": null, "srvop": null};
    },

    getSiteController: function() {
    	return this._siteController;
    },

    onInitialReply: function(statements, notifyCallBack){
    	this._sapActivity.start = (new Date()).getTime();
     	this._session = (this._siteController ? this._siteController.getSession() : null);
   		var ret = this._isAbortReply(statements);
    	(ret ? notifyCallBack(ret) : this.processReply(statements, this._initReplyParseCtx()));
 	},

	getRequestData: function(inst, action, params) {
		// Init
		var valueEx = null, data = {"act": action, "fld": {"ist": sapUtil.makeIst("", "", 0), "v": null, "ctx": {"cusr": null}}, "param": params, "tech": {}};
		// Retrieve current instance and data
		if(!this._siteController._localOpts.fixture || !this._siteController._localOpts.fixture.on) {
			data.fld.ist = params && params.hasOwnProperty("ist") ? params.ist : sapUtil.makeIst(this._currCtx.ist.win, this._currCtx.ist.xid, this._currCtx.ist.nl);
	 		valueEx = this._wndwsStack.getValue(this._currCtx.ist.win, this._currCtx.ist.xid, this._currCtx.ist.nl || 1);
	 		data.fld.v = params && params.hasOwnProperty("v") ? params.v : (valueEx ? valueEx.v : null);
	 		data.fld.fmtKind = params && params.hasOwnProperty("xFmt") ? params.xFmt : (valueEx ? valueEx.xFmt : sapUtil.fieldModeType.show);
	 		// TODO : other params.... ("ctx", etc...)
		}
		this.getRequestTech(data.tech);
		// Cleanup
		if(params) {
			delete params.v;
			delete params.ist;
			delete params.xFmt;
		}
		return data;
	},

	getRequestTech: function(tech) {
		var trcSwitch = "srvTrc";
		if (document[sapUtil._fNS] && document[sapUtil._fNS].hasOwnProperty(trcSwitch)) {
    		tech.trace = tech.trace || {};
    		tech.trace.on =  document[sapUtil._fNS][trcSwitch];
    		tech.trace.server =  document[sapUtil._fNS]["srvTrcSrv"] || null;
    		tech.trace.port =  document[sapUtil._fNS]["srvTrcPort"] || null;
	   		tech.trace.level =  document[sapUtil._fNS]["srvTrcLevel"] || null;
	   		delete document[sapUtil._fNS][trcSwitch];
    	}
    },

	setLocalIst: function(ist) {
    	return this._currCtx.localIst = ist;
    },

	getCurrInst: function(wide) {
    	return wide ? (this._currCtx.localIst || this._currCtx.ist) : this._currCtx.ist;
    },

	setCurrTab: function(tabXid, tabIdx) {
		if(!this._currCtx.screenTab){
			this._currCtx.screenTab = {};
		}
		this._currCtx.screenTab.tabXid = tabXid;
		this._currCtx.screenTab.tabIdx = tabIdx;
    },

	getCurrTab: function() {
		return this._currCtx.screenTab;
    },

	getCurrTabIdx: function() {
		return this._currCtx.screenTab ? this._currCtx.screenTab.tabIdx  : null;
    },

	getCurrTabXid: function() {
		return this._currCtx.screenTab ? this._currCtx.screenTab.tabXid : null;
    },

    isActiveWindow: function(winId){
        return this._wndwsStack.isActiveWindow(winId);
    },
    
	removeFocus: function() {
		var ist = this.getCurrInst();
		this._wndwsStack.removeFocus(ist.win, ist.xid, ist.nl);
    },

	hasFocus: function(field, winId, nl) {
		var meta;
		if(field.hasOwnProperty("xid")) {
			return sapUtil.cmpIst(this.getCurrInst(), field);
		}
		else
		{
			meta = syraUtil.getMetaFromObject(field);
			return (meta = syraUtil.getMetaFromObject(field)) ? sapUtil.cmpIst(this.getCurrInst(), sapUtil.makeIst(winId, meta.$bind, nl)) : false;
		}
    },
	
	_forceValue: function(params, noStoreCommmit) {
		var data = {"entities": {}}, collId, istType = params.win ? sapUtil.getEntityType(params.xid, this._wndwsStack.getWindowProto(params.win)) : null;
		// Check data type (by design, forcing value is only required for "string" and "date" type)...
		if(!istType || (istType != syraUtil.stringType && istType != syraUtil.dateType)) {
			return null;
		}
		// Set value
		if(params.xid && params.hasOwnProperty("v") && params.v != null) {
			if (params.hasOwnProperty("nl") && params.nl != null && params.nl > 0) {
				collId = sapUtil.getBlockInst(params.xid);
				data.entities[collId] = {"$rcd": [{"$uuid": params.nl - 1}]};
				data.entities[collId].$rcd[0][params.xid] = params.v;
			}
			else {
				data.entities[params.xid] = {"v": params.v};
			}
			this._wndwsStack.applyChange(params.win, data, {"noStoreCommmit": noStoreCommmit});
		}
		return null;
 	},

    processReply: function(reply, workingCtx) {
    	var ret = this._parseReply(reply, workingCtx || (workingCtx = this._initReplyParseCtx()), _sapAuto);
    	if(ret && !ret.ok){
    		// Parsing fatal Error or unexpected behaviour : unrecovered case!
    		this._sapException(reply, ret.diagnoses, null);
    	}
    	else if(workingCtx.failed){
    		// SAP Parsing case. Should be recovered...
    		// TODO
    	}
	},

	_initReplyParseCtx: function() {
		return {"syraPageModel": null, "failed": false, "diagnoses": []};
	},

	_isAbortReply: function(reply) {
		var _abort = {"abort": false, "diagnoses": []};
		this._parseReply(reply, _abort, _sapAbort);
		return _abort.abort ? _abort.diagnoses : null;
	},

    _replyAbortBoxEnd: function(params, ctx){
		var status = null;
		if(params.type == 4) {
			ctx.abort = true;
			ctx.diagnoses.push(util.makeDiagnosis(this._session.getlabel("error", "4", "Connection refused. Detail : ") + "\n" + (params.li ? params.li.join("\n") : ""), 3, "sap.Controller._replyAbortBoxEnd()", 4));
			status = {"brk": true, "ok": true};		
		}
		return status;
	},

    _replyAbortBoxInf: function(params, ctx){
    	if(params.li) {
			ctx.diagnoses.push(util.makeDiagnosis(params.li.join("\n"), params.type));		
    	}
		return null;
	},

    _replyAbortClose: function(params, ctx){
    	ctx.abort = true;
    	if(ctx.diagnoses.length === 0 && (!params.reason || params.reason.length === 0)){
    		ctx.diagnoses.push(util.makeDiagnosis(this._session.getlabel("error", "3", "Connection refused without reason."), 3, "sap.Controller._replyAbortClose()", "3"));
    	}
    	else {
    		ctx.diagnoses = ctx.diagnoses.unshift(util.makeDiagnosis(this._session.getlabel("error", "4", "Connection refused. Detail : ") + params.reason || "", 3, "sap.Controller._replyAbortClose()", "4"));
    	}
		return null;
	},

	isSapReply: function(reply) {
		return _.find(_sapAuto, function(rule) {return this.hasOwnProperty(rule.root);}, reply) != undefined ? true : false;
	},

    _parseReply: function(reply, workingCtx, rules){
    	var next = true, i = 0, params, status = null, len = rules.length;
    	while(next && i < len) {
    		if(reply[rules[i].root] && (params = (rules[i].catg ? reply[rules[i].root][rules[i].catg] : reply[rules[i].root]))) {
	    		params = (rules[i].id ? (rules[i].subid ? (params[rules[i].id] ? params[rules[i].id][rules[i].subid] : null) : params[rules[i].id]) : params);
	    		if(params) {
		    		status = this[rules[i].exec](params, workingCtx, reply[rules[i].root][rules[i].catg], reply);
		    		next = rules[i].end ? false : rules[i].next;
		    		// Check execution status
		    		if (status && (!status.ok || status.brk)) {
	    				next = false;
		    		}
		    	}
	    	}
	    	if (next && (!status || status.ok)) {
	    		i++;
	    	}
    	}
    	if(i >= len) {
    		next = true;
			_.each(rules, function(item) {
				next = next ? item.next : false;
			});
			if(!next){
				// At least one rule doesn't have a "next" rule! So, we register a parsing error.
				if(!status) {
					status = {"diagnoses": []};
				}
				else if(!status.diagnoses) {
					status.diagnoses = [];
				}
				status.ok = false;
				status.diagnoses.push(util.makeDiagnosis(this._session.getlabel("error", "5", "The analysis end rule of the current message does not exist"), 3, "sap.Controller._parseReply()", "5"));
	    	}
    	}
    	return status;
	},

	_stubSessClose: function(params, reboot) {
		// TODO : Std TRT + Notify hoster + Voir coment on release l'ensemble + cas du reboot
    	this._sapActivity.stop = (new Date()).getTime();
        /*this.getSiteController().trigger("sap.sess." + reboot ? "reboot" : "close", {"target": this,
            "type": reboot ? "reboot" : "close", "data": params});*/
    	var siteController = this.getSiteController();
    	setTimeout(function(){siteController.onSapCompleted();}, 100);
		return null;
 	}, 

	_stubSessReboot: function(params) {
		return this._stubSessClose(params, true);
 	}, 

	_stubSessSets: function(params, parseCtx) {
		if(parseCtx.syraPageModel){
			return null;
		}
		this._session.updateSettings(params);
		return null;
 	}, 

	_stubSessOpen: function(params, parseCtx) {
		if(parseCtx.syraPageModel){
			return null;
		}
		// TODO: Open new session. Notify hoster...
		return null;
 	}, 

	_stubSrvopRequest: function(params, parseCtx) {
		if(parseCtx.syraPageModel){
			return null;
		}
		// TODO
		return null;
 	}, 

	_stubWinClose: function(params, parseCtx, func) {
		if(parseCtx.syraPageModel){
			return null;
		}
		// Sort "close" clause in order to process the top stack windows first
		params.sort(function(a, b) {return (b.charCodeAt(0) - a.charCodeAt(0));});
		_.each(params, function(winId){
			if(!this._wndwsStack.shouldDiscardClose(winId, func.open)) {
				this._wndwsStack.unStack(winId);
				// TODO : control "unStack" return code ?!?
				// TODO: delete page Syracuse ==> ici ou dans méthode "this._wndwsStack.unStack"!!!!
				// TODO : + notify Hoster
			}
		}, this);	
		return null;
 	}, 

	_stubWinOpen: function(params, parseCtx, func, reply) {
		// TODO : Deal with window whitout model (like Formula or preview screen...)
		// TODO : Cas particulier des fenêtre Selbox + choose (avec en plus pour les 2 sauvegarde des coordonnées dimeniosn d'affiche d'une fois sur l'autre)
		var winId = null, ret = null, nextWin = null, self = this;
		if(!parseCtx.syraPageModel) {
			// Init : sort "open" clause in order to process low stack windows first
			parseCtx.syraPageModel = {};
			parseCtx.win2Process = {"id": 0};
			parseCtx.wndwsId = _.keys(params).sort(function(a, b) {return (a.charCodeAt(0) - b.charCodeAt(0));});
		}
		if(parseCtx.wndwPending){
			// If built window pending, register this window
			winId = parseCtx.wndwsId[parseCtx.wndwPending.id];
			this._wndwsStack.stack(winId, params[winId], parseCtx.syraPageModel);
			// Release
			delete parseCtx.wndwPending;
			delete parseCtx.syraPageModel;
			parseCtx.syraPageModel = {};
		}
		if (parseCtx.win2Process) {
			nextWin = parseCtx.wndwsId.length > (parseCtx.win2Process.id + 1) ? (parseCtx.win2Process.id + 1) : null;
			if(this._wndwsStack.shouldDiscardOpen(parseCtx.wndwsId[parseCtx.win2Process.id], func.close)) {
				// Discard "open" statement if "close" & "open" in the same reply
				if(nextWin) {
					parseCtx.win2Process.id = nextWin;
					this.processReply(reply, parseCtx);
					ret = {"brk": true, "ok": true};
				}
			}
			else {
				parseCtx.wndwPending = {"id": parseCtx.win2Process.id};
				winId = params[parseCtx.wndwsId[parseCtx.win2Process.id]];
				(nextWin ? parseCtx.win2Process.id = nextWin : delete parseCtx.win2Process);
		    	this._siteController.loadRepresentation({"id": parseCtx.wndwsId[parseCtx.wndwPending.id], "name": winId.name, "mainPage": !!(this._wndwsStack.length() === 0)}, null, 
			    	function (page){
			    		parseCtx.syraPageModel = page;
				    	self.processReply(reply, parseCtx);
				    },
				    function (error){
					    //self._sapException(reply, util.getDiagnosesFromAjax(error), {"typ": "RqstSrv", "act": requestActions.getSrvActionEX("SUP_WIN_CLOSESTACK"), "param": {"win": {"close": parseCtx.wndwsId.sort(function(a, b) {return (b.charCodeAt(0) - a.charCodeAt(0));})}}}, error);
					    var diagnoses = util.getDiagnosesFromAjax(error);
					    util.prependDiagnosisMess (diagnoses, self._session.getlabel("error", "10", "Unexpected error retrieving window description on the web server : ") + " [" + winId.name + "] " + "\n\n" + self._session.getlabel("error", "11", "Error detail :\n"));
					    self._sapException(reply, diagnoses, {"typ": "RqstSrv", "act": requestActions.getSrvAction("SRV_ABANDON"), "param": {"ist": null, "v": ""}}, error);
				    },
				    function (proto){
				    	// Extend prototype with dynamic layout and meta
				    	var sessMnus = self._session.getWinSessMnus(), staticMnus = self._session.getWinStaticMnus();
				    	//TODO : hack!!
				    	winId.mnu = /*winId.mnu ||*/ [{"typ": 0,"act": requestActions.getSrvAction("SRV_FIN_APPLI"),"acl": null,"txt": "Close Appli","rnk": "10","id": "21212511111","fid": "51584"},
				    		{"typ": 0,"act": 2819,"acl": null,"txt": "Commentaires...","rnk": "10","id": "11332","fid": "5154"},
							{"typ": 1,"act": 5445,"acl": null,"txt": "Export Excel","rnk": "12","id": "5245","fid": "11332"}];
				    	if(winId["mnu"] || sessMnus || staticMnus){
				    		_.each ([winId["mnu"] || null, sessMnus, staticMnus], function(mnus) {
								sapUtil.appendMnus2Syra(proto, mnus);
					        });
				    	}
				    }
				);
				ret = {"brk": true, "ok": true};
			}
		}
		return ret;
 	},

	_stubSetPrevValue: function(params) {
		// Previous value : http://syracuse/w/index.php/Request_Reply_Fusion#sap.previous
		this._forceValue(params, false);
		return null;
 	},

	_stubActs: function(actions) {
		// Action activation : http://syracuse/w/index.php/Request_Reply_Fusion#sap.acts
		return this._wndwsStack.setActionsState(actions);
	},
	
	_stubSetWins: function(params) {
		var ret = null, retEx = {};
	    _.each(params, function(data, winId) {
			retEx[winId] = this._wndwsStack.applyChange(winId, data);
        }, this);
        _.each(retEx, function(diagnoses, winId) {
            if (diagnoses){
                // TODO : check return code ==> ret = ...
            }
        }, this); 
		// TODO: deal with stat Bar and win title? => get New Statbar info on current displayed Window, if changes, to notify hoster...
		return ret;
 	}, 

	_stubSapMisc: function(params) {
		var ret = null, retEx = {};
	    _.each(params, function(data, typ){
		    if(_sapK.stubMisc[typ]) {
			    retEx[typ] = this[_sapK.stubMisc[typ]](data);
			}
		}, this);	
        _.each(retEx, function(diagnoses, task) {
            if (diagnoses){
                // TODO : check return code ==> ret = ...
            }
        }, this); 
		return ret;
 	}, 

	_stubSapCallReply: function(params) {
   		var ackCallReply = new Ackcall.AckCallReply();
    	ackCallReply.initialize(params);
		return null;
 	}, 

	_stubSapTarget: function(params) {
		var status = null;
		if(params.type && _sapK.stubTarget[params.type] && this[_sapK.stubTarget[params.type]]) {
			// Pre-ope TODO

			// Process
			status = this[_sapK.stubTarget[params.type]](params[params.type]);
		}
		else {
			status = {"ok": false, "diagnoses" : [util.makeDiagnosis(this._session.getlabel("error", "6", "Unable to set the focus because the target type is not defined in the message server response."), 3, "sap.Controller._stubSapTarget()", "6")]};
		}
		return status;
 	}, 

	_stubSapMisc_help: function(params) {
    	// Open Help dialog : http://syracuse/w/index.php/Request_Reply_Fusion#sap.misc.help
		return null;
	}, 

    _stubSapMisc_openf: function(params) {
    	// Open web page in a new tab : http://syracuse/w/index.php/Request_Reply_Fusion#sap.misc.openf
    	window.open(params[0] + "://" + params[1], "_blank");
		return null;
	}, 

    _stubSapTarget_ist: function(params) {
    	// Set focus on sap instance : http://syracuse/w/index.php/Request_Reply_Fusion#sap.target.ist
    	var ret = null, self = this, boxParams, boxOpts, dispfmtErrMess = false;
    	// Init new context
    	delete this._currCtx;
    	this._currCtx = {"ist": {}};
    	this._currCtx.ctxMenu = params.acts && params.acts.length > 0 ? _.map(params.acts, function(act, idx){
			return {"$act": act[0], "st": act[1], "typ": act[2] || 0, "$title": act[3], "acc": act.length > 4 ? act[4] : ""};
	 	}) : [];
	 	delete params.acts;
	 	_.each(params, function(value, name){this[name] = value;}, this._currCtx.ist);
	 	this._currCtx.localIst = null;
	 	// Check control/format status
	 	if (params.ctrlFailed && dispfmtErrMess) {
	 		// Display message
	 		params.$diagnoses = params.$diagnoses || [util.makeDiagnosis(this._session.getlabel("error", "12", "Incorrect value, it does not respect field format"), 3, "_stubSapTarget_ist()", 12)];
			boxParams = util.diagnosesToOurErr(params.$diagnoses);
			msgBox.setMsgBoxDefaultProp(boxParams, 4, 60, this._session.getlabel("error", "13", "Input Error"));
	     	boxOpts = msgBox.getMsgBoxOpts(boxParams);
	    	boxOpts.callback = function(resp, closureMode) {
				self._wndwsStack.setFocus(params.win, "fmtErr", params.xid, params.nl || 1, (params.edit === null || params.edit === undefined ? true : params.edit), params);
	    	};
	    	setTimeout(function(){syraUtil.msgBox(boxOpts);}, 10);
	 	}
	 	else {
	 		// Set focus on new instance
	 		if(params.hasOwnProperty("v") && params.v !== null) {
		 		this._forceValue(params, true);
	 		}
	 		ret = this._wndwsStack.setFocus(params.win, params.ctrlFailed ? "fmtErr" : "std", params.xid, params.nl || 1, (params.edit === null || params.edit === undefined ? true : params.edit), params);
	 		if(ret && ret.ok && ret.srvAct) {
		    	setTimeout( function(){
					(self.getSiteController()).postSapRqst(requestActions.getSrvAction(ret.act), ret.params);
			    }, 50);
			    return null;
			}
			else if(ret && !ret.ok) {
				// TODO....
			}
	    	// If instance does not exist : champ suivant + traité cas de bouclage sur même instance  : close!
			// + Cas de bouclage dans MF tableau (Cf. code client ligne 2301 de messages.cpp)
		}
		return null;
	}, 

    _stubSapTarget_box: function(params) {
    	// Open messageBox : http://syracuse/w/index.php/Request_Reply_Fusion#sap.target.box
    	var boxOpts = msgBox.getMsgBoxOpts(params), self = this;
    	boxOpts.callback = function(resp, closureMode) {
    		var data = sapUtil.getObjFieldValue(msgBox.getMsgBoxRet(resp, closureMode, params), sapUtil.fieldModeType.show);
    		data.ist = null;
    		(self.getSiteController()).postSapRqst(requestActions.getSrvAction("SRV_CHAMP_SUIVANT"), data);
    	};
    	setTimeout(function(){syraUtil.msgBox(boxOpts);}, 50);
		return null;
	}, 

    _stubSapTarget_rpc: function(params) {
    	// Remote procedure call : http://syracuse/w/index.php/Request_Reply_Fusion#sap.target.rpc
   		var remoteCall = new Rpc.RemoteCall();
    	remoteCall.initialize(params);
		return null;
	}, 

    _stubSapTarget_askui: function(params) {
    	// Process Askui : http://syracuse/w/index.php/Request_Reply_Fusion#sap.target.askui
   		var askuiStub = new Askui.AskuiStub();
    	askuiStub.initialize(params);
		return null;
	}, 

    _stubSapTarget_selpr: function(params) {
    	// Process printer configuration : http://syracuse/w/index.php/Request_Reply_Fusion#sap.target.selpr
    	var printerAccess = new Printer.PrinterAccess();
    	printerAccess.initialize(params);
		return null;
	},

    _stubSapTarget_portal: function(params) {
    	// Display portal : http://syracuse/w/index.php/Request_Reply_Fusion#sap.target.portal
    	var siteController = this.getSiteController();
    	setTimeout(function(){siteController.onSapUIHidden();}, 100);
		return null;
	},

   _sapException: function(reply, diagnoses, recovery, localContext, messCallback){
   		var self = this, boxOpts, boxParams;
		diagnoses = diagnoses || util.makeDiagnosis(this._session.getlabel("error", "7", "Unexpected error while sending request to web server."), 4, "sap.Controller._sapException()", "7");
		boxParams = util.diagnosesToOurErr(diagnoses), boxOpts;
		msgBox.setMsgBoxDefaultProp(boxParams, 4, 50, this._session.getlabel("error", "8", "Fatal error"), this._session.getlabel("error", "7", "Unexpected error while sending request to web server."));
		//_.defaults(boxParams, {"type": 4, "to": 20, "tit": this._session.getlabel("error", "8", "Fatal error"), "li": this._session.getlabel("error", "7", "Unexpected error while sending request to web server.")});
     	boxOpts = msgBox.getMsgBoxOpts(boxParams);
    	boxOpts.callback = function(resp, closureMode) {
	    	if(recovery && recovery.typ) {
	    		self["_sapRecovery" + recovery.typ](reply, recovery);
	    		return true;
	    	}
	    	else {
	    		// TODO : Unrecovered error?... how to know if session is always available?    		
	   			return messCallback ? messCallback() : true;
	   		}
    	};
    	setTimeout(function(){syraUtil.msgBox(boxOpts);}, 50);
    },

    _sapRecoveryRqstSrv: function(reply, recovery){
  		(this.getSiteController()).postSapRqst(recovery.act, recovery.param);
    },

    dispose: function(){
    	if(this._wndwsStack){
    		this._wndwsStack.dispose();
    		delete this._wndwsStack;
    	}
    	if(this._siteController){
    		delete this._siteController;
    	}
    	if(this._session){
    		delete this._session;
    	}
    	if(this._srvOpts) {
    		delete this._srvOpts;
    	}
    }
});