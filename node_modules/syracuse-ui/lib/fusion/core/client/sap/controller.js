"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Edit Protocol controller
 */


var helpers = require('syracuse-core/lib/helpers');
var util = require('syracuse-ui/lib/fusion/tools/util');
var localize = require('syracuse-ui/lib/fusion/tools/localize').localize;
var srvAct = require('./srvactions');
var msgBox = require('./msgbox');
var Askui = require('./askui');
var Printer = require('./selimp');
var Rpc = require('./rpc');
var Ackcall = require('./ackcall');
var Window = require('./window');
var sapUtil = require('./util').Fusion;
var syraUtil = require('./util').Syra;
var requestActions = require('./srvactions');
var FieldFormatter = require('./format').FieldFormatter;


var _sapK = {
    "stubMisc": {"help": "_stubSapMisc_help", "openf": "_stubSapMisc_openf"},
    "pNodes" : {"sess": "session", "srvOps": "srvop", "sap": "sap"},
    "pSubNodes" : {"wins": "wins", "entities": "entities", "target": "target", "ist": "ist"},
    "stubTarget": {"box": "_stubSapTarget_box", "rpc": "_stubSapTarget_rpc", "askui": "_stubSapTarget_askui", "selpr": "_stubSapTarget_selpr", "portal": "_stubSapTarget_portal"}
};
_sapK.stubTarget[_sapK.pSubNodes.ist] = "_stubSapTarget_ist";
var _sapAuto = [
    {"root": _sapK.pNodes.sap, "catg": "func", "id": "close", "subid": null, "exec": "_stubWinClose", "end": false, "next": true},
    {"root": _sapK.pNodes.sess, "catg": "close", "id": null, "subid": null, "exec": "_stubSessClose", "end": true, "next": false},
    {"root": _sapK.pNodes.sess, "catg": "reboot", "id": null, "subid": null, "exec": "_stubSessReboot", "end": true, "next": false},
    {"root": _sapK.pNodes.sess, "catg": "settings", "id": null, "subid": null, "exec": "_stubSessSets", "end": false, "next": true},
    {"root": _sapK.pNodes.sess, "catg": "open", "id": null, "subid": null, "exec": "_stubSessOpen", "end": false, "next": true},
    {"root": _sapK.pNodes.srvOps, "catg": "request", "id": null, "subid": null, "exec": "_stubSrvopRequest", "end": false, "next": true},
    {"root": _sapK.pNodes.sap, "catg": "func", "id": "open", "subid": null, "exec": "_stubWinOpen", "end": false, "next": true},
    {"root": _sapK.pNodes.sap, "catg": "acts", "id": null, "subid": null, "exec": "_stubActs", "end": false, "next": true},
    {"root": _sapK.pNodes.sap, "catg": "previous", "id": null, "subid": null, "exec": "_stubSetPrevValue", "end": false, "next": true},
    {"root": _sapK.pNodes.sap, "catg": _sapK.pSubNodes.wins, "id": null, "subid": null, "exec": "_stubSetWins", "end": false, "next": true},
    {"root": _sapK.pNodes.sap, "catg": "misc", "id": null, "subid": null, "exec": "_stubSapMisc", "end": false, "next": true},
    {"root": _sapK.pNodes.sap, "catg": "rpc", "id": null, "subid": null, "exec": "_stubSapCallReply", "end": false, "next": true},
    {"root": _sapK.pNodes.sap, "catg": _sapK.pSubNodes.target, "id": null, "subid": null, "exec": "_stubSapTarget", "end": false, "next": false}
];
var _sapAbort = [
    {"root": _sapK.pNodes.sap, "catg": "target", "id": "box", "subid": null, "exec": "_replyAbortBoxEnd", "end": false, "next": true},
    {"root": _sapK.pNodes.sap, "catg": "target", "id": "box", "subid": null, "exec": "_replyAbortBoxInf", "end": false, "next": true},
    {"root": _sapK.pNodes.sess, "catg": "close", "id": null, "subid": null, "exec": "_replyAbortClose", "end": true, "next": true},
    {"root": _sapK.pNodes.sess, "catg": "reboot", "id": null, "subid": null, "exec": "_replyAbortReboot", "end": true, "next": true}
];

// Misc utilities
exports.getSessSetsFromReply = function(reply){
    return (reply[_sapK.pNodes.sess] ? reply[_sapK.pNodes.sess].settings : null);
};
exports.getsrvOptsFromReply = function(reply){
    return reply[_sapK.pNodes.srvOps];
};
exports.cleanInitialReply = function(reply){
    if(reply[_sapK.pNodes.sess] && reply[_sapK.pNodes.sess].settings) {
        delete reply[_sapK.pNodes.sess].settings;
    }
    if(reply[_sapK.pNodes.srvOps]) {
        delete reply[_sapK.pNodes.srvOps];
    }
};
function _dispFmtErrBox(params, ctrlObj, replyCompleteCallback) {
    var boxParams, boxOpts;
    params.$diagnoses = params.$diagnoses || [util.makeDiagnosis(ctrlObj._session.getlabel("error", "12", "Incorrect value, it does not respect field format or field type"), 3, "_stubSapTarget_ist()", "12", util.cltFusionNice)];
    boxParams = util.diagnosesToOurErrEx(params.$diagnoses);
    msgBox.setMsgBoxDefaultProp(boxParams, 4, 60, ctrlObj._session.getlabel("error", "13", "Input Error"));
    boxOpts = msgBox.getMsgBoxOpts.call(ctrlObj, boxParams);
    boxOpts.callback = function(resp, closureMode) {
        ctrlObj._wndwsStack.setFocus(params.win, sapUtil.focusStyle.fmtErr.code, params.xid, params.nl || 1, (params.edit === null || params.edit === undefined ? true : params.edit), params);
        if(replyCompleteCallback) {
            replyCompleteCallback();
        }
        msgBox.releaseMsgBoxParams(boxOpts);
        msgBox.releaseBoxParams(boxParams);
    };
    setTimeout(function(){syraUtil.msgBox(boxOpts);}, 10);
    return {"notifyCalled": true};
}

// Adx page input controller class
function SapController(){
}

exports.Controller = helpers.defineClass(SapController, null, {
    initialize: function(siteController, srvOpts){
        this._siteController = siteController;
        this._session = null;
   
        (this._wndwsStack = new Window.WinStack()).initialize(this);
        this._currCtx = {"ist": sapUtil.makeIst("A", "", 0), "localIst": null, "ctxMenu":[], "v": null, "screenTab": {}};
        this._sapActivity = {"lastRqst": null, "srvop": null};
    },

    getSiteController: function() {
        return this._siteController;
    },

    getMessLabel: function(code, catg, dflt) {
        return this._session.getlabel(catg, code, dflt);
    },

    getlogger: function() {
        return this._session.logger;
    },

    onInitialReply: function(statements, notifyCallBack){
        var ret, self = this;
        this._sapActivity.start = (new Date()).getTime();
        this._session = (this._siteController ? this._siteController.getSession() : null);
        (this._ackcallStack = new Ackcall.AckCallStack()).initialize(this, this._session.isNodeWS());
        ret = this._isAbortReply(statements);
        if(ret) {
            notifyCallBack(ret);
        }
        else {
            // Check shared resources before to continue
            this._session.waitSharedRes(100, 30, function(diagnoses) {
                if(diagnoses && diagnoses.length > 0) {
                    self._sapException(null, diagnoses, {"typ": "RqstSrv", "act": requestActions.getSrvAction("SRV_FIN_APPLI"), "param": {"ist": null, "v": ""}});
                }
                else {
                    // Post-init shared resources.
                    self._session.postInitSharedRes();
                    // Great, parse first reply!
                    self._wndwsStack.setGlobalMenu(self._session, self._session ? self._session.getWinSessMnus() : null);
                    self.processReply(statements, self._initReplyParseCtx());
                    notifyCallBack(null, {"tick": (new Date()).getTime()});
                }
            });
        }
    },

    getRequestData: function(inst, action, params) {
        // Init
        var valueEx = null, data = {"act": action, "fld": {"ist": sapUtil.makeIst("", "", 0), "v": null}, "param": params, "tech": {}};
        // Retrieve current instance and data
        if(!this._siteController._localOpts.fixture || !this._siteController._localOpts.fixture.on) {
            data.fld.ist = params && params.hasOwnProperty("ist") ? params.ist : sapUtil.makeIst(this._currCtx.ist.win, this._currCtx.ist.xid, this._currCtx.ist.nl);
            valueEx = this._wndwsStack.getValue(this._currCtx.ist.win, this._currCtx.ist.xid, this._currCtx.ist.nl || 1);
            data.fld.v = params && params.hasOwnProperty("v") ? params.v : (valueEx ? valueEx.v : null);
            data.fld.fmtKind = params && params.hasOwnProperty("xFmt") ? params.xFmt : (valueEx ? valueEx.xFmt : sapUtil.fieldModeType.show);
            data.fld.ctx = valueEx ? valueEx.ctx || {} : {};
            data.fld.notModified = params && params.hasOwnProperty("notModified") ? params.notModified : (valueEx ? valueEx.notModified : undefined);
        }
        this.getRequestTech(data.tech);
        // Cleanup
        if(params) {
            delete params.v;
            delete params.ist;
            delete params.xFmt;
        }
        return data;
    },

    updateSentData: function(ist, v) {
        var currIst = this.getCurrInst();
        if(currIst && !currIst.fmt && sapUtil.isFieldInst(ist.xid)) {
            // Warning : no update for field with format... because the value could be wrong, and anyway... web server set the value in reply...
            this._wndwsStack.setDataValue(ist.win, ist.xid, ist.nl, v, {"noUI": true});
        }
    },

    getRequestTech: function(tech) {
        var trcSwitch = "srvTrc";
        if (document[sapUtil._fNS] && document[sapUtil._fNS].hasOwnProperty(trcSwitch)) {
            tech.trace = tech.trace || {};
            tech.trace.on =  document[sapUtil._fNS][trcSwitch];
            tech.trace.server =  document[sapUtil._fNS]["srvTrcSrv"] || null;
            tech.trace.port =  document[sapUtil._fNS]["srvTrcPort"] || null;
            tech.trace.level =  document[sapUtil._fNS]["srvTrcLevel"] || null;
            delete document[sapUtil._fNS][trcSwitch];
        }
    },

    getEntityValueInReply: function(reply, entityIst) {
        var value = null, ref, entity = null, coll;
        if((ref = reply[_sapK.pNodes.sap]) && (ref = ref[_sapK.pSubNodes.wins]) && (ref = ref[entityIst.win]) && (ref = ref[_sapK.pSubNodes.entities])) {
            entity = ref[entityIst.xid];
            if(!entity && entityIst.nl) {
                coll = sapUtil.getBlockInst(entityIst.xid);
                ref = ref[coll] ? ref[coll]["$rcd"] : null;
                if(ref) {
                    entity = _.find(ref, function(record) {
                        return record.$uuid === entityIst.nl && record.hasOwnProperty(entityIst.xid);
                    });
                    value = entity ? entity[entityIst.xid] : null;
                }
            }
            else {
                value = entity ? entity.v : null;
            }
        }
        return value;
    },

    isControlFailedInReply: function(reply, ist) {
        var ref, instance = ist || (reply && (ref = reply[_sapK.pNodes.sap]) && (ref = ref[_sapK.pSubNodes.target]) ? ref[_sapK.pSubNodes.ist] : null);
        return  instance && instance.ctrlFailed;
    },

    getTargetIstFromReply: function(reply){
        var ref;
        return reply && (ref = reply[_sapK.pNodes.sap]) && (ref = ref[_sapK.pSubNodes.target]) && (ref = ref[_sapK.pSubNodes.ist]) ? ref : null;
    },

    getTargetCtxMenuFromReply: function(reply){
        var targetIst = this.getTargetIstFromReply(reply);
        return targetIst ? targetIst.acts : null;
    },

    setLocalIst: function(ist) {
        return this._currCtx.localIst = ist;
    },

    getCurrInst: function(wide) {
        return wide ? (this._currCtx.localIst || this._currCtx.ist) : this._currCtx.ist;
    },

    _initNewCurrIst: function(params) {
        // Check border line cases...
        if (this._checkEvilInstance(params)) {
            return true;
        }
        // Init new context
        _.each(this._currCtx, function(value, key) {delete this[key];}, this._currCtx);
        this._currCtx = {"ist": {}};
        _.each(params, function(value, name){if(name != "acts") {this[name] = value;}}, this._currCtx.ist);
        this._currCtx.localIst = null;
        return false;
    },    

    setCurrCtxMenu: function(ctxMenus) {
        delete this._currCtx.ctxMenu;
        this._currCtx.ctxMenu = util.duplicateObj(ctxMenus);
    },

    setCurrTab: function(tabXid, tabIdx) {
        if(!this._currCtx.screenTab){
            this._currCtx.screenTab = {};
        }
        this._currCtx.screenTab.tabXid = tabXid;
        this._currCtx.screenTab.tabIdx = tabIdx;
    },

    getCurrTab: function() {
        return this._currCtx.screenTab;
    },

    getCurrTabIdx: function() {
        return this._currCtx.screenTab ? this._currCtx.screenTab.tabIdx  : null;
    },

    getCurrTabXid: function() {
        return this._currCtx.screenTab ? this._currCtx.screenTab.tabXid : null;
    },

    isActiveWindow: function(winId){
        return this._wndwsStack.isActiveWindow(winId);
    },

    isEndSessReply: function(reply) {
        return (reply && reply.sap && ((reply.sap.target && reply.sap.target.type && reply.sap.target.type == "portal") || (reply.session && (reply.session.close || reply.session.reboot))))
    },
    
    removeFocus: function() {
        var ist = this.getCurrInst();
        this._wndwsStack.removeFocus(ist.win, ist.xid, ist.nl);
        document.site.closePopups()
    },

    hasFocus: function(field, winId, nl, extra, discardLine) {
        var meta, method = extra ? "cmpIstEx" : "cmpIst";
        if(field.hasOwnProperty("xid")) {
            return sapUtil[method](this.getCurrInst(), field, discardLine);
        }
        else
        {
            meta = syraUtil.getMetaFromObject(field);
            return (meta = syraUtil.getMetaFromObject(field)) ? sapUtil[method](this.getCurrInst(), sapUtil.makeIst(winId, meta.$bind, nl), discardLine) : false;
        }
    },
    
    forceValue: function(params, noStoreCommmit, hardForce) {
        var num, istType;
        if(params.xid && params.hasOwnProperty("v") && params.v != null) {
            istType = params.win ? sapUtil.getEntityType(params.xid, this._wndwsStack.getWindowProto(params.win)) : null
            // Check data type (by design, forcing value is restricted, except hard force )...
            if(!hardForce && (!istType || istType == syraUtil.dataTypes.rtfType || sapUtil.isSpecialScrnId(params.xid))) {
                return null;
            }
            else if(!hardForce && istType == syraUtil.dataTypes.choiceType && !_.isNumber(params.v)) {
                num = parseInt(params.v, 10);
                if(isNaN(num)) {
                    return null;
                } else {
                    params.v = num;
                }
            }
            // Set value
            this._wndwsStack.setDataValue(params.win, params.xid, params.nl, params.v, {"noStoreCommmit": noStoreCommmit});
        }
        return null;
    },

    _getLoadRepParams: function(winParams) {
        var params = {}, specialWin = sapUtil.isSpecialWin(winParams.name);
        if(specialWin) {
            params = {"name": specialWin.name};
            if(specialWin.id == sapUtil.specialWindow.selbox.id || specialWin.id == sapUtil.specialWindow.choose.id) {
                params.$facet = syraUtil.pageFacet.lookup;
            }
            else if(specialWin.id == sapUtil.specialWindow.formula.id) {
                // TODO!
            }
        }
        return params;
    },

    _checkEvilInstance: function(instance) {
        if (sapUtil.isButtonScreen(instance.xid) && sapUtil.cmpIst(instance, this.getCurrInst())) {
            // Loop on "Button" pseudo screen : break (Cf. method "setFocus" of "WinStack" Class).
            return true;
        }
    },

    _isValueChanged: function(params){
        var winModel, fval = (params.v === undefined ? false : true);
        if (fval && params.nl && params.nl > 0 && (winModel = this._wndwsStack.getWindow(params.win))) {
            fval = !(winModel.getDatasetValue(params.xid, params.nl) === params.v);
        }
        return fval;
    },

    _getCloseReason: function(reasonCode, reboot) {
        // TODO : improve
        return (reboot ? "Server sent reboot statement." : ("" + reasonCode || "unknown..."));
    },

    processReply: function(reply, workingCtx) {
        try {
            var callNotify = workingCtx && workingCtx._techReply ? workingCtx._techReply.replyComplete : null;
            var ret = this._parseReply(reply, workingCtx || (workingCtx = this._initReplyParseCtx()), _sapAuto), st = true;
            if(ret && !ret.ok){
                // Parsing fatal Error or unexpected behaviour : unrecovered case!
                this._sapException(reply, ret.diagnoses, {"typ": "RqstSrv", "act": requestActions.getSrvAction("SRV_FIN_APPLI"), "param": {"ist": null, "v": ""}}, null, null, callNotify);
                st = false;
            }
            else if(workingCtx.failed){
                // SAP Parsing case. Should be recovered...
                // TODO
                if (callNotify) {
                    callNotify();
                    delete workingCtx._techReply.replyComplete;
                }
                st = false;
            }
            return st;
        }
        catch(ex) {
            this._sapException(null, util.makeDiagnosis(this._session.getlabel("error", "18", localize.getMessage(this._session.cdIsoLang, "13")), 4, ex.message + "\n" + ex.stack, "18", util.cltFusionNice), {"typ": "RqstSrv", "act": requestActions.getSrvAction("SRV_FIN_APPLI"), "param": {"ist": null, "v": ""}}, null, null, callNotify);
            return false;
        }
    },

    _initReplyParseCtx: function() {
        return {"syraPageModel": null, "failed": false, "diagnoses": []};
    },

    _isAbortReply: function(reply) {
        var _abort = {"abort": false, "diagnoses": []}, logger;
        this._parseReply(reply, _abort, _sapAbort);
        if(_abort.abort && (logger = this.getlogger())) {
            logger.debug({"severety": "error"}, "Connexion aborted. Reason : " + _abort.reason);
            logger.debug({"toJson": true},  _abort.diagnoses);
        }
        return _abort.abort ? _abort.diagnoses : null;
    },

    _replyAbortBoxEnd: function(params, ctx){
        var status = null, defMess;
        if(params.type == 4) {
            ctx.abort = true;
            ctx.reason = this._getCloseReason(4);
            defMess = localize.getMessage(this._session.cdIsoLang, "11");
            ctx.diagnoses.push(util.makeDiagnosis(this._session.getlabel("error", "4", defMess) + " :\n" + (params.li ? params.li.join("\n") : ""), 3, "sap.Controller._replyAbortBoxEnd()", "04", util.backOfficeNice));
            status = {"brk": true, "ok": true};     
        }
        return status;
    },

    _replyAbortBoxInf: function(params, ctx){
        if(params.li) {
            ctx.diagnoses.push(util.makeDiagnosis(params.li.join("\n"), params.type));      
        }
        return null;
    },

    _replyAbortClose: function(params, ctx, categorie, reply, reboot){
        var defMess;
        if(ctx.abort) {
            // Avoid to accumulate "close", "reboot", etc...
            return null;
        }
        ctx.abort = true;
        ctx.reason = this._getCloseReason(params.reason, reboot);
        if(ctx.diagnoses.length === 0 && (!ctx.reason || ctx.reason.length === 0)){
            defMess = localize.getMessage(this._session.cdIsoLang, "12");
            ctx.diagnoses.push(util.makeDiagnosis(this._session.getlabel("error", "3", defMess), 3, "sap.Controller._replyAbortClose()", "3", util.backOfficeNice));
        }
        else {
            defMess = localize.getMessage(this._session.cdIsoLang, "11");
            ctx.diagnoses = ctx.diagnoses.unshift(util.makeDiagnosis(this._session.getlabel("error", "4", defMess) + " :\n " + ctx.reason || "", 3, "sap.Controller._replyAbortClose()", "4", util.backOfficeNice));
        }
        return null;
    },

    _replyAbortReboot: function(params, ctx, categorie, reply){
        return this._replyAbortClose(params, ctx, categorie, reply, true);
    },

    isSapReply: function(reply) {
        return _.find(_sapAuto, function(rule) {return this.hasOwnProperty(rule.root);}, reply) != undefined ? true : false;
    },

    _parseReply: function(reply, workingCtx, rules){
        var next = true, i = 0, params, status = null, len = rules.length;
        while(next && i < len) {
            if(reply[rules[i].root] && (params = (rules[i].catg ? reply[rules[i].root][rules[i].catg] : reply[rules[i].root]))) {
                params = (rules[i].id ? (rules[i].subid ? (params[rules[i].id] ? params[rules[i].id][rules[i].subid] : null) : params[rules[i].id]) : params);
                if(params) {
                    status = this[rules[i].exec](params, workingCtx, reply[rules[i].root][rules[i].catg], reply);
                    next = rules[i].end ? false : rules[i].next;
                    // Check execution status
                    if (status && (!status.ok || status.brk)) {
                        next = false;
                    }
                }
            }
            if (next && (!status || status.ok)) {
                i++;
            }
        }
        if(i >= len) {
            next = true;
            _.each(rules, function(item) {
                next = next ? item.next : false;
            });
            if(!next){
                // At least one rule doesn't have a "next" rule! So, we register a parsing error.
                if(!status) {
                    status = {"diagnoses": []};
                }
                else if(!status.diagnoses) {
                    status.diagnoses = [];
                }
                status.ok = false;
                status.diagnoses.push(util.makeDiagnosis(this._session.getlabel("error", "5", "Last message sent by server does not contain\"end\" rule."), 3, "sap.Controller._parseReply().\n Reply received :\n" + reply, "5", util.cltFusionNice));
            }
        }
        return status;
    },

    _stubSessClose: function(params, parseCtx, categorie, reply, reboot) {
        this._sapActivity.stop = (new Date()).getTime();
        /*this.getSiteController().triggerAdx("sap.sess." + reboot ? "reboot" : "close", {"target": this,
            "type": reboot ? "reboot" : "close", "data": params});*/
        var siteController = this.getSiteController(), logger = this.getlogger();
        if (parseCtx && parseCtx._techReply && parseCtx._techReply.replyComplete) {
            parseCtx._techReply.replyComplete();
            delete parseCtx._techReply.replyComplete;
        }
        if(logger) {
            logger.debug({"severety": "info"}, "Connexion closed. Reason : " + this._getCloseReason(params.reason, reboot));           
        }
        setTimeout(function(){siteController.onSapCompleted();}, 20);
        return null;
    }, 

    _stubSessReboot: function(params, parseCtx, categorie, reply) {
        return this._stubSessClose(params, parseCtx, categorie, reply, true);
    }, 

    _stubSessSets: function(params, parseCtx) {
        if(parseCtx.syraPageModel){
            return null;
        }
        this._session.updateSettings(params);
        return null;
    }, 

    _stubSessOpen: function(params, parseCtx) {
        if(parseCtx.syraPageModel){
            return null;
        }
        // TODO: Open new session (secondary...). Notify hoster ?!?
        return null;
    }, 

    _stubSrvopRequest: function(params, parseCtx) {
        if(parseCtx.syraPageModel){
            return null;
        }
        // TODO
        return null;
    }, 

    _stubWinClose: function(params, parseCtx, func) {
        var self = this, paramsSorted;
        if(parseCtx.syraPageModel){
            return null;
        }
        // Sort "close" clause in order to process the top stack windows first
        paramsSorted = params.sort(function(a, b) {return (b.charCodeAt(0) - a.charCodeAt(0));});
        _.each(paramsSorted, function(winId){
            var id;
            if(!this._wndwsStack.shouldDiscardCloseOpen(winId, func.open)) {
                this._wndwsStack.unStack(winId);
                // TODO : control "unStack" return code ?!?
            }
            else {
                // So, remove "open" clause in reply, and cleanup win data!!
                id = (self._wndwsStack._getWinIdEx(winId)).id;
                delete func.open[id];
                self._wndwsStack.razWinData(id);
                if((Object.keys(func.open)).length == 0) {
                    delete func.open;
                }
            }
        }, this);   
        return null;
    }, 

    _stubWinOpen: function(params, parseCtx, func, reply) {
        var winId = null, ret = null, nextWin = null, self = this, loadParams;
        if(!parseCtx.syraPageModel) {
            // Init : sort "open" clause in order to process low stack windows first
            parseCtx.syraPageModel = {};
            parseCtx.win2Process = {"id": 0};
            parseCtx.wndwsId = _.keys(params).sort(function(a, b) {return (a.charCodeAt(0) - b.charCodeAt(0));});
        }
        if(parseCtx.wndwPending){
            // If built window pending, register this window
            winId = parseCtx.wndwsId[parseCtx.wndwPending.id];
            this._wndwsStack.stack(winId, params[winId], parseCtx.syraPageModel);
            this._wndwsStack.postBuildInit(winId);
            // Release
            delete parseCtx.wndwPending;
            delete parseCtx.syraPageModel;
            parseCtx.syraPageModel = {};
        }
        if (parseCtx.win2Process) {
            nextWin = parseCtx.wndwsId.length > (parseCtx.win2Process.id + 1) ? (parseCtx.win2Process.id + 1) : null;
            parseCtx.wndwPending = {"id": parseCtx.win2Process.id};
            winId = params[parseCtx.wndwsId[parseCtx.win2Process.id]];
            (nextWin ? parseCtx.win2Process.id = nextWin : delete parseCtx.win2Process);
            loadParams = _.defaults(this._getLoadRepParams(winId), {"id": parseCtx.wndwsId[parseCtx.wndwPending.id], "name": winId.name, "mainPage": !!(this._wndwsStack.length() === 0)});
            this._siteController.loadRepresentation(loadParams, null, 
                function (page){
                    // Apply reply
                    parseCtx.syraPageModel = page;
                    self.processReply(reply, parseCtx);
                    // Need to display an other tab than the default one?
                    if(winId.scrnNum && winId.scrnNum > 1) {
                        self._wndwsStack.showWinTab(loadParams.id, winId.scrnNum);
                    }
                },
                function (error){
                    var diagnoses = util.makeDiagnosis(self._session.getlabel("error", "10", "Unexpected error retrieving window description on web server : ") + " [" + winId.name + "].\n" + self._session.getlabel("error", "26", "The expected function could not be opened. Please, contact your system administrator if the issue persists."), 3, null, "10", util.cltFusionNice, null, null, util.getDiagnosesFromAjax(error, self._session));
                    self._sapException(reply, diagnoses, {"typ": "RqstSrv", "act": requestActions.getSrvAction("SRV_ABANDON"), "param": {"ist": null, "v": ""}}, error, null, parseCtx && parseCtx._techReply ? parseCtx._techReply.replyComplete : null);
                },
                function (representation){
                    // Extend prototype with dynamic model and layout
                    var specialWin = sapUtil.isSpecialWin(winId.name);
                    if(!specialWin) {                   
                        self._wndwsStack.setWinMenu(loadParams.id, loadParams.$facet || representation.$prototype.$x3facet, winId["mnu"], (syraUtil.getProtoFromPage(representation) || representation));
                    }
                    else if(specialWin.id == sapUtil.specialWindow.choose.id && winId.appendModel) {
                        // Need to extend choose proto to set choose window list items sent by server... and before must sort list items! 
                        self._appendChooseModel(representation, winId.appendModel);
                    }
                },
                winId.stamp.replace(/[:\/\-\s]/g, "")
            );
            ret = {"brk": true, "ok": true};
        }
        return ret;
    },

    _stubSetPrevValue: function(params, parseCtx, prev, reply) {
        // Previous value : http://syracuse/w/index.php/Request_Reply_Fusion#sap.previous
        if (this._isValueChanged(params) || !sapUtil.cmpIst(prev, this.getTargetIstFromReply(reply), true)) {
            this.forceValue(params, false);
        }
        return null;
    },

    _stubActs: function(actions) {
        // Action activation : http://syracuse/w/index.php/Request_Reply_Fusion#sap.acts
        return this._wndwsStack.setActionsState(actions);
    },
    
    _stubSetWins: function(params) {
        var ret = null, retEx = {};
        _.each(params, function(data, winId) {
            retEx[winId] = this._wndwsStack.applyChange(winId, data);
        }, this);
        _.each(retEx, function(diagnoses, winId) {
            if (diagnoses){
                // TODO : check return code ==> ret = ...
            }
        }, this); 
        // TODO: deal with stat Bar and win title? => get New Statbar info on current displayed Window, if changes, to notify hoster...
        return ret;
    }, 

    _stubSapMisc: function(params) {
        var ret = null, retEx = {};
        _.each(params, function(data, typ){
            if(_sapK.stubMisc[typ]) {
                retEx[typ] = this[_sapK.stubMisc[typ]](data);
            }
        }, this);   
        _.each(retEx, function(diagnoses, task) {
            if (diagnoses){
                // TODO : check return code ==> ret = ...
            }
        }, this); 
        return ret;
    }, 

    _stubSapCallReply: function(params) {
        return this._ackcallStack.dispatchReply(params);
    }, 

    _stubSapTarget: function(params, parseCtx) {
        var status = null, callNotify = parseCtx && parseCtx._techReply ? parseCtx._techReply.replyComplete : null;
        if(params.type && _sapK.stubTarget[params.type] && this[_sapK.stubTarget[params.type]]) {
            // Pre-ope TODO

            // Process
            status = this[_sapK.stubTarget[params.type]](params[params.type], callNotify);
            if((!status || !status.notifyCalled) && callNotify) {
                callNotify();
            }
            if(status) {
                delete status.notifyCalled;
                if(!status.hasOwnProperty("ok")) {
                    status.ok = true;
                }
            }
        }
        else {
            status = {"ok": false, "diagnoses" : [util.makeDiagnosis(this._session.getlabel("error", "6", "Unable to set the focus because the target type is not defined in the message server response."), 3, "sap.Controller._stubSapTarget()", "6", util.cltFusionNice)]};
        }
        if(callNotify) {
            delete parseCtx._techReply.replyComplete;
        }
        return status;
    }, 

    _stubSapMisc_help: function(params) {
        // Open Help dialog : http://syracuse/w/index.php/Request_Reply_Fusion#sap.misc.help
        return null;
    }, 

    _stubSapMisc_openf: function(params) {
        // Open web page in a new tab : http://syracuse/w/index.php/Request_Reply_Fusion#sap.misc.openf
        window.open(params[0] + "://" + params[1], "_blank");
        return null;
    }, 

    _stubSapTarget_ist: function(params, replyCompleteCallback) {
        // Set focus on sap instance : http://syracuse/w/index.php/Request_Reply_Fusion#sap.target.ist
        var ret = null, self = this, dispfmtErrMess = false, isEvilInst = this._initNewCurrIst(params);
        if (isEvilInst) {
            return ret;
        }
        // Check control/format status
        if (params.ctrlFailed && dispfmtErrMess) {
            // Display message
            ret = _dispFmtErrBox(params, self, replyCompleteCallback);
        }
        else {
            // Set focus on new instance
            if(!params.ctrlFailed && this._isValueChanged(params)) {
    			this.forceValue(params, true);
            }
            ret = this._wndwsStack.setFocus(params.win, params.ctrlFailed ? sapUtil.focusStyle.fmtErr.code : sapUtil.focusStyle.std.code, params.xid, params.nl || 1, (params.edit === null || params.edit === undefined ? true : params.edit), params);
            if(ret && ret.ok && ret.srvAct) {
                if(replyCompleteCallback) {
                    replyCompleteCallback();
                }
                setTimeout( function(){
                    (self.getSiteController()).postSapRqst(requestActions.getSrvAction(ret.act), ret.params);
                }, 50);
                ret.notifyCalled = true;
            }
            else if(ret && !ret.ok) {
                // TODO....
                ret = {"???": "TODO"};
            }
            // If instance does not exist : champ suivant + traité cas de bouclage sur même instance  : close!
            // + Cas de bouclage dans MF tableau (Cf. code client ligne 2301 de messages.cpp)
        }
        return ret;
    }, 

    _stubSapTarget_box: function(params, replyCompleteCallback) {
        // Open messageBox : http://syracuse/w/index.php/Request_Reply_Fusion#sap.target.box
        var boxOpts = msgBox.getMsgBoxOpts(params), self = this;
        boxOpts.callback = function(resp, closureMode) {
            var data = sapUtil.getObjFieldValue(msgBox.getMsgBoxRet(resp, closureMode, params), sapUtil.fieldModeType.show);
            data.ist = null;
            if(replyCompleteCallback) {
                replyCompleteCallback();
            }
            (self.getSiteController()).postSapRqst(requestActions.getSrvAction("SRV_CHAMP_SUIVANT"), data);
        };
        setTimeout(function(){syraUtil.msgBox(boxOpts);}, 50);
        return {"notifyCalled": true};
    }, 

    _stubSapTarget_rpc: function(params, replyCompleteCallback) {
        // Remote procedure call : http://syracuse/w/index.php/Request_Reply_Fusion#sap.target.rpc
        var self = this, errReply, isEvilIst = params.ist ? this._initNewCurrIst(params.ist) : false, obj = null;
        function ackRpc(result) {
            result.notModified = true;
            if(replyCompleteCallback) {
                replyCompleteCallback();                
            }
            (self.getSiteController()).postSapRqst(requestActions.getSrvAction("SRV_RESI", {"reply": result}));
        }
        if(isEvilIst) {
            // Nothing... bypass!
            return null;
        }
        if (this._rpcCall) {
            this._rpcCall.dispose();
        }
        this._rpcCall = new Rpc.RemoteCall();
        obj = params.ist === null || params.ist === undefined || params.ist.length == 0 ? undefined : this._wndwsStack.getBoundField(params.ist.win, params.ist.xid);
        errReply = this._rpcCall.initialize(this, params, obj, ackRpc);
        if (!errReply){
            setTimeout(function(){self._rpcCall.exec();}, 50);
        }
        else {
            setTimeout(function(){ackRpc(errReply)}, 50);
        }
        return {"notifyCalled": true};
    }, 

    _stubSapTarget_askui: function(params, replyCompleteCallback) {
        // Process Askui : http://syracuse/w/index.php/Request_Reply_Fusion#sap.target.askui
        var askuiStub = new Askui.AskuiStub();
        askuiStub.initialize(params);
        return null;
    }, 

    _stubSapTarget_selpr: function(params, replyCompleteCallback) {
        // Process printer configuration : http://syracuse/w/index.php/Request_Reply_Fusion#sap.target.selpr
        var printerAccess = new Printer.PrinterAccess();
        printerAccess.initialize(params);
        return null;
    },

    _stubSapTarget_portal: function(params, replyCompleteCallback) {
        // Display portal : http://syracuse/w/index.php/Request_Reply_Fusion#sap.target.portal
        var siteController = this.getSiteController();
        setTimeout(function(){siteController.onSapUIHidden();}, 20);
        return null;
    },

   _sapException: function(reply, diagnoses, recovery, localContext, messCallback, replyCompleteCallback){
        var self = this, boxOpts, boxParams, logger = this.getlogger();
        var err7 = localize.getMessage(this._session ? this._session.cdIsoLang : null, "9"), err8 = localize.getMessage(this._session ? this._session.cdIsoLang : null, "10");
        if(this._session) {
            err7 = this._session.getlabel("error", "7", err7);
            err8 = this._session.getlabel("error", "8", err8);
        }
        diagnoses = diagnoses || util.makeDiagnosis(err7, 4, "sap.Controller._sapException()", "7");
        boxParams = util.diagnosesToOurErrEx(diagnoses);
        msgBox.setMsgBoxDefaultProp(boxParams, 4, 180, err8, err7);
        boxOpts = msgBox.getMsgBoxOpts.call(this, boxParams);
        boxOpts.callback = function(resp, closureMode) {
            if (replyCompleteCallback) {
                replyCompleteCallback();
            }
            msgBox.releaseMsgBoxParams(boxOpts);
            msgBox.releaseBoxParams(boxParams);
            if(recovery && recovery.typ) {
                if(messCallback) {
                    messCallback();
                }
                self["_sapRecovery" + recovery.typ](reply, recovery);
                return true;
            }
            else {
                // TODO : Unrecovered error?... how to know if session is always available?         
                return messCallback ? messCallback() : true;
            }
        };
        if(logger) {
            logger.debug({"severety": "error"}, "Error notification from 'sapController._sapException()'. Stack and diagnoses below :");
            logger.debug({"toJson": true},  diagnoses);
        }
        setTimeout(function(){syraUtil.msgBox(boxOpts);}, 50);
    },

    _sapRecoveryRqstSrv: function(reply, recovery){
        (this.getSiteController()).postSapRqst(recovery.act, recovery.param);
    },

    _appendChooseModel: function(winProto, chooseModel){
        var j, i = 0, listProps, listPropsSorted = [], listPropsSorted2, listPropsSortedEx = {}, self = this;
        if((listProps = syraUtil.geChooseLstPropFromProperties(chooseModel))) {
            listPropsSorted = Object.keys(listProps);
            for (j = 0, i = listPropsSorted.length; j < i; j++) {
                listPropsSortedEx[listPropsSorted[j]] = listProps[listPropsSorted[j]];
                delete listProps[listPropsSorted[j]];
            }
            listPropsSorted2 = listPropsSorted.sort(function(left, right) {
                var colIdL = parseInt(sapUtil.getFieldId(left), 10), colIdR =  parseInt(sapUtil.getFieldId(right), 10);
                return colIdL - colIdR;
            });
            for (j = 0; j < i; j++) {
                listProps[listPropsSorted2[j]] = listPropsSortedEx[listPropsSorted2[j]];
            }
            syraUtil.appendProto(syraUtil.get$FromPage(winProto), chooseModel, function (obj, key, value) {
                self._addChooseProperty(obj, key, value);
            });
        }
    },

    _addChooseProperty: function (obj, key, value) {
        var fmt = null;
        if (key == "tit") {
            obj.$title = value;
        }
        else if (key == "fmt") {
            fmt = new FieldFormatter();
            obj.$type = fmt.getSyraTypeFromFormat(value);
            obj.$capabilities = "sort,filter";
        }
    },

    buildAckCallRqst: function(rqst, target, callParams, isFunc){
        return this._ackcallStack.buildRequest(rqst, target, callParams, isFunc);
    },

    dispose: function(){
        if(this._wndwsStack){
            this._wndwsStack.dispose();
            delete this._wndwsStack;
        }
        if(this._ackcallStack){
            this._ackcallStack.dispose();
            delete this._ackcallStack;
        }
        if(this._siteController){
            delete this._siteController;
        }
        if(this._session){
            delete this._session;
        }
    }
});