"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview  Remote Procedure Call management (Funciu/Calliu)
 */
var helpers = require('syracuse-core/lib/helpers');
var http = require("/syracuse-ui/lib/controller/httpController");

var _KerrDefCode = {
    "errn": {
        "ok": 0,
        "unknown": 1,
        "internalException": 2,
        "methodNotExist": 3,
        "noDesc": 4,
        "objetcNotFound": 5,
        "notyetImplemented": 6,
        "reserved": 7
    },
    "errt": {
        "ok": 0,
        "internal": 1,
        "component": 2
    }
};
var _stdCallDef = {
    "XDT_ECLI": {
        "openSRC": {
            "proto": {},
            "stub": function(agent, keys, values){
                var map = {
                    src: "filename"
                };
                try {
                    // TODO: get host information from the values but how to guess them?
                    var host = {
                        name: "localhost",
                        port: 5493
                    }, url = "http://" + host.name + ":" + host.port + "/sdata/safex3/studio/-/$service/openInEditor?", key, i, m, params = [];
                    if (keys && values) {
                        // keys=[folder,server,port,src,readonly,trace,x.lang,x.user,x.pwd,x.osuser,x.ospwd]
                        m = Math.max(keys.length, values.length);
                        for (i = 0; i < m; i++) {
                            key = keys[i];
                            if (key.substring(0, 2) === "x.") {
                                key = key.substring(2);
                            }
                            key = map[key] || key;
                            values[i] && params.push(key + "=" + values[i]);
                        }
                    }
                    url += params.join("&");
                    var httpQuery = http.parseUrl(url);
                    httpQuery.sendCorsRequest();
                    return {
                        v: "200 OK",
                        typ: "STRU"
                    };
                } 
                catch (e) {
                    throw new rpcCustomErr(_KerrDefCode.errn.internalException, _KerrDefCode.errt.internal, e.message);
                }
            }
        },
        "setIDERights": {
            "proto": {},
            "stub": null
        }
    },
    "XDT_CLT": {
        "TEST1": {
            "proto": {},
            "stub": function(strg, arrayStrg, arrayInt){
                arrayStrg[0] = "0: " + arrayStrg[0] + " --> Modified";
            }
        }
    },
    "XDT_OFFICE": {
        "SETLINK": {
            "proto": {},
            "stub": function(){
                return _stubOfficeExtCall(this._hoster, "SETLINK", arguments);
            }
        }
    }
};

function _getCallArgs(){
    var args = null, i = 0, tabs, len;
    if (!Array.isArray(arguments)) {
        tabs = (Object.keys(arguments)).sort();
        args = [];
        for (i = 0, len = tabs.length; i < len; i++) {
            args[i] = arguments[tabs[i]];
        }
    }
    return args || arguments;
}

function _stubOfficeExtCall(controller, method, args){
    var ret, argsCall;
    try {
        argsCall = _getCallArgs.apply({}, args);
        ret = controller.stubOfficeExternalCall.apply(controller, [method].concat(argsCall));
        return {
            v: ret ? 1 : 0,
            typ: "INT"
        };
    } 
    catch (e) {
        throw new rpcCustomErr(_KerrDefCode.errn.internalException, _KerrDefCode.errt.internal, e.message);
    }
}

function rpcCustomErr(errn, errt, mess){
    this.errn = errn;
    this.errt = errt;
    if (mess) {
        this.message = mess;
    }
}

helpers.defineClass(rpcCustomErr, Error, {});

function RemoteCall(){
}

exports.RemoteCall = helpers.defineClass(RemoteCall, null, {
    initialize: function(hoster, call, object, hosterAck){
        var callJson = call ? call.json : null, i;
        this._hoster = hoster;
        this._ack = hosterAck;
        this.inputArgs = null;
        this._callArgs = [];
        this._nbArgs = 0;
        this._object = object;
        this._internalMethod = object === undefined ? true : false;
        this._dbgInf = {
            "execduration": 0,
            "totalduration": (new Date()).getTime(),
            "exceptiondetail": null,
            "trace": null
        };
        this._dbgFlags = {
            "execD": false,
            "totlaD": false,
            "trace": false,
            "exception": false
        };
        try {
            if (callJson) {
                this._method = callJson.spgm;
                if (callJson.debugFlags) {
                    this._dbgFlags.execD = callJson.debugFlags.execduration;
                    this._dbgFlags.totlaD = callJson.debugFlags.totalduration;
                    this._dbgFlags.exception = callJson.debugFlags.exceptiondetail;
                    this._dbgFlags.trace = callJson.debugFlags.trace;
                }
                if (callJson.params) {
                    this.inputArgs = callJson.params;
                    for (i = 0, this._nbArgs = callJson.params.length; i < this._nbArgs; i++) {
                        if (callJson.params[i].resu && callJson.params[i].resu.length > 0) {
                            this._callArgs.push(callJson.params[i].dim > 1 ? callJson.params[i].resu : callJson.params[i].resu[0]);
                        }
                        else {
                            this._callArgs.push(callJson.params[i].dim > 1 ? [] : undefined);
                        }
                    }
                }
                return null;
            }
            else {
                return this.getErrReply({
                    "code": _KerrDefCode.errn.noDesc
                });
            }
        } 
        catch (e) {
            this._dbgInf.exceptiondetail = e.stack;
            return this.getErrReply({
                "code": _KerrDefCode.errn.internalException,
                "message": e.message,
                "errt": _KerrDefCode.errt.internal
            });
        }
    },
    
    getErrReply: function(err){
        return this._serializeReply(null, null, err);
    },
    
    exec: function(opts){
        var ret, reply = null, internalMethod, internalComponent, temp, asyncCall = false;
        try {
            if (this._internalMethod) {
                temp = this._method.split(":");
                if (temp.length < 1 || !(internalComponent = _stdCallDef[temp[0]])) {
                    reply = this.getErrReply({
                        "code": _KerrDefCode.errn.objetcNotFound,
                        "errt": _KerrDefCode.errt.internal
                    });
                }
                else 
                    if (temp.length < 2 || !(internalMethod = internalComponent[temp[1]]) || !internalMethod.stub) {
                        reply = this.getErrReply({
                            "code": _KerrDefCode.errn.methodNotExist,
                            "errt": _KerrDefCode.errt.internal
                        });
                    }
                    else {
                        try {
                            ret = this._execObjMethod(this, internalMethod.stub, this._callArgs, asyncCall);
                        } 
                        catch (e) {
                            this._dbgInf.exceptiondetail = e.stack;
                            reply = this.getErrReply({
                                "code": e.errn || 2,
                                "line": 130,
                                "message": e.message,
                                "errt": e.errt || _KerrDefCode.errt.component
                            });
                        }
                    }
            }
            else {
                if (!this._object) {
                    reply = this.getErrReply({
                        "code": _KerrDefCode.errn.objetcNotFound,
                        "errt": _KerrDefCode.errt.internal
                    });
                }
                else 
                    if (!this._object[this._method]) {
                        reply = this.getErrReply({
                            "code": _KerrDefCode.errn.methodNotExist,
                            "errt": _KerrDefCode.errt.internal
                        });
                    }
                    else {
                        try {
                            ret = this._execObjMethod(this._object, this._object[this._method], this._callArgs, asyncCall);
                        } 
                        catch (e) {
                            this._dbgInf.exceptiondetail = e.stack;
                            reply = this.getErrReply({
                                "code": e.errn || 2,
                                "line": 147,
                                "message": e.message,
                                "errt": e.errt || _KerrDefCode.errt.component
                            });
                        }
                    }
            }
            // TODO : improve ret type value + args modified detection
            if (!reply) {
                this._dbgInf.execduration = (new Date()).getTime() - this._dbgInf.execduration;
            }
            this._ack(reply || this._serializeReply(ret, this._getModifiedArgs()));
        } 
        catch (e) {
            this._dbgInf.exceptiondetail = e.stack;
            this._ack(this.getErrReply({
                "code": _KerrDefCode.errn.internalException,
                "message": e.message,
                "errt": _KerrDefCode.errt.internal
            }));
        }
        finally {
            return asyncCall;
        }
    },
    
    _execObjMethod: function(object, method, args, asyncCall){
        // TODO : improve call asynchrone or synchrone?! 
        this._dbgInf.execduration = (new Date()).getTime();
        return method.apply(object, args);
    },
    
    _getModifiedArgs: function(){
        var i, ouputParams = null, j, len;
        if (this._nbArgs > 0 && this._callArgs.length > 0) {
            ouputParams = [];
            /* for (i = 0; i < this._nbArgs; i++) {
             // TODO : test + improve...
             if(this.inputArgs[i].dim > 1) {
             for (j = 0, len = this._callArgs.length; j < len; j++) {
             // TODO : check modif.... +++ remove "todo" et 999 ack...
             ouputParams.push({"num": i, "poste": j, "typ": this.inputArgs[i].typ, "resu": this.inputArgs[i].typ == "STRU" ? ("todo_" + i + "-" + j) : 999});
             }
             }
             else {
             if(((!this.inputArgs[i].resu || this.inputArgs[i].resu.length == 0) && this._callArgs[i] != undefined) || this._callArgs[i] !== this.inputArgs[i].resu[0]){
             ouputParams.push({"num": i, "poste": 0, "typ": this.inputArgs[i].typ, "resu": this._callArgs[i]})
             }
             }
             }*/
        }
        return ouputParams;
    },
    
    _serializeReply: function(result, argsModified, err){
        var reply = {
            "json": {
                "spgm": this._method
            }
        };
        reply.json.params = argsModified && argsModified.length > 0 ? argsModified : undefined;
        reply.json.result = this._serializeErr(err, !!(!err));
        reply.json["return"] = result ? {
            "resu": result.v,
            "typ": result.typ
        } : {
            "typ": "NULL",
            "resu": null
        };
        reply.json.debugInfos = this._serializeDbgInfo();
        return reply;
    },
    
    _serializeErr: function(err, ok){
        var errn, errt, line, message;
        if (err && !ok) {
            errn = err.code != undefined && err.code != null ? err.code : _KerrDefCode.errn.unknown;
            message = err.message != undefined && err.message != null ? err.message : null;
            line = err.line != undefined && err.line != null ? err.line : 0;
            errt = err.errt != undefined && err.errt != null ? err.errt : _KerrDefCode.errt.internal;
            if (errt == _KerrDefCode.errt.internal && this._hoster.getMessLabel) {
                message = this._hoster.getMessLabel(errn + 54, "error") + (message ? (" : " + message) : "");
            }
            return {
                "errp": this._method,
                "errn": errn,
                "errm": message,
                "errt": errt,
                "errl": line
            };
        }
        else 
            if (ok) {
                return {
                    "errp": this._method,
                    "errn": _KerrDefCode.errn.ok,
                    "errm": "",
                    "errt": _KerrDefCode.errt.ok,
                    "errl": 0
                };
            }
        return undefined;
    },
    
    _serializeDbgInfo: function(){
        this._dbgInf.execduration = this._dbgFlags.execD ? this._dbgInf.execduration : undefined;
        this._dbgInf.totalduration = this._dbgFlags.totlaD ? (new Date()).getTime() - this._dbgInf.totalduration : undefined;
        if (!this._dbgFlags.trace) {
            this._dbgInf.trace = undefined;
        }
        if (!this._dbgFlags.exception) {
            this._dbgInf.exceptiondetail = undefined;
        }
        return this._dbgInf;
    },
    
    dispose: function(){
        delete this._hoster;
        delete this._ack;
        delete this.inputArgs;
        if (this._object) {
            delete this._object;
        }
    }
});
