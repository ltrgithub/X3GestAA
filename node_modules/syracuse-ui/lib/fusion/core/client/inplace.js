"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Client Site main class
 */
var helpers = require('syracuse-core/lib/helpers');
var Controller = require('syracuse-ui/lib/fusion/core/client/controller').Controller;
var Session = require('syracuse-ui/lib/fusion/core/client/session').Session;
var util = require('syracuse-ui/lib/fusion/tools/util');
var utilBis = require('syracuse-ui/lib/fusion/tools/utilFdb');
var sap = require('syracuse-ui/lib/fusion/core/client/sap/controller');
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var localize = require('syracuse-ui/lib/fusion/tools/localize').localize;
var msgBox = require('syracuse-ui/lib/fusion/core/client/sap/msgbox');
var requestActions = require('syracuse-ui/lib/fusion/core/client/sap/srvactions');

var _KforceCloseTag = "forceClosed", _kSvrtSuccess = "success", _kSvrtError = "error";


function FusionInPlaceSite(){
}

exports.FusionSite = helpers.defineClass(FusionInPlaceSite, null, {
    create: function(uuid, hoster, opts){
        var syraUserLocalPref;
        this.uuid = uuid;
        this._hoster = hoster;
        this.controller = null;
        this._session = null;
        this._opts = opts || {};
        this._initDisconnectRules();
        this.cdIsoLang = (syraUserLocalPref = syraUtil.getUserLocalPref()) && syraUserLocalPref.code || localize.defLang;
        document[sapUtil._fNS] = document[sapUtil._fNS] || {};
        document[sapUtil._fNS].log = document[sapUtil._fNS].log || util.getLog(util.getDefaultLogSwitches(null, null, true));
    },
    
    _initDisconnectRules: function() {
        var i, len, array, item;
        this._disconnectCtrlOrdered = [];
        this._disconnectCtrlMap = {
            "connecting": {"rnk": 1, "mess": "49", "messForce": "50", "check": function () {return false;}, "forceClose": this.free},
            "closed": {"rnk": 2, "mess": "36", "messForce": "36", "check": function () {return false;}, "reason": "alreadyClosed", "coerceSt": _kSvrtSuccess, "forceClose": this.free},
            "closePending": {"rnk": 3, "mess": "37", "messForce": "46", "check": function () {return false;}, "forceClose": this.free},
            "jobPending": {"rnk": 4, "mess": "38", "messForce": "45", "check": function () {return true;}, "release": function () {return true;}, "forceClose": this.emergencyCltClose}
        };
        array = Object.keys(this._disconnectCtrlMap);
        for (i = 0, len = array.length; i < len; i++) {
            item = this._disconnectCtrlMap[array[i]];
            if(item.rnk > 0) {
                this._disconnectCtrlOrdered[item.rnk - 1] = array[i];
            }
            if(!item.reason) {
                item.reason = array[i];
            }
        }
    },

    connect: function(httpQuery, onError){
        var self = this, _elapse = utilBis.getTimer(true), _srvDuration, ourAjaxErr;
        try {
            httpQuery.noDisplayErr = true;
            if (!this._fixtureMode(httpQuery, onError)) {
                this._hoster.controller._postQuery(httpQuery, null, this._hoster.site, function($location, reply){
                    var logger;
                    httpQuery.$urlParts.params = httpQuery.$urlParts.params || {};
                    _srvDuration = _elapse.inter();
                    self._bootStrap(httpQuery, $location, sap.getSessSetsFromReply(reply), reply, sap.getsrvOptsFromReply(reply), {
                        "cdIsoLang": self.cdIsoLang
                    }, onError);
                    logger = self._getLogger();
                    logger.timer(null, "Connection duration : total [" + _elapse.elapsedMs() + "], with ajax [" + _srvDuration + "] and local [" + (_elapse.elapsedMs() - _srvDuration) + "]");
                }, function(err){
                    if ((ourAjaxErr = util.isOurAjaxErrEx(err))) {
                        self._ourConnectError(ourAjaxErr, onError);
                    }
                    else {
                        onError({
                            "$diagnoses": util.getDiagnosesFromAjax(err, self.cdIsoLang)
                        });
                    }
                });
            }
        } 
        catch (ex) {
            onError({
                "$diagnoses": [util.makeDiagnosis(localize.getMessage(this.cdIsoLang, "1") + " 'client.FusionInPlaceSite.connect()' : " + ex.message, 4, ex.stack, "01", util.cltFusionNice)]
            });
        }
    },

    disconnect: function(callback, timeout, force){
        // Check all rules : Close Pending? closed? asynchrone jobs? etc...?
        var self = this, check, i, messCode, rule, ruleName = null, len, post, diagnosis = null, logger = self._getLogger();
        logger.trace({"severety": "warn"}, "External disconnection processing...\n\t\treason : " + (timeout ? "timeout" : "logout or close") + ", force mode : " + (force ? "true" : false));
        function callBackEx(diag) {
            var mess = null;
            if(callback) {
                if(self._session && diag.appCode) {
                    mess = self._session.getlabel("error", diag.appCode);
                }
                if (!mess) {
                    mess = diag.severity == _kSvrtSuccess ? "Disconnection processed succesfully" : "En error occured during disconnection process. Woul you like to hard kill your connection?";
                }
                diag.message = mess;
                logger.trace({"severety": "warn"}, "External disconnection processed.\n\t\tResult : " + (diag.severity === _kSvrtSuccess ? "succeeded" : "failed") + ", reason : " + diag.$details);
                callback(diag);
            }
        }
        if(this._disposed || !this.controller) {
            diagnosis = util.makeDiagnosis("", _kSvrtSuccess, null, "36", null, force ? _KforceCloseTag : this._disconnectCtrlMap.closed.reason);
         }
        else {
            for (i = 0, len = this._disconnectCtrlOrdered.length; i < len; i++) {
                rule = this._disconnectCtrlMap[this._disconnectCtrlOrdered[i]];
                if(rule.check() && (!force || (force && rule.release && !rule.release()))) {
                    messCode = force ? (rule.messForce || "48") : (rule.mess || "47"); 
                    diagnosis = util.makeDiagnosis("", force ? _kSvrtSuccess : (rule.coerceSt !== undefined ? rule.coerceSt : _kSvrtError), null, messCode, null, force ? _KforceCloseTag : rule.reason);
                    ruleName = this._disconnectCtrlOrdered[i];
                    break;
                }
            }
        }
        if(diagnosis && (force || diagnosis.severity == _kSvrtSuccess)) {
            if(this.controller && !this._disposed && this._disconnectCtrlMap[ruleName].forceClose) {
                this._disconnectCtrlMap[ruleName].forceClose.call(this, diagnosis.$details);
            }
            callBackEx(diagnosis);
            return;
        }
        if(diagnosis) {
            callBackEx(diagnosis);
        }
        else {
            post = {
                "exposeReply": true,
                "callback": function (reply) {
                    var diagnosis = util.makeDiagnosis("", _kSvrtSuccess, null, "39", null, "closeDone"), ok = true;
                    if(!self.controller._sapController.isEndSessReply(reply)) {
                        diagnosis = util.makeDiagnosis("", _kSvrtError, null, "40", null, "closeRefused");
                        ok = false;
                    }
                    if(ok) {
                        setTimeout(function(){callBackEx(diagnosis);}, 100);
                    }
                    else{
                        if(force) {
                            self.free(_KforceCloseTag);
                            callBackEx(util.makeDiagnosis("", _kSvrtSuccess, null, "41", null,_KforceCloseTag));
                        }
                        else {
                            callBackEx(diagnosis);
                        }
                    }
                },
                "onErrCallBack": function(reply) {
                    var diagnosis = util.makeDiagnosis("", _kSvrtError, null, "42", null, "closeRefused");
                    if(force) {
                        self.emergencyCltClose();
                        diagnosis = util.makeDiagnosis("", _kSvrtSuccess, null, "41", null, _KforceCloseTag);
                     }
                    callBackEx (diagnosis);
                },
                "onSvcPendingCallback": function() {
                    var diagnosis = util.makeDiagnosis("", _kSvrtError, null, "43", null, "rqstPending");
                    if(force) {
                        self.free(_KforceCloseTag);
                        diagnosis = util.makeDiagnosis("", _kSvrtSuccess, null, "44", null, _KforceCloseTag);
                    }
                    callBackEx(diagnosis);
                }
            };
            // TODO : Ajouter opts pour indiquer non validant au niveau des ctrls locaux
            this.controller.postSapRqst(requestActions.getSrvAction(!timeout ? "SRV_FIN_APPLI" : "SRV_TIMEOUTSESS"), null, post, {"forceChain": true, "noValidation": true});
        }
    },

    _getLogger:  function() {
        var logger = this.controller ? this.controller.getLogger() : null;
        return logger || document[sapUtil._fNS].log;
    },

    _ourConnectError: function(ourAjaxErr, hosterOnError){
        // Unlucky, emergency exit... never mind!!
        var boxOpts, boxParams;
        boxParams = util.diagnosesToOurErrEx(util.makeDiagnosesFromOurAjaxErrEx(ourAjaxErr));
        msgBox.setMsgBoxDefaultProp(boxParams, 4, 180);
        boxOpts = msgBox.getMsgBoxOpts.call(this, boxParams);
        boxOpts.callback = function(resp, closureMode){
            msgBox.releaseMsgBoxParams(boxOpts);
            msgBox.releaseBoxParams(boxParams);
            util.releaseOurAjaxErrEx(ourAjaxErr);
            hosterOnError();
        };
        setTimeout(function(){
            syraUtil.msgBox(boxOpts);
        }, 50);
    },
    
    _bootStrap: function(httpQuery, rqstLocation, sessSettings, statements, srvOpts, localOpts, onError){
        try {
            // Normally, the connexion is now established...
            (this.controller = new Controller()).initialize(this, srvOpts, localOpts);
            (this._session = new Session()).initialize(sessSettings, httpQuery, localOpts, srvOpts);
            sap.cleanInitialReply(statements);
            this.controller.onStart(httpQuery, rqstLocation, this._session, statements, function(err, data){
                if (err) {
                    onError({
                        "$diagnoses": err
                    });
                }
            }, localOpts);
        } 
        catch (ex) {
            onError({
                "$diagnoses": [util.makeDiagnosis(localize.getMessage(this.cdIsoLang, "1") + " 'client.FusionInPlaceSite._bootStrap()' : " + ex.message + ".\n" + localize.getMessage(this.cdIsoLang, "2"), 4, ex.stack, "01", util.cltFusionNice)]
            });
        }
    },

    emergencyCltClose: function(){
        if(this.controller) {
            this.controller.onSapCloseEmergency();
        }
    },

    getHosterController: function(){
        return this._hoster.controller;
    },
    
    getHosterSite: function(){
        return this._hoster.site;
    },
    
    getHosterInstance: function(){
        return this._hoster.instance;
    },
    
    free: function(reason){
        var hosterCtrl = this.getHosterController(), hosterInst = this.getHosterInstance();
        if(hosterCtrl && hosterCtrl.fusionGateway && hosterInst) {
            hosterCtrl.fusionGateway.closeBook(hosterInst);
        }
        else {
            this.dispose();
        }
    },
    
    onActivate: function(state){
    },
    
    _fixtureMode: function(requester, onError){
        // Retrieve test data
        var fixture = false, self = this;
        document.syraXTestX = {};   // TODO : How to resolve stub location? 
        if (!document.syraXTestX) {
            (this._hoster.controller.parseUrl("/sdata/x3stb/erp/stubs/fusion-testdata")).sendRequest(null, function(data){
                document.syraXTestX = data;
            }, function(err){
                void (0);
            });
        }
        // Fixture mode
        if (requester.$urlParts.params && requester.$urlParts.params.d == "on" && requester.$urlParts.params.r) {
            (this._hoster.controller.parseUrl("/sdata/x3stb/erp/stubs/" + requester.$urlParts.params.r)).sendRequest(null, function(reply){
                requester.$urlParts.params = requester.$urlParts.params || {};
                self._bootStrap(requester, null, sap.getSessSetsFromReply(reply.r0), reply.r0, sap.getsrvOptsFromReply(reply.r0), {
                    "fixture": {
                        "on": true,
                        "reply": reply,
                        "next": 1,
                        "hash": "r"
                    }
                }, onError);
            }, function(err){
                onError({
                    "$diagnoses": util.getDiagnosesFromAjax(err, self._session)
                }, err);
            });
            fixture = true;
        }
        return fixture;
    },
    
    dispose: function(){
        if(this._disposed) {
            return;
        }
        if (this._session) {
            this._session.dispose();
        }
        if (this.controller) {
            this.controller.dispose();
        }
        if (this._hoster) {
            _.each(this._hoster, function(prop){
                delete this[prop];
            }, this._hoster);
            delete this._hoster;
        }
        if (this._opts) {
            delete this._opts;
        }
        this._disposed = true;
    }
});
