"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Client Site main class
 */
var helpers = require('syracuse-core/lib/helpers');
var Controller = require('syracuse-ui/lib/fusion/core/client/controller').Controller;
var Session = require('syracuse-ui/lib/fusion/core/client/session').Session;
var util = require('syracuse-ui/lib/fusion/tools/util');
var sap = require('syracuse-ui/lib/fusion/core/client/sap/controller');

function FusionInPlaceSite(){
}

exports.FusionSite = helpers.defineClass(FusionInPlaceSite, null, {
    create: function(uuid, $$container, hoster, opts){
        this.uuid = uuid;
        this._$$container = $$container;
        this._hoster = hoster;
        this.controller = null;
        this._session = null;
        this._opts = opts || {};
    },
    
    connect: function(httpQuery, onError){
        var self = this;
        try {
            httpQuery.noDisplayErr = true;
            if (!this._fixtureMode(httpQuery, onError)) {
                this._hoster.controller._postQuery(httpQuery, null, this._hoster.site, function($location, reply){
                    httpQuery.$urlParts.params = httpQuery.$urlParts.params || {};
                    self._bootStrap(httpQuery, $location, sap.getSessSetsFromReply(reply), reply, sap.getsrvOptsFromReply(reply), null, onError);
                });
            }
        } 
        catch (ex) {
            onError({
                "$diagnoses": [util.makeDiagnosis("Unexpected error : " + ex.message + "\n" + ex.stack || null, 4, ex.stack)]
            });
        }
    },
    
    disconnect: function(reason, callback){
    },

    _bootStrap: function(httpQuery, rqstLocation, sessSettings, statements, srvOpts, localOpts, onError){
        try {
            (this.controller = new Controller()).initialize(this, srvOpts, localOpts);
            (this._session = new Session()).initialize(sessSettings, httpQuery);
            sap.cleanInitialReply(statements);
            this.controller.onStart(httpQuery, rqstLocation, this._session, statements, function(err, data){
                if (err) {
                    onError({
                        "$diagnoses": err
                    });
                }
            }, localOpts);
        } 
        catch (ex) {
            // TODO : Notify srv X3web if possible!! 
            onError({
                "$diagnoses": [util.makeDiagnosis("Unexpected error : " + ex.message + "\n" + ex.stack || null, 4, ex.stack)]
            });
        }
    },
    
    getHosterController: function(){
        return this._hoster.controller;
    },
    
    getHosterSite: function(){
        return this._hoster.site;
    },
    
    getHosterInstance: function(){
        return this._hoster.instance;
    },
    
    free: function(reason){
        (this.getHosterController()).fusionGateway._releaseBook(this.getHosterInstance());
    },
     
    onActivate: function(state){
    },

    _fixtureMode: function(requester, onError){
        // Retrieve test data
        var fixture = false, self = this;
        if (!document.syraXTestX) {
            (this._hoster.controller.parseUrl("/sdata/x3stb/erp/stubs/fusion-testdata")).sendRequest(null, function(data){
                document.syraXTestX = data;
            }, function(err){
                void (0);
            });
        }
        // Fixture mode
        if (requester.$urlParts.params && requester.$urlParts.params.d == "on" && requester.$urlParts.params.r) {
            (this._hoster.controller.parseUrl("/sdata/x3stb/erp/stubs/" + requester.$urlParts.params.r)).sendRequest(null, function(reply){
                requester.$urlParts.params = requester.$urlParts.params || {};
                self._bootStrap(requester, null, sap.getSessSetsFromReply(reply.r0), reply.r0, sap.getsrvOptsFromReply(reply.r0), {
                    "fixture": {
                        "on": true,
                        "reply": reply,
                        "next": 1,
                        "hash": "r"
                    }
                }, onError);
            }, function(err){
                onError({
                    "$diagnoses": util.getDiagnosesFromAjax(err)
                }, err);
            });
            fixture = true;
        }
        return fixture;
    },
    
    dispose: function(){
        if (this._session) {
            this._session.dispose();
            delete this._session;
        }
        if (this.controller) {
            this.controller.dispose();
            delete this.controller;
        }
        if (this._hoster) {
            _.each(this._hoster, function(prop){
                delete this[prop];
            }, this._hoster);
            delete this._hoster;
        }
        if (this._$$container) {
            delete this._$$container;
        }
        if (this._opts) {
            delete this._opts;
        }
    }
});
