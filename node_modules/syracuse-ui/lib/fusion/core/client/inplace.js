"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Convergence Client Site main class
 */
var helpers = require('syracuse-core/lib/helpers');
var Controller = require('syracuse-ui/lib/fusion/core/client/controller').Controller;
var Session = require('syracuse-ui/lib/fusion/core/client/session').Session;
var util = require('syracuse-ui/lib/fusion/tools/util');
var utilBis = require('syracuse-ui/lib/fusion/tools/utilFdb');
var sap = require('syracuse-ui/lib/fusion/core/client/sap/controller');
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var localize = require('syracuse-ui/lib/fusion/tools/localize').localize;
var msgBox = require('syracuse-ui/lib/fusion/core/client/sap/msgbox');
var requestActions = require('syracuse-ui/lib/fusion/core/client/sap/srvactions');

var _KforceCloseTag = "forceClosed", _kSvrtSuccess = "success", _kSvrtError = "error";


function FusionInPlaceSite(){
}

exports.FusionSite = helpers.defineClass(FusionInPlaceSite, null, {
    create: function(uuid, hoster, opts){
        var syraUserLocalPref;
        this.uuid = uuid;
        this._hoster = hoster;
        this.controller = null;
        this._session = null;
        this._opts = opts || {};
        this._initDisconnectRules();
        this._startTime = new Date();
        this._freeExStatements = null;
        this.cnxStatus = {"current": sapUtil.cnxStatus.unestablished, "history": sapUtil.cnxStatus.unestablished};
        this.cdIsoLang = (syraUserLocalPref = syraUtil.getUserLocalPref()) && syraUserLocalPref.code || localize.defLang;
        document[sapUtil._fNS] = document[sapUtil._fNS] || {};
        document[sapUtil._fNS].log = document[sapUtil._fNS].log || util.getLog(util.getDefaultLogSwitches(null, null, true));
    },
    
    _initDisconnectRules: function() {
        var i, len, array, item;
        this._disconnectCtrlOrdered = [];
        this._disconnectCtrlMap = {
            "connecting": {"rnk": 1, "mess": "49", "messForce": "50", "check": this.checkCnxStatus, "checkArgs": [sapUtil.cnxStatus.establishing, null, true], "forceClose": this.emergencyCltClose},
            "closed": {"rnk": 2, "mess": "36", "messForce": "36", "check": this.checkCnxStatus, "checkArgs": [sapUtil.cnxStatus.closedByClt, false], "reason": "alreadyClosed", "coerceSt": _kSvrtSuccess, "forceClose": this.free},
            "closePending": {"rnk": 3, "mess": "37", "messForce": "46", "check": this.checkCnxStatus, "checkArgs": [sapUtil.cnxStatus.closing, null, true], "forceClose": this.emergencyCltClose},
            "jobPending": {"rnk": 4, "mess": "38", "messForce": "45", "check": this._isJobsPending, "release": this._releaseJobsPending, "forceClose": this.emergencyCltClose}
        };
        array = Object.keys(this._disconnectCtrlMap);
        for (i = 0, len = array.length; i < len; i++) {
            item = this._disconnectCtrlMap[array[i]];
            if(item.rnk > 0) {
                this._disconnectCtrlOrdered[item.rnk - 1] = array[i];
            }
            if(!item.reason) {
                item.reason = array[i];
            }
        }
    },

    updtCnxStatus: function(newStatus) {
        this.cnxStatus.current = newStatus;
        this.cnxStatus.history |= newStatus;
    },

    _getCnxStatusHistory: function() {
        var strg = ["initialized"], stK = sapUtil.cnxStatus, sortedArray, array1 = Object.keys(stK), array2= [], i, len = array1.length;
        for (i = 0; i < len; i++) {
            array2[i] = {"id": array1[i], "val": stK[array1[i]]};
        }
        sortedArray = array2.sort(function(a, b) {return (a.val - b.val);});
        for (i = 0; i < len; i++) {
            if(this.cnxStatus.history & sortedArray[i].val) {
                strg.push(sortedArray[i].id); 
            }
        }
        return strg.join("-");
    },

    checkCnxStatus: function(checkStatus, isGreater, isEgual) {
        if(isGreater !== null) {
            return isGreater ? checkStatus > this.cnxStatus.current : checkStatus <= this.cnxStatus.current;
        }
        else {
            return this.cnxStatus.current === checkStatus;
        }
    },

    connect: function(httpQuery, onError){
        var self = this;
        try {
            (this.controller = new Controller()).initialize(this, httpQuery);
            this.updtCnxStatus(sapUtil.cnxStatus.establishing);
            if(this._fixtureMode(httpQuery, onError)) {
                return;
            }
            this.controller.postCnxpRqst({"settings": {}},
                function($location, reply){
                    self._bootStrap(httpQuery, $location, sap.getSessSetsFromReply(reply), reply, sap.getsrvOptsFromReply(reply), {"cdIsoLang": self.cdIsoLang}, onError);
                },
                function(err, isInternalErr){
                    var ourAjaxErr;
                    if (!isInternalErr && (ourAjaxErr = util.isOurAjaxErrEx(err))) {
                        self._ourConnectError(ourAjaxErr, onError);
                    }
                    else {
                        onError({"$diagnoses": isInternalErr ? err : util.getDiagnosesFromAjax(err, self.cdIsoLang)});
                    }
                }
            );
        } 
        catch (ex) {
            onError({"$diagnoses": [util.makeDiagnosis(localize.getMessage(this.cdIsoLang, "1") + " 'client.FusionInPlaceSite.connect()' : " + ex.message, 4, ex.stack, "01", util.cltFusionNice)]});
        }
    },

    connectObsolete: function(httpQuery, onError){
        // TODO : to remove!
        var self = this, _elapse = utilBis.getTimer(true), _srvDuration, ourAjaxErr;
        httpQuery.sendData = {"settings": {}};
        try {
            (this.controller = new Controller()).initialize(this, httpQuery);
            httpQuery.noDisplayErr = true;
            this.updtCnxStatus(sapUtil.cnxStatus.establishing);
            if (!this._fixtureMode(httpQuery, onError)) {
                this._hoster.controller._postQuery(httpQuery, null, this._hoster.site, function($location, reply){
                    var logger;
                    httpQuery.$urlParts.params = httpQuery.$urlParts.params || {};
                    delete httpQuery.sendData;
                    _srvDuration = _elapse.inter();
                    self._bootStrap(httpQuery, $location, sap.getSessSetsFromReply(reply), reply, sap.getsrvOptsFromReply(reply), {
                        "cdIsoLang": self.cdIsoLang
                    }, onError);
                    logger = self._getLogger();
                    logger.timer(null, "Connection duration : total [" + _elapse.elapsedMs() + "], with ajax [" + _srvDuration + "] and local [" + (_elapse.elapsedMs() - _srvDuration) + "]");
                }, function(err){
                    if ((ourAjaxErr = util.isOurAjaxErrEx(err))) {
                        self._ourConnectError(ourAjaxErr, onError);
                    }
                    else {
                        onError({
                            "$diagnoses": util.getDiagnosesFromAjax(err, self.cdIsoLang)
                        });
                    }
                });
            }
        } 
        catch (ex) {
            onError({
                "$diagnoses": [util.makeDiagnosis(localize.getMessage(this.cdIsoLang, "1") + " 'client.FusionInPlaceSite.connect()' : " + ex.message, 4, ex.stack, "01", util.cltFusionNice)]
            });
        }
    },

    disconnect: function(callback, timeout, force, noNavOnClose){
        // Check all rules : Close Pending? closed? asynchrone jobs? etc...?
        var self = this, check, i, messCode, rule, ruleName = null, len, post, diagnosis = null, logger = self._getLogger();
        function mkDiag(severity, appCode, reason) {
            var mess;
            try {
                mess = self._session && appCode ? self._session.getlabel("error", appCode) : null;
            }
            catch(e) {
                mess = null;
            }
            if (!mess) {
                mess = severity == _kSvrtSuccess ? "Disconnection processed succesfully" : "En error occured during disconnection process. Woul you like to hard kill your connection?";
            }
            return util.makeDiagnosis(mess, severity, null, appCode, null, reason);
        }
        function callBackEx(diag) {
            if(callback) {
                logger.trace({"severety": "warn"}, "External disconnection processed.\n\t\tResult : " + (diag.severity === _kSvrtSuccess ? "succeeded" : "failed") + ", reason : " + diag.$details);
                self._noNavOnClose = diag.severity === _kSvrtSuccess ? noNavOnClose : false;
                callback(diag);
            }
        }
        function onSapErrorClosing(diagError, forceClose, messForce) {
            var _diag;
            delete self._freeExStatements;
            if(forceClose) {
                _diag = mkDiag(_kSvrtSuccess, messForce, _KforceCloseTag);
                self._noNavOnClose = noNavOnClose;
                self._freeExStatements = function () {callBackEx(_diag);};
                setTimeout(function(){self.emergencyCltClose();}, 10);
            }
            else {
                setTimeout(function(){callBackEx(diagError);}, 10);
            }
        }
        logger.trace({"severety": "warn"}, "External disconnection processing...\n\t\treason : " + (timeout ? "timeout" : "logout or close") + ", force mode : " + (force ? "true" : false));
        delete this._freeExStatements;
        if(this._disposed || !this.controller) {
            diagnosis = mkDiag(_kSvrtSuccess, "36", force ? _KforceCloseTag : this._disconnectCtrlMap.closed.reason);
        }
        else {
            for (i = 0, len = this._disconnectCtrlOrdered.length; i < len; i++) {
                rule = this._disconnectCtrlMap[this._disconnectCtrlOrdered[i]];
                if(rule.check.apply(this, rule.checkArgs || []) && (!force || (force && rule.release && !rule.release.call(this)))) {
                    messCode = force ? (rule.messForce || "48") : (rule.mess || "47"); 
                    diagnosis = mkDiag(force ? _kSvrtSuccess : (rule.coerceSt !== undefined ? rule.coerceSt : _kSvrtError), messCode, force ? _KforceCloseTag : rule.reason);
                    ruleName = this._disconnectCtrlOrdered[i];
                    break;
                }
            }
        }
        if(diagnosis && (force || diagnosis.severity == _kSvrtSuccess)) {
            if(this.controller && !this._disposed && this._disconnectCtrlMap[ruleName].forceClose) {
                this._noNavOnClose = noNavOnClose;
                this._freeExStatements = function () {callBackEx(diagnosis);};
                this._disconnectCtrlMap[ruleName].forceClose.call(this, diagnosis.$details);
            }
            return;
        }
        if(diagnosis) {
            callBackEx(diagnosis);
        }
        else {
            diagnosis = mkDiag(_kSvrtSuccess, "39", "closeDone");
            this._freeExStatements = function () {callBackEx(diagnosis);};
            this._noNavOnClose = noNavOnClose;
            post = {
                "exposeReply": true,
                "callback": function (reply) {
                    var _diagnosis;
                    if(!self.controller._sapController.isEndSessReply(reply)) {
                        _diagnosis = mkDiag(_kSvrtError, "40", "closeRefused");
                        onSapErrorClosing(_diagnosis, force, "41");
                    }
                },
                "onErrCallBack": function(reply) {
                    var _diagnosis = mkDiag(_kSvrtError, "42", "closeRefused");
                    onSapErrorClosing(_diagnosis, force, "41");
                },
                "onSvcPendingCallback": function() {
                    var _diagnosis = mkDiag(_kSvrtError, "43", "rqstPending");
                    onSapErrorClosing(_diagnosis, force,"44");
                 }
            };
            // TODO : Ajouter opts pour indiquer non validant au niveau des ctrls locaux
            this.controller.postSapRqst(requestActions.getSrvAction(!timeout ? "SRV_FIN_APPLI" : "SRV_TIMEOUTSESS"), {"notModified": true, "v": null}, post, {"discardCtrl": true, "forceChain": true});
        }
    },

    _getLogger:  function() {
        var logger = this.controller ? this.controller.getLogger() : null;
        return logger || document[sapUtil._fNS].log;
    },

    _ourConnectError: function(ourAjaxErr, hosterOnError){
        // Unlucky, emergency exit... never mind!!
        var boxOpts, boxParams;
        boxParams = util.diagnosesToOurErrEx(util.makeDiagnosesFromOurAjaxErrEx(ourAjaxErr));
        msgBox.setMsgBoxDefaultProp(boxParams, 4, 180);
        boxOpts = msgBox.getMsgBoxOpts.call(this, boxParams);
        boxOpts.callback = function(resp, closureMode){
            msgBox.releaseMsgBoxParams(boxOpts);
            msgBox.releaseBoxParams(boxParams);
            util.releaseOurAjaxErrEx(ourAjaxErr);
            hosterOnError();
        };
        setTimeout(function(){syraUtil.msgBox(boxOpts);}, 50);
    },
    
    _bootStrap: function(httpQuery, rqstLocation, sessSettings, statements, srvOpts, localOpts, onError){
        try {
            // Normally, the connexion is now established...
            this.sid = srvOpts && srvOpts.sessionInfo && srvOpts.sessionInfo.sid;
            (this._session = new Session()).initialize(sessSettings, httpQuery, localOpts, srvOpts);
            this.controller.postInit(httpQuery, this._session, srvOpts, localOpts);
            this.controller.onStart(rqstLocation, statements, function(err, data){
                if(err) {
                    onError({"$diagnoses": err});
                }
            }, localOpts);
        } 
        catch (ex) {
            onError({"$diagnoses": [util.makeDiagnosis(localize.getMessage(this.cdIsoLang, "1") + " 'client.FusionInPlaceSite._bootStrap()' : " + ex.message + ".\n" + localize.getMessage(this.cdIsoLang, "2"), 4, ex.stack, "01", util.cltFusionNice)]});
        }
    },

    isRequestPending: function(){
       return this.controller ? this.controller.isRqstPending() : false;
    },

    _isJobsPending: function(){
        return this.controller && this.controller.asynchronousJobs ? this.controller.asynchronousJobs.isJobsPending() : false;
    },

    _releaseJobsPending: function(){
        return this.controller && this.controller.asynchronousJobs ? this.controller.asynchronousJobs.releaseAllAsyncJobs(null, true) : false;
    },

    emergencyCltClose: function(reason, additionalSess){
        var logger = this._getLogger();
        if(logger) {
            logger.trace({"severety": "warn"}, "Emmergency close session for client " + this.uuid);          
        }
        if(this.controller) {
            this.controller.onSapCloseEmergency(additionalSess);
        }
        else {
            this.free();
        }
    },

    getHosterController: function(){
        return this._hoster.controller;
    },
    
    getHosterSite: function(){
        return this._hoster.site;
    },
    
    getHosterInstance: function(){
        return this._hoster.instance;
    },
    
    free: function(reason){
        var site= this.getHosterSite(), hosterInst = this.getHosterInstance(), logger = this._getLogger();
        this.updtCnxStatus(sapUtil.cnxStatus.released);
        if(site && site.fusionGateway && hosterInst) {
			site.fusionGateway.closeBook(hosterInst, this._noNavOnClose);
        }
        else {
            this.dispose();
        }
        logger.trace({"severety": "info"}, "Client " + this.uuid + " started at " + this._startTime.toUTCString() + ", is now released (" + (new Date()).toUTCString() + ").\n\tHistoty : " + this._getCnxStatusHistory());
        if (this._freeExStatements) {
            this._freeExStatements();
            delete this._freeExStatements;
            logger.trace({"severety": "info"}, "Client " + this.uuid + " : processed post free statements");
        }
    },
    
    onActivate: function(state){
    },
    
    _fixtureMode: function(requester, onError){
        // Retrieve test data
        var fixture = false, self = this;
        document.syraXTestX = {};   // TODO : How to resolve stub location? 
        if (!document.syraXTestX) {
            (this._hoster.controller.parseUrl("/sdata/x3stb/erp/stubs/fusion-testdata")).sendRequest(null, function(data){
                document.syraXTestX = data;
            }, function(err){
                void (0);
            });
        }
        // Fixture mode
        if (requester.$urlParts.params && requester.$urlParts.params.d == "on" && requester.$urlParts.params.r) {
            (this._hoster.controller.parseUrl("/sdata/x3stb/erp/stubs/" + requester.$urlParts.params.r)).sendRequest(null, function(reply){
                requester.$urlParts.params = requester.$urlParts.params || {};
                self._bootStrap(requester, null, sap.getSessSetsFromReply(reply.r0), reply.r0, sap.getsrvOptsFromReply(reply.r0), {
                    "fixture": {"on": true, "reply": reply, "next": 1, "hash": "r"}}, onError);
            }, function(err){
                onError({
                    "$diagnoses": util.getDiagnosesFromAjax(err, self._session)
                }, err);
            });
            fixture = true;
        }
        return fixture;
    },
    
    dispose: function(){
        if(this._disposed) {
            return;
        }
        if (this._session) {
            this._session.dispose();
        }
        if (this.controller) {
            this.controller.dispose();
        }
        if (this._hoster) {
            _.each(this._hoster, function(prop){
                delete this[prop];
            }, this._hoster);
            delete this._hoster;
        }
        if (this._opts) {
            delete this._opts;
        }
        this._disposed = true;
    }
});
