"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Site controller
 */


var helpers = require('syracuse-core/lib/helpers');
var SapController = require('syracuse-ui/lib/fusion/core/client/sap/controller').Controller;
var util = require('syracuse-ui/lib/fusion/tools/util');
var syraUtil = require('./sap/util').Syra;
var sapUtil = require('./sap/util').Fusion;
var EventManager = require('./evtmanager').EventManager;
var requestActions = require('./sap/srvactions');

var _evtHandlingModules = {
    "tabs": require('./eventhandling/tabs').TabsEventHandling,
    "list": require('./eventhandling/list').ListEventHandling,
    "link": require('./eventhandling/link').LinkEventHandling,
    "grid": require('./eventhandling/grid').GridEventHandling,
    "win": require('./eventhandling/window').WindowEventHandling
};
var _rqstSvc = {
    "sap": {"proxy": "sapHttpSvc", "method": "PUT", "subUrl": "requestSvc", "contentType": "application/json"},
    "print": {"proxy": "printHttpSvc", "method": "PUT", "subUrl": "print", "contentType": "application/json"}
};

function Controller(){
}

exports.Controller = helpers.defineClass(Controller, EventManager, {
    _initRqstSvcs: function(rqstHttpLoc){
        _.each(_rqstSvc, function(value, key){
            this[value.proxy] = {};
            this[value.proxy].noDisplayErr = true;
            this[value.proxy].method = value.method || "POST";
            this[value.proxy].$location = util.duplicateObj(rqstHttpLoc);
            this[value.proxy].$location.$method = this[value.proxy].method;
            this[value.proxy].$location.$url = rqstHttpLoc.$url + "/" + value.subUrl;
            this[value.proxy].$location.$type = value.type || rqstHttpLoc.$type || "application/json";
            this[value.proxy].$location.$contentType = value.contentType || rqstHttpLoc.$contentType || "application/json";
        }, this);      
    },

	isFixtureMode:function(){
		return this._localOpts.fixture;
	},
	
    _sendRequest: function(svc, data, queryString, onSuccess, onError){
        // TODO : trace, stat, etc...
        var qs = null;
        if(this._localOpts.fixture) {
            if(this._localOpts.fixture.on && this._localOpts.fixture.reply[this._localOpts.fixture.hash + this._localOpts.fixture.next]) {
                onSuccess(this._localOpts.fixture.reply[this._localOpts.fixture.hash + this._localOpts.fixture.next++]);
            }
            return;
        }
        qs = this[svc.proxy].$location.$url.indexOf("?");
        (qs >=0 ? this[svc.proxy].$location.$url = this[svc.proxy].$location.$url.substr(0, qs) : void(0));
        (queryString && queryString.length > 0 ? this[svc.proxy].$location.$url += ("?" + queryString) : void(0));
        if(this[svc.proxy].data) {
            delete this[svc.proxy].data;
        }
        this[svc.proxy].data = data || null;
        this._hosterController.sendRequest(null, this[svc.proxy], onSuccess, onError);
    },
    
    sendSapRqst: function(action, params, post){
        var self = this, data = self._sapController.getRequestData("", action, params);
        this._sendRequest(_rqstSvc.sap, data, "act=" + action, 
            function(data, response) {
                self._sapController.processReply(data);
                if(post && post.callback && sapUtil.cmpIst(params.target, sapUtil.getTargetIstFromReply(data))){
                    post.callback.apply(this, post.callback.args);
                }
                if(post && post.callback) {
                    delete post.callback;
                }
                // TODO : check error...
            },
            function(error) {
               self._sapController._sapException(null, util.getDiagnosesFromAjax(error), null, error);
            }
        );
    },

    initialize: function(site, srvOpts, localOpts){
        // Misc init
        this._site = site;
        this._session = null;
        this.httpQuery = null;
        this._localOpts = localOpts || {};
        this._hosterController = this._site.getHosterController();
        (this._sapController = new SapController()).initialize(this, srvOpts);
        // Init internal event handling
        EventManager.prototype.initialize.call(this, _evtHandlingModules, ["sap", "ui"], {"controller": this, "sapController": this._sapController, "siteUUID": this._site.uuid});
        this.evtManagerComplete();
        // Bind controller listeners
        this._bindListeners();
    },

    _bindListeners: function(){
        this.bind("sap.win.unstacked", (this._site.getHosterInstance()).closeSheet, false, true, this._site.getHosterInstance());

        // TODO : just for tests... remove!
        this.addGlobalListeners(function (event){console.log ("**Event '" + event._name + "' fired");});
     },

    _unbindListeners: function(){
        this.unbind("sap.win.unstacked", this._site.getHosterInstance());
    },

    onStart: function(httpQuery, rqstLocation, session, statements, notifyCallBack){
        if (rqstLocation) {
            this._initRqstSvcs(rqstLocation);
        }
        this._session = session;
    	if(!statements) {
			notifyCallBack([util.makeDiagnosis(session.getlabel("error", "2", "Who is talking to me?"), 4, "client.Controller.onStart()", "2")]);
    	}
    	else if(this._sapController.isSapReply(statements)){
            this.httpQuery = httpQuery;
    		this._sapController.onInitialReply(statements, notifyCallBack);
    	}
    	else {
    		// TODO : Who is talking to me... hoster Shell?
            notifyCallBack([util.makeDiagnosis(session.getlabel("error", "2", "Who is talking to me?"), 4, "client.Controller.onStart()", "2")]);
    	}
    },

    onSapUIHidden: function(){
        // Sap client is now attached to the "portal" Window (i.e level 0)
        this._site.free("hidden");
    },

    onSapCompleted: function(){
        // Sap client has been closed by the back-office.
        this._site.free("closed");
    },

    loadRepresentation: function(representation, article, success, error, customProto){
        var self = this, hosterSite = this._site.getHosterSite(), hosterInstance = this._site.getHosterInstance();
        this.httpQuery.$urlParts.params.representation = representation.name + ".$fusion";
        this._hosterController.loadRepresentation(article, this.httpQuery, function($itemPage){
            $itemPage.$autoFetch = false;
            $itemPage.onPageLoaded = success;
            $itemPage.$category = "fusionpage";
            $itemPage.$fusionPageMeta = {"controller": self, "winId": representation.id};
            $itemPage.$urlParts.$facet = "$fusion_$edit"; // TODO ==> change to "$fusionMDI"...
            debugger;
			$itemPage.externalAdapter = hosterInstance;
			success(hosterInstance.loadSheet($itemPage));
        }, error, customProto);
    },

    getSession: function(){
        return this._session;
    },

    trigger: function(event, object){
        // Note : trigger return 'false' if at least one handler has explicitly processed the event.
        var succeded = true, intercepted = false, evtDomain = this.getEvtName(event);
        evtDomain = evtDomain.substring(0, evtDomain.indexOf(".")); 
        // Standard control : only for "local" and "widget" event domain.
        if(evtDomain == "lcl" || evtDomain == "wdgt") {
            // TODO
            succeded = true;      
        }
        // Call handler
        if(succeded) {
            intercepted = EventManager.prototype.trigger.apply(this, arguments);
            // Process result
            if(intercepted !== undefined)
            {
                if(object.result && object.result.diagnoses)
                {
                    // Display diagnoses
                }
                else if (object.result && object.result.$act && object.result.$act > requestActions.srvActionStart) {
                    // Process action : TODO :  depend on action plage > 1024 = sap ou < ==> Local...
                    this.sendSapRqst(object.result.$act, object.result.params, object.result.post);
                }
            }
        }       
        return (!succeded || (intercepted !== undefined && intercepted)) ? false : true;
    },

    dispose: function(){
        if (this.httpQuery){
             delete this.httpQuery;
        }
        if (this._sapController){
            this._sapController.dispose();
            delete this._sapController;
        }
        if (this._session){
             delete this._session;
        }
        _.each(_rqstSvc, function(value, key){
            if (this[value.proxy] && this[value.proxy].data) {
                delete this[value.proxy].data;
            }
        }, this);
        this._unbindListeners();      
        EventManager.prototype.dispose.call(this);
        if (this._site){
             delete this._site;
        }
    }
});