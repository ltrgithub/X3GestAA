"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Client Session management
 */

var helpers = require('syracuse-core/lib/helpers');
var httpController = require("syracuse-ui/lib/controller/httpController");
var util = require('syracuse-ui/lib/fusion/tools/util');
var sapUtil = require('./sap/util').Fusion;
var syraUtil = require('./sap/util').Syra;
var localize = require('syracuse-ui/lib/fusion/tools/localize').localize;
var dateOrderK = require('syracuse-ui/lib/fusion/core/client/sap/format').dateOrderK;
var FormatWrapper = require('syracuse-ui/lib/fusion/core/client/sap/format').FormatterWrapper;

var _staticResConf = {
	"menloc": {
		"wait": true,
		"cache": true,
		"common": false,
		"name": "{cdLang}",
		"srvName": "menloc",
		"srvExt": ".js",
		"srvSubPath": ["GEN", "{cdLang}", "MENL"].join("/")
	},
	"localize": {
		"wait": true,
		"cache": true,
		"common": true,
		"name": "{cdLang}",
		"srvName": "localize",
		"srvExt": ".json",
		"srvSubPath": ["GEN", "{cdLang}", "LIB"].join("/")
	},
	"flashHelp": {
		"wait": false,
		"cache": false,
		"common": true,
		"name": "",
		"srvName": "",
		"srvExt": "",
		"srvSubPath": ["X3CLI", "XBLOCK", "FLASH"].join("/")
	},
	"styleSheet": {
		"wait": true,
		"cache": true,
		"common": false,
		"name": "{styleSheet}",
		"srvName": "{styleSheet}",
		"srvExt": ".json",
		"srvSubPath": ["GEN", "ALL", "STY"].join("/")
	},
	"screen": {
		"cache": false,
		"common": false,
		"name": null,
		"srvName": null,
		"srvExt": ".js",
		"srvSubPath": ["GEN", "ALL", "SCRN"].join("/")
	}
};
var _staticURLTemplate = "{typres}/{res}",
	_fusionNS = sapUtil._fNS;
var _defLang = "ENG";
var _pColorSty = [";color:#000000", ";color:#FF0000", ";color:#00FF00", ";color:#0000FF"];

function Session() {}

exports.Session = helpers.defineClass(Session, null, {
	initialize: function(settings, httpQuery, localOpts, srvOpts) {
		var endpointObj = httpQuery.getEndpoint();
		this.endpointParts = endpointObj ? endpointObj.endpoint.split(endpointObj.sep) : ["x3", "erp", "X3"];
		this.cdLang = settings ? (settings.cdLang || _defLang) : _defLang;
		this.styleSheet = settings ? (settings.ADXStyleFile || "STX_DEFAULT") : "STX_DEFAULT";
		this.cnxDate = settings ? (settings.cnxDate || null) : null;
		this.cdIsoLang = settings && settings.ADXLangIso ? settings.ADXLangIso : (localOpts && localOpts.cdIsoLang ? localOpts.cdIsoLang : localize.defLang);
		this.logger = util.getLog(util.getDefaultLogSwitches(document[_fusionNS], settings));
		this._initSharedRes();
		this._mnu = null;
		this.format = {
			"wrapper": null,
			"formatter": null
		};
		this._loadSettings(settings || {});
		this._srvSessInfo = srvOpts && srvOpts.sessionInfo ? util.duplicateObj(srvOpts.sessionInfo) : {};
		this._useProtoCache = settings && settings.hasOwnProperty(settings.ADXuseLocalProtoCache) ? settings.ADXuseLocalProtoCache : false;
	},

	_loadSettings: function(settings) {
		_.defaults(this.product || (this.product = {}), {
			"code": settings.ADXProduct,
			"theme": settings.ADXTheme,
			"label": settings.ADXProductLabel,
			"labelSuff": settings.ADXProductSuff,
			"labelPref": settings.ADXProductPref
		}, {
			"code": "ADX",
			"theme": "ADX",
			"label": "Syracuse",
			"labelSuff": "",
			"labelPref": ""
		});
		_.defaults(this.bi || (this.bi = {}), {
			"secure": settings.BOSEC,
			"server": settings.BOSERV,
			"user": settings.BOUSR,
			"passord": settings.BOPWD
		}, {
			"secure": "SecEnterprise"
		});
		_.defaults(this.help || (this.help = {}), {
			"type": settings.ADXHelpType,
			"location": settings.ADXHelpLocation,
			"name": settings.ADXHelpName,
			"baseUrl": settings[syraUtil.helpToken.bUrl]
		}, {
			"type": 0,
			"location": "",
			"name": ""
		});
		_.defaults(this.timeout || (this.timeout = {}), {
			"hangup": settings.UITimehangup1,
			"reprieve": settings.UITimehangup2
		}, {
			"hangup": 0,
			"reprieve": 0
		});
		if (!this.setWinSessMnus(settings.mnu)) {
			this._mnu = [];
		}
		this._setRegionalOptions(settings);
		this._setUserInf({
			"lang": this.cdLang,
			"code": settings.user,
			"profile": settings.usrProfile,
			"named": settings.ADXNamedUser && settings.ADXNamedUser == "0" ? false : true
		}, false);
		this._setSplash(settings.splash);
		this._setSrvVersions(settings);
		this._setSrvCnx(settings);
	},

	_setSrvCnx: function(settings) {
		this.srvAdxCnx = {
			"urlPublic": settings.ADXHttpPub,
			"sol": settings.AdxSolution,
			"port": settings.ADXPort,
			"appHost": settings.ADXAppHost,
			"trtHost": settings.ADXTrtHost,
			"folder": settings.ADXFolder,
			"folderForHistory": settings.ADXMaskAppName
		};
	},

	_setRegionalOptions: function(settings) {
		var fmtLocales = {}, regOpts, self = this;
		// Set regional settings
		this.regionalOptions = {
			"date": {},
			"time": {},
			"numeric": {},
			"format": {}
		};
		regOpts = this.regionalOptions;
		_.defaults(regOpts.date, {
			"dateSep": settings.dateSep,
			"dateOrder": settings.dateOrder,
			"datePivot": settings.datePivot,
			"dateFormat": settings.DefaultDateFormat
		}, {
			"dateSep": "/",
			"dateOrder": dateOrderK.MDY,
			"datePivot": 1940,
			"dateFormat": "MM[/]DD[/]YY"
		});
		regOpts.date.months = settings.SetMonthList ? settings.SetMonthList.split(";") : ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
		_.defaults(regOpts.numeric, {
			"decimalSep": settings.decimalSep,
			"thousandSep": settings.thousandSep
		}, {
			"decimalSep": ".",
			"thousandSep": " "
		});
		_.defaults(regOpts.format, {
			"vOn": (settings["formater.von"] && settings["formater.von"] === "on" ? true : false),
			"zOn": (settings.ZOn && settings.ZOn === "1" ? true : false)
		}, {
			"vOn": true,
			"zOn": false
		});
		_.defaults(regOpts.time, {
			"timeSep": settings.timeSep
		}, {
			"timeSep": ":"
		});
		// Formatter creation/initialization
		_.extend(fmtLocales, regOpts.date, regOpts.numeric, regOpts.time);
		this.format.wrapper = new FormatWrapper();
		this.format.formatter = this.format.wrapper.initialize(settings.fmtExt, fmtLocales, this, "cvg", {
			"tracer": function(data) {
				self.logger.trace.apply(self.logger, [{
					"severety": "warn"
				}, "Message from Formatter module :"].concat(Array.prototype.slice.call(arguments)));
			}
		});
	},

	_setSrvVersions: function(settings) {
		this.version = {
			"runtime": {},
			"supervisor": {},
			"product": {}
		};
		this.version.runtime.protocol = settings.Protocol;
		this.version.runtime.vers = settings.Version;
		this.version.supervisor.vers = settings.ADXSupVers;
		this.version.product.tradeVers = settings.ADXProductInfoVers;
		this.version.product.vers = settings.ADXVersion;
		this.version.product.sp = settings.ADXRelease;
		this.version.product.hf = settings.ADXNopatch;
	},

	_setUserInf: function(userInf, update) {
		_.defaults(this.userInf || (this.userInf = {}), (userInf || {}), {
			"lang": _defLang,
			"code": "",
			"profile": "",
			"named": true
		});
		if (update) {
			this.logger.trace({
				"severety": "warn"
			}, "Server sent wrongly user settings modifications!!");
		}
	},

	_setSplash: function(splash) {
		_.defaults(this.splash || (this.splash = {}), (splash || {}), {
			"serial": 0,
			"client": ["", "", "", ""],
			"partner": ["", "", "", ""],
			"validity": ["", ""]
		});
	},

	_changeDate: function(date) {
		if (date.length > 0 && date !== this.cnxDate) {
			this.cnxDate = date;
		}
	},

	_changeStyleSheet: function(styleSheet) {
		var self = this;
		if (styleSheet.length > 0 && styleSheet != this.styleSheet) {
			this.styleSheet = styleSheet;
			this._verifySharedRes();
			setTimeout(function() {
				self._addPcolorSty();
			}, 1500);
		}
	},

	_addPcolorSty: function() {
		var style = this._sharedRes["styleSheet"][this.styleSheet]["$styles"],
			pcStyPref = "$pcolor_",
			i, len;
		if (style) {
			for (i = 0, len = _pColorSty.length; i < len; i++) {
				style[pcStyPref + (20 + i)] = {
					"id": (10000 + i),
					"$css": _pColorSty[i]
				};
			}
		}
	},

	_changeLang: function(cdLang) {
		if (cdLang.length > 0 && cdLang !== this.cdLang) {
			this.cdLang = cdLang;
			this._verifySharedRes();
			this.logger.trace({
				"severety": "warn"
			}, "Server changed session language code!!");
			// TODO : Notify Shell Controller?
		}
	},

	getHelpBaseUrl: function() {
		var urlPart, url = this.help.baseUrl;
		if (!url) {
			urlPart = "{" + syraUtil.helpToken.cat + "}/" + "{" + syraUtil.helpToken.kw + "}";
			if (this.help && this.help.location) {
				url = this.help.location + "/" + this.cdLang + "/" + urlPart + ".htm";
			} else if ((url = this._getHttpQuery("help/" + this.cdIsoLang, urlPart))) {
				url = url.$url;
			}
		}
		return url || "";
	},

	getFlashHelpUrl: function(code) {
		var httpQ = this._getStaticResHttpQuery("flashHelp", code);
		return httpQ ? httpQ.$url : null;
	},

	getSessInfo: function() {
		var sessInfo = {
			"login": {},
			"client": {},
			"version": {},
			"node": {},
			"runtime": {}
		};
		// User
		sessInfo.login.user = syraUtil.getUserName();
		sessInfo.login.lang = this.cdIsoLang + " (" + this.cdLang + ")";
		// Client
		sessInfo.client.endPoint = this.endpointParts;
		sessInfo.client.reused = this._srvSessInfo.reused;
		sessInfo.client.cnxId = this._srvSessInfo.cnxid;
		sessInfo.client.sessId = this._srvSessInfo.sessid;
		// Version
		sessInfo.version = util.duplicateObj(this.version);
		sessInfo.version.node = {};
		// Runtime
		sessInfo.runtime = this._srvSessInfo.runtime || this._srvSessInfo.x3 || {};
		// Node
		sessInfo.node = this._srvSessInfo.node || {};
		return sessInfo;
	},

	isNodeWS: function() {
		return this._srvSessInfo.nodeWS;
	},

	getProdLabel: function() {
		return this.product.label || util.ourCompanyLabel;
	},

	getRegional: function(all, num, date, time, format) {
		var regional = this.regionalOptions;
		return all ? regional : (num ? regional.numeric : (date ? regional.date : (time ? regional.time : (format ? regional.format : {}))));
	},

	updateSettings: function(settings) {
		if (settings.ChangeUserContext) {
			var usrInf = null,
				ctx = settings.ChangeUserContext.split(";"),
				len = ctx.length;
			/*Pattern : "user;cdLang;cdProfile;date"*/
			if (len > 0 && ctx[0].length > 0) {
				usrInf = {
					"code": ctx[0]
				};
			}
			if (len > 1) {
				this._changeLang(ctx[1]);
			}
			if (len > 2 && ctx[0].length > 0) {
				usrInf = _.extend(usrInf || {}, {
					"profile": ctx[2]
				});
			}
			if (len > 3) {
				this._changeDate(ctx[3]);
			}
			if (usrInf) {
				this._setUserInf(usrInf, true);
			}
		}
		if (settings.ADXStyleFile) {
			this._changeStyleSheet(settings.ADXStyleFile);
		}
		if (settings.UISetUsrPasswd) {
			// Nothing special...
		}
	},

	getWinSessMnus: function() {
		return this._mnu;
	},

	setWinSessMnus: function(mnu) {
		var ret = false;
		if (mnu && mnu.length > 0 && (!this._mnu || this._mnu.length == 0)) {
			this._mnu = util.duplicateObj(mnu);
			ret = true;
		}
		return ret;
	},

	getMenloc: function(menLoc) {
		var id = "menloc";
		return (this._checkSharedRes(id, this.cdLang) ? this._sharedRes[id][this.cdLang][menLoc] : null);
	},

	getMenlocValue: function(menloc, rank) {
		var menLoc = this.getMenloc(menloc);
		return (menLoc ? menLoc[rank - 1] : null);
	},

	getStyleClass: function(code) {
		var id = "styleSheet";
		return (this._checkSharedRes(id, this.styleSheet) && this._sharedRes[id][this.styleSheet]["$styles"][code] ? this._sharedRes[id][this.styleSheet]["$styles"][code].$css : null);
	},

	getlabel: function(categorie, labelId, dflt) {
		var id = "localize";
		return (this._checkSharedRes(id, this.cdLang) ? this._sharedRes[id][this.cdLang][categorie][labelId] || dflt || "???" : (dflt || "???"));
	},

	dispose: function() {
		if (this.endpointParts && document[_fusionNS]._sharedRes[this.endpointParts.join(".")]._cRef > 0) {
			// TODO : delete if == 0 ??
			delete this._sharedRes;
			document[_fusionNS]._sharedRes[this.endpointParts.join(".")]._cRef--;
		}
		if (this.version) {
			delete this.version;
		}
		if (this.logger) {
			delete this.logger;
		}
		if (this.format) {
			this.format.wrapper.dispose();
			delete this.format.formatter;
			delete this.format.wrapper;
		}
	},

	_initSharedRes: function() {
		var endpointId = this.endpointParts.join(".");
		document[_fusionNS] = document[_fusionNS] || {};
		document[_fusionNS]._sharedRes = document[_fusionNS]._sharedRes || {};
		if (!document[_fusionNS]._sharedRes[endpointId]) {
			document[_fusionNS]._sharedRes[endpointId] = {
				"_cRef": 0,
				"_pending": {}
			};
			_.each(_staticResConf, function(value, key) {
				if (value.cache) {
					this[key] = {};
				}
			}, document[_fusionNS]._sharedRes[endpointId]);
		}
		this._sharedRes = document[_fusionNS]._sharedRes[endpointId];
		this._verifySharedRes();
		this._sharedRes._cRef++;
	},

	postInitSharedRes: function() {
		var errMessObj = this._sharedRes["localize"][this.cdLang];
		if (!errMessObj.postInitDone) {
			// Complete error message with std bla bla : "if the problem persists, please contact your local IT correspondent..."
			_.each(["2", "3", "7", "17", "18", "23", "26", "27", "29", "67", "69"], function(value) {
				this[value] = this[value] + "\n" + this["30"];
			}, errMessObj["error"]);
			errMessObj.postInitDone = true;
		}
		// Add predefined style for "pcolor"
		this._addPcolorSty();
	},

	_verifySharedRes: function() {
		var name;
		_.each(_staticResConf, function(value, key) {
			name = value.name ? this._parseResExp(value.name) : "";
			if (value.cache && !this._sharedRes[key][name]) {
				this._requestRes(key, name);
			}
		}, this);
	},

	waitSharedRes: function(wait, repeat, callback) {
		var self = this,
			stop = true,
			member = null,
			detail = "",
			code = null;
		_.each(_staticResConf, function(value, key) {
			if (stop && value.cache && value.wait) {
				code = value.name ? this._parseResExp(value.name) : "";
				stop = this._checkSharedRes(key, code);
				member = key;
			}
		}, this);
		if (!stop && repeat > 0) {
			setTimeout(function() {
				self.logger.trace({
					"severety": "warn"
				}, "Waiting shared resources...");
				self.waitSharedRes(wait, --repeat, callback);
			}, wait);
		} else {
			member = this._sharedRes.$resOnErr || (member && code ? this._getResPath(member, code) : null);
			detail = localize.getMessage(this.cdIsoLang, this._sharedRes.$resOnErr ? "7" : "22");
			delete this._sharedRes.$resOnErr;
			code = localize.getMessage(this.cdIsoLang, "8") + (member ? ("\n" + localize.getMessage(this.cdIsoLang, "15") + "'" + member + "'") : "");
			callback(!stop ? [util.makeDiagnosis(code, 3, "client.Controller.waitSharedRes()", "08", util.cltFusionNice, detail)] : null);
		}
	},

	_checkSharedRes: function(member, code) {
		if (this._sharedRes._pending.hasOwnProperty(member + code) && this._sharedRes._pending[member + code]) {
			return false;
		} else {
			return (this._sharedRes._pending.hasOwnProperty(member + code) ? true : false);
		}
	},

	_getResPath: function(member, code) {
		return [this._parseResExp(_staticResConf[member].srvSubPath), _staticResConf[member].srvName ? this._parseResExp(_staticResConf[member].srvName) : code].join("/") + (_staticResConf[member].srvExt || "");
	},

	_requestRes: function(member, code, onSuccess, onError) {
		if (!_staticResConf[member].cache || !this._sharedRes._pending.hasOwnProperty(member + code)) {
			var self = this;
			if (_staticResConf[member].cache) {
				self._sharedRes._pending[member + code] = true;
			}
			(this._getStaticResHttpQuery(member, code)).sendRequest({
				"noDisplayErr": true
			}, !_staticResConf[member].cache ? onSuccess : function(data) {
				if (self._sharedRes) {
					if (self._sharedRes[member][code]) {
						delete self._sharedRes[member][code];
					}
					self._sharedRes[member][code] = data;
					self._sharedRes._pending[member + code] = false;
				}
			}, !_staticResConf[member].cache ? onError : function(error, httpQuery) {
				if (_staticResConf[member].cache && self._sharedRes) {
					if (self._sharedRes[member] && self._sharedRes[member][code]) {
						delete self._sharedRes[member][code];
					}
					self._sharedRes.$resOnErr = httpQuery.$url || httpQuery.url;
					delete self._sharedRes._pending[member + code];
				}
			});
		}
	},

	getWorkFlowUrl: function(wrkflwCtx, options) {
		var httpQuery = this._getHttpQuery([syraUtil.mainPage, "?url=", "/trans"].join(""), ["$sessions", "?f=", wrkflwCtx].join(""));
		return httpQuery.$url;
	},

	_parseResExp: function(expr) {
		var compute = null,
			matches, property, self = this;
		if (expr.indexOf("{") >= 0) {
			compute = expr;
			matches = expr.match(/(\{.*?\})/g);
			matches.forEach(function(match) {
				property = match.substr(1, match.length - 2);
				compute = compute.replace(match, self[property]);
			});
		}
		return (compute || expr);
	},

	_getStaticResHttpQuery: function(member, code) {
		var path = this._getResPath(member, code);
		return this._getHttpQuery(null, _staticURLTemplate, {
			"typres": _staticResConf[member].common ? "$shared" : "$files",
			"res": path
		});
	},

	_getHttpQuery: function(prefUrl, templateUrl, params, options) {
		var url = ["/" + (prefUrl || "trans"), this.endpointParts.join("/"), templateUrl].join("/");
		var httpQuery = httpController.parseUrl(params ? this._parseResExp.call(params, url) : url);
		httpQuery.appendHost();
		return httpQuery;
	}
});