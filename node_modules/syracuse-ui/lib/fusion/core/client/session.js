"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Fusion Client Session management
 */


var helpers = require('syracuse-core/lib/helpers');
var httpController = require("syracuse-ui/lib/controller/httpController");
var util = require('syracuse-ui/lib/fusion/tools/util');
var sapUtil = require('./sap/util').Fusion;
var localize = require('syracuse-ui/lib/fusion/tools/localize').localize;
var FormatCfg = require('syracuse-ui/lib/fusion/core/tools/format').FormatterEnv;

var _staticResConf = {
    "menloc": {"wait": true, "cache": true, "common": false, "name": "{cdLang}", "srvName": "menloc", "srvExt": ".js", "srvSubPath": ["GEN", "{cdLang}", "MENL"].join("/")},
    "localize": {"wait": true, "cache": true, "common": true, "name": "{cdLang}", "srvName": "localize", "srvExt": ".js", "srvSubPath": ["GEN", "{cdLang}", "LIB"].join("/")},
    "styleSheet": {"wait": true,"cache": true, "common": false, "name": "{styleSheet}", "srvName": "{styleSheet}", "srvExt": ".json", "srvSubPath": ["GEN", "ALL", "STY"].join("/")},
    "screen": {"cache": false, "common": false, "name": null, "srvName": null, "srvExt": ".js", "srvSubPath": ["GEN", "ALL", "SCRN"].join("/")}
};
var _staticURLTemplate = "{typres}/{res}", _fusionNS = sapUtil._fNS;
var _defLang = "ENG";


function Session(){
}

exports.Session = helpers.defineClass(Session, null, {
    initialize: function(settings, httpQuery, localOpts){
        var endpointObj = httpQuery.getEndpoint();
        this.endpointParts = endpointObj ? endpointObj.endpoint.split(endpointObj.sep) : ["x3", "erp", "X3"];
    	this.cdLang = settings ? (settings.cdLang || _defLang) : _defLang;
    	this.styleSheet = settings ? (settings.ADXStyleFile || "STX_DEFAULT") : "STX_DEFAULT";
        this.cnxDate = settings ? (settings.cnxDate || null) : null;
        this.cdIsoLang = localOpts && localOpts.cdIsoLang ? localOpts.cdIsoLang : localize.defLang;
    	this._initSharedRes();
        this._mnu = null;
        this.formatCfg = null;
       	this._loadSettings(settings || {});
        this.logger = util.getLog();
     },

    _loadSettings: function(settings){
        _.defaults(this.product || (this.product = {}), {"code": settings.ADXProduct, "theme": settings.ADXTheme, "label": settings.ADXProductLabel, "labelSuff": settings.ADXProductSuff, "labelPref": settings.ADXProductPref}, {"code": "ADX", "theme": "ADX", "label": "Syracuse", "labelSuff": "", "labelPref": ""});
        _.defaults(this.bi || (this.bi = {}), {"secure": settings.BOSEC, "server": settings.BOSERV, "user": settings.BOUSR, "passord": settings.BOPWD}, {"secure": "SecEnterprise"});
        _.defaults(this.help || (this.help = {}), {"type": settings.ADXHelpType, "location": settings.ADXHelpLocation, "name": settings.ADXHelpName}, {"type": 0, "location": "", "name": ""});
        _.defaults(this.timeout || (this.timeout = {}), {"hangup": settings.UITimehangup1, "reprieve": settings.UITimehangup2}, {"hangup": 0, "reprieve": 0});
        this._mnu = (settings.mnu ? util.duplicateObj(settings.mnu) : []);
        this._setRegionalOptions(settings);
        this._setUserInf({"lang": this.cdLang, "code": settings.user, "profile": settings.usrProfile, "named": settings.ADXNamedUser && settings.ADXNamedUser == "0" ? false : true}, false);
        this._setSplash(settings.splash);
        this._setSrvVersions(settings);
        this._setSrvCnx(settings);
    },

    _setSrvCnx: function(settings){
        this.srvAdxCnx = {"urlPublic": settings.ADXHttpPub, "sol": settings.AdxSolution, "port": settings.ADXPort, "appHost": settings.ADXAppHost, "trtHost": settings.ADXTrtHost, "folder": settings.ADXFolder, "folderForHistory": settings.ADXMaskAppName};
    },

    _setRegionalOptions: function(settings){
        // Set regional settings
        this.regionalOptions = {"date": {}, "time": {}, "numeric": {}, "format": {}};
        _.defaults(this.regionalOptions.date, {"dateSep": settings.SDate, "dateOrder": settings.IDate, "datePivot": settings.DefaultDatePivot, "dateFormat": settings.DefaultDateFormat}, {"dateSep": "/", "dateOrder": "mdy", "datePivot": 1940, "dateFormat": "DD[/]MM[/]YY"});
        this.regionalOptions.date.months = settings.SetMonthList ? settings.SetMonthList.split(";") : ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        _.defaults(this.regionalOptions.numeric, {"decSep": settings.SDecimal, "thsndSep": settings.SThousand}, {"decSep": ".", "thsndSep": " "});
        _.defaults(this.regionalOptions.format, {"VOn": (settings["formater.von"] && settings["formater.von"] === "on" ? true : false), "ZOn": (settings.ZOn && settings.ZOn === "1" ? true : false)}, {"VOn": true, "ZOn": true});
        _.defaults(this.regionalOptions.time, {"sep": settings.STime}, {"sep": ":"});
        // Formatter configuration initialization
        (this.formatCfg = new FormatCfg()).initialize();
        this.formatCfg.setPreferences(this.regionalOptions.date.datePivot, this.regionalOptions.date.dateOrder, this.regionalOptions.date.dateSep, this.regionalOptions.numeric.thsndSep, this.regionalOptions.numeric.decSep, this.regionalOptions.time.hourSep);
        if(settings.fmtEx) {
            _.each(settings.fmtEx, function (key, value) {
                this.formatCfg.defineTypes(key, value.stdType, value.chars);
            }, this);
        }
    },

    _setSrvVersions: function(settings){
        this.version = {"runtime": {}, "supervisor": {}, "product": {}};
        this.version.runtime.protocol = settings.Protocol;
        this.version.runtime.vers = settings.Version;
        this.version.supervisor.vers = settings.ADXSupVers;
        this.version.product.tradeVers = settings.ADXProductInfoVers;
        this.version.product.vers = settings.ADXVersion;
        this.version.product.sp = settings.ADXRelease;
        this.version.product.hf = settings.ADXNopatch;
    },

    _setUserInf: function(userInf, update){
        _.defaults(this.userInf || (this.userInf = {}), (userInf || {}), {"lang": _defLang, "code": "", "profile": "", "named": true});
        if(update) {      
            this.logger.trace({"severety": "warn"}, "Server sent wrongly user settings modifications!!");
       }
    },

    _setSplash: function(splash){
       _.defaults(this.splash || (this.splash = {}), (splash || {}), {"serial": 0, "client": ["","","",""], "partner": ["","","",""], "validity": ["",""]});        
    },

    _changeDate: function(date){
        if(date.length > 0 && date !== this.cnxDate) {
            this.cnxDate = date;      
        }
    },

    _changeStyleSheet: function(styleSheet){
        if(styleSheet.length > 0 && styleSheet != this.styleSheet) {
            this.styleSheet = styleSheet;      
            this._verifySharedRes();
        }
    },

    _changeLang: function(cdLang){
        if(cdLang.length > 0 && cdLang !== this.cdLang) {      
            this.cdLang = cdLang;
            this._verifySharedRes();
            this.logger.trace({"severety": "warn"}, "Server changed session language code!!");
            // TODO : Notify Shell Controller?
       }
    },

    getProdLabel: function() {
        return this.product.label || util.ourCompanyLabel;
    },

    getRegional: function(all, num, date, time, format) {
        var regional = this.regionalOptions;
        return all ? regional : (num ? regional.numeric : (date ? regional.date : (time ? regional.time : (format ? regional.format : {}))));
    },

    updateSettings: function(settings){
        if(settings.ChangeUserContext) {
            var usrInf = null, ctx = settings.ChangeUserContext.split(";"), len = ctx.length;
            /*Pattern : "user;cdLang;cdProfile;date"*/
            if(len > 0 && ctx[0].length > 0) {
                usrInf = {"code": ctx[0]};
            }
            if(len > 1 ) {
                this._changeLang(ctx[1]);
            }
            if(len > 2 && ctx[0].length > 0) {
                usrInf =_.extend(usrInf || {}, {"profile": ctx[2]});
            }
            if(len > 3) {
                this._changeDate(ctx[3]);
            }
            if(usrInf) {
                this._setUserInf(usrInf, true);
            }
        }
        if(settings.ADXStyleFile) {
            this._changeStyleSheet(settings.ADXStyleFile);
        }
        if(settings.UISetUsrPasswd) {
            // Nothing special...
        }
    },

    getWinSessMnus: function(){
        return this._mnu;
    },

    getMenloc: function(menLoc){
        var id = "menloc";
	   	return (this._checkSharedRes(id, this.cdLang) ? this._sharedRes[id][this.cdLang][menLoc] : null);
    },

    getMenlocValue: function(menloc, rank){
    	var menLoc = this.getMenloc(menloc);
	   	return (menLoc ? menLoc[rank - 1] : null);
    },

    getStyleClass: function(code){
        var id = "styleSheet";
	   	return (this._checkSharedRes(id, this.styleSheet) && this._sharedRes[id][this.styleSheet]["$styles"][code] ? this._sharedRes[id][this.styleSheet]["$styles"][code].$css : null);
    },

    getlabel: function(categorie, labelId, dflt){
        var id = "localize";
	   	return (this._checkSharedRes(id, this.cdLang) ? this._sharedRes[id][this.cdLang][categorie][labelId] || dflt || "???" : (dflt || "???"));
    },

    dispose: function(){
    	if (this.endpointParts && document[_fusionNS]._sharedRes[this.endpointParts.join(".")]._cRef > 0){
            // TODO : delete if == 0 ??
            delete this._sharedRes;
            document[_fusionNS]._sharedRes[this.endpointParts.join(".")]._cRef--;
        }
        if(this.version){
            delete this.version;
        }
        if(this.logger) {
            delete this.logger;
        }
        if(this.formatCfg) {
            delete this.formatCfg;
        }
    },

    _initSharedRes: function() {
        var endpointId = this.endpointParts.join(".");
 		document[_fusionNS] = document[_fusionNS] || {};
		document[_fusionNS]._sharedRes = document[_fusionNS]._sharedRes || {};
		if(!document[_fusionNS]._sharedRes[endpointId]){
			document[_fusionNS]._sharedRes[endpointId] = {
				"_cRef": 0,
				"_pending": {}
			};
            _.each(_staticResConf, function(value, key){
                if(value.cache) {
                    this[key] = {};
                }
            }, document[_fusionNS]._sharedRes[endpointId]);   	
		}
		this._sharedRes = document[_fusionNS]._sharedRes[endpointId];
		this._verifySharedRes();
		this._sharedRes._cRef++;
    },

    _verifySharedRes: function() {
        var name;
        _.each(_staticResConf, function(value, key){
            name = value.name ? this._parseResExp(value.name) : "";
            if(value.cache && !this._sharedRes[key][name]) {
                this._requestRes(key, name);
            }
        }, this);
    },

    waitSharedRes: function(wait, repeat, callback) {
        var self = this, stop = true, member = null, code = null;
        _.each(_staticResConf, function(value, key){
            if(stop && value.cache && value.wait) {
                code = value.name ? this._parseResExp(value.name) : "";
                stop = this._checkSharedRes(key, code);
                member = key;
            }
        }, this);
        if (!stop && repeat > 0) {
            setTimeout(function(){
                self.logger.trace({"severety": "warn"}, "Waiting shared resources...");
                self.waitSharedRes(wait, --repeat, callback);
            }, wait);
        }
        else {
            member = member && code ? this._getResPath(member, code) : null;
            code = localize.getMessage(this.cdIsoLang, "8") + (member ? ("\n" + localize.getMessage(this.cdIsoLang, "15") + "'" + member + "'") : "");
            callback(!stop ? [util.makeDiagnosis(code, 3, "client.Controller.waitSharedRes()", "08")] : null);
        }       
    },

    _checkSharedRes: function(member, code){
    	if(this._sharedRes._pending.hasOwnProperty(member + code) && this._sharedRes._pending[member + code]) {
            return false;
    	}
    	else {
    		return (this._sharedRes._pending.hasOwnProperty(member + code) ? true : false);
    	}
    },

    _getResPath: function(member, code){
        return [this._parseResExp(_staticResConf[member].srvSubPath), _staticResConf[member].srvName ? this._parseResExp(_staticResConf[member].srvName) : code].join("/") + (_staticResConf[member].srvExt || "");
    },

    _requestRes: function(member, code, callback){
       if(!_staticResConf[member].cache || !this._sharedRes._pending.hasOwnProperty(member + code)) {
            var self = this, path = this._getResPath(member, code);
            if(_staticResConf[member].cache){
                self._sharedRes._pending[member + code] = true;
            }
            (this._getStaticHttpQuery(_staticURLTemplate, {"typres": _staticResConf[member].common ? "$shared" : "$files", "res": path})).sendRequest(null, !_staticResConf[member].cache ? callback : function(data) {
                if(self._sharedRes) {
                    if(self._sharedRes[member][code]){
                        delete self._sharedRes[member][code];
                    }
                    self._sharedRes[member][code] = data;
                    self._sharedRes._pending[member + code] = false;
                }
            },
            function (error) {
                if (_staticResConf[member].cache && self._sharedRes) {
                    if( self._sharedRes[member] && self._sharedRes[member][code]){
                        delete self._sharedRes[member][code];
                    }
                    delete self._sharedRes._pending[member + code];
                }
            });
        }
    },

    _parseResExp: function(expr){
        var compute = null, matches, property, self = this;
        if (expr.indexOf("{") >= 0) {
            compute = expr;
            matches = expr.match(/(\{.*?\})/g);
            matches.forEach(function(match){
                property = match.substr(1, match.length - 2);
                compute = compute.replace(match, self[property]);
            });
        }
        return (compute || expr);
    },

    _getStaticHttpQuery: function(templateUrl, params, options){
        var httpQuery, url = ["/trans", this.endpointParts.join("/"), templateUrl].join("/");
        httpQuery = httpController.parseUrl(this._parseResExp.call(params, url));
        httpQuery.appendHost();
        return httpQuery;
    }
});