"use strict";
var integer = require("syracuse-core/lib/types/integer");
var real = require("syracuse-core/lib/types/real");

function _setFormatApi() {
	_.extend(_formatApi["x-integer"], _formatApiNumeric);
	_.extend(_formatApi["x-decimal"], _formatApiNumeric);
	_.extend(_formatApi["x-real"], _formatApiNumeric);
}

var _formatApiNumeric = {
	"validate": function(value, constraints, errors) {
		return true;
	},
	"formatInput": function(field, value) {
		return value;
	}
};
var _formatApi = {
	"x-integer": {
		"format": function(value, format) {
			return value.str;
		},
		"parse": function(value, format) {
			var strEx = null,
				gs = this.regionalOptions.groupSeparator;
			if (gs && value && value.indexOf(gs) >= 0) {
				strEx = value.split(gs).join('');
			}
			return {
				"value": integer.parse(strEx || value),
				"str": value,
				"toString": function() {
					return this.str;
				}
			};
		},
		"numberValue": function(val) {
			return val.toString();
		},
		"subtract": function(n1, n2) {
			var val = n1.value - n2.value;
			return this.parse(val.toString());
		},
		"add": function(n1, n2) {
			var val = n1.value + n2.value;
			return this.parse(val.toString());
		}
	},
	"x-decimal": {
		"format": function(value, format) {
			return value.str;
		},
		"parse": function(str, format) {
			var strEx = null,
				re, ds = this.regionalOptions.decimalSeparator,
				gs = this.regionalOptions.groupSeparator;
			if (ds != "." && str.indexOf(ds) >= 0) {
				re = new RegExp(ds, "g");
				strEx = str.replace(re, ".");
			}
			if (str.indexOf(gs) >= 0) {
				re = new RegExp(gs, "g");
				strEx = (strEx || str).replace(re, "");
			}
			return {
				"value": parseFloat(strEx || str),
				"str": str,
				"toString": function() {
					return this.str;
				}
			};
		},
		"numberValue": function(value) {
			var str = value.toString(),
				re, ds = this.regionalOptions.decimalSeparator;
			if (ds != "." && str.indexOf(".") >= 0) {
				re = new RegExp("\\.", "g");
				str = str.replace(re, ds);
			}
			return str;
		},
		"subtract": function(n1, n2) {
			var val = n1.value - n2.value;
			return this.parse(val.toString());
		},
		"add": function(n1, n2) {
			var val = n1.value + n2.value;
			return this.parse(val.toString());
		}
	},
	"x-real": {
		"format": function(value, format) {
			return value;
		},
		"parse": function(value, format) {
			return real.parse(value);
		},
		"numberValue": function(val) {
			return real.numberValue(val);
		},
		"subtract": function(n1, n2) {
			return real.subtract(n1, n2);
		},
		"add": function(n1, n2) {
			return real.add(n1, n2);
		}
	},
	"x-datetime": {
		"validate": function(value, constraints, errors) {
			return true;
		},
		"parse": function(value, format) {
			return {
				"_value": value,
				"toString": function() {
					return this._value;
				},
				"isNull": function() {
					return false;
				}
			};
		},
		"formatInput": function(field, value) {
			return value;
		}
	}
};
_setFormatApi();

var _formatApiMapping = {
	"application/x-integer": _formatApi["x-integer"],
	"application/x-decimal": _formatApi["x-decimal"],
	"application/x-real": _formatApi["x-decimal"],
	"application/x-date": _formatApi["x-datetime"],
	"application/x-time": _formatApi["x-datetime"],
	"application/x-datetime": _formatApi["x-datetime"]
};

exports.getApi = function($type, options) {
	return _formatApiMapping[$type];
};

exports.getLocalFormat = function(type, $displayFormat) {
	return "";
};

exports.processFormat = function(format) {
	return {};
};

var _defaultLocale = {
	getDateFormat: function(displayFormat) {
		return "";
	},
	getTimeFormat: function(displayFormat) {
		return "";
	},
	getDatetimeFormat: function(displayFormat) {
		return "";
	},
	getNumberFormatObj: function(type, decSep, gSep, gSize) {
		var formatObj = {};
		formatObj.numFormat = "";
		formatObj.decimalSeparator = decSep || ".";
		formatObj.groupSeparator = gSep || " ";
		formatObj.groupSize = gSize || 3;
		return formatObj;
	},
	getNumberFormat: function(type) {
		return this.getNumberFormatObj(type).numFormat;
	},
	getTwoDigitYearMax: function() {
		return 2029;
	}
};

function _getLocale() {
	return _defaultLocale;
}

exports.getLocale = _getLocale;