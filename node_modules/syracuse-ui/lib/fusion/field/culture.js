"use strict";

var _api = {
	"x-real": {
		format: function(value, format) {
			return value;
		},
		parse: function(value, format) {
			return syra_culture.real.parse(value);
		},
		numberValue: function(val) {
			return syra_culture.real.numberValue(val);
		},
		subtract: function(n1, n2) {
			return syra_culture.real.subtract(n1, n2);
		},
		add: function(n1, n2) {
			return syra_culture.real.add(n1, n2);
		},
		validate: function(value, constraints, errors) {
			return true;
		},
		formatInput: function(field, value) {
			return value;
		}
	},
};

var _datetime = {
	validate: function(value, constraints, errors) {
		return true;
	},
	parse: function(value, format) {
		return {
			"_value": value,
			"toString": function() {
				return this._value;
			},
			"isNull": function() {
				return false;
			}
		};
	},
	formatInput: function(field, value) {
		return value;
	},
	"formatFromHelperVal": function(helperVal, format, formatWrapper) {
		var formted = null,
			rawArray, i, len, rawVal = "",
			occur;
		if (helperVal) {
			rawArray = [helperVal.year, helperVal.month, helperVal.day];
			for (i = 0, len = rawArray.length; i < len; i++) {
				occur = rawArray[i].toString(10);
				rawVal += occur.length == 1 ? ("0" + occur) : occur;
			}
			formted = formatWrapper.rawToEdit(rawVal, format);
		}
		return formted ? formted.edit : null;
	}
};


exports.api = {
	"application/x-integer": {
		format: function(value, format) {
			return value.str;
		},
		parse: function(value, format) {
			var strEx = null,
				gs = this.regionalOptions.groupSeparator;
			if (value == null) {
				value = "";
			}
			if (typeof value != "string") {
				value = value.toString();
			}
			if (gs && value && value.indexOf(gs) >= 0) {
				strEx = value.split(gs).join('');
			}
			return {
				"value": syra_culture.integer.parse(strEx || value),
				"str": value,
				"toString": function() {
					return this.str;
				}
			};
		},
		numberValue: function(val) {
			return val.toString();
		},
		subtract: function(n1, n2) {
			var val = n1.value - n2.value;
			return this.parse(val.toString());
		},
		add: function(n1, n2) {
			var val = n1.value + n2.value;
			return this.parse(val.toString());
		},
		validate: function(value, constraints, errors) {
			return true;
		},
		formatInput: function(field, value) {
			return value;
		}
	},
	"application/x-decimal": {
		format: function(value, format) {
			return value.str;
		},
		parse: function(str, format) {
			var strEx = null,
				re, ds = this.regionalOptions.decimalSeparator,
				gs = this.regionalOptions.groupSeparator;
			if (ds != "." && str.indexOf(ds) >= 0) {
				re = new RegExp(ds, "g");
				strEx = str.replace(re, ".");
			}
			if (str.indexOf(gs) >= 0) {
				re = new RegExp(gs, "g");
				strEx = (strEx || str).replace(re, "");
			}
			return {
				"value": parseFloat(strEx || str),
				"str": str,
				"toString": function() {
					return this.str;
				}
			};
		},
		numberValue: function(value) {
			var str = value.toString(),
				re, ds = this.regionalOptions.decimalSeparator;
			if (ds != "." && str.indexOf(".") >= 0) {
				re = /\./g; // new RegExp("\\.", "g");
				str = str.replace(re, ds);
			}
			return str;
		},
		subtract: function(n1, n2) {
			var val = n1.value - n2.value;
			return this.parse(val.toString());
		},
		add: function(n1, n2) {
			var val = n1.value + n2.value;
			return this.parse(val.toString());
		},
		validate: function(value, constraints, errors) {
			return true;
		},
		formatInput: function(field, value) {
			return value;
		}
	},
	"application/x-date": _datetime,
	"application/x-time": _datetime,
	"application/x-datetime": _datetime
};
exports.api["application/x-real"] = exports.api["x-decimal"];

exports.processFormat = function(format) {
	return {};
};

exports.format = {
	get: function(format) {
		return {};
	},
	getDate: function(displayFormat) {
		return "";
	},
	getTime: function(displayFormat) {
		return "";
	},
	getDatetime: function(displayFormat) {
		return "";
	},
	getNumberFormatObj: function(type, decSep, gSep, gSize) {
		var formatObj = {};
		formatObj.numFormat = "";
		formatObj.decimalSeparator = decSep || ".";
		formatObj.groupSeparator = gSep || " ";
		formatObj.groupSize = gSize || 3;
		return formatObj;
	},
	getNumberFormat: function(type) {
		return this.getNumberFormatObj(type).numFormat;
	},
	getTwoDigitYearMax: function() {
		return 2029;
	}
};