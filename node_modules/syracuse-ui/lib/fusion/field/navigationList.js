"use strict";
var helpers = require('syracuse-core/lib/helpers');
var GridList = require("syracuse-ui/lib/field/array/gridBuilder/gridList").GridList;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;

function NavigationList() {}

exports.NavigationList = helpers.defineClass(NavigationList, GridList, {
	initializeList: function() {
		if (this.$item.$isNavigationList) {
			this.$fitContainer = true;
		}
		this.isScrollButtonEnabled = false;
		this.$item.$isPickerMenuHidden = true;
		this.$isQuickDesignerDisabled = true;
		this.$item.$isMenuRecordHidden = true;
		this.isClientFetch = false;
		this.isClientSortEnable = true;
		this.isClientPagingPerPageDisable = true;
		this.discardFieldsGarbage = true;
		GridList.prototype.initializeList.call(this);
	},
	setFocus: function(select, name, $serverIndex) {
		var bar = this.page && this.page.fusionBar;
		return bar && name ? bar.setFocusBar(select, name) : true;
	},
	applyMetaData: function(dataRecordSet, parentDataRecord, metaData) {
		return false;
	},
	validateDisplay: function() {
		if (!this.disableDisplayValidation) {
			GridList.prototype.validateDisplay.call(this);
		}
	},
	_getSortedFilterRcdFields: function(filterRcd) {
		return (Object.keys(filterRcd.fieldCells)).sort(function(a, b) {
			return parseInt(a.substr(2), 10) - parseInt(b.substr(2), 10);
		});
	},
	getQuickSelValues: function() {
		var res = [];
		if (this.filterRecord) {
			var $binds = this._getSortedFilterRcdFields(this.filterRecord);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var cell = this.filterRecord.fieldCells[$binds[ii]];
				this.fomatter.filter.ensureDefault(cell);
				res.push(cell.getValue() || "");
			}
		}
		return res;
	},
	getNextQuickSelField: function(bind, nextSel) {
		var rec = this.filterRecord,
			ret = null,
			i, len, next, prev, cells = [];
		if (rec.$item && rec.$item.$layout && rec.$item.$layout.$items) {
			if (nextSel === undefined) {
				ret = rec.boundFields[bind];
			} else {
				cells = this._getSortedFilterRcdFields(rec);
				for (i = 0, len = cells.length; i < len; i++) {
					if (cells[i] === bind) {
						if (i === 0) {
							next = cells[i + 1];
							prev = bind;
						} else
						if (i === (cells.length - 1)) {
							next = cells[0];
							prev = cells[i - 1];
						} else {
							next = cells[i + 1];
							prev = cells[i - 1];
						}
						break;
					}
				}
				ret = rec.boundFields[nextSel ? next : prev];
			}
		}
		return ret;
	}
});