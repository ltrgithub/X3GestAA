"use strict";
var helpers = require('syracuse-core/lib/helpers');
var desktopField = require('syracuse-ui/lib/field/choice/choiceField');
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var util = require('syracuse-ui/lib/fusion/tools/util');


function _initializeChoice(choice, exclude){
    var menloc = null, list = null, $fusionController = syraUtil.getFusionController(choice), fusionSess = $fusionController ? $fusionController.getSession() : null;
    (!choice.$field.$value ? choice.$field.$value = {
        "$type": "application/x-integer",
        "$enum": []
    } : void (0));
    if (fusionSess && choice.$field.$mnu) {
        if ((menloc = fusionSess.getMenloc(choice.$field.$mnu))) {
            if (exclude && !choice.$field.$value.$enum) {
                list = _.map(menloc, function(item, idx){
                    return {
                        "$value": idx + 1,
                        "$title": item
                    };
                });
                _.each(exclude, function(rank){
                    list[rank - 1] = null;
                });
                choice.$field.$value.$enum = _.filter(list, function(item, idx){
                    return item;
                });
            }
            else 
                if (exclude && choice.$field.$value.$enum) {
                    list = [];
                    _.each(choice.$field.$value.$enum, function(item, idx){
                        if (_.indexOf(exclude, item.$value) < 0) {
                            list.push(item);
                        }
                    });
                    delete choice.$field.$value.$enum;
                    choice.$field.$value.$enum = util.duplicateObj(list);
                }
                else {
			        (choice.$field.$value.$enum ? delete choice.$field.$value.$enum : void (0));
	                choice.$field.$value.$enum = _.map(menloc, function(item, idx){
	                    return {
	                        "$value": idx + 1,
	                        "$title": item
	                    };
	                });                
               }
        }
        else {
            // TODO : message?
        }
    }
	choice.forceRender(choice.$field.$value.$enum);
}


function FusionChoiceField(){
}

exports.FusionChoiceField = helpers.defineClassEx(FusionChoiceField, desktopField.ChoiceField, {
    initialize: function(){
        _initializeChoice(this);
    },
    removeListItems: function(items){
        _initializeChoice(this, items);
    },
	forceRender: function($enum){		
		// Maj nouvelle liste 
        this.applyMetaData({
				$enum :$enum
		});
		// Gestion de la selection courante
		// @TODO a voir pour ajouter la gestion de $value dans desktopField.ChoiceField pour comparer les items avec item courant
		var build=this.builder;
		if (build && build._$selectedEnum){
			// Calcul nouvel index de la selection courante dasn la nouvelle liste
			var newIdx=-1;
			$enum.forEach(function(item, index){
				// Compare $value - Cette notion n'existe pas dans desktopField.ChoiceField
				if (item.$value == build._$selectedEnum.$value){
					newIdx=index;
				}
			});
			if (newIdx>=0){
				// Trouve -> On met a jour le nouvel index car peut avoir change
				// Comme le applyMetaData force le renderLayout le nouvel index sera pris en compte
				build._$selectedEnum.$index=newIdx;
			}else{
				// Non trouve -> Deselection + "" comme valeur courante pour l input
				build._selectItem(build._$selectedEnum.$index, false);
				build.setDataValue("");
			}
		}
    }
});
