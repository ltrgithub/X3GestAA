"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var syraUtil = require('../../core/client/sap/util').Syra;

function GridRecord(){
}

exports.GridRecord = helpers.defineClass(GridRecord, Article, {
    loadRecord: function(list, record, $recordIndex, $$recordContainer){
        this.guimodCel = {};
        if ($recordIndex < 0 && list.builder.memGuimodCol) {
            this.guimodCel = list.builder.memGuimodCol;
        }
        this.$recordUuid = record.$uuid;
        this.$recordIndex = $recordIndex;
        this.$$recordContainer = $$recordContainer;
        this.$facet = list.$recordFacet;
        this.$prototype = list.$prototype.$item;
        this.current = null
        
        document.itemFactory.initializeItem(this, {
            $layout: {
                $items: list.$item.$layout.$items
            }
        }, list);
        
        list.builder.recordAdded(this);
        this.loadBox(record);
        
    },
    remove: function(){
        this._removeLineRow();
        this.boxParent.builder.recordRemoved(this);
    },
    _removeLineRow: function(){
        if (!this._isBuilded()) 
            return null;
        this.boxParent.builder.state.cBuild--;
        this.$$dataRowFrozen.empty().remove();
        this.$$dataRowScroll.empty().remove();
        delete (this.$$dataRowFrozen);
        delete (this.$$dataRowScroll);
    },
    _refresh: function(recordIndex, insert){
        var top;
        var listBuilder = this.boxParent.builder;
        var newRec = (this.$recordIndex < 0);
        listBuilder.rows[recordIndex] = this;
        if (newRec) {
            delete (listBuilder.rows[this.$recordIndex]);
            listBuilder.rowsOrder.splice(recordIndex, 0, this);
        }
        this.$recordIndex = recordIndex
        if (this._isBuilded()) {
            top = (this.$recordIndex * listBuilder.size("lineHeight")) + "px";
            this.$$noline[0].firstChild.textContent = (this.$recordIndex + 1);
            this.$$dataRowFrozen.attr('style', 'top:' + top + ';width:100%');
            this.$$dataRowFrozen.attr("data-s-record", this.$recordIndex);
            this.$$dataRowScroll.attr('style', 'top:' + top + ';width:100%');
            this.$$dataRowScroll.attr("data-s-record", this.$recordIndex);
        }
        else {
            this.drawBox();
        }
    },
    drawBox: function(position){
        var self = this, list = self.boxParent;
        var listBuilder = list.builder;
        if (self._isBuilded()) 
            return;
        if (!listBuilder.toBuild(((position != undefined) ? position : self.$recordIndex))) 
            return;
        listBuilder.state.cBuild++
        self.$$dataRowFrozen = $("<div/>").attr("data-s-record", self.$recordIndex);
        self.$$dataRowFrozen.addClass(listBuilder._css.lineFusion)
        self.$$dataRowScroll = $("<div/>").attr("data-s-record", self.$recordIndex);
        self.$$dataRowScroll.addClass(listBuilder._css.lineFusion)
        if (listBuilder.$alternateStyle && ((position != undefined) ? position : self.$recordIndex % 2)) {
            self.$$dataRowFrozen.addClass(list.$alternateSkin);
            self.$$dataRowScroll.addClass(list.$alternateSkin);
        }
        var css = listBuilder.appendSkinFusion(listBuilder._css.cellFusion, null);
        /*
         
         if (listBuilder.recordSelector) {
         self.$$dataRow.append($("<td/>").addClass(css).addClass(list.$skin + listBuilder.recordSelector.css).append(self.$$selector = $(listBuilder.recordSelector.record)));
         }
         */
        if (!listBuilder.$fieldnl.$isHidden) {
            var c = self._buildCel(listBuilder.$fieldnl, list.$itemnl, self.boxParent.builder._css.noline);
            if (listBuilder.$fieldnl.$capability.frozen) {
                this.$$dataRowFrozen[0].appendChild(c);
            }
            else {
                this.$$dataRowScroll[0].appendChild(c);
            };
            self.$$noline = $(c);
            self.$$noline.html('<div class="s-inplace-value s-inplace-value' + listBuilder.$fusionSkinSuffix + '">' + (this.$recordIndex + 1) + '</div>');
        }
        list.parseItems(function($item, $field){
            self._drawCel($field, $item, css);
        });
        
        self.$$dataRowFrozen.css("minWidth", list.builder.sizesline.frozen.minLength + "px")
        self.addHtmlRow(((position != undefined) ? position : self.$recordIndex));
        if (self.current) {
            self._setInterfaceCurrentCell()
        };
            //self.$$menuRow = $("<tr/>").appendTo(list._$$body);
        //list.appendRecordMenu($("<td/>").addClass(self.boxParent.$skin + "-menu-row").attr("colspan", self.boxParent.builder.$columnsCount).appendTo(self.$$menuRow), this);
    },
    _drawCel: function($field, $item, css){
        if ($field) {
            if (!this.boundFields[$item.$bind]) {
                var c = this._buildCel($field, $item, css);
                this._drawInnerCel(c, $item, null, false);
            }
            else {
                var c = this.boundFields[$item.$bind][0].$$item[0]
            }
            if ($field.$capability.frozen) {
                this.$$dataRowFrozen[0].appendChild(c);
            }
            else {
                this.$$dataRowScroll[0].appendChild(c);
            };
                    }
    },
    _buildCel: function($field, $item, css){
        var c = document.createElement("div");
        c.id = $item.$bind;
        c.className = css;
        var g = this.guimodCel[$item.$bind];
        if (g) {
            g.apply(c);
        };
        //c.style.minWidth = $field.$cellMinLength + "px";
        c.style.width = $field.$cellLength + "%";
        return c;
    },
    _drawInnerCel: function(c, $item, initData, edit){
        $(c).empty();
        return document.itemFactory.load($(c), {
            $bind: $item.$bind,
            $isCellChild: true,
            $inplace: true,
            $isEditMode: edit
        }, this, initData);
    },
    _isBuilded: function(){
        if (this.$$dataRowFrozen) 
            return true;
        return false;
    },
    addHtmlRow: function(position){
        var listBuilder = this.boxParent.builder, top = (position * listBuilder.size("lineHeight")) + "px";
        this.$$dataRowFrozen.attr('style', 'top:' + top + ';width:100%');
        this.$$dataRowScroll.attr('style', 'top:' + top + ';width:100%');
        this.$$dataRowFrozen.appendTo(listBuilder.$$rowsFrozen);
        this.$$dataRowScroll.appendTo(listBuilder.$$rowsScroll);
    },
    highlightSelection: function(selected){
        this.$$dataRow.toggleClass("s-list-record-selected", selected);
        this.$$menuRow.toggleClass("s-list-record-selected", selected);
        if (this.$$selector && this.$$selector.is("input")) {
            this.$$selector.attr('checked', selected);
        }
    },
    applyChange: function(record){
        Article.prototype.applyChange.call(this, record);
    },
    applyGuiMod: function(){
        var c;
        for (var k in this.guimodCel) {
            c = this.$$dataRowFrozen[0].querySelector("#" + k)
            if (c == null) {
                c = this.$$dataRowScroll[0].querySelector("#" + k)
            }
            if (c != null) {
                this.guimodCel[k].apply(c);
            }
        }
    },
    getSiteController: function(){
        return syraUtil.getFusionController(this.boxParent);
    },
    onClick: function(ctrl, ev){
        var doEvt = true;
        var self = this;
        if (ctrl) {
            var p = self.getOnClickParams(ev);
            doEvt = ctrl.trigger(p.event, p.opt);
            console.log("onClick " + doEvt)
        }
        return doEvt
        //TEST
        //this.boxParent.setFocus(p.opt.data.xid,p.opt.data.line,true)
    },
    getOnClickParams: function(ev){
        var lineClicked = this._isLineClicked(ev);
        var p = {
            "event": "",
            "opt": {}
        };
        if (lineClicked) {
            p.event = "wdgt.grid.clickline";
            p.opt = {
                "target": this,
                "type": "click",
                "data": {
                    "line": (this.$recordIndex + 1),
                    "xid": this.boxParent.builder.getGridXid()
                }
            };
        }
        else {
            var css = this.boxParent.builder._css.cellFusion;
            p.event = "wdgt.grid.clickcell";
            p.opt = {
                "target": this,
                "type": "click",
                "data": {
                    "line": (this.$recordIndex + 1),
                    "xid": (($(ev.target).hasClass(css)) ? $(ev.target).attr('id') : $(ev.target).parents("." + css).attr('id'))
                }
            };
        }
        return p;
    },
    _isLineClicked: function(ev){
        return (($(ev.target).data("s-record") != undefined) || $(ev.target).hasClass(this.boxParent.builder._css.noline) || $(ev.target).parents("." + this.boxParent.builder._css.nolineFusion).length !== 0);
    },
    _setInterfaceCurrentCell: function(){
        var field = this.getField(this.current.xid);
        if (field) {
            field.$$item.toggleClass("select", true);
            field.focus();
        }
    },
    setFocus: function(xid, edit, opt){
        console.log("gridRecord.setFocus xid:" + xid + " recordIndex:" + this.$recordIndex + " edit:" + edit);
        var list = this.boxParent;
        list.resetFocus();
        list.builder.recordIndexFocus = this.$recordIndex;
        this.current = {
            "xid": xid,
            "edit": edit,
            "opt": opt
        };
		var field = this.getField(xid);
        if (field && edit && !field.$isEditMode) {
			field.$item.$isFieldEditOnfly = edit;
			setTimeout(function(){
				// FDB - check .$item - Le champ a peut être supprimé pendant le setTimeout (close)
				if (field && field.$item) document.editFieldController.toggleEditMode(field);
			}, 10); 
        };
		if(edit){
			field.focus();
		}else{
			field.$$container.focus();
		}
        this._setInterfaceCurrentCell()
    },
    resetFocus: function(xid){
        if (!xid) { var xid = this.current.xid; };
        console.log("gridRecord.resetFocus xid:" + xid + " recordIndex:" + this.$recordIndex + " edit:" + false)
        var field = this.getField(xid);
        if (field) {
			field.$$item.toggleClass("select", false);
			if  (field.$isEditMode){
				setTimeout(function(){					
					// FDB - check .$item - Le champ a peut être supprimé pendant le setTimeout (close)
					if (field && field.$item) document.editFieldController.toggleEditMode(field);
				}, 10); 
			};
		};
		this.current = null;
    },
	getCurrentField:function(){
		if(this.current == null) {return null};
		return this.getField(this.current.xid);
	},
    getValue: function(xid){
        var field = this.getField(xid);
		if(!field.$isEditMode) return null;
        return field.getDataValue(); // FDB - Lecture de la valeur de l'input - currentValue;
    },
    getField: function($bind){
        if (this.boundFields[$bind] && this.boundFields[$bind][0]) {
            return this.boundFields[$bind][0];
        };
        return null
    }
});
