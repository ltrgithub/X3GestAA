"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SBuilder = require('syracuse-ui/lib/desktop/field/collection/builder/hgridBuilder').Builder;
var FGrid = require("syracuse-ui/lib/fusion/field/collection/grid").Grid;
var FBuilder = require("syracuse-ui/lib/fusion/field/collection/gridBuilder").Builder;
var FGridRec = require("syracuse-ui/lib/fusion/field/collection/gridRecord").GridRecord;
var DesktopList = require("syracuse-ui/lib/desktop/field/collection/list").DesktopList;
var util = require('syracuse-ui/lib/fusion/tools/utilFdb');
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util');
var jQuery = $;
//-----------------------------------------------
// _hack
//-----------------------------------------------
function _hack(){
    var site = document.site;
    if (site) {
        // FDB
        site.$$body.css({
            "overflow-x": "auto",
            "overflow-y": "scroll"
        })
    }
}

function _onSelectRecord(grd, selectedRecords){
    var idx = [];
    _.each(selectedRecords, function(rec){
        idx.push({
            "$uuid": rec.dataset.$uuid,
            "$recordIndex": rec.$recordIndex
        });
    });
    util.logObj({
        len: idx.length,
        records: idx
    }, "page.onSelectRecord");
}

//-----------------------------------------------
// GridRec
//-----------------------------------------------
function GridRec(){
}

var MyGridRec = helpers.defineClass(GridRec, FGridRec, {
    onClick: function(ev, $$elmt){
        this._selectLine(ev);
    },
    _selectLine: function(ev){
        var isMulti = this.boxParent.$item.$selectMode == "multi", doEvt = true, self = this, elmt = $(ev.target);
        var line = elmt.closest('.s-grid-line-fusion');
        var scroll = line.closest(".s-grid-content-fusion").children('.s-grid-scroll-fusion:first');
        var scrollSel = scroll.find("." + _LSEL);
        var clicIdx = self.$recordIndex;
        if (isMulti) {
            line.addClass(_LSEL);
        }
        else {
            scrollSel.removeClass(_LSEL);
        }
        self.getPage().externalAdapter.onListSelectLine({
            list: self,
            line: clicIdx + 1,
            forceDoEvt: sapUtil.fixtureMode(self),
            xid: self.$item.$bind,
            // stt [[x3id,gui],[x3id,gui]]
            doEvent: function(stts){
                if (sapUtil.fixtureMode(self)) {
                    if (isMulti) {
                        if (scrollSel.length > 2) {
                            stts = [];
                            var gui = sapUtil.Fusion.getNumStatus({
                                selected: false
                            });
                            scrollSel.each(function(i, e){
                                i = parseInt(e.dataset.sRecord, 10)
                                if (i != clicIdx) {
                                    stts.push([i + 1, gui]);
                                }
                            })
                        }
                    }
                    else {
                        stts = [[clicIdx + 1, sapUtil.Fusion.getNumStatus({
                            selected: true
                        })]]
                    }
                }
                if (stts) {
                    util.log("LGrid.doClick");
                    var list = scroll[0];
                    jQuery.each(stts, function(i, stt){
                        var x3Idx = stt[0], gui = sapUtil.Fusion.getState(stt[1]);
                        util.log("Idx[" + x3Idx + "] - Select[" + gui.$isSelected + "]");
                        if (x3Idx <= list.childNodes.length) {
                            var itm = $(list.childNodes[x3Idx - 1]);
                            if (gui.$isSelected) {
                                itm.addClass(_LSEL);
                            }
                            else {
                                itm.removeClass(_LSEL);
                            }
                        }
                    })
                }
            }
        });
    }
});
function FBFusionDesktopList(){
    _hack();
}

var _LCSS = ".s-grid-line-fusion";
var _LSEL = "fselect";
exports.FBFusionDesktopList = helpers.defineClass(FBFusionDesktopList, FGrid, {
    _initializeBox: function(){
        if (!this.$item.$X3) 
            this.$item.$X3 = {};
        this.$item.$X3.$hideLineNumber = true;
        FGrid.prototype._initializeBox.call(this, MyGridRec);
    },
    createBuilder: function(RecordClass){
        this.builder = new LGGridBuilder();
        this.builder.list = this;
        this.builder.initialize(RecordClass);
    },
    addToFusionBar: function(){
        this.getPage().fusionBar.addLeftList(this);
    },
    resize: function(height){
        if (this.$$item) {
            this.$$item.height(height);
            var pageH = this._pager ? this._pager._$$item.outerHeight() : 0;
            var headH = this._$$header ? this._$$header.outerHeight() : 0;
            var scrollH = this._$$scroller ? this._$$scroller.outerHeight() : 0;
            var bodyH = height - pageH - headH - scrollH;
            this.builder.resize(bodyH);
        }
    }
});
function GridBuilder(){
}

var LGGridBuilder = helpers.defineClass(GridBuilder, FBuilder, {
    resize: function(height){
        if (height <= 0) 
            return;
        var lineH = this.size("lineHight");
        var nbLines = parseInt(height / lineH, 10);
        util.log("nbLines:" + nbLines + " - lineHight:" + lineH);
        this.changeLineCount(nbLines);
    },
    removeRows: function(){
        if (this.rowsOrder && this.rowsOrder.length > 0) 
            FBuilder.prototype.removeRows.call(this);
    },
    drawBuilder: function(){
        FBuilder.prototype.drawBuilder.call(this);
        this.list.addToFusionBar();
    }
});



//-----------------------------------------------
// GridSyra - Temporaire pour test liste gauches avec filtre et tri
//-----------------------------------------------
function FBSyraDesktopList(){

}

exports.FBSyraDesktopList = helpers.defineClass(FBSyraDesktopList, DesktopList, {
    _initializeBox: function(){
        this.$item.$isQuickDesignerEnabled = false;
        this.$item.$isMenuRecordHidden = true;
        DesktopList.prototype._initializeBox.call(this);
    },
    createBuilder: function(){
        this.builder = new GridSyra();
        this.builder.list = this;
        this.builder.initialize();
    },
    resize: function(height){
        util.log("Resize LeftList[" + height + "]");
        if (this.$$item) 
            this.$$item.height(height);
    },
    addLeftList: function(){
        this.getPage().fusionBar.addLeftList(this);
    },
    drawBox: function(){
        DesktopList.prototype.drawBox.call(this);
        this.addLeftList();
    }
});

function GridSyra(){
    util.log("GridSyra");
}

helpers.defineClass(GridSyra, SBuilder, {    /*initialize: function(){
     SBuilder.prototype.initialize.call(this);
     jQuery.extend(this.list, {
     resize: function(height){
     util.log("Resize LeftList[" + height + "]");
     if (this.$$item)
     this.$$item.height(height);
     },
     addLeftList: function(){
     this.getPage().fusionBar.addLeftList(this);
     }
     });
     },*/
    /*    drawBuilder: function(){
     SBuilder.prototype.drawBuilder.call(this);
     this.list.addLeftList();
     }*/
});

