"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopList = require("syracuse-ui/lib/desktop/field/collection/list").DesktopList;
var GridBuilder = require('./gridBuilder').Builder;
var syraUtil = require('../../core/client/sap/util').Syra;
function Grid(){
}

exports.Grid = helpers.defineClass(Grid, DesktopList, {
    createBuilder: function(){
        console.log("Grid initialize");
        this.builder = new (this.BuilderClass || GridBuilder)();
        this.builder.$layoutOptions = this.$layoutOptions.builder.grid || null;
        this.builder.list = this;
        this.builder.initialize();
        
        this.$isEditMode = false; // TODO : lv
        this.builder.lineCount(this.$item.$lineCount);
        this.builder.$fieldnl = {
            "$constraints": {
                "$maxLength": 4
            },
            "$title": "",
            "$capability": {
                "frozen": true
            },
            "$isHidden": ((this.$item.$X3) ? this.$item.$X3.$hideLineNumber : false),
            "$isNoline": true
        };
        this.$itemnl = {
            "$bind": this.builder.getGridXid() + "_NL"
        };
        this.$fusionPageMeta = syraUtil.getFusionPageMeta(this);
    },
    drawBox: function(){
        DesktopList.prototype.drawBox.call(this);
        this.$$item.addClass("s-field-grid-fusion");
        this.$$dataValue.addClass("s-field-value-grid-fusion");
        this.domValueSlot.className += " s-field-value-slot-grid-fusion";
        this._core.className += " s-field-core-grid-fusion";
    },
    fetch: function(options, $location){
        //TODO
        if (options.$itemsPerPage) {
            this.builder.changeLineCount(options.$itemsPerPage);
        }
    },
    setDataBind: function($resources, record, metaData){
        if ($resources) {
            this.dataLoaded = false
            if (record.$isDelta) {
                if (this.builder.sortCriter && this.builder.sortCriter.length > 0) {
                    this.builder.resetSort();
                }
            }
            DesktopList.prototype.setDataBind.call(this, $resources, record, null);
            this.builder.resizeRowsContainer();
            if (record.$isDelta) {
                this.builder.reSynch(record);
            }
            this.builder.endBinding(record.$isDelta);
        }
        if (metaData) {
            this.builder.setGuiMods(metaData);
            this.builder.applyGuiMod();
            this.builder.endGuiMods();
        }
    },
    _setCallBack: function(cb){
        this.callBack = cb;
    },
    _getValue: function(record, $bind){
        return record.dataset[$bind];
    },
    setFocus: function(xid, nl, edit, opt){
        this.builder.setCellVisible(xid, nl);
        this.builder.rows[(nl - 1)].setFocus(xid, edit, opt);
    },
    setFocusStyle: function(style, xid, nl){
        this.builder.rows[(nl - 1)].setFocusStyle(style, xid);
    },
    resetFocus: function(xid, nl){
        if (xid && nl) {
            this.builder.rows[(nl - 1)].resetFocus(xid);
            this.builder.recordIndexFocus = null
        }
        else {
            if (this.builder.recordIndexFocus != null) {
                this.builder.rows[this.builder.recordIndexFocus].resetFocus();
                this.builder.recordIndexFocus = null
            }
        }
    },
    getDataValue: function(xid, nl){
        return this.builder.rows[(nl - 1)].getValue(xid);
    },
    onClick: function(ctrl, evt){
        //if cancel evt return false 
        //else return true
        console.log("grid onClick");
        return this.builder.onClick(ctrl, evt);
    }//,
    //_bindFieldEvents:function(){}
});

