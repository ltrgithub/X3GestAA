"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopList = require("syracuse-ui/lib/desktop/field/collection/list").DesktopList;
var GridBuilder = require('./gridBuilder').Builder;

function Grid(){
}

exports.Grid = helpers.defineClass(Grid, DesktopList, {
    _initializeBox: function(RecordClass){
        console.log("Grid initialize");
        this.createBuilder(RecordClass);
        DesktopList.prototype._initializeBox.call(this);
        this.$isEditMode = false; // TODO : lv
        this.builder.lineCount(this.$field.$lineCount);
        this.builder.$fieldnl = {
            "$constraints": {
                "$maxLength": 5
            },
            "$title": "",
            "$capability": {
                "frozen": true
            },
            "$isHidden": ((this.$item.$X3) ? this.$item.$X3.$hideLineNumber : false)
        };
        this.$itemnl = {
            "$bind": this.builder.getGridXid() + "_NL"
        };
        this.$fusionPageMeta = this.boxParent.getArticle().$fusionPageMeta;
    },
    createBuilder: function(RecordClass){
        this.builder = new GridBuilder();
        this.builder.list = this;
        this.builder.initialize(RecordClass);
    },
    fetch: function(options, $location){
        //TODO
        if (options.$itemsPerPage) {
            this.builder.changeLineCount(options.$itemsPerPage);
        }
    },
    _makeSkinField: function(suffix, addCss){
        var css = DesktopList.prototype._makeSkinField.call(this, suffix, addCss);
        css += " " + this.builder.makeSkinFusion(css, "-grid");
        return css;
    },
    setDataBind: function($resources, record, metaData){
        if ($resources) {
            this.dataLoaded = false
            if (record.$isDelta) {
                this.builder.resetSort();
            }
            DesktopList.prototype.setDataBind.call(this, $resources, record, null);
            this.builder.resizeRowsContainer();
            if (record.$isDelta) {
                this.builder.reSynch(record);
            }
            this.builder.endBinding(record.$isDelta);
        }
        if (metaData) {
            this.builder.setGuiMods(metaData);
            this.builder.applyGuiMod();
            this.builder.endGuiMods();
        }
    },
    _setCallBack: function(cb){
        this.callBack = cb;
    },
    _getValue: function(record, $bind){
        return record.dataset[$bind];
    },
    setFocus: function(xid, nl, edit, opt){
        this.builder.rows[(nl - 1)].setFocus(xid, edit, opt);
    },
    resetFocus: function(xid, nl){
        this.builder.rows[(nl - 1)].resetFocus(xid);
    },
    getValue: function(xid, nl){
        this.builder.rows[(nl - 1)].getValue(xid);
    }
});

