"use strict";
var helpers = require('syracuse-core/lib/helpers');
var sapUtil = require('../../core/client/sap/util').Fusion;

function X3GuiMod(){
}

exports.X3GuiMod = helpers.defineClass(X3GuiMod, null, {
    css: {
        "disabled": "s-grid-fusion-disabled", // grizo
		"readOnly": "s-grid-fusion-readonly", // diszo
        "hidden": "s-grid-fusion-hidden",
        "readOnlyStatic": "s-grid-fusion-readonlystatic", //readonly modelisé
        "selected": "s-grid-fusion-selected"
    },
    sty: function(g, builded){
        if (builded && g === "") {
            this.removeStyle();
        }
        else {
            this.style(g);
        }
    },
    style: function(g){
        if (g) {
            this._class = g;
        }
        else {
            return this._class;
        }
    },
    removeStyle: function(){
        if (this._class) {
            this._removeClassName = this._class;
            this.style("");
        }
    },
    applyStyle: function(c){
        if (!this._removeClassName && !this._class) {
            return;
        }
        if (this._removeClassName) {
            var self = this, a = c.className.split(" "), r = [];
            a.forEach(function(cl){
                if (cl !== self._removeClassName) {
                    r.push(cl);
                }
            });
            delete (this._removeClassName);
            delete (this._class);
            c.className = r.join(" ");
        }
        else {
            if (this._class && this._class !== "") {
                c.className = [c.className, this._class].join(" ");
            }
        }
    },
    stt: function(g, builded){
        this.status(sapUtil.getState(g))
    },
    status: function(g){
        if (g) {
            this._status = g
        }
        else {
            return this._status
        }
    },
    applyStatus: function(c){
        if (!this._status) 
            return;
        if (this._status.$isDisabled) {
            this._addClass(c, this.css.disabled);
        }
        else {
            this._removeClass(c, this.css.disabled);
        }
        if (this._status.$isHidden) {
            this._addClass(c, this.css.hidden);
        }
        else {
            this._removeClass(c, this.css.hidden);
        }
        if (this._status.$isReadOnlyStatic) {
            this._addClass(c, this.css.readOnlyStatic);
        }
        else {
            this._removeClass(c, this.css.readOnlyStatic);
        }
        if (this._status.$isReadOnly) {
            this._addClass(c, this.css.readOnly);
        }
        else {
            this._removeClass(c, this.css.readOnly);
        }
        if (this._status.$isSelected) {
            this._addClass(c, this.css.selected);
        }
        else {
            this._removeClass(c, this.css.selected);
        }
    },
    fmt: function(g, builded){
        this._format = g;
    },
    format: function(g){
        if (g) {
            this._format = g;
        }
        else {
            return this._format;
        }
    },
    applyFormat: function(c){
    },
    disabledChoice: function(g){
    },
    tit: function(t){
        if (t) {
            this._title = t;
        }
        else {
            this._title;
        }
    },
    applyTitle: function(c){
        if (this._title) {
            c.firstChild.textContent = this._title;
        }
        if (this._status) {
            this.applyStatus(c);
        }
    },
    apply: function(c){
        this.applyStyle(c);
        this.applyStatus(c);
        this.applyFormat(c);
    },
    _removeWord: function(st, w){
        var re = new RegExp("\\s*\\b" + w + "\\b");
        return st.replace(re, "");
    },
    _isWordExist: function(st, w){
        return (st.match("\\b" + w + "\\b") != null);
    },
    _removeClass: function(o, c){
        o.className = this._removeWord(o.className, c);
    },
    _addClass: function(o, c){
        if (!this._isWordExist(o.className, c)) {
            o.className += " " + c;
        }
    }
});
