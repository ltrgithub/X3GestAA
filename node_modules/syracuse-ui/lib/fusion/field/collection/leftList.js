"use strict";
var helpers = require('syracuse-core/lib/helpers');
var GridList = require("syracuse-ui/lib/field/array/gridBuilder/gridList").GridList;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;

function NavigationList() {}

exports.NavigationList = helpers.defineClass(NavigationList, GridList, {
	initializeList: function() {
		if (this.$item.$isNavigationList) {
			this.$item.$fitContainer = true;
		}
		this.isScrollButtonEnabled = false;
		this.$item.$isPopupMenuHidden = true;
		this.$isQuickDesignerDisabled = true;
		this.$item.$isMenuRecordHidden = true;
		this.isClientFetch = false;
		this.isClientSortEnable = true;
		this.isClientPagingPerPageDisable = true;
		this.discardFieldsGarbage = true;
		GridList.prototype.initializeList.call(this);
	},
	setFocus: function(select, name, $serverIndex) {
		var bar = this.page && this.page.fusionBar;
		return bar && name ? bar.setFocusBar(select, name) : true;
	},
	applyMetaData: function(dataRecordSet, parentDataRecord, metaData) {
		return false;
	},
	validateDisplay: function() {
		if (!this.disableDisplayValidation) {
			GridList.prototype.validateDisplay.call(this);
		}
	},
	_getSortedFilterRcdFields: function(filterRcd) {
		return (Object.keys(filterRcd._cells)).sort(function(a, b) {
			return parseInt(a.substr(2), 10) > parseInt(b.substr(2), 10) ? 1 : 0;
		});
	},
	getQuickSelValues: function() {
		var $binds, ii, jj, cell, filterRcd, res = [];
		if ((filterRcd = this.filterRecord)) {
			$binds = this._getSortedFilterRcdFields(filterRcd);
			for (ii = 0, jj = $binds.length; ii < jj; ii++) {
				cell = filterRcd._cells[$binds[ii]];
				cell.ensureDefault();
				res.push(cell.getValue() || "");
			}
		}
		return res;
	},
	getNextQuickSelField: function(bind, nextSel) {
		var rec = this.filterRecord,
			ret = null,
			i, len, next, prev, cells = [];
		if (rec.$item && rec.$item.$layout && rec.$item.$layout.$items) {
			if (nextSel === undefined) {
				ret = rec.boundFields[bind];
			} else {
				cells = this._getSortedFilterRcdFields(rec);
				for (i = 0, len = cells.length; i < len; i++) {
					if (cells[i] === bind) {
						if (i === 0) {
							next = cells[i + 1];
							prev = bind;
						} else
						if (i === (cells.length - 1)) {
							next = cells[0];
							prev = cells[i - 1];
						} else {
							next = cells[i + 1];
							prev = cells[i - 1];
						}
						break;
					}
				}
				ret = rec.boundFields[nextSel ? next : prev];
			}
		}
		return ret;
	},
	applyShortCuts: function(shortcuts, event, focusField) {
		//TODO : navigate left list record (be carefull hierarchy, picking, ...) list.js eventHandling ?
		var record, newSelect, recordIndex = 0;
		if (shortcuts.down || shortcuts.up) {
			if (this.deferSelect) {
				clearTimeout(this.deferSelect);
				this.deferSelect = null;
			}
			if (record = this.getFocusedRecord(true)) {
				record.toggleFocus(false);
				recordIndex = record.getRecordIndex();
				if (this.treeDecorator) {
					recordIndex = this.treeDecorator.getPreviousNextServerIndexVisible(recordIndex, shortcuts.down);
				} else {
					if (shortcuts.down) {
						recordIndex = (recordIndex < this.clientDataset.length - 1) ? recordIndex + 1 : recordIndex;
					} else {
						recordIndex = recordIndex > 0 ? recordIndex - 1 : recordIndex;
					}
				}
			}
			if ((newSelect = this.findRecordByServerIndex(this.getClientDataSetServerIndex(recordIndex)))) {
				newSelect.toggleFocus(true);
				this.scroller.scrollToItem(newSelect.dataRow);
				if (newSelect.$facet && newSelect.$facet != "$lookup" && !this.treeDecorator) {
					this.deferSelect = setTimeout(function() {
						newSelect.domItem.click();
					}, 500);
				}
				event.preventDefault();
				return true;
			}

		} else
		if ((shortcuts.left || shortcuts.right) && this.treeDecorator) {
			if (record = this.getFocusedRecord(false)) {
				this.treeDecorator.expendCollapseNode(record.$uuid, shortcuts.right);
				return true;
			}
			return false;
		} else
		if (shortcuts.enter && !focusField) {
			record = this.getFocusedRecord(false);
			if (!record && this.selector && this.selector.uuid !== undefined) {
				record = this.selector.records[this.selector.uuid];
			}
			if (record && record.domItem) {
				record.domItem.click();
				event.preventDefault();
				return true;
			}
		}
		return GridList.prototype.applyShortCuts.call(this, shortcuts, event, focusField);
	}
});