"use strict";
var helpers = require('syracuse-core/lib/helpers');
var GridList = require("syracuse-ui/lib/field/array/gridBuilder/gridList").GridList;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;

function NavigationList() {}

exports.NavigationList = helpers.defineClass(NavigationList, GridList, {
	initializeList: function() {
		if (this.$item.$isNavigationList) {
			this.$item.$fitContainer = true;
		}
		this.isScrollButtonEnabled = false;
		this.$item.$isPopupMenuHidden = true;
		this.$isQuickDesignerEnabled = false;
		this.$item.$isMenuRecordHidden = true;
		this.isClientFetch = false;
		this.isClientSortEnable = true;
		this.isClientPagingPerPageDisable = true;
		GridList.prototype.initializeList.call(this);
	},
	resize: function(height) {
		if (this.$item.$isNavigationList) {
			this.onWindowResize();
		}
	},
	setFocus: function(select, name, $serverIndex) {
		var slot, bar = this.page && this.page.fusionBar;
		if (bar && bar.blocks && bar.openedBlock) {
			slot = bar.blocks[bar.openedBlock.index];
			slot.$$header.find(".s-fusion-bar-block-title").focus();
		}
		return true;
	},
	applyMetaData: function(dataRecordSet, parentDataRecord, metaData) {
		return false;
	},
	getQuickSelValues: function() {
		return this.filterRecord.fusionGetInputValues();
	},
	getNextQuickSelField: function(bind, nextSel) {
		var rec = this.filterRecord,
			next, prev, cells = [];
		if (rec.$item && rec.$item.$layout && rec.$item.$layout.$items) {
			cells = (Object.keys(rec._cells)).sort(function(a, b) {
				if (parseInt(a.substr(2), 10) > parseInt(b.substr(2), 10))
					return 1;
				return 0;
			});
			for (var i = 0; i < cells.length; i++) {
				if (cells[i] === bind) {
					if (i === 0) {
						next = cells[i + 1];
						prev = bind;
					} else
					if (i === (cells.length - 1)) {
						next = cells[0];
						prev = cells[i - 1];
					} else {
						next = cells[i + 1];
						prev = cells[i - 1];
					}
					break;
				}
			}
			if (nextSel === undefined)
				return rec.boundFields[bind];
			return (nextSel ? rec.boundFields[next] : rec.boundFields[prev]);
		}
		return null;
	},
	onShortKeyEvent: function(event, shortcuts) {


	},
	applyShortCuts: function(shortcuts, event, focusField) {
		//TODO : navigate left list record (be carefull hierarchy, picking, ...) list.js eventHandling ?
		if (shortcuts.down || shortcuts.up) {
			var self = this;
			if (this.deferSelect) {
				clearTimeout(this.deferSelect);
				this.deferSelect = null;
			}
			var record, recordIndex, serverIndex, newSelect;
			if (record = this.getFocusedRecord(true)) {
				record.toggleFocus(false);
				recordIndex = record.getRecordIndex();
				if (this.treeDecorator) {
					recordIndex = this.treeDecorator.getPreviousNextServerIndexVisible(recordIndex, shortcuts.down);
				} else {
					if (shortcuts.down) {
						recordIndex = (recordIndex < this.clientDataset.length - 1) ? recordIndex + 1 : recordIndex;
					} else {
						recordIndex = (recordIndex > 0) ? recordIndex - 1 : recordIndex;
					}
				}
			} else {
				recordIndex = 0;
			}
			serverIndex = this.getClientDataSetServerIndex(recordIndex);
			newSelect = this.findRecordByServerIndex(serverIndex);

			if (newSelect) {
				newSelect.toggleFocus(true);
				this.scroller.scrollToItem(newSelect.dataRow);
				if (newSelect.$facet && newSelect.$facet != "$lookup" && !this.treeDecorator) {
					this.deferSelect = setTimeout(function() {
						newSelect.$$item.click();
					}, 500);
				}
				event.preventDefault();
				return true;
			}

		} else
		if ((shortcuts.left || shortcuts.right) && this.treeDecorator) {
			var record, recordIndex, serverIndex, newSelect;
			if (record = this.getFocusedRecord(false)) {
				this.treeDecorator.expendCollapseNode(record.$uuid, shortcuts.right);
				return true;
			}
			return false;
		} else
		if (shortcuts.enter && !event.target.syra_field_id) {
			var record = this.getFocusedRecord(false);
			if (!record && this.selector && this.selector.uuid !== undefined) {
				record = this.selector.records[this.selector.uuid];
			}
			if (record && record.$$item) {
				record.$$item.click();
				event.preventDefault();
				return true;
			}
		}
		return GridList.prototype.applyShortCuts.call(this, shortcuts, event, focusField);
	}
});