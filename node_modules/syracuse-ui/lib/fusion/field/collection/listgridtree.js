"use strict";
var fieldFactory = require('syracuse-ui/lib/fusion/field/fieldFactory');
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var util = require('syracuse-ui/lib/fusion/tools/utilFdb');
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util');
var _ID = "data-x3id";
var _DEPTH = "depth";
var _SEL = "select";
var _HSEL = "halfsel";
var _CLOSE = "close";
var jQuery = $;
function LGridTree(){
}

helpers.defineClass(LGridTree, Article, {
    /* FRAMEWORK METHODS*/
    setDataBind: function(rcd, mvt, meta){
        this._update(rcd, mvt, meta);
    },
    loadBox: function(initData){
        this.$item.$lgridType = this.$item.$lgridType || "standard";
        util.log("LGridTree - Type[" + this.$item.$lgridType + "]");
        this._type = {
            std: this.$item.$lgridType == "standard",
            rec: this.$item.$lgridType == "recursive",
            pick: this.$item.$lgridType == "picking",
            id: this.$item.$lgridType
        };
        this._depth = 0;
        this._cacheItems = !this._type.std;
        this._cacheNodes = {
            lvl: $("<ul class='treeLvl'>"),
            lvlTtl: $("<li  class='" + _CLOSE + "'><div class='treeLvlContent'><a href='#' class='treeLvlSel'></a><a href='#' class='treeLvlDisp'></a><div class='treeLvlTtl'></div></div></li>"),
            itmTtl: $("<li  class='" + _CLOSE + "'><div class='treeItmContent'><div class='treeItmSel'></div><div class='treeItmTtl'></div></div></li>")
        
        };
        Article.prototype.loadBox.call(this, initData);
    },
    drawBox: function(type){
        if (!this.isInit) {
            this._init(this.$$container);
            this.getPage().fusionBar.addLeftList(this);
        }
        this.boxParent.getArticle().bind(this, this.$item.$bind);
    },
    dispose: function(){
        this._finalize();
        Article.prototype.dispose.call(this);
    },
    /* TREE METHODS*/
    _appendNode: function(root, node, id){
        var n = node.jquery ? node[0] : node;
        if (root.jquery) 
            root = root[0];
        if (id && id.length > 0) {
            n.setAttribute(_ID, id);
            if (this._cacheItems) 
                this._nodes[id] = node;
        }
        root.appendChild(n);
        return node;
    },
    _reset: function(){
        util.clearObject(this._nodes);
        if (this._root) 
            this._root.empty();
        this._nodes = {}
        this._resetCpt();
        this._depth = 0;
    },
    _resetCpt: function(){
        this._cpt = {
            levels: 0,
            items: 0
        };
    },
    _addLvl: function(root, text, id){
        var depth = root.data(_DEPTH);
        if (depth == null) 
            root.data(_DEPTH, depth = -1);
        this._cpt.levels++;
        if (text && text.length > 0) {
            var root = this._appendNode(root, this._cacheNodes.lvlTtl.clone(), id);
            util.appendText(root[0].firstChild.childNodes[2], text);
        }
        var lvl = this._appendNode(root, this._cacheNodes.lvl.clone()).data(_DEPTH, ++depth);
        this._depth = Math.max(this._depth, depth);
        return lvl;
    },
    _addItem: function(root, text, id){
        this._cpt.items++;
        var ttl = this._appendNode(root, this._cacheNodes.itmTtl.clone(), id);
        util.appendText(ttl[0].firstChild.childNodes[1], text);
        return root;
    },
    _addNode: function(root, r){
        if (!root || !r) 
            return;
        var self = this, text = r.$v || "";
        if (r.$r) {
            root = this._addLvl(root, text);
            jQuery.each(r.$r, function(i, itm){
                self._addNode(root, itm);
            });
        }
        else 
            if (r.$i && text.length > 0) {
                root = self._addItem(root, text, r.$i);
            }
    },
    _insertNode: function(root, r){
        if (!root || !r) 
            return;
        var self = this, id = (r.$i || "").toString(), childs = r.$r || [];
        if (id.length > 0) {
            //Levels > 0 
            var node = this._nodes[id], text = r.$v || "";
            if (node == null) {
                if (childs.length > 0) {
                    logErr("Parent not found - id[" + id + "]");
                    return;
                }
                root = this._addLvl(root, text, id);
            }
            else {
                this._lvlOpenClose(node, false);
                root = util.children(node, "ul", true);
            }
        }
        else 
            if (!root.is(".treeBody")) {
                logErr("Bad root - .treeBody expected");
            }
            else {
                // Level=0 - 1er node sous le div body
                root = this._addLvl(root);
            }
        if (childs.length > 0) {
            jQuery.each(childs, function(i, itm){
                self._insertNode(root, itm);
            });
        }
    },
    // elmt = tag li ou treeBody - force=true forceClose - force=false forceOpen
    _lvlOpenClose: function(e, force){
        e = util.closest(e, "li", this._root[0]);
        if (e) 
            util.toggleClass(e, _CLOSE, force);
    },
    _doSet: function(data){
        this._reset();
        this._addNode(this._root, data);
    },
    _doUpdt: function(data){
        this._resetCpt();
        this._insertNode(this._root, data);
    },
    // node - tag ul du level
    _guiCheckLevel: function(node){
        if (node == null) 
            return false;
        var self = this, node = $(node), nbSel = 0, nbHalfSel = 0, nbChilds = 0;
        jQuery.each(util.children(node, "li"), function(j, child){
            if (!child[0].hasAttribute(_ID)) {
                self._guiProcessTree(child);
            }
            nbChilds++;
            if (util.hasClass(child, _SEL)) 
                nbSel++;
            if (util.hasClass(child, _HSEL)) 
                nbHalfSel++;
        });
        node = node.parent();
        util.removeClass(node, _SEL + " " + _HSEL);
        if (nbChilds == 0) {
            node.css('display', 'none');
        }
        else 
            if (nbSel == nbChilds) {
                util.addClass(node, _SEL);
            }
            else 
                if (nbSel != 0 || nbHalfSel != 0) {
                    util.addClass(node, _HSEL);
                }
    },
    // root treeBody ou tag li du level
    _guiProcessTree: function(root){
        if (!root) 
            root = this._root;
        var lvl = util.children(root, "ul", true)
        if (lvl) 
            this._guiCheckLevel(lvl);
    },
    _doGui: function(data){
        if (!data || data.length == 0) 
            return false;
        var self = this, parents = [], pref = 'li[' + _ID + '=';
        jQuery.each(data, function(i, v){
            if (v.length < 2) 
                return true;
            var id = v[0].toString(), gui = sapUtil.Fusion.getState(v[1]), itm = self._nodes[id];
            // tag li de l'item
            if (!itm) 
                itm = self._root.find('li[' + _ID + '=' + id + "]");
            if (itm && gui) {
                util.removeClass(itm, _SEL);
                if (gui.$isSelected) 
                    util.addClass(itm, _SEL);
                var parent = itm[0].parentNode.parentNode;
                if (jQuery.inArray(parent, parents) == -1) 
                    parents.push(parent)
            }
        });
        this._guiProcessTree();
        if (parents.length > 0) {
            // Ouverture des parents
            var allParents = jQuery.makeArray(parents);
            jQuery.each(parents, function(i, parent){
                while (parent != null) {
                    parent = parent.parentNode.parentNode;
                    if (parent.nodeName == "LI") {
                        if (jQuery.inArray(parent, allParents) == -1) 
                            allParents.push(parent);
                    }
                    else 
                        parent = null;
                }
            });
            jQuery.each(allParents, function(i, v){
                self._lvlOpenClose(v, false);
            });
        }
        return true;
    },
    _doInsert: function(data){
        var op = "set";
        if (this._type.rec && op == "set") 
            op = "updt";
        switch (op) {
            case "set":
                this._doSet(data);
                return " - Nb levels[" + this._cpt.levels + "] - Nb items[" + this._cpt.items + "]"
                break;
            case "updt":
                this._doUpdt(data);
                return " - Nb levels[" + this._cpt.levels + "]"
                break;
        }
        return "Unknown action";
    },
    _update: function(rcd, mvt, meta){
        var done = false, self = this, start = new Date(), tr = "";
        if (mvt && mvt.length > 0) {
            jQuery.each(mvt, function(i, m){
                tr += " - mvt [" + m.join(',') + "]";
                if (m.length > 0) {
                    var op = m[0];
                    if (op == 0) {
                        // Clear
                        self._reset();
                        done = true;
                    }
                    else 
                        if (op == 1 && rcd) {
                            // Insert
                            if (m.length > 1) {
                                var data = rcd[m[1] - 1];
                                if (data) {
                                    tr += self._doInsert(data);
                                    done = true;
                                }
                                else {
                                    tr += "No data found at index " + m[1] + "- $rcd=[" + m[1] + "] expected";
                                }
                            }
                            else {
                                tr += "Bad mvt [" + m.join(',') + "] - Record index not found  - mvt=[1,recordIdx] expected";
                            }
                        }
                }
            });
        }
        if (meta) {
            done = done || self._doGui(meta.stt);
        }
        if (!done) 
            tr = " - Bad data - No mvt/stt found";
        util.log("Time[" + (new Date().getTime() - start.getTime()) + " ms]" + tr + " - Depth[" + self._depth + "]");
    },
    _finalize: function(){
        this._reset();
        if (this._root) {
            this._root.parent().empty();
            this._root.off();
        }
        this._root = null;
        util.clearObject(this._cacheNodes);
    },
    _init: function(parent, data){
        var self = this;
        self.isInit = true;
        self._reset();
        self._root = $("<div class='treeBody " + self._type.id + "'>").appendTo(parent);
        self._root.on("click", ".treeLvlSel", function(event){
            var x3ids = [], stt = [], level = $(this).closest('li');
            level.children('ul').find("li[" + _ID + "]").each(function(i, itm){
                itm = $(itm);
                var x3id = itm.attr(_ID).trim();
                if (x3id.length > 0) {
                    x3ids.push(x3id);
                    stt.push([x3id, sapUtil.Fusion.getNumStatus({
                        "selected": !level.is(".select")
                    })]);
                }
            });
            if (self._type.pick) {
                self.testSendReply({
                    "$mvt": [],
                    "$rcd": [],
                    "$meta": {
                        "stt": stt
                    }
                });
            }
            return false;
        });
        self._root.on("click", ".treeLvlDisp", function(event){
            if (self._type.rec) {
                var me = $(this), done = false, level = me.closest('li');
                if (level.is('.close') && !level.data('done')) {
                    level.data('done', true);
                    if (self._testId == null) 
                        self._testId = 1000000;
                    self.testSendReply({
                        $mvt: [[1, 1]],
                        $rcd: [{
                            $i: level.attr(_ID),
                            $r: [{
                                $v: "test ajout d'une première ligne dans une liste récursive - Id[" + (self._testId++) + "]",
                                $i: self._testId
                            }, {
                                $v: "test ajout d'une deuxième ligne dans une liste récursive - Id[" + (self._testId++) + "]",
                                $i: self._testId
                            }]
                        }]
                    });
                    done = true;
                }
            }
            if (!done) {
                self._lvlOpenClose(this);
            }
            return false;
        });
        self._root.on("click", ".treeItmContent", function(event){
            var itm = $(this).parent(), x3id = itm.attr(_ID);
            if (self._type.std) 
                self._root.find('li.select').toggleClass(_SEL);
            self.testSendReply({
                "$mvt": [],
                "$rcd": [],
                "$meta": {
                    "stt": [[x3id, sapUtil.Fusion.getNumStatus({
                        "selected": !itm.is('.select')
                    })]]
                }
            });
            return false;
        });
        self._root.on("resize", ".treeItmContent", function(event){
            var itm = $(this).parent(), x3id = itm.attr(_ID);
            if (self._type.std) 
                self._root.find('li.select').toggleClass(_SEL);
            self.testSendReply({
                "$mvt": [],
                "$rcd": [],
                "$meta": {
                    "stt": [[x3id, sapUtil.Fusion.getNumStatus({
                        "selected": !itm.is('.select')
                    })]]
                }
            });
            return false;
        });
        if (data) 
            self.testSendReply(data);
        return self;
    },
    resize: function(height){
        this._root[0].style.height = height + "px";
    },
    testSendReply: function(data){
        if (!data) 
            return;
        util.callHandlerLater(0, this._update, this, data.$rcd, data.$mvt, data.$meta)
    }
});
function LGridTreeStd(){

}

exports.LGridTreeStd = helpers.defineClass(LGridTreeStd, LGridTree, {});
function LGridTreePick(){

}

exports.LGridTreePick = helpers.defineClass(LGridTreePick, LGridTree, {
    loadBox: function(initData){
        this.$item.$lgridType = "picking";
        LGridTree.prototype.loadBox.call(this, initData);
    }
    
});
function LGridTreeRec(){

}

exports.LGridTreeRec = helpers.defineClass(LGridTreeRec, LGridTree, {
    loadBox: function(initData){
        this.$item.$lgridType = "recursive";
        LGridTree.prototype.loadBox.call(this, initData);
    }
});
