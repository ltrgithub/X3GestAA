"use strict";
var _helpers = require('syracuse-core').helpers;
var ListView = require('syracuse-ui/lib/scroll/list').List;

function List() {}


exports.List = _helpers.defineClass(List, null, {
	load: function(page) {
		this.articleParent = this.page = page;
		this.map = {};
		this.children = [];
		this.$skin = "s-ldp-pages";
		this.$prototype = page.$prototype.$properties[this.level];
		this.slot = syra_dom.div("s-ldp-pages-slot", page.menuBar.body);
		this.listView = new ListView({
			scroll: true,
			css: "s-list-nav",
			parentNode: this.slot
		});
	},
	addChildren: function() {
		var records = this.dataset = syra_ldp.dataset[this.level];
		if (records) {
			for (var ii = 0, jj = records.length; ii < jj; ii++) {
				this.addChild(records[ii]);
			}
		}
		this.ensureNoChild();
	},


	addChild: function(dataset) {
		var child = new this.RecordClass();
		child.load(this, dataset);
		this.map[dataset.$uuid] = child;
		this.children.push(child);
		return child;
	},
	resize: function(height) {
		this.listView.resize(height);
	},
	dispose: function() {
		this.listView && this.listView.dispose();
		syra_item.unregister(this);
		syra_site.disposeObject(this);
	}

});

function Record() {}

exports.Record = _helpers.defineClass(Record, null, {
	load: function(list, dataset) {
		this.list = list;
		this.vignettes = {};
		syra_item.initialize(syra_ldp, this);
		this.$prototype = list.$prototype.$item;
		this.dataset = dataset || {};
		this.articleParent = this.boxParent = list;

		//this.slot = syra_dom.li("s-list-nav-li");


		// this.title = syra_dom.anchor("s-list-nav-a-default", this.slot);              
		this.title = list.listView.addAnchor();
		this.slot = this.title.parentNode;
		this.slot.syraItem = this.slot.syrainout = this.id;
		this.slot.syraOnClick = "click";
		this.title.textContent = this.dataset.title;
		if (dataset.description && dataset.description != dataset.title) {
			this.slot.title = dataset.description;
		}
		//list.body.appendChild(this.slot);

		syra_ldp.context.getRecordContext(this);

	},
	click: function() {
		if (syra_ldp.ldpRecord != this) {
			this.activate(true);
		}
	},
	onItemInOut: function(onEnter, event, target) {},
	onVignetteAdded: function($bind, vignette) {
		this.vignettes[$bind] = vignette;
		if (!vignette.endpointFlag) {
			vignette.endpointFlag = syra_button.add({
				isIndicator: true,
				parent: vignette,
				css: "s-vignette-endpoint",
				fontIcon: "endpoint"
			});
			vignette.buttonsSlot.parentNode.insertBefore(vignette.endpointFlag.link, vignette.buttonsSlot);
		}
		var endpoint = vignette.$field.$vignetteEndpoint;
		syra_button.hide(vignette.endpointFlag, !endpoint || this.useCurrentEndpoint);
		if (endpoint) {
			syra_button.setText(vignette.endpointFlag, endpoint.description);
		}
	},
	saveVignetteLocation: function(vignette, menuItem) {
		var context = this.context.vignettes[vignette.$item.$bind] || {};
		vignette.$field.$altLocation = context.$location = syra_site.clone(vignette.$field.$location);
		context.$location.$bind = menuItem.$item.$bind;
		context.$location.$title = menuItem.getTitle();
		if (menuItem.$url) {
			context.$location.$url = menuItem.$url.replace("{$baseUrl}", "{$selectedEpBaseUrl}");
		}
		context.$location.$description = menuItem.$description;
		this.context.vignettes[vignette.$item.$bind] = context;
		syra_ldp.context.saveRecordContext(this);
	},
	activate: function(on) {
		if (on) {
			var hasToBeSave;
			syra_ldp.ldpRecord && syra_ldp.ldpRecord.activate(false);
			syra_ldp.ldpRecord = this;
			if (!this.contentActions) {
				this.contentActions = syra_dom.div("");
				this.addContentActions();
			}
			syra_ldp.contentActions.appendChild(this.contentActions);
			this.$vignettes = {};
			if (this.dataset.vignettes) {
				var $diagnoses = [];
				for (var ii = 0, jj = this.dataset.vignettes.length; ii < jj; ii++) {
					var source = syra_site.clone(this.dataset.vignettes[ii]);
					if (source.$links && source.$links.$location) {
						var preferences = this.context.vignettes[source.bind] || {};
						var $altLocation = preferences && preferences.$location;
						source.$links.$location.$url = syra_expression.parse(syra_ldp, source.$links.$location.$url);
						if ($altLocation) {
							$altLocation.$url = syra_expression.parse(syra_ldp, $altLocation.$url);
						}
						syra_ldp.$prototype.$properties[source.bind] = this.$vignettes[source.bind] = {
							$vignetteEndpoint: source.endpoint,
							$vignetteId: source.$uuid,
							$type: "application/x-vignette",
							$title: source.$links.$location.$title,
							$location: source.$links.$location,
							$altLocation: $altLocation
						};
					} else {
						$diagnoses.push({
							$message: syra_local.ldpVignetteNoLocation.replace("{0}", source.bind),
							$severity: "warning"
						});
					}
				}
				if ($diagnoses.length) {
					syra_alert.show($diagnoses, syra_ldp);
				}
			}

			this.useCurrentEndpoint = this.dataset.useCurrentEndpoint;
			var $binds = Object.keys(this.vignettes);
			if ($binds.length) {
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var vignette = this.vignettes[$bind];
					if (vignette) {
						if (!this.$vignettes[$bind]) {
							delete this.vignettes[$bind];
							delete this.$vignettes[$bind];
							delete syra_ldp.$prototype.$properties[$bind];
							if (vignette.layoutParent) {
								syra_layout.extractItem(vignette.layoutParent, vignette, true);
							}
							syra_dom.remove(vignette.layoutSlot);
							syra_item.remove(vignette, true, true);
							if (this.dataset.stdLayout && this.dataset.stdLayout.content) {
								this.dataset.stdLayout.content = syra_layout.cleanBeforeSave(syra_ldp.$item);
							}
						}

					}
				}
			} else {
				if (!this.isLayoutDisplay) {
					var $article = (this.dataset.stdLayout && this.dataset.stdLayout.content) || {};
					$article.$layout = $article.$layout || {};
					$article.$layout.$layoutType = "tabs";
					$article.$layout.$items = $article.$layout.$items || [];
					syra_ldp.$item = syra_site.clone($article);
					syra_ldp.$item.$layout.$tabIndex = syra_ldp.context.getSelectedTab(this);
					syra_localizer.applyPageLocalization(syra_ldp);
					syra_ldp.renderLayoutContent();
				}
			}
			this.isLayoutDisplay = true;

			var $binds = Object.keys(this.$vignettes);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $vignette = this.$vignettes[$bind];
				var field = syra_ldp.boundFields[$bind];
				if (!(field && field.length)) {
					hasToBeSave = true;
					var tab = syra_ldp.layoutContent.getOpenedTab() || this.createNewTab();
					syra_layout.removeSpace(tab.layoutContent);
					this.onVignetteAdded($bind, tab.layoutContent.createChildItem({
						$bind: $bind
					}));
				}
			}

			this.isDesignModeEnabled && syra_site.switchItemDesigner(syra_ldp, true);

			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var vignette = syra_ldp.boundFields[$bind] && syra_ldp.boundFields[$bind][0];
				if (vignette) {
					this.onVignetteAdded($bind, vignette);
				}
			}

			this.addTabBtn && syra_ldp.layoutContent.ensureTabsSlot().appendChild(this.addTabBtn.link);
			syra_ldp.setTitle(this.dataset.title);

			syra_ldp.context.saveSelectedPage(this);
			if (!syra_ldp.body.parentNode) {
				syra_ldp.scrollview.appendChild(syra_ldp.body);
			}
			if (syra_ldp.isPageLoaded) {
				this.list.listView.scrollTo(this.slot);
				hasToBeSave = !!(hasToBeSave && this.isDesignModeEnabled);
				if (syra_ldp.designer) {
					syra_ldp.designer.endLayoutDisplay(hasToBeSave);
				} else {
					syra_layout.ensureArticleVisibility(syra_ldp, true);
				}
			}
		} else {
			this.clear();
		}
		syra_dom.toggleClass(this.slot, "s-selected", on);
	},
	addRefresh: function() {
		this.refreshBtn = syra_button.add({
			parent: this,
			slot: this.contentActions,
			text: syra_local.ldpRefresh,
			css: "s-ldp-btn",
			iconOnly: true,
			fontIcon: "refresh",
			shortCutTip: syra_shortCuts.tip.refresh,
			click: function() {
				var vignettes = syra_ldp.ldpRecord.vignettes;
				var uuids = Object.keys(vignettes);
				for (var ii = 0, jj = uuids.length; ii < jj; ii++) {
					var vignette = vignettes[uuids[ii]];
					if (vignette.refresh && syra_dom.isVisible(vignette.domItem)) {
						vignette.refresh(true);
					}
				}
			}
		});
	},
	save: function() {
		var self = this;
		self.addTabBtn && syra_ldp.layoutContent.ensureTabsSlot().appendChild(self.addTabBtn.link);
		var content = syra_layout.cleanBeforeSave(syra_ldp.$item);
		delete content.$menus;
		delete content.$isModel;
		var stdLayout = self.$prototype.$properties.stdLayout;
		var $save = stdLayout && stdLayout.$item && stdLayout.$item.$links && stdLayout.$item.$links.$save;
		var sending = {
			$etag: 1,
			$url: syra_url.formatMenuUrl(self, $save),
			content: content
		};
		syra_ajax.put({
			lock: true,
			page: syra_ldp,
			url: sending.$url,
			data: sending,
			success: function(data, response, requestUrl) {
				if (!self.disposed && data.content) {
					(self.dataset.stdLayout = self.dataset.stdLayout || {}).content = data.content;
				}
			}
		});
	},
	clear: function() {
		if (syra_ldp) {
			syra_dom.remove(syra_ldp.body);
			if (this.$vignettes) {
				var $binds = Object.keys(this.$vignettes);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					syra_item.remove(this.vignettes[$bind], false, true);
					delete this.vignettes[$bind];
					delete this.$vignettes[$bind];
					delete syra_ldp.$prototype.$properties[$bind];
				}
			}
			if (syra_ldp.ldpRecord == this) {
				syra_fields.advancedState.clearPageButton(syra_ldp);
				delete syra_ldp.ldpRecord;
				delete syra_ldp.$prototype.$localization;
				delete syra_ldp.$prototype.$allLocalization;
				syra_layout.clearContent(syra_ldp.layoutContent);
				syra_site.switchItemDesigner(syra_ldp, false);
			}
			syra_dom.remove(this.contentActions);
		}
		this.isLayoutDisplay = false;
	},
	createNewTab: function() {
		var tab = syra_ldp.layoutContent.loadChildItem(null, {
			$category: "section",
			$isEmptyVisible: true,
			$title: syra_localizer.getDefaultTabTitle(syra_ldp),
		});
		if (this.addTabBtn) {
			syra_ldp.layoutContent.ensureTabsSlot().appendChild(this.addTabBtn.link);
		}
		tab.titleBtn.link.click();
		return tab;
	},
	dispose: function() {
		this.clear();
		syra_item.unregister(this);
		syra_site.disposeObject(this);
	}
});