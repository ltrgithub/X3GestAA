"use strict";
var _helpers = require('syracuse-core').helpers;
var _select = require("./select");
var Sortable = require('syracuse-ui/lib/scroll/sortable').Sortable;

function _edit() {
	var btn = this;
	var record = btn.parent;
	syra_over.openModal(syra_ldp, {
		article: syra_ldp,
		$url: syra_expression.parse(record, btn.$edit.$url),
		$method: btn.$edit.$method,
		onServerSaved: function(menuItem, modal) {
			var newData = modal.page.dataset;
			syra_dataset.applyDelta(syra_ldp, record.dataset, newData);
			if (newData.$diagnoses) {
				syra_alert.show(newData.$diagnoses, record);
			}
			record.title.textContent = record.dataset.title;
			record.slot.title = "";
			if (record.dataset.description && record.dataset.description != record.dataset.title) {
				record.slot.title = record.dataset.description;
			}
			record.list.listView.scrollTo(record.slot);
			record.activate(true);
			modal.close(true);
			return false;
		}
	});
}

function _delete() {
	var btn = this;
	var record = btn.parent;
	syra_alert.ask({
		$title: btn.text,
		$message: syra_expression.parse(record, syra_local.ldpConfirmDelete),
		yes: function() {
			syra_ajax.send({
				lock: true,
				page: syra_ldp,
				method: btn.$delete.$method,
				url: syra_expression.parse(record, btn.$delete.$url),
				data: {
					trackingId: _helpers.uuid.generate()
				},
				success: function(newData, response, requestUrl) {
					if (!syra_ldp.disposed) {
						var list = record.articleParent;
						var index = list.children.indexOf(record);
						if (syra_ldp.ldpRecord == record) {
							record.activate(false);
						}
						list.dataset.splice(list.dataset.indexOf(record.dataset), 1);
						syra_dom.remove(record.slot);
						list.children.splice(index, 1);
						record.dispose();
						if (list.children.length) {
							if (!syra_ldp.ldpRecord) {
								record = list.children[Math.min(index, list.children.length - 1)];
								list.listView.scrollTo(record.slot);
								record.activate(true);
							}
						} else {
							list.ensureNoChild();
						}
					}
				}
			});
		}
	});
}


function UserList() {}

exports.UserList = _helpers.defineClass(UserList, _select.List, {
	load: function() {
		this.level = "userPages";
		this.RecordClass = UserRecord;
		_select.List.prototype.load.call(this, syra_ldp);

		this.header = syra_dom.div("s-ldp-pages-header");
		this.title = syra_dom.text("s-ldp-pages-title", syra_local.ldpUserPages, this.header);
		this.actions = syra_dom.div("s-nav-list-btns", this.header);

		var $create = this.$prototype.$links && this.$prototype.$links.$create;
		if ($create) {
			syra_button.add({
				parent: this,
				slot: this.actions,
				text: $create.$title,
				css: "s-nav-list-btn",
				$create: $create,
				fontIcon: "create",
				click: function() {
					var btn = this;
					var list = btn.parent;
					syra_over.openModal(syra_ldp, {
						article: syra_ldp,
						$url: syra_expression.parse(list, btn.$create.$url),
						$method: btn.$create.$method,
						onServerSaved: function(menuItem, modal) {
							if (!syra_ldp.dataset.userPages) {
								list.dataset = syra_ldp.dataset.userPages = [];
							}
							list.dataset.push(modal.page.dataset);
							var child = list.addChild(modal.page.dataset);
							list.ensureNoChild();
							list.listView.scrollTo(child.slot);
							child.activate(true);
							child.addTabBtn.click();
							modal.close(true);
							return false;
						}
					});
				}

			});
		}

		this.slot.insertBefore(this.header, this.slot.firstChild);
		this.addChildren();
		syra_ldp.context.orderUserRecords(this);

		this.setSortable();

	},
	ensureNoChild: function() {
		if (this.children.length) {
			if (this.noChild) {
				syra_dom.remove(this.noChild);
				delete this.noChild;
			}

		} else {
			syra_dom.empty(this.body);
			(this.noChild = syra_dom.li(syra_ldp.$skin + "-no-records", this.body)).textContent = syra_local.ldpNoPage;
		}
	},
	setHeight: function(height) {
		this.slot.style.height = height + "px";
		this.resize(height - this.header.clientHeight);
	},
	setSortable: function() {
		var self = this;
		self.sortable = new Sortable({
			root: self.listView.scrollSlot,
			handle: self.level,
			scrollview: self.listView.ul,
			start: function(node) {
				this.moved = syra_item.findItem(node);
			},
			setDraggingText: function(node) {
				return this.moved.dataset.title;
			},
			end: function(node) {
				syra_dataset.array.moveTo(self.children, this.moved, syra_dom.getNodeIndex(node));
				syra_ldp.context.saveOrderUserRecords(self);
				delete this.moved;
			}
		});
	},
	dispose: function() {
		this.sortable && this.sortable.dispose();
		_select.List.prototype.dispose.call(this);
	}
});

function UserRecord() {}

_helpers.defineClass(UserRecord, _select.Record, {
	load: function(list, dataset) {
		_select.Record.prototype.load.call(this, list, dataset);
		syra_dom.div("s-list-nav-reorder", this.slot).syraSortableHandle = list.level;
		this.slot.appendChild(this.title);
		var $links = this.$prototype.$links;
		var actions = syra_dom.div("s-list-nav-btn-group", this.slot);
		if ($links.$edit) {
			syra_button.add({
				parent: this,
				slot: actions,
				text: $links.$edit.$title,
				css: "s-list-nav-btn",
				$edit: $links.$edit,
				fontIcon: "edit",
				iconOnly: true,
				click: _edit
			});
		}
		if ($links.$delete) {
			syra_button.add({
				parent: this,
				slot: actions,
				text: syra_local.flDelete,
				fontIcon: "delete",
				$delete: $links.$delete,
				css: "s-list-nav-btn",
				iconOnly: true,
				click: _delete
			});
		}
		this.isDesignModeEnabled = true;
	},
	addContentActions: function() {
		this.addVignetteBtn = syra_button.add({
			parent: this,
			slot: this.contentActions,
			text: syra_local.ldpAddVignette,
			css: "s-ldp-btn",
			iconOnly: true,
			fontIcon: "create",
			shortCutTip: syra_shortCuts.tip.create,
			click: function() {
				var record = this.parent;
				delete record.dataset.$url; //important after creation, $url is the url of the workging copy, this is not ok for adding
				var vignettes = record.$prototype.$properties.vignettes;
				var $select = vignettes && vignettes.$links && vignettes.$links.$select;
				var $url = syra_url.formatMenuUrl(record, $select, record);
				syra_over.openModal(syra_ldp, {
					article: syra_ldp,
					$url: $url,
					$isOkHidden: true,
					onValidate: function(searchPage) {
						var sels = searchPage.selectedVignettes;
						if (sels) {
							var vignettes = [];
							var $index = record.dataset.vignettes.length;
							for (var ii = 0, jj = sels.length; ii < jj; ii++) {
								var sel = sels[ii];
								vignettes.push({
									$uuid: _helpers.uuid.generate(),
									$index: $index++,
									vignette: {
										$uuid: sel.vignette.$key || sel.vignette.$uuid,
										title: sel.vignette.title
									},
									endpoint: {
										$uuid: sel.endpoint.$uuid
									}
								});
							}
							_put(record, {
								vignettes: vignettes
							});
						}
					}
				});
			}
		});
		this.addRefresh();

		this.designBtn = syra_button.add({
			parent: this,
			slot: this.contentActions,
			text: syra_local.ldpOpenDesigner,
			css: "s-ldp-btn",
			iconOnly: true,
			fontIcon: "design",
			click: function() {
				syra_ldp.designer.toggleDesigner();
			}
		});

		this.addTabBtn = syra_button.add({
			parent: this,
			slot: this.contentActions,
			text: "+",
			title: syra_local.ldpAddTab,
			css: "s-ldp-add-tab",
			shortCutTip: syra_shortCuts.tip.newTab,
			click: function() {
				this.parent.createNewTab();
				this.parent.addVignetteBtn.click();
				syra_ldp.designer && syra_ldp.designer.endLayoutDisplay();
			}
		});
	},
	onVignetteAdded: function($bind, vignette) {
		_select.Record.prototype.onVignetteAdded.call(this, $bind, vignette);
		if (!vignette.designBtn) {
			vignette.designBtn = syra_button.add({
				parent: vignette,
				slot: vignette.buttonsSlot,
				text: syra_local.box_design,
				css: vignette.$skin + "-btn",
				iconOnly: true,
				fontIcon: "design",
				click: function() {
					syra_site.switchItemDesigner(this.parent, !this.parent.designer);
				}
			});
		}
		if (!vignette.deleteBtn) {
			vignette.deleteBtn = syra_button.add({
				parent: vignette,
				record: this,
				slot: vignette.buttonsSlot,
				text: syra_local.box_delete,
				css: vignette.$skin + "-btn",
				iconOnly: true,
				fontIcon: "delete",
				click: function() {
					var btn = this;
					var vignette = btn.parent;
					syra_alert.ask({
						$title: syra_local.ldpDeleteVignette,
						$message: syra_local.ldpConfirmDeleteVignette.replace("{0}", vignette.getTitle()),
						yes: function() {
							btn.record.deleteVignettes([vignette]);
						}
					});
				}
			});
		}
	},
	deleteVignettes: function(vignetteFields, success) {
		_put(this, {
			vignettes: vignetteFields.map(function(vignetteField) {
				return {
					$isDeleted: true,
					$uuid: vignetteField.$field.$vignetteId
				};
			})
		}, success);
	}
});

function _put(record, sending, success) {
	sending.$uuid = record.dataset.$uuid;
	sending.$url = sending.$url || (syra_expression.parse(record, record.dataset.$url || record.$prototype.$url));
	syra_ajax.put({
		lock: true,
		page: syra_ldp,
		url: sending.$url,
		data: sending,
		success: function(newData, response, requestUrl) {
			if (!syra_ldp.disposed) {
				syra_dataset.applyDelta(syra_ldp, record.dataset, newData);
				if (newData.$diagnoses) {
					syra_alert.show(newData.$diagnoses, record);
				}
				success && success();
				record.activate(true);
			}
		}
	});
}