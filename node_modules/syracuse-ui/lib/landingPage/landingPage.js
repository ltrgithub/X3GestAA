"use strict";
var _helpers = require('syracuse-core').helpers;
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var SideBar = require("syracuse-ui/lib/page/tools/sideBar").SideBar;
var Designer = require("./designer").Designer;
var Context = require("./context").Context;
var RoleList = require("./role").RoleList;
var UserList = require("./user").UserList;

function LandingPage() {}

exports.LandingPage = _helpers.defineClass(LandingPage, DesktopPage, {

	getDataUrl: function(article) {
		article = article || this;
		var $parsedUrl = syra_expression.parse(article, article.dataset.$url || article.$prototype.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	initializePage: function($itemPage) {
		return {
			$layout: {
				$items: []
			}
		};
	},

	load: function(initData) {
		this.isMenuBarDisabled = true;
		this.isAutoInsertFieldDisabled = true;
		this.mainPageDesignerAccess = "unknow";
		this.context = new Context();
		this.$defaultSkinBlock = "s-ldp-h2";
		this.$defaultSkinSection = "s-ldp-h1";
		this.$skin = "s-ldp";
		this.isLandingPage = true;
		syra_ldp = this;
		this.$isEditMode = true;
		var data = {};
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.load.call(this, data);
		this.menuBar = new SideBar();
		this.menuBar.preferenceKey = "ldpbar";
		this.menuBar.options = {
			resizeDirection: "left",
			$skin: "s-ldpm-bar"
		};
		this.menuBar.slot = syra_dom.div("s-ldpm-bar-slot");
		this.menuBar.body = syra_dom.div("s-ldpm-bar-body");
		if (this.$facet != "$landing_edit") {
			this.domItem.insertBefore(this.menuBar.slot, this.domItem.firstChild);
		}
		this.menuBar.load(this);

		(this.roleList = new RoleList()).load(this);

		if (syra_site.userProfile.hasDesignRight()) {
			(this.userList = new UserList()).load(this);
		}

		this.contentActions = syra_dom.div("s-ldp-head-btns", this.header);

		var record;
		var $uuid = this.context.getSelectedPage() || this.dataset.$selected;
		if ($uuid !== undefined) {
			record = this.roleList.map[$uuid] || (this.userList && this.userList.map[$uuid]);
		}
		if (!record) {
			record = this.roleList.children[0] || (this.userList && this.userList.children[0]);
		}
		record && record.activate(true);
	},
	section_onAfterOpentTab: function(section) {
		if (this.ldpRecord) {
			this.designer && this.designer.onTabClik(section);
			this.context.setSelectedTab(this.ldpRecord, this.layoutContent.items.indexOf(section));
		}
	},
	resizeItem: function(resize, articleParent) {
		DesktopPage.prototype.resizeItem.call(this, resize, articleParent);
		if (this.menuBar) {
			var height = this.menuBar.body.clientHeight;
			var roleHeight = this.roleList.listView.ul.scrollHeight;
			var userHeight;
			if (this.userList) {
				var headerHeight = this.userList.header.clientHeight;
				if (roleHeight > (height / 2)) {
					userHeight = Math.min(headerHeight + this.userList.listView.ul.scrollHeight, height / 2);
				} else {
					userHeight = (height - roleHeight);
				}
				this.userList.setHeight(userHeight);
				this.roleList.setHeight(height - userHeight);
			} else {
				this.roleList.setHeight(height);
			}
			if (this.ldpRecord) {
				this.ldpRecord.list.listView.scrollTo(this.ldpRecord.slot);
			}
		}
	},
	applyShortCut: function(shortcuts, event) {
		if (shortcuts.esc && syra_ldp.ldpRecord) {
			if (shortcuts.f5) {
				syra_ldp.ldpRecord.refreshBtn.link.click();
				return true;
			}
			if (shortcuts.insert || (shortcuts.n && !shortcuts.g)) {
				if (event.shiftKey) {
					syra_ldp.ldpRecord.addVignetteBtn.link.click();
				} else {
					syra_ldp.ldpRecord.addTabBtn.link.click();
				}
				return true;
			}
		}
	},
	switchDesigner: function(open) {
		if (open) {
			this.designer = new Designer();
			this.designer.openDesigner(this);
		} else {
			this.designer && this.designer.dispose();
			delete this.designer;
		}
	},
	dispose: function() {
		syra_ldp = null;
		DesktopPage.prototype.dispose.call(this);
	}
});