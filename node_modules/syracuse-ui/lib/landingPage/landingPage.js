"use strict";
var _helpers = require('syracuse-core').helpers;
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var SideBar = require("syracuse-ui/lib/page/aside/sideBar").SideBar;
var Designer = require("./designer").Designer;
var Context = require("./context").Context;

var Scrollbar = require('syracuse-ui/lib/scroll/scrollbar').Scrollbar;
var Sortable = require('syracuse-ui/lib/scroll/sortable').Sortable;
var _content = require("./content");
//refreshMainPageDesignerSecurity etait dans after_load de desktoppage, pas bon a voir qui la mis


function LandingPage() {}

exports.LandingPage = _helpers.defineClass(LandingPage, DesktopPage, {

	getDataUrl: function(article) {
		article = article || this;
		var $parsedUrl = syra_expression.parse(article, article.dataset.$url || article.$prototype.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	initializePage: function($itemPage) {
		return {
			$layout: {
				$items: []
			}
		};
	},

	load: function(initData) {
		this.isMenuBarDisabled = true;
		this.isAutoInsertFieldDisabled = true;
		this.isBackButtonDisabled = true;
		this.mainPageDesignerAccess = "unknow";
		this.context = new Context();
		this.$defaultSkinBlock = "s-ldp-h2";
		this.$defaultSkinSection = "s-ldp-h1";
		this.$skin = "s-ldp";
		this.isLandingPage = true;
		syra_ldp = this;
		this.$isEditMode = true;
		var data = {};
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.load.call(this, data);
		this.menuBar = new SideBar();
		this.menuBar.preferenceKey = "ldpbar";
		this.menuBar.options = {
			resizeDirection: "left",
			$skin: "s-ldpm-bar"
		};
		this.menuBar.slot = syra_dom.div("s-ldpm-bar-slot");
		this.menuBar.body = syra_dom.div("s-ldpm-bar-body");
		if (this.$facet != "$landing_edit") {
			this.domItem.insertBefore(this.menuBar.slot, this.domItem.firstChild);
		}
		this.menuBar.load(this);

		(this.rolePageList = new RolePageList()).load(this);

		if (syra_site.userProfile.hasDesignRight()) {
			(this.userPageList = new UserPageList()).load(this);
		}

		this.contentActions = syra_dom.div("s-ldp-head-btns", this.header);

		var record;
		var $uuid = this.context.getSelectedPage() || this.dataset.$selected;
		if ($uuid !== undefined) {
			record = this.rolePageList.map[$uuid] || (this.userPageList && this.userPageList.map[$uuid]);
		}
		if (!record) {
			record = this.rolePageList.children[0] || (this.userPageList && this.userPageList.children[0]);
		}
		record && record.activate(true);
	},
	section_onAfterOpentTab: function(section) {
		if (this.ldpRecord) {
			this.designer && this.designer.onTabClik(section);
			this.context.setSelectedTab(this.ldpRecord, this.layoutContent.items.indexOf(section));
		}
	},
	resizeItem: function(resize, articleParent) {
		DesktopPage.prototype.resizeItem.call(this, resize, articleParent);
		if (this.menuBar) {
			var height = this.menuBar.body.clientHeight;
			var roleHeight = this.rolePageList.body.scrollHeight;
			var userHeight;
			if (this.userPageList) {
				var headerHeight = this.userPageList.header.clientHeight;
				if (roleHeight > (height / 2)) {
					userHeight = Math.min(headerHeight + this.userPageList.body.scrollHeight, height / 2);
				} else {
					userHeight = (height - roleHeight);
				}
				this.userPageList.setHeight(userHeight);
				this.rolePageList.setHeight(height - userHeight);
			} else {
				this.rolePageList.setHeight(height);
			}
			if (this.ldpRecord) {
				this.scrollToItem(this.ldpRecord.slot, this.ldpRecord.list.scrollview, true);
			}
		}
	},
	applyShortCut: function(shortcuts, event) {
		return _content.applyShortCut(shortcuts, event);
	},
	switchDesigner: function(open) {
		if (open) {
			this.designer = new Designer();
			this.designer.openDesigner(this);
		} else {
			this.designer && this.designer.dispose();
			delete this.designer;
		}
	},
	dispose: function() {
		syra_ldp = null;
		DesktopPage.prototype.dispose.call(this);
	}
});



function List() {}


_helpers.defineClass(List, null, {
	load: function(page) {
		this.articleParent = this.page = page;
		this.map = {};
		this.children = [];
		this.$skin = "s-ldp-pages";
		this.$prototype = page.$prototype.$properties[this.level];
		this.slot = syra_dom.div(this.$skin + "-slot", page.menuBar.body);
		this.bodySlot = syra_dom.div(this.$skin + "-body-slot", this.slot);
		this.scrollview = syra_dom.div(this.$skin + "-scollview", this.bodySlot);
		this.body = syra_dom.ul(this.$skin + "-body", this.scrollview);
		this.scrollBar = new Scrollbar({
			container: this.bodySlot,
			scrollview: this.scrollview
		});
	},
	addChildren: function() {
		var records = this.dataset = syra_ldp.dataset[this.level];
		if (records) {
			for (var ii = 0, jj = records.length; ii < jj; ii++) {
				this.addChild(records[ii]);
			}
		}
		this.ensureNoChild();
	},

	ensureNoChild: function() {
		if (this.children.length) {
			if (this.noChild) {
				syra_dom.remove(this.noChild);
				delete this.noChild;
			}

		} else {
			syra_dom.empty(this.body);
			(this.noChild = syra_dom.li(syra_ldp.$skin + "-no-modules", this.body)).textContent = syra_local.ldpNoPage;
		}
	},
	addChild: function(dataset) {
		var child = new this.RecordClass();
		child.load(this, dataset);
		this.map[dataset.$uuid] = child;
		this.children.push(child);
		return child;
	},
	resize: function(height) {
		this.body.style.height = height + "px";
		this.scrollBar.resize();
	},
	dispose: function() {
		this.scrollBar.dispose();
		syra_item.unregister(this);
		syra_site.disposeObject(this);
	}

});



function Record() {}


_helpers.defineClass(Record, null, {
	load: function(list, dataset) {
		this.list = list;
		this.vignettes = {};
		this.$skin = "s-nav-record";
		syra_item.initialize(syra_ldp, this);
		this.$prototype = list.$prototype.$item;
		this.dataset = dataset || {};
		this.articleParent = this.boxParent = list;

		this.slot = syra_dom.li(this.$skin);
		this.slot.syraItem = this.slot.syrainout = this.id;
		this.slot.syraOnClick = "click";

		this.title = syra_dom.span(this.$skin + "-title", this.slot);
		this.title.textContent = this.dataset.title;
		if (dataset.description && dataset.description != dataset.title) {
			this.slot.title = dataset.description;
		}

		list.body.appendChild(this.slot);

		syra_ldp.context.getRecordContext(this);

	},
	click: function() {
		if (syra_ldp.ldpRecord != this) {
			this.activate(true);
		}
	},
	onItemInOut: function(onEnter, event, target) {
		var self = this;
		if (onEnter) {
			/* self.page.pageActivateTimer = setTimeout(function(){
			 if (self.page && !self.page.disposed) {
			 self.activate(true);
			 }
			 }, 300);*/
		} else {
			/* if (self.page && self.page.pageActivateTimer) {
			 clearTimeout(self.page.pageActivateTimer);
			 delete self.page.pageActivateTimer;
			 }*/
		}
	},

	onVignetteAdded: function($bind, vignette) {
		_content.setVignetteEndpointFlag(this, this.vignettes[$bind] = vignette);
	},
	saveVignetteLocation: function(vignette, menuItem) {
		var context = this.context.vignettes[vignette.$item.$bind] || {};
		vignette.$field.$altLocation = context.$location = syra_site.clone(vignette.$field.$location);
		context.$location.$bind = menuItem.$item.$bind;
		context.$location.$title = menuItem.getTitle();
		if (menuItem.$url) {
			context.$location.$url = menuItem.$url.replace("{$baseUrl}", "{$selectedEpBaseUrl}");
		}
		context.$location.$description = menuItem.$description;
		this.context.vignettes[vignette.$item.$bind] = context;
		syra_ldp.context.saveRecordContext(this);
	},
	activate: function(on) {
		if (on) {
			var hasToBeSave;
			if (syra_ldp.pageActivateTimer) {
				clearTimeout(syra_ldp.pageActivateTimer);
				delete syra_ldp.pageActivateTimer;
			}
			syra_ldp.ldpRecord && syra_ldp.ldpRecord.activate(false);
			syra_ldp.ldpRecord = this;
			if (!this.contentActions) {
				this.contentActions = syra_dom.div("");
				this.addContentActions();
			}
			syra_ldp.contentActions.appendChild(this.contentActions);
			this.$vignettes = {};
			if (this.dataset.vignettes) {
				var $diagnoses = [];
				for (var ii = 0, jj = this.dataset.vignettes.length; ii < jj; ii++) {
					var source = syra_site.clone(this.dataset.vignettes[ii]);
					if (source.$links && source.$links.$location) {
						var preferences = this.context.vignettes[source.bind] || {};
						var $altLocation = preferences && preferences.$location;
						source.$links.$location.$url = syra_expression.parse(syra_ldp, source.$links.$location.$url);
						if ($altLocation) {
							$altLocation.$url = syra_expression.parse(syra_ldp, $altLocation.$url);
						}
						syra_ldp.$prototype.$properties[source.bind] = this.$vignettes[source.bind] = {
							$vignetteEndpoint: source.endpoint,
							$vignetteId: source.$uuid,
							$type: "application/x-vignette",
							$title: source.$links.$location.$title,
							$location: source.$links.$location,
							$altLocation: $altLocation
						};
					} else {
						$diagnoses.push({
							$message: syra_local.ldpVignetteNoLocation.replace("{0}", source.bind),
							$severity: "warning"
						});
					}
				}
				if ($diagnoses.length) {
					syra_alert.show($diagnoses, syra_ldp);
				}
			}

			this.useCurrentEndpoint = this.dataset.useCurrentEndpoint;
			var $binds = Object.keys(this.vignettes);
			if ($binds.length) {
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var vignette = this.vignettes[$bind];
					if (vignette) {
						if (!this.$vignettes[$bind]) {
							delete this.vignettes[$bind];
							delete this.$vignettes[$bind];
							delete syra_ldp.$prototype.$properties[$bind];
							if (vignette.layoutParent) {
								syra_layout.extractItem(vignette.layoutParent, vignette, true);
							}
							syra_dom.remove(vignette.layoutSlot);
							syra_item.remove(vignette, true, true);
							if (this.dataset.stdLayout && this.dataset.stdLayout.content) {
								this.dataset.stdLayout.content = syra_layout.cleanBeforeSave(syra_ldp.$item);
							}
						}

					}
				}
			} else {
				if (!this.isLayoutDisplay) {
					var $article = (this.dataset.stdLayout && this.dataset.stdLayout.content) || {};
					$article.$layout = $article.$layout || {};
					$article.$layout.$layoutType = "tabs";
					$article.$layout.$items = $article.$layout.$items || [];
					syra_ldp.$item = syra_site.clone($article);
					syra_ldp.$item.$layout.$tabIndex = syra_ldp.context.getSelectedTab(this);
					syra_localizer.applyPageLocalization(syra_ldp);
					syra_ldp.renderLayoutContent();
				}
			}
			this.isLayoutDisplay = true;

			var $binds = Object.keys(this.$vignettes);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $vignette = this.$vignettes[$bind];
				var field = syra_ldp.boundFields[$bind];
				if (!(field && field.length)) {
					hasToBeSave = true;
					this.onVignetteAdded($bind, _content.ensureOpenedTab(this).layoutContent.createChildItem({
						$bind: $bind
					}));
				}
			}


			this.isDesignModeEnabled && syra_site.switchItemDesigner(syra_ldp, true);

			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var vignette = syra_ldp.boundFields[$bind] && syra_ldp.boundFields[$bind][0];
				if (vignette) {
					this.onVignetteAdded($bind, vignette);
				}
			}

			this.addTabBtn && syra_ldp.layoutContent.ensureTabsSlot().appendChild(this.addTabBtn.link);
			syra_ldp.setTitle(this.dataset.title);

			syra_ldp.context.saveSelectedPage(this);
			if (!syra_ldp.body.parentNode) {
				syra_ldp.scrollview.appendChild(syra_ldp.body);
			}
			if (syra_ldp.isPageLoaded) {
				syra_ldp.scrollToItem(this.slot, this.list.scrollview, true);
				hasToBeSave = !!(hasToBeSave && this.isDesignModeEnabled);
				if (syra_ldp.designer) {
					syra_ldp.designer.endLayoutDisplay(hasToBeSave);
				} else {
					syra_layout.ensureArticleVisibility(syra_ldp, true);
				}
			}
		} else {
			_content.clear(this);
		}
		syra_dom.toggleClass(this.slot, "s-selected", on);
	},
	dispose: function() {
		_content.clear(this);
		syra_item.unregister(this);
		syra_site.disposeObject(this);
	}
});

function RolePageList() {}

_helpers.defineClass(RolePageList, List, {
	load: function(page) {
		this.level = "rolePages";
		this.RecordClass = RolePage;
		List.prototype.load.call(this, page);
		this.addChildren();
	},
	setHeight: function(height) {
		this.slot.style.height = height + "px";
		this.bodySlot.style.height = height + "px";
		this.scrollBar.resize();
	}

});

function RolePage() {}

_helpers.defineClass(RolePage, Record, {
	addContentActions: function() {
		_content.actions.addRefresh(this);
	}
});


function UserPageList() {}

_helpers.defineClass(UserPageList, List, {
	load: function() {
		this.level = "userPages";
		this.RecordClass = UserPage;
		List.prototype.load.call(this, syra_ldp);

		this.header = syra_dom.div("s-ldp-pages-header");
		this.title = syra_dom.text("s-ldp-pages-title", syra_local.ldpUserPages, this.header);
		this.actions = syra_dom.div("s-ldp-pages-actions", this.header);

		var $create = this.$prototype.$links && this.$prototype.$links.$create;
		if ($create) {
			syra_button.add({
				parent: this,
				slot: this.actions,
				text: $create.$title,
				css: "s-nav-edit-list-action",
				$create: $create,
				fontIcon: "create",
				click: function() {
					var btn = this;
					var list = btn.parent;
					syra_over.openModal(syra_ldp, {
						article: syra_ldp,
						$url: syra_expression.parse(list, btn.$create.$url),
						$method: btn.$create.$method,
						onServerSaved: function(menuItem, modal) {
							if (!syra_ldp.dataset.userPages) {
								list.dataset = syra_ldp.dataset.userPages = [];
							}
							list.dataset.push(modal.page.dataset);
							var child = list.addChild(modal.page.dataset);
							list.ensureNoChild();
							syra_ldp.scrollToItem(child.slot, list.scrollview, true);
							child.activate(true);
							child.addTabBtn.click();
							modal.close(true);
							return false;
						}
					});
				}

			});
		}

		this.slot.insertBefore(this.header, this.slot.firstChild);
		this.addChildren();
		syra_ldp.context.orderUserPages(this);

		this.setSortable();

	},
	setHeight: function(height) {
		this.slot.style.height = height + "px";
		this.bodySlot.style.height = (height - this.header.clientHeight) + "px";
		this.scrollBar.resize();
	},
	setSortable: function() {
		var self = this;
		self.sortable = new Sortable({
			root: self.body,
			handle: self.level,
			scrollview: self.scrollBar.scrollview,
			start: function(node) {
				this.moved = syra_item.findItem(node);
			},
			setDraggingText: function(node) {
				return this.moved.dataset.title;
			},
			end: function(node) {
				syra_dataset.array.moveTo(self.children, this.moved, syra_dom.getNodeIndex(node));
				syra_ldp.context.saveOrderUserPages(self);
				delete this.moved;
			}
		});
	},
	dispose: function() {
		this.sortable && this.sortable.dispose();
		List.prototype.dispose.call(this);
	}
});

function UserPage() {}

function _editUserPage() {
	var btn = this;
	var record = btn.parent;
	syra_over.openModal(syra_ldp, {
		article: syra_ldp,
		$url: syra_expression.parse(record, btn.$edit.$url),
		$method: btn.$edit.$method,
		onServerSaved: function(menuItem, modal) {
			var newData = modal.page.dataset;
			syra_dataset.applyDelta(syra_ldp, record.dataset, newData);
			if (newData.$diagnoses) {
				syra_alert.show(newData.$diagnoses, record);
			}
			record.title.textContent = record.dataset.title;
			record.slot.title = "";
			if (record.dataset.description && record.dataset.description != record.dataset.title) {
				record.slot.title = record.dataset.description;
			}
			syra_ldp.scrollToItem(record.slot, record.list.scrollview, true);
			record.activate(true);
			modal.close(true);
			return false;
		}
	});
}

function _deleteUserPage() {
	var btn = this;
	var record = btn.parent;
	syra_alert.ask({
		$title: btn.text,
		$message: syra_expression.parse(record, syra_local.ldpConfirmDelete),
		yes: function() {
			syra_ajax.send({
				page: syra_ldp,
				method: btn.$delete.$method,
				url: syra_expression.parse(record, btn.$delete.$url),
				data: {
					trackingId: _helpers.uuid.generate()
				},
				success: function(newData, response, requestUrl) {
					if (!syra_ldp.disposed) {
						var list = record.articleParent;
						var index = list.children.indexOf(record);
						if (syra_ldp.ldpRecord == record) {
							record.activate(false);
						}
						list.dataset.splice(list.dataset.indexOf(record.dataset), 1);
						syra_dom.remove(record.slot);
						list.children.splice(index, 1);
						record.dispose();
						if (list.children.length) {
							if (!syra_ldp.ldpRecord) {
								record = list.children[Math.min(index, list.children.length - 1)];
								syra_ldp.scrollToItem(record.slot, list.scrollview, true);
								record.activate(true);
							}
						} else {
							list.ensureNoChild();
						}
					}
				}
			});
		}
	});
}

_helpers.defineClass(UserPage, Record, {
	load: function(list, dataset) {
		Record.prototype.load.call(this, list, dataset);
		syra_dom.div("s-nav-record-reorder", this.slot).syraSortableHandle = list.level;
		this.slot.appendChild(this.title);
		var $links = this.$prototype.$links;
		var actions = syra_dom.div("s-nav-record-btns", this.slot);
		if ($links.$edit) {
			syra_button.add({
				parent: this,
				slot: actions,
				text: $links.$edit.$title,
				css: "s-nav-record-btn",
				$edit: $links.$edit,
				fontIcon: "edit",
				iconOnly: true,
				click: _editUserPage
			});
		}
		if ($links.$delete) {
			syra_button.add({
				parent: this,
				slot: actions,
				text: syra_local.flDelete,
				fontIcon: "delete",
				$delete: $links.$delete,
				css: "s-nav-record-btn",
				iconOnly: true,
				click: _deleteUserPage
			});
		}
		this.isDesignModeEnabled = true;
	},
	addContentActions: function() {
		_content.actions.addVignette(this);
		_content.actions.addRefresh(this);
		_content.actions.addDesign(this);
		_content.actions.addTab(this);
	},
	onVignetteAdded: function($bind, vignette) {
		_content.setVignetteEndpointFlag(this, this.vignettes[$bind] = vignette);
		_content.actions.vignette.addDesign(this, vignette);
		_content.actions.vignette.addDelete(this, vignette);
	}
});