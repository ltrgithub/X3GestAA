"use strict";

function _getHost(url) {
	var reg = new RegExp('^(?:f|ht)tp(?:s)?\://([^/]+)', 'im');
	var parts = url.match(reg);
	return parts ? parts[1].toString() : null;
};

exports.appendHost = function(url) {
	var host = _getHost(url);
	if (!host) {
		var href = window.location.href;
		url = href.slice(0, href.indexOf(window.location.host) + window.location.host.length) + url;
	}
	return url;
};

//document.site.urlMaker.applyParameters()

exports.isSyracuseURL = function(url) {
	var host = _getHost(url);
	return host ? host == window.location.host : true;
};

exports.parse = function(url) {
	var limit = url.indexOf('?');
	var parts = {
		uri: url.slice(0, limit),
		params: {},
		target: "$page"
	};
	var params = url.slice(limit + 1).split('&');
	for (var ii = 0, jj = params.length; ii < jj; ii++) {
		var hash = params[ii].split("=");
		parts.params[hash[0]] = decodeURIComponent(hash[1]);
	}
	if (!(parts.endpoint = parts.params.endpoint)) {
		var sdataIndex = url.search(/\/sdata\//i);
		if (sdataIndex >= 0) {
			parts.endpoint = url.slice(sdataIndex + ("/sdata/").length).split("/").slice(0, 3).join(".");
		} else {
			var x3Index = url.search(/\/trans\//i);
			if (x3Index >= 0) {
				parts.endpoint = url.slice(x3Index + ("/trans/").length).split("/").slice(0, 3).join(".");
				parts.target = "trans";
				parts.isFusion = true;
			} else {
				parts.endpoint = document.site.userProfile ? document.site.userProfile.getSelectedEndpointString() : null;
			}
		}
	}
	// crnit: don't put a default endpoint name, this will allow to detect if no endpoint was selected in user profile
	// but keep endpoint parts with default values (for now ?)
	// parts.endpoint = parts.endpoint || "syracuse.collaboration.syracuse";
	parts.endpoint = parts.endpoint;
	//var endpointParts = parts.endpoint.split(".");
	var endpointParts = (parts.endpoint || "syracuse.collaboration.syracuse").split(".");
	//
	if (endpointParts.length == 3) {
		parts.endpointParts = {
			application: endpointParts[0],
			contract: endpointParts[1],
			dataset: endpointParts[2]
		};
	}

	if (parts.params.representation) {
		var result = parts.params.representation.split(".");
		parts.representationRoot = result[0];
		parts.$facet = result[1];
	}
	return parts;
};

exports.applyParameters = function(url, params) {
	var paramObj = {};
	var paramString, key, ii, jj;
	var paramsStart = url.lastIndexOf("?");
	if (paramsStart >= 0) {
		var parts = url.slice(paramsStart + 1).split("&");
		for (ii = 0, jj = parts.length; ii < jj; ii++) {
			var part = parts[ii];
			var valueStart = part.indexOf("=");
			paramObj[part.substring(0, valueStart)] = part.substring(valueStart + 1);
		}
		url = url.substring(0, paramsStart);
	}
	var $keys = Object.keys(params);
	for (ii = 0, jj = $keys.length; ii < jj; ii++) {
		key = $keys[ii];
		if (params[key] === null) {
			delete paramObj[key];
		} else {
			if (params[key] !== undefined) {
				paramObj[key] = encodeURIComponent(params[key]);
			}
		}
	}
	paramString = "";
	$keys = Object.keys(paramObj);
	for (ii = 0, jj = $keys.length; ii < jj; ii++) {
		key = $keys[ii];
		paramString += "&" + key + "=" + paramObj[key];
	}
	url += "?" + paramString.slice(1);
	return url;
};