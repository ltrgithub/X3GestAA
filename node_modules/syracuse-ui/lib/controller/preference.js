"use strict";

function _savePage(page) {
	if (page.$newPreferences.$link) {
		var sendBag = {
			$etag: 1,
			$url: syra_url.formatMenuUrl(page, page.$newPreferences.$link),
			content: page.$newPreferences.content
		};
		syra_http.put({
			page: page,
			url: sendBag.$url,
			data: sendBag,
			$etag: sendBag.$etag,
			success: function(data, response, requestUrl) {}
		});
	}
}

exports.page = {
	get: function(page, $key) {
		return page.$newPreferences && page.$newPreferences.content[$key];
	},
	save: function(page, $key, data) {
		if (page.$newPreferences && !page.isVignettePage) {
			page.$newPreferences.content[$key] = data;
			_savePage(page);
		}
	},
	getField: function(field) {
		var $fields = field.page.$newPreferences && field.page.$newPreferences.content.$fields;
		return ($fields && $fields[field.$item.$bind]) || {};
	},
	saveField: function(field, data) {
		if (!field.page.isVignettePage) {
			if (data) {
				field.$newPreferences = data;
			}
			(field.page.$newPreferences.content.$fields = field.page.$newPreferences.content.$fields || {})[field.$item.$bind] = field.$newPreferences;
			_savePage(field.page);
		}
	},
	load: function(page, $representation) {
		page.$newPreferences = {};
		if (!page.isVignettePage) {
			page.$newPreferences.$link = $representation.$links && $representation.$links.$userPreferences;
			page.$newPreferences.content = $representation.$newPreferences && $representation.$newPreferences.content;
		}
		page.$newPreferences.content = page.$newPreferences.content || {};
	},
	reset: function(page) {
		if (page) {
			syra_diagnose.box.show({
				$title: syra_local.aw_deleteMessageTitle,
				$message: syra_local.aw_deletePreferences,
				$type: "question",
				$buttons: "yesno",
				callback: function(response) {
					if (response && response.$clientId == "yes") {
						if (page.$newPreferences) {
							page.$newPreferences.content = {};
							_savePage(page);
						}
						if (page.isLandingPage) {
							var $binds = Object.keys(page.boundFields);
							for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
								var vignette = page.boundFields[$binds[ii]];
								vignette = vignette && vignette[0] && vignette[0].vignette;
								if (vignette && vignette.$newPreferences) {
									vignette.$newPreferences.content = {};
									_savePage(vignette);
								}
							}
						}
						for (var ii = 0, jj = page.bars.length; ii < jj; ii++) {
							page.bars[ii].clearPreferences();
						}
						var lists = syra_item.getLists(page);
						for (var ii = 0, jj = lists.length; ii < jj; ii++) {
							var list = lists[ii];
							list.paging && list.paging.clearPreferences();
							list.builder.clearPreferences && list.builder.clearPreferences();
						}
						page.resizeItem(true);
					}
				}
			});
		}
	}
};


exports.profile = {
	get: function(key, defaultValues, target) {
		var values = syra_site.userProfile.dataset.sitePreferences;
		if (values) {
			values = (values[syra_site.$device] || {})[key];
		}
		if (values === undefined && syra_site.$preferences) {
			values = syra_site.$preferences[key];
		}
		values = values || {};
		if (defaultValues) {
			var keys = Object.keys(defaultValues);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				if (values[keys[ii]] === undefined) {
					values[keys[ii]] = defaultValues[keys[ii]];
				}
			}
		}
		target && this.applyValues(target, values);
		return values;
	},
	save: function(key, source, props) {
		var userProfile = syra_site.userProfile;
		var values = userProfile.dataset.sitePreferences = userProfile.dataset.sitePreferences || {};
		var preferences = values[syra_site.$device] = values[syra_site.$device] || {};
		if (source || props) {
			if (props) {
				this.applyValues(preferences[key] = preferences[key] || {}, source, props);
			} else {
				preferences[key] = source;
			}
		} else {
			delete values[syra_site.$device][key];
		}
		if (!userProfile.saveSiteTimeout) {
			userProfile.saveSiteTimeout = setTimeout(function() {
				if (syra_site && !userProfile.disposed) {
					userProfile.saveSiteTimeout = null;
					syra_form.getSendBag(userProfile).sitePreferences = values;
					syra_form.postAction(userProfile, null, userProfile, {
						$save: {
							$isRequested: true
						}
					}, true);
				}
			}, 3000);
		}
	},
	applyValues: function(target, values, keys) {
		if (target) {
			keys = keys || Object.keys(values);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				target[keys[ii]] = values[keys[ii]];
			}
		}
	}
};