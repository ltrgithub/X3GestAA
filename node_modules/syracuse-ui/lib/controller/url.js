"use strict";
var _globals = require('streamline-runtime').globals;

var _URL_KEY_PARAM = "?url=";

function _getSdataUrl(url) {
	var param = url.search(/\?url=/i);
	if (param >= 0) {
		return decodeURIComponent(url).slice(param + (_URL_KEY_PARAM).length);
	}
	return url;
}

function _setUrlParameter(url) {
	return (url.indexOf(_URL_KEY_PARAM) >= 0) ? url : (_URL_KEY_PARAM + encodeURIComponent(url));
}

function _getSdataIndex($url) {
	return $url.search(/\/sdata\//i);
}

exports.history = {
	index: 0,
	stateKey: "sage_erp_x3_",
	addBackButton: function(page) {
		if (!page.isBackButtonDisabled && page.menuBar) {
			if (window.history.length > 1) {
				var hasBack, hasForward = this.index > 0;
				var state = window.history.state;
				if ((state && state.indexOf(this.stateKey) == 0)) {
					hasBack = true;
					hasForward = state != (this.stateKey + this.index);
				}
				var slot = document.createElement("div");
				syra_button.add({
					parent: page,
					slot: slot,
					text: syra_local.site_history_prev_link,
					css: "s-mn-history-btn",
					fontIcon: "reload_back",
					isDisabled: !hasBack,
					checkWorkingCopy: true,
					click: function() {
						window.history.back();
					}
				});
				var btn = syra_button.add({
					parent: page,
					slot: slot,
					text: syra_local.site_history_next_link,
					css: "s-mn-history-btn",
					fontIcon: "reload_next",
					isDisabled: !hasForward,
					checkWorkingCopy: true,
					click: function() {
						window.history.forward();
					}
				});
				btn.iconflag.parentNode.appendChild(btn.iconflag);
				btn.iconflag.className += " s-mn-history-btn-forward";
				page.menuBar.body.insertBefore(slot, page.menuBar.body.firstChild);
			}
		}
	},
	getUrlSegment: function($url) {
		return exports.parse(_getSdataUrl($url || document.location.href));
	},
	setHref: function(menu, record, isExternal) {
		if (menu.articleParent) {
			menu.$url = exports.formatMenuUrl(menu.articleParent, menu, record);
		}
		menu.isNoSyracuseUrl = menu.$type == "html" || ((menu.$url.indexOf("http") >= 0 && menu.$url.indexOf(window.location.host) < 0));
		if (!menu.isNoSyracuseUrl) {
			var page = menu.page;
			if (page && (page.$facet == "$details" || page.$facet == "$edit")) {
				if (menu.$url.indexOf("query") >= 0 && menu.page) {
					this.queryPageSession.complete(menu);
				}
			}
		}

		menu.domItem.setAttribute("href", menu.href = menu.isNoSyracuseUrl ? menu.$url : _setUrlParameter(menu.$url));
		if (isExternal || menu.isNoSyracuseUrl) {
			menu.domItem.setAttribute("target", menu.$target = (menu.$target || "blank"));
		}
	},
	ensureProxy: function($url) {
		var lower = $url.toLowerCase();
		if (lower.indexOf(window.location.protocol) == 0 && lower.indexOf(window.location.protocol + "//" + window.location.host) != 0) {
			$url = "/proxy" + _setUrlParameter($url);
		}
		return $url;
	},
	changeMainPage: function(onHistoryChange) {
		// handle LTR / RTL switch
		var lp = _globals.context && _globals.context.localePreferences;
		var rtl = lp && lp.code && /^(ar|iw|he)/.test(lp.code);
		var href = document.location.href;
		var qm = href.indexOf('?');
		if (rtl && !/rtl=true/.test(href)) {
			href += (qm < 0 ? '?' : '&') + 'rtl=true';
		} else {
			if (!rtl) {
				href = href.replace(/(\?|\&)rtl=true/, '');
			}
		}
		if (href != document.location.href) {
			syra_site.isSiteReloading = true;
			document.location.href = href;
		} else {
			syra_router.changeMainPage(_getSdataUrl(href), null, onHistoryChange);
		}
	},
	load: function(opt) {
		var param = (opt.isDefaultUrl === false) ? opt.$url : _setUrlParameter(opt.$url);
		if (opt.target == "blank") {
			window.open(param, "_blank");
		} else {
			window.history[opt.replaceState ? "replaceState" : "pushState"](this.stateKey + (++this.index), param, param);
			syra_router.changeMainPage(_getSdataUrl(opt.$url), opt.$itemPage);
		}
	},
	reloadSite: function() {
		syra_site.isSiteReloading = true;
		document.location.reload(true);
	},
	cancelChange: function() {
		this._updateHitory = true;
		window.history.forward();
	},
	start: function() {
		var self = this;
		this.changeMainPage();
		window.onpopstate = function(event) {
			if (self._updateHitory) {
				self._updateHitory = false;
			} else {
				syra_site.mainPage && self.changeMainPage(true);
			}
		};
	},
	update: function(mainPage, $url) {
		var param = _setUrlParameter($url);
		window.history.replaceState("$updateHitory", param, param);
		mainPage.urlSeg = exports.parse($url);
	},
	queryPageSession: {
		save: function(page) {
			if (sessionStorage) {
				if (page.urlSeg && page.urlSeg.$facet == "$query") {
					sessionStorage.setItem(page.urlSeg.uri, JSON.stringify(page.urlSeg));
				}
			}
		},
		complete: function(menu) {
			if (sessionStorage) {
				var segments = exports.parse(menu.$url);
				var last = sessionStorage.getItem(segments.uri);
				if (last) {
					last = JSON.parse(last);
					if (last.params) {
						segments.params = segments.params || {};
						var keys = Object.keys(last.params);
						var changed;
						for (var ii = 0, jj = keys.length; ii < jj; ii++) {
							var key = keys[ii];
							if (segments.params[key] == undefined) {
								changed = true;
								segments.params[key] = last.params[key];
								if (menu.$sourceUrl) {
									menu.$sourceUrl += "&" + key + "=" + encodeURIComponent(last.params[key]);
								}
							}
						}
						if (changed) {
							menu.$url = exports.build(segments);
						}
					}
				}
			}
		}
	}
};

var _parameters = {
	openModal: function(article, values, $parameters, record, callback) {
		var $itemPage;
		if (!$parameters.$url) {
			var $prototype = syra_site.clone($parameters);
			var $properties = $prototype.$properties || {};
			if (values) {
				var keys = Object.keys(values);
				for (var ii = keys.length - 1; ii >= 0; ii--) {
					var $bind = keys[ii];
					$prototype[$bind] = values[$bind];
					var $field = $properties[$bind];
					if ($field && $field.$type == "application/x-boolean") {
						switch ($prototype[$bind]) {
							case "true":
								$prototype[$bind] = true;
								break;
							case "false":
								$prototype[$bind] = false;
								break;
						}
					}
				}
			}
			if (article.$prototype && article.$prototype.$localization) {
				$prototype.$localization = article.$prototype.$localization;
			}
			$prototype.$title = $parameters.$title || syra_local.siteParametersTitle;
			$itemPage = {
				$category: "page",
				$facet: "$edit",
				$representation: {
					$prototype: $prototype
				}
			};
		}
		syra_over.openModal(article, {
			$itemPage: $itemPage,
			$url: $parameters.$url,
			$method: $parameters.$method || "GET",
			article: article,
			initData: values,
			onOpened: function(pn) {
				pn.page.isModalParameter = true;
				if ($parameters && $parameters.$url) {
					var keys = Object.keys(values);
					var fields = pn.page.boundFields;
					if (fields) {
						for (var ii = 0, jj = keys.length; ii < jj; ii++) {
							var prop = keys[ii];
							var $defaultValue = values[prop];
							var field = fields[prop] && fields[prop][0];
							if (field) {
								field.setValue($defaultValue);
								syra_form.update(field, field.currentValue);
							}
						}
					}
				}
			},
			onValidate: function(page, modal) {
				if (!($parameters && $parameters.$url)) {
					if (syra_form.validate(page)) { //no working pah, so no save server
						modal.options.onServerSaved(null, modal);
						return false;
					}
					return false;
				}
				return true; //validate is done by save action 
			},
			onServerSaved: function(saveItem, modal) {
				var page = modal.page;
				var $properties = page.$prototype && page.$prototype.$properties;
				var fields = page.boundFields;
				var keys = Object.keys(page.dataset);
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					var prop = keys[ii];
					if (prop.slice(0, 1) !== "$") {
						var $field = $properties && $properties[prop];
						var field = fields && fields[prop];
						if ($field && field && field[0] && $field.$type === "application/x-reference" && field[0].currentValue && field[0].currentValue.$uuid) {
							values[prop] = page.boundFields[prop][0].currentValue.$uuid;
						} else {
							values[prop] = page.dataset[prop];
						}
					}
				}
				callback(values);
				modal.close(true);
				return false;
			},
			close: function(isCanceled) {
				if (isCanceled) {
					callback(null, true); //input propoerties was canceled 
				}
			}
		});
	},
	openSelectModal: function(article, values, $parameters, record, callback) {
		syra_over.openModal(article, {
			article: article,
			$url: ($parameters.$actions.$select || $parameters.$actions.$lookup).$url,
			onValidate: $parameters.$actions.$select &&
				function(page) {
					if (page.selectedRecords) {
						values.$select = page.selectedRecords;
						callback(values);
						return;
					}
					callback(null, true); //input propoerties was canceled
			},
			close: function(isCanceled) {
				if (isCanceled) {
					callback(null, true); //input propoerties was canceled 
				}
			},
			onSelectRecord: function(selectedRecords, page) {
				if ($parameters.$actions.$lookup) {
					values.$select = Object.keys(selectedRecords)[0];
					callback(values);
					return true;
				}
				page.selectedRecords = Object.keys(selectedRecords).map(function(rec) {
					return selectedRecords[rec].dataset;
				});
				return false;
			}
		});
	}
};



function _getHost($url) {
	var reg = new RegExp('^(?:f|ht)tp(?:s)?\://([^/]+)', 'im');
	try {
		var parts = $url.match(reg);
	} catch (error) {}
	return parts ? parts[1].toString() : null;
};

exports.addHost = function($url) {
	var host = _getHost($url);
	if (!host) {
		var href = window.location.href;
		$url = href.slice(0, href.indexOf(window.location.host) + window.location.host.length) + $url;
	}
	return $url;
};

exports.replaceSegmentEndpoint = function(segments, newEndpoint, check) {
	if (newEndpoint && segments.endpointSeg) {
		if (!check || (segments.endpointSeg.application === newEndpoint.application && segments.endpointSeg.contract === newEndpoint.contract)) {
			segments.endpoint = [segments.endpointSeg.application = newEndpoint.application || "", segments.endpointSeg.contract = newEndpoint.contract || "", segments.endpointSeg.dataset = newEndpoint.dataset || ""].join(".");
			segments.$url = exports.build(segments);
			return true;
		}
	}
	return false;
};

exports.stringifyUrlEndpoint = function(endpointSeg) {
	return (endpointSeg.application || "") + "/" + (endpointSeg.contract || "") + "/" + (endpointSeg.dataset || "");
};

exports.stringifyEndpoint = function(endpoint) {
	return endpoint ? (endpoint.application + "." + endpoint.contract + "." + endpoint.dataset) : "";
};

exports.getBaseUrl = function(segments) {
	var epStr = exports.stringifyUrlEndpoint(segments.endpointSeg);
	return segments.uri.slice(0, segments.uri.lastIndexOf(epStr) + epStr.length);
};

exports.build = function(segments) {
	if (segments) {
		if (segments.endpointSeg) {
			var parts = segments.uri.split("/");
			for (var ii = 0, jj = parts.length; ii < jj; ii++) {
				switch (parts[ii].toLowerCase()) {
					case "sdata":
					case "trans":
						parts[ii + 1] = segments.endpointSeg.application || "";
						parts[ii + 2] = segments.endpointSeg.contract || "";
						parts[ii + 3] = segments.endpointSeg.dataset || "";
						segments.uri = parts.join("/");
						ii = jj; //end loop
						break;
				}
			}
		}
		if (segments.params) {
			var paramString = "";
			var keys = Object.keys(segments.params);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				paramString += "&" + keys[ii] + "=" + encodeURIComponent(segments.params[keys[ii]]);
			}
			segments.$url = segments.uri + "?" + paramString.slice(1);
		}
	}
	return segments.$url;
};
exports.replaceFusionCode = function(seg, newCode) {
	if (seg.params && seg.params.f) {
		var parts = seg.params.f.split("/");
		parts[0] = newCode;
		seg.params.f = parts.join("/");
		parts = newCode.split("~");
		seg.fusionParams = {
			fullCode: newCode,
			functionCode: parts[0]
		};
		if (parts.length > 1) {
			seg.fusionParams.transaction = parts[1];
		}
	}
};

exports.parse = function($url, isSyracuse) {
	var limit = $url.indexOf('?');
	var segments = {
		$url: $url,
		uri: limit >= 0 ? $url.slice(0, limit) : $url,
		params: {},
		target: "$page"
	};
	var params = limit >= 0 ? $url.slice(limit + 1).split('&') : [];
	for (var ii = 0, jj = params.length; ii < jj; ii++) {
		var hash = params[ii].split("=");
		segments.params[hash[0]] = decodeURIComponent(hash[1]);
	}
	if (!(segments.endpoint = segments.params.endpoint)) {
		var sdataIndex = _getSdataIndex($url);
		if (sdataIndex >= 0) {
			segments.endpoint = $url.slice(sdataIndex + ("/sdata/").length).split("/").slice(0, 3).join(".");
		} else {
			var x3Index = $url.search(/\/trans\//i);
			if (x3Index >= 0) {
				segments.endpoint = $url.slice(x3Index + ("/trans/").length).split("/").slice(0, 3).join(".");
				segments.target = "trans";
				segments.isFusion = true;
				if (segments.params && segments.params.f) {
					segments.fusionParams = {};
					segments.fusionParams.fullCode = segments.params.f.split("/")[0];
					var parts = segments.fusionParams.fullCode.split("~");
					segments.fusionParams.functionCode = parts[0];
					if (parts.length > 1) {
						segments.fusionParams.transaction = parts[1];
					}
				}
			} else {
				segments.endpoint = exports.stringifyEndpoint(syra_site.userProfile && syra_site.userProfile.getSelectedEndpoint());
			}
		}
	}
	var endpointSeg = segments.endpoint;
	if (!endpointSeg) {
		segments.hasNoEndpoint = true;
		endpointSeg = "syracuse.collaboration.syracuse";
	}
	endpointSeg = endpointSeg.split(".");
	if (endpointSeg.length == 3) {
		segments.endpointSeg = {
			application: endpointSeg[0],
			contract: endpointSeg[1],
			dataset: endpointSeg[2]
		};
	}

	if (segments.params.representation) {
		var result = segments.params.representation.split(".");
		segments.representationRoot = result[0];
		segments.$facet = result[1];
	}
	//if (isSyracuse) {
	segments.host = _getHost($url);
	segments.isSyracuse = segments.host ? segments.host == window.location.host : true; //no host == relative
	//}
	return segments;
};

exports.applyParameters = function($url, params) {
	var paramObj = {};
	var paramString, key, ii, jj;
	var paramsStart = $url.lastIndexOf("?");
	if (paramsStart >= 0) {
		var parts = $url.slice(paramsStart + 1).split("&");
		for (ii = 0, jj = parts.length; ii < jj; ii++) {
			var part = parts[ii];
			var valueStart = part.indexOf("=");
			paramObj[part.substring(0, valueStart)] = part.substring(valueStart + 1);
		}
		$url = $url.substring(0, paramsStart);
	}
	var $keys = Object.keys(params);
	for (ii = 0, jj = $keys.length; ii < jj; ii++) {
		key = $keys[ii];
		if (params[key] === null) {
			delete paramObj[key];
		} else {
			if (params[key] !== undefined) {
				paramObj[key] = encodeURIComponent(params[key]);
			}
		}
	}
	paramString = "";
	$keys = Object.keys(paramObj);
	for (ii = 0, jj = $keys.length; ii < jj; ii++) {
		key = $keys[ii];
		paramString += "&" + key + "=" + paramObj[key];
	}
	$url += "?" + paramString.slice(1);
	return $url;
};
/**************************  FORMAT   **********************************************/
exports.formatParameters = function(article, $parameters, record, callback) {
	var values = {};
	var props = Object.keys($parameters);
	for (var ii = 0, jj = props.length; ii < jj; ii++) {
		var prop = props[ii];
		switch (prop) {
			case "$properties":
			case "$":
			case "$links":
			case "$actions":
				break;
			default:
				var expression = $parameters[prop];
				if (expression && typeof(expression) == "string") {
					expression = prop == "$url" ? syra_expression.parseUrl(article, expression, record) : syra_expression.parse(article, expression, record);
				}
				values[prop] = expression;
				break;
		}
	}
	if (callback) {
		if ($parameters.$actions) {
			_parameters.openSelectModal(article, values, $parameters, record, callback);
			return;
		}
		if ($parameters.$properties) {
			_parameters.openModal(article, values, $parameters, record, callback);
			return;
		}
		callback(values);
	}
	return values;
};

function _formatMenuUrlWithCallback(article, $menu, record, callback) {
	if ($menu.$parameters) {
		$menu.$parameters.$title = $menu.getTitle ? $menu.getTitle() : null;
		exports.formatParameters(article, $menu.$parameters, record, function(values, isCanceled) {
			if (isCanceled) {
				callback(null, isCanceled);
			} else {
				if ($menu.$sourceType && $menu.$sourceType.indexOf("{") == 0) {
					$menu.$type = syra_expression.parse(article, $menu.$sourceType, record, values);
					var $sourceMenu = article.$menus[$menu.$bind];
					if (($menu.$type.indexOf("{") != 0) && $sourceMenu && !$sourceMenu.$target) {
						$menu.$target = (($menu.$type.indexOf('json') == -1) && ($menu.$type != "html")) ? "blank" : "";
					}
				}
				if ($menu.$method == "POST") {
					$menu.sendData = values;
				}
				callback(syra_expression.parseUrl(article, $menu.$sourceUrl || $menu.$url, record, values));
			}
		});
	} else {
		callback(syra_expression.parseUrl(article, $menu.$sourceUrl || $menu.$url, record, undefined, $menu.$subRecordKey, undefined, true));
	}
}

exports.formatMenuUrl = function(article, $menu, record, callback) {
	if (callback) {
		_formatMenuUrlWithCallback(article, $menu, record, callback);
	} else {
		var properties;
		if ($menu.$parameters) {
			properties = exports.formatParameters(article, $menu.$parameters, record);
		}
		return syra_expression.parseUrl(article, $menu.$sourceUrl || $menu.$url, record, properties, $menu.$subRecordKey, undefined, true);
	}
};


exports.notifyParametersActionChange = function(article, menu, record, target, request) {
	menu.$parameters.$title = menu.getTitle ? menu.getTitle() : null;
	exports.formatParameters(article, menu.$parameters, record, function(values, isCanceled) {
		if (!isCanceled) {
			var $bindAction = request[Object.keys(request)[0]];
			$bindAction.$parameters = {};
			delete values.$title;
			var props = Object.keys(values);
			for (var ii = 0, jj = props.length; ii < jj; ii++) {
				$bindAction.$parameters[props[ii]] = values[props[ii]];
			}
			syra_form.postAction(article.page, menu, target, request);
		}
	});
};



exports.buildPageCollaborationUrl = function(article, urlSeg) {
	return syra_expression.parse(article, syra_config.$pageTemplateUrl || ('/page?url=' + encodeURIComponent(urlSeg.$url)), {
		representation: urlSeg.params.representation,
		endpoint: urlSeg.endpoint,
		target: urlSeg.target,
		pageview: urlSeg.params.pageview,
		variant: urlSeg.params.variant
	});
};