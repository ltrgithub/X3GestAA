"use strict";
var _helpers = require('syracuse-core').helpers;
var _soapPage = require('syracuse-ui/lib/page/specific/soapPage');
var _officeAddin = require('syracuse-ui/lib/controller/officeAddin');

var _mainPageFetching;

function _openTracker(menu, menuArticle, $url, initData) {
	if (menu.$invocationMode == "async" && menuArticle.dataset && menuArticle.dataset.$trackngId) {
		initData = initData || {};
		initData.$location = $url;
		initData.title = (menu.getTitle && menu.getTitle()) || menu.$title;
		initData.uuid = initData.uuid || menuArticle.dataset.$trackngId;
		var page = menuArticle.page;
		if (page.urlSeg.$facet != "$edit") {
			(initData.$links = initData.$links || {}).$opener = {
				$title: page.getTitle(),
				$url: page.urlSeg.$url
			};
		}
		syra_trackers.addTracker(initData);
		return true;
	}
}



function _attachUrlWithRepresentation(segment, $url) {
	if (segment.params) {
		if (segment.params.profile || segment.params.role) {
			var urlSeg = syra_url.parse($url);
			if (segment.params.role) {
				urlSeg.params.role = segment.params.role;
			}
			if (segment.params.profile) {
				urlSeg.params.profile = segment.params.profile;
			}
			$url = syra_url.build(urlSeg);
		}
	}
	return $url;
}

function _fetchPage($representation, context, userPreferenceLoading) {
	$representation.$prototype = $representation.$prototype || {};
	if (typeof($representation.$prototype) == "string") {
		context.sendRqtOpts.$url = _attachUrlWithRepresentation(context.segments, $representation.$prototype);
		context.sendRqtOpts.success = function($prototype) {
			$representation.$prototype = $prototype;
			_fetchPage($representation, context);
		};
		syra_ajax.get(context.sendRqtOpts);
		return;
	}
	if ($representation.$prototype.$article && typeof($representation.$prototype.$article) == "string") {
		context.sendRqtOpts.$url = _attachUrlWithRepresentation(context.segments, $representation.$prototype.$article);
		context.sendRqtOpts.success = function($article) {
			$representation.$prototype.$article = $article;
			_fetchPage($representation, context);
		};
		syra_ajax.get(context.sendRqtOpts);
		return;
	}
	if (!userPreferenceLoading) {
		var $userPreferencesLink = $representation.$links && $representation.$links.$userPreferences;
		if ($userPreferencesLink) {
			if (!(context.segments && context.segments.representationRoot == "userProfile")) {
				context.sendRqtOpts.$url = $userPreferencesLink.$url;
				context.sendRqtOpts.success = function($preferences) {
					$representation.$preferences = $preferences;
					_fetchPage($representation, context, true);
				};
				syra_ajax.get(context.sendRqtOpts);
				return;
			}
		}
	}
	if ($representation.$article && typeof($representation.$article) == "string") {
		context.sendRqtOpts.$url = _attachUrlWithRepresentation(context.segments, $representation.$article);
		context.sendRqtOpts.success = function($article) {
			$representation.$article = $article;
			_fetchPage($representation, context);
		};
		syra_ajax.get(context.sendRqtOpts);
		return;
	}

	syra_site.userProfile && syra_site.userProfile.setSecurityToRepresentation($representation);
	$representation.$prototype.$representationUrl = context.$representationUrl;
	if (context.onBeforeOpen) {
		context.onBeforeOpen($representation);
	}
	context.success({
		urlSeg: context.segments,
		$representation: $representation
	});
}

function _openDevPage(urlSeg) {
	syra_site.loadStyleSheet("uitest.css");
	require.async("syracuse-ui/lib/tests/pages/devPage", function(error, module) {
		if (error) {
			syra_alert.error(error);
			return;
		}
		var $itemPage = {
			layoutSlot: document.createElement("div"),
			$category: "page",
			urlSeg: urlSeg,
			$page: new module.DevPage(),
			$representation: {
				$prototype: {
					$devName: urlSeg.representationRoot,
					$properties: {},
					$links: {},
					$actions: {}
				},
				$article: {}
			}
		};
		$itemPage.urlSeg.fullUrl = document.location.href;
		syra_site.onMainPageChange($itemPage);

	});
}

exports.changeMainPage = function($url, $itemPage, onHistoryChange) {

	var urlSeg;
	if (!syra_site.isOfficeSite) {
		urlSeg = syra_url.history.getUrlSegment($url);
		if (urlSeg.$facet === "$navigation" && syra_site.$device != "mobile") {
			//Redirect the user to the landing page.
			$url = syra_config.$homeUrl;
		}
	}

	var designer = syra_site.mainPage && syra_site.mainPage.designer;
	if (designer && designer.onBeforeMainPageChange) {
		if (!designer.onBeforeMainPageChange(function() {
			exports.changeMainPage($url, $itemPage);
		})) {
			return false;
		}
	}

	if (_mainPageFetching) {
		var ajaxQuery = _mainPageFetching.sendRqtOpts && _mainPageFetching.sendRqtOpts.ajaxQuery;
		ajaxQuery && ajaxQuery.abort();
		_mainPageFetching = null;
	}
	var workingCopyPreload = syra_form.preload;
	syra_form.preload = null; //!important release buffer
	urlSeg = syra_url.parse($url);

	if (urlSeg.isFusion) {
		syra_fusion.openMainPage(urlSeg);
	} else {
		if (syra_fusion && syra_fusion.activatedBook) {
			syra_fusion.isClosingAll = true;
			syra_fusion.activatedBook.onCloseAllSheets(function(allSheetsClosed) {
				delete syra_fusion.isClosingAll;
				if (!allSheetsClosed) {
					onHistoryChange && syra_url.history.cancelChange();
				} else {
					exports.changeMainPage($url, $itemPage);
				}
			});
			return false;
		}
		if (urlSeg.$url.indexOf("soap-") >= 0) {
			_soapPage.open(urlSeg);
			return;
		}
		if (urlSeg.$facet == "$dev") {
			_openDevPage(urlSeg);
			return;
		}

		if (syra_quality.openTestPage(urlSeg)) {
			return;
		}

		if (syra_site.controller_onChangeMainPage && !syra_site.controller_onChangeMainPage(urlSeg)) {
			return;
		}

		if ($itemPage) {
			$itemPage.initData = $itemPage.initData || (workingCopyPreload && workingCopyPreload.initData);
			$itemPage.urlSeg = urlSeg;
			$itemPage.urlSeg.fullUrl = document.location.href;
			syra_site.onMainPageChange($itemPage);
		} else {
			exports.loadRepresentation(_mainPageFetching = {
				article: null,
				segments: urlSeg,
				success: function($itemPage) {
					_mainPageFetching = null;
					$itemPage.initData = $itemPage.initData || (workingCopyPreload && workingCopyPreload.initData);
					$itemPage.urlSeg = urlSeg;
					if (workingCopyPreload) {
						$itemPage.urlSeg.workingCopyPreloadUrl = workingCopyPreload.openUrl;
						// save working copy preload url (session storage)
						sessionStorage &&
							sessionStorage.setItem(urlSeg.$url, JSON.stringify({
								wcpreloadUrl: workingCopyPreload.openUrl
							}));
					}
					$itemPage.urlSeg.fullUrl = document.location.href;
					syra_site.onMainPageChange($itemPage);
				},
				error: function(response, ajax, $diagnoses) {
					_mainPageFetching = null;
					if (this.isAborted) {
						return false;
					}
					syra_site.onErrorMainpage = true;
					switch (response.status) {
						case 401:
						case 403:
						case 404:
							syra_site.resetMainPage();
							var slot = syra_dom.div("s-err-page");
							var container = syra_dom.div("s-err-page-container", slot);
							var banner = syra_dom.div("s-err-page-banner", container);
							var textSlot = syra_dom.div("s-err-page-banner-text", banner);
							var node = textSlot.appendChild(document.createElement("pre"));
							node.className = "s-err-page-banner-title";
							node.textContent = syra_local["error_page_" + response.status];
							for (var ii = 0, jj = $diagnoses.length; ii < jj; ii++) {
								node = textSlot.appendChild(document.createElement("pre"));
								node.className = "s-err-page-banner-detail";
								node.textContent = $diagnoses[ii].$message;
							}
							syra_site.body.appendChild(slot);
							break;
						default:
							syra_alert.modal({
								$title: syra_local.error_page_default,
								$message: $diagnoses.length == 1 && $diagnoses[0].$message,
								$diagnoses: $diagnoses,
								click: function() {
									if (syra_site.lastOpenedMainPageUrlSegments) {
										syra_url.history.load({
											$url: syra_site.lastOpenedMainPageUrlSegments.$url
										});
									} else {
										syra_menus.click.home();
									}
								}
							});
							return false;
					}
				}
			});
		}
	}
};

exports.loadRepresentation = function(context) {
	if (typeof(context.segments) == "string") {
		context.segments = syra_url.parse(context.article ? syra_expression.parse(context.article, context.segments) : context.segments);
	}
	context.$representationUrl = context.segments.$url;
	//xhr.withCredentials = true;
	context.sendRqtOpts = context.sendRqtOpts || {};
	context.sendRqtOpts.$url = syra_url.buildPageCollaborationUrl(context.article || syra_site, context.segments);
	context.sendRqtOpts.error = context.error || context.onError;
	context.sendRqtOpts.success = function($representation, response, $url) {
		$representation.$pageCollaborationUrl = $url;
		_fetchPage($representation, context);
	};
	syra_ajax.get(context.sendRqtOpts);
};

exports.postQuery = function(option) {
	var menuArticle = option.article || option.menu.articleParent || syra_site;
	option.menu.$method = option.menu.$method || "POST";
	syra_url.formatMenuUrl(menuArticle, option.menu, option.record, function($url) {
		option.menu.$url = $url;
		var params = {};
		if (option.menu.$invocationMode === "async" && option.menu.$trackngId) {
			params.trackngId = option.menu.$trackngId;
			if (option.menu.$capabilities && option.menu.$capabilities.indexOf("abort") >= 0) {
				params.canAbort = true;
			}
		} else {
			params.trackingId = _helpers.uuid.generate();
		}
		syra_ajax.send({
			page: menuArticle,
			url: $url,
			accept: option.menu.accept || option.menu.$acceptType || option.menu.$type,
			contentType: option.menu.contentType || option.menu.$contentType,
			params: params,
			headers: option.menu.headers,
			method: option.menu.$method,
			data: option.menu.sendData,
			noDisplayErr: option.menu.noDisplayErr || false,
			success: function(data, response, requestUrl) {
				$url = response.headers.location;
				if (!$url) {
					$url = response.data.$url || option.menu.$url;
				}
				if (option.menu.$invocationMode === "async") {
					_openTracker(option.menu, menuArticle, $url, response.data);
				} else {
					option.success($url, response.data, requestUrl);
				}
			},
			error: option.error
		});
	});
};

exports.executeMenu = function(menu, article, confirmed) {
	if (menu.$isAction || menu.$url || menu.$sourceUrl) {
		var menuArticle = article || menu.articleParent;
		var menuTitle = (menu.getTitle && menu.getTitle()) || menu.$title;


		if (menu.$url && menu.$url == "{$url}") { //use by search
			menu.$url = syra_expression.parse(menuArticle, menu.$url);
		}
		if (menu.$method && menu.$method.indexOf("{") >= 0) { //use by search
			menu.$method = syra_expression.parse(menuArticle, menu.$method);
		}
		if (menuArticle && menuArticle.dataset) {
			if (menu.$invocationMode === "async") {
				menu.$trackngId = menuArticle.dataset.$trackngId = _helpers.uuid.generate();
			} else {
				delete menu.$trackngId;
				delete menuArticle.dataset.$trackngId;
			}
		}

		if (!confirmed && menu.$confirm && !_officeAddin.installed.call(this, this, menu, menuArticle, menuTitle, exports.executeMenu, [menu, article, true])) {
			return;
		}
		if (menu.$isAction) {
			var target = menu.contextField || menuArticle;
			if (target || menuArticle) {
				var request = {};
				var r = request[menu.$sourceBind || (menu.$item && menu.$item.$bind)] = {
					$isRequested: true
				};
				if (menu.$invocationMode === "async") {
					r.$trackingId = _helpers.uuid.generate();
				}
				if (menu.$parameters) {
					syra_url.notifyParametersActionChange(menuArticle, menu, null, target, request);
				} else {
					syra_form.postAction(menuArticle.page, menu, target, request);
				}
			}
		} else {
			if (menu.$method && (menu.$method != "GET")) {
				if (syra_form.isFormUrl(menu.$url, menu.$sourceUrl)) {
					syra_form.onBeforeUnloadPage(function() {
						syra_form.load({
							menu: menu,
							menuArticle: menuArticle,
							article: article
						});
					});
				} else {
					var page = menu.page;
					//var menuArticle = menu.articleParent;
					exports.postQuery({
						menu: menu,
						success: function($url, data) {
							switch (page.$facet) {
								case "$query":
								case "$bulk":
									page.fetchLastRequest(function(lastData) {
										if (lastData && data.$diagnoses) {
											lastData.$diagnoses = lastData.$diagnoses || [];
											for (var ii = data.$diagnoses.length - 1; ii >= 0; ii--) {
												lastData.$diagnoses.unshift(data.$diagnoses[ii]);
											}
										}
										page.startChange();
										page.applyChange(lastData);
										page.endChange();
									});
									break;
								case "$details":
									page.applyChange(data);
									if (menu.$method == "DELETE") {
										page.freezeDeletedPage();
									}
									break;
								default:
									if (page) {
										page.startChange();
										page.endChange();
									}
									break;
							}
						}
					});
				}
			} else {
				var executed = syra_fusion.executeFusionFunc(menu, syra_fusion && syra_fusion.activatedBook) && menu.urlSeg && menu.urlSeg.isFusion;
				if (!executed) {
					syra_form.onBeforeUnloadPage(function() {
						_openPage(menuArticle, menu);
					});
				}
			}
		}
	}
};

function _openPage(menuArticle, menu, record) {
	var menuTitle = (menu.getTitle && menu.getTitle()) || menu.$title;
	switch (menu.$target) {
		case "worksheet":
			syra_site.excelDocument.loadPage({
				$url: menu.$url,
				$title: (menuArticle && menuArticle.dataset && menuArticle.dataset.title) || menuTitle
			});
			break;
		case "modal":
		case "popup":
			syra_over.openPage(menu.boxParent, {
				article: menuArticle,
				$url: menu.$url,
				isModal: menu.$target == "modal"
			});
			break;
		default:
			syra_url.formatMenuUrl(menuArticle, menu, record, function($url, isCanceled) {
				if (!isCanceled) {
					if (_openTracker(menu, menuArticle, $url)) {
						return;
					}
					var isRepresentationUrl = true;
					var segments = syra_url.parse($url, true);
					var target = menu.$target;
					if (target == "diagnoses") {
						syra_ajax.get({
							page: menuArticle,
							url: $url,
							success: function(data, response, requestUrl) {
								var page = menuArticle && menuArticle.page;
								if (page) {
									page.startChange();
									page.applyChange(data, response, requestUrl);
									page.endChange();
								}
							}
						});
						return;
					}
					if (segments.isSyracuse) {
						if (segments.uri.search(/mobile\.html/i) > 0) {
							syra_url.history.load({
								$url: $url,
								target: "blank",
								isDefaultUrl: false
							});
							return;
						}
						if (segments.$facet == "$summary") {
							syra_over.openPage(menu.boxParent, {
								article: menuArticle,
								$url: $url,
								isModal: true
							});
							return;
						} else {
							if (menu.$type && menu.$type.indexOf("json") == -1) {
								target = "blank";
							} else {
								var htmIndex = segments.uri.search(/\.html/i);
								if (htmIndex > 0) {
									//test for excelOfficeConfig.html
									if ((segments.uri.length - 5) == htmIndex) {
										var curUrlSegments = syra_url.parse(document.location.href);
										if (curUrlSegments.uri.indexOf(segments.uri) < 0) {
											isRepresentationUrl = false;
											target = "blank";
										}
									}
								}
								if (isRepresentationUrl) {
									if (menu.boxParent) {
										if (menu.page && menu.page.overPanel && menu.page.overPanel.isModal) {
											target = "blank";
										}
									}
								}
							}
						}
					} else {
						target = "blank";
					}
					if (menu.page && menu.page.inlinePageHost) {
						if (!target || target == "self") {
							target = "blank";
						}
					}
					if (target != "blank" && target != "main" && menuArticle.page && menuArticle.page.$pageCategory == "vignette") {
						menuArticle.page.vignetteField.renderLayoutContent($url);
					} else {
						if (isRepresentationUrl && menu && (menu.isRepresentationUrl === false)) {
							isRepresentationUrl = false;
						}
						syra_url.history.load({
							replaceState: menu.replaceState,
							$url: $url,
							target: target,
							isDefaultUrl: isRepresentationUrl
						});
					}
				}
			});
			break;
	}
};