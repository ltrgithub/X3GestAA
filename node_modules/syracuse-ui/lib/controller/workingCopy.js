"use strict";
var _helpers = require('syracuse-core/lib/helpers');
var SendBag = require('./sendBag').SendBag;

var _lastSavingDiagnoses;

//data.wcpreloadUrl = data.wcpreloadUrl || page.openerUrlSegments.workingCopyPreloadUrl;

var _storage = {
	hasData: function(page) {
		var data = sessionStorage && sessionStorage.getItem(page.openerUrlSegments.$url);
		if (data) {
			data = JSON.parse(data);
			if (data && data.dataset) {
				return true;
			}
		}
	},
	write: function(page) {
		// saving data for "404 working copy session expired" cases
		if (page.isWorkingCopy && sessionStorage && page.openerUrlSegments) {
			var key = page.openerUrlSegments.$url;
			var data = sessionStorage.getItem(key) !== "" ? JSON.parse(sessionStorage.getItem(key)) || {} : {};
			data.wcpreloadUrl = data.wcpreloadUrl || page.openerUrlSegments.workingCopyPreloadUrl;
			data.dataset = page.dataset;
			sessionStorage.setItem(key, JSON.stringify(data));
		}
	},
	read: function(dataObj, $url, reqOptions) {
		var data = sessionStorage && sessionStorage.getItem($url);
		if (data) {
			data = JSON.parse(data);
			reqOptions.$location.$url = data.wcpreloadUrl;
			var segs = syra_url.parse(reqOptions.$location.$url);
			//segs.params.trackingId = segs.params.trackingId || _helpers.uuid.generate();
			reqOptions.$location.$url = syra_url.build(segs);
			reqOptions.data = dataObj || data.dataset;
			reqOptions.$etag = reqOptions.data ? reqOptions.data.$etag : reqOptions.$etag;
			return true;
		}
	},
	clear: function(page) {
		sessionStorage && sessionStorage.removeItem(page.openerUrlSegments.$url);
	}
};

exports.notifyDataChange = function(page, field, value) {
	var sendBag = exports.getSendBag(page);
	sendBag.saveDataChange(page, field.articleParent, field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
	page.notifyChangeToServer(sendBag);
	_storage.write(page);
};

exports.notifyChangeToServer = function(page, sendBag) {
	var self = this;
	if (!page.disposed && !page.isServerNotifyDisabled) {
		if (page.$prototype.$representationUrl) {
			sendBag.$url = page.getDataUrl();
			sendBag.$etag = page.dataset.$etag;
			syra_controller.callServer(page, {
				$location: {
					$url: page.getDataUrl()
				},
				data: sendBag,
				method: "PUT",
				$etag: sendBag.$etag
			}, function(data, response, requestUrl) {
				if (!page.disposed) {
					if (sendBag) {
						delete sendBag.$actions;
					}
					page.applyChange(data, response, requestUrl);
				}
			});
		}
	}
};

exports.validateInput = function(field, newValue, errors) {
	if (field.$item.$isFilterMode) {
		return true;
	}
	if (field.isArrayField) {
		var ok = true;
		for (var ii = 0, jj = field.records.length; ii < jj; ii++) {
			ok = exports.validateAllInputs(field.records[ii]);
		}
		return ok;
	}
	if (field.isChildField) {
		return exports.validateAllInputs(field.record);
	}

	var value = newValue;
	if (value === undefined) {
		value = field.currentValue;
	}
	if (value != null && value.toString) {
		value = value.toString();
	}
	errors = errors || [];
	if (field.$isMandatory) {
		var checked = value;
		if (field.isReferenceField) {
			checked = field._hasUiid ? field.currentValue && field.currentValue.$uuid : field.getInputValue();
		}
		if (checked === '' || checked === null || (!field.isPasswordField && checked === undefined)) {
			if (field.page.externalAdapter.notifyFldMandatoryErr()) {
				errors.push(syra_local.fieldIsMandatory);
			}
		}
	}

	if (field.$field.$pattern && value) {
		var match = new RegExp(field.$field.$pattern, "i").test(value);
		if (!match) { //(match && match.index == 0 && match[0].length == value.length)) {
			errors.push(field.$field.$patternMessage || syra_local.fieldInvalidValue + " : " + value);
		}
	}
	field.validateType && field.validateType(errors, value);

	//diagnosesPanel
	if (errors.length > 0 || field.$displayedDiagnoses) {
		field.showErrors(errors);
		var saveLinks = field.articleParent.menuItems.$save;
		if (saveLinks && saveLinks.length > 0) {
			var hasErrors = field.page.diagnosesPanel && field.page.diagnosesPanel.hasErrors();
			if (!saveLinks[0].$isDisabled) {
				hasErrors && saveLinks[0].disable(true);
			} else {
				!hasErrors && saveLinks[0].disable(true);
			}
		}
		var sendBag = exports.getSendBag(field.page);
		if (sendBag) {
			newValue = field.parentVariantField ? field.parentVariantField.saveVariantValue(newValue) : newValue;
			sendBag.saveDataChange(field.page, field.articleParent, field.$item.$bind, newValue);
		}
	}
	return errors.length == 0;
};

exports.validateAllInputs = function(article) {
	var isValidated = true;
	try {
		var page = article.page;
		if (page == article) {
			page.isPageValidating = page.isServerNotifyDisabled = true;
		}

		var $binds = Object.keys(article.boundFields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var fields = article.boundFields[$binds[ii]];
			for (var kk = 0, mm = fields.length; kk < mm; kk++) {
				var field = fields[kk];
				if (!field.$isHidden && field.$isEditMode) {
					field = field.variantItem || field;
					if (!field.unknowMode) {
						var newValue = field.getDataValue();
						if (!exports.validateInput(field, newValue)) {
							isValidated = false;
						} else {
							if (newValue != undefined) {
								if (page.isDialogParameter || (page.isPageValidating && newValue != field.currentValue)) {
									exports.notifyFieldChange(field, newValue);
								}
							}
						}

					}
				}
			}
		}
	} finally {
		if (page == article) {
			page.isPageValidating = page.isServerNotifyDisabled = false;
		}
	}
	return isValidated;
};

exports.onInputChange = function(field, event) {
	field = field.variantItem || field;
	if (!field.unknowMode) {
		field.setDirty(true);
		try {
			if (!field.onInputValueChanged || field.onInputValueChanged(event)) {
				var newValue = field.getDataValue(event);
				if (newValue != field.currentValue) {
					// apply format  - SAM 106180
					if (field.$field.$x3Format) {
						newValue = syra_fields.format(newValue, field.$field.$x3Format, field.$field.$type, field.page.$prototype.$x3FormatExt);
					}
					exports.notifyFieldChange(field, newValue);
				}
			}
		} catch (error) {
			field.showErrors([error.message]);
			field.currentValue = newValue;
		}
	}
};

exports.notifyFieldChange = function(field, newValue, validated) {
	if (!field.unknowMode) {
		field = field.variantItem || field;
		if (field.notifyFieldChange && !field.notifyFieldChange(newValue, validated)) {
			return;
		}
		field.currentValue = newValue;
		if (validated || exports.validateInput(field, newValue)) {
			field.setDatasetValue(field.currentValue);
			field.page.externalAdapter.onFieldNotifyChange({
				field: field,
				doEvent: function() {
					if (field.articleParent.onNotifyDataChange ? field.articleParent.onNotifyDataChange(field, field.currentValue) : true) {
						if (!field.page.isServerNotifyDisabled) {
							setTimeout(function() {
								field.page && field.page.notifyDataChange(field, field.currentValue);
							}, 100);
						} else {
							field.page.notifyDataChange(field, field.currentValue);
						}
					}
				}
			});
		}
		if (field.isBooleanField && field.input) {
			syra_fields.checkbox.setIcon(field, (newValue || field.statusValues.off) == field.statusValues.on);
		}
		if (field.isRadioChoiceField) {
			if (field._choices) {
				var selected = field.findEnum(newValue);
				selected && field.selectRadioBtn(selected.$index, true);
			}
		}
	}
};



exports.getSendBag = function(article, sender) {
	var page = article.page;
	var sender = sender || article.page;
	if (article.sendBag && !article.sendBag.on412 && sender.dataset.$etag != article.sendBag.$etag) {
		delete article.sendBag;
	}
	if (!article.sendBag) {
		article.sendBag = new SendBag();
		article.sendBag.$etag = sender.dataset.$etag = sender.dataset.$etag || 1;
		if (article.isRecordDataset) {
			article.sendBag.dataRecords = [];
		}

	}
	if (article.sendBag.on412) {
		article.sendBag.$etag = sender.dataset.$etag = sender.dataset.$etag || 1;
		delete article.sendBag.on412;
	}
	return article.sendBag;
};

exports.onBeforeUnloadPage = function(callback, activePage) {
	var wcPage = syra_site.activeWorkingCopy;
	if (wcPage && _hasSaveAction(wcPage) && _storage.hasData(wcPage)) {
		if (!activePage || (!activePage.isPageDesigner && !activePage.isMessageBox && wcPage == activePage)) {
			syra_diagnose.box.show({
				$title: wcPage.getTitle() || syra_local.wc_warn_unload_title,
				$message: syra_local.wc_warn_unload_message,
				$type: "question",
				$buttonsTitle: {
					no: syra_local.wc_warn_unload_no_button,
					yes: syra_local.wc_warn_unload_yes_button
				},
				callback: function(response) {
					if (response.$clientId == "yes") {
						wcPage.inlinePageHost && wcPage.inlinePageHost.dispose();
						callback();
					}
				}
			});
			return;
		}
	}
	callback();
};

exports.isUrl = function($url, $sourceUrl) {
	var ok = $url && $url.indexOf("$workingCopies") >= 0;
	if (!ok && $sourceUrl) {
		ok = $sourceUrl.indexOf("$workingCopies") >= 0;
	}
	return ok;
};


exports.load = function(options) {
	syra_controller.postQuery(options.menu, options.record || null, options.menuArticle, function($location, data, requestUrl) {
		if (options.menuArticle) {
			var segments = syra_url.parse($location.$url = syra_site.expressionMaker.parse(options.menuArticle, $location.$url, data));
			if (options.menu.$target == "inline" && options.menuArticle.isRecordArticle) {
				syra_controller.loadRepresentation({
					article: null,
					segments: segments,
					success: function($itemPage) {
						options.menuArticle.loadInlinePage(options.menuArticle, $itemPage, options);
					}
				});
			} else {
				exports.preload = {
					initData: (options.menu.$method != "DELETE") ? data : null,
					openUrl: options.menu.$url
				};
				syra_url.history.load({
					$url: segments.$url,
					target: segments.target
				});
			}
		} else {
			syra_controller.loadRepresentation({
				article: null,
				segments: $location.$url,
				success: function($itemPage) {
					options.article.$prototype = $itemPage.$representation.$prototype;
					options.article.page.initializeNewItem(options.article, {});
					options.article.page.wcpreloadUrl = requestUrl;
					options.article.loadBox(data);
					options.callback && options.callback($itemPage, $location, data);
				}
			});
		}

	});
};

exports.add = function(page) {
	if (exports.isUrl(page.openerUrlSegments.$url)) {
		page.isWorkingCopy = true;
		syra_site.activeWorkingCopy = page;
	}
};

function _hasSaveAction(page) {
	return page.$menus && page.$menus.$save;
}

exports.remove = function(page) {
	if (page && !page.isFusionPage && page.$isEditMode) {
		if (page == syra_site.activeWorkingCopy) {
			delete syra_site.activeWorkingCopy;
		}
		var $url = page.$prototype ? page.$prototype.$representationUrl : null;
		if (exports.isUrl($url)) {
			syra_controller.parseUrl($url).sendNewRequest({
				method: "DELETE",
				onSuccess: function(data, response) {

				},
				onError: function(data, response) {

				}
			});
		}
	}
};

exports.onNotFound = function(httpQuery, error, reqOptions, dataObj, onSave) {
	var segments = syra_site && syra_site.mainPage && syra_site.mainPage.openerUrlSegments;
	if (segments) {
		if (segments.workingCopyPreloadUrl) {
			reqOptions.$location.$url = segments.workingCopyPreloadUrl;
			if (onSave && dataObj && dataObj.$actions && syra_site.mainPage.dataset && syra_site.mainPage.dataset.$actions) {
				var dataset = _helpers.object.clone(syra_site.mainPage.dataset);
				dataset.$actions = dataObj.$actions;
				reqOptions.data = dataset;
			} else {
				reqOptions.data = dataObj || syra_site.mainPage.dataset;
			}
			reqOptions.$etag = syra_site.mainPage.dataset.$etag;
		} else {
			if (!_storage.read(dataObj, segments.$url, reqOptions)) {
				httpQuery.showError(error);
			}
		}
		syra_controller.callServer(syra_site.mainPage, reqOptions);
	} else {
		httpQuery.showError(error);
	}
};

function _onAfterActionMenuExecute(menuItem, $menu, isSuccess, $diagnoses) {
	var page = menuItem.page;
	var isSaved = menuItem.$sourceBind == "$save";
	isSaved && _storage.clear(page);
	var inlinePageHost = page.inlinePageHost;
	if (inlinePageHost) {
		var record = inlinePageHost.record;
		if (isSaved) {
			var $binds = Object.keys(record.$prototype.$properties);
			var $delta = {};
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				if (page.dataset[$bind] != undefined) {
					$delta[$bind] = page.dataset[$bind];
				}
			}
			syra_delta.applyObjectDelta(record.page, record.dataset, $delta);
			record.applyChange($delta);
			setTimeout(function() {
				inlinePageHost.dispose(record.list);
			}, 100);
			return false;
		}
	} else {
		if (isSaved && isSuccess) {
			if (page.dialogWrapper) {
				if (page.dialogWrapper.options.onServerSaved) {
					if (page.dialogWrapper.options.onServerSaved(menuItem, page.dialogWrapper) === false) {
						return false;
					}
				}
			} else {
				var $links = page.$menus.$save.$links;
				var $redirect = $links && $links.$redirect || $links.$details;
				if ($redirect) {
					var $url = syra_url.formatMenuUrl(page, $redirect);
					$diagnoses = ($diagnoses || []);
					if (page.$menus.$save.$diagnoses) {
						$diagnoses = $diagnoses.concat(page.$menus.$save.$diagnoses);
					}
					(_lastSavingDiagnoses = {})[$url] = $diagnoses;
					syra_controller.executeMenu({
						replaceState: true,
						$url: $url
					}, page);
					return false;
				}
			}
		}
	}
	return true;
}

exports.showLastSavingDiagnoses = function(page) {
	if (_lastSavingDiagnoses) {
		var $diagnoses = _lastSavingDiagnoses[page.openerUrlSegments.$url];
		_lastSavingDiagnoses = null;
		$diagnoses &&
			syra_diagnose.showDiagnoses({
				$diagnoses: $diagnoses
			}, page);
	}
};


function _showDiagnoses(menu, $delta) {
	var $menu = menu.articleParent.$menus[menu.$item.$bind];
	if ($menu) {
		if ($menu.$links) {
			var $binds;
			var $links = $menu.$links || {};
			if ($delta.$links) {
				$binds = Object.keys($delta.$links);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var $source = $delta.$links[$bind];
					var $target = $links[$bind] = $links[$bind] || {};
					var $props = Object.keys($source);
					for (var kk = 0, mm = $props.length; kk < mm; kk++) {
						var $prop = $props[kk];
						$target[$prop] = $source[$prop];
					}
				}
			}
			$binds = Object.keys($links);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $link = $links[$bind];
				$link.$bind = $bind + "-" + menu.id;
				$link.$url = syra_url.formatMenuUrl(menu.articleParent, $link);
			}
			syra_diagnose.showDiagnoses({
				$links: $links,
				$diagnoses: $delta.$diagnoses
			}, menu.articleParent, {
				menu: menu
			});
		} else {
			if ($delta.$diagnoses) {
				syra_diagnose.showDiagnoses({
					$diagnoses: $delta.$diagnoses
				}, menu.articleParent, {
					menu: menu
				});
			}
		}
	}
}


function _getDiagnoses(diagnosesPanel, stack, $diagnoses) {
	var hasError;
	if (stack) {
		for (var ii = 0, jj = stack.length; ii < jj; ii++) {
			var item = stack[ii];
			var $diagnose = _helpers.object.clone(item.$diagnose, true);
			if (!hasError) {
				hasError = item.isError();
			}
			if (item.fieldText) {
				$diagnose.$message = item.fieldText + " " + $diagnose.$message;
			}
			$diagnoses.push($diagnose);
		}
	}
	return hasError;
}


exports.onActionExecuted = function(menu, $menu) {
	var isSuccess = true;
	var $diagnoses = [];
	//check diagnoses
	var dgpn = menu.page && menu.page.diagnosesPanel;
	if (dgpn) {
		isSuccess = !_getDiagnoses(dgpn, dgpn.stack, $diagnoses) && !_getDiagnoses(dgpn, dgpn.fieldStack, $diagnoses);
	}
	if (menu.$diagnoses) {
		for (var ii = 0; isSuccess && ii < menu.$diagnoses.length; ii++) {
			if (menu.$diagnoses[ii].$severity != "success") {
				isSuccess = false;
			}
		}
	}
	if (menu.articleParent == menu.page) {
		var res = menu.page.onAfterActionMenuExecute ? menu.page.onAfterActionMenuExecute(menu, $menu, isSuccess, $diagnoses) : _onAfterActionMenuExecute(menu, $menu, isSuccess, $diagnoses);
		if (res === false) {
			$menu.$isRequested = true;
			return false;
		}
	}

	$menu.$diagnoses && _showDiagnoses(menu, $menu);

	if ($menu.$links && $menu.$links.$location) {
		var $url = $menu.$links.$location.$url;
		setTimeout(function() {
			syra_site.unload();
			window.open($url, "_self");
		}, 100);
	}
	if ($menu.$location && menu.$invocationMode == "async") {
		syra_trackers.addTracker({
			$location: $menu.$location,
			$state: $menu.$state,
			title: menu.getTitle(),
			uuid: $menu.$location.split(/'/)[1]
		});
	}
	$menu.$isRequested = true; //avoid processing action for other menu bound to $menu (create menu for sample)
	return true;
};