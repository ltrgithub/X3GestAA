"use strict";
var helpers = require("syracuse-core/lib/helpers");
var jsurl = require('jsurl/lib/jsurl');
var forEachKey = helpers.object.forEachKey;
var _pendingRequests = 0;
var disconnectUtils = require('syracuse-ui/lib/site/disconnectUtils');

var BROWSER_VERBS_ALLOWED = {
	GET: 1,
	POST: 1,
	DELETE: 1,
	PUT: 1
};
// DELETE and PUT added for asynch operations support

function _parseResponse(jqXHR, data) {
	document.site.notifyRequestSurvey(--_pendingRequests);
	var headers = {};
	var httpHeader = jqXHR.getAllResponseHeaders();
	if ((httpHeader = httpHeader.trim())) {
		httpHeader.split("\n").forEach(function(header) {
			header = header.trim();
			if (header) {
				var separatorIndex = header.indexOf(":");
				headers[header.substr(0, separatorIndex).trim().toLowerCase()] = header.substr(separatorIndex + 1).trim();
			}
		});
	}
	return {
		status: jqXHR.status,
		headers: headers,
		data: data || jqXHR.responseText
	};
}

function _onReceiveError(error) {
	if (document.site.mainPage && !document.site.mainPage.disposed) {
		document.site.showDiagnoses({
			$diagnoses: (error.data.indexOf("$diagnoses") >= 0) ? JSON.parse(error.data).$diagnoses : [{
				$message: error.data ? error.data : document.site.localize.http_empty_error
			}]
		});
	} else {
		//debugger; //TODO
		// messagebox
		var options = {
			$message: document.site.localize["http_" + error.status] ? document.site.localize["http_" + error.status] : document.site.localize.default_err_msg,
			$title: document.site.localize["http_" + error.status + "_title"] ? document.site.localize["http_" + error.status + "_title"] : document.site.localize.siteMsgboxTitle,
			$type: "fatal",
			$buttons: "ok",
			$diagnoses: error.data && error.data.length > 0 ? (error.data.indexOf("$diagnoses") >= 0 ? JSON.parse(error.data).$diagnoses : [{
				$message: error.data ? error.data : document.site.localize.http_empty_error
			}]) : [{
				$message: document.site.localize.default_err_msg
			}]
		};
		document.site.showMessage(options);
	}
}


exports.upload = function(options, responseCallback, progressCallback, errorCallback) {
	// tweek, only Firefox implements binary transfer, see "http://javascript0.org/wiki/Portable_sendAsBinary"
	if (!XMLHttpRequest.prototype.sendAsBinary)
		XMLHttpRequest.prototype.sendAsBinary = function(datastr) {
			function byteValue(x) {
				return x.charCodeAt(0) & 0xff;
			}
			var buf;
			try {
				// check if Uint8Array is avalable (IE9 doesn't have it)
				buf = new Uint8Array(1);
				var ords = Array.prototype.map.call(datastr, byteValue);
				buf = (new Uint8Array(ords)).buffer;
			} catch (e) {
				buf = datastr;
			}
			this.send(buf);
		};
	//
	var xhr = new XMLHttpRequest();
	xhr.open("PUT", options.url);
	options.headers &&
		forEachKey(options.headers, function(header, value) {
			xhr.setRequestHeader(header, value);
		});
	xhr.setRequestHeader("accept", "application/json;vnd.sage=syracuse");
	options.contentType && xhr.setRequestHeader("content-type", options.contentType);
	xhr.setRequestHeader("x-file-name", options.fileName || options.file.name);
	// response callback
	if (responseCallback)
		xhr.onreadystatechange = function() {
			if (xhr.readyState == 4) {
				// IE misinterpret 204 as 1223
				var response = _parseResponse(xhr, (xhr.response && (typeof xhr.response !== "object")) ? JSON.parse(xhr.response) : xhr.response);
				if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || xhr.status == 1223) {
					// expects a json; TODO: check Content-Type header
					responseCallback(response.data, response);
				} else {
					if (errorCallback) {
						errorCallback(response.data, response);
					} else {
						_onReceiveError(_parseResponse(xhr, null));
					}
				}
			}
		};
	// progress callback
	if (progressCallback) {
		xhr.upload.addEventListener("progress", function(e) {
			if (e.lengthComputable) {
				progressCallback(Math.round((e.loaded * 100) / e.total));
			}
		}, false);

		xhr.upload.addEventListener("load", function(e) {
			progressCallback(100, true);
		}, false);
	}
	//
	if (options.file) {
		var self = this;
		var bInfo = document.site.getBrowserInformation();
		self.isIe10 = (bInfo[0].toLowerCase() == "msie") && (bInfo[1].indexOf("10.0") != -1);

		var reader = new FileReader();
		reader.onload = function(evt) {
			if (self.isIe10)
				xhr.send(evt.target.result); //IE10
			else
				xhr.sendAsBinary(evt.target.result);
		};
		if (self.isIe10)
			reader.readAsArrayBuffer(options.file); //IE10
		else
			reader.readAsBinaryString(options.file);
	} else {
		xhr.sendAsBinary(options.buffer);
	}
};

function HttpQuery() {

}

helpers.defineClass(HttpQuery, null, {

	parse: function($url) {
		this.openerUrlSegments = document.site.urlMaker.parse(this.$url = $url);
	},
	_prepareRequest: function(options) {
		var self = this;
		self.headers = self.headers || {};
		if (options && options.headers) {
			for (var prop in options.headers) {
				self.headers[prop] = options.headers[prop];
			}
		}
		self.method = options.method || "GET";
		/*if (options.$acceptType) {
         self.headers.Accept = options.$acceptType || "application/json;vnd.sage=syracuse";
         }*/
		self.headers.Accept = options.$acceptType || "application/json;vnd.sage=syracuse; charset=utf-8";
		if (options.$contentType) {
			self.headers["content-type"] = options.$contentType;
		}
		self.dataType = self.dataType ||
			function() {
				var dataType = self.headers["Accept"] || self.headers["content-type"] || "text/html";
				if (dataType.indexOf("application/json") != -1) {
					dataType = "json";
				} else {
					dataType = "text";
				}
				return dataType;
		}();
		// content type
		self.headers["content-type"] = self.headers["content-type"] || (self.dataType === "json" ? "application/json" : "");
		// should "accept" the user's profile language
		var language = document.site.localizer.getLanguage();
		if (!(options && options.headers && options.headers["accept-language"])) {
			if (language)
				self.headers["accept-language"] = language;
		}
		//
		if (options.data) {
			self.sendData = self.dataType === "json" ? JSON.stringify(options.data) : options.data;
		}
		if (options.jsonParams) {
			options.params = options.params || {};
			Object.keys(options.jsonParams).forEach(function(key) {
				options.params[key] = jsurl.stringify(options.jsonParams[key]);
			});
		}
		if (options.params) {
			self.$url = document.site.urlMaker.applyParameters(self.$url, options.params);
		}
		if (options.$etag) {
			self.headers["If-Match"] = options.$etag;
		}
		if (!BROWSER_VERBS_ALLOWED[self.method]) {
			self.headers["X-HTTP-Method-Override"] = self.method;
			self.method = "POST";
		}
	},
	sendRequest: function(options, onSuccess, onError) {
		var self = this;
		var initialSid = document.site.getSessionId();
		self._prepareRequest(options || {});
		//manage proxy
		self.$url = document.site.history.ensureProxy(self.$url);
		document.site.notifyRequestSurvey(++_pendingRequests);
		$.ajax({
			url: self.$url,
			type: self.method,
			dataType: self.dataType,
			data: self.sendData,
			xhrFields: self.xhrFields,
			contentType: self.headers["content-type"],
			async: options && options.syncRqst ? false : true,
			beforeSend: function(jqXHR, settings) {
				//Should modify settings with jQuery 1.5 ?
				forEachKey(self.headers, function(key, value) {
					jqXHR.setRequestHeader(key, value);
				});
			},
			success: function(data, textStatus, jqXHR) {
				var response = _parseResponse(jqXHR, data);
				if (initialSid && (document.site.getSessionId() !== initialSid) && document.site.userProfile && !document.site.userProfile.onLogonProcessing) {
					document.site.logon(function() {
						onSuccess(response.data, response, self.$url);
					});
				} else {
					onSuccess(response.data, response, self.$url);
				}
				// timer to handle convergence session disconnection in case of timeout
				disconnectUtils.updateTimer();

			},
			error: function(jqXHR, textStatus, errorThrown) {


				var error = _parseResponse(jqXHR, null);

				if (onError) {
					onError(error, self);
					return;
				}

				var ajax = this;
				var reqOptions = {};
				switch (jqXHR.status) {
					case 0:
						_onResponseError(self, error, options, onError);
						break;
					case 404:
						reqOptions = {
							"method": "POST",
							"$location": {}
						};
						//---------------------------------------
						// handling working copy expired 404 case
						//---------------------------------------
						// logout and user profile specific cases
						var dataObj = ajax.data ? JSON.parse(ajax.data) : dataObj;

						if (dataObj && dataObj.$actions) {
							// in case of logout
							if (dataObj.$actions.$logout && dataObj.$actions.$logout.$isRequested) {
								var $url = "/";
								setTimeout(function() {
									document.site.unload();
									window.open($url, "_self");
								}, 100);
							} else {
								// in case of some user profile property value change, or in case of regular WC save
								if (dataObj.$actions.$save && dataObj.$actions.$save.$isRequested) {

									// user profile
									if (dataObj.$url && dataObj.$url.indexOf("userProfile") != -1) {
										if (sessionStorage && document.site.userProfile) {
											var key = "userProfile";
											if (sessionStorage.getItem(key)) {
												var data = {};
												data = JSON.parse(sessionStorage.getItem(key));
												reqOptions.$location.$url = data.wcpreloadUrl;
												reqOptions.data = JSON.parse(ajax.data);
												reqOptions.$etag = reqOptions.data ? reqOptions.data.$etag : reqOptions.$etag;
												document.controller.sendRequest(document.site.userProfile, reqOptions);
											} else {
												_onResponseError(self, error, options, onError);
											}
										} else {
											_onResponseError(self, error, options, onError);
										}
									}

									// regular WC save action
									else {
										_onWCNotFound(self, error, options, onError, reqOptions, dataObj, true);
									}
								} else {
									_onWCNotFound(self, error, options, onError, reqOptions, dataObj);
								}
							}
						} else {
							// in case of 404 after a lookup query, display $diagnoses
							if (ajax.url.indexOf("$lookup") != -1 && error.data) {
								var errData = JSON.parse(error.data);
								if (errData.$diagnoses) {
									document.site.showDiagnoses({
										$diagnoses: errData.$diagnoses
									});
								} else {
									document.site.showDiagnoses({
										$diagnoses: [{
											$message: document.site.localize.default_err_msg
										}]
									});
								}
							} else {
								// other cases

								// in case of WC url
								if (self.$url && self.$url.indexOf("$workingCopies") >= 0) {
									_onWCNotFound(self, error, options, onError, reqOptions);
								}

								// other cases
								else {
									var errData = {};
									try {
										errData = JSON.parse(error.data);
									} catch (e) {
										console.log("error data not a JSON");
									}
									if (errData.$diagnoses) {
										document.site.showDiagnoses({
											$diagnoses: errData.$diagnoses
										});
									} else {
										_onWCNotFound(self, error, options, onError, reqOptions);
									}
								}

							}
						}
						break;
					case 412:
						if (options.page && options.page.sendBag) {
							options.page.sendBag.on412 = true;

						} else {
							reqOptions = {
								$message: document.site.localize.http_412_message,
								$title: document.site.localize.http_412_title,
								$type: "alert",
								//$buttons: "yesno",
								callback: function(response) {
									//  if (response.$clientId === "yes") {
									ajax.success(JSON.parse(jqXHR.responseText), jqXHR.statusText, jqXHR);
									//                                }
								}
							};
							document.site.showMessage(reqOptions);
						}
						break;
					default:
						_onResponseError(this, error, options, onError);
				}

			}
		});
	},
	sendCorsRequest: function(opts, onSuccess, onError) {
		var url = this.$url,
			options = opts || {}, method = this.method = options.method || "GET";

		var xhr = new XMLHttpRequest();
		if ("withCredentials" in xhr) {
			// Most browsers.
			xhr.open(method, url, true);
		} else
		if (typeof XDomainRequest != "undefined") {
			// IE8 and IE9
			xhr = new XDomainRequest();
			xhr.open(method, url);
		} else {
			// CORS not supported.
			xhr = null;
		}

		xhr.onreadystatechange = onSuccess || options.onreadystatechange;
		xhr.onloadstart = options.onloadstart;
		xhr.onprogress = options.onprogress;
		xhr.onabort = options.onabort;
		xhr.onerror = onError || options.onerror;
		xhr.onload = options.onload;
		xhr.ontimeout = options.ontimeout;
		xhr.onloadend = options.onloadend;
		xhr.send();
	}
});

function _onResponseError(httpquery, error, options, onError) {
	//	if (!options || !options.noDisplayErr || !onError) {
	//		_onReceiveError(error);
	//	}
	if (onError) {
		onError(error, httpquery);
	} else {
		if (error) {
			document.site.showDiagnoses({
				$diagnoses: error.data && error.data.length > 0 ? (error.data.indexOf("$diagnoses") >= 0 ? JSON.parse(error.data).$diagnoses : [{
					$message: error.data ? error.data : document.site.localize.http_empty_error
				}]) : [{
					$message: document.site.localize.default_err_msg
				}]
			});
		} else {
			document.site.showDiagnoses({
				$diagnoses: [{
					$message: document.site.localize.default_err_msg
				}]
			});
		}
	}
}

function _onWCNotFound(httpQuery, error, options, onError, reqOptions, dataObj, onSave) {
	var segments = document.site && document.site.mainPage && document.site.mainPage.openerUrlSegments;
	if (segments) {
		if (segments.workingCopyPreloadUrl) {
			reqOptions.$location.$url = segments.workingCopyPreloadUrl;
			if (onSave && dataObj && dataObj.$actions && document.site.mainPage.dataset && document.site.mainPage.dataset.$actions) {
				var dataset = helpers.object.clone(document.site.mainPage.dataset);
				dataset.$actions = dataObj.$actions;
				reqOptions.data = dataset;
			} else {
				reqOptions.data = dataObj || document.site.mainPage.dataset;
			}

			reqOptions.$etag = document.site.mainPage.dataset.$etag;
		} else {
			if (sessionStorage) {
				var key = segments.$url;
				if (sessionStorage.getItem(key)) {
					var data = {};
					data = JSON.parse(sessionStorage.getItem(key));
					reqOptions.$location.$url = data.wcpreloadUrl;
					reqOptions.data = dataObj || data.dataset;
					reqOptions.$etag = reqOptions.data ? reqOptions.data.$etag : reqOptions.$etag;
				} else {
					_onResponseError(httpQuery, error, options, onError);
				}
			} else {
				_onResponseError(httpQuery, error, options, onError);
			}
		}
		document.controller.sendRequest(document.site.mainPage, reqOptions);
	} else {
		_onResponseError(httpQuery, error, options, onError);
	}
}

exports.parseUrl = function($url) {
	var httpQuery = new HttpQuery();
	httpQuery.parse($url);
	return httpQuery;
};