"use strict";
var _helpers = require('syracuse-core').helpers;
var _jsurl = require('jsurl/lib/jsurl');

var _pendingRequests = 0;

// DELETE and PUT added for asynch operations support
function _parseResponse(jqXHR, data) {
	syra_site && syra_site.notifyRequestSurvey(--_pendingRequests);
	var headers = {};
	var httpHeader = jqXHR.getAllResponseHeaders();
	if ((httpHeader = httpHeader.trim())) {
		var parts = httpHeader.split("\n");
		for (var ii = 0, jj = parts.length; ii < jj; ii++) {
			var header = parts[ii].trim();
			if (header) {
				var separatorIndex = header.indexOf(":");
				headers[header.substr(0, separatorIndex).trim().toLowerCase()] = header.substr(separatorIndex + 1).trim();
			}
		}
	}
	return {
		status: jqXHR.status,
		headers: headers,
		data: data || jqXHR.responseText
	};
}



function HttpQuery(options) {
	this.initialSid = syra_site.getSessionId();
	this.options = options;
	this.openerUrlSegments = syra_url.parse(this.$url = options.$url);
	this.headers = this.headers || {};
	if (this.options.headers) {
		for (var prop in this.options.headers) {
			this.headers[prop] = this.options.headers[prop];
		}
	}
	this.method = this.options.method || "GET";
	this.options.accept = this.options.accept || this.options.$acceptType;
	this.options.contentType = this.options.contentType || this.options.$contentType;

	this.headers.Accept = this.options.accept || "application/json;vnd.sage=syracuse; charset=utf-8";

	if (this.options.contentType) {
		this.headers["content-type"] = this.options.contentType;
	}
	if (!this.dataType) {
		this.dataType = this.headers["Accept"] || this.headers["content-type"] || "text/html";
		if (this.dataType.indexOf("application/json") != -1) {
			this.dataType = "json";
		} else {
			this.dataType = "text";
		}
	}
	this.headers["content-type"] = this.headers["content-type"] || (this.dataType === "json" ? "application/json" : "");

	if (!(this.options.headers && this.options.headers["accept-language"])) {
		var language = syra_localizer.getLanguage();
		if (language) {
			this.headers["accept-language"] = language;
		}
	}
	if (this.options.data) {
		this.sendData = this.dataType === "json" ? JSON.stringify(this.options.data) : this.options.data;
	}
	if (this.options.jsonParams) {
		this.options.params = this.options.params || {};
		var keys = Object.keys(this.options.jsonParams);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			this.options.params[keys[ii]] = _jsurl.stringify(this.options.jsonParams[keys[ii]]);
		}
	}
	if (this.options.params) {
		// network breakdown - add for non get query a unique identifier
		this.$url = syra_url.applyParameters(this.$url, this.options.params);
	}
	if (this.options.$etag) {
		this.headers["If-Match"] = this.options.$etag;
	}
	if (["GET", "POST", "DELETE", "PUT"].indexOf(this.method) < 0) {
		this.headers["X-HTTP-Method-Override"] = this.method;
		this.method = "POST";
	}
	var retryId = this.method !== "GET" ? _helpers.uuid.generate("") : null;
	if (retryId) {
		this.$url += (this.$url.indexOf('?') !== -1) ? "&retryId=" + retryId : "?retryId=" + retryId;
	}
}

function _getDiagnoses(error) {
	var $diagnoses;
	var data = error && error.data;
	if (data && data.length) {
		if (data.indexOf("$diagnoses") >= 0 || data.indexOf("diagnoses") >= 0) {
			try {
				data = JSON.parse(data);
				$diagnoses = data.$diagnoses || data.diagnoses;
			} catch (error) {}
		} else {
			$diagnoses = [{
				$message: data ? data : syra_local.http_empty_error
			}];
		}
	}
	return $diagnoses || [{
		$message: syra_local.default_err_msg
	}];
}

HttpQuery.prototype._send = function(nbTry) {
	var self = this;
	self.$url = syra_url.history.ensureProxy(self.$url);
	syra_site.notifyRequestSurvey(++_pendingRequests);
	self.options.ajaxQuery = $.ajax({
		url: self.$url, // add retryid for post request
		type: self.method,
		dataType: self.dataType,
		data: self.sendData,
		xhrFields: self.xhrFields,
		contentType: self.headers["content-type"],
		async: self.options.syncRqst ? false : true,
		beforeSend: function(jqXHR, settings) {
			if (self.headers) {
				var keys = Object.keys(self.headers);
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					jqXHR.setRequestHeader(keys[ii], self.headers[keys[ii]]);
				}
			}
		},
		complete: function() {
			delete self.options.ajaxQuery;
		},
		success: function(data, textStatus, jqXHR) {
			var response = _parseResponse(jqXHR, data);
			if (self.initialSid && (syra_site.getSessionId() !== self.initialSid) && syra_site.userProfile && !syra_site.userProfile.onLogonProcessing) {
				syra_site.userProfile.switchToNewSession(function() {
					self.options.success(response.data, response, self.$url);
				});
			} else {
				self.options.success(response.data, response, self.$url);
			}
			// timer to handle convergence session disconnection in case of timeout
			syra_fusion && syra_fusion.updateRequestTimer();

		},
		error: function(jqXHR, textStatus, errorThrown) {
			var error = _parseResponse(jqXHR, null);
			if (jqXHR.status === 401) {
				// read www-authenticate header to extract method
				var auth = error.headers && error.headers["www-authenticate"] || "";
				var mt = ((auth.split(" ")[0]) || "").toLowerCase();
				if (mt) {
					var dataObj = error.data && error.headers["content-type"] && error.headers["content-type"] === "application/json" ? JSON.parse(error.data) : {};
					var next = dataObj && dataObj.$location && dataObj.$location.$url;
					// self.$url cannot be ...pages('...'), it has to be a resource(s) address, so use actual location as origin
					//if (next) window.location.href = next + "?callbackUrl=" + encodeURIComponent("/syracuse-main/html/main.html?url=" + encodeURIComponent(self.$url));
					if (next)
						window.location.href = (next || "/index.html") + "?callbackUrl=" + encodeURIComponent(window.location.href);
				}
			} else {
				self.options.isAborted = jqXHR.status == 0 && jqXHR.statusText === "abort";
			}
			// check before normal error management if we can retry
			switch (jqXHR.status) {
				// retry error
				case 408:
				case 502:
				case 503:
				case 504:
				case 12152:
				case 12001:
				case 12156:
					if (nbTry--) {
						self._send(nbTry);
						return;
					}
					break;
			}
			var $diagnoses = _getDiagnoses(error);
			if (!self.options.error || self.options.error(error, self, $diagnoses)) {
				var ajax = this;
				switch (jqXHR.status) {
					case 0:
						if (!self.options.isAborted) {
							syra_alert.error($diagnoses);
						}
						break;
					case 404:
						//---------------------------------------
						// handling working copy expired 404 case
						//---------------------------------------
						// logout and user profile specific cases
						var dataObj = ajax.data ? JSON.parse(ajax.data) : dataObj;
						if (dataObj && dataObj.$actions) {
							// in case of logout
							if (dataObj.$actions.$logout && dataObj.$actions.$logout.$isRequested) {
								setTimeout(function() {
									syra_site.unload();
									window.open("/", "_self");
								}, 100);
								break;
							} else {
								// in case of some user profile property value change, or in case of regular WC save
								if (dataObj.$actions.$save && dataObj.$actions.$save.$isRequested) {
									if (dataObj.$url && dataObj.$url.indexOf("userProfile") >= 0) {
										if (syra_site.userProfile) {
											var reqOptions = {
												page: syra_site.userProfile,
												$url: syra_site.userProfile.wcpreloadUrl,
												data: JSON.parse(ajax.data)
											};
											if (reqOptions.data) {
												reqOptions.$etag = reqOptions.data.$etag;
											}
											exports.post(reqOptions);
										} else {
											syra_alert.error($diagnoses);
										}
										break;
									}
								}
								syra_form.onWorkingCopyNotFound(self, $diagnoses, dataObj);
							}
						} else {
							// in case of 404 after a lookup query, display $diagnoses
							if (ajax.url.indexOf("$lookup") != -1 && error.data) {
								syra_alert.error($diagnoses);
							} else {
								if (syra_form.isFormUrl(self.$url)) {
									syra_form.onWorkingCopyNotFound(self, $diagnoses);
								} else {
									syra_alert.error(_getDiagnoses(error));
								}
							}
						}
						break;
					case 412:
						if (self.options.page && self.options.page.sendBag) {
							self.options.page.sendBag.on412 = true;
						} else {
							syra_alert.modal({
								$message: syra_local.http_412_message,
								$title: syra_local.http_412_title,
								$type: "error",
								click: function(response) {
									ajax.success(JSON.parse(jqXHR.responseText), jqXHR.statusText, jqXHR);
								}
							});
						}
						break;
					default:
						if (jqXHR.status >= 500) {
							//to improve #5390
							if (self.options && self.options.page && self.options.page.overPanel) {
								self.options.page.overPanel.close();
							}

						}
						syra_alert.error($diagnoses);
						break;
				}
			}
		}
	});
};


exports["delete"] = function(options) {
	options.method = "DELETE";
	exports.send(options);
};

exports.get = function(options) {
	options.method = "GET";
	exports.send(options);
};

exports.post = function(options) {
	options.method = "POST";
	exports.send(options);
};

exports.put = function(options) {
	options.method = "PUT";
	exports.send(options);
};

exports.send = function(options) {
	options.method = options.method || "GET";
	options.$url = options.url || options.$url;
	var http = new HttpQuery(options);
	http._send(syra_site.userProfile.getRetryOnError() - 1);
};

exports.upload = function(options) {
	// tweek, only Firefox implements binary transfer, see "http://javascript0.org/wiki/Portable_sendAsBinary"
	if (!XMLHttpRequest.prototype.sendAsBinary) {
		XMLHttpRequest.prototype.sendAsBinary = function(datastr) {
			function byteValue(x) {
				return x.charCodeAt(0) & 0xff;
			}
			var buf;
			try {
				// check if Uint8Array is avalable (IE9 doesn't have it)
				buf = new Uint8Array(1);
				var ords = Array.prototype.map.call(datastr, byteValue);
				buf = (new Uint8Array(ords)).buffer;
			} catch (e) {
				buf = datastr;
			}
			this.send(buf);
		};
	}
	var xhr = new XMLHttpRequest();
	xhr.open("PUT", options.url);
	if (options.headers) {
		var keys = Object.keys(options.headers);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			xhr.setRequestHeader(keys[ii], options.headers[keys[ii]]);
		}
	}
	xhr.setRequestHeader("accept", "application/json;vnd.sage=syracuse");
	xhr.setRequestHeader("content-type", options.contentType || "application/octet-stream");
	xhr.setRequestHeader("x-file-name", encodeURIComponent(options.fileName || options.file.name));
	// response callback
	if (options.success)
		xhr.onreadystatechange = function() {
			if (xhr.readyState == 4) {
				// IE misinterpret 204 as 1223
				var response = _parseResponse(xhr, (xhr.response && (typeof xhr.response !== "object")) ? JSON.parse(xhr.response) : xhr.response);
				if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || xhr.status == 1223) {
					// expects a json; TODO: check Content-Type header
					options.success(response.data, response);
				} else {
					if (options.error) {
						options.error(response.data, response);
					} else {
						var error = _parseResponse(xhr, null);
						var $diagnoses = _getDiagnoses(error);
						if (syra_site.mainPage && !syra_site.mainPage.disposed) {
							syra_alert.error($diagnoses);
						} else {
							syra_alert.modal({
								$message: syra_local["http_" + error.status] ? syra_local["http_" + error.status] : syra_local.default_err_msg,
								$title: syra_local["http_" + error.status + "_title"] ? syra_local["http_" + error.status + "_title"] : syra_local.siteMsgboxTitle,
								$type: "fatal",
								$buttons: "ok",
								$diagnoses: $diagnoses
							});
						}
					}
				}
			}
		};
	// progress callback
	if (options.progress) {
		xhr.upload.addEventListener("progress", function(e) {
			if (e.lengthComputable) {
				options.progress(Math.round((e.loaded * 100) / e.total));
			}
		}, false);

		xhr.upload.addEventListener("load", function(e) {
			options.progress(100, true);
		}, false);
	}

	if (options.file) {
		var self = this;
		self.isIe10 = syra_site.browser.isMSIE && (syra_site.browser.info[1].indexOf("10.0") != -1);

		var reader = new FileReader();
		reader.onload = function(evt) {
			if (self.isIe10)
				xhr.send(evt.target.result); //IE10
			else
				xhr.sendAsBinary(evt.target.result);
		};
		if (self.isIe10)
			reader.readAsArrayBuffer(options.file); //IE10
		else
			reader.readAsBinaryString(options.file);
	} else {
		xhr.sendAsBinary(options.buffer);
	}
};