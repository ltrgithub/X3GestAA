"use strict";
var helpers = require('syracuse-core/lib/helpers');
var soapController = require("syracuse-ui/lib/soap/soapController");
var uitestController = require("syracuse-ui/lib/tests/uitestController");
var searchController = require('syracuse-ui/lib/site/search/searchController');

function Controller() {}

exports.Controller = helpers.defineClass(Controller, null, {
	saveWorkingCopyDataset: function(workingCopyPage) {
		this._workingCopies = this._workingCopies || [];
		if (workingCopyPage.dataset) {
			if (this._workingCopies.legth == 5) {
				this._workingCopies.pop();
			}
			this._workingCopies.unshift({
				$representationUrl: workingCopyPage.$representationUrl,
				dataset: workingCopyPage.dataset
			});
		}
	},
	findWorkingCopyDataset: function($representationUrl) {
		if (this._workingCopies) {
			for (var ii = 0, jj = this._workingCopies.length; ii < jj; ii++) {
				if (this._workingCopies[ii].$representationUrl == $representationUrl) {
					var dataset = this._workingCopies[ii].dataset;
					this._workingCopies.splice(ii, 1);
					return dataset;
				}
			}
		}
		return null;
	},
	deleteWorkingCopy: function(workingCopyPage) {
		if (workingCopyPage && !workingCopyPage.isFusionPage && workingCopyPage.$isEditMode) {
			var $representationUrl = workingCopyPage.$prototype ? workingCopyPage.$prototype.$representationUrl : null;
			if ($representationUrl && $representationUrl.search(/\$workingCopies/i) >= 0) {
				//this.saveWorkingCopyDataset(workingCopyPage);
				var httpQuery = this.parseUrl($representationUrl);
				httpQuery.sendRequest({
					method: "DELETE"
				}, function(data, response) {

				}, function(data, response) {

				});
			}
		}
	},
	changeMainPage: function($url, $itemPage, onHistoryChange) {
		var self = this;
		var designer = document.site.mainPage && document.site.mainPage.designer;
		if (designer && designer.onBeforeMainPageChange) {
			if (!designer.onBeforeMainPageChange(function() {
				self.changeMainPage($url, $itemPage);
			})) {
				return false;
			}
		}
		self.deleteWorkingCopy(document.site.mainPage);

		if (true || self._currentUrl != $url) {
			self._currentUrl = $url;
			var workingCopyPreload = self._workingCopyPreload;
			self._workingCopyPreload = null; //!important release buffer
			var openerUrlSegments = document.site.urlMaker.parse($url);
			if (soapController.isSoapUrl(openerUrlSegments.$url)) {
				soapController.openRequestPage(openerUrlSegments);
				return;
			}
			if (uitestController.isUiTestUrl(openerUrlSegments.$url)) {
				uitestController.openPage(openerUrlSegments);
				return;
			}
			if (searchController.isSearchUrl(openerUrlSegments.$url)) {
				searchController.openRequestPage(openerUrlSegments);
				return;
			}
			if ($itemPage) {
				$itemPage.initData = $itemPage.initData || (workingCopyPreload ? workingCopyPreload.initData : null);
				$itemPage.openerUrlSegments = openerUrlSegments;
				$itemPage.openerUrlSegments.fullUrl = document.location.href;
				document.site.onMainPageChange($itemPage);
			} else {
				if (openerUrlSegments.isFusion) {
					document.site.fusionGateway.openMainPage(openerUrlSegments);
				} else {
					var workBook;
					if (document.site.fusionGateway && (workBook = document.site.fusionGateway.activatedBook)) {
						workBook.onCloseAllSheets(function(allSheetsClosed) {
							if (!allSheetsClosed) {
								if (onHistoryChange) {
									document.site.history.cancelChange();
								}
							} else {
								self.changeMainPage($url, $itemPage, onHistoryChange);
							}
						});
						return false;
					}
					self.loadRepresentation({
						article: null,
						segments: openerUrlSegments,
						success: function($itemPage) {
							$itemPage.initData = $itemPage.initData || (workingCopyPreload ? workingCopyPreload.initData : null);
							$itemPage.openerUrlSegments = openerUrlSegments;
							if (workingCopyPreload) {
								$itemPage.openerUrlSegments.workingCopyPreloadUrl = workingCopyPreload.openUrl;
								// save working copy preload url (session storage)
								self._saveWCPreloadUrl(openerUrlSegments.$url, workingCopyPreload.openUrl);
							}
							$itemPage.openerUrlSegments.fullUrl = document.location.href;
							document.site.onMainPageChange($itemPage);
						}
					});
				}
			}

		}
	},
	_saveWCPreloadUrl: function(key, preloadUrl) {
		if (sessionStorage) {
			var data = {};
			data.wcpreloadUrl = preloadUrl;
			sessionStorage.setItem(key, JSON.stringify(data));
			//console.log("preloadUrl=" + preloadUrl);
		}
	},
	parseUrl: function($url) {
		var ctrl = document.site.requestControllers[$url.split(":")[0]] || document.site.requestControllers.http;
		return ctrl.parseUrl($url);
	},
	//article, segments, success, onError, onBeforeOpen, sendRqtOpts
	loadRepresentation: function(options) {
		var self = this;
		if (typeof(options.segments) == "string") {
			this.loadRepresentation({
				article: options.article,
				segments: document.site.urlMaker.parse(options.article ? document.site.expressionMaker.parse(options.article, options.segments) : options.segments),
				success: options.success,
				onError: options.onError,
				onBeforeOpen: options.onBeforeOpen,
				sendRqtOpts: options.sendRqtOpts
			});
		} else {
			options.$representationUrl = options.segments.$url;
			//xhr.withCredentials = true;
			self.parseUrl(document.site.urlMaker.buildPageCollaborationUrl(options.article || document.site, options.segments)).sendRequest(options.sendRqtOpts, function($representation, response, $url) {
				$representation.$pageCollaborationUrl = $url;
				self._loadRepresentationContent($representation, options);
			}, options.onError);
		}
	},
	_loadRepresentationContent: function($representation, options, userPreferenceLoading) {
		var self = this;
		$representation.$prototype = $representation.$prototype || {};
		if (typeof($representation.$prototype) == "string") {
			self.parseUrl($representation.$prototype).sendRequest(options.sendRqtOpts, function($prototype) {
				$representation.$prototype = $prototype;
				self._loadRepresentationContent($representation, options);
			}, options.onError);
			return;
		}
		if ($representation.$prototype.$article && typeof($representation.$prototype.$article) == "string") {
			self.parseUrl($representation.$prototype.$article).sendRequest(options.sendRqtOpts, function($article) {
				$representation.$prototype.$article = $article;
				self._loadRepresentationContent($representation, options);
			}, options.onError);
			return;
		}
		if (!userPreferenceLoading) {
			var $userPreferencesLink = $representation.$links && $representation.$links.$userPreferences;
			if ($userPreferencesLink) {
				self.parseUrl($userPreferencesLink.$url).sendRequest(options.sendRqtOpts, function(userPreferences) {
					$representation.userPreferences = userPreferences;
					self._loadRepresentationContent($representation, options, true);
				}, options.onError);
				return;
			}
		}
		/*	if ($representation.userPreferences && typeof($representation.userPreferences) == "string") {
         self.parseUrl($representation.userPreferences).sendRequest(options.sendRqtOpts, function(userPreferences) {
         $representation.userPreferences = userPreferences;
         self._loadRepresentationContent($representation, options);
         }, options.onError);
         return;
         }*/
		if ($representation.$article && typeof($representation.$article) == "string") {
			self.parseUrl($representation.$article).sendRequest(options.sendRqtOpts, function($article) {
				$representation.$article = $article;
				self._loadRepresentationContent($representation, options);
			}, options.onError);
			return;
		}
		var userProfile = document.site.userProfile;
		if (userProfile) {
			if (userProfile.dataset && userProfile.dataset.selectedRole) {
				$representation.$prototype.$role = userProfile.dataset.selectedRole.$uuid; //important for url 
			}
		}
		$representation.$prototype.$representationUrl = options.$representationUrl;
		if (options.onBeforeOpen) {
			options.onBeforeOpen($representation);
		}
		options.success({
			openerUrlSegments: options.segments,
			$representation: $representation
		});

		if (document.site.bookmarksManager) {
			document.site.bookmarksManager.checkMainPage();
		}
	},
	sendRequest: function(page, options, onSuccess, onError) {
		var self = this;
		options = options || {};
		options.page = page;
		options.$location = options.$location || {
			$url: page.getDataUrl()
		};
		if (options.$location.$url) {
			var httpQuery = self.parseUrl(options.$location.$url);
			if (options.$location.$type) {
				options.$acceptType = options.$location.$type;
			}
			if (options.$location.$contentType) {
				options.$contentType = options.$location.$contentType;
			}
			httpQuery.sendRequest(options, function(data, response, requestUrl) {
				if (onSuccess) {
					onSuccess(data, response, requestUrl);
				} else {
					page.startChange();
					page.applyChange(data, response, requestUrl);
					page.endChange();
				}
				if (options.$updateHitory) {
					document.site.history.update(page, requestUrl);
				}
			}, onError);
		}
	},
	openPage: function(menuArticle, menu, record) {
		var self = this;
		switch (menu.$target) {
			case "worksheet":
				document.site.excelDocument.loadPage({
					$url: menu.$url,
					$title: (menuArticle && menuArticle.dataset && menuArticle.dataset.title) || menu.$title
				});
				break;
			case "popup":
				document.site.dialogManager.openModeless(menu.boxParent, {
					article: menuArticle,
					$url: menu.$url
				});
				break;
			default:
				document.site.urlMaker.formatMenuUrl(menuArticle, menu, record, function($url, isCanceled) {
					if (menu.$invocationMode === "async" && menuArticle.dataset && menuArticle.dataset.$trackngId) {
						document.site.registerJobSyra($url, undefined, menu.$title, menuArticle.dataset.$trackngId);
						return;
					}
					if (!isCanceled) {
						var isRepresentationUrl = true;
						var segments = document.site.urlMaker.parse($url, true);
						var target = menu.$target;
						if (segments.isSyracuse) {
							if (segments.uri.search(/mobile\.html/i) > 0) {
								document.site.history.load($url, "blank", null, false);
								return;
							}
							if (segments.$facet == "$summary") {
								document.site.dialogManager.openModeless(menu.boxParent, {
									article: menuArticle,
									$url: $url
								});
								return;
							} else {
								if (menu.$type && menu.$type.indexOf("json") == -1) {
									target = "blank";
								} else {
									var htmIndex = segments.uri.search(/\.html/i);
									if (htmIndex > 0) {
										//test for excelconfig.html
										if ((segments.uri.length - 5) == htmIndex) {
											var curUrlSegments = document.site.urlMaker.parse(document.location.href);
											if (curUrlSegments.uri.indexOf(segments.uri) < 0) {
												isRepresentationUrl = false;
												target = "blank";
											}
										}
									}
									if (isRepresentationUrl) {
										if (menu.boxParent) {
											if (menu.page && menu.page.dialogWrapper && menu.page.dialogWrapper.isModal) {
												target = "blank";
											}
										}
									}
								}
							}
						} else {
							target = "blank";
						}
						if (target != "blank" && target != "main" && menuArticle.page && menuArticle.page.$pageCategory == "vignette") {
							// in case of search vignette page (fk)
							if (menuArticle.page.vignetteField.page && menuArticle.page.vignetteField.page.$pageCategory == "search") {
								document.site.history.load($url, target);
							} else {
								menuArticle.page.vignetteField.renderLayoutContent($url);
							}
						} else {
							if (isRepresentationUrl && menu && menu.isRepresentationUrl && !menu.isRepresentationUrl()) {
								isRepresentationUrl = false;
							}
							document.site.history.load($url, target, null, isRepresentationUrl);
						}
					}
				});
				break;
		}
	},

	loadWorkingCopy: function(options) {
		var self = this;
		self.postQuery(options.menu, options.record || null, null, function($location, data) {
			if (options.menuArticle) {
				var segments = document.site.urlMaker.parse($location.$url = document.site.expressionMaker.parse(options.menuArticle, $location.$url, data));
				self._workingCopyPreload = {
					initData: (options.menu.$method != "DELETE") ? data : null,
					openUrl: options.menu.$url
				};
				document.site.history.load(segments.$url, segments.target);
			} else {
				self.loadRepresentation({
					article: null,
					segments: $location.$url,
					success: function($itemPage) {
						if (options.article && options.article.page) {
							options.article.$prototype = $itemPage.$representation.$prototype;
							options.article.page.initializeNewItem(options.article, {});
							options.article.loadBox(data);
							if (options.callback) {
								options.callback($itemPage, $location, data);
							}
							// userprofile working copy preload $url save (session storage) 
							if ($itemPage.$representation.$prototype.$representation == "userProfile" && sessionStorage) {
								self._saveWCPreloadUrl("userProfile", options.menu.$url);
							}
						} else {
							//   debugger;
						}
					}
				});
			}

		});
	},
	postQuery: function(menu, record, article, callback, callbackError) {
		var self = this;
		var menuArticle = article;
		if (!menuArticle && menu.getArticle) {
			menuArticle = menu.getArticle();
		}
		if (!menuArticle) {
			menuArticle = document.site; //a ameliorer
		}
		menu.$method = menu.$method || "POST";
		document.site.urlMaker.formatMenuUrl(menuArticle, menu, record, function($url) {
			menu.$url = $url;
			self.sendRequest(menuArticle, {
				$location: menu,
				params: {
					trackingId: helpers.uuid.generate()
				},
				headers: menu.httpHeaders,
				method: menu.$method,
				data: menu.sendData,
				noDisplayErr: menu.noDisplayErr || false
			}, function(data, response) {
				var $location = {
					$url: response.headers.location,
					type: ""
				};
				if ($location.$url) {
					$location.$type = response.headers["content-type"];
				} else {
					$location.$url = response.data.$url || menu.$url;
					$location.$type = response.data.$type || menu.$type;
				}
				callback($location, response.data);
			}, function(err) {
				if (callbackError) {
					callbackError(err);
				} else {
					document.site.showDiagnoses({
						$diagnoses: err.data && err.data.length > 0 ? (err.data.indexOf("$diagnoses") >= 0 ? JSON.parse(err.data).$diagnoses : [{
							$message: err.data ? err.data : document.site.localize.http_empty_error
						}]) : [{
							$message: document.site.localize.default_err_msg
						}]
					});
				}
			});
		});

	},
	_executeAction: function(menuItem, record, article) {
		var menuArticle = article || menuItem.getArticle();
		var target = menuItem.contextField || menuArticle;
		if (target || menuArticle) {
			var request = {};

			var r = request[menuItem.$sourceBind || (menuItem.$item && menuItem.$item.$bind)] = {
				$isRequested: true
			};
			if (menuItem.$invocationMode === "async") {
				r.$trackingId = helpers.uuid.generate();
			}
			if (menuItem.$parameters) {
				document.site.urlMaker.notifyParametersActionChange(menuArticle, menuItem, record, target, request);
			} else {
				menuArticle.page.notifyActionChange(menuItem, target, request);
			}
		}
	},
	isWorkingCopyUrl: function($url, $sourceUrl) {
		var isWorkingCopy = $url && $url.indexOf("$workingCopies") >= 0;
		if (!isWorkingCopy && $sourceUrl) {
			isWorkingCopy = $sourceUrl.indexOf("$workingCopies") >= 0;
		}
		return isWorkingCopy;
	},
	executeMenu: function(menu, record, article, confirmed) {
		if (menu.$isAction || menu.$url || menu.$sourceUrl) {
			var self = this;
			var menuArticle = article || menu.getArticle();
			if (menuArticle && menuArticle.dataset) {
				if (menu.$invocationMode === "async") {
					menuArticle.dataset.$trackngId = helpers.uuid.generate();
				} else {
					delete menuArticle.dataset.$trackngId;
				}
			}
			// temporarily, until $confirm-message protocol extension
			if (menu.$confirm && menu.$officeAddinSetup) {
				if (helpers.getCookie("SyracuseOfficeAddin") === "valid") {
					menu.$confirm = "";
				}

			}
			if (menu.$url && menu.$url.indexOf("SyracuseOfficeAddinsSetup.EXE") > 0) {
				helpers.setCookie("SyracuseOfficeAddin", "valid", null, (new Date((new Date().getYear() + 1910), new Date().getMonth(), new Date().getDate())).toUTCString());
			}
			// temporarily END

			if (!confirmed && menu.$confirm) {
				document.site.showMessage({
					$title: document.site.expressionMaker.parse(menuArticle, menu.$title || document.site.localize.siteDefaultConfirmTitle),
					$message: document.site.expressionMaker.parse(menuArticle, menu.$confirm),
					$type: "question",
					callback: function(response) {
						if (response && response.$clientId === "yes") {
							// temporarily, until $confirm-message protocol extension
							if (menu.$officeAddinSetup) {
								helpers.setCookie("SyracuseOfficeAddin", "valid", null, (new Date((new Date().getYear() + 1910), new Date().getMonth(), new Date().getDate())).toUTCString());
							}
							// temporarily END
							self.executeMenu(menu, record, article, true);
						}
					}
				});
				return;
			}
			if (menu.$isAction) {
				self._executeAction(menu, record, menuArticle);
			} else {
				if (menu.$method && (menu.$method != "GET")) {
					if (this.isWorkingCopyUrl(menu.$url, menu.$sourceUrl)) {
						self.loadWorkingCopy({
							menu: menu,
							menuArticle: menuArticle,
							record: record,
							article: article
						});
					} else {
						self.postQuery(menu, record || null, null, function($location, data) {
							switch (menu.page.$facet) {
								case "$query":
								case "$bulk":
									menu.page.fetchLastRequest(function(lastData) {
										if (lastData && data.$diagnoses) {
											lastData.$diagnoses = lastData.$diagnoses || [];
											for (var ii = data.$diagnoses.length - 1; ii >= 0; ii--) {
												lastData.$diagnoses.unshift(data.$diagnoses[ii]);
											}
										}
										menu.page.startChange();
										menu.page.applyChange(lastData);
										menu.endChange();
									});
									break;
								case "$details":
									menu.page.applyChange(data);
									if (menu.$method == "DELETE") {
										menu.page.freezeDeletedPage();
									}
									var menuArticle = menu.articleParent || menu.getArticle();
									if (menu.$invocationMode && menu.$invocationMode == "async" && menuArticle.dataset && menuArticle.dataset.$trackngId) {
										document.site.registerJobSyra($location.$url, undefined, menu.$title, menuArticle.dataset.$trackngId);
									}
									break;
								default:
									if (menu.page) {
										menu.page.startChange();
										menu.page.onExecuteMenuResponse(menu, data);
										menu.endChange();
									}
									break;
							}

						});
					}
				} else {
					self.openPage(menuArticle, menu, record);
				}
			}
		}
	},
	/**** File management ****/
	upload: function(file, $url, contentType, article, requestCallback, progressCallback, errorCallback) {
		document.site.requestControllers.http.upload({
			file: file,
			url: document.site.expressionMaker.parse(article, $url),
			//            contentType: "image"
			contentType: contentType || file.type
		}, requestCallback, progressCallback, errorCallback);
	},
	deleteFile: function($url, article, callback, onError, options) {
		var httpQuery = this.parseUrl(document.site.expressionMaker.parse(article, $url));
		if (!options) {
			options = {};
		}
		options.method = "DELETE";
		httpQuery.sendRequest(options, function(data, response) {
			if (callback) {
				callback(data, response);
			} else {
				page.applyChange(data, response);
			}
		}, function(data, response) {
			if (onError) {
				onError(data, response);
			} else {
				document.site.showDiagnoses({
					$diagnoses: data && data.length > 0 ? (data.indexOf("$diagnoses") >= 0 ? JSON.parse(data).$diagnoses : [{
						$message: data ? data : document.site.localize.http_empty_error
					}]) : [{
						$message: document.site.localize.default_err_msg
					}]
				});
			}
		});
	},
	disposeObject: function(instance) {
		if (instance) {
			if (!instance.disposed) {
				if (instance.dispose) {
					instance.dispose();
				}
				var props = Object.keys(instance);
				for (var ii = 0, jj = props.length; ii < jj; ii++) {
					var field = instance[props[ii]];
					if (field && field.dispose) {
						this.disposeObject(field);
					}
					instance[props[ii]] = null;
				}
				instance.disposed = true;
			} else {
				// console.log("instance already disposed");
			}
		}
	},
	dispose: function() {
		this._workingCopies = null;
	}
});