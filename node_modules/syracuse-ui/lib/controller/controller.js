"use strict";
var helpers = require('syracuse-core/lib/helpers');
var globals = require('streamline/lib/globals');
var soapController = require("syracuse-ui/lib/soap/soapController");
var uitestController = require("syracuse-ui/lib/tests/uitestController");
var searchController = require('syracuse-ui/lib/site/search/searchController');

function Controller() {}

exports.Controller = helpers.defineClass(Controller, null, {
	initialize: function() {},
	reloadMainPage: function() {
		// handle LTR / RTL switch
		var lp = globals.context && globals.context.localePreferences;
		var rtl = lp && lp.code && /^(ar|iw)/.test(lp.code);
		var href = document.location.href;
		var qm = href.indexOf('?');
		if (rtl && !/rtl=true/.test(href))
			href += (qm < 0 ? '?' : '&') + 'rtl=true';
		else
		if (!rtl)
			href = href.replace(/(\?|\&)rtl=true/, '');
		// reload page if writing direction changes
		if (href != document.location.href)
			document.location.href = href;
		else
			this.changeMainPage(href);
	},
	startNavigation: function() {
		var self = this;
		//load representation of url
		self.reloadMainPage();
		//listen history change
		window[window.history.pushState ? "onpopstate" : "onhashchange"] = function(event) {
			if (self.$updateHitory) {
				self.$updateHitory = false;
			} else {
				//if (document.location.href.indexOf("#&ui-state=dialog") < 0)
				self.reloadMainPage();
			}
		};
	},
	saveWorkingCopyDataset: function(workingCopyPage) {
		this._workingCopies = this._workingCopies || [];
		if (workingCopyPage.dataset) {
			if (this._workingCopies.legth == 5) {
				this._workingCopies.pop();
			}
			this._workingCopies.unshift({
				$representationUrl: workingCopyPage.$representationUrl,
				dataset: workingCopyPage.dataset
			});
		}
	},
	findWorkingCopyDataset: function($representationUrl) {
		if (this._workingCopies) {
			for (var ii = 0, jj = this._workingCopies.length; ii < jj; ii++) {
				if (this._workingCopies[ii].$representationUrl == $representationUrl) {
					var dataset = this._workingCopies[ii].dataset;
					this._workingCopies.splice(ii, 1);
					return dataset;
				}
			}
		}
		return null;
	},
	deleteWorkingCopy: function(workingCopyPage) {
		if (workingCopyPage && !workingCopyPage.isFusionPage && workingCopyPage.$isEditMode) {
			var $representationUrl = workingCopyPage.$prototype ? workingCopyPage.$prototype.$representationUrl : null;
			if ($representationUrl && $representationUrl.search(/\$workingCopies/i) >= 0) {
				//this.saveWorkingCopyDataset(workingCopyPage);
				var httpQuery = this.parseUrl($representationUrl);
				httpQuery.sendRequest({
					method: "DELETE"
				}, function(data, response) {

				}, function(data, response) {

				});
			}
		}
	},
	changeMainPageEndpoint: function(newEndpoint) {
		var httpQuery = this.parseUrl(this.extractUrlFromLocationHref(document.location.href));
		this.updateHistory(httpQuery.replaceEndpoint(newEndpoint));
		this.reloadMainPage();
	},
	extractUrlFromLocationHref: function(href) {
		var urlParam = href.search(/\?url=/i);
		if (urlParam >= 0) {
			return decodeURIComponent(href).slice(urlParam + ("?url=").length);
		}
		return href;
	},
	changeMainPage: function(url, $itemPage) {
		var self = this;
		if (document.site.authorPage) {
			if (!document.site.authorPage.onBeforeMainPageChange(function() {
				self.changeMainPage(url, $itemPage);
			})) {
				return false;
			}
		}
		self.deleteWorkingCopy(document.site.mainPage);
		if (!window.history.pushState) {
			var hash = url.indexOf("#");
			if (hash >= 0) {
				var urlPath = url.slice(0, hash);
				if (urlPath.indexOf("?") >= 0) {
					urlPath = urlPath.slice(0, urlPath.indexOf("?"));
				}
				url = urlPath + window.unescape(url.slice(hash + 1));
			} else {
				if (url.indexOf("?") < 0) {
					//add default homepage
				}
			}

		}
		if (self._currentUrl != url) {
			self._currentUrl = this.extractUrlFromLocationHref(url);
			var workingCopyPreload = self._workingCopyPreload;
			self._workingCopyPreload = null; //!important release buffer
			var httpQuery = self.parseUrl(self._currentUrl);
			if (soapController.isSoapUrl(httpQuery.$url)) {
				soapController.openRequestPage(httpQuery);
				return;
			}
			if (uitestController.isUiTestUrl(httpQuery.$url)) {
				uitestController.openPage(httpQuery);
				return;
			}
			if (searchController.isSearchUrl(httpQuery.$url)) {
				searchController.openRequestPage(httpQuery);
				return;
			}
			if ($itemPage) {
				$itemPage.initData = $itemPage.initData || (workingCopyPreload ? workingCopyPreload.initData : null);
				$itemPage.httpQuery = httpQuery;
				$itemPage.httpQuery.fullUrl = document.location.href;
				document.site.onMainPageChange($itemPage);
			} else {
				if (httpQuery.$urlParts.isFusion) {
					document.site.fusionGateway.openMainPage(httpQuery);
				} else {
					var workBook;
					if (document.site.fusionGateway && (workBook = document.site.fusionGateway.activatedBook)) {
						//window.history.pushState("",document.location.href,document.location.href);
						workBook.onCloseAllSheets(function() {
							if (workBook.sheets.length != 0) {
								window.history.forward();
							}
						});
						return false;
					}
					self.loadRepresentation(null, httpQuery, function($itemPage) {
						$itemPage.initData = $itemPage.initData || (workingCopyPreload ? workingCopyPreload.initData : null);
						$itemPage.httpQuery = httpQuery;
						if (workingCopyPreload) {
							$itemPage.httpQuery.workingCopyPreloadUrl = workingCopyPreload.openUrl;
							// save working copy preload url (session storage)
							self._saveWCPreloadUrl(httpQuery.$url, workingCopyPreload.openUrl);
							//self._saveWCPreloadUrl(httpQuery.$url, httpQuery.fullUrl);
						}
						$itemPage.httpQuery.fullUrl = document.location.href;
						document.site.onMainPageChange($itemPage);
					});
				}
			}

		}
	},
	_saveWCPreloadUrl: function(key, preloadUrl) {
		if (sessionStorage) {
			var data = {};
			data.wcpreloadUrl = preloadUrl;
			sessionStorage.setItem(key, JSON.stringify(data));
			//console.log("preloadUrl=" + preloadUrl);
		}
	},
	parseUrl: function($url) {
		var ctrl = document.site.requestControllers[$url.split(":")[0]] || document.site.requestControllers.http;
		return ctrl.parseUrl($url);
	},
	loadRepresentation: function(article, httpQuery, success, onError, onBeforeOpen, sendRqtOpts) {
		var self = this;
		var httpQuery, $representationUrl;
		if (typeof(httpQuery) == "string") {
			if (article) {
				httpQuery = article.parseExpression(httpQuery);
			}
			this.loadRepresentation(article, self.parseUrl(httpQuery), success, onError, onBeforeOpen, sendRqtOpts);
		} else {
			$representationUrl = httpQuery.$url;
			//xhr.withCredentials = true;
			self.parseUrl((article || document.site).parseExpression(httpQuery.getPageTemplateUrl(), {
				representation: httpQuery.$urlParts.params.representation,
				endpoint: httpQuery.$urlParts.endpoint,
				target: httpQuery.$urlParts.target,
				pageview: httpQuery.$urlParts.params.pageview,
				variant: httpQuery.$urlParts.params.variant
			})).sendRequest(sendRqtOpts, function($representation, response, $url) {
				$representation.$pageRepresentationURL = $url;
				self._openLoadedRepresentation($representation, success, $representationUrl, httpQuery, onError, onBeforeOpen, sendRqtOpts);
			}, onError);
		}
	},
	_openLoadedRepresentation: function($representation, success, $representationUrl, httpQuery, onError, onBeforeOpen, sendRqtOpts) {
		var self = this;
		if (typeof($representation.$prototype) == "string") {
			self.parseUrl($representation.$prototype).sendRequest(sendRqtOpts, function($prototype) {
				$representation.$prototype = $prototype;
				self._openLoadedRepresentation($representation, success, $representationUrl, httpQuery, onError, onBeforeOpen, sendRqtOpts);
			}, onError);
		} else {
			$representation.$prototype = $representation.$prototype || {};
			var userProfile = document.site.userProfile;
			if (userProfile) {
				if (userProfile.dataset && userProfile.dataset.selectedRole) {
					$representation.$prototype.$role = userProfile.dataset.selectedRole.$uuid; //important for url 
				}
			}
			$representation.$prototype.$representationUrl = $representationUrl;
			if (onBeforeOpen) {
				onBeforeOpen($representation);
			}
			success({
				$urlParts: httpQuery.$urlParts,
				$representation: $representation
			});
		}
	},
	sendRequest: function(page, options, onSuccess, onError) {
		var self = this;
		options = options || {};
		options.page = page;
		options.$location = options.$location || {
			$url: page.getDataUrl()
		};
		if (options.$location.$url) {
			var httpQuery = self.parseUrl(options.$location.$url);
			if (options.$location.$type) {
				options.$acceptType = options.$location.$type;
			}
			if (options.$location.$contentType) {
				options.$contentType = options.$location.$contentType;
			}
			httpQuery.sendRequest(options, function(data, response, requestUrl) {
				if (onSuccess) {
					onSuccess(data, response, requestUrl);
				} else {
					page.applyChange(data, response, requestUrl);
				}
				if (options.$updateHitory) {
					self.updateHistory(requestUrl);
				}
			}, onError);
		}

	},
	updateHistory: function(requestUrl) {
		var httpQuery = this.parseUrl("?url=" + encodeURIComponent(requestUrl));
		if (window.history.pushState) {
			window.history.replaceState("$updateHitory", httpQuery.$url, httpQuery.$url);
		} else {
			this.$updateHitory = true;
			window.location.hash = "#" + window.escape(httpQuery.$url);
		}
	},
	openPage: function(menuArticle, menu, record) {
		if (menu.$target == "popup") {
			menu.boxParent.openDialog({
				$dialogMode: "modeless",
				article: menuArticle,
				$url: menu.$url
			});
		} else {
			var self = this;
			menuArticle.formatMenuUrl(menu, record, function($url, isCanceled) {
				if (menu.$invocationMode === "async" && menuArticle.dataset && menuArticle.dataset.$trackngId) {
					document.site.registerJobSyra($url, undefined, menu.$title, menuArticle.dataset.$trackngId);
					return;
				}
				if (!isCanceled) {
					var httpQuery = self.parseUrl($url);
					httpQuery.$type = menu.$type;
					httpQuery.$target = menu.$target;
					if (httpQuery.isSyracuseURL()) {
						if (httpQuery.$urlParts.uri.search(/mobile\.html/i) > 0) {
							httpQuery.$target = "blank";
							self._openMainPage(httpQuery);
							return;
						}
						if (httpQuery.$urlParts.$facet == "$summary") {
							menu.boxParent.openDialog({
								$dialogMode: "modeless",
								article: menuArticle,
								$url: httpQuery.$url
							});
							return;
						} else {
							if (menu.$type && menu.$type.indexOf("json") == -1) {
								httpQuery.$target = "blank";
							} else {
								var isDefaultUrl = true;
								var htmIndex = httpQuery.$urlParts.uri.search(/\.html/i);
								if (htmIndex > 0) {
									//test for excelconfig.html
									if ((httpQuery.$urlParts.uri.length - 5) == htmIndex && self.parseUrl(document.location.href).$urlParts.uri.indexOf(httpQuery.$urlParts.uri) < 0) {
										isDefaultUrl = false;
										httpQuery.$target = "blank";
									}
								}
								if (isDefaultUrl) {
									if (menu.boxParent) {
										if (menu.page && menu.page.$dialogMode == "modal") {
											httpQuery.$target = "blank";
										}
									}
									httpQuery.parse("?url=" + encodeURIComponent(httpQuery.$url));
								}
							}
						}
					} else {
						httpQuery.$target = "blank";
					}
					if (httpQuery.$target != "blank" && httpQuery.$target != "main" && menuArticle.page && menuArticle.page.$pageCategory == "vignette") {
						// in case of search vignette page (fk)
						if (menuArticle.page.vignetteField.page && menuArticle.page.vignetteField.page.$pageCategory == "search") {
							self._openMainPage(httpQuery);
						} else {
							menuArticle.page.vignetteField.renderLayoutContent($url);
						}
					} else {
						self._openMainPage(httpQuery);
					}
				}
			});
		}
	},
	_openMainPage: function(httpQuery, $itemPage) {
		if (httpQuery.$target == "blank") {
			window.open(httpQuery.$url, "_blank");
		} else {
			if (window.history.pushState) {
				window.history.pushState("", httpQuery.$url, httpQuery.$url);
				this.changeMainPage(httpQuery.$url, $itemPage);
			} else {
				if (httpQuery.$url.indexOf("#") >= 0) {
					this.changeMainPage(httpQuery.$url);
					//window.location.assign(httpQuery.$url);
				} else {
					window.location.hash = "#" + window.escape(httpQuery.$url);
				}
			}
		}
	},
	loadWorkingCopy: function(options) {
		var self = this;
		self.postQuery(options.menu, options.record || null, null, function($location, data) {
			if (options.menuArticle) {
				var httpQuery = self.parseUrl("?url=" + encodeURIComponent($location.$url = options.menuArticle.parseExpression($location.$url, data)));
				httpQuery.$type = options.menu.$type;
				self._workingCopyPreload = {
					initData: (options.menu.$method != "DELETE") ? data : null,
					openUrl: options.menu.$url
				};
				self._openMainPage(httpQuery);
			} else {
				self.loadRepresentation(null, $location.$url, function($itemPage) {
					if (options.article && options.article.page) {
						options.article.$prototype = $itemPage.$representation.$prototype;
						options.article.page.initializeNewItem(options.article, {});
						options.article.loadBox(data);
						if (options.callback) {
							options.callback($itemPage, $location, data);
						}
						// userprofile working copy preload url save (session storage) 
						if ($itemPage.$representation.$prototype.$representation == "userProfile" && sessionStorage) {
							self._saveWCPreloadUrl("userProfile", options.menu.$url);
						}
					} else {
						//   debugger;
					}
				});
			}

		});
	},
	postQuery: function(menu, record, article, callback, callbackError) {
		var self = this;
		var menuArticle = article;
		if (!menuArticle && menu.getArticle) {
			menuArticle = menu.getArticle();
		}
		if (!menuArticle) {
			menuArticle = document.site; //a ameliorer
		}
		menu.$method = menu.$method || "POST";
		menuArticle.formatMenuUrl(menu, record, function($url) {
			menu.$url = $url;
			self.sendRequest(menuArticle, {
				$location: menu,
				params: {
					trackingId: helpers.uuid.generate()
				},
				headers: menu.httpHeaders,
				method: menu.$method,
				data: menu.sendData,
				noDisplayErr: menu.noDisplayErr || false
			}, function(data, response) {
				var $location = {
					$url: response.headers.location,
					type: ""
				};
				if ($location.$url) {
					$location.$type = response.headers["content-type"];
				} else {
					$location.$url = response.data.$url || menu.$url;
					$location.$type = response.data.$type || menu.$type;
				}
				callback($location, response.data);
			}, function(err) {
				if (callbackError) {
					callbackError(err);
				} else {
					document.site.showDiagnoses({
						$diagnoses: err.data && err.data.length > 0 ? (err.data.indexOf("$diagnoses") >= 0 ? JSON.parse(err.data).$diagnoses : [{
							$message: err.data ? err.data : document.site.localize.http_empty_error
						}]) : [{
							$message: document.site.localize.default_err_msg
						}]
					});
				}
			});
		});

	},
	_executeAction: function(menuItem, record, article) {
		var menuArticle = article || menuItem.getArticle();
		var target = menuItem.contextField || menuArticle;
		if (target || menuArticle) {
			var request = {};

			var r = request[menuItem.$sourceBind || (menuItem.$item && menuItem.$item.$bind)] = {
				$isRequested: true
			};
			if (menuItem.$invocationMode === "async") {
				r.$trackingId = helpers.uuid.generate();
			}
			if (menuItem.$parameters) {
				menuArticle.notifyParametersActionChange(menuItem, record, target, request);
			} else {
				menuArticle.page.notifyActionChange(menuItem, target, request);
			}
		}
	},
	isWorkingCopyUrl: function($url, $sourceUrl) {
		var isWorkingCopy = $url && $url.indexOf("$workingCopies") >= 0;
		if (!isWorkingCopy && $sourceUrl) {
			isWorkingCopy = $sourceUrl.indexOf("$workingCopies") >= 0;
		}
		return isWorkingCopy;
	},
	executeMenu: function(menu, record, article, confirmed) {
		if (menu.$isAction || menu.$url || menu.$sourceUrl) {
			var self = this;
			var menuArticle = article || menu.getArticle();
			if (menuArticle && menuArticle.dataset) {
				if (menu.$invocationMode === "async") {
					menuArticle.dataset.$trackngId = helpers.uuid.generate();
				} else {
					delete menuArticle.dataset.$trackngId;
				}
			}
			// temporarily, until $confirm-message protocol extension
			if (menu.$confirm && menu.$officeAddinSetup) {
				if (helpers.getCookie("SyracuseOfficeAddin") === "valid") {
					menu.$confirm = "";
				}

			}
			if (menu.$url && menu.$url.indexOf("SyracuseOfficeAddinsSetup.EXE") > 0) {
				helpers.setCookie("SyracuseOfficeAddin", "valid", null, (new Date((new Date().getYear() + 1910), new Date().getMonth(), new Date().getDate())).toUTCString());
			}
			// temporarily END

			if (!confirmed && menu.$confirm) {
				document.site.showMessage({
					$title: menuArticle.parseExpression(menu.$title || document.site.localize.siteDefaultConfirmTitle),
					$message: menuArticle.parseExpression(menu.$confirm),
					$type: "question",
					callback: function(response) {
						if (response && response.$clientId === "yes") {
							// temporarily, until $confirm-message protocol extension
							if (menu.$officeAddinSetup) {
								helpers.setCookie("SyracuseOfficeAddin", "valid", null, (new Date((new Date().getYear() + 1910), new Date().getMonth(), new Date().getDate())).toUTCString());
							}
							// temporarily END
							self.executeMenu(menu, record, article, true);
						}
					}
				});
				return;
			}
			if (menu.$isAction) {
				self._executeAction(menu, record, menuArticle);
			} else {
				if (menu.$method && (menu.$method != "GET")) {
					if (this.isWorkingCopyUrl(menu.$url, menu.$sourceUrl)) {
						self.loadWorkingCopy({
							menu: menu,
							menuArticle: menuArticle,
							record: record,
							article: article
						});
					} else {
						self.postQuery(menu, record || null, null, function($location, data) {
							switch (menu.page.$facet) {
								case "$query":
								case "$bulk":
									menu.page.fetchLastRequest(function(lastData) {
										if (lastData && data.$diagnoses) {
											lastData.$diagnoses = lastData.$diagnoses || [];
											for (var ii = data.$diagnoses.length - 1; ii >= 0; ii--) {
												lastData.$diagnoses.unshift(data.$diagnoses[ii]);
											}
										}
										menu.page.applyChange(lastData);
									});
									break;
								case "$details":
									menu.page.applyChange(data);
									if (menu.$method == "DELETE") {
										menu.page.freezeDeletedPage();
									}
									break;
								default:
									//menu.page.applyChange(data);
									break;
							}

						});
					}
				} else {
					self.openPage(menuArticle, menu, record);
				}
			}
		}
	},
	/**** File management ****/
	upload: function(file, url, contentType, article, requestCallback, progressCallback, errorCallback) {
		document.site.requestControllers.http.upload({
			file: file,
			url: article.parseExpression(url),
			//            contentType: "image"
			contentType: contentType || file.type
		}, requestCallback, progressCallback, errorCallback);
	},
	deleteFile: function(url, article, callback, onError, options) {
		var httpQuery = this.parseUrl(article.parseExpression(url));
		if (!options) {
			options = {};
		}
		options.method = "DELETE";
		httpQuery.sendRequest(options, function(data, response) {
			if (callback) {
				callback(data, response);
			} else {
				page.applyChange(data, response);
			}
		}, function(data, response) {
			if (onError) {
				onError(data, response);
			} else {
				document.site.showDiagnoses({
					$diagnoses: data && data.length > 0 ? (data.indexOf("$diagnoses") >= 0 ? JSON.parse(data).$diagnoses : [{
						$message: data ? data : document.site.localize.http_empty_error
					}]) : [{
						$message: document.site.localize.default_err_msg
					}]
				});
			}
		});
	},
	disposeObject: function(instance) {
		if (instance) {
			if (!instance.disposed) {
				if (instance.dispose) {
					instance.dispose();
					/*if(instance.layoutParent || instance.boxParent || instance.articleParent
                     || instance.page){
                     //debugger;
                     }*/
				}
				var props = Object.keys(instance);
				for (var ii = 0, jj = props.length; ii < jj; ii++) {
					var field = instance[props[ii]];
					/*if (field && typeof(field) == 'object') {
                     //debugger;
                     }*/
					if (field && field.dispose) {
						//  field.sourceDispose = instance;
						//  field.sourceDisposeProp = prop;
						this.disposeObject(field);
					}
					instance[props[ii]] = null;
				}
				instance.disposed = true;
			} else {
				// console.log("instance already disposed");
			}
		}
	},
	dispose: function() {
		this._workingCopies = null;
	}
});