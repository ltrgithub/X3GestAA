"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var soapController = require("syracuse-ui/lib/soap/soapController");
var uitestController = require("syracuse-ui/lib/tests/uitestController");
var searchController = require('syracuse-ui/lib/site/search/searchController');

function Controller(){
}

exports.Controller = helpers.defineClass(Controller, null, {
    initialize: function(){
        this._articles = {};
    },
    reloadMainPage: function(){
        this.changeMainPage(document.location.href);
    },
    startNavigation: function(){
        var self = this;
        //load representation of url
        self.reloadMainPage();
        //listen history change
        window[window.history.pushState ? "onpopstate" : "onhashchange"] = function(event){
            if (self.$updateHitory) {
                self.$updateHitory = false;
            }
            else {
                //if (document.location.href.indexOf("#&ui-state=dialog") < 0)
                self.reloadMainPage();
            }
        };
    },
    changeMainPage: function(url, $itemPage){
        var self = this;
        if (document.site.authorPage) {
            if (!document.site.authorPage.onBeforeMainPageChange(function(){
                self.changeMainPage(url, $itemPage);
            })) {
                return false;
            }
        }
        var localize = locale.resources(module)();
        if (!window.history.pushState) {
            var hash = url.indexOf("#");
            if (hash >= 0) {
                var urlPath = url.slice(0, hash);
                if (urlPath.indexOf("?") >= 0) {
                    urlPath = urlPath.slice(0, urlPath.indexOf("?"));
                }
                url = urlPath + window.unescape(url.slice(hash + 1));
            }
            else {
                if (url.indexOf("?") < 0) {
                    //add default homepage
                }
            }
            
        }
        if (self._currentUrl != url) {
            var urlParam = url.search(/\?url=/i);
            if (urlParam >= 0) {
                url = decodeURIComponent(url).slice(urlParam + ("?url=").length);
            }
            self._currentUrl = url;
            var workingCopyPreload = self._workingCopyPreload;
            self._workingCopyPreload = null; //!important release buffer
            var httpQuery = self.parseUrl(self._currentUrl);
            if (soapController.isSoapUrl(httpQuery.$url)) {
                soapController.openRequestPage(httpQuery);
                return;
            }
            if (uitestController.isUiTestUrl(httpQuery.$url)) {
                uitestController.openPage(httpQuery);
                return;
            }
            if (searchController.isSearchUrl(httpQuery.$url)) {
                searchController.openRequestPage(httpQuery);
                return;
            }
            if ($itemPage) {
                $itemPage.initData = $itemPage.initData || (workingCopyPreload ? workingCopyPreload.initData : null);
                $itemPage.httpQuery = httpQuery;
                $itemPage.httpQuery.fullUrl = document.location.href;
                document.site.onMainPageChange($itemPage);
            }
            else {
                if (httpQuery.$urlParts.isFusion) {
                    document.site.fusionGateway.openMainPage(httpQuery)
                }
                else {
                    self.loadRepresentation(null, httpQuery, function($itemPage){
                        $itemPage.initData = $itemPage.initData || (workingCopyPreload ? workingCopyPreload.initData : null);
                        $itemPage.httpQuery = httpQuery;
                        if (workingCopyPreload) {
                            $itemPage.httpQuery.workingCopyPreloadUrl = workingCopyPreload.openUrl;
                            // save working copy preload url (session storage)
                            self._saveWCPreloadUrl(httpQuery.$url, workingCopyPreload.openUrl);
                            //self._saveWCPreloadUrl(httpQuery.$url, httpQuery.fullUrl);
                        }
                        $itemPage.httpQuery.fullUrl = document.location.href;
                        document.site.onMainPageChange($itemPage);
                    });
                }
            }
            
        }
    },
    _saveWCPreloadUrl: function(key, preloadUrl){
        if (sessionStorage) {
            var data = {};
            data.wcpreloadUrl = preloadUrl;
            sessionStorage.setItem(key, JSON.stringify(data));
            //console.log("preloadUrl=" + preloadUrl);
        }
    },
    parseUrl: function($url){
        var ctrl = document.site.requestControllers[$url.split(":")[0]] || document.site.requestControllers.http;
        return ctrl.parseUrl($url);
    },
    loadRepresentation: function(article, httpQuery, success, onError, onBeforeOpen, sendRqtOpts){
        var self = this;
        var httpQuery, $representationUrl;
        if (typeof(httpQuery) == "string") {
            if (article) {
                httpQuery = article.parseExpression(httpQuery);
            }
            this.loadRepresentation(article, self.parseUrl(httpQuery), success, onError, onBeforeOpen, sendRqtOpts);
        }
        else {
            $representationUrl = httpQuery.$url;
            //xhr.withCredentials = true;
            self.parseUrl((article || document.site).parseExpression(httpQuery.getPageTemplateUrl(), {
                representation: httpQuery.$urlParts.params.representation,
                endpoint: httpQuery.$urlParts.endpoint,
                target: httpQuery.$urlParts.target,
                variant: httpQuery.$urlParts.params.variant
            })).sendRequest(sendRqtOpts, function($representation){
                self._openLoadedRepresentation($representation, success, $representationUrl, httpQuery, onError, onBeforeOpen, sendRqtOpts);
            }, onError);
        }
    },
    _openLoadedRepresentation: function($representation, success, $representationUrl, httpQuery, onError, onBeforeOpen, sendRqtOpts){
        var self = this;
        if (typeof($representation.$prototype) == "string") {
            self.parseUrl($representation.$prototype).sendRequest(sendRqtOpts, function($prototype){
                $representation.$prototype = $prototype;
                self._openLoadedRepresentation($representation, success, $representationUrl, httpQuery, onError, onBeforeOpen, sendRqtOpts);
            }, onError);
        }
        else {
            $representation.$prototype = $representation.$prototype || {};
            if (document.site.userProfile) {
                document.site.userProfile.decoratePrototype($representation.$prototype);
                if (document.site.userProfile.wrapLoadSuccess) 
                    success = document.site.userProfile.wrapLoadSuccess(success);
            }
            $representation.$prototype.$representationUrl = $representationUrl;
            if (onBeforeOpen) {
                onBeforeOpen($representation);
            }
            success({
                $urlParts: httpQuery.$urlParts,
                $representation: $representation
            });
        }
    },
    sendRequest: function(page, options, onSuccess, onError){
        var self = this;
        options = options || {};
        if (options.$location = (options.$location ||
        {
            $url: page.$prototype.$representationUrl
        })) 
            if (options.$location.$url) {
                var httpQuery = self.parseUrl(options.$location.$url);
                if (options.$location.$type) {
                    options.$acceptType = options.$location.$type;
                }
                if (options.$location.$contentType) {
                    options.$contentType = options.$location.$contentType;
                }
                httpQuery.sendRequest(options, function(data, response, requestUrl){
                    if (onSuccess) {
                        onSuccess(data, response, requestUrl);
                    }
                    else {
                        page.applyChange(data, response, requestUrl);
                    }
                    if (options.$updateHitory) {
                        self.updateHistory(requestUrl);
                    }
                }, onError);
            }
        
    },
    updateHistory: function(requestUrl){
        var httpQuery = this.parseUrl("?url=" + encodeURIComponent(requestUrl));
        if (window.history.pushState) {
            window.history.replaceState("$updateHitory", httpQuery.$url, httpQuery.$url);
        }
        else {
            this.$updateHitory = true;
            window.location.hash = "#" + window.escape(httpQuery.$url);
        }
    },
    openPage: function(menuArticle, menu, record){
        if (menu.$target == "popup") {
            menu.boxParent.openDialog({
                $dialogMode: "modeless",
                article: menuArticle,
                $url: menu.$url
            });
        }
        else {
            var self = this;
            menuArticle.formatMenuUrl(menu, record, function($url, isCanceled){
                if (!isCanceled) {
                    var httpQuery = self.parseUrl($url);
                    httpQuery.$type = menu.$type;
                    httpQuery.$target = menu.$target;
                    if (httpQuery.isSyracuseURL()) {
                        if (httpQuery.$urlParts.uri.search(/mobile\.html/i) > 0) {
                            httpQuery.$target = "blank";
                            self._openMainPage(httpQuery);
                            return;
                        }
                        if (httpQuery.$urlParts.$facet == "$summary") {
                            menu.boxParent.openDialog({
                                $dialogMode: "modeless",
                                article: menuArticle,
                                $url: httpQuery.$url
                            });
                            return;
                        }
                        else {
                            if (menu.$type && menu.$type.indexOf("json") == -1) {
                                httpQuery.$target = "blank";
                            }
                            else {
                                var isDefaultUrl = true;
                                var htmIndex = httpQuery.$urlParts.uri.search(/\.html/i);
                                if (htmIndex > 0) {
                                    //test for excelconfig.html
                                    if ((httpQuery.$urlParts.uri.length - 5) == htmIndex &&
                                    self.parseUrl(document.location.href).$urlParts.uri.indexOf(httpQuery.$urlParts.uri) < 0) {
                                        isDefaultUrl = false;
                                        httpQuery.$target = "blank";
                                    }
                                }
                                if (isDefaultUrl) {
                                    if (menu.boxParent) {
                                        if (menu.page && menu.page.$dialogMode == "modal") {
                                            httpQuery.$target = "blank";
                                        }
                                    }
                                    httpQuery.parse("?url=" + encodeURIComponent(httpQuery.$url));
                                }
                            }
                        }
                        
                    }
                    else {
                        httpQuery.$target = "blank";
                    }
                    self._openMainPage(httpQuery);
                }
            });
        }
    },
    _openMainPage: function(httpQuery, $itemPage){
        if (httpQuery.$target == "blank") {
            window.open(httpQuery.$url, "_blank");
        }
        else {
            if (window.history.pushState) {
                window.history.pushState("", httpQuery.$url, httpQuery.$url);
                this.changeMainPage(httpQuery.$url, $itemPage);
            }
            else {
                if (httpQuery.$url.indexOf("#") >= 0) {
                    window.location.assign(httpQuery.$url);
                }
                else {
                    window.location.hash = "#" + window.escape(httpQuery.$url);
                }
            }
        }
    },
    loadWorkingCopy: function(options){
        var self = this;
        self._postQuery(options.menu, options.record || null, null, function($location, data){
            if (options.menuArticle) {
                var httpQuery = self.parseUrl("?url=" + encodeURIComponent($location.$url = options.menuArticle.parseExpression($location.$url)));
                httpQuery.$type = options.menu.$type;
                self._workingCopyPreload = {
                    initData: (options.menu.$method != "DELETE") ? data : null,
                    openUrl: options.menu.$url
                };
                self._openMainPage(httpQuery);
            }
            else {
                self.loadRepresentation(null, $location.$url, function($itemPage){
                    options.article.$prototype = $itemPage.$representation.$prototype;
                    options.article.page.initializeNewItem(options.article, {});
                    options.article.loadBox(data);
                    if (options.callback) {
                        options.callback($itemPage, $location, data);
                    }
                    // userprofile working copy preload url save (session storage) 
                    if ($itemPage.$representation.$prototype.$representation == "userProfile" && sessionStorage) {
                        self._saveWCPreloadUrl("userProfile", options.menu.$url);
                    }
                });
            }
            
        });
    },
    _postQuery: function(menu, record, article, callback, callbackError){
        var self = this;
        var menuArticle = article;
        if (!menuArticle && menu.getArticle) {
            menuArticle = menu.getArticle();
        }
        if (!menuArticle) {
            menuArticle = document.site; //a ameliorer
        }
        menu.$method = menu.$method || "POST";
        menuArticle.formatMenuUrl(menu, record, function($url){
            menu.$url = $url;
            self.sendRequest(menuArticle, {
                $location: menu,
                params: {
                    trackingId: helpers.uuid.generate()
                },
                method: menu.$method,
                data: menu.sendData,
                noDisplayErr: menu.noDisplayErr || false
            }, function(data, response){
                var $location = {
                    $url: response.headers.location,
                    type: ""
                };
                if ($location.$url) {
                    $location.$type = response.headers["content-type"];
                }
                else {
                    $location.$url = response.data.$url || menu.$url;
                    $location.$type = response.data.$type || menu.$type;
                }
                callback($location, response.data)
            }, function(err){
                if (callbackError) {
                    callbackError(err);
                }
            });
        });
        
    },
    _executeAction: function(menu, record, article){
        var menuArticle = article || menu.getArticle();
        var target = menu.contextField || menuArticle;
        var request = {};
        var r = request[menu.$sourceBind || menu.$item.$bind] = {
            $isRequested: true
        };
        if (menu.$invocationMode === "async") 
            r.$trackingId = helpers.uuid.generate();
        if (menu.$parameters) {
            menuArticle.notifyParametersActionChange(menu, record, target, request);
        }
        else {
            menuArticle.page.notifyActionChange(target, request);
        }
    },
    executeMenu: function(menu, record, article, confirmed){
        if (menu.$isAction || menu.$url || menu.$sourceUrl) {
            var self = this;
            var localize = locale.resources(module)();
            var menuArticle = article || menu.getArticle();
            
            /*  // temporarily, until $confirm-message protocol extension
             if (menu.$confirm && menu.$officeAddinSetup) {
             if (helpers.getCookie("SyracuseOfficeAddin") === "valid") {
             menu.$confirm = "";
             }
             
             }
             if (menu.$url.indexOf("SyracuseOfficeAddinsSetup.EXE") > 0) {
             helpers.setCookie("SyracuseOfficeAddin", "valid", null, (new Date((new Date().getYear()+1910), new Date().getMonth(), new Date().getDate())).toUTCString());
             }*/
            // temporarily END
            
            if (!confirmed && menu.$confirm) {
                document.site.showMessage({
                    $title: menu.$title || localize.controller_menu_title,
                    $message: menuArticle.parseExpression(menu.$confirm),
                    $type: "question",
                    callback: function(response){
                        if (response.$id === "yes") {
                            // temporarily, until $confirm-message protocol extension
                            if (menu.$officeAddinSetup) {
                                helpers.setCookie("SyracuseOfficeAddin", "valid", null, (new Date((new Date().getYear() + 1910), new Date().getMonth(), new Date().getDate())).toUTCString());
                            }
                            // temporarily END
                            self.executeMenu(menu, record, article, true);
                        }
                    }
                });
                return;
            }
            
            // wait icon
            //        if (menu.$$menuIcons) {
            //            var waitIcon = document.createElement("div");
            //            waitIcon.className = "s-page-menus-icons-wait";
            //            menu.$$menuIcons[0].appendChild(waitIcon);
            //        }
            
            
            if (menu.$isAction) {
                self._executeAction(menu, record, menuArticle);
            }
            else {
                if (menu.$method && (menu.$method != "GET")) {
                    var $url = menu.$sourceUrl || menu.$url;
                    if ($url.indexOf("$workingCopies") >= 0) {
                        self.loadWorkingCopy({
                            menu: menu,
                            menuArticle: menuArticle,
                            record: record,
                            article: article
                        });
                    }
                    else {
                        self._postQuery(menu, record || null, null, function($location, data){
                            if (data.$diagnoses) {
                                document.site.showDiagnoses({
                                    $diagnoses: data.$diagnoses
                                })
                            }
                        });
                    }
                }
                else {
                    // REVIEW THIS >>>
                    if (menuArticle && menuArticle.dataset && (menu.$invocationMode === "async")) 
                        menuArticle.dataset.$trackngId = helpers.uuid.generate();
                    // <<<
                    self.openPage(menuArticle, menu, record);
                }
            }
        }
    },
    /**** File management ****/
    upload: function(file, url, article, requestCallback, progressCallback){
        document.site.requestControllers.http.upload({
            file: file,
            url: article.parseExpression(url),
            //            contentType: "image"
            contentType: file.type
        }, requestCallback, progressCallback);
    },
    deleteFile: function(url, article, callback){
        var httpQuery = this.parseUrl(article.parseExpression(url));
        httpQuery.sendRequest({
            method: "DELETE"
        }, function(data, response){
            if (callback) {
                callback(data, response);
            }
            else {
                page.applyChange(data, response);
            }
        });
    },
    
    /**** Article management ****/
    registerArticle: function(article){
        this._articles[article.id] = article;
    },
    unregisterArticle: function(article){
        delete this._articles[article.id];
    },
    findArticle: function($$item){
        /* error for list that are article and field        
         var id = $$item.attr("data-s-article");
         if (!id) {
         id = $$item.closest("[data-s-article]").attr("data-s-article");
         } */
        return this._articles[$$item.closest("[data-s-article]").attr("data-s-article")];
    },
    findField: function($$item){
        var article = this.findArticle($$item);
        var id = $$item.attr("data-s-field");
        if (!id) {
            id = $$item.closest("[data-s-field]").attr("data-s-field");
        }
        if (article && article.idMap) 
            return article.idMap[id];
        return null;
    },
    findBox: function($$item){
        var article = document.controller.findArticle($$item);
        var id = $$item.attr("data-s-box");
        if (!id) {
            id = $$item.closest("[data-s-box]").attr("data-s-box");
        }
        return article ? article.idMap[id] : null;
    },
    findItem: function($$item){
        var article = this.findArticle($$item);
        var id = $$item.attr("data-s-menu");
        if (!id) {
            var id = $$item.attr("data-s-item");
            if (!id) {
                id = $$item.closest("[data-s-item]").attr("data-s-item");
            }
        }
        if (article) {
            return (article.id == id) ? article : (article.idMap[id] || null);
        }
        return null;
    },
    findLayout: function($$item){
        var article = this.findArticle($$item);
        var id = $$item.attr("data-s-layout");
        if (!id) {
            id = $$item.closest("[data-s-layout]").attr("data-s-layout");
        }
        return article ? article.layouts[id] : null;
    },
    disposeObject: function(instance){
        var self = this;
        if (instance) {
            if (!instance.disposed) {
                if (instance.dispose) {
                    instance.dispose();
                    //ensure factory free to avoid recursive call
                    //  delete instance.sourceDispose;
                    delete instance.layoutParent;
                    delete instance.boxParent;
                    delete instance.articleParent;
                    delete instance.page;
                    /*console.log(Object.keys(instance).map(function($bind){
                     return "delete this." + $bind;
                     }).join(";"));*/
                }
                var props = Object.keys(instance);
                for (var ii = 0, jj = props.length; ii < jj; ii++) {
                    var field = instance[props[ii]];
                    if (field && field.dispose) {
                        //  field.sourceDispose = instance;
                        //  field.sourceDisposeProp = prop;
                        self.disposeObject(field);
                    }
                    instance[props[ii]] = null;
                }
                instance.disposed = true;
            }
            else {
                // console.log("instance already disposed");
            }
        }
    },
    dispose: function(){
    }
});
