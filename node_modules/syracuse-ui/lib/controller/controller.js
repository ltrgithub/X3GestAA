"use strict";
var _helpers = require('syracuse-core/lib/helpers');
var _jsurl = require('jsurl/lib/jsurl');
var _soapPage = require('syracuse-ui/lib/page/soap/soapPage');
var _dialogHelper = require('syracuse-ui/lib/site/tools/dialogHelper');

var _mainPageFetching;
var _pendingRequests = 0;

function _openTracker(menu, menuArticle, $url, initData) {
	if (menu.$invocationMode == "async" && menuArticle.dataset && menuArticle.dataset.$trackngId) {
		initData = initData || {};
		initData.$location = $url;
		initData.title = (menu.getTitle && menu.getTitle()) || menu.$title;
		initData.uuid = initData.uuid || menuArticle.dataset.$trackngId;
		var page = menuArticle.page;
		if (page.openerUrlSegments.$facet != "$edit") {
			(initData.$links = initData.$links || {}).$opener = {
				$title: page.getTitle(),
				$url: page.openerUrlSegments.$url
			};
		}
		syra_trackers.addTracker(initData);
		return true;
	}
}

// DELETE and PUT added for asynch operations support
function _parseResponse(jqXHR, data) {
	syra_site && syra_site.notifyRequestSurvey(--_pendingRequests);
	var headers = {};
	var httpHeader = jqXHR.getAllResponseHeaders();
	if ((httpHeader = httpHeader.trim())) {
		var parts = httpHeader.split("\n");
		for (var ii = 0, jj = parts.length; ii < jj; ii++) {
			var header = parts[ii].trim();
			if (header) {
				var separatorIndex = header.indexOf(":");
				headers[header.substr(0, separatorIndex).trim().toLowerCase()] = header.substr(separatorIndex + 1).trim();
			}
		}
	}
	return {
		status: jqXHR.status,
		headers: headers,
		data: data || jqXHR.responseText
	};
}



function _ensureMediaTypes(proto, finish) {
	var missingTypes = {};

	function collect(obj) {
		if (!obj)
			return;

		function walk(prop) {
			if (obj[prop])
				Object.keys(obj[prop]).forEach(function(k) {
					collect(obj[prop][k]);
				});
		}
		walk('$properties');
		walk('$variants');
		collect(obj.$item);
		if (obj.$type && !syra_site.widgetsLibrary.hasWidget(obj.$type))
			missingTypes[obj.$type] = true;
	}
	collect(proto);
	var keys = Object.keys(missingTypes);
	if (keys.length === 0)
		return finish();

	function error(err) {
		console.error(err);
		alert(err); // very brutal for now!
	}

	$.ajax({
		url: "/widget-registry?types=" + keys.join(','),
		success: function(data) {
			function requireMissing(i) {
				if (i < data.length) {
					if (!data[i].$module)
						return error("widget extension missing for " + data[i].$type);
					require.async(data[i].$module, function(err, api) {
						if (err)
							return error(err);
						syra_site.widgetsLibrary.registerWidget(data[i].$type, api);
						requireMissing(i + 1);
					});
				} else {
					finish();
				}
			}
			requireMissing(0);
		},
		error: function(xhr, msg) {
			error(msg);
		},
	});
}

function _attachUrlWithRepresentation(segment, $url) {
	if (segment.params) {
		if (segment.params.profile || segment.params.role) {
			var urlSegments = syra_url.parse($url);
			if (segment.params.role) {
				urlSegments.params.role = segment.params.role;
			}
			if (segment.params.profile) {
				urlSegments.params.profile = segment.params.profile;
			}
			$url = syra_url.build(urlSegments);
		}
	}
	return $url;
}

function _fetchPage($representation, context, userPreferenceLoading) {
	$representation.$prototype = $representation.$prototype || {};
	if (typeof($representation.$prototype) == "string") {
		var $url = _attachUrlWithRepresentation(context.segments, $representation.$prototype);
		context.sendRqtOpts.onSuccess = function($prototype) {
			$representation.$prototype = $prototype;
			_fetchPage($representation, context);
		};
		exports.parseUrl($url).sendNewRequest(context.sendRqtOpts);
		return;
	}
	if ($representation.$prototype.$article && typeof($representation.$prototype.$article) == "string") {
		var $url = _attachUrlWithRepresentation(context.segments, $representation.$prototype.$article);
		context.sendRqtOpts.onSuccess = function($article) {
			$representation.$prototype.$article = $article;
			_fetchPage($representation, context);
		};
		exports.parseUrl($url).sendNewRequest(context.sendRqtOpts);
		return;
	}
	if (!userPreferenceLoading) {
		var $userPreferencesLink = $representation.$links && $representation.$links.$userPreferences;
		if ($userPreferencesLink) {
			if (!(context.segments && context.segments.representationRoot == "userProfile")) {
				context.sendRqtOpts.onSuccess = function(userPreferences) {
					$representation.userPreferences = userPreferences;
					_fetchPage($representation, context, true);
				};
				exports.parseUrl($userPreferencesLink.$url).sendNewRequest(context.sendRqtOpts);
				return;
			}
		}
	}
	if ($representation.$article && typeof($representation.$article) == "string") {
		var $url = _attachUrlWithRepresentation(context.segments, $representation.$article);
		context.sendRqtOpts.onSuccess = function($article) {
			$representation.$article = $article;
			_fetchPage($representation, context);
		};
		exports.parseUrl($url).sendNewRequest(context.sendRqtOpts);
		return;
	}

	function finish() {
		syra_site.userProfile && syra_site.userProfile.setSecurityToRepresentation($representation);
		$representation.$prototype.$representationUrl = context.$representationUrl;
		if (context.onBeforeOpen) {
			context.onBeforeOpen($representation);
		}
		context.success({
			openerUrlSegments: context.segments,
			$representation: $representation
		});
		syra_site.checkMainPageBookmarkStatus();
	}
	_ensureMediaTypes($representation.$prototype, finish);
}

exports.parseUrl = function($url) {
	var httpQuery = new HttpQuery();
	httpQuery.parse($url);
	return httpQuery;
};

function _openDevPage(segments) {
	syra_site.loadStyleSheet("uitest.css");
	require.async("syracuse-ui/lib/tests/pages/devPage", function(err, module) {
		try {
			var $itemPage = {
				layoutSlot: document.createElement("div"),
				$category: "page",
				openerUrlSegments: segments,
				$pageCategoryClass: module.DevPage,
				$representation: {
					$prototype: {
						$devName: segments.representationRoot,
						$properties: {},
						$links: {},
						$actions: {}
					},
					$article: {}
				}
			};
			$itemPage.openerUrlSegments.fullUrl = document.location.href;
			syra_site.onMainPageChange($itemPage);
		} catch (error) {
			console.error(error.message + "\n" + error.stack);
		}
	});
}

exports.changeMainPage = function($url, $itemPage, onHistoryChange) {
	var designer = syra_site.mainPage && syra_site.mainPage.designer;
	if (designer && designer.onBeforeMainPageChange) {
		if (!designer.onBeforeMainPageChange(function() {
			exports.changeMainPage($url, $itemPage);
		})) {
			return false;
		}
	}
	if (_mainPageFetching) {
		var ajaxQuery = _mainPageFetching.sendRqtOpts && _mainPageFetching.sendRqtOpts.ajaxQuery;
		ajaxQuery && ajaxQuery.abort();
		_mainPageFetching = null;
	}
	var workingCopyPreload = syra_workingCopy.preload;
	syra_workingCopy.preload = null; //!important release buffer
	var openerUrlSegments = syra_url.parse($url);

	if (openerUrlSegments.isFusion) {
		syra_fusion.openMainPage(openerUrlSegments);
	} else {
		if (syra_fusion && syra_fusion.activatedBook) {
			syra_fusion.isClosingAll = true;
			syra_fusion.activatedBook.onCloseAllSheets(function(allSheetsClosed) {
				delete syra_fusion.isClosingAll;
				if (!allSheetsClosed) {
					onHistoryChange && syra_url.history.cancelChange();
				} else {
					exports.changeMainPage($url, $itemPage);
				}
			});
			return false;
		}
		if (openerUrlSegments.$url.indexOf("soap-") >= 0) {
			_soapPage.open(openerUrlSegments);
			return;
		}
		if (openerUrlSegments.$facet == "$dev") {
			_openDevPage(openerUrlSegments);
			return;
		}

		if (syra_quality.openTestPage(openerUrlSegments)) {
			return;
		}

		if (syra_site.controller_onChangeMainPage && !syra_site.controller_onChangeMainPage(openerUrlSegments)) {
			return;
		}

		if ($itemPage) {
			$itemPage.initData = $itemPage.initData || (workingCopyPreload && workingCopyPreload.initData);
			$itemPage.openerUrlSegments = openerUrlSegments;
			$itemPage.openerUrlSegments.fullUrl = document.location.href;
			syra_site.onMainPageChange($itemPage);
		} else {
			exports.loadRepresentation(_mainPageFetching = {
				article: null,
				segments: openerUrlSegments,
				success: function($itemPage) {
					_mainPageFetching = null;
					$itemPage.initData = $itemPage.initData || (workingCopyPreload && workingCopyPreload.initData);
					$itemPage.openerUrlSegments = openerUrlSegments;
					if (workingCopyPreload) {
						$itemPage.openerUrlSegments.workingCopyPreloadUrl = workingCopyPreload.openUrl;
						// save working copy preload url (session storage)
						sessionStorage &&
							sessionStorage.setItem(openerUrlSegments.$url, JSON.stringify({
								wcpreloadUrl: workingCopyPreload.openUrl
							}));
					}
					$itemPage.openerUrlSegments.fullUrl = document.location.href;
					syra_site.onMainPageChange($itemPage);
				},
				onError: function(error, httpQuery) {
					_mainPageFetching = null;
					if (this.isAborted) {
						return false;
					}
					syra_site.onErrorMainpage = true;
					return syra_diagnose.showPage("show" + error.status, error, httpQuery.extractDiagnoses(error));
				}
			});

		}
	}
};

//article, segments, success, onError, onBeforeOpen, sendRqtOpts
exports.loadRepresentation = function(context) {
	if (typeof(context.segments) == "string") {
		context.segments = syra_url.parse(context.article ? syra_expression.parse(context.article, context.segments) : context.segments);
	}
	context.$representationUrl = context.segments.$url;
	//xhr.withCredentials = true;
	var httpQuery = exports.parseUrl(syra_url.buildPageCollaborationUrl(context.article || syra_site, context.segments));
	context.sendRqtOpts = context.sendRqtOpts || {};
	context.sendRqtOpts.onError = context.onError;
	context.sendRqtOpts.onSuccess = function($representation, response, $url) {
		$representation.$pageCollaborationUrl = $url;
		_fetchPage($representation, context);
	};
	httpQuery.sendNewRequest(context.sendRqtOpts);
};

exports.callServer = function(page, options, onSuccess, onError) {
	options = options || {};
	options.page = page;
	options.$location = options.$location || {
		$url: page.getDataUrl()
	};
	if (options.$location.$url) {
		var httpQuery = exports.parseUrl(options.$location.$url);
		if (options.$location.$type) {
			options.$acceptType = options.$location.$type;
		}
		if (options.$location.$contentType) {
			options.$contentType = options.$location.$contentType;
		}
		if (options.$etag) {
			var queue = (page.wcQueue = page.wcQueue || {})[options.$location.$url];
			page.wcQueue[options.$location.$url] = {
				options: options,
				onSuccess: onSuccess,
				onError: onError
			};
			if (queue) {
				return;
			}
		}
		options.onSuccess = function(data, response, requestUrl) {
			if (this.$etag && this.page && !this.page.disposed && this.page.wcQueue) {
				var queue = this.page.wcQueue[this.$location.$url];
				delete this.page.wcQueue[this.$location.$url];
				if (queue && queue.options != this) {
					queue.options.data.$etag = queue.options.$etag = data.$etag;
					exports.callServer(queue.options.page, queue.options, queue.onSuccess, queue.onError);
				}
			}
			if (!this.page || !this.page.disposed) {
				if (onSuccess) {
					onSuccess(data, response, requestUrl);
				} else {
					// TODO : service can be called on record article. @DACOZ: maybe could be better
					if (page.page)
						page = page.page;
					//
					this.page.startChange();
					this.page.applyChange(data, response, requestUrl);
					this.page.endChange();
				}
			}

		};
		options.onError = function(error, self) {
			if (this.$etag && this.page && !this.page.disposed && this.page.wcQueue) {
				delete this.page.wcQueue[this.$location.$url];
			}
			onError && onError(error, self);
		};
		httpQuery.sendNewRequest(options);
	}
};

exports.postQuery = function(menu, record, article, callback, callbackError) {
	var menuArticle = article || menu.articleParent || syra_site;
	menu.$method = menu.$method || "POST";
	syra_url.formatMenuUrl(menuArticle, menu, record, function($url) {
		menu.$url = $url;
		var params = {};
		if (menu.$invocationMode === "async" && menu.$trackngId) {
			params.trackngId = menu.$trackngId;
			if (menu.$capabilities && menu.$capabilities.indexOf("abort") >= 0) {
				params.canAbort = true;
			}
		} else {
			params.trackingId = _helpers.uuid.generate();
		}
		exports.callServer(menuArticle, {
			$location: menu,
			params: params,
			headers: menu.httpHeaders,
			method: menu.$method,
			data: menu.sendData,
			noDisplayErr: menu.noDisplayErr || false
		}, function(data, response, requestUrl) {
			var $location = {
				$url: response.headers.location,
				type: ""
			};
			if ($location.$url) {
				$location.$type = response.headers["content-type"];
			} else {
				$location.$url = response.data.$url || menu.$url;
				$location.$type = response.data.$type || menu.$type;
			}
			if (menu.$invocationMode === "async") {
				_openTracker(menu, menuArticle, $location.$url, response.data);
			} else {
				callback($location, response.data, requestUrl);
			}

		}, function(err) {
			var $diagnoses = err.data && err.data.length > 0 ? (err.data.indexOf("$diagnoses") >= 0 ? JSON.parse(err.data).$diagnoses : [{
				$message: err.data ? err.data : syra_local.http_empty_error
			}]) : [{
				$message: syra_local.default_err_msg
			}];
			if (callbackError) {
				callbackError($diagnoses, err);
			} else {
				syra_diagnose.showDiagnoses({
					$diagnoses: $diagnoses
				});
			}
		});
	});
};

exports.executeMenu = function(menu, article, confirmed) {
	if (menu.$isAction || menu.$url || menu.$sourceUrl) {
		var menuArticle = article || menu.articleParent;
		var menuTitle = (menu.getTitle && menu.getTitle()) || menu.$title;
		if (menu.$url && menu.$url == "{$url}") { //use by search
			menu.$url = syra_expression.parse(menuArticle, menu.$url);
		}
		if (menu.$method && menu.$method.indexOf("{") >= 0) { //use by search
			menu.$method = syra_expression.parse(menuArticle, menu.$method);
		}
		if (menuArticle && menuArticle.dataset) {
			if (menu.$invocationMode === "async") {
				menu.$trackngId = menuArticle.dataset.$trackngId = _helpers.uuid.generate();
			} else {
				delete menu.$trackngId;
				delete menuArticle.dataset.$trackngId;
			}
		}

		if (!confirmed && menu.$confirm) {
			if (!_dialogHelper.dialogConfirm.call(this, this, menu, menuArticle, menuTitle, exports.executeMenu, [menu, article, true])) {

				return;
			}
		}


		if (menu.$isAction) {
			var target = menu.contextField || menuArticle;
			if (target || menuArticle) {
				var request = {};

				var r = request[menu.$sourceBind || (menu.$item && menu.$item.$bind)] = {
					$isRequested: true
				};
				if (menu.$invocationMode === "async") {
					r.$trackingId = _helpers.uuid.generate();
				}
				if (menu.$parameters) {
					syra_url.notifyParametersActionChange(menuArticle, menu, null, target, request);
				} else {
					menuArticle.page.notifyActionChange(menu, target, request);
				}
			}
		} else {
			if (menu.$method && (menu.$method != "GET")) {
				if (syra_workingCopy.isUrl(menu.$url, menu.$sourceUrl)) {
					syra_workingCopy.onBeforeUnloadPage(function() {
						syra_workingCopy.load({
							menu: menu,
							menuArticle: menuArticle,
							article: article
						});
					});
				} else {
					var page = menu.page;
					//var menuArticle = menu.articleParent;
					exports.postQuery(menu, null, null, function($location, data) {
						switch (page.$facet) {
							case "$query":
							case "$bulk":
								page.fetchLastRequest(function(lastData) {
									if (lastData && data.$diagnoses) {
										lastData.$diagnoses = lastData.$diagnoses || [];
										for (var ii = data.$diagnoses.length - 1; ii >= 0; ii--) {
											lastData.$diagnoses.unshift(data.$diagnoses[ii]);
										}
									}
									page.startChange();
									page.applyChange(lastData);
									page.endChange();
								});
								break;
							case "$details":
								page.applyChange(data);
								if (menu.$method == "DELETE") {
									page.freezeDeletedPage();
								}
								break;
							default:
								if (page) {
									page.startChange();
									page.onExecuteMenuResponse && page.onExecuteMenuResponse(menu.$sourceBind, menuArticle, data);
									page.endChange();
								}
								break;
						}
					});
				}
			} else {
				syra_workingCopy.onBeforeUnloadPage(function() {
					_openPage(menuArticle, menu);
				});
			}
		}
	}
};

function _openPage(menuArticle, menu, record) {
	var menuTitle = (menu.getTitle && menu.getTitle()) || menu.$title;
	switch (menu.$target) {
		case "worksheet":
			syra_site.excelDocument.loadPage({
				$url: menu.$url,
				$title: (menuArticle && menuArticle.dataset && menuArticle.dataset.title) || menuTitle
			});
			break;
		case "popup":
			syra_dlg.openPage(menu.boxParent, {
				article: menuArticle,
				$url: menu.$url,
				isModal: false
			});
			break;
		default:
			syra_url.formatMenuUrl(menuArticle, menu, record, function($url, isCanceled) {
				if (!isCanceled) {
					if (_openTracker(menu, menuArticle, $url)) {
						return;
					}
					var isRepresentationUrl = true;
					var segments = syra_url.parse($url, true);
					var target = menu.$target;
					if (target == "diagnoses") {
						exports.callServer(menuArticle, {
							$location: {
								$url: $url
							}
						});
						return;
					}
					if (segments.isSyracuse) {
						if (segments.uri.search(/mobile\.html|\$service\/upload/i) > 0) {
							syra_url.history.load({
								$url: $url,
								target: "blank",
								isDefaultUrl: false
							});
							return;
						}
						if (segments.$facet == "$summary") {
							syra_dlg.openPage(menu.boxParent, {
								article: menuArticle,
								$url: $url,
								isModal: true
							});
							return;
						} else {
							if (menu.$type && menu.$type.indexOf("json") == -1) {
								target = "blank";
							} else {
								var htmIndex = segments.uri.search(/\.html/i);
								if (htmIndex > 0) {
									//test for excelOfficeConfig.html
									if ((segments.uri.length - 5) == htmIndex) {
										var curUrlSegments = syra_url.parse(document.location.href);
										if (curUrlSegments.uri.indexOf(segments.uri) < 0) {
											isRepresentationUrl = false;
											target = "blank";
										}
									}
								}
								if (isRepresentationUrl) {
									if (menu.boxParent) {
										if (menu.page && menu.page.dialogWrapper && menu.page.dialogWrapper.isModal) {
											target = "blank";
										}
									}
								}
							}
						}
					} else {
						target = "blank";
					}
					if (menu.page && menu.page.inlinePageHost) {
						if (!target || target == "self") {
							target = "blank";
						}
					}
					if (target != "blank" && target != "main" && menuArticle.page && menuArticle.page.$pageCategory == "vignette") {
						menuArticle.page.vignetteField.renderLayoutContent($url);
					} else {
						if (isRepresentationUrl && menu && (menu.isRepresentationUrl === false)) {
							isRepresentationUrl = false;
						}
						syra_url.history.load({
							replaceState: menu.replaceState,
							$url: $url,
							target: target,
							isDefaultUrl: isRepresentationUrl
						});
					}
				}
			});
			break;
	}
};


exports.deleteFile = function($url, article, callback, onError, options) {
	var httpQuery = exports.parseUrl(syra_expression.parse(article, $url));
	options = options || {};
	options.method = "DELETE";
	options.onSuccess = function(data, response) {
		if (callback) {
			callback(data, response);
		} else {
			page.applyChange(data, response);
		}
	};
	options.onError = function(data, response) {
		if (onError) {
			onError(data, response);
		} else {
			syra_diagnose.showDiagnoses({
				$diagnoses: data && data.length > 0 ? (data.indexOf("$diagnoses") >= 0 ? JSON.parse(data).$diagnoses : [{
					$message: data ? data : syra_local.http_empty_error
				}]) : [{
					$message: syra_local.default_err_msg
				}]
			});
		}
	};
	httpQuery.sendNewRequest(options);
};

exports.upload = function(options, responseCallback, progressCallback, errorCallback) {
	var xhr = new XMLHttpRequest();
	xhr.open("PUT", options.url);
	if (options.headers) {
		var keys = Object.keys(options.headers);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			xhr.setRequestHeader(keys[ii], options.headers[keys[ii]]);
		}
	}
	xhr.setRequestHeader("accept", "application/json;vnd.sage=syracuse");
	xhr.setRequestHeader("content-type", options.contentType || "application/octet-stream");
	xhr.setRequestHeader("x-file-name", encodeURIComponent(options.fileName || options.file.name));
	// response callback
	if (responseCallback)
		xhr.onreadystatechange = function() {
			if (xhr.readyState == 4) {
				// IE misinterpret 204 as 1223
				var response = _parseResponse(xhr, (xhr.response && (typeof xhr.response !== "object")) ? JSON.parse(xhr.response) : xhr.response);
				if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || xhr.status == 1223) {
					// expects a json; TODO: check Content-Type header
					responseCallback(response.data, response);
				} else {
					if (errorCallback) {
						errorCallback(response.data, response);
					} else {
						var error = _parseResponse(xhr, null);
						if (syra_site.mainPage && !syra_site.mainPage.disposed) {
							syra_diagnose.showDiagnoses({
								$diagnoses: (error.data.indexOf("$diagnoses") >= 0) ? JSON.parse(error.data).$diagnoses : [{
									$message: error.data ? error.data : syra_local.http_empty_error
								}]
							});
						} else {
							syra_diagnose.box.show({
								$message: syra_local["http_" + error.status] ? syra_local["http_" + error.status] : syra_local.default_err_msg,
								$title: syra_local["http_" + error.status + "_title"] ? syra_local["http_" + error.status + "_title"] : syra_local.siteMsgboxTitle,
								$type: "fatal",
								$buttons: "ok",
								$diagnoses: error.data && error.data.length > 0 ? (error.data.indexOf("$diagnoses") >= 0 ? JSON.parse(error.data).$diagnoses : [{
									$message: error.data ? error.data : syra_local.http_empty_error
								}]) : [{
									$message: syra_local.default_err_msg
								}]
							});
						}
					}
				}
			}
		};
	// progress callback
	if (progressCallback) {
		xhr.upload.addEventListener("progress", function(e) {
			if (e.lengthComputable) {
				progressCallback(Math.round((e.loaded * 100) / e.total));
			}
		}, false);

		xhr.upload.addEventListener("load", function(e) {
			progressCallback(100, true);
		}, false);
	}

	var reader = new FileReader();
	reader.onload = function(evt) {
		xhr.send(evt.target.result);
	};
	reader.readAsArrayBuffer(options.file);

};



function HttpQuery() {

}

_helpers.defineClass(HttpQuery, null, {
	parse: function($url) {
		this.openerUrlSegments = syra_url.parse(this.$url = $url);
	},
	extractDiagnoses: function(error) {
		var $diagnoses;
		if (error) {
			if (error.data && error.data.length) {
				if (error.data.indexOf("$diagnoses") >= 0) {
					$diagnoses = JSON.parse(error.data).$diagnoses;
				} else {
					$diagnoses = [{
						$message: error.data
					}];
				}
			}
		}
		return $diagnoses || [{
			$message: syra_local.default_err_msg
		}];
	},
	showError: function(error) {
		syra_diagnose.showDiagnoses({
			$diagnoses: this.extractDiagnoses(error)
		});
	},
	_prepareRequest: function(options) {
		var self = this;
		self.headers = self.headers || {};
		if (options && options.headers) {
			for (var prop in options.headers) {
				self.headers[prop] = options.headers[prop];
			}
		}
		self.method = options.method || "GET";
		/*if (options.$acceptType) {
         self.headers.Accept = options.$acceptType || "application/json;vnd.sage=syracuse";
         }*/
		self.headers.Accept = options.$acceptType || "application/json;vnd.sage=syracuse; charset=utf-8";
		if (options.$contentType) {
			self.headers["content-type"] = options.$contentType;
		}
		self.dataType = self.dataType ||
			function() {
				var dataType = self.headers["Accept"] || self.headers["content-type"] || "text/html";
				if (dataType.indexOf("application/json") != -1) {
					dataType = "json";
				} else {
					dataType = "text";
				}
				return dataType;
		}();
		// content type
		self.headers["content-type"] = self.headers["content-type"] || (self.dataType === "json" ? "application/json" : "");

		if (!(options && options.headers && options.headers["accept-language"])) {
			var language = syra_localizer.getLanguage();
			if (language) {
				self.headers["accept-language"] = language;
			}
		}

		if (options.data) {
			self.sendData = self.dataType === "json" ? JSON.stringify(options.data) : options.data;
		}
		if (options.jsonParams) {
			options.params = options.params || {};
			var keys = Object.keys(options.jsonParams);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				options.params[keys[ii]] = _jsurl.stringify(options.jsonParams[keys[ii]]);
			}
		}
		if (options.params) {
			// network breakdown - add for non get query a unique identifier
			self.$url = syra_url.applyParameters(self.$url, options.params);
		}
		if (options.$etag) {
			self.headers["If-Match"] = options.$etag;
		}
		if (["GET", "POST", "DELETE", "PUT"].indexOf(self.method) < 0) {
			self.headers["X-HTTP-Method-Override"] = self.method;
			self.method = "POST";
		}
	},
	sendNewRequest: function(options) {
		var self = this;

		function sendRequest(nbTry, initialSid) {
			self.$url = syra_url.history.ensureProxy(self.$url);
			syra_site.notifyRequestSurvey(++_pendingRequests);
			options.ajaxQuery = $.ajax({
				url: self.$url, // add retryid for post request
				type: self.method,
				dataType: self.dataType,
				data: self.sendData,
				xhrFields: self.xhrFields,
				contentType: self.headers["content-type"],
				async: options.syncRqst ? false : true,
				beforeSend: function(jqXHR, settings) {
					if (self.headers) {
						var keys = Object.keys(self.headers);
						for (var ii = 0, jj = keys.length; ii < jj; ii++) {
							jqXHR.setRequestHeader(keys[ii], self.headers[keys[ii]]);
						}
					}
				},
				complete: function() {
					delete options.ajaxQuery;
				},
				success: function(data, textStatus, jqXHR) {
					var response = _parseResponse(jqXHR, data);
					if (initialSid && (syra_site.getSessionId() !== initialSid) && syra_site.userProfile && !syra_site.userProfile.onLogonProcessing) {
						syra_site.userProfile.switchToNewSession(function() {
							options.onSuccess(response.data, response, self.$url);
						});
					} else {
						options.onSuccess(response.data, response, self.$url);
					}
					// timer to handle convergence session disconnection in case of timeout
					syra_fusion && syra_fusion.updateRequestTimer();

				},
				error: function(jqXHR, textStatus, errorThrown) {
					var error = _parseResponse(jqXHR, null);
					if (jqXHR.status === 401) {
						// read www-authenticate header to extract method
						var auth = error.headers && error.headers["www-authenticate"] || "";
						var mt = ((auth.split(" ")[0]) || "").toLowerCase();
						if (mt) {
							var dataObj = error.data && error.headers["content-type"] && error.headers["content-type"] === "application/json" ? JSON.parse(error.data) : {};
							var next = dataObj && dataObj.$location && dataObj.$location.$url;
							// self.$url cannot be ...pages('...'), it has to be a resource(s) address, so use actual location as origin
							//if (next) window.location.href = next + "?callbackUrl=" + encodeURIComponent("/syracuse-main/html/main.html?url=" + encodeURIComponent(self.$url));
							if (next)
								window.location.href = (next || "/index.html") + "?callbackUrl=" + encodeURIComponent(window.location.href);
						}
					} else {
						options.isAborted = jqXHR.status == 0 && jqXHR.statusText === "abort";
					}
					// check before normal error management if we can retry
					switch (jqXHR.status) {
						// retry error
						case 408:
						case 502:
						case 503:
						case 504:
						case 12152:
						case 12001:
						case 12156:
							if (nbTry--) {
								sendRequest(nbTry, initialSid);
								return;
							}
							break;
					}
					if (!options.onError || options.onError(error, self)) {
						var ajax = this;
						switch (jqXHR.status) {
							case 0:
								!options.isAborted && self.showError(error);
								break;
							case 404:
								var reqOptions = {
									method: "POST",
									$location: {}
								};
								//---------------------------------------
								// handling working copy expired 404 case
								//---------------------------------------
								// logout and user profile specific cases
								var dataObj = ajax.data ? JSON.parse(ajax.data) : dataObj;

								if (dataObj && dataObj.$actions) {
									// in case of logout
									if (dataObj.$actions.$logout && dataObj.$actions.$logout.$isRequested) {
										var $url = "/";
										setTimeout(function() {
											syra_site.unload();
											window.open($url, "_self");
										}, 100);
									} else {
										// in case of some user profile property value change, or in case of regular WC save
										if (dataObj.$actions.$save && dataObj.$actions.$save.$isRequested) {
											if (dataObj.$url && dataObj.$url.indexOf("userProfile") >= 0) {
												if (syra_site.userProfile) {
													reqOptions.$location.$url = syra_site.userProfile.wcpreloadUrl;
													reqOptions.data = JSON.parse(ajax.data);
													reqOptions.$etag = reqOptions.data ? reqOptions.data.$etag : reqOptions.$etag;
													exports.callServer(syra_site.userProfile, reqOptions);
												} else {
													self.showError(error);
												}
												break;
											}
										}
										syra_workingCopy.onNotFound(self, error, reqOptions, dataObj);
									}
								} else {
									// in case of 404 after a lookup query, display $diagnoses
									if (ajax.url.indexOf("$lookup") != -1 && error.data) {
										var errData = JSON.parse(error.data);
										syra_diagnose.showDiagnoses({
											$diagnoses: errData.$diagnoses || [{
												$message: syra_local.default_err_msg
											}]
										});
									} else {
										if (syra_workingCopy.isUrl(self.$url)) {
											syra_workingCopy.onNotFound(self, error, reqOptions);
										} else {
											var errData = {};
											try {
												errData = JSON.parse(error.data);
											} catch (e) {
												console.log("error data not a JSON");
											}
											if (errData.$diagnoses) {
												syra_diagnose.showDiagnoses({
													$diagnoses: errData.$diagnoses
												});
											} else {
												syra_workingCopy.onNotFound(self, error, reqOptions);
											}
										}

									}
								}
								break;
							case 412:
								if (options.page && options.page.sendBag) {
									options.page.sendBag.on412 = true;

								} else {
									syra_diagnose.box.show({
										$message: syra_local.http_412_message,
										$title: syra_local.http_412_title,
										$type: "alert",
										callback: function(response) {
											ajax.success(JSON.parse(jqXHR.responseText), jqXHR.statusText, jqXHR);
										}
									});
								}
								break;
							default:
								if (jqXHR.status >= 500) {
									//to improve #5390
									if (options && options.page && options.page.dialogWrapper) {
										options.page.dialogWrapper.close();
									}

								}
								self.showError(error);
								break;
						}
					}
				}
			});
		}

		var initialSid = syra_site.getSessionId();
		options = options || {};
		self._prepareRequest(options);
		var retryId = self.method !== "GET" ? _helpers.uuid.generate("") : null;
		if (retryId) {
			self.$url += (self.$url.indexOf('?') !== -1) ? "&retryId=" + retryId : "?retryId=" + retryId;
		}
		// send the request
		sendRequest(syra_site.userProfile.getRetryOnError() - 1, initialSid);

	},
	sendCorsRequest: function(options, onSuccess, onError) {
		options = options || {};
		this.method = options.method || "GET";
		var xhr = new XMLHttpRequest();
		if ("withCredentials" in xhr) {
			// Most browsers.
			xhr.open(this.method, this.$url, true);
		} else
		if (typeof XDomainRequest != "undefined") {
			// IE8 and IE9
			xhr = new XDomainRequest();
			xhr.open(this.method, this.$url);
		} else {
			xhr = null;
		}

		xhr.onreadystatechange = onSuccess || options.onreadystatechange;
		xhr.onloadstart = options.onloadstart;
		xhr.onprogress = options.onprogress;
		xhr.onabort = options.onabort;
		xhr.onerror = onError || options.onerror;
		xhr.onload = options.onload;
		xhr.ontimeout = options.ontimeout;
		xhr.onloadend = options.onloadend;
		xhr.send();
	}
});