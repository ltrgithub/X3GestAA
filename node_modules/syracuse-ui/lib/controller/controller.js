"use strict";
var helpers = require('syracuse-core/lib/helpers');
var soapController = require("syracuse-ui/lib/soap/soapController");

var _mainPageFetching;

function _attachUrlWithRepresentation(segment, $url) {
	if (segment.params) {
		if (segment.params.profile || segment.params.role) {
			var urlSegments = syra_site.urlMaker.parse($url);
			if (segment.params.role) {
				urlSegments.params.role = segment.params.role;
			}
			if (segment.params.profile) {
				urlSegments.params.profile = segment.params.profile;
			}
			$url = syra_site.urlMaker.build(urlSegments);
		}
	}
	return $url;
}

function ensureMediaTypes(proto, finish) {
	var library = require('syracuse-ui/lib/site/widgetsLibrary');
	var missingTypes = {};

	function collect(obj) {
		if (!obj)
			return;

		function walk(prop) {
			if (obj[prop])
				Object.keys(obj[prop]).forEach(function(k) {
					collect(obj[prop][k]);
				});
		}
		walk('$properties');
		walk('$variants');
		collect(obj.$item);
		if (obj.$type && !library.hasWidget(obj.$type))
			missingTypes[obj.$type] = true;
	}
	collect(proto);
	var keys = Object.keys(missingTypes);
	if (keys.length === 0)
		return finish();

	function error(err) {
		console.error(err);
		alert(err); // very brutal for now!
	}

	$.ajax({
		url: "/widget-registry?types=" + keys.join(','),
		success: function(data) {
			function requireMissing(i) {
				if (i < data.length) {
					if (!data[i].$module)
						return error("widget extension missing for " + data[i].$type);
					require.async(data[i].$module, function(err, api) {
						if (err)
							return error(err);
						library.registerWidget(data[i].$type, api);
						requireMissing(i + 1);
					});
				} else {
					finish();
				}
			}
			requireMissing(0);
		},
		error: function(xhr, msg) {
			error(msg);
		},
	});
}

function _fetchPage(controller, $representation, context, userPreferenceLoading) {
	$representation.$prototype = $representation.$prototype || {};
	if (typeof($representation.$prototype) == "string") {
		var $url = _attachUrlWithRepresentation(context.segments, $representation.$prototype);
		context.sendRqtOpts.onSuccess = function($prototype) {
			$representation.$prototype = $prototype;
			_fetchPage(controller, $representation, context);
		};
		controller.parseUrl($url).sendNewRequest(context.sendRqtOpts);
		return;
	}
	if ($representation.$prototype.$article && typeof($representation.$prototype.$article) == "string") {
		var $url = _attachUrlWithRepresentation(context.segments, $representation.$prototype.$article);
		context.sendRqtOpts.onSuccess = function($article) {
			$representation.$prototype.$article = $article;
			_fetchPage(controller, $representation, context);
		};
		controller.parseUrl($url).sendNewRequest(context.sendRqtOpts);
		return;
	}
	if (!userPreferenceLoading) {
		var $userPreferencesLink = $representation.$links && $representation.$links.$userPreferences;
		if ($userPreferencesLink) {
			if (!(context.segments && context.segments.representationRoot == "userProfile")) {
				context.sendRqtOpts.onSuccess = function(userPreferences) {
					$representation.userPreferences = userPreferences;
					_fetchPage(controller, $representation, context, true);
				};
				controller.parseUrl($userPreferencesLink.$url).sendNewRequest(context.sendRqtOpts);
				return;
			}
		}
	}
	if ($representation.$article && typeof($representation.$article) == "string") {
		var $url = _attachUrlWithRepresentation(context.segments, $representation.$article);
		context.sendRqtOpts.onSuccess = function($article) {
			$representation.$article = $article;
			_fetchPage(controller, $representation, context);
		};
		controller.parseUrl($url).sendNewRequest(context.sendRqtOpts);
		return;
	}

	function finish() {
		syra_site.userProfile && syra_site.userProfile.setSecurityToRepresentation($representation);
		$representation.$prototype.$representationUrl = context.$representationUrl;
		if (context.onBeforeOpen) {
			context.onBeforeOpen($representation);
		}
		context.success({
			openerUrlSegments: context.segments,
			$representation: $representation
		});
		syra_site.checkMainPageBookmarkStatus();
	}
	ensureMediaTypes($representation.$prototype, finish);
}


function _isUiTestUrl($url) {
	return $url && ($url.indexOf("s-uitest") >= 0);
}

function _loadTestPage(segments) {
	require.async("syracuse-ui/lib/tests/uitestController", function(err, module) {
		module && module.openPage && module.openPage(segments);
	});
}


function Controller() {}

exports.Controller = helpers.defineClass(Controller, null, {
	deleteWorkingCopy: function(workingCopyPage) {
		if (workingCopyPage && !workingCopyPage.isFusionPage && workingCopyPage.$isEditMode) {
			var $representationUrl = workingCopyPage.$prototype ? workingCopyPage.$prototype.$representationUrl : null;
			if ($representationUrl && $representationUrl.search(/\$workingCopies/i) >= 0) {
				var httpQuery = this.parseUrl($representationUrl);
				httpQuery.sendNewRequest({
					method: "DELETE",
					onSuccess: function(data, response) {

					},
					onError: function(data, response) {

					}
				});
			}
		}
	},
	changeMainPage: function($url, $itemPage, onHistoryChange) {
		var self = this;
		var designer = syra_site.mainPage && syra_site.mainPage.designer;
		if (designer && designer.onBeforeMainPageChange) {
			if (!designer.onBeforeMainPageChange(function() {
				self.changeMainPage($url, $itemPage);
			})) {
				return false;
			}
		}
		if (_mainPageFetching) {
			var ajaxQuery = _mainPageFetching.sendRqtOpts && _mainPageFetching.sendRqtOpts.ajaxQuery;
			ajaxQuery.abort();
			_mainPageFetching = null;
		}
		self._currentUrl = $url;
		var workingCopyPreload = self._workingCopyPreload;
		self._workingCopyPreload = null; //!important release buffer
		var openerUrlSegments = syra_site.urlMaker.parse($url);

		if (openerUrlSegments.isFusion) {
			syra_site.fusionGateway.openMainPage(openerUrlSegments);
		} else {
			if (syra_site.fusionGateway && syra_site.fusionGateway.activatedBook) {
				syra_site.fusionGateway.activatedBook.onCloseAllSheets(function(allSheetsClosed) {
					if (!allSheetsClosed) {
						if (onHistoryChange) {
							syra_site.history.cancelChange();
						}
					}
				});
				return false;
			}
			if (soapController.isSoapUrl(openerUrlSegments.$url)) {
				soapController.openRequestPage(openerUrlSegments);
				return;
			}
			if (_isUiTestUrl(openerUrlSegments.$url)) {
				_loadTestPage(openerUrlSegments);
				return;
			}

			if ($itemPage) {
				$itemPage.initData = $itemPage.initData || (workingCopyPreload && workingCopyPreload.initData);
				$itemPage.openerUrlSegments = openerUrlSegments;
				$itemPage.openerUrlSegments.fullUrl = document.location.href;
				syra_site.onMainPageChange($itemPage);
			} else {
				self.loadRepresentation(_mainPageFetching = {
					article: null,
					segments: openerUrlSegments,
					success: function($itemPage) {
						_mainPageFetching = null;
						$itemPage.initData = $itemPage.initData || (workingCopyPreload && workingCopyPreload.initData);
						$itemPage.openerUrlSegments = openerUrlSegments;
						if (workingCopyPreload) {
							$itemPage.openerUrlSegments.workingCopyPreloadUrl = workingCopyPreload.openUrl;
							// save working copy preload url (session storage)
							sessionStorage &&
								sessionStorage.setItem(openerUrlSegments.$url, JSON.stringify({
									wcpreloadUrl: workingCopyPreload.openUrl
								}));
						}
						$itemPage.openerUrlSegments.fullUrl = document.location.href;
						syra_site.onMainPageChange($itemPage);
					},
					onError: function(error, httpQuery) {
						_mainPageFetching = null;
						if (this.isAborted) {
							return false;
						}
						syra_site.onErrorMainpage = true;
						return syra_diagnose.showPage("show" + error.status, error, httpQuery.extractDiagnoses(error));
					}
				});

			}
		}


	},
	parseUrl: function($url) {
		var ctrl = syra_site.requestControllers[$url.split(":")[0]] || syra_site.requestControllers.http;
		return ctrl.parseUrl($url);
	},
	//article, segments, success, onError, onBeforeOpen, sendRqtOpts
	loadRepresentation: function(context) {
		var self = this;
		if (typeof(context.segments) == "string") {
			context.segments = syra_site.urlMaker.parse(context.article ? syra_site.expressionMaker.parse(context.article, context.segments) : context.segments);
		}
		context.$representationUrl = context.segments.$url;
		//xhr.withCredentials = true;
		var httpQuery = self.parseUrl(syra_site.urlMaker.buildPageCollaborationUrl(context.article || syra_site, context.segments));
		context.sendRqtOpts = context.sendRqtOpts || {};
		context.sendRqtOpts.onError = context.onError;
		context.sendRqtOpts.onSuccess = function($representation, response, $url) {
			$representation.$pageCollaborationUrl = $url;
			_fetchPage(self, $representation, context);
		};
		httpQuery.sendNewRequest(context.sendRqtOpts);
	},
	callServer: function(page, options, onSuccess, onError) {
		var self = this;
		options = options || {};
		options.page = page;
		options.$location = options.$location || {
			$url: page.getDataUrl()
		};
		if (options.$location.$url) {
			var httpQuery = self.parseUrl(options.$location.$url);
			if (options.$location.$type) {
				options.$acceptType = options.$location.$type;
			}
			if (options.$location.$contentType) {
				options.$contentType = options.$location.$contentType;
			}
			options.onSuccess = function(data, response, requestUrl) {
				if (!page || !page.disposed) {
					if (onSuccess) {
						onSuccess(data, response, requestUrl);
					} else {
						page.startChange();
						page.applyChange(data, response, requestUrl);
						page.endChange();
					}
				}
			};
			options.onError = onError;
			httpQuery.sendNewRequest(options);
		}
	},
	openPage: function(menuArticle, menu, record) {
		var self = this;
		switch (menu.$target) {
			case "worksheet":
				syra_site.excelDocument.loadPage({
					$url: menu.$url,
					$title: (menuArticle && menuArticle.dataset && menuArticle.dataset.title) || menu.$title
				});
				break;
			case "popup":
				syra_site.dialogManager.openPage(menu.boxParent, {
					article: menuArticle,
					$url: menu.$url,
					isModal: false
				});
				break;
			default:
				syra_site.urlMaker.formatMenuUrl(menuArticle, menu, record, function($url, isCanceled) {
					if (!isCanceled) {
						if (menu.$invocationMode === "async" && menuArticle.dataset && menuArticle.dataset.$trackngId) {
							syra_jobs.addJobOperation({
								$location: $url,
								title: menu.$title,
								uuid: menuArticle.dataset.$trackngId
							});
							return;
						}
						var isRepresentationUrl = true;
						var segments = syra_site.urlMaker.parse($url, true);
						var target = menu.$target;
						if (segments.isSyracuse) {
							if (segments.uri.search(/mobile\.html/i) > 0) {
								syra_site.history.load($url, "blank", null, false);
								return;
							}
							if (segments.$facet == "$summary") {
								syra_site.dialogManager.openPage(menu.boxParent, {
									article: menuArticle,
									$url: $url,
									isModal: false
								});
								return;
							} else {
								if (menu.$type && menu.$type.indexOf("json") == -1) {
									target = "blank";
								} else {
									var htmIndex = segments.uri.search(/\.html/i);
									if (htmIndex > 0) {
										//test for excelconfig.html
										if ((segments.uri.length - 5) == htmIndex) {
											var curUrlSegments = syra_site.urlMaker.parse(document.location.href);
											if (curUrlSegments.uri.indexOf(segments.uri) < 0) {
												isRepresentationUrl = false;
												target = "blank";
											}
										}
									}
									if (isRepresentationUrl) {
										if (menu.boxParent) {
											if (menu.page && menu.page.dialogWrapper && menu.page.dialogWrapper.isModal) {
												target = "blank";
											}
										}
									}
								}
							}
						} else {
							target = "blank";
						}
						if (menu.page && menu.page.inlinePageHost) {
							if (!target || target == "self") {
								target = "blank";
							}
						}
						if (target != "blank" && target != "main" && menuArticle.page && menuArticle.page.$pageCategory == "vignette") {
							// in case of search vignette page (fk)
							if (menuArticle.page.vignetteField.page && menuArticle.page.vignetteField.page.$pageCategory == "search") {
								syra_site.history.load($url, target);
							} else {
								menuArticle.page.vignetteField.renderLayoutContent($url);
							}
						} else {
							if (isRepresentationUrl && menu && (menu.isRepresentationUrl === false)) {
								isRepresentationUrl = false;
							}
							syra_site.history.load($url, target, null, isRepresentationUrl);
						}
					}
				});
				break;
		}
	},

	loadWorkingCopy: function(options) {
		var self = this;
		self.postQuery(options.menu, options.record || null, options.menuArticle, function($location, data, requestUrl) {
			if (options.menuArticle) {
				var segments = syra_site.urlMaker.parse($location.$url = syra_site.expressionMaker.parse(options.menuArticle, $location.$url, data));
				if (options.menu.$target == "inline" && options.menuArticle.loadInlinePage) {
					self.loadRepresentation({
						article: null,
						segments: segments,
						success: function($itemPage) {
							options.menuArticle.loadInlinePage($itemPage, options);
						}
					});
				} else {
					self._workingCopyPreload = {
						initData: (options.menu.$method != "DELETE") ? data : null,
						openUrl: options.menu.$url
					};
					syra_site.history.load(segments.$url, segments.target);
				}
			} else {
				self.loadRepresentation({
					article: null,
					segments: $location.$url,
					success: function($itemPage) {
						options.article.$prototype = $itemPage.$representation.$prototype;
						options.article.page.initializeNewItem(options.article, {});
						options.article.page.wcpreloadUrl = requestUrl;
						options.article.loadBox(data);
						options.callback && options.callback($itemPage, $location, data);
					}
				});
			}

		});
	},
	postQuery: function(menu, record, article, callback, callbackError) {
		var self = this;
		var menuArticle = article || menu.articleParent || syra_site;
		menu.$method = menu.$method || "POST";
		syra_site.urlMaker.formatMenuUrl(menuArticle, menu, record, function($url) {
			menu.$url = $url;
			self.callServer(menuArticle, {
				$location: menu,
				params: {
					trackingId: helpers.uuid.generate()
				},
				headers: menu.httpHeaders,
				method: menu.$method,
				data: menu.sendData,
				noDisplayErr: menu.noDisplayErr || false
			}, function(data, response, requestUrl) {
				var $location = {
					$url: response.headers.location,
					type: ""
				};
				if ($location.$url) {
					$location.$type = response.headers["content-type"];
				} else {
					$location.$url = response.data.$url || menu.$url;
					$location.$type = response.data.$type || menu.$type;
				}
				callback($location, response.data, requestUrl);
			}, function(err) {
				var $diagnoses = err.data && err.data.length > 0 ? (err.data.indexOf("$diagnoses") >= 0 ? JSON.parse(err.data).$diagnoses : [{
					$message: err.data ? err.data : syra_local.http_empty_error
				}]) : [{
					$message: syra_local.default_err_msg
				}];
				if (callbackError) {
					callbackError($diagnoses, err);
				} else {
					syra_site.showDiagnoses({
						$diagnoses: $diagnoses
					});
				}
			});
		});

	},

	executeMenu: function(menu, article, confirmed) {
		if (menu.$isAction || menu.$url || menu.$sourceUrl) {
			var self = this;
			var menuArticle = article || menu.articleParent;
			if (menu.$url && menu.$url == "{$url}") { //use by search
				menu.$url = syra_site.expressionMaker.parse(menuArticle, menu.$url);
			}
			if (menu.$method && menu.$method.indexOf("{") >= 0) { //use by search
				menu.$method = syra_site.expressionMaker.parse(menuArticle, menu.$method);
			}
			if (menuArticle && menuArticle.dataset) {
				if (menu.$invocationMode === "async") {
					menuArticle.dataset.$trackngId = helpers.uuid.generate();
				} else {
					delete menuArticle.dataset.$trackngId;
				}
			}
			// temporarily, until $confirm-message protocol extension
			if (menu.$confirm && menu.$officeAddinSetup) {
				if (helpers.getCookie("SyracuseOfficeAddin") === "valid") {
					menu.$confirm = "";
				}

			}
			if (menu.$url && menu.$url.indexOf("SyracuseOfficeAddinsSetup.EXE") > 0) {
				helpers.setCookie("SyracuseOfficeAddin", "valid", null, (new Date((new Date().getYear() + 1910), new Date().getMonth(), new Date().getDate())).toUTCString());
			}
			// temporarily END

			if (!confirmed && menu.$confirm) {
				syra_diagnose.showBox({
					$title: syra_site.expressionMaker.parse(menuArticle, menu.$title || syra_local.siteDefaultConfirmTitle),
					$message: syra_site.expressionMaker.parse(menuArticle, menu.$confirm),
					$type: "question",
					callback: function(response) {
						if (response && response.$clientId === "yes") {
							// temporarily, until $confirm-message protocol extension
							if (menu.$officeAddinSetup) {
								helpers.setCookie("SyracuseOfficeAddin", "valid", null, (new Date((new Date().getYear() + 1910), new Date().getMonth(), new Date().getDate())).toUTCString());
							}
							// temporarily END
							self.executeMenu(menu, article, true);
						}
					}
				});
				return;
			}
			if (menu.$isAction) {
				var target = menu.contextField || menuArticle;
				if (target || menuArticle) {
					var request = {};

					var r = request[menu.$sourceBind || (menu.$item && menu.$item.$bind)] = {
						$isRequested: true
					};
					if (menu.$invocationMode === "async") {
						r.$trackingId = helpers.uuid.generate();
					}
					if (menu.$parameters) {
						syra_site.urlMaker.notifyParametersActionChange(menuArticle, menu, null, target, request);
					} else {
						menuArticle.page.notifyActionChange(menu, target, request);
					}
				}
			} else {
				if (menu.$method && (menu.$method != "GET")) {
					if (syra_site.urlMaker.isWorkingCopy(menu.$url, menu.$sourceUrl)) {
						self.loadWorkingCopy({
							menu: menu,
							menuArticle: menuArticle,
							article: article
						});
					} else {
						var page = menu.page;
						var menuArticle = menu.articleParent;
						self.postQuery(menu, null, null, function($location, data) {
							switch (page.$facet) {
								case "$query":
								case "$bulk":
									page.fetchLastRequest(function(lastData) {
										if (lastData && data.$diagnoses) {
											lastData.$diagnoses = lastData.$diagnoses || [];
											for (var ii = data.$diagnoses.length - 1; ii >= 0; ii--) {
												lastData.$diagnoses.unshift(data.$diagnoses[ii]);
											}
										}
										page.startChange();
										page.applyChange(lastData);
										page.endChange();
									});
									break;
								case "$details":
									page.applyChange(data);
									if (menu.$method == "DELETE") {
										page.freezeDeletedPage();
									}
									if (menu.$invocationMode && menu.$invocationMode == "async" && menuArticle.dataset && menuArticle.dataset.$trackngId) {
										syra_jobs.addJobOperation({
											$location: $location.$url,
											title: menu.$title,
											uuid: menuArticle.dataset.$trackngId
										});
									}
									break;
								default:
									if (page) {
										page.startChange();
										page.onExecuteMenuResponse && page.onExecuteMenuResponse(menu.$sourceBind, menuArticle, data);
										page.endChange();
									}
									break;
							}

						});
					}
				} else {
					self.openPage(menuArticle, menu);
				}
			}
		}
	},
	/**** File management ****/
	upload: function(file, $url, contentType, article, requestCallback, progressCallback, errorCallback) {
		syra_site.requestControllers.http.upload({
			file: file,
			url: syra_site.expressionMaker.parse(article, $url),
			//            contentType: "image"
			contentType: contentType || file.type
		}, requestCallback, progressCallback, errorCallback);
	},
	deleteFile: function($url, article, callback, onError, options) {
		var httpQuery = this.parseUrl(syra_site.expressionMaker.parse(article, $url));
		options = options || {};
		options.method = "DELETE";
		options.onSuccess = function(data, response) {
			if (callback) {
				callback(data, response);
			} else {
				page.applyChange(data, response);
			}
		};
		options.onError = function(data, response) {
			if (onError) {
				onError(data, response);
			} else {
				syra_site.showDiagnoses({
					$diagnoses: data && data.length > 0 ? (data.indexOf("$diagnoses") >= 0 ? JSON.parse(data).$diagnoses : [{
						$message: data ? data : syra_local.http_empty_error
					}]) : [{
						$message: syra_local.default_err_msg
					}]
				});
			}
		};
		httpQuery.sendNewRequest(options);
	},
	dispose: function() {}
});