"use strict";
var helpers = require('syracuse-core').helpers;
var _contentEditable = {
	setInputValue: function(field, val) {
		field.input.textContent = val;
		if (val == "" && field.$item.$isTitlePlaceHolder) {
			field.input.textContent = field.placeHolderText = field.getTitle();
			syra_dom.toggleClass(field.input, "s-placeholder", true);
		} else {
			delete field.placeHolderText;
			syra_dom.toggleClass(field.input, "s-placeholder", false);
		}
	},
	getInputValue: function(field) {
		var val;
		val = field.input.textContent;
		if (field.placeHolderText && val == field.placeHolderText) {
			val = "";
		}
		return val;
	},
	onInputFocus: function(field, input, focusin) {
		if (focusin) {
			if (field.placeHolderText) {
				var val = field.input.textContent;
				if (val == field.placeHolderText) {
					field.input.textContent = "";
				}
			}
		} else {
			var val = field.input.textContent;
			if (val == "") {
				field.setInputValue("");
			} else {
				delete field.placeHolderText;
				syra_dom.toggleClass(field.input, "s-placeholder", false);
			}
		}
	}
};

var _minCardFieldWidth = 8; //for padding=4*2
function _addEscapePicker(field) {
	if (!field.isEscapePickerDisabled && field.input && !field.$isReadOnly && field.page.isFusionPage && !field.$item.$inplace) {
		syra_button.addFieldPicker({
			parent: field,
			pickerId: "escape",
			fontIcon: "reload",
			text: syra_local.fieldEscape,
			shortCutTip: syra_shortCuts.tip.escape,
			click: function(event) {
				syra_shortCuts.applyEscape(this.parent, null, event);
				this.parent.focus();
			}
		});
	}
}

function _ensureSectionOpened(section) {
	while (section) {
		section.ensureOpened && section.ensureOpened();
		section = section.boxParent;
	}
}

function Field() {}

exports.Field = helpers.defineClass(Field, null, {
	applyDesignMeta: function(metaData, designing) {
		return syra_fields.applyDesignMeta(this, metaData, designing);
	},
	onInputFocus: function(input, focusin) {
		if (this.$item.$contentEditable) {
			_contentEditable.onInputFocus(this, input, focusin);
		}
		this.hasFocus = focusin;
		if (focusin) {
			if (this.diagsSlot) {
				this.page.alertPanel.walkToField(0, this);
			}
		} else {
			this.onItemInOut(false);
		}
	},

	addValueSlot: function() {
		syra_fields.addValueSlot(this);
	},
	load: function() {
		this.isTabletDevice = syra_site.isTabletDevice;
		syra_fields.ensureEditMode(this);
		this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
		syra_menus.initializeScope(this);
		this.$mnPickersCss = this.$item.$mnPickersCss;
		if (!this.$mnPickersCss) {
			this.$mnPickersCss = this.$skin + (this.$isEditMode ? "-edit-picker" : "-read-picker");
		}
		if (this.articleParent.isRecordArticle) {
			this.arrayLevel = "cell";
		}
		if (this.$isEditMode) {
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
		}
		syra_fields.initCss(this);

		if (this.$isEditMode) {
			this.inputId = this.id + "-input";
		}
		this.domItem = this.layoutSlot;
		if (!this.$item.$inplace) {
			this.domItem = this.layoutSlot.appendChild(document.createElement("div"));
		}

		if (this.initialize) {
			this.initialize();
		}
		if (this.$isDetailLinkDisabled === undefined) {
			this.$isDetailLinkDisabled = this.$item.$isDetailLinkDisabled;
		}

		syra_fields.addTitle(this);

		this.addValueSlot();

		this.render();
		this.setMaxLength();
		this.isField = true;
		var node = this.$item.$coreId ? this._core : this.domItem;
		node.syrainout = node.syraItem = this.id;
		node.syra_field_bind = this.$item.$bind || "";

		if (this.input) {
			this.input.syraOnClick = "onFieldInputEvent";
			this.input.id = this.inputId;
		}
		this.setTitle(this.$item.$title || this.$field.$title);

		syra_fields.setDescription(this, this.$item.$description || this.$field.$description);
		this.applyDesignMeta(this.$item, false);

		this.setState(this.$field);
		if (this.$item.$isReadOnly) {
			this._onSetReadOnly(this.$item.$isReadOnly);
		}
		syra_fields.advancedState.setState(this);
		if (this.$field.$fieldStyle || this.$field.$valueStyle || this.$field.$titleStyle) {
			if (this.page.externalAdapter.applyDesignStyle(this, this.$field, this.$item)) {
				syra_fields.applyCustomStyle(this, this.$field);
			}
		}
		syra_item.bind(this, this.$item.$bind);
		syra_menus.applyChange(this, this.$field);
		syra_fields.ensureSectionVisibility(this);
		this.setFieldWidth();
		this.applyAutoSize(this.$item);
		this.isTabletDevice && _addEscapePicker(this);
		syra_fields.ensureLayoutMode(this);
	},
	onAddMenuPicker: function(btn) {
		this._dataValue.appendChild(btn.link);
	},
	setFieldWidth: function() {
		if (this.$isEditMode && !this.hasFreeWidth && !this.$item.$rows && !this.$item.$inplace && this._dataValue && !this.$item.$isAutoSizeDisabled) {
			this.widthValue = syra_fields.getCardFieldWidth(this.$field);
			if (this.input) {
				if (this.buttons && this.buttons.length) {
					this.widthValue += this.buttons.length * syra_button.btnWidth;
				}
				this.widthValue += _minCardFieldWidth; //for border + padding
				this._core.style.maxWidth = this.widthValue + "px";
			}
		}
	},
	applyAutoSize: function(state) {
		if (state.$isAutoSize !== undefined) {
			this.$item.$isAutoSize = state.$isAutoSize;
			if (state.$isAutoSize) {
				this.page.resizableList.add(this);
			} else {
				this.page && this.page.resizableList.remove(this);
			}
		}
	},
	render: function() {
		if (this.$isEditMode) {
			var css = this.$skinInput;
			if (this.$item.$css) {
				css += " " + this.$item.$css;
			}
			if (this.$item.$rows) {
				this.isTextArea = true;
				this.input = syra_dom.textarea(css, this._dataValue, this.$item.$rows);
				this.input.style.height = "auto";
			} else {
				if (this.$item.$contentEditable) {
					this.input = syra_dom.addEditable(css, this._dataValue);
				} else {
					this.input = syra_dom.input(css, this._dataValue, !this.$item.$isFilterMode ? this.$inputType : undefined);
				}
			}
		}
	},
	setMaxLength: function() {
		if (this.$isEditMode && this.input) {
			this.$maxLength = this.$item.$maxLength || this.$field.$maxLength;
			if (this.$maxLength) {
				this.input.setAttribute("maxlength", this.$maxLength);
			}
		}
	},
	highlightOnEnter: function(on, event, target) {
		if (this.$isEditMode) {
			var target = (this.isTabletDevice && this.input) ? this.input : this._dataValue;
			syra_dom.toggleClass(target, "s-enter", on);
		}
	},
	onItemInOut: function(on, event, target) {
		this.highlightOnEnter(on, event, target);
		syra_tip.fieldTip.onItemInOut(this, on);
		syra_button.highlightFieldPickers(this, on);
		if (this.isDiagnosePopup && this.page.alertPanel) {
			this.page.alertPanel.onFieldItemInOut(this, on);
		}
	},
	highlightOnFocus: function(on, event) {
		var target = (this.isTabletDevice && this.input) ? this.input : this._dataValue;
		syra_dom.toggleClass(target, "s-focus", on);
	},
	onFieldInputEvent: function(event, shortcuts) {
		var self = this;
		if (!self.isDesigning && !self.isUnknowField) {
			if (self.variantItem) {
				return self.variantItem.onFieldInputEvent(event, shortcuts);
			}
			switch (event.type) {
				case "focusin":
				case "focusout":
					var isIn = event.type == "focusin";
					if (isIn) {
						_ensureSectionOpened(self);
						syra_fields.scrollToField(self);
						syra_quality.logFocus(self);
					}
					this.highlightOnFocus(isIn, event);
					if (self.articleParent && self.articleParent.isGridRecord) {
						self.articleParent.list.builder.onChildFieldFocus(self, isIn);
					}
					syra_button.highlightFieldPickers(self, isIn);
					syra_fields.onFieldFocusChange(self, isIn, event);
					break;
				case "click":
					_ensureSectionOpened(self);
					break;
			}
			if (self.page && self.page.externalAdapter) {
				return self.page.externalAdapter.onFieldEvent({
					field: self,
					event: event,
					shortcuts: shortcuts,
					doEvent: function() {
						switch (event.type) {
							case "change":
								return syra_form.onInputChange(self, event);
							case "focusin":
							case "focusout":
								return self.onInputFocus(event.target, event.type == "focusin");
							case "click":
								self.onInputFocus(event.target, true);
								event.syraRetValue = true;
								event.stopPropagation();
								break;
							default:
								var fnct = "onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1);
								if (self[fnct]) {
									return self[fnct](event.target, event);
								} else {
									return false;
								}
						}
					}
				});
			}
		}
	},
	getTitle: function() {
		return syra_fields.getTitle(this);
	},
	setTitle: function($title) {
		syra_fields.setTitle(this, $title);
	},
	setState: function(state) {
		syra_fields.setState(this, state);
	},
	_onSetReadOnly: function($isReadOnly) {
		if (this.input) {
			this.isInputReadOnly = $isReadOnly;
			if ($isReadOnly) {
				this.input.syraReadOnly = true;
				this.input.setAttribute("readonly", "readonly");
				if (this.$item.$contentEditable) {
					this.input.removeAttribute("contenteditable");
				}
			} else {
				if (this.input.syraReadOnly) {
					this.input.syraReadOnly = false;
					this.input.removeAttribute("readonly");
					if (this.$item.$contentEditable) {
						this.input.setAttribute("contenteditable", "true");
					}
				}
			}
			syra_dom.toggleClass(this.input, "s-readonly", $isReadOnly);
		}
		if (this.$isEditMode) {
			syra_dom.toggleClass(this._dataValue, "s-readonly", $isReadOnly);
		}
	},
	setValue: function(value, metaData) {
		if (value !== undefined) {
			this.setDirty(false);
			this.currentValue = value;
			if (this.$isEditMode) {
				this.setInputValue(this.currentValue || "");
			} else {
				this.displayText = value;
				if (value && this.$menus && this.$menus.$details && !this.$item.$isDetailLinkDisabled) {
					syra_fields.addDetailLink(this, value, this.$menus.$details);
				} else {
					var htmlValue = syra_tip.utcTip.emphasis(value);
					if (!htmlValue && this.$item.$rows) {
						htmlValue = value;
					}
					if (htmlValue) {
						this._dataValue.innerHTML = syra_dom.escape(htmlValue);
					} else {
						this._dataValue.textContent = value;
					}
				}
				syra_picker.menus.show(this);
			}
		}
		this.applyMetaData(metaData);
	},
	getDisplayText: function() {
		return this.currentValue || "";
	},
	setDirty: function(dirty) {
		this._isDirty = dirty;
	},
	isDirty: function(set) {
		return this.isTextArea ? this._isDirty : true;
	},
	getValue: function() {
		return this.getInputValue();
	},
	getInputValue: function() {
		if (this.input) {
			var val;
			if (this.$item.$contentEditable) {
				val = _contentEditable.getInputValue(this);
			} else {
				val = this.input.value;
			}
			return (this.noSpaceTrim ? val : (val && val.trim()));
		} else {
			return this.currentValue;
		}
	},
	setInputValue: function(val) {
		if (this.$item.$contentEditable) {
			_contentEditable.setInputValue(this, val);
		} else {
			this.input.value = val;
		}
	},
	getCaretPosition: function() {
		if (this.input) {
			return this.$item && this.$item.$rows && (this.input.selectionDirection === "forward" ? this.input.selectionEnd : this.input.selectionStart);
		}
		return -1;
	},
	applyMetaData: function(metaData, options) {
		syra_fields.applyMetaData(this, metaData, options);
	},
	forceVisibility: function() {
		if (this.isInvisible && this.$item && this.$item.$isAdvanced) {
			this.page && this.page.advancedFieldsBtn && this.page.advancedFieldsBtn.link.click();
		}
	},

	setInputFocus: function(select) {
		if (this.input && !this.$isDisabled && !this.$isHidden) {
			this.input.focus();
			try {
				select && !this.$isReadOnly && !this.isInputReadOnly && this.input.select();
			} catch (error) {
				//!!important avoid trouble with IE
			}
			return true;
		}
		return false;
	},
	focus: function(select) {
		_ensureSectionOpened(this);
		syra_fields.scrollToField(this);
		this.page.setShortcutSpyerList(this);
		var isDone = false;
		if (!this.$isHidden) {
			this._isScollToTieldDisabled = true;
			this.forceVisibility();
			isDone = this.setInputFocus(select);
			this._isScollToTieldDisabled = false;
		}
		return isDone;
	},
	isEmpty: function() {
		return !this.currentValue;
	},
	hasValue: function() {
		return this.currentValue != null;
	},
	onMenuClick: function(options) {
		if (options.menu.$sourceBind == "$localize") {
			options.scope = this;
			syra_localizer.onMenuClick(options);
			return false;
		}
		return true;
	},

	dispose: function() {
		syra_menus.disposeScope(this);
		if (this.page) {
			syra_fields.onFieldFocusChange(this, false);
			if (this.$item && this.$item.$isAutoSize) {
				this.page.resizableList.remove(this);
			}
		}
		syra_site.disposeObject(this);
	}
});