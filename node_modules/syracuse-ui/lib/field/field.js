"use strict";
var helpers = require('syracuse-core/lib/helpers');
var fieldHelper = require('syracuse-ui/lib/field/helpers/fieldHelper');
var utcTip = require('syracuse-ui/lib/field/helpers/utcTip');

var advancedStateHelper = require('syracuse-ui/lib/field/helpers/advancedStateHelper');
var contentEditableHelper = require('syracuse-ui/lib/field/helpers/contentEditableHelper');

var _minCardFieldWidth = 8; //for padding=4*2
function _getCsBeside(field) {
	if (field.$item.$isInline) {
		return " s-field-inline";
	}
	if (!field.$item.$isTopLabelAlignment) {
		return field.$isEditMode ? " s-beside-edit" : " s-beside-read";
	}
	return "";
}

function _addEscapePicker(field) {
	if (!field.isEscapePickerDisabled && field.input && !field.$isReadOnly && field.page.isFusionPage && !field.$item.$inplace) {
		syra_menus.addFieldPicker(field, "escape", syra_local.fieldEscape, "ESC");
	}
}

function Field() {}

exports.Field = helpers.defineClass(Field, null, {
	setAdvancedState: function($isAdvanced, designing) {
		if ($isAdvanced === undefined) {
			if (this.$field.$isAdvanced !== undefined || this.$item.$isAdvanced !== undefined) {
				if (this.$item.$isAdvanced === undefined) {
					this.$item.$isAdvanced = this.$field.$isAdvanced;
				}
				this.setAdvancedState(this.$item.$isAdvanced);
			}
		} else {
			advancedStateHelper.setAdvancedState(this, $isAdvanced, designing);
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		if (metaData.$isHidden !== undefined) {
			this.setState(metaData);
		}
		if (designing !== false) {
			if (metaData.$isTopLabelAlignment !== undefined) {
				this.$item.$isTopLabelAlignment = metaData.$isTopLabelAlignment;
				if (this.$item.$isTopLabelAlignment) {
					metaData.$isRightTextLabelAlignment = false;
				}
				var beside = this.$isEditMode ? " s-beside-edit" : " s-beside-read";
				if (this.domTitle) {
					syra_site.dom.toggleClass(this.domTitle, beside, !this.$item.$isTopLabelAlignment);
				}
				syra_site.dom.toggleClass(this._core, beside, !this.$item.$isTopLabelAlignment);
				syra_site.dom.toggleClass(this.domItem, beside, !this.$item.$isTopLabelAlignment);
			}
			if (metaData.$isAdvanced !== undefined) {
				this.setAdvancedState(metaData.$isAdvanced, designing);
			}
		}
		if (metaData.$isTitleHidden !== undefined) {
			this.$item.$isTitleHidden = metaData.$isTitleHidden;
			if (!metaData.$isTitleHidden && !this.domTitle) {
				this.appendTitle(true);
				this.setTitle(this.getTitle());
			}
		}
		if (metaData.$isTitleEmpty !== undefined) {
			this.$item.$isTitleEmpty = metaData.$isTitleEmpty;
		}
		if (this.domTitle) {
			if (metaData.$isTitleEmpty !== undefined) {
				this.setTitle(this.getTitle());
			}
			if (metaData.$isTitleHidden !== undefined) {
				this.hideTitle(metaData.$isTitleHidden);
			}
			if (metaData.$isRightTextLabelAlignment !== undefined) {
				this.domTitle.style.textAlign = (this.$item.$isRightTextLabelAlignment = metaData.$isRightTextLabelAlignment) ? "right" : "left";
			}

		}
	},
	onInputFocusin: function(input, event) {
		if (this.$item.$contentEditable) {
			contentEditableHelper.onInputFocusin(this, input, event);
		}
		if (this.articleParent.onInputFocusin) {
			this.articleParent.onInputFocusin(this);
		}
		this.hasFocus = true;
		if (this.diagsSlot) {
			this.page.diagnosesPanel.walkToField(0, this);
		}
	},
	onInputClick: function(input, event) {
		this.onInputFocusin(input, event);
	},
	onInputFocusout: function(input, event) {
		if (this.$item.$contentEditable) {
			contentEditableHelper.onInputFocusout(this, input, event);
		}
		if (this.articleParent.onInputFocusout) {
			this.articleParent.onInputFocusout(this);
		}
		this.hasFocus = false;
		this.onItemInOut(false);
	},
	appendDetailLink: function(value, $detailsLink) {
		if (!this.$isDetailLinkDisabled) {
			if (this.builder) {
				value = (this.$selectedEnum && this.$selectedEnum.$title) || value;
			}
			var menus = this.mnPickers && this.mnPickers.menus;
			menus && menus.parentNode && menus.parentNode.removeChild(menus);
			syra_site.dom.empty(this._dataValue);
			var mn = this.page.loadNewItem(this._dataValue, {
				$bind: "$detail",
				$title: $detailsLink.$title = value + "",
				$category: "link",
				$skin: this.$skin + "-link",
				$format: this.$field.$format
			}, this.boxParent);
			mn.detailFieldId = this.id;
			mn.setMenu($detailsLink);
			menus && this._dataValue.appendChild(menus);
		}
	},
	hideTitle: function($isTitleHidden) {
		this.domTitle.style.display = $isTitleHidden ? "none" : "";
	},
	_createValueContainer: function() {
		var css = this._$cssField + (this.$isEditMode ? "-value-edit" : "-value-read");
		if (this.$item.$inplace) {
			this._dataValue = this._dataValue || document.createElement("div");
			this._dataValue.className = css;
			this.domItem.appendChild(this._core = this._dataValue);
			this.domItem.className += " " + this._$cssField + _getCsBeside(this);


		} else {
			this.domItem.className += " " + this._$cssField + _getCsBeside(this);
			this._dataValue = this._dataValue || document.createElement("div");
			this._dataValue.className = css;
			this._core = document.createElement("div");
			this._core.className = this._$cssField + "-core" + _getCsBeside(this);
			this._core.appendChild(this._dataValue);
			this.domItem.appendChild(this._core);
		}
		if (this.$cssFieldType) {
			this._dataValue.className += " " + this.$cssFieldType;
		}
	},
	_initCss: function() {
		this._$cssField = (this.$item.$css) ? (this.$item.$css + " " + this.$skinField) : this.$skinField;
	},
	ensureEditMode: function() {
		if (this.$isEditMode === undefined) {
			this.$isEditMode = this.$field.$isEditMode;
			if (this.$isEditMode === undefined) {
				this.$isEditMode = this.$item.$isEditMode;
			}
			if (this.$isEditMode === undefined) {
				this.$isEditMode = this.articleParent.$isEditMode;
			}
		}
	},
	loadBox: function() {
		this.isTabletDevice = syra_site.isTabletDevice;
		this.ensureEditMode();
		this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
		this.$skinField = this.$item.$inplace && this.$item.$inplaceSkin ? this.$item.$inplaceSkin + " " + this.$skinField : this.$skinField;
		syra_menus.initialize(this);
		this.$mnPickersCss = this.$item.$mnPickersCss;
		if (!this.$mnPickersCss) {
			this.$mnPickersCss = this.$skin + (this.$isEditMode ? "-edit-picker" : "-read-picker");
		}
		if (this.articleParent.isRecordArticle) {
			this.arrayLevel = "cell";
		}
		if (this.$isEditMode) {
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
		}
		this._initCss();

		if (this.$isEditMode) {
			this.inputId = this.id + "-input";
		}
		this.domItem = this.layoutSlot;
		if (!this.$item.$inplace) {
			this.domItem = this.layoutSlot.appendChild(document.createElement("div"));
		}

		if (this.initialize) {
			this.initialize();
		}
		if (this.$isDetailLinkDisabled === undefined) {
			this.$isDetailLinkDisabled = this.$item.$isDetailLinkDisabled;
		}
		this.appendTitle();

		this._createValueContainer();
		this.render();
		this.isField = true;
		this.domItem.syrainout = this.domItem.syraItem = this.id;
		this.domItem.syra_field_bind = this.$item.$bind || "";

		if (this.input) {
			if (this.$item.$isCellChild) {
				this._dataValue.style.width = "100%";
			}
			this.input.syraOnClick = "onInputFieldClick";
			this.input.id = this.inputId;
		}
		this.setTitle(this.$item.$title || this.$field.$title);

		this.setDescription(this.$item.$description || this.$field.$description);
		this.applyDesignMetaData(this.$item, false);
		this.setFieldWidth();

		this.setState(this.$field);
		this.setAdvancedState();
		if (this.$field.$fieldStyle || this.$field.$valueStyle || this.$field.$titleStyle) {
			if (this.page.externalAdapter.applyDesignStyle(this, this.$field, this.$item)) {
				fieldHelper.applyCustomStyle(this, this.$field);
			}
		}
		this.articleParent.bind(this, this.$item.$bind);
		syra_menus.setMenus(this, this.$field);
		this.applyAutoSize(this.$item);
		this.isTabletDevice && _addEscapePicker(this);
		this.ensureLayoutMode();
	},
	onAddMenuPicker: function(picker) {
		this._dataValue.appendChild(picker);
		if (this.articleParent && this.articleParent.onAddButton) {
			this.articleParent.onAddButton(picker);
		}
	},
	setFieldWidth: function() {
		if (this.$isEditMode && !this.hasFreeWidth && !this.$item.$rows && !this.$item.$inplace && this._dataValue && !this.$item.$isAutoSizeDisabled) {
			this.widthValue = fieldHelper.getCardFieldWidth(this.$field);
			if (this.input) {
				this.pickerCount = this.pickerCount || 0;
				if (this.$field.$item ? (this.$field.$links || this.$field.$actions) : (this.$field.$links || this.$field.$actions)) {
					this.pickerCount++;
					if (this.$field.$links && (this.$field.$links.$lookup || this.$field.$links.$select)) {
						this.pickerCount++;
					}
				}
				this.widthValue += (this.pickerCount * syra_menus.btnWidth) + _minCardFieldWidth; //for border + padding
				this._core.style.maxWidth = this.widthValue + "px";
			}
		}
	},
	applyAutoSize: function(state) {
		if (state.$isAutoSize !== undefined) {
			this.$item.$isAutoSize = state.$isAutoSize;
			if (state.$isAutoSize) {
				this.page.addResizable(this);
			} else {
				this.page.removeResizable(this);
			}
		}
	},
	render: function() {
		if (this.$isEditMode) {
			if (this.$item.$rows) {
				this.input = document.createElement("textarea");
				this.isTextArea = true;
				this.input.style.height = "auto";
				this.input.setAttribute("rows", this.$item.$rows);
				syra_site.setSpecificAttributes(this.input);
				this.input.className = this.$skinInput;
			} else {
				if (this.$item.$contentEditable) {
					contentEditableHelper.render(this);
				} else {
					this.input = document.createElement("input");
					syra_site.setSpecificAttributes(this.input);
					if (!this.$item.$isFilterMode) {
						this.input.setAttribute("type", this.$inputType || "text");
					}
					this.input.className = this.$skinInput;
				}
				this.$maxLength = this.$item.$maxLength || this.$field.$maxLength;
				if (this.$maxLength) {
					this.input.setAttribute("maxlength", this.$maxLength);
				}
			}
			if (this.$item.$css) {
				this.input.className += " " + this.$item.$css;
			}
			this._dataValue.appendChild(this.input);
		}
	},
	highlightOnEnter: function(on, event, target) {
		if (this.$isEditMode) {
			var target = (this.isTabletDevice && this.input) ? this.input : this._dataValue;
			syra_site.dom.toggleClass(target, "s-enter", on);
		}
	},
	onItemInOut: function(on, event, target) {
		this.highlightOnEnter(on, event, target);
		if (on) {
			if (this.input) {
				syra_site.dialogManager.fieldTip.show(this.getInputValue(), this.input, true);
			} else {
				syra_site.dialogManager.fieldTip.show(this.displayText || this._dataValue.textContent, this._dataValue, true);
			}
		} else {
			syra_site.dialogManager.fieldTip.clear();
		}
		syra_menus.highlight(this, on);
		if (this.isDiagnosePopup && this.page.diagnosesPanel) {
			this.page.diagnosesPanel.onFieldItemInOut(this, on);
		}
	},
	highlightOnFocus: function(on, event) {
		var target = (this.isTabletDevice && this.input) ? this.input : this._dataValue;
		syra_site.dom.toggleClass(target, "s-focus", on);
	},
	onFieldInputEvent: function(event, shortcuts) {
		var self = this;
		switch (event.type) {
			case "focusin":
			case "focusout":
				var isIn = event.type == "focusin";
				if (isIn) {
					self.scrollToField();
					syra_quality.logFocus(self);
				}
				this.highlightOnFocus(isIn, event);
				if (self.articleParent && self.articleParent.isGridRecord) {
					self.articleParent.list.builder.onChildFieldFocus(self, isIn);
				}
				syra_menus.highlight(self, isIn);
				if (isIn) {
					self.page.focusField = self;
					syra_site.ensureRecordUniqueSelection(self);
					syra_site.closePopups(self, event);
				} else {
					if (self.page.focusField == self) {
						self.page.focusField = null;
					}
				}
				break;
		}
		if (self.page && self.page.externalAdapter) {
			return self.page.externalAdapter.onFieldEvent({
				field: self,
				event: event,
				shortcuts: shortcuts,
				doEvent: function() {
					if (event.type == "change") {
						return syra_workingCopy.onInputChange(self, event);
					}
					//    onInputFocusin,onInputFocusout: function(input, event){
					var fnct = "onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1);
					if (self[fnct]) {
						return self[fnct](event.target, event);
					} else {
						return false;
					}
				}
			});
		}
	},
	getDefaultTitle: function() {
		return syra_local.fieldDefaultTitle;
	},
	getTitle: function() {
		if (this.titleText == null && this.$titleValue) {
			this.titleText = this.$titleValue || "";
			if (this.titleText.length > 0 && this.titleText[1] == "@") {
				this.titleText = syra_site.expressionMaker.render(this.boxParent, this.titleText);
			}
		}
		return this.titleText || "";
	},
	setTitle: function($title) {
		this.$titleValue = $title;
		delete this.titleText;
		if (this.domTitle) {
			if (this._mandatoryFlag) {
				syra_site.dom.removeChild(this._mandatoryFlag);
				this.domTitle.textContent = this.$item.$isTitleEmpty ? "" : this.getTitle();
				this.domTitle.appendChild(this._mandatoryFlag);
			} else {
				this.domTitle.textContent = this.$item.$isTitleEmpty ? "" : this.getTitle();
			}
		} else {
			if (this.input && this.$item.$isTitlePlaceHolder) {
				this.input.setAttribute("placeholder", this.getTitle());
				if (this.$item.$contentEditable && this.currentValue == null) {
					this.setInputValue("");
				}
			}
		}
	},
	appendTitle: function(isDesignMeta) {
		if (!(this.$item.$inplace || this.$item.$isTitleHidden)) {
			if (this.isTabletDevice) {
				// On a tablet the label is sensitive - click sets focus on attached field
				this.domTitle = document.createElement("div");
			} else {
				this.domTitle = document.createElement("label");
				if (this.inputId) {
					this.domTitle.setAttribute("for", this.inputId);
				}
			}
			this.domTitle.className = this._$cssField + "-title" + _getCsBeside(this);
			if (isDesignMeta) {
				this.domItem.appendChild(this.domTitle);
			} else {
				this.domItem.insertBefore(this.domTitle, this.domItem.firstChild);
			}
		}
	},
	setDescription: function($description) {
		if ($description !== undefined) {
			this.descriptionText = this.$description = $description || "";
			if (this.descriptionText.length > 0) {
				if (this.descriptionText[1] == "@") {
					this.descriptionText = syra_site.expressionMaker.render(this.boxParent, this.descriptionText);
				}
				if (!this.$item.$inplace) {
					if (!this.descriptionItem) {
						this.descriptionItem = document.createElement("div");
						var css = this.$skinField + "-desc";
						if (this.$item.$css) {
							css += " " + this.$item.$css;
						}
						this.descriptionItem.className = css;
						this._dataValue.parentNode.insertBefore(this.descriptionItem, this._dataValue.nextSibling);
					}
					this.descriptionItem.textContent = this.descriptionText;
				}
			} else {
				if (this.descriptionItem) {
					syra_site.dom.removeChild(this.descriptionItem);
					this.descriptionItem = null;
				}
			}
		}
	},
	setState: function(state) {
		if (!this.$item.$isFilterMode) {
			if (state.$isMandatory !== undefined) {
				this.$isMandatory = state.$isMandatory;
				if (this.$isEditMode) {
					if (this.domTitle && this.getTitle().length > 0) {
						syra_site.dom.toggleClass(this.domTitle, "s-mandatory", state.$isMandatory);
						if (state.$isMandatory) {
							if (!this._mandatoryFlag) {
								this._mandatoryFlag = syra_menus.addFontIconFlag("s-field-mandatory-flag", "mandatory");
								this.domTitle.appendChild(this._mandatoryFlag);
							}
						} else {
							syra_site.dom.removeChild(this._mandatoryFlag);
							this._mandatoryFlag = null;
						}
					}
					syra_site.dom.toggleClass(this._dataValue, "s-mandatory", state.$isMandatory);
				}
			}
			if (state.$isDisabled !== undefined) {
				this.$isDisabled = state.$isDisabled;
				if (state.$isDisabled) {
					this.domItem.setAttribute("disabled", true);
				} else {
					this.domItem.removeAttribute("disabled");
				}
				if (this.input) {
					syra_site.dom.disableItem(this.input, state.$isDisabled);
					if (this.$item.$contentEditable) {
						contentEditableHelper.setState(this, state);
					}
				}
				this.domTitle && syra_site.dom.disableItem(this.domTitle, state.$isDisabled);
				this.descriptionItem && syra_site.dom.disableItem(this.descriptionItem, state.$isDisabled);
				syra_site.dom.disableItem(this._dataValue, state.$isDisabled);
			}
			if (state.$isReadOnly !== undefined) {
				this.$isReadOnly = state.$isReadOnly;
				this._onSetReadOnly && this._onSetReadOnly(state.$isReadOnly);
			}
			if (this._mandatoryFlag) {
				syra_site.dom.toggleClass(this._mandatoryFlag, "s-disabled", this.$isDisabled || this.$isReadOnly);
			}
			this.$isEditMode && syra_menus.applyFieldState(this);
		}
		if (state.$isHidden !== undefined) {
			this.showItem(!(this.$isHidden = state.$isHidden));
		}
	},

	showItem: function(show) {
		this.isInvisible = !show;
		if (this.$item.$inplace) {
			this._dataValue.style.display = show ? "" : "none";
		} else {
			this.layoutParent && this.layoutParent.ensureItemVisibility(this, !show);
			this.domItem.style.display = show ? "" : "none";
		}
	},
	_onSetReadOnly: function($isReadOnly) {
		if (this.input) {
			if (this.$isReadOnly) {
				this.input.setAttribute("readonly", "readonly");
			} else {
				this.input.removeAttribute("readonly");
			}
			syra_site.dom.toggleClass(this.input, "s-readonly", this.$isReadOnly);
		}
		if (this.$isEditMode) {
			syra_site.dom.toggleClass(this._dataValue, "s-readonly", this.$isReadOnly);
		}

	},
	setDataBind: function(value, record, metaData, $bind) {
		if (this.page.externalAdapter.setDataBind(this, value, record, metaData)) {
			if (value !== undefined) {
				this.setDirty(false);
				this.setDataValue(value, $bind);
			}
			this.applyMetaData(metaData);
		}
	},
	setDataValue: function(value, $bind) {
		this.currentValue = value;
		if (this.$isEditMode) {
			this.setInputValue(this.currentValue || "");
			// quick hack for lookup in regular field
			if (this.currentValue && typeof(this.currentValue) == 'object' && this.$item && this.$item.$bind) {
				// crnit: even quicker hack for filter fields where we might have $low and $high suffixes
				var b = this.$item.$bind.replace("$low", "").replace("$high", "");
				this.setInputValue(syra_site.expressionMaker.parse(this.articleParent, "{" + b + "}", value));
				//this.currentValue.$value = this.getDataValue();
				this.currentValue = this.getDataValue();
			}
		} else {
			this.displayText = value;
			if (value && this.$menus && this.$menus.$details && !this.$item.$isDetailLinkDisabled) {
				this.appendDetailLink(value, this.$menus.$details);
			} else {
				var htmlValue = utcTip.emphasis(value);
				if (!htmlValue && this.$item.$rows) {
					htmlValue = value;
				}
				if (htmlValue) {
					this._dataValue.innerHTML = syra_site.dom.formatHTMLText(htmlValue);
				} else {
					this._dataValue.textContent = value;
				}
			}
			syra_menus.showMenuPicker(this);
		}
	},
	getDisplayText: function() {
		return this.currentValue || "";
	},
	setDirty: function(dirty) {
		this.dirty(dirty);
	},
	dirty: function(set) {
		if (set !== undefined) {
			this._isDirty = set;
		} else
			return this.isTextArea ? this._isDirty : true;
	},
	getDatasetValue: function() {
		var value = this.articleParent.dataset[this.$item.$bind];
		if (this.$item.$variantItemKey) {
			if (value) {
				return value[this.$item.$variantItemKey];
			}
		}
		return value;
	},
	setDatasetValue: function(value) {
		var value = this.currentValue = (value === undefined ? this.getDataValue() : value);
		if (this.$item.$variantItemKey) {
			if (!this.articleParent.dataset[this.$item.$bind]) {
				this.articleParent.dataset[this.$item.$bind] = {};
			}
			this.articleParent.dataset[this.$item.$bind][this.$item.$variantItemKey] = value;
		} else {
			this.articleParent.dataset[this.$item.$bind] = value;
		}
		return value;
	},
	getDataValue: function() {
		return this.getInputValue();
	},
	getInputValue: function() {
		if (this.input) {
			var val;
			if (this.$item.$contentEditable) {
				val = contentEditableHelper.getInputValue(this);
			} else {
				val = this.input.value;
			}
			return val && val.trim();
		} else {
			return this.currentValue;
		}
	},
	setInputValue: function(val) {
		//val = val && val.trim && val.trim();
		if (this.$item.$contentEditable) {
			contentEditableHelper.setInputValue(this, val);
		} else {
			this.input.value = val;
		}
	},
	getCaretPosition: function() {
		return this.$item && this.$item.$rows && this.input && (this.input.selectionDirection === "forward" ? this.input.selectionEnd : this.input.selectionStart);
	},
	applyMetaData: function(metaData, options) {
		if (this._dataValue) { //important for reloading and initiliaze method called before render
			if (metaData) {
				if (metaData.$title !== undefined) {
					this.setTitle(metaData.$title);
				}
				if (metaData.$description !== undefined) {
					this.setDescription(metaData.$description);
				}
				this.setState(metaData);
				if (metaData.$diagnoses !== undefined) {
					syra_diagnose.showDiagnoses({
						$diagnoses: metaData.$diagnoses
					}, this, options);
				}
				syra_menus.setMenus(this, metaData);
				if (!this.$isEditMode && this.currentValue && !this.$isDetailLinkDisabled) {
					if (metaData.$links && metaData.$links.$details) {
						this.appendDetailLink(this.currentValue, metaData.$links.$details);
					}
				}
				//$valueStyle can be "" (clear style)  in this case  metaData.$valueStyle is false
				if (metaData.$fieldStyle || metaData.$valueStyle != undefined || metaData.$titleStyle) {
					fieldHelper.applyCustomStyle(this, metaData);
				}
			}
		}
	},
	forceVisibility: function() {
		if (this.isInvisible && this.$item && this.$item.$isAdvanced) {
			this.page && this.page._advancedFieldsBtn && this.page._advancedFieldsBtn.link.click();
		}
	},
	scrollToField: function() {
		if (!this._isScollToTieldDisabled) {
			if (this.articleParent.isRecordArticle && this.articleParent.list && this.articleParent.list.scrollToRecordField) {
				this.articleParent.scrollToRecordField(this);
			} else {
				syra_page.scrollToItem(this.page, this);
			}
		}
	},
	_setInputFocus: function(select) {
		if (this.input) {
			this.input.focus();
			if (select && !this.$isDisabled) {
				this.input.select();
			}
			return true;
		}
		return false;
	},
	focus: function(select) {
		this.boxParent.ensureOpened && this.boxParent.ensureOpened();
		this.scrollToField();
		this.page.setShortcutSpyerList(this);
		var isDone = false;
		if (!this.$isHidden) {
			this._isScollToTieldDisabled = true;
			this.forceVisibility();
			isDone = this._setInputFocus(select);
			this._isScollToTieldDisabled = false;
		}
		return isDone;
	},
	isEmpty: function() {
		return !this.currentValue;
	},
	showErrors: function(errors, options) {
		this.$displayedDiagnoses = [];
		for (var ii = 0, jj = errors.length; ii < jj; ii++) {
			this.$displayedDiagnoses.push({
				$message: errors[ii],
				$severity: "error"
			});
		}
		syra_diagnose.showDiagnoses({
			$diagnoses: this.$displayedDiagnoses
		}, this, options);
	},


	hasValue: function() {
		return this.currentValue != null;
	},
	ensureLayoutMode: function() {
		if (this.layoutParent) {
			this.layoutParent.ensureLayoutSlot(this);
		}
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$sourceBind == "$localize") {
			syra_site.localizer.onMenuClick(this, menuItem);
			return false;
		}
		return true;
	},
	onInputFieldClick: function(event) {
		this.onFieldInputEvent(event);
		event.syraRetValue = true;
		event.stopPropagation();
	},
	dispose: function() {
		syra_menus.dispose(this);
		syra_store.remove(this);
		if (this.page) {
			if (this.page.focusField == this) {
				this.page.focusField = null;
			}
			if (this.$isAutoSize || (this.$item && this.$item.$isAutoSize)) {
				this.page.removeResizable(this, false);
			}
		}
		syra_site.disposeObject(this);
	}
});