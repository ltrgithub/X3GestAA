"use strict";
var helpers = require('syracuse-core/lib/helpers');
var fieldHelper = require('./fieldHelper');

function Field() {}

exports.Field = helpers.defineClass(Field, null, {
	applyDesignMetaData: function(metaData, onAuthoring) {
		if (metaData.$isHidden !== undefined) {
			this.setState(metaData);
		}
		if (onAuthoring !== false) {
			if (metaData.$isTopLabelAlignment !== undefined) {
				var curItemCss = this.$skin;
				if (this.$item.$isTopLabelAlignment) {
					curItemCss += "-top";
				}
				this.$item.$isTopLabelAlignment = metaData.$isTopLabelAlignment;
				var newItemCss = this.$skinField;
				if (this.$item.$isTopLabelAlignment) {
					newItemCss += "-top";
					metaData.$isRightTextLabelAlignment = false;
				}
				this._domItem.className = this._domItem.className.replace(curItemCss, newItemCss);
				if (this.domTitle) {
					this.domTitle.className = this.domTitle.className.replace(curItemCss + "-title", newItemCss + "-title");
				}
				this._core.className = this._core.className.replace(curItemCss + "-core", newItemCss + "-core");
			}
			if (metaData.$isAdvanced !== undefined) {
				this.setAdvancedState(metaData.$isAdvanced, onAuthoring);
			}
		}
		if (metaData.$isTitleHidden !== undefined) {
			this.$item.$isTitleHidden = metaData.$isTitleHidden;
			if (!metaData.$isTitleHidden && !this.domTitle) {
				this.appendTitle();
				this.$$item.prepend(this.domTitle);
				this.setTitle(this.getTitle());
			}
		}
		if (this.domTitle) {
			if (metaData.$isTitleHidden !== undefined) {
				this.hideTitle(metaData.$isTitleHidden);
			}
			if (metaData.$isRightTextLabelAlignment !== undefined) {
				this.domTitle.style.textAlign = (this.$item.$isRightTextLabelAlignment = metaData.$isRightTextLabelAlignment) ? "right" : "left";
			}

		}
	},

	onInputFocusin: function(input, event) {
		document.site.focusedField = this;
		if (this.articleParent.onInputFocusin) {
			this.articleParent.onInputFocusin(this);
		}
		this.hasFocus = true;
		document.site.onChildFieldFocus(this.boxParent, true);
		if (this.hasDiagnoses) {
			this.page.diagnosesPanel.onNavigationClick(0, this);
		}
	},
	onInputClick: function(input, event) {
		this.onInputFocusin(input, event);
	},
	onInputFocusout: function(input, event) {
		if (document.site.focusedField == this) {
			document.site.focusedField = null;
		}
		if (this.articleParent.onInputFocusout) {
			this.articleParent.onInputFocusout(this);
		}
		this.hasFocus = false;
		this.onFieldMouseEvent({
			type: "mouseleave"
		});
		document.site.onChildFieldFocus(this.boxParent, false);
	},
	getArticle: function() {
		if (!this.articleParent) {
			this.articleParent = this.boxParent.getArticle();
		}
		return this.articleParent;
	},
	appendDetailLink: function(value, $detailsLink) {
		if (!this.$isDetailLinkIgnore) {
			if (this.boxPickers) {
				$(this.boxPickers).detach();
			}
			document.site.emptyDom(this.fieldValue);
			this.page.loadNewItem(this.fieldValue, {
				$bind: "$detail",
				$title: $detailsLink.$title = value + "",
				$category: "link",
				$skin: this.$skin + "-link"
			}, this.boxParent).setMenu($detailsLink);
			if (this.boxPickers) {
				this.fieldValue.appendChild(this.boxPickers);
			}
		}
	},
	hideTitle: function($isTitleHidden) {
		this.domTitle.style.display = $isTitleHidden ? "none" : "";
	},
	_createValueContainer: function() {
		this.domValueSlot = document.createElement("div");
		this.domValueSlot.className = this._$cssField + "-value";
		if (this.$cssFieldType) {
			this.domValueSlot.className += " " + this.$cssFieldType;
		}
		this._dataValue = this.domValueSlot;
		if (this.$item.$inplace) {
			this._core = this.domValueSlot;
			this._domItem.appendChild(this.domValueSlot);
		} else {
			this.domValueSlot = document.createElement("div");
			this.domValueSlot.className = this._$cssField + "-value-slot";
			this.domValueSlot.appendChild(this._dataValue);

			this._core = document.createElement("div");
			this._core.className = this._$cssTopField + "-core";
			this._core.appendChild(this.domValueSlot);
			this._domItem.appendChild(this._core);
		}
		if (this.$isEditMode) {
			this.fieldValue = this._dataValue;
		} else {
			this._dataValue.appendChild(this.fieldValue = document.createElement("div"));
			this.fieldValue.className = this._$cssField + "-value-read";
		}
	},
	_initCss: function() {
		this._$cssTopField = this._$cssField = (this.$item.$css) ? (this.$item.$css + " " + this.$skinField) : this.$skinField;
		if (this.$item.$isTopLabelAlignment) {
			this._$cssTopField += "-top";
		}
	},
	ensureEditMode: function() {
		this.$isEditMode = this.$item.$isEditMode;
		if (this.$isEditMode === undefined) {
			this.$isEditMode = this.articleParent.$isEditMode;
		}
	},
	loadBox: function($$item) {
		this.boxPickersPadding = 0;
		this.articleParent = this.boxParent.getArticle();
		this.ensureEditMode();
		this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
		if (this.articleParent.isRecordArticle) {
			this.arrayLevel = "cell";
		}
		if (this.$isEditMode) {
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
		}
		this._initCss();

		if (this.$isEditMode) {
			this.inputId = this.id + "-input";
		}
		this.$$item = $$item || $(this.layoutSlot);
		if (!this.$item.$inplace) {
			this.$$item = $$item || $(document.createElement("div")).appendTo(this.$$item);
		}
		(this._domItem = this.$$item[0]).className += " " + this._$cssTopField;

		this.$rootLinks = this.$field;
		if (this.initialize) {
			this.initialize();
		}

		this.appendTitle();

		this._createValueContainer();
		this.render();

		this._domItem.$syraFieldId = this.id;
		this._domItem.$syraFieldBind = this.$item.$bind || "";
		if (this._input) {
			if (this.$item.$isBorderVisible) {
				this._input.className += " s-input-border";
			}
			if (this.$item.$isCellChild) {
				this._input.style.width = "100%";
				this._dataValue.style.width = "100%";
			}
			this._input.$syraFieldId = this.id;
			this._input.id = this.inputId;
		}
		if (!this.$item.$inplace && !this.$isEditMode) {
			this.domValueSlot.style.display = 'inline-block';
		}

		this.setTitle(this.$item.$title || this.$field.$title);

		this.setDescription(this.$item.$description || this.$field.$description);
		this.setHelp(this.$item.$help || this.$field.$help);
		this.applyDesignMetaData(this.$item, false);
		this.setFieldWidth();

		this.setState(this.$field);
		if (this.$field.$isAdvanced !== undefined || this.$item.$isAdvanced !== undefined) {
			if (this.$item.$isAdvanced === undefined) {
				this.$item.$isAdvanced = this.$field.$isAdvanced;
			}
			this.setAdvancedState(this.$item.$isAdvanced);
		}
		if (this.$field.$fieldStyle || this.$field.$valueStyle || this.$field.$titleStyle) {
			if (this.page.externalAdapter.applyDesignStyle(this, this.$field, this.$item)) {
				this.applyFieldStyle(this.$field);
			}
		}
		this.articleParent.bind(this, this.$item.$bind);
		this.setMenus(this.$field);
		this.applyAutoSize(this.$item);
		this._ensureMenuPickerVisible();
		if (document.site.developpementMode) {
			fieldHelper.appendQualityAtt(this, this._dataValue);
			if (this._input) {
				fieldHelper.appendQualityAtt(this, this._input);
			}
		}
		this.ensureLayoutMode();
	},
	setFieldWidth: function() {
		if (this.$isEditMode && !this.$item.$inplace && this.domValueSlot && !this.$item.$isAutoSizeDisabled) {
			var widthValue = document.site.getFieldWidth(this.$field, true);
			this.domValueSlot.style.maxWidth = widthValue + "px";
			if (this.layoutParent && widthValue > this.layoutParent.fieldMaxWidth) {
				this.layoutParent.fieldMaxWidth = widthValue;
			}
		}
	},
	applyFieldStyle: function(metaData) {
		fieldHelper.applyFieldStyle(this, metaData);
	},
	applyAutoSize: function(state) {
		if (state.$isAutoSize !== undefined) {
			this._bindAutoSize(state.$isAutoSize);
			this.$item.$isAutoSize = state.$isAutoSize;
		}
	},
	releaseMode: function(onDispose) {
		this.domTitle = this.fieldValue = this._description = this._helpFlag = null;
		if (onDispose) {
			if (this.menusBox) {
				document.controller.disposeObject(this.menusBox);
			}
			this.menusBox = null;
		}
	},
	_bindAutoSize: function(bind) {
		document.site[bind ? "addResizeListener" : "removeResizeListener"](this);
	},
	render: function() {
		if (this.$isEditMode) {
			if (this.$item.$rows) {
				this._input = document.createElement("textarea");
				this.isTextArea = true;
				this._input.setAttribute("rows", this.$item.$rows);
			} else {
				if (this.createHtmlInput) {
					this._input = this.createHtmlInput();
				} else {
					this._input = document.createElement("input");
					this._input.setAttribute("type", "text");
				}
				this.$maxLength = this.$item.$maxLength || this.$field.$maxLength;
				if (this.$maxLength) {
					this._input.setAttribute("maxlength", this.$maxLength);
				}
			}
			this.$$input = $(this._input);

			this._input.className = this.$skinInput;
			if (this.$item.$css) {
				this._input.className += " " + this.$item.$css;
			}
			this.fieldValue.appendChild(this._input);
			this._appendLinksPicker();
		}
	},
	_appendSpecialPicker: function(pickerType) {
		var picker = this.createPicker(pickerType);
		picker.setAttribute("data-s-article", this.articleParent.id);
		picker.$syraFieldId = this.id;
		this.appendToPickerBox(picker);
		return picker;
	},
	_appendLinksPicker: function() {
		if (this.$rootLinks.$links) {
			if (this.$rootLinks.$links.$lookup) {
				var picker = this._appendSpecialPicker("lookup");
				picker.title = this.localize.fieldLookup;
			}
			if (this.$rootLinks.$links.$tunnel) {
				this.tunnelPicker = this._appendSpecialPicker("tunnel");
				this.tunnelPicker.title = this.localize.fieldTunnel;
			}
		}
	},
	_onAutoCompleteOpen: function() {
		return this._autoCompleteList = document.createElement("div");
	},
	_onAutoCompleteClose: function() {
		if (this._autoCompleteList) {
			document.site.emptyDom(this._autoCompleteList);
			this._autoCompleteList = null;
		}
	},
	runAutoCompleteSearch: function(event) {
		var self = this;
		self._searching = setTimeout(function() {
			// search doesn't take whitespace into account
			if (self.getDataValue().replace(/\s+/g, '') !== "") {

				// if some research has already been done, proceed with the request if the value has changed
				if (self.searchValue) {

					if (self.searchValue !== self.getDataValue()) {
						self.toggleAutoCompleteList(true);
					} else {
						// if empty field, close incremental search popup
						if (self.searchValue == self.getDataValue() == "") {
							if (self._autoCompletePopup) {
								self._autoCompletePopup.close();
							}
						}
					}
				} else {
					// first research (self.searchValue not set yet)
					self.toggleAutoCompleteList(true);
				}
			} else {
				if (self._autoCompletePopup) {
					self._autoCompletePopup.close();
				}
			}

		}, 300);
	},
	toggleAutoCompleteList: function(show) {
		var self = this;

		if (self.getDataValue() !== "") {
			self._domItem.id = self.id;
			self.focus();

			self.searchValue = self.getDataValue();

			if (self._autoCompletePopup) {
				self._onAutoCompleteOpen();
			} else {
				self._autoCompletePopup = self.boxParent.openDialog({
					content: self,
					$dialogMode: "popup",
					$$dialog: $(self._onAutoCompleteOpen()),
					position: {
						my: "right top",
						at: "right bottom",
						of: self.$$input
					},
					onClose: function() {
						self.searchValue = null;
						self._autoCompletePopup = null;
						self._onAutoCompleteClose();
					}
				});
			}
		} else {
			if (self._autoCompletePopup) {
				self._autoCompletePopup.close();
			}
		}
	},
	removeFromPickerBox: function(picker) {
		if (this.tunnelPicker == picker) {
			delete this.tunnelPicker;
		}
		this._updateBoxPickerPadding(false);
		if (picker) {
			document.site.removeDomChild(picker);
			if (this.boxPickersPadding == 0 && this.boxPickers) {
				document.site.removeDomChild(this.boxPickers);
				this.boxPickers = null;
			}
		}
	},
	clickPicker: function(pickerType) {
		var pickers = (this.boxPickers) ? this.boxPickers.childNodes : null;
		if (pickers) {
			for (var ii = 0, jj = pickers.length; ii < jj; ii++) {
				if (pickers[ii].$syraPickerType === pickerType) {
					pickers[ii].click();
					break;
				}
			}
		}
	},
	toggleBoxPicker: function() {
		var input = (this._input ? this._input : this._dataValue);
		if (this.boxPickers) {
			if (this.$isDisabled) {
				this.boxPickers.style.display = "none";
				input.style.paddingRight = "0px";
			} else {
				this.boxPickers.style.display = "";
				var pickers = this.boxPickers.childNodes;
				var display = (this.$isReadOnly) ? "none" : "";
				for (var ii = 0, jj = pickers.length; ii < jj; ii++) {
					pickers[ii].style.display = display;
				}
				if (this.$isReadOnly) {
					if (this.tunnelPicker) {
						this.tunnelPicker.style.display = "";
						input.style.paddingRight = "18px";
					}
					input.style.paddingRight = "0px";
				} else {
					input.style.paddingRight = this.boxPickersPadding + "px";
				}
			}
		} else {
			input.style.paddingRight = this.boxPickersPadding + "px";
		}
	},
	appendToPickerBox: function(picker) {
		if (!this.boxPickers) {
			this.boxPickers = document.createElement("div");
			if (this._input) {
				this.fieldValue.appendChild(this.boxPickers).className = this.$skin + "-pickers";
			} else {
				this._dataValue.appendChild(this.boxPickers).className = this.$skin + "-pickers";
			}
			if (this.boxPickersPadding) {
				this.boxPickers.style.paddingRight = this.boxPickersPadding + "px";
			}
		}
		this.boxPickers.appendChild(picker);
		this._updateBoxPickerPadding(true);
	},
	_updateBoxPickerPadding: function(add) {
		if (add) {
			this.boxPickersPadding += 18;
		} else {
			this.boxPickersPadding -= 18;
		}
		this.toggleBoxPicker();
	},
	createPicker: function(pickerType) {
		var btn = document.createElement("a");
		var css = this.$skin + "-" + pickerType;
		if (this.$item.$css) {
			css = this.$item.$css + " " + css;
		}
		btn.className = css + "-picker";
		btn.setAttribute("data-s-picker", pickerType);
		btn.$syraPickerType = pickerType;
		return btn;
	},
	doClickPicker: function() {

	},
	onFieldMouseEvent: function(event) {
		var self = this;
		if (this.menusBox) {
			document.site.toggleClass(this.menusBox._item, "s-mouseenter", (event.type == "mouseenter"));
		}
		if (this.boxPickers) {
			document.site.toggleClass(this.boxPickers, "s-mouseenter", (event.type == "mouseenter"));
		}
		if (this.popupDiagnose) {
			switch (event.type) {
				case "mouseenter":
					if (this.popupDiagnose) {
						this.popupDiagnoseDiag = this.page.openDialog({
							content: {},
							$dialogMode: "popup",
							$$dialog: $(this.popupDiagnose),
							position: {
								my: "left top",
								at: "left bottom",
								of: this.$$item
							}
						});
					}
					break;
				case "mouseleave":
					// close on mouse leave, and if mouse is not over popup
					if (this.popupDiagnoseDiag) {
						this.popupDiagnoseDiag.close();
						this.popupDiagnoseDiag = null;
					}
					break;
			}
		}
	},
	onFieldInputEvent: function(event) {
		var self = this;
		if (event.type == "focusin") {
			this.page.focusField = this;
			if (self.$item && self.$item.$isCellChild) {
				if (self.articleParent.isRecordArticle && self.articleParent.list) {
					var builder = self.articleParent.list.builder;
					if (builder && builder.scroller) {
						builder.scroller.ensureFieldVisibility(self);
					}
				}
			}
		}
		self.page.externalAdapter.onFieldEvent({
			field: self,
			event: event,
			doEvent: function() {
				//    onInputFocusin,onInputFocusout,onInputKeyup,onInputKeypress: function(input, event){
				var fnct = "onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1);
				if (self[fnct]) {
					self[fnct](event.target, event);
				}
			}
		});
	},
	onClickPicker: function(btn) {
		var self = this;
		if (!self.authoringNode && !self.$isDisabled) {
			var pickerType = btn.getAttribute("data-s-picker");
			self.page.externalAdapter.onFieldClickPicker({
				field: self,
				pickerType: pickerType,
				doEvent: function(options) {
					switch (btn.getAttribute("data-s-picker")) {
						case "lookup":
							self.focus();
							var $lookup;
							if (self.articleParent.dataset.$properties) {
								var $meta = self.articleParent.dataset.$properties[self.$item.$bind];
								if ($meta && $meta.$links) {
									$lookup = $meta.$links.$lookup;
								}
							}
							$lookup = $lookup || {};
							var $result = ($lookup.$result == undefined) ? self.$rootLinks.$links.$lookup.$result : $lookup.$result;
							var $url = ($lookup.$url == undefined) ? self.$rootLinks.$links.$lookup.$url : $lookup.$url;
							self.boxParent.openDialog({
								article: self.articleParent,
								$url: $url,
								onSelectRecord: function(selectedRecords) {
									if (!self.$isDisabled && !self.$isReadOnly) {
										//var $result = $lookup.$result;
										var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
										self.setDataValue($result ? record.dataset[$result] : record.dataset);
										self.focus();
										self.notifyFieldChange(self.currentValue);
									}
								}
							});
							break;
						case "tunnel":
							break;
						case "menus":
							break;
						default:
							self.doClickPicker(btn, options);
							break;
					}
				}
			});
		}
	},
	getDefaultTitle: function() {
		return this.localize.fieldDefaultTitle;
	},
	getTitle: function() {
		if (this.titleText == null && this.$titleValue) {
			this.titleText = this.$titleValue || "";
			if (this.titleText.length > 0 && this.titleText[1] == "@") {
				this.titleText = this.boxParent.renderExpression(this.titleText);
			}
		}
		return this.titleText || "";
	},
	setTitle: function($title) {
		this.$titleValue = $title;
		delete this.titleText;
		if (this.domTitle) {
			this.domTitle.textContent = this.getTitle();
		} else {
			if (this._input && this.$item.$isPlaceHolder) {
				this._input.setAttribute("placeholder", this.getTitle());
			}
		}
	},
	appendTitle: function() {
		if (!(this.$item.$inplace || this.$item.$isTitleHidden)) {
			this.domTitle = document.createElement("label");
			this.domTitle.className = this._$cssTopField + "-title";
			if (this.inputId) {
				this.domTitle.setAttribute("for", this.inputId);
			}
			this._domItem.appendChild(this.domTitle);
		}
	},

	setHelp: function($help) {
		return;
		if ($help != undefined) {
			this.$help = $help;
			if (this.domTitle && this.getTitle().length > 0) {
				if (this.$help) {
					if (!this._helpFlag) {
						this._helpFlag = document.createElement("a");
						this._helpFlag.className = "s-field-help-flag";
					}
				} else {
					if (this._helpFlag) {
						document.site.removeDomChild(this._helpFlag);
						delete this._helpFlag;
					}
				}
			}
		}
	},
	setDescription: function($description) {
		if ($description !== undefined) {
			var text = this.$description = $description || "";
			if (text.length > 0) {
				if (text[1] == "@") {
					text = this.boxParent.renderExpression(text);
				}
				if (!this.$item.$inplace) {
					if (!this._description) {
						this._description = document.createElement("div");
						this._description.className = this.$skinField + "-desc";
						$(this.domValueSlot).after(this._description);
					}
					this._description.textContent = text;
					this._description.style.display = "";
				}
			} else {
				if (this._description) {
					this._description.style.display = "none";
				}
			}
		}
	},
	setState: function(state) {
		if (!this.$item.$isFilterMode) {
			if (state.$isMandatory !== undefined) {
				this.$isMandatory = state.$isMandatory;
				if (this.$isEditMode) {
					if (this.domTitle && this.getTitle().length > 0) {
						document.site.toggleClass(this.domTitle, "s-mandatory", state.$isMandatory);
						if (state.$isMandatory) {
							if (!this._mandatoryFlag) {
								this._mandatoryFlag = document.createElement("div");
								this._mandatoryFlag.className = "s-field-mandatory-flag";
								this.domTitle.appendChild(this._mandatoryFlag);
								if (document.site.developpementMode) {
									this._dataValue.setAttribute("data-s-q-mandatory", true);
									if (this._input) {
										this._input.setAttribute("data-s-q-mandatory", true);
									}
								}
							}
						} else {
							if (this._mandatoryFlag) {
								document.site.removeDomChild(this._mandatoryFlag);
								delete this._mandatoryFlag;
								if (document.site.developpementMode) {
									this._dataValue.removeAttribute("data-s-q-mandatory");
									if (this._input) {
										this._input.removeAttribute("data-s-q-mandatory");
									}
								}
							}
						}
					}
					document.site.toggleClass(this._dataValue, "s-mandatory", state.$isMandatory);
				}
			}
			if (state.$isDisabled !== undefined) {
				this.$isDisabled = state.$isDisabled;
				if (state.$isDisabled) {
					this._domItem.setAttribute("disabled", true);
				} else {
					this._domItem.removeAttribute("disabled");
				}
				if (this._input) {
					document.site.disableItem(this._input, state.$isDisabled);
				}
				if (this.domTitle) {
					document.site.disableItem(this.domTitle, state.$isDisabled);
				}
				if (this._description) {
					document.site.disableItem(this._description, state.$isDisabled);
				}
				document.site.disableItem(this._dataValue, state.$isDisabled);
				if (this.menusBox) {
					this.menusBox._item.style.visibility = this.$isDisabled ? "hidden" : "";
				}
			}
			if (state.$isReadOnly !== undefined) {
				this.$isReadOnly = state.$isReadOnly;
				if (this._onSetReadOnly) {
					this._onSetReadOnly(state.$isReadOnly);
				}
			}
			if (this.boxPickers) {
				this.toggleBoxPicker();
			}
		}
		if (state.$isHidden !== undefined) {
			this.showField(!(this.$isHidden = state.$isHidden));
		}
	},
	setAdvancedState: function($isAdvanced, onAuthoring) {
		if (onAuthoring) {
			if ($isAdvanced) {
				this.$item.$isAdvanced = true;
			} else {
				delete this.$item.$isAdvanced;
			}

		}
		this.boxParent.toggleAdvancedFieldsMode($isAdvanced, onAuthoring);
		this.showAdvancedState($isAdvanced);
		if (onAuthoring) {
			document.site.authorPage.showAdvancedItem(this, $isAdvanced);
		}
	},
	showAdvancedState: function(show) {
		if (show) {
			if (!this.$isHidden) {
				this.showField(this.boxParent.$isAdvancedFieldsVisible);
			}
		} else {
			this.showField(!this.$isHidden);
		}
	},
	showField: function(show) {
		this.isInvisible = !show;
		if (this.$item.$inplace) {
			this._dataValue.style.display = show ? "" : "none";
		} else {
			if (this.layoutParent) {
				this.layoutParent.ensureItemVisibility(this, !show);
			}
			this._domItem.style.display = show ? "" : "none";
		}
		if (this.boxParent.validateFieldVisibility) {
			this.boxParent.validateFieldVisibility();
		}
	},
	_onSetReadOnly: function($isReadOnly) {
		if (this._input) {
			if (this.$isReadOnly) {
				this._input.setAttribute("readonly", "readonly");
			} else {
				this._input.removeAttribute("readonly");
			}
			document.site.toggleClass(this._input, "s-readonly", this.$isReadOnly);
		}
	},
	setDataBind: function(value, record, metaData, $bind) {
		if (this.page.externalAdapter.setDataBind(this, value, record, metaData)) {
			if (value !== undefined) {
				this.dirty(false);
				this.setDataValue(value, $bind);
			}
			this.applyMetaData(metaData);
		}
	},
	setDataValue: function(value, $bind) {
		this.currentValue = value;
		if (this.$isEditMode) {
			this.setInputValue(this.currentValue || "");
			// quick hack for lookup in regular field
			if (this.currentValue && typeof(this.currentValue) == 'object' && this.$item && this.$item.$bind) {
				// crnit: even quicker hack for filter fields where we might have $low and $high suffixes
				var b = this.$item.$bind.replace("$low", "").replace("$high", "");
				//
				this.setInputValue(this.articleParent.parseExpression("{" + b + "}", value));
				this.currentValue.$value = this.getDataValue();
			}
		} else {
			document.site.emptyDom(this.fieldValue);
			if (value && this.$rootLinks.$links && this.$rootLinks.$links.$details && !this.$item.$isMenusDisabled) {
				this.appendDetailLink(value, this.$rootLinks.$links.$details);
			} else {
				if (this.$item.$rows) {
					this.fieldValue.innerHTML = document.site.formatHTMLMessage(value);
				} else {
					this.fieldValue.textContent = value;
				}
			}
		}
	},
	dirty: function(set) {
		if (set !== undefined) {
			this._isDirty = set;
		} else return this.isTextArea ? this._isDirty : true;
	},
	saveClientValue: function() {
		return this.articleParent.dataset[this.$item.$bind] = this.currentValue = this.getDataValue();
	},
	getDataValue: function() {
		return this.getInputValue();
	},
	getInputValue: function() {
		if (this._input) {
			return document.site.trimString(this._input.value);
		} else {
			return document.site.trimString(this.currentValue);
		}
	},
	setInputValue: function(val) {
		this._input.value = document.site.trimString(val);
	},
	/// -------------
	/// ## getCaretPosition()
	/// 
	/// Gets the current 0 based caret position in the input.
	/// 
	getCaretPosition: function() {
		return this.$item && this.$item.$rows && this.$$input && (this.$$input.prop("selectionDirection") === "forward" ? this.$$input.prop("selectionEnd") : this.$$input.prop("selectionStart"));
	},
	applyMetaData: function(metaData, options) {
		if (this.domValueSlot) { //important for reloading and initiliaze method called before render
			if (metaData) {
				if (metaData.$isEditMode !== undefined) {
					this.toggleEditMode(metaData.$isEditMode);
				}
				if (metaData.$title !== undefined) {
					this.setTitle(metaData.$title);
				}
				if (metaData.$description !== undefined) {
					this.setDescription(metaData.$description);
				}
				if (metaData.$help !== undefined) {
					this.setHelp(metaData.$help);
				}
				this.setState(metaData);
				if (metaData.$diagnoses !== undefined) {
					this.showDiagnoses(metaData.$diagnoses, options);
				}
				this.setMenus(metaData);
				if (!this.$isEditMode && metaData.$links && metaData.$links.$details) {
					if (this.currentValue && !this.$item.$isMenusDisabled) {
						this.appendDetailLink(this.currentValue, metaData.$links.$details);
					}
				}

				if ((metaData.$type !== undefined) && (this.$field.$type != metaData.$type)) {
					fieldHelper.changeType(metaData.$type, this);
				}
				//$valueStyle can be "" (clear style)  in this case  metaData.$valueStyle is false
				if (metaData.$fieldStyle || metaData.$valueStyle != undefined || metaData.$titleStyle) {
					this.applyFieldStyle(metaData);
				}
			}
			if (this._ensureMenuPickerVisible) {
				this._ensureMenuPickerVisible();
			}
		}
	},
	focus: function(select) {
		this.page.scrollToItem(this);
		//	if (f.parents(":hidden").length == 0 && !f.attr("disabled") && f.is(':visible') && (f[0].localName !== 'a' || f.attr("href"))) {
		if (this._input) {
			if (!this.$isHidden) {
				this._input.focus();
				if (select && !this.$isDisabled) {
					this._input.select();
				}
				return true;
			}
		}
		return false;
	},
	isEmpty: function() {
		return !this.currentValue;
	},
	getDataType: function() {
		return this.$field;
	},
	showErrors: function(errors, options) {
		this.$displayedDiagnoses = [];
		for (var ii = 0, jj = errors.length; ii < jj; ii++) {
			this.$displayedDiagnoses.push({
				$message: errors[ii],
				$severity: "error"
			});
		}
		this.showDiagnoses(this.$displayedDiagnoses, options);
	},
	showDiagnoses: function(diagnoses, options) {
		document.site.showDiagnoses({
			field: this,
			$diagnoses: (diagnoses && diagnoses.length > 0) ? diagnoses : null
		}, this.boxParent, options);
	},
	validate: function(newValue, errors) {
		if (this.$item.$isFilterMode) {
			return true;
		}
		var value = newValue;
		if (value === undefined) {
			value = this.currentValue;
		}
		if (value == null) {
			value = "";
		}
		value = value.toString();
		errors = errors || [];
		if (this.$isMandatory && value == '' && this.page.externalAdapter.notifyFldMandatoryErr()) {
			errors.push(this.localize.fieldIsMandatory);
		}
		var dataType = this.getDataType();
		if (dataType.$pattern && value) {
			var match = new RegExp(dataType.$pattern, "i").test(value);
			if (!match) { //(match && match.index == 0 && match[0].length == value.length)) {
				errors.push(this.localize.fieldInvalidValue + " : " + value);
			}
		}
		if (this.validateType) {
			this.validateType(errors, value);
		}

		if (this.articleParent.onFieldValidate) {
			this.articleParent.onFieldValidate(this, value, errors);
		}
		//diagnosesPanel
		if (errors.length > 0 || this.$displayedDiagnoses) {
			this.showErrors(errors);
			var saveLinks = this.articleParent.menuItems.$save;
			var hasError = this.page.diagnosesPanel && this.page.diagnosesPanel.fieldDiagnosesCount;
			if (saveLinks && saveLinks.length > 0) {
				if (!saveLinks[0].$isDisabled) {
					if (hasError) {
						saveLinks[0].disable(true);
					}
				} else {
					if (!hasError) {
						saveLinks[0].disable(true);
					}
				}
			}
			var sendBag = this.page.ensureSendBag();
			if (sendBag) {
				sendBag.saveDataChange(this.page, this.articleParent, this.$item.$bind, newValue);
			}
		}
		return errors.length == 0;
	},
	onInputValidate: function(event, notify) {
		var newValue = this.getDataValue(event);
		if (notify || (newValue != this.currentValue)) {
			this.notifyFieldChange(newValue);
		}
	},
	onInputChange: function(input, event) {
		this.dirty(true);
		this.onInputValidate(event);
	},
	notifyFieldChange: function(newValue, validated) {
		var self = this;
		self.currentValue = newValue;
		if (validated || self.validate(newValue)) {
			self.articleParent.dataset[self.$item.$bind] = self.currentValue;
			self.page.externalAdapter.onFieldNotifyChange({
				field: self,
				doEvent: function() {
					if (self.articleParent.onNotifyDataChange ? self.articleParent.onNotifyDataChange(self, self.currentValue) : true) {
						self.page.notifyDataChange(self, self.currentValue);
					}
				}
			});
		}
	},
	toggleEditMode: function($isEditMode) {
		fieldHelper.toggleEditMode(this, $isEditMode);
	},
	setMenus: function(metaData) {
		// in order not to show menu menu picker for unit ref field
		if (this.$item.$isUnitField) {
			if (this.$item.$isEditMode) {
				this.setMenusBox(metaData);
			}
		} else {
			// regular cases
			this.setMenusBox(metaData);
		}
	},
	setMenusBox: function(metaData) {
		if (!this.$item.$isFilterMode && !this.$item.$isExpressionChild) {
			var $menus = metaData.$item || metaData;
			if ($menus.$links !== undefined || $menus.$actions !== undefined) {
				if ($menus.$links === null) {
					if (this.menusBox) {
						this._ensureMenuPickerVisible(true);
						this.menusBox.unload();
						delete this.menusBox;
					}
				} else {
					if (!this.menusBox) {
						this._createMenusBox();
					}
					this.menusBox.ensurePrivateMenus($menus);
				}
			}
		}
	},
	filterMenu: function($bind) {
		switch ($bind) {
			case "$details":
				if (!this.$isDetailLinkIgnore) {
					return false;
				}
				break;
			case "$tunnel":
				return false; //this.$item.$inplace && !this.$item.$isFilterMode;
			case "$lookup":
			case "$select":
				return false;
			case "$lazyload":
				this.menusBox.isLazyLoad = true;
				return false;
		}
		return true;
	},
	_createMenusBox: function() {
		this.menusBox = this.page.loadNewItem(this._input ? this.fieldValue : this._dataValue, {
			$isOwner: true,
			$noText: true,
			$title: this.localize.fieldActions,
			$id: this.id + "-menu-picker",
			$skin: "s-field-context-menus",
			$itemSkin: "s-record-menus-link",
			$category: "menus",
			$isTitlePicker: true,
			$isBoxCollapsable: true,
			$isPopupContent: true
		}, this.articleParent);
		this.menusBox.contextField = this;
	},
	_isShowMenuPicker: function() {
		var show = (this.$isEditMode || (this.currentValue != null));
		return (show && (this.menusBox.isLazyLoad || this.menusBox.$item.$layout.$items.length > 0));
	},
	_ensureMenuPickerVisible: function(isRemoved) {
		var show;
		if (this.menusBox) {
			show = this._isShowMenuPicker();
			if (show && !this.menusBox.$isPickerVisible) {
				this.menusBox.$isPickerVisible = true;
				this.menusBox._item.style.display = "";
				if (this.boxPickers) {
					this.boxPickers.style.paddingRight = "18px";
				}
				if (this.$isDisabled) {
					this.menusBox._item.style.visibility = "hidden";
				}
				this._updateBoxPickerPadding(true);
			}
		}
		if (isRemoved || show === false) {
			if (this.boxPickers) {
				this.boxPickers.style.paddingRight = "";
			}
			if (this.menusBox) {
				this.menusBox._item.style.display = "none";
				if (this.menusBox.$isPickerVisible) {
					this.menusBox.$isPickerVisible = false;
					this._updateBoxPickerPadding(false);
				}
			} else {
				this._updateBoxPickerPadding(false);
			}
		}
	},
	ensureLayoutMode: function() {
		if (this.layoutParent) {
			this.layoutParent.ensureLayoutSlot(this);
		}
		if (this.page.authoringPage) {
			this.page.authoringPage.toggleItemAuthoring(this, true);
		}
	},
	dispose: function() {
		this.releaseMode(true);
		if (this.$item) {
			if (this.$item.$isAutoSize) {
				this._bindAutoSize(false);
			}
		}
		if (this.awAddin) {
			document.controller.disposeObject(this.awAddin);
		}
		this.localize = null;
		this.awAddin = this.diagSeverities = this.layoutParent = this.authoringNode = this.boxParent = this.articleParent = null;
		this.page = this.boxPickers = this.domValueSlot = null;
		this.$field = this.$item = this.boxParent = null;
		this.layoutSlot = this.$$item = this._domItem = this._dataValue = null;
		this._core = this.$$input = this._input = this.currentValue = this.menusBox = this.popupDiagnose = this.popupDiagnoseBody = this.popupDiagnoseDiag = null;
		this._autoCompleteList = null;
	}

});