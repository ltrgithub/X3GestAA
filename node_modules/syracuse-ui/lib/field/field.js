"use strict";
var helpers = require('syracuse-core/lib/helpers');
var MenusController = require('syracuse-ui/lib/field/menus/menusController').MenusController;
var locale = require('syracuse-core/lib/locale');
var fieldHelper = require('./fieldHelper');
var AreaScroller = require('syracuse-ui/lib/site/authoring/areaScroller').AreaScroller;

function Field(){
}

exports.Field = helpers.defineClass(Field, null, {
    applyDesignMetaData: function(metaData, onAuthoring){
        if (metaData.$isHidden !== undefined) {
            this.setState(metaData);
        }
        if (onAuthoring !== false) {
            if (metaData.$isTopLabelAlignment !== undefined) {
                var curItemCss = this.$skin;
                if (this.$item.$isTopLabelAlignment) {
                    curItemCss += "-top";
                }
                this.$item.$isTopLabelAlignment = metaData.$isTopLabelAlignment;
                var newItemCss = this.$skinField;
                if (this.$item.$isTopLabelAlignment) {
                    newItemCss += "-top";
                }
                this._domItem.className = this._domItem.className.replace(curItemCss, newItemCss);
                if (this.domTitle) {
                    this.domTitle.className = this.domTitle.className.replace(curItemCss + "-title", newItemCss + "-title");
                }
                this._core.className = this._core.className.replace(curItemCss + "-core", newItemCss + "-core");
            }
        }
        if (metaData.$isTitleHidden !== undefined) {
            this.$item.$isTitleHidden = metaData.$isTitleHidden;
            if (!metaData.$isTitleHidden && !this.domTitle) {
                this.appendTitle();
                this.$$item.prepend(this.domTitle);
                this.setTitle(this.getTitle());
            }
        }
        if (this.domTitle) {
            if (metaData.$isTitleHidden !== undefined) {
                this.hideTitle(metaData.$isTitleHidden);
            }
            if (metaData.$isRightTextLabelAlignment !== undefined) {
                this.domTitle.style.textAlign = (this.$item.$isRightTextLabelAlignment = metaData.$isRightTextLabelAlignment) ? "right" : "left";
            }
            if (metaData.$labelWidth !== undefined) {
                this.domTitle.style.width = metaData.$labelWidth;
            }
        }
    },
    
    onInputFocusin: function(input, event){
        if (this.articleParent.onInputFocusin) {
            this.articleParent.onInputFocusin(this);
        }
        this.hasFocus = true;
        document.site.onChildFieldFocus(this.boxParent, true);
    },
    onInputFocusout: function(input, event){
        if (this.articleParent.onInputFocusout) {
            this.articleParent.onInputFocusout(this);
        }
        this.hasFocus = false;
        this.onFieldMouseEvent({
            type: "mouseleave"
        });
        document.site.onChildFieldFocus(this.boxParent, false);
    },
    getLocalize: function(){
        if (!this._localize) {
            this._localize = locale.resources(module)()
        }
        return this._localize;
    },
    getArticle: function(){
        if (!this.articleParent) {
            this.articleParent = this.boxParent.getArticle();
        }
        return this.articleParent;
    },
    appendDetailLink: function(value, $detailsLink){
        if (!this.$isDetailLinkIgnore) {
            if (this.boxPickers) {
                $(this.boxPickers).detach();
            }
            document.site.emptyDom(this.fieldValue)
            this.page.loadNewItem($(this.fieldValue), {
                $bind: "$detail",
                $title: $detailsLink.$title = value + "",
                $category: "link",
                $skin: this.$skin + "-link"
            }, this.boxParent).setMenu($detailsLink);
            if (this.boxPickers) {
                this.fieldValue.appendChild(this.boxPickers);
            }
        }
    },
    hideTitle: function($isTitleHidden){
        this.domTitle.style.display = $isTitleHidden ? "none" : "";
    },
    _createValueContainer: function(){
        this.domValueSlot = document.createElement("div");
        this.domValueSlot.className = this._$cssField + "-value";
        this.$$dataValue = $(this._dataValue = this.domValueSlot);
        if (this.$item.$inplace) {
            this._core = this.domValueSlot;
            this._domItem.appendChild(this.domValueSlot);
        }
        else {
            this.domValueSlot = document.createElement("div");
            this.domValueSlot.className = this._$cssField + "-value-slot";
            this.domValueSlot.appendChild(this._dataValue);
            
            this._core = document.createElement("div");
            this._core.className = this._$cssTopField + "-core";
            this._core.appendChild(this.domValueSlot);
            this._domItem.appendChild(this._core)
        }
        if (this.$isEditMode) {
            this.fieldValue = this._dataValue;
        }
        else {
            this._dataValue.appendChild(this.fieldValue = document.createElement("div"));
            this.fieldValue.className = this._$cssField + "-value-read";
        }
    },
    _initCss: function(){
        this._$cssTopField = this._$cssField = (this.$item.$css) ? (this.$item.$css + " " + this.$skinField) : this.$skinField;
        if (this.$item.$isTopLabelAlignment) {
            this._$cssTopField += "-top";
        }
    },
    ensureEditMode: function(){
        this.$isEditMode = this.$item.$isEditMode;
        if (this.$isEditMode === undefined) {
            this.$isEditMode = this.articleParent.$isEditMode;
        }
    },
    loadBox: function($$item){
        this.boxPickersPadding = 0;
        this.articleParent = this.boxParent.getArticle();
        this.ensureEditMode();
        this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
        if (this.$item.$inplace) {
            this.arrayLevel = "cell";
        }
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
        }
        this._initCss();
        
        if (this.$isEditMode) {
            this.inputId = this.id + "-input";
        }
        this.$$item = $$item || this.$$container;
        if (!this.$item.$inplace) {
            this.$$item = $$item || $(document.createElement("div")).appendTo(this.$$item);
        }
        (this._domItem = this.$$item[0]).className += " " + this._$cssTopField;
        
        this.$rootLinks = this.$field;
        if (this.initialize) {
            this.initialize();
        }
        
        this.appendTitle();
        
        this._createValueContainer();
        this.render();
        
        this._domItem.setAttribute("data-s-field", this.id);
        this._domItem.setAttribute("data-s-field-item", this.$item.$bind || "");
        if (this._input) {
            if (this.$item.$isBorderVisible) {
                this._input.className += " s-input-border";
            }
            if (this.$item.$isCellChild) {
                this._input.style.width = "100%";
                this._dataValue.style.width = "100%";
            }
            this._input.setAttribute("data-s-field", this.id);
            this._input.setAttribute("id", this.inputId);
        }
        if (!this.$item.$inplace && !this.$isEditMode) {
            this.domValueSlot.style.display = 'inline-block';
        }
        
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setHelp(this.$item.$help || this.$field.$help);
        this.applyDesignMetaData(this.$item, false);
        if (this.layoutParent) {
            this.layoutParent.setFieldWidth(this);
        }
        this.setState(this.$field);
        if (this.$field.$fieldStyle || this.$field.$valueStyle || this.$field.$titleStyle) {
            this.applyFieldStyle(this.$field);
        }
        this.articleParent.bind(this, this.$item.$bind);
        this.setMenus(this.$field);
        this.applyAutoSize(this.$item);
        this._ensureMenuPickerVisible();
        if (document.site.developpementMode) {
            fieldHelper.appendQualityAtt(this, this._dataValue);
            if (this._input) {
                fieldHelper.appendQualityAtt(this, this._input);
            }
        }
        if (!this.page.externalAdapter.applyDesignMetaExt(this, this.$field, this.$item)) {
            //  Process meta extension here, if necessary.
        }
    },
    applyFieldStyle: function(metaData){
        fieldHelper.applyFieldStyle(this, metaData);
    },
    applyAutoSize: function(state){
        if (state.$isAutoSize !== undefined) {
            this._bindAutoSize(state.$isAutoSize);
            this.$item.$isAutoSize = state.$isAutoSize;
        }
    },
    releaseMode: function(onDispose){
        delete this.domTitle;
        delete this.$$mandatoryFlag;
        delete this.fieldValue;
        delete this._description;
        delete this._helpFlag;
        if (onDispose) {
            if (this.menusController) {
                document.controller.disposeObject(this.menusController);
                delete this.menusController;
            }
            
        }
    },
    _bindAutoSize: function(bind){
        document.site[bind ? "addResizeListener" : "removeResizeListener"](this);
    },
    render: function(){
        if (this.$isEditMode) {
            if (this.$item.$rows) {
                this._input = document.createElement("textarea");
                this.isTextArea = true;
                this._input.setAttribute("rows", this.$item.$rows);
            }
            else {
                if (this.createHtmlInput) {
                    this._input = this.createHtmlInput();
                }
                else {
                    this._input = document.createElement("input");
                    this._input.setAttribute("type", "text");
                }
            }
            this.$$input = $(this._input);
            
            this._input.className = this.$skinInput;
            if (this.$item.$css) {
                this._input.className += " " + this.$item.$css;
            }
            this.fieldValue.appendChild(this._input);
            this._appendLinksPicker();
        }
    },
    _appendSpecialPicker: function(pickerType){
        var picker = this.createPicker(pickerType);
        picker.setAttribute("data-s-article", this.articleParent.id);
        picker.setAttribute("data-s-field", this.id);
        if (this.$item.$inplace && !this.$item.$isFilterMode) {
            this.ensureMenuController().appendPicker(picker);
        }
        else {
            this.appendToPickerBox(picker);
        }
    },
    _appendLinksPicker: function(){
        if (this.$rootLinks.$links) {
            if (this.$rootLinks.$links.$suggest) {
                this._isAutoComplete = true;
            }
            if (this.$rootLinks.$links.$tunnel) {
                this._appendSpecialPicker("tunnel");
            }
            if (this.$rootLinks.$links.$lookup) {
                this._appendSpecialPicker("lookup");
            }
        }
    },
    _onAutoCompleteOpen: function(){
        return this._autoCompleteList = document.createElement("div");
    },
    _onAutoCompleteClose: function(){
        if (this._autoCompleteList) {
            document.site.emptyDom(this._autoCompleteList);
            this._autoCompleteList = null;
        }
    },
    toggleAutoCompleteList: function(show){
        var self = this;
        if (!self._autoCompletePopup && show !== false) {
            self.$$item.attr("id", self.id);
            
            self.focus();
            self._autoCompletePopup = self.boxParent.openDialog({
                content: self,
                $dialogMode: "popup",
                $$dialog: $(self._onAutoCompleteOpen()),
                position: {
                    my: "left top",
                    at: "left bottom",
                    of: self.$$input
                },
                onClose: function(){
                    self._autoCompletePopup = null;
                    self._onAutoCompleteClose();
                }
            });
        }
        else {
            if (self._autoCompletePopup) {
                if (show) {
                    self._autoCompletePopup.resize();
                }
                else {
                    self._autoCompletePopup.close();
                }
            }
        }
    },
    onInputKeydown: function(input, event){
        if (this._isAutoComplete) {
            var self = this;
            clearTimeout(self._searching);
            self._searching = setTimeout(function(){
                // only search if the value has changed
                if (self.term !== self.getDataValue()) {
                    self.selectedItem = null;
                    //self.search(null, event);
                    self.toggleAutoCompleteList();
                }
            }, 300);
        }
    },
    removeFromPickerBox: function(picker){
        if (picker) {
            (this._input ? this._input : this.fieldValue).style.paddingRight = (this.boxPickersPadding -= 18) + "px";
            document.site.removeDomChild(picker);
            if (this.boxPickersPadding == 0 && this.boxPickers) {
                document.site.removeDomChild(this.boxPickers);
                delete this.boxPickers;
            }
        }
    },
    appendToPickerBox: function(picker, isMenu){
        if (isMenu) {
            if (this._input) {
                this.fieldValue.appendChild(this.menuPicker = picker);
            }
            else {
				debugger;
                this._dataValue.appendChild(this.menuPicker = picker);
            }
            if (this.boxPickers) {
                this.boxPickers.style.paddingRight = "18px";
            }
            if (this.$isDisabled) {
                this.menuPicker.style.visibility = "hidden";
            }
        }
        else {
            if (!this.boxPickers) {
                this.boxPickers = document.createElement("div");
                if (this._input) {
                    this.fieldValue.appendChild(this.boxPickers).className = this.$skin + "-pickers";
                }
                else {
                    this._dataValue.appendChild(this.boxPickers).className = this.$skin + "-pickers";
                }
                if (this.boxPickersPadding) {
                    this.boxPickers.style.paddingRight = this.boxPickersPadding + "px";
                }
                if (this.$isDisabled || this.$isReadOnly) {
                    this.boxPickers.style.visibility = "hidden";
                }
            }
            this.boxPickers.appendChild(picker);
        }
        (this._input ? this._input : this._dataValue).style.paddingRight = (this.boxPickersPadding += 18) + "px";
    },
    createPicker: function(pickerType){
        var btn = document.createElement("a");
        var css = this.$skin + "-" + pickerType;
        if (this.$item.$css) {
            css = this.$item.$css + " " + css;
        }
        btn.className = css + "-picker";
        btn.setAttribute("data-s-picker", pickerType);
        return btn;
    },
    _doClickPicker: function(){
    
    },
    onFieldMouseEvent: function(event){
        if (this.menuPicker) {
            document.site.toggleClass(this.menuPicker, "s-mouseenter", (event.type == "mouseenter"));
        }
        if (this.boxPickers) {
            document.site.toggleClass(this.boxPickers, "s-mouseenter", (event.type == "mouseenter"));
        }
    },
    onFieldInputEvent: function(event){
        var self = this;
        self.page.externalAdapter.onFieldEvent({
            field: self,
            event: event,
            doEvent: function(){
                //    onInputFocusin,onInputFocusout,onInputKeyup,onInputKeydown,onInputKeypress: function(input, event){
                var fnct = "onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1);
                if (self[fnct]) {
                    self[fnct](event.target, event);
                }
            }
        });
    },
    onClickPicker: function(btn){
        var self = this;
        document.site.onBeforClick();
        if (!self.authoringNode && !self.$isDisabled) {
            var pickerType = btn.getAttribute("data-s-picker");
            self.page.externalAdapter.onFieldClickPicker({
                field: self,
                pickerType: pickerType,
                doEvent: function(options){
                    switch (btn.getAttribute("data-s-picker")) {
                        case "lookup":
                            self.focus();
                            var $lookup = self.$lookup || self.$rootLinks.$links.$lookup;
                            self.boxParent.openDialog({
                                article: self.articleParent,
                                $url: $lookup.$url,
                                onSelectRecord: function(selectedRecords){
                                    if (!self.$isDisabled && !self.$isReadOnly) {
                                        var $result = $lookup.$result;
                                        var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
                                        self.setDataValue($result ? record.dataset[$result] : record.dataset);
                                        self.focus();
                                        self.notifyFieldChange(self.currentValue);
                                    }
                                }
                            });
                            break;
                        case "tunnel":
                            break;
                        case "menus":
                            //self.menusController.contextMenu
                            break;
                        default:
                            self._doClickPicker(btn, options);
                            break;
                    }
                }
            });
        }
    },
    getDefaultTitle: function(){
        return this.getLocalize().f_defaultTitle;
    },
    getTitle: function(){
        if (this.titleText == null && this.$titleValue) {
            this.titleText = this.$titleValue || "";
            if (this.titleText.length > 0 && this.titleText[1] == "@") {
                this.titleText = this.boxParent._renderExpression(this.titleText);
            }
        }
        return this.titleText || "";
    },
    setTitle: function($title){
        this.$titleValue = $title;
        delete this.titleText;
        if (this.domTitle) {
            this.domTitle.textContent = this.getTitle();
        }
        else {
            if (this._input && this.$item.$isPlaceHolder) {
                this._input.setAttribute("placeholder", this.getTitle());
            }
        }
    },
    appendTitle: function(){
        if (!(this.$item.$inplace || this.$item.$isTitleHidden)) {
            this.domTitle = document.createElement("label");
            this.domTitle.className = this._$cssTopField + "-title";
            if (this.inputId) {
                this.domTitle.setAttribute("for", this.inputId);
            }
            this._domItem.appendChild(this.domTitle);
        }
    },
    _ensureMenuPickerVisible: function(){
        if (this.menusController) {
            this.menusController.ensurePickerVisible(this.$isEditMode || (this.currentValue != null));
        }
    },
    
    setHelp: function($help){
        return;
        if ($help != undefined) {
            this.$help = $help;
            if (this.domTitle && this.getTitle().length > 0) {
                if (this.$help) {
                    if (!this._helpFlag) {
                        this._helpFlag = document.createElement("a");
                        this._helpFlag.className = "s-field-help-flag";
                    }
                }
                else {
                    if (this._helpFlag) {
                        document.site.removeDomChild(this._helpFlag);
                        delete this._helpFlag;
                    }
                }
            }
        }
    },
    setDescription: function($description){
        if ($description !== undefined) {
            var text = this.$description = $description || "";
            if (text.length > 0) {
                if (text[1] == "@") {
                    text = this.boxParent._renderExpression(text);
                }
                if (!this.$item.$inplace) {
                    if (!this._description) {
                        this._description = document.createElement("div");
                        this._description.className = this.$skinField + "-desc";
                        $(this.domValueSlot).after(this._description);
                    }
                    this._description.textContent = text;
                    this._description.style.display = "";
                }
            }
            else {
                if (this._description) {
                    this._description.style.display = "none";
                }
            }
        }
    },
    setState: function(state){
        if (!this.$item.$isFilterMode) {
            if (state.$isMandatory !== undefined) {
                this.$isMandatory = state.$isMandatory;
                if (this.$isEditMode) {
                    if (this.domTitle && this.getTitle().length > 0) {
                        document.site.toggleClass(this.domTitle, "s-mandatory", state.$isMandatory);
                        if (state.$isMandatory) {
                            if (!this._mandatoryFlag) {
                                this._mandatoryFlag = document.createElement("div");
                                this._mandatoryFlag.className = "s-field-mandatory-flag";
                                this.domTitle.appendChild(this._mandatoryFlag);
                                if (document.site.developpementMode) {
                                    this._dataValue.setAttribute("data-s-q-mandatory", true);
                                    if (this._input) {
                                        this._input.setAttribute("data-s-q-mandatory", true);
                                    }
                                }
                            }
                        }
                        else {
                            if (this._mandatoryFlag) {
                                document.site.removeDomChild(this._mandatoryFlag);
                                delete this._mandatoryFlag;
                                if (document.site.developpementMode) {
                                    this._dataValue.removeAttribute("data-s-q-mandatory");
                                    if (this._input) {
                                        this._input.removeAttribute("data-s-q-mandatory");
                                    }
                                }
                            }
                        }
                    }
                    document.site.toggleClass(this._dataValue, "s-mandatory", state.$isMandatory);
                }
            }
            if (state.$isDisabled !== undefined) {
                this.$isDisabled = state.$isDisabled;
                this.$$item.attr("disabled", state.$isDisabled);
                if (this._input) {
                    document.site.disableItem(this._input, state.$isDisabled);
                }
                if (this.domTitle) {
                    document.site.disableItem(this.domTitle, state.$isDisabled);
                }
                if (this._description) {
                    document.site.disableItem(this._description, state.$isDisabled);
                }
                document.site.disableItem(this._dataValue, state.$isDisabled);
                if (this.boxPickers) {
                    this.boxPickers.style.visibility = (this.$isDisabled || this.$isReadOnly) ? "hidden" : "";
                }
                if (this.menuPicker) {
                    this.menuPicker.style.visibility = this.$isDisabled ? "hidden" : "";
                }
            }
            if (state.$isReadOnly !== undefined) {
                this.$isReadOnly = state.$isReadOnly;
                if (this._onSetReadOnly) {
                    this._onSetReadOnly(state.$isReadOnly);
                }
                if (this.boxPickers) {
                    this.boxPickers.style.visibility = (this.$isDisabled || this.$isReadOnly) ? "hidden" : "";
                }
            }
        }
        if (state.$isHidden !== undefined) {
            this.$isHidden = this.$item.$isHidden = state.$isHidden; //at root for fusion
            if (this.$item.$inplace) {
                this.$$dataValue.toggle(!state.$isHidden);
            }
            else {
                this.$$item.toggle(!state.$isHidden);
            }
        }
    },
    _onSetReadOnly: function($isReadOnly){
        if (this._input) {
            if (this.$isReadOnly) {
                this._input.setAttribute("readonly", "readonly");
            }
            else {
                this._input.removeAttribute("readonly");
            }
            document.site.toggleClass(this._input, "s-readonly", this.$isReadOnly);
        }
    },
    setDataBind: function(value, record, metaData){
        if (this.page.externalAdapter.setDataBind(this, value, record, metaData)) {
            if (value !== undefined) {
                this.dirty(false);
                this.setDataValue(value, record);
            }
            this.applyMetaData(metaData);
        }
    },
    setDataValue: function(value, record){
        this.currentValue = value;
        if (this.$isEditMode) {
            this._input.value = this.currentValue || "";
        }
        else {
            document.site.emptyDom(this.fieldValue);
            if (value && this.$rootLinks.$links && this.$rootLinks.$links.$details && !this.$item.$isMenusDisabled) {
                this.appendDetailLink(value, this.$rootLinks.$links.$details);
            }
            else {
                this.fieldValue.textContent = value;
            }
        }
    },
    dirty: function(set){
        if (set !== undefined) {
            this._isDirty = set;
        }
        else 
            return this.isTextArea ? this._isDirty : true;
    },
    //old getinputValue
    getDataValue: function(){
        return this.getInputValue ? this.getInputValue() : this._input.value;
    },
    
    /// -------------
    /// ## getCaretPosition()
    /// 
    /// Gets the current 0 based caret position in the input.
    /// 
    getCaretPosition: function(){
        return this.$item && this.$item.$rows && this.$$input && (this.$$input.prop("selectionDirection") === "forward" ? this.$$input.prop("selectionEnd") : this.$$input.prop("selectionStart"));
    },
    
    setMenus: function(metaData){
        if (!this.$item.$isFilterMode && !this.$item.$isExpressionChild) {
            if ((metaData.$links !== undefined) || (metaData.$actions !== undefined)) {
                this.ensureMenuController().setMenus(metaData);
            }
        }
    },
    ensureMenuController: function(){
        if (!this.menusController) {
            (this.menusController = new MenusController()).load(this);
        }
        return this.menusController;
    },
    applyMetaData: function(metaData, options){
        if (metaData) {
            if (metaData.$isEditMode !== undefined) {
                this.toggleEditMode(metaData.$isEditMode);
            }
            if (metaData.$title !== undefined) {
                this.setTitle(metaData.$title);
            }
            if (metaData.$description !== undefined) {
                this.setDescription(metaData.$description);
            }
            if (metaData.$help !== undefined) {
                this.setHelp(metaData.$help);
            }
            this.setState(metaData);
            if (metaData.$diagnoses !== undefined) {
                if (!this.$item.$isExpressionChild) {
                    document.site.showDiagnoses({
                        field: this,
                        $diagnoses: metaData.$diagnoses
                    }, this.boxParent, options);
                }
            }
            this.setMenus(metaData);
            if (metaData.$links) {
                if (this.$isEditMode) {
                    if (metaData.$links.$lookup) {
                        if (!this.$lookup) {
                            this._applyLookUpLinkChange(metaData.$links.$lookup);
                        }
                    }
                }
                else {
                    if (metaData.$links.$details) {
                        if (this.currentValue && !this.$item.$isMenusDisabled) {
                            this.appendDetailLink(this.currentValue, metaData.$links.$details);
                        }
                    }
                }
            }
            
            if ((metaData.$type !== undefined) && (this.$field.$type != metaData.$type)) {
                fieldHelper.changeType(metaData.$type, this);
            }
            if (metaData.$fieldStyle || metaData.$valueStyle || metaData.$titleStyle) {
                this.applyFieldStyle(metaData);
            }
        }
        this._ensureMenuPickerVisible();
    },
    
    _applyLookUpLinkChange: function($newLookup){
        var self = this;
        if (!self.$lookup) {
            if (self.$rootLinks.$links && self.$rootLinks.$links.$lookup) {
                self.$lookup = helpers.object.clone(self.$rootLinks.$links.$lookup, true);
            }
            else {
                self.$lookup = $newLookup;
                return;
            }
        }
        Object.keys($newLookup).forEach(function($property){
            self.$lookup[$property] = $newLookup[$property];
        });
    },
    focus: function(){
        var ret = {
            "noFocusable": true
        };
        if (this._input) {
            this._input.focus();
            if ((this.$isHidden === undefined || !this.$isHidden) && (this.$isDisabled === undefined || !this.$isDisabled) && (this.$isEditMode === undefined || this.$isEditMode)) {
                ret = null;
            }
        }
        else {
            var scroller = new AreaScroller(document.site.$$body);
            scroller.scrollToTarget(this.$$item, true);
        }
        return ret;
    },
    isEmpty: function(){
        return !this.currentValue;
    },
    getDataType: function(){
        return this.$field;
    },
    toggleDiagnose: function(css, show){
        fieldHelper.toggleDiagnose(this, css, show);
    },
    drawDiagnose: function($diagnose, severityGroup){
        fieldHelper.drawDiagnose(this, $diagnose, severityGroup);
    },
    emptyDiagnoseSlot: function(){
        fieldHelper.emptyDiagnoseSlot(this);
    },
    ensureDiagnoseSlot: function(){
        fieldHelper.ensureDiagnoseSlot(this);
    },
    showErrors: function(errors, options){
        fieldHelper.showErrors(this, errors, options);
    },
    showDiagnoses: function(diagnoses, options){
        fieldHelper.showDiagnoses(this, diagnoses, options);
    },
    validate: function(newValue, errors){
        if (this.$item.$isFilterMode) {
            return true;
        }
        var value = newValue;
        if (value === undefined) {
            value = this.currentValue;
        }
        if (value == null) {
            value = "";
        }
        value = value.toString();
        var dataType = this.getDataType();
        errors = errors || [];
        if (dataType.$isMandatory && value == '' && this.page.externalAdapter.notifyFldMandatoryErr()) {
            errors.push("value is mandatory (client)");
        }
        if (dataType.$pattern && value) {
            var match = new RegExp(dataType.$pattern, "i").test(value);
            if (!match) { //(match && match.index == 0 && match[0].length == value.length)) {
                errors.push(this._localize.f_invalidValue + " : " + value);
            }
        }
        if (this.validateType) {
            this.validateType(errors, value);
        }
        
        if (this.articleParent.onFieldValidate) {
            this.articleParent.onFieldValidate(this, value, errors);
        }
        if (errors.length > 0 || this.$displayedDiagnoses) {
            this.showErrors(errors);
            var saveLinks = this.articleParent.menuItems.$save;
            if (saveLinks && saveLinks.length > 0) {
                if (!saveLinks[0].$isDisabled) {
                    this.$isServerSaveEnabled = true;
                }
                else {
                    if (this.$isServerSaveEnabled) {
                        this.$isServerSaveEnabled = false;
                    }
                }
                if (this.$isServerSaveEnabled !== undefined) {
                    this.articleParent.applyChange({
                        $actions: {
                            $save: {
                                $isDisabled: this.$isServerSaveEnabled
                            }
                        }
                    });
                }
            }
        }
        return errors.length == 0;
    },
    onInputValidate: function(event, notify){
        var newValue = this.getDataValue(event);
        if (notify || (newValue != this.currentValue)) {
            this.notifyFieldChange(newValue);
        }
    },
    onInputChange: function(input, event){
        this.dirty(true);
        if (this.$item.$validationTrigger !== 'keyup') {
            this.onInputValidate(event);
        }
    },
    onInputKeyup: function(input, event){
        if (this.$item.$validationTrigger == 'keyup' && event.keyCode == 13) {
            this.onInputValidate(event, true);
        }
    },
    notifyFieldChange: function(newValue, validated){
        var self = this;
        self.currentValue = newValue;
        if (validated || self.validate()) {
            self.articleParent.dataset[self.$item.$bind] = self.currentValue;
            self.page.externalAdapter.onFieldNotifyChange({
                field: self,
                doEvent: function(){
                    if (self.articleParent.onNotifyDataChange ? self.articleParent.onNotifyDataChange(self, self.currentValue) : true) {
                        self.page.notifyDataChange(self, self.currentValue);
                    }
                }
            });
        }
    },
    toggleEditMode: function($isEditMode){
        fieldHelper.toggleEditMode(this, $isEditMode);
    },
    dispose: function(){
        this.releaseMode(true);
        if (this.$item) {
        
            if (this.$item.$isAutoSize) {
                this._bindAutoSize(false);
            }
        }
        delete this.layoutParent;
        delete this.authoringNode;
        delete this.boxParent;
        delete this.articleParent;
        delete this.page;
        delete this.boxPickers;
        delete this.domValueSlot;
        
        delete this.$field;
        delete this.$item;
        delete this.boxParent;
        
        
        this.$$container = this.$$item = this._domItem = this.$$dataValue = this._dataValue = null;
        this._core = this.$$input = this._input = this.currentValue = null;
        this._autoCompleteList = null;
    }
    
});
