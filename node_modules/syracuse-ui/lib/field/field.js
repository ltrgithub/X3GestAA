"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _contentEditable = require('syracuse-ui/lib/field/helpers/contentEditable');

var _minCardFieldWidth = 8; //for padding=4*2
function _addEscapePicker(field) {
	if (!field.isEscapePickerDisabled && field.input && !field.$isReadOnly && field.page.isFusionPage && !field.$item.$inplace) {
		syra_menus.button.addFieldPicker({
			parent: field,
			pickerId: "escape",
			fontIcon: "reload",
			text: syra_local.fieldEscape,
			shortCutTip: syra_shortCuts.tip.escape,
			btnclick: function(event) {
				syra_shortCuts.applyEscape(this.parent, null, event);
				this.parent.focus();
			}
		});
	}
}

function _ensureSectionOpened(section) {
	while (section) {
		section.ensureOpened && section.ensureOpened();
		section = section.boxParent;
	}
}

function Field() {}

exports.Field = helpers.defineClass(Field, null, {
	applyDesignMetaData: function(metaData, designing) {
		return syra_fields.applyDesignMetaData(this, metaData, designing);
	},
	onInputFocusin: function(input, event) {
		if (this.$item.$contentEditable) {
			_contentEditable.onInputFocusin(this, input, event);
		}
		if (this.articleParent.onInputFocusin) {
			this.articleParent.onInputFocusin(this);
		}
		this.hasFocus = true;
		if (this.diagsSlot) {
			this.page.diagnosesPanel.walkToField(0, this);
		}
	},
	onInputClick: function(input, event) {
		this.onInputFocusin(input, event);
	},
	onInputFocusout: function(input, event) {
		if (this.$item.$contentEditable) {
			_contentEditable.onInputFocusout(this, input, event);
		}
		if (this.articleParent.onInputFocusout) {
			this.articleParent.onInputFocusout(this);
		}
		this.hasFocus = false;
		this.onItemInOut(false);
	},


	loadBox: function() {
		this.isTabletDevice = syra_site.isTabletDevice;
		syra_fields.ensureEditMode(this);
		this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
		syra_menus.menus.initialize(this);
		this.$mnPickersCss = this.$item.$mnPickersCss;
		if (!this.$mnPickersCss) {
			this.$mnPickersCss = this.$skin + (this.$isEditMode ? "-edit-picker" : "-read-picker");
		}
		if (this.articleParent.isRecordArticle) {
			this.arrayLevel = "cell";
		}
		if (this.$isEditMode) {
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
		}
		syra_fields.initCss(this);

		if (this.$isEditMode) {
			this.inputId = this.id + "-input";
		}
		this.domItem = this.layoutSlot;
		if (!this.$item.$inplace) {
			this.domItem = this.layoutSlot.appendChild(document.createElement("div"));
		}

		if (this.initialize) {
			this.initialize();
		}
		if (this.$isDetailLinkDisabled === undefined) {
			this.$isDetailLinkDisabled = this.$item.$isDetailLinkDisabled;
		}

		syra_fields.addTitle(this);
		if (this.addValueSlot) {
			this.addValueSlot();
		} else {
			syra_fields.addValueSlot(this);
		}

		this.render();
		this.setMaxLength();
		this.isField = true;
		this.domItem.syrainout = this.domItem.syraItem = this.id;
		this.domItem.syra_field_bind = this.$item.$bind || "";

		if (this.input) {
			this.input.syraOnClick = "onInputFieldClick";
			this.input.id = this.inputId;
		}
		this.setTitle(this.$item.$title || this.$field.$title);

		syra_fields.setDescription(this, this.$item.$description || this.$field.$description);
		this.applyDesignMetaData(this.$item, false);
		this.setFieldWidth();

		this.setState(this.$field);
		syra_fields.advancedState.setState(this);
		if (this.$field.$fieldStyle || this.$field.$valueStyle || this.$field.$titleStyle) {
			if (this.page.externalAdapter.applyDesignStyle(this, this.$field, this.$item)) {
				syra_fields.applyCustomStyle(this, this.$field);
			}
		}
		syra_item.bind(this, this.$item.$bind);
		syra_menus.menus.applyChange(this, this.$field);
		syra_fields.ensureSectionVisibility(this);
		this.applyAutoSize(this.$item);
		this.isTabletDevice && _addEscapePicker(this);
		syra_fields.ensureLayoutMode(this);
	},
	onAddMenuPicker: function(btn) {
		this._dataValue.appendChild(btn.link);
	},
	setFieldWidth: function() {
		if (this.$isEditMode && !this.hasFreeWidth && !this.$item.$rows && !this.$item.$inplace && this._dataValue && !this.$item.$isAutoSizeDisabled) {
			this.widthValue = syra_fields.getCardFieldWidth(this.$field);
			if (this.input) {
				this.pickerCount = this.pickerCount || 0;
				if (this.$field.$item ? (this.$field.$links || this.$field.$actions) : (this.$field.$links || this.$field.$actions)) {
					this.pickerCount++;
					if (this.$field.$links && (this.$field.$links.$lookup || this.$field.$links.$select)) {
						this.pickerCount++;
					}
				}
				this.widthValue += (this.pickerCount * syra_menus.btnWidth) + _minCardFieldWidth; //for border + padding
				this._core.style.maxWidth = this.widthValue + "px";
			}
		}
	},
	applyAutoSize: function(state) {
		if (state.$isAutoSize !== undefined) {
			this.$item.$isAutoSize = state.$isAutoSize;
			if (state.$isAutoSize) {
				this.page.resizableList.add(this);
			} else {
				this.page && this.page.resizableList.remove(this);
			}
		}
	},
	render: function() {
		if (this.$isEditMode) {
			if (this.$item.$rows) {
				this.input = syra_dom.addTextArea();
				this.isTextArea = true;
				this.input.style.height = "auto";
				this.input.setAttribute("rows", this.$item.$rows);
				this.input.className = this.$skinInput;
			} else {
				if (this.$item.$contentEditable) {
					_contentEditable.render(this);
				} else {
					this.input = syra_dom.addInput(!this.$item.$isFilterMode ? this.$inputType : undefined);
					this.input.className = this.$skinInput;
				}
			}
			if (this.$item.$css) {
				this.input.className += " " + this.$item.$css;
			}
			this._dataValue.appendChild(this.input);
		}
	},
	setMaxLength: function() {
		if (this.$isEditMode && this.input) {
			this.$maxLength = this.$item.$maxLength || this.$field.$maxLength;
			if (this.$maxLength) {
				this.input.setAttribute("maxlength", this.$maxLength);
			}
		}
	},
	highlightOnEnter: function(on, event, target) {
		if (this.$isEditMode) {
			var target = (this.isTabletDevice && this.input) ? this.input : this._dataValue;
			syra_dom.toggleClass(target, "s-enter", on);
		}
	},
	onItemInOut: function(on, event, target) {
		this.highlightOnEnter(on, event, target);
		syra_tip.fieldTip.onItemInOut(this, on);
		syra_menus.button.highlightFieldPickers(this, on);
		if (this.isDiagnosePopup && this.page.diagnosesPanel) {
			this.page.diagnosesPanel.onFieldItemInOut(this, on);
		}
	},
	highlightOnFocus: function(on, event) {
		var target = (this.isTabletDevice && this.input) ? this.input : this._dataValue;
		syra_dom.toggleClass(target, "s-focus", on);
	},
	onFieldInputEvent: function(event, shortcuts) {
		var self = this;
		switch (event.type) {
			case "focusin":
			case "focusout":
				var isIn = event.type == "focusin";
				if (isIn) {
					_ensureSectionOpened(self);
					syra_fields.scrollToField(self);
					syra_quality.logFocus(self);
				}
				this.highlightOnFocus(isIn, event);
				if (self.articleParent && self.articleParent.isGridRecord) {
					self.articleParent.list.builder.onChildFieldFocus(self, isIn);
				}
				syra_menus.button.highlightFieldPickers(self, isIn);
				syra_fields.onFieldFocusChange(self, isIn, event);
				break;
			case "click":
				_ensureSectionOpened(self);
				break;
		}
		if (self.page && self.page.externalAdapter) {
			return self.page.externalAdapter.onFieldEvent({
				field: self,
				event: event,
				shortcuts: shortcuts,
				doEvent: function() {
					if (event.type == "change") {
						return syra_workingCopy.onInputChange(self, event);
					}
					//    onInputFocusin,onInputFocusout: function(input, event){
					var fnct = "onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1);
					if (self[fnct]) {
						return self[fnct](event.target, event);
					} else {
						return false;
					}
				}
			});
		}
	},
	getTitle: function() {
		return syra_fields.getTitle(this);
	},
	setTitle: function($title) {
		syra_fields.setTitle(this, $title);
	},
	setState: function(state) {
		syra_fields.setState(this, state);
	},
	_onSetReadOnly: function($isReadOnly) {
		if (this.input) {
			this.isInputReadOnly = $isReadOnly;
			if ($isReadOnly) {
				this.input.setAttribute("readonly", "readonly");
			} else {
				this.input.removeAttribute("readonly");
			}
			syra_dom.toggleClass(this.input, "s-readonly", this.$isReadOnly);
		}
		if (this.$isEditMode) {
			syra_dom.toggleClass(this._dataValue, "s-readonly", this.$isReadOnly);
		}

	},
	setDataBind: function(value, record, metaData, $bind) {
		if (this.page.externalAdapter.setDataBind(this, value, record, metaData)) {
			if (value !== undefined) {
				this.setDirty(false);
				this.setDataValue(value, $bind);
			}
			this.applyMetaData(metaData);
		}
	},
	setDataValue: function(value, $bind) {
		this.currentValue = value;
		if (this.$isEditMode) {
			this.setInputValue(this.currentValue || "");
			// quick hack for lookup in regular field
			if (this.currentValue && typeof(this.currentValue) == 'object' && this.$item && this.$item.$bind) {
				// crnit: even quicker hack for filter fields where we might have $low and $high suffixes
				var b = this.$item.$bind.replace("$low", "").replace("$high", "");
				this.setInputValue(syra_expression.parse(this.articleParent, "{" + b + "}", value));
				//this.currentValue.$value = this.getDataValue();
				this.currentValue = this.getDataValue();
			}
		} else {
			this.displayText = value;
			if (value && this.$menus && this.$menus.$details && !this.$item.$isDetailLinkDisabled) {
				syra_fields.addDetailLink(this, value, this.$menus.$details);
			} else {
				var htmlValue = syra_tip.utcTip.emphasis(value);
				if (!htmlValue && this.$item.$rows) {
					htmlValue = value;
				}
				if (htmlValue) {
					this._dataValue.innerHTML = syra_dom.formatHTMLText(htmlValue);
				} else {
					this._dataValue.textContent = value;
				}
			}
			syra_menus.pickers.menus.show(this);
		}
	},
	getDisplayText: function() {
		return this.currentValue || "";
	},
	setDirty: function(dirty) {
		this.dirty(dirty);
	},
	dirty: function(set) {
		if (set !== undefined) {
			this._isDirty = set;
		} else
			return this.isTextArea ? this._isDirty : true;
	},


	getDataValue: function() {
		return this.getInputValue();
	},
	getInputValue: function() {
		if (this.input) {
			var val;
			if (this.$item.$contentEditable) {
				val = _contentEditable.getInputValue(this);
			} else {
				val = this.input.value;
			}
			return val && val.trim();
		} else {
			return this.currentValue;
		}
	},
	setInputValue: function(val) {
		//val = val && val.trim && val.trim();
		if (this.$item.$contentEditable) {
			_contentEditable.setInputValue(this, val);
		} else {
			this.input.value = val;
		}
	},
	getCaretPosition: function() {
		if (this.input) {
			return this.$item && this.$item.$rows && (this.input.selectionDirection === "forward" ? this.input.selectionEnd : this.input.selectionStart);
		}
		return -1;
	},
	applyMetaData: function(metaData, options) {
		syra_fields.applyMetaData(this, metaData, options);
	},
	forceVisibility: function() {
		if (this.isInvisible && this.$item && this.$item.$isAdvanced) {
			this.page && this.page.advancedFieldsBtn && this.page.advancedFieldsBtn.link.click();
		}
	},

	setInputFocus: function(select) {
		if (this.input && !this.$isDisabled && !this.$isHidden) {
			this.input.focus();
			try {
				select && !this.$isReadOnly && !this.isInputReadOnly && this.input.select();
			} catch (error) {
				//!!important avoid trouble with IE
			}
			return true;
		}
		return false;
	},
	focus: function(select) {
		_ensureSectionOpened(this);
		syra_fields.scrollToField(this);
		this.page.setShortcutSpyerList(this);
		var isDone = false;
		if (!this.$isHidden) {
			this._isScollToTieldDisabled = true;
			this.forceVisibility();
			isDone = this.setInputFocus(select);
			this._isScollToTieldDisabled = false;
		}
		return isDone;
	},
	isEmpty: function() {
		return !this.currentValue;
	},
	showErrors: function(errors, options) {
		this.$displayedDiagnoses = [];
		for (var ii = 0, jj = errors.length; ii < jj; ii++) {
			this.$displayedDiagnoses.push({
				$message: errors[ii],
				$severity: "error"
			});
		}
		syra_diagnose.showDiagnoses({
			$diagnoses: this.$displayedDiagnoses
		}, this, options);
	},


	hasValue: function() {
		return this.currentValue != null;
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$sourceBind == "$localize") {
			syra_localizer.onMenuClick(this, menuItem);
			return false;
		}
		return true;
	},
	onInputFieldClick: function(event) {
		this.onFieldInputEvent(event);
		event.syraRetValue = true;
		event.stopPropagation();
	},
	dispose: function() {
		syra_menus.dispose(this);
		if (this.page) {
			syra_fields.onFieldFocusChange(this, false);
			if (this.$item && this.$item.$isAutoSize) {
				this.page.resizableList.remove(this);
			}
		}
		syra_site.disposeObject(this);
	}
});