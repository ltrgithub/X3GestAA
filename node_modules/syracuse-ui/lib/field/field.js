"use strict";
var helpers = require('syracuse-core/lib/helpers');
var fieldHelper = require('syracuse-ui/lib/field/helpers/fieldHelper');
var advancedStateHelper = require('syracuse-ui/lib/field/helpers/advancedStateHelper');
var contentEditableHelper = require('syracuse-ui/lib/field/helpers/contentEditableHelper');

function Field() {}

exports.Field = helpers.defineClass(Field, null, {
	setAdvancedState: function($isAdvanced, designing) {
		if ($isAdvanced === undefined) {
			if (this.$field.$isAdvanced !== undefined || this.$item.$isAdvanced !== undefined) {
				if (this.$item.$isAdvanced === undefined) {
					this.$item.$isAdvanced = this.$field.$isAdvanced;
				}
				this.setAdvancedState(this.$item.$isAdvanced);
			}
		} else {
			advancedStateHelper.setAdvancedState(this, $isAdvanced, designing);
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		if (metaData.$isHidden !== undefined) {
			this.setState(metaData);
		}
		if (designing !== false) {
			if (metaData.$isTopLabelAlignment !== undefined) {
				var curItemCss = this.$skin;
				if (this.$item.$isTopLabelAlignment) {
					curItemCss += "-top";
				}
				this.$item.$isTopLabelAlignment = metaData.$isTopLabelAlignment;
				var newItemCss = this.$skinField;
				if (this.$item.$isTopLabelAlignment) {
					newItemCss += "-top";
					metaData.$isRightTextLabelAlignment = false;
				}
				this.domItem.className = this.domItem.className.replace(curItemCss, newItemCss);
				if (this.domTitle) {
					this.domTitle.className = this.domTitle.className.replace(curItemCss + "-title", newItemCss + "-title");
				}
				this._core.className = this._core.className.replace(curItemCss + "-core", newItemCss + "-core");
			}
			if (metaData.$isAdvanced !== undefined) {
				this.setAdvancedState(metaData.$isAdvanced, designing);
			}
		}
		if (metaData.$isTitleHidden !== undefined) {
			this.$item.$isTitleHidden = metaData.$isTitleHidden;
			if (!metaData.$isTitleHidden && !this.domTitle) {
				this.appendTitle();
				this.domItem.insertBefore(this.domTitle, this.domItem.firstChild);
				this.setTitle(this.getTitle());
			}
		}
		if (this.domTitle) {
			if (metaData.$isTitleHidden !== undefined) {
				this.hideTitle(metaData.$isTitleHidden);
			}
			if (metaData.$isRightTextLabelAlignment !== undefined) {
				this.domTitle.style.textAlign = (this.$item.$isRightTextLabelAlignment = metaData.$isRightTextLabelAlignment) ? "right" : "left";
			}

		}
	},
	onInputFocusin: function(input, event) {
		if (this.$item.$contentEditable) {
			contentEditableHelper.onInputFocusin(this, input, event);
		}
		if (this.articleParent.onInputFocusin) {
			this.articleParent.onInputFocusin(this);
		}
		this.hasFocus = true;
		document.site.onChildFieldFocus(this.boxParent, true);
		if (this.diagnoseFieldSlot) {
			this.page.diagnosesPanel.onNavigationClick(0, this);
		}
	},
	onInputClick: function(input, event) {
		this.onInputFocusin(input, event);
	},
	onInputFocusout: function(input, event) {
		if (this.$item.$contentEditable) {
			contentEditableHelper.onInputFocusout(this, input, event);
		}
		if (this.articleParent.onInputFocusout) {
			this.articleParent.onInputFocusout(this);
		}
		this.hasFocus = false;
		this.onItemEnterLeave(false);
		document.site.onChildFieldFocus(this.boxParent, false);
	},
	getArticle: function() {
		if (!this.articleParent) {
			this.articleParent = this.boxParent.getArticle();
		}
		return this.articleParent;
	},
	appendDetailLink: function(value, $detailsLink) {
		if (!this.$isDetailLinkDisabled) {
			if (this.boxPickers) {
				$(this.boxPickers).detach();
			}
			document.site.dom.empty(this.fieldValue);
			var mn = this.page.loadNewItem(this.fieldValue, {
				$bind: "$detail",
				$title: $detailsLink.$title = value + "",
				$category: "link",
				$skin: this.$skin + "-link",
				$format: this.$field.$format
			}, this.boxParent);
			mn.detailField = this;
			mn.setMenu($detailsLink);
			if (this.boxPickers) {
				this.fieldValue.appendChild(this.boxPickers);
			}
		}
	},
	hideTitle: function($isTitleHidden) {
		this.domTitle.style.display = $isTitleHidden ? "none" : "";
	},
	_createValueContainer: function() {
		this.domValueSlot = document.createElement("div");
		this.domValueSlot.className = this._$cssField + "-value";
		if (this.$cssFieldType) {
			this.domValueSlot.className += " " + this.$cssFieldType;
		}
		this._dataValue = this.domValueSlot;
		if (this.$item.$inplace) {
			this._core = this.domValueSlot;
			this.domItem.appendChild(this.domValueSlot);
		} else {
			this.domValueSlot = document.createElement("div");
			this.domValueSlot.className = this._$cssField + "-value-slot";
			this.domValueSlot.appendChild(this._dataValue);

			this._core = document.createElement("div");
			this._core.className = this._$cssTopField + "-core";
			this._core.appendChild(this.domValueSlot);
			this.domItem.appendChild(this._core);
		}
		if (this.$isEditMode) {
			this.fieldValue = this._dataValue;
		} else {
			this._dataValue.appendChild(this.fieldValue = document.createElement("div"));
			this.fieldValue.className = this._$cssField + "-value-read";
		}
	},
	_initCss: function() {
		this._$cssTopField = this._$cssField = (this.$item.$css) ? (this.$item.$css + " " + this.$skinField) : this.$skinField;
		if (this.$item.$isTopLabelAlignment) {
			this._$cssTopField += "-top";
		}
	},
	ensureEditMode: function() {
		if (this.$isEditMode === undefined) {
			this.$isEditMode = this.$item.$isEditMode;
			if (this.$isEditMode === undefined) {
				this.$isEditMode = this.articleParent.$isEditMode;
			}
		}
	},
	loadBox: function() {
		this.boxPickersPadding = 0;
		this.articleParent = this.boxParent.getArticle();
		this.ensureEditMode();
		this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
		this.$skinField = this.$item.$inplace && this.$item.$inplaceSkin ? this.$item.$inplaceSkin + " " + this.$skinField : this.$skinField;
		if (this.articleParent.isRecordArticle) {
			this.arrayLevel = "cell";
		}
		if (this.$isEditMode) {
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
		}
		this._initCss();

		if (this.$isEditMode) {
			this.inputId = this.id + "-input";
		}
		this.domItem = this.layoutSlot;
		if (!this.$item.$inplace) {
			this.domItem = this.layoutSlot.appendChild(document.createElement("div"));
		}
		this.domItem.className += " " + this._$cssTopField;

		this.$rootLinks = this.$field;
		if (this.initialize) {
			this.initialize();
		}
		if (this.$isDetailLinkDisabled === undefined) {
			this.$isDetailLinkDisabled = this.$item.$isDetailLinkDisabled;
		}
		this.appendTitle();

		this._createValueContainer();
		this.render();

		this.setFieldId(this.domItem);
		this.domItem.syrainout = this;
		this.domItem.syraFieldBind = this.$item.$bind || "";
		if (this.input) {
			if (this.$item.$isBorderVisible) {
				this.input.className += " s-input-border";
			}
			if (this.$item.$isCellChild) {
				this.input.style.width = "100%";
				this._dataValue.style.width = "100%";
			}
			this.setFieldId(this.input);
			this.input.id = this.inputId;
		}
		if (!this.$item.$inplace && !this.$isEditMode) {
			this.domValueSlot.style.display = 'inline-block';
		}

		this.setTitle(this.$item.$title || this.$field.$title);

		this.setDescription(this.$item.$description || this.$field.$description);
		this.setHelp(this.$item.$help || this.$field.$help);
		this.applyDesignMetaData(this.$item, false);
		this.setFieldWidth();

		this.setState(this.$field);
		this.setAdvancedState();
		if (this.$field.$fieldStyle || this.$field.$valueStyle || this.$field.$titleStyle) {
			if (this.page.externalAdapter.applyDesignStyle(this, this.$field, this.$item)) {
				fieldHelper.applyCustomStyle(this, this.$field);
			}
		}
		this.articleParent.bind(this, this.$item.$bind);
		this.setMenus(this.$field);
		this.applyAutoSize(this.$item);
		if (document.site.enableTestRobot) {
			fieldHelper.appendQualityAtt(this, this._dataValue);
			if (this.input) {
				fieldHelper.appendQualityAtt(this, this.input);
			}
		}
		this.ensureLayoutMode();
	},
	setFieldId: function(dom) {
		dom.setAttribute("data-s-field", dom.syra_field_id = this.id);
	},

	setFieldWidth: function(widthValue) {
		if (this.$isEditMode && !this.hasFreeWidth && !this.$item.$rows && !this.$item.$inplace && this.domValueSlot && !this.$item.$isAutoSizeDisabled) {
			this.setInputWidth(this.widthValue = fieldHelper.getFieldWidth(this.$field, true));
		}
	},
	setInputWidth: function(widthValue) {
		this.domValueSlot.style.maxWidth = widthValue + "px";
	},
	applyAutoSize: function(state) {
		if (state.$isAutoSize !== undefined) {
			this.$item.$isAutoSize = state.$isAutoSize;
			this.articleParent.registerAutoSizeFields(this, state.$isAutoSize);
		}
	},
	render: function() {
		if (this.$isEditMode) {
			if (this.$item.$rows) {
				this.input = document.createElement("textarea");
				this.isTextArea = true;
				this.input.setAttribute("rows", this.$item.$rows);
				document.site.setSpecificAttributes(this.input);
				this.input.className = this.$skinInput;
			} else {
				if (this.$item.$contentEditable) {
					contentEditableHelper.render(this);
				} else {
					if (this.createHtmlInput) {
						this.input = this.createHtmlInput();
					} else {
						this.input = document.createElement("input");
						this.input.setAttribute("type", "text");
						document.site.setSpecificAttributes(this.input);
					}
					this.input.className = this.$skinInput;
				}
				this.$maxLength = this.$item.$maxLength || this.$field.$maxLength;
				if (this.$maxLength) {
					this.input.setAttribute("maxlength", this.$maxLength);
				}
			}
			if (this.$item.$css) {
				this.input.className += " " + this.$item.$css;
			}
			this.fieldValue.appendChild(this.input);
			this._appendLinksPicker();
		}
	},
	_appendSpecialPicker: function(pickerType) {
		var picker = this.createPicker(pickerType);
		this.articleParent.setArticleId(picker);
		this.setFieldId(picker);
		this.appendToPickerBox(picker);
		return picker;
	},
	_appendLinksPicker: function() {
		if (this.$rootLinks.$links) {
			if (this.$rootLinks.$links.$lookup) {
				var picker = this._appendSpecialPicker("lookup");
				picker.title = this.localize.fieldLookup;
			}
			if (this.$rootLinks.$links.$tunnel) {
				this.appendTunnelPicker(this.$rootLinks.$links.$tunnel);
			}
			if (this.$rootLinks.$links.$localize && this.$item.$useLocalizePicker) {
				var picker = this._appendSpecialPicker("localize");
				picker.title = this.$rootLinks.$links.$localize.$title;
			}

		}
	},
	appendTunnelPicker: function($tunnel) {
		if (!this.$item.$inplace) {
			this.tunnelPicker = this._appendSpecialPicker("tunnel");
			this.tunnelPicker.setAttribute("title", this.localize.fieldTunnel);
		}

	},
	findMenu: function($bind) {
		if (this.menusBox && this.menuItems) {
			return this.menuItems[this.menusBox.id + "-" + $bind];
		}
		return null;
	},
	clickMenu: function($bind) {
		if (this.menusBox) {
			this.articleParent.clickMenu(this.menusBox.id + "-" + $bind);
		}
	},
	clickTunnelPicker: function() {
		if (this.tunnelPicker) {
			this.tunnelPicker.click();
		} else {
			this.clickMenu("$tunnel");
		}
	},
	removeFromPickerBox: function(picker) {
		if (this.tunnelPicker == picker) {
			delete this.tunnelPicker;
		}
		this._updateBoxPickerPadding(false);
		if (picker) {
			document.site.dom.removeChild(picker);
			if (this.boxPickersPadding == 0 && this.boxPickers) {
				document.site.dom.removeChild(this.boxPickers);
				this.boxPickers = null;
			}
		}
	},
	clickPicker: function(pickerType) {
		var pickers = (this.boxPickers) ? this.boxPickers.childNodes : null;
		if (pickers) {
			for (var ii = 0, jj = pickers.length; ii < jj; ii++) {
				if (pickers[ii].syraPickerType === pickerType) {
					pickers[ii].click();
					break;
				}
			}
		}
	},
	toggleBoxPicker: function() {
		var input = (this.input ? this.input : this._dataValue);
		var padding;
		if (this.boxPickers) {
			if (this.$isDisabled) {
				this.boxPickers.style.display = "none";
				padding = 0;
			} else {
				this.boxPickers.style.display = "";
				var pickers = this.boxPickers.childNodes;
				var display = (this.$isReadOnly) ? "none" : "";
				for (var ii = 0, jj = pickers.length; ii < jj; ii++) {
					pickers[ii].style.display = display;
				}
				if (this.$isReadOnly) {
					if (this.tunnelPicker) {
						this.tunnelPicker.style.display = "";
						padding = 18;
					}
					padding = 0;
				} else {
					padding = this.boxPickersPadding;
				}
			}
		} else {
			padding = this.boxPickersPadding;
		}
		if (padding !== undefined) {
			input.style.paddingRight = padding + "px";
			if (this.widthValue !== undefined) {
				this.setInputWidth(this.widthValue + padding);
			}
		}
	},
	appendToPickerBox: function(picker) {
		if (!this.boxPickers) {
			this.boxPickers = document.createElement("div");
			if (this.input) {
				this.fieldValue.appendChild(this.boxPickers).className = this.$skin + "-pickers";
			} else {
				this._dataValue.appendChild(this.boxPickers).className = this.$skin + "-pickers";
			}
			if (this.boxPickersPadding) {
				this.boxPickers.style.paddingRight = this.boxPickersPadding + "px";
			}
		}
		this.boxPickers.appendChild(picker);
		this._updateBoxPickerPadding(true);
	},
	_updateBoxPickerPadding: function(add) {
		if (add) {
			this.boxPickersPadding += 18;
		} else {
			this.boxPickersPadding -= 18;
		}
		this.toggleBoxPicker();
	},
	createPicker: function(pickerType) {
		var btn = document.createElement("a");
		var css = this.$skin + "-" + pickerType;
		if (this.$item.$css) {
			css = this.$item.$css + " " + css;
		}
		btn.className = css + "-picker";
		btn.setAttribute("data-s-picker", pickerType);
		btn.syraPickerType = pickerType;
		return btn;
	},
	doClickPicker: function() {

	},
	highlightPickers: function(hightLight) {
		if (this.menusBox) {
			document.site.dom.toggleClass(this.menusBox.domItem, "s-enter", hightLight);
		}
		if (this.boxPickers) {
			document.site.dom.toggleClass(this.boxPickers, "s-enter", hightLight);
		}
	},
	onItemEnterLeave: function(onEnter) {
		this.highlightPickers(onEnter);
		if (this.isDiagnosePopup) {
			document.site.diagnoseManager.onFieldItemEnterLeave(this, onEnter);
		}
	},
	onFieldInputEvent: function(event, shortcuts) {
		var self = this;
		if (event.type == "focusin") {
			self.highlightPickers(true);
			self.page.focusField = self;
			if (self.$item && self.$item.$isCellChild) {
				document.site.scrollToField(self);
			}
		} else {
			if (event.type == "focusout") {
				if (self.page.focusField == self) {
					self.page.focusField = null;
				}
				self.highlightPickers(false);
			}
		}
		if (self.page && self.page.externalAdapter) {
			return self.page.externalAdapter.onFieldEvent({
				field: self,
				event: event,
				shortcuts: shortcuts,
				doEvent: function() {
					//    onInputFocusin,onInputFocusout: function(input, event){
					var fnct = "onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1);
					if (self[fnct]) {
						return self[fnct](event.target, event);
					} else {
						return true;
					}
				}
			});
		}
	},
	getLookupSettings: function() {
		var $lookup;
		if (this.articleParent.dataset.$properties) {
			var $meta = this.articleParent.dataset.$properties[this.$item.$bind];
			if ($meta && $meta.$links) {
				$lookup = $meta.$links.$lookup;
			}
		}
		$lookup = $lookup || {};
		$lookup = {
			$result: ($lookup.$result == undefined) ? this.$rootLinks.$links.$lookup.$result : $lookup.$result,
			$url: ($lookup.$url == undefined) ? this.$rootLinks.$links.$lookup.$url : $lookup.$url
		};
		return $lookup;
	},
	onClickPicker: function(btn) {
		var self = this;
		if (!self.authoringNode && !self.$isDisabled) {
			var pickerType = btn.getAttribute("data-s-picker");
			var doClick = self.articleParent.onFieldClickPicker ? self.articleParent.onFieldClickPicker(self, pickerType, btn) : true;
			if (doClick) {
				self.page.externalAdapter.onFieldClickPicker({
					field: self,
					pickerType: pickerType,
					doEvent: function(options) {
						switch (btn.getAttribute("data-s-picker")) {
							case "lookup":
								self.focus();
								var $lookup = self.getLookupSettings();
								document.site.dialogManager.openLookup(self.boxParent, {
									article: self.articleParent,
									$url: $lookup.$url,
									onSelectRecord: function(selectedRecords) {
										if (!self.$isDisabled && !self.$isReadOnly) {
											var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
											self.setDataValue($lookup.$result ? record.dataset[$lookup.$result] : record.dataset);
											self.focus();
											self.notifyFieldChange(self.currentValue);
										}
									}
								});
								break;
							case "tunnel":
								break;
							case "localize":
								self.clickMenu("$localize");
								break;
							case "menus":
								break;
							default:
								self.doClickPicker(btn, options);
								break;
						}
					}
				});
			}
		}
	},
	getDefaultTitle: function() {
		return this.localize.fieldDefaultTitle;
	},
	getTitle: function() {
		if (this.titleText == null && this.$titleValue) {
			this.titleText = this.$titleValue || "";
			if (this.titleText.length > 0 && this.titleText[1] == "@") {
				this.titleText = document.site.expressionMaker.render(this.boxParent, this.titleText);
			}
		}
		return this.titleText || "";
	},
	setTitle: function($title) {
		this.$titleValue = $title;
		delete this.titleText;
		if (this.domTitle) {
			if (this._mandatoryFlag) {
				document.site.dom.removeChild(this._mandatoryFlag);
				this.domTitle.textContent = this.getTitle();
				this.domTitle.appendChild(this._mandatoryFlag);
			} else {
				this.domTitle.textContent = this.getTitle();
			}
		} else {
			if (this.input && this.$item.$isTitlePlaceHolder) {
				this.input.setAttribute("placeholder", this.getTitle());
				if (this.$item.$contentEditable && this.currentValue == null) {
					this.setInputValue("");
				}
			}
		}
	},
	appendTitle: function() {
		if (!(this.$item.$inplace || this.$item.$isTitleHidden)) {
			this.domTitle = document.createElement("label");
			this.domTitle.className = this._$cssTopField + "-title";
			if (this.inputId) {
				this.domTitle.setAttribute("for", this.inputId);
			}
			this.domItem.appendChild(this.domTitle);
		}
	},

	setHelp: function($help) {
		return;
		if ($help != undefined) {
			this.$help = $help;
			if (this.domTitle && this.getTitle().length > 0) {
				if (this.$help) {
					if (!this._helpFlag) {
						this._helpFlag = document.createElement("a");
						this._helpFlag.className = "s-field-help-flag";
					}
				} else {
					if (this._helpFlag) {
						document.site.dom.removeChild(this._helpFlag);
						delete this._helpFlag;
					}
				}
			}
		}
	},
	setDescription: function($description) {
		if ($description !== undefined) {
			var text = this.$description = $description || "";
			if (text.length > 0) {
				if (text[1] == "@") {
					text = document.site.expressionMaker.render(this.boxParent, text);
				}
				if (!this.$item.$inplace) {
					if (!this._description) {
						this._description = document.createElement("div");
						this._description.className = this.$skinField + "-desc";
						$(this.domValueSlot).after(this._description);
					}
					this._description.textContent = text;
					this._description.style.display = "";
				}
			} else {
				if (this._description) {
					this._description.style.display = "none";
				}
			}
		}
	},
	setState: function(state) {
		if (!this.$item.$isFilterMode) {
			if (state.$isMandatory !== undefined) {
				this.$isMandatory = state.$isMandatory;
				if (this.$isEditMode) {
					if (this.domTitle && this.getTitle().length > 0) {
						document.site.dom.toggleClass(this.domTitle, "s-mandatory", state.$isMandatory);
						if (state.$isMandatory) {
							if (!this._mandatoryFlag) {
								this._mandatoryFlag = document.createElement("div");
								this._mandatoryFlag.className = "s-field-mandatory-flag";
								this.domTitle.appendChild(this._mandatoryFlag);
								if (document.site.enableTestRobot) {
									this._dataValue.setAttribute("data-s-q-mandatory", true);
									if (this.input) {
										this.input.setAttribute("data-s-q-mandatory", true);
									}
								}
							}
						} else {
							if (this._mandatoryFlag) {
								document.site.dom.removeChild(this._mandatoryFlag);
								delete this._mandatoryFlag;
								if (document.site.enableTestRobot) {
									this._dataValue.removeAttribute("data-s-q-mandatory");
									if (this.input) {
										this.input.removeAttribute("data-s-q-mandatory");
									}
								}
							}
						}
					}
					document.site.dom.toggleClass(this._dataValue, "s-mandatory", state.$isMandatory);
				}
			}
			if (state.$isDisabled !== undefined) {
				this.$isDisabled = state.$isDisabled;
				if (state.$isDisabled) {
					this.domItem.setAttribute("disabled", true);
				} else {
					this.domItem.removeAttribute("disabled");
				}
				if (this.input) {
					document.site.dom.disableItem(this.input, state.$isDisabled);
					if (this.$item.$contentEditable) {
						contentEditableHelper.setState(this, state);
					}
				}
				if (this.domTitle) {
					document.site.dom.disableItem(this.domTitle, state.$isDisabled);
				}
				if (this._description) {
					document.site.dom.disableItem(this._description, state.$isDisabled);
				}
				document.site.dom.disableItem(this._dataValue, state.$isDisabled);
				if (this.menusBox) {
					this.menusBox.domItem.style.visibility = this.$isDisabled ? "hidden" : "";
				}
			}
			if (state.$isReadOnly !== undefined) {
				this.$isReadOnly = state.$isReadOnly;
				if (this._onSetReadOnly) {
					this._onSetReadOnly(state.$isReadOnly);
				}
			}
			if (this.boxPickers) {
				this.toggleBoxPicker();
			}

			if (this.menusBox && this.$isReadOnly != undefined) {
				var localizeMenu = this.findMenu("$localize");
				if (localizeMenu) {
					localizeMenu[0].setState({
						$isHidden: (this.$isReadOnly ? true : false)
					});
				}

			}
		}
		if (state.$isHidden !== undefined) {
			this.showItem(!(this.$isHidden = state.$isHidden));
		}
	},

	showItem: function(show) {
		this.isInvisible = !show;
		if (this.$item.$inplace) {
			this._dataValue.style.display = show ? "" : "none";
		} else {
			if (this.layoutParent) {
				this.layoutParent.ensureItemVisibility(this, !show);
			}
			this.domItem.style.display = show ? "" : "none";
		}
	},
	_onSetReadOnly: function($isReadOnly) {
		if (this.input) {
			if (this.$isReadOnly) {
				this.input.setAttribute("readonly", "readonly");
			} else {
				this.input.removeAttribute("readonly");
			}
			document.site.dom.toggleClass(this.input, "s-readonly", this.$isReadOnly);
		}
	},
	setDataBind: function(value, record, metaData, $bind) {
		if (this.page.externalAdapter.setDataBind(this, value, record, metaData)) {
			if (value !== undefined) {
				this.setDirty(false);
				this.setDataValue(value, $bind);
			}
			this.applyMetaData(metaData);
		}
	},
	setDataValue: function(value, $bind) {
		this.currentValue = value;
		if (this.$isEditMode) {
			this.setInputValue(this.currentValue || "");
			// quick hack for lookup in regular field
			if (this.currentValue && typeof(this.currentValue) == 'object' && this.$item && this.$item.$bind) {
				// crnit: even quicker hack for filter fields where we might have $low and $high suffixes
				var b = this.$item.$bind.replace("$low", "").replace("$high", "");
				//
				this.setInputValue(document.site.expressionMaker.parse(this.articleParent, "{" + b + "}", value));
				this.currentValue.$value = this.getDataValue();
			}
		} else {
			document.site.dom.empty(this.fieldValue);
			if (value && this.$rootLinks.$links && this.$rootLinks.$links.$details && !this.$item.$isDetailLinkDisabled) {
				this.appendDetailLink(value, this.$rootLinks.$links.$details);
			} else {
				if (this.$item.$rows) {
					this.fieldValue.innerHTML = document.site.formatHTMLText(value);
				} else {
					this.fieldValue.textContent = value;
				}
			}
			this.showContextMenus();
		}
	},
	setDirty: function(dirty) {
		this.dirty(dirty);
	},
	dirty: function(set) {
		if (set !== undefined) {
			this._isDirty = set;
		} else
			return this.isTextArea ? this._isDirty : true;
	},
	getDatasetValue: function() {
		var value = this.articleParent.dataset[this.$item.$bind];
		if (this.$item.$variantItemKey) {
			if (value) {
				return value[this.$item.$variantItemKey];
			}
		}
		return value;
	},
	setDatasetValue: function(value) {
		var value = this.currentValue = (value === undefined ? this.getDataValue() : value);
		if (this.$item.$variantItemKey) {
			if (!this.articleParent.dataset[this.$item.$bind]) {
				this.articleParent.dataset[this.$item.$bind] = {};
			}
			this.articleParent.dataset[this.$item.$bind][this.$item.$variantItemKey] = value;
		} else {
			this.articleParent.dataset[this.$item.$bind] = value;
		}
		return value;
	},
	getDataValue: function() {
		return this.getInputValue();
	},
	getInputValue: function() {
		if (this.input) {
			var val;
			if (this.$item.$contentEditable) {
				val = contentEditableHelper.getInputValue(this);
			} else {
				val = this.input.value;
			}
			return document.site.trimString(val);
		} else {
			return document.site.trimString(this.currentValue);
		}
	},
	setInputValue: function(val) {
		val = document.site.trimString(val);
		if (this.$item.$contentEditable) {
			contentEditableHelper.setInputValue(this, val);
		} else {
			this.input.value = val;
		}
	},
	/// -------------
	/// ## getCaretPosition()
	///
	/// Gets the current 0 based caret position in the input.
	///
	getCaretPosition: function() {
		return this.$item && this.$item.$rows && this.input && (this.input.selectionDirection === "forward" ? this.input.selectionEnd : this.input.selectionStart);
	},
	applyMetaData: function(metaData, options) {
		if (this.domValueSlot) { //important for reloading and initiliaze method called before render
			if (metaData) {
				if (metaData.$title !== undefined) {
					this.setTitle(metaData.$title);
				}
				if (metaData.$description !== undefined) {
					this.setDescription(metaData.$description);
				}
				if (metaData.$help !== undefined) {
					this.setHelp(metaData.$help);
				}
				this.setState(metaData);
				if (metaData.$diagnoses !== undefined) {
					this.showDiagnoses(metaData.$diagnoses, options);
				}
				this.setMenus(metaData);
				if (!this.$isEditMode && this.currentValue && !this.$isDetailLinkDisabled) {
					if (metaData.$links && metaData.$links.$details) {
						this.appendDetailLink(this.currentValue, metaData.$links.$details);
					}
				}
				//$valueStyle can be "" (clear style)  in this case  metaData.$valueStyle is false
				if (metaData.$fieldStyle || metaData.$valueStyle != undefined || metaData.$titleStyle) {
					fieldHelper.applyCustomStyle(this, metaData);
				}
			}
		}
	},
	focus: function(select) {
		document.site.scrollToField(this);
		//	if (f.parents(":hidden").length == 0 && !f.attr("disabled") && f.is(':visible') && (f[0].localName !== 'a' || f.attr("href"))) {
		if (this.input) {
			if (!this.$isHidden) {
				this.input.focus();
				if (select && !this.$isDisabled) {
					this.input.select();
				}
				return true;
			}
		}
		return false;
	},
	isEmpty: function() {
		return !this.currentValue;
	},
	getDataType: function() {
		return this.$field;
	},
	showErrors: function(errors, options) {
		this.$displayedDiagnoses = [];
		for (var ii = 0, jj = errors.length; ii < jj; ii++) {
			this.$displayedDiagnoses.push({
				$message: errors[ii],
				$severity: "error"
			});
		}
		this.showDiagnoses(this.$displayedDiagnoses, options);
	},
	showDiagnoses: function($diagnoses, options) {
		document.site.showDiagnoses({
			field: this,
			$diagnoses: ($diagnoses && $diagnoses.length > 0) ? $diagnoses : null
		}, this.boxParent, options);
	},
	validateMandatoryValue: function(errors, value) {
		if (this.$isMandatory && value == '' && this.page.externalAdapter.notifyFldMandatoryErr()) {
			errors.push(this.localize.fieldIsMandatory);
		}
	},
	validate: function(newValue, errors) {
		if (this.$item.$isFilterMode) {
			return true;
		}
		var value = newValue;
		if (value === undefined) {
			value = this.currentValue;
		}
		if (value == null) {
			value = "";
		}
		value = value.toString();
		errors = errors || [];
		this.validateMandatoryValue(errors, value);
		var dataType = this.getDataType();
		if (dataType.$pattern && value) {
			var match = new RegExp(dataType.$pattern, "i").test(value);
			if (!match) { //(match && match.index == 0 && match[0].length == value.length)) {
				errors.push(this.localize.fieldInvalidValue + " : " + value);
			}
		}
		if (this.validateType) {
			this.validateType(errors, value);
		}

		if (this.articleParent.onFieldValidate) {
			this.articleParent.onFieldValidate(this, value, errors);
		}
		//diagnosesPanel
		if (errors.length > 0 || this.$displayedDiagnoses) {
			this.showErrors(errors);
			var saveLinks = this.articleParent.menuItems.$save;
			if (saveLinks && saveLinks.length > 0) {
				if (!saveLinks[0].$isDisabled) {
					if (document.site.diagnoseManager.hasErrors()) {
						saveLinks[0].disable(true);
					}
				} else {
					if (!document.site.diagnoseManager.hasErrors()) {
						saveLinks[0].disable(true);
					}
				}
			}
			var sendBag = this.page.ensureSendBag();
			if (sendBag) {
				newValue = this.parentVariantField ? this.parentVariantField.saveVariantValue(newValue) : newValue;
				sendBag.saveDataChange(this.page, this.articleParent, this.$item.$bind, newValue);
			}
		}
		return errors.length == 0;
	},
	onInputValidate: function(event, notify) {
		var newValue = this.getDataValue(event);
		if (notify || (newValue != this.currentValue)) {
			this.notifyFieldChange(newValue);
		}
	},
	onInputChange: function(input, event) {
		this.setDirty(true);
		this.onInputValidate(event);
	},
	notifyFieldChange: function(newValue, validated) {
		var self = this;
		self.currentValue = newValue;
		if (validated || self.validate(newValue)) {
			self.setDatasetValue(self.currentValue);
			self.page.externalAdapter.onFieldNotifyChange({
				field: self,
				doEvent: function() {
					if (self.articleParent.onNotifyDataChange ? self.articleParent.onNotifyDataChange(self, self.currentValue) : true) {
						self.page.notifyDataChange(self, self.currentValue);
					}
				}
			});
		}
	},
	setMenus: function(metaData) {
		// in order not to show menu menu picker for unit ref field
		if (this.$item.$isUnitField) {
			if (this.$item.$isEditMode) {
				this.setMenusBox(metaData);
			}
		} else {
			// regular cases
			this.setMenusBox(metaData);
		}
	},
	setMenusBox: function(metaData) {
		if (!this.$item.$isMenusHidden) {
			var $menus = metaData.$item || metaData;
			if ($menus.$links !== undefined || $menus.$actions !== undefined) {
				if ($menus.$links === null) {
					if (this.menusBox) {
						this.menusBox.clearMenus(true);
						this.showContextMenus(false);
						this.menusBox.unload();
						delete this.menusBox;
					}
				} else {
					if (!this.menusBox) {
						this._createMenusBox();
					}
					this.menusBox.ensurePrivateMenus($menus);
				}
			}
		}
	},
	filterMenu: function($bind, $link) {
		switch ($bind) {
			case "$details":
				if (!this.$isDetailLinkDisabled) {
					return false;
				}
				break;
			case "$localize":
				if (this.$item.$useLocalizePicker) {
					$link.$isHidden = true;
				}
				break;
			case "$tunnel":
				if (this.$item.$inplace) {
					$link.$title = this.localize.fieldTunnel;
				}
				return this.$item.$inplace && !this.$item.$isFilterMode;
			case "$lookup":
			case "$select":
				return false;
				/*case "$lazyload":
             this.menusBox.isLazyLoad = true;
             return false;*/
		}
		return true;
	},
	_createMenusBox: function() {
		var $item = {
			$isOwner: true,
			$noText: true,
			$title: this.localize.fieldActions,
			$clientId: this.id + "-menu-picker",
			$skin: this.$skin + "-menus s-field-context-menus",
			$itemSkin: "s-list-menus-record-menus-link",
			$category: "menus",
			$isTitlePicker: true,
			$isBoxCollapsable: true,
			$isPopupContent: true,
			$layout: {
				$items: []
			}
		};
		if (this.$rootLinks && this.$rootLinks.$links && this.$rootLinks.$links.$localize) {
			$item.$layout.$items.push({
				$category: "link",
				$bind: $item.$clientId + "-$localize",
				$sourceBind: "$localize",
				$icon: {
					$mode: "iconText",
					$path: "field/s-field-"
				}
			});
		}
		if (this.$item.$inplace && !this.$item.$isFilterMode) {
			$item.$layout.$items.push({
				$category: "link",
				$bind: $item.$clientId + "-$tunnel",
				$sourceBind: "$tunnel",
				$icon: {
					$mode: "iconText",
					$path: "field/s-field-"
				}
			});
		}
		this.menusBox = this.page.loadNewItem(this.input ? this.fieldValue : this._dataValue, $item, this.articleParent);
		this.menusBox.contextField = this;
	},
	hasValue: function() {
		return this.currentValue != null;
	},
	showContextMenus: function(show) {
		if (this.menusBox) {
			if (show === undefined) {
				show = !(this.isInvisible || this.$isHidden);
			}
			show = show && (this.$isEditMode || this.hasValue());
			if (show) {
				if (!this.menusBox.$isPickerVisible) {
					this.menusBox.$isPickerVisible = true;
					this.menusBox.domItem.style.display = "";
					if (this.boxPickers) {
						this.boxPickers.style.paddingRight = "18px";
					}
					if (this.$isDisabled) {
						this.menusBox.domItem.style.visibility = "hidden";
					}
					this._updateBoxPickerPadding(true);
				}
			} else {
				if (this.boxPickers) {
					this.boxPickers.style.paddingRight = "";
				}
				if (this.menusBox.$isPickerVisible) {
					this.menusBox.domItem.style.display = "none";
					this.menusBox.$isPickerVisible = false;
					this._updateBoxPickerPadding(false);
				}
			}
		}
	},
	ensureLayoutMode: function() {
		if (this.layoutParent) {
			this.layoutParent.ensureLayoutSlot(this);
		}
	},
	onMenuClick: function(menuItem) {
		if (!this.$isDisabled && !menuItem.$isDisabled) {
			if (menuItem.$sourceBind == "$localize") {
				document.site.localizer.onLocalizeFieldClick(menuItem);
				return false;
			}
		}
		return true;
	},
	applyShortCuts: function(shortcuts, event) {
		if (shortcuts["delete"] || shortcuts.insert || shortcuts.right || shortcuts.left) {
			return this.onFieldInputEvent(event, shortcuts);
		} else {
			if (shortcuts.down || shortcuts.up) {
				if ((!this.menusBox || !this.menusBox.$opened) && !this.articleParent.popupCardItem) {
					return this.onFieldInputEvent(event, shortcuts);
				}
			} else {
				if (shortcuts.tab && this.$item.$contentEditable) {
					this.onInputChange(this.input, event);
				} else {
					if (shortcuts.enter) {
						// is ie7 or ie9 or ie10
						if (this.input && this.getDataValue() !== this.currentValue) {
							var bInfo = document.site.browser.getIdentity().info;
							if ((bInfo[0].toLowerCase() == "msie") && ((bInfo[1].indexOf("7.0") != -1) || (bInfo[1].indexOf("9.0") != -1) || (bInfo[1].indexOf("10.0") != -1))) {
								this.onInputChange(this.input, event);
							}
						}
					}
				}
			}
		}
		return false;
	},
	applyEscape: function(shortcuts, event) {
		return this.onFieldInputEvent(event, shortcuts);
	},
	dispose: function() {
		if (this.page && this.page.focusField == this) {
			this.page.focusField = null;
		}
		this.domTitle = this.fieldValue = this._description = this._helpFlag = null;
		if (this.menusBox) {
			this.menusBox.dispose();
		}
		if (this.articleParent && this.$item && this.$item.$isAutoSize) {
			this.articleParent.registerAutoSizeFields(this, false);
		}
		if (this.domItem) {
			this.domItem.syrainout = null;
		}
		this.localize = this.$rootLinks = this.rowSeparator = null;
		this.menusBox = this.diagSeverities = this.authoringNode = null;
		this.boxPickers = this.domValueSlot = null;
		this.$field = this.$item = this.boxParent = this.tunnelPicker = this._mandatoryFlag = null;
		this.layoutSlot = this.domItem = this._dataValue = null;
		this._core = this.input = this.currentValue = this.menusBox = null;
		this.layoutParent = this.boxParent = this.articleParent = this.page = this.parentVariantField = null;
	}
});