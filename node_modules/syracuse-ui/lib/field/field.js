"use strict";
var helpers = require('syracuse-core/lib/helpers');
var MenusController = require('syracuse-ui/lib/field/menus/menusController').MenusController;
var locale = require('syracuse-core/lib/locale');
var fieldHelper = require('./fieldHelper');

function Field(){
}

exports.Field = helpers.defineClass(Field, null, {
    applyDesignMetaData: function(metaData, onAuthoring){
        if (metaData.$isHidden !== undefined) {
            this.setState(metaData);
        }
        if (onAuthoring !== false) {
            if (metaData.$isTopLabelAlignment !== undefined) {
                var curItemCss = this.$skin;
                if (this.$item.$isTopLabelAlignment) {
                    curItemCss += "-top";
                }
                this.$item.$isTopLabelAlignment = metaData.$isTopLabelAlignment;
                var newItemCss = this.$skinField;
                if (this.$item.$isTopLabelAlignment) {
                    newItemCss += "-top";
                }
                this._domItem.className = this._domItem.className.replace(curItemCss, newItemCss);
                if (this.$$title) {
                    this.$$title[0].className = this.$$title[0].className.replace(curItemCss + "-title", newItemCss + "-title");
                }
                this._core.className = this._core.className.replace(curItemCss + "-core", newItemCss + "-core");
            }
        }
        if (metaData.$isTitleHidden !== undefined) {
            this.$item.$isTitleHidden = metaData.$isTitleHidden;
            if (!metaData.$isTitleHidden && !this.$$title) {
                this.appendTitle();
                this.$$item.prepend(this.$$title);
                this.setTitle(this.titleText);
            }
        }
        if (this.$$title) {
            if (metaData.$isTitleHidden !== undefined) {
                this.hideTitle(metaData.$isTitleHidden);
            }
            if (metaData.$isRightTextLabelAlignment !== undefined) {
                this.$$title[0].style.textAlign = (this.$item.$isRightTextLabelAlignment = metaData.$isRightTextLabelAlignment) ? "right" : "left";
            }
            if (metaData.$labelWidth !== undefined) {
                this.$$title[0].style.width = metaData.$labelWidth;
            }
        }
    },
    
    onInputFocusin: function($$input, event){
        if (this.getArticle().onInputFocusin) {
            this.getArticle().onInputFocusin(this);
        }
    },
    
    onInputFocusout: function($$input, event){
        if (this.getArticle().onInputFocusout) {
            this.getArticle().onInputFocusout(this);
        }
    },
    _bindInput: function(bind){
        var self = this;
        if (bind) {
            self.$$item.delegate("textarea[data-s-field],input[data-s-field],select[data-s-field]", "click change keydown keypress keyup focusin focusout", function(event){
                self.onFieldInputEvent(event);
                event.stopPropagation();
            }).delegate("[data-s-picker]", "click", function(event){
                self.onClickPicker($(this));
                return false;
            });
        }
        else {
            self.$$item.undelegate();
        }
    },
    getLocalize: function(){
        if (!this._localize) {
            this._localize = locale.resources(module)()
        }
        return this._localize;
    },
    getArticle: function(){
        if (!this.articleParent) {
            this.articleParent = this.boxParent.getArticle();
        }
        return this.articleParent;
    },
    getPage: function(){
        if (!this.page) {
            this.page = this.getArticle().getPage();
        }
        return this.page;
    },
    appendDetailLink: function($$dataValue, value, $detailsLink){
        if (!this.$isDetailLinkIgnore) {
            document.itemFactory.load($$dataValue.empty(), {
                $bind: "$detail",
                $title: $detailsLink.$title = value + "",
                $category: "link",
                $skin: this.$skin + "-link"
            }, this.boxParent).setMenu($detailsLink);
        }
    },
    hideTitle: function($isTitleHidden){
        this.$$title[0].style.display = $isTitleHidden ? "none" : "";
    },
    _createValueContainer: function(){
        var div = document.createElement("div");
        div.className = this._$cssField + "-value";
        this.$$dataValue = $(div);
        if (this.$item.$inplace) {
            this.domValueSlot = this._core = (this.$$dataValue)[0];
            this._domItem.appendChild(this.domValueSlot);
        }
        else {
            this.domValueSlot = document.createElement("div");
            this.domValueSlot.className = this._$cssField + "-value-slot";
            $(this.domValueSlot).append(this.$$dataValue);
            
            this._core = document.createElement("div");
            this._core.className = this._$cssTopField + "-core";
            this._core.appendChild(this.domValueSlot);
            this._domItem.appendChild(this._core)
        }
        if (this.$isEditMode) {
            this.$$fieldValue = this.$$dataValue;
        }
        else {
            this.$$fieldValue = $(document.createElement("div")).appendTo(this.$$dataValue);
        }
    },
    _initCss: function(){
        this._$cssTopField = this._$cssField = (this.$item.$css) ? (this.$item.$css + " " + this.$skinField) : this.$skinField;
        if (this.$item.$isTopLabelAlignment) {
            this._$cssTopField += "-top";
        }
    },
    ensureEditMode: function(){
        this.$isEditMode = this.$item.$isEditMode;
        if (this.$isEditMode === undefined) {
            this.$isEditMode = this.getArticle().$isEditMode;
        }
    },
    loadBox: function($$item){
        this.ensureEditMode();
        this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
        if (this.$item.$inplace) {
            this.arrayLevel = "cell";
        }
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
        }
        this._initCss();
        
        if (this.$isEditMode) {
            this.inputId = this.id + "-input";
        }
        this.$$item = $$item || this.$$container;
        if (!this.$item.$inplace) {
            this.$$item = $$item || $(document.createElement("div")).appendTo(this.$$item);
        }
        (this._domItem = this.$$item[0]).className += " " + this._$cssTopField;
        
        if (this.initialize) {
            this.initialize();
        }
        
        this.appendTitle();
        
        this._createValueContainer();
        this.render();
        
        this._domItem.setAttribute("data-s-field", this.id);
        this._domItem.setAttribute("data-s-name", this.$item.$bind || "");
        if (this.$$input) {
            var input = this.$$input[0];
            if (this.$item.$isBorderVisible) {
                input.className += " s-input-border";
            }
            if (this.$item.$isCellChild) {
                input.style.width = "100%";
                this.$$dataValue[0].style.width = "100%";
            }
            input.setAttribute("data-s-field", this.id);
            input.setAttribute("id", this.inputId);
        }
        if (!this.$item.$inplace && !this.$isEditMode) {
            this.domValueSlot.style.display = 'inline-block';
        }
        if (this.$item.$isBindInputEvent) {
            this._bindInput(true);
        }
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setHelp(this.$item.$help || this.$field.$help);
        this.applyDesignMetaData(this.$item, false);
        if (this.layoutParent) {
            this.layoutParent.setFieldWidth(this);
        }
        this.setState(this.$field);
        this.getArticle().bind(this, this.$item.$bind);
        this.setMenus(this.$field);
        this.applyAutoSize(this.$item);
        this._ensureButtonsVisible();
        if (document.site.developpementMode) {
            fieldHelper.appendQualityAtt(this, this.$$dataValue[0]);
            if (this.$$input) {
                fieldHelper.appendQualityAtt(this, this.$$input[0]);
            }
        }
    },
    
    applyAutoSize: function(state){
        if (state.$isAutoSize !== undefined) {
            this._bindAutoSize(state.$isAutoSize);
            this.$item.$isAutoSize = state.$isAutoSize;
        }
    },
    releaseMode: function(onDispose){
        delete this.$$title;
        delete this.$$mandatoryFlag;
        delete this.$$fieldValue;
        delete this.$$description;
        delete this._helpFlag;
        delete this._boxPicker;
        if (this.$$item) {
            this.$$item.undelegate();
        }
        if (onDispose) {
            delete this._buttons;
            if (this._menusController) {
                document.controller.disposeObject(this._menusController);
                delete this._menusController;
            }
            
        }
    },
    _bindAutoSize: function(bind){
        document.site[bind ? "addResizeListener" : "removeResizeListener"](this);
    },
    getHtmlInput: function(){
        return "<input type='text'/>";
    },
    render: function(){
        if (this.$isEditMode) {
            var inputHtml;
            if (this.$item.$rows) {
                inputHtml = "<textarea rows='" + this.$item.$rows + "'/>";
            }
            else {
                inputHtml = this.getHtmlInput();
            }
            var input = (this.$$input = $(inputHtml))[0];
            input.className = this.$skinInput;
            if (this.$item.$css) {
                input.className += " " + this.$item.$css;
            }
            
            if (this.$field.$links && (this.$field.$links.$lookup || this.$field.$links.$tunnel || this.$field.$links.$suggest)) {
                this._appendLinksPicker();
            }
            else {
                this.$$fieldValue[0].appendChild(input);
            }
            
        }
    },
    _appendLinksPicker: function(){
        if (this.$field.$links) {
            if (this.$field.$links.$suggest) {
                this._appendAutoComplete(this.$field.$links.$suggest);
            }
            if (this.$field.$links.$lookup) {
                this._appendPicker("lookup");
            }
            if (this.$field.$links.$tunnel) {
                this._appendPicker("tunnel");
            }
        }
    },
    _appendAutoComplete: function($suggest){
        if ($suggest !== null) {
            this._isAutoComplete = true;
            this.$$fieldValue[0].appendChild(this.$$input[0]);
        }
    },
    toggleAutoCompleteList: function(show){
        var self = this;
        if (!self._autoCompletePopup && show !== false) {
            self.$$item.attr("id", self.id);
            
            self.focus();
            var div = document.createElement("div");
            div.className = this.$skin + "-autocomplete-list";
            this._$$list = $(div);
            self._autoCompletePopup = self.boxParent.openDialog({
                content: self,
                $dialogMode: "popup",
                $$dialog: self._$$list,
                position: {
                    my: "left top",
                    at: "left bottom",
                    of: self.$$input
                },
                onClose: function(){
                    self._autoCompletePopup = null;
                }
            });
        }
        else {
            if (self._autoCompletePopup) {
                if (show) {
                    self._autoCompletePopup.resize();
                }
                else {
                    self._autoCompletePopup.close();
                }
            }
        }
    },
    onInputKeydown: function($$input, event){
        if (this._isAutoComplete) {
            var self = this;
            clearTimeout(self._searching);
            self._searching = setTimeout(function(){
                // only search if the value has changed
                if (self.term !== self.getDataValue()) {
                    self.selectedItem = null;
                    //self.search(null, event);
                    self.toggleAutoCompleteList();
                }
            }, 300);
        }
    },
    _appendPicker: function(pickerType, increment){
        var input = this.$$input[0];
        if (!this._boxPicker) {
            this._boxPicker = document.createElement("div");
            this._boxPicker.className = this.$skinInput + "-box";
            this._boxPicker.appendChild(input);
            this._boxPickerPaddingRight = 0;
            this.$$fieldValue[0].appendChild(this._boxPicker);
        }
        var css = this.$skinInput + "-" + pickerType;
        if (this.$item.$css) {
            css = this.$item.$css + " " + css;
        }
        input.className = this.$skinInput + " " + css;
        var btn = document.createElement("a");
        btn.className = css + "-picker";
        btn.setAttribute("data-s-picker", pickerType);
        if (increment !== false) {
            btn.style.right = this._boxPickerPaddingRight + "px";
            if (this.$item.$inplace && this.valueBtnsChildren) {
                input.style.paddingRight = ((this.valueBtnsChildren * 17) + (this._boxPickerPaddingRight += 20)) + "px";
            }
            input.style.paddingRight = (this._boxPickerPaddingRight += 20) + "px";
        }
        this._boxPicker.appendChild(btn);
        return btn;
    },
    _doClickPicker: function(){
    
    },
    onFieldInputEvent: function(event){
        var self = this;
        self.getPage().externalAdapter.onFieldEvent({
            field: self,
            event: event,
            doEvent: function(){
                //    onInputFocusin,onInputFocusout,onInputKeyup,onInputKeydown,onInputKeypress: function($$input, event){
                var fnct = "onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1);
                if (self[fnct]) {
                    self[fnct]($(event.target), event);
                }
            }
        });
    },
    onClickPicker: function($$btn){
        var self = this;
        document.site.onBeforClick();
        if (!self.authoringNode && !self.$isDisabled) {
            var pickerType = $$btn[0].getAttribute("data-s-picker");
            self.getPage().externalAdapter.onFieldClickPicker({
                field: self,
                pickerType: pickerType,
                doEvent: function(options){
                    switch ($$btn[0].getAttribute("data-s-picker")) {
                        case "lookup":
                            self.focus();
                            self.boxParent.openDialog({
                                article: self.getArticle(),
                                $url: self.$field.$links.$lookup.$url,
                                onSelectRecord: function(selectedRecords){
                                    if (!self.$isDisabled && !self.$isReadOnly) {
                                        var $result = self.$field.$links.$lookup.$result;
                                        var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
                                        self.setDataValue($result ? record.dataset[$result] : record.dataset);
                                        self.focus();
                                        self.notifyFieldChange(self.currentValue);
                                    }
                                }
                            });
                            break;
                        case "tunnel":
                            break;
                        default:
                            self._doClickPicker($$btn, options);
                            break;
                    }
                }
            });
        }
    },
    getDefaultTitle: function(){
        return this.getLocalize().f_defaultTitle;
    },
    getTitle: function(){
        return this.titleText || "";
    },
    setTitle: function($title){
        this.titleText = $title || "";
        if (this.titleText.length > 0 && this.titleText[1] == "@") {
            this.titleText = this.boxParent._renderExpression(this.titleText);
        }
        if (this.$$title) {
            this.$$title.text(this.titleText);
        }
        else {
            if (this.$$input && this.$item.$isPlaceHolder) {
                this.$$input[0].setAttribute("placeholder", this.titleText);
            }
        }
    },
    appendTitle: function(){
        if (!(this.$item.$inplace || this.$item.$isTitleHidden)) {
            var label = document.createElement("label");
            label.className = this._$cssTopField + "-title";
            if (this.inputId) {
                label.setAttribute("for", this.inputId);
            }
            this.$$title = $(this._domItem.appendChild(label));
        }
    },
    _ensureButtonsVisible: function(){
        if (this._buttons) {
            if (this.$isEditMode) {
                this._buttons.style.display = "";
            }
            else {
                this._buttons.style.display = (this.currentValue != null) ? "" : "none";
            }
        }
    },
    _addButtonToValue: function(btn){
        if (!this._buttons) {
            this._buttons = document.createElement("div");
            this._buttons.className = this._$cssField + "-value-btns";
            this._buttons.style.display = "none";
            this.$$dataValue[0].appendChild(this._buttons);
            this.valueBtnsChildren = 0;
        }
        this._buttons.appendChild(btn);
        ++this.valueBtnsChildren;
        if (this.$item.$inplace && this.$$input) {
            this.$$input[0].style.paddingRight = ((this.valueBtnsChildren * 17) + (this._boxPickerPaddingRight += 20)) + "px";
        }
        else {
            this.$$dataValue[0].style.paddingRight = (this.valueBtnsChildren * 17) + "px";
        }
    },
    _removeButtonToValue: function(btn){
        if (btn) {
            --this.valueBtnsChildren;
            if (this.$item.$inplace && this.$$input) {
                this.$$input[0].style.paddingRight = ((this.valueBtnsChildren * 17) + (this._boxPickerPaddingRight += 20)) + "px";
            }
            else {
                this.$$dataValue[0].style.paddingRight = (this.valueBtnsChildren * 17) + "px";
            }
            $(btn).remove();
        }
    },
    _restoreButtonValue: function(){
        if (this._buttons) {
            this.$$dataValue[0].appendChild(this._buttons);
            if (this.$item.$inplace && this.$$input) {
                this.$$input[0].style.paddingRight = ((this.valueBtnsChildren * 17) + (this._boxPickerPaddingRight += 20)) + "px";
            }
            else {
                this.$$dataValue[0].style.paddingRight = (this.valueBtnsChildren * 17) + "px";
            }
        }
    },
    setHelp: function($help){
        if ($help != undefined) {
            this.$help = $help;
            if (this.$$title && this.titleText.length > 0) {
                if (this.$help) {
                    if (!this._helpFlag) {
                        this._helpFlag = document.createElement("a");
                        this._helpFlag.className = "s-field-help-flag";
                        this._addButtonToValue(this._helpFlag);
                    }
                }
                else {
                    if (this._helpFlag) {
                        document.site.removeDomChild(this._helpFlag);
                        delete this._helpFlag;
                        this.valueBtnsChildren--;
                    }
                }
            }
        }
    },
    setDescription: function($description){
        if ($description !== undefined) {
            var text = this.$description = $description || "";
            if (text.length > 0) {
                if (text[1] == "@") {
                    text = this.boxParent._renderExpression(text);
                }
                if (!this.$item.$inplace) {
                    if (!this.$$description) {
                        var div = document.createElement("div");
                        div.className = this.$skinField + "-desc";
                        $(this.domValueSlot).after(this.$$description = $(div));
                    }
                    this.$$description.text(text)[0].style.display = "";
                }
            }
            else {
                if (this.$$description) {
                    this.$$description[0].style.display = "none";
                }
            }
        }
    },
    setState: function(state){
        if (state.$isMandatory !== undefined) {
            this.$isMandatory = state.$isMandatory;
            if (this.$isEditMode) {
                if (this.$$title && this.titleText.length > 0) {
                    document.site.toggleClass(this.$$title[0], "s-mandatory", state.$isMandatory);
                    if (state.$isMandatory) {
                        if (!this._mandatoryFlag) {
                            this._mandatoryFlag = document.createElement("div");
                            this._mandatoryFlag.className = "s-field-mandatory-flag";
                            this.$$title[0].appendChild(this._mandatoryFlag);
                            if (document.site.developpementMode) {
                                this.$$dataValue[0].setAttribute("data-s-q-mandatory", true);
                                if (this.$$input) {
                                    this.$$input[0].setAttribute("data-s-q-mandatory", true);
                                }
                            }
                        }
                    }
                    else {
                        if (this._mandatoryFlag) {
                            document.site.removeDomChild(this._mandatoryFlag);
                            delete this._mandatoryFlag;
                            if (document.site.developpementMode) {
                                this.$$dataValue[0].removeAttribute("data-s-q-mandatory");
                                if (this.$$input) {
                                    this.$$input[0].removeAttribute("data-s-q-mandatory");
                                }
                            }
                        }
                    }
                }
                document.site.toggleClass(this.$$dataValue[0], "s-mandatory", state.$isMandatory);
            }
        }
        if (state.$isDisabled !== undefined) {
            this.$isDisabled = state.$isDisabled;
            this.$$item.attr("disabled", state.$isDisabled);
            if (this.$$input) {
                document.site.disableItem(this.$$input[0], state.$isDisabled);
            }
            if (this.$$title) {
                document.site.disableItem(this.$$title[0], state.$isDisabled);
            }
            if (this.$$description) {
                document.site.disableItem(this.$$description[0], state.$isDisabled);
            }
            document.site.disableItem(this.$$dataValue[0], state.$isDisabled);
        }
        if (state.$isHidden !== undefined) {
            this.$item.$isHidden = state.$isHidden;
            if (this.$item.$inplace) {
                this.$$dataValue.toggle(!state.$isHidden);
            }
            else {
                this.$$item.toggle(!state.$isHidden);
            }
        }
        if (state.$isReadOnly !== undefined && this.setReadOnly) {
            this.setReadOnly(state.$isReadOnly);
        }
    },
    setReadOnly: function($isReadOnly){
        this.$isReadOnly = $isReadOnly;
        if (this.$$input) {
            if (this.$isReadOnly) {
                this.$$input.attr("readonly", "readonly");
            }
            else {
                this.$$input.removeAttr("readonly");
            }
            this.$$input.toggleClass("s-readonly", this.$isReadOnly);
        }
    },
    setDataBind: function(value, record, metaData){
        if (this.getPage().externalAdapter.setDataBind(this, value, record, metaData)) {
            if (value !== undefined) {
                this.setDataValue(value, record);
            }
            this.applyMetaData(metaData);
        }
    },
    setDataValue: function(value, record){
        this.currentValue = value;
        if (this.$isEditMode) {
            this.$$input.val(this.currentValue);
        }
        else {
            this.$$fieldValue.empty();
            if (value && this.$field.$links && this.$field.$links.$details && !this.$item.$isMenusDisabled) {
                this.appendDetailLink(this.$$fieldValue, value, this.$field.$links.$details);
            }
            else {
                this.$$fieldValue.text(value);
            }
        }
    },
    //old getinputValue
    getDataValue: function(){
        return this.getInputValue ? this.getInputValue() : this.$$input.val();
    },

    /// -------------
    /// ## getCaretPosition()
    /// 
    /// Gets the current 0 based caret position in the input.
    /// 
    getCaretPosition: function() {
        return this.$$input && (this.$$input.prop("selectionDirection") === "forward" ? this.$$input.prop("selectionEnd") : this.$$input.prop("selectionStart"));
    },

    setMenus: function(metaData){
        if (!this.$item.$isFilterMode && !this.$item.$isExpressionChild) {
            if ((metaData.$links !== undefined) || (metaData.$actions !== undefined)) {
                if (!this._menusController) {
                    (this._menusController = new MenusController()).load(this);
                }
                this._menusController.setMenus(metaData);
            }
        }
    },
    applyMetaData: function(metaData, options){
        if (metaData) {
            if (metaData.$isEditMode !== undefined) {
                this.toggleEditMode(metaData.$isEditMode);
            }
            if (metaData.$title !== undefined) {
                this.setTitle(metaData.$title);
            }
            if (metaData.$description !== undefined) {
                this.setDescription(metaData.$description);
            }
            if (metaData.$help !== undefined) {
                this.setHelp(metaData.$help);
            }
            this.setState(metaData);
            if (metaData.$diagnoses !== undefined) {
                if (!this.$item.$isExpressionChild) {
                    document.site.showDiagnoses({
                        field: this,
                        $diagnoses: metaData.$diagnoses
                    }, this.boxParent, options);
                }
            }
            this.setMenus(metaData);
            if (!this.$isEditMode && metaData.$links && metaData.$links.$details) {
                if (this.currentValue && !this.$item.$isMenusDisabled) {
                    this.appendDetailLink(this.$$fieldValue, this.currentValue, metaData.$links.$details);
                }
            }
            
            if ((metaData.$type !== undefined) && (this.$field.$type != metaData.$type)) {
                fieldHelper.changeType(metaData.$type, this);
            }
        }
        this._ensureButtonsVisible();
    },
    focus: function(){
        if (this.$$input) {
            this.$$input.focus();
        }
    },
    isEmpty: function(){
        return !this.currentValue;
    },
    getDataType: function(){
        return this.$field;
    },
    toggleDiagnose: function(css, show){
        fieldHelper.toggleDiagnose(this, css, show);
    },
    drawDiagnose: function($diagnose, severityGroup){
        fieldHelper.drawDiagnose(this, $diagnose, severityGroup);
    },
    emptyDiagnoseSlot: function(){
        fieldHelper.emptyDiagnoseSlot(this);
    },
    ensureDiagnoseSlot: function(){
        fieldHelper.ensureDiagnoseSlot(this);
    },
    showErrors: function(errors, options){
        fieldHelper.showErrors(this, errors, options);
    },
    validate: function(newValue, errors){
        if (this.$item.$isFilterMode) {
            return true;
        }
        var value = (newValue || this.currentValue).toString();
        var dataType = this.getDataType();
        errors = errors || [];
        if (dataType.$isMandatory && value == '' && this.getPage().externalAdapter.notifyFldMandatoryErr()) {
            errors.push("value is mandatory (client)");
        }
        if (dataType.$pattern && value) {
            var match = new RegExp(dataType.$pattern, "i").test(value);
            if (!match) { //(match && match.index == 0 && match[0].length == value.length)) {
                errors.push("invalid value : " + value);
            }
        }
        
        if (this.validateType) {
            this.validateType(errors, value);
        }
        
        if (errors.length > 0 || this.$displayedDiagnoses) {
            this.showErrors(errors);
            var saveLinks = this.getArticle().menuItems.$save;
            if (saveLinks && saveLinks.length > 0) {
                if (!saveLinks[0].$isDisabled) {
                    this.$isServerSaveEnabled = true;
                }
                else {
                    if (this.$isServerSaveEnabled) {
                        this.$isServerSaveEnabled = false;
                    }
                }
                if (this.$isServerSaveEnabled !== undefined) {
                    this.getArticle().applyChange({
                        $actions: {
                            $save: {
                                $isDisabled: this.$isServerSaveEnabled
                            }
                        }
                    });
                }
            }
        }
        return errors.length == 0;
    },
    onInputValidate: function(event, notify){
        var newValue = this.getDataValue(event);
        if (notify || (newValue != this.currentValue)) {
            this.notifyFieldChange(newValue);
        }
    },
    onInputChange: function($$input, event){
        if (this.$item.$validationTrigger !== 'keyup') {
            this.onInputValidate(event);
        }
    },
    onInputKeyup: function($$input, event){
        if (this.$item.$validationTrigger == 'keyup' && event.keyCode == 13) {
            this.onInputValidate(event, true);
        }
    },
    notifyFieldChange: function(newValue, validated){
        var self = this;
        self.currentValue = newValue;
        if (validated || self.validate()) {
            self.getPage().externalAdapter.onFieldNotifyChange({
                field: self,
                doEvent: function(){
                    self.getArticle().notifyChange(self.$item.$bind, self.currentValue);
                }
            });
        }
    },
    toggleEditMode: function($isEditMode){
        fieldHelper.toggleEditMode(this, $isEditMode);
    },
    dispose: function(){
        this.releaseMode(true);
        
        if (this.$item) {
            if (this.$item.$isBindInputEvent) {
                this._bindInput(false);
            }
            if (this.$item.$isAutoSize) {
                this._bindAutoSize(false);
            }
        }
        delete this.domValueSlot;
        delete this.articleParent;
        delete this.page;
    }
    
});
