"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function UnknowField() {}

exports.UnknowField = helpers.defineClass(UnknowField, Field, {
	applyDesignMetaData: function(metaData, designing) {},
	onInputFocusin: function(input, event) {},
	onInputClick: function(input, event) {},
	onInputFocusout: function(input, event) {},
	appendDetailLink: function(value, $detailsLink) {},
	hideTitle: function($isTitleHidden) {},

	loadBox: function($$item) {
		this.isDiagnoseDisabled = true;
		this.$isEditMode = false;
		this.$designLevel = "field";
		this.boxPickersPadding = 0;
		this.articleParent = this.boxParent.getArticle();
		this.ensureEditMode();
		this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
		if (this.articleParent.isRecordArticle) {
			this.arrayLevel = "cell";
		}
		this._initCss();
		var css = "s-field-" + this.unknowMode;
		this._$cssTopField = css + " " + this._$cssTopField;
		this._$cssField = css + " " + this._$cssField;

		this.$$item = $$item || $(this.layoutSlot);
		if (!this.$item.$inplace) {
			this.$$item = $$item || $(document.createElement("div")).appendTo(this.$$item);
		}
		(this.domItem = this.$$item[0]).className += " " + this._$cssTopField;

		this.$rootLinks = this.$field;

		this.appendTitle();
		if (this.domTitle) {
			this.domTitle.style.display = "none";
		}
		this.domValueSlot = document.createElement("div");
		this.domValueSlot.className = this._$cssField + "-value";
		this._dataValue = this.domValueSlot;
		if (this.$item.$inplace) {
			this._core = this.domValueSlot;
			this.domItem.appendChild(this.domValueSlot);
		} else {
			this.domValueSlot = document.createElement("div");
			this.domValueSlot.className = this._$cssField + "-value-slot";
			this.domValueSlot.appendChild(this._dataValue);

			this._core = document.createElement("div");
			this._core.className = this._$cssTopField + "-core";
			this._core.appendChild(this.domValueSlot);
			this.domItem.appendChild(this._core);
		}
		this._dataValue.appendChild(this.fieldValue = document.createElement("div"));
		this.fieldValue.className = this._$cssField + "-value-read";

		this.setTitle(this.$item.$title || this.$field.$title);

		switch (this.unknowMode) {
			case "nowidget":
				this.fieldValue.textContent = document.site.localize.fieldUnknowType + ": " + this.$item.$bind + "  type=" + (this.$field.$type || "");
				break;
			case "noproto":
				this.isItemHidden = true;
				this.fieldValue.textContent = document.site.localize.fieldNoProtoype + ": " + this.$item.$bind;
				(this.page.noProtoFields = this.page.noProtoFields || []).push(this);
				break;

		}
		this.setFieldId(this.domItem);
		this.domItem.setAttribute("data-s-inout", this.id);
		this.domItem.syraFieldBind = this.$item.$bind || "";
		if (!this.$item.$inplace && !this.$isEditMode && !this.$item.$isAdvanced) {
			this.domValueSlot.style.display = 'inline-block';
		}
		if (this.$item.$isAdvanced !== undefined) {
			this.setAdvancedState(this.$item.$isAdvanced);
		}
		this.ensureLayoutMode();
		if (this.unknowMode == "noproto") {
			this.showItem(false);
		}
	},
	showAdvancedState: function(show) {
		if (show) {
			this.showItem(this.boxParent.$isAdvancedFieldsVisible);
		} else {
			this.showItem(true);
		}
	},
	setFieldWidth: function() {},
	applyFieldStyle: function(metaData) {},
	applyAutoSize: function(state) {},
	
	render: function() {

	},
	_updateBoxPickerPadding: function(add) {},
	createPicker: function(pickerType) {
		return btn;
	},
	setDescription: function($description) {

	},
	setState: function(state) {

	},
	_onSetReadOnly: function($isReadOnly) {

	},
	setDataBind: function(value, record, metaData, $bind) {

	},
	setDataValue: function(value, $bind) {

	},
	getDatasetValue: function() {},
	setDatasetValue: function() {

	},
	getInputValue: function() {
		return "";
	},
	setInputValue: function(val) {

	},
	applyMetaData: function(metaData, options) {

	},
	focus: function(select) {
		return false;
	},
	showErrors: function(errors, options) {

	},
	showDiagnoses: function(diagnoses, options) {

	},
	validate: function(newValue, errors) {
		return false;
	},
	onInputValidate: function(event, notify) {

	},
	onInputChange: function(input, event) {

	},
	notifyFieldChange: function(newValue, validated) {

	},
	setMenus: function(metaData) {

	},
	setMenusBox: function(metaData) {},
	filterMenu: function($bind) {
		return true;
	},
	_createMenusBox: function() {}
});