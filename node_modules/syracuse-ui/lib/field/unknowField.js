"use strict";
var helpers = require('syracuse-core').helpers;
var Field = require('syracuse-ui/lib/field/field').Field;

function UnknowField() {}

exports.UnknowField = helpers.defineClass(UnknowField, Field, {
	applyDesignMeta: function(metaData, designing) {},
	dispose: function() {
		if (this.$item) {
			var unknowFields = this.articleParent && this.articleParent.unknowFields;
			if (unknowFields) {
				delete unknowFields[this.$item.$bind];
			}
		}
		Field.prototype.dispose.call(this);
	},
	load: function() {
		this.isUnknowField = true;
		(this.articleParent.unknowFields = this.articleParent.unknowFields || {})[this.$item.$bind] = this;
		this.isDiagnoseDisabled = true;
		this.$isEditMode = false;
		this.$designLevel = "field";
		syra_fields.ensureEditMode(this);
		this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
		if (this.articleParent.isRecordArticle) {
			this.arrayLevel = "cell";
		}
		syra_fields.initCss(this);
		var css = "s-field-" + this.unknowMode;
		this._$cssField = css + " " + this._$cssField;

		this.domItem = this.layoutSlot;
		if (!this.$item.$inplace) {
			this.domItem = this.layoutSlot.appendChild(document.createElement("div"));
		}
		this.domItem.className += " " + this._$cssField;

		syra_fields.addTitle(this);
		this.domTitle && syra_dom.hide(this.domTitle, true);
		syra_fields.addValueSlot(this);

		this.setTitle(this.$item.$title || this.$field.$title);

		switch (this.unknowMode) {
			case "nowidget":
				this._dataValue.textContent = syra_local.fieldUnknowType + ": " + this.$item.$bind + "  type=" + (this.$field.$type || "");
				break;
			case "noproto":
				this.isItemHidden = true;
				this._dataValue.textContent = syra_local.fieldNoProtoype + ": " + this.$item.$bind;
				(this.page.noProtoFields = this.page.noProtoFields || []).push(this);
				break;

		}
		this.isField = true;
		this.domItem.syrainout = this.domItem.syraItem = this.id;
		this.domItem.syra_field_bind = this.$item.$bind || "";
		if (!this.$item.$inplace && !this.$isEditMode && !this.$item.$isAdvanced) {
			this._dataValue.style.display = 'inline-block';
		}
		syra_fields.advancedState.setState(this);
		syra_fields.ensureLayoutMode(this);
		if (this.unknowMode == "noproto") {
			syra_fields.showField(this, false);
		}
	},
	applyAutoSize: function(state) {},
	render: function() {

	},
	setDescription: function($description) {

	},
	setState: function(state) {

	},
	setValue: function() {

	},

	getInputValue: function() {
		return "";
	},
	setInputValue: function(val) {

	},
	applyMetaData: function(metaData, options) {

	},
	focus: function(select) {
		return false;
	}
});