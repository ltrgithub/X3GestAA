"use strict";
var List = require('syracuse-ui/lib/scroll/list').List;

function Lookup(field) {
	this.field = field;
	this.id = field.id + "-lookup";
	syra_item.register(this);
	if ((field.articleParent && field.articleParent.onLookupClick) ? field.articleParent.onLookupClick(field) : true) {
		field.focus && field.focus();
		var $lookup = field.$menus.$lookup;
		if (field.isChildFieldRecord) {
			field.articleParent.currentSelectRecords = null;
		}
		this.fetch();
	}
}

Lookup.prototype.fetch = function() {
	var self = this;
	if (self.field.$item.$summary) {
		self.showSummary();
	} else {
		syra_over.openModal(self.field.boxParent, {
			article: self.field.articleParent,
			$url: self.field.$menus.$lookup.$url,
			onSelectRecord: function(records) {
				self.select(records[Object.keys(records)[0]].dataset);
			}
		});
	}
};
Lookup.prototype.click = function(event, target) {
	var self = this;
	if (target.syraManage) {
		self._modalOpened = true;
		self.page.startChange();
		self.page.applyChange(self.data);
		self.page.endChange();
		self.page.menuBar && self.page.menuBar.toggleBar(false);
		syra_over.openModal(self.field.boxParent, {
			page: self.page,
			onSelectRecord: function(records) {
				self.select(records[Object.keys(records)[0]].dataset);
			},
			close: function() {
				self._modalOpened = false;
				setTimeout(function() {
					self.dispose();
				}, 100);
			}
		});
	} else {
		if (target.syraAllowEmpty) {
			self.select(null);
			self.dispose();
		} else {
			if (target.syraRecord !== undefined) {
				self.select(self.data[self.$arrayBind][target.syraRecord]);
				self.dispose();
			}
		}
	}

};


Lookup.prototype.showSummary = function() {
	var self = this;
	syra_button.disable(self.field.picker_$lookup, true);
	syra_router.loadRepresentation({
		article: self.field.articleParent,
		segments: self.field.$menus.$lookup.$url,
		success: function success($itemPage) {
			syra_pageBuilder.load({
				$itemPage: $itemPage,
				$autoFetch: false,
				success: function success(page) {
					if (self.field) {
						self.page = page;
						var selected = self.field.getValue();
						if (selected && typeof(selected) == "object") {
							selected = selected.$uuid;
						} else {
							selected = null;
						}
						var $properties = self.page.$prototype.$properties;
						var $binds = Object.keys($properties);

						for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
							if ($properties[$binds[ii]].$type == "application/x-array") {
								self.$arrayBind = $binds[ii];
								break;
							}
						}

						self.page.fetch(null, function(data, response, requestUrl) {
							if (self.field) {
								var slot = syra_dom.div();
								self.data = data;
								self.list = new List({
									css: "s-list-primary",
									parentNode: slot,
									scroll: true
								});
								var records = data[self.$arrayBind];
								var link;
								var $arrayField = self.page.$prototype.$properties[self.$arrayBind].$item;
								for (var ii = 0, jj = records.length; ii < jj; ii++) {
									var record = records[ii];
									link = self.list.addAnchor();
									if (self.field.uuidEnabled) {
										link.textContent = record.$value;
									} else {
										var title = record.$title || $arrayField.$title;
										if (title) {
											title = syra_expression.parse({
												$prototype: $arrayField
											}, title, record);
										}
										link.textContent = record[self.field.$reference.$value.$itemProp] + (title ? (" - " + title) : "");
									}
									link.syraRecord = ii;
									link.syraItem = self.id;
									link.syraOnClick = "click";
									if (selected == record.$uuid) {
										var li = link.parentNode;
										li.parentNode.insertBefore(li, li.parentNode.firstChild);
										syra_dom.toggleClass(link, "s-selected", true);
										syra_dom.toggleClass(li, "s-selected", true);
									}
								}

								if (self.field.$item.$summary.allowEmpty) {
									self.allowEmptyLink = link = syra_dom.anchor("s-list-primary-top-sep s-list-primary-btn-default", slot);
									link.textContent = syra_local.fieldSummaryEmpty.replace("{0}", self.field.getTitle());
									link.syraAllowEmpty = true;
									link.syraItem = self.id;
									link.syraOnClick = "click"
								}
								self.detailsLink = link = syra_dom.anchor("s-list-primary-top-sep s-list-primary-btn-primary", slot);
								var detailText = self.field.$item.$summary.$details || syra_local.fieldSummaryDetail.replace("{0}", self.field.getTitle());

								if (data.$totalResults && data.$totalResults != records.length) {
									detailText += (" ({0}/{1})").replace("{0}", records.length).replace("{1}", data.$totalResults);
								}
								link.textContent = detailText;
								link.syraManage = true;
								link.syraItem = self.id;
								link.syraOnClick = "click"

								var position = self.field.$item.$popupRight ? {
									my: "left top",
									at: "right top",
									of: self.field.domItem
								} : {
									my: "left top",
									at: "left bottom",
									of: self.field._dataValue
								};
								if (syra_dom.isVisible(self.field.domItem)) {
									self._popup = syra_over.openPopup(syra_site, {
										slot: slot,
										picker: (self.field.$item.$picker == "field") ? self.field.domItem : self.field._dataValue,
										position: position,
										onresize: function(maxHeight) {
											if (self.list) {
												var height = maxHeight - self.detailsLink.clientHeight;
												if (self.allowEmptyLink) {
													height -= self.allowEmptyLink.clientHeight;
												}
												self.list.resize(height);
											}
										},
										close: function() {
											self.list && self.list.dispose();
											self._popup = null;
											!self._modalOpened &&
												setTimeout(function() {
													self.dispose();
												}, 100);

										}
									});
								}
								syra_button.disable(self.field.picker_$lookup, false);
							}
						}, function() {
							syra_button.disable(self.field.picker_$lookup, false);
							return true; // default error management
						});
					} else {
						page.dispose();
					}
				},
				error: function(error) {
					syra_button.disable(self.field.picker_$lookup, false);
					syra_alert.error(error);
				}
			});
		}
	});

};

Lookup.prototype.select = function(dataset) {
	if (!this.field.$isDisabled && !this.field.$isReadOnly) {
		if (this.field.articleParent && this.field.$reference) {
			var parentDataset = this.field.articleParent.dataset;
			if (parentDataset && parentDataset.$properties) {
				var $prop = parentDataset.$properties[this.field.$reference.$value.$prop];
				if ($prop) {
					delete $prop.$diagnoses;
				}
			}
		}
		if (this.field.isChildFieldRecord) {
			this.field.articleParent.setValue(dataset, {
				$diagnoses: null
			});
			syra_form.updateDelta(this.field.articleParent, dataset);
		} else {
			this.field.setValue((dataset && this.field.$menus.$lookup.$result) ? dataset[this.field.$menus.$lookup.$result] : dataset, {
				$diagnoses: null
			});
			this.field.focus();
			syra_form.update(this.field, this.field.currentValue);
		}
	}
};
Lookup.prototype.dispose = function() {
	if (this.field) {
		delete this.field._lookupItem;
	}
	this._popup && this._popup.close();
	this.page && this.page.dispose();
	syra_item.unregister(this);
	syra_article.dispose(this);
};

function _clickPicker(options, event) {
	var field = this.parent;
	if (field._lookupItem) {
		field._lookupItem.dispose();
	} else {
		field._lookupItem = new Lookup(field);
	}
}

exports.addPicker = function(field, $menu) {
	if (field.$isEditMode && !field.picker_$lookup) {
		var btn = {
			parent: field,
			pickerId: "$lookup",
			fontIcon: "lookup",
			text: syra_local.fieldLookup,
			shortCutTip: !field.$item.$isShortcutDisabled && syra_shortCuts.tip.openLookup,
			isHidden: field.$item.$isPickerHidden,
			isDisabled: $menu.$isDisabled,
			click: _clickPicker
		};
		if (field.$item.$summary) {
			btn.fontIcon = field.$item.$popupRight ? "right_arrow" : "expand_m";
			btn.targetClick = field._dataValue;
		}
		syra_button.addFieldPicker(btn);
	}
	$menu.$isPopup = false;
};