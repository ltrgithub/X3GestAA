"use strict";
//http://www.openweb.eu.org/articles/formulaire_accessible
var helpers = require('syracuse-core/lib/helpers');
var _dateApi = require('syracuse-core/lib/types/date');
var _monthYearChoice = require('syracuse-ui/lib/field/datetime/monthYearChoice');
var shortCutsTip = require("syracuse-ui/lib/events/shortCutInvoker").shortCutsTip;

function _onChangePeriode() {
	var item = this.parent;
	if (this.period == "month") {
		item._currentDate = item._currentDate.addMonths(this.isPrev ? -1 : 1);
	} else
	if (this.period == "year") {
		item._currentDate = item._currentDate.addYears(this.isPrev ? -1 : 1);
	} else {
		item._currentDate = item._currentDate.addDays(this.isPrev ? -7 : 7);
	}
	item._drawBody();
}

function _onQuickItemClick() {
	var item = this.parent;
	item._currentDate = item._currentDate[(this.isBegin ? "begOf" : "endOf") + this.interval]((this.interval == "Week") ? 1 : undefined);
	item._drawBody();
	item.quickList.style.display = "none";
}

function _onQuickClick() {
	var item = this.parent;
	if (!item.quickList) {
		item.quickList = document.createElement("nav");
		item.quickList.style.display = "none";
		item.quickList.className = "s-calendar-quick-list";
		var intervals = ["Year", "Quarter", "Month", "Week"];
		for (var ii = 0, jj = intervals.length; ii < jj; ii++) {
			var row = document.createElement("div");
			row.className = "s-calendar-quick";
			row.syraInterval = intervals[ii];
			row.syraOnClick = "onQuickItemClick";
			row.textContent = syra_local["fdpIntervalOf" + intervals[ii]];
			row.insertBefore(syra_menus.button.add({
				parent: item,
				slot: row,
				link: document.createElement("td"),
				text: syra_local.fdpEnd,
				css: "s-calendar-quick-link",
				btnclick: _onQuickItemClick,
				interval: intervals[ii]
			}).link, row.firstChild);
			row.insertBefore(syra_menus.button.add({
				parent: item,
				slot: row,
				link: document.createElement("td"),
				text: syra_local.fdpBegin,
				css: "s-calendar-quick-link",
				btnclick: _onQuickItemClick,
				interval: intervals[ii],
				isBegin: true
			}).link, row.firstChild);
			item.quickList.appendChild(row);
		}
		item.domItem.appendChild(item.quickList);
	}
	if (item.quickList.style.display == "") {
		item.quickList.style.display = "none";
	} else {
		item.quickList.style.display = "";
		$(item.quickList).position({
			my: "left bottom",
			at: "right bottom",
			of: $(this.link)
		});
	}
}

function _onMonthClick() {
	var self = this;
	var item = self.parent;
	if (!item._month) {
		item._month = new _monthYearChoice.MonthChoice();
		item._month.create(item.field, item.domItem, item._currentDate, function(newDate) {
			item._currentDate = newDate;
			setTimeout(function() {
				item._drawBody();
				self.btnclick();
			}, 200);
			return true;
		});
		item._month.toggle(true);
	} else {
		item._month.toggle(false);
		item._month.dispose();
		delete item._month;
	}
}

function _onYearClick() {
	var self = this;
	var item = self.parent;
	if (!item._year) {
		item._year = new _monthYearChoice.YearChoice(item.field);
		item._year.create(item.field, item.domItem, item._currentDate, function(newDate) {
			item._currentDate = newDate;
			setTimeout(function() {
				item._drawBody();
				self.btnclick();;
			}, 200);
			return true;
		});
		item._year.toggle(true);
	} else {
		item._year.toggle(false);
		item._year.dispose();
		delete item._year;
	}
}

function _onDayClick(event, btn) {
	this.parent.field.setButtonValue(_dateApi.fromInternalValue(this.value).toString(this.parent.field.localFormat), this.value);
}


function DateChoice() {

}

exports.DateChoice = helpers.defineClass(DateChoice, null, {
	applyShortCut: function(shortcuts, event) {
		if (shortcuts.esc) {
			if (shortcuts.t) {
				this._currentDate = _dateApi.today();
				this._drawBody();
				return true;
			}
		}
		if (shortcuts.down || shortcuts.up || shortcuts.left || shortcuts.right) {
			if (event.shiftKey) {
				this._currentDate = this._currentDate.addMonths((shortcuts.up || shortcuts.left) ? -1 : 1);
			} else {
				if (event.ctrlKey) {
					this._currentDate = this._currentDate.addYears((shortcuts.up || shortcuts.left) ? -1 : 1);
				} else {
					if (shortcuts.down || shortcuts.up) {
						this._currentDate = this._currentDate.addDays(shortcuts.up ? -7 : 7);
					}
					if (shortcuts.left || shortcuts.right) {
						this._currentDate = this._currentDate.addDays(shortcuts.left ? -1 : 1);
					}
				}
			}
			this._drawBody();
			return true;
		}
		if (shortcuts.enter) {
			this._currentDateBtn && this._currentDateBtn.btnclick();
			return true;
		}
	},
	create: function(field, options) {
		this.domItem = document.createElement("div");
		this.domItem.className = "s-calendar";
		this.domItem.style.display = "none";
		field.domItem.appendChild(this.domItem);
		if (options && (options.internalValue || options.internalValue === "")) {
			this._selectedDate = isNaN(options.internalValue) || options.internalValue === "" ? _dateApi.today() : _dateApi.fromInternalValue(options.internalValue);
			this._currentDate = _dateApi.fromInternalValue(this._selectedDate._value);
		} else {
			var value = field.getInputValue() || "";
			this._selectedDate = value ? _dateApi.parse(value, field.localFormat) : _dateApi.today();
			this._currentDate = _dateApi.fromInternalValue(this._selectedDate._value);
		}
		this.field = field;
		this._table = document.createElement("table");
		this._table.setAttribute("cellspacing", 0);
		this._table.className = "s-calendar-content";
		this._table.appendChild(this._addHead());
		this._table.appendChild(this.body = document.createElement("tbody"));
		this._table.appendChild(this._appendFoot());
		this.domItem.appendChild(this._table);

		this._drawBody();
	},
	remove: function() {
		syra_site.dom.removeChild(this.domItem);
		this.dispose();
	},
	_addHead: function() {
		var head = document.createElement("thead");
		var row = document.createElement("tr");
		var cell = document.createElement("th");
		cell.setAttribute("colspan", 8);
		cell.className = "s-calendar-month-year";

		// prev year link
		syra_menus.button.add({
			parent: this,
			slot: cell,
			text: syra_local.fdpPrevYear,
			css: "s-calendar-btn",
			iconOnly: true,
			fontIcon: "first_step",
			shortCutTip: shortCutsTip["movePrevYear"],
			btnclick: _onChangePeriode,
			period: "year",
			isPrev: true
		});

		syra_menus.button.add({
			parent: this,
			slot: cell,
			text: syra_local.fdpPrevMonth,
			css: "s-calendar-btn",
			iconOnly: true,
			fontIcon: "prev_step",
			shortCutTip: shortCutsTip["movePrevMonth"],
			btnclick: _onChangePeriode,
			period: "month",
			isPrev: true
		});

		this._monthBtn = syra_menus.button.add({
			parent: this,
			slot: cell,
			text: syra_local.fdpChoiceMonth,
			css: "s-calendar-month-link",
			btnclick: _onMonthClick
		});

		this._yearBtn = syra_menus.button.add({
			parent: this,
			slot: cell,
			text: syra_local.fdpChoiceYear,
			css: "s-calendar-year-link",
			btnclick: _onYearClick
		});

		syra_menus.button.add({
			parent: this,
			slot: cell,
			text: syra_local.fdpNextMonth,
			css: "s-calendar-btn",
			iconOnly: true,
			fontIcon: "next_step",
			shortCutTip: shortCutsTip["moveNextMonth"],
			btnclick: _onChangePeriode,
			period: "month"
		});

		syra_menus.button.add({
			parent: this,
			slot: cell,
			text: syra_local.fdpNextYear,
			css: "s-calendar-btn",
			iconOnly: true,
			fontIcon: "last_step",
			shortCutTip: shortCutsTip["moveNextYear"],
			btnclick: _onChangePeriode,
			period: "year"
		});



		row.appendChild(cell);
		head.appendChild(row);

		row = document.createElement("tr");
		var cell = document.createElement("th");
		cell.className = "s-calendar-week-day";
		row.appendChild(cell);

		var days = [1, 2, 3, 4, 5, 6, 0];
		for (var ii = 0, jj = days.length; ii < jj; ii++) {
			var cell = document.createElement("th");
			cell.className = "s-calendar-week-day";
			cell.title = _dateApi.dayName(days[ii]);
			cell.textContent = _dateApi.dayName(days[ii], true);
			row.appendChild(cell);
		}
		head.appendChild(row);
		return head;
	},
	_appendFoot: function() {
		var row = document.createElement("tr");
		var cell = document.createElement("td");
		cell.setAttribute("colspan", 3);
		cell.className = "s-calendar-foot-week";

		syra_menus.button.add({
			parent: this,
			slot: cell,
			text: syra_local.fdpPrevWeek,
			css: "s-calendar-btn",
			iconOnly: true,
			fontIcon: "prev_step",
			shortCutTip: shortCutsTip["movePrevWeek"],
			btnclick: _onChangePeriode,
			period: "week",
			isPrev: true
		});


		var label = document.createElement("label");
		label.className = "s-calendar-foot-week-title";
		label.textContent = syra_local.fdpWeek;
		cell.appendChild(label);

		this._weekNumber = document.createElement("label");
		this._weekNumber.className = "s-calendar-foot-week-title-num";
		cell.appendChild(this._weekNumber);

		syra_menus.button.add({
			parent: this,
			slot: cell,
			text: syra_local.fdpNextWeek,
			css: "s-calendar-btn",
			iconOnly: true,
			fontIcon: "next_step",
			shortCutTip: shortCutsTip["moveNextWeek"],

			btnclick: _onChangePeriode,
			period: "week"
		});

		row.appendChild(cell);

		cell = document.createElement("td");
		cell.setAttribute("colspan", 3);
		cell.className = "s-calendar-foot-today";

		syra_menus.button.add({
			parent: this,
			slot: cell,
			text: syra_local.fdpToday,
			css: "s-calendar-today-link",
			shortCutTip: shortCutsTip["moveToday"],
			btnclick: function() {
				var selector = this.parent;
				selector._currentDate = _dateApi.today();
				selector.field.setButtonValue(_dateApi.fromInternalValue(selector._currentDate._value).toString(selector.field.localFormat), selector._currentDate._value);
			}
		});

		row.appendChild(cell);

		cell = document.createElement("td");
		cell.setAttribute("colspan", 2);
		cell.className = "s-calendar-foot-more";

		syra_menus.button.add({
			parent: this,
			slot: cell,
			text: syra_local.fdpQuickSelection,
			css: "s-calendar-btn",
			iconOnly: true,
			fontIcon: "next_step",
			btnclick: _onQuickClick
		});
		row.appendChild(cell);

		var foot = document.createElement("tfoot");
		foot.appendChild(row);
		return foot;
	},

	_drawBody: function() {
		var curMonth = this._currentDate.month;
		var month = _dateApi.monthName(curMonth);

		syra_menus.button.setText(this._monthBtn, month);
		syra_menus.button.setText(this._yearBtn, this._currentDate.year);

		syra_site.dom.empty(this.body);

		var curDate = _dateApi.fromInternalValue(this._currentDate._value);
		var begOfMonth = curDate = curDate.begOfMonth();
		curDate = curDate.begOfWeek(1);
		for (var weekRow = 0; weekRow < 6; weekRow++) {
			var row = document.createElement("tr");
			var weekDay = (weekRow == 0) ? begOfMonth : curDate;
			var cell = document.createElement("td");
			cell.className = "s-calendar-week-num";
			row.appendChild(cell);
			cell.textContent = weekDay.week;
			for (var day = 0; day < 7; day++) {
				var btn = syra_menus.button.add({
					parent: this,
					slot: row,
					link: document.createElement("td"),
					text: curDate.day,
					css: "s-calendar-day-link",
					btnclick: _onDayClick,
					value: curDate._value
				});
				if (curMonth != curDate.month) {
					btn.link.className += " s-calendar-other-month";
				}
				if (this._currentDate.equals(curDate)) {
					btn.link.className += " s-calendar-select";
					this._currentDateBtn = btn;
				}
				curDate = curDate.addDays(1);
			}
			this.body.appendChild(row);
		}
		this._weekNumber.textContent = this._currentDate.week;
	},
	dispose: function() {
		syra_site.disposeObject(this);
	}
});