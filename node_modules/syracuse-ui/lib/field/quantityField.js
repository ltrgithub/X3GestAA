"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ReferenceField = require('./referenceField').ReferenceField;
var ChoiceField = require('syracuse-ui/lib/field/choice/choiceField').ChoiceField;
var Field = require('./field').Field;
var NumericField = require('syracuse-ui/lib/field/numericField').NumericField;

function QuantityField(){
}

exports.QuantityField = helpers.defineClass(QuantityField, Field, {
    initialize: function(){
        var self = this;
        
        if (!self.$field.$unit) {
            self.showErrors(["no unit property specified"]);
            return;
        }
        
        var numFieldInput = document.createElement("div");
        var unitFieldInput = document.createElement("div");
        
        self.$$item[0].appendChild(numFieldInput);
        self.$$item[0].appendChild(unitFieldInput);
        
        // TODO loadNewItem + bind ?
        self.numField = self.page.loadNewItem(numFieldInput, {
            $field: this.$field.$value,
            $bind: this.$item.$bind,
            $isTitleHidden: true,
            $skin2: "s-field-quantity-num",
            $isEditMode: this.$item.$isEditMode
        });
        
        
        
        // getting unit field
        var $unitField;
        switch (typeof self.$field.$unit) {
            case 'object': // unit descriptor is 'inlined' into quantity descriptor
                $unitField = self.$field.$unit;
                break;
            case 'string': // unit descriptor is at the same level, and can be shared by several quantity properties
                $unitField = self.page.$prototype.$properties[self.$field.$unit];
                break;
            default:
                self.showErrors(["no unit property specified"]);
                return;        }
        
        
        // set unit field according to type
        if ($unitField && $unitField.$type) {
            self.$unitFieldType = $unitField.$type;
            if ($unitField.$type == 'application/x-reference' || $unitField.$type == 'application/x-choice') {
                self.unitField = self.page.loadNewItem(unitFieldInput, {
                    $bind: typeof self.$field.$unit == 'string' ? self.$field.$unit : "$unit",
                    $skin2: "s-field-quantity-unit",
                    $isTitleHidden: true,
                    $isEditMode: this.$item.$isEditMode,
                    $format: "$combo"
                });
            }
            else {
                self.showErrors(["wrong unit type. must be xreference or xchoice"]);
                return;
            }
            
        }
        else {
            self.showErrors(["no unit type specified"]);
            return;
        }
    },
    render: function(){
        Field.prototype.render.call(this);
        if (this.$isEditMode) {
            //TODO
        }
    }
});
