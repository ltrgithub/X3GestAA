"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ReferenceField = require('./referenceField').ReferenceField;
var ChoiceField = require('syracuse-ui/lib/field/choice/choiceField').ChoiceField;
var Field = require('./field').Field;
var NumericField = require('syracuse-ui/lib/field/numericField').NumericField;

function QuantityField() {}

exports.QuantityField = helpers.defineClass(QuantityField, Field, {
	initialize: function() {
		if (!(this.$isEditMode || this.$item.$isEditMode)) {
			this.$cssFieldType = this.$field.$type.replace("application/x-", "s-");
		}
	},
	_createValueContainer: function() {
		this._core = this._dataValue = document.createElement("div");
		if (!this.$item.$inplace) {
			var css = this._$cssField + "-core";
			if (!this.$item.$isTopLabelAlignment) {
				css += " s-beside";
			}
			this._core.className = css;

		}
		this.domItem.appendChild(this._core);
		this.fieldValue = this._dataValue;
	},
	render: function() {
		if (!this.$field.$unit) {
			this.showErrors([syra_local.qfNoUnitProperty || syra_local.qfNoUnitProperty]);
			return;
		}
		this._core.className += " s-field-quantity";

		var numFieldInput = document.createElement("div");
		numFieldInput.className = "s-field-quantity-num";
		var unitFieldInput = document.createElement("div");
		unitFieldInput.className = "s-field-quantity-unit";

		// ------- creating numeric field

		this.numField = this.page.loadNewItem(numFieldInput, {
			$field: this.$field.$value,
			$bind: this.$item.$bind,
			$isTitleHidden: true,
			$skin2: "s-field-quantity-num",
			$inplace: this.$item.$inplace,
			$isDiagnoseInline: true,
			$skinInput: this.$skinInput,
			$isEditMode: this.$item.$isEditMode || this.$isEditMode,
			$isFilterMode: this.$item.$isFilterMode,
			$isMenusHidden: this.$item.$isMenusHidden
		}, this.boxParent);

		// ------- creating unit field

		// getting unit field property
		var $unitField;
		this.unitArticleParent = this.articleParent;
		switch (typeof this.$field.$unit) {
			case 'object':
				// unit descriptor is 'inlined' into quantity descriptor
				$unitField = this.$field.$unit;
				break;
			case 'string':
				// unit descriptor is at the same level, and can be shared by several quantity properties
				//var articleParent = this.articleParent;
				while (this.unitArticleParent) {
					if (!(this.unitArticleParent.$prototype && this.unitArticleParent.$prototype.$properties && this.unitArticleParent.$prototype.$properties[this.$field.$unit])) {
						this.unitArticleParent = this.unitArticleParent.articleParent;
					} else {
						$unitField = this.unitArticleParent.$prototype.$properties[this.$field.$unit];
						break;
					}
				}
				break;
			default:
				this.showErrors([syra_local.qfNoUnitProperty || syra_local.qfNoUnitProperty]);
				return;
		}

		// set unit field according to type
		if ($unitField && $unitField.$type) {
			this.$unitFieldType = $unitField.$type;
			if ($unitField.$type == 'application/x-reference' || $unitField.$type == 'application/x-choice') {
				this.unitField = this.page.loadNewItem(unitFieldInput, {
					$bind: typeof this.$field.$unit == 'string' ? this.$field.$unit : "$unit",
					$field: $unitField,
					$isUnitField: true,
					$skin2: "s-field-quantity-unit",
					$inplace: this.$item.$inplace,
					$isDiagnoseInline: true,
					$skinInput: this.$skinInput,
					$isTitleHidden: true,
					$isEditMode: false,
					$format: $unitField.$type == 'application/x-choice' ? "$combo" : ""
				}, this.unitArticleParent);

				if (this.unitArticleParent != this.articleParent) {
					this.unitField.setDataBind(this.unitArticleParent.dataset[this.unitField.$item.$bind], this.unitArticleParent.dataset, null, this.unitField.$item.$bind);
				}
			} else {
				this.showErrors([syra_local.qfWrongUnitType || syra_local.qfWrongUnitType]);
				return;
			}

		} else {
			this.showErrors([syra_local.qfNoUnitType || syra_local.qfNoUnitType]);
			return;
		}

		// if filter record, append numField only
		if (this.boxParent && this.boxParent.$facet == "$filter") {
			this._core.className = "s-field-quantity-filter";
			numFieldInput.className = "s-field-quantity-num-filter";
			this._core.appendChild(numFieldInput);
		} else {
			// ------- display quantity unit element according to locale preferences
			if (syra_site.userProfile && syra_site.userProfile.getCurrencyPosition() == "right") {
				this._core.appendChild(numFieldInput);
				this._core.appendChild(unitFieldInput);
			} else {
				this._core.appendChild(unitFieldInput);
				this._core.appendChild(numFieldInput);
			}
		}
		this.input = this.numField && this.numField.input;
	},
	getDataValue: function() {
		if (this.numField.$field.$type == "application/x-decimal") {
			return this.$item.$isFilterMode ? parseFloat(this.numField && this.numField.getDataValue() || "", 10) : this.numField && this.numField.getDataValue() || "";
		} else {
			if (this.numField.$field.$type == "application/x-integer") {
				return this.$item.$isFilterMode ? parseInt(this.numField && this.numField.getDataValue() || "", 10) : this.numField && this.numField.getDataValue() || "";
			} else {
				this.showErrors([syra_local.qfWrongValueType || syra_local.qfWrongValueType]);
				return;
			}
		}
	},
	setFieldWidth: function() {
		if (this.$isEditMode && !this.hasFreeWidth && !this.$item.$rows && !this.$item.$inplace && this._dataValue && !this.$item.$isAutoSizeDisabled) {
			this.widthValue = this.fieldHelper.getCardFieldWidth(this.$field);
			this.unitField._dataValue.style.maxWidth = this.numField._dataValue.style.maxWidth = this.widthValue + "px";
		}
	},
	setDataValue: function(value, $bind) {},
	dispose: function() {
		this.unitArticleParent = this.numField = this.unitField = null;
		Field.prototype.dispose.call(this);
	}
});