"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ReferenceField = require('./referenceField').ReferenceField;
var ChoiceField = require('syracuse-ui/lib/field/choice/choiceField').ChoiceField;
var Field = require('./field').Field;
var NumericField = require('syracuse-ui/lib/field/numericField').NumericField;

function QuantityField() {}

exports.QuantityField = helpers.defineClass(QuantityField, Field, {
	initialize: function() {
		this.$cssFieldType = this.$field.$type.replace("application/x-", "s-");
	},
	render: function() {
		var self = this;

		if (!self.$field.$unit) {
			self.showErrors(["no unit property specified"]);
			return;
		}

		var qunitField = document.createElement("div");
		qunitField.className = "s-field-quantity";

		var numFieldInput = document.createElement("div");
		numFieldInput.className = "s-field-quantity-num";
		var unitFieldInput = document.createElement("div");
		unitFieldInput.className = "s-field-quantity-unit";

		// ------- creating numeric field

		self.numField = self.page.loadNewItem(numFieldInput, {
			$field: this.$field.$value,
			$bind: this.$item.$bind,
			$isTitleHidden: true,
			$skin2: "s-field-quantity-num",
			$inplace: this.$item.$inplace,
			$skinInput: this.$skinInput,
			$isEditMode: this.$item.$isEditMode || this.$isEditMode,
			$isFilterMode: this.$item.$isFilterMode
		}, self.boxParent);

		// ------- creating unit field

		// getting unit field property
		var $unitField;
		this.unitArticleParent = self.articleParent;
		switch (typeof self.$field.$unit) {
			case 'object':
				// unit descriptor is 'inlined' into quantity descriptor
				$unitField = self.$field.$unit;
				break;
			case 'string':
				// unit descriptor is at the same level, and can be shared by several quantity properties
				//var articleParent = this.articleParent;
				while (this.unitArticleParent) {
					if (!(this.unitArticleParent.$prototype && this.unitArticleParent.$prototype.$properties && this.unitArticleParent.$prototype.$properties[self.$field.$unit])) {
						this.unitArticleParent = this.unitArticleParent.articleParent;
					} else {
						$unitField = this.unitArticleParent.$prototype.$properties[self.$field.$unit];
						break;
					}
				}
				break;
			default:
				self.showErrors(["no unit property specified"]);
				return;
		}

		// set unit field according to type
		if ($unitField && $unitField.$type) {
			self.$unitFieldType = $unitField.$type;
			if ($unitField.$type == 'application/x-reference' || $unitField.$type == 'application/x-choice') {
				self.unitField = self.page.loadNewItem(unitFieldInput, {
					$bind: typeof self.$field.$unit == 'string' ? self.$field.$unit : "$unit",
					$field: $unitField,
					$isUnitField: true,
					$skin2: "s-field-quantity-unit",
					$inplace: self.$item.$inplace,
					$skinInput: self.$skinInput,
					$isTitleHidden: true,
					$isEditMode: false,
					$format: $unitField.$type == 'application/x-choice' ? "$combo" : ""
				}, self.unitArticleParent);

				if (self.unitArticleParent != self.articleParent) {
					self.unitField.setDataBind(self.unitArticleParent.dataset[self.unitField.$item.$bind], self.unitArticleParent.dataset, null, self.unitField.$item.$bind);
				}
			} else {
				self.showErrors(["wrong unit type. must be xreference or xchoice"]);
				return;
			}

		} else {
			self.showErrors(["no unit type specified"]);
			return;
		}

		// if filter record, append numField only
		if (self.boxParent && self.boxParent.$facet == "$filter") {
			qunitField.className = "s-field-quantity-filter";
			numFieldInput.className = "s-field-quantity-num-filter";
			qunitField.appendChild(numFieldInput);
		} else {
			// ------- display quantity unit element according to locale preferences
			if (document.site.userProfile && document.site.userProfile.getCurrencyPosition() == "right") {
				qunitField.appendChild(numFieldInput);
				qunitField.appendChild(unitFieldInput);
			} else {
				qunitField.appendChild(unitFieldInput);
				qunitField.appendChild(numFieldInput);
			}
		}
		self._dataValue.appendChild(qunitField);
		self._input = self.numField && self.numField._input;
	},
	getDataValue: function() {
		if (this.numField.$field.$type == "application/x-decimal") {
			return this.$item.$isFilterMode ? parseFloat(this.numField && this.numField.getDataValue() || "", 10) : this.numField && this.numField.getDataValue() || "";
		} else {
			if (this.numField.$field.$type == "application/x-integer") {
				return this.$item.$isFilterMode ? parseInt(this.numField && this.numField.getDataValue() || "", 10) : this.numField && this.numField.getDataValue() || "";
			} else {
				this.showErrors(["quantity has wrong $value type. must be xdecimal or xinteger"]);
				return;
			}
		}
	},
	setFieldWidth: function() {
		if (this.$isEditMode && !this.$item.$inplace && this.domValueSlot && !this.$item.$isAutoSizeDisabled) {
			var widthValue = document.site.getFieldWidth(this.$field, true);
			this.unitField.domValueSlot.style.maxWidth = this.numField.domValueSlot.style.maxWidth = widthValue + "px";
			if ((this.unitField.layoutParent && widthValue > this.unitField.layoutParent.fieldMaxWidth) && (this.numField.layoutParent && widthValue > this.numField.layoutParent.fieldMaxWidth)) {
				this.unitField.fieldMaxWidth = this.numField.fieldMaxWidth = widthValue;
			}
		}
	},
	setDataValue: function(value, $bind) {},
	dispose: function() {
		this.unitArticleParent = this.numField = this.unitField = null;
		Field.prototype.dispose.call(this);
	}
});