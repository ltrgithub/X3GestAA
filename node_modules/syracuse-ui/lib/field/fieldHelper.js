"use strict";
var helpers = require('syracuse-core/lib/helpers');

exports.appendQualityAtt = function(field, dom){
    dom.setAttribute("data-s-q-bind", field.$item.$bind);
    dom.setAttribute("data-s-q-title", field.getTitle());
    if (field.$field.$X3Name) {
        dom.setAttribute("data-s-q-x3Name", field.$field.$X3Name);
    }
};
exports.changeType = function($newType, oldField){
    var article = oldField.getArticleParent ? oldField.getArticleParent() : oldField.getArticle();
    var $oldField = article.$prototype.$properties[oldField.$item.$bind];
    if (typeof($newType) == "string") {
        $oldField.$type = $newType;
    }
    else {
        $oldField = $newType;
    }
    var newField = oldField.page.createNewItem(oldField.$item, oldField.boxParent);
    oldField.layoutParent.appendNewItem({
        newItem: newField,
        load: oldField.$$item != null,
        targetItem: oldField,
        action: "insertAfter"
    });
    var boundFields = article.boundFields[newField.$item.$bind];
    boundFields.splice(boundFields.indexOf(newField), 1);
    boundFields.splice(boundFields.indexOf(oldField), 1, newField);
    article.removeItem(oldField, true);
};


exports.toggleEditMode = function(field, $isEditMode){
    if ($isEditMode === undefined) {
        $isEditMode = !field.$isEditMode;
    }
    if (field.$isEditMode != $isEditMode) {
        field.$isEditMode = field.$item.$isEditMode = $isEditMode;
        var $$newItem;
        if (field.$item.$inplace) {
            field.$$container.empty();
        }
        else {
            field.$$item.replaceWith($$newItem = $(document.createElement("div")));
        }
        field.releaseMode();
        field.loadBox($$newItem);
        
        field.setTitle(field.getTitle());
        field.setDescription(field.$description);
        field.setState(field);
        
        //field._restoreButtonValue();
    }
};

exports.applyFieldStyle = function(field, metaData){
    var target;
    if (metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined) {
        target = field._input ? field._input : field._dataValue;
        if (field.page.$isFusionPage) {
            if (field.$valueStyle) {
                var curStyle = target.getAttribute("style") || "";
                target.setAttribute("style", curStyle.replace(field.$valueStyle, ""));
            }
            if (field.$valueStyle = metaData.$fieldStyle || metaData.$valueStyle) {
                var curStyle = target.getAttribute("style") || "";
                target.setAttribute("style", curStyle + ";" + field.$valueStyle);
            }
        }
        else {
            if (field.$valueStyle) {
                document.site.toggleClass(target, field.$valueStyle, false);
            }
            field.$valueStyle = (metaData.$fieldStyle || metaData.$valueStyle || "").replace("cst_sty_", "s-cst-sty-");
            document.site.toggleClass(target, field.$valueStyle, true);
        }
    }
    if (field.domTitle && (metaData.$fieldStyle !== undefined || metaData.$titleStyle !== undefined)) {
        if (field.page.$isFusionPage) {
            target = field._input ? field._input : field._dataValue;
            if (field.$titleStyle) {
                var curStyle = field.domTitle.getAttribute("style") || "";
                field.domTitle.setAttribute("style", curStyle.replace(field.$titleStyle, ""));
            }
            if (field.$titleStyle = metaData.$fieldStyle || metaData.$titleStyle || "") {
                var curStyle = target.getAttribute("style") || "";
                field.domTitle.setAttribute("style", curStyle + ";" + field.$titleStyle);
            }
        }
        else {
            if (field.$titleStyle) {
                document.site.toggleClass(field.domTitle, field.$titleStyle, false);
            }
            field.$titleStyle = (metaData.$fieldStyle || metaData.$titleStyle || "").replace("cst_sty_", "s-cst-sty-");
            document.site.toggleClass(field.domTitle, field.$titleStyle, true);
        }
    }
};

/********************** Diagnose Management  ***********************************************/
exports.drawDiagnose = function(field, $diagnose, severityGroup){
    var link = document.createElement("a");
    
    var label = document.createElement("label");
    label.className = "s-field-diagnose-msg-" + severityGroup.severity;
    
    if (field.isDiagnoseInPlace) {
        if (!field._diagnoseFlag) {
            field._diagnoseFlag = document.createElement("a");
            field._diagnoseFlag.className = "s-field-diagnose-flag-" + severityGroup.severity;
            field.appendToPickerBox(field._diagnoseFlag);
        }
        link.className = "s-field-diagnose-link s-field-diagnose-link-" + severityGroup.severity;
        label.innerHTML = document.site.formatHTMLMessage($diagnose.message);
        
        $(label).prepend($(link).text(field.getTitle() + ":")).appendTo(field.domDiagnose);
    }
    else {
        if (!severityGroup.$$group.children().children().children("a[data-s-menu='" + field.id + "']")[0]) {
            link.className = "s-diag-view-msg-link";
            //severityGroup.drawLabel($diagnose).prepend($(link).text(field.$field.$title + ":")).appendTo(severityGroup.$$group);
			var options = {};
			options.$$fieldLink = $(link).text(field.$field.$title + ":");
			options.field = field;
            severityGroup.drawDiagnose($diagnose, options);
            drawBoxParentDiagnose(field, $diagnose);
            field.diagSeverities = field.diagSeverities || [];
            field.diagSeverities.push($diagnose.severity);
        }
        label.innerHTML = document.site.formatHTMLMessage($diagnose.message);
        field.domDiagnose.appendChild(label);
        link.setAttribute("data-s-menu", field.id);
    }
    link.setAttribute("data-s-article", field.articleParent.id);
    link.setAttribute("data-s-field", field.id);
};





function BoxDiagnose(titleDom){
    this.titleDom = titleDom;
    this.severitiesCount = {
        "error": 0,
        "fatal": 0,
        "warning": 0,
        "info": 0
    };
}

helpers.defineClass(BoxDiagnose, null, {
    addSeverityCount: function(severity){
        this.severitiesCount[severity]++;
    },
    removeSeverityCount: function(severity){
        this.severitiesCount[severity]--;
    },
    getPrioritySeverity: function(){
        var self = this;
        var priorityOrder = ["fatal", "error", "warning", "info"];
        var severity = "";
        for (var i = 0; i < priorityOrder.length; i++) {
            severity = self.severitiesCount[priorityOrder[i]] > 0 ? priorityOrder[i] : severity;
            if (severity) {
                return severity;
            }
        }
        return severity;
    },
    appendDiagnoseIcon: function(severity, $isTab){
        var self = this;
        var diagClassNameRoot = $isTab ? "s-box-tab-" : "s-box-collapsible-";
        
        // add severity count
        self.addSeverityCount(severity);
        
        var prioritySeverity = self.getPrioritySeverity();
        
        // two possibilites 
        //"icon already" -> change icon or not ?
        //"icon not yet" -> add it
        
        // icon already appended
        if (self.$hasIcon) {
            // severity priority change ? else do nothing
            
            if (self.prioritySeverity != prioritySeverity) {
                document.site.toggleClass(self.titleDom, diagClassNameRoot + self.prioritySeverity);
                document.site.toggleClass(self.titleDom, diagClassNameRoot + prioritySeverity, true);
                //self.$$titleDom.toggleClass(diagClassNameRoot + self.prioritySeverity).toggleClass(diagClassNameRoot + prioritySeverity);
            }
        }
        // icon not yet appended.
        else {
            document.site.toggleClass(self.titleDom, diagClassNameRoot + severity, true);
            //self.$$titleDom.addClass(diagClassNameRoot + severity);
            self.$hasIcon = true;
            
        }
        self.prioritySeverity = prioritySeverity;
        self.diagClassName = diagClassNameRoot + self.prioritySeverity;
    },
    removeDiagnoseIcon: function(severity, $isTab){
        var self = this;
        var diagClassNameRoot = $isTab ? "s-box-tab-" : "s-box-collapsible-";
        var diagClassName = diagClassNameRoot + severity;
        
        // decrease severity count
        self.removeSeverityCount(severity);
        
        // change icon if necessary
        // case 1 : no more priority -> remove
        // case 2 : priority
        // case 2-1 : same as old one, do nothing
        // case 2-2 : different than previous one, change
        
        var prioritySeverity = self.getPrioritySeverity();
        if (!prioritySeverity) {
            document.site.toggleClass(self.titleDom, diagClassNameRoot + self.prioritySeverity);
            //self.$$titleDom.toggleClass(diagClassNameRoot + self.prioritySeverity);
            self.$hasIcon = false;
        }
        else {
            if (self.prioritySeverity != prioritySeverity) {
                document.site.toggleClass(self.titleDom, diagClassNameRoot + self.prioritySeverity);
                document.site.toggleClass(self.titleDom, diagClassNameRoot + prioritySeverity, true);
                //self.$$titleDom.toggleClass(diagClassNameRoot + self.prioritySeverity).toggleClass(diagClassNameRoot + prioritySeverity);
            }
        }
        self.prioritySeverity = prioritySeverity;
        self.diagClassName = diagClassNameRoot + self.prioritySeverity;
    },
    dispose: function(){
        delete this.severitiesCount;
        delete this.titleDom;
        if (this.$hasIcon) {
            delete this.$hasIcon;
        }
        if (this.prioritySeverity) {
            delete this.prioritySeverity;
        }
        if (this.diagClassName) {
            delete this.diagClassName;
        }
    }
});




function drawBoxParentDiagnose(field, $diagnose){
    var f = field;
    
    while (f.boxParent) {
        // collapsible
        //f.boxParent.$opened
        if (f.boxParent.$item.$isBoxCollapsable) {
            var html = document.createElement("a");
            f.boxParent._header.appendChild(html);
            (f.boxParent.boxDiagnose = f.boxParent.boxDiagnose || new BoxDiagnose(html)).appendDiagnoseIcon($diagnose.severity);
        }
        
        else 
            // tab 
            //f.boxParent.$isTabLayout
            if (f.boxParent._tabTitle) {
                (f.boxParent.boxDiagnose = f.boxParent.boxDiagnose || new BoxDiagnose(f.boxParent._tabTitle)).appendDiagnoseIcon($diagnose.severity, true);
            }
        f = f.boxParent;
    }
};

function emptyBoxParentDiagnose(field){
    var f = field;
    if (field.diagSeverities) {
        while (f.boxParent) {
            if (f.boxParent.boxDiagnose) {
                // collapsible
                if (f.boxParent.$item.$isBoxCollapsable) {
                    for (var ii = 0; ii < field.diagSeverities.length; ii++) {
                        f.boxParent.boxDiagnose.removeDiagnoseIcon(field.diagSeverities[ii]);
                    }
                }
                else 
                    // tab 
                    if (f.boxParent._tabTitle) {
                        for (var ii = 0; ii < field.diagSeverities.length; ii++) {
                            f.boxParent.boxDiagnose.removeDiagnoseIcon(field.diagSeverities[ii], true);
                        }
                    }
            }
            f = f.boxParent;
        }
        field.diagSeverities = null;
    }
};

exports.emptyDiagnoseSlot = function(field){
    if (field.domDiagnose) {
        document.site.emptyDom(field.domDiagnose);
        field.domDiagnose.style.visibility = "hidden";
        if (field._diagnoseFlag) {
            field.removeFromPickerBox(field._diagnoseFlag);
            delete field._diagnoseFlag;
        }
    }
    if (field.diagSeverities) {
        for (var ii = 0; ii < field.diagSeverities.length; ii++) {
            field.toggleDiagnose("s-" + field.diagSeverities[ii]);
        }
    }
    emptyBoxParentDiagnose(field);
};
exports.ensureDiagnoseSlot = function(field){
    if (!field.domDiagnose) {
        field.domDiagnose = document.createElement("div");
        field.domDiagnose.className = "s-field-diagnose";
        if (field.$item.$inplace && field.articleParent.ensureFieldDiagnoseSlot) {
            field.isDiagnoseInPlace = true;
            field.articleParent.ensureFieldDiagnoseSlot(field);
        }
        else {
            field._core.appendChild(field.domDiagnose);
        }
    }
    else {
        document.site.emptyDom(field.domDiagnose);
    }
};

exports.showErrors = function(field, errors, options){
    field.applyMetaData({
        $diagnoses: null
    }, options);
    if (errors.length > 0) {
        field.applyMetaData({
            $diagnoses: (field.$displayedDiagnoses = errors.map(function(error){
                return {
                    message: error,
                    severity: "error"
                };
            }))
        }, options);
    }
};

exports.showDiagnoses = function(field, diagnoses, options){
    field.applyMetaData({
        $diagnoses: null
    }, options);
    if (diagnoses.length > 0) {
        field.applyMetaData({
            $diagnoses: diagnoses
        }, options);
    }
};

exports.toggleDiagnose = function(field, css, show){
    if (field._input) {
        document.site.toggleClass(field._input, css, show);
    }
    document.site.toggleClass(field._dataValue, css, show);
};
