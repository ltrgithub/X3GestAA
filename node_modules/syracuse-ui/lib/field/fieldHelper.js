"use strict";

exports.changeType = function($newType, oldField){
    var article = oldField.getArticleParent ? oldField.getArticleParent() : oldField.getArticle();
    var $oldField = article.get$Properties()[oldField.$item.$bind];
    if (typeof($newType) == "string") {
        $oldField.$type = $newType;
    }
    else {
        $oldField = $newType;
    }
    var newField = document.itemFactory.create(oldField.$item, oldField.boxParent);
    oldField.layoutParent.appendNewItem({
        newItem: newField,
        load: oldField.$$item != null,
        targetItem: oldField,
        action: "insertAfter"
    });
    var boundFields = article.boundFields[newField.$item.$bind];
    boundFields.splice(boundFields.indexOf(newField), 1);
    boundFields.splice(boundFields.indexOf(oldField), 1, newField);
    article.removeItem(oldField, true);
};


exports.toggleEditMode = function(field, $isEditMode){
    if ($isEditMode === undefined) {
        $isEditMode = !field.$isEditMode;
    }
    if (field.$isEditMode != $isEditMode) {
        field.$isEditMode = field.$item.$isEditMode = $isEditMode;
        var $$newItem;
        if (field.$item.$inplace) {
            field.$$container.empty();
        }
        else {
            field.$$item.replaceWith($$newItem = $(document.createElement("div")));
        }
        if (field._$$buttons) {
            field._$$buttons.detach();
        }
        field.releaseMode();
        field.loadBox($$newItem);
        
        field.setTitle(field.titleText);
        field.setDescription(field.$description);
        field.setState(field);
        
        field._restoreButtonValue();
    }
};
