"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ContextMenu = require('./contextMenu').ContextMenu;

function MenusController(){
}

exports.MenusController = helpers.defineClass(MenusController, null, {
    load: function(field){
        this.field = field;
    },
    dispose: function(){
        document.controller.disposeObject(this.contextMenu);
        delete this.contextMenu;
        delete this.field;
    },
    appendPicker: function(picker){
        this._ensureContextMenu(picker);
        this.contextMenu.appendPicker(picker);
    },
    _ensureContextMenu: function(){
        if (!this.contextMenu) {
            this.contextMenu = new ContextMenu();
            this.contextMenu.create(this.field, {
                $isBindDisabled: true
            });
        }
    },
    ensurePickerVisible: function(show){
        if (this.contextMenu && this.contextMenu.menuPicker) {
            this.contextMenu.menuPicker.style.display = show ? "" : "none";
        }
    },
    setMenus: function(metaData){
        this._applyChange(metaData.$links);
        this._applyChange(metaData.$actions, true);
    },
    _addToContextMenu: function($menu, $isAction, $bind, article){
        $menu.$bind = ($menu.$sourceBind = $bind) + "-" + this.field.id;
        this._ensureContextMenu();
        var bound = article.menuItems[$menu.$bind];
        if (bound) {
            bound[0].setMenu($menu);
        }
        else {
            $menu.$isAction = $isAction;
            this.contextMenu._menusBox.addMenuItem($menu);
        }
    },
    _applyChange: function($menus, $isAction){
        if ($menus === null) {
            if (this.contextMenu) {
                this.contextMenu.remove();
                delete this.contextMenu;
            }
        }
        else {
            if ($menus) {
                var article = this.field.getArticle();
                var $binds = Object.keys($menus);
                var count = $binds.length;
                if (count == 0) {
                    this._ensureContextMenu();
                }
                else {
                    for (var ii = 0; ii < count; ii++) {
                        var $bind = $binds[ii];
                        switch ($bind) {
                            case "$details":
                                if (this.field && this.field.$isDetailLinkIgnore) {
                                    this._addToContextMenu($menus[$bind], $isAction, $bind, article);
                                }
                                break;
                            case "$tunnel":
                            case "$suggest":
                            case "$lookup":
                            case "$select":
                                break;
                            case "$lazyload":
                                this._ensureContextMenu();
                                break;
                            default:
                                this._addToContextMenu($menus[$bind], $isAction, $bind, article);
                                break;
                        }
                    }
                }
            }
        }
    }
});
