"use strict";
var helpers = require('syracuse-core/lib/helpers');

function ContextMenu(){
}

exports.ContextMenu = helpers.defineClass(ContextMenu, null, {
    dispose: function(){
        delete this.field;
        if (this._$$menusPopup) {
            this._$$menusPopup.remove();
        }
    },
    remove: function(){
        this.field.getArticle().removeItem(this._menusBox, true);
        delete this._menusBox;
        this.removeOpener();
        document.controller.disposeObject(this);
    },
    appendOpener: function(){
        this.menuPicker = this.field.createPicker("menus");
        this.menuPicker.setAttribute("data-s-field", this.field.id);
        this.field.appendToPickerBox(this.menuPicker, true);
    },
    removeOpener: function(){
        this.field._removeButtonToValue(this.menuPicker);
    },
    appendPicker: function(picker){
        if (!this.boxPickers) {
            this.boxPickers = document.createElement("div");
            this.boxPickers.className = "s-field-menus-pickers";
            this._$$menusPopup.prepend(this.boxPickers);
        }
        this.boxPickers.appendChild(picker);
    },
    loadMenuBox: function(){
        var slot = document.createElement("div");
        slot.className = "s-field-menus-popup";
        this.options.$category = "links";
        this.options.$skin = this.$skinMenus || (this.field.$skin + "-menus");
        if (this.options.$isBindDisabled) {
            this.options.$links = {};
            this.options.$actions = {};
        }
        this._$$menusPopup = $(slot);
        this._menusBoxSlot = document.createElement("div");
        this._menusBoxSlot.className = "s-field-menus-slot";
        this._menusBox = document.itemFactory.load($(slot.appendChild(this._menusBoxSlot)), this.options, this.field.getArticle());
        this._menusBox.contextField = this.field;
    },
    doClickPicker: function(){
        var self = this;
        if (!self._popupMenus) {
            document.site.toggleClass(self.menuPicker, "s-open", true);
            var popupContent = self.popupContent || self.field;
            popupContent.$$item[0].setAttribute("id", popupContent.id);
            self._popupMenus = self.field.boxParent.openDialog({
                $dialogMode: "popup",
                content: popupContent,
                $$dialog: self._$$menusPopup,
                position: {
                    my: "left top",
                    at: "left bottom",
                    of: $(self.menuPicker)
                },
                onClose: function(){
                    document.site.toggleClass(self.menuPicker, "s-open", false);
                    self._popupMenus = null;
                },
                autocCloseBoundary: "#" + popupContent.id
            });
        }
        else {
            self._popupMenus.close();
        }
    },
    onFieldClickPicker: function(){
        var self = this;
        document.site.onBeforClick();
        if (!self.field.$isDisabled) {
            self.field.page.externalAdapter.onFieldClickPicker({
                field: self.field,
                pickerType: "menus",
                doEvent: function(){
                    self.doClickPicker();
                }
            });
        }
    },
    create: function(field, options){
        this.field = field;
        this.options = options || {};
        this.appendOpener();
        this.loadMenuBox();
    }
});
