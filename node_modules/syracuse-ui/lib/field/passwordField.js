"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/desktop/field/field').Field;
var locale = require('syracuse-core/lib/locale');


function PasswordField(){
    this._localize = locale.resources(module)();
}

exports.PasswordField = helpers.defineClass(PasswordField, Field, {
    getHtmlInput: function(){
        return "<input type='password'/>";
    },
    setDataValue: function(value, record){
        this.currentValue = value;
        if (this.$isEditMode) {
            this.$$input.val(this.currentValue);
        }
        else {
            this.$$fieldValue.text((value || "").length > 0 ? "***" : "");
        }
        this.confirmValue = this.currentValue = value;
    },
    render: function(){
        Field.prototype.render.call(this);
        if (this.$isEditMode) {
            if (!this.$item.$isConfirmDisabled) {
                this.$$fieldValue.append(this.$$confirmInput = $("<input type='password'/>"));
                var input = this.$$confirmInput[0];
                input.setAttribute("data-s-field", this.id);
                input.setAttribute("placeholder", this._localize.pw_confirmPassword);
                input.className += " s-field-pwd-conf";
                input.style.width = "100%";
            }
        }
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        if (this.$$confirmInput && state.$isDisabled !== undefined) {
            document.site.disableItem(this.$$confirmInput[0], state.$isDisabled);
        }
    },
    
    onInputValidate: function(event){
        var $$upadted = $(event.target);
        var newValue = $$upadted.val();
        if (this.$$confirmInput && (this.$$input.val() != this.$$confirmInput.val())) {
            document.fieldController.validate(this, newValue);
        }
        else {
            Field.prototype.onInputValidate.call(this, event);
        }
    },
    validateType: function(errors, value){
        if (this.$$confirmInput && (this.$$input.val() != this.$$confirmInput.val())) {
            errors.push(this._localize.pw_confirmPasswordError);
        }
    }
});
