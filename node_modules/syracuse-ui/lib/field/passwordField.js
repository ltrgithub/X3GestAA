"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
var locale = require('syracuse-core/lib/locale');

function PasswordField() {

}

exports.PasswordField = helpers.defineClass(PasswordField, Field, {
	setDataValue: function(value) {
		this.currentValue = value;
		if (this.$isEditMode) {
			this.setInputValue(value);
		} else {
			this._dataValue.textContent = (value || "").length > 0 ? "***" : "";
		}
		this.confirmValue = this.currentValue = value;
	},
	// redefine getInputValue without trimming the content!
	getInputValue: function() {
		var value = this.input.value;
		return value == "" && this.currentValue == undefined ? this.currentValue : value;
	},
	// redefine setInputValue without trimming the content!
	setInputValue: function(val) {
		this.input.value = val;
	},
	render: function() {
		this.isPasswordField = true;
		this.$inputType = "password";
		Field.prototype.render.call(this);
		if (this.$isEditMode) {
			this.input.setAttribute("placeholder", syra_local.fpwNewPassword);
			if (!this.$item.$isConfirmDisabled && this.$field.$capabilities && (this.$field.$capabilities.indexOf("confirm") >= 0)) {
				this.confirmInput = document.createElement("input");
				if (!this.$item.$isFilterMode) {
					this.confirmInput.setAttribute("type", this.$inputType || "text");
				}
				syra_site.setSpecificAttributes(this.confirmInput);
				this.confirmInput.syraOnClick = "onInputFieldClick";
				this.confirmInput.setAttribute("placeholder", syra_local.fpwConfirmPassword);
				this.confirmInput.className = this.$skinInput;
				if (this.$item.$maxLength) {
					this.confirmInput.setAttribute("maxlength", this.$item.$maxLength);
				}
				var div = document.createElement("div");
				div.className = this._$cssField + "-value-edit s-field-pwd-conf";
				div.appendChild(this.confirmInput);
				this._dataValue.parentNode.insertBefore(div, this._dataValue.nextSibling);
			}
		}
	},

	setState: function(state) {
		Field.prototype.setState.call(this, state);
		if (this.confirmInput && state.$isDisabled !== undefined) {
			syra_site.dom.disableItem(this.confirmInput, state.$isDisabled);
		}
	},
	onInputValueChanged: function(event) {
		var doValidate = true;
		if (this.confirmInput) {
			doValidate = false;
			if (event.target == this.confirmInput) {
				if (syra_workingCopy.validateInput(this, this.confirmInput.value || "")) {
					this.currentValue = "";
					doValidate = true;
				}
			}
		}
		return doValidate;
	},
	validateType: function(errors, value) {
		var self = this;
		if (value !== undefined) {
			if (self.confirmInput) {
				if (self.getInputValue() != self.confirmInput.value) {
					errors.push(self.confirmInput.value ? syra_local.fpwConfirmPasswordError : syra_local.fpwEnterConfirmationError);
				}
			}
			// format value
			var salt = self.$field.$salt;
			// replace fields of user entity with their corresponding values
			if (salt) {
				salt = salt.replace(/\{(\w+)\}/g, function(d0, d1) {
					try {
						return self.articleParent.boundFields[d1][0].getDataValue();
					} catch (e) {
						errors.push(locale.format(syra_local.fpwReplFieldNotFound, d1));
					}
				});
			}
			if (errors.length === 0) {
				var s = self.getInputValue();
				if (salt) { // convert to UTF8
					s = salt + ":" + s;
					var i = s.length;
					while (--i >= 0) {
						var c = s.charCodeAt(i);
						if (c > 127) {
							if (c < 2047)
								s = s.substr(0, i) + String.fromCharCode(192 | (c >> 6), 128 | (c & 0x3F)) + s.substr(i + 1);
							else
								s = s.substr(0, i) + String.fromCharCode(224 | (c >> 12), 128 | ((c >> 6) & 0x3F), 128 | (c & 0x3F)) + s.substr(i + 1);
						}
					}
					s = "U" + md5(s); // make MD5 hash, mark creation from UTF8
				}
				self.confirmValue = self.currentValue = s;
			}
		}
	}
});