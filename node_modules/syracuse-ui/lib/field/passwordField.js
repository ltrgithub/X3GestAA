"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
var locale = require('syracuse-core/lib/locale');


function PasswordField(){
    this._localize = locale.resources(module)();
}

exports.PasswordField = helpers.defineClass(PasswordField, Field, {
    createHtmlInput: function(){
        var input = document.createElement("input");
        input.setAttribute("type", "password");
        return input;
    },
    setDataValue: function(value, record){
        this.currentValue = value;
        if (this.$isEditMode) {
            this._input.value = this.currentValue;
        }
        else {
            this.fieldValue.textContent = (value || "").length > 0 ? "***" : "";
        }
        this.confirmValue = this.currentValue = value;
    },
    render: function(){
        Field.prototype.render.call(this);
        if (this.$isEditMode) {
            if (!this.$item.$isConfirmDisabled) {
                this.confirmInput = this.createHtmlInput();
                this.confirmInput.setAttribute("data-s-field", this.id);
                this.confirmInput.setAttribute("placeholder", this._localize.pw_confirmPassword);
                this.confirmInput.className += " s-field-pwd-conf";
                this.confirmInput.style.width = "100%";
                this.fieldValue.appendChild(this.confirmInput);
                
            }
        }
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        if (this.confirmInput && state.$isDisabled !== undefined) {
            document.site.disableItem(this.confirmInput, state.$isDisabled);
        }
    },
    
    onInputValidate: function(event){
        var newValue = event.target.value || "";
        if (this.confirmInput && (this._input.value != this.confirmInput.value)) {
            this.validate(newValue);
        }
        else {
            Field.prototype.onInputValidate.call(this, event);
        }
    },
    validateType: function(errors, value){
        if (this.confirmInput && (this._input.value != this.confirmInput.value)) {
            errors.push(this._localize.pw_confirmPasswordError);
        }
    }
});
