"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
var locale = require('syracuse-core/lib/locale');

function PasswordField() {

}

exports.PasswordField = helpers.defineClass(PasswordField, Field, {
	createHtmlInput: function() {
		var input = document.createElement("input");
		input.setAttribute("type", "password");
		syra_site.setSpecificAttributes(input);
		input.setAttribute("placeholder", this.localize.fpwNewPassword);
		return input;
	},
	setDataValue: function(value) {
		this.currentValue = value;
		if (this.$isEditMode) {
			this.setInputValue(value);
		} else {
			this.fieldValue.textContent = (value || "").length > 0 ? "***" : "";
		}
		this.confirmValue = this.currentValue = value;
	},
	// redefine getInputValue without trimming the content!
	getInputValue: function() {
		var value = this.input.value;
		return value == "" && this.currentValue == undefined ? this.currentValue : value;
	},
	// redefine setInputValue without trimming the content!
	setInputValue: function(val) {
		this.input.value = val;
	},
	render: function() {
		Field.prototype.render.call(this);
		if (this.$isEditMode) {
			if (!this.$item.$isConfirmDisabled && this.$field.$capabilities && (this.$field.$capabilities.indexOf("confirm") >= 0)) {
				this.confirmInput = this.createHtmlInput();
				this.setInputFieldId(this.confirmInput);
				this.confirmInput.setAttribute("placeholder", this.localize.fpwConfirmPassword);
				this.confirmInput.className += " s-field-pwd-conf";
				this.confirmInput.style.width = "100%";
				if (this.$item.$maxLength) {
					this.confirmInput.setAttribute("maxlength", this.$item.$maxLength);
				}
				this.fieldValue.appendChild(this.confirmInput);

			}
		}
	},

	setState: function(state) {
		Field.prototype.setState.call(this, state);
		if (this.confirmInput && state.$isDisabled !== undefined) {
			syra_site.dom.disableItem(this.confirmInput, state.$isDisabled);
		}
	},

	onInputValidate: function(event) {
		if (this.confirmInput) {
			if (event.target == this.confirmInput) {
				if (this.validate(this.confirmInput.value || "")) {
					Field.prototype.onInputValidate.call(this, event);
				}
			}
		} else {
			Field.prototype.onInputValidate.call(this, event);
		}
	},
	validateType: function(errors, value) {
		var self = this;
		if (value !== undefined) {
			if (self.confirmInput) {
				if (self.getInputValue() != self.confirmInput.value) {
					errors.push(self.confirmInput.value ? self.localize.fpwConfirmPasswordError : self.localize.fpwEnterConfirmationError);
				}
			}
			// format value
			var salt = self.$field.$salt;
			// replace fields of user entity with their corresponding values
			if (salt) {
				var r = /[^ -\x7E\xA0-\xFF]/.exec(self.getInputValue()); // when you change regexp, also change it in newPassword.html
				if (r) {
					errors.push(locale.format(self.localize.fpwIllegal, r[0]));
				}
				salt = salt.replace(/\{(\w+)\}/g, function(d0, d1) {
					try {
						return self.articleParent.boundFields[d1][0].getDataValue();
					} catch (e) {
						errors.push(locale.format(self.localize.fpwReplFieldNotFound, d1));
					}
				});
			}
			if (errors.length === 0) {
				var md5result = salt ? md5(salt + ":" + self.getInputValue()) : self.getInputValue();
				self.confirmValue = self.currentValue = md5result;
			}
		}
	}
});