"use strict";
//JSLint options:
/*global Timeline, SimileAjax, document, window, navigator, setInterval, clearInterval, clearTimeout, setTimeout, location, jQuery, $, console */

var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

var Article = require("syracuse-ui/lib/article/article").Article;

var script = document.createElement("script");
script.type = "text/javascript";
script.language = "JavaScript";
script.text = "Timeline_ajax_url='/syracuse-ui/deps/Timeline/script/timeline_ajax/simile-ajax-api.js';";
script.text += "Timeline_urlPrefix='/syracuse-ui/deps/Timeline/script/timeline_js/';";
script.text += "Timeline_parameters='bundle=true';";

document.getElementsByTagName("head")[0].appendChild(script); 

var link = document.createElement("link");
link.rel = "stylesheet";
link.href = "/syracuse-ui/deps/Timeline/style/X1MOPP1.css";
	
document.getElementsByTagName("head")[0].appendChild(link); 

require('syracuse-ui/deps/Timeline/script/timeline_ajax/simile-ajax-api');
//require('syracuse-ui/deps/Timeline/script/timeline_ajax/simile-ajax-bundle');
require('syracuse-ui/deps/Timeline/script/timeline_js/timeline-api');

var debug = true;

exports.Widget = helpers.defineClass(function Widget() {
	

}, Article, {
 
	
    drawBox: function() {
        this.dataset = null;
        this.$authoringType = "orgview$highCharts";
        this.$localization = this.getArticleParent().$prototype.$localization;
        this._localize = locale.resources(module)();
        this._map = {};
        // debug && console.log("HighCharts.drawBox " + this.id);
        var proto = this.$prototype;
        // create an alias
        proto.$properties = proto.$item.$properties;

        if (!this.$item.$isListEmbeded) {
            this.getArticleParent().bind(this, this.$item.$bind);
        }
    },

    setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
        debug && console.log(Date.now() + " - Timeline.setDataBind " + this.id + ": dataRecordSet=" + (dataRecordSet && dataRecordSet.length) + " , size=(" + this.layoutSlot.clientWidth + ", " + this.layoutSlot.clientHeight + ")");
        if (metaData) {
            // this._processMeta(metaData);
        }
        this.dataset = dataRecordSet;

        if (this.dataset && this.dataset.length > 0) {
            if (this.displayed && !this._wrapper) {
                // defer chart creation when we are ready to display
                this._createWrapper();
            }
        }
    },
	
    onWindowResize: function() {
        debug && console.log("Timeline.onWindowResize " + this.id + " : displayed=" + this.displayed + " , size=(" + this.layoutSlot.clientWidth + ", " + this.layoutSlot.clientHeight + ")");
        this.displayed = this.displayed || this.layoutSlot.clientWidth !== 0;
		if (this.displayed && !this._wrapper) {
			// defer chart creation when we are ready to display
			this._createWrapper();
		}
    },
    
    dispose: function() {

        Article.prototype.dispose.call(this);
    },
	
	_createWrapper: function() {
        var bindings = this.$prototype.$decorator.$bindings;
        this._wrapper = new TimelineWrapper(this);
        this._wrapper.afterBodyLoad();

	},
	
    externalCall: function(proxy, values, opt) {
        var self = this;

        function _resultCallback(res) {
        	debug && console.log("Timeline._resultCallback: " + JSON.stringify(res,null,2));
			if (res && res.failed) {
				document.site.showDiagnoses({
                    $diagnoses: res.$diagnoses
                });
			}
        }

        if (this.page && this.page.externalAdapter && this.page.externalAdapter.onBlockExRpc) {
            this.page.externalAdapter.onBlockExRpc({
                field: self.attachedField,
                call: {
                    proxy: proxy,
                    values: values,
                    callback: opt && opt.callback || _resultCallback
                }
            });
        }
    },

 });
		

var TimelineWrapper = helpers.defineClass(function TimelineWrapper(article) {
	this.article = article;
	this.dataset = this.article.dataset;
	this.bindings = this.article.$prototype.$decorator.$bindings;
	this.container = this.article.layoutSlot;
	this.timelineJSON = {};
	this.wedmax = new Date();
	this.url = '.'; // The base url for image, icon and background image references in the data
	this.theme = [];
	this.eventDescr = "";
	this.tapeHeight = 8;
	this.xEvent = 0;
	this.yEvent = 0;
	this.event = null;
	this.firstRow = 5; // les données commencent après les lignes réservées aux traductions
	this.eventSource1 = {};
	this.loader = 0;
}, null, {
	afterBodyLoad: function(){
		if (typeof Timeline === "undefined")   {console.error("Timeline not loaded");return;}
		if (typeof SimileAjax === "undefined") {console.error("SimileAjax not loaded");return;}
		if (typeof Timeline.OriginalEventPainter === "undefined") {console.error("OriginalEventPainter not loaded");return;}
		var that = this;
		//		var p=this._p$("GO_A_G1"); // client web
//		if (p==null){
//			p=this._p$("GO_GRAPH"); // client lourd
//		}
//		p.style.height="auto";
//		p.style.height="100%";
//		p.style.width="auto";
//		p.style.width="100%";
//		switch(PUBLIC.session.KLANG){
//			case "CZE": Timeline.clientLocale="cs"; break;
//			case "GER": Timeline.clientLocale="de"; break;
//			case "SPA": Timeline.clientLocale="es"; break;
//			case "FRA": Timeline.clientLocale="fr"; break;
//			case "ITA": Timeline.clientLocale="it"; break;
//			case "DUT": Timeline.clientLocale="nl"; break;
//			case "RUS": Timeline.clientLocale="ru"; break;
//			case "SME": Timeline.clientLocale="se"; break;
//			case "TUR": Timeline.clientLocale="tr"; break;
//			case "VIE": Timeline.clientLocale="vi"; break;
//			case "ZHA": Timeline.clientLocale="zh"; break;
//			default: Timeline.clientLocale="en"; break;
//		}
		Timeline.OriginalEventPainter.prototype._callX3Event=function(A){
			$("#loader").show();
			//var row=PUBLIC.getData().childNodes[parseInt(A.getID(), 10)+that.firstRow-1];
			var cell=that.dataset[parseInt(A.getID(), 10) + that.firstRow-1];
			var OppNum=cell[that.bindings.OPPNUM];
			var OppLin=parseInt(cell[that.bindings.OPPLIN], 10);
			var WipTyp=parseInt(cell[that.bindings.WIPTYP], 10);
			var VcrNum=cell[that.bindings.VCRNUM];
			var VcrLin=parseInt(cell[that.bindings.VCRLIN], 10);
			var VcrSeq=parseInt(cell[that.bindings.VCRSEQ], 10);
			var this_TL = this;
			function getInfoCallback(res) {
	        	debug && console.log("Timeline.GET_INFO._Callback: " + JSON.stringify(res,null,2));
				var inn;
	        	if (res && res.failed) {
					document.site.showDiagnoses({
	                    $diagnoses: res.$diagnoses
	                });
				}else {
					this_TL.eventDescr = res.argsModified[6]
		        	that.oTL._bandInfos[0].eventPainter._showBubble(this_TL.xEvent,this_TL.yEvent,this_TL.event);		
				}
			}		
			that.article.externalCall("GET_INFO", [OppNum,OppLin,WipTyp,VcrNum,VcrLin,VcrSeq], {callback: getInfoCallback});
		};
		Timeline.OriginalEventPainter.prototype._dateToX3=function(d,s){
			return d.getDate()+s+(d.getMonth()+1)+s+d.getFullYear();
		};
		Timeline.OriginalEventPainter.prototype._moveX3Event=function(S,E,evt){
//			var I=parseInt(evt._id)+that.firstRow-1;
//			var DS=this._dateToX3(S,"/");
//			var DE=this._dateToX3(E,"/");
//			var this_TL = this;
//			
//			function getInfoCallback(res) {
//	        	debug && console.log("Timeline.MOVE_ORDER._Callback: " + JSON.stringify(res,null,2));
//				var inn;
//	        	if (res && res.failed) {
//					document.site.showDiagnoses({
//	                    $diagnoses: res.$diagnoses
//	                });
//				}else {
//					this_TL.eventDescr = res.argsModified[3]
//					that.oTL._bandInfos[0].eventPainter._showBubble(this_TL.xEvent,this_TL.yEvent,this_TL.event);
//				}
//			}
//			that.article.externalCall("MOVE_ORDER", [I,DS,DE]);
		};
		Timeline.OriginalEventPainter.prototype.initialize=function(B,A){
			this._band=B;
			this._timeline=A;
			this._backLayer=null;
			this._eventLayer=null;
			this._lineLayer=null;
			this._highlightLayer=null;
			this._eventIdToElmt=null;
		};
		Timeline.OriginalEventPainter.prototype._onClickInstantEvent=function(C,A,B){
			if (A.ctrlKey === false){
				var D=SimileAjax.DOM.getPageCoordinates(C);
				this.xEvent=D.left+Math.ceil(C.offsetWidth/2);
				this.yEvent=D.top+Math.ceil(C.offsetHeight/2);
				this.event=B;
				this._callX3Event(B);
			}
			A.cancelBubble=true;
			SimileAjax.DOM.cancelEvent(A);
			this._fireOnSelect(B.getID());
			return false;
		};
		Timeline.OriginalEventPainter.prototype._onClickDurationEvent=function(F,B,C){
			if (B.ctrlKey === false){
				if("pageX" in B){
					this.xEvent=B.pageX;
					this.yEvent=B.pageY;
				}else{
					var D=SimileAjax.DOM.getPageCoordinates(F);
					this.xEvent=B.offsetX+D.left;
					this.yEvent=B.offsetY+D.top;
				}
				this.event=C;
				this._callX3Event(C);
			}
			B.cancelBubble=true;
			SimileAjax.DOM.cancelEvent(B);
			this._fireOnSelect(C.getID());
			return false;
		};		
		Timeline.OriginalEventPainter.prototype._onMouseOverEvent=function(F,B,C){
			// F=div-timeline-event, B=event, C=timeline-event
			var J=F.nextSibling;
			J.style.visibility="visible";
			B.cancelBubble=true;
			SimileAjax.DOM.cancelEvent(B);
			return false;
		};
		Timeline.OriginalEventPainter.prototype._onMouseOutEvent=function(F,B,C){
			// F=div-timeline-event, B=event, C=timeline-event
			var J=F.nextSibling;
			J.style.visibility="hidden";
			B.cancelBubble=true;
			SimileAjax.DOM.cancelEvent(B);
			return false;
		};
		Timeline.OriginalEventPainter.prototype._showBubble=function(B,E,C){
			// Après la réponse de X3 :
			var th=this._params.theme;
			var gl=this._band.getLabeller();
			C._description=this.eventDescr;
			var D=document.createElement("div");
			var A=th.event.bubble;
			C.fillInfoBubble(D,th,gl);
			SimileAjax.WindowManager.cancelPopups();
			SimileAjax.Graphics.createBubbleForContentAndPoint(D,B,E,A.width,null,A.maxHeight);
			$(function() {
				$("#accordion").accordion({
					autoHeight: false,
					navigation: true,
					active: 3
				});
			});
			$("#loader").hide();
		};
		Timeline.OriginalEventPainter.prototype.paintPreciseDurationEvent=function(M,R,W,T){
			var X=this._timeline.getDocument();
			var K=M.getText();
			var G=M.getStart();
			var U=M.getEnd();
			var H=Math.round(this._band.dateToPixelOffset(G));
			var A=Math.round(this._band.dateToPixelOffset(U));
			var E=this._getLabelDivClassName(M);
			var C=this._frc.computeSize(K,E);
			var L=H;
			var I=L+C.width;
			var P=Math.max(I,A);
			var O=this._findFreeTrack(M,P);
			var Q=Math.round(R.trackOffset+O*R.trackIncrement+W.event.tape.height);
			var S=M.getColor();
			S=S!=null?S:W.event.duration.color;
			var B=this._paintEventTape(M,O,H,A,S,100,R,W,0);
			var V=this._paintEventLabel(M,K,L,Q,C.width,C.height,W,E,T);
			var D=[B.elmt,V.elmt];
			var N=this;
			var J=function(Z,Y,a){return N._onClickDurationEvent(B.elmt,Y,M);};
			SimileAjax.DOM.registerEvent(B.elmt,"mousedown",J);
			SimileAjax.DOM.registerEvent(V.elmt,"mousedown",J);
			var J2=function(Z,Y,a){return N._onMouseOverEvent(B.elmt,Y,M);};
			SimileAjax.DOM.registerEvent(B.elmt,"mouseover",J2);
			SimileAjax.DOM.registerEvent(V.elmt,"mouseover",J2);
			var J3=function(Z,Y,a){return N._onMouseOutEvent(B.elmt,Y,M);};
			SimileAjax.DOM.registerEvent(B.elmt,"mouseout",J3);
			SimileAjax.DOM.registerEvent(V.elmt,"mouseout",J3);
			var BE=$("#"+B.elmt.id);
			BE.disableDrag=false;
			if (that.right(M._classname,1)=== "c"){
				BE.disableDrag=true;
			}
			var TB=this._band;
			if (TB._index === 0){
				var DS; //date début
				var DE; //date fin
				BE.draggable({
					axis:"x",
					grid:[TB._zoomSteps[TB._zoomIndex].pixelsPerDay,1],
					addClasses:false,
					distance:2,
					disabled:BE.disableDrag,
					start:function(evt,ui){
					},
					drag:function(evt, ui){
						if(evt.ctrlKey == false){
							return false;
						}else{
							var J=BE[0].nextSibling;
							J.style.left=ui.position.left+"px";
							return true;
						}
					},
					stop:function(evt, ui){
						$("#validBtn").button( "option", "disabled", false );
						var D1=B.elmt.style.left; 
						var D2=parseInt(this.left(D1,String(D1).length-2), 10);
						B.left=D2;
						var DS=TB.pixelOffsetToDate(D2);
						DS=SimileAjax.DateTime.removeTimeZoneOffset(DS,TB._timeZone);
						var D3=B.elmt.style.width;
						B.width=D3;
						var D4=parseInt(that.left(D3,String(D3).length-2), 10);
						var DE=TB.pixelOffsetToDate(D2+D4);
						DE=SimileAjax.DateTime.removeTimeZoneOffset(DE,TB._timeZone);
						N._moveX3Event(DS,DE,M);
					}					
				});
				BE.resizable({
					distance:2,
					handles:"e,w",
					disabled:BE.disableDrag,
					grid:[TB._zoomSteps[TB._zoomIndex].pixelsPerDay,1],
					resize:function(evt, ui){
						if(evt.ctrlKey === false){
							return false;
						}else{
							var J=BE[0].nextSibling;
							J.style.left=ui.position.left+"px";
							return true;
						}
					},
					stop:function(evt, ui){
						$("#validBtn").button( "option", "disabled", false );
						var D1=B.elmt.style.left; 
						var D2=parseInt(that.left(D1,String(D1).length-2), 10);
						B.left=D2;
						var DS=TB.pixelOffsetToDate(D2);
						DS=SimileAjax.DateTime.removeTimeZoneOffset(DS,TB._timeZone);
						var D3=B.elmt.style.width;
						B.width=D3;
						var D4=parseInt(that.left(D3,String(D3).length-2), 10);
						var DE=TB.pixelOffsetToDate(D2+D4);
						DE=SimileAjax.DateTime.removeTimeZoneOffset(DE,TB._timeZone);
						N._moveX3Event(DS,DE,M);
					}				
				});
			}
			var F=this._createHighlightDiv(T,B,W,M);
			if(F!=null){
				D.push(F);
			}
			this._fireEventPaintListeners("paintedEvent",M,D);
			this._eventIdToElmt[M.getID()]=B.elmt;
			this._tracks[O]=H;
		};
		Timeline.OriginalEventPainter.prototype.paintImpreciseInstantEvent=function(P,U,Z,W){
			var b=this._timeline.getDocument();
			var N=P.getText();
			var J=P.getStart();
			var X=P.getEnd();
			var K=Math.round(this._band.dateToPixelOffset(J));
			var B=Math.round(this._band.dateToPixelOffset(X));
			var A=Math.round(K+U.iconWidth/2);
			var D=Math.round(K-U.iconWidth/2);
			var H=this._getLabelDivClassName(P);
			var F=this._frc.computeSize(N,H);
			var O=A+Z.event.label.offsetFromLine;
			var L=O+F.width;
			var S=Math.max(L,B);
			var R=this._findFreeTrack(P,S);
			var a=Z.event.tape.height;
			var T=Math.round(U.trackOffset+R*U.trackIncrement+a);
			var C=this._paintEventIcon(P,R,D,U,Z,a);
			var Y=this._paintEventLabel(P,N,O,T,F.width,F.height,Z,H,W);
			var V=P.getColor();
			V=V!=null?V:Z.event.instant.impreciseColor;
			var E=this._paintEventTape(P,R,K,B,V,Z.event.instant.impreciseOpacity,U,Z,0);
			var G=[C.elmt,Y.elmt,E.elmt];
			var Q=this;
			var M=function(d,c,e){return Q._onClickInstantEvent(C.elmt,c,P);};
			SimileAjax.DOM.registerEvent(C.elmt,"mousedown",M);
			SimileAjax.DOM.registerEvent(E.elmt,"mousedown",M);
			SimileAjax.DOM.registerEvent(Y.elmt,"mousedown",M);
			var M2=function(d,c,e){return Q._onMouseOverEvent(C.elmt,c,P);};
			SimileAjax.DOM.registerEvent(C.elmt,"mouseover",M2);
			SimileAjax.DOM.registerEvent(E.elmt,"mouseover",M2);
			SimileAjax.DOM.registerEvent(Y.elmt,"mouseover",M2);
			var M3=function(d,c,e){return Q._onMouseOutEvent(C.elmt,c,P);};
			SimileAjax.DOM.registerEvent(C.elmt,"mouseout",M3);
			SimileAjax.DOM.registerEvent(E.elmt,"mouseout",M3);
			SimileAjax.DOM.registerEvent(Y.elmt,"mouseout",M3);
			K.disableDrag=false;
			if (that.right(M._classname,1) === "c"){K.disableDrag=true;}
			var TB=this._band;
			if (TB._index === 0){
				K=$("#"+C.elmt.id);
				K.draggable({
					axis:"x",
					grid:[TB._zoomSteps[TB._zoomIndex].pixelsPerDay,1],
					addClasses:false,
					distance:2,
					disabled:K.disableDrag,
					drag:function(evt, ui){
						if(evt.ctrlKey == false){
							return false;
						}else{
							var J=K[0].nextSibling;
							J.style.left=(ui.position.left+10)+"px";
							return true;
						}
					},
					stop:function(evt, ui){
						$("#validBtn").button( "option", "disabled", false );
						var D3=C.elmt.style.width;
						C.left=D3;
						var D4=parseInt(that.left(D3,String(D3).length-2), 10);
						var DE=TB.pixelOffsetToDate(D4);
						DE=SimileAjax.DateTime.removeTimeZoneOffset(DE,TB._timeZone);
						Q._moveX3Event(DE,DE,P);
					}					
				});
			}
			var I=this._createHighlightDiv(W,C,Z,P);
			if(I!=null){G.push(I);}
			this._fireEventPaintListeners("paintedEvent",P,G);
			this._eventIdToElmt[P.getID()]=C.elmt;
			this._tracks[R]=D;
		};
		Timeline.GregorianDateLabeller.prototype.labelLocale=function(A){
			return SimileAjax.DateTime.removeTimeZoneOffset(A,this._timeZone).toLocaleDateString();
		};
		Timeline.DefaultEventSource.Event.prototype.fillTime=function(A,B){
			var C= A.ownerDocument;
			var D1= A.appendChild(C.createElement("div"));
			D1.style.width="50%";
			D1.style.display="inline";
			var D2= A.appendChild(C.createElement("div"));
			D2.style.position="absolute";
			if(this._instant){
				if(this.isImprecise()){
					D1.appendChild(C.createTextNode(B.labelLocale(this._start)));
					D2.appendChild(C.createTextNode(B.labelLocale(this._end)));
				}else{
					D1.appendChild(C.createTextNode(B.labelLocale(this._start)));
				}
			}else{
				if(this.isImprecise()){
					D1.appendChild(C.createTextNode(B.labelLocale(this._start)+" ~ "+B.labelLocale(this._latestStart)));
					D2.appendChild(C.createTextNode(B.labelLocale(this._earliestEnd)+" ~ "+B.labelLocale(this._end)));
				}else{
					D1.appendChild(C.createTextNode(B.labelLocale(this._start)));
					D2.appendChild(C.createTextNode(B.labelLocale(this._end)));
				}
			}
		};
		Timeline._Band.prototype._viewOffset2=0;
		Timeline._Band.prototype._onMouseMove=function(D,A,E){
			if(this._dragging){
				var C=A.clientX-this._dragX;
				var B=A.clientY-this._dragY;
				this._dragX=A.clientX;
				this._dragY=A.clientY;
				this._moveEther(this._timeline.isHorizontal()?C:B,this._timeline.isHorizontal()?B:C,A.type);
				this._positionHighlight();
			}
		};			
		Timeline._Band.prototype._moveEther=function(A,B,E){
			this.closeBubble();
			if(!this._timeline.shiftOK(this._index,A)){return ;}
			this._viewOffset+=A;
			this._ether.shiftPixels(-A);
			if(this._timeline.isHorizontal()){
				this._div.style.left=this._viewOffset+"px";
			}else{
				this._div.style.top=this._viewOffset+"px";
			}
			if(this._viewOffset>-this._viewLength*0.5||this._viewOffset<-this._viewLength*(Timeline._Band.SCROLL_MULTIPLES-1.5)){
				this._recenterDiv();
			}else{
				this.softLayout();
			}
			this._onChanging();
			if ((this._index === 0 && E === "mousemove") || E === "mousewheel") {this._viewOffset2+=B;}
			if (Timeline._mainBand != null){Timeline._Repos(Timeline._mainBand);}
		};
		Timeline._Band.prototype._onDblClick=function(C,B,E){
			var A=SimileAjax.DOM.getEventRelativeCoordinates(B,C);
			var D=A.x-(this._viewLength/2-this._viewOffset);
			this._autoScroll(-D, function(){Timeline._Repos(Timeline._mainBand);});
		};
		Timeline._Band.prototype.paint=function(){
			this._etherPainter.paint();
			this._paintDecorators();
			this._paintEvents();
			if(Timeline._mainBand != null){Timeline._Repos(Timeline._mainBand);}
		};
		Timeline._Band.prototype._onMouseScroll=function(G,H,B){
			var A=new Date();
			var C;
			A=A.getTime();
			if(!this._lastScrollTime||((A-this._lastScrollTime)>50)){
				this._lastScrollTime=A;
				var I=0;
				if(H.wheelDelta){
					I=H.wheelDelta/120;
				}else{
					if(H.detail){I=-H.detail/3;}
				}
				var F=this._theme.mouseWheel;
				if(F==="scroll" && H.ctrlKey){
					var E=SimileAjax.DOM.getEventRelativeCoordinates(H,G);
					if(I !== 0){
						var D;
						if(I>0){D=true;}
						if(I<0){D=false;}
						this._timeline.zoom(D,E.x,E.y,G);
					}
				}else if(F === "scroll" && H.shiftKey){
					if (this._index === 0){
						C=30*(I<0?-1:1);
						this._autoScroll(C,function(){},400,true);
					}
				}else if(F === "scroll"){
					C=40*(I<0?-1:1);
					this._autoScroll(C,function(){},400,false);
				}
			}
			if(H.stopPropagation){H.stopPropagation();}
			H.cancelBubble=true;
			if(H.preventDefault){H.preventDefault();}
			H.returnValue=false;
		};
		Timeline._Band.prototype._autoScroll=function(D,C,dur,Y){
			var A=this;
			var B;
			if (typeof dur === "undefined"){dur=1000;}
			if (typeof Y === "undefined"){Y=false;}
			if (!Y){
				B=SimileAjax.Graphics.createAnimation(function(E,F){A._moveEther(F,0,"mousewheel");},0,D,dur,C);
			} else {
				B=SimileAjax.Graphics.createAnimation(function(E,F){A._moveEther(0,F,"mousewheel");},0,D,dur,C);
			}
			B.run();
		};
		Timeline._Repos=function(B){
			if(B._viewOffset2 != null){
				var _t=B._viewOffset2;
				B._div.style.top=_t+"px";
				var _E=B._etherPainter;
				_E._backgroundLayer.parentElement.style.top=-_t+"px";
				_E._lineLayer.parentElement.style.top=-_t+"px";
				_E._markerLayer.parentElement.style.top=-_t+"px";	
			}
		};
		Timeline.WRAPPER = this;
		Timeline.DateTime=SimileAjax.DateTime;
		this.theme = Timeline.ClassicTheme.create();
		this.eventSource1=new Timeline.DefaultEventSource();
		this.bandInit();
		this.populateJSON();
		this.eventSource1.loadJSON(this.timelineJSON, this.url); // The data was stored into the timelineJSON variable.

		// Generate HTML
		var zoomElement = document.createElement("div");
		zoomElement.id = "zoomElement";
		zoomElement.style.top = "1px";
		zoomElement.style.left = "10px";
		zoomElement.position = "relative";
		
		var contTL = document.createElement("div");
		contTL.className = "contTL";
		contTL.id = "Div01";
		var divTL = document.createElement("div");
		divTL.style.border = "1px solid #aaa";
		divTL.style.height = "400px";
		divTL.id = "divTL";
		divTL.className = "sage-theme";
		contTL.appendChild(divTL);
		var controls = document.createElement("div");
		controls.id = "controls";
		var table = document.createElement("table");
		table.id = "tabcontrol";
		controls.appendChild(table);
		contTL.appendChild(controls);
		
		var loader = document.createElement("div");
		loader.id = "loader";
		var img = document.createElement("img");
		img.src = "/syracuse-ui/deps/Timeline/script/icons/ajax-loader.gif";
		loader.appendChild(img);
		
		zoomElement.appendChild(contTL);
		zoomElement.appendChild(loader);
		
		this.container.appendChild(zoomElement);

		$("#loader").hide();
		this.reCreate();
		

	},
	bandInit: function(){

		this.theme.mouseWheel="scroll"; //scroll, zoom, default
		this.theme.event.tape.height = parseInt(this.getCell(0,6), 10);
		this.theme.event.track.height = -5;
		this.theme.event.track.gap = -3;
		this.theme.event.highlightLabelBackground = true;
		this.theme.timeline_start = new Date(Date.UTC(2005, 0, 1));
		this.theme.timeline_stop  = new Date(Date.UTC(2025, 0, 1));
		this.theme.autoWidth = false; // Set the Timeline's "width" automatically
		this.theme.autoWidthMargin=10;
		this.theme.firstDayOfWeek=1;
		this.bandInfos=[
			Timeline.createBandInfo({
				eventSource:	this.eventSource1,
				date: this.wedmax,
				theme: this.theme,
				width: "85%", // ou en pixels
				intervalUnit: Timeline.DateTime.DAY, 
				intervalPixels:	54,
				zoomIndex: 6,
				timeZone: this.DetectTZ.get_timezone_info().utc_offset,
				zoomSteps: [
				  {pixelsPerInterval:  26, pixelsPerDay:           (26*24), unit: Timeline.DateTime.HOUR},
				  {pixelsPerInterval: 412, pixelsPerDay:               412, unit: Timeline.DateTime.DAY},
				  {pixelsPerInterval: 275, pixelsPerDay:               275, unit: Timeline.DateTime.DAY},
				  {pixelsPerInterval: 183, pixelsPerDay:               183, unit: Timeline.DateTime.DAY},
				  {pixelsPerInterval: 122, pixelsPerDay:               122, unit: Timeline.DateTime.DAY},
				  {pixelsPerInterval:  81, pixelsPerDay:                84, unit: Timeline.DateTime.DAY},
				  {pixelsPerInterval:  54, pixelsPerDay:                54, unit: Timeline.DateTime.DAY},// DEFAULT zoomIndex
				  {pixelsPerInterval: 263, pixelsPerDay:           (263/7), unit: Timeline.DateTime.WEEK},
				  {pixelsPerInterval: 169, pixelsPerDay:           (169/7), unit: Timeline.DateTime.WEEK},
				  {pixelsPerInterval: 113, pixelsPerDay:           (113/7), unit: Timeline.DateTime.WEEK},
				  {pixelsPerInterval:  75, pixelsPerDay:            (75/7), unit: Timeline.DateTime.WEEK},
				  {pixelsPerInterval:  50, pixelsPerDay:            (50/7), unit: Timeline.DateTime.WEEK},
				  {pixelsPerInterval: 144, pixelsPerDay: (144/(365.25/12)), unit: Timeline.DateTime.MONTH},
				  {pixelsPerInterval:  96, pixelsPerDay:  (96/(365.25/12)), unit: Timeline.DateTime.MONTH},
				  {pixelsPerInterval:  64, pixelsPerDay:  (64/(365.25/12)), unit: Timeline.DateTime.MONTH},
				  {pixelsPerInterval:  43, pixelsPerDay:  (43/(365.25/12)), unit: Timeline.DateTime.MONTH},
				  {pixelsPerInterval: 342, pixelsPerDay:      (342/365.25), unit: Timeline.DateTime.YEAR},
				  {pixelsPerInterval: 228, pixelsPerDay:      (228/365.25), unit: Timeline.DateTime.YEAR}]
			}), 
			Timeline.createBandInfo({ 
				eventSource:	this.eventSource1,
				date: this.wedmax,
				theme: this.theme,
				width: "15%", 
				overview:       true,
				intervalUnit:	Timeline.DateTime.MONTH, 
				intervalPixels:	43, 
				zoomIndex:      11,
				timeZone:		this.DetectTZ.get_timezone_info().utc_offset,
				zoomSteps:      new Array(
				  {pixelsPerInterval: 124,  unit: Timeline.DateTime.DAY},
				  {pixelsPerInterval:  82,  unit: Timeline.DateTime.DAY},
				  {pixelsPerInterval:  55,  unit: Timeline.DateTime.DAY},
				  {pixelsPerInterval: 256,  unit: Timeline.DateTime.WEEK},
				  {pixelsPerInterval: 171,  unit: Timeline.DateTime.WEEK},
				  {pixelsPerInterval: 114,  unit: Timeline.DateTime.WEEK},
				  {pixelsPerInterval:  76,  unit: Timeline.DateTime.WEEK},
				  {pixelsPerInterval:  51,  unit: Timeline.DateTime.WEEK},
				  {pixelsPerInterval: 146,  unit: Timeline.DateTime.MONTH},
				  {pixelsPerInterval:  98,  unit: Timeline.DateTime.MONTH},
				  {pixelsPerInterval:  65,  unit: Timeline.DateTime.MONTH},
				  {pixelsPerInterval:  43,  unit: Timeline.DateTime.MONTH},// DEFAULT zoomIndex
				  {pixelsPerInterval: 347,  unit: Timeline.DateTime.YEAR},
				  {pixelsPerInterval: 231,  unit: Timeline.DateTime.YEAR},
				  {pixelsPerInterval: 154,  unit: Timeline.DateTime.YEAR},
				  {pixelsPerInterval: 103,  unit: Timeline.DateTime.YEAR},
				  {pixelsPerInterval:  68,  unit: Timeline.DateTime.YEAR},
				  {pixelsPerInterval:  46,  unit: Timeline.DateTime.YEAR})
			})
		];
		
		this.bandInfos[1].syncWith = 0;
		this.bandInfos[1].highlight = true;
		for (var i = 0; i < this.bandInfos.length; i++) {
			this.bandInfos[i].decorators = [
				new Timeline.SpanHighlightDecorator({
					endDate:    new Date(),
					startDate:  new Date(),
					inFront:    true,
					cssClass:	"todayDecorator",
					color:      "#FF0000", // set color explicitly
					opacity:    50,
					//startLabel: "début",
					//endLabel:   "fin",
					theme:      this.theme
				})
			];
		}
	},
	populateJSON:		function(){		
		//top.Fu_trace(arguments,"***this.populateJSON()");
		//var nbRows=PUBLIC.getData().childNodes.length;
		var nbRows=this.dataset.length - 1;
		var cell;
		var tapeClassName= [];
		var tapeClassType= new Array('','so','po','wo','sr');
		var Objet= new Array('','SOH','POH','MFG','SRE');
		for (i=1;i<tapeClassType.length;i++) {
			tapeClassName[i]=new Array('',tapeClassType[i]+'f',tapeClassType[i]+'p',tapeClassType[i]+'s',tapeClassType[i]+'c');
		}
		this.timelineJSON = {
		'dateTimeFormat': 'iso8601',
		'events' : []
		};
		// parcours des lignes
		for(var j=this.firstRow; j<nbRows; j++){
			var i=j-this.firstRow;
			var wDescr=[];
			cell=this.dataset[j];
			var wsd=this.buildDateISO8601(cell[this.bindings.STRDAT],"-"); // paramètre start
			var wed=this.buildDateISO8601(cell[this.bindings.ENDDAT],"-"); // paramètre end
			var wClassName=tapeClassName[cell[this.bindings.WIPTYP]][cell[this.bindings.WIPSTA]];
			var wde; // paramètre durationEvent
			if (wsd == wed) wde=false; else wde=true;
			this.timelineJSON.events[i] = {
				'id': (i+1)+'',
				'start': wsd,
				'end': wed,
				'durationEvent': wde, // the event occurs over a time duration. No icon. The event will be drawn as a dark blue tape. The tape color is set with the color attribute. Default color is #58A0DC
				'title': cell[this.bindings.VCRNUM],
				'classname': wClassName,
				'icon': '/syracuse-ui/deps/Timeline/script/icons/ico_'+wClassName+'.png',
				'description': cell[this.bindings.CAPTION]
				//'caption': cell[10].text
				//'onclick': function(){alert("boum")}
				//'color': color of the text and tape (duration events) to display in the timeline. If the event has durationEvent = false, then the bar's opacity will be applied (default 20%)
				//'textColor: color of the label text on the timeline. If not set, then the color attribute will be used
				//'trackNum: used to override the automatic layout of events on the Timeline
				//'image':,url to an image that will be displayed in the bubble
				//'link':  url. The bubble's title text be a hyper-link to this address
				//'latestStart':
				//'earliestEnd':
				//If a start and end date are supplied, and durationEvent is true, the icon is not shown. If icon attribute is not set, a default icon from the theme is used				
				//'tapeImage': wTapeBkg.join(""), // Sets the background image and repeat style for the event's tape (or 'bar') on the Timeline. Overrides the color setting for the tape				
				//'tapeRepeat': "repeat-x" //"repeat-x","repeat-y", default : "repeat"				
				//'caption': "repeat-x","repeat-y", default : "repeat"
				//'eventID': a cookie attribute that is stored, not used by the Timeline library. If you write a custom labeller or event bubble filler, the attribute can be obtained using the getEventID() method on the event object.
			};
		} 
	},
	buildDateISO8601: function(t,s){
		var wtxt=[];
		var wt;
		wtxt.push("20");wtxt.push(this.right(t,2)); // année
		wtxt.push(s); wtxt.push(this.mid(t,3,2)); // mois
		wtxt.push(s); wtxt.push(this.left(t,2)); // jour
		wtxt.push("T12:00");
		return wtxt.join("");
	},
	reCreate: function() {
		//top.Fu_trace(arguments,"***this.afterBodyResize()");
		$("#loader").show();
		var divTL = this._$("divTL");
		if ((this.resizeTimerID==null) && (divTL!=null)) {
			var self = this;
		//	this.resizeTimerID = window.setTimeout(function() {
				self.resizeTimerID = null;
				var currDate;
				if (self.oTL) currDate=self.oTL._bands[0].getCenterVisibleDate();
				divTL.style.height=self.getHeight()+"px";
				self.oTL = Timeline.create(divTL, self.bandInfos, Timeline.HORIZONTAL);
				Timeline._mainBand=self.oTL._bands[0];
				if (currDate) {
					self.oTL._bands[0].setCenterVisibleDate(currDate);
					self.oTL._bands[1].setCenterVisibleDate(currDate);
				}
				if (!self.isBodyLoaded){
					self.setupFilterHighlightControls(self._$("controls"), self.oTL, [0,1], self.bandInfos[0].theme);
					//$( "#validBtn" ).button( "option", "disabled", true );
					self.isBodyLoaded=true;
				}
		//	}, 100);
		}
		$("#loader").hide();
		this.winWidth = $(window).width();
		this.winHeight = $(window).height();
	},
	getHeight: function(){
		//top.Fu_trace(arguments,"***this.getHeight()");
		var h;
		try {
			h = this.container.heigth;
		} finally {
			h-=49;
		}
		return h;
	},
	getCell: function(x,y){
		//var row=PUBLIC.getData().childNodes[x];
		var row=this.dataset[x];
		var id = Object.keys(this.bindings)[y];
		return row[this.bindings[id]];
	},
	setupFilterHighlightControls:function (div, timeline, bandIndices, theme) {
		//top.Fu_trace(arguments,"***this.setupFilterHighlightControls()");
		var self = this;
		var mI=document.body.myInterface;
		var table = this._$("tabcontrol");
		var tr = table.insertRow(0);
		tr.className="flt";
		var td = tr.insertCell(0);
		//td.innerHTML = "Filtrer";
		td.innerHTML = this.getCell(0,9);
		td = tr.insertCell(1);
		//td.innerHTML = "Surligner";
		td.innerHTML = this.getCell(1,9);
		var handler = function(elmt, evt, target) {onKeyPress(timeline, bandIndices, table);};
		tr = table.insertRow(1);
		tr.id="rowFilter";
		tr.className="btnRow";
		tr.style.verticalAlign = "top";
		td = tr.insertCell(0);
		var input = document.createElement("input");
		input.className="flt";
		input.type = "text";
		SimileAjax.DOM.registerEvent(input, "keypress", handler);
		td.appendChild(input);
		addHighlight(theme,handler);
		tr=this._$("rowFilter");
		//var td = tr.insertCell(tr.cells.length);
		addButton("addBtn",theme,handler);
		addButton("razBtn",timeline,bandIndices,table);
		addButton("todayBtn",timeline,bandIndices,table);
		//addButton("validBtn",timeline,bandIndices,table);
		//addButton("utBtn");
		var tDiv=document.createElement("div");
		tDiv.id="tDiv";
		tDiv.innerHTML="";
		tDiv.style.display="inline";
		td.appendChild(tDiv);
		//$( "input:button",".btnRow").button();
		div.appendChild(table);
		var timerID ;
		
		function flthov(el){el.className='flthov';}
		function addHighlight(theme,handler){
			var _tr = self._$("rowFilter");
			var nbHL=0; var trcN=_tr.childNodes;
			for(var i=0; i<trcN.length; i++){
				if (trcN[i].firstChild.className === "flt") nbHL++;
			}
			var td=_tr.insertCell(nbHL);
			input = document.createElement("input");
			input.className="flt";
			input.type = "text";
			SimileAjax.DOM.registerEvent(input, "keypress", handler);
			td.appendChild(input);
			var divColor = document.createElement("div");
			divColor.className="surlign";
			divColor.style.background = theme.event.highlightColors[nbHL-1];
			td.appendChild(divColor);
			if (nbHL >= theme.event.highlightColors.length) self._$("addBtn").disabled=true;
		}
		function addButton(btn,par1,par2,par3){
			var td = tr.insertCell(tr.cells.length);
			var defBtn="<input type='button' class='btn' value='";
			//var defBtn="<input type='button' value='";
			var styBtn="' onmouseover='this.className=\"btn btnhov\"' onmouseout='this.className=\"btn\"'/>";
			//var styBtn="'/>";
			switch(btn){
				case "addBtn":
					td.innerHTML+=defBtn+"+' id='"+btn+styBtn;
					SimileAjax.DOM.registerEvent(eval(btn), "click", function() {addHighlight(par1,par2);});
					//$("#"+btn).click(function() {addHighlight(par1,par2);return false; });
					break;
				case "razBtn":
					//td.innerHTML=defBtn+"'Raz' id='"+btn+styBtn
					td.innerHTML+=defBtn+self.getCell(2,9)+"' id='"+btn+styBtn;
					SimileAjax.DOM.registerEvent(eval(btn), "click", function() {clearAll(par1, par2, par3);});
					//$("#"+btn).click(function() {clearAll(par1, par2, par3);return false; });
					break;
				case "todayBtn":
					//td.innerHTML=defBtn+"'-> Maintenant' id='"+btn+styBtn
					td.innerHTML+=defBtn+self.getCell(3,9)+"' id='"+btn+styBtn;
					SimileAjax.DOM.registerEvent(eval(btn), "click", function() {self.centerSimileAjax(new Date());});
					//$("#"+btn).click(function() {this.centerSimileAjax(new Date());return false; });
					break;
				case "validBtn":
					td.innerHTML+=defBtn+self.getCell(4,9)+"' id='"+btn+styBtn;
					SimileAjax.DOM.registerEvent(eval(btn), "click", function() {validate();});
					break;
				case "utBtn":
					td.innerHTML+=defBtn+"'test' id='"+btn+"'/>";
					SimileAjax.DOM.registerEvent(eval(btn), "click", function() {utils();});
					break;
			}
			td.appendChild(eval(btn));
		}
		function validate(){
		}
		function utils(){
			//alert("test !");
		}
		function clearAll(timeline, bandIndices, table) {
			var tr = table.rows[1];
			for (var i = tr.cells.length-1; i >= 0; i--) {
				var input = tr.cells[i].firstChild;
				if(input.type === "text"){
					input.value = "";
					if (i>1) tr.deleteCell(i);
				}
			}
			//document.getElementById("addBtn").style.visibility="visible";
			self._$("addBtn").disabled=false;
			for (var j = 0; j < bandIndices.length; j++) {
				var bandIndex = bandIndices[j];
				timeline.getBand(bandIndex).getEventPainter().setFilterMatcher(null);
				timeline.getBand(bandIndex).getEventPainter().setHighlightMatcher(null);
			}
			timeline.paint();
		}
		function onKeyPress(timeline, bandIndices, table) {
			if (timerID != null) {
				window.clearTimeout(timerID);
			}
			timerID = window.setTimeout(function() {
				performFiltering(timeline, bandIndices, table);
			}, 300);
		}
		function cleanString(s) {
			return s.replace(/^\s+/, '').replace(/\s+$/, '');
		}
		function performFiltering(timeline, bandIndices, table) {
			timerID = null;
			var tr = table.rows[1];
			var text = cleanString(tr.cells[0].firstChild.value);
			var filterMatcher = null;
			if (text.length > 0) {
				var regex = new RegExp(text, "i");
				filterMatcher = function(evt) {
					return regex.test(evt.getText()) || regex.test(evt.getDescription());
				};
			}
			var regexes = [];
			var hasHighlights = false;
			for (var x = 1; x < tr.cells.length - 1; x++) {
				var input = tr.cells[x].firstChild;
				if (input.type === "text"){
					var text2 = cleanString(input.value);
					if (text2.length > 0) {
						hasHighlights = true;
						regexes.push(new RegExp(text2, "i"));
					} else {
						regexes.push(null);
					}
				}
			}
			var highlightMatcher = hasHighlights ? function(evt) {
				var text = evt.getText();
				var description = evt.getDescription();
				for (var i = 0; i < regexes.length; i++) {
					var regex = regexes[i];
					if (regex != null && (regex.test(text) || regex.test(description))) return i;
				}
				return -1;
			} : null;
			for (var i = 0; i < bandIndices.length; i++) {
				var bandIndex = bandIndices[i];
				timeline.getBand(bandIndex).getEventPainter().setFilterMatcher(filterMatcher);
				timeline.getBand(bandIndex).getEventPainter().setHighlightMatcher(highlightMatcher);
			}
			timeline.paint();
		}// fin de performFiltering
	},//fin de setupFilterHighlightControls
	centerSimileAjax:	function (date) {
		this.oTL.getBand(0).setCenterVisibleDate(date);
	},
	afterDataChange:	function(){
		//top.Fu_trace(arguments,"***this.afterDataChange()");
		$("#loader").toggle();
		this.eventSource1.clear();
		this.timelineJSON={};
		this.populateJSON();
		this.eventSource1.loadJSON(this.timelineJSON, this.url); // The data was stored into the timelineJSON variable.
		$("#loader").toggle();
	},
	left: function (str,n){
		if (n <= 0) return "";
		else if (n > String(str).length) return str;
		else return String(str).substring(0,n);
	},
	right: function (str,n){
		if (n <= 0) return "";
		else if (n > String(str).length) return str;
		else {
		   var iLen = String(str).length;
		   return String(str).substring(iLen, iLen - n);
		}
	},
	mid: function (str,start,len){
		if (start < 0 || len < 0) return "";
		var iEnd, iLen = String(str).length;
		if (start + len > iLen) iEnd = iLen;
		else iEnd = start + len;
		return String(str).substring(start,iEnd);
	},
	_p$:function() {
		var elements = [];
		for (var i = 0; i < arguments.length; i++) {
			var element = arguments[i];
			if (typeof element === 'string')
				element = window.parent.document.getElementById(element);
			if (arguments.length === 1)
				return element;
			elements.push(element);
		}
		return elements;
	},
	_$:function() {
		var elements = [];
		for (var i = 0; i < arguments.length; i++) {
			var element = arguments[i];
			if (typeof element === 'string')
				element = document.getElementById(element);
			if (arguments.length === 1)
				return element;
			elements.push(element);
		}
		return elements;
	},
	// fin de GET_INFO
	BUBBLE:{
		onMouseOver:function(elt){
			var fadeDuration=100;
			$(elt).animate({backgroundColor: "#FFF8B0"},fadeDuration);
			try{
				$(elt.childNodes[3].firstChild).fadeTo(fadeDuration,1);
			}
			catch(e){
				
			}
		},
		onMouseOut:function(elt){
			var fadeDuration=300;
			$(elt).animate({backgroundColor: '#FFFFFF'},fadeDuration);
			try{
				$(elt.childNodes[3].firstChild).fadeTo(fadeDuration,.2);
			}
			catch(e){
				
			}
		},
		zoom:function(Objet,Cle){
			Timeline.WRAPPER.article.externalCall("LINKVUE", ["OBJET", Objet, Cle]);
		}
	},
	// fin de BUBBLE
	DetectTZ:{
		currYear: function(){
			var d=new Date();
			return d.getFullYear();
		},
		get_january_offset:function () {
			return this.get_date_offset(new Date(this.currYear(), 0, 1, 0, 0, 0, 0));
		},
		get_june_offset:function () {
			return this.get_date_offset(new Date(this.currYear(), 5, 1, 0, 0, 0, 0));
		},
		get_date_offset: function (date) {
			return -date.getTimezoneOffset();
		},
		get_timezone_info:function(){
			var diff = this.get_january_offset() - this.get_june_offset();
			if (diff < 0) {
				return {
					'utc_offset' : this.get_january_offset()/60,
					'dst':  1,
					'hemisphere' : 'NORTH'
				};
			} else if (diff > 0) {
				return {
					'utc_offset' : this.get_june_offset()/60,
					'dst' : 1,
					'hemisphere' : 'SOUTH'
				};
			} else {
				return {
					'utc_offset' : this.get_january_offset()/60, 
					'dst': 0, 
					'hemisphere' : 'N/A'
				};
			}			
		}
	} // fin du JSON DetectTZ	
});
