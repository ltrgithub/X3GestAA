"use strict";

// TODO: manage color ID
/// !doc
/// 
/// # Calendar Field
/// 
/// Calendar field is based on Google Calendar Model. see <https://developers.google.com/google-apps/calendar/>
/// The widget currently used is fullcalendar. see <http://arshaw.com/fullcalendar/docs/usage/>
/// 
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var datetime = require('syracuse-core/lib/types/datetime');
var date = require('syracuse-core/lib/types/date');
var Field = require('syracuse-ui/lib/field/field').Field;

var aspectRatio = 2.5;

var _localize = {
	"today": "today",
	"month": "month",
	"week": "week",
	"day": "day",
	"untitledEvent": "untitled event",
};
var _days = [0, 1, 2, 3, 4, 5, 6];
var _months = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];

var _status = ["confirmed", "tentative", "cancelled"]; // see https://developers.google.com/google-apps/calendar/v3/reference/events
function Calendar() {}

exports.Calendar = helpers.defineClass(Calendar, Field, {
	loadBox: function(initData) {
		var self = this;
		syra_site.loadStyleSheet("fullcalendar/fullcalendar.css");
		require.async('syracuse-ui/deps/fullcalendar/fullcalendar', function(err, module) {
			self.isLoaded = true;
			Field.prototype.loadBox.call(self, initData);
			if (self.isDatabindRequested) {
				var $bind = self.attachedField.$item.$bind;
				var dataset = self.articleParent.dataset;
				self.setDataBind(dataset[$bind], dataset, dataset.$properties && dataset.$properties[$bind], $bind);
				delete self.isDatabindRequested;
			}
			if (self.page && self.page.dialogWrapper) {
				self.page.resizeArticle();
			}
		});
	},
	initialize: function() {
		this.$item.$isAutoSize = true;
	},
	resizeArticle: function() {
		var self = this,
			bodyWidth = $(syra_site.body) && $(syra_site.body).width(),
			oldWidths = {
				body: self._widths && self._widths.body,
				field: self._widths && self._widths.field
			};
		self._widths = {
			body: bodyWidth,
			field: oldWidths.field - (oldWidths.body - bodyWidth)
		};
		self._resize(self._widths.field);
	},
	setDataBind: function(value, record, metaData, $bind) {
		if (this.isLoaded) {
			Field.prototype.setDataBind.call(this, value, record, metaData, $bind);
		} else {
			this.isDatabindRequested = true;
		}
	},
	setDataValue: function(value) {
		this.currentValue = value;
		if (value && value.$events) {
			this._events = this._getEvents(value.$events);
			var self = this;
			self._widget.fullCalendar('option', 'aspectRatio', aspectRatio);
			setTimeout(function() {
				self.calendar.fullCalendar('refetchEvents');
			}, 100);
		} else {
			self.isDatabindRequested = true;
		}
	},

	render: function() {
		_localize = locale.resources(module)();

		var self = this;
		var id = "a" + helpers.uuid.generate();
		self._dataValue.setAttribute("id", id);
		self._widget = $('<div />').attr('id', "cal_" + id).appendTo(self._dataValue);

		setTimeout(function() {
			self._createWidget();
		}, 100);

	},
	_resize: function(width) {
		if (!this._widget)
			return;
		this._widget.attr('style', 'width: ' + width + 'px; margin: 0 auto;');
		this.calendar && this._widget.fullCalendar('option', 'aspectRatio', aspectRatio);
	},

	_createWidget: function() {
		var self = this;
		self._widths = {
			body: $(syra_site.body).width(),
			field: $(self._dataValue).parents(".s-field-core").width()
		};
		self._resize(self._widths.field);
		var calendar = self._widget.fullCalendar({
			aspectRatio: aspectRatio,
			header: {
				left: 'prev,next today',
				center: 'title',
				right: 'month,agendaWeek,agendaDay'
			},
			// ============ locale ============
			buttonText: {
				today: _localize.today,
				//today',
				month: _localize.month,
				//month',
				week: _localize.week,
				//week',
				day: _localize.day,
				//day'
			},
			monthNames: _months.map(function(i) {
				return date.monthName(i + 1);
			}),
			monthNamesShort: _months.map(function(i) {
				return date.monthName(i + 1, true);
			}),
			dayNames: _days.map(function(i) {
				return date.dayName(i);
			}),
			dayNamesShort: _days.map(function(i) {
				return date.dayName(i, true);
			}),
			firstDay: 1,
			//=================================
			selectable: true,
			selectHelper: true,
			select: function(start, end, allDay) {
				var title = prompt('Event Title:');
				if (title) {
					calendar.fullCalendar('renderEvent', {
							title: title,
							start: start,
							end: end,
							allDay: allDay
						}, true // make the event "stick"
					);
				}
				calendar.fullCalendar('unselect');
			},
			unselect: function(ev) {
				console.log("calendar.unselect " + ev);
			},
			editable: true,
			events: function(start, end, timezone, callback) {
				var events = self._events &&
					self._events.filter(function(event) {
						return start.isBefore(event.end) && end.isAfter(event.start);
					});
				callback(events || []);
			},
			// ui events
			eventClick: function(event) {
				alert(event.title);
			},
			allDaySlot: true
		});
		self.calendar = calendar;
	},

	_getEvents: function(events) {
		var self = this;
		return events.map(function(event) {
			return {
				id: event.id,
				title: event.summary || _localize.untitledEvent,
				start: event.start && datetime.parse(event.start.date || event.start.datetime).toJsDate(),
				// unused: event.start.timeZone
				end: event.end && datetime.parse(event.end.date || event.end.datetime).toJsDate(),
				// unused: event.end.timeZone
				allDay: !! event.start.date,
				color: self._getColor(event.colorId),
				// url : ???,
				data: event
			};
		});
	},

	_getColor: function(colorId) {
		// TODO: manage color ID
		return "#69923A";
	}
});