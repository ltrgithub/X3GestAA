"use strict";
//http://www.openweb.eu.org/articles/formulaire_accessible
var helpers = require('syracuse-core/lib/helpers');
var _dateApi = require('syracuse-core/lib/types/date');
var _timeApi = require('syracuse-core/lib/types/time');

function Calendar() {

}

exports.Calendar = helpers.defineClass(Calendar, null, {
	bindEvents: function(bind) {
		var self = this;
		if (self.$$item) {
			if (bind) {
				self.$$item.delegate(".s-calendar-prev,.s-calendar-next", "click", function() {
					var $$link = $(this);
					self._changePeriode($$link.hasClass("s-calendar-prev"), $$link.attr("data-s-period"));
					return false;
				}).delegate("td.s-calendar-day-link", "click", function() {
					var selectedValue = $(this).children().data("value");
					self.field.setPickerValue(_dateApi.fromInternalValue(selectedValue).toString(self.field.localFormat), selectedValue);
					return false;
				});
				self._$$today.bind("click", function() {
					self._currentDate = _dateApi.today();
					//self._drawBody();
					self.field.setPickerValue(_dateApi.fromInternalValue(self._currentDate._value).toString(self.field.localFormat), self._currentDate._value);
					return false;
				});
				self._$$quick.bind("click", function() {
					if (!self.$$quickList) {
						self.$$quickList = $("<nav class='s-calendar-quick-list'/>");
						var intervals = ["fdpIntervalOfYear", "fdpIntervalOfQuarter", "fdpIntervalOfMonth", "fdpIntervalOfWeek"];
						for (var ii = 0, jj = intervals.length; ii < jj; ii++) {
							self.$$quickList.append("<div class='s-calendar-quick'><a class='s-calendar-quick-link'>" + self.field.localize.fdpBegin + "</a>/<a class='s-calendar-quick-link'>" + self.field.localize.fdpEnd + "</a>" + self.field.localize[intervals[ii]] + "</div>");
						}
						self.$$quickList.appendTo(self.$$item).delegate(".s-calendar-quick", "click", function(event) {
							var isBegin = $(event.target).index() == 0;
							var period = ["Year", "Quarter", "Month", "Week"][$(this).index()];
							var param;
							if (period == "Week") {
								param = 1;
							}
							self._currentDate = self._currentDate[(isBegin ? "begOf" : "endOf") + period](param);
							self._drawBody();
							self.$$quickList.hide();
							return false;
						});
					}
					if (self.$$quickList.is(":visible")) {
						self.$$quickList.hide();
					} else {
						self.$$quickList.show().position({
							my: "left bottom",
							at: "right bottom",
							of: self._$$quick
						});
					}
					return false;
				});
				self._$$monthLink.bind("click", function() {
					self._toggleMonth();
					return false;
				});
				self._$$yearLink.bind("click", function() {
					self._toggleYear();
					return false;
				});
				/*
                 self._$$monthYearLink.bind("click", function(){
                 //self._toggleMonthYear();
                 //self._toggleMonth();
                 self._toggleYear();
                 return false;
                 });*/
			} else {
				self.$$item.undelegate();
				if (self.$$quickList) {
					self.$$quickList.undelegate();
				}
				self._$$quick.unbind();
				self._$$today.unbind();
				//self._$$monthYearLink.unbind();
				self._$$monthLink.unbind();
				self._$$yearLink.unbind();
			}
		}
	},
	create: function(field, options) {
		this.$$item = $("<div class='s-calendar'/>").hide().appendTo(field.$$item);
		if (options && options.internalValue) {
			this._selectedDate = isNaN(options.internalValue) ? _dateApi.today() : _dateApi.fromInternalValue(options.internalValue);
			this._currentDate = _dateApi.fromInternalValue(this._selectedDate._value);
			//            this._selectedDate = _dateApi.fromInternalValue(options.internalValue);
			//            this._currentDate = _dateApi.fromInternalValue(options.internalValue);
		} else {
			var value = field.getInputValue() || "";
			this._selectedDate = value ? _dateApi.parse(value, field.localFormat) : _dateApi.today();
			this._currentDate = _dateApi.fromInternalValue(this._selectedDate._value);
		}
		this.field = field;
		this._table = document.createElement("table");
		this._table.setAttribute("cellspacing", 0);
		this._table.className = "s-calendar-content";
		this._table.appendChild(this._appendHead());
		this._table.appendChild(this._body = document.createElement("tbody"));
		this._table.appendChild(this._appendFoot());
		this.$$item.append(this._table);

		this._drawBody();
		this.bindEvents(true);
	},
	remove: function() {
		this.$$item.remove();
		this.dispose();
	},
	_appendHead: function() {
		var head = document.createElement("thead");
		var row = document.createElement("tr");
		var cell = document.createElement("th");
		cell.setAttribute("colspan", 8);
		cell.className = "s-calendar-month-year";

		// prev year link
		var link = document.createElement("a");
		link.setAttribute("data-s-period", "year");
		link.className = "s-calendar-prev s-calendar-prev-year";
		cell.appendChild(link);

		// prev month link
		link = document.createElement("a");
		link.setAttribute("data-s-period", "month");
		link.className = "s-calendar-prev s-calendar-prev-month";
		cell.appendChild(link);

		// month selection link
		link = document.createElement("a");
		link.className = "s-calendar-month-year-link";
		this._$$monthLink = $(cell.appendChild(link));

		// year selection link
		link = document.createElement("a");
		link.className = "s-calendar-month-year-link";
		this._$$yearLink = $(cell.appendChild(link));

		// next month link
		link = document.createElement("a");
		link.setAttribute("data-s-period", "month");
		link.className = "s-calendar-next s-calendar-next-month";
		cell.appendChild(link);

		// next year link
		link = document.createElement("a");
		link.setAttribute("data-s-period", "year");
		link.className = "s-calendar-next";
		$(link).addClass("s-calendar-next-year");
		cell.appendChild(link);

		row.appendChild(cell);
		head.appendChild(row);

		row = document.createElement("tr");
		var cell = document.createElement("th");
		cell.className = "s-calendar-week-day";
		row.appendChild(cell);

		[1, 2, 3, 4, 5, 6, 0].forEach(function(day) {
			var cell = document.createElement("th");
			cell.className = "s-calendar-week-day";
			cell.title = _dateApi.dayName(day);
			cell.textContent = _dateApi.dayName(day, true);
			row.appendChild(cell);
		});
		head.appendChild(row);
		return head;
	},
	_appendFoot: function() {
		var row = document.createElement("tr");
		var cell = document.createElement("td");
		cell.setAttribute("colspan", 3);
		cell.className = "s-calendar-foot-week";

		var link = document.createElement("a");
		link.setAttribute("data-s-period", "week");
		link.className = "s-calendar-prev";
		cell.appendChild(link);

		var label = document.createElement("label");
		label.className = "s-calendar-foot-week-title";
		label.textContent = this.field.localize.fdpWeek;
		cell.appendChild(label);

		label = document.createElement("label");
		label.className = "s-calendar-foot-week-title-num";
		this._$$weekNumber = $(cell.appendChild(label));

		link = document.createElement("a");
		link.setAttribute("data-s-period", "week");
		link.className = "s-calendar-next";
		cell.appendChild(link);
		row.appendChild(cell);

		cell = document.createElement("td");
		cell.setAttribute("colspan", 3);
		cell.className = "s-calendar-foot-today";
		link = document.createElement("a");
		link.className = "s-calendar-today-link";
		(this._$$today = $(cell.appendChild(link))).text(this.field.localize.fdpToday);
		row.appendChild(cell);

		cell = document.createElement("td");
		cell.setAttribute("colspan", 2);
		cell.className = "s-calendar-foot-more";
		link = document.createElement("a");
		link.className = "s-calendar-quick-btn";
		this._$$quick = $(cell.appendChild(link));
		row.appendChild(cell);

		var foot = document.createElement("tfoot");
		foot.appendChild(row);
		return foot;
	},
	_drawBody: function() {
		var curMonth = this._currentDate.month;
		var month = _dateApi.monthName(curMonth);
		//this._$$monthYearLink.text(month + " " + this._currentDate.year);
		this._$$monthLink.text(month);
		this._$$yearLink.text(this._currentDate.year);

		$(this._body).empty();

		var curDate = _dateApi.fromInternalValue(this._currentDate._value);
		var begOfMonth = curDate = curDate.begOfMonth();
		curDate = curDate.begOfWeek(1);
		for (var weekRow = 0; weekRow < 6; weekRow++) {
			var row = document.createElement("tr");
			var weekDay = (weekRow == 0) ? begOfMonth : curDate;
			var cell = document.createElement("td");
			cell.className = "s-calendar-week-num";
			$(row.appendChild(cell)).text(weekDay.week);
			for (var day = 0; day < 7; day++) {
				var cell = document.createElement("td");
				cell.className = "s-calendar-day-link";
				var link = document.createElement("a");
				$(link).text(curDate.day).data("value", curDate._value);
				if (curMonth != curDate.month) {
					cell.className += " s-calendar-other-month";
				}
				if (this._currentDate.equals(curDate)) {
					cell.className += " s-calendar-select";
					link.className = "s-calendar-select";
				}
				cell.appendChild(link);
				row.appendChild(cell);
				curDate = curDate.addDays(1);
			}
			this._body.appendChild(row);
		}
		this._$$weekNumber.text(this._currentDate.week);
	},
	_toggleMonthYear: function() {
		var self = this;
		if (!self._monthYear) {
			self._monthYear = new CalendarMonthYear();
			self._monthYear.create(self.field, self.$$item, self._currentDate, function(newDate) {
				self._currentDate = newDate;
				setTimeout(function() {
					self._drawBody();
					self._toggleMonthYear();
				}, 200);
				return true;
			});
			self._table.style.display = "none";
			self._monthYear.toggle(true);
		} else {
			self._table.style.display = "";
			self._monthYear.toggle(false);
			self._monthYear.dispose();
			delete self._monthYear;
		}
	},
	_toggleMonth: function() {
		var self = this;
		if (!self._month) {
			self._month = new CalendarMonth(self.field);
			self._month.create(self.$$item, self._currentDate, function(newDate) {
				self._currentDate = newDate;
				setTimeout(function() {
					self._drawBody();
					self._toggleMonth();
				}, 200);
				return true;
			});
			self._month.toggle(true);
		} else {
			self._month.toggle(false);
			self._month.dispose();
			delete self._month;
		}
	},
	_toggleYear: function() {
		var self = this;
		if (!self._year) {
			self._year = new CalendarYear(self.field);
			self._year.create(self.$$item, self._currentDate, function(newDate) {
				self._currentDate = newDate;
				setTimeout(function() {
					self._drawBody();
					self._toggleYear();
				}, 200);
				return true;
			});
			self._year.toggle(true);
		} else {
			self._year.toggle(false);
			self._year.dispose();
			delete self._year;
		}
	},
	_showQuickMenu: function($$link) {

	},
	_changePeriode: function(isPrev, period) {
		if (period == "month") {
			this._currentDate = this._currentDate.addMonths(isPrev ? -1 : 1);
		} else if (period == "year") {
			this._currentDate = this._currentDate.addYears(isPrev ? -1 : 1);
		} else {
			this._currentDate = this._currentDate.addDays(isPrev ? -7 : 7);
		}
		this._drawBody();
	},
	dispose: function() {
		this.bindEvents(false);
		this.field = null;
	}
});

function CalendarYear(field) {
	var self = this;
	var _$$item, _dateValue, _close, _selectedYear, _$$parent;

	self.create = function($$parent, dateValue, close) {
		_$$parent = $$parent;
		_$$item = $("<nav class='s-calendar-quick-list'/>");
		_dateValue = dateValue;
		_close = close;
		var $$tbody = $("<tbody/>");
		for (var ii = 0; ii < 6; ii++) {
			var $$row = $("<tr/>");
			if (ii == 0) {
				$$row.append("<td class='s-calendar-my-link-cell'><a class='s-calendar-prev' data-s-period='year'/></td>");
				$$row.append("<td class='s-calendar-my-link-cell'><a class='s-calendar-next' data-s-period='year'/></td>");
			} else {
				var cuYear = _dateValue.year + ii - 4;
				drawCell(cuYear, cuYear, _dateValue.year).appendTo($$row);
				drawCell(cuYear + 5, cuYear + 5, _dateValue.year).appendTo($$row);
			}
			$$row.appendTo($$tbody);
		}
		_$$item.append($$tbody).hide().prependTo($$parent);
		bindEvents(true);
	};

	function drawCell(value, text, selValue) {
		var $$cell = $("<td  class='s-calendar-my-item'>").append($("<a/>").text(text).data("value", value));
		if (value == selValue) {
			_selectedYear = value;
			$$cell.addClass("s-calendar-select").children("a").toggleClass("s-calendar-select", true);
		}
		return $$cell;
	}

	self.toggle = function(show) {
		if (show) {
			_$$item.show().position({
				my: "left top",
				at: "right top",
				of: _$$parent
			});
		} else _$$item.toggle(false);
	};

	function changeYear(isPrev) {
		var $$rows = _$$item.find("tbody > tr");
		var step = isPrev ? (-10) : 10;
		for (var ii = 1; ii < $$rows.length; ii++) {
			$($$rows[ii]).children("td").each(function() {
				var $$cell = $(this);
				var $$link = $$cell.children("a");
				var newVal = parseInt($$link.text()) + step;
				var isSelected = newVal == _selectedYear;
				$$cell.toggleClass("s-calendar-select", isSelected).children("a").toggleClass("s-calendar-select", isSelected);
				$$link.text(newVal);
			});
		}
	}

	function clickCell($$cell) {
		_$$item.find(".s-calendar-select").each(function() {
			var $$selected = $(this);
			$$selected.removeClass("s-calendar-select").children("a").toggleClass("s-calendar-select", false);
		});
		$$cell.toggleClass("s-calendar-select", true).children("a").toggleClass("s-calendar-select", true);

		_selectedYear = parseInt($$cell.children("a").text());

		return false;
	}

	function close($$link) {
		var year = _selectedYear ? _selectedYear : _dateValue.year;
		_dateValue = _dateApi.fromJsDate(new Date(year, _dateValue.month, _dateValue.day));
		_close(_dateValue);
	}

	function bindEvents(bind) {
		if (bind) {
			_$$item.delegate(".s-calendar-prev,.s-calendar-next", "click", function() {
				changeYear($(this).hasClass("s-calendar-prev"));
				return false;
			}).delegate(".s-calendar-my-item", "click", function() {
				clickCell($(this));
				close($(this));
				return false;
			});
		} else {
			_$$item.undelegate();
		}
	}

	self.dispose = function() {
		bindEvents(false);
		_$$item = _dateValue = _close = null;
	};
}

function CalendarMonth(field) {
	var self = this;
	var _$$item, _dateValue, _close, _selectedMonth, _$$parent;

	self.create = function($$parent, dateValue, close) {
		_$$parent = $$parent;
		_$$item = $("<nav class='s-calendar-quick-list'/>");
		_dateValue = dateValue;
		_close = close;
		var $$tbody = $("<tbody/>");
		for (var ii = 0; ii < 6; ii++) {
			var $$row = $("<tr/>");
			drawCell(ii + 1, _dateApi.monthName(ii + 1, true), _dateValue.month).appendTo($$row);
			drawCell(ii + 7, _dateApi.monthName(ii + 7, true), _dateValue.month).appendTo($$row);
			$$row.appendTo($$tbody);
		}
		_$$item.append($$tbody).hide().prependTo($$parent);
		bindEvents(true);
	};
	/*
     if (self.$$quickList.is(":visible")) {
     self.$$quickList.hide();
     }
     else {
     self.$$quickList.show().position({
     my: "left bottom",
     at: "right bottom",
     of: self._$$quick
     });
     }
     */
	function drawCell(value, text, selValue) {
		var $$cell = $("<td  class='s-calendar-my-item'>").append($("<a/>").text(text).data("value", value));
		if (value == selValue) {
			$$cell.addClass("s-calendar-select").children("a").toggleClass("s-calendar-select", true);
		}
		return $$cell;
	}

	self.toggle = function(show) {
		if (show) {
			_$$item.show().position({
				my: "right top",
				at: "left top",
				of: _$$parent
			});
		} else _$$item.toggle(false);

	};

	function clickCell($$cell) {
		_$$item.find(".s-calendar-select").each(function() {
			var $$selected = $(this);
			$$selected.removeClass("s-calendar-select").children("a").toggleClass("s-calendar-select", false);
		});
		$$cell.toggleClass("s-calendar-select", true).children("a").toggleClass("s-calendar-select", true);

		_selectedMonth = $$cell.index() == 1 ? $$cell.parent().index() + 7 : $$cell.parent().index() + 1;

		return false;
	}

	function close($$link) {
		var month = _selectedMonth ? _selectedMonth : _dateValue.month;
		_dateValue = _dateApi.fromJsDate(new Date(_dateValue.year, month - 1, _dateValue.day));
		_close(_dateValue);
	}

	function bindEvents(bind) {
		if (bind) {
			_$$item.delegate(".s-calendar-my-item", "click", function() {
				clickCell($(this));
				close($(this));
				return false;
			});
		} else {
			_$$item.undelegate();
		}
	}

	self.dispose = function() {
		bindEvents(false);
		_$$item = _dateValue = _close = null;
	};
}

function CalendarMonthYear() {
	var self = this;
	var _$$item, _dateValue, _close, _selectedYear, _selectedMonth;

	self.create = function(field, $$parent, dateValue, close) {
		_close = close;
		_dateValue = dateValue;
		_$$item = $("<table class='s-calendar-my-table'/>").append("<colgroup span='2' width='22,5%'/><colgroup span='2' width='5%'/><colgroup span='2' width='22,5%'/>");
		var $$tbody = $("<tbody/>");
		var year = _dateValue.year;
		for (var ii = 0; ii < 6; ii++) {
			var $$row = $("<tr/>");
			drawCell(ii + 1, _dateApi.monthName(ii + 1, true), _dateValue.month).appendTo($$row);
			drawCell(ii + 7, _dateApi.monthName(ii + 7, true), _dateValue.month).appendTo($$row);
			if (ii == 0) {
				$$row.append("<td rowspan='6'/><td  class='s-calendar-my-sep' rowspan='6'/>");
				$$row.append("<td class='s-calendar-my-link-cell'><a class='s-calendar-prev' data-s-period='year'/></td>");
				$$row.append("<td class='s-calendar-my-link-cell'><a class='s-calendar-next' data-s-period='year'/></td>");
			} else {
				var cuYear = _dateValue.year + ii - 1;
				drawCell(cuYear, cuYear, _dateValue.year).appendTo($$row);
				drawCell(cuYear + 5, cuYear + 5, _dateValue.year).appendTo($$row);
			}
			$$row.appendTo($$tbody);
		}
		var $$foot = $("<tfoot><tr><td colspan='6' class='s-calendar-my-btns'/></tr></tfoot>");
		$$foot.find(".s-calendar-my-btns").append($("<a class='s-calendar-my-btn'/>").text(field.localize.fdpOk)).append($("<a class='s-calendar-my-btn'/>").text(field.localize.fdpCancel));
		_$$item.append($$tbody).append($$foot).hide().appendTo($$parent);
		bindEvents(true);
	};

	function drawCell(value, text, selValue) {
		var $$cell = $("<td  class='s-calendar-my-item'>").append($("<a/>").text(text).data("value", value));
		if (value == selValue) {
			$$cell.addClass("s-calendar-select").children("a").toggleClass("s-calendar-select", true);
		}
		return $$cell;
	}
	self.toggle = function(show) {
		_$$item.toggle(show);
	};

	function changeYear(isPrev) {
		var $$rows = _$$item.find("tbody > tr");
		var step = isPrev ? (-10) : 10;
		for (var ii = 1; ii < $$rows.length; ii++) {
			$($$rows[ii]).children("td").slice(2).each(function() {
				var $$cell = $(this);
				var $$link = $$cell.children("a");
				var newVal = parseInt($$link.text()) + step;
				var isSelected = newVal == _selectedYear;
				$$cell.toggleClass("s-calendar-select", isSelected).children("a").toggleClass("s-calendar-select", isSelected);
				$$link.text(newVal);
			});
		}
	}

	function clickCell($$cell) {
		var isYear = $$cell.index() >= 2;
		_$$item.find(".s-calendar-select").each(function() {
			var $$selected = $(this);
			var isSelectedYear = $$selected.index() >= 2;
			if (isYear == isSelectedYear) {
				$$selected.removeClass("s-calendar-select").children("a").toggleClass("s-calendar-select", false);
			}
		});
		$$cell.toggleClass("s-calendar-select", true).children("a").toggleClass("s-calendar-select", true);
		if (isYear) {
			_selectedYear = parseInt($$cell.children("a").text());
		} else {
			_selectedMonth = $$cell.index() == 1 ? $$cell.parent().index() + 7 : $$cell.parent().index() + 1;
		}
		return false;
	}

	function close($$link) {
		if ($$link.index() == 0) { //ok
			var year = _selectedYear ? _selectedYear : _dateValue.year;
			var month = _selectedMonth ? _selectedMonth : _dateValue.month;
			_dateValue = _dateApi.fromJsDate(new Date(year, month - 1, _dateValue.day));
		} else { //cancel
			_selectedYear = _selectedMonth = null;
		}
		_close(_dateValue);
	}

	function bindEvents(bind) {
		if (bind) {
			_$$item.delegate(".s-calendar-prev,.s-calendar-next", "click", function() {
				changeYear($(this).hasClass("s-calendar-prev"));
				return false;
			}).delegate(".s-calendar-my-btn", "click", function() {
				close($(this));
				return false;
			}).delegate(".s-calendar-my-item", "click", function() {
				clickCell($(this));
				return false;
			});
		} else {
			_$$item.undelegate();
		}
	}

	self.dispose = function() {
		bindEvents(false);
		_$$item = _dateValue = _close = null;
	};
};

function TimeChoice() {

}

exports.TimeChoice = helpers.defineClass(TimeChoice, null, {
	create: function(field, options) {
		var self = this;
		self.$$item = $("<div class='s-time-choice'/>").hide().appendTo(field.$$item);
		options = options || {};
		self.columns = options.columns || 3;
		self.interval = options.interval || 60;
		self.curTime = field.getInputValue() ? _timeApi.parse(field.getInputValue(), field.localFormat) : _timeApi.now();
		self.field = field;
		//var selectedDate = field._input.value || _timeApi;
		//var curTime = _timeApi.now();
		self._createCore();
		self.bindEvents(true);
	},

	remove: function() {
		this.$$item.remove();
		this.dispose();
	},

	dispose: function() {
		this.bindEvents(false);
		this.field = null;
	},

	_createCore: function() {
		var cellCount = (24 * 60) / this.interval;
		var rowCount = cellCount / this.columns;

		var $$core = $("<table class='s-time-choice-table' cellspacing='0' cellpadding='0'/>");
		$$core.append("<tr><th class='s-time-choice-th' colspan='" + this.columns + "'>" + this.field.localize.fdpTitle + "</th></tr>");
		var cell = 0;
		var timeHour = _timeApi.parse("00:00:00");
		for (var rr = 0; rr < rowCount; rr++) {
			var $$row = $("<tr>");
			for (var col = 0; col < this.columns; col++) {
				var $$td = $("<td>").addClass('s-time-choice-td');
				var $$a = cell < cellCount ? $("<a>").addClass('s-time-choice-a').text(timeHour.toString(this.field.localFormat)).appendTo($$td) : "";
				if ($$a && timeHour.hour == this.curTime.hour) $$a.addClass('s-time-select');
				$$row.append($$td);
				timeHour = timeHour.addMinutes(this.interval);
				cell++;
			}
			$$core.append($$row);
		}
		this.$$item.append($$core);
	},

	bindEvents: function(bind) {
		var self = this;
		if (self.$$item) {
			if (bind) { // bind and delegate
				self.$$item.delegate(".s-time-choice-a", "click", function() {

					// remove previous select state
					self.$$item.find('.s-time-select').each(function() {
						$(this).removeClass('s-time-select');
					});

					// set select state
					$(this).addClass('s-time-select');

					// set input value
					self.field.setPickerValue($(this).text());

					return false;
				});
			} else { // unbind and undelegate
				self.$$item.undelegate();
			}
		}
	}
});

exports.Calendar = Calendar;
exports.TimeChoice = TimeChoice;