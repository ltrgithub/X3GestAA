"use strict";
var helpers = require('syracuse-core').helpers;

function Process() {
	this.jsonTxt = "";
	this.json = "";
	this.jsonFile = "";
};

exports.Process = helpers.defineClass(Process, null, {

	loadFromJsonUrl: function(jsonFile) {

		var response = $.ajax({
			type: 'get',
			url: jsonFile,
			dataType: 'json',
			async: false
		});

		var self = this;
		// status 200 = OK
		if (response.status == 200) {
			self.jsonTxt = response.responseText;
			try {
				self.json = $.parseJSON(self.jsonTxt);
			} catch (e) {
				// si le parse ne fonctionne pas, on renvoie l'objet et on garde les éléments vide.
				self.jsonTxt = "";
				self.json = "";
			}
		}
	},

	/**
	 *	Renvoi la valeur du champs currentLayerId du json
	 *	@return int currentLayerId
	 */
	getCurrentLayerId: function() {
		if (this.json != "") {
			return this.json.currentLayerId;
		} else {
			return null;
		}
	},

	/**
	 *	Renvoie un tableau avec le contenu du json pour les propriétés de la page
	 * 	@return array le tableau avec les informations de la page
	 */
	getPageInfo: function() {
		var info = [];
		if (this.json != "") {
			info.contentSize = this.json.contentSize;
			info.docDims = this.json.docDims;
		} else {
			info.contentSize = [];
			info.docDims = [];
		}
		return info;
	},

	/** 
	 *	Renvoie un tableau contenant la liste des actions de la page
	 *	@return array le tableau avec les actions
	 */
	getActions: function() {
		if (this.json != "") {
			return this.json.acts.a;
		} else {
			return [];
		}
	},

	/** 
	 *	Renvoie un tableau contenant la liste des objets et formes de la page
	 *		(images, textes, cadres de couleurs…)
	 *	@return array le tableau avec les objets/formes
	 */
	getFormes: function() {
		if (this.json != "") {
			return this.json.layersArr;
		} else {
			return [];
		}
	},

	/**
	 *	Renvoi le json sous forme de chaine de caractère pour l'affichage
	 *	@return String la chaine de caractère JSON au format json
	 */
	getJson: function() {
		if (this.jsonTxt != "") {
			return this.jsonTxt;
		} else {
			return null;
		}
	},

	/**
	 *	Charge une chaine de caractère formatée en JSON et la parse pour obtenir un tableau exploitable par le code
	 *	@return this on retourne l'objet lui même afin de pouvoir faire des appelles successifs.
	 */
	loadJson: function(json) {
		if (json != "") {
			this.jsonTxt = json;
			try {
				this.json = $.parseJSON(json);
			} catch (e) {
				// si le parse ne fonctionne pas, on renvoie l'objet et on garde les éléments vide.
				this.jsonTxt = "";
				this.json = "";
				return this;
			}
		}
		return this;
	}
});