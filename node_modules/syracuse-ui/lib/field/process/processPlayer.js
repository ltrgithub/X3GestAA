"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
var Article = require("syracuse-ui/lib/article/article").Article;
var tools = require('syracuse-ui/lib/field/process/processTools');

var debug = false;

function appendSvg(nom, attributs) {
	var svg = document.createElementNS("http://www.w3.org/2000/svg", nom);
	for (var cle in attributs) {
		var valeur = attributs[cle];
		svg.setAttribute(cle, valeur);
	}
	/*var appendices = this.length;
      for (var i = 0; i < appendices; i++)
      {
              this[i].appendChild(svg);
      }*/
	return svg;
}

function RecordArticle() {}

exports.RecordArticle = helpers.defineClass(RecordArticle, Article, {
	drawBox: function() {
		var slot = document.createElement("div");
		slot.style.display = "none";
		this.page.loadNewItem(this.boxParent.layoutSlot.appendChild(slot), {
			$category: "menus",
			$isMenusBag: true
		}, this);
	},
});

function ProcessPlayer() {}

exports.ProcessPlayer = helpers.defineClass(ProcessPlayer, null, {
	init: function($$div, /* options,*/ fld) {
		var opt = {};
		this.$$div = $$div;
		this.uuid = $$div.attr("id");
		this.field = fld;
		this.layoutSlot = document.createElement("div");
		this.$$layoutSlot = $(this.layoutSlot).appendTo($$div);
		return this;
	},
	showErrors: function(messages) {
		this.field.showErrors(messages, {
			"noViewer": true
		});
	},
	loadProcess: function(process) {
		this.process = process.$data;
		this.info = process.$info;
		this._loadBibMapping();
		//this.$$layoutSlot.css('height', this.process.contentSize.xheight + 'px').css('width', this.process.contentSize.xwidth + 'px').css('top', this.process.docDims.xtop).css('left', this.process.docDims.xtop);
	},
	_loadBibMapping: function() {
		if (this.bibMapping != null) return;
		var libsinfo = this.info && this.info.libsinfo,
			bibMapping = {};

		libsinfo && libsinfo.forEach(function(lib) {
			lib.biblist && lib.biblist.forEach(function(bib) {
				bibMapping[bib.bibid] = bib;
			});
		});

		this.bibMapping = bibMapping;
	},

	// Retrieve "$links" from prototype
	show: function() {
		function _execLink(link, fld) {
			var context = {};
			var links = {};
			context.link = {
				$item: {
					$links: {
						$onlylink: link
					}
				}
			};
			debug && console.log("ProcessPlayer._execLink: link.id=" + context.id);
			link && _executeRecordMenu(context, fld);
		}

		function _executeRecordMenu(context, fld) {
			var item = context.link.$item;
			var recordArticle;
			if (!fld.recordArticle) {
				fld.recordArticle = new RecordArticle();
				//fld.recordArticle.$prototype=fld.$item ;
				fld.recordArticle.$prototype = fld.articleParent.$prototype || {};
				fld.page.initializeNewItem(fld.recordArticle, {}, fld);
				fld.recordArticle.loadBox(item);
			} else {
				fld.recordArticle.applyChange(item);
			}
			var menuItem = fld.recordArticle.menuItems[Object.keys(item["$links" || "$actions"])[0]][0];
			debug && console.log("ProcessPlayer._executeRecordMenu: url=" + menuItem.$url);
			menuItem.click();
		}

		var bibMapping = this.bibMapping;

		function tryParse(json) {
			try {
				return JSON.parse(json);
			} catch (e) {
				throw new Error("Failed to parse " + json + "\n[" + e.message + "]");
			}
		}




		function createAction(action, index, array) {

			function clickHdl() {
				var targ = $$layoutSlot.find('.target' + action.id);
				targ.css('display', 'block');
			}
			var trigger = $$layoutSlot.find('.trigger' + action.id);
			var targ;
			trigger.attr('pointer-events', 'visible');
			/*trigger.hover(function () {
                    $(this).css('cursor', 'pointer');
                }, function () {
                    $(this).css('cursor', 'default');
                });*/
			trigger.css('cursor', 'pointer');
			switch (action.type) {
				case 'shotip':
					$$layoutSlot.find('.target' + action.id).hide();
					trigger.mouseover(function(e) {
						$$layoutSlot.find('.target' + action.id).css('display', 'block');
					});
					trigger.mouseout(function(e) {
						$$layoutSlot.find('.target' + action.id).css('display', 'none');
					});

					break;
				case 'sho':
					targ = $$layoutSlot.find('.target' + action.id);
					var isHideTarget = false;
					array.forEach(function(a, index, array) {
						if (a.type === 'hid' && targ.is('.target' + a.id)) isHideTarget = true;
					});
					if (!isHideTarget) targ.hide();
					trigger.click(function() {
						$$layoutSlot.find('.target' + action.id).show();
					});
					break;

				case 'shopopmenu':
					targ = $$layoutSlot.find('.target' + action.id);
					targ.hide();

					trigger.click(clickHdl);
					$$layoutSlot.click(function(e) {

						var parenttrigger = $(e.target).parents().filter(function(idx, el) {
							if ($(el).is('.trigger' + action.id)) return true;
						});
						var parenttarget = $(e.target).parents().filter(function(idx, el) {
							if ($(el).is('.target' + action.id)) return true;
						});

						if (!($(e.currentTarget).is('.trigger' + action.id)) && parenttrigger.size() === 0 && !($(e.currentTarget).is('.target' + action.id)) && parenttarget.size() === 0) {
							targ.hide();
						}
					});
					break;
				case 'hid':
					trigger.click(function() {
						$$layoutSlot.find('.target' + action.id).hide();
					});
					break;
				case 'shohid':
					trigger.click(function() {
						var targ = $$layoutSlot.find('.target' + action.id);
						var hidden = (targ.css('display') == 'none'); //(target.attr('display') == 'none');
						if (hidden) targ.css('display', 'block');
						else targ.css('display', 'none');
					});

					break;
				case 'shoallpopmenu':
					trigger.click(function(e) {
						array.forEach(function(a, index, array) {
							if (a.type === "shopopmenu") {
								var targets = $$layoutSlot.find('.target' + a.id); //+':hidden') ;
								var trig = $$layoutSlot.find('.trigger' + a.id);

								targets.each(function(index, el) {
									var hidden = ($(el).css('display') == 'none');
									if (hidden) {
										trig.unbind('click', clickHdl);
										$(el).css('display', 'block');
									} else {
										trig.bind('click', clickHdl);
										$(el).css('display', 'none');
									}

								});
							}
						});
						e.stopPropagation();
					});

					break;
			}

		}

		function constructLinksObj(params) {

			var obj = {},
				baseUrl = self.field.articleParent.$prototype.$baseUrl;
			switch (params.xtype) {


				case 'url':
					obj.$type = "application/json;vnd.sage=syracuse";
					obj.$url = params.xcode;
					break;
					/*
				case 'erpfunc':
					obj.$type = "application/json;vnd.sage=syracuse";
					obj.$title = params.xlabel;
					obj.$url = baseUrl.replace(/\/(\w+)\/(.*)/, "/trans/$2") + "/$sessions?f=" + params.xcode + "/2//M/" + params.xparam2;
					break;

				case 'url':
					obj.$type = "application/json;vnd.sage=syracuse";
					obj.$url = params.xcode;
					break;

				case 'page':
					obj.$type = "application/json;vnd.sage=syracuse";
					obj.$title = params.xlabel;
					obj.$url = baseUrl + "/PROCESS('" + params.xcode + "')?representation=PROCESS~" + params.xcode + ".$details";
					break;

				case 'syrapedia':
					obj.$type = "application/json;vnd.sage=syracuse";
					obj.$title = params.xlabel;
					obj.$url = baseUrl + "/" + params.xcode + "?representation=" + params.xcode + ".$" + params.xkey;
					break;
				*/

				default:
					self.showErrors([(self.field.localize.flProcessPlayerIncorrectLinkType || "").replace("{0}", params.xtype)]);
					break;
			}
			/*if (params.xtarget === "blank") {
				obj.$target = "blank";
			}*/
			if (params.xtarget != null) {
				obj.$target = params.xtarget;
			}
			return obj;
		}

		function manageLink(index, el) {

			var href = $(el).attr('href'),
				children = $(el).contents(),
				next = $(el).next(),
				uri_decoded = decodeURIComponent(href),
				uri = uri_decoded && uri_decoded.replace("asfunction:_global.ShapeLabelURLClicked,", ""),
				linksobj = constructLinksObj(tryParse(uri));
			// var next = $(el).next();
			if (next.length === 0) {
				$(el).parent().append(children);
			} else {
				next.before(children);
			}
			$(el).remove();
			if (!linksobj) {
				self.showErrors([(self.field.localize.flProcessPlayerLinkNotSupported || "").replace("{0}", uri)]);
			} else {
				children && children.bind('click', function(e) {
					_execLink(linksobj, self.field);
				});
				children.css('cursor', 'pointer');
			}
		}

		function addLink(index, el) {
			//el.bind('click', function (e) {
			var href = $(el).attr('link');
			var params = tryParse(decodeURIComponent(href));
			$(el).removeAttr('link');

			var linksobj = constructLinksObj(params);
			var g = $(el).closest('g.link');
			g.click(function(e) { /*this. */
				_execLink(linksobj, self.field);
			});
			g.css('cursor', 'pointer');

			if (browsertype.msie) {
				var divtext = $$layoutSlot.find("div#" + $(el).attr('id') + 'p');
				divtext.bind('click', function(e) { /* this.*/
					_execLink(linksobj, self.field);
				});
				divtext.css('cursor', 'pointer');
			}

			g.attr('pointer-events', 'visible');
		}

		function makeClassAssignment(act, type) {
			return function(value, index, array) {
				act.addClass(type + value);
			};
		}

		var browsertype = $.browser;
		try {

			var self = this,
				$$layoutSlot = this.$$layoutSlot,
				layers = self.process && self.process.layersArr;
			var actions = (self.process.acts.a) ? self.process.acts.a : [];
			var csize = {
				x: self.process.contentSize.xwidth,
				y: self.process.contentSize.xheight
			};
			//var csize=getLargestContentSize() ;
			var result = "";
			var defs = '<defs>';
			var gn, group, i, sizeG;

			for (gn = 0, sizeG = layers.length; gn < sizeG; gn++) {
				group = layers[gn];

				for (i = 0; i < group.xpropsArr.length; i++) {

					var shapeInfo = tools.createShape(group.xpropsArr[i], csize, bibMapping);
					defs += shapeInfo.defs || "";
					var rotation;
					if (group.xpropsArr[i].xshapeType == "apishape" && group.xpropsArr[i].xdrawBehaviorCode == "K_API_ELLIPSE") {
						rotation = (Math.atan2(group.xpropsArr[i].xanchors[2].y - group.xpropsArr[i].xanchors[0].y, //
							group.xpropsArr[i].xanchors[2].x - group.xpropsArr[i].xanchors[0].x) !== 0);
					} else if (group.xpropsArr[i].xshapeType == "clipshape" || (group.xpropsArr[i].xshapeType == "apishape" && group.xpropsArr[i].xdrawBehaviorCode != "K_API_LINE")) {
						rotation = (Math.atan2(group.xpropsArr[i].xanchors[1].y - group.xpropsArr[i].xanchors[0].y, //
							group.xpropsArr[i].xanchors[1].x - group.xpropsArr[i].xanchors[0].x) !== 0);
					}

					var ttext = '';
					if (group.xpropsArr[i].xlinkProps.xtype != 'none') {
						result += '<g class="link">';
					}

					if (group.xpropsArr[i].xactionProps.targ || group.xpropsArr[i].xactionProps.trig) {
						//result += '<g>';
						var gact = $('<g>');
						if (group.xpropsArr[i].xactionProps.targ) {
							group.xpropsArr[i].xactionProps.targ.forEach(makeClassAssignment(gact, "target"));
						}
						if (group.xpropsArr[i].xactionProps.trig) {
							group.xpropsArr[i].xactionProps.trig.forEach(makeClassAssignment(gact, "trigger"));
						}
						var gacthtml = gact[0].outerHTML;
						result += gacthtml.replace(/<\/g>/, "");
					}
					if (rotation) {
						result += '<g transform="' + tools.getRotate(group.xpropsArr[i]) + '">';

					}

					result += shapeInfo.descr || "";
					if (rotation) {
						result += '</g>';
					}

					if (group.xpropsArr[i].xtext != "") {

						if (!browsertype.msie) {
							//console.log ("Internet Explorer") ;
							ttext = tools.createText(group.xpropsArr[i], rotation);
							result += ttext;
						}
					}

					if (group.xpropsArr[i].xlinkProps.xtype != 'none') {
						result += '</g>';
					}

					if (group.xpropsArr[i].xactionProps.targ || group.xpropsArr[i].xactionProps.trig) {
						result += '</g>';
					}

				}

			}
			defs += '</defs>';
			var svgdescr = '<svg  xmlns="http://www.w3.org/TR/SVG11/" width="' + csize.x + 'px" height="' + csize.y + 'px"> ' + defs + result + '</svg>';
			//var svgtest='<svg xmlns="http://www.w3.org/TR/SVG11/" width="' + csize.x +'px" height="' + csize.y + 'px">'+ defs+result+'</svg>' ;
			//var svgf=$(svgtest) ;
			//$$layoutSlot.append(svgf);
			//var svgplot =  document.createNS("http://www.w3.org/2000/svg",svg)
			var svgplot = $(svgdescr);
			$$layoutSlot.append(svgplot);

			if (browsertype.msie) {
				//create the texts as div elements
				for (gn = 0, sizeG = layers.length; gn < sizeG; gn++) {
					group = layers[gn];

					for (i = 0; i < group.xpropsArr.length; i++) {
						if (group.xpropsArr[i].xtext != '') {
							tools.appendText(group.xpropsArr[i], $$layoutSlot);
						}
					}
				}
			}

			actions.forEach(createAction);

			var textlinks = $$layoutSlot.find('a');
			textlinks.each(manageLink);

			var links = svgplot.find('*[link]');
			links.each(addLink);

		} catch (e) {
			throw e;
		}

		return this;
	},

	clear: function() {
		this.$$layoutSlot.empty();
		this.process = {};
		return this;
	},
	dispose: function() {
		this.process = null;
		this.field = null;
		// AJouter la method dispose dans ProcessPlayer
	}
});