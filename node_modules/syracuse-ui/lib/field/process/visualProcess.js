"use strict";
var helpers = require('syracuse-core/lib/helpers'), Process = require('syracuse-ui/lib/field/process/process').Process, ProcessPlayer = require('syracuse-ui/lib/field/process/processPlayer').ProcessPlayer, Field = require('syracuse-ui/lib/field/field').Field;

// require("syracuse-visual-process/lib/player/sagePlayer");

function VisualProcess(){
}

exports.VisualProcess = helpers.defineClass(VisualProcess, Field, {

    loadBox: function($$item){
        Field.prototype.loadBox.call(this, $$item);
    },
    setDataValue: function(value){
        try{
            // console.log('VisualProcess.setDataValue');
            if (this.currentValue != value) {
                this.currentValue = value;
                
                this.player.clear();
                this.player.loadProcess(value);
                this.player.show();
                
            }
        }catch(e){
            //console.error(e.stack);
            this.showErrors([e.message]);
            this.showErrors([e.stack]);
        }
    },
    
    render: function(){

        try{
            if (this.$isEditMode) 
                throw new Error("Edit mode for Visual processes is not supported!");
            
            var self = this;
            var id = helpers.uuid.generate();
            self.$$dataValue.attr("id", "vp" + id);
            
            var $$player = self.$$dataValue;
            
            
            self.player = new ProcessPlayer().init(self.$$dataValue, this);
        }catch(e){
            this.showErrors([e.message]);
            this.showErrors([e.stack]);
        }
    },
    dispose: function(){
        try{
        Field.prototype.dispose.call(this);
        if (this.player) {
            this.player.dispose();
            this.player = null;
        }
         }catch(e){
            this.showErrors([e.message]);
            this.showErrors([e.stack]);
        }
    }
});
