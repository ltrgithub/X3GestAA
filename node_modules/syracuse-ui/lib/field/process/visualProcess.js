"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Process = require('syracuse-ui/lib/field/process/process').Process;
var Field = require('syracuse-ui/lib/field/field').Field;
var tools = require('syracuse-ui/lib/field/process/processTools');

function VisualProcess() {}

exports.VisualProcess = helpers.defineClass(VisualProcess, Field, {
	setDataValue: function(value) {
		try {
			if (this.currentValue != value) {
				this.currentValue = value;

				this.$$playerSlot.empty();
				this.process = {};
				this._loadProcess(value);
				this._showPlayer();
				this.page.onWindowResize();
			}
		} catch (e) {
			this.showDiagnoses([{
				$message: e.message,
				$severity: "error",
				"$stackTrace": e.stack
			}]);
		}
	},
	_tryParse: function(json) {
		try {
			return JSON.parse(json);
		} catch (e) {
			throw new Error("Failed to parse " + json + "\n[" + e.message + "]");
		}
	},
	_loadProcess: function(process) {
		this.process = process.$data;
		this.info = process.$info;
		if (!this.bibMapping) {
			var libsinfo = this.info && this.info.libsinfo;
			this.bibMapping = {};
			if (libsinfo) {
				for (var ii = 0, jj = libsinfo.length; ii < jj; ii++) {
					var lib = libsinfo[ii];
					if (lib.biblist) {
						for (var mm = 0, kk = lib.biblist.length; mm < kk; mm++) {
							this.bibMapping[lib.biblist[mm].bibid] = lib.biblist[mm];
						}
					}
				}
			}
		}
	},
	ensureEditMode: function() {
		this.$isEditMode = false;
	},
	render: function() {
		this._dataValue.setAttribute("id", "vp" + this.id);
		this.$linkId = "$processLink" + this.id;
		this.playerSlot = document.createElement("div");
		this.$$playerSlot = $(this._dataValue.appendChild(this.playerSlot));

		this.page.loadNewItem(this._dataValue, {
			$bind: this.$linkId,
			$category: "link"
		}, this.articleParent);
	},
	_execLink: function(link) {
		var $links = {};
		$links[this.$linkId] = null;
		this.articleParent.applyChange({
			$links: $links
		});
		this.page.loadNewItem(this._dataValue, {
			$bind: this.$linkId,
			$category: "link"
		}, this.articleParent);
		($links[this.$linkId] = link).$isHidden = true;
		this.articleParent.applyChange({
			$links: $links
		});
		this.articleParent.clickMenu(this.$linkId);
	},
	_constructLinksObj: function(params) {
		var obj = {};
		var baseUrl = this.articleParent.$prototype.$baseUrl;
		switch (params.xtype) {
			case 'url':
				obj.$type = "application/json;vnd.sage=syracuse";
				obj.$url = params.xcode;
				break;
			default:
				this.showErrors([(this.localize.flProcessPlayerIncorrectLinkType || "").replace("{0}", params.xtype)], {
					"noViewer": true
				});
				break;
		}
		if (params.xtarget != null) {
			obj.$target = params.xtarget;
		}
		return obj;
	},
	_showPlayer: function() {
		var isBrowserMsie = $.browser.msie;
		var self = this;
		var layers = self.process && self.process.layersArr;
		var actions = (self.process.acts && self.process.acts.a) ? self.process.acts.a : [];
		var csize = {
			x: self.process.contentSize.xwidth,
			y: self.process.contentSize.xheight
		};
		var result = "";

		var bibMapping = this.bibMapping;

		function createAction(action, index, array) {
			function clickHdl() {
				var targ = self.$$playerSlot.find('.target' + action.id);
				targ.css('display', 'block');
			}
			var trigger = self.$$playerSlot.find('.trigger' + action.id);
			var targ;
			trigger.attr('pointer-events', 'visible');
			trigger.css('cursor', 'pointer');
			switch (action.type) {
				case 'shotip':
					self.$$playerSlot.find('.target' + action.id).hide();
					trigger.mouseover(function(e) {
						self.$$playerSlot.find('.target' + action.id).css('display', 'block');
					});
					trigger.mouseout(function(e) {
						self.$$playerSlot.find('.target' + action.id).css('display', 'none');
					});
					break;
				case 'sho':
					targ = self.$$playerSlot.find('.target' + action.id);
					var isHideTarget = false;
					array.forEach(function(a, index, array) {
						if (a.type === 'hid' && targ.is('.target' + a.id)) isHideTarget = true;
					});
					if (!isHideTarget) {
						targ.hide();
					}
					trigger.click(function() {
						self.$$playerSlot.find('.target' + action.id).show();
					});
					break;
				case 'shopopmenu':
					targ = self.$$playerSlot.find('.target' + action.id);
					targ.hide();
					trigger.click(clickHdl);
					self.$$playerSlot.click(function(e) {
						var parenttrigger = $(e.target).parents().filter(function(idx, el) {
							if ($(el).is('.trigger' + action.id)) return true;
						});
						var parenttarget = $(e.target).parents().filter(function(idx, el) {
							if ($(el).is('.target' + action.id)) return true;
						});
						if (!($(e.currentTarget).is('.trigger' + action.id)) && parenttrigger.size() === 0 && !($(e.currentTarget).is('.target' + action.id)) && parenttarget.size() === 0) {
							targ.hide();
						}
					});
					break;
				case 'hid':
					trigger.click(function() {
						self.$$playerSlot.find('.target' + action.id).hide();
					});
					break;
				case 'shohid':
					trigger.click(function() {
						var targ = self.$$playerSlot.find('.target' + action.id);
						var hidden = (targ.css('display') == 'none'); //(target.attr('display') == 'none');
						if (hidden) targ.css('display', 'block');
						else targ.css('display', 'none');
					});
					break;
				case 'shoallpopmenu':
					trigger.click(function(e) {
						array.forEach(function(a, index, array) {
							if (a.type === "shopopmenu") {
								var targets = self.$$playerSlot.find('.target' + a.id); //+':hidden') ;
								var trig = self.$$playerSlot.find('.trigger' + a.id);
								targets.each(function(index, el) {
									var hidden = ($(el).css('display') == 'none');
									if (hidden) {
										trig.unbind('click', clickHdl);
										$(el).css('display', 'block');
									} else {
										trig.bind('click', clickHdl);
										$(el).css('display', 'none');
									}
								});
							}
						});
						e.stopPropagation();
					});
					break;
			}
		}

		var defs = '<defs>';
		for (var gn = 0, sizeG = layers.length; gn < sizeG; gn++) {
			var group = layers[gn];
			for (var i = 0; i < group.xpropsArr.length; i++) {
				var shapeInfo = tools.createShape(group.xpropsArr[i], csize, bibMapping);
				defs += (shapeInfo.defs || "");
				var rotation;
				if (group.xpropsArr[i].xshapeType == "apishape" && group.xpropsArr[i].xdrawBehaviorCode == "K_API_ELLIPSE") {
					rotation = (Math.atan2(group.xpropsArr[i].xanchors[2].y - group.xpropsArr[i].xanchors[0].y, group.xpropsArr[i].xanchors[2].x - group.xpropsArr[i].xanchors[0].x) !== 0);
				} else {
					if (group.xpropsArr[i].xshapeType == "clipshape" || (group.xpropsArr[i].xshapeType == "apishape" && group.xpropsArr[i].xdrawBehaviorCode != "K_API_LINE")) {
						rotation = (Math.atan2(group.xpropsArr[i].xanchors[1].y - group.xpropsArr[i].xanchors[0].y, group.xpropsArr[i].xanchors[1].x - group.xpropsArr[i].xanchors[0].x) !== 0);
					}
				}
				var ttext = '';
				if (group.xpropsArr[i].xlinkProps.xtype != 'none') {
					result += '<g class="link">';
				}
				var xactionProps = group.xpropsArr[i].xactionProps;
				if (xactionProps.targ || xactionProps.trig) {
					var css = "";
					if (xactionProps.targ) {
						for (var ii = 0, jj = xactionProps.targ.length; ii < jj; ii++) {
							css += "target" + xactionProps.targ[ii] + " ";
						}
					}
					if (xactionProps.trig) {
						for (var ii = 0, jj = xactionProps.trig.length; ii < jj; ii++) {
							css += "trigger" + xactionProps.trig[ii] + " ";
						}
					}
					result += ("<g " + (css ? ("class='" + css + "'") : "") + ">");
				}
				if (rotation) {
					result += '<g transform="' + tools.getRotate(group.xpropsArr[i]) + '">';

				}
				result += shapeInfo.descr || "";
				if (rotation) {
					result += '</g>';
				}
				if (group.xpropsArr[i].xtext != "") {
					// if (!isBrowserMsie) {
					// 	ttext = tools.createText(group.xpropsArr[i], rotation);
					// 	result += ttext;
					// }
					result += tools["createText" + (isBrowserMsie && "_ie" || "")](group.xpropsArr[i], rotation);
				}
				if (group.xpropsArr[i].xlinkProps.xtype != 'none') {
					result += '</g>';
				}
				if (xactionProps.targ || xactionProps.trig) {
					result += '</g>';
				}
			}

		}
		defs += '</defs>';
		var svgdescr = '<svg  xmlns="http://www.w3.org/TR/SVG11/" width="' + csize.x + 'px" height="' + csize.y + 'px"> ' + defs + result + '</svg>';
		var svgplot = $(svgdescr);
		// if (isBrowserMsie) {
		// 	//create the texts as div elements
		// 	for (var mm = 0, kk = layers.length; mm < kk; mm++) {
		// 		var group = layers[mm];
		// 		for (var ii = 0, jj = group.xpropsArr.length; ii < jj; ii++) {
		// 			if (group.xpropsArr[ii].xtext != '') {
		// 				tools.appendText(group.xpropsArr[ii], this.playerSlot);
		// 			}
		// 		}
		// 	}
		// }
		this.$$playerSlot.append(svgplot);

		actions.forEach(createAction);

		function manageLink(index, link) {
			var $$link = $(link);
			var uri_decoded = decodeURIComponent(link.getAttribute('href'));
			var children = $$link.contents();
			var next = $$link.next();
			var uri = uri_decoded && uri_decoded.replace("asfunction:_global.ShapeLabelURLClicked,", "");
			var linksobj = self._constructLinksObj(self._tryParse(uri));
			if (next.length === 0) {
				$$link.parent().append(children);
			} else {
				next.before(children);
			}
			$$link.remove();
			if (!linksobj) {
				self.showErrors([(self.localize.flProcessPlayerLinkNotSupported || "").replace("{0}", uri)], {
					"noViewer": true
				});
			} else {
				children && children.bind('click', function(e) {
					self._execLink(linksobj);
				});
				children.css('cursor', 'pointer');
			}
		}
		var textlinks = this.$$playerSlot.find('a');
		textlinks.each(manageLink);

		/* for (var ii = 0, jj = textlinks.length; ii < jj; ii++) {
         var link = textlinks[ii];
         var $$link = $(link);
         var uri_decoded = decodeURIComponent(link.getAttribute('href'));
         var children = $$link.contents();
         var next = $$link.next();
         var uri = uri_decoded && uri_decoded.replace("asfunction:_global.ShapeLabelURLClicked,", "");
         var linksobj = self._constructLinksObj(self._tryParse(uri));
         if (next.length === 0) {
         $$link.parent().append(children);
         }
         else {
         next.before(children);
         }
         $$link.remove();
         if (!linksobj) {
         this.showErrors([(this.localize.flProcessPlayerLinkNotSupported || "").replace("{0}", uri)], {
         "noViewer": true
         });
         }
         else {
         children &&
         children.bind('click', function(e){
         self._execLink(linksobj);
         });
         children.css('cursor', 'pointer');
         }
         }*/

		function addLink(index, link) {
			var params = self._tryParse(decodeURIComponent(link.getAttribute('link')));
			link.removeAttribute('link');
			var linksobj = self._constructLinksObj(params);
			var g = $(link).closest('g.link');
			g.click(function(e) {
				self._execLink(linksobj);
			});
			g.css('cursor', 'pointer');
			if (isBrowserMsie) {
				var divtext = self.$$playerSlot.find("div#" + link.getAttribute('id') + 'p');
				divtext.bind('click', function(e) {
					self._execLink(linksobj);
				});
				divtext.css('cursor', 'pointer');
			}
			g.attr('pointer-events', 'visible');
		}
		var links = svgplot.find('*[link]');
		links.each(addLink);


		/*for (var ii = 0, jj = links.length; ii < jj; ii++) {
         var link = links[ii];
         var params = this._tryParse(decodeURIComponent(link.getAttribute('link')));
         link.removeAttribute('link');
         var linksobj = this._constructLinksObj(params);
         var g = $(link).closest('g.link');
         g.click(function(e) {
         self._execLink(linksobj);
         });
         g.css('cursor', 'pointer');
         if (isBrowserMsie) {
         var divtext = this.$$playerSlot.find("div#" + link.getAttribute('id') + 'p');
         divtext.bind('click', function(e) {
         self._execLink(linksobj);
         });
         divtext.css('cursor', 'pointer');
         }
         g.attr('pointer-events', 'visible');
         }*/
		return this;
	},
	dispose: function() {
		this.process = this.playerSlot = this.$$playerSlot = null;
		Field.prototype.dispose.call(this);
	}
});


function appendSvg(nom, attributs) {
	var svg = document.createElementNS("http://www.w3.org/2000/svg", nom);
	for (var cle in attributs) {
		var valeur = attributs[cle];
		svg.setAttribute(cle, valeur);
	}
	/*var appendices = this.length;
     for (var i = 0; i < appendices; i++)
     {
     this[i].appendChild(svg);
     }*/
	return svg;
}