"use strict";
var helpers = require('syracuse-core/lib/helpers');
var jsxml = require("jsxml/lib/jsxml");

require('syracuse-ui/deps/highcharts/highcharts.src');

var symbols;

function initSymbols() {
	if (symbols.$initialized) return;
	var s, def, collec;

	function init(col, k) {
		s = col[k];
		s.id = k;
		def = s.def;
		s.def = '<g class="s-vp-' + k + '">' + def + "</g>";
		s.svg = safeParseXml("<svg>" + def + "</svg>").svg;
	}
	Object.keys(symbols).forEach(function(k) {
		collec = symbols[k];
		collec.id = k;
		Object.keys(collec).forEach(init.bind(null, collec));
	});
	symbols.$initialized = true;
}

function safeParseXml(xml) {
	try {
		return jsxml.parse(xml);
	} catch (e) {
		return {};
	}
}

function SymbolManager(slot) {
	initSymbols();
	this.slot = slot;
	this.renderer = new Highcharts.Renderer(this.slot, 0, 0);
}

exports.SymbolManager = helpers.defineClass(SymbolManager, null, {

	get: function(colId, id) {
		var col = symbols[colId];
		// return null;
		return col && col[id];
	},

	getSvg: function(symbol, cx, cy, width, height, opt) {
		if (symbol.size) {
			width = symbol.size.width || width;
			height = symbol.size.height || height;
		}
		symbol.box = symbol.box || this.getBBox(symbol);

		var box = symbol.box,
			scaleX = width / (box.width || 1),
			scaleY = height / (box.height || 1),
			scale = (scaleX + scaleY) / 2,
			svg = '';

		svg += '<g' + (opt.link || '') + (opt.filter || '');
		svg += ' transform="scale(' + scale + ") translate(" + (cx / scale - (box.x + box.width / 2)) + " " + (cy / scale - (box.y + box.height / 2)) + ')"';
		svg += '>';
		svg += symbol.def;
		svg += '</g>';
		return svg;
	},

	getBBox: function(symbol) {
		var groups = [],
			renderer = this.renderer,
			root, box;

		function create(s) {
			groups.unshift(root);
			traverse(s.svg, {
				visit: function(k, v) {
					if (k === "$") return false;
					if (k === "g") {
						var id = (v.$ || {}).id;
						groups.unshift(renderer.g(id).attr({
							id: id
						}).add(groups[0]));
						return true;
					} else {
						renderer.createElement(k).attr(v.$).add(groups[0]);
					}
				},
				leave: function(k, v) {
					if (k === "g") {
						groups.shift();
					}
				}
			});
			groups.shift();
			return s;
		}

		function traverse(obj, visitor, key) {
			if (!obj || typeof obj != "object") {
				return;
			}
			var nodes, n;
			helpers.object.forEachKey(obj, function(k, v) {
				nodes = Array.isArray(v) ? v : [v];
				for (var i = 0, len = nodes.length; i < len; i++) {
					n = nodes[i];
					if (visitor.visit(k, n)) {
						if (typeof n === "object") {
							traverse(n, visitor, k);
						}
						visitor.leave && visitor.leave(k, n);
					}
				}
				return;
			});
		}

		root = renderer.g(symbol.id).attr({
			id: symbol.id
		}).add();
		create(symbol);
		box = root.getBBox();
		box.cx = box.x + box.width / 2;
		box.cy = box.y + box.height / 2;
		return box;
	},


	destroy: function() {
		this.renderer && this.renderer.destroy();
	},
});

symbols = {
	"elt_processus_1": {
		"elmt1": {
			def: '<circle fill="#4D4F53" cx="124.75" cy="127.5" r="98"/>',
			size: {
				width: 24,
				height: 24
			}
		},
		"elmt2": {
			def: '<circle fill="#FFFFFF" cx="122.5" cy="125.5" r="92"/><path fill="#4D4F53" d="M124.25,226.5c-55.967,0-101.5-45.532-101.5-101.5c0-55.967,45.533-101.5,101.5-101.5c55.968,0,101.5,45.533,101.5,101.5C225.75,180.968,180.218,226.5,124.25,226.5z M124.25,37.033c-48.505,0-87.967,39.461-87.967,87.967c0,48.506,39.462,87.967,87.967,87.967c48.506,0,87.967-39.461,87.967-87.967C212.217,76.495,172.756,37.033,124.25,37.033z"/>',
			size: {
				width: 24,
				height: 24
			}
		},
		"elmt6": {
			def: '<path fill="#FF5800" d="M188.821,170.72l-24.261-24.276c-2.142-2.135-5.997-1.928-9.868,0.088l-10.6-10.584 c13.797-18.016,12.495-43.883-3.99-60.368c-17.953-17.942-47.053-17.942-64.999,0c-17.945,17.949-17.945,47.049,0,65.001 c16.486,16.479,42.365,17.779,60.374,3.991l10.583,10.583c-2.016,3.88-2.222,7.743-0.087,9.877l24.269,24.269 c3.062,3.063,9.726,1.381,14.834-3.762C190.21,180.423,191.899,173.783,188.821,170.72z M81.943,133.75 c-14.169-14.188-14.169-37.168,0-51.337c14.177-14.18,37.136-14.168,51.329,0c14.168,14.169,14.168,37.145,0,51.337 C119.079,147.92,96.112,147.92,81.943,133.75z"/><path opacity="0.2" fill="#FF5800" d="M69.44,107.173c0-20.888,16.93-37.826,37.827-37.826c20.88,0,37.826,16.938,37.826,37.826 c0,20.889-16.946,37.827-37.826,37.827C86.37,145,69.44,128.063,69.44,107.173z"/>',
			size: {
				width: 36,
				height: 36
			}
		},
		"elmt7": {
			def: '<rect x="100.159" y="50.094" fill="#FFC7AE" width="70.375" height="103.436"/><rect x="160.5" y="91.5" fill="#FFC7AE" width="23" height="23"/><rect x="171.481" y="89.417" fill="#FFC7AE" width="12.395" height="12.395"/><g>	<g>		<path fill="#FF5800" d="M173.545,89.417H96.227V59.349c0-7.106,5.78-12.887,12.886-12.887h51.545			c7.107,0,12.887,5.78,12.887,12.887V89.417z M104.817,80.826h60.138V59.349c0-2.368-1.927-4.295-4.297-4.295h-51.545			c-2.368,0-4.296,1.927-4.296,4.295V80.826z"/>	</g>	<g>		<path fill="#FF5800" d="M160.658,158.148h-51.545c-7.106,0-12.886-5.781-12.886-12.887v-42.956h77.318v42.956			C173.545,152.367,167.766,158.148,160.658,158.148z M104.817,110.897v34.365c0,2.369,1.928,4.295,4.296,4.295h51.545			c2.37,0,4.297-1.926,4.297-4.295v-34.365H104.817z"/>	</g>	<g>		<rect x="113.492" y="119.487" fill="#FF5800" width="42.954" height="8.592"/>	</g>	<g>		<rect x="113.492" y="132.374" fill="#FF5800" width="30.068" height="8.592"/>	</g>	<g>		<path fill="#FF5800" d="M177.925,80.826h-85.91c-7.115,0-12.887,5.772-12.887,12.886v25.775c0,7.114,5.772,12.887,12.887,12.887			h4.212v-21.477h77.318v21.477h4.38c7.114,0,12.887-5.772,12.887-12.887V93.712C190.812,86.598,185.039,80.826,177.925,80.826z			 M171.481,102.306c-3.557,0-6.442-2.889-6.442-6.446s2.886-6.443,6.442-6.443c3.558,0,6.443,2.886,6.443,6.443			S175.039,102.306,171.481,102.306z"/>	</g></g>',
			size: {
				width: 36,
				height: 36
			}
		}
	}
};