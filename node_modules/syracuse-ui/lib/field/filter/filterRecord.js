"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var _filterMaker = require('syracuse-ui/lib/field/filter/filterMaker');
var handlers = {
	onOperatorClick: function(cell, picker, event) {
		var record = cell.record;
		var options = {
			operator: cell.operator,
			list: record.list,
			event: event,
			type: "operatorclick",
			doEvent: function() {
				if (!cell.listPopup) {
					syra_site.dialogManager.closePopups();
					syra_site.dom.empty(cell.list);
					cell._ensureFilterField();
					var operators = _filterMaker.getFieldOperators(null, cell.field, cell.$filterField);
					for (var ii = 0, jj = operators.length; ii < jj; ii++) {
						var op = operators[ii];
						var btn = syra_menus.addTextButton(syra_local["flFilter_" + op], "s-filter-popup-btn", "onFilterCellClick");
						btn.syraOnSubClick = "onFilterItemClick";
						btn.syraOperator = op;
						if (cell.operator == op) {
							btn.className += " s-selected";
						}
						btn.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-" + op + ".png')";
						cell.list.appendChild(btn);
					}
					cell.listPopup = syra_site.dialogManager.openPopup(record.boxParent, {
						content: record,
						slot: cell.list,
						position: {
							my: "left top",
							at: "left bottom",
							of: $(cell.layoutSlot)
						},
						onClose: function() {
							cell.listPopup = null;
						}
					});
				} else {
					cell.listPopup.close();
				}
			}
		};
		record.page.externalAdapter.onFilterEvent(options);
	},
	onFilterItemClick: function(cell, picker, event) {
		cell.setOperator(picker.syraOperator);
		cell.listPopup.close();
		cell.record.page.externalAdapter.onFilterEvent({
			operator: cell.operator,
			list: cell.record.list,
			filter: cell,
			event: event,
			type: "operatorchange",
			doEvent: function() {
				var highField = cell.record.boundFields[cell.$bind + "$High"];
				if (cell.operator === "between") {
					if (highField) {
						highField[0]._dataValue.style.display = "";
					} else {
						_loadField(cell, cell.$field, cell.$bind + "$High");
					}
				} else {
					if (highField) {
						highField[0]._dataValue.style.display = "none";
					}
					var value = cell.record.dataset[cell.$bind];
					if (cell.operator != "none") {
						if (value != null && value != "") {
							if (cell.operator == "empty" || cell.operator == "notempty") {
								var field = cell.record.boundFields[cell.$bind][0];
								field.setDataValue(null);
								cell.record._buildFilter();
							} else {
								cell.record._buildFilter();
							}
						} else {
							if (cell.operator == "empty" || cell.operator == "notempty") {
								cell.record._buildFilter();
							}
						}
					} else {
						if (value != null && value != "") {
							var field = cell.record.boundFields[cell.$bind][0];
							field.setDataValue(null);
							field.notifyFieldChange(null);
						} else {
							cell.record._buildFilter();
						}
					}
				}
			}
		});
	}


};

function _onFilterCellClick(event, btn) {
	//this is field instance
	handlers[btn.syraOnSubClick](this.filterCell, btn, event);
}

function _loadField(cell, $field, $bind) {
	cell.field = cell.record.page.loadNewItem(cell.layoutSlot.appendChild(document.createElement("div")), {
		$bind: $bind || cell.$bind,
		$isTopLabelAlignment: false,
		$isCellChild: true,
		$isFilterMode: true,
		$isMenusHiddeen: true,
		$inplace: true,
		$field: $field
	}, cell.record);
	cell._operator = syra_menus.addIconButton(syra_local.flfilter_choiceOperator, "s-list-filter-cell-picker", "onFilterCellClick");
	cell._operator.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-none.png')";
	cell._operator.syraOnSubClick = "onOperatorClick";
	cell.field._dataValue.insertBefore(cell._operator, cell.field._dataValue.firstChild);
	cell.field.filterCell = cell;
	cell.field.onFilterCellClick = _onFilterCellClick;
	if (!cell.list) {
		cell.list = document.createElement("div");
		cell.list.className = "s-filter-popup";
		cell.list.style.display = "none";
		cell.list.syraItem = cell.field.id;
		cell.field._dataValue.appendChild(cell.list);
	}
}

function FilterCell(record, layoutSlot, col) {
	this.$field = col.$field;
	this.record = record;
	this.$filterCode = this.$bind = col.$item.$bind;
	this.operator = "none";
	this.layoutSlot = layoutSlot;
	_loadField(this, col.$field, this.$bind);
}

helpers.defineClass(FilterCell, null, {
	_ensureFilterField: function() {
		if (this.$field.$type == "application/x-reference") {
			this.$filterField = this.field.$field.$item[this.field.$reference.$value.$itemProp];
			if (this.$filterField) {
				this.$filterField = this.record.$prototype.$properties[this.field.$reference.$value.$prop];
				if (this.$filterField) {
					this.$filterCode = this.field.$reference.$value.$prop;
				}
			}
			if (!this.$filterField) {
				this.$filterField = this.field.$field.$item.$properties[this.field.$reference.$value.$prop];
				this.$filterCode = this.$bind + "." + this.field.$reference.$value.$prop;
			}
		}
	},
	setOperator: function(operator) {
		this._operator.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-" + (this.operator = operator) + ".png')";
	},
	getValue: function() {
		var field = this.record.boundFields[this.$bind][0];
		if (this.operator != "none") {
			this._ensureFilterField();
			return _filterMaker.getFieldValue({
				field: field,
				$bind: this.$bind,
				$type: this.$field.$type,
				operator: this.operator,
				$filterCode: this.$filterCode,
				$filterField: this.$filterField
			});
		}
	},
	ensureEqual: function() {
		// force operator to equals
		if (this.operator === "none" && this.$field) {
			var defaultFilter;
			switch (this.$field.$type) {
				case "application/x-date":
				case "application/x-time":
				case "application/x-datetime":
					defaultFilter = "ge";
					break;
				case "application/x-string":
					defaultFilter = "like";
					break;
				default:
					defaultFilter = "eq";
					break;
			}
			this.setOperator(defaultFilter);
		}
	},
	ensureDefault: function() {
		if (this.$field) {
			var defaultFilter, value = this.record.boundFields[this.$bind][0].getInputValue();
			switch (this.$field.$type) {
				case "application/x-string":
					defaultFilter = (value !== "" && this.operator === "none") ? "like_s" : (value === "" && this.operator !== "none") ? "none" : undefined;
					break;
				default:
					defaultFilter = (value !== "" && this.operator === "none") ? "ge" : (value === "" && this.operator !== "none") ? "none" : undefined;
					break;
			}
			if (defaultFilter)
				this.setOperator(defaultFilter);
		}
	},
	dispose: function() {
		if (this.field) {
			delete this.field.onFilterCellClick;
		};
		this.$filterField = this.record = this.field = this.layoutSlot = this._operator = this.list = this.$field = null;
	}
});



function _setWhere(record, where, cell) {
	var $filterBind = cell.field.$item.$bind;
	var $isRefField = false;
	// in case of reference field, appropriate $bind value is field.$reference.$value.$prop
	if (cell.field.$field.$type == 'application/x-reference') {
		$filterBind = cell.field.$reference.$value.$prop;
		$isRefField = true;
	}
	var exp = _filterMaker.parseWhere(where, $filterBind);
	if (exp && $filterBind == exp.children[0].value) {
		cell.setOperator(exp.value.text);
		var value = _filterMaker.unFormatValue(exp.value.text, exp.children[1].value);
		// update dataset and field data value
		if ($isRefField) {
			record.dataset[cell.field.$item.$bind] = {};
			record.dataset[cell.field.$item.$bind][$filterBind] = value;
		} else {
			record.dataset[cell.field.$item.$bind] = value;
		}
		cell.field.setDataValue(value);
	}
}

function FilterRecord() {}

exports.FilterRecord = helpers.defineClass(FilterRecord, Article, {
	loadRecord: function(list) {
		this.list = list;
		this.isRecordArticle = true;
		this.isFilterArticle = true;
		this.$facet = "$filter";
		this.$isEditMode = true;
		this.$prototype = list.$prototype.$item;
		this.$prototype.$localization = list.page.$prototype.$localization;
		list.page.initializeNewItem(this, {
			$layout: {
				$items: list.$item.$layout.$items
			}
		}, list);
		this.loadBox();
	},
	//set focus on first field
	setFocus: function() {
		for (var ii = 0, jj = this.list.orderCols.length; ii < jj; ii++) {
			var col = this.list.orderCols[ii];
			if (col.$bind) {
				var $field = this.list.$fields[col.$bind];
				if ($field && !$field.$isHidden && !$field.$isHidden && !$field.$isDisabled) {
					var cell = this.fieldCells[col.$bind];
					if (cell && cell.field) {
						cell.field.focus();
						break;
					}
				}
			}
		}
	},
	createCell: function() {
		var td = document.createElement("td");
		td.className = "s-list-filter-cell";
		return td;
	},
	appendCell: function(slot) {
		return (slot || this.dataRow).appendChild(this.createCell());
	},
	appendFlagCell: function(slot) {
		var td = this.appendCell(slot);
		td.className += " s-filter-popup-picker";
		td.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-flag.png')";
	},
	addFieldCell: function(col) {
		var cell = this.appendCell(this.dataRow);
		if (col.$isHidden) {
			cell.style.display = "none";
		}
		if (col.$field.$capabilities && (col.$field.$capabilities.indexOf("filter") >= 0)) {
			return this.fieldCells[col.$item.$bind] = new FilterCell(this, cell, col);
		}
	},
	loadFilter: function() {
		var params = this.page.openerUrlSegments && this.page.openerUrlSegments.params;
		if (params && params.where) {
			this.where = params.where;
			if (this.page.lookupField == this.list) {
				this.fixed_where = params.where;
			}
		}
		var columns = this.list.orderCols;
		for (var ii = 0, jj = columns.length; ii < jj; ii++) {
			var col = columns[ii];
			if (col && col.$field) {
				var cell = this.addFieldCell(col);
				if (cell && cell.field) {
					if (this.where) {
						this.where && _setWhere(this, this.where, cell);
						if (cell.operator != "none") {
							if (this.fixed_where) {
								cell.field.disable(true);
								syra_site.dom.disableItem(cell._operator, true);
							}
						}
					}
				}
			}
		}
		this.checkVisibility();
	},
	drawBox: function() {
		this.fieldCells = {};
		if (this.domItem) {
			syra_site.dom.removeChild(this.domItem);
		} else {
			this.domItem = this.dataRow = document.createElement("tr");
			this.list.headTable.appendChild(this.dataRow);
		}
	},
	checkVisibility: function() {
		var isVisible;
		var $binds = Object.keys(this.fieldCells);
		for (var ii = 0, jj = $binds.length; !isVisible && ii < jj; ii++) {
			var $bind = $binds[ii];
			if (!this.fieldCells[$bind].$field.$isHidden) {
				isVisible = true;
			}
		}
		this.domItem.style.display = isVisible ? "" : "none";
	},
	_buildFilter: function() {
		var values = [];
		var params = {};
		var $binds = Object.keys(this.fieldCells);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var field = this.fieldCells[$binds[ii]];
			if (!field.$isDisabled) {
				var value = field.getValue();
				if (value) {
					values.push(value);
				}
			}
		}
		params.filter = values.join(" and ");
		if (this.fixed_where) {
			params.filter = this.fixed_where + (params.filter ? (" and " + params.filter) : "");
		}
		this.list.fetcher.trigger(this.list, params);
	},
	onNotifyDataChange: function(field, value) {
		this.dataset[field.$item.$bind] = value;
		var filter = this.fieldCells[field.$item.$bind];
		if (value == null || value == "") {
			if (filter && filter.operator !== "none") {
				if (filter.operator == "between") {
					var fieldFirst = this.record.boundFields[filter.$bind][0];
					var fieldHigh = this.record.boundFields[filter.$bind + "$High"][0];
					if (fieldFirst.currentValue == fieldHigh.currentValue) {
						filter.setOperator("none");
					}
				} else {
					filter.setOperator("none");
				}
			}
		} else {
			if (filter) {
				//for high this.fieldCells[$bind] is not defined
				filter.ensureEqual();
			}
		}
		this._buildFilter();
		return false;
	},
	dispose: function() {
		if (this.fieldCells) {
			var $binds = Object.keys(this.fieldCells);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				this.fieldCells[$binds[ii]].dispose();
			}
		}
		this.fieldCells = this.list = this.dataRow = null;
		Article.prototype.dispose.call(this);
	}
});