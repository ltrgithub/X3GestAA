"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _popupItem, _popup;

function _formatValue(field, $type, value) {
	if (value) {
		switch ($type) {
			case "application/x-date":
			case "application/x-datetime":
			case "application/x-time":
				return value.toString(field.localFormat);
			case "application/x-boolean":
				return (value === "true") || (value === true) ? field.statusValues.on : field.statusValues.off;
			case "application/x-reference":
				// temporary fix for reference field in filter block widget - FK
				if (field.currentValue) {
					field.currentValue.$value = value;
					return field.currentValue;
				} else {
					return {
						$value: value
					};
				}
		}
	}
	return value;
}

function _onOperatorClick() {
	var field = this.parent;
	if (_popup && _popupItem && _popupItem.syraItem == field.id) {
		_popup.close();
	} else {
		if (!_popupItem) {
			_popupItem = document.createElement("div");
			_popupItem.className = "s-mn-popup-body";
		}

		syra_site.dom.empty(_popupItem);
		_popupItem.syraItem = field.id;
		var operators = syra_site.filterMaker.getFieldOperators(field.$item.$type);
		for (var ii = 0, jj = operators.length; ii < jj; ii++) {
			var op = operators[ii];
			var btn = syra_menus.button.add({
				parent: field,
				slot: _popupItem,
				text: syra_local["flFilter_" + op],
				css: "s-mn-link",
				fontIcon: "filter_" + op,
				btnclick: function() {
					this.parent.setOperator(this.operator);
					this.parent.filterBlock.onNotifyDataChange(this.parent.fieldLow);
					_popup.close();
				},
				operator: op
			});
			if (field.$filterOperator == op) {
				btn.link.className += " s-selected";
			}
		}
		_popup = syra_site.dialogManager.openPopup(field.filterBlock.articleParent, {
			content: field.filterBlock,
			slot: _popupItem,
			picker: field.layoutSlot,
			position: {
				my: "left top",
				at: "left bottom",
				of: $(field.layoutSlot)
			},
			onClose: function() {
				syra_site.dom.removeChild(_popupItem);
				_popup = _popupItem = null;
			}
		});
	}
}

function FilterField() {}

exports.FilterField = helpers.defineClass(FilterField, null, {
	createField: function($property, $item, filterBlock, index) {
		this.filterBlock = filterBlock;
		this.id = filterBlock.id + "-" + index;
		syra_store.add(this);
		this.$field = this.$item = $item;
		this.$bind = $property;
		this.$skin = filterBlock.$skin;

		this.layoutSlot = document.createElement("div");
		this.layoutSlot.className = this.$skin + "-field";
		this.layoutSlot.syraItem = this.id;
		this.filterBlock.filterBlockContainer.appendChild(this.layoutSlot);
		this.labelAndMenu = document.createElement("div");
		this.labelAndMenu.className = this.$skin + "-field-header";

		this.layoutSlot.appendChild(this.labelAndMenu);
		this.valuesSlot = document.createElement("div");
		this.valuesSlot.className = this.$skin + "-field-values";
		this.layoutSlot.appendChild(this.valuesSlot);


		this.label = document.createElement("label");
		this.label.className = this.$skin + "-field-title";
		this.label.textContent = syra_site.expressionMaker.parse(this.filterBlock, this.$item.$title);
		this.labelAndMenu.appendChild(this.label);

		this.addValueFields();

		this._operatorBtn = syra_menus.button.add({
			parent: this,
			slot: this.labelAndMenu,
			text: syra_local.flfilter_choiceOperator,
			css: this.$skin + "-field-menu",
			iconOnly: true,
			fontIcon: "filter_none",
			btnclick: _onOperatorClick
		});
	},
	addValueFields: function() {
		var operators = syra_site.filterMaker.getFieldOperators(this.$item.$type);
		this.fieldLow = this.addValueField(this.$bind + "$low");
		this.$$fieldLow = $(this.fieldLow);
		if (operators.indexOf("between") > -1) {
			this.fieldHigh = this.addValueField(this.$bind + "$high");
			this.$$fieldHigh = $(this.fieldHigh);
		}
		this.valuesSlot.className = this.$skin + "-field-values";
	},
	addValueField: function($bind) {
		var container = document.createElement("div");
		container.className = this.$skin + "-field";
		var field = this.filterBlock.articleParent.page.loadNewItem(this.valuesSlot.appendChild(container), {
			$bind: $bind,
			$isTopLabelAlignment: false,
			$isCellChild: true,
			$isMenusHidden: true,
			$isFilterMode: true,
			$inplace: true,
			$field: this.$item,
			$skin: "s-inplace"
		}, this.filterBlock);
		return field;
	},

	setOperator: function(operator) {
		syra_menus.button.setText(this._operatorBtn, "", "filter_" + (this.operator = operator));
		if (this.operator === "none") {
			if (this.fieldLow) {
				$(this.fieldLow._dataValue).toggle(false);
			}
			if (this.fieldHigh) {
				$(this.fieldHigh._dataValue).toggle(false);
			}
		} else
		if (this.operator === "between") {
			if (this.fieldLow) {
				$(this.fieldLow._dataValue).toggle(true);
			}
			if (this.fieldHigh) {
				$(this.fieldHigh._dataValue).toggle(true);
			}
		} else {
			if (this.fieldLow) {
				$(this.fieldLow._dataValue).toggle(true);
			}
			if (this.fieldHigh) {
				$(this.fieldHigh._dataValue).toggle(false);
			}
		}
	},
	_format: function(field, $type, value) {
		switch ($type) {
			case "application/x-reference":
				var value = field.getInputValue();
				return "'" + (value || "") + "'";
			case "application/x-choice":
				var fieldType = (field.$field && field.$field.$value && field.$field.$value.$type) || "application/x-string";
				return this._format(field, fieldType, value);
			case "application/x-boolean":
				return (value == field.statusValues.on) ? "true" : "false";
			case "application/x-integer":
			case "application/x-decimal":
				return value;
			case "application/x-date":
			case "application/x-datetime":
			case "application/x-time":
				return "@" + value + "@";
		}
		return "'" + value + "'";
	},

	_ensureFilterField: function(field) {
		var $filterCode;
		if (field.isReferenceField) {
			var $filterField = field.$field.$item[field.$reference.$value.$itemProp];
			if ($filterField) {
				$filterField = this.filterBlock.$prototype.$properties[field.$reference.$value.$prop];
				if ($filterField) {
					$filterCode = field.$reference.$value.$prop;
				}
			}
			if (!$filterField) {
				$filterField = field.$field.$item.$properties[field.$reference.$value.$prop];
				$filterCode = this.$bind + "." + field.$reference.$value.$prop;
			}
		}
		return $filterCode ? $filterCode : this.$bind;
	},
	getValue: function() {
		var self = this;
		var field = self.fieldLow;
		var value = self.getFieldValue(self.fieldLow);
		var highValue = self.getFieldValue(self.fieldHigh);
		var operator = self.operator;
		var $item = self.$item;
		var $filterCode = self._ensureFilterField(field); // temporary fix for reference field in filter block widget - FK
		if (operator != "none" && value != null) {
			var op = operator;
			var right;
			switch (op) {
				case "like":
					right = "'%" + ("" + value).replace(/'/g, "''") + "%'";
					break;
				case "like_s":
					right = "'" + ("" + value).replace(/'/g, "''") + "%'";
					op = "like";
					break;
				case "between":
					if (value && !highValue) {
						right = self._format(field, $item.$type, value);
						op = "ge";
					} else {
						if (!value && highValue) {
							right = self._format(field, $item.$type, highValue);
							op = "le";
						} else {
							if (value && highValue) {
								right = self._format(field, $item.$type, value) + " and " + self._format(field, $item.$type, highValue);
							} else {
								return "";
							}
						}
					}
					break;
				default:
					right = self._format(field, $item.$type, value);
					break;
			}
			return "(" + $filterCode + " " + op + " " + right + ")";
		}
	},
	getFieldValue: function(field) {
		var self = this;
		var value;

		if (!field)
			return null;

		if (field.$isEditMode === true) {
			switch (self.$item.$type) {
				case "application/x-date":
				case "application/x-datetime":
				case "application/x-time":
					value = field.getInputValue() === "" ? null : field.getInputValue();
					break;
				case "application/x-reference":
					// temporary fix for reference field in filter block widget - FK
					value = field.getInputValue();
					break;
				default:
					value = field.getDataValue();
					break;
			}
		} else {
			value = field._dataValue.textContent;
		}

		return value;
	},
	setFilterValues: function(operator, value, highValue) {
		var self = this;

		if (operator === "like") {
			if (value.length > 1 && value.charAt(value.length - 1) === "%" && value.charAt(0) !== "%") {
				operator = "like_s";
			}
			value = value.replace(/%/g, "");
		}

		if (operator === "like_s" && value.charAt(value.length - 1) === "%") {
			value = value.replace(/%/g, "");
		}

		self.setOperator(operator);
		switch (operator) {
			case "none":
				self.setFilterValue(self.fieldLow, null);
				self.setFilterValue(self.fieldHigh, null);
				break;
			case "between":
				self.setFilterValue(self.fieldLow, value);
				self.setFilterValue(self.fieldHigh, highValue);
				break;
			default:
				self.setFilterValue(self.fieldLow, value);
				self.setFilterValue(self.fieldHigh, null);
				break;
		}
	},
	setFilterValue: function(field, value) {
		if (field) {
			value = _formatValue(field, this.$item.$type, value);
			field.setDataValue(value);
		}
	},
	applyModifyState: function(mode) {
		return; // obsolete
		if (this.fieldLow) {
			this.fieldLow.toggleEditMode(mode);
		}
		if (this.fieldHigh) {
			this.fieldHigh.toggleEditMode(mode);
		}
		this._modifyState = mode;
	},
	dispose: function() {
		_popup && _popup.close();
		syra_store.remove(this);
		this.fieldHigh && this.fieldHigh.dispose();
		this.fieldLow && this.fieldLow.dispose();
		syra_site.disposeObject(this);
	}
});