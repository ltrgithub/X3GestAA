"use strict";

var helpers = require('syracuse-core/lib/helpers');

var log = null;//console.log;

var _localize = {
		"filter_none": "All",
		"filter_gt": "Greater than",
		"filter_ge": "Greater than or equals",
		"filter_lt": "Less than",
		"filter_le": "Less than or equals",
		"filter_eq": "Equals",
		"filter_ne": "Not equals",
		"filter_between": "Between",
		"filter_like": "Contains",
		"filter_like_s": "Starts with"
	};

function FilterField()
{
}

exports.FilterField = helpers.defineClass(FilterField, null, {
	createField: function($property, $item, filterBlock) {
		var self = this;
		self._localize = _localize;
		self.filterBlock = filterBlock;
		self.$item = $item;
		self._boundProperty = $property;
		
		self.container = document.createElement("div");
		self.container.className = "s-field-filter-field";
		self.$$container = $(self.container);
		
		self.filterBlock.filterBlockContainer.appendChild(self.container);
		self.labelAndMenu = document.createElement("div");
		self.labelAndMenu.className = "s-field-filter-header";
		self.container.appendChild(self.labelAndMenu);
		self.valuesSlot = document.createElement("div");
		self.container.appendChild(self.valuesSlot);
		self.$$valuesSlot= $(self.valuesSlot);
		
		self.addLabel();
		self.addValueFields();
		self.addMenu();
	},
	addValueFields: function() {
		var self = this;

		self.fieldLow = self.addValueField(self._boundProperty + "$low");
		self.$$fieldLow = $(self.fieldLow);
		//self.$$fieldLow[0].$$dataValue.toggle(false);
		
		self.fieldHigh = self.addValueField(self._boundProperty + "$high");
		self.$$fieldHigh = $(self.fieldHigh);
		//self.$$fieldHigh[0].$$dataValue.toggle(false);
	},
	addValueField: function($bind) {
		var self = this;
		var field = 
			self.filterBlock.articleParent.page.loadNewItem(
				self.$$valuesSlot, 
				{
					$bind: $bind,
					$isTopLabelAlignment: false,
					$isCellChild: true,
					$isFilterMode: true,
					$inplace: true,
					$field: self.$item
				},
				self.filterBlock);
		/*
		field._domItem.className   = field._domItem.className.replace("s-inplace", "s-field-filter-values");
		field._dataValue.className = field._dataValue.className.replace("s-inplace-value", "s-field-filter-value");
		field._input.className     = field._input.className.replace("s-inplace-input", "s-field-filter-input");
		if (field.boxPickers)
		{
			field.boxPickers.className     = field.boxPickers.className.replace("s-inplace-pickers", "s-field-filter-pickers");
		}
		*/
		return field;
	},
	addLabel: function() {
		var self = this;
		self.label = document.createElement("label");
		self.label.className = "s-field-filter-label";
		self.label.textContent = self.$item.$title;
		self.labelAndMenu.appendChild(self.label);
	},
	addMenu: function() {
		var self = this;
		
        self._operator = document.createElement("a");
        self._operator.className = "s-field-filter-sel";
        self._operator.style.backgroundImage = "url('" + document.site.$item.$iconPath + "filter/s-filter-none.png')";

        $(self.labelAndMenu.appendChild(self._operator)).bind("click", function(){
            if (!self.listPopup) {
                self.$$list.empty();
                var operators;
                switch (self.$item.$type) {
                    case "application/x-date":
                    case "application/x-time":
                    case "application/x-datetime":
                        operators = ["none", "gt", "ge", "lt", "le", "eq", "ne", "between"];
                        break;
                    case "application/x-string":
                        operators = ["none", "gt", "ge", "lt", "le", "eq", "ne", "like_s", "like", "between"];
                        break;
                    default:
                        operators = ["none", "eq", "ne"];
                        break;
                }
                operators.forEach(function(op){
                    var link = document.createElement("a");
                    link.className = "s-list-filter-item";
                    link.setAttribute("data-s-op", op)
                    link.style.backgroundImage = "url('" + document.site.$item.$iconPath + "filter/s-filter-" + op + ".png')";
                    $(link).appendTo(self.$$list).text(self._localize["filter_" + op]);
                });
                self.listPopup = self.filterBlock.articleParent.openDialog({
                    $dialogMode: "popup",
                    content: self.filterBlock,
                    $$dialog: self.$$list,
                    position: {
                        my: "left top",
                        at: "left bottom",
                        of: self.$$container
                    },
                    onClose: function(){
                        self.listPopup = null;
                    }
                });
            }
            else {
                self.listPopup.close();
            }
            return false;
        });
        if (!self.$$list) {
            var list = document.createElement("div");
            list.className = "s-list-filter-list";
            list.style.display = "none";
            self.$$list = $(self.labelAndMenu.appendChild(list)).delegate("a.s-list-filter-item", "click", function(){
                self.setOperator($(this).attr("data-s-op"));
                self.listPopup.close();
            });
        }
	},
    setOperator: function(operator) {
    	var self = this;
    	
        self._operator.style.backgroundImage = "url('" + document.site.$item.$iconPath + "filter/s-filter-" + (self.operator = operator) + ".png')";
        
        if (self.operator === "none") {
            if (self.fieldLow) {
            	self.fieldLow.$$dataValue.toggle(false);
            }
            if (self.fieldHigh) {
            	self.fieldHigh.$$dataValue.toggle(false);
            }
        }
        
        else if (self.operator === "between") {
            if (self.fieldLow) {
            	self.fieldLow.$$dataValue.toggle(true);
            }
            if (self.fieldHigh) {
            	self.fieldHigh.$$dataValue.toggle(true);
            }
        }
        else {
            if (self.fieldLow) {
            	self.fieldLow.$$dataValue.toggle(true);
            }
            if (self.fieldHigh) {
            	self.fieldHigh.$$dataValue.toggle(false);
            }
        }
    },
    setFilterValues: function(operator, value, highValue) {
    	var self = this;
    	
    	if (operator === "like") {
    		if (value.length > 1 && value.charAt(value.length - 1) === "%")
    			operator = "like_s";
    		value = value.replace("%", "", "g")
    	}
    	
    	self.setOperator(operator);
    	switch (operator) {
    	case "none":
    		self.setFilterValue(self.fieldLow, null);
    		self.setFilterValue(self.fieldHigh, null);
    		break;
    	case "between":
    		self.setFilterValue(self.fieldLow, value);
    		self.setFilterValue(self.fieldHigh, highValue);
    		break;
    	default:
    		self.setFilterValue(self.fieldLow, value);
    		self.setFilterValue(self.fieldHigh, null);
    		break;
    	}
    },
    setFilterValue: function(field, value) {  	
    	field.setDataValue(value);
    	//field.notifyFieldChange(value);
    }
});
