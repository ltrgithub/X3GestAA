"use strict";

var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

function FilterField()
{
}

exports.FilterField = helpers.defineClass(FilterField, null, {
	createField: function($property, $item, filterBlock) {
		var self = this;
		self._localize = locale.resources(module)();
		self.filterBlock = filterBlock;
		
		self.$item = $item;
		self.$bind = $property;
		self.$skin = filterBlock.$skin;

		self.container = document.createElement("div");
		self.container.className = self.$skin + "-field";
		self.$$container = $(self.container);
		
		self.filterBlock.filterBlockContainer.appendChild(self.container);
		self.labelAndMenu = document.createElement("div");
		self.labelAndMenu.className = self.$skin + "-field-header";
		
		self.container.appendChild(self.labelAndMenu);
		self.valuesSlot = document.createElement("div");
		self.valuesSlot.className = self.$skin + "-field-values";
		self.container.appendChild(self.valuesSlot);
		self.$$valuesSlot= $(self.valuesSlot);
		
		self.addLabel();
		self.addValueFields();
		self.addMenu();
	},
	addValueFields: function() {
		var self = this;

		self.fieldLow = self.addValueField(self.$bind + "$low");
		self.$$fieldLow = $(self.fieldLow);
		self.fieldHigh = self.addValueField(self.$bind + "$high");
		self.$$fieldHigh = $(self.fieldHigh);
		self.valuesSlot.className = self.$skin + "-field-values";
	},
	addValueField: function($bind) {
		var self = this;
		var field = 
			self.filterBlock.articleParent.page.loadNewItem(
				self.$$valuesSlot, 
				{
					$bind: $bind,
					$isTopLabelAlignment: false,
					$isCellChild: true,
					$isFilterMode: true,
					$inplace: true,
					$field: self.$item,
					$skin: "s-field" //self.$skin + "-field"
				},
				self.filterBlock);
		return field;
	},
	addLabel: function() {
		var self = this;
		self.label = document.createElement("label");
		self.label.className = self.$skin + "-field-title";
		self.label.textContent = self.$item.$title;
		self.labelAndMenu.appendChild(self.label);
	},
	addMenu: function() {
		var self = this;
		
        self._operator = document.createElement("a");
        self._operator.className = self.$skin + "-field-menu";
        
        self._operator.style.backgroundImage = "url('" + document.site.$item.$iconPath + "filter/s-filter-none.png')";

        $(self.labelAndMenu.appendChild(self._operator)).bind("click", function() {
        	if (!self._modifyState)
        		return;
        	
            if (!self.listPopup) {
                self.$$list.empty();
                var operators;
                switch (self.$item.$type) {
                    case "application/x-date":
                    case "application/x-time":
                    case "application/x-datetime":
                        operators = ["none", "gt", "ge", "lt", "le", "eq", "ne", "between"];
                        break;
                    case "application/x-string":
                        operators = ["none", "gt", "ge", "lt", "le", "eq", "ne", "like_s", "like", "between"];
                        break;
                    default:
                        operators = ["none", "eq", "ne"];
                        break;
                }
                operators.forEach(function(op){
                    var link = document.createElement("a");
                    link.className = self.$skin + "-field-list-item";
                    link.setAttribute("data-s-op", op)
                    link.style.backgroundImage = "url('" + document.site.$item.$iconPath + "filter/s-filter-" + op + ".png')";
                    $(link).appendTo(self.$$list).text(self._localize["filter_" + op]);
                });
                self.listPopup = self.filterBlock.articleParent.openDialog({
                    $dialogMode: "popup",
                    content: self.filterBlock,
                    $$dialog: self.$$list,
                    position: {
                        my: "left top",
                        at: "left bottom",
                        of: self.$$container
                    },
                    onClose: function(){
                        self.listPopup = null;
                    }
                });
            }
            else {
                self.listPopup.close();
            }
            return false;
        });
        if (!self.$$list) {
            var list = document.createElement("div");
            list.className = self.$skin + "-field-list";
            list.style.display = "none";
            self.$$list = $(self.labelAndMenu.appendChild(list)).delegate("a." + self.$skin + "-field-list-item", "click", function(){
                self.setOperator($(this).attr("data-s-op"));
                self.filterBlock.onNotifyDataChange(self.fieldLow);
                self.listPopup.close();
            });
        }
	},
    setOperator: function(operator) {
    	var self = this;
    	
        self._operator.style.backgroundImage = "url('" + document.site.$item.$iconPath + "filter/s-filter-" + (self.operator = operator) + ".png')";
        
        if (self.operator === "none") {
            if (self.fieldLow) {
            	self.fieldLow.$$dataValue.toggle(false);
            }
            if (self.fieldHigh) {
            	self.fieldHigh.$$dataValue.toggle(false);
            }
        }
        else if (self.operator === "between") {
            if (self.fieldLow) {
            	self.fieldLow.$$dataValue.toggle(true);
            }
            if (self.fieldHigh) {
            	self.fieldHigh.$$dataValue.toggle(true);
            }
        }
        else {
            if (self.fieldLow) {
            	self.fieldLow.$$dataValue.toggle(true);
            }
            if (self.fieldHigh) {
            	self.fieldHigh.$$dataValue.toggle(false);
            }
        }
    },
    getFilterValues: function() {
    	var self = this;
    	var values = {
    		operator: self.operator,
    		low: self.fieldLow.geDataValue(),
    		high: self.fieldLow.geDataValue()
    	};
    	
    	if (values.operator === "like_s" || values.operator === "like")
    	{
    		if (values.operator = "like")
    		{
    			if (values.low && values.low.length > 0 && values.low.charAt(0) !== "%") {
    				values.low = "%" + values.low;
    			}
    		}
    		values.operator = "like";
    		if (values.low && values.low.length > 0 && values.low.charAt(values.low.length - 1) !== "%") {
    			values.low += "%";
    		}
    	}
    	return values;
    },
    _format: function(field, $type, value) {
        switch ($type) {
            case "application/x-reference":
                var value = field._hasUiid ? field.currentValue.$uuid : field.currentValue.$value;
                return "'" + (value || "") + "'";
            case "application/x-choice":
                var fieldType = (field.$field && field.$field.$value && field.$field.$value.$type) || "application/x-string";
                return this._format(field, fieldType, value);
            case "application/x-boolean":
            case "application/x-integer":
            case "application/x-decimal":
                return value;
            case "application/x-date":
                return "@" + value + "@";
        }
        return "'" + value + "'";
    },
    _formatValue: function(field, $type, value) {
    	var self = this;
    	if (!value) {
    		return value;
    	}

        switch ($type) {    	
        	case "application/x-date":
        		return value.toString(field.localFormat);
        }
        return value;
    },
    getValue: function() {
    	var self = this;
    	var field = self.fieldLow;
    	var value = self.getFieldValue(self.fieldLow);
        var highValue = self.getFieldValue(self.fieldHigh);
    	var operator = self.operator;
    	var $item = self.$item;
    	
        if (operator != "none" && value != null) {
            var op = operator;
            var right;
            switch (op) {
                case "like":
                    right = "'%" + value + "%'";
                    break;
                case "like_s":
                    right = "'" + value + "%'";
                    op = "like";
                    break;
                case "between":
                    if (value && !highValue) {
                        right = self._format(field, $item.$type, value);
                        op = "ge";
                    }
                    else 
                    {
                        if (!value && highValue) {
                            right = self._format(field, $item.$type, highValue);
                            op = "le";
                        }
                        else 
                        {
                            if (value && highValue) {
                                right = self._format(field, $item.$type, value) + " and " + self._format(field, $item.$type, highValue);
                            }
                            else {
                                return "";
                            }
                        }
                    }
                    break;
                default:
                    right = self._format(field, $item.$type, value);
                    break;
            }
            return "(" + self.$bind + " " + op + " " + right + ")";
        }
    },
    getFieldValue: function(field) {
    	var self = this;
    	if (field.$isEditMode === true) {
        	if (self.$item.$type === "application/x-date") {
        		if (field._input.value === "") {
        			return null; 
        		}
        	}
    		return field.getDataValue();
    	}
    	return field.fieldValue.textContent;
    },
    setFilterValues: function(operator, value, highValue) {
    	var self = this;
    	
    	if (operator === "like") {
    		if (value.length > 1 && value.charAt(value.length - 1) === "%" && value.charAt(0) !== "%") {
    			operator = "like_s";
    		}
    		value = value.replace(/%/g, "")
    	}
    	self.setOperator(operator);
    	switch (operator) {
    	case "none":
    		self.setFilterValue(self.fieldLow, null);
    		self.setFilterValue(self.fieldHigh, null);
    		break;
    	case "between":
    		self.setFilterValue(self.fieldLow, value);
    		self.setFilterValue(self.fieldHigh, highValue);
    		break;
    	default:
    		self.setFilterValue(self.fieldLow, value);
    		self.setFilterValue(self.fieldHigh, null);
    		break;
    	}
    },
    setFilterValue: function(field, value) {
    	var self = this;
    	value = self._formatValue(field, self.$item.$type, value);
    	field.setDataValue(value);
    },
    applyModifyState: function(mode) {
    	var self = this;
    	if (self.fieldLow) {
    		self.fieldLow.toggleEditMode(mode);
    	}
    	if (self.fieldHigh) {
    		self.fieldHigh.toggleEditMode(mode);
    	}
    	self._modifyState = mode;
    },
    dispose: function(){
    	var self = this;
        if (self._operator) {
            $(self._operator).unbind();
        }
        if (self.$$list) {
        	self.$$list.undelegate();
        }
        delete self.filterBlock;
    },
});
