"use strict";

var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

function _getOperators($type) {
	switch ($type) {
		case "application/x-date":
		case "application/x-time":
		case "application/x-datetime":
		case "application/x-decimal":
		case "application/x-real":
		case "application/x-integer":
			return ["none", "gt", "ge", "lt", "le", "eq", "ne", "between"];
			break;
		case "application/x-string":
		case "application/x-reference":
			return ["none", "gt", "ge", "lt", "le", "eq", "ne", "like_s", "like", "between"];
			break;
		default:
			return ["none", "eq", "ne"];
			break;
	}
}

function FilterField() {}

exports.FilterField = helpers.defineClass(FilterField, null, {
	createField: function($property, $item, filterBlock) {
		this._localize = locale.resources(module)();
		this.filterBlock = filterBlock;

		this.$item = $item;
		this.$bind = $property;
		this.$skin = filterBlock.$skin;

		this.layoutSlot = document.createElement("div");
		this.layoutSlot.className = this.$skin + "-field";

		this.filterBlock.filterBlockContainer.appendChild(this.layoutSlot);
		this.labelAndMenu = document.createElement("div");
		this.labelAndMenu.className = this.$skin + "-field-header";

		this.layoutSlot.appendChild(this.labelAndMenu);
		this.valuesSlot = document.createElement("div");
		this.valuesSlot.className = this.$skin + "-field-values";
		this.layoutSlot.appendChild(this.valuesSlot);
		this.$$valuesSlot = $(this.valuesSlot);

		this.addLabel();
		this.addValueFields();
		this.addMenu();
	},
	addValueFields: function() {
		var self = this;
		var operators = _getOperators(self.$item.$type);
		self.fieldLow = self.addValueField(self.$bind + "$low");
		self.$$fieldLow = $(self.fieldLow);
		if (operators.indexOf("between") > -1) {
			self.fieldHigh = self.addValueField(self.$bind + "$high");
			self.$$fieldHigh = $(self.fieldHigh);
		}
		self.valuesSlot.className = self.$skin + "-field-values";
	},
	addValueField: function($bind) {
		var container = document.createElement("div");
		container.className = this.$skin + "-field";
		var field = this.filterBlock.articleParent.page.loadNewItem(this.valuesSlot.appendChild(container), {
			$bind: $bind,
			$isTopLabelAlignment: false,
			$isCellChild: true,
			$isMenusHidden: true,
			$isFilterMode: true,
			$inplace: true,
			$field: this.$item,
			$skin: "s-inplace"
		}, this.filterBlock);
		return field;
	},
	addLabel: function() {
		this.label = document.createElement("label");
		this.label.className = this.$skin + "-field-title";
		this.label.textContent = this.filterBlock.parseExpression(this.$item.$title);
		this.labelAndMenu.appendChild(this.label);
	},
	addMenu: function() {
		var self = this;

		self._operator = document.createElement("a");
		self._operator.className = self.$skin + "-field-menu";

		self._operator.style.backgroundImage = "url('" + document.site.$item.$iconPath + "list/s-filter-none.png')";

		$(self.labelAndMenu.appendChild(self._operator)).bind("click", function() {
			/*if (!self._modifyState)
             return;*/
			if (!self.listPopup) {
				self.$$list.empty();
				var operators = _getOperators(self.$item.$type);
				operators.forEach(function(op) {
					var link = document.createElement("a");
					link.className = self.$skin + "-field-list-item";
					link.setAttribute("data-s-op", op);
					link.style.backgroundImage = "url('" + document.site.$item.$iconPath + "list/s-filter-" + op + ".png')";
					link.textContent = self._localize["filter_" + op];
					self.$$list[0].appendChild(link);
				});
				self.listPopup = document.site.dialogManager.openPopup(self.filterBlock.articleParent, {
					content: self.filterBlock,
					slot: self.$$list[0],
					position: {
						my: "left top",
						at: "left bottom",
						of: $(self.layoutSlot)
					},
					onClose: function() {
						self.listPopup = null;
					}
				});
			} else {
				self.listPopup.close();
			}
			return false;
		});
		if (!self.$$list) {
			var list = document.createElement("div");
			list.className = self.$skin + "-field-list";
			list.style.display = "none";
			self.$$list = $(self.labelAndMenu.appendChild(list)).delegate("a." + self.$skin + "-field-list-item", "click", function() {
				self.setOperator($(this).attr("data-s-op"));
				self.filterBlock.onNotifyDataChange(self.fieldLow);
				self.listPopup.close();
			});
		}
	},
	setOperator: function(operator) {
		var self = this;

		self._operator.style.backgroundImage = "url('" + document.site.$item.$iconPath + "list/s-filter-" + (self.operator = operator) + ".png')";

		if (self.operator === "none") {
			if (self.fieldLow) {
				$(self.fieldLow._dataValue).toggle(false);
			}
			if (self.fieldHigh) {
				$(self.fieldHigh._dataValue).toggle(false);
			}
		} else
		if (self.operator === "between") {
			if (self.fieldLow) {
				$(self.fieldLow._dataValue).toggle(true);
			}
			if (self.fieldHigh) {
				$(self.fieldHigh._dataValue).toggle(true);
			}
		} else {
			if (self.fieldLow) {
				$(self.fieldLow._dataValue).toggle(true);
			}
			if (self.fieldHigh) {
				$(self.fieldHigh._dataValue).toggle(false);
			}
		}
	},
	_format: function(field, $type, value) {
		switch ($type) {
			case "application/x-reference":
				var value = field.getInputValue();
				return "'" + (value || "") + "'";
			case "application/x-choice":
				var fieldType = (field.$field && field.$field.$value && field.$field.$value.$type) || "application/x-string";
				return this._format(field, fieldType, value);
			case "application/x-boolean":
				return (value == field.statusValues.on) ? "true" : "false";
			case "application/x-integer":
			case "application/x-decimal":
				return value;
			case "application/x-date":
			case "application/x-datetime":
			case "application/x-time":
				return "@" + value + "@";
		}
		return "'" + value + "'";
	},
	_formatValue: function(field, $type, value) {
		var self = this;
		if (!value) {
			return value;
		}

		switch ($type) {
			case "application/x-date":
			case "application/x-datetime":
			case "application/x-time":
				return value.toString(field.localFormat);
			case "application/x-boolean":
				return (value === "true") || (value === true) ? field.statusValues.on : field.statusValues.off;
			case "application/x-reference":
				// temporary fix for reference field in filter block widget - FK
				if (field.currentValue) {
					field.currentValue.$value = value;
					return field.currentValue;
				} else {
					return {
						$value: value
					};
				}
		}
		return value;
	},
	_ensureFilterField: function(field) {
		var $filterCode;
		if (field.$field.$type == "application/x-reference") {
			var $filterField = field.$field.$item[field.$reference.$value.$itemProp];
			if ($filterField) {
				$filterField = this.filterBlock.$prototype.$properties[field.$reference.$value.$prop];
				if ($filterField) {
					$filterCode = field.$reference.$value.$prop;
				}
			}
			if (!$filterField) {
				$filterField = field.$field.$item.$properties[field.$reference.$value.$prop];
				$filterCode = this.$bind + "." + field.$reference.$value.$prop;
			}
		}
		return $filterCode ? $filterCode : this.$bind;
	},
	getValue: function() {
		var self = this;
		var field = self.fieldLow;
		var value = self.getFieldValue(self.fieldLow);
		var highValue = self.getFieldValue(self.fieldHigh);
		var operator = self.operator;
		var $item = self.$item;
		var $filterCode = self._ensureFilterField(field); // temporary fix for reference field in filter block widget - FK
		if (operator != "none" && value != null) {
			var op = operator;
			var right;
			switch (op) {
				case "like":
					right = "'%" + value + "%'";
					break;
				case "like_s":
					right = "'" + value + "%'";
					op = "like";
					break;
				case "between":
					if (value && !highValue) {
						right = self._format(field, $item.$type, value);
						op = "ge";
					} else {
						if (!value && highValue) {
							right = self._format(field, $item.$type, highValue);
							op = "le";
						} else {
							if (value && highValue) {
								right = self._format(field, $item.$type, value) + " and " + self._format(field, $item.$type, highValue);
							} else {
								return "";
							}
						}
					}
					break;
				default:
					right = self._format(field, $item.$type, value);
					break;
			}
			return "(" + $filterCode + " " + op + " " + right + ")";
		}
	},
	getFieldValue: function(field) {
		var self = this;
		var value;

		if (!field)
			return null;

		if (field.$isEditMode === true) {
			switch (self.$item.$type) {
				case "application/x-date":
				case "application/x-datetime":
				case "application/x-time":
					value = field.getInputValue() === "" ? null : field.getInputValue();
					break;
				case "application/x-reference":
					// temporary fix for reference field in filter block widget - FK
					value = field.getInputValue();
					break;
				default:
					value = field.getDataValue();
					break;
			}
		} else {
			value = field.fieldValue.textContent;
		}

		return value;
	},
	setFilterValues: function(operator, value, highValue) {
		var self = this;

		if (operator === "like") {
			if (value.length > 1 && value.charAt(value.length - 1) === "%" && value.charAt(0) !== "%") {
				operator = "like_s";
			}
			value = value.replace(/%/g, "");
		}

		if (operator === "like_s" && value.charAt(value.length - 1) === "%") {
			value = value.replace(/%/g, "");
		}

		self.setOperator(operator);
		switch (operator) {
			case "none":
				self.setFilterValue(self.fieldLow, null);
				self.setFilterValue(self.fieldHigh, null);
				break;
			case "between":
				self.setFilterValue(self.fieldLow, value);
				self.setFilterValue(self.fieldHigh, highValue);
				break;
			default:
				self.setFilterValue(self.fieldLow, value);
				self.setFilterValue(self.fieldHigh, null);
				break;
		}
	},
	setFilterValue: function(field, value) {
		if (field) {
			value = this._formatValue(field, this.$item.$type, value);
			field.setDataValue(value);
		}
	},
	applyModifyState: function(mode) {
		return; // obsolete
		if (this.fieldLow) {
			this.fieldLow.toggleEditMode(mode);
		}
		if (this.fieldHigh) {
			this.fieldHigh.toggleEditMode(mode);
		}
		this._modifyState = mode;
	},
	dispose: function() {
		if (this._operator) {
			$(this._operator).unbind();
		}
		if (this.$$list) {
			this.$$list.undelegate();
		}
		if (this.fieldHigh) {
			this.fieldHigh.dispose();
		}
		if (this.fieldLow) {
			this.fieldLow.dispose();
		}
		this.layoutSlot = this.label = this.labelAndMenu = this.valuesSlot = this.$$valuesSlot = null;
		this.fieldHigh = this.fieldLow = this.$$fieldHigh = this.$$fieldLow = null;
		this.$item = this._localize = this._operator = this.filterBlock = this.$$list = null;
	},
});