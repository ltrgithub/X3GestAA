"use strict";
var Article = require("syracuse-ui/lib/article/article").Article;

var Field = require('syracuse-ui/lib/field/field').Field;

var locale = require('syracuse-core/lib/locale');
var helpers = require('syracuse-core/lib/helpers');

var FilterBuilder = require("./filterBuilder").FilterBuilder;
var log = console.log;

function FilterWidget(){
}

exports.FilterWidget = helpers.defineClass(FilterWidget, Field, {
	loadBox: function($$item){
		var self = this;
		if (log) log("loadBox");
		return Field.prototype.loadBox.call(self, $$item);
	},
    applyMetaData: function(metaData, options){
    	var self = this;
    	if (log) log("applyMetaData: " + JSON.stringify(metaData));
    	if (metaData && metaData.$filter) {
    		return self.applyFilterMetaData(metaData, options);
    	}
    	return Field.prototype.applyMetaData.call(self, metaData, options);
    },
    applyFilterMetaData: function(metaData, options) {
    	var self = this;
    	if (log) log("applyFilterMetaData");
    	var $filter = metaData && metaData.$filter;
    	if (!$filter)
    		return;
    	if (log) log("applyFilterMetaData: " + JSON.stringify($filter));
    },
    render: function() {
    	var self = this;
    	if (log) log("render");
    	Field.prototype.render.call(self);
    },
    setDataBind: function(value, record, metaData) {
    	var self = this;
    	if (log) log("setDataBind");
    	return Field.prototype.setDataBind.call(self, value, record, metaData);
    },
    setDataValue: function(value, record) {
    	var self = this;
    	if (log) log("setDataValue");
    	return Field.prototype.setDataValue.call(self, value, record);
    },
    getDataValue: function() {
    	var self = this;
    	if (log) log("getDataValue");
    	return Field.prototype.getDataValue.call(self);
    },
    
	
/*	
	loadBox: function(initData) {
		this.$defaultSkin = "s-grid"
        this.articleParent = this.boxParent.getArticle();
        this.page = this.articleParent.getPage();

		Article.prototype.loadBox.call(this, initData);
	},
    drawBox: function(){
    	
        this.arrayLevel = "array";
        this._localize = locale.resources(module)();
        
        this.$layoutOptions = document.site.$item.$layoutOptions.list;
        this._initFieldProperties();

        this.$item.$layout = this.$item.$layout || {};
        if (!this.$item.$layout.$items) {
            this.$item.$layout.$items = Object.keys(this.$fieldProperties).map(function($bind){
                return {
                    $bind: $bind
                };
            });
        }

        this.createFilterBuilder();
        
        this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
            this.inputId = this.id + "-input";
        }
        Field.prototype._initCss.call(this);
        
        this._domItem = document.createElement("div");
        this._domItem.className = this._$cssTopField;
        this.$$item = $(this.$$container[0].appendChild(this._domItem));
        
        this.appendTitle();
        this._createValueContainer();
        
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setState(this.$field);
        this.setEditMode(this.$field);
        
        this.fieldValue.className += " s-list";
        
        this._topbar = document.createElement("div");
        this._topbar.className = "s-list-topbar";
        this.fieldValue.appendChild(this._topbar);
        
        this._core = document.createElement("div");
        this._core.className = "s-list-core";
        this.fieldValue.appendChild(this._core);
        
        this.filterBuilder.drawBuilder();
        /*
        if (this.$item.$isQuickDesignerEnabled !== false) {
            this.quickDesigner = new authoringOpener.QuickDesigner();
            this.quickDesigner.appendOpener(this)
        }
        this._contextMenusSlot = document.createElement("div");
        this._contextMenusSlot.className = "s-list-menus-cell";
        if (this.$item.$isContextMenuHidden) {
            this._contextMenusSlot.style.display = "none";
        }
        this._topbar.appendChild(this._contextMenusSlot);
        this.builder.drawBuilder();

    },
    createFilterBuilder: function() {
    	this.filterBuilder = new FilterBuilder();
    	this.filterBuilder.load(this);
    },
    setHelp: function($help){
        Field.prototype.setHelp.call(this, $help);
    },
    setDescription: function($description){
        Field.prototype.setDescription.call(this, $description);
    },
    hideTitle: function($isTitleHidden){
        Field.prototype.hideTitle.call(this, $isTitleHidden);
    },
    getDefaultTitle: function(){
        return this._localize.l_defaultTitle;
    },
    getTitle: function(){
        return Field.prototype.getTitle.call(this);
    },
    setTitle: function($title){
        Field.prototype.setTitle.call(this, $title);
        if (this.domTitle) {
            this.domTitle.style.display = this.titleText.length == 0 ? "none" : "";
        }
    },
    appendTitle: function(){
        if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
            Field.prototype.appendTitle.call(this);
            this.domTitle.style.display = "none";
        }
    },
    setEditMode: function(state){
        if (state.$editMode !== undefined && this.$editMode != state.$editMode) {
            if (this.$editMode == "cell") {
                this._bindEditFieldEvents(false);
            }
            if ((this.$editMode = state.$editMode) == "cell") {
                this._bindEditFieldEvents(true);
            }
        }
    },
    applyMetaData: function(metaData, options){
    	// TODO
    },
    setDataBind: function(value, record, metaData){
        if (this.page.externalAdapter.setDataBind(this, value, record, metaData)) {
            if (value !== undefined) {
                this.setDataValue(value, record);
            }
            this.applyMetaData(metaData);
        }
    },
	setDataValue: function(value, record) {
		Field.prototype.setDataValue.call(this, value, record);
	},
	_initFieldProperties: function () {
        this.$fieldProperties = this._hardcodedProperties();
	},
    _createValueContainer: function(){
        this.domValueSlot = document.createElement("article");
        this.domValueSlot.className = this._$cssField + "-value";
        this._dataValue = this._core = this.fieldValue = this.domValueSlot;
        this.$$dataValue = $(this.domValueSlot);
        this._domItem.appendChild(this.domValueSlot);
    },
    getLocalizedTitle: function($title){
        if ($title && $title.length > 0 && $title[1] == "@") {
            return this.boxParent._renderExpression($title);
        }
        return $title;
    },
	_hardcodedProperties: function() {
        var $properties = {
            "description":{
               "$title":"Description",
               "$type":"application/x-string",
               "$isMandatory":true,
               "$capabilities":"sort,filter,alphaTab",
               "$links":{
                  "$details":{
                     "$type":"application/json;vnd.sage=syracuse",
                     "$url":"{$baseUrl}/{$pluralType}('{$key}')?representation={$representation}.$details&role={$role}"
                  }
               }
            },
            "documentType":{
               "$title":"Document type",
               "$type":"application/x-string",
               "$isDisabled":true,
               "$capabilities":"sort,filter,alphaTab"
            },
            "documentDate":{
               "$title":"Upload date",
               "$type":"application/x-date",
               "$isDisabled":true,
               "$capabilities":"sort,filter"
            },
            "fileName":{
               "$title":"Filename",
               "$type":"application/x-string",
               "$isDisabled":true,
               "$capabilities":"sort,filter,alphaTab"
            },
            "uri":{
               "$title":"Uri",
               "$type":"application/x-string",
               "$capabilities":"sort,filter,alphaTab"
            },
            "isReadOnly":{
               "$title":"Read only",
               "$type":"application/x-boolean",
               "$capabilities":"sort,filter"
            },
            "content":{
               "$title":"Content",
               "$type":"application/x-binary",
               "$url":"{$baseUrl}/{$pluralType}('{$key}')/content",
               "$capabilities":"sort,filter"
            },
            "volume":{
               "$title":"Storage volume",
               "$isMandatory":true,
               "$capabilities":"sort,filter",
               "$type":"application/x-reference",
               "$url":"{$baseUrl}/{$pluralType}('{$key}')?representation={$representation}.$thumb",
               "$value":"{description}",
               "$description":"Storage volume",
               "$key":"{$uuid}",
               "$properties":{
                  "description":{
                     "$type":"application/x-string"
                  }
               },
               "$prototype":"{$baseUrl}/$prototypes('{$representation}.$thumb')",
               "$representation":"storageVolume",
               "$links":{
                  "$details":{
                     "$type":"application/json;vnd.sage=syracuse",
                     "$url":"{$baseUrl}/storageVolumes('{$key}')?representation=storageVolume.$details&role={$role}"
                  },
                  "$lookup":{
                     "$type":"application/json;vnd.sage=syracuse",
                     "$title":"Add",
                     "$url":"{$baseUrl}/storageVolumes?representation=storageVolume.$lookup&role={$role}&trackingId={$trackingId}&binding=volume"
                  }
               }
            },
            "owner":{
               "$title":"Owner",
               "$isMandatory":true,
               "$capabilities":"sort,filter",
               "$type":"application/x-reference",
               "$url":"{$baseUrl}/{$pluralType}('{$key}')?representation={$representation}.$thumb",
               "$value":"{firstName} {lastName}",
               "$description":"{firstName} {lastName} user profile",
               "$key":"{$uuid}",
               "$properties":{
                  "firstName":{
                     "$type":"application/x-string"
                  },
                  "lastName":{
                     "$type":"application/x-string"
                  }
               },
               "$prototype":"{$baseUrl}/$prototypes('{$representation}.$thumb')",
               "$representation":"user",
               "$links":{
                  "$details":{
                     "$type":"application/json;vnd.sage=syracuse",
                     "$url":"{$baseUrl}/users('{$key}')?representation=user.$details&role={$role}"
                  },
                  "$lookup":{
                     "$type":"application/json;vnd.sage=syracuse",
                     "$title":"Add",
                     "$url":"{$baseUrl}/users?representation=user.$lookup&role={$role}&trackingId={$trackingId}&binding=owner"
                  }
               }
            },
            "$creUser":{
               "$title":"Created by",
               "$type":"application/x-string",
               "$isDisabled":true,
               "$isHidden":true,
               "$capabilities":"sort,filter"
            },
            "$updUser":{
               "$title":"Updated by",
               "$type":"application/x-string",
               "$isDisabled":true,
               "$isHidden":true,
               "$capabilities":"sort,filter"
            },
            "$creDate":{
               "$title":"Created on",
               "$type":"application/x-datetime",
               "$isDisabled":true,
               "$isHidden":true,
               "$capabilities":"sort,filter"
            },
            "$updDate":{
               "$title":"Updated on",
               "$type":"application/x-datetime",
               "$isDisabled":true,
               "$isHidden":true,
               "$capabilities":"sort,filter"
            }
         };
        return $properties;
	}
*/    
});
