"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
var FilterBlock = require("./filterBlock").FilterBlock;

function _applyStateMetaData(field, metaData, options) {
	if (field.filterBlock && metaData) {
		metaData = {};
		metaData.$isReadOnly = field.$isReadOnly;
		metaData.$isEditMode = field.$isEditMode;
		metaData.$isDisabled = field.$isDisabled;
		field.filterBlock.applyStateMetaData(metaData, options);
	}
}

function _applyItemMetaData(field, metaData, options) {
	var $item = metaData && metaData.$item;
	if (!(field.$item.$inplace) && field.$isEditMode) {
		field.filterBlock = new FilterBlock();
		field.filterBlock.buildFilterBlock(field, field._filterBlockContainer, $item);
		field.filterBlock.setSDataWhere(field.sdataWhere);
	}
}

function FilterWidget() {}


exports.FilterWidget = helpers.defineClass(FilterWidget, Field, {
	loadBox: function() {
		syra_menus.menus.initialize(this);
		syra_fields.ensureEditMode(this);

		this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
		this.domItem = this.layoutSlot;
		if (!this.$item.$inplace) {
			this.domItem = this.layoutSlot.appendChild(document.createElement("div"));
		}

		// Align label at top if edit mode
		if (this.$isEditMode) {
			this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field-filter");
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
		}

		syra_fields.initCss(this);

		this.domItem.className += " " + this._$cssField;

		syra_fields.addTitle(this);
		this._dataValue = document.createElement("div");
		this._dataValue.className = this._$cssField + "-value";
		this.domItem.appendChild(this._dataValue);
		if (!this.$item.$inplace) {
			this._filterBlockContainer = document.createElement("div");
			this._filterBlockContainer.className = this._$cssField + "-fields";
			this.domItem.appendChild(this._filterBlockContainer);
		}
		this.isField = true;
		this.domItem.syrainout = this.domItem.syraItem = this.id;
		this.domItem.syra_field_bind = this.$item.$bind || "";
		syra_fields.advancedState.setState(this);
		this.setTitle(this.$item.$title || this.$field.$title);
		this.articleParent.bind(this, this.$item.$bind);
		this.ensureLayoutMode();
	},
	applyMetaData: function(metaData, options) {
		var self = this;
		syra_fields.applyMetaData(self, metaData, options);
		if (metaData) {
			if (metaData.$isReadOnly !== undefined) {
				self.$isReadOnly = metaData.$isReadOnly;
			}
			if (metaData.$isEditMode !== undefined) {
				self.$isEditMode = metaData.$isEditMode;
			}
			if (metaData.$isDisabled !== undefined) {
				self.$isDisabled = metaData.$isDisabled;
			}

			if (metaData.$item) {
				_applyItemMetaData(self, metaData, options);
			}
			if (metaData.$item || metaData.$isEditMode || metaData.$isDisabled || metaData.$isReadOnly) {
				_applyStateMetaData(self, metaData, options);
			}
			//
			if (self.$isEditMode) {
				var p_url = syra_expression.parse(self.articleParent, (metaData.$links && metaData.$links.$prototype && metaData.$links.$prototype.$url) || (self.$field.$links && self.$field.$links.$prototype && self.$field.$links.$prototype.$url));
				if ((!self._prototypeUrl && p_url) || (self._prototypeUrl && (self._prototypeUrl != p_url))) {
					self._prototypeUrl = p_url;
					syra_controller.callServer(self.articleParent, {
						$location: {
							$url: p_url
						}
					}, function(data, response, requestUrl) {
						var proto = {
							$item: data
						};
						var dps = ((data.$properties && data.$properties.$resources && data.$properties.$resources.$item) || data).$properties;
						proto.$item.$properties = dps ? helpers.object.clone(dps, true) : {};
						_applyItemMetaData(self, proto, options);
						// apply state after filterBlock creation
						_applyStateMetaData(self, metaData, options);
					});
				}
			}
		}
	},
	render: function() {

	},
	setDataValue: function(value) {
		this.sdataWhere = value;
		if (this._dataValue) {
			this._dataValue.textContent = value;
		}
		if (this.filterBlock) {
			this.filterBlock.setSDataWhere(value);
		}
	},
	/* called by filterBlock on filter modification */
	setSDataWhere: function(sdataWhere) {
		// normalize sdataWhere
		sdataWhere = sdataWhere.replace(/\"/g, "'");
		if (this.$isEditMode) {
			if (this._dataValue) {
				syra_dom.empty(this._dataValue);
				this._dataValue.textContent = sdataWhere;
			}
			if (sdataWhere !== undefined && (this.sdataWhere !== sdataWhere)) {
				syra_workingCopy.notifyFieldChange(this, sdataWhere);
			}
			this.sdataWhere = sdataWhere;
		}
	},
	dispose: function() {
		this.filterBlock && this.filterBlock.dispose();
		Field.prototype.dispose.call(this);
	}
});