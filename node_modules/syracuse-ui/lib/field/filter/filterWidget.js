"use strict";

var helpers = require('syracuse-core/lib/helpers');

var Field = require('syracuse-ui/lib/field/field').Field;

var locale = require('syracuse-core/lib/locale');

var FilterBlock = require("./filterBlock").FilterBlock;

function FilterWidget() {
}


// this.$$item[0] = jQuery object for topmost DOM element of this widget
// this._domItem  = topmost DOM element of this widget
// 
exports.FilterWidget = helpers.defineClass(FilterWidget, Field, {
	loadBox: function($$item){
		var self = this;

		self.articleParent = self.boxParent.getArticle();
		self.ensureEditMode();
		
		self.$skinField = self.$skin = self.$item.$skin || (self.$item.$inplace ? "s-inplace" : "s-field-filter");
		
		self.$$item = $$item || self.$$container;
		self.$$item = $$item || $(document.createElement("div")).appendTo(self.$$item);

		// Align label at top if edit mode
        if (self.$isEditMode) {
        	self.$skinInput = this.$skin + "-input";
            if (self.$item.$isTopLabelAlignment == null) {
            	self.$item.$isTopLabelAlignment = true;
            }
        }

        self._initCss();
        
        (self._domItem = self.$$item[0]).className += " " + self._$cssTopField;
        
        self._appendTitle();
		self._createValueContainer();
		self._domItem.setAttribute("data-s-field", this.id);
		self._domItem.setAttribute("data-s-field-item", this.$item.$bind || "");

		self.setTitle(self.getTitle());
		self.articleParent.bind(self, self.$item.$bind);
	},
	
    applyMetaData: function(metaData, options){
    	var self = this;
    	Field.prototype.applyMetaData.call(self, metaData, options);
    	
    	if (metaData)
    	{
	        if (metaData.$isReadOnly !== undefined) {
	        	this.$isReadOnly = metaData.$isReadOnly;
	        }
	        if (metaData.$isEditMode !== undefined) {
	        	this.$isEditMode = metaData.$isEditMode;
	        }
	        if (metaData.$isDisabled !== undefined) {
	        	this.$isDisabled = metaData.$isDisabled;
	        }

    		if (metaData.$item) {
    			self._applyItemMetaData(metaData, options);
    		}
    		if (metaData.$item || metaData.$isEditMode || metaData.$isDisabled || metaData.$isReadOnly) {
    			self._applyStateMetaData(metaData, options);
    		}
    	}
    },
    render: function() {
    	var self = this;
    	//Field.prototype.render.call(self);
    },
    setDataBind: function(value, record, metaData) {
    	var self = this;
    	return Field.prototype.setDataBind.call(self, value, record, metaData);
    },
    setDataValue: function(value, record) {
    	var self = this;
    	self.sdataWhere = value;
    	
    	if (self.fieldValue) {
    		document.site.emptyDom(this.fieldValue);
    		self.fieldValue.textContent = value;
    	}
    	if (self.filterBlock) {
    		self.filterBlock.setSDataWhere(value);
    	}
    },
    getDataValue: function() {
    	var self = this;
    	return Field.prototype.getDataValue.call(self);
    },
    toggleEditMode: function($isEditMode){
    	var self = this;
    	Field.prototype.toggleEditMode.call(self);
    },
    _initCss: function(){
    	var self = this;
    	self._$cssTopField = self._$cssField = (self.$item.$css) ? (self.$item.$css + " " + self.$skinField) : self.$skinField;
        if (self.$item.$isTopLabelAlignment) {
        	self._$cssTopField += "-top";
        }
    },
    _createValueContainer: function() {
    	var self = this;
        
    	self.domValueSlot = document.createElement("div");
    	self.domValueSlot.className = self._$cssField + "-value";
    	self.$$dataValue = $(self._dataValue = self.domValueSlot);

    	self._dataValue.appendChild(self.fieldValue = document.createElement("div"));
    	self._domItem.appendChild(this.domValueSlot);

    	// in table
        if (self.$item.$inplace) {
            return;
        }
        
        self._filterBlockContainer = document.createElement("div");
        self._filterBlockContainer.className = self._$cssField + "-fields";
        self._domItem.appendChild(self._filterBlockContainer);
        self.$$filterBlockContainer = $(self._filterBlockContainer);
    },
    _appendTitle: function(){
    	var self = this;
        if (!(self.$item.$inplace || self.$item.$isTitleHidden)) {
        	self.domTitle = document.createElement("label");
            self.domTitle.className = self._$cssTopField + "-title";
            self._domItem.appendChild(self.domTitle);
        }
    },
    _applyItemMetaData: function(metaData, options) {
    	var self = this;
    	var $item = metaData && metaData.$item;
    	if (!(self.$item.$inplace)) {
    		self.filterBlock = new FilterBlock();
    		self.filterBlock.buildFilterBlock(self, self._filterBlockContainer, $item);
    		self.filterBlock.setSDataWhere(self.sdataWhere);
    	}
    },
    _applyStateMetaData: function(metaData, options) {
    	var self = this;
    	
    	if (self.filterBlock && metaData)
    	{
    		metaData = {};
    		metaData.$isReadOnly = this.$isReadOnly;
    		metaData.$isEditMode = this.$isEditMode;
    		metaData.$isDisabled = this.$isDisabled;
    		self.filterBlock.applyStateMetaData(metaData, options);
    	}
    }
});
