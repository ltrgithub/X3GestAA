"use strict";

var helpers = require('syracuse-core/lib/helpers');

var Field = require('syracuse-ui/lib/field/field').Field;

var locale = require('syracuse-core/lib/locale');

var FilterBlock = require("./filterBlock").FilterBlock;

function FilterWidget() {}


exports.FilterWidget = helpers.defineClass(FilterWidget, Field, {
	loadBox: function() {
		this.articleParent = this.boxParent.getArticle();
		this.ensureEditMode();

		this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
		this.domItem = this.layoutSlot.appendChild(document.createElement("div"));

		// Align label at top if edit mode
		if (this.$isEditMode) {
			this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field-filter");
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
		}

		this._initCss();

		this.domItem.className += " " + this._$cssTopField;

		this._appendTitle();
		this._createValueContainer();
		this.setFieldId(this.domItem);
		this.domItem.syrainout = this;
		this.domItem.setAttribute("data-s-inout", this);
		this.domItem.syraFieldBind = this.$item.$bind || "";

		this.setTitle(this.$item.$title || this.$field.$title);
		this.articleParent.bind(this, this.$item.$bind);
	},
	applyMetaData: function(metaData, options) {
		var self = this;
		Field.prototype.applyMetaData.call(self, metaData, options);
		if (metaData) {
			if (metaData.$isReadOnly !== undefined) {
				this.$isReadOnly = metaData.$isReadOnly;
			}
			if (metaData.$isEditMode !== undefined) {
				this.$isEditMode = metaData.$isEditMode;
			}
			if (metaData.$isDisabled !== undefined) {
				this.$isDisabled = metaData.$isDisabled;
			}

			if (metaData.$item) {
				self._applyItemMetaData(metaData, options);
			}
			if (metaData.$item || metaData.$isEditMode || metaData.$isDisabled || metaData.$isReadOnly) {
				self._applyStateMetaData(metaData, options);
			}
			//
			if (self.$isEditMode) {
				var p_url = document.site.expressionMaker.parse(self.articleParent, (metaData.$links && metaData.$links.$prototype && metaData.$links.$prototype.$url) || (self.$field.$links && self.$field.$links.$prototype && self.$field.$links.$prototype.$url));
				if ((!self._prototypeUrl && p_url) || (self._prototypeUrl && (self._prototypeUrl != p_url))) {
					self._prototypeUrl = p_url;
					document.controller.sendRequest(self.articleParent, {
						$location: {
							$url: p_url
						}
					}, function(data, response, requestUrl) {
						var proto = {
							$item: data
						};
						var dps = ((data.$properties && data.$properties.$resources && data.$properties.$resources.$item) || data).$properties;
						var pp = proto.$item.$properties = {};
						Object.keys(dps || {}).forEach(function(p) {
							var dp = dps[p];
							if ((dp.$capabilities || "").indexOf("filter") >= 0) {
								pp[p] = dp;
							}
						});
						self._applyItemMetaData(proto, options);
						// apply state after filterBlock creation
						self._applyStateMetaData(metaData, options);
					});
				}
			}
		}
	},
	render: function() {
		var self = this;
	},
	setDataValue: function(value) {
		var self = this;
		self.sdataWhere = value;

		if (self.fieldValue) {
			document.site.dom.empty(this.fieldValue);
			self.fieldValue.textContent = value;
		}
		if (self.filterBlock) {
			self.filterBlock.setSDataWhere(value);
		}
	},
	/* called by filterBlock on filter modification */
	setSDataWhere: function(sdataWhere) {
		var self = this;

		// normalize sdataWhere
		sdataWhere = sdataWhere.replace(/\"/g, "'");

		if (self.$isEditMode) {
			if (self.fieldValue) {
				document.site.dom.empty(this.fieldValue);
				self.fieldValue.textContent = sdataWhere;
			}
			if (sdataWhere !== undefined && (self.sdataWhere !== sdataWhere)) {
				self.notifyFieldChange(sdataWhere);
			}
			self.sdataWhere = sdataWhere;
		}
	},
	_initCss: function() {
		var self = this;
		self._$cssTopField = self._$cssField = (self.$item.$css) ? (self.$item.$css + " " + self.$skinField) : self.$skinField;
		if (self.$item.$isTopLabelAlignment) {
			self._$cssTopField += "-top";
		}
	},
	_createValueContainer: function() {
		var self = this;

		self.domValueSlot = document.createElement("div");
		self.domValueSlot.className = self._$cssField + "-value";
		self._dataValue = self.domValueSlot;

		self._dataValue.appendChild(self.fieldValue = document.createElement("div"));
		self.domItem.appendChild(this.domValueSlot);

		// in table
		if (self.$item.$inplace) {
			return;
		}

		self._filterBlockContainer = document.createElement("div");
		self._filterBlockContainer.className = self._$cssField + "-fields";
		self.domItem.appendChild(self._filterBlockContainer);
		self.$$filterBlockContainer = $(self._filterBlockContainer);
	},
	_appendTitle: function() {
		var self = this;
		if (!(self.$item.$inplace || self.$item.$isTitleHidden)) {
			self.domTitle = document.createElement("label");
			self.domTitle.className = self._$cssTopField + "-title";
			self.domItem.appendChild(self.domTitle);
		}
	},
	_applyItemMetaData: function(metaData, options) {
		var self = this;
		var $item = metaData && metaData.$item;
		if (!(self.$item.$inplace) && self.$isEditMode) {
			self.filterBlock = new FilterBlock();
			self.filterBlock.buildFilterBlock(self, self._filterBlockContainer, $item);
			self.filterBlock.setSDataWhere(self.sdataWhere);
		}
	},
	_applyStateMetaData: function(metaData, options) {
		var self = this;

		if (self.filterBlock && metaData) {
			metaData = {};
			metaData.$isReadOnly = this.$isReadOnly;
			metaData.$isEditMode = this.$isEditMode;
			metaData.$isDisabled = this.$isDisabled;
			self.filterBlock.applyStateMetaData(metaData, options);
		}
	},
	dispose: function() {
		if (this.domItem) {
			this.domItem.syrainout = null;
		}
		this.layoutParent = this.authoringNode = this.boxParent = this.articleParent = null;
		this.page = this.boxPickers = this.domValueSlot = null;
		this.$field = this.$item = this.boxParent = null;
		this.layoutSlot = this.domItem = this._dataValue = null;
		this._core = this.input = this.currentValue = null;
		if (this.filterBlock) {
			this.filterBlock.dispose();
		}
	}
});