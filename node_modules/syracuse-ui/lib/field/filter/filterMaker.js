"use strict";
var _parser = require('syracuse-sdata-parser');


function _findFilterItem(exp, keys, parentExp) {
	var found;
	for (var ii = 0, jj = exp.children.length; !found && ii < jj; ii++) {
		var child = exp.children[ii];
		if (child.type == "identifier" && keys.indexOf(child.value) >= 0) {
			var root = jj > 1 ? exp : (parentExp && parentExp.children.length > 1) ? parentExp : null;
			if (root) {
				if (keys.length == 1 && (root.children[1].type != "identifier")) {
					found = {
						keys: keys,
						$value: root.children[1].value,
						$operator: root.value.text
					};
					if (found.$value.length && (found.$operator == "like" || found.$operator == "like_s")) {
						var first = found.$value[0],
							last = found.$value[found.$value.length - 1];
						if (found.$operator == "like") {
							if (first != "%") {
								if (last == "%") {
									found.$operator = "like_s";
								}
							} else {
								found.$value = found.$value.slice(1);
							}
						}
						if (last == "%") {
							found.$value = found.$value.slice(0, -1);
						}
					}
				} else {
					if (root.children.length == keys.length && root.value.text == ".") {
						for (var mm = 0, kk = keys.length; mm < kk; mm++) {
							if (root.children[mm] != keys[mm]) {
								break;
							}
						}
						if (mm == kk) {
							found = {
								keys: keys,
								$value: parentExp.children[1].value,
								$operator: parentExp.value.text
							};
						}
					}
				}
			}
		} else {
			found = child.children && _findFilterItem(child, keys, exp);
		}
	}
	return found;
}

exports.parseWhere = function(where, keys) {
	var exp = _parser.parse(where);
	if (exp && keys) {
		exp = _findFilterItem(exp, keys);
	}
	return exp;
};

function _formatFieldValue(options) {
	switch (options.$type) {
		case "application/x-reference":
			return _formatFieldValue({
				field: options.field,
				$bind: options.$bind,
				$type: options.$filterField.$type,
				value: options.field.getInputValue(),
				getRawValue: options.getRawValue
			});
		case "application/x-choice":
			var $field = options.field.$field;
			return _formatFieldValue({
				field: options.field,
				$bind: options.$bind,
				$type: ($field && $field.$value && $field.$value.$type) || "application/x-string",
				value: options.field.articleParent.dataset[options.$bind],
				getRawValue: options.getRawValue
			});
		case "application/x-boolean":
		case "application/x-integer":
		case "application/x-decimal":
		case "application/x-quantity":
			return options.field.articleParent.dataset[options.$bind];
		case "application/x-date":
			options.value = options.field.articleParent.dataset[options.$bind];
			return options.getRawValue ? options.value : ("@" + options.value + "@");
	}
	return options.getRawValue ? options.value : ("'" + (options.value || "") + "'");
}

exports.getFieldValue = function(options) {
	if (options.field.page.isFusionPage) {
		return syra_fusion.filterMaker.getFieldValue(options);
	}
	options.value = options.field.getInputValue();
	if (options.value != null) {
		switch (options.operator) {
			case "like":
				options.getRawValue = true;
				options.value = "'%" + ("" + _formatFieldValue(options)).replace(/'/g, "''") + "%'";
				break;
			case "like_s":
				options.getRawValue = true;
				options.value = "'" + ("" + _formatFieldValue(options)).replace(/'/g, "''") + "%'";
				options.operator = "like";
				break;
			case "between":
				var highValue = options.field.articleParent.dataset[options.$bind + "$High"];
				if (value && !highValue) {
					options.value = _formatFieldValue(options);
					options.operator = "ge";
				} else {
					if (!value && highValue) {
						options.value = highValue;
						options.value = _formatFieldValue(options);
						operator = "le";
					} else {
						if (value && highValue) {
							var minValue = _formatFieldValue(options);
							options.value = highValue;
							options.value = minValue + " and " + _formatFieldValue(options);
						} else {
							return "";
						}
					}
				}
				break;
			case "empty":
				options.value = "''";
				options.operator = "eq";
				break;
			case "notempty":
				options.value = "''";
				options.operator = "ne";
				break;
			default:
				options.value = _formatFieldValue(options);
				break;
		}

		var $field = options.field.$field;
		// handling specific reference field case (fix SAM 97863)
		if ($field) {
			if ($field.$type == "application/x-reference") {
				if (options.value == "''" && options.$filterCode.indexOf(".") != -1) {
					options.value = null;
					options.$filterCode = options.field.$item.$bind;
				}
			}
			var list = options.field.articleParent.list;
			if (!list.isClientFetch && $field.$capabilities.indexOf("filter_upper") >= 0) {
				options.value = options.value.toUpperCase();
				options.$filterCode = "upper(" + options.$filterCode + ")";
			}
		}
		return "(" + options.$filterCode + " " + options.operator + " " + options.value + ")";
	}
};

exports.getFieldOperators = function($type, $referenceType, isFusionPage) {
	if (isFusionPage) {
		return syra_fusion.filterMaker.getFieldOperators($type, $referenceType);
	}
	switch ($referenceType || $type) {
		case "application/x-date":
		case "application/x-time":
		case "application/x-datetime":
			var operators = ["none", "ge", "gt", "lt", "le", "eq", "ne", "empty", "notempty"];
			if ($type != "application/x-reference") {
				operators.push("between");
			}
			return operators;
		case "application/x-string":
			var operators = ["none", "like_s", "like", "gt", "ge", "lt", "le", "eq", "ne", "empty", "notempty"];
			if ($type != "application/x-reference") {
				operators.push("between");
			}
			return operators;
		case "application/x-decimal":
		case "application/x-integer":
		case "application/x-quantity":
			if ($type != "application/x-reference") {
				return ["none", "eq", "ne", "empty", "notempty"];
			}
			return ["none", "gt", "ge", "lt", "le", "eq", "ne", "empty", "notempty"];
	}
	return ["none", "eq", "ne", "empty", "notempty"];
};