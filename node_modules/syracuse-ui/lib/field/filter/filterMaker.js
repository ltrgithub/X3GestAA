"use strict";
var Parser = require('syracuse-sdata/lib/parser/parser').Parser;

var _operators = {
	like: {
		unFormat: function(value) {
			if (value && value.length >= 2) {
				if (value[0] == "%") {
					value = value.slice(1);
				}
				if (value[value.length - 1] == "%") {
					value = value.slice(0, value.length - 1);
				}
			}
			return value;
		},
		getFieldValue: function(options) {
			options.getRawValue = true;
			options.value = "'%" + ("" + _formatFieldValue(options)).replace(/'/g, "''") + "%'";
			return true;
		}
	},
	like_s: {
		unFormat: function(value) {
			if (value && value.length >= 1) {
				value = value.slice(0, value.length - 1);
			}
			return value;
		},
		getFieldValue: function(options) {
			options.getRawValue = true;
			options.value = "'" + ("" + _formatFieldValue(options)).replace(/'/g, "''") + "%'";
			options.operator = "like";
			return true;
		}
	},
	like_e: {
		unFormat: function(value) {
			if (value && value.length >= 1) {
				value = value.slice(1);
			}
			return value;
		},
		getFieldValue: function(options) {
			options.getRawValue = true;
			options.value = "'%" + ("" + _formatFieldValue(options)).replace(/'/g, "''") + "'";
			options.operator = "like";
			return true;
		}
	},
	between: {
		getFieldValue: function(options) {
			var highValue = options.field.articleParent.dataset[options.$bind + "$High"];
			if (value && !highValue) {
				options.value = _formatFieldValue(options);
				options.operator = "ge";
			} else {
				if (!value && highValue) {
					options.value = highValue;
					options.value = _formatFieldValue(options);
					operator = "le";
				} else {
					if (value && highValue) {
						var minValue = _formatFieldValue(options);
						options.value = highValue;
						options.value = minValue + " and " + _formatFieldValue(options);
					} else {
						return false;
					}
				}
			}
			return true;
		}
	},
	empty: {
		getFieldValue: function(options) {
			options.value = "''";
			options.operator = "eq";
			return true;
		}
	},
	notempty: {
		getFieldValue: function(options) {
			options.value = "''";
			options.operator = "ne";
			return true;
		}
	}
};

function _formatFieldValue(options) {
	switch (options.$type) {
		case "application/x-reference":
			return _formatFieldValue({
				field: options.field,
				$bind: options.$bind,
				$type: options.$filterField.$type,
				value: options.field.getInputValue(),
				getRawValue: options.getRawValue
			});
		case "application/x-choice":
			var $field = options.field.$field;
			return _formatFieldValue({
				field: options.field,
				$bind: options.$bind,
				$type: ($field && $field.$value && $field.$value.$type) || "application/x-string",
				value: options.field.articleParent.dataset[options.$bind],
				getRawValue: options.getRawValue
			});
		case "application/x-boolean":
		case "application/x-integer":
		case "application/x-decimal":
		case "application/x-quantity":
			return options.field.articleParent.dataset[options.$bind];
		case "application/x-date":
		case "application/x-time":
		case "application/x-datetime":
			options.value = options.field.articleParent.dataset[options.$bind];
			return options.getRawValue ? options.value : ("@" + options.value + "@");
	}
	return options.getRawValue ? options.value : ("'" + (options.value || "") + "'");
}

function _getCriteria(sdata_where, keys, parentExp) {
	var criteria;
	for (var ii = 0, jj = sdata_where.children.length; !criteria && ii < jj; ii++) {
		var child = sdata_where.children[ii];
		if (child.type == "identifier" && keys.indexOf(child.value) >= 0) {
			var root = jj > 1 ? sdata_where : (parentExp && parentExp.children.length > 1) ? parentExp : null;
			if (root) {
				if (keys.length == 1 && (root.children[1].type != "identifier")) {
					criteria = {
						keys: keys,
						value: root.children[1].value,
						operator: root.value.text
					};
				} else {
					if (root.children.length == keys.length && root.value.text == ".") {
						for (var mm = 0, kk = keys.length; mm < kk; mm++) {
							if (root.children[mm] != keys[mm]) {
								break;
							}
						}
						if (mm == kk) {
							criteria = {
								keys: keys,
								value: parentExp.children[1].value,
								operator: parentExp.value.text
							};
						}
					}
				}
				if (criteria) {
					criteria.value = criteria.value === null ? "" : criteria.value;
					switch (criteria.operator) {
						case "between":
							if (root.children.length >= 3) {
								criteria.highValue = root.children[2].value;
							}
							break;
						case "like":
						case "like_s":
						case "like_e":
							if (criteria.value.length) {
								var first = criteria.value[0],
									last = criteria.value[criteria.value.length - 1];
								if (criteria.operator == "like") {
									if (first != "%" && last == "%") {
										criteria.operator = "like_s";
									} else {
										if (last != "%") {
											criteria.operator = "like_e";
										}
									}
								}
								if (first == "%" && criteria.operator != "like_s") {
									criteria.value = criteria.value.slice(1);
								}
								if (last == "%" && criteria.operator != "like_e") {
									criteria.value = criteria.value.slice(0, -1);
								}
							}
							break;
						case "eq":
						case "ne":
							if (criteria.value.length === 0) {
								criteria.operator = (criteria.operator == "eq") ? "empty" : "notempty";
							}
							break;

					}
				}
			}
		} else {
			criteria = child.children && _getCriteria(child, keys, sdata_where);
		}
	}
	return criteria;
}

exports.parseWhere = function(where, keys) {
	var exp = Parser.parse(where);
	if (exp && keys) {
		exp = _getCriteria(exp, keys); // get from avenger
		if (exp) {
			return {
				keys: exp.keys,
				$value: exp.value,
				$operator: exp.operator
			};
		}
	}
	return exp;
};


exports.getFieldValue = function(options) {
	if (options.field.page.isFusionPage) {
		return syra_fusion.filterMaker.getFieldValue(options);
	}
	options.value = options.field.getInputValue();
	if (options.value != null) {
		var op = _operators[options.operator];
		if (op && op.getFieldValue) {
			if (!op.getFieldValue(options)) {
				return "";
			}
		} else {
			options.value = _formatFieldValue(options);
		}

		var $field = options.field && options.field.$field;
		// handling specific reference field case (fix SAM 97863)
		if ($field) {
			if ($field.$type == "application/x-reference") {
				if (options.value == "''" && options.$filterCode.indexOf(".") != -1) {
					options.value = null;
					options.$filterCode = options.field.$item.$bind;
				}
			}
			var list = options.field.articleParent.list;
			if (!list.isClientFetch && $field.$capabilities.indexOf("filter_upper") >= 0) {
				options.value = options.value.toUpperCase();
				options.$filterCode = "upper(" + options.$filterCode + ")";
			}
		}
		return "(" + options.$filterCode + " " + options.operator + " " + options.value + ")";
	}
};

exports.getFieldOperators = function($type, $referenceType, isFusionPage) {
	if (isFusionPage) {
		return syra_fusion.filterMaker.getFieldOperators($type, $referenceType);
	}
	switch ($referenceType || $type) {
		case "application/x-date":
		case "application/x-time":
		case "application/x-datetime":
			var operators = ["none", "ge", "gt", "lt", "le", "eq", "ne", "empty", "notempty"];
			if ($type != "application/x-reference") {
				operators.push("between");
			}
			return operators;
		case "application/x-string":
			var operators = ["none", "like_s", "like", "like_e", "gt", "ge", "lt", "le", "eq", "ne", "empty", "notempty"];
			if ($type != "application/x-reference") {
				operators.push("between");
			}
			return operators;
		case "application/x-decimal":
		case "application/x-integer":
		case "application/x-quantity":
			if ($type != "application/x-reference") {
				return ["none", "eq", "ne", "empty", "notempty"];
			}
			return ["none", "gt", "ge", "lt", "le", "eq", "ne", "empty", "notempty"];
	}
	return ["none", "eq", "ne", "empty", "notempty"];
};