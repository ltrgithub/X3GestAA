"use strict";

var helpers = require('syracuse-core/lib/helpers');

var Article = require("syracuse-ui/lib/article/article").Article;
var FilterField = require("./filterField").FilterField;
var parser  = require('syracuse-sdata/lib/parser/parser');

// datatypes which show up as filter (others are not shown eg x-graph)
var supportedTypes = ["application/x-string", 
                      "application/x-choice", 
                      "application/x-boolean", 
                      "application/x-integer", 
                      "application/x-decimal", 
                      "application/x-date", 
                      "application/x-time", 
                      "application/x-datetime"];

var log = null;//console.log;

function _isFilterType($testType) {
	return supportedTypes.some(function($type) { return ($type === $testType); });
}


function FilterBlock()
{
}

exports.FilterBlock = helpers.defineClass(FilterBlock, Article, {
    buildFilterBlock: function(filterWidget, filterBlockContainer, $prototype) {
    	var self = this;
    	
    	self.filterWidget = filterWidget;
    	self.filterBlockContainer = filterBlockContainer;
    	self.$$container = $(self.filterBlockContainer);
    	
    	self.$facet = "$filter";
    	self.$isEditMode = true;
        self.$prototype = $prototype;

        filterWidget.page.initializeNewItem(this, {
            $layout: { }
        }, filterWidget);

        self.loadBox();

        self.removeFilterFields();
        self.buildFilterFields();
    },
    removeFilterFields: function() {
    	var self = this;
    	if (self.filterBlockContainer) {
    		document.site.emptyDom(self.filterBlockContainer);
    	}
    },
    buildFilterFields: function() {
    	var self = this;
    	self.filterFields = {};
    	Object.keys(self.$prototype.$properties).map(function($property) {
    		var $item = self.$prototype.$properties[$property];
    		if (_isFilterType($item.$type)) {
	    		self.filterFields[$property] = new FilterField();
	    		self.filterFields[$property].createField($property, $item, self);
    		}
    	});
    },
	drawBox: function() {
	},
	/*
	onNotifyDataChange: function(field, value) {
		var self = this;
		Article.prototype.onNotifyDataChange.apply(self, arguments);
	},
	*/
	setSDataWhere: function(sdataWhere) {
		var self = this;
		var matchedFields = "";
		function expTraverseAnd(exp) {
			exp.children.forEach(function(child) {	
				return traverseExpressions(child);
			});		
		}
		function expIdentifierAndLiteral(exp) {
			if (!(exp.children.length === 2 && exp.children[0].type === "identifier" && exp.children[1].type === "literal"))
				return;
			var field = exp.children[0].value;
			var value = exp.children[1].value;
			var op = exp.value.text;
			var filterField = self.filterFields && self.filterFields[field];
			if (!filterField)
				return;
			matchedFields += "," + field + ",";
			filterField.setFilterValues(op, value);
		}
		function expBetween(exp) {
			if (!(exp.children.length === 3 && exp.children[0].type === "identifier" && exp.children[1].type === "literal" && exp.children[2].type === "literal"))
				return;
			var field = exp.children[0].value;
			var low = exp.children[1].value;
			var high = exp.children[2].value;
			var op = exp.value.text;
			var filterField = self.filterFields && self.filterFields[field];
			if (!filterField)
				return;
			matchedFields += "," + field + ",";
			filterField.setFilterValues(op, low, high);
		}
		function traverseExpressions(exp) {
			if (exp.type === "operator") {
				var operator = (exp.value && exp.value.text) || "unknown";
				var handler = operators[operator];
				if (handler) handler(exp);
			}
		};
		
		var operators = {
				"and": expTraverseAnd,
				"gt": expIdentifierAndLiteral,
				"ge": expIdentifierAndLiteral,
				"lt": expIdentifierAndLiteral,
				"le": expIdentifierAndLiteral,
				"like": expIdentifierAndLiteral,
				"eq": expIdentifierAndLiteral,
				"ne": expIdentifierAndLiteral,
				"between": expBetween,
		};
		
		var exp = parser.Parser.parse(sdataWhere);
		traverseExpressions(exp);
		
		// remove values of unmatched fields
		Object.keys(self.filterFields).forEach(function(key) {
			if (matchedFields.indexOf("," + key + ",") < 0)
				self.filterFields[key].setFilterValues("none");
		});
	}
});
