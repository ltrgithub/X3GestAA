"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function _setImageAnchorDefaultSize(field) {
	field.anchor.style.height = field.$item.$imageHeight;
	if (field.$item.$inplace) {
		field.anchor.style.width = field.$item.$imageWidth;
	}
}

function _setImageFile(field, file) {
	// if value != null, get data url from prototype
	var value = field.currentValue;
	if (file) {
		field._file = file;
		_showImageFile(field);
	} else {
		delete field._imageArea;
		if (field._image) {
			field._image.onload = field._image = null;
		}
		if (field.anchor) {
			syra_dom.empty(field.anchor);
			field.anchor.setAttribute("href", "#");
			field.anchor.setAttribute("disabled", true);
			_setImageAnchorDefaultSize(field);
		}
		_showBtn(field, field.removeBtn, false);
	}
}

function _saltUrl(url) {
	if (!url)
		return null;
	var language = syra_localizer.getLanguage();
	var sep = (url.indexOf("?") >= 0) ? "&" : "?";
	return url + sep + "salt=" + Math.round(Math.random() * 1000) + (language ? "&language=" + language : "");
}

function _showImageFile(field) {
	var value = field.currentValue;
	field.imageUrl = (value && value.$url) || field.$dataUrl;
	if (field.imageUrl) {
		field.imageUrl = syra_expression.parse(field.articleParent, field.imageUrl);
		// key value encoding
		var u = field.imageUrl.split("?");
		var p = u[0].split("/");
		p.push(encodeURIComponent(p.pop()));
		field.imageUrl = _saltUrl([p.join("/"), (u[1] ? u[1] : "")].join("?"));

		if (!field._imageArea) {
			field._imageArea = syra_dom.addDiv(field.$skin + "-img-img", field.anchor);
			syra_dom.hide(field._dataValue, false);
		}
		field._imageArea.style.width = field.$item.$imageWidth;
		field._imageArea.style.height = field.$item.$imageHeight;
		field.anchor.style.height = "";
		_showBtn(field, field.removeBtn, true);
		if (field.$item.$isAutoSize) {
			field._isImageLoaded = false;
			if (!field._image) {
				field._image = document.createElement("img");
				field._image.onload = function() {
					clearTimeout(field._waitingTimeOut);
					if (field._image) {
						// handling image display waiting icon
						field._isImageLoaded = true;
						if (field._imageWait) {
							field._imageArea.removeChild(field._imageWait);
							delete field._imageWait;
						}
						field.resizeArticle();
						field._imageArea.style.backgroundSize = "contain";
						field._imageArea.style.backgroundImage = "url(\"" + field.imageUrl + "\")";
					}
				};
			}
			if (!field.$item.$inplace) {
				field.anchor.style.minWidth = "50px";
			}
			// handler to display waiting icon
			field._waitingTimeOut = setTimeout(function() {
				if (field._imageArea && !field._imageWait && !field._isImageLoaded) {
					field._imageWait = syra_dom.addDiv("s-field-img-img-wait", field._imageArea);
				}
			}, 500);
			field._image.src = field.imageUrl;
		} else {
			field._imageArea.style.backgroundImage = "";
			field._imageArea.style.height = field.$item.$imageHeight;
			field._imageArea.style.backgroundImage = "url(\"" + field.imageUrl + "\")";
		}
		field._imageArea.style.backgroundSize = "contain";
		field._imageArea.style.backgroundRepeat = "no-repeat";
		if (field.anchor) {
			field.anchor.setAttribute("target", "_blank");
			field.anchor.setAttribute("href", field.imageUrl);
			field.anchor.setAttribute("disabled", false);
		}
	}
}

function _setFile(field, file) {
	if (file) {
		var $type = file.$contentType || file.type || field.$field.$contentType || "";
		field.$fileUrl = field.currentValue && field.currentValue.$url ? field.currentValue.$url : null;
		field.$fileUrl = syra_expression.parse(field.articleParent, field.$fileUrl || field.$dataUrl);
		if (field.$item.$isEmbedded) {
			var slot = document.createElement("div");
			slot.className = field.$skin + "-embed-slot";
			slot.setAttribute("width", field.$item.$imageWidth || "100%");
			slot.setAttribute("height", field.$item.$imageHeight || "100%");
			if (field.isPDFFile()) {
				field.$fileUrl += "#view=FitH&pagemode=thumbs&search=pdfobject&toolbar=0&statusbar=0&messages=0&navpanes=1";
			}
			slot.innerHTML = '<object width="100%" height="100%" type="' + $type + '" data="' + field.$fileUrl + '"  ></object>';
			field._dataValue.insertBefore(slot, field._dataValue.firstChild);
		} else {
			if (!field._image) {
				field._image = document.createElement("img");
				syra_dom.hide(field._image, true);
				field._image.onload = function() {
					clearTimeout(field._defaultFileTimeOut);
					if (field._image) {
						field._image.className = field.$skin + "-file-img";
						syra_dom.hide(field._image, false);
					}
				};
				field.anchor.appendChild(field._image);
			}
			field._defaultFileTimeOut = setTimeout(function() {
				if (field.anchor) {
					syra_dom.toggleClass(field.anchor, field.$skin + "-file-default", true);
				}
			}, 1000);

			var image = syra_menus.getDocumentIcon($type);
			field._image.src = syra_site.$iconPath + "/file/s-file-" + (image || "default") + ".png";
			_showBtn(field, field.removeBtn, true);

			if (field.anchor) {
				field.anchor.setAttribute("target", "_blank");
				field.anchor.setAttribute("href", field.$fileUrl);
				field.anchor.setAttribute("disabled", false);
			}
		}

	} else {
		delete field.$fileUrl;
		if (field._image) {
			field._image.onload = null;
			field._image = null;
		}
		if (field.anchor) {
			syra_dom.empty(field.anchor);
			syra_dom.toggleClass(field.anchor, field.$skin + "-file-default", false);
			field.anchor.setAttribute("href", "#");
			field.anchor.setAttribute("disabled", true);
		}
		_showBtn(field, field.removeBtn, false);
	}
}

function _validateFile(field, file) {
	var errors = [];
	if (file.type !== undefined) {
		if (field.$field.$acceptedTypes) {
			if (field.$field.$acceptedTypes.indexOf(file.type) < 0) {
				//check office types
				if (!_matchOfficeType(file.type, field.$field.$acceptedTypes)) {
					errors.push(syra_local.fdocNotSupported);
				}
			}
		}
	}
	if (field.$field.$maxByteLength && file.size > field.$field.$maxByteLength) {
		errors.push(syra_local.fdocTooLarge);
	}
	if (errors.length > 0) {
		field.showErrors(errors);
		return false;
	}
	return true;
}

function _onBeginUpload(field, file) {
	field._progress = document.createElement("div");
	field._progress.className = "s-progress";
	field.progressValue = syra_dom.addDiv("s-progress-value", field._progress);
	field.selectBtn.link.parentNode.insertBefore(field._progress, field.selectBtn.link);
	_disableButtons(field, true);
	field.setLegend(syra_local.fdocUpload + ":" + " " + file.name + " 0%");
}

function _onProgressUpload(field, file, progress) {
	field.setLegend(syra_local.fdocUpload + ":" + " " + file.name + " " + progress + "%");
	field.progressValue.style.width = progress + "%";
}

function _disableButtons(field, isDisabled) {
	syra_menus.button.disable(field.selectBtn, isDisabled);
	syra_menus.button.disable(field.removeBtn, isDisabled);
}

function _showBtn(field, btn, show) {
	if (btn) {
		if (field.$item.$inplace) {
			syra_menus.button.visibility(btn, show && !field.$isReadOnly);
		} else {
			syra_menus.button.hide(btn, !show || field.$isReadOnly);
		}
	}
}

function _matchGroupType(type, group) {
	for (var ii = 0, jj = group.length; ii < jj; ii++) {
		if (type.indexOf(group[ii]) >= 0) {
			return true;
		}
	}
	return false;
}

function _matchOfficeType($type, $acceptedTypes) {
	var groups = [
		["msword", "officedocument.word"],
		["ms-excel", "officedocument.spreadsheet"],
		["ms-powerpoint", "officedocument.presentation"]
	];
	for (var ii = 0, jj = groups.length; ii < jj; ii++) {
		var group = groups[ii];
		if (_matchGroupType($type, group)) {
			for (var mm = 0, kk = $acceptedTypes.length; mm < kk; mm++) {
				if (_matchGroupType($acceptedTypes[mm], group)) {
					return true;
				}
			}
		}
	}
	return false;
}


function _getFileType(mediaType) {
	if (mediaType.indexOf("pdf") >= 0) {
		return "pdf";
	}
	if (mediaType.indexOf("xml") >= 0) {
		return "xml";
	}
	if (mediaType.indexOf("html") >= 0) {
		return "html";
	}
	if (mediaType.indexOf("json") >= 0) {
		return "json";
	}
	if (mediaType.indexOf("text") >= 0) {
		return "txt";
	}
	if (mediaType.indexOf("image") >= 0) {
		var ii = mediaType.lastIndexOf("/");
		if (ii >= 0) {
			return mediaType.slice(ii + 1);
		}
		return null;
	}
	if (mediaType.indexOf("msword") >= 0) {
		return "doc";
	}
	if (mediaType.indexOf("officedocument.word") >= 0) {
		return "docx";
	}
	if (mediaType.indexOf("ms-excel") >= 0) {
		return "xls";
	}
	if (mediaType.indexOf("officedocument.spreadsheet") >= 0) {
		return "xlsx";
	}
	if (mediaType.indexOf("ms-powerpoint") >= 0) {
		return "ppt";
	}
	if (mediaType.indexOf("officedocument.presentation") >= 0) {
		return "pptx";
	}
	return null;
}


function _onSelectClick(btn) {
	this.parent.input.click();
}

function _onRemoveClick(btn) {
	var field = this.parent;
	field.page.externalAdapter.onRemoveUploadedFile({
		field: field,
		doEvent: function() {
			syra_controller.deleteFile(field.$dataUrl, field.articleParent, function(data, response) {
				field.setDataValue(null);
				field.selectBtn.link.focus();
				field.articleParent.applyChange(data, response);
				field.page.externalAdapter.onRemoveUploadedFileSucceeded({
					field: field
				});
			});
		}
	});
}

function DocumentField() {}

exports.DocumentField = helpers.defineClass(DocumentField, Field, {
	loadBox: function() {
		this.isFieldTipDisabled = true;
		this.$authoringType = "documentField";
		if (this.isImage && this.$item.$isTopLabelAlignment == null) {
			this.$item.$isTopLabelAlignment = true;
		}
		Field.prototype.loadBox.call(this);
	},
	isPDFFile: function() {
		return this.$field.$type == "application/pdf";
	},
	isEmbeddable: function() {
		return this.isImage || this.isPDFFile();
	},
	initialize: function() {
		this.isDocumentField = true;
		this.isImage = this.$field.$type.indexOf("image") == 0;
		if (this.isImage) {
			// split image/star in two to avoid regex catastrophy
			this.acceptFilter = "image/" + "*";
			if (this.$item.$inplace) {
				this.$item.$imageWidth = this.$item.$imageWidth || "22px";
				this.$item.$imageHeight = this.$item.$imageHeight || "22px";
			} else {
				if (this.$item.$isAutoSize == undefined) {
					if (this.page.$facet == "$query") {
						//test pour dom autrememtn toujours mette true
						this.$item.$imageHeight = this.$item.$imageHeight || "50px";
						if (!(this.articleParent && this.articleParent.isGridRecord)) {
							if (this.$item.$imageWidth == "100%") {
								delete this.$item.$imageWidth;
							}
							this.$item.$imageWidth = this.$item.$imageWidth || "50px";
						}
					} else {
						this.$item.$isAutoSize = true;
					}
				}
				if (!this.$item.$isAutoSize) {
					this.$item.$imageWidth = this.$item.$imageWidth || "100%";
					this.$item.$imageHeight = this.$item.$imageHeight || "150px";
				}
			}
		}
		this.$dataUrl = this.$field.$url;
	},
	applyMetaData: function(metaData, options) {
		if (metaData) {
			if (metaData.$url) {
				this.$dataUrl = metaData.$url;
			}
			if (metaData.$contentType) {
				this.$contentType = metaData.$contentType;
			}
		}
		syra_fields.applyMetaData(this, metaData, options);
	},
	applyDesignMetaData: function(metaData, designing) {
		syra_fields.applyDesignMetaData(this, metaData, designing);
		if (this.isImage && designing) {
			if (metaData.$imageWidth !== undefined) {
				this.$item.$imageWidth = metaData.$imageWidth;
			}
			if (metaData.$imageHeight !== undefined) {
				this.$item.$imageHeight = metaData.$imageHeight;
				if (this.anchor) {
					this.anchor.style.height = this.$item.$imageHeight;
				}

			}
			if (metaData.$isAutoSize !== undefined) {
				this.applyAutoSize(metaData);
			}
			if (this._file) {
				this._setDocumentFile(this._file);
			}
		}
	},
	setState: function(state) {
		syra_fields.setState(this, state);
		if (state.$isDisabled !== undefined) {
			_disableButtons(this, state.$isDisabled);
		}
		if (state.$isReadOnly !== undefined) {
			_showBtn(this, this.selectBtn, !state.$isReadOnly);
			_showBtn(this, this.removeBtn, !state.$isReadOnly);
		}
	},
	_upload: function(files) {
		var self = this;
		self.page.externalAdapter.onBeforeUploadFiles({
			field: self,
			files: files,
			doEvent: function() {
				for (var ii = 0; ii < files.length; ii++) {
					var file = files[ii];
					if (_validateFile(self, file) && ((self.acceptFilter && (file.type.match(self.acceptFilter) || self.acceptFilter.match(file.type))) || !self.acceptFilter)) {
						_onBeginUpload(self, file); //to improve for multi upload
						syra_controller.upload({
							file: file,
							url: syra_expression.parse(self.articleParent, self.$field.$url),
							contentType: self.$contentType || self.$field.$contentType || file.type
						}, function(data, response) {
							self._onUploadSuccess(file, data, response);
						}, function(progress, isLoaded) {
							if (!isLoaded) {
								_onProgressUpload(self, file, progress);
							} else {
								self._onEndUpload(file);
							}
						}, function(data, response) {
							self.articleParent.applyChange(data, response);
						});
					}
				}
			}
		});
	},
	_onEndUpload: function(file) {
		var self = this;
		self.setLegend(file.name + " " + syra_local.fdocUploaded);
		_disableButtons(self, false);
		_onProgressUpload(self, file, 100);
		setTimeout(function() {
			if (self._progress) {
				syra_dom.removeChild(self._progress);
				delete self._progress;
			}
			delete self.progressValue;
			self.setLegend(syra_local.fdocDropSelectFile);
		}, 1500);
	},
	setLegend: function(legend) {
		if (this._legend) {
			syra_dom.hide(this._legend, false);
			this._legend.textContent = legend;
		}
	},
	hideSelectButton: function(isHidden) {
		_showBtn(this, this.selectBtn, !isHidden);
		syra_dom.hide(this._legend, isHidden);
		this._bindDropArea(false);
		!isHidden && this._bindDropArea(true); // Is Safer to unbind before... to prevent double call
	},
	render: function() {
		if (this.$isEditMode && !this.$item.$isFilterMode) {
			this._renderEditMode();
		}
	},
	onFieldInputEvent: function(event, shortcuts) {
		if (event.type == "change") {
			this._upload(this.input.files);
		}
	},
	_bindDropArea: function(bind) {
		var $skin = this.$skin + (this.isImage ? "-img" : "-file");
		var self = this;
		if (bind) {
			self.$$dropArea.bind("drop dragenter dragover", function(event) {
				switch (event.type) {
					case "drop":
						self._upload(event.originalEvent.dataTransfer.files);
						break;
					case "dragenter":
						this.className += " s-file-drop-in";
						break;
					case "dragleave":
						this.className = $skin + "-drop-target";
						break;
				}
				event.stopPropagation();
				event.preventDefault();
				return false;
			});
		} else {
			if (self.$$dropArea) {
				self.$$dropArea.unbind();
			}
		}
	},

	_renderEditMode: function() {
		var $skin = this.$skin + (this.isImage ? "-img" : "-file");
		var dropArea = document.createElement("div");
		dropArea.className = $skin + "-drop-target";
		this._dataValue.className += " s-drop-target-slot";
		this.$$dropArea = $(this._dataValue.appendChild(dropArea));
		this._bindDropArea(true);

		this.anchor = document.createElement("a");
		this.anchor.className = $skin + "-link";
		this.anchor.setAttribute("disabled", true);
		this.anchor.syraOnClick = "onInputFieldClick";
		this.anchor.setAttribute("data-s-field-extra", this.id);
		dropArea.insertBefore(this.anchor, dropArea.firstChild);

		this._right = document.createElement("div");
		this._right.className = this.$skin + "-doc-right";
		dropArea.appendChild(this._right);

		var slot = document.createElement("div");
		slot.className = this.$skin + "-doc-upload";
		if (!this.$item.$isGridCell) {
			this._legend = document.createElement("div");
			this._legend.className = $skin + "-legend";
			this._legend.textContent = syra_local.fdocDropSelectFile;
			slot.appendChild(this._legend);
		}
		this.input = syra_dom.addInput("file");
		if (this.acceptFilter) {
			this.input.setAttribute("accept", this.acceptFilter);
		}
		if (this.$item.$enableMultiple) {
			this.input.setAttribute("multiple", true);
		}
		slot.appendChild(this.input);
		this.input.className = "s-field-input-uploader";

		this.selectBtn = syra_menus.button.add({
			parent: this,
			slot: slot,
			text: syra_local.fdocSelectFile,
			css: this.$skin + "-doc-btn s-field-doc-upload",
			fontIcon: "upload",
			iconOnly: this.$item.$inplace,
			btnclick: _onSelectClick
		});

		this.removeBtn = syra_menus.button.add({
			parent: this,
			slot: slot,
			text: syra_local.fdocRemoveFile,
			css: this.$skin + "-doc-btn s-field-doc-remove",
			fontIcon: "cancel",
			iconOnly: this.$item.$inplace,
			btnclick: _onRemoveClick
		});
		_showBtn(this, this.removeBtn, false);


		this._right.appendChild(slot);
		this.isImage && _setImageAnchorDefaultSize(this);
	},
	_renderDetailMode: function() {
		var $skin = this.$skin + (this.isImage ? "-img" : "-file");
		if (this.anchor) {
			this._image = this._imageArea = null;
			syra_dom.removeChild(this.anchor);
		}
		this.anchor = document.createElement("a");
		this.anchor.className = $skin + "-link";
		this.anchor.syraOnClick = "onInputFieldClick";
		if (!this.$item.$inplace) {
			this._dataValue.className = this._dataValue.className.replace(this._$cssField + "-value-read", "s-field-value-img");
		}
		this._dataValue.insertBefore(this.anchor, this._dataValue.firstChild);
		if (this.isImage) {
			if (this.$item.$inplace) {
				this.domItem.style.textAlign = "center";
			}
			this.anchor.style.height = this.$item.$imageHeight;
		}
	},
	_onUploadSuccess: function(file, data, response) {
		if (!data) {
			this._setDocumentFile(file);
		} else {
			this.page.applyChange(data, response);
		}
		this.page.externalAdapter.onUploadSucceeded({
			"field": this
		});
	},
	getInputValue: function() {
		return this.currentValue;
	},
	setDataValue: function(value) {
		this.currentValue = value;
		if (!this.$isEditMode && this.currentValue) {
			this._renderDetailMode();
		}
		this._setDocumentFile(this.currentValue);
	},
	resizeArticle: function() {
		var imgW = this._image && this._image.width;
		if (imgW) {
			var linW = this.anchor.clientWidth;
			var percent = (imgW >= linW) ? (linW / imgW) : 1;
			this._imageArea.style.height = (this._image.height * percent) + "px";
			this._imageArea.style.width = "100%";
		}
	},
	_setDocumentFile: function(file) {
		if (file && !_validateFile(this, file)) {
			return false;
		}
		if (this.isImage) {
			_setImageFile(this, file);
		} else {
			_setFile(this, file);
		}
	},
	getCaretPosition: function() {
		return -1;
	},
	getDisplayText: function() {
		return this.$fileUrl || "";
	},
	focus: function() {
		if (this.anchor && !this.$isHidden && !this.$isDisabled) {
			this.anchor.focus();
			syra_fields.scrollToField(this);
			return true;
		}
		syra_fields.scrollToField(this);
		return false;
	},
	dispose: function() {
		if (this.$isEditMode) {
			syra_menus.button.dispose(this.selectBtn);
			syra_menus.button.dispose(this.removeBtn);
			this._bindDropArea(false);
		}
		if (this._image) {
			this._image.onload = null;
		}
		if (this.uploadFrame) {
			this.uploadFrame.removeEventListener("load", this.uploadFrameHandler, false);
		}
		Field.prototype.dispose.call(this);
	}
});