"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function DocumentField() {}

exports.DocumentField = helpers.defineClass(DocumentField, Field, {
	loadBox: function() {
		this.$authoringType = "documentField";
		if (this.isImage && this.$item.$isTopLabelAlignment == null) {
			this.$item.$isTopLabelAlignment = true;
		}
		Field.prototype.loadBox.call(this);
	},
	isPDFFile: function() {
		return this.$field.$type == "application/pdf";
	},
	isEmbeddable: function() {
		return this.isImage || this.isPDFFile();
	},
	_saltUrl: function(url) {
		if (!url)
			return null;
		var language = syra_site.localizer.getLanguage();
		var sep = (url.indexOf("?") >= 0) ? "&" : "?";
		return url + sep + "salt=" + Math.round(Math.random() * 1000) + (language ? "&language=" + language : "");
	},
	initialize: function() {
		this.isImage = this.$field.$type.indexOf("image") == 0;
		if (this.isImage) {
			// split image/star in two to avoid regex catastrophy
			this.acceptFilter = "image/" + "*";
			if (this.$item.$inplace) {
				this.$item.$imageWidth = this.$item.$imageWidth || "22px";
				this.$item.$imageHeight = this.$item.$imageHeight || "22px";
			} else {
				if (this.$item.$isAutoSize == undefined) {
					if (this.page.$facet == "$query") {
						//test pour dom autrememtn toujours mette true
						this.$item.$imageHeight = this.$item.$imageHeight || "50px";
						if (!(this.articleParent && this.articleParent.isGridRecord)) {
							if (this.$item.$imageWidth == "100%") {
								delete this.$item.$imageWidth;
							}
							this.$item.$imageWidth = this.$item.$imageWidth || "50px";
						}
					} else {
						this.$item.$isAutoSize = true;
					}
				}
				this.$item.$imageWidth = this.$item.$imageWidth || "100%";
				this.$item.$imageHeight = this.$item.$imageHeight || "150px";
			}
		}
		this.$dataUrl = this.getDataType().$url;
	},
	applyMetaData: function(metaData, options) {
		if (metaData) {
			if (metaData.$url) {
				this.$dataUrl = metaData.$url;
			}
			if (metaData.$contentType) {
				this.$contentType = metaData.$contentType;
			}
		}
		Field.prototype.applyMetaData.call(this, metaData, options);
	},
	applyDesignMetaData: function(metaData, designing) {
		Field.prototype.applyDesignMetaData.call(this, metaData, designing);
		if (this.isImage && designing) {
			if (metaData.$imageWidth !== undefined) {
				this.$item.$imageWidth = metaData.$imageWidth;
			}
			if (metaData.$imageHeight !== undefined) {
				this.$item.$imageHeight = metaData.$imageHeight;
				if (this.anchor) {
					this.anchor.style.height = this.$item.$imageHeight;
				}

			}
			if (metaData.$isAutoSize !== undefined) {
				this.applyAutoSize(metaData);
			}
			if (this._file) {
				this._setDocumentFile(this._file);
			}
		}
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
		if (state.$isDisabled !== undefined) {
			this._disableButtons(state.$isDisabled);
		}
		if (state.$isReadOnly !== undefined) {
			if (this.selectBtn) {
				this.selectBtn.style.display = state.$isReadOnly ? "none" : "";
			}
			if (this.removeBtn) {
				this.removeBtn.style.display = state.$isReadOnly ? "none" : "";
			}
		}
	},
	_upload: function(files) {
		var self = this;
		self.page.externalAdapter.onBeforeUploadFiles({
			field: self,
			files: files,
			doEvent: function() {
				for (var ii = 0; ii < files.length; ii++) {
					var file = files[ii];
					if (self.validateFile(file) && ((self.acceptFilter && (file.type.match(self.acceptFilter) || self.acceptFilter.match(file.type))) || !self.acceptFilter)) {
						self._onBeginUpload(file); //to improve for multi upload
						syra_controller.upload(file, self.getDataType().$url, self.$contentType || self.getDataType().$contentType, self.articleParent, function(data, response) {
							self._onUploadSuccess(file, data, response);
						}, function(progress, isLoaded) {
							if (!isLoaded) {
								self._onProgressUpload(file, progress);
							} else {
								self._onEndUpload(file);
							}
						}, function(data, response) {
							self.articleParent.applyChange(data, response);
						});
					}
				}
			}
		});
	},
	_onBeginUpload: function(file) {
		this._progress = document.createElement("div");
		this._progress.className = "s-file-progress";
		this._info.appendChild(this._progress);
		this.progressValue = document.createElement("div");
		this.progressValue.className = "s-file-progress-value";
		this._progress.appendChild(this.progressValue);
		this._disableButtons(true);
		this._legend.textContent = syra_local.fdocUpload + ":" + " " + file.name + " 0%";
	},
	_onProgressUpload: function(file, progress) {
		this._legend.textContent = syra_local.fdocUpload + ":" + " " + file.name + " " + progress + "%";
		this.progressValue.style.width = progress + "%";
	},
	_onEndUpload: function(file) {
		var self = this;
		self._legend.textContent = file.name + " " + syra_local.fdocUploaded;
		self._disableButtons(false);
		self._onProgressUpload(file, 100);
		setTimeout(function() {
			if (self._progress) {
				syra_site.dom.removeChild(self._progress);
				delete self._progress;
			}
			delete self.progressValue;
			if (self._legend) {
				self._legend.textContent = syra_local.fdocDropSelectFile;
			}
		}, 1500);
	},
	_disableButtons: function(isDisabled) {
		if (this.selectBtn) {
			syra_site.dom.disableItem(this.selectBtn, isDisabled);
		}
		if (this.removeBtn) {
			syra_site.dom.disableItem(this.removeBtn, isDisabled);
		}
	},
	setLegend: function(legend) {
		this._legend.style.display = "";
		this._legend.textContent = legend;
	},
	hideSelectButton: function(isHidden) {
		this._hideButton("selectBtn", isHidden);
		this._legend.style.display = isHidden ? "none" : "";
		this._bindDropArea(false);
		if (!isHidden) {
			// Is Safer to unbind before... to prevent double call
			this._bindDropArea(true);
		}
	},
	_hideButton: function(button, isHidden) {
		if (this[button]) {
			this[button].style.display = isHidden ? "none" : "";
		}
	},
	render: function() {
		if (this.$isEditMode && !this.$item.$isFilterMode) {
			this._renderEditMode();
		}
	},
	_appendActions: function($skin) {
		var btns = document.createElement("div");
		btns.className = $skin + "-btns";

		this.inputFile = document.createElement("input");

		syra_site.setSpecificAttributes(this.inputFile);

		this.inputFile.setAttribute("type", "file");
		if (this.acceptFilter) {
			this.inputFile.setAttribute("accept", this.acceptFilter);
		}
		if (this.$item.$enableMultiple) {
			this.inputFile.setAttribute("multiple", true);
		}
		//btns.appendChild(this.inputFile);
		this._bindInputFileChange(true);

		btns.appendChild(this.inputFile);
		this.inputFile.style.width = "0px";
		this.inputFile.style.height = "0px";
		this.inputFile.style.visibility = "hidden";

		this.selectBtn = syra_menus.addTextButton(syra_local.fdocSelectFile, $skin + "-btn s-field-doc-upload", "onSelectClick", null, "upload");
		btns.appendChild(this.selectBtn);

		this.removeBtn = syra_menus.addTextButton(syra_local.fdocRemoveFile, $skin + "-btn s-field-doc-remove", "onRemoveClick", null, "cancel");
		this.removeBtn.style.display = "none";
		btns.appendChild(this.removeBtn);

		this._right.appendChild(btns);

	},
	_bindInputFileChange: function(bind) {
		var self = this;
		if (bind) {
			$(self.inputFile).bind("change", function(args) {
				self._upload(this.files);
			});
		} else {
			if (self.inputFile) {
				$(self.inputFile).unbind();
			}
		}
	},
	_bindDropArea: function(bind) {
		var $skin = this.$skin + (this.isImage ? "-img" : "-file");
		var self = this;
		if (bind) {
			self.$$dropArea.bind("drop dragenter dragover", function(event) {
				switch (event.type) {
					case "drop":
						self._upload(event.originalEvent.dataTransfer.files);
						break;
					case "dragenter":
						this.className += " s-file-drop-in";
						break;
					case "dragleave":
						this.className = $skin + "-drop-target";
						break;
				}
				event.stopPropagation();
				event.preventDefault();
				return false;
			});
		} else {
			if (self.$$dropArea) {
				self.$$dropArea.unbind();
			}
		}
	},
	onSelectClick: function(btn) {
		this.inputFile.click();
	},
	onRemoveClick: function(btn) {
		var self = this;
		self.page.externalAdapter.onRemoveUploadedFile({
			field: self,
			doEvent: function() {
				syra_controller.deleteFile(self.$dataUrl, self.articleParent, function(data, response) {
					self.setDataValue(null);
					self.selectBtn.focus();
					self.articleParent.applyChange(data, response);
				});
			}
		});
	},
	_renderEditMode: function() {
		var $skin = this.$skin + (this.isImage ? "-img" : "-file");
		var dropArea = document.createElement("div");
		dropArea.className = $skin + "-drop-target";
		this.fieldValue.className += " s-drop-target-slot";
		this.$$dropArea = $(this.fieldValue.appendChild(dropArea));
		this._bindDropArea(true);

		this.anchor = document.createElement("a");
		this.anchor.className = $skin + "-link";
		this.anchor.setAttribute("disabled", true);
		this.anchor.syraOnClick = "onInputFieldClick";
		this.anchor.setAttribute("data-s-field-extra", this.id);
		dropArea.insertBefore(this.anchor, dropArea.firstChild);

		this._right = document.createElement("div");
		this._right.className = $skin + "-right";
		dropArea.appendChild(this._right);

		this._info = document.createElement("div");
		this._info.className = $skin + "-info";
		this._right.appendChild(this._info);

		this._legend = document.createElement("div");
		this._legend.className = $skin + "-legend";
		this._legend.textContent = syra_local.fdocDropSelectFile;
		this._info.appendChild(this._legend);

		this._appendActions($skin);

		if (this.isImage) {
			this.anchor.style.height = this.$item.$imageHeight;
		}
	},
	_renderDetailMode: function() {
		var $skin = this.$skin + (this.isImage ? "-img" : "-file");
		this.anchor = document.createElement("a");
		this.anchor.className = $skin + "-link";
		this.anchor.syraOnClick = "onInputFieldClick";
		this.fieldValue.insertBefore(this.anchor, this.fieldValue.firstChild);

		if (this.isImage) {
			if (this.$item.$inplace) {
				this.domItem.style.textAlign = "center";
			}
			this.anchor.style.height = this.$item.$imageHeight;
		}
	},
	_onUploadSuccess: function(file, data, response) {
		if (!data) {
			this._setDocumentFile(file);
		} else {
			this.page.applyChange(data, response);
		}
	},
	setDataValue: function(value) {
		this.currentValue = value;
		if (!this.$isEditMode && this.currentValue) {
			this._renderDetailMode();
		}
		this._setDocumentFile(this.currentValue);
	},
	resizeField: function() {
		var imgW = this._image && this._image.width;
		if (imgW) {
			var linW = this.anchor.clientWidth;
			var percent = (imgW >= linW) ? (linW / imgW) : 1;
			this._imageArea.style.height = (this._image.height * percent) + "px";
			this._imageArea.style.width = "100%";
		}
	},
	_matchGroupType: function(type, group) {
		for (var ii = 0, jj = group.length; ii < jj; ii++) {
			if (type.indexOf(group[ii]) >= 0) {
				return true;
			}
		}
		return false;
	},
	_matchOfficeType: function($type, $acceptedTypes) {
		var groups = [
			["msword", "officedocument.word"],
			["ms-excel", "officedocument.spreadsheet"],
			["ms-powerpoint", "officedocument.presentation"]
		];
		for (var ii = 0, jj = groups.length; ii < jj; ii++) {
			var group = groups[ii];
			if (this._matchGroupType($type, group)) {
				for (var mm = 0, kk = $acceptedTypes.length; mm < kk; mm++) {
					if (this._matchGroupType($acceptedTypes[mm], group)) {
						return true;
					}
				}
			}
		}
		return false;
	},
	validateFile: function(file) {
		var errors = [];
		if (file.type !== undefined) {
			if (this.$field.$acceptedTypes) {
				if (this.$field.$acceptedTypes.indexOf(file.type) < 0) {
					//check office types
					if (!this._matchOfficeType(file.type, this.$field.$acceptedTypes)) {
						errors.push(syra_local.fdocNotSupported);
					}
				}
			}
		}
		if (this.$field.$maxByteLength && file.size > this.$field.$maxByteLength) {
			errors.push(syra_local.fdocTooLarge);
		}
		if (errors.length > 0) {
			this.showErrors(errors);
			return false;
		}
		return true;
	},
	_setDocumentFile: function(file) {
		if (file && !this.validateFile(file)) {
			return false;
		}
		if (this.isImage) {
			this._setImageFile(file);
		} else {
			this._setFile(file);
		}
	},
	_setFile: function(file) {
		var self = this;
		if (file) {
			var $type = file.$contentType || file.type || self.$field.$contentType || "";
			var $fileUrl = this.currentValue && this.currentValue.$url ? this.currentValue.$url : null;
			$fileUrl = syra_site.expressionMaker.parse(self.articleParent, $fileUrl || self.$dataUrl);
			if (self.$item.$isEmbedded) {
				self.embedSlot = document.createElement("div");
				self.embedSlot.className = self.$skin + "-embed-slot";
				self.embedSlot.setAttribute("width", self.$item.$imageWidth || "100%");
				self.embedSlot.setAttribute("height", self.$item.$imageHeight || "100%");
				if (self.isPDFFile()) {
					$fileUrl += "#view=FitH&pagemode=thumbs&search=pdfobject&toolbar=0&statusbar=0&messages=0&navpanes=1";
				}
				self.embedSlot.innerHTML = '<object width="100%" height="100%" type="' + $type + '" data="' + $fileUrl + '"  ></object>';
				self.fieldValue.insertBefore(self.embedSlot, self.fieldValue.firstChild);
			} else {
				if (!self._image) {
					self._image = document.createElement("img");
					self._image.style.display = "none";
					self._image.onload = function() {
						clearTimeout(self._defaultFileTimeOut);
						self._image.className = self.$skin + "-file-img";
						self._image.style.display = "";
					};
					self.anchor.appendChild(self._image);
				}
				self._defaultFileTimeOut = setTimeout(function() {
					if (self.anchor) {
						syra_site.dom.toggleClass(self.anchor, self.$skin + "-file-default", true);
					}
				}, 1000);

				var image = syra_site.siteFunctions.getDocumentIcon($type);
				self._image.src = syra_site.$item.$iconPath + "/file/s-file-" + (image || "default") + ".png";
				if (self.removeBtn && !self.$isReadOnly) {
					self.removeBtn.style.display = "";
				}
				if (self.anchor) {
					self.anchor.setAttribute("target", "_blank");
					self.anchor.setAttribute("href", $fileUrl);
					self.anchor.setAttribute("disabled", false);
				}
			}

		} else {
			if (self._image) {
				delete self._image.onload;
				delete self._image;
			}
			if (self.anchor) {
				syra_site.dom.empty(self.anchor);
				syra_site.dom.toggleClass(self.anchor, self.$skin + "-file-default", false);
				self.anchor.setAttribute("href", "#");
				self.anchor.setAttribute("disabled", true);
			}
			if (self.removeBtn) {
				self.removeBtn.style.display = "none";
			}
		}
	},
	_getFileType: function(mediaType) {
		if (mediaType.indexOf("pdf") >= 0) {
			return "pdf";
		}
		if (mediaType.indexOf("xml") >= 0) {
			return "xml";
		}
		if (mediaType.indexOf("html") >= 0) {
			return "html";
		}
		if (mediaType.indexOf("json") >= 0) {
			return "json";
		}
		if (mediaType.indexOf("text") >= 0) {
			return "txt";
		}
		if (mediaType.indexOf("image") >= 0) {
			var ii = mediaType.lastIndexOf("/");
			if (ii >= 0) {
				return mediaType.slice(ii + 1);
			}
			return null;
		}
		if (mediaType.indexOf("msword") >= 0) {
			return "doc";
		}
		if (mediaType.indexOf("officedocument.word") >= 0) {
			return "docx";
		}
		if (mediaType.indexOf("ms-excel") >= 0) {
			return "xls";
		}
		if (mediaType.indexOf("officedocument.spreadsheet") >= 0) {
			return "xlsx";
		}
		if (mediaType.indexOf("ms-powerpoint") >= 0) {
			return "ppt";
		}
		if (mediaType.indexOf("officedocument.presentation") >= 0) {
			return "pptx";
		}
		return null;
	},
	_setImageFile: function(file) {
		// if value != null, get data url from prototype
		var self = this;
		var value = this.currentValue;
		if (file) {
			self._file = file;
			self._showImageFile();
		} else {
			delete self._imageArea;
			if (self._image) {
				delete self._image.onload;
				delete self._image;
			}
			if (self.anchor) {
				syra_site.dom.empty(self.anchor);
				self.anchor.setAttribute("href", "#");
				self.anchor.setAttribute("disabled", true);
				self.anchor.style.height = self.$item.$imageHeight;
			}
			if (self.removeBtn) {
				self.removeBtn.style.display = "none";
			}
		}
	},
	_showImageFile: function() {
		var self = this;
		var value = this.currentValue;
		self.imageUrl = (value && value.$url) || self.$dataUrl;
		if (self.imageUrl) {
			self.imageUrl = syra_site.expressionMaker.parse(self.articleParent, self.imageUrl);
			// key value encoding
			var u = self.imageUrl.split("?");
			var p = u[0].split("/");
			p.push(encodeURIComponent(p.pop()));
			self.imageUrl = self._saltUrl([p.join("/"), (u[1] ? u[1] : "")].join("?"));
			//
			if (!self._imageArea) {
				self._imageArea = document.createElement("div");
				self._imageArea.className = self.$skin + "-img-img";
				self.anchor.appendChild(self._imageArea);
				self._dataValue.style.display = '';
			}
			self._imageArea.style.width = self.$item.$imageWidth;
			self._imageArea.style.height = self.$item.$imageHeight;
			self.anchor.style.height = "";
			if (self.removeBtn && !self.$isReadOnly) {
				self.removeBtn.style.display = "";
			}
			if (self.$item.$isAutoSize) {
				self._isImageLoaded = false;
				if (!self._image) {
					self._image = document.createElement("img");
					self._image.onload = function() {
						// handling image display waiting icon
						self._isImageLoaded = true;
						clearTimeout(self._waitingTimeOut);
						if (self._imageWait) {
							self._imageArea.removeChild(self._imageWait);
							delete self._imageWait;
						}
						self.resizeField();
						self._imageArea.style.backgroundSize = "contain";
						self._imageArea.style.backgroundImage = "url(\"" + self.imageUrl + "\")";
					};
				}
				if (!this.$item.$inplace) {
					self.anchor.style.minWidth = "50px";
				}
				// handler to display waiting icon
				self._waitingTimeOut = setTimeout(function() {
					if (self._imageArea && !self._imageWait && !self._isImageLoaded) {
						self._imageWait = document.createElement("div");
						self._imageWait.className = "s-field-img-img-wait";
						self._imageArea.appendChild(self._imageWait);
					}
				}, 500);
				self._image.src = self.imageUrl;
			} else {
				self._imageArea.style.backgroundImage = "";
				self._imageArea.style.height = self.$item.$imageHeight;
				self._imageArea.style.backgroundImage = "url(\"" + self.imageUrl + "\")";
			}
			self._imageArea.style.backgroundSize = "contain";
			self._imageArea.style.backgroundRepeat = "no-repeat";
			if (self.anchor) {
				self.anchor.setAttribute("target", "_blank");
				self.anchor.setAttribute("href", self.imageUrl);
				self.anchor.setAttribute("disabled", false);
			}
		}
	},
	focus: function() {
		if (this.anchor && !this.$isHidden && !this.$isDisabled) {
			this.anchor.focus();
			return true;
		}
		return false;
	},
	dispose: function() {
		if (this.$isEditMode) {
			this.selectBtn = this.removeBtn = null;
			this._bindInputFileChange(false);
			this._bindDropArea(false);
		}
		if (this._image) {
			this._image.onload = null;
		}
		this._image = this._progress = this._info = this._imageWait = this._legend = this._file = this._imageArea = this.anchor = this.imageUrl = null;
		if (this.uploadFrame) {
			this.uploadFrame.removeEventListener("load", this.uploadFrameHandler, false);
		}
		this.onuploadFrameLoad = null;
		Field.prototype.dispose.call(this);
	}
});