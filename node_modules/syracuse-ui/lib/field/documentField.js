"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
var DocumentAuthoring = require("syracuse-ui/lib/authoring/field/documentAuthoring").DocumentAuthoring;
//http://www.pdfobject.com/generator.php
//http://joliclic.free.fr/html/object-tag/
function DocumentField(){
}

exports.DocumentField = helpers.defineClass(DocumentField, Field, {
    getAuthoringWidget: function(designedField){
        if (this.isEmbeddable()) {
            if (!this.awAddin) {
                this.awAddin = new DocumentAuthoring();
                this.awAddin.create(designedField);
            }
        }
        return this.awAddin;
    },
    loadBox: function($$item){
        if (this.isImage && this.$item.$isTopLabelAlignment == null) {
            this.$item.$isTopLabelAlignment = true;
        }
        Field.prototype.loadBox.call(this, $$item);
    },
    isPDFFile: function(){
        return this.$field.$type == "application/pdf";
    },
    isEmbeddable: function(){
        return this.isImage || this.isPDFFile();
    },
    _saltUrl: function(url){
        if (!url) 
            return null;
        var sep = (url.indexOf("?") >= 0) ? "&" : "?";
        return url + sep + "salt=" + Math.round(Math.random() * 1000);
    },
    initialize: function(){
        this.isImage = this.$field.$type.indexOf("image") == 0;
        if (this.isImage) {
            // split image/star in two to avoid regex catastrophy
            this.acceptFilter = "image/" + "*";
            if (this.$item.$inplace) {
                this.$item.$imageWidth = this.$item.$imageWidth || "2.5em";
                this.$item.$imageHeight = this.$item.$imageHeight || "2.5em";
            }
            else {
                if (this.$item.$isAutoSize == undefined) {
                    if (this.page.$facet == "$query") {
                        //test pour dom autrememtn toujours mette true 
                        this.$item.$imageHeight = this.$item.$imageHeight || "50px";
                    }
                    else {
                        this.$item.$isAutoSize = true;
                    }
                }
                this.$item.$imageWidth = this.$item.$imageWidth || "100%";
                this.$item.$imageHeight = this.$item.$imageHeight || "150px";
            }
        }
        this.$dataUrl = this.getDataType().$url;
    },
    setFieldWidth: function(){
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
        if (this.isImage && onAuthoring) {
            if (metaData.$imageWidth !== undefined) {
                this.$item.$imageWidth = metaData.$imageWidth;
            }
            if (metaData.$imageHeight !== undefined) {
                this.$item.$imageHeight = metaData.$imageHeight;
            }
            if (metaData.$isAutoSize !== undefined) {
                this.applyAutoSize(metaData);
            }
            if (this._file) {
                this._setDocumentFile(this._file);
            }
        }
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        if (state.$isDisabled !== undefined) {
            this._disableButtons(state.$isDisabled);
        }
        if (state.$isReadOnly !== undefined) {
            if (this.selectBtn) {
                this.selectBtn.style.display = state.$isReadOnly ? "none" : "";
            }
            if (this.removeBtn) {
                this.removeBtn.style.display = state.$isReadOnly ? "none" : "";
            }
        }
    },
    _upload: function(files){
        var self = this;
        self.page.externalAdapter.onBeforeUploadFiles({
            field: self,
            files: files,
            doEvent: function(){
                for (var ii = 0; ii < files.length; ii++) {
                    var file = files[ii];
                    if (self.validateFile(file) && ((self.acceptFilter && (file.type.match(self.acceptFilter) || self.acceptFilter.match(file.type))) || !self.acceptFilter)) {
                        self._onBeginUpload(file); //to improve for multi upload
                        document.controller.upload(file, self.getDataType().$url, self.articleParent, function(data, response){
                            self._onUploadSuccess(file, data, response);
                        }, function(progress, isLoaded){
                            if (!isLoaded) {
                                self._onProgressUpload(file, progress);
                            }
                            else {
                                self._onEndUpload(file);
                            }
                        });
                    }
                }
            }
        });
    },
    _onBeginUpload: function(file){
        this._progress = document.createElement("div");
        this._progress.className = "s-file-progress";
        this._info.appendChild(this._progress);
        this.progressValue = document.createElement("div");
        this.progressValue.className = "s-file-progress-value";
        this._progress.appendChild(this.progressValue);
        this._disableButtons(true);
        this._legend.textContent = this.localize.fdocUpload + ":" + " " + file.name + " 0%";
    },
    _onProgressUpload: function(file, progress){
        this._legend.textContent = this.localize.fdocUpload + ":" + " " + file.name + " " + progress + "%";
        this.progressValue.style.width = progress + "%";
    },
    _onEndUpload: function(file){
        var self = this;
        self._legend.textContent = file.name + " " + this.localize.fdocUploaded;
        self._disableButtons(false);
        self._onProgressUpload(file, 100);
        setTimeout(function(){
            if (self._progress) {
                document.site.removeDomChild(self._progress);
                delete self._progress;
            }
            delete self.progressValue;
            self._legend.textContent = self.localize.fdocDropSelectFile;
        }, 1500);
    },
    _disableButtons: function(isDisabled){
        if (this.selectBtn) {
            document.site.disableItem(this.selectBtn, isDisabled);
        }
        if (this.removeBtn) {
            document.site.disableItem(this.removeBtn, isDisabled);
        }
    },
    render: function(){
        if (!this.$item.$isFilterMode) {
            if (this.$isEditMode) {
                this._renderEditMode();
            }
        }
    },
    _appendActions: function($skin){
        var btns = document.createElement("div");
        btns.className = $skin + "-btns";
        
        this._inputFile = document.createElement("input");
        this._inputFile.setAttribute("type", "file");
        this._inputFile.style.width = "0px";
        this._inputFile.style.height = "0px";
        this._inputFile.style.visibility = "hidden";
        
        this._$$inputFile = $(this._inputFile);
        if (this.acceptFilter) {
            this._inputFile.setAttribute("accept", this.acceptFilter);
        }
        if (this.$item.$enableMultiple) {
            this._inputFile.setAttribute("multiple", true);
        }
        btns.appendChild(this._inputFile);
        this._bindInputFileChange(true);
        
        this.selectBtn = document.createElement("a");
        this.selectBtn.className = $skin + "-upload";
        this.selectBtn.setAttribute("href", "#");
        this.selectBtn.setAttribute("data-s-picker", "select");
        this.selectBtn.setAttribute("title", this.localize.fdocSelectFile);
        this.selectBtn.textContent = this.localize.fdocSelectFile;
        btns.appendChild(this.selectBtn);
        
        this.removeBtn = document.createElement("a");
        this.removeBtn.className = $skin + "-remove";
        this.removeBtn.setAttribute("data-s-picker", "remove");
        this.removeBtn.setAttribute("href", "#");
        this.removeBtn.setAttribute("title", this.localize.fdocRemoveFile);
        this.removeBtn.textContent = this.localize.fdocRemoveFile;
        this.removeBtn.style.display = "none";
        btns.appendChild(this.removeBtn);
        
        this._right.appendChild(btns);
    },
    _bindInputFileChange: function(bind){
        var self = this;
        if (bind) {
            self._$$inputFile.bind("change", function(){
                self._upload(this.files);
            });
        }
        else {
            if (self._$$inputFile) {
                self._$$inputFile.unbind();
            }
        }
    },
    _bindDropArea: function(bind){
        var self = this;
        if (bind) {
            self.$$dropArea.bind("drop dragenter dragover", function(event){
                switch (event.type) {
                    case "drop":
                        self._upload(event.originalEvent.dataTransfer.files);
                        break;
                    case "dragenter":
                        this.className += " s-file-drop-in";
                        break;
                    case "dragleave":
                        this.className = $skin + "-drop-target";
                        break;
                }
                event.stopPropagation();
                event.preventDefault();
                return false;
            });
        }
        else {
            if (self.$$dropArea) {
                self.$$dropArea.unbind();
            }
        }
    },
    doClickPicker: function(btn){
        var self = this;
        if (!self.$isDisabled) {
            switch (btn.getAttribute("data-s-picker")) {
                case "select":
                    self._$$inputFile.click();
                    break;
                case "remove":
                    document.controller.deleteFile(self.$dataUrl, self.articleParent, function(data, response){
                        // callback if succes
                        self.setDataValue(null);
                        self.selectBtn.focus();
                    });
                    break;
            }
        }
    },
    _renderEditMode: function(){
        var $skin = this.$skin + (this.isImage ? "-img" : "-file");
        var dropArea = document.createElement("div");
        dropArea.className = $skin + "-drop-target";
        this.$$dropArea = $(this.fieldValue.appendChild(dropArea));
        this._bindDropArea(true);
        
        this.anchor = document.createElement("a");
        this.anchor.className = $skin + "-link";
        this.anchor.setAttribute("disabled", true);
        this.anchor.setAttribute("data-s-field-binary", this.id);
        this.$$anchor = $(this.anchor).prependTo(this.$$dropArea);
        
        this._right = document.createElement("div");
        this._right.className = $skin + "-right";
        dropArea.appendChild(this._right);
        
        this._info = document.createElement("div");
        this._info.className = $skin + "-info";
        this._right.appendChild(this._info);
        
        this._legend = document.createElement("div");
        this._legend.className = $skin + "-legend";
        this._legend.textContent = this.localize.fdocDropSelectFile;
        this._info.appendChild(this._legend);
        
        this._appendActions($skin);
        
        if (this.isImage) {
            this.anchor.style.height = this.$item.$imageHeight;
        }
    },
    _renderDetailMode: function(){
        var $skin = this.$skin + (this.isImage ? "-img" : "-file");
        this.anchor = document.createElement("a");
        this.anchor.className = $skin + "-link";
        this.$$anchor = $(this.anchor).prependTo($(this.fieldValue));
        if (this.isImage) {
            if (this.$item.$inplace) {
                this._domItem.style.textAlign = "center";
            }
            this.anchor.style.height = this.$item.$imageHeight;
        }
    },
    _onUploadSuccess: function(file, data, response){
        this._setDocumentFile(file);
        this.articleParent.applyChange(data, response);
    },
    setDataValue: function(value){
        this.currentValue = value;
        if (!this.$isEditMode && this.currentValue) {
            this._renderDetailMode();
        }
        this._setDocumentFile(this.currentValue);
    },
    onWindowResize: function(){
        if (this._image && this._image.width) {
            if (this._image.width >= this.$$anchor.width()) {
                var percent = this.$$anchor.width() / this._image.width;
                this._imageArea.style.height = (this._image.height * percent) + "px";
            }
            else {
                this._imageArea.style.height = this._image.height + "px";
            }
            this._imageArea.style.width = "100%";
        }
    },
    validateFile: function(file){
        var errors = [];
        if (file.type !== undefined) {
            if (this.$field.$acceptedTypes) {
                if (this.$field.$acceptedTypes.indexOf(file.type) < 0) {
                    errors.push(this.localize.fdocNotSupported);
                }
            }
        }
        if (this.$field.$maxByteLength && file.size > this.$field.$maxByteLength) {
            errors.push(this.localize.fdocTooLarge);
        }
        if (errors.length > 0) {
            this.showErrors(errors);
            return false;
        }
        return true;
    },
    _setDocumentFile: function(file){
        if (file && !this.validateFile(file)) {
            return false;
        }
        if (this.isImage) {
            this._setImageFile(file);
        }
        else {
            this._setFile(file);
        }
    },
    _setFile: function(file){
        var self = this;
        if (file) {
            var $type = file.$contentType || file.type || self.$field.$contentType || "";
            var $dataUrl = self.articleParent.parseExpression(self.$dataUrl);
            if (self.$item.$isEmbedded) {
                self.embedSlot = document.createElement("div");
                self.embedSlot.className = self.$skin + "-embed-slot";
                self.embedSlot.setAttribute("width", self.$item.$imageWidth || "100%");
                self.embedSlot.setAttribute("height", self.$item.$imageHeight || "100%");
                if (self.isPDFFile()) {
                    $dataUrl += "#view=FitH&pagemode=thumbs&search=pdfobject&toolbar=0&statusbar=0&messages=0&navpanes=1";
                }
                self.embedSlot.innerHTML = '<object width="100%" height="100%" type="' + $type + '" data="' + $dataUrl + '"  ></object>';
                self.fieldValue.insertBefore(self.embedSlot, self.fieldValue.firstChild);
            }
            else {
                if (!self._image) {
                    self._image = document.createElement("img");
                    self._image.style.display = "none";
                    self._image.onload = function(){
                        clearTimeout(self._defaultFileTimeOut);
                        self._image.className = self.$skin + "-file-img";
                        self._image.style.display = "";
                    };
                    self.anchor.appendChild(self._image);
                }
                self._defaultFileTimeOut = setTimeout(function(){
                    if (self.anchor) {
                        document.site.toggleClass(self.anchor, self.$skin + "-file-default", true);
                    }
                }, 1000);
                
                var image = this._getFileIcon($type);
                self._image.src = document.site.$item.$iconPath + "/file/s-file-" + (image || "default") + ".png";
                if (self.removeBtn && !self.$isReadOnly) {
                    self.removeBtn.style.display = "";
                }
                self.anchor.setAttribute("target", "_blank");
                self.anchor.setAttribute("href", $dataUrl);
                self.anchor.setAttribute("disabled", false);
            }
            
        }
        else {
            if (self._image) {
                delete self._image.onload;
                delete self._image;
            }
            document.site.emptyDom(self.anchor);
            document.site.toggleClass(self.anchor, self.$skin + "-file-default", false);
            self.anchor.setAttribute("href", "#");
            self.anchor.setAttribute("disabled", true);
            if (self.removeBtn) {
                self.removeBtn.style.display = "none";
            }
        }
    },
    _getFileIcon: function(mediaType){
        mediaType = mediaType.toLowerCase();
        if (mediaType.indexOf("image") >= 0) {
            return "image";
        }
        if (mediaType.indexOf("pdf") >= 0) {
            return "pdf";
        }
        if (mediaType.indexOf("msword") >= 0 || mediaType.indexOf("ms-word") >= 0 || mediaType.indexOf("officedocument.word") >= 0) {
            return "msword";
        }
        if (mediaType.indexOf("ms-excel") >= 0 || mediaType.indexOf("officedocument.spreadsheet") >= 0) {
            return "excel";
        }
        if (mediaType.indexOf("ms-powerpoint") >= 0 || mediaType.indexOf("officedocument.presentationml") >= 0) {
            return "powerpoint";
        }
        if (mediaType.indexOf("xml") >= 0) {
            return "xml";
        }
        if (mediaType.indexOf("html") >= 0) {
            return "html";
        }
        if (mediaType.indexOf("json") >= 0) {
            return "json";
        }
        if (mediaType.indexOf("text") >= 0) {
            return "text";
        }
  		mediaType = mediaType.replace("application/", "");
        return (mediaType.indexOf("image") >= 0) ? "image" : mediaType.replace("/", "-");
    },
    _setImageFile: function(file){
        // if value != null, get data url from prototype
        var self = this;
        var value = this.currentValue;
        if (file) {
            self._file = file;
            self.imageUrl = (value && value.$url) || self.$dataUrl;
            if (self.imageUrl) {
                self.imageUrl = self.articleParent.parseExpression(self.imageUrl);
                // key value encoding
                var u = self.imageUrl.split("?");
                var p = u[0].split("/");
                p.push(encodeURIComponent(p.pop()));
                self.imageUrl = self._saltUrl([p.join("/"), (u[1] ? u[1] : "")].join("?"));
                //
                if (!self._imageArea) {
                    self._imageArea = document.createElement("div");
                    self._imageArea.className = self.$skin + "-img-img";
                    self.anchor.appendChild(self._imageArea);
                    self.domValueSlot.style.display = '';
                }
                self._imageArea.style.width = self.$item.$imageWidth;
                self._imageArea.style.height = self.$item.$imageHeight;
                self.anchor.style.height = "";
                if (self.removeBtn && !self.$isReadOnly) {
                    self.removeBtn.style.display = "";
                }
                if (self.$item.$isAutoSize) {
                    if (!self._image) {
                        self._image = document.createElement("img");
                        self._image.onload = function(){
                            self.onWindowResize();
                            self._imageArea.style.backgroundSize = "contain";
                            self._imageArea.style.backgroundImage = "url(\"" + self.imageUrl + "\")";
                        };
                    }
                    self._image.src = self.imageUrl;
                    if (!this.$item.$inplace) {
                        self.anchor.style.minWidth = "50px";
                    }
                }
                else {
                    self._imageArea.style.backgroundImage = "";
                    self._imageArea.style.height = self.$item.$imageHeight;
                    self._imageArea.style.backgroundImage = "url(\"" + self.imageUrl + "\")";
                }
                self._imageArea.style.backgroundSize = "contain";
                self._imageArea.style.backgroundRepeat = "no-repeat";
                self.anchor.setAttribute("target", "_blank");
                self.anchor.setAttribute("href", self.imageUrl);
                self.anchor.setAttribute("disabled", false);
            }
        }
        else {
            delete self._imageArea;
            if (self._image) {
                delete self._image.onload;
                delete self._image;
            }
            document.site.emptyDom(self.anchor);
            self.anchor.setAttribute("href", "#");
            self.anchor.setAttribute("disabled", true);
            self.anchor.style.height = self.$item.$imageHeight;
            if (self.removeBtn) {
                self.removeBtn.style.display = "none";
            }
        }
    },
    focus: function(){
        if (this.anchor && !this.$isHidden && !this.$isDisabled) {
            this.anchor.focus();
            return true;
        }
        return false;
    },
    releaseMode: function(onDispose){
        if (this.$isEditMode) {
            this.selectBtn = this.removeBtn = null;
            this._bindInputFileChange(false);
            this._bindDropArea(false);
        }
        if (this._image) {
            this._image.onload = null;
        }
        this._image = this._progress = this._info = this._legend = null;
        Field.prototype.releaseMode.call(this, onDispose);
    }
});
