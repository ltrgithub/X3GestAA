"use strict";
var _helpers = require('syracuse-core').helpers;
var Field = require('syracuse-ui/lib/field/field').Field;

var _format = {
	$html: function(field) {
		field.setValue = function(value, metaData) {
			if (value !== undefined) {
				this.currentValue = value;
				if (this.$isEditMode) {
					this.setInputValue(this.currentValue || "");
				} else {
					this.displayText = value;
					if (value && !this.$isDetailLinkDisabled && this.$menus && this.$menus.$details) {
						syra_fields.addDetailLink(this, value, this.$menus.$details);
					} else {
						if (this.$item.$rows) {
							this._dataValue.innerHTML = syra_dom.escape(value);
						} else {
							if (this.$field.$format == '$html') {
								this._dataValue.innerHTML = value;
							} else {
								this._dataValue.textContent = value;
							}
						}
					}
				}
			}
			this.applyMetaData(metaData);
		};
	},
	$phone: function(field) {
		field.$inputType = "tel";
		field.$isDetailLinkDisabled = true;
		field.addValueSlot = function() {
			if (!this.$isEditMode) {
				this._dataValue = document.createElement("a");
			}
			syra_fields.addValueSlot(this);
			if (!this.$isEditMode) {
				this._dataValue.className = this._$cssField + "-value-read s-field-phone";
			}
		};
		field.setValue = function(value, metaData) {
			if (value !== undefined) {
				this.currentValue = value;
				if (this.$isEditMode) {
					this.setInputValue(this.currentValue || "");
				} else {
					this.displayText = value;
					if (value) {
						this._dataValue.syraIsDefaultLink = true;
						this._dataValue.href = "tel:" + value;
						this._dataValue.textContent = value;
						if (!this._iconFlag) {
							this._iconFlag = syra_button.add({
								isIndicator: true,
								parent: this,
								iconOnly: true,
								css: " s-icon-phone",
								fontIcon: "field_phone"
							});
						}!this._iconFlag.link.parentNode && this._dataValue.insertBefore(this._iconFlag.link, this._dataValue.firstChild);
					} else {
						syra_button.remove(this._iconFlag);
						this._dataValue.href = "";
						this._dataValue.textContent = value;
					}
					syra_menus.picker.show(this);
				}
			}
			this.applyMetaData(metaData);
		};
	},
	$email: function(field) {
		field.$inputType = "email";
		field.$isDetailLinkDisabled = true;
		field.validate = function(errors, value) {
			if (value) {
				var atpos = value.indexOf("@");
				var dotpos = value.lastIndexOf(".");
				if (atpos < 1 || dotpos < atpos + 2 || dotpos + 2 >= value.length) {
					errors.push(syra_local.fieldEmailInvalid);
				}
			}
		};
		field.addValueSlot = function() {
			if (!this.$isEditMode) {
				this._dataValue = document.createElement("a");
			}
			syra_fields.addValueSlot(this);
			if (!this.$isEditMode) {
				this._dataValue.setAttribute("rel", "nofollow");
				this._dataValue.className = this._$cssField + "-value-read s-field-email";
			}
		};
		field.setValue = function(value, metaData) {
			if (value !== undefined) {
				this.currentValue = value;
				if (this.$isEditMode) {
					this.setInputValue(this.currentValue || "");
				} else {
					this.displayText = value;
					if (value) {
						this._dataValue.syraIsDefaultLink = true;
						this._dataValue.href = "mailto:" + value;
						this._dataValue.textContent = value;
						if (!this._iconFlag) {
							this._iconFlag = syra_button.add({
								isIndicator: true,
								parent: this,
								iconOnly: true,
								css: " s-icon-email",
								fontIcon: "field_email"
							});
						}!this._iconFlag.link.parentNode && this._dataValue.insertBefore(this._iconFlag.link, this._dataValue.firstChild);
					} else {
						syra_button.remove(this._iconFlag);
						this._dataValue.href = "";
						this._dataValue.textContent = value;
					}
					syra_menus.picker.show(this);
				}
			}
			this.applyMetaData(metaData);
		};
	},

	$url: function(field) {
		field.$inputType = "url";
		field.$isDetailLinkDisabled = true;
		field.addValueSlot = function() {
			if (!this.$isEditMode) {
				this._dataValue = document.createElement("a");
			}
			syra_fields.addValueSlot(this);
			if (!this.$isEditMode) {
				this._dataValue.className = this._$cssField + "-value-read s-mn-link";
			}
		};
		field.setValue = function(value, metaData) {
			if (value !== undefined) {
				this.currentValue = value;
				if (this.$isEditMode) {
					this.setInputValue(this.currentValue || "");
				} else {
					if (value) {
						this._dataValue.setAttribute("href", value);
						this._dataValue.textContent = this.displayText = value;
						this._dataValue.syraOnClick = "onUrlClick";
						if (this._core != this._dataValue) {
							this._core.appendChild(this._dataValue);
						}
					} else {
						this._dataValue.parentNode && this._dataValue.parentNode.removeChild(this._dataValue);
					}
					syra_menus.picker.show(this);
				}
			}
			this.applyMetaData(metaData);

		};
		this.onUrlClick = function() {
			this.currentValue &&
				syra_url.history.load({
					$url: this.currentValue,
					target: "blank",
					isDefaultUrl: false
				});
		};
	}
};


function StringField() {}

exports.StringField = _helpers.defineClass(StringField, Field, {
	initialize: function() {
		if (_format[this.$field.$format]) {
			_format[this.$field.$format](this);
		}
	}
});