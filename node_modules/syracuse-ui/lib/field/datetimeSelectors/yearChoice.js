"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _dateApi = require('syracuse-core/lib/types/date');

function YearChoice() {

}

exports.YearChoice = helpers.defineClass(YearChoice, null, {
	create: function(field, parent, dateValue, close) {
		repository[this.id = (field.id + "yearchoice")] = this;
		this.parent = parent;
		this.domItem = document.createElement("nav");
		this.domItem.className = "s-calendar-quick-list";
		this.domItem.syraTool = this.id;
		this.domItem.syraarticle = field.page.id;
		this._close = close;
		this._dateValue = dateValue;
		this._selectedYear = this._dateValue.year;
		var tbody = document.createElement("tbody");

		for (var ii = 0; ii < 6; ii++) {
			var row = document.createElement("tr");
			if (ii == 0) {
				this.addPrevNextCell(row, true);
				this.addPrevNextCell(row, false);
			} else {
				var cuYear = this._dateValue.year + ii - 4;
				row.appendChild(this.drawCell(cuYear, cuYear));
				row.appendChild(this.drawCell(cuYear + 5, cuYear + 5));
			}
			tbody.appendChild(row);
		}
		this.domItem.appendChild(tbody);
		this.domItem.style.display = "none";
		this.parent.insertBefore(this.domItem, this.parent.firstChild);
	},
	addPrevNextCell: function(row, isPrev) {
		var td = document.createElement("td");
		td.className = "s-calendar-my-link-cell";
		var link = document.createElement("a");
		link.className = (link.syraIsPrev = isPrev) ? "s-calendar-prev" : "s-calendar-next";
		link.syraOnClick = "onChangeYear";
		td.appendChild(link);
		row.appendChild(td);
	},
	drawCell: function(value, text) {
		var td = document.createElement("td");
		td.className = "s-calendar-my-item";
		td.syraOnClick = "onSelectYear";
		td.syraValue = value;
		td.textContent = text;
		if (value == this._selectedYear) {
			td.className += " s-calendar-select";
			this.selectedCell = td;
		}
		return td;
	},
	toggle: function(show) {
		if (show) {
			this.domItem.style.display = "";
			$(this.domItem).position({
				my: "left top",
				at: "right top",
				of: $(this.parent)
			});
		} else {
			this.domItem.style.display = "none";
		}
	},
	onChangeYear: function(picker) {
		var step = picker.syraIsPrev ? (-10) : 10;
		for (var ii = 1, jj = this.rows.length; ii < jj; ii++) {
			var cells = this.rows[ii].children();
			for (var mm = 0, kk = cells.length; mm < kk; mm++) {
				var td = cells[mm];
				td.syraValue += step;
				td.textContent = td.syraValue;
				if (td.syraValue == this._selectedYear) {
					td.className += " s-calendar-select";
					this.selectedCell = td;
				}
			}
		}
	},
	onSelectYear: function(picker) {
		if (this.selectedCell) {
			this.selectedCell.className = "s-calendar-my-item";
		}
		(this.selectedCell = picker).className = "s-calendar-my-item s-calendar-select";
		this._selectedYear = picker.syraValue;
		var year = this._selectedYear ? this._selectedYear : this._dateValue.year;
		this._dateValue = _dateApi.fromJsDate(new Date(year, this._dateValue.month, this._dateValue.day));
		this._close(this._dateValue);
	},
	dispose: function() {
		delete repository[this.id];
		this.parent = this.domItem = this._dateValue = this._close = this.selectedCell = null;
	}

});