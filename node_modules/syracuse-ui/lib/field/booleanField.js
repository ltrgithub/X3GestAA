"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function BooleanField() {}

exports.BooleanField = helpers.defineClass(BooleanField, Field, {
	initialize: function() {
		this.statusValues = this.statusValues || {
			on: true,
			off: false
		};
		this.$isDetailLinkDisabled = true;
	},
	dispose: function() {
		this.domTitleSpace = this.statusValues = null;
		Field.prototype.dispose.call(this);
	},
	notifyFieldChange: function(newValue) {
		Field.prototype.notifyFieldChange.call(this, newValue);
		if (this.$isEditMode && this.$$input) {
			var boolValue = (newValue || this.statusValues.off) == this.statusValues.on;
			this.$$input.attr("data-s-selected", newValue);
		}
	},
	getDataValue: function() {
		return (this.$$input.is(":checked") ? this.statusValues.on : this.statusValues.off);
	},
	setDataValue: function(value) {
		var boolValue = (this.currentValue = value || this.statusValues.off) == this.statusValues.on;
		if (this.$isEditMode) {
			this.$$input.attr("checked", boolValue);
			this.$$input.attr("data-s-selected", boolValue);
		} else {
			document.site.toggleClass(this.fieldValue, "s-on", boolValue);
			this.showContextMenus();
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		Field.prototype.applyDesignMetaData.call(this, metaData, designing);
		if (metaData.$isLeftSpaceHidden !== undefined) {
			this.domTitleSpace.style.display = metaData.$isLeftSpaceHidden ? "none" : "";
		}
	},
	render: function() {
		if (this.$item.$inplace) {
			this.domItem.style.textAlign = "center";
		}
		if (this.$isEditMode) {
			this._input = document.createElement("input");
			this._input.setAttribute("type", "checkbox");
			// add attribute to disable browser spellcheck and autocorrect
			document.site.setSpecificAttributes(this._input);
			this._input.className = this.$skinInput + "-boolean";
			this.$$input = $(this.fieldValue.appendChild(this._input));

			if (this.domTitle) {
				this.domTitleSpace = document.createElement("div");
				this.domTitleSpace.className = this.domTitle.className;
				this.domItem.insertBefore(this.domTitleSpace, this.domItem.firstChild);
				var css = " " + this.$skin + "-title-boolean";
				if (this.$item.$css) {
					css += " " + this.$item.$css;
				}
				this.domTitle.className = css;
				this.fieldValue.appendChild(this.domTitle);
			}
			this.fieldValue.className += (" " + this._$cssField + "-edit-boolean");
		} else {
			this.fieldValue.className += (" " + this._$cssField + "-read-boolean");
		}
	},
	_onSetReadOnly: function($isReadOnly) {
		if (this.$$input) {
			if (this.$isReadOnly) {
				this.$$input.attr("disabled", "true");
				if (this.domTitle) {
					document.site.toggleClass(this.domTitle, "s-disabled", true);
				}
			} else {
				if (!this.$isDisabled) {
					this.$$input.removeAttr("disabled");
					if (this.domTitle) {
						document.site.toggleClass(this.domTitle, "s-disabled");
					}
				}
			}
		}
	}
});