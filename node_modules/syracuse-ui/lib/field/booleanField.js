"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/desktop/field/field').Field;

function BooleanField(){
}

exports.BooleanField = helpers.defineClass(BooleanField, Field, {
    initialize: function(){
        this.$isLayoutContentSizeDisabled = true;
        this.statusValues = this.statusValues ||
        {
            on: true,
            off: false
        };
    },
    getInputValue: function(){
        return (this.$$input.is(":checked") ? this.statusValues.on : this.statusValues.off);
    },
    setDataValue: function(value){
        var boolValue = (this.currentValue = value || this.statusValues.off) == this.statusValues.on;
        if (this.$isEditMode) {
            this.$$input.attr("checked", boolValue);
        }
        else {
            document.site.toggleClass(this.$$fieldValue[0], "s-on", boolValue);
        }
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
        if (metaData.$isLeftSpaceHidden !== undefined) {
            this.$$titleSpace[0].style.display = metaData.$isLeftSpaceHidden ? "none" : "";
        }
    },
    render: function(){
        if (this.$item.$inplace) {
            this.$$item[0].style.textAlign = "center";
        }
        if (this.$isEditMode) {
            this.$$input = $("<input type='checkbox'/>").addClass(this.$skinInput + "-boolean").appendTo(this.$$fieldValue);
            if (this.$$title) {
                var title = this.$$title[0];
                var div = document.createElement("div");
                div.className = title.className;
                this.$$titleSpace = $(div).prependTo(this.$$item);
                var css = " " + this.$skin + "-title-boolean";
                if (this.$item.$css) {
                    css += " " + this.$item.$css;
                }
                title.className = css;
                this.$$fieldValue.append(this.$$title);
            }
        }
        else {
            this.$$fieldValue[0].className += (" " + this._$cssField + "-value-boolean");
        }
    },
    setReadOnly: function($isReadOnly){
        this.$isReadOnly = $isReadOnly;
        if (this.$$input) {
            if (this.$isReadOnly) {
                this.$$input.attr("disabled", "true");
            }
            else {
                if (!this.$isDisabled) {
                    this.$$input.removeAttr("disabled");
                }
            }
        }
    },
    hideTitle: function($isTitleHidden){
    
    },
    releaseMode: function(onDispose){
        delete this.$$titleSpace;
        Field.prototype.releaseMode.call(this, onDispose);
    }
});
