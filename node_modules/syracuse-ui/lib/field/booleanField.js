"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function _render(field) {
	if (field.$item.$inplace) {
		field.domItem.style.textAlign = "center";
	}
	if (field.$isEditMode) {
		var css = field._$cssField + "-value-edit-bool";
		if (field.$isEditMode && field.$item.$isGridCell) {
			css = "s-grid-cell-value-edit " + css;
		}
		field._dataValue.className = css;
		syra_fields.checkbox.render(field, field.inputId, field._$cssField + "-checkbox");
		field.checkBox.slot.className += (" " + field.$skin + "-input-boolean");
		field.customStyleTarget = field.checkBox.slot;
		field.input = field.checkBox.input;
		field._dataValue.appendChild(field.checkBox.slot);

		if (field.domTitle) {
			field.domTitleSpace = syra_dom.addDiv(field.domTitle.className);
			field.domItem.insertBefore(field.domTitleSpace, field.domItem.firstChild);
			var css = " " + field.$skin + "-title-boolean";
			if (field.$item.$css) {
				css += " " + field.$item.$css;
			}
			field.domTitle.className = css;
			field._dataValue.appendChild(field.domTitle);
		}
	} else {
		field._dataValue.syraIconCss = field._$cssField + " s-bool-read";
		syra_button.setFontIcon(field._dataValue, "boolean_off");
	}
}



function BooleanField() {}

exports.BooleanField = helpers.defineClass(BooleanField, Field, {
	initialize: function() {
		this.isBooleanField = true;
		this.hasFreeWidth = true;
		this.isEscapePickerDisabled = true;
		this.statusValues = this.statusValues || {
			on: true,
			off: false
		};
		this.$isDetailLinkDisabled = true;
	},
	highlightOnEnter: function(on, event, target) {
		if (!on || (!this.$isReadOnly && !this.$isDisabled)) {
			if (this.checkBox && this.checkBox.icon) {
				syra_dom.toggleClass(this.checkBox.icon, "s-enter", on);
			}
		}
	},
	highlightOnFocus: function(on, event) {
		if (!on || (!this.$isReadOnly && !this.$isDisabled)) {
			if (this.checkBox && this.checkBox.icon) {
				syra_dom.toggleClass(this.checkBox.icon, "s-focus", on);
			}
		}
	},
	setState: function(state) {
		if (state && state.$isMandatory !== undefined) {
			delete state.$isMandatory;
		}
		syra_fields.setState(this, state);
		if (state && state.$isDisabled !== undefined) {
			this.checkBox && syra_dom.toggleClass(this.checkBox.icon, "s-disabled", this.$isDisabled);
		}
	},
	getValue: function() {
		if (this.input) {
			syra_fields.checkbox.setIcon(this, this.input.checked);
			return (this.input.checked ? this.statusValues.on : this.statusValues.off);
		}
		return this.currentValue;
	},
	setValue: function(value, metaData) {
		var boolValue = (this.currentValue = value || this.statusValues.off) == this.statusValues.on;
		if (this.$isEditMode) {
			syra_fields.checkbox.setValue(this, boolValue);
		} else {
			syra_button.setFontIcon(this._dataValue, boolValue ? "boolean_on" : "boolean_off");
			syra_picker.menus.show(this);
		}
		this.applyMetaData(metaData);
	},
	applyDesignMeta: function(metaData, designing) {
		syra_fields.applyDesignMeta(this, metaData, designing);
		if (metaData.$isLeftSpaceHidden !== undefined) {
			syra_dom.hide(this.domTitleSpace, metaData.$isLeftSpaceHidden);
		}
	},
	render: function() {
		_render(this);
	},
	_onSetReadOnly: function($isReadOnly) {
		if (this.input) {
			if (this.$isReadOnly) {
				this.input.disabled = true;
				syra_dom.toggleClass(this.checkBox.icon, "s-disabled", true);
				if (this.domTitle) {
					syra_dom.toggleClass(this.domTitle, "s-disabled", true);
				}
			} else {
				if (!this.$isDisabled) {
					this.input.disabled = false;
					syra_dom.toggleClass(this.checkBox.icon, "s-disabled", false);
					if (this.domTitle) {
						syra_dom.toggleClass(this.domTitle, "s-disabled");
					}
				}
			}
			Field.prototype._onSetReadOnly.call(this, $isReadOnly);
		}
	}
});