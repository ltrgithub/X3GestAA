"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function BooleanField(){
}

exports.BooleanField = helpers.defineClass(BooleanField, Field, {
    initialize: function(){
        this.statusValues = this.statusValues ||
        {
            on: true,
            off: false
        };
        this.$isDetailLinkIgnore = true;
    },
    setFieldWidth: function(){
    },
    getDataValue: function(){
        return (this.$$input.is(":checked") ? this.statusValues.on : this.statusValues.off);
    },
    setDataValue: function(value){
        var boolValue = (this.currentValue = value || this.statusValues.off) == this.statusValues.on;
        if (this.$isEditMode) {
            this.$$input.attr("checked", boolValue);
        }
        else {
            document.site.toggleClass(this.fieldValue, "s-on", boolValue);
        }
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
        if (metaData.$isLeftSpaceHidden !== undefined) {
            this.domTitleSpace.style.display = metaData.$isLeftSpaceHidden ? "none" : "";
        }
    },
    /*onInputFocusin: function(input, event){
     if (this._boolBox) {
     this._boolBox.className = "s-bool-box-focus";
     }
     Field.prototype.onInputFocusin.call(this, input, event);
     },
     onInputFocusout: function(input, event){
     if (this._boolBox) {
     this._boolBox.className = "s-bool-box";
     }
     Field.prototype.onInputFocusout.call(this, input, event);
     },*/
    render: function(){
        if (this.$item.$inplace) {
            this._domItem.style.textAlign = "center";
        }
        if (this.$isEditMode) {
            this._input = document.createElement("input");
            this._input.setAttribute("type", "checkbox");
            this._input.className = this.$skinInput + "-boolean";
            this.$$input = $(this.fieldValue.appendChild(this._input));
            
            /*this._boolBox = document.createElement("div");
             this._boolBox.className = "s-bool-box";
             this.$$input = $(this._boolBox.appendChild(this._input));
             this.fieldValue.appendChild(this._boolBox)
             */
            if (this.domTitle) {
                this.domTitleSpace = document.createElement("div");
                this.domTitleSpace.className = this.domTitle.className;
                $(this.domTitleSpace).prependTo(this.$$item);
                var css = " " + this.$skin + "-title-boolean";
                if (this.$item.$css) {
                    css += " " + this.$item.$css;
                }
                this.domTitle.className = css;
                this.fieldValue.appendChild(this.domTitle);
            }
            this.fieldValue.className += (" " + this._$cssField + "-edit-boolean");
        }
        else {
            this.fieldValue.className += (" " + this._$cssField + "-read-boolean");
        }
    },
    _onSetReadOnly: function($isReadOnly){
        if (this.$$input) {
            if (this.$isReadOnly) {
                this.$$input.attr("disabled", "true");
            }
            else {
                if (!this.$isDisabled) {
                    this.$$input.removeAttr("disabled");
                }
            }
        }
    },
    hideTitle: function($isTitleHidden){
    
    },
    releaseMode: function(onDispose){
        delete this.domTitleSpace;
        Field.prototype.releaseMode.call(this, onDispose);
    }
});
