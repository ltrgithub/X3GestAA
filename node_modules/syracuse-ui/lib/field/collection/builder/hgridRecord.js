"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("../recordArticle").RecordArticle;


function _drawVgridRecord(record){
    var cols = record.builder.table.cols;
    record.orderCols = [];
    record.$isVerticalDirection = false;
    if (record.list.$item.$isRowIndexVisible) {
        var td = record.appendRowIndexCell(record.builder.table.cols.$rowIndex.slot);
        td.setAttribute("data-s-record", record.$recordUuid);
        if (record.list.recordSelector.isRowMode) {
            td.className += " s-list-selector-row";
        }
        record.orderCols.push(td);
    }
    if (record.list.recordSelector.appendToRecord) {
        record.orderCols.push(record.appendRecordSelector(cols.$recordSelector.slot));
        record._selectorCheck.setAttribute("data-s-record", record.$recordUuid);
    }
    
    if (!record.list.$item.$isMenuRecordHidden) {
        record._contextMenusSlot = document.createElement("td");
        record._contextMenusSlot.className = record.builder.gridCss.cell + " " + record.list.$skin + "-actions-cell";
        record.orderCols.push(cols.$contextMenus.slot.appendChild(record._contextMenusSlot));
    }
    
    record.list.parseItems(function($item, $field){
        var td = record.appendFieldCell(cols[$item.$bind].slot, $item, true);
        td.setAttribute("data-s-record", record.$recordUuid);
        if (record.$isEditMode) {
            record.boundFields[$item.$bind][0].$$dataValue[0].style.minWidth = cols[$item.$bind].group.style.width;
        }
        if (record.list.recordSelector.isRowMode) {
            td.className += " s-list-selector-row";
        }
        record.orderCols.push(td);
    });
    
    
}

function reorderVGridRecord(sourceRecord, targetRecord, $insert){
    for (var ii = 0; ii < sourceRecord.orderCols.length; ii++) {
        $(sourceRecord.orderCols[ii])[$insert](targetRecord.orderCols[ii]);
    }
}

function HGridRecord(){
}

exports.HGridRecord = helpers.defineClass(HGridRecord, RecordArticle, {
    notifyReorder: function(targetRecord, $insert){
        if (this.list.$item.$format == "vgrid") {
            reorderVGridRecord(this, targetRecord, $insert);
        }
        else {
            this.$$item[$insert](targetRecord.$$item);
        }
    },
    initializeRecord: function(options){
        options.$item = {
            $layout: {
                $items: this.list.$item.$layout.$items
            }
        };
    },
    remove: function(){
        if (this.list.$item.$format == "grid") {
            this.$$item.remove();
            if (this.builder.cardview) {
                this.builder.cardview.onRecordRemove(this);
            }
        }
    },
    appendRowIndexCell: function(slot){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.rowIndex;
        $(slot.appendChild(td)).text((this.list.$startIndex || 0) + this.$recordIndex);
        if (this.list.$capability.reorder) {
            td.className += " s-list-record-reorder";
        }
        return td;
    },
    appendFieldCell: function(slot, $item, $isBindInputEvent){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.cell;
        document.itemFactory.load($(slot.appendChild(td)), {
            $bind: $item.$bind,
            $isCellChild: true,
            $inplace: true,
            $isBindInputEvent: $isBindInputEvent
        }, this)
        return td;
    },
    appendRecordSelector: function(slot){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.cell;
        this._selectorCheck = this.list.recordSelector.appendToRecord(slot.appendChild(td));
        return td;
    },
    drawBox: function(){
        if (this.list.$item.$format == "vgrid") {
            _drawVgridRecord(this);
        }
        else {
            var self = this;
            
            self.$isVerticalDirection = true;
            self._dataRow = document.createElement("tr");
            self._dataRow.setAttribute("data-s-record", self.$recordUuid);
            self.$$item = $(self.builder._body.appendChild(self._dataRow));
            
            if (self.list.$item.$alternateStyle && self.$recordIndex % 2) {
                self._dataRow.className = self.list.$skin + "-alt";
            }
            
            if (self.list.$item.$isRowIndexVisible) {
                this.appendRowIndexCell(self._dataRow);
            }
            
            if (self.builder.cardview) {
                self.builder.cardview.onRecordDrawBox(self);
            }
            if (!self.list.$item.$isMenuRecordHidden) {
                self._contextMenusSlot = document.createElement("td");
                self._contextMenusSlot.className = self.builder.gridCss.cell + " " + self.list.$skin + "-actions-cell";
                self._dataRow.appendChild(self._contextMenusSlot);
            }
            
            if (self.list.recordSelector.appendToRecord) {
                self.appendRecordSelector(self._dataRow);
            }
            if (self.list.recordSelector.isRowMode) {
                self._dataRow.className = "s-list-selector-row";
            }
            
            self.list.parseItems(function($item, $field){
                self.appendFieldCell(self._dataRow, $item);
            });
        }
    },
    highlightSelection: function(selected){
        if (this.list.$item.$format == "grid") {
            document.site.toggleClass(this.$$item[0], "s-list-record-selected", selected);
            if (this.builder.cardview) {
                this.builder.cardview.onRecordHighlightSelection(this, selected);
            }
        }
        else {
            if (this.orderCols) {
                this.orderCols.forEach(function(td){
                    document.site.toggleClass(td, "s-list-record-selected", selected);
                });
            }
        }
        if (this._selectorCheck) {
            $(this._selectorCheck).attr("checked", selected);
        }
    }
});
