"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

function Selector(){
}

helpers.defineClass(Selector, null, {
    load: function(list){
        this.list = list;
        this.records = {};
        this.bindEvent();
    },
    bindEvent: function(){
        var self = this;
        if (self.list.$item.$selectMode == "row") {
            self.list.$$item.delegate(".s-list-selector-row", "click", function(event){
                self._onSelectRecords(event);
                return false;
            });
        }
        else {
            self.list.$$item.delegate(".s-list-selector,.s-list-selector-all", "click", function(event){
                event.stopPropagation();
                self._onSelectRecords(event);
            });
        }
    },
    clear: function(){
        this.records = {};
        delete this.uuid;
    },
    select: function(uuid, selected){
        var recordArticle = this.list.dataset[uuid];
        recordArticle.highlightSelection(selected);
        if (selected) {
            this.uuid = uuid;
            this.records[uuid] = recordArticle;
        }
        else {
            delete this.uuid;
            delete this.records[uuid];
        }
    },
    _onSelectRecords: function(event){
        document.site.onBeforClick();
        var self = this;
        var options = {
            field: self.list,
            event: event,
            $$selector: $(event.target),
            doEvent: function(){
                self.onSelect(options);
                var page = self.list.getPage();
                if (page.onSelectRecord) {
                    page.onSelectRecord(self.records);
                }
            }
        };
        self.onclick(options);
        self.list.getPage().externalAdapter.onSelectRecordEvent(options);
    },
    dispose: function(){
        delete this.list;
    }
});

function MultiSelector(){
}

function SingleSelector(){
}

function ButtonSelector(){
}

function RowSelector(){
}

var _selectors = {
    multi: helpers.defineClass(MultiSelector, Selector, {
        getWidth: function(){
            return "2em";
        },
        appendToTitle: function(slot){
            slot.className += " s-list-selector-slot";
            var input = document.createElement("input");
            input.setAttribute("type", "checkbox");
            input.className = "s-list-selector-all";
            slot.appendChild(input);
        },
        appendToRecord: function(slot){
            slot.className += " s-list-selector-slot";
            var input = document.createElement("input");
            input.setAttribute("type", "checkbox");
            input.className = "s-list-selector";
            return slot.appendChild(input);
        },
        onclick: function(options){
            options.isSelected = options.$$selector.is(":checked");
            options.uuidTarget = options.$$selector.hasClass("s-list-selector-all") ? null : this.list.findRecordUiid(options.$$selector);
        },
        onSelect: function(options){
            var self = this;
            if (options.$$selector.hasClass("s-list-selector-all")) {
                self.records = {};
                Object.keys(self.list.dataset).forEach(function(uuid){
                    self.select(uuid, options.isSelected);
                });
            }
            else {
                self.select(options.uuidTarget, options.isSelected);
            }
        }
    }),
    single: helpers.defineClass(SingleSelector, Selector, {
        getWidth: function(){
            return "2em";
        },
        appendToTitle: function(slot){
        
        },
        appendToRecord: function(slot){
            slot.className += " s-list-selector-slot";
            var input = document.createElement("input");
            input.setAttribute("type", "radio");
            input.className = "s-list-selector";
            return slot.appendChild(input);
        },
        onclick: function(options){
            options.isSelected = options.$$selector.is(":checked");
            options.uuidTarget = this.list.findRecordUiid(options.$$selector);
        },
        onSelect: function(options){
            if (this.uuid) {
                this.select(this.uuid, false);
            }
            this.select(options.uuidTarget, options.isSelected);
        }
    }),
    button: helpers.defineClass(ButtonSelector, Selector, {
        load: function(list){
            var localize = locale.resources(module)();
            this.text = localize.rsf_select || "Select";
            this.width = (0.3 * this.text.length) + "em";
            Selector.prototype.load.call(this, list);
        },
        getWidth: function(){
            return this.width;
        },
        appendToTitle: function(slot){
        
        },
        appendToRecord: function(slot){
            slot.className += " s-list-selector-button-slot";
            var btn = document.createElement("a");
            btn.className = "s-list-selector s-list-selector-button";
            btn.setAttribute("title", this.text);
            $(slot.appendChild(btn)).text(this.text);
            return btn;
        },
        onclick: function(options){
            options.isSelected = true;
            options.uuidTarget = this.list.findRecordUiid(options.$$selector);
        },
        onSelect: function(options){
            if (this.uuid) {
                this.select(this.uuid, false);
            }
            this.select(options.uuidTarget, options.isSelected);
        }
    }),
    row: helpers.defineClass(RowSelector, Selector, {
        isRowMode: true,
        onclick: function(options){
            options.isSelected = true;
            options.uuidTarget = this.list.findRecordUiid(options.$$selector);
        },
        onSelect: function(options){
            if (this.uuid) {
                if (this.uuid != options.uuidTarget) {
                    this.select(this.uuid, false);
                }
            }
            this.select(options.uuidTarget, true);
        }
    })
};

exports.load = function(list){
    if (list.recordSelector) {
        document.controller.disposeObject(list.recordSelector);
    }
    var selectorClass = _selectors[list.$item.$selectMode];
    if (selectorClass) {
        (list.recordSelector = new selectorClass()).load(list);
    }
    else {
        list.recordSelector = {};
    }
};
