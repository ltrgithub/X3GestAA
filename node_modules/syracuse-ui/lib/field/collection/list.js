"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Pager = require("./pager").Pager;
var Article = require("syracuse-ui/lib/article/article").Article;
var authoringOpener = require("./authoring/authoringOpener");
var RecordReorder = require('./recordReorder').RecordReorder;
var ListContextMenu = require('./listContextMenu').ListContextMenu;
var GraphDecorator = require("./graphDecorator").GraphDecorator;
var recordSelectorFactory = require('./recordSelectorFactory');
var Field = require('syracuse-ui/lib/field/field').Field;
var gridBuilder = require("./builder/hgridBuilder").Builder;


var _formatBuilders = {
    array: require("./builder/arrayBuilder").Builder,
    reference: require("./builder/referenceListBuilder").Builder,
    grid: gridBuilder,
    vgrid: gridBuilder,
    cards: require("./builder/cardListBuilder").Builder,
};

var locale = require('syracuse-core/lib/locale');

var DEFAULT_RECORDS_COUNT = 20;

function DesktopList(){
}

exports.DesktopList = helpers.defineClass(DesktopList, Article, {
    drawBox: function(){
        this._localize = locale.resources(module)();
        if (!this.builder) {
            this.$layoutOptions = document.site.$item.$layoutOptions.list;
            this.createBuilder();
            this._initilializeList();
        }
        this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
            this.inputId = this.id + "-input";
        }
        Field.prototype._initCss.call(this);
        
        var div = document.createElement("div");
        div.className = this._$cssTopField;
        this.$$item = $(this.$$container[0].appendChild(div));
        
        this.appendTitle();
        
        this._createValueContainer();
        
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setState(this.$field);
        this._appendCore();
        this.builder.drawBuilder();
    },
    fetch: function(options, $location){
        var self = this;
        var params = {
            where: self.$where,
            select: self.$select
        };
        if (options) {
            params.startLetter = options.startLetter;
            params.startIndex = options.startIndex;
            params.count = self.$itemsPerPage = options.$itemsPerPage || self.$itemsPerPage;
            if (options.orderBy) {
                params.startIndex = 1;
                self.$orderBy = options.orderBy;
            }
            if (options.filter != null) {
                params.startIndex = 1;
                params.where = self.$where = options.filter != "" ? options.filter : null;
            }
            if (options.queryBindings) {
                if (options.queryBindings.length == 0) {
                    self.$binds.forEach(function($bind){
                        options.queryBindings.push(self.$fields.$bind || $bind);
                    });
                }
                self.select = options.queryBindings.map(function(binding){
                    return binding.replace(/\./g, '/');
                }).join(',');
            }
        }
        params.orderBy = self.$orderBy ? helpers.url.formatOrderBy(self.$orderBy) : null;
        var page = self.getPage();
        page.fetch({
            $updateHitory: page.isMainPage,
            params: params,
            $location: $location
        });
    },
    removeRecords: function(addEmptySlot){
        var self = this;
        self.builder._records.forEach(function(recordArticle){
            delete self.dataset[recordArticle.$uuid];
            self.removeItem(recordArticle);
        });
        self.dataset = {};
        self.builder._records = [];
        if (self.recordSelector && self.recordSelector.clear) {
            self.recordSelector.clear();
        }
        self.builder.emptyListBody(addEmptySlot);
    },
    findRecord: function($$selector){
        var $uuid = this.findRecordUiid($$selector)
        return this.dataset[$uuid];
    },
    findRecordUiid: function($$selector){
        return ($$selector.is("[data-s-record]") ? $$selector : $$selector.closest("[data-s-record]")).attr("data-s-record");
    },
    setMenus: function($menus){
    
    },
    setHelp: function($help){
        Field.prototype.setHelp.call(this, $help);
    },
    setDescription: function($description){
        Field.prototype.setDescription.call(this, $description);
    },
    _createValueContainer: function(){
        Field.prototype._createValueContainer.call(this);
    },
    hideTitle: function($isTitleHidden){
        Field.prototype.hideTitle.call(this, $isTitleHidden);
    },
    getDefaultTitle: function(){
        return Field.prototype.getDefaultTitle.call(this);
    },
    getTitle: function(){
        return Field.prototype.getTitle.call(this);
    },
    setTitle: function($title){
        Field.prototype.setTitle.call(this, $title);
        if (this.$$title) {
            this.$$title[0].style.display = this.titleText.length == 0 ? "none" : "";
        }
    },
    getLocalizedTitle: function($title){
        if ($title && $title.length > 0 && $title[1] == "@") {
            return this.boxParent._renderExpression($title);
        }
        return $title;
    },
    appendTitle: function(){
        if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
            Field.prototype.appendTitle.call(this);
            this.$$title[0].style.display = "none";
        }
    },
    loadRecordSelector: function(){
        recordSelectorFactory.load(this);
    },
    applySettings: function(newData){
        this.$itemsPerPage = newData.$itemsPerPage || this.$itemsPerPage; // || DEFAULT_RECORDS_COUNT;
        this.$startIndex = newData.$startIndex || this.$startIndex || 1;
        this.$orderBy = newData.$orderBy || this.$orderBy || null;
        this.$where = newData.$where || this.$where || null;
        this.$totalResults = newData.$totalResults;
    },
    
    releaseMode: function(onDispose){
        document.controller.disposeObject(this.builder);
        $(this._core).empty();
        delete this.builder;
        delete this.$$title;
        delete this._buttons;
        delete this._mandatoryFlag;
        delete this.$$description;
        delete this._helpFlag;
    },
    _restoreButtonValue: function(){
    },
    
    toggleDiagnose: function(css, show){
    },
    _ensureButtonsVisible: function(){
    },
    parseItems: function(callback){
        var $fields = this.$fields;
        this.$item.$layout.$items.forEach(function($item){
            var $field = $fields[$item.$bind];
            if ($field && !$field.$isHidden && !$item.$isHidden) {
                callback($item, $field);
            }
        });
    },
    applyActionLinkChange: function(resources, record){
        Article.prototype.applyActionLinkChange.call(this, resources, record);
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            if (!this._contextMenu) {
                (this._contextMenu = new ListContextMenu()).create(this);
            }
            if (resources.$links === null) {
                this._contextMenu.clearMenuItems();
            }
        }
    },
    _initilializeList: function(){
        var self = this;
        self.$isLayoutContentSizeDisabled = true;
        var isFilterCapability;
        (self.$binds = Object.keys((self.$fields = self.$prototype.$item.$properties) || {})).forEach(function($bind){
            var $field = self.$fields[$bind];
            $field.$capability = {};
            if ($field.$capabilities) {
                $field.$capabilities.split(",").forEach(function($prop){
                    if ($prop == "filter") {
                        isFilterCapability = true;
                    }
                    $field.$capability[$prop] = true;
                });
            }
        });
        var articleParent = self.getArticleParent();
        self.$recordFacet = articleParent.$item.$recordFacet || self.$facet || "$details";
        switch (articleParent.$facet) {
            case "$lookup":
                self.$item.$selectMode = "button";
                break;
            case "$select":
                self.$item.$selectMode = "multi";
                break;
        }
        
        self.$isEditMode = self.$item.$isEditMode;
        if (self.$isEditMode === undefined) {
            self.$isEditMode = articleParent.$isEditMode;
        }
        
        self.applySettings(self.$prototype);
        self.$totalResults = 0;
        if (isFilterCapability && self.$item.$isQuickFilter !== false) {
            self.$item.$isQuickFilter = true;
        }
        
        if (!self.$item.$layout) {
            self.$item.$layout = {};
        }
        if (!self.$item.$layout.$items) {
            self.$item.$layout.$items = self.$binds.map(function($bind){
                return {
                    $bind: $bind
                };
            });
        }
        if (self.$prototype.$cube) {
            if ((self.$item.$graphMode = self.$item.$graphMode || "both") == "both") {
                self.$item.$graphPosition = "top";
            }
        }
    },
    createBuilder: function(){
        if (this.$field.$item.$type == "application/x-reference") {
            //debugger;
        }
        if (this.$field.$item.$type == "application/x-reference" && !this.$field.$newControl) {
            this.builder = new _formatBuilders.reference();
        }
        else {
            if (!this.$field.$item.$properties || this.$field.$item.$type == "application/x-reference") {
                this.builder = new _formatBuilders.array();
            }
            else {
                this.$item.$format = this.$item.$format || "grid";
                this.builder = new _formatBuilders[this.$item.$format]();
                this.builder.$layoutOptions = this.$layoutOptions.builder[this.$item.$format] || null;
            }
        }
        this.builder.list = this;
        this.builder.initialize();
    },
    reloadBuilder: function(){
        var self = this;
        setTimeout(function(){
            document.controller.disposeObject(self.builder);
            $(self._core).empty();
            self.createBuilder();
            self.builder.drawBuilder();
        }, 20);
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if (onAuthoring) {
            if (metaData.$format !== undefined) {
                this.$item.$format = metaData.$format;
                this.reloadBuilder();
            }
            if (metaData.$isQuickFilter !== undefined) {
                this.$item.$isQuickFilter = metaData.$isQuickFilter;
                this.reloadBuilder();
            }
            if (metaData.$itemsPerPage !== undefined) {
                this.$item.$itemsPerPage = metaData.$itemsPerPage;
                this.onNotifyRecordChange(this.$item.$itemsPerPage = metaData.$itemsPerPage, "$itemsPerPage");
            }
        }
        if (this.$prototype.$cube) {
            if (!this.graphDecorator) {
                this.graphDecorator = new GraphDecorator();
            }
            this.graphDecorator.applyGraphSettings(this, metaData);
        }
        if (metaData.$width) {
            /* this.domValueSlot.style.paddingRight = {
             fit: null,
             small: "75%",
             medium: "50%",
             large: "25%"
             }[this.$item.$width = metaData.$width];*/
            this.$item.$width = metaData.$width;
            var width = this.$item.$width || "100%";
            if (width == "auto") {
            
            }
            else {
                this.$$fieldValue[0].style.width = width;
                this._core.style.width = "100%";
            }
            delete metaData.$width;
        }
        Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
        this.builder.applyDesignMetaData(metaData, onAuthoring);
        return this.applyFieldsMetaData(metaData, onAuthoring);
    },
    applyFieldsMetaData: function(metaData, onAuthoring){
        var self = this;
        var redraw = false;
        if (metaData.$item) {
            if (metaData.$item.$properties) {
                Object.keys(metaData.$item.$properties).forEach(function($bind){
                    var $metaField = metaData.$item.$properties[$bind];
                    var $updated;
                    if (onAuthoring) {
                        self.$item.$layout.$items.some(function($item){
                            if ($item.$bind == $bind) {
                                $updated = $item;
                                return true;
                            }
                            return false;
                        });
                    }
                    else {
                        $updated = self.$fields[$bind];
                    }
                    if ($updated) {
                        Object.keys($metaField).forEach(function($prop){
                            if ($updated[$prop] != $metaField[$prop]) {
                                $updated[$prop] = $metaField[$prop];
                                if ($prop == "$isHidden") {
                                    redraw = true;
                                }
                            }
                        });
                    }
                });
            }
            ["$links", "$actions"].forEach(function($menuType){
                var $newMenus = metaData.$item[$menuType];
                if ($newMenus) {
                    var $menus = self.$prototype.$item[$menuType] = self.$prototype.$item[$menuType] || {};
                    Object.keys($newMenus).forEach(function($bind){
                        var $menu = $menus[$bind] = {};
                        var $newMenu = $newMenus[$bind];
                        Object.keys($newMenu).forEach(function($prop){
                            $menu[$prop] = $newMenu[$prop];
                        });
                    });
                }
            });
        }
        if (redraw && onAuthoring) {
            self.reloadBuilder();
            redraw = false; //compatibility test with Dominique
        }
        return redraw;
    },
    getAuthoringWidget: function(){
        return new authoringOpener.WidgetAuthoring();
    },
    ensureDiagnoseSlot: function(){
        if (!this.$$diagnose && this.$$dataValue) {
            var div = document.createElement("div");
            div.className = "s-field-diagnose";
            this.$$diagnose = $(this.$$dataValue[0].appendChild(div));
        }
        else {
            this.$$diagnose.empty();
        }
    },
    onNotifyRecordChange: function(updatedRecord, $bind){
        var data;
        if ($bind == "$itemsPerPage") {
            this.fetch({
                $itemsPerPage: parseInt(updatedRecord)
            });
        }
        else {
        
            if (updatedRecord.$uuid) {
                updatedRecord.$index = this.dataset[updatedRecord.$uuid].$recordIndex;
                data = [updatedRecord];
            }
            else {
                data = {};
                data[$bind] = updatedRecord;
            }
        }
        return data;
    },
    
    _appendCore: function(){
        var list = this.$$fieldValue[0];
        list.className += " s-list";
        
        this._topbar = document.createElement("div");
        this._topbar.className = "s-list-topbar";
        list.appendChild(this._topbar);
        
        this._core = document.createElement("div");
        this._core.className = "s-list-core";
        list.appendChild(this._core);
        this._appendAuthoringOpener();
        
        this.appendArticleMenus();
        this.appendPager();
    },
    
    setState: function(state){
        Field.prototype.setState.call(this, state);
        if (this.builder._records) {
            if (state.$isReadOnly !== undefined || state.$isDisabled != undefined) {
                var metaData = {
                    $isReadOnly: state.$isReadOnly,
                    $isDisabled: state.$isDisabled
                };
                this.builder._records.forEach(function(record, index){
                    state.$isDisabled
                    record.applyMetaData(metaData);
                });
            }
        }
        if (this.builder._records && this.$capability && state.$isDisabled !== undefined) {
            this.builder._records.forEach(function(record, index){
                record.setState(state);
            });
        }
    },
    onReorder: function(sourceRecord, targetRecord, $insert){
        var newRecords = [];
        this.builder._records.splice(sourceRecord.$recordIndex, 1);
        this.builder._records.forEach(function(record){
            if (record == targetRecord) {
                if ($insert == "insertAfter") {
                    record.$recordIndex = newRecords.length;
                    newRecords.push(record);
                    sourceRecord.$recordIndex = newRecords.length;
                    newRecords.push(sourceRecord);
                }
                else {
                    sourceRecord.$recordIndex = newRecords.length;
                    newRecords.push(sourceRecord);
                    record.$recordIndex = newRecords.length;
                    newRecords.push(record);
                }
            }
            else {
                record.$recordIndex = newRecords.length;
                newRecords.push(record);
            }
        });
        this.builder._records = newRecords;
        sourceRecord.notifyReorder(targetRecord, $insert);
    },
    parseCapabilities: function($capabilities){
        var self = this;
        self.$capability = self.$capability || {};
        if ($capabilities !== undefined) {
            $capabilities.split(",").forEach(function($prop){
                self.$capability[$prop] = true;
            });
            switch (self.getArticleParent().facet) {
                case "$lookup":
                case "$select":
                    delete self.$capability.reorder;
                    delete self.$capability.insert;
                    delete self.$capability["delete"];
                    break;
            }
            if (self.$capability.reorder !== undefined) {
                if (self.$capability.reorder) {
                    self.$item.$isRowIndexVisible = true;
                    if (!this.recordReorder) {
                        (this.recordReorder = new RecordReorder()).setDraggable(this);
                    }
                }
                else {
                    if (this.recordReorder) {
                        document.controller.disposeObject(this.recordReorder);
                        delete this.recordReorder;
                    }
                }
            }
        }
    },
    applyMetaData: function(metaData){
        Field.prototype.applyMetaData.call(this, metaData);
        if (metaData.$type === undefined) {
            if (metaData.$items) {
                this.builder._records.forEach(function(record, index){
                    if (record.applyMetaData) {
                        record.applyMetaData(metaData.$items[index]);
                    }
                });
            }
            this.applyFieldsMetaData(metaData);
        }
        if (metaData && metaData.$capabilities !== undefined) {
            var self = this;
            self.parseCapabilities(metaData.$capabilities);
            if (self.$isEditMode && self.builder._records) {
                self.builder._records.forEach(function(record, index){
                    record.appendCapabilities();
                });
            }
        }
    },
    appendArticleMenus: function(){
        this._contextMenusSlot = document.createElement("div");
        this._contextMenusSlot.className = "s-list-menus-cell";
        this._topbar.appendChild(this._contextMenusSlot);
        
    },
    appendPager: function(){
        if (!this.$item.$isPagerHidden) {
            (this._pager = new Pager(this)).create(this, this._topbar);
        }
    },
    _appendAuthoringOpener: function(){
        if (this.$item.$isQuickDesignerEnabled !== false) {
            this.quickDesigner = new authoringOpener.QuickDesigner();
            this.quickDesigner.appendOpener(this)
        }
    },
    setDataBind: function($resources, record, metaData){
        if (this.getPage().externalAdapter.setDataBind(this, $resources, record, metaData)) {
            if (this.builder.setDataBind) {
                this.builder.setDataBind($resources, record, metaData);
            }
            else {
                var redraw = false;
                var self = this;
                if (metaData) {
                    redraw = this.applyMetaData(metaData);
                }
                if ($resources !== undefined) {
                    self.applySettings(record);
                    self.builder._body.style.display = "none";
                    self.builder.onBeforeDataBinding();
                    if (record.$isDelta) {
                        if (self.$totalResults == 0) {
                            self.builder.emptyListBody();
                        }
                        $resources.forEach(function(record, $recordIndex){
                            var recordArticle = self.dataset[record.$uuid];
                            if (record.$isDeleted) {
                                if (recordArticle) {
                                    self.removeItem(recordArticle, true);
                                    delete self.dataset[record.$uuid];
                                    self.builder._records[$recordIndex] = {
                                        $recordUuid: record.$uuid,
                                        $isDeleted: true
                                    };
                                }
                            }
                            else {
                                if (recordArticle) {
                                    recordArticle.applyChange(record);
                                }
                                else {
                                    self.builder._records.splice(self.builder.appendRecord({
                                        record: record,
                                        $recordIndex: $recordIndex,
                                        isInsert: true
                                    }), 1);
                                }
                            }
                        });
                    }
                    else {
                        if (redraw) {
                            self.builder.onRedrawCore();
                        }
                        self.removeRecords(!($resources && $resources.length > 0));
                        if ($resources) {
                            $resources.forEach(function(record, $recordIndex){
                                self.builder._records.push(self.builder.appendRecord({
                                    record: record,
                                    $recordIndex: $recordIndex
                                }));
                            });
                        }
                    }
                    self.builder.onAfterDataBinding();
                    self.builder._body.style.display = "";
                }
            }
        }
    },
    dispose: function(){
        delete this._menus;
        if (this._contextMenu) {
            document.controller.disposeObject(this._contextMenu);
            delete this._contextMenu;
        }
        if (this.$$item) {
            this.$$item.undelegate();
        }
        Article.prototype.dispose.call(this);
    }
});
