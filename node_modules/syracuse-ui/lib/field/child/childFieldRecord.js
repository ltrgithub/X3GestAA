"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

function ChildFieldRecord() {}

exports.ChildFieldRecord = helpers.defineClass(ChildFieldRecord, Article, {
	onAddMenuItem: function($bind, $menu) {
		if (this.menusSlot) {
			var item = this.page.loadNewItem(null, {
				$bind: $bind,
				$category: "link",
				$skin: this.list.$itemRecordMenuSkin,
				$menu: $menu,
				$icon: {
					$mode: "icon",
					$path: this.list.$iconPath
				}
			}, this);
			if ($bind == "$edit") {
				var $delete = this.menuItems.$delete && this.menuItems.$delete[0];
				this.menusSlot.insertBefore(item.domItem, $delete && $delete.domItem);
			} else {
				this.menusSlot.appendChild(item.domItem);
			}
			delete item.$item.$menu;
		}
	},
	onAddMenuPicker: function(picker) {
		this.menusSlot && this.menusSlot.appendChild(picker);
	},
	ensureDataSet: function() {
		return this.dataset = this.articleParent.ensureDataSet();
	},
	remove: function() {
		syra_site.dom.removeChild(this.domItem);
	},
	drawBox: function() {
		this.$mnPickersCss = this.$mnPickersCss || "s-list-record-picker";
		this.$iconPath = this.list.$iconPath;
		this.$defaultSkinSection = this.$defaultSkinSection || "s-h3";
		this.$defaultSkinBlock = this.$defaultSkinBlock || "s-h4";
		this.domItem = this.list._core;
		this.domItem.syraItem = this.id;
		this.menusSlot = document.createElement("div");
		this.menusSlot.className = this.list.$skin + "-actions-cell";
		this.domItem.appendChild(this.menusSlot);
		var card = this.domItem.appendChild(document.createElement("div"));
		card.className = this.list.$skin + "-record";
		this.page.loadNewItem(card, this.list.$item.$cardItem, this);
	},
	onMenuClick: function(menuItem) {
		var doClick = false;
		var self = this;
		if (!self.$isDisabled && !menuItem.$isDisabled && !menuItem.$isAction) {
			if (menuItem.$sourceBind == "$lookup") {
				self.list.currentSelectRecords = null;
				syra_site.dialogManager.openLookup(self.list.boxParent, {
					article: self.list,
					$url: menuItem.$url,
					onSelectRecord: function(selectedRecords) {
						var record = selectedRecords[Object.keys(selectedRecords)[0]];
						self.list.setDataBind(record.dataset);
						self.page.notifyDataChange(self.list, record.dataset);
					}
				});
				return false;
			}
		}
		return true;
	},
	applyMetaData: function(metaData) {

	},
	dispose: function() {
		this.list = null;
		Article.prototype.dispose.call(this);
	}
});