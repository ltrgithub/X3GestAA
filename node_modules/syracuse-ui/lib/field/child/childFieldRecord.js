"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var ContextMenu = require('syracuse-ui/lib/field/menus/contextMenu').ContextMenu;

function ChildFieldRecord(){
}

exports.ChildFieldRecord = helpers.defineClass(ChildFieldRecord, Article, {
    ensureDataSet: function(){
        return this.dataset = this.articleParent.ensureDataSet();
    },
    remove: function(){
        this.$$item.remove();
    },
    drawBox: function(){
        this.$$item = $(this.list._core);
        this._contextMenusSlot = document.createElement("div");
        this._contextMenusSlot.className = this.list.$skin + "-actions-cell";
        this.list._core.appendChild(this._contextMenusSlot);
        var card = this.list._core.appendChild(document.createElement("div"));
        card.className = this.list.$skin + "-record";
        this.page.loadNewItem($(card), this.list.$item.$cards, this);
    },
    applyActionLinkChange: function(resources){
        Article.prototype.applyActionLinkChange.call(this, resources);
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            if (!this.contextMenu) {
                (this.contextMenu = new ChildFieldContextMenu()).create(this);
            }
            if (resources.$links === null && this.contextMenu) {
                this.contextMenu.clearMenuItems();
            }
        }
    },
    applyMetaData: function(metaData){
    
    },
    dispose: function(){
        delete this.list
        delete this.page;
        if (this.contextMenu) {
            document.controller.disposeObject(this.contextMenu);
            delete this.contextMenu;
        }
        Article.prototype.dispose.call(this);
    }
});


function ChildFieldContextMenu(){
}

ChildFieldContextMenu = helpers.defineClass(ChildFieldContextMenu, ContextMenu, {
    clearMenuItems: function(){
        this._isMenuBtnVisible = false;
        this.$skinMenus = "s-record-menus";
        this._menusBtnSlot.style.display = "none";
    },
    create: function(field){
        var self = this
        ContextMenu.prototype.create.call(this, field, {
            onBeforeAddMenuItem: function($menuItem){
                if (!self._isMenuBtnVisible) {
                    self._menusBtnSlot.style.display = "";
                    self._isMenuBtnVisible = true;
                    if ($menuItem.$bind == "$lazyload") {
                        return false;
                    }
                }
            }
        });
    },
    appendOpener: function(){
        this.menuPicker = document.createElement("a");
        this.menuPicker.className = "s-list-menus-btn s-close";
        var title = this.field.list._localize.mn_actions;
        this.menuPicker.textContent = title;
        this.menuPicker.setAttribute("data-s-picker", "menus");
        this.menuPicker.setAttribute("title", title);
        
        this._isMenuBtnVisible = false;
        this.menuPicker.setAttribute("id", this.field.id + "-menu-btn");
        (this._menusBtnSlot = document.createElement("div")).className = "s-quick-actions-slot";
        this._menusBtnSlot.style.display = "none";
        this.field._contextMenusSlot.appendChild(this._menusBtnSlot).appendChild(this.menuPicker);
    },
    removeOpener: function(){
        if (this.menuPicker) {
            document.site.emptyDom(this.field._contextMenusSlot);
            delete this.menuPicker;
        }
    }
});




