"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

function ChildFieldRecord(){
}

exports.ChildFieldRecord = helpers.defineClass(ChildFieldRecord, Article, {
    ensureDataSet: function(){
        return this.dataset = this.articleParent.ensureDataSet();
    },
    remove: function(){
        this.$$item.remove();
    },
    drawBox: function(){
        this.$$item = $(this.list._core);
        this._menusBoxSlot = document.createElement("div");
        this._menusBoxSlot.className = this.list.$skin + "-actions-cell";
        this.list._core.appendChild(this._menusBoxSlot);
        var card = this.list._core.appendChild(document.createElement("div"));
        card.className = this.list.$skin + "-record";
        this.page.loadNewItem(card, this.list.$item.$cards, this);
    },
    onMenuClick: function(menuItem){
        var doClick = false;
        var self = this;
        if (!self.$isDisabled && !menuItem.$isDisabled && !menuItem.$isAction) {
            if (menuItem.$bind == "$lookup") {
                self.list.currentSelectRecords = null;
                self.list.boxParent.openDialog({
                    article: self.list,
                    $url: menuItem.$url,
                    onSelectRecord: function(selectedRecords){
                        var record = selectedRecords[Object.keys(selectedRecords)[0]];
                        self.list.setDataBind(record.dataset);
                        self.page.notifyDataChange(self.list, record.dataset);
                    }
                });
                return false;
            }
        }
        return true;
    },
    _ensureMenusBox: function(){
        var self = this;
        if (!self._menusBox) {
            self._menusBox = self.page.loadNewItem(self._menusBoxSlot, {
                $category: "menus",
                $skin: "s-record-actions",
                $itemIcon: {
                    $mode: "icon",
                    $path: "list/s-actions-"
                },
                $layout: {
                    $items: [{
                        $bind: "$lookup"
                    }, {
                        $isMenusBag: true,
                        $category: "menus",
                        $title: "-",
                        //  $isBoxCollapsable: true,
                        // $isPopupContent: true,
                        $id: self.id + "-menu-picker",
                        $skin: "s-record-menus",
                        $itemSkin: "s-field-menus-link",
                        onEnsureVisibility: function(menuGroup, $menuItemBind, menuItem){
                            if ($menuItemBind == "$lazyload") {
                                menuItem.hide(true);
                            }
                        }
                    }]
                },
                onEnsureVisibility: function(menuGroup, $menuItemBind, menuItem){
                    if (!menuGroup.menuGroupRoot.$isPickerVisible) {
                        self._menusBoxSlot.style.display = "";
                        menuGroup.menuGroupRoot.$isPickerVisible = true;
                    }
                    
                }
            }, self);
            self._menusBox.contextField = self;
            self.menuPicker = self.idMap[self.id + "-menu-picker"];
        }
        return self._menusBox;
    },
    applyActionLinkChange: function(resources){
        Article.prototype.applyActionLinkChange.call(this, resources);
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            this._ensureMenusBox();
            if (resources.$links === null && this._menusBox) {
                this._menusBox.unload();
                this._menusBox = null;
            }
        }
    },
    applyMetaData: function(metaData){
    
    },
    dispose: function(){
        delete this.list
        delete this.page;
        if (this._menusBox) {
            document.controller.disposeObject(this._menusBox);
        }
        this._menusBox = null;
        Article.prototype.dispose.call(this);
    }
});
