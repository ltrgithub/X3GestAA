"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

var Field = require('syracuse-ui/lib/field/field').Field;
var ChildFieldRecord = require('./childFieldRecord').ChildFieldRecord;

var locale = require('syracuse-core/lib/locale');

function ChildField(){
}

exports.ChildField = helpers.defineClass(ChildField, Article, {
    getDataSet: function(){
        return this.getArticleParent().dataset[this.$item.$bind];
    },
    ensureDataSet: function(){
        var dataSet = this.getDataSet();
        if (!dataSet) {
            dataSet = this.getArticleParent().dataset[this.$item.$bind] = [];
        }
        return dataSet;
    },
    drawBox: function(){
        this._localize = locale.resources(module)();
        this.$skin = this.$item.$skin || "s-child";
        this.$layoutOptions = document.site.$item.$layoutOptions.list;
        
        this.$fieldProperties = this.$prototype.$item.$properties || {};
        
        if ((this.$isEditMode = this.$item.$isEditMode) === undefined) {
            this.$isEditMode = this.getArticleParent().$isEditMode;
        }
        
        if (!this.$item.$layout) {
            this.$item.$layout = {};
        }
        if (!this.$item.$layout.$items) {
            this.$item.$layout.$items = Object.keys(this.$fieldProperties).map(function($bind){
                return {
                    $bind: $bind
                };
            });
        }
        this._domItem = document.createElement("div");
        this._domItem.className = this.$skin + "-field";
        this.$$item = $(this.$$container[0].appendChild(this._domItem));
        
        this.appendTitle();
        
        this._core = this.domValueSlot = document.createElement("div");
        this.domValueSlot.className = this.$skin + "-core";
        this.$$fieldValue = this.$$dataValue = $(this._domItem.appendChild(this._core));
        
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setState(this.$field);
        
        this.$item.$cards = (typeof(this.$item.$cards) === "object") ? this.$item.$cards : {
            $layout: {
                $items: this.$item.$layout.$items
            }
        };
        this.applyDesignMetaData(this.$item, false);
        
        this._record = new ChildFieldRecord();
        this._record.$layoutOptions = this.$layoutOptions.$cards;
        this._record.$isEditMode = this.$isEditMode;
        this._record.list = this;
        this._record.$prototype = this.$prototype.$item;
        document.itemFactory.initializeItem(this._record, {
            $category: "section",
            $layout: {
                $items: this.$item.$layout.$items
            }
        }, this);
        this._record.loadBox();
        
        this.boxParent.getArticle().bind(this, this.$item.$bind);
    },
    notifyChange: function($bind, updatedRecord,isNotifyOnly){
    },
    setHelp: function($help){
        if ($help != undefined) {
            this.$help = $help;
            if (this.$$title && this.titleText.length > 0) {
                if (this.$help) {
                    if (!this._helpFlag) {
                        this._helpFlag = document.createElement("a");
                        this._helpFlag.className = "s-field-help-flag";
                        this.$$title[0].appendChild(this._helpFlag);
                    }
                }
                else {
                    if (this._helpFlag) {
                        document.site.removeDomChild(this._helpFlag);
                        delete this._helpFlag;
                    }
                }
            }
        }
    },
    toggleEditMode: function($isEditMode){
    },
    setDescription: function($description){
        Field.prototype.setDescription.call(this, $description);
    },
    hideTitle: function($isTitleHidden){
        Field.prototype.hideTitle.call(this, $isTitleHidden);
    },
    getDefaultTitle: function(){
        return Field.prototype.getDefaultTitle.call(this);
    },
    getTitle: function(){
        return Field.prototype.getTitle.call(this);
    },
    setTitle: function($title){
        Field.prototype.setTitle.call(this, $title);
        if (this.$$title) {
            this.$$title[0].style.display = this.titleText.length == 0 ? "none" : "";
        }
    },
    getLocalizedTitle: function($title){
        if ($title && $title.length > 0 && $title[1] == "@") {
            return this.boxParent._renderExpression($title);
        }
        return $title;
    },
    appendTitle: function(){
        if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
            var label = document.createElement("label");
            label.className = this.$skin + "-title";
            this.$$title = $(this._domItem.appendChild(label));
        }
    },
    
    releaseMode: function(onDispose){
        $(this._core).empty();
        delete this.$$title;
        delete this._buttons;
        delete this._mandatoryFlag;
        delete this.$$description;
        delete this._helpFlag;
    },
    _restoreButtonValue: function(){
    },
    toggleDiagnose: function(css, show){
    },
    _ensureButtonsVisible: function(){
    },
    setMenus: function($menus){
        if ($menus) {
            this._record.applyChange({
                $links: $menus.$links,
                $actions: $menus.$actions
            });
        }
    },
    applyActionLinkChange: function(resources, record){
        this._record.applyActionLinkChange(resources, record);
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if (onAuthoring) {
        
        }
        return Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
    },
    drawDiagnose: function($diagnose, severityGroup){
        var html = document.createElement("a");
        html.setAttribute("data-s-menu", this.id);
        html.setAttribute("data-s-article", this.boxParent.getArticle().id);
        html.className = "s-diag-view-msg-link";
        severityGroup.drawLabel($diagnose).prepend($(html).text(this.$field.$title + ":")).appendTo(severityGroup.$$group);
        
        html = document.createElement("label");
        html.className = "s-field-diagnose-msg-" + severityGroup.severity;
        html.innerHTML = document.site.formatHTMLMessage($diagnose.message);
        this.domDiagnose.appendChild(html);
    },
    emptyDiagnoseSlot: function(){
        if (this.domDiagnose) {
            document.site.emptyDom(this.domDiagnose);
            this.domDiagnose.style.visibility = "hidden";
        }
    },
    ensureDiagnoseSlot: function(){
        if (!this.domDiagnose && this.$$dataValue) {
            this.domDiagnose = document.createElement("div");
            this.domDiagnose.className = "s-field-diagnose";
            this.$$dataValue.prepend(this.domDiagnose);
        }
        else {
            document.site.emptyDom(this.domDiagnose);
        }
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        if (state.$isReadOnly !== undefined || state.$isDisabled != undefined) {
            this._record.applyMetaData({
                $isReadOnly: state.$isReadOnly,
                $isDisabled: state.$isDisabled
            });
        }
    },
    _applyMetaDataToItem: function(metaData){
        var self = this;
        ["$isReadOnly", "$isEditMode", "$isDisabled"].forEach(function($state){
            if (metaData[$state] !== undefined) {
                metaData.$item = metaData.$item || {};
                var $properties = metaData.$item.$properties = metaData.$item.$properties || {};
                Object.keys(self.$prototype.$item.$properties).forEach(function($bind){
                    ($properties[$bind] = $properties[$bind] || {})[$state] = metaData[$state];
                });
            }
        });
    },
    applyMetaData: function(metaData){
        Field.prototype.applyMetaData.call(this, metaData);
        if (metaData.$isReadOnly !== undefined || metaData.$isEditMode !== undefined ||
        metaData.$isDisabled !== undefined) {
            this._applyMetaDataToItem(metaData);
        }
        if (metaData.$item) {
            if (metaData.$item.$diagnoses !== undefined) {
                document.site.showDiagnoses({
                    field: this,
                    $diagnoses: metaData.$item.$diagnoses
                }, this.boxParent);
            }
            this._record.applyChange(metaData.$item);
        }
    },
    setDataBind: function(dataRecord, parentDataRecord, metaData){
        if (this.getPage().externalAdapter.setDataBind(this, dataRecord, parentDataRecord, metaData)) {
            if (metaData) {
                this.applyMetaData(metaData);
            }
            if (dataRecord !== undefined) {
                this._record.applyChange(dataRecord);
            }
        }
    },
    dispose: function(){
        if (this.$$item) {
            this.$$item.undelegate();
        }
        delete this._record;
        Article.prototype.dispose.call(this);
    }
});
