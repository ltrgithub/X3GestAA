"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var Field = require('syracuse-ui/lib/field/field').Field;
var ChildFieldRecord = require('./childFieldRecord').ChildFieldRecord;

function ChildField() {}

exports.ChildField = helpers.defineClass(ChildField, Article, {
	ensureDataSet: function() {
		return this.dataset = this.setDatasetValue(this.getDatasetValue() || {});
	},
	getDatasetValue: function() {
		return Field.prototype.getDatasetValue.call(this);
	},
	setDatasetValue: function(value) {
		return Field.prototype.setDatasetValue.call(this, value);
	},
	ensureLayoutMode: function() {
		Field.prototype.ensureLayoutMode.call(this);
	},
	onItemInOut: function(on, event, target) {
		syra_menus.button.highlightFieldPickers(this.record, on);
	},
	drawBox: function() {
		syra_menus.menus.initialize(this);
		this.$iconPath = this.$iconPath || this.$item.$iconPath || "page/s-list-";
		this.isChildField = true;
		this.$skin = this.$item.$skin || "s-child";
		this.$fields = this.$prototype.$item.$properties || {};
		Field.prototype.ensureEditMode.call(this);
		if (!this.$item.$layout) {
			this.$item.$layout = {};
		}
		if (!this.$item.$layout.$items) {
			this.$item.$layout.$items = [];
			var $binds = Object.keys(this.$fields);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				if (!this.$fields[$binds[ii]].$isExcluded) {
					this.$item.$layout.$items.push({
						$bind: $binds[ii]
					});
				}
			}
		}
		this.domItem = syra_dom.addDiv(this.$skin + "-field", this.layoutSlot);
		this.domItem.syrainout = this.id;

		this.appendTitle();

		this._core = this._dataValue = this.domItem;

		this.setTitle(this.$item.$title || this.$field.$title);
		this.setDescription(this.$item.$description || this.$field.$description);
		this.setState(this.$field);
		this.$item.$cardItem = this.$item.$cardItem || {
			$layout: {
				$items: this.$item.$layout.$items
			}
		};
		this.applyDesignMetaData(this.$item, false);

		this.record = new(this.ChildRecordClass || ChildFieldRecord)();
		this.record.arrayLevel = "record";
		this.record.isChildFieldRecord = true;
		this.record.isRecordArticle = true;
		this.record.$isEditMode = this.$isEditMode;
		this.record.list = this;
		this.record.$prototype = this.$prototype.$item;
		this.page.initializeNewItem(this.record, {
			$category: "section",
			$layout: {
				$items: this.$item.$layout.$items
			}
		}, this);
		this.record.loadBox();
		this.articleParent.bind(this, this.$item.$bind);
	},
	setDescription: function($description) {
		Field.prototype.setDescription.call(this, $description);
	},
	hideTitle: function($isTitleHidden) {
		Field.prototype.hideTitle.call(this, $isTitleHidden);
	},
	getTitle: function() {
		return Field.prototype.getTitle.call(this);
	},
	setTitle: function($title) {
		Field.prototype.setTitle.call(this, $title);
		this.domTitle && syra_dom.hide(this.domTitle._list, this.getTitle().length == 0);
	},
	appendTitle: function() {
		if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
			this.header = document.createElement("header");
			this.header.className = this.$skin + "-header";
			this.domTitle = document.createElement("label");
			this.domTitle.className = this.$skin + "-title";
			this.header.appendChild(this.domTitle);
			this.domItem.appendChild(this.header);
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		return Field.prototype.applyDesignMetaData.call(this, metaData, designing);
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
		if (state.$isReadOnly !== undefined || state.$isDisabled != undefined) {
			this.record.applyMetaData({
				$isReadOnly: state.$isReadOnly,
				$isDisabled: state.$isDisabled
			});
		}
	},
	showItem: function(show) {
		Field.prototype.showItem.call(this, show);
	},
	applyMetaData: function(metaData) {
		Field.prototype.applyMetaData.call(this, metaData);
		if (metaData.$isReadOnly !== undefined || metaData.$isEditMode !== undefined || metaData.$isDisabled !== undefined) {
			metaData.$item = metaData.$item || {};
			var $props = metaData.$item.$properties = metaData.$item.$properties || {};
			var $binds = Object.keys(this.$prototype.$item.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				if (!$props[$bind]) {
					$props[$bind] = {};
				}
				if (metaData.$isReadOnly !== undefined) {
					$props[$bind].$isReadOnly = metaData.$isReadOnly;
				}
				if (metaData.$isEditMode !== undefined) {
					$props[$bind].$isEditMode = metaData.$isEditMode;
				}
				if (metaData.$isDisabled !== undefined) {
					$props[$bind].$isDisabled = metaData.$isDisabled;
				}
			}
		}
		if (metaData.$item) {
			if (metaData.$item.$diagnoses !== undefined) {
				syra_diagnose.showDiagnoses({
					$diagnoses: metaData.$item.$diagnoses
				}, this);
			}
			this.record.applyChange(metaData.$item);
		}
	},
	setDataBind: function(value, parentDataRecord, metaData) {
		this.ensureDataSet();

		if (this.page.externalAdapter.setDataBind(this, value, parentDataRecord, metaData)) {
			if (metaData) {
				this.applyMetaData(metaData);
			}
			if (value !== undefined) {
				if (value === null) {
					value = {};
					var $binds = Object.keys(this.$fields);
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						value[$binds[ii]] = null;
					}
				}
				this.record.applyChange(value);
			}
		}
	},
	getDataValue: function() {
		return this.ensureDataSet();
	},

	dispose: function() {
		syra_dom.empty(this._core);
		Article.prototype.dispose.call(this);
	}
});