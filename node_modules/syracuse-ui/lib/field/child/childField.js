"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var Field = require('syracuse-ui/lib/field/field').Field;
var ChildFieldRecord = require('./childFieldRecord').ChildFieldRecord;

function ChildField() {}

exports.ChildField = helpers.defineClass(ChildField, Article, {
	ensureDataSet: function() {
		return this.dataset = this.setDatasetValue(this.getDatasetValue() || {});
	},
	getDatasetValue: function() {
		return Field.prototype.getDatasetValue.call(this);
	},
	setDatasetValue: function(value) {
		return Field.prototype.setDatasetValue.call(this, value);
	},
	drawBox: function() {
		if (!this.articleParent.childLists) {
			this.articleParent.childLists = [];
		}
		this.articleParent.childLists.push(this);
		syra_menus.initialize(this);
		this.$iconPath = this.$iconPath || this.$item.$iconPath || "page/s-list-";
		this.$itemRecordMenuSkin = this.$itemRecordMenuSkin || "s-list-record-picker";
		this.isChildField = true;
		this.$skin = this.$item.$skin || "s-child";
		this.$fields = this.$prototype.$item.$properties || {};
		Field.prototype.ensureEditMode.call(this);
		if (!this.$item.$layout) {
			this.$item.$layout = {};
		}
		if (!this.$item.$layout.$items) {
			this.$item.$layout.$items = [];
			var $binds = Object.keys(this.$fields);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				if (!this.$fields[$binds[ii]].$isExcluded) {
					this.$item.$layout.$items.push({
						$bind: $binds[ii]
					});
				}
			}
		}
		this.domItem = document.createElement("div");
		this.domItem.className = this.$skin + "-field";
		this.layoutSlot.appendChild(this.domItem);

		this.appendTitle();

		this._core = this._dataValue = document.createElement("div");
		this._dataValue.className = this.$skin + "-core";
		this.domItem.appendChild(this._core);

		this.setTitle(this.$item.$title || this.$field.$title);
		this.setDescription(this.$item.$description || this.$field.$description);
		this.setState(this.$field);
		this.$item.$cardItem = this.$item.$cardItem || {
			$layout: {
				$items: this.$item.$layout.$items
			}
		};
		this.applyDesignMetaData(this.$item, false);

		this.record = new(this.ChildRecordClass || ChildFieldRecord)();
		this.record.arrayLevel = "record";
		this.record.isChildFieldRecord = true;
		this.record.isRecordArticle = true;
		this.record.$isEditMode = this.$isEditMode;
		this.record.list = this;
		this.record.$prototype = this.$prototype.$item;
		this.page.initializeNewItem(this.record, {
			$category: "section",
			$layout: {
				$items: this.$item.$layout.$items
			}
		}, this);
		this.record.loadBox();
		this.articleParent.bind(this, this.$item.$bind);
	},
	setDescription: function($description) {
		Field.prototype.setDescription.call(this, $description);
	},
	hideTitle: function($isTitleHidden) {
		Field.prototype.hideTitle.call(this, $isTitleHidden);
	},
	getDefaultTitle: function() {
		return Field.prototype.getDefaultTitle.call(this);
	},
	getTitle: function() {
		return Field.prototype.getTitle.call(this);
	},
	setTitle: function($title) {
		Field.prototype.setTitle.call(this, $title);
		if (this.domTitle) {
			this.domTitle.style.display = this.getTitle().length == 0 ? "none" : "";
		}
	},
	appendTitle: function() {
		if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
			this.domTitle = document.createElement("label");
			this.domTitle.className = this.$skin + "-title";
			this.domItem.appendChild(this.domTitle);
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		return Field.prototype.applyDesignMetaData.call(this, metaData, designing);
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
		if (state.$isReadOnly !== undefined || state.$isDisabled != undefined) {
			this.record.applyMetaData({
				$isReadOnly: state.$isReadOnly,
				$isDisabled: state.$isDisabled
			});
		}
	},
	showItem: function(show) {
		Field.prototype.showItem.call(this, show);
	},
	applyMetaData: function(metaData) {
		Field.prototype.applyMetaData.call(this, metaData);
		if (metaData.$isReadOnly !== undefined || metaData.$isEditMode !== undefined || metaData.$isDisabled !== undefined) {
			metaData.$item = metaData.$item || {};
			var $props = metaData.$item.$properties = metaData.$item.$properties || {};
			var $binds = Object.keys(this.$prototype.$item.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				if (!$props[$bind]) {
					$props[$bind] = {};
				}
				if (metaData.$isReadOnly !== undefined) {
					$props[$bind].$isReadOnly = metaData.$isReadOnly;
				}
				if (metaData.$isEditMode !== undefined) {
					$props[$bind].$isEditMode = metaData.$isEditMode;
				}
				if (metaData.$isDisabled !== undefined) {
					$props[$bind].$isDisabled = metaData.$isDisabled;
				}
			}
		}
		if (metaData.$item) {
			if (metaData.$item.$diagnoses !== undefined) {
				syra_site.showDiagnoses({
					$diagnoses: metaData.$item.$diagnoses
				}, this);
			}
			this.record.applyChange(metaData.$item);
		}
	},
	setDataBind: function(dataRecord, parentDataRecord, metaData) {
		this.ensureDataSet();

		if (this.page.externalAdapter.setDataBind(this, dataRecord, parentDataRecord, metaData)) {
			if (metaData) {
				this.applyMetaData(metaData);
			}
			if (dataRecord !== undefined) {
				this.record.applyChange(dataRecord);
			}
		}
	},
	resizeArticle: function(doResize, boxParent) {
		this.record && this.record.resizeArticle(doResize);
	},
	getDataValue: function() {
		return this.ensureDataSet();
	},
	validate: function() {
		return this.record.validateFields();
	},
	dispose: function() {
		if (this.articleParent && this.articleParent.childLists) {
			var found = this.articleParent.childLists.indexOf(this);
			if (found >= 0) {
				this.articleParent.childLists.splice(found, 1);
			}
		}
		syra_site.dom.empty(this._core);
		Article.prototype.dispose.call(this);
	}
});