"use strict";
var helpers = require('syracuse-core/lib/helpers');
var datetime = require('syracuse-core/lib/types/datetime');
var cubeHelper = require('syracuse-ui/lib/field/cube/cubeHelper');
var ChartArticle = require("./chartArticle").ChartArticle;
var httpHelper = require("syracuse-sdata/lib/httpHelper");
var TabularChartRecord = require('./tabularChartRecord').TabularChartRecord;
require('syracuse-ui/deps/highcharts/highcharts.src');
require('syracuse-ui/deps/highcharts/highcharts-more.src');
// draggable-legend is not part of the official delivery but provide under MIT License by Torstein Hønsi the creator of highcharts
// http://jsfiddle.net/jlbriggs/bA6UM/
require('syracuse-ui/deps/highcharts/draggable-legend');
require('syracuse-ui/deps/highcharts/modules/exporting.src');
Highcharts.theme = require('syracuse-ui/themes/desktop/sage/highcharts/theme').theme;
var debug = false;
Highcharts.setOptions(Highcharts.theme);
var forEachKey = helpers.object.forEachKey,
	objectCopy = helpers.object.copy,
	objectClone = helpers.object.clone,
	stringify = helpers.object.stringify;

var _style = (function() {
	var map = {
		xy: "line",
		point: "scatter",
		stick: "column",
		radar: "spiderweb"
	};

	return function($style) {
		return $style && (map[$style] || $style);
	};
})();

var _merge = Highcharts.merge;

var _formatApi = require('syracuse-ui/lib/field/formatApi');

function delayed(obj, name, cb, delay) {
	var tm = "timer_" + name;
	if (obj[tm]) clearTimeout(obj[tm]);
	obj[tm] = setTimeout(cb, delay || 100);
}

function mergeChanges(update, chartSerie, serie) {
	["name", "type", "color", "visible"].map(function(key) {
		if (chartSerie[key] !== serie[key]) {
			update[key] = serie[key];
		}
	});
}

function TabularChart() {
	this.useLogarithmicAxis = false;
}

exports.TabularChart = helpers.defineClass(TabularChart, ChartArticle, {
	resizeArticle: function() {
		if (this._chart && this._chart.container) {
			var self = this;
			if (this.resizeTimer) clearTimeout(this.resizeTimer);
			this.resizeTimer = setTimeout(function() {
				debug && self._chart && console.log("HighCharts.resizeTimer " + self.id + ": About to resize - chart.isResizing=" + (self._chart && self._chart.isResizing) + " , size=(" + self.layoutSlot.clientWidth + ", " + self.layoutSlot.style.clientHeight + ")");
				debug && self._chart && console.log("    ... display=" + self.layoutSlot.style.display);

				if (self._chart && self._chart.container && !self._chart.isResizing) {
					if (self.layoutSlot.clientWidth) {
						var height = self._chart.chartHeight || self.layoutSlot.style.clientHeight || self.layoutSlot.clientHeight;
						debug && self._chart && console.log("HighCharts.resizeTimer " + self.id + ": setSize(" + self.layoutSlot.clientWidth + "," + height + ")");
						self._chart.setSize(self.layoutSlot.clientWidth, height);
						self._redraw();
					}
				}
			}, 200);
		}
	},
	__applyDesignMetaData: function(metadata) {
		this._processMeasures(metadata);

		if (!this._chart) {
			return;
		}

		var self = this,
			meta = self._meta,
			chart = self._chart,
			designMeta = this.currentMetaData,
			needRefresh = false,
			needInverted = false;

		if (meta && designMeta.$style) {
			this._setStyle(designMeta.$style);
		}
		if (meta && designMeta.$cube && designMeta.$cube.$measures) {
			forEachKey(designMeta.$cube.$measures, function(k, m) {
				var s = meta.series[k],
					serie = chart.get(s.options.id);

				debug && console.log("HighCharts.applyDesignMetaData: " + s.options.id + ", meta=" + stringify(m));
				if (serie) { //Hack lv to avoid error. waiting best fix if necessary (change style is not used for this)
					if (m.$style || m.$color) {
						needRefresh = true;
						var newOpt = {};
						if (m.$style) {
							newOpt.type = _style(m.$style);
						}
						if (m.$color) {
							newOpt.color = m.$color;
						}
						serie.update(newOpt, false);
					}
				}
			});
			// Default Highcharts behavior is to invert axes if a serie of bar type is present among all series
			chart.series.forEach(function(s) {
				needInverted = needInverted || s.type === "bar";
			});
			if (chart.inverted ? !needInverted : needInverted) {
				this.recreateChart();
			} else {
				needRefresh && this._redraw();
			}
		}
	},

	recreateChart: function() {
		this._chart.destroy();
		this._chart = null;
		this._createChart(this._settingsFromValue());
	},

	__drawBox: function() {
		this._processMeta = this.__processMeta;

		this.dataset = null;
		this.designGraphType = "cube$highCharts";
		this.$localization = this.articleParent.$prototype.$localization;
		this._localize = document.site.localize;
		// debug && console.log("HighCharts.drawBox " + this.id);
		// this._cube = cube(this);
		this._initializeMeta();
		this._createMenuContainer();

		if (!this.$item.$isListEmbeded) {
			this.articleParent.bind(this, this.$item.$bind);
		}
	},

	_mergeMetaData: function(metadata) {
		var m = {};
		if (metadata && metadata.$cube) m.$cube = metadata.$cube;
		if (metadata && metadata.$axes) m.$axes = metadata.$axes;
		if (metadata && metadata.$style) m.$style = metadata.$style;
		if (metadata && metadata.$color) m.$color = metadata.$color;
		this.currentMetaData = _merge(this.currentMetaData || {}, m);
		return this.currentMetaData;
	},

	__setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		debug && console.log("HighCharts.setDataBind " + this.id + ": dataset=" + (this.dataset && this.dataset.length) + "\n" + stringify(this.dataset));

		var settings;
		if (this.dataset && this.dataset.length > 0) {
			settings = this._settingsFromValue();
		}
		if (settings) {
			if (!this._chart) {
				this._createChart(settings);
			} else {
				var self = this;
				self._chart.xAxis && self._chart.xAxis[0].setCategories(settings.categories, false);

				var series = self._chart.series;
				if (self._chart.options.chart.polar) {
					for (var j = series.length - 1; j >= 0; j--) {
						series[j].remove(false);
					}
				}
				if (!series || series.length === 0) {
					forEachKey(settings.series, function(key, s) {
						if (!s.isHidden) {
							self._chart.addSeries(settings.series[key], false);
						}
					});
				} else {
					var toRemove = [];
					for (var ii = 0, len = series.length; ii < len; ii++) {
						var chartSerie = series[ii],
							key = chartSerie.options.id.slice(3),
							serie = settings.series[key],
							update = {};
						// Update series options before setting new data because of an Highcharts issue that restores old values
						mergeChanges(update, chartSerie, serie);
						if (Object.keys(update).length) {
							chartSerie.update(update, false);
						}
						if (serie.isHidden) {
							toRemove.push(chartSerie);
						} else {
							chartSerie.setData(serie.data, false);
						}
						// serie.data = [];
					}
					toRemove.map(function(s) {
						s.remove();
					});
				}
				if (this.useLogarithmicAxis) {
					var yAxisType = 'linear';
					if ((this.maxValue || 0) / (this.minValue || 1) > 10) {
						yAxisType = 'logarithmic';
					}
					if (self._chart.yAxis[0].type !== yAxisType) {
						self._chart.yAxis[0].update({
							type: yAxisType
						});
					}
				}
				self._redraw();
			}
		} else {
			if (this._chart) {
				this._chart.destroy();
				this._chart = null;
			}
		}
		this._showDrillUp(false);
	},

	_createMenuContainer: function() {
		//  var $$menu = $("<div>").appendTo(this.$$container);
		// // $$menu.addClass();
		// $$menu.attr("style", "position: absolute; z-index: 1000; padding: 24px; display: none; right: -14px; top: 10px;");
		// $$menu.append("<div>");
		// <div class="s-field-menus-popup" style="position: absolute; z-index: 106; top: 111.5px; left: 34px;" id="a6afea62-897d-49e7-a532-f82ca3df2af4">
		//   <div class="s-field-menus-slot">
		//     <nav class="s-list-menus">
		//       <ul style="" class="s-list-menus-body">
		//         <li class="s-list-menus-li"><a style="" class="s-list-menus-link" data-s-menu="18-4" data-s-article="18-1" title="Créer une diapositive Powerpoint" target="blank" href="/sdata/x3stb/erp/stubs/HighCharts?representation=HighCharts.$query&amp;pptMode=newSlide&amp;format=application/syracuse-ppt-slide">
		//           <div class="s-list-menus-link-icon" style="background-image: url(&quot;/syracuse-ui/themes/desktop/desktop/sage/images/file/s-link-syracuse-ppt-slide.png&quot;);"></div>
		//           <div class="s-list-menus-link-label s-external-link">Créer une diapositive Powerpoint</div>
		//           </a>
		//         </li>
		//       </ul>
		//     </nav>
		//   </div>
		// </div>
		// $$menu.
		// <div class="highcharts-menu0" style="position: absolute; z-index: 1000; padding: 24px; display: none; right: -14px; top: 10px;">
		//   <div style="box-shadow: 3px 3px 10px rgb(136, 136, 136); border: 1px solid rgb(160, 160, 160); background: none repeat scroll 0% 0% rgb(255, 255, 255);">
		//     <div style="cursor: pointer; padding: 0px 5px; background: none repeat scroll 0% 0% transparent; color: rgb(48, 48, 48); font-size: 11px;">Download PNG image</div>
		//     <div style="cursor: pointer; padding: 0px 5px; background: none repeat scroll 0% 0% transparent; color: rgb(48, 48, 48); font-size: 11px;">Download JPEG image</div>
		//     <div style="cursor: pointer; padding: 0px 5px; background: none repeat scroll 0% 0% transparent; color: rgb(48, 48, 48); font-size: 11px;">Download PDF document</div>
		//     <div style="cursor: pointer; padding: 0px 5px; background: none repeat scroll 0% 0% transparent; color: rgb(48, 48, 48); font-size: 11px;">Download SVG vector image</div>
		//   </div>
		// </div>
	},

	_settingsFromValue: function() {
		var self = this,
			$cube = this.currentMetaData.$cube,
			settings;

		if ($cube.$style === "spiderweb") {
			settings = {};
			settings.categories = Object.keys(self._meta.series).map(function(key) {
				return self._meta.series[key].options.name;
			});

			settings.series = {};
			self.dataset && self.dataset.reduce(function(res, current) {
				var serie = {
					name: self._getMeasureLabel(current, self._meta.xAxis[0].code),
					data: [],
					pointPlacement: 'on'
				};
				if (serie.name) {
					serie.id = "#s-" + serie.name;
					forEachKey(self._meta.series, function(key, s) {
						self._pushData(serie, key, key, current);
					});
					res.series[serie.name] = serie;
				}
				return res;
			}, settings);
		} else {
			settings = {
				categories: [],
				series: {}
			};
			self.dataset && self.dataset.reduce(function(res, current) {
				var categoryName = self._getMeasureLabel(current, self._meta.xAxis[0].code);
				if (categoryName != null) {
					res.categories.push(categoryName);
					forEachKey(self._meta.series, function(key, s) {
						var serie = res.series[key];
						if (!serie) {
							serie = objectClone(s.options);
							serie.data = [];
							res.series[key] = serie;
						}
						self._pushData(serie, categoryName, key, current);
					});
				}
				return res;
			}, settings);
		}
		return settings;
	},

	_pushData: function(serie, categoryName, key, data) {
		var val = parseFloat(data.$rawV && data.$rawV[key] && data.$rawV[key].v || data[key]) || 0;
		if (this.useLogarithmicAxis) {
			this.maxValue = Math.max(this.maxValue || -Infinity, val);
			this.minValue = Math.min(this.maxValue || Infinity, val);
		}
		serie.data.push([categoryName, val]);
	},

	_createChart: function(settings) {
		var self = this,
			options = _merge(self._getPref(), self._getOptions(self.$prototype));

		if (settings) {
			options.xAxis[0].categories = settings.categories;
			forEachKey(settings.series, function(key, s) {
				var serie = objectClone(s),
					serieMeta = self._meta.series[key];
				if (options.chart.polar && serie && serie.type) {
					delete serie.type;
				}
				if (!(serieMeta && serieMeta.isHidden)) {
					options.series.push(serie);
				}
			});
		} else {
			forEachKey(self._meta.series, function(key, s) {
				var serie = objectClone(s.options);
				if (options.chart.polar && serie && serie.type) {
					delete serie.type;
				}
				serie.data = [0];
				if (!s.isHidden) {
					options.series.push(serie);
				}
			});
		}
		options.series.reverse();
		if (this.useLogarithmicAxis) {
			if ((this.maxValue || 0) / (this.minValue || 1) > 10) {
				options.yAxis.type = 'logarithmic';
			}
		}
		self._chart = new Highcharts.Chart(options);

		//  To test: create a clickable area for drillUp
		// var renderer = self._chart;
		// self._drillUpGroup = renderer.g().add();
		// renderer.circle(10, 10, 5).on("click", function(event) {
		//     self._drill(this, event.shiftKey);
		//     if (self._meta.drill.currAxisHier > 0) {
		//         self._drillUpGroup.show();
		//     } else {
		//         self._drillUpGroup.hide();
		//     }
		// }).attr({
		//     fill: 'red',
		//     stroke: 'black',
		//     'stroke-width': 1
		// }).add(self._drillUpGroup);
		// renderer.path(['M', 12.981, 9.073, 'V', 6.817, 'l', -12.106, 6.99, 'l', 12.106, 6.99, 'v', -2.422, 'c', 3.285, -0.002, 9.052, 0.28, 9.052, 2.269, 'c', 0, 2.78, -6.023, 4.263, -6.023, 4.263, 'v', 2.132, 'c', 0, 0, 13.53, 0.463, 13.53, -9.823, 'C', 29.54, 9.134, 17.952, 8.831, 12.981, 9.073, 'z']).attr({
		//     'stroke-width': 2,
		//     stroke: 'red'
		// }).add(self._drillUpGroup);
		// renderer.text('drill up', 200, 100).attr({
		//     rotation: 45
		// }).css({
		//     fontSize: '16pt',
		//     color: 'green'
		// }).add(self._drillUpGroup);
		this._showDrillUp(false);
	},

	_setSerie: function(id) {
		this._chart.series.map(function(s) {
			s.hide();
		});
		this._chart.get(id).show();
	},

	_redraw: function() {
		this._chart && this._chart.redraw();
	},

	_getFieldEvalTitle: function() {
		return this.page.externalAdapter.getFieldEvalTitle(this) || [];
	},

	_getOptions: function(proto) {
		var self = this,
			$cube = this.currentMetaData.$cube,
			defOptions = Highcharts.getOptions(),
			buttons = defOptions.exporting.buttons,
			measuresTitle = this._getFieldEvalTitle(),
			axe = proto.$axes && proto.$axes[0] || {},
			axeTitle = axe.$hierarchies && measuresTitle[axe.$hierarchies[0][0]] || axe.$title;

		var options = {
			chart: {
				renderTo: this.layoutSlot,
				// marginLeft: 30,
				// marginRight: 150,
				// witdh: self.layoutSlot.clientWidth,
				// height: self.layoutSlot.style.clientHeight
				zoomType: 'x',
			},
			lang: {
				drillDown: self._localize.highCharts_drillDown,
				drillUp: self._localize.highCharts_drillUp
			},

			legend: {
				layout: 'vertical',
				align: 'right',
				verticalAlign: 'top',
				y: 60,
				x: -10,
				title: {
					text: ':::: ' + self._localize.highCharts_seriesTitle,
				},
				floating: true,
				draggable: true,
			},

			title: ($cube && self._localizedText($cube.$title)) || '',

			xAxis: [{
				categories: [],
				title: {
					text: self._localizedText(axeTitle)
				},
				labels: {
					rotation: -45,
					align: 'right',
					// style: {
					//     fontSize: '13px',
					//     fontFamily: 'Verdana, sans-serif'
					// }
				}
			}],

			yAxis: [{
				title: {
					text: ''
				},
				labels: {
					align: 'right'
				}
				// type: 'logarithmic',
			}],

			plotOptions: {
				series: {
					cursor: 'pointer',
					events: { // legendItemClick: function(e) {
						//     // use e.mousePageX and e.mousePageY for mouse coordinates
						//     console.log("legendItemClick: (" + e.mousePageX + ", " + e.mousePageY + ")");
						// }
					},
					point: {
						events: {
							click: function(event) {
								self._onMeasureClick({
									data: this,
									event: event
								});
							}
						}
					},
					stacking: self._meta.stacking
				}
			},

			tooltip: {
				formatter: function() {
					var seriesMeta = self._meta.series,
						serie = this.key && seriesMeta[this.key] || seriesMeta[this.series.options.id.slice(3)],
						measure = serie && serie.measure,
						data = this.series.processedYData,
						y = this.y;

					if (measure) {
						self._ensureFormatter(measure);
					}
					var label = this.series.name || measure && measure.$title,
						mformat = measure && measure.formatApi,
						mlocale = measure && measure.localeFormat;
					label = (label ? label + "<br>" : "") + (this.x || this.key) + ': <b> ' + (mformat ? mformat.format(y, mlocale) : y) + '</b>';
					if (measure && (measure.$isNormalized) && data.length > 0) {
						var sum = data.reduce(function(a, b) {
							return a + b;
						});
						label += ' (' + (mformat ? mformat.format(y / sum * 100, mlocale) : y / sum * 100) + '%)';
					}

					if (self._canDrill(false)) {
						label += '<br/><span style="font-size: 10px; font-style:italic;">' + self._localize.highCharts_clickToDrill + '</span>';
					}
					return label;
				}
			},

			series: [],
		};
		if (Highcharts.theme.version[0] === 3) {
			// For Highcarts 3.0.0
			options.exporting = {
				//enabled: true,
				//filename: 'chart',
				type: 'image/png',
				url: 'http://export.highcharts.com/',
				//width: undefined, // docs
				//scale: 2 // docs
				buttons: {
					contextButton: { // docs
						//x: -10, // docs: x is different now
						symbol: 'menu',
						_titleKey: 'contextButtonTitle',
						menuItems: [{
								textKey: 'drillUp',
								onclick: function() {
									setTimeout(function() {
										self._drill(null, true);
									}, 100);
								}
							} // Enable this block to add "View SVG" to the dropdown menu
							// {
							//     text: 'View SVG',
							//     onclick: function() {
							//         var svg = this.getSVG().replace(/</g, '\n&lt;').replace(/>/g, '&gt;');
							//         document.body.innerHTML = '<pre>' + svg + '</pre>';
							//     }
							// }
						]
					}
				}
			};
			var menuItems = options.exporting.buttons.contextButton.menuItems;
			if (this._printSupported()) {
				menuItems.push({
					separator: true
				});
				menuItems.push({
					text: 'Print chart',
					onclick: function() {
						this.print();
					}
				});
			}
			if (this._exportSupported()) {
				menuItems.push({
					separator: true
				});
				menuItems.push({
					textKey: 'downloadPNG',
					onclick: function() {
						this.exportChart();
					}
				});
				menuItems.push({
					textKey: 'downloadJPEG',
					onclick: function() {
						this.exportChart({
							type: 'image/jpeg'
						});
					}
				});
				menuItems.push({
					textKey: 'downloadPDF',
					onclick: function() {
						this.exportChart({
							type: 'application/pdf'
						});
					}
				});
				menuItems.push({
					textKey: 'downloadSVG',
					onclick: function() {
						this.exportChart({
							type: 'image/svg+xml'
						});
					}
				});
			}
		} else if (Highcharts.theme.version[0] === 2) {
			// For Highcharts 2.0.x
			options.exporting = {
				buttons: {
					drillUp: {
						symbol: 'triangle',
						x: -62,
						symbolFill: 'rgba(250,250,250,0.5)',
						hoverSymbolStroke: '#fff',
						hoverSymbolFill: 'rgba(250,250,250,0.5)',
						_id: 'drillUp',
						_titleKey: 'drillUp',
						onclick: function() {
							self._drill(null, true);
						}
					},
					printButton: buttons.printButton,
					exportButton: buttons.exportButton
				}
			};
		}

		if (options.xAxis[0].title.text !== options.title) {
			options.xAxis[0].title.text = options.title + (options.xAxis[0].title.text ? ' / ' + options.xAxis[0].title.text : '');
		}

		if ($cube.$style === "spiderweb") {
			options.chart.polar = true;
			options.chart.type = 'area';
			delete options.xAxis[0].title;
			options.xAxis[0] = _merge(options.xAxis[0], {
				tickmarkPlacement: 'on',
				lineWidth: 0
			});
			delete options.xAxis[0].labels;
			delete options.yAxis;
			options.yAxis = {
				gridLineInterpolation: 'polygon',
				lineWidth: 0,
				// min: 0
			};
			// options.yAxis[0] = _merge(options.yAxis[0], {
			//     gridLineInterpolation: 'polygon',
			//     lineWidth: 0,
			//     min: 0
			// });
		} else {
			options.chart.type = self._meta.defaultStyle;
		}
		return options;
	},

	_initializeMeta: function() {
		this._mergeMetaData(this.$prototype);
		this._mergeMetaData(this.$item);

		var proto = this.$prototype;
		var cube = this.currentMetaData;


		this._meta = {
			xAxis: [{}],
			series: {},
			displaysOneMeasure: cube && cube.$displaysOneMeasure,
			hasMeasureSelector: cube && cube.$hasMeasureSelector,
			hasStyleSelector: cube && cube.$hasStyleSelector,
			defaultStyle: _style(cube.$style) || 'column',
			drill: {
				minLevel: 1,
				maxLevel: 0,
				currLevel: 1,
				currAxisHier: 0,
				levelsProperties: [],
				members: [],
				stack: [{
					$axes: proto.$axes,
					$item: proto.$item,
					$slicer: proto.$slicer
				}]
				/*              code: proto.$codeStat || "UNKNOWN",
                 axis0FieldCode: self._meta.xAxis[0].code || ""*/
			}
		};
		this.__processMeta(proto, true);
	},

	_exportSupported: function() {
		return false;
	},

	_printSupported: function() {
		return true;
	},

	__processMeta: function(metaData, init) {
		this._processMeasures(metaData, init);
		this._processLinks(metaData, init);
		this._processAxes(metaData, init);
	},

	_processMeasures: function(metaData, init) {
		this._mergeMetaData(metaData);

		var self = this,
			items = this.$prototype.$properties;

		// Get measures definition. If measures are not defined in the second axis members (Cf. specs),
		// we used all the measures defined in the cube
		var measures = this._getRestraintMeasures();
		if (measures) {
			forEachKey(measures, function(key, m) {
				// Because duplicate properties is possible for cube definition... we keep the last defined
				var code = (m.$property || key);
				var measure = _merge(items[code], m);
				if (metaData && metaData.$item && metaData.$item.$properties) {
					measure = _merge(measure, metaData.$item.$properties[code]);
				}
				// measures[key] = measure;
				var serie = self._meta.series[code];

				if (init) {
					self._ensureFormatter(measure);

					serie = self._meta.series[code] = {
						options: {
							id: '#s-' + code,
							// legendIndex: "",
							name: self._localizedText(measure.$title) || String.fromCharCode(160),
							// visible: measure.$title !== "" && !!(!self._meta.displaysOneMeasure || measure.$isDefault)
						},
						measure: measure
					};
				}
				if (serie) {
					serie.isHidden = measure.$title === "";
					serie.options.type = _style(measure.$style);
					serie.options.color = measure.$color;
					serie.options.name = self._localizedText(measure.$title) || String.fromCharCode(160);
					serie.options.visible = measure.$title !== "" && !! (!self._meta.displaysOneMeasure || measure.$isDefault);
				}
				if (!serie.options.visible) {
					debug && console.log("Highcharts._processMeasures: Serie '" + serie.options.name + "' is not visible");
				}

				if (measure.$isStacked || measure.$stackingGroup) {
					serie.options.stack = measure.$stackingGroup || 0; // a stack ID
					self._meta.stacking = measure.$isNormalized ? 'percent' : self._meta.stacking || 'normal';
				}
			});
		}
	},

	_getRestraintMeasures: function() {
		var proto = this.currentMetaData,
			$cube = proto.$cube,
			measures = $cube && $cube.$measures,
			restraintMeasures = measures;
		if (measures) {
			if (proto.$axes && proto.$axes.length > 1 && proto.$axes[1].$members && proto.$axes[1].$members[0][0].length > 0) {
				restraintMeasures = {};
				_.each(proto.$axes[1].$members[0][0], function(measureCode) {
					restraintMeasures[measureCode] = measures[measureCode];
				});
			}
		}
		return restraintMeasures;
	},

	_ensureFormatter: function(measure) {
		measure.formatApi = measure.formatApi || _formatApi.getApi(measure.$type);
		measure.formatObj = measure.formatObj || _formatApi.getLocale().getNumberFormatObj(measure.$type);
		measure.localeFormat = measure.localeFormat || measure.$format || measure.formatObj.numFormat;
	},

	_processLinks: function(proto, init) {
		var meta = this._meta,
			xAxis = meta.xAxis && meta.xAxis[0],
			reprUrl = this.page.$prototype && this.page.$prototype.$representationUrl;
		meta.links = meta.links || {};
		proto.$links = proto.$links || {};

		if (reprUrl && !this.page.externalAdapter.fusionSite) {
			proto.$links.$pptslide = {
				"$title": this._localize.highCharts_powerpointSlide,
				"$url": reprUrl + "&pptMode=newSlide&$bind=" + this.$item.$bind,
				"$type": httpHelper.mediaTypes.ppt_slide,
				"$confirm": this._localize.highCharts_installOfficeAddin,
				"$officeAddinSetup": "/msoffice/lib/general/addIn/SyracuseOfficeAddinsSetup.EXE?&format=application/x-msi"
			};
		}

		this._applyLinks(proto, "$links");
		this._applyLinks(proto, "$actions");
		this._applyLinks(proto.$item, "$links");

		if (xAxis && xAxis.code && proto.$properties && proto.$properties[xAxis.code].$thumb && proto.$properties[xAxis.code].$thumb.$links) {
			this._applyLinks(proto.$properties[xAxis.code].$thumb, "$links");
		}

		meta.drillDownLink = this._getLink("$drillDown");
		meta.drillUpLink = this._getLink("$drillUp");
	},

	_getLink: function(name) {
		var meta = this._meta;
		return meta.links && meta.links[name] && this._getMenuItem(meta.links[name]);
	},

	_applyLinks: function(prop, col) {
		var self = this;
		if (col && prop && prop[col]) {
			forEachKey(prop[col], function(id, link) {
				// self._meta.links.push(self._getLinkDef(col, id, link));
				var lnk = self._meta.links[id];
				if (lnk) {
					forEachKey(link, function(k, v) {
						lnk[k] = v;
					});
				} else {
					self._meta.links[id] = self._getLinkDef(col, id, link);
				}
			}, self);
		}
	},

	_getMenuItem: function(link) {
		var links = {};
		var $link = links[link.id] = objectClone(link.link);
		return link && {
			$item: {
				$links: links
			}
		};
	},

	_processAxes: function(proto, init) {
		var cube = this.$prototype.$cube;
		if (!_isCubeValid(cube, proto)) return false;

		var self = this,
			currAxisHier = 0,
			axis0 = proto.$axes && proto.$axes[0];

		// TODO: review this
		// Get axis analysis
		var mainHLevelsTab = null;
		if (axis0) {
			forEachKey(axis0.$hierarchies, function(idx, hierarchy) {
				if (!mainHLevelsTab && hierarchy.length > 1 && hierarchy[1] == 1) {
					mainHLevelsTab = cube.$hierarchies[hierarchy[0]].$properties;
					if (mainHLevelsTab) {
						self._meta.xAxis[0].code = mainHLevelsTab[hierarchy.length > 2 ? hierarchy[2] : 0];
						currAxisHier = idx;
					}
				}
			});
			if (!mainHLevelsTab && axis0.$hierarchies[0].length > 0) {
				mainHLevelsTab = cube.$hierarchies[axis0.$hierarchies[0][0]].$properties;
				if (mainHLevelsTab && mainHLevelsTab.length > 0) self._meta.xAxis[0].code = mainHLevelsTab[0];
			}
			// Get drill definition
			var properties;
			_.each(axis0.$hierarchies, function(hierarchie) {
				properties = cube.$hierarchies[hierarchie[0]].$properties;
				_.each(properties, function(property) {
					this.levelsProperties[this.maxLevel++] = property;
				}, self._meta.drill);
			});
			if (axis0.$members) {
				_.each(axis0.$members, function(tuple) {
					_.each(tuple, function(value) {
						if (value.length > 0) {
							this.members[(this.currLevel++) - 1] = value[0];
						}
					}, this);
				}, self._meta.drill);
			}
		}
		self._meta.drill.code = proto.$codeStat || "UNKNOWN";
		self._meta.drill.axis0FieldCode = self._meta.xAxis[0].code || "";
		self._meta.drill.maxLevel = Math.max(self._meta.drill.maxLevel, self._meta.drill.minLevel);
	},

	// set graph style
	_setGraphStyle: function(cube, measures) {
		// Init
		var graphStyle = {},
			mDefault = null;
		var msCode = [],
			i = 0;
		var self = this;

		if (cube.$style == "pie") {
			_.each(measures, function(measure) {
				/*              msCode.push(measure.property);
                 if(measure.definition.$isDefault)
                 mDefault = measure.property;
                 */
			});
		} else {
			_.each(measures, function(measure) {
				/*
                 // So, "xy" style
                 switch (measure.definition.$style) {
                 case "stick":
                 break;
                 }
                 if(measure.definition.$isStacked) {
                 } else if(measure.definition.$isNormalized) {
                 }
                 if(measure.definition.$isDefault)
                 mDefault = measure.property;
                 msCode.push(measure.property);
                 */
			});
		}

		// Misc properties
		graphStyle.defaultMeasures = (!cube.$displaysOneMeasure ? msCode.join(";") : (mDefault ? mDefault : msCode[0]));
		graphStyle.hasMeasureSelector = !! cube.$hasMeasureSelector;
		graphStyle.hasStyleSelector = !! cube.$hasStyleSelector;

		return graphStyle;
	},
	// Build a syra link full description object (type : "$link", "$action"... id = "$edit", $delete, etc...)
	_getLinkDef: function(type, id, link) {
		return {
			"type": type,
			"id": id,
			"link": link,
			"title": this._localizedText(link.$title)
		};
	},
	_getPref: function() {
		return Highcharts.getOptions();
	},

	_getMeasureLabel: function(measure, code) {
		// return cubeHelper.getMeasureLabel(measure, code, this.$prototype && this.$prototype.$properties);
		var label = this._localizedText(measure.$title);
		if (label) return label;
		var self = this;
		var item = self.$prototype.$properties[code];
		if (!item) return null;
		switch (item.$type) {
			case "application/x-choice":
				label = measure[code];
				item.$value.$enum.some(function(element, i, array) {
					if (element.$value === label) {
						label = this._localizedText(element.$title);
						return true;
					}
					return false;
				});
				break;
			case "application/x-date":
				item.formatApi = item.formatApi || _formatApi.getApi(item.$type);
				item.localeFormat = item.localeFormat || _formatApi.getLocale().getDateFormat(item.$format);
				label = datetime.parse(measure[code]).toString(item.localeFormat);
				break;
			case "application/x-integer":
			case "application/x-decimal":
				item.formatApi = item.formatApi || _formatApi.getApi(item.$type);
				item.formatObj = item.formatObj || _formatApi.getLocale().getNumberFormatObj(item.$type);
				item.localeFormat = item.localeFormat || item.$format || item.formatObj.numFormat;
				label = item.formatApi.format(measure[code], item.localeFormat);
				break;
			default:
				label = "" + measure[code];
				break;
		}
		return label;
	},
	_ensureChartRecord: function($item, recordIndex) {
		if (!this.recordArticle) {
			this.recordArticle = new TabularChartRecord();
			this.recordArticle.$prototype = this.$prototype.$item;
			this.recordArticle.dataset = this.dataset && this.dataset[recordIndex || 0] || {};
			this.page.initializeNewItem(this.recordArticle, {}, this);
			this.recordArticle.loadBox($item);
		} else {
			this.recordArticle.applyChange($item);
		}
		return this.recordArticle;
	},
	_execLink: function(link, recordIndex) {
		if (typeof link === "string") {
			var links = this._meta && this._meta.links;
			link = links && this._getMenuItem(links[link]);
		}
		debug && console.log("TabularChart._execLink: link.id=" + link.id + ", x=" + recordIndex);
		this._ensureChartRecord(link.$item, recordIndex);
		var menuItem = this.recordArticle.menuItems[Object.keys(link.$item["$links" || "$actions"])[0]][0];
		debug && console.log("TabularChart._execLink: url=" + menuItem.$url + "\nrecord=" + stringify(this.recordArticle.dataset));
		menuItem.click();
	},

	_showDrillUp: function(show) {
		//     if (show) {
		//         this._drillUpGroup.show();
		//     } else {
		//         this._drillUpGroup.hide();
		//     }
		// TODO: Does not work. Find an alternative
		// -----------------------------------------
		// var drillElt = this._chart.exportSVGElements && this._chart.exportSVGElements.filter(function(e) {
		//     return e.id === "drillUp";
		// });
		// if (!(drillElt[0] && drillElt[0].element)) return;
		// if (show) {
		//     drillElt[0].element.removeAttribute("display");
		// } else {
		//     drillElt[0].element.setAttribute("display", "none");
		// }
	},
	_canDrill: function(up) {
		var meta = this._meta,
			i = meta.drill.currAxisHier,
			stack = meta.drill.stack,
			proto = stack[0],
			axis0 = proto.$axes && proto.$axes[0],
			hierarchies = axis0.$hierarchies || [];
		return up && (meta.drillUpLink || stack.length > 1) || !up && (meta.drillDownLink || (axis0 && i < hierarchies.length - 1));
	},
	_drill: function(serie, up) {

		var self = this,
			cube = this.$prototype.$cube,
			meta = self._meta,
			i = meta.drill.currAxisHier,
			stack = meta.drill.stack;

		function pushProto() {
			stack.unshift(objectClone(proto, true));
			return stack[0];
		}

		if (up && meta.drillUpLink) {
			return this._execLink(meta.drillUpLink);
		} else if (!up && meta.drillDownLink) {
			return this._execLink(meta.drillDownLink, serie.x);
		}

		if (up) {
			// already on top ?
			if (stack.length < 2) return;
			stack.shift();
			meta.drill.currAxisHier--;
			self._showDrillUp(meta.drill.currAxisHier > 0);
			self._fetch(stack[0]);
			return;
		}

		var proto = stack[0],
			axis0 = proto.$axes && proto.$axes[0];

		// no axis or reach the end of drilling
		if (!this._canDrill(up)) {
			return;
		}

		var members = axis0.$members = (axis0.$members || []);

		proto = pushProto();

		axis0 = proto.$axes && proto.$axes[0];
		members = axis0.$members;
		var hierarchies = axis0.$hierarchies;

		var hierName = hierarchies[i][0],
			cubeHier = cube.$hierarchies[hierName];
		if (hierarchies[i][2] == (cubeHier.$properties ? cubeHier.$properties.length - 1 : -1)) {
			hierarchies[i].splice(1, 2, 0, 0);
			hierarchies[i + 1].splice(1, 2, 1, 0);
			meta.drill.currAxisHier++;
		} else {
			hierarchies[i][2]++;
		}
		if (members.length < i + 1) {
			members[i] = [];
		}
		var rawData = this.dataset && this.dataset[serie.x],
			member = rawData && (rawData[hierName] + "");

		// use the raw data from the dataset instead of serie.name because this one can be formatted
		members[i].push([member]);

		self._showDrillUp(meta.drill.currAxisHier > 0);

		this._fetch(proto);
	},
	_fetch: function(proto) {
		this.fetch({
			jsonParams: {
				$axes: proto.$axes,
				$slicer: proto.$slicer
			}
		});
	},

	// --------------------------------------------------------------------------------
	// Event management
	// --------------------------------------------------------------------------------
	_onMeasureClick: function(context) {
		var self = this;
		var event = context.event || {},
			data = context.data || {},
			line = data.x + 1;

		if (!self.attachedField.$isDisabled) {
			if (self.page.externalAdapter.fusionSite) {
				self.page.externalAdapter.onGraphClickPicker({
					field: self,
					rcdUuid: line,
					pickerType: "menus",
					grapLevel: "measure",
					doEvent: function(err, menus) {
						var $links = {},
							menuCount = menus && menus.length || 0;
						if (menuCount === 0) {
							return;
						}
						for (var ii = 0; ii < menuCount; ii++) {
							$links["link-" + ii] = menus[ii];
						}
						self._ensureChartRecord({}, data.x).openMenuBox({
							$links: $links
						}, event, function(menuItem) {
							var data = {
								field: self,
								link: {
									linkCtx: menuItem.linkCtx || "",
									linkId: menuItem.linkId
								}
							};

							if (self.page.externalAdapter.onGraphClickLink(data)) {
								// We should never come here in a Convergence context!!!
								// debug && console.log("onGraphClickLink returns true!!!")
								// self._execLink(menuItem);
							}
							return false;
						});
					}
				});
			} else {
				// no longer drill up if shiftKey is pressed
				if (!event.shiftKey) self._drill(data, event.shiftKey);
			}
		}

	},
	// --------------------------------------------------------------------------------
	// Chart management
	// --------------------------------------------------------------------------------
	_setStyle: function(type) {
		var self = this,
			count = Object.keys(self._meta.series).length,
			size = 80,
			slice = Math.round(size / count);
		forEachKey(self._meta.series, function(key, s) {
			s.type = type;
			if (self._chart) {
				var serie = self._chart.get(s.options.id);
				if (serie) {
					self._setType(serie, type, size, size - slice);
					size -= slice;
				}
			}
		});
		self._redraw();
	},

	_setType: function(serie, type, size, innerSize) {
		var self = this,
			chart = serie.chart;
		var s = {
			id: serie.options.id,
			type: type,
			name: serie.name,
			data: serie.options.data,
			visible: serie.visible,
			stack: serie.stack,
			color: serie.color
		};
		var opt = {
			type: type
		};

		if (type === "spiderweb") {
			// chart.polar = true;
			// chart.type = 'area';
			// delete options.xAxis[0].title;
			// options.xAxis[0] = _merge(options.xAxis[0], {
			//     tickmarkPlacement: 'on',
			//     lineWidth: 0
			// });
			// delete options.xAxis[0].labels;
			// delete options.yAxis;
			// options.yAxis = {
			//     gridLineInterpolation: 'polygon',
			//     lineWidth: 0,
			//     // min: 0
			// };
		} else if (type === "pie") {
			opt = s;
			opt.size = size + "%";
			opt.innerSize = innerSize + "%";
			opt.showInLegend = false;
			opt.dateLabels = {
				enabled: false
			};
			this._meta.cache = this._meta.cache || {};
			this._meta.cache.xAxis = chart.xAxis;
			delete chart.xAxis;
		} else if (!chart.xAxis) {
			s.showInLegend = true;
			s.dateLabels = {
				enabled: true
			};
			chart.xAxis = self._meta.cache.xAxis;
		}
		serie.remove();
		chart.addSeries(s, false);
		// serie.update(opt);
	},

	__dispose: function() {
		this._chart && this._chart.destroy();
		this._chart = this._localize = this._meta = this.currentMetaData = null;
	}
});

function _isCubeValid(cube, proto) {
	return !!(cube && cube.$hierarchies && proto.$axes && proto.$axes.length > 0 && //
		proto.$axes[0].$hierarchies && proto.$axes[0].$hierarchies.length > 0);
}