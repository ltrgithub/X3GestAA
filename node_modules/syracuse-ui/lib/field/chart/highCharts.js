"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var datetime = require('syracuse-core/lib/types/datetime');
var aspect = require('syracuse-core/lib/aspect');
var cubeHelper = require('syracuse-ui/lib/field/cube/cubeHelper');
var Article = require("syracuse-ui/lib/article/article").Article;
var TabularChartAuthoring = require("./authoring/tabularChartAuthoring").TabularChartAuthoring;
var httpHelper = require("syracuse-sdata/lib/httpHelper");
// require('syracuse-ui/deps/highcharts/highcharts');
require('syracuse-ui/deps/highcharts/highcharts.src');
require('syracuse-ui/deps/highcharts/modules/exporting');
Highcharts.theme = require('syracuse-ui/themes/desktop/sage/highcharts/theme').theme;

var highchartsOptions = Highcharts.setOptions(Highcharts.theme);

var forEachKey = helpers.object.forEachKey;
var objectCopy = helpers.object.copy;
var objectClone = helpers.object.clone;

var debug = false;
var inject = false;

var _localize = {};

var _style = (function() {
    var map = {
        point: "scatter",
        stick: "column"
    };

    return function($style) {
        return $style && (map[$style] || $style);
    };
})();

function stringify(obj) {
    var seen = [];

    return JSON.stringify(obj, function(key, val) {
        if (typeof val === "object") {
            if (seen.indexOf(val) >= 0) return undefined
            seen.push(val)
        }
        return val
    });
}

// Fusion page hacking for test purpose
inject && (function() {
    var WorkBook = require('syracuse-ui/lib/fusion/workBook').WorkBook;
    // var WinStack = require('syracuse-ui/lib/fusion/core/client/sap/window').WinStack;
    var propertyHook = {
        "application/x-array": function($itemPage, $facet, opts, prop, key) {
            if (key === 'BA') {
                // {
                //     "$type": "application/x-array",
                //     "$capabilities": "insert,delete",
                //     "$item": {
                //         "$properties": {
                //             "BA2": {
                //                 "$type": "application/x-string",
                //                 "$X3Name": "AQFF1_B1FLD1",
                //                 "$title": "{@S-AQFF1-3651}",
                //                 "$maxLength": 10,
                //                 "$groupName": "A"
                //             },
                //     }
                // }
                prop.$cube = {
                    "$mode": "table",
                    "$style": "xy",
                    "$displaysOneMeasure": false,
                    "$title": "{@S-AQFF1-3651}",
                    "$hierarchies": {
                        "BA2_h": {
                            "$title": "{@S-AQFF1-3651}",
                            "$properties": ["BA2"],
                            "$members": [],
                            "$isDefault": true
                        }
                    },
                    "$measures": {
                        "BA4": {
                            "$type": "application/x-decimal",
                            "$title": "{@S-AQFF1-23747}",
                            "$mode": "sum",
                            "$style": "stick",
                            "$isStacked": false,
                            "$isNormalized": false,
                            "$isDefault": true
                        },
                        "BA5": {
                            "$property": "BA5",
                            "$title": "{@S-AQFF1-23746}",
                            "$mode": "sum",
                            "$style": "stick",
                            "$isStacked": false,
                            "$isNormalized": false,
                            "$isDefault": true
                        },
                        "BA6": {
                            "$property": "BA6",
                            "$title": "{@S-AQFF1-23662}",
                            "$mode": "sum",
                            "$style": "stick",
                            "$isStacked": false,
                            "$isNormalized": false
                        },
                        "BA7": {
                            "$property": "BA7",
                            "$title": "{@S-AQFF1-23663}",
                            "$mode": "sum",
                            "$style": "stick",
                            "$isStacked": false,
                            "$isNormalized": false
                        }
                    }
                };
            }

            prop.$axes = [{
                "$title": "Articles vendus",
                "$hierarchies": [
                    ["BA2_h"]
                ]
            }, {
                "$title": "measures",
                "$hierarchies": [
                    ["$measures"]
                ]
            }];
        }
    };

    aspect.before(WorkBook, ["loadSheet"], function(context, args, result) {
        // loadSheet: function($itemPage, $facet, opts)
        var $itemPage = args[0] || {},
            $facet = args[1] || {},
            opts = args[2] || {};

        var $representation = $itemPage && $itemPage.$representation,
            $prototype = $representation && $representation.$prototype || {},
            $properties = $prototype.$properties;
        if ($representation.$url.match(/\.AQFF\./)) {
            forEachKey($properties, function(key, prop) {
                propertyHook[prop.$type] && propertyHook[prop.$type]($itemPage, $facet, opts, prop, key);
            });
        }
    });

    // aspect.before(WinStack, ["applyChange"], function(context, args, result) {
    //     // applyChange: function(winId, change, options)
    //     var winId = args[0] || {},
    //         change = args[1] || {},
    //         options = args[2] || {};
    //     var idEx = this._getWinIdEx(winId),
    //         model = this._windows[idEx.id],
    //         proto = model && model.getProto();
    //     forEachKey(change.entities, function(key, p) {
    //         var $type = proto && proto[key].$type;
    //         if ($type === "application/x-array") {
    //             // p.$style = ";font-family:MS Sans Serif;font-size:8pt;color:#000000;font-weight:normal;font-style:normal;background-color:#78A7F5";
    //         }
    //     });
    // });
})();

var _merge = function() {
        var args = arguments;
        return $.extend(true, null, args[0], args[1], args[2], args[3]);
    };

var _formatApi = require('syracuse-ui/lib/field/formatApi');

function _createChoices(title, items) {
    return {
        $type: "application/x-choice",
        $title: title,
        $value: {
            $type: "application/x-string",
            $enum: items.map(function(item) {
                return typeof(item) === "string" ? {
                    $value: item,
                    $title: _localize[item] || item
                } : {
                    $value: item.$value,
                    $title: item.$title || _localize[item.$value] || item.$value
                }
            })
        }
    };
};

// TODO: 
// - event management
// - dynamic loading of series

function RecordArticle() {};

exports.RecordArticle = helpers.defineClass(RecordArticle, Article, {
    drawBox: function() {
        this.page.loadNewItem($("<div style='display:none'/>").appendTo(this.boxParent.$$container), {
            $category: "links"
        }, this);
    },
});

function TabularChart() {}

exports.TabularChart = helpers.defineClass(TabularChart, Article, {
	dispose: function(){
		Article.prototype.dispose.call(this);
	},
    applyDesignMetaData: function(metadata, onAuthoring) {
        var self = this;
        if (metadata.$style) {
            if (self._meta) {
                self._setStyle(metadata.$style);
            }
        }
    },
    _createChoices: function() {
        return _createChoices(_localize.chartType, ["area", "areaspline", "bar", "column", "line", "pie", "scatter", "spline"]);
    },
    getAuthoringWidget: function() {
        return new TabularChartAuthoring();
    },
    drawBox: function() {
        var self = this;
        this.$localization = this.getArticleParent().$prototype.$localization;
        _localize = locale.resources(module)();

        var id = self.id + "-chart";
        debug && console.log("HighCharts.drawBox " + self.id);

        // var div = $('<div>').attr('id', id + "-resizer").appendTo(self.$$container);
        // div = $('<div>').attr('id', id + "-inner-resizer").appendTo(div);
        // div = $('<div>').attr('id', id).appendTo(div);
        $('<div />').attr('id', id).appendTo(self.$$container);
        var proto = self.$prototype;
        // create an alias
        proto.$properties = proto.$item.$properties;

        // cubeHelper._initializeMeta(self);
        self._initializeMeta();
        self._initializeToobar();
        // self.applyDesignMetaData(self.$item, false); //temp for  test
        self.getArticleParent().bind(self, self.$item.$bind);
    },
    setDataBind: function(value, record, metaData) {
        debug && console.log("HighCharts.setDataBind " + this.id);
        //this.value = value;
        if (metaData) {
            this._processMeta(metaData);
        }
        this.dataset = record || {};
        this.currentValue = value;
        if (value) {
            var self = this;
            var settings = value.reduce(function(res, current) {
                var categoryName = self._getMeasureLabel(current, self._meta.xAxis[0].code);
                categoryName && res.categories.push(categoryName);
                forEachKey(self._meta.series, function(key, s) {
                    var serie = res.series[key];
                    if (serie == null) {
                        serie = objectClone(s.options);
                        serie.data = [];
                        res.series[key] = serie;
                    }
                    serie.data.push(parseFloat(current[key]));
                });
                return res;
            }, {
                categories: [],
                series: {}
            });

            if (!self._chart) {
                self._createChart(settings);
            } else {
                // setTimeout(function() {
                self._chart.xAxis[0].setCategories(settings.categories, false);

                var series = self._chart.series;
                if (!series || series.length === 0) {
                    forEachKey(self._meta.series, function(key, s) {
                        self._chart.addSeries(settings.series[key], false);
                    });
                } else {
                    for (var i = 0; i < series.length; i++) {
                        var key = series[i].options.id.slice(3),
                            serie = settings.series[key];
                        series[i].setData(serie.data, false);
                        serie.data = [];
                    }
                }
                self._chart.redraw();
                // }, 200);
            }
            // setTimeout(function() {
            //     // self._chart.setSize(self.$$container.innerWidth(), self.$$container.innerHeight());
            //     self._chart.redraw();
            // }, 500);
        }
        this._showDrillUp(false);
    },

    _createChart: function(settings) {
        var self = this,
            id = self.id + "-chart",
            options = _merge(self._getPref(), self._getOptions(id, self.$prototype));


        // $('#' + id + '-resizer').resizable({
        //     // On resize, set the chart size to that of the
        //     // resizer minus padding. If your chart has a lot of data or other
        //     // content, the redrawing might be slow. In that case, we recommend
        //     // that you use the 'stop' event instead of 'resize'.
        //     resize: function() {
        //         self._chart.setSize(
        //         this.offsetWidth - 20, this.offsetHeight - 20, false);
        //     }
        // });
        options.xAxis[0].categories = settings.categories;
        forEachKey(self._meta.series, function(key, s) {
            options.series.push(settings.series[key]);
        });

        self._chart = new Highcharts.Chart(options);

        // To test: create a clickable area for drillUp
        // var renderer = self._chart;
        // self._drillUpGroup = renderer.g().add();
        // renderer.circle(10, 10, 5).on("click", function(event) {
        //     self._drill(this, event.shiftKey);            
        //     if (self._meta.drill.currAxisHier > 0) {
        //         self._drillUpGroup.show();
        //     } else {
        //         self._drillUpGroup.hide();
        //     }
        // }).attr({
        //     fill: 'red',
        //     stroke: 'black',
        //     'stroke-width': 1
        // }).add(self._drillUpGroup);
        // renderer.path(['M', 12.981, 9.073, 'V', 6.817, 'l', -12.106, 6.99, 'l', 12.106, 6.99, 'v', -2.422, 'c', 3.285, -0.002, 9.052, 0.28, 9.052, 2.269, 'c', 0, 2.78, -6.023, 4.263, -6.023, 4.263, 'v', 2.132, 'c', 0, 0, 13.53, 0.463, 13.53, -9.823, 'C', 29.54, 9.134, 17.952, 8.831, 12.981, 9.073, 'z']).attr({
        //     'stroke-width': 2,
        //     stroke: 'red'
        // }).add(self._drillUpGroup);
        // renderer.text('drill up', 200, 100).attr({
        //     rotation: 45
        // }).css({
        //     fontSize: '16pt',
        //     color: 'green'
        // }).add(self._drillUpGroup);
        this._showDrillUp(false);
    },

    _localizedText: function(val) {
        var $localization = this.$localization;
        return val && val.replace(/\{(@[\w-]+)\}/g, function(match, p1) {
            return ($localization && $localization[p1]) || match;
        });
    },

    _setSerie: function(id) {
        process.removeAllListeners(type);
        this._chart.series.map(function(s) {
            s.hide();
        });
        this._chart.get(id).show();
    },

    _setStyle: function(type) {
        var self = this;
        forEachKey(self._meta.series, function(key, s) {
            var series = self._chart.get(s.options.id);
            if (series) {
                self._setType(series, type);
            }
        });
        self._chart.redraw();
    },

    _getOptions: function(id, proto) {
        var self = this,
            cube = this.$prototype.$cube,
            defOptions = Highcharts.getOptions(),
            buttons = defOptions.exporting.buttons;

        var options = {
            chart: {
                renderTo: id,
                marginRight: 150
            },

            lang: {
                drillUp: _localize.drillUp
            },

            legend: {
                align: 'right',
                verticalAlign: 'top',
                x: 0,
                y: 130,
/*              align: 'center',
                 verticalAlign: 'bottom',
                 x: 0,
                 y: 0,*/
                // floating: true
            },

            title: (cube && self._localizedText(cube.$title)) || '',

            xAxis: [{
                categories: [],
                title: {
                    text: proto.$axes && proto.$axes.length > 0 && self._localizedText(proto.$axes[0].$title)
                }
            }],

            yAxis: [{
                min: 0,
                title: {
                    text: ''
                }
            }],

            plotOptions: {
                series: {
                    cursor: 'pointer',
                    point: {
                        events: {
                            click: function(event) {
                                // no longer drill up if shiftKey is pressed
                                if (!event.shiftKey) self._drill(this, event.shiftKey);
                            }
                        }
                    }
                }
            },

            tooltip: {
                formatter: function() {
                    var seriesMeta = self._meta.series,
                        measure = seriesMeta[this.series.options.id.slice(3)].measure,
                        label = '' + this.x + ': <b> ' + (measure ? measure.formatApi.format(this.y, measure.localeFormat) : this.y) + '</b>',
                        data = this.series.processedYData;
                    if (measure && (measure.$isNormalized) && data.length > 0) {
                        var sum = data.reduce(function(a, b) {
                            return a + b;
                        });
                        label += ' (' + measure.formatApi.format(this.y / sum * 100, measure.localeFormat) + '%)';
                    }
                    label += '<br/><span style="font-size: 10px; font-style:italic;">' + _localize.clickToDrill + '</span>'
                    // label += '<br/><span style="font-size: 10px; font-style:italic;">' + _localize.clickToDrill + '</span><br/><span style="font-size: 10px; font-style:italic;">Shift+Click to drill up</span>'
                    return label;
/*  var items = this.points || splat(this),
                     series = items[0].series,
                     s;
                     // build the header
                     s = [series.tooltipHeaderFormatter(items[0].key)];
                     // build the values
                     items.map(function(item) {
                     series = item.series;
                     s.push((series.tooltipFormatter && series.tooltipFormatter(item)) || item.point.tooltipFormatter(series.tooltipOptions.pointFormat));
                     });
                     // footer
                     s.push(options.footerFormat || '');
                     return s.join('');*/
                }
            },
            series: [],

            exporting: {
                buttons: {
                    drillUp: {
                        symbol: 'triangle',
                        x: -62,
                        symbolFill: 'rgba(250,250,250,0.5)',
                        hoverSymbolStroke: '#fff',
                        hoverSymbolFill: 'rgba(250,250,250,0.5)',
                        _id: 'drillUp',
                        _titleKey: 'drillUp',
                        onclick: function() {
                            self._drill(null, true);
                        }
                    },
                    printButton: buttons.printButton,
                    exportButton: buttons.exportButton
                }
            }
        };

        if (options.xAxis[0].title.text != options.title) {
            options.xAxis[0].title.text = options.title + ' / ' + options.xAxis[0].title.text;
        }

        return options;

    },

    _initializeMeta: function() {
        var proto = this.$prototype;
        var cube = proto.$cube;
        this._meta = {
            xAxis: [{}],
            series: {},
            displaysOneMeasure: cube && cube.$displaysOneMeasure,
            hasMeasureSelector: cube && cube.$hasMeasureSelector,
            hasStyleSelector: cube && cube.$hasStyleSelector,
            defaultStyle: _style(cube.$style) || 'column',
            drill: {
                minLevel: 1,
                maxLevel: 0,
                currLevel: 1,
                currAxisHier: 0,
                levelsProperties: [],
                members: [],
                stack: [{
                    $axes: proto.$axes,
                    $item: proto.$item,
                    $slicer: proto.$slicer
                }]
/*              code: proto.$codeStat || "UNKNOWN",
                 axis0FieldCode: self._meta.xAxis[0].code || ""*/
            }
        };
        this._processMeta(proto);
    },
    _initializeToobar: function() {
        var self = this;
        // self._toolBox && self._toolBox.show({
        //     series: (self._meta.hasMeasureSelector && self._meta.displaysOneMeasure),
        //     chartTypes: self._meta.hasStyleSelector
        // });
        // self._toolBox && self._toolBox.selectChartType(self._meta.defaultStyle);
    },
    _processMeta: function(proto) {
        this._processMeasures(proto);
        this._processLinks(proto);
        this._processAxes(proto);
    },
    _processMeasures: function(proto) {
        var self = this,
            cube = this.$prototype.$cube,
            items = this.$prototype.$properties;

        // Get measures definition. If measures are not defined in the second axis members (Cf. specs),
        // we used all the measures defined in the cube
        var measures = cube && cube.$measures;
        if (measures) {
            var restraintMeasures = measures;
            if (proto.$axes && proto.$axes.length > 1 && proto.$axes[1].$members && proto.$axes[1].$members[0][0].length > 0) {
                restraintMeasures = {};
                _.each(proto.$axes[1].$members[0][0], function(measureCode) {
                    restraintMeasures[measureCode] = measures[measureCode];
                });
            }
            forEachKey(restraintMeasures, function(key, m) {
                // Because duplicate properties is possible for cube definition... we keep the last defined
                var code = (m.$property || key);
                //options.xAxis[0].categories.push(measure.$title || proto.$properties[code].$title || "???");
                var measure = _merge(items[code], m);
                measure.formatApi = measure.formatApi || _formatApi.getApi(measure.$type);
                measure.formatObj = measure.formatObj || _formatApi.getLocale().getNumberFormatObj(measure.$type);
                measure.localeFormat = measure.localeFormat || measure.$format || measure.formatObj.numFormat;

                self._meta.series[code] = {
                    options: {
                        id: '#s-' + code,
                        // legendIndex: "",
                        name: self._localizedText(measure.$title) || '???',
                        stack: measure.$isStacked,
                        type: _style(measure.$style),
                        visible: !! (!self._meta.displaysOneMeasure || measure.$isDefault)
                    },
                    measure: measure
                };
            });
        }
    },
    _processLinks: function(proto) {
        var meta = this._meta,
            xAxis = meta.xAxis && meta.xAxis[0],
            reprUrl = this.page.$prototype && this.page.$prototype.$representationUrl;
        meta.links = meta.links || {};
        proto.$links = proto.$links || {};

        if (reprUrl) {
            proto.$links.$pptslide = {
                "$title": _localize.powerpointSlide,
                "$url": reprUrl + "&pptMode=newSlide",
                "$type": httpHelper.mediaTypes.ppt_slide
            };
        }

        this._applyLinks(proto, "$links");
        this._applyLinks(proto, "$actions");
        this._applyLinks(proto.$item, "$links");

        if (xAxis && xAxis.code && proto.$properties && proto.$properties[xAxis.code].$thumb && proto.$properties[xAxis.code].$thumb.$links) {
            this._applyLinks(proto.$properties[xAxis.code].$thumb, "$links");
        }

        meta.drillDownLink = meta.links && meta.links["$drillDown"] && this._getMenuItem(meta.links["$drillDown"]);
        meta.drillUpLink = meta.links && meta.links["$drillUp"] && this._getMenuItem(meta.links["$drillUp"]);
    },

    _applyLinks: function(prop, col) {
        var self = this;
        if (col && prop[col]) {
            forEachKey(prop[col], function(id, link) {
                // self._meta.links.push(self._getLinkDef(col, id, link));
                var lnk = self._meta.links[id];
                if (lnk) {
                    forEachKey(link, function(k, v) {
                        lnk[k] = v;
                    });
                } else {
                    self._meta.links[id] = self._getLinkDef(col, id, link);
                }
            }, self);
        }
    },

    _getMenuItem: function(link) {
        var links = {},
            $link = links[link.id] = objectClone(link.link);

        // $link.$url = this.formatMenuUrl($link);
        return link && {
            $item: {
                $links: links
            },
            dataset: this.dataset
        };
    },

    // Retrieve "$links" from prototype
    _getLinks: function() {
        return this._meta && this._meta.links;
    },

    _processAxes: function(proto) {
        var cube = this.$prototype.$cube;
        if (!_isCubeValid(cube, proto)) return false;

        var self = this,
            currAxisHier = 0,
            axis0 = proto.$axes && proto.$axes[0];
        // TODO: review this
        // Get axis analysis
        var mainHLevelsTab = null;
        if (axis0) {
            forEachKey(axis0.$hierarchies, function(idx, hierarchy) {
                if (!mainHLevelsTab && hierarchy.length > 1 && hierarchy[1] == 1) {
                    mainHLevelsTab = cube.$hierarchies[hierarchy[0]].$properties;
                    if (mainHLevelsTab) {
                        self._meta.xAxis[0].code = mainHLevelsTab[hierarchy.length > 2 ? hierarchy[2] : 0];
                        currAxisHier = idx;
                    }
                }
            });
            if (!mainHLevelsTab && axis0.$hierarchies[0].length > 0) {
                mainHLevelsTab = cube.$hierarchies[axis0.$hierarchies[0][0]].$properties;
                if (mainHLevelsTab && mainHLevelsTab.length > 0) self._meta.xAxis[0].code = mainHLevelsTab[0];
            }
            // Get drill definition
            var properties;
            _.each(axis0.$hierarchies, function(hierarchie) {
                properties = cube.$hierarchies[hierarchie[0]].$properties;
                _.each(properties, function(property) {
                    this.levelsProperties[this.maxLevel++] = property;
                }, self._meta.drill);
            });
            if (axis0.$members) {
                _.each(axis0.$members, function(tuple) {
                    _.each(tuple, function(value) {
                        if (value.length > 0) {
                            this.members[this.currLevel++-1] = value[0];
                        }
                    }, this);
                }, self._meta.drill);
            }
        }
        self._meta.drill.code = proto.$codeStat || "UNKNOWN";
        self._meta.drill.axis0FieldCode = self._meta.xAxis[0].code || "";
        self._meta.drill.maxLevel = Math.max(self._meta.drill.maxLevel, self._meta.drill.minLevel);
    },

    // set graph style
    _setGraphStyle: function(cube, measures) {
        // Init
        var graphStyle = {},
            mDefault = null;
        var msCode = [],
            i = 0;
        var self = this;

        if (cube.$style == "pie") {
            _.each(measures, function(measure) {
/*              msCode.push(measure.property);
                 if(measure.definition.$isDefault)
                 mDefault = measure.property;
                 */
            });
        } else {
            _.each(measures, function(measure) {
/*
                 // So, "xy" style
                 switch (measure.definition.$style) {
                 case "stick":
                 break;
                 }
                 if(measure.definition.$isStacked) {
                 } else if(measure.definition.$isNormalized) {
                 }
                 if(measure.definition.$isDefault)
                 mDefault = measure.property;
                 msCode.push(measure.property);
                 */
            });
        }

        // Misc properties
        graphStyle.defaultMeasures = (!cube.$displaysOneMeasure ? msCode.join(";") : (mDefault ? mDefault : msCode[0]));
        graphStyle.hasMeasureSelector = !! cube.$hasMeasureSelector;
        graphStyle.hasStyleSelector = !! cube.$hasStyleSelector;

        return graphStyle;
    },
    // Build a syra link full description object (type : "$link", "$action"... id = "$edit", $delete, etc...)
    _getLinkDef: function(type, id, link) {
        return {
            "type": type,
            "id": id,
            "link": link,
            "title": this._localizedText(link.$title)
        };
    },
    _getPref: function() {
        // TODO: change default preference by using authoring mode
        var options = Highcharts.getOptions();
        return _merge(options, {
            chart: {
                defaultSeriesType: 'column' // 'line', 'spline', 'area', 'areaspline', 'column', 'bar', 'pie', 'scatter',
            },
            credits: {
                enabled: false
            },
            legend: {
                layout: 'vertical',
                align: 'left',
                verticalAlign: 'top',
                x: 100,
                y: 70,
                floating: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0,
                    //stacking : 'normal',
                }
            },
        });
    },
    _getMeasureLabel: function(measure, code) {
        // return cubeHelper.getMeasureLabel(measure, code, this.$prototype && this.$prototype.$properties);
        var label = this._localizedText(measure.$title);
        if (label) return label;
        var self = this;
        var item = self.$prototype.$properties[code];
        if (!item) return null;
        switch (item.$type) {
        case "application/x-choice":
            label = measure[code];
            item.$value.$enum.some(function(element, i, array) {
                if (element.$value === label) {
                    label = this._localizedText(element.$title);
                    return true;
                }
                return false;
            });
            break;
        case "application/x-date":
            item.formatApi = item.formatApi || _formatApi.getApi(item.$type);
            item.localeFormat = item.localeFormat || _formatApi.getLocale().getDateFormat(item.$format);
            label = datetime.parse(measure[code]).toString(item.localeFormat);
            break;
        case "application/x-integer":
        case "application/x-decimal":
            item.formatApi = item.formatApi || _formatApi.getApi(item.$type);
            item.formatObj = item.formatObj || _formatApi.getLocale().getNumberFormatObj(item.$type);
            item.localeFormat = item.localeFormat || item.$format || item.formatObj.numFormat;
            label = item.formatApi.format(measure[code], item.localeFormat);
            break;
        default:
            label = "" + measure[code];
            break;
        }
        return label;
    },


    // --------------------------------------------------------------------------------
    // Chart action management
    // --------------------------------------------------------------------------------
    _executeRecordMenu: function(context) {
        var item = context.link.$item;
        if (!this.recordArticle) {
            this.recordArticle = new RecordArticle();
            this.recordArticle.$prototype = this.$prototype.$item;
            this.recordArticle.dataset = context.record || {};
            this.page.initializeNewItem(this.recordArticle, {}, this);
            this.recordArticle.loadBox(item);
        } else {
            this.recordArticle.applyChange(item);
        }
        var menuItem = this.recordArticle.menuItems[Object.keys(item["$links" || "$actions"])[0]][0];
        debug && console.log("TabularChart._executeRecordMenu: url=" + menuItem.$url + "\nrecord=" + stringify(context.record));
        menuItem.click();
    },

    _execLink: function(link, x) {
        var context = {
            id: link.id
        };
        if (typeof link === "string") {
            var links = this._getLinks();
            link = links && this._getMenuItem(links[link]);
        }
        context.link = link;
        context.record = this.currentValue && this.currentValue[x || 0];
        debug && console.log("TabularChart._execLink: link.id=" + context.id + ", x=" + x);
        link && this._executeRecordMenu(context);
    },

    _showDrillUp: function(show) {
        //     if (show) {
        //         this._drillUpGroup.show();
        //     } else {
        //         this._drillUpGroup.hide();
        //     }
        // TODO: Does not work. Find an alternative
        // -----------------------------------------
        // var drillElt = this._chart.exportSVGElements && this._chart.exportSVGElements.filter(function(e) {
        //     return e.id === "drillUp";
        // });
        // if (!(drillElt[0] && drillElt[0].element)) return;
        // if (show) {
        //     drillElt[0].element.removeAttribute("display");
        // } else {
        //     drillElt[0].element.setAttribute("display", "none");
        // }
    },
    _drill: function(serie, up) {
        var self = this,
            cube = this.$prototype.$cube,
            meta = self._meta,
            i = meta.drill.currAxisHier,
            stack = self._meta.drill.stack;

        if (up && meta.drillUpLink) {
            return this._execLink(meta.drillUpLink);
        } else if (!up && meta.drillDownLink) {
            return this._execLink(meta.drillDownLink, serie.x);
        }

        if (up) {
            // already on top ?
            if (stack.length < 2) return;
            stack.shift();
            meta.drill.currAxisHier--;
            self._showDrillUp(meta.drill.currAxisHier > 0);
            self.
            this._fetch(stack[0]);
            return;
        }

        var proto = stack[0],
            axis0 = proto.$axes && proto.$axes[0];

        if (!axis0) return;

        var members = axis0.$members = (axis0.$members || []);

        stack.unshift(objectClone(proto, true));
        proto = stack[0];
        axis0 = proto.$axes && proto.$axes[0];
        members = axis0.$members;
        var hierarchies = axis0.$hierarchies;

        var cubeHier = cube.$hierarchies[hierarchies[i][0]];
        if (hierarchies[i][2] == (cubeHier.$properties ? cubeHier.$properties.length - 1 : -1)) {
            hierarchies[i].splice(1, 2, 0, 0);
            hierarchies[i + 1].splice(1, 2, 1, 0);
            meta.drill.currAxisHier++;
        } else {
            hierarchies[i][2]++;
        }
        if (members.length < i + 1) {
            members[i] = [];
        }
        members[i].push([serie ? "" + serie.x : "???"]);

        self._showDrillUp(meta.drill.currAxisHier > 0);

        this._fetch(proto);
    },
    _fetch: function(proto) {
        this.fetch({
            jsonParams: {
                $axes: proto.$axes,
                $slicer: proto.$slicer
            }
        });
    },
    // --------------------------------------------------------------------------------
    // Chart management
    // --------------------------------------------------------------------------------
    _setChart: function(categories, series, data) {
        var self = this;
        alert('_setChart NIY');
/*
         self._chart.xAxis[0].setCategories(categories);
         self._chart.series[0].remove();
         self._chart.addSeries({
         name : name,
         proto : proto,
         //color : color || 'red'
         });
         */
    },
    _setType: function(series, newType) {
        var chart = series.chart;
        var newSeries = {
            id: series.options.id,
            type: newType,
            name: series.name,
            data: series.options.data,
            visible: series.visible,
            stack: series.stack,
            color: series.color
        };
        series.remove();
        chart.addSeries(newSeries, false);
    },

    destroy: function() {
        this._chart && this._chart.destroy();
    }
});

function _isCubeValid(cube, proto) {
    return !!(cube && cube.$hierarchies && proto.$axes && proto.$axes.length > 0 //
    && proto.$axes[0].$hierarchies && proto.$axes[0].$hierarchies.length > 0);
}

function _formatValue(v, format) {

}