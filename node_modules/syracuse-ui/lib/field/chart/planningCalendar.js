"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var Article = require("syracuse-ui/lib/article/article").Article;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var date = require('syracuse-core/lib/types/date');
require('syracuse-ui/deps/fullcalendar/fullcalendar');

var debug = false;

var aspectRatio = 2.5;

var _localize = {
	"year": "year",
	"month": "month",
	"week": "week",
	"day": "day",
};

var _days = [0, 1, 2, 3, 4, 5, 6];
var _months = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
var debug = false;

/**
 * Returns true if the object is not null or undefined. Like MooTools' $.defined.
 * @param {Object} obj
 */
function defined(obj) {
	return obj !== 'undefined' && obj !== null;
}

function PlanningCalendar() {}

exports.PlanningCalendar = helpers.defineClass(PlanningCalendar, Article, {

	resizeChart: function() {
		debug && console.log("PlanningCalendar.resize");

		this.displayed = true;

		if (this.calendar) {
			var self = this;
			if (this.resizeTimer)
				clearTimeout(this.resizeTimer);
			this.resizeTimer = setTimeout(function() {
				if (self.calendar) {
					if (self.layoutSlot.clientWidth) {
						debug && self.calendar && console.log("PlanningCalendar.resizeTimer " + self.id + ": resize(" + self.calendar.size.width + ")");

						// width minus 1 because of scrollbar issue on firefox
						self._resize(Math.max(self.calendar.size.width ? self.calendar.size.width : 0, self.layoutSlot.clientWidth) - 1);
					}
				}
			}, 200);
		}
	},

	drawBox: function() {
		debug && console.log("PlanningCalendar.drawBox");

		var proto = this.$prototype;
		proto.$properties = proto.$item && proto.$item.$properties;

		this._drawBox && this._drawBox();
	},

	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		var tabularChart = false;

		debug && console.log("PlanningCalendar.setDataBind");

		if (this._preSetDataBind && !this._preSetDataBind(dataRecordSet, parentDataRecord, metaData)) {
			return;
		}

		if ((this.$item.$category && this.$item.$category == "tabularChart") || (this.$prototype.$type == "application/x-array")) {
			this._fixDataSet();
			tabularChart = true;
		}

		this._setDataBind && this._setDataBind(tabularChart ? this.dataset : dataRecordSet, parentDataRecord, metaData);
	},

	_resize: function(width) {
		if (!this._widget)
			return;

		this._widget.attr('style', 'width: ' + width + 'px; margin: 0 auto;');
		this.calendar && this._widget.fullCalendar('option', 'aspectRatio', aspectRatio);
	},

	_createWidget: function() {
		var self = this;

		var calendar = self._widget.fullCalendar({

			aspectRatio: aspectRatio,

			header: {
				left: 'prev,next',
				center: 'title',
				right: 'planningYear,planningMonth'
			},

			planningCalendar: true,
			planningSlotsPerCell: this.planningSlotsPerCell,
			planningDayTypes: this.planningDayTypes,
			defaultView: this.defaultView,
			defaultDate: this.calendarYear,

			buttonText: {
				year: _localize.year,
				month: _localize.month,
				week: _localize.week,
				day: _localize.day,
			},

			monthNames: _months.map(function(i) {
				return date.monthName(i + 1);
			}),
			monthNamesShort: _months.map(function(i) {
				return date.monthName(i + 1, true);
			}),
			dayNames: _days.map(function(i) {
				return date.dayName(i);
			}),
			dayNamesShort: _days.map(function(i) {
				return date.dayName(i, true);
			}),
			firstDay: 1,

			selectable: false,
			selectHelper: false,

			select: function(start, end, allDay) {},
			unselect: function(ev) {
				debug && console.log("calendar.unselect " + ev);
			},
			editable: false,

			events: function(start, end, timezone, callback) {
				var events = self._events;
				callback(events || []);
			},

			// ui events
			loading: function(inProgress) {
				debug && console.log("planningCalendar.loading " + inProgress);
			},
			viewRender: function(planningView) {
				// set the default view to the new view name in order to maintain the view type when changing between years.
				self.defaultView = planningView.name;
				debug && console.log("planningCalendar.viewRender");
			},
			viewDisplay: function() {
				debug && console.log("planningCalendar.viewDisplay");
			},
			windowResize: function() {
				debug && console.log("planningCalendar.windowResize");
			},
			eventRender: function(event) {
				debug && console.log("planningCalendar.eventRender " + event);
			},
			eventAfterRender: function(event) {
				debug && console.log("planningCalendar.eventAfterRender " + event);
			},
			eventResizeStart: function(event) {
				debug && console.log("planningCalendar.eventResizeStart " + event);
			},
			eventResizeStop: function(event) {
				debug && console.log("planningCalendar.eventResizeStop " + event);
			},
			eventResize: function(event, dayDelta, minuteDelta) {
				debug && console.log("planningCalendar.eventResize " + event);
			},
			dayClick: function(date, allDay) {
				debug && console.log("planningCalendar.dayClick " + date);
			},
			eventClick: function(event) {
				debug && alert(event.title);
			},
			eventMouseover: function(event) {
				debug && console.log("planningCalendar.eventMouseover " + event);
			},
			eventMouseout: function(event) {
				debug && console.log("planningCalendar.eventMouseout " + event);
			},
			eventDragStart: function(event) {
				debug && console.log("planningCalendar.eventDragStart " + event);
			},
			eventDragStop: function(event) {
				debug && console.log("calendar.eventDragStop " + event);
			},
			eventDrop: function(event, dayDelta, minuteDelta, allDay) {
				debug && console.log("planningCalendar.eventDrop " + event);
			},
			drop: function(date, b) {
				debug && console.log("planningCalendar.drop " + date);
			},
		});
		self.calendar = calendar;
	},

	_events: function() {
		debug && console.log("Events");
	},

	_drawBox: function() {
		var self = this;

		_localize = locale.resources(module)();

		var id = "a" + helpers.uuid.generate();

		self._widget = $('<div />').attr('id', "cal_" + id).appendTo(this.layoutSlot);
	},

	_preSetDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		return !(parentDataRecord && parentDataRecord.$isPartialDelta);
	},

	_setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		var self = this;
		debug && console.log("PlanningCalendar.setDataBind " + this.id + ": dataset=" + (this.dataset && this.dataset.length) + " , size=(" + this.layoutSlot.clientWidth + ", " + this.layoutSlot.clientHeight + ")");

		var $bindings = self.$prototype.$decorator.$bindings;
		self.planningSlotsPerCell = $bindings.SLOT.length;

		if (dataRecordSet === 'undefined' || dataRecordSet.length === 0) {
			return;
		}

		var renderedYear = self.calendarYear && self.calendarYear.slice(0, 4);

		if (dataRecordSet) {
			self._events = [];
			dataRecordSet.forEach(function(e) {
				var eventDate = e[$bindings.TECDAT].substring(0, 10);
				var eventType = e[$bindings.TYPDAY];
				var eventSlotData = $bindings.SLOT &&
					$bindings.SLOT.map(function($bind) {
						return e[$bind];
					}) || [];

				eventSlotData.forEach(function(slot, i) {
					self._events.push({
						title: '',
						start: eventDate,
						end: eventDate,
						dayType: eventType,
						slotType: slot,
						slot: i
					});
				});
			});

			self.calendarYear = self._events[5].start;
		}

		self.planningDayTypes = [];
		self.$prototype.$decorator.$events &&
			self.$prototype.$decorator.$events.forEach(function(dayType) {
				self.planningDayTypes.push(syra_site.expressionMaker.render(self, dayType));
			});

		if (self.calendar) {
			if (renderedYear && renderedYear !== self.calendarYear.slice(0, 4)) {
				// We've changed calendar year, so regenerate the entire calendar - not just the events!
				$(self.layoutSlot).find("div[id*=cal]").remove();
				self._drawBox();
			} else {
				self._widget.fullCalendar('refetchEvents');
			}
		} else {
			var view = self.$prototype.$decorator.$style;
			if (view == 'year') {
				self.defaultView = 'planningYear';
			} else {
				self.defaultView = 'planningMonth';
			}
		}

		self._createWidget();
	},

	_fixDataSet: function() {
		this.ensureDataSet();

		var fixedDataSet = this.dataset;
		if (this.page.externalAdapter.fusionSite) {
			var last = fixedDataSet && fixedDataSet.length > 0 && fixedDataSet[fixedDataSet.length - 1] || {};

			// An improvement can be done be using getDataStoreRecordsNumber() exposed by Convergence window class
			if (sapUtil.isEmptyGridDataRecordEx(this.$prototype.$properties, last)) {
				fixedDataSet = fixedDataSet.slice(0, -1);
			}
		}
		this.dataset = fixedDataSet;
	}
});