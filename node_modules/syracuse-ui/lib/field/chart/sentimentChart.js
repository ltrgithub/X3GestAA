"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
require('syracuse-ui/deps/highcharts/highcharts.src');
require('syracuse-ui/deps/highcharts/highcharts-more.src');

var trace = function(m) {
	console.log("SentimentChart - " + m);
};

function SentimentChart() {}

exports.SentimentChart = helpers.defineClass(SentimentChart, Field, {
	resizeArticle: function(resize) {
		// if (this.propertiesSlot) {
		// 	var page = this.designedArticle.page;
		// 	if (page.isVignettePage) {
		// 		page = page.getMasterPage().landingPageMaster;
		// 	}
		// 	if (this.isDesignBarVisible) {
		// 		if (page.scrollview && this.treesBar && this.treebarSlot.parentNode) {
		// 			this.treesBar.resizeBar();
		// 			this.asideParent.domItem.style.paddingLeft = this.treebarSlot.clientWidth + "px";
		// 		}
		// 		if (this.propertiesSlot.parentNode) {
		// 			this.propertiesSlot.style.height = page.barHeight + "px";
		// 			this.asideParent.domItem.style.paddingRight = this.propertiesSlot.clientWidth + "px";
		// 		}
		// 	} else {
		// 		this.asideParent.domItem.style.paddingRight = "";
		// 		this.asideParent.domItem.style.paddingLeft = "";
		// 		this.designedArticle.menuBar && this.designedArticle.menuBar.resizeSplitter();
		// 		this.designedArticle.fusionBar && this.designedArticle.fusionBar.resizeSplitter();
		// 	}
		// }
		trace("resizeArticle");
		Field.prototype.resizeArticle.call(this, resize);
	},
	setDataValue: function(value) {
		this.articleParent.setMustBeResized();
		this.currentValue = value;
		trace && trace(value);

		this.createChart(value);
		// if (value != null) {
		// 	var $path = syra_site.$item.$iconPath + (this.$icon.$path || "x3icons/");
		// 	this.sentimentChartSlot.style.backgroundImage = "url('" + $path + this.currentValue + ".png')";
		// } else {
		// 	this.sentimentChartSlot.style.backgroundImage = "";
		// }


	},
	getDataValue: function() {
		return this.currentValue || "";
	},
	loadBox: function() {
		this.$item.$isEditMode = this.$item.$isEditMode || false;
		if (this.$item.$isTitleHidden == undefined) {
			this.$item.$isTitleHidden = true;
		}
		Field.prototype.loadBox.call(this);
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
		if (state.$isDisabled !== undefined) {
			syra_site.dom.disableItem(this.sentimentChartSlot, this.$isDisabled);
		}
	},
	focus: function() {
		if (!this.$isHidden && !this.$isDisabled) {
			this.sentimentChartSlot.focus();
			this.scrollToField();
			return true;
		}
		this.scrollToField();
		return false;
	},
	onInputClick: function(input, event) {
		if (!this.$isDisabled) {
			// if (this.articleParent.onSentimentChartClick) {
			// 	this.articleParent.onIconFieldClick(this);
			// }
		}
	},
	onInputFieldClick: function(event) {
		if (!this.isDesigning) {
			Field.prototype.onInputFieldClick.call(this, event);
		}
	},
	renderChart: function(metaData) {
		if (!this.sentimentChartSlot) {
			this.sentimentChartSlot = document.createElement("div");
			this.sentimentChartSlot.setAttribute("data-s-field-extra", this.id);
			this.sentimentChartSlot.style.width = "600px";
			this.sentimentChartSlot.style.height = "400px";
			this._dataValue.appendChild(this.sentimentChartSlot);
		}

		var css = "";
		// if (this.$links = metaData.$links) {
		// 	this.sentimentChartSlot.setAttribute("href", "#");
		// 	syra_site.dom.toggleClass(this._dataValue, "s-icon-link", this.sentimentChartSlot != null);
		// 	css = " s-icon-link";
		// 	this.sentimentChartSlot.syraOnClick = "onInputFieldClick";
		// } else {
		// 	syra_site.dom.toggleClass(this._dataValue, this.$skin + "-icon", true);
		// }
		if (syra_site.isDocumentRTL) {
			css += " s-rtl-img ";
		}
		// this.sentimentChartSlot.className = this.$skin + "-value-icon s-icon-link " + css;
		if (this.$isDisabled !== undefined) {
			syra_site.dom.disableItem(this.sentimentChartSlot, this.$isDisabled);
		}
		if (this.currentValue != null) {
			this.setDataValue(this.currentValue);
		}
	},
	render: function() {
		this.$icon = this.$item.$icon || {};
		this.renderChart(this.$field);
	},

	createChart: function(value) {
		var self = this;
		this._chart && this._chart.destroy();
		// http://localhost:8124/sdata/syracuse/sentiment/collaboration/$sentiment('name')
		// http://localhost:8124/twitter/sentiment?entity=article&key=yaourt&keywords=danone
		// value = "citroen%20cactus";
		syra_controller.sendRequest(null, {
			$location: {
				$url: "http://localhost:8124/twitter/sentiment?entity=article&key=car&keywords=" + value,
				$contentType: "application/json",
				$type: "application/json"
			}
		}, function(data, response) {
			trace('lazyload: ' + JSON.stringify(data));
			var serie1, serie2;
			serie1 = data.$resources.filter(function(r) {
				return r.sentiment.type === "positive";
			}).map(function(r) {
				return [r.tweet.follower_count, parseFloat(r.sentiment.score) || 0, r.tweet.retweet_count];
			});
			serie2 = data.$resources.filter(function(r) {
				return r.sentiment.type === "negative";
			}).map(function(r) {
				return [r.tweet.follower_count, parseFloat(r.sentiment.score) || 0, r.tweet.retweet_count];
			});
			var options = {

				chart: {
					renderTo: self.sentimentChartSlot,
					type: 'bubble',
					zoomType: 'xy'
				},

				title: {
					text: 'Highcharts Bubbles'
				},

				series: [{
					data: serie1,
					marker: {
						fillColor: {
							radialGradient: {
								cx: 0.4,
								cy: 0.3,
								r: 0.7
							},
							stops: [
								[0, 'rgba(255,255,255,0.5)'],
								[1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0.5).get('rgba')]
							]
						}
					}

				}, {
					data: serie2,
					marker: {
						fillColor: {
							radialGradient: {
								cx: 0.4,
								cy: 0.3,
								r: 0.7
							},
							stops: [
								[0, 'rgba(255,255,255,0.5)'],
								[1, Highcharts.Color(Highcharts.getOptions().colors[1]).setOpacity(0.5).get('rgba')]
							]
						}
					}
				}]
				// series: [{
				//     data: [[97, 36, 79], [94, 74, 60], [68, 76, 58], [64, 87, 56], [68, 27, 73], [74, 99, 42], [7, 93, 87], [51, 69, 40], [38, 23, 33], [57, 86, 31]]
				// }, {
				//     data: [[25, 10, 87], [2, 75, 59], [11, 54, 8], [86, 55, 93], [5, 3, 58], [90, 63, 44], [91, 33, 17], [97, 3, 56], [15, 67, 48], [54, 25, 81]]
				// }, {
				//     data: [[47, 47, 21], [20, 12, 4], [6, 76, 91], [38, 30, 60], [57, 98, 64], [61, 17, 80], [83, 60, 13], [67, 78, 75], [64, 12, 10], [30, 77, 82]]
				// }]
			};

			self._chart = new Highcharts.Chart(options);

		}, function(error) {
			self.showErrors([error.message]);
		});


	},

	dispose: function() {
		this.SentimentChart = null;
		this._chart && this._chart.destroy();
		Field.prototype.dispose.call(this);
	}
});