"use strict";
var jsxml = require("jsxml/lib/jsxml");
var helpers = require('syracuse-core/lib/helpers');
var forEachKey = helpers.object.forEachKey;

var _types = {
	"graph": ["graph", null, "", null],
	"agenda": ["agenda", "AGD", "FAG", null],
	"calendar": ["calendar", "", "", null],
	"gantt": ["gantt", "GAT", "FGA", null],
	"query-designer": ["queryDesigner", null, "FQD", {
		"xmlNative": true,
		"_height": "450px"
	}],
	"pad-designer": ["padDesigner", null, "FPADT", null],
	"pad-player": ["padPlayer", null, "FDADP", null]
};
_types["cube"] = _types["graph"];
_types["padtool"] = _types["pad-designer"];
_types["padplayer"] = _types["pad-player"];
_types["querydesigner"] = _types["query-designer"];

function _typeInfo($stereoType) {
	var type = _types[$stereoType];
	return type && {
		name: type[0],
		dataSrc: type[1],
		visCmp: type[2],
		defOpts: type[3]
	} || {
		name: "",
		dataSrc: "",
		visCmp: ""
	};
}

exports.typeInfo = _typeInfo;

exports.xmlBuilder = function($stereoType, options) {
	var type = _typeInfo($stereoType),
		root = {
			X3PORTAL: {
				Data: {},
				Technical: {
					HtcProvType: {
						$value: options && options.provider || "TABLEBLOC"
					},
					DataSrc: {
						$: {
							Type: options && options.type || type.dataSrc,
							Code: ""
						}
					},
					VisCmp: {
						$: {
							Type: options && options.vtype || type.visCmp,
						},
					},
					UserLang: {
						$value: options && options.userLang || "BRI"
					}
				},
				Messages: {}
			}
		},
		dataSrc = options && options.type || type.dataSrc;

	if (!root.X3PORTAL.Technical.DataSrc.$.Type) {
		delete root.X3PORTAL.Technical.DataSrc;
	}

	function _toXml() {
		return jsxml.stringify(root);
	}

	function _addNode(target, value, attr, cdata) {
		var parent = target.parent.node,
			node = {},
			key = target.key;
		return _addChild(parent, key, value, attr, cdata);
	}

	function _addChild(parent, key, value, attr, cdata) {
		var node = {};
		if (value != null) node.$value = value;
		if (attr != null) node.$ = attr;
		if (cdata != null) node.$cdata = cdata;
		return _appendNode(parent, key, node);
	}

	function _appendNode(parent, key, node) {
		if (parent[key] == null) {
			parent[key] = node;
		} else {
			if (!Array.isArray(parent[key])) {
				parent[key] = [parent[key]];
			}
			parent[key].push(node);
		}
		return node;
	}

	function _addPath(path, value, attr, cdata, opts) {
		var sep = opts && opts.sep || ".",
			parts = path.split(sep),
			target = parts.reduce(function(res, elem) {
				if (res.node == null) {
					res.node = res.parent.node[res.key] = {};
				}
				return {
					parent: res,
					key: elem,
					node: res.node[elem]
				};
			}, {
				parent: {
					parent: null,
					key: "root",
					node: root
				},
				key: "X3PORTAL",
				node: root.X3PORTAL
			});
		return _addNode(target, value, attr);
	}

	return {
		$: root.X3PORTAL,
		xml: _toXml,
		addNode: function(key, value, attr, cdata, opts) {
			return _addPath(key, value, attr, cdata, opts);
		},
		addChild: function(parent, key, value, attr, cdata) {
			if (typeof(key) === "object") {
				var keys = Object.keys(key).filter(function(k) {
					return k[0] !== "$";
				});
				if (keys.length !== 1) throw new Error("bad element expected 1 child got " + keys.length);
				return _appendNode(parent, keys[0], key[keys[0]]);
			}
			return _addChild(parent, key, value, attr);
		}
	};
};