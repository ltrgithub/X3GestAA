"use strict";

var dataTypes = {
	defaultType: "application/x-string",
	stringType: "application/x-string",
	collectionType: "application/x-array",
	treeType: "application/x-tree",
	booleanType: "application/x-boolean",
	rtfType: "text/rtf",
	dateType: "application/x-date",
	choiceType: "application/x-choice",
	integerType: "application/x-integer",
	iconType: "application/x-icon",
	decType: "application/x-decimal",
	realType: "application/x-real",
	timeType: "application/x-time",
	passwdType: "application/x-password",
	htmlType: "text/html",
	imageType: "image",
	reference: "application/x-reference"
};

exports.isEmptyRecord = function(props, dataRecord) {
	var empty = true,
		value;
	for (var key in dataRecord) {
		if (props[key]) {
			if ((value = dataRecord[key]) === null) {
				empty = true;
			} else {
				switch (props[key].$type) {
					case dataTypes.stringType:
						empty = (value === "");
						break;
					case dataTypes.booleanType:
						empty = (value === -1);
						break;
					case dataTypes.dateType:
						empty = (value === "");
						break;
					case dataTypes.choiceType:
						empty = (value === -1);
						break;
					case dataTypes.integerType:
						empty = (value === "") || parseInt(value, 10) === 0;
						break;
					case dataTypes.iconType:
						empty = (value === -1 || value === "" || value === "-1");
						break;
					case dataTypes.decType:
						empty = (value === "") || parseFloat(value) === 0;
						break;
					case dataTypes.realType:
						empty = (value === "") || parseFloat(value) === 0;
						break;
					case dataTypes.timeType:
						empty = (value === "");
						break;
					default:
						empty = true;
				}
				if (!empty) {
					return false;
				}
			}
		}
	}
	return empty;
};