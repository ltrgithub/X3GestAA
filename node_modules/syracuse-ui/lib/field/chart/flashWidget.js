"use strict";
var _helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var FieldArticle = require('syracuse-ui/lib/field/fieldArticle').FieldArticle;
var flashWrapper = require("./flashWrapper").flashWrapper;
var util = require('syracuse-ui/lib/fusion/tools/util');
var _sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util');

var debug = false;

function _debugSyraTrans() {
	document.syraTrans = document.syraTrans || {};
	document.syraTrans.logSwitches = {
		all: true
	};
}

function RecordArticle() {}

exports.RecordArticle = _helpers.defineClass(RecordArticle, Article, {
	drawBox: function() {
		var slot = document.createElement("div");
		syra_dom.hide(slot, true);
		this.page.loadNewItem(this.boxParent.layoutSlot.appendChild(slot), {
			$category: "menus",
			$isMenusBag: true
		}, this);
	},
});

function FlashWidget() {}

//ChartArticle =>FieldArticle
exports.FlashWidget = _helpers.defineClass(FlashWidget, FieldArticle, {
	_executeRecordMenu: function(context) {
		if (!this.record) {
			this.record = new RecordArticle();
			this.record.$prototype = this.$prototype.$item;
			this.page.initializeNewItem(this.record, {}, this);
			this.record.loadBox(context.$item);
		} else {
			this.record.applyChange(context.$item);
		}
		var $links = context["$links" || "$actions"];
		$links && syra_menus.click.menuId(this.record, Object.keys($links)[0]);
	},
	showDiagnoses: function(exception, diagnoses, message) {
		var diag, page = _sapUtil.Syra.getPage(this),
			ret = false;
		if (exception) {
			diag = [util.makeDiagnosisFromException(exception)];
		} else
		if (message) {
			diag = [util.makeDiagnosis(message, "warning")];
		}
		if (page && (diag || diagnoses)) {
			_sapUtil.Syra.showDiagnoses(diag || diagnoses, page, null, false);
			ret = true;
		}
		return ret;
	},
	fxgetinitialdata: function(callback, myData) {
		var type = _sapUtil.Syra.getFieldType(this.attachedField || this);
		callback(null, null, type == _sapUtil.Syra.dataTypes.flash ? null : this.$prototype);
		this._protoUpToDate = true;
		var page = this.attachedField && this.attachedField.page;
		if (page && page.dialogWrapper) {
			setTimeout(function() {
				page.resizeArticle();
			}, 100);
		}
	},
	fxgetctxmenu: function(callback, myData, serieUuid, serieLineId) {
		syra_site.closePopups();
		if (!this.attachedField.$isDisabled) {
			this.page.externalAdapter.onGraphClickPicker({
				field: this,
				rcdUuid: serieUuid,
				rcdLineId: serieLineId,
				pickerType: "menus",
				grapLevel: "measure",
				doEvent: function(err, menus) {
					var errEx = null;
					if (!menus && !err) {
						// TODO : default error
						errEx = [{
							"$message": "not yet implemented",
							"$severity": "warning"
						}];
					}
					callback(errEx || err, menus);
				}
			});
		}
	},
	fxexeclink: function(callback, myData, link, options) {
		var data = {
			field: this,
			link: link
		};

		function _result(res) {
			var err = !res ? {
				"$message": "error"
			} : res.$diagnoses || null;
			// No reply is expected
			callback(err, null);
		}
		if (options && options.legacy) {
			debug && _debugSyraTrans();

			var args = link.linkCtx.split("=");
			// LINKVUE = SUBAPSMON:LINKVUE(FONCTION,OBJET,PARAM)
			this.page.externalAdapter.onBlockExRpc({
				field: this.attachedField,
				call: {
					proxy: "LINKVUE",
					values: [args[0].split(",")[0], args[1].substr(0, 3), args[2]],
					callback: _result
				}
			});

		} else
		if (this.page.externalAdapter.onGraphClickLink(data)) {
			this._executeRecordMenu(link);
		}
	},
	fxexecdrill: function(callback, myData, drillParams) {
		delete this._protoUpToDate;
		this.page.fetch({
			jsonParams: {
				$axes: drillParams.$axes,
				$slicer: drillParams.$slicer
			}
		});
	},
	fxnamedsvccall: function(callback, myData, svcParams) {
		alert("Hi, i'm \"" + myData.id + "\" and y should process named service \"" + svcParams.svcId + "\"");
		callback(null, null);
	},
	fxhelpflash: function(callback, myData, svcParams) {
		var helpLegacy = true;
		if (helpLegacy) {
			var page, helpUrl, session = _sapUtil.Syra.getFusionController(this);
			if (svcParams.key && session && (session = session.getSession())) {
				page = _sapUtil.Syra.getPage(this);
				helpUrl = session.getFlashHelpUrl(svcParams.key);
				page && helpUrl && syra_site.helpCenter.open(page, null, helpUrl);
			}
		} else {
			var item, hlpParams = {
					"type": (svcParams && svcParams.type) || _sapUtil.Fusion.helpHandler.vpd.cat
				};
			if (svcParams.key && (item = svcParams.key.lastIndexOf("/")) >= 0) {
				hlpParams.key = svcParams.key.substr(++item);
				this.fxhelp(null, myData, hlpParams);
			}
		}
		if (callback) {
			callback(null, null);
		}
	},
	fxhelp: function(callback, myData, svcParams) {
		var hlpParams = {
			"tokens": []
		}, $fusionController = _sapUtil.Syra.getFusionController(this);
		if ($fusionController && svcParams && svcParams.key && svcParams.type) {
			hlpParams.tokens[0] = svcParams.type == "xhfunc" ? _sapUtil.Fusion.helpHandler.fct.cat : (svcParams.type == "xhfield" ? _sapUtil.Fusion.helpHandler.fld.cat : svcParams.type);
			hlpParams.tokens[1] = (svcParams.key.split("."))[0];
			$fusionController.displayBusinessHelp(hlpParams);
		}
		if (callback) {
			callback(null, null);
		}
	},
	fxspro: function(callback, myData, request) {
		var self = this;

		function _result(res) {
			var err = !res ? {
				"$message": "error"
			} : res.$diagnoses || null,
				reply = {};
			if (!err) {
				reply.data = self.wrapper.rawData;
				reply.result = {
					"data": res.argsModified[0],
					"$diagnoses": {
						"$message": res.argsModified[1],
						"$severity": res.argsModified[2]
					},
					"status": res.argsModified[3]
				};
			}
			callback(err, reply);
		}
		debug && _debugSyraTrans();
		this.page.externalAdapter.onBlockExRpc({
			field: this.attachedField || this,
			call: {
				//AINTERFL:AINTERFL(CLOBD,MESSAG,GRAV,OK)
				proxy: "AINTERFL",
				values: [request],
				callback: _result,
				onError: function() {
					_result({
						"argsModified": ["", [""],
							[""], 1
						]
					});
				}
			}
		});
	},
	drawBox: function() {
		this.isFlashField = true;
		this.$prototype.$properties = this.$prototype.$item && this.$prototype.$item.$properties;
		this.wrapper = this._createWrapper();
		this.domItem = this.wrapper.$$elt[0];
		if (!this.$item.$isListEmbeded) {
			this.articleParent.bind(this, this.$item.$bind);
		}
		if (this.$field && this.$field.$type == _sapUtil.Syra.dataTypes.flash) {
			this.domItem.className += " s-field-flash";
		}
		this.layoutSlot.className += " flash-slot";
	},

	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		if ((this.$item.$category && this.$item.$category == "tabularChart") || (this.$prototype.$type == "application/x-array")) {
			this.ensureDataSet();
			var fixedDataSet = this.dataset;
			if (this.page.externalAdapter.fusionSite) {
				var last = fixedDataSet && fixedDataSet.length > 0 && fixedDataSet[fixedDataSet.length - 1] || {};
				// An improvement can be done be using getDataStoreRecordsNumber() exposed by Convergence window class
				if (_sapUtil.Fusion.isEmptyGridDataRecordEx(this.$prototype.$properties, last)) {
					fixedDataSet = fixedDataSet.slice(0, -1);
				}
			}
			this.dataset = fixedDataSet;
		}
		var valueEx = null,
			type;
		this.currentValue = dataRecordSet;
		if (this.wrapper) {
			type = this.attachedField ? _sapUtil.Syra.getFieldType(this.attachedField) : null;
			//valueEx = type && type == _sapUtil.Syra.dataTypes.collectionType && this.attachedField.dataset && Array.isArray(this.attachedField.dataset) && this.attachedField.dataset.length > 0 ? this.attachedField.dataset : null;
			//this.wrapper.setData(valueEx || this.dataset, this._protoUpToDate ? null : this.$prototype, metaData);
			if ((dataRecordSet && (dataRecordSet.length > 0 || this.wrapper.typeInfo.acceptEmptyData)) || !this._protoUpToDate || (metaData && !this._protoUpToDate)) {
				this.wrapper.setData(dataRecordSet, this._protoUpToDate ? null : this.$prototype, metaData);
			}
			this._protoUpToDate = true;
		}
	},
	applyDesignMetaData: function(metadata, designing) {
		//
	},
	_createWrapper: function(componentType) {
		var id = this.id + "_flash",
			proto = this.$prototype,
			$fusionController = _sapUtil.Syra.getFusionController(this);
		return new flashWrapper(componentType, {
			cont: $(this.layoutSlot),
			id: id,
			swf: "/syracuse-ui/addins/sageFlash/swf/FLASH",
			base: ".",
			bgcolor: "#FFFFFF",
			width: "100%",
			height: "100%"
		}, {
			instance: this,
			id: id
		}, {
			dataBinding: this.$item.$bind,
			legacyRequest: ($fusionController != null),
			legacyLinks: ($fusionController != null),
			userLang: $fusionController && $fusionController.getLang()
		});
	},
	getFieldEvalTitle: function() {
		return this.page.externalAdapter.getFieldEvalTitle(this);
	},
	getDataValue: function() {
		return this.wrapper.getData();
	},
	dirty: function() {
		return this.wrapper.isDirty();
	},
	focus: function() {
		this.domItem.focus();
		return true;
	},
	getEnumeration: function(code) {
		var $fusionController = _sapUtil.Syra.getFusionController(this),
			fusionSess = $fusionController ? $fusionController.getSession() : null;
		return fusionSess && code ? fusionSess.getMenloc(code) : null;
	},
	onFieldInputEvent: function(event) {
		var self = this;
		if (self.page && self.page.externalAdapter) {
			self.page.externalAdapter.onFieldEvent({
				field: self,
				event: event,
				doEvent: function() {
					var fnct = "onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1);
					if (self[fnct]) {
						self[fnct](event.target, event);
					}
				}
			});
		}
	}
});

function CubeChart() {}

exports.CubeChart = _helpers.defineClass(CubeChart, FlashWidget, {});