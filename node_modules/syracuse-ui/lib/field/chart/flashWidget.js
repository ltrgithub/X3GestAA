"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;
var flashWrapper = require("./flashWrapper").flashWrapper;
var syraUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Syra;


function RecordArticle() {}

exports.RecordArticle = helpers.defineClass(RecordArticle, Article, {
    drawBox: function() {
        this.page.loadNewItem($("<div style='display:none'/>").appendTo(this.boxParent.$$container), {
            $category: "links"
        }, this);
    },
});


function FlashWidget() {}

exports.FlashWidget = helpers.defineClass(FlashWidget, Article, {
    _executeRecordMenu: function(context) {
        if (!this.recordArticle) {
            this.recordArticle = new RecordArticle();
            this.recordArticle.$prototype = this.$prototype.$item;
            this.page.initializeNewItem(this.recordArticle, {}, this);
            this.recordArticle.loadBox(context.$item);
        } else {
            this.recordArticle.applyChange(context.$item);
        }
        this.recordArticle.menuItems[Object.keys(context["$links" || "$actions"])[0]][0].click();
    },
    fxgetinitialdata: function(callback, myData) {
        callback(null, null, this.$prototype);
        this._protoUpToDate = true;
    },
    fxgetctxmenu: function(callback, myData, serieId) {
        document.site.onBeforClick();
        if (!this.attachedField.$isDisabled) {
            this.attachedField.page.externalAdapter.onGraphClickPicker({
                field: this,
                rcdUuid: serieId,
                pickerType: "menus",
                grapLevel: "measure",
                doEvent: function(err, menus) {
                    var errEx = null;
                    if (!menus && !err) {
                        // TODO : default error
                        errEx = [{
                            "message": "not yet implemented",
                            "severity": "warning"
                        }];
                    }
                    callback(errEx || err, menus);
                }
            });
        }
    },
    fxexeclink: function(callback, myData, link) {
        var data = {
            "field": this,
            "link": link
        };
        if (this.page.externalAdapter.onGraphClickLink(data)) {
            this._executeRecordMenu(link);
        }
    },
    fxexecdrill: function(callback, myData, drillParams) {
        delete this._protoUpToDate;
        this.fetch({
            jsonParams: {
                $axes: drillParams.$axes,
                $slicer: drillParams.$slicer
            }
        });
    },
    fxnamedsvccall: function(callback, myData, svcParams) {
        alert("Hi, i'm \"" + myData.id + "\" and y should process named service \"" + svcParams.svcId + "\"");
        callback(null, null);
    },
    fxspro: function(callback, myData, request) {
        var calldef = {
            field: this.attachedField,
            data: {
                call: {
                    proxy: "AINTERFL",
                    values: [request],
                    callback:callback
                }
            },
        };
        if (this.page.externalAdapter.onBlockExRpc(calldef)) {}
    },
    drawBox: function() {
        this.wrapper = this._createWrapper();
        this.$$item = this.wrapper.$$elt;
        this.getArticleParent().bind(this, this.$item.$bind);
    },
    setDataBind: function(value, record, metaData) {
        var valueEx = null,
            type;
        if (value && this.wrapper) {
            type = this.attachedField ? syraUtil.getFieldType(this.attachedField) : null;
            valueEx = type && type == syraUtil.dataTypes.collectionType && this.attachedField.dataset && Array.isArray(this.attachedField.dataset) && this.attachedField.dataset.length > 0 ? this.attachedField.dataset : null;
            this.wrapper.setData(valueEx || value, this._protoUpToDate ? null : this.$prototype, metaData);
            this._protoUpToDate = true;
        }
    },
    dispose: function() {
        delete this.$$item;
        delete this.wrapper;
    },
    applyDesignMetaData: function(metadata, onAuthoring) {
        //
    },
    _createWrapper: function(componentType) {
        var id = this.id + "_flash",
            proto = this.$prototype;
        return new flashWrapper(componentType, {
            cont: this.$$container,
            id: id,
            swf: "/syracuse-ui/addins/sageFlash/swf/FLASH",
            base: ".",
            bgcolor: "#FFFFFF",
            width: "100%",
            height: "100%"
        }, {
            instance: this,
            id: id
        }, {
            dataBinding: this.$item.$bind
        });
    },
    getEnumeration: function(code) {
        var $fusionController = syraUtil.getFusionController(this),
            fusionSess = $fusionController ? $fusionController.getSession() : null;
        return fusionSess && code ? fusionSess.getMenloc(code) : null;
    },
    // for compatibility : TODO remove later
    getLocalMenu: function(code) {
        return this.getEnumeration(code);
    }
});

function CubeChart() {}

exports.CubeChart = helpers.defineClass(CubeChart, FlashWidget, {});