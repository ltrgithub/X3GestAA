"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function TagCloud() {}

exports.tagCloud = helpers.defineClass(TagCloud, Field, {
	loadBox: function(initData) {
		var self = this;
		syra_site.loadStyleSheet("d3.css");
		require.async('syracuse-ui/deps/d3/index', function(err, module) {
			self._d3 = module;
			require.async('syracuse-ui/deps/d3/d3LayoutCloud', function(err, module) {
				self._d3.layout.cloud = module.cloud;
				self._fontSize = self._d3.scale.log();
				self._minFontSize = 15;
				self._maxFontSize = 30;
				self._width = 350;
				self._height = 350;
				self._color = ["#024731", "#69923a", "#a8b400", "#3a3565", "#652d86", "#c1afe5"];
				Field.prototype.loadBox.call(self, initData);
			});
		});

	},
	setDataValue: function(value) {
		this.currentValue = value;
		var self = this;
		if (value && value.$url) {
			self.page.fetch({
				$location: {
					$url: syra_site.expressionMaker.parse(self.articleParent, value.$url)
				}
			}, function(data, response) {
				self.$data = data;
				self._updateGraph();
			});
		}
	},
	_updateGraph: function() {
		var self = this;

		function draw(words, bounds) {
			self.$$svg.selectAll("g").remove();
			var vis = self.$$svg.append("g").attr("transform", "translate(" + self._width / 2 + "," + self._height / 2 + ")");
			vis.selectAll("text").data(words).enter().append("text").on("click", function(d) {
				syra_controller.openPage(self.articleParent, d.data.$links.$default, d.data);
			}).style("opacity", 1e-6).transition().duration(1000).style("opacity", 1).attr("transform", function(d) {
				return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
			}).style("font-size", function(d) {
				return d.size + "px";
			}).style("fill", function(d) {
				// no category = 0
				return self._color[(d.data.$category != null ? d.data.$category + 1 : 0)];
			}).attr("class", "d3-tag-cloud-nodetext").attr("text-anchor", "middle").text(function(d) {
				return d.text;
			});
		}
		// remap data and sort descending
		var nodes = self.$data.$nodes.map(function(d) {
			return {
				text: d.description,
				size: d.$weight,
				data: d
			};
		}).sort(function(a, b) {
			return (b.size - a.size);
		});
		// rewrite map to be able to add data property
		var oldMap = nodes.map;
		nodes.map = function(cb, thisArg) {
			var result = [];
			var i = 0;
			nodes.forEach(function(node) {
				var mapped = cb.call(thisArg, node, i++, thisArg);
				mapped.data = node.data;
				result.push(mapped);
			});
			return result;
		};
		// compute range
		self._fontSize.range([self._minFontSize, self._maxFontSize]);
		nodes.length && self._fontSize.domain([nodes[nodes.length - 1].size, nodes[0].size]);
		//
		self._d3.layout.cloud().size([self._width, self._height]).timeInterval(10).spiral("archimedean").words(nodes) //	    .rotate(function() { return ~~(Math.random() * 2) * 60; })
		.rotate(function() {
			return 0;
		}).fontSize(function(d) {
			return self._fontSize(d.size);
		}).on("end", draw).start();
	},

	render: function() {
		var id = "a" + helpers.uuid.generate();
		this._dataValue.setAttribute("id", id);
		var fieldContainer = this._d3.select("#" + id);
		var svgDiv = fieldContainer.append("div").attr("class", "d3-tag-cloud-svg-container");
		this.$$svg = svgDiv.append("svg").attr("width", this._width).attr("height", this._height);
		this.$nodes = [];
	}
});