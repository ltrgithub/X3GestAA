"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
//var d3 = require('syracuse-ui/deps/graph/d3v2').d3;
var d3 = require('syracuse-ui/deps/d3');
// require d3.layout.cloud adds cloud to d3 layouts.
d3.layout.cloud = require('syracuse-ui/deps/graph/d3LayoutCloud').cloud;

var width = 350,
	height = 350;
var minFontSize = 15,
	maxFontSize = 30;
var color = ["#024731", "#69923a", "#a8b400", "#3a3565", "#652d86", "#c1afe5"];
//var color = ["#00338d", "#00a1de", "#a0d6d2", "#3a3565", "#652d86", "#c1afe5"];
//
var fontSize = d3.scale.log();

function _updateGraph(field) {
	function draw(words, bounds) {
		/*    	var scale = bounds ? Math.min(
         width / Math.abs(bounds[1].x - width / 2),
         width / Math.abs(bounds[0].x - width / 2),
         height / Math.abs(bounds[1].y - height / 2),
         height / Math.abs(bounds[0].y - height / 2)) / 2 : 1;*/
		//
		field.$$svg.selectAll("g").remove();
		var vis = field.$$svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
		vis.selectAll("text").data(words).enter().append("text").on("click", function(d) {
			syra_controller.openPage(field.articleParent, d.data.$links.$default, d.data);
		}).style("opacity", 1e-6).transition().duration(1000).style("opacity", 1).attr("transform", function(d) {
			return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
		}).style("font-size", function(d) {
			return d.size + "px";
		}).style("fill", function(d) {
			// no category = 0
			return color[(d.data.$category != null ? d.data.$category + 1 : 0)];
		}).attr("class", "d3-tag-cloud-nodetext").attr("text-anchor", "middle").text(function(d) {
			return d.text;
		});
		//        vis.transition().attr("transform", "translate(" + [width >> 1, height >> 1] + ")scale(" + scale + ")");
	}
	// remap data and sort descending
	var nodes = field.$data.$nodes.map(function(d) {
		return {
			text: d.description,
			size: d.$weight,
			data: d
		};
	}).sort(function(a, b) {
		return (b.size - a.size);
	});
	// rewrite map to be able to add data property
	var oldMap = nodes.map;
	nodes.map = function(cb, thisArg) {
		var result = [];
		var i = 0;
		nodes.forEach(function(node) {
			var mapped = cb.call(thisArg, node, i++, thisArg);
			mapped.data = node.data;
			result.push(mapped);
		});
		return result;
	};
	// compute range
	fontSize.range([minFontSize, maxFontSize]);
	nodes.length && fontSize.domain([nodes[nodes.length - 1].size, nodes[0].size]);
	//
	d3.layout.cloud().size([width, height]).timeInterval(10).spiral("archimedean").words(nodes) //	    .rotate(function() { return ~~(Math.random() * 2) * 60; })
	.rotate(function() {
		return 0;
	}).fontSize(function(d) {
		return fontSize(d.size);
	}).on("end", draw).start();
}

function TagCloud() {}

exports.tagCloud = helpers.defineClass(TagCloud, Field, {
	setDataValue: function(value) {
		this.currentValue = value;
		var self = this;
		if (value && value.$url) {
			self.articleParent.fetch({
				$location: {
					$url: syra_site.expressionMaker.parse(self.articleParent, value.$url)
				}
			}, function(data, response) {
				self.$data = data;
				_updateGraph(self);
			});
		}
	},
	render: function() {
		var self = this;
		var id = "a" + helpers.uuid.generate();
		this._dataValue.setAttribute("id", id);
		var fieldContainer = d3.select("#" + id);
		var svgDiv = fieldContainer.append("div").attr("class", "d3-tag-cloud-svg-container");
		this.$$svg = svgDiv.append("svg").attr("width", width).attr("height", height);
		// force component setup
		this.$nodes = [];
	}
});