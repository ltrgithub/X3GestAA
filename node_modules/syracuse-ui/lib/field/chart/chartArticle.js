"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var Field = require('syracuse-ui/lib/field/field').Field;

function ChartRecord() {}

helpers.defineClass(ChartRecord, Article, {
	showMenus: function(chartArticle, index, $links, event) {
		this.$prototype = chartArticle.$prototype.$item;
		this.dataset = chartArticle.dataset && chartArticle.dataset[index || 0] || {};
		chartArticle.page.initializeNewItem(this, {}, chartArticle);
		this.loadBox({});
		this.applyChange({
			$links: $links
		});
		syra_menus.showPopup(this, event.target);
	},
	drawBox: function() {},
	onMenuClick: function(menuItem) {
		if (menuItem.page.externalAdapter.onGraphClickLink({
			field: menuItem.articleParent, //chartArticle
			link: {
				linkCtx: menuItem.linkCtx || "",
				linkId: menuItem.linkId
			}
		})) {
			// We should never come here in a Convergence context!!!
			// self._execLink(menuItem);
		}
		return false;
	}
});


function ChartArticle() {}

exports.ChartArticle = helpers.defineClass(ChartArticle, Article, {
	ensureDataSet: function() {
		return !!(this.dataset = this.setDatasetValue(this.getDatasetValue() || []));
	},
	disable: function($isDisabled) {
		Field.prototype.disable.call(this, $isDisabled);
	},
	getDatasetValue: function() {
		return Field.prototype.getDatasetValue.call(this);
	},
	setDatasetValue: function(value) {
		return Field.prototype.setDatasetValue.call(this, value);
	},
	drawBox: function() {
		var proto = this.$prototype;
		// create an alias
		proto.$properties = proto.$item && proto.$item.$properties;
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		var tabularChart = false;
		metaData && this.__processMeta && this.__processMeta(metaData);
		if (this.__preSetDataBind && !this.__preSetDataBind(dataRecordSet, parentDataRecord, metaData)) {
			return;
		}
		if ((this.$item.$category && this.$item.$category == "tabularChart") || (this.$prototype.$type == "application/x-array")) {
			this._fixDataSet();
			tabularChart = true;
		}
		this.__setDataBind && this.__setDataBind(tabularChart ? this.dataset : dataRecordSet, parentDataRecord, metaData);
	},
	_fixDataSet: function() {
		this.ensureDataSet();
		var fixedDataSet = this.dataset;
		if (this.page.externalAdapter.fusionSite) {
			var last = fixedDataSet && fixedDataSet.length > 0 && fixedDataSet[fixedDataSet.length - 1] || {};
			// An improvement can be done be using getDataStoreRecordsNumber() exposed by Convergence window class
			if (sapUtil.isEmptyGridDataRecordEx(this.$prototype.$properties, last)) {
				fixedDataSet = fixedDataSet.slice(0, -1);
			}
		}
		this.dataset = fixedDataSet;
	},
	_openMenu: function(index, event) {
		var self = this,
			field = this.attachedField;
		if (field && !field.$isDisabled) {
			if (self.page.externalAdapter.fusionSite) {
				var uuid = ((this.dataset || [])[index] || {}).$uuid || index;
				self.page.externalAdapter.onGraphClickPicker({
					field: self,
					rcdUuid: uuid,
					pickerType: "menus",
					grapLevel: "measure",
					doEvent: function(err, menus) {
						var $links = {}, menuCount = menus && menus.length || 0;
						if (menuCount === 0) {
							return;
						}
						for (var ii = 0; ii < menuCount; ii++) {
							$links["link-" + ii] = menus[ii];
						}
						self.record && self.removeItem(self.record, true);
						self.record = new ChartRecord();
						self.record.showMenus(self, index, $links, event);
					}
				});
			}
		}
	},
	dispose: function() {
		this.record = null;
		Article.prototype.dispose.call(this);
	}

});