"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var Article = require("syracuse-ui/lib/article/article").Article;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;

var debug = false;

function ChartArticle() {}

exports.ChartArticle = helpers.defineClass(ChartArticle, Article, {
	// ================================
	// Article base methods
	// ================================
	onWindowResize: function() {
		debug && console.log("ChartArticle.onWindowResize");
		this.__onWindowResize && this.__onWindowResize();
	},

	drawBox: function() {
		debug && console.log("ChartArticle.drawBox");
		var proto = this.$prototype;
		// create an alias
		proto.$properties = proto.$item.$properties;
		this.__drawBox && this.__drawBox();
	},

	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		debug && console.log("ChartArticle.setDataBind");
		metaData && this.__processMeta && this.__processMeta(metaData);
		if (this.__preSetDataBind && !this.__preSetDataBind(dataRecordSet, parentDataRecord, metaData)) {
			return;
		}
		this._fixDataSet();

		this.__setDataBind && this.__setDataBind(this.dataset, parentDataRecord, metaData);
	},

	applyDesignMetaData: function(metadata, onAuthoring) {
		debug && console.log("ChartArticle.applyDesignMetaData");
		this.__applyDesignMetaData && this.__applyDesignMetaData(metadata, onAuthoring);
	},

	dispose: function() {
		debug && console.log("ChartArticle.dispose");
		this.__dispose && this.__dispose();
		Article.prototype.dispose.call(this);
	},

	// ================================
	// Helper methods
	// ================================
	_fixDataSet: function() {
		this.ensureDataSet();

		var fixedDataSet = this.dataset;
		if (this.page.externalAdapter.fusionSite) {
			var last = fixedDataSet && fixedDataSet.length > 0 && fixedDataSet[fixedDataSet.length - 1] || {};
			// an improvement can be done be using getDataStoreRecordsNumber() exposed by Convergence window class
			if (sapUtil.isEmptyGridDataRecordEx(this.$prototype.$properties, last)) {
				fixedDataSet = fixedDataSet.slice(0, -1);
			}
		}
		this.dataset = fixedDataSet;
	},

	_localizedText: function(val) {
		return val && this.getLocalizeText(val);
	},

});