"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var TabularChartRecord = require('./tabularChartRecord').TabularChartRecord;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var Field = require('syracuse-ui/lib/field/field').Field;
var debug = false;

function ChartArticle() {}

exports.ChartArticle = helpers.defineClass(ChartArticle, Article, {
	ensureDataSet: function() {
		return !!(this.dataset = this.setDatasetValue(this.getDatasetValue() || []));
	},
	getDatasetValue: function() {
		return Field.prototype.getDatasetValue.call(this);
	},
	setDatasetValue: function(value) {
		return Field.prototype.setDatasetValue.call(this, value);
	},
	findMenu: function($bind) {
		return Field.prototype.findMenu.call(this, $bind);
	},
	drawBox: function() {
		debug && console.log("ChartArticle.drawBox");
		var proto = this.$prototype;
		// create an alias
		proto.$properties = proto.$item && proto.$item.$properties;
		this.__drawBox && this.__drawBox();
	},

	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		var tabularChart = false;
		debug && console.log("ChartArticle.setDataBind");
		metaData && this.__processMeta && this.__processMeta(metaData);
		if (this.__preSetDataBind && !this.__preSetDataBind(dataRecordSet, parentDataRecord, metaData)) {
			return;
		}
		if ((this.$item.$category && this.$item.$category == "tabularChart") || (this.$prototype.$type == "application/x-array")) {
			this._fixDataSet();
			tabularChart = true;
		}
		this.__setDataBind && this.__setDataBind(tabularChart ? this.dataset : dataRecordSet, parentDataRecord, metaData);
	},
	applyDesignMetaData: function(metadata, designing) {
		debug && console.log("ChartArticle.applyDesignMetaData");
		this.__applyDesignMetaData && this.__applyDesignMetaData(metadata, designing);
	},

	dispose: function() {
		debug && console.log("ChartArticle.dispose");
		this.__dispose && this.__dispose();
		Article.prototype.dispose.call(this);
	},

	// ================================
	// Helper methods
	// ================================
	_fixDataSet: function() {
		this.ensureDataSet();

		var fixedDataSet = this.dataset;
		if (this.page.externalAdapter.fusionSite) {
			var last = fixedDataSet && fixedDataSet.length > 0 && fixedDataSet[fixedDataSet.length - 1] || {};
			// An improvement can be done be using getDataStoreRecordsNumber() exposed by Convergence window class
			if (sapUtil.isEmptyGridDataRecordEx(this.$prototype.$properties, last)) {
				fixedDataSet = fixedDataSet.slice(0, -1);
			}
		}
		this.dataset = fixedDataSet;
	},

	_ensureChartRecord: function($item, recordIndex) {
		if (!this.recordArticle) {
			this.recordArticle = new TabularChartRecord();
			this.recordArticle.$prototype = this.$prototype.$item;
			this.recordArticle.dataset = this.dataset && this.dataset[recordIndex || 0] || {};
			this.page.initializeNewItem(this.recordArticle, {}, this);
			this.recordArticle.loadBox($item);
		} else {
			this.recordArticle.applyChange($item);
		}
		return this.recordArticle;
	},

	_openMenu: function(index, event) {
		var self = this,
			field = this.attachedField;

		if (field && !field.$isDisabled) {
			if (self.page.externalAdapter.fusionSite) {
				var uuid = ((this.dataset || [])[index] || {}).$uuid || index;
				self.page.externalAdapter.onGraphClickPicker({
					field: self,
					rcdUuid: uuid,
					pickerType: "menus",
					grapLevel: "measure",
					doEvent: function(err, menus) {
						var $links = {},
							menuCount = menus && menus.length || 0;
						if (menuCount === 0) {
							return;
						}
						for (var ii = 0; ii < menuCount; ii++) {
							$links["link-" + ii] = menus[ii];
						}
						self._ensureChartRecord({}, index).openMenuBox({
							$links: $links
						}, event, function(menuItem) {
							var data = {
								field: self,
								link: {
									linkCtx: menuItem.linkCtx || "",
									linkId: menuItem.linkId
								}
							};

							if (self.page.externalAdapter.onGraphClickLink(data)) {
								// We should never come here in a Convergence context!!!
								// debug && console.log("onGraphClickLink returns true!!!")
								// self._execLink(menuItem);
							}
							return false;
						});
					}
				});
			}
		}
	},

	_localizedText: function(val) {
		return val && this.getLocalizeText(val);
	},

});