"use strict";
var helpers = require('syracuse-core/lib/helpers');
var BinaryField = require('./binaryField').BinaryField;
var ImageFieldAuthoring = require('./imageFieldAuthoring').ImageFieldAuthoring;

function ImageField(){
}

exports.ImageField = helpers.defineClass(ImageField, BinaryField, {
    initialize: function(){
        // split image/star in two to avoid regex catastrophy
        this.$isLayoutContentSizeDisabled = true;
        this.acceptFilter = "image/" + "*";
        if (this.$item.$inplace) {
            this.$item.$imageWidth = this.$item.$imageWidth || "2.5em";
            this.$item.$imageHeight = this.$item.$imageHeight || "2.5em";
        }
        else {
            if (this.$item.$isAutoSize == undefined) {
                if (this.getPage().$facet == "$query") {
                    //test pour dom autrememtn toujours mette true 
                    // BRJOU fix: 100px too big for mobile -> 50px
                    this.$item.$imageHeight = this.$item.$imageHeight || "50px";
                    //this.$item.$imageWidth = this.$item.$imageWidth || "50px";
                }
                else {
                    // BRJOU fix: auto height messes things up, use 150px instead
                    //this.$item.$imageHeight = this.$item.$imageHeight || "150px";
                    //this.$item.$imageWidth = this.$item.$imageWidth || "150px";
                    this.$item.$isAutoSize = true;
                }
            }
            this.$item.$imageWidth = this.$item.$imageWidth || "100%";
            this.$item.$imageHeight = this.$item.$imageHeight || "150px";
        }
        BinaryField.prototype.initialize.call(this);
    },
    _renderEditMode: function(){
        BinaryField.prototype._renderEditMode.call(this, this.$skin + "-img");
        this.$$anchor[0].style.height = this.$item.$imageHeight;
    },
    _renderDetailMode: function($skin){
        if (this.$item.$inplace) {
            this.$$item[0].style.textAlign = "center";
        }
        BinaryField.prototype._renderDetailMode.call(this, this.$skin + "-img");
        this.$$anchor[0].style.height = this.$item.$imageHeight;
    },
    _setFile: function(file){
        // if value != null, get data url from prototype
        var self = this;
        var value = this.currentValue;
        if (file) {
            self._file = file;
            self.imageUrl = (value && value.$url) || self.$dataUrl;
            self.imageUrl = self.getArticle().parseExpression(self.imageUrl);
            // key value encoding
            var u = self.imageUrl.split("?");
            var p = u[0].split("/");
            p.push(encodeURIComponent(p.pop()));
            self.imageUrl = self._saltUrl([p.join("/"), (u[1] ? u[1] : "")].join("?"));
            //
            if (!self._imageArea) {
                self._imageArea = document.createElement("div");
                self._imageArea.className = self.$skin + "-img-img";
                $(self._imageArea).appendTo(self.$$anchor);
                self.domValueSlot.style.display = '';
            }
            self._imageArea.style.width = self.$item.$imageWidth;
            self._imageArea.style.height = self.$item.$imageHeight;
            self.$$anchor[0].style.height = "";
            if (self.removeBtn) {
                self.removeBtn.style.display = "";
            }
            if (self.$item.$isAutoSize) {
                if (!self._image) {
                    self._image = document.createElement("img");
                    self._image.onload = function(){
                        self._ensureAutoSizeImage();
                        self._imageArea.style.backgroundSize = "contain";
                        self._imageArea.style.backgroundImage = "url(\"" + self.imageUrl + "\")";
                    };
                }
                self._image.src = self.imageUrl;
            }
            else {
                self._imageArea.style.backgroundImage = "";
                self._imageArea.style.height = self.$item.$imageHeight;
                self._imageArea.style.backgroundImage = "url(\"" + self.imageUrl + "\")";
            }
            self._imageArea.style.backgroundSize = "contain";
            self._imageArea.style.backgroundRepeat = "no-repeat";
            self.$$anchor.attr("target", "_blank").attr("href", self.imageUrl).attr("disabled", false);
        }
        else {
            delete self._imageArea;
            if (self._image) {
                delete self._image.onload;
                delete self._image;
            }
            self.$$anchor.empty().attr("href", "#").attr("disabled", true)[0].style.height = self.$item.$imageHeight;
            if (self.removeBtn) {
                self.removeBtn.style.display = "none";
            }
        }
    },
    _ensureAutoSizeImage: function(){
        if (this._image && this._image.width) {
            if (this._image.width >= this.$$anchor.width()) {
                var percent = this.$$anchor.width() / this._image.width;
                this._imageArea.style.height = (this._image.height * percent) + "px";
            }
            else {
                this._imageArea.style.height = this._image.height + "px";
            }
            this._imageArea.style.width = "100%";
        }
    },
    onWindowResize: function(){
        this._ensureAutoSizeImage();
    },
    getAuthoringWidget: function(){
        return new ImageFieldAuthoring();
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        BinaryField.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
        if (onAuthoring) {
            if (metaData.$imageWidth !== undefined) {
                this.$item.$imageWidth = metaData.$imageWidth;
            }
            if (metaData.$imageHeight !== undefined) {
                this.$item.$imageHeight = metaData.$imageHeight;
            }
            if (metaData.$isAutoSize !== undefined) {
                this.applyAutoSize(metaData);
            }
            if (this._file) {
                this._setFile(this._file);
            }
        }
    }
});
