"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
var locale = require('syracuse-core/lib/locale');

function BinaryField(){

}


exports.BinaryField = helpers.defineClass(BinaryField, Field, {
    _saltUrl: function(url){
        if (!url) 
            return null;
        var sep = (url.indexOf("?") >= 0) ? "&" : "?";
        return url + sep + "salt=" + Math.round(Math.random() * 1000);
    },
    initialize: function(){
        this._localize = locale.resources(module)();
        this.$dataUrl = this.getDataType().$url;
    },
    setFieldWidth: function(){
    },
    applyMetaData: function(metaData){
        Field.prototype.applyMetaData.call(this, metaData);
        if (metaData) {
            if (metaData.$isDisabled !== undefined) {
                this._disableButtons(metaData.$isDisabled);
            }
            if (metaData.$isReadOnly !== undefined) {
                if (this.selectBtn) {
                    this.selectBtn.style.display = metaData.$isReadOnly ? "" : "none";
                }
                if (this.removeBtn) {
                    this.removeBtn.style.display = metaData.$isReadOnly ? "" : "none";
                }
            }
        }
    },
    _upload: function(files){
        var self = this;
        self.page.externalAdapter.onBeforeUploadFiles({
            field: self.field,
            files: files,
            pickerType: "menus",
            doEvent: function(){
                for (var ii = 0; ii < files.length; ii++) {
                    var file = files[ii];
                    if ((self.acceptFilter && file.type.match(self.acceptFilter)) || !self.acceptFilter) {
                        self._onBeginUpload(file); //to improve for multi upload
                        document.controller.upload(file, self.getDataType().$url, self.articleParent, function(data, response){
                            self._onUploadSuccess(file, data, response);
                        }, function(progress, isLoaded){
                            if (!isLoaded) {
                                self._onProgressUpload(file, progress);
                            }
                            else {
                                self._onEndUpload(file);
                            }
                        });
                    }
                }
            }
        });
    },
    _onBeginUpload: function(file){
        this._progress = document.createElement("div");
        this._progress.className = "s-file-progress";
        this._info.appendChild(this._progress);
        this.progressValue = document.createElement("div");
        this.progressValue.className = "s-file-progress-value";
        this._progress.appendChild(this.progressValue);
        this._disableButtons(true);
        this._legend.textContent = this._localize.bf_upload + ":" + " " + file.name + " 0%";
    },
    _onProgressUpload: function(file, progress){
        this._legend.textContent = this._localize.bf_upload + ":" + " " + file.name + " " + progress + "%";
        this.progressValue.style.width = progress + "%";
    },
    _onEndUpload: function(file){
        var self = this;
        self._legend.textContent = file.name + " " + this._localize.bf_uploaded;
        self._disableButtons(false);
        self._onProgressUpload(file, 100);
        setTimeout(function(){
            if (self._progress) {
                document.site.removeDomChild(self._progress);
                delete self._progress;
            }
            delete self.progressValue;
            self._legend.textContent = self._localize.bf_dropSelectFile;
        }, 1500);
    },
    _disableButtons: function(isDisabled){
        if (this.selectBtn) {
            document.site.disableItem(this.selectBtn, isDisabled);
        }
        if (this.removeBtn) {
            document.site.disableItem(this.removeBtn, isDisabled);
        }
    },
    render: function(){
        if (!this.$item.$isFilterMode) {
            if (this.$isEditMode) {
                this._renderEditMode();
            }
        }
    },
    _appendActions: function($skin){
        var btns = document.createElement("div");
        btns.className = $skin + "-btns";
        
        this._inputFile = document.createElement("input");
        this._inputFile.setAttribute("type", "file");
        this._inputFile.style.width = "0px";
        this._inputFile.style.height = "0px";
        this._inputFile.style.visibility = "hidden";
        
        this._$$inputFile = $(this._inputFile);
        if (this.acceptFilter) {
            this._inputFile.setAttribute("accept", this.acceptFilter);
        }
        if (this.$item.$enableMultiple) {
            this._inputFile.setAttribute("multiple", true);
        }
        btns.appendChild(this._inputFile);
        this._bindInputFileChange(true);
        
        this.selectBtn = document.createElement("a");
        this.selectBtn.className = $skin + "-upload";
        this.selectBtn.setAttribute("href", "#");
        this.selectBtn.setAttribute("data-s-picker", "select");
        this.selectBtn.setAttribute("title", this._localize.bf_selectFile);
        this.selectBtn.textContent = this._localize.bf_selectFile;
        btns.appendChild(this.selectBtn);
        
        this.removeBtn = document.createElement("a");
        this.removeBtn.className = $skin + "-remove";
        this.removeBtn.setAttribute("data-s-picker", "remove");
        this.removeBtn.setAttribute("href", "#");
        this.removeBtn.setAttribute("title", this._localize.bf_removeFile);
        this.removeBtn.textContent = this._localize.bf_removeFile;
        this.removeBtn.style.display = "none";
        btns.appendChild(this.removeBtn);
        
        this._right.appendChild(btns);
    },
    _bindInputFileChange: function(bind){
        var self = this;
        if (bind) {
            self._$$inputFile.bind("change", function(){
                self._upload(this.files);
            });
        }
        else {
            if (self._$$inputFile) {
                self._$$inputFile.unbind();
            }
        }
    },
    _bindDropArea: function(bind){
        var self = this;
        if (bind) {
            self.$$dropArea.bind("drop dragenter dragover", function(event){
                switch (event.type) {
                    case "drop":
                        self._upload(event.originalEvent.dataTransfer.files);
                        break;
                    case "dragenter":
                        this.className += " s-file-drop-in";
                        break;
                    case "dragleave":
                        this.className = $skin + "-drop-target";
                        break;
                }
                event.stopPropagation();
                event.preventDefault();
                return false;
            });
        }
        else {
            if (self.$$dropArea) {
                self.$$dropArea.unbind();
            }
        }
    },
    doClickPicker: function(btn, options){
        var self = this;
        if (!self.$isDisabled) {
            switch (btn.getAttribute("data-s-picker")) {
                case "select":
                    self._$$inputFile.click();
                    break;
                case "remove":
                    document.controller.deleteFile(self.$dataUrl, self.articleParent, function(data, response){
                        // callback if succes
                        self.setDataValue(null);
                        self.selectBtn.focus();
                    });
                    break;
            }
        }
    },
    _renderEditMode: function($skin){
        var self = this;
        var dropArea = document.createElement("div");
        dropArea.className = $skin + "-drop-target";
        this.$$dropArea = $(this.fieldValue.appendChild(dropArea));
        this._bindDropArea(true);
        
        this.anchor = document.createElement("a");
        this.anchor.className = $skin + "-link";
        this.anchor.setAttribute("disabled", true);
        this.anchor.setAttribute("data-s-field-binary", this.id);
        this.$$anchor = $(this.anchor).prependTo(this.$$dropArea);
        
        this._right = document.createElement("div");
        this._right.className = $skin + "-right";
        dropArea.appendChild(this._right);
        
        this._info = document.createElement("div");
        this._info.className = $skin + "-info";
        this._right.appendChild(this._info);
        
        this._legend = document.createElement("div");
        this._legend.className = $skin + "-legend";
        this._legend.textContent = this._localize.bf_dropSelectFile;
        this._info.appendChild(this._legend);
        
        this._appendActions($skin);
    },
    _renderDetailMode: function($skin){
        this.anchor = document.createElement("a");
        this.anchor.className = $skin + "-link";
        this.$$anchor = $(this.anchor).prependTo($(this.fieldValue));
    },
    _onUploadSuccess: function(file, data, response){
        this._setFile(file);
        this.articleParent.applyChange(data, response);
    },
    setDataValue: function(value){
        this.currentValue = value;
        if (!this.$isEditMode && this.currentValue) {
            this._renderDetailMode();
        }
        this._setFile(this.currentValue);
    },
    releaseMode: function(onDispose){
        if (this.$isEditMode) {
            this.selectBtn = this.removeBtn = null;
            this._bindInputFileChange(false);
            this._bindDropArea(false);
        }
        if (this._image) {
            this._image.onload = null;
        }
        this._image = this._progress = this._info = this._legend = null;
        Field.prototype.releaseMode.call(this, onDispose);
    },
    dispose: function(){
        this._localize = null;
        Field.prototype.dispose.call(this);
    }
});
