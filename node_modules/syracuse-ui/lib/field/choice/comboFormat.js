"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

function ComboFormat() {
	this.$defaultChoiceLayout = "1";
}

exports.ComboFormat = helpers.defineClass(ComboFormat, null, {
	setDataValue: function(value) {
		this.field.currentValue = value;
		this._fillSelectedEnum(this._$selectedEnum = this.field.findEnum(value));

	},
	_fillSelectedEnum: function($selectedEnum) {
		var $title = $selectedEnum ? $selectedEnum.$title : "";
		if (this.field.$isEditMode) {
			this.field.setInputValue($title);
			if (this.iconValue) {
				this.setIcon(this.iconValue, $selectedEnum ? $selectedEnum.$value : null);
			}
			if (this.cssValue) {
				this.setCssValue(this.cssValue, $selectedEnum ? $selectedEnum.$value : null);
			}
		} else {
			if ($title && !this.field.$isDetailLinkDisabled && this.field.$rootLinks.$links && this.field.$rootLinks.$links.$details) {
				this.field.appendDetailLink($title, this.field.$rootLinks.$links.$details);
			} else {
				this.field.fieldValue.textContent = $title;
			}
		}
	},
	getDataValue: function() {
		if (this.field.$isEditMode) {
			if (this.field.getInputValue() == "") {
				this._$selectedEnum = null;
			}
		}
		return this._$selectedEnum ? this._$selectedEnum.$value : null;
	},
	onInputValidate: function(event, notify) {
		this._fillSelectedEnum(this.field.findEnum(this.getDataValue()));
	},
	doClickPicker: function() {
		this.toggleList();
	},
	render: function() {
		var $value = this.field.$field.$value;
		delete this.field.$item.$isAutoSizeDisabled;
		this.setEnum(this.field.$enum = $value ? $value.$enum : {});
		this.$skinItem = this.field.$skin + "-choice-list-item";
		if (this.field.$isEditMode) {
			if (this.field.$item.$contentEditable) {
				this.field._input = document.createElement("div");
				this.field._input.setAttribute("contenteditable", "true");
			} else {
				this.field._input = document.createElement("input");
				this.field._input.setAttribute("type", "text");
			}
			// add attribute to disable browser spellcheck and autocorrect
			document.site.setSpecificAttributes(this.field._input);
			// readonly input according to $isAutoComplete value (issue #2662, convergence need)
			if (this.field.$field.$isAutoComplete === false) {
				this.field._input.setAttribute("readonly", "readonly");
			}
			this.field.$$input = $(this.field._input);
			this.field._input.className = this.field.$skinInput;
			if (this.field.$item.$contentEditable) {
				this.field._input.className += " s-contenteditable";
			}
			this.field.fieldValue.appendChild(this.field._input);
			this.field.appendToPickerBox(this.choiceBtn = this.field.createPicker("choice"));
			if (this.field.$item.$syraIsDesignEnable) {
				this.choiceBtn.syraIsDesignEnable = true;
			}
			this.field._appendLinksPicker();
			if (this.field.$item.$icon) {
				this.choiceBtn.className += " s-icon";
				this.iconValue = this.createIcon(this.field.currentValue, this.field.$skin + "-choice-icon");
				$(this.field.fieldValue).prepend(this.iconValue);
				this.iconValue.top = "2px";
				this.iconValue.left = "2px";
				this.field._input.className += " " + this.field.$skin + "-choice-icon-input";
				this.field._input.style.paddingRight = (this.field._boxPickerPaddingRight - 20) + "px";
				if (this.field.$item.$icon.$inputMode == "icon") {
					this.field._input.style.width = "0px";
					this.field._input.style.visibility = "hidden";
					this.field.domItem.className += " s-choice-icon-mode";
				}
			}
			if (this.field.$item.$cssMode) {
				this.choiceBtn.className += " s-cssmode " + this.field.$item.$cssMode.$css;
				this.cssValue = this.createCssValue(this.field.currentValue, this.field.$skin + "-choice-cssmode");
				$(this.field.fieldValue).prepend(this.cssValue);
				this.field._input.className += " " + this.field.$skin + "-choice-cssmode-input";
				this.field._input.style.paddingRight = (this.field._boxPickerPaddingRight - 20) + "px";
				if (this.field.$item.$cssMode.$inputMode == "css") {
					this.field._input.style.width = "0px";
					this.field._input.style.visibility = "hidden";
					this.field.domItem.className += " s-choice-css-mode";
				}
			}
			if (this.field.$item.$css) {
				this.field._input.className += " " + this.field.$item.$css;
			}
		}
	},
	onChoiceItemClick: function(index) {
		if (!this.field.$isDisabled && !this.field.$isReadOnly) {
			this._selectItem(index, true);
			this.field.setInputValue(this._$selectedEnum.$title);
			this.field.$$input.change();
			if (this.iconValue) {
				this.setIcon(this.iconValue, this._$selectedEnum ? this._$selectedEnum.$value : null);
			}
			if (this.cssValue) {
				this.setCssValue(this.cssValue, this._$selectedEnum ? this._$selectedEnum.$value : null);
			}
			this.toggleList(false);
			if (this.field.page.focusedField != this.field) {
				this.field.focus();
			}
		}
	},
	_selectItem: function($index, select) {
		if (this._$selectedEnum) {
			delete this._$selectedEnum;
		}
		if (select) {
			this._$selectedEnum = this.field.$enum[$index];
			if (this._$selectedEnum) {
				this._selectChoice(this._$selectedEnum.$index = $index);
			}
		}
	},
	_selectChoice: function(selectedIndex) {
		if (this._choices) {
			for (var ii = 0, jj = this._choices.length; ii < jj; ii++) {
				var choice = this._choices[ii];
				if (choice.link) {
					document.site.toggleClass(choice.link, "s-selected", choice.$index == selectedIndex);
				}
			}
		}
	},
	setIcon: function(dom, $value) {
		var $path = document.site.$item.$iconPath + (this.$icon.$path || "");
		dom.style.backgroundImage = $value ? "url('" + $path + $value + ".png')" : "";
	},
	createIcon: function($value, css) {
		var img = document.createElement("div");
		img.className = css;
		this.setIcon(img, $value);
		return img;
	},
	setCssValue: function(dom, $value) {
		dom.className = dom.syraCss;
		if ($value != undefined) {
			if (this.field.$item.$cssMode.$isColor) {
				dom.className += " " + this.field.$item.$cssMode.$css;
				dom.style.backgroundColor = $value;
			} else {
				dom.className += " " + this.field.$item.$cssMode.$css + "-" + $value;
			}
		}
	},
	createCssValue: function($value, css) {
		var div = document.createElement("div");
		div.syraCss = css;
		this.setCssValue(div, $value);
		return div;
	},
	setEnum: function($enum) {
		this.field.$enum = $enum;
		this.field.localizeEnum();
		this._choices = [];
	},
	renderLayout: function(filter) {
		this._table = null;
		this._choices = [];
		if (this._listBody) {
			document.site.emptyDom(this._listBody);
			var $choiceLayout = this.field.$item.$choiceLayout;
			var maxByCol;
			if (this.field.$item.$maxByCol) {
				$choiceLayout = Math.min(Math.ceil(this.field.$enum.length / this.field.$item.$maxByCol), 4);
				maxByCol = this.field.$item.$maxByCol;
			}
			var isRowLayout = $choiceLayout == "row";
			var curCol = 0,
				cols;
			if (!isRowLayout) {
				$choiceLayout = parseInt($choiceLayout, 10);
				cols = [];
				this._table = document.createElement("div");
				this._table.className = this.field.$skin + "-choice-cb-table";
				this._listBody.appendChild(this._table);
				for (var ii = 0, colCount = $choiceLayout; ii < colCount; ii++) {
					var col = document.createElement("div");
					col.className = this.field.$skin + "-choice-cb-col";
					cols[ii] = this._table.appendChild(col);
				}
				maxByCol = Math.ceil(this.field.$enum.length / $choiceLayout);
			}
			this._$selectedListIndex = -1;
			var html, $enum;
			if (filter === "") {
				filter = null;
			}
			var itemByCol = 0;
			for (var ii = 0, jj = this.field.$enum.length; ii < jj; ii++) {
				var choice = {
					$index: ii
				};
				$enum = this.field.$enum[ii];
				html = null;
				if (filter) {
					if (this.field.$field.$isAutoComplete === false) {
						if ((new RegExp("^" + filter, "ig")).test($enum.$title)) {
							var className = this.field.currentValue && $enum.$value == this.field.currentValue ? 's-auto-complete-filter selected' : 's-auto-complete-filter';
							html = $enum.$title.replace(new RegExp("(^" + filter + ")", "ig"), "<strong class='" + className + "'>$1</strong>");
						}
					} else {
						if ((new RegExp("(" + filter + ")", "ig")).test($enum.$title)) {
							var className = this.field.currentValue && $enum.$value == this.field.currentValue ? 's-auto-complete-filter selected' : 's-auto-complete-filter';
							html = $enum.$title.replace(new RegExp("(" + filter + ")", "ig"), "<strong class='" + className + "'>$1</strong>");
						}
					}
				} else {
					html = $enum.$title;
				}
				if (html) {
					if (this._$selectedEnum && ii == this._$selectedEnum.$index) {
						this._$selectedListIndex = this._choices.length;
					}
					choice.link = document.createElement("a");
					choice.link.className = this.$skinItem;
					if (this.field.$item.$css) {
						choice.link.className += " " + this.field.$item.$css;
					}
					choice.link.syraChoice = ii;
					choice.link.setAttribute("data-s-picker", "field-choice");
					if (this.field.$item.$syraIsDesignEnable) {
						choice.link.syraIsDesignEnable = true;
					}
					if (this.field.$item.$icon) {
						choice.link.className += " s-icon";
						choice.link.appendChild(this.createIcon($enum.$value, this.$skinItem + "-icon"));

						if (this.field.$item.$icon.$mode == 'iconText') {
							var div = document.createElement("div");
							div.className = this.$skinItem + "-iconText";
							div.innerHTML = html;
							choice.link.appendChild(div);
						} else {
							if (this.field.$item.$icon.$mode != "icon") {
								choice.link.innerHTML = html;
							} else {
								choice.link.title = html;
							}
						}
					} else {
						if (this.field.$item.$cssMode) {
							choice.link.className += " s-cssmode " + this.field.$item.$cssMode.$css;
							choice.link.appendChild(this.createCssValue($enum.$value, this.$skinItem + "-cssmode"));
						} else {
							choice.link.innerHTML = html;
						}
					}
					if (this.field.currentValue == $enum.$value) {
						choice.link.className += " s-selected";
					}
					if (isRowLayout) {
						choice.link.style.display = "inline-block";
						this._listBody.appendChild(choice.link);
					} else {
						cols[curCol].appendChild(choice.link);
						if (maxByCol && ((++itemByCol) >= maxByCol)) {
							curCol++;
							itemByCol = 0;
						}
					}
					this._choices.push(choice);
				}
			}
			if (filter && this._choices.length == 0) {
				var noMatch = document.createElement("div");
				noMatch.className = "s-choice-no-match";
				noMatch.textContent = this.field.localize.fieldChoiceNoMatch;
				this._listBody.appendChild(noMatch);
			}
			this._setMinWidth();
		} else {
			for (var ii = 0, jj = this.field.$enum.length; ii < jj; ii++) {
				var $enum = this.field.$enum[ii];
				if (filter) {
					if ((new RegExp("(" + filter + ")", "ig")).test($enum.$title)) {
						var className = this.field.currentValue && $enum.$value == this.field.currentValue ? 's-auto-complete-filter selected' : 's-auto-complete-filter';
						this._choices.push({
							$index: ii
						});
					}
				}
			}
		}
	},
	_setMinWidth: function() {
		this._list.style.minWidth = this.field.$$input.parent().width() + "px";
	},
	selectText: function(input, start, end) {
		if (input.createTextRange) {
			var selRange = input.createTextRange();
			selRange.collapse(true);
			selRange.moveStart('character', start);
			selRange.moveEnd('character', end - start);
			selRange.select();
		} else
		if (input.selectionStart) {
			input.selectionStart = start;
			input.selectionEnd = end;
		}
	},
	toggleList: function(show, filter) {
		var self = this;
		if (!self._popup && show !== false) {
			if (self.field.page.focusedField != self.field) {
				self.field.focus();
			}
			self.field.domItem.id = self.field.id;
			self._list = document.createElement("div");
			self._list.className = self.field.$skin + "-choice-list";
			if (self.field.$item.$css) {
				self._list.className += " " + self.field.$item.$css;
			}
			self._list.syra_field_id = self.field.id;
			self._list.setAttribute("data-s-article", self.field.articleParent.id);
			self._list.style.display = "none";
			self._listBody = document.createElement("div");
			self._listBody.className = self.field.$skin + "-choice-list-body";
			self._list.appendChild(self._listBody);
			//self.field.fieldValue.appendChild(self._list);
			self.renderLayout(filter);
			if (self._$selectedEnum) {
				self._selectItem(self._$selectedEnum.$index, true);
			}
			self._popup = self.field.boxParent.openDialog({
				content: self.field,
				autoCloseBoundaryId: self.field.id,
				$dialogMode: "popup",
				$$dialog: $(self._list),
				position: {
					my: "left top",
					at: "left bottom",
					of: self.field.$$input
				},
				onresize: function(dialog) {
					if (self.field.$$input) {
						var parentRect = document.site.getBoundingClientRect(self.field._input.parentNode);
						var dialogRect = document.site.getBoundingClientRect(dialog.dialogSlot);
						self._list.style.minWidth = parentRect.width + "px";
						self._listBody.style.width = dialogRect.width + "px";
						self._listBody.style.height = dialogRect.height + "px";
						var diff = self._listBody.scrollHeight - self._listBody.clientHeight;
						if (diff) {
							dialog.dialogSlot.style.height = Math.min(dialog._maxHeight / 2, dialogRect.height + diff) + "px";
							self._listBody.style.height = document.site.getBoundingClientRect(dialog.dialogSlot).height + "px";
						}
						if (self._table) {
							self._table.style.width = dialogRect.width <= parentRect.width ? "100%" : "";
						}
					}
				},
				onClose: function() {
					setTimeout(function() {
						document.site.removeDomChild(self._list);
						self._popup = self._list = self._listBody = null;
					}, 200);
				}
			});
		} else {
			if (self._popup) {
				if (show) {
					self._setMinWidth();
					self._popup.onWindowResize();
				} else {
					self._popup.close();
					return true;
				}
			}
		}
	},
	validateKeyPress: function(charCode, isEnter) {
		var self = this;
		if (self.field.$field.$isAutoComplete !== false) {
			self._autoCompleteTimer = setTimeout(function() {
				var filter = charCode || self.field._input.value || "";
				self.renderLayout(filter);
				if (self._choices.length > 0) {
					if (isEnter) {
						self.onChoiceItemClick(self._choices[0].$index);
						return false;
					}
				}
				self.toggleList(true, filter);
			}, 100);
		}
		return (self._popup && self._popup.isOpened);
	},
	applyEscape: function() {
		this.field._input.value = this._$selectedEnum ? this._$selectedEnum.$title : "";
		return this.toggleList(false);
	},
	applyShortCuts: function(shortcurts, event) {
		clearTimeout(this._autoCompleteTimer);
		if (shortcurts.down || shortcurts.up) {
			if (!this.field.$isReadOnly) {
				this.toggleList(true);
				var current = this._$selectedListIndex !== undefined ? this._$selectedListIndex : -1;
				shortcurts.down ? current++ : current--;
				this._$selectedListIndex = Math.min(Math.max(current, 0), this._choices.length - 1);
				this._selectChoice(this._choices[this._$selectedListIndex].$index);
				this.field._input.value = this.field.$enum[this._choices[this._$selectedListIndex].$index].$title;
				this._selectItem(this._choices[this._$selectedListIndex].$index, true);
				return true;
			}
		} else {
			if (!shortcurts.esc && shortcurts.enter) {
				if (this.field.$field.$isAutoComplete === false) {
					var choices = this._choices;
					if (choices && choices.length && this._$selectedListIndex !== undefined && this._$selectedListIndex >= 0 && this._popup && this._popup.isOpened) {
						this.onChoiceItemClick(choices[this._$selectedListIndex].$index);
						return true;
					}
				} else {
					return this.validateKeyPress(undefined, shortcurts.enter);
				}
			}
		}
		return false;
	},
	releaseMode: function() {
		this._choices = this._table = this._list = this._listBody = this._$selectedEnum = this.choiceBtn = null;
	},
	dispose: function(onApplyMetadata) {
		if (onApplyMetadata) {
			this.field.removeFromPickerBox(this.choiceBtn);
		}
		this.releaseMode(onApplyMetadata);
		this.field = this.cssValue = this.iconValue = null;
	}
});