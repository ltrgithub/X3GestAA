"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var keyHelper = require('syracuse-ui/lib/site/aside/keyHelper');

function ComboFormat(){
    this.$defaultChoiceLayout = "1";
}

exports.ComboFormat = helpers.defineClass(ComboFormat, null, {
    setDataValue: function(value){
        this.field.currentValue = value;
        this._$selectedEnum = this.field.findEnum(value);
        var $title = this._$selectedEnum ? this._$selectedEnum.$title : "";
        if (this.field.$isEditMode) {
            this.field._input.value = $title;
            if (this.iconValue) {
                this.setIcon(this.iconValue, value);
            }
        }
        else {
            this.field.fieldValue.textContent = $title;
        }
    },
    getDataValue: function(){
        return this._$selectedEnum ? this._$selectedEnum.$value : null;
    },
    doClickPicker: function(){
        this.toggleList();
    },
    render: function(){
        var $value = this.field.$field.$value;
        delete this.field.$item.$isAutoSizeDisabled;
        this.setEnum(this.field.$enum = $value ? $value.$enum : {});
        this.$skinItem = this.field.$skin + "-choice-list-item";
        if (this.field.$isEditMode) {
            this.field._input = document.createElement("input");
            this.field._input.setAttribute("type", "text");
            this.field.$$input = $(this.field._input);
            this.field._input.className = this.field.$skinInput;
            this.field.fieldValue.appendChild(this.field._input);
            this.field.appendToPickerBox(this.choiceBtn = this.field.createPicker("choice"));
            this.field._appendLinksPicker();
            this._list = document.createElement("div");
            this._list.className = this.field.$skin + "-choice-list";
            this._list.setAttribute("data-s-field", this.field.id);
            this._list.setAttribute("data-s-article", this.field.articleParent.id);
            this._list.style.display = "none";
            this.field.fieldValue.appendChild(this._list);
            if (this.field.$item.$icon) {
                this.iconValue = this.createIcon(this.field.currentValue, this.field.$skin + "-choice-icon");
                $(this.field.fieldValue).prepend(this.iconValue);
                this.iconValue.top = "2px";
                this.iconValue.left = "2px";
                this.field._input.className += " " + this.field.$skin + "-choice-icon-input";
                this.field._input.style.paddingRight = (this.field._boxPickerPaddingRight - 20) + "px";
                if (this.field.$item.$icon.$inputMode == "icon") {
                    this.field._input.style.width = "0px";
                    this.field._input.style.visibility = "hidden";
                    this.field._domItem.className += " s-choice-icon-mode";
                }
            }
        }
    },
    onChoiceItemClick: function(index){
        if (!this.field.$isDisabled && !this.field.$isReadOnly) {
            this._selectItem(index, true);
            this.field._input.value = this._$selectedEnum.$title;
            this.field.$$input.change();
            if (this.iconValue) {
                this.setIcon(this.iconValue, this._$selectedEnum.$value);
            }
            this.toggleList(false);
            this.field.focus();
        }
    },
    _selectItem: function($index, select){
        if (this._$selectedEnum) {
            delete this._$selectedEnum;
        }
        if (select) {
            this._$selectedEnum = this.field.$enum[$index];
            if (this._$selectedEnum) {
                this._selectChoice(this._$selectedEnum.$index = $index);
            }
        }
    },
    _selectChoice: function(selectedIndex){
        if (this._choices) {
            for (var ii = 0, jj = this._choices.length; ii < jj; ii++) {
                var choice = this._choices[ii];
                choice.link.className = this.$skinItem + (choice.$index == selectedIndex ? " s-choice-item-selected" : "");
            }
        }
    },
    setIcon: function(domImg, $value){
        var $path = document.site.$item.$iconPath + (this.$icon.$path || "");
        domImg.style.backgroundImage = $value ? "url('" + $path + $value + ".png')" : "";
    },
    createIcon: function($value, css){
        var img = document.createElement("div");
        img.className = css;
        this.setIcon(img, $value);
        return img;
    },
    setEnum: function($enum){
        this.field.$enum = $enum;
        this.field.localizeEnum();
        this._choices = [];
    },
    renderLayout: function(filter){
        this._table = null;
        this._choices = [];
        document.site.emptyDom(this._list);
        var isRowLayout = this.field.$item.$choiceLayout == "row";
        var curCol = 0, cols;
        if (!isRowLayout) {
            cols = [];
            this._table = document.createElement("div");
            this._table.className = "s-field-choice-cb-table";
            this._list.appendChild(this._table);
            for (var ii = 0, colCount = parseInt(this.field.$item.$choiceLayout); ii < colCount; ii++) {
                var col = document.createElement("div");
                col.className = "s-field-choice-cb-col";
                cols[ii] = this._table.appendChild(col);
            }
        }
        this._$selectedListIndex = -1;
        var $icon = this.field.$item.$icon;
        var html, $enum;
        for (var ii = 0, jj = this.field.$enum.length; ii < jj; ii++) {
            var choice = {
                $index: ii
            };
            $enum = this.field.$enum[ii];
            html = null;
            if (filter) {
                if ((new RegExp("(" + filter + ")", "ig")).test($enum.$title)) {
                    html = $enum.$title.replace(new RegExp("(" + filter + ")", "ig"), "<strong class='s-auto-complete-filter'>$1</strong>");
                }
            }
            else {
                html = $enum.$title;
            }
            if (html) {
                if (ii == this._$selectedEnum.$index) {
                    this._$selectedListIndex = this._choices.length;
                }
                choice.link = document.createElement("a");
                choice.link.className = this.$skinItem;
                choice.link.setAttribute("data-s-choice", ii);
                if ($icon) {
                    choice.link.appendChild(this.createIcon($enum.$value, this.$skinItem + "-icon"));
                    if ($icon.$mode != "icon") {
                        choice.link.innerHTML = html;
                    }
                    else {
                        choice.link.setAttribute("title", html);
                    }
                }
                else {
                    choice.link.innerHTML = html;
                }
                if (this.field.currentValue == $enum.$value) {
                    choice.link.className += " s-choice-item-selected";
                }
                if (isRowLayout) {
                    choice.link.style.display = "inline-block";
                    this._list.appendChild(choice.link);
                }
                else {
                    cols[curCol].appendChild(choice.link);
                    if (++curCol == cols.length) {
                        curCol = 0;
                    }
                }
                this._choices.push(choice);
            }
        }
        if (filter && this._choices.length == 0) {
            var noMatch = document.createElement("div");
            noMatch.className = "s-choice-no-match";
            noMatch.textContent = this.field.getLocalize().cf_choiceFieldNoMatch;
            this._list.appendChild(noMatch);
        }
        this._setMinWidth();
    },
    _setMinWidth: function(){
        (this._table ? this._table : this._list).style.minWidth = this.field.$$input.parent().width() + "px";
    },
    selectText: function(input, start, end){
        if (input.createTextRange) {
            var selRange = input.createTextRange();
            selRange.collapse(true);
            selRange.moveStart('character', start);
            selRange.moveEnd('character', end - start);
            selRange.select();
        }
        else 
            if (input.selectionStart) {
                input.selectionStart = start;
                input.selectionEnd = end;
            }
    },
    toggleList: function(show){
        var self = this;
        self.field.focus();
        if (!self._popup && show !== false) {
            self.field._domItem.setAttribute("id", self.field.id);
            self.renderLayout();
            if (self._$selectedEnum) {
                self._selectItem(self._$selectedEnum.$index, true);
            }
            self._popup = self.field.boxParent.openDialog({
                content: self.field,
                $dialogMode: "popup",
                $$dialog: $(self._list),
                position: {
                    my: "left top",
                    at: "left bottom",
                    of: self.field.$$input
                },
                onClose: function(){
                    setTimeout(function(){
                        self._popup = null;
                    }, 200);
                }
            });
        }
        else {
            if (self._popup) {
                if (show) {
                    self._setMinWidth();
                    self._popup.onWindowResize();
                }
                else {
                    self._popup.close();
                }
            }
        }
    },
    onInputKeyup: function(input, event){
        var self = this;
        clearTimeout(self._autoCompleteTimer)
        switch (event.keyCode) {
            case keyHelper.keyCode.ESCAPE:
                input.value = self._$selectedEnum ? self._$selectedEnum.$title : "";
                self.toggleList(false);
                break;
            case keyHelper.keyCode.DOWN:
            case keyHelper.keyCode.UP:
                self.toggleList(true);
                var current = self._$selectedListIndex !== undefined ? self._$selectedListIndex : -1;
                if (event.keyCode == keyHelper.keyCode.DOWN) {
                    current++;
                }
                else {
                    current--;
                }
                self._$selectedListIndex = Math.min(Math.max(current, 0), self._choices.length - 1);
                self._selectChoice(self._choices[self._$selectedListIndex].$index);
                input.value = self.field.$enum[self._choices[self._$selectedListIndex].$index].$title;
                break;
            default:
                self._autoCompleteTimer = setTimeout(function(){
                    var filter = input.value || "";
                    self.renderLayout(filter);
                    if (self._choices.length > 0) {
                        var first = self._choices[0];
                        if (event.keyCode != keyHelper.keyCode.BACKSPACE) {
                            input.value = self.field.$enum[first.$index].$title;
                        }
                        if (event.keyCode == keyHelper.keyCode.ENTER) {
                            $(first.link).click();
                            return;
                        }
                    }
                    self.toggleList(true);
                }, 100)
                break;
        }
        return true;
    },
    releaseMode: function(){
        this._choices = this._table = this._list = this._$selectedEnum = this.choiceBtn = null;
    },
    dispose: function(onApplyMetadata){
        if (onApplyMetadata) {
            this.field.removeFromPickerBox(this.choiceBtn);
        }
        this.releaseMode(onApplyMetadata);
        this.field = null;
    }
});
