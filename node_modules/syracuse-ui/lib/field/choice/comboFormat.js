"use strict";
var List = require('syracuse-ui/lib/scroll/list').List;

function _escapeRegex(string) {
	return string.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, '\\$&');
}

function Combo(field) {
	this.field = field;
	//field.$field.$isAutoComplete = false;
	exports.setEnum(field, field.$field.$value ? field.$field.$value.$enum : {});

	delete field.$item.$isAutoSizeDisabled;
	field.$item.$choiceLayout = field.$item.$choiceLayout || "1";
	if (field.$field.$capabilities && field.$field.$capabilities.indexOf("colored") >= 0) {
		if (!field.$item.$indicator) {
			field.$item.$indicator = field.$item.$bind;
		}
	}
	if (field.$isEditMode) {
		if (field.$item.$contentEditable) {
			field.input = syra_dom.addEditable(field.$skinInput, field._dataValue);
		} else {
			field.input = syra_dom.input(field.$skinInput, field._dataValue);
		}
		field.input.syraOnClick = "onFieldInputEvent";
		if (field.$field.$isAutoComplete === false) {
			field.input.setAttribute("readonly", "readonly");
		}

		if (!field.picker_choice) {
			syra_button.addFieldPicker({
				parent: field,
				pickerId: "choice",
				fontIcon: (field.$item.$popupRight) ? "right_arrow" : "expand_m",
				text: syra_local.fieldOpenChoiceList,
				shortCutTip: syra_shortCuts.tip.openPicker,
				click: _onPickerClick
			});
		}
	}
	if (field.$item.$icon) {
		if (field.$isEditMode) {
			var btn = {
				parent: field,
				imageName: true,
				link: document.createElement("div")
			};
			if (btn.iconOnly = field.$item.$icon.$mode != "iconText") {
				btn.css = "s-list-default-btn-default s-choice-icon-item";
			}
			this.iconValue = syra_button.add(btn);
			this.iconValue.link.className += " s-choice-icon-value";
			this.iconValue.link.appendChild(field.input);
			field.input.className = "s-choice-icon-input";
			field._dataValue.insertBefore(this.iconValue.link, field._dataValue.firstChild);
		}
	}
	if (field.$item.$indicator) {
		this.isColorChoice = field.$item.$indicator == "$colorChoice";
		if (field.$isEditMode) {
			if (this.isColorChoice) {
				this.cssValue = syra_dom.div("s-choice-color-item s-choice-indic-value");
				this.cssValue.appendChild(field.input);
				field.input.className = "s-choice-icon-input";
			} else {
				this.cssValue = syra_dom.div(field.$cssValue = "s-choice-indic-value");
			}
		} else {
			this.cssValue = syra_dom.div(field.$cssValue = "s-choice-indic-item");
		}
		field._dataValue.insertBefore(this.cssValue, field._dataValue.firstChild);
	}
}

Combo.prototype.applyEscape = function(shortcuts, event) {
	var closed = this.showList(false, undefined, event);
	delete this.autoCompleteFilter;
	return closed;
};
Combo.prototype.applyShortCut = function(shortcuts, event) {
	if (!this.field.$isDisabled && !this.field.$isReadOnly) {
		if (shortcuts.backspace) {
			if (this.autoCompleteFilter) {
				this.autoCompleteFilter = this.autoCompleteFilter.slice(0, this.autoCompleteFilter.length - 1);
			}
			this.filterInput(event, "", true);
			return true;
		}
		if (shortcuts.down || shortcuts.up) {
			if (!this.field.popupPicker && shortcuts.up) {
				return false;
			}
			if (this.field.popupPicker && event.shiftKey && shortcuts.up) {
				this.applyEscape();
				event.preventDefault();
				event.stopPropagation();
				return true;
			}
			this.showList(true, undefined, event);
			var current = this.selected ? this.list.items.indexOf(this.selected) : -1;
			if (!this.list.items.length) {
				this.showList(false, undefined, event);
				event.preventDefault();
				event.stopPropagation();
				return true;
			}
			if (shortcuts.down) {
				current++;
				if (current >= this.list.items.length) {
					current = 0;
				}
			} else {
				current--;
				if (current < 0) {
					current = this.list.items.length - 1;
				}
			}
			if (!this.list.items.length)
				return;
			//this.field.input.value = this.field.$enum[$index].$title;
			this.setEnumValue(this.list.items[Math.max(current, 0)].$enum);
			delete this.autoCompleteFilter;
			event.preventDefault();
			event.stopPropagation();
			return true;
		}
		if (shortcuts.enter) {
			var filter = (this.autoCompleteFilter !== undefined) ? this.autoCompleteFilter : this.field.input.value;
			delete this.autoCompleteFilter;
			this.filter(filter);
			if (this.list.items.length > 0) {
				var close = this.list.filter == "";
				if (this.list.items.length == 1) {
					this.list.items[0].click();
					close = true;
				}
				if (close) {
					return this.showList(false, undefined, event);
				}
			}
			return false;
		}
	}
};
Combo.prototype._formatImageName = function($enum) {
	if ($enum && $enum.$value) {
		return (this.field.$item.$icon.$path || "") + $enum.$value + ".png";
	}
	return null;
};
Combo.prototype.selectItem = function(btn, select) {
	var li = btn.link.parentNode;
	syra_dom.toggleClass(li, "s-selected", select);
	syra_dom.toggleClass(btn.link, "s-selected", select);
	if (select) {
		if (this.selected && this.selected != btn) {
			this.selectItem(this.selected, false);
		}
		this.selected = btn;
		if (this.field.$item.$topSelection) {
			li.parentNode.insertBefore(li, li.parentNode.firstChild);
		}
	}
};

Combo.prototype.setEnumValue = function($enum) {
	if (this.list) {
		!this.list.allItems.length && this.fill();
		if ($enum) {
			this.selectItem(this.list.map[$enum.$value], true);
			this.selected && syra_dom.toggleClass(this.selected.link, "s-selected", false);
			syra_dom.toggleClass((this.selected = this.list.map[$enum.$value]).link, "s-selected", true);
		}

	}
	var field = this.field
	if ($enum != this.field.$selectedEnum) {
		field.$selectedEnum = $enum;
		var $title = $enum ? $enum.$title : "";
		if (field.$item.$icon) {
			if (field.$isEditMode) {
				field.setInputValue($title);
				syra_button.setText(this.iconValue, $title, this._formatImageName($enum));
				this.iconValue.link.appendChild(field.input);
			}
		} else {
			if (field.$item.$indicator) {
				var value = $enum ? $enum.$value : null;
				if (this.isColorChoice) {
					this.cssValue.style.backgroundColor = value;
				} else {
					this.cssValue.className = field.$cssValue + " s-" + field.$item.$indicator + "-" + value;
				}
				if (field.$isEditMode) {
					field.setInputValue($title);
				} else {
					if (this.isColorChoice) {
						field._dataValue.title = field.displayText = $title;
					} else {
						field._dataValue.textContent = field.displayText = $title;
						if (value !== null) {
							field._dataValue.insertBefore(this.cssValue, field._dataValue.firstChild);
						} else {
							syra_dom.remove(field._dataValue.firstChild);
						}
					}
				}
			} else {
				if (field.$isEditMode) {
					field.setInputValue($enum ? $enum.$title : "");
				} else {
					if ($title && !field.$isDetailLinkDisabled && field.$menus && field.$menus.$details) {
						syra_fields.addDetailLink(field, $enum.$value, field.$menus.$details);
					} else {
						field._dataValue.textContent = field.displayText = $title;
					}
				}
			}
		}
		field.$setValue && field.$setValue();
	}
};

Combo.prototype.clickItem = function(btn) {
	delete this.autoCompleteFilter;
	if (!this.field.$isDisabled && (!this.field.$isReadOnly || this.field.$field.$isAutoComplete === false)) {
		this.setEnumValue(btn.$enum);
		this.showList(false);
		$(this.field.input).change();
		//test field as for pager, if is removed by change
		if (this.field && this.field.page && this.field.page.focusField != this.field) {
			this.field.focus();
		}
	}
};

Combo.prototype.filter = function(filter) {
	if (!this.list || !this.list.allItems.length) {
		this.fill();
	}
	if (this.list.filter != filter) {
		this.list.filter = filter;
		this.list.empty();
		this.list.items = [];
		var hasFilter = filter != null && filter != undefined;
		if (hasFilter) {
			filter = _escapeRegex(filter);
		}
		for (var ii = 0, jj = this.list.allItems.length; ii < jj; ii++) {
			var item = this.list.allItems[ii];
			if (hasFilter) {
				if (!(new RegExp("^" + filter, "i")).test(item.$enum.$title)) {
					continue;
				}
				var html = item.$enum.$title.replace(new RegExp("(" + filter + ")", "i"), "<strong class='s-auto-complete-filter'>$1</strong>");
				item.link.innerHTML = syra_dom.escape(html);
			} else {
				item.link.textContent = item.$enum.$title;
			}
			this.list.addLine(null, item.slot);
			this.list.items.push(item);
		}
	}
};

Combo.prototype.fill = function() {
	if (!this.list) {
		this.list = new List({
			emptyText: syra_local.fieldChoiceNoMatch,
			columns: ((this.field.$item.$choiceLayout || 1) * 1),
			scroll: true,
			css: this.field.$item.$skinList
		});
		// this.list.scrollSlot.syraItem = this.field.id;
	}
	this.list.empty();
	if (this.allItems) {
		for (var ii = 0, jj = this.allItems.length; ii < jj; ii++) {
			syra_button.dispose(this.allItems[ii]);
		}
	}
	this.list.map = {};
	this.list.allItems = [];
	this.list.items = [];
	for (var ii = 0, jj = this.field.$enum.length; ii < jj; ii++) {
		var btn = {
			parent: this.field,
			click: function() {
				this.parent.combo.clickItem(this);
			},
			$enum: this.field.$enum[ii]
		};
		btn.text = btn.$enum.$title;
		if (btn.text != null) {
			if (btn.text == "") {
				btn.text = "&nbsp;";
			}
			if (this.field.$item.$icon) {
				if (btn.iconOnly = this.field.$item.$icon.$mode != "iconText") {
					btn.css = "s-list-default-btn-default s-choice-icon-item";
				}
				if (btn.$enum) {
					btn.imageName = this._formatImageName(btn.$enum);
				}
			}
			btn = this.list.addButton(btn);
			if (this.field.$item.$indicator) {
				btn.link.className += " s-choice-indic-item-link";
				var div = syra_dom.div("s-choice-indic-item");
				if (this.isColorChoice) {
					btn.link.textContent = "";
					div.style.backgroundColor = btn.$enum.$value;
				} else {
					div.className += " s-" + this.field.$item.$indicator + "-" + btn.$enum.$value;
				}
				btn.link.insertBefore(div, btn.link.firstChild);
			}
			if (this.field.currentValue == btn.$enum.$value) {
				btn.link.className += " s-selected";
			}
			this.list.map[btn.$enum.$value] = btn;
			this.list.allItems.push(btn);
			this.list.items.push(btn);
		}
	}
};
Combo.prototype.showList = function(show, filter, event) {
	var self = this;
	if (show) {
		if (!self.field.popupPicker) {
			if (self.field.page.focusField != self.field) {
				self.field.focus();
			}
			self.field.domItem.id = self.field.id;
			if (self.field.$item.$choiceLayout == "row") {
				delete self.field.$item.$choiceLayout;
			}
			self.filter(filter);
			self.field.$selectedEnum && self.setEnumValue(self.field.$selectedEnum);
			syra_quality.openChoiceComboList(self.field);
			var position = self.field.$item.$popupRight ? {
				my: "left top",
				at: "right top"
			} : {
				my: "left top",
				at: "left bottom"
			};
			self.list.scrollSlot.style.minWidth = self.field.input.parentNode.clientWidth + "px";
			position.of = self.field.$item.$popupRight ? self.field.domItem : self.field._dataValue;
			self.field.popupPicker = syra_over.openPopup(self.field.boxParent, {
				content: self.field,
				syraPlayback: event && event.syraPlayback,
				autoCloseBoundary: self.field.domItem,
				slot: self.list.scrollSlot,
				picker: self.field.layoutSlot,
				position: position,
				onresize: function(maxHeight) {
					if (self.list) {
						self.list.resize(maxHeight);
					}
				},
				close: function() {
					if (self.field) {
						self.field.popupPicker = null;
					}
				}
			});
			return true;
		}
		self.field.popupPicker.resize();
		return false;
	} else {
		if (self.field.popupPicker) {
			self.field.popupPicker.close();
			return true;
		}
	}
};

Combo.prototype.filterInput = function(event, charCode, isSelectDisabled) {
	var self = this;
	if (!this.field.$isDisabled && !this.field.$isReadOnly) {
		this.autoCompleteFilter = (this.autoCompleteFilter || "") + charCode;
		this.filter(this.autoCompleteFilter);
		if (!isSelectDisabled && this.list.items.length == 1) {
			this.list.items[0].click();
			this.showList(false, undefined, event);
			event.preventDefault();
			event.stopPropagation();
		} else {
			this.showList(true, this.autoCompleteFilter, event);
		}
	}
	if (this.field.$field.$isAutoComplete === false) {
		event.preventDefault();
		event.stopPropagation();
	}
};

Combo.prototype.dispose = function() {
	syra_button.remove(this.field && this.field.picker_choice);
	this.list && this.list.dispose();
	syra_site.disposeObject(this);
};


function _onPickerClick() {
	this.parent.combo.showList(!this.parent.popupPicker);
}

exports.setFieldWidth = function(field) {
	if (field.$isEditMode && !field.$item.$inplace) {
		if (field.$item.$icon) {
			field._dataValue.style.width = "54px";
			return false;
		}
		if (field.$item.$indicator && field.combo.isColorChoice) {
			field._dataValue.style.width = "25px";
			return false;
		}
	}
	return true; //default
};

exports.applyLayoutChange = function(field, $choiceLayout) {
	field.$item.$choiceLayout = $choiceLayout;
	field.combo.list && field.combo.fill();
};

function _selectText(input, start, end) {
	if (input.createTextRange) {
		var selRange = input.createTextRange();
		selRange.collapse(true);
		selRange.moveStart('character', start);
		selRange.moveEnd('character', end - start);
		selRange.select();
	} else
	if (input.selectionStart) {
		input.selectionStart = start;
		input.selectionEnd = end;
	}
}

exports.dispose = function(field) {
	if (field) {
		field.combo && field.combo.dispose();
		field.combo = field.getValue = field.validateKeyPress = null;
	}
};

exports.setEnum = function(field, $enum) {
	field.$enum = $enum;
	field.localizeEnum();
	if (field.combo && field.combo.list) {
		field.combo.fill();
	}
};

exports.render = function(field) {
	field.combo = new Combo(field);
	field.applyEscape = function(shortcuts, event) {
		return this.combo.applyEscape(shortcuts, event);
	};
	field.applyShortCut = function(shortcuts, event) {
		return this.combo.applyShortCut(shortcuts, event);
	};
	field.getValue = function() {
		if (this.$isEditMode && this.$field.$isAutoComplete !== false) {
			if (this.getInputValue() == "") {
				return this.$selectedEnum = null;
			}
		}
		return this.$selectedEnum ? this.$selectedEnum.$value : null;
	};
	field.validateKeyPress = function(charCode, event) {
		if (event.keyCode != 13) {
			this.combo.filterInput(event, charCode);
		}
		return true;
	};
};

exports.setValue = function(field, value) {
	field.currentValue = value;
	field.combo.setEnumValue(field.findEnum(value));
};