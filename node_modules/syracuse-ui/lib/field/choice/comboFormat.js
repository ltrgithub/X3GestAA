"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var keyHelper = require('syracuse-ui/lib/site/aside/keyHelper');

function ComboFormat(){
    this.$defaultChoiceLayout = "1";
}

exports.ComboFormat = helpers.defineClass(ComboFormat, null, {
    setDataValue: function(value){
        this.field.currentValue = value;
        this._$selectedEnum = this._$listSelection = this.field.findEnum(value);
        var $title = this._$selectedEnum ? this._$selectedEnum.$title : "";
        if (this.field.$isEditMode) {
            this.field.$$input.val($title);
            if (this.iconValue) {
                this.setIcon(this.iconValue, value);
            }
        }
        else {
            this.field.fieldValue.textContent = $title;
        }
    },
    getDataValue: function(){
        return this._$selectedEnum ? this._$selectedEnum.$value : null;
    },
    doClickPicker: function(){
        this.toggleList();
    },
    render: function(){
        var $value = this.field.$field.$value;
        delete this.field.$isLayoutContentSizeDisabled;
        this.setEnum(this.field.$enum = $value ? $value.$enum : {});
        if (this.field.$isEditMode) {
            this.field._input = document.createElement("input");
            this.field._input.type = "text";
            this.field.$$input = $(this.field._input);
            this.field._input.className = this.field.$skinInput;
            this.field.fieldValue.appendChild(this.field._input);
            this.field.appendToPickerBox(this.choiceBtn = this.field.createPicker("choice"));
            this.field._appendLinksPicker();
            var div = document.createElement("div");
            div.className = this.field.$skin + "-choice-list";
            div.setAttribute("data-s-field", this.field.id);
            div.setAttribute("data-s-article", this.field.articleParent.id);
            this._$$list = $(this.field.fieldValue.appendChild(div)).hide();
            if (this.field.$item.$icon) {
                this.iconValue = this.createIcon(this.field.currentValue, this.field.$skin + "-choice-icon");
                $(this.field.fieldValue).prepend(this.iconValue);
                this.iconValue.top = "2px";
                this.iconValue.left = "2px";
                this.field._input.className += " " + this.field.$skin + "-choice-icon-input";
                this.field._input.style.paddingRight = (this.field._boxPickerPaddingRight - 20) + "px";
                if (this.field.$item.$icon.$inputMode == "icon") {
                    this.field._input.style.width = "0px";
                    this.field._input.style.visibility = "hidden";
                    this.field.$$item[0].className += " s-choice-icon-mode";
                }
            }
        }
    },
    onChoiceItemClick: function(index){
        if (!this.field.$isDisabled && !this.field.$isReadOnly) {
            this._selectItem(index, true);
            this.field.$$input.val(this._$selectedEnum.$title).change();
            if (this.iconValue) {
                this.setIcon(this.iconValue, this._$selectedEnum.$value);
            }
            this.toggleList(false);
            this.field.focus();
        }
    },
    _selectItem: function($index, select){
        if (this._choices) {
            if (this._$selectedEnum) {
                var choice = this._choices[this._$selectedEnum.$index];
                if (choice) {
                    choice.$$item.toggleClass("s-choice-item-selected", false);
                }
                delete this._$selectedEnum;
            }
            if (select) {
                this._$selectedEnum = this._$listSelection = this.field.$enum[$index];
                if (this._$selectedEnum) {
                    this._choices[$index].$$item.toggleClass("s-choice-item-selected", true);
                    this._$selectedEnum.$index = $index;
                }
            }
        }
    },
    setIcon: function(domImg, $value){
        domImg.style.backgroundImage = $value ? "url('" + this.$icon.$path + $value + ".png')" : "";
        //domImg.style.backgroundImage = image ? "url('" + image + "')" : "";
    },
    createIcon: function($value, css){
        var img = document.createElement("div");
        img.className = css;
        this.setIcon(img, $value);
        return img;
    },
    setEnum: function($enum){
        this.field.$enum = $enum;
        this._choices = [];
        
    },
    renderLayout: function(filter){
        var localize = locale.resources(module)();
        var self = this;
        self.releaseMode();
        self._choices = [];
        self._$$list.empty();
        var isRowLayout = self.field.$item.$choiceLayout == "row";
        var curCol = 0, $$cols;
        if (!isRowLayout) {
            $$cols = [];
            self._table = document.createElement("div");
            self._table.className = "s-field-choice-cb-table";
            self._$$list[0].appendChild(self._table);
            for (var ii = 0, colCount = parseInt(self.field.$item.$choiceLayout); ii < colCount; ii++) {
                var col = document.createElement("div");
                col.className = "s-field-choice-cb-col";
                $$cols[ii] = $(self._table.appendChild(col));
            }
        }
        var $skinItem = self.field.$skin + "-choice-list-item";
        var $icon = self.field.$item.$icon;
        self.field.$enum.forEach(function($enum, index){
            var html;
            if (filter) {
                if ((new RegExp("(" + filter + ")", "ig")).test($enum.$title)) {
                    html = $enum.$title.replace(new RegExp("(" + filter + ")", "ig"), "<strong class='s-auto-complete-filter'>$1</strong>");
                }
            }
            else {
                html = $enum.$title;
            }
            if (html) {
                var link = document.createElement("a");
                link.className = $skinItem;
                link.setAttribute("data-s-cb-index", index);
                var $$item = $(link)
                if ($icon) {
                    $$item.append(self.createIcon($enum.$value, $skinItem + "-icon"));
                    if ($icon.$mode != "icon") {
                        $$item.append(html);
                    }
                    else {
                        $$item[0].setAttribute("title", html);
                    }
                }
                else {
                    $$item.append(html);
                }
                if (self.field.currentValue == $enum.$value) {
                    link.className += " s-choice-item-selected";
                }
                if (isRowLayout) {
                    $$item[0].style.display = "inline-block";
                    self._$$list.append($$item);
                }
                else {
                    $$cols[curCol].append($$item);
                    if (++curCol == $$cols.length) {
                        curCol = 0;
                    }
                }
                self._choices.push({
                    $index: index,
                    $$item: $$item
                });
            }
        });
        if (filter && self._choices.length == 0) {
            self._$$list.text(localize.cf_choiceFieldNoMatch);
        }
        self._setMinWidth();
    },
    _setMinWidth: function(){
        (this._table ? this._table : this._$$list[0]).style.minWidth = this.field.$$input.parent().width() + "px";
    },
    selectText: function(input, start, end){
        if (input.createTextRange) {
            var selRange = input.createTextRange();
            selRange.collapse(true);
            selRange.moveStart('character', start);
            selRange.moveEnd('character', end - start);
            selRange.select();
        }
        else 
            if (input.selectionStart) {
                input.selectionStart = start;
                input.selectionEnd = end;
            }
    },
    toggleList: function(show){
        var self = this;
        self.field.focus();
        if (!self._popup && show !== false) {
            self.field.$$item.attr("id", self.field.id);
            if (self._choices.length == 0) {
                self.renderLayout();
            }
            if (self._$selectedEnum) {
                self._selectItem(self._$selectedEnum.$index, true);
            }
            self._popup = self.field.boxParent.openDialog({
                content: self.field,
                $dialogMode: "popup",
                $$dialog: self._$$list,
                position: {
                    my: "left top",
                    at: "left bottom",
                    of: self.field.$$input
                },
                onClose: function(){
                    /*if (self.onAuthoring) {
                     return false;
                     }*/
                    self._popup = null;
                }
            });
        }
        else {
            if (self._popup) {
                if (show) {
                    self._setMinWidth();
                    self._popup.resize();
                }
                else {
                    self._popup.close();
                }
            }
        }
    },
    onInputKeyup: function($$input, event){
        return true;
        switch (event.keyCode) {
            case keyHelper.keyCode.ESCAPE:
                field.$$input.val(this._$selectedEnum ? this._$selectedEnum.$title : "");
                this.toggleList(false);
                break;
            case keyHelper.keyCode.DOWN:
            case keyHelper.keyCode.UP:
                var current = this._$listSelection ? this._$listSelection.$index : -1;
                var newIndex = (event.keyCode == keyHelper.keyCode.DOWN) ? Math.min(current + 1, this._choices.length - 1) : Math.max(0, current - 1);
                this._$$list.children().toggleClass("s-choice-item-selected", false).filter("[data-s-cb-index=" + newIndex + "]").toggleClass("s-choice-item-selected", true);
                field.$$input.val((this._$listSelection = field.$enum[newIndex]).$title);
                break;
            case keyHelper.keyCode.LEFT:
            case keyHelper.keyCode.RIGHT:
                break;
            default:
                var filter = field.$$input.val();
                this.renderLayout(filter);
                if (this._choices.length > 0) {
                    var firstChoice = this._choices[0];
                    if (event.keyCode != keyHelper.keyCode.BACKSPACE) {
                        this._$listSelection = field.$enum[firstChoice.$index];
                        this.selectText(field.$$input.val(this._$listSelection.$title)[0], filter.length, this._$listSelection.$title.length);
                    }
                    if (event.keyCode == keyHelper.keyCode.ENTER) {
                        firstChoice.$$item.click();
                        return;
                    }
                }
                this.toggleList(true);
                break;
        }
        return true;
    },
    releaseMode: function(){
        delete this._choices;
        delete this._table;
    },
    dispose: function(){
        this.releaseMode(true);
        delete this.field;
    }
});
