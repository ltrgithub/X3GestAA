"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var keyHelper = require('syracuse-ui/lib/site/aside/keyHelper');

function ComboFormat() {
	this.$defaultChoiceLayout = "1";
}

exports.ComboFormat = helpers.defineClass(ComboFormat, null, {
	setDataValue: function(value) {
		this.field.currentValue = value;
		this._fillSelectedEnum(this._$selectedEnum = this.field.findEnum(value));

	},
	_fillSelectedEnum: function($selectedEnum) {
		var $title = $selectedEnum ? $selectedEnum.$title : "";
		if (this.field.$isEditMode) {
			this.field.setInputValue($title);
			if (this.iconValue) {
				this.setIcon(this.iconValue, $selectedEnum ? $selectedEnum.$value : null);
			}
		} else {
			this.field.fieldValue.textContent = $title;
		}
	},
	getDataValue: function() {
		if (this.field.$isEditMode) {
			if (this.field.getInputValue() == "") {
				this._$selectedEnum = null;
			}
		}
		return this._$selectedEnum ? this._$selectedEnum.$value : null;
	},
	onInputValidate: function(event, notify) {
		this._fillSelectedEnum(this.field.findEnum(this.getDataValue()));
	},
	doClickPicker: function() {
		this.toggleList();
	},
	render: function() {
		var $value = this.field.$field.$value;
		delete this.field.$item.$isAutoSizeDisabled;
		this.setEnum(this.field.$enum = $value ? $value.$enum : {});
		this.$skinItem = this.field.$skin + "-choice-list-item";
		if (this.field.$isEditMode) {
			this.field._input = document.createElement("input");
			this.field._input.setAttribute("type", "text");
			this.field.$$input = $(this.field._input);
			this.field._input.className = this.field.$skinInput;
			this.field.fieldValue.appendChild(this.field._input);
			this.field.appendToPickerBox(this.choiceBtn = this.field.createPicker("choice"));
			this.field._appendLinksPicker();
			if (this.field.$item.$icon) {
				this.choiceBtn.className += " s-icon";
				this.iconValue = this.createIcon(this.field.currentValue, this.field.$skin + "-choice-icon");
				$(this.field.fieldValue).prepend(this.iconValue);
				this.iconValue.top = "2px";
				this.iconValue.left = "2px";
				this.field._input.className += " " + this.field.$skin + "-choice-icon-input";
				this.field._input.style.paddingRight = (this.field._boxPickerPaddingRight - 20) + "px";
				if (this.field.$item.$icon.$inputMode == "icon") {
					this.field._input.style.width = "0px";
					this.field._input.style.visibility = "hidden";
					this.field._domItem.className += " s-choice-icon-mode";
				}
			}
		}
	},
	onChoiceItemClick: function(index) {
		if (!this.field.$isDisabled && !this.field.$isReadOnly) {
			this._selectItem(index, true);
			this.field.setInputValue(this._$selectedEnum.$title);
			this.field.$$input.change();
			if (this.iconValue) {
				this.setIcon(this.iconValue, this._$selectedEnum ? this._$selectedEnum.$value : null);
			}
			this.toggleList(false);
			if (document.site.focusedField != this.field) {
				this.field.focus();
			}
		}
	},
	_selectItem: function($index, select) {
		if (this._$selectedEnum) {
			delete this._$selectedEnum;
		}
		if (select) {
			this._$selectedEnum = this.field.$enum[$index];
			if (this._$selectedEnum) {
				this._selectChoice(this._$selectedEnum.$index = $index);
			}
		}
	},
	_selectChoice: function(selectedIndex) {
		if (this._choices) {
			for (var ii = 0, jj = this._choices.length; ii < jj; ii++) {
				var choice = this._choices[ii];
				if (choice.link) {
					document.site.toggleClass(choice.link, "s-choice-item-selected", choice.$index == selectedIndex);
				}
			}
		}
	},
	setIcon: function(domImg, $value) {
		var $path = document.site.$item.$iconPath + (this.$icon.$path || "");
		domImg.style.backgroundImage = $value ? "url('" + $path + $value + ".png')" : "";
	},
	createIcon: function($value, css) {
		var img = document.createElement("div");
		img.className = css;
		this.setIcon(img, $value);
		return img;
	},
	setEnum: function($enum) {
		this.field.$enum = $enum;
		this.field.localizeEnum();
		this._choices = [];
	},
	renderLayout: function(filter) {
		this._table = null;
		this._choices = [];
		if (this._listBody) {
			document.site.emptyDom(this._listBody);
			var $choiceLayout = this.field.$item.$choiceLayout;
			if (this.field.$enum.length > 10) {
				$choiceLayout = Math.min(Math.ceil(this.field.$enum.length / 10), 4);
			}
			var isRowLayout = $choiceLayout == "row";
			var curCol = 0,
				cols;
			if (!isRowLayout) {
				cols = [];
				this._table = document.createElement("div");
				this._table.className = "s-field-choice-cb-table";
				this._listBody.appendChild(this._table);
				for (var ii = 0, colCount = parseInt($choiceLayout, 10); ii < colCount; ii++) {
					var col = document.createElement("div");
					col.className = "s-field-choice-cb-col";
					cols[ii] = this._table.appendChild(col);
				}
			}
			this._$selectedListIndex = -1;
			var $icon = this.field.$item.$icon;
			var html, $enum;
			if (filter === "") {
				filter = null;
			}
			for (var ii = 0, jj = this.field.$enum.length; ii < jj; ii++) {
				var choice = {
					$index: ii
				};
				$enum = this.field.$enum[ii];
				html = null;
				if (filter) {
					if ((new RegExp("(" + filter + ")", "ig")).test($enum.$title)) {
						var className = this.field.currentValue && $enum.$value == this.field.currentValue ? 's-auto-complete-filter selected' : 's-auto-complete-filter';
						html = $enum.$title.replace(new RegExp("(" + filter + ")", "ig"), "<strong class='" + className + "'>$1</strong>");
					}
				} else {
					html = $enum.$title;
				}
				if (html) {
					if (this._$selectedEnum && ii == this._$selectedEnum.$index) {
						this._$selectedListIndex = this._choices.length;
					}
					choice.link = document.createElement("a");
					choice.link.className = this.$skinItem;
					choice.link.setAttribute("data-s-choice", ii);
					if ($icon) {
						choice.link.className += " s-icon";
						choice.link.appendChild(this.createIcon($enum.$value, this.$skinItem + "-icon"));
						if ($icon.$mode != "icon") {
							choice.link.innerHTML = html;
						} else {
							choice.link.setAttribute("title", html);
						}
					} else {
						choice.link.innerHTML = html;
					}
					if (this.field.currentValue == $enum.$value) {
						choice.link.className += " s-choice-item-selected";
					}
					if (isRowLayout) {
						choice.link.style.display = "inline-block";
						this._listBody.appendChild(choice.link);
					} else {
						cols[curCol].appendChild(choice.link);
						if (++curCol == cols.length) {
							curCol = 0;
						}
					}
					this._choices.push(choice);
				}
			}
			if (filter && this._choices.length == 0) {
				var noMatch = document.createElement("div");
				noMatch.className = "s-choice-no-match";
				noMatch.textContent = this.field.getLocalize().cf_choiceFieldNoMatch;
				this._listBody.appendChild(noMatch);
			}
			this._setMinWidth();
		} else {
			for (var ii = 0, jj = this.field.$enum.length; ii < jj; ii++) {
				var $enum = this.field.$enum[ii];
				if (filter) {
					if ((new RegExp("(" + filter + ")", "ig")).test($enum.$title)) {
						var className = this.field.currentValue && $enum.$value == this.field.currentValue ? 's-auto-complete-filter selected' : 's-auto-complete-filter';
						this._choices.push({
							$index: ii
						});
					}
				}
			}
		}
	},
	_setMinWidth: function() {
		this._list.style.minWidth = this.field.$$input.parent().width() + "px";
	},
	selectText: function(input, start, end) {
		if (input.createTextRange) {
			var selRange = input.createTextRange();
			selRange.collapse(true);
			selRange.moveStart('character', start);
			selRange.moveEnd('character', end - start);
			selRange.select();
		} else if (input.selectionStart) {
			input.selectionStart = start;
			input.selectionEnd = end;
		}
	},
	toggleList: function(show, filter) {
		var self = this;
		if (!self._popup && show !== false) {
			if (document.site.focusedField != self.field) {
				self.field.focus();
			}
			self.field._domItem.setAttribute("id", self.field.id);
			self._list = document.createElement("div");
			self._list.className = self.field.$skin + "-choice-list";
			self._list.setAttribute("data-s-field", self.field.id);
			self._list.setAttribute("data-s-article", self.field.articleParent.id);
			self._list.style.display = "none";
			self._listBody = document.createElement("div");
			self._listBody.className = self.field.$skin + "-choice-list-body";
			self._list.appendChild(self._listBody);
			//self.field.fieldValue.appendChild(self._list);
			self.renderLayout(filter);
			if (self._$selectedEnum) {
				self._selectItem(self._$selectedEnum.$index, true);
			}
			self._popup = self.field.boxParent.openDialog({
				content: self.field,
				autoCloseBoundaryId: self.field.id,
				$dialogMode: "popup",
				$$dialog: $(self._list),
				position: {
					my: "left top",
					at: "left bottom",
					of: self.field.$$input
				},
				onresize: function(dialog) {
					if (self.field.$$input) {
						var minWidth = self.field.$$input.parent().width();
						self._list.style.minWidth = minWidth + "px";
						var listWidth = dialog.$$dialogSlot.width();
						self._listBody.style.width = listWidth + "px";
						self._listBody.style.height = dialog.$$dialogSlot.height() + "px";
						var diff = self._listBody.scrollHeight - self._listBody.clientHeight;
						if (diff) {
							dialog.dialogSlot.style.height = Math.min(dialog._maxHeight / 2, dialog.$$dialogSlot.outerHeight(true) + diff) + "px";
							var height = dialog.$$dialogSlot.height();
							self._listBody.style.height = height + "px";
						}
						if (self._table) {
							self._table.style.width = listWidth <= minWidth ? "100%" : "";
						}
					}
				},
				onClose: function() {
					setTimeout(function() {
						document.site.removeDomChild(self._list);
						self._popup = self._list = self._listBody = null;
					}, 200);
				}
			});
		} else {
			if (self._popup) {
				if (show) {
					self._setMinWidth();
					self._popup.onWindowResize();
				} else {
					self._popup.close();
				}
			}
		}
	},
	onInputKeyup: function(input, event) {
		var self = this;
		clearTimeout(self._autoCompleteTimer)
		switch (event.keyCode) {
			case keyHelper.keyCode.ESCAPE:
				input.value = self._$selectedEnum ? self._$selectedEnum.$title : "";
				self.toggleList(false);
				break;
			case keyHelper.keyCode.DOWN:
			case keyHelper.keyCode.UP:
				self.toggleList(true);
				var current = self._$selectedListIndex !== undefined ? self._$selectedListIndex : -1;
				if (event.keyCode == keyHelper.keyCode.DOWN) {
					current++;
				} else {
					current--;
				}
				self._$selectedListIndex = Math.min(Math.max(current, 0), self._choices.length - 1);
				self._selectChoice(self._choices[self._$selectedListIndex].$index);
				input.value = self.field.$enum[self._choices[self._$selectedListIndex].$index].$title;
				this._selectItem(self._$selectedListIndex, true);
				break;
			case keyHelper.keyCode.TAB:
			case keyHelper.keyCode.CTRL:
			case keyHelper.keyCode.ALT:
			case keyHelper.keyCode.LEFTWIN:
			case keyHelper.keyCode.RIGHTWIN:
			case keyHelper.keyCode.SHIFT:
				break;
			default:
				self._autoCompleteTimer = setTimeout(function() {
					var filter = input.value || "";
					self.renderLayout(filter);
					if (self._choices.length > 0) {
						if (event.keyCode == keyHelper.keyCode.ENTER) {
							self.onChoiceItemClick(self._choices[0].$index);
							return;
						}
					}
					self.toggleList(true, filter);
				}, 100)
				break;
		}
		return true;
	},
	releaseMode: function() {
		this._choices = this._table = this._list = this._listBody = this._$selectedEnum = this.choiceBtn = null;
	},
	dispose: function(onApplyMetadata) {
		if (onApplyMetadata) {
			this.field.removeFromPickerBox(this.choiceBtn);
		}
		this.releaseMode(onApplyMetadata);
		this.field = null;
	}
});