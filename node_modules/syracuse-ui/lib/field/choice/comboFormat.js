"use strict";
exports.$defaultChoiceLayout = "1";

var _modes = {
	string: {
		setValue: function(field, $enum) {
			if (field.$isEditMode) {
				field.setInputValue($enum ? $enum.$title : "");
			} else {
				var $title = $enum ? $enum.$title : "";
				if ($title && !field.$isDetailLinkDisabled && field.$menus && field.$menus.$details) {
					syra_fields.addDetailLink(field, $enum.$value, field.$menus.$details);
				} else {
					field._dataValue.textContent = field.displayText = $title;
				}
			}
		},
		addItem: function(field, $btn, $enum) {
			return syra_menus.button.add($btn);
		},
		addValue: function(field) {}
	},
	icon: {
		setValue: function(field, $enum) {
			if (field.$isEditMode) {
				field.setInputValue($enum ? $enum.$title : "");
				syra_menus.button.setText(field.iconValue, $enum ? $enum.$title : "", this.setImageName(field, $enum && $enum.$value));
				field.iconValue.link.appendChild(field.input);
			}
		},
		addItem: function(field, $btn, $enum) {
			if ($btn.iconOnly = field.$item.$icon.$mode != "iconText") {
				$btn.css += " s-choice-icon-item";
			}
			if ($enum) {
				$btn.imageName = this.setImageName(field, $enum.$value);
			}
			return syra_menus.button.add($btn);
		},
		setImageName: function(field, value) {
			return value ? ((field.$item.$icon.$path || "") + value + ".png") : null;
		},
		addValue: function(field) {
			if (field.$isEditMode) {
				field.iconValue = this.addItem(field, {
					parent: field,
					css: field.$skinListItem,
					imageName: true,
					link: document.createElement("div")
				});
				field.iconValue.link.className += " s-choice-icon-value";
				field.iconValue.link.appendChild(field.input);
				field.input.className = "s-choice-icon-input";
				field._dataValue.insertBefore(field.iconValue.link, field._dataValue.firstChild);
			}
		},
		setWidth: function(field) {
			if (field.$isEditMode && !field.$item.$inplace) {
				field._dataValue.style.width = "54px";
				return false;
			}
			return true;
		}
	},
	indicator: {
		setValue: function(field, $enum) {
			var $title = $enum ? $enum.$title : "";
			if (field.isColorChoice) {
				field.cssValue.style.backgroundColor = $enum ? $enum.$value : null;
			} else {
				field.cssValue.className = field.$cssValue + ($enum ? (" s-" + field.$item.$indicator + "-" + $enum.$value) : "");
			}
			if (field.$isEditMode) {
				field.setInputValue($title);
			} else {
				if (field.isColorChoice) {
					field._dataValue.title = field.displayText = $title;
				} else {
					field._dataValue.textContent = field.displayText = $title;
					field._dataValue.insertBefore(field.cssValue, field._dataValue.firstChild);
				}
			}
		},
		addItem: function(field, $btn, $enum) {
			var btn = syra_menus.button.add($btn);
			btn.link.className += " s-choice-indic-item-link";
			var div = syra_dom.addDiv("s-choice-indic-item");
			if (field.isColorChoice) {
				$btn.link.textContent = "";
				div.style.backgroundColor = $enum.$value;
			} else {
				div.className += " s-" + field.$item.$indicator + "-" + $enum.$value;
			}
			btn.link.insertBefore(div, btn.link.firstChild);
			return btn;
		},
		addValue: function(field) {
			if (field.$isEditMode) {
				if (field.isColorChoice) {
					field.cssValue = syra_dom.addDiv("s-choice-color-item s-choice-indic-value");
					field.cssValue.appendChild(field.input);
					field.input.className = "s-choice-icon-input";
				} else {
					field.cssValue = syra_dom.addDiv(field.$cssValue = "s-choice-indic-value");
				}
			} else {
				field.cssValue = syra_dom.addDiv(field.$cssValue = "s-choice-indic-item");
			}
			field._dataValue.insertBefore(field.cssValue, field._dataValue.firstChild);
		},
		setWidth: function(field) {
			if (field.$isEditMode && field.isColorChoice && !field.$item.$inplace) {
				field._dataValue.style.width = "25px";
				return false;
			}
			return true;
		}
	}

};

function _selectItem(field, $index, select) {
	if (field.$selectedEnum) {
		delete field.$selectedEnum;
	}
	if (select) {
		field.$selectedEnum = field.$enum[$index];
		field.$selectedEnum && _selectChoice(field, field.$selectedEnum.$index = $index);
	}
}

function _selectChoice(field, selectedIndex) {
	if (field._choices) {
		for (var ii = 0, jj = field._choices.length; ii < jj; ii++) {
			var choice = field._choices[ii];
			if (choice.button) {
				syra_dom.toggleClass(choice.button.link, "s-selected", choice.$index == selectedIndex);
			}
		}
	}
}

function _onItemClick() {
	var choices = this.parent._choices,
		i, len, btnIdx = null;
	if (choices) {
		len = choices.length;
		for (i = 0; i < len; i++) {
			if (choices[i].$index == this.$index) {
				btnIdx = i;
				break;
			}
		}
		if (btnIdx != null) {
			_onChoiceItemClick(this.parent, choices[btnIdx]);
		}
	}
}


function _addChoiceItem(field, index, filter, cols) {
	var choice = {
		$index: index
	};
	var text, isHTML;
	var $enum = field.$enum[index];
	if (filter) {
		if ((new RegExp("^" + _escapeRegex(filter), "i")).test($enum.$title)) {
			isHTML = true;
			var className = field.currentValue && $enum.$value == field.currentValue ? 's-auto-complete-filter selected' : 's-auto-complete-filter';
			text = $enum.$title.replace(new RegExp("(" + _escapeRegex(filter) + ")", "i"), "<strong class='" + className + "'>$1</strong>");
		}
	} else {
		text = $enum.$title;
	}
	if (text != null) {
		if (text == "") {
			text = "&nbsp;";
		}
		if (field.$selectedEnum && index == field.$selectedEnum.$index) {
			field._$selectedListIndex = field._choices.length;
		}
		var css = field.$skinListItem;
		if (field.$item.$css) {
			css += " " + field.$item.$css;
		}
		choice.button = field.comboMode.addItem(field, {
			parent: field,
			text: isHTML ? "" : text,
			css: css,
			btnclick: _onItemClick,
			$index: index
		}, $enum);
		if (isHTML) {
			choice.button.link.innerHTML = syra_dom.formatHTMLText(text);
		}
		if (field.currentValue == $enum.$value) {
			choice.button.link.className += " s-selected";
		}
		if (!cols) {
			choice.button.link.style.display = "inline-block";
			field._list.appendChild(choice.button.link);
		} else {
			cols[field.curCol++].appendChild(choice.button.link);
			if (field.curCol >= cols.length) {
				field.curCol = 0;
			}
		}
		field._choices.push(choice);
	}
}

exports.setFieldWidth = function(field) {
	if (field.comboMode.setWidth) {
		return field.comboMode.setWidth(field);
	}
	return true; //default
};

exports.renderLayout = function(field, filter) {
	field._table = null;
	field._choices = [];
	if (field._list) {
		syra_dom.empty(field._list);
		var $choiceLayout = field.$item.$choiceLayout;
		var cols;
		if ($choiceLayout != "row") {
			$choiceLayout = parseInt($choiceLayout, 10);
			cols = [];
			field._table = syra_dom.addDiv("s-choice-list-table", field._list);
			for (var ii = 0, colCount = $choiceLayout; ii < colCount; ii++) {
				cols[ii] = syra_dom.addDiv("s-choice-list-col", field._table);
			}
		}
		field._$selectedListIndex = -1;
		if (filter === "") {
			filter = null;
		}
		field.curCol = 0;
		for (var ii = 0, jj = field.$enum.length; ii < jj; ii++) {
			_addChoiceItem(field, ii, filter, cols);
		}
		if (filter && field._choices.length == 0) {
			var noMatch = document.createElement("div");
			noMatch.className = "s-choice-no-match";
			noMatch.textContent = syra_local.fieldChoiceNoMatch;
			field._list.appendChild(noMatch);
		}
		_setMinWidth(field);
	} else {
		for (var ii = 0, jj = field.$enum.length; ii < jj; ii++) {
			var $enum = field.$enum[ii];
			if (filter) {
				if ((new RegExp("^" + _escapeRegex(filter), "i")).test($enum.$title)) {
					var className = field.currentValue && $enum.$value == field.currentValue ? 's-auto-complete-filter selected' : 's-auto-complete-filter';
					field._choices.push({
						$index: ii
					});
				}
			}
		}
	}
};

function _endInputFilter(field) {
	clearTimeout(field._autoCompleteTimer);
	var closed = _toggleList(field, false);
	delete field.autoCompleteFilter;
	return closed;
}


function _onChoiceItemClick(field, btn) {
	var index = btn.$index;
	delete field.autoCompleteFilter;
	if (index !== undefined && (!field.$isDisabled && (!field.$isReadOnly || field.$field.$isAutoComplete === false))) {
		_selectItem(field, index, true);
		field.comboMode.setValue(field, field.$selectedEnum);
		_toggleList(field, false);
		$(field.input).change();
		if (field.page && field.page.focusField != field) {
			field.focus();
		}
	}
}

function _filterInput(field, charCode, isSelectDisabled) {
	if (!field.$isDisabled && !field.$isReadOnly) {
		clearTimeout(field._autoCompleteTimer);
		if (field.$field.$isAutoComplete === false) {
			field.autoCompleteFilter = (field.autoCompleteFilter || "") + charCode;
		}
		field._autoCompleteTimer = setTimeout(function() {
			var filter;
			if (field.autoCompleteFilter !== undefined) {
				filter = field.autoCompleteFilter;
			} else {
				filter = field.input.value;
			}
			exports.renderLayout(field, filter);
			if (!isSelectDisabled && field._choices.length == 1) {
				_onChoiceItemClick(field, field._choices[0]);
				_toggleList(field, false);
			} else {
				_toggleList(field, true, filter);
			}

		}, 100);
	}
}

function _applyShortCut(field, shortcuts, event) {
	if (!field.$isDisabled && !field.$isReadOnly) {
		if (shortcuts.backspace) {
			if (field.autoCompleteFilter) {
				field.autoCompleteFilter = field.autoCompleteFilter.slice(0, field.autoCompleteFilter.length - 1);
			}
			_filterInput(field, "", true);
			if (field.$field.$isAutoComplete === false) {
				event.preventDefault();
				event.stopPropagation();
			}
			return true;
		}
		if (shortcuts.down || shortcuts.up) {
			clearTimeout(field._autoCompleteTimer);
			var isOpened = field.popupPicker && field.popupPicker.isOpened;
			if (!isOpened && shortcuts.up) {
				return false;
			}
			if (isOpened && event.shiftKey && shortcuts.up) {
				field.applyEscape();
				event.preventDefault();
				event.stopPropagation();
				return true;
			}
			_toggleList(field, true);
			var current = field._$selectedListIndex !== undefined ? field._$selectedListIndex : -1;
			if (isOpened) {
				if (!field._choices.length) {
					_toggleList(field, false);
					event.preventDefault();
					event.stopPropagation();
					return true;
				}
				if (shortcuts.down) {
					current++;
					if (current >= field._choices.length) {
						current = 0;
					}
				} else {
					current--;
					if (current < 0) {
						current = field._choices.length - 1;
					}
				}
			}
			if (!field._choices.length)
				return;
			field._$selectedListIndex = Math.max(current, 0);
			var $index = field._choices[field._$selectedListIndex].$index;
			_selectChoice(field, $index);
			//field.input.value = field.$enum[$index].$title;
			_selectItem(field, $index, true);
			field.comboMode.setValue(field, field.$selectedEnum);
			delete field.autoCompleteFilter;
			event.preventDefault();
			event.stopPropagation();
			return true;
		}
		if (shortcuts.enter) {
			clearTimeout(field._autoCompleteTimer);
			var filter;
			if (field.autoCompleteFilter !== undefined) {
				filter = field.autoCompleteFilter;
				delete field.autoCompleteFilter;
			} else {
				filter = field.input.value;
			}
			exports.renderLayout(field, filter);
			if (field._choices.length > 0) {
				_onChoiceItemClick(field, field._choices[0]);
				if (field._choices.length == 1) {
					return _toggleList(field, false);
				}
			}
			return false;
		}
	}
}


function _toggleList(field, show, filter) {
	if (!field.popupPicker && show !== false) {
		if (field.page.focusField != field) {
			field.focus();
		}
		field.domItem.id = field.id;
		field._list = syra_dom.addDiv("s-mn-popup-body " + (field.$item.$css ? field.$item.$css : ""));
		field._list.syraItem = field.id;
		field.articleParent.setArticleId(field._list);
		syra_dom.hide(field._list, true);
		exports.renderLayout(field, filter);
		if (field.$selectedEnum) {
			_selectItem(field, field.$selectedEnum.$index, true);
		}
		syra_quality.openChoiceComboList(field);
		field.popupPicker = syra_dlg.openPopup(field.boxParent, {
			content: field,
			autoCloseBoundary: field.domItem,
			slot: field._list,
			picker: field.layoutSlot,
			position: {
				my: "left top",
				at: "left bottom",
				of: $(field._dataValue)
			},
			onresize: function(dialog) {
				if (field.input) {
					var minWidth = field.input.parentNode.clientWidth + "px";
					var dialogRect = dialog.dialogSlot.getBoundingClientRect();
					field._list.style.minWidth = minWidth;
					var diff = field._list.scrollHeight - field._list.clientHeight;
					if (diff) {
						dialog.dialogSlot.style.height = Math.min(syra_site.getSize().dlg.maxHeight, dialogRect.height + diff) + "px";
					}
					if (field._table) {
						field._table.style.width = field._list.clientWidth + "px";
					}
				}
			},
			onClose: function() {
				setTimeout(function() {
					if (field && field.input) { //need test on field input for list paging field 
						field.input.value = field.$selectedEnum ? field.$selectedEnum.$title : "";
						syra_dom.removeChild(field._list);
					}
					field.popupPicker = field._list = null;
				}, 200);
			}
		});
		return true;
	} else {
		if (field.popupPicker) {
			if (show) {
				_setMinWidth(field);
				field.popupPicker.resizeDialog();
				return false;
			} else {
				field.popupPicker.close();
				return true;
			}
		}
	}
}

function _escapeRegex(string) {
	return string.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, '\\$&');
}

function _selectText(input, start, end) {
	if (input.createTextRange) {
		var selRange = input.createTextRange();
		selRange.collapse(true);
		selRange.moveStart('character', start);
		selRange.moveEnd('character', end - start);
		selRange.select();
	} else
	if (input.selectionStart) {
		input.selectionStart = start;
		input.selectionEnd = end;
	}
}

function _onPickerClick() {
	_toggleList(this.parent);
}

exports.dispose = function(field) {
	if (field) {
		field._list = field._table = field.iconValue = field.cssValue = null;
		field.comboMode = field.getDataValue = field.applyEscape = field.applyShortCut = field.validateKeyPress = null;
	}
};

exports.setEnum = function(field, $enum) {
	field.$enum = $enum;
	field.localizeEnum();
	field._choices = [];
};

exports.render = function(field) {
	field.getDataValue = function() {
		if (this.$isEditMode && this.$field.$isAutoComplete !== false) {
			if (this.getInputValue() == "") {
				this.$selectedEnum = null;
			}
		}
		return this.$selectedEnum ? this.$selectedEnum.$value : null;
	};
	field.fillSelectedEnum = function($selectedEnum) {
		this.comboMode.setValue(this, $selectedEnum);
	};
	field.applyEscape = function(shortcuts, event) {
		return _endInputFilter(this);
	};
	field.applyShortCut = function(shortcuts, event) {
		return _applyShortCut(this, shortcuts, event);
	};
	field.validateKeyPress = function(charCode, event) {
		if (event.keyCode != 13) {
			_filterInput(this, charCode);
			event.preventDefault();
			event.stopPropagation();
		}
		return true;
	};
	//field.$field.$isAutoComplete = false;
	field.pickerCount = 1;
	var $value = field.$field.$value;
	delete field.$item.$isAutoSizeDisabled;
	exports.setEnum(field, field.$enum = $value ? $value.$enum : {});
	field.$skinListItem = "s-mn-link";

	field.comboMode = _modes.string;
	if (field.$item.$icon) {
		field.comboMode = _modes.icon;
	}
	if (field.$item.$indicator) {
		field.isColorChoice = field.$item.$indicator == "$colorChoice";
		field.comboMode = _modes.indicator;
	}

	if (field.$isEditMode) {
		var css = field.$skinInput;
		if (field.$item.$css) {
			css += " " + field.$item.$css;
		}
		if (field.$item.$contentEditable) {
			field.input = syra_dom.addDiv(css);
			field.input.setAttribute("contenteditable", "true");
		} else {
			field.input = syra_dom.addInput();
			field.input.className = css;
		}
		field.input.syraOnClick = "onInputFieldClick";

		if (field.$field.$isAutoComplete === false) {
			field.input.setAttribute("readonly", "readonly");
		}
		if (field.$item.$contentEditable) {
			field.input.className += " s-contenteditable";
		}
		field._dataValue.appendChild(field.input);
		if (!field.picker_choice) {
			syra_menus.button.addFieldPicker({
				parent: field,
				pickerId: "choice",
				fontIcon: "expand_m",
				text: syra_local.fieldOpenChoiceList,
				shortCutTip: syra_shortCuts.tip.openPicker,
				btnclick: _onPickerClick
			});
		}
	}
	field.comboMode.addValue(field);
};

exports.setDataValue = function(field, value) {
	field.currentValue = value;
	field.fillSelectedEnum(field.$selectedEnum = field.findEnum(value));
};

function _setMinWidth(field) {
	field._list.style.minWidth = field.input.parentNode.clientWidth + "px";
}