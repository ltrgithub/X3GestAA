"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _setIcon(combo, dom, $value) {
	var $path = syra_site.$item.$iconPath + (combo.$icon.$path || "");
	dom.style.backgroundImage = $value ? "url('" + $path + $value + ".png')" : "";
}

function _createIcon(combo, $value, css) {
	var img = document.createElement("div");
	img.className = css;
	_setIcon(combo, img, $value);
	return img;
}

function _setItemText(field, $enum, filter) {
	if (filter) {
		if ((new RegExp("^" + filter, "i")).test($enum.$title)) {
			var className = field.currentValue && $enum.$value == field.currentValue ? 's-auto-complete-filter selected' : 's-auto-complete-filter';
			return $enum.$title.replace(new RegExp("(" + filter + ")", "i"), "<strong class='" + className + "'>$1</strong>");
		}
	} else {
		return $enum.$title;
	}
}

function _addChoiceItem(combo, field, index, filter, cols) {
	var choice = {
		$index: index
	};
	var $enum = field.$enum[index];
	var html = _setItemText(field, $enum, filter);
	if (html) {
		if (combo._$selectedEnum && index == combo._$selectedEnum.$index) {
			combo._$selectedListIndex = combo._choices.length;
		}
		var css = combo.$skinItem;
		if (field.$item.$css) {
			css += " " + field.$item.$css;
		}
		choice.link = syra_menus.addIconButton("", css, "onChoiceClick");
		choice.link.syraChoice = index;
		choice.link.syraOnChoiceItemClick = true;
		if (field.$item.$icon) {
			choice.link.className += " s-icon";
			choice.link.appendChild(_createIcon(combo, $enum.$value, combo.$skinItem + "-icon"));

			if (field.$item.$icon.$mode == 'iconText') {
				var div = document.createElement("div");
				div.className = combo.$skinItem + "-iconText";
				div.innerHTML = html;
				choice.link.appendChild(div);
			} else {
				if (field.$item.$icon.$mode != "icon") {
					choice.link.innerHTML = html;
				} else {
					syra_menus.setButtonTitle(choice.link, html);
				}
			}

		} else {
			if (field.$item.$cssMode) {
				choice.link.className += " s-cssmode " + field.$item.$cssMode.$css;
				var div = document.createElement("div");
				div.syraCss = combo.$skinItem + "-cssmode " + field.$item.$cssMode.$css;
				_setCssValue(field, div, $enum.$value);
				choice.link.appendChild(div);
			} else {
				choice.link.innerHTML = html;
			}
		}
		if (field.currentValue == $enum.$value) {
			choice.link.className += " s-selected";
		}
		if (!cols) {
			choice.link.style.display = "inline-block";
			combo._list.appendChild(choice.link);
		} else {
			cols[combo.curCol++].appendChild(choice.link);
			if (combo.curCol >= cols.length) {
				combo.curCol = 0;
			}
		}
		combo._choices.push(choice);
	}
}

function _renderLayout(combo, field, filter) {
	combo._table = null;
	combo._choices = [];
	if (combo._list) {
		syra_site.dom.empty(combo._list);
		var $choiceLayout = field.$item.$choiceLayout;
		var cols;
		if ($choiceLayout != "row") {
			$choiceLayout = parseInt($choiceLayout, 10);
			cols = [];
			combo._table = document.createElement("div");
			combo._table.className = "s-choice-list-table";
			combo._list.appendChild(combo._table);
			for (var ii = 0, colCount = $choiceLayout; ii < colCount; ii++) {
				var col = document.createElement("div");
				col.className = "s-choice-list-col";
				cols[ii] = combo._table.appendChild(col);
			}
		}
		combo._$selectedListIndex = -1;
		if (filter === "") {
			filter = null;
		}
		combo.curCol = 0;
		for (var ii = 0, jj = field.$enum.length; ii < jj; ii++) {
			_addChoiceItem(combo, field, ii, filter, cols);
		}
		if (filter && combo._choices.length == 0) {
			var noMatch = document.createElement("div");
			noMatch.className = "s-choice-no-match";
			noMatch.textContent = syra_local.fieldChoiceNoMatch;
			combo._list.appendChild(noMatch);
		}
		combo._setMinWidth();
	} else {
		for (var ii = 0, jj = field.$enum.length; ii < jj; ii++) {
			var $enum = field.$enum[ii];
			if (filter) {
				if ((new RegExp("^" + filter, "i")).test($enum.$title)) {
					var className = field.currentValue && $enum.$value == field.currentValue ? 's-auto-complete-filter selected' : 's-auto-complete-filter';
					combo._choices.push({
						$index: ii
					});
				}
			}
		}
	}
}


function _setCssValue(field, dom, $value) {
	dom.className = dom.syraCss;
	if ($value != undefined) {
		if (field.$item.$cssMode.$isColor) {
			dom.style.backgroundColor = $value;
		} else {
			dom.className += " " + "s-choice-css-" + $value;
		}
	}
}

function _fillSelectedEnum(combo, field, $selectedEnum) {
	var $title = $selectedEnum ? $selectedEnum.$title : "";
	if (field.$isEditMode) {
		field.setInputValue($title);
		if (combo.iconValue) {
			_setIcon(combo, combo.iconValue, $selectedEnum ? $selectedEnum.$value : null);
		}
		if (combo.cssValue) {
			_setCssValue(field, combo.cssValue, $selectedEnum ? $selectedEnum.$value : null);
		}
	} else {
		if ($title && !field.$isDetailLinkDisabled && field.$menus && field.$menus.$details) {
			field.appendDetailLink($title, field.$menus.$details);
		} else {
			field.fieldValue.textContent = $title;
		}
	}
	field.fieldHelper.setValueLength(field, $title);
}

function _onChoiceItemClick(combo, field, btn) {
	var index = btn.$index || btn.syraChoice;
	if (index !== undefined && (!field.$isDisabled && (!field.$isReadOnly || field.$field.$isAutoComplete === false))) {
		combo._selectItem(index, true);
		field.setInputValue(combo._$selectedEnum.$title);
		$(field.input).change();
		if (combo.iconValue) {
			_setIcon(combo, combo.iconValue, combo._$selectedEnum ? combo._$selectedEnum.$value : null);
		}
		if (combo.cssValue) {
			_setCssValue(field, combo.cssValue, combo._$selectedEnum ? combo._$selectedEnum.$value : null);
		}
		_toggleList(combo, field, false);
		if (field.page.focusField != field) {
			field.focus();
		}
	}
}

function _isPopupOpened(combo) {
	return combo.popupPicker && combo.popupPicker.isOpened;
}


function _applyShortCut(combo, field, shortcuts) {
	if (shortcuts.down || shortcuts.up) {
		clearTimeout(combo._autoCompleteTimer);
		if (!field.$isReadOnly) {
			var isOpened = _isPopupOpened(combo);
			_toggleList(combo, field, true);
			var current = combo._$selectedListIndex !== undefined ? combo._$selectedListIndex : -1;
			if (isOpened) {
				shortcuts.down ? current++ : current--;
			}
			combo._$selectedListIndex = Math.min(Math.max(current, 0), combo._choices.length - 1);
			combo._selectChoice(combo._choices[combo._$selectedListIndex].$index);
			field.input.value = field.$enum[combo._choices[combo._$selectedListIndex].$index].$title;
			combo._selectItem(combo._choices[combo._$selectedListIndex].$index, true);
			return true;
		}
	}
	if (shortcuts.enter) {
		clearTimeout(combo._autoCompleteTimer);
		if (!shortcuts.esc) {
			_renderLayout(combo, field, field.input.value);
			if (combo._choices.length > 0) {
				_onChoiceItemClick(combo, field, combo._choices[0]);
				if (combo._choices.length == 1) {
					_toggleList(combo, field, false);
					return true;
				}
			}
			return false;
		}
	}
}


function _toggleList(combo, field, show, filter) {
	if (!combo.popupPicker && show !== false) {
		if (field.page.focusField != field) {
			field.focus();
		}
		field.domItem.id = field.id;
		combo._list = document.createElement("div");
		combo._list.className = "s-choice-list-popup";
		if (field.$item.$css) {
			combo._list.className += " " + field.$item.$css;
		}
		combo._list.syraItem = field.id;
		field.articleParent.setArticleId(combo._list);
		combo._list.style.display = "none";
		_renderLayout(combo, field, filter);
		if (combo._$selectedEnum) {
			combo._selectItem(combo._$selectedEnum.$index, true);
		}
		combo.popupPicker = syra_site.dialogManager.openPopup(field.boxParent, {
			content: field,
			autoCloseBoundary: field.domItem,
			slot: combo._list,
			position: {
				my: "left top",
				at: "left bottom",
				of: $(field.domValueSlot)
			},
			onresize: function(dialog) {
				if (field.input) {
					var parentRect = field.input.parentNode.getBoundingClientRect();
					var dialogRect = dialog.dialogSlot.getBoundingClientRect();
					var minWidth = parentRect.width + "px";
					combo._list.style.minWidth = minWidth;
					var diff = combo._list.scrollHeight - combo._list.clientHeight;
					if (diff) {
						dialog.dialogSlot.style.height = Math.min(dialog._maxHeight, dialogRect.height + diff) + "px";
					}
					if (combo._table) {
						combo._table.style.width = combo._list.clientWidth + "px";
					}
				}
			},
			onClose: function() {
				setTimeout(function() {
					if (field) {
						field.input.value = combo._$selectedEnum ? combo._$selectedEnum.$title : "";
						syra_site.dom.removeChild(combo._list);
					}
					combo.popupPicker = combo._list = null;
				}, 200);
			}
		});
	} else {
		if (combo.popupPicker) {
			if (show) {
				combo._setMinWidth();
				combo.popupPicker.resizeDialog();
			} else {
				combo.popupPicker.close();
				return true;
			}
		}
	}
}


function ComboFormat() {
	this.$defaultChoiceLayout = "1";
}

exports.ComboFormat = helpers.defineClass(ComboFormat, null, {
	setDataValue: function(value) {
		this.field.currentValue = value;
		_fillSelectedEnum(this, this.field, this._$selectedEnum = this.field.findEnum(value));
	},

	getDataValue: function() {
		if (this.field.$isEditMode) {
			if (this.field.getInputValue() == "") {
				this._$selectedEnum = null;
			}
		}
		return this._$selectedEnum ? this._$selectedEnum.$value : null;
	},
	onInputValidate: function(event, notify) {
		_fillSelectedEnum(this, this.field, this.field.findEnum(this.getDataValue()));
	},
	validateKeyPress: function(charCode, event) {
		var self = this;
		//if (self.field.$field.$isAutoComplete !== false && event.keyCode != 13) {
		if (event.keyCode != 13) {
			self._autoCompleteTimer = setTimeout(function() {
				_renderLayout(self, self.field, self.field.input.value);
				if (self._choices.length == 1) {
					_onChoiceItemClick(self, self.field, self._choices[0]);
					_toggleList(self, self.field, false);
				} else {
					_toggleList(self, self.field, true, self.field.input.value);
				}

			}, 100);
		}
		return true;
	},
	applyShortCut: function(shortcuts) {
		return _applyShortCut(this, this.field, shortcuts);
	},
	render: function() {
		this.field.pickerCount = 1;
		var $value = this.field.$field.$value;
		delete this.field.$item.$isAutoSizeDisabled;
		this.setEnum(this.field.$enum = $value ? $value.$enum : {});
		this.$skinItem = "s-choice-list-item";
		if (this.field.$isEditMode) {
			if (this.field.$item.$contentEditable) {
				this.field.input = document.createElement("div");
				this.field.input.setAttribute("contenteditable", "true");
			} else {
				this.field.input = document.createElement("input");
				this.field.input.setAttribute("type", "text");
			}
			this.field.input.syraIsInput = true;
			this.field.input.syraOnClick = "onInputFieldClick";
			this.field.fieldValue.className += " s-combo";
			syra_site.setSpecificAttributes(this.field.input);
			// readonly input according to $isAutoComplete value (issue #2662, convergence need)
			if (this.field.$field.$isAutoComplete === false) {
				this.field.input.setAttribute("readonly", "readonly");
			}
			this.field.input.className = this.field.$skinInput;
			if (this.field.$item.$contentEditable) {
				this.field.input.className += " s-contenteditable";
			}
			this.field.fieldValue.appendChild(this.field.input);
			if (!this.field.mnPickers.choice) {
				syra_menus.addPicker(this.field, "choice", syra_local.fieldOpenChoiceList, null, "ESC + L, ESC + F12");
			}
			if (this.field.$item.$icon) {
				this.field.mnPickers.choice.className += " s-icon";
				this.iconValue = _createIcon(this, this.field.currentValue, this.field.$skin + "-choice-icon");
				$(this.field.fieldValue).prepend(this.iconValue);
				this.iconValue.top = "2px";
				this.iconValue.left = "2px";
				this.field.input.style.paddingRight = (this.field._boxPickerPaddingRight - 20) + "px";
				if (this.field.$item.$icon.$inputMode == "icon") {
					this.field.input.style.width = "0px";
					this.field.input.style.visibility = "hidden";
					this.field.domItem.className += " s-choice-icon-mode";
				}
			}
			if (this.field.$item.$cssMode) {
				this.field.mnPickers.choice.className += " s-cssmode " + this.field.$item.$cssMode.$css;
				this.cssValue = document.createElement("div");
				this.cssValue.syraCss = this.field.$skin + "-choice-cssmode " + this.field.$item.$cssMode.$css;
				_setCssValue(this.field, this.cssValue, this.field.currentValue);
				this.cssValue.syraCss = this.field.$skin + "-choice-cssmode " + this.field.$item.$cssMode.$css;
				this.field.fieldValue.insertBefore(this.cssValue, this.field.fieldValue.firstChild);
				this.field.input.className += " " + this.field.$skin + "-choice-cssmode-input";
				if (this.field.$item.$cssMode.$inputMode == "css") {
					this.field.input.style.display = "none";
				}
			}
			if (this.field.$item.$css) {
				this.field.input.className += " " + this.field.$item.$css;
			}
		}
	},
	onChoiceClick: function(event, btn) {
		if (btn.syraOnChoiceItemClick) {
			_onChoiceItemClick(this, this.field, btn);
		} else {
			_toggleList(this, this.field);
		}
	},

	_selectItem: function($index, select) {
		if (this._$selectedEnum) {
			delete this._$selectedEnum;
		}
		if (select) {
			this._$selectedEnum = this.field.$enum[$index];
			if (this._$selectedEnum) {
				this._selectChoice(this._$selectedEnum.$index = $index);
			}
		}
	},
	_selectChoice: function(selectedIndex) {
		if (this._choices) {
			for (var ii = 0, jj = this._choices.length; ii < jj; ii++) {
				var choice = this._choices[ii];
				if (choice.link) {
					syra_site.dom.toggleClass(choice.link, "s-selected", choice.$index == selectedIndex);
				}
			}
		}
	},
	setEnum: function($enum) {
		this.field.$enum = $enum;
		this.field.localizeEnum();
		this._choices = [];
	},
	renderLayout: function(filter) {
		_renderLayout(this, this.field, filter);
	},
	_setMinWidth: function() {
		this._list.style.minWidth = this.field.input.parentNode.clientWidth + "px";
	},
	selectText: function(input, start, end) {
		if (input.createTextRange) {
			var selRange = input.createTextRange();
			selRange.collapse(true);
			selRange.moveStart('character', start);
			selRange.moveEnd('character', end - start);
			selRange.select();
		} else
		if (input.selectionStart) {
			input.selectionStart = start;
			input.selectionEnd = end;
		}
	},

	dispose: function(onApplyMetadata) {
		this._choices = this._table = this._list = this._$selectedEnum = null;
		this.field = this.cssValue = this.iconValue = null;
	}
});