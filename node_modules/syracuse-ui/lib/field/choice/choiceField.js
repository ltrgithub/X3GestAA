"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

var _formats = {
	$combo: require('./comboFormat'),
	$radios: require('./radiosFormat')
};

function ChoiceField() {}

exports.ChoiceField = helpers.defineClass(ChoiceField, Field, {
	findEnum: function(value) {
		var result;
		for (var ii = 0; ii < this.$enum.length; ii++) {
			var $item = this.$enum[ii];
			if ($item.$value == value) {
				$item.$index = ii;
				result = $item;
				break;
			}
		}
		return result;
	},
	getFirstEnum: function() {
		return this.$enum && this.$enum.length > 0 ? this.$enum[0] : null;
	},
	focus: function(select) {
		this.boxParent.ensureOpened && this.boxParent.ensureOpened();
		var res;
		if (this.choiceFormat.focus) {
			res = this.choiceFormat.focus(this, select);
			this.scrollToField();
		} else {
			res = Field.prototype.focus.call(this, select);
		}
		return res;
	},
	applyMetaData: function(metaData) {
		if (metaData && metaData.$value && metaData.$value.$enum !== undefined) {
			if (this.choiceFormat) {
				this.choiceFormat.setEnum(this, metaData.$value.$enum);
				if (this.currentValue != null) {
					this.setDataValue(this.currentValue);
				}
			}
		}
		Field.prototype.applyMetaData.call(this, metaData);
	},
	applyDesignMetaData: function(metaData, designing) {
		Field.prototype.applyDesignMetaData.call(this, metaData, designing);
		var updated;
		if (metaData.$format && metaData.$format != this.$item.$format) {
			if (metaData.$choiceLayout !== undefined) {
				this.$item.$choiceLayout = metaData.$choiceLayout;
			}
			if (this.choiceFormat) {
				this.choiceFormat.dispose(this);
				delete this.choiceFormat;
			}
			this.$item.$format = metaData.$format;
			syra_site.dom.empty(this._dataValue);
			this.render();
			updated = true;
		}
		if (metaData.$choiceLayout !== undefined && metaData.$choiceLayout != this.$item.$choiceLayout) {
			this.$item.$choiceLayout = metaData.$choiceLayout;
			this.choiceFormat.renderLayout(this);
			updated = true;
		}
		if (updated) {
			this.setState(this.$field);
			if (this.currentValue != null) {
				this.setDataValue(this.currentValue);
			}
		}
	},
	setDataValue: function(value) {
		this.choiceFormat.setDataValue(this, value);
		syra_menus.pickers.menus.show(this);
	},
	getDisplayText: function() {
		return (this.$selectedEnum && this.$selectedEnum.$title) || "";
	},
	render: function() {
		this.$authoringType = "choiceField";
		this.$item.$format = this.$item.$format || this.$field.$format;
		if (this.$item.$isFilterMode || (this.$item.$format == undefined && (this.$item.$inplace || (this.$field.$value.$enum.length > (this.$item.$radiosMax || 4))))) {
			this.$item.$format = "$combo";
		}
		this.choiceFormat = _formats[this.$item.$format = (this.$item.$format || "$radios")];
		this._choices = [];
		this.$item.$choiceLayout = this.$item.$choiceLayout || this.choiceFormat.$defaultChoiceLayout;
		this.choiceFormat.render(this);
	},
	localizeEnum: function() {
		for (var ii = 0, jj = this.$enum.length; ii < jj; ii++) {
			var $title = this.$enum[ii].$title || this.$enum[ii].$value;
			if ($title.length > 0 && $title[1] == "@") {
				this.$enum[ii].$title = syra_site.expressionMaker.render(this.boxParent, $title);
			}
		}
	},
	highlightOnEnter: function(on, event, target) {
		if (this.choiceFormat.highlightOnEnter) {
			this.choiceFormat.highlightOnEnter(this, on, event, target);
		} else {
			Field.prototype.highlightOnEnter.call(this, on, event, target);
		}
	},
	highlightOnFocus: function(on, event) {
		if (this.choiceFormat.highlightOnFocus) {
			this.choiceFormat.highlightOnFocus(this, on, event);
		} else {
			Field.prototype.highlightOnFocus.call(this, on, event);
		}
	},
	_onSetReadOnly: function($isReadOnly) {
		if (this.$field.$isAutoComplete !== false) {
			Field.prototype._onSetReadOnly.call(this, $isReadOnly);
		}
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
		this.choiceFormat.setState && this.choiceFormat.setState(this, state);
	},
	dispose: function() {
		this.choiceFormat && this.choiceFormat.dispose(this);
		Field.prototype.dispose.call(this);
	}
});