"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
var ChoiceAuthoring = require("syracuse-ui/lib/authoring/field/choiceAuthoring").ChoiceAuthoring;

var _formatBuilders = {
	$combo: require('./comboFormat').ComboFormat,
	$radios: require('./radiosFormat').RadiosFormat,
	$button: require('./buttonFormat').ButtonFormat
};

function ChoiceField() {}

exports.ChoiceField = helpers.defineClass(ChoiceField, Field, {
	getAuthoringWidget: function(designedField) {
		if (!this.awAddin) {
			this.awAddin = new ChoiceAuthoring();
			this.awAddin.create(designedField);
		}
		return this.awAddin;
	},
	getDataType: function() {
		return this.$field.$value;
	},
	notifyFieldChange: function(newValue) {
		Field.prototype.notifyFieldChange.call(this, newValue);
		if (this.builder && this.builder.onNotifyFieldChange) {
			this.builder.onNotifyFieldChange(newValue);
		}
	},
	onClickPicker: function(btn) {
		if (this.builder && this.builder.onClickPicker ? this.builder.onClickPicker(btn) : true) {
			Field.prototype.onClickPicker.call(this, btn);
		}
	},
	findEnum: function(value) {
		var result;
		for (var ii = 0; ii < this.$enum.length; ii++) {
			var $item = this.$enum[ii];
			if ($item.$value == value) {
				$item.$index = ii;
				result = $item;
				break;
			}
		}
		return result;
	},
	getFirstEnum: function() {
		return this.$enum && this.$enum.length > 0 ? this.$enum[0] : null;
	},
	focus: function(select) {
		return this.builder.focus ? this.builder.focus(select) : Field.prototype.focus.call(this, select);
	},
	applyMetaData: function(metaData) {
		if (metaData && metaData.$value && metaData.$value.$enum !== undefined) {
			if (this.builder) {
				this.builder.setEnum(metaData.$value.$enum);
				if (this.currentValue != null) {
					this.setDataValue(this.currentValue);
				}
			}
		}
		Field.prototype.applyMetaData.call(this, metaData);
	},
	applyDesignMetaData: function(metaData, onAuthoring) {
		Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
		var updated;
		if (metaData.$format && metaData.$format != this.$item.$format) {
			if (metaData.$choiceLayout !== undefined) {
				this.$item.$choiceLayout = metaData.$choiceLayout;
			}
			if (this.builder) {
				this.builder.dispose(true);
				delete this.builder;
			}
			this.$item.$format = metaData.$format;
			document.site.emptyDom(this._dataValue);
			this.render();
			updated = true;
		}
		if (metaData.$choiceLayout !== undefined && metaData.$choiceLayout != this.$item.$choiceLayout) {
			this.$item.$choiceLayout = metaData.$choiceLayout;
			this.builder.renderLayout();
			updated = true;
		}
		if (updated) {
			this.setState(this.$field);
			if (this.currentValue != null) {
				this.setDataValue(this.currentValue);
			}
		}
	},
	setDataValue: function(value) {
		this.builder.setDataValue(value);
	},
	getDataValue: function() {
		return this.builder.getDataValue();
	},
	render: function() {
		this.$item.$format = this.$item.$format || this.$field.$format;
		if (this.$item.$isFilterMode || (this.$item.$format == undefined && (this.$item.$inplace || (this.$field.$value.$enum.length > (this.$item.$radiosMax || 4))))) {
			this.$item.$format = "$combo";
		}
		this.builder = new _formatBuilders[this.$item.$format = (this.$item.$format || "$radios")]();
		this.builder.field = this;
		this.builder._choices = [];
		this.$item.$choiceLayout = this.$item.$choiceLayout || this.builder.$defaultChoiceLayout;
		if (this.builder.field.$item.$icon) {
			this.builder.$icon = this.builder.field.$item.$icon;
		}
		this.builder.render();
	},
	localizeEnum: function() {
		for (var ii = 0, jj = this.$enum.length; ii < jj; ii++) {
			var $title = this.$enum[ii].$title || this.$enum[ii].$value;
			if ($title.length > 0 && $title[1] == "@") {
				this.$enum[ii].$title = this.boxParent.renderExpression($title);
			} else {
				break;
			}
		}
	},
	applyEscape: function() {
		this.builder.applyEscape ? this.builder.applyEscape() : false;
	},
	applyShortCuts: function(shortcurts, event) {
		return this.builder.applyShortCuts ? this.builder.applyShortCuts(shortcurts, event) : false;
	},
	validateKeyPress: function(charCode) {
		return this.builder.validateKeyPress ? this.builder.validateKeyPress(charCode) : true;
	},
	onInputValidate: function(event, notify) {
		if (this.builder.onInputValidate) {
			this.builder.onInputValidate(event, notify);
		}
		Field.prototype.onInputValidate.call(this, event, notify);
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
		if (this.builder.setState) {
			this.builder.setState(state);
		}
	},
	doClickPicker: function() {
		if (this.builder && this.builder.doClickPicker) {
			this.builder.doClickPicker();
		}
	},
	releaseMode: function(onDispose) {
		if (this.builder) {
			this.builder.releaseMode(onDispose);
		}
		this.builder = this.$enum = null;
		Field.prototype.releaseMode.call(this, onDispose);
	}
});