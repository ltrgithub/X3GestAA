"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
var ChoiceFieldAuthoring = require('./choiceFieldAuthoring').ChoiceFieldAuthoring;

var _formatBuilders = {
    $combo: require('./comboFormat').ComboFormat,
    $radios: require('./radiosFormat').RadiosFormat
};

function ChoiceField(){
}

exports.ChoiceField = helpers.defineClass(ChoiceField, Field, {
    getDataType: function(){
        return this.$field.$value;
    },
    findEnum: function(value){
        var result;
        for (var ii = 0; ii < this.$enum.length; ii++) {
            var $item = this.$enum[ii];
            if ($item.$value == value) {
                $item.$index = ii;
                result = $item;
                break;
            }
        }
        return result;
    },
    applyMetaData: function(metaData){
        if (metaData && metaData.$enum !== undefined) {
            if (this.builder) {
                this.builder.setEnum(metaData.$enum);
            }
        }
        Field.prototype.applyMetaData.call(this, metaData);
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
        var updated;
        if (metaData.$format && metaData.$format != this.$item.$format) {
            if (metaData.$choiceLayout !== undefined) {
                this.$item.$choiceLayout = metaData.$choiceLayout;
            }
            if (this.builder) {
                document.controller.disposeObject(this.builder);
                delete this.builder;
            }
            this.$item.$format = metaData.$format;
            this.$$dataValue.empty();
            this.render();
            updated = true;
        }
        if (metaData.$choiceLayout !== undefined && metaData.$choiceLayout != this.$item.$choiceLayout) {
            this.$item.$choiceLayout = metaData.$choiceLayout;
            this.builder.renderLayout();
            updated = true;
        }
        if (updated) {
            this.setState(this.$field);
            if (this.currentValue != null) {
                this.setDataValue(this.currentValue)
            }
        }
    },
    setDataValue: function(value){
        this.builder.setDataValue(value);
    },
    getAuthoringWidget: function(){
        return new ChoiceFieldAuthoring();
    },
    getDataValue: function(){
        return this.builder.getDataValue();
    },
    render: function(){
        this.$item.$format = this.$item.$format || this.$field.$format;
        if (this.$item.$isFilterMode || (this.$item.$format == undefined && (this.$item.$inplace || (this.$field.$value.$enum.length > (this.$item.$radiosMax || 4))))) {
            this.$item.$format = "$combo";
        }
        this.builder = new _formatBuilders[this.$item.$format = (this.$item.$format || "$radios")]();
        this.builder.field = this;
        this.builder._choices = [];
        this.$item.$choiceLayout = this.$item.$choiceLayout || this.builder.$defaultChoiceLayout;
        if (this.builder.field.$item.$icon) {
            this.builder.$icon = this.builder.field.$item.$icon;
            this.builder.$icon.$width = this.builder.$icon.$width || "32px";
            this.builder.$icon.$height = this.builder.$icon.$height || "32px";
            this.builder.$icon.$path = document.site.$item.$iconPath + (this.builder.$icon.$path || "");
        }
        this.builder.render();
    },
    onInputKeyup: function($$input, event){
        return this.builder.onInputKeyup($$input, event);
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        if (state.$isDisabled !== undefined) {
            this.$$dataValue.find("input").attr("disabled", state.$isDisabled);
        }
        if ((state.$isReadOnly !== undefined) && (this.$item.$format == "$radios")) {
            if (this.$isReadOnly) {
                this.$$dataValue.find("input").attr("disabled", true);
            }
            else {
                if (!this.$isDisabled) {
                    this.$$dataValue.find("input").attr("disabled", false);
                }
            }
        }
    },
    _doClickPicker: function(){
        if (this.builder.doClickPicker) {
            this.builder.doClickPicker();
        }
    },
    releaseMode: function(onDispose){
        if (this.builder) {
            this.builder.releaseMode(onDispose);
        }
        delete this.builder;
        Field.prototype.releaseMode.call(this, onDispose);
    }
});
