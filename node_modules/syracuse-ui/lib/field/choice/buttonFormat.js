"use strict";
var helpers = require('syracuse-core/lib/helpers');

function ButtonFormat() {
	this.$defaultChoiceLayout = "row";
}

exports.ButtonFormat = helpers.defineClass(ButtonFormat, null, {
	focus: function() {
		if (this.field.$isEditMode && !this.field.$isHidden && !this.field.$isDisabled) {
			var index = 0;
			for (var ii = 0, jj = this._choices.length; ii < jj; ii++) {
				if (this._choices[ii].checked) {
					index = ii;
					break;
				}
			}
			this._choices[index].focus();
			return true;
		}
		return false;
	},
	setDataValue: function(value) {
		this.field.currentValue = value;
		var oldSelected = this._$selectedEnum;
		this._$selectedEnum = this.field.findEnum(value);

		if (this.field.$isEditMode) {
			if (oldSelected) {
				syra_site.dom.toggleClass(this._choices[oldSelected.$index], "s-selected", false);
			}
			if (this._$selectedEnum) {
				syra_site.dom.toggleClass(this._choices[this._$selectedEnum.$index], "s-selected", true);
			}
		} else {
			var $title = this._$selectedEnum ? this._$selectedEnum.$title : "";
			this.field.fieldValue.textContent = $title;
			this.field.fieldHelper.setValueLength(this.field, $title);
		}
	},
	getDataValue: function() {
		return this._$selectedEnum ? this._$selectedEnum.$value : null;
	},
	onChoiceClick: function(event, btn) {
		this.setDataValue(this.field.$enum[btn.syraChoice].$value);
		this.field.notifyFieldChange(this.getDataValue());
	},
	setEnum: function($enum) {
		this.field.$enum = $enum;
		this.field.localizeEnum();
		if (this._choices && this._choices.length > 0) {
			this.renderLayout();
		}

	},
	render: function() {
		this.setEnum(this.field.getDataType().$enum);
		if (this.field.$isEditMode) {
			this.renderLayout();
		}
	},
	renderLayout: function() {
		var self = this;
		this.field.$item.$isAutoSizeDisabled = true;
		this._choices = [];
		if (!this._fieldset) {
			this._fieldset = document.createElement("div");
			this._fieldset.syraItem = this.id;
			this._fieldset.className = this.$skin = this.field.$skin + "-choice-btns";
			this.field.fieldValue.appendChild(this._fieldset);
		} else {
			syra_site.dom.empty(this._fieldset);
		}
		var isColLayout = this.field.$item.$choiceLayout != "row";
		var rows, curRow = 0,
			colCount, curCol = 0;
		if (isColLayout) {
			rows = [];
			colCount = this.field.$item.$choiceLayout;
			for (var ii = 0, max = Math.ceil(this.field.$enum.length / colCount); ii < max; ii++) {
				var row = document.createElement("div");
				row.className = "s-field-choice-btn-row";
				rows[ii] = this._fieldset.appendChild(row);
			}
		}
		var $skinItem = this.$skin + "-item";
		for (var ii = 0, jj = this.field.$enum.length; ii < jj; ii++) {
			var $enum = this.field.$enum[ii];
			var css = this.$skin + "-link";
			if (this.field.$item.$css) {
				css += " " + this.field.$item.$css;
			}
			var btn = syra_menus.addIconButton($enum.$title, css, "onChoiceClick");
			btn.syraChoice = ii;
			btn.setAttribute("data-s-field2", this.field.id);
			var rdItem = document.createElement("div");
			rdItem.className = $skinItem;
			if (this.field.$item.$css) {
				rdItem.className += " " + this.field.$item.$css;
			}
			rdItem.appendChild(btn);
			if (isColLayout) {
				rows[curRow].appendChild(rdItem);
				if (++curCol == colCount) {
					curRow++;
					curCol = 0;
				}
			} else {
				this._fieldset.appendChild(rdItem);
			}
			this._choices.push(btn);

			if (this.field.$item.$icon) {
				var $path = syra_site.$item.$iconPath + (this.$icon.$path || "");
				var image = $path + $enum.$value + ".png";
				var img = document.createElement("div");
				img.className = $skinItem + "-icon";
				img.style.backgroundImage = "url('" + image + "')";
				btn.syraOnClick = "onChoiceClick";
				btn.syraChoice = ii;
				btn.appendChild(img);
				if (this.field.$item.$icon.$mode == "icon") {
					img.className += " s-label";
					btn.className += " s-icon";
				} else {
					this._label = document.createElement("div");
					this._label.className = $skinItem + "-label";
					this._label.textContent = $enum.$title;
					btn.appendChild(this._label);
					btn.className += " s-icon-label";
				}
			} else {
				btn.textContent = title;
			}
		}

		if (isColLayout && curCol > 0) {
			while (curCol < colCount) {
				var emptyItem = document.createElement("div");
				emptyItem.className = this.$skin + "-item";
				rows[curRow].appendChild(emptyItem);
				curCol++;
			}
		}
		rows = null;
	},
	dispose: function() {
		this._fieldset = this._choices = this.field = this._$selectedEnum = this.$icon = this._label = null;
	}
});