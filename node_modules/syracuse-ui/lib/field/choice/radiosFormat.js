"use strict";
var helpers = require('syracuse-core/lib/helpers');

function RadiosFormat() {
	this.$defaultChoiceLayout = "row";
}

exports.RadiosFormat = helpers.defineClass(RadiosFormat, null, {
	focus: function() {
		if (this.field.$isEditMode && !this.field.$isHidden && !this.field.$isDisabled) {
			var index = 0;
			for (var ii = 0, jj = this._choices.length; ii < jj; ii++) {
				if (this._choices[ii].checked) {
					index = ii;
					break;
				}
			}
			this._choices[index].focus();
			return true;
		}
		return false;
	},
	setState: function(state) {
		if (state.$isDisabled !== undefined || state.$isReadOnly !== undefined) {
			if (state.$isDisabled !== undefined) {
				this.$isDisabled = state.$isDisabled;
			}
			if (state.$isReadOnly !== undefined) {
				this.$isReadOnly = state.$isReadOnly;
			}
			var isDisabled = this.$isDisabled || this.$isReadOnly;
			for (var ii = 0, jj = this._choices.length; ii < jj; ii++) {
				var choice = this._choices[ii];
				if (isDisabled) {
					choice.setAttribute("disabled", true);
				} else {
					choice.removeAttribute("disabled");
				}

			}
		}
	},
	_setSelectedState: function(newSelected) {
		if (this._currendSelected) {
			this._currendSelected.removeAttribute("data-s-selected");
			this._currendSelected = null;
		}
		if (newSelected) {
			(this._currendSelected = newSelected).setAttribute("data-s-selected", true);
		}
	},
	onNotifyFieldChange: function(newValue) {
		if (this._choices) {
			var selected = this.field.findEnum(newValue);
			if (selected) {
				this._setSelectedState(this._choices[selected.$index]);
			}
		}
	},
	setDataValue: function(value) {
		var $currSelectedEnum = this._$selectedEnum;
		this.field.currentValue = value;
		this._$selectedEnum = this.field.findEnum(value);
		if (this.field.$isEditMode) {
			if (this._$selectedEnum) {
				this._choices[this._$selectedEnum.$index].checked = true;
			} else
			if (value == null && $currSelectedEnum) {
				this._choices[$currSelectedEnum.$index].checked = false;
			}
			this._setSelectedState(this._choices[this._$selectedEnum ? this._$selectedEnum.$index : null]);
		} else {
			if (value && !this.field.$isDetailLinkDisabled && this.field.$rootLinks.$links && this.field.$rootLinks.$links.$details) {
				this.field.appendDetailLink(this._$selectedEnum ? this._$selectedEnum.$title : "", this.field.$rootLinks.$links.$details);
			} else {
				this.field.fieldValue.textContent = this._$selectedEnum ? this._$selectedEnum.$title : "";
			}
		}
	},
	getDataValue: function() {
		var index = -1;
		for (var ii = 0, jj = this._choices.length; ii < jj; ii++) {
			if (this._choices[ii].checked) {
				index = ii;
				break;
			}
		}
		return (index < 0) ? null : this.field.$enum[index].$value;
	},
	setEnum: function($enum) {
		this.field.$enum = $enum;
		this.field.localizeEnum();
		this.renderLayout();

	},
	render: function() {
		this.setEnum(this.field.getDataType().$enum);
		this.renderLayout();
	},
	renderLayout: function() {
		if (this.field.$isEditMode) {
			this.field.$item.$isAutoSizeDisabled = true;
			this._choices = [];
			this.choicesItems = [];
			if (!this._fieldset) {
				this._fieldset = document.createElement("fieldset");
				this._fieldset.className = this.$skin = this.field.$skin + "-choice-rd";
				this.field.fieldValue.appendChild(this._fieldset);
			} else {
				document.site.emptyDom(this._fieldset);
			}
			var isColLayout = this.field.$item.$choiceLayout != "row";
			var rows, curRow = 0,
				colCount, curCol = 0;
			if (isColLayout) {
				rows = [];
				colCount = this.field.$item.$choiceLayout;
				for (var ii = 0, max = Math.ceil(this.field.$enum.length / colCount); ii < max; ii++) {
					var row = document.createElement("div");
					row.className = "s-field-choice-rd-row";
					rows[ii] = this._fieldset.appendChild(row);
				}
			}
			document.site.toggleClass(this._fieldset, "s-field-choice-rd-tb", isColLayout);
			var $skinItem = this.$skin + "-item";
			var groupName = this.field.id + "-group";
			for (var ii = 0, jj = this.field.$enum.length; ii < jj; ii++) {
				var $enum = this.field.$enum[ii];
				var id = groupName + ii;
				var input = document.createElement("input");
				// add attribute to disable browser spellcheck and autocorrect
				document.site.setSpecificAttributes(input);
				input.setAttribute("type", "radio");
				input.value = ii;
				input.className = this.$skin + "-radio";
				input.id = id;
				input.setAttribute("name", groupName);
				input.syra_field_id = this.field.id;
				input.setAttribute("data-s-field", this.field.id);

				var title = document.createElement("label");
				title.className = this.$skin + "-title";
				title.setAttribute("for", id);
				title.textContent = $enum.$title;
				if (this.field.$item.$css) {
					title.className += " " + this.field.$item.$css;
				}

				var rdItem = document.createElement("div");
				rdItem.className = $skinItem + ((isColLayout) ? " s-field-choice-rd-cell" : "");
				rdItem.appendChild(input);

				if (isColLayout) {
					rows[curRow].appendChild(rdItem);
					if (++curCol == colCount) {
						curRow++;
						curCol = 0;
					}
				} else {
					this._fieldset.appendChild(rdItem);
				}
				this._choices.push(input);
				if (this.field.$item.$icon) {
					var $path = document.site.$item.$iconPath + (this.$icon.$path || "");
					var image = $path + $enum.$value + ".png";
					var img = document.createElement("div");
					img.className = $skinItem + "-icon";
					img.style.backgroundImage = "url('" + image + "')";
					rdItem.appendChild(img);
				}
				rdItem.appendChild(title);
				this.choicesItems.push(rdItem);
			}

			if (isColLayout && curCol > 0) {
				while (curCol < colCount) {
					var emptyItem = document.createElement("div");
					emptyItem.className = this.$skin + "-item";
					rows[curRow].appendChild(emptyItem);
					curCol++;
				}
			}
			rows = null;
		}
	},
	dispose: function() {
		this._choices = this.choicesItems = null;
		this._currendSelected = this._choices = this.choicesItems = this.field = this._$selectedEnum = this._fieldset = null;
	}
});