"use strict";
exports.$defaultChoiceLayout = "row";

exports.setEnum = function(field, $enum) {
	field.$enum = $enum;
	field.localizeEnum();
	exports.renderLayout(field);
};

exports.setDataValue = function(field, value) {
	var $currSelectedEnum = field.$selectedEnum;
	field.currentValue = value;
	field.$selectedEnum = field.findEnum(value);
	if (field.$isEditMode) {
		if (field.$selectedEnum) {
			field.selectRadioBtn(field.$selectedEnum.$index, true);
		} else {
			(value == null) && field.selectRadioBtn(null, false);
		}
	} else {
		var $title = field.displayText = field.$selectedEnum ? field.$selectedEnum.$title : "";
		if (value && !field.$isDetailLinkDisabled && field.$menus && field.$menus.$details) {
			field.appendDetailLink(value, field.$menus.$details);
		} else {
			field._dataValue.textContent = $title;
		}
	}
};


exports.focus = function(field) {
	if (field.$isEditMode && !field.$isHidden && !field.$isDisabled) {
		field._choices[field.selectedIndex >= 0 ? field.selectedIndex : 0].checkBox.input.focus();
		return true;
	}
	return false;
};
exports.highlightOnEnter = function(field, on, event, target) {
	if (!on || (!field.$isReadOnly && !field.$isDisabled)) {
		if (target && target.syraEnumIndex >= 0) {
			var rdItem = field._choices[target.syraEnumIndex];
			rdItem && syra_dom.toggleClass(rdItem.checkBox.icon, "s-enter", on);
		}
	}
};
exports.highlightOnFocus = function(field, on, event) {
	if (!on || (!field.$isReadOnly && !field.$isDisabled)) {
		if (event.target && event.target.syraEnumIndex >= 0) {
			var rdItem = field._choices[event.target.syraEnumIndex];
			rdItem && syra_dom.toggleClass(rdItem.checkBox.icon, "s-focus", on);
		}
	}
};
exports.setState = function(field, state) {
	if (state.$isDisabled !== undefined || state.$isReadOnly !== undefined) {
		var isDisabled = field.$isDisabled || field.$isReadOnly;
		for (var ii = 0, jj = field._choices.length; ii < jj; ii++) {
			var choice = field._choices[ii];
			syra_dom.toggleClass(choice.checkBox.icon, "s-disabled", isDisabled);
			if (isDisabled) {
				choice.checkBox.input.setAttribute("disabled", true);
			} else {
				choice.checkBox.input.removeAttribute("disabled");
			}
			if (state.$isReadOnly !== undefined) {
				if (field.$isReadOnly) {
					choice.checkBox.input.setAttribute("readonly", "readonly");
				} else {
					choice.checkBox.input.removeAttribute("readonly");
				}
			}
		}
	}
};

exports.dispose = function(field) {
	if (field) {
		field.getDataValue = field.selectedIndex = field.selectRadioBtn = field.onInputValueChanged = null;
	}
};

exports.render = function(field) {
	field.getDataValue = function(event) {
		this.onInputValueChanged(event);
		if (this.$isEditMode) {
			return (this.selectedIndex < 0) ? null : this.$enum[this.selectedIndex].$value;
		}
		return this.currentValue;
	};
	field.selectRadioBtn = function(index, selected) {
		if (selected) {
			if (this.selectedIndex >= 0 && this.selectedIndex != index) {
				syra_fields.checkbox.setValue(this._choices[this.selectedIndex], false);
			}
			this.selectedIndex = index;
		}
		if (index !== null) {
			syra_fields.checkbox.setValue(this._choices[index], selected);
		} else {
			this.selectedIndex >= 0 && syra_fields.checkbox.setValue(this._choices[this.selectedIndex], false);
			this.selectedIndex = -1;
		}
	};
	field.onInputValueChanged = function(event) {
		event && event.target && this.selectRadioBtn(event.target.syraEnumIndex, true);
		return true;
	};
	field.isRadioChoiceField = true;
	exports.setEnum(field, field.$field.$value.$enum);
	exports.renderLayout(field);
};

exports.renderLayout = function(field) {
	if (field.$isEditMode) {
		var $skin = field.$skin + "-choice-rd";
		field.$item.$isAutoSizeDisabled = true;
		field.selectedIndex = -1;
		field._choices = [];
		if (!field._fieldset) {
			field._fieldset = document.createElement("div");
			field._fieldset.className = $skin;
			field._dataValue.className += " s-radios";
			field._dataValue.appendChild(field._fieldset);
		} else {
			syra_dom.empty(field._fieldset);
		}
		var isColLayout = field.$item.$choiceLayout != "row";
		var rows, curRow = 0,
			colCount, curCol = 0;
		if (isColLayout) {
			rows = [];
			colCount = field.$item.$choiceLayout;
			for (var ii = 0, max = Math.ceil(field.$enum.length / colCount); ii < max; ii++) {
				var row = document.createElement("div");
				row.className = "s-field-choice-rd-row";
				rows[ii] = field._fieldset.appendChild(row);
			}
		}
		syra_dom.toggleClass(field._fieldset, "s-field-choice-rd-tb", isColLayout);
		var $skinItem = $skin + "-item";
		var groupName = field.id + "-group";
		for (var ii = 0, jj = field.$enum.length; ii < jj; ii++) {
			var $enum = field.$enum[ii];
			var id = groupName + ii;
			var rdItem = {
				slot: document.createElement("div"),
				title: document.createElement("label")
			};
			syra_fields.checkbox.render(rdItem, id, $skin + "-radio", true);
			rdItem.slot.syrainout = field.id;
			rdItem.slot.syraEnumIndex = ii;
			rdItem.checkBox.input.value = rdItem.checkBox.input.syraEnumIndex = ii;
			rdItem.checkBox.input.setAttribute("name", groupName);
			rdItem.checkBox.input.syraOnClick = "onInputFieldClick";
			rdItem.title.className = $skin + "-title";
			rdItem.title.setAttribute("for", id);
			rdItem.title.textContent = $enum.$title;
			if (field.$item.$css) {
				rdItem.title.className += " " + field.$item.$css;
			}

			rdItem.slot.className = $skinItem + ((isColLayout) ? " s-field-choice-rd-cell" : "");
			rdItem.slot.appendChild(rdItem.checkBox.slot);

			if (isColLayout) {
				rows[curRow].appendChild(rdItem.slot);
				if (++curCol == colCount) {
					curRow++;
					curCol = 0;
				}
			} else {
				field._fieldset.appendChild(rdItem.slot);
			}
			field._choices.push(rdItem);
			if (field.$item.$icon) {
				var $path = syra_site.$iconPath + (field.$item.$icon.$path || "");
				rdItem.checkBox.icon.className = $skinItem + "-icon";
				rdItem.checkBox.icon.style.backgroundImage = "url('" + $path + $enum.$value + ".png')";
			}
			rdItem.slot.appendChild(rdItem.title);
		}

		if (isColLayout && curCol > 0) {
			while (curCol < colCount) {
				var emptyItem = document.createElement("div");
				emptyItem.className = $skinItem;
				rows[curRow].appendChild(emptyItem);
				curCol++;
			}
		}
		rows = null;
	}
};