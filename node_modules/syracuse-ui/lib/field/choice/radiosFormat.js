"use strict";
var helpers = require('syracuse-core/lib/helpers');

function RadiosFormat(){
    this.$defaultChoiceLayout = "row";
}

exports.RadiosFormat = helpers.defineClass(RadiosFormat, null, {
    onInputKeyup: function(input, event){
        return true;
    },
    focus: function(){
        if (this.field.$isEditMode && this.field.isVisible && !this.field.$isDisabled) {
            var index = 0;
            for (var ii = 0, jj = this._choices.length; ii < jj; ii++) {
                if (this._choices[ii].checked) {
                    index = ii;
                    break;
                }
            }
            this._choices[index].focus();
            return true;
        }
        return false;
    },
    setDataValue: function(value){
        this.field.currentValue = value;
        this._$selectedEnum = this.field.findEnum(value);
        if (this.field.$isEditMode) {
            if (this._$selectedEnum) {
                this._choices[this._$selectedEnum.$index].checked = true;
            }
        }
        else {
            this.field.fieldValue.textContent = this._$selectedEnum ? this._$selectedEnum.$title : "";
        }
    },
    getDataValue: function(){
        var index = -1;
        for (var ii = 0, jj = this._choices.length; ii < jj; ii++) {
            if (this._choices[ii].checked) {
                index = ii;
                break;
            }
        }
        return (index < 0) ? null : this.field.$enum[index].$value;
    },
    setEnum: function($enum){
        this.field.$enum = $enum;
        this.field.localizeEnum();
        this.renderLayout();
        
    },
    render: function(){
        this.setEnum(this.field.getDataType().$enum);
        if (this.field.$isEditMode) {
            this.renderLayout();
        }
        else {
            //this.field.$$fieldValue.addClass("");
        }
    },
    renderLayout: function(){
        this.field.$item.$isAutoSizeDisabled = true;
        this._choices = [];
        if (!this._fieldset) {
            this._fieldset = document.createElement("fieldset");
            this._fieldset.className = this.$skin = this.field.$skin + "-choice-rd";
            this.field.fieldValue.appendChild(this._fieldset);
        }
        else {
            document.site.emptyDom(this._fieldset);
        }
        var isColLayout = this.field.$item.$choiceLayout != "row";
        var rows, curRow = 0, colCount, curCol = 0;
        if (isColLayout) {
            rows = [];
            colCount = this.field.$item.$choiceLayout;
            for (var ii = 0, max = Math.ceil(this.field.$enum.length / colCount); ii < max; ii++) {
                var row = document.createElement("div");
                row.className = "s-field-choice-rd-row";
                rows[ii] = this._fieldset.appendChild(row);
            }
        }
        document.site.toggleClass(this._fieldset, "s-field-choice-rd-tb", isColLayout);
        var $skinItem = this.$skin + "-item";
        var groupName = this.field.id + "-group";
        for (var ii = 0, jj = this.field.$enum.length; ii < jj; ii++) {
            var $enum = this.field.$enum[ii];
            var id = groupName + ii;
            var input = document.createElement("input");
            input.setAttribute("type", "radio");
            input.value = ii;
            input.className = this.$skin + "-radio";
            input.setAttribute("id", id);
            input.setAttribute("name", groupName);
            input.setAttribute("data-s-field", this.field.id);
            
            var title = document.createElement("label");
            title.className = this.$skin + "-title";
            title.setAttribute("for", id);
            title.textContent = $enum.$title;
            
            var rdItem = document.createElement("div");
            rdItem.className = $skinItem + ((isColLayout) ? " s-field-choice-rd-cell" : "");
            rdItem.appendChild(input);
            
            if (isColLayout) {
                rows[curRow].appendChild(rdItem);
                if (++curCol == colCount) {
                    curRow++;
                    curCol = 0;
                }
            }
            else {
                this._fieldset.appendChild(rdItem);
            }
            this._choices.push(input);
            if (this.field.$item.$icon) {
                var $path = document.site.$item.$iconPath + (this.$icon.$path || "");
                var image = $path + $enum.$value + ".png";
                var img = document.createElement("div");
                img.className = $skinItem + "-icon";
                img.style.backgroundImage = "url('" + image + "')";
                rdItem.appendChild(img);
            }
            rdItem.appendChild(title);
        }
        
        if (isColLayout && curCol > 0) {
            while (curCol < colCount) {
                var emptyItem = document.createElement("div");
                emptyItem.className = this.$skin + "-item";
                rows[curRow].appendChild(emptyItem);
                curCol++;
            }
        }
        rows = null;
    },
    releaseMode: function(){
        delete this._choices;
    },
    dispose: function(){
        this._choices = this.field = this._$selectedEnum = this._fieldset = null;
    }
});
