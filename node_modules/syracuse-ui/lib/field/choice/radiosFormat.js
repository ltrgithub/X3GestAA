"use strict";
var helpers = require('syracuse-core/lib/helpers');


function _setSelection(format, index, selected) {
	if (selected) {
		if (format.selectedIndex >= 0 && format.selectedIndex != index) {
			syra_fields.setCheckBockValue(format._choices[format.selectedIndex], false);
		}
		format.selectedIndex = index;
	}
	if (index !== null) {
		syra_fields.setCheckBockValue(format._choices[index], selected);
	} else {
		format.selectedIndex >= 0 && syra_fields.setCheckBockValue(format._choices[format.selectedIndex], false);
		format.selectedIndex = -1;
	}
}

function RadiosFormat() {
	this.$defaultChoiceLayout = "row";
}

exports.RadiosFormat = helpers.defineClass(RadiosFormat, null, {
	focus: function() {
		if (this.field.$isEditMode && !this.field.$isHidden && !this.field.$isDisabled) {
			this._choices[this.selectedIndex >= 0 ? this.selectedIndex : 0].checkBox.input.focus();
			return true;
		}
		return false;
	},
	highlightOnEnter: function(on, event, target) {
		if (!on || (!this.$isReadOnly && !this.$isDisabled)) {
			if (target && target.syraEnumIndex >= 0) {
				var rdItem = this._choices[target.syraEnumIndex];
				rdItem && syra_site.dom.toggleClass(rdItem.checkBox.icon, "s-enter", on);
			}
		}
	},
	highlightOnFocus: function(on, event) {
		if (!on || (!this.$isReadOnly && !this.$isDisabled)) {
			if (event.target && event.target.syraEnumIndex >= 0) {
				var rdItem = this._choices[event.target.syraEnumIndex];
				rdItem && syra_site.dom.toggleClass(rdItem.checkBox.icon, "s-focus", on);
			}
		}
	},
	setState: function(state) {
		if (state.$isDisabled !== undefined || state.$isReadOnly !== undefined) {
			if (state.$isDisabled !== undefined) {
				this.$isDisabled = state.$isDisabled;
			}
			if (state.$isReadOnly !== undefined) {
				this.$isReadOnly = state.$isReadOnly;
			}
			var isDisabled = this.$isDisabled || this.$isReadOnly;
			for (var ii = 0, jj = this._choices.length; ii < jj; ii++) {
				var choice = this._choices[ii];
				syra_site.dom.toggleClass(choice.checkBox.icon, "s-disabled", isDisabled);
				if (isDisabled) {
					choice.checkBox.input.setAttribute("disabled", true);
				} else {
					choice.checkBox.input.removeAttribute("disabled");
				}
			}
		}
	},
	onNotifyFieldChange: function(newValue) {
		if (this._choices) {
			var selected = this.field.findEnum(newValue);
			selected && _setSelection(this, selected.$index, true);
		}
	},
	setDataValue: function(value) {
		var $currSelectedEnum = this.$selectedEnum;
		this.field.currentValue = value;
		this.$selectedEnum = this.field.findEnum(value);
		if (this.field.$isEditMode) {
			if (this.$selectedEnum) {
				_setSelection(this, this.$selectedEnum.$index, true);
			} else {
				(value == null) && _setSelection(this, null, false);
			}
		} else {
			var $title = this.$selectedEnum ? this.$selectedEnum.$title : "";
			if (value && !this.field.$isDetailLinkDisabled && this.field.$menus && this.field.$menus.$details) {
				this.field.appendDetailLink(value, this.field.$menus.$details);
			} else {
				this.field._dataValue.textContent = $title;
			}
		}
	},
	onInputValidate: function(event) {
		if (event && event.target) {
			_setSelection(this, event.target.syraEnumIndex, true);
		}
	},
	getDataValue: function(event) {
		if (event && event.type == "click") {
			this.onInputValidate(event);
		}
		if (this.field.$isEditMode) {
			return (this.selectedIndex < 0) ? null : this.field.$enum[this.selectedIndex].$value;
		}
		return this.field.currentValue;
	},
	setEnum: function($enum) {
		this.field.$enum = $enum;
		this.field.localizeEnum();
		this.renderLayout();

	},
	render: function() {
		this.setEnum(this.field.getDataType().$enum);
		this.renderLayout();
	},
	renderLayout: function() {
		if (this.field.$isEditMode) {
			this.field.$item.$isAutoSizeDisabled = true;
			this.selectedIndex = -1;
			this._choices = [];
			if (!this._fieldset) {
				this._fieldset = document.createElement("div");
				this._fieldset.className = this.$skin = this.field.$skin + "-choice-rd";
				this.field._dataValue.className += " s-radios";
				this.field._dataValue.appendChild(this._fieldset);
			} else {
				syra_site.dom.empty(this._fieldset);
			}
			var isColLayout = this.field.$item.$choiceLayout != "row";
			var rows, curRow = 0,
				colCount, curCol = 0;
			if (isColLayout) {
				rows = [];
				colCount = this.field.$item.$choiceLayout;
				for (var ii = 0, max = Math.ceil(this.field.$enum.length / colCount); ii < max; ii++) {
					var row = document.createElement("div");
					row.className = "s-field-choice-rd-row";
					rows[ii] = this._fieldset.appendChild(row);
				}
			}
			syra_site.dom.toggleClass(this._fieldset, "s-field-choice-rd-tb", isColLayout);
			var $skinItem = this.$skin + "-item";
			var groupName = this.field.id + "-group";
			for (var ii = 0, jj = this.field.$enum.length; ii < jj; ii++) {
				var $enum = this.field.$enum[ii];
				var id = groupName + ii;
				var rdItem = {
					slot: document.createElement("div"),
					title: document.createElement("label")
				};
				syra_fields.renderCheckBock(rdItem, id, this.$skin + "-radio", true);
				rdItem.slot.syrainout = this.field.id;
				rdItem.slot.syraEnumIndex = ii;
				rdItem.checkBox.input.value = rdItem.checkBox.input.syraEnumIndex = ii;
				rdItem.checkBox.input.setAttribute("name", groupName);
				this.field.setInputFieldId(rdItem.checkBox.input);
				rdItem.title.className = this.$skin + "-title";
				rdItem.title.setAttribute("for", id);
				rdItem.title.textContent = $enum.$title;
				if (this.field.$item.$css) {
					rdItem.title.className += " " + this.field.$item.$css;
				}

				rdItem.slot.className = $skinItem + ((isColLayout) ? " s-field-choice-rd-cell" : "");
				rdItem.slot.appendChild(rdItem.checkBox.slot);

				if (isColLayout) {
					rows[curRow].appendChild(rdItem.slot);
					if (++curCol == colCount) {
						curRow++;
						curCol = 0;
					}
				} else {
					this._fieldset.appendChild(rdItem.slot);
				}
				this._choices.push(rdItem);
				if (this.field.$item.$icon) {
					var $path = syra_site.$item.$iconPath + (this.$icon.$path || "");
					rdItem.checkBox.icon.className = $skinItem + "-icon";
					rdItem.checkBox.icon.style.backgroundImage = "url('" + $path + $enum.$value + ".png')";
				}
				rdItem.slot.appendChild(rdItem.title);
			}

			if (isColLayout && curCol > 0) {
				while (curCol < colCount) {
					var emptyItem = document.createElement("div");
					emptyItem.className = this.$skin + "-item";
					rows[curRow].appendChild(emptyItem);
					curCol++;
				}
			}
			rows = null;
		}
	}
});