"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var ChildObjectFieldContextMenu = require('./childObjectFieldContextMenu').ChildObjectFieldContextMenu;

function ChildObjectFieldRecord(){
}

exports.ChildObjectFieldRecord = helpers.defineClass(ChildObjectFieldRecord, Article, {

    remove: function(){
        this.$$item.remove();
    },
    drawBox: function(){
        this.row = document.createElement("div");
        this.row.className = this.list.$recordCss + "-row";
        this.list._body.appendChild(this.row);
        
        var item = document.createElement("div");
        item.className = "s-cards-cell";
        item.style.width = "100%";
        item.visibility = "hidden";
        this.row.appendChild(item);
        
        item.setAttribute("data-s-record", this.$recordUuid);
        item.className = this.list.$recordCss;
        this.$$item = $(item);
        var toolbar = document.createElement("div");
        toolbar.className = this.list.$skin + "-toolbar";
        item.appendChild(toolbar)
        
        if (!this.list.$item.$isMenuRecordHidden) {
            this._contextMenusSlot = document.createElement("div");
            this._contextMenusSlot.className = this.list.$skin + "-actions-cell";
            toolbar.appendChild(this._contextMenusSlot);
            
        }
        
        var card = item.appendChild(document.createElement("div"));
        card.className = this.list.$skin + "-record";
        card.setAttribute("data-s-record", this.$recordUuid);
        
        document.itemFactory.load($(card), this.list.$item.$cards, this);
        item.style.visibility = "";
    },
    notifyChange: function($bind, value){
        this.list.notifyRecordChange(this, $bind, value);
        if (!this.$isDisabled && !this.$isDeleted) {
            var sendBag = this.getPage().ensureSendBag(this.list);
            var listDataSet = this.list.getDataSet();
            if ($bind == "$actions" && (value.$delete || value.$create)) {
            
            }
            else {
                sendBag.saveRecordChange(this, $bind, value);
                listDataSet[this.$recordIndex][$bind] = value;
                this.list._notifyChangeToParent(sendBag.recordDataset);
            }
        }
    },
    applyActionLinkChange: function(resources, record){
        Article.prototype.applyActionLinkChange.call(this, resources, record);
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            if (!this._contextMenu && !this.$item.$isMenuRecordHidden) {
                (this._contextMenu = new ChildObjectFieldContextMenu()).create(this);
            }
            if (resources.$links === null && this._contextMenu) {
                this._contextMenu.clearMenuItems();
            }
        }
    },
    applyMetaData: function(metaData){
    },
    dispose: function(){
        delete this.list
        if (this._contextMenu) {
            document.controller.disposeObject(this._contextMenu);
            delete this._contextMenu;
        }
        Article.prototype.dispose.call(this);
    }
});
