"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

var Field = require('syracuse-ui/lib/field/field').Field;
var ChildObjectFieldRecord = require('./childObjectFieldRecord').ChildObjectFieldRecord;

var locale = require('syracuse-core/lib/locale');

function ChildObjectField(){
}

exports.ChildObjectField = helpers.defineClass(ChildObjectField, Article, {
    getDataSet: function(){
        return this.getArticleParent().dataset[this.$item.$bind];
    },
    ensureDataSet: function(){
        var dataSet = this.getDataSet();
        if (!dataSet) {
            dataSet = this.getArticleParent().dataset[this.$item.$bind] = [];
        }
        return dataSet;
    },
    drawBox: function(){
        this.arrayLevel = "array";
        this._localize = locale.resources(module)();
        
        this.$layoutOptions = document.site.$item.$layoutOptions.list;
        this.$item.$isTopLabelAlignment = true;
        
        this.$isLayoutContentSizeDisabled = true;
        this.$fieldProperties = this.$prototype.$item.$properties || {};
        
        var articleParent = this.getArticleParent();
        
        
        if ((this.$isEditMode = this.$item.$isEditMode) === undefined) {
            this.$isEditMode = articleParent.$isEditMode;
        }
        
        if (!this.$item.$layout) {
            this.$item.$layout = {};
        }
        if (!this.$item.$layout.$items) {
            this.$item.$layout.$items = Object.keys(this.$fieldProperties).map(function($bind){
                return {
                    $bind: $bind
                };
            });
        }
        this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
            this.inputId = this.id + "-input";
        }
        Field.prototype._initCss.call(this);
        
        var div = document.createElement("div");
        div.className = this._$cssTopField;
        this.$$item = $(this.$$container[0].appendChild(div));
        
        this.appendTitle();
        
        Field.prototype._createValueContainer.call(this);
        
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setState(this.$field);
        
        var list = this.$$fieldValue[0];
        list.className += " s-list";
        
        this._contextMenusSlot = document.createElement("div");
        this._contextMenusSlot.className = "s-list-menus-cell";
        list.appendChild(this._contextMenusSlot);
        
        this._core = document.createElement("div");
        this._core.className = "s-list-core";
        list.appendChild(this._core);
        
        
        
        this.$$fieldValue[0].style.overflow = "auto";
        this.$skin = this.$item.$skin || "s-cards";
        
        this.$item.$cards = (typeof(this.$item.$cards) === "object") ? this.$item.$cards : {
            $layout: {
                $items: this.$item.$layout.$items
            }
        };
        this.applyDesignMetaData(this.$item, false);
        if (this._body) {
            this._body.style.display = "";
        }
        else {
            this._core.appendChild(this._body = document.createElement("div"));
            this.$recordCss = this.$skin + "-cell-record";
            this._body.className = this.$skin + "-cell-body";
        }
        this._appendRecord();
        this.boxParent.getArticle().bind(this, this.$item.$bind);
        
    },
    
    setHelp: function($help){
        Field.prototype.setHelp.call(this, $help);
    },
    setDescription: function($description){
        Field.prototype.setDescription.call(this, $description);
    },
    hideTitle: function($isTitleHidden){
        Field.prototype.hideTitle.call(this, $isTitleHidden);
    },
    getDefaultTitle: function(){
        return Field.prototype.getDefaultTitle.call(this);
    },
    getTitle: function(){
        return Field.prototype.getTitle.call(this);
    },
    setTitle: function($title){
        Field.prototype.setTitle.call(this, $title);
        if (this.$$title) {
            this.$$title[0].style.display = this.titleText.length == 0 ? "none" : "";
        }
    },
    getLocalizedTitle: function($title){
        if ($title && $title.length > 0 && $title[1] == "@") {
            return this.boxParent._renderExpression($title);
        }
        return $title;
    },
    appendTitle: function(){
        if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
            Field.prototype.appendTitle.call(this);
            this.$$title[0].style.display = "none";
        }
    },
    
    releaseMode: function(onDispose){
        if (this._contextMenu) {
            document.controller.disposeObject(this._contextMenu);
        }
        $(this._core).empty();
        delete this._contextMenu;
        delete this.$$title;
        delete this._buttons;
        delete this._mandatoryFlag;
        delete this.$$description;
        delete this._helpFlag;
    },
    _restoreButtonValue: function(){
    },
    toggleDiagnose: function(css, show){
    },
    drawDiagnose: function($diagnose, severityGroup){
        Field.prototype.drawDiagnose.call(this, $diagnose, severityGroup);
    },
    _ensureButtonsVisible: function(){
    },
    setMenus: function($menus){
        if ($menus) {
            //important copy allow multi binding
            this.applyChange({
                $links: $menus.$links,
                $actions: $menus.$actions
            });
        }
    },
    applyActionLinkChange: function(resources, record){
        Article.prototype.applyActionLinkChange.call(this, resources, record);
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            if (!this._contextMenu) {
                (this._contextMenu = new ListContextMenu()).create(this);
            }
            if (resources.$links === null) {
                this._contextMenu.clearMenuItems();
            }
        }
    },
    
    applyDesignMetaData: function(metaData, onAuthoring){
        if (onAuthoring) {
        
        }
        if (metaData.$width) {
            this.$item.$width = metaData.$width;
            var width = this.$item.$width || "100%";
            if (width == "auto") {
            
            }
            else {
                this.$$fieldValue[0].style.width = width;
                this._core.style.width = "100%";
            }
            delete metaData.$width;
        }
        Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
        return this.applyFieldsMetaData(metaData, onAuthoring);
    },
    
    applyFieldsMetaData: function(metaData, onAuthoring){
        var self = this;
        var redraw = false;
        
        if (metaData.$item) {
            if (metaData.$item.$properties) {
                Object.keys(metaData.$item.$properties).forEach(function($bind){
                    var $metaField = metaData.$item.$properties[$bind];
                    var $updated;
                    if (onAuthoring) {
                        self.$item.$layout.$items.some(function($item){
                            if ($item.$bind == $bind) {
                                $updated = $item;
                                return true;
                            }
                            return false;
                        });
                    }
                    else {
                        $updated = self.$fieldProperties[$bind];
                    }
                    if ($updated) {
                        Object.keys($metaField).forEach(function($prop){
                            if ($updated[$prop] != $metaField[$prop]) {
                                $updated[$prop] = $metaField[$prop];
                                if ($prop == "$isHidden") {
                                    redraw = true;
                                }
                            }
                        });
                    }
                });
            }
            ["$links", "$actions"].forEach(function($menuType){
                var $newMenus = metaData.$item[$menuType];
                if ($newMenus) {
                    var $menus = self.$prototype.$item[$menuType] = self.$prototype.$item[$menuType] || {};
                    Object.keys($newMenus).forEach(function($bind){
                        var $menu = $menus[$bind] = {};
                        var $newMenu = $newMenus[$bind];
                        Object.keys($newMenu).forEach(function($prop){
                            $menu[$prop] = $newMenu[$prop];
                        });
                    });
                }
            });
        }
        
        return redraw;
    },
    
    emptyDiagnoseSlot: function(){
        if (this.domDiagnose) {
            document.site.emptyDom(this.domDiagnose);
            this.domDiagnose.style.visibility = "hidden";
        }
    },
    ensureDiagnoseSlot: function(){
        if (!this.domDiagnose && this.$$dataValue) {
            this.domDiagnose = document.createElement("div");
            this.domDiagnose.className = "s-field-diagnose";
            this.$$dataValue[0].appendChild(this.domDiagnose);
        }
        else {
            document.site.emptyDom(this.domDiagnose);
        }
    },
    onMenuClick: function(menuItem){
        var doClick = false;
        
        return true;
    },
    
    setState: function(state){
        Field.prototype.setState.call(this, state);
        if (this._record) {
            if (state.$isReadOnly !== undefined || state.$isDisabled != undefined) {
                this._record.applyMetaData({
                    $isReadOnly: state.$isReadOnly,
                    $isDisabled: state.$isDisabled
                });
            }
        }
    },
    applyMetaData: function(metaData){
        Field.prototype.applyMetaData.call(this, metaData);
        if (metaData.$item) {
            this._record.applyChange(metaData.$item);
        }
        this.applyFieldsMetaData(metaData);
    },
    _appendRecord: function(){
        this._record = new ChildObjectFieldRecord();
        this._record.$layoutOptions = this.$layoutOptions.$cards;
        this._record.$isEditMode = this.$isEditMode;
        this._record.list = this;
        this._record.$prototype = this.$prototype.$item;
        document.itemFactory.initializeItem(this._record, {
            $category: "section",
            $layout: {
                $items: this.$item.$layout.$items
            }
        }, this);
        this._record.loadBox();
    },
    setDataBind: function(dataRecord, parentDataRecord, metaData){
        if (this.getPage().externalAdapter.setDataBind(this, dataRecord, parentDataRecord, metaData)) {
            if (metaData) {
                this.applyMetaData(metaData);
            }
            if (dataRecord !== undefined) {
                dataRecord.$uuid = 1;
                this._record.applyChange(dataRecord);
            }
        }
    },
    dispose: function(){
        delete this._menus;
        if (this._contextMenu) {
            document.controller.disposeObject(this._contextMenu);
            delete this._contextMenu;
        }
        if (this.$$item) {
            this.$$item.undelegate();
        }
        delete this._record;
        Article.prototype.dispose.call(this);
    }
});
