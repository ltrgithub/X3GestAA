"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function _setDataValue(field, value) {
	field.currentValue = value;
	if (field.$isEditMode) {
		field.setInputValue(field.currentValue || "");
	} else {
		if (value) {
			field._dataValue.setAttribute("href", field._$hrefPrefix + value);
			field._dataValue.textContent = value;
			if (!field._iconValue) {
				field._iconValue = document.createElement("div");
				field._iconValue.innerHTML = syra_menus.fontIcons[field._$iconValue];
				field._iconValue.className = syra_menus.cssFontIconBtn + " s-icon-" + field._$iconValue;
			}!field._iconValue.parentNode && field._dataValue.insertBefore(field._iconValue, field._dataValue.firstChild);
		} else {
			field._iconValue && field._dataValue.removeChild(field._iconValue);
		}
		syra_menus.ensureMenuPicker(field);
	}
	field.fieldHelper.setValueLength(field, value);
}

function _createValueContainer(field) {
	Field.prototype._createValueContainer.call(field);
	if (!field.$isEditMode) {
		field._dataValue.className = field._$cssField + "-value-read  s-" + field._$iconValue;
	}
}


function PhoneField() {}

exports.PhoneField = helpers.defineClass(PhoneField, Field, {
	initialize: function() {
		this._$hrefPrefix = "callto:";
		this._$iconValue = "phone";
		this.$inputType = "tel";
		this.$isDetailLinkDisabled = true;
	},
	_createValueContainer: function() {
		if (!this.$isEditMode) {
			this._dataValue = document.createElement("a");
		}
		Field.prototype._createValueContainer.call(this);
		if (!this.$isEditMode) {
			this._dataValue.className = this._$cssField + "-value-read  s-" + this._$iconValue;
		}
	},
	setDataValue: function(value) {
		_setDataValue(this, value);
	},
	dispose: function() {
		this._iconValue = null;
		Field.prototype.dispose.call(this);
	}
});

function EmailField() {}

exports.EmailField = helpers.defineClass(EmailField, Field, {
	initialize: function() {
		this._$hrefPrefix = "mailto:";
		this._$iconValue = "email";
		this.$inputType = "email";
		this.$isDetailLinkDisabled = true;
	},
	validateType: function(errors, value) {
		if (value) {
			var atpos = value.indexOf("@");
			var dotpos = value.lastIndexOf(".");
			if (atpos < 1 || dotpos < atpos + 2 || dotpos + 2 >= value.length) {
				errors.push(syra_local.fieldEmailInvalid);
			}
		}
	},
	_createValueContainer: function() {
		if (!this.$isEditMode) {
			this._dataValue = document.createElement("a");
			this._dataValue.setAttribute("rel", "nofollow");
		}
		Field.prototype._createValueContainer.call(this);
		if (!this.$isEditMode) {
			this._dataValue.className = this._$cssField + "-value-read  s-" + this._$iconValue;

		}
	},
	setDataValue: function(value) {
		_setDataValue(this, value);
	},
	dispose: function() {
		this._iconValue = null;
		Field.prototype.dispose.call(this);
	}
});

function UrlField() {}

exports.UrlField = helpers.defineClass(UrlField, Field, {
	initialize: function() {
		this.$inputType = "url";
		this.$isDetailLinkDisabled = true;
	},
	_createValueContainer: function() {
		if (!this.$isEditMode) {
			this._dataValue = document.createElement("a");
		}
		Field.prototype._createValueContainer.call(this);
		if (!this.$isEditMode) {
			this._dataValue.className = this._$cssField + "-value-read s-mn-link";
		}
	},
	setDataValue: function(value) {
		this.currentValue = value;
		if (this.$isEditMode) {
			this.setInputValue(this.currentValue || "");
		} else {
			if (value) {
				this._dataValue.setAttribute("href", value);
				this._dataValue.textContent = value;
				this._core.appendChild(this._dataValue);
			} else {
				this._dataValue.parentNode && this._dataValue.parentNode.removeChild(this._dataValue);
			}
			syra_menus.ensureMenuPicker(this);
		}
		this.fieldHelper.setValueLength(this, value);
	}
});