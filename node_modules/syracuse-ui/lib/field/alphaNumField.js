"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function PhoneField() {}

exports.PhoneField = helpers.defineClass(PhoneField, Field, {
	initialize: function() {
		this.$inputType = "tel";
		this.$isDetailLinkDisabled = true;
	},
	_createFieldValueRead: function() {
		this.fieldValue = document.createElement("a");
		this.fieldValue.className = this._$cssField + "-value-read s-phone";
	},
	setDataValue: function(value) {
		this.currentValue = value;
		if (this.$isEditMode) {
			this.setInputValue(this.currentValue || "");
		} else {
			if (value) {
				this.fieldValue.setAttribute("href", "callto:" + value);
				this.fieldValue.textContent = value;
				!this.fieldValue.parentNode && this._dataValue.appendChild(this.fieldValue);
			} else {
				this.fieldValue.parentNode && this.fieldValue.parentNode.removeChild(this.fieldValue);
			}
			syra_menus.ensureMenuPicker(this);
		}
		this.fieldHelper.setValueLength(this, value);
	}
});

function UrlField() {}

exports.UrlField = helpers.defineClass(UrlField, Field, {
	initialize: function() {
		this.$inputType = "url";
		this.$isDetailLinkDisabled = true;
	},
	_createFieldValueRead: function() {
		this.fieldValue = document.createElement("a");
		this.fieldValue.className = this._$cssField + "-value-read s-mn-link";
	},
	setDataValue: function(value) {
		this.currentValue = value;
		if (this.$isEditMode) {
			this.setInputValue(this.currentValue || "");
		} else {
			if (value) {
				this.fieldValue.setAttribute("href", value);
				this.fieldValue.textContent = value;
				!this.fieldValue.parentNode && this._dataValue.appendChild(this.fieldValue);
			} else {
				this.fieldValue.parentNode && this.fieldValue.parentNode.removeChild(this.fieldValue);
			}
			syra_menus.ensureMenuPicker(this);
		}
		this.fieldHelper.setValueLength(this, value);
	}
});

function EmailField() {}

exports.EmailField = helpers.defineClass(EmailField, Field, {
	initialize: function() {
		this.$inputType = "email";
		this.$isDetailLinkDisabled = true;
	},
	validateType: function(errors, value) {
		if (value) {
			var atpos = value.indexOf("@");
			var dotpos = value.lastIndexOf(".");
			if (atpos < 1 || dotpos < atpos + 2 || dotpos + 2 >= value.length) {
				errors.push(syra_local.fieldEmailInvalid);
			}
		}
	},
	_createFieldValueRead: function() {
		this.fieldValue = document.createElement("a");
		this.fieldValue.className = this._$cssField + "-value-read s-email";
		this.fieldValue.setAttribute("rel", "nofollow");
	},
	setDataValue: function(value) {
		this.currentValue = value;
		if (this.$isEditMode) {
			this.setInputValue(this.currentValue || "");
		} else {
			if (value) {
				this.fieldValue.setAttribute("href", "mailto:" + value);
				this.fieldValue.textContent = value;
				!this.fieldValue.parentNode && this._dataValue.appendChild(this.fieldValue);
			} else {
				this.fieldValue.parentNode && this.fieldValue.parentNode.removeChild(this.fieldValue);
			}
			syra_menus.ensureMenuPicker(this);
		}
		this.fieldHelper.setValueLength(this, value);
	}
});