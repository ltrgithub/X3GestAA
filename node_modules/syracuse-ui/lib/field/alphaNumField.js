"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function _setDataValue(field, value) {
	field.currentValue = value;
	if (field.$isEditMode) {
		field.setInputValue(field.currentValue || "");
	} else {
		field.displayText = value;
		if (value) {
			field._dataValue.syraIsDefaultLink = true;
			field._dataValue.href = field._$hrefPrefix + value;
			field._dataValue.textContent = value;
			if (!field._iconFlag) {
				field._iconFlag = syra_menus.button.add({
					isIndicator: true,
					parent: field,
					iconOnly: true,
					css: " " + field._$iconCss,
					fontIcon: field._$iconValue
				});
			}!field._iconFlag.link.parentNode && field._dataValue.insertBefore(field._iconFlag.link, field._dataValue.firstChild);
		} else {
			syra_menus.button.remove(field._iconFlag);
			field._dataValue.href = "";
			field._dataValue.textContent = value;
		}
		syra_menus.pickers.menus.show(field);
	}
}

function _createValueContainer(field) {
	Field.prototype._createValueContainer.call(field);
	if (!field.$isEditMode) {
		field._dataValue.className = field._$cssField + "-value-read  " + field._$typeCss;
	}
}


function PhoneField() {}

exports.PhoneField = helpers.defineClass(PhoneField, Field, {
	initialize: function() {
		this._$hrefPrefix = "tel:";
		this._$typeCss = "s-field-phone";
		this._$iconCss = "s-icon-phone";
		this._$iconValue = "field_phone";
		this.$inputType = "tel";
		this.$isDetailLinkDisabled = true;
	},
	_createValueContainer: function() {
		if (!this.$isEditMode) {
			this._dataValue = document.createElement("a");
		}
		Field.prototype._createValueContainer.call(this);
		if (!this.$isEditMode) {
			var css = (this._$cssField + "-value-read ");
			this._dataValue.className = css + this._$typeCss;
		}
	},
	setDataValue: function(value) {
		_setDataValue(this, value);
	}
});

function EmailField() {}

exports.EmailField = helpers.defineClass(EmailField, Field, {
	initialize: function() {
		this._$hrefPrefix = "mailto:";
		this._$typeCss = "s-field-email";
		this._$iconCss = "s-icon-email";
		this._$iconValue = "field_email";
		this.$inputType = "email";
		this.$isDetailLinkDisabled = true;
	},
	validateType: function(errors, value) {
		if (value) {
			var atpos = value.indexOf("@");
			var dotpos = value.lastIndexOf(".");
			if (atpos < 1 || dotpos < atpos + 2 || dotpos + 2 >= value.length) {
				errors.push(syra_local.fieldEmailInvalid);
			}
		}
	},
	_createValueContainer: function() {
		if (!this.$isEditMode) {
			this._dataValue = document.createElement("a");
			this._dataValue.setAttribute("rel", "nofollow");
		}
		Field.prototype._createValueContainer.call(this);
		if (!this.$isEditMode) {
			var css = (this._$cssField + "-value-read ");
			this._dataValue.className = css + this._$typeCss;

		}
	},
	setDataValue: function(value) {
		_setDataValue(this, value);
	}
});

function UrlField() {}

exports.UrlField = helpers.defineClass(UrlField, Field, {
	initialize: function() {
		this.$inputType = "url";
		this.$isDetailLinkDisabled = true;
	},
	_createValueContainer: function() {
		if (!this.$isEditMode) {
			this._dataValue = document.createElement("a");
		}
		Field.prototype._createValueContainer.call(this);
		if (!this.$isEditMode) {
			this._dataValue.className = this._$cssField + "-value-read s-mn-link";
		}
	},
	setDataValue: function(value) {
		this.currentValue = value;
		if (this.$isEditMode) {
			this.setInputValue(this.currentValue || "");
		} else {
			if (value) {
				this._dataValue.setAttribute("href", value);
				this._dataValue.textContent = this.displayText = value;
				this._dataValue.syraOnClick = "onUrlClick";
				if (this._core != this._dataValue) {
					this._core.appendChild(this._dataValue);
				}
			} else {
				this._dataValue.parentNode && this._dataValue.parentNode.removeChild(this._dataValue);
			}
			syra_menus.pickers.menus.show(this);
		}

	},
	onUrlClick: function() {
		this.currentValue &&
			syra_url.history.load({
				$url: this.currentValue,
				target: "blank",
				isDefaultUrl: false
			});
	}

});