"use strict";
var helpers = require('syracuse-core/lib/helpers');
var VignetteField = require("syracuse-ui/lib/field/vignette/vignetteField").VignetteField;
//var NavigationVignetteDesigner = require("syracuse-ui/lib/authoring/navigationVignetteDesigner").NavigationVignetteDesigner;

function NavigationVignetteField() {}

exports.NavigationVignetteField = helpers.defineClass(NavigationVignetteField, VignetteField, {
	loadBox: function() {
		this.$isAutosize = true;
		VignetteField.prototype.loadBox.call(this);
	},
	setDataBind: function(value, record, metaData, $bind) {

	},
	doPicker: function(pickerId) {
		VignetteField.prototype.doPicker.call(this, pickerId);
		switch (pickerId) {
			case "design":
				this.designItem(!this.designer);
				break;
		}
	},
	designItem: function(open) {
		document.site.toggleClass(this.pickers.items.design, "s-close", open);
		document.site.designItem(open, this, NavigationVignetteDesigner);
	},
	drawBox: function() {
		this.domItem = document.createElement("section");
		this.domItem.className = this.$skin;
		this.$$item = $(this.layoutSlot.appendChild(this.domItem));
		this.setState(this.$item);
		this.$$body = $(this.body = document.createElement("div"));
		this.body.className = this.$skin + "-body";
		this.appendHeader();
		this.ensureLayoutMode();
		this.domItem.appendChild(this.body);
		this.$item.$isRefreshable = true;
		this.$item.$isMaximizable = true;

		this.applyDesignMetaData(this.$item, false);
		this.togglePicker("design", true);
		this.pickers.items.design.parentNode.insertBefore(this.pickers.items.design, this.pickers.items.design.parentNode.firstChild);
		this.openBox(this.$item.$opened !== false);
	},
	dispose: function() {
		VignetteField.prototype.dispose.call(this);
	}
});