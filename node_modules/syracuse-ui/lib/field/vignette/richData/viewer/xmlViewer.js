"use strict";
var helpers = require('syracuse-core/lib/helpers');
var JSXml = require("jsxml/lib/jsxml");

function XMLViewer() {}

exports.XMLViewer = helpers.defineClass(XMLViewer, null, {
	render: function(parent, value) {
		try {
			this.traverse(parent, JSXml.parse(value));
		} catch (error) {
			return syra_local.field_richdata_xml_error;
		}
	},
	traverse: function(parent, xml, overrideName) {
		var collapsableSlot, collapsibleIndex = 0;
		for (var key in xml) {
			if (key == '$' || key == '$cdata' || key == '$value')
				continue; //dont process $ - this is the element's attributes already handled
			var element = {
				parent: parent,
				key: overrideName ? overrideName : key.toString(),
				text: null,
				properties: '',
				isCollapsable: false,
			};
			var value = xml[key];
			var type = typeof(value);
			var overrideElement = false;

			//Elements attributes
			if (value.$) {
				for (var prop in value.$) {
					element.properties += ' ' + prop + '="' + value.$[prop] + '"';
				}
			}
			if (value.$value || value.$cdata || type == 'string') {
				element.text = value.$value ? value.$value : value.$cdata ? "&lt;![CDATA[" + value.$cdata + "]]&gt;" : value;

			} else
			if (type == 'object') {
				//Element is iterable
				if (value.constructor == Array) {
					element.isArrayObj = true;
				} else {
					var fieldCount = Object.keys(value).length;
					if (!(fieldCount == 1 && value.$) || (fieldCount > 1)) {
						element.isCollapsable = true;
						collapsableSlot = syra_dom.addDiv("s-xml-collapsible", parent);
						collapsableSlot.id = "collapsible" + collapsibleIndex;
						collapsibleIndex++;

					}
				}
			}
			var parentElement = this.addXmlTag(parent, collapsableSlot, element);
			(type == 'object') && this.traverse(parentElement, value, element.isArrayObj ? key.toString() : null);
		}
	},
	addExpandDiv: function(slot, element) {
		var self = this;
		var expandedDiv = syra_dom.addDiv("s-xml-expanded", slot);
		//Add line
		var line = syra_dom.addDiv("s-xml-line", expandedDiv);
		//Collapse button
		var btn = syra_dom.span("s-xml-btn", line);
		btn.innerHTML = "&#45;";
		btn.onclick = function() {
			var parentNode = this.parentNode.parentNode.parentNode;
			parentNode.childNodes[0].className = "s-xml-expanded s-xml-hidden";
			parentNode.childNodes[1].className = "s-xml-collapsed";
			self.scrollBar && self.scrollBar.resize();
		};
		//Start Tag
		this.addBeginTag(element, line);
		var content = syra_dom.addDiv("s-xml-collapsible-content", expandedDiv);
		this.addEndTag(element, syra_dom.addDiv("s-xml-line", expandedDiv));
		return content;
	},
	addCollapsedDiv: function(slot, element) {
		var self = this;
		//Add the collapsed DIV
		var collapsedDiv = syra_dom.addDiv("s-xml-collapsed s-xml-hidden", slot);
		var line = syra_dom.addDiv("s-xml-line");
		//Expand button
		var btn = syra_dom.span("s-xml-btn", line);
		btn.innerHTML = "&#43;";
		btn.onclick = function() {
			var parentNode = this.parentNode.parentNode.parentNode;
			var expanded_node = parentNode.childNodes[0];
			expanded_node.className = "s-xml-expanded";
			var collapsed_node = parentNode.childNodes[1];
			collapsed_node.className = "s-xml-collapsed s-xml-hidden";
			self.scrollBar && self.scrollBar.resize();
		};
		this.addBeginTag(element, line);
		syra_dom.span("s-xml-tag-text", line).textContent = "...";
		this.addEndTag(element, line);
		collapsedDiv.appendChild(line);
	},
	addXmlTag: function(parent, collapsableSlot, element) {
		if (element.isArrayObj)
			return parent;
		if (element.isCollapsable) {
			var expandedContentDiv = this.addExpandDiv(collapsableSlot, element);
			this.addCollapsedDiv(collapsableSlot, element);
			return expandedContentDiv;
		} else {
			var line = syra_dom.addDiv("s-xml-line", parent);
			this.addBeginTag(element, line);
			if (element.text != null) {
				var textTagSpan = syra_dom.span("s-xml-tag-text", line).textContent = element.text;
				this.addEndTag(element, line);
			}
			return parent;
		}
	},
	addBeginTag: function(element, parentNode) {
		syra_dom.span("s-xml-tag", parentNode).innerHTML = syra_dom.escape("&lt;" + element.key + element.properties + (element.text == null && !element.isCollapsable ? '/' : '') + "&gt;");
	},
	addEndTag: function(element, parentNode) {
		syra_dom.span("s-xml-tag", parentNode).innerHTML = syra_dom.escape("&lt;/" + element.key + "&gt;");
	},
	dispose: function() {

	}
});