"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SectionBlock = require("syracuse-ui/lib/article/sectionBlock").SectionBlock;

function VignetteField() {}

exports.VignetteField = helpers.defineClass(VignetteField, SectionBlock, {
	ensureSkin: function() {
		SectionBlock.prototype.ensureSkin.call(this);
		this.$skinSlot = this.$skin;
		this.$designLevel = "field";
	},
	loadBox: function() {
		SectionBlock.prototype.loadBox.call(this);
		if (this.page.isDashBoard) {
			this.page.registerVignette(this);
		} else {
			this.articleParent.bind(this, this.$item.$bind);
		}
		if (this.$isAutosize) {
			this.page.attachToPageResizeListener(true, this);
		}
	},
	dispose: function() {
		if (this.$isAutosize && this.page) {
			this.page.attachToPageResizeListener(false, this);
		}
		this.vignette = this.$field = null;
		SectionBlock.prototype.dispose.call(this);
	},
	doPicker: function(pickerId) {
		switch (pickerId) {
			case "refresh":
				this.renderLayoutContent();
				break;
			case "menus":
				//debugger;
				break;
			default:
				SectionBlock.prototype.doPicker.call(this, pickerId);
				break;
		}
	},
	drawBox: function() {
		this._item = document.createElement("section");
		this._item.className = this.$skin;
		this.$$item = $(this.layoutSlot.appendChild(this._item));
		this.setState(this.$item);
		this.$$body = $(this.body = document.createElement("div"));
		this.body.className = this.$skin + "-body";
		this.appendHeader();
		this.ensureLayoutMode();
		this._item.appendChild(this.body);
		this.$item.$isRefreshable = true;
		this.$item.$isMaximizable = true;

		this.applyDesignMetaData(this.$item, false);
		this.openBox(this.$item.$opened !== false);
	},
	ensureLayoutMode: function() {
		this.ensureSkin();
		if (this.layoutParent) {
			this.layoutParent.ensureLayoutSlot(this);
		}
		if (this.page.designer) {
			this.page.designer.toggleItemAuthoring(this, true);
		}
	},
	renderLayoutContent: function() {
		if (this.vignette) {
			this.$$body.empty();
			document.controller.disposeObject(this.vignette);
		}
	}
});