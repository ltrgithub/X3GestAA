"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SectionBlock = require("syracuse-ui/lib/article/sectionBlock").SectionBlock;

function VignetteField(){
}

exports.VignetteField = helpers.defineClass(VignetteField, SectionBlock, {
    ensureSkin: function(){
        SectionBlock.prototype.ensureSkin.call(this);
        this.$skinSlot = this.$skin;
        this.$designLevel = "field";
    },
    ensureVisibility: function(){
        //specific behavior for vignetteField that are section and field
        return true;
    },
    setDataBind: function(value, record, metaData, $bind){
    },
    loadBox: function(){
        SectionBlock.prototype.loadBox.call(this);
        if (this.page.isDashBoard) {
            this.page.registerVignette(this);
        }
        else {
            this.articleParent.bind(this, this.$item.$bind);
        }
        if (this.$isAutosize) {
            this.page.attachToPageResizeListener(true, this);
        }
    },
    dispose: function(){
        if (this.$isAutosize && this.page) {
            this.page.attachToPageResizeListener(false, this);
        }
        this.vignette = this.$field = null;
        SectionBlock.prototype.dispose.call(this);
    },
    doPicker: function(pickerId){
        switch (pickerId) {
            case "refresh":
                this.renderLayoutContent();
                break;
            case "menus":
                //debugger;
                break;
            default:
                SectionBlock.prototype.doPicker.call(this, pickerId);
                break;
        }
    },
    drawBox: function(){
        this.domItem = document.createElement("section");
        this.domItem.className = this.$skin;
        this.$$item = $(this.layoutSlot.appendChild(this.domItem));
        this.setState(this.$item);
        this.$$body = $(this.body = document.createElement("div"));
        this.body.className = this.$skin + "-body";
        this.appendHeader();
        this.ensureLayoutMode();
        this.domItem.appendChild(this.body);
        this.$item.$isRefreshable = true;
        this.$item.$isMaximizable = true;
        
        this.applyDesignMetaData(this.$item, false);
        this.togglePicker("design", true);
        this.pickers.items.design.parentNode.insertBefore(this.pickers.items.design, this.pickers.items.design.parentNode.firstChild);
        this.openBox(this.$item.$opened !== false);
    },
    ensureLayoutMode: function(){
        this.ensureSkin();
        if (this.layoutParent) {
            this.layoutParent.ensureLayoutSlot(this);
        }
    },
    renderLayoutContent: function(){
        if (this.vignette) {
            this.$$body.empty();
            document.controller.disposeObject(this.vignette);
        }
    }
});
