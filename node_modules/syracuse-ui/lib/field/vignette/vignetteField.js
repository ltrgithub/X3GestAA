"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require("syracuse-ui/lib/article/box").Box;

var _formatBuilder = {
    "$html": require('./htmlVignetteBuilder'),
    "$page": {
        load: function(field){
            document.controller.loadRepresentation(null, field.$field.$location.$url, function($itemPage){
                $itemPage.layoutSlot = field.$$body[0];
                $itemPage.$category = "vignette";
                field.vignette = document.site.loadNewPage($itemPage);
                field.vignette.vignetteField = field;
            });
        },
        dispose: function(){
        }
    },
    "$item": {
        load: function(field){
            field.vignette = field.page.loadNewItem(field.$$body[0], field.$field.$item, field);
        },
        dispose: function(){
        }
    }    
};

function VignetteField(){
}

exports.VignetteField = helpers.defineClass(VignetteField, Box, {
    applyDesignMetaData: function(metaData, onAuthoring){
        Box.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
        if (this.formatBuilder.applyDesignMetaData) {
            this.formatBuilder.applyDesignMetaData(this, metaData, onAuthoring);
        }
    },
    loadBox: function(){
        this.$authoringLevel = "field";
        this.$skin = this.$item.$skin || "s-vignette-field";
        Box.prototype.loadBox.call(this);
    },
    doPicker: function(pickerId){
        var self = this;
        if (pickerId == "refresh") {
            if (!document.site.authorPage) {
                self._renderLayoutContent();
            }
        }
        else {
            Box.prototype.doPicker.call(self, pickerId, function(){
                if (self.formatBuilder[pickerId]) {
                    self.formatBuilder[pickerId](self);
                }
            });
        }
        
    }, 
    onWindowResize: function(){
        if (this.formatBuilder.onWindowResize) {
            this.formatBuilder.onWindowResize(this);
        }
    },
    drawBox: function(){
        this._item = document.createElement("section");
        this._item.className = this.$skin;
        this.$$item = $(this.layoutSlot.appendChild(this._item));
        this.setState(this.$item);
        this.$$body = $(this._body = document.createElement("div"));
        this._body.className = this.$skin + "-body";
        this.appendHeader();
        this.ensureLayoutMode();
        this._item.appendChild(this._body);
        this.$item.$isRefreshable = true;
        this.$item.$isMaximizable = true;
        if (!this.$field.$format && this.$field.$location) {
            this.$field.$format = this.$field.$location.$type == "html" ? "$html" : "$page";
        }
        this.formatBuilder = _formatBuilder[this.$field.$format];
        this.applyDesignMetaData(this.$item, false);
        this.openBox(this.$item.$opened !== false);
    },
    ensureLayoutMode: function(){
        this.layoutSlot.style.verticalAlign = "top";
        if (this.layoutParent) {
            this.layoutParent.ensureLayoutSlot(this);
        }
        if (this.page.authoringPage) {
            this.page.authoringPage.toggleItemAuthoring(this, true);
        }
    },
    _renderLayoutContent: function(){
        if (this.vignette) {
            this.$$body.empty();
            document.controller.disposeObject(this.vignette);
        }
        this.formatBuilder.load(this);
    },
    dispose: function(){
        this.formatBuilder.dispose(this);
        this.formatBuilder = null;
        Box.prototype.dispose.call(this);
    }
});
