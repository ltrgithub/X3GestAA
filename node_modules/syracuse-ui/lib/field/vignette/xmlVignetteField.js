"use strict";
var helpers = require('syracuse-core').helpers;
var JSXml = require('js-xml');
var VignetteField = require("syracuse-ui/lib/field/vignette/vignetteField").VignetteField;
var Scrollbar = require('syracuse-ui/lib/scroll/scrollbar').Scrollbar;


function XMLField() {}

exports.XMLVignetteField = helpers.defineClass(XMLField, VignetteField, {
	setValue: function(value, meta) {
		var jsonX;
		syra_fields.applyMetaData(this, meta);
		if (value != null) {
			try {
				if ((jsonX = value ? JSXml.parse(value) : "")) {
					this._setXml(jsonX);
				}
			} catch (e) {
				// this._setXml("error...  value doesn't match XML schema or XML is malformed")
			}
		}
	},
	resizeItem: function(doResize) {
		if (this.$item.$height) {
			this.body.style.height = this.$item.$height + "px";
		} else {
			this.body.style.height = this.page.size.height * 0.3 + "px";
		}
		this.scrollBar && this.scrollBar.resize();

	},


	_setXml: function(xml) {
		var iframeDoc;
		if (syra_dom.isVisible(this.domItem)) {
			if (xml) {
				if (!this.xmlContainer) {
					this.xmlContainer = document.createElement("div");
					this.xmlContainer.className = "s-xml-container";
					this.xmlContainer.target = "_top";
					this.body.appendChild(this.xmlContainer);
				}

				this.scrollBar = new Scrollbar({
					container: this.body,
					scrollview: this.xmlContainer
				});
				this.body.style.height = this.page.scrollview.clientHeight * 0.3 + "px";
				this._traverse(this.xmlContainer, xml);
			} else {
				syra_button.remove(this.externalBtn);
				delete this.externalBtn;
				syra_dom.empty(this.body);
				this.xmlContainer = null;
			}
		}
	},

	_traverse: function(parent, xml, overrideName) {
		var collapsableSlot, collapsibleIndex = 0;
		for (var key in xml) {

			if (key == '$' || key == '$cdata' || key == '$value') continue; //dont process $ - this is the element's attributes already handled

			var element = {
				parent: parent,
				key: overrideName ? overrideName : key.toString(),
				text: null,
				properties: '',
				isCollapsable: false,
			};

			var value = xml[key];
			var type = typeof(value);
			var overrideElement = false;


			//Elements attributes
			if (value.$) {
				for (var prop in value.$) {
					element.properties += ' ' + prop + '="' + value.$[prop] + '"';
				}
			}

			if (value.$value || value.$cdata || type == 'string') {
				element.text = value.$value ? value.$value : value.$cdata ? "&lt;![CDATA[" + value.$cdata + "]]&gt;" : value;

			} else if (type == 'object') {
				//Element is iterable
				if (value.constructor == Array) {
					element.isArrayObj = true;
				} else {
					var fieldCount = Object.keys(value).length;
					if (!(fieldCount == 1 && value.$) || (fieldCount > 1)) {
						element.isCollapsable = true;
						collapsableSlot = document.createElement("div");
						collapsableSlot.className = "s-xml-collapsible";
						collapsableSlot.id = "collapsible" + collapsibleIndex;
						parent.appendChild(collapsableSlot);
						collapsibleIndex++;

					}


				}
			}
			var parentElement = this._addXmlTag(parent, collapsableSlot, element);

			(type == 'object') && this._traverse(parentElement, value, element.isArrayObj ? key.toString() : null);
		}
	},
	_addTag: function(element, isEndTag) {

		var tag = document.createElement("span");
		tag.className = "html-tag";
		tag.innerHTML = isEndTag ? "&lt;/" + element.key + "&gt;" : "&lt;" + element.key + element.properties + (element.text == null && !element.isCollapsable ? '/' : '') + "&gt;";
		return tag;
	},
	_addXmlTag: function(parent, collapsableSlot, element) {
		if (element.isArrayObj) return parent;
		if (element.isCollapsable) {
			var expandedContentDiv = this._addExpandDiv(collapsableSlot, element);
			this._addCollapsedDiv(collapsableSlot, element);
			return expandedContentDiv;
		} else {

			var elementDiv = document.createElement("div");
			elementDiv.className = "s-xml-line";

			var startTagSpan = this._addTag(element, false);
			elementDiv.appendChild(startTagSpan);

			if (element.text != null) {
				var textTagSpan = document.createElement("span");
				textTagSpan.className = "html-tag-text";
				textTagSpan.innerHTML = element.text;
				elementDiv.appendChild(textTagSpan);

				var endTagSpan = this._addTag(element, true);
				elementDiv.appendChild(endTagSpan);

			}

			parent.appendChild(elementDiv);

			return parent;
		}
	},
	_addExpandDiv: function(slot, element) {
		var self = this;
		var lineDiv, expandedContentDiv;
		var expandedDiv = document.createElement("div");
		expandedDiv.className = "expanded";
		slot.appendChild(expandedDiv);

		//Add line
		lineDiv = document.createElement("div");
		lineDiv.className = "s-xml-line";

		//Collapse button
		var btnCollapseSpan = document.createElement("span");
		btnCollapseSpan.className = "s-xml-btn";
		btnCollapseSpan.innerHTML = "&#45;"
		btnCollapseSpan.onclick = function() {
			var parentNode = this.parentNode.parentNode.parentNode;
			var expanded_node = parentNode.childNodes[0];
			expanded_node.className = "expanded hidden";
			var collapsed_node = parentNode.childNodes[1];
			collapsed_node.className = "collapsed";
			self.scrollBar && self.scrollBar.resize();
		};
		lineDiv.appendChild(btnCollapseSpan);

		//Start Tage
		var startTagSpan = this._addTag(element, false);
		lineDiv.appendChild(startTagSpan);
		expandedDiv.appendChild(lineDiv);

		//Add collapse-content div
		expandedContentDiv = document.createElement("div");
		expandedContentDiv.className = "collapsible-content";
		expandedDiv.appendChild(expandedContentDiv);

		//End Tag
		lineDiv = document.createElement("div");
		lineDiv.className = "s-xml-line";
		var endTagSpan = this._addTag(element, true);
		lineDiv.appendChild(endTagSpan);

		expandedDiv.appendChild(lineDiv);

		return expandedContentDiv;
	},

	_addCollapsedDiv: function(slot, element) {
		var self = this;
		var lineDiv;
		//Add the collapsed DIV
		var collapsedDiv = document.createElement("div");
		collapsedDiv.className = "collapsed hidden";
		slot.appendChild(collapsedDiv);

		lineDiv = document.createElement("div");
		lineDiv.className = "s-xml-line";
		//Expand button
		var btnExpandSpan = document.createElement("span");
		btnExpandSpan.className = "s-xml-btn";
		btnExpandSpan.innerHTML = "&#43;"
		btnExpandSpan.onclick = function() {
			var parentNode = this.parentNode.parentNode.parentNode;
			var expanded_node = parentNode.childNodes[0];
			expanded_node.className = "expanded";
			var collapsed_node = parentNode.childNodes[1];
			collapsed_node.className = "collapsed hidden";
			self.scrollBar && self.scrollBar.resize();

		};

		lineDiv.appendChild(btnExpandSpan);

		//Start tag
		var startTagSpan = this._addTag(element, false);
		lineDiv.appendChild(startTagSpan);

		//Content
		var textTagSpan = document.createElement("span");
		textTagSpan.className = "html-tag-text";
		textTagSpan.innerHTML = "...";
		lineDiv.appendChild(textTagSpan);

		//End tag
		var endTagSpan = this._addTag(element, true);
		lineDiv.appendChild(endTagSpan);

		collapsedDiv.appendChild(lineDiv);

	}
});