"use strict";
var helpers = require('syracuse-core/lib/helpers');
var VignetteField = require("syracuse-ui/lib/field/vignette/vignetteField").VignetteField;

function HTMLVignetteField() {}

exports.HTMLVignetteField = helpers.defineClass(HTMLVignetteField, VignetteField, {
	ensureDefaultTitle: function() {

	},
	setDataBind: function(value, record, metaData, $bind) {
		if (this.page.externalAdapter.setDataBind(this, value, record, metaData)) {
			if (value !== undefined) {
				this.$contentUrl = this.$item.$url = value;
				this._showUrl();
			}
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		VignetteField.prototype.applyDesignMetaData.call(this, metaData, designing);
		if (metaData.$url !== undefined) {
			this.$contentUrl = this.$item.$url = metaData.$url;
		}
		if (metaData.$width !== undefined) {
			this.$item.$width = metaData.$width;
			if (this._iframe) {
				this._iframe.style.width = this.$item.$width;
			}
		}
		if (metaData.$opened !== undefined) {
			this.openBox(this.$item.$opened = metaData.$opened);
		}
		if (metaData.$url !== undefined) {
			this._showUrl();
		}
		if (metaData.$isPageHeightDocked !== undefined || metaData.$height !== undefined) {
			if (metaData.$isPageHeightDocked !== undefined) {
				this.$item.$isPageHeightDocked = metaData.$isPageHeightDocked;
			}
			if (metaData.$height !== undefined) {
				this.$item.$height = metaData.$height;
			}
			if (this._iframe) {
				if (this.$item.$isPageHeightDocked) {
					this.resizeArticle();
				} else {
					if (!this.isMaximized) {
						this._iframe.style.height = this.$item.$height;
					}
				}
			}
		}
	},
	resizeArticle: function() {
		if (this._iframe) {
			var maxHeight = this.page.scrollview.clientHeight;
			if (this.isMaximized) {
				var slot = this.page.isLandingPage ? syra_site.body : this.page.layoutSlot;
				var rect = this.header.getBoundingClientRect();
				var diff = rect.height + (2 * (rect.top - slot.getBoundingClientRect().top));
				maxHeight = slot.getBoundingClientRect().height - diff;
				this._iframe.style.height = maxHeight + "px";
				//this._iframe.style.height = (maxHeight - (this.page.scrollview.scrollHeight - maxHeight)) + "px";
			} else {
				if (this.$item.$isPageHeightDocked) {
					var scrollTop = this.page.scrollview.getScrollviewSize().top;
					var bodyTop = this._iframe.getBoundingClientRect().top;
					if (bodyTop) {
						this._iframe.style.height = (maxHeight - (bodyTop - scrollTop) - 20) + "px";
					}
				} else {
					this._iframe.style.height = this.$item.$height || document.body.clientHeight * 0.8 + "px";
				}
			}
		}
	},
	onAfterMaximize: function() {
		if (this._iframe && !this.isMaximized) {
			this._iframe.style.height = this.$item.$height || "100%";
		}
		this.resizeArticle();
	},
	_showUrl: function() {
		var sb;
		if (this.$contentUrl) {
			if (!this._iframe) {
				this._iframe = document.createElement("iframe");
				this._iframe.className = "s-iframe";
				this._iframe.target = "_top";
				if ((sb = this._getSecurityLevel()) !== null) {
					this._iframe.setAttribute("sandbox", sb);
				}
				/*var _onload = this._iframe.addEventListener("load", function(event){
                    var ifrm = event.target;
                    var doc = ifrm.contentDocument ? ifrm.contentDocument : ifrm.contentWindow.document;
                    ifrm.style.visibility = 'hidden';
                    ifrm.style.height = "10px"; // reset to minimal height ...
                    doc = doc || document;
                    var body = doc.body, html = doc.documentElement;
                    var height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
                    ifrm.style.height = height + 4 + "px";
                    ifrm.style.visibility = 'visible';
                }, false);*/

				this._iframe.style.width = this.$item.$width || "100%";
				syra_site.dom.empty(this.body);
				this.body.appendChild(this._iframe);
			}
			this._iframe.setAttribute("src", this.$contentUrl);
			this.externalBtn && syra_menus.button.remove(this.externalBtn);
			this.externalBtn = syra_menus.button.add({
				parent: this,
				text: this.titleText,
				css: "s-btn-external-default " + this.$skin + "-btn",
				iconOnly: true,
				fontIcon: "external"
			});
			this.refreshBtn.link.parentNode.insertBefore(this.externalBtn.link, this.refreshBtn.link);
			this.externalBtn.link.target = "_blank";
			this.externalBtn.link.href = this.$contentUrl;
		} else {
			syra_menus.button.remove(this.externalBtn);
			delete this.externalBtn;
			syra_site.dom.empty(this.body);
			this._iframe = null;
		}
	},
	switchDesigner: function(open) {
		var self = this;
		if (open) {
			require.async('syracuse-ui/lib/authoring/htmlVignetteDesigner', function(err, module) {
				self.designBtn && syra_site.dom.toggleClass(self.designBtn.link, "s-close", open);
				self.designer = new module.Designer();
				self.designer.openDesigner(self);
			});
		} else {
			if (self.designer) {
				self.designBtn && syra_site.dom.toggleClass(self.designBtn.link, "s-close", open);
				syra_diagnose.showDiagnoses({
					$diagnoses: null
				}, self.page);
				self.designer.dispose();
			}
			self.designer = null;
		}
	},
	loadBox: function() {
		VignetteField.prototype.loadBox.call(this);
		if (!this.$contentUrl) {
			this.$contentUrl = this.$field.$location && this.$field.$location.$url;
		}
		this._showUrl();
	},
	_getSecurityLevel: function() {
		var l1, l2, l3, i, len;
		// Expected values : "low", "medium", "high"
		if (this.$field && (l1 = this.$field.$securityLevel)) {
			if (typeof l1 !== 'string') {
				// How vignette could contains several sources (especially for classic pages), at now we align security on the most restrictive source level
				l2 = l1[0];
				for (i = 1, len = l1.length; i < len; i++) {
					if ((l3 = l1[i]) && l3.charCodeAt(l3.length - 1) < l2.charCodeAt(l2.length - 1)) {
						l2 = l3;
					}
				}
				l1 = null;
			}
		}
		switch ((l1 || l2)) {
			case "high":
				l3 = "";
				break;
			case "low":
				l3 = null;
				break;
			default:
				// So, medium level
				l3 = "allow-same-origin allow-forms allow-scripts";
		}
		return l3;
	}
});