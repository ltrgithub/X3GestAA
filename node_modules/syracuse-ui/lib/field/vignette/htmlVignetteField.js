"use strict";
var helpers = require('syracuse-core/lib/helpers');
var VignetteField = require("syracuse-ui/lib/field/vignette/vignetteField").VignetteField;

function HTMLVignetteField() {}

exports.HTMLVignetteField = helpers.defineClass(HTMLVignetteField, VignetteField, {
	ensureDefaultTitle: function() {

	},
	setDataBind: function(value, record, metaData, $bind) {
		if (this.page.externalAdapter.setDataBind(this, value, record, metaData)) {
			if (value !== undefined) {
				this._showUrl(this.$item.$url = value);
			}
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		VignetteField.prototype.applyDesignMetaData.call(this, metaData, designing);
		if (metaData.$url !== undefined) {
			this._showUrl(this.$item.$url = metaData.$url);
		}
	},
	resizeArticle: function() {
		if (syra_dom.isVisible(this.domItem)) {
			!this._iframe && this._showUrl();
			if (this._iframe) {
				if (this.isMaximized) {
					var rectHeader = this.header.getBoundingClientRect();
					var rectPage = this.page.layoutSlot.getBoundingClientRect();
					var diff = rectHeader.height + (2 * (rectHeader.top - rectPage.top));
					var rectFrame = this.body.getBoundingClientRect();
					var maxHeight = rectPage.height - diff - 3 - (rectFrame.top - rectHeader.bottom);
					this.body.style.height = maxHeight + "px";
				} else {
					if (this.$item.$height) {
						this.body.style.height = this.$item.$height + "px";
					} else {
						this.body.style.height = this.page.size.scrollview.height + "px";
						var diff = this.page.scrollview.scrollHeight - this.page.scrollview.clientHeight;
						if (diff) {
							this.body.style.height = Math.max(Math.floor(this.page.size.scrollview.height / 2), this.page.size.scrollview.height - diff) + "px";
						}
					}
				}
			}
		}
	},
	onAfterMaximize: function() {
		if (this.body) {
			this.body.style.height = "";
		}
		this.resizeArticle();
	},
	_showUrl: function($url) {
		if ($url !== undefined) {
			this.$contentUrl = $url;
			//this.$contentUrl = "http://www.lemonde.fr/";
		}
		if (this.$isLoaded && syra_dom.isVisible(this.domItem)) {
			if (this.$contentUrl) {
				if (!this._iframe) {
					this._iframe = document.createElement("iframe");
					this._iframe.className = "s-iframe";
					this._iframe.target = "_top";
					var sb;
					if ((sb = this._getSecurityLevel()) !== null) {
						this._iframe.setAttribute("sandbox", sb);
					}
					syra_dom.empty(this.body);
					this.body.appendChild(this._iframe);
					this.addResizer();
				}
				this._iframe.setAttribute("src", this.$contentUrl);
				this.externalBtn && syra_menus.button.remove(this.externalBtn);
				this.externalBtn = syra_menus.button.add({
					parent: this,
					text: this.titleText,
					css: "s-btn-external-default " + this.$skin + "-btn",
					iconOnly: true,
					fontIcon: "external"
				});
				this.refreshBtn.link.parentNode.insertBefore(this.externalBtn.link, this.refreshBtn.link);
				this.externalBtn.link.target = "_blank";
				this.externalBtn.link.href = this.$contentUrl;
			} else {
				syra_menus.button.remove(this.externalBtn);
				delete this.externalBtn;
				syra_dom.empty(this.body);
				this._iframe = null;
			}
		}
	},
	toggleDesignButton: function(show) {
		VignetteField.prototype.toggleDesignButton.call(this, this.page.isLandingPage ? false : show);
	},
	loadBox: function() {
		this.$isLoaded = false;
		this.$authoringType = "htmlVignetteField";
		VignetteField.prototype.loadBox.call(this);
		this.$isLoaded = true;
		this._showUrl(this.$contentUrl || (this.$field.$location && this.$field.$location.$url));
	},
	renderLayoutContent: function($url, onVignetteRefresh) {
		VignetteField.prototype.renderLayoutContent.call(this, $url, onVignetteRefresh);
		onVignetteRefresh && this._showUrl();
	},
	_getSecurityLevel: function() {
		var l1, l2, l3, l3s, i, len, sec;
		// Expected values : "low", "medium", "high"
		if (this.$field && (l1 = this.$field.$securityLevel)) {
			if (typeof l1 !== 'string') {
				// How vignette could contains several sources (especially for classic pages), at now we align security on the most restrictive source level
				l2 = l1[0];
				for (i = 1, len = l1.length; i < len; i++) {
					if ((l3 = l1[i]) && l3.charCodeAt(l3.length - 1) < l2.charCodeAt(l2.length - 1)) {
						l2 = l3;
					}
				}
				l1 = null;
			}
		}
		sec = syra_site.userProfile.dataset.security || {};
		l3s = ((sec.iframe || {}).sandbox || {})[l1 || l2 || "medium"];
		switch ((l1 || l2)) {
			case "high":
				l3 = "";
				break;
			case "low":
				l3 = "allow-same-origin allow-forms allow-popups allow-scripts";
				break;
			default:
				// So, medium level
				l3 = "allow-forms allow-scripts";
		}
		return l3s === undefined ? l3 : l3s;
	}
});