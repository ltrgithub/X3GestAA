"use strict";
var helpers = require('syracuse-core/lib/helpers');
var resUtil = require('syracuse-core/lib/resource/util');
var locale = require('syracuse-core/lib/locale');
var Field = require('syracuse-ui/lib/field/field').Field;
var rtf = require("syracuse-rtf");
var keyboardHandlers = require('syracuse-ui/lib/events/keyboardHandlers');

var _fontSizes = "8,9,10,11,12,14,16,18,20,22,24,26,28,36,48,72";
var _htmlStyles = [
	["paragraph", "<p>"],
	["h4", "<h4>"],
	["h5", "<h5>"]
];
var _localize = {};

function _normalizeRawText(text) {
	return text.replace(/&nbsp;/gi, " ").replace(/<br\s*[\/]?>/gi, "\r\n").replace(/<p>/gi, "\r\n");
}

function _normalizeHtmlText(html) {
	return html.replace(/\r\n/g, "<br/>").replace(/\n/g, "<br/>").replace(/\s/g, "&nbsp;");
}

function _fixHtml(html) {
	return html.replace(/<br\s*[\/]?>$/gi, "");
}

function sanitize(html) {
	return rtf.toHtml(rtf.fromHtml(html));
}

function _checksum(text) {
	var a = 1,
		b = 0;
	for (var index = 0; index < text.length; ++index) {
		a = (a + text.charCodeAt(index)) % 65521;
		b = (b + a) % 65521;
	}
	return (b << 16) | a;
	// return md5(text);
}

function _setButtonMode(button, isRow) {
	button.title = isRow ? _localize.richMode : _localize.rawMode;
	syra_site.dom.toggleClass(button, "buttonRichText", !isRow);
	syra_site.dom.toggleClass(button, "buttonRawText", isRow);
}

function _setColorTitle(popup) {
	$(popup).children(":not([title]), [title='']").attr("title", function() {
		var toHex = function(n) {
			n = parseInt(n, 10);
			return ("00" + n.toString(16)).slice(-2);
		};
		var re = new RegExp("\\d+\,\\s+\\d+\,\\s+\\d+");
		var c = re.exec($(this).css("backgroundColor"))[0].split(",");
		return "#" + toHex(c[0]) + toHex(c[1]) + toHex(c[2]);
	});
}

function _getSelection(editor) {
	// supported by all browsers including ie9
	var elt = editor.sourceMode() ? document : editor.$frame[0].contentWindow,
		sel;
	if (elt && elt.getSelection) {
		sel = elt.getSelection();
	}
	if (!sel && elt.selection)
		sel = elt.selection.createRange();
	return sel;
}

var _buttons = {
	rawMode: function($buttons) {
		var messageBox = syra_diagnose.showBox({
			$type: "warning",
			$buttons: "yesno",
			$title: _localize.aboutToSwitchToRawTitle,
			$message: _localize.aboutToSwitchToRawConfirm,
			$minWidth: "380" //px
		}, true);
		// adding data-s-id attribute
		var menus = Object.keys(messageBox.menuItems);
		for (var ii = 0, jj = menus.length; ii < jj; ii++) {
			var menuItem = messageBox.menuItems[menus[ii]];
			menuItem[0].domItem.setAttribute("data-s-id", menuItem[0].$title);
		}
		// get msgbox raw content
		var popup = messageBox.domItem.outerHTML;
		syra_diagnose.closeBox();
		$buttons.rawMode = {
			name: "rawMode",
			title: _localize.rawMode,
			popupName: "rawMode",
			popupClass: "cleditorPrompt",
			popupContent: popup,
			getEnabled: function(data) {
				var rawAllowed = data.editor.options._field.isRawAllowed;
				var isRow = rawAllowed && data.editor.options._isRaw();
				_setButtonMode(data.button, isRow);
				return rawAllowed;
			},
			buttonClick: function(e, data) {
				var button = e.target;
				var editor = data.editor;
				var field = ((editor || {}).options || {})._field;
				var $$popup = $(data.popup),
					html;
				if (editor.options._isRaw()) {
					editor.options._setRaw(false);
					html = _normalizeHtmlText(_fixHtml(editor.$area.val()));
					var $$content = $(html);
					if ($$content.is('pre')) {
						html = $$content.html();
					}
					$(editor.doc.body).html(html);
					editor.options._setRaw(false);
					_setButtonMode(button, false);
					editor.updateTextArea();
					editor.focus();
					return false;
				}

				$$popup.css("padding", "0");
				// Wire up the submit button click event handler
				$$popup.find(".s-msgbox-buttons-link").unbind("click").bind("click", function(event) {
					event.preventDefault();
					if ($(this).attr('data-s-id') === syra_local.msgbox_yes) {
						if (!editor.options._isRaw()) {
							var rawtext = $('<div>').html(_normalizeRawText(editor.$area.val())).text(),
								$$pre = $('<pre>').appendTo('<div>').html(rawtext);
							editor.$area.val($$pre.parent().html());
							editor.options._setRaw(true);
							_setButtonMode(button, true);
						}
						editor.updateFrame();
						_disable(field, editor.disabled);
					}
					editor.hidePopups();
					editor.focus();
				});
			}
		};
	},
	size: function($buttons) {
		var list = document.createElement("select");
		list.setAttribute("size", "8");
		var sizes = _fontSizes.split(",");
		for (var ii = 0, jj = sizes.length; ii < jj; ii++) {
			list.appendChild(document.createElement("option")).textContent = sizes[ii];
		}
		var popup = document.createElement("div");
		popup.appendChild(list);
		$buttons.size.popupContent = $(popup).html();
		$buttons.size.popupClass = "cleditorList";
		$buttons.size.popupClick = function(e, data) {
			data.command = "inserthtml";
			data.value = '<span style="font-size:' + e.target.value + 'pt; ">' + data.editor.selectedText() + '</span>';
			return true;
		};
	},
	color: function($buttons) {
		$buttons.color.buttonClick = function(e, data) {
			_setColorTitle(data.popup);
		};
		$buttons.highlight.buttonClick = function(e, data) {
			_setColorTitle(data.popup);
		};
	},
	link: function($buttons) {
		$buttons.link.buttonClick = function(e, data) {
			var $$focusNode = $(_getSelection(data.editor).focusNode);
			var href = $$focusNode.closest("a").attr("href") || $$focusNode.find("a").attr("href");
			if (href && href != "") {
				$(data.popup).find(":text").val(href);
			}
		};
	},
	insertTable: function($buttons) {
		$buttons.insertTable = {
			name: "insertTable",
			title: _localize.insertTable,
			popupName: "insertTable",
			getEnabled: function(data) {
				syra_site.dom.toggleClass(data.button, "buttonInsertTable", true);
				return !data.editor.options.isRtfMimeType;
			},
			buttonClick: function(e, data) {
				syra_site.closePopups();
				var editor = data.editor;
				editor.focus();
				var range;
				try {
					var sel = _getSelection(editor);
					range = sel && sel.getRangeAt(0);
				} catch (e) {}
				syra_site.dialogManager.openPopup(syra_site.page, {
					$isAutoClose: true,
					$itemPage: {
						$isEditMode: true,
						$facet: "$edit",
						$representation: {
							$prototype: {
								$properties: {
									$rows: {
										$type: "application/x-integer",
										$title: _localize.tableRows,
										$maxLength: 5
									},
									$columns: {
										$type: "application/x-integer",
										$title: _localize.tableCol,
										$maxLength: 5
									},
									$borderSize: {
										$type: "application/x-integer",
										$title: _localize.tableBorderSize,
										$maxLength: 5
									},
									$withHeader: {
										$type: "application/x-boolean",
										$title: _localize.tableWithHeader
									}
								},
								$links: {}
							},
							$article: {
								$title: _localize.tableTitle,
								$category: "section",
								$layout: {
									$items: [{
										$layoutType: "stack",
										$items: [{
											$layoutType: "row",
											$autoSize: true,
											$items: [{
												$bind: "$rows",
											}, {
												$bind: "$columns"
											}]
										}, {
											$layoutType: "row",
											$autoSize: true,
											$items: [{
												$bind: "$borderSize",
											}, {
												$bind: "$withHeader"
											}]
										}]
									}]
								}
							}
						}
					},
					onValidate: function(page) {
						page.validateFields();
						if (page.dataset && Object.keys(page.dataset).length > 0) {
							var rows = parseInt(page.dataset.$rows, 10),
								cols = parseInt(page.dataset.$columns, 10),
								border = parseInt(page.dataset.$borderSize, 10),
								header = page.dataset.$withHeader,
								i, j;
							var html = '<div><table cellspacing="1" cellpadding="1" border="' + (border || 0) + '">';
							if (header) {
								html += '<thead><tr>';
								for (j = 0; j < cols; j++) {
									html += '<th><br></th>';
								}
								html += '</tr></thead>';
							}

							html += '<tbody>';
							for (i = 0; i < rows; i++) {
								html += '<tr>';
								for (j = 0; j < cols; j++) {
									html += '<td><br></td>';
								}
								html += '</tr>';
							}
							html += '</tbody>';
							html += '</table></div>';
							editor.execCommand("inserthtml", html, null, data.button);
						}
						editor.focus();
					},
					position: {
						my: "left bottom",
						at: "right top",
						of: $(e.target)
					}
				});
				return false;
			}
		};
	},
	extendSize: function($buttons) {
		$buttons.extendSize = {
			name: "extendSize",
			title: _localize.extendSize,
			getEnabled: function(data) {
				syra_site.dom.toggleClass(data.button, "buttonExtendSize", true);
				return true;
			},
			buttonClick: function(e, data) {
				var heightList = ["auto", "400px", "600px", "800px"];
				var editor = data.editor;
				editor.$heightIndex = ((editor.$heightIndex || 0) + 1) % heightList.length;
				editor.options.height = heightList[editor.$heightIndex];
				var page = editor.options._field.page;
				page && page.dialogWrapper && page.dialogWrapper.resizeDialog();
				_refreshEditor(editor.options._field);
				editor.options._field.onFieldInputEvent(e);
				return false;
			}
		};
	},
	misc: function($buttons) {
		var ids = ("bold italic underline strikethrough subscript superscript font size style" + //
			"color highlight bullets numbering outdent indent alignleft center alignright " + //
			"justify rule image link unlink removeformat source").split(" ");
		for (var ii = 0, jj = ids.length; ii < jj; ii++) {
			var btn = $buttons[ids[ii]];
			if (btn) {
				btn.getEnabled = function(data) {
					var rawAllowed = data.editor.options._field.isRawAllowed;
					return !(rawAllowed && data.editor.options._isRaw());
				};
			}
		}
		$buttons.style.getEnabled = function(data) {
			return !data.editor.options.isRtfMimeType;
		};
		$buttons.image.getEnabled = function(data) {
			return !data.editor.options.isRtfMimeType;
		};
		$buttons.link.getEnabled = function(data) {
			return !data.editor.options.isRtfMimeType;
		};
		$buttons.unlink.getEnabled = function(data) {
			return !data.editor.options.isRtfMimeType;
		};
		$buttons.rule.getEnabled = function(data) {
			return !data.editor.options.isRtfMimeType;
		};
		$buttons.superscript.getEnabled = function(data) {
			return !data.editor.options.isRtfMimeType;
		};
		$buttons.subscript.getEnabled = function(data) {
			return !data.editor.options.isRtfMimeType;
		};
	}
};

var _content = {
	set: function(field, contents, saveStyles) {
		field._isRaw = false;
		if (!contents || contents.length === 0) {
			// No contents, assume we want to edit Rich Text or HTML
		} else {
			switch (field.$field.$type) {
				case "text/rtf":
					if (contents.match(/^\s*{\\(u|)rtf/)) {
						contents = rtf.toHtml(contents);
					} else
					if (field.isRawAllowed) {
						field._isRaw = true;
						if (!contents.match(/<([A-Z][A-Z0-9]*)\b[^>]*>(.*?)<\/\1>/i)) {
							// Not an HTML contents, so wrap it in <pre> tag
							contents = "<pre>" + contents + "</pre>";
						}
					} else {
						syra_site.showDiagnoses({
							$diagnoses: [{
								$message: locale.format(_localize.errorRtfExpected, contents),
								$severity: "error"
							}, {
								$message: _localize.warnContentsNotSet,
								$severity: "warning"
							}]
						}, field);
						return;
					}
					break;
				case "text/html":
					// contents as is
					break;
			}
		}
		if (saveStyles && contents) {
			field.$$savedStyles = $("<div>").append(contents).find('style');
		}
		_content.setRawEdit(field._editor, contents);
		!field.$isEditMode && _disable(field);

	},
	getRawEdit: function(editor) {
		if (editor && editor.doc) {
			if (editor.doc.body) {
				return _fixHtml(editor.doc.body.innerHTML || "");
			} else {
				if (editor.$area) {
					// iframe is not yet created so return the textarea content
					return _fixHtml(editor.$area[0].innerHTML || "");
				}
			}
		}
	},
	setRawEdit: function(editor, contents) {
		if (editor && editor.$area) {
			editor.$area.val(contents || '');
			editor.updateFrame();
		}
	},
	getPersistent: function(field, contents) {
		if (!field.$isEditMode)
			return null;

		if (contents === undefined) {
			contents = _content.getRawEdit(field._editor);
		}
		if (contents === undefined) {
			return null;
		}
		var hash = _checksum(contents);
		if (hash === field._cache.checksum)
			return field._cache.value;
		field._cache.raw = contents;
		field._cache.checksum = hash;

		if (field.$$savedStyles) {
			var $$contents = $('<div>').append(contents);
			if ($$contents.find('style').length === 0) {
				$$contents.prepend(field.$$savedStyles);
				contents = $$contents.html();
			}
		}
		if (field._isRaw) {
			var outer = $(contents);
			if (outer.is('pre'))
				contents = _normalizeRawText(outer.html());
		} else {
			if (field.isRtfMimeType) {
				contents = (contents || "").length === 0 ? "" : rtf.fromHtml(contents);
			}
		}
		field._cache.value = contents;
		return contents;
	}

};

function _refreshEditor(field) {
	var editor = field._editor;
	if (editor && editor.$frame && editor.$frame[0] && editor.$frame[0].contentWindow) {
		editor.refresh();
		field.bindEvent && _bindInput(field, true);
	}
}

function _disable(field, disabled) {
	var editor = field._editor;
	editor && editor.doc && editor.disable(field.$isReadOnly || !field.$isEditMode || disabled);
	if (editor.disabled && !field.$isEditMode)
		editor.$toolbar.hide();
}

function _bindInput(field, bind) {
	field.bindEvent = bind;
	if (!(field._editor && field._editor.doc)) {
		return;
	}
	var doc = field._editor.doc,
		$$doc = $(doc),
		$$input = $(doc.body),
		contentWindow = field._editor.$frame[0].contentWindow,
		$$inputWindow = $.browser.mozilla ? $$doc : $(contentWindow);
	if (bind) {
		$$input.on("change focusin focusout", function(event) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		});
		$$input.on("keydown keypress keyup", function(event) {
			if (keyboardHandlers[event.type])
				keyboardHandlers[event.type](event);
			event.stopPropagation();
		});
		$$inputWindow.on("click", function(event) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		});
		$$inputWindow.focus(function(event) {
			$$input.trigger("focusin");
			syra_site.dom.toggleClass(field._dataValue, "cleditorMain-focus", true);
			event.stopPropagation();
		});
		$$inputWindow.blur(function(event) {
			syra_site.dom.toggleClass(field._dataValue, "cleditorMain-focus", false);
			if (field.isDirty(syra_site.getBrowserIdentity().isMSIE)) {
				$$input.trigger("change");
			}
			$$input.trigger("focusout");
			event.stopPropagation();
		});
	} else {
		$$input.off();
		$$inputWindow.off();
	}
}

function _setLazyUrl(field, value) {
	field.$lazyUrl = syra_site.expressionMaker.parse(field.articleParent, value && value.$url || field.$field.$url);
}


function _finalizeCreate(field) {
	field.setState(field.$field);
	field.$isEditMode && _disable(field, field._editor.disabled);
	_refreshEditor(field);

	// Intercept paste event to get the opportunity of sanitizing the contents
	field.isRtfMimeType &&
		$(field._editor.doc.body).bind('paste', function(e) {
			// this code corrupts the undo stack!!!
			var pastedText;
			if (e && e.clipboardData && e.clipboardData.getData) {
				if (/text\/html/.test(e.clipboardData.types)) {
					pastedText = e.clipboardData.getData('text/html');
				} else
				if (/text\/plain/.test(e.clipboardData.types)) {
					pastedText = e.clipboardData.getData('text/plain');
				} else {
					pastedText = "";
				}
			} else
			if (window.clipboardData && window.clipboardData.getData) { // IE
				pastedText = window.clipboardData.getData('Text');
			} else {
				var el = $(this);
				// Hiding the underlying element causes some unpredictable behavior
				// var display;
				// $.browser.mozilla && (display = el.css('display')) && el.css('display', 'none');
				setTimeout(function() {
					var text = $(el).html();
					if (text) {
						$(el).html(sanitize(text));
					}
					// display && el.css('display', display);
				}, 300);
			}
			if (pastedText) {
				$(this).html(sanitize(pastedText));
				e.preventDefault();
				e.stopPropagation();
			}

		});

	_bindInput(field, true);
}


function HtmlEditor() {}

exports.HtmlEditor = helpers.defineClass(HtmlEditor, Field, {
	loadBox: function(initData) {
		var self = this;
		syra_site.dom.loadStyleSheet("htmleditor", ["cleditor/jquery.cleditor.css"]);
		require.async('syracuse-ui/deps/cleditor/jquery.cleditor', function(err, module) {
			Field.prototype.loadBox.call(self, initData);
		});
	},
	initialize: function() {
		this.isRtfMimeType = this.$field.$type == "text/rtf";
		this.$item.$isAutoSizeDisabled = true;
		this.$item.$isAutoSize = true;
		this._cache = {};
	},
	resizeField: function() {
		if (this.domItem && this.domItem.clientWidth) {
			if (!this.isCreated) {
				this.isCreated = true;
				_finalizeCreate(this);
				if (this._isFocusRequested) {
					this._editor.focus();
					delete this._isFocusRequested;
				}
			}
			_refreshEditor(this);
		}
	},
	setDataValue: function(value) {
		var self = this;
		_setLazyUrl(this, value);
		if (this.$lazyUrl && value && typeof(value) === 'object') {
			// lazy loading
			self.$contentType = value.$contentType || (this.$field.$type === 'application/x-document' && this.$field.$contentType || this.$field.$type);
			syra_controller.callServer(null, {
				$location: {
					$url: self.$lazyUrl,
					$contentType: self.$contentType,
					$type: self.$contentType
				}
			}, function(data, response) {
				if (typeof(data) === 'string') {
					self.setDataValue(data);
				} else {
					self.showErrors([locale.format(syra_local.fieldBadDataType, "string", typeof(data))]);
				}
			}, function(error) {
				self.showErrors([error.message]);
			});
		} else {
			try {
				if (this.currentValue != value) {
					_content.set(this, value, true);
					this.currentValue = _content.getPersistent(this);
					if (!this.dirty()) {
						this._cache.dirtyChecksum = this._cache.checksum;
					}
				}
			} catch (error) {
				this.showErrors([error.message]);
			}
			this.$isEditMode && _disable(this, this._editor.disabled);
		}
	},
	getInputValue: function() {
		if (this.$isEditMode && this._editor && this._editor.$area) {
			return _content.getPersistent(this);
		}
		return "";
	},
	isDirty: function(dontHidePopup) {
		// Get the current content to compute the checksum
		if (this._editor && !dontHidePopup) {
			this._editor.hidePopups();
		}
		var value = _content.getPersistent(this),
			dirty = (this._cache.dirtyChecksum != this._cache.checksum);
		return dirty;
	},
	setDirty: function(dirty) {
		if (!dirty) {
			var contents = _content.getPersistent(this); // to compute checksum;
			this._cache.dirtyChecksum = this._cache.checksum;
			this.$isEditMode && _content.setRawEdit(this._editor, rtf.toHtml(contents));
		}
		this.dirty(dirty);
	},
	dirty: function(set) {
		if (set !== undefined) {
			this._isDirty = set;
		} else
			return this._isDirty;
	},
	validateType: function(errors, value) {
		if (this.currentValue && this.$maxLength && this.currentValue.length > this.$maxLength) {
			errors.push(locale.format(_localize.errorMaxLength, this.$maxLength));
		}
	},
	//TODO :
	//A revoir : pourquoi un url particulieret ne pas traiter les datas editeur lazyload comme n'importe qu'elle autre
	notifyFieldChange: function(newValue, validated) {
		var self = this;
		_setLazyUrl(self);
		self.currentValue = newValue;
		if (self.$lazyUrl) {
			if (self.page.isServerNotifyDisabled) {
				self.setDatasetValue(newValue);
			} else {
				syra_controller.callServer(null, {
					$location: {
						$url: self.$lazyUrl,
						$contentType: self.$contentType,
						$type: self.$contentType
					},
					data: newValue,
					method: "PUT"
				}, function(data, response, requestUrl) {});
			}
		} else {
			Field.prototype.notifyFieldChange.call(self, newValue, validated);
		}
	},
	focus: function() {
		if (this.$isEditMode && this._editor) {
			if (!this.isCreated) {
				this._isFocusRequested = true;
			} else {
				this._editor.focus();
			}
		}
	},
	getCaretPosition: function() {
		if (!(this.$isEditMode && ((this._editor || {}).doc || {}).body && this._caret)) {
			return 0;
		}
		var sel = _getSelection(this._editor),
			caretPos, range, contents;
		try {
			range = this._editor.doc.createRange();
			range.setStart(this._editor.doc.body, 0);
			sel.focusNode && range.setEnd(sel.focusNode, sel.focusOffset);
			contents = range.cloneContents();
		} catch (e) {
			return 0;
		}
		if (contents) {
			$(this._caret).append(contents);
			this._caret.innerHTML = this._caret.innerHTML.replace(/<br\s*[\/]?>/gi, "\n");
			caretPos = this._caret.textContent.length;
			syra_site.dom.empty(this._caret);
		}
		return caretPos || 0;
	},
	setState: function(state) {
		if (state && state.$isDisabled !== undefined) {
			_disable(this, state.$isDisabled);
		}
		Field.prototype.setState.call(this, state);
	},
	_onSetReadOnly: function($isReadOnly) {
		_disable(this, $isReadOnly);
		Field.prototype._onSetReadOnly.call(this, $isReadOnly);
	},
	render: function() {
		var self = this;
		self.$maxLength = self.$field.$maxLength || self.$field.$maxByteLength;
		self.hasRawCapability = self.$field.$capabilities && (self.$field.$capabilities.indexOf("raw") >= 0);
		self.isRawAllowed = self.isRtfMimeType && self.hasRawCapability;

		_setLazyUrl(self);
		self.$contentType = self.$field.$type === 'application/x-document' && self.$field.$contentType || self.$field.$type;

		self._dataValue.setAttribute("id", self.id + "-data");
		self._caret = document.createElement("div");
		self._caret.id = self.id + "-caret";
		self._caret.style.display = "none";
		self._dataValue.appendChild(self._caret);

		var textArea = document.createElement("textarea");
		textArea.setAttribute("name", textArea.id = "html-editor-" + self.id);
		textArea.syraItem = self.id;
		textArea.setAttribute("data-s-field", self.id);
		textArea.syrainout = self.id;

		syra_site.setSpecificAttributes(textArea);
		self._dataValue.appendChild(textArea);

		self.$item.$rows && textArea.setAttribute("rows", self.$item.$rows);

		var $buttons = jQuery.cleditor.buttons;
		_localize = locale.resources(module)();
		var ids = Object.keys($buttons);
		for (var ii = 0, jj = ids.length; ii < jj; ii++) {
			var title = _localize[ids[ii]];
			if (title) {
				$buttons[ids[ii]].title = title;
			}
		}
		for (var ii = 0, jj = _htmlStyles.length; ii < jj; ii++) {
			var style = _htmlStyles[ii];
			style[0] = _localize[style[0]] || style[0];
		}
		if (!$buttons.rawMode) {
			_buttons.rawMode($buttons);
			_buttons.insertTable($buttons);
			_buttons.link($buttons);
			_buttons.color($buttons);
			_buttons.size($buttons);
			_buttons.extendSize($buttons);
			_buttons.misc($buttons);
		}
		self._editor = $(textArea).cleditor({
			width: self.$item.$textWidth || "auto",
			height: self.$item.$textHeight || "auto",
			controls: "bold italic underline strikethrough subscript superscript | font size style | color" + //
			" highlight removeformat | bullets" + //
			// " numbering" +
			" | insertTable " + //
			" | outdent indent alignleft center alignright justify" + //
			" | undo redo | rule image link unlink" + //
			" | cut copy paste pastetext" + //
			" | print source rawMode " + //
			" | extendSize",
			docCSSFile: "/syracuse-ui/themes/desktop/sage/cleditor/jquery.cleditor-doc.css",
			bodyStyle: "",
			// sizes in the font size popup
			sizes: _fontSizes,
			styles: _htmlStyles,
			useCSS: true,
			isRtfMimeType: self.isRtfMimeType,
			_field: self,
			_isRaw: function() {
				return self.isRawAllowed && self._isRaw;
			},
			_setRaw: function(v) {
				if (self._isRawAllowed)
					self._isRaw = v;
			},
			// Handlers
			updateFrame: function(html) {
				// TODO: cleanup HTML if necessary
				return html;
			},
			updateTextArea: function(html) {
				return html;
			}
		})[0];
	},
	dispose: function() {
		if (this.resizeSelector) {
			$(window).unbind(this.resizeSelector);
		}
		_bindInput(this, false);
		if (this._editor) {
			this._editor.hidePopups();
			this._editor.dispose();
		}
		Field.prototype.dispose.call(this);
	}
});