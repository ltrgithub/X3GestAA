"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function ReferenceField(){
}

exports.ReferenceField = helpers.defineClass(ReferenceField, Field, {
    releaseMode: function(onDispose){
        if (!onDispose) {
            if (this.codeMenu) {
                this.articleParent.removeItem(this.codeMenu, true);
            }
            delete this.currentValue;
        }
        delete this.codeMenu;
        Field.prototype.releaseMode.call(this, onDispose);
    },
    _extractCode: function($expression){
        return $expression.slice(1, $expression.length - 1);
    },
    _ensureValueBind: function($bind){
        if ($bind != this.$item.$bind) {
            var articleParent = this.articleParent;
            while (articleParent) {
                if (!(articleParent.$prototype && articleParent.$prototype.$properties && articleParent.$prototype.$properties[$bind])) {
                    articleParent = articleParent.getArticleParent();
                }
                else {
                    articleParent.bind(this, $bind);
                    break;
                }
            }
        }
    },
    initialize: function(){
        this.$rootLinks = this.$field.$item;
        if (this.$field.$item.$key === "{$uuid}") {
            this._hasUiid = true;
        }
        else {
            this.$refValue = {
                $itemProp: this._extractCode(this.$field.$item.$value)
            };
            this.$refValue.$prop = this.$field.$item[this.$refValue.$itemProp];
            if (this.$refValue.$prop) {
                this.$refValue.$prop = this._extractCode(this.$refValue.$prop);
                this._ensureValueBind(this.$refValue.$prop);
            }
            else {
                this.$refValue.$prop = this.$refValue.$itemProp;
            }
            //this._ensureValueBind(this.$refValue.$prop);
            
            this.$refKeys = {};
            var $keys = this.$field.$item.$key.split("~");
            for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
                var $key = $keys[ii];
                var $itemProp = this._extractCode($key);
                var prop = this.$field.$item[$itemProp];
                if (prop) {
                    prop = this._extractCode(prop);
                }
                else {
                    prop = $itemProp;
                }
                this.$refKeys[$itemProp] = prop;
            }
        }
    },
    getDataType: function(){
        return this.$field.$item.$properties;
    },
    onInputChange: function(input){
        var value = input.value || "";
        if (value == "") {
            this.notifyFieldChange(null, true);
        }
        else {
            if ((this.currentValue && this.currentValue.$value != value) || !this.currentValue) {
                this.notifyFieldChange({
                    $value: value
                });
            }
        }
    },
    setMenus: function(metaData){
        if (!this.$item.$isFilterMode && !this.$item.$isExpressionChild) {
            if (metaData.$item && ((metaData.$item.$links !== undefined) || (metaData.$item.$actions !== undefined))) {
                this.ensureMenuController().setMenus(metaData.$item);
            }
        }
    },
    render: function(){
        if (this.$isEditMode) {
            var css = ((this.$item.$css) ? this.$item.$css + " " : "");
            var $skinInput = css + this.$skinInput;
            this._input = document.createElement("input");
            this._input.setAttribute("type", "text");
            this.$$input = $(this._input);
            this._input.className = $skinInput;
            
            this.fieldValue.appendChild(this._input);
            if (!this.$item.$inplace && this.$item.$isReferenceTitleVisible !== false) {
                this._refTitle = document.createElement("div");
                this._refTitle.className = $skinInput + "-ref-desc";
            }
            var lookupPicker = this.createPicker("lookup");
            this.$$lookupPicker = $(lookupPicker);
            this.appendToPickerBox(lookupPicker);
            if (this._refTitle) {
                this.fieldValue.appendChild(this._refTitle);
            }
        }
        else {
            this.codeMenu = this.page.loadNewItem($(this.fieldValue), {
                $bind: "$detail",
                $isDescriptionVisible: this.$item.$isReferenceTitleVisible !== false,
                $css: this.$item.$css,
                $category: "link",
                $skin: this.$skin + "-ref-link"
            }, this.boxParent);
        }
        if (this.currentValue) {
            this._renderCurrentValue();
        }
    },
    _ensureMenuPickerVisible: function(){
        if (this.menusController) {
            this.menusController.ensurePickerVisible(this.currentValue && this.currentValue.$value && this.currentValue.$value != "");
        }
    },
    setUUIDDataValue: function(value){
        var $field = this.$field.$item;
        if (value) {
            this.currentValue = {
                $title: value.$title || "",
                $uuid: value.$uuid || this.articleParent.parseExpression($field.$uuid, value) ||
                ""
            };
            this.currentValue.$value = value.$value ||
            this.articleParent.parseExpression($field.$value, value) ||
            "";
            this.currentValue.$key = value.$key ||
            this.articleParent.parseExpression($field.$key, value) ||
            "";
        }
    },
    notifyFieldChange: function(newValue, validated){
        if (this._hasUiid) {
            Field.prototype.notifyFieldChange.call(this, newValue, validated);
        }
        else {
            var self = this;
            self.currentValue = newValue;
            if (validated || self.validate()) {
                self.articleParent.dataset[self.$item.$bind] = self.currentValue;
                self.page.externalAdapter.onFieldNotifyChange({
                    field: self,
                    doEvent: function(){
                        if (self.articleParent.onNotifyDataChange ? self.articleParent.onNotifyDataChange(self, self.currentValue) : true) {
                            var $keys = Object.keys(self.currentValue);
                            var postValue = {};
                            var $properties = self.$field.$item.$properties;
                            var sendBag = self.page.ensureSendBag();
                            for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
                                var $key = $keys[ii];
                                if ($key != "$value" && $key != "$etag") {
                                    var copy = true;
                                    switch ($key) {
                                        case "$description":
                                        case "$title":
                                            if (!self.currentValue[$key]) {
                                                copy = false;
                                            }
                                            break;
                                        case "$uuid":
                                            if (self.articleParent.$recordIndex == undefined) {
                                                copy = false;
                                            }
                                            else {
                                                copy = self.articleParent.list.$prototype.$item.$type == "application/x-reference";
                                            }
                                            break;
                                        default:
                                            var $prop = $properties[$key];
                                            if ($prop) {
                                                if (!$prop.$isReadOnly) {
                                                    var parentKey = self.$refKeys[$key] || $key;
                                                    if (self.articleParent.$prototype.$properties[parentKey]) {
                                                        self.articleParent.ensureDataSet()[parentKey] = self.currentValue[$key];
                                                        sendBag.saveDataChange(self.page, self.articleParent, parentKey, self.currentValue[$key]);
                                                        copy = false;
                                                    }
                                                }
                                                else {
                                                    copy = false;
                                                }
                                                
                                            }
                                            break;
                                    }
                                    if (copy) {
                                        postValue[$key] = self.currentValue[$key];
                                    }
                                }
                            }
                            self.page.notifyDataChange(self, postValue);
                        }
                    }
                });
            }
        }
    },
    setDataValue: function(value){
        var $field = this.$field.$item;
        if (this.currentValue && value) {
            if (this.currentValue.$uuid && this.currentValue.$uuid == value.$uuid) {
                return;
            }
        }
        if (value) {
            this.currentValue = this.currentValue || {};
            if (this._hasUiid) {
                this.setUUIDDataValue(value);
            }
            else {
                if (typeof(value) == 'object') {
                    this.currentValue.$description = value.$description || "";
                    this.currentValue.$title = value.$title || "";
                    /*this.currentValue.$value = value[this.$refValue.$prop] || this.currentValue.$value;
                     if (this.currentValue.$value == null) {
                     this.currentValue.$value = this.articleParent.parseExpression("{" + this.$refValue.$prop + "}");
                     }*/
                    this.currentValue.$value = value[this.$refValue.$itemProp] || this.currentValue.$value;
                    if (this.currentValue.$value == null) {
                        this.currentValue.$value = this.articleParent.parseExpression("{" + this.$refValue.$itemProp + "}");
                    }
                    var $keys = Object.keys(value);
                    for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
                        var $key = $keys[ii];
                        this.currentValue[$key] = value[$key];
                    }
                }
                else {
                    this.currentValue.$value = value;
                }
            }
        }
        else {
            this.currentValue = {}
        }
        this._renderCurrentValue();
    },
    _renderCurrentValue: function(){
        if (this.$isEditMode) {
            if (this._input) {
                this._input.value = this.currentValue.$value || "";
                if (this._refTitle) {
                    this._refTitle.textContent = this.currentValue.$title || "";
                }
                else {
                    this._input.setAttribute("title", this.currentValue.$title || "");
                }
            }
        }
        else {
            if (this.$rootLinks.$links && this.codeMenu) {
                var $details = this.$rootLinks.$links.$details;
                if ($details) {
                    $details.$title = this.currentValue.$value || "";
                    $details.$description = this.currentValue.$title || "";
                    this.codeMenu.setMenu($details, this.currentValue);
                }
            }
        }
    }
});
