"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function ReferenceField(){
}

exports.ReferenceField = helpers.defineClass(ReferenceField, Field, {
    releaseMode: function(onDispose){
        if (!onDispose) {
            if (this.codeMenu) {
                this.articleParent.removeItem(this.codeMenu, true);
            }
            delete this.currentValue;
        }
        delete this.codeMenu;
        Field.prototype.releaseMode.call(this, onDispose);
    },
    initialize: function(){
        this.$rootLinks = this.getReferencePrototype();
    },
    getReferencePrototype: function(){
        return this.$field.$item || this.$field;
    },
    getDataType: function(){
        return this.getReferencePrototype().$properties;
    },
    onInputChange: function(input){
        var value = input.value || "";
        if (value == "") {
            this.notifyFieldChange(null, true);
        }
        else {
            if ((this.currentValue && this.currentValue.$value != value) || !this.currentValue) {
                this.notifyFieldChange({
                    $value: value
                });
            }
        }
    },
    setMenus: function(metaData){
        if (!this.$item.$isFilterMode && !this.$item.$isExpressionChild) {
            if (metaData.$item && ((metaData.$item.$links !== undefined) || (metaData.$item.$actions !== undefined))) {
                this.ensureMenuController().setMenus(metaData.$item);
            }
        }
    },
    render: function(){
        if (this.$isEditMode) {
            var css = ((this.$item.$css) ? this.$item.$css + " " : "");
            var $skinInput = css + this.$skinInput;
            this._input = document.createElement("input");
            this._input.setAttribute("type", "text");
            this.$$input = $(this._input);
            this._input.className = $skinInput;
            
            this.fieldValue.appendChild(this._input);
            if (!this.$item.$inplace && this.$item.$isReferenceTitleVisible !== false) {
                this._refTitle = document.createElement("div");
                this._refTitle.className = $skinInput + "-ref-desc";
            }
            var lookupPicker = this.createPicker("lookup");
            this.$$lookupPicker = $(lookupPicker);
            this.appendToPickerBox(lookupPicker);
            if (this._refTitle) {
                this.fieldValue.appendChild(this._refTitle);
            }
        }
        else {
            this.codeMenu = this.page.loadNewItem($(this.fieldValue), {
                $bind: "$detail",
                $isDescriptionVisible: this.$item.$isReferenceTitleVisible !== false,
                $css: this.$item.$css,
                $category: "link",
                $skin: this.$skin + "-ref-link"
            }, this.boxParent);
        }
    },
    _ensureMenuPickerVisible: function(){
        if (this.menusController) {
            this.menusController.ensurePickerVisible(this.currentValue && this.currentValue.$value && this.currentValue.$value != "");
        }
    },
    setDataValue: function(value){
        var $field = this.getReferencePrototype();
        if (this.currentValue && value) {
            if (this.currentValue.$uuid && this.currentValue.$uuid == value.$uuid) {
                return;
            }
        }
        this.$refValue = {
            $value: ""
        };
        this.$refKey = {
            $value: ""
        };
        this.$refTitle = "";
        if (value) {
            this.$refTitle = value.$title || "";
            this.currentValue = {};
            if (value.$uuid) {
                this.currentValue.$uuid = value.$uuid;
            }
            /*,
             $title: value.$title || ""*/
            var $valueField = $field.$value ? "$value" : "$key";
            /*this.currentValue.$value = value[$valueField] ||
             this.articleParent.parseExpression($field[$valueField], value) ||
             "";*/
            this.articleParent.parseExpression($field[$valueField], value, null, this.$refValue);
            if (this.$refValue.$property) {
                this.currentValue[this.$refValue.$property] = this.$refValue.$value;
            }
            var $keyField = $field.$key ? "$key" : "$value";
            this.articleParent.parseExpression($field[$keyField], value, null, this.$refKey);
            if (this.$refKey.$property) {
                this.currentValue[this.$refKey.$property] = this.$refKey.$value;
            }
            /* this.currentValue.$key = value[$keyField] ||
             this.articleParent.parseExpression($field[$keyField], value) ||
             "";*/
        }
        else {
            /*this.currentValue = {
             $title: "",
             $value: "",
             $key: ""
             };*/
            this.currentValue = {};
        }
        if (this.$isEditMode) {
            this._input.value = this.$refValue.$value || "";
            if (this._refTitle) {
                this._refTitle.textContent = this.$refTitle;
            }
            else {
                this._input.setAttribute("title", this.$refTitle);
            }
        }
        else {
            if (this.$rootLinks.$links) {
                var $details = this.$rootLinks.$links.$details;
                if ($details) {
                    $details.$title = this.$refValue.$value;
                    $details.$description = this.$refTitle;
                    if (value && !value[$keyField]) {
                        value[$keyField] = this.$refValue.$value;
                    }
                    this.codeMenu.setMenu($details, value);
                }
            }
        }
    }
});
