"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function ReferenceField(){
}

exports.ReferenceField = helpers.defineClass(ReferenceField, Field, {
    releaseMode: function(onDispose){
        if (!onDispose) {
            if (this.codeMenu) {
                this.articleParent.removeItem(this.codeMenu, true);
            }
            delete this.currentValue;
        }
        delete this.codeMenu;
        Field.prototype.releaseMode.call(this, onDispose);
    },
    getDataType: function(){
        return this.$field.$properties;
    },
    onInputChange: function($$input){
        var value = $$input.val();
        if (value == "") {
            this.notifyFieldChange(null, true);
        }
        else {
            if ((this.currentValue && this.currentValue.$value != value) || !this.currentValue) {
                this.notifyFieldChange({
                    $value: value
                });
            }
        }
    },
    
    render: function(){
        if (this.$isEditMode) {
            var css = ((this.$item.$css) ? this.$item.$css + " " : "");
            var $skinInput = css + this.$skinInput;
            this._input = document.createElement("input");
            this._input.type = "text";
            this.$$input = $(this._input);
            this._input.className = $skinInput;
            
            this.fieldValue.appendChild(this._input);
            if (!this.$item.$inplace && this.$item.$isReferenceTitleVisible !== false) {
                this._refTitle = document.createElement("div");
                this._refTitle.className = $skinInput + "-ref-desc";
            }
            var lookupPicker = this.createPicker("lookup");
            this.$$lookupPicker = $(lookupPicker);
            this.appendToPickerBox(lookupPicker);
            if (this._refTitle) {
                this.fieldValue.appendChild(this._refTitle);
            }
        }
        else {
            this.codeMenu = document.itemFactory.load($(this.fieldValue), {
                $bind: "$detail",
                $isDescriptionVisible: this.$item.$isReferenceTitleVisible !== false,
                $css: this.$item.$css,
                $category: "link",
                $skin: this.$skin + "-ref-link"
            }, this.boxParent);
        }
    },
    _ensureMenuPickerVisible: function(){
        if (this.menusController) {
            this.menusController.ensurePickerVisible(this.currentValue && this.currentValue.$value && this.currentValue.$value != "");
        }
    },
    setDataValue: function(value){
        if (this.currentValue && value) {
            if (this.currentValue.$uuid && this.currentValue.$uuid == value.$uuid) {
                return;
            }
        }
        if (value) {
            this.currentValue = {
                $uuid: value.$uuid,
                $title: value.$title || ""
            };
            //            var $keyValue = this.$field.$key ? "$key" : "$value";
            //            this.currentValue.$value = value[$keyValue] || this.articleParent.parseExpression(this.$field[$keyValue], value) || "";
            var $valueField = this.$field.$value ? "$value" : "$key";
            this.currentValue.$value = value[$valueField] ||
            this.articleParent.parseExpression(this.$field[$valueField], value) ||
            "";
            var $keyField = this.$field.$key ? "$key" : "$value";
            this.currentValue.$key = value[$keyField] ||
            this.articleParent.parseExpression(this.$field[$keyField], value) ||
            "";
        }
        else {
            this.currentValue = {
                $title: "",
                $value: "",
                $key: ""
            };
        }
        if (this.$isEditMode) {
            //this.$$input.val(this.currentValue.$value);	// old code version
            this.$$input.attr("value", this.currentValue.$value); // hack to make it work on mobile
            if (this._refTitle) {
                this._refTitle.textContent = this.currentValue.$title;
            }
            else {
                this._input.setAttribute("title", this.currentValue.$title);
            }
        }
        else {
            if (this.$field.$links) {
                var $details = this.$field.$links.$details;
                if ($details) {
                    $details.$title = this.currentValue.$value;
                    $details.$description = this.currentValue.$title;
                    //Temp hack
                    /*                    if (value && !value[$keyValue]) {
                     value[$keyValue] = this.currentValue.$value;
                     }*/
                    if (value && !value[$keyField]) {
                        value[$keyField] = this.currentValue.$value;
                    }
                    this.codeMenu.setMenu($details, value);
                }
            }
        }
    }
});
