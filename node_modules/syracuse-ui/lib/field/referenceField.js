"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function ReferenceField() {}

exports.ReferenceField = helpers.defineClass(ReferenceField, Field, {
	applyMetaData: function(metaData, options) {
		Field.prototype.applyMetaData.call(this, metaData, options);
		if (metaData && metaData.$item) {
			Field.prototype.applyMetaData.call(this, metaData.$item, options);
		}
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
		if (state.$isHidden !== undefined && this.articleParent.isSingleRecord) {
			this.articleParent.showRecord(!this.$isHidden);
		}
	},
	_parseSettings: function($property, $default) {
		var setting = this.$reference[$property] = {
			$itemProp: this.$field.$item[$property] ? document.site.expressionMaker.extractCode(this.$field.$item[$property]) : $property
		};
		setting.$prop = this.$field.$item[setting.$itemProp];
		if (setting.$prop) {
			setting.$prop = document.site.expressionMaker.extractCode(setting.$prop);
			if (setting.$prop != this.$item.$bind) {
				var articleParent = this.articleParent;
				while (articleParent) {
					if (!(articleParent.$prototype && articleParent.$prototype.$properties && articleParent.$prototype.$properties[setting.$prop])) {
						articleParent = articleParent.articleParent;
					} else {
						setting.$field = articleParent.$prototype.$properties[setting.$prop];
						articleParent.bind(this, setting.$prop);
						break;
					}
				}
			}
		} else {
			setting.$prop = setting.$itemProp;
		}
	},
	initialize: function() {
		this.$rootLinks = this.$field.$item;
		this.$reference = {};
		this._parseSettings("$title");
		this._parseSettings("$value");
		this.$reference.$keys = {};
		var $keys = this.$field.$item.$key.split("~");
		var expressionMaker = document.site.expressionMaker;
		for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
			var $key = $keys[ii];
			var $itemProp = expressionMaker.extractCode($key);
			var prop = this.$field.$item[$itemProp];
			this.$reference.$keys[$itemProp] = prop ? expressionMaker.extractCode(prop) : $itemProp;
		}
		if (this.$field.$item.$key === "{$uuid}") {
			this._hasUiid = true;
		}
	},
	getDataType: function() {
		return this.$field.$item.$properties || this.$field.$item;
	},
	onInputChange: function(input) {
		var value = input.value || "";
		if (value == "") {
			if (this._refTitle) {
				if (!this._titleField) {
					this._refTitle.textContent = "";
					this._refTitle.style.display = "none";
				}
			} else {
				this.input.title = "";
			}
			this.notifyFieldChange(null);
		} else {
			if ((this.currentValue && this.currentValue.$value != value) || !this.currentValue) {
				var postValue = {};
				postValue[this.$reference.$value.$itemProp] = value;
				this.notifyFieldChange(postValue);
			}
		}
	},
	render: function() {
		if (this.$isEditMode) {
			var css = ((this.$item.$css) ? this.$item.$css + " " : "");
			var $skinInput = css + this.$skinInput;
			this.input = document.createElement("input");
			document.site.setSpecificAttributes(this.input);
			this.input.setAttribute("type", "text");
			this.input.className = $skinInput;

			this.fieldValue.appendChild(this.input);
			if (!this.$item.$inplace && this.$item.$isReferenceTitleVisible !== false) {
				this._refTitle = document.createElement("div");
				this._refTitle.className = $skinInput + "-ref-desc";
			}
			this.addPicker("onLookupClick", "lookup").title = this.localize.fieldLookup;

			if (this._refTitle) {
				if (this._isTitleField) {
					this._titleField = this.page.loadNewItem(this._refTitle, {
						$bind: this.$reference.$title.$prop,
						$isEditMode: false,
						$css: this.$item.$css,
						$skin: this.$skin + "-ref-link"
					}, this.boxParent);
				} else {
					this._refTitle.style.display = "none";
				}
				this.fieldValue.appendChild(this._refTitle);
			}
			if (this.$rootLinks.$links && this.$rootLinks.$links.$tunnel) {
				this.appendTunnelPicker(this.$rootLinks.$links.$tunnel);
			}
		} else {
			// for x-quantity field with unit as a reference
			if (this.$item.$isUnitField) {
				this._unitItem = document.createElement("div");
				this._unitItem.className = "";
				this.fieldValue.appendChild(this._unitItem);
			} else {
				this.codeMenu = this.page.loadNewItem(this.fieldValue, {
					$isDescriptionVisible: this.$item.$isReferenceTitleVisible !== false,
					$subRecordKey: this.$item.$bind,
					$css: this.$item.$css,
					$category: "link",
					$skin: this.$skin + "-ref-link"
				}, this.boxParent);
			}

		}
		this.setDescription(this.$item.$description || this.$field.$item.$description);
		if (this.currentValue) {
			this._renderCurrentValue();
		}
	},
	hasValue: function() {
		return this.currentValue && this.currentValue.$value && this.currentValue.$value != "";
	},
	notifyFieldChange: function(newValue, validated) {
		var self = this;
		self.currentValue = newValue;
		if (validated || self.validate(newValue)) {
			self.page.externalAdapter.onFieldNotifyChange({
				field: self,
				doEvent: function() {
					if (self.currentValue !== null) {
						delete self.currentValue.$serverIndex;
						delete self.currentValue.$isSelected;
					}
					if (self.articleParent.onNotifyDataChange ? self.articleParent.onNotifyDataChange(self, self.currentValue) : true) {
						var postValue;
						var $properties = self.$field.$item.$properties;
						var sendBag = self.page.ensureSendBag();
						if (self.currentValue !== null) {
							var $keys = Object.keys(self.currentValue);
							postValue = {};
							for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
								var $key = $keys[ii];
								if ($key != "$value" && $key != "$etag" && $key != "$properties" && $key != "$url") {
									var copy = true;
									switch ($key) {
										case "$description":
										case "$title":
											if (!self.currentValue[$key]) {
												copy = false;
											}
											break;
										case "$uuid":
											if (!self.$reference.$keys.$uuid) {
												if (!self.articleParent.isRecordArticle && !self.articleParent.isChildFieldRecord) {
													copy = false;
												} else {
													copy = self.articleParent.list.$prototype.$item.$type == "application/x-reference";
												}
											}
											break;
										default:
											var $prop = $properties[$key];
											copy = false;
											if ($prop) {
												if (!$prop.$isReadOnly) {
													if (self.$field.$item[$key]) {
														var parentKey = self.$reference.$keys[$key] || $key;
														if (self.articleParent.$prototype.$properties[parentKey]) {
															self.articleParent.ensureDataSet()[parentKey] = self.currentValue[$key];
															var savedValue = self.parentVariantField ? self.parentVariantField.saveVariantValue(self.currentValue[$key]) : self.currentValue[$key];
															sendBag.saveDataChange(self.page, self.articleParent, parentKey, savedValue);
														} else {
															copy = true;
														}
													} else {
														copy = true;
													}
												}
											}
											break;
									}
									if (copy) {
										postValue[$key] = self.currentValue[$key];
									}
								}
							}
						} else {
							var $prop = $properties[self.$reference.$value.$itemProp];
							if ($prop && !$prop.$isReadOnly) {
								if (self.articleParent.$prototype.$properties[self.$reference.$value.$prop]) {
									self.articleParent.ensureDataSet()[self.$reference.$value.$prop] = null;
									sendBag.saveDataChange(self.page, self.articleParent, self.$reference.$value.$prop, self.parentVariantField ? self.parentVariantField.saveVariantValue(null) : null);
								}
							}
							postValue = null;
						}
						self.articleParent.dataset[self.$item.$bind] = postValue; // adding new value to dataset
						self.page.notifyDataChange(self, postValue);
					}
				}
			});
		}
	},
	getDataValue: function() {
		var value = this.getInputValue();
		if ((this.currentValue && this.currentValue.$value != value) || !this.currentValue) {
			this.currentValue = {};
			this.currentValue[this.$reference.$value.$prop] = value;
		}
		return this.currentValue;
	},
	validateMandatoryValue: function(errors) {
		if (this.$isMandatory) {
			if (this._hasUiid) {
				var $uuid = this.currentValue && this.currentValue.$uuid;
				if ($uuid === null || $uuid === undefined) {
					if (this.page.externalAdapter.notifyFldMandatoryErr()) {
						errors.push(this.localize.fieldIsMandatory);
					}
				}
			} else {
				Field.prototype.validateMandatoryValue.call(this, errors);
			}
		}
	},
	setDataBind: function(value, record, metaData, $bind) {
		Field.prototype.setDataBind.call(this, value, record, metaData, $bind);
		if (value) {
			if (this.articleParent && this.articleParent.isSingleRecord && typeof(value) == "object") {
				this.applyMetaData(value);
			}
		}
	},
	setDataValue: function(value, $bind) {
		var $field = this.$field.$item;
		if (this.currentValue && value) {
			if (this.currentValue.$uuid && this.currentValue.$uuid == value.$uuid) {
				return;
			}
		}
		if (value) {

			var expressionMaker = document.site.expressionMaker;
			this.currentValue = this.currentValue || {};
			if (this._hasUiid) {
				this.currentValue = {
					$description: value.$description || "",
					$title: value.$title || "",
					$uuid: value.$uuid || expressionMaker.parse(this.articleParent, $field.$uuid, value) || ""
				};
				this.currentValue.$value = value.$value || expressionMaker.parse(this.articleParent, $field.$value, value) ||
					"";
				this.currentValue.$key = value.$key || expressionMaker.parse(this.articleParent, $field.$key, value) ||
					"";
			} else {
				if (typeof(value) == 'object') {
					this.currentValue.$description = value.$description || "";
					this.currentValue.$title = value.$title || value[this.$reference.$title.$itemProp];
					if (this.currentValue.$title == null && this.$reference.$title.$field) {
						this.currentValue.$title = expressionMaker.parse(this.articleParent, "{" + this.$reference.$title.$prop + "}");
					}
					if (this.currentValue.$title == null) {
						this.currentValue.$title = "";
					}
					this.currentValue.$value = value[this.$reference.$value.$itemProp] || this.currentValue.$value;
					if (this.currentValue.$value == null && this.$reference.$value.$field) {
						this.currentValue.$value = expressionMaker.parse(this.articleParent, "{" + this.$reference.$value.$prop + "}");
					}
					var $keys = Object.keys(value);
					for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
						var $key = $keys[ii];
						this.currentValue[$key] = value[$key];
					}
					delete this.currentValue.$serverIndex;
					delete this.currentValue.$isSelected;
				} else {
					this.currentValue.$value = value;
				}
			}
		} else {
			this.currentValue = {};
		}
		this._renderCurrentValue();
	},
	_renderCurrentValue: function() {
		if (this.$isEditMode) {
			if (this.input) {
				this.setInputValue(this.currentValue.$value || "");
				var title = this.currentValue.$title || "";
				if ((!title || !this.$item.$inplace) && this.currentValue.$description) {
					title = this.currentValue.$description;
				}
				if (this._refTitle) {
					if (!this._titleField) {
						this._refTitle.textContent = title;
						this._refTitle.style.display = title ? "" : "none";
					}
				} else {
					this.input.title = title;
					// title for singlerecord reference field 
					if (this.boxParent.titleSlot) {
						this.boxParent.titleSlot.textContent = title;
					} else {
						if (this.$item.$isCellChild) {
							this._ensureTitleSlot();
							this.popupTitleBody.textContent = title;
						}
					}
				}
			}
		} else {
			if (this.codeMenu) {
				var $details;
				if (this.$rootLinks.$links) {
					$details = this.$rootLinks.$links.$details;
				}
				if (!$details) {
					$details = {};
				}
				$details.$title = this.currentValue.$value || "";
				$details.$description = this.currentValue.$title || "";
				if ((!$details.$description || !this.$item.$inplace) && this.currentValue.$description) {
					$details.$description = this.currentValue.$description;
				}
				this.valueLength = $details.$title.length + $details.$description.length;
				this.codeMenu.setMenu($details, this.currentValue, this.currentValue);
			} else {
				// for application/x-quantity type
				if (this._unitItem) {
					this._unitItem.textContent = this.currentValue.$symbol;
				}
			}
		}
	},
	_ensureTitleSlot: function() {
		if (!this.popupTitle) {
			this.popupTitle = document.createElement("div");
			this.popupTitle.className = "s-field-ref-title-popup";
			this.popupTitleBody = document.createElement("div");
			this.popupTitleBody.className = "s-field-ref-title-popup-body";
			this.popupTitle.appendChild(this.popupTitleBody);
		}
	},
	onItemInOut: function(onEnter) {
		Field.prototype.onItemInOut.call(this, onEnter);
		if (this.popupTitle) {
			if (onEnter) {
				if (this.popupTitleBody.textContent != "") {
					this.popupTitleInfo = document.site.dialogManager.openPopup(this.page, {
						content: {},
						slot: this.popupTitle,
						position: {
							my: "center bottom",
							at: "center center",
							of: $(this.domItem)
						}
					});
				}
			} else {
				// close on mouse leave, and if mouse is not over popup
				if (this.popupTitleInfo) {
					this.popupTitleInfo.close();
					this.popupTitleInfo = null;
				}
			}
		}
	},
	showDiagnoses: function($diagnoses, options) {
		if (!(this.$item && this.$item.$isUnitField))
			Field.prototype.showDiagnoses.call(this, $diagnoses, options);
	},
	dispose: function() {
		this.currentValue = this.codeMenu = this._titleField = null;
		Field.prototype.dispose.call(this);
		this._unitItem = this.popupTitleBody = this.popupTitle = this.popupTitleInfo = this.$reference = this._refTitle = null;
	}
});