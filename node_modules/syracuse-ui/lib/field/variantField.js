"use strict";
var helpers = require('syracuse-core/lib/helpers');

function VariantField() {}

exports.VariantField = helpers.defineClass(VariantField, null, {
	onInputFocusin: function(input, event) {
		return this.variantItem.onInputFocusin(input, event);
	},
	onInputClick: function(input, event) {
		return this.variantItem.onInputClick(input, event);
	},
	onInputFocusout: function(input, event) {
		return this.variantItem.onInputFocusout(input, event);
	},
	loadBox: function() {
		syra_item.bind(this, this.$item.$bind);
		//return this.variantItem.loadBox();
	},
	render: function() {
		this.variantItem.render();
	},
	onItemInOut: function(onEnter) {
		return this.variantItem.onItemInOut && this.variantItem.onItemInOut(onEnter);
	},
	onFieldInputEvent: function(event, shortcuts) {
		return this.variantItem.onFieldInputEvent(event, shortcuts);
	},
	setFieldWidth: function() {
		if (this.variantItem && this.variantItem.setFieldWidth) {
			this.variantItem.setFieldWidth();
		}
	},
	setDataValue: function(value, metaData, record) {
		if (value && !this.variantItem) {
			//this.$isEditMode = true;
			var keys = Object.keys(value);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				var $key = keys[ii];
				if (this.$field.$variants[$key]) {
					this.$variantItemKey = $key;
					this.$variantItemPrototype = this.$field.$variants[$key];

					var $item = {
						$variantItemKey: this.$variantItemKey,
						$field: this.$variantItemPrototype
					};
					var $props = Object.keys(this.$item);
					for (var mm = 0, kk = $props.length; mm < kk; mm++) {
						$item[$props[mm]] = this.$item[$props[mm]];
					}
					$item.$bind = "$singleField";
					this.variantItem = this.page.loadNewItem(this.layoutSlot, $item, this.boxParent);
					this.variantItem.parentVariantField = this;
					break;
				}
			}
		}
		if (this.variantItem) {
			var variantValue = value ? value[this.$variantItemKey] : undefined;
			var variantMeta = metaData ? metaData[this.$variantItemKey] : undefined;
			this.variantItem.setDataValue(variantValue, variantMeta, record);
		}
	},
	setDirty: function(dirty) {
		this.variantItem.setDirty(dirty);
	},
	getDataValue: function() {
		return this.variantItem.getDataValue();
	},
	getInputValue: function() {
		return this.variantItem.getInputValue();
	},
	setInputValue: function(val) {
		return this.variantItem.setInputValue(val);
	},
	getCaretPosition: function() {
		return this.variantItem.getCaretPosition();
	},
	focus: function(select) {
		return this.variantItem.focus(select);
	},
	isEmpty: function() {
		return this.variantItem.isEmpty();
	},
	showErrors: function(errors, options) {
		this.variantItem.showErrors(errors, options);
	},
	onMenuClick: function(menuItem) {
		return this.variantItem.onMenuClick(menuItem);
	},
	saveVariantValue: function(variantItemValue) {
		var value = {};
		value[this.$variantItemKey] = variantItemValue;
		return value;
	},
	dispose: function() {
		this.variantItem && this.variantItem.dispose();
		syra_site.disposeObject(this);
	}
});