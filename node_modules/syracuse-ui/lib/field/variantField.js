"use strict";
var helpers = require('syracuse-core/lib/helpers');

function VariantField() {}

exports.VariantField = helpers.defineClass(VariantField, null, {
	applyDesignMetaData: function(metaData, designing) {
		return this.variantItem.applyDesignMetaData(metaData, designing);
	},
	onInputFocusin: function(input, event) {
		return this.variantItem.onInputFocusin(input, event);
	},
	onInputClick: function(input, event) {
		return this.variantItem.onInputClick(input, event);
	},
	onInputFocusout: function(input, event) {
		return this.variantItem.onInputFocusout(input, event);
	},
	getArticle: function() {
		return this.variantItem.getArticle();
	},
	loadBox: function($$item) {
		this.articleParent.bind(this, this.$item.$bind);
		//return this.variantItem.loadBox($$item);
	},
	applyFieldStyle: function(metaData) {
		return this.variantItem.applyFieldStyle(metaData);
	},
	releaseMode: function(onDispose) {
		return this.variantItem.releaseMode(onDispose);
	},
	render: function() {
		this.variantItem.render();
	},
	removeFromPickerBox: function(picker) {
		this.variantItem.removeFromPickerBox(picker);
	},
	clickPicker: function(pickerType) {
		this.variantItem.clickPicker(pickerType);
	},
	toggleBoxPicker: function() {
		this.variantItem.toggleBoxPicker();
	},
	appendToPickerBox: function(picker) {
		this.variantItem.appendToPickerBox(picker);
	},
	doClickPicker: function() {
		this.variantItem.doClickPicker();
	},
	highlightPickers: function(hightLight) {
		this.variantItem.highlightPickers(hightLight);
	},
	onFieldMouseEvent: function(event) {
		return this.variantItem.onFieldMouseEvent(event);
	},
	onFieldInputEvent: function(event, shortcuts) {
		return this.variantItem.onFieldInputEvent(event, shortcuts);
	},
	onClickPicker: function(btn) {
		return this.variantItem.onClickPicker(btn);
	},
	getDefaultTitle: function() {
		return this.variantItem.getDefaultTitle();
	},
	getTitle: function() {
		return this.variantItem.getTitle();
	},
	setTitle: function($title) {
		this.variantItem.setTitle($title);
	},
	appendTitle: function() {
		this.variantItem.appendTitle();
	},
	setHelp: function($help) {
		this.variantItem.setHelp($help);
	},
	setDescription: function($description) {
		this.variantItem.setDescription($description);
	},
	setState: function(state) {
		this.variantItem.setState(state);
	},
	setAdvancedState: function($isAdvanced, designing) {
		this.variantItem.setAdvancedState($isAdvanced, designing);
	},
	showAdvancedState: function(show) {
		this.variantItem.setAdvancedState(show);
	},
	showField: function(show) {
		this.variantItem.showField(show);
	},
	setFieldWidth: function() {
		if (this.variantItem) {
			this.variantItem.setFieldWidth();
		}
	},
	setDataBind: function(value, record, metaData, $bind) {
		if (value && !this.variantItem) {
			//this.$isEditMode = true;
			var keys = Object.keys(value);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				var $key = keys[ii];
				if (this.$field.$variants[$key]) {
					this.$variantItemKey = $key;
					this.$variantItemPrototype = this.$field.$variants[$key];
					this.variantItem = this.page.loadNewItem(this.layoutSlot, {
						$isTitleRowHidden: true,
						$bind: "$singleField",
						$isEditMode: this.$isEditMode,
						$inplace: true,
						$isDiagnoseInline: true,
						$field: this.$variantItemPrototype
					}, this.boxParent);
					break;
				}
			}
		}
		if (this.variantItem) {
			var variantValue = value ? value[this.$variantItemKey] : undefined;
			var variantMeta = metaData ? metaData[this.$variantItemKey] : undefined;
			this.variantItem.setDataBind(variantValue, record, variantMeta, $bind);
		}
	},
	setDataValue: function(value, $bind) {
		this.variantItem.setDataValue(value, $bind);
	},
	setDirty: function(dirty) {
		this.variantItem.setDirty(dirty);
	},
	saveClientValue: function() {
		return this.variantItem.saveClientValue();
	},
	getDataValue: function() {
		return this.variantItem.getDataValue();
	},
	getInputValue: function() {
		return this.variantItem.getInputValue();
	},
	setInputValue: function(val) {
		return this.variantItem.setInputValue(val);
	},
	getCaretPosition: function() {
		return this.variantItem.getCaretPosition();
	},
	applyMetaData: function(metaData, options) {
		this.variantItem.applyMetaData(metaData, options);
	},
	focus: function(select) {
		return this.variantItem.focus(select);
	},
	isEmpty: function() {
		return this.variantItem.isEmpty();
	},
	showErrors: function(errors, options) {
		this.variantItem.showErrors(errors, options);
	},
	showDiagnoses: function($diagnoses, options) {
		this.variantItem.showDiagnoses($diagnoses, options);
	},
	validate: function(newValue, errors) {
		return this.variantItem.validate(newValue, errors);
	},
	onInputValidate: function(event, notify) {
		return this.variantItem.onInputValidate(event, notify);
	},
	onInputChange: function(input, event) {
		return this.variantItem.onInputChange(input, event);
	},
	notifyFieldChange: function(newValue, validated) {
		this.variantItem.notifyFieldChange(newValue, validated);
	},
	toggleEditMode: function($isEditMode) {
		this.variantItem.toggleEditMode($isEditMode);
	},
	setMenus: function(metaData) {
		this.variantItem.setMenus(metaData);
	},
	setMenusBox: function(metaData) {
		this.variantItem.setMenusBox(metaData);
	},
	filterMenu: function($bind) {
		return this.variantItem.filterMenu($bind);
	},
	_createMenusBox: function() {
		return this.variantItem._createMenusBox();
	},
	ensureLayoutMode: function() {
		this.variantItem.ensureLayoutMode();
	},
	onMenuClick: function(menuItem) {
		return this.variantItem.onMenuClick(menuItem);
	},
	applyShortCuts: function(shortcuts, event) {
		return this.variantItem.applyShortCuts(shortcuts, event);
	},
	dispose: function() {
		if (this.variantItem) {
			this.variantItem.dispose();
			this.variantItem = null;
		}
		this.localize = this.$rootLinks = this.rowSeparator = null;
		this.diagSeverities = this.authoringNode = null;
		this.boxPickers = this.domValueSlot = null;
		this.$field = this.$item = this.boxParent = this.tunnelPicker = this._mandatoryFlag = null;
		this.layoutSlot = this.$$item = this._domItem = this._dataValue = null;
		this._core = this.$$input = this._input = this.currentValue = this.menusBox = this.popupDiagnose = this.popupDiagnoseBody = this.popupDiagnoseDiag = null;
		this.layoutParent = this.boxParent = this.articleParent = this.page = null;
	}
});