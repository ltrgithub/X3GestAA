"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function IconField(){
}

exports.IconField = helpers.defineClass(IconField, Field, {
    setDataValue: function(value){
        this.currentValue = value;
        if (value != null) {
            var $path = document.site.$item.$iconPath + (this.$icon.$path || "x3icons/");
            this.icon.style.backgroundImage = "url('" + $path + this.currentValue + ".png')";
        }
        else {
            this.icon.style.backgroundImage = "";
        }
    },
    getDataValue: function(){
        return this.currentValue || "";
    },
    loadBox: function($$item){
        this.$item.$isEditMode = this.$item.$isEditMode || false;
        if (this.$item.$isTitleHidden == undefined) {
            this.$item.$isTitleHidden = true;
        }
        Field.prototype.loadBox.call(this, $$item);
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        if (state.$isDisabled !== undefined) {
            document.site.disableItem(this.icon, this.$isDisabled);
        }
    },
    focus: function(){
        if (this.iconLink && !this.$isHidden && !this.$isDisabled) {
            this.icon.focus();
            return true;
        }
        return false;
    },
    setMenus: function(metaData){
        if (metaData.$links !== undefined) {
            this._renderIcon(metaData);
        }
    },
    onInputClick: function($$target, event){
        if (this.iconLink && !this.$isDisabled) {
            if (this.articleParent.onIconFieldClick) {
                this.articleParent.onIconFieldClick(this);
            }
        }
    },
    _renderIcon: function(metaData){
        var oldIcon;
        if (metaData.$links != this.$links) {
            oldIcon = this.icon;
            if (this.iconLink) {
                delete this.iconLink;
            }
        }
        else {
            if (this.icon) {
                return;
            }
        }
        if (this.$links = metaData.$links) {
            this.icon = document.createElement("a");
            this.icon.setAttribute("href", "#");
            this.icon.className = this.$skin + "-value-icon s-icon-link";
            this.iconLink = this.icon;
        }
        else {
            this.icon = document.createElement("div");
            this.icon.className = this.$skin + "-value-icon";
        }
        this.icon.style.width = this.$icon.$width || "16px";
        this.icon.style.height = this.$icon.$height || "16px";
        if (this.$isDisabled !== undefined) {
            document.site.disableItem(this.icon, this.$isDisabled);
        }
        if (this.currentValue != null) {
            this.setDataValue(this.currentValue);
        }
        document.site.toggleClass(this.fieldValue, this.$skin + "-icon", true);
        document.site.toggleClass(this.fieldValue, "s-icon-link", this.iconLink != null);
        if (oldIcon) {
            this.fieldValue.replaceChild(this.icon, oldIcon);
        }
        else {
            this.fieldValue.appendChild(this.icon);
        }
    },
    render: function(){
        this.$icon = this.$item.$icon || {};
        this._renderIcon(this.$field);
    },
    releaseMode: function(onDispose){
        Field.prototype.releaseMode.call(this, onDispose);
        delete this.icon;
    }
});
