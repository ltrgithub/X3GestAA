"use strict";
var helpers = require('syracuse-core/lib/helpers');

exports.checkListFilterCapabilities = function(list) {
	var hasFilterCapability;
	var $masterBinds = list.page.vignetteField && list.page.vignetteField.$masterBinds;
	$masterBinds = $masterBinds ? Object.keys($masterBinds) : [];

	var $binds = Object.keys(list.$fields);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $field = list.$fields[$binds[ii]];
		if (!$field.$isExcluded) {
			$field.$hasFilterCapability = $field.$capabilities && ($field.$capabilities.indexOf("filter") >= 0);
			if ($field.$hasFilterCapability) {
				if ($masterBinds.indexOf($binds[ii]) >= 0) {
					$field.$hasFilterCapability = false;
					var $capabilities = $field.$capabilities.split(",");
					var found = $capabilities.indexOf("filter");
					found >= 0 && $capabilities.splice(found, 1);
					found = $capabilities.indexOf("filter_upper");
					found >= 0 && $capabilities.splice(found, 1);
					$field.$capabilities = $capabilities.join(",");
					continue;
				}
				hasFilterCapability = true;
			}
		}
	}
	return hasFilterCapability;
};


exports.injectTestLinks = function(page) {
	if (page.openerUrlSegments && page.openerUrlSegments.representationRoot == "employee") {
		switch (page.openerUrlSegments.$facet) {
			case "$edit":
			case "$details":
				var $links = page.$prototype.$links = page.$prototype.$links || {};
				$links.inlineEmployees = {
					$method: "GET",
					$target: "embedded",
					$title: "employees",
					$type: "application/json;vnd.sage=syracuse",
					$url: "/sdata/sprint1/settings/sprint1/employees?representation=employee.$query&where=(firstName%20like%20%27%25{firstName}%25%27)"
				};
				$links.inlineSage = {
					$method: "GET",
					$target: "embedded",
					$title: "Sage web",
					$type: "html",
					$url: "http://www.sage.com"
				};
				break;
			case "$query":
				page.$prototype.$properties.$resources.$capabilities = "quickedit";
				break;
		}
	}
};

exports.addEmbeddedLink = function(article, $bind, $menu) {
	if (article.isDesktopPage && article.$prototype.$properties) {
		var $vignette = article.$prototype.$properties[$bind];
		$menu = helpers.object.clone($menu, true);
		if ($menu.$url) {
			_parseMenu(article, $menu);
		}
		if (!$vignette) {
			$vignette = article.$prototype.$properties[$bind] = {
				$type: "application/x-vignette",
				$title: $menu.$title,
				$location: $menu
			};
		} else {
			syra_site.deltaManager.applyObjectDelta(article.page, $vignette.$location, $menu);
		}
		var unknowField = article.unknowFields && article.unknowFields[$bind];
		if (unknowField) {
			var layoutParent = unknowField.layoutParent;
			layoutParent.isItemRegisterDisable = true;
			var index = layoutParent.items.indexOf(unknowField);
			if (index >= 0) {
				layoutParent.items.splice(index, 1);
			}
			article.removeItem(unknowField, true);
			layoutParent.loadChildItem(null, layoutParent.$layout.$items[index], index);
			layoutParent.isItemRegisterDisable = false;
		} else {
			if (!article.boundFields[$bind] && article.boundFields[$bind][0]) {
				article.layoutContent.loadChildItem(null, {
					$bind: $bind
				});
			}
		}
		return true;
	}
};

function _parseMenu(article, $menu) {
	var matches = $menu.$url.match(/(\{.*?\})/g);
	if (matches && matches.length) {
		for (var ii = 0, jj = matches.length; ii < jj; ii++) {
			var match = matches[ii];
			var $bind = match.substr(1, match.length - 2);
			if (article.$prototype.$properties[$bind]) {
				($menu.$masterBinds = $menu.$masterBinds || {})[$bind] = undefined;
				$menu.$url = $menu.$url.replace(match, "syraMasterKey" + match.substr(1));
			}
		}
	}
	$menu.$url = syra_site.expressionMaker.parseUrl(article, $menu.$url);
	var seg = syra_site.urlMaker.parse($menu.$url, true);
	if (!seg.isSyracuse) { //Wait futur updates of vignetteField that will manage it internaly
		$menu.$type = "html";
	}
	if ($menu.$masterBinds) {
		//restore url
		$menu.$url = $menu.$url.replace(/syraMasterKey/g, "{");
	}
}




exports.hasMasterChildRelation = function(field) {
	var $location = field.$field.$location;
	if ($location && $location.$masterBinds) {
		field.$masterBinds = $location.$masterBinds;
		(field.articleParent.masterChildRelations = field.articleParent.masterChildRelations || []).push(field);
		return true;
	}
	return false;
};


function _refreshChildRelation(article, vignetteField) {
	var refresh;
	var keys = Object.keys(vignetteField.$masterBinds);
	for (var mm = 0, kk = keys.length; mm < kk; mm++) {
		var key = keys[mm];
		if (refresh || (article.dataset[key] != vignetteField.$masterBinds[key])) {
			vignetteField.$masterBinds[key] = article.dataset[key];
			refresh = true;
		}
	}
	if (refresh) {
		vignetteField.$url = syra_site.expressionMaker.parseUrl(vignetteField.articleParent, vignetteField.$field.$location.$url, vignetteField.articleParent.dataset, vignetteField.$masterBinds);
		if (!vignetteField.vignette) {
			vignetteField.loadContentRepresentation();
		} else {
			vignetteField.renderLayoutContent(vignetteField.$url);
		}
	}
}

exports.applyChangeToDetailRelations = function(article) {
	if (article.masterChildRelations && article.masterChildRelations.length) {
		for (var ii = 0, jj = article.masterChildRelations.length; ii < jj; ii++) {
			var relation = article.masterChildRelations[ii];
			_refreshChildRelation(article, article.masterChildRelations[ii]);
		}
	}
};

exports.disposeMasterChildRelation = function(field) {
	field.$masterBinds = null;
	var relations = field.articleParent && field.articleParent.masterChildRelations;
	if (relations) {
		var found = relations.indexOf(field);
		relations.splice(found, 1);
	}
};