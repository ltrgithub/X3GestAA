"use strict";
var helpers = require('syracuse-core/lib/helpers');

exports.injectTestLinks = function(page) {
	if (page.openerUrlSegments && page.openerUrlSegments.representationRoot == "employee") {
		switch (page.openerUrlSegments.$facet) {
			case "$edit":
			case "$details":
				var $links = page.$prototype.$links = page.$prototype.$links || {};
				$links.inlineEmployees = {
					$method: "GET",
					$target: "embedded",
					$title: "employees",
					$type: "application/json;vnd.sage=syracuse",
					$url: "/sdata/sprint1/settings/sprint1/employees?representation=employee.$query&where=(firstName%20like%20%27%25{firstName}%25%27)"
				};
				/*$links.inlineSage = {
             $method: "GET",
             $target: "embedded",
             $title: "Sage web",
             $type: "html",
             $url: "http://www.sage.com"
             };*/
				break;
			case "$query":
				page.$prototype.$properties.$resources.$capabilities = "quickedit";
				break;
		}
	}
};

exports.addEmbeddedLink = function(article, $bind, $menu) {
	if (article.isDesktopPage) {
		if (article.$prototype.$properties) {
			var $vignette = article.$prototype.$properties[$bind];
			$menu = helpers.object.clone($menu, true);
			if ($menu.$url) {
				_parseMenu(article, $menu);
			}
			if (!$vignette) {
				$vignette = article.$prototype.$properties[$bind] = {
					$type: "application/x-vignette",
					$title: $menu.$title,
					$location: $menu
				};
			} else {
				syra_site.deltaManager.applyObjectDelta(article.page, $vignette.$location, $menu);
			}
			article.layoutContent.loadChildItem(null, {
				$bind: $bind
			});
			return true;
		}
	}
};

function _parseMenu(article, $menu) {
	var keys = $menu.$url.match(/(\{.*?\})/g);
	if (keys.length) {
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			var key = keys[ii];
			var $bind = key.substr(1, key.length - 2);
			if (article.$prototype.$properties[$bind]) {
				($menu.$masterKeys = $menu.$masterKeys || {})[$bind] = undefined;
				$menu.$url = $menu.$url.replace(key, "syraMasterKey" + key.substr(1));
			}
		}
	}
	$menu.$url = syra_site.expressionMaker.parseUrl(article, $menu.$url);
	var seg = syra_site.urlMaker.parse($menu.$url, true);
	if (!seg.isSyracuse) {
		$menu.$type = "html";
	}
	if ($menu.$masterKeys) {
		//restore url
		$menu.$url = $menu.$url.replace(/syraMasterKey/g, "{");
	}
}




exports.hasMasterChildRelation = function(field) {
	var $location = field.$field.$location;
	if ($location && $location.$masterKeys) {
		field.masterKeys = $location.$masterKeys;
		(field.articleParent.masterChildRelations = field.articleParent.masterChildRelations || []).push(field);
		return true;
	}
	return false;
};


function _refreshChildRelation(vignetteField) {
	vignetteField.$url = syra_site.expressionMaker.parseUrl(vignetteField.articleParent, vignetteField.$field.$location.$url, vignetteField.articleParent.dataset, vignetteField.masterKeys);
	if (!vignetteField.vignette) {
		vignetteField.loadContentRepresentation();
	} else {
		vignetteField.renderLayoutContent(vignetteField.$url);
	}
}

exports.applyChangeToDetailRelations = function(article) {
	if (article.masterChildRelations && article.masterChildRelations.length) {
		for (var ii = 0, jj = article.masterChildRelations.length; ii < jj; ii++) {
			var relation = article.masterChildRelations[ii];
			var refresh = false;
			var keys = Object.keys(relation.masterKeys);
			for (var mm = 0, kk = keys.length; mm < kk; mm++) {
				var key = keys[mm];
				if (article.dataset[key] != relation.masterKeys[key]) {
					relation.masterKeys[key] = article.dataset[key];
					refresh = true;
				}
			}
			refresh && _refreshChildRelation(relation);
		}
	}
};

exports.disposeMasterChildRelation = function(field) {
	field.masterKeys = null;
	var relations = field.articleParent && field.articleParent.masterChildRelations;
	if (relations) {
		var found = relations.indexOf(field);
		relations.splice(found, 1);
	}
};