"use strict";

var locale = require("syracuse-core/lib/locale");
/*
 *  provide a simple function to format a value
 *
 *  raise a exception if the format is not correct
 */

exports.format = function(value, format, type) {
	if (!value ||  !format ||  !type) { // no value or no format we do nothin
		return value;
	}

	var resValue = "";
	if (type === "application/x-string") { // string treatment
		console.log("value " + value);

		var res = format.match(/K?(\w*):?(.*)/);
		console.log("res " + res);

		if (res.length > 2) {
			var idx = 0;
			var stop = false;
			var len;
			var totalLen = 0;
			var elems = res[2].match(/(\d*.)/g);
			console.log("elems " + elems);

			for (var i = 0; elems && i < elems.length; i++) {

				// get the digit if exists and the character part
				var elem = elems[i] && elems[i].match(/(\d*)(.)/);
				console.log("elem " + elem);

				if (elem.length === 3) {

					len = parseInt(elem[1], 10);

					totalLen += len;

					var end = len + idx > value.length ? idx + value.length : idx + len;

					console.log("idx " + idx);
					console.log("end " + end);
					var prev = value.substring(idx, end);

					console.log("prev " + prev);
					switch (elem[2]) {
						case 'A':
							if (/[^A-Za-z]/.test(prev)) { // if we find any character that is not a letter
								throw new Error(locale.format(module, "badFormat"));
							}
						case 'B':
							if (/[^A-Za-z0-9]/.test(prev)) { // if we find any character that is not a letter or digit
								throw new Error(locale.format(module, "badFormat"));
							}
							resValue += prev.toUpperCase();
							break;
						case 'a':
							if (/[^A-Za-z]/.test(prev)) { // if we find any character that is not a letter
								throw new Error(locale.format(module, "badFormat"));
							}
						case 'b':
							if (/[^A-Za-z0-9]/.test(prev)) { // if we find any character that is not a letter or digit
								throw new Error(locale.format(module, "badFormat"));
							}
							resValue += prev.toLowerCase();
							break;
						default:
							resValue += prev;
							// nothin
					}
					idx = end;

				}
			}

			if (value.length > totalLen) { // value length is greater than format length
				throw new Error(locale.format(module, "valueTooLong")); // should never happen because $maxLength should be coherent with the format
			}

		}
	}


	return resValue;
};