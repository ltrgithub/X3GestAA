"use strict";
var formatApi = require('syracuse-ui/lib/field/formatApi');
var _format = require('syracuse-ui/lib/field/helpers/format');
//syra_fields.embedded
exports.advancedState = require('syracuse-ui/lib/field/helpers/advancedState');
exports.embedded = require('syracuse-ui/lib/field/helpers/embedded');
exports.format = _format.format;

var _smartWidth = {
	charWidth: 8,
	small: 15, //10
	medium: 30, //20
	large: 50
};

var _widths = {
	"application/x-icon": {
		$width: 50
	},
	"application/x-date": {
		$maxLength: 10
	},
	"application/x-time": {
		$maxLength: 8
	},
	"application/x-datetime": {
		$maxLength: 20
	},
	"application/x-binary": {
		$width: 30
	},
	"image": {
		$width: 40
	}
};

exports.getCardFieldWidth = function($field) {
	var $width = ($field.$type && _widths[$field.$type]) || {};
	var widthValue = $width.$width;
	var $maxLength = 0;
	if ($field.$precision) {
		$maxLength = $field.$precision + 2 * ($field.$precision / 3); //separator
	}
	if ($field.$scale) {
		$maxLength += $field.$scale + 1; //for separator
	}
	if (!$maxLength) {
		$maxLength = $field.$displayLength || $field.$maxLength || $width.$maxLength;
	}
	$maxLength = $maxLength || _smartWidth.large;
	if ($maxLength <= _smartWidth.small) {
		$maxLength = _smartWidth.small;
	} else {
		if ($maxLength <= _smartWidth.medium) {
			$maxLength = _smartWidth.medium;
		} else {
			$maxLength = _smartWidth.large;
		}
	}
	widthValue = (_smartWidth.charWidth * $maxLength);
	return widthValue;
};


/************************************   Custom Style  ***********************************/
function _updateFusionStyle(field, saveKey, target, newStyle) {
	var previous = field[saveKey];
	if (previous) {
		//clean
		var domStyle = target.getAttribute("style");
		var domStyleParts = domStyle.split(";");
		for (var mm = 0, kk = domStyleParts.length; mm < kk; mm++) {
			domStyleParts[mm] = domStyleParts[mm].trim();
		}
		var previousParts = previous.split(";");
		for (var ii = 0, jj = previousParts.length; ii < jj; ii++) {
			if (previousParts[ii]) {
				var parts = previousParts[ii].split(":");
				if (parts.length > 0) {
					parts[0] = parts[0].trim();
					for (var mm = 0, kk = domStyleParts.length; mm < kk; mm++) {
						if (domStyleParts[mm].indexOf(parts[0]) == 0) {
							domStyleParts.splice(mm, 1);
							break;
						}
					}
				}
			}
		}
		target.setAttribute("style", domStyleParts.join(";"));
	}
	if (newStyle) {
		field[saveKey] = newStyle;
		target.setAttribute("style", (target.getAttribute("style") || "") + ";" + newStyle);
	} else {
		delete field[saveKey];
	}
}

exports.applyCustomStyle = function(field, metaData) {
	if (field.variantItem) {
		exports.applyCustomStyle(field.variantItem, metaData);
	} else {
		var target;
		var newStyle = metaData.$fieldStyle || metaData.$valueStyle;
		if (newStyle !== undefined) {
			target = field.customStyleTarget || (field.input ? field.input : field._dataValue);
			if (field.page.isFusionPage) {
				_updateFusionStyle(field, "$valueStyle", target, newStyle);
			} else {
				if (field.$valueStyle) {
					syra_dom.toggleClass(target, field.$valueStyle, false);
				}
				syra_dom.toggleClass(target, (field.$valueStyle = (newStyle || "").replace("cst_sty_", "s-cst-sty-")), true);
			}
		}
		newStyle = metaData.$fieldStyle || metaData.$titleStyle;
		if (field.domTitle && newStyle !== undefined) {
			if (field.page.isFusionPage) {
				_updateFusionStyle(field, "$titleStyle", field.domTitle, newStyle);
			} else {
				if (field.$titleStyle) {
					syra_dom.toggleClass(field.domTitle, field.$titleStyle, false);
				}
				syra_dom.toggleClass(field.domTitle, (field.$titleStyle = (newStyle || "").replace("cst_sty_", "s-cst-sty-")), true);
			}
		}
	}
};

exports.getTypeFieldIcon = function($type) {
	var type = $type.replace("application/x-", "");
	switch (type) {
		case "decimal":
		case "integer":
		case "real":
		case "quantity":
			type = "number";
			break;
		case "cube":
			type = "graph";
			break;
		case "icon":
		case "binary":
		case "document":
			type = "image";
			break;
		default:
			if (type.indexOf("text/") >= 0) {
				type = "text";
			}
			break;
	}
	type = "field_" + type;
	if (!syra_menus.fontIcons[type]) {
		type = "field_string";
	}
	return type;
};

exports.checkbox = {
	render: function(item, id, css, isRadio) {
		var box = {
			slot: document.createElement("div"),
			icon: document.createElement("label"),
			input: document.createElement("input")
		};
		box.slot.className = css + " s-checkbox-slot";
		box.icon.setAttribute("for", id);
		box.icon.className = css + " s-checkbox-icon s-fonticon-btn";
		var slot = document.createElement("div");
		slot.className = css + " s-checkbox-input-slot";
		box.input = document.createElement("input");
		box.input.id = id;
		box.input.className = css + " s-checkbox-input";
		box.icon.syraIsRadio = isRadio;
		if (isRadio) {
			box.icon.innerHTML = syra_menus.fontIcons.field_radio_off;
			box.input.setAttribute("type", "checkbox");
		} else {
			box.icon.innerHTML = syra_menus.fontIcons.field_checkbox_off;
			box.input.setAttribute("type", "checkbox");
		}
		box.slot.appendChild(box.icon);
		slot.appendChild(box.input);
		box.slot.appendChild(slot);
		item.checkBox = box;
	},
	setIcon: function(item, isChecked) {
		var icon = item.checkBox.icon;
		if (icon.syraIsChecked !== isChecked) {
			icon.syraIsChecked = isChecked;
			if (icon.syraIsRadio) {
				icon.innerHTML = isChecked ? syra_menus.fontIcons.field_radio_on : syra_menus.fontIcons.field_radio_off;
			} else {
				icon.innerHTML = isChecked ? syra_menus.fontIcons.field_checkbox_on : syra_menus.fontIcons.field_checkbox_off;
			}
			item.checkBox.input.setAttribute("data-s-selected", isChecked);
		}
	},
	setValue: function(item, isChecked) {
		this.setIcon(item, isChecked);
		item.checkBox.input.checked = isChecked;
	}
};

//var _pattern = /\d{4}-\d{2}-\d{2}[ T]\d{2}:\d{2}:\d{2}(Z|\s*GMT)/;
var _pattern = /(\d{4}-\d{2}-\d{2})[ T](\d{2}:\d{2}:\d{2})(Z|\s*GMT)/;
exports.utcTip = {
	emphasis: function(value) {
		/*if (value) {
         value += " 2014-10-28 13:18:21 GMT";
         }*/
		if (value && value.length >= 20) {
			if (_pattern.test(value)) {
				var found = value.match(_pattern);
				for (var ii = 0, jj = found.length; ii < jj; ii++) {
					if (found[ii].length > 10) {
						value = value.replace(found[ii], "<em class='s-dt-utc'>" + found[ii] + "</em>");
					}
				}
				return value;
			}
		}
	},
	onInout: function(onEnter, event, target) {
		var className = target && target.className;
		var isUTC = className && className.indexOf && className.indexOf("s-dt-utc") >= 0;
		if (isUTC) {
			var field = syra_store.findField(target);
			if (field && onEnter) {
				syra_tip.titleTip.show(formatApi.utcToLocal(target.textContent), target);
			}
		}
	}
};

exports.onFieldFocusChange = function(field, isIn, event) {
	if (isIn) {
		field.page.focusField = field;
		field.articleParent.onFieldFocusChange && field.articleParent.onFieldFocusChange(field, true);
		exports.ensureRecordUniqueSelection(field);
		syra_site.closePopups(field, event);
	} else {
		if (field.page && field.page.focusField == field) {
			field.articleParent.onFieldFocusChange && field.articleParent.onFieldFocusChange(field, false);
			field.page.focusField = null;
		}
	}
};

exports.ensureRecordUniqueSelection = function(list, onSelect) {
	var record;
	while (list && !list.isArrayField) {
		if (list.isRecordArticle) {
			record = list;
		}
		list = list.articleParent;
	}
	if (list && !list.isArrayField) {
		list = null;
	}
	if (syra_site._selectedList && syra_site._selectedList.selector) {
		if (list != syra_site._selectedList || (record && !record.$isSelected)) { // && !syra_site._selectedList.selector.isMulti)) {
			syra_site._selectedList.selector.unSelectAll();
		}
	}
	if (onSelect) {
		syra_site._selectedList = list;
	}
};


exports.addDetailLink = function(field, value, $detailsLink) {
	if (!field.$isDetailLinkDisabled) {
		if (field.builder) {
			value = (field.$selectedEnum && field.$selectedEnum.$title) || value;
		}
		var link = field.picker_menus && field.picker_menus.link;
		syra_dom.removeChild(link);
		syra_dom.empty(field._dataValue);
		var mn = field.page.loadNewItem(field._dataValue, {
			$bind: "$detail",
			$title: $detailsLink.$title = value + "",
			$category: "link",
			$skin: field.$skin + "-link",
			$format: field.$field.$format
		}, field.boxParent);
		mn.detailFieldId = field.id;
		mn.setMenu($detailsLink);
		link && field._dataValue.appendChild(link);
	}
};