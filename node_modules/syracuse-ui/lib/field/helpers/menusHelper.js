"use strict";

function _isPopupMenuItem(field, $bind, $link) {
	if (field.isPopupMenuItem && !field.isPopupMenuItem($bind, $link)) {
		return false;
	}
	switch ($bind) {
		case "$suggest":
			field._isAutoComplete = true;
			return false;
		case "$details":
			if (!field.$isDetailLinkDisabled) {
				return false;
			}
			break;
		case "$localize":
			if (field.$item.$useLocalizePicker) {
				$link.$isHidden = true;
			}
			break;
		case "$tunnel":
			if (field.$item.$inplace) {
				$link.$title = syra_local.fieldTunnel;
			}
			return field.$item.$inplace && !field.$item.$isFilterMode;
		case "$lookup":
		case "$select":
			return false;
	}
	return true;
}

function _applyMenusChange(field, $deltaMenu, $isAction) {
	var binds = Object.keys($deltaMenu);
	for (var ii = 0, jj = binds.length; ii < jj; ii++) {
		var $bind = binds[ii];
		var $menu = $deltaMenu[$bind];
		if (_isPopupMenuItem(field, $bind, $menu)) {
			if ($menu === null) {
				delete field.$menus && field.$menus[$bind];
			} else {
				if (!field.$menus) {
					field.$menus = {};
				}
				if (field.$menus[$bind]) {
					syra_site.deltaManager.applyObjectDelta(field.page, field.$menus[$bind], $menu);
				} else {
					$menu.$isAction = $isAction;
					$menu.$sourceBind = $bind;
					$menu.$bind = field.id + "-" + $bind;
					field.$menus[$bind] = $menu;
				}
			}
		}
	}
}

exports.clickMenu = function(field, $bind) {
	if (field.menusBox) {
		field.articleParent.clickMenu(field.menusBox.id + "-" + $bind);
	}
};

exports.setMenus = function(field, metaData) {
	if (field.variantItem) {
		field = field.variantItem;
	}
	if (field.applyActionLinkChange) {
		if (metaData) {
			field = field.isChildField ? field.record : field;
			field.applyActionLinkChange({
				$links: metaData.$links,
				$actions: metaData.$actions
			});
		}
		return;
	}
	if (field.setMenus) {
		field.setMenus(metaData);
		return;
	}
	// in order not to show menu menu picker for unit ref field        
	if (!field.$item.$isMenusHidden && (!field.$item.$isUnitField || field.$item.$isEditMode)) {
		var $menus = metaData.$item || metaData;
		if ($menus.$links !== undefined || $menus.$actions !== undefined) {
			if ($menus.$links === null) {
				exports.showPicker(field, false);
			} else {
				$menus.$links && _applyMenusChange(field, $menus.$links);
				$menus.$actions && _applyMenusChange(field, $menus.$actions, true);
				if (!field.menusPicker && field.$menus && Object.keys(field.$menus).length) {
					field.menusPicker = field.pickersHelper.add(field, "onMenuPickerClick", "menus");
				}
			}
		}
	}
};

exports.applyState = function(field) {
	if (field.$menus && field.$menus.$localize) {
		field.$menus.$localize.$isHidden = field.$isReadOnly == true;
	}
};

exports.onMenuPickerClick = function(field, picker) {
	if (!field.authoringNode) {
		field.page.externalAdapter.onFieldClickPicker({
			field: field,
			pickerType: "menus",
			doEvent: function(options) {
				if (!field._popupMenus) {
					var $item = {
						$isOwner: true,
						$noText: true,
						$title: syra_local.fieldActions,
						$clientId: field.id + "-menu-picker",
						$skin: field.$skin + "-menus s-field-context-menus",
						$itemSkin: "s-list-menus-record-menus-link",
						$category: "menus",
						$layout: {
							$items: [{
								$category: "link",
								$bind: field.id + "-$localize",
								$sourceBind: "$localize",
								$icon: {
									$mode: "iconText",
									$path: "field/s-field-"
								}
							}, {
								$category: "link",
								$bind: field.id + "-$tunnel",
								$sourceBind: "$tunnel",
								$icon: {
									$mode: "iconText",
									$path: "field/s-field-"
								}
							}]
						}
					};
					field._popupMenusSlot = document.createElement("div");
					field.menusBox = field.page.loadNewItem(field._popupMenusSlot, $item, field.articleParent);
					field.menusBox.contextField = field;
					var binds = Object.keys(field.$menus);
					for (var ii = 0, jj = binds.length; ii < jj; ii++) {
						var $menu = field.$menus[binds[ii]];
						var menuItem = field.menusBox._loadNewMenuItem($menu.$bind, $menu.$isAction);
						field.articleParent.$menus[$menu.$bind] = $menu;
						menuItem.setMenu($menu, field.articleParent.dataset);
					}
					syra_site.dom.toggleClass(picker, "s-open", true);
					field._popupMenus = syra_site.dialogManager.openPopup(self, {
						content: field.menusBox,
						slot: field._popupMenusSlot,
						position: {
							my: "right top",
							at: "right bottom",
							of: $(picker)
						},
						onClose: function() {
							syra_site.dom.toggleClass(picker, "s-open", false);
							field.menusBox.unload();
							field.menusBox = field._popupMenus = null;
						}
					});
				} else {
					field._popupMenus.close();
				}
			}
		});
	}
};

exports.showPicker = function(field, show) {
	if (field.menusPicker) {
		if (show !== false) {
			show = field.$isEditMode || field.hasValue();
		}
		field.pickersHelper.toggle(field.menusPicker, show ? "none" : "");
	}
};

exports.dispose = function(field) {
	field._popupMenus && field._popupMenus.close();
};