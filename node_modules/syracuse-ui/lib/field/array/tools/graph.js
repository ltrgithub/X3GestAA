"use strict";

function _load(list, load) {
	if (!list.chartField && (load || list.$item.$graphPosition != "behind")) {
		var $graphItem = syra_dataset.applyDelta(list.page, {}, list.$item);
		$graphItem.$isDecoratorType = true;
		$graphItem.$category = "field";
		$graphItem.attachedField = list;
		list.chartField = list.page.loadNewItem(list.graphSlot, $graphItem, list.articleParent);
	}
}

function _draw(list) {
	if (list.$field.$decoratorType != "application/x-array-calendar") {
		if (list.$item.$graphPosition == "front" || list.$item.$graphPosition == "behind") {
			var icon, title;
			if (list.$item.$graphPosition == "front") {
				icon = "field_array";
				title = syra_local.flSwitchToList;
			} else {
				icon = "field_graph";
				title = syra_local.flSwitchToGraph;
			}
			if (!list.toggleGraphBtn) {
				list.toggleGraphBtn = syra_button.add({
					parent: list,
					text: title,
					css: list.$mnPickersCss,
					fontIcon: icon,
					btnclick: function() {
						this.parent.toggleGraph();
					}
				});
				list.topbar.insertBefore(list.toggleGraphBtn.link, list.searcherSlot);
			} else {
				syra_button.setText(list.toggleGraphBtn, title, icon);
				syra_button.hide(list.toggleGraphPicker, false);
			}
		} else {
			syra_button.hide(list.toggleGraphBtn, true);
		}
		_load(list);
		if (!list.page.isFusionPage) {
			syra_menus.menus.applyChange(list, {
				$links: {
					$pptslide: {
						$title: syra_local.highCharts_powerpointSlide,
						$url: list.page.$prototype.$representationUrl + "&count={recordsPerPage}" + "&pptMode=newSlide&$bind=" + list.$item.$bind + "&{linkstartP}",
						$type: "application/syracuse-ppt-slide",
						$confirm: syra_local.highCharts_installOfficeAddin,
						$officeAddinSetup: "/msoffice/lib/general/addIn/SyracuseOfficeAddinsSetup.EXE?&format=application/x-msi"
					}
				}
			});
		}
	} else {
		list.$isQuickDesignerDisabled = true;
		list.$item.$graphPosition = "front";
		_load(list);
	}
	syra_dom.hide(list.builder.tableSlot, list.$item.$graphPosition == "front" && !list.builder.isOutCardMode);
	syra_dom.hide(list.graphSlot, list.$item.$graphPosition == "behind");
}

exports.isDefined = function(list) {
	return !!(list.$prototype.$cube || list.$prototype.$decorator);
};

exports.draw = function(list, load) {
	if (exports.isDefined(list)) {
		if (!list.toggleGraph) {
			list.toggleGraph = function() {
				this.$item.$graphPosition = this.$item.$graphPosition == "front" ? "behind" : "front";
				_draw(this);
				this.paging && this.paging.showPagers();
				this.resizeItem(true);
			};
			list.addGrapSlot = function() {
				var tableSlot = this.builder.tableSlot;
				var separator = this.graphSeparator;
				if (!separator) {
					separator = this.graphSeparator = document.createElement("div");
					separator.syraGraphResizer = this.id;
				}
				var slot = this.graphSlot;
				if (!slot) {
					slot = this.graphSlot = document.createElement("div");
				}
				switch (this.$item.$graphPosition) {
					case "left":
						tableSlot.parentNode.insertBefore(separator, tableSlot);
						tableSlot.parentNode.insertBefore(slot, separator);
						separator.className = "s-list-graph-sep-cell";
						separator.syraDragSpot = this.id;
						slot.className = "s-list-graph-slot-cell";
						if (this.$item.$graphWidth) {
							slot.style.width = this.$item.$graphWidth;
						}
						break;
					case "right":
						tableSlot.parentNode.insertBefore(separator, tableSlot.nextSibling);
						tableSlot.parentNode.appendChild(slot, separator.nextSibling);
						separator.className = "s-list-graph-sep-cell";
						separator.syraDragSpot = this.id;
						slot.className = "s-list-graph-slot-cell";
						if (this.$item.$graphWidth) {
							slot.style.width = this.$item.$graphWidth;
						}
						break;
					case "top":
						var sibling = this.tableRow || tableSlot;
						sibling.parentNode.insertBefore(separator, sibling);
						sibling.parentNode.insertBefore(slot, separator);
						separator.className = "s-list-graph-sep";
						delete separator.syraDragSpot;
						slot.className = "s-list-graph-slot";
						slot.style.width = "";
						break;
					case "front":
					case "behind":
					case "bottom":
						var sibling = this.tableRow || tableSlot;
						sibling.parentNode.appendChild(separator);
						sibling.parentNode.appendChild(slot);
						separator.className = "s-list-graph-sep";
						delete separator.syraDragSpot;
						slot.className = "s-list-graph-slot";
						slot.style.width = "";
						break;

				}
			};
			list.removeGrapSlot = function() {
				syra_dom.removeChild(this.graphSeparator);
				syra_dom.removeChild(this.graphSlot);
				this.graphSeparator = this.graphSlot = null;
			};
			list.builder.list_onAfterSetDataValue = function(dataRecordSet, parentDataRecord, metaData) {
				if (this.list.chartField && this.list.records) {
					var dataRecords = [];
					var count = this.list.records.length;
					if (this.list.page.isFusionPage && count > 0) {
						if (syra_fusion.sapUtil.isEmptyGridDataRecordEx(this.list.$fields, this.list.records[count - 1].dataset)) {
							count = count - 1;
						}
					}
					for (var ii = 0; ii < count; ii++) {
						dataRecords.push(this.list.records[ii].dataset);
					}
					this.list.chartField.setValue(dataRecords, metaData, parentDataRecord);
				}
			};
			list.applyGrapDesignMetaData = function(metaData, designing) {
				if (metaData.$graphPosition !== undefined) {
					this.$item.$graphPosition = metaData.$graphPosition;
				}
				if (metaData.$cube) {
					this.$item.$cube = metaData.$cube;
				}
				designing && this.builder.appendCardGraphSlots();
				_draw(this);
				this.chartField && this.chartField.applyDesignMeta && this.chartField.applyDesignMeta(metaData);
			};

		}
		list.$item.$graphPosition = list.$item.$graphPosition || "bottom";
		load && _load(list, true);
	}
};