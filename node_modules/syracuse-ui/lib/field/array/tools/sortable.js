"use strict";
var helpers = require('syracuse-core').helpers;

function Moving(record, options) {
	syra_site.isInoutDisabled = true;
	this.recordSource = record;
	this.info = syra_dom.text("s-sortable-info-ok", syra_local.flMoveItem, syra_site.layoutSlot);
	this.cue = syra_dom.div("s-sortable-cue", syra_site.layoutSlot);
	syra_dom.setZIndex(this.info);
	syra_dom.setZIndex(this.cue);
	this.root = options.root;
	this.boundary = this.root.getBoundingClientRect();
	this.scrollViewRect = syra_dom.getBoundingClientRect(record.list.page.scrollview);
	this.scrollViewRect.item = record.list.page.scrollview;
	this.scrollViewRect.scrollWidth = this.scrollViewRect.item.scrollWidth;
	this.scrollViewRect.scrollHeight = this.scrollViewRect.item.scrollHeight;
	this.bindMouseEvent(true);
}

helpers.defineClass(Moving, null, {
	bindMouseEvent: function(bind) {
		var self = this;
		if (bind) {
			syra_site.layoutSlot.addEventListener("mousemove", self.on_mousemove = function(event) {
				event.preventDefault();
				if (event.target) {
					if (self.root.contains(event.target)) {
						var target = event.target;
						while (target && target != self.root) {
							if (target.syraItem !== undefined) {
								var record = syra_item.findRecord(self.list, target);
								if (record) {
									self.moveNode(event, record);
									event.stopPropagation();
									return;
								}
							}
							target = target.parentNode;
						}
					}
				}
				if (event.target != self.cue) {
					self.moveNode(event, null, true);
				}
			}, false);
			syra_site.layoutSlot.addEventListener("mouseup", self.on_mouseup = function(event) {
				self.end();
			}, false);
		} else {
			self.on_mousemove && syra_site.layoutSlot.removeEventListener("mousemove", self.on_mousemove);
			self.on_mouseup && syra_site.layoutSlot.removeEventListener("mouseup", self.on_mouseup);
			self.on_mousemove = self.on_mouseup = null;
		}
	},
	end: function() {
		this.bindMouseEvent(false);
		if (this.recordTarget) {
			var list = this.recordSource.list;
			var isAfter = this.$drag.$insert == "insertAfter";
			var dataRecords = syra_dataset.ensure(list);
			var dataRecord = dataRecords[this.recordSource.dataset.$serverIndex];
			var $prevReorderedIndex = this.recordSource.dataset.$serverIndex;
			dataRecords.splice(this.recordSource.dataset.$serverIndex, 1);
			var recordSourceIndex = this.recordSource.getRecordIndex();
			var recordTargetIndex = this.recordTarget.getRecordIndex();
			list.records.splice(recordSourceIndex, 1);
			if (recordTargetIndex > recordSourceIndex) {
				recordSourceIndex = isAfter ? recordTargetIndex : (recordTargetIndex - 2);
			} else {
				recordSourceIndex = isAfter ? recordTargetIndex + 1 : (recordTargetIndex);
			}
			if (this.recordTarget.dataset.$serverIndex > this.recordSource.dataset.$serverIndex) {
				this.recordSource.dataset.$serverIndex = isAfter ? this.recordTarget.dataset.$serverIndex : (this.recordTarget.dataset.$serverIndex - 2);
			} else {
				this.recordSource.dataset.$serverIndex = isAfter ? this.recordTarget.dataset.$serverIndex + 1 : (this.recordTarget.dataset.$serverIndex);
			}
			recordSourceIndex = Math.max(recordSourceIndex, 0);
			this.recordSource.dataset.$serverIndex = Math.max(this.recordSource.dataset.$serverIndex, 0);
			dataRecords.splice(this.recordSource.dataset.$serverIndex, 0, dataRecord);
			list.records.splice(recordSourceIndex, 0, this.recordSource);
			list.builder.record_reorder(this.recordSource, this.recordTarget, isAfter);
			list.filler.validateDisplay(list);
			var sendBag = syra_form.getSendBag(list);
			if (list.isSingList) {
				if (list.$field.$item.$type == 'application/x-reference') {
					for (var ii = 0, jj = dataRecords.length; ii < jj; ii++) {
						dataRecords[ii].$serverIndex = ii;
					}
				}
				sendBag.dataRecords = dataRecords;
			} else {
				sendBag.dataRecords = [];
				sendBag.ensureRecord(this.recordSource);
				sendBag.ensureRecord(this.recordTarget);
			}
			syra_form.updateDelta(list, sendBag.dataRecords);

		}
		this.dispose();
		syra_site.isInoutDisabled = false;
	},
	dispose: function() {
		this.bindMouseEvent(false);
		syra_dom.remove(this.info);
		syra_dom.remove(this.cue);
		if (this.recordSource) {
			delete this.recordSource.moving;
		}
		syra_site.disposeObject(this);
	},
	moveNode: function(event, recordTarget, isOut) {
		var move = recordTarget && this.recordSource && this.recordSource != recordTarget;
		syra_pageBuilder.autoScroll(this.scrollViewRect, event);
		var top = Math.max(event.pageY, this.boundary.top);
		var left = Math.max(event.pageX, this.boundary.left);
		top = Math.min(top, this.boundary.bottom);
		left = Math.min(left, this.boundary.right);

		this.recordTarget = (!isOut && move) ? recordTarget : null;
		this.info.className = this.recordTarget ? "s-sortable-info-ok" : "s-sortable-info";
		this.moveCue(event);
		this.info.style.top = top + 15 + "px";
		this.info.style.left = left + 15 + "px";
	},
	moveCue: function(event) {
		if (event && this.recordTarget) {
			this.$drag = syra_dom.getBoundingClientRect(this.recordTarget.dataRow || this.recordTarget.domItem);
			if (this.recordTarget.list && this.recordTarget.list.scroller) {
				this.$drag.width = this.recordTarget.list.builder.scrollTable.bodySlot.clientWidth;
			}
			//calculateDropBoundary
			var xmargin = (this.$drag.width * 0.25);
			var ymargin = (this.$drag.height * 0.25);
			var isAfter = false;
			var style = this.cue.style;
			if (this.recordSource.$isVerticalDirection) {
				var bottom = this.$drag.top + this.$drag.height - ymargin;
				style.top = ((isAfter = event.pageY > bottom) ? (bottom + ymargin) : this.$drag.top) + "px";
				style.left = this.$drag.left + "px";
				style.height = "2px";
				style.width = this.$drag.width + "px";
			} else {
				isAfter = event.pageX > (this.$drag.left + this.$drag.width - xmargin);
				style.top = (this.$drag.top - 3) + "px";
				style.left = (this.$drag.left + (isAfter ? (this.$drag.width + 3) : (-3))) + "px";
				style.width = "2px";
				style.height = this.$drag.height + 6 + "px";
			}
			this.$drag.$insert = isAfter ? "insertAfter" : "insertBefore";
			syra_dom.hide(this.cue, false);
		} else {
			syra_dom.hide(this.cue, true);
		}
	}
});

function Sortable(options) {
	var self = this;
	self.options = options;
	self.options.root.addEventListener("mousedown", self.on_mousedown = function(event) {
		if (event.target.syraSortableHandle == options.list.id) {
			event.preventDefault();
			var record = syra_item.findRecord(options.list, event.target);
			if (record) {
				self.moving = new Moving(record, self.options);
				event.stopPropagation();
			}
		}
	}, false);
}

Sortable.prototype.dispose = function() {
	if (this.options) {
		this.on_mousedown && this.options.root && this.options.root.removeEventListener("mousedown", this.on_mousedown);
		delete this.on_mousedown;
	}
	this.moving && this.moving.dispose();
	syra_site.disposeObject(this);
};
exports.Sortable = Sortable;