"use strict";
var _helpers = require('syracuse-core/lib/helpers');

function _findSortableReference(list, $bind) {
	var $fields = Object.keys(list.$fields);
	for (var ii = 0, jj = $fields.length; ii < jj; ii++) {
		var $field = list.$fields[$fields[ii]];
		if ($field.$type == "application/x-reference" && $field.$item && $field.$item.$value) {
			var refBind = syra_expression.extractCode($field.$item.$value);
			if (refBind && $field.$item[refBind]) {
				refBind = syra_expression.extractCode($field.$item[refBind]);
				if (list.$fields[refBind] && $bind == refBind) {
					return $fields[ii];
				}
			}
		}
	}
	return null;
}

function _resetSort(list) {
	if (list.sortCriterions) {
		for (var ii = 0, jj = list.sortCriterions.length; ii < jj; ii++) {
			var col = list.builder.columnsMap[list.sortCriterions[ii]];
			if (col && col.sortBtn) {
				delete col.sortBtn.link.syraTip;
				syra_dom.toggleClass(col.sortBtn.link, " s-sort-desc", false);
				syra_dom.toggleClass(col.sortBtn.link, " s-sort-asc", false);
			}
		}
		delete list.sortCriterions;
	}
}

exports.setOrderBy = function(list, $orderBy) {
	if ($orderBy !== undefined) {
		list.$orderBy = $orderBy;
	}
};

exports.applyClientFetchOptions = function(list, params) {
	var $orderBy = params.orderBy;
	if ($orderBy === null) {
		_resetSort(list);
		delete list.$orderBy;
	} else {
		$orderBy = _helpers.url.parseOrderBy($orderBy);
	}
	var $externalOrderBy = [];
	$orderBy = $orderBy || [{
		binding: "$serverIndex",
		descending: false,
		$type: "application/x-integer"
	}];
	//map for convergence
	for (var ii = 0, jj = $orderBy.length; ii < jj; ii++) {
		$externalOrderBy.push({
			binding: $orderBy[ii].binding,
			asc: $orderBy[ii].descending !== true
		});
	}
	if (list.page.externalAdapter.sortArray(list, $externalOrderBy)) {
		list.clientDataset.sort(function(itemA, itemB) {
			var wr = 0;
			for (var mm = 0, kk = $externalOrderBy.length; mm < kk; mm++) {
				var criterion = $externalOrderBy[mm];
				var valueA = itemA[criterion.binding];
				var valueB = itemB[criterion.binding];
				switch (criterion.$type) {
					case "application/x-string":
					case "application/x-datetime":
						break;
					case "application/x-time":
					case "application/x-choice":
					case "application/x-boolean":
					case "application/x-integer":
						valueA = parseInt(valueA, 10);
						valueB = parseInt(valueB, 10);
						break;
					case "application/x-decimal":
					case "application/x-real":
						valueA = parseFloat(valueA, 10);
						valueB = parseFloat(valueB, 10);
						break;
					default:
						break;
				}
				if (valueA != valueB) {
					if (valueA > valueB) {
						wr = (criterion.asc) ? 1 : -1;
					} else {
						//valueA < valueB
						wr = (criterion.asc) ? -1 : 1;
					}
					break;
				}
			}
			return wr;
		});
	}
};

exports.onSortClick = function(event, target) {
	var col = this.parent;
	col.list.page.externalAdapter.onSortClickEvent({
		field: col.list,
		event: event,
		doEvent: function() {
			var $bind = col.$bind;
			var $field = col.list.$fields[$bind];
			if ($field.$type == "application/x-reference") {
				if ($field.$item.$value) {
					var refBind = syra_expression.extractCode($field.$item.$value);
					if (refBind && $field.$item[refBind]) {
						refBind = syra_expression.extractCode($field.$item[refBind]);
						if (col.list.$fields[refBind]) {
							$bind = refBind;
						}
					} else {
						//todo
					}
				}
			}
			var $newOrderBy = [],
				found;
			if (col.list.$orderBy) {
				for (var ii = 0, jj = col.list.$orderBy.length; ii < jj; ii++) {
					var $orderItem = col.list.$orderBy[ii];
					if ($orderItem.binding == $bind) {
						found = true;
						if (!event.ctrlKey) {
							$orderItem.descending = !$orderItem.descending;
							$newOrderBy.push($orderItem);
						}
					} else {
						event.shiftKey && $newOrderBy.push($orderItem);

					}
				}
			}
			if (!found) {
				$newOrderBy.push({
					binding: $bind,
					descending: false
				});
			}
			col.list.filler.trigger(col.list, $newOrderBy ? {
				orderBy: $newOrderBy
			} : null);
		}
	});
};

exports.cancel = function(list) {
	list.$orderBy = null;
	list.filler.trigger(list, {
		orderBy: null
	});
};

exports.render = function(list) {
	if (list.articleParent == list.page) {
		var params = list.page.getUrlParams();
		if (params && params.orderBy) {
			list.$orderBy = _helpers.url.parseOrderBy(params.orderBy);
		}
	}
	_resetSort(list);
	if (list.$orderBy) {
		list.sortCriterions = [];
		for (var ii = 0, jj = list.$orderBy.length; ii < jj; ii++) {
			var criterion = list.$orderBy[ii];
			if (ii == 0) {
				var $field = list.$fields[criterion.binding];
				if ($field.$isHidden) {
					var refBind = _findSortableReference(list, criterion.binding);
					if (refBind) {
						$field = list.$fields[refBind];
					}
				}
			}
			var cols = list.builder.columnsMap;
			if (cols) {
				var col = cols[criterion.binding];
				if (!col) {
					var refBind = _findSortableReference(list, criterion.binding);
					if (refBind) {
						col = cols[refBind];
					}
				}
				if (col && col.sortBtn) {
					col.sortBtn.link.syraTip = 2;
					syra_dom.toggleClass(col.sortBtn.link, criterion.descending ? " s-sort-desc" : " s-sort-asc", true);
					list.sortCriterions.push(criterion.binding);
				}
			}
		}
	}
	var isSorted = list.sortCriterions && (list.sortCriterions.length > 0);
	if (isSorted && !list.cancelSortBtn) {
		list.cancelSortBtn = syra_button.add({
			parent: list,
			text: syra_local.flUnsort,
			css: list.$mnPickersCss,
			fontIcon: "unsort",
			btnclick: function() {
				exports.cancel(this.parent);
			}
		});
		list.topbar.insertBefore(list.cancelSortBtn.link, list.searcherSlot);
	} else {
		syra_button.hide(list.cancelSortBtn, !isSorted);
	}
};