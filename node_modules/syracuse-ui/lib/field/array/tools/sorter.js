"use strict";
var _helpers = require('syracuse-core').helpers;

function _findReference(list, $bind) {
	var $fields = Object.keys(list.$fields);
	for (var ii = 0, jj = $fields.length; ii < jj; ii++) {
		var $field = list.$fields[$fields[ii]];
		if ($field.$type == "application/x-reference" && $field.$item && $field.$item.$value) {
			var refBind = syra_expression.extractCode($field.$item.$value);
			if (refBind && $field.$item[refBind]) {
				refBind = syra_expression.extractCode($field.$item[refBind]);
				if (list.$fields[refBind] && $bind == refBind) {
					return $fields[ii];
				}
			}
		}
	}
	return null;
}

function _click(event, target) {
	var col = this.parent;
	var list = col.list;
	list.page.externalAdapter.onSortClickEvent({
		field: list,
		event: event,
		doEvent: function() {
			var $bind = col.$bind;
			var $field = list.$fields[$bind];
			if ($field.$type == "application/x-reference") {
				if ($field.$item.$value) {
					var refBind = syra_expression.extractCode($field.$item.$value);
					if (refBind && $field.$item[refBind]) {
						refBind = syra_expression.extractCode($field.$item[refBind]);
						if (list.$fields[refBind]) {
							$bind = refBind;
						}
					} else {
						//todo
					}
				}
			}
			var $newOrderBy = [],
				found;
			var $orderBy = list.$orderBy;
			if ($orderBy) {
				for (var ii = 0, jj = $orderBy.length; ii < jj; ii++) {
					var $orderItem = $orderBy[ii];
					if ($orderItem.binding == $bind) {
						found = true;
						if (!event.ctrlKey) {
							$orderItem.descending = !$orderItem.descending;
							$newOrderBy.push($orderItem);
						}
					} else {
						//multi selct or no visible criterion
						if (event.shiftKey || list.sorter._visibleCriterions.indexOf($orderItem.binding) < 0) {
							$newOrderBy.push($orderItem);
						}
					}
				}
			}
			if (!found) {
				$newOrderBy.push({
					binding: $bind,
					descending: false
				});
			}
			list.filler.trigger(list, {
				orderBy: ($newOrderBy && $newOrderBy.length) ? $newOrderBy : null
			});
		}
	});
}

exports.load = function(list) {
	return new Sorter(list);
};

function Sorter(list) {
	this.list = list;
	this._visibleCriterions = [];
}

Sorter.prototype.applyMetadata = function(newData) {
	if (newData.$orderBy !== undefined) {
		this.list.$orderBy = newData.$orderBy;
	}
};
Sorter.prototype.render = function() {
	if (this.list.articleParent == this.list.page) {
		var params = this.list.page.getUrlParams();
		if (params && params.orderBy) {
			this.list.$orderBy = _helpers.url.parseOrderBy(params.orderBy);
		}
	}
	this._clearVisibleCriterions();
	if (this.list.$orderBy) {
		this._visibleCriterions = [];
		for (var ii = 0, jj = this.list.$orderBy.length; ii < jj; ii++) {
			var criterion = this.list.$orderBy[ii];
			if (ii == 0) {
				var $field = this.list.$fields[criterion.binding];
				if ($field && $field.$isHidden) {
					var refBind = _findReference(this.list, criterion.binding);
					if (refBind) {
						$field = this.list.$fields[refBind];
					}
				}
			}
			var cols = this.list.builder.columnsMap;
			if (cols) {
				var col = cols[criterion.binding];
				if (!col) {
					var refBind = _findReference(this.list, criterion.binding);
					if (refBind) {
						col = cols[refBind];
					}
				}
				if (col && col.sortBtn) {
					col.sortBtn.link.syraTip = 2;
					syra_dom.toggleClass(col.sortBtn.link, criterion.descending ? " s-sort-desc" : " s-sort-asc", true);
					this._visibleCriterions.push(criterion.binding);
				}
			}
		}
	}
	this.toggleCancelButton();
};
Sorter.prototype.toggleCancelButton = function() {
	var self = this;
	var isSorted = self._visibleCriterions.length > 0;
	if (isSorted && !self.cancelBtn) {
		self.cancelBtn = syra_menus.button.add({
			parent: self.list,
			text: syra_local.flUnsort,
			css: self.list.$mnPickersCss,
			fontIcon: "unsort",
			btnclick: function() {
				self.cancel();
			}
		});
		self.list.topbar.insertBefore(self.cancelBtn.link, self.list.searcherSlot);
	} else {
		syra_menus.button.hide(self.cancelBtn, !isSorted);
	}
};
Sorter.prototype._clearVisibleCriterions = function() {
	for (var ii = 0, jj = this._visibleCriterions.length; ii < jj; ii++) {
		var col = this.list.builder.columnsMap[this._visibleCriterions[ii]];
		if (col && col.sortBtn) {
			delete col.sortBtn.link.syraTip;
			col.sortBtn.link.className = col.sortBtn.link.className.replace(" s-sort-desc", "").replace(" s-sort-asc", "");
		}
	}
	this._visibleCriterions = [];
};
Sorter.prototype.applyClientFetchOptions = function(params) {
	var $orderBy = params.orderBy;
	if ($orderBy === null) {
		this._clearVisibleCriterions();
		delete this.list.$orderBy;
	} else {
		$orderBy = _helpers.url.parseOrderBy($orderBy);
	}
	var $externalOrderBy = [];
	$orderBy = $orderBy || [{
		binding: "$serverIndex",
		descending: false,
		$type: "application/x-integer"
	}];
	//map for convergence
	for (var ii = 0, jj = $orderBy.length; ii < jj; ii++) {
		$externalOrderBy.push({
			binding: $orderBy[ii].binding,
			asc: $orderBy[ii].descending !== true
		});
	}
	if (this.list.page.externalAdapter.sortArray(this.list, $externalOrderBy)) {
		this.list.clientDataset.sort(function(itemA, itemB) {
			var wr = 0;
			for (var mm = 0, kk = $externalOrderBy.length; mm < kk; mm++) {
				var criterion = $externalOrderBy[mm];
				var valueA = itemA[criterion.binding];
				var valueB = itemB[criterion.binding];
				switch (criterion.$type) {
					case "application/x-string":
					case "application/x-datetime":
						break;
					case "application/x-time":
					case "application/x-choice":
					case "application/x-boolean":
					case "application/x-integer":
						valueA = parseInt(valueA, 10);
						valueB = parseInt(valueB, 10);
						break;
					case "application/x-decimal":
					case "application/x-real":
						valueA = parseFloat(valueA, 10);
						valueB = parseFloat(valueB, 10);
						break;
					default:
						break;
				}
				if (valueA != valueB) {
					if (valueA > valueB) {
						wr = (criterion.asc) ? 1 : -1;
					} else {
						//valueA < valueB
						wr = (criterion.asc) ? -1 : 1;
					}
					break;
				}
			}
			return wr;
		});
	}
};
Sorter.prototype.addButton = function(options) {
	options.css = "s-sort " + options.css;
	options.btnclick = _click;
	return syra_menus.button.add(options);
};
Sorter.prototype.cancel = function() {
	var $orderBy = this.list.$orderBy;
	if ($orderBy) {
		this._visibleCriterions.forEach(function(binding) {
			for (var ii = 0, jj = $orderBy.length; ii < jj; ii++) {
				if ($orderBy[ii].binding == binding) {
					$orderBy.splice(ii, 1);
					break;
				}
			}
		});
		if (!$orderBy.length) {
			this.list.$orderBy = null;
		}
	}
	this.list.filler.trigger(this.list, {
		orderBy: this.list.$orderBy
	});
};
Sorter.prototype.dispose = function() {
	syra_site.disposeObject(this);
};