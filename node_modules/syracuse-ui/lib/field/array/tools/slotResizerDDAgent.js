"use strict";
var helpers = require('syracuse-core/lib/helpers');

function SlotResizerDDAgent() {}

exports.SlotResizerDDAgent = helpers.defineClass(SlotResizerDDAgent, null, {
	start: function(dropItem) {
		this.list = dropItem.list;
		syra_dd.ddAgent = this;
		if (dropItem.resizeCard) {
			this.resizeCard = true;
			this.slot = this.list.builder.cardDecorator.outCardSlot;
			this.separator = this.list.builder.cardDecorator.outCardSeparator;
			this.isLeftMove = this.list.$item.$cardItem.$position == "left";
		} else {
			if (dropItem.resizeGraph) {
				this.resizeGraph = true;
				this.slot = this.list.graphDecorator.graphSlot;
				this.separator = this.list.graphDecorator.separator;
				this.isLeftMove = this.list.$item.$graphPosition == "left";
			}
		}
		syra_site.dom.getBoundingClientRect(this.slot, this);
		this.startX = this.separator.getBoundingClientRect().left;
	},
	onDragMouseMove: function(target, event) {
		var cursor = "not-allowed";
		if ((event.pageY >= (this.top - 20)) && (event.pageY <= (this.bottom + 20))) {
			var newWidth = this.width + (this.isLeftMove ? (event.pageX - this.startX) : (this.startX - event.pageX));
			if (newWidth > 200) {
				this.slot.style.width = (this.newWidth = newWidth) + "px";
				cursor = "e-resize";
			}
		}
		syra_site.layoutSlot.style.cursor = cursor;
	},
	onDragMouseUp: function(target, event) {
		var percent = Math.floor(100 * (this.slot.clientWidth / this.slot.parentNode.clientWidth)) + "%";
		this.slot.style.width = percent;
		if (this.resizeCard) {
			this.list.$item.$cardItem.$width = percent;
		} else {
			if (this.resizeGraph) {
				this.list.$item.$graphWidth = percent;
			}
		}
		this.list.isResizeDisabled = true;
		this.list.saveListDesign(true);
		this.list.isResizeDisabled = false;
		syra_site.layoutSlot.style.cursor = "default";
	},
	dispose: function() {
		this.slot = this.separator = this.startX = this.list = null;
	}
});