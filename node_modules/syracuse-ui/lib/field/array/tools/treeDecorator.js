"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _openNode(tree, record, open) {
	var node = tree._nodes[record.dataset[tree.list.$prototype.$treeview.$bindings.$clientId] || "s-empty"];
	if (open !== undefined && open === node.isOpened) {
		return;
	} else {
		node.isOpened = !node.isOpened;
	}
	record.treeNode.picker.className = tree.cssNodePicker + (node.isOpened ? " s-open" : " s-close");
	_displayChildren(tree.list, node, node.isOpened, node.children);
}


function _displayChildren(list, parentNode, isParentOpened, uuids) {
	if (parentNode.childRoot) {
		parentNode.childRoot.style.display = isParentOpened ? "" : "none";
	}
	for (var ii = 0, jj = uuids.length; ii < jj; ii++) {
		var record = list.recordsMap[uuids[ii]];
		record.dataRow.style.display = (record.treeNode.isVisible = isParentOpened) ? "" : "none";
		if (record.treeNode.children.length) {
			_displayChildren(list, record.treeNode, record.treeNode.isOpened && isParentOpened, record.treeNode.children);
		}
	}
}

function _addIcon(tree, record, $iconBind) {
	var name = record.dataset[$iconBind];
	var node = record.treeNode;
	if (name) {
		if (!node.icon) {
			node.icon = document.createElement("div");
			node.icon.className = tree.cssNodeIcon;
			node.item.insertBefore(node.icon, node.desc);
		}
		if (node.iconName != name) {
			node.iconName = name;
			node.icon.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "tree/" + name + "')";
		}
	} else {
		if (node.icon) {
			syra_site.dom.removeChild(node.icon);
			delete node.icon;
			delete node.iconName;
		}
	}
}

function _drawRecord(tree, parentNode, record, level) {
	var node = record.treeNode;
	var hasChildren = node.children.length > 0;
	var skinLevel = tree.list.$item.$addTreeLevel ? (" " + tree.list.$skin + "-level-" + level) : null;
	tree._orderedNodes.push(record);
	if (tree.isCardFormat) {
		if (hasChildren) {
			if (!node.childRoot) {
				node.childRoot = document.createElement("div");
				node.childRoot.className = tree.list.$skin + "-children";
				if (skinLevel) {
					node.childRoot.className += skinLevel;
				}
				record.domItem.appendChild(node.childRoot);
				node.childRoot.style.display = "none";
			}
		}
		if (parentNode && parentNode.childRoot) {
			parentNode.childRoot.appendChild(record.dataRow);
		} else {
			tree.list.body.appendChild(record.dataRow);
		}
	} else {
		record.freezeRow && tree.list.builder.freezeTable.bodyTable.appendChild(record.freezeRow);
		tree.list.builder.scrollTable.bodyTable.appendChild(record.dataRow);
	}
	record.treeNode.level = level;
	if (tree.list.selector.type.appendToRecord) {
		if (tree.list.selector.isMulti) {
			if (!record._selectorCheck) {
				record._selectorCheck = tree.list.selector.appendToRecord(record.treeNode.selectorSlot);
				record.treeNode.selectorSlot.style.display = "";
			}
		} else {
			if (hasChildren) {
				if (record._selectorCheck) {
					syra_site.dom.removeChild(record._selectorCheck);
					delete record._selectorCheck;
					record.treeNode.selectorSlot.style.display = "none";
				}
			} else {
				if (!record._selectorCheck) {
					record._selectorCheck = tree.list.selector.appendToRecord(record.treeNode.selectorSlot);
					record.treeNode.selectorSlot.style.display = "";
				}
			}
		}
	}
	if (hasChildren) {
		record.treeNode.picker.syraOnClick = "onTreeNodeClick";
		record.treeNode.picker.className = tree.cssNodePicker + (node.isOpened ? " s-open" : " s-close");
		if (node.childRoot) {
			node.childRoot.style.display = node.isOpened ? "" : "none";
		}
		record.treeNode.picker.style.display = "";
	} else {
		if (record.treeNode.picker) {
			record.treeNode.picker.style.display = "none";
		}
	}
	var padding = 0;
	var $bindings = tree.list.$prototype.$treeview.$bindings;
	$bindings.$icon && _addIcon(tree, record, $bindings.$icon);
	if (parentNode) {
		node.isVisible = parentNode.isVisible && parentNode.isOpened;
		record.dataRow.style.display = node.isVisible ? "" : "none";
		if (!tree.list.$item.$isNodeLazyLoad && !hasChildren && record.treeNode.icon) {
			padding = 18;
		}
	} else {
		node.isVisible = true;
	}
	record.treeNode.slot.style[syra_site.isDocumentRTL ? "paddingRight" : "paddingLeft"] = (record.treeNode.level * 18) + padding + "px";
	if (skinLevel) {
		record.dataRow.className += skinLevel;
		record.treeNode.slot.className += skinLevel;
		record.treeNode.item.className += skinLevel;
	}
	if (hasChildren) {
		for (var ii = 0, jj = node.children.length; ii < jj; ii++) {
			var child = tree.list.recordsMap[node.children[ii]];
			child && _drawRecord(tree, node, child, level + 1);
		}
	}
}

function TreeDecorator() {

}

exports.TreeDecorator = helpers.defineClass(TreeDecorator, null, {
	buildTreeMap: function() {
		var $bindings = this.list.$prototype.$treeview.$bindings;
		this._nodes = {};
		this.tree = [];
		//erase childre
		for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
			var record = this.list.records[ii];
			var node = record.treeNode;
			if ($bindings.$open && record.dataset[$bindings.$open] !== undefined) {
				node.isOpened = record.dataset[$bindings.$open];
				node.isOpened = (node.isOpened === true || node.isOpened == 2);
			} else {
				node.isOpened = true;
			}
			node.$uuid = record.$uuid;
			node.parentId = record.dataset[$bindings.$parent];
			node.id = record.dataset[$bindings.$clientId] || "s-empty";
			node.children = [];
			this._nodes[node.id] = node;
		}
		for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
			var node = this.list.records[ii].treeNode;
			var parentNode = this._nodes[node.parentId];
			if (parentNode) {
				node.parentUiid = parentNode.$uuid;
				parentNode.children.push(node.$uuid);
			} else {
				this.tree.push(node);
			}
		}
	},
	onNodeSelected: function(record, selected) {
		if (record && record.treeNode) {
			var parendId = record.treeNode.parentId;
			if (parendId && parendId !== "") {
				var parentRecord = this.list.recordsMap[record.treeNode.parentUiid];
				if (parentRecord && this.list.$item && this.list.$item.$selectMode === "multi") {
					var selectParent = selected;
					if (!selectParent) {
						var children = parentRecord && parentRecord.treeNode && parentRecord.treeNode.children;
						if (children) {
							for (var ii = 0, jj = children.length; ii < jj; ii++) {
								var $uuid = children[ii];
								var record = this.list.recordsMap[children[ii]];
								if (record && record.dataset.$isSelected) {
									selectParent = true;
									break;
								}
							}
						}
					}
					this.list.selector.selectRecord(parentRecord.$uuid, selectParent);
				}
			}
		}
	},
	load: function(list) {
		this.list = list;
		this.list.$item.$alternateStyle = false;
		var $skin = this.list.$item.$treeSkin || "s-list-tree";
		this.cssNodeSelector = $skin + "-selector";
		this.cssNodeCell = $skin + "-cell";
		this.cssNode = $skin + "-node";
		this.cssNodePicker = this.cssNode + "-picker";
		this.cssNodeIcon = this.cssNode + "-icon";
		if (syra_site.isDocumentRTL) {
			this.cssNodeIcon += " s-rtl-img";
			this.cssNodePicker += " s-rtl-img";
		}
		this.cssNodeDesc = this.cssNode + "-desc";
		this.cssNodeDescValue = this.cssNode + "-desc-value";
		this.list.$isEditMode = false; // set false editMode for that that contains tree
		var $bindings = this.list.$prototype.$treeview.$bindings;
		var $datas = $bindings.$data || [];
		/*if (!$datas) {
         var $keys = Object.keys($bindings);
         for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
         var $field = list.$fields[$bindings[$keys[ii]]];
         if ($field) {
         $field.$isHidden = true;
         }
         }
         }*/
		var $keys = Object.keys(list.$fields);
		for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
			var $field = list.$fields[$keys[ii]];
			$field.$isExcluded = $datas.indexOf($keys[ii]) < 0;
		}
	},
	onNodeEvent: function(record, picker, event) {
		var self = this;
		self.list.page.externalAdapter.onFieldClickPicker({
			field: record,
			pickerType: "openTreeNode",
			doEvent: function() {
				if (record && record.treeNode) {
					_openNode(self, record);
					self.list.resizeArticle(true);
				}
			}
		});
	},
	onEndFillList: function() {
		this._orderedNodes = [];
		this.buildTreeMap();
		this.isCardFormat = this.list.$item.$format == "cards";
		for (var ii = 0, jj = this.tree.length; ii < jj; ii++) {
			var child = this.list.recordsMap[this.tree[ii].$uuid];
			child && _drawRecord(this, null, child, 0);
		}
	},
	appendCardNode: function(record, slot) {
		var node = record.treeNode = {
			slot: slot,
			item: document.createElement("div")
		};
		var $bindings = this.list.$prototype.$treeview.$bindings;
		node.item.className = this.cssNode;
		node.picker = syra_menus.addIconButton("", this.cssNodePicker + (this.list.$item.$isNodeLazyLoad ? " s-close" : ""), "onTreeNodeClick");
		node.picker.style.display = this.list.$item.$isNodeLazyLoad ? "" : "none";
		node.item.appendChild(node.picker);
		if (this.list.selector.type.appendToRecord) {
			node.selectorSlot = document.createElement("div");
			node.selectorSlot.style.display = "none";
			node.selectorSlot.className = this.cssNodeSelector;
			node.item.appendChild(node.selectorSlot);
		}
		node.desc = document.createElement("div");
		node.desc.className = this.cssNodeDesc;
		node.descriptionField = record.page.loadNewItem(node.item.appendChild(node.desc), {
			//$bind: $bindings.$clientId, // $bindings.$description,
			$bind: $bindings.$description,
			$isCellChild: true,
			$inplace: true
		}, record);
		node.descriptionField.setState({
			$isHidden: false
		});
		node.descriptionField._dataValue.className += " " + this.cssNodeDescValue;
		node.slot.appendChild(node.item);
	},
	openAll: function(open) {
		for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
			_openNode(this, this.list.records[ii], open);
		}
		this.list.resizeArticle(true);
	},
	getPrevNextRecord: function(record, next) {
		var index = this._orderedNodes.indexOf(record);
		for (var ii = (next ? Math.min(index + 1, this._orderedNodes.length - 1) : Math.max(index - 1, 0)), jj = (next ? this._orderedNodes.length : -1);
			(next && ii < jj) || (!next && ii > jj);
			(next ? ii++ : ii--)) {
			var record = this._orderedNodes[ii];
			if (record && record.treeNode && record.treeNode.isVisible) {
				return parseInt(record.$serverIndex, 10);
			}
		}
		return index;
	},
	dispose: function() {
		this.tree = this.list = this._orderedNodes = null;
	}
});










function buildTreeMapxcxw(dataset, partialDelta) {
	var $bindings = this.list.$prototype.$treeview.$bindings;
	var jj = dataset.length,
		extAdapter = this.list.page && this.list.page.externalAdapter,
		listItems = this.list.$prototype && this.list.$prototype.$item;
	if (!partialDelta) {
		this._nodes = {};
		this.tree = [];
	}
	if (jj && listItems && extAdapter && extAdapter.isListRecordEmpty(listItems.$properties, dataset[jj - 1])) {
		// Unfortunately, in Convergence last line could be inconsistent.
		jj--;
	}
	for (var ii = 0; ii < jj; ii++) {
		var dataRecord = dataset[ii];
		var parentId = dataRecord[$bindings.$parent];
		var id = dataRecord[$bindings.$clientId] || "s-empty";
		var node;
		var isOpened;
		if (partialDelta) {
			node = this._uuidNodes[dataRecord.$uuid];
			if (node) {
				if (dataRecord[$bindings.$clientId] !== undefined) {
					id = dataRecord[$bindings.$clientId];
				} else {
					id = node.id;
				}
			} else {
				node = this._nodes[id];
			}
			if (parentId === undefined && node) {
				parentId = node.parentId;
			}
			if ($bindings.$open && dataRecord[$bindings.$open] !== undefined) {
				isOpened = $bindings.$open ? (dataRecord[$bindings.$open] === true || dataRecord[$bindings.$open] == 2) : true;
			} else {
				isOpened = node ? node.isOpened : false;
			}
		} else {
			node = this._nodes[id];
			isOpened = $bindings.$open ? (dataRecord[$bindings.$open] === true || dataRecord[$bindings.$open] == 2) : true;
		}
		var appendToParent = false;
		if (node) {
			if (node.id != id) {
				delete this._nodes[node.id];
				(this._nodes[id] = node).id = id;
			}
			if (node.parentId == undefined) {
				var found = this.tree.indexOf(node);
				if (found >= 0) {
					this.tree.splice(found, 1);
					appendToParent = true;
				}
			} else {
				if (node.parentId != parentId) {
					var prevParent = this._nodes[node.parentId];
					if (prevParent) {
						prevParent.children.splice(prevParent.children.indexOf(node), 1);
					}
					appendToParent = true;
				}
			}
		} else {
			appendToParent = true;
			this._nodes[id] = node = {
				id: id,
				desc: dataRecord[$bindings.$description] || "",
				children: []
			};
		}
		if (appendToParent) {
			var parentNode = this._nodes[parentId];
			if (!parentNode) {
				this.tree.push(parentNode = this._nodes[parentId] = {
					id: parentId,
					children: []
				});
			}
			if (parentNode != node) {
				parentNode.children.push(node);
			}

		}
		node.$uuid = dataRecord.$uuid;
		node.parentId = parentId;
		node.isOpened = isOpened;
	}
}