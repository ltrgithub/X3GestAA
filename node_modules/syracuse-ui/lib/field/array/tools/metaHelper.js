"use strict";

function _resetCommonStatus(object, metaData) {
	if (metaData.$isReadOnly !== undefined && object.$isReadOnly) {
		delete object.$isReadOnly;
	}
	if (metaData.$isDisabled !== undefined && object.$isDisabled) {
		delete object.$isDisabled;
	}
	if (metaData.$fieldStyle !== undefined && object.$fieldStyle) {
		delete object.$fieldStyle;
	}
	if (metaData.$valueStyle !== undefined && object.$valueStyle) {
		delete object.$valueStyle;
	}
	if (metaData.$titleStyle !== undefined && object.$titleStyle) {
		delete object.$titleStyle;
	}
}

function _applyCommonStatus(object, metaData) {
	if (object && metaData) {
		if (metaData.$isReadOnly !== undefined) {
			object.$isReadOnly = metaData.$isReadOnly;
		}
		if (metaData.$isDisabled !== undefined) {
			object.$isDisabled = metaData.$isDisabled;
		}
		if (metaData.$fieldStyle !== undefined) {
			dataRecord.$fieldStyle = metaData.$fieldStyle;
		}
		if (metaData.$valueStyle !== undefined) {
			object.$valueStyle = metaData.$valueStyle;
		}
		if (metaData.$titleStyle !== undefined) {
			object.$titleStyle = metaData.$titleStyle;
		}
	}
}

function _propagateMetaToFields($properties, metaData, $metaFieldProperties) {
	var $binds = Object.keys($properties);
	for (var mm = 0, kk = $binds.length; mm < kk; mm++) {
		_resetCommonStatus($properties[$binds[mm]], metaData);
		//reeapply if defiend in meta
		_applyCommonStatus($properties[$binds[mm]], $metaFieldProperties[$binds]);
	}
}

exports.getMetaData = function(list) {
	var $meta = list.articleParent.dataset.$properties;
	if ($meta) {
		$meta = $meta[list.$item.$bind];
	}
	if ($meta && list.$item.$variantItemKey) {
		return $meta[list.$item.$variantItemKey];
	}
	return $meta;
};

exports.applyMetaData = function(list, metaData) {
	if (metaData.$type === undefined) {
		var $metaRecord = {};
		if (metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
			//apply to datarecords
			var $metaFieldProperties = metaData.$item && metaData.$item.$properties ? metaData.$item.$properties || {} : {};
			for (var ii = 0, jj = list.dataset.length; ii < jj; ii++) {
				var dataRecord = list.dataset[ii];
				_resetCommonStatus(dataRecord, metaData);
				if (dataRecord.$properties) {
					_propagateMetaToFields(dataRecord.$properties, metaData, $metaFieldProperties);
				}
			}
			//apply to $delta currently defined for list
			var $deltaListProperties = exports.getMetaData(list);
			if ($deltaListProperties) {
				$deltaListProperties = $deltaListProperties.$item && $deltaListProperties.$item.$properties ? $deltaListProperties.$item.$properties : null;
				if ($deltaListProperties) {
					_propagateMetaToFields($deltaListProperties, metaData, $metaFieldProperties);
				}
			}
			_applyCommonStatus($metaRecord, metaData);
		}
		if (metaData.$item && metaData.$item.$properties) {
			$metaRecord.$properties = metaData.$item.$properties;
			list.builder.applyMetaDataRecords && list.builder.applyMetaDataRecords($metaRecord);
		}
		if (Object.keys($metaRecord)) {
			exports.ensureGlobalMetaRecord(list, true);
			for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
				list.records[ii].applyChange($metaRecord);
			}
		}
	}
	if (metaData.$capabilities !== undefined) {
		list.capabilityMaker.apply(list, metaData.$capabilities);
	}
	if (metaData.$orderBy !== undefined) {
		list.capabilityMaker.sorter.setOrderBy(list, metaData.$orderBy);
	}
	if (metaData.$item) {
		if (metaData.$item.$links) {
			var $menus = list.$prototype.$item.$links || {};
			syra_site.deltaManager.applyObjectDelta(list.page, $menus, metaData.$item.$links, true);
		}
		if (metaData.$item.$actions) {
			var $menus = list.$prototype.$item.$actions || {};
			syra_site.deltaManager.applyObjectDelta(list.page, $menus, metaData.$item.$actions, true);
		}
	}
	list.pagging.applyMetadata(metaData);
};

exports.ensureGlobalMetaRecord = function(list, reset) {
	if (reset) {
		list.globalMetaRecords = null;
	}
	if (reset || !list.globalMetaRecords) {
		list.globalMetaRecords = null;
		var $metaList = exports.getMetaData(list);
		if ($metaList) {
			list.globalMetaRecords = {};
			_applyCommonStatus(list.globalMetaRecords, $metaList);
			if ($metaList.$item && $metaList.$item.$properties) {
				list.globalMetaRecords.$properties = $metaList.$item.$properties;
			}
		}
	}
	return list.globalMetaRecords;
};