"use strict";
var parser = require('syracuse-sdata/lib/parser/parser');
var formatApi = require('syracuse-ui/lib/field/formatApi');

function _selectQueryFilter(list, $filterId, show) {
	if (show) {
		if (list.$selectedQueryFilter) {
			_selectQueryFilter(list, list.$selectedQueryFilter, false);
		}
		list.$selectedQueryFilter = $filterId;
	}
	var menu = list.page.getMenuItem(_getPrefixQueryFilter(list) + $filterId);
	if (show && !menu && $filterId != "$noFilters") {
		_selectQueryFilter(list, "$noFilters", true);
	} else {
		menu && syra_site.dom.toggleClass(menu.domItem, "s-selected", show);
	}
}


function _getPrefixQueryFilter(list) {
	return list.id + "-filters-";
}

exports.showQueryFilters = function(list) {
	/*if (!list.page.$prototype.$filters) {
     list.page.$prototype.$filters = {
     queryFilter1: {
     $title: "queryFilter1"
     },
     queryFilter2: {
     $isHidden: true,
     $title: "queryFilter2"
     },
     queryFilter3: {
     $title: "queryFilter3"
     },
     queryFilter4: {
     $title: "queryFilter4"
     }
     };
     }*/
	var $filters = list.page.$prototype.$filters;

	var menuBar = list.page.menuBar;
	if ($filters && menuBar) {
		var prefix = _getPrefixQueryFilter(list);
		var $items = [];
		var $links = {};
		var $sourceBinds = Object.keys($filters);
		var selected = list.$urlParams && list.$urlParams.filter;
		for (var ii = 0, jj = $sourceBinds.length; ii < jj; ii++) {
			var $sourceBind = $sourceBinds[ii];
			var $filter = $filters[$sourceBind];
			if (!$filter.$isHidden && !$filter.$isMandatory) {
				var $bind = prefix + $sourceBind;
				$filter.$isQueryFilter = true;
				$items.push({
					$sourceBind: $sourceBind,
					$bind: $bind
				});
				$filter.$sourceBind = $sourceBind;
				$links[$bind] = $filter;
				if (!selected && $filter.$isDefault) {
					selected = $sourceBind;
				}
			}
		}
		if ($items.length) {
			var $noFilters = prefix + "$noFilters";
			$links[$noFilters] = {
				$title: syra_local.flNoFilter,
				$style: "nofilter",
				$isQueryFilter: true
			};
			$items.unshift({
				$sourceBind: "$noFilters",
				$bind: $noFilters
			});
			list.page.loadNewItem(menuBar.barBody, {
				$category: "menus",
				$ownerId: list.id,
				$skin: "s-mn-filters",
				$title: syra_local.flFilters,
				$layout: {
					$items: $items
				}
			}, list.page);
			syra_menus.setMenus(list.page, {
				$links: $links
			});
			_selectQueryFilter(list, selected || $noFilters, true);
			menuBar.toggleBar(menuBar.isSlotVisible = true);
			menuBar.ensureState();
		}
	}
};

exports.onQueryFilterClick = function(list, menu) {
	exports.trigger(list, {
		$filters: menu.$sourceBind
	});
};


exports.trigger = function(list, options, $location) {
	if (!list.isReloading) {
		setTimeout(function() {
			if (!list.disposed) {
				exports.fetch(list, options || {}, $location);
			}
		}, 100);
	}
};
exports.fetchClientRecordSet = function(list, options, pagingChange) {
	if (options && options.params) {
		var parentNode = list.body.parentNode;
		var nextSibling = list.body.nextSibling;
		parentNode.removeChild(list.body);
		list.body.style.display = "none";
		list.page._isDataChanging = true;
		exports.applyFetchOptions(list, options, pagingChange);
		if (options.params.count || options.params.startIndex) {
			list.pagging.ensureClientRange(options.params.count, options.params.startIndex);
		}
		list.clientFetchOptions = options;
		list.fillList(list.clientDataset, list.articleParent.dataset);
		parentNode.insertBefore(list.body, nextSibling);
		list.page._isDataChanging = false;
		list.ensureArticleVisibility(true);
	}
};

exports.fetch = function(list, options, $location) {
	var params = {
		where: list.$where,
		select: list.$select
	};
	if (options) {
		if (options.$filters) {
			params.filter = (options.$filters == "$noFilters") ? "null" : options.$filters;
			_selectQueryFilter(list, params.filter, true);
			list.paramsFilter = params.filter;
		} else {
			if (list.paramsFilter) {
				params.filter = list.paramsFilter;
			}
		}

		params.startIndex = options.startIndex;
		params.count = list.pagging.getItemsPerPage(options.$itemsPerPage);
		if (options.filter != null) {
			params.startIndex = 1;
			params.where = list.$where = options.filter != "" ? options.filter : null;
		}
		if (options.queryBindings) {
			if (options.queryBindings.length == 0) {
				var $binds = Object.keys(list.$fields);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					options.queryBindings.push($binds[ii]);
				}
			}
			list.select = options.queryBindings.map(function(binding) {
				return binding.replace(/\./g, '/');
			}).join(',');
		}
	}
	list.capabilityMaker.sorter.setFetchParams(list, params, options);
	var fetchOptions = {
		params: params
	};
	if (list.isClientFetch || list.isClientSortEnable) {
		var $keys = Object.keys(options);
		exports.fetchClientRecordSet(list, fetchOptions, $keys.length == 1 && ($keys == "$itemsPerPage" || $keys == "startIndex"));
	} else {
		fetchOptions.field = list;
		fetchOptions.$updateHitory = list.page.isMainPage;
		fetchOptions.$location = $location;
		if (params.where !== undefined) {
			list.page.$prototype.$where = params.where;
		}
		if (params.filter !== undefined) {
			list.page.$prototype.$filter = params.filter;
		}
		list.page.fetch(fetchOptions, function(data, response, requestUrl) {
			if (list.page.dataset) {
				delete list.page.dataset[list.$item.$bind];
				var steps = ["$first", "$previous", "$next", "$last"];
				var $links = list.page.dataset.$links || {};
				for (var ii = steps.length - 1; ii >= 0; ii--) {
					delete $links[steps[ii]];
					delete list.page.$menus[steps[ii]];
				}
			}
			if (list.page.$properties) {
				delete list.page.$properties[list.$item.$bind];
			}
			list.page.startChange();
			list.page.applyChange(data, response, requestUrl);
			list.page.endChange();
		});
	}
	list.articleParent.onFetchHandler && list.articleParent.onFetchHandler(fetchOptions);
};

exports.applyFetchOptions = function(list, options, pagingChange) {
	list.ensureDataSet();
	if (!pagingChange || (list.clientDataset == list.dataset)) {
		list.clientDataset = [];
		for (var ii = 0, jj = list.dataset.length; ii < jj; ii++) {
			var dataRecord = list.dataset[ii];
			list.clientDataset.push(dataRecord);
		}
	}
	if (options && options.params && !pagingChange) {
		if (options.params.where) {
			var exp = parser.Parser.parse(options.params.where);
			var currentDataset = list.clientDataset;
			list.clientDataset = [];
			for (var ii = 0, jj = currentDataset.length; ii < jj; ii++) {
				var record = currentDataset[ii];
				var ff = record[exp.children[0].value];
				if (ff != null) {
					var ok = false;
					if (typeof(ff) == "object") {
						// quick workaround ($title). to improve for generic cases
						ok = _compare(ff.$title, exp.children[1].value, "string", exp.value.code);
					} else {
						if (typeof(exp.children[1].value) == "string") {
							ok = _compare(ff, exp.children[1].value, "string", exp.value.code);
						} else {
							// filter date
							if (typeof(exp.children[1].value) == "object" && list.$fields[exp.children[0].value] && list.$fields[exp.children[0].value].$type == "application/x-date") {
								ok = _compare(ff, exp.children[1].value, "date", exp.value.code);
							} else {
								// case of integer (application/x-choice)
								if (typeof(ff) == "number") {
									ok = _compare(ff, exp.children[1].value, "number", exp.value.code);
								} else {
									ok = false;
								}
							}
						}
					}
					ok && list.clientDataset.push(record);
				}
			}
		}
		if (options.params.orderBy !== undefined) {
			list.capabilityMaker.sorter.applyFetchOptions(list, options.params);
		}
	}
};


function _compare(v1, v2, type, operator) {
	var res;
	if (operator == 'like' && type == 'string') {
		// "contains" operation
		if (/^%(([^%]|\%)*)%$/g.test(v2)) {
			// in case '%' has been escaped with '\%', removing '\'
			var cleanV2 = /^%(([^%]|\%)*)%$/g.exec(v2)[1].replace(/\\%/g, "%");
			res = v1.indexOf(cleanV2) >= 0;
		}
		// "starts with" operation
		else {
			if (/(([^%]|\%)*)%$/g.test(v2)) {
				// in case '%' has been escaped with '\%', removing '\'
				var cleanV2 = /(([^%]|\%)*)%$/g.exec(v2)[1].replace(/\\%/g, "%");
				var re = new RegExp('^' + cleanV2);
				res = re.test(v1);
			} else {
				throw new Error(syra_local.flFilter_err_wrong_value.replace('{operator}', operator).replace('{value}', v2));
			}
		}
	} else {
		if (operator == 'like' && type !== 'string') {
			throw new Error(syra_local.flFilter_err_wrong_type.replace('{operator}', operator).replace('{type}', type));
		} else {
			switch (operator) {
				case ">":
					res = formatApi.compareValues[type](v1, v2) > 0;
					break;
				case ">=":
					res = formatApi.compareValues[type](v1, v2) >= 0;
					break;
				case "<":
					res = formatApi.compareValues[type](v1, v2) < 0;
					break;
				case "<=":
					res = formatApi.compareValues[type](v1, v2) <= 0;
					break;
				case "=":
					res = formatApi.compareValues[type](v1, v2) == 0;
					break;
				case "<>":
					res = formatApi.compareValues[type](v1, v2) != 0;
					break;
				default:
					res = true;
			}
		}
	}
	return res;
}



function _notifySelectRecords(list, menuItem) {
	if (list.currentSelectRecords) {
		var sendBag = list.page.ensureSendBag(list);
		var dataRecords = list.ensureDataSet();
		var $uuids = Object.keys(list.currentSelectRecords);
		var hasNewRecord, lastRecord;
		if (list.isSingList) {
			sendBag.dataRecords = dataRecords;
			for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
				var options = {
					isCreate: true,
					dataRecord: list.currentSelectRecords[$uuids[ii]].dataset
				};
				switch (list.$prototype.$item.$type) {
					case "application/x-choice":
						options.dataRecord = options.dataRecord.$uuid;
						break;
					case "application/x-reference":
						delete options.dataRecord.$serverIndex;
						delete options.dataRecord.$isSelected;
						break;
				}
				if (menuItem.$item.$variantItemKey) {
					var variantValue = options.dataRecord;
					(options.dataRecord = {})[menuItem.$item.$variantItemKey] = variantValue;
				}
				dataRecords.push(options.dataRecord);
				lastRecord = list._appendRecord(options);
				hasNewRecord = true;
			}
		} else {
			var $newRecords = [];
			for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
				if (!list.findDataRecord($uuids[ii])) {
					$newRecords.push(list.currentSelectRecords[$uuids[ii]].dataset);
					hasNewRecord = true;
				}
			}
			if (hasNewRecord) {
				if ($newRecords.length == 1) {
					$newRecords[0].$index = list.dataset.length;
					sendBag.dataRecords = $newRecords;
				} else {
					sendBag.dataRecords = [];
					for (var ii = 0, jj = list.dataset.length; ii < jj; ii++) {
						sendBag.dataRecords.push({
							$uuid: list.dataset[ii].$uuid
						});
					}
					sendBag.dataRecords = sendBag.dataRecords.concat($newRecords);
				}
			}
		}
		if (hasNewRecord) {
			list.validateDisplay();
			list.page.notifyDataChange(list, sendBag.dataRecords);
			lastRecord && list.page.scrollToItem(lastRecord);
		}
	}
}

exports.doSelectAction = function(list, menuItem) {
	list.currentSelectRecords = null;
	syra_site.dialogManager.openModal(list.boxParent, {
		article: list,
		$url: menuItem.$sourceUrl,
		onValidate: function() {
			_notifySelectRecords(list, menuItem);
		},
		onSelectRecord: function(selectedRecords) {
			list.currentSelectRecords = selectedRecords;
			return false;
		}
	});
};