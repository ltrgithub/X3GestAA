"use strict";
var _pageSizes = [5, 10, 15, 20, 25, 50, 75, 100, 150, 200, 500];

function _onPageClick(btn) {
	var list = this.parent;
	if (list.paging.$totalResults) {
		var pageTotal = Math.ceil(list.paging.$totalResults / list.paging.getItemsPerPage());
		var newPage = Math.max(1, Math.min(this.page, pageTotal));
		list.filler.trigger(list, {
			startIndex: ((newPage - 1) * list.paging.getItemsPerPage()) + 1
		});
	}
}

function _addPagerLink(slot, list, value, currentPageIndex, text) {
	var btn = syra_button.add({
		parent: list,
		slot: slot,
		text: text || value || "",
		css: "s-pager-link",
		click: _onPageClick,
		page: value
	});
	list.pager.pages[value] = btn.link;
	if (value == currentPageIndex) {
		btn.link.className += " s-pager-current";
	}
}

function _drawItemsPerPage(pager, list) {
	if (list.paging.getItemsPerPage()) {
		pager.size = syra_dom.div("s-pager-size");
		syra_dom.label("s-pager-size-label", pager.size).textContent = syra_local.flPagerPageSize + ":";
		var $enums = [];
		for (var ii = 0, jj = _pageSizes.length; ii < jj; ii++) {
			$enums.push({
				$value: _pageSizes[ii],
				$title: _pageSizes[ii] + ""
			});
		}
		pager.itemsPerPageField = list.page.addItem(syra_dom.div("s-pager-size-value", pager.size), {
			$bind: "$itemsPerPage",
			$category: "field",
			$isEditMode: true,
			$inplace: true,
			$format: "$combo",
			$field: {
				$type: "application/x-choice",
				$value: {
					$type: "application/x-string",
					$enum: $enums
				}
			}
		}, list);
		pager.itemsPerPageField.useDefaultUpdate = true;
		pager.itemsPerPageField.notifyFieldChange = function(value) {
			var list = this.articleParent;
			list.paging.getItemsPerPage(value);
			if (list.page.isVignettePage) {
				list.$item.$itemsPerPage = value;
			}
			list.$pagePreferences.$itemsPerPage = list.paging.getItemsPerPage();
			list.saveListDesign();
			syra_preference.page.saveField(list, list.$pagePreferences);
			list.filler.trigger(list, {
				startIndex: 1
			});
			return false;
		};
		list.pagerSlot.appendChild(pager.size);
		pager.itemsPerPageField.setValue(list.paging.getItemsPerPage());
	}
}

var _pagerPageFacets = ["$details", "$edit", "$modal2"];
var _$steps;

function _getSteps() {
	if (!_$steps) {
		_$steps = [{
			$bind: "$first",
			$title: "dskpFirstRecord",
			$shortCut: syra_shortCuts.tip.firstRecord,
			$shortCutList: "SHIFT PAGEUP"
		}, {
			$bind: "$previous",
			$title: "dskpPreviousRecord",
			$shortCut: syra_shortCuts.tip.prevRecord,
			$shortCutList: "PAGEUP"
		}, {
			$bind: "$next",
			$title: "dskpNextRecord",
			$shortCut: syra_shortCuts.tip.nextRecord,
			$shortCutList: "PAGEDOWN"
		}, {
			$bind: "$last",
			$title: "dskpLastRecord",
			$shortCut: syra_shortCuts.tip.lastRecord,
			$shortCutList: "SHIFT PAGEDOWN"
		}];
	}
	return _$steps;
}


exports.addPagerLinksToPage = function(page, $bind) {
	if (!page.pageSteps && _pagerPageFacets.indexOf(page.$facet) >= 0) {
		var slot = syra_dom.div("s-page-pager-slot");
		page.pageSteps = _addPagerStepLinks(page, slot);
		page.header.appendChild(slot);
	}
};


function _addPagerStepLinks(parent, slot, article) {

	var steps = {};
	if (parent.page && parent.page.searchResultField) {
		return steps; // do not display step links for search
	}
	var $steps = _getSteps();
	for (var ii = 0, jj = $steps.length; ii < jj; ii++) {
		var $step = $steps[ii];
		steps[$step.$bind] = parent.page.addItem(slot, {
			$category: "link",
			$skin: (parent.isArrayField ? "s-pager-link" : "s-page-pager-link"),
			$shortCutTip: parent.isArrayField ? $step.$shortCutList : $step.$shortCut,
			$ownerId: parent.id,
			$isPreloaded: true,
			$bind: $step.$bind,
			$title: syra_local[$step.$title],
			$icon: {
				$mode: "icon"
			}
		}, article || parent);
	}
	return steps;
}

function _addPager(list, slot) {
	var pager = list.pager = {
		pages: []
	};
	var range = syra_dom.label("s-pager-range", list.pagerSlot);
	if (list.clientFetchOptions || list.isClientFetch) {
		list.paging.$totalResults = list.filler.ensureClientDataset(list).length;
	}
	if (!list.isClientPagingPerPageDisable && list.paging.$totalResults !== undefined) {
		var itemsPerPage = list.paging.getItemsPerPage();
		_drawItemsPerPage(pager, list);
		var isHidden = !(list.designer || (list.paging.$totalResults > _pageSizes[0]));
		syra_dom.hide(range, isHidden);
		syra_dom.hide(pager.size, isHidden);
		var pageTotal = Math.ceil(list.paging.$totalResults / itemsPerPage);
		var currentPageIndex = Math.ceil(list.paging.$startIndex / itemsPerPage);
		range.textContent = list.page.externalAdapter.getPagerTotalRcdLabel(list, list.paging.$totalResults, [syra_local.flPagerTotalRecord, syra_local.flPagerTotalRecords]);
		if (pageTotal > 1) {
			var group = syra_dom.div("s-pager-nav");
			var page = 0;
			var lastStepPage = pageTotal - 1;
			_addPagerLink(group, list, ++page, currentPageIndex);
			if (currentPageIndex > 5 && pageTotal > 7) {
				if ((currentPageIndex + 5) < pageTotal) {
					page = currentPageIndex - 1;
				} else {
					page = pageTotal - 6;
				}
				_addPagerLink(group, list, page, currentPageIndex, "...");
			}
			for (var ii = 0; ii < 5; ii++) {
				if (page == lastStepPage) {
					break;
				}
				page++;
				_addPagerLink(group, list, page, currentPageIndex);
			}
			if (page < lastStepPage) {
				_addPagerLink(group, list, page + 1, currentPageIndex, "...");
			}
			_addPagerLink(group, list, pageTotal, currentPageIndex);
			list.pagerSlot.appendChild(group);
			if (!list.isClientFetch) {
				pager.pageSteps = _addPagerStepLinks(list, group, list.page);
			}
		}
	} else {
		!list.isClientPagingPerPageDisable && _drawItemsPerPage(pager, list);
		if (list.isServerStepPager !== false || list.$prototype.$isFieldPager) {
			pager.pageSteps = _addPagerStepLinks(list, list.pagerSlot, list.$prototype.$isFieldPager ? list : list.page);
		}
	}
	return pager;
}


function _disposePager(list, clear) {
	var pager = list.pager;
	if (pager) {
		if (clear) {
			if (pager.itemsPerPageField) {
				syra_item.remove(pager.itemsPerPageField);
				delete pager.itemsPerPageField;
			}
			if (pager.pageSteps) {
				var $binds = Object.keys(pager.pageSteps);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					syra_item.remove(pager.pageSteps[$binds[ii]], true, true);
				}
				pager.pageSteps = null;
			}
			syra_dom.empty(list.pagerSlot);
		}
		list.pager = pager.size = pager.itemsPerPageField = pager.pageSteps = null;
	}
}

exports.getDefaultItemsPerPage = function(page, ignoreUrl) {
	var params = page.urlSeg && page.urlSeg.params;
	var count = !ignoreUrl && params && params.count;
	if (count) {
		return parseInt(count, 10); // ensure int
	}
	if (page.fetchListItemsPerPage) {
		return page.fetchListItemsPerPage;
	}
	if (page.defaultItemsPerPage) {
		return page.defaultItemsPerPage;
	}
	if (page.isVignettePage) {
		return 10;
	}
	return 50;
};

function Paging(list) {
	this.list = list;
	this.$startIndex = 1;
}

Paging.prototype.getParseIndexes = function() {
	var clientDatasetSize = this.list.filler.ensureClientDataset(this.list).length;
	var start = this.$startIndex || 1;
	start = start > clientDatasetSize ? 1 : start;
	var last = start + (this.getItemsPerPage() - 1);
	return {
		start: start - 1,
		last: Math.min(last, clientDatasetSize) - 1
	};
};
Paging.prototype.clearPreferences = function() {
	delete this.list.page.fetchListItemsPerPage;
	var defaultValue = exports.getDefaultItemsPerPage(this.list.page, true);
	if (defaultValue !== this.list.$item.$itemsPerPage) {
		this.getItemsPerPage(defaultValue);
		this.list.filler.trigger(this.list, {
			startIndex: 1
		});
	}
};
Paging.prototype.addPagerStepLinks = function(parent, slot, article) {
	_addPagerStepLinks(parent, slot, article);
};
Paging.prototype.ensureClientRange = function($itemsPerPage, $startIndex) {
	this.getItemsPerPage($itemsPerPage);
	this.$startIndex = Math.max(($startIndex || 1), 1);
	this.$totalResults = this.list.filler.ensureClientDataset(this.list).length;
};
Paging.prototype.getItemsPerPage = function($itemsPerPage) {
	var item = this.list && this.list.$item;
	if (item && $itemsPerPage !== undefined) {
		item.$itemsPerPage = this.$itemsPerPage = parseInt($itemsPerPage, 10);
	}
	if ((item && item.$isPagerHidden) || this.noPageSize || this.list.isClientPagingPerPageDisable) {
		this.$itemsPerPage = this.list.filler.ensureClientDataset(this.list).length;
	} else {
		this.$itemsPerPage = this.$itemsPerPage || exports.getDefaultItemsPerPage(this.list.page);
	}
	return this.$itemsPerPage;
};
Paging.prototype.applyMetadata = function(metaData, designing) {
	var hasToFetch;
	if (metaData.$isPagerHidden !== undefined) {
		this.list.$item.$isPagerHidden = metaData.$isPagerHidden;
		this.showPagers(designing);
		hasToFetch = designing;
	}
	if (metaData.$totalResults !== undefined) {
		this.$totalResults = metaData.$totalResults;
	}
	if (metaData.$startIndex !== undefined) {
		this.$startIndex = metaData.$startIndex;
	}
	if (metaData.$itemsPerPage !== undefined) {
		this.getItemsPerPage(metaData.$itemsPerPage);
		hasToFetch = designing;
	}
	hasToFetch && this.list.filler.trigger(this.list);
};
Paging.prototype.showPagers = function(designing) {
	var pager = this.list.pager;
	var show = _isVisible(this.list);
	if (pager) {
		if (designing) {
			if (this.$itemsPerPage !== undefined) {
				this.designLastGetItemsPerPage = this.$itemsPerPage;
			}
			if (show && pager.itemsPerPageField) {
				pager.itemsPerPageField.setValue(this.getItemsPerPage(this.designLastGetItemsPerPage || exports.getDefaultItemsPerPage(this.list.page)));
			}
		} else {
			syra_dom.hide(this.list.pagerSlot, !show);
		}
	} else {
		if (designing && show && this.designLastGetItemsPerPage) {
			this.getItemsPerPage(this.designLastGetItemsPerPage);
		}
	}
};
Paging.prototype.setPage = function($serverIndex) {
	var index = Math.max(this.list.filler.getClientDataSetIndex(this.list, $serverIndex), 0);
	var newPage = Math.ceil((index + 1) / this.getItemsPerPage());
	this.list.filler.trigger(this.list, {
		startIndex: ((newPage - 1) * this.getItemsPerPage()) + 1
	});
};
Paging.prototype.draw = function(designing) {
	if (!designing && this._last) {
		if (this.list.clientFetchOptions || this.list.isClientFetch) {
			this.$totalResults = this.list.dataset.length;
		}
		if (this._last.$totalResults != undefined && this._last.$itemsPerPage == this.$itemsPerPage &&
			this._last.$totalResults == this.$totalResults &&
			this._last.$startIndex == this.$startIndex) {
			return;
		}
	}
	_disposePager(this.list, true);
	if (this.list.isPagingDisabled !== true && this.list.$item.$isPagerHidden !== true) {
		_addPager(this.list);
		this.showPagers(designing);
		this._last = {
			$itemsPerPage: this.$itemsPerPage,
			$startIndex: this.$startIndex,
			$totalResults: this.$totalResults
		};
	}
};

function _isVisible(list) {
	if (list.isPagingDisabled !== true && list.$item.$isPagerHidden !== true) {
		if (list.$item.$graphPosition != "front" || !(list.chartField && list.chartField.$useFullData)) {
			return true;
		}
	}
	return false;
}

Paging.prototype.dispose = function() {
	_disposePager(this.list);
	this.list = null;
};

exports.add = function(list) {
	list.paging = new Paging(list);
};