"use strict";

function _addPowerPointLink(list) {
	if (!list.page.isFusionPage && !(list.$field.$decorator && list.$field.$decorator.$stereotype == "calendar")) {
		syra_menus.setMenus(list, {
			$links: {
				$pptslide: {
					$title: syra_local.highCharts_powerpointSlide,
					$url: list.page.$prototype.$representationUrl + "&count={recordsPerPage}" + "&pptMode=newSlide&$bind=" + list.$item.$bind + "&{linkstartP}",
					$type: "application/syracuse-ppt-slide",
					$confirm: syra_local.highCharts_installOfficeAddin,
					$officeAddinSetup: "/msoffice/lib/general/addIn/SyracuseOfficeAddinsSetup.EXE?&format=application/x-msi"
				}
			}
		});
	}
}

function _ensureGraphVisibility(list) {
	if (!list.$field.$isListHidden) {
		if (list.$item.$graphPosition == "front" || list.$item.$graphPosition == "behind") {
			var icon, title;
			if (list.$item.$graphPosition == "front") {
				icon = "field_array";
				title = syra_local.flSwitchToList;
			} else {
				icon = "field_graph";
				title = syra_local.flSwitchToGraph;
			}
			if (!list.toggleGraphBtn) {
				list.toggleGraphBtn = syra_menus.button.add({
					parent: list,
					text: title,
					iconOnly: true,
					css: list.$mnPickersCss,
					fontIcon: icon,
					btnclick: function() {
						this.parent.toggleGraph();
					}
				});
				list.topbar.insertBefore(list.toggleGraphBtn.link, list.searcherSlot);
			} else {
				syra_menus.button.setText(list.toggleGraphBtn, title, icon);
				syra_menus.button.hide(list.toggleGraphPicker, false);
			}
		} else {
			syra_menus.button.hide(list.toggleGraphBtn, true);
		}
	}
	exports.ensureGraph(list);
	_addPowerPointLink(list);
	list.isTableSlotHidden = list.$field.$isListHidden || (list.$item.$graphPosition == "front" && !list.builder.isOutCardMode);
	syra_site.dom.display(list.builder.tableSlot, !list.isTableSlotHidden);
	syra_site.dom.display(list.graphSlot, list.$item.$graphPosition != "behind");
}

exports.load = function(list) {
	list.toggleGraph = function() {
		this.$item.$graphPosition = this.$item.$graphPosition == "front" ? "behind" : "front";
		_ensureGraphVisibility(this);
		this.paging && this.paging.showPagers();
		this.resizeArticle(true);
	};
	list.addGrapSlot = function() {
		var tableSlot = this.builder.tableSlot;
		var separator = this.graphSeparator;
		if (!separator) {
			separator = this.graphSeparator = document.createElement("div");
			separator.syraGraphResizer = this.id;
		}
		var slot = this.graphSlot;
		if (!slot) {
			slot = this.graphSlot = document.createElement("div");
		}
		switch (this.$item.$graphPosition) {
			case "left":
				tableSlot.parentNode.insertBefore(separator, tableSlot);
				tableSlot.parentNode.insertBefore(slot, separator);
				separator.className = "s-list-graph-sep-cell";
				separator.syraDragSpot = this.id;
				slot.className = "s-list-graph-slot-cell";
				if (this.$item.$graphWidth) {
					slot.style.width = this.$item.$graphWidth;
				}
				break;
			case "right":
				tableSlot.parentNode.insertBefore(separator, tableSlot.nextSibling);
				tableSlot.parentNode.appendChild(slot, separator.nextSibling);
				separator.className = "s-list-graph-sep-cell";
				separator.syraDragSpot = this.id;
				slot.className = "s-list-graph-slot-cell";
				if (this.$item.$graphWidth) {
					slot.style.width = this.$item.$graphWidth;
				}
				break;
			case "top":
				var sibling = this.tableRow || tableSlot;
				sibling.parentNode.insertBefore(separator, sibling);
				sibling.parentNode.insertBefore(slot, separator);
				separator.className = "s-list-graph-sep";
				delete separator.syraDragSpot;
				slot.className = "s-list-graph-slot";
				slot.style.width = "";
				break;
			case "front":
			case "behind":
			case "bottom":
				var sibling = this.tableRow || tableSlot;
				sibling.parentNode.appendChild(separator);
				sibling.parentNode.appendChild(slot);
				separator.className = "s-list-graph-sep";
				delete separator.syraDragSpot;
				slot.className = "s-list-graph-slot";
				slot.style.width = "";
				break;

		}
	};
	list.removeGrapSlot = function() {
		syra_site.dom.removeChild(this.graphSeparator);
		syra_site.dom.removeChild(this.graphSlot);
		this.graphSeparator = this.graphSlot = null;
	};
	list.builder.list_onAfterSetDataBind = function(dataRecordSet, parentDataRecord, metaData) {
		if (list.chart) {
			var graphRecords = [];
			for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
				graphRecords.push(this.list.records[ii].dataset);
			}
			this.list.chart.setDataBind(graphRecords, parentDataRecord, metaData);
		}
	};
	list.applyGrapDesignMetaData = function(metaData, designing) {
		if (metaData.$graphPosition !== undefined) {
			this.$item.$graphPosition = metaData.$graphPosition;
		}
		if (metaData.$cube) {
			this.$item.$cube = metaData.$cube;
		}
		designing && this.builder.appendCardGraphSlots();
		_ensureGraphVisibility(this);
		this.chart && this.chart.applyDesignMetaData(metaData);
	};
};

exports.ensureGraph = function(list, load) {
	if (!list.chart && (load || list.$item.$graphPosition != "behind")) {
		list.chart = list.page.loadNewItem(list.graphSlot, {
			$category: "tabularChart",
			$renderer: list.$item.$renderer,
			$cube: list.$item.$cube,
			$isListEmbeded: true,
			$bind: list.$item.$bind
		}, list.articleParent);
		list.chart.attachedField = list;
		if (list.records && list.records.length) {
			var dataset = list.articleParent.dataset;
			if (dataset) {
				list.chart && list.chart.setDataBind(dataset[list.$item.$bind], dataset, dataset.$properties && dataset.$properties[list.$item.$bind]);
			}
		}
	}
};

exports.dispose = function(list) {
	if (list.chart) {
		list.chart.attachedField = null;
		list.chart.dispose();
	}
};