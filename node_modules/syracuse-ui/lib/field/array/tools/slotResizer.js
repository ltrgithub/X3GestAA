"use strict";
var helpers = require('syracuse-core').helpers;

function Moving(resizer) {
	this.resizer = resizer;
	var list = resizer.builder.list;
	switch (resizer.type) {
		case "card":
			this.slot = resizer.builder.outCardSlot;
			this.isLeftMove = list.$item.$cardItem.$position == "left";
			break;
		case "graph":
			this.slot = list.graphSlot;
			this.isLeftMove = list.$item.$graphPosition == "left";
			break;
	}
	syra_dom.getBoundingClientRect(this.slot, this);
	this.startX = resizer.separator.getBoundingClientRect().left;
	this.bindMouseEvent(true);
}

helpers.defineClass(Moving, null, {
	bindMouseEvent: function(bind) {
		var self = this;
		if (bind) {
			syra_site.layoutSlot.addEventListener("mousemove", self.on_mousemove = function(event) {
				event.preventDefault();
				var cursor = "not-allowed";
				if ((event.pageY >= (self.top - 20)) && (event.pageY <= (self.bottom + 20))) {
					var newWidth = self.width + (self.isLeftMove ? (event.pageX - self.startX) : (self.startX - event.pageX));
					if (newWidth > 200) {
						self.slot.style.width = (self.newWidth = newWidth) + "px";
						cursor = "e-resize";
					}
				}
				syra_site.layoutSlot.style.cursor = cursor;
			}, false);
			syra_site.layoutSlot.addEventListener("mouseup", self.on_mouseup = function(event) {
				self.end();
			}, false);
		} else {
			self.on_mousemove && syra_site.layoutSlot.removeEventListener("mousemove", self.on_mousemove);
			self.on_mouseup && syra_site.layoutSlot.removeEventListener("mouseup", self.on_mouseup);
			self.on_mousemove = self.on_mouseup = null;
		}
	},

	end: function() {
		this.bindMouseEvent(false);
		var list = this.resizer.builder.list;
		var percent = Math.floor(100 * (this.slot.clientWidth / this.slot.parentNode.clientWidth)) + "%";
		this.slot.style.width = percent;
		switch (this.resizer.type) {
			case "card":
				list.$item.$cardItem.$width = percent;
				break;
			case "graph":
				list.$item.$graphWidth = percent;
				break;
		}
		list.saveListDesign();
		list.resizeItem();
		syra_site.layoutSlot.style.cursor = "default";
		this.dispose();
		syra_site.isInoutDisabled = false;
	},

	dispose: function() {
		this.bindMouseEvent(false);
		if (this.resizer) {
			delete this.resizer.moving;
		}
		syra_site.disposeObject(this);
	}
});

function Resizer(builder, type) {
	var self = this;
	self.type = type;
	self.builder = builder;
	self.separator = document.createElement("div");
	self.separator.addEventListener("mousedown", self.on_mousedown = function(event) {
		event.preventDefault();
		self.moving = new Moving(self);
		event.stopPropagation();
	}, false);
}

Resizer.prototype.dispose = function() {
	this.on_mousedown && this.separator && this.separator.removeEventListener("mousedown", this.on_mousedown);
	this.moving && this.moving.dispose();
	syra_dom.remove(this.separator);
	syra_site.disposeObject(this);
};

exports.addGraphResizer = function(builder) {
	return new Resizer(builder, "graph");
};
exports.addCardResizer = function(builder) {
	return new Resizer(builder, "card");
};