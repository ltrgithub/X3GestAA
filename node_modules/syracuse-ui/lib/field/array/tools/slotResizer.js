"use strict";
var Draggable = require('syracuse-ui/lib/utility/drag').Draggable;

function _setDraggable(list, type) {
	return new Draggable({
		handle: document.createElement("div"),
		list: list,
		type: type,
		start: function() {
			switch (this.type) {
				case "card":
					this.slot = this.list.builder.outCardSlot;
					this.isLeftMove = this.list.$item.$cardItem.$position == "left";
					break;
				case "graph":
					this.slot = this.list.graphSlot;
					this.isLeftMove = this.list.$item.$graphPosition == "left";
					break;
			}
			syra_dom.getBoundingClientRect(this.slot, this);
			this.startX = this.handle.getBoundingClientRect().left;
		},
		drag: function(event) {
			var cursor = "not-allowed";
			if ((event.pageY >= (this.top - 20)) && (event.pageY <= (this.bottom + 20))) {
				var newWidth = this.width + (this.isLeftMove ? (event.pageX - this.startX) : (this.startX - event.pageX));
				if (newWidth > 200) {
					this.slot.style.width = (this.newWidth = newWidth) + "px";
					cursor = "e-resize";
				}
			}
			syra_site.layoutSlot.style.cursor = cursor;
		},
		stop: function() {
			var percent = Math.floor(100 * (this.slot.clientWidth / this.slot.parentNode.clientWidth)) + "%";
			this.slot.style.width = percent;
			switch (this.type) {
				case "card":
					this.list.$item.$cardItem.$width = percent;
					break;
				case "graph":
					this.list.$item.$graphWidth = percent;
					break;
			}
			this.list.saveListDesign();
			this.list.resizeItem();
			syra_site.layoutSlot.style.cursor = "default";
		}
	});
}

exports.addGraphResizer = function(list) {
	return _setDraggable(list, "graph");
};
exports.addCardResizer = function(list) {
	return _setDraggable(list, "card");
};