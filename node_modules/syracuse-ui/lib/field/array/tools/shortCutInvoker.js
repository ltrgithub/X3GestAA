"use strict";


function _goToPage(list, isPageDown, isShift) {
	var pagerTop = list.pagging.pagerTop;
	if (pagerTop) {
		if (pagerTop.pages.length > 0) {
			// looking for the next page
			var currentIndex = Math.ceil(list.pagging.$startIndex / list.pagging.getItemsPerPage());
			var goToPage;
			if (isPageDown) {
				goToPage = isShift ? (pagerTop.pages.length - 1) : (currentIndex + 1);
			} else {
				goToPage = isShift ? 1 : (currentIndex - 1);
			}
			if (goToPage !== undefined) {
				goToPage = Math.min(Math.max(1, goToPage), pagerTop.pages.length - 1);
				pagerTop.pages[goToPage].click();
			}
			if (list.clientFetchOptions && list.records && list.records.length) {
				/* aurelien
                 var record = list.records[0];
                 if (record.rowIndexBtn) {
                 record.rowIndexBtn.click();
                 }*/
			}
		} else {
			if (pagerTop.pageSteps) {
				isPageDown ? syra_menus.click.next(list, event.shiftKey) : syra_menus.click.prev(list, event.shiftKey);
			}
		}
	}
}

function _getClientDataSetServerIndex(list, recordIndex) {
	list.ensureClientDataset();
	if (list.clientDataset[recordIndex]) {
		return parseInt(list.clientDataset[recordIndex].$serverIndex, 10);
	}
	return 0;
}

function _getPrevNextTreeRecordVisible(list, recordIndex, next) {
	var index;
	var orderedNodes = list.treeDecorator._orderedNodes;
	for (var ii = 0, jj = orderedNodes.length; ii < jj; ii++) {
		if (orderedNodes[ii].$serverIndex == recordIndex) {
			index = ii;
			break;
		}
	}
	for (var ii = (next ? Math.min(index + 1, orderedNodes.length - 1) : Math.max(index - 1, 0)), jj = (next ? orderedNodes.length : -1);
		(next && ii < jj) || (!next && ii > jj);
		(next ? ii++ : ii--)) {
		if (list.treeDecorator._uuidNodes[orderedNodes[ii].$uuid].isVisible) {
			return parseInt(orderedNodes[ii].$serverIndex, 10);
		}
	}
	return index;
}

exports.apply = function(list, shortcuts, event) {
	if (shortcuts.pagedown || shortcuts.pageup) {
		if (list.treeDecorator) {
			list.treeDecorator.expendCollapseAll(shortcuts.pagedown);
			return true;
		}
		if (list.pagging) {
			_goToPage(list, shortcuts.pagedown, event.shiftKey);
			event.preventDefault();
			return true;
		}
	}
	if (shortcuts.left || shortcuts.right) {
		if (list.treeDecorator) {
			var record = list.getFocusedRecord(!list.$item.$isNavigationList);
			if (record) {
				list.treeDecorator.expendCollapseNode(record.$uuid, shortcuts.right);
				return true;
			}
		}
	}
	if (shortcuts.up || shortcuts.down) {
		if (list.$item.$isNavigationList) {
			if (list.deferSelect) {
				clearTimeout(list.deferSelect);
				list.deferSelect = null;
			}
			if (record = list.getFocusedRecord(true)) {
				record.toggleFocus(false);
				recordIndex = record.getRecordIndex();
				if (list.treeDecorator) {
					recordIndex = _getPrevNextTreeRecordVisible(list, recordIndex, shortcuts.down);
				} else {
					if (shortcuts.down) {
						recordIndex = (recordIndex < list.clientDataset.length - 1) ? recordIndex + 1 : recordIndex;
					} else {
						recordIndex = recordIndex > 0 ? recordIndex - 1 : recordIndex;
					}
				}
			}
			if ((newSelect = list.findRecordByServerIndex(_getClientDataSetServerIndex(list, recordIndex)))) {
				newSelect.toggleFocus(true);
				list.scroller.scrollToItem(newSelect.dataRow);
				if (newSelect.$facet && newSelect.$facet != "$lookup" && !list.treeDecorator) {
					list.deferSelect = setTimeout(function() {
						newSelect.domItem.click();
					}, 500);
				}
				event.preventDefault();
				return true;
			}
		}
		if (list.treeDecorator) {
			var record, recordIndex, serverIndex, newSelect;
			if (record = list.getFocusedRecord(true)) {
				record.toggleFocus(false);
				recordIndex = record.getRecordIndex();
				recordIndex = _getPrevNextTreeRecordVisible(list, recordIndex, shortcuts.down);
			} else {
				recordIndex = 0;
			}
			serverIndex = _getClientDataSetServerIndex(list, recordIndex);
			newSelect = list.findRecordByServerIndex(serverIndex);
			if (newSelect) {
				newSelect.toggleFocus(true);
			}
			return true;
		}
	}
	if (shortcuts.enter) {
		if (list.$item.$isNavigationList) {
			record = list.getFocusedRecord(false);
			if (!record && list.selector && list.selector.uuid !== undefined) {
				record = list.selector.records[list.selector.uuid];
			}
			if (record && record.domItem) {
				record.domItem.click();
				event.preventDefault();
				return true;
			}
		}

	}

	return false;
};