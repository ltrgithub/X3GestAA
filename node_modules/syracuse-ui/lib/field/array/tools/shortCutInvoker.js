"use strict";

function _getFocusRecord(list, selected) {
	if (list.focusedRecord && !list.focusedRecord.disposed) {
		return list.focusedRecord;
	}
	list.focusedRecord = null;
	var record = null;
	if (selected && list.selector.records) {
		record = list.selector.getSelectedRecord();
		if (!record) {
			var keys = Object.keys(list.selector.records);
			if (keys.length > 0) {
				record = list.selector.records[keys[0]];
			}
		}
	}
	return record;
}

function _goToPage(list, isPageDown, isShift) {
	var pager = list.pager;
	if (pager) {
		if (pager.pages.length > 0) {
			// looking for the next page
			var currentIndex = Math.ceil(list.paging.$startIndex / list.paging.getItemsPerPage());
			var goToPage;
			if (isPageDown) {
				goToPage = isShift ? (pager.pages.length - 1) : (currentIndex + 1);
			} else {
				goToPage = isShift ? 1 : (currentIndex - 1);
			}
			if (goToPage !== undefined) {
				goToPage = Math.min(Math.max(1, goToPage), pager.pages.length - 1);
				pager.pages[goToPage].click();
			}
			if (list.clientFetchOptions && list.records && list.records.length) {
				/* aurelien
                 var record = list.records[0];
                 if (record.rowIndexBtn) {
                 record.rowIndexBtn.click();
                 }*/
			}
		} else {
			if (pager.pageSteps) {
				var article = !list.$prototype.$isFieldPager ? list.page : list;
				isPageDown ? syra_menus.click.next(article, isShift) : syra_menus.click.prev(article, isShift);
			}
		}
	}
}

var _timeoutSelect;

exports.validateKeyPress = function(list, charCode, event) {
	if (list.$item.$isSelBoxList) {
		clearTimeout(list._searchTimer);
		list._searchTerm = (list._searchTerm || "") + charCode;
		list._searchTimer = setTimeout(function() {
			var focused = _getFocusRecord(list, true);
			if (focused) {
				var search = list.searcher && list.searcher.incrementalSearch(event, list._searchTerm);
				if (search) {
					var newFocused = list.records[search.$serverIndex];
					if (newFocused && newFocused != focused) {
						(list.focusedRecord = newFocused).highlightOnEnter(true);
						newFocused.scrollToRecord();
					}
				}
			}
			list._searchTerm = "";
		}, 100);
		event.preventDefault();
	}
	return true;
};


exports.applyShortCut = function(list, shortcuts, event) {
	if (shortcuts["+"] || shortcuts["-"]) {
		if (list.treeDecorator) {
			if (event.shiftKey) {
				list.treeDecorator.openAll(shortcuts["+"]);
			} else {
				var record = _getFocusRecord(list, !list.$item.$isNavigationList);
				if (record && record.treeNode) {
					if (record.treeNode.isOpened !== !! shortcuts["+"]) {
						record.treeNode.expandBtn.link.click();
					}
				}
			}
			return true;
		}
	}
	if (shortcuts.pagedown || shortcuts.pageup) {
		if (list.paging) {
			_goToPage(list, shortcuts.pagedown, event.shiftKey);
			event.preventDefault();
			return true;
		}
	}
	if (!list.isSingList && (shortcuts.enter || shortcuts.up || shortcuts.down)) {
		if (_timeoutSelect) {
			clearTimeout(_timeoutSelect);
			_timeoutSelect = null;
		}
		var focused = _getFocusRecord(list, true);
		if (shortcuts.down || shortcuts.up) {
			var newFocused;
			if (focused) {
				var index = focused.getRecordIndex();
				if (list.treeDecorator) {
					index = list.treeDecorator.getPrevNextRecord(focused, shortcuts.down);
				} else {
					if (shortcuts.down) {
						index = (index < list.clientDataset.length - 1) ? index + 1 : index;
					} else {
						index = index > 0 ? index - 1 : index;
					}
				}
				newFocused = list.records[index];
			} else {
				newFocused = list.records.length && list.records[0];
			}
			if (newFocused != focused) {
				(list.focusedRecord = focused = newFocused).highlightOnEnter(true);
				newFocused.scrollToRecord();
			}
		}
		if (focused && focused.domItem) {
			if ((shortcuts.enter || list.$item.$isNavigationList) && !list.treeDecorator) {
				_timeoutSelect = setTimeout(function() {
					focused.domItem.click();
				}, 200);
			}
		}
		event.preventDefault();
		return true;
	}
	return false;
};