"use strict";

function _getTitleChoice(value, colProperties) {
	var result = "";
	if (colProperties.$enum) {
		for (var ii = 0; ii < colProperties.$enum.length; ii++) {
			var $item = colProperties.$enum[ii];
			if ($item.$value == value) {
				result = $item.$title;
				break;
			}
		}
	}
	return result;
}

function _compare(value, datasetValue, colProperties, incrementalSearch) {
	switch (colProperties.$type) {
		case "application/x-date":
		case "application/x-time":
		case "application/x-datetime":
		case "application/x-integer":
		case "application/x-decimal":
		case "application/x-real":
		case "application/x-quantity":
			if (!datasetValue.toLowerCase) {
				datasetValue = new String(datasetValue);
			}
		case "application/x-string":
			var ii = datasetValue.toLowerCase().indexOf(value.toLowerCase());
			return incrementalSearch ? (ii == 0) : (ii != -1);
		case "application/x-choice":
			var ii = _getTitleChoice(datasetValue, colProperties).toLowerCase().indexOf(value.toLowerCase());
			return incrementalSearch ? (ii == 0) : (ii != -1);
		case "application/x-icon":
			return false;
		case "application/x-boolean":
			return false;
	}
	return false;
}

function _startIndexes(searcher, next) {
	var startIndex = {
		row: 0,
		col: 0
	};
	var changeLine = false;
	if (searcher.start && searcher.start.$bind) {
		for (var ii = 0; ii < searcher.orderCols.length; ii++) {
			if (searcher.orderCols[ii].$bind == searcher.start.$bind) {
				if (next) {
					startIndex.col = (ii < searcher.orderCols.length - 1) ? (ii + 1) : 0;
					changeLine = !startIndex.col;
				} else {
					startIndex.col = (ii == 0) ? (searcher.orderCols.length - 1) : ii - 1;
					changeLine = !(startIndex.col == ii - 1);
				}
				searcher.start.$bind = searcher.orderCols[startIndex.col].$bind;
				break;
			}
		}
	}
	if (searcher.start && searcher.start.$uuid != undefined) {
		var list = searcher.list;
		for (var ii = 0; ii < list.clientDataset.length; ii++) {
			if (list.clientDataset[ii].$uuid == searcher.start.$uuid) {
				if (changeLine && next) {
					startIndex.row = (ii < list.clientDataset.length - 1 ? ii + 1 : ii);
				} else
				if (changeLine && !next) {
					startIndex.row = (ii > 0 ? ii - 1 : ii);
				} else {
					startIndex.row = ii;
				}
				searcher.start.$uuid = list.clientDataset[startIndex.row].$uuid;
				break;
			}
		}
	}
	return startIndex;
}


function _run(searcher, value, next, notFound, incrementalSearch) {
	var startIndexes = _startIndexes(searcher, next);
	var toRow = (next ? searcher.list.clientDataset.length : -1);
	var toCol = (next ? searcher.orderCols.length : -1);
	var found, dataset;
	for (var ii = startIndexes.row;
		(next && ii < toRow) || (!next && ii > toRow);
		(next ? ii++ : ii--)) {
		for (var jj = startIndexes.col;
			(next && jj < toCol) || (!next && jj > toCol);
			(next ? jj++ : jj--)) {
			dataset = searcher.list.treeDecorator ? searcher.list.records[ii].dataset : searcher.list.clientDataset[ii];
			if (dataset[searcher.orderCols[jj].$bind] && _compare(value, dataset[searcher.orderCols[jj].$bind], searcher.orderCols[jj], incrementalSearch)) {
				searcher.setStart(dataset.$uuid, searcher.orderCols[jj].$bind, dataset.$serverIndex);
				return searcher.start;
			}
		}
		startIndexes.col = next ? 0 : searcher.orderCols.length - 1;
		toCol = next ? searcher.orderCols.length : -1;
	}
	if (!notFound) {
		if (searcher.start && searcher.start.$uuid) {
			searcher.start = {};
		}
		return _run(searcher, value, next, true, incrementalSearch);
	}
	searcher.start = {};
	return null;
}

function _click(event) {
	this.parent && this.parent.onClick(this.key, event);
}

function Searcher(list) {
	this.list = list;
	this.start = {};

	syra_button.add({
		parent: this,
		slot: list.searcherSlot,
		text: syra_local.flSearch,
		iconOnly: true,
		css: list.$mnPickersCss,
		fontIcon: "search",
		click: _click,
		key: "$searchCollapse"
	});

	this._fieldSlot = document.createElement("div");
	this._fieldSlot.className = "s-array-search-value";
	this._fieldSlot.style.display = "none";

	this._itemSearchField = list.page.addItem(list.searcherSlot.appendChild(this._fieldSlot), {
		$bind: "$search",
		$css: "s-array-search-field",
		$category: "field",
		$isEditMode: true,
		$inplace: true,
		$field: {
			$type: "application/x-string",
		}
	}, list);
	this._itemSearchField.useDefaultUpdate = true;
	this._itemSearchField.notifyFieldChange = function() {
		return false;
	};
	this._itemSearchField.applyShortCut = function(shortcuts, event) {
		if (shortcuts.enter) {
			var list = this.articleParent;
			if (list.isArrayField && list.searcher && list.searchNext) {
				list.searcher.onClick(list.searchNext.key, event);
			}
			return true;
		}
	};

	list.searchNext = syra_button.add({
		parent: this,
		slot: this._itemSearchField._dataValue,
		text: syra_local.flSearch_next,
		iconOnly: true,
		css: "s-array-search-goto",
		fontIcon: "expand_s",
		click: _click,
		key: "$searchNext"
	});

	syra_button.add({
		parent: this,
		slot: this._itemSearchField._dataValue,
		text: syra_local.flSearch_prev,
		iconOnly: true,
		css: "s-array-search-goto",
		fontIcon: "collapse_s",
		click: _click,
		key: "$searchPrevious"
	});
	syra_dom.hide(list.searcherSlot, list.$item.$graphPosition == "front");
}

Searcher.prototype.unload = function() {
	if (this._itemSearchField) {
		syra_item.remove(this._itemSearchField);
		delete this._itemSearchField;
	}
	syra_dom.hide(this.list.searcherSlot, true);
	this._itemSearchField = this._fieldSlot = null;
};
Searcher.prototype.onClick = function($bind, event) {
	var self = this;
	switch ($bind) {
		case "$searchCollapse":
			if (self._fieldSlot) {
				if (self._fieldSlot.style.display == "none") {
					self._fieldSlot.style.display = "";
					self._itemSearchField.focus();
				} else {
					self._fieldSlot.style.display = "none";
				}
			}
			break;
		case "$searchNext":
		case "$searchPrevious":
			var found, value = self._itemSearchField.getInputValue();
			if (value === "") {
				return false;
			}
			self._ensureOrderCols();
			if (found = _run(self, value, ($bind == "$searchNext"))) {
				self.list.page.externalAdapter.onSearchClickEvent({
					field: self.list,
					found: found,
					event: event,
					doEvent: function() {
						self.list.focus(true, found.$bind, found.$serverIndex);
					}
				});
			}
			break;
	}
};
Searcher.prototype._ensureOrderCols = function() {
	var colProperties = {};
	this.orderCols = [];
	var orderCols = this.list.builder.allColumns;
	for (var ii = 0; ii < orderCols.length; ii++) {
		var col = orderCols[ii];
		if (col.key == "$treeview") {
			col = {
				$bind: this.list.$prototype.$treeview.$bindings.$description
			};
		}
		if (!col.$isHidden && col.$bind) {
			colProperties = {};
			colProperties.$bind = col.$bind;
			colProperties.$type = this.list.$fields[col.$bind].$type;
			if (this.list.$fields[col.$bind].$value && this.list.$fields[col.$bind].$value.$enum) {
				colProperties.$enum = this.list.$fields[col.$bind].$value.$enum;
			}
			this.orderCols.push(colProperties);
		}
	}
};
Searcher.prototype.incrementalSearch = function(event, incrementalSearchValue) {
	if (incrementalSearchValue === "") {
		return {};
	}
	this._ensureOrderCols();
	return _run(this, incrementalSearchValue, true, null, true);
};
Searcher.prototype.setStart = function($uuid, $bind, $serverIndex) {
	this.start = {
		$uuid: $uuid,
		$bind: $bind,
		$serverIndex: $serverIndex
	};
};

exports.add = function(list) {
	if (!list.searcher && list.$capability.search && list.$item.$isSearchHidden !== true) {
		list.searcher = new Searcher(list);
	}
};