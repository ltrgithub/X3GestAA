"use strict";
var _helpers = require('syracuse-core').helpers;
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;
var _queryFilters = require("syracuse-ui/lib/field/array/tools/queryFilters");
var _clientFilter = require('syracuse-ui/lib/filter/clientFilter');

exports.trigger = function(list, options, $url) {
	if (!list.disposed && !list.isReloading) {
		options = options || {};
		var params = {
			where: list.$where,
			select: list.$select
		};
		if (options) {
			if (options.$filters) {
				params.filter = (options.$filters == "$noFilters") ? "null" : options.$filters;
				_queryFilters.onFetch(list, list.paramsFilter = params.filter);
			} else {
				if (list.paramsFilter) {
					params.filter = list.paramsFilter;
				}
			}
			params.startIndex = options.startIndex;
			params.count = list.paging.getItemsPerPage(options.$itemsPerPage);
			if (options.filter != null) {
				params.startIndex = 1;
				params.where = list.$where = options.filter != "" ? options.filter : null;
			}
			if (options.queryBindings) {
				if (options.queryBindings.length == 0) {
					var $binds = Object.keys(list.$fields);
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						options.queryBindings.push($binds[ii]);
					}
				}
				list.select = options.queryBindings.map(function(binding) {
					return binding.replace(/\./g, '/');
				}).join(',');
			}
		}

		if (options.orderBy !== undefined) {
			params.startIndex = 1;
			list.$orderBy = options.orderBy;
		}
		if (list.$orderBy !== undefined) {
			params.orderBy = list.$orderBy ? _helpers.url.formatOrderBy(list.$orderBy) : null;
		}

		var fetchOptions = {
			params: params
		};
		if (list.isClientFetch || list.isClientSortEnable) {
			var $keys = Object.keys(options);
			exports.fetchClientRecordSet(list, fetchOptions, $keys.length == 1 && ($keys == "$itemsPerPage" || $keys == "startIndex"));
		} else {
			fetchOptions.field = list;
			fetchOptions.$url = $url;
			if (params.where !== undefined) {
				list.page.$prototype.$where = params.where;
			}
			if (params.filter !== undefined) {
				list.page.$prototype.$filter = params.filter;
			}
			list.page.fetch(fetchOptions, function(data, response, requestUrl) {
				list.page.isMainPage && syra_url.history.update(list.page, requestUrl);
				if (list.page.dataset) {
					delete list.page.dataset[list.$item.$bind];
					var steps = ["$first", "$previous", "$next", "$last"];
					var $links = list.page.dataset.$links || {};
					for (var ii = steps.length - 1; ii >= 0; ii--) {
						delete $links[steps[ii]];
						delete list.page.$menus[steps[ii]];
					}
				}
				if (list.page.$properties) {
					delete list.page.$properties[list.$item.$bind];
				}
				if (!data) {
					var meta = {
						$diagnoses: [{
							severity: "error",
							message: syra_local.flFetchDataFailed
						}]
					};
					meta[list.$item.$bind] = [];
					list.articleParent.applyChange(meta);
				} else {
					list.page.startChange();
					list.page.applyChange(data, response, requestUrl);
					list.page.endChange();
				}
			});
		}
	}
};

exports.applyClientFetchOptions = function(list, options, pagingChange) {
	syra_dataset.ensure(list);
	if (!pagingChange || (list.clientDataset == list.dataset)) {
		list.clientDataset = [];
		for (var ii = 0, jj = list.dataset.length; ii < jj; ii++) {
			var dataRecord = list.dataset[ii];
			list.clientDataset.push(dataRecord);
		}
	}
	if (options && options.params && !pagingChange) {
		if (options.params.where) {
			list.clientDataset = _clientFilter.apply(options.params.where, list.clientDataset, list.$fields);
		}
		if (options.params.orderBy !== undefined) {
			list.sorter.applyClientFetchOptions(options.params);
		}
	}
};
exports.fetchClientRecordSet = function(list, options, pagingChange) {
	if (options && options.params) {
		list.page._isDataChanging = true;
		exports.applyClientFetchOptions(list, options, pagingChange);
		if (options.params.count || options.params.startIndex) {
			list.paging.ensureClientRange(options.params.count, options.params.startIndex);
		}
		list.clientFetchOptions = options;
		list.fillList(list.clientDataset, list.articleParent.dataset);
		list.page._isDataChanging = false;
		list.resizeItem(true);
		syra_quality.page_endChange(list.page);
	}
};

exports.ensureClientDataset = function(list) {
	if (!list.clientDataset) {
		list.clientDataset = syra_dataset.ensure(list);
	}
	return list.clientDataset;
};

exports.getClientDataSetIndex = function(list, $serverIndex) {
	exports.ensureClientDataset(list);
	for (var ii = 0, jj = list.clientDataset.length; ii < jj; ii++) {
		if (list.clientDataset[ii].$serverIndex == $serverIndex) {
			return ii;
		}
	}
	return -1;
};

function _applyFullDelta(list, dataRecordSet, range, updatedMap) {
	var oldMap = list.recordsMap;
	list.recordsMap = {};
	var oldRecords = list.records;
	list.records = [];
	var lastRecord, recordIndex = 0;
	for (var ii = range.start; ii <= range.last; ii++) {
		var dataRecord = dataRecordSet[ii];
		var $index = dataRecord.$serverIndex;
		if ($index === undefined) {
			$index = dataRecord.$index;
		}
		if ($index === undefined) {
			$index = ii;
		}
		var sourceDataset = list.dataset[$index];
		if (sourceDataset) {
			var record = oldMap[dataRecord.$uuid];
			if (record) {
				syra_dataset.ensure(record, dataRecord.$uuid);
				var updatedRecord = updatedMap && updatedMap[dataRecord.$uuid];
				list.recordsMap[dataRecord.$uuid] = record;
				list.records.push(record);
				record.applyChange(updatedRecord || dataRecord);
				record.$serverIndex = sourceDataset.$serverIndex;
				if (oldRecords.indexOf(record) != recordIndex) {
					if (lastRecord) {
						list.builder.record_reorder(record, lastRecord, true);

					} else {
						list.builder.record_reorder(record, null, false);
					}
				}
			} else {
				record = exports.addRecord(list, {
					dataRecord: sourceDataset,
					$recordIndex: recordIndex
				});
			}
			lastRecord = record;
			recordIndex++;
		}
		delete oldMap[dataRecord.$uuid];
	}
	var uiids = Object.keys(oldMap);
	for (var ii = 0, jj = uiids.length; ii < jj; ii++) {
		exports.removeRecord(oldMap[uiids[ii]], true);
		delete oldMap[uiids[ii]];
	}
};

function _applyPartialDelta(list, deltaSet, range) {
	for (var $serverIndex = 0, jj = deltaSet.length; $serverIndex < jj; $serverIndex++) {
		var deltaRecord = deltaSet[$serverIndex];
		var record = list.recordsMap[deltaRecord.$uuid];
		if (record) {
			var index = parseInt(deltaRecord.$index, 10);
			if (deltaRecord.$isDeleted || (range.start > index) || (range.last < index)) {
				exports.removeRecord(record, true, true);
			} else {
				var recordIndex = null,
					prevIndex = null;
				if (deltaRecord.$index !== undefined) {
					prevIndex = list.records.indexOf(record);
					if (prevIndex != deltaRecord.$index) {
						recordIndex = deltaRecord.$index - range.start;
					} else {
						prevIndex = null;
					}
				}
				syra_dataset.ensure(record, record.$uuid);
				record.applyChange(deltaRecord);
				if (prevIndex !== null) { //not process if list.clientFetchOptions
					var nextRecord = (recordIndex < list.records.length) && list.records[recordIndex];
					list.records.splice(prevIndex, 1);
					list.records.splice(recordIndex, 0, record);
					list.builder.record_reorder(record, nextRecord, nextRecord ? false : true);
				}
			}
		} else {
			if (!deltaRecord.$isDeleted) {
				var index = parseInt(deltaRecord.$index, 10);
				if (!((range.start > index) || (range.last < index))) {
					exports.addRecord(list, {
						dataRecord: list.dataset[deltaRecord.$index],
						$recordIndex: deltaRecord.$index
					});
				}
			}
		}
	}
};


exports.fill = function(list, dataRecordSet, parentDataRecord, isDelta) {
	if (isDelta) {
		var updatedMap = {};
		if (!list.isSingList && dataRecordSet) {
			for (var ii = dataRecordSet.length - 1; ii >= 0; ii--) {
				updatedMap[dataRecordSet[ii].$uuid] = dataRecordSet[ii];
			}
		}
		var partialDelta = list.page.$isPartialDelta || (dataRecordSet.length == 1 && dataRecordSet[0].$index !== undefined);
		if (list.clientFetchOptions) {
			exports.applyClientFetchOptions(list, list.clientFetchOptions);
			if (list.paging.$startIndex !== undefined && list.clientDataset.length < list.paging.$startIndex) {
				list.paging.ensureClientRange();
				list.clientFetchOptions.params.startIndex = list.paging.$startIndex;
			}
			_applyFullDelta(list, list.clientDataset, list.paging.getParseIndexes(), updatedMap);
		} else {
			list.clientDataset = syra_dataset.ensure(list);
			if (partialDelta) {
				_applyPartialDelta(list, dataRecordSet, list.paging.getParseIndexes());
			} else {
				_applyFullDelta(list, dataRecordSet, list.paging.getParseIndexes());
			}
		}
	} else {
		list.clientDataset = list.isSingList ? syra_dataset.ensure(list) : dataRecordSet;
		list.showBody(false);
		exports.removeRecords(list);
		if (list.clientDataset) {
			var range;
			//warn: list.onClientFetch =true and list.isClientFetch=false for convergence left list
			if (list.isClientFetch) {
				if (list.paging.$startIndex !== undefined && list.clientDataset.length < list.paging.$startIndex) {
					list.paging.ensureClientRange();
				}
				range = list.paging.getParseIndexes();
			} else {
				range = {
					start: 0,
					last: list.clientDataset.length - 1
				};
			}
			for (var ii = range.start; ii <= range.last; ii++) {
				var dataRecord = list.clientDataset[ii];
				if (!dataRecord.$isDeleted) {
					exports.addRecord(list, {
						dataRecord: dataRecord
					});
				}
			}
		}
	}
	exports.validateDisplay(list);
};

function _disableAdd(list, isAddDisabled) {
	list._isAddDisabled = isAddDisabled;
	if (list.menuItems) {
		if (list.menuItems.$create) {
			list.menuItems.$create[0].disable(list._isAddDisabled);
		}
		if (list.menuItems.$select) {
			list.menuItems.$select[0].disable(list._isAddDisabled);
		}
	}
	if (list.$capability.insert) {
		for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
			var record = list.records[ii];
			if (record.menuItems.$create) {
				record.menuItems.$create[0].disable(list._isAddDisabled);
			}
		}
	}
}

exports.validateDisplay = function(list) {
	if (!list.disableDisplayValidation) {
		var showAlt = true;
		list.greatestRowIndex = null;
		var count = list.records.length;
		if (list.builder.emptyDataItem) {
			if (!count) {
				if (!list.isClientFetch && list.onDataFetch) {
					list.builder.emptyDataItem.textContent = syra_local.flWaitingData;
				} else {
					list.builder.emptyDataItem.textContent = list.$item.$noDataText || syra_local.flNoData;
				}
			}
			delete list.onDataFetch;
			if (list.showEmptyItem) {
				list.showEmptyItem(!count);
			} else {
				syra_dom.hide(list.builder.emptyDataItem, count);
			}
		}

		for (var ii = 0; ii < count; ii++) {
			var record = list.records[ii];
			if (record.dataset.$index !== undefined) {
				record.dataset.$index = ii;
			}
			if (record.dataset.$serverIndex == undefined) {
				if (record.singleField) {
					record.dataset.$serverIndex = ii;
				} else {
					for (var mm = 0, kk = list.dataset.length; mm < kk; mm++) {
						if (list.dataset[mm] == record.dataset) {
							record.dataset.$serverIndex = mm;
							break;
						}
					}
				}
			}
			record.$serverIndex = record.dataset.$serverIndex;
			if (list.greatestRowIndex < record.$serverIndex) {
				list.greatestRowIndex = record.$serverIndex;
			}
			record.setRowIndex && record.setRowIndex();
			if (!record.treeNode && list.$item.$alternateStyle) {
				showAlt = !showAlt;
				record.alternateStyle(showAlt);
			}
			if (record.expandRowCard) {
				list.builder.toggleRowCard(record, true);
			}
			if (record.isCreated) {
				syra_layout.validateLayoutContent(record);
				record.isCreated = false;
			}

		}
		//_checkMaxItems
		if (list.$isEditMode) {
			if (list.$prototype.$minItems) {
				while (list.records.length < list.$prototype.$minItems) {
					exports.addRecord(list, {
						dataRecord: {}
					});
				}
			}
			if (list.$prototype.$maxItems) {
				if (list._isAddDisabled !== (list.$prototype.$maxItems <= list.dataset.length)) {
					_disableAdd(list, !list._isAddDisabled);
				}
			}
		}
	}
};

exports.addRecord = function(list, options) {
	if (list.isSingList) {
		options.dataRecord = {
			$singleField: options.dataRecord
		};
		options.$prototype = {
			$properties: {
				$singleField: list.$prototype.$item
			}
		};
	}
	if (options.dataRecord.$uuid === undefined) {
		options.dataRecord.$uuid = options.$recordIndex || list.records.length;
	}
	var record = (list.recordsMap[options.dataRecord.$uuid] = new RecordArticle());
	record.isCreated = true;
	record.arrayLevel = "record";
	record.$uuid = options.dataRecord.$uuid;
	list.recordsMap[record.$uuid] = record;
	if (options.$recordIndex !== undefined) {
		record.insertBeforeRecord = list.records[options.$recordIndex];
		list.records.splice(options.$recordIndex, 0, record);
	} else {
		list.records.push(record);
	}
	record.garbage = list.garbage;
	if (options.dataRecord) {
		record.dataset = options.dataRecord;
		record.$serverIndex = options.dataRecord.$serverIndex;
	}
	record.$facet = list.$recordFacet;
	record.$isEditMode = list.$isEditMode && !list.treeDecorator;
	record.list = list;
	record.$prototype = options.$prototype || list.$prototype.$item;
	syra_item.initialize(list.page, record, options.$item || {}, list);
	record.load(null, options.isCreateAction);
	record.applyChange(list.ensureGlobalMetaRecord());
	options.dataRecord && record.applyChange(options.dataRecord);
	list.builder.onAfterAddRecord && list.builder.onAfterAddRecord(record);
	return record;
};


exports.removeRecord = function(record, removeDom, removeContext) {
	var list = record.list;
	if (record.treeNode && list.treeDecorator) {
		record.treeNode = null;
	}
	if (removeContext) {
		list.records.splice(list.records.indexOf(record), 1);
		delete list.recordsMap[record.$uuid];
	}
	syra_item.remove(record, removeDom);
};

exports.removeRecords = function(list) {
	for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
		var record = list.records[ii];
		delete list.recordsMap[record.$uuid];
		exports.removeRecord(record);
	}
	list.recordsMap = {};
	list.records = [];
	if (list.selector && list.selector.clear) {
		list.selector.clear();
	}
	list.emptyBody();
};


function _addEmptyItem(list, onFetch) {
	var empty = list.builder.emptyDataItem = syra_dom.div(list.$skin + "-empty-slot");
	if (!list.isClientFetch && onFetch) {
		empty.textContent = syra_local.flWaitingData;
	} else {
		empty.textContent = list.builder.emptyMessage || list.$item.$noDataText || syra_local.flNoData;
	}
	list.body.appendChild(empty);
}

exports.emptyBody = function(list) {
	syra_dom.empty(list.body);
};

function _notifySelectRecords(list, menuItem) {
	if (list.currentSelectRecords) {
		var sendBag = syra_form.getSendBag(list);
		var dataRecords = syra_dataset.ensure(list);
		var $uuids = Object.keys(list.currentSelectRecords);
		var hasNew, lastRecord;
		if (list.isSingList) {
			sendBag.dataRecords = dataRecords;
			for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
				var options = {
					isCreateAction: true,
					dataRecord: list.currentSelectRecords[$uuids[ii]].dataset
				};
				switch (list.$prototype.$item.$type) {
					case "application/x-choice":
						options.dataRecord = options.dataRecord.$uuid;
						break;
					case "application/x-reference":
						delete options.dataRecord.$serverIndex;
						delete options.dataRecord.$isSelected;
						break;
				}
				if (menuItem.$item.$variantItemKey) {
					var variantValue = options.dataRecord;
					(options.dataRecord = {})[menuItem.$item.$variantItemKey] = variantValue;
				}
				dataRecords.push(options.dataRecord);
				lastRecord = exports.addRecord(list, options);
				hasNew = true;
			}
		} else {
			var $newRecords = [];
			for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
				if (!exports.findDataRecord(list, $uuids[ii])) {
					$newRecords.push(list.currentSelectRecords[$uuids[ii]].dataset);
					hasNew = true;
				}
			}
			if (hasNew) {
				if ($newRecords.length == 1) {
					$newRecords[0].$index = list.dataset.length;
					sendBag.dataRecords = $newRecords;
				} else {
					sendBag.dataRecords = [];
					for (var ii = 0, jj = list.dataset.length; ii < jj; ii++) {
						sendBag.dataRecords.push({
							$uuid: list.dataset[ii].$uuid
						});
					}
					sendBag.dataRecords = sendBag.dataRecords.concat($newRecords);
				}
			}
		}
		if (hasNew) {
			exports.validateDisplay(list);
			syra_form.updateDelta(list, sendBag.dataRecords);
			lastRecord && lastRecord.scrollToRecord();
		}
	}
}

exports.doSelectAction = function(list, menuItem) {
	list.currentSelectRecords = null;
	syra_over.openModal(list.boxParent, {
		article: list,
		$url: menuItem.$sourceUrl,
		onValidate: function() {
			_notifySelectRecords(list, menuItem);
		},
		onSelectRecord: function(selectedRecords) {
			list.currentSelectRecords = selectedRecords;
			return false;
		}
	});
};

exports.findDataRecord = function(list, $uuid) {
	var found;
	if (list.dataset) {
		for (var ii = 0, jj = list.dataset.length; ii < jj; ii++) {
			var dataRecord = list.dataset[ii];
			if (dataRecord && dataRecord.$uuid == $uuid) {
				found = {
					dataRecord: dataRecord,
					dataRecordIndex: ii
				};
				break;
			}
		}
	}
	return found;
};

exports.getField = function(list, name, $serverIndex, select) {
	var fields, record = syra_item.findRecordByServerIndex(list, $serverIndex);
	if (record && !record.disposed) {
		if ((fields = record.boundFields[name]) && fields.length > 0) {
			return (list.builder.findPopupCardField && list.builder.findPopupCardField(name, record)) || fields[0];
		}
	}
	return null;
};
exports.getValue = function(list, name, $serverIndex) {
	var dataRecordSet = syra_dataset.ensure(list);
	var field;
	if ($serverIndex !== undefined) {
		if (field = exports.getField(list, name, $serverIndex)) {
			return field.getValue();
		} else {
			for (var ii = 0, jj = dataRecordSet.length; ii < jj; ii++) {
				if (dataRecordSet[ii].$serverIndex == $serverIndex) {
					var value = dataRecordSet[ii][name];
					return value === undefined ? null : value;
				}
			}
		}
	}
	return null;
};

exports.focus = function(list, select, name, $serverIndex) {
	if (list.treeDecorator) {
		list.selector.selectRecord(syra_item.findRecordByServerIndex(list, $serverIndex), true);
		return true;
	}
	if (list.searcher) {
		list.searcher.setStart(list.dataset[$serverIndex].$uuid, name, $serverIndex);
	}
	var field = exports.getField(list, name, $serverIndex);
	if (!field) {
		if (list.isClientFetch && !syra_item.findRecordByServerIndex(list, $serverIndex)) {
			list.paging.setPage($serverIndex);
			field = exports.getField(list, name, $serverIndex);
		}
	}
	if (field) {
		if (list.builder.onFocusFieldChange) {
			list.builder.onFocusFieldChange(select, name, $serverIndex);
		}
		return field.focus(select);
	}
	return null;
};

exports.toggleFakeRecord = function(list, show) {
	var dataRecords = syra_dataset.ensure(list);
	if (show) {
		if (dataRecords.length == 0) {
			exports.ensureClientDataset(list);
			var options = {
				isCreateAction: true,
				$serverIndex: 0,
				dataRecord: {
					$isFakeRecord: true,
					$uuid: _helpers.uuid.generate()
				}
			};
			dataRecords.splice(options.$serverIndex, 0, options.dataRecord);
			exports.addRecord(list, options);
		}
	} else {
		if (list.records.length == 1) {
			var record = list.records[0];
			if (record.dataset.$isFakeRecord) {
				if (list.clientDataset) {
					list.clientDataset.splice(list.clientDataset.indexOf(record.dataset), 1);
				}
				list.records.splice(list.records.indexOf(record), 1);
				dataRecords.splice(list.clientDataset.indexOf(record.dataset), 1);
				delete list.recordsMap[record.$uuid];
				exports.removeRecord(record, true);
				list.emptyBody();
			}
		}
	}
};