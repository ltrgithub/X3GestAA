"use strict";
var helpers = require('syracuse-core/lib/helpers');

function PopupCardBuilder() {}

exports.PopupCardBuilder = helpers.defineClass(PopupCardBuilder, null, {
	load: function(list) {
		this.list = list;
	},
	findPopupField: function(name, record) {
		if (record.popupCardItem && this._recordPopupCard == record) {
			if (this.isPopupCardOpened() && !this._popupCard.dialog.disposed) {
				var found = null;
				var fields = record.boundFields[name];
				if (fields) {
					for (var ii = 0, jj = fields.length; !found && ii < jj; ii++) {
						var field = fields[ii];
						var boxParent = field.boxParent;
						while (boxParent && boxParent != record) {
							if (boxParent == record.popupCardItem) {
								found = field;
								break;
							}
							boxParent = boxParent.boxParent;
						}
					}
				}
				return found;
			}
		}
		return null;
	},
	isPopupCardOpened: function() {
		return this._popupCard && this._popupCard.dialog;
	},
	togglePopup: function(record) {
		var self = this;
		if (record) {
			if (!(self._popupCard && self._recordPopupCard == record)) {
				if (self._popupCard) {
					self.list.selector.select(record.$uuid, true); //ensure selection
				} else {
					self.list.page.externalAdapter.onFieldClickPicker({
						field: record,
						pickerType: "openCard",
						doEvent: function() {
							self._popupCard = {
								slot: document.createElement("div"),
								slotHeader: document.createElement("div"),
								slotCard: document.createElement("div")
							};
							self._popupCard.slot.className = "s-popupcard-slot";
							self._popupCard.slot.appendChild(self._popupCard.slotHeader).className = "s-popupcard-slot-header";
							self._popupCard.slotCard.className = "s-popupcard-slot-body";
							self._popupCard.slot.appendChild(self._popupCard.slotCard);
							if (!record.popupCardItem) {
								self.list.selector.select(record.$uuid, true); //ensure selection
							}
							var offsetRow = $(record.dataRow).offset();
							self.togglePopupCardMenu(self._recordPopupCard, false);
							(self._popupCard.dialog = record.page.openDialog({
								isAutoClose: false,
								$dialogMode: "modal",
								content: record.popupCardItem,
								$dialogSize: "content",
								$$scrollview: $(self._popupCard.slotCard),
								dragSpot: self._popupCard.slotHeader,
								$$dialog: $(self._popupCard.slot),
								onresize: function(dialog) {
									self._popupCard.slotCard.style.width = dialog.$$dialogSlot.width() + "px";
									self._popupCard.slotCard.style.height = (dialog.$$dialogSlot.height() - self._popupCard.slotHeader.offsetHeight) + "px";
								},
								onClose: function() {
									if (self._popupCard) {
										self.list.page.externalAdapter.onFieldClickPicker({
											field: self._recordPopupCard,
											pickerType: "closeCard",
											doEvent: function() {
												document.site.removeDomChild(self._popupCard.slot);
												document.controller.disposeObject(self._popupCard.dialog);
												self._popupCard.slot = self._popupCard.slotHeader = null;
												self._popupCard = null;
												self.togglePopupCardMenu(self._recordPopupCard, true);
											}
										});
									}
									return true;
								},
								onOpened: function(content) {
									self.list.page.externalAdapter.onFieldClickPicker({
										field: self._recordPopupCard,
										pickerType: "openedCard",
										doEvent: function() {}
									});
									self._recordPopupCard.applyChange(self.list.ensureGlobalMetaRecord());
								}
							})).appendCloseButton(self._popupCard.slotHeader);
						}
					});
				}
				return;
			}
		}
		//._recordPopupCard
		if (self._popupCard && self._popupCard.dialog) {
			self._popupCard.dialog.close();
		}
	},
	togglePopupCardMenu: function(record, show) {
		if (record && record.builder && record.builder.$popupCard) {
			record.applyActionLinkChange({
				$links: {
					$recordCard: {
						$isHidden: !show,
						$title: record.list.localize.flPopupView
					}
				}
			});
		}
	},
	toggleCard: function(record, show) {
		if (this._popupCard) {
			if (show) {
				if (this._recordPopupCard) {
					if (this._recordPopupCard.popupCardItem) {
						this._recordPopupCard.popupCardItem.$$item.detach();
					}
				}
				this._recordPopupCard = record;
				document.site.emptyDom(this._popupCard.slotCard);
				var $pagerActions;
				if (!record.popupCardItem && record.list.isClientFetch) {
					var $popupCard = this.list.builder.$popupCard;
					$popupCard.$isTitleHidden = !($popupCard.$title && $popupCard.$title != "-");
					$popupCard = {
						$layout: {
							$items: [{
									$layoutType: "row",
									$autoSize: true,
									$items: [{
										$category: "menus",
										$title: "-",
										$masterFriendMenuId: record.id + "-menu-picker",
										$isTitlePicker: true,
										$isBoxCollapsable: true,
										$isPopupContent: true,
										$id: record.id + "-card-menu-picker",
										$skin: "s-list-menus",
										$itemSkin: "s-record-menus-link",
										$layout: {
											$items: [{
												$layoutType: "stack",
												$items: [{
													$bind: "$create",
													$icon: {
														$mode: "iconText",
														$path: "list/s-list-"
													}
												}, {
													$bind: "$edit",
													$icon: {
														$mode: "iconText",
														$path: "list/s-list-"
													}
												}, {
													$bind: "$delete",
													$icon: {
														$mode: "iconText",
														$path: "list/s-list-"
													}
												}]
											}]
										}
									}]
								},
								$popupCard
							]
						}
					};
					if (this.list.dataset.length > 1) {
						var $pagerMenus = {
							$category: "menus",
							$isTitlePicker: true,
							$skin: "s-page-pager",
							$itemIcon: {
								$mode: "iconText",
								$path: "list/s-record-"
							},
							$layout: {
								$layoutType: "row",
								$autoSize: true,
								$items: [{
									$bind: "$first"
								}, {
									$bind: "$previous"
								}, {
									$bind: "$next"
								}, {
									$bind: "$last"
								}]
							}
						};
						$popupCard.$layout.$items[0].$items.push($pagerMenus);
						$pagerActions = {
							$actions: {
								$first: {
									$title: this.list.localize.flCardFirstRecord,
									$isDisabled: this.list.pagging.$startIndex == 1 && record.$recordIndex == 0
								},
								$previous: {
									$title: this.list.localize.flCardPrevRecord,
									$isHidden: this.list.dataset.length <= 2,
									$isDisabled: this.list.pagging.$startIndex == 1 && record.$recordIndex == 0
								},
								$next: {
									$title: this.list.localize.flCardNextRecord,
									$isHidden: this.list.dataset.length <= 2,
									$isDisabled: (this.list.pagging.$startIndex + record.$recordIndex) == this.list.dataset.length
								},
								$last: {
									$title: this.list.localize.flCardLastRecord,
									$isDisabled: (this.list.pagging.$startIndex + record.$recordIndex) == this.list.dataset.length
								}
							}
						};
					}
				}
				this._popupCard.slotCard.setAttribute("data-s-record", record.$uuid);
				this._popupCard.slotCard.setAttribute("data-s-article", record.id);
				if (!record.popupCardItem) {
					record.popupCardItem = this.list.page.loadNewItem(this._popupCard.slotCard, $popupCard, record);
				} else {
					this._popupCard.slotCard.appendChild(record.popupCardItem.$$item[0]);
				}
				if (this.isPopupCardOpened()) {
					this._popupCard.dialog._content = this._popupCard.dialog.options.content = record.popupCardItem;
				}
				if ($pagerActions) {
					record.applyActionLinkChange($pagerActions);
				}
			}
			this.togglePopupCardMenu(record, !show);
		}
	},
	dispose: function() {
		this.list = this._popupCard = this._recordPopupCard = null;
	}
});