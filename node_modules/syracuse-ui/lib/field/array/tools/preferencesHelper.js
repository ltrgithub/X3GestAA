"use strict";

function _saveOrig(list) {
	list.$origItem = {
		$columns: [],
		$itemsPerPage: list.$item.$itemsPerPage
	};
	var $items = list.$item.$layout.$items;
	for (var ii = 0, jj = $items.length; ii < jj; ii++) {
		list.$origItem.$columns.push($items[ii].$bind);
	}
}

exports.clearPreferences = function(list) {
	if (list.$origItem) {
		var formatter = list.getListFomatter();
		formatter.resetReorder && formatter.resetReorder(list);
		list.pagging && list.pagging.reset();
	}

};

exports.onInitialize = function(list) {
	_saveOrig(list);
	list.$userPreferences = list.page.userPreferences && list.page.userPreferences.getForField(list.$item.$bind);
	if (list.$userPreferences) {
		if (list.$userPreferences.$itemsPerPage) {
			list.$item.$itemsPerPage = list.$userPreferences.$itemsPerPage;
		}
		if (list.$userPreferences.$columns) {
			var source = list.$item.$layout.$items;
			var $items = list.$item.$layout.$items = [];
			for (var ii = 0, jj = list.$userPreferences.$columns.length; ii < jj; ii++) {
				var $bind = list.$userPreferences.$columns[ii];
				var $item = list.bindMap[$bind];
				if ($item) {
					source.splice(source.indexOf($item), 1);
					$items.push($item);
				}
			}
			for (var ii = 0, jj = source.length; ii < jj; ii++) {
				$items.push(source[ii]);
			}
		}
	}
};

exports.save = function(list, key) {
	list.$userPreferences = list.$userPreferences || {};
	switch (key) {
		case "$itemsPerPage":
			list.$userPreferences.$itemsPerPage = list.pagging.getItemsPerPage();
			break;
		case "$columns":
			list.$userPreferences.$columns = [];
			for (var ii = 0, jj = list.$item.$layout.$items.length; ii < jj; ii++) {
				list.$userPreferences.$columns.push(list.$item.$layout.$items[ii].$bind);
			}
			break;
	}
	return list.$userPreferences;
};