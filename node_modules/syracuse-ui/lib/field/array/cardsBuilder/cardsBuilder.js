"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CardRecord = require('./cardRecord').CardRecord;

function CardsBuilder() {}

exports.CardsBuilder = helpers.defineClass(CardsBuilder, null, {
	initialize: function() {
		this.list.$item.$isTopLabelAlignment = true;
		this.RecordClass = CardRecord;
		if (!this.list.$item.$layout || !this.list.$item.$layout.$items) {
			this.list.$item.$layout = this.list.defineDefaultCard().$layout;
		}
	},
	createRow: function() {
		var row = {
			slot: document.createElement("div"),
			index: this.rows.length,
			count: 0,
			cells: [],
			max: this.$cardsByRowCount
		};
		row.cellWidth = Math.ceil(100 / row.max) + "%";
		row.slot.className = this.list.$skin + "-carditem-slot";
		return row;
	},
	appendDefaultCell: function(row) {
		var cell = document.createElement("div");
		cell.className = this.list.$skin + "-cell";
		cell.style.width = row.cellWidth;
		cell.visibility = "hidden";
		row.cells.push(row.slot.appendChild(cell));
	},
	applyDesignMetaData: function(metaData, designing) {
		if (designing) {
			if (metaData.$cardsByRowCount !== undefined) {
				this.$cardsByRowCount = this.list.$item.$cardsByRowCount = metaData.$cardsByRowCount;
				if (this.list.records.length) {
					var newRows = [],
						cellIndex = 0,
						curRow;
					for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
						var record = this.list.records[ii];
						if (cellIndex == 0) {
							newRows.push(curRow = this.createRow());
							this.body.appendChild(curRow.slot);
						}
						record.row = curRow;
						record.cellIndex = cellIndex;
						curRow.count = ++cellIndex;
						record.domItem.style.width = curRow.cellWidth;
						curRow.cells.push(curRow.slot.appendChild(record.domItem));
						if (curRow.count == this.$cardsByRowCount) {
							cellIndex = 0;
						}
					}
					if (curRow.count < curRow.max) {
						for (var ii = curRow.count; ii < curRow.max; ii++) {
							this.appendDefaultCell(curRow);
						}
					}
					for (var ii = 0, jj = this.rows.length; ii < jj; ii++) {
						document.site.removeDomChild(this.rows[ii].slot);
					}
					this.rows = newRows;
				}
			}
		}
		if (this.list.graphDecorator) {
			this.list.graphDecorator.applyDesignMetaData(metaData, designing);
		}
	},
	emptyBody: function(addEmptySlot, onFetch) {
		document.site.emptyDom(this.body);
		if (addEmptySlot) {
			var empty = document.createElement("div");
			empty.className = this.list.$skin + "-empty-slot";
			empty.textContent = (!this.list.isClientFetch && onFetch) ? this.list.localize.flWaitingData : (this.list.$item.$noDataText || this.list.localize.flNoData);
			this.body.appendChild(this.list.emptyDataItem = empty);
		}
		this.rows = [];
	},
	drawBuilder: function() {
		this.$cardsByRowCount = this.list.$item.$cardsByRowCount || 1;
		this.list.fieldValue.style.overflow = "auto";
		this.rows = [];
		this.list.$skin = this.list.$item.$skin || "s-cards";
		this.list.applyDesignMetaData(this.list.$item, false);
		this.list.tableSlot = document.createElement("div");
		this.list.tableSlot.className = "s-grid-slot";
		this.list._core.appendChild(this.list.tableSlot);
		this.list.tableSlot.appendChild(this.body = document.createElement("div"));
		this.list.loadSelector();
		this.body.className = this.list.$skin + "-body";
		this.list.applyCapabilities();
		this.list.ensureGrapDecorator();
		this.list.appendCardGraphSlots();
		document.site.ddManager.toggleColResizerObserver(this, true);
	},
	onWindowResize: function() {
		if (!this.disposed && this.list.records) {
			for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
				this.list.records[ii].resizeResizableChildren();
			}
		}
	},
	isDraggable: function(target, event) {
		if (this.list.addSlotResizer(target, event)) {
			return;
		}
		return this.list.isReorderRecordDraggable(target, event);
	},
	dispose: function() {
		document.site.ddManager.toggleColResizerObserver(this, false);
		this.list = this.rows = this.body = null;
	}
});