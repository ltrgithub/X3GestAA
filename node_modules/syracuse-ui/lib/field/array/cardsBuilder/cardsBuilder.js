"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CardRecord = require('./cardRecord').CardRecord;

function CardsBuilder(){
}

exports.CardsBuilder = helpers.defineClass(CardsBuilder, null, {
    initialize: function(){
        this.list.$item.$isTopLabelAlignment = true;
        this.list.$item.$cardsByRowCount = this.list.$item.$cardsByRowCount || 1;
        this.RecordClass = CardRecord;
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if (onAuthoring) {
            if (metaData.$cardsByRowCount !== undefined) {
                this.list.$item.$cardsByRowCount = metaData.$cardsByRowCount;
                this.list.reloadBuilder(true);
            }
            if (metaData.$graphMode !== undefined) {
                this._toggleDataList(metaData.$graphMode != "graph");
            }
        }
    },
    _toggleDataList: function(show){
        if (this._body) {
            this._body.style.display = show ? "" : "none";
        }
        else {
            this.list._core.appendChild(this._body = document.createElement("div"));
            this.list.helper.loadSelector(this.list);
            this.list.$recordCss = this.list.$skin + "-cell-record";
            this._body.className = this.list.$skin + "-cell-body";
        }
    },
    emptyBody: function(addEmptySlot, onFetch){
        document.site.emptyDom(this._body);
        if (addEmptySlot) {
            var empty = document.createElement("div");
            empty.className = this.list.$skin + "-empty-slot";
            empty.textContent = (!this.list.isClientFetch && onFetch) ? this.list._localize.l_waiting_data : (this.list.$item.$noDataText || this.list._localize.l_noData);
            this._body.appendChild(this.list.emptyDataItem = empty);
        }
        this.rows = [];
    },
    drawBuilder: function(){
        this.list.fieldValue.style.overflow = "auto";
        this.rows = [];
        this.list.$skin = this.list.$item.$skin || "s-cards";
        
        this.list.$item.$cards = (typeof(this.list.$item.$cards) === "object") ? this.list.$item.$cards : {
            $layout: {
                $items: this.list.$item.$layout.$items
            }
        };
        this.list.applyDesignMetaData(this.list.$item, false);
        this.list.helper.parseCapabilities(this.list);
        this._toggleDataList(true);
        this.list.applyCapabilities();
    },
    setRowIndexVisibility: function(){
    
    },
    appendCardsRow: function(){
        var row = {
            index: this.rows.length,
            count: 0,
            cells: [],
            max: this.list.$item.$cardsByRowCount || 1
        };
        row.slot = document.createElement("div");
        row.slot.className = this.list.$recordCss + "-row";
        this._body.appendChild(row.slot);
        var width = (100 / row.max) + "%";
        for (var ii = 0; ii < row.max; ii++) {
            var cell = document.createElement("div");
            cell.className = "s-cards-cell";
            cell.style.width = width;
            cell.visibility = "hidden";
            row.cells.push(row.slot.appendChild(cell));
        }
        this.rows.push(row);
        return row;
    },
    dispose: function(){
        this.list = this.rows = null;
    }
});
