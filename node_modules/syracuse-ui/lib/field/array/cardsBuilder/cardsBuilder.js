"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CardRecord = require('./cardRecord').CardRecord;

function CardsBuilder() {}

exports.CardsBuilder = helpers.defineClass(CardsBuilder, null, {
	initialize: function() {
		this.list.$item.$isTopLabelAlignment = true;
		this.list.$item.$cardsByRowCount = this.list.$item.$cardsByRowCount || 1;
		this.RecordClass = CardRecord;
	},
	applyDesignMetaData: function(metaData, designing) {
		if (designing) {
			if (metaData.$cardsByRowCount !== undefined) {
				this.list.$item.$cardsByRowCount = metaData.$cardsByRowCount;
				this.list.reloadBuilder();
			}
			if (metaData.$graphMode !== undefined) {
				this._toggleDataList(metaData.$graphMode != "graph");
			}
		}
	},
	_toggleDataList: function(show) {
		if (this.body) {
			this.body.style.display = show ? "" : "none";
		} else {
			this.list._core.appendChild(this.body = document.createElement("div"));
			this.list.loadSelector();
			this.body.className = this.list.$skin + "-cell-body";
		}
	},
	emptyBody: function(addEmptySlot, onFetch) {
		document.site.emptyDom(this.body);
		if (addEmptySlot) {
			var empty = document.createElement("div");
			empty.className = this.list.$skin + "-empty-slot";
			empty.textContent = (!this.list.isClientFetch && onFetch) ? this.list.localize.flWaitingData : (this.list.$item.$noDataText || this.list.localize.flNoData);
			this.body.appendChild(this.list.emptyDataItem = empty);
		}
		this.rows = [];
	},
	drawBuilder: function() {
		this.list.fieldValue.style.overflow = "auto";
		this.rows = [];
		this.list.$skin = this.list.$item.$skin || "s-cards";

		this.list.$item.$cards = (typeof(this.list.$item.$cards) === "object") ? this.list.$item.$cards : {
			$layout: {
				$items: this.list.$item.$layout.$items
			}
		};
		this.list.applyDesignMetaData(this.list.$item, false);
		this._toggleDataList(true);
		this.list.applyCapabilities();
	},

	dispose: function() {
		this.list = this.rows = this.body = null;
	}
});