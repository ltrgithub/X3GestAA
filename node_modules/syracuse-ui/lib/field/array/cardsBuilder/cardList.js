"use strict";
var helpers = require('syracuse-core/lib/helpers');
var MultiList = require("syracuse-ui/lib/field/array/multiList").MultiList;
var CardRecord = require('./cardRecord').CardRecord;


function CardList() {}

exports.CardList = helpers.defineClass(CardList, MultiList, {
	initializeList: function() {
		MultiList.prototype.initializeList.call(this);
		this.$item.$isTopLabelAlignment = true;
		this.RecordClass = CardRecord;
		if (!this.$item.$layout || !this.$item.$layout.$items) {
			this.$item.$layout = this.defineDefaultCard().$layout;
		}
	},
	drawBox: function() {
		MultiList.prototype.drawBox.call(this);
		this.searchCapability.draw(this);
		this.$cardsByRowCount = this.$item.$cardsByRowCount || 1;
		this._dataValue.style.overflow = "auto";
		this.rows = [];
		this.$skin = this.$item.$skin || "s-cards";
		this.applyDesignMetaData(this.$item, false);
		this.tableSlot = document.createElement("div");
		this.tableSlot.className = "s-grid-slot";
		this._core.appendChild(this.tableSlot);
		this.tableSlot.appendChild(this.body = document.createElement("div"));
		this.loadSelector();
		this.body.className = this.$skin + "-body";
		this.capabilityMaker.apply(this);
		this.ensureGlobalMetaRecord(true);
		this.ensureGrapDecorator();
		this.appendCardGraphSlots();
		this.applyDesignMetaData(this.$item, false);
		syra_dd.colResizer.push(this);

		this._endDrawBox();
	},
	emptyBody: function(addEmptySlot, onFetch) {
		this.rows = [];
		MultiList.prototype.emptyBody.call(this, addEmptySlot, onFetch);
	},
	createRow: function() {
		var row = {
			slot: document.createElement("div"),
			index: this.rows.length,
			count: 0,
			cells: [],
			max: this.$cardsByRowCount
		};
		row.cellWidth = Math.ceil(100 / row.max) + "%";
		row.slot.className = this.$skin + "-carditem-slot";
		return row;
	},
	appendDefaultCell: function(row) {
		var cell = document.createElement("div");
		cell.className = this.$skin + "-cell";
		cell.style.width = row.cellWidth;
		cell.visibility = "hidden";
		row.cells.push(row.slot.appendChild(cell));
	},
	isDraggable: function(target, event) {
		if (this.addSlotResizer(target, event)) {
			return;
		}
		return this.isReorderRecordDraggable(target, event);
	},
	applyDesignMetaData: function(metaData, designing) {
		MultiList.prototype.applyDesignMetaData.call(this, metaData, designing);
		if (designing) {
			if (metaData.$cardsByRowCount !== undefined) {
				this.$cardsByRowCount = this.$item.$cardsByRowCount = metaData.$cardsByRowCount;
				if (this.records.length) {
					var newRows = [],
						cellIndex = 0,
						curRow;
					for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
						var record = this.records[ii];
						if (cellIndex == 0) {
							newRows.push(curRow = this.createRow());
							this.body.appendChild(curRow.slot);
						}
						record.row = curRow;
						record.cellIndex = cellIndex;
						curRow.count = ++cellIndex;
						record.domItem.style.width = curRow.cellWidth;
						curRow.cells.push(curRow.slot.appendChild(record.domItem));
						if (curRow.count == this.$cardsByRowCount) {
							cellIndex = 0;
						}
					}
					if (curRow.count < curRow.max) {
						for (var ii = curRow.count; ii < curRow.max; ii++) {
							this.appendDefaultCell(curRow);
						}
					}
					for (var ii = 0, jj = this.rows.length; ii < jj; ii++) {
						syra_site.dom.removeChild(this.rows[ii].slot);
					}
					this.rows = newRows;
				}
			}
		}
		if (this.graphDecorator) {
			this.graphDecorator.applyDesignMetaData(metaData, designing);
		}
		this.pagging.applyMetadata(metaData, designing);
	},
	dispose: function() {
		MultiList.prototype.dispose.call(this);
		this.rows = null;
	}
});