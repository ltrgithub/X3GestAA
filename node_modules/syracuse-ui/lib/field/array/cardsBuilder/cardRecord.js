"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function CardRecord() {}

exports.CardRecord = helpers.defineClass(CardRecord, RecordArticle, {
	initializeRecord: function(options) {
		var rowIndex;
		if (this.builder.rows.length > 0) {
			this.row = this.builder.rows[this.builder.rows.length - 1];
		}
		if (!this.row || (this.row.count == this.list.$item.$cardsByRowCount)) {
			this.row = {
				index: this.builder.rows.length,
				count: 0,
				cells: [],
				max: this.list.$item.$cardsByRowCount || 1
			};
			this.row.slot = document.createElement("div");
			this.row.slot.className = this.list.$skin + "-cell-record-row";
			if (this.list.treeDecorator) {
				this.dataRow = this.row.slot;
				this.row.cells.push(this.dataRow = this.row.slot);
			} else {
				this.builder.body.appendChild(this.row.slot);
				var width = (100 / this.row.max) + "%";
				for (var ii = 0; ii < this.row.max; ii++) {
					var cell = document.createElement("div");
					cell.className = this.list.$skin + "-cell";
					cell.style.width = width;
					cell.visibility = "hidden";
					this.row.cells.push(this.row.slot.appendChild(cell));
				}
			}
			this.builder.rows.push(this.row);
		}
		this.disableEditMenu = true;
		this.cellIndex = this.row.count++;
		options.$item = {
			$category: "section",
			$layout: {
				$items: this.list.$item.$layout.$items
			}
		};
	},
	reorderItem: function() {
		var rowIndex = 0;
		for (var ii = 0, jj = this.builder.rows.length; ii < jj; ii++) {
			this.builder.rows[ii].count = 0;
			this.builder.rows[ii].cells = [];
		}
		var rowOffset = 0;
		for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
			var record = this.list.records[ii];
			record.row = this.builder.rows[rowOffset];
			record.cellIndex = record.row.count++;
			record.$$item.detach().appendTo($(record.row.slot));
			record.row.cells.push(record._item);
			if (record.row.count >= record.row.max) {
				rowOffset++;
			}
		}
		var lastRow = this.builder.rows[this.builder.rows.length - 1];
		var $$lastRow = $(lastRow.slot);
		var $$children = $$lastRow.children(".s-cards-cell");
		if ($$children.length) {
			for (var ii = 0; ii < $$children.length; ii++) {
				lastRow.cells.push($($$children[0]).detach().appendTo($$lastRow)[0]);
			}
		}
	},
	remove: function() {
		if (this.$$item) {
			this.$$item.remove();
		}
	},
	applyReorderCapability: function(reorder) {
		if (this.hasReorderCapability = reorder) {
			if (!this._reorder) {
				this._reorder = document.createElement("div");
				this._reorder.className = this.list.$skin + "-card-reorder s-list-record-reorder";
				this.slot.insertBefore(this._reorder, this.slot.firstChild);
			}
		} else {
			if (this._reorder) {
				document.site.removeDomChild(this._reorder);
				delete this._reorder;
			}
		}
	},
	drawBox: function() {
		this._item = this.row.cells[this.cellIndex];
		this._item.setAttribute("data-s-record", this.$uuid);
		this._item.className = this.list.$skin + "-cell-record";
		this.$$item = $(this._item);
		if (this.list.$item.$alternateStyle && this.$recordIndex % 2) {
			this._item.className += " " + this.list.$skin + "-alt";
		}

		this.slot = document.createElement("div");
		this.slot.className = this.list.$skin + "-record-slot";
		this._item.appendChild(this.slot);

		if (this.list.treeDecorator) {
			this.list.treeDecorator.appendCardNode(this, this.slot);
			if (this.list.selector.isRowMode) {
				this.treeNode.item.setAttribute("data-s-picker", "list-selector");
				this.treeNode.item.className += " s-list-selector-row";
				this.treeNode.item.setAttribute("data-s-record", this.$uuid);
			}
		} else {
			if (this.list.selector.useColumnSelector || this.list.$item.$isRowIndexVisible || this.list.$item.$selectByRowIndex || !this.list.$item.$isMenuRecordHidden) {
				if (this.list.$capability && this.list.$capability.reorder) {
					this.applyReorderCapability(true);
				}
				var toolbar = document.createElement("div");
				toolbar.className = this.list.$skin + "-toolbar";

				if (this.list.selector.useColumnSelector) {
					var selectorSlot = this.slot.appendChild(document.createElement("div"));
					this._selectorCheck = this.list.selector.appendToRecord(selectorSlot);
					toolbar.appendChild(selectorSlot);
				}

				this.slot.appendChild(toolbar);
				if (!this.list.$item.$isMenuRecordHidden) {
					this._menusSlot = document.createElement("div");
					this._menusSlot.className = this.list.$skin + "-actions-cell";
					toolbar.appendChild(this._menusSlot);
					this.list.applyRecordCapabilities(this);
				}
				this._rowIndexCell = document.createElement("div");
				this._rowIndexCell.className = this.list.$skin + "-row-index";
				if (this.list.$item.$selectByRowIndex) {
					this._rowIndexCell.className += " s-list-row-index-selector";
					this._rowIndexCell.setAttribute("data-s-picker", "list-selector");
				}
				toolbar.appendChild(this._rowIndexCell);
				this.renderRowIndex();
			}

			var card = this.slot.appendChild(document.createElement("div"));
			card.className = this.list.$skin + "-record";
			if (this.list.selector.isRowMode) {
				card.setAttribute("data-s-picker", "list-selector");
				card.className += " s-list-selector-row";
				card.setAttribute("data-s-record", this.$uuid);
			}
			this.page.loadNewItem(card, this.list.$item.$cards, this);
		}
		this._item.style.visibility = "";
	},
	onSelectMouseEvent: function(event) {
		document.site.toggleClass(this.list.treeDecorator ? this.treeNode.item : this._item, "s-record-over", event.type == "mouseenter");
	},
	highlightSelection: function(selected) {
		document.site.toggleClass(this.list.treeDecorator ? this.treeNode.item : this._item, "s-list-record-selected", selected);
		if (this._selectorCheck) {
			this._selectorCheck.checked = selected;
		}
	},
	dispose: function() {
		this._item = this.treeNode = this.row = this.slot = this._selectorCheck = this._reorder = this._menusSlot = this._rowIndexCell = this.dataRow = null;
		RecordArticle.prototype.dispose.call(this);
	}
});