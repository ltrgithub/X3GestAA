"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function CardRecord() {}

exports.CardRecord = helpers.defineClass(CardRecord, RecordArticle, {
	loadBox: function() {
		var rowIndex;
		if (this.list.$item.$skinCard) {
			this.$defaultSkinSection = this.$defaultSkinBlock = this.list.$item.$skinCard;
		}
		this.$skin = this.list.$skin + "-carditem";
		if (this.list.rows.length > 0) {
			this.row = this.list.rows[this.list.rows.length - 1];
		}
		if (!this.row || (this.row.count == this.list.$cardsByRowCount)) {
			this.row = this.list.createRow();
			if (this.list.treeDecorator) {
				this.dataRow = this.row.slot;
				this.row.cells.push(this.dataRow = this.row.slot);
			} else {
				// in order to reverse card records display order (issue #3093)
				if (this.articleParent.$item && this.articleParent.$item.$isDrawOrderReversed) {
					this.list.body.insertBefore(this.row.slot, this.list.body.firstChild);
				} else {
					this.list.body.appendChild(this.row.slot);
				}
				for (var ii = 0; ii < this.row.max; ii++) {
					this.list.appendDefaultCell(this.row);
				}
			}
			this.list.rows.push(this.row);
		}
		this.disableEditMenu = true;
		this.cellIndex = this.row.count++;
		RecordArticle.prototype.loadBox.call(this);
	},
	reorderItem: function() {
		var rowIndex = 0;
		for (var ii = 0, jj = this.list.rows.length; ii < jj; ii++) {
			this.list.rows[ii].count = 0;
			this.list.rows[ii].cells = [];
		}
		var rowOffset = 0;
		for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
			var record = this.list.records[ii];
			record.row = this.list.rows[rowOffset];
			record.cellIndex = record.row.count++;
			record.row.slot.appendChild(record.domItem);
			record.row.cells.push(record.domItem);
			if (record.row.count >= record.row.max) {
				rowOffset++;
			}
		}
		var lastRow = this.list.rows[this.list.rows.length - 1];
		var $$lastRow = $(lastRow.slot);
		var $$children = $$lastRow.children(".s-cards-cell");
		if ($$children.length) {
			for (var ii = 0; ii < $$children.length; ii++) {
				lastRow.cells.push($($$children[0]).detach().appendTo($$lastRow)[0]);
			}
		}
	},
	drawBox: function() {
		this.$item = {
			$layout: this.list.$item.$layout
		};
		this.layoutSlot = this.row.slot;
		this.domItem = this.row.cells[this.cellIndex];
		this.domItem.setAttribute("data-s-record", this.$uuid);

		this.reorderPickerParent = this.cardContent = document.createElement("div");
		this.domItem.appendChild(this.cardContent);

		if (this.list.treeDecorator) {
			this.dataSlot = this.body = this.cardContent;
			this.list.treeDecorator.appendCardNode(this, this.cardContent);
			if (this.list.selector.isRowMode) {
				this.treeNode.item.setAttribute("data-s-picker", "list-selector");
				this.treeNode.item.className += " s-list-selector-row";
				this.treeNode.item.syrainout = this;
				this.treeNode.item.setAttribute("data-s-inout", this.id);
				this.treeNode.item.setAttribute("data-s-record", this.$uuid);
			}
			this.ensureLayoutMode();
		} else {
			if (this.list.selector.useColumnSelector || this.list.$item.$isRowIndexVisible || this.list.$item.$selectByRowIndex || !this.list.$item.$isMenuRecordHidden) {
				if (this.list.$capability && this.list.$capability.reorder) {
					this.applyReorderCapability(true);
				}
				this.toolbar = document.createElement("div");
				if (this.list.selector.useColumnSelector) {
					var selectorSlot = this.cardContent.appendChild(document.createElement("div"));
					this._selectorCheck = this.list.selector.appendToRecord(selectorSlot);
					this.toolbar.appendChild(selectorSlot);
				}

				this.cardContent.appendChild(this.toolbar);
				if (!this.list.$item.$isMenuRecordHidden) {
					this.menusSlot = document.createElement("div");
					this.toolbar.appendChild(this.menusSlot);
					this.applyRecordCapabilities();
				}
				this.rowIndexPicker = document.createElement("div");
				this.toolbar.appendChild(this.rowIndexPicker);
				this.renderRowIndex();
			}
			this.dataSlot = this.body = this.cardContent.appendChild(document.createElement("div"));
			if (this.list.selector.isRowMode) {
				this.body.setAttribute("data-s-picker", "list-selector");
				this.body.setAttribute("data-s-record", this.$uuid);
			}
			this.ensureLayoutMode();
			this.renderLayoutContent();
			this.cardItem = this;
		}
		this.domItem.style.visibility = "";
	},
	ensureLayoutMode: function() {
		RecordArticle.prototype.ensureLayoutMode.call(this);
		if (this.toolbar) {
			this.toolbar.className = this.$skin + "-toolbar";
		}
		if (this.rowIndexPicker) {
			this.rowIndexPicker.className = this.$skin + "-row-index";
			if (this.list.$item.$selectByRowIndex) {
				this.rowIndexPicker.className += " s-list-row-index-selector";
				this.rowIndexPicker.setAttribute("data-s-picker", "list-selector");
			}
		}
		if (this.list.selector.isRowMode) {
			this.body.className += " s-list-selector-row";
		}
		if (this.menusSlot) {
			this.menusSlot.className = this.$skin + "-actions-cell s-record-actions";
		}
		this.cardContent.className = this.$skin + "-content";
	},
	renderAltStyle: function(showAlt) {
		document.site.dom.toggleClass(this.domItem, "s-list-row-alt", showAlt);
	},
	onSelectMouseEvent: function(onEnter) {
		document.site.dom.toggleClass(this.list.treeDecorator ? this.treeNode.item : this.domItem, "s-record-over", onEnter);
	},
	highlightSelection: function(selected) {
		document.site.dom.toggleClass(this.list.treeDecorator ? this.treeNode.item : this.domItem, "s-list-record-selected", selected);
		if (this._selectorCheck) {
			this._selectorCheck.checked = selected;
		}
	},
	resizeArticle: function() {
		RecordArticle.prototype.resizeArticle.call(this);
		if (this.list.treeDecorator) {
			this.list.treeDecorator.onRecordResize(this);
		}
	},
	dispose: function() {
		if (this.treeNode && this.treeNode.item) {
			this.treeNode.item.syrainout = null;
		}
		this.toolbar = this.cardItem = this.treeNode = this.row = this.cardContent = this._selectorCheck = this.menusSlot = this.rowIndexPicker = this.dataRow = null;
		RecordArticle.prototype.dispose.call(this);
	}
});