"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function CardRecord() {}

exports.CardRecord = helpers.defineClass(CardRecord, RecordArticle, {
	initializeRecord: function(options) {
		var rowIndex;
		if (this.builder.rows.length == 0) {
			this.row = this.builder.appendCardsRow();
		} else {
			this.row = this.builder.rows[this.builder.rows.length - 1];
		}
		if (this.row.count == this.list.$item.$cardsByRowCount) {
			this.row = this.builder.appendCardsRow();
		}
		this.disableEditMenu = true;
		this.cellIndex = this.row.count++;
		options.$item = {
			$category: "section",
			$layout: {
				$items: this.list.$item.$layout.$items
			}
		};
	},
	onSelectMouseEvent: function(event) {
		document.site.toggleClass(this.$$item[0], "s-record-over", event.type == "mouseenter");
	},
	reorderItem: function() {
		var self = this;
		var rowIndex = 0;
		self.builder.rows.forEach(function(row) {
			row.count = 0;
			row.cells = [];
		});
		var rowOffset = 0;
		self.builder.list.records.forEach(function(record, index) {
			record.row = self.builder.rows[rowOffset];
			record.cellIndex = record.row.count++;
			record.$$item.detach().appendTo($(record.row.slot));
			record.row.cells.push(record.$$item[0]);
			if (record.row.count >= record.row.max) {
				rowOffset++;
			}
		});
		var lastRow = self.builder.rows[self.builder.rows.length - 1];
		var $$lastRow = $(lastRow.slot);
		var $$children = $$lastRow.children(".s-cards-cell");
		if ($$children.length) {
			for (var ii = 0; ii < $$children.length; ii++) {
				lastRow.cells.push($($$children[0]).detach().appendTo($$lastRow)[0]);
			}
		}
	},
	remove: function() {
		if (this.$$item) {
			this.$$item.remove();
		}
	},
	applyReorderCapability: function(reorder) {
		if (this.hasReorderCapability = reorder) {
			if (!this._reorder) {
				this._reorder = document.createElement("div");
				this._reorder.className = this.list.$skin + "-card-reorder s-list-record-reorder";
				this.slot.insertBefore(this._reorder, this.slot.firstChild);
			}
		} else {
			if (this._reorder) {
				document.site.removeDomChild(this._reorder);
				delete this._reorder;
			}
		}
	},
	drawBox: function() {
		var item = this.row.cells[this.cellIndex];
		item.setAttribute("data-s-record", this.$uuid);
		item.className = this.list.$recordCss;
		this.$$item = $(item);
		if (this.list.$item.$alternateStyle && this.$recordIndex % 2) {
			item.className += " " + this.list.$skin + "-alt";
		}

		this.slot = document.createElement("div");
		this.slot.className = "s-cards-record-slot";
		item.appendChild(this.slot);

		if (this.list.selector.useColumnSelector || this.list.$item.$isRowIndexVisible || this.list.$item.$selectByRowIndex || !this.list.$item.$isMenuRecordHidden) {
			if (this.list.$capability && this.list.$capability.reorder) {
				this.applyReorderCapability(true);
			}
			var toolbar = document.createElement("div");
			toolbar.className = this.list.$skin + "-toolbar";

			if (this.list.selector.useColumnSelector) {
				var selectorSlot = this.slot.appendChild(document.createElement("div"));
				this._selectorCheck = this.list.selector.appendToRecord(selectorSlot);
				toolbar.appendChild(selectorSlot);
			}

			this.slot.appendChild(toolbar);
			if (!this.list.$item.$isMenuRecordHidden) {
				this._menusSlot = document.createElement("div");
				this._menusSlot.className = this.list.$skin + "-actions-cell";
				toolbar.appendChild(this._menusSlot);
				this.list.applyRecordCapabilities(this);
			}
			this._rowIndexCell = document.createElement("div");
			this._rowIndexCell.className = this.list.$skin + "-row-index";
			if (this.list.$item.$selectByRowIndex) {
				this._rowIndexCell.className += " s-list-row-index-selector";
				this._rowIndexCell.setAttribute("data-s-picker", "list-selector");
			}
			toolbar.appendChild(this._rowIndexCell);
			this.renderRowIndex();
		}

		var card = this.slot.appendChild(document.createElement("div"));
		card.className = this.list.$skin + "-record";
		if (this.list.selector.isRowMode) {
			card.setAttribute("data-s-picker", "list-selector");
			card.className += " s-list-selector-row";
			card.setAttribute("data-s-record", this.$uuid);
		}
		this.page.loadNewItem(card, this.list.$item.$cards, this);
		item.style.visibility = "";
	},
	highlightSelection: function(selected) {
		document.site.toggleClass(this.$$item[0], "s-list-record-selected", selected);
		if (this._selectorCheck) {
			this._selectorCheck.checked = selected;
		}
	},
	dispose: function() {
		this.row = this.slot = this._selectorCheck = this._reorder = this._menusSlot = this._rowIndexCell = null;
		RecordArticle.prototype.dispose.call(this);
	}
});