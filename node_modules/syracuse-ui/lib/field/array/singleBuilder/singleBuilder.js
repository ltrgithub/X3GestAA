"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SingleRecord = require('./singleRecord').SingleRecord;
var SelectorPopup = require('syracuse-ui/lib/site/selectorPopup').SelectorPopup;

function SingleBuilder() {}

exports.SingleBuilder = helpers.defineClass(SingleBuilder, null, {
	initialize: function() {
		this.list.$isQuickDesignerEnabled = false;
		this.RecordClass = this.RecordClass || SingleRecord;
		this.list.isPagingDisabled = true;
		this.isSingleBuilder = true;
	},
	applyDesignMetaData: function(metaData, designing) {},
	drawBuilder: function() {
		this.list.$skin = this.list.$item.$skin || "s-single";
		this.body = document.createElement("div");
		this.body.className = this.list.$skin + "-body";
		this.list._core.appendChild(this.body);
		this.list.topbar.style.display = "none";
		this.list.applyDesignMetaData(this.list.$item, false);

		this.list.setState(this.list.$field);

		if (this.list.$isEditMode && this.list.$prototype.$item.$type == "application/x-choice") {
			if (!(this.list.$prototype.$links && this.list.$prototype.$links.$select)) {
				this.list.applyActionLinkChange({
					$links: {
						$select: {
							$title: this.list.localize.flSelect
						}
					}
				});
			}
		}
		this.list.applyCapabilities();
		document.site.ddManager.toggleColResizerObserver(this, true);
	},
	dispose: function() {
		document.site.ddManager.toggleColResizerObserver(this, false);
		this.RecordClass = this.list = this.body = null;
	},
	isDraggable: function(target, event) {
		return this.list.isReorderRecordDraggable(target, event);
	},
	loadChoiceSelector: function() {
		var self = this;
		if (!self._popup) {
			(self._popup = new SelectorPopup()).open(self.list, {
				$properties: {
					$resources: {
						$type: "application/x-array",
						$item: {
							$type: "application/json",
							$properties: {
								$title: {
									$title: "description",
									$type: "application/x-string",
									$capabilities: "sort"
								}
							}
						}
					}
				},
				$resources: self.list.$prototype.$item.$value.$enum.map(function($choice) {
					return {
						$uuid: $choice.$value,
						$title: $choice.$title
					};
				}),
				$$position: self.list.menuItems.$select[0].$$item,
				onClose: function() {
					delete self._popup;
				},
				onValidate: function() {
					self.list.notifySelectRecords();
				},
				onSelectRecord: function(selectedRecords) {
					self.list.currentSelectRecords = selectedRecords;
					return false;
				}
			});
		} else {
			if (self._popup) {
				self._popup.close();
			}
		}
	}
});