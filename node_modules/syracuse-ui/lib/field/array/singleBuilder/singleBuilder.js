"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SingleRecord = require('./singleRecord').SingleRecord;
var SelectorPopup = require('syracuse-ui/lib/site/selectorPopup').SelectorPopup;

function SingleBuilder(){
}

exports.SingleBuilder = helpers.defineClass(SingleBuilder, null, {
    initialize: function(){
        this.list.$item.$isQuickDesignerEnabled = false;
        this.list.$item.$isPagerHidden = true;
        this.RecordClass = SingleRecord;
        this.isSingleBuilder = true;
    },
    applyDesignMetaData: function(metaData, onAuthoring){
    },
    emptyBody: function(addEmptySlot, onFetch){
        document.site.emptyDom(this._body);
        if (addEmptySlot) {
            var empty = document.createElement("div");
            empty.className = this.list.$skin + "-empty-slot";
            empty.textContent = onFetch ? this.list._localize.l_waiting_data : (this.list.$item.$noDataText || this.list._localize.l_noData);
            this._body.appendChild(this.list.emptyDataItem = empty);
        }
    },
    setRowIndexVisibility: function(){
    
    },
    drawBuilder: function(){
        this.list.$skin = this.list.$item.$skin || "s-array";
        this._body = document.createElement("div");
        this._body.className = this.list.$skin + "-body";
        this.list._core.appendChild(this._body);
        this.list._topbar.style.display = "none";
        this.list.applyDesignMetaData(this.list.$item, false);
        this.list.helper.parseCapabilities(this.list);
        
        this.list.setState(this.list.$field);
        
        if (this.list.$isEditMode && this.list.$prototype.$item.$type == "application/x-choice") {
            if (!(this.list.$prototype.$links && this.list.$prototype.$links.$select)) {
                this.list.applyActionLinkChange({
                    $links: {
                        $select: {
                            $title: this.list._localize.slist_select
                        }
                    }
                });
            }
        }
        this.list.applyCapabilities();
        if (this.list.menusBox) {
            this.list._topbar.style.display = "";
        }
    },
    dispose: function(){
        delete this.list;
    },
    loadChoiceSelector: function(){
        var self = this;
        if (!self._popup) {
            (self._popup = new SelectorPopup()).open(self.list, {
                $properties: {
                    $resources: {
                        $type: "application/x-array",
                        $item: {
                            $type: "application/json",
                            $properties: {
                                $title: {
                                    $title: "description",
                                    $type: "application/x-string",
                                    $capabilities: "sort"
                                }
                            }
                        }
                    }
                },
                $resources: self.list.$prototype.$item.$value.$enum.map(function($choice){
                    return {
                        $uuid: $choice.$value,
                        $title: $choice.$title
                    };
                }),
                $$position: self.list.menuItems.$select[0].$$item,
                onClose: function(){
                    delete self._popup;
                },
                onValidate: function(){
                    self.list.helper.notifySelectRecords(self.list);
                },
                onSelectRecord: function(selectedRecords){
                    self.list.currentSelectRecords = selectedRecords;
                    return false;
                }
            });
        }
        else {
            if (self._popup) {
                self._popup.close();
            }
        }
    }
});
