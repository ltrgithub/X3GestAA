"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SingleRecord = require('./singleRecord').SingleRecord;
var SelectorPopup = require('syracuse-ui/lib/site/selectorPopup').SelectorPopup;

function SingleBuilder(){
}

exports.SingleBuilder = helpers.defineClass(SingleBuilder, null, {
    initialize: function(){
        this.list.$item.$isQuickDesignerEnabled = false;
        this.list.$item.$isPagerHidden = true;
        
        this.RecordClass = SingleRecord;
        this.isSingleBuilder = true;
        
    },
    applyDesignMetaData: function(metaData, onAuthoring){
    },
    emptyBody: function(addEmptySlot){
        $(this._body).empty();
    },
    _notifyChange: function(newDataSet){
        document.controller.notifyChange(this.list.getArticleParent(), this.list.$item.$bind, newDataSet);
    },
    onNotifyRecordChange: function(value, binding){
        var self = this;
        if (binding == "$actions" && (value.$select || value.$create || value.$delete)) {
            if (value.$select) {
                if (self.list.$prototype.$item.$type == "application/x-choice") {
                    self.loadChoiceSelector();
                }
                else {
                    self.list.currentSelection = null;
                    var $selectLink = (self.list.$prototype.$item.$thumb || self.list.$prototype.$item).$links.$select;
                    if (!$selectLink) {
                        $selectLink = self.list.$prototype.$item.$links.$lookup;
                    }
                    self.list.boxParent.openDialog({
                        article: self.list,
                        $url: $selectLink.$url,
                        onBeforeLoadPage: function(itemPage){
                            itemPage.$facet = "$select";
                        },
                        onValidate: function(){
                            self._onValidate();
                        },
                        onSelectRecord: function(selectedRecords){
                            self._onSelectRecord(selectedRecords);
                            return false;
                        }
                    });
                }
            }
            if (value.$create) {
                var $resources = self.list.getDataSet();
                $resources.push(null);
                self.list._store.appendRecord({
                    $recordIndex: self.list._store._records.length
                });
                self.list._store.setRecordsIndex();
                self._notifyChange($resources);
            }
            if (value.$delete) {
                var $resources = self.list.getDataSet();
                $resources.splice(0, $resources.length);
                self.list._store.removeRecords();
                self.list._store.setRecordsIndex();
                self._notifyChange($resources);
            }
            return null;
        }
    },
    _onValidate: function(page){
        var self = this;
        var $index = Object.keys(self.list._store._map).length;
        if (self.list.currentSelection) {
            var $resources = self.list.getDataSet();
            Object.keys(self.list.currentSelection).forEach(function($uuid){
                var newDataRecord = self.list.currentSelection[$uuid].dataset;
                if (self.list.$prototype.$item.$type == "application/x-choice") {
                    newDataRecord = newDataRecord.$uuid;
                }
                $resources.push(newDataRecord);
                self.list._store.appendRecord({
                    dataRecord: newDataRecord,
                    $recordIndex: self.list._store._records.length
                });
            });
            self.list._store.setRecordsIndex();
            self._notifyChange($resources);
        }
    },
    _onSelectRecord: function(selectedRecords){
        this.list.currentSelection = selectedRecords;
        return false;
    },
    
    
    drawBuilder: function(){
        this.list.$skin = this.list.$item.$skin || "s-array";
        this._body = document.createElement("div");
        this._body.className = this.list.$skin + "-body";
        this.list._core.appendChild(this._body);
        this.list._topbar.style.display = "none";
        this.list.applyDesignMetaData(this.list.$item, false);
        this.list.parseCapabilities((this.list.$prototype.$capabilities === undefined ? {
            $capabilities: "insert,append,delete,reorder"
        } : this.list.$prototype).$capabilities);
        
        this.list.setState(this.list.$field);
        this.list.boxParent.getArticle().bind(this.list, this.list.$item.$bind);
        
        if (this.list.$isEditMode) {
            switch (this.list.$prototype.$item.$type) {
                case "application/x-reference":
                case "application/x-choice":
                    this.list.$capability.select = true;
                    break;
            }
            this.list.applyCapabilities();
            if (this.list._contextMenu) {
                this.list._topbar.style.display = "";
            }
        }
    },
    onAfterDataBinding: function(){
        if (this.list.$isEditMode) {
            var store = this.list._store;
            if (this.list.$prototype.$minItems) {
                while (store._records.length < this.list.$prototype.$minItems) {
                    store.appendRecord({
                        $recordIndex: store._records.length
                    });
                }
            }
            store.checkMaxItems();
        }
    },
    dispose: function(){
        delete this.$layoutOptions;
        delete this.list;
    },
    loadChoiceSelector: function(){
        var self = this;
        if (!self._popup) {
            (self._popup = new SelectorPopup()).open(self.list, {
                $properties: {
                    $resources: {
                        $type: "application/x-array",
                        $item: {
                            $type: "application/json",
                            $properties: {
                                $title: {
                                    $title: "description",
                                    $type: "application/x-string",
                                    $capabilities: "sort"
                                }
                            }
                        }
                    }
                },
                $resources: self.list.$prototype.$item.$value.$enum.map(function($choice){
                    return {
                        $uuid: $choice.$value,
                        $title: $choice.$title
                    };
                }),
                $$position: self.list.menuItems.$select[0].$$item,
                onClose: function(){
                    delete self._popup;
                },
                onValidate: function(){
                    self._onValidate();
                },
                onSelectRecord: function(selectedRecords){
                    self._onSelectRecord(selectedRecords);
                    return false;
                }
            });
        }
        else {
            if (self._popup) {
                self._popup.close();
            }
        }
    }
});
