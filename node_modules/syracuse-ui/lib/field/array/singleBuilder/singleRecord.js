"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function SingleRecord() {}

exports.SingleRecord = helpers.defineClass(SingleRecord, RecordArticle, {
	loadBox: function(initData) {
		RecordArticle.prototype.loadBox.call(this, initData);

		// Franck-kevin : plus g�r�c comme cela append diagnoses if any for reference type single records
		if (initData && this._singleField && this._singleField.$field && this._singleField.$field.$type == 'application/x-reference') {
			if (initData.$singleField && initData.$singleField.$diagnoses) {
				this.applyMetaData(initData.$singleField);
			}
		}
	},
	notifyReorder: function(targetRecord, $insert) {
		this.$$item[$insert](targetRecord.$$item);
	},
	applyMetaData: function(metaData) {
		if (metaData) {
			var metaDataBackUp = metaData;
			var actionLinks;
			if (metaData.$links || metaData.$actions) {
				actionLinks = {
					$links: metaData.$links,
					$actions: metaData.$actions
				};
				this.applyActionLinkChange(metaData);
				delete metaData.$links;
				delete metaData.$actions;
			}
			this._singleField.applyMetaData(metaData);
			if (metaData.$diagnoses && this._singleField.diagnoseFieldSlot) {
				this._singleField.diagnoseFieldSlot.className += " s-array-record-diagnoses";			
				this.$$item[0].appendChild(this._singleField.diagnoseFieldSlot);
			}
			metaData = metaDataBackUp;
			if (actionLinks) {
				metaData.$links = actionLinks.$links;
				metaData.$actions = actionLinks.$actions;
			}
		}
	},
	remove: function() {
		this.$$item.remove();
	},
	applyReorderCapability: function(reorder) {
		if (this.hasReorderCapability = reorder) {
			if (!this._reorder) {
				this._reorder = document.createElement("div");
				this._reorder.className = this.list.$skin + "-row-index";
				var btn = document.createElement("a");
				this.toolbar.appendChild(this._reorder).appendChild(btn).className = "s-array-record-reorder s-list-record-reorder";
				if (this.list.$isDisabled) {
					document.site.disableItem(btn, this.list.$isDisabled);
				}
			}
		} else {
			if (this._reorder) {
				document.site.removeDomChild(this._reorder);
				delete this._reorder;
			}
		}
	},
	drawBox: function() {
		var item = document.createElement("div");
		this.$$item = $(item);
		item.className = "s-array-record-item";
		item.setAttribute("data-s-record", this.$recordIndex);

		var recordValue = document.createElement("div");
		recordValue.className = "s-array-record-value";
		this.$$value = $(item.appendChild(recordValue));

		var dataSlot = document.createElement("div");
		dataSlot.className = "s-array-record-data";
		recordValue.appendChild(dataSlot);

		this.toolbar = document.createElement("div");
		this.toolbar.className = this.list.$skin + "-toolbar";
		item.insertBefore(this.toolbar, recordValue);
		if (this.$isEditMode && this.list.$capability && this.list.$capability.reorder) {
			this.applyReorderCapability(true);
		}
		this._menusSlot = document.createElement("div");
		this._menusSlot.className = this.list.$skin + "-actions-cell";
		this.toolbar.appendChild(this._menusSlot);

		if (this.$isEditMode) {
			item.className += "-edit";
			recordValue.className += "-edit";
			this.list.applyRecordCapabilities(this);
		}

		this._singleField = this.page.loadNewItem(dataSlot, {
			$isTitleRowHidden: true,
			$bind: "$singleField",
			$isEditMode: this.$isEditMode,
			$inplace: true,
			$isDiagnoseInline: true
		}, this);

		if (this.$isEditMode) {
			this._singleField.setFieldWidth();
		}

		if (this.isInsert) {
			this.$$item.insertBefore(this.list.records[this.$recordIndex].$$item);
			delete this.isInsert;
		} else {
			this.builder._body.appendChild(item);
		}

		// in case field previously had metaData, redrawing them
		var $properties = this.list.articleParent.dataset.$properties;
		if ($properties && $properties[this.list.$item.$bind]) {
			var $propertiesList = $properties[this.list.$item.$bind];
			if ($propertiesList.$items) {
				var $recordMeta = $propertiesList.$items[this.$recordIndex];
				if ($recordMeta) {
					this.applyMetaData($recordMeta);
				}
			}
		}

	},
	onFieldValidate: function(field, value, errors) {
		if (!this.list.$prototype.$isMultiValue && (this.list.$prototype.$item.$type != "application/x-boolean")) {
			var newValue = field.getDataValue();
			for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
				var record = this.list.records[ii];
				if (record != this) {
					var valueComp = record._singleField.getDataValue();
					if (valueComp == newValue) {
						errors.push("value must be unique");
					}
				}
			}
		}
	},
	dispose: function() {
		this._singleField = this.toolbar = null;
		RecordArticle.prototype.dispose.call(this);
	}
});