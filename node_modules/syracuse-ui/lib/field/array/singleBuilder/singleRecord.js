"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function SingleRecord() {}

exports.SingleRecord = helpers.defineClass(SingleRecord, RecordArticle, {
	reorderItem: function(targetRecord, isAfter) {
		targetRecord.domItem.parentNode.insertBefore(this.domItem, isAfter ? targetRecord.domItem.nextSibling : targetRecord.domItem);
	},
	applyChange: function(metaData) {
		if (metaData && this.singleField && this.singleField.$field && this.singleField.$field.$type == 'application/x-reference') {
			if (metaData.$singleField && metaData.$singleField.$diagnoses) {
				this.applyMetaData(metaData.$singleField);
			}
		}
		RecordArticle.prototype.applyChange.call(this, metaData);
	},
	onItemInOut: function(onEnter) {
		var variantItem = this.singleField && this.singleField.variantItem;
		if (variantItem && variantItem.onItemInOut) {
			variantItem.onItemInOut(onEnter, this);
		} else {
			RecordArticle.prototype.onItemInOut.call(this, onEnter);
		}
	},
	applyMetaData: function(metaData) {
		if (metaData) {
			var metaDataBackUp = metaData;
			var actionLinks;
			if (metaData.$links || metaData.$actions) {
				actionLinks = {
					$links: metaData.$links,
					$actions: metaData.$actions
				};
				syra_menus.setMenus(this, metaData);
				delete metaData.$links;
				delete metaData.$actions;
			}
			this.singleField.applyMetaData(metaData);
			if (metaData.$diagnoses && this.singleField.diagnoseFieldSlot) {
				this.singleField.diagnoseFieldSlot.className += (this.list.$skin + "-item-diagnoses");
				this.domItem.appendChild(this.singleField.diagnoseFieldSlot);
			}
			metaData = metaDataBackUp;
			if (actionLinks) {
				metaData.$links = actionLinks.$links;
				metaData.$actions = actionLinks.$actions;
			}
		}
	},
	showRecord: function(show) {
		this.domItem.style.display = show ? "" : "none";
	},
	drawBox: function() {
		this.isSingleRecord = true;
		this.domItem = document.createElement("div");
		this.domItem.className = this.$skin = this.list.$skin + "-item";
		this.domItem.syraRecord = this.$uuid;
		this.domItem.setAttribute("data-s-record", this.$uuid);
		this.domItem.syrainout = this.domItem.syraItem = this.id;

		this.reorderBtnParent = this.recordValue = document.createElement("div");
		this.recordValue.className = this.list.$skin + "-item-value";
		this.domItem.appendChild(this.recordValue);
		var dataSlot = document.createElement("div");
		dataSlot.className = this.list.$skin + "-item-data";
		this.recordValue.appendChild(dataSlot);

		if (this.list.$capability && this.list.$capability.reorder) {
			this.list.capabilityMaker.addReorder(this, true);
		}
		this.menusSlot = document.createElement("div");
		this.menusSlot.className = this.list.$skin + "-actions-cell";
		this.recordValue.appendChild(this.menusSlot);
		if (this.$isEditMode) {
			this.domItem.className += "-edit";
			this.recordValue.className += "-edit";
			this.list.capabilityMaker.applyToRecord(this);
			// title slot for reference field
			if (this.list.$field.$item.$type == 'application/x-reference') {
				this.titleSlot = document.createElement("div");
				this.titleSlot.className = this.list.$skin + "-item-title";
				this.domItem.appendChild(this.titleSlot);
			}
		}

		this.singleField = this.page.loadNewItem(dataSlot, {
			$isTitleRowHidden: true,
			$bind: "$singleField",
			$isEditMode: this.$isEditMode,
			$inplace: true,
			$isDiagnoseInline: true,
			$inplaceSkin: this.list.$item.$inplaceSkin
		}, this);

		if (this.$isEditMode && this.singleField.setFieldWidth) {
			this.singleField.setFieldWidth();
		}

		if (this.insertBeforeRecord) {
			this.insertBeforeRecord.domItem.parentNode.insertBefore(this.domItem, this.insertBeforeRecord.domItem);
			delete this.insertBeforeRecord;
		} else {
			this.list.body.appendChild(this.domItem);
		}
	},

	dispose: function() {
		this.recordValue = this.singleField = this.toolbar = null;
		RecordArticle.prototype.dispose.call(this);
	}
});