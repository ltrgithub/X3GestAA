"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/record/recordArticle").RecordArticle;

function SingleRecord(){
}

exports.SingleRecord = helpers.defineClass(SingleRecord, RecordArticle, {
    notifyReorder: function(targetRecord, $insert){
        this.$$item[$insert](targetRecord.$$item);
    },
    applyMetaData: function(metaData){
        if (metaData) {
            var metaDataBackUp = metaData;
            var actionLinks;
            if (metaData.$links || metaData.$actions) {
                actionLinks = {
                    $links: metaData.$links,
                    $actions: metaData.$actions
                };
                this.applyActionLinkChange(metaData);
                delete metaData.$links;
                delete metaData.$actions;
            }
            this._singleField.applyMetaData(metaData);
            if (metaData.$diagnoses && this._singleField.domDiagnose) {
                this._singleField.domDiagnose.className += " s-array-record-diagnoses";
                if (this.$isEditMode) {
                    this._singleField.domDiagnose.style.maxWidth = this.$$item.width() + "px";
                }
                this.$$item[0].appendChild(this._singleField.domDiagnose);
            }
            metaData = metaDataBackUp;
            if (actionLinks) {
                metaData.$links = actionLinks.$links;
                metaData.$actions = actionLinks.$actions;
            }
        }
    },
    remove: function(){
        this.$$item.remove();
    },
    drawBox: function(){
        var self = this;
        var item = document.createElement("div");
        self.$$item = $(item);
        item.className = "s-array-record-item";
        item.setAttribute("data-s-record", self.$recordIndex);
        
        var recordValue = document.createElement("div");
        recordValue.className = "s-array-record-value";
        self.$$value = $(item.appendChild(recordValue));
        
        var div = document.createElement("div");
        div.className = "s-array-record-data";
        var $$data = $(recordValue.appendChild(div));
        
        var toolbar = document.createElement("div");
        toolbar.className = self.list.$skin + "-toolbar";
        item.insertBefore(toolbar, recordValue);
        if (self.$isEditMode && self.list.$capability && self.list.$capability.reorder) {
            var dom = document.createElement("div");
            dom.className = self.list.$skin + "-row-index";
            var btn = document.createElement("a");
            toolbar.appendChild(dom).appendChild(btn).className = "s-array-record-reorder s-list-record-reorder";
            if (self.list.$isDisabled) {
                document.site.disableItem(btn, self.list.$isDisabled);
            }
        }
        self._menusBoxSlot = document.createElement("div");
        self._menusBoxSlot.className = self.list.$skin + "-actions-cell";
        toolbar.appendChild(self._menusBoxSlot);
        
        if (self.$isEditMode) {
            item.className += "-edit";
            recordValue.className += "-edit";
            
            self.list.applyCapabilities(self);
            
        }
        self._singleField = self.page.loadNewItem($$data, {
            $isTitleRowHidden: true,
            $bind: "$singleField",
            $isEditMode: self.$isEditMode,
            $inplace: true
        }, self);
        if (self.$isEditMode) {
            self._singleField.setFieldWidth();
        }
        
        if (self.isInsert) {
            self.$$item.insertBefore(self.list._store._records[self.$recordIndex].$$item);
            delete self.isInsert;
        }
        else {
            self.builder._body.appendChild(item);
        }
    },
    onFieldValidate: function(field, value, errors){
        var self = this;
        if (!self.list.$prototype.$isMultiValue && (self.list.$prototype.$item.$type != "application/x-boolean")) {
            var newValue = field.getDataValue();
            self.list._store._records.forEach(function(record){
                if (record != self) {
                    var valueComp = record._singleField.getDataValue();
                    if (valueComp == newValue) {
                        errors.push("value must be unique");
                    }
                }
            });
        }
    },
    dispose: function(){
        delete this._singleField;
        RecordArticle.prototype.dispose.call(this);
    }
});
