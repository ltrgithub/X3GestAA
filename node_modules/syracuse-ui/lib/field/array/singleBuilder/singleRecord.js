"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function SingleRecord(){
}

exports.SingleRecord = helpers.defineClass(SingleRecord, RecordArticle, {
    notifyReorder: function(targetRecord, $insert){
        this.$$item[$insert](targetRecord.$$item);
    },
    applyActionLinkChange: function(resources, record){
        RecordArticle.prototype.applyActionLinkChange.call(this, resources, record);
    },
    applyMetaData: function(metaData){
        if (metaData) {
            var metaDataBackUp = metaData;
            if (metaData.$links || metaData.$actions) {
                this.applyChange(metaData);
                delete metaData.$links;
                delete metaData.$actions;
            }
            this._singleField.applyMetaData(metaData);
            if (metaData.$diagnoses && this._singleField.domDiagnose) {
                this._singleField.domDiagnose.className += " s-array-record-diagnoses";
                if (this.$isEditMode) {
                    this._singleField.domDiagnose.style.maxWidth = this.$$item.width() + "px";
                }
                this.$$item[0].appendChild(this._singleField.domDiagnose);
            }
            metaData = metaDataBackUp;
        }
    },
    remove: function(){
        this.$$item.remove();
    },
    drawBox: function(){
        var self = this;
        var item = document.createElement("div");
        self.$$item = $(item);
        item.className = "s-array-record-item";
        item.setAttribute("data-s-record", self.$recordIndex);
        
        var recordValue = document.createElement("div");
        recordValue.className = "s-array-record-value";
        self.$$value = $(item.appendChild(recordValue));
        
        var div = document.createElement("div");
        div.className = "s-array-record-data";
        var $$data = $(recordValue.appendChild(div));
        
        if (self.$isEditMode) {
            var toolbar = document.createElement("div");
            toolbar.className = self.list.$skin + "-toolbar";
            item.insertBefore(toolbar, recordValue);
            if (self.list.$capability && self.list.$capability.reorder) {
                var dom = document.createElement("div");
                dom.className = self.list.$skin + "-row-index";
                var btn = document.createElement("a");
                toolbar.appendChild(dom).appendChild(btn).className = "s-array-record-reorder s-list-record-reorder";
                if (self.list.$isDisabled) {
                    document.site.disableItem(btn, self.list.$isDisabled);
                }
            }
            self._contextMenusSlot = document.createElement("div");
            self._contextMenusSlot.className = self.list.$skin + "-actions-cell";
            toolbar.appendChild(self._contextMenusSlot);
            
            item.className += "-edit";
            recordValue.className += "-edit";
            
            self.list.applyCapabilities(self);
            
        }
        self._singleField = document.itemFactory.load($$data, {
            $isTitleRowHidden: true,
            $bind: "$singleField",
            $isEditMode: self.$isEditMode,
            $inplace: true
        }, self);
        if (self.$isEditMode) {
            document.site.setFieldWidth(self._singleField);
        }
        
        if (self.isInsert) {
            self.$$item.insertBefore(self.builder.list._store._records[self.$recordIndex].$$item);
            delete self.isInsert;
        }
        else {
            self.builder._body.appendChild(item);
        }
    },
    dispose: function(){
        delete this._singleField;
        RecordArticle.prototype.dispose.call(this);
    }
});
