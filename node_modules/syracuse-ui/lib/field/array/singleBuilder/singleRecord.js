"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function SingleRecord() {}

exports.SingleRecord = helpers.defineClass(SingleRecord, RecordArticle, {
	reorderItem: function(targetRecord, isAfter) {
		targetRecord.domItem.parentNode.insertBefore(this.domItem, isAfter ? targetRecord.domItem.nextSibling : targetRecord.domItem);
	},
	applyChange: function(metaData) {
		if (metaData && this._singleField && this._singleField.$field && this._singleField.$field.$type == 'application/x-reference') {
			if (metaData.$singleField && metaData.$singleField.$diagnoses) {
				this.applyMetaData(metaData.$singleField);
			}
		}
		RecordArticle.prototype.applyChange.call(this, metaData);
	},
	onItemEnterLeave: function(event) {
		if (this.menusSlot) {
			document.site.toggleClass(this.menusSlot, "s-enter", (event.type == "mouseenter"));
		}
		if (this.reorderPicker) {
			document.site.toggleClass(this.reorderPicker, "s-enter", (event.type == "mouseenter"));
		}
		RecordArticle.prototype.onItemEnterLeave.call(this, event);
	},
	applyMetaData: function(metaData) {
		if (metaData) {
			var metaDataBackUp = metaData;
			var actionLinks;
			if (metaData.$links || metaData.$actions) {
				actionLinks = {
					$links: metaData.$links,
					$actions: metaData.$actions
				};
				this.applyActionLinkChange(metaData);
				delete metaData.$links;
				delete metaData.$actions;
			}
			this._singleField.applyMetaData(metaData);
			if (metaData.$diagnoses && this._singleField.diagnoseFieldSlot) {
				this._singleField.diagnoseFieldSlot.className += (this.list.$skin + "-item-diagnoses");
				this.domItem.appendChild(this._singleField.diagnoseFieldSlot);
			}
			metaData = metaDataBackUp;
			if (actionLinks) {
				metaData.$links = actionLinks.$links;
				metaData.$actions = actionLinks.$actions;
			}
		}
	},
	_createMenusBox: function() {
		document.site.toggleClass(this.menusSlot, "s-record-actions", true);
		this.page.loadNewItem(this.menusSlot, {
			$layoutType: "row",
			$autoSize: true,
			$items: [{
				$skin: "s-list-menus-link",
				$bind: "$delete",
				$category: "link",
				$icon: {
					$mode: "icon",
					$path: "list/s-list-"
				}
			}, {
				$isMenusBag: true,
				$category: "menus",
				$noText: true,
				$title: this.list.localize.flActions,
				$isTitlePicker: true,
				$isBoxCollapsable: true,
				$isPopupContent: true,
				$clientId: this.id + "-menu-picker",
				$skin: "s-record-menus",
				$layout: {
					$items: []
				}
			}]
		}, this);
		this.menusBox = this.idMap[this.id + "-menu-picker"];
		this.menusBox.contextField = this;
	},
	remove: function() {
		if (this.$$item) {
			this.$$item.remove();
		}
	},
	showRecord: function(show) {
		this.domItem.style.display = show ? "" : "none";
	},
	applyReorderCapability: function(reorder) {
		if (this.hasReorderCapability = reorder) {
			if (!this.reorderPicker) {
				this.reorderPicker = document.createElement("div");
				this.reorderPicker.className = this.list.$skin + "-item-reorder";
				this.reorderPicker.syraReorderRecordId = this.list.id;
				document.site.ddManager.setDragSpot(this.reorderPicker, true);
				this.recordValue.insertBefore(this.reorderPicker, this.recordValue.firstChild);
				if (this.list.$isDisabled) {
					document.site.disableItem(this.reorderPicker, this.list.$isDisabled);
				}
			}
		} else {
			if (this.reorderPicker) {
				document.site.removeDomChild(this.reorderPicker);
				delete this.reorderPicker;
			}
		}
	},
	parseExpression: function(expression, record, properties, $subRecordKey, ignoreCurrent) {
		if (!record) {
			var field = this.boundFields.$singleField && this.boundFields.$singleField[0];
			record = field && field.getDatasetValue();
			if (typeof(record) != 'object') {
				record = null;
			}
		}
		return RecordArticle.prototype.parseExpression.call(this, expression, record, properties, $subRecordKey, ignoreCurrent);
	},
	drawBox: function() {
		this.isSingleRecord = true;
		this.domItem = document.createElement("div");
		this.$$item = $(this.domItem);
		this.domItem.className = this.list.$skin + "-item";
		this.domItem.setAttribute("data-s-record", this.$recordIndex);
		this.domItem.setAttribute("data-s-inout", this.id);

		this.recordValue = document.createElement("div");
		this.recordValue.className = this.list.$skin + "-item-value";
		this.$$value = $(this.domItem.appendChild(this.recordValue));

		var dataSlot = document.createElement("div");
		dataSlot.className = this.list.$skin + "-item-data";
		this.recordValue.appendChild(dataSlot);

		if (this.list.$capability && this.list.$capability.reorder) {
			this.applyReorderCapability(true);
		}
		this.menusSlot = document.createElement("div");
		this.menusSlot.className = this.list.$skin + "-actions-cell";
		this.recordValue.appendChild(this.menusSlot);
		if (this.$isEditMode) {
			this.domItem.className += "-edit";
			this.recordValue.className += "-edit";
			this.list.applyRecordCapabilities(this);
			// title slot for reference field
			if (this.list.$field.$item.$type == 'application/x-reference') {
				this.titleSlot = document.createElement("div");
				this.titleSlot.className = this.list.$skin + "-item-title";
				this.domItem.appendChild(this.titleSlot);
			}
		}

		this._singleField = this.page.loadNewItem(dataSlot, {
			$isTitleRowHidden: true,
			$bind: "$singleField",
			$isEditMode: this.$isEditMode,
			$inplace: true,
			$isDiagnoseInline: true
		}, this);

		if (this.$isEditMode) {
			this._singleField.setFieldWidth();
		}

		if (this.isInsert) {
			var nextRecord = this.list.records[this.$recordIndex];
			nextRecord.domItem.parentNode.insertBefore(this.domItem, nextRecord.domItem);
			delete this.isInsert;
		} else {
			this.list.body.appendChild(this.domItem);
		}

		// in case field previously had metaData, redrawing them
		/*    var $properties = this.list.articleParent.dataset.$properties;
         if ($properties && $properties[this.list.$item.$bind]) {
         var $propertiesList = $properties[this.list.$item.$bind];
         if ($propertiesList.$items) {
         var $recordMeta = $propertiesList.$items[this.$recordIndex];
         if ($recordMeta) {
         this.applyMetaData($recordMeta);
         }
         }
         }
         */
	},
	onFieldValidate: function(field, value, errors) {
		if (!this.list.$prototype.$isMultiValue && (this.list.$prototype.$item.$type != "application/x-boolean")) {
			var newValue = field.getDataValue();
			for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
				var record = this.list.records[ii];
				if (record != this) {
					var valueComp = record._singleField.getDataValue();
					if (valueComp == newValue) {
						errors.push(document.site.localize.sglRecordUniqueValue);
					}
				}
			}
		}
	},
	dispose: function() {
		this.recordValue = this._singleField = this.toolbar = this.$$value = this.domItem = null;
		RecordArticle.prototype.dispose.call(this);
	}
});