"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopList = require("syracuse-ui/lib/field/array/list").DesktopList;
var SingleRecord = require('./singleRecord').SingleRecord;

function SingleList() {}

exports.SingleList = helpers.defineClass(SingleList, DesktopList, {
	initializeList: function() {
		this.RecordClass = this.RecordClass || SingleRecord;
		this.isPagingDisabled = true;
		this.isClientPagingPerPageDisable = true;
		this.isSingList = true;
		this.applyFacetSetting();
		this.ensureEditMode();
	},
	_createMenusBox: function() {
		DesktopList.prototype._createMenusBox.call(this);
		this.menusbar.style.display = this.topbar.style.display;
	},
	drawBox: function() {
		DesktopList.prototype.drawBox.call(this);
		this.layoutSlot.appendChild(this.domItem);
		this.$skin = this.$item.$skin || "s-single";
		this.body = document.createElement("div");
		this.body.className = this.$skin + "-body";
		this.menusbar = document.createElement("div");
		this.menusbar.className = this.$skin + "-menus";
		this.menusbar.appendChild(this.topbar);
		this._core.appendChild(this.body);
		this.menusbar.style.display = this.topbar.style.display = "none";
		this.applyDesignMetaData(this.$item, false);

		this.setState(this.$field);

		if (this.$isEditMode && this.$prototype.$item.$type == "application/x-choice") {
			if (!(this.$prototype.$links && this.$prototype.$links.$select)) {
				this.applyActionLinkChange({
					$links: {
						$select: {
							$title: this.localize.flSelect
						}
					}
				});
			}
		}
		this.applyCapabilities();
		syra_dd.colResizer.push(this);

		this.ensureLayoutMode();
	},
	isDraggable: function(target, event) {
		return this.isReorderRecordDraggable(target, event);
	},
	notifySelectRecords: function(menuItem) {
		if (this.currentSelectRecords) {
			var sendBag = this.page.ensureSendBag(this);
			var dataRecords = this.ensureDataSet();
			var $uuids = Object.keys(this.currentSelectRecords);
			sendBag.dataRecords = dataRecords;
			var lastRecord;
			for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
				var options = {
					isCreate: true,
					dataRecord: this.currentSelectRecords[$uuids[ii]].dataset
				};
				switch (this.$prototype.$item.$type) {
					case "application/x-choice":
						options.dataRecord = options.dataRecord.$uuid;
						break;
					case "application/x-reference":
						delete options.dataRecord.$serverIndex;
						delete options.dataRecord.$isSelected;
						break;
				}
				if (menuItem.$item.$variantItemKey) {
					var variantValue = options.dataRecord;
					(options.dataRecord = {})[menuItem.$item.$variantItemKey] = variantValue;
				}
				dataRecords.push(options.dataRecord);
				lastRecord = this._appendRecord(options);
			}
			if (lastRecord) {
				this.validateDisplay();
				this.page.notifyDataChange(this, sendBag.dataRecords);
				this.page.scrollToItem(lastRecord);
			}
		}
	},
	notifyActionChange: function(menuItem, target, value, notifyServer) {
		var sendBag = this.page.ensureSendBag(this);
		var dataRecords = this.ensureDataSet();
		var record = target.isRecordArticle ? target : null;
		if (value.$create) {
			var options = {
				isCreate: true
			};
			if (record) {
				options.$serverIndex = record.$serverIndex;
				options.$recordIndex = record.getRecordIndex();
			} else {
				if (this.records.length > 0) {
					options.$serverIndex = this.records[this.records.length - 1].$serverIndex + 1;
				} else {
					options.$serverIndex = 0;
				}
			}
			var targetType = this.$prototype.$item.$type;
			if (menuItem.$item.$variantItemKey) {
				targetType = this.$prototype.$item.$variants[menuItem.$item.$variantItemKey].$type;
			}
			var newValue = (targetType == "application/x-object") ? {
				$uuid: helpers.uuid.generate()
			} : null;
			if (menuItem.$item.$variantItemKey) {
				options.dataRecord = {};
				options.dataRecord[menuItem.$item.$variantItemKey] = newValue;
			} else {
				options.dataRecord = newValue;
			}
			(sendBag.dataRecords = dataRecords).splice(options.$recordIndex || this.records.length, 0, options.dataRecord);
			var record = this._appendRecord(options);
			this.validateDisplay();
			this.page.scrollToItem(record);
			//this._disableAdd( true);

		} else {
			if (record) {
				var recordIndex = record.getRecordIndex();
				this.records.splice(recordIndex, 1);
				dataRecords.splice(recordIndex, 1);
				sendBag.dataRecords = dataRecords;
				delete this.recordsMap[record.$uuid];
				this.removeRecord(record, true);
			} else {
				dataRecords.splice(0, dataRecords.length);
				sendBag.dataRecords = [];
				this.removeRecords();
			}
			this.validateDisplay();

			if (this.records.length == 0) {
				this.emptyBody(true);
			}
			this.page.notifyDataChange(this, sendBag.dataRecords);
		}
		this._appendMenusBar();
	},
	fillList: function(dataRecordSet, parentDataRecord, isDelta) {
		var focusRecordIndex = -1;
		if (this.page.focusField && this.page.focusField.articleParent &&
			this.page.focusField.articleParent.list == this) {
			focusRecordIndex = this.page.focusField.articleParent.getRecordIndex();
		}
		this.pagging.applyMetadata(parentDataRecord);
		if (this.menusbar.parentNode) {
			this.menusbar.parentNode.removeChild(this.menusbar);
		}
		DesktopList.prototype.fillList.call(this, dataRecordSet, parentDataRecord, isDelta);
		this._appendMenusBar();
		this.body.style.display = "";
		if (focusRecordIndex >= 0) {
			if (this.records.length) {
				this.records[Math.min(focusRecordIndex, this.records.length)].boundFields.$singleField[0].focus();
			}
		}
	},
	emptyBody: function(addEmptySlot, onFetch) {
		if (this.menusbar.parentNode) {
			this.menusbar.parentNode.removeChild(this.menusbar);
		}
		DesktopList.prototype.emptyBody.call(this, addEmptySlot, onFetch);
		this._appendMenusBar();
	},
	_appendMenusBar: function() {
		this.body.appendChild(this.menusbar);
	},
	setFocus: function(select, name, $serverIndex) {
		var field;
		if ((field = this.getField(name, $serverIndex))) {
			return field.focus(select);
		} else {
			if (this.isClientFetch) {
				if (!this.findRecordByServerIndex($serverIndex)) {
					if ((field = this.getField(name, $serverIndex))) {
						return field.focus(select);
					}
				}
			}
		}
		return null;
	},
	_appendRecord: function(options) {
		options.dataRecord = {
			$singleField: options.dataRecord
		};
		options.$prototype = {
			$properties: {
				$singleField: this.$prototype.$item
			}
		};
		return DesktopList.prototype._appendRecord.call(this, options);
	},
	getField: function(name, $serverIndex, select) {
		var fields, record = this.findRecordByServerIndex($serverIndex);
		if (record && !record.disposed) {
			if ((fields = record.boundFields[name]) && fields.length > 0) {
				return fields[0];
			}
		}
		return null;
	},
	dispose: function() {
		DesktopList.prototype.dispose.call(this);
	}
});