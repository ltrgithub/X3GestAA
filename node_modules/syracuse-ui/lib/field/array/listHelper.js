"use strict";
var notifyHelper = require("syracuse-ui/lib/page/delta/notifyHelper");
var Field = require('syracuse-ui/lib/field/field').Field;
var fieldDiagnoseUtils = require('syracuse-ui/lib/diagnoses/fieldDiagnosesUtils');
function _disableAdd(list, isAddDisabled){
    list._isAddDisabled = isAddDisabled;
    if (list.menuItems) {
        if (list.menuItems.$create) {
            list.menuItems.$create[0].disable(list._isAddDisabled);
        }
        if (list.menuItems.$select) {
            list.menuItems.$select[0].disable(list._isAddDisabled);
        }
    }
    if (list.$capability.insert) {
        for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
            var record = list.records[ii];
            if (record.menuItems.$create) {
                record.menuItems.$create[0].disable(list._isAddDisabled);
            }
        }
    }
}

function _ensureRecordsIndex(list){
    for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
        var record = list.records[ii];
        record.$recordIndex = ii;
        if (record.dataset.$index !== undefined) {
            record.dataset.$index = ii;
        }
        //a ameliorer
        record.$serverIndex = -1;
        for (var ii = 0, jj = list.dataset.length; ii < jj; ii++) {
            if (list.dataset[ii] == record.dataset) {
                record.$serverIndex == ii;
            }
        }
        record.dataset.$serverIndex = record.$serverIndex;
        record.renderRowIndex();
    }
}

function _checkMaxItems(list){
    if (list.$isEditMode) {
        if (list.$prototype.$minItems) {
            while (list.records.length < list.$prototype.$minItems) {
                list.appendRecord({
                    $recordIndex: list.records.length
                });
            }
        }
        if (list.$prototype.$maxItems) {
            if (list._isAddDisabled !== (list.$prototype.$maxItems <= list.dataset.length)) {
                _disableAdd(list, !list._isAddDisabled);
            }
        }
    }
};


exports.findRecordByServerIndex = function(list, $serverIndex){
    for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
        if (list.records[ii].$serverIndex == $serverIndex) {
            return list.records[ii];
        }
    }
    return null;
};

exports.findDataRecord = function(list, $uuid){
    var found;
    if (list.dataset) {
        for (var ii = 0, jj = list.dataset.length; ii < jj; ii++) {
            var dataRecord = list.dataset[ii];
            if (dataRecord && dataRecord.$uuid == $uuid) {
                found = {
                    dataRecord: dataRecord,
                    dataRecordIndex: ii
                };
                break;
            }
        }
    }
    return found;
};
function _removeRecord(record, removeDom){
    if (record.list) {
        fieldDiagnoseUtils.cleanRecordDiagnoses(record);
        if (record.list.treeDecorator) {
            record.list.treeDecorator.unregiterRecord(record);
        }
        record.list.removeItem(record, removeDom);
    }
}

exports.removeRecord = _removeRecord;

function _removeRecords(list, addEmptySlot){
    for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
        var record = list.records[ii];
        delete list.recordsMap[record.$uuid];
        _removeRecord(record);
    }
    list.recordsMap = {};
    list.records = [];
    if (list.selector && list.selector.clear) {
        list.selector.clear();
    }
    list.builder.emptyBody(addEmptySlot);
};

function _appendRecord(list, options){
    if (list.builder.isSingleBuilder) {
        options.dataRecord = {
            $singleField: options.dataRecord
        };
        options.$prototype = {
            $properties: {
                $singleField: list.$prototype.$item
            }
        };
    }
    if (options.dataRecord.$uuid === undefined) {
        options.dataRecord.$uuid = options.$recordIndex;
    }
    var record = (list.recordsMap[options.dataRecord.$uuid] = new list.builder.RecordClass());
    record.arrayLevel = "record";
    record.$uuid = options.dataRecord.$uuid;
    if (options.dataRecord) {
        record.dataset = options.dataRecord;
        record.$serverIndex = options.dataRecord.$serverIndex;
    }
    //record.$serverIndex = options.$serverIndex;
    record.$recordIndex = options.$recordIndex;
    record.$facet = list.$recordFacet;
    record.$isEditMode = list.$isEditMode;
    record.builder = (record.list = list).builder;
    record.$prototype = options.$prototype || list.$prototype.$item;
    record.isInsert = options.isInsert;
    if (record.initializeRecord) {
        record.initializeRecord(options);
    }
    list.page.initializeNewItem(record, options.$item || {}, list);
    record.loadBox(options.dataRecord);
    if (options.isInsert) {
        list.records.splice(options.$recordIndex, 0, record);
    }
    else {
        list.records.push(record);
    }
    return record;
};


exports.doSelectAction = function(list){
    if (list.$prototype.$item.$type == "application/x-choice") {
        list.builder.loadChoiceSelector();
    }
    else {
        list.currentSelectRecords = null;
        list.boxParent.openDialog({
            article: list,
            $url: list.menuItems.$select[0].$sourceUrl,
            onValidate: function(){
                exports.notifySelectRecords(list);
            },
            onSelectRecord: function(selectedRecords){
                list.currentSelectRecords = selectedRecords;
                return false;
            }
        });
    }
};


/************************************* Client Fetching **********************************************/
exports.fetchClientRecordSet = function(list, options){
    if (options && options.params) {
        var $orderBy;
        var resource = {
            dataRecordSet: list.ensureDataSet()
        };
        if (options.params.orderBy !== undefined) {
            if (options.params.orderBy === null) {
                $orderBy = null;
                list.sortCapability.resetSort();
                delete list.sortCapability._$orderBy;
            }
            else {
                $orderBy = list.sortCapability.parse(options.params.orderBy);
                if (options.params.startLetter) {
                    list.sortCapability.filterByStartLetter(resource, {
                        binding: $orderBy[0].binding,
                        startLetter: options.params.startLetter
                    });
                }
            }
            list.sortCapability.syracuseSort(resource, $orderBy);
        }
        if (options.params.where) {
            list.filterCapability.applyFilter(resource, options.params.where);
        }
        if (options.params.count || options.params.startIndex) {
            list.pagingCapability.goToClientPage({
                dataRecordSet: resource.dataRecordSet,
                $itemsPerPage: options.params.count,
                $startIndex: options.params.startIndex
            });
        }
        list.onClientFetch = true;
        exports.fillList(list, resource.dataRecordSet, list.articleParent.dataset);
        list.onClientFetch = false;
    }
};

/************************************* Delta Management **********************************************/
exports.fillList = function(list, dataRecordSet, parentDataRecord, isDelta){
    if (list.isClientFetch && list.pagingCapability) {
        //reset clientTotal result 
        delete list.pagingCapability.clientTotalRecords;
    }
    list.applyCapabilitiesSettings(parentDataRecord);
    if (isDelta) {
        var firstIndex, lastIndex;
        if (list.pagingCapability) {
            firstIndex = list.pagingCapability.$startIndex;
            if (firstIndex !== undefined) {
                --firstIndex;
                if (list.pagingCapability._$itemsPerPage !== undefined) {
                    lastIndex = firstIndex + list.pagingCapability._$itemsPerPage;
                }
            }
        }
        if (list.page.$isPartialDelta || (dataRecordSet.length == 1 && dataRecordSet[0].$index !== undefined)) {
            list.applyPartialDelta(dataRecordSet, firstIndex, lastIndex);
        }
        else {
            _applyFullDelta(list, dataRecordSet, firstIndex, lastIndex);
        }
        if (lastIndex) {
            if (list.records.length > list.pagingCapability._$itemsPerPage) {
                while (list.records.length > list.pagingCapability._$itemsPerPage) {
                    var record = list.records[list.records.length - 1];
                    delete list.recordsMap[record.$uuid];
                    _removeRecord(record, true);
                    list.records.pop();
                }
            }
            /* Version initial : pb provoque un plantage sur picker page autre que la premier car setPage() pas nécessaire
             
             if (list.isClientFetch && list.records.length < lastIndex) {
             if (list.pagingCapability.$startIndex != 1) {
             list.pagingCapability.setPage(0);
             }
             }
             */
            // Proposition new version:
            /* Passage à la page 1 si :
             Le nb d'enr reel est < = au premier index affiche ou
             si tout les enreg a afficher ne sont pas presents dans
             * */
            if (list.isClientFetch && (list.dataset.length <= firstIndex || (list.records.length < list.pagingCapability._$itemsPerPage && list.records.length < (list.dataset.length - firstIndex)))) {
                list.pagingCapability.setPage(0);
            }
            
        }
        
    }
    else {
        list.builder._body.style.display = "none";
        _removeRecords(list, !(dataRecordSet && dataRecordSet.length > 0));
        var dataSource = list.ensureDataSet();
        if (dataRecordSet) {
            var $startIndex = 1;
            var $itemsPerPage = list.pagingCapability._$itemsPerPage || dataRecordSet.length;
            if (list.isClientFetch && list.pagingCapability) {
                list.pagingCapability.ensureItemsPerPage();
                if (list.onClientFetch) {
                    dataSource = dataRecordSet;
                    list.pagingCapability.clientTotalRecords = dataRecordSet.length;
                    $startIndex = list.pagingCapability.$startIndex;
                    $itemsPerPage = list.pagingCapability._$itemsPerPage;
                }
                else {
                    if (dataRecordSet.length > list.pagingCapability._$itemsPerPage) {
                        var options = list.pagingCapability.goToClientPage();
                        $startIndex = options.$startIndex;
                        $itemsPerPage = options.$itemsPerPage;
                    }
                }
                
            }
            for (var $serverIndex = $startIndex - 1, count = 0, jj = dataRecordSet.length; (count < $itemsPerPage) && ($serverIndex < jj); count++, $serverIndex++) {
                var dataRecord = dataRecordSet[$serverIndex];
                if (!dataRecord.$isDeleted) {
                    var dataSourceRecord = dataSource[$serverIndex];
                    /*if (dataSourceRecord.$serverIndex == undefined) {
                     dataSourceRecord.$serverIndex = $serverIndex;
                     }*/
                    _appendRecord(list, {
                        dataRecord: dataSourceRecord,
                        $recordIndex: count
                    });
                }
            }
        }
    }
    _checkMaxItems(list);
    
    if (list.builder.cardview) {
        if (list.builder.cardview.$cardsPosition != "inline" && Object.keys(list.builder.list.selector.records).length == 0) {
            if (list.builder.list.records.length > 0) {
                list.builder.list.selector.select(list.builder.list.records[0].$uuid, true);
            }
        }
    }
    
    if (list.treeDecorator) {
        list.treeDecorator.onEndFillList();
    }
    list.pagingCapability.draw();
    list.sortCapability.renderOrderBy();
    if (list.builder._bodySlot) {
        list.builder._bodySlot.style.visibility = "hidden";
    }
    list.builder._body.style.display = "";
    list.onWindowResize(true);
    if (list.builder._bodySlot) {
        list.builder._bodySlot.style.visibility = "visible";
    }
};
exports.applyPartialDelta = function(list, dataRecordSet, firstIndex, lastIndex){
    var found, foundIndex;
    for (var $serverIndex = 0, jj = dataRecordSet.length; $serverIndex < jj; $serverIndex++) {
        var dataSourceRecord = dataRecordSet[$serverIndex];
        found = null;
        foundIndex = 0;
        for (var mm = list.records.length; foundIndex < mm; foundIndex++) {
            found = list.records[foundIndex];
            if (found.$uuid == dataSourceRecord.$uuid) {
                break;
            }
            else {
                found = null;
            }
        }
        if (found) {
            if (dataSourceRecord.$isDeleted) {
                list.records.splice(foundIndex, 1);
                delete list.recordsMap[found.$uuid];
                _removeRecord(found, true);
            }
            else {
                found.ensureDataSet();
                found.applyChange(dataSourceRecord);
                if (dataSourceRecord.$index !== undefined && dataSourceRecord.$index != foundIndex) {
                    list.records.splice(foundIndex, 1);
                    list.records.splice(dataSourceRecord.$index, 0, found);
                }
            }
        }
        else {
            if (!dataSourceRecord.$isDeleted) {
                var index = dataSourceRecord.$index !== null && dataSourceRecord.$index !== undefined ? dataSourceRecord.$index : $serverIndex;
                if (firstIndex !== undefined) {
                    if ((index < firstIndex) ||
                    (lastIndex != undefined && index >= lastIndex)) {
                        index = -1;
                    }
                }
                if (index != -1) {
                    _appendRecord(list, {
                        dataRecord: dataSourceRecord,
                        $recordIndex: dataSourceRecord.$index,
                        isInsert: true
                    });
                }
            }
        }
    }
    _ensureRecordsIndex(list);
};
function _applyFullDelta(list, dataRecordSet, firstIndex, lastIndex){
    var orderChanged;
    var oldMap = list.recordsMap;
    list.recordsMap = {};
    list.records = [];
    var lastRecord;
    for (var $serverIndex = 0, jj = dataRecordSet.length; $serverIndex < jj; $serverIndex++) {
        var dataRecord = dataRecordSet[$serverIndex];
        var record = oldMap[dataRecord.$uuid];
        if (record) {
            record.applyChange(dataRecord);
            if (record.$serverIndex != $serverIndex) {
                if (lastRecord) {
                    record.notifyReorder(lastRecord, "insertAfter");
                }
                else {
                    record.notifyReorder(null, "prepend");
                }
                record.$recordIndex = record.$serverIndex = $serverIndex;
                record.ensureDataSet();
                orderChanged = true;
            }
            list.records.push(list.recordsMap[dataRecord.$uuid] = lastRecord = record);
        }
        else {
            //var index = dataRecord.$index || $serverIndex;
            if (!(firstIndex !== undefined &&
            ($serverIndex < firstIndex ||
            (lastIndex != undefined && $serverIndex >= lastIndex)))) {
                record = _appendRecord(list, {
                    dataRecord: list.dataset[$serverIndex],
                    $recordIndex: $serverIndex,
                    isInsert: true
                });
                list.recordsMap[dataRecord.$uuid] = lastRecord = record;
                orderChanged = true;
            }
        }
        delete oldMap[dataRecord.$uuid];
    }
    var uiids = Object.keys(oldMap);
    for (var ii = 0, jj = uiids.length; ii < jj; ii++) {
        _removeRecord(oldMap[uiids[ii]], true);
    }
    if (orderChanged) {
        _ensureRecordsIndex(list);
    }
}

/************************************* Apply MetaData **********************************************/
exports.applyMetaData = function(list, metaData){
    var redraw = false;
    if (metaData.$item) {
        metaData.$items = metaData.$item
    }
    Field.prototype.applyMetaData.call(list, metaData);
    if (metaData.$type === undefined) {
        if (metaData.$items) {
            if (list.builder.isSingleBuilder) {
                for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
                    list.records[ii].applyMetaData(metaData.$items[ii]); //metadata and not applyChange cause no $bind
                }
            }
            else {
                for (var ii = 0, jj = metaData.$items.length; ii < jj; ii++) {
                    var $record = metaData.$items[ii];
                    var record = list.recordsMap[$record.$uuid];
                    if (record) {
                        record.applyChange($record);
                    }
                }
            }
        }
        redraw = _applyFieldsMetaData(list, metaData);
    }
    if (metaData && metaData.$capabilities !== undefined) {
        var $prev = list.$capability;
        var $actions;
        list.parseCapabilities(metaData.$capabilities);
        if ($prev.append && !list.$capability.append) {
            $actions = {
                $create: {
                    $isHidden: true
                }
            };
        }
        if ($prev["delete"] && !list.$capability["delete"]) {
            $actions = $actions || {};
            $actions.$delete = {
                $isHidden: true
            };
        }
        if ($actions) {
            list.applyActionLinkChange({
                $actions: $actions
            });
        }
        list.applyCapabilities();
        redraw = redraw || (list.records.length > 0);
    }
    return redraw;
};
exports.applyDesignMetaData = function(list, metaData, onAuthoring){
    if (onAuthoring) {
        if (metaData.$format !== undefined) {
            list.$item.$format = metaData.$format;
            list.reloadBuilder(true);
        }
        if (metaData.$isQuickFilter !== undefined) {
            list.$item.$isQuickFilter = metaData.$isQuickFilter;
            list.reloadBuilder(true);
        }
        if (metaData.$isRowIndexVisible !== undefined) {
            list.$item.$isRowIndexVisible = metaData.$isRowIndexVisible;
            list.reloadBuilder(true);
        }
    }
    if (list.$prototype.$cube || list.$prototype.$decorator) {
        if (!list.graphDecorator) {
            list.graphDecorator = new GraphDecorator();
        }
        list.graphDecorator.applyGraphSettings(list, metaData);
    }
    Field.prototype.applyDesignMetaData.call(list, metaData, onAuthoring);
    list.builder.applyDesignMetaData(metaData, onAuthoring);
    return _applyFieldsMetaData(list, metaData, onAuthoring);
};

function _applyFieldsMetaData(list, metaData, onAuthoring){
    var redraw = false;
    list.setEditMode(metaData);
    
    if (metaData.$isReadOnly !== undefined ||
    metaData.$isDisabled !== undefined ||
    metaData.$fieldStyle !== undefined ||
    metaData.$valueStyle !== undefined ||
    metaData.$titleStyle !== undefined) {
        metaData.$item = metaData.$item || {};
        var $properties = metaData.$item.$properties || metaData.$properties || {};
        redraw = true;
        var $binds = Object.keys(list.$fieldProperties);
        for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
            var $bind = $binds[ii];
            var $property = $properties[$bind];
            if (!$property) {
                $property = $properties[$bind] = {};
            }
            if (metaData.$isReadOnly !== undefined && $properties[$bind].$isReadOnly === undefined) {
                $property.$isReadOnly = metaData.$isReadOnly;
            }
            if (metaData.$isDisabled !== undefined && $property.$isDisabled === undefined) {
                $property.$isDisabled = metaData.$isDisabled;
            }
            if (metaData.$fieldStyle !== undefined && $property.$fieldStyle === undefined) {
                $property.$fieldStyle = metaData.$fieldStyle;
            }
            if (metaData.$valueStyle !== undefined && $property.$valueStyle === undefined) {
                $property.$valueStyle = metaData.$valueStyle;
            }
            if (metaData.$titleStyle !== undefined && $property.$titleStyle === undefined) {
                $property.$titleStyle = metaData.$titleStyle;
            }
        }
    }
    if (metaData.$orderBy !== undefined) {
        list.sortCapability.setOrderBy(metaData.$orderBy, metaData.$startLetter);
    }
    list.pagingCapability.applyMetadata(metaData, onAuthoring);
    if (metaData.$item) {
        if (metaData.$item.$properties) {
            var $binds = Object.keys(metaData.$item.$properties);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                var $bind = $binds[ii];
                var $metaField = metaData.$item.$properties[$bind];
                var $updated;
                if (onAuthoring) {
                    for (var ii = 0, jj = list.$item.$layout.$items.length; ii < jj; ii++) {
                        var $item = list.$item.$layout.$items[ii];
                        if ($item.$bind == $bind) {
                            $updated = $item;
                            break;
                        }
                    }
                }
                else {
                    $updated = list.$fieldProperties[$bind];
                }
                if ($updated) {
                    if (!redraw) {
                        redraw = ($metaField.$isHidden !== undefined) || ($metaField.$isReadOnly !== undefined) ||
                        ($metaField.$isDisabled !== undefined) ||
                        ($metaField.$fieldStyle !== undefined) ||
                        ($metaField.$valueStyle !== undefined) ||
                        ($metaField.$titleStyle !== undefined) ||
                        ($metaField.$title !== undefined);
                    }
                    list.page.ensureDeltaManager().applyObjectDelta($updated, $metaField, true);
                }
            }
        }
        if (metaData.$item.$links) {
            var $menus = list.$fieldProperties.$links = list.$prototype.$item.$links || {};
            list.page.ensureDeltaManager().applyObjectDelta($menus, metaData.$item.$links, true);
        }
        if (metaData.$item.$actions) {
            var $menus = list.$fieldProperties.$actions = list.$prototype.$item.$actions || {};
            list.page.ensureDeltaManager().applyObjectDelta($menus, metaData.$item.$actions, true);
        }
    }
    if (redraw) {
        list.reloadBuilder();
    }
    return redraw;
};


/************************************* Notify Change **********************************************/
exports.notifyReorderRecords = function(list, sourceRecord, targetRecord, $insert){
    var dataRecords = list.ensureDataSet();
    var dataRecord = dataRecords[sourceRecord.$recordIndex];
    
    dataRecords.splice(sourceRecord.$recordIndex, 1);
    list.records.splice(sourceRecord.$recordIndex, 1);
    if (targetRecord.$recordIndex > sourceRecord.$recordIndex) {
        sourceRecord.$recordIndex = ($insert == "insertAfter") ? targetRecord.$recordIndex : (targetRecord.$recordIndex - 2);
    }
    else {
        sourceRecord.$recordIndex = ($insert == "insertAfter") ? targetRecord.$recordIndex + 1 : (targetRecord.$recordIndex);
    }
    sourceRecord.$recordIndex = Math.max(sourceRecord.$recordIndex, 0);
    dataRecords.splice(sourceRecord.$recordIndex, 0, dataRecord);
    list.records.splice(sourceRecord.$recordIndex, 0, sourceRecord);
    sourceRecord.notifyReorder(targetRecord, $insert);
    _ensureRecordsIndex(list);
    _checkMaxItems(list);
    
    var sendBag = list.page.ensureSendBag(list);
    if (list.builder.isSingleBuilder) {
        sendBag.dataRecords = dataRecords;
    }
    else {
        sendBag.reorderRecord(sourceRecord, targetRecord);
    }
    list.page.notifyDataChange(list, sendBag.dataRecords);
};

exports.notifyDeleteRecord = function(list, record){
    var sendBag = list.page.ensureSendBag(list);
    var dataRecords = list.ensureDataSet();
    if (record) {
        list.records.splice(record.$recordIndex, 1);
        if (list.builder.isSingleBuilder) {
            dataRecords.splice(record.$recordIndex, 1);
            sendBag.dataRecords = dataRecords;
        }
        else {
            var found = exports.findDataRecord(list, record.$uuid);
            if (found) {
                dataRecords.splice(found.dataRecordIndex, 1);
                record.$index = found.dataRecordIndex;
            }
            sendBag.deleteRecord(record);
            delete record.$index;
        }
        _removeRecord(record, true);
    }
    else {
        dataRecords.splice(0, dataRecords.length);
        sendBag.dataRecords = [];
        _removeRecords(list);
    }
    _ensureRecordsIndex(list);
    _checkMaxItems(list);
    list.page.notifyDataChange(list, sendBag.dataRecords);
};

exports.notifyCreateRecord = function(list, record){
    var sendBag = list.page.ensureSendBag(list);
    var dataRecords = list.ensureDataSet();
    var options = {};
    if (record) {
        options.$serverIndex = record.$serverIndex;
        options.$recordIndex = record.$recordIndex;
        options.isInsert = true;
    }
    else {
        if (list.records.length > 0) {
            options.$serverIndex = list.records[list.records.length - 1].$serverIndex + 1;
        }
        else {
            options.$serverIndex = 0;
        }
        options.$recordIndex = list.records.length;
    }
    if (list.builder.isSingleBuilder) {
        (sendBag.dataRecords = dataRecords).splice(options.$recordIndex, 0, null);
        _appendRecord(list, options);
        _ensureRecordsIndex(list);
        _checkMaxItems(list);
        _disableAdd(list, true);
    }
    else {
        options.dataRecord = {
            $uuid: helpers.uuid.generate()
        };
        if (record) {
            var found = exports.findDataRecord(list, record.$uuid);
            dataRecords.splice(found.dataRecordIndex, 0, options.dataRecord);
        }
        else {
            dataRecords.splice(options.$serverIndex, 0, options.dataRecord);
        }
        var newRecord = _appendRecord(list, options);
        sendBag.createRecord(newRecord, options.$recordIndex);
        _ensureRecordsIndex(list);
        _checkMaxItems(list);
        list.page.notifyDataChange(list, sendBag.dataRecords);
        if (list.builder._bodySlot) {
            list.builder._bodySlot.style.visibility = "visible";
        }
    }
};

exports.notifySelectRecords = function(list){
    if (list.currentSelectRecords) {
        var sendBag = list.page.ensureSendBag(list);
        var dataRecords = list.ensureDataSet();
        if (list.builder.isSingleBuilder) {
            sendBag.dataRecords = dataRecords;
            var $uuids = Object.keys(list.currentSelectRecords);
            for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
                var options = {
                    dataRecord: list.currentSelectRecords[$uuids[ii]].dataset,
                    $recordIndex: list.records.length
                };
                switch (list.$prototype.$item.$type) {
                    case "application/x-choice":
                        options.dataRecord = options.dataRecord.$uuid;
                        break;
                    case "application/x-reference":
                        delete options.dataRecord.$serverIndex;
                        delete options.dataRecord.$isSelected;
                        break;
                }
                dataRecords.push(options.dataRecord);
                _appendRecord(list, options);
            }
        }
        _ensureRecordsIndex(list);
        _checkMaxItems(list);
        list.page.notifyDataChange(list, sendBag.dataRecords);
    }
};
