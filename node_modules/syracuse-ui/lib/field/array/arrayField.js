"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var Field = require('syracuse-ui/lib/field/field').Field;

var Designer = require("syracuse-ui/lib/authoring/listDesigner").Designer;

var _shortcutInvoker = require("syracuse-ui/lib/field/array/tools/shortCutInvoker");
var _filler = require("syracuse-ui/lib/field/array/tools/filler");
var RecordReorderDDAgent = require("./tools/recordReorderDDAgent").RecordReorderDDAgent;
var Paging = require("./tools/paging").Paging;
var Searcher = require("./tools/searcher").Searcher;
var _sorter = require("./tools/sorter");

function _resetCommonStatus(obj, metaData) {
	if (metaData.$isReadOnly !== undefined && obj.$isReadOnly) {
		delete obj.$isReadOnly;
	}
	if (metaData.$isDisabled !== undefined && obj.$isDisabled) {
		delete obj.$isDisabled;
	}
	if (metaData.$fieldStyle !== undefined && obj.$fieldStyle) {
		delete obj.$fieldStyle;
	}
	if (metaData.$valueStyle !== undefined && obj.$valueStyle) {
		delete obj.$valueStyle;
	}
	if (metaData.$titleStyle !== undefined && obj.$titleStyle) {
		delete obj.$titleStyle;
	}
}

function _applyCommonStatus(obj, metaData) {
	if (obj && metaData) {
		if (metaData.$isReadOnly !== undefined) {
			obj.$isReadOnly = metaData.$isReadOnly;
		}
		if (metaData.$isDisabled !== undefined) {
			obj.$isDisabled = metaData.$isDisabled;
		}
		if (metaData.$fieldStyle !== undefined) {
			dataRecord.$fieldStyle = metaData.$fieldStyle;
		}
		if (metaData.$valueStyle !== undefined) {
			obj.$valueStyle = metaData.$valueStyle;
		}
		if (metaData.$titleStyle !== undefined) {
			obj.$titleStyle = metaData.$titleStyle;
		}
	}
}

function _propagateMetaToFields($properties, metaData, $metaFieldProperties) {
	var $binds = Object.keys($properties);
	for (var mm = 0, kk = $binds.length; mm < kk; mm++) {
		_resetCommonStatus($properties[$binds[mm]], metaData);
		//reeapply if defiend in meta
		_applyCommonStatus($properties[$binds[mm]], $metaFieldProperties[$binds]);
	}
}

function _applyListMeta(list, metaData) {
	if (metaData.$type === undefined) {
		var $metaRecord = {};
		if (metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
			//apply to datarecords
			var $metaFieldProperties = metaData.$item && metaData.$item.$properties ? metaData.$item.$properties || {} : {};
			for (var ii = 0, jj = list.dataset.length; ii < jj; ii++) {
				var dataRecord = list.dataset[ii];
				_resetCommonStatus(dataRecord, metaData);
				if (dataRecord.$properties) {
					_propagateMetaToFields(dataRecord.$properties, metaData, $metaFieldProperties);
				}
			}
			//apply to $delta currently defined for list
			var $deltaListProperties = list.getMetaData();
			if ($deltaListProperties) {
				$deltaListProperties = $deltaListProperties.$item && $deltaListProperties.$item.$properties ? $deltaListProperties.$item.$properties : null;
				if ($deltaListProperties) {
					_propagateMetaToFields($deltaListProperties, metaData, $metaFieldProperties);
				}
			}
			_applyCommonStatus($metaRecord, metaData);
		}
		if (metaData.$item && metaData.$item.$properties) {
			$metaRecord.$properties = metaData.$item.$properties;
			list.builder.applyMetaDataRecords && list.builder.applyMetaDataRecords($metaRecord);
		}
		if (Object.keys($metaRecord)) {
			list.ensureGlobalMetaRecord(true);
			for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
				list.records[ii].applyChange($metaRecord);
			}
		}
	}
	if (metaData.$capabilities !== undefined) {
		list.applyCapabilities(list, metaData.$capabilities);
	}
	if (metaData.$orderBy !== undefined) {
		_sorter.setOrderBy(list, metaData.$orderBy);
	}
	if (metaData.$item) {
		if (metaData.$item.$links) {
			var $menus = list.$prototype.$item.$links || {};
			syra_site.deltaManager.applyObjectDelta(list.page, $menus, metaData.$item.$links, true);
		}
		if (metaData.$item.$actions) {
			var $menus = list.$prototype.$item.$actions || {};
			syra_site.deltaManager.applyObjectDelta(list.page, $menus, metaData.$item.$actions, true);
		}
	}
	list.paging.applyMetadata(metaData);
}

var _capabilities = {
	_actionTypes: {
		append: {
			$bind: "$create",
			$title: "flAppend"
		},
		deleteAll: {
			$bind: "$delete",
			$title: "flDeleteAll",
			$confirm: "flDeleteAllMessageText"
		},
		copy: {
			$bind: "$copy",
			$title: "flCopy"
		},
		cut: {
			$bind: "$cut",
			$title: "flCut"
		},
		paste: {
			$bind: "$paste",
			$title: "flPaste"
		}
	},
	_addAction: function(list, $actions, name) {
		var action = this._actionTypes[name];
		var $newAction = $actions[action.$bind] = {
			$title: syra_local[action.$title],
			$confirm: syra_local[action.$confirm],
			$isHidden: false
		};
		var $keys = list.$capability[name] && list.$capability[name].$variantItemKeys;
		if ($keys) {
			$newAction.$variants = {};
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				$newAction.$variants[$keys[ii]] = {
					$confirm: syra_local[action.$confirm],
					$isHidden: false
				};
			}
		}
	},
	_parse: function(item, $capabilities, $variantItemKey) {
		if ($capabilities) {
			var parts = $capabilities.split(",");
			for (var ii = 0, jj = parts.length; ii < jj; ii++) {
				var part = parts[ii];
				if (part) {
					item.$capability[part] = item.$capability[part] || {};
					if ($variantItemKey) {
						(item.$capability[part].$variantItemKeys = item.$capability[part].$variantItemKeys || []).push($variantItemKey);
					}
				}
			}
		}
	},
	apply: function(list, $meta) {
		var $actions = {};
		var $prev = list.$capability;
		var $capabilities = $meta;
		list.$capability = {};
		if ($meta != null) {
			this._parse(list, $capabilities);
		} else {
			this._parse(list, list.$prototype.$capabilities);
			if (list.$field.$item && list.$field.$item.$variants) {
				var $keys = Object.keys(list.$field.$item.$variants);
				for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
					this._parse(list, list.$field.$item.$variants[$keys[ii]].$capabilities, $keys[ii]);
				}

			}
		}
		if ($prev) {
			if ($prev.append && !list.$capability.append) {
				$actions.$create = {
					$isHidden: true
				};
			}
			if ($prev.deleteAll && !list.$capability.deleteAll) {
				$actions.$delete = {
					$isHidden: true
				};
			}
			if ($prev.cut && (!list.$capability.copy || !list.$capability.deleteAll)) {
				$actions.$cut = {
					$isHidden: true
				};
			}
			if ($prev.copy && !list.$capability.copy) {
				$actions.$copy = {
					$isHidden: true
				};
			}
			if ($prev.paste && !list.$capability.paste) {
				$actions.$paste = {
					$isHidden: true
				};
			}
			if ($prev["delete"] && !list.$capability["delete"]) {
				$actions.$delete = {
					$isHidden: true
				};
			}
		}
		list.$capability.append && this._addAction(list, $actions, "append");
		if (list.$capability.copy) {
			list.$capability.deleteAll && this._addAction(list, $actions, "cut");
			this._addAction(list, $actions, "copy");
			this._addAction(list, $actions, "paste");
		}
		list.$capability.deleteAll && this._addAction(list, $actions, "deleteAll");
		if ($actions.$create || $actions.$delete) {
			syra_menus.setMenus(list, {
				$actions: $actions
			});
		}
		list.$capability.search && list.toggleSearcher(true);
		if ($meta !== undefined) {
			for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
				this.applyToRecord(list.records[ii], true);
			}
		}
	},
	applyToRecord: function(record) {
		var $prev = record.$capability;
		record.$capability = record.list.$capability;
		if (record.dataset && record.dataset.$capabilities !== undefined) {
			record.$capability = {};
			this._parse(record, record.dataset.$capabilities);
		}
		var $actions = {};
		if ($prev) {
			if ($prev["delete"] && !record.$capability["delete"]) {
				$actions.$delete = {
					$isHidden: true
				};
			}
			if ($prev.insert && !record.$capability.insert) {
				$actions.$create = {
					$isHidden: true
				};
			}
		}
		if (record.$capability.insert) {
			$actions.$create = {
				$title: syra_local.flInsert,
				$isHidden: false
			};
		}
		if (record.$capability["delete"]) {
			$actions.$delete = {
				$title: syra_local.flDelete,
				$confirm: record.list.$confirmDelete,
				$isHidden: false
			};
		}
		if ($actions.$create || $actions.$delete) {
			syra_menus.setMenus(record, {
				$actions: $actions
			});
		}
	}
};

function ArrayField() {}

exports.ArrayField = helpers.defineClass(ArrayField, Article, {
	loadBox: function(initData) {
		this.filler = _filler;
		this.sorter = _sorter;
		this.paging = new Paging(this);

		this.$mnPickersCss = "s-mn-link";
		this.isArrayField = true;
		this.$capability = {};
		this.$iconPath = this.$iconPath || this.$item.$iconPath || "page/s-list-";
		Article.prototype.loadBox.call(this, initData);
		this.articleParent.bind(this, this.$item.$bind);
		if (this.records.length == 0) {
			this.emptyBody(true, this.page.$autoFetch);
		}
	},
	applyCapabilities: function() {
		_capabilities.apply(this);
	},
	applyCapabilitiesToRecord: function(record) {
		_capabilities.applyToRecord(record);
	},
	addReorder: function(record) {
		if (!record.reorderBtn) {
			record.reorderBtn = document.createElement("div");
			record.reorderBtn.className = record.$skin + "-reorder";
			record.reorderBtn.syraReorderRecordId = record.list.id;
			record.reorderBtn.syraDragSpot = record.id;
			record.onAddButton(record.reorderBtn);
			if (record.reorderBtnParent !== null) { //null set for insertPicker after
				var parent = record.reorderBtnParent || record.domItem;
				parent.insertBefore(record.reorderBtn, parent.firstChild);
			}
			record.list.$isDisabled && syra_site.dom.disableItem(record.reorderBtn, record.list.$isDisabled);
		}
	},
	drawBox: function() {
		this.arrayLevel = "array";
		this.isRecordDataset = true; //!important for sendBag
		this._isAddDisabled = false;
		this.records = [];
		this.recordsMap = {};

		this.$fields = this.$prototype.$item.$properties || {};
		this.$recordFacet = this.articleParent.$item.$recordFacet || this.$facet || "$details";

		if (this.$field.$builderClass) {
			this.builder = new this.$field.$builderClass();
			this.builder.initialize(this);
			delete this.$field.$builderClass;
		}

		this.initializeList(this);

		this.builder.endInitiallize();

		this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
		if (this.$isEditMode) {
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
			this.inputId = this.id + "-input";
		}
		Field.prototype._initCss.call(this);

		this.domItem = document.createElement("div");
		this.domItem.className = this._$cssField;
		this.domItem.syraItem = this.id;
		this.appendTitle();

		this._dataValue = document.createElement("article");
		this._dataValue.className = this._$cssField + "-value";
		this._core = this._dataValue;
		this.domItem.appendChild(this._dataValue);

		this.setTitle(this.$item.$title || this.$field.$title);
		this.setDescription(this.$item.$description || this.$field.$description);
		this.setState(this.$field);

		this.setAdvancedState();
		this._dataValue.className = this.$item.$skin ? (this.$item.$skin + "-list s-list") : "s-list";


		this._core = document.createElement("div");
		this._core.className = "s-list-core";
		if (!this.topbar) {
			this.topbar = document.createElement("div");
			this.topbar.className = "s-list-topbar";
		}
		this.menusSlot = this.topbar;

		this.searcherSlot = document.createElement("div");
		this.searcherSlot.style.display = "none";
		this.searcherSlot.className = "s-list-search";
		this.topbar.appendChild(this.searcherSlot);

		this.topbarRightSlot = document.createElement("div");
		this.topbarRightSlot.className = "s-list-topbar-right";
		this.topbar.appendChild(this.topbarRightSlot);

		this.pagerSlot = document.createElement("div");
		this.pagerSlot.className = "s-pager";
		this.topbarRightSlot.appendChild(this.pagerSlot);

		if (this.$addRefresh) {
			syra_menus.button.add({
				parent: this,
				slot: this.topbarRightSlot,
				text: syra_local.box_refresh,
				css: "s-mn-list-btn " + this.$mnPickersCss,
				iconOnly: true,
				fontIcon: "refresh",
				btnclick: function() {
					this.parent.filler.trigger(this.parent);
				}
			});
		}
		if (this.$item.$addMaximize !== undefined) {
			this.$addMaximize = this.$item.$addMaximize;
		}
		if (this.$addMaximize) {
			syra_site.maximizer.toggleButton(this, true, this.topbarRightSlot, "s-mn-list-btn " + this.$mnPickersCss);
		}
		this._dataValue.appendChild(this.topbar);
		this._dataValue.appendChild(this._core);

		this.setArticleId(this._core);

		this.builder.list_onAfterDraw();
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		this.ensureDataSet();
		metaData && this.applyMetaData(metaData);

		if (dataRecordSet !== undefined) {
			var isDelta = this.page.$isPartialDelta;
			if (!isDelta) {
				isDelta = this.page.$isEditMode && (this.dataset && this.dataset.length > 0) && !this.isSingList;
			}
			this.fillList(dataRecordSet, parentDataRecord, isDelta);
		} else {
			metaData && _filler.validateDisplay(this);
		}
		this.builder.list_onAfterSetDataBind && this.builder.list_onAfterSetDataBind(dataRecordSet, parentDataRecord, metaData);
	},
	isReorderRecordDraggable: function(target, event) {
		if (target.syraReorderRecordId == this.id) {
			syra_dd.dropableItem = {
				list: this,
				reorderRecord: _filler.findRecord(this, event.target)
			};
			syra_dd.start(this, this.RecordReorderDDAgentClass || RecordReorderDDAgent, this.body);
			event.syraRetValue = false;
			return;
		}
		return null;
	},
	getDefaultTitle: function() {
		return syra_local.flDefaultTitle;
	},
	applyMetaData: function(metaData) {
		if (this.$field.$isFusionNavigationList) {
			return false;
		}
		if (metaData.$item) {
			metaData.$items = metaData.$item;
		}
		Field.prototype.applyMetaData.call(this, metaData);
		_applyListMeta(this, metaData);
	},
	createMenuItem: function($bind, $menu) {
		var item = this.page.loadNewItem(null, {
			$category: "link",
			$menu: $menu,
			$bind: $bind,
			$skin: "s-mn-list-btn s-mn-link",
			$icon: {
				$mode: "icon",
				$path: this.$iconPath
			}
		}, this);
		return item;
	},
	onAddMenuItem: function($bind, $menu) {
		var item = this.createMenuItem($bind, $menu);
		this.menusSlot.insertBefore(item.domItem, this.menusSlot.firstChild);
		item.layoutSlot = this.menusSlot;
		delete item.$item.$menu;
		return item;
	},
	onAddMenuPicker: function(picker) {
		this.searcherSlot.parentNode.insertBefore(picker, this.searcherSlot);
		picker.className += " s-mn-list-btn";
		if (this.articleParent && this.articleParent.onAddButton) {
			this.articleParent.onAddButton(picker);
		}
	},
	onMenuClick: function(menuItem) {
		if (!menuItem.$isAction) {
			if (menuItem.$isQueryFilter) {
				_filler.trigger(this, {
					$filters: menuItem.$sourceBind
				});
				return false;
			}
			switch (menuItem.$sourceBind) {
				case "$first":
				case "$previous":
				case "$next":
				case "$last":
					_filler.trigger(this, null, {
						$url: syra_url.formatMenuUrl(menuItem.articleParent, menuItem)
					});
					return false;
				case "$select":
					_filler.doSelectAction(this, menuItem);
					return false;
				case "$design":
					syra_site.switchItemDesigner(this, true);
					return false;
			}
		}
		return true;
	},

	scrollToField: function() {
		Field.prototype.scrollToField.call(this);
	},
	getDatasetValue: function() {
		return Field.prototype.getDatasetValue.call(this);
	},
	setDatasetValue: function(value) {
		return Field.prototype.setDatasetValue.call(this, value);
	},
	ensureLayoutMode: function() {
		Field.prototype.ensureLayoutMode.call(this);
	},
	ensureEditMode: function() {
		Field.prototype.ensureEditMode.call(this);
	},
	setAdvancedState: function($isAdvanced, designing) {
		Field.prototype.setAdvancedState.call(this, $isAdvanced, designing);
	},
	setDescription: function($description) {
		Field.prototype.setDescription.call(this, $description);
	},
	appendTitle: function() {
		Field.prototype.appendTitle.call(this);
		if (this.domTitle) {
			this.domTitle.style.display = "none";
		}
	},
	hideTitle: function($isTitleHidden) {
		Field.prototype.hideTitle.call(this, $isTitleHidden);
	},
	getTitle: function() {
		return Field.prototype.getTitle.call(this);
	},
	setTitle: function($title) {
		Field.prototype.setTitle.call(this, $title);
		if (this.domTitle) {
			this.domTitle.style.display = this.getTitle().length == 0 ? "none" : "";
		}
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
	},
	showItem: function(show) {
		Field.prototype.showItem.call(this, show);
	},
	applyDesignMetaData: function(metaData, designing) {
		Field.prototype.applyDesignMetaData.call(this, metaData, designing);
		this.builder.list_onAfterApplyDesignMetaData && this.builder.list_onAfterApplyDesignMetaData(metaData, designing);
	},
	findRecordByServerIndex: function($serverIndex) {
		return _filler.findRecordByServerIndex(this, $serverIndex);
	},
	findRecord: function(target) {
		return _filler.findRecord(this, target);
	},
	findDataRecord: function($uuid) {
		return _filler.findDataRecord(this, $uuid);
	},
	notifyClientSave: function(savedDelta) {
		_filler.notifyClientSave(this, savedDelta);
	},
	onFieldInputEvent: function(event, shortcuts) {
		this.selector && this.selector.onFieldInputEvent(this, event);
	},
	onItemInOut: function(on, event, target) {
		this.builder.list_onItemInOut(on, event, target);
	},
	isDraggable: function(target, event) {
		return this.builder.isDraggable(target, event);
	},
	validateKeyPress: function(charCode, event) {
		return _shortcutInvoker.validateKeyPress(this, charCode, event);
	},
	applyShortCut: function(shortcuts, event) {
		return _shortcutInvoker.applyShortCut(this, shortcuts, event);
	},
	ensureDataSet: function() {
		return this.dataset = this.setDatasetValue(this.getDatasetValue() || []);
	},
	appendDetailLink: function(value, $detailsLink) {},
	getField: function(name, $serverIndex, select) {
		return _filler.getField(this, name, $serverIndex, select);
	},
	getDataValue: function(name, $serverIndex) {
		return _filler.getDataValue(this, name, $serverIndex);
	},
	setFocus: function(select, name, $serverIndex) {
		return _filler.setFocus(this, select, name, $serverIndex);
	},
	getMetaData: function() {
		var $meta = this.articleParent.dataset.$properties;
		if ($meta) {
			$meta = $meta[this.$item.$bind];
		}
		if ($meta && this.$item.$variantItemKey) {
			return $meta[this.$item.$variantItemKey];
		}
		return $meta;
	},
	ensureGlobalMetaRecord: function(reset) {
		if (reset) {
			this.globalMetaRecords = null;
		}
		if (reset || !this.globalMetaRecords) {
			this.globalMetaRecords = null;
			var $meta = this.getMetaData();
			if ($meta) {
				this.globalMetaRecords = {};
				_applyCommonStatus(this.globalMetaRecords, $meta);
				if ($meta.$item && $meta.$item.$properties) {
					this.globalMetaRecords.$properties = $meta.$item.$properties;
				}
			}
		}
		return this.globalMetaRecords;
	},
	dispose: function() {
		this.designer && this.designer.dispose();
		syra_site.disposeObject(this.searcher);
		this.paging && this.paging.dispose();
		if (this.builder) {
			this.builder.emptyDataItem = null;
			this.builder.dispose && this.builder.dispose(this);
		}
		Article.prototype.dispose.call(this);
	},
	toggleSearcher: function(load) {
		if (load) {
			if (!this.searcher && this.$capability.search && this.$item.$isSearchHidden !== true) {
				this.searcher = new Searcher();
				this.searcher.load(this);
			}
		}
	}
});