"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var Field = require('syracuse-ui/lib/field/field').Field;
var RecordReorderDDAgent = require("syracuse-ui/lib/field/array/capability/recordReorderDDAgent").RecordReorderDDAgent;

var _metaHelper = require("syracuse-ui/lib/field/array/tools/metaHelper");
var _shortcutInvoker = require("syracuse-ui/lib/field/array/tools/shortCutInvoker");
var _filler = require("syracuse-ui/lib/field/array/tools/filler");
var _listDesigner = require("syracuse-ui/lib/field/array/designer/listDesigner");
var _capabilityMaker = require("./capability/capabilityMaker");

function ArrayField() {}

exports.ArrayField = helpers.defineClass(ArrayField, Article, {
	loadBox: function(initData) {
		this.filler = _filler;
		this.metaHelper = _metaHelper;
		(this.capabilityMaker = _capabilityMaker).initialize(this);
		if (!this.articleParent.childLists) {
			this.articleParent.childLists = [];
		}
		this.$mnPickersCss = "s-list-picker";
		this.articleParent.childLists.push(this);
		this.isList = true;
		this.$capability = {};
		this.$iconPath = this.$iconPath || this.$item.$iconPath || "page/s-list-";
		this.$itemRecordMenuSkin = this.$itemRecordMenuSkin || "s-list-record-picker"; // "s-mn-record-link";
		this.$itemMenuSkin = this.$itemMenuSkin || "s-mn-list-link";
		this.$skinMenus = this.$item.$skinMenus || "s-list-menus";
		Article.prototype.loadBox.call(this, initData);
		this.articleParent.bind(this, this.$item.$bind);
		if (syra_site.enableTestRobot) {
			syra_fields.appendQualityAtt(this, this.domItem);
		}
		if (this.records.length == 0) {
			this.emptyBody(true, this.page.$autoFetch);
		}
	},
	drawBox: function() {
		this.arrayLevel = "array";
		this.isRecordDataset = true; //!important for sendBag
		this._isAddDisabled = false;
		this.records = [];
		this.recordsMap = {};

		this.$fields = this.$prototype.$item.$properties || {};
		this.$recordFacet = this.articleParent.$item.$recordFacet || this.$facet || "$details";

		if (this.$field.$builderClass) {
			this.builder = new this.$field.$builderClass();
			this.builder.initialize(this);
			delete this.$field.$builderClass;
		}

		this.initializeList(this);

		this.builder.endInitiallize();

		this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
		if (this.$isEditMode) {
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
			this.inputId = this.id + "-input";
		}
		Field.prototype._initCss.call(this);

		this.domItem = document.createElement("div");
		this.domItem.className = this._$cssField;
		this.domItem.syraItem = this.id;
		this.appendTitle();

		this._dataValue = document.createElement("article");
		this._dataValue.className = this._$cssField + "-value";
		this._core = this._dataValue;
		this.domItem.appendChild(this._dataValue);

		this.setTitle(this.$item.$title || this.$field.$title);
		this.setDescription(this.$item.$description || this.$field.$description);
		this.setState(this.$field);

		this.setAdvancedState();
		this._dataValue.className = this.$item.$skin ? (this.$item.$skin + "-list s-list") : "s-list";


		this._core = document.createElement("div");
		this._core.className = "s-list-core";
		this.topbar = document.createElement("div");
		this.topbar.className = "s-list-topbar";
		if (!this.menusSlot) {
			this.menusSlot = document.createElement("div");
			this.menusSlot.className = "s-list-menus-slot";
			this.topbar.appendChild(this.menusSlot);
		}
		if (this.$addMaximize) {
			this.maximizePicker = syra_menus.addIconButton(syra_local.box_maximize, this.$mnPickersCss, "onMaximizeClick", null, "maximize");
			this.topbar.appendChild(this.maximizePicker);
		}
		if (this.$addRefresh) {
			this.refreshPicker = syra_menus.addIconButton(syra_local.box_refresh, this.$mnPickersCss, "onRefreshClick", null, "refresh");
			this.topbar.appendChild(this.refreshPicker);
		}

		this._dataValue.appendChild(this.topbar);
		this._dataValue.appendChild(this._core);

		this.setArticleId(this._core);

		this.builder.list_onAfterDraw();
	},
	onMaximizeClick: function() {
		syra_site.siteFunctions.maximizeItem(this);
	},
	onRefreshClick: function() {
		this.filler.trigger(this);
	},
	designArticle: function(open) {
		_listDesigner.design(this, open);
	},
	toggleUIDesign: function(enable, disposingDesigner) {
		_listDesigner.toggleUIDesign(this, enable, disposingDesigner);
	},
	onDesignOpenerClick: function() {
		this.designArticle(!this.designer);
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		this.ensureDataSet();
		if (metaData) {
			this.applyMetaData(metaData);
		}
		if (dataRecordSet !== undefined) {
			var isDelta = this.page.$isPartialDelta;
			if (!isDelta) {
				isDelta = this.page.$isEditMode && (this.dataset && this.dataset.length > 0) && !this.isSingList;
			}
			this.fillList(dataRecordSet, parentDataRecord, isDelta);
		} else {
			metaData && _filler.validateDisplay(this);
		}
		this.builder.list_onAfterSetDataBind && this.builder.list_onAfterSetDataBind(dataRecordSet, parentDataRecord, metaData);
	},
	validate: function() {
		var isValidated = true;
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			isValidated = this.records[ii].validateFields();
		}
		return isValidated;
	},
	ensureArticleVisibility: function() {
		if (this.childrenSection) {
			for (var mm = 0, kk = this.childrenSection.length; mm < kk; mm++) {
				this.childrenSection[mm].ensureVisibility();
			}
		}
		var filterRecord = this.builder.filterRecord;
		if (filterRecord) {
			if (filterRecord.childrenSection) {
				for (var mm = 0, kk = filterRecord.childrenSection.length; mm < kk; mm++) {
					filterRecord.childrenSection[mm].ensureVisibility();
				}
			}
		}
		if (this.records) {
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				this.records[ii].ensureArticleVisibility();
			}
		}
	},
	isReorderRecordDraggable: function(target, event) {
		if (target.syraReorderRecordId == this.id) {
			syra_dd.dropableItem = {
				list: this,
				reorderRecord: _filler.findRecord(this, event.target)
			};
			syra_dd.start(this, this.RecordReorderDDAgentClass || RecordReorderDDAgent, this.body);
			event.syraRetValue = false;
			return;
		}
		return null;
	},
	getDefaultTitle: function() {
		return syra_local.flDefaultTitle;
	},
	applyMetaData: function(metaData) {
		if (this.$field.$isFusionNavigationList) {
			return false;
		}
		if (metaData.$item) {
			metaData.$items = metaData.$item;
		}
		Field.prototype.applyMetaData.call(this, metaData);
		_metaHelper.applyMetaData(this, metaData);
	},
	onAddMenuItem: function($bind, $menu) {
		var item = this.page.loadNewItem(null, {
			$bind: $bind,
			$category: "link",
			$skin: this.$itemMenuSkin,
			$menu: $menu,
			$icon: {
				$mode: this.$itemMenuIconMode || "iconText",
				$path: this.$iconPath
			}
		}, this);
		this.menusSlot.insertBefore(item.domItem, this.menusSlot.firstChild);
		item.layoutSlot = this.menusSlot;
		delete item.$item.$menu;
		return item;
	},
	onAddMenuPicker: function(picker) {
		this.menusSlot.appendChild(picker);
		if (this.articleParent && this.articleParent.onAddButton) {
			this.articleParent.onAddButton(picker);
		}
	},
	onMenuClick: function(menuItem) {
		if (!menuItem.$isAction) {
			if (menuItem.$isQueryFilter) {
				_filler.trigger(this, {
					$filters: menuItem.$sourceBind
				});
				return false;
			}
			switch (menuItem.$sourceBind) {
				case "$toggleGraph":
					this.graphDecorator && this.graphDecorator.switchView();
					return false;
				case "$cancelSort":
					this.capabilityMaker.sorter.cancel(this);
					return false;
				case "$first":
				case "$previous":
				case "$next":
				case "$last":
					_filler.trigger(this, null, {
						$url: syra_site.urlMaker.formatMenuUrl(menuItem.articleParent, menuItem)
					});
					return false;
				case "$select":
					_filler.doSelectAction(this, menuItem);
					return false;
				case "$design":
					this.designArticle(true);
					return false;
			}
		}
		return true;
	},

	scrollToField: function() {
		Field.prototype.scrollToField.call(this);
	},
	getDatasetValue: function() {
		return Field.prototype.getDatasetValue.call(this);
	},
	setDatasetValue: function(value) {
		return Field.prototype.setDatasetValue.call(this, value);
	},
	ensureLayoutMode: function() {
		Field.prototype.ensureLayoutMode.call(this);
	},
	ensureEditMode: function() {
		Field.prototype.ensureEditMode.call(this);
	},
	setAdvancedState: function($isAdvanced, designing) {
		Field.prototype.setAdvancedState.call(this, $isAdvanced, designing);
	},
	setDescription: function($description) {
		Field.prototype.setDescription.call(this, $description);
	},
	appendTitle: function() {
		if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
			Field.prototype.appendTitle.call(this);
			this.domTitle.style.display = "none";
		}
	},
	hideTitle: function($isTitleHidden) {
		Field.prototype.hideTitle.call(this, $isTitleHidden);
	},
	getTitle: function() {
		return Field.prototype.getTitle.call(this);
	},
	setTitle: function($title) {
		Field.prototype.setTitle.call(this, $title);
		if (this.domTitle) {
			this.domTitle.style.display = this.getTitle().length == 0 ? "none" : "";
		}
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
	},
	showItem: function(show) {
		Field.prototype.showItem.call(this, show);
	},
	applyDesignMetaData: function(metaData, designing) {
		Field.prototype.applyDesignMetaData.call(this, metaData, designing);
		this.builder.list_onAfterApplyDesignMetaData && this.builder.list_onAfterApplyDesignMetaData(metaData, designing);
	},
	findRecordByServerIndex: function($serverIndex) {
		return _filler.findRecordByServerIndex(this, $serverIndex);
	},
	findRecord: function(target) {
		return _filler.findRecord(this, target);
	},
	findDataRecord: function($uuid) {
		return _filler.findDataRecord(this, $uuid);
	},
	notifyClientSave: function(savedDelta) {
		_filler.notifyClientSave(this, savedDelta);
	},
	onFieldInputEvent: function(event, shortcuts) {
		this.selector && this.selector.onFieldInputEvent(this, event);
	},
	onItemInOut: function(onEnter, event, target) {
		this.builder.list_onItemInOut(onEnter, event, target);
	},
	isDraggable: function(target, event) {
		return this.builder.isDraggable(target, event);
	},
	applyShortCut: function(shortcuts, event) {
		return _shortcutInvoker.applyShortCut(this, shortcuts, event);
	},

	ensureDataSet: function() {
		return this.dataset = this.setDatasetValue(this.getDatasetValue() || []);
	},
	appendDetailLink: function(value, $detailsLink) {},
	getField: function(name, $serverIndex, select) {
		return _filler.getField(this, name, $serverIndex, select);
	},
	getDataValue: function(name, $serverIndex) {
		return _filler.getDataValue(this, name, $serverIndex);
	},
	setFocus: function(select, name, $serverIndex) {
		return _filler.setFocus(this, select, name, $serverIndex);
	},
	dispose: function() {
		this.designer && this.designer.dispose();
		if (this.articleParent.childLists) {
			var found = this.articleParent.childLists.indexOf(this);
			if (found >= 0) {
				this.articleParent.childLists.splice(found, 1);
			}
		}
		this.capabilityMaker && this.capabilityMaker.dispose(this);
		if (this.builder) {
			this.builder.emptyDataItem = null;
			this.builder.dispose && this.builder.dispose(this);
		}
		Article.prototype.dispose.call(this);
	}
});