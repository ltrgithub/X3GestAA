"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopList = require("syracuse-ui/lib/field/array/list").DesktopList;
var FieldsGarbage = require('syracuse-ui/lib/article/fieldsGarbage').FieldsGarbage;
var SlotResizerDDAgent = require("./tools/slotResizerDDAgent").SlotResizerDDAgent;
var SelectorCardRecord = require("./selector/selectorCardRecord").SelectorCardRecord;


var SortCapability = require("./capability/sortCapability").SortCapability;
var SearchCapability = require("./capability/searchCapability").SearchCapability;

var TreeDecorator = require("./treeDecorator").TreeDecorator;
var GraphDecorator = require("./graphDecorator").GraphDecorator;

var _recordSelectors = {
    multi: require('./selector/multiRecordSelector').MultiRecordSelector,
    single: require('./selector/singleRecordSelector').SingleRecordSelector,
    button: require('./selector/buttonRecordSelector').ButtonRecordSelector,
    row: require('./selector/rowRecordSelector').RowRecordSelector
};


function MultiList(){
}

exports.MultiList = helpers.defineClass(MultiList, DesktopList, {
    initializeList: function(){
        this.sortCapability = new SortCapability(this);
        this.searchCapability = new SearchCapability(this);
        
        
        // check Filter Capability
        var isFilterCapability;
        var $binds = Object.keys(this.$fields);
        for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
            var $field = this.$fields[$binds[ii]];
            if (!$field.$isExcluded && $field.$capabilities && ($field.$capabilities.indexOf("filter") >= 0)) {
                isFilterCapability = true;
                break;
            }
        }
        if ((!isFilterCapability && this.$item.$isQuickFilter) || (isFilterCapability && this.$item.$isQuickFilter === undefined)) {
            this.$item.$isQuickFilter = isFilterCapability;
        }
        
        if (this.$item.$alternateStyle === undefined) {
            this.$item.$alternateStyle = true;
        }
        
        this.applyFacetSetting();
        
        if (this.$prototype.$treeview) {
            (this.treeDecorator = new TreeDecorator()).load(this);
        }
        this.ensureEditMode();
        
        this.applyPageSortWhereCapabilities(this.$prototype);
        
        if (this.$prototype.$cube) {
            if (this.$item.$graphMode != undefined) {
                if (this.$item.$graphMode = "list") {
                    this.$item.$graphPosition = this.$item.$graphPosition || "behind";
                }
                else {
                    this.$item.$graphPosition = this.$item.$graphPosition || "front";
                }
                delete this.$item.$graphMode;
            }
            if (this.$item.$graphPosition == "tab") {
                this.$item.$graphPosition = "front";
            }
        }
    },
    loadSelector: function(){
        if (this.selector && this.selector.dispose) {
            this.selector.dispose();
        }
        var selectorClass = _recordSelectors[this.$item.$selectMode];
        if (selectorClass) {
            (this.selector = new selectorClass()).load(this);
        }
        else {
            this.selector = {};
        }
    },
    applyPageSortWhereCapabilities: function(newData){
        this.pagging.applyMetadata(newData);
        this.sortCapability.setOrderBy(newData.$orderBy, newData.$startLetter);
        if (newData.$where !== undefined) {
            this.$where = newData.$where;
        }
    },
    applyFacetSetting: function(){
        switch (this.articleParent.$facet) {
            case "$query":
                if (this.page.$prototype.$filters) {
                    if (this.page.menuBar) {
                        this.serverFilters = {
                            menus: this.page.loadNewItem(this.page.menuBar.barBody, {
                                $category: "menus",
                                $isMenuFilters: true,
                                $skin: "s-mn-bar-filters",
                                $title: this.localize.flFilters
                            }, this)
                        };
                        this.serverFilters.menus._ensurePrivateMenus({
                            $filters: {
                                $noFilters: {
                                    $title: this.localize.flNoFilter
                                }
                            }
                        }, "$filters");
                        this.serverFilters.noFilters = this.menuItems[this.serverFilters.menus.id + "-$noFilters"][0];
                        this.serverFilters.noFilters.setStyle("nofilter");
                        this.serverFilters.menus._ensurePrivateMenus(this.page.$prototype, "$filters");
                        if (this.$urlParams && this.$urlParams.filter) {
                            this.selectServerFilter(this.$urlParams.filter);
                        }
                        else {
                            var filtersIds = Object.keys(this.page.$prototype.$filters);
                            var hasDefault;
                            for (var ii = 0, jj = filtersIds.length; ii < jj; ii++) {
                                if (this.page.$prototype.$filters[filtersIds[ii]].$isDefault) {
                                    this.selectServerFilter(filtersIds[ii]);
                                    hasDefault = true;
                                    break;
                                }
                            }
                            if (!hasDefault) {
                                this.selectServerFilter("$noFilters");
                            }
                        }
                        this.page.menuBar.toggleBar(true);
                    }
                }
                break;
            case "$bulk":
            case "$search":
                break;
            case "$lookup":
                this.$item.$selectMode = "row";
                this.$isDockedHeight = true;
                this.page.lookupField = this;
                break;
            case "$select":
                this.$item.$selectMode = "multi";
                this.$isDockedHeight = true;
                this.page.lookupField = this;
                break;
            default:
                DesktopList.prototype.applyFacetSetting.call(this);
                break;
        }
    },
    selectServerFilter: function(filterId){
        if (this.serverFilters) {
            if (this.serverFilters.selected) {
                document.site.toggleClass(this.serverFilters.selected.mn, "s-selected", false);
                delete this.serverFilters.selected;
            }
            this.serverFilters.selected = this.menuItems[this.serverFilters.menus.id + "-" + ((filterId === null || filterId === "null") ? "$noFilters" : filterId)][0];
            document.site.toggleClass(this.serverFilters.selected.mn, "s-selected", true);
        }
    },
    defineDefaultCard: function(){
        var $items = [];
        var $binds = Object.keys(this.$fields);
        for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
            if (!this.$fields[$binds[ii]].$isExcluded) {
                $items.push({
                    $bind: $binds[ii]
                });
            }
        }
        return {
            $layout: {
                $items: [{
                    $category: "section",
                    $layout: {
                        $items: $items
                    }
                }]
            }
        };
    },
    _endDrawBox: function(){
        if (this.$item.$selectorCard) {
            this.selectorCardRecord = new SelectorCardRecord();
            this.selectorCardRecord.initialize(this);
        }
        else {
            this.layoutSlot.appendChild(this.domItem);
        }
        
        this.ensureLayoutMode();
        if (this.selectorCardRecord) {
            this.selectorCardRecord.loadBox();
        }
        if (this.$isQuickDesignerEnabled !== false) {
            this.applyActionLinkChange({
                $links: {
                    $design: {
                        $title: this.localize.flAuthoring
                    }
                }
            });
        }
        if (!this.discardFieldsGarbage) {
            (this.garbage = new FieldsGarbage()).load(this);
        }
    },
    ensureGrapDecorator: function(){
        if (this.$prototype.$cube || this.$prototype.$decorator) {
            if (!this.graphDecorator) {
                (this.graphDecorator = new GraphDecorator()).list = this;
            }
            this.$item.$graphPosition = this.$item.$graphPosition || "bottom";
        }
    },
    appendCardGraphSlots: function(){
        var $cardItem = this.$item.$format != "cards" && this.$item.$cardItem;
        if (!$cardItem && this.cardDecorator) {
            this.cardDecorator.removeOutCardSlot();
        }
        if (!this.$item.$graphPosition && this.graphDecorator) {
            this.graphDecorator.removeSlot();
        }
        if (!$cardItem && !this.$item.$graphPosition) {
            if (this.tableRow) {
                document.site.moveChildNodes(this.tableRow, this._core);
                this._core.removeChild(this.tableRow);
                delete this.tableRow;
            }
        }
        if ($cardItem || this.$item.$graphPosition) {
            var hasRow = $cardItem && ($cardItem.$position == "left" || $cardItem.$position == "right");
            if (!hasRow) {
                hasRow = this.$item.$graphPosition && (this.$item.$graphPosition == "left" || this.$item.$graphPosition == "right");
            }
            if (hasRow) {
                if (!this.tableRow) {
                    this.tableRow = document.createElement("div");
                    this.tableRow.className = "s-grid-table-row";
                    document.site.moveChildNodes(this._core, this.tableRow);
                    this._core.appendChild(this.tableRow);
                }
            }
            else {
                if (this.tableRow) {
                    document.site.moveChildNodes(this.tableRow, this._core);
                    this._core.removeChild(this.tableRow);
                    delete this.tableRow;
                }
            }
            if ($cardItem) {
                this.cardDecorator.appendOutCardSlot();
            }
            if (this.$item.$graphPosition && this.graphDecorator) {
                this.graphDecorator.appendSlot();
            }
        }
        if (this.tableRow) {
            this.tableSlot.className = "s-grid-slot-cell";
        }
        else {
            this.tableSlot.style.width = "";
            this.tableSlot.className = "s-grid-slot";
        }
    },
    applyDesignMetaData: function(metaData, designing){
        if (designing) {
            if (metaData.$isRowIndexVisible !== undefined) {
                this.$item.$isRowIndexVisible = metaData.$isRowIndexVisible;
                this.showRowIndexCol();
            }
        }
        DesktopList.prototype.applyDesignMetaData.call(this, metaData, designing);
    },
    reloadLayout: function($item){
        $item = $item || this.$item;
        var newField = this.layoutParent.loadChildItem(null, $item, this.layoutParent.items.indexOf(this));
        if (this.designer) {
            newField.designItem(true);
            newField.$designing = this.$designing;
            this.designer.historyTool.copyContext(newField.designer.historyTool);
        }
        this.articleParent.unbind(this);
        this.layoutParent.removeItem(this);
        return newField;
    },
    ensureBottomBar: function(){
        if (!this.bottombar) {
            this.bottombar = document.createElement("div");
            this.bottombar.className = "s-list-bottombar";
            this.setArticleId(this.bottombar);
            this.fieldValue.appendChild(this.bottombar);
        }
        return this.bottombar;
    },
    setDataBind: function(dataRecordSet, parentDataRecord, metaData){
        DesktopList.prototype.setDataBind.call(this, dataRecordSet, parentDataRecord, metaData);
        if (this.graphDecorator) {
            var graphRecords = [];
            for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
                graphRecords.push(this.records[ii].dataset);
            }
            this.graphDecorator.setDataBind(graphRecords, parentDataRecord, metaData);
            this.onWindowResize();
        }
        if (this.selectFirstByDefault && this.records.length && !this.selector.records.length) {
            this.selector.select(undefined, true);
        }
    },
    onMenuClick: function(menuItem){
        if (menuItem.$menuType == "$filters") {
            this.triggerFetch({
                $filters: menuItem.$sourceBind
            });
            return false;
        }
        if (!menuItem.$isAction) {
            switch (menuItem.$bind) {
                case "$toggleGraph":
                    if (this.graphDecorator) {
                        this.graphDecorator.switchView();
                    }
                    return false;
                case "$cancelSort":
                    this.sortCapability.cancelSort();
                    return false;
            }
        }
        return DesktopList.prototype.onMenuClick.call(this, menuItem);
    },
    onClickPicker: function(picker, event){
        switch (picker.getAttribute("data-s-picker")) {
            case "list-sort":
                this.sortCapability.onSortClick(event, picker.syraBind);
                break;
            case "list-search":
                this.searchCapability.onSearchClick(event, picker.syraBind);
                break;
            case "list-alphatab":
                this.sortCapability.onSortAlphaTab(picker);
                break;
            case "grid-rowcard":
                this.cardDecorator.onRowCardOpenerClick(picker);
                break;
            case "list-page":
                this.pagging.onPageClick(picker);
                break;
            case "list-tree-picker":
                event.stopPropagation();
                this.treeDecorator.onNodeEvent(event);
                break;
            case "list-selector":
                event.stopPropagation();
                this.selector.onSelectRecords(event);
                event.syraRetValue = true;
                break;
        }
        return DesktopList.prototype.onClickPicker.call(this, picker, event);
    },
    applyShortCuts: function(shortcuts, event, focusField){
        if (shortcuts.pagedown || shortcuts.pageup) {
            if (this.treeDecorator) {
                this.treeDecorator.expendCollapseAll(shortcuts.pagedown);
                return true;
            }
            else 
                if (this.pagging) {
                    this.pagging.onShortKeyEvent(shortcuts.pagedown, shortcuts.shift);
                    event.preventDefault();
                    return true;
                }
        }
        else 
            if (shortcuts.left || shortcuts.right) {
                if (this.treeDecorator) {
                    var record;
                    record = this.getFocusedRecord(true);
                    if (record) {
                        this.treeDecorator.expendCollapseNode(record.$uuid, shortcuts.right);
                        return true;
                    }
                }
                return false;
            }
            else 
                if (shortcuts.up || shortcuts.down) {
                    if (this.treeDecorator) {
                        var record, recordIndex, serverIndex, newSelect;
                        if (record = this.getFocusedRecord(true)) {
                            record.toggleFocus(false);
                            recordIndex = record.getRecordIndex();
                            recordIndex = this.treeDecorator.getPreviousNextServerIndexVisible(recordIndex, shortcuts.down);
                        }
                        else {
                            recordIndex = 0;
                        }
                        serverIndex = this.getClientDataSetServerIndex(recordIndex);
                        newSelect = this.findRecordByServerIndex(serverIndex);
                        if (newSelect) {
                            newSelect.toggleFocus(true);
                        }
                        return true;
                    }
                }
                else 
                    if (shortcuts.enter) {
                        if (focusField && focusField.$item.$bind === "$search" && this.searchCapability) {
                            this.searchCapability.onSearchClick(event, "$searchNext");
                            return true;
                        }
                    }
        return false;
    },
    getFocusedRecord: function(selected){
        var record;
        for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
            var dataRecord = this.dataset[ii];
            if (record = this.recordsMap[this.dataset[ii].$uuid]) {
                if (record.isFocused) 
                    return record;
            }
        }
        record = null;
        if (selected && this.selector.records) {
            if (this.selector.uuid != undefined) {
                record = this.selector.records[this.selector.uuid];
            }
            else {
                var keys = Object.keys(this.selector.records);
                if (keys.length > 0) {
                    record = this.selector.records[keys[0]];
                }
            }
        }
        return record;
    },
    notifySelectRecords: function(menuItem){
        if (this.currentSelectRecords) {
            var sendBag = this.page.ensureSendBag(this);
            var dataRecords = this.ensureDataSet();
            var $uuids = Object.keys(this.currentSelectRecords);
            var hasNewRecord;
            var $newRecords = [];
            for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
                if (!this.findDataRecord($uuids[ii])) {
                    $newRecords.push(this.currentSelectRecords[$uuids[ii]].dataset);
                    hasNewRecord = true;
                }
            }
            if (hasNewRecord) {
                if ($newRecords.length == 1) {
                    $newRecords[0].$index = this.dataset.length;
                    sendBag.dataRecords = $newRecords;
                }
                else {
                    sendBag.dataRecords = [];
                    for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
                        sendBag.dataRecords.push({
                            $uuid: this.dataset[ii].$uuid
                        });
                    }
                    sendBag.dataRecords = sendBag.dataRecords.concat($newRecords);
                }
            }
            
            if (hasNewRecord) {
                this.validateDisplay();
                this.page.notifyDataChange(this, sendBag.dataRecords);
            }
        }
    },
    notifyActionChange: function(menuItem, target, value, notifyServer){
        var sendBag = this.page.ensureSendBag(this);
        var dataRecords = this.ensureDataSet();
        this.ensureClientDataset();
        var record = target.isRecordArticle ? target : null;
        if (value.$create) {
            var options = {
                isCreate: true
            };
            if (record) {
                options.$serverIndex = record.$serverIndex;
                options.$recordIndex = record.getRecordIndex();
            }
            else {
                if (this.records.length > 0) {
                    options.$serverIndex = this.dataset[this.dataset.length - 1].$serverIndex + 1;
                }
                else {
                    options.$serverIndex = 0;
                }
            }
            var newValue = {
                $uuid: helpers.uuid.generate()
            };
            if (menuItem.$item.$variantItemKey) {
                options.dataRecord = {};
                options.dataRecord[menuItem.$item.$variantItemKey] = newValue;
            }
            else {
                options.dataRecord = newValue;
            }
            if (record) {
                var found = this.findDataRecord(record.$uuid);
                dataRecords.splice(found.dataRecordIndex, 0, options.dataRecord);
            }
            else {
                dataRecords.splice(options.$serverIndex, 0, options.dataRecord);
            }
            if (this.pagging.$startIndex !== undefined && this.clientDataset.length < this.pagging.$startIndex) {
                this.pagging.ensureClientRange();
            }
            if ((this.pagging.$startIndex + (this.pagging.$itemsPerPage - 1)) > options.$serverIndex) {
                var newRecord = this._appendRecord(options);
            }
            //sendbag begin
            var saved = {
                $uuid: newValue.$uuid
            };
            if (sendBag.dataRecords.length > 0) {
                sendBag._ensureFullDataSet(this);
                if (!sendBag._findDataRecord(saved.$uuid)) {
                    sendBag.dataRecords.splice(options.$serverIndex, 0, saved);
                }
            }
            else {
                saved.$index = options.$serverIndex;
                sendBag.dataRecords.push(saved);
            }
            //sendbag end
            if (this.isClientFetch) {
                options.dataRecord.$serverIndex = options.$serverIndex;
                if (this.clientDataset != this.dataset) {
                    this.clientDataset.push(options.dataRecord);
                }
                if (this.clientFetchOptions) {
                    this.applyFetchOptions(this.clientFetchOptions);
                }
                this.pagging.setPage(options.$serverIndex);
            }
            else {
                this.validateDisplay();
            }
            this.page.notifyDataChange(this, sendBag.dataRecords);
            
        }
        else {
            if (record) {
                var clientDataRecordIndex = this.getClientDataSetIndex(record.$serverIndex);
                this.records.splice(record.getRecordIndex(), 1);
                var found = this.findDataRecord(record.$uuid);
                if (found) {
                    dataRecords.splice(found.dataRecordIndex, 1);
                    record.$index = found.dataRecordIndex;
                }
                var found = sendBag.ensureRecord(record);
                if (sendBag.dataRecords.length == 1) {
                    found.dataRecord.$index = record.$serverIndex;
                    found.dataRecord.$isDeleted = true;
                }
                else {
                    sendBag.dataRecords.splice(found.dataRecordIndex, 1);
                }
                delete record.$index;
                if (clientDataRecordIndex >= 0) {
                    this.clientDataset.splice(clientDataRecordIndex, 1);
                }
                delete this.recordsMap[record.$uuid];
                this.removeRecord(record, true);
            }
            else {
                this.clientDataset.splice(0, dataRecords.length);
                dataRecords.splice(0, dataRecords.length);
                sendBag.dataRecords = [];
                this.removeRecords();
            }
            if (this.records.length == 0) {
                this.emptyBody(true);
            }
            else {
                if (clientDataRecordIndex >= 0 && this.isClientFetch && this.clientDataset.length) {
                    this.pagging.setPage(this.clientDataset[clientDataRecordIndex].$serverIndex);
                }
                else {
                    this.validateDisplay();
                }
            }
            this.page.notifyDataChange(this, sendBag.dataRecords);
        }
    },
    getClientDataSetIndex: function($serverIndex){
        this.ensureClientDataset();
        for (var ii = 0, jj = this.clientDataset.length; ii < jj; ii++) {
            if (this.clientDataset[ii].$serverIndex == $serverIndex) {
                return ii;
            }
        }
        return -1;
    },
    fillList: function(dataRecordSet, parentDataRecord, isDelta){
        this.applyPageSortWhereCapabilities(parentDataRecord);
        
        DesktopList.prototype.fillList.call(this, dataRecordSet, parentDataRecord, isDelta);
        
        if (this.cardDecorator && this.cardDecorator.isOutCardMode) {
            this.selector.select(); //ensure selection
        }
        if (this.treeDecorator) {
            this.treeDecorator.onEndFillList();
        }
        this.pagging.draw();
        this.sortCapability.renderOrderBy();
        this.body.style.display = "";
        this.onWindowResize();
    },
    setFocus: function(select, name, $serverIndex){
        var field;
        if (this.treeDecorator) {
            return true;
        }
        if (this.popupCardBuilder && this.popupCardBuilder.isPopupCardOpened()) {
            this.selectRecords($serverIndex);
        }
        if (this.$capability.search) {
            this.searchCapability.searchStart(this.dataset[$serverIndex].$uuid, name, $serverIndex);
        }
        if ((field = this.getField(name, $serverIndex))) {
            return field.focus(select);
        }
        else {
            if (this.isClientFetch && !this.findRecordByServerIndex($serverIndex)) {
                this.pagging.setPage($serverIndex);
                if ((field = this.getField(name, $serverIndex))) {
                    return field.focus(select);
                }
            }
        }
        return null;
    },
    selectRecords: function(start, end){
        var record;
        if (start === undefined) {
            start = -1;
        }
        if (end === undefined) {
            end = start;
        }
        for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
            if (record = this.recordsMap[this.dataset[ii].$uuid]) {
                var isSelected = record.$serverIndex >= start && record.$serverIndex <= end;
                if (isSelected != this.dataset[ii].$isSelected) {
                    record.select(false);
                }
            }
            else {
                this.dataset[ii].$isSelected = this.dataset[ii].$serverIndex >= start && this.dataset[ii].$serverIndex <= end;
            }
        }
    },
    getField: function(name, $serverIndex, select){
        var fields, record = this.findRecordByServerIndex($serverIndex);
        if (record && !record.disposed) {
            if ((fields = record.boundFields[name]) && fields.length > 0) {
                return (this.popupCardBuilder ? this.popupCardBuilder.findPopupField(name, record) : null) || fields[0];
            }
        }
        return null;
    },
    getSelectedRecordIndexes: function(){
        var result = [], ir = -1;
        for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
            var dataRecord = this.dataset[ii];
            if (dataRecord.$isSelected) {
                if (!result[ir] || result[ir].start + result[ir].count != dataRecord.$serverIndex) {
                    result.push({
                        start: dataRecord.$serverIndex,
                        count: 1
                    });
                    ir++;
                }
                else {
                    result[ir].count++;
                }
            }
        }
        return result;
    },
    addSlotResizer: function(target, event){
        var resizeCard = target.syraOutCardResizer == this.id;
        var resizeGraph = target.syraGraphResizer == this.id;
        if (resizeCard || resizeGraph) {
            document.site.ddManager.dropableItem = {
                list: this,
                resizeCard: resizeCard,
                resizeGraph: resizeGraph
            };
            document.site.ddManager.start(this, SlotResizerDDAgent, this._core);
            event.syraRetValue = false;
            return true;
        }
    },
    onNotifyDataChange: function(field, value){
        if (field.$item.$bind == "$itemsPerPage") {
            this.pagging.getItemsPerPage(value);
            if (this.designer || this.page.designer) {
                this.notifyDesignerUpdate();
            }
            this.triggerFetch();
        }
        return false;
    },
    dispose: function(){
        if (this.treeDecorator) {
            this.treeDecorator.dispose();
        }
        if (this.graphDecorator) {
            this.graphDecorator.dispose();
        }
        if (this.sortCapability) {
            this.sortCapability.dispose();
        }
        if (this.pagging) {
            this.pagging.dispose();
        }
        if (this.selectorCardRecord) {
            this.selectorCardRecord.dispose();
        }
        if (this.selector && this.selector.dispose) {
            this.selector.dispose();
        }
        if (this.garbage) {
            this.garbage.dispose();
        }
        this.garbage = this.selector = this.pagging = this.sortCapability = this.treeDecorator = this.graphDecorator = this.selectorCardRecord = null;
        DesktopList.prototype.dispose.call(this);
    }
});
