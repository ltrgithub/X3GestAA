"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopList = require("syracuse-ui/lib/field/array/list").DesktopList;
var FieldsGarbage = require('syracuse-ui/lib/article/fieldsGarbage').FieldsGarbage;
var SlotResizerDDAgent = require("./tools/slotResizerDDAgent").SlotResizerDDAgent;
var SelectorCardRecord = require("./selector/selectorCardRecord").SelectorCardRecord;
var ListDesigner = require("syracuse-ui/lib/field/array/designer/listDesigner").ListDesigner;

var TreeDecorator = require("./tools/treeDecorator").TreeDecorator;
var GraphDecorator = require("./graphDecorator").GraphDecorator;
var preferencesHelper = require("./tools/preferencesHelper");

var _recordSelectors = {
	multi: require('./selector/multiRecordSelector').MultiRecordSelector,
	single: require('./selector/singleRecordSelector').SingleRecordSelector,
	button: require('./selector/buttonRecordSelector').ButtonRecordSelector,
	row: require('./selector/rowRecordSelector').RowRecordSelector
};


function MultiList() {}

exports.MultiList = helpers.defineClass(MultiList, DesktopList, {
	designArticle: function(open) {
		if (open) {
			if (this.graphDecorator) {
				this.graphDecorator.ensureGraph(true);
			}
			this.ensureGrapDecorator();
			this.designer = new ListDesigner();
			this.designer.openDesigner(this);
		} else {
			if (this.designer) {
				this.designer.dispose();
			}
			this.designer = this.$designing = null;
		}
		this._ensureDesignMenuSlotVisibility();
		if (this.page.isVignettePage && this.articleParent == this.page) {
			this.page.vignetteField.onDesignVignette(open);
		}
	},
	saveListDesign: function(resize, $userPreferences) {
		if ($userPreferences) {
			this.page.userPreferences && this.page.userPreferences.saveForField(this.$item.$bind, $userPreferences);
		}
		if (this.designer) {
			this.designer.endArticleUpdate();
		} else {
			resize && this.resizeArticle();
			this.page.savePageDesign( !! $userPreferences);
		}
	},
	initializeList: function() {
		// Auto insert fields in authored list
		if (!this.discardFieldsGarbage) {
			this.page.insertNewItems.call(this, true, "field");
		}
		// check Filter Capability
		var isFilterCapability;
		var $binds = Object.keys(this.$fields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $field = this.$fields[$binds[ii]];
			if (!$field.$isExcluded && $field.$capabilities && ($field.$capabilities.indexOf("filter") >= 0)) {
				isFilterCapability = true;
				break;
			}
		}
		if ((!isFilterCapability && this.$item.$isQuickFilter) || (isFilterCapability && this.$item.$isQuickFilter === undefined)) {
			this.$item.$isQuickFilter = isFilterCapability;
		}

		if (this.$item.$alternateStyle === undefined) {
			this.$item.$alternateStyle = true;
		}
		this.applyFacetSetting();

		if (this.$prototype.$treeview) {
			(this.treeDecorator = new TreeDecorator()).load(this);
		}
		if (this.hasGraph()) {
			if (this.$item.$graphMode != undefined) {
				if (this.$item.$graphMode == "list") {
					this.$item.$graphPosition = this.$item.$graphPosition || "behind";
				} else {
					this.$item.$graphPosition = this.$item.$graphPosition || "front";
				}
				delete this.$item.$graphMode;
			}
			if (this.$item.$graphPosition == "tab") {
				this.$item.$graphPosition = "front";
			}
			if (this.hasGraphDesigner()) {
				if (!this.page.isVignettePage) {
					this.$isQuickDesignerDisabled = !! this.$item.$isQuickDesignerDisabled;
				}
			}
		}
		if (this.$isQuickDesignerDisabled === undefined) {
			this.$isQuickDesignerDisabled = true;
		}

		this.ensureEditMode();

		if (this.page.$autoFetch) {
			var params = this.page.openerUrlSegments && this.page.openerUrlSegments.params;
			if (params) {
				if (params.where) {
					this.$prototype.$where = params.where;
				}
				this.$prototype.$filter = params.filter;
			}
		}
		this.applyPageSortWhereCapabilities(this.$prototype);

	},
	resizeArticle: function(resize) {
		var mustBeResized = resize || this.mustBeResized;
		if (mustBeResized && this.articleParent.isChildItemDisplay(this)) {
			DesktopList.prototype.resizeArticle.call(this, resize);
			if (this.selectorCardRecord) {
				this.selectorCardRecord.resizezCard();
			}
			if (this.graphDecorator) {
				this.graphDecorator.onListResize();
			}
		}
	},
	loadSelector: function() {
		if (this.selector && this.selector.dispose) {
			this.selector.dispose();
		}
		var selectorClass = _recordSelectors[this.$item.$selectMode];
		if (selectorClass) {
			(this.selector = new selectorClass()).load(this);
		} else {
			this.selector = {};
		}
	},
	applyPageSortWhereCapabilities: function(newData) {
		this.pagging.applyMetadata(newData);
		this.capabilityMaker.sorter.setOrderBy(this, newData.$orderBy);
		if (newData.$where !== undefined) {
			this.$where = newData.$where;
		}
	},
	applyFacetSetting: function() {
		switch (this.articleParent.$facet) {
			case "$query":
				this.fetcher.showQueryFilters(this);
				break;
			case "$bulk":
			case "$search":
				break;
			case "$lookup":
				this.$item.$selectMode = "row";
				this.$isDockedHeight = true;
				this.page.lookupField = this;
				this.pagging.pagerTopOnly = true;
				break;
			case "$select":
				this.$item.$selectMode = "multi";
				this.$isDockedHeight = true;
				this.page.lookupField = this;
				this.pagging.pagerTopOnly = true;
				break;
			default:
				DesktopList.prototype.applyFacetSetting.call(this);
				break;
		}
		if (this.$item.$itemsPerPage && !this.isClientFetch) { // && this.page.$autoFetch !== false) {
			this.page.defaultItemsPerPage = this.$item.$itemsPerPage;
		}
	},

	defineDefaultCard: function() {
		var $items = [];
		var $binds = Object.keys(this.$fields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			if (!this.$fields[$binds[ii]].$isExcluded) {
				$items.push({
					$bind: $binds[ii]
				});
			}
		}
		return {
			$layout: {
				$items: [{
					$category: "section",
					$layout: {
						$items: $items
					}
				}]
			}
		};
	},

	_endDrawBox: function() {
		if (this.$item.$selectorCard) {
			this.selectorCardRecord = new SelectorCardRecord();
			this.selectorCardRecord.initialize(this);
		} else {
			this.layoutSlot.appendChild(this.domItem);
		}

		this.ensureLayoutMode();
		if (this.selectorCardRecord) {
			this.selectorCardRecord.loadBox();
		}
		if (!this.$isQuickDesignerDisabled) {
			syra_menus.setMenus(this, {
				$links: {
					$design: {
						$title: this.hasGraphDesigner() ? syra_local.flDesignGraph : syra_local.flDesign
					}
				}
			});
		}
		if (!this.discardFieldsGarbage) {
			(this.garbage = new FieldsGarbage()).load(this);
		}
	},
	hasGraph: function() {
		return !!(this.$prototype.$cube || this.$prototype.$decorator);
	},
	hasGraphDesigner: function() {
		return !!this.$prototype.$cube;
	},
	ensureGrapDecorator: function() {
		if (this.hasGraph()) {
			if (!this.graphDecorator) {
				(this.graphDecorator = new GraphDecorator()).list = this;
			}
			this.$item.$graphPosition = this.$item.$graphPosition || "bottom";
		}
	},
	appendCardGraphSlots: function() {
		var $cardItem = this.$item.$format != "cards" && this.$item.$cardItem;
		if (!$cardItem && this.cardDecorator) {
			this.cardDecorator.removeOutCardSlot();
		}
		if (!this.$item.$graphPosition && this.graphDecorator) {
			this.graphDecorator.removeSlot();
		}
		if (!$cardItem && !this.$item.$graphPosition) {
			if (this.tableRow) {
				syra_site.dom.moveChildNodes(this.tableRow, this._core);
				this._core.removeChild(this.tableRow);
				delete this.tableRow;
			}
		}
		if ($cardItem || this.$item.$graphPosition) {
			var hasRow = $cardItem && ($cardItem.$position == "left" || $cardItem.$position == "right");
			if (!hasRow) {
				hasRow = this.$item.$graphPosition && (this.$item.$graphPosition == "left" || this.$item.$graphPosition == "right");
			}
			if (hasRow) {
				if (!this.tableRow) {
					this.tableRow = document.createElement("div");
					this.tableRow.className = "s-grid-table-row";
					syra_site.dom.moveChildNodes(this._core, this.tableRow);
					this._core.appendChild(this.tableRow);
				}
			} else {
				if (this.tableRow) {
					syra_site.dom.moveChildNodes(this.tableRow, this._core);
					this._core.removeChild(this.tableRow);
					delete this.tableRow;
				}
			}
			if ($cardItem) {
				this.cardDecorator.appendOutCardSlot();
			}
			if (this.$item.$graphPosition && this.graphDecorator) {
				this.graphDecorator.appendSlot();
			}
		}
		if (this.tableRow) {
			this.tableSlot.className = "s-grid-slot-cell";
		} else {
			this.tableSlot.style.width = "";
			this.tableSlot.className = "s-grid-slot";
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		if (designing) {
			if (metaData.$isRowIndexVisible !== undefined) {
				this.$item.$isRowIndexVisible = metaData.$isRowIndexVisible;
				this.showRowIndexCol && this.showRowIndexCol();
			}
		}
		DesktopList.prototype.applyDesignMetaData.call(this, metaData, designing);
	},
	reloadLayout: function($item) {
		$item = $item || this.$item;
		var newField = this.layoutParent.loadChildItem(null, $item, this.layoutParent.items.indexOf(this));
		var isDesigner = this.designer;
		newField.$designing = this.$designing;
		this.articleParent.unbind(this);
		this.layoutParent.removeItem(this, true);
		if (newField.page.designer && newField.page.designer.uiSwitchTool) {
			newField.page.designer.uiSwitchTool.toggleUIDesign(newField, true);
		}
		if (isDesigner) {
			newField.designArticle(true);
		}
		return newField;
	},
	ensureBottomBar: function() {
		if (!this.bottombar) {
			this.bottombar = document.createElement("div");
			this.bottombar.className = "s-list-bottombar";
			this.setArticleId(this.bottombar);
			this.fieldValue.appendChild(this.bottombar);
		}
		return this.bottombar;
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		DesktopList.prototype.setDataBind.call(this, dataRecordSet, parentDataRecord, metaData);
		if (this.graphDecorator) {
			var graphRecords = [];
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				graphRecords.push(this.records[ii].dataset);
			}
			this.graphDecorator.setDataBind(graphRecords, parentDataRecord, metaData);
		}
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$isQueryFilter) {
			this.fetcher.onQueryFilterClick(this, menuItem);
			return false;
		}
		switch (menuItem.$sourceBind) {
			case "$toggleGraph":
				this.graphDecorator && this.graphDecorator.switchView();
				return false;
			case "$cancelSort":
				this.capabilityMaker.sorter.cancel(this);
				return false;
		}
		return DesktopList.prototype.onMenuClick.call(this, menuItem);
	},
	onReloading: function($item) {
		if (this.$item.$format !== undefined && $item.$format != this.$item.$format) {
			this.articleParent.removeItem(this, true, true);
			return null;
		}
		if ($item.$cardItem) {
			var metaData = {};
			if (this.$item.$cardItem.$position != $item.$cardItem.$position) {
				metaData.$cardPosition = $item.$cardItem.$position;
			}
		}
		this.applyDesignMetaData($item, true);
		if (this.designer) {
			this.designer.applyListDesignMetaData();
		}
		this.fillList(this.dataset, this.articleParent.dataset[this.$item.$bind]);
		return this;
	},
	onPagerClick: function(event, btn) {
		this.pagging.onPageClick(event, btn);
	},
	onSearchClick: function(event, btn) {
		this.searchCapability.onClick(this, btn.syraValue, event);
	},
	onSortClick: function(event, btn) {
		this.capabilityMaker.sorter.onSortClick(this, btn.syraValue, event);
	},
	onRowCardClick: function(event, btn) {
		this.cardDecorator.onRowCardOpenerClick(btn);
	},
	onSelectorClick: function(event, btn) {
		this.selector.onSelectRecords(event);
		event.syraRetValue = true;
	},

	getFocusedRecord: function(selected) {
		var record;
		for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
			var dataRecord = this.dataset[ii];
			if (record = this.recordsMap[this.dataset[ii].$uuid]) {
				if (record.isFocused)
					return record;
			}
		}
		record = null;
		if (selected && this.selector.records) {
			if (this.selector.uuid != undefined) {
				record = this.selector.records[this.selector.uuid];
			} else {
				var keys = Object.keys(this.selector.records);
				if (keys.length > 0) {
					record = this.selector.records[keys[0]];
				}
			}
		}
		return record;
	},

	notifyActionChange: function(menuItem, target, value, notifyServer) {
		var record = target.isRecordArticle ? target : null;
		if (value.$create) {
			var dataRecords = this.ensureDataSet();
			this.ensureClientDataset();
			var options = {
				isCreate: true
			};
			if (record) {
				options.$serverIndex = record.$serverIndex;
				options.$recordIndex = record.getRecordIndex();
			} else {
				if (this.dataset.length > 0) {
					options.$serverIndex = this.dataset[this.dataset.length - 1].$serverIndex + 1;
				} else {
					options.$serverIndex = 0;
				}
			}
			var newValue = {
				$uuid: helpers.uuid.generate()
			};
			if (menuItem.$item.$variantItemKey) {
				options.dataRecord = {};
				options.dataRecord[menuItem.$item.$variantItemKey] = newValue;
			} else {
				options.dataRecord = newValue;
			}
			if (record) {
				var found = this.findDataRecord(record.$uuid);
				dataRecords.splice(found.dataRecordIndex, 0, options.dataRecord);
			} else {
				dataRecords.splice(options.$serverIndex, 0, options.dataRecord);
			}
			if (this.pagging.$startIndex !== undefined && this.clientDataset.length < this.pagging.$startIndex) {
				this.pagging.ensureClientRange();
			}
			if ((this.pagging.$startIndex + (this.pagging.$itemsPerPage - 1)) > options.$serverIndex) {
				var newRecord = this._appendRecord(options);
			}
			//sendbag begin
			var sendBag = this.page.ensureSendBag(this);
			var saved = {
				$uuid: newValue.$uuid
			};
			if (sendBag.dataRecords.length > 0) {
				sendBag._ensureFullDataSet(this);
				if (!sendBag._findDataRecord(saved.$uuid)) {
					sendBag.dataRecords.splice(options.$serverIndex, 0, saved);
				}
			} else {
				saved.$index = options.$serverIndex;
				sendBag.dataRecords.push(saved);
			}
			//sendbag end
			if (this.isClientFetch) {
				options.dataRecord.$serverIndex = options.$serverIndex;
				if (this.clientDataset != this.dataset) {
					this.clientDataset.push(options.dataRecord);
				}
				if (this.clientFetchOptions) {
					this.fetcher.applyFetchOptions(this, this.clientFetchOptions);
				}
				this.pagging.setPage(options.$serverIndex);
			} else {
				this.validateDisplay();
			}
			this.page.notifyDataChange(this, sendBag.dataRecords);
		} else {
			var sendBag = this.page.ensureSendBag(this);
			var dataRecords = this.ensureDataSet();
			this.ensureClientDataset();
			if (record) {
				var clientDataRecordIndex = this.getClientDataSetIndex(record.$serverIndex);
				this.records.splice(record.getRecordIndex(), 1);
				var found = this.findDataRecord(record.$uuid);
				if (found) {
					dataRecords.splice(found.dataRecordIndex, 1);
					record.$index = found.dataRecordIndex;
				}
				var found = sendBag.ensureRecord(record);
				if (sendBag.dataRecords.length == 1) {
					found.dataRecord.$index = record.$serverIndex;
					found.dataRecord.$isDeleted = true;
				} else {
					sendBag.dataRecords.splice(found.dataRecordIndex, 1);
				}
				delete record.$index;
				if (clientDataRecordIndex >= 0) {
					this.clientDataset.splice(clientDataRecordIndex, 1);
				}
				delete this.recordsMap[record.$uuid];
				this.removeRecord(record, true);
			} else {
				this.clientDataset.splice(0, dataRecords.length);
				dataRecords.splice(0, dataRecords.length);
				sendBag.dataRecords = [];
				this.removeRecords();
			}
			if (this.records.length == 0) {
				this.emptyBody(true);
			} else {
				if (clientDataRecordIndex >= 0 && this.isClientFetch && this.clientDataset.length) {
					this.pagging.setPage(this.clientDataset[Math.min(clientDataRecordIndex, this.clientDataset.length - 1)].$serverIndex);
				} else {
					this.validateDisplay();
				}
			}
			this.page.notifyDataChange(this, sendBag.dataRecords);
		}
	},
	toggleUIDesign: function(enable, disposingDesigner) {
		DesktopList.prototype.toggleUIDesign.call(this, enable, disposingDesigner);
		this.toggleFakeRecord(enable);

	},
	toggleFakeRecord: function(show) {
		var dataRecords = this.ensureDataSet();
		if (show) {
			if (dataRecords.length == 0) {
				this.ensureClientDataset();
				var options = {
					isCreate: true,
					$serverIndex: 0,
					dataRecord: {
						$isFakeRecord: true,
						$uuid: helpers.uuid.generate()
					}
				};
				dataRecords.splice(options.$serverIndex, 0, options.dataRecord);
				this._appendRecord(options);
			}
		} else {
			if (this.records.length == 1) {
				var record = this.records[0];
				if (record.dataset.$isFakeRecord) {
					if (this.clientDataset) {
						this.clientDataset.splice(this.clientDataset.indexOf(record.dataset), 1);
					}
					this.records.splice(this.records.indexOf(record), 1);
					dataRecords.splice(this.clientDataset.indexOf(record.dataset), 1);
					delete this.recordsMap[record.$uuid];
					this.removeRecord(record, true);
					this.emptyBody(true);
				}
			}
		}
	},
	getClientDataSetIndex: function($serverIndex) {
		this.ensureClientDataset();
		for (var ii = 0, jj = this.clientDataset.length; ii < jj; ii++) {
			if (this.clientDataset[ii].$serverIndex == $serverIndex) {
				return ii;
			}
		}
		return -1;
	},
	fillList: function(dataRecordSet, parentDataRecord, isDelta) {
		this.applyPageSortWhereCapabilities(parentDataRecord);

		DesktopList.prototype.fillList.call(this, dataRecordSet, parentDataRecord, isDelta);

		if (this.cardDecorator && this.cardDecorator.isOutCardMode) {
			this.selector.select(); //ensure selection
		}
		if (this.treeDecorator) {
			this.treeDecorator.onEndFillList();
		}
		this.pagging.draw();
		this.capabilityMaker.sorter.render(this);
		this.body.style.display = "";
	},
	setFocus: function(select, name, $serverIndex) {
		if (this.treeDecorator) {
			return true;
		}
		if (this.$capability.search) {
			this.searchCapability.start(this, this.dataset[$serverIndex].$uuid, name, $serverIndex);
		}
		var field = this.getField(name, $serverIndex);
		if (field) {
			return field.focus(select);
		} else {
			if (this.isClientFetch && !this.findRecordByServerIndex($serverIndex)) {
				this.pagging.setPage($serverIndex);
				field = this.getField(name, $serverIndex);
				if (field) {
					return field.focus(select);
				}
			}
		}
		return null;
	},
	selectRecords: function(start, end) {
		var record;
		if (start === undefined) {
			start = -1;
		}
		if (end === undefined) {
			end = start;
		}
		for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
			if (record = this.recordsMap[this.dataset[ii].$uuid]) {
				var isSelected = record.$serverIndex >= start && record.$serverIndex <= end;
				if (isSelected != this.dataset[ii].$isSelected) {
					record.select(false);
				}
			} else {
				this.dataset[ii].$isSelected = this.dataset[ii].$serverIndex >= start && this.dataset[ii].$serverIndex <= end;
			}
		}
	},
	getField: function(name, $serverIndex, select) {
		var fields, record = this.findRecordByServerIndex($serverIndex);
		if (record && !record.disposed) {
			if ((fields = record.boundFields[name]) && fields.length > 0) {
				return (this.popupCardBuilder ? this.popupCardBuilder.findField(name, record) : null) || fields[0];
			}
		}
		return null;
	},
	getSelectedRecordIndexes: function() {
		var result = [],
			ir = -1;
		for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
			var dataRecord = this.dataset[ii];
			if (dataRecord.$isSelected) {
				if (!result[ir] || result[ir].start + result[ir].count != dataRecord.$serverIndex) {
					result.push({
						start: dataRecord.$serverIndex,
						count: 1
					});
					ir++;
				} else {
					result[ir].count++;
				}
			}
		}
		return result;
	},
	addSlotResizer: function(target, event) {
		var resizeCard = target.syraOutCardResizer == this.id;
		var resizeGraph = target.syraGraphResizer == this.id;
		if (resizeCard || resizeGraph) {
			syra_dd.dropableItem = {
				list: this,
				resizeCard: resizeCard,
				resizeGraph: resizeGraph
			};
			syra_dd.start(this, SlotResizerDDAgent, this._core);
			event.syraRetValue = false;
			return true;
		}
	},
	onNotifyDataChange: function(field, value) {
		if (field.$item.$bind == "$itemsPerPage") {
			this.pagging.getItemsPerPage(value);
			if (this.page.isVignettePage) {
				this.$item.$itemsPerPage = value;
			}
			this.savePreferences(false, field.$item.$bind);
			this.fetcher.trigger(this);
		}
		return false;
	},
	savePreferences: function(resize, $property) {
		this.saveListDesign(resize, preferencesHelper.save(this, $property));
	},
	dispose: function() {
		if (this.page) {
			this.page.lookupField = null;
		}
		this.treeDecorator && this.treeDecorator.dispose();
		this.graphDecorator && this.graphDecorator.dispose();
		this.selectorCardRecord && this.selectorCardRecord.dispose();
		if (this.selector && this.selector.dispose) {
			this.selector.dispose();
		}
		this._autoInsertFields && this._autoInsertFields.dispose();
		this.garbage && this.garbage.dispose();
		this.capabilityMaker = this.garbage = this.selector = this.treeDecorator = this.graphDecorator = this.selectorCardRecord = this._autoInsertFields = null;
		DesktopList.prototype.dispose.call(this);
	}
});