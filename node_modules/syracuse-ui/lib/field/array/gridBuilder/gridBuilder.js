"use strict";
var helpers = require('syracuse-core/lib/helpers');
var GridRecord = require('./gridRecord').GridRecord;
var ColResizer = require('./colResizer').ColResizer;

function GridBuilder(){
}

exports.GridBuilder = helpers.defineClass(GridBuilder, null, {
    initialize: function(){
        this.$defaultSkin = "s-" + this.list.$item.$format;
        this.RecordClass = GridRecord;
        this.list.$item.$isTopLabelAlignment = true;
        
    },
    parseItems: function(callback){
        var $items = this.list.$item.$layout.$items;
        for (var ii = 0, jj = $items.length; ii < jj; ii++) {
            var $item = $items[ii];
            var $field = this.list.$fieldProperties[$item.$bind];
            if ($field && !$field.$isHidden) {
                callback($item, $field);
            }
        }
    },
    emptyBody: function(addEmptySlot, onFetch){
        document.site.emptyDom(this._body);
        if (addEmptySlot) {
            var cell = document.createElement("td");
            cell.className = this.list.$skin + "-empty-slot";
            cell.textContent = onFetch ? this.list._localize.l_waiting_data : (this.list.$item.$noDataText || this.list._localize.l_noData);
            cell.setAttribute("colspan", this.orderCols.length);
            (this.list.emptyDataItem = document.createElement("tr")).appendChild(cell);
            this._body.appendChild(this.list.emptyDataItem);
        }
    },
    _setBodyHeight: function(){
        if (this._bodySlot.style.overflowY != "auto") {
            this._bodySlot.style.overflowY = "auto";
        }
        var bodyHeight = this.list.$item.$fitContainer ? 0 : this._$fixedBodyHeight;
        if (!bodyHeight) {
            var $$slot = this.list._$$fitContainer || $(this.list.layoutSlot);
            this._containerHeight = $$slot[0].offsetHeight - ((this.list.$$item.outerHeight() - this.list.$$item.height()));
            bodyHeight = this._containerHeight - (this._$$bodySlot.offset().top - $$slot.offset().top) - this._hscroller.offsetHeight;
        }
        bodyHeight = Math.max(40, bodyHeight);
        if (Math.abs(bodyHeight - (this._$$bodySlot.height())) < 2) {
            bodyHeight = this._$$bodySlot.height();
        }
        this._bodySlot.style.height = bodyHeight + "px";
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if ((metaData.$fixedBodyHeight !== undefined) || (metaData.$fitContainer !== undefined)) {
            this.list.$item.$fixedBodyHeight = metaData.$fixedBodyHeight;
            this.list.$item.$fitContainer = metaData.$fitContainer;
            this._$fixedBodyHeight = parseInt(this.list.$item.$fixedBodyHeight || 0, 10);
            this.onWindowResize();
        }
        if (onAuthoring) {
            if (metaData.$graphMode !== undefined) {
                this._toggleDataList(metaData.$graphMode != "graph");
            }
            if (metaData.$cards !== undefined) {
                if (metaData.$cards !== undefined) {
                    this.list.$item.$cards = metaData.$cards;
                }
                if (this._cardSlot) {
                    this.list._core.appendChild(this._headSlot);
                    this.list._core.appendChild(this._bodySlot);
                    this.list._core.appendChild(this._hscroller);
                    document.site.removeDomChild(this._tableSlot);
                    document.site.removeDomChild(this._cardsSeparator);
                    document.site.removeDomChild(this._cardSlot);
                    this._cardsSeparator = this._tableSlot = this._cardSlot = null;
                }
                this.list.reloadBuilder(true);
                if (metaData.$cards.$widths !== undefined) {
                    if (this._cardSlot) {
                        this._cardSlot.style.width = this.list.$item.$cards.$widths + "%";
                    }
                }
            }
        }
    },
    _toggleDataList: function(show){
        if (this._tableBody) {
            this._tableBody.style.display = show ? "" : "none";
        }
        else {
            this.orderCols = [];
            this.cols = {};
            this._headSlot = document.createElement("div");
            this._headSlot.className = this.list.$skin + "-slot-head";
            this._headTable = document.createElement("table");
            this._headTable.style.display = "none";
            this._headTable.className = this.list.$skin + "-table-head";
            this._headTable.setAttribute("cellspacing", "0");
            this._headTable.setAttribute("cellpadding", "0");
            this._headSlot.appendChild(this._headTable);
            
            this._hscroller = document.createElement("div");
            this._hscroller.className = this.list.$skin + "-h-scroll";
            this._hscroller.appendChild(this._hscrollBody = document.createElement("div"));
            this._hscrollBody.className = this.list.$skin + "-h-scroll-body";
            
            this._$$bodySlot = $(this._bodySlot = document.createElement("div"));
            this._bodySlot.className = this.list.$skin + "-slot-body";
            this._bodyTable = document.createElement("table");
            this._bodyTable.style.display = "none";
            this._bodyTable.className = this.list.$skin + "-table-body";
            this._bodyTable.setAttribute("cellspacing", "0");
            this._bodyTable.setAttribute("cellpadding", "0");
            this._bodySlot.appendChild(this._bodyTable);
            
            this._bodyColgroup = this._bodyTable.appendChild(document.createElement("colgroup"));
            this._headColgroup = this._headTable.appendChild(document.createElement("colgroup"));
            this._thead = this._headTable.appendChild(document.createElement("thead"));
            var core = this._tableSlot || this.list._core;
            core.appendChild(this._headSlot);
            core.appendChild(this._bodySlot);
            core.appendChild(this._hscroller);
            
            
            this.list.setSortCapability(true);
            
            this._$$body = $(this._body = this._bodyTable.appendChild(document.createElement("tbody")));
            
            this.list.helper.loadSelector(this.list);
            this._makeTitleRow();
            this.colResizer = new ColResizer();
            this.colResizer.setResizable(this);
            this._headTable.style.display = "";
            this._bindScrollEvent(true);
        }
    },
    onWindowResize: function(){
        if (!this.disposed && this._bodySlot) {
            if (this._bodySlot.clientWidth) {
                this.widthTotal = 0;
                this._maxCol = this.orderCols[0];
                for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
                    var col = this.orderCols[ii];
                    this.widthTotal += col.widthValue;
                }
                if (this.widthTotal < this._bodySlot.clientWidth) {
                    this.isProportionalWidth = true;
                    var maxWidth = this._bodySlot.clientWidth;
                    for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
                        var col = this.orderCols[ii];
                        if (col.$bind) {
                            var width = col.widthValue / this.widthTotal;
                            col.realWidth = width = width * maxWidth;
                            col.groupHead.style.width = col.groupBody.style.width = width + "px";
                        }
                    }
                    //this._maxCol.groupHead.style.width = this._maxCol.groupBody.style.width = ((this._$$bodySlot.width() - 1 - this.widthTotal) + this._maxCol.widthValue) + "px";
                }
                else 
                    if (this.isProportionalWidth) {
                        for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
                            var col = this.orderCols[ii];
                            col.groupHead.style.width = col.groupBody.style.width = (col.realWidth = col.widthValue) + "px";
                        }
                        delete this.isProportionalWidth;
                    }
            }
            this._hscrollBody.style.width = this.widthTotal + "px";
            
            if (this._bodySlot.scrollHeight > (this._bodySlot.clientHeight + 1)) {
                this._headSlot.style.marginRight = "17px";
            }
            else {
                this._headSlot.style.marginRight = ""
            }
            if (this._bodySlot.scrollWidth > (this._bodySlot.clientWidth + 1)) {
                this._hscroller.style.display = "";
                this._bodyOffset = this._$$bodySlot.offset();
            }
            else {
                this._hscroller.style.display = "none";
                delete this._bodyOffset;
            }
            if (this._$fixedBodyHeight || this.list.$item.$fitContainer) {
                this._setBodyHeight();
            }
            else {
                if (this._bodySlot.style.overflowY == "auto") {
                    this._bodySlot.style.overflowY = "";
                    this._bodySlot.style.height = "";
                }
            }
        }
    },
    _bindScrollEvent: function(bind){
        var self = this;
        if (bind) {
            (self._$$hscroller = $(self._hscroller)).bind("scroll", function(event){
                document.site.onBeforClick();
                if (self._bodySlot.scrollLeft != self._hscroller.scrollLeft) {
                    self._bodySlot.scrollLeft = self._hscroller.scrollLeft;
                }
                if (self._headSlot.scrollLeft != self._hscroller.scrollLeft) {
                    self._headSlot.scrollLeft = self._hscroller.scrollLeft;
                }
                return false;
            });
            self._$$bodySlot.bind("scroll", function(event){
                if (self._hscroller.scrollLeft != self._bodySlot.scrollLeft) {
                    self._hscroller.scrollLeft = self._bodySlot.scrollLeft;
                }
                if (self._headSlot.scrollLeft != self._bodySlot.scrollLeft) {
                    self._headSlot.scrollLeft = self._bodySlot.scrollLeft;
                }
            });
            (self._$$headSlot = $(self._headSlot)).bind("scroll", function(event){
                if (self._hscroller.scrollLeft != self._headSlot.scrollLeft) {
                    self._hscroller.scrollLeft = self._headSlot.scrollLeft;
                }
                if (self._bodySlot.scrollLeft != self._headSlot.scrollLeft) {
                    self._bodySlot.scrollLeft = self._headSlot.scrollLeft;
                }
            });
        }
        else {
            if (self._$$hscroller) {
                self._$$hscroller.unbind();
                delete self._$$hscroller;
            }
            if (self._$$bodySlot) {
                self._$$bodySlot.unbind();
            }
            if (self._$$headSlot) {
                self._$$headSlot.unbind();
            }
        }
    },
    appendFieldCol: function(slot, $item, $field){
        var col = this.cols[$item.$bind] = this._appendCol();
        col.slot = slot;
        var isSortable;
        if ($field.$capabilities && ($field.$capabilities.indexOf("sort") >= 0)) {
            isSortable = true;
            col.title = this.list.sortCapability.appendSortLink(col, $item);
        }
        else {
            col.title = document.createElement("div");
            col.title.className = this.list.$skin + "-title-label";
        }
        var titleText = this.list.getLocalizedTitle($field.$shortTitle || $field.$title || "");
        col.title.textContent = titleText;
        col.title.setAttribute("title", titleText);
        
        col.titleWrapper = document.createElement("div");
        col.titleWrapper.className = "s-grid-title-wrap";
        col.titleWrapper.appendChild(col.title);
        col.resizer = document.createElement("div");
        col.resizer.className = "s-grid-title-resizer";
        col.titleWrapper.appendChild(col.resizer);
        col.titleCell.setAttribute("data-s-field-item", $item.$bind || "");
        col.titleCell.className = this.gridCss.title;
        col.titleCell.appendChild(col.titleWrapper);
        slot.appendChild(col.titleCell);
        
        //set colgroup
        this.maxMinWidth = 0;
        var width = $item.$width || $field.$width;
        if (width) {
            col.groupHead.style.width = col.groupBody.style.width = width;
            col.widthValue = parseInt(width.replace("px", ""), 10);
        }
        else {
            col.widthValue = document.site.getFieldWidth($field, false, titleText.length, isSortable);
        }
        col.widthValue += 8; //for padding
        var widthAdded = 0;
        if ($field.$capabilities && ($field.$capabilities.indexOf("filter") >= 0)) {
            widthAdded += 18;
        }
        if (this.list.$isEditMode) {
            if ($field.$item ? ($field.$item.$links || $field.$item.$actions) : ($field.$links || $field.$actions)) {
                widthAdded += 18;
            }
            if ($field.$type == "application/x-choice" || $field.$type == "application/x-date" || $field.$type == "application/x-time") {
                widthAdded += 18;
            }
            if ($field.$links) {
                if ($field.$type != "application/x-reference" && $field.$links.$lookup) {
                    col.widthValue
                    widthAdded += 18;
                }
                if ($field.$links.$tunnel) {
                    col.widthValue += 18;
                }
            }
        }
        if (widthAdded) {
            if (isSortable) {
                widthAdded -= 16; //space added for sort
            }
            col.widthValue += widthAdded;
        }
        col.realWidth = col.widthValue = Math.max(40, col.widthValue);
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        col.groupBody.setAttribute("data-s-bind", $item.$bind);
        col.$bind = $item.$bind;
        return col;
    },
    _makeTitleRow: function(){
        this.orderCols = [];
        if (this.titleRow) {
            document.site.emptyDom(this.titleRow);
        }
        else {
            this.titleRow = this._thead.appendChild(document.createElement("tr"));
        }
        document.site.emptyDom(this._bodyColgroup);
        document.site.emptyDom(this._headColgroup);
        this.titleRow.style.display = this.list.$item.$isTitleRowHidden ? "none" : "";
        this.list.filterCapability.ensureQuickFilter();
        
        if (this.list.treeDecorator) {
            this.orderCols.push(this.list.treeDecorator.appendTreeviewCol(this.titleRow));
        }
        else {
            this.list.filterCapability.appendEmptyCell();
            this.orderCols.push(this._appendRowIndexCol(this.titleRow));
        }
        
        if (this.list.$item.$cards && this.list.$item.$cards.$position == "inline") {
            this.list.filterCapability.appendEmptyCell();
            this.orderCols.push(this._appendCardViewCol(this.titleRow));
        }
        
        if (this.list.selector.useColumnSelector) {
            this.list.filterCapability.appendFlagCell();
            this.orderCols.push(this._appendRecordSelectorCol(this.titleRow));
        }
        if (!this.list.$item.$isMenuRecordHidden) {
            this.list.filterCapability.appendEmptyCell();
            this.orderCols.push(this._appendMenusBoxCol(this.titleRow));
        }
        
        //parseItems
        var $items = this.list.$item.$layout.$items;
        for (var ii = 0, jj = $items.length; ii < jj; ii++) {
            var $item = $items[ii];
            var $field = this.list.$fieldProperties[$item.$bind];
            if ($field && !$field.$isHidden) {
                this.orderCols.push(this.appendFieldCol(this.titleRow, $item, $field));
                this.list.filterCapability.appendFieldCell($item, $field);
            }
        }
    },

    _appendCol: function(){
        return {
            titleCell: document.createElement("th"),
            groupBody: this._bodyColgroup.appendChild(document.createElement("col")),
            groupHead: this._headColgroup.appendChild(document.createElement("col"))
        };
    },
    setRowIndexVisibility: function(){
        if (this.cols && this.cols.$rowIndex) {
            if (this.list.$item.$isRowIndexVisible || this.list.$item.$selectByRowIndex) {
                this.cols.$rowIndex.widthValue = (this.list.$capability.reorder) ? 35 : 25;
            }
            else {
                this.cols.$rowIndex.widthValue = 0;
            }
            this.cols.$rowIndex.groupHead.style.width = this.cols.$rowIndex.groupBody.style.width = this.cols.$rowIndex.widthValue + "px";
        }
    },
    _appendRowIndexCol: function(slot){
        var col = this.cols.$rowIndex = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        slot.appendChild(col.titleCell);
        this.setRowIndexVisibility();
        return col;
    },
    _appendCardViewCol: function(slot){
        var col = this.cols.$cards = this._appendCol();
        col.groupHead.style.width = col.groupBody.style.width = (col.widthValue = 25) + "px";
        col.slot = slot;
        col.titleCell.className = this.gridCss.title + " s-list-cards-cell-opener";
        var opener = document.createElement("a");
        opener.className = "s-cardview-opener-all s-close";
        slot.appendChild(col.titleCell).appendChild(opener);
        return col;
    },
    _appendRecordSelectorCol: function(slot){
        var col = this.cols.$recordSelector = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        this.list.selector.appendToTitle(slot.appendChild(col.titleCell));
        col.widthValue = this.list.selector.getWidth();
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        return col;
    },
    _appendMenusBoxCol: function(slot){
        var col = this.cols.$menusBox = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title + " s-list-title-actions";
        slot.appendChild(col.titleCell);
        col.$quickActions = {};
        col.widthValue = col.width = 0;
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        return col;
    },
    setMenusBoxCol: function($quickAction, add, width){
        var col = this.cols.$menusBox;
        if (add) {
            if (!col.$quickActions[$quickAction]) {
                col.$quickActions[$quickAction] = true;
                col.widthValue = (col.width += width);
                col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
            }
        }
        else {
            if (!$quickAction) {
                col.$quickActions = {};
                col.widthValue = col.width = 0;
                col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
            }
            else {
                if (col.$quickActions[$quickAction]) {
                    delete col.$quickActions[$quickAction];
                    col.widthValue = (col.width -= width);
                    col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
                }
            }
        }
    },
    ensureCardView: function(){
        var self = this
        var $arrayBinds = [];
        if (!self.list.$item.$cards) {
            var $items = this.list.$item.$layout.$items;
            for (var ii = 0, jj = $items.length; ii < jj; ii++) {
                var $item = $items[ii];
                var $field = this.list.$fieldProperties[$item.$bind];
                if ($field && !$field.$isHidden) {
                    switch ($field.$type) {
                        case "application/x-array":
                        case "application/x-object":
                        case "text/rtf":
                        case "text/html":
                            if (!$field.$isHidden) {
                                if (self.list.$item.$cards) {
                                    $field.$isHidden = true;
                                }
                                else {
                                    $arrayBinds.push($item.$bind);
                                }
                            }
                            break;
                    }
                }
            }
            if ($arrayBinds.length > 0) {
                self.list.$item.$layout.$items = self.list.$item.$layout.$items.filter(function($item){
                    return $arrayBinds.indexOf($item.$bind) < 0;
                });
                self.list.$item.$cards = {
                    $layout: {
                        $layoutType: "tabs",
                        $items: $arrayBinds.map(function($bind){
                            var $field = self.list.$fieldProperties[$bind];
                            return {
                                $category: "section",
                                $title: self.list.getLocalizedTitle($field.$shortTitle || $field.$title || ""),
                                $layout: {
                                    $items: [{
                                        $bind: $bind,
                                        $isTitleHidden: true
                                    }]
                                }
                            
                            };
                        })
                    }
                };
            }
        }
        if (self.list.$item.$cards) {
            var $cards = self.list.$item.$cards;
            $cards.$category = $cards.$category || "section"
            $cards.$position = $cards.$position || "inline";
            if ($cards.$position != "inline") {
                if (self.list.$item.$selectMode === undefined) {
                    self.list.$item.$selectMode = "row";
                }
                self._tableSlot = document.createElement("div");
                self._cardsSeparator = document.createElement("div");
                self._cardSlot = document.createElement("div");
                if ($cards.$position == "left" || $cards.$position == "right") {
                    self.list._core.className = "s-list-core s-list-gridcard-slot-horz";
                    self._tableSlot.className = "s-list-grid-slot-horz";
                    self._cardSlot.className = "s-list-card-slot-horz";
                    self._cardsSeparator.className = "s-list-card-sep-horz";
                    self._cardSlot.style.width = ($cards.$widths || "50") + "%";
                }
                else {
                    self.list._core.className = "s-list-core s-list-gridcard-slot";
                    self._tableSlot.className = "s-list-grid-slot";
                    self._cardSlot.className = "s-list-card-slot";
                    self._cardsSeparator.className = "s-list-card-sep";
                    self._tableSlot.style.width = "";
                    self._cardSlot.style.width = "";
                }
                if (($cards.$position == "top") ||
                ($cards.$position == "left")) {
                    self.list._core.appendChild(self._cardSlot);
                    self.list._core.appendChild(self._cardsSeparator);
                    self.list._core.appendChild(self._tableSlot);
                }
                else {
                    self.list._core.appendChild(self._tableSlot);
                    self.list._core.appendChild(self._cardsSeparator);
                    if ($cards.$position != "popup") {
                        self.list._core.appendChild(self._cardSlot);
                    }
                }
            }
        }
    },
    drawBuilder: function(){
        var $skin = this.list.$skin = this.list.$item.$skin || this.$defaultSkin;
        this.gridCss = {
            title: $skin + "-title-cell",
            cell: $skin + "-cell",
            rowIndex: $skin + "-cell " + $skin + "-row-index"
        };
        if (this.list.$item.$selectByRowIndex) {
            this.gridCss.rowIndex += " s-list-row-index-selector";
        }
        
        this.ensureCardView();
        this.list.applyDesignMetaData(this.list.$item, false);
        this.list.setState(this.list.$field);
        this.list.helper.parseCapabilities(this.list);
        this._toggleDataList(true);
        this.list.applyCapabilities();
        this._bodyTable.style.display = "";
    },
    findCardViewField: function(name, record){
        var found = null;
        var fields = record.boundFields[name]
        if (fields) {
            for (var ii = 0, jj = fields.length; !found && ii < jj; ii++) {
                var field = fields[ii];
                var boxParent = field.boxParent;
                while (boxParent && boxParent != record) {
                    if (boxParent == record.cardview) {
                        found = field;
                        break;
                    }
                    boxParent = boxParent.boxParent;
                }
            }
        }
        return found;
    },
    toggleCardView: function(record, show){
        if (this._cardSlot) {
            if (show) {
                if (this.list.$item.$cards.$position == "popup" && !this.popupCard) {
                    return;
                }
                if (this.recordCardView) {
                    if (this.recordCardView.cardview) {
                        this.recordCardView.cardview.$$item.detach();
                    }
                    // record.removeItem(this.recordCardView.cardview, true);
                    //  delete this.recordCardView.cardview;
                }
                this.recordCardView = record;
                document.site.emptyDom(this._cardSlot);
                var $cards = this.list.$item.$cards;
                var $pagerActions;
                if (!record.cardview && this.list.isClientFetch && this.list.$item.$cards.$position == "popup") {
                    $cards.$isTitleHidden = !($cards.$title && $cards.$title != "-");
                    $cards = {
                        $layout: {
                            $items: [{
                                $layoutType: "row",
                                $autoSize: true,
                                $items: [{
                                    $category: "menus",
                                    $title: "-",
                                    $masterFriendMenuId: record.id + "-menu-picker",
                                    $isTitlePicker: true,
                                    $isBoxCollapsable: true,
                                    $isPopupContent: true,
                                    $id: record.id + "-card-menu-picker",
                                    $skin: "s-list-menus",
                                    $itemSkin: "s-record-menus-link",
                                    $layout: {
                                        $items: [{
                                            $layoutType: "stack",
                                            $items: [{
                                                $bind: "$create",
                                                $icon: {
                                                    $mode: "iconText",
                                                    $path: "site/s-list-popup-"
                                                }
                                            }, {
                                                $bind: "$edit",
                                                $icon: {
                                                    $mode: "iconText",
                                                    $path: "site/s-list-popup-"
                                                }
                                            }, {
                                                $bind: "$delete",
                                                $icon: {
                                                    $mode: "iconText",
                                                    $path: "site/s-list-popup-"
                                                }
                                            }]
                                        }]
                                    }
                                }]
                            }, $cards]
                        }
                    };
                    if (this.list.dataset.length > 1) {
                        var $pagerMenus = {
                            $category: "menus",
                            $isTitlePicker: true,
                            $skin: "s-page-pager",
                            $itemIcon: {
                                $mode: "iconText",
                                $path: "site/s-record-"
                            },
                            $layout: {
                                $layoutType: "row",
                                $autoSize: true,
                                $items: [{
                                    $bind: "$first"
                                }, {
                                    $bind: "$previous"
                                }, {
                                    $bind: "$next"
                                }, {
                                    $bind: "$last"
                                }]
                            }
                        };
                        $cards.$layout.$items[0].$items.push($pagerMenus);
                        $pagerActions = {
                            $actions: {
                                $first: {
                                    $title: this.list._localize.card_first_record,
                                    $isDisabled: this.list.pagingCapability.$startIndex == 1 && record.$recordIndex == 0
                                },
                                $previous: {
                                    $title: this.list._localize.card_prev_record,
                                    $isHidden: this.list.dataset.length <= 2,
                                    $isDisabled: this.list.pagingCapability.$startIndex == 1 && record.$recordIndex == 0
                                },
                                $next: {
                                    $title: this.list._localize.card_next_record,
                                    $isHidden: this.list.dataset.length <= 2,
                                    $isDisabled: (this.list.pagingCapability.$startIndex + record.$recordIndex) == this.list.dataset.length
                                },
                                $last: {
                                    $title: this.list._localize.card_lest_record,
                                    $isDisabled: (this.list.pagingCapability.$startIndex + record.$recordIndex) == this.list.dataset.length
                                }
                            }
                        };
                    }
                }
                this._cardSlot.setAttribute("data-s-record", record.$uuid);
                this._cardSlot.setAttribute("data-s-article", record.id);
                if (!record.cardview) {
                    record.cardview = this.list.page.loadNewItem(this._cardSlot, $cards, record);
                }
                else {
                    this._cardSlot.appendChild(record.cardview.$$item[0]);
                }
                if ($pagerActions) {
                    record.applyActionLinkChange($pagerActions);
                }
            }
        }
        else {
            if (!record._cardsRow) {
                record._cardsSlot = document.createElement("td");
                record._cardsSlot.className = record.boxParent.$skin + "-cards-cell";
                record._cardsSlot.setAttribute("colspan", this.orderCols.length);
                record._cardsRow = document.createElement("tr");
                record._cardsSlot.setAttribute("data-s-record", record.$uuid);
                record._cardsSlot.setAttribute("data-s-article", record.id);
                record.$$item.after(record._cardsRow);
                record._cardsRow.appendChild(record._cardsSlot);
                record.cardview = this.list.page.loadNewItem(record._cardsSlot, this.list.$item.$cards, record);
            }
            record._cardsRow.style.display = show ? "" : "none";
        }
    },
    onCardViewOpenerClick: function(opener){
        var show = opener.className.indexOf("s-close") >= 0;
        var $uuids = (opener.className.indexOf("s-cardview-opener-all") >= 0) ? Object.keys(this.list.recordsMap) : [document.controller.findArticle($(opener)).$uuid];
        for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
            var record = this.list.recordsMap[$uuids[ii]];
            document.site.toggleClass(record.cardsOpener, "s-close", !show);
            this.toggleCardView(record, show);
        }
        document.site.toggleClass(opener, "s-close", !show);
    },
    togglePopupCard: function(record){
        var self = this;
        if (record) {
            if (!(self.popupCard && self.recordCardView == record)) {
                if (self.popupCard) {
                    self.list.selector.select(record.$uuid, true); //ensure selection
                }
                else {
                    self.list.page.externalAdapter.onFieldClickPicker({
                        field: record,
                        pickerType: "openCard",
                        doEvent: function(){
                            self.popupCard = {
                                slot: document.createElement("div"),
                                slotHeader: document.createElement("div")
                            };
                            self.popupCard.slot.className = "s-list-card-slot-popup";
                            self.popupCard.slot.appendChild(self.popupCard.slotHeader).className = "s-list-card-slot-popup-header";
                            self._cardSlot.className = "s-list-card-slot-popup-body";
                            self.popupCard.slot.appendChild(self._cardSlot);
                            if (!record.cardview) {
                                self.list.selector.select(record.$uuid, true); //ensure selection
                            }
                            var offsetRow = $(record._dataRow).offset();
                            (self.popupCard.dialog = record.page.openDialog({
                                isAutoClose: false,
                                $dialogMode: "popup",
                                content: record.cardview,
                                $$scrollview: $(self._cardSlot),
                                dragSpot: self.popupCard.slotHeader,
                                $$dialog: $(self.popupCard.slot),
                                position: self.cardPosition ||
                                {
                                    left: offsetRow.left + "px",
                                    top: (offsetRow.top + record._dataRow.offsetHeight) + "px"
                                },
                                onresize: function(dialog){
                                    self._cardSlot.style.width = dialog.$$dialogSlot.width() + "px";
                                    self._cardSlot.style.height = (dialog.$$dialogSlot.height() - self.popupCard.slotHeader.offsetHeight) + "px";
                                },
                                onClose: function(){
                                    if (self.popupCard) {
                                        self.list.page.externalAdapter.onFieldClickPicker({
                                            field: self.recordCardView,
                                            pickerType: "closeCard",
                                            doEvent: function(){
                                                if (self.popupCard.slot) {
                                                    self.cardPosition = {
                                                        top: self.popupCard.slot.style.top,
                                                        left: self.popupCard.slot.style.left,
                                                        width: self.popupCard.slot.style.width,
                                                        height: self.popupCard.slot.style.keight
                                                    }
                                                }
                                                document.site.removeDomChild(self.popupCard.slot);
                                                document.controller.disposeObject(self.popupCard.dialog);
                                                self.popupCard.slot = self.popupCard.slotHeader = null;
                                                self.popupCard = null;
                                            }
                                        });
                                    }
                                    return true;
                                },
                                onOpened: function(content){
                                    self.list.page.externalAdapter.onFieldClickPicker({
                                        field: self.recordCardView,
                                        pickerType: "openedCard",
                                        doEvent: function(){
                                        }
                                    });
                                }
                            })).appendCloseButton(self.popupCard.slotHeader);
                        }
                    });
                }
                return;
            }
        }
        if (self.popupCard && self.popupCard.dialog) {
            self.popupCard.dialog.close();
        }
    },
    dispose: function(){
        if (this.list && this.list.filterCapability) {
            this.list.filterCapability.removeQuickFilter();
        }
        this._bindScrollEvent(false);
        if (this.colResizer) {
            document.controller.disposeObject(this.colResizer);
        }
        this.colResizer = this.recordCardView = this._$$hscroller = this._$$bodySlot = this._$$headSlot = this.list = this.emptyData = null;
    }
});
