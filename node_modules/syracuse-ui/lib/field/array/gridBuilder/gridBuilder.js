"use strict";
var helpers = require('syracuse-core/lib/helpers');
var GridRecord = require('./gridRecord').GridRecord;
var ColResizer = require('./colResizer').ColResizer;
var Scroller = require('./scroller').Scroller;
var GridCardBuilder = require('./gridCardBuilder').GridCardBuilder;
function GridBuilder(){
}

exports.GridBuilder = helpers.defineClass(GridBuilder, null, {
    findColIndex: function(col, $bind){
        for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
            if ($bind) {
                if (this.orderCols[ii].$bind == $bind) {
                    return ii;
                }
            }
            else {
                if (this.orderCols[ii] == col) {
                    return ii;
                }
            }
            
        }
        return -1;
    },
    findColItem: function($bind){
        for (var ii = 0, jj = this.list.$item.$layout.$items.length; ii < jj; ii++) {
            if (this.list.$item.$layout.$items[ii].$bind == $bind) {
                return ii;
            }
        }
        return -1;
        //  this.list.$item.$layout.$items.splice(newSourceIndex, 0, this.list.$item.$layout.$items.splice(sourceIndex, 1)[0]);
    },
    onColumnResized: function(column){
        var $items = this.list.$item.$layout.$items;
        for (var ii = 0, jj = $items.length; ii < jj; ii++) {
            if ($items[ii].$bind == column.$bind) {
                $items[ii].$width = column.widthValue + "px";
                this.notifyAuthoring();
                break;
            }
        }
    },
    reorderCells: function(record, targetIndex, sourceIndex, dropAtEnd){
        var children = record._dataRow.childNodes;
        var targetCell = children[targetIndex];
        var sourceCell = children[sourceIndex];
        targetCell.parentNode.insertBefore(sourceCell, dropAtEnd ? targetCell.nextSibling : targetCell);
    },
    reorderColumns: function(colSource, colTarget, dropAtEnd){
        var sourceIndex = this.findColIndex(colSource);
        if (sourceIndex >= 0) {
            var targetIndex = this.findColIndex(colTarget);
            this.orderCols.splice(sourceIndex, 1);
            var newSourceIndex = this.findColIndex(colTarget);
            if (dropAtEnd) {
                newSourceIndex++;
            }
            this.orderCols.splice(newSourceIndex, 0, colSource);
            
            var $sourceItem = this.list.$item.$layout.$items.splice(this.findColItem(colSource.$bind), 1)[0];
            var $newSourceItem = this.findColItem(colTarget.$bind);
            if (dropAtEnd) {
                $newSourceItem++;
            }
            this.list.$item.$layout.$items.splice($newSourceItem, 0, $sourceItem);
            
            if (this.list.filterCapability && this.list.filterCapability.filterRecord) {
                this.reorderCells(this.list.filterCapability.filterRecord, targetIndex, sourceIndex);
            }
            colTarget.groupBody.parentNode.insertBefore(colSource.groupBody, dropAtEnd ? colTarget.groupBody.nextSibling : colTarget.groupBody);
            colTarget.groupHead.parentNode.insertBefore(colSource.groupHead, dropAtEnd ? colTarget.groupHead.nextSibling : colTarget.groupHead);
            colTarget.titleCell.parentNode.insertBefore(colSource.titleCell, dropAtEnd ? colTarget.titleCell.nextSibling : colTarget.titleCell);
            for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
                var record = this.list.records[ii];
                this.reorderCells(record, targetIndex, sourceIndex);
            }
        }
        this.scroller.validateFixedColumns();
        if (this.list.awContext) {
            this.list.awContext.toolsBar.columnsToolBox.toggle(true);
        }
        this.onWindowResize();
        this.notifyAuthoring();
    },
    notifyAuthoring: function(){
        if (document.site.authorPage) {
            if (this.list.page.authoringPage) {
                this.list.page.authoringPage.notifyUpdate();
            }
            if (this.list.awAddin) {
                this.list.awAddin.refreshToolsBar();
            }
        }
    },
    removeColumn: function($bind){
        var index = this.findColIndex(null, $bind);
        var col = this.orderCols.splice(index, 1)[0];
        this.list.$item.$layout.$items.splice(this.findColItem($bind), 1);
        document.site.removeDomChild(col.groupBody);
        document.site.removeDomChild(col.groupHead);
        document.site.removeDomChild(col.titleCell);
        if (this.list.filterCapability && this.list.filterCapability.filterRecord) {
            document.site.removeDomChild(this.list.filterCapability.filterRecord._dataRow.childNodes[index]);
        }
        for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
            var record = this.list.records[ii];
            document.site.removeDomChild(record._dataRow.childNodes[index]);
        }
        this.onWindowResize();
    },
    initialize: function(){
        this.$defaultSkin = "s-" + this.list.$item.$format;
        this.RecordClass = GridRecord;
        this.list.$item.$isTopLabelAlignment = true;
        
    },
    parseItems: function(callback){
        var $items = this.list.$item.$layout.$items;
        for (var ii = 0, jj = $items.length; ii < jj; ii++) {
            var $item = $items[ii];
            var $field = this.list.$fieldProperties[$item.$bind];
            if ($field && !$field.$isHidden) {
                callback($item, $field);
            }
        }
    },
    emptyBody: function(addEmptySlot, onFetch){
        document.site.emptyDom(this._body);
        if (addEmptySlot) {
            var cell = document.createElement("td");
            cell.className = this.list.$skin + "-empty-slot";
            cell.textContent = onFetch ? this.list._localize.l_waiting_data : (this.list.$item.$noDataText || this.list._localize.l_noData);
            cell.setAttribute("colspan", this.orderCols.length);
            (this.list.emptyDataItem = document.createElement("tr")).appendChild(cell);
            this._body.appendChild(this.list.emptyDataItem);
        }
    },
    
    applyDesignMetaData: function(metaData, onAuthoring){
        if ((metaData.$fixedBodyHeight !== undefined) || (metaData.$fitContainer !== undefined)) {
            this.list.$item.$fixedBodyHeight = metaData.$fixedBodyHeight;
            this.list.$item.$fitContainer = metaData.$fitContainer;
            if (this.scroller) {
                this.scroller.setFixedBodyHeight(this.list.$item.$fixedBodyHeight);
            }
            this.onWindowResize();
        }
        if (onAuthoring) {
            if (metaData.$graphMode !== undefined) {
                this._toggleDataList(metaData.$graphMode != "graph");
            }
            if (metaData.$cards !== undefined) {
                this.cardBuilder.applyDesignMetaData(metaData, onAuthoring);
            }
        }
    },
    _toggleDataList: function(show){
        if (this._tableBody) {
            this._tableBody.style.display = show ? "" : "none";
        }
        else {
            this.orderCols = [];
            this.cols = {};
            this.prevCols = {};
            this._headTable = document.createElement("table");
            this._headTable.style.display = "none";
            this._headTable.className = this.list.$skin + "-table-head";
            this._headTable.setAttribute("cellspacing", "0");
            this._headTable.setAttribute("cellpadding", "0");
            
            this._bodyTable = document.createElement("table");
            this._bodyTable.style.display = "none";
            this._bodyTable.className = this.list.$skin + "-table-body";
            this._bodyTable.setAttribute("cellspacing", "0");
            this._bodyTable.setAttribute("cellpadding", "0");
            
            this._bodyColgroup = this._bodyTable.appendChild(document.createElement("colgroup"));
            this._headColgroup = this._headTable.appendChild(document.createElement("colgroup"));
            this._thead = this._headTable.appendChild(document.createElement("thead"));
            
            var core = this.cardBuilder.tableSlot || this.list._core;
            this.scroller = new Scroller();
            this.scroller.load(this);
            this.scroller.drawSlots(core, this._headTable, this._bodyTable);
            
            this.list.setSortCapability(true);
            this._$$body = $(this._body = this._bodyTable.appendChild(document.createElement("tbody")));
            
            this.list.helper.loadSelector(this.list);
            this._makeTitleRow();
            
            this.scroller.validateFixedColumns();
            this.colResizer = new ColResizer();
            this.colResizer.setResizable(this);
            this._headTable.style.display = "";
            
        }
    },
    
    onWindowResize: function(){
        if (!this.disposed && this.scroller) {
            this.scroller.onWindowResize();
        }
    },
    
    appendFieldCol: function(slot, $item, $field){
        var col = this.cols[$item.$bind] = this._appendCol();
        col.slot = slot;
        var isSortable;
        if ($field.$capabilities && ($field.$capabilities.indexOf("sort") >= 0)) {
            isSortable = true;
            col.title = this.list.sortCapability.appendSortLink(col, $item);
        }
        else {
            col.title = document.createElement("div");
            col.title.className = this.list.$skin + "-title-label";
        }
        var titleText = this.list.getLocalizedTitle($field.$shortTitle || $field.$title || "");
        col.title.textContent = titleText;
        col.title.setAttribute("title", titleText);
        
        col.titleWrapper = document.createElement("div");
        col.titleWrapper.className = "s-grid-title-wrap";
        col.titleWrapper.appendChild(col.title);
        col.resizer = document.createElement("div");
        col.resizer.className = "s-grid-title-resizer";
        col.titleWrapper.appendChild(col.resizer);
        col.titleCell.setAttribute("data-s-field-item", $item.$bind || "");
        col.titleCell.className = this.gridCss.title;
        col.titleCell.appendChild(col.titleWrapper);
        slot.appendChild(col.titleCell);
        
        //set colgroup
        this.maxMinWidth = 0;
        var width = $item.$width || $field.$width;
        if (width) {
            col.widthValue = parseInt((width + "").replace("px", ""), 10);
        }
        else {
            col.widthValue = document.site.getFieldWidth($field, false, titleText.length, isSortable);
            col.widthValue += 8; //for padding
            var widthAdded = 0;
            if ($field.$capabilities && ($field.$capabilities.indexOf("filter") >= 0)) {
                widthAdded += 18;
            }
            if (this.list.$isEditMode) {
                if ($field.$item ? ($field.$item.$links || $field.$item.$actions) : ($field.$links || $field.$actions)) {
                    widthAdded += 18;
                }
                if ($field.$type == "application/x-choice" || $field.$type == "application/x-date" || $field.$type == "application/x-time") {
                    widthAdded += 18;
                }
                if ($field.$links) {
                    if ($field.$type != "application/x-reference" && $field.$links.$lookup) {
                        col.widthValue
                        widthAdded += 18;
                    }
                    if ($field.$links.$tunnel) {
                        col.widthValue += 18;
                    }
                }
            }
            if (widthAdded) {
                if (isSortable) {
                    widthAdded -= 16; //space added for sort
                }
                col.widthValue += widthAdded;
            }
        }
        col.realWidth = col.widthValue = Math.max(40, col.widthValue);
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        col.groupBody.setAttribute("data-s-bind", $item.$bind);
        col.$bind = $item.$bind;
        col.$item = $item;
        col.$isFixed = col.$item.$isFixed;
        return col;
    },
    _makeTitleRow: function(){
        this.orderCols = [];
        if (this.titleRow) {
            document.site.emptyDom(this.titleRow);
        }
        else {
            this.titleRow = this._thead.appendChild(document.createElement("tr"));
        }
        document.site.emptyDom(this._bodyColgroup);
        document.site.emptyDom(this._headColgroup);
        this.titleRow.style.display = this.list.$item.$isTitleRowHidden ? "none" : "";
        this.list.filterCapability.ensureQuickFilter();
        
        if (this.list.treeDecorator) {
            this.orderCols.push(this.list.treeDecorator.appendTreeviewCol(this.titleRow));
        }
        else {
            this.list.filterCapability.appendEmptyCell();
            this.orderCols.push(this._appendRowIndexCol(this.titleRow));
        }
        
        if (this.list.$item.$cards && this.list.$item.$cards.$position == "inline") {
            this.list.filterCapability.appendEmptyCell();
            this.orderCols.push(this._appendCardViewCol(this.titleRow));
        }
        
        if (this.list.selector.useColumnSelector) {
            this.list.filterCapability.appendFlagCell();
            this.orderCols.push(this._appendRecordSelectorCol(this.titleRow));
        }
        if (!this.list.$item.$isMenuRecordHidden) {
            this.list.filterCapability.appendEmptyCell();
            this.orderCols.push(this._appendMenusBoxCol(this.titleRow));
        }
        
        //parseItems
        var $items = this.list.$item.$layout.$items;
        for (var ii = 0, jj = $items.length; ii < jj; ii++) {
            var $item = $items[ii];
            var $field = this.list.$fieldProperties[$item.$bind];
            if ($field && !$field.$isHidden) {
                this.orderCols.push(this.appendFieldCol(this.titleRow, $item, $field));
                this.list.filterCapability.appendFieldCell($item, $field);
            }
        }
    },
    
    _appendCol: function(){
        return {
            titleCell: document.createElement("th"),
            groupBody: this._bodyColgroup.appendChild(document.createElement("col")),
            groupHead: this._headColgroup.appendChild(document.createElement("col"))
        };
    },
    setRowIndexVisibility: function(){
        if (this.cols && this.cols.$rowIndex) {
            if (this.list.$item.$isRowIndexVisible || this.list.$item.$selectByRowIndex) {
                this.cols.$rowIndex.widthValue = (this.list.$capability.reorder) ? 35 : 25;
            }
            else {
                this.cols.$rowIndex.widthValue = 0;
            }
            this.cols.$rowIndex.groupHead.style.width = this.cols.$rowIndex.groupBody.style.width = this.cols.$rowIndex.widthValue + "px";
        }
    },
    _appendRowIndexCol: function(slot){
        var col = this.cols.$rowIndex = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        slot.appendChild(col.titleCell);
        this.setRowIndexVisibility();
        return col;
    },
    _appendCardViewCol: function(slot){
        var col = this.cols.$cards = this._appendCol();
        col.groupHead.style.width = col.groupBody.style.width = (col.widthValue = 25) + "px";
        col.slot = slot;
        col.titleCell.className = this.gridCss.title + " s-list-cards-cell-opener";
        var opener = document.createElement("a");
        opener.className = "s-cardview-opener-all s-close";
        slot.appendChild(col.titleCell).appendChild(opener);
        return col;
    },
    _appendRecordSelectorCol: function(slot){
        var col = this.cols.$recordSelector = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        this.list.selector.appendToTitle(slot.appendChild(col.titleCell));
        col.widthValue = this.list.selector.getWidth();
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        return col;
    },
    _appendMenusBoxCol: function(slot){
        var col = this.cols.$menusBox = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title + " s-list-title-actions";
        slot.appendChild(col.titleCell);
        col.$quickActions = {};
        col.widthValue = col.width = 0;
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        return col;
    },
    setMenusBoxCol: function($quickAction, add, width){
        var col = this.cols.$menusBox;
        if (add) {
            if (!col.$quickActions[$quickAction]) {
                col.$quickActions[$quickAction] = true;
                col.widthValue = (col.width += width);
                col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
            }
        }
        else {
            if (!$quickAction) {
                col.$quickActions = {};
                col.widthValue = col.width = 0;
                col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
            }
            else {
                if (col.$quickActions[$quickAction]) {
                    delete col.$quickActions[$quickAction];
                    col.widthValue = (col.width -= width);
                    col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
                }
            }
        }
    },
    
    drawBuilder: function(){
        var $skin = this.list.$skin = this.list.$item.$skin || this.$defaultSkin;
        this.gridCss = {
            title: $skin + "-title-cell",
            cell: $skin + "-cell",
            rowIndex: $skin + "-cell " + $skin + "-row-index"
        };
        if (this.list.$item.$selectByRowIndex) {
            this.gridCss.rowIndex += " s-list-row-index-selector";
        }
        this.cardBuilder = new GridCardBuilder();
        this.cardBuilder.load(this);
        
        this.list.applyDesignMetaData(this.list.$item, false);
        this.list.setState(this.list.$field);
        this.list.helper.parseCapabilities(this.list);
        this._toggleDataList(true);
        this.list.applyCapabilities();
        this._bodyTable.style.display = "";
    },
    
    dispose: function(){
        if (this.list && this.list.filterCapability) {
            this.list.filterCapability.removeQuickFilter();
        }
        if (this.cardBuilder) {
            this.cardBuilder.dispose();
        }
        
        if (this.scroller) {
            document.controller.disposeObject(this.scroller);
        }
        if (this.colResizer) {
            document.controller.disposeObject(this.colResizer);
        }
        this.cardBuilder = this.colResizer = this.cardBuilder = this.list = this.emptyData = this.scroller = null;
    }
});
