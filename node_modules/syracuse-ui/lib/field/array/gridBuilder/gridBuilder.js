"use strict";
var helpers = require('syracuse-core/lib/helpers');
var FilterRecord = require("syracuse-ui/lib/field/array/filter/filterRecord").FilterRecord;
var GridRecord = require('./gridRecord').GridRecord;
var ColResizer = require('./colResizer').ColResizer;
var Scroller = require('./scroller').Scroller;

function GridBuilder() {}

exports.GridBuilder = helpers.defineClass(GridBuilder, null, {
	initialize: function() {
		this.$defaultSkin = "s-" + this.list.$item.$format;
		this.RecordClass = GridRecord;
		this.list.$item.$isTopLabelAlignment = true;

		this.$complexBinds = [];
		this.$colBinds = [];
		var $binds = Object.keys(this.list.$fields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var $field = this.list.$fields[$bind];
			if (!$field.$isExcluded) {
				switch ($field.$type) {
					case "application/x-array":
					case "application/x-object":
					case "text/rtf":
					case "text/html":
						this.$complexBinds.push($bind);
						break;
					default:
						this.$colBinds.push($bind);
						break;
				}
			}
		}

		if (!this.list.$item.$layout) {
			this.list.$item.$layout = {};
		}
		var $items = this.list.$item.$layout.$items;
		if (!$items) {
			$items = this.list.$item.$layout.$items = [];
			for (var ii = 0, jj = this.$colBinds.length; ii < jj; ii++) {
				$items.push({
					$bind: this.$colBinds[ii]
				});
			}
		}
		var ii = 0,
			jj = $items.length;
		while (ii < jj) {
			var $item = $items[ii];
			if ($item && $item.$bind) {
				if (this.$colBinds.indexOf($item.$bind) < 0) {
					$items.splice(ii, 1);
					jj = $items.length;
					continue;
				}
			}
			ii++;
		}
		if (this.list.$item.$cards) {
			switch (this.list.$item.$cards.$position) {
				case "popup":
					this.list.$item.$popupCard = this.list.$item.$cards;
					delete this.list.$item.$popupCard.$position;
					delete this.list.$item.$cards;
					break;
				case "inline":
					if (!(this.list.$item.$cards.$layout && this.list.$item.$cards.$layout.$layoutType == "tabs")) {
						this.list.$item.$inlineCard = this.list.$item.$cards;
						delete this.list.$item.$inlineCard.$position;
					}
					delete this.list.$item.$cards;
					break;
				default:
					if (this.list.$item.$selectMode === undefined) {
						this.list.$item.$selectMode = "row";
					}
					break;
			}
		}
		this.$popupCard = this.list.$item.$popupCard;
		if (this.$popupCard) {
			this.list.loadPopupCardBuilder();
		}
		this.$inlineCard = this.list.$item.$inlineCard;
		if (!this.$inlineCard && this.$complexBinds.length) {
			this.$inlineCard = {
				$layout: {
					$layoutType: "tabs",
					$items: []
				}
			};
			for (var ii = 0, jj = this.$complexBinds.length; ii < jj; ii++) {
				var $bind = this.$complexBinds[ii];
				var $field = this.list.$fields[$bind];
				var item = {
					$bind: $bind,
					$isTitleHidden: true
				};
				// adding $item properties (necessary for job viewer diagnose stacktrace view)
				if ($field.$item) {
					if ($field.$item.$isEditMode != undefined) {
						item.$isEditMode = $field.$item.$isEditMode;
					}
					if ($field.$item.$isTitleRowHidden != undefined) {
						item.$isTitleRowHidden = $field.$item.$isTitleRowHidden;
					}
					if ($field.$item.$isPagerHidden != undefined) {
						item.$isPagerHidden = $field.$item.$isPagerHidden;
					}
					if ($field.$item.$isQuickDesignerEnabled != undefined) {
						item.$isQuickDesignerEnabled = $field.$item.$isQuickDesignerEnabled;
					}
					if ($field.$item.$isMenuRecordHidden != undefined) {
						item.$isMenuRecordHidden = $field.$item.$isMenuRecordHidden;
					}
				}
				this.$inlineCard.$layout.$items.push({
					$category: "section",
					$title: $field.$shortTitle || $field.$title || ("( " + $bind + " )"),
					$layout: {
						$items: [item]
					}

				});
			}
		}
	},
	findColIndex: function(col, $bind) {
		for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
			if ($bind) {
				if (this.orderCols[ii].$bind == $bind) {
					return ii;
				}
			} else {
				if (this.orderCols[ii] == col) {
					return ii;
				}
			}

		}
		return -1;
	},
	findColItem: function($bind) {
		for (var ii = 0, jj = this.list.$item.$layout.$items.length; ii < jj; ii++) {
			if (this.list.$item.$layout.$items[ii].$bind == $bind) {
				return ii;
			}
		}
		return -1;
	},
	onColumnResized: function(column) {
		var $items = this.list.$item.$layout.$items;
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			if ($items[ii].$bind == column.$bind) {
				$items[ii].$width = column.widthValue + "px";
				this.notifyAuthoring();
				break;
			}
		}
	},
	reorderCells: function(record, targetIndex, sourceIndex, dropAtEnd) {
		var children = record.dataRow.childNodes;
		var targetCell = children[targetIndex];
		var sourceCell = children[sourceIndex];
		targetCell.parentNode.insertBefore(sourceCell, dropAtEnd ? targetCell.nextSibling : targetCell);
	},
	reorderColumns: function(colSource, colTarget, dropAtEnd) {
		var sourceIndex = this.findColIndex(colSource);
		if (sourceIndex >= 0) {
			var targetIndex = this.findColIndex(colTarget);
			this.orderCols.splice(sourceIndex, 1);
			var newSourceIndex = this.findColIndex(colTarget);
			if (dropAtEnd) {
				newSourceIndex++;
			}
			this.orderCols.splice(newSourceIndex, 0, colSource);

			var $sourceItem = this.list.$item.$layout.$items.splice(this.findColItem(colSource.$bind), 1)[0];
			var $newSourceItem = this.findColItem(colTarget.$bind);
			if (dropAtEnd) {
				$newSourceItem++;
			}
			this.list.$item.$layout.$items.splice($newSourceItem, 0, $sourceItem);

			if (this.list.filterRecord) {
				this.reorderCells(this.list.filterRecord, targetIndex, sourceIndex, dropAtEnd);
			}
			colTarget.groupBody.parentNode.insertBefore(colSource.groupBody, dropAtEnd ? colTarget.groupBody.nextSibling : colTarget.groupBody);
			colTarget.groupHead.parentNode.insertBefore(colSource.groupHead, dropAtEnd ? colTarget.groupHead.nextSibling : colTarget.groupHead);
			colTarget.titleCell.parentNode.insertBefore(colSource.titleCell, dropAtEnd ? colTarget.titleCell.nextSibling : colTarget.titleCell);
			for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
				var record = this.list.records[ii];
				this.reorderCells(record, targetIndex, sourceIndex, dropAtEnd);
			}
		}
		this.scroller.validateFixedColumns();
		this.onWindowResize();
		this.notifyAuthoring();
	},
	notifyAuthoring: function() {
		if (this.list.page.designer) {
			this.list.page.designer.notifyUpdate();
		}
	},
	removeColumn: function($bind, designing) {
		var index = this.findColIndex(null, $bind);
		if (index >= 0) {
			var col = this.orderCols.splice(index, 1)[0];
			this.list.$item.$layout.$items.splice(this.findColItem($bind), 1);
			document.site.removeDomChild(col.groupBody);
			document.site.removeDomChild(col.groupHead);
			document.site.removeDomChild(col.titleCell);
			if (this.list.filterRecord) {
				document.site.removeDomChild(this.list.filterRecord.dataRow.childNodes[index]);
			}
			for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
				var record = this.list.records[ii];
				document.site.removeDomChild(record.dataRow.childNodes[index]);
			}
			this.onWindowResize();
		}
	},

	emptyBody: function(addEmptySlot, onFetch) {
		this._hasCardview = false;
		document.site.emptyDom(this.body);
		if (addEmptySlot) {
			var cell = document.createElement("td");
			cell.className = this.list.$skin + "-empty-slot";
			if (!this.list.isClientFetch && onFetch) {
				cell.textContent = this.list.localize.flWaitingData;
			} else {
				cell.textContent = this.list.$item.$noDataText || this.list.localize.flNoData;
			}
			cell.setAttribute("colspan", this.orderCols.length);
			(this.list.emptyDataItem = document.createElement("tr")).appendChild(cell);
			this.body.appendChild(this.list.emptyDataItem);
		}
	},

	applyDesignMetaData: function(metaData, designing) {
		var resize;
		if (metaData.$isTitleRowHidden !== undefined) {
			this.list.$item.$isTitleRowHidden = metaData.$isTitleRowHidden;
			if (this.titleRow) {
				this.titleRow.style.display = this.list.$item.$isTitleRowHidden ? "none" : "";
				resize = true;
			}
		}
		if ((metaData.$fixedBodyHeight !== undefined) || (metaData.$fitContainer !== undefined) || (metaData.$isPageHeightDocked !== undefined)) {
			if (metaData.$fixedBodyHeight !== undefined) {
				this.list.$item.$fixedBodyHeight = metaData.$fixedBodyHeight;
			}
			if (metaData.$fitContainer !== undefined) {
				this.list.$item.$fitContainer = metaData.$fitContainer;
			}
			if (metaData.$isPageHeightDocked !== undefined) {
				this.list.$item.$isPageHeightDocked = metaData.$isPageHeightDocked;
			}
			if (this.scroller) {
				this.scroller.setFixedBodyHeight(this.list.$item.$fixedBodyHeight);
			}
			resize = true;
		}
		if (designing) {
			if (metaData.$cardPosition !== undefined) {
				if (metaData.$cardPosition == "no" || metaData.$cardPosition == "inline") {
					delete this.list.$item.$cards;
					for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
						this.list.records[ii].removeOutCard();
					}
				} else {
					(this.list.$item.$cards = this.list.ensureCards(this.list.$item.$cards)).$position = metaData.$cardPosition;
					if (!this.list.selector || !this.list.selector.list) {
						if (this.list.$item.$selectMode === undefined) {
							this.list.$item.$selectMode = "row";
						}
						this.list.loadSelector();
					}
					if (this.list.records.length > 0) {
						var selectedRecord;
						if (this.list.selector.uuid !== undefined) {
							selectedRecord = this.list.recordsMap[this.list.selector.uuid];
						}
						if (!selectedRecord) {
							this.list.selector.select(this.list.records[0].$uuid, true);
						} else {
							selectedRecord.highlightSelection(true);
						}
					}
				}
				this.list.appendCardGraphSlots();
			}
		}
		if (resize) {
			this.onWindowResize();
		}
	},
	_setColumnTitle: function(col, $title) {
		var titleText = this.list.getLocalizedTitle($title || "");
		if (titleText.length > 1) {
			titleText = titleText.substr(0, 1).toUpperCase() + titleText.substr(1);
		}
		col.title.textContent = titleText;
		col.title.title = titleText;
		return titleText;
	},
	appendFieldCol: function(slot, $item, $field) {
		var col = this.cols[$item.$bind] = this._appendCol();
		col.$isHidden = $field.$isHidden;
		col.slot = slot;
		var isSortable;
		if ($field.$capabilities && ($field.$capabilities.indexOf("sort") >= 0)) {
			isSortable = true;
			col.title = this.list.sortCapability.appendSortLink(col, $item);
		} else {
			col.title = document.createElement("div");
			col.title.className = this.list.$skin + "-title-label";
		}
		var $title;
		if (this.globalMetaRecords && this.globalMetaRecords.$properties) {
			var $metaField = this.globalMetaRecords.$properties[$item.$bind];
			if ($metaField) {
				$title = $metaField.$title;
			}

		}
		var titleText = this._setColumnTitle(col, $title || $field.$shortTitle || $field.$title);

		col.titleWrapper = document.createElement("div");
		col.titleWrapper.className = "s-grid-title-wrap";
		col.titleWrapper.appendChild(col.title);
		col.resizer = document.createElement("div");
		col.resizer.className = "s-grid-title-resizer";
		col.titleWrapper.appendChild(col.resizer);
		col.titleCell.syraFieldBind = $item.$bind || "";
		col.titleCell.className = this.gridCss.title;
		col.titleCell.appendChild(col.titleWrapper);
		if (col.$isHidden) {
			col.groupHead.style.display = col.groupBody.style.display = col.titleCell.style.display = "none";
		} else {
			col.groupHead.style.display = col.groupBody.style.display = col.titleCell.style.display = "";
		}
		slot.appendChild(col.titleCell);

		//set colgroup
		this.maxMinWidth = 0;
		var width = $item.$width || $field.$width;
		if (width) {
			col.widthValue = parseInt((width + "").replace("px", ""), 10);
		} else {
			col.widthValue = document.site.getFieldWidth($field, false, titleText.length, isSortable);
			col.widthValue += 8; //for padding
			var widthAdded = 0;
			if ($field.$capabilities && ($field.$capabilities.indexOf("filter") >= 0)) {
				widthAdded += 18;
			}
			if (this.list.$isEditMode) {
				if ($field.$item ? ($field.$item.$links || $field.$item.$actions) : ($field.$links || $field.$actions)) {
					widthAdded += 18;
				}
				if ($field.$type == "application/x-choice" || $field.$type == "application/x-date" || $field.$type == "application/x-time") {
					widthAdded += 18;
				}
				if ($field.$links) {
					if ($field.$type != "application/x-reference" && $field.$links.$lookup) {
						col.widthValue;
						widthAdded += 18;
					}
					if ($field.$links.$tunnel) {
						col.widthValue += 18;
					}
				}
			}
			if (widthAdded) {
				if (isSortable) {
					widthAdded -= 16; //space added for sort
				}
				col.widthValue += widthAdded;
			}
		}
		//col.realWidth = 
		col.widthValue = Math.max(40, col.widthValue);
		col.groupHead.style.width = col.groupBody.style.width = (col.realWidth = (col.$isHidden ? 0 : col.widthValue)) + "px";
		col.groupBody.setAttribute("data-s-bind", $item.$bind);
		col.$bind = $item.$bind;
		col.$item = $item;
		col.$isFixed = col.$item.$isFixed;
		if (col.$isFixed === undefined) {
			col.$isFixed = col.$item.$isFixed = $field.$isFixed;
		}
		return col;
	},
	_makeTitleRow: function() {
		this.orderCols = [];
		this.list.ensureGlobalMetaRecord(true);
		if (this.titleRow) {
			document.site.emptyDom(this.titleRow);
		} else {
			this.titleRow = this._thead.appendChild(document.createElement("tr"));
		}
		document.site.emptyDom(this.bodyColgroup);
		document.site.emptyDom(this._headColgroup);
		this.titleRow.style.display = this.list.$item.$isTitleRowHidden ? "none" : "";
		if (this.list.$item.$isQuickFilter) {
			// && this.list.$facet != "$details"  tri client
			if (this.list.filterRecord) {
				this.list.filterRecord.drawBox();
			} else {
				(this.list.filterRecord = new FilterRecord()).loadRecord(this.list);
			}
		}

		if (this.list.treeDecorator) {
			this.orderCols.push(this.list.treeDecorator.appendTreeviewCol(this.titleRow));
		} else {
			if (this.list.filterRecord) {
				this.list.filterRecord.appendEmptyCell();
			}
			this.orderCols.push(this._appendRowIndexCol(this.titleRow));
		}

		if (this.$inlineCard) {
			if (this.list.filterRecord) {
				this.list.filterRecord.appendEmptyCell();
			}
			this.orderCols.push(this._appendInlineCardCol(this.titleRow));
		}

		if (this.list.selector.useColumnSelector) {
			if (this.list.filterRecord) {
				this.list.filterRecord.appendFlagCell();
			}
			this.orderCols.push(this._appendRecordSelectorCol(this.titleRow));
		}
		if (!this.list.$item.$isMenuRecordHidden) {
			if (this.list.filterRecord) {
				this.list.filterRecord.appendEmptyCell();
			}
			this.orderCols.push(this._appendMenusBoxCol(this.titleRow));
		}

		var $items = this.list.$item.$layout.$items;
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			var $field = this.list.$fields[$item.$bind];
			if ($field && !$field.$isExcluded) {
				var col = this.appendFieldCol(this.titleRow, $item, $field);
				this.orderCols.push(col);
				if (this.list.filterRecord) {
					this.list.filterRecord.appendFieldCell(col, $field);
				}
			}
		}
	},
	applyMetaDataRecords: function($metaRecord) {
		if ($metaRecord && $metaRecord.$properties) {
			var $binds = Object.keys($metaRecord.$properties);
			var resize;
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $metaField = $metaRecord.$properties[$bind];
				var col = this.cols[$bind];
				if (col) {
					if ($metaField.$title !== undefined) {
						this._setColumnTitle(col, $metaField.$title);
					}
					if ($metaField.$isHidden !== undefined) {
						resize = true;
						var display = (col.$isHidden = $metaField.$isHidden) ? "none" : "";
						var index = this.findColIndex(col);
						if (col.titleCell) {
							col.titleCell.style.display = display;
						}
						col.groupHead.style.display = col.groupBody.style.display = display;
						for (var mm = 0, kk = this.list.records.length; mm < kk; mm++) {
							var record = this.list.records[mm];
							record.dataRow.childNodes[index].style.display = display;
						}
						if (this.list.filterRecord) {
							this.list.filterRecord.dataRow.childNodes[index].style.display = display;
						}
					}
				}
			}
			if (resize) {
				this.onWindowResize();
			}
		}
	},
	_appendCol: function() {
		return {
			titleCell: document.createElement("th"),
			groupBody: this.bodyColgroup.appendChild(document.createElement("col")),
			groupHead: this._headColgroup.appendChild(document.createElement("col"))
		};
	},
	setRowIndexVisibility: function() {
		if (this.cols && this.cols.$rowIndex) {
			if (this.list.$item.$isRowIndexVisible || this.list.$item.$selectByRowIndex) {
				this.cols.$rowIndex.widthValue = (this.list.$capability && this.list.$capability.reorder) ? 35 : 25;
			} else {
				this.cols.$rowIndex.widthValue = 0;
			}
			this.cols.$rowIndex.groupHead.style.width = this.cols.$rowIndex.groupBody.style.width = this.cols.$rowIndex.widthValue + "px";
		}
	},
	_appendRowIndexCol: function(slot) {
		var col = this.cols.$rowIndex = this._appendCol();
		col.slot = slot;
		col.titleCell.className = this.gridCss.title;
		slot.appendChild(col.titleCell);
		this.setRowIndexVisibility();
		return col;
	},
	_appendInlineCardCol: function(slot) {
		var col = this.cols.$inlineCard = this._appendCol();
		col.groupHead.style.width = col.groupBody.style.width = (col.widthValue = 25) + "px";
		col.slot = slot;
		col.titleCell.className = this.gridCss.title + " s-grid-inlinecard-cell-picker";
		var opener = document.createElement("a");
		opener.syraOpenAll = true;
		opener.setAttribute("data-s-picker", "grid-inlinecard");
		opener.className = "s-grid-inlinecard-picker-all s-close";
		slot.appendChild(col.titleCell).appendChild(opener);
		return col;
	},
	_appendRecordSelectorCol: function(slot) {
		var col = this.cols.$recordSelector = this._appendCol();
		col.slot = slot;
		col.titleCell.className = this.gridCss.title;
		this.list.selector.appendToTitle(slot.appendChild(col.titleCell));
		col.widthValue = this.list.selector.getWidth();
		col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
		return col;
	},
	_appendMenusBoxCol: function(slot) {
		var col = this.cols.$menusBox = this._appendCol();
		col.slot = slot;
		col.titleCell.className = this.gridCss.title + " s-list-title-actions";
		slot.appendChild(col.titleCell);
		col.$quickActions = {};
		col.widthValue = col.width = 0;
		col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
		return col;
	},
	setMenusBoxCol: function($quickAction, add, width) {
		var col = this.cols.$menusBox;
		if (add) {
			if (!col.$quickActions[$quickAction]) {
				col.$quickActions[$quickAction] = true;
				col.widthValue = (col.width += width);
				col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
			}
		} else {
			if (!$quickAction) {
				col.$quickActions = {};
				col.widthValue = col.width = 0;
				col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
			} else {
				if (col.$quickActions[$quickAction]) {
					delete col.$quickActions[$quickAction];
					col.widthValue = (col.width -= width);
					col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
				}
			}
		}
	},
	drawBuilder: function() {
		this.list.$skin = this.list.$item.$skin || this.$defaultSkin;
		this.gridCss = {
			title: this.list.$skin + "-title-cell",
			cell: this.list.$skin + "-cell",
			rowIndex: this.list.$skin + "-cell " + this.list.$skin + "-row-index"
		};
		if (this.list.$item.$selectByRowIndex) {
			this.gridCss.rowIndex += " s-list-row-index-selector";
		}
		this.list.tableSlot = document.createElement("div");
		this.list.tableSlot.className = "s-grid-slot";
		this.list._core.appendChild(this.list.tableSlot);
		this.list.appendCardGraphSlots();

		this.list.applyDesignMetaData(this.list.$item, false);
		this.list.setState(this.list.$field);
		this.orderCols = [];
		this.cols = {};
		this.prevCols = {};
		this._headTable = document.createElement("table");
		this._headTable.style.display = "none";
		this._headTable.className = this.list.$skin + "-table-head";
		this._headTable.setAttribute("cellspacing", "0");
		this._headTable.setAttribute("cellpadding", "0");

		this.bodyTable = document.createElement("table");
		this.bodyTable.style.display = "none";
		this.bodyTable.className = this.list.$skin + "-table-body";
		this.bodyTable.setAttribute("cellspacing", "0");
		this.bodyTable.setAttribute("cellpadding", "0");

		this.bodyColgroup = this.bodyTable.appendChild(document.createElement("colgroup"));
		this._headColgroup = this._headTable.appendChild(document.createElement("colgroup"));
		this._thead = this._headTable.appendChild(document.createElement("thead"));

		this.scroller = new Scroller();
		this.scroller.load(this);
		this.scroller.drawSlots(this.list.tableSlot, this._headTable, this.bodyTable);

		this.list.setSortCapability(true);
		this.body = this.bodyTable.appendChild(document.createElement("tbody"));
		this._$$body = $(this.body);

		this.list.loadSelector();
		this._makeTitleRow();

		this.scroller.validateFixedColumns();
		this.colResizer = new ColResizer();
		this.colResizer.setResizable(this);
		this._headTable.style.display = "";
		this.list.applyCapabilities();
		this.bodyTable.style.display = "";
	},
	_getDisplayValueInput: function(inputField) {
		var found = "";
		if (inputField.$enum) { // not a string 
			for (var i = 0; i < inputField.$enum.length; i++) {
				if (inputField.$enum[i].$value === inputField.currentValue) {
					found = inputField.$enum[i].$title;
					break;
				}
			}
		} else {
			if (typeof inputField.currentValue === "object") {
				// not a simple string 
				found = inputField.currentValue.$value + " " + inputField.currentValue.$title;
			} else
			if (typeof inputField.currentValue === "string") {
				found = inputField.currentValue;
			}
		}
		return found;
	},
	getWidthOfInput: function(inputEl, div) {
		var value = this._getDisplayValueInput(inputEl);
		div.innerHTML = value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
		// var width = div.clientWidth  + 20;;
		var width = (div.scrollWidth !== 0 ? div.scrollWidth : div.offsetWidth) + 20;
		width = width < 30 ? 30 : width;
		width += inputEl.boxPickers ? inputEl.boxPickers.clientWidth : 0;
		width += (inputEl.menusBox && !inputEl.boxPickers) ? inputEl.menusBox.$$item[0].clientWidth + 2 : (inputEl.menusBox && inputEl.boxPickers) ? 2 : 0;
		div.innerHTML = "";
		return width;
	},

	fitToWidth: function() {
		var div = document.createElement("div");
		div.style.display = "inline-block";
		div.style.width = "auto";
		if (this.list.records && this.list.records.length) {
			var first = this.list.records[0];
			var s = first.menusBags && first.menusBags.length > 0 ? first.menusBags[0].$$item[0].clientWidth : 0;
			var currentSize = s;
			if (first.menuItems) {
				var item = Object.keys(first.menuItems);
				for (var j = 0; j < item.length; j++) {
					s = first.menuItems && first.menuItems.length > 0 ? first.menuItems[item[j]][0].$$item[0].clientWidth : 0;
					currentSize += s;
				}
			}
			var colSize = {};
			if (currentSize) {
				colSize['$menusBox'] = this.list.page.$isFusionPage ? currentSize : currentSize / 2;
			}
			document.body.appendChild(div);
			for (var i = 0; i < this.list.records.length; i++) {
				// get all field and 

				var record = this.list.records[i];
				// calcul for menusBags 
				var keys = Object.keys(record.idMap);
				for (var j = 0; j < keys.length; j++) {

					var item = record.idMap[keys[j]];
					if (item.$field) {
						if (colSize[item.$item.$bind]) {
							// get the max
							colSize[item.$item.$bind] = Math.max(this.getWidthOfInput(item, div), colSize[item.$item.$bind]);
						} else
							colSize[item.$item.$bind] = this.getWidthOfInput(item, div);
					} else {
						if (!colSize[item.$item.$bind])
							colSize[item.$item.$bind] = -1; // not change size 
					}
				}
			}
			document.body.removeChild(div);
			// check if we need to apply fit to width
			var colKey = Object.keys(this.cols);
			var isSame = true;
			if (Object.keys(this.prevCols).length != 0) {
				for (var i = 0; i < colKey.length && isSame; i++) {
					if (colSize[colKey[i]] && this.cols[colKey[i]]) {
						isSame = colSize[colKey[i]] === this.cols[colKey[i]].widthValue;
					}
				}
			} else {
				isSame = false; // not same 
			}

			//
			// parcours colsgroupe for header and body and resize 
			for (var i = 0; i < colKey.length; i++) {
				var size;
				if (isSame) {
					if (this.prevCols[colKey[i]]) {
						size = this.prevCols[colKey[i]].widthValue; // affect last value 
					}
				} else {
					size = colSize[colKey[i]];
				}
				if (this.cols[colKey[i]] && colSize[colKey[i]] !== -1 && size) {
					this.cols[colKey[i]].groupHead.style.width = size + "px";
					this.cols[colKey[i]].groupBody.style.width = size + "px";
					if (!isSame) { // if we apply redim to width we need to save old value
						this.prevCols[colKey[i]] = {
							widthValue: this.cols[colKey[i]].widthValue, // save prev value before apply fit to Width
						};
					}
					this.cols[colKey[i]].widthValue = size;
					this.cols[colKey[i]].realWidth = size;
				}
			}
			this.onWindowResize();
		}
	},
	onInlineCardOpenerClick: function(opener) {
		var show = opener.className.indexOf("s-close") >= 0;
		var $uuids = opener.syraOpenAll ? Object.keys(this.list.recordsMap) : [document.controller.findArticle($(opener)).$uuid];
		for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
			var record = this.list.recordsMap[$uuids[ii]];
			record.toggleInlineCard(show);
		}
		document.site.toggleClass(opener, "s-close", !show);
	},
	onWindowResize: function() {
		if (!this.disposed && this.scroller) {
			this.scroller.onWindowResize();
			if (this._hasCardview && this.list.records) {
				for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
					this.list.records[ii].resizeCardItems();
				}
			}
		}
	},
	dispose: function() {
		if (this.list) {
			if (this.list.filterRecord) {
				this.list.removeRecord(this.list.filterRecord, true);
				this.list.filterRecord = null;
			}
		}
		if (this.scroller) {
			this.scroller.dispose();
		}
		if (this.colResizer) {
			this.colResizer.dispose();
		}
		this.body = this.bodyColgroup = this.bodyTable = this._headColgrou = this._headTable = this._thead = null;
		this._headColgroup = this.cols = this.gridCss = this.orderCols = this.titleRow = this.prevCols = null;
		this.colResizer = this.list = this.emptyData = this.scroller = null;
	}
});