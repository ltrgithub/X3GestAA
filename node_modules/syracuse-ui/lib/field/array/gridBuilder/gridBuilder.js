"use strict";
var FilterRecord = require("./filter/filterRecord").FilterRecord;
var colResizer = require("./tools/colResizer");
var tableHelper = require("./tableHelper");

function _addRowIndexCol(list) {
	if (list.$item.$isRowIndexVisible || list.$capability.reorder || list.$item.$selectByRowIndex) {
		list.fomatter.filter.addCell(list);
		var col = list.cols.$rowIndex = list.scrollTable.addCol();
		col.titleCell.className = list.cssTileCell;
		list.orderCols.push(col);
		col.colWidth = list.$capability.reorder ? 35 : 25;
	}
}

function _addMenusCol(list, slot) {
	var col = list.cols.$menus = list.scrollTable.addCol();
	col.titleCell.className = list.cssTileCell + " s-list-title-actions";
	col.colWidth = 0;
	list.orderCols.push(col);
	return col;
}


function _setColumnTitle(list, col, $title) {
	var text = list.getLocalizedTitle($title || "");
	if (text.length > 1) {
		text = text.substr(0, 1).toUpperCase() + text.substr(1);
	}
	syra_menus.setButtonTitle(col.titleCell, text);
	return text;
}

function _addFieldCol(list, $item, $field) {
	var col = list.cols[$item.$bind] = list.scrollTable.addCol();
	col.titleCell.syrainout = list.id;
	col.titleCell.syraCell = col;
	col.$isHidden = $field.$isHidden;
	col.titleCell.className = list.cssTileCell;
	//avoid sort for tree
	if (!list.treeDecorator && $field.$capabilities && ($field.$capabilities.indexOf("sort") >= 0)) {
		col.isSortable = true;
		col.titleCell.syraOnClick = "onSortClick";
		col.titleCell.syraValue = $item.$bind;
		col.sortLink = col.titleCell;
		col.titleCell.className += " s-sort";
	}
	var $title;
	if (list.globalMetaRecords && list.globalMetaRecords.$properties) {
		var $metaField = list.globalMetaRecords.$properties[$item.$bind];
		if ($metaField) {
			$title = $metaField.$title;
		}

	}
	col.titleText = _setColumnTitle(list, col, $title || $field.$shortTitle || $field.$title);
	col.titleCell.syraOnMouseId = col.titleCell.syraResizerColId = col.titleCell.syraDragSpot = col.titleCell.syraReorderColId = list.id;
	col.titleCell.syra_field_bind = $item.$bind || "";
	col.titleCell.syraDragSpot = list.id;

	var display = col.$isHidden ? "none" : "";
	col.groupHead.style.display = display;
	col.groupBody.style.display = display;
	col.titleCell.style.display = display;
	col.titleCell.setAttribute("data-s-q-test-bind", $item.$bind);
	col.groupBody.setAttribute("data-s-bind", $item.$bind);
	col.$bind = $item.$bind;
	col.$item = $item;
	syra_list.grid.columnFitter.setFieldWidth(list, col, $field);

	col.$isFixed = col.$item.$isFixed;
	if (col.$isFixed === undefined && $field.$isFixed !== undefined) {
		col.$isFixed = col.$item.$isFixed = $field.$isFixed;
	}
	if (col.$isFixed) {
		col.titleCell.className += " s-grid-col-fixed";
		list.lastColFixed = col;
	} else {
		delete col.$item.$isFixed;
	}
	list.orderCols.push(col);
	list.filterRecord && list.fomatter.filter.addFieldCell(list, col, $field);
	return col;
}

exports.addRowCardCol = function(list, before) {
	var col = list.cols.rowCard = list.scrollTable.addCol();
	col.colWidth = 25;
	col.titleCell.className = list.cssTileCell + " s-grid-rowcard-cell-picker";
	var opener = syra_menus.addIconButton(syra_local.flShowAllCards, "s-grid-rowcard-picker-all s-fonticon-btn", "onRowCardClick");
	list.cardDecorator.setRowCardOpenerIcon(opener, false);
	col.titleCell.appendChild(opener);
	if (before) {
		list.scrollTable.titleRow.insertBefore(col.titleCell, list.scrollTable.titleRow.firstChild.nextSibling);
		list.orderCols.splice(1, 0, col);
	} else {
		list.orderCols.push(col);
	}
	return col;
};

function _addTreeviewCol(list) {
	var col = list.cols.$treeview = list.scrollTable.addCol();
	col.isTreeviewCol = true;
	col.titleCell.className = list.treeDecorator.cssNode + "-title-cell";
	list.orderCols.push(col);
};

exports.addTitleRow = function(list) {
	list.orderCols = [];
	list.ensureGlobalMetaRecord(true);
	if (list.$item.$isQuickFilter) {
		// && list.$facet != "$details"  tri client
		if (list.filterRecord) {
			list.filterRecord.drawBox();
		} else {
			(list.filterRecord = new FilterRecord()).loadRecord(list);
		}
	}
	if (list.treeDecorator) {
		_addTreeviewCol(list);
	} else {
		_addRowIndexCol(list);
	}

	if (list.cardDecorator.isRowCardMode) {
		list.fomatter.filter.addCell(list);
		exports.addRowCardCol(list);
	}

	if (list.selector.useColumnSelector) {
		if (list.filterRecord) {
			var td = document.createElement("td");
			td.className = "s-list-filter-cell s-filter-popup-picker";
			td.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-flag.png')";
			list.filterRecord.dataRow.appendChild(td);
		}
		list.orderCols.push(list.selector.appendToGridHeader(list.cols.$recordSelector = list.scrollTable.addCol()));
	}
	if (!list.$item.$isMenuRecordHidden) {
		list.fomatter.filter.addCell(list);
		_addMenusCol(list);
	}

	var $items = list.$item.$layout.$items;
	list.lastColFixed = null;

	var isRowVisible, isFilterVisible;
	for (var ii = 0, jj = $items.length; ii < jj; ii++) {
		var $item = $items[ii];
		var $field = list.$fields[$item.$bind];
		if ($field && !$field.$isExcluded) {
			var col = _addFieldCol(list, $item, $field);
			if (!isRowVisible && col.titleText) {
				isRowVisible = true;
			}
			if (!col.$isHidden) {
				isFilterVisible = true;
			}

		}
	}
	if (list.filterRecord) {
		list.filterRecord.domItem.style.display = isFilterVisible ? "" : "none";
	}
	if (list.lastColFixed) {
		list.lastColFixed.titleCell.className += " s-grid-col-fixed-last";
	}
	list.scrollTable.headSlot.style.display = isRowVisible ? "" : "none";
};

exports.showHeaderCorner = function(list) {
	var show = list.scrollTable.bodySlot.scrollHeight > (list.scrollTable.bodySlot.clientHeight + 1);
	if (show) {
		list.scrollTable.hscrollBody.style.width = (list.colsWidth + 17) + "px";
		if (!list._headerCorner) {
			list._headerCorner = document.createElement("div");
			list._headerCorner.className = list.$skin + "-head-corner";
			list.scrollTable.headSlot.parentNode.appendChild(list._headerCorner);
		}
		list._headerCorner.style.height = list.scrollTable.headSlot.clientHeight + "px";
		list._headerCorner.style.display = "";
	} else {
		if (list._headerCorner) {
			list._headerCorner.style.display = "none";
		}
	}
	list.scrollTable.headSlot.style[syra_site.isDocumentRTL ? "marginLeft" : "marginRight"] = show ? "17px" : "";
};


exports.applyMetaDataRecords = function(list, $meta) {
	var $binds = Object.keys($meta.$properties);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $bind = $binds[ii];
		var $metaField = $meta.$properties[$bind];
		var col = list.cols[$bind];
		if (col) {
			if ($metaField.$title !== undefined) {
				_setColumnTitle(list, col, $metaField.$title);
			}
			if ($metaField.$isHidden !== undefined) {
				var display = (col.$isHidden = $metaField.$isHidden) ? "none" : "";
				var index = list.orderCols.indexOf(col);
				if (col.titleCell) {
					col.titleCell.style.display = display;
				}
				col.groupHead.style.display = col.groupBody.style.display = display;
				for (var mm = 0, kk = list.records.length; mm < kk; mm++) {
					list.records[mm].dataRow.childNodes[index].style.display = display;
				}
				if (list.filterRecord) {
					list.filterRecord.dataRow.childNodes[index].style.display = display;
				}
			}
		}
	}
};

function _findEventCol(list, event) {
	var target = event.target;
	while (!target.syra_field_bind) {
		target = target.parentNode;
	};
	return list.cols[target.syra_field_bind];
}

exports.onItemInOut = function(list, onEnter, event, target) {
	if (target.syraCell) {
		var col = _findEventCol(list, event);
		if (list.isColReordering) {
			if (syra_dd.ddAgent && syra_dd.ddAgent.onColumnHeaderEnterLeave) {
				syra_dd.ddAgent.onColumnHeaderEnterLeave(target.syraCell, onEnter);
			}
		}
		if (onEnter) {
			if (col.titleCell.syraResizerColId) {
				col.rect = col.titleCell.getBoundingClientRect();
			}
			if (col.titleCell.title) {
				col.titleCell.syraTipTitle = col.titleCell.title;
				col.titleCell.title = "";
				if (col.titleCell.clientWidth != col.titleCell.scrollWidth) {
					syra_site.siteFunctions.toggleTitleTip(col.titleCell.syraTipTitle, col.titleCell);
				}
			}
		} else {
			if (col.titleCell.syraTipTitle) {
				col.titleCell.title = col.titleCell.syraTipTitle;
			}
			syra_site.siteFunctions.toggleTitleTip();
		}
	}
};

exports.onMouseMove = function(list, event) {
	var col = _findEventCol(list, event);
	col && colResizer.setCursor(col, event);
	return true;
};

exports.isDraggable = function(list, target, event) {
	if (target.syraResizerColId == list.id) {
		var col = _findEventCol(list, event);
		if (colResizer.isDraggable(list, col, event)) {
			event.syraRetValue = false;
			return;
		}
	}
	if (target.syraReorderColId == list.id) {
		syra_dd.dropableItem = {
			list: list,
			reordeCol: _findEventCol(list, event)
		};
		syra_dd.start(list, list.fomatter.colsReorder.DDAgent, list.scrollTable.titleRow);
		event.syraRetValue = false;
		return;
	} else {
		if (list.addSlotResizer(target, event)) {
			return;
		} else {
			return list.isReorderRecordDraggable(target, event);
		}
	}

	return null;
};

exports.createCardRow = function(record) {
	var card = {
		cell: document.createElement("td"),
		row: document.createElement("tr"),
		contentSlot: document.createElement("div")
	};
	card.cell.className = record.boxParent.$skin + "-cards-cell";
	card.cell.setAttribute("colspan", record.list.scrollTable.cols.length);
	card.cell.appendChild(card.contentSlot);
	card.row.appendChild(card.cell);
	record.dataRow.parentNode.insertBefore(card.row, record.dataRow.nextSibling);
	return card;
};

//"s-grid-rowcard-slot";

exports.createTable = function(list, isScrollable) {
	return tableHelper.create(list, isScrollable);
};

exports.dispose = function(list) {
	list._headerCorner = null;
};