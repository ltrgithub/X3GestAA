"use strict";
var helpers = require('syracuse-core/lib/helpers');
var GridRecord = require('./gridRecord').GridRecord;
var FilterRecord = require("./filter/filterRecord").FilterRecord;
var CardDecorator = require('./card/cardDecorator').CardDecorator;
var _filterBuilder = require('./filter/filterBuilder');
var _colResizer = require("./tools/colResizer");
var _colsReorderer = require('./tools/colsReorderer');
var _quickEditBuilder = require("./tools/quickEditBuilder");
var _popupCardBuilder = require('./card/popupCardBuilder');
var _preferencesHelper = require("syracuse-ui/lib/field/array/tools/preferencesHelper");
var _sideButtons = require('./sideButtons');
var GridTable = require('./gridTable').GridTable;

//"s-grid-rowcard-slot";

function _appendRowIndexCell(record, row) {
	var btn = record.rowIndexBtn = document.createElement("td");
	var css = record.list.cssRowIndex;
	if (record.list.$item.$selectByRowIndex) {
		css += " s-list-row-index-selector";
		btn.syraOnClick = "onSelectorClick";
	}
	if (record.list.$capability.reorder) {
		record.reorderBtn = record.rowIndexBtn;
		record.reorderBtn.syraReorderRecordId = record.list.id;
		css += " s-grid-record-reorder";
		record.rowIndexBtn.syraDragSpot = record.id;
	}
	btn.className = css;
	row.appendChild(btn);
	record.setRowIndex();
	return btn;
}

function Builder() {}


exports.Builder = helpers.defineClass(Builder, null, {
	initialize: function(list) {
		this.list = list;
		this.columnsMap = {};
		this.allColumns = [];
		this.popupCardBuilder = _popupCardBuilder;
	},
	findEventCol: function(event) {
		var target = event.target;
		while (!target.syra_field_bind) {
			target = target.parentNode;
		}
		return this.columnsMap[target.syra_field_bind];
	},
	endInitiallize: function() {
		this.list.$defaultSkin = "s-" + this.list.$item.$format;
		this.list.RecordClass = GridRecord;
		this.list.$item.$isTopLabelAlignment = true;

		this.list.$complexBinds = [];
		var $colBinds = [];
		var defined = [];
		var $binds = Object.keys(this.list.$fields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var $field = this.list.$fields[$bind];
			if (!$field.$isExcluded && !($field.$viewScope && $field.$viewScope == "popup")) {
				switch ($field.$type) {
					case "application/x-variant":
						//need support for later
						break;
					case "application/x-array":
					case "application/x-object":
					case "text/rtf":
					case "text/html":
						this.list.$complexBinds.push($bind);
						break;
					default:
						$colBinds.push($bind);
						defined.push($bind);
						break;
				}
			}
		}

		if (!this.list.$item.$layout) {
			this.list.$item.$layout = (this.list.$designing && this.list.$designing.grid && this.list.$designing.grid.$layout) || {};
		}
		//define default columns

		var $items = this.list.$item.$layout.$items;
		if (!$items) {
			$items = this.list.$item.$layout.$items = [];
			for (var ii = 0, jj = $colBinds.length; ii < jj; ii++) {
				$items.push({
					$bind: $colBinds[ii]
				});
			}
		} else {
			//check items for having only colbinds
			var ii = 0,
				jj = $items.length;
			while (ii < jj) {
				var $item = $items[ii];
				if ($item && $item.$bind) {
					if ($colBinds.indexOf($item.$bind) < 0) {
						$items.splice(ii, 1);
						jj = $items.length;
						continue;
					} else {
						defined.splice(defined.indexOf($item.$bind), 1);
					}
				}
				ii++;
			}
			for (var ii = 0, jj = defined.length; ii < jj; ii++) {
				$items.push({
					$bind: defined[ii]
				});
			}
		}
		_preferencesHelper.onInitialize(this.list);
		this.cardDecorator = new CardDecorator();
		this.cardDecorator.load(this.list);
	},

	applyDesignMetaData: function(metaData, designing) {
		if (designing && metaData.$cardPosition !== undefined) {
			this.cardDecorator.applyDesignMetaData(metaData, designing);
		}
		this.list.graphDecorator && this.list.graphDecorator.applyDesignMetaData(metaData, designing);
		this.list.pagging.applyMetadata(metaData, designing);
	},
	applyMetaDataRecords: function($meta) {
		var $binds = Object.keys($meta.$properties);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var col = this.columnsMap[$binds[ii]];
			col && col.table.applyColumnMetaData(col, $meta.$properties[$binds[ii]]);
		}
	},
	onItemInOut: function(onEnter, event, target) {
		if (!_sideButtons.onItemInOut(this.scrollTable, onEnter, event, target)) {
			if (target.syra_field_bind) {
				var col = this.findEventCol(event);
				if (this.list.isColReordering) {
					if (syra_dd.ddAgent && syra_dd.ddAgent.onColumnHeaderEnterLeave) {
						syra_dd.ddAgent.onColumnHeaderEnterLeave(this.columnsMap[target.syra_field_bind], onEnter);
					}
				}
				if (onEnter) {
					if (col.titleCell.syraResizerColId) {
						col.rect = col.titleCell.getBoundingClientRect();
					}
					if (col.titleLabel.title) {
						col.titleLabel.syraTipTitle = col.titleLabel.title;
						col.titleLabel.title = "";
						if (col.titleLabel.clientWidth != col.titleLabel.scrollWidth) {
							syra_site.siteFunctions.toggleTitleTip(col.titleLabel.syraTipTitle, col.titleLabel);
						}
					}
				} else {
					if (col.titleLabel.syraTipTitle) {
						col.titleLabel.title = col.titleLabel.syraTipTitle;
					}
					syra_site.siteFunctions.toggleTitleTip();
				}
			}
		}
	},
	onMouseMove: function(event) {
		var col = this.findEventCol(event);
		col && _colResizer.setCursor(col, event);
		return true;
	},
	isDraggable: function(target, event) {
		if (target.syraResizerColId == this.list.id) {
			if (_colResizer.isDraggable(this.list, this.findEventCol(event), event)) {
				return;
			}
		}
		if (target.syraReorderColId == this.list.id) {
			_colsReorderer.isDraggable(this.list, this.findEventCol(event), event);
			return;
		} else {
			if (this.list.addSlotResizer(target, event)) {
				return;
			} else {
				return this.list.isReorderRecordDraggable(target, event);
			}
		}
		return null;
	},
	_addRow: function(record) {
		var row = document.createElement("tr");
		row.syraItem = row.syrainout = record.id;
		row.setAttribute("data-s-record", row.syraRecord = record.$uuid);
		row.className = this.list.$skin + "-row";
		if (this.list.selector.isRowMode) {
			row.syraOnClick = "onSelectorClick";
			row.className += " s-list-selector-row";
		}
		return row;
	},
	removeRecordRow: function(record) {
		this.freezeTable && this.freezeTable.removeRow(record);
		this.scrollTable && this.scrollTable.removeRow(record);
		record.rowCard && syra_site.dom.removeChild(record.rowCard.row);
	},
	drawRecord: function(record) {
		record.isGridRecord = true;
		record.$mnPickersCss = record.$mnPickersCss || "s-list-record-picker";
		record.$iconPath = this.list.$iconPath;
		record.$isVerticalDirection = true;
		record.domItem = record.dataRow = this._addRow(record);
		if (this.allColumns[0].table.isFreeze) {
			record.freezeRow = this._addRow(record);
		}
		record.fieldCellsMap = {};
		record.cellsMap = {};
		if (this.list.treeDecorator) {
			var col = this.columnsMap.$treeview;
			var td = record.cellsMap[col.key] = document.createElement("td");
			td.className = this.list.cssCell + " " + this.list.treeDecorator.cssNodeCell;
			if (this.list.$capability.reorder) {
				td.className += " s-tree-record-reorder";
				td.syraDragSpot = this.list.id;
			}
			record[col.table.$rowKey].appendChild(td);
			this.list.treeDecorator.appendCardNode(record, td);
		} else {
			var before = record.insertBeforeRecord;
			if (before) {
				before.dataRow.parentNode.insertBefore(record.dataRow, before.dataRow);
				before.freezeRow && before.freezeRow.parentNode.insertBefore(record.freezeRow, before.freezeRow);
				delete record.insertBeforeRecord;
			} else {
				record.freezeRow && this.freezeTable.bodyTable.appendChild(record.freezeRow);
				this.scrollTable.bodyTable.appendChild(record.dataRow);
			}
		}

		var cssCell = this.list.cssCell;
		if (this.list.treeDecorator) {
			cssCell += " s-list-no-border";
		};
		for (var ii = 0, jj = this.allColumns.length; ii < jj; ii++) {
			var col = this.allColumns[ii];
			if (col == this.columnsMap.$rowIndex) {
				record.cellsMap[col.key] = _appendRowIndexCell(record, record[col.table.$rowKey]);
				continue;
			}
			if (col == this.columnsMap.rowCard) {
				record.cellsMap[col.key] = record[col.table.$rowKey].appendChild(this.cardDecorator.appendRowCardOpener(record));
				continue;
			}
			if (col == this.columnsMap.$recordSelector) {
				var td = record.cellsMap[col.key] = document.createElement("td");
				td.className = this.list.cssCell;
				record._selectorCheck = this.list.selector.appendToRecord(record[col.table.$rowKey].appendChild(td));
				continue;
			}
			if (col == this.columnsMap.$menus) {
				record.cellsMap[col.key] = record.menusSlot = document.createElement("td");
				record.menusSlot.className = this.list.cssCell + " " + this.list.$skin + "-actions-cell";
				record[col.table.$rowKey].appendChild(record.menusSlot);
				if (this.list.treeDecorator) {
					record.menusSlot.className += " s-list-tree-cell";
				}
				this.list.capabilityMaker.applyToRecord(record);
				continue;
			}
			if (col.$bind) {
				var td = record.cellsMap[col.key] = document.createElement("td");
				td.className = cssCell;
				if (col.$isHidden) {
					td.style.display = "none";
				}
				record.fieldCellsMap[col.key] = record.page.loadNewItem(td, {
					$bind: col.$bind,
					$isCellChild: true,
					$inplace: true
				}, record);
				if (!this.list.$isEditMode && col.$field.$hasFilterCapability) {
					td.className += col.cssRecordCellFilter;
				}
				record[col.table.$rowKey].appendChild(td);
			}
		}

	},
	createCardRow: function(record) {
		var card = {
			cell: document.createElement("td"),
			row: document.createElement("tr"),
			contentSlot: document.createElement("div")
		};
		card.cell.className = record.boxParent.$skin + "-cards-cell";
		card.cell.setAttribute("colspan", record.dataRow.cells.length);
		card.cell.appendChild(card.contentSlot);
		card.row.appendChild(card.cell);
		record.dataRow.parentNode.insertBefore(card.row, record.dataRow.nextSibling);
		return card;
	},
	drawGrid: function(l) {
		this.list.searchCapability.draw(this.list);
		this.list.$skin = this.list.$item.$skin || this.list.$defaultSkin;
		this.list.cssCell = this.list.$skin + "-cell";
		if (this.list.$isEditMode) {
			this.list.cssCell += "-edit";
		}
		this.list.cssRowIndex = this.list.$skin + "-cell " + this.list.$skin + "-row-index";
		this.list._dataValue.style.overflow = "";
		this.list.tableSlot = document.createElement("div");
		this.list.tableSlot.className = "s-grid-slot";
		this.list._core.appendChild(this.list.tableSlot);

		this.list.ensureGrapDecorator();
		this.list.appendCardGraphSlots();


		this.list.applyDesignMetaData(this.list.$item, false);
		this.list.setState(this.list.$field);

		this.scrollTable = new GridTable();
		this.scrollTable.load(this);

		this.freezeTable = new GridTable();
		this.freezeTable.load(this, true);

		var slotTable = document.createElement("div");
		slotTable.className = "s-grid-slot-table";
		this.freezeTableSlot = document.createElement("div");
		this.freezeTableSlot.className = "s-grid-slot-table-freeze";
		this.freezeTableSlot.appendChild(this.freezeTable.headSlot);
		this.freezeTableSlot.appendChild(this.freezeTable.bodySlot);
		slotTable.appendChild(this.freezeTableSlot);

		var slot = document.createElement("div");
		slot.className = "s-grid-slot-table-scroll";
		slot.appendChild(this.scrollTable.headSlot);
		slot.appendChild(this.scrollTable.bodySlot);
		slotTable.appendChild(slot);

		this.list.body = this.scrollTable.bodyTable;

		this.list.tableSlot.appendChild(slotTable);
		this.emptyDataItem = document.createElement("div");
		this.emptyDataItem.className = this.list.$skin + "-empty-slot";
		this.emptyDataItem.style.display = "none";
		this.list.tableSlot.appendChild(this.emptyDataItem);


		this.list.loadSelector();
		this.list.capabilityMaker.apply(this.list);
		this._addTitleRow();

		this.list.cursor = "default";
		syra_dd.colResizer.push(this.list);
	},
	_hasFreezeField: function($items) {
		if (!this.list.page.lookupField) {
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				var $item = $items[ii];
				var $field = this.list.$fields[$item.$bind];
				if ($field && !$field.$isExcluded) {
					return ($item.$isFixed !== undefined) ? $item.$isFixed : $field.$isFixed;
				}
			}
		}
		return false;
	},
	_addTitleRow: function() {
		this.allColumns = [];
		var $items = this.list.$item.$layout.$items;

		this.list.ensureGlobalMetaRecord(true);
		if (this.list.$item.$isQuickFilter) {
			if (this.filterRecord) {
				this.filterRecord.drawBox();
			} else {
				(this.filterRecord = new FilterRecord()).loadRecord(this.list);
			}
		}
		var hasFreezeField = this._hasFreezeField($items);
		var freezeTable = this.freezeTable;

		if (this.list.treeDecorator) {
			freezeTable = this.scrollTable;
			freezeTable.addTreeCol();
		} else {
			if (!this._hasFreezeField($items)) {
				freezeTable = this.scrollTable;
			}
			if (this.list.$item.$isRowIndexVisible || this.list.$capability.reorder || this.list.$item.$selectByRowIndex) {
				freezeTable.addRowIndexCol();
			}
		}
		this.cardDecorator.isRowCardMode && freezeTable.addRowCardCol();
		this.list.selector.useColumnSelector && freezeTable.addSelectorColumn();
		!this.list.$item.$isMenuRecordHidden && freezeTable.addMenusCol();

		var isRowVisible, isFilterVisible;
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			var $field = this.list.$fields[$item.$bind];
			if ($field && !$field.$isExcluded) {
				var $isFixed = ($item.$isFixed !== undefined) ? $item.$isFixed : $field.$isFixed;
				var col = ($isFixed ? freezeTable : this.scrollTable).addFieldCol($item, $field);
				var hasFilter = this.filterRecord && _filterBuilder.addFieldCell(col, $field);
				if (!isRowVisible && col.titleText) {
					isRowVisible = true;
				}
				if (!col.$isHidden && hasFilter) {
					isFilterVisible = true;
				}
			}
		}
		if (this.filterRecord) {
			syra_site.dom.display(this.filterRecord.freezeRow, isFilterVisible);
			syra_site.dom.display(this.filterRecord.dataRow, isFilterVisible);
		}
		this.scrollTable.headSlot.style.display = isRowVisible ? "" : "none";
	},

	toggleQuickEdit: function(record) {
		_quickEditBuilder.toggle(record);
	},
	loadInlinePage: function(record, $itemPage, options) {
		_quickEditBuilder.loadInlinePage(record, $itemPage, options);
	},
	getNextVisibleField: function($bind) {
		return this.getNextField($bind, true);
	},
	getNextFocusableField: function($bind) {
		return this.getNextField($bind, true, true);
	},
	getPreviousVisibleField: function($bind) {
		return this.getPreviousField($bind, true);
	},
	getPreviousFocusableField: function($bind) {
		return this.getPreviousField($bind, true, true);
	},
	getNextField: function($bind, visible, focusable) {
		var col = $bind && this.columnsMap[$bind];
		for (var ii = col ? this.allColumns.indexOf(col) + 1 : 0, jj = this.allColumns.length; ii < jj; ii++) {
			col = this.allColumns[ii];
			if (col.$bind) {
				if (!(col.$isHidden && (visible || focusable)) && !(col.$isDisabled && focusable)) {
					break;
				}
			}
			col = null;
		}
		return (col && col.$bind) || $bind;
	},
	getPreviousField: function($bind, visible, focusable) {
		var col = $bind && this.columnsMap[$bind];
		for (var ii = found ? this.allColumns.indexOf(found) - 1 : this.allColumns.length - 1; ii >= 0; ii--) {
			var col = this.allColumns[ii];
			if (col.$bind) {
				if ((col.$isHidden && (visible || focusable)) || (col.$isDisabled && focusable)) {
					col = null;
					continue;
				}
				break;
			}
		}
		return (col && col.$bind) || $bind;
	},
	emptyBody: function(addEmptySlot, onFetch) {
		this.freezeTable && this.freezeTable.empty();
		this.scrollTable.empty();
		if (addEmptySlot) {
			if (!this.list.isClientFetch && onFetch) {
				this.emptyDataItem.textContent = syra_local.flWaitingData;
			} else {
				this.emptyDataItem.textContent = this.list.$item.$noDataText || syra_local.flNoData;
			}
			this.emptyDataItem.syraIsDisplay = true;
			this.emptyDataItem.style.display = "";

		}
	},
	clearEmpty: function() {
		if (this.emptyDataItem.syraIsDisplay) {
			this.emptyDataItem.syraIsDisplay = false;
			this.emptyDataItem.style.display = "none";
		}
	},
	disposeRecordCard: function(record) {
		record.layoutSlot = record.layoutContent = record.domItem = record.body = record.rowCard = record.rowCardOpener = record.cardItem = null;
	},
	onItemInOutRecord: function(record, onEnter) {
		if (record.list.selector) {
			if (record.treeNode) {
				syra_site.dom.toggleClass(record.treeNode.desc || record.treeNode.item, "s-record-enter", onEnter);
			} else {
				record.freezeRow && syra_site.dom.toggleClass(record.freezeRow, "s-record-enter", onEnter);
				syra_site.dom.toggleClass(record.dataRow, "s-record-enter", onEnter);
			}
		}
		record.toggleButtons("s-enter", onEnter);
	},
	disposeRecord: function(record) {
		_quickEditBuilder.disposeRecord(record);
		this.disposeRecordCard(record);
		record.rowIndexBtn = record.cellsMap = record.fieldCellsMap = record.treeNode = record.dataRow = record.freezeRow = record.popupCard = record._selectorCheck = record.titleSlot = null;
	},
	dispose: function() {
		this.scrollTable && _sideButtons.dispose(this.scrollTable);
		this.cardDecorator && this.cardDecorator.dispose();
		this.list && this.list.removeItem(this.filterRecord);
		_filterBuilder.dispose();
		_popupCardBuilder.dispose(this.list);
		_quickEditBuilder.dispose(this.list);
		this.list && syra_page.removeScrollViewListener(this.list.page, this);
		this.freezeTable && this.freezeTable.dispose();
		this.scrollTable && this.scrollTable.dispose();
		this.freezeTable = this.scrollTable = this.list = this.columnsMap = this.allColumns = this.popupCardBuilder = this.filterRecord = this.cardDecorator = this.emptyDataItem = null;
	},
	resizeScrollView: function() {
		if (!this.list.isTableSlotHidden) {
			var maxSlotWidth = this.list.tableSlot.parentNode.clientWidth;
			if (this.list.$item.$fixedBodyHeight) {
				this.scrollTable.bodySlot.style.overflowY = "auto";
				var height = this.scrollTable.bodySlot.clientHeight;
				this.scrollTable.bodySlot.style.height = ((Math.abs(parseInt(this.list.$item.$fixedBodyHeight, 10) - height) < 2) ? height : this.list.$fixedBodyHeight) + "px";
			} else {
				if (this.list.$fitContainer) {
					var bodySlot = this.scrollTable.bodySlot;
					if (this.emptyDataItem.syraIsDisplay) {
						bodySlot.style.height = "0px";
					} else {
						var top = bodySlot.scrollTop;
						var bodyRect = bodySlot.getBoundingClientRect();
						var slotRect = this.list.layoutSlot.getBoundingClientRect();
						var height = Math.max(slotRect.height - (bodyRect.top - slotRect.top), 0);
						bodySlot.style.height = height + "px";
						bodySlot.scrollTop = top;
					}
				}
			}
			if (this.emptyDataItem.syraIsDisplay && this.list.$item.$isTitleRowHidden) {
				this.list.tableSlot.style.maxWidth = this.emptyDataItem.clientWidth + "px";
			} else {
				var freezeWidth;
				if (this.freezeTable) {
					var table = this.list.$item.$isTitleRowHidden ? this.freezeTable.bodyTable : this.freezeTable.headTable;
					this.freezeTable.setColWidths();
					freezeWidth = table.getBoundingClientRect().width;
					this.freezeTableSlot.style.width = freezeWidth + "px";
					var hasMoved;
					while (this.freezeTable.columns.length && Math.max(maxSlotWidth - freezeWidth, 0) <= 300) {
						hasMoved = true;
						var col = this.freezeTable.columns.pop();
						freezeWidth -= col.colWidth;
						_colsReorderer.moveToSrollTable(col);
					}
					if (hasMoved) {
						freezeWidth = table.getBoundingClientRect().width;
						this.freezeTableSlot.style.width = freezeWidth + "px";
					}
				}
				var fitWidth;
				if (this.list.$item.$fitWidth) {
					fitWidth = maxSlotWidth - freezeWidth;
				}
				this.scrollTable && this.scrollTable.setColWidths(fitWidth);
				var scrollWidth = this.scrollTable.showScrollBar() + (freezeWidth || 0);
				if (scrollWidth <= 1) {
					scrollWidth = "";
				}
				this.list.tableSlot.style.maxWidth = scrollWidth + "px";
			}
			if (!this.list.page.dialogWrapper) {
				_sideButtons.add(this.scrollTable);
			}
		}
	},
	clearPreferences: function() {
		if (this.list.$origItem) {
			_colsReorderer.resetReorder(this.list);
			this.list.pagging && this.list.pagging.reset();
			if (this.list.$userPreferences) {
				delete this.list.$userPreferences.$columnWidths;
			}
		}
	},
	toggleColWidthToContent: function() {

	},
	onPageScrollViewChange: function() {
		_sideButtons.move(this.scrollTable);
	},
	onScrollButonClick: function(event, btn) {
		_sideButtons.onClick(this.scrollTable, event, btn);
	}
});

//if (list.$isEditMode) {
// s-grid-col-fixed