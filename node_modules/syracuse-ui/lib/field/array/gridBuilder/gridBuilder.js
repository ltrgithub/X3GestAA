"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CardViewDecorator = require("./cardViewDecorator").CardViewDecorator;
var GridRecord = require('./gridRecord').GridRecord;

function GridBuilder(){
}

exports.GridBuilder = helpers.defineClass(GridBuilder, null, {
    initialize: function(){
        this.$defaultSkin = "s-" + this.list.$item.$format;
        this.RecordClass = GridRecord;
        this.list.$item.$isTopLabelAlignment = true;
    },
    parseItems: function(callback){
        var $fieldProperties = this.list.$fieldProperties;
        this.list.$item.$layout.$items.forEach(function($item){
            var $field = $fieldProperties[$item.$bind];
            if ($field && !$field.$isHidden && !$item.$isHidden) {
                callback($item, $field);
            }
        });
    },
    bindDiagnoseFieldEvent: function(bind){
        var self = this;
        if (bind) {
            if (!self._isDiagnosesHandler) {
                self._isDiagnosesHandler = true;
                self.list.$$item.delegate("a.s-field-diagnose-link", "click.diagnose", function(event){
                    var $$target = $(event.currentTarget);
                    var record = self.list._store.findRecord($$target);
                    var field = record.idMap[$$target.attr("data-s-field")];
                    field.focus();
                    event.stopPropagation();
                });
            }
        }
        else {
            if (self.list && self.list.$$item) {
                self.list.$$item.undelegate("click.diagnose");
            }
        }
    },
    emptyBody: function(addEmptySlot, redraw){
        var self = this;
        if (self.list.$item.$format == "vgrid") {
            self._orderCols.forEach(function(col){
                var children = $(col.slot).children();
                var dataColsCount = children.length - self.headerColsCount;
                if (dataColsCount) {
                    for (var ii = self.headerColsCount; ii < children.length; ii++) {
                        $(children[ii]).remove();
                    }
                }
            });
            if (addEmptySlot) {
                var emptySlot = document.createElement("td");
                emptySlot.className = self.list.$skin + "-empty-slot";
                emptySlot.setAttribute("rowspan", self._orderCols.length);
                self._orderCols[0].slot.appendChild(emptySlot);
            }
        }
        else {
            if (redraw) {
                this._makeTitleRow();
            }
            $(self._body).empty();
            if (addEmptySlot) {
                var emptySlot = document.createElement("td");
                emptySlot.className = this.list.$skin + "-empty-slot";
                emptySlot.setAttribute("colspan", self._orderCols.length);
                self._body.appendChild(document.createElement("tr")).appendChild(emptySlot);
            }
        }
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if (onAuthoring) {
            if (metaData.$isRowIndexVisible !== undefined) {
                this.list.$item.$isRowIndexVisible = metaData.$isRowIndexVisible;
                this.list.reloadBuilder();
            }
            if (metaData.$graphMode !== undefined) {
                this._toggleDataList(metaData.$graphMode != "graph");
            }
            if (metaData.$cardsWidth !== undefined) {
                this.list.$item.$cardsWidth = metaData.$cardsWidth;
            }
            if (metaData.$cards !== undefined || metaData.$cardsPosition !== undefined) {
                if (metaData.$cards !== undefined) {
                    this.list.$item.$cards = metaData.$cards;
                }
                if (metaData.$cardsPosition !== undefined) {
                    this.list.$item.$cardsPosition = metaData.$cardsPosition;
                }
                if (this.cardview) {
                    this.cardview.release();
                }
                this.list.reloadBuilder();
            }
            if (metaData.$cardsWidth !== undefined) {
                if (this.cardview) {
                    this.cardview._cardSlot.style.width = this.list.$item.$cardsWidth + "%";
                }
            }
            if (metaData.$fitContainer !== undefined) {
                this._tableBody.style.width = (this.list.$item.$fitContainer = metaData.$fitContainer) ? "100%" : "";
            }
        }
        
    },
    _toggleDataList: function(show){
        if (this._tableBody) {
            this._tableBody.style.display = show ? "" : "none";
        }
        else {
            this._orderCols = [];
            this.cols = {};
            this._tableHead = document.createElement("table");
            this._tableHead.style.display = "none";
            this._tableHead.className = this.list.$skin;
            this._tableHead.setAttribute("cellspacing", "0");
            this._tableHead.setAttribute("cellpadding", "0");
            if (this.list.$item.$fitContainer !== false) {
                this._tableHead.style.width = "100%";
            }
            this._tableBody = document.createElement("table");
            this._tableBody.style.display = "none";
            this._tableBody.className = this.list.$skin;
            this._tableBody.setAttribute("cellspacing", "0");
            this._tableBody.setAttribute("cellpadding", "0");
            if (this.list.$item.$fitContainer !== false) {
                this._tableBody.style.width = "100%";
            }
            this._colgroupBody = this._tableBody.appendChild(document.createElement("colgroup"));
            this._colgroupHead = this._tableHead.appendChild(document.createElement("colgroup"));
            this._thead = this._tableHead.appendChild(document.createElement("thead"));
            this.list._core.appendChild(this._tableHead);
            this.list._core.appendChild(this._tableBody);
            
            this.list._store.setSortCapability(true);
            
            this._body = this._tableBody.appendChild(document.createElement("tbody"));
            
            this.list._store.loadSelector();
            this._makeTitleRow();
            this._tableHead.style.display = "";
        }
    },
    appendFieldCol: function(slot, $item, $field){
        var col = this.cols[$item.$bind] = this._appendCol();
        col.slot = slot;
        var title;
        if ($field.$capabilities && ($field.$capabilities.indexOf("sort") >= 0)) {
            title = this.list._store.sortCapability.appendSortLink(col, $item);
        }
        else {
            title = document.createElement("div");
            title.className = this.list.$skin + "-title-label";
        }
        var text = this.list.getLocalizedTitle($field.$title || "");
        $(title).text(text);
        title.setAttribute("title", text);
        
        col.titleCell.className = this.gridCss.title;
        col.titleCell.appendChild(title);
        slot.appendChild(col.titleCell);
        
        //set colgroup
        this.maxMinWidth = 0;
        var width = $item.$width || $field.$width;
        if (width) {
            col.groupHead.style.width = col.groupBody.style.width = width;
        }
        else {
            var $width = document.site.getFieldWidth($field.$type, $field.$format);
            var widthValue = $width.$width;
            var minWidth;
            if ($width.$charWidth) {
                widthValue = ($width.$charWidth * ($field.$maxLength || $width.$maxLength));
                if ($width.$minLength) {
                    minWidth = $width.$charWidth * $width.$minLength;
                }
            }
            else {
                minWidth = $width.$minWidth;
            }
            col.groupHead.style.width = col.groupBody.style.width = widthValue + "px";
            if (minWidth) {
                col.groupHead.style.minWidth = col.groupBody.style.minWidth = minWidth + "px";
                this.maxMinWidth = Math.max(this.maxMinWidth, minWidth);
            }
        }
        col.groupBody.setAttribute("data-s-bind", $item.$bind);
        return col;
    },
    _makeTitleRow: function(){
        var self = this;
        self._orderCols = [];
        
        if (self.list.$item.$format == "vgrid") {
            var $$colgroup = $(self._colgroupBody).detach();
            self.list._store.filterCapability.ensureQuickFilter();
            //this.$columnsCount = 1 + (self.list.$item.$isQuickFilter ? 1 : 0); //1 for title cell
            var css = self.list.$skin + "-title-cell";
            if (self.list.$item.$isRowIndexVisible) {
                self._orderCols.push(this._appendRowIndexCol(self._body.appendChild(document.createElement("tr"))));
                self.list._store.filterCapability.appendFlagCell(self.cols.$rowIndex.slot);
            }
            if (!self.list.$item.$isMenuRecordHidden) {
                self._orderCols.push(self._appendContextMenusCol(self._body.appendChild(document.createElement("tr"))));
                self.list._store.filterCapability.appendEmptyCell(self.cols.$contextMenus.slot);
            }
            if (self.list._store.selector.appendToTitle) {
                var col = self._appendRecordSelectorCol(self._body.appendChild(document.createElement("tr")));
                self._orderCols.push(col);
                self.list._store.filterCapability.appendEmptyCell(self.cols.$recordSelector.slot);
            }
            self.parseItems(function($item, $field){
                var row = self._body.appendChild(document.createElement("tr"));
                self._orderCols.push(self.appendFieldCol(row, $item, $field));
                self.list._store.filterCapability.appendFieldCell($item, $field);
            });
            
            self.headerColsCount = 1;
            $$colgroup.empty();
            var col = self._colgroupBody.appendChild(document.createElement("col"));
            col.style.width = col.style.minWidth = "100px";
            if (self.list._store.filterCapability.filterRecord) {
                self.headerColsCount++;
                var col = self._colgroupBody.appendChild(document.createElement("col"));
                col.style.width = col.style.minWidth = "100px";
            }
            $$colgroup.prependTo(self._tableBody);
        }
        else {
            if (self.titleRow) {
                $(self.titleRow).empty();
            }
            else {
                self.titleRow = self._thead.appendChild(document.createElement("tr"));
            }
            document.site.emptyDom(self._colgroupBody);
            document.site.emptyDom(self._colgroupHead);
            self.titleRow.style.display = self.list.$item.$isTitleRowHidden ? "none" : "";
            self.list._store.filterCapability.ensureQuickFilter();
            
            if (self.list.$item.$isRowIndexVisible) {
                self.list._store.filterCapability.appendEmptyCell();
                self._orderCols.push(this._appendRowIndexCol(self.titleRow));
            }
            
            if (self.cardview && self.cardview.$cardsPosition == "inline") {
                self.list._store.filterCapability.appendEmptyCell();
                self._orderCols.push(self._appendCardViewCol(self.titleRow));
            }
            if (!self.list.$item.$isMenuRecordHidden) {
                //contextmenu
                self.list._store.filterCapability.appendEmptyCell();
                self._orderCols.push(self._appendContextMenusCol(self.titleRow));
            }
            
            if (self.list._store.selector.appendToTitle) {
                self.list._store.filterCapability.appendFlagCell();
                self._orderCols.push(self._appendRecordSelectorCol(self.titleRow));
            }
            self.parseItems(function($item, $field){
                self._orderCols.push(self.appendFieldCol(self.titleRow, $item, $field));
                self.list._store.filterCapability.appendFieldCell($item, $field);
            });
        }
    },
    _appendCol: function(){
        return {
            titleCell: document.createElement("th"),
            groupBody: this._colgroupBody.appendChild(document.createElement("col")),
            groupHead: this._colgroupHead.appendChild(document.createElement("col"))
        };
    },
    _appendRowIndexCol: function(slot){
        var col = this.cols.$rowIndex = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        slot.appendChild(col.titleCell);
        col.groupBody.style.maxWidth = col.groupBody.style.minWidth = col.groupBody.style.width = (this.list.$capability.reorder) ? "35px" : "25px";
        col.groupHead.style.maxWidth = col.groupHead.style.minWidth = col.groupHead.style.width = col.groupBody.style.width;
        return col;
    },
    _appendCardViewCol: function(slot){
        var col = this.cols.$cards = this._appendCol();
        col.groupBody.style.maxWidth = col.groupBody.style.minWidth = col.groupBody.style.width = "20px";
        col.groupHead.style.maxWidth = col.groupHead.style.minWidth = col.groupHead.style.width = col.groupBody.style.width;
        col.slot = slot;
        col.titleCell.className = this.gridCss.title + " s-list-cards-cell";
        var opener = document.createElement("a");
        opener.className = this.list.$skin + "-cardview-opener s-close";
        slot.appendChild(col.titleCell).appendChild(opener);
        this.cardview._bindOpener();
        return col;
    },
    _appendRecordSelectorCol: function(slot){
        var col = this.cols.$recordSelector = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        this.list._store.selector.appendToTitle(slot.appendChild(col.titleCell));
        col.groupHead.style.width = col.groupBody.style.width = this.list._store.selector.getWidth();
        return col;
    },
    _appendContextMenusCol: function(slot){
        var col = this.cols.$contextMenus = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        slot.appendChild(col.titleCell);
        col.$quickActions = {};
        col.groupBody.style.maxWidth = col.groupBody.style.minWidth = col.groupBody.style.width = (col.width = 0) + "px";
        col.groupHead.style.maxWidth = col.groupHead.style.minWidth = col.groupHead.style.width = col.groupBody.style.width;
        return col;
    },
    setContextMenusCol: function($quickAction, isRemoved){
        var col = this.cols.$contextMenus;
        if (isRemoved) {
            if (!$quickAction) {
                col.$quickActions = {};
                col.groupBody.style.maxWidth = col.groupBody.style.minWidth = col.groupBody.style.width = (col.width = 0) + "px";
                col.groupHead.style.maxWidth = col.groupHead.style.minWidth = col.groupHead.style.width = col.groupBody.style.width;
            }
            else {
                if (col.$quickActions[$quickAction]) {
                    delete col.$quickActions[$quickAction];
                    col.groupBody.style.maxWidth = col.groupBody.style.minWidth = col.groupBody.style.width = (col.width -= 20) + 4 + "px";
                    col.groupHead.style.maxWidth = col.groupHead.style.minWidth = col.groupHead.style.width = col.groupBody.style.width;
                }
            }
        }
        else {
            if (!col.$quickActions[$quickAction]) {
                col.$quickActions[$quickAction] = true;
                col.groupBody.style.maxWidth = col.groupBody.style.minWidth = col.groupBody.style.width = (col.width += 20) + 4 + "px"; //2padding for grid-cell
                col.groupHead.style.maxWidth = col.groupHead.style.minWidth = col.groupHead.style.width = col.groupBody.style.width;
            }
        }
    },
    ensureCardView: function(){
        var self = this
        var $arrayBinds = [];
        if (!self.list.$item.$cards) {
            self.parseItems(function($item, $field){
                if ($field) {
                    switch ($field.$type) {
                        case "application/x-array":
                        case "application/x-object":
                            if (!$field.$isHidden) {
                                if (self.list.$item.$cards) {
                                    $field.$isHidden = true;
                                }
                                else {
                                    $arrayBinds.push($item.$bind);
                                }
                            }
                            break;
                    }                    
                }
            });
            if ($arrayBinds.length > 0) {
                self.list.$item.$layout.$items = self.list.$item.$layout.$items.filter(function($item){
                    return $arrayBinds.indexOf($item.$bind) < 0;
                });
                self.list.$item.$cards = {
                    $layout: {
                        $layoutType: "tabs",
                        $items: $arrayBinds.map(function($bind){
                            return {
                                $category: "section",
                                $title: self.list.$fieldProperties[$bind].$title,
                                $layout: {
                                    $items: [{
                                        $bind: $bind,
                                        $isTitleHidden: true
                                    }]
                                }
                            
                            };
                        })
                    }
                };
            }
        }
        if (self.list.$item.$cards) {
            self.cardview = new CardViewDecorator();
            self.cardview.initialize(self);
        }
    },
    drawBuilder: function(){
        this.list.$$fieldValue[0].style.overflow = "auto";
        var $skin = this.list.$skin = this.list.$item.$skin || this.$defaultSkin;
        this.gridCss = {
            title: $skin + "-title-cell",
            cell: $skin + "-cell",
            rowIndex: $skin + "-cell " + $skin + "-row-index"
        };
        this.ensureCardView();
        this.list.applyDesignMetaData(this.list.$item, false);
        this.list.setState(this.list.$field);
        this.list.parseCapabilities(this.list.$prototype.$capabilities);
        this._toggleDataList(true);
        this.list.boxParent.getArticle().bind(this.list, this.list.$item.$bind);
        this.list.applyCapabilities();
        this._tableBody.style.display = "";
    },
    onAfterDataBinding: function(){
        if (this.cardview) {
            if (this.cardview.$cardsPosition != "inline" && Object.keys(this.list_store.selector.records).length == 0) {
                if (this.list._store._records.length > 0) {
                    this.list_store.selector.select(this.list._store._records[0].$uuid, true);
                }
            }
        }
    },
    dispose: function(){
        this.bindDiagnoseFieldEvent(false);
        delete this.$layoutOptions;
        delete this.list;
    }
});
