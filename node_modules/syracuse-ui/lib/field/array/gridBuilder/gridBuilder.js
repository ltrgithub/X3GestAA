"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CardViewDecorator = require("./cardViewDecorator").CardViewDecorator;
var GridRecord = require('./gridRecord').GridRecord;
var vgridHelper = require('./vgridHelper');

function GridBuilder(){
}

exports.GridBuilder = helpers.defineClass(GridBuilder, null, {
    initialize: function(){
        this.$defaultSkin = "s-" + this.list.$item.$format;
        this.RecordClass = GridRecord;
        this.list.$item.$isTopLabelAlignment = true;
    },
    parseItems: function(callback){
        var $items = this.list.$item.$layout.$items;
        for (var ii = 0, jj = $items.length; ii < jj; ii++) {
            var $item = $items[ii];
            var $field = this.list.$fieldProperties[$item.$bind];
            if ($field && !$field.$isHidden && !$item.$isHidden) {
                callback($item, $field);
            }
        }
    },
    emptyBody: function(addEmptySlot){
        if (this.list.$item.$format == "vgrid") {
            vgridHelper.emptyBody(this, addEmptySlot);
        }
        else {
            $(this._body).empty();
            if (addEmptySlot) {
                var emptySlot = document.createElement("td");
                emptySlot.className = this.list.$skin + "-empty-slot";
                emptySlot.setAttribute("colspan", this._orderCols.length);
                this._body.appendChild(document.createElement("tr")).appendChild(emptySlot);
            }
        }
    },
    _setBodyHeight: function(){
        if (this._bodySlot.style.overflowY != "auto") {
            this._bodySlot.style.overflowY = "auto";
        }
        var bodyHeight = this.list.$item.$fitContainer ? 0 : this._$fixedBodyHeight;
        if (!bodyHeight) {
            var $$slot = this.list._$$fitContainer || $(this.list.layoutSlot);
            this._containerHeight = $$slot[0].offsetHeight - ((this.list.$$item.outerHeight() - this.list.$$item.height()));
            bodyHeight = this._containerHeight - (this._$$bodySlot.offset().top - $$slot.offset().top) - this._hscroller.offsetHeight;
        }
        bodyHeight = Math.max(40, bodyHeight);
        if (Math.abs(bodyHeight - (this._$$bodySlot.height())) < 2) {
            bodyHeight = this._$$bodySlot.height();
        }
        this._bodySlot.style.height = bodyHeight + "px";
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if ((metaData.$fixedBodyHeight !== undefined) || (metaData.$fitContainer !== undefined)) {
            this.list.$item.$fixedBodyHeight = metaData.$fixedBodyHeight;
            this.list.$item.$fitContainer = metaData.$fitContainer;
            this._$fixedBodyHeight = parseInt(this.list.$item.$fixedBodyHeight || 0, 10);
            this.onWindowResize();
        }
        if (onAuthoring) {
            if (metaData.$graphMode !== undefined) {
                this._toggleDataList(metaData.$graphMode != "graph");
            }
            if (metaData.$cardsWidth !== undefined) {
                this.list.$item.$cardsWidth = metaData.$cardsWidth;
            }
            if (metaData.$cards !== undefined || metaData.$cardsPosition !== undefined) {
                if (metaData.$cards !== undefined) {
                    this.list.$item.$cards = metaData.$cards;
                }
                if (metaData.$cardsPosition !== undefined) {
                    this.list.$item.$cardsPosition = metaData.$cardsPosition;
                }
                if (this.cardview) {
                    this.cardview.release();
                }
                this.list.reloadBuilder(true);
            }
            if (metaData.$cardsWidth !== undefined) {
                if (this.cardview) {
                    this.cardview._cardSlot.style.width = this.list.$item.$cardsWidth + "%";
                }
            }
        }
    },
    _toggleDataList: function(show){
        if (this._tableBody) {
            this._tableBody.style.display = show ? "" : "none";
        }
        else {
            this._orderCols = [];
            this.cols = {};
            this._headSlot = document.createElement("div");
            this._headSlot.className = this.list.$skin + "-slot-head";
            this._headTable = document.createElement("table");
            this._headTable.style.display = "none";
            this._headTable.className = this.list.$skin + "-table-head";
            this._headTable.setAttribute("cellspacing", "0");
            this._headTable.setAttribute("cellpadding", "0");
            this._headSlot.appendChild(this._headTable);
            
            this._hscroller = document.createElement("div");
            this._hscroller.className = this.list.$skin + "-h-scroll";
            this._hscroller.appendChild(this._hscrollBody = document.createElement("div"));
            this._hscrollBody.className = this.list.$skin + "-h-scroll-body";
            
            this._$$bodySlot = $(this._bodySlot = document.createElement("div"));
            this._bodySlot.className = this.list.$skin + "-slot-body";
            this._bodyTable = document.createElement("table");
            this._bodyTable.style.display = "none";
            this._bodyTable.className = this.list.$skin + "-table-body";
            this._bodyTable.setAttribute("cellspacing", "0");
            this._bodyTable.setAttribute("cellpadding", "0");
            this._bodySlot.appendChild(this._bodyTable);
            
            this.scrollLinks = document.createElement("div");
            this.scrollLinks.className = "s-list-scroll-links";
            document.site.setZIndex(this.scrollLinks);
            document.site.layoutSlot.appendChild(this.scrollLinks);
            this.scrollLeftLink = document.createElement("a");
            this.scrollLeftLink.className = "s-list-scroll-left";
            this.scrollLinks.appendChild(this.scrollLeftLink);
            this.scrollRightLink = document.createElement("a");
            this.scrollRightLink.className = "s-list-scroll-right";
            this.scrollLinks.appendChild(this.scrollRightLink);
            
            this._bodyColgroup = this._bodyTable.appendChild(document.createElement("colgroup"));
            this._headColgroup = this._headTable.appendChild(document.createElement("colgroup"));
            this._thead = this._headTable.appendChild(document.createElement("thead"));
            this.list._core.appendChild(this._headSlot);
            this.list._core.appendChild(this._bodySlot);
            this.list._core.appendChild(this._hscroller);
            
            
            this.list.setSortCapability(true);
            
            this._$$body = $(this._body = this._bodyTable.appendChild(document.createElement("tbody")));
            
            this.list._store.loadSelector();
            this._makeTitleRow();
            this._headTable.style.display = "";
            this._bodySlot.style.visibility = "hidden";
            this._bindScrollEvent(true);
        }
    },
    onWindowResize: function(initialize){
        if (!this.disposed && this._bodySlot) {
            if (this.list.$item.$format == "grid") {
                if (this._bodySlot.clientWidth) {
                    this.widthTotal = 0;
                    this._maxCol = this._orderCols[0];
                    for (var ii = 0, jj = this._orderCols.length; ii < jj; ii++) {
                        var col = this._orderCols[ii];
                        this.widthTotal += col.widthValue;
                    }
                    if (this.widthTotal < this._bodySlot.clientWidth) {
                        this._isPropoprtionalWidth = true;
                        var maxWidth = this._bodySlot.clientWidth;
                        for (var ii = 0, jj = this._orderCols.length; ii < jj; ii++) {
                            var col = this._orderCols[ii];
                            if (col.$bind) {
                                var width = col.widthValue / this.widthTotal;
                                width = width * maxWidth;
                                col.groupHead.style.width = col.groupBody.style.width = width + "px";
                            }
                        }
                        //this._maxCol.groupHead.style.width = this._maxCol.groupBody.style.width = ((this._$$bodySlot.width() - 1 - this.widthTotal) + this._maxCol.widthValue) + "px";
                    }
                    else 
                        if (this._isPropoprtionalWidth) {
                            for (var ii = 0, jj = this._orderCols.length; ii < jj; ii++) {
                                var col = this._orderCols[ii];
                                col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
                            }
                            delete this._isPropoprtionalWidth;
                        }
                }
                this._hscrollBody.style.width = this.widthTotal + "px";
            }
            if (this._bodySlot.scrollHeight > (this._bodySlot.clientHeight + 1)) {
                this._headSlot.style.marginRight = "17px";
            }
            else {
                this._headSlot.style.marginRight = ""
            }
            if (this._bodySlot.scrollWidth > (this._bodySlot.clientWidth + 1)) {
                this._hscroller.style.display = "";
                this._bodyOffset = this._$$bodySlot.offset();
            }
            else {
                this._hscroller.style.display = "none";
                delete this._bodyOffset;
            }
            if (this._$fixedBodyHeight || this.list.$item.$fitContainer) {
                this._setBodyHeight(initialize);
            }
            else {
                if (this._bodySlot.style.overflowY == "auto") {
                    this._bodySlot.style.overflowY = "";
                    this._bodySlot.style.height = "";
                }
            }
        }
    },
    _bindScrollEvent: function(bind){
        var self = this;
        if (bind) {
            (self._$$hscroller = $(self._hscroller)).bind("scroll", function(event){
                if (self._bodySlot.scrollLeft != self._hscroller.scrollLeft) {
                    self._bodySlot.scrollLeft = self._hscroller.scrollLeft;
                }
                if (self._headSlot.scrollLeft != self._hscroller.scrollLeft) {
                    self._headSlot.scrollLeft = self._hscroller.scrollLeft;
                }
                document.site.closePopups();
                return false;
            });
            self._$$bodySlot.bind("scroll", function(event){
                if (self._hscroller.scrollLeft != self._bodySlot.scrollLeft) {
                    self._hscroller.scrollLeft = self._bodySlot.scrollLeft;
                }
                if (self._headSlot.scrollLeft != self._bodySlot.scrollLeft) {
                    self._headSlot.scrollLeft = self._bodySlot.scrollLeft;
                }
            });
            /*
             self.list._core.addEventListener("mousemove", self._onBodyMouseMove = function(event){
             if (self._bodyOffset && !self._scrollingDisable) {
             self.scrollLinks.style.left = (self._bodyOffset.left - 20) + "px";
             self.scrollLinks.style.top = event.clientY + "px";
             
             // self.scrollLeftLink.style.display = "":"none";
             //self.scrollRightLink.style.display = "":"none";
             }
             }, false);
             self.list._core.addEventListener("mouseout", self._onBodyMouseOut = function(event){
             self.scrollLinks.style.display = "none";
             }, false);
             self.list._core.addEventListener("mouseover", self._onBodyMouseOver = function(event){
             if (self._bodyOffset && self.scrollLinks.style.display != "") {
             self.scrollLinks.style.display = "";
             }
             }, false);
             */
            (self._$$headSlot = $(self._headSlot)).bind("scroll", function(event){
                if (self._hscroller.scrollLeft != self._headSlot.scrollLeft) {
                    self._hscroller.scrollLeft = self._headSlot.scrollLeft;
                }
                if (self._bodySlot.scrollLeft != self._headSlot.scrollLeft) {
                    self._bodySlot.scrollLeft = self._headSlot.scrollLeft;
                }
            });
        }
        else {
            if (self._$$hscroller) {
                self._$$hscroller.unbind();
                delete self._$$hscroller;
            }
            if (self._$$bodySlot) {
                self._$$bodySlot.unbind();
                /*
                 if (self._onBodyMouseMove) {
                 self._bodySlot.removeEventListener("mousemove", self._onBodyMouseMove, false);
                 delete self._onBodyMouseMove;
                 }
                 if (self._onBodyMouseOut) {
                 self._bodySlot.removeEventListener("mouseout", self._onBodyMouseOut, false);
                 delete self._onBodyMouseOut;
                 }
                 if (self._onBodyMouseOver) {
                 self._bodySlot.removeEventListener("mouseover", self._onBodyMouseOver, false);
                 delete self._onBodyMouseOver;
                 }
                 */
            }
            if (self._$$headSlot) {
                self._$$headSlot.unbind();
            }
        }
    },
    appendFieldCol: function(slot, $item, $field){
        var col = this.cols[$item.$bind] = this._appendCol();
        col.slot = slot;
        var title;
        if ($field.$capabilities && ($field.$capabilities.indexOf("sort") >= 0)) {
            title = this.list.sortCapability.appendSortLink(col, $item);
        }
        else {
            title = document.createElement("div");
            title.className = this.list.$skin + "-title-label";
        }
        var text = this.list.getLocalizedTitle($field.$shortTitle || $field.$title || "");
        $(title).text(text);
        title.setAttribute("title", text);
        
        col.titleCell.className = this.gridCss.title;
        col.titleCell.appendChild(title);
        slot.appendChild(col.titleCell);
        
        //set colgroup
        this.maxMinWidth = 0;
        var width = $item.$width || $field.$width;
        if (width) {
            col.groupHead.style.width = col.groupBody.style.width = width;
            col.widthValue = parseInt(width.replace("px", ""), 10);
        }
        else {
            col.widthValue = document.site.getFieldWidth($field);
        }
        if ($field.$capabilities && ($field.$capabilities.indexOf("filter") >= 0)) {
            col.widthValue += 20;
        }
        if (this.list.$isEditMode) {
            if ($field.$item ? ($field.$item.$links || $field.$item.$actions) : ($field.$links || $field.$actions)) {
                col.widthValue += 40;
            }
            if ($field.$type == "application/x-choice" || $field.$type == "application/x-date" || $field.$type == "application/x-time") {
                col.widthValue += 20;
            }
        }
        col.widthValue = Math.max(40, col.widthValue);
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        col.groupBody.setAttribute("data-s-bind", $item.$bind);
        col.$bind = $item.$bind;
        return col;
    },
    _makeTitleRow: function(){
        this._orderCols = [];
        if (this.list.$item.$format == "vgrid") {
            vgridHelper.makeTitleRow(this);
        }
        else {
            if (this.titleRow) {
                $(this.titleRow).empty();
            }
            else {
                this.titleRow = this._thead.appendChild(document.createElement("tr"));
            }
            document.site.emptyDom(this._bodyColgroup);
            document.site.emptyDom(this._headColgroup);
            this.titleRow.style.display = this.list.$item.$isTitleRowHidden ? "none" : "";
            this.list.filterCapability.ensureQuickFilter();
            
            if (this.list.$item.$isRowIndexVisible) {
                this.list.filterCapability.appendEmptyCell();
                this._orderCols.push(this._appendRowIndexCol(this.titleRow));
            }
            
            if (this.cardview && this.cardview.$cardsPosition == "inline") {
                this.list.filterCapability.appendEmptyCell();
                this._orderCols.push(this._appendCardViewCol(this.titleRow));
            }
            if (!this.list.$item.$isMenuRecordHidden) {
                this.list.filterCapability.appendEmptyCell();
                this._orderCols.push(this._appendMenusBoxCol(this.titleRow));
            }
            
            if (this.list._store.selector.appendToTitle) {
                this.list.filterCapability.appendFlagCell();
                this._orderCols.push(this._appendRecordSelectorCol(this.titleRow));
            }
            
            //parseItems
            var $items = this.list.$item.$layout.$items;
            for (var ii = 0, jj = $items.length; ii < jj; ii++) {
                var $item = $items[ii];
                var $field = this.list.$fieldProperties[$item.$bind];
                if ($field && !$field.$isHidden && !$item.$isHidden) {
                    this._orderCols.push(this.appendFieldCol(this.titleRow, $item, $field));
                    this.list.filterCapability.appendFieldCell($item, $field);
                }
            }
        }
    },
    _appendCol: function(){
        return {
            titleCell: document.createElement("th"),
            groupBody: this._bodyColgroup.appendChild(document.createElement("col")),
            groupHead: this._headColgroup.appendChild(document.createElement("col"))
        };
    },
    _appendRowIndexCol: function(slot){
        var col = this.cols.$rowIndex = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        slot.appendChild(col.titleCell);
        col.widthValue = (this.list.$capability.reorder) ? 35 : 25;
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        return col;
    },
    _appendCardViewCol: function(slot){
        var col = this.cols.$cards = this._appendCol();
        col.groupHead.style.width = col.groupBody.style.width = (col.widthValue = 20) + "px";
        col.slot = slot;
        col.titleCell.className = this.gridCss.title + " s-list-cards-cell-opener";
        var opener = document.createElement("a");
        opener.className = this.list.$skin + "-cardview-opener s-close";
        slot.appendChild(col.titleCell).appendChild(opener);
        return col;
    },
    _appendRecordSelectorCol: function(slot){
        var col = this.cols.$recordSelector = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        this.list._store.selector.appendToTitle(slot.appendChild(col.titleCell));
        col.widthValue = this.list._store.selector.getWidth();
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        return col;
    },
    _appendMenusBoxCol: function(slot){
        var col = this.cols.$menusBox = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.gridCss.title;
        slot.appendChild(col.titleCell);
        col.$quickActions = {};
        col.widthValue = col.width = 0;
        col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
        return col;
    },
    setMenusBoxCol: function($quickAction, isRemoved){
        var col = this.cols.$menusBox;
        if (isRemoved) {
            if (!$quickAction) {
                col.$quickActions = {};
                col.widthValue = col.width = 0;
                col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
            }
            else {
                if (col.$quickActions[$quickAction]) {
                    delete col.$quickActions[$quickAction];
                    col.widthValue = (col.width -= 17) + 9;
                    col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
                }
            }
        }
        else {
            if (!col.$quickActions[$quickAction]) {
                col.$quickActions[$quickAction] = true;
                col.widthValue = (col.width += 17) + 9;
                col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
            }
        }
    },
    ensureCardView: function(){
        var self = this
        var $arrayBinds = [];
        if (!self.list.$item.$cards) {
            //parseItems
            var $items = this.list.$item.$layout.$items;
            for (var ii = 0, jj = $items.length; ii < jj; ii++) {
                var $item = $items[ii];
                var $field = this.list.$fieldProperties[$item.$bind];
                if ($field && !$field.$isHidden && !$item.$isHidden) {
                    switch ($field.$type) {
                        case "application/x-array":
                        case "application/x-object":
                        case "text/rtf":
                        case "text/html":
                            if (!$field.$isHidden) {
                                if (self.list.$item.$cards) {
                                    $field.$isHidden = true;
                                }
                                else {
                                    $arrayBinds.push($item.$bind);
                                }
                            }
                            break;
                    }
                }
            }
            if ($arrayBinds.length > 0) {
                self.list.$item.$layout.$items = self.list.$item.$layout.$items.filter(function($item){
                    return $arrayBinds.indexOf($item.$bind) < 0;
                });
                self.list.$item.$cards = {
                    $layout: {
                        $layoutType: "tabs",
                        $items: $arrayBinds.map(function($bind){
                            var $field = self.list.$fieldProperties[$bind];
                            return {
                                $category: "section",
                                $title: self.list.getLocalizedTitle($field.$shortTitle || $field.$title || ""),
                                $layout: {
                                    $items: [{
                                        $bind: $bind,
                                        $isTitleHidden: true
                                    }]
                                }
                            
                            };
                        })
                    }
                };
            }
        }
        if (self.list.$item.$cards) {
            self.cardview = new CardViewDecorator();
            self.cardview.initialize(self);
        }
    },
    drawBuilder: function(){
        var $skin = this.list.$skin = this.list.$item.$skin || this.$defaultSkin;
        this.gridCss = {
            title: $skin + "-title-cell",
            cell: $skin + "-cell",
            rowIndex: $skin + "-cell " + $skin + "-row-index"
        };
        this.ensureCardView();
        this.list.applyDesignMetaData(this.list.$item, false);
        this.list.setState(this.list.$field);
        this.list.parseCapabilities(this.list.$prototype.$capabilities);
        this._toggleDataList(true);
        this.list.applyCapabilities();
        this._bodyTable.style.display = "";
    },
    onAfterDataBinding: function(){
        if (this.cardview) {
            if (this.cardview.$cardsPosition != "inline" && Object.keys(this.list_store.selector.records).length == 0) {
                if (this.list._store._records.length > 0) {
                    this.list_store.selector.select(this.list._store._records[0].$uuid, true);
                }
            }
        }
    },
    dispose: function(){
        if (this.list && this.list._store && this.list.filterCapability) {
            this.list.filterCapability.removeQuickFilter();
        }
        this._bindScrollEvent(false);
        if (this.scrollLinks) {
            document.site.removeDomChild(this.scrollLinks);
        }
        this.scrollLinks = this._$$hscroller = this._$$bodySlot = this._$$headSlot = this.list = null;
    }
});
