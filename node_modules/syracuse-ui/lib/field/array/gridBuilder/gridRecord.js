"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function GridRecord(){
}

exports.GridRecord = helpers.defineClass(GridRecord, RecordArticle, {
    dispose: function(){
        this.cardview = this._dataRow = this._cardsRow = this._cardsSlot = this.cardsOpener = null;
        RecordArticle.prototype.dispose.call(this);
    },
    notifyReorder: function(targetRecord, $insert){
        if (targetRecord) {
            this.$$item[$insert](targetRecord.$$item);
        }
        else {
            this.builder._$$body[$insert](this.$$item);
        }
        var $$referenceRow = this.$$item;
        if (this.rowDiagnose) {
            $$referenceRow.after(this.rowDiagnose);
            $$referenceRow = $(this.rowDiagnose);
        }
        if (this._cardsRow) {
            $$referenceRow.after(this._cardsRow);
        }
    },
    ensureFieldDiagnoseSlot: function(field){
        if (!this.cellDiagnose) {
            this.cellDiagnose = document.createElement("td");
            this.cellDiagnose.className = this.boxParent.$skin + "-diagnose-cell";
            this.cellDiagnose.setAttribute("colspan", this.builder._orderCols.length);
            this.rowDiagnose = document.createElement("tr");
            this.rowDiagnose.setAttribute("data-s-record", this.$uuid);
            $(this.rowDiagnose).insertAfter(this.$$item);
            this.rowDiagnose.appendChild(this.cellDiagnose);
        }
        this.cellDiagnose.appendChild(field.domDiagnose);
    },
    initializeRecord: function(options){
        options.$item = {
            $layout: {
                $items: this.list.$item.$layout.$items
            }
        };
    },
    remove: function(){
        this.$$item.remove();
        if (this.rowDiagnose) {
            document.site.removeDomChild(this.rowDiagnose);
        }
        if (this._cardsRow) {
            document.site.removeDomChild(this._cardsRow);
        }
    },
    appendRowIndexCell: function(slot){
        this._rowIndexCell = document.createElement("td");
        var css = this.builder.gridCss.rowIndex;
        if (this.list.$capability.reorder) {
            css += " s-list-record-reorder";
        }
        this._rowIndexCell.className = css;
        slot.appendChild(this._rowIndexCell);
        this.renderRowIndex();
        return this._rowIndexCell;
    },
    appendFieldCell: function(slot, $item){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.cell;
        this.page.loadNewItem(slot.appendChild(td), {
            $bind: $item.$bind,
            $isCellChild: true,
            $inplace: true
        }, this)
        return td;
    },
    appendRecordSelector: function(slot){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.cell;
        this._selectorCheck = this.list.selector.appendToRecord(slot.appendChild(td));
        return td;
    },
    onSelectMouseEvent: function(event){
        document.site.toggleClass(this._dataRow, "s-record-over", event.type == "mouseenter");
    },
    drawBox: function(){
        this.$isVerticalDirection = true;
        this._dataRow = document.createElement("tr");
        this._dataRow.setAttribute("data-s-record", this.$uuid);
        
        
        if (this.isInsert) {
            this.$$item = $(this._dataRow);
            if (this.list.records[this.$recordIndex]) {
                this.$$item.insertBefore(this.list.records[this.$recordIndex].$$item);
            }
            else {
                //hack temp pour teddy                    
                this.$$item = $(this.builder._body.appendChild(this._dataRow));
            }
            delete this.isInsert;
        }
        else {
            this.$$item = $(this.builder._body.appendChild(this._dataRow));
        }
        
        if (this.list.$item.$alternateStyle && this.$recordIndex % 2) {
            this._dataRow.className = this.list.$skin + "-alt";
        }
        
        if (this.list.treeDecorator) {
            this.list.treeDecorator.appendTreeviewCell(this, this._dataRow);
        }
        else {
            this.appendRowIndexCell(this._dataRow);
        }
        if (this.list.$item.$cards && this.list.$item.$cards.$position == "inline") {
            var th = document.createElement("td");
            th.className = this.builder.gridCss.cell + " s-list-cards-cell-opener";
            this.cardsOpener = document.createElement("a");
            this.cardsOpener.className = "s-cardview-opener s-close";
            th.appendChild(this.cardsOpener);
            this._dataRow.appendChild(th);
        }
        if (this.list.selector.useColumnSelector) {
            this.appendRecordSelector(this._dataRow);
        }
        if (!this.list.$item.$isMenuRecordHidden) {
            this._menusBoxSlot = document.createElement("td");
            this._menusBoxSlot.className = this.builder.gridCss.cell + " " + this.list.$skin + "-actions-cell";
            this._dataRow.appendChild(this._menusBoxSlot);
            this.list.applyCapabilities(this);
        }
        if (this.list.selector.isRowMode) {
            this._dataRow.className = "s-list-selector-row";
        }
        //parseItems
        var $items = this.list.$item.$layout.$items;
        for (var ii = 0, jj = $items.length; ii < jj; ii++) {
            var $item = $items[ii];
            var $field = this.list.$fieldProperties[$item.$bind];
            if ($field && !$field.$isHidden) {
                this.appendFieldCell(this._dataRow, $item);
            }
        }
    },
    onMenuClick: function(menuItem){
        var self = this;
        var $serverIndex, $startIndex;
        switch (menuItem.$bind) {
            case "$first":
                $startIndex = 1;
                $serverIndex = 0;
                break;
            case "$previous":
                $serverIndex = (self.list.pagingCapability.$startIndex - 1) + (self.$recordIndex - 1);
                break;
            case "$next":
                $serverIndex = (self.list.pagingCapability.$startIndex - 1) + (self.$recordIndex + 1);
                break;
            case "$last":
                $serverIndex = this.list.dataset.length - 1;
                break;
            default:
                return true;
        }
        $startIndex = (Math.floor($serverIndex / self.list.pagingCapability._$itemsPerPage) * self.list.pagingCapability._$itemsPerPage) + 1;
        setTimeout(function(){
            var list = self.list;
            if ($startIndex != list.pagingCapability.$startIndex) {
                list.helper.fetchClientRecordSet(list, {
                    params: {
                        startIndex: $startIndex
                    }
                });
            }
            list.selector.select(list.dataset[$serverIndex].$uuid, true);
        }, 10);
        return false;
    },
    toggleCardView: function(show){
        if (this.builder._cardSlot) {
            if (show) {
                if (this.builder.recordCardView) {
                    this.removeItem(this.builder.recordCardView.cardview, true);
                    delete this.builder.recordCardView.cardview;
                }
                this.builder.recordCardView = this;
                document.site.emptyDom(this.builder._cardSlot);
                var $cards = this.list.$item.$cards;
                var $pagerActions;
                if (this.list.isClientFetch && this.list.$item.$cards.$position == "popup") {
                    $cards.$isTitleHidden = !($cards.$title && $cards.$title != "-");
                    $cards = {
                        $layout: {
                            $items: [{
                                $category: "menus",
                                $skin: "s-list-menus",
                                $layout: {
                                    $layoutType: "row",
                                    $autoSize: true,
                                    $items: [{
                                        $noText: true,
                                        $bind: "$create",
                                        $skin: "s-record-action-create"
                                    }, {
                                        $bind: "$delete"
                                    }, {
                                        $isMenusBag: true,
                                        $category: "menus",
                                        $title: this.list._localize.mn_more,
                                        $isTitlePicker: true,
                                        $isBoxCollapsable: true,
                                        $isPopupContent: true,
                                        $id: this.id + "-menu-picker",
                                        $skin: "s-list-menus",
                                        $itemSkin: "s-field-menus-link",
                                        onEnsureVisibility: function(menuGroup, $menuItemBind, menuItem){
                                            //debugger;
                                        }
                                    }]
                                }
                            }, $cards]
                        }
                    };
                    if (this.list.dataset.length > 1) {
                        var $pagerMenus = {
                            $category: "menus",
                            $isTitlePicker: true,
                            $skin: "s-page-pager",
                            $itemIcon: {
                                $mode: "iconText",
                                $path: "site/s-record-"
                            },
                            $layout: {
                                $layoutType: "row",
                                $autoSize: true,
                                $items: [{
                                    $bind: "$first"
                                }, {
                                    $bind: "$previous"
                                }, {
                                    $bind: "$next"
                                }, {
                                    $bind: "$last"
                                }]
                            }
                        };
                        $cards.$layout.$items[0].$layout.$items.push($pagerMenus);
                        $pagerActions = {
                            $actions: {
                                $first: {
                                    $title: this.list._localize.card_first_record,
                                    $isDisabled: this.list.pagingCapability.$startIndex == 1 && this.$recordIndex == 0
                                },
                                $previous: {
                                    $title: this.list._localize.card_prev_record,
                                    $isHidden: this.list.dataset.length <= 2,
                                    $isDisabled: this.list.pagingCapability.$startIndex == 1 && this.$recordIndex == 0
                                },
                                $next: {
                                    $title: this.list._localize.card_next_record,
                                    $isHidden: this.list.dataset.length <= 2,
                                    $isDisabled: (this.list.pagingCapability.$startIndex + this.$recordIndex) == this.list.dataset.length
                                },
                                $last: {
                                    $title: this.list._localize.card_lest_record,
                                    $isDisabled: (this.list.pagingCapability.$startIndex + this.$recordIndex) == this.list.dataset.length
                                }
                            }
                        };
                    }
                }
                this.builder._cardSlot.setAttribute("data-s-record", this.$uuid);
                this.builder._cardSlot.setAttribute("data-s-article", this.id);
                this.cardview = this.list.page.loadNewItem(this.builder._cardSlot, $cards, this);
                if ($pagerActions) {
                    this.applyActionLinkChange($pagerActions);
                }
            }
        }
        else {
            if (!this._cardsRow) {
                this._cardsSlot = document.createElement("td");
                this._cardsSlot.className = this.boxParent.$skin + "-cards-cell";
                this._cardsSlot.setAttribute("colspan", this.builder._orderCols.length);
                this._cardsRow = document.createElement("tr");
                this._cardsSlot.setAttribute("data-s-record", this.$uuid);
                this._cardsSlot.setAttribute("data-s-article", this.id);
                this.$$item.after(this._cardsRow);
                this._cardsRow.appendChild(this._cardsSlot);
                this.cardview = this.list.page.loadNewItem(this._cardsSlot, this.list.$item.$cards, this);
            }
            this._cardsRow.style.display = show ? "" : "none";
        }
    },
    togglePopupCard: function(){
        var self = this;
        if (!self.builder.popupCard) {
            if (!self.builder.popupCardSlot) {
                self.builder.popupCardSlot = document.createElement("div");
                self.builder.popupCardSlot.className = "s-list-card-slot-popup";
                self.builder.popupCardSlotHeader = document.createElement("div");
                self.builder.popupCardSlotHeader.className = "s-list-card-slot-popup-header";
                self.builder.popupCardSlot.appendChild(self.builder.popupCardSlotHeader).className = "s-list-card-slot-popup-header";
                self.builder.popupCardSlot.appendChild(self.builder._cardSlot);
            }
            self.cardview._header.style.display
            self.builder.popupCard = self.page.openDialog({
                isAutoClose: false,
                $maxWidth: 600,
                $dialogMode: "popup",
                content: self.cardview,
                dragSpot: self.builder.popupCardSlotHeader,
                $$dialog: $(this.builder.popupCardSlot),
                position2: {
                    my: "left top",
                    at: "left bottom",
                    of: $(self._dataRow)
                },
                onClose: function(){
                    self.popup = null;
                    document.controller.disposeObject(self.popup);
                    return true;
                }
            });
            self.builder.popupCard.appendCloseButton(self.builder.popupCardSlotHeader);
        }
        else {
            if (self.builder.popupCard) {
                self.builder.popupCard.close();
            }
        }
    },
    highlightSelection: function(selected){
        document.site.toggleClass(this._dataRow, "s-list-record-selected", selected);
        if (this.list.$item.$cards) {
            if (this._cardsRow) {
                document.site.toggleClass(this._cardsRow, "s-list-record-selected", selected);
            }
            else {
                if (selected) {
                    this.toggleCardView(true);
                }
            }
        }
        if (this._selectorCheck) {
            this._selectorCheck.checked = selected;
        }
        if (this.list.treeDecorator) {
            this.list.treeDecorator.highlightSelection(true);
        }
    }
});
