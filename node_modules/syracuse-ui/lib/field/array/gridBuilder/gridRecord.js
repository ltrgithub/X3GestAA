"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function _appendRowIndexCell(record) {
	var btn = record.rowIndexBtn = document.createElement("td");
	var css = record.list.cssRowIndex;
	if (record.list.$item.$selectByRowIndex) {
		css += " s-list-row-index-selector";
		btn.syraOnClick = "onSelectorClick";
	}
	if (record.list.$capability.reorder) {
		record.reorderBtn = record.rowIndexBtn;
		record.reorderBtn.syraReorderRecordId = record.list.id;
		css += " s-grid-record-reorder";
		record.rowIndexBtn.syraDragSpot = record.id;
	}
	btn.className = css;
	record.dataRow.appendChild(btn);
	record.setRowIndex();
};

function _addFieldCells(record) {
	var list = record.list;
	var $items = list.$item.$layout.$items;
	var cssCell = list.cssCell;
	if (list.treeDecorator) {
		cssCell += " s-list-no-border";
	}
	record.fieldCells = {};
	for (var ii = 0, jj = $items.length; ii < jj; ii++) {
		var $item = $items[ii];
		var $field = list.$fields[$item.$bind];
		if ($field && !$field.$isExcluded) {
			var td = document.createElement("td");
			td.className = cssCell;
			var col = list.cols[$item.$bind];
			if (col.$isHidden) {
				td.style.display = "none";
			}
			record.dataRow.appendChild(td);
			if (col.$isFixed) {
				td.className += " s-grid-col-fixed";
				if (col == list.lastColFixed) {
					td.className += " s-grid-col-fixed-last";
				}
			}
			record.fieldCells[$item.$bind] = record.page.loadNewItem(record.dataRow.appendChild(td), {
				$bind: $item.$bind,
				$isCellChild: true,
				$inplace: true
			}, record);
		}
	}
}

function _drawRecord(record) {
	var list = record.list;
	record.isGridRecord = true;
	record.$mnPickersCss = record.$mnPickersCss || "s-list-record-picker";
	record.$iconPath = list.$iconPath;
	record.$isVerticalDirection = true;
	record.domItem = record.dataRow = document.createElement("tr");
	record.domItem.syraItem = record.id;
	record.dataRow.setAttribute("data-s-record", record.domItem.syraRecord = record.$uuid);
	record.dataRow.className = list.$skin + "-row";
	if (list.treeDecorator) {
		list.treeDecorator.appendCellNode(record, record.dataRow);
	} else {
		if (record.insertBeforeRecord) {
			record.insertBeforeRecord.dataRow.parentNode.insertBefore(record.dataRow, record.insertBeforeRecord.dataRow);
			delete record.insertBeforeRecord;
		} else {
			list.body.appendChild(record.dataRow);
		}
		list.cols.$rowIndex && _appendRowIndexCell(record);
	}
	if (list.cardDecorator.isRowCardMode) {
		record.dataRow.appendChild(list.cardDecorator.appendRowCardOpener(record));
	}
	if (list.selector.useColumnSelector) {
		var td = document.createElement("td");
		td.className = list.cssCell;
		record._selectorCheck = list.selector.appendToRecord(record.dataRow.appendChild(td));
	}
	if (!list.$item.$isMenuRecordHidden) {
		record.menusSlot = document.createElement("td");
		record.menusSlot.className = list.cssCell + " " + list.$skin + "-actions-cell";
		record.dataRow.appendChild(record.menusSlot);
		if (list.treeDecorator) {
			record.menusSlot.className += " s-list-tree-cell";
		}
		list.capabilityMaker.applyToRecord(record);
	}
	record.dataRow.syrainout = record.id;
	if (list.selector.isRowMode) {
		record.dataRow.syraOnClick = "onSelectorClick";
		record.dataRow.className += " s-list-selector-row";
	}
	_addFieldCells(record);
}

function GridRecord() {}

exports.GridRecord = helpers.defineClass(GridRecord, RecordArticle, {
	onChildFieldFocus: function(field, isFocusIn) {
		if (this.rowIndexBtn && syra_site.isTabletDevice) {
			//for classicPage, esc is done by default on click
			syra_site.dom.toggleClass(this.rowIndexBtn, "s-grid-row-escape", this._hasEscapeRowButton = isFocusIn);
			this.setRowIndex();
		}
	},
	applyChange: function(newData) {
		RecordArticle.prototype.applyChange.call(this, newData);
		this.list.cardDecorator.onRecordApplyChange(this);
		newData && syra_list.grid.columnFitter.calculateMaxFieldLength(this);
	},
	disposeCard: function() {
		this.layoutSlot = this.layoutContent = this.domItem = this.body = this.rowCardRow = this.rowCardCell = this.rowCardOpener = this.cardItem = null;
	},
	dispose: function() {
		this.disposeCard();
		this.rowIndexBtn = this.fieldCells = this.treeNode = this.dataRow = this.popupCard = this._selectorCheck = this.titleSlot = null;
		RecordArticle.prototype.dispose.call(this);
	},
	reorderItem: function(targetRecord, isAfter) {
		if (targetRecord) {
			targetRecord.dataRow.parentNode.insertBefore(this.dataRow, isAfter ? targetRecord.dataRow.nextSibling : targetRecord.dataRow);
		} else {
			if (isAfter) {
				this.list.body.appendChild(this.dataRow);
			} else {
				this.list.body.insertBefore(this.dataRow, this.list.body.firstChild);
			}
		}
		if (this.rowCardRow) {
			this.dataRow.parentNode.insertBefore(this.rowCardRow, this.dataRow.nextSibling);
		}
	},
	remove: function() {
		RecordArticle.prototype.remove.call(this);
		if (this.rowCardRow) {
			syra_site.dom.removeChild(this.rowCardRow);
		}
	},
	drawBox: function() {
		_drawRecord(this);
	},
	onMenuClick: function(menuItem) {
		var $newIndex, $startIndex;
		switch (menuItem.$sourceBind) {
			case "$first":
				$startIndex = 1;
				$newIndex = 0;
				break;
			case "$previous":
				$newIndex = (this.list.pagging.$startIndex - 1) + (this.getRecordIndex() - 1);
				break;
			case "$next":
				$newIndex = (this.list.pagging.$startIndex - 1) + (this.getRecordIndex() + 1);
				break;
			case "$last":
				$newIndex = this.list.dataset.length - 1;
				break;
			case "$recordCard":
				syra_list.grid.popupCardBuilder.togglePopup(this);
				return false;
			default:
				return RecordArticle.prototype.onMenuClick.call(this, menuItem);
		}
		return this.doMenuClick($newIndex);
	},
	doMenuClick: function($newIndex) {
		var list = this.list;
		var $startIndex = (Math.floor($newIndex / list.pagging.getItemsPerPage()) * list.pagging.getItemsPerPage()) + 1;
		if ($startIndex != list.pagging.$startIndex) {
			var options = list.clientFetchOptions || {};
			(options.params = options.params || {}).startIndex = $startIndex;
			list.fetcher.fetchClientRecordSet(list, options);
		}
		list.selector.selectRecord(list.clientDataset[$newIndex].$uuid, true);
		return false;
	},
	applyShortCuts: function(shortcuts, event, focusField) {
		var bind = null,
			mnuItem, ret = false;
		var sc = ["delete", "insert"],
			len = sc.length,
			i;
		var scMenuItems = ["$delete", "$create"];
		if (this.menuItems && this.$capability) {
			for (i = 0; i < len; i++) {
				if (shortcuts[sc[i]]) {
					bind = this.$capability[sc[i]] ? scMenuItems[i] : null;
					break;
				}
			}
			if (bind && (mnuItem = this.menuItems[bind]) && mnuItem[0]) {
				syra_menus.click.menuItem(mnuItem[0], event);
				ret = true;
			}
		}
		return ret;
	}
});