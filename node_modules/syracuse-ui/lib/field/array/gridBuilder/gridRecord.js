"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function _drawVgridRecord(record){
    var cols = record.builder.cols;
    record.orderCols = [];
    record.$isVerticalDirection = false;
    if (record.list.$item.$isRowIndexVisible || record.list.$item.$selectByRowIndex) {
        var td = record.appendRowIndexCell(record.builder.cols.$rowIndex.slot);
        td.setAttribute("data-s-record", record.$uuid);
        if (record.list.selector.isRowMode) {
            td.className += " s-list-selector-row";
        }
        record.orderCols.push(td);
    }
    if (record.list.selector.useColumnSelector) {
        record.orderCols.push(record.appendRecordSelector(cols.$recordSelector.slot));
        record._selectorCheck.setAttribute("data-s-record", record.$uuid);
    }
    
    if (!record.list.$item.$isMenuRecordHidden) {
        record._menusBoxSlot = document.createElement("td");
        record._menusBoxSlot.className = record.builder.gridCss.cell + " " + record.list.$skin + "-actions-cell";
        record.orderCols.push(cols.$menusBox.slot.appendChild(record._menusBoxSlot));
        
        record.list.applyCapabilities(record);
    }
    
    //parseItems
    var $items = record.list.$item.$layout.$items;
    for (var ii = 0, jj = $items.length; ii < jj; ii++) {
        var $item = $items[ii];
        var $field = record.list.$fieldProperties[$item.$bind];
        if ($field && !$field.$isHidden) {
            var td = record.appendFieldCell(cols[$item.$bind].slot, $item, true);
            td.setAttribute("data-s-record", record.$uuid);
            if (record.$isEditMode) {
                record.boundFields[$item.$bind][0]._dataValue.style.minWidth = cols[$item.$bind].groupBody.style.width;
            }
            if (record.list.selector.isRowMode) {
                td.className += " s-list-selector-row";
            }
            record.orderCols.push(td);
        }
    }
}

function _reorderVGridRecord(sourceRecord, targetRecord, $insert){
    for (var ii = 0; ii < sourceRecord.orderCols.length; ii++) {
        $(sourceRecord.orderCols[ii])[$insert](targetRecord.orderCols[ii]);
    }
}

function GridRecord(){
}

exports.GridRecord = helpers.defineClass(GridRecord, RecordArticle, {
    dispose: function(){
        this.$isVerticalDirection = this._dataRow = null;
        RecordArticle.prototype.dispose.call(this);
    },
    notifyReorder: function(targetRecord, $insert){
        if (this.list.$item.$format == "vgrid") {
            _reorderVGridRecord(this, targetRecord, $insert);
        }
        else {
            if (targetRecord) {
                this.$$item[$insert](targetRecord.$$item);
            }
            else {
                this.builder._$$body[$insert](this.$$item);
            }
            var $$referenceRow = this.$$item;
            if (this.rowDiagnose) {
                $$referenceRow.after(this.rowDiagnose);
                $$referenceRow = $(this.rowDiagnose);
            }
            if (this._cardsSlot) {
                $$referenceRow.after(this._cardsSlot);
            }
        }
    },
    ensureFieldDiagnoseSlot: function(field){
        if (!this.cellDiagnose) {
            this.cellDiagnose = document.createElement("td");
            this.cellDiagnose.className = this.boxParent.$skin + "-diagnose-cell";
            this.cellDiagnose.setAttribute("colspan", this.boxParent.builder._orderCols.length);
            this.rowDiagnose = document.createElement("tr");
            this.rowDiagnose.setAttribute("data-s-record", this.$uuid);
            $(this.rowDiagnose).insertAfter(this.$$item);
            this.rowDiagnose.appendChild(this.cellDiagnose);
        }
        this.cellDiagnose.appendChild(field.domDiagnose);
    },
    initializeRecord: function(options){
        options.$item = {
            $layout: {
                $items: this.list.$item.$layout.$items
            }
        };
    },
    remove: function(){
        if (this.list.$item.$format == "grid") {
            this.$$item.remove();
            if (this.rowDiagnose) {
                document.site.removeDomChild(this.rowDiagnose);
            }
            if (this.builder.cardview) {
                this.builder.cardview.onRecordRemove(this);
            }
        }
    },

    appendRowIndexCell: function(slot){
        this._rowIndexCell = document.createElement("td");
        var css = this.builder.gridCss.rowIndex;
        if (this.list.$item.$selectByRowIndex) {
            css += " s-list-row-index-selector";
        }
        if (this.list.$capability.reorder) {
            css += " s-list-record-reorder";
        }
        this._rowIndexCell.className = css;
        slot.appendChild(this._rowIndexCell);
        this.renderRowIndex();
        return this._rowIndexCell;
    },
    appendFieldCell: function(slot, $item){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.cell;
        this.page.loadNewItem(slot.appendChild(td), {
            $bind: $item.$bind,
            $isCellChild: true,
            $inplace: true
        }, this)
        return td;
    },
    appendRecordSelector: function(slot){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.cell;
        this._selectorCheck = this.list.selector.appendToRecord(slot.appendChild(td));
        return td;
    },
    onSelectMouseEvent: function(event){
        document.site.toggleClass(this._dataRow, "s-record-over", event.type == "mouseenter");
    },
    drawBox: function(){
        if (this.list.$item.$format == "vgrid") {
            _drawVgridRecord(this);
        }
        else {
            this.$isVerticalDirection = true;
            this._dataRow = document.createElement("tr");
            this._dataRow.setAttribute("data-s-record", this.$uuid);
            
            
            if (this.isInsert) {
                this.$$item = $(this._dataRow);
                if (this.builder.list.records[this.$recordIndex]) {
                    this.$$item.insertBefore(this.builder.list.records[this.$recordIndex].$$item);
                }
                else {
                    //hack temp pour teddy                    
                    this.$$item = $(this.builder._body.appendChild(this._dataRow));
                }
                delete this.isInsert;
            }
            else {
                this.$$item = $(this.builder._body.appendChild(this._dataRow));
            }
            
            if (this.list.$item.$alternateStyle && this.$recordIndex % 2) {
                this._dataRow.className = this.list.$skin + "-alt";
            }

            if (this.list.treeDecorator) {
                this.list.treeDecorator.appendTreeviewCell(this, this._dataRow);
            }
            if (this.list.$item.$isRowIndexVisible || this.list.$item.$selectByRowIndex) {
                this.appendRowIndexCell(this._dataRow);
            }
            
            if (this.builder.cardview) {
                this.builder.cardview.onRecordDrawBox(this);
            }
            if (this.list.selector.useColumnSelector) {
                this.appendRecordSelector(this._dataRow);
            }
            if (!this.list.$item.$isMenuRecordHidden) {
                this._menusBoxSlot = document.createElement("td");
                this._menusBoxSlot.className = this.builder.gridCss.cell + " " + this.list.$skin + "-actions-cell";
                this._dataRow.appendChild(this._menusBoxSlot);
                this.list.applyCapabilities(this);
            }
            
            
            if (this.list.selector.isRowMode) {
                this._dataRow.className = "s-list-selector-row";
            }
            
            //parseItems
            var $items = this.list.$item.$layout.$items;
            for (var ii = 0, jj = $items.length; ii < jj; ii++) {
                var $item = $items[ii];
                var $field = this.list.$fieldProperties[$item.$bind];
                if ($field && !$field.$isHidden) {
                    this.appendFieldCell(this._dataRow, $item);
                }
            }
        }
    },
    highlightSelection: function(selected){
        if (this.list.$item.$format == "grid") {
            document.site.toggleClass(this.$$item[0], "s-list-record-selected", selected);
            if (this.builder.cardview) {
                this.builder.cardview.onRecordHighlightSelection(this, selected);
            }
        }
        else {
            if (this.orderCols) {
                for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
                    document.site.toggleClass(this.orderCols[ii], "s-list-record-selected", selected);
                }
            }
        }
        if (this._selectorCheck) {
            this._selectorCheck.checked = selected;
        }
    }
});
