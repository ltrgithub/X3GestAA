"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function GridRecord(){
}

exports.GridRecord = helpers.defineClass(GridRecord, RecordArticle, {
    dispose: function(){
        this.cardview = this._dataRow = this._cardsRow = this._cardsSlot = this.cardsOpener = null;
        RecordArticle.prototype.dispose.call(this);
    },
    notifyReorder: function(targetRecord, $insert){
        if (targetRecord) {
            this.$$item[$insert](targetRecord.$$item);
        }
        else {
            this.builder._$$body[$insert](this.$$item);
        }
        var $$referenceRow = this.$$item;
        if (this.rowDiagnose) {
            $$referenceRow.after(this.rowDiagnose);
            $$referenceRow = $(this.rowDiagnose);
        }
        if (this._cardsRow) {
            $$referenceRow.after(this._cardsRow);
        }
    },
    ensureFieldDiagnoseSlot: function(field){
        if (!this.cellDiagnose) {
            this.cellDiagnose = document.createElement("td");
            this.cellDiagnose.className = this.boxParent.$skin + "-diagnose-cell";
            this.cellDiagnose.setAttribute("colspan", this.builder.orderCols.length);
            this.rowDiagnose = document.createElement("tr");
            this.rowDiagnose.setAttribute("data-s-record", this.$uuid);
            $(this.rowDiagnose).insertAfter(this.$$item);
            this.rowDiagnose.appendChild(this.cellDiagnose);
        }
        this.cellDiagnose.appendChild(field.domDiagnose);
    },
    initializeRecord: function(options){
        options.$item = {
            $layout: {
                $items: this.list.$item.$layout.$items
            }
        };
    },
    remove: function(){
        this.$$item.remove();
        if (this.rowDiagnose) {
            document.site.removeDomChild(this.rowDiagnose);
        }
        if (this._cardsRow) {
            document.site.removeDomChild(this._cardsRow);
        }
    },
    appendRowIndexCell: function(slot){
        this._rowIndexCell = document.createElement("td");
        var css = this.builder.gridCss.rowIndex;
        if (this.list.$capability.reorder) {
            css += " s-list-record-reorder";
        }
        this._rowIndexCell.className = css;
        slot.appendChild(this._rowIndexCell);
        this.renderRowIndex();
        return this._rowIndexCell;
    },
    appendFieldCell: function(slot, $item){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.cell;
        this.page.loadNewItem(slot.appendChild(td), {
            $bind: $item.$bind,
            $isCellChild: true,
            $inplace: true
        }, this)
        return td;
    },
    appendRecordSelector: function(slot){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.cell;
        this._selectorCheck = this.list.selector.appendToRecord(slot.appendChild(td));
        return td;
    },
    onSelectMouseEvent: function(event){
        document.site.toggleClass(this._dataRow, "s-record-over", event.type == "mouseenter");
    },
    drawBox: function(){
        this.$isVerticalDirection = true;
        this._dataRow = document.createElement("tr");
        this._dataRow.setAttribute("data-s-record", this.$uuid);
        if (this.isInsert) {
            this.$$item = $(this._dataRow);
            if (this.list.records[this.$recordIndex]) {
                this.$$item.insertBefore(this.list.records[this.$recordIndex].$$item);
            }
            else {
                //hack temp pour teddy                    
                this.$$item = $(this.builder._body.appendChild(this._dataRow));
            }
            delete this.isInsert;
        }
        else {
            this.$$item = $(this.builder._body.appendChild(this._dataRow));
        }
        if (this.list.$item.$alternateStyle && this.$recordIndex % 2) {
            this._dataRow.className = this.list.$skin + "-alt";
        }
        if (this.list.treeDecorator) {
            this.list.treeDecorator.appendTreeviewCell(this, this._dataRow);
        }
        else {
            this.appendRowIndexCell(this._dataRow);
        }
        if (this.list.$item.$cards && this.list.$item.$cards.$position == "inline") {
            var th = document.createElement("td");
            th.className = this.builder.gridCss.cell + " s-list-cards-cell-opener";
            this.cardsOpener = document.createElement("a");
            this.cardsOpener.className = "s-cardview-opener s-close";
            th.appendChild(this.cardsOpener);
            this._dataRow.appendChild(th);
        }
        if (this.list.selector.useColumnSelector) {
            this.appendRecordSelector(this._dataRow);
        }
        if (!this.list.$item.$isMenuRecordHidden) {
            this._menusSlot = document.createElement("td");
            this._menusSlot.className = this.builder.gridCss.cell + " " + this.list.$skin + "-actions-cell";
            this._dataRow.appendChild(this._menusSlot);
            this.list.applyCapabilities(this);
        }
        if (this.list.selector.isRowMode) {
            this._dataRow.className = "s-list-selector-row";
        }
        var $items = this.list.$item.$layout.$items;
        for (var ii = 0, jj = $items.length; ii < jj; ii++) {
            var $item = $items[ii];
            var $field = this.list.$fieldProperties[$item.$bind];
            if ($field && !$field.$isHidden) {
                this.appendFieldCell(this._dataRow, $item);
            }
        }
        
        if (this.list.$item.$cards && this.list.$item.$cards.$position == "popup") {
            this.applyActionLinkChange({
                $links: {
                    $recordCard: {
                        $title: this.list._localize.mn_recordCard
                    }
                }
            });
        }
    },
    onMenuClick: function(menuItem){
        var self = this;
        var $serverIndex, $startIndex;
        switch (menuItem.$bind) {
            case "$first":
                $startIndex = 1;
                $serverIndex = 0;
                break;
            case "$previous":
                $serverIndex = (self.list.pagingCapability.$startIndex - 1) + (self.$recordIndex - 1);
                break;
            case "$next":
                $serverIndex = (self.list.pagingCapability.$startIndex - 1) + (self.$recordIndex + 1);
                break;
            case "$last":
                $serverIndex = this.list.dataset.length - 1;
                break;
            case "$recordCard":
                this.builder.cardBuilder.togglePopup(this);
                return false;
            default:
                return RecordArticle.prototype.onMenuClick.call(this, menuItem);
        }
        $startIndex = (Math.floor($serverIndex / self.list.pagingCapability._$itemsPerPage) * self.list.pagingCapability._$itemsPerPage) + 1;
        setTimeout(function(){
            var list = self.list;
            if ($startIndex != list.pagingCapability.$startIndex) {
                list.helper.fetchClientRecordSet(list, {
                    params: {
                        startIndex: $startIndex
                    }
                });
            }
            list.selector.select(list.dataset[$serverIndex].$uuid, true);
        }, 10);
        return false;
    },
    
    highlightSelection: function(selected){
        document.site.toggleClass(this._dataRow, "s-list-record-selected", selected);
        if (this.list.$item.$cards) {
            if (this._cardsRow) {
                document.site.toggleClass(this._cardsRow, "s-list-record-selected", selected);
            }
            else {
                if (selected) {
                    this.builder.cardBuilder.toggleCard(this, true);
                }
            }
        }
        if (this._selectorCheck) {
            this._selectorCheck.checked = selected;
        }
        if (this.list.treeDecorator) {
            this.list.treeDecorator.highlightSelection(true);
        }
        if (selected) {
            if (!this.list.selector.isMulti) {
				this.builder.scroller.scrollToItem(this._dataRow)
           }
        }
    }
});
