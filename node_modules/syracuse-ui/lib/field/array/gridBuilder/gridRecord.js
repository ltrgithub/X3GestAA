"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function GridRecord() {}

exports.GridRecord = helpers.defineClass(GridRecord, RecordArticle, {
	applyChange: function(newData) {
		RecordArticle.prototype.applyChange.call(this, newData);
		if (this.list.$item.$isRowCardAutoHide) {
			this.autoHideCardOpener();
		}
	},
	alertDiagInCard: function() {
		if (!this.isGridCardDiagAlertSet) {
			document.site.showDiagnoses({
				$diagnoses: [{
					$message: this.list.localize.diag_in_card_msg
				}]
			}, this, {
				gridCardData: {
					gridRecordId: this.id,
					gridArticleId: this.articleParent.id,
					linkText: this.list.localize.diag_in_card_link.replace("{gridTitle}", this.articleParent.titleText).replace("{gridIndex}", this.$serverIndex + 1)
				}
			});
			this.isGridCardDiagAlertSet = true;
		}
	},
	showUnbindFieldDiagnose: function($bind, $diagnoses) {
		// check if diag for hidden grid card property
		if (this.builder.$inlineFieldBinds && !this.inlineCardRow) {
			if (this.builder.$inlineFieldBinds.indexOf($bind) >= 0) {
				this.alertDiagInCard();
				return;
			}
		}
		RecordArticle.prototype.showUnbindFieldDiagnose.call(this, $bind, $diagnoses);
	},
	autoHideCardOpener: function() {
		if (this.dataset && this.builder.$complexBinds && this.builder.$complexBinds.length && this.inlineCardOpener) {
			var hasData;
			for (var ii = 0, jj = this.builder.$complexBinds.length; ii < jj; ii++) {
				var data = this.dataset[this.builder.$complexBinds[ii]];
				if (data !== null && data !== undefined) {
					hasData = true;
					break;
				}
			}
			this.inlineCardOpener.style.display = hasData ? "" : "none";
		}
	},
	dispose: function() {
		this.treeNode = this.cardItem = this.popupCardItem = this.dataRow = this.inlineCardRow = this.inlineCardCell = this.inlineCardOpener = null;
		this._selectorCheck = this.titleSlot = null;
		this.isGridCardDiagAlertSet = null;
		RecordArticle.prototype.dispose.call(this);
	},
	reorderItem: function(targetRecord, $insert) {
		if (targetRecord) {
			this.$$item[$insert](targetRecord.$$item);
		} else {
			this.builder._$$body[$insert](this.$$item);
		}
		if (this.inlineCardRow) {
			this.dataRow.parentNode.insertBefore(this.inlineCardRow, this.dataRow.nextSibling);
		}
	},
	onFieldDiagnoseChange: function(add) {
		this.list.onFieldDiagnoseChange(add);
	},
	initializeRecord: function(options) {
		options.$item = {
			$layout: {
				$items: this.list.$item.$layout.$items
			}
		};
	},
	remove: function() {
		if (this.$$item) {
			this.$$item.remove();
		}
		if (this.inlineCardRow) {
			document.site.removeDomChild(this.inlineCardRow);
		}
	},
	applyReorderCapability: function(reorder) {
		document.site.toggleClass(this._rowIndexCell, "s-list-record-reorder", this.hasReorderCapability = reorder);
	},
	appendRowIndexCell: function(slot) {
		this._rowIndexCell = document.createElement("td");
		this._rowIndexCell.className = this.builder.gridCss.rowIndex;
		if (this.list.$capability && this.list.$capability.reorder) {
			this.applyReorderCapability(true);
		}
		slot.appendChild(this._rowIndexCell);
		this.renderRowIndex();
		if (this.list.treeDecorator) {
			// remove border between line 
			this._rowIndexCell.className += " s-list-no-border";
		}
		return this._rowIndexCell;
	},

	appendRecordSelector: function(slot) {
		var td = document.createElement("td");
		td.className = this.builder.gridCss.cell;
		this._selectorCheck = this.list.selector.appendToRecord(slot.appendChild(td));
		return td;
	},
	onSelectMouseEvent: function(event) {
		document.site.toggleClass(this.dataRow, "s-record-over", event.type == "mouseenter");
	},
	appendInlineCardOpener: function() {
		var th = document.createElement("td");
		th.className = this.builder.gridCss.cell + " s-grid-inlinecard-cell-picker";
		this.inlineCardOpener = document.createElement("a");
		this.inlineCardOpener.setAttribute("data-s-picker", "grid-inlinecard");
		this.inlineCardOpener.className = "s-grid-inlinecard-picker s-close";
		this.inlineCardOpener.syraIsDesignEnable = true;
		th.appendChild(this.inlineCardOpener);
		return th;
	},
	drawBox: function() {
		this.$isVerticalDirection = true;
		this.dataRow = document.createElement("tr");
		this.dataRow.setAttribute("data-s-record", this.$uuid);
		if (!this.list.treeDecorator) {
			if (this.isInsert) {
				if (this.list.records[this.$recordIndex]) {
					this.$$item = $(this.dataRow);
					this.$$item.insertBefore(this.list.records[this.$recordIndex].$$item);
				} else {
					//hack temp pour teddy                    
					this.builder.body.appendChild(this.dataRow);
				}
				delete this.isInsert;
			} else {
				this.builder.body.appendChild(this.dataRow);
			}
		}
		this.$$item = $(this.dataRow);
		if (this.list.$item.$alternateStyle && this.$recordIndex % 2) {
			this.dataRow.className = this.list.$skin + "-row-alt";
		} else {
			this.dataRow.className = this.list.$skin + "-row";
		}
		if (this.list.treeDecorator) {
			this.list.treeDecorator.appendCellNode(this, this.dataRow);
		} else {
			this.appendRowIndexCell(this.dataRow);
		}
		if (this.list.$item.$cardItem && this.list.$item.$cardItem.$position == "inline") {
			this.dataRow.appendChild(this.appendInlineCardOpener());
		}
		if (this.list.selector.useColumnSelector) {
			this.appendRecordSelector(this.dataRow);
		}
		if (!this.list.$item.$isMenuRecordHidden) {
			this._menusSlot = document.createElement("td");
			this._menusSlot.className = this.builder.gridCss.cell + " " + this.list.$skin + "-actions-cell";
			this.dataRow.appendChild(this._menusSlot);
			if (this.list.treeDecorator) {
				this._menusSlot.className += " s-list-tree-cell";
			} else {
				this._menusSlot.className += " s-record-actions";
			}
			this.list.applyRecordCapabilities(this);
		}
		if (this.list.selector.isRowMode) {
			this.dataRow.setAttribute("data-s-picker", "list-selector");
			this.dataRow.className = "s-list-selector-row";
		}
		var $items = this.list.$item.$layout.$items;
		var cssCell = this.builder.gridCss.cell;
		if (this.list.treeDecorator) {
			cssCell += " s-list-no-border";
		}
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			var $field = this.list.$fields[$item.$bind];
			if ($field && !$field.$isExcluded) {
				var td = document.createElement("td");
				td.className = cssCell;
				var col = this.builder.cols[$item.$bind];
				if (col.$isHidden) {
					td.style.display = "none";
				}
				this.dataRow.appendChild(td);
				if (col.$isFixed) {
					td.className += " s-grid-col-fixed";
					if (col == this.builder.lastColFixed) {
						td.className += " s-grid-col-fixed-last";
					}
				}
				this.page.loadNewItem(this.dataRow.appendChild(td), {
					$bind: $item.$bind,
					$isCellChild: true,
					$inplace: true
				}, this);

			}
		}
		if (this.list.popupCardBuilder) {
			this.list.popupCardBuilder.togglePopupCardMenu(this, true);
		}
	},
	onMenuClick: function(menuItem) {
		var self = this;
		var $newIndex, $startIndex;
		switch (menuItem.$bind) {
			case "$first":
				$startIndex = 1;
				$newIndex = 0;
				break;
			case "$previous":
				$newIndex = (self.list.pagging.$startIndex - 1) + (self.$recordIndex - 1);
				break;
			case "$next":
				$newIndex = (self.list.pagging.$startIndex - 1) + (self.$recordIndex + 1);
				break;
			case "$last":
				$newIndex = this.list.dataset.length - 1;
				break;
			case "$recordCard":
				this.list.popupCardBuilder.togglePopup(this);
				return false;
			default:
				return RecordArticle.prototype.onMenuClick.call(this, menuItem);
		}
		$startIndex = (Math.floor($newIndex / self.list.pagging.getItemsPerPage()) * self.list.pagging.getItemsPerPage()) + 1;
		setTimeout(function() {
			var list = self.list;
			if ($startIndex != list.pagging.$startIndex) {
				var options = list.clientFetchOptions || {};
				(options.params = options.params || {}).startIndex = $startIndex;
				list.fetchClientRecordSet(options);
			}
			list.selector.select(list.clientDataset[$newIndex].$uuid, true);
		}, 10);
		return false;
	},
	highlightSelection: function(selected) {
		document.site.toggleClass(this.dataRow, "s-list-record-selected", selected);
		if (this.inlineCardRow) {
			document.site.toggleClass(this.inlineCardRow, "s-list-record-selected", selected);
		}
		if (selected) {
			if (this.list.popupCardBuilder) {
				this.list.popupCardBuilder.toggleCard(this, true);
			}
			if (this.list.cardItemSlot) {
				document.site.emptyDom(this.list.cardItemSlot);
				this.list.cardItemSlot.setAttribute("data-s-record", this.$uuid);
				this.list.cardItemSlot.setAttribute("data-s-article", this.id);
				if (!this.cardItem) {
					this.list.$item.$cardItem.$category = this.list.$item.$cardItem.$category || "section";
					this.cardItem = this.list.page.loadNewItem(this.list.cardItemSlot, this.list.$item.$cardItem, this);
				} else {
					this.list.cardItemSlot.appendChild(this.cardItem.$$item[0]);
				}
			}

		}
		if (this._selectorCheck) {
			this._selectorCheck.checked = selected;
		}
		if (selected) {
			if (!this.list.selector.isMulti) {
				this.builder.scroller.scrollToItem(this.dataRow);
			}
		}
	},
	toggleInlineCard: function(show) {
		document.site.toggleClass(this.inlineCardOpener, "s-close", !show);
		if (!this.inlineCardRow) {
			this.inlineCardCell = document.createElement("td");
			this.inlineCardCell.className = this.boxParent.$skin + "-cards-cell";
			this.inlineCardCell.setAttribute("colspan", this.builder.orderCols.length);
			this.inlineCardRow = document.createElement("tr");
			this.inlineCardCell.setAttribute("data-s-record", this.$uuid);
			this.inlineCardCell.setAttribute("data-s-article", this.id);
			this.dataRow.parentNode.insertBefore(this.inlineCardRow, this.dataRow.nextSibling);
			this.inlineCardRow.appendChild(this.inlineCardCell);
			this.cardItem = this.list.page.loadNewItem(this.inlineCardCell, this.list.$item.$cardItem, this);
			this.builder._hasCardview = true;
			this.cardItem._item.className = "s-grid-inlinecard-slot";
			this.resizeCardItems();

			// remove alert diag if any
			if (this.isGridCardDiagAlertSet && this.page.diagnosesPanel) {
				this.page.diagnosesPanel.cleanGridCardAlertDiagnose(this.id);
				this.isGridCardDiagAlertSet = null;
			}
		}
		this.inlineCardRow.style.display = show ? "" : "none";
	},
	resizeCardItems: function() {
		if (this.cardItem || this.popupCardItem) {
			if (this.builder.scroller.bodySlot.clientWidth) {
				if (this.cardItem) {
					this.cardItem._item.style.width = this.builder.scroller.bodySlot.clientWidth + "px";
				}
				if (this.popupCardItem) {
					this.popupCardItem._item.style.width = this.builder.scroller.bodySlot.clientWidth + "px";
				}
				var $binds = Object.keys(this.resizableChildren);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					this.resizableChildren[$binds[ii]].onWindowResize();
				}
			}
		}
	}
});