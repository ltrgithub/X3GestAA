"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function GridRecord() {}

exports.GridRecord = helpers.defineClass(GridRecord, RecordArticle, {
	applyChange: function(newData) {
		RecordArticle.prototype.applyChange.call(this, newData);
		if (this.list.$item.$isRowCardAutoHide) {
			this.autoHideCardOpener();
		}
	},
	autoHideCardOpener: function() {
		if (this.dataset && this.builder._autoInlineCardBinds && this.builder._autoInlineCardBinds.length && this.cardsOpener) {
			var hasData;
			for (var ii = 0, jj = this.builder._autoInlineCardBinds.length; ii < jj; ii++) {
				var data = this.dataset[this.builder._autoInlineCardBinds[ii]];
				if (data && data.length > 0) {
					hasData = true;
					break;
				}
			}
			this.cardsOpener.style.display = hasData ? "" : "none";
		}
	},
	dispose: function() {
		this.treeNode = this.cardview = this.dataRow = this._cardsRow = this._cardsSlot = this.cardsOpener = null;
		this._selectorCheck = this.titleSlot = null;
		RecordArticle.prototype.dispose.call(this);
	},
	reorderItem: function(targetRecord, $insert) {
		if (targetRecord) {
			this.$$item[$insert](targetRecord.$$item);
		} else {
			this.builder._$$body[$insert](this.$$item);
		}
		if (this._cardsRow) {
			this.$$item.after(this._cardsRow);
		}
	},
	onFieldDiagnoseChange: function(add) {
		this.list.onFieldDiagnoseChange(add);
	},
	initializeRecord: function(options) {
		options.$item = {
			$layout: {
				$items: this.list.$item.$layout.$items
			}
		};
	},
	remove: function() {
		if (this.$$item) {
			this.$$item.remove();
		}
		if (this._cardsRow) {
			document.site.removeDomChild(this._cardsRow);
		}
	},
	applyReorderCapability: function(reorder) {
		document.site.toggleClass(this._rowIndexCell, "s-list-record-reorder", this.hasReorderCapability = reorder);
	},
	appendRowIndexCell: function(slot) {
		this._rowIndexCell = document.createElement("td");
		this._rowIndexCell.className = this.builder.gridCss.rowIndex;
		if (this.list.$capability && this.list.$capability.reorder) {
			this.applyReorderCapability(true);
		}
		slot.appendChild(this._rowIndexCell);
		this.renderRowIndex();
		if (this.list.treeDecorator) {
			// remove border between line 
			this._rowIndexCell.className += " s-list-no-border";
		}
		return this._rowIndexCell;
	},

	appendRecordSelector: function(slot) {
		var td = document.createElement("td");
		td.className = this.builder.gridCss.cell;
		this._selectorCheck = this.list.selector.appendToRecord(slot.appendChild(td));
		return td;
	},
	onSelectMouseEvent: function(event) {
		document.site.toggleClass(this.dataRow, "s-record-over", event.type == "mouseenter");
	},
	drawBox: function() {
		this.$isVerticalDirection = true;
		this.dataRow = document.createElement("tr");
		this.dataRow.setAttribute("data-s-record", this.$uuid);
		if (!this.list.treeDecorator) {
			if (this.isInsert) {
				if (this.list.records[this.$recordIndex]) {
					this.$$item = $(this.dataRow);
					this.$$item.insertBefore(this.list.records[this.$recordIndex].$$item);
				} else {
					//hack temp pour teddy                    
					this.builder.body.appendChild(this.dataRow);
				}
				delete this.isInsert;
			} else {
				this.builder.body.appendChild(this.dataRow);
			}
		}
		this.$$item = $(this.dataRow);
		if (this.list.$item.$alternateStyle && this.$recordIndex % 2) {
			this.dataRow.className = this.list.$skin + "-alt";
		}
		if (this.list.treeDecorator) {
			this.list.treeDecorator.appendCellNode(this, this.dataRow);
		} else {
			this.appendRowIndexCell(this.dataRow);
		}
		if (this.list.$item.$cards && this.list.$item.$cards.$position == "inline") {
			var th = document.createElement("td");
			th.className = this.builder.gridCss.cell + " s-list-cards-cell-opener";
			this.cardsOpener = document.createElement("a");
			this.cardsOpener.setAttribute("data-s-picker", "list-card-opener");
			this.cardsOpener.className = "s-cardview-opener s-close";
			th.appendChild(this.cardsOpener);
			this.dataRow.appendChild(th);
		}
		if (this.list.selector.useColumnSelector) {
			this.appendRecordSelector(this.dataRow);
		}
		if (!this.list.$item.$isMenuRecordHidden) {
			this._menusSlot = document.createElement("td");
			this._menusSlot.className = this.builder.gridCss.cell + " " + this.list.$skin + "-actions-cell";
			this.dataRow.appendChild(this._menusSlot);
			if (this.list.treeDecorator) {
				this._menusSlot.className += " s-list-tree-cell";
			} else {
				this._menusSlot.className += " s-record-actions";
			}
			this.list.applyRecordCapabilities(this);
		}
		if (this.list.selector.isRowMode) {
			this.dataRow.setAttribute("data-s-picker", "list-selector");
			this.dataRow.className = "s-list-selector-row";
		}
		var $items = this.list.$item.$layout.$items;
		var cssCell = this.builder.gridCss.cell;
		if (this.list.treeDecorator) {
			cssCell += " s-list-no-border";
		}
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			var $field = this.list.$fieldProperties[$item.$bind];
			if ($field && !$field.$isExcluded) {
				var td = document.createElement("td");
				td.className = cssCell;
				var col = this.builder.cols[$item.$bind];
				if (col.$isHidden) {
					td.style.display = "none";
				}
				this.dataRow.appendChild(td);
				this.page.loadNewItem(this.dataRow.appendChild(td), {
					$bind: $item.$bind,
					$isCellChild: true,
					$inplace: true
				}, this);

			}
		}
		if (this.list.$item.$cards && this.list.$item.$cards.$position == "popup") {
			this.togglePopupViewMenu(true);
		}
	},
	togglePopupViewMenu: function(show) {
		this.applyActionLinkChange({
			$links: {
				$recordCard: {
					$isHidden: !show,
					$title: this.list.localize.flPopupView
				}
			}
		});
	},
	onMenuClick: function(menuItem) {
		var self = this;
		var $serverIndex, $startIndex;
		switch (menuItem.$bind) {
			case "$first":
				$startIndex = 1;
				$serverIndex = 0;
				break;
			case "$previous":
				$serverIndex = (self.list.pagging.$startIndex - 1) + (self.$recordIndex - 1);
				break;
			case "$next":
				$serverIndex = (self.list.pagging.$startIndex - 1) + (self.$recordIndex + 1);
				break;
			case "$last":
				$serverIndex = this.list.dataset.length - 1;
				break;
			case "$recordCard":
				this.builder.togglePopup(this);
				return false;
			default:
				return RecordArticle.prototype.onMenuClick.call(this, menuItem);
		}
		$startIndex = (Math.floor($serverIndex / self.list.pagging.$itemsPerPage) * self.list.pagging.$itemsPerPage) + 1;
		setTimeout(function() {
			var list = self.list;
			if ($startIndex != list.pagging.$startIndex) {
				list.fetchClientRecordSet({
					params: {
						startIndex: $startIndex
					}
				});
			}
			list.selector.select(list.dataset[$serverIndex].$uuid, true);
		}, 10);
		return false;
	},
	onCreated: function() {
		if (this.list.$item.$cards && this.list.$item.$cards.$position == "inline") {
			this.builder.toggleCard(this, true);
		}
	},
	highlightSelection: function(selected) {
		document.site.toggleClass(this.dataRow, "s-list-record-selected", selected);
		if (this.list.$item.$cards) {
			if (this._cardsRow) {
				document.site.toggleClass(this._cardsRow, "s-list-record-selected", selected);
			} else {
				if (selected) {
					this.builder.toggleCard(this, true);
				}
			}
		}
		if (this._selectorCheck) {
			this._selectorCheck.checked = selected;
		}
		if (selected) {
			if (!this.list.selector.isMulti) {
				this.builder.scroller.scrollToItem(this.dataRow);
			}
		}
	}
});