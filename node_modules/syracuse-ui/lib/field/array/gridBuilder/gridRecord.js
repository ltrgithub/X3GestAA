"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function GridRecord() {}

exports.GridRecord = helpers.defineClass(GridRecord, RecordArticle, {
	onChildFieldFocus: function(field, isFocusIn) {
		if (this.rowIndexBtn && syra_site.isTabletDevice) {
			//for classicPage, esc is done by default on click
			syra_site.dom.toggleClass(this.rowIndexBtn, "s-grid-row-escape", this._hasEscapeRowButton = isFocusIn);
			this.setRowIndex();
		}
	},
	applyChange: function(newData) {
		RecordArticle.prototype.applyChange.call(this, newData);
		this.list.builder.cardDecorator.onRecordApplyChange(this);
	},
	dispose: function() {
		this.list && this.list.builder && this.list.builder.disposeRecord(this);
		RecordArticle.prototype.dispose.call(this);
	},
	reorderItem: function(target, isAfter) {
		var builder = this.list.builder;
		builder.freezeTable && builder.freezeTable.reorderRow(target, this, isAfter);
		builder.scrollTable && builder.scrollTable.reorderRow(target, this, isAfter);
		this.rowCard && this.dataRow.parentNode.insertBefore(this.rowCard.row, this.dataRow.nextSibling);
		if (this.list.quickEdit && this.list.quickEdit.record == this) {
			this.dataRow.parentNode.insertBefore(this.list.quickEdit.card.row, this.dataRow.nextSibling);
		}
	},
	remove: function() {
		this.list.builder.removeRecordRow(this);
	},
	loadBox: function(initData, isCreateAction) {
		RecordArticle.prototype.loadBox.call(this, initData);
		if (isCreateAction) {
			var cardDecorator = this.list.builder.cardDecorator;
			cardDecorator && cardDecorator.isRowCardMode && cardDecorator.toggleRowCard(this, true);
		}
	},
	onRowCardClick: function(event, btn) {
		this.list.builder.cardDecorator.onRowCardOpenerClick(btn, this);
	},
	drawBox: function() {
		this.list.builder.drawRecord(this);
	},
	onMenuClick: function(menuItem) {
		if (!this.disposed) {
			var $newIndex, $startIndex;
			switch (menuItem.$sourceBind) {
				case "$first":
					$startIndex = 1;
					$newIndex = 0;
					break;
				case "$previous":
					$newIndex = (this.list.pagging.$startIndex - 1) + (this.getRecordIndex() - 1);
					break;
				case "$next":
					$newIndex = (this.list.pagging.$startIndex - 1) + (this.getRecordIndex() + 1);
					break;
				case "$last":
					$newIndex = this.list.dataset.length - 1;
					break;
				case "$recordCard":
					this.list.builder.popupCardBuilder.togglePopup(this);
					return false;
				default:
					return RecordArticle.prototype.onMenuClick.call(this, menuItem);
			}
			var list = this.list;
			var $startIndex = (Math.floor($newIndex / list.pagging.getItemsPerPage()) * list.pagging.getItemsPerPage()) + 1;
			if ($startIndex != list.pagging.$startIndex) {
				var options = list.clientFetchOptions || {};
				(options.params = options.params || {}).startIndex = $startIndex;
				list.fetcher.fetchClientRecordSet(list, options);
			}
			list.selector.selectRecord(list.clientDataset[$newIndex].$uuid, true);
		}
		return false;
	},
	loadInlinePage: function($itemPage, options) {
		this.list.builder.loadInlinePage(this, $itemPage, options);
	},
	applyShortCuts: function(shortcuts, event, focusField) {
		var bind = null,
			mnuItem, ret = false;
		var sc = ["delete", "insert"],
			len = sc.length,
			i;
		var scMenuItems = ["$delete", "$create"];
		if (this.menuItems && this.$capability) {
			for (i = 0; i < len; i++) {
				if (shortcuts[sc[i]]) {
					bind = this.$capability[sc[i]] ? scMenuItems[i] : null;
					break;
				}
			}
			if (bind && (mnuItem = this.menuItems[bind]) && mnuItem[0]) {
				syra_menus.click.menuItem(mnuItem[0], event);
				ret = true;
			}
		}
		return ret;
	},
	resizeArticle: function(doResize, boxParent) {
		RecordArticle.prototype.resizeArticle.call(this, doResize, boxParent);
		var cardDecorator = this.list.builder && this.list.builder.cardDecorator;
		if (cardDecorator && (this.cardItem || this.popupCard)) {
			if (cardDecorator.isRowCardMode && this.body) {
				this.layoutSlot.style.maxWidth = this.list.builder.scrollTable.bodySlot.clientWidth + "px";
			}
		}
	}
});