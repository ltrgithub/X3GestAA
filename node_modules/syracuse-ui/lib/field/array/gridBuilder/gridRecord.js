"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function GridRecord() {}

exports.GridRecord = helpers.defineClass(GridRecord, RecordArticle, {
	applyChange: function(newData) {
		RecordArticle.prototype.applyChange.call(this, newData);
		this.list.cardDecorator.onRecordApplyChange(this);
		newData && this.list.columnFitter.checkFieldsMaxLength(this);
	},
	disposeCard: function() {
		this.layoutSlot = this.layoutContent = this.domItem = this.body = this.rowCardRow = this.rowCardCell = this.rowCardOpener = this.cardItem = null;
	},
	dispose: function() {
		this.disposeCard();
		this.treeNode = this.dataRow = this.popupCardItem = null;
		this._selectorCheck = this.titleSlot = null;
		RecordArticle.prototype.dispose.call(this);
	},
	reorderItem: function(targetRecord, isAfter) {
		if (targetRecord) {
			targetRecord.dataRow.parentNode.insertBefore(this.dataRow, isAfter ? targetRecord.dataRow.nextSibling : targetRecord.dataRow);
		} else {
			if (isAfter) {
				this.list.body.appendChild(this.dataRow);
			} else {
				this.list.body.insertBefore(this.dataRow, this.list.body.firstChild);
			}
		}
		if (this.rowCardRow) {
			this.dataRow.parentNode.insertBefore(this.rowCardRow, this.dataRow.nextSibling);
		}
	},
	remove: function() {
		RecordArticle.prototype.remove.call(this);
		if (this.rowCardRow) {
			syra_site.dom.removeChild(this.rowCardRow);
		}
	},
	appendRowIndexCell: function(slot) {
		this.rowIndexBtn = document.createElement("td");
		this.rowIndexBtn.className = this.list.gridCss.rowIndex;
		if (this.list.$item.$selectByRowIndex) {
			this.rowIndexBtn.className += " s-list-row-index-selector";
			this.rowIndexBtn.syraOnClick = "onSelectorClick";
		}
		if (this.list.$capability && this.list.$capability.reorder) {
			this.list.capabilityMaker.addReorder(this, true);
		}
		slot.appendChild(this.rowIndexBtn);
		this.renderRowIndex();
		if (this.list.treeDecorator) {
			// remove border between line 
			this.rowIndexBtn.className += " s-list-no-border";
		}
		return this.rowIndexBtn;
	},
	appendRecordSelector: function(slot) {
		var td = document.createElement("td");
		td.className = this.list.gridCss.cell;
		this._selectorCheck = this.list.selector.appendToRecord(slot.appendChild(td));
		return td;
	},

	renderAltStyle: function(showAlt) {
		syra_site.dom.toggleClass(this.dataRow, "s-list-row-alt", showAlt);
	},
	drawBox: function() {
		this.isGridRecord = true;
		this.$mnPickersCss = this.$mnPickersCss || "s-list-record-picker";
		this.$iconPath = this.list.$iconPath;
		this.$isVerticalDirection = true;
		this.domItem = this.dataRow = document.createElement("tr");
		this.domItem.syraItem = this.id;
		this.domItem.syraRecord = this.$uuid;
		this.dataRow.setAttribute("data-s-record", this.$uuid);
		this.dataRow.className = this.list.$skin + "-row";
		if (!this.list.treeDecorator) {
			if (this.insertBeforeRecord) {
				this.insertBeforeRecord.dataRow.parentNode.insertBefore(this.dataRow, this.insertBeforeRecord.dataRow);
				delete this.insertBeforeRecord;
			} else {
				this.list.body.appendChild(this.dataRow);
			}
		}
		if (this.list.treeDecorator) {
			this.list.treeDecorator.appendCellNode(this, this.dataRow);
		} else {
			this.appendRowIndexCell(this.dataRow);
		}
		if (this.list.cardDecorator.isRowCardMode) {
			this.dataRow.appendChild(this.list.cardDecorator.appendRowCardOpener(this));
		}
		if (this.list.selector.useColumnSelector) {
			this.appendRecordSelector(this.dataRow);
		}
		if (!this.list.$item.$isMenuRecordHidden) {
			this.menusSlot = document.createElement("td");
			this.menusSlot.className = this.list.gridCss.cell + " " + this.list.$skin + "-actions-cell";
			this.dataRow.appendChild(this.menusSlot);
			if (this.list.treeDecorator) {
				this.menusSlot.className += " s-list-tree-cell";
			}
			this.list.capabilityMaker.applyToRecord(this);
		}
		if (this.list.selector.isRowMode) {
			this.dataRow.syraOnClick = "onSelectorClick";
			this.dataRow.className += " s-list-selector-row";
			this.dataRow.syrainout = this.id;
		}
		var $items = this.list.$item.$layout.$items;
		var cssCell = this.list.gridCss.cell;
		if (this.list.treeDecorator) {
			cssCell += " s-list-no-border";
		}
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			var $field = this.list.$fields[$item.$bind];
			if ($field && !$field.$isExcluded) {
				var td = document.createElement("td");
				td.className = cssCell;
				var col = this.list.cols[$item.$bind];
				if (col.$isHidden) {
					td.style.display = "none";
				}
				this.dataRow.appendChild(td);
				if (col.$isFixed) {
					td.className += " s-grid-col-fixed";
					if (col == this.list.lastColFixed) {
						td.className += " s-grid-col-fixed-last";
					}
				}
				this.page.loadNewItem(this.dataRow.appendChild(td), {
					$bind: $item.$bind,
					$isCellChild: true,
					$inplace: true
				}, this);

			}
		}
		if (this.list.popupCardBuilder) {
			this.list.popupCardBuilder.toggleCardMenu(this, true);
		}
	},
	onMenuClick: function(menuItem) {
		var $newIndex, $startIndex;
		switch (menuItem.$sourceBind) {
			case "$first":
				$startIndex = 1;
				$newIndex = 0;
				break;
			case "$previous":
				$newIndex = (this.list.pagging.$startIndex - 1) + (this.getRecordIndex() - 1);
				break;
			case "$next":
				$newIndex = (this.list.pagging.$startIndex - 1) + (this.getRecordIndex() + 1);
				break;
			case "$last":
				$newIndex = this.list.dataset.length - 1;
				break;
			case "$recordCard":
				this.list.popupCardBuilder.togglePopup(this);
				return false;
			default:
				return RecordArticle.prototype.onMenuClick.call(this, menuItem);
		}
		return this.doMenuClick($newIndex);
	},
	doMenuClick: function($newIndex) {
		var list = this.list;
		var $startIndex = (Math.floor($newIndex / list.pagging.getItemsPerPage()) * list.pagging.getItemsPerPage()) + 1;
		if ($startIndex != list.pagging.$startIndex) {
			var options = list.clientFetchOptions || {};
			(options.params = options.params || {}).startIndex = $startIndex;
			list.fetcher.fetchClientRecordSet(list, options);
		}
		list.selector.select(list.clientDataset[$newIndex].$uuid, true);
		return false;
	},
	toggleFocus: function(focused) {
		this.isFocused = focused;
		syra_site.dom.toggleClass(this.dataRow, "s-record-focused", focused);
	},
	highlightSelection: function(selected) {
		syra_site.dom.toggleClass(this.dataRow, "s-list-record-selected", selected);
		var record = this.list.getFocusedRecord(false);
		if (record) {
			record.toggleFocus(false);
		}
		this.list.cardDecorator.onSelectRecord(this, selected);

		if (this._selectorCheck) {
			this._selectorCheck.checked = selected;
		}
		if (selected) {
			if (!this.list.selector.isMulti) {
				this.list.scroller.scrollToItem(this.dataRow);
			}
		}
	},
	applyShortCuts: function(shortcuts, event, focusField) {
		var bind = null,
			mnuItem, ret = false;
		var sc = ["delete", "insert"],
			len = sc.length,
			i;
		var scMenuItems = ["$delete", "$create"],
			cap = this.$capability;
		if (this.menuItems && cap) {
			for (i = 0; i < len; i++) {
				if (shortcuts[sc[i]]) {
					bind = cap[sc[i]] ? scMenuItems[i] : null;
					break;
				}
			}
			if (bind && (mnuItem = this.menuItems[bind]) && mnuItem[0]) {
				syra_menus.click(mnuItem[0], event);
				ret = true;
			}
		}
		return ret;
	},
	getNextPreviousField: function(next, $bind) {
		var found;
		for (var ii = 0, jj = this.list.orderCols.length; ii < jj; ii++) {
			if (!this.list.orderCols[ii].$isHidden && this.list.orderCols[ii].$bind) {
				if (next) {
					if (this.list.orderCols[ii].$bind == $bind) {
						found = $bind;
					} else {
						if (found) {
							found = this.list.orderCols[ii].$bind;
							break;
						}
					}
				} else {
					if (this.list.orderCols[ii].$bind == $bind) {
						found = found || $bind;
						break;
					} else {
						found = this.list.orderCols[ii].$bind;
					}
				}
			}
		}
		return found;
	}
});