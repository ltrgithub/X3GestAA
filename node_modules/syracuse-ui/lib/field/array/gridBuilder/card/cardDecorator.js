"use strict";
var helpers = require('syracuse-core/lib/helpers');

function CardDecorator(){
}

exports.CardDecorator = helpers.defineClass(CardDecorator, null, {
    load: function(list){
        this.list = list;
        if (this.list.$item.$inlineCard || this.list.$item.$cards) {
            this._convertOldCardItem();
        }
        this.appendRowCard();
        this._ensureMode();
    },
    _ensureMode: function(){
        this.isOutCardMode = this.isRowCardMode = false;
        if (this.list.$item.$cardItem) {
            this.isOutCardMode = !(this.isRowCardMode = this.list.$item.$cardItem.$position == "row");
        }
    },
    onRecordResize: function(record){
        if (this.list.scroller.bodySlot.clientWidth) {
            if (this.isRowCardMode && record.body) {
                record.layoutSlot.style.width = this.list.scroller.bodySlot.clientWidth + "px";
            }
            if (record.popupCardItem) {
                record.popupCardItem.domItem.style.width = this.list.scroller.bodySlot.clientWidth + "px";
            }
        }
    },
    toggleRowCard: function(record, show){
        document.site.toggleClass(record.rowCardOpener, "s-close", !show);
        if (!record.rowCardRow) {
            record.rowCardCell = document.createElement("td");
            record.rowCardCell.className = record.boxParent.$skin + "-cards-cell";
            record.rowCardCell.setAttribute("colspan", this.list.orderCols.length);
            var layoutSlot = document.createElement("div");
            layoutSlot.className = "s-grid-rowcard-slot";
            record.rowCardCell.appendChild(layoutSlot);
            record.rowCardRow = document.createElement("tr");
            record.dataRow.parentNode.insertBefore(record.rowCardRow, record.dataRow.nextSibling);
            record.rowCardRow.appendChild(record.rowCardCell);
            this._renderRecordCard(record, layoutSlot);
            this.hasRowCard = true;
            
            // remove alert diag if any
            if (record.isGridCardDiagAlertSet && record.page.diagnosesPanel) {
                record.page.diagnosesPanel.cleanGridCardAlertDiagnose(record.id);
                record.isGridCardDiagAlertSet = false;
            }
            record.page.ensurePageVisibility();
        }
        record.rowCardRow.style.display = show ? "" : "none";
    },
    appendRowCardOpener: function(record){
        var th = document.createElement("td");
        th.className = this.list.gridCss.cell + " s-grid-rowcard-cell-picker";
        var opener = document.createElement("a");
        opener.setAttribute("data-s-picker", "grid-rowcard");
        opener.className = "s-grid-rowcard-picker s-close";
        opener.syraIsDesignEnable = true;
        th.appendChild(record.rowCardOpener = opener);
        return th;
    },
    onRowCardOpenerClick: function(opener){
        var show = opener.className.indexOf("s-close") >= 0;
        var $uuids = opener.syraOpenAll ? Object.keys(this.list.recordsMap) : [document.site.findArticle(opener).$uuid];
        for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
            this.toggleRowCard(this.list.recordsMap[$uuids[ii]], show);
        }
        document.site.toggleClass(opener, "s-close", !show);
    },
    appendRowCardCol: function(slot, beforeCell){
        var col = this.list.cols.rowCard = this.list.appendCol();
        col.groupHead.style.width = col.groupBody.style.width = (col.widthValue = 25) + "px";
        col.slot = slot;
        col.titleCell.className = this.list.gridCss.title + " s-grid-rowcard-cell-picker";
        var opener = document.createElement("a");
        opener.syraIsDesignEnable = opener.syraOpenAll = true;
        opener.setAttribute("data-s-picker", "grid-rowcard");
        opener.className = "s-grid-rowcard-picker-all s-close";
        col.titleCell.appendChild(opener);
        if (beforeCell) {
            slot.insertBefore(col.titleCell, beforeCell);
        }
        else {
            slot.appendChild(col.titleCell);
        }
        return col;
    },
    _renderRecordCard: function(record, slot){
        slot.setAttribute("data-s-record", record.$uuid);
        record.setArticleId(slot);
        if (!record.cardItem) {
            record.$item = record.list.$item.$cardItem;
            record.$skin = "s-grid-carditem";
            record.layoutSlot = slot;
            record.dataSlot = record.domItem = record.body = document.createElement("div");
            record.layoutSlot.appendChild(record.domItem);
            record.ensureLayoutMode();
            record.renderLayoutContent();
            record.cardItem = record;
        }
        slot.appendChild(record.body);
    },
    _removeRecordCards: function(){
        var col = this.list.cols.rowCard;
        var inlineColIndex;
        if (col) {
            inlineColIndex = this.list.findColIndex(col);
            this.list.orderCols.splice(inlineColIndex, 1);
            if (this.list.filterRecord) {
                document.site.removeDomChild(this.list.filterRecord.dataRow.childNodes[inlineColIndex]);
            }
            document.site.removeDomChild(col.groupBody);
            document.site.removeDomChild(col.groupHead);
            document.site.removeDomChild(col.titleCell);
            delete this.list.cols.rowCard;
            this.$rowFieldBinds = null;
        }
        for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
            var record = this.list.records[ii];
            if (record.layoutContent) {
                record.layoutContent.clearContent();
                record.layoutContent.dispose();
                if (record.rowCardRow) {
                    document.site.removeDomChild(record.rowCardRow);
                }
                record.disposeCard();
                delete record.cardItem;
            }
            if (inlineColIndex !== undefined) {
                document.site.removeDomChild(record.dataRow.childNodes[inlineColIndex]);
            }
        }
    },
    appendRowCard: function(designing){
        if (!this.list.$item.$cardItem) {
            if (this.list.$complexBinds.length) {
                this.list.$item.$cardItem = {
                    $position: "row",
                    $layout: {
                        $layoutType: "tabs",
                        $items: []
                    }
                };
                for (var ii = 0, jj = this.list.$complexBinds.length; ii < jj; ii++) {
                    var $bind = this.list.$complexBinds[ii];
                    var $field = this.list.$fields[$bind];
                    var $item = {
                        $bind: $bind,
                        $isTitleHidden: true
                    };
                    // adding $item properties (necessary for job viewer diagnose stacktrace view)
                    if ($field.$item) {
                        if ($field.$item.$isEditMode != undefined) {
                            $item.$isEditMode = $field.$item.$isEditMode;
                        }
                        if ($field.$item.$isTitleRowHidden != undefined) {
                            $item.$isTitleRowHidden = $field.$item.$isTitleRowHidden;
                        }
                        if ($field.$item.$isPagerHidden != undefined) {
                            $item.$isPagerHidden = $field.$item.$isPagerHidden;
                        }
                        if ($field.$item.$isQuickDesignerEnabled != undefined) {
                            $item.$isQuickDesignerEnabled = $field.$item.$isQuickDesignerEnabled;
                        }
                        if ($field.$item.$isMenuRecordHidden != undefined) {
                            $item.$isMenuRecordHidden = $field.$item.$isMenuRecordHidden;
                        }
                    }
                    this.list.$item.$cardItem.$layout.$items.push({
                        $category: "section",
                        $title: $field.$shortTitle || $field.$title || ("( " + $bind + " )"),
                        $layout: {
                            $items: [$item]
                        }
                    });
                }
            }
            else {
                if (designing) {
                    this.list.$item.$cardItem = (this.list.$designing && this.list.$designing.grid && this.list.$designing.grid.$cardItem) || this.list.defineDefaultCard();
                }
            }
        }
        if (this.list.$item.$cardItem) {
            this.$rowFieldBinds = this.list.page.getDefinedFieldBinds(this.list.$item.$cardItem.$layout ? this.list.$item.$cardItem.$layout.$items : this.list.$item.$cardItem.$items);
        }
    },
    onRecordApplyChange: function(record){
        //if (this.list.$item.$isRowCardAutoHide) {
        if (record.dataset && this.list.$complexBinds.length && record.rowCardOpener) {
            var hasData;
            for (var ii = 0, jj = this.list.$complexBinds.length; ii < jj; ii++) {
                var data = record.dataset[this.list.$complexBinds[ii]];
                if (data !== null && data !== undefined) {
                    hasData = true;
                    break;
                }
            }
            record.rowCardOpener.style.display = hasData ? "" : "none";
        }
        //}
    },
    onSelectRecord: function(record, selected){
        if (this.isRowCardMode && record.rowCardRow) {
            document.site.toggleClass(record.rowCardRow, "s-list-record-selected", selected);
        }
        if (selected) {
            if (this.list.popupCardBuilder) {
                this.list.popupCardBuilder.toggleCard(record, true);
            }
            if (this.isOutCardMode) {
                document.site.emptyDom(this.outCardSlot);
                this._renderRecordCard(record, this.outCardSlot);
            }
        }
    },
    applyDesignMetaData: function(metaData, designing){
        var $cardItem = this.list.$item.$cardItem && helpers.object.clone(this.list.$item.$cardItem, true);
        if (metaData.$cardPosition == "no" || metaData.$cardPosition == "row") {
            this._removeRecordCards();
            delete this.list.$item.$cardItem;
            this.list.appendCardGraphSlots();
            if (metaData.$cardPosition == "row") {
                this.list.$item.$cardItem = $cardItem;
                if (!this.list.$item.$cardItem) {
                    this.list.$item.$cardItem = (this.list.$designing && this.list.$designing.grid && this.list.$designing.grid.$cardItem) || this.list.defineDefaultCard();
                }
                this.list.$item.$cardItem.$position = "row"; //ensure position
                this.appendRowCard();
                this._ensureMode();
                var record = this.list.filterRecord;
                if (record) {
                    record.dataRow.insertBefore(record.createCell(), record.dataRow.firstChild.nextSibling);
                }
                var col = this.appendRowCardCol(this.list.titleRow, this.list.titleRow.firstChild.nextSibling);
                this.list.orderCols.splice(1, 0, col);
                col.groupBody.parentNode.insertBefore(col.groupBody, col.groupBody.parentNode.firstChild.nextSibling);
                col.groupHead.parentNode.insertBefore(col.groupHead, col.groupHead.parentNode.firstChild.nextSibling);
                
                for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
                    record = this.list.records[ii];
                    record.dataRow.insertBefore(this.appendRowCardOpener(record), record.dataRow.firstChild.nextSibling);
                    if (ii == 0) {
                        this.toggleRowCard(record, true);
                    }
                }
            }
            else {
                this._ensureMode();
            }
        }
        else {
            if (this.isRowCardMode) {
                this._removeRecordCards();
            }
            this.list.$item.$cardItem = $cardItem;
            if (!this.list.$item.$cardItem) {
                this.list.$item.$cardItem = (this.list.$designing && this.list.$designing.grid && this.list.$designing.grid.$cardItem) || this.list.defineDefaultCard();
            }
            this.list.$item.$cardItem.$position = metaData.$cardPosition;
            this._ensureMode();
            this.list.appendCardGraphSlots();
            if (!this.list.selector || !this.list.selector.list) {
                if (this.list.$item.$selectMode === undefined) {
                    this.list.$item.$selectMode = "row";
                }
                this.list.loadSelector();
            }
            if (this.list.records.length > 0) {
                var selectedRecord;
                if (this.list.selector.uuid !== undefined) {
                    selectedRecord = this.list.recordsMap[this.list.selector.uuid];
                }
                if (!selectedRecord) {
                    this.list.selector.select(this.list.records[0].$uuid, true);
                }
                else {
                    selectedRecord.highlightSelection(true);
                }
            }
        }
    },
    _alertDiagInCard: function(record){
        if (!record.isGridCardDiagAlertSet) {
            document.site.showDiagnoses({
                $diagnoses: [{
                    $message: record.list.localize.diag_in_card_msg
                }]
            }, record, {
                gridCardRecord: record
            });
            record.isGridCardDiagAlertSet = true;
        }
    },
    showUnbindFieldDiagnose: function(record, $bind, $diagnoses){
        // check if diag for hidden grid card property
        if (this.$rowFieldBinds && !record.rowCard) {
            if (this.$rowFieldBinds.indexOf($bind) >= 0) {
                this._alertDiagInCard(record);
                return false;
            }
        }
        return true;
    },
    onChildFieldShowDiagnoses: function(record, field, $diagnoses){
        if (this.$rowFieldBinds && !record.rowCardRow) {
            if (this.$rowFieldBinds.indexOf(field.$item.$bind) >= 0) {
                this._alertDiagInCard(record);
            }
        }
    },
    _convertOldCardItem: function(){
        if (this.list.$item.$inlineCard) {
            this.list.$item.$cardItem = this.list.$item.$inlineCard;
            this.list.$item.$cardItem.$position = "row";
            delete this.list.$item.$inlineCard;
        }
        if (this.list.$item.$cards) {
            switch (this.list.$item.$cards.$position) {
                case "popup":
                    this.list.$item.$popupCard = this.list.$item.$cards;
                    delete this.list.$item.$popupCard.$position;
                    break;
                case "inline":
                    if (!(this.list.$item.$cards.$layout && this.list.$item.$cards.$layout.$layoutType == "tabs")) {
                        this.list.$item.$cardItem = this.list.$item.$cards;
                    }
                    if (this.list.$item.$cardItem) {
                        this.list.$item.$cardItem.$position = "row";
                    }
                    break;
                default:
                    this.list.$item.$cardItem = this.list.$item.$cards;
                    if (this.list.$item.$selectMode === undefined) {
                        this.list.$item.$selectMode = "row";
                    }
                    break;
            }
            delete this.list.$item.$cards;
        }
    },
    appendOutCardSlot: function(){
        if (!this.outCardSeparator) {
            this.outCardSeparator = document.createElement("div");
            this.outCardSeparator.syraOutCardResizer = this.list.id;
            document.site.ddManager.setDragSpot(this.outCardSeparator, true);
        }
        if (!this.outCardSlot) {
            this.outCardSlot = document.createElement("div");
        }
        var cssCell = "";
        var tableSlot = this.list.tableSlot;
        switch (this.list.$item.$cardItem.$position) {
            case "left":
                tableSlot.parentNode.insertBefore(this.outCardSeparator, tableSlot);
                tableSlot.parentNode.insertBefore(this.outCardSlot, this.outCardSeparator);
                cssCell = "-cell";
                if (this.list.$item.$cardItem.$width) {
                    this.outCardSlot.style.width = this.list.$item.$cardItem.$width;
                }
                break;
            case "right":
                tableSlot.parentNode.insertBefore(this.outCardSeparator, tableSlot.nextSibling);
                tableSlot.parentNode.appendChild(this.outCardSlot, this.outCardSeparator.nextSibling);
                cssCell = "-cell";
                if (this.list.$item.$cardItem.$width) {
                    this.outCardSlot.style.width = this.list.$item.$cardItem.$width;
                }
                break;
            case "top":
                var sibling = this.list.tableRow || tableSlot;
                sibling.parentNode.insertBefore(this.outCardSeparator, tableSlot);
                sibling.parentNode.insertBefore(this.outCardSlot, this.outCardSeparator);
                this.outCardSlot.style.width = "";
                break;
            case "bottom":
                var sibling = this.list.tableRow || tableSlot;
                sibling.parentNode.appendChild(this.outCardSeparator);
                sibling.parentNode.appendChild(this.outCardSlot);
                this.outCardSlot.style.width = "";
                break;
        }
        this.outCardSeparator.className = "s-list-card-sep" + cssCell;
        this.outCardSlot.className = "s-list-card-slot" + cssCell;
        tableSlot.style.display = "";
    },
    removeOutCardSlot: function(){
        document.site.removeDomChild(this.outCardSeparator);
        document.site.removeDomChild(this.outCardSlot);
        this.outCardSeparator = this.outCardSlot = null;
    },
    dispose: function(){
        this.list = this.$rowFieldBinds = this.outCardSeparator = this.outCardSlot = null;
    }
});
