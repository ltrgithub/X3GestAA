"use strict";
var helpers = require('syracuse-core/lib/helpers');

function PopupCardBuilder() {}

exports.PopupCardBuilder = helpers.defineClass(PopupCardBuilder, null, {
	load: function(list) {
		this.list = list;
	},
	findField: function(name, record) {
		if (record.popupCardItem && this._recordPopupCard == record) {
			if (this.isOpened() && !this._popupCard.dialog.disposed) {
				var found = null;
				var fields = record.boundFields[name];
				if (fields) {
					for (var ii = 0, jj = fields.length; !found && ii < jj; ii++) {
						var field = fields[ii];
						var boxParent = field.boxParent;
						while (boxParent && boxParent != record) {
							if (boxParent == record.popupCardItem) {
								found = field;
								break;
							}
							boxParent = boxParent.boxParent;
						}
					}
				}
				return found;
			}
		}
		return null;
	},
	isOpened: function() {
		return this._popupCard && this._popupCard.dialog && !this._popupCard.dialog.disposed;
	},
	togglePopup: function(record) {
		var self = this;
		if (record) {
			if (!(self._popupCard && self._recordPopupCard == record)) {
				if (self._popupCard) {
					self.list.selector.select(record.$uuid, true); //ensure selection
				} else {
					self.list.page.externalAdapter.onFieldClickPicker({
						field: record,
						pickerType: "openCard",
						doEvent: function() {
							self._popupCard = {
								slot: document.createElement("div"),
								slotHeader: document.createElement("div"),
								slotCard: document.createElement("div")
							};
							self._popupCard.slot.className = "s-popupcard-slot";
							self._popupCard.slot.appendChild(self._popupCard.slotHeader).className = "s-popupcard-slot-header";
							self._popupCard.slotCard.className = "s-popupcard-slot-body";
							self._popupCard.slot.appendChild(self._popupCard.slotCard);
							if (!record.popupCardItem) {
								self.list.selector.select(record.$uuid, true); //ensure selection
							}
							self.toggleCardMenu(self._recordPopupCard, false);
							self._popupCard.dialog = syra_site.dialogManager.openModal(record.page, {
								$isAutoClose: false,
								content: record.popupCardItem,
								dragSpot: self._popupCard.slotHeader,
								slot: self._popupCard.slot,
								onClose: function() {
									if (self._popupCard) {
										self.list.page.externalAdapter.onFieldClickPicker({
											field: self._recordPopupCard,
											pickerType: "closeCard",
											doEvent: function() {
												syra_site.dom.removeChild(self._popupCard.slot);
												self._popupCard.dialog.dispose();
												self._popupCard.slot = self._popupCard.slotHeader = null;
												self._popupCard = null;
												for (var ii = 0, jj = self.list.records.length; ii < jj; ii++) {
													var record = self.list.records[ii];
													self.toggleCardMenu(record, true);
													if (record.popupCardItem) {
														var fields = record.popupCardItem.layoutContent.getFields();
														for (var mm = 0, kk = fields.length; mm < kk; mm++) {
															record.removeItem(fields[mm], false, true);
														}
														record.removeItem(record.popupCardItem, true, true);
														delete record.popupCardItem;
													}
												}
												delete self._recordPopupCard;
											}
										});
									}
									return true;
								},
								resizeDialog: function(dlg, isDlgResizing) {
									if (!isDlgResizing) {
										self._popupCard.slotCard.style.width = self._popupCard.slotCard.style.height = "";
										dlg.centerDialog();
									}
									var rect = syra_site.dom.getInnerSize(self._popupCard.slot);
									self._popupCard.slotCard.style.width = rect.width + "px";
									self._popupCard.slotCard.style.height = (rect.height - self._popupCard.slotHeader.getBoundingClientRect().height) + "px";
								},
								onOpened: function(content) {
									self.list.page.externalAdapter.onFieldClickPicker({
										field: self._recordPopupCard,
										pickerType: "openedCard",
										doEvent: function() {}
									});
									self._recordPopupCard.applyChange(self.list.ensureGlobalMetaRecord());
									self._recordPopupCard.applyChange(self._recordPopupCard.dataset);
								}
							});
							self._popupCard.dialog.appendCloseButton(self._popupCard.slotHeader);
						}
					});
				}
				return;
			}
		}
		if (self._popupCard && self._popupCard.dialog) {
			self._popupCard.dialog.close();
		}
	},
	toggleCardMenu: function(record, show) {
		if (this.list.$item.$popupCard) {
			record.applyActionLinkChange({
				$links: {
					$recordCard: {
						$isHidden: !show,
						$title: this.list.localize.flPopupView
					}
				}
			});
		}
	},
	toggleCard: function(record, show) {
		if (!this._isOnApplyingChange) {
			if (this._popupCard) {
				if (show) {
					if (this._recordPopupCard) {
						if (this._recordPopupCard.popupCardItem) {
							syra_site.dom.removeChild(this._recordPopupCard.popupCardItem.domItem);
						}
					}
					this._recordPopupCard = record;
					syra_site.dom.empty(this._popupCard.slotCard);
					if (!record.popupCardItem && record.list.isClientFetch) {
						var $popupCard = this.list.$item.$popupCard;
						$popupCard.$isTitleHidden = !($popupCard.$title && $popupCard.$title != "-");
						$popupCard = {
							$layout: {
								$items: [{
										$layoutType: "row",
										$autoSize: true,
										$items: [{
											$category: "menus",
											$title: "-",
											$isTitlePicker: true,
											$isBoxCollapsable: true,
											$isPopupContent: true,
											$clientId: record.id + "-card-menu-picker",
											$skin: record.list.$skinMenus,
											$itemSkin: record.list.$skinRecordMenusLink,
											$layout: {
												$items: [{
													$layoutType: "stack",
													$items: [record.list.defineNewIconMenu("$create"), record.list.defineNewIconMenu("$edit"), record.list.defineNewIconMenu("$delete")]
												}]
											}
										}]
									},
									$popupCard
								]
							}
						};
						var $pagerMenus = {
							$category: "menus",
							$isTitlePicker: true,
							$skin: "s-page-pager",
							$itemIcon: {
								$mode: "icon",
								$path: "list/s-record-"
							},
							$layout: {
								$layoutType: "row",
								$autoSize: true,
								$items: [{
									$bind: "$first"
								}, {
									$bind: "$previous"
								}, {
									$bind: "$next"
								}, {
									$bind: "$last"
								}]
							}
						};
						$popupCard.$layout.$items[0].$items.push($pagerMenus);
					}
					var recordIndex = record.getRecordIndex();
					this._popupCard.slotCard.syraRecord = record.$uuid;
					this._popupCard.slotCard.setAttribute("data-s-record", record.$uuid);
					record.setArticleId(this._popupCard.slotCard);
					if (!record.popupCardItem) {
						record.popupCardItem = this.list.page.loadNewItem(this._popupCard.slotCard, $popupCard || ($popupCard || this.list.$item.$popupCard), record);
					} else {
						this._popupCard.slotCard.appendChild(record.popupCardItem.domItem);
					}
					if (this.isOpened()) {
						this._popupCard.dialog._content = this._popupCard.dialog.options.content = record.popupCardItem;
					}
					this._isOnApplyingChange = true;
					record.applyChange(this.list.ensureGlobalMetaRecord());
					record.applyChange(record.dataset);
					this._isOnApplyingChange = false;
					record.applyActionLinkChange({
						$actions: {
							$first: {
								$title: this.list.localize.flCardFirstRecord,
								$isHidden: this.list.dataset.length < 2,
								$isDisabled: this.list.pagging.$startIndex == 1 && recordIndex == 0
							},
							$previous: {
								$title: this.list.localize.flCardPrevRecord,
								$isHidden: this.list.dataset.length <= 2,
								$isDisabled: this.list.pagging.$startIndex == 1 && recordIndex == 0
							},
							$next: {
								$title: this.list.localize.flCardNextRecord,
								$isHidden: this.list.dataset.length <= 2,
								$isDisabled: (this.list.pagging.$startIndex + recordIndex) == this.list.dataset.length
							},
							$last: {
								$title: this.list.localize.flCardLastRecord,
								$isHidden: this.list.dataset.length < 2,
								$isDisabled: (this.list.pagging.$startIndex + recordIndex) == this.list.dataset.length
							}
						}
					});

					record.ensureArticleVisibility();
					syra_site.layoutValidator.validate(record.popupCardItem.layoutContent, true);
					if (this._popupCard && this._popupCard.dialog) {
						this._popupCard.dialog.resizeDialog();
					}

				}
				this.toggleCardMenu(record, !show);
			}
		}
	},
	dispose: function() {
		this.list = this._popupCard = this._recordPopupCard = null;
	}
});