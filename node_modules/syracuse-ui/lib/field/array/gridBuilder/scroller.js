"use strict";
var helpers = require('syracuse-core/lib/helpers');
function Scroller(){
}

exports.Scroller = helpers.defineClass(Scroller, null, {
    load: function(builder){
        this.builder = builder;
        this.list = builder.list;
        this.setFixedBodyHeight(this.list.$item.$fixedBodyHeight);
    },
    getInvisibleSize: function(){
        return {
            height: this._bodySlot.scrollHeight - this._$$bodySlot.height(),
            width: this._bodySlot.scrollWidth - this._$$bodySlot.width()
        };
    },
    setFixedBodyHeight: function($fixedBodyHeight){
        this.$fixedBodyHeight = parseInt($fixedBodyHeight || 0, 10);
    },
    validateFixedColumns: function(){
        var isFixed = true;
        this.hasFixedColumn = false;
        for (var ii = 0, jj = this.builder.orderCols.length; ii < jj; ii++) {
            var col = this.builder.orderCols[ii];
            if (col.$bind) {
                isFixed = col.$item.$isFixed = col.$isFixed = isFixed && col.$item.$isFixed;
            }
            else {
                col.$isFixed = true;
            }
            if (!col.$isFixed && !this.hasFixedColumn) {
                this.hasFixedColumn = true;
                this.firstColIndex = ii
            }
        }
        this.lastColIndex = this.builder.orderCols.length - 1;
    },
    scrollToItem: function(domItem){
        this.list.page.scrollToItem(domItem, this._$$bodySlot, true);
    },
    getScrollBoundary: function(){
        var $$boundary = $(this.list._core);
        var $$vscroller = this._$$bodySlot;
        var $$hscroller = this._$$hscroller;
        var boundary = $$boundary.offset();
        boundary.$$vscroller = $$vscroller;
        boundary.$$hscroller = $$hscroller;
        boundary.$$boundary = $$boundary;
        boundary.height = $$boundary.height();
        boundary.width = $$boundary.width();
        boundary.scrollWidth = $$hscroller[0].scrollWidth;
        boundary.scrollHeight = $$vscroller[0].scrollHeight;
        boundary.right = boundary.left + boundary.width;
        boundary.bottom = boundary.top + boundary.height;
        return boundary;
    },
    drawSlots: function(core, header, body){
        this._headSlot = document.createElement("div");
        this._headSlot.className = this.list.$skin + "-slot-head";
        this._headSlot.appendChild(header);
        
        this._hscroller = document.createElement("div");
        this._hscroller.className = this.list.$skin + "-h-scroll";
        this._hscroller.appendChild(this._hscrollBody = document.createElement("div"));
        this._hscrollBody.className = this.list.$skin + "-h-scroll-body";
        this._$$hscroller = $(this._hscroller);
        
        this._$$bodySlot = $(this._bodySlot = document.createElement("div"));
        this._bodySlot.className = this.list.$skin + "-slot-body";
        this._bodySlot.appendChild(body);
        
        core.appendChild(this._headSlot);
        core.appendChild(this._bodySlot);
        core.appendChild(this._hscroller);
        
        this._bindEvents(true);
    },
    _setBodyHeight: function(){
        if (this._bodySlot.style.overflowY != "auto") {
            this._bodySlot.style.overflowY = "auto";
        }
        var bodyHeight = this.list.$item.$fitContainer ? 0 : this.$fixedBodyHeight;
        if (!bodyHeight) {
            var $$slot = this.list._$$fitContainer || $(this.list.layoutSlot);
            var containerHeight = $$slot[0].offsetHeight - ((this.list.$$item.outerHeight() - this.list.$$item.height()));
            bodyHeight = containerHeight - (this._$$bodySlot.offset().top - $$slot.offset().top) - this._hscroller.offsetHeight;
        }
        bodyHeight = Math.max(40, bodyHeight);
        if (Math.abs(bodyHeight - (this._$$bodySlot.height())) < 2) {
            bodyHeight = this._$$bodySlot.height();
        }
        this._bodySlot.style.height = bodyHeight + "px";
    },
    onWindowResize: function(){
        if (this._bodySlot && this._bodySlot.clientWidth) {
            var clientWidth = this._bodySlot.clientWidth;
            if (clientWidth) {
                this._widthTotal = 0;
                this.scrollWidthTotal = 0;
                this.fixWidth = 0;
                for (var ii = 0, jj = this.builder.orderCols.length; ii < jj; ii++) {
                    var col = this.builder.orderCols[ii];
                    if (this.hasFixedColumn) {
                        if ((ii >= this.firstColIndex) || (this.fixWidth > clientWidth)) {
                            col.minX = this.scrollWidthTotal;
                            col.scrollWidth = col.widthValue;
                            this.scrollWidthTotal += col.widthValue;
                            col.maxX = this.scrollWidthTotal;
                        }
                        else {
                            this.fixWidth += col.widthValue;
                        }
                    }
                    this._widthTotal += col.widthValue;
                }
                if (this._widthTotal < clientWidth) {
                    this.isProportionalWidth = true;
                    for (var ii = 0, jj = this.builder.orderCols.length; ii < jj; ii++) {
                        var col = this.builder.orderCols[ii];
                        if (col.$bind) {
                            var width = col.widthValue / this._widthTotal;
                            col.realWidth = width = width * clientWidth;
                            col.groupHead.style.width = col.groupBody.style.width = width + "px";
                        }
                    }
                }
                else {
                
                    if (this.isProportionalWidth) {
                        for (var ii = 0, jj = this.builder.orderCols.length; ii < jj; ii++) {
                            var col = this.builder.orderCols[ii];
                            col.groupHead.style.width = col.groupBody.style.width = (col.realWidth = col.widthValue) + "px";
                        }
                        delete this.isProportionalWidth;
                    }
                }
            }
            this.scrollAreaWidth = this._widthTotal - clientWidth;
            this._hscrollBody.style.width = this._widthTotal + "px";
            
            if (this._bodySlot.scrollHeight > (this._bodySlot.clientHeight + 1)) {
                this._headSlot.style.marginRight = "17px";
            }
            else {
                this._headSlot.style.marginRight = ""
            }
            this._hscroller.style.display = this.scrollAreaWidth > 0 ? "" : "none";
            if (this.$fixedBodyHeight || this.list.$item.$fitContainer) {
                this._setBodyHeight();
            }
            else {
                if (this._bodySlot.style.overflowY == "auto") {
                    this._bodySlot.style.overflowY = "";
                    this._bodySlot.style.height = "";
                }
            }
        }
    },
    _displayRecords: function(index, display){
        for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
            var record = this.list.records[ii];
            record._dataRow.childNodes[index].style.display = display;
        }
        if (this.list.filterCapability && this.list.filterCapability.filterRecord) {
            this.list.filterCapability.filterRecord._dataRow.childNodes[index].style.display = display;
        }
    },
    _scrollCellContent: function(col, scrollLeft, index){
        var left = "-" + (scrollLeft - col.minX) + "px";
        for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
            var record = this.list.records[ii];
            var childNodes = record._dataRow.childNodes[index].childNodes;
            for (var mm = 0, kk = childNodes.length; mm < kk; mm++) {
                childNodes[mm].style.left = left;
            }
        }
        if (this.list.filterCapability && this.list.filterCapability.filterRecord) {
            var node = this.list.filterCapability.filterRecord._dataRow.childNodes[index];
            for (var mm = 0, kk = childNodes.length; mm < kk; mm++) {
                childNodes[mm].style.left = left;
            }
        }
    },
    scrollFixedColumns: function(){
        for (var ii = this.firstColIndex; ii <= this.lastColIndex; ii++) {
            var col = this.builder.orderCols[ii];
            if (this._hscroller.scrollLeft > col.maxX) {
                col.groupHead.style.width = col.groupBody.style.width = "0px";
            }
            else {
                if (this._hscroller.scrollLeft <= col.minX) {
                    col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
                }
                else {
                    if (this._hscroller.scrollLeft >= col.minX && this._hscroller.scrollLeft <= col.maxX) {
                        var diff = this._hscroller.scrollLeft - col.minX;
                        col.groupHead.style.width = col.groupBody.style.width = (col.widthValue - diff) + "px";
                    }
                }
                
            }
        }
    },
    _bindEvents: function(bind){
        var self = this;
        if (bind) {
            (self._$$hscroller = $(self._hscroller)).bind("scroll", function(event){
                document.site.onBeforClick();
                if (!self.hasFixedColumn) {
                    if (self._bodySlot.scrollLeft != self._hscroller.scrollLeft) {
                        self._bodySlot.scrollLeft = self._hscroller.scrollLeft;
                    }
                    if (self._headSlot.scrollLeft != self._hscroller.scrollLeft) {
                        self._headSlot.scrollLeft = self._hscroller.scrollLeft;
                    }
                }
                else {
                    self.scrollFixedColumns();
                }
                return false;
            });
            self._$$bodySlot.bind("scroll", function(event){
                if (self._hscroller.scrollLeft != self._bodySlot.scrollLeft) {
                    self._hscroller.scrollLeft = self._bodySlot.scrollLeft;
                }
                if (self._headSlot.scrollLeft != self._bodySlot.scrollLeft) {
                    self._headSlot.scrollLeft = self._bodySlot.scrollLeft;
                }
            });
            (self._$$headSlot = $(self._headSlot)).bind("scroll", function(event){
                if (self._hscroller.scrollLeft != self._headSlot.scrollLeft) {
                    self._hscroller.scrollLeft = self._headSlot.scrollLeft;
                }
                if (self._bodySlot.scrollLeft != self._headSlot.scrollLeft) {
                    self._bodySlot.scrollLeft = self._headSlot.scrollLeft;
                }
            });
        }
        else {
            if (self._$$hscroller) {
                self._$$hscroller.unbind();
            }
            if (self._$$bodySlot) {
                self._$$bodySlot.unbind();
            }
            if (self._$$headSlot) {
                self._$$headSlot.unbind();
            }
        }
    },
    dispose: function(){
        this._bindEvents(false);
        this.builder = this.list = this._headSlot = this._bodySlot = this._hscroller = this._$$headSlot = this._$$hscroller = this._$$bodySlot = null;
    }
});
