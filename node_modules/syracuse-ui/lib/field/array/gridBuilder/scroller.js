"use strict";
var helpers = require('syracuse-core/lib/helpers');

function Scroller() {}

exports.Scroller = helpers.defineClass(Scroller, null, {
	load: function(builder) {
		this.builder = builder;
		this.list = builder.list;
		this.setFixedBodyHeight(this.list.$item.$fixedBodyHeight);
	},
	getInvisibleSize: function() {
		return {
			height: this._bodySlot.scrollHeight - this._$$bodySlot.height(),
			width: this._bodySlot.scrollWidth - this._$$bodySlot.width()
		};
	},
	setFixedBodyHeight: function($fixedBodyHeight) {
		this.$fixedBodyHeight = parseInt($fixedBodyHeight || 0, 10);
	},
	validateFixedColumns: function() {
		var isFixed = true;
		for (var ii = 0, jj = this.builder.orderCols.length; ii < jj; ii++) {
			var col = this.builder.orderCols[ii];
			if (col.$bind) {
				isFixed = col.$item.$isFixed = col.$isFixed = isFixed && col.$item.$isFixed;
			} else {
				col.$isFixed = true;
			}
		}
	},
	scrollToTitleItem: function(domItem) {
		this.list.page.scrollToItem(domItem, $(this._headSlot), true);
	},
	scrollToItem: function(domItem) {
		this.list.page.scrollToItem(domItem, this._$$bodySlot, true);
	},
	getScrollBoundary: function() {
		var $$boundary = $(this.list._core);
		var $$vscroller = this._$$bodySlot;
		var $$hscroller = this._$$hscroller;
		var boundary = $$boundary.offset();
		boundary.$$vscroller = $$vscroller;
		boundary.$$hscroller = $$hscroller;
		boundary.$$boundary = $$boundary;
		boundary.height = $$boundary.height();
		boundary.width = $$boundary.width();
		boundary.scrollWidth = $$hscroller[0].scrollWidth;
		boundary.scrollHeight = $$vscroller[0].scrollHeight;
		boundary.right = boundary.left + boundary.width;
		boundary.bottom = boundary.top + boundary.height;
		return boundary;
	},
	drawSlots: function(core, header, body) {
		this._headSlot = document.createElement("div");
		this._headSlot.className = this.list.$skin + "-slot-head";
		this._headSlot.appendChild(header);

		this._hscroller = document.createElement("div");
		this._hscroller.className = this.list.$skin + "-h-scroll";
		this._hscroller.appendChild(this._hscrollBody = document.createElement("div"));
		this._hscrollBody.className = this.list.$skin + "-h-scroll-body";
		this._$$hscroller = $(this._hscroller);

		this._$$bodySlot = $(this._bodySlot = document.createElement("div"));
		this._bodySlot.className = this.list.$skin + "-slot-body";
		this._bodySlot.appendChild(body);

		core.appendChild(this._headSlot);
		core.appendChild(this._bodySlot);
		core.appendChild(this._hscroller);

		this._bindEvents(true);
	},
	getBottomSpace: function(item) {
		var space = item;
		while (item) {

		}
	},
	_setBodyHeight: function() {
		if (this._bodySlot.style.overflowY != "auto") {
			this._bodySlot.style.overflowY = "auto";
		}
		var bodyHeight;
		if (this.list.$item.$isPageHeightDocked) {
			var scrollTop = this.list.page.$$scrollview.offset().top;
			var bodyTop = this._$$bodySlot.offset().top;
			var fieldTop = this.list.$$fieldValue.offset().top;
			var fieldH = this.list.$$fieldValue.height();
			var bodyH = this._$$bodySlot.height();
			var headerH = Math.ceil(bodyTop - fieldTop);
			var bottomH = Math.ceil(Math.max(0, (fieldH - headerH) - bodyH));
			bodyHeight = this.list.page.scrollview.clientHeight - ((bodyTop - scrollTop) + bottomH);
		} else {
			bodyHeight = this.list.$item.$fitContainer ? 0 : this.$fixedBodyHeight;
			if (!bodyHeight) {
				//var $$slot = this.list._$$fitContainer || $(this.list.layoutSlot);
				var $$slot = $(this.list.layoutSlot);
				var containerHeight = $$slot[0].offsetHeight - ((this.list.$$item.outerHeight() - this.list.$$item.height()));
				bodyHeight = containerHeight - (this._$$bodySlot.offset().top - $$slot.offset().top) - this._hscroller.offsetHeight;
			}
			//bodyHeight = Math.max(20, bodyHeight);
			if (Math.abs(bodyHeight - (this._$$bodySlot.height())) < 2) {
				bodyHeight = this._$$bodySlot.height();
			}
		}
		this._bodySlot.style.height = bodyHeight + "px";
	},
	_calculateScrollableView: function(clientWidth, firstScrollableColIndex) {
		var cols = this.builder.orderCols;
		this._widthTotal = 0;
		this.scrollWidthTotal = 0;
		this.fixWidth = 0;
		this.lastColIndex = cols.length - 1;

		if (firstScrollableColIndex == undefined) {
			this.firstScrollableColIndex = 0;
			for (var ii = 0, jj = cols.length; ii < jj; ii++) {
				var col = cols[ii];
				if (!col.$isHidden && !col.$isFixed) {
					this.firstScrollableColIndex = ii;
					break;
				}
			}
		} else {
			this.firstScrollableColIndex = firstScrollableColIndex;
		}
		for (var ii = 0, jj = cols.length; ii < jj; ii++) {
			var col = cols[ii];
			if (!col.$isHidden) {
				if (this.firstScrollableColIndex) {
					if ((ii >= this.firstScrollableColIndex) || (this.fixWidth > clientWidth)) {
						col.minX = this.scrollWidthTotal;
						col.scrollWidth = col.widthValue;
						this.scrollWidthTotal += col.widthValue;
						col.maxX = this.scrollWidthTotal;
					} else {
						this.fixWidth += col.widthValue;
					}
				}
				this._widthTotal += col.widthValue;
			}
		}
		if (firstScrollableColIndex === undefined) {
			if (this.firstScrollableColIndex && (clientWidth < this._widthTotal)) {
				var maxWidth = clientWidth - cols[this.lastColIndex].widthValue;
				if (this.fixWidth > maxWidth) {
					for (var ii = this.firstScrollableColIndex - 1; ii > 0; ii--) {
						var col = cols[ii];
						if (!col.$isHidden) {
							this.fixWidth -= col.widthValue;
							if (this.fixWidth && (this.fixWidth < maxWidth)) {
								break;
							}
						}
					}
					this._calculateScrollableView(clientWidth, ii > 0 ? ii : 0);
				}
			}
		}
	},
	onWindowResize: function() {
		if (this._bodySlot && this._bodySlot.clientWidth) {
			var clientWidth = this._bodySlot.clientWidth;
			if (clientWidth) {
				this._calculateScrollableView(clientWidth);
				if (this._widthTotal < clientWidth) {
					this.isProportionalWidth = true;
					for (var ii = 0, jj = this.builder.orderCols.length; ii < jj; ii++) {
						var col = this.builder.orderCols[ii];
						if (!col.$isHidden && col.$bind) {
							var width = col.widthValue / this._widthTotal;
							col.scrollWidthValue = col.realWidth = width = width * clientWidth;
							col.groupHead.style.width = col.groupBody.style.width = width + "px";
						}
					}
				} else {
					if (this.isProportionalWidth) {
						for (var ii = 0, jj = this.builder.orderCols.length; ii < jj; ii++) {
							var col = this.builder.orderCols[ii];
							if (!col.$isHidden) {
								col.groupHead.style.width = col.groupBody.style.width = (col.realWidth = col.widthValue) + "px";
							} else {
								col.groupHead.style.width = col.groupBody.style.width = (col.realWidth = 0) + "px";
							}
						}
						delete this.isProportionalWidth;
					}
				}
			}
			this.scrollAreaWidth = this._widthTotal - clientWidth;
			this._hscrollBody.style.width = this._widthTotal + "px";

			if (this._bodySlot.scrollHeight > (this._bodySlot.clientHeight + 1)) {
				this._headSlot.style.marginRight = "17px";
			} else {
				this._headSlot.style.marginRight = "";
			}
			this._hscroller.style.display = this.scrollAreaWidth > 0 ? "" : "none";
			if (this.$fixedBodyHeight || this.list.$item.$fitContainer || this.list.$item.$isPageHeightDocked) {
				this._setBodyHeight();
			} else {
				if (this._bodySlot.style.overflowY == "auto") {
					this._bodySlot.style.overflowY = "";
					this._bodySlot.style.height = "";
				}
			}
			this._appendButtons();
		}
	},

	_scrollCellContent: function(col, scrollLeft, index) {
		var left = "-" + (scrollLeft - col.minX) + "px";
		for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
			var record = this.list.records[ii];
			var childNodes = record.dataRow.childNodes[index].childNodes;
			for (var mm = 0, kk = childNodes.length; mm < kk; mm++) {
				childNodes[mm].style.left = left;
			}
		}
		if (this.list.filterRecord) {
			var node = this.list.filterRecord.dataRow.childNodes[index];
			for (var mm = 0, kk = childNodes.length; mm < kk; mm++) {
				childNodes[mm].style.left = left;
			}
		}
	},
	validateScrollVisibility: function() {
		//temp hack for fusion
		if (this._currentHScrollerScrollLeft) {
			this._hscroller.scrollLeft = this._currentHScrollerScrollLeft;
		}
	},
	scrollFixedColumns: function() {
		if (!this.isProportionalWidth && this.firstScrollableColIndex) {
			for (var ii = this.firstScrollableColIndex; ii <= this.lastColIndex; ii++) {
				var col = this.builder.orderCols[ii];
				if (!col.$isHidden) {
					if (this._hscroller.scrollLeft > col.maxX) {
						col.groupHead.style.width = col.groupBody.style.width = (col.scrollWidthValue = 0) + "px";
					} else {
						if (this._hscroller.scrollLeft <= col.minX) {
							col.groupHead.style.width = col.groupBody.style.width = (col.scrollWidthValue = col.widthValue) + "px";
						} else {
							if (this._hscroller.scrollLeft >= col.minX && this._hscroller.scrollLeft <= col.maxX) {
								var diff = this._hscroller.scrollLeft - col.minX;
								col.groupHead.style.width = col.groupBody.style.width = (col.scrollWidthValue = (col.widthValue - diff)) + "px";
							}
						}

					}
				}
			}
			this._currentHScrollerScrollLeft = this._hscroller.scrollLeft;
		}
	},
	ensureFieldVisibility: function(field) {
		if (this.firstScrollableColIndex) {
			var index = (field.$item.$isFilterMode ? field.layoutSlot.parentNode : field.layoutSlot).cellIndex;
			if (index !== undefined) {
				var col = this.builder.orderCols[index];
				if (col && col.scrollWidthValue !== undefined) {
					//if (col.scrollWidthValue != col.widthValue) {
					this._hscroller.scrollLeft = col.minX;
					this.scrollFixedColumns();
					//}
				}
			}
		}
	},
	_bindEvents: function(bind) {
		var self = this;
		if (bind) {
			(self._$$hscroller = $(self._hscroller)).bind("scroll", function(event) {
				document.site.onBeforClick();
				if (!self.firstScrollableColIndex) {
					if (self._bodySlot.scrollLeft != self._hscroller.scrollLeft) {
						self._bodySlot.scrollLeft = self._hscroller.scrollLeft;
					}
					if (self._headSlot.scrollLeft != self._hscroller.scrollLeft) {
						self._headSlot.scrollLeft = self._hscroller.scrollLeft;
					}
				} else {
					self.scrollFixedColumns();
				}
			});
			self._$$bodySlot.bind("scroll", function(event) {
				console.log("body scroll");
				if (!self.firstScrollableColIndex) {
					if (self._hscroller.scrollLeft != self._bodySlot.scrollLeft) {
						self._hscroller.scrollLeft = self._bodySlot.scrollLeft;
					}
					if (self._headSlot.scrollLeft != self._bodySlot.scrollLeft) {
						self._headSlot.scrollLeft = self._bodySlot.scrollLeft;
					}
				} else {
					if (self._bodySlot.scrollLeft) {
						self._hscroller.scrollLeft += self._bodySlot.scrollLeft;
						self._bodySlot.scrollLeft = 0;
					}
					return false;
				}
			});
			(self._$$headSlot = $(self._headSlot)).bind("scroll", function(event) {
				if (!self.firstScrollableColIndex) {
					if (self._hscroller.scrollLeft != self._headSlot.scrollLeft) {
						self._hscroller.scrollLeft = self._headSlot.scrollLeft;
					}
					if (self._bodySlot.scrollLeft != self._headSlot.scrollLeft) {
						self._bodySlot.scrollLeft = self._headSlot.scrollLeft;
					}
				} else {
					if (self._headSlot.scrollLeft) {
						self._hscroller.scrollLeft += self._headSlot.scrollLeft;
						self._headSlot.scrollLeft = 0;
					}
					return false;
				}
			});
		} else {
			if (self._$$hscroller) {
				self._$$hscroller.unbind();
			}
			if (self._$$bodySlot) {
				self._$$bodySlot.unbind();
			}
			if (self._$$headSlot) {
				self._$$headSlot.unbind();
			}
		}
	},
	_bindButton: function($$btn, left) {
		var self = this;
		$$btn.bind("click", function() {
			self._hscroller.scrollLeft = left ? self._hscroller.scrollLeft - 25 : self._hscroller.scrollLeft + 25;
		}).bind("mousedown", function() {
			if (left) {
				self._leftBtnTimeout = setInterval(function() {
					if (self._hscroller) {
						self._hscroller.scrollLeft -= 25;
					}
				}, 100);
			} else {
				self._rightBtnTimeout = setInterval(function() {
					if (self._hscroller) {
						self._hscroller.scrollLeft += 25;
					}
				}, 100);
			}
		}).bind("mouseup mouseout", function() {
			clearInterval(left ? self._leftBtnTimeout : self._rightBtnTimeout);
		});
	},
	_appendButtons: function() {
		if (this.list.$item.$itemsPerPage > 20 && this.list.dataset.length > 20) {
			if (!this.leftBtn) {
				var site = document.site;
				var $$scrollview = site.mainPage.$$scrollview;
				if ((!site.isScrolledIntoView(this._$$hscroller, $$scrollview) && site.isScrolledIntoView($(this.builder._headTable), $$scrollview)) || (site.isScrolledIntoView(this._$$hscroller, $$scrollview) && !site.isScrolledIntoView($(this.builder._headTable), $$scrollview)) || (!site.isScrolledIntoView(this._$$hscroller, $$scrollview) && !site.isScrolledIntoView($(this.builder._headTable), $$scrollview))) {
					this._areButtonsVisible = true;
					var scrollview = $$scrollview[0];
					var div = document.createElement("div");
					div.className = "s-list-btn-scroll-contain-left";
					this.leftBtn = document.createElement("a");
					this.leftBtn.className = "s-list-btn-scroll-left";
					this.$$leftBtn = $(div.appendChild(this.leftBtn));
					this.list._core.appendChild(div);

					div = document.createElement("div");
					div.className = "s-list-btn-scroll-contain-right";
					this.rightBtn = document.createElement("a");
					this.rightBtn.className = "s-list-btn-scroll-right";
					this.$$rightBtn = $(div.appendChild(this.rightBtn));
					this.list._core.appendChild(div);

					this._bindButton(this.$$leftBtn, true);
					this._bindButton(this.$$rightBtn);
					// handle scroll btn display
					if (site.mainPage && site.mainPage.addScrollViewListener) {
						site.mainPage.addScrollViewListener(this.list.id, this._updateButtonsPosition);
					}
				}
			}
			if (this.leftBtn) {
				if (!this._areButtonsVisible) {
					this.leftBtn.style.display = this.rightBtn.style.display = "";
					this._areButtonsVisible = true;
				}
				this._updateButtonsPosition(this);
				//this.leftBtn.style.display = this.rightBtn.style.display = document.site.isScrolledIntoView($(this.list.builder.scroller._hscroller), document.site.mainPage.$$scrollview) ? "none" : "";	
			}
		} else {
			this._areButtonsVisible = false;
			if (this.leftBtn) {
				this.leftBtn.style.display = this.rightBtn.style.display = "none";
			}
		}
	},
	_updateButtonsPosition: function(scroller) {
		if (scroller._areButtonsVisible) {
			var $$scrollview = document.site.mainPage.$$scrollview;
			var $$headtable = $(scroller.builder._headTable);
			var top;
			// computing scroll btn position according whether head table or table hor scroll are visible or not 
			switch (document.site.isScrolledIntoView($$headtable, $$scrollview)) {
				// list head table is visible in the page
				case (true):
					// list hor scroller is visible in the page
					if (document.site.isScrolledIntoView(scroller._$$hscroller, $$scrollview)) {
						top = ((scroller._$$hscroller.offset().top - $$headtable.offset().top) / 2 + $$headtable.offset().top) + "px";
					}

					// list hor scroller is not visible in the page
					else {
						top = (($$scrollview[0].clientHeight - $$headtable.offset().top) / 2 + $$headtable.offset().top) + "px";
					}
					break;
					// list table is not visible in the page
				case (false):
					// list hor scroller is visible in the page
					if (document.site.isScrolledIntoView(scroller._$$hscroller, $$scrollview)) {
						top = (scroller._$$hscroller.offset().top / 2) + "px";
					}

					// list hor scroller is not visible in the page
					else {
						var docViewTop = $$scrollview.scrollTop();
						var docViewBottom = docViewTop + $$scrollview.height();
						var hscrollerBottom = scroller._$$hscroller.position().top + scroller._$$hscroller.height();
						var headtableTop = $$headtable.position().top;
						// table is not in visible in the page
						if ((hscrollerBottom < docViewTop) || (headtableTop > docViewBottom)) {
							top = top;
						}
						// table is all over the page
						else {
							top = "50%";
						}
					}
					break;
			}
			if (!top) {
				scroller.leftBtn.style.display = scroller.rightBtn.style.display = "none";
			} else {
				scroller.leftBtn.style.display = scroller.rightBtn.style.display = "";
				scroller.leftBtn.style.top = scroller.rightBtn.style.top = top;
			}
		}
	},
	dispose: function() {
		if (this.$$leftBtn) {
			if (document.site.mainPage.removeScrollViewListener) {
				document.site.mainPage.removeScrollViewListener(this.list.id);
			}
			this.$$leftBtn.unbind();
			this.$$rightBtn.unbind();
			this.$$rightBtn = this.$$leftBtn = this.leftBtn = this.rightBtn = null;
		}
		this.builder = this.list = this._headSlot = this._bodySlot = this._hscroller = this._$$headSlot = this._$$hscroller = this._$$bodySlot = this._hscrollBody = null;
	}
});