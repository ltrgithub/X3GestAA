"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _columnSizer = require("./tools/columnSizer");

function _addHScroller(tb) {
	var list = tb.builder.list;
	if (list.$item.$isDockedHeight || list.$fitContainer) {
		tb.bodySlot.style.overflowY = "auto";
	}
	_addScrollHandlers(tb);
}

function _addScrollHandlers(tb) {
	tb.bodySlot_onScroll = tb.bodySlot.addEventListener("scroll", function(event) {
		var page = tb.builder.list.page;
		if (!syra_site.isInoutDisabled && page.isPageLoaded && !page._isDataChanging) {
			if (tb.headSlot.scrollLeft != this.scrollLeft) {
				tb.headSlot.scrollLeft = this.scrollLeft;
			}
		}
	});
}

function _removeScrollHandlers(tb) {
	tb.bodySlot_onScroll && tb.bodySlot.removeEventListener("scroll", tb.bodySlot_onScroll);
}

function _setColumnTitle(col, $title) {
	col.titleWidth = 0; //reset for sizing
	col.titleText = col.list.getLocalizedTitle($title || "");
	if (col.titleText.length > 1) {
		col.titleText = col.titleText.substr(0, 1).toUpperCase() + col.titleText.substr(1);
	}
	syra_site.dom.toggleClass(col.titleLabel, "s-grid-title-empty", col.titleText.length == 0);
	syra_menus.setButtonTitle(col.titleLabel, col.titleText);
}

function _addTitleEmptyItem(col) {
	var div = document.createElement("div");
	div.className = "s-grid-title-empty";
	col.titleCell.appendChild(div);
}



function GridTable() {}

exports.GridTable = helpers.defineClass(GridTable, null, {
	load: function(builder, isFreeze) {
		this.builder = builder;

		this.columns = [];
		var css = builder.list.$skin + (isFreeze ? "-freeze" : "");

		this.headSlot = document.createElement("div");
		this.headTable = document.createElement("table");
		this.titleRow = document.createElement("tr");
		this.bodySlot = document.createElement("div");
		this.bodyTable = document.createElement("table");

		this.headSlot.className = css + "-slot-head";
		this.headTable.className = css + "-table-head";
		this.headTable.setAttribute("cellspacing", "0");
		this.headTable.setAttribute("cellpadding", "0");
		this.headTable.appendChild(this.titleRow);

		//builder.list.$item.$isTitleRowHidden = true;

		if (builder.list.$item.$isTitleRowHidden) {
			this.headTable.style.display = "none";
		}
		this.headSlot.appendChild(this.headTable);

		this.bodySlot.className = css + "-slot-body";
		this.bodyTable.className = css + "-table-body";
		this.bodyTable.setAttribute("cellspacing", "0");
		this.bodyTable.setAttribute("cellpadding", "0");
		this.bodySlot.appendChild(this.bodyTable);
		this.isFreeze = isFreeze;
		this.$rowKey = this.isFreeze ? "freezeRow" : "dataRow";
		!isFreeze && _addHScroller(this);
	},
	_addColumn: function($key) {
		var col = this.builder.columnsMap[$key] = {
			key: $key,
			list: this.builder.list,
			table: this,
			slot: this.titleRow,
			titleCell: this.titleRow.appendChild(document.createElement("th"))
		};
		col.titleCell.className = col.list.$skin + "-title-cell" + (this.isFreeze ? " s-freeze" : "");
		this.builder.allColumns.push(col);
		this.columns.push(col);
		return col;
	},
	_addFilterCell: function(col) {
		var td = this.builder.filterRecord.cellsMap[col.key] = document.createElement("td");
		td.className = "s-list-filter-cell";
		var div = document.createElement("div");
		div.className = "s-list-filter-cell-empty";
		td.appendChild(div);
		this.builder.filterRecord[this.$rowKey].appendChild(td);
		return td;
	},
	addFieldCol: function($item, $field) {
		var col = this._addColumn($item.$bind);
		col.$field = $field;
		col.titleCell.syrainout = col.list.id;
		col.$isHidden = $field.$isHidden;
		col.titleLabel = document.createElement("div");
		col.titleLabel.className = col.list.$skin + "-title-cell-label";
		col.titleCell.appendChild(col.titleLabel);
		//avoid sort for tree
		if (!col.list.treeDecorator && $field.$capabilities && ($field.$capabilities.indexOf("sort") >= 0)) {
			col.isSortable = true;
			col.titleCell.syraOnClick = "onSortClick";
			col.titleCell.syraValue = $item.$bind;
			col.sortLink = col.titleCell;
			col.titleCell.className += " s-sort";
		}
		var $title;
		if (col.list.globalMetaRecords && col.list.globalMetaRecords.$properties) {
			var $metaField = col.list.globalMetaRecords.$properties[$item.$bind];
			if ($metaField) {
				$title = $metaField.$title;
			}

		}
		_setColumnTitle(col, $title || $field.$shortTitle || $field.$title);
		col.titleCell.syraOnMouseId = col.titleCell.syraResizerColId = col.titleCell.syraDragSpot = col.titleCell.syraReorderColId = col.list.id;
		col.titleCell.syra_field_bind = $item.$bind || "";
		col.titleCell.syraDragSpot = col.list.id;

		col.titleCell.style.display = col.$isHidden ? "none" : "";
		col.titleCell.setAttribute("data-s-q-test-bind", $item.$bind);
		col.titleCell.setAttribute("data-s-bind", $item.$bind);
		col.$bind = $item.$bind;
		col.$item = $item;
		return col;
	},
	applyColumnMetaData: function(col, $metaField) {
		if ($metaField.$title !== undefined) {
			_setColumnTitle(col, $metaField.$title);
		}
		if ($metaField.$isHidden !== undefined) {
			var display = (col.$isHidden = $metaField.$isHidden) ? "none" : "";
			if (col.titleCell) {
				col.titleCell.style.display = display;
			}
			for (var mm = 0, kk = col.list.records.length; mm < kk; mm++) {
				col.list.records[mm].cellsMap[col.$bind].style.display = display;
			}
			if (this.builder.filterRecord) {
				this.builder.filterRecord.cellsMap[col.$bind].style.display = display;
			}
		}
	},
	addSelectorColumn: function() {
		var col = this._addColumn("$recordSelector");
		if (col.list.selector.isMulti) {
			col.list.selector.addCheckBox(col.titleCell, true).syraSelectAll = true;
		} else {
			_addTitleEmptyItem(col);
		}
		col.useContentWidth = true;
		if (this.builder.filterRecord) {
			this._addFilterCell(col); //.className += " s-filter-popup-picker";
		}
		return col;
	},
	addTreeCol: function() {
		var col = this._addColumn("$treeview");
		col.titleCell.className = col.list.treeDecorator.cssNode + "-title-cell";
		return col;
	},
	addRowIndexCol: function() {
		var col = this._addColumn("$rowIndex");
		_addTitleEmptyItem(col);
		col.useContentWidth = true;
		this.builder.filterRecord && this._addFilterCell(col);
		return col;
	},
	addRowCardCol: function() {
		var col = this._addColumn("rowCard");
		col.useContentWidth = true;
		col.titleCell.className += " s-grid-rowcard-cell-picker";
		var opener = syra_menus.addIconButton(syra_local.flShowAllCards, "s-grid-rowcard-picker-all s-fonticon-btn", "onRowCardClick");
		this.builder.cardDecorator.setRowCardOpenerIcon(opener, false);
		col.titleCell.appendChild(opener);
		this.builder.filterRecord && this._addFilterCell(col);
		return col;
	},
	addMenusCol: function() {
		var col = this._addColumn("$menus");
		col.useContentWidth = true;
		_addTitleEmptyItem(col);
		this.builder.filterRecord && this._addFilterCell(col);
		return col;
	},
	empty: function() {
		syra_site.dom.empty(this.bodyTable);
	},
	showScrollBar: function() {
		var scrollWidth = this.bodySlot.scrollWidth;
		var show = this.bodySlot.scrollHeight > (this.bodySlot.clientHeight + 1);
		if (show) {
			if (!this._headerCorner) {
				this._headerCorner = document.createElement("div");
				this._headerCorner.className = this.builder.list.$skin + "-head-corner";
				this.headSlot.parentNode.appendChild(this._headerCorner);
			}
			this._headerCorner.style.height = this.headSlot.clientHeight + "px";
			this._headerCorner.style.display = "";
		} else {
			if (this._headerCorner) {
				this._headerCorner.style.display = "none";
			}
		}
		this.headSlot.style[syra_site.isDocumentRTL ? "marginLeft" : "marginRight"] = show ? "17px" : "";
		this.bodySlot.style[syra_site.isDocumentRTL ? "paddingLeft" : "paddingRight"] = show ? "17px" : "";

		var width = this.bodyTable.getBoundingClientRect().width;
		if (!width) {
			width = this.headTable.getBoundingClientRect().width;
		}
		return width + ((this._headerCorner && this._headerCorner.getBoundingClientRect().width) || 0);
	},
	removeRow: function(record) {
		syra_site.dom.removeChild(record[this.$rowKey]);
	},
	reorderRow: function(target, source, isAfter) {
		var sourceRow = source[this.$rowKey];
		if (sourceRow) {
			if (target) {
				var targetRow = target[this.$rowKey];
				targetRow && targetRow.parentNode.insertBefore(sourceRow, isAfter ? targetRow.nextSibling : targetRow);
			} else {
				if (isAfter) {
					this.bodyTable.appendChild(sourceRow);
				} else {
					this.bodyTable.insertBefore(sourceRow, this.bodyTable.firstChild);
				}
			}
		}
	},
	setColWidths: function(fitWidth) {
		var list = this.builder.list;
		var $prefWidths = (list.$userPreferences && list.$userPreferences.$columnWidths) || {};
		var records = list.records;
		//$prefWidths = {};
		var firstRecord = records && records[0];
		if (firstRecord) {
			if (firstRecord.dataRow && firstRecord.dataRow.parentNode) {
				firstRecord = syra_store.get(firstRecord.dataRow.parentNode.children[0].syraItem);
			}
			/*var orderedNodes = list.treeDecorator && list.treeDecorator._orderedNodes;
             if (orderedNodes && orderedNodes.length) {
             firstRecord = list.recordsMap[orderedNodes[0].$uuid]
             }*/
		}
		var row = firstRecord && firstRecord[this.$rowKey];
		var cells = row && row.cells;
		var total = 0;
		this.colFieldsCount = 0;
		for (var ii = 0, jj = this.columns.length; ii < jj; ii++) {
			var col = this.columns[ii];
			if (!col.$isHidden) {
				if (col.$field) {
					this.colFieldsCount++;
				}
				total += _columnSizer.setColumnWidth(col, records, $prefWidths, cells && cells[ii]);
			}
		}
		if (fitWidth && fitWidth > total) {
			var space = (fitWidth - total) / this.colFieldsCount;
			for (var ii = 0, jj = this.columns.length; ii < jj; ii++) {
				var col = this.columns[ii];
				if (!col.$isHidden && col.$field) {
					col.colWidth += space;
				}
			}
		}

		for (var ii = 0, jj = this.columns.length; ii < jj; ii++) {
			var col = this.columns[ii];
			if (!col.$isHidden) {
				var firstCell = cells && cells[ii];
				col.titleCell.style.width = col.colWidth + "px";
				if (firstCell) {
					firstCell.style.width = col.colWidth + "px";
				}
			}
		}

	},
	dispose: function() {
		_removeScrollHandlers(this);
		this.builder = this._headerCorner = null;
		this.columns = this.headSlot = this.headTable = this.titleRow = this.bodySlot = this.bodyTable = this.bodySlot_onScroll = null;
	}
});