"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var FilterCell = require('./filterCell').FilterCell;
var filterHelpers = require('./filterHelpers');

function FilterRecord() {}

exports.FilterRecord = helpers.defineClass(FilterRecord, Article, {
	loadRecord: function(list) {
		this.list = list;
		this.isRecordArticle = true;
		this.$facet = "$filter";
		this.$isEditMode = true;
		this.$prototype = list.$prototype.$item;
		this.$prototype.$localization = list.page.$prototype.$localization;
		list.page.initializeNewItem(this, {
			$layout: {
				$items: list.$item.$layout.$items
			}
		}, list);
		this.loadBox();
	},
	//set focus on first field
	setFocus: function() {
		for (var ii = 0, jj = this.list.orderCols.length; ii < jj; ii++) {
			var col = this.list.orderCols[ii];
			if (col.$bind) {
				var $field = this.list.$fields[col.$bind];
				if ($field && !$field.$isHidden && !$field.$isHidden && !$field.$isDisabled) {
					var cell = this._cells[col.$bind];
					if (cell && cell.field) {
						cell.field.focus();
						break;
					}
				}
			}
		}
	},
	createCell: function() {
		var td = document.createElement("td");
		td.className = "s-list-filter-cell";
		return td;
	},
	appendCell: function(slot) {
		return (slot || this.dataRow).appendChild(this.createCell());
	},
	appendFlagCell: function(slot) {
		var td = this.appendCell(slot);
		td.className += " s-filter-popup-picker";
		td.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-flag.png')";
	},
	appendFieldCell: function(col, $field) {
		var cell = this.appendCell(this.dataRow);
		if (col.$isHidden) {
			cell.style.display = "none";
		}
		if ($field.$capabilities && ($field.$capabilities.indexOf("filter") >= 0)) {
			filterHelpers.renderCell(this._cells[col.$item.$bind] = new FilterCell(), this, cell, $field, col.$item.$bind);
		}
	},
	drawBox: function() {
		this._cells = {};
		if (this.domItem) {
			RecordArticle.prototype.remove.call(this);
		} else {
			this.domItem = this.dataRow = document.createElement("tr");
			this.list.headTable.appendChild(this.dataRow);
		}
	},
	checkVisibility: function() {
		var isVisible;
		var $binds = Object.keys(this._cells);
		for (var ii = 0, jj = $binds.length; !isVisible && ii < jj; ii++) {
			var $bind = $binds[ii];
			if (!this._cells[$bind].$field.$isHidden) {
				isVisible = true;
			}
		}
		this.domItem.style.display = isVisible ? "" : "none";
	},
	_buildFilter: function() {
		var values = [];
		var params = {};
		var $binds = Object.keys(this._cells);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var value = this._cells[$binds[ii]].getValue();
			if (value) {
				values.push(value);
			}
		}
		params.filter = values.join(" and ");
		this.list.fetcher.trigger(this.list, params);
	},
	onNotifyDataChange: function(field, value) {
		this.dataset[field.$item.$bind] = value;
		var filter = this._cells[field.$item.$bind];
		if (value == null || value == "") {
			if (filter && filter.operator !== "none") {
				if (filter.operator == "between") {
					var fieldFirst = this.record.boundFields[filter.$bind][0];
					var fieldHigh = this.record.boundFields[filter.$bind + "$High"][0];
					if (fieldFirst.currentValue == fieldHigh.currentValue) {
						filter.setOperator("none");
					}
				} else {
					filter.setOperator("none");
				}
			}
		} else {
			if (filter) {
				//for high this._cells[$bind] is not defined
				filter.ensureEqual();
			}
		}
		this._buildFilter();
		return false;
	},
	dispose: function() {
		if (this._cells) {
			var $binds = Object.keys(this._cells);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				this._cells[$binds[ii]].dispose();
			}
		}
		this._cells = this.list = this.dataRow = null;
		Article.prototype.dispose.call(this);
	}
});