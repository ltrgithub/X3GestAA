"use strict";

function _onFilterOperatorClick(cell, event, picker) {
	var record = cell.record;
	var options = {
		operator: cell.operator,
		list: record.list,
		event: event,
		type: "operatorclick",
		doEvent: function() {
			if (!cell.listPopup) {
				syra_site.dialogManager.closePopups();
				syra_site.dom.empty(cell.list);
				exports.ensureFilterField(cell);
				var operators = syra_site.filterMaker.getFieldOperators(null, cell.field, cell.$filterField);
				for (var ii = 0, jj = operators.length; ii < jj; ii++) {
					var op = operators[ii];
					var btn = syra_menus.addTextButton(syra_local["flFilter_" + op], "s-filter-popup-btn", "onFilterItemClick");
					btn.syraOperator = op;
					if (cell.operator == op) {
						btn.className += " s-selected";
					}
					btn.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-" + op + ".png')";
					cell.list.appendChild(btn);
				}
				cell.listPopup = syra_site.dialogManager.openPopup(record.boxParent, {
					content: record,
					slot: cell.list,
					position: {
						my: "left top",
						at: "left bottom",
						of: $(cell.layoutSlot)
					},
					onClose: function() {
						cell.listPopup = null;
					}
				});
			} else {
				cell.listPopup.close();
			}
		}
	};
	record.page.externalAdapter.onFilterEvent(options);
}

function _onFilterItemClick(cell, event, picker) {
	_setOperator(cell, picker.syraOperator);
	cell.listPopup.close();
	cell.record.page.externalAdapter.onFilterEvent({
		operator: cell.operator,
		list: cell.record.list,
		filter: cell,
		event: event,
		type: "operatorchange",
		doEvent: function() {
			var record = cell.record;
			var highField = record.boundFields[cell.$bind + "$High"];
			if (cell.operator === "between") {
				if (highField) {
					highField[0]._dataValue.style.display = "";
				} else {
					_loadField(cell, cell.$field, cell.$bind + "$High");
				}
			} else {
				if (highField) {
					highField[0]._dataValue.style.display = "none";
				}
				var value = record.dataset[cell.$bind];
				if (cell.operator != "none") {
					if (value != null && value != "") {
						if (cell.operator == "empty" || cell.operator == "notempty") {
							var field = record.boundFields[cell.$bind][0];
							field.setDataValue(null);
						}
						_buildFilter(record);
					} else {
						if (cell.operator == "empty" || cell.operator == "notempty") {
							_buildFilter(record);
						}
					}
				} else {
					if (value != null && value != "") {
						var field = record.boundFields[cell.$bind][0];
						field.setDataValue(null);
						field.notifyFieldChange(null);
					} else {
						_buildFilter(record);
					}
				}
			}
		}
	});
}

exports.ensureFilterField = function(cell) {
	if (cell.$field.$type == "application/x-reference") {
		cell.$filterField = cell.field.$field.$item[cell.field.$reference.$value.$itemProp];
		if (cell.$filterField) {
			cell.$filterField = cell.record.$prototype.$properties[cell.field.$reference.$value.$prop];
			if (cell.$filterField) {
				cell.$filterCode = cell.field.$reference.$value.$prop;
			}
		}
		if (!cell.$filterField) {
			cell.$filterField = cell.field.$field.$item.$properties[cell.field.$reference.$value.$prop];
			cell.$filterCode = cell.$bind + "." + cell.field.$reference.$value.$prop;
		}
	}
};

function _ensureEqual(cell) {
	// force operator to equals
	if (cell.operator === "none" && cell.$field) {
		var defaultFilter;
		switch (cell.$field.$type) {
			case "application/x-date":
			case "application/x-time":
			case "application/x-datetime":
				defaultFilter = "ge";
				break;
			case "application/x-string":
				defaultFilter = "like";
				break;
			default:
				defaultFilter = "eq";
				break;
		}
		_setOperator(cell, defaultFilter);
	}
};

function _setOperator(cell, operator) {
	cell._operator.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-" + (cell.operator = operator) + ".png')";
}

function _buildFilter(record) {
	var values = [];
	var params = {};
	var $binds = Object.keys(record.fieldCells);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var value = _getCellValue(record.fieldCells[$binds[ii]]);
		value && values.push(value);
	}
	params.filter = values.join(" and ");
	record.list.fetcher.trigger(record.list, params);
}


function _loadField(cell, $field, $bind) {
	cell.field = cell.record.page.loadNewItem(cell.layoutSlot.appendChild(document.createElement("div")), {
		$bind: $bind || cell.$bind,
		$isTopLabelAlignment: false,
		$isCellChild: true,
		$isFilterMode: true,
		$isMenusHiddeen: true,
		$inplace: true,
		$field: $field
	}, cell.record);
	cell._operator = syra_menus.addIconButton(syra_local.flfilter_choiceOperator, "s-list-filter-cell-picker", "onFilterOperatorClick");
	cell._operator.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-none.png')";
	cell.field._dataValue.insertBefore(cell._operator, cell.field._dataValue.firstChild);
	cell.field.filterCell = cell;
	cell.field.onFilterOperatorClick = function(event, btn) {
		_onFilterOperatorClick(this.filterCell, event, btn);
	};
	cell.field.onFilterItemClick = function(event, btn) {
		_onFilterItemClick(this.filterCell, event, btn);
	};
	if (!cell.list) {
		cell.list = document.createElement("div");
		cell.list.className = "s-filter-popup";
		cell.list.style.display = "none";
		cell.list.syraItem = cell.field.id;
		cell.field._dataValue.appendChild(cell.list);
	}
}

exports.onNotifyDataChange = function(record, field, value) {
	record.dataset[field.$item.$bind] = value;
	var filter = record.fieldCells[field.$item.$bind];
	if (value == null || value == "") {
		if (filter && filter.operator !== "none") {
			if (filter.operator == "between") {
				var fieldFirst = record.boundFields[filter.$bind][0];
				var fieldHigh = record.boundFields[filter.$bind + "$High"][0];
				if (fieldFirst.currentValue == fieldHigh.currentValue) {
					_setOperator(filter, "none");
				}
			} else {
				_setOperator(filter, "none");
			}
		}
	} else {
		filter && _ensureEqual(filter); //for high this.fieldCells[$bind] is not defined			
	}
	_buildFilter(record);
	return false;
};

exports.renderCell = function(cell, record, layoutSlot, $field, $bind) {
	cell.$field = $field;
	cell.record = record;
	cell.$filterCode = cell.$bind = $bind;
	cell.operator = "none";
	cell.layoutSlot = layoutSlot;
	_loadField(cell, cell.$field, cell.$bind);

	// update filter cell if where params in url (issue #3022)
	if (cell.record.list.$urlParams.where) {
		var $filterBind = cell.$bind;
		var exp = syra_site.filterMaker.parseWhere(cell.record.list.$urlParams.where, cell.$bind);
		var $isRefField = false;
		// in case of reference field, appropriate $bind value is field.$reference.$value.$prop
		if ($field.$type == 'application/x-reference') {
			$filterBind = cell.field.$reference.$value.$prop;
			$isRefField = true;
		}
		if (exp && $filterBind == exp.$bind) {
			_setOperator(cell, exp.$operator);
			// update dataset and field data value
			if ($isRefField) {
				cell.record.dataset[cell.$bind] = {};
				cell.record.dataset[cell.$bind][$filterBind] = exp.$value;
			} else {
				cell.record.dataset[cell.$bind] = exp.$value;
			}
			cell.field.setDataValue(exp.$value);
		}
	}
};

function _getSortedFilterRcdFields(filterRcd) {
	return (Object.keys(filterRcd.fieldCells)).sort(function(a, b) {
		return parseInt(a.substr(2), 10) - parseInt(b.substr(2), 10);
	});
}

exports.getQuickSelValues = function(list) {
	var res = [];
	if (list.filterRecord) {
		var $binds = _getSortedFilterRcdFields(list.filterRecord);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var cell = list.filterRecord.fieldCells[$binds[ii]];
			if (cell.$field) {
				var defaultFilter, value = cell.record.boundFields[cell.$bind][0].getInputValue();
				switch (cell.$field.$type) {
					case "application/x-string":
						defaultFilter = (value !== "" && cell.operator === "none") ? "like_s" : (value === "" && cell.operator !== "none") ? "none" : undefined;
						break;
					default:
						defaultFilter = (value !== "" && cell.operator === "none") ? "ge" : (value === "" && cell.operator !== "none") ? "none" : undefined;
						break;
				}
				defaultFilter && _setOperator(cell, defaultFilter);
			}
			res.push(_getCellValue(cell) || "");
		}
	}
	return res;
};

function _getCellValue(cell) {
	var field = cell.record.boundFields[cell.$bind][0];
	if (cell.operator != "none") {
		filterHelpers.ensureFilterField(cell);
		return syra_site.filterMaker.getFieldValue({
			field: field,
			$bind: cell.$bind,
			$type: cell.$field.$type,
			operator: cell.operator,
			$filterCode: cell.$filterCode,
			$filterField: cell.$filterField
		});
	}
}

exports.getNextQuickSelField = function(list, bind, nextSel) {
	var ret = null,
		next, prev;
	if (list.filterRecord.$item && list.filterRecord.$item.$layout && list.filterRecord.$item.$layout.$items) {
		if (nextSel === undefined) {
			ret = list.filterRecord.boundFields[bind];
		} else {
			var cells = _getSortedFilterRcdFields(list.filterRecord);
			for (var ii = 0, jj = cells.length; ii < jj; ii++) {
				if (cells[ii] === bind) {
					if (ii === 0) {
						next = cells[ii + 1];
						prev = bind;
					} else
					if (ii === (cells.length - 1)) {
						next = cells[0];
						prev = cells[ii - 1];
					} else {
						next = cells[ii + 1];
						prev = cells[ii - 1];
					}
					break;
				}
			}
			ret = list.filterRecord.boundFields[nextSel ? next : prev];
		}
	}
	return ret;
};