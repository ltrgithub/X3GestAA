"use strict";

var _popupItem, _popup;

exports.dispose = function() {
	_popup && _popup.close();
};

function _onFilterOperatorClick(field, event, picker) {
	var record = field.articleParent;
	var options = {
		operator: field.$filterOperator,
		list: record.list,
		event: event,
		type: "operatorclick",
		doEvent: function() {
			if (_popup && _popupItem && _popupItem.syraItem == field.id) {
				_popup.close();
			} else {
				syra_site.dialogManager.closePopups();
				_ensureFilterField(field);
				if (!_popupItem) {
					_popupItem = document.createElement("div");
					_popupItem.className = "s-filter-popup";
				}
				syra_site.dom.empty(_popupItem);
				_popupItem.syraItem = field.id;
				var operators = syra_site.filterMaker.getFieldOperators(null, field, field.$filterField);
				for (var ii = 0, jj = operators.length; ii < jj; ii++) {
					var op = operators[ii];
					var btn = syra_menus.addTextButton(syra_local["flFilter_" + op], "s-filter-popup-btn", "onFilterItemClick");
					btn.syraOperator = op;
					if (field.$filterOperator == op) {
						btn.className += " s-selected";
					}
					btn.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-" + op + ".png')";
					_popupItem.appendChild(btn);
				}
				_popup = syra_site.dialogManager.openPopup(record.boxParent, {
					content: record,
					slot: _popupItem,
					position: {
						my: "left top",
						at: "left bottom",
						of: $(field.layoutSlot)
					},
					onClose: function() {
						syra_site.dom.removeChild(_popupItem);
						_popup = _popupItem = null;
					}
				});
			}
		}
	};
	record.page.externalAdapter.onFilterEvent(options);
}

function _onFilterItemClick(field, event, picker) {
	_setOperator(field, picker.syraOperator);
	_popup.close();
	field.page.externalAdapter.onFilterEvent({
		operator: field.$filterOperator,
		list: field.articleParent.list,
		filter: field,
		event: event,
		type: "operatorchange",
		doEvent: function() {
			var record = field.articleParent;
			var value = record.dataset[field.$item.$bind];
			if (field.$filterOperator != "none") {
				if (value != null && value != "") {
					if (field.$filterOperator == "empty" || field.$filterOperator == "notempty") {
						field.setDataValue(null);
					}
					_buildFilter(record);
				} else {
					if (field.$filterOperator == "empty" || field.$filterOperator == "notempty") {
						_buildFilter(record);
					}
				}
			} else {
				if (value != null && value != "") {
					field.setDataValue(null);
					field.notifyFieldChange(null);
				} else {
					_buildFilter(record);
				}
			}
		}
	});
}

function _ensureFilterField(field) {
	if (field.$field.$type == "application/x-reference") {
		field.$filterField = field.$field.$item[field.$reference.$value.$itemProp];
		if (field.$filterField) {
			field.$filterField = field.articleParent.$prototype.$properties[field.$reference.$value.$prop];
			if (field.$filterField) {
				field.$filterCode = field.$reference.$value.$prop;
			}
		}
		if (!field.$filterField) {
			field.$filterField = field.$field.$item.$properties[field.$reference.$value.$prop];
			field.$filterCode = field.$item.$bind + "." + field.$reference.$value.$prop;
		}
	}
}

function _setOperator(field, operator) {
	field.filterOperatorBtn.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-" + (field.$filterOperator = operator) + ".png')";
}

function _buildFilter(record) {
	var values = [];
	var $binds = Object.keys(record.boundFields);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var value = _getCellValue(record.boundFields[$binds[ii]][0]);
		value && values.push(value);
	}
	record.list.filler.trigger(record.list, {
		filter: values.join(" and ")
	});
}


function _loadField(record, slot, $field, $bind) {
	var field = record.page.loadNewItem(slot.appendChild(document.createElement("div")), {
		$bind: $bind,
		$isTopLabelAlignment: false,
		$isCellChild: true,
		$isFilterMode: true,
		$isMenusHiddeen: true,
		$inplace: true,
		$field: $field
	}, record);
	if (field.input) {
		field.input.className += " s-list-filter-input";
	}
	field.$filterCode = $bind;
	field.$filterOperator = "none";
	field.filterOperatorBtn = syra_menus.addIconButton(syra_local.flfilter_choiceOperator, "s-list-filter-cell-picker", "onFilterOperatorClick");
	field.filterOperatorBtn.removeAttribute("href");
	field.filterOperatorBtn.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-none.png')";
	field._dataValue.insertBefore(field.filterOperatorBtn, field._dataValue.firstChild);
	field.onFilterOperatorClick = function(event, btn) {
		_onFilterOperatorClick(this, event, btn);
	};
	field.onFilterItemClick = function(event, btn) {
		_onFilterItemClick(this, event, btn);
	};
	return field;
}

exports.onNotifyDataChange = function(record, field, value) {
	record.dataset[field.$item.$bind] = value;
	if (value == null || value == "") {
		field.$filterOperator !== "none" && _setOperator(field, "none");
	} else {
		if (field.$filterOperator === "none" && field.$field) {
			var defaultFilter = "eq";
			switch (field.$field.$type) {
				case "application/x-date":
				case "application/x-time":
				case "application/x-datetime":
					defaultFilter = "ge";
					break;
				case "application/x-string":
					defaultFilter = "like";
					break;
			}
			_setOperator(field, defaultFilter);
		}
	}
	_buildFilter(record);
	return false;
};

function _getSortedFilterRcdFields(filterRcd) {
	return (Object.keys(filterRcd.fieldCellsMap)).sort(function(a, b) {
		return parseInt(a.substr(2), 10) - parseInt(b.substr(2), 10);
	});
}

exports.getQuickSelValues = function(list) {
	var res = [];
	var record = list.builder.filterRecord;
	if (record) {
		var $binds = _getSortedFilterRcdFields(record);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var field = record.fieldCellsMap[$binds[ii]];
			if (field.$field) {
				var defaultFilter, value = field.getInputValue();
				switch (field.$field.$type) {
					case "application/x-string":
						defaultFilter = (value !== "" && field.$filterOperator === "none") ? "like_s" : (value === "" && field.$filterOperator !== "none") ? "none" : undefined;
						break;
					default:
						defaultFilter = (value !== "" && field.$filterOperator === "none") ? "ge" : (value === "" && field.$filterOperator !== "none") ? "none" : undefined;
						break;
				}
				defaultFilter && _setOperator(field, defaultFilter);
			}
			res.push(_getCellValue(field) || "");
		}
	}
	return res;
};

function _getCellValue(field) {
	if (field.$filterOperator != "none") {
		_ensureFilterField(field);
		return syra_site.filterMaker.getFieldValue({
			field: field,
			$bind: field.$item.$bind,
			$type: field.$field.$type,
			operator: field.$filterOperator,
			$filterCode: field.$filterCode,
			$filterField: field.$filterField
		});
	}
}

exports.getNextQuickSelField = function(list, bind, nextSel) {
	var ret = null,
		next, prev;
	var record = list.builder.filterRecord;
	if (record.$item && record.$item.$layout && record.$item.$layout.$items) {
		if (nextSel === undefined) {
			ret = record.boundFields[bind];
		} else {
			var cells = _getSortedFilterRcdFields(record);
			for (var ii = 0, jj = cells.length; ii < jj; ii++) {
				if (cells[ii] === bind) {
					if (ii === 0) {
						next = cells[ii + 1];
						prev = bind;
					} else
					if (ii === (cells.length - 1)) {
						next = cells[0];
						prev = cells[ii - 1];
					} else {
						next = cells[ii + 1];
						prev = cells[ii - 1];
					}
					break;
				}
			}
			ret = record.boundFields[nextSel ? next : prev];
		}
	}
	return ret;
};



exports.addFieldCell = function(col, $field) {
	var record = col.list.builder.filterRecord;
	var td = record.cellsMap[col.$item.$bind] = document.createElement("td");
	td.className = "s-list-filter-cell";
	record[col.table.$rowKey].appendChild(td);
	if (col.$isHidden) {
		td.style.display = "none";
	}
	col.cssFilter = null;
	if ($field.$hasFilterCapability) {
		var field = _loadField(record, td, $field, col.$item.$bind);
		record.fieldCellsMap[col.$item.$bind] = field;
		col.cssRecordCellFilter = " s-grid-col-filter";
		switch ($field.$type) {
			case "application/x-choice":
			case "application/x-date":
			case "application/x-time":
			case "application/x-reference":
				col.cssRecordCellFilter += " s-grid-col-filter-type-btn";
		}

		// update filter cell if where params in url (issue #3022)
		if (col.list.$urlParams.where) {
			var $filterBind = col.$item.$bind;
			var exp = syra_site.filterMaker.parseWhere(col.list.$urlParams.where, col.$item.$bind);
			var $isRefField = false;
			// in case of reference field, appropriate $bind value is field.$reference.$value.$prop
			if ($field.$type == 'application/x-reference') {
				$filterBind = field.$reference.$value.$prop;
				$isRefField = true;
			}
			if (exp && $filterBind == exp.$bind) {
				_setOperator(field, exp.$operator);
				// update dataset and field data value
				if ($isRefField) {
					record.dataset[col.$item.$bind] = {};
					record.dataset[col.$item.$bind][$filterBind] = exp.$value;
				} else {
					record.dataset[col.$item.$bind] = exp.$value;
				}
				field.setDataValue(exp.$value);
			}
		}
		return true;
	}
};