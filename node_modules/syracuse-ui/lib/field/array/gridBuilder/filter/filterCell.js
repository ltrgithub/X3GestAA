"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _filterMaker = require('syracuse-ui/lib/field/filter/filterMaker');

function FilterCell() {}

exports.FilterCell = helpers.defineClass(FilterCell, null, {
	_ensureFilterField: function() {
		if (this.$field.$type == "application/x-reference") {
			this.$filterField = this.field.$field.$item[this.field.$reference.$value.$itemProp];
			if (this.$filterField) {
				this.$filterField = this.record.$prototype.$properties[this.field.$reference.$value.$prop];
				if (this.$filterField) {
					this.$filterCode = this.field.$reference.$value.$prop;
				}
			}
			if (!this.$filterField) {
				this.$filterField = this.field.$field.$item.$properties[this.field.$reference.$value.$prop];
				this.$filterCode = this.$bind + "." + this.field.$reference.$value.$prop;
			}
		}
	},
	setOperator: function(operator) {
		this._operator.style.backgroundImage = "url('" + syra_site.$item.$iconPath + "page/s-filter-" + (this.operator = operator) + ".png')";
	},
	getValue: function() {
		var field = this.record.boundFields[this.$bind][0];
		if (this.operator != "none") {
			this._ensureFilterField();
			return _filterMaker.getFieldValue({
				field: field,
				$bind: this.$bind,
				$type: this.$field.$type,
				operator: this.operator,
				$filterCode: this.$filterCode,
				$filterField: this.$filterField
			});
		}
	},
	ensureEqual: function() {
		// force operator to equals
		if (this.operator === "none" && this.$field) {
			var defaultFilter;
			switch (this.$field.$type) {
				case "application/x-date":
				case "application/x-time":
				case "application/x-datetime":
					defaultFilter = "ge";
					break;
				case "application/x-string":
					defaultFilter = "like";
					break;
				default:
					defaultFilter = "eq";
					break;
			}
			this.setOperator(defaultFilter);
		}
	},
	ensureDefault: function() {
		if (this.$field) {
			var defaultFilter, value = this.record.boundFields[this.$bind][0].getInputValue();
			switch (this.$field.$type) {
				case "application/x-string":
					defaultFilter = (value !== "" && this.operator === "none") ? "like_s" : (value === "" && this.operator !== "none") ? "none" : undefined;
					break;
				default:
					defaultFilter = (value !== "" && this.operator === "none") ? "ge" : (value === "" && this.operator !== "none") ? "none" : undefined;
					break;
			}
			if (defaultFilter)
				this.setOperator(defaultFilter);
		}
	},
	dispose: function() {
		if (this.field) {
			delete this.field.onFilterCellClick;
		};
		this.$filterField = this.record = this.field = this.layoutSlot = this._operator = this.list = this.$field = null;
	}
});