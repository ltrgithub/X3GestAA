"use strict";
var helpers = require('syracuse-core/lib/helpers');

function GridCardBuilder() {}

exports.GridCardBuilder = helpers.defineClass(GridCardBuilder, null, {
	load: function(builder) {
		this.list = builder.list;
		this._ensureCardMode();
	},
	dispose: function() {
		this.list = this.tableSlot = this._separator = this._cardSlot = this.recordCardView = this._popupCard = null;
	},
	_findCardField: function(name, record) {
		var found = null;
		var fields = record.boundFields[name];
		if (fields) {
			for (var ii = 0, jj = fields.length; !found && ii < jj; ii++) {
				var field = fields[ii];
				var boxParent = field.boxParent;
				while (boxParent && boxParent != record) {
					if (boxParent == record.cardview) {
						found = field;
						break;
					}
					boxParent = boxParent.boxParent;
				}
			}
		}
		return found;
	},
	_createComplexFieldsCard: function() {
		var self = this;
		var list = this.list;
		var $arrayBinds = [];
		var $items = list.$item.$layout.$items;
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			var $field = list.$fieldProperties[$item.$bind];
			if ($field && !$field.$isHidden && !$field.$isExcluded) {
				switch ($field.$type) {
					case "application/x-array":
					case "application/x-object":
					case "text/rtf":
					case "text/html":
						if (!$field.$isHidden) {
							if (list.$item.$cards) {
								$field.$isHidden = true;
							} else {
								$arrayBinds.push($item.$bind);
							}
						}
						break;
				}
			}
		}
		if ($arrayBinds.length > 0) {
			list.$item.$layout.$items = list.$item.$layout.$items.filter(function($item) {
				return $arrayBinds.indexOf($item.$bind) < 0;
			});
			list.$item.$cards = {
				$layout: {
					$layoutType: "tabs",
					$items: $arrayBinds.map(function($bind) {
						var $field = list.$fieldProperties[$bind];
						var item = {
							$bind: $bind,
							$isTitleHidden: true
						};
						// adding $item properties (necessary for job viewer diagnose stacktrace view)
						item = self._buildCardLayoutItem(item, $field);
						return {
							$category: "section",
							$title: list.getLocalizedTitle($field.$shortTitle || $field.$title || "") || ("( " + $bind + " )"),
							$layout: {
								$items: [item]
							}

						};
					})
				}
			};
		}
	},
	_buildCardLayoutItem: function(item, $field) {
		var properties = ["$isEditMode", "$isTitleRowHidden", "$isPagerHidden", "$isQuickDesignerEnabled", "$isMenuRecordHidden"];
		if ($field.$item && Object.keys($field.$item).length > 0) {
			for (var ii = 0, jj = properties.length; ii < jj; ii++) {
				if ($field.$item[properties[ii]]) {
					item[properties[ii]] = $field.$item[properties[ii]];
				}
			}
		}
		return item;
	},
	_ensureCardMode: function() {
		var list = this.list;
		if (!list.$item.$cards) {
			this._createComplexFieldsCard();
		}
		if (list.$item.$cards) {
			var $cards = list.$item.$cards;
			$cards.$category = $cards.$category || "section";
			$cards.$position = $cards.$position || "inline";
			if ($cards.$position != "inline") {
				if (list.$item.$selectMode === undefined) {
					list.$item.$selectMode = "row";
				}
				this.tableSlot = document.createElement("div");
				this._separator = document.createElement("div");
				this._cardSlot = document.createElement("div");
				if ($cards.$position == "left" || $cards.$position == "right") {
					list._core.className = "s-list-core s-list-gridcard-slot-horz";
					this.tableSlot.className = "s-list-grid-slot-horz";
					this._cardSlot.className = "s-list-card-slot-horz";
					this._separator.className = "s-list-card-sep-horz";
					this._cardSlot.style.width = ($cards.$widths || "50") + "%";
				} else {
					list._core.className = "s-list-core s-list-gridcard-slot";
					this.tableSlot.className = "s-list-grid-slot";
					this._cardSlot.className = "s-list-card-slot";
					this._separator.className = "s-list-card-sep";
					this.tableSlot.style.width = "";
					this._cardSlot.style.width = "";
				}
				if (($cards.$position == "top") || ($cards.$position == "left")) {
					list._core.appendChild(this._cardSlot);
					list._core.appendChild(this._separator);
					list._core.appendChild(this.tableSlot);
				} else {
					list._core.appendChild(this.tableSlot);
					list._core.appendChild(this._separator);
					if ($cards.$position != "popup") {
						list._core.appendChild(this._cardSlot);
					}
				}
			}
		}
	},
	applyDesignMetaData: function(metaData, onAuthoring) {
		if (metaData.$cards !== undefined) {
			this.list.$item.$cards = metaData.$cards;
			if (this._cardSlot) {
				var scroller = this.list.builder.scroller;
				this.list._core.appendChild(scroller._headSlot);
				this.list._core.appendChild(scroller._bodySlot);
				this.list._core.appendChild(scroller._hscroller);
				document.site.removeDomChild(this.tableSlot);
				document.site.removeDomChild(this._separator);
				document.site.removeDomChild(this._cardSlot);
				this._separator = this.tableSlot = this._cardSlot = null;
			}
			this.list.reloadBuilder(true);
			if (metaData.$cards.$widths !== undefined) {
				if (this._cardSlot) {
					this._cardSlot.style.width = this.list.$item.$cards.$widths + "%";
				}
			}
		}
	},
	findPopupField: function(name, record) {
		if (record.cardview && this.recordCardView == record) {
			if (this.isPopupCardOpened() && !this._popupCard.dialog.disposed) {
				return this._findCardField(name, record);
			}
		}
		return null;
	},
	toggleCard: function(record, show) {
		if (record.cardsOpener) {
			document.site.toggleClass(record.cardsOpener, "s-close", !show);
		}
		if (this._cardSlot) {
			if (show) {
				if (this.list.$item.$cards.$position == "popup" && !this._popupCard) {
					return;
				}
				if (this.recordCardView) {
					if (this.recordCardView.cardview) {
						this.recordCardView.cardview.$$item.detach();
					}
					// record.removeItem(this.recordCardView.cardview, true);
					//  delete this.recordCardView.cardview;
				}
				this.recordCardView = record;
				document.site.emptyDom(this._cardSlot);
				var $cards = this.list.$item.$cards;
				var $pagerActions;
				if (!record.cardview && this.list.isClientFetch && this.list.$item.$cards.$position == "popup") {
					$cards.$isTitleHidden = !($cards.$title && $cards.$title != "-");
					$cards = {
						$layout: {
							$items: [{
								$layoutType: "row",
								$autoSize: true,
								$items: [{
									$category: "menus",
									$title: "-",
									$masterFriendMenuId: record.id + "-menu-picker",
									$isTitlePicker: true,
									$isBoxCollapsable: true,
									$isPopupContent: true,
									$id: record.id + "-card-menu-picker",
									$skin: "s-list-menus",
									$itemSkin: "s-record-menus-link",
									$layout: {
										$items: [{
											$layoutType: "stack",
											$items: [{
												$bind: "$create",
												$icon: {
													$mode: "iconText",
													$path: "list/s-list-"
												}
											}, {
												$bind: "$edit",
												$icon: {
													$mode: "iconText",
													$path: "list/s-list-"
												}
											}, {
												$bind: "$delete",
												$icon: {
													$mode: "iconText",
													$path: "list/s-list-"
												}
											}]
										}]
									}
								}]
							},
							$cards]
						}
					};
					if (this.list.dataset.length > 1) {
						var $pagerMenus = {
							$category: "menus",
							$isTitlePicker: true,
							$skin: "s-page-pager",
							$itemIcon: {
								$mode: "iconText",
								$path: "list/s-record-"
							},
							$layout: {
								$layoutType: "row",
								$autoSize: true,
								$items: [{
									$bind: "$first"
								}, {
									$bind: "$previous"
								}, {
									$bind: "$next"
								}, {
									$bind: "$last"
								}]
							}
						};
						$cards.$layout.$items[0].$items.push($pagerMenus);
						$pagerActions = {
							$actions: {
								$first: {
									$title: this.list.localize.flCardFirstRecord,
									$isDisabled: this.list.pagging.$startIndex == 1 && record.$recordIndex == 0
								},
								$previous: {
									$title: this.list.localize.flCardPrevRecord,
									$isHidden: this.list.dataset.length <= 2,
									$isDisabled: this.list.pagging.$startIndex == 1 && record.$recordIndex == 0
								},
								$next: {
									$title: this.list.localize.flCardNextRecord,
									$isHidden: this.list.dataset.length <= 2,
									$isDisabled: (this.list.pagging.$startIndex + record.$recordIndex) == this.list.dataset.length
								},
								$last: {
									$title: this.list.localize.flCardLastRecord,
									$isDisabled: (this.list.pagging.$startIndex + record.$recordIndex) == this.list.dataset.length
								}
							}
						};
					}
				}
				this._cardSlot.setAttribute("data-s-record", record.$uuid);
				this._cardSlot.setAttribute("data-s-article", record.id);
				if (!record.cardview) {
					record.cardview = this.list.page.loadNewItem(this._cardSlot, $cards, record);
				} else {
					this._cardSlot.appendChild(record.cardview.$$item[0]);
				}
				if (this.isPopupCardOpened()) {
					this._popupCard.dialog._content = this._popupCard.dialog.options.content = record.cardview;
				}
				if ($pagerActions) {
					record.applyActionLinkChange($pagerActions);
				}

			}
		} else {
			if (!record._cardsRow) {
				record._cardsSlot = document.createElement("td");
				record._cardsSlot.className = record.boxParent.$skin + "-cards-cell";
				record._cardsSlot.setAttribute("colspan", this.list.builder.orderCols.length);
				record._cardsRow = document.createElement("tr");
				record._cardsSlot.setAttribute("data-s-record", record.$uuid);
				record._cardsSlot.setAttribute("data-s-article", record.id);
				record.$$item.after(record._cardsRow);
				record._cardsRow.appendChild(record._cardsSlot);
				record.cardview = this.list.page.loadNewItem(record._cardsSlot, this.list.$item.$cards, record);
			}
			record._cardsRow.style.display = show ? "" : "none";
		}
	},
	onOpenerClick: function(opener) {
		var show = opener.className.indexOf("s-close") >= 0;
		var $uuids = (opener.className.indexOf("s-cardview-opener-all") >= 0) ? Object.keys(this.list.recordsMap) : [document.controller.findArticle($(opener)).$uuid];
		for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
			var record = this.list.recordsMap[$uuids[ii]];
			this.toggleCard(record, show);
		}
		document.site.toggleClass(opener, "s-close", !show);
	},
	isPopupCardOpened: function() {
		return this._popupCard && this._popupCard.dialog;
	},
	togglePopup: function(record) {
		var self = this;
		if (record) {
			if (!(self._popupCard && self.recordCardView == record)) {
				if (self._popupCard) {
					self.list.selector.select(record.$uuid, true); //ensure selection
				} else {
					self.list.page.externalAdapter.onFieldClickPicker({
						field: record,
						pickerType: "openCard",
						doEvent: function() {
							self._popupCard = {
								slot: document.createElement("div"),
								slotHeader: document.createElement("div")
							};
							self._popupCard.slot.className = "s-list-card-slot-popup";
							self._popupCard.slot.appendChild(self._popupCard.slotHeader).className = "s-list-card-slot-popup-header";
							self._cardSlot.className = "s-list-card-slot-popup-body";
							self._popupCard.slot.appendChild(self._cardSlot);
							if (!record.cardview) {
								self.list.selector.select(record.$uuid, true); //ensure selection
							}
							var offsetRow = $(record.dataRow).offset();
							self.recordCardView.togglePopupViewMenu(false);
							(self._popupCard.dialog = record.page.openDialog({
								isAutoClose: false,
								$dialogMode: "modal",
								content: record.cardview,
								$dialogSize: "content",
								$$scrollview: $(self._cardSlot),
								dragSpot: self._popupCard.slotHeader,
								$$dialog: $(self._popupCard.slot),
								onresize: function(dialog) {
									self._cardSlot.style.width = dialog.$$dialogSlot.width() + "px";
									self._cardSlot.style.height = (dialog.$$dialogSlot.height() - self._popupCard.slotHeader.offsetHeight) + "px";
								},
								onClose: function() {
									if (self._popupCard) {
										self.list.page.externalAdapter.onFieldClickPicker({
											field: self.recordCardView,
											pickerType: "closeCard",
											doEvent: function() {
												document.site.removeDomChild(self._popupCard.slot);
												document.controller.disposeObject(self._popupCard.dialog);
												self._popupCard.slot = self._popupCard.slotHeader = null;
												self._popupCard = null;
												self.recordCardView.togglePopupViewMenu(true);
											}
										});
									}
									return true;
								},
								onOpened: function(content) {
									self.list.page.externalAdapter.onFieldClickPicker({
										field: self.recordCardView,
										pickerType: "openedCard",
										doEvent: function() {}
									});
								}
							})).appendCloseButton(self._popupCard.slotHeader);
						}
					});
				}
				return;
			}
		}
		if (self._popupCard && self._popupCard.dialog) {
			self._popupCard.dialog.close();
		}
	}
});