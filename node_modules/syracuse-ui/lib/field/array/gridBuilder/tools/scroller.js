"use strict";
var helpers = require('syracuse-core/lib/helpers');

function Scroller() {}

exports.Scroller = helpers.defineClass(Scroller, null, {
	load: function(list) {
		this.list = list;
		repository[this.id = (list.id + "scroller")] = this;
		this.setFixedBodyHeight(this.list.$item.$fixedBodyHeight);
		this._bindEvents(true);
	},
	setFixedBodyHeight: function($fixedBodyHeight) {
		this.$fixedBodyHeight = parseInt($fixedBodyHeight || 0, 10);
	},
	scrollToTitleItem: function(domItem) {
		this.list.page.scrollToItem(domItem, this.list.headTableSlot, true);
	},
	scrollToItem: function(domItem) {
		this.list.page.scrollToItem(domItem, this.list.bodyTableSlot, true);
	},
	onListResize: function() {
		if (this.list.columnFitter.fit()) {
			this.ensureColumnsHScoll();
		}
		if (this.list.maxWidthCol) {
			var width;
			if (this.list.colsWidth < this.list.tableSlotWidth) {
				width = this.list.maxWidthCol.proportionalWidth = this.list.maxWidthCol.colWidth + (this.list.tableSlotWidth - this.list.colsWidth);
			} else {
				if (this.list.maxWidthCol.proportionalWidth) {
					width = this.list.maxWidthCol.colWidth;
					delete this.list.maxWidthCol.proportionalWidth;
				}
			}
			if (width !== undefined) {
				this.list.selColWidth(this.list.maxWidthCol, width + "px");
			}
		}
		this.scrollAreaWidth = this.list.colsWidth - this.list.tableSlotWidth;
		this.list.hscrollBody.style.width = this.list.colsWidth + "px";

		if (this.list.bodyTableSlot.scrollHeight > (this.list.bodyTableSlot.clientHeight + 1)) {
			this.list.headTableSlot.style.marginRight = "17px";
			if (!this._headerCorner) {
				this._headerCorner = document.createElement("div");
				this._headerCorner.className = this.list.$skin + "-head-corner";
				this.list.headTableSlot.parentNode.appendChild(this._headerCorner);
			}
			this._headerCorner.style.display = "";
			this._headerCorner.style.height = this.list.headTableSlot.clientHeight + "px";
		} else {
			this.list.headTableSlot.style.marginRight = "";
			if (this._headerCorner) {
				this._headerCorner.style.display = "none";
			}
		}
		this.list.hscroller.style.display = this.scrollAreaWidth > 0 ? "" : "none";
		if (this.$fixedBodyHeight || this.list.$item.$fitContainer || this.list.$isDockedHeight) {
			if (this.list.bodyTableSlot.style.overflowY != "auto") {
				this.list.bodyTableSlot.style.overflowY = "auto";
			}
			if (this.list.$isDockedHeight) {
				var scrollTop = this.list.page.scrollview.top;
				var bodyRect = this.list.bodyTableSlot.getBoundingClientRect();
				var fieldRect = this.list.fieldValue.getBoundingClientRect();
				var headerH = Math.ceil(bodyRect.top - fieldRect.top);
				var bottomH = Math.ceil(Math.max(0, (fieldRect.height - headerH) - bodyRect.height));
				bodyHeight = this.list.page.scrollview.clientHeight - ((bodyRect.top - scrollTop) + bottomH);
			} else {
				if (this.$fixedBodyHeight || this.list.$item.$fitContainer) {
					if (this.list.$item.$fitContainer) {
						var savScrollTop = this.list.bodyTableSlot.scrollTop;
						this.list.bodyTableSlot.style.height = "";
						var bodyRect = syra_site.dom.getBoundingClientRect(this.list.bodyTableSlot);
						var diff = this.list.layoutSlot.scrollHeight - this.list.layoutSlot.clientHeight;
						var bodyHeight = bodyRect.height - diff;
						this.list.bodyTableSlot.style.height = bodyHeight + "px";
						this.list.bodyTableSlot.scrollTop = savScrollTop;
					} else {
						var bodyRect = syra_site.dom.getBoundingClientRect(this.list.bodyTableSlot);
						this.list.bodyTableSlot.style.height = ((Math.abs(this.$fixedBodyHeight - bodyRect.height) < 2) ? bodyRect.height : this.$fixedBodyHeight) + "px";
					}
				}
			}
		} else {
			if (this.list.bodyTableSlot.style.overflowY == "auto") {
				this.list.bodyTableSlot.style.overflowY = "";
				this.list.bodyTableSlot.style.height = "";
			}
		}
		this._appendButtons();

	},
	_requestScrollColumns: function() {
		var self = this;
		if (!self.scrollTimeout) {
			self.scrollTimeout = setTimeout(function() {
				self.scrollTimeout = null;
				self.list.bodyTableSlot.scrollLeft = self.list.headTableSlot.scrollLeft = 0;
				self.ensureColumnsHScoll();
			}, 100);
		}
	},
	ensureColumnsHScoll: function() {
		if (!(this.list.maxWidthCol && this.list.maxWidthCol.proportionalWidth)) {
			var hScrollLeft = this.list.hscroller.scrollLeft;
			for (var ii = 0, jj = this.list.scrolledCols.length; ii < jj; ii++) {
				var col = this.list.scrolledCols[ii];
				var prevScrollWidth = col.scrollWidthValue;
				if (prevScrollWidth === undefined) {
					prevScrollWidth = col.colWidth;
				}
				if (hScrollLeft > col.maxX) {
					if (this.focusedCol === col) {
						hScrollLeft = col.minX;
						return;
					}
					col.scrollWidthValue = 0;
				} else {
					if (hScrollLeft <= col.minX) {
						col.scrollWidthValue = col.colWidth;
					} else {
						if (hScrollLeft >= col.minX && hScrollLeft <= col.maxX) {
							if (this.focusedCol === col) {
								continue;
							}
							var diff = hScrollLeft - col.minX;
							col.scrollWidthValue = col.colWidth - diff;
						}
					}
				}
				if (prevScrollWidth != col.scrollWidthValue) {
					this.list.selColWidth(col, col.scrollWidthValue + "px");
				}
			}
		}
	},
	ensureFieldVisibility: function(field) {
		if (this.list.scrolledWidth) {
			var visibleWidth = 0;
			var scrollViewWidth = this.list.tableSlotWidth - this.list.fixedWidth;
			for (var ii = 0, jj = this.list.scrolledCols.length; ii < jj; ii++) {
				var col = this.list.scrolledCols[ii];
				if (field.$item.$bind == col.$bind) {
					if (col.scrollWidthValue < col.colWidth) {
						this.list.hscroller.scrollLeft = col.minX;
						console.log("ensureFieldVisibility 1 " + this.list.hscroller.scrollLeft);
					} else {
						if ((visibleWidth + col.colWidth) > scrollViewWidth) {
							this.list.hscroller.scrollLeft = col.minX;
							console.log("ensureFieldVisibility 2 " + this.list.hscroller.scrollLeft);
						}
						/*var scrollLeft = this.list.hscroller.scrollLeft;
                         
                         var endXView = scrollLeft + scrollViewWidth;
                         if (endXView < col.maxX) {
                         this.list.hscroller.scrollLeft = col.minX;
                         }*/
					}
					break;
				}
				visibleWidth += col.scrollWidthValue === undefined ? col.colWidth : col.scrollWidthValue;
			}
		}
	},
	_bindEvents: function(bind) {
		var self = this;
		if (bind) {
			self.hscrollHandler = self.list.hscroller.addEventListener("scroll", function(event) {
				event.stopPropagation();
				if (!syra_site.isInoutDisabled && self.list.page.isPageLoaded && !self.list.page._isDataChanging) {
					var hScrollLeft = self.list.hscroller.scrollLeft;
					if (!self.list.scrolledWidth) {
						if (self.list.bodyTableSlot.scrollLeft != hScrollLeft) {
							self.list.bodyTableSlot.scrollLeft = hScrollLeft;
						}
						if (self.list.headTableSlot.scrollLeft != hScrollLeft) {
							self.list.headTableSlot.scrollLeft = hScrollLeft;
						}
					} else {
						self._requestScrollColumns();
						delete self.focusedCol;
					}
				}
			});
			if (!self.list.page.isFusionPage) {
				self.bodyScrollHandler = self.list.bodyTableSlot.addEventListener("scroll", function(event) {
					if (!syra_site.isInoutDisabled && self.list.page.isPageLoaded && !self.list.page._isDataChanging) {
						if (!self.list.scrolledWidth) {
							if (self.list.hscroller.scrollLeft != self.list.bodyTableSlot.scrollLeft) {
								self.list.hscroller.scrollLeft = self.list.bodyTableSlot.scrollLeft;
							}
							if (self.list.headTableSlot.scrollLeft != self.list.bodyTableSlot.scrollLeft) {
								self.list.headTableSlot.scrollLeft = self.list.bodyTableSlot.scrollLeft;
							}
						} else {
							if (self.list.bodyTableSlot && self.list.bodyTableSlot.scrollLeft) {
								self.list.hscroller.scrollLeft += self.list.bodyTableSlot.scrollLeft;
								self.list.bodyTableSlot.scrollLeft = 0;
							}
							return false;
						}
					}
				});
			}
			if (!self.list.page.isFusionPage) {
				self.headScrollHandler = self.list.headTableSlot.addEventListener("scroll", function(event) {
					if (!syra_site.isInoutDisabled && self.list.page.isPageLoaded && !self.list.page._isDataChanging) {
						if (!self.list.scrolledWidth) {
							if (self.list.hscroller.scrollLeft != self.list.headTableSlot.scrollLeft) {
								self.list.hscroller.scrollLeft = self.list.headTableSlot.scrollLeft;
							}
							if (self.list.bodyTableSlot.scrollLeft != self.list.headTableSlot.scrollLeft) {
								self.list.bodyTableSlot.scrollLeft = self.list.headTableSlot.scrollLeft;
							}
						} else {
							if (self.list.headTableSlot.scrollLeft) {
								self.list.hscroller.scrollLeft += self.list.headTableSlot.scrollLeft;
								self.list.headTableSlot.scrollLeft = 0;
							}
							return false;
						}
					}
				});
			}
		} else {
			self.list.hscroller && self.list.hscroller.removeEventListener("scroll", self.hscrollHandler);
			self.list.bodyTableSlot && self.list.bodyTableSlot.removeEventListener("scroll", self.bodyScrollHandler);
			self.list.headTableSlot && self.list.headTableSlot.removeEventListener("scroll", self.headScrollHandler);

		}
	},
	_scrollCols: function(left) {
		// in order to scroll column per column
		var self = this;
		clearTimeout(self._scrollColsTimeout);
		self._scrollColsTimeout = setTimeout(function() {
			var col;
			for (var ii = 0, jj = self.list.scrolledCols.length; ii < jj; ii++) {
				if (self.list.scrolledCols[ii].scrollWidthValue == undefined || self.list.scrolledCols[ii].scrollWidthValue != 0) {
					col = self.list.scrolledCols[ii];
					break;
				}
			}
			// calculating scroll offset
			// if scrollWidthValue is undefined, col is the first scrollable column. Offset corresponds to the column width.
			// if scrollWidthValue is defined, offset depends whether scroll is going left or right.
			// if scroll goes to left, then offset value depends on whether column is halfed scrolled (col.scrollWidthValue != col.colWidth) or not scrolled at all (col.scrollWidthValue == col.colWidth).
			// if scroll goes to right, offset corresponds to column scrollWidthValue
			var offset;
			if (col.scrollWidthValue == undefined) {
				offset = col.colWidth;
			} else {
				if (left) {
					offset = (col.scrollWidthValue == col.colWidth ? (ii > 0 ? self.list.scrolledCols[ii - 1].colWidth : col.scrollWidthValue) : col.colWidth - col.scrollWidthValue);
				} else {
					offset = col.scrollWidthValue;
				}
			}
			self.list.hscroller.scrollLeft = left ? self.list.hscroller.scrollLeft - offset : self.list.hscroller.scrollLeft + offset;
		}, 20);
	},
	onButonClick: function(picker) {
		this._clearButtonTimer();
		this._scrollCols(picker == this.leftBtn);
	},
	onItemInOut: function(onEnter, event, target) {
		var self = this;
		if (onEnter) {
			self._btnStartTimer = setTimeout(function() {
				self._btnInterval = setInterval(function() {
					if (self.list.hscroller) {
						self._scrollCols(target == self.leftBtn);
					}
				}, 1000);
			}, 1000);
		} else {
			self._clearButtonTimer();
		}
	},
	_clearButtonTimer: function() {
		this._btnStartTimer && clearTimeout(this._btnStartTimer);
		this._btnInterval && clearInterval(this._btnInterval);
		this._btnInterval = this._btnStartTimer = null;
	},
	_appendButtons: function() {
		var show;
		if (!(this.list.maxWidthCol && this.list.maxWidthCol.proportionalWidth) && this.list.page.scrollview && this.list.isScrollButtonEnabled !== false && !this.list.treeDecorator) {
			if (this.list.records.length > 20) {
				if (!this.leftBtn) {
					this.leftBtn = document.createElement("a");
					this.leftBtn.className = "s-list-btn-scroll-left";
					this.leftBtn.syraIsDisplay = true;
					this.rightBtn = document.createElement("a");
					this.rightBtn.className = "s-list-btn-scroll-right";
					this.leftBtn.syraTool = this.rightBtn.syraTool = this.id;
					this.leftBtn.syrainout = this.rightBtn.syrainout = this.id;
					this.leftBtn.syraOnClick = this.rightBtn.syraOnClick = "onButonClick";

					this.leftBtnStyle = this.leftBtn.style;
					this.rightBtnStyle = this.rightBtn.style;
					this.list._core.appendChild(this.leftBtn);
					this.list._core.appendChild(this.rightBtn);
					if (this.list.page && this.list.page.addScrollViewListener) {
						this.list.page.addScrollViewListener(this);
					}
				}
				this.onPageScrollViewChange();
				show = true;
			}
		}
		this.leftBtn && this._showButtons(show);
	},
	_showButtons: function(show) {
		if (show != this.leftBtn.syraIsDisplay) {
			var display = (this.leftBtn.syraIsDisplay = show) ? "" : "none";
			this.leftBtnStyle.display = display;
			this.rightBtnStyle.display = display;
		}
	},
	onPageScrollViewChange: function() {
		if (this.leftBtn) {
			var buttonsRect = syra_site.dom.getBoundingClientRect(this.list.domValueSlot);
			var scrollRect = this.list.page.getScrollviewSize();
			var show;
			if (!(buttonsRect.top > scrollRect.top && buttonsRect.bottom < scrollRect.bottom)) {
				var bottom = (buttonsRect.bottom < scrollRect.bottom) ? buttonsRect.bottom : scrollRect.bottom;
				var top;
				if (buttonsRect.top > scrollRect.top) {
					top = (bottom - buttonsRect.top) / 2;
				} else {
					top = Math.abs(buttonsRect.top) + ((bottom - scrollRect.top) / 2);
				}
				this.leftBtnStyle.top = top + "px";
				this.rightBtnStyle.top = top + "px";
				show = true;
			}
			this._showButtons(show);
		}
	},
	dispose: function() {
		this._clearButtonTimer();
		this._bindEvents(false);
		delete repository[this.id];
		if (this.leftBtn) {
			if (this.list.page && this.list.page.removeScrollViewListener) {
				this.list.page.removeScrollViewListener(this.list);
			}
			this.leftBtnStyle = this.rightBtnStyle = this.leftBtn = this.rightBtn = null;
		}
		this._headerCorner = this.list = this._scrollColsTimeout = null;
		this.hscrollHandler = this.bodyScrollHandler = this.headScrollHandler = null;
	}
});