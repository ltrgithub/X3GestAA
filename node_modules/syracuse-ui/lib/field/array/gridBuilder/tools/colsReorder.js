"use strict";
exports.DDAgent = require("./colsReorderDDAgent").ColsReorderDDAgent;

function _moveCells(record, targetIndex, sourceIndex, dropAtEnd) {
	var children = record.dataRow.childNodes;
	var targetCell = children[targetIndex];
	var sourceCell = children[sourceIndex];
	targetCell.parentNode.insertBefore(sourceCell, dropAtEnd ? targetCell.nextSibling : targetCell);
}

function _findItemIndex(list, $bind) {
	for (var ii = 0, jj = list.$item.$layout.$items.length; ii < jj; ii++) {
		if (list.$item.$layout.$items[ii].$bind == $bind) {
			return ii;
		}
	}
	return -1;
}

exports.moveCols = function(list, colSource, colTarget, dropAtEnd) {
	var sourceIndex = list.orderCols.indexOf(colSource);
	if (sourceIndex >= 0) {
		var targetIndex = list.orderCols.indexOf(colTarget);
		list.orderCols.splice(sourceIndex, 1);
		var newSourceIndex = list.orderCols.indexOf(colTarget);
		if (dropAtEnd) {
			newSourceIndex++;
		}
		list.orderCols.splice(newSourceIndex, 0, colSource);
		var $sourceItem = list.$item.$layout.$items.splice(_findItemIndex(list, colSource.$bind), 1)[0];
		var $newSourceIndex = _findItemIndex(list, colTarget.$bind);
		if (dropAtEnd) {
			$newSourceIndex++;
		}
		list.$item.$layout.$items.splice($newSourceIndex, 0, $sourceItem);

		list.filterRecord && _moveCells(list.filterRecord, targetIndex, sourceIndex, dropAtEnd);

		colTarget.groupBody.parentNode.insertBefore(colSource.groupBody, dropAtEnd ? colTarget.groupBody.nextSibling : colTarget.groupBody);
		colTarget.groupHead.parentNode.insertBefore(colSource.groupHead, dropAtEnd ? colTarget.groupHead.nextSibling : colTarget.groupHead);
		colTarget.titleCell.parentNode.insertBefore(colSource.titleCell, dropAtEnd ? colTarget.titleCell.nextSibling : colTarget.titleCell);
		for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
			_moveCells(list.records[ii], targetIndex, sourceIndex, dropAtEnd);
		}
		if (list.lastColFixed) {
			var lastColFixedIndex = list.orderCols.indexOf(list.lastColFixed);
			for (var ii = 0, jj = lastColFixedIndex; ii < jj; ii++) {
				var col = list.orderCols[ii];
				if (!col.$isFixed) {
					col.$isFixed = col.$item.$isFixed = true;
					syra_site.dom.toggleClass(col.titleCell, "s-grid-col-fixed", true);
					list.toggleFixRecordCell(ii, true);
				}
			}
			for (var ii = jj + 1, jj = list.orderCols.length; ii < jj; ii++) {
				var col = list.orderCols[ii];
				if (col.$isFixed) {
					delete col.$isFixed;
					delete col.$item.$isFixed;
					syra_site.dom.toggleClass(col.titleCell, "s-grid-col-fixed", false);
					list.toggleFixRecordCell(ii, false);
				}
			}
		}
	}
	list.savePreferences(true, "$columns");
	list.resizeScrollView();
};

function _resetRecordOrder(record) {
	if (record.fieldCells) {
		var $binds = Object.keys(record.fieldCells);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var cell = record.fieldCells[$bind].layoutSlot;
			cell && record.domItem.removeChild(cell);
		}
	}
	var orders = record.list.orderCols;
	for (var ii = 0, jj = orders.length; ii < jj; ii++) {
		var $bind = orders[ii].$bind;
		if ($bind && record.fieldCells[$bind]) {
			record.domItem.appendChild(record.fieldCells[$bind].layoutSlot);
		}
	}
}

exports.resetReorder = function(list) {
	if (this.$origItem.$columns) {
		var source = list.$item.$layout.$items;
		var $items = list.$item.$layout.$items = [];
		for (var ii = 0, jj = list.$origItem.$columns.length; ii < jj; ii++) {
			var $bind = list.$origItem.$columns[ii];
			var $item = list.bindMap[$bind];
			if ($item) {
				source.splice(source.indexOf($item), 1);
				$items.push($item);
			}
		}
		for (var ii = 0, jj = source.length; ii < jj; ii++) {
			$items.push(source[ii]);
		}
		//find first bind Col
		for (var ii = 0, jj = list.orderCols.length; ii < jj; ii++) {
			if (list.orderCols[ii].$bind) {
				if (ii > 0) {
					list.orderCols.splice(ii);
				} else {
					list.orderCols = [];
				}
				break;
			}
		}
		for (var ii = 0, jj = list.$origItem.$columns.length; ii < jj; ii++) {
			var $bind = list.$origItem.$columns[ii];
			list.orderCols.push(list.cols[$bind]);
		}
		for (var ii = 0, jj = list.orderCols.length; ii < jj; ii++) {
			var col = list.orderCols[ii];
			col.titleCell.parentNode.appendChild(col.titleCell);
			col.groupHead.parentNode.appendChild(col.groupHead);
			col.groupBody.parentNode.appendChild(col.groupBody);
		}
		list.filterRecord && _resetRecordOrder(list, list.filterRecord);
		for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
			_resetRecordOrder(list, list.records[ii]);
		}
	}
};