"use strict";
var helpers = require('syracuse-core/lib/helpers');

function ColResizerDDAgent() {}

exports.ColResizerDDAgent = helpers.defineClass(ColResizerDDAgent, null, {
	start: function(dropItem) {
		this.resizedCol = dropItem.resizedCol;
		this.list = dropItem.list;
		var found = this.list.scrolledCols.indexOf(this.resizedCol);
		if (found >= 0 && (found + 1) < this.list.orderCols.length) {
			this.rightCol = this.list.scrolledCols[found + 1];
		}
		syra_dd.ddAgent = this;
		syra_site.dom.getBoundingClientRect(this.resizedCol.titleCell, this);
		this.startX = this.resizedCol.resizer.getBoundingClientRect().left;
		this.resizedCol.resizer.style.cursor = this.cursor = "e-resize";
		this.clientWidth = this.list.bodyTableSlot.clientWidth;
	},
	onDragMouseMove: function(target, event) {
		var cursor = "not-allowed";
		if ((event.pageY >= (this.top - 20)) && (event.pageY <= (this.bottom + 20))) {
			var newWidth = this.resizedCol.colWidth + (event.pageX - this.startX);
			if (newWidth > 50) {
				this.resizedCol.newWidth = newWidth;
				this.list.setColWidth(this.resizedCol, newWidth + "px");
				cursor = "e-resize";
				if (this.list.maxWidthCol.proportionalWidth) {
					if (this.list.maxWidthCol != this.resizedCol) {
						this.list.maxWidthCol.newProportionalWidth = Math.max(this.list.maxWidthCol.proportionalWidth - (event.pageX - this.startX), this.list.maxWidthCol.colWidth);
						this.list.setColWidth(this.list.maxWidthCol, this.list.maxWidthCol.newProportionalWidth + "px");
					} else {
						this.rightCol.newWidth = this.rightCol.colWidth - (event.pageX - this.startX);
						this.list.setColWidth(this.rightCol, this.rightCol.newWidth + "px");
					}
				}
			}
			var widthTotal = 0;
			for (var ii = 0, jj = this.list.scrolledCols.length; ii < jj; ii++) {
				widthTotal += (this.list.scrolledCols[ii].newWidth || this.list.scrolledCols[ii].newProportionalWidth || this.list.scrolledCols[ii].proportionalWidth || this.list.scrolledCols[ii].colWidth);
			}
			this.list.hscrollBody.style.width = widthTotal + "px";
			this.list.hscroller.style.display = widthTotal <= this.clientWidth ? "none" : "";
		}
		syra_site.body.style.cursor = cursor;
	},
	onDragMouseUp: function(target, event) {
		var $items = this.list.$item.$layout.$items;
		if (this.resizedCol.newWidth !== undefined) {
			this.list.$userPreferences = this.list.$userPreferences || {};
			this.list.$userPreferences.$columnWidths = this.list.$userPreferences.$columnWidths || {};
			delete this.list.$userPreferences.$colWidths;
			this.list.$userPreferences.$columnWidths[this.resizedCol.$item.$bind] = (this.resizedCol.colWidth = Math.round(this.resizedCol.newWidth)) + "px";
			if (this.list.maxWidthCol.newProportionalWidth !== undefined) {
				this.list.$userPreferences.$columnWidths[this.list.maxWidthCol.$item.$bind] = (this.list.maxWidthCol.colWidth = Math.round(this.list.maxWidthCol.newProportionalWidth)) + "px";
			}
			this.list.savePreferences(true, "$columnWidths");
			delete this.resizedCol.newWidth;
			delete this.list.maxWidthCol.newProportionalWidth;
		}
		syra_site.body.style.cursor = "default";
		this.list.resizeArticle(true);
	},
	dispose: function() {
		this.startX = this.resizedCol = this.list = this.resizedCol = null;
	}
});