"use strict";
var helpers = require('syracuse-core/lib/helpers');

function ColResizerDDAgent() {}

exports.ColResizerDDAgent = helpers.defineClass(ColResizerDDAgent, null, {
	start: function(dropItem) {
		this.resizedCol = dropItem.resizedCol;
		this.list = dropItem.list;
		for (var ii = this.list.orderCols.indexOf(this.resizedCol) - 1; ii >= 0; ii--) {
			if (!this.list.orderCols[ii].$isFixed && !this.list.orderCols[ii].$isHidden) {
				this.leftCol = this.list.orderCols[ii];
			}
		}
		for (var ii = this.list.orderCols.indexOf(this.resizedCol) + 1, jj = this.list.orderCols.length; ii < jj; ii++) {
			if (!this.list.orderCols[ii].$isFixed && !this.list.orderCols[ii].$isHidden) {
				this.rightCol = this.list.orderCols[ii];
			}
		}
		document.site.ddManager.ddAgent = this;
		document.site.dom.getBoundingClientRect(this.resizedCol.titleCell, this);
		this.startX = this.resizedCol.resizer.getBoundingClientRect().left;
		this.resizedCol.resizer.style.cursor = this.cursor = "e-resize";
		this.clientWidth = this.list.scroller.bodySlot.clientWidth;
	},
	onDragMouseMove: function(target, event) {
		var cursor = "not-allowed";
		if ((event.pageY >= (this.top - 20)) && (event.pageY <= (this.bottom + 20))) {
			var newWidth = this.resizedCol.realWidth + (event.pageX - this.startX);
			if (newWidth > 50) {
				this.resizedCol.groupHead.style.width = this.resizedCol.groupBody.style.width = (this.resizedCol.newWidth = newWidth) + "px";
				cursor = "e-resize";
				if (this.list.scroller.isProportionalWidth && this.list.maxCol != this.resizedCol) {
					newWidth = Math.max(this.list.maxCol.realWidth - (event.pageX - this.startX), this.list.maxCol.widthValue);
					this.list.maxCol.groupHead.style.width = this.list.maxCol.groupBody.style.width = (this.list.maxCol.newWidth = newWidth) + "px";
				}
			}
			var widthTotal = this.list.body.clientWidth - (this.fixWidth || 0);
			this.list.scroller._hscrollBody.style.width = widthTotal + "px";
			this.list.scroller.isProportionalWidth = widthTotal <= this.clientWidth;
			if (this.list.scroller.isProportionalWidth) {
				this.list.scroller._hscroller.style.display = "none";
			} else {
				this.list.scroller._hscroller.style.display = "";
			}

		}
		document.site.body.style.cursor = cursor;
	},
	onDragMouseUp: function(target, event) {
		var $items = this.list.$item.$layout.$items;
		var maxCol = this.list.scroller.isProportionalWidth && this.list.maxCol;
		maxCol = maxCol || this.resizedCol;
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var col = $items[ii].$bind == this.resizedCol.$bind ? this.resizedCol : null;
			col = col || ($items[ii].$bind == maxCol.$bind ? maxCol : null);
			if (col && col.newWidth != undefined) {
				$items[ii].$width = (col.widthValue = col.realWidth = Math.round(col.newWidth)) + "px";
			}
		}
		this.list.saveListDesign(true, this.list.saveUserPreferences("$colWidths"));
		document.site.body.style.cursor = "default";
		this.list.resizeList(true);
	},
	dispose: function() {
		this.startX = this.resizedCol = this.list = this.resizedCol = null;
	}
});