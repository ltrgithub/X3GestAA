"use strict";
var helpers = require('syracuse-core/lib/helpers');

function QuickEdit() {}

helpers.defineClass(QuickEdit, null, {
	load: function(record, $itemPage) {
		this.list = record.list;
		if (this.list) {
			this.record = record;
			this.list.cardDecorator && this.list.cardDecorator.toggleRowCard(record, false);
			this.card = this.list.fomatter.builder.createCardRow(record);
			$itemPage.layoutSlot = this.card.contentSlot;
			$itemPage.inlinePageHost = this;
			this.resize();
			this.page = syra_site.pageLoader.load($itemPage);
		}

	},
	onInlinePageResized: function() {
		this.resize();
	},
	resize: function() {
		this.card.contentSlot.style.width = this.list._core.clientWidth + "px";
	},
	dispose: function() {
		this.page && this.page.dispose();
		this.card && syra_site.dom.removeChild(this.card.row);
		this.list = this.card = this.record = this.page = null;
	},
	onPreInitializeInlinePage: function(inlinePage, $article) {
		var $items = [];
		var $complex = [];
		var $fields = inlinePage.$prototype.$properties;
		for (var ii = 0, jj = this.list.orderCols.length; ii < jj; ii++) {
			var col = this.list.orderCols[ii];
			if (col.$bind && !col.$isHidden) {
				switch ($fields[col.$bind].$type) {
					case "image":
						$complex.push({
							$bind: col.$bind
						});
						break;
					default:
						$items.push({
							$bind: col.$bind
						});
						break;
				}
			}
		}
		var colCount = Math.min(Math.ceil($items.length / 3), 3);
		var colIndex = 0,
			$cols = [];
		for (var ii = 0; ii < colCount; ii++) {
			$cols.push({
				$layoutType: "stack",
				$items: []
			});
		}
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			$cols[colIndex++].$items.push($items[ii]);
			if (colIndex == colCount) {
				colIndex = 0;
			}
		}
		$article.$layout = {
			$items: [{
				$layoutType: "row",
				$items: $cols
			}]
		};
		if (this.list.$complexBinds) {
			for (var ii = 0, jj = this.list.$complexBinds.length; ii < jj; ii++) {
				$complex.push({
					$bind: this.list.$complexBinds[ii]
				});
			}
		}
		if ($complex.length) {

			colIndex = 0, $cols = [], colCount = ($complex.length >= 2) ? 2 : 1;
			for (var ii = 0; ii < colCount; ii++) {
				$cols.push({
					$layoutType: "stack",
					$items: []
				});
			}
			for (var ii = 0, jj = $complex.length; ii < jj; ii++) {
				$cols[colIndex++].$items.push($complex[ii]);
				if (colIndex == colCount) {
					colIndex = 0;
				}
			}
			$article.$layout.$items.push({
				$layoutType: "row",
				$items: $cols
			});
		}
	},
	onAfterActionMenuExecute: function(page, menuItem, $menu) {
		switch (menuItem.$sourceBind) {
			case "$save":
				var record = this.record;
				var $binds = Object.keys(record.$prototype.$properties);
				var $delta = {};
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					if (page.dataset[$bind] != undefined) {
						$delta[$bind] = page.dataset[$bind];
					}
				}
				syra_site.deltaManager.applyObjectDelta(record.page, record.dataset, $delta);
				record.applyChange($delta);
				setTimeout(function() {
					exports.dispose(record.list);
				}, 100);
				return false;
		}
		return true;
	}
});

exports.toggle = function(record) {
	if (record.list.quickEdit) {
		var load = record.list.quickEdit.record != record;
		exports.dispose(record.list);
		if (!load) {
			return;
		}
	}
	//trigger action    
	var $mn = record.$menus.$quickEdit = helpers.object.clone(record.$menus.$edit, true);
	$mn.$target = "inline";
	syra_menus.click.menuId(record, $mn.$bind = $mn.$sourceBind = "$quickEdit");
};


exports.loadInlinePage = function(record, $itemPage, options) {
	record.list.quickEdit = new QuickEdit();
	record.list.quickEdit.load(record, $itemPage);
};
exports.disposeRecord = function(record) {
	if (record.list.quickEdit && record.list.quickEdit.record == record) {
		exports.dispose(list);
	}
};

exports.dispose = function(list) {
	list.quickEdit && list.quickEdit.dispose();
	list.quickEdit = null;
};