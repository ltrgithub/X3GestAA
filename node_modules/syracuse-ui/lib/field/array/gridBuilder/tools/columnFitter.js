"use strict";
var helpers = require('syracuse-core/lib/helpers');
var fieldHelper = require('syracuse-ui/lib/field/helpers/fieldHelper');

var _pickerWidth = 18;
var _fieldPickerWidth = {
	"application/x-choice": _pickerWidth,
	"application/x-date": _pickerWidth,
	"application/x-time": _pickerWidth,
	"application/x-reference": _pickerWidth
};

function ColumnFitter() {

}

exports.ColumnFitter = helpers.defineClass(ColumnFitter, null, {
	load: function(list) {
		this.list = list;
		this.reset();
	},
	setFieldWidth: function(col, $field) {
		var width = col.$item.$width || $field.$width;
		if (width == "NaNpx") {
			width = null;
		}
		col.widthAdded = 0;
		if (width) {
			col.colWidth = parseInt((width + "").replace("px", ""), 10);
		} else {
			col.colWidth = fieldHelper.getColumnFieldWidth($field, col.titleText.length, col.isSortable);
			col.colWidth += 16; //for padding
			var hasFilter;
			if ($field.$capabilities && ($field.$capabilities.indexOf("filter") >= 0)) {
				col.widthAdded += _pickerWidth;
				hasFilter = true;
			}
			if (this.list.$isEditMode || hasFilter) {
				var width = _fieldPickerWidth[$field.$type];
				if (width) {
					col.widthAdded += width;
				}

			}
			if (this.list.$isEditMode) {
				if ($field.$item ? ($field.$item.$links || $field.$item.$actions) : ($field.$links || $field.$actions)) {
					col.widthAdded += _pickerWidth;
					if ($field.$links && ($field.$links.$lookup || $field.$links.$select)) {
						col.widthAdded += _pickerWidth;
					}
				}
			}
			if (col.widthAdded) {
				col.colWidth += col.widthAdded;
			}
		}
		col.origWidth = col.colWidth = Math.max(40, col.colWidth);

	},
	reset: function() {
		this._fittedFields = {};
		this._isFitted = false;
	},
	reCalculate: function() {
		if (this.list.$userPreferences) {
			delete this.list.$userPreferences.$columnWidths;
		}
		this._isFitted = false;
		for (var ii = 0, jj = this.list.orderCols.length; ii < jj; ii++) {
			var col = this.list.orderCols[ii];
			if (col.origWidth) {
				col.colWidth = col.origWidth;
			}
		}
		this.list.savePreferences(false, "$columnWidths");
		this.list.resizeArticle(true);
	},
	fit: function() {
		if (!this.list._isFitted) {
			if (!this.list.$isEditMode) {
				this._ensureRow();
				syra_site.dom.empty(this.row);
			}
			this.list.maxWidthCol = null;
			this.list.colsWidth = 0;
			this.list.fixedCols = [];
			this.list.fixedWidth = 0;
			this.list.scrolledCols = [];
			this.list.scrolledWidth = 0;
			var $columnWidths = (this.list.$userPreferences && this.list.$userPreferences.$columnWidths) || {};
			for (var ii = 0, jj = this.list.orderCols.length; ii < jj; ii++) {
				var col = this.list.orderCols[ii];
				var width;
				if (col.$isHidden) {
					width = 0;
				} else {
					if (col.$bind) {
						if ($columnWidths[col.$item.$bind]) {
							col.colWidth = parseInt(($columnWidths[col.$item.$bind] + "").replace("px", ""), 10);
						} else {
							if (this.list.$isEditMode) {} else {
								var field = this._fittedFields[col.$bind];
								if (field && field.field.domItem) {
									var cell = this.row.appendChild(field.field.domItem.cloneNode(true));
									col.colWidth = cell.scrollWidth + _pickerWidth; //width menu
									if (col.widthAdded) {
										col.colWidth += col.widthAdded;
									}
								}
							}
						}
						if (!this.list.maxWidthCol || col.colWidth > this.list.maxWidthCol.colWidth) {
							this.list.maxWidthCol = col;
						}
					}
					if (col.$isFixed) {
						this.list.fixedCols.push(col);
						this.list.fixedWidth += col.colWidth;
					} else {
						this.list.scrolledCols.push(col);
						this.list.scrolledWidth += col.colWidth;
					}
					this.list.colsWidth += col.colWidth;
					width = col.colWidth;
				}
				if (col.scrollWidthValue != undefined) {
					width = col.scrollWidthValue;
				}
				this.list.setColWidth(col, width + "px");
			}
			this.row && syra_site.dom.empty(this.row);
			if (this.list.fixedCols.length && (this.list.tableSlotWidth < this.list.colsWidth)) {
				//fixed column but space for scrolled columns is too short
				while (this.list.fixedCols.length) {
					var space = this.list.tableSlotWidth - this.list.fixedWidth;
					if (space < 100 && this.list.scrolledWidth > (space + 100)) {
						var col = this.list.fixedCols.pop();
						this.list.scrolledCols = this.list.scrolledCols.splice(0, 0, col);
						this.list.scrolledWidth += col.colWidth;
						this.list.fixedWidth -= col.colWidth;
					} else {
						break;
					}
				}
			}
			var width = 0;
			for (var ii = 0, jj = this.list.scrolledCols.length; ii < jj; ii++) {
				var col = this.list.scrolledCols[ii];
				col.minX = width;
				width += col.colWidth;
				col.maxX = width;
			}
			this._isFitted = true;
			return true;
		}
		return false;
	},
	checkFieldsMaxLength: function(record) {
		if (!this.list.$isEditMode) {
			for (var ii = 0, jj = this.list.orderCols.length; ii < jj; ii++) {
				var col = this.list.orderCols[ii];
				if (col.$bind) {
					var field = record.boundFields[col.$bind];
					field = field && field[0];
					if (field && field.valueLength) {
						var fitted = this._fittedFields[col.$bind];
						if (!fitted) {
							fitted = this._fittedFields[col.$bind] = {
								valueLength: 0
							};
						}
						if (fitted.valueLength < field.valueLength) {
							fitted.valueLength = field.valueLength;
							fitted.field = field;
						}
					}
				}
			}
		}
	},
	_ensureRow: function() {
		if (!this.row) {
			var table = document.createElement("table");
			table.className = this.list.$skin + "-size-body";
			table.setAttribute("cellspacing", "0");
			table.setAttribute("cellpadding", "0");
			table.style.position = "absolute";
			table.style.zIndex = 1;
			table.appendChild(this.row = document.createElement("tr"));
			this.list.tableSlot.appendChild(table);
		}
	},
	dispose: function() {
		if (this.list) {
			this.list.fixedCols = this.list.scrolledCols = this.list.maxWidthCol = null;
		}
		this.list = this.row = this._fittedFields = null;
	}
});