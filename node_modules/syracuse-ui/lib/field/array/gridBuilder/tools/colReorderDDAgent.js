"use strict";
var helpers = require('syracuse-core/lib/helpers');


function _emulateEvent(event) {
	var mainTouch = event.originalEvent.touches && event.originalEvent.touches[0];
	if (mainTouch) {
		event.pageX = mainTouch.pageX;
		event.pageY = mainTouch.pageY;
	}
	return event;
}

function ColReorderDDAgent() {}

exports.ColReorderDDAgent = helpers.defineClass(ColReorderDDAgent, null, {
	start: function(dropItem) {
		document.site.ddManager.ddAgent = this;
		this.reordeCol = dropItem.reordeCol;
		this.list = dropItem.list;
		var offset = this.reordeCol.titleCell.getBoundingClientRect();
		this.top = offset.top;
		this.left = offset.left;
		this.boundary = this.list.titleRow.getBoundingClientRect();
		this.info = document.createElement("div");
		this.cueTop = document.createElement("div");
		this.cueBottom = document.createElement("div");
		this.scrollBoundary = this.list.scroller.getScrollBoundary();
		this.info.className = "s-grid-drag-image";
		document.site.layoutSlot.appendChild(this.info);
		this.cueTop.style.display = "none";
		this.cueBottom.style.display = "none";
		this.cueTop.className = "s-grid-drop-cue-top";
		this.cueTop.style.top = (this.boundary.top - 9) + "px";
		this.cueBottom.style.top = this.boundary.bottom + "px";
		document.site.layoutSlot.appendChild(this.cueTop);
		this.cueBottom.className = "s-grid-drop-cue-bottom";
		document.site.layoutSlot.appendChild(this.cueBottom);
		this.info.textContent = this.reordeCol.title.textContent;
		this.bindEvent(true);
	},
	onCellEnter: function(cell) {
		this.colTarget = cell;
		this.targetX = this.colTarget.titleCell.getBoundingClientRect().left - 4; //4 cue width /2
		if (this.list.orderCols[this.list.orderCols.length - 1] == this.colTarget) {
			this.lastColBoundaryX = this.targetX + this.colTarget.realWidth / 2;
		}
		this.cueTop.style.left = this.cueBottom.style.left = this.targetX + "px";
		this.cueTop.style.display = this.cueBottom.style.display = "";
		document.site.toggleClass(this.info, "s-drag-ok", this.colTarget != null);
	},
	onCellLeave: function(cell) {
		if (this.colTarget && this.colTarget == cell) {
			this.colTarget = null;
			delete this.lastColBoundaryX;
			this.cueTop.style.display = this.cueBottom.style.display = "none";
		}
		document.site.toggleClass(this.info, "s-drag-ok", this.colTarget != null);
	},
	bindEvent: function(bind) {
		var self = this;
		var nameSpace = ".reorder" + this.list.id;
		var $$row = $(this.list.titleRow);
		if (bind) {
			$$row.delegate("th", "mouseenter" + nameSpace + " mouseleave" + nameSpace, function(event) {
				if (this.syraFieldBind) {
					var cell = self.list.findEventCol(event);
					if (event.type == "mouseenter") {
						self.onCellEnter(cell);
					} else {
						self.onCellLeave(cell);
					}
					event.preventDefault();
					return false;
				}
			});
			$$row.delegate("th", "touchmove" + nameSpace, function(event) {
				if (this.syraFieldBind) {
					var cell = self.list.findEventCol(_emulateEvent(event));
					if (self.cellTouchMoving != this) {
						self.onCellLeave(cell);
						self.cellTouchMoving = this;
						self.onCellEnter(cell);
					}
					event.preventDefault();
					return false;
				}
			});
		} else {
			delete self.cellTouchMoving;
			$$row.undelegate(nameSpace);
		}
	},
	autoScroll: function(event) {
		var self = this;
		var step = 40,
			margin = 80;
		if (self.autoScrolTimeout) {
			clearTimeout(self.autoScrolTimeout);
		}
		self.autoScrolTimeout = setTimeout(function() {
			if (self.scrollBoundary) {
				if (event.pageY > (self.scrollBoundary.bottom - margin)) {
					var scrollTop = self.scrollBoundary.bodySlot.scrollTop;
					if (scrollTop < (self.scrollBoundary.scrollHeight - self.scrollBoundary.height)) {
						self.scrollBoundary.bodySlot.scrollTop = Math.min(scrollTop + step, self.scrollBoundary.scrollHeight - self.scrollBoundary.height);
					}
				} else {
					if (event.pageY < (self.scrollBoundary.top + margin)) {
						var scrollTop = self.scrollBoundary.bodySlot.scrollTop;
						self.scrollBoundary.bodySlot.scrollTop = Math.max(scrollTop - step, 0);
					}
				}
				if (event.pageX > (self.scrollBoundary.right - margin)) {
					var scrollLeft = self.scrollBoundary.hscroller.scrollLeft;
					if (scrollLeft < (self.scrollBoundary.scrollWidth - self.scrollBoundary.width)) {
						self.scrollBoundary.hscroller.scrollLeft = Math.min(scrollLeft + step, self.scrollBoundary.scrollWidth - self.scrollBoundary.width);
					}
				} else {
					if (event.pageX < (self.scrollBoundary.left + margin)) {
						var scrollLeft = self.scrollBoundary.hscroller.scrollLeft;
						self.scrollBoundary.hscroller.scrollLeft = Math.max(scrollLeft - step, 0);
					}
				}
			}
		}, 10);
	},
	onDragMouseMove: function(target, event) {
		this.autoScroll(event);
		var top = Math.max(event.pageY, this.boundary.top);
		var left = Math.max(event.pageX, this.boundary.left);
		var inBoundary = (event.pageX == left && event.pageY == top);
		this.info.style.top = top + 15 + "px";
		this.info.style.left = left + 15 + "px";
		if (this.lastColBoundaryX) {
			if (event.pageX > this.lastColBoundaryX) {
				if (!this.dropAtEnd) {
					this.cueBottom.style.left = this.cueTop.style.left = (this.targetX + this.colTarget.realWidth) + "px";
					this.dropAtEnd = true;
				}
			} else {
				if (this.dropAtEnd) {
					this.cueBottom.style.left = this.cueTop.style.left = this.targetX + "px";
					this.dropAtEnd = false;
				}
			}
		}
	},
	onDragMouseUp: function(target, event) {
		document.site.removeDomChild(this.info);
		document.site.removeDomChild(this.cueTop);
		document.site.removeDomChild(this.cueBottom);
		if (this.colTarget) {
			this.list.reorderColumns(this.reordeCol, this.colTarget, this.dropAtEnd);
		}
		document.site.body.style.cursor = "default";
	},
	dispose: function() {
		if (this.autoScrolTimeout) {
			clearTimeout(this.autoScrolTimeout);
		}
		this.bindEvent(false);
		this.colTarget = this.boundary = this.autoScrolTimeout = this.reordeCol = this.list = this.info = this.cueTop = this.cueBottom = this.scrollBoundary = null;
	}
});