"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _fillItemsList(list) {
	var allColumns = list.builder.allColumns;
	list.$item.$layout.$items = [];
	for (var ii = 0, jj = allColumns.length; ii < jj; ii++) {
		var col = allColumns[ii];
		if (col.$bind) {
			if (!col.table.isFreeze) {
				delete col.$item.$isFixed;
			}
			list.$item.$layout.$items.push(col.$item);
		}
	}
}

function _moveCols(colSource, colTarget, dropAtEnd) {
	var list = colSource.list;
	var allColumns = list.builder.allColumns;
	var tblSource = colSource.table;
	allColumns.splice(allColumns.indexOf(colSource), 1);
	tblSource.columns.splice(tblSource.columns.indexOf(colSource), 1);
	colTarget.titleCell.parentNode.insertBefore(colSource.titleCell, dropAtEnd ? colTarget.titleCell.nextSibling : colTarget.titleCell);
	colSource.slot = colTarget.slot;
	var record = list.builder.filterRecord;
	if (record) {
		var targetCell = record.cellsMap[colTarget.key];
		targetCell.parentNode.insertBefore(record.cellsMap[colSource.key], dropAtEnd ? targetCell.nextSibling : targetCell);
	}
	for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
		var record = list.records[ii];
		var targetCell = record.cellsMap[colTarget.key];
		targetCell.parentNode.insertBefore(record.cellsMap[colSource.key], dropAtEnd ? targetCell.nextSibling : targetCell);
	}
	allColumns.splice(allColumns.indexOf(colTarget) + (dropAtEnd ? 1 : 0), 0, colSource);
	colTarget.table.columns.splice(colTarget.table.columns.indexOf(colTarget) + (dropAtEnd ? 1 : 0), 0, colSource);
	colSource.table = colTarget.table;
	syra_site.dom.toggleClass(colSource.titleCell, "s-freeze", colSource.table.isFreeze);
	_fillItemsList(list);
	list.savePreferences(true, "$columns");
	list.builder.resizeScrollView();
}

exports.moveToSrollTable = function(col) {
	var list = col.list;
	var scrollTable = list.builder.scrollTable;
	scrollTable.columns.unshift(col);
	scrollTable.titleRow.insertBefore(col.titleCell, scrollTable.titleRow.firstChild);
	col.slot = col.titleCell.parentNode;
	syra_site.dom.toggleClass(col.titleCell, "s-freeze", false);
	var record = list.builder.filterRecord;
	if (record) {
		record.dataRow.insertBefore(record.cellsMap[col.key], record.dataRow.firstChild);
	}
	for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
		var record = list.records[ii];
		record.dataRow.insertBefore(record.cellsMap[col.key], record.dataRow.firstChild);
	}
	col.table = scrollTable;
};

function _clearFieldColumns(columns) {
	if (columns) {
		for (var ii = 0, jj = columns.length; ii < jj; ii++) {
			if (columns[ii].$bind) {
				columns.splice(ii, columns.length - ii);
				break;
			}
		}
	}
}

exports.resetReorder = function(list) {
	if (list.$origItem.$columns) {
		var $binds = list.$origItem.$columns;
		_clearFieldColumns(list.builder.allColumns);

		var freezeTable = list.builder.freezeTable;
		var scrollTable = list.builder.scrollTable;
		freezeTable && _clearFieldColumns(freezeTable.columns);
		scrollTable && _clearFieldColumns(scrollTable.columns);
		var filterRecord = list.builder.filterRecord;
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var col = list.builder.columnsMap[$binds[ii]];
			list.builder.allColumns.push(col);
			var newTable = col.$field.$isFixed ? freezeTable : scrollTable;
			if (col.titleCell) {
				newTable.titleRow.appendChild(col.titleCell);
				col.slot = col.titleCell.parentNode;
			}
			filterRecord && filterRecord[newTable.$rowKey].appendChild(filterRecord.cellsMap[col.key]);
			for (var mm = 0, kk = list.records.length; mm < kk; mm++) {
				var record = list.records[mm];
				record[newTable.$rowKey].appendChild(record.cellsMap[col.key]);
			}
			newTable.columns.push(col);
			col.table = newTable;
			syra_site.dom.toggleClass(col.titleCell, "s-freeze", col.table.isFreeze);
		}
		_fillItemsList(list);
	}
};


exports.isDraggable = function(list, col, event) {
	syra_dd.dropableItem = {
		list: list,
		reordeCol: col
	};
	syra_dd.start(list, ColsReorderDDAgent, list.builder.scrollTable.titleRow);
	event.syraRetValue = false;
};

function ColsReorderDDAgent() {}

helpers.defineClass(ColsReorderDDAgent, null, {
	start: function(dropItem) {
		syra_dd.ddAgent = this;
		this.reordeCol = dropItem.reordeCol;
		this.list = dropItem.list;
		var offset = this.reordeCol.titleCell.getBoundingClientRect();
		this.top = offset.top;
		this.left = offset.left;
		this.boundary = this.list.builder.scrollTable.titleRow.getBoundingClientRect();
		this.info = document.createElement("div");
		this.cueTop = document.createElement("div");
		this.cueBottom = document.createElement("div");
		this.scrollArea = (this.list.records && this.list.records.length) ? this.list.builder.scrollTable.bodySlot : this.list.builder.scrollTable.headSlot;
		this.scrollBoundary = syra_site.dom.getBoundingClientRect(this.scrollArea);
		this.scrollBoundary.scrollWidth = this.scrollArea.scrollWidth;
		this.scrollBoundary.scrollHeight = this.scrollArea.scrollHeight;

		this.info.className = "s-grid-drag-image";
		syra_site.layoutSlot.appendChild(this.info);
		this.cueTop.style.display = "none";
		this.cueBottom.style.display = "none";
		this.cueTop.className = "s-grid-drop-cue-top";
		this.cueTop.style.top = (this.boundary.top - 9) + "px";
		this.cueBottom.style.top = this.boundary.bottom + "px";
		syra_site.layoutSlot.appendChild(this.cueTop);
		this.cueBottom.className = "s-grid-drop-cue-bottom";
		syra_site.layoutSlot.appendChild(this.cueBottom);
		this.info.textContent = this.reordeCol.titleText;
		this.list.isColReordering = true;
	},
	onColumnHeaderEnterLeave: function(col, onEnter) {
		if (onEnter) {
			this.colTarget = col;
			this.targetX = this.colTarget.titleCell.getBoundingClientRect().left - 4; //4 cue width /2
			if (this.list.builder.allColumns[this.list.builder.allColumns.length - 1] == this.colTarget) {
				this.lastColBoundaryX = this.targetX + this.colTarget.colWidth / 2;
			}
			this.cueTop.style.left = this.cueBottom.style.left = this.targetX + "px";
			this.cueTop.style.display = this.cueBottom.style.display = "";
			syra_site.dom.toggleClass(this.info, "s-drag-ok", this.colTarget != null);
		} else {
			if (this.colTarget && this.colTarget == col) {
				this.colTarget = null;
				delete this.lastColBoundaryX;
				this.cueTop.style.display = this.cueBottom.style.display = "none";
			}
			syra_site.dom.toggleClass(this.info, "s-drag-ok", this.colTarget != null);
		}
	},
	autoScroll: function(event) {
		var self = this;
		var step = 40,
			margin = 80;
		if (self.autoScrolTimeout) {
			clearTimeout(self.autoScrolTimeout);
		}
		self.autoScrolTimeout = setTimeout(function() {
			if (self.scrollBoundary) {
				if (event.pageY > (self.scrollBoundary.bottom - margin)) {
					var scrollTop = self.list.builder.scrollTable.bodySlot.scrollTop;
					if (scrollTop < (self.scrollBoundary.scrollHeight - self.scrollBoundary.height)) {
						self.list.builder.scrollTable.bodySlot.scrollTop = Math.min(scrollTop + step, self.scrollBoundary.scrollHeight - self.scrollBoundary.height);
					}
				} else {
					if (event.pageY < (self.scrollBoundary.top + margin)) {
						var scrollTop = self.list.builder.scrollTable.bodySlot.scrollTop;
						self.list.builder.scrollTable.bodySlot.scrollTop = Math.max(scrollTop - step, 0);
					}
				}
				if (event.pageX > (self.scrollBoundary.right - margin)) {
					var scrollLeft = self.scrollArea.scrollLeft;
					if (scrollLeft < (self.scrollBoundary.scrollWidth - self.scrollBoundary.width)) {
						self.scrollArea.scrollLeft = Math.min(scrollLeft + step, self.scrollBoundary.scrollWidth - self.scrollBoundary.width);
					}
				} else {
					if (event.pageX < (self.scrollBoundary.left + margin)) {
						self.scrollArea.scrollLeft = Math.max(self.scrollArea.scrollLeft - step, 0);
					}
				}
			}
		}, 10);
	},
	onDragMouseMove: function(target, event) {
		this.autoScroll(event);
		var top = Math.max(event.pageY, this.boundary.top);
		var left = Math.max(event.pageX, this.boundary.left);
		var inBoundary = (event.pageX == left && event.pageY == top);
		this.info.style.top = top + 15 + "px";
		this.info.style.left = left + 15 + "px";
		if (this.lastColBoundaryX) {
			if (event.pageX > this.lastColBoundaryX) {
				if (!this.dropAtEnd) {
					this.cueBottom.style.left = this.cueTop.style.left = (this.targetX + this.colTarget.colWidth) + "px";
					this.dropAtEnd = true;
				}
			} else {
				if (this.dropAtEnd) {
					this.cueBottom.style.left = this.cueTop.style.left = this.targetX + "px";
					this.dropAtEnd = false;
				}
			}
		}
	},
	onDragMouseUp: function(target, event) {
		syra_site.dom.removeChild(this.info);
		syra_site.dom.removeChild(this.cueTop);
		syra_site.dom.removeChild(this.cueBottom);
		this.colTarget && _moveCols(this.reordeCol, this.colTarget, this.dropAtEnd);
		syra_site.layoutSlot.style.cursor = "default";
	},
	dispose: function() {
		this.autoScrolTimeout && clearTimeout(this.autoScrolTimeout);
		if (this.list) {
			delete this.list.isColReordering;
		}
		this.scrollArea = this.colTarget = this.boundary = this.autoScrolTimeout = this.reordeCol = this.list = this.info = this.cueTop = this.cueBottom = this.scrollBoundary = null;
	}
});