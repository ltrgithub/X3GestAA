"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _colReszing, _list, _startX, _startWidth, _dataCell;

function _getStartX(col) {
	return col.rect[syra_site.isDocumentRTL ? "left" : "right"];
}

exports.setCursor = function(col, event) {
	if (!_list && col && col.rect) {
		_startX = _getStartX(col);
		if ((event.pageX >= (_startX - 4) && event.pageX <= (_startX + 4))) {
			if (_colReszing != col) {
				(_colReszing = col).titleCell.style.cursor = "e-resize";
			}
		} else {
			if (_colReszing == col) {
				col.titleCell.style.cursor = "";
				_colReszing = null;
			}
		}
	}
};

exports.isDraggable = function(list, col, event) {
	if (_colReszing == col) {
		syra_dd.dropableItem = {
			list: list
		};
		syra_dd.start(list, ColResizerDDAgent, list.builder.scrollTable.titleRow);
		event.syraRetValue = false;
		return true;
	}
};

function ColResizerDDAgent() {}

helpers.defineClass(ColResizerDDAgent, null, {
	start: function(dropItem) {
		_list = dropItem.list;
		var record = _list.records && _list.records[0];
		var cells = record && record[_colReszing.table.$rowKey].children;
		if (cells) {
			_dataCell = cells[_colReszing.titleCell.cellIndex];
		}
		this.isLastCol = true;
		var cols = _list.builder.allColumns;
		for (var ii = cols.indexOf(_colReszing) + 1, jj = cols.length; ii < jj; ii++) {
			if (!cols[ii].$isHidden) {
				this.isLastCol = false;
				break;
			}
		}
		syra_dd.ddAgent = this;
		_startWidth = _colReszing.colWidth;
		this.maxContainerWidth = _list.builder.tableSlot.parentNode.clientWidth;
		this.maxTableSlotWidth = _list.builder.tableSlot.getBoundingClientRect().width;
	},
	onDragMouseMove: function(target, event) {
		var cursor = "not-allowed";
		if ((event.pageY >= (_colReszing.rect.top - 20)) && (event.pageY <= (_colReszing.rect.bottom + 20))) {
			var newWidth = _startWidth + (syra_site.isDocumentRTL ? (_startX - event.pageX) : (event.pageX - _startX));
			if (newWidth > 50) {
				_colReszing.colWidth = _colReszing.newWidth = newWidth;
				if (_dataCell) {
					_dataCell.style.width = _colReszing.colWidth + "px";
				}
				_colReszing.titleCell.style.width = _colReszing.colWidth + "px";
				cursor = "e-resize";
			}
			if (this.isLastCol) {
				var diff = _colReszing.colWidth - _startWidth;
				_list.builder.tableSlot.style.maxWidth = Math.min((this.maxTableSlotWidth + diff), this.maxContainerWidth) + "px";
			}
		}
		syra_site.layoutSlot.style.cursor = cursor;
	},
	onDragMouseUp: function(target, event) {
		_list.$userPreferences = _list.$userPreferences || {};
		_list.$userPreferences.$columnWidths = _list.$userPreferences.$columnWidths || {};
		delete _list.$userPreferences.$colWidths;
		_list.$userPreferences.$columnWidths[_colReszing.$item.$bind] = _colReszing.$item.$width = Math.round(_colReszing.colWidth) + "px";
		_list.savePreferences(true, "$columnWidths");
		delete _colReszing.newWidth;
		syra_site.layoutSlot.style.cursor = "default";
		_list.resizeArticle(true);
	},
	dispose: function() {
		_colReszing = _startX = _list = _dataCell = null;
	}
});