"use strict";

var _scrollColsTimeout, _timeOur, _interval;

function _startTimer(tb, target) {
	_timeOur = setTimeout(function() {
		_interval = setInterval(function() {
			_scrollCols(tb, target == tb.leftBtn);
		}, 1000);
	}, 1000);
}

function _clearButtonTimer() {
	_timeOur && clearTimeout(_timeOur);
	_interval && clearInterval(_interval);
	_interval = _timeOur = null;
}

function _scrollCols(tb, left) {
	clearTimeout(_scrollColsTimeout);
	var records = tb.builder.list.records;
	var record = records.length ? records[0] : null;
	if (record) {
		_scrollColsTimeout = setTimeout(function() {
			var cells = record[tb.$rowKey].children;
			var col, cell;
			var hrect = tb.bodySlot.getBoundingClientRect();
			var width = 0;
			var hWidth = tb.bodySlot.clientWidth;
			if (syra_site.isDocumentRTL) {
				left = !left;
				var lastVisible;
				for (var ii = cells.length - 1; ii >= 0; ii--) {
					var cell = cells[ii];
					var col = tb.columns[ii];
					col.rect = cell.getBoundingClientRect();
					if (left) {
						if (col.rect.left > hrect.right) {
							if (tb.lastCol != col) {
								tb.lastCol = col;
								tb.bodySlot.scrollLeft = width - hWidth;
								return;
							}
						}
						width += col.rect.width;
					} else {
						if (col.rect.right && col.rect.right >= hrect.left) {
							ii++;
							while (ii < cells.length) {
								col = tb.columns[ii];
								if (col.rect.width) {
									if (tb.lastCol != col) {
										tb.lastCol = col;
										tb.bodySlot.scrollLeft = width - col.rect.width;
										return;
									}
								}
								ii++;
							}
							return;
						}
						width += col.rect.width;
					}
				}
			} else {
				for (var ii = 0, jj = cells.length; ii < jj; ii++) {
					var cell = cells[ii];
					var col = tb.columns[ii];
					col.rect = cell.getBoundingClientRect();
					if (left) {
						if (col.rect.right > 0) {
							if (tb.lastCol != col) {
								tb.lastCol = col;
								tb.bodySlot.scrollLeft = width;
								return;
							}
						}
						width += col.rect.width;
					} else {
						width += col.rect.width;
						if (col.rect.right && col.rect.right >= hrect.right) {
							if (tb.lastCol != col) {
								tb.lastCol = col;
								tb.bodySlot.scrollLeft = width - hWidth;
								return;
							}
						}
					}
				}
			}
		}, 20);
	}

}

function _show(tb, show) {
	if (tb.leftBtn && show != tb.leftBtn.syraIsDisplay) {
		show = show && tb.bodySlot.scrollWidth != tb.bodySlot.clientWidth;
		var display = (tb.leftBtn.syraIsDisplay = show) ? "" : "none";
		tb.leftBtn.style.display = display;
		tb.rightBtn.style.display = display;
	}
}

exports.move = function(tb) {
	if (tb.leftBtn) {
		var page = tb.builder.list.page;
		var rectBody = syra_site.dom.getBoundingClientRect(tb.bodySlot);
		var scrollRect = page.getScrollviewSize();
		var show = false;
		if (!(rectBody.top > scrollRect.top && rectBody.bottom < scrollRect.bottom)) {
			var top;
			if (rectBody.top <= 0) {
				top = (Math.min(scrollRect.height, rectBody.bottom) / 2);
				show = top > 100;
				if (show) {
					top += ((-1) * rectBody.top);
				}
			} else {
				top = (scrollRect.bottom - rectBody.top) / 2;
				show = true;
			}
			if (show) {
				var rectParent = syra_site.dom.getBoundingClientRect(tb.leftBtn.parentNode);
				var yMargin = rectBody.top - rectParent.top;
				top += yMargin;
				var rect = syra_site.dom.getBoundingClientRect(tb.builder.list.tableSlot);
				var left = rect.left - rectParent.left;
				tb.leftBtn.style.left = (left - 32) + "px";
				tb.rightBtn.style.left = (left + rect.width) + "px";

				tb.leftBtn.style.top = top + "px";
				tb.rightBtn.style.top = top + "px";
			}

		}
		_show(tb, show);
	}
};

exports.add = function(tb) {
	var show = false;
	var list = tb.builder.list;
	if (list.page.scrollview && list.isScrollButtonEnabled !== false && !list.treeDecorator) {
		if (list.records.length > 20) {
			if (!tb.leftBtn) {
				var left = tb.leftBtn = syra_menus.addIconButton("", "s-list-btn-scroll-prev", "onScrollButonClick");
				var right = tb.rightBtn = syra_menus.addIconButton("", "s-list-btn-scroll-next", "onScrollButonClick");
				left.syraOnClickMaker = right.syraOnClickMaker = "builder";
				left.syraItem = right.syraItem = list.id;
				left.syrainout = right.syrainout = list.id;
				right.style.zIndex = syra_site.dom.setZIndex(left);
				list._core.appendChild(left);
				list._core.appendChild(right);
				syra_page.addScrollViewListener(list.page, tb.builder);
			}
			exports.move(tb);
			return;
		}
	}
	_show(tb, show);
};

exports.onItemInOut = function(tb, onEnter, event, target) {
	if ((target == tb.leftBtn) || (target == tb.rightBtn)) {
		onEnter ? _startTimer(tb, target) : _clearButtonTimer();
		return true;
	}
};


exports.onClick = function(tb, event, btn) {
	_clearButtonTimer();
	_scrollCols(tb, btn == tb.leftBtn);
};

exports.dispose = function(tb) {
	_clearButtonTimer();
	_scrollColsTimeout && clearTimeout(_scrollColsTimeout);
	_scrollColsTimeout = null;
	tb.leftBtn = tb.rightBtn = null;
};