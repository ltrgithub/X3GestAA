"use strict";
var helpers = require('syracuse-core/lib/helpers');
var MultiList = require("syracuse-ui/lib/field/array/multiList").MultiList;
var preferencesHelper = require("syracuse-ui/lib/field/array/tools/preferencesHelper");
var FilterRecord = require("syracuse-ui/lib/field/array/filter/filterRecord").FilterRecord;
var GridRecord = require('./gridRecord').GridRecord;
var ColResizerDDAgent = require("./tools/colResizerDDAgent").ColResizerDDAgent;
var ColReorderDDAgent = require("./tools/colReorderDDAgent").ColReorderDDAgent;
var Scroller = require('./tools/scroller').Scroller;
var ColumnFitter = require('./tools/columnFitter').ColumnFitter;
var PopupCardBuilder = require('./card/popupCardBuilder').PopupCardBuilder;
var CardDecorator = require('./card/cardDecorator').CardDecorator;


function GridList() {}

exports.GridList = helpers.defineClass(GridList, MultiList, {
	initializeList: function() {
		// Hack to workaround 99133
		var refItem, item = this.$item,
			page = this.page;
		if (item.$popupCard && page.$persistPrototype && !item.$selectMode) {
			// Hum... have to retrieve such properties in generated layout (just for convergence)
			if (refItem = page.findItemSetting(this.$prototype.$X3Name || item.$bind, page.$persistPrototype.$article.$layout)) {
				item.$selectMode = refItem.$selectMode;
				item.$selectByRowIndex = refItem.$selectByRowIndex;
			}
		}
		// End hack
		MultiList.prototype.initializeList.call(this);
		this.$defaultSkin = "s-" + this.$item.$format;
		this.RecordClass = GridRecord;
		this.$item.$isTopLabelAlignment = true;

		this.$complexBinds = [];
		this.$colBinds = [];
		var $binds = Object.keys(this.$fields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var $field = this.$fields[$bind];
			if (!$field.$isExcluded) {
				switch ($field.$type) {
					case "application/x-array":
					case "application/x-object":
					case "text/rtf":
					case "text/html":
						this.$complexBinds.push($bind);
						break;
					default:
						this.$colBinds.push($bind);
						break;
				}
			}
		}

		if (!this.$item.$layout) {
			this.$item.$layout = (this.$designing && this.$designing.grid && this.$designing.grid.$layout) || {};
		}
		//define default columns

		var $items = this.$item.$layout.$items;
		var bindMap = {};
		if (!$items) {
			$items = this.$item.$layout.$items = [];
			for (var ii = 0, jj = this.$colBinds.length; ii < jj; ii++) {
				$items.push(bindMap[this.$colBinds[ii]] = {
					$bind: this.$colBinds[ii]
				});
			}
		} else {
			//check items for having only colbinds
			var ii = 0,
				jj = $items.length;
			while (ii < jj) {
				var $item = $items[ii];
				if ($item && $item.$bind) {
					if (this.$colBinds.indexOf($item.$bind) < 0) {
						$items.splice(ii, 1);
						jj = $items.length;
						continue;
					}
					bindMap[$item.$bind] = $item;
				}
				ii++;
			}
		}
		preferencesHelper.onInitialize(this, bindMap);
		if (this.$item.$popupCard && !this.popupCardBuilder) {
			this.popupCardBuilder = new PopupCardBuilder();
			this.popupCardBuilder.list = this;
		}

		(this.cardDecorator = new CardDecorator()).load(this);
	},
	resizeList: function(resize) {
		if (!this.disposed) {
			var mustBeResized = resize || this.mustBeResized;
			if (mustBeResized) {
				this.tableSlotWidth = this.tableSlot.clientWidth;
				this.headTable.style.width = this.tableSlotWidth + "px";
				this.bodyTable.style.width = this.tableSlotWidth + "px";
				if (!this.isTableSlotHidden) {
					this.scroller.onListResize();
				}
				MultiList.prototype.resizeList.call(this, resize);
			}
		}
	},
	drawBox: function() {
		MultiList.prototype.drawBox.call(this);
		this.searchCapability.draw();
		this.$skin = this.$item.$skin || this.$defaultSkin;
		this.gridCss = {
			title: this.$skin + "-title-cell",
			cell: this.$skin + "-cell",
			rowIndex: this.$skin + "-cell " + this.$skin + "-row-index"
		};

		this.fieldValue.style.overflow = "";
		this.tableSlot = document.createElement("div");
		this.tableSlot.className = "s-grid-slot";
		this._core.appendChild(this.tableSlot);

		this.ensureGrapDecorator();
		this.appendCardGraphSlots();


		this.applyDesignMetaData(this.$item, false);
		this.setState(this.$field);
		this.orderCols = [];
		this.cols = {};
		this.prevCols = {};

		this.headTableSlot = document.createElement("div");
		this.headTableSlot.className = this.$skin + "-slot-head";
		this.headTable = document.createElement("table");
		this.headTable.style.display = "none";
		this.headTable.className = this.$skin + "-table-head";
		this.headTable.setAttribute("cellspacing", "0");
		this.headTable.setAttribute("cellpadding", "0");
		this.headColgroup = this.headTable.appendChild(document.createElement("colgroup"));
		this.headTableSlot.appendChild(this.headTable);

		this.bodyTableSlot = document.createElement("div");
		this.bodyTableSlot.className = this.$skin + "-slot-body";
		this.bodyTable = document.createElement("table");
		this.bodyTable.style.display = "none";
		this.bodyTable.className = this.$skin + "-table-body";
		this.bodyTable.setAttribute("cellspacing", "0");
		this.bodyTable.setAttribute("cellpadding", "0");
		this.bodyColgroup = this.bodyTable.appendChild(document.createElement("colgroup"));
		this.body = this.bodyTable.appendChild(document.createElement("tbody"));
		this.bodyTableSlot.appendChild(this.bodyTable);

		this.hscroller = document.createElement("div");
		this.hscroller.syraIsMouseEventDisabled = true;
		this.hscroller.className = this.$skin + "-h-scroll";
		this.hscroller.syraNoDDSpot = true;
		this.hscroller.appendChild(this.hscrollBody = document.createElement("div"));
		this.hscrollBody.className = this.$skin + "-h-scroll-body";

		this.tableSlot.appendChild(this.headTableSlot);
		this.tableSlot.appendChild(this.bodyTableSlot);
		this.tableSlot.appendChild(this.hscroller);

		this.columnFitter = new ColumnFitter();
		this.columnFitter.load(this);
		this.scroller = new Scroller();
		this.scroller.load(this);

		this.sortCapability.load();

		this.loadSelector();
		this._makeTitleRow();

		this.cursor = "default";
		syra_dd.colResizer.push(this);
		this.headTable.style.display = "";
		this.applyCapabilities();
		this.bodyTable.style.display = "";
		this._endDrawBox();
	},
	validateDisplay: function() {
		MultiList.prototype.validateDisplay.call(this);
		var isFixed = true;
		for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
			var col = this.orderCols[ii];
			if (col.$bind) {
				isFixed = col.$isFixed = isFixed && col.$item.$isFixed;
				if (!isFixed) {
					delete col.$item.$isFixed;
				} else {
					col.$item.$isFixed = true;
				}
			} else {
				col.$isFixed = true;
			}
		}
	},
	emptyBody: function(addEmptySlot, onFetch) {
		this.cardDecorator.hasRowCard = false;
		syra_site.dom.empty(this.body);
		if (addEmptySlot) {
			var cell = document.createElement("td");
			cell.className = this.$skin + "-empty-slot";
			if (!this.isClientFetch && onFetch) {
				cell.textContent = this.localize.flWaitingData;
			} else {
				cell.textContent = this.$item.$noDataText || this.localize.flNoData;
			}
			cell.setAttribute("colspan", this.orderCols.length);
			(this.emptyDataItem = document.createElement("tr")).appendChild(cell);
			this.body.appendChild(this.emptyDataItem);
		}
	},
	onItemInOut: function(onEnter, event, currentTarget) {
		if (this.isColReordering && currentTarget.syraCell) {
			if (syra_dd.ddAgent && syra_dd.ddAgent.onColumnHeaderEnterLeave) {
				syra_dd.ddAgent.onColumnHeaderEnterLeave(currentTarget.syraCell, onEnter);
			}
		}
	},
	removeColumn: function($bind, designing) {
		var index = this.findColIndex(null, $bind);
		if (index >= 0) {
			var col = this.orderCols.splice(index, 1)[0];
			this.$item.$layout.$items.splice(this.findColItem($bind), 1);
			syra_site.dom.removeChild(col.groupBody);
			syra_site.dom.removeChild(col.groupHead);
			syra_site.dom.removeChild(col.titleCell);
			if (this.filterRecord) {
				syra_site.dom.removeChild(this.filterRecord.dataRow.childNodes[index]);
			}
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				var record = this.records[ii];
				syra_site.dom.removeChild(record.dataRow.childNodes[index]);
			}
			this.resizeList(true);
		}
	},
	findColIndex: function(col, $bind) {
		for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
			if ($bind) {
				if (this.orderCols[ii].$bind == $bind) {
					return ii;
				}
			} else {
				if (this.orderCols[ii] == col) {
					return ii;
				}
			}
		}
		return -1;
	},
	findColItem: function($bind) {
		for (var ii = 0, jj = this.$item.$layout.$items.length; ii < jj; ii++) {
			if (this.$item.$layout.$items[ii].$bind == $bind) {
				return ii;
			}
		}
		return -1;
	},
	reorderCells: function(record, targetIndex, sourceIndex, dropAtEnd) {
		var children = record.dataRow.childNodes;
		var targetCell = children[targetIndex];
		var sourceCell = children[sourceIndex];
		targetCell.parentNode.insertBefore(sourceCell, dropAtEnd ? targetCell.nextSibling : targetCell);
	},
	toggleFixRecordCell: function(cellIndex, isFixed) {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			syra_site.dom.toggleClass(this.records[ii].dataRow.childNodes[cellIndex], "s-grid-col-fixed", isFixed);
		}
	},
	reorderColumns: function(colSource, colTarget, dropAtEnd) {
		var sourceIndex = this.orderCols.indexOf(colSource);
		if (sourceIndex >= 0) {
			var targetIndex = this.orderCols.indexOf(colTarget);
			this.orderCols.splice(sourceIndex, 1);
			var newSourceIndex = this.orderCols.indexOf(colTarget);
			if (dropAtEnd) {
				newSourceIndex++;
			}
			this.orderCols.splice(newSourceIndex, 0, colSource);
			var $sourceItem = this.$item.$layout.$items.splice(this.findColItem(colSource.$bind), 1)[0];
			var $newSourceItem = this.findColItem(colTarget.$bind);
			if (dropAtEnd) {
				$newSourceItem++;
			}
			this.$item.$layout.$items.splice($newSourceItem, 0, $sourceItem);

			if (this.filterRecord) {
				this.reorderCells(this.filterRecord, targetIndex, sourceIndex, dropAtEnd);
			}
			colTarget.groupBody.parentNode.insertBefore(colSource.groupBody, dropAtEnd ? colTarget.groupBody.nextSibling : colTarget.groupBody);
			colTarget.groupHead.parentNode.insertBefore(colSource.groupHead, dropAtEnd ? colTarget.groupHead.nextSibling : colTarget.groupHead);
			colTarget.titleCell.parentNode.insertBefore(colSource.titleCell, dropAtEnd ? colTarget.titleCell.nextSibling : colTarget.titleCell);
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				var record = this.records[ii];
				this.reorderCells(record, targetIndex, sourceIndex, dropAtEnd);
			}
			if (this.lastColFixed) {
				var lastColFixedIndex = this.orderCols.indexOf(this.lastColFixed);
				for (var ii = 0, jj = lastColFixedIndex; ii < jj; ii++) {
					var col = this.orderCols[ii];
					if (!col.$isFixed) {
						col.$isFixed = col.$item.$isFixed = true;
						syra_site.dom.toggleClass(col.titleCell, "s-grid-col-fixed", true);
						this.toggleFixRecordCell(ii, true);
					}
				}
				for (var ii = jj + 1, jj = this.orderCols.length; ii < jj; ii++) {
					var col = this.orderCols[ii];
					if (col.$isFixed) {
						delete col.$isFixed;
						delete col.$item.$isFixed;
						syra_site.dom.toggleClass(col.titleCell, "s-grid-col-fixed", false);
						this.toggleFixRecordCell(ii, false);
					}
				}
			}
		}
		this.saveListDesign(true, preferencesHelper.save(this, "$columns"));
	},

	_setColumnTitle: function(col, $title) {
		var titleText = this.getLocalizedTitle($title || "");
		if (titleText.length > 1) {
			titleText = titleText.substr(0, 1).toUpperCase() + titleText.substr(1);
		}
		col.title.textContent = titleText;
		col.title.title = titleText;
		return titleText;
	},
	appendFieldCol: function(slot, $item, $field) {
		var col = this.cols[$item.$bind] = this.appendCol();
		col.titleCell.syrainout = this.id;
		col.titleCell.syraCell = col;
		col.$isHidden = $field.$isHidden;
		col.slot = slot;
		if ($field.$capabilities && ($field.$capabilities.indexOf("sort") >= 0)) {
			col.isSortable = true;
			col.title = this.sortCapability.appendSortLink(col, $item);
		} else {
			col.title = document.createElement("div");
			col.title.className = this.$skin + "-title-label";
		}
		var $title;
		if (this.globalMetaRecords && this.globalMetaRecords.$properties) {
			var $metaField = this.globalMetaRecords.$properties[$item.$bind];
			if ($metaField) {
				$title = $metaField.$title;
			}

		}
		col.titleText = this._setColumnTitle(col, $title || $field.$shortTitle || $field.$title);

		col.titleWrapper = document.createElement("div");
		col.titleWrapper.className = "s-grid-title-wrap";
		col.titleWrapper.appendChild(col.title);
		col.resizer = document.createElement("div");
		col.resizer.className = "s-grid-title-resizer";
		col.resizer.syraResizerColId = this.id;
		col.resizer.syraDragSpot = this.id;
		col.titleWrapper.appendChild(col.resizer);
		col.titleCell.syraReorderColId = this.id;
		col.titleCell.syra_field_bind = $item.$bind || "";
		col.titleCell.className = this.gridCss.title;
		col.titleCell.syraDragSpot = this.id;
		col.titleCell.appendChild(col.titleWrapper);
		var display = col.$isHidden ? "none" : "";
		col.groupHead.style.display = display;
		col.groupBody.style.display = display;
		col.titleCell.style.display = display;
		slot.appendChild(col.titleCell);
		col.titleCell.setAttribute("data-s-q-test-bind", $item.$bind);
		col.groupBody.setAttribute("data-s-bind", $item.$bind);
		col.$bind = $item.$bind;
		col.$item = $item;
		this.columnFitter.setFieldWidth(col, $field);

		col.$isFixed = col.$item.$isFixed;
		if (col.$isFixed === undefined && $field.$isFixed !== undefined) {
			col.$isFixed = col.$item.$isFixed = $field.$isFixed;
		}
		if (col.$isFixed) {
			col.titleCell.className += " s-grid-col-fixed";
			this.lastColFixed = col;
		} else {
			delete col.$item.$isFixed;
		}
		return col;
	},
	_makeTitleRow: function() {
		this.orderCols = [];
		this.ensureGlobalMetaRecord(true);
		if (this.titleRow) {
			syra_site.dom.empty(this.titleRow);
		} else {
			this.titleRow = this.headTable.appendChild(document.createElement("tr"));
		}
		syra_site.dom.empty(this.bodyColgroup);
		syra_site.dom.empty(this.headColgroup);
		this.titleRow.style.display = this.$item.$isTitleRowHidden ? "none" : "";
		if (this.$item.$isQuickFilter) {
			// && this.$facet != "$details"  tri client
			if (this.filterRecord) {
				this.filterRecord.drawBox();
			} else {
				(this.filterRecord = new FilterRecord()).loadRecord(this);
			}
		}

		if (this.treeDecorator) {
			this.orderCols.push(this.treeDecorator.appendTreeviewCol(this.titleRow));
		} else {
			if (this.filterRecord) {
				this.filterRecord.appendCell();
			}
			this.orderCols.push(this._appendRowIndexCol(this.titleRow));
		}

		if (this.cardDecorator.isRowCardMode) {
			if (this.filterRecord) {
				this.filterRecord.appendCell();
			}
			this.orderCols.push(this.cardDecorator.appendRowCardCol(this.titleRow));
		}

		if (this.selector.useColumnSelector) {
			if (this.filterRecord) {
				this.filterRecord.appendFlagCell();
			}
			this.orderCols.push(this._appendRecordSelectorCol(this.titleRow));
		}
		if (!this.$item.$isMenuRecordHidden) {
			if (this.filterRecord) {
				this.filterRecord.appendCell();
			}
			this.orderCols.push(this._appendMenusBoxCol(this.titleRow));
		}

		var $items = this.$item.$layout.$items;
		this.lastColFixed = null;

		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			var $field = this.$fields[$item.$bind];
			if ($field && !$field.$isExcluded) {
				var col = this.appendFieldCol(this.titleRow, $item, $field);
				this.orderCols.push(col);
				if (this.filterRecord) {
					this.filterRecord.appendFieldCell(col, $field);
				}
			}
		}
		if (this.lastColFixed) {
			this.lastColFixed.titleCell.className += " s-grid-col-fixed-last";
		}
	},
	appendCol: function() {
		return {
			titleCell: document.createElement("th"),
			groupBody: this.bodyColgroup.appendChild(document.createElement("col")),
			groupHead: this.headColgroup.appendChild(document.createElement("col"))
		};
	},
	_appendRowIndexCol: function(slot) {
		var col = this.cols.$rowIndex = this.appendCol();
		col.slot = slot;
		col.titleCell.className = this.gridCss.title;
		slot.appendChild(col.titleCell);
		this.showRowIndexCol();
		return col;
	},
	_appendRecordSelectorCol: function(slot) {
		var col = this.cols.$recordSelector = this.appendCol();
		col.slot = slot;
		col.titleCell.className = this.gridCss.title;
		this.selector.appendToTitle(slot.appendChild(col.titleCell));
		col.colWidth = this.selector.getWidth();
		return col;
	},
	_appendMenusBoxCol: function(slot) {
		var col = this.cols.$menusBox = this.appendCol();
		col.slot = slot;
		col.titleCell.className = this.gridCss.title + " s-list-title-actions";
		slot.appendChild(col.titleCell);
		col.colWidth = col.width = 0;
		return col;
	},
	showRowIndexCol: function() {
		if (this.cols && this.cols.$rowIndex) {
			if (this.$item.$isRowIndexVisible || this.$item.$selectByRowIndex) {
				this.cols.$rowIndex.colWidth = (this.$capability && this.$capability.reorder) ? 35 : 25;
			} else {
				this.cols.$rowIndex.colWidth = 0;
			}
		}
	},
	findEventCol: function(event) {
		var target = event.target;
		while (!target.syra_field_bind) {
			target = target.parentNode;
		};
		return this.cols[target.syra_field_bind];
	},
	isDraggable: function(target, event) {
		if (target.syraResizerColId == this.id) {
			syra_dd.dropableItem = {
				list: this,
				resizedCol: this.findEventCol(event)
			};
			syra_dd.start(this, ColResizerDDAgent, this.titleRow);
			event.syraRetValue = false;
			return;
		} else {
			if (target.syraReorderColId == this.id) {
				syra_dd.dropableItem = {
					list: this,
					reordeCol: this.findEventCol(event)
				};
				syra_dd.start(this, ColReorderDDAgent, this.titleRow);
				event.syraRetValue = false;
				return;
			} else {
				if (this.addSlotResizer(target, event)) {
					return;
				} else {
					return this.isReorderRecordDraggable(target, event);
				}
			}
		}
		return null;
	},

	applyDesignMetaData: function(metaData, designing) {
		MultiList.prototype.applyDesignMetaData.call(this, metaData, designing);
		var resize;
		if (metaData.$isTitleRowHidden !== undefined) {
			this.$item.$isTitleRowHidden = metaData.$isTitleRowHidden;
			if (this.titleRow) {
				this.titleRow.style.display = this.$item.$isTitleRowHidden ? "none" : "";
				resize = true;
			}
		}
		if ((metaData.$fixedBodyHeight !== undefined) || (metaData.$fitContainer !== undefined) ||
			(metaData.$isDockedHeight !== undefined)) {
			if (metaData.$isDockedHeight !== undefined) {
				this.$isDockedHeight = metaData.$isDockedHeight;
			}
			if (metaData.$fixedBodyHeight !== undefined) {
				this.$item.$fixedBodyHeight = metaData.$fixedBodyHeight;
			}
			if (metaData.$fitContainer !== undefined) {
				this.$item.$fitContainer = metaData.$fitContainer;
			}
			if (this.scroller) {
				this.scroller.setFixedBodyHeight(this.$item.$fixedBodyHeight);
			}
			resize = true;
		}
		if (designing) {
			if (metaData.$cardPosition !== undefined) {
				resize = true;
				this.cardDecorator.applyDesignMetaData(metaData, designing);
			}
		}
		if (this.graphDecorator) {
			this.graphDecorator.applyDesignMetaData(metaData, designing);
		}
		this.pagging.applyMetadata(metaData, designing);
	},
	applyMetaDataRecords: function($metaRecord) {
		if ($metaRecord && $metaRecord.$properties) {
			var $binds = Object.keys($metaRecord.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $metaField = $metaRecord.$properties[$bind];
				var col = this.cols[$bind];
				if (col) {
					if ($metaField.$title !== undefined) {
						this._setColumnTitle(col, $metaField.$title);
					}
					if ($metaField.$isHidden !== undefined) {
						var display = (col.$isHidden = $metaField.$isHidden) ? "none" : "";
						var index = this.findColIndex(col);
						if (col.titleCell) {
							col.titleCell.style.display = display;
						}
						col.groupHead.style.display = col.groupBody.style.display = display;
						for (var mm = 0, kk = this.records.length; mm < kk; mm++) {
							var record = this.records[mm];
							record.dataRow.childNodes[index].style.display = display;
						}
						if (this.filterRecord) {
							this.filterRecord.dataRow.childNodes[index].style.display = display;
						}
					}
				}
			}
		}
	},
	validateQuickActionsDisplay: function($quickActionsEdit, $quickActionsMenu) {
		var col = this.cols.$menusBox;
		if (col) {
			col.colWidth = col.width = 0;
			if ($quickActionsEdit) {
				col.colWidth = col.width = 18;
			}
			if ($quickActionsMenu) {
				col.colWidth = (col.width += 22);
			}
		}
	},
	setFocus: function(select, name, $serverIndex) {
		if (this.popupCardBuilder && this.popupCardBuilder.isOpened() && this.selector.uuid != this.clientDataset[$serverIndex].$uuid) {
			this.selector.select(this.clientDataset[$serverIndex].$uuid, true);
		}
		return MultiList.prototype.setFocus.call(this, select, name, $serverIndex);
	},
	dispose: function() {
		this.cardDecorator && this.cardDecorator.dispose();
		this.popupCardBuilder && this.popupCardBuilder.dispose();
		this.filterRecord && this.removeRecord(this.filterRecord);
		this.scroller && this.scroller.dispose();
		this.columnFitter && this.columnFitter.dispose();

		if (this.orderCols) {
			for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
				var col = this.orderCols[ii];
				if (col && col.titleCell) {
					col.titleCell.syraCell = null;
				}
			}
		}
		this.headTableSlot = this.bodyTableSlot = this.hscroller = this.hscrollBody = null;
		this._fitter = this.body = this.bodyColgroup = this.bodyTable = this.headTable = null;
		this.headColgroup = this.cols = this.gridCss = this.orderCols = this.titleRow = this.prevCols = null;
		this.cardDecorator = this.popupCardBuilder = this.emptyData = this.columnFitter = this.filterRecord = this.scroller = this.$colBinds = null;
		MultiList.prototype.dispose.call(this);
	}
});