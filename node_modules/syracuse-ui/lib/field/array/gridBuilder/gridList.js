"use strict";
var helpers = require('syracuse-core/lib/helpers');
var MultiList = require("syracuse-ui/lib/field/array/multiList").MultiList;
var preferencesHelper = require("syracuse-ui/lib/field/array/tools/preferencesHelper");
var GridRecord = require('./gridRecord').GridRecord;
var scrollHelper = require('./tools/scrollHelper');
var CardDecorator = require('./card/cardDecorator').CardDecorator;

window.syra_list = window.syra_list || {};
var _fomatter = window.syra_list.grid = {
	filter: require('./filter/filterHelpers'),
	quickEdit: require("./tools/quickEdit"),
	builder: require('./gridBuilder'),
	colsReorder: require('./tools/colsReorder'),
	popupCardBuilder: require('./card/popupCardBuilder'),
	columnFitter: require('./tools/columnFitter')
};

function GridList() {}

exports.GridList = helpers.defineClass(GridList, MultiList, {
	onMouseMove: function(event) {
		return _fomatter.builder.onMouseMove(this, event);
	},
	initializeList: function() {
		this.fomatter = _fomatter;
		MultiList.prototype.initializeList.call(this);
		this.isGridList = true;
		this.$defaultSkin = "s-" + this.$item.$format;
		this.RecordClass = GridRecord;
		this.$item.$isTopLabelAlignment = true;

		this.$complexBinds = [];
		this.$colBinds = [];
		var $binds = Object.keys(this.$fields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var $field = this.$fields[$bind];
			if (!$field.$isExcluded && !($field.$viewScope && $field.$viewScope == "popup")) {
				switch ($field.$type) {
					case "application/x-array":
					case "application/x-object":
					case "text/rtf":
					case "text/html":
						this.$complexBinds.push($bind);
						break;
					default:
						this.$colBinds.push($bind);
						break;
				}
			}
		}

		if (!this.$item.$layout) {
			this.$item.$layout = (this.$designing && this.$designing.grid && this.$designing.grid.$layout) || {};
		}
		//define default columns

		var $items = this.$item.$layout.$items;
		this.bindMap = {};
		if (!$items) {
			$items = this.$item.$layout.$items = [];
			for (var ii = 0, jj = this.$colBinds.length; ii < jj; ii++) {
				$items.push(this.bindMap[this.$colBinds[ii]] = {
					$bind: this.$colBinds[ii]
				});
			}
		} else {
			//check items for having only colbinds
			var ii = 0,
				jj = $items.length;
			while (ii < jj) {
				var $item = $items[ii];
				if ($item && $item.$bind) {
					if (this.$colBinds.indexOf($item.$bind) < 0) {
						$items.splice(ii, 1);
						jj = $items.length;
						continue;
					}
					this.bindMap[$item.$bind] = $item;
				}
				ii++;
			}
		}
		preferencesHelper.onInitialize(this);
		(this.cardDecorator = new CardDecorator()).load(this);
	},
	clearPreferences: function() {
		preferencesHelper.clearPreferences(this);
	},
	resizeScrollView: function(newWidth) {
		var newWidth = newWidth || this.scrollTable.bodySlot.clientWidth;
		if (newWidth) {
			if (!this.isTableSlotHidden) {
				if (this.$fixedBodyHeight) {
					if (this.scrollTable.bodySlot.style.overflowY != "auto") {
						this.scrollTable.bodySlot.style.overflowY = "auto";
					}
					var height = this.scrollTable.bodySlot.clientHeight;
					this.scrollTable.bodySlot.style.height = ((Math.abs(this.$fixedBodyHeight - height) < 2) ? height : this.$fixedBodyHeight) + "px";
				} else {
					if (this.$fitContainer) {
						if (this.scrollTable.bodySlot.style.overflowY != "auto") {
							this.scrollTable.bodySlot.style.overflowY = "auto";
						}
						var savScrollTop = this.scrollTable.bodySlot.scrollTop;
						this.scrollTable.bodySlot.style.height = "";
						var bodyHeight = this.scrollTable.bodySlot.clientHeight;
						var diff = this.layoutSlot.scrollHeight - this.layoutSlot.clientHeight;
						if (diff && !this.tableSlotWidth) { //never init
							diff += 17;
						}
						bodyHeight -= diff;
						this.scrollTable.bodySlot.style.height = bodyHeight + "px";
						this.scrollTable.bodySlot.scrollTop = savScrollTop;
					} else {
						if (this.$isDockedHeight) {
							if (this.scrollTable.bodySlot.style.overflowY != "auto") {
								this.scrollTable.bodySlot.style.overflowY = "auto";
							}
						} else {
							if (this.scrollTable.bodySlot.style.overflowY == "auto") {
								this.scrollTable.bodySlot.style.overflowY = "";
								this.scrollTable.bodySlot.style.height = "";
							}
						}
					}
				}
				if (!this.tableSlotWidth && (this.scrollTable.bodySlot.scrollHeight > (this.scrollTable.bodySlot.clientHeight + 1))) {
					newWidth -= 17;
				}
				if (newWidth != this.tableSlotWidth) {
					this.tableSlotWidth = newWidth;
				}
				this.fomatter.columnFitter.fit(this);
				if (this.page.lookupField == this) {
					if (this.colsWidth < this.tableMaxWidth) {
						this.tableSlotWidth = this.colsWidth;
					}
				}
				this.scrollAreaWidth = this.colsWidth - this.tableSlotWidth;
				this.scrollTable.hscrollBody.style.width = this.colsWidth + "px";
				var isHScroll;
				this.scrollTable.hscroller.style.display = (isHScroll = this.scrollAreaWidth > 0) ? "" : "none";

				this.fomatter.builder.showHeaderCorner(this);
				!this.page.dialogWrapper && scrollHelper.addButtons(this, isHScroll);
			} else {
				if (newWidth != this.tableSlotWidth) {
					this.tableSlotWidth = newWidth;
				}
			}
		}
	},
	onPageScrollViewChange: function() {
		this.scrollLeftBtn && scrollHelper.moveButtons(this);
	},
	resizeArticle: function(resize) {
		if (!this.disposed) {
			var mustBeResized = resize || this.mustBeResized;
			if (mustBeResized && this.articleParent.isChildItemDisplay(this)) {
				this.resizeScrollView();
				MultiList.prototype.resizeArticle.call(this, resize);
			}
		}
	},
	drawBox: function() {
		MultiList.prototype.drawBox.call(this);
		this.searchCapability.draw(this);
		this.$skin = this.$item.$skin || this.$defaultSkin;
		this.cssCell = this.$skin + "-cell";
		this.cssTileCell = this.$skin + "-title-cell";
		this.cssRowIndex = this.$skin + "-cell " + this.$skin + "-row-index";
		this._dataValue.style.overflow = "";
		this.tableSlot = document.createElement("div");
		this.tableSlot.className = "s-grid-slot";
		this._core.appendChild(this.tableSlot);

		this.ensureGrapDecorator();
		this.appendCardGraphSlots();


		this.applyDesignMetaData(this.$item, false);
		this.setState(this.$field);
		this.orderCols = [];
		this.cols = {};
		this.prevCols = {};

		this.scrollTable = _fomatter.builder.createTable(this, true);
		this.body = this.scrollTable.bodyBody;

		this.tableSlot.appendChild(this.scrollTable.headSlot);
		this.tableSlot.appendChild(this.scrollTable.bodySlot);
		this.tableSlot.appendChild(this.scrollTable.hscroller);

		this.fomatter.columnFitter.reset(this);
		scrollHelper.load(this);

		this.loadSelector();
		this.capabilityMaker.apply(this);
		this.fomatter.builder.addTitleRow(this);

		this.cursor = "default";
		syra_dd.colResizer.push(this);
		this._endDrawBox();
	},
	validateDisplay: function() {
		if (!this.disableDisplayValidation) {
			if (this.cols.$menus) {
				var record = this.records && this.records.length && this.records[0];
				if (record && record.mnPickers) {
					var width = 0;
					var $edit = record.menuItems.$edit;
					if ($edit && $edit.length) {
						width += syra_menus.btnWidth;
					}
					if (record.mnPickers.$quickEdit) {
						width += syra_menus.btnWidth;
					}
					if (record.mnPickers.menus) {
						width += syra_menus.btnWidth;
					}
					if (width != this.cols.$menus.colWidth) {
						this.cols.$menus.colWidth = this.cols.$menus.width = width;
					}
				}
			}
			MultiList.prototype.validateDisplay.call(this);
			var isFixed = true;
			for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
				var col = this.orderCols[ii];
				if (col.$bind) {
					isFixed = col.$isFixed = isFixed && col.$item.$isFixed;
					if (!isFixed) {
						delete col.$item.$isFixed;
					} else {
						col.$item.$isFixed = true;
					}
				} else {
					col.$isFixed = true;
				}
			}
		}
	},
	emptyBody: function(addEmptySlot, onFetch) {
		syra_site.dom.empty(this.body);
		if (addEmptySlot) {
			if (!this.emptyDataItem) {
				this.emptyDataItem = document.createElement("div");
				this.emptyDataItem.className = this.$skin + "-empty-slot";
				this.scrollTable.bodySlot.appendChild(this.emptyDataItem);
			}
			if (!this.isClientFetch && onFetch) {
				this.emptyDataItem.textContent = syra_local.flWaitingData;
			} else {
				this.setMustBeResized();
				this.emptyDataItem.textContent = this.$item.$noDataText || syra_local.flNoData;
			}
		}
	},
	onItemInOut: function(onEnter, event, target) {
		if ((target == this.scrollLeftBtn) || (target == this.scrollRightBtn)) {
			scrollHelper.onItemInOut(this, onEnter, event, target);
		} else {
			this.fomatter.builder.onItemInOut(this, onEnter, event, target);
		}
	},
	findColItem: function($bind) {
		for (var ii = 0, jj = this.$item.$layout.$items.length; ii < jj; ii++) {
			if (this.$item.$layout.$items[ii].$bind == $bind) {
				return ii;
			}
		}
		return -1;
	},

	toggleFixRecordCell: function(cellIndex, isFixed) {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			syra_site.dom.toggleClass(this.records[ii].dataRow.childNodes[cellIndex], "s-grid-col-fixed", isFixed);
		}
	},
	setColWidth: function(col, width) {
		if (col.groupHead.syraWidth != width) {
			col.groupHead.style.width = col.groupHead.syraWidth = width;
			col.groupBody.style.width = width;
		}
	},

	_appendRecord: function(options) {
		var record = MultiList.prototype._appendRecord.call(this, options);
		this.fomatter.popupCardBuilder.addOpenLink(record);
		return record;
	},

	isDraggable: function(target, event) {
		return this.fomatter.builder.isDraggable(this, target, event);
	},
	setFixedBodyHeight: function($fixedBodyHeight) {
		this.$fixedBodyHeight = parseInt($fixedBodyHeight || 0, 10);
	},
	applyDesignMetaData: function(metaData, designing) {
		MultiList.prototype.applyDesignMetaData.call(this, metaData, designing);
		if ((metaData.$fixedBodyHeight !== undefined) ||
			(metaData.$isDockedHeight !== undefined)) {
			if (metaData.$isDockedHeight !== undefined) {
				this.$isDockedHeight = metaData.$isDockedHeight;
			}
			if (metaData.$fixedBodyHeight !== undefined) {
				this.$item.$fixedBodyHeight = metaData.$fixedBodyHeight;
			}
			this.setFixedBodyHeight(this.$item.$fixedBodyHeight);
		}
		if (designing && metaData.$cardPosition !== undefined) {
			this.cardDecorator.applyDesignMetaData(metaData, designing);
		}
		this.graphDecorator && this.graphDecorator.applyDesignMetaData(metaData, designing);
		this.pagging.applyMetadata(metaData, designing);
	},
	setFocus: function(select, name, $serverIndex) {
		if (this.fomatter.popupCardBuilder.isOpened(this) && this.selector.uuid != this.clientDataset[$serverIndex].$uuid) {
			this.selector.selectRecord(this.clientDataset[$serverIndex].$uuid, true);
		}
		return MultiList.prototype.setFocus.call(this, select, name, $serverIndex);
	},
	onScrollButonClick: function(event, btn) {
		scrollHelper.onScrollButonClick(this, event, btn);
	},
	getNextPreviousField: function(next, $bind) {
		var found;
		for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
			if (!this.orderCols[ii].$isHidden && this.orderCols[ii].$bind) {
				if (next) {
					if (this.orderCols[ii].$bind == $bind) {
						found = $bind;
					} else {
						if (found) {
							found = this.orderCols[ii].$bind;
							break;
						}
					}
				} else {
					if (this.orderCols[ii].$bind == $bind) {
						found = found || $bind;
						break;
					} else {
						found = this.orderCols[ii].$bind;
					}
				}
			}
		}
		return found;
	},
	dispose: function() {
		this.cardDecorator && this.cardDecorator.dispose();
		this.fomatter.builder.dispose(this);
		this.fomatter.popupCardBuilder.dispose(this);
		this.filterRecord && this.removeRecord(this.filterRecord);
		scrollHelper.dispose(this);
		this.fomatter.columnFitter.dispose(this);
		this.fomatter.quickEdit.dispose(this);

		if (this.orderCols) {
			for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
				var col = this.orderCols[ii];
				if (col && col.titleCell) {
					col.titleCell.syraCell = null;
				}
			}
		}
		this.scrollTable && this.scrollTable.dispose();
		this.fomatter = this.bindMap = this.scrollTable = this._fitter = this.body = null;
		this.cols = this.orderCols = this.prevCols = null;
		this.cardDecorator = this.emptyData = this.filterRecord = this.$colBinds = null;
		MultiList.prototype.dispose.call(this);
	}
});