"use strict";
var helpers = require('syracuse-core/lib/helpers');
var MultiList = require("syracuse-ui/lib/field/array/multiList").MultiList;
var Builder = require('./gridBuilder').Builder;

function GridList() {}

exports.GridList = helpers.defineClass(GridList, MultiList, {
	onMouseMove: function(event) {
		return this.builder.onMouseMove(event);
	},
	initializeList: function() {
		this.builder = new Builder();
		this.builder.initialize(this);
		MultiList.prototype.initializeList.call(this);
		this.builder.endInitiallize();
	},
	onRowCardClick: function(event, btn) {
		this.builder.cardDecorator.onRowCardOpenerClick(btn);
	},
	resizeArticle: function(resize) {
		if (!this.disposed) {
			var mustBeResized = resize || this.mustBeResized;
			if (mustBeResized && this.articleParent.isChildItemDisplay(this)) {
				this.builder.resizeScrollView();
				MultiList.prototype.resizeArticle.call(this, resize);
			}
		}
	},
	scrollToField: function(field) {
		this.scrollToRecord(field.articleParent);
		var col = this.builder.columnsMap[field.$item.$bind];
		if (col && !col.table.isFreeze) {
			syra_page.scrollToItem(this.page, field.domItem, col.table.bodySlot, true);
		}
	},
	scrollToRecord: function(record) {
		record && syra_page.scrollToItem(this.page, record.dataRow, this.builder.scrollTable.bodySlot, true);
	},
	drawBox: function() {
		MultiList.prototype.drawBox.call(this);
		this.builder.drawGrid();
		this._endDrawBox();
	},
	onItemInOut: function(onEnter, event, target) {
		this.builder.onItemInOut(onEnter, event, target);
	},
	_appendRecord: function(options) {
		var record = MultiList.prototype._appendRecord.call(this, options);
		this.builder.popupCardBuilder.addOpenLink(record);
		return record;
	},

	isDraggable: function(target, event) {
		return this.builder.isDraggable(target, event);
	},
	applyDesignMetaData: function(metaData, designing) {
		MultiList.prototype.applyDesignMetaData.call(this, metaData, designing);
		this.builder.applyDesignMetaData(metaData, designing);
	},
	dispose: function() {
		this.builder.dispose(this);
		this.builder = this.body = null;
		MultiList.prototype.dispose.call(this);
	}
});