"use strict";
var helpers = require('syracuse-core/lib/helpers');
var fieldHelper = require('syracuse-ui/lib/field/helpers/fieldHelper');
var MultiList = require("syracuse-ui/lib/field/array/multiList").MultiList;
var FilterRecord = require("syracuse-ui/lib/field/array/filter/filterRecord").FilterRecord;
var GridRecord = require('./gridRecord').GridRecord;
var ColResizerDDAgent = require("./tools/colResizerDDAgent").ColResizerDDAgent;
var ColReorderDDAgent = require("./tools/colReorderDDAgent").ColReorderDDAgent;
var Scroller = require('./scroller').Scroller;
var PopupCardBuilder = require('./card/popupCardBuilder').PopupCardBuilder;
var CardDecorator = require('./card/cardDecorator').CardDecorator;


function GridList() {}

exports.GridList = helpers.defineClass(GridList, MultiList, {
	initializeList: function() {
		MultiList.prototype.initializeList.call(this);
		this.$defaultSkin = "s-" + this.$item.$format;
		this.RecordClass = GridRecord;
		this.$item.$isTopLabelAlignment = true;

		this.$complexBinds = [];
		this.$colBinds = [];
		var $binds = Object.keys(this.$fields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var $field = this.$fields[$bind];
			if (!$field.$isExcluded) {
				switch ($field.$type) {
					case "application/x-array":
					case "application/x-object":
					case "text/rtf":
					case "text/html":
						this.$complexBinds.push($bind);
						break;
					default:
						this.$colBinds.push($bind);
						break;
				}
			}
		}

		if (!this.$item.$layout) {
			this.$item.$layout = (this.$designing && this.$designing.grid && this.$designing.grid.$layout) || {};
		}
		//define default columns

		var $items = this.$item.$layout.$items;
		var bindMap = {};
		if (!$items) {
			$items = this.$item.$layout.$items = [];
			for (var ii = 0, jj = this.$colBinds.length; ii < jj; ii++) {
				$items.push(bindMap[this.$colBinds[ii]] = {
					$bind: this.$colBinds[ii]
				});
			}
		} else {
			//check items for having only colbinds
			var ii = 0,
				jj = $items.length;
			while (ii < jj) {
				var $item = $items[ii];
				if ($item && $item.$bind) {
					if (this.$colBinds.indexOf($item.$bind) < 0) {
						$items.splice(ii, 1);
						jj = $items.length;
						continue;
					}
					bindMap[$item.$bind] = $item;
				}
				ii++;
			}
		}
		if (this.$userPreferences.$columns) {
			var source = this.$item.$layout.$items;
			$items = this.$item.$layout.$items = [];
			for (var ii = 0, jj = this.$userPreferences.$columns.length; ii < jj; ii++) {
				var $bind = this.$userPreferences.$columns[ii];
				var $item = bindMap[$bind];
				if ($item) {
					source.splice(source.indexOf($item), 1);
					$items.push($item);
				}
			}
			for (var ii = 0, jj = source.length; ii < jj; ii++) {
				$items.push(source[ii]);
			}
		}
		if (this.$userPreferences.$colWidths) {
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				var $width = this.$userPreferences.$colWidths[$items[ii].$bind];
				if ($width) {
					$items[ii].$width = $width;
				}
			}
		}
		if (this.$item.$popupCard && !this.popupCardBuilder) {
			this.popupCardBuilder = new PopupCardBuilder();
			this.popupCardBuilder.list = this;
		}

		(this.cardDecorator = new CardDecorator()).load(this);
	},
	resizeArticle: function() {
		if (!this.disposed && this.scroller) {
			this.scroller.onListResize();
		}
		MultiList.prototype.resizeArticle.call(this);
	},
	drawBox: function() {
		MultiList.prototype.drawBox.call(this);
		this.searchCapability.draw();
		this.$skin = this.$item.$skin || this.$defaultSkin;
		this.gridCss = {
			title: this.$skin + "-title-cell",
			cell: this.$skin + "-cell",
			rowIndex: this.$skin + "-cell " + this.$skin + "-row-index"
		};

		this.fieldValue.style.overflow = "";
		this.tableSlot = document.createElement("div");
		this.tableSlot.className = "s-grid-slot";
		this._core.appendChild(this.tableSlot);

		this.ensureGrapDecorator();
		this.appendCardGraphSlots();


		this.applyDesignMetaData(this.$item, false);
		this.setState(this.$field);
		this.orderCols = [];
		this.cols = {};
		this.prevCols = {};
		this._headTable = document.createElement("table");
		this._headTable.style.display = "none";
		this._headTable.className = this.$skin + "-table-head";
		this._headTable.setAttribute("cellspacing", "0");
		this._headTable.setAttribute("cellpadding", "0");

		this.bodyTable = document.createElement("table");
		this.bodyTable.style.display = "none";
		this.bodyTable.className = this.$skin + "-table-body";
		this.bodyTable.setAttribute("cellspacing", "0");
		this.bodyTable.setAttribute("cellpadding", "0");

		this.bodyColgroup = this.bodyTable.appendChild(document.createElement("colgroup"));
		this._headColgroup = this._headTable.appendChild(document.createElement("colgroup"));
		this._thead = this._headTable.appendChild(document.createElement("thead"));

		this.scroller = new Scroller();
		this.scroller.load(this);
		this.scroller.drawSlots(this.tableSlot, this._headTable, this.bodyTable);

		this.sortCapability.load();
		this.body = this.bodyTable.appendChild(document.createElement("tbody"));

		this.loadSelector();
		this._makeTitleRow();

		this.scroller.validateFixedColumns();

		this.cursor = "default";
		document.site.ddManager.toggleColResizerObserver(this, true);
		this._headTable.style.display = "";
		this.applyCapabilities();
		this.bodyTable.style.display = "";
		this._endDrawBox();
	},
	emptyBody: function(addEmptySlot, onFetch) {
		this.cardDecorator.hasRowCard = false;
		document.site.emptyDom(this.body);
		if (addEmptySlot) {
			var cell = document.createElement("td");
			cell.className = this.$skin + "-empty-slot";
			if (!this.isClientFetch && onFetch) {
				cell.textContent = this.localize.flWaitingData;
			} else {
				cell.textContent = this.$item.$noDataText || this.localize.flNoData;
			}
			cell.setAttribute("colspan", this.orderCols.length);
			(this.emptyDataItem = document.createElement("tr")).appendChild(cell);
			this.body.appendChild(this.emptyDataItem);
		}
	},
	removeColumn: function($bind, designing) {
		var index = this.findColIndex(null, $bind);
		if (index >= 0) {
			var col = this.orderCols.splice(index, 1)[0];
			this.$item.$layout.$items.splice(this.findColItem($bind), 1);
			document.site.removeDomChild(col.groupBody);
			document.site.removeDomChild(col.groupHead);
			document.site.removeDomChild(col.titleCell);
			if (this.filterRecord) {
				document.site.removeDomChild(this.filterRecord.dataRow.childNodes[index]);
			}
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				var record = this.records[ii];
				document.site.removeDomChild(record.dataRow.childNodes[index]);
			}
			this.resizeArticle();
		}
	},
	findColIndex: function(col, $bind) {
		for (var ii = 0, jj = this.orderCols.length; ii < jj; ii++) {
			if ($bind) {
				if (this.orderCols[ii].$bind == $bind) {
					return ii;
				}
			} else {
				if (this.orderCols[ii] == col) {
					return ii;
				}
			}
		}
		return -1;
	},
	findColItem: function($bind) {
		for (var ii = 0, jj = this.$item.$layout.$items.length; ii < jj; ii++) {
			if (this.$item.$layout.$items[ii].$bind == $bind) {
				return ii;
			}
		}
		return -1;
	},
	reorderCells: function(record, targetIndex, sourceIndex, dropAtEnd) {
		var children = record.dataRow.childNodes;
		var targetCell = children[targetIndex];
		var sourceCell = children[sourceIndex];
		targetCell.parentNode.insertBefore(sourceCell, dropAtEnd ? targetCell.nextSibling : targetCell);
	},
	toggleFixRecordCell: function(cellIndex, isFixed) {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			document.site.toggleClass(this.records[ii].dataRow.childNodes[cellIndex], "s-grid-col-fixed", isFixed);
		}
	},
	reorderColumns: function(colSource, colTarget, dropAtEnd) {
		var sourceIndex = this.orderCols.indexOf(colSource);
		if (sourceIndex >= 0) {
			var targetIndex = this.orderCols.indexOf(colTarget);
			this.orderCols.splice(sourceIndex, 1);
			var newSourceIndex = this.orderCols.indexOf(colTarget);
			if (dropAtEnd) {
				newSourceIndex++;
			}
			this.orderCols.splice(newSourceIndex, 0, colSource);

			var $sourceItem = this.$item.$layout.$items.splice(this.findColItem(colSource.$bind), 1)[0];
			var $newSourceItem = this.findColItem(colTarget.$bind);
			if (dropAtEnd) {
				$newSourceItem++;
			}
			this.$item.$layout.$items.splice($newSourceItem, 0, $sourceItem);

			if (this.filterRecord) {
				this.reorderCells(this.filterRecord, targetIndex, sourceIndex, dropAtEnd);
			}
			colTarget.groupBody.parentNode.insertBefore(colSource.groupBody, dropAtEnd ? colTarget.groupBody.nextSibling : colTarget.groupBody);
			colTarget.groupHead.parentNode.insertBefore(colSource.groupHead, dropAtEnd ? colTarget.groupHead.nextSibling : colTarget.groupHead);
			colTarget.titleCell.parentNode.insertBefore(colSource.titleCell, dropAtEnd ? colTarget.titleCell.nextSibling : colTarget.titleCell);
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				var record = this.records[ii];
				this.reorderCells(record, targetIndex, sourceIndex, dropAtEnd);
			}
			if (this.lastColFixed) {
				var lastColFixedIndex = this.orderCols.indexOf(this.lastColFixed);
				for (var ii = 0, jj = lastColFixedIndex; ii < jj; ii++) {
					var col = this.orderCols[ii];
					if (!col.$isFixed) {
						col.$isFixed = col.$item.$isFixed = true;
						document.site.toggleClass(col.titleCell, "s-grid-col-fixed", true);
						this.toggleFixRecordCell(ii, true);
					}
				}
				for (var ii = jj + 1, jj = this.orderCols.length; ii < jj; ii++) {
					var col = this.orderCols[ii];
					if (col.$isFixed) {
						delete col.$isFixed;
						delete col.$item.$isFixed;
						document.site.toggleClass(col.titleCell, "s-grid-col-fixed", false);
						this.toggleFixRecordCell(ii, false);
					}
				}
			}
		}
		if (this.scroller) {
			this.scroller.validateFixedColumns();
		}
		this.saveListDesign(true, this.saveUserPreferences("$columns"));
	},
	saveUserPreferences: function(key) {
		this.$userPreferences = MultiList.prototype.saveUserPreferences.call(this, key);
		switch (key) {
			case "$colWidths":
				this.$userPreferences.$colWidths = {};
				var $items = this.$item.$layout.$items;
				for (var ii = 0, jj = $items.length; ii < jj; ii++) {
					var $item = $items[ii];
					if ($item.$width !== undefined) {
						this.$userPreferences.$colWidths[$item.$bind] = $item.$width;
					}
				}
				break;
			case "$columns":
				this.$userPreferences.$columns = [];
				for (var ii = 0, jj = this.$item.$layout.$items.length; ii < jj; ii++) {
					this.$userPreferences.$columns.push(this.$item.$layout.$items[ii].$bind);
				}
				break;
		}
		return this.$userPreferences;
	},
	_setColumnTitle: function(col, $title) {
		var titleText = this.getLocalizedTitle($title || "");
		if (titleText.length > 1) {
			titleText = titleText.substr(0, 1).toUpperCase() + titleText.substr(1);
		}
		col.title.textContent = titleText;
		col.title.title = titleText;
		return titleText;
	},
	appendFieldCol: function(slot, $item, $field) {
		var col = this.cols[$item.$bind] = this.appendCol();
		col.$isHidden = $field.$isHidden;
		col.slot = slot;
		var isSortable;
		if ($field.$capabilities && ($field.$capabilities.indexOf("sort") >= 0)) {
			isSortable = true;
			col.title = this.sortCapability.appendSortLink(col, $item);
		} else {
			col.title = document.createElement("div");
			col.title.className = this.$skin + "-title-label";
		}
		var $title;
		if (this.globalMetaRecords && this.globalMetaRecords.$properties) {
			var $metaField = this.globalMetaRecords.$properties[$item.$bind];
			if ($metaField) {
				$title = $metaField.$title;
			}

		}
		var titleText = this._setColumnTitle(col, $title || $field.$shortTitle || $field.$title);

		col.titleWrapper = document.createElement("div");
		col.titleWrapper.className = "s-grid-title-wrap";
		col.titleWrapper.appendChild(col.title);
		col.resizer = document.createElement("div");
		col.resizer.className = "s-grid-title-resizer";
		col.resizer.syraResizerColId = this.id;
		document.site.ddManager.setDragSpot(col.resizer, true);
		col.titleWrapper.appendChild(col.resizer);
		col.titleCell.syraReorderColId = this.id;
		col.titleCell.syraFieldBind = $item.$bind || "";
		col.titleCell.className = this.gridCss.title;
		document.site.ddManager.setDragSpot(col.titleCell, true);
		col.titleCell.appendChild(col.titleWrapper);
		if (col.$isHidden) {
			col.groupHead.style.display = col.groupBody.style.display = col.titleCell.style.display = "none";
		} else {
			col.groupHead.style.display = col.groupBody.style.display = col.titleCell.style.display = "";
		}
		slot.appendChild(col.titleCell);
		col.titleCell.setAttribute("data-s-q-test-bind", $item.$bind);

		//set colgroup
		this.maxMinWidth = 0;
		var width = $item.$width || $field.$width;
		if (width) {
			col.widthValue = parseInt((width + "").replace("px", ""), 10);
			if (this.$userPreferences.$colWidths && this.$userPreferences.$colWidths[$item.$bind]) {
				col.isUserPreferenceWidth = true;
			}
		} else {
			col.widthValue = fieldHelper.getFieldWidth($field, false, titleText.length, isSortable);
			col.widthValue += 8; //for padding
			var widthAdded = 0;
			if ($field.$capabilities && ($field.$capabilities.indexOf("filter") >= 0)) {
				widthAdded += 18;
			}
			if (this.$isEditMode) {
				if ($field.$item ? ($field.$item.$links || $field.$item.$actions) : ($field.$links || $field.$actions)) {
					widthAdded += 18;
				}
				if ($field.$type == "application/x-choice" || $field.$type == "application/x-date" || $field.$type == "application/x-time") {
					widthAdded += 18;
				}
				if ($field.$links) {
					if ($field.$type != "application/x-reference" && $field.$links.$lookup) {
						col.widthValue;
						widthAdded += 18;
					}
					/*if ($field.$links.$tunnel) {
                     col.widthValue += 18;
                     }*/
				}
			}
			if (widthAdded) {
				if (isSortable) {
					widthAdded -= 16; //space added for sort
				}
				col.widthValue += widthAdded;
			}
		}
		//col.realWidth = 
		col.widthValue = Math.max(40, col.widthValue);
		col.groupHead.style.width = col.groupBody.style.width = (col.realWidth = (col.$isHidden ? 0 : col.widthValue)) + "px";
		col.groupBody.setAttribute("data-s-bind", $item.$bind);
		col.$bind = $item.$bind;
		col.$item = $item;
		col.$isFixed = col.$item.$isFixed;
		if (col.$isFixed === undefined && $field.$isFixed !== undefined) {
			col.$isFixed = col.$item.$isFixed = $field.$isFixed;
		}
		if (col.$isFixed) {
			col.titleCell.className += " s-grid-col-fixed";
			this.lastColFixed = col;
		} else {
			delete col.$item.$isFixed;
		}
		return col;
	},
	_makeTitleRow: function() {
		this.orderCols = [];
		this.ensureGlobalMetaRecord(true);
		if (this.titleRow) {
			document.site.emptyDom(this.titleRow);
		} else {
			this.titleRow = this._thead.appendChild(document.createElement("tr"));
		}
		document.site.emptyDom(this.bodyColgroup);
		document.site.emptyDom(this._headColgroup);
		this.titleRow.style.display = this.$item.$isTitleRowHidden ? "none" : "";
		if (this.$item.$isQuickFilter) {
			// && this.$facet != "$details"  tri client
			if (this.filterRecord) {
				this.filterRecord.drawBox();
			} else {
				(this.filterRecord = new FilterRecord()).loadRecord(this);
			}
		}

		if (this.treeDecorator) {
			this.orderCols.push(this.treeDecorator.appendTreeviewCol(this.titleRow));
		} else {
			if (this.filterRecord) {
				this.filterRecord.appendCell();
			}
			this.orderCols.push(this._appendRowIndexCol(this.titleRow));
		}

		if (this.cardDecorator.isRowCardMode) {
			if (this.filterRecord) {
				this.filterRecord.appendCell();
			}
			this.orderCols.push(this.cardDecorator.appendRowCardCol(this.titleRow));
		}

		if (this.selector.useColumnSelector) {
			if (this.filterRecord) {
				this.filterRecord.appendFlagCell();
			}
			this.orderCols.push(this._appendRecordSelectorCol(this.titleRow));
		}
		if (!this.$item.$isMenuRecordHidden) {
			if (this.filterRecord) {
				this.filterRecord.appendCell();
			}
			this.orderCols.push(this._appendMenusBoxCol(this.titleRow));
		}

		var $items = this.$item.$layout.$items;
		this.lastColFixed = null;

		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			var $field = this.$fields[$item.$bind];
			if ($field && !$field.$isExcluded) {
				var col = this.appendFieldCol(this.titleRow, $item, $field);
				this.orderCols.push(col);
				if (this.filterRecord) {
					this.filterRecord.appendFieldCell(col, $field);
				}
			}
		}
		if (this.lastColFixed) {
			this.lastColFixed.titleCell.className += " s-grid-col-fixed-last";
		}
	},
	appendCol: function() {
		return {
			titleCell: document.createElement("th"),
			groupBody: this.bodyColgroup.appendChild(document.createElement("col")),
			groupHead: this._headColgroup.appendChild(document.createElement("col"))
		};
	},
	_appendRowIndexCol: function(slot) {
		var col = this.cols.$rowIndex = this.appendCol();
		col.slot = slot;
		col.titleCell.className = this.gridCss.title;
		slot.appendChild(col.titleCell);
		this.showRowIndexCol();
		return col;
	},
	_appendRecordSelectorCol: function(slot) {
		var col = this.cols.$recordSelector = this.appendCol();
		col.slot = slot;
		col.titleCell.className = this.gridCss.title;
		this.selector.appendToTitle(slot.appendChild(col.titleCell));
		col.widthValue = this.selector.getWidth();
		col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
		return col;
	},
	_appendMenusBoxCol: function(slot) {
		var col = this.cols.$menusBox = this.appendCol();
		col.slot = slot;
		col.titleCell.className = this.gridCss.title + " s-list-title-actions";
		slot.appendChild(col.titleCell);
		col.widthValue = col.width = 0;
		col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
		return col;
	},
	showRowIndexCol: function() {
		if (this.cols && this.cols.$rowIndex) {
			if (this.$item.$isRowIndexVisible || this.$item.$selectByRowIndex) {
				this.cols.$rowIndex.widthValue = (this.$capability && this.$capability.reorder) ? 35 : 25;
			} else {
				this.cols.$rowIndex.widthValue = 0;
			}
			this.cols.$rowIndex.groupHead.style.width = this.cols.$rowIndex.groupBody.style.width = this.cols.$rowIndex.widthValue + "px";
		}
	},
	fitToWidth: function(autoFit) {
		if (this.records && this.records.length) {
			var first = this.records[0];
			var s = first.menusBags && first.menusBags.length > 0 ? first.menusBags[0].$$item[0].clientWidth : 0;
			var currentSize = s;
			if (first.menuItems) {
				var item = Object.keys(first.menuItems);
				for (var j = 0; j < item.length; j++) {
					s = first.menuItems && first.menuItems.length > 0 ? first.menuItems[item[j]][0].$$item[0].clientWidth : 0;
					currentSize += s;
				}
			}
			var colSize = {};
			if (currentSize) {
				colSize['$menusBox'] = this.page.isFusionPage ? currentSize : currentSize / 2;
			}
			for (var i = 0; i < this.records.length; i++) {
				// get all field and 

				var record = this.records[i];
				// calcul for menusBags 
				var keys = Object.keys(record.idMap);
				for (var j = 0; j < keys.length; j++) {

					var item = record.idMap[keys[j]];
					if (item.$field) {
						if (item.fieldValue) {
							if (colSize[item.$item.$bind]) {
								// get the max
								colSize[item.$item.$bind] = Math.max(item.fieldValue.scrollWidth, colSize[item.$item.$bind]);
							} else
								colSize[item.$item.$bind] = item.fieldValue.scrollWidth;
						}
					} else {
						if (!colSize[item.$item.$bind])
							colSize[item.$item.$bind] = -1; // not change size 
					}
				}
			}
			// check if we need to apply fit to width
			var colKey = Object.keys(this.cols);
			var isSame = true;
			if (Object.keys(this.prevCols).length != 0) {
				for (var i = 0; i < colKey.length && isSame; i++) {
					if (colSize[colKey[i]] && this.cols[colKey[i]]) {
						isSame = colSize[colKey[i]] === this.cols[colKey[i]].widthValue;
					}
				}
			} else {
				isSame = false; // not same 
			}

			// parcours colsgroupe for header and body and resize 
			for (var i = 0; i < colKey.length; i++) {
				var col = this.cols[colKey[i]];
				var size;
				if (isSame && !autoFit) {
					if (this.prevCols[colKey[i]]) {
						size = this.prevCols[colKey[i]].widthValue; // affect last value 
					}
				} else {
					size = colSize[colKey[i]];
				}
				if (col && colSize[colKey[i]] !== -1 && size) {
					col.groupHead.style.width = size + "px";
					col.groupBody.style.width = size + "px";
					if (!isSame && !autoFit) { // if we apply redim to width we need to save old value
						this.prevCols[colKey[i]] = {
							widthValue: col.widthValue, // save prev value before apply fit to Width
						};
					}
					col.realWidth = col.widthValue = size;
				}
			}
		}
	},
	findEventCol: function(event) {
		var target = event.target;
		while (!target.syraFieldBind) {
			target = target.parentNode;
		};
		return this.cols[target.syraFieldBind];
	},
	isDraggable: function(target, event) {
		if (target.syraResizerColId == this.id) {
			document.site.ddManager.dropableItem = {
				list: this,
				resizedCol: this.findEventCol(event)
			};
			document.site.ddManager.start(this, ColResizerDDAgent, this.titleRow);
			event.syraRetValue = false;
			return;
		} else {
			if (target.syraReorderColId == this.id) {
				document.site.ddManager.dropableItem = {
					list: this,
					reordeCol: this.findEventCol(event)
				};
				document.site.ddManager.start(this, ColReorderDDAgent, this.titleRow);
				event.syraRetValue = false;
				return;
			} else {
				if (this.addSlotResizer(target, event)) {
					return;
				} else {
					return this.isReorderRecordDraggable(target, event);
				}
			}
		}
		return null;
	},

	applyDesignMetaData: function(metaData, designing) {
		MultiList.prototype.applyDesignMetaData.call(this, metaData, designing);
		var resize;
		if (metaData.$isTitleRowHidden !== undefined) {
			this.$item.$isTitleRowHidden = metaData.$isTitleRowHidden;
			if (this.titleRow) {
				this.titleRow.style.display = this.$item.$isTitleRowHidden ? "none" : "";
				resize = true;
			}
		}
		if ((metaData.$fixedBodyHeight !== undefined) || (metaData.$fitContainer !== undefined) ||
			(metaData.$isDockedHeight !== undefined)) {
			if (metaData.$isDockedHeight !== undefined) {
				this.$isDockedHeight = metaData.$isDockedHeight;
			}
			if (metaData.$fixedBodyHeight !== undefined) {
				this.$item.$fixedBodyHeight = metaData.$fixedBodyHeight;
			}
			if (metaData.$fitContainer !== undefined) {
				this.$item.$fitContainer = metaData.$fitContainer;
			}
			if (this.scroller) {
				this.scroller.setFixedBodyHeight(this.$item.$fixedBodyHeight);
			}
			resize = true;
		}
		if (designing) {
			if (metaData.$cardPosition !== undefined) {
				resize = true;
				this.cardDecorator.applyDesignMetaData(metaData, designing);
			}
		}
		if (this.graphDecorator) {
			this.graphDecorator.applyDesignMetaData(metaData, designing);
		}
		if (resize) {
			if (this.scroller) {
				this.scroller.validateFixedColumns();
			}
		}
		this.pagging.applyMetadata(metaData, designing);
	},
	applyMetaDataRecords: function($metaRecord) {
		if ($metaRecord && $metaRecord.$properties) {
			var $binds = Object.keys($metaRecord.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $metaField = $metaRecord.$properties[$bind];
				var col = this.cols[$bind];
				if (col) {
					if ($metaField.$title !== undefined) {
						this._setColumnTitle(col, $metaField.$title);
					}
					if ($metaField.$isHidden !== undefined) {
						var display = (col.$isHidden = $metaField.$isHidden) ? "none" : "";
						var index = this.findColIndex(col);
						if (col.titleCell) {
							col.titleCell.style.display = display;
						}
						col.groupHead.style.display = col.groupBody.style.display = display;
						for (var mm = 0, kk = this.records.length; mm < kk; mm++) {
							var record = this.records[mm];
							record.dataRow.childNodes[index].style.display = display;
						}
						if (this.filterRecord) {
							this.filterRecord.dataRow.childNodes[index].style.display = display;
						}
					}
				}
			}
		}
	},
	validateQuickActionsDisplay: function($quickActionsEdit, $quickActionsMenu) {
		var col = this.cols.$menusBox;
		if (col) {
			col.widthValue = col.width = 0;
			if ($quickActionsEdit) {
				col.widthValue = col.width = 18;
			}
			if ($quickActionsMenu) {
				col.widthValue = (col.width += 22);
			}
			col.groupHead.style.width = col.groupBody.style.width = col.widthValue + "px";
		}
	},
	setFocus: function(select, name, $serverIndex) {
		if (this.popupCardBuilder && this.popupCardBuilder.isOpened() && this.selector.uuid != this.clientDataset[$serverIndex].$uuid) {
			this.selector.select(this.clientDataset[$serverIndex].$uuid, true);
		}
		return MultiList.prototype.setFocus.call(this, select, name, $serverIndex);
	},
	dispose: function() {
		if (this.cardDecorator) {
			this.cardDecorator.dispose();
		}
		if (this.popupCardBuilder) {
			this.popupCardBuilder.dispose();
		}
		if (this.filterRecord) {
			this.removeRecord(this.filterRecord, true);
			this.filterRecord = null;
		}
		if (this.scroller) {
			this.scroller.dispose();
		}
		this.body = this.bodyColgroup = this.bodyTable = this._headTable = this._thead = null;
		this._headColgroup = this.cols = this.gridCss = this.orderCols = this.titleRow = this.prevCols = null;
		this.cardDecorator = this.popupCardBuilder = this.emptyData = this.scroller = this.$colBinds = null;
		MultiList.prototype.dispose.call(this);
	}
});