"use strict";
var helpers = require('syracuse-core/lib/helpers');
function ColResizer(){
}

exports.ColResizer = helpers.defineClass(ColResizer, null, {
    setResizable: function(builder){
        var self = this;
        self.id = helpers.uuid.generate();
        self.builder = builder;
        self.isEnabled = true;
        self.cursor = "default";
        
        $(self.builder.titleRow).delegate("th[data-s-field-item]", "mousedown." + self.id, function(event){
            self.$$targetCell = $(event.target);
            if (self.isEnabled && (self.isLeft || self.isRight)) {
                return !self._startResize();
            }
            else {
                var offset = self.$$targetCell.offset();
                self.startPosition = {
                    top: offset.top - event.pageY,
                    left: offset.left - event.pageX,
                };
                self.boundary = document.site.$$body.offset();
                self.boundary.right = self.boundary.left + document.site.$$body.width();
                self.boundary.bottom = self.boundary.top + document.site.$$body.height();
                self._startDrag();
            }
            return false;
        }).delegate("th[data-s-field-item]", "mousemove." + self.id, function(event){
            self.$$targetCell = $(event.target);
            if (self.isEnabled) {
                if (self.resizing) {
                    self.onResize(event);
                    return false;
                }
                else {
                    var offset = self.$$targetCell.offset();
                    self.left = offset.left;
                    self.top = offset.top;
                    self.width = self.$$targetCell.outerWidth();
                    self.height = self.$$targetCell.outerHeight();
                    self.right = self.left + self.width;
                    self.bottom = self.top + self.height;
                    self.isLeft = (event.pageX >= self.left) && (event.pageX <= (self.left + 5));
                    self.isRight = (event.pageX <= self.right) && (event.pageX >= (self.right - 5));
                    self.cursor = "default";
                    if (self.isLeft) {
                        self.cursor = "w-resize";
                    }
                    else 
                        if (self.isRight) {
                            self.cursor = "e-resize";
                        }
                }
            }
            self.$$targetCell[0].style.cursor = self.cursor;
        });
        // self.options.dragSpot.style.cursor = "move";
        //  self.$$resizerSpot[0].style.cursor = "default";
    },
    _startDrag: function(){
        var self = this;
        $(document).bind("mouseup." + self.id, function(){
            $(document).unbind("." + self.id);
            delete document.site.DDAuthoring;
        }).bind("mousemove." + self.id, function(event){
            var position = {
                top: (self.startPosition.top + event.pageY),
                left: (self.startPosition.left + event.pageX)
            };
            self.options.slot.style.top = position.top + "px";
            self.options.slot.style.left = position.left + "px";
            if (self.options.source) {
                self.options.source.draggedPosition = position;
            }
            event.preventDefault();
            return false;
        });
    },
    _startResize: function(){
        var self = this;
        self.resizing = true;
        self.prevDocumentCursor = document.site.body.style.cursor;
        document.site.body.style.cursor = self.cursor;
        self.minWidth = 30;
        $(document).bind("mouseup." + self.id, function(event){
            $(document).unbind("." + self.id);
            self.resizing = false;
            document.site.body.style.cursor = self.prevDocumentCursor;
            event.preventDefault();
            return false;
        }).bind("mousemove." + self.id, function(event){
            self.onResize(event);
            event.preventDefault();
        });
        return true;
    },
    onResize: function(event){
        var width;
        var style = this.options.slot.style;
        
        if (this.isLeft) {
            width = this.right - event.pageX;
            if (width >= this.minWidth) {
                style.width = width + "px";
            }
        }
        else {
            if (this.isRight) {
                width = event.pageX - this.left;
                if (width >= this.minWidth) {
                    style.width = width + "px";
                }
            }
        }
    },
    dispose: function(){
        if (this.builder) {
            $(this.builder.titleRow).undelegate("." + self.id);
        }
        $(document).unbind("." + this.id);
        this.$$targetCell = this.builder = null;
    }
});
