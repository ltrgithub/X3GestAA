"use strict";
var helpers = require('syracuse-core/lib/helpers');

function ColResizer() {}

exports.ColResizer = helpers.defineClass(ColResizer, null, {
	_findCol: function(event) {
		return this.builder.cols[$(event.target).closest("[data-s-field-item]")[0].getAttribute("data-s-field-item")];
	},
	setResizable: function(builder) {
		var self = this;
		self.id = helpers.uuid.generate();
		self.cursor = "default";
		self.builder = builder;
		self.$$row = $(self.builder.titleRow);
		self.$$row.delegate(".s-grid-title-resizer", "mousedown", function(event) {
			var col = self._findCol(event);
			if (!document.site.dragDropInstance && self.startX !== null && !self.drag) {
				self.resizedCol = col;
				self._startResize();
				event.preventDefault();
				return false;
			}
			return true;
		}).delegate(".s-grid-title-resizer", "mousemove", function(event) {
			if (!self.drag) {
				if (self.resizedCol) {
					self.onResize(event);
					return false;
				}
				var col = self._findCol(event);
				var $$titleCell = $(col.titleCell);
				var offset = $$titleCell.offset();
				self.left = offset.left;
				self.top = offset.top;
				self.height = $$titleCell.outerHeight();
				self.right = self.left + $$titleCell.outerWidth(true);
				self.bottom = self.top + self.height;
				self.startX = event.pageX;
				col.resizer.style.cursor = self.cursor = "e-resize";
			}
		}).delegate("th[data-s-field-item]", "mousedown", function(event) {
			if (!self.drag) {
				self._startDrag(event);
			}
			event.preventDefault();
			return false;
		}).delegate("th[data-s-field-item]", "mouseenter mouseleave", function(event) {
			if (self.drag) {
				if (event.type == "mouseenter") {
					self.drag.target = self._findCol(event);
					self.drag.targetX = $(self.drag.target.titleCell).offset().left - 4; //4 cue width /2
					if (self.builder.orderCols[self.builder.orderCols.length - 1] == self.drag.target) {
						self.drag.lastColBoundaryX = self.drag.targetX + self.drag.target.realWidth / 2;
					}
					self.drag.cueTop.style.left = self.drag.cueBottom.style.left = self.drag.targetX + "px";
					self.drag.cueTop.style.display = self.drag.cueBottom.style.display = "";
				} else {
					if (self.drag.target == self._findCol(event)) {
						self.drag.target = null
						delete self.drag.lastColBoundaryX;
						self.drag.cueTop.style.display = self.drag.cueBottom.style.display = "none";
					}
				}
				document.site.toggleClass(self.drag.info, "s-drag-ok", self.drag.target != null);
			}
			event.preventDefault();
			return false;
		});
	},

	autoScroll: function(event) {
		var self = this;
		var step = 40,
			margin = 80;
		if (self.autoScrolTimeout) {
			clearTimeout(self.autoScrolTimeout);
		}
		self.autoScrolTimeout = setTimeout(function() {
			if (event.pageY > (self.scrollBoundary.bottom - margin)) {
				var scrollTop = self.scrollBoundary.$$vscroller.scrollTop();
				if (scrollTop < (self.scrollBoundary.scrollHeight - self.scrollBoundary.height)) {
					self.scrollBoundary.$$vscroller.scrollTop(Math.min(scrollTop + step, self.scrollBoundary.scrollHeight - self.scrollBoundary.height));
				}
			} else {
				if (event.pageY < (self.scrollBoundary.top + margin)) {
					var scrollTop = self.scrollBoundary.$$vscroller.scrollTop();
					self.scrollBoundary.$$vscroller.scrollTop(Math.max(scrollTop - step, 0));
				}
			}
			if (event.pageX > (self.scrollBoundary.right - margin)) {
				var scrollLeft = self.scrollBoundary.$$hscroller.scrollLeft();
				if (scrollLeft < (self.scrollBoundary.scrollWidth - self.scrollBoundary.width)) {
					self.scrollBoundary.$$hscroller.scrollLeft(Math.min(scrollLeft + step, self.scrollBoundary.scrollWidth - self.scrollBoundary.width));
				}
			} else {
				if (event.pageX < (self.scrollBoundary.left + margin)) {
					var scrollLeft = self.scrollBoundary.$$hscroller.scrollLeft();
					self.scrollBoundary.$$hscroller.scrollLeft(Math.max(scrollLeft - step, 0));
				}
			}
		}, 10);
	},
	_startDrag: function(event) {
		var self = this;
		var col = self._findCol(event);
		var offset = $(col.titleCell).offset();
		self.drag = {
			source: col,
			top: offset.top - event.pageY,
			left: offset.left - event.pageX,
			boundary: self.$$row.offset(),
			info: document.createElement("div"),
			cueTop: document.createElement("div"),
			cueBottom: document.createElement("div")
		};
		self.scrollBoundary = self.builder.scroller.getScrollBoundary();
		self.drag.boundary.right = self.drag.boundary.left + self.$$row.width();
		self.drag.boundary.bottom = self.drag.boundary.top + self.$$row.height();
		self.drag.info.className = "s-grid-drag-image";
		document.site.layoutSlot.appendChild(self.drag.info);
		self.drag.cueTop.style.display = "none";
		self.drag.cueBottom.style.display = "none";
		self.drag.cueTop.className = "s-grid-drop-cue-top";
		self.drag.cueTop.style.top = (self.drag.boundary.top - 9) + "px";
		self.drag.cueBottom.style.top = self.drag.boundary.bottom + "px";
		document.site.layoutSlot.appendChild(self.drag.cueTop);
		self.drag.cueBottom.className = "s-grid-drop-cue-bottom";
		document.site.layoutSlot.appendChild(self.drag.cueBottom);

		self.drag.info.textContent = col.title.textContent;

		$(document).bind("mouseup." + self.id, function(event) {
			$(document).unbind("." + self.id);
			var target = self.drag ? self.drag.target : null;
			document.site.removeDomChild(self.drag.info);
			document.site.removeDomChild(self.drag.cueTop);
			document.site.removeDomChild(self.drag.cueBottom);
			if (target && self.drag) {
				self.builder.reorderColumns(self.drag.source, target, self.drag.dropAtEnd);
			}
			delete self.drag;
			event.preventDefault();
			return false;
		}).bind("mousemove." + self.id, function(event) {
			self.autoScroll(event);
			var top = Math.max(event.pageY, self.drag.boundary.top);
			var left = Math.max(event.pageX, self.drag.boundary.left);
			var inBoundary = (event.pageX == left && event.pageY == top);
			self.drag.info.style.top = top + 15 + "px";
			self.drag.info.style.left = left + 15 + "px";
			if (self.drag.lastColBoundaryX) {
				if (event.pageX > self.drag.lastColBoundaryX) {
					if (!self.drag.dropAtEnd) {
						self.drag.cueBottom.style.left = self.drag.cueTop.style.left = (self.drag.targetX + self.drag.target.realWidth) + "px";
						self.drag.dropAtEnd = true;
					}
				} else {
					if (self.drag.dropAtEnd) {
						self.drag.cueBottom.style.left = self.drag.cueTop.style.left = self.drag.targetX + "px";
						self.drag.dropAtEnd = false;
					}
				}
			}

			event.preventDefault();
			//return false;
		});
	},
	_startResize: function() {
		var self = this;
		delete self.rightResizedCol;
		document.site.setDragDropInstance(self);
		if (self.builder.scroller.isProportionalWidth) {
			var resizedColIndex;
			for (var ii = 0, jj = this.builder.orderCols.length; ii < jj; ii++) {
				var col = this.builder.orderCols[ii];
				if (col.realWidth !== undefined) {
					col.widthValue = col.realWidth;
				}
				if (col == self.resizedCol) {
					resizedColIndex = ii;
				}
			}
			if (resizedColIndex != undefined) {
				if ((resizedColIndex + 1) < self.builder.orderCols.length) {
					self.rightResizedCol = self.builder.orderCols[resizedColIndex + 1];
					self.rightResizedCol.widthValue = $(self.rightResizedCol.titleCell).width();
				}
			}
		}
		$(document).bind("mouseup." + self.id, function(event) {
			$(document).unbind("." + self.id);
			self.resizedCol.widthValue = self.newWidth;
			self.builder.onColumnResized(self.resizedCol);
			self.startX = self.resizedCol = null;
			self.builder.onWindowResize();
			document.site.body.style.cursor = "default";
			document.site.setDragDropInstance();
			event.preventDefault();
			return false;
		}).bind("mousemove." + self.id, function(event) {
			self.onResize(event);
			event.preventDefault();
		});
		return true;
	},
	onResize: function(event) {
		var cursor = "not-allowed";
		if ((event.pageY >= this.top) && (event.pageY <= this.bottom)) {
			var newWidth = this.resizedCol.realWidth + (event.pageX - this.startX);
			if (newWidth > 50) {
				this.resizedCol.groupHead.style.width = this.resizedCol.groupBody.style.width = (this.newWidth = newWidth) + "px";
				if (this.rightResizedCol) {
					this.rightResizedCol.groupHead.style.width = this.rightResizedCol.groupBody.style.width = (this.rightResizedCol.widthValue = this.rightResizedCol.realWidth - (event.pageX - this.startX)) + "px";
				}
				cursor = "e-resize";
			}
		}
		document.site.body.style.cursor = cursor;
	},
	dispose: function() {
		if (this.$$row) {
			this.$$row.undelegate();
		}
		$(document).unbind("." + this.id);
		this.builder = this.$$row = this.resizedCol = this.rightResizedCol = this.drag = null;
	}
});