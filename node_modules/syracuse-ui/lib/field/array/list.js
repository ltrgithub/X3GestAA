"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

var Field = require('syracuse-ui/lib/field/field').Field;
var FieldHelper = require('syracuse-ui/lib/field/fieldHelper');
var GridBuilder = require("./gridBuilder/gridBuilder").GridBuilder;
var SingleBuilder = require("./singleBuilder/singleBuilder").SingleBuilder;
var CardsBuilder = require("./cardsBuilder/cardsBuilder").CardsBuilder;
var PagingCapability = require("./capability/pagingCapability").PagingCapability;
var SortCapability = require("./capability/sortCapability").SortCapability;
var FilterCapability = require("./capability/filterCapability").FilterCapability;
var ArrayAuthoring = require("syracuse-ui/lib/authoring/field/arrayAuthoring").ArrayAuthoring;

//$isNodeLazyLoad
var TreeList = require("./tree/treeList").TreeList;
var listHelper = require("./listHelper");

function DesktopList(){
}

exports.DesktopList = helpers.defineClass(DesktopList, Article, {
    ensureDataSet: function(){
        return this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || [];
    },
    getAuthoringWidget: function(designedField){
        if (!this.awAddin && !this.builder.isSingleBuilder) {
            this.awAddin = new ArrayAuthoring();
            this.awAddin.create(designedField);
        }
        return this.awAddin;
    },
    ensureLayoutMode: function(){
        Field.prototype.ensureLayoutMode.call(this);
    },
    loadBox: function(initData){
        this.helper = listHelper;
        this.articleParent = this.getArticleParent();
        document.site.addResizeListener(this);
        if (this.page.$facet == "$lookup") {
            this.isLookupList = true;
            this.page.lookupList = this;
        }
        Article.prototype.loadBox.call(this, initData);
        this.articleParent.bind(this, this.$item.$bind);
        if (document.site.developpementMode) {
            FieldHelper.appendQualityAtt(this, this._domItem);
        }
        if (this.records.length == 0) {
            this.builder.emptyBody(true, this.page.$autoFetch !== false);
        }
    },
    selectServerFilter: function(filterId){
        if (this.serverFilters) {
            if (this.serverFilters.selected) {
                document.site.toggleClass(this.serverFilters.selected.mn, "s-selected", false);
                delete this.serverFilters.selected;
            }
            if (filterId === null || filterId === "null") {
                filterId = "$noFilters";
                this.serverFilters.selected = this.menuItems[this.serverFilters.menus.id + "-" + filterId][0];
                document.site.toggleClass(this.serverFilters.selected.mn, "s-selected", true);
            }
        }
    },
    showDiagnoses: function(diagnoses, options){
        Field.prototype.showDiagnoses.call(this, diagnoses, options);
    },
    drawBox: function(){
        this.arrayLevel = "array";
        this.isRecordDataset = true; //!important for sendBag
        this._isAddDisabled = false;
        this.records = [];
        this.recordsMap = {};
        
        this.sortCapability = new SortCapability(this);
        this.pagingCapability = new PagingCapability(this);
        this.filterCapability = new FilterCapability(this);
        this.createBuilder();
        
        this.$fieldProperties = this.$prototype.$item.$properties || {};
        this.filterCapability.validateIsQuickFilter();
        
        this.$recordFacet = this.articleParent.$item.$recordFacet || this.$facet || "$details";
        switch (this.articleParent.$facet) {
            case "$query":
                if (this.page.$prototype.$url && this.page.$prototype.$url.indexOf("employees") >= 0) {
                    this.page.$prototype.$filters = this.page.$prototype.$filters ||
                    {
                        filter1: {
                            $title: "filter Server Test 1"
                        },
                        filter2: {
                            $title: "filter Server Test 2"
                        }
                    };
                }
                if (this.page.$prototype.$filters) {
                    if (this.page.menuBar) {
                        this.serverFilters = {
                            menus: this.page.loadNewItem(this.page.menuBar._body, {
                                $category: "menus",
                                $isMenuFilters: true,
                                $skin: "s-mn-bar-filters",
                                $title: this.localize.flFilters
                            }, this)
                        };
                        this.serverFilters.menus._ensurePrivateMenus({
                            $filters: {
                                $noFilters: {
                                    $title: this.localize.flNoFilter
                                }
                            }
                        }, "$filters");
                        this.serverFilters.noFilters = this.menuItems[this.serverFilters.menus.id + "-$noFilters"][0];
                        this.serverFilters.noFilters.setStyle("nofilter");
                        this.serverFilters.menus._ensurePrivateMenus(this.page.$prototype, "$filters");
                        if (this.$urlParams && this.$urlParams.filter) {
                            this.selectServerFilter(this.$urlParams.filter);
                        }
                    }
                }
                break;
            case "$bulk":
            case "$search":
                break;
            case "$lookup":
                this.$item.$selectMode = "button";
                this.$item.$fitContainer = true;
                this._$$fitContainer = $(this.page._body);
                break;
            case "$select":
                this.$item.$selectMode = "multi";
                break;
            default:
                this.isClientFetch = this.isClientFetch !== false;
                break;
        }
        
        if (this.$prototype.$treeview) {
            (this.treeList = new TreeList()).load(this);
        }
        
        if ((this.$isEditMode = this.$item.$isEditMode) === undefined) {
            this.$isEditMode = this.articleParent.$isEditMode;
        }
        this.applyCapabilitiesSettings(this.$prototype);
        
        if (!this.$item.$layout) {
            this.$item.$layout = {};
        }
        if (!this.$item.$layout.$items) {
            this.$item.$layout.$items = [];
            var $binds = Object.keys(this.$fieldProperties);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                if (!this.$fieldProperties[$binds[ii]].$isExcluded) {
                    this.$item.$layout.$items.push({
                        $bind: $binds[ii]
                    });
                }
            }
        }
        if (this.$prototype.$cube) {
            if ((this.$item.$graphMode = this.$item.$graphMode || "both") == "both") {
                if (this.$item.$graphPosition === undefined) {
                    this.$item.$graphPosition = "tab";
                    this.$item.$isGraphTabVisible = true;
                }
            }
        }
        
        this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
            this.inputId = this.id + "-input";
        }
        Field.prototype._initCss.call(this);
        
        this._domItem = document.createElement("div");
        this._domItem.className = this._$cssTopField;
        this.$$item = $(this.layoutSlot.appendChild(this._domItem));
        
        this.appendTitle();
        
        this._createValueContainer();
        
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setState(this.$field);
        this.setEditMode(this.$field);
        
        this.fieldValue.className += " s-list";
        
        this._topbar = document.createElement("div");
        this._topbar.className = "s-list-topbar";
        this.fieldValue.appendChild(this._topbar);
        
        this._core = document.createElement("div");
        this._core.className = "s-list-core";
        this.fieldValue.appendChild(this._core);
        
        if (this.$item.$isQuickDesignerEnabled !== false) {
            this.appendAuthoringPicker();
        }
        this._menusSlot = document.createElement("div");
        this._menusSlot.className = "s-list-menus-cell";
        if (this.$item.$isPopupMenuHidden) {
            this._menusSlot.style.display = "none";
        }
        this._topbar.appendChild(this._menusSlot);
        
        this.builder.drawBuilder();
        this.ensureLayoutMode();
    },
    onClickPicker: function(btn){
        if (!this.authoringNode && !this.$isDisabled) {
            switch (btn.getAttribute("data-s-picker")) {
                case "authoring":
                    document.site.openAuthoringPage(true, this);
                    return false;
            }
        }
        return true;
    },
    appendAuthoringPicker: function(){
        if (!this._awPicker) {
            this._awPicker = document.createElement("a");
            this._awPicker.className = "s-list-quick-designer";
            this._awPicker.setAttribute("data-s-picker", "authoring");
            this._awPicker.setAttribute("data-s-article", this.articleParent.id);
            this._awPicker.setAttribute("data-s-field", this.id);
            this._awPicker.setAttribute("href", "#");
            var cell = document.createElement("div");
            cell.className = "s-list-quick-designer-cell";
            cell.appendChild(this._awPicker);
            $(cell).prependTo(this._topbar);
        }
    },
    ensureArticleId: function(){
        this._topbar.setAttribute("data-s-article", this.id);
        this._core.setAttribute("data-s-article", this.id);
    },
    applyCapabilitiesSettings: function(newData){
        this.pagingCapability.setOptions(newData);
        this.sortCapability.setOrderBy(newData.$orderBy, newData.$startLetter);
        this.filterCapability.setWhere(newData.$where);
    },
    setSortCapability: function(){
        this.sortCapability.load();
    },
    onWindowResize: function(){
        if (this.builder && this.builder.onWindowResize) {
            this.builder.onWindowResize();
        }
        if (this.graphDecorator && this.graphDecorator.onWindowResize) {
            this.graphDecorator.onWindowResize();
        }
    },
    _createValueContainer: function(){
        this.domValueSlot = document.createElement("article");
        this.domValueSlot.className = this._$cssField + "-value";
        this._dataValue = this._core = this.fieldValue = this.domValueSlot;
        this.$$dataValue = $(this.domValueSlot);
        this._domItem.appendChild(this.domValueSlot);
    },
    fetch: function(options, $location){
        var self = this;
        var params = {
            where: self.filterCapability.$where,
            select: self.$select
        };
        if (options) {
            if (options.$filters) {
                if (options.$filters == "$noFilters") {
                    params.filter = "null";
                }
                else {
                    params.filter = options.$filters;
                }
                this.selectServerFilter(params.filter);
            }
            params.startLetter = options.startLetter;
            params.startIndex = options.startIndex;
            this.pagingCapability.setOptions({
                $itemsPerPage: options.$itemsPerPage
            });
            params.count = this.pagingCapability._$itemsPerPage;
            if (options.orderBy) {
                params.startIndex = 1;
                self.sortCapability.setOrderBy(options.orderBy, options.startLetter);
            }
            if (options.filter != null) {
                params.startIndex = 1;
                params.where = self.filterCapability.$where = options.filter != "" ? options.filter : null;
            }
            if (options.queryBindings) {
                if (options.queryBindings.length == 0) {
                    Object.keys(self.$fieldProperties).forEach(function($bind){
                        options.queryBindings.push(self.$fieldProperties.$bind || $bind);
                    });
                }
                self.select = options.queryBindings.map(function(binding){
                    return binding.replace(/\./g, '/');
                }).join(',');
            }
        }
        params.orderBy = self.sortCapability.stringify();
        var fetchOptions = {
            params: params
        };
        if (self.isClientFetch || self.isClientSortEnable) {
            listHelper.fetchClientRecordSet(self, fetchOptions);
        }
        else {
            fetchOptions.field = self;
            fetchOptions.$updateHitory = self.page.isMainPage;
            fetchOptions.$location = $location;
            self.articleParent.fetch(fetchOptions);
        }
        if (self.articleParent.onFetchHandler) {
            self.articleParent.onFetchHandler(fetchOptions);
        }
    },
    
    setHelp: function($help){
        Field.prototype.setHelp.call(this, $help);
    },
    setDescription: function($description){
        Field.prototype.setDescription.call(this, $description);
    },
    hideTitle: function($isTitleHidden){
        Field.prototype.hideTitle.call(this, $isTitleHidden);
    },
    getDefaultTitle: function(){
        return this.localize.flDefaultTitle;
    },
    getTitle: function(){
        return Field.prototype.getTitle.call(this);
    },
    setTitle: function($title){
        Field.prototype.setTitle.call(this, $title);
        if (this.domTitle) {
            this.domTitle.style.display = this.getTitle().length == 0 ? "none" : "";
        }
    },
    getLocalizedTitle: function($title){
        if ($title && $title.length > 0 && $title[1] == "@") {
            return this.parseExpression($title);
        }
        return $title;
    },
    appendTitle: function(){
        if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
            Field.prototype.appendTitle.call(this);
            this.domTitle.style.display = "none";
        }
    },
    releaseMode: function(onDispose){
        if (this.menusBox) {
            document.controller.disposeObject(this.menusBox);
        }
        this.menusBox = null;
        document.controller.disposeObject(this.builder);
        document.site.emptyDom(this._core);
        if (this.serverFilters) {
            this.serverFilters.selected = this.serverFilters.noFilters = null;
        }
        this.serverFilters = this.builder = this.domTitle = this._mandatoryFlag = this._description = this._helpFlag = null;
    },
    toggleDiagnose: function(css, show){
    },
    drawDiagnose: function($diagnose, severityGroup){
        Field.prototype.drawDiagnose.call(this, $diagnose, severityGroup);
    },
    setMenus: function($menus){
        if ($menus) {
            //important copy allow multi binding
            this.applyActionLinkChange({
                $links: $menus.$links,
                $actions: $menus.$actions
            });
        }
    },
    onAddMenuItem: function($menu){
        switch ($menu.$bind) {
            case "$first":
            case "$previous":
            case "$next":
            case "$last":
                return false;
        }
        return true;
    },
    onMenuDataFilled: function(menuItem){
        if (menuItem.boxParent.isMenuGroup) {
            var menuGroupRoot = menuItem.boxParent.menuGroupRoot;
            if (menuGroupRoot.id == (this.id + "-menu-picker")) {
                if (!menuGroupRoot.$isPickerVisible && !menuGroupRoot.$item.$isMenuFilters) {
                    this._menusSlot.style.display = "";
                    menuGroupRoot.$isPickerVisible = true;
                }
                if (!menuItem.$item.$isTop && !menuGroupRoot.isAddinMenus) {
                    menuGroupRoot.isAddinMenus = true;
                    menuGroupRoot.layoutContent.items[0].layoutSlot.className += " s-record-menus-addins";
                }
            }
        }
    },
    _createMenusBox: function(){
        this.menusBox = this.page.loadNewItem(this._menusSlot, {
            $isMenusBag: true,
            $category: "menus",
            $noText: true,
            $title: this.localize.flActions,
            $isTitlePicker: true,
            $isBoxCollapsable: true,
            $isPopupContent: true,
            $id: this.id + "-menu-picker",
            $skin: "s-list-menus",
            $itemSkin: "s-record-menus-link",
            $layout: {
                $items: [{
                    $layoutType: "stack",
                    $items: [{
                        $bind: "$create",
                        $isTop: true,
                        $icon: {
                            $mode: "iconText",
                            $isTop: true,
                            $path: "site/s-list-popup-"
                        }
                    }, {
                        $bind: "$select",
                        $isTop: true,
                        $icon: {
                            $mode: "iconText",
                            $isTop: true,
                            $path: "site/s-list-popup-"
                        }
                    }, {
                        $bind: "$delete",
                        $isTop: true,
                        $icon: {
                            $mode: "iconText",
                            $isTop: true,
                            $path: "site/s-list-popup-"
                        }
                    }]
                }]
            }
        }, this);
        this.menusBox.contextField = this;
    },
    applyActionLinkChange: function(resources){
        if (!this.menusBox && resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            this._createMenusBox();
        }
        Article.prototype.applyActionLinkChange.call(this, resources);
    },
    createBuilder: function(){
        if (!this.$field.$item.$properties || this.$field.$item.$type == "application/x-reference") {
            this.builder = new SingleBuilder();
        }
        else {
            if ((this.$item.$format = this.$item.$format || "grid") == "cards") {
                this.builder = new CardsBuilder();
            }
            else {
                this.builder = new GridBuilder();
            }
        }
        this.builder.list = this;
        this.builder.initialize();
    },
    fitToWidth: function(){
        var isFusion = document.site.mainPage && document.site.mainPage.$pageCategory === "fusion";
        
        function getDisplayValueInput(inputField){
            if (inputField.$enum) { // not a string 
                var found = null;
                for (var i = 0; i < inputField.$enum.length && !found; i++) {
                    if (inputField.$enum[i].$value === inputField.currentValue) {
                        found = inputField.$enum[i].$title;
                    }
                }
                if (found) 
                    return found;
                return "";
            }
            else 
                if (typeof inputField.currentValue === "object") {
                    // not a simple string 
                    return inputField.currentValue.$value + " " + inputField.currentValue.$title;
                }
                else 
                    if (typeof inputField.currentValue === "string") {
                        return inputField.currentValue;
                    }
                    else {
                        return "";
                    }
        }
        var div = document.createElement("div");
        
        function getWidthOfInput(inputEl){
            var tmp = document.createElement("span");
            tmp.className = "input-element tmp-element";
            var value = getDisplayValueInput(inputEl);
            tmp.innerHTML = value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            div.appendChild(tmp);
            var theWidth = (tmp.scrollWidth !== 0 ? tmp.scrollWidth : tmp.offsetWidth) + 20;
            theWidth = theWidth < 30 ? 30 : theWidth;
            theWidth += inputEl.boxPickers ? inputEl.boxPickers.clientWidth : 0;
            theWidth += inputEl.menusBox ? inputEl.menusBox.$$item[0].clientWidth : 0;
            return theWidth;
        }
        
        if (this.records && this.records.length) {
            var first = this.records[0];
            var s = first.menusBags && first.menusBags.length > 0 ? first.menusBags[0].$$item[0].clientWidth : 0;
            var currentSize = s;
            if (first.menuItems) {
                var item = Object.keys(first.menuItems);
                for (var j = 0; j < item.length; j++) {
                    s = first.menuItems && first.menuItems.length > 0 ? first.menuItems[item[j]][0].$$item[0].clientWidth : 0;
                    currentSize += s;
                }
            }
            
            var colSize = {};
            if (currentSize) {
                colSize['$menusBox'] = isFusion ? currentSize : currentSize / 2;
            }
            document.body.appendChild(div);
            for (var i = 0; i < this.records.length; i++) {
                // get all field and 
                
                var record = this.records[i];
                // calcul for menusBags 
                var keys = Object.keys(record.idMap);
                for (var j = 0; j < keys.length; j++) {
                
                    var item = record.idMap[keys[j]];
                    if (item instanceof Field) {
                        if (colSize[item.$item.$bind]) {
                            // get the max
                            colSize[item.$item.$bind] = Math.max(getWidthOfInput(item), colSize[item.$item.$bind]);
                        }
                        else 
                            colSize[item.$item.$bind] = getWidthOfInput(item);
                    }
                    else {
                        if (!colSize[item.$item.$bind]) 
                            colSize[item.$item.$bind] = -1; // not change size 
                    }
                }
            }
            document.body.removeChild(div);
            // check if we need to apply fit to width
            var colKey = Object.keys(this.builder.cols);
            var isSame = true;
            if (Object.keys(this.builder.prevCols).length != 0) {
                for (var i = 0; i < colKey.length && isSame; i++) {
                    if (colSize[colKey[i]] && this.builder.cols[colKey[i]]) {
                        isSame = colSize[colKey[i]] === this.builder.cols[colKey[i]].widthValue;
                    }
                }
            }
            else {
                isSame = false; // not same 
            }
            
            //
            // parcours colsgroupe for header and body and resize 
            for (var i = 0; i < colKey.length; i++) {
                var size;
                if (isSame) {
                    if (this.builder.prevCols[colKey[i]]) {
                        size = this.builder.prevCols[colKey[i]].widthValue; // affect last value 
                    }
                }
                else {
                    size = colSize[colKey[i]];
                }
                if (this.builder.cols[colKey[i]] && colSize[colKey[i]] !== -1 && size) {
                    this.builder.cols[colKey[i]].groupHead.style.width = size + "px";
                    this.builder.cols[colKey[i]].groupBody.style.width = size + "px";
                    if (!isSame) { // if we apply redim to width we need to save old value
                        this.builder.prevCols[colKey[i]] = {
                            widthValue: this.builder.cols[colKey[i]].widthValue, // save prev value before apply fit to Width
                        };
                    }
                    this.builder.cols[colKey[i]].widthValue = size;
                    this.builder.cols[colKey[i]].realWidth = size;
                }
            }
            this.builder.onWindowResize();
        }
    },
    reloadLayout: function($item){
        this.$item = $item;
        this.reloadBuilder(true);
    },
    reloadBuilder: function(fillData){
        document.controller.disposeObject(this.builder);
        document.site.emptyDom(this._core);
        this.createBuilder();
        this.builder.drawBuilder();
        if (fillData) {
            listHelper.fillList(this, this.ensureDataSet(), this.articleParent.dataset);
        }
    },
    setEditMode: function(state){
        if (state.$editMode !== undefined && this.$editMode != state.$editMode) {
            if (this.$editMode == "cell") {
                this._bindEditFieldEvents(false);
            }
            if ((this.$editMode = state.$editMode) == "cell") {
                this._bindEditFieldEvents(true);
            }
        }
    },
    _bindEditFieldEvents: function(bind){
        var self = this;
        if (bind) {
            self.$$item.delegate("[data-s-field]", "click.editmode", function(event){
                var $$target = $(event.currentTarget);
                var record = self.findRecord($$target);
                var field = record.idMap[$$target.attr("data-s-field")];
                self.page.externalAdapter.onFieldEvent({
                    field: field,
                    event: event,
                    doEvent: function(){
                        if (field && !field.$isEditMode) {
                            setTimeout(function(){
                                field.toggleEditMode();
                                field.focus();
                            }, 10);
                        }
                    }
                });
                event.stopPropagation();
            });
        }
        else {
            if (self.$$item) {
                self.$$item.undelegate("click.editmode");
            }
        }
    },
    applyFieldStyle: function(metaData){
        FieldHelper.applyFieldStyle(this, metaData);
    },
    toggleEditMode: function($isEditMode){
    },
    
    emptyDiagnoseSlot: function(){
        if (this.domDiagnose) {
            document.site.emptyDom(this.domDiagnose);
            this.domDiagnose.style.visibility = "hidden";
        }
    },
    ensureDiagnoseSlot: function(){
        if (!this.domDiagnose && this._dataValue) {
            this.domDiagnose = document.createElement("div");
            this.domDiagnose.className = "s-field-diagnose";
            this._dataValue.appendChild(this.domDiagnose);
        }
        else {
            document.site.emptyDom(this.domDiagnose);
        }
    },
    onMenuClick: function(menuItem){
        if (menuItem.$menuType == "$filters") {
            this.fetch({
                $filters: menuItem.$sourceBind
            });
            return false;
        }
        if (!menuItem.$isAction && menuItem.$bind == "$select") {
            listHelper.doSelectAction(this);
            return false;
        }
        return true;
    },
    onAfterNotifyDataChange: function(){
        this.onWindowResize();
    },
    onNotifyDataChange: function(field, value){
        if (field.$item.$bind == "$itemsPerPage") {
            this.pagingCapability.fetchItemPerPage(value);
        }
        return false;
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        if (this.records.length > 0) {
            if (state.$isReadOnly !== undefined || state.$isDisabled != undefined) {
                var metaData = {
                    $isReadOnly: state.$isReadOnly,
                    $isDisabled: state.$isDisabled
                };
                this.records.forEach(function(record, index){
                    state.$isDisabled;
                    record.applyMetaData(metaData);
                });
                if (this.$capability && state.$isDisabled !== undefined) {
                    for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
                        this.records[ii].setState(state);
                    }
                }
            }
        }
    },
    
    applyCapabilities: function(record){
        var $actions;
        if (record) {
            if (this.$capability.insert) {
                $actions = {
                    $create: {
                        $title: this.localize.flInsert
                    }
                };
            }
        }
        else {
            if (this.$capability.append) {
                $actions = {
                    $create: {
                        $title: this.localize.flAppend,
                        $isHidden: false
                    }
                };
            }
        }
        if (this.$capability["delete"]) {
            $actions = $actions || {};
            $actions.$delete = {
                $title: record ? this.localize.flDelete : this.localize.flDeleteAll,
                $isHidden: false
            };
        }
        if ($actions) {
            (record || this).applyActionLinkChange({
                $actions: $actions
            });
        }
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        return listHelper.applyDesignMetaData(this, metaData, onAuthoring);
    },
    applyMetaData: function(metaData){
        return listHelper.applyMetaData(this, metaData);
    },
    applyPartialDelta: function(dataRecordSet, firstIndex, lastIndex){
        listHelper.applyPartialDelta(this, dataRecordSet, firstIndex, lastIndex);
    },
    hasRecords: function(){
        return this.records && this.records.length > 0;
    },
    setDataBind: function(dataRecordSet, parentDataRecord, metaData){
        this.ensureDataSet();
        var redraw = false;
        if (metaData) {
            if (redraw = this.applyMetaData(metaData)) {
                this.onClientFetch = this.clientDataset != null;
                listHelper.fillList(this, this.clientDataset || this.ensureDataSet(), this.articleParent.dataset);
                this.onClientFetch = false;
            }
        }
        
        if (dataRecordSet !== undefined) {
            if (this.page.$isPartialDelta || (this.page.$isEditMode && this.hasRecords() && !this.builder.isSingleBuilder)) {
                listHelper.fillList(this, dataRecordSet, parentDataRecord, true);
            }
            else {
                listHelper.fillList(this, dataRecordSet, parentDataRecord);
            }
        }
        if (this.graphDecorator) {
            var graphRecords = [];
            for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
                graphRecords.push(this.records[ii].dataset);
            }
            this.graphDecorator.setDataBind(graphRecords, parentDataRecord, metaData);
        }
        if (this.isLookupList) {
            this.page.onFillLookupList();
        }
    },
    validate: function(){
        var isValidated = true;
        this.records.forEach(function(record){
            isValidated = record.validateFields();
        });
        return isValidated;
    },
    dispose: function(){
        if (this.isLookupList && this.page) {
            this.page.lookupList = null;
        }
        if (this.awAddin) {
            document.controller.disposeObject(this.awAddin);
        }
        document.site.removeResizeListener(this);
        if (this.treeList) {
            this.treeList.dispose();
        }
        if (this.reorderCapability) {
            document.controller.disposeObject(this.reorderCapability);
        }
        this._bindEditFieldEvents(false);
        if (this.menusBox) {
            document.controller.disposeObject(this.menusBox);
        }
        this.awAddin = this.clientDataset = this.emptyDataItem = this.helper = this.reorderCapability = null;
        this._menus = this.page = this.treeList = this.menusBox = null;
        Article.prototype.dispose.call(this);
    },
    
    setFocus: function(select, name, $serverIndex){
        var field;
        if (this.builder.cardBuilder && this.builder.cardBuilder.isPopupCardOpened()) {
            this.unSelectLines($serverIndex);
        }
        if ((field = this.getField(name, $serverIndex))) {
            return field.focus(select);
        }
        else {
            if (this.isClientFetch) {
                if (!listHelper.findRecordByServerIndex(this, $serverIndex)) {
                    this.pagingCapability.setPage($serverIndex);
                    if ((field = this.getField(name, $serverIndex))) {
                        return field.focus(select);
                    }
                }
            }
        }
        return false;
    },
    getDataValue: function(name, $serverIndex){
        var dataRecordSet = this.ensureDataSet();
        var field;
        if ($serverIndex !== undefined) {
            if (field = this.getField(name, $serverIndex)) {
                return field.getDataValue();
            }
            else {
                for (var ii = 0, jj = dataRecordSet.length; ii < jj; ii++) {
                    if (dataRecordSet[ii].$serverIndex == $serverIndex) {
                        var value = dataRecordSet[ii][name];
                        return value === undefined ? null : value;
                    }
                }
            }
        }
        return null;
    },
    
    getField: function(name, $serverIndex, select){
        var fields, record = listHelper.findRecordByServerIndex(this, $serverIndex);
        if (record && !record.disposed) {
            if ((fields = record.boundFields[name]) && fields.length > 0) {
                return this.builder.cardBuilder.findPopupField(name, record) || fields[0];
            }
        }
        return null;
    },
    getSelectedRecordIndexes: function(){
        var result = [], ir = -1, r = {};
        this.dataset.filter(function(elt, idx){
            return elt.$isSelected;
        }).forEach(function(elt, idx){
            if (!result[ir] || result[ir].start + result[ir].count != elt.$serverIndex) {
                r = {};
                r.start = elt.$serverIndex;
                r.count = 1;
                result.push(r);
                ir++;
            }
            else {
                result[ir].count++;
            }
        });
        return result;
    },
    unSelectLines: function(serverIndex){
        var recordData, items = [];
        for (var ii = 0; ii < this.dataset.length; ii++) {
            if (recordData = this.recordsMap[this.dataset[ii].$uuid]) {
                if (serverIndex == undefined || (serverIndex != undefined && recordData.$serverIndex != serverIndex)) {
                    if (this.dataset[ii].$isSelected) {
                        items.push({
                            $uuid: recordData.$uuid,
                            $isSelected: false
                        });
                    }
                }
                else {
                    if (!this.dataset[ii].$isSelected) {
                        items.push({
                            $uuid: recordData.$uuid,
                            $isSelected: true
                        });
                    }
                }
            }
            else {
                if (serverIndex == undefined || (serverIndex != undefined && this.dataset[ii].$serverIndex != serverIndex)) {
                    this.dataset[ii].$isSelected = false;
                }
                else {
                    this.dataset[ii].$isSelected = true;
                }
            }
        }
        if (items.length > 0) {
            this.applyMetaData({
                $items: items
            });
        }
    },
    findRecord: function($$selector){
        var $uuid = this.findRecordUiid($$selector);
        return this.recordsMap[$uuid];
    },
    findRecordUiid: function($$selector){
        return ($$selector.is("[data-s-record]") ? $$selector : $$selector.closest("[data-s-record]")).attr("data-s-record");
    }
});
