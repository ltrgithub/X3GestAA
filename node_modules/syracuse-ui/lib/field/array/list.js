"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

var Field = require('syracuse-ui/lib/field/field').Field;
var FieldHelper = require('syracuse-ui/lib/field/fieldHelper');
var GridBuilder = require("./gridBuilder/gridBuilder").GridBuilder;
var SingleBuilder = require("./singleBuilder/singleBuilder").SingleBuilder;
var CardsBuilder = require("./cardsBuilder/cardsBuilder").CardsBuilder;
var PagingCapability = require("./capability/pagingCapability").PagingCapability;
var SortCapability = require("./capability/sortCapability").SortCapability;
var ArrayAuthoring = require("syracuse-ui/lib/authoring/field/arrayAuthoring").ArrayAuthoring;
var GraphDecorator = require("./graphDecorator").GraphDecorator;
var TreeList = require("./tree/treeList").TreeList;
var listHelper = require("./listHelper");
var ReorderCapability = require('./capability/reorderCapability').ReorderCapability;

function DesktopList() {}

exports.DesktopList = helpers.defineClass(DesktopList, Article, {
	ensureDataSet: function() {
		return this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || [];
	},
	getMetaData: function() {
		var $properties = this.articleParent.dataset.$properties;
		return $properties ? $properties[this.$item.$bind] : null;
	},
	getAuthoringWidget: function(designedField) {
		if (!this.awAddin && !this.builder.isSingleBuilder) {
			this.awAddin = new ArrayAuthoring();
			this.awAddin.create(designedField);
		}
		return this.awAddin;
	},
	ensureLayoutMode: function() {
		Field.prototype.ensureLayoutMode.call(this);
	},
	setAdvancedState: function($isAdvanced, onAuthoring) {
		Field.prototype.setAdvancedState.call(this, $isAdvanced, onAuthoring);
	},
	showAdvancedState: function(show) {
		Field.prototype.showAdvancedState.call(this, show);
	},
	loadBox: function(initData) {
		this.helper = listHelper;
		document.site.addResizeListener(this);
		if (this.page.$facet == "$lookup") {
			this.isLookupList = true;
			this.page.lookupList = this;
		}
		Article.prototype.loadBox.call(this, initData);
		this.articleParent.bind(this, this.$item.$bind);
		if (document.site.developpementMode) {
			FieldHelper.appendQualityAtt(this, this._domItem);
		}
		if (this.records.length == 0) {
			this.builder.emptyBody(true, this.page.$autoFetch !== false);
		}
	},
	selectServerFilter: function(filterId) {
		if (this.serverFilters) {
			if (this.serverFilters.selected) {
				document.site.toggleClass(this.serverFilters.selected.mn, "s-selected", false);
				delete this.serverFilters.selected;
			}
			if (filterId === null || filterId === "null") {
				filterId = "$noFilters";
				this.serverFilters.selected = this.menuItems[this.serverFilters.menus.id + "-" + filterId][0];
				document.site.toggleClass(this.serverFilters.selected.mn, "s-selected", true);
			}
		}
	},
	showDiagnoses: function(diagnoses, options) {
		Field.prototype.showDiagnoses.call(this, diagnoses, options);
	},
	drawBox: function() {
		this.arrayLevel = "array";
		this.isRecordDataset = true; //!important for sendBag
		this._isAddDisabled = false;
		this.records = [];
		this.recordsMap = {};

		this.sortCapability = new SortCapability(this);
		this.pagging = new PagingCapability(this);
		this.createBuilder();

		this.$fieldProperties = this.$prototype.$item.$properties || {};
		listHelper.ensureIsQuickFilter(this);

		this.$recordFacet = this.articleParent.$item.$recordFacet || this.$facet || "$details";
		switch (this.articleParent.$facet) {
			case "$query":
				if (this.page.$prototype.$url && this.page.$prototype.$url.indexOf("employees") >= 0) {
					this.page.$prototype.$filters = this.page.$prototype.$filters || {
						filter1: {
							$title: "filter Server Test 1"
						},
						filter2: {
							$title: "filter Server Test 2"
						}
					};
				}
				if (this.page.$prototype.$filters) {
					if (this.page.menuBar) {
						this.serverFilters = {
							menus: this.page.loadNewItem(this.page.menuBar._body, {
								$category: "menus",
								$isMenuFilters: true,
								$skin: "s-mn-bar-filters",
								$title: this.localize.flFilters
							}, this)
						};
						this.serverFilters.menus._ensurePrivateMenus({
							$filters: {
								$noFilters: {
									$title: this.localize.flNoFilter
								}
							}
						}, "$filters");
						this.serverFilters.noFilters = this.menuItems[this.serverFilters.menus.id + "-$noFilters"][0];
						this.serverFilters.noFilters.setStyle("nofilter");
						this.serverFilters.menus._ensurePrivateMenus(this.page.$prototype, "$filters");
						if (this.$urlParams && this.$urlParams.filter) {
							this.selectServerFilter(this.$urlParams.filter);
						}
						this.page.menuBar.showBar();
					}
				}
				break;
			case "$bulk":
			case "$search":
				break;
			case "$lookup":
				this.$item.$selectMode = "button";
				this.$item.$fitContainer = true;
				this._$$fitContainer = $(this.page._body);
				break;
			case "$select":
				this.$item.$selectMode = "multi";
				break;
			default:
				this.isClientFetch = this.isClientFetch !== false;
				if (this.$prototype.$treeview) {
					this.isClientFetch = false;
					this.isPagingDisabled = !this.$item.$isNavigationList;
					if (this.$item.$itemsPerPage) {
						this.$item.$fixedBodyHeight = (parseInt(this.$item.$itemsPerPage || 10, 10) * 20) + "px";
						delete this.$item.$itemsPerPage;
					}
				}
				break;
		}

		if (this.$prototype.$treeview) {
			(this.treeList = new TreeList()).load(this);
		}

		if ((this.$isEditMode = this.$item.$isEditMode) === undefined) {
			this.$isEditMode = this.articleParent.$isEditMode;
		}
		this.applyCapabilitiesSettings(this.$prototype);

		if (!this.$item.$layout) {
			this.$item.$layout = {};
		}
		if (!this.$item.$layout.$items) {
			this.$item.$layout.$items = [];
			var $binds = Object.keys(this.$fieldProperties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				if (!this.$fieldProperties[$binds[ii]].$isExcluded) {
					this.$item.$layout.$items.push({
						$bind: $binds[ii]
					});
				}
			}
		}
		if (this.$prototype.$cube) {
			if ((this.$item.$graphMode = this.$item.$graphMode || "both") == "both") {
				if (this.$item.$graphPosition === undefined) {
					this.$item.$graphPosition = "front";
					this.$item.$isGraphTabVisible = true;
				}
			}
		}

		this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
		if (this.$isEditMode) {
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
			this.inputId = this.id + "-input";
		}
		Field.prototype._initCss.call(this);

		this._domItem = document.createElement("div");
		this._domItem.className = this._$cssTopField;
		this.$$item = $(this.layoutSlot.appendChild(this._domItem));

		this.appendTitle();

		this._createValueContainer();

		this.setTitle(this.$item.$title || this.$field.$title);
		this.setDescription(this.$item.$description || this.$field.$description);
		this.setState(this.$field);

		this.fieldValue.className += " s-list";

		this.topbar = document.createElement("div");
		this.topbar.className = "s-list-topbar";
		this.fieldValue.appendChild(this.topbar);

		this._core = document.createElement("div");
		this._core.className = "s-list-core";
		this.fieldValue.appendChild(this._core);

		if (this.$isQuickDesignerEnabled === undefined) {
			this.$isQuickDesignerEnabled = this.$item.$isQuickDesignerEnabled;
		}

		this._menusSlot = document.createElement("div");
		this._menusSlot.className = "s-list-menus-cell";
		if (this.$item.$isPopupMenuHidden) {
			this._menusSlot.style.display = "none";
		}
		this.topbar.appendChild(this._menusSlot);

		this.builder.drawBuilder();
		this.ensureLayoutMode();
		if (this.$isQuickDesignerEnabled !== false) {
			this.applyActionLinkChange({
				$links: {
					"$authoring": {
						$title: this.localize.flAuthoring
					}
				}
			});
		}
	},
	ensureBottomBar: function() {
		if (!this.bottombar) {
			this.bottombar = document.createElement("div");
			this.bottombar.className = "s-list-bottombar";
			this.ensureArticleId();
			this.fieldValue.appendChild(this.bottombar);
		}
		return this.bottombar;
	},
	ensureArticleId: function() {
		this.topbar.setAttribute("data-s-article", this.id);
		this._core.setAttribute("data-s-article", this.id);
		if (this.bottombar) {
			this.bottombar.setAttribute("data-s-article", this.id);
		}
	},
	applyCapabilitiesSettings: function(newData) {
		this.pagging.setOptions(newData);
		this.sortCapability.setOrderBy(newData.$orderBy, newData.$startLetter);
		if (newData.$where !== undefined) {
			this.$where = newData.$where;
		}
	},
	setSortCapability: function() {
		this.sortCapability.load();
	},
	onWindowResize: function() {
		if (this.builder && this.builder.onWindowResize) {
			this.builder.onWindowResize();
		}
		if (this.graphDecorator && this.graphDecorator.onWindowResize) {
			this.graphDecorator.onWindowResize();
		}
	},
	_createValueContainer: function() {
		this.domValueSlot = document.createElement("article");
		this.domValueSlot.className = this._$cssField + "-value";
		this._dataValue = this._core = this.fieldValue = this.domValueSlot;
		this._domItem.appendChild(this.domValueSlot);
	},
	fetch: function(options, $location) {
		var params = {
			where: this.$where,
			select: this.$select
		};
		if (options) {
			if (options.$filters) {
				if (options.$filters == "$noFilters") {
					params.filter = "null";
				} else {
					params.filter = options.$filters;
				}
				this.selectServerFilter(params.filter);
				this.paramsFilter = params.filter;
			} else {
				if (this.paramsFilter) {
					params.filter = this.paramsFilter;
				}
			}
			params.startLetter = options.startLetter;
			params.startIndex = options.startIndex;
			this.pagging.setOptions({
				$itemsPerPage: options.$itemsPerPage
			});
			params.count = this.pagging.$itemsPerPage;
			if (options.orderBy) {
				params.startIndex = 1;
				this.sortCapability.setOrderBy(options.orderBy, options.startLetter);
			}
			if (options.filter != null) {
				params.startIndex = 1;
				params.where = this.$where = options.filter != "" ? options.filter : null;
			}
			if (options.queryBindings) {
				if (options.queryBindings.length == 0) {
					var $binds = Object.keys(this.$fieldProperties);
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						options.queryBindings.push($binds[ii]);
					}
				}
				this.select = options.queryBindings.map(function(binding) {
					return binding.replace(/\./g, '/');
				}).join(',');
			}
		}
		params.orderBy = this.sortCapability.stringify();
		var fetchOptions = {
			params: params
		};
		if (this.isClientFetch || this.isClientSortEnable) {
			this.helper.fetchClientRecordSet(this, fetchOptions);
		} else {
			fetchOptions.field = this;
			fetchOptions.$updateHitory = this.page.isMainPage;
			fetchOptions.$location = $location;
			this.articleParent.fetch(fetchOptions);
		}
		if (this.articleParent.onFetchHandler) {
			this.articleParent.onFetchHandler(fetchOptions);
		}
	},

	setHelp: function($help) {
		Field.prototype.setHelp.call(this, $help);
	},
	setDescription: function($description) {
		Field.prototype.setDescription.call(this, $description);
	},
	hideTitle: function($isTitleHidden) {
		Field.prototype.hideTitle.call(this, $isTitleHidden);
	},
	getDefaultTitle: function() {
		return this.localize.flDefaultTitle;
	},
	getTitle: function() {
		return Field.prototype.getTitle.call(this);
	},
	setTitle: function($title) {
		Field.prototype.setTitle.call(this, $title);
		if (this.domTitle) {
			this.domTitle.style.display = this.getTitle().length == 0 ? "none" : "";
		}
	},
	getLocalizedTitle: function($title) {
		if ($title && $title.length > 0 && $title[1] == "@") {
			return this.parseExpression($title);
		}
		return $title;
	},
	appendTitle: function() {
		if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
			Field.prototype.appendTitle.call(this);
			this.domTitle.style.display = "none";
		}
	},
	releaseMode: function(onDispose) {
		if (this.menusBox) {
			document.controller.disposeObject(this.menusBox);
		}
		this.menusBox = null;
		document.controller.disposeObject(this.builder);
		document.site.emptyDom(this._core);
		if (this.serverFilters) {
			this.serverFilters.selected = this.serverFilters.noFilters = null;
		}
		this.serverFilters = this.builder = this.domTitle = this._mandatoryFlag = this._description = this._helpFlag = null;
	},
	setMenus: function($menus) {
		if ($menus) {
			//important copy allow multi binding
			this.applyActionLinkChange({
				$links: $menus.$links,
				$actions: $menus.$actions
			});
		}
	},
	onAddMenuItem: function($menu) {
		switch ($menu.$bind) {
			case "$first":
			case "$previous":
			case "$next":
			case "$last":
				return false;
		}
		return true;
	},
	onMenuDataFilled: function(menuItem) {
		if (menuItem.boxParent.isMenuGroup) {
			var menuGroupRoot = menuItem.boxParent.menuGroupRoot;
			if (menuGroupRoot.id == (this.id + "-menu-picker")) {
				if (!menuGroupRoot.$isPickerVisible && !menuGroupRoot.$item.$isMenuFilters) {
					this._menusSlot.style.display = "";
					menuGroupRoot.$isPickerVisible = true;
				}
				if (!menuItem.$item.$isTop && !menuGroupRoot.isAddinMenus) {
					menuGroupRoot.isAddinMenus = true;
					menuGroupRoot.layoutContent.items[0].layoutSlot.className += " s-record-menus-addins";
				}
			}
		}
	},
	_createMenusBox: function() {
		var $menuBag = {
			$isMenusBag: true,
			$category: "menus",
			$noText: true,
			$title: this.localize.flActions,
			$isTitlePicker: true,
			$isBoxCollapsable: true,
			$isPopupContent: true,
			$id: this.id + "-menu-picker",
			$skin: "s-list-menus",
			$itemSkin: "s-record-menus-link",
			$layout: {
				$items: []
			}
		};
		if (this.$prototype.$cube || this.$prototype.$decorator) {
			$menuBag.$layout.$items.push({
				$bind: "$toggleGraph",
				$icon: {
					$mode: "iconText",
					$path: "list/s-list-"
				}
			});
		}
		if (this.$isQuickDesignerEnabled !== false) {
			$menuBag.$layout.$items.push({
				$layoutType: "stack",
				$items: [{
					$bind: "$authoring",
					$isTop: true,
					$icon: {
						$mode: "iconText",
						$path: "list/s-list-"
					}
				}]
			});
		}
		this.page.loadNewItem(this._menusSlot, {
			$layoutType: "row",
			$autoSize: true,
			$items: [{
				$skin: "s-list-menus-link",
				$bind: "$create",
				$category: "link",
				$icon: {
					$mode: "iconText",
					$path: "list/s-list-"
				}
			}, {
				$skin: "s-list-menus-link",
				$bind: "$select",
				$category: "link",
				$icon: {
					$mode: "iconText",
					$path: "list/s-list-"
				}
			}, {
				$skin: "s-list-menus-link",
				$bind: "$delete",
				$category: "link",
				$icon: {
					$mode: "iconText",
					$path: "list/s-list-"
				}
			},
			$menuBag]

		}, this);
		this.menusBox = this.idMap[this.id + "-menu-picker"];
		this.menusBox.contextField = this;
	},
	applyActionLinkChange: function(resources) {
		if (!this.menusBox && resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
			this._createMenusBox();
		}
		Article.prototype.applyActionLinkChange.call(this, resources);
	},
	createBuilder: function() {
		if (!this.$field.$item.$properties || this.$field.$item.$type == "application/x-reference") {
			this.builder = new SingleBuilder();
		} else {
			if ((this.$item.$format = this.$item.$format || "grid") == "cards") {
				this.builder = new CardsBuilder();
			} else {
				this.builder = new GridBuilder();
			}
		}
		this.builder.list = this;
		this.builder.initialize();
	},
	fitToWidth: function(list) {
		listHelper.fitToWidth(list);
	},
	reloadLayout: function($item) {
		this.$item = $item;
		this.reloadBuilder(true);
	},
	reloadBuilder: function(fillData) {
		document.controller.disposeObject(this.builder);
		document.site.emptyDom(this._core);
		this.createBuilder();
		this.builder.drawBuilder();
		if (fillData) {
			listHelper.fillList(this, this.ensureDataSet(), this.articleParent.dataset);
		}
	},
	applyFieldStyle: function(metaData) {
		FieldHelper.applyFieldStyle(this, metaData);
	},
	toggleEditMode: function($isEditMode) {},
	onFieldDiagnoseChange: function(add, record) {
		// --- handling grid diag alert info ---

		if (record) {
			var ids = record.diagnosesFields ? Object.keys(record.diagnosesFields) : ids;
			if (ids && ids.length != 0) {
				for (var ii = 0, jj = ids.length; ii < jj; ii++) {
					this.onFieldDiagnoseChange();
				}
			}
		} // if diagnose is added to a cell
		if (add) { // list diag count
			this.diagCount = this.diagCount || 0;
			// list diag info message
			if (!this.diagAlert) {
				var msg = document.createElement("div");
				msg.className = "s-grid-diag-alert";
				this._menusSlot.parentNode.insertBefore(msg, this._menusSlot.nextSibling);
				this.diagAlert = msg;
			}
			this.diagAlert.textContent = ++this.diagCount + this.localize.flDiagAlert;
		}

		// if diagnose is removed from a cell. clean
		else {
			if (this.diagAlert) {
				this.diagAlert.textContent = --this.diagCount + this.localize.flDiagAlert;
				if (this.diagCount == 0) {
					document.site.emptyDom(this.diagAlert);
					this.diagAlert = null;
				}
			}
		}
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$menuType == "$filters") {
			this.fetch({
				$filters: menuItem.$sourceBind
			});
			return false;
		}
		if (!menuItem.$isAction) {
			switch (menuItem.$bind) {
				case "$select":
					listHelper.doSelectAction(this);
					return false;
				case "$toggleGraph":
					if (this.graphDecorator) {
						this.graphDecorator.switchView();
					}
					return false;
				case "$authoring":
					document.site.openAuthoringPage(true, this);
					return false;
			}
		}
		return true;
	},
	onAfterNotifyDataChange: function() {
		this.onWindowResize();
	},
	onNotifyDataChange: function(field, value) {
		if (field.$item.$bind == "$itemsPerPage") {
			this.pagging.fetchItemPerPage(value);
		}
		return false;
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
	},
	showField: function(show) {
		Field.prototype.showField.call(this, show);
	},
	applyRecordCapabilities: function(record, $recordActions) {
		var $actions = $recordActions || {};
		if (this.$capability.insert) {
			$actions.$create = {
				$title: this.localize.flInsert,
				$isHidden: false
			};
		}
		if (this.$capability["delete"]) {
			$actions.$delete = {
				$title: this.localize.flDelete,
				$isHidden: false
			};
		}
		if ($actions.$create || $actions.$delete) {
			record.applyActionLinkChange({
				$actions: $actions
			});
		}
		if ($recordActions) {
			//on metadata
			if (record.hasReorderCapability != this.$capability.reorder) {
				record.applyReorderCapability(this.$capability.reorder);
			}
		}
	},
	applyCapabilities: function($metaCapablities) {
		var $actions = {};
		var $recordActions = {};
		var $capabilities = $metaCapablities;
		if ($capabilities === undefined) {
			$capabilities = this.$prototype.$capabilities;
		}
		var $prev = this.$capability;
		this.$capability = {};
		if ($capabilities !== undefined) {
			$capabilities = $capabilities || "";
			var parts = $capabilities.split(",");
			for (var ii = 0, jj = parts.length; ii < jj; ii++) {
				if (parts[ii]) {
					this.$capability[parts[ii]] = true;
				}
			}
		}
		if ($prev) {
			if ($prev.append && !this.$capability.append) {
				$actions.$create = {
					$isHidden: true
				};
			}
			if ($prev["delete"] && !this.$capability["delete"]) {
				$actions.$delete = {
					$isHidden: true
				};
				$recordActions.$delete = {
					$isHidden: true
				};
			}
			if ($prev.insert && !this.$capability.insert) {
				$recordActions.$create = {
					$isHidden: true
				};
			}
			if ($prev.reorder && !this.$capability.reorder) {
				if (this.reorderCapability) {
					document.controller.disposeObject(this.reorderCapability);
					delete this.reorderCapability;
				}
				if (this.builder.setRowIndexVisibility) {
					this.builder.setRowIndexVisibility();
				}
			}
		}

		if (this.$capability.append) {
			$actions.$create = {
				$title: this.localize.flAppend,
				$isHidden: false
			};
		}
		if (this.$capability["delete"]) {
			$actions.$delete = {
				$title: this.localize.flDeleteAll,
				$confirm: this.localize.flDeleteAllMessageText,
				$isHidden: false
			};
		}
		if ($actions.$create || $actions.$delete) {
			this.applyActionLinkChange({
				$actions: $actions
			});
		}
		//this.$capability.reorder = true;
		if (this.$capability.reorder) {
			this.$item.$isRowIndexVisible = true;
			if (!this.reorderCapability) {
				(this.reorderCapability = new ReorderCapability(this)).setDraggable();
			}
			if (this.builder.setRowIndexVisibility) {
				this.builder.setRowIndexVisibility();
			}
		}
		if ($metaCapablities !== undefined) {
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				this.applyRecordCapabilities(this.records[ii], $recordActions);
			}
		}
	},
	applyDesignMetaData: function(metaData, onAuthoring) {
		if (onAuthoring) {
			if (metaData.$format !== undefined) {
				this.$item.$format = metaData.$format;
				this.reloadBuilder(true);
			}
			if (metaData.$isQuickFilter !== undefined) {
				this.$item.$isQuickFilter = metaData.$isQuickFilter;
				this.reloadBuilder(true);
			}
			if (metaData.$isRowIndexVisible !== undefined) {
				this.$item.$isRowIndexVisible = metaData.$isRowIndexVisible;
				this.builder.setRowIndexVisibility();
			}
		}
		if (this.$prototype.$cube || this.$prototype.$decorator) {
			if (!this.graphDecorator) {
				this.graphDecorator = new GraphDecorator();
			}
			this.graphDecorator.applyGraphSettings(this, metaData);
		}
		Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
		this.builder.applyDesignMetaData(metaData, onAuthoring);
		this.pagging.applyMetadata(metaData, onAuthoring);
	},
	_resetCommonStatus: function(object, metaData) {
		if (metaData.$isReadOnly !== undefined && object.$isReadOnly) {
			delete object.$isReadOnly;
		}
		if (metaData.$isDisabled !== undefined && object.$isDisabled) {
			delete object.$isDisabled;
		}
		if (metaData.$fieldStyle !== undefined && object.$fieldStyle) {
			delete object.$fieldStyle;
		}
		if (metaData.$valueStyle !== undefined && object.$valueStyle) {
			delete object.$valueStyle;
		}
		if (metaData.$titleStyle !== undefined && object.$titleStyle) {
			delete object.$titleStyle;
		}
	},
	_applyCommonStatus: function(object, metaData) {
		if (object && metaData) {
			if (metaData.$isReadOnly !== undefined) {
				object.$isReadOnly = metaData.$isReadOnly;
			}
			if (metaData.$isDisabled !== undefined) {
				object.$isDisabled = metaData.$isDisabled;
			}
			if (metaData.$fieldStyle !== undefined) {
				dataRecord.$fieldStyle = metaData.$fieldStyle;
			}
			if (metaData.$valueStyle !== undefined) {
				object.$valueStyle = metaData.$valueStyle;
			}
			if (metaData.$titleStyle !== undefined) {
				object.$titleStyle = metaData.$titleStyle;
			}
		}
	},
	_propagateMetaToFields: function($properties, metaData, $metaFieldProperties) {
		var $binds = Object.keys($properties);
		for (var mm = 0, kk = $binds.length; mm < kk; mm++) {
			this._resetCommonStatus($properties[$binds[mm]], metaData);
			//reeapply if defiend in meta
			this._applyCommonStatus($properties[$binds[mm]], $metaFieldProperties[$binds]);
		}
	},
	ensureGlobalMetaRecord: function(reset) {
		if (reset) {
			this.globalMetaRecords = null;
		}
		if (reset || !this.globalMetaRecords) {
			this.globalMetaRecords = null;
			if (this.articleParent.dataset && this.articleParent.dataset.$properties) {
				var $metaList = this.articleParent.dataset.$properties[this.$item.$bind];
				if ($metaList) {
					this.globalMetaRecords = {};
					this._applyCommonStatus(this.globalMetaRecords, $metaList);
					if ($metaList.$item && $metaList.$item.$properties) {
						this.globalMetaRecords.$properties = $metaList.$item.$properties;
					}
				}
			}
		}
		return this.globalMetaRecords;
	},
	applyMetaData: function(metaData) {
		if (metaData.$item) {
			metaData.$items = metaData.$item;
		}
		Field.prototype.applyMetaData.call(this, metaData);
		if (metaData.$type === undefined) {
			if (metaData.$items) {
				if (this.builder.isSingleBuilder) {
					for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
						this.records[ii].applyMetaData(metaData.$items[ii]); //metadata and not applyChange cause no $bind
					}
				}
			}
			var $metaRecord = {};
			if (metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
				//apply to datarecords
				var $metaFieldProperties = metaData.$item && metaData.$item.$properties ? metaData.$item.$properties || {} : {};
				for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
					var dataRecord = this.dataset[ii];
					this._resetCommonStatus(dataRecord, metaData);
					if (dataRecord.$properties) {
						this._propagateMetaToFields(dataRecord.$properties, metaData, $metaFieldProperties);
					}
				}
				//apply to $delta currently defined for list
				if (this.articleParent.dataset.$properties) {
					var $deltaListProperties = this.articleParent.dataset.$properties[this.$item.$bind];
					$deltaListProperties = $deltaListProperties.$item && $deltaListProperties.$item.$properties ? $deltaListProperties.$item.$properties : null;
					if ($deltaListProperties) {
						this._propagateMetaToFields($deltaListProperties, metaData, $metaFieldProperties);
					}
				}
				this._applyCommonStatus($metaRecord, metaData);
			}
			if (metaData.$item && metaData.$item.$properties) {
				$metaRecord.$properties = metaData.$item.$properties;
				if (this.builder.applyMetaDataRecords) {
					this.builder.applyMetaDataRecords($metaRecord);
				}
			}
			if (Object.keys($metaRecord)) {
				this.ensureGlobalMetaRecord(true);
				for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
					this.records[ii].applyChange($metaRecord);
				}
			}
		}
		if (metaData.$capabilities !== undefined) {
			this.applyCapabilities(metaData.$capabilities);
		}
		if (metaData.$orderBy !== undefined) {
			this.sortCapability.setOrderBy(metaData.$orderBy, metaData.$startLetter);
		}
		if (metaData.$item) {
			if (metaData.$item.$links) {
				var $menus = this.$fieldProperties.$links = this.$prototype.$item.$links || {};
				this.page.ensureDeltaManager().applyObjectDelta($menus, metaData.$item.$links, true);
			}
			if (metaData.$item.$actions) {
				var $menus = this.$fieldProperties.$actions = this.$prototype.$item.$actions || {};
				this.page.ensureDeltaManager().applyObjectDelta($menus, metaData.$item.$actions, true);
			}
		}
		this.pagging.applyMetadata(metaData);
	},
	removeRecords: function(addEmptySlot) {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			var record = this.records[ii];
			delete this.recordsMap[record.$uuid];
			this.removeRecord(record);
		}
		this.recordsMap = {};
		this.records = [];
		if (this.selector && this.selector.clear) {
			this.selector.clear();
		}
		this.builder.emptyBody(addEmptySlot);
	},
	removeRecord: function(record, removeDom) {
		this.onFieldDiagnoseChange(false, record); // update grid diagnose alert
		if (this.page.diagnosesPanel) {
			this.page.diagnosesPanel.cleanBoxDiagnoses(record);
		}
		/*if (record.treeNode) {
         record.treeNode.onRemoveRecord();
         }*/
		this.removeItem(record, removeDom);
	},
	applyPartialDelta: function(dataRecordSet, firstIndex, lastIndex) {
		listHelper.applyPartialDelta(this, dataRecordSet, firstIndex, lastIndex);
	},
	hasRecords: function() {
		return this.records && this.records.length > 0;
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		this.ensureDataSet();
		if (metaData) {
			this.applyMetaData(metaData);
		}
		if (dataRecordSet !== undefined) {
			if (this.page.$isPartialDelta || (this.page.$isEditMode && this.hasRecords() && !this.builder.isSingleBuilder)) {
				listHelper.fillList(this, dataRecordSet, parentDataRecord, true);
			} else {
				listHelper.fillList(this, dataRecordSet, parentDataRecord);
			}
		}
		if (this.graphDecorator) {
			var graphRecords = [];
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				graphRecords.push(this.records[ii].dataset);
			}
			this.graphDecorator.setDataBind(graphRecords, parentDataRecord, metaData);
		}
		if (this.isLookupList) {
			this.page.onFillLookupList();
		}
	},
	validate: function() {
		var isValidated = true;
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			isValidated = this.records[ii].validateFields();
		}
		return isValidated;
	},
	dispose: function() {
		if (this.isLookupList && this.page) {
			this.page.lookupList = null;
		}
		if (this.awAddin) {
			document.controller.disposeObject(this.awAddin);
		}
		document.site.removeResizeListener(this);
		if (this.treeList) {
			this.treeList.dispose();
		}
		if (this.reorderCapability) {
			document.controller.disposeObject(this.reorderCapability);
		}
		if (this.menusBox) {
			document.controller.disposeObject(this.menusBox);
		}
		this.awAddin = this.clientDataset = this.emptyDataItem = this.helper = this.reorderCapability = null;
		this.topbar = this._core = this.bottombar = null;
		this._menus = this.page = this.treeList = this.menusBox = null;
		this.paramsFilter = null;
		Article.prototype.dispose.call(this);
	},

	setFocus: function(select, name, $serverIndex) {
		var field;
		if (this.treeList) {
			return true;
		}
		if (this.builder.cardBuilder && this.builder.cardBuilder.isPopupCardOpened()) {
			this.selectRecords($serverIndex);
		}
		if ((field = this.getField(name, $serverIndex))) {
			return field.focus(select);
		} else {
			if (this.isClientFetch) {
				if (!listHelper.findRecordByServerIndex(this, $serverIndex)) {
					this.pagging.setPage($serverIndex);
					if ((field = this.getField(name, $serverIndex))) {
						return field.focus(select);
					}
				}
			}
		}
		return false;
	},
	getDataValue: function(name, $serverIndex) {
		var dataRecordSet = this.ensureDataSet();
		var field;
		if ($serverIndex !== undefined) {
			if (field = this.getField(name, $serverIndex)) {
				return field.getDataValue();
			} else {
				for (var ii = 0, jj = dataRecordSet.length; ii < jj; ii++) {
					if (dataRecordSet[ii].$serverIndex == $serverIndex) {
						var value = dataRecordSet[ii][name];
						return value === undefined ? null : value;
					}
				}
			}
		}
		return null;
	},

	getField: function(name, $serverIndex, select) {
		var fields, record = listHelper.findRecordByServerIndex(this, $serverIndex);
		if (record && !record.disposed) {
			if ((fields = record.boundFields[name]) && fields.length > 0) {
				return this.builder.cardBuilder.findPopupField(name, record) || fields[0];
			}
		}
		return null;
	},
	getSelectedRecordIndexes: function() {
		var result = [],
			ir = -1;
		for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
			var dataRecord = this.dataset[ii];
			if (dataRecord.$isSelected) {
				if (!result[ir] || result[ir].start + result[ir].count != dataRecord.$serverIndex) {
					result.push({
						start: dataRecord.$serverIndex,
						count: 1
					});
					ir++;
				} else {
					result[ir].count++;
				}
			}
		}
		return result;
	},
	selectRecords: function(start, end) {
		var record;
		if (start === undefined) {
			start = -1;
		}
		if (end === undefined) {
			end = start;
		}
		for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
			if (record = this.recordsMap[this.dataset[ii].$uuid]) {
				var isSelected = record.$serverIndex >= start && record.$serverIndex <= end;
				if (isSelected != this.dataset[ii].$isSelected) {
					record.select(false);
				}
			} else {
				this.dataset[ii].$isSelected = this.dataset[ii].$serverIndex >= start && this.dataset[ii].$serverIndex <= end;
			}
		}
	},
	findRecord: function($$selector) {
		var $uuid = this.findRecordUiid($$selector);
		return this.recordsMap[$uuid];
	},
	findRecordUiid: function($$selector) {
		return ($$selector.is("[data-s-record]") ? $$selector : $$selector.closest("[data-s-record]")).attr("data-s-record");
	}
});