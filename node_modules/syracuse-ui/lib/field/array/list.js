"use strict";
var helpers = require('syracuse-core/lib/helpers');

var Article = require("syracuse-ui/lib/article/article").Article;
var authoringOpener = require("./authoring/authoringOpener");

var ListContextMenu = require('./listContextMenu').ListContextMenu;
var GraphDecorator = require("./graphDecorator").GraphDecorator;
var Field = require('syracuse-ui/lib/field/field').Field;
var GridBuilder = require("./gridBuilder/gridBuilder").GridBuilder;
var SingleBuilder = require("./singleBuilder/singleBuilder").SingleBuilder;
var CardsBuilder = require("./cardsBuilder/cardsBuilder").CardsBuilder;
var RecordStore = require("./record/recordStore").RecordStore;

var locale = require('syracuse-core/lib/locale');

function DesktopList(){
}

exports.DesktopList = helpers.defineClass(DesktopList, Article, {
    getDataSet: function(){
        return this.getArticleParent().dataset[this.$item.$bind];
    },
    drawBox: function(){
        this._localize = locale.resources(module)();
        (this._store = new RecordStore(this)).load();
        if (!this.builder) {
            this.$layoutOptions = document.site.$item.$layoutOptions.list;
            this.createBuilder();
            this._initilializeList();
        }
        this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
            this.inputId = this.id + "-input";
        }
        Field.prototype._initCss.call(this);
        
        var div = document.createElement("div");
        div.className = this._$cssTopField;
        this.$$item = $(this.$$container[0].appendChild(div));
        
        this.appendTitle();
        
        Field.prototype._createValueContainer.call(this);
        
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setState(this.$field);
        
        var list = this.$$fieldValue[0];
        list.className += " s-list";
        
        this._topbar = document.createElement("div");
        this._topbar.className = "s-list-topbar";
        list.appendChild(this._topbar);
        
        this._core = document.createElement("div");
        this._core.className = "s-list-core";
        list.appendChild(this._core);
        
        if (this.$item.$isQuickDesignerEnabled !== false) {
            this.quickDesigner = new authoringOpener.QuickDesigner();
            this.quickDesigner.appendOpener(this)
        }
        
        this._contextMenusSlot = document.createElement("div");
        this._contextMenusSlot.className = "s-list-menus-cell";
        this._topbar.appendChild(this._contextMenusSlot);
        
        this.builder.drawBuilder();
    },
    fetch: function(options, $location){
        var self = this;
        var params = {
            where: self._store.filterCapability.$where,
            select: self.$select
        };
        if (options) {
            params.startLetter = options.startLetter;
            params.startIndex = options.startIndex
            this._store.pagingCapability.setOptions({
                $itemsPerPage: options.$itemsPerPage
            });
            params.count = this._store.pagingCapability._$itemsPerPage;
            if (options.orderBy) {
                params.startIndex = 1;
                self._store.sortCapability.setOrderBy(options.orderBy, options.startLetter);
            }
            if (options.filter != null) {
                params.startIndex = 1;
                params.where = self._store.filterCapability.$where = options.filter != "" ? options.filter : null;
            }
            if (options.queryBindings) {
                if (options.queryBindings.length == 0) {
                    Object.keys(self.$fieldProperties).forEach(function($bind){
                        options.queryBindings.push(self.$fieldProperties.$bind || $bind);
                    });
                }
                self.select = options.queryBindings.map(function(binding){
                    return binding.replace(/\./g, '/');
                }).join(',');
            }
        }
        params.orderBy = self._store.sortCapability.stringify();
        if (self.isClientFetch) {
            self.fetchClientRecordSet({
                params: params
            });
        }
        else {
            self.getArticleParent().fetch({
                field: self,
                $updateHitory: self.getPage().isMainPage,
                params: params,
                $location: $location
            });
        }
    },
    fetchClientRecordSet: function(options){
        var self = this;
        if (options && options.params) {
            var $orderBy;
            var resource = {
                dataRecordSet: self.getDataSet()
            };
            if (options.params.orderBy) {
                $orderBy = self._store.sortCapability.parse(options.params.orderBy);
                if (options.params.startLetter) {
                    self._store.sortCapability.filterByStartLetter(resource, {
                        binding: $orderBy[0].binding,
                        startLetter: options.params.startLetter
                    });
                }
                self._store.sortCapability.syracuseSort(resource, $orderBy);
            }
            if (options.params.where) {
                self._store.filterCapability.applyFilter(resource, options.params.where);
            }
            if (options.params.count || options.params.startIndex) {
                self._store.pagingCapability.goToPage(resource, {
                    $itemsPerPage: options.params.count,
                    $startIndex: options.params.startIndex
                });
            }
            var dataRecordSet = resource.dataRecordSet;
            delete resource.dataRecordSet;
            var articleParent = self.getArticleParent();
            articleParent.boundFields[self.$item.$bind].forEach(function(field){
                field.setDataBind(dataRecordSet, articleParent.dataset, resource);
            });
        }
    },
    setHelp: function($help){
        Field.prototype.setHelp.call(this, $help);
    },
    setDescription: function($description){
        Field.prototype.setDescription.call(this, $description);
    },
    hideTitle: function($isTitleHidden){
        Field.prototype.hideTitle.call(this, $isTitleHidden);
    },
    getDefaultTitle: function(){
        return Field.prototype.getDefaultTitle.call(this);
    },
    getTitle: function(){
        return Field.prototype.getTitle.call(this);
    },
    setTitle: function($title){
        Field.prototype.setTitle.call(this, $title);
        if (this.$$title) {
            this.$$title[0].style.display = this.titleText.length == 0 ? "none" : "";
        }
    },
    getLocalizedTitle: function($title){
        if ($title && $title.length > 0 && $title[1] == "@") {
            return this.boxParent._renderExpression($title);
        }
        return $title;
    },
    appendTitle: function(){
        if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
            Field.prototype.appendTitle.call(this);
            this.$$title[0].style.display = "none";
        }
    },
    
    releaseMode: function(onDispose){
        document.controller.disposeObject(this.builder);
        $(this._core).empty();
        delete this.builder;
        delete this.$$title;
        delete this._buttons;
        delete this._mandatoryFlag;
        delete this.$$description;
        delete this._helpFlag;
    },
    _restoreButtonValue: function(){
    },
    toggleDiagnose: function(css, show){
    },
    drawDiagnose: function($diagnose, severityGroup){
        Field.prototype.drawDiagnose.call(this, $diagnose, severityGroup);
    },
    _ensureButtonsVisible: function(){
    },
    setMenus: function($menus){
        if ($menus) {
            //important copy allow multi binding
            this.applyChange({
                $links: $menus.$links,
                $actions: $menus.$actions
            });
        }
    },
    applyActionLinkChange: function(resources, record){
        Article.prototype.applyActionLinkChange.call(this, resources, record);
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            if (!this._contextMenu) {
                (this._contextMenu = new ListContextMenu()).create(this);
            }
            if (resources.$links === null) {
                this._contextMenu.clearMenuItems();
            }
        }
    },
    _initilializeList: function(){
        var self = this;
        self.$isLayoutContentSizeDisabled = true;
        self.$fieldProperties = self.$prototype.$item.$properties || {};
        self._store.filterCapability.validateIsQuickFilter();
        var articleParent = self.getArticleParent();
        self.$recordFacet = articleParent.$item.$recordFacet || self.$facet || "$details";
        switch (articleParent.$facet) {
            case "$query":
                break;
            case "$lookup":
                self.$item.$selectMode = "button";
                break;
            case "$select":
                self.$item.$selectMode = "multi";
                break;
            default:
                self.isClientFetch = true;
                break;
        }
        
        self.$isEditMode = self.$item.$isEditMode;
        if (self.$isEditMode === undefined) {
            self.$isEditMode = articleParent.$isEditMode;
        }
        self._store.applySettings(self.$prototype);
        
        if (!self.$item.$layout) {
            self.$item.$layout = {};
        }
        if (!self.$item.$layout.$items) {
            self.$item.$layout.$items = Object.keys(self.$fieldProperties).map(function($bind){
                return {
                    $bind: $bind
                };
            });
        }
        if (self.$prototype.$cube) {
            if ((self.$item.$graphMode = self.$item.$graphMode || "both") == "both") {
                self.$item.$graphPosition = "top";
            }
        }
    },
    createBuilder: function(){
        if (!this.$field.$item.$properties || this.$field.$item.$type == "application/x-reference") {
            this.builder = new SingleBuilder();
        }
        else {
            if ((this.$item.$format = this.$item.$format || "grid") == "cards") {
                this.builder = new CardsBuilder();
            }
            else {
                this.builder = new GridBuilder();
            }
            this.builder.$layoutOptions = this.$layoutOptions.builder[this.$item.$format] || null;
        }
        // }
        this.builder.list = this;
        this.builder.initialize();
    },
    reloadBuilder: function(){
        var self = this;
        setTimeout(function(){
            document.controller.disposeObject(self.builder);
            $(self._core).empty();
            self.createBuilder();
            self.builder.drawBuilder();
        }, 20);
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if (onAuthoring) {
            if (metaData.$format !== undefined) {
                this.$item.$format = metaData.$format;
                this.reloadBuilder();
            }
            if (metaData.$isQuickFilter !== undefined) {
                this.$item.$isQuickFilter = metaData.$isQuickFilter;
                this.reloadBuilder();
            }
        }
        if (this.$prototype.$cube) {
            if (!this.graphDecorator) {
                this.graphDecorator = new GraphDecorator();
            }
            this.graphDecorator.applyGraphSettings(this, metaData);
        }
        if (metaData.$width) {
            this.$item.$width = metaData.$width;
            var width = this.$item.$width || "100%";
            if (width == "auto") {
            
            }
            else {
                this.$$fieldValue[0].style.width = width;
                this._core.style.width = "100%";
            }
            delete metaData.$width;
        }
        Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
        this.builder.applyDesignMetaData(metaData, onAuthoring);
        return this.applyFieldsMetaData(metaData, onAuthoring);
    },
    applyFieldsMetaData: function(metaData, onAuthoring){
        var self = this;
        var redraw = false;
        if (metaData.$orderBy !== undefined) {
            this._store.sortCapability.setOrderBy(metaData.$orderBy, metaData.$startLetter);
        }
        this._store.pagingCapability.applyMetadata(metaData, onAuthoring);
        if (metaData.$item) {
            if (metaData.$item.$properties) {
                Object.keys(metaData.$item.$properties).forEach(function($bind){
                    var $metaField = metaData.$item.$properties[$bind];
                    var $updated;
                    if (onAuthoring) {
                        self.$item.$layout.$items.some(function($item){
                            if ($item.$bind == $bind) {
                                $updated = $item;
                                return true;
                            }
                            return false;
                        });
                    }
                    else {
                        $updated = self.$fieldProperties[$bind];
                    }
                    if ($updated) {
                        Object.keys($metaField).forEach(function($prop){
                            if ($updated[$prop] != $metaField[$prop]) {
                                $updated[$prop] = $metaField[$prop];
                                if ($prop == "$isHidden") {
                                    redraw = true;
                                }
                            }
                        });
                    }
                });
            }
            ["$links", "$actions"].forEach(function($menuType){
                var $newMenus = metaData.$item[$menuType];
                if ($newMenus) {
                    var $menus = self.$prototype.$item[$menuType] = self.$prototype.$item[$menuType] || {};
                    Object.keys($newMenus).forEach(function($bind){
                        var $menu = $menus[$bind] = {};
                        var $newMenu = $newMenus[$bind];
                        Object.keys($newMenu).forEach(function($prop){
                            $menu[$prop] = $newMenu[$prop];
                        });
                    });
                }
            });
        }
        if (redraw && onAuthoring) {
            self.reloadBuilder();
            redraw = false; //compatibility test with Dominique
        }
        return redraw;
    },
    getAuthoringWidget: function(){
        return new authoringOpener.WidgetAuthoring();
    },
    emptyDiagnoseSlot: function(){
        if (this.domDiagnose) {
            document.site.emptyDom(this.domDiagnose);
            this.domDiagnose.style.visibility = "hidden";
        }
    },
    ensureDiagnoseSlot: function(){
        if (!this.domDiagnose && this.$$dataValue) {
            this.domDiagnose = document.createElement("div");
            this.domDiagnose.className = "s-field-diagnose";
            this.$$dataValue[0].appendChild(this.domDiagnose);
        }
        else {
            document.site.emptyDom(this.domDiagnose);
        }
    },
    onNotifyRecordChange: function(updatedRecord, $bind){
        var data;
        debugger;
        if ($bind == "$itemsPerPage") {
            this._store.pagingCapability.fetchItemPerPage(updatedRecord);
        }
        else {
            if (this.builder.onNotifyRecordChange) {
                data = this.builder.onNotifyRecordChange(updatedRecord, $bind);
            }
            if (data !== null) {
                if (updatedRecord.$uuid) {
                    updatedRecord.$index = this._store._map[updatedRecord.$uuid].$recordIndex;
                    data = [updatedRecord];
                }
                else {
                    data = {};
                    data[$bind] = updatedRecord;
                }
            }
            
        }
        return data;
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        this._store.setState(state);
    },
    parseCapabilities: function($capabilities){
        var self = this;
        self.$capability = {}; //self.$capability || {};
        if ($capabilities !== undefined) {
            $capabilities.split(",").forEach(function($prop){
                self.$capability[$prop] = true;
            });
            switch (self.getArticleParent().facet) {
                case "$lookup":
                case "$select":
                    delete self.$capability.reorder;
                    delete self.$capability.insert;
                    delete self.$capability["delete"];
                    break;
            }
            if (self.$capability.reorder !== undefined) {
                self._store.setReorderCapability(self.$capability.reorder);
            }
        }
    },
    applyMetaData: function(metaData){
        var self = this;
        Field.prototype.applyMetaData.call(self, metaData);
        if (metaData.$type === undefined) {
            if (metaData.$items) {
                if (self.builder.isSingleBuilder) {
                    self._store._records.forEach(function(record, index){
                        record.applyMetaData(metaData.$items[index]); //metadata and not applyChange cause no $bind
                    });
                }
                else {
                    metaData.$items.forEach(function($record){
                        var record = self._store._map[$record.$uuid];
                        if (record) {
                            record.applyChange($record);
                        }
                    });
                }
            }
            self.applyFieldsMetaData(metaData);
        }
        if (metaData && metaData.$capabilities !== undefined) {
            self.parseCapabilities(metaData.$capabilities);
            return self.$isEditMode && self._store._records;
        }
    },
    setDataBind: function(dataRecordSet, parentDataRecord, metaData){
        var self = this;
        var redraw = false;
        if (self.getPage().externalAdapter.setDataBind(self, dataRecordSet, parentDataRecord, metaData)) {
            if (metaData) {
                if (redraw = self.applyMetaData(metaData)) {
                    if (dataRecordSet === undefined) {
                        dataRecordSet = self.getDataSet();
                        parentDataRecord = this.getArticleParent().dataset;
                    }
                }
            }
            if (dataRecordSet !== undefined) {
                self.builder._body.style.display = "none";
                self._store.applySettings(parentDataRecord);
                
                if (parentDataRecord.$isDelta && self.$prototype.$item.$type == "application/x-reference") {
                    //temp modif for Cristi for single field plus de delta
                    if (self.builder.onAfterDataBinding) {
                        self.builder.onAfterDataBinding();
                    }
                    self._store.pagingCapability.draw();
                    self._store.sortCapability.renderOrderBy();
                    
                    self.builder._body.style.display = "";
                    return;
                }
                if (parentDataRecord.$isDelta) {
                    /* if (self._store.pagingCapability._$totalResults == 0) {
                     self.builder.emptyBody();
                     }*/
                    dataRecordSet.forEach(function(dataRecord, $recordIndex){
                        var record = self._store._map[dataRecord.$uuid];
                        if (dataRecord.$isDeleted) {
                            if (record) {
                                self.removeItem(record, true);
                                delete self._store._map[dataRecord.$uuid];
                                self._store._records[$recordIndex] = {
                                    $recordUuid: dataRecord.$uuid,
                                    $isDeleted: true
                                };
                            }
                        }
                        else {
                            if (record) {
                                record.applyChange(dataRecord);
                            }
                            else {
                                /*self._store._records.splice(self.appendRecord({
                                 dataRecord: dataRecord,
                                 $recordIndex: $recordIndex,
                                 isInsert: true
                                 }), 1);*/
                                debugger;
                                self._store.appendRecord({
                                    dataRecord: dataRecord,
                                    $recordIndex: $recordIndex,
                                    isInsert: true
                                });
                            }
                        }
                    });
                }
                else {
                    self._store.removeRecords(!(dataRecordSet && dataRecordSet.length > 0), redraw);
                    if (dataRecordSet) {
                        if (self.isClientFetch && self._store.pagingCapability) {
                            var resources = self._store.pagingCapability.ensureClientPageSize({
                                dataRecordSet: dataRecordSet
                            });
                            if (resources.dataRecordSet.length != dataRecordSet.length) {
                                self.applyMetaData(resources);
                                dataRecordSet = resources.dataRecordSet;
                            }
                        }
                        dataRecordSet.forEach(function(dataRecord, $recordIndex){
                            self._store.appendRecord({
                                dataRecord: dataRecord,
                                $recordIndex: $recordIndex
                            });
                        });
                    }
                }
                if (self.builder.onAfterDataBinding) {
                    self.builder.onAfterDataBinding();
                }
                self._store.pagingCapability.draw();
                self._store.sortCapability.renderOrderBy();
                
                self.builder._body.style.display = "";
            }
        }
    },
    
    dispose: function(){
        delete this._menus;
        if (this._contextMenu) {
            document.controller.disposeObject(this._contextMenu);
            delete this._contextMenu;
        }
        if (this.$$item) {
            this.$$item.undelegate();
        }
        Article.prototype.dispose.call(this);
    }
});
