"use strict";
var helpers = require('syracuse-core/lib/helpers');

var Article = require("syracuse-ui/lib/article/article").Article;
var authoringOpener = require("syracuse-ui/lib/authoring/field/array/authoringOpener");

var GraphDecorator = require("./graphDecorator").GraphDecorator;
var Field = require('syracuse-ui/lib/field/field').Field;
var FieldHelper = require('syracuse-ui/lib/field/fieldHelper');
var GridBuilder = require("./gridBuilder/gridBuilder").GridBuilder;
var SingleBuilder = require("./singleBuilder/singleBuilder").SingleBuilder;
var CardsBuilder = require("./cardsBuilder/cardsBuilder").CardsBuilder;
var RecordStore = require("./record/recordStore").RecordStore;
var PagingCapability = require("./capability/pagingCapability").PagingCapability;
var SortCapability = require("./capability/sortCapability").SortCapability;
var FilterCapability = require("./record/filterCapability").FilterCapability;
var ReorderCapability = require('./capability/reorderCapability').ReorderCapability;
var locale = require('syracuse-core/lib/locale');
var fieldDiagnoseUtils = require('syracuse-ui/lib/diagnoses/fieldDiagnosesUtils');

function DesktopList(){
}

exports.DesktopList = helpers.defineClass(DesktopList, Article, {
    ensureDataSet: function(){
        return this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || [];
    },
    findDataRecord: function($uuid){
        var found;
        if (this.dataset) {
            for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
                var dataRecord = this.dataset[ii];
                if (dataRecord && dataRecord.$uuid == $uuid) {
                    found = {
                        dataRecord: dataRecord,
                        dataRecordIndex: ii
                    };
                    break;
                }
            }
        }
        return found;
    },
    ensureLayoutMode: function(){
        Field.prototype.ensureLayoutMode.call(this);
    },
    loadBox: function(initData){
        this.articleParent = this.getArticleParent();
        document.site.addResizeListener(this);
        Article.prototype.loadBox.call(this, initData);
        this.articleParent.bind(this, this.$item.$bind);
        if (document.site.developpementMode) {
            FieldHelper.appendQualityAtt(this, this._domItem);
        }
    },
    showDiagnoses: function(diagnoses, options){
        Field.prototype.showDiagnoses.call(this, diagnoses, options);
    },
    drawBox: function(){
        this.arrayLevel = "array";
        this.isRecordDataset = true; //!important for sendBag
        this._localize = locale.resources(module)();
        (this._store = new RecordStore()).load(this);
        this.sortCapability = new SortCapability(this);
        this.pagingCapability = new PagingCapability(this);
        this.filterCapability = new FilterCapability(this);
        this.createBuilder();
        
        this.$fieldProperties = this.$prototype.$item.$properties || {};
        this.filterCapability.validateIsQuickFilter();
        
        this.$recordFacet = this.articleParent.$item.$recordFacet || this.$facet || "$details";
        switch (this.articleParent.$facet) {
            case "$bulk":
            case "$query":
            case "$search":
                break;
            case "$lookup":
                this.$item.$selectMode = "button";
                this.$item.$fitContainer = true;
                this._$$fitContainer = $(this.page._body);
                break;
            case "$select":
                this.$item.$selectMode = "multi";
                break;
            default:
                this.isClientFetch = this.isClientFetch !== false;
                break;
        }
        
        if ((this.$isEditMode = this.$item.$isEditMode) === undefined) {
            this.$isEditMode = this.articleParent.$isEditMode;
        }
        this.applyCapabilitiesSettings(this.$prototype);
        
        if (!this.$item.$layout) {
            this.$item.$layout = {};
        }
        if (!this.$item.$layout.$items) {
            this.$item.$layout.$items = [];
            var $binds = Object.keys(this.$fieldProperties);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                this.$item.$layout.$items.push({
                    $bind: $binds[ii]
                });
            }
        }
        if (this.$prototype.$cube) {
            if ((this.$item.$graphMode = this.$item.$graphMode || "both") == "both") {
                this.$item.$graphPosition = "top";
            }
        }
        
        this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
            this.inputId = this.id + "-input";
        }
        Field.prototype._initCss.call(this);
        
        this._domItem = document.createElement("div");
        this._domItem.className = this._$cssTopField;
        this.$$item = $(this.layoutSlot.appendChild(this._domItem));
        
        this.appendTitle();
        
        this._createValueContainer();
        
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setState(this.$field);
        this.setEditMode(this.$field);
        
        this.fieldValue.className += " s-list";
        
        this._topbar = document.createElement("div");
        this._topbar.className = "s-list-topbar";
        this.fieldValue.appendChild(this._topbar);
        
        this._core = document.createElement("div");
        this._core.className = "s-list-core";
        this.fieldValue.appendChild(this._core);
        
        if (this.$item.$isQuickDesignerEnabled !== false) {
            this.quickDesigner = new authoringOpener.QuickDesigner();
            this.quickDesigner.appendOpener(this)
        }
        this._menusBoxSlot = document.createElement("div");
        this._menusBoxSlot.className = "s-list-menus-cell";
        if (this.$item.$isPopupMenuHidden) {
            this._menusBoxSlot.style.display = "none";
        }
        this._topbar.appendChild(this._menusBoxSlot);
        
        this.builder.drawBuilder();
        /*
         this.articleParent.bind(this, this.$item.$bind);
         */
        this.ensureLayoutMode();
    },
    ensureArticleId: function(){
        this._topbar.setAttribute("data-s-article", this.id);
        this._core.setAttribute("data-s-article", this.id);
    },
    applyCapabilitiesSettings: function(newData){
        this.pagingCapability.setOptions(newData);
        this.sortCapability.setOrderBy(newData.$orderBy, newData.$startLetter);
        this.filterCapability.setWhere(newData.$where);
    },
    setSortCapability: function(){
        this.sortCapability.load();
    },
    onWindowResize: function(initialize){
        if (this.builder && this.builder.onWindowResize) {
            this.builder.onWindowResize(initialize);
        }
        if (this.graphDecorator && this.graphDecorator.onWindowResize) {
            this.graphDecorator.onWindowResize(initialize);
        }
    },
    _createValueContainer: function(){
        this.domValueSlot = document.createElement("article");
        this.domValueSlot.className = this._$cssField + "-value";
        this._dataValue = this._core = this.fieldValue = this.domValueSlot;
        this.$$dataValue = $(this.domValueSlot);
        this._domItem.appendChild(this.domValueSlot);
    },
    fetch: function(options, $location){
        var self = this;
        var params = {
            where: self.filterCapability.$where,
            select: self.$select
        };
        if (options) {
            params.startLetter = options.startLetter;
            params.startIndex = options.startIndex
            this.pagingCapability.setOptions({
                $itemsPerPage: options.$itemsPerPage
            });
            params.count = this.pagingCapability._$itemsPerPage;
            if (options.orderBy) {
                params.startIndex = 1;
                self.sortCapability.setOrderBy(options.orderBy, options.startLetter);
            }
            if (options.filter != null) {
                params.startIndex = 1;
                params.where = self.filterCapability.$where = options.filter != "" ? options.filter : null;
            }
            if (options.queryBindings) {
                if (options.queryBindings.length == 0) {
                    Object.keys(self.$fieldProperties).forEach(function($bind){
                        options.queryBindings.push(self.$fieldProperties.$bind || $bind);
                    });
                }
                self.select = options.queryBindings.map(function(binding){
                    return binding.replace(/\./g, '/');
                }).join(',');
            }
        }
        params.orderBy = self.sortCapability.stringify();
        var fetchOptions = {
            params: params
        };
        
        if (self.isClientFetch || self.isClientSortEnable) {
            self.fetchClientRecordSet(fetchOptions);
        }
        else {
            fetchOptions.field = self;
            fetchOptions.$updateHitory = self.page.isMainPage;
            fetchOptions.$location = $location;
            self.articleParent.fetch(fetchOptions);
        }
        if (self.articleParent.onFetchHandler) {
            self.articleParent.onFetchHandler(fetchOptions);
        }
    },
    fetchClientRecordSet: function(options){
        if (options && options.params) {
            var $orderBy;
            var resource = {
                dataRecordSet: this.ensureDataSet()
            };
            for (var ii = 0, jj = resource.dataRecordSet.length; ii < jj; ii++) {
                resource.dataRecordSet[ii].$serverIndex = ii;
            }
            if (options.params.orderBy) {
                $orderBy = this.sortCapability.parse(options.params.orderBy);
                if (options.params.startLetter) {
                    this.sortCapability.filterByStartLetter(resource, {
                        binding: $orderBy[0].binding,
                        startLetter: options.params.startLetter
                    });
                }
                this.sortCapability.syracuseSort(resource, $orderBy);
            }
            if (options.params.where) {
                this.filterCapability.applyFilter(resource, options.params.where);
            }
            if (options.params.count || options.params.startIndex) {
                this.pagingCapability.goToClientPage({
                    dataRecordSet: resource.dataRecordSet,
                    $itemsPerPage: options.params.count,
                    $startIndex: options.params.startIndex
                });
            }
            this.onClientFetch = true;
            this._fillList(resource.dataRecordSet, this.articleParent.dataset);
            this.onClientFetch = false;
        }
    },
    setHelp: function($help){
        Field.prototype.setHelp.call(this, $help);
    },
    setDescription: function($description){
        Field.prototype.setDescription.call(this, $description);
    },
    hideTitle: function($isTitleHidden){
        Field.prototype.hideTitle.call(this, $isTitleHidden);
    },
    getDefaultTitle: function(){
        return this._localize.l_defaultTitle;
    },
    getTitle: function(){
        return Field.prototype.getTitle.call(this);
    },
    setTitle: function($title){
        Field.prototype.setTitle.call(this, $title);
        if (this.domTitle) {
            this.domTitle.style.display = this.getTitle().length == 0 ? "none" : "";
        }
    },
    getLocalizedTitle: function($title){
        if ($title && $title.length > 0 && $title[1] == "@") {
            return this.parseExpression($title);
        }
        return $title;
    },
    appendTitle: function(){
        if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
            Field.prototype.appendTitle.call(this);
            this.domTitle.style.display = "none";
        }
    },
    releaseMode: function(onDispose){
        if (this._menusBox) {
            document.controller.disposeObject(this._menusBox);
        }
        this.menuPicker = this._menusBox = null;
        document.controller.disposeObject(this.builder);
        $(this._core).empty();
        this.builder = this.domTitle = this._mandatoryFlag = this._description = this._helpFlag = null;
    },
    toggleDiagnose: function(css, show){
    },
    drawDiagnose: function($diagnose, severityGroup){
        Field.prototype.drawDiagnose.call(this, $diagnose, severityGroup);
    },
    setMenus: function($menus){
        if ($menus) {
            //important copy allow multi binding
            this.applyActionLinkChange({
                $links: $menus.$links,
                $actions: $menus.$actions
            });
        }
    },
    _ensureMenusBox: function(){
        var self = this;
        if (!self._menusBox) {
            self._menusBox = self.page.loadNewItem(self._menusBoxSlot, {
                $category: "menus",
                $skin: "s-list-actions",
                $itemIcon: {
                    $mode: "icon",
                    $path: "list/s-actions-"
                },
                $layout: {
                    $layoutType: "row",
                    $fitToContent: true,
                    $items: [{
                        $bind: "$create"
                    }, {
                        $bind: "$select"
                    }, {
                        $bind: "$delete"
                    }, {
                        $isMenusBag: true,
                        $category: "menus",
                        $title: self._localize.mn_more,
                        $isBoxCollapsable: true,
                        $isPopupContent: true,
                        $id: self.id + "-menu-picker",
                        $skin: "s-list-menus",
                        $itemSkin: "s-field-menus-link",
                        onEnsureVisibility: function(menuGroup, $menuItemBind, menuItem){
                            if ($menuItemBind == "$lazyload") {
                                menuItem.hide(true);
                            }
                        }
                    }]
                },
                onEnsureVisibility: function(menuGroup, $menuItemBind, menuItem){
                    if (!menuGroup.menuGroupRoot.$isPickerVisible) {
                        self._menusBoxSlot.style.display = "";
                        menuGroup.menuGroupRoot.$isPickerVisible = true;
                    }
                }
            }, self);
            self._menusBox.contextField = self;
            self.menuPicker = self.idMap[self.id + "-menu-picker"];
        }
        return self._menusBox;
    },
    applyActionLinkChange: function(resources){
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            this._ensureMenusBox();
            if (resources.$links === null && this._menusBox) {
                this._menusBox.unload();
                this.menuPicker = this._menusBox = null;
            }
        }
        Article.prototype.applyActionLinkChange.call(this, resources);
    },
    createBuilder: function(){
        if (!this.$field.$item.$properties || this.$field.$item.$type == "application/x-reference") {
            this.builder = new SingleBuilder();
        }
        else {
            if ((this.$item.$format = this.$item.$format || "grid") == "cards") {
                this.builder = new CardsBuilder();
            }
            else {
                this.builder = new GridBuilder();
            }
        }
        this.builder.list = this;
        this.builder.initialize();
    },
    reloadBuilder: function(fillData){
        document.controller.disposeObject(this.builder);
        $(this._core).empty();
        this.createBuilder();
        this.builder.drawBuilder();
        if (fillData) {
            this._fillList(this.ensureDataSet(), this.articleParent.dataset);
        }
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if (onAuthoring) {
            if (metaData.$format !== undefined) {
                this.$item.$format = metaData.$format;
                this.reloadBuilder(true);
            }
            if (metaData.$isQuickFilter !== undefined) {
                this.$item.$isQuickFilter = metaData.$isQuickFilter;
                this.reloadBuilder(true);
            }
            if (metaData.$isRowIndexVisible !== undefined) {
                this.$item.$isRowIndexVisible = metaData.$isRowIndexVisible;
                this.reloadBuilder(true);
            }
        }
        if (this.$prototype.$cube || this.$prototype.$decorator) {
            if (!this.graphDecorator) {
                this.graphDecorator = new GraphDecorator();
            }
            this.graphDecorator.applyGraphSettings(this, metaData);
        }
        Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
        this.builder.applyDesignMetaData(metaData, onAuthoring);
        return this.applyFieldsMetaData(metaData, onAuthoring);
    },
    setEditMode: function(state){
        if (state.$editMode !== undefined && this.$editMode != state.$editMode) {
            if (this.$editMode == "cell") {
                this._bindEditFieldEvents(false);
            }
            if ((this.$editMode = state.$editMode) == "cell") {
                this._bindEditFieldEvents(true);
            }
        }
    },
    _bindEditFieldEvents: function(bind){
        var self = this;
        if (bind) {
            self.$$item.delegate("[data-s-field]", "click.editmode", function(event){
                var $$target = $(event.currentTarget);
                var record = self._store.findRecord($$target);
                var field = record.idMap[$$target.attr("data-s-field")];
                self.page.externalAdapter.onFieldEvent({
                    field: field,
                    event: event,
                    doEvent: function(){
                        if (field && !field.$isEditMode) {
                            setTimeout(function(){
                                field.toggleEditMode();
                                field.focus();
                            }, 10);
                        }
                    }
                });
                event.stopPropagation();
            });
        }
        else {
            if (self.$$item) {
                self.$$item.undelegate("click.editmode");
            }
        }
    },
    applyFieldStyle: function(metaData){
        FieldHelper.applyFieldStyle(this, metaData);
    },
    toggleEditMode: function($isEditMode){
    },
    applyFieldsMetaData: function(metaData, onAuthoring){
        var redraw = false;
        this.setEditMode(metaData);
        
        if (metaData.$isReadOnly !== undefined ||
        metaData.$isDisabled !== undefined ||
        metaData.$fieldStyle !== undefined ||
        metaData.$valueStyle !== undefined ||
        metaData.$titleStyle !== undefined) {
            metaData.$item = metaData.$item || {};
            var $properties = metaData.$item.$properties = metaData.$properties || {};
            redraw = true;
            var $binds = Object.keys(this.$fieldProperties);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                var $bind = $binds[ii];
                var $property = $properties[$bind];
                if (!$property) {
                    $property = $properties[$bind] = {};
                }
                if (metaData.$isReadOnly !== undefined && $properties[$bind].$isReadOnly === undefined) {
                    $property.$isReadOnly = metaData.$isReadOnly;
                }
                if (metaData.$isDisabled !== undefined && $property.$isDisabled === undefined) {
                    $property.$isDisabled = metaData.$isDisabled;
                }
                if (metaData.$fieldStyle !== undefined && $property.$fieldStyle === undefined) {
                    $property.$fieldStyle = metaData.$fieldStyle;
                }
                if (metaData.$valueStyle !== undefined && $property.$valueStyle === undefined) {
                    $property.$valueStyle = metaData.$valueStyle;
                }
                if (metaData.$titleStyle !== undefined && $property.$titleStyle === undefined) {
                    $property.$titleStyle = metaData.$titleStyle;
                }
            }
        }
        if (metaData.$orderBy !== undefined) {
            this.sortCapability.setOrderBy(metaData.$orderBy, metaData.$startLetter);
        }
        this.pagingCapability.applyMetadata(metaData, onAuthoring);
        if (metaData.$item) {
            if (metaData.$item.$properties) {
                var $binds = Object.keys(metaData.$item.$properties);
                for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                    var $bind = $binds[ii];
                    var $metaField = metaData.$item.$properties[$bind];
                    var $updated;
                    if (onAuthoring) {
                        for (var ii = 0, jj = this.$item.$layout.$items.length; ii < jj; ii++) {
                            var $item = this.$item.$layout.$items[ii];
                            if ($item.$bind == $bind) {
                                $updated = $item;
                                break;
                            }
                        }
                    }
                    else {
                        $updated = this.$fieldProperties[$bind];
                    }
                    if ($updated) {
                        if (!redraw) {
                            redraw = ($metaField.$isHidden !== undefined) || ($metaField.$isReadOnly !== undefined) ||
                            ($metaField.$isDisabled !== undefined) ||
                            ($metaField.$fieldStyle !== undefined) ||
                            ($metaField.$valueStyle !== undefined) ||
                            ($metaField.$titleStyle !== undefined) ||
                            ($metaField.$title !== undefined);
                        }
                        this.page.ensureDeltaManager().applyObjectDelta($updated, $metaField, true);
                    }
                }
            }
            if (metaData.$item.$links) {
                var $menus = this.$fieldProperties.$links = this.$prototype.$item.$links || {};
                this.page.ensureDeltaManager().applyObjectDelta($menus, metaData.$item.$links, true);
            }
            if (metaData.$item.$actions) {
                var $menus = this.$fieldProperties.$actions = this.$prototype.$item.$actions || {};
                this.page.ensureDeltaManager().applyObjectDelta($menus, metaData.$item.$actions, true);
            }
        }
        if (redraw) {
            this.reloadBuilder();
        }
        return redraw;
    },
    emptyDiagnoseSlot: function(){
        if (this.domDiagnose) {
            document.site.emptyDom(this.domDiagnose);
            this.domDiagnose.style.visibility = "hidden";
        }
    },
    ensureDiagnoseSlot: function(){
        if (!this.domDiagnose && this._dataValue) {
            this.domDiagnose = document.createElement("div");
            this.domDiagnose.className = "s-field-diagnose";
            this._dataValue.appendChild(this.domDiagnose);
        }
        else {
            document.site.emptyDom(this.domDiagnose);
        }
    },
    onMenuClick: function(menuItem){
        var doClick = false;
        if (!menuItem.$isAction && menuItem.$bind == "$select") {
            this._store.doSelectAction();
            return false;
        }
        return true;
    },
    onAfterNotifyDataChange: function(){
        this.onWindowResize(true);
    },
    onNotifyDataChange: function(field, value){
        if (field.$item.$bind == "$itemsPerPage") {
            this.pagingCapability.fetchItemPerPage(value);
        }
        return false;
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        this._store.setState(state);
    },
    setReorderCapability: function(reorder){
        if (reorder) {
            this.$item.$isRowIndexVisible = true;
            if (!this.reorderCapability) {
                (this.reorderCapability = new ReorderCapability(this)).setDraggable();
            }
        }
        else {
            if (this.reorderCapability) {
                document.controller.disposeObject(this.reorderCapability);
                delete this.reorderCapability;
            }
        }
    },
    parseCapabilities: function($capabilities){
        this.$capability = {};
        if ($capabilities !== undefined) {
            var parts = $capabilities.split(",");
            for (var ii = 0, jj = parts.length; ii < jj; ii++) {
                this.$capability[parts[ii]] = true;
            }
            if (this.$capability.reorder !== undefined) {
                this.setReorderCapability(this.$capability.reorder);
            }
        }
    },
    applyCapabilities: function(record){
        var $actions;
        if (record) {
            if (this.$capability.insert) {
                $actions = {
                    $create: {
                        $title: this._localize.slist_insert
                    }
                };
            }
        }
        else {
            if (this.$capability.append) {
                $actions = {
                    $create: {
                        $title: this._localize.slist_append,
                        $isHidden: false
                    }
                };
            }
        }
        if (this.$capability["delete"]) {
            $actions = $actions || {};
            $actions.$delete = {
                $title: this._localize.slist_delete,
                $isHidden: false
            };
        }
        if ($actions) {
            (record || this).applyActionLinkChange({
                $actions: $actions
            });
        }
    },
    _applyMetaDataCapabilities: function(metaData){
        var $prev = this.$capability;
        var $actions;
        this.parseCapabilities(metaData.$capabilities);
        if ($prev.append && !this.$capability.append) {
            $actions = {
                $create: {
                    $isHidden: true
                }
            };
        }
        if ($prev["delete"] && !this.$capability["delete"]) {
            $actions = $actions || {};
            $actions.$delete = {
                $isHidden: true
            };
        }
        if ($actions) {
            this.applyActionLinkChange({
                $actions: $actions
            });
        }
        this.applyCapabilities();
    },
    applyMetaData: function(metaData){
        var redraw = false;
        Field.prototype.applyMetaData.call(this, metaData);
        if (metaData.$type === undefined) {
            if (metaData.$items) {
                if (this.builder.isSingleBuilder) {
                    for (var ii = 0, jj = this._store._records.length; ii < jj; ii++) {
                        this._store._records[ii].applyMetaData(metaData.$items[ii]); //metadata and not applyChange cause no $bind
                    }
                }
                else {
                    for (var ii = 0, jj = metaData.$items.length; ii < jj; ii++) {
                        var $record = metaData.$items[ii];
                        var record = this._store._map[$record.$uuid];
                        if (record) {
                            record.applyChange($record);
                        }
                    }
                }
            }
            redraw = this.applyFieldsMetaData(metaData);
        }
        if (metaData && metaData.$capabilities !== undefined) {
            this._applyMetaDataCapabilities(metaData);
            redraw = redraw || (this._store._records.length > 0);
        }
        return redraw;
    },
    _applyPartialDelta: function(dataRecordSet, firstIndex, lastIndex){
        var found, foundIndex;
        for (var $serverIndex = 0, jj = dataRecordSet.length; $serverIndex < jj; $serverIndex++) {
            var dataSourceRecord = dataRecordSet[$serverIndex];
            found = null;
            foundIndex = 0;
            for (var mm = this._store._records.length; foundIndex < mm; foundIndex++) {
                found = this._store._records[foundIndex];
                if (found.$uuid == dataSourceRecord.$uuid) {
                    break;
                }
                else {
                    found = null;
                }
            }
            if (found) {
                if (dataSourceRecord.$isDeleted) {
                    this._store._records.splice(foundIndex, 1);
                    delete this._store._map[found.$uuid];
                    this.removeRecord(found, true);
                }
                else {
                    found.ensureDataSet();
                    found.applyChange(dataSourceRecord);
                    if (dataSourceRecord.$index !== undefined && dataSourceRecord.$index != foundIndex) {
                        this._store._records.splice(foundIndex, 1);
                        this._store._records.splice(dataSourceRecord.$index, 0, found);
                    }
                }
            }
            else {
                if (!dataSourceRecord.$isDeleted) {
                    var index = dataSourceRecord.$index !== null && dataSourceRecord.$index !== undefined ? dataSourceRecord.$index : $serverIndex;
                    if (firstIndex !== undefined) {
                        if ((index < firstIndex) ||
                        (lastIndex != undefined && index >= lastIndex)) {
                            index = -1;
                        }
                    }
                    if (index != -1) {
                        this._store.appendRecord({
                            dataRecord: dataSourceRecord,
                            $serverIndex: dataSourceRecord.$index,
                            $recordIndex: dataSourceRecord.$index,
                            isInsert: true
                        });
                    }
                }
            }
        }
        this._store.ensureRecordsIndex();
    },
    _applyRecordListDelta: function(dataRecordSet, firstIndex, lastIndex){
        var orderChanged;
        var oldMap = this._store._map;
        this._store._map = {};
        this._store._records = [];
        var lastRecord;
        for (var $serverIndex = 0, jj = dataRecordSet.length; $serverIndex < jj; $serverIndex++) {
            var dataRecord = dataRecordSet[$serverIndex];
            var record = oldMap[dataRecord.$uuid];
            if (record) {
                record.applyChange(dataRecord);
                if (record.$serverIndex != $serverIndex) {
                    if (lastRecord) {
                        record.notifyReorder(lastRecord, "insertAfter");
                    }
                    else {
                        record.notifyReorder(null, "prepend");
                    }
                    record.$recordIndex = record.$serverIndex = $serverIndex;
                    record.ensureDataSet();
                    orderChanged = true;
                }
                this._store._records.push(this._store._map[dataRecord.$uuid] = lastRecord = record);
            }
            else {
                //var index = dataRecord.$index || $serverIndex;
                if (!(firstIndex !== undefined &&
                ($serverIndex < firstIndex ||
                (lastIndex != undefined && $serverIndex >= lastIndex)))) {
                    record = this._store.appendRecord({
                        dataRecord: this.dataset[$serverIndex],
                        $serverIndex: $serverIndex,
                        $recordIndex: $serverIndex,
                        isInsert: true
                    });
                    this._store._map[dataRecord.$uuid] = lastRecord = record;
                    orderChanged = true;
                }
            }
            delete oldMap[dataRecord.$uuid];
        }
        var uiids = Object.keys(oldMap);
        for (var ii = 0, jj = uiids.length; ii < jj; ii++) {
            this.removeRecord(oldMap[uiids[ii]], true);
        }
        if (orderChanged) {
            this._store.ensureRecordsIndex();
        }
    },
    removeRecord: function(record, removeDom){
        if (record.list) {
            fieldDiagnoseUtils.cleanRecordDiagnoses(record);
            this.removeItem(record, removeDom);
        }
    },
    _fillList: function(dataRecordSet, parentDataRecord, isDelta){
        if (this.isClientFetch && this.pagingCapability) {
            //reset clientTotal result 
            delete this.pagingCapability.clientTotalRecords;
        }
        this.applyCapabilitiesSettings(parentDataRecord);
        if (isDelta) {
            var firstIndex, lastIndex;
            if (this.pagingCapability) {
                firstIndex = this.pagingCapability.$startIndex;
                if (firstIndex !== undefined) {
                    --firstIndex;
                    if (this.pagingCapability._$itemsPerPage !== undefined) {
                        lastIndex = firstIndex + this.pagingCapability._$itemsPerPage;
                    }
                }
            }
            if (this.page.$isPartialDelta || (dataRecordSet.length == 1 && dataRecordSet[0].$index !== undefined)) {
                this._applyPartialDelta(dataRecordSet, firstIndex, lastIndex);
            }
            else {
                this._applyRecordListDelta(dataRecordSet, firstIndex, lastIndex);
            }
            if (lastIndex) {
                if (this._store._records.length > this.pagingCapability._$itemsPerPage) {
                    while (this._store._records.length > this.pagingCapability._$itemsPerPage) {
                        var record = this._store._records[this._store._records.length - 1];
                        delete this._store._map[record.$uuid];
                        this.removeRecord(record, true);
                        this._store._records.pop();
                    }
                }
                /* Version initial : pb provoque un plantage sur picker page autre que la premier car setPage() pas nécessaire
                 if (this.isClientFetch && this._store._records.length < lastIndex) {
                 if (this.pagingCapability.$startIndex != 1) {
                 this.pagingCapability.setPage(0);
                 }
                 }*/
                // Proposition new version:
                /* Passage à la page 1 si :
                 Le nb d'enr reel est < = au premier index affiche ou
                 si tout les enreg a afficher ne sont pas presents dans _store
                 * */
                if (this.isClientFetch && (this.dataset.length <= firstIndex || (this._store._records.length < this.pagingCapability._$itemsPerPage && this._store._records.length < (this.dataset.length - firstIndex)))) {
                    if (this.pagingCapability.$startIndex != 1) {
                        this.pagingCapability.setPage(0);
                    }
                }
            }
            
        }
        else {
            this.builder._body.style.display = "none";
            this._store.removeRecords(!(dataRecordSet && dataRecordSet.length > 0));
            var dataSource = this.ensureDataSet();
            if (dataRecordSet) {
                var $startIndex = 1;
                var $itemsPerPage = this.pagingCapability._$itemsPerPage || dataRecordSet.length;
                if (this.isClientFetch && this.pagingCapability) {
                    if (this.onClientFetch) {
                        dataSource = dataRecordSet;
                        this.pagingCapability.ensureItemsPerPage();
                        this.pagingCapability.clientTotalRecords = dataRecordSet.length;
                        $startIndex = this.pagingCapability.$startIndex;
                        $itemsPerPage = this.pagingCapability._$itemsPerPage;
                    }
                    else {
                        if (dataRecordSet.length > this.pagingCapability._$itemsPerPage) {
                            var options = this.pagingCapability.goToClientPage();
                            $startIndex = options.$startIndex;
                            $itemsPerPage = options.$itemsPerPage;
                        }
                    }
                    
                }
                for (var $serverIndex = $startIndex - 1, count = 0, jj = dataRecordSet.length; (count < $itemsPerPage) && ($serverIndex < jj); count++, $serverIndex++) {
                    var dataRecord = dataRecordSet[$serverIndex];
                    if (!dataRecord.$isDeleted) {
                        var dataSourceRecord = dataSource[$serverIndex];
                        if (dataSourceRecord.$serverIndex == undefined) {
                            dataSourceRecord.$serverIndex = $serverIndex;
                        }
                        this._store.appendRecord({
                            dataRecord: dataSourceRecord, //prev dataRecord,
                            $serverIndex: dataSourceRecord.$serverIndex,
                            $recordIndex: count
                        });
                    }
                }
            }
        }
        if (this.builder.onAfterDataBinding) {
            this.builder.onAfterDataBinding();
        }
        this.pagingCapability.draw();
        this.sortCapability.renderOrderBy();
        if (this.builder._bodySlot) {
            this.builder._bodySlot.style.visibility = "hidden";
        }
        this.builder._body.style.display = "";
        this.onWindowResize(true);
        if (this.builder._bodySlot) {
            this.builder._bodySlot.style.visibility = "visible";
        }
    },
    setDataBind: function(dataRecordSet, parentDataRecord, metaData){
        this.ensureDataSet();
        var redraw = false;
        if (metaData) {
            if (redraw = this.applyMetaData(metaData)) {
                this._fillList(this.ensureDataSet(), this.articleParent.dataset);
            }
        }
        if (dataRecordSet !== undefined) {
            if (this.page.$isPartialDelta || (this.page.isDeltaMode && this._store.hasRecords() && !this.builder.isSingleBuilder)) {
                this._fillList(dataRecordSet, parentDataRecord, true);
            }
            else {
                this._fillList(dataRecordSet, parentDataRecord);
            }
        }
        if (this.graphDecorator) {
            var graphRecords = [];
            for (var ii = 0, jj = this._store._records.length; ii < jj; ii++) {
                graphRecords.push(this._store._records[ii].dataset);
            }
            // this.graphDecorator.setDataBind(dataRecordSet, parentDataRecord, metaData);
            this.graphDecorator.setDataBind(graphRecords, parentDataRecord, metaData);
        }
    },
    validate: function(){
        return this._store.validate();
    },
    dispose: function(){
        document.site.removeResizeListener(this);
        this.setReorderCapability(false);
        this._bindEditFieldEvents(false);
        delete this._menus;
        if (this._menusBox) {
            document.controller.disposeObject(this._menusBox);
        }
        this.menuPicker = this._menusBox = null;
        delete this.page;
        Article.prototype.dispose.call(this);
    },
    
    setFocus: function(name, $serverIndex){
        var record = this._store.findRecordByServerIndex($serverIndex);
        if (record && !record.disposed) {
            var fields = record.boundFields[name];
            if (fields && fields.length > 0) {
                return fields[0].focus();
            }
        }
        else {
            if (this.isClientFetch) {
                this.pagingCapability.setPage($serverIndex);
                return this.setFocus(name, $serverIndex)
            }
        }
        return false;
    },
    getDataValue: function(name, $serverIndex){
        var field = this.getField(name, $serverIndex);
        if (field && field.$isEditMode) {
            return field.getDataValue();
        }
        else {
            return null;
        }
    },
    getField: function(name, $serverIndex){
        var fields, record = this._store.findRecordByServerIndex($serverIndex);
        if (record && !record.disposed) {
            if ((fields = record.boundFields[name]) && fields.length > 0) {
                return fields[0];
            }
        }
        return null;
    },
    getSelectedRecordIndexes: function(){
        var result = [], ir = -1, r = {};
        this._store._records.filter(function(elt, idx){
            if (elt.$$item && elt.$$item.hasClass("s-list-record-selected")) {
                return true
            }
            return false
        }).forEach(function(elt, idx){
            if (!result[ir] || result[ir].start + result[ir].count != elt.$recordIndex) {
                r = {};
                r.start = elt.$recordIndex;
                r.count = 1;
                result.push(r);
                ir++;
            }
            else {
                result[ir].count++
            }
        })
        return result;
    }
});
