"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

var Field = require('syracuse-ui/lib/field/field').Field;
var FieldHelper = require('syracuse-ui/lib/field/fieldHelper');
var GridBuilder = require("./gridBuilder/gridBuilder").GridBuilder;
var SingleBuilder = require("./singleBuilder/singleBuilder").SingleBuilder;
var CardsBuilder = require("./cardsBuilder/cardsBuilder").CardsBuilder;
var PagingCapability = require("./capability/pagingCapability").PagingCapability;
var SortCapability = require("./capability/sortCapability").SortCapability;
var SearchCapability = require("./capability/searchCapability").SearchCapability;
var GraphDecorator = require("./graphDecorator").GraphDecorator;
var TreeDecorator = require("./treeDecorator").TreeDecorator;
var ReorderCapability = require('./capability/reorderCapability').ReorderCapability;
var SelectorCardRecord = require("./selector/selectorCardRecord").SelectorCardRecord;
var parser = require('syracuse-sdata/lib/parser/parser');

var _recordSelectors = {
	multi: require('./selector/multiRecordSelector').MultiRecordSelector,
	single: require('./selector/singleRecordSelector').SingleRecordSelector,
	button: require('./selector/buttonRecordSelector').ButtonRecordSelector,
	row: require('./selector/rowRecordSelector').RowRecordSelector
};


function DesktopList() {}

exports.DesktopList = helpers.defineClass(DesktopList, Article, {
	ensureDataSet: function() {
		return this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || [];
	},
	getMetaData: function() {
		var $properties = this.articleParent.dataset.$properties;
		return $properties ? $properties[this.$item.$bind] : null;
	},
	ensureLayoutMode: function() {
		Field.prototype.ensureLayoutMode.call(this);
	},
	setAdvancedState: function($isAdvanced, designing) {
		Field.prototype.setAdvancedState.call(this, $isAdvanced, designing);
	},
	showAdvancedState: function(show) {
		Field.prototype.showAdvancedState.call(this, show);
	},
	loadBox: function(initData) {
		this.isList = true;
		this.articleParent.resizableChildren[this.id] = this;

		this.page.attachToPageResizeListener(true, this);
		Article.prototype.loadBox.call(this, initData);
		this.articleParent.bind(this, this.$item.$bind);
		if (document.site.enableTestRobot) {
			Field.prototype.appendQualityAtt.call(this, this._domItem);
		}
		if (this.records.length == 0) {
			this.builder.emptyBody(true, this.page.$autoFetch !== false);
		}
	},
	selectServerFilter: function(filterId) {
		if (this.serverFilters) {
			if (this.serverFilters.selected) {
				document.site.toggleClass(this.serverFilters.selected.mn, "s-selected", false);
				delete this.serverFilters.selected;
			}
			if (filterId === null || filterId === "null") {
				filterId = "$noFilters";
				this.serverFilters.selected = this.menuItems[this.serverFilters.menus.id + "-" + filterId][0];
				document.site.toggleClass(this.serverFilters.selected.mn, "s-selected", true);
			}
		}
	},
	showDiagnoses: function(diagnoses, options) {
		Field.prototype.showDiagnoses.call(this, diagnoses, options);
	},
	_checkFilterCapability: function() {
		var isFilterCapability;
		var $binds = Object.keys(this.$fieldProperties);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $field = this.$fieldProperties[$binds[ii]];
			if (!$field.$isExcluded && $field.$capabilities && ($field.$capabilities.indexOf("filter") >= 0)) {
				isFilterCapability = true;
				break;
			}
		}
		if ((!isFilterCapability && this.$item.$isQuickFilter) || (isFilterCapability && this.$item.$isQuickFilter === undefined)) {
			this.$item.$isQuickFilter = isFilterCapability;
		}
	},
	drawBox: function() {
		this.arrayLevel = "array";
		this.isRecordDataset = true; //!important for sendBag
		this._isAddDisabled = false;
		this.records = [];
		this.recordsMap = {};

		this.sortCapability = new SortCapability(this);
		this.searchCapability = new SearchCapability(this);
		this.pagging = new PagingCapability(this);
		this.createBuilder();

		this.$fieldProperties = this.$prototype.$item.$properties || {};
		this._checkFilterCapability();

		this.$recordFacet = this.articleParent.$item.$recordFacet || this.$facet || "$details";
		switch (this.articleParent.$facet) {
			case "$query":
				if (this.page.$prototype.$url && this.page.$prototype.$url.indexOf("employees") >= 0) {
					this.page.$prototype.$filters = this.page.$prototype.$filters || {
						filter1: {
							$title: "filter Server Test 1"
						},
						filter2: {
							$title: "filter Server Test 2"
						}
					};
				}
				if (this.page.$prototype.$filters) {
					if (this.page.menuBar) {
						this.serverFilters = {
							menus: this.page.loadNewItem(this.page.menuBar.body, {
								$category: "menus",
								$isMenuFilters: true,
								$skin: "s-mn-bar-filters",
								$title: this.localize.flFilters
							}, this)
						};
						this.serverFilters.menus._ensurePrivateMenus({
							$filters: {
								$noFilters: {
									$title: this.localize.flNoFilter
								}
							}
						}, "$filters");
						this.serverFilters.noFilters = this.menuItems[this.serverFilters.menus.id + "-$noFilters"][0];
						this.serverFilters.noFilters.setStyle("nofilter");
						this.serverFilters.menus._ensurePrivateMenus(this.page.$prototype, "$filters");
						if (this.$urlParams && this.$urlParams.filter) {
							this.selectServerFilter(this.$urlParams.filter);
						}
						this.page.menuBar.toggleBar(true);
					}
				}
				break;
			case "$bulk":
			case "$search":
				break;
			case "$lookup":
				this.$item.$selectMode = "row";
				this.$item.$isPageHeightDocked = true;
				break;
			case "$select":
				this.$item.$selectMode = "multi";
				break;
			default:
				this.isClientFetch = this.isClientFetch !== false;
				if (this.$prototype.$treeview) {
					this.isClientFetch = false;
					this.isPagingDisabled = !this.$item.$isNavigationList;
					if (this.$item.$itemsPerPage) {
						//  this.$item.$fixedBodyHeight = (parseInt(this.$item.$itemsPerPage || 10, 10) * 20) + "px";
						delete this.$item.$itemsPerPage;
					}
				}
				break;
		}

		if (this.$prototype.$treeview) {
			(this.treeDecorator = new TreeDecorator()).load(this);
		}

		if ((this.$isEditMode = this.$item.$isEditMode) === undefined) {
			this.$isEditMode = this.articleParent.$isEditMode;
		}
		this.applyCapabilitiesSettings(this.$prototype);

		if (!this.$item.$layout) {
			this.$item.$layout = {};
		}
		if (!this.$item.$layout.$items) {
			this.$item.$layout.$items = [];
			var $binds = Object.keys(this.$fieldProperties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				if (!this.$fieldProperties[$binds[ii]].$isExcluded) {
					this.$item.$layout.$items.push({
						$bind: $binds[ii]
					});
				}
			}
		} else {
			for (var ii = 0, jj = this.$item.$layout.$items.length; ii < jj; ii++) {
				var $fieldItem = this.$item.$layout.$items[ii];
				if ($fieldItem && $fieldItem.$bind) {
					if (!this.$fieldProperties[$fieldItem.$bind] || this.$fieldProperties[$fieldItem.$bind].$isExcluded) {
						this.$item.$layout.$items.splice(ii, 1);
						ii--;
						jj--;
					}
				}
			}
		}
		if (this.$prototype.$cube) {
			if ((this.$item.$graphMode = this.$item.$graphMode || "both") == "both") {
				if (this.$item.$graphPosition === undefined) {
					this.$item.$graphPosition = "front";
				}
			}
		}

		this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
		if (this.$isEditMode) {
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
			this.inputId = this.id + "-input";
		}
		Field.prototype._initCss.call(this);

		this._domItem = document.createElement("div");
		this._domItem.className = this._$cssTopField;
		this.$$item = $(this._domItem);
		if (this.$item.$selectorCard) {
			this.selectorCardRecord = new SelectorCardRecord();
			this.selectorCardRecord.initialize(this);
		} else {
			this.layoutSlot.appendChild(this._domItem);
		}
		this.appendTitle();

		this._createValueContainer();

		this.setTitle(this.$item.$title || this.$field.$title);
		this.setDescription(this.$item.$description || this.$field.$description);
		this.setState(this.$field);

		this.fieldValue.className += " s-list";

		this.topbar = document.createElement("div");
		this.topbar.className = "s-list-topbar";
		this.fieldValue.appendChild(this.topbar);

		this._core = document.createElement("div");
		this._core.className = "s-list-core";
		this.fieldValue.appendChild(this._core);

		if (this.$isQuickDesignerEnabled === undefined) {
			this.$isQuickDesignerEnabled = this.$item.$isQuickDesignerEnabled;
		}

		this._menusSlot = document.createElement("div");
		this._menusSlot.className = "s-list-menus-cell";
		if (this.$item.$isPopupMenuHidden) {
			this._menusSlot.style.display = "none";
		}
		this.topbar.appendChild(this._menusSlot);
		this.searchCapability.draw();
		this.builder.drawBuilder();
		this.ensureLayoutMode();
		if (this.selectorCardRecord) {
			this.selectorCardRecord.loadBox();
		}
		if (this.$isQuickDesignerEnabled !== false) {
			this.applyActionLinkChange({
				"$authoring": {
					$title: this.localize.flAuthoring
				}
			});
		}
	},
	ensureBottomBar: function() {
		if (!this.bottombar) {
			this.bottombar = document.createElement("div");
			this.bottombar.className = "s-list-bottombar";
			this.ensureArticleId();
			this.fieldValue.appendChild(this.bottombar);
		}
		return this.bottombar;
	},
	ensureArticleId: function() {
		this.topbar.setAttribute("data-s-article", this.id);
		this._core.setAttribute("data-s-article", this.id);
		if (this.bottombar) {
			this.bottombar.setAttribute("data-s-article", this.id);
		}
	},
	applyCapabilitiesSettings: function(newData) {
		this.pagging.setOptions(newData);
		this.sortCapability.setOrderBy(newData.$orderBy, newData.$startLetter);
		if (newData.$where !== undefined) {
			this.$where = newData.$where;
		}
	},
	setSortCapability: function() {
		this.sortCapability.load();
	},
	onWindowResize: function() {
		if (this.selectorCardRecord) {
			this.selectorCardRecord.onWindowResize();
		}
		if (this.treeDecorator) {
			this.treeDecorator.onWindowResize();
		}
		if (this.builder && this.builder.onWindowResize) {
			this.builder.onWindowResize();
		}
		if (this.graphDecorator && this.graphDecorator.onWindowResize) {
			this.graphDecorator.onWindowResize();
		}
	},
	_createValueContainer: function() {
		this.domValueSlot = document.createElement("article");
		this.domValueSlot.className = this._$cssField + "-value";
		this._dataValue = this._core = this.fieldValue = this.domValueSlot;
		this.$$fieldValue = $(this.fieldValue);
		this._domItem.appendChild(this.domValueSlot);
	},
	fetch: function(options, $location) {
		var params = {
			where: this.$where,
			select: this.$select
		};
		if (options) {
			if (options.$filters) {
				if (options.$filters == "$noFilters") {
					params.filter = "null";
				} else {
					params.filter = options.$filters;
				}
				this.selectServerFilter(params.filter);
				this.paramsFilter = params.filter;
			} else {
				if (this.paramsFilter) {
					params.filter = this.paramsFilter;
				}
			}
			params.startLetter = options.startLetter;
			params.startIndex = options.startIndex;
			this.pagging.setOptions({
				$itemsPerPage: options.$itemsPerPage
			});
			params.count = this.pagging.$itemsPerPage;
			if (options.orderBy !== undefined) {
				params.startIndex = 1;
				this.sortCapability.setOrderBy(options.orderBy, options.startLetter);
			}
			if (options.filter != null) {
				params.startIndex = 1;
				params.where = this.$where = options.filter != "" ? options.filter : null;
			}
			if (options.queryBindings) {
				if (options.queryBindings.length == 0) {
					var $binds = Object.keys(this.$fieldProperties);
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						options.queryBindings.push($binds[ii]);
					}
				}
				this.select = options.queryBindings.map(function(binding) {
					return binding.replace(/\./g, '/');
				}).join(',');
			}
		}
		params.orderBy = this.sortCapability.stringify();
		var fetchOptions = {
			params: params
		};
		if (this.isClientFetch || this.isClientSortEnable) {
			options = options || {};
			var $keys = Object.keys(options);
			this.fetchClientRecordSet(fetchOptions, $keys.length == 1 && ($keys == "$itemsPerPage" || $keys == "startIndex"));
		} else {
			fetchOptions.field = this;
			fetchOptions.$updateHitory = this.page.isMainPage;
			fetchOptions.$location = $location;
			this.articleParent.fetch(fetchOptions);
		}
		if (this.articleParent.onFetchHandler) {
			this.articleParent.onFetchHandler(fetchOptions);
		}
	},
	fetchClientRecordSet: function(options, pagingChange) {
		if (options && options.params) {
			var $orderBy;
			this.ensureDataSet();
			if (!pagingChange || (this.clientDataset == this.dataset)) {
				this.clientDataset = [];
				for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
					var dataRecord = this.dataset[ii];
					this.clientDataset.push(dataRecord);
				}
			}
			if (!pagingChange) {
				if (options.params.where) {
					var exp = parser.Parser.parse(options.params.where);
					var filterDataSet = [];
					for (var ii = 0, jj = this.clientDataset.length; ii < jj; ii++) {
						var record = this.clientDataset[ii];
						var ok = false;
						// quick workaround ($title). to improve for generic cases
						var ff = record[exp.children[0].value];
						if (typeof(ff) == "object") {
							ok = ff.$title.search(new RegExp(exp.children[1].value.replace("%", "", "g"), "i")) >= 0;
						} else {
							if (typeof(exp.children[1].value) == "string") {
								ok = ff.search(new RegExp(exp.children[1].value.replace("%", "", "g"), "i")) >= 0;
							} else {
								// case of integer (application/x-choice)
								ok = typeof(ff) == "number" && typeof(exp.children[1].value) && ff == exp.children[1].value;
							}
						}
						if (ok) {
							filterDataSet.push(record);
						}
					}
					this.clientDataset = filterDataSet;
				}
				if (options.params.orderBy !== undefined) {
					if (options.params.orderBy === null) {
						$orderBy = null;
						this.sortCapability.resetSort();
						delete this.sortCapability._$orderBy;
					} else {
						$orderBy = this.sortCapability.parse(options.params.orderBy);
						if (options.params.startLetter) {
							this.sortCapability.filterByStartLetter({
								binding: $orderBy[0].binding,
								startLetter: options.params.startLetter
							});
						}
					}
					this.sortCapability.sort($orderBy);
				}
			}
			if (options.params.count || options.params.startIndex) {
				this.pagging.goToClientPage({
					$itemsPerPage: options.params.count,
					$startIndex: options.params.startIndex
				});
			}
			this.clientFetchOptions = options;
			this.fillList(this.clientDataset, this.articleParent.dataset);
		}
	},
	loadSelector: function() {
		if (this.selector && this.selector.dispose) {
			this.selector.dispose();
		}
		var selectorClass = _recordSelectors[this.$item.$selectMode];
		if (selectorClass) {
			(this.selector = new selectorClass()).load(this);
		} else {
			this.selector = {};
		}
	},
	setHelp: function($help) {
		Field.prototype.setHelp.call(this, $help);
	},
	setDescription: function($description) {
		Field.prototype.setDescription.call(this, $description);
	},
	hideTitle: function($isTitleHidden) {
		Field.prototype.hideTitle.call(this, $isTitleHidden);
	},
	getDefaultTitle: function() {
		return this.localize.flDefaultTitle;
	},
	getTitle: function() {
		return Field.prototype.getTitle.call(this);
	},
	setTitle: function($title) {
		Field.prototype.setTitle.call(this, $title);
		if (this.domTitle) {
			this.domTitle.style.display = this.getTitle().length == 0 ? "none" : "";
		}
	},
	getLocalizedTitle: function($title) {
		if ($title && $title.length > 0 && $title[1] == "@") {
			return this.parseExpression($title);
		}
		return $title;
	},
	appendTitle: function() {
		if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
			Field.prototype.appendTitle.call(this);
			this.domTitle.style.display = "none";
		}
	},
	setMenus: function($menus) {
		if ($menus) {
			//important copy allow multi binding
			this.applyActionLinkChange({
				$links: $menus.$links,
				$actions: $menus.$actions
			});
		}
	},
	onAddMenuItem: function($menu) {
		switch ($menu.$bind) {
			case "$first":
			case "$previous":
			case "$next":
			case "$last":
				return false;
		}
		return true;
	},
	_clearMenuItems: function() {
		Article.prototype._clearMenuItems.call(this);
		if (this.menusBox) {
			this._menusSlot.style.display = "none";
			this.menusBox.layoutParent.removeItem(this.menusBox, true);
			this.removeMenuBag(this.menusBox);
			delete this.menusBox;
		}
	},
	onMenuDataFilled: function(menuItem) {
		if (menuItem.boxParent.isMenuGroup) {
			var menuGroupRoot = menuItem.boxParent.menuGroupRoot;
			if (menuGroupRoot.id == (this.id + "-menu-picker")) {
				if (!menuGroupRoot.$isPickerVisible && !menuGroupRoot.$item.$isMenuFilters) {
					this._menusSlot.style.display = "";
					menuGroupRoot.$isPickerVisible = true;
				}
				if (!menuItem.$item.$isTop && !menuGroupRoot.isAddinMenus) {
					menuGroupRoot.isAddinMenus = true;
					menuGroupRoot.layoutContent.items[0].layoutSlot.className += " s-record-menus-addins";
				}
			}
		}
	},
	_createMenusBox: function() {
		var $menuBag = {
			$isMenusBag: true,
			$category: "menus",
			$noText: true,
			$title: this.localize.flActions,
			$isTitlePicker: true,
			$isBoxCollapsable: true,
			$isPopupContent: true,
			$id: this.id + "-menu-picker",
			$skin: "s-list-menus",
			$itemSkin: "s-record-menus-link",
			$layout: {
				$items: []
			}
		};
		if (this.$prototype.$cube || this.$prototype.$decorator) {
			$menuBag.$layout.$items.push({
				$bind: "$toggleGraph",
				$icon: {
					$mode: "iconText",
					$path: "list/s-list-"
				}
			});
		}
		if (this.$isQuickDesignerEnabled !== false) {
			$menuBag.$layout.$items.push({
				$bind: "$authoring",
				$isTop: true,
				$icon: {
					$mode: "iconText",
					$path: "list/s-list-"
				}
			});
		}
		$menuBag.$layout.$items.push({
			$bind: "$cancelSort",
			$isTop: true,
			$icon: {
				$mode: "iconText",
				$path: "list/s-list-"
			}
		});
		this.page.loadNewItem(this._menusSlot, {
			$layoutType: "row",
			$autoSize: true,
			$items: [{
					$skin: "s-list-menus-link",
					$bind: "$create",
					$category: "link",
					$icon: {
						$mode: "iconText",
						$path: "list/s-list-"
					}
				}, {
					$skin: "s-list-menus-link",
					$bind: "$select",
					$category: "link",
					$icon: {
						$mode: "iconText",
						$path: "list/s-list-"
					}
				}, {
					$skin: "s-list-menus-link",
					$bind: "$delete",
					$category: "link",
					$icon: {
						$mode: "iconText",
						$path: "list/s-list-"
					}
				},
				$menuBag
			]

		}, this);
		this.menusBox = this.idMap[this.id + "-menu-picker"];
		this.menusBox.contextField = this;
	},
	applyActionLinkChange: function(resources) {
		if (!this.menusBox && resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
			this._createMenusBox();
		}
		Article.prototype.applyActionLinkChange.call(this, resources);
	},
	createBuilder: function() {
		if (!this.$field.$item.$properties || this.$field.$item.$type == "application/x-reference") {
			this.builder = new SingleBuilder();
		} else {
			if ((this.$item.$format = this.$item.$format || "grid") == "cards") {
				this.builder = new CardsBuilder();
			} else {
				this.builder = new GridBuilder();
			}
		}
		this.builder.list = this;
		this.builder.initialize();
	},
	reloadLayout: function($item) {
		this.$item = $item;
		this.reloadBuilder();
	},
	reloadBuilder: function() {
		this.builder.dispose();
		document.site.emptyDom(this._core);
		this.createBuilder();
		this.builder.drawBuilder();
		this.fillList(this.clientDataset, this.articleParent.dataset);
	},
	applyFieldStyle: function(metaData) {
		FieldHelper.applyFieldStyle(this, metaData);
	},
	toggleEditMode: function($isEditMode) {},
	onFieldDiagnoseChange: function(add, record) {
		// --- handling grid diag alert info ---

		if (record) {
			var ids = record.diagnosesFields ? Object.keys(record.diagnosesFields) : ids;
			if (ids && ids.length != 0) {
				for (var ii = 0, jj = ids.length; ii < jj; ii++) {
					this.onFieldDiagnoseChange();
				}
			}
		} // if diagnose is added to a cell
		if (add) { // list diag count
			this.diagCount = this.diagCount || 0;
			// list diag info message
			if (!this.diagAlert) {
				var msg = document.createElement("div");
				msg.className = "s-grid-diag-alert";
				this._menusSlot.parentNode.insertBefore(msg, this._menusSlot.nextSibling);
				this.diagAlert = msg;
			}
			this.diagAlert.textContent = ++this.diagCount + this.localize.flDiagAlert;
		}

		// if diagnose is removed from a cell. clean
		else {
			if (this.diagAlert) {
				this.diagAlert.textContent = --this.diagCount + this.localize.flDiagAlert;
				if (this.diagCount == 0) {
					document.site.emptyDom(this.diagAlert);
					this.diagAlert = null;
				}
			}
		}
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$menuType == "$filters") {
			this.fetch({
				$filters: menuItem.$sourceBind
			});
			return false;
		}
		if (!menuItem.$isAction) {
			switch (menuItem.$bind) {
				case "$select":
					this.doSelectAction();
					return false;
				case "$toggleGraph":
					if (this.graphDecorator) {
						this.graphDecorator.switchView();
					}
					return false;
				case "$cancelSort":
					this.sortCapability.cancelSort();
					return false;
				case "$authoring":
					//document.site.openAuthoringPage(true, this);
					return false;
			}
		}
		return true;
	},
	doSelectAction: function() {
		var self = this;
		if (self.$prototype.$item.$type == "application/x-choice") {
			self.builder.loadChoiceSelector();
		} else {
			self.currentSelectRecords = null;
			self.boxParent.openDialog({
				article: self,
				$url: self.menuItems.$select[0].$sourceUrl,
				onValidate: function() {
					self.notifySelectRecords();
				},
				onSelectRecord: function(selectedRecords) {
					self.currentSelectRecords = selectedRecords;
					return false;
				}
			});
		}
	},
	notifyActionChange: function(target, value, notifyServer) {
		var sendBag = this.page.ensureSendBag(this);
		var dataRecords = this.ensureDataSet();
		var record = target.isRecordArticle ? target : null;
		if (value.$create) {
			var options = {
				isCreate: true
			};
			if (record) {
				options.$serverIndex = record.$serverIndex;
				options.$recordIndex = record.$recordIndex;
				options.isInsert = true;
			} else {
				if (this.records.length > 0) {
					options.$serverIndex = this.records[this.records.length - 1].$serverIndex + 1;
				} else {
					options.$serverIndex = 0;
				}
				options.$recordIndex = this.records.length;
			}
			if (this.builder.isSingleBuilder) {
				(sendBag.dataRecords = dataRecords).splice(options.$recordIndex, 0, null);
				this._appendRecord(options);
				this._validateDisplay();
				//this._disableAdd( true);
			} else {
				options.dataRecord = {
					$uuid: helpers.uuid.generate()
				};
				if (record) {
					var found = this.findDataRecord(record.$uuid);
					dataRecords.splice(found.dataRecordIndex, 0, options.dataRecord);
				} else {
					dataRecords.splice(options.$serverIndex, 0, options.dataRecord);
				}
				var newRecord = this._appendRecord(options);
				//sendbag begin
				var saved = {
					$uuid: newRecord.dataset.$uuid
				};
				if (sendBag.dataRecords.length > 0) {
					sendBag._ensureFullDataSet(this);
					if (!sendBag._findDataRecord(saved.$uuid)) {
						sendBag.dataRecords.splice(options.$recordIndex, 0, saved);
					}
				} else {
					saved.$index = options.$recordIndex;
					sendBag.dataRecords.push(saved);
				}
				//sendbag end                
				this._validateDisplay();
				this.page.notifyDataChange(this, sendBag.dataRecords);
			}
		} else {
			if (record) {
				this.records.splice(record.$recordIndex, 1);
				if (this.builder.isSingleBuilder) {
					dataRecords.splice(record.$recordIndex, 1);
					sendBag.dataRecords = dataRecords;
				} else {
					var found = this.findDataRecord(record.$uuid);
					if (found) {
						dataRecords.splice(found.dataRecordIndex, 1);
						record.$index = found.dataRecordIndex;
					}
					var found = sendBag.ensureRecord(record);
					if (sendBag.dataRecords.length == 1) {
						found.dataRecord.$index = record.$serverIndex;
						found.dataRecord.$isDeleted = true;
					} else {
						sendBag.dataRecords.splice(found.dataRecordIndex, 1);
					}
					delete record.$index;
				}
				delete this.recordsMap[record.$uuid];
				this.removeRecord(record, true);
			} else {
				dataRecords.splice(0, dataRecords.length);
				sendBag.dataRecords = [];
				this.removeRecords();
			}
			this._validateDisplay();

			if (this.records.length == 0) {
				this.builder.emptyBody(true);
			}
			this.page.notifyDataChange(this, sendBag.dataRecords);
		}
	},
	findDataRecord: function($uuid) {
		var found;
		if (this.dataset) {
			for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
				var dataRecord = this.dataset[ii];
				if (dataRecord && dataRecord.$uuid == $uuid) {
					found = {
						dataRecord: dataRecord,
						dataRecordIndex: ii
					};
					break;
				}
			}
		}
		return found;
	},
	onAfterNotifyDataChange: function() {
		this.onWindowResize();
	},
	onNotifyDataChange: function(field, value) {
		if (field.$item.$bind == "$itemsPerPage") {
			this.pagging.fetchItemPerPage(value);
		}
		return false;
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
	},
	showField: function(show) {
		Field.prototype.showField.call(this, show);
	},
	applyRecordCapabilities: function(record, $recordActions) {
		var $actions = $recordActions || {};
		if (this.$capability.insert) {
			$actions.$create = {
				$title: this.localize.flInsert,
				$isHidden: false
			};
		}
		if (this.$capability["delete"]) {
			$actions.$delete = {
				$title: this.localize.flDelete,
				$isHidden: false
			};
		}
		if ($actions.$create || $actions.$delete) {
			record.applyActionLinkChange({
				$actions: $actions
			});
		}
		if ($recordActions) {
			//on metadata
			if (record.hasReorderCapability != this.$capability.reorder) {
				record.applyReorderCapability(this.$capability.reorder);
			}
		}
	},
	applyCapabilities: function($metaCapablities) {
		var $actions = {};
		var $recordActions = {};
		var $capabilities = $metaCapablities;
		if ($capabilities === undefined) {
			$capabilities = this.$prototype.$capabilities;
		}
		var $prev = this.$capability;
		this.$capability = {};
		if ($capabilities !== undefined) {
			$capabilities = $capabilities || "";
			var parts = $capabilities.split(",");
			for (var ii = 0, jj = parts.length; ii < jj; ii++) {
				if (parts[ii]) {
					this.$capability[parts[ii]] = true;
				}
			}
		}
		if ($prev) {
			if ($prev.append && !this.$capability.append) {
				$actions.$create = {
					$isHidden: true
				};
			}
			if ($prev["delete"] && !this.$capability["delete"]) {
				$actions.$delete = {
					$isHidden: true
				};
				$recordActions.$delete = {
					$isHidden: true
				};
			}
			if ($prev.insert && !this.$capability.insert) {
				$recordActions.$create = {
					$isHidden: true
				};
			}
			if ($prev.reorder && !this.$capability.reorder) {
				if (this.reorderCapability) {
					this.reorderCapability.dispose();
					this.reorderCapability = null;
				}
				if (this.builder.setRowIndexVisibility) {
					this.builder.setRowIndexVisibility();
				}
			}
		}

		if (this.$capability.append) {
			$actions.$create = {
				$title: this.localize.flAppend,
				$isHidden: false
			};
		}
		if (this.$capability["deleteAll"]) {
			$actions.$delete = {
				$title: this.localize.flDeleteAll,
				$confirm: this.localize.flDeleteAllMessageText,
				$isHidden: false
			};
		}
		if ($actions.$create || $actions.$delete) {
			this.applyActionLinkChange({
				$actions: $actions
			});
		}
		//this.$capability.reorder = true;
		if (this.$capability.reorder) {
			this.$item.$isRowIndexVisible = true;
			if (!this.reorderCapability) {
				(this.reorderCapability = new ReorderCapability(this)).setDraggable();
			}
			if (this.builder.setRowIndexVisibility) {
				this.builder.setRowIndexVisibility();
			}
		}
		if (this.$capability.search) {
			this.searchCapability.search.toggle(true);
		}
		if ($metaCapablities !== undefined) {
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				this.applyRecordCapabilities(this.records[ii], $recordActions);
			}
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		if (designing) {
			if (metaData.$format !== undefined) {
				this.$item.$format = metaData.$format;
				this.reloadBuilder();
			}
			if (metaData.$isQuickFilter !== undefined) {
				this.$item.$isQuickFilter = metaData.$isQuickFilter;
				this.reloadBuilder();
			}
			if (metaData.$isRowIndexVisible !== undefined) {
				this.$item.$isRowIndexVisible = metaData.$isRowIndexVisible;
				this.builder.setRowIndexVisibility();
			}
		}
		if (this.$prototype.$cube || this.$prototype.$decorator) {
			if (!this.graphDecorator) {
				this.graphDecorator = new GraphDecorator();
			}
			this.graphDecorator.applyGraphSettings(this, metaData);
		}
		Field.prototype.applyDesignMetaData.call(this, metaData, designing);
		this.builder.applyDesignMetaData(metaData, designing);
		this.pagging.applyMetadata(metaData, designing);
	},
	_resetCommonStatus: function(object, metaData) {
		if (metaData.$isReadOnly !== undefined && object.$isReadOnly) {
			delete object.$isReadOnly;
		}
		if (metaData.$isDisabled !== undefined && object.$isDisabled) {
			delete object.$isDisabled;
		}
		if (metaData.$fieldStyle !== undefined && object.$fieldStyle) {
			delete object.$fieldStyle;
		}
		if (metaData.$valueStyle !== undefined && object.$valueStyle) {
			delete object.$valueStyle;
		}
		if (metaData.$titleStyle !== undefined && object.$titleStyle) {
			delete object.$titleStyle;
		}
	},
	_applyCommonStatus: function(object, metaData) {
		if (object && metaData) {
			if (metaData.$isReadOnly !== undefined) {
				object.$isReadOnly = metaData.$isReadOnly;
			}
			if (metaData.$isDisabled !== undefined) {
				object.$isDisabled = metaData.$isDisabled;
			}
			if (metaData.$fieldStyle !== undefined) {
				dataRecord.$fieldStyle = metaData.$fieldStyle;
			}
			if (metaData.$valueStyle !== undefined) {
				object.$valueStyle = metaData.$valueStyle;
			}
			if (metaData.$titleStyle !== undefined) {
				object.$titleStyle = metaData.$titleStyle;
			}
		}
	},
	_propagateMetaToFields: function($properties, metaData, $metaFieldProperties) {
		var $binds = Object.keys($properties);
		for (var mm = 0, kk = $binds.length; mm < kk; mm++) {
			this._resetCommonStatus($properties[$binds[mm]], metaData);
			//reeapply if defiend in meta
			this._applyCommonStatus($properties[$binds[mm]], $metaFieldProperties[$binds]);
		}
	},
	ensureGlobalMetaRecord: function(reset) {
		if (reset) {
			this.globalMetaRecords = null;
		}
		if (reset || !this.globalMetaRecords) {
			this.globalMetaRecords = null;
			if (this.articleParent.dataset && this.articleParent.dataset.$properties) {
				var $metaList = this.articleParent.dataset.$properties[this.$item.$bind];
				if ($metaList) {
					this.globalMetaRecords = {};
					this._applyCommonStatus(this.globalMetaRecords, $metaList);
					if ($metaList.$item && $metaList.$item.$properties) {
						this.globalMetaRecords.$properties = $metaList.$item.$properties;
					}
				}
			}
		}
		return this.globalMetaRecords;
	},
	applyMetaData: function(metaData) {
		if (metaData.$item) {
			metaData.$items = metaData.$item;
		}
		Field.prototype.applyMetaData.call(this, metaData);
		if (metaData.$type === undefined) {
			if (metaData.$items) {
				if (this.builder.isSingleBuilder) {
					for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
						this.records[ii].applyMetaData(metaData.$items[ii]); //metadata and not applyChange cause no $bind
					}
				}
			}
			var $metaRecord = {};
			if (metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
				//apply to datarecords
				var $metaFieldProperties = metaData.$item && metaData.$item.$properties ? metaData.$item.$properties || {} : {};
				for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
					var dataRecord = this.dataset[ii];
					this._resetCommonStatus(dataRecord, metaData);
					if (dataRecord.$properties) {
						this._propagateMetaToFields(dataRecord.$properties, metaData, $metaFieldProperties);
					}
				}
				//apply to $delta currently defined for list
				if (this.articleParent.dataset.$properties) {
					var $deltaListProperties = this.articleParent.dataset.$properties[this.$item.$bind];
					if ($deltaListProperties) {
						$deltaListProperties = $deltaListProperties.$item && $deltaListProperties.$item.$properties ? $deltaListProperties.$item.$properties : null;
						if ($deltaListProperties) {
							this._propagateMetaToFields($deltaListProperties, metaData, $metaFieldProperties);
						}
					}
				}
				this._applyCommonStatus($metaRecord, metaData);
			}
			if (metaData.$item && metaData.$item.$properties) {
				$metaRecord.$properties = metaData.$item.$properties;
				if (this.builder.applyMetaDataRecords) {
					this.builder.applyMetaDataRecords($metaRecord);
				}
			}
			if (Object.keys($metaRecord)) {
				this.ensureGlobalMetaRecord(true);
				for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
					this.records[ii].applyChange($metaRecord);
				}
			}
		}
		if (metaData.$capabilities !== undefined) {
			this.applyCapabilities(metaData.$capabilities);
		}
		if (metaData.$orderBy !== undefined) {
			this.sortCapability.setOrderBy(metaData.$orderBy, metaData.$startLetter);
		}
		if (metaData.$item) {
			if (metaData.$item.$links) {
				var $menus = this.$fieldProperties.$links = this.$prototype.$item.$links || {};
				this.page.ensureDeltaManager().applyObjectDelta($menus, metaData.$item.$links, true);
			}
			if (metaData.$item.$actions) {
				var $menus = this.$fieldProperties.$actions = this.$prototype.$item.$actions || {};
				this.page.ensureDeltaManager().applyObjectDelta($menus, metaData.$item.$actions, true);
			}
		}
		this.pagging.applyMetadata(metaData);
	},
	removeRecords: function(addEmptySlot) {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			var record = this.records[ii];
			delete this.recordsMap[record.$uuid];
			this.removeRecord(record);
		}
		this.recordsMap = {};
		this.records = [];
		if (this.selector && this.selector.clear) {
			this.selector.clear();
		}
		this.builder.emptyBody(addEmptySlot);
	},
	removeRecord: function(record, removeDom) {
		this.onFieldDiagnoseChange(false, record); // update grid diagnose alert
		if (this.page.diagnosesPanel) {
			this.page.diagnosesPanel.cleanBoxDiagnoses(record);
		}
		/*if (record.treeNode) {
         record.treeNode.onRemoveRecord();
         }*/
		this.removeItem(record, removeDom);
	},
	_appendRecord: function(options) {
		if (this.emptyDataItem) {
			document.site.emptyDom(this.emptyDataItem);
			this.emptyDataItem = null;
		}
		if (this.builder.isSingleBuilder) {
			options.dataRecord = {
				$singleField: options.dataRecord
			};
			options.$prototype = {
				$properties: {
					$singleField: this.$prototype.$item
				}
			};
		}
		if (options.dataRecord.$uuid === undefined) {
			options.dataRecord.$uuid = options.$recordIndex;
		}
		var record = (this.recordsMap[options.dataRecord.$uuid] = new this.builder.RecordClass());
		record.arrayLevel = "record";
		record.$uuid = options.dataRecord.$uuid;
		if (options.dataRecord) {
			record.dataset = options.dataRecord;
			record.$serverIndex = options.dataRecord.$serverIndex;
		}
		//record.$serverIndex = options.$serverIndex;
		record.$recordIndex = options.$recordIndex;
		record.$facet = this.$recordFacet;
		record.$isEditMode = this.$isEditMode && !this.treeDecorator;
		record.builder = (record.list = this).builder;
		record.$prototype = options.$prototype || this.$prototype.$item;
		record.isInsert = options.isInsert;
		if (record.initializeRecord) {
			record.initializeRecord(options);
		}
		this.page.initializeNewItem(record, options.$item || {}, this);
		record.loadBox();
		if (options.isCreate && record.onCreated) {
			record.onCreated();
		}
		record.applyChange(this.ensureGlobalMetaRecord());
		if (options.dataRecord) {
			record.applyChange(options.dataRecord);
		}
		if (options.isInsert) {
			this.records.splice(options.$recordIndex, 0, record);
		} else {
			this.records.push(record);
		}
		return record;
	},
	applyFullDelta: function(dataRecordSet, firstIndex, lastIndex) {
		var oldMap = this.recordsMap;
		this.recordsMap = {};
		this.records = [];
		var lastRecord;
		for (var $serverIndex = 0, jj = dataRecordSet.length; $serverIndex < jj; $serverIndex++) {
			var dataRecord = dataRecordSet[$serverIndex];
			var record = oldMap[dataRecord.$uuid];
			if (record) { //Aurelien
				record.applyChange(dataRecord);
				if (record.$serverIndex != $serverIndex) {
					if (lastRecord) {
						record.reorderItem(lastRecord, "insertAfter");
					} else {
						record.reorderItem(null, "prepend");
					}
					record.$recordIndex = record.$serverIndex = $serverIndex;
					record.ensureDataSet();
				}
				this.records.push(this.recordsMap[dataRecord.$uuid] = lastRecord = record);
			} else {
				if (!(firstIndex !== undefined && ($serverIndex < firstIndex || (lastIndex != undefined && $serverIndex >= lastIndex)))) {
					record = this._appendRecord({
						dataRecord: this.dataset[$serverIndex],
						$recordIndex: $serverIndex,
						isInsert: true
					});
					this.recordsMap[dataRecord.$uuid] = lastRecord = record;
				}
			}
			delete oldMap[dataRecord.$uuid];
		}
		var uiids = Object.keys(oldMap);
		for (var ii = 0, jj = uiids.length; ii < jj; ii++) {
			this.removeRecord(oldMap[uiids[ii]], true);
			delete oldMap[uiids[ii]];
		}
	},
	applyPartialDelta: function(deltaSet, firstIndex, lastIndex) {
		for (var $serverIndex = 0, jj = deltaSet.length; $serverIndex < jj; $serverIndex++) {
			var deltaRecord = deltaSet[$serverIndex];
			var record = this.recordsMap[deltaRecord.$uuid];
			if (record) {
				if (deltaRecord.$isDeleted) {
					this.records.splice(this.records.indexOf(record), 1);
					delete this.recordsMap[record.$uuid];
					this.removeRecord(record, true);
				} else {
					var recordIndex = null,
						prevIndex = null;
					if (deltaRecord.$index !== undefined && record.$serverIndex != deltaRecord.$index) {
						prevIndex = this.records.indexOf(record);
						recordIndex = deltaRecord.$index;
						if (firstIndex !== undefined) {
							recordIndex -= firstIndex;
						}
					}
					record.ensureDataSet(record.$uuid);
					record.applyChange(deltaRecord);
					if (prevIndex) { //not process if this.clientFetchOptions
						this.records.splice(prevIndex, 1);
						this.records.splice(recordIndex, 0, record);
						var nextRecord;
						if ((recordIndex + 1) < this.records.length) {
							nextRecord = this.records[recordIndex + 1];
						}
						record.reorderItem(nextRecord, nextRecord ? "insertBefore" : "append");
					}
				}
			} else {
				if (!deltaRecord.$isDeleted) {
					var index = deltaRecord.$index !== null && deltaRecord.$index !== undefined ? deltaRecord.$index : $serverIndex;
					if (firstIndex !== undefined) {
						if ((index < firstIndex) || (lastIndex != undefined && index >= lastIndex)) {
							index = -1;
						} else {
							index -= firstIndex;
						}
					}
					if (index != -1) {
						this._appendRecord({
							dataRecord: this.dataset[deltaRecord.$index],
							$recordIndex: index, //deltaRecord.$index,
							isInsert: true
						});
					}
				}
			}
		}
	},
	hasRecords: function() {
		return this.records && this.records.length > 0;
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		this.ensureDataSet();
		if (metaData) {
			this.applyMetaData(metaData);
		}
		if (dataRecordSet !== undefined) {
			if (this.page.$isPartialDelta || (this.page.$isEditMode && this.hasRecords() && !this.builder.isSingleBuilder)) {
				this.fillList(dataRecordSet, parentDataRecord, true);
			} else {
				this.fillList(this.dataset, parentDataRecord);
			}
		}
		if (this.graphDecorator) {
			var graphRecords = [];
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				graphRecords.push(this.records[ii].dataset);
			}
			this.graphDecorator.setDataBind(graphRecords, parentDataRecord, metaData);
		}
		if (this.page.$facet == "$lookup") {
			this.page.onFillLookupList(this);
		}
	},
	fillList: function(dataRecordSet, parentDataRecord, isDelta) {
		this.applyCapabilitiesSettings(parentDataRecord);
		if (isDelta) {
			var firstIndex, lastIndex;
			if (this.pagging) {
				firstIndex = this.pagging.$startIndex;
				if (firstIndex !== undefined) {
					--firstIndex;
					if (this.pagging.$itemsPerPage !== undefined) {
						lastIndex = firstIndex + this.pagging.$itemsPerPage;
					}
				}
			}
			var partialDelta = this.page.$isPartialDelta || (dataRecordSet.length == 1 && dataRecordSet[0].$index !== undefined);
			if (this.clientFetchOptions) {
				var redoClientFetch = true;
				/*if (partialDelta) {
                 for (var ii = 0, jj = dataRecordSet.length; !redoClientFetch && ii < jj; ii++) {
                 var deltaRecord = dataRecordSet[ii];
                 var record = this.recordsMap[deltaRecord.$uuid];
                 if (record) {
                 if (deltaRecord.$isDeleted || (record.$serverIndex != deltaRecord.$index)) {
                 redoClientFetch = true;
                 } else {
                 record.ensureDataSet(record.$uuid);
                 record.applyChange(deltaRecord);
                 }
                 } else {
                 redoClientFetch = true;
                 }
                 }
                 } else {
                 redoClientFetch = true;
                 }*/
				if (redoClientFetch) {
					this.fetchClientRecordSet(this.clientFetchOptions);
					return;
				}
			} else {
				if (partialDelta) {
					this.applyPartialDelta(dataRecordSet, firstIndex, lastIndex);
				} else {
					if (this.treeDecorator) {
						this.treeDecorator.buildTreeMap(dataRecordSet);
					}
					this.applyFullDelta(dataRecordSet, firstIndex, lastIndex);
				}
			}
			if (lastIndex) {
				if (this.records.length > this.pagging.$itemsPerPage) {
					while (this.records.length > this.pagging.$itemsPerPage) {
						var record = this.records[this.records.length - 1];
						delete this.recordsMap[record.$uuid];
						this.removeRecord(record, true);
						this.records.pop();
					}
				}
			}
		} else {
			this.clientDataset = dataRecordSet;
			if (this.treeDecorator) {
				this.treeDecorator.buildTreeMap(this.clientDataset);
			}
			this.builder.body.style.display = "none";
			this.removeRecords(!(this.clientDataset && this.clientDataset.length > 0));
			if (this.clientDataset) {
				var $startIndex = 1;
				var $itemsPerPage = this.pagging.$itemsPerPage || this.clientDataset.length;
				//warn: this.onClientFetch =true and this.isClientFetch=false for convergence left this 
				if (this.isClientFetch && this.pagging) {
					this.pagging.ensureItemsPerPage();
					if (this.clientDataset != this.dataset) {
						$startIndex = this.pagging.$startIndex;
						$itemsPerPage = this.pagging.$itemsPerPage;
					} else {
						if (this.clientDataset.length > this.pagging.$itemsPerPage) {
							var options = this.pagging.goToClientPage();
							$startIndex = options.$startIndex;
							$itemsPerPage = options.$itemsPerPage;
						}
					}

				}
				for (var ii = $startIndex - 1, count = 0, jj = this.clientDataset.length;
					(count < $itemsPerPage) && (ii < jj); count++, ii++) {
					var dataRecord = this.clientDataset[ii];
					if (!dataRecord.$isDeleted) {
						this._appendRecord({
							dataRecord: dataRecord,
							$recordIndex: count
						});
					}
				}
			}
		}
		this._validateDisplay();

		if (this.$item.$cards && this.$item.$format != "cards") {
			if (this.$item.$cards.$position != "inline" && this.$item.$cards.$position != "popup") {
				this.selector.select(); //ensure selection
			}
		}

		if (this.treeDecorator) {
			this.treeDecorator.onEndFillList();
		}
		this.pagging.draw();
		this.sortCapability.renderOrderBy();
		this.builder.body.style.display = "";
		this.onWindowResize();
	},
	_validateDisplay: function() {
		//ensureRecordsIndex
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			var record = this.records[ii];
			record.$recordIndex = ii;
			if (record.dataset.$index !== undefined) {
				record.dataset.$index = ii;
			}
			if (record.dataset.$serverIndex == undefined) {
				if (record._singleField) {
					record.dataset.$serverIndex = ii;
				} else {
					for (var mm = 0, kk = this.dataset.length; mm < kk; mm++) {
						if (this.dataset[mm] == record.dataset) {
							record.dataset.$serverIndex = mm;
							break;
						}
					}
				}
			}
			record.$serverIndex = record.dataset.$serverIndex;
			record.renderRowIndex();
		}
		//_checkMaxItems
		if (this.$isEditMode) {
			if (this.$prototype.$minItems) {
				while (this.records.length < this.$prototype.$minItems) {
					this._appendRecord({
						$recordIndex: this.records.length,
						dataRecord: {}
					});
				}
			}
			if (this.$prototype.$maxItems) {
				if (this._isAddDisabled !== (this.$prototype.$maxItems <= this.dataset.length)) {
					this._disableAdd(!this._isAddDisabled);
				}
			}
		}
	},
	_disableAdd: function(isAddDisabled) {
		this._isAddDisabled = isAddDisabled;
		if (this.menuItems) {
			if (this.menuItems.$create) {
				this.menuItems.$create[0].disable(this._isAddDisabled);
			}
			if (this.menuItems.$select) {
				this.menuItems.$select[0].disable(this._isAddDisabled);
			}
		}
		if (this.$capability.insert) {
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				var record = this.records[ii];
				if (record.menuItems.$create) {
					record.menuItems.$create[0].disable(this._isAddDisabled);
				}
			}
		}
	},
	validate: function() {
		var isValidated = true;
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			isValidated = this.records[ii].validateFields();
		}
		return isValidated;
	},

	notifySelectRecords: function() {
		if (this.currentSelectRecords) {
			var sendBag = this.page.ensureSendBag(this);
			var dataRecords = this.ensureDataSet();
			if (this.builder.isSingleBuilder) {
				sendBag.dataRecords = dataRecords;
				var $uuids = Object.keys(this.currentSelectRecords);
				for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
					var options = {
						isCreate: true,
						dataRecord: this.currentSelectRecords[$uuids[ii]].dataset,
						$recordIndex: this.records.length
					};
					switch (this.$prototype.$item.$type) {
						case "application/x-choice":
							options.dataRecord = options.dataRecord.$uuid;
							break;
						case "application/x-reference":
							delete options.dataRecord.$serverIndex;
							delete options.dataRecord.$isSelected;
							break;
					}
					dataRecords.push(options.dataRecord);
					this._appendRecord(options);
				}
			}
			this._validateDisplay();
			this.page.notifyDataChange(this, sendBag.dataRecords);
		}
	},
	releaseMode: function(onDispose) {
		if (this.menusBox) {
			this.menusBox.dispose();
		}
		this.builder.dispose();
		if (!onDispose) {
			document.site.emptyDom(this._core);
		}
		if (this.serverFilters) {
			this.serverFilters.selected = this.serverFilters.noFilters = null;
		}
		this._core = this.menusBox = this.serverFilters = this.builder = this.domTitle = this._mandatoryFlag = this._description = this._helpFlag = null;
	},
	dispose: function() {
		if (this.articleParent.resizableChildren) {
			this.articleParent.resizableChildren[this.id] = null;
		}
		if (this.page) {
			this.page.attachToPageResizeListener(false, this);
		}
		if (this.selectorCardRecord) {
			this.selectorCardRecord.dispose();
		}
		if (this.treeDecorator) {
			this.treeDecorator.dispose();
		}
		if (this.reorderCapability) {
			this.reorderCapability.dispose();
		}
		if (this.graphDecorator) {
			this.graphDecorator.dispose();
			this.graphDecorator = null;
		}
		this.releaseMode(true);
		if (this.selector && this.selector.dispose) {
			this.selector.dispose();
		}
		if (this.sortCapability) {
			this.sortCapability.dispose();
		}
		if (this.pagging) {
			this.pagging.dispose();
		}
		this.emptyDataItem = this.reorderCapability = null;
		this.topbar = this.bottombar = this.clientDataset = null;
		this._menus = this.page = this.treeDecorator = this.selectorCardRecord = null;
		this.paramsFilter = this.$fieldProperties = this.$field = this.$capability = this._menusSlot = null;
		this._dataValue = this._domItem = this.domValueSlot = this.fieldValue = this.globalMetaRecords = null;
		this.recordsMap = this.sortCapability = this.records = this.pagging = this.selector = null;
		Article.prototype.dispose.call(this);
	},

	setFocus: function(select, name, $serverIndex) {
		var field;
		if (this.treeDecorator) {
			return true;
		}
		if (this.builder.isPopupCardOpened && this.builder.isPopupCardOpened()) {
			this.selectRecords($serverIndex);
		}
		if ((field = this.getField(name, $serverIndex))) {
			return field.focus(select);
		} else {
			if (this.isClientFetch) {
				if (!this.findRecordByServerIndex($serverIndex)) {
					this.pagging.setPage($serverIndex);
					if ((field = this.getField(name, $serverIndex))) {
						return field.focus(select);
					}
				}
			}
		}
		return null;
	},
	getDataValue: function(name, $serverIndex) {
		var dataRecordSet = this.ensureDataSet();
		var field;
		if ($serverIndex !== undefined) {
			if (field = this.getField(name, $serverIndex)) {
				return field.getDataValue();
			} else {
				for (var ii = 0, jj = dataRecordSet.length; ii < jj; ii++) {
					if (dataRecordSet[ii].$serverIndex == $serverIndex) {
						var value = dataRecordSet[ii][name];
						return value === undefined ? null : value;
					}
				}
			}
		}
		return null;
	},
	findRecordByServerIndex: function($serverIndex) {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			if (this.records[ii].$serverIndex == $serverIndex) {
				return this.records[ii];
			}
		}
		return null;
	},
	getField: function(name, $serverIndex, select) {
		var fields, record = this.findRecordByServerIndex($serverIndex);
		if (record && !record.disposed) {
			if ((fields = record.boundFields[name]) && fields.length > 0) {
				return (this.builder.findPopupField ? this.builder.findPopupField(name, record) : null) || fields[0];
			}
		}
		return null;
	},
	getSelectedRecordIndexes: function() {
		var result = [],
			ir = -1;
		for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
			var dataRecord = this.dataset[ii];
			if (dataRecord.$isSelected) {
				if (!result[ir] || result[ir].start + result[ir].count != dataRecord.$serverIndex) {
					result.push({
						start: dataRecord.$serverIndex,
						count: 1
					});
					ir++;
				} else {
					result[ir].count++;
				}
			}
		}
		return result;
	},
	selectRecords: function(start, end) {
		var record;
		if (start === undefined) {
			start = -1;
		}
		if (end === undefined) {
			end = start;
		}
		for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
			if (record = this.recordsMap[this.dataset[ii].$uuid]) {
				var isSelected = record.$serverIndex >= start && record.$serverIndex <= end;
				if (isSelected != this.dataset[ii].$isSelected) {
					record.select(false);
				}
			} else {
				this.dataset[ii].$isSelected = this.dataset[ii].$serverIndex >= start && this.dataset[ii].$serverIndex <= end;
			}
		}
	},
	findRecord: function($$selector) {
		var $uuid = this.findRecordUiid($$selector);
		return this.recordsMap[$uuid];
	},
	findRecordUiid: function($$selector) {
		return ($$selector.is("[data-s-record]") ? $$selector : $$selector.closest("[data-s-record]")).attr("data-s-record");
	}
});