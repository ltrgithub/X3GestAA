"use strict";
var helpers = require('syracuse-core/lib/helpers');

var Article = require("syracuse-ui/lib/article/article").Article;
var authoringOpener = require("syracuse-ui/lib/authoring/field/array/authoringOpener");

var Field = require('syracuse-ui/lib/field/field').Field;
var FieldHelper = require('syracuse-ui/lib/field/fieldHelper');
var GridBuilder = require("./gridBuilder/gridBuilder").GridBuilder;
var SingleBuilder = require("./singleBuilder/singleBuilder").SingleBuilder;
var CardsBuilder = require("./cardsBuilder/cardsBuilder").CardsBuilder;
var PagingCapability = require("./capability/pagingCapability").PagingCapability;
var SortCapability = require("./capability/sortCapability").SortCapability;
var FilterCapability = require("./capability/filterCapability").FilterCapability;

var locale = require('syracuse-core/lib/locale');

//$isNodeLazyLoad
var TreeDecorator = require("./tree/treeDecorator").TreeDecorator;
var listHelper = require("./listHelper")


function DesktopList(){
}

exports.DesktopList = helpers.defineClass(DesktopList, Article, {
    ensureDataSet: function(){
        return this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || [];
    },
    
    ensureLayoutMode: function(){
        Field.prototype.ensureLayoutMode.call(this);
    },
    loadBox: function(initData){
        this.helper = listHelper;
        this.articleParent = this.getArticleParent();
        document.site.addResizeListener(this);
        if (this.page.$facet == "$lookup") {
            this.isLookupList = true;
            this.page.lookupList = this;
        }
        Article.prototype.loadBox.call(this, initData);
        this.articleParent.bind(this, this.$item.$bind);
        if (document.site.developpementMode) {
            FieldHelper.appendQualityAtt(this, this._domItem);
        }
    },
    showDiagnoses: function(diagnoses, options){
        Field.prototype.showDiagnoses.call(this, diagnoses, options);
    },
    drawBox: function(){
        this.arrayLevel = "array";
        this.isRecordDataset = true; //!important for sendBag
        this._localize = locale.resources(module)();
        
        this._isAddDisabled = false;
        this.records = [];
        this.recordsMap = {};
        
        this.sortCapability = new SortCapability(this);
        this.pagingCapability = new PagingCapability(this);
        this.filterCapability = new FilterCapability(this);
        this.createBuilder();
        
        this.$fieldProperties = this.$prototype.$item.$properties || {};
        this.filterCapability.validateIsQuickFilter();
        
        this.$recordFacet = this.articleParent.$item.$recordFacet || this.$facet || "$details";
        switch (this.articleParent.$facet) {
            case "$query":
                if (this.page.$prototype.$url && this.page.$prototype.$url.indexOf("employees") >= 0) {
                    this.$prototype.$item.$filters = this.$prototype.$item.$filters ||
                    {
                        filter1: {
                            $title: "filter Server Test 1"
                        },
                        filter2: {
                            $title: "filter Server Test 2"
                        }
                    };
                }
                if (this.$prototype.$item.$filters) {
                    if (this.page.menuBar) {
                        this._filtersMenus = this.page.loadNewItem(this.page.menuBar._body, {
                            $category: "menus",
                            $skin: "s-page-filter-menus",
                            $title: "Filters"
                        }, this);
                        this._filtersMenus._ensurePrivateMenus(this.$prototype.$item, "$filters");
                    }
                }
                break;
            case "$bulk":
            case "$search":
                break;
            case "$lookup":
                this.$item.$selectMode = "button";
                this.$item.$fitContainer = true;
                this._$$fitContainer = $(this.page._body);
                break;
            case "$select":
                this.$item.$selectMode = "multi";
                break;
            default:
                this.isClientFetch = this.isClientFetch !== false;
                break;
        }
        
        if (this.$prototype.$treeview) {
            (this.treeDecorator = new TreeDecorator()).load(this);
        }
        
        if ((this.$isEditMode = this.$item.$isEditMode) === undefined) {
            this.$isEditMode = this.articleParent.$isEditMode;
        }
        this.applyCapabilitiesSettings(this.$prototype);
        
        if (!this.$item.$layout) {
            this.$item.$layout = {};
        }
        if (!this.$item.$layout.$items) {
            this.$item.$layout.$items = [];
            var $binds = Object.keys(this.$fieldProperties);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                this.$item.$layout.$items.push({
                    $bind: $binds[ii]
                });
            }
        }
        if (this.$prototype.$cube) {
            if ((this.$item.$graphMode = this.$item.$graphMode || "both") == "both") {
                this.$item.$graphPosition = this.$item.$graphPosition || "top";
            }
        }
        
        this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
            this.inputId = this.id + "-input";
        }
        Field.prototype._initCss.call(this);
        
        this._domItem = document.createElement("div");
        this._domItem.className = this._$cssTopField;
        this.$$item = $(this.layoutSlot.appendChild(this._domItem));
        
        this.appendTitle();
        
        this._createValueContainer();
        
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setState(this.$field);
        this.setEditMode(this.$field);
        
        this.fieldValue.className += " s-list";
        
        this._topbar = document.createElement("div");
        this._topbar.className = "s-list-topbar";
        this.fieldValue.appendChild(this._topbar);
        
        this._core = document.createElement("div");
        this._core.className = "s-list-core";
        this.fieldValue.appendChild(this._core);
        
        if (this.$item.$isQuickDesignerEnabled !== false) {
            this.quickDesigner = new authoringOpener.QuickDesigner();
            this.quickDesigner.appendOpener(this)
        }
        this._menusBoxSlot = document.createElement("div");
        this._menusBoxSlot.className = "s-list-menus-cell";
        if (this.$item.$isPopupMenuHidden) {
            this._menusBoxSlot.style.display = "none";
        }
        this._topbar.appendChild(this._menusBoxSlot);
        
        this.builder.drawBuilder();
        this.builder.emptyBody(true);
        this.ensureLayoutMode();
    },
    ensureArticleId: function(){
        this._topbar.setAttribute("data-s-article", this.id);
        this._core.setAttribute("data-s-article", this.id);
    },
    applyCapabilitiesSettings: function(newData){
        this.pagingCapability.setOptions(newData);
        this.sortCapability.setOrderBy(newData.$orderBy, newData.$startLetter);
        this.filterCapability.setWhere(newData.$where);
    },
    setSortCapability: function(){
        this.sortCapability.load();
    },
    onWindowResize: function(){
        if (this.builder && this.builder.onWindowResize) {
            this.builder.onWindowResize();
        }
        if (this.graphDecorator && this.graphDecorator.onWindowResize) {
            this.graphDecorator.onWindowResize();
        }
    },
    _createValueContainer: function(){
        this.domValueSlot = document.createElement("article");
        this.domValueSlot.className = this._$cssField + "-value";
        this._dataValue = this._core = this.fieldValue = this.domValueSlot;
        this.$$dataValue = $(this.domValueSlot);
        this._domItem.appendChild(this.domValueSlot);
    },
    fetch: function(options, $location){
        var self = this;
        var params = {
            where: self.filterCapability.$where,
            select: self.$select
        };
        if (options) {
            if (options.$filters) {
                params.filter = options.$filters;
            }
            params.startLetter = options.startLetter;
            params.startIndex = options.startIndex
            this.pagingCapability.setOptions({
                $itemsPerPage: options.$itemsPerPage
            });
            params.count = this.pagingCapability._$itemsPerPage;
            if (options.orderBy) {
                params.startIndex = 1;
                self.sortCapability.setOrderBy(options.orderBy, options.startLetter);
            }
            if (options.filter != null) {
                params.startIndex = 1;
                params.where = self.filterCapability.$where = options.filter != "" ? options.filter : null;
            }
            if (options.queryBindings) {
                if (options.queryBindings.length == 0) {
                    Object.keys(self.$fieldProperties).forEach(function($bind){
                        options.queryBindings.push(self.$fieldProperties.$bind || $bind);
                    });
                }
                self.select = options.queryBindings.map(function(binding){
                    return binding.replace(/\./g, '/');
                }).join(',');
            }
        }
        params.orderBy = self.sortCapability.stringify();
        var fetchOptions = {
            params: params
        };
        if (self.isClientFetch || self.isClientSortEnable) {
            listHelper.fetchClientRecordSet(self, fetchOptions);
        }
        else {
            fetchOptions.field = self;
            fetchOptions.$updateHitory = self.page.isMainPage;
            fetchOptions.$location = $location;
            self.articleParent.fetch(fetchOptions);
        }
        if (self.articleParent.onFetchHandler) {
            self.articleParent.onFetchHandler(fetchOptions);
        }
    },
    
    setHelp: function($help){
        Field.prototype.setHelp.call(this, $help);
    },
    setDescription: function($description){
        Field.prototype.setDescription.call(this, $description);
    },
    hideTitle: function($isTitleHidden){
        Field.prototype.hideTitle.call(this, $isTitleHidden);
    },
    getDefaultTitle: function(){
        return this._localize.l_defaultTitle;
    },
    getTitle: function(){
        return Field.prototype.getTitle.call(this);
    },
    setTitle: function($title){
        Field.prototype.setTitle.call(this, $title);
        if (this.domTitle) {
            this.domTitle.style.display = this.getTitle().length == 0 ? "none" : "";
        }
    },
    getLocalizedTitle: function($title){
        if ($title && $title.length > 0 && $title[1] == "@") {
            return this.parseExpression($title);
        }
        return $title;
    },
    appendTitle: function(){
        if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
            Field.prototype.appendTitle.call(this);
            this.domTitle.style.display = "none";
        }
    },
    releaseMode: function(onDispose){
        if (this._menusBox) {
            document.controller.disposeObject(this._menusBox);
        }
        this.menuPicker = this._menusBox = null;
        document.controller.disposeObject(this.builder);
        document.site.emptyDom(this._core);
        this.builder = this.domTitle = this._mandatoryFlag = this._description = this._helpFlag = null;
    },
    toggleDiagnose: function(css, show){
    },
    drawDiagnose: function($diagnose, severityGroup){
        Field.prototype.drawDiagnose.call(this, $diagnose, severityGroup);
    },
    setMenus: function($menus){
        if ($menus) {
            //important copy allow multi binding
            this.applyActionLinkChange({
                $links: $menus.$links,
                $actions: $menus.$actions
            });
        }
    },
    _ensureMenusBox: function(){
        var self = this;
        if (!self._menusBox) {
            self._menusBox = self.page.loadNewItem(self._menusBoxSlot, {
                $category: "menus",
                $skin: "s-list-menus",
                $layout: {
                    $layoutType: "row",
                    $autoSize: true,
                    $items: [{
                        $noText: true,
                        $bind: "$create",
                        $skin: "s-record-action-create"
                    }, {
                        $noText: true,
                        $bind: "$select",
                        $skin: "s-record-action-select"
                    }, {
                        $bind: "$delete"
                    }, {
                        $isMenusBag: true,
                        $category: "menus",
                        $title: self._localize.mn_more,
                        $isTitlePicker: true,
                        $isBoxCollapsable: true,
                        $isPopupContent: true,
                        $id: self.id + "-menu-picker",
                        $skin: "s-list-menus",
                        $itemSkin: "s-field-menus-link",
                        onEnsureVisibility: function(menuGroup, $menuItemBind, menuItem){
                            //debugger;
                        }
                    }]
                },
                onEnsureVisibility: function(menuGroup, $menuItemBind, menuItem){
                    if (!menuGroup.menuGroupRoot.$isPickerVisible) {
                        self._menusBoxSlot.style.display = "";
                        menuGroup.menuGroupRoot.$isPickerVisible = true;
                    }
                }
            }, self);
            self._menusBox.contextField = self;
            self.menuPicker = self.idMap[self.id + "-menu-picker"];
        }
        return self._menusBox;
    },
    applyActionLinkChange: function(resources){
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            this._ensureMenusBox();
            if (resources.$links === null && this._menusBox) {
                this._menusBox.unload();
                this.menuPicker = this._menusBox = null;
            }
        }
        Article.prototype.applyActionLinkChange.call(this, resources);
    },
    createBuilder: function(){
        if (!this.$field.$item.$properties || this.$field.$item.$type == "application/x-reference") {
            this.builder = new SingleBuilder();
        }
        else {
            if ((this.$item.$format = this.$item.$format || "grid") == "cards") {
                this.builder = new CardsBuilder();
            }
            else {
                this.builder = new GridBuilder();
            }
        }
        this.builder.list = this;
        this.builder.initialize();
    },
    reloadBuilder: function(fillData){
        document.controller.disposeObject(this.builder);
        document.site.emptyDom(this._core);
        this.createBuilder();
        this.builder.drawBuilder();
        if (fillData) {
            listHelper.fillList(this, this.ensureDataSet(), this.articleParent.dataset);
        }
    },
    setEditMode: function(state){
        if (state.$editMode !== undefined && this.$editMode != state.$editMode) {
            if (this.$editMode == "cell") {
                this._bindEditFieldEvents(false);
            }
            if ((this.$editMode = state.$editMode) == "cell") {
                this._bindEditFieldEvents(true);
            }
        }
    },
    _bindEditFieldEvents: function(bind){
        var self = this;
        if (bind) {
            self.$$item.delegate("[data-s-field]", "click.editmode", function(event){
                var $$target = $(event.currentTarget);
                var record = self.findRecord($$target);
                var field = record.idMap[$$target.attr("data-s-field")];
                self.page.externalAdapter.onFieldEvent({
                    field: field,
                    event: event,
                    doEvent: function(){
                        if (field && !field.$isEditMode) {
                            setTimeout(function(){
                                field.toggleEditMode();
                                field.focus();
                            }, 10);
                        }
                    }
                });
                event.stopPropagation();
            });
        }
        else {
            if (self.$$item) {
                self.$$item.undelegate("click.editmode");
            }
        }
    },
    applyFieldStyle: function(metaData){
        FieldHelper.applyFieldStyle(this, metaData);
    },
    toggleEditMode: function($isEditMode){
    },
    
    emptyDiagnoseSlot: function(){
        if (this.domDiagnose) {
            document.site.emptyDom(this.domDiagnose);
            this.domDiagnose.style.visibility = "hidden";
        }
    },
    ensureDiagnoseSlot: function(){
        if (!this.domDiagnose && this._dataValue) {
            this.domDiagnose = document.createElement("div");
            this.domDiagnose.className = "s-field-diagnose";
            this._dataValue.appendChild(this.domDiagnose);
        }
        else {
            document.site.emptyDom(this.domDiagnose);
        }
    },
    onMenuClick: function(menuItem){
        if (menuItem.$menuType == "$filters") {
            this.fetch({
                $filters: menuItem.$sourceBind
            });
            return false;
        }
        if (!menuItem.$isAction && menuItem.$bind == "$select") {
            listHelper.doSelectAction(this);
            return false;
        }
        return true;
    },
    onAfterNotifyDataChange: function(){
        this.onWindowResize();
    },
    onNotifyDataChange: function(field, value){
        if (field.$item.$bind == "$itemsPerPage") {
            this.pagingCapability.fetchItemPerPage(value);
        }
        return false;
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        if (this.records.length > 0) {
            if (state.$isReadOnly !== undefined || state.$isDisabled != undefined) {
                var metaData = {
                    $isReadOnly: state.$isReadOnly,
                    $isDisabled: state.$isDisabled
                };
                this.records.forEach(function(record, index){
                    state.$isDisabled
                    record.applyMetaData(metaData);
                });
                if (this.$capability && state.$isDisabled !== undefined) {
                    for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
                        this.records[ii].setState(state);
                    }
                }
            }
        }
    },
    
    
    applyCapabilities: function(record){
        var $actions;
        if (record) {
            if (this.$capability.insert) {
                $actions = {
                    $create: {
                        $title: this._localize.slist_insert
                    }
                };
            }
        }
        else {
            if (this.$capability.append) {
                $actions = {
                    $create: {
                        $title: this._localize.slist_append,
                        $isHidden: false
                    }
                };
            }
        }
        if (this.$capability["delete"]) {
            $actions = $actions || {};
            $actions.$delete = {
                $title: record ? this._localize.slist_delete : this._localize.slist_delete_all,
                $isHidden: false
            };
        }
        if ($actions) {
            (record || this).applyActionLinkChange({
                $actions: $actions
            });
        }
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        return listHelper.applyDesignMetaData(this, metaData, onAuthoring);
    },
    applyMetaData: function(metaData){
        return listHelper.applyMetaData(this, metaData);
    },
    applyPartialDelta: function(dataRecordSet, firstIndex, lastIndex){
        listHelper.applyPartialDelta(this, dataRecordSet, firstIndex, lastIndex);
    },
    hasRecords: function(){
        return this.records && this.records.length > 0;
    },
    setDataBind: function(dataRecordSet, parentDataRecord, metaData){
        this.ensureDataSet();
        var redraw = false;
        if (metaData) {
            if (redraw = this.applyMetaData(metaData)) {
                this.onClientFetch = this.clientDataset != null;
                listHelper.fillList(this, this.clientDataset || this.ensureDataSet(), this.articleParent.dataset);
                this.onClientFetch = false;
            }
        }
        
        if (dataRecordSet !== undefined) {
            if (this.page.$isPartialDelta || (this.page.$isEditMode && this.hasRecords() && !this.builder.isSingleBuilder)) {
                listHelper.fillList(this, dataRecordSet, parentDataRecord, true);
            }
            else {
                listHelper.fillList(this, dataRecordSet, parentDataRecord);
            }
        }
        if (this.graphDecorator) {
            var graphRecords = [];
            for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
                graphRecords.push(this.records[ii].dataset);
            }
            // this.graphDecorator.setDataBind(dataRecordSet, parentDataRecord, metaData);
            this.graphDecorator.setDataBind(graphRecords, parentDataRecord, metaData);
        }
        if (this.isLookupList) {
            this.page.onFillLookupList();
        }
    },
    validate: function(){
        var isValidated = true;
        this.records.forEach(function(record){
            isValidated = record.validateFields();
        });
        return isValidated;
    },
    dispose: function(){
        if (this.isLookupList && this.page) {
            this.page.lookupList = null;
        }
        document.site.removeResizeListener(this);
        if (this.treeDecorator) {
            this.treeDecorator.dispose();
        }
        if (this.reorderCapability) {
            document.controller.disposeObject(this.reorderCapability);
        }
        this._bindEditFieldEvents(false);
        if (this._menusBox) {
            document.controller.disposeObject(this._menusBox);
        }
        this.clientDataset = this.emptyDataItem = this.helper = this.reorderCapability = this._menus = this.page = this.treeDecorator = this.menuPicker = this._menusBox = null;
        Article.prototype.dispose.call(this);
    },
    
    setFocus: function(name, $serverIndex){
        var field;
        if (this.builder.popupCard && this.builder.popupCard.dialog) {
            this.unSelectLines($serverIndex);
        }
        if ((field = this.getField(name, $serverIndex))) {
            return field.focus();
        }
        else {
            if (this.isClientFetch) {
                this.pagingCapability.setPage($serverIndex);
                if ((field = this.getField(name, $serverIndex))) {
                    return field.focus();
                }
            }
        }
        return false;
    },
    getDataValue: function(name, $serverIndex){
        var dataRecordSet = this.ensureDataSet();
        var field;
        if ($serverIndex !== undefined) {
            if (field = this.getField(name, $serverIndex)) {
                return field.getDataValue();
            }
            else {
                for (var ii = 0, jj = dataRecordSet.length; ii < jj; ii++) {
                    if (dataRecordSet[ii].$serverIndex == $serverIndex) {
                        var value = dataRecordSet[ii][name];
                        return value === undefined ? null : value;
                    }
                }
            }
            return null;
        }
        return dataset;
    },
    
    getField: function(name, $serverIndex, select){
        var fields, record = listHelper.findRecordByServerIndex(this, $serverIndex);
        if (record && !record.disposed) {
            if ((fields = record.boundFields[name]) && fields.length > 0) {
                var found = fields[0];
                if (record.cardview && this.builder.recordCardView == record && this.builder.popupCard && this.builder.popupCard.dialog && !this.builder.popupCard.dialog.disposed) {
                    found = this.builder.findCardViewField(name, record);
                }
                return found;
            }
        }
        return null;
    },
    getSelectedRecordIndexes: function(){
        var result = [], ir = -1, r = {};
        this.dataset.filter(function(elt, idx){
            return elt.$isSelected
        }).forEach(function(elt, idx){
            if (!result[ir] || result[ir].start + result[ir].count != elt.$serverIndex) {
                r = {};
                r.start = elt.$serverIndex;
                r.count = 1;
                result.push(r);
                ir++;
            }
            else {
                result[ir].count++
            }
        })
        return result;
    },
    unSelectLines: function(serverIndex){
        var recordData, items = [];
        for (var ii = 0; ii < this.dataset.length; ii++) {
            if (recordData = this.recordsMap[this.dataset[ii].$uuid]) {
                if (serverIndex == undefined || (serverIndex != undefined && recordData.$serverIndex != serverIndex)) {
                    if (this.dataset[ii].$isSelected) {
                        items.push({
                            $uuid: recordData.$uuid,
                            $isSelected: false
                        })
                    }
                }
                else {
                    if (!this.dataset[ii].$isSelected) {
                        items.push({
                            $uuid: recordData.$uuid,
                            $isSelected: true
                        })
                    }
                }
            }
            else {
                if (serverIndex == undefined || (serverIndex != undefined && this.dataset[ii].$serverIndex != serverIndex)) {
                    this.dataset[ii].$isSelected = false
                }
                else {
                    this.dataset[ii].$isSelected = true
                }
            }
        }
        if (items.length > 0) {
            this.applyMetaData({
                $items: items
            })
        }
    },
    findRecord: function($$selector){
        var $uuid = this.findRecordUiid($$selector)
        return this.recordsMap[$uuid];
    },
    findRecordUiid: function($$selector){
        return ($$selector.is("[data-s-record]") ? $$selector : $$selector.closest("[data-s-record]")).attr("data-s-record");
    }
});
