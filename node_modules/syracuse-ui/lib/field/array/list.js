"use strict";
var helpers = require('syracuse-core/lib/helpers');

var Article = require("syracuse-ui/lib/article/article").Article;
var authoringOpener = require("./authoring/authoringOpener");

var ListContextMenu = require('./listContextMenu').ListContextMenu;
var GraphDecorator = require("./graphDecorator").GraphDecorator;
var Field = require('syracuse-ui/lib/field/field').Field;
var GridBuilder = require("./gridBuilder/gridBuilder").GridBuilder;
var SingleBuilder = require("./singleBuilder/singleBuilder").SingleBuilder;
var CardsBuilder = require("./cardsBuilder/cardsBuilder").CardsBuilder;
var RecordStore = require("./record/recordStore").RecordStore;
var PagingCapability = require("./capability/pagingCapability").PagingCapability;
var SortCapability = require("./capability/sortCapability").SortCapability;
var FilterCapability = require("./record/filterCapability").FilterCapability;
var ReorderCapability = require('./capability/reorderCapability').ReorderCapability;
var locale = require('syracuse-core/lib/locale');

function DesktopList(){
}

exports.DesktopList = helpers.defineClass(DesktopList, Article, {
    ensureDataSet: function(){
        return this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || [];
    },
    findDataRecord: function($uuid){
        var found;
        this.dataset.some(function(dataRecord, index){
            if (dataRecord && dataRecord.$uuid == $uuid) {
                found = {
                    dataRecord: dataRecord,
                    dataRecordIndex: index
                };
                return true;
            }
            return false;
        });
        return found;
    },
    loadBox: function(initData){
        this.articleParent = this.getArticleParent();
        document.site.addResizeListener(this);
        Article.prototype.loadBox.call(this, initData);
    },
    drawBox: function(){
        this.arrayLevel = "array";
        this.isRecordDataset = true; //!important for sendBag
        this._localize = locale.resources(module)();
        (this._store = new RecordStore()).load(this);
        this.sortCapability = new SortCapability(this);
        this.pagingCapability = new PagingCapability(this);
        this.filterCapability = new FilterCapability(this);
        this.$layoutOptions = document.site.$item.$layoutOptions.list;
        this.createBuilder();
        
        this.$isLayoutContentSizeDisabled = true;
        this.$fieldProperties = this.$prototype.$item.$properties || {};
        this.filterCapability.validateIsQuickFilter();
        
        this.$recordFacet = this.articleParent.$item.$recordFacet || this.$facet || "$details";
        switch (this.articleParent.$facet) {
            case "$bulk":
            case "$query":
                break;
            case "$lookup":
                this.$item.$selectMode = "button";
                break;
            case "$select":
                this.$item.$selectMode = "multi";
                break;
            default:
                this.isClientFetch = true;
                break;
        }
        
        if ((this.$isEditMode = this.$item.$isEditMode) === undefined) {
            this.$isEditMode = this.articleParent.$isEditMode;
        }
        this.applyCapabilitiesSettings(this.$prototype);
        
        if (!this.$item.$layout) {
            this.$item.$layout = {};
        }
        if (!this.$item.$layout.$items) {
            this.$item.$layout.$items = Object.keys(this.$fieldProperties).map(function($bind){
                return {
                    $bind: $bind
                };
            });
        }
        if (this.$prototype.$cube) {
            if ((this.$item.$graphMode = this.$item.$graphMode || "both") == "both") {
                this.$item.$graphPosition = "top";
            }
        }
        
        this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
            this.inputId = this.id + "-input";
        }
        Field.prototype._initCss.call(this);
        
        this._domItem = document.createElement("div");
        this._domItem.className = this._$cssTopField;
        this.$$item = $(this.$$container[0].appendChild(this._domItem));
        
        this.appendTitle();
        
        this._createValueContainer();
        
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setState(this.$field);
        this.setEditMode(this.$field);
        
        this.fieldValue.className += " s-list";
        
        this._topbar = document.createElement("div");
        this._topbar.className = "s-list-topbar";
        this.fieldValue.appendChild(this._topbar);
        
        this._core = document.createElement("div");
        this._core.className = "s-list-core";
        this.fieldValue.appendChild(this._core);
        
        if (this.$item.$isQuickDesignerEnabled !== false) {
            this.quickDesigner = new authoringOpener.QuickDesigner();
            this.quickDesigner.appendOpener(this)
        }
        this._contextMenusSlot = document.createElement("div");
        this._contextMenusSlot.className = "s-list-menus-cell";
        if (this.$item.$isContextMenuHidden) {
            this._contextMenusSlot.style.display = "none";
        }
        this._topbar.appendChild(this._contextMenusSlot);
        
        this.builder.drawBuilder();
        this.articleParent.bind(this, this.$item.$bind);
    },
    applyCapabilitiesSettings: function(newData){
        this.pagingCapability.setOptions(newData);
        this.sortCapability.setOrderBy(newData.$orderBy, newData.$startLetter);
        this.filterCapability.setWhere(newData.$where);
    },
    setSortCapability: function(){
        this.sortCapability.load();
    },
    onWindowResize: function(initialize){
        if (this.builder && this.builder.onWindowResize) {
            this.builder.onWindowResize(initialize);
        }
    },
    _createValueContainer: function(){
        this.domValueSlot = document.createElement("article");
        this.domValueSlot.className = this._$cssField + "-value";
        this._dataValue = this._core = this.fieldValue = this.domValueSlot;
        this.$$dataValue = $(this.domValueSlot);
        this._domItem.appendChild(this.domValueSlot);
    },
    fetch: function(options, $location){
        var self = this;
        var params = {
            where: self.filterCapability.$where,
            select: self.$select
        };
        if (options) {
            params.startLetter = options.startLetter;
            params.startIndex = options.startIndex
            this.pagingCapability.setOptions({
                $itemsPerPage: options.$itemsPerPage
            });
            params.count = this.pagingCapability._$itemsPerPage;
            if (options.orderBy) {
                params.startIndex = 1;
                self.sortCapability.setOrderBy(options.orderBy, options.startLetter);
            }
            if (options.filter != null) {
                params.startIndex = 1;
                params.where = self.filterCapability.$where = options.filter != "" ? options.filter : null;
            }
            if (options.queryBindings) {
                if (options.queryBindings.length == 0) {
                    Object.keys(self.$fieldProperties).forEach(function($bind){
                        options.queryBindings.push(self.$fieldProperties.$bind || $bind);
                    });
                }
                self.select = options.queryBindings.map(function(binding){
                    return binding.replace(/\./g, '/');
                }).join(',');
            }
        }
        params.orderBy = self.sortCapability.stringify();
        var fetchOptions = {
            params: params
        };
        
        if (self.isClientFetch) {
            self.fetchClientRecordSet(fetchOptions);
        }
        else {
            fetchOptions.field = self;
            fetchOptions.$updateHitory = self.page.isMainPage;
            fetchOptions.$location = $location;
            self.articleParent.fetch(fetchOptions);
        }
        if (self.articleParent.onFetchHandler) {
            self.articleParent.onFetchHandler(fetchOptions);
        }
    },
    fetchClientRecordSet: function(options){
        var self = this;
        if (options && options.params) {
            var $orderBy;
            var resource = {
                dataRecordSet: self.ensureDataSet()
            };
            if (options.params.orderBy) {
                $orderBy = self.sortCapability.parse(options.params.orderBy);
                if (options.params.startLetter) {
                    self.sortCapability.filterByStartLetter(resource, {
                        binding: $orderBy[0].binding,
                        startLetter: options.params.startLetter
                    });
                }
                self.sortCapability.syracuseSort(resource, $orderBy);
            }
            if (options.params.where) {
                self.filterCapability.applyFilter(resource, options.params.where);
            }
            if (options.params.count || options.params.startIndex) {
                self.pagingCapability.goToPage(resource, {
                    $itemsPerPage: options.params.count,
                    $startIndex: options.params.startIndex
                });
            }
            var dataRecordSet = resource.dataRecordSet;
            delete resource.dataRecordSet;
            
            self.articleParent.boundFields[self.$item.$bind].forEach(function(field){
                field.onClientFetch = true;
                field.setDataBind(dataRecordSet, self.articleParent.dataset, resource);
                field.onClientFetch = false;
            });
        }
    },
    setHelp: function($help){
        Field.prototype.setHelp.call(this, $help);
    },
    setDescription: function($description){
        Field.prototype.setDescription.call(this, $description);
    },
    hideTitle: function($isTitleHidden){
        Field.prototype.hideTitle.call(this, $isTitleHidden);
    },
    getDefaultTitle: function(){
        return this._localize.l_defaultTitle;
    },
    getTitle: function(){
        return Field.prototype.getTitle.call(this);
    },
    setTitle: function($title){
        Field.prototype.setTitle.call(this, $title);
        if (this.domTitle) {
            this.domTitle.style.display = this.getTitle().length == 0 ? "none" : "";
        }
    },
    getLocalizedTitle: function($title){
        if ($title && $title.length > 0 && $title[1] == "@") {
            return this.boxParent._renderExpression($title);
        }
        return $title;
    },
    appendTitle: function(){
        if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
            Field.prototype.appendTitle.call(this);
            this.domTitle.style.display = "none";
        }
    },
    
    releaseMode: function(onDispose){
        if (this.contextMenu) {
            document.controller.disposeObject(this.contextMenu);
        }
        document.controller.disposeObject(this.builder);
        $(this._core).empty();
        delete this.contextMenu;
        delete this.builder;
        delete this.domTitle;
        delete this._mandatoryFlag;
        delete this._description;
        delete this._helpFlag;
    },
    toggleDiagnose: function(css, show){
    },
    drawDiagnose: function($diagnose, severityGroup){
        Field.prototype.drawDiagnose.call(this, $diagnose, severityGroup);
    },
    _ensureMenuPickerVisible: function(){
    },
    setMenus: function($menus){
        if ($menus) {
            //important copy allow multi binding
            this.applyChange({
                $links: $menus.$links,
                $actions: $menus.$actions
            });
        }
    },
    applyActionLinkChange: function(resources, record){
        Article.prototype.applyActionLinkChange.call(this, resources, record);
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            if (!this.contextMenu) {
                (this.contextMenu = new ListContextMenu()).create(this);
            }
            if (resources.$links === null) {
                this.contextMenu.clearMenuItems();
            }
        }
    },
    createBuilder: function(){
        if (!this.$field.$item.$properties || this.$field.$item.$type == "application/x-reference") {
            this.builder = new SingleBuilder();
        }
        else {
            if ((this.$item.$format = this.$item.$format || "grid") == "cards") {
                this.builder = new CardsBuilder();
            }
            else {
                this.builder = new GridBuilder();
            }
            this.builder.$layoutOptions = this.$layoutOptions.builder[this.$item.$format] || null;
        }
        this.builder.list = this;
        this.builder.initialize();
    },
    reloadBuilder: function(fillData){
        document.controller.disposeObject(this.builder);
        $(this._core).empty();
        this.createBuilder();
        this.builder.drawBuilder();
        if (fillData) {
            this._fillList(this.ensureDataSet(), this.articleParent.dataset);
        }
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if (onAuthoring) {
            if (metaData.$format !== undefined) {
                this.$item.$format = metaData.$format;
                this.reloadBuilder(true);
            }
            if (metaData.$isQuickFilter !== undefined) {
                this.$item.$isQuickFilter = metaData.$isQuickFilter;
                this.reloadBuilder(true);
            }
            if (metaData.$isRowIndexVisible !== undefined) {
                this.$item.$isRowIndexVisible = metaData.$isRowIndexVisible;
                this.reloadBuilder(true);
            }
        }
        if (this.$prototype.$cube) {
            if (!this.graphDecorator) {
                this.graphDecorator = new GraphDecorator();
            }
            this.graphDecorator.applyGraphSettings(this, metaData);
        }
        Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
        this.builder.applyDesignMetaData(metaData, onAuthoring);
        return this.applyFieldsMetaData(metaData, onAuthoring);
    },
    setEditMode: function(state){
        if (state.$editMode !== undefined && this.$editMode != state.$editMode) {
            if (this.$editMode == "cell") {
                this._bindEditFieldEvents(false);
            }
            if ((this.$editMode = state.$editMode) == "cell") {
                this._bindEditFieldEvents(true);
            }
        }
    },
    _bindEditFieldEvents: function(bind){
        var self = this;
        if (bind) {
            self.$$item.delegate("[data-s-field]", "click.editmode", function(event){
                var $$target = $(event.currentTarget);
                var record = self._store.findRecord($$target);
                var field = record.idMap[$$target.attr("data-s-field")];
                self.page.externalAdapter.onFieldEvent({
                    field: field,
                    event: event,
                    doEvent: function(){
                        if (field && !field.$isEditMode) {
                            setTimeout(function(){
                                field.toggleEditMode();
                                field.focus();
                            }, 10);
                        }
                    }
                });
                event.stopPropagation();
            });
        }
        else {
            if (self.$$item) {
                self.$$item.undelegate("click.editmode");
            }
        }
    },
    applyFieldStyle: function(metaData){
        Field.prototype.applyFieldStyle.call(this, metaData);
    },
    toggleEditMode: function($isEditMode){
    },
    applyFieldsMetaData: function(metaData, onAuthoring){
        var self = this;
        var redraw = false;
        
        self.setEditMode(metaData);
        
        if (metaData.$isReadOnly !== undefined ||
        metaData.$isDisabled !== undefined ||
        metaData.$fieldStyle !== undefined ||
        metaData.$valueStyle !== undefined ||
        metaData.$titleStyle !== undefined) {
            metaData.$item = metaData.$item || {};
            var $properties = metaData.$item.$properties = metaData.$properties || {};
            redraw = true;
            Object.keys(self.$fieldProperties).forEach(function($bind){
                $properties[$bind] = $properties[$bind] || {};
                if (metaData.$isReadOnly !== undefined && $properties[$bind].$isReadOnly === undefined) {
                    $properties[$bind].$isReadOnly = self.$isReadOnly;
                }
                if (metaData.$isDisabled !== undefined && $properties[$bind].$isDisabled === undefined) {
                    $properties[$bind].$isDisabled = metaData.$isDisabled;
                }
                if (metaData.$fieldStyle !== undefined && $properties[$bind].$fieldStyle === undefined) {
                    $properties[$bind].$fieldStyle = metaData.$fieldStyle;
                }
                if (metaData.$valueStyle !== undefined && $properties[$bind].$valueStyle === undefined) {
                    $properties[$bind].$valueStyle = metaData.$valueStyle;
                }
                if (metaData.$titleStyle !== undefined && $properties[$bind].$titleStyle === undefined) {
                    $properties[$bind].$titleStyle = metaData.$isDisabled;
                }
            });
        }
        if (metaData.$orderBy !== undefined) {
            self.sortCapability.setOrderBy(metaData.$orderBy, metaData.$startLetter);
        }
        self.pagingCapability.applyMetadata(metaData, onAuthoring);
        if (metaData.$item) {
            if (metaData.$item.$properties) {
                Object.keys(metaData.$item.$properties).forEach(function($bind){
                    var $metaField = metaData.$item.$properties[$bind];
                    var $updated;
                    if (onAuthoring) {
                        self.$item.$layout.$items.some(function($item){
                            if ($item.$bind == $bind) {
                                $updated = $item;
                                return true;
                            }
                            return false;
                        });
                    }
                    else {
                        $updated = self.$fieldProperties[$bind];
                    }
                    if ($updated) {
                        if (!redraw) {
                            redraw = ($metaField.$isHidden !== undefined) || ($metaField.$isReadOnly !== undefined) ||
                            ($metaField.$isDisabled !== undefined) ||
                            ($metaField.$fieldStyle !== undefined) ||
                            ($metaField.$valueStyle !== undefined) ||
                            ($metaField.$titleStyle !== undefined);
                        }
                        self.page.deltaManager.applyObjectDelta($updated, $metaField, true);
                    }
                });
            }
            ["$links", "$actions"].forEach(function($menuType){
                var $newMenus = metaData.$item[$menuType];
                if ($newMenus) {
                    var $menus = self.$fieldProperties[$menuType] = self.$prototype.$item[$menuType] || {};
                    self.page.deltaManager.applyObjectDelta($menus, $newMenus, true);
                }
            });
        }
        if (redraw) {
            self.reloadBuilder();
        }
        return redraw;
    },
    getAuthoringWidget: function(){
        return new authoringOpener.WidgetAuthoring();
    },
    emptyDiagnoseSlot: function(){
        if (this.domDiagnose) {
            document.site.emptyDom(this.domDiagnose);
            this.domDiagnose.style.visibility = "hidden";
        }
    },
    ensureDiagnoseSlot: function(){
        if (!this.domDiagnose && this._dataValue) {
            this.domDiagnose = document.createElement("div");
            this.domDiagnose.className = "s-field-diagnose";
            this._dataValue.appendChild(this.domDiagnose);
        }
        else {
            document.site.emptyDom(this.domDiagnose);
        }
    },
    onMenuClick: function(menuItem){
        var doClick = false;
        if (!menuItem.$isAction && menuItem.$bind == "$select") {
            this._store.doSelectAction();
            return false;
        }
        return true;
    },
    onAfterNotifyDataChange: function(){
        this.onWindowResize(true);
    },
    onNotifyDataChange: function(field, value){
        if (field.$item.$bind == "$itemsPerPage") {
            this.pagingCapability.fetchItemPerPage(value);
        }
        return false;
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        this._store.setState(state);
    },
    setReorderCapability: function(reorder){
        if (reorder) {
            this.$item.$isRowIndexVisible = true;
            if (!this.reorderCapability) {
                (this.reorderCapability = new ReorderCapability(this)).setDraggable();
            }
        }
        else {
            if (this.reorderCapability) {
                document.controller.disposeObject(this.reorderCapability);
                delete this.reorderCapability;
            }
        }
    },
    parseCapabilities: function($capabilities){
        var self = this;
        self.$capability = {};
        if ($capabilities !== undefined) {
            $capabilities.split(",").forEach(function($prop){
                self.$capability[$prop] = true;
            });
            if (self.$capability.reorder !== undefined) {
                self.setReorderCapability(self.$capability.reorder);
            }
        }
    },
    applyCapabilities: function(record){
        var $actions = {};
        if (record) {
            if (this.$capability.insert) {
                $actions.$create = {
                    $title: this._localize.slist_insert
                };
            }
        }
        else {
            if (this.$capability.append) {
                $actions.$create = {
                    $title: this._localize.slist_append,
                    $isHidden: false
                };
            }
        }
        if (this.$capability["delete"]) {
            $actions.$delete = {
                $title: this._localize.slist_delete,
                $isHidden: false
            };
        }
        if ($actions.$create || $actions.$delete || $actions.$select) {
            (record || this).applyChange({
                $actions: $actions
            });
        }
        
    },
    _applyMetaDataCapabilities: function(metaData){
        var $prev = this.$capability;
        this.parseCapabilities(metaData.$capabilities);
        if ($prev.append && !this.$capability.append) {
            this.applyChange({
                $actions: {
                    $create: {
                        $isHidden: true
                    }
                }
            });
        }
        if ($prev["delete"] && !this.$capability["delete"]) {
            this.applyChange({
                $actions: {
                    $delete: {
                        $isHidden: true
                    }
                }
            });
        }
        this.applyCapabilities();
    },
    applyMetaData: function(metaData){
        var self = this;
        var redraw = false;
        Field.prototype.applyMetaData.call(self, metaData);
        if (metaData.$type === undefined) {
            if (metaData.$items) {
                if (self.builder.isSingleBuilder) {
                    self._store._records.forEach(function(record, index){
                        record.applyMetaData(metaData.$items[index]); //metadata and not applyChange cause no $bind
                    });
                }
                else {
                    metaData.$items.forEach(function($record){
                        var record = self._store._map[$record.$uuid];
                        if (record) {
                            record.applyChange($record);
                        }
                    });
                }
            }
            redraw = self.applyFieldsMetaData(metaData);
        }
        if (metaData && metaData.$capabilities !== undefined) {
            self._applyMetaDataCapabilities(metaData);
            redraw = redraw || (self._store._records.length > 0);
        }
        return redraw;
    },
    _applyFullDelta: function(dataRecordSet, firstIndex, lastIndex){
        var self = this;
        var orderChanged;
        dataRecordSet.forEach(function(dataSourceRecord){
            var found, foundIndex;
            self._store._records.some(function(record, index){
                if (record.$uuid == dataSourceRecord.$uuid) {
                    found = record;
                    foundIndex = index;
                    return true;
                }
                return false;
            });
            if (found) {
                if (dataSourceRecord.$isDeleted) {
                    self._store._records.splice(foundIndex, 1);
                    delete self._store._map[found.$uuid];
                    self.removeRecord(found);
                    orderChanged = true;
                }
                else {
                    found.ensureDataSet();
                    found.applyChange(dataSourceRecord);
                    if (dataSourceRecord.$index !== undefined && dataSourceRecord.$index != foundIndex) {
                        self._store._records.splice(foundIndex, 1);
                        self._store._records.splice(dataSourceRecord.$index, 0, found);
                        orderChanged = true;
                    }
                }
            }
            else {
                var index = dataSourceRecord.$index !== null && dataSourceRecord.$index !== undefined ? dataSourceRecord.$index : $serverIndex;
                if (firstIndex !== undefined) {
                    if ((index < firstIndex) ||
                    (lastIndex != undefined && index >= lastIndex)) {
                        index = -1;
                    }
                }
                if (index != -1) {
                    self._store.appendRecord({
                        dataRecord: dataSourceRecord,
                        $serverIndex: dataSourceRecord.$index,
                        $recordIndex: dataSourceRecord.$index,
                        isInsert: true
                    });
                    orderChanged = true;
                }
            }
        });
        if (orderChanged) {
            self._store.ensureRecordsIndex();
        }
    },
    _applyRecordListDelta: function(dataRecordSet, firstIndex, lastIndex){
        var self = this;
        var orderChanged;
        var oldMap = self._store._map;
        self._store._map = {};
        self._store._records = [];
        var lastRecord;
        dataRecordSet.forEach(function(dataRecord, $serverIndex){
            var record = oldMap[dataRecord.$uuid];
            if (record) {
                record.applyChange(dataRecord);
                if (record.$serverIndex != $serverIndex) {
                    if (lastRecord) {
                        record.notifyReorder(lastRecord, "insertAfter");
                    }
                    else {
                        record.notifyReorder(null, "prepend");
                    }
                    record.$recordIndex = record.$serverIndex = $serverIndex;
                    record.ensureDataSet();
                    orderChanged = true;
                }
                self._store._records.push(self._store._map[dataRecord.$uuid] = lastRecord = record);
            }
            else {
                var index = dataRecord.$index || $serverIndex;
                if (firstIndex !== undefined) {
                    if ((index < firstIndex) ||
                    (lastIndex != undefined && index >= lastIndex)) {
                        index = -1;
                    }
                }
                if (index != -1) {
                    record = self._store.appendRecord({
                        dataRecord: dataRecord,
                        $serverIndex: $serverIndex,
                        $recordIndex: $serverIndex,
                        isInsert: true
                    });
                    self._store._map[dataRecord.$uuid] = lastRecord = record;
                    orderChanged = true;
                }
            }
            delete oldMap[dataRecord.$uuid];
        });
        Object.keys(oldMap).forEach(function(uuid){
            self.removeRecord(oldMap[uuid]);
        });
        if (orderChanged) {
            self._store.ensureRecordsIndex();
        }
    },
    removeRecord: function(record){
        record.remove();
        this.removeItem(record, true);
    },
    _fillList: function(dataRecordSet, parentDataRecord, isDelta){
        var self = this;
        self.applyCapabilitiesSettings(parentDataRecord);
        if (isDelta) {
            var firstIndex, lastIndex;
            if (self.pagingCapability) {
                firstIndex = self.pagingCapability._$startIndex;
                if (firstIndex !== undefined) {
                    --firstIndex;
                    if (self.pagingCapability._$itemsPerPage !== undefined) {
                        lastIndex = firstIndex + self.pagingCapability._$itemsPerPage;
                    }
                }
            }
            if (self.page.$isFullDelta || (dataRecordSet.length == 1 && dataRecordSet[0].$index !== undefined)) {
                self._applyFullDelta(dataRecordSet, firstIndex, lastIndex);
            }
            else {
                self._applyRecordListDelta(dataRecordSet, firstIndex, lastIndex);
            }
            if (lastIndex && self._store._records.length > self.pagingCapability._$itemsPerPage) {
                while (self._store._records.length > self.pagingCapability._$itemsPerPage) {
                    var record = self._store._records[self._store._records.length - 1];
                    delete self._store._map[record.$uuid];
                    self.removeRecord(record);
                    self._store._records.pop();
                }
            }
        }
        else {
            self.builder._body.style.display = "none";
            self._store.removeRecords(!(dataRecordSet && dataRecordSet.length > 0));
            if (dataRecordSet) {
                if (self.isClientFetch && self.pagingCapability) {
                    var resources = self.pagingCapability.ensureClientPageSize({
                        dataRecordSet: dataRecordSet
                    });
                    if (resources.dataRecordSet.length != dataRecordSet.length) {
                        self.applyMetaData(resources);
                        dataRecordSet = resources.dataRecordSet;
                    }
                }
                dataRecordSet.forEach(function(dataRecord, $serverIndex){
                    if (!dataRecord.$isDeleted) {
                        self._store.appendRecord({
                            dataRecord: dataRecord,
                            $serverIndex: $serverIndex,
                            $recordIndex: $serverIndex
                        });
                    }
                });
            }
        }
        if (self.builder.onAfterDataBinding) {
            self.builder.onAfterDataBinding();
        }
        self.pagingCapability.draw();
        self.sortCapability.renderOrderBy();
        if (self.builder._bodySlot) {
            self.builder._bodySlot.style.visibility = "hidden";
        }
        self.builder._body.style.display = "";
        self.onWindowResize(true);
        if (self.builder._bodySlot) {
            self.builder._bodySlot.style.visibility = "visible";
        }
    },
    
    setDataBind: function(dataRecordSet, parentDataRecord, metaData){
        this.ensureDataSet();
        var redraw = false;
        if (this.page.externalAdapter.setDataBind(this, dataRecordSet, parentDataRecord, metaData)) {
            if (metaData) {
                if (redraw = this.applyMetaData(metaData)) {
                    this._fillList(this.ensureDataSet(), this.articleParent.dataset);
                }
            }
            if (dataRecordSet !== undefined) {
                if (this.page.$isFullDelta || (!this.onClientFetch && this.page.isDeltaMode && this._store.hasRecords() && !this.builder.isSingleBuilder)) {
                    this._fillList(dataRecordSet, parentDataRecord, true);
                }
                else {
                    this._fillList(dataRecordSet, parentDataRecord);
                }
            }
        }
    },
    validate: function(){
        return this._store.validate();
    },
    dispose: function(){
        document.site.removeResizeListener(this);
        
        this._bindEditFieldEvents(false);
        delete this._menus;
        if (this.contextMenu) {
            document.controller.disposeObject(this.contextMenu);
            delete this.contextMenu;
        }
        delete this.page;
        Article.prototype.dispose.call(this);
    }
});
