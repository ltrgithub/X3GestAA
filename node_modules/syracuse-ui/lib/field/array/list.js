"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var fieldHelper = require('syracuse-ui/lib/field/helpers/fieldHelper');
var Field = require('syracuse-ui/lib/field/field').Field;
var PagingCapability = require("./capability/pagingCapability").PagingCapability;
var RecordReorderDDAgent = require("syracuse-ui/lib/field/array/capability/recordReorderDDAgent").RecordReorderDDAgent;
var parser = require('syracuse-sdata/lib/parser/parser');
var formatApi = require('syracuse-ui/lib/field/formatApi');

var _capabilityActions = {
	append: {
		$bind: "$create",
		$title: "flAppend"
	},
	deleteAll: {
		$bind: "$delete",
		$title: "flDeleteAll",
		$confirm: "flDeleteAllMessageText"
	}
};

function DesktopList() {}

exports.DesktopList = helpers.defineClass(DesktopList, Article, {
	notifyClientSave: function(savedDelta) {
		if (savedDelta && savedDelta.$uuid) {
			var dataRecord = this.findDataRecord(savedDelta.$uuid);
			var delta = {};
			var $binds = Object.keys(this.$prototype.$item.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				if (savedDelta[$bind] !== undefined) {
					delta[$bind] = savedDelta[$bind];
				}
			}
			delta.$uuid = savedDelta.$uuid;
			delta.$key = savedDelta.$key;
			if (dataRecord) {
				syra_site.deltaManager.applyObjectDelta(this.page, dataRecord, delta);
				if (this.recordsMap[savedDelta.$uuid]) {
					this.recordsMap[savedDelta.$uuid].applyChange(delta);
				}
			} else {
				var dataset = this.ensureDataSet();
				delta.$index = dataset.length;
				delta = [delta];
				syra_site.deltaManager.applyPageArrayDelta(this.page, dataset, delta);
				this.setDataBind(delta, this.articleParent.ensureDataSet());
			}
		}
	},
	applyShortCuts: function(shortcuts, event, focusField) {
		return false;
	},
	designArticle: function(open) {},
	toggleUIDesign: function(enable, disposingDesigner) {
		if (enable) {
			if (!this.designPicker && this.topbar) {
				this.designPickerSlot = document.createElement("div");
				this.designPickerSlot.className = "s-list-designer-picker-slot";
				this.designPicker = document.createElement("a");
				this.designPicker.className = "s-list-designer-picker";
				this.designPicker.syraItem = this.id;
				this.designPicker.syraOnClick = "onDesignOpenerClick";
				this.designPickerSlot.appendChild(this.designPicker);
				this.topbar.insertBefore(this.designPickerSlot, this.topbar.firstChild);
			}
		} else {
			if (disposingDesigner) {
				this.designArticle(false);
			}
			if (this.designPicker) {
				syra_site.dom.removeChild(this.designPickerSlot);
				this.designPicker = this.designPickerSlot = null;
			}
		}
		this._ensureDesignMenuSlotVisibility();
	},
	_ensureDesignMenuSlotVisibility: function() {
		if (this.menusSlot) {
			this.menusSlot.style.display = (this.designPicker || this.designer) ? "none" : "";
		}
		if (this.designPicker) {
			syra_site.dom.disableItem(this.designPicker, this.designer);
		}
	},
	ensureDataSet: function() {
		return this.dataset = this.setDatasetValue(this.getDatasetValue() || []);
	},
	getDatasetValue: function() {
		return Field.prototype.getDatasetValue.call(this);
	},
	setDatasetValue: function(value) {
		return Field.prototype.setDatasetValue.call(this, value);
	},
	ensureLayoutMode: function() {
		Field.prototype.ensureLayoutMode.call(this);
	},
	onDesignOpenerClick: function() {
		this.designArticle(!this.designer);
	},
	loadBox: function(initData) {
		if (!this.articleParent.childLists) {
			this.articleParent.childLists = [];
		}
		this.mnPickers = {};
		this.mnPickersCss = "s-list-picker";
		this.articleParent.childLists.push(this);
		this.isList = true;
		this.$iconPath = this.$item.$iconPath || "list/s-list-";
		this.$skinMenus = this.$item.$skinMenus || "s-list-menus";
		Article.prototype.loadBox.call(this, initData);
		this.articleParent.bind(this, this.$item.$bind);
		if (syra_site.enableTestRobot) {
			fieldHelper.appendQualityAtt(this, this.domItem);
		}
		if (this.records.length == 0) {
			this.emptyBody(true, this.page.$autoFetch);
		}
	},
	showDiagnoses: function(diagnoses, options) {
		Field.prototype.showDiagnoses.call(this, diagnoses, options);
	},

	ensureClientDataset: function() {
		if (!this.clientDataset) {
			this.clientDataset = this.ensureDataSet();
		}
		return this.clientDataset;
	},
	applyFacetSetting: function() {
		this.isServerStepPager = false;
		this.isClientFetch = this.isClientFetch !== false;
		if (this.$prototype.$treeview) {
			this.isClientFetch = false;
			this.isPagingDisabled = !this.$item.$isNavigationList;
			this.pagging.noPageSize = true;
			delete this.$item.$itemsPerPage;
		}
	},
	ensureEditMode: function() {
		Field.prototype.ensureEditMode.call(this);
	},
	appendDetailLink: function(value, $detailsLink) {},
	drawBox: function() {
		this.arrayLevel = "array";
		this.isRecordDataset = true; //!important for sendBag
		this._isAddDisabled = false;
		this.records = [];
		this.recordsMap = {};

		this.$fields = this.$prototype.$item.$properties || {};
		this.$recordFacet = this.articleParent.$item.$recordFacet || this.$facet || "$details";

		this.pagging = new PagingCapability(this);
		this.initializeList();


		this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
		if (this.$isEditMode) {
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
			this.inputId = this.id + "-input";
		}
		Field.prototype._initCss.call(this);

		this.domItem = document.createElement("div");
		this.domItem.className = this._$cssField;
		this.domItem.syraItem = this.id;
		this.appendTitle();

		this._createValueContainer();

		this.setTitle(this.$item.$title || this.$field.$title);
		this.setDescription(this.$item.$description || this.$field.$description);
		this.setState(this.$field);

		this.setAdvancedState();
		this.fieldValue.className = "s-list";

		this.topbar = document.createElement("div");
		this.topbar.className = "s-list-topbar";
		this.fieldValue.appendChild(this.topbar);

		this._core = document.createElement("div");
		this._core.className = "s-list-core";
		this.fieldValue.appendChild(this._core);

		this.setArticleId(this.topbar);
		this.setArticleId(this._core);
	},
	onAddMenuPicker: function(picker) {
		var prev;
		if (picker.syraPickerType == "menus") {
			prev = this.mnPickers.create || this.mnPickers.select;
			if (prev) {
				prev = prev.nextSibling;
			}
		}
		this.topbar.insertBefore(picker, prev || this.topbar.firstChild);
	},
	_createValueContainer: function() {
		this.domValueSlot = document.createElement("article");
		this.domValueSlot.className = this._$cssField + "-value";
		this._dataValue = this._core = this.fieldValue = this.domValueSlot;
		this.domItem.appendChild(this.domValueSlot);
	},
	fetch: function(options, $location) {
		var self = this;
		var params = {
			where: self.$where,
			select: self.$select
		};
		if (options) {
			if (options.$filters) {
				if (options.$filters == "$noFilters") {
					params.filter = "null";
				} else {
					params.filter = options.$filters;
				}
				self.selectServerFilter(params.filter);
				self.paramsFilter = params.filter;
			} else {
				if (self.paramsFilter) {
					params.filter = self.paramsFilter;
				}
			}
			params.startLetter = options.startLetter;
			params.startIndex = options.startIndex;
			params.count = self.pagging.getItemsPerPage(options.$itemsPerPage);
			if (options.orderBy !== undefined) {
				params.startIndex = 1;
				self.sortCapability.setOrderBy(options.orderBy, options.startLetter);
			}
			if (options.filter != null) {
				params.startIndex = 1;
				params.where = self.$where = options.filter != "" ? options.filter : null;
			}
			if (options.queryBindings) {
				if (options.queryBindings.length == 0) {
					var $binds = Object.keys(self.$fields);
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						options.queryBindings.push($binds[ii]);
					}
				}
				self.select = options.queryBindings.map(function(binding) {
					return binding.replace(/\./g, '/');
				}).join(',');
			}
		}
		params.orderBy = self.sortCapability.stringify();
		var fetchOptions = {
			params: params
		};
		if (self.isClientFetch || self.isClientSortEnable) {
			options = options || {};
			var $keys = Object.keys(options);
			self.fetchClientRecordSet(fetchOptions, $keys.length == 1 && ($keys == "$itemsPerPage" || $keys == "startIndex"));
		} else {
			fetchOptions.field = self;
			fetchOptions.$updateHitory = self.page.isMainPage;
			fetchOptions.$location = $location;
			if (params.where !== undefined) {
				self.page.$prototype.$where = params.where;
			}
			if (params.filter !== undefined) {
				self.page.$prototype.$filter = params.filter;
			}
			self.articleParent.fetch(fetchOptions, function(data, response, requestUrl) {
				if (self.page.dataset) {
					delete self.page.dataset[self.$item.$bind];
					var steps = ["$first", "$previous", "$next", "$last"];
					var $links = self.page.dataset.$links || {};
					for (var ii = steps.length - 1; ii >= 0; ii--) {
						delete $links[steps[ii]];
						delete self.page.$menus[steps[ii]];
					}
				}
				if (self.page.$properties) {
					delete self.page.$properties[self.$item.$bind];
				}
				self.page.startChange();
				self.page.applyChange(data, response, requestUrl);
				self.page.endChange();
			});
		}
		if (self.articleParent.onFetchHandler) {
			self.articleParent.onFetchHandler(fetchOptions);
		}
	},
	_compareFunction: function(val1, val2, type, operator) {

		var compareValues = {
			number: function(val1, val2) {
				return val1 - val2;
			},
			string: function(val1, val2) {
				return val1.localeCompare(val2);
			},
			date: function(val1, val2) {
				var dateApi = formatApi.getApi("application/x-date");
				return dateApi.parse(val1).compare(val2);
			}
		};

		var res;

		if (operator == 'like' && type == 'string') {
			// "contains" operation
			if (/^%(([^%]|\%)*)%$/g.test(val2)) {
				// in case '%' has been escaped with '\%', removing '\'
				var cleanVal2 = /^%(([^%]|\%)*)%$/g.exec(val2)[1].replace(/\\%/g, "%");
				res = val1.indexOf(cleanVal2) >= 0;
			}
			// "starts with" operation
			else {
				if (/(([^%]|\%)*)%$/g.test(val2)) {
					// in case '%' has been escaped with '\%', removing '\'
					var cleanVal2 = /(([^%]|\%)*)%$/g.exec(val2)[1].replace(/\\%/g, "%");
					var re = new RegExp('^' + cleanVal2);
					res = re.test(val1);
				} else {
					throw new Error(syra_local.flFilter_err_wrong_value.replace('{operator}', operator).replace('{value}', val2));
				}
			}
		} else {
			if (operator == 'like' && type !== 'string') {
				throw new Error(syra_local.flFilter_err_wrong_type.replace('{operator}', operator).replace('{type}', type));
			} else {
				switch (operator) {
					case ">":
						res = compareValues[type](val1, val2) > 0;
						break;
					case ">=":
						res = compareValues[type](val1, val2) >= 0;
						break;
					case "<":
						res = compareValues[type](val1, val2) < 0;
						break;
					case "<=":
						res = compareValues[type](val1, val2) <= 0;
						break;
					case "=":
						res = compareValues[type](val1, val2) == 0;
						break;
					case "<>":
						res = compareValues[type](val1, val2) != 0;
						break;
					default:
						res = true;
				}
			}
		}
		return res;
	},
	applyFetchOptions: function(options, pagingChange) {
		var $orderBy;
		this.ensureDataSet();
		if (!pagingChange || (this.clientDataset == this.dataset)) {
			this.clientDataset = [];
			for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
				var dataRecord = this.dataset[ii];
				this.clientDataset.push(dataRecord);
			}
		}
		if (options && options.params && !pagingChange) {
			if (options.params.where) {
				var exp = parser.Parser.parse(options.params.where);
				var filterDataSet = [];
				for (var ii = 0, jj = this.clientDataset.length; ii < jj; ii++) {
					var record = this.clientDataset[ii];
					var ok = false;
					var ff = record[exp.children[0].value];
					if (typeof(ff) == "object") {
						// quick workaround ($title). to improve for generic cases
						ok = this._compareFunction(ff.$title, exp.children[1].value, "string", exp.value.code);
						//ok = ff.$title.search(new RegExp(exp.children[1].value.replace("%", "", "g"), "i")) >= 0;
					} else {
						if (typeof(exp.children[1].value) == "string") {
							ok = this._compareFunction(ff, exp.children[1].value, "string", exp.value.code);
							//ok = ff.search(new RegExp(exp.children[1].value.replace("%", "", "g"), "i")) >= 0;
						} else {
							// filter date
							if (typeof(exp.children[1].value) == "object" && this.$fields[exp.children[0].value] && this.$fields[exp.children[0].value].$type == "application/x-date") {
								ok = this._compareFunction(ff, exp.children[1].value, "date", exp.value.code);
								//ok = ff.search(new RegExp(exp.children[1].value.toString().replace("%", "", "g"), "i")) >= 0;
							} else {
								// case of integer (application/x-choice)
								if (typeof(ff) == "number") {
									ok = this._compareFunction(ff, exp.children[1].value, "number", exp.value.code);
								} else {
									ok = false;
								}
								//ok = typeof(ff) == "number" && typeof(exp.children[1].value) && ff == exp.children[1].value;
							}
						}
					}
					if (ok) {
						filterDataSet.push(record);
					}
				}
				this.clientDataset = filterDataSet;
			}
			if (options.params.orderBy !== undefined) {
				if (options.params.orderBy === null) {
					$orderBy = null;
					this.sortCapability.resetSort();
					delete this.sortCapability._$orderBy;
				} else {
					$orderBy = this.sortCapability.parse(options.params.orderBy);
					if (options.params.startLetter) {
						this.sortCapability.filterByStartLetter({
							binding: $orderBy[0].binding,
							startLetter: options.params.startLetter
						});
					}
				}
				this.sortCapability.sort($orderBy);
			}
		}
	},
	fetchClientRecordSet: function(options, pagingChange) {
		if (options && options.params) {
			//this.page.startChange();
			var parentNode = this.body.parentNode;
			var nextSibling = this.body.nextSibling;
			parentNode.removeChild(this.body);
			this.body.style.display = "none";
			this.page._isDataChanging = true;
			this.applyFetchOptions(options, pagingChange);
			if (options.params.count || options.params.startIndex) {
				this.pagging.ensureClientRange(options.params.count, options.params.startIndex);
			}
			this.clientFetchOptions = options;
			this.fillList(this.clientDataset, this.articleParent.dataset);
			//this.page.endChange();
			parentNode.insertBefore(this.body, nextSibling);
			this.page._isDataChanging = false;
			this.ensureArticleVisibility(true);
		}
	},
	setAdvancedState: function($isAdvanced, designing) {
		Field.prototype.setAdvancedState.call(this, $isAdvanced, designing);
	},
	setHelp: function($help) {
		Field.prototype.setHelp.call(this, $help);
	},
	setDescription: function($description) {
		Field.prototype.setDescription.call(this, $description);
	},
	hideTitle: function($isTitleHidden) {
		Field.prototype.hideTitle.call(this, $isTitleHidden);
	},
	getDefaultTitle: function() {
		return syra_local.flDefaultTitle;
	},
	getTitle: function() {
		return Field.prototype.getTitle.call(this);
	},
	setTitle: function($title) {
		Field.prototype.setTitle.call(this, $title);
		if (this.domTitle) {
			this.domTitle.style.display = this.getTitle().length == 0 ? "none" : "";
		}
	},
	getLocalizedTitle: function($title) {
		if ($title && $title.length > 0 && $title[1] == "@") {
			return syra_site.expressionMaker.parse(this, $title);
		}
		return $title;
	},
	appendTitle: function() {
		if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
			Field.prototype.appendTitle.call(this);
			this.domTitle.style.display = "none";
		}
	},
	onAddMenuItem: function($menu) {
		switch ($menu.$bind) {
			case "$first":
			case "$previous":
			case "$next":
			case "$last":
				return false;
		}
		return true;
	},
	triggerFetch: function(options, $location) {
		var self = this;
		if (!self.isReloading) {
			setTimeout(function() {
				if (!self.disposed) {
					self.fetch(options || {}, $location);
				}
			}, 100);
		}
	},
	onMenuClick: function(menuItem) {
		if (!menuItem.$isAction) {
			switch (menuItem.$bind) {
				case "$select":
					this.doSelectAction(menuItem);
					return false;
				case "$design":
					this.designArticle(true);
					return false;
			}
		}
		return true;
	},
	doSelectAction: function(menuItem) {
		var self = this;
		self.currentSelectRecords = null;
		syra_site.dialogManager.openModal(self.boxParent, {
			article: self,
			$url: menuItem.$sourceUrl,
			onValidate: function() {
				self.notifySelectRecords(menuItem);
			},
			onSelectRecord: function(selectedRecords) {
				self.currentSelectRecords = selectedRecords;
				return false;
			}
		});
	},
	findDataRecord: function($uuid) {
		var found;
		if (this.dataset) {
			for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
				var dataRecord = this.dataset[ii];
				if (dataRecord && dataRecord.$uuid == $uuid) {
					found = {
						dataRecord: dataRecord,
						dataRecordIndex: ii
					};
					break;
				}
			}
		}
		return found;
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
	},
	showItem: function(show) {
		Field.prototype.showItem.call(this, show);
	},
	parseCapabilities: function(item, $capabilities, $variantItemKey) {
		if ($capabilities) {
			var parts = $capabilities.split(",");
			for (var ii = 0, jj = parts.length; ii < jj; ii++) {
				var part = parts[ii];
				if (part) {
					item.$capability[part] = item.$capability[part] || {};
					if ($variantItemKey) {
						(item.$capability[part].$variantItemKeys = item.$capability[part].$variantItemKeys || []).push($variantItemKey);
					}
				}
			}
		}
	},
	addCapabilityAction: function($actions, name) {
		var action = _capabilityActions[name];
		var $newAction = $actions[action.$bind] = {
			$title: syra_local[action.$title],
			$confirm: syra_local[action.$confirm],
			$isHidden: false
		};
		var $keys = this.$capability[name].$variantItemKeys;
		if ($keys) {
			$newAction.$variants = {};
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				$newAction.$variants[$keys[ii]] = {
					$confirm: syra_local[action.$confirm],
					$isHidden: false
				};
			}
		}
	},
	applyCapabilities: function($metaCapablities) {
		var $actions = {};
		var $prev = this.$capability;
		var $capabilities = $metaCapablities;
		this.$capability = {};
		if ($metaCapablities != null) {
			this.parseCapabilities(this, $capabilities);
		} else {
			this.parseCapabilities(this, this.$prototype.$capabilities);
			if (this.$field.$item && this.$field.$item.$variants) {
				var $keys = Object.keys(this.$field.$item.$variants);
				for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
					this.parseCapabilities(this, this.$field.$item.$variants[$keys[ii]].$capabilities, $keys[ii]);
				}

			}
		}
		if ($prev) {
			if ($prev.append && !this.$capability.append) {
				$actions.$create = {
					$isHidden: true
				};
			}
			if ($prev.deleteAll && !this.$capability.deleteAll) {
				$actions.$delete = {
					$isHidden: true
				};
			}
			if ($prev["delete"] && !this.$capability["delete"]) {
				$actions.$delete = {
					$isHidden: true
				};
			}
			if ($prev.reorder && !this.$capability.reorder) {
				if (this.showRowIndexCol) {
					this.showRowIndexCol();
				}
			}
		}
		if (this.$capability.append) {
			this.addCapabilityAction($actions, "append");
		}
		if (this.$capability.deleteAll) {
			this.addCapabilityAction($actions, "deleteAll");
		}
		if ($actions.$create || $actions.$delete) {
			syra_menus.setMenus(this, {
				$actions: $actions
			});
		}
		if (this.$capability.reorder) {
			this.$item.$isRowIndexVisible = true;
			if (this.showRowIndexCol) {
				this.showRowIndexCol();
			}
		}
		if (this.$capability.search) {
			this.searchCapability.search.toggle(true);
		}
		if ($metaCapablities !== undefined) {
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				this.records[ii].applyRecordCapabilities(true);
			}
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		Field.prototype.applyDesignMetaData.call(this, metaData, designing);
	},
	_resetCommonStatus: function(object, metaData) {
		if (metaData.$isReadOnly !== undefined && object.$isReadOnly) {
			delete object.$isReadOnly;
		}
		if (metaData.$isDisabled !== undefined && object.$isDisabled) {
			delete object.$isDisabled;
		}
		if (metaData.$fieldStyle !== undefined && object.$fieldStyle) {
			delete object.$fieldStyle;
		}
		if (metaData.$valueStyle !== undefined && object.$valueStyle) {
			delete object.$valueStyle;
		}
		if (metaData.$titleStyle !== undefined && object.$titleStyle) {
			delete object.$titleStyle;
		}
	},
	_applyCommonStatus: function(object, metaData) {
		if (object && metaData) {
			if (metaData.$isReadOnly !== undefined) {
				object.$isReadOnly = metaData.$isReadOnly;
			}
			if (metaData.$isDisabled !== undefined) {
				object.$isDisabled = metaData.$isDisabled;
			}
			if (metaData.$fieldStyle !== undefined) {
				dataRecord.$fieldStyle = metaData.$fieldStyle;
			}
			if (metaData.$valueStyle !== undefined) {
				object.$valueStyle = metaData.$valueStyle;
			}
			if (metaData.$titleStyle !== undefined) {
				object.$titleStyle = metaData.$titleStyle;
			}
		}
	},
	_propagateMetaToFields: function($properties, metaData, $metaFieldProperties) {
		var $binds = Object.keys($properties);
		for (var mm = 0, kk = $binds.length; mm < kk; mm++) {
			this._resetCommonStatus($properties[$binds[mm]], metaData);
			//reeapply if defiend in meta
			this._applyCommonStatus($properties[$binds[mm]], $metaFieldProperties[$binds]);
		}
	},
	ensureGlobalMetaRecord: function(reset) {
		if (reset) {
			this.globalMetaRecords = null;
		}
		if (reset || !this.globalMetaRecords) {
			this.globalMetaRecords = null;
			var $metaList = this.getMetaData();
			if ($metaList) {
				this.globalMetaRecords = {};
				this._applyCommonStatus(this.globalMetaRecords, $metaList);
				if ($metaList.$item && $metaList.$item.$properties) {
					this.globalMetaRecords.$properties = $metaList.$item.$properties;
				}
			}
		}
		return this.globalMetaRecords;
	},
	applyMetaData: function(metaData) {
		if (metaData.$item) {
			metaData.$items = metaData.$item;
		}
		Field.prototype.applyMetaData.call(this, metaData);
		if (metaData.$type === undefined) {
			var $metaRecord = {};
			if (metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
				//apply to datarecords
				var $metaFieldProperties = metaData.$item && metaData.$item.$properties ? metaData.$item.$properties || {} : {};
				for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
					var dataRecord = this.dataset[ii];
					this._resetCommonStatus(dataRecord, metaData);
					if (dataRecord.$properties) {
						this._propagateMetaToFields(dataRecord.$properties, metaData, $metaFieldProperties);
					}
				}
				//apply to $delta currently defined for list
				var $deltaListProperties = this.getMetaData();
				if ($deltaListProperties) {
					$deltaListProperties = $deltaListProperties.$item && $deltaListProperties.$item.$properties ? $deltaListProperties.$item.$properties : null;
					if ($deltaListProperties) {
						this._propagateMetaToFields($deltaListProperties, metaData, $metaFieldProperties);
					}
				}
				this._applyCommonStatus($metaRecord, metaData);
			}
			if (metaData.$item && metaData.$item.$properties) {
				$metaRecord.$properties = metaData.$item.$properties;
				if (this.applyMetaDataRecords) {
					this.applyMetaDataRecords($metaRecord);
				}
			}
			if (Object.keys($metaRecord)) {
				this.ensureGlobalMetaRecord(true);
				for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
					this.records[ii].applyChange($metaRecord);
				}
			}
		}
		if (metaData.$capabilities !== undefined) {
			this.applyCapabilities(metaData.$capabilities);
		}
		if (metaData.$orderBy !== undefined) {
			this.sortCapability.setOrderBy(metaData.$orderBy, metaData.$startLetter);
		}
		if (metaData.$item) {
			if (metaData.$item.$links) {
				var $menus = this.$prototype.$item.$links || {};
				syra_site.deltaManager.applyObjectDelta(this.page, $menus, metaData.$item.$links, true);
			}
			if (metaData.$item.$actions) {
				var $menus = this.$prototype.$item.$actions || {};
				syra_site.deltaManager.applyObjectDelta(this.page, $menus, metaData.$item.$actions, true);
			}
		}
		this.pagging.applyMetadata(metaData);
	},
	removeRecords: function(addEmptySlot) {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			var record = this.records[ii];
			delete this.recordsMap[record.$uuid];
			this.removeRecord(record);
		}
		this.recordsMap = {};
		this.records = [];
		if (this.selector && this.selector.clear) {
			this.selector.clear();
		}
		this.emptyBody(addEmptySlot);
	},
	emptyBody: function(addEmptySlot, onFetch) {
		syra_site.dom.empty(this.body);
		if (addEmptySlot) {
			var empty = document.createElement("div");
			empty.className = this.$skin + "-empty-slot";
			empty.textContent = (!this.isClientFetch && onFetch) ? syra_local.flWaitingData : (this.emptyMessage || this.$item.$noDataText || syra_local.flNoData);
			this.body.appendChild(this.emptyDataItem = empty);
		}
	},
	removeRecord: function(record, removeDom, removeContext) {
		if (record.treeNode && this.treeDecorator) {
			this.treeDecorator.onRemoveRecord(record);
		}
		if (removeContext) {
			this.records.splice(this.records.indexOf(record), 1);
			delete this.recordsMap[record.$uuid];
		}
		this.removeItem(record, removeDom);
	},
	_appendRecord: function(options) {
		if (this.emptyDataItem) {
			syra_site.dom.removeChild(this.emptyDataItem);
			this.emptyDataItem = null;
		}
		if (options.dataRecord.$uuid === undefined) {
			options.dataRecord.$uuid = options.$recordIndex || this.records.length;
		}
		var record = (this.recordsMap[options.dataRecord.$uuid] = new this.RecordClass());
		record.arrayLevel = "record";
		record.$uuid = options.dataRecord.$uuid;
		if (options.$recordIndex !== undefined) {
			record.insertBeforeRecord = this.records[options.$recordIndex];
			this.records.splice(options.$recordIndex, 0, record);
		} else {
			this.records.push(record);
		}
		record.garbage = this.garbage;
		if (options.dataRecord) {
			record.dataset = options.dataRecord;
			record.$serverIndex = options.dataRecord.$serverIndex;
		}
		record.$facet = this.$recordFacet;
		record.$isEditMode = this.$isEditMode && !this.treeDecorator;
		record.list = this;
		record.$prototype = options.$prototype || this.$prototype.$item;
		this.page.initializeNewItem(record, options.$item || {}, this);
		record.setMustBeResized();
		record.loadBox();
		if (options.isCreate && this.cardDecorator) {
			if (this.cardDecorator.isRowCardMode) {
				this.cardDecorator.toggleRowCard(record, true);
			}
		}
		record.applyChange(this.ensureGlobalMetaRecord());
		if (options.dataRecord) {
			record.applyChange(options.dataRecord);
		}
		return record;
	},
	applyFullDelta: function(dataRecordSet, dataIndex, updatedMap) {
		var oldMap = this.recordsMap;
		this.recordsMap = {};
		var oldRecords = this.records;
		this.records = [];
		var lastRecord, recordIndex = 0;
		for (var ii = dataIndex.start; ii <= dataIndex.last; ii++) {
			var dataRecord = dataRecordSet[ii - 1];
			var $index = dataRecord.$serverIndex;
			if ($index === undefined) {
				$index = dataRecord.$index;
			}
			if ($index === undefined) {
				$index = (ii - 1);
			}
			var sourceDataset = this.dataset[$index];
			if (sourceDataset) {
				var record = oldMap[dataRecord.$uuid];
				if (record) {
					record.ensureDataSet(dataRecord.$uuid);
					var updatedRecord = updatedMap && updatedMap[dataRecord.$uuid];
					record.applyChange(updatedRecord || dataRecord);
					record.$serverIndex = sourceDataset.$serverIndex;
					if (oldRecords.indexOf(record) != recordIndex) {
						if (lastRecord) {
							record.reorderItem(lastRecord, true);
						} else {
							record.reorderItem(null, false);
						}
					}
					this.records.push(this.recordsMap[dataRecord.$uuid] = lastRecord = record);
				} else {
					record = this._appendRecord({
						dataRecord: sourceDataset,
						$recordIndex: recordIndex
					});
					this.recordsMap[dataRecord.$uuid] = lastRecord = record;
				}
				recordIndex++;
			}
			delete oldMap[dataRecord.$uuid];
		}
		var uiids = Object.keys(oldMap);
		for (var ii = 0, jj = uiids.length; ii < jj; ii++) {
			this.removeRecord(oldMap[uiids[ii]], true);
			delete oldMap[uiids[ii]];
		}
	},
	applyPartialDelta: function(deltaSet, dataIndex) {
		for (var $serverIndex = 0, jj = deltaSet.length; $serverIndex < jj; $serverIndex++) {
			var deltaRecord = deltaSet[$serverIndex];
			var record = this.recordsMap[deltaRecord.$uuid];
			if (record) {
				var index = parseInt(deltaRecord.$index, 10) + 1;
				if (deltaRecord.$isDeleted || !(dataIndex.start <= index && index <= dataIndex.last)) {
					this.removeRecord(record, true, true);
				} else {
					var recordIndex = null,
						prevIndex = null;
					if (deltaRecord.$index !== undefined && record.$serverIndex != deltaRecord.$index) {
						prevIndex = this.records.indexOf(record);
						recordIndex = deltaRecord.$index - dataIndex.start;
					}
					record.ensureDataSet(record.$uuid);
					record.applyChange(deltaRecord);
					if (prevIndex) { //not process if this.clientFetchOptions
						this.records.splice(prevIndex, 1);
						this.records.splice(recordIndex, 0, record);
						var nextRecord;
						if ((recordIndex + 1) < this.records.length) {
							nextRecord = this.records[recordIndex + 1];
						}
						record.reorderItem(nextRecord, nextRecord ? false : true);
					}
				}
			} else {
				if (!deltaRecord.$isDeleted) {
					var index = parseInt(deltaRecord.$index, 10) + 1;
					if (dataIndex.start <= index && index <= dataIndex.last) {
						this._appendRecord({
							dataRecord: this.dataset[deltaRecord.$index],
							$recordIndex: deltaRecord.$index
						});
					}
				}
			}
		}
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		this.ensureDataSet();
		if (metaData) {
			this.applyMetaData(metaData);
		}
		if (dataRecordSet !== undefined) {
			var isDelta = this.page.$isPartialDelta;
			if (!isDelta) {
				isDelta = this.page.$isEditMode && (this.dataset && this.dataset.length > 0) && !this.isSingList;
			}
			this.fillList(dataRecordSet, parentDataRecord, isDelta);
		} else {
			if (metaData) {
				this.validateDisplay();
			}
		}
	},
	fillList: function(dataRecordSet, parentDataRecord, isDelta) {
		if (isDelta) {
			var updatedMap = {};
			if (!this.isSingList && dataRecordSet) {
				for (var ii = dataRecordSet.length - 1; ii >= 0; ii--) {
					updatedMap[dataRecordSet[ii].$uuid] = dataRecordSet[ii];
				}
			}
			var partialDelta = this.page.$isPartialDelta || (dataRecordSet.length == 1 && dataRecordSet[0].$index !== undefined);
			if (this.clientFetchOptions) {
				this.applyFetchOptions(this.clientFetchOptions);
				if (this.pagging.$startIndex !== undefined && this.clientDataset.length < this.pagging.$startIndex) {
					this.pagging.ensureClientRange();
					this.clientFetchOptions.params.startIndex = this.pagging.$startIndex;
				}
				if (this.treeDecorator) {
					this.treeDecorator.buildTreeMap(this.clientDataset);
				}
				var dataIndex = this.pagging.getParseIndexes();
				this.applyFullDelta(this.clientDataset, dataIndex, updatedMap);
			} else {
				this.clientDataset = this.ensureDataSet();
				var dataIndex = this.pagging.getParseIndexes();
				if (partialDelta) {
					if (this.treeDecorator) {
						this.treeDecorator.buildTreeMap(dataRecordSet, true);
					}
					this.applyPartialDelta(dataRecordSet, dataIndex);
				} else {
					if (this.treeDecorator) {
						this.treeDecorator.buildTreeMap(dataRecordSet);
					}
					this.applyFullDelta(dataRecordSet, dataIndex);
				}
			}
		} else {
			this.setMustBeResized();
			this.columnFitter && this.columnFitter.reset();
			this.clientDataset = this.isSingList ? this.ensureDataSet() : dataRecordSet;
			if (this.treeDecorator) {
				this.treeDecorator.buildTreeMap(this.clientDataset);
			}
			this.body.style.display = "none";
			this.removeRecords(!(this.clientDataset && this.clientDataset.length > 0));
			if (this.clientDataset) {
				var start, last;
				//warn: this.onClientFetch =true and this.isClientFetch=false for convergence left this
				if (this.isClientFetch) {
					if (this.pagging.$startIndex !== undefined && this.clientDataset.length < this.pagging.$startIndex) {
						this.pagging.ensureClientRange();
					}
					var dataIndex = this.pagging.getParseIndexes();
					start = dataIndex.start;
					last = dataIndex.last;
				} else {
					start = 1;
					last = this.clientDataset.length;
				}
				for (var ii = start; ii <= last; ii++) {
					var dataRecord = this.clientDataset[ii - 1];
					if (!dataRecord.$isDeleted) {
						this._appendRecord({
							dataRecord: dataRecord
						});
					}
				}
			}
		}
		this.validateDisplay();
	},
	validateDisplay: function() {
		var showAlt = true;
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			var record = this.records[ii];
			if (record.dataset.$index !== undefined) {
				record.dataset.$index = ii;
			}
			if (record.dataset.$serverIndex == undefined) {
				if (record.singleField) {
					record.dataset.$serverIndex = ii;
				} else {
					for (var mm = 0, kk = this.dataset.length; mm < kk; mm++) {
						if (this.dataset[mm] == record.dataset) {
							record.dataset.$serverIndex = mm;
							break;
						}
					}
				}
			}
			record.$serverIndex = record.dataset.$serverIndex;
			record.renderRowIndex();
			if (this.$item.$alternateStyle) {
				record.renderAltStyle(showAlt = !showAlt);
			}
			record.ensureArticleVisibility();
		}
		//_checkMaxItems
		if (this.$isEditMode) {
			if (this.$prototype.$minItems) {
				while (this.records.length < this.$prototype.$minItems) {
					this._appendRecord({
						dataRecord: {}
					});
				}
			}
			if (this.$prototype.$maxItems) {
				if (this._isAddDisabled !== (this.$prototype.$maxItems <= this.dataset.length)) {
					this._disableAdd(!this._isAddDisabled);
				}
			}
		}
	},
	_disableAdd: function(isAddDisabled) {
		this._isAddDisabled = isAddDisabled;
		if (this.menuItems) {
			if (this.menuItems.$create) {
				this.menuItems.$create[0].disable(this._isAddDisabled);
			}
			if (this.menuItems.$select) {
				this.menuItems.$select[0].disable(this._isAddDisabled);
			}
		}
		if (this.$capability.insert) {
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				var record = this.records[ii];
				if (record.menuItems.$create) {
					record.menuItems.$create[0].disable(this._isAddDisabled);
				}
			}
		}
	},
	validate: function() {
		var isValidated = true;
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			isValidated = this.records[ii].validateFields();
		}
		return isValidated;
	},
	dispose: function() {
		var ii = syra_dd.colResizer.indexOf(this);
		if (ii >= 0) {
			syra_dd.colResizer.splice(ii, 1);
		}
		if (this.serverFilters) {
			this.serverFilters.selected = this.serverFilters.noFilters = null;
		}
		if (this.designer) {
			this.designer.dispose();
		}
		if (this.articleParent.childLists) {
			var found = this.articleParent.childLists.indexOf(this);
			if (found >= 0) {
				this.articleParent.childLists.splice(found, 1);
			}
		}
		this.tableSlot = this.tableRow = this._core = this.serverFilters = null;
		this.domTitle = this._mandatoryFlag = this._description = this._helpFlag = null;
		this.designer = this.$designing = this.emptyDataItem = this.RecordClass = this.body = null;
		this.designPickerSlot = this.designPicker = this.topbar = this.bottombar = this.clientDataset = null;
		this._menus = this.paramsFilter = this.$fields = this.$field = this.$capability = null;
		this._dataValue = this.domValueSlot = this.fieldValue = this.globalMetaRecords = null;
		this.RecordReorderDDAgentClass = this.recordsMap = this.records = null;
		Article.prototype.dispose.call(this);
	},
	getDataValue: function(name, $serverIndex) {
		var dataRecordSet = this.ensureDataSet();
		var field;
		if ($serverIndex !== undefined) {
			if (field = this.getField(name, $serverIndex)) {
				return field.getDataValue();
			} else {
				for (var ii = 0, jj = dataRecordSet.length; ii < jj; ii++) {
					if (dataRecordSet[ii].$serverIndex == $serverIndex) {
						var value = dataRecordSet[ii][name];
						return value === undefined ? null : value;
					}
				}
			}
		}
		return null;
	},
	isReorderRecordDraggable: function(target, event) {
		if (target.syraReorderRecordId == this.id) {
			syra_dd.dropableItem = {
				list: this,
				reorderRecord: this.findRecord(event.target)
			};
			syra_dd.start(this, this.RecordReorderDDAgentClass || RecordReorderDDAgent, this.body);
			event.syraRetValue = false;
			return;
		}
		return null;
	},

	getClientDataSetServerIndex: function(recordIndex) {
		this.ensureClientDataset();
		if (this.clientDataset[recordIndex]) {
			return parseInt(this.clientDataset[recordIndex].$serverIndex, 10);
		}
		return 0;
	},
	findRecordByServerIndex: function($serverIndex) {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			if (this.records[ii].$serverIndex == $serverIndex) {
				return this.records[ii];
			}
		}
		return null;
	},
	findRecord: function(selectorTarget) {
		var $uuid = this.findRecordUiid(selectorTarget);
		return this.recordsMap[$uuid];
	},
	findRecordUiid: function(selectorTarget) {
		var $$selector = $(selectorTarget);
		return ($$selector.is("[data-s-record]") ? $$selector : $$selector.closest("[data-s-record]")).attr("data-s-record");
	},
	ensureArticleVisibility: function() {
		if (this.childrenSection) {
			for (var mm = 0, kk = this.childrenSection.length; mm < kk; mm++) {
				this.childrenSection[mm].ensureVisibility();
			}
		}
		if (this.filterRecord) {
			if (this.filterRecord.childrenSection) {
				for (var mm = 0, kk = this.filterRecord.childrenSection.length; mm < kk; mm++) {
					this.filterRecord.childrenSection[mm].ensureVisibility();
				}
			}
		}
		if (this.records) {
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				this.records[ii].ensureArticleVisibility();
			}
		}
	},
	resizeArticle: function(resize) {
		if (resize || this.mustBeResized) {
			if (this.records) {
				var record;
				for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
					record = this.records[ii];
					if (resize || record.mustBeResized) {
						record.resizeArticle(resize);
						if (this.cardDecorator && (record.cardItem || record.popupCardItem)) {
							this.cardDecorator.onRecordResize(record);
						}
						this.treeDecorator && this.treeDecorator.onRecordResize(record);
						record.mustBeResized = false;
					}
				}
			}
			this.designer && this.designer.resizeArticle(resize);
			this.mustBeResized = false;
		}
	}
});