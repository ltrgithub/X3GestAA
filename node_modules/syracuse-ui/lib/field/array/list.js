"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var Field = require('syracuse-ui/lib/field/field').Field;
var RecordReorderDDAgent = require("syracuse-ui/lib/field/array/capability/recordReorderDDAgent").RecordReorderDDAgent;
var fetcher = require("./tools/fetcher");
var filler = require("./tools/filler");
var capabilityMaker = require("./capability/capabilityMaker");
var shortcutInvoker = require("syracuse-ui/lib/field/array/tools/shortCutInvoker");
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function DesktopList() {}

exports.DesktopList = helpers.defineClass(DesktopList, Article, {
	notifyClientSave: function(savedDelta) {
		if (savedDelta && savedDelta.$uuid) {
			var dataRecord = this.findDataRecord(savedDelta.$uuid);
			var delta = {};
			var $binds = Object.keys(this.$prototype.$item.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				if (savedDelta[$bind] !== undefined) {
					delta[$bind] = savedDelta[$bind];
				}
			}
			delta.$uuid = savedDelta.$uuid;
			delta.$key = savedDelta.$key;
			if (dataRecord) {
				syra_site.deltaManager.applyObjectDelta(this.page, dataRecord, delta);
				if (this.recordsMap[savedDelta.$uuid]) {
					this.recordsMap[savedDelta.$uuid].applyChange(delta);
				}
			} else {
				var dataset = this.ensureDataSet();
				delta.$index = dataset.length;
				delta = [delta];
				syra_site.deltaManager.applyPageArrayDelta(this.page, dataset, delta);
				this.setDataBind(delta, this.articleParent.ensureDataSet());
			}
		}
	},
	designArticle: function(open) {},
	toggleUIDesign: function(enable, disposingDesigner) {
		if (enable) {
			if (!this.designBtn) {
				var slot = document.createElement("div");
				slot.className = "s-list-designer-btn-slot";
				this.designBtn = syra_menus.addIconButton(syra_local.flDesign, "s-list-designer-btn", "onDesignOpenerClick");
				this.designBtn.syraItem = this.id;
				slot.appendChild(this.designBtn);
				var bar = this.ensureTopBar();
				bar.insertBefore(slot, bar.firstChild);
			}
		} else {
			if (disposingDesigner) {
				this.designArticle(false);
			}
			if (this.designBtn) {
				syra_site.dom.removeChild(this.designBtn.parentNode);
				this.designBtn = null;
			}
		}
		this._ensureDesignMenuSlotVisibility();
	},
	_ensureDesignMenuSlotVisibility: function() {
		if (this.menusSlot) {
			this.menusSlot.style.display = (this.designBtn || this.designer) ? "none" : "";
		}
		if (this.designBtn) {
			syra_site.dom.disableItem(this.designBtn, this.designer);
		}
	},
	ensureDataSet: function() {
		return this.dataset = this.setDatasetValue(this.getDatasetValue() || []);
	},
	getDatasetValue: function() {
		return Field.prototype.getDatasetValue.call(this);
	},
	setDatasetValue: function(value) {
		return Field.prototype.setDatasetValue.call(this, value);
	},
	ensureLayoutMode: function() {
		Field.prototype.ensureLayoutMode.call(this);
	},
	onDesignOpenerClick: function() {
		this.designArticle(!this.designer);
	},
	applyShortCut: function(shortcuts, event) {
		return shortcutInvoker.applyShortCut(this, shortcuts, event);
	},
	loadBox: function(initData) {
		this.fetcher = fetcher;
		(this.capabilityMaker = capabilityMaker).initialize(this);
		if (!this.articleParent.childLists) {
			this.articleParent.childLists = [];
		}
		this.$mnPickersCss = "s-list-picker";
		this.articleParent.childLists.push(this);
		this.isList = true;
		this.$capability = {};
		this.$iconPath = this.$iconPath || this.$item.$iconPath || "page/s-list-";
		this.$itemRecordMenuSkin = this.$itemRecordMenuSkin || "s-list-record-picker"; // "s-mn-record-link";
		this.$itemMenuSkin = this.$itemMenuSkin || "s-mn-list-link";
		this.$skinMenus = this.$item.$skinMenus || "s-list-menus";
		Article.prototype.loadBox.call(this, initData);
		this.articleParent.bind(this, this.$item.$bind);
		if (syra_site.enableTestRobot) {
			syra_fields.appendQualityAtt(this, this.domItem);
		}
		if (this.records.length == 0) {
			this.emptyBody(true, this.page.$autoFetch);
		}
	},
	ensureClientDataset: function() {
		if (!this.clientDataset) {
			this.clientDataset = this.ensureDataSet();
		}
		return this.clientDataset;
	},
	applyFacetSetting: function() {
		this.isServerStepPager = false;
		this.isClientFetch = this.isClientFetch !== false;
		if (this.$prototype.$treeview) {
			this.isClientFetch = false;
			this.isPagingDisabled = !this.$item.$isNavigationList;
			this.pagging.noPageSize = true;
			delete this.$item.$itemsPerPage;
		}
	},
	ensureEditMode: function() {
		Field.prototype.ensureEditMode.call(this);
		//this.$isEditMode = true;
	},
	appendDetailLink: function(value, $detailsLink) {},
	drawBox: function() {
		this.arrayLevel = "array";
		this.isRecordDataset = true; //!important for sendBag
		this._isAddDisabled = false;
		this.records = [];
		this.recordsMap = {};

		this.$fields = this.$prototype.$item.$properties || {};
		this.$recordFacet = this.articleParent.$item.$recordFacet || this.$facet || "$details";

		this.initializeList();

		this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
		if (this.$isEditMode) {
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
			this.inputId = this.id + "-input";
		}
		Field.prototype._initCss.call(this);

		this.domItem = document.createElement("div");
		this.domItem.className = this._$cssField;
		this.domItem.syraItem = this.id;
		this.appendTitle();

		this._createValueContainer();

		this.setTitle(this.$item.$title || this.$field.$title);
		this.setDescription(this.$item.$description || this.$field.$description);
		this.setState(this.$field);

		this.setAdvancedState();
		this._dataValue.className = this.$item.$skin ? (this.$item.$skin + "-list s-list") : "s-list";


		this._core = document.createElement("div");
		this._core.className = "s-list-core";
		this._dataValue.appendChild(this._core);

		this.setArticleId(this._core);
	},
	ensureTopBar: function() {
		if (!this.topbar) {
			this.topbar = document.createElement("div");
			this.topbar.className = "s-list-topbar";
			this.setArticleId(this.topbar);
			this._core.parentNode.insertBefore(this.topbar, this._core);
		}
		return this.topbar;
	},
	_ensureMenuSlot: function() {
		if (!this.menusSlot) {
			this.menusSlot = document.createElement("div");
			this.menusSlot.className = "s-list-menus-slot";
			var bar = this.ensureTopBar();
			bar.insertBefore(this.menusSlot, bar.firstChild);
		}
		return this.menusSlot;
	},
	onAddMenuItem: function($bind, $menu) {
		var item = this.page.loadNewItem(null, {
			$bind: $bind,
			$category: "link",
			$skin: this.$itemMenuSkin,
			$menu: $menu,
			$icon: {
				$mode: this.$itemMenuIconMode || "iconText",
				$path: this.$iconPath
			}
		}, this);
		this._ensureMenuSlot();
		this.menusSlot.insertBefore(item.domItem, this.menusSlot.firstChild);
		item.layoutSlot = this.menusSlot;
		delete item.$item.$menu;
		return item;
	},
	onAddMenuPicker: function(picker) {
		this._ensureMenuSlot().appendChild(picker);
		if (this.articleParent && this.articleParent.onAddButton) {
			this.articleParent.onAddButton(picker);
		}
	},
	_createValueContainer: function() {
		this._dataValue = document.createElement("article");
		this._dataValue.className = this._$cssField + "-value";
		this._core = this._dataValue;
		this.domItem.appendChild(this._dataValue);
	},
	setAdvancedState: function($isAdvanced, designing) {
		Field.prototype.setAdvancedState.call(this, $isAdvanced, designing);
	},
	setDescription: function($description) {
		Field.prototype.setDescription.call(this, $description);
	},
	hideTitle: function($isTitleHidden) {
		Field.prototype.hideTitle.call(this, $isTitleHidden);
	},
	getDefaultTitle: function() {
		return syra_local.flDefaultTitle;
	},
	getTitle: function() {
		return Field.prototype.getTitle.call(this);
	},
	setTitle: function($title) {
		Field.prototype.setTitle.call(this, $title);
		if (this.domTitle) {
			this.domTitle.style.display = this.getTitle().length == 0 ? "none" : "";
		}
	},
	getLocalizedTitle: function($title) {
		if ($title && $title.length > 0 && $title[1] == "@") {
			return syra_site.expressionMaker.parse(this, $title);
		}
		return $title;
	},
	appendTitle: function() {
		if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
			Field.prototype.appendTitle.call(this);
			this.domTitle.style.display = "none";
		}
	},
	onMenuClick: function(menuItem) {
		if (!menuItem.$isAction) {
			switch (menuItem.$sourceBind) {
				case "$first":
				case "$previous":
				case "$next":
				case "$last":
					this.fetcher.trigger(this, null, {
						$url: syra_site.urlMaker.formatMenuUrl(menuItem.articleParent, menuItem)
					});
					return false;
				case "$select":
					fetcher.doSelectAction(this, menuItem);
					return false;
				case "$design":
					this.designArticle(true);
					return false;
			}
		}
		return true;
	},

	findDataRecord: function($uuid) {
		var found;
		if (this.dataset) {
			for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
				var dataRecord = this.dataset[ii];
				if (dataRecord && dataRecord.$uuid == $uuid) {
					found = {
						dataRecord: dataRecord,
						dataRecordIndex: ii
					};
					break;
				}
			}
		}
		return found;
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
	},
	showItem: function(show) {
		Field.prototype.showItem.call(this, show);
	},



	applyDesignMetaData: function(metaData, designing) {
		Field.prototype.applyDesignMetaData.call(this, metaData, designing);
	},
	_resetCommonStatus: function(object, metaData) {
		if (metaData.$isReadOnly !== undefined && object.$isReadOnly) {
			delete object.$isReadOnly;
		}
		if (metaData.$isDisabled !== undefined && object.$isDisabled) {
			delete object.$isDisabled;
		}
		if (metaData.$fieldStyle !== undefined && object.$fieldStyle) {
			delete object.$fieldStyle;
		}
		if (metaData.$valueStyle !== undefined && object.$valueStyle) {
			delete object.$valueStyle;
		}
		if (metaData.$titleStyle !== undefined && object.$titleStyle) {
			delete object.$titleStyle;
		}
	},
	_applyCommonStatus: function(object, metaData) {
		if (object && metaData) {
			if (metaData.$isReadOnly !== undefined) {
				object.$isReadOnly = metaData.$isReadOnly;
			}
			if (metaData.$isDisabled !== undefined) {
				object.$isDisabled = metaData.$isDisabled;
			}
			if (metaData.$fieldStyle !== undefined) {
				dataRecord.$fieldStyle = metaData.$fieldStyle;
			}
			if (metaData.$valueStyle !== undefined) {
				object.$valueStyle = metaData.$valueStyle;
			}
			if (metaData.$titleStyle !== undefined) {
				object.$titleStyle = metaData.$titleStyle;
			}
		}
	},
	_propagateMetaToFields: function($properties, metaData, $metaFieldProperties) {
		var $binds = Object.keys($properties);
		for (var mm = 0, kk = $binds.length; mm < kk; mm++) {
			this._resetCommonStatus($properties[$binds[mm]], metaData);
			//reeapply if defiend in meta
			this._applyCommonStatus($properties[$binds[mm]], $metaFieldProperties[$binds]);
		}
	},
	ensureGlobalMetaRecord: function(reset) {
		if (reset) {
			this.globalMetaRecords = null;
		}
		if (reset || !this.globalMetaRecords) {
			this.globalMetaRecords = null;
			var $metaList = this.getMetaData();
			if ($metaList) {
				this.globalMetaRecords = {};
				this._applyCommonStatus(this.globalMetaRecords, $metaList);
				if ($metaList.$item && $metaList.$item.$properties) {
					this.globalMetaRecords.$properties = $metaList.$item.$properties;
				}
			}
		}
		return this.globalMetaRecords;
	},
	applyMetaData: function(metaData) {
		if (this.$field.$isFusionNavigationList) {
			return false;
		}
		if (metaData.$item) {
			metaData.$items = metaData.$item;
		}
		Field.prototype.applyMetaData.call(this, metaData);
		if (metaData.$type === undefined) {
			var $metaRecord = {};
			if (metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
				//apply to datarecords
				var $metaFieldProperties = metaData.$item && metaData.$item.$properties ? metaData.$item.$properties || {} : {};
				for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
					var dataRecord = this.dataset[ii];
					this._resetCommonStatus(dataRecord, metaData);
					if (dataRecord.$properties) {
						this._propagateMetaToFields(dataRecord.$properties, metaData, $metaFieldProperties);
					}
				}
				//apply to $delta currently defined for list
				var $deltaListProperties = this.getMetaData();
				if ($deltaListProperties) {
					$deltaListProperties = $deltaListProperties.$item && $deltaListProperties.$item.$properties ? $deltaListProperties.$item.$properties : null;
					if ($deltaListProperties) {
						this._propagateMetaToFields($deltaListProperties, metaData, $metaFieldProperties);
					}
				}
				this._applyCommonStatus($metaRecord, metaData);
			}
			if (metaData.$item && metaData.$item.$properties) {
				$metaRecord.$properties = metaData.$item.$properties;
				this.builder && this.builder.applyMetaDataRecords && this.builder.applyMetaDataRecords($metaRecord);
			}
			if (Object.keys($metaRecord)) {
				this.ensureGlobalMetaRecord(true);
				for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
					this.records[ii].applyChange($metaRecord);
				}
			}
		}
		if (metaData.$capabilities !== undefined) {
			this.capabilityMaker.apply(this, metaData.$capabilities);
		}
		if (metaData.$orderBy !== undefined) {
			this.capabilityMaker.sorter.setOrderBy(this, metaData.$orderBy);
		}
		if (metaData.$item) {
			if (metaData.$item.$links) {
				var $menus = this.$prototype.$item.$links || {};
				syra_site.deltaManager.applyObjectDelta(this.page, $menus, metaData.$item.$links, true);
			}
			if (metaData.$item.$actions) {
				var $menus = this.$prototype.$item.$actions || {};
				syra_site.deltaManager.applyObjectDelta(this.page, $menus, metaData.$item.$actions, true);
			}
		}
		this.pagging.applyMetadata(metaData);
	},
	removeRecords: function(addEmptySlot) {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			var record = this.records[ii];
			delete this.recordsMap[record.$uuid];
			this.removeRecord(record);
		}
		this.recordsMap = {};
		this.records = [];
		if (this.selector && this.selector.clear) {
			this.selector.clear();
		}
		this.emptyBody(addEmptySlot);
	},
	emptyBody: function(addEmptySlot, onFetch) {
		if (this.builder) {
			this.builder.emptyBody(addEmptySlot, onFetch);
		} else {
			syra_site.dom.empty(this.body);
			if (addEmptySlot) {
				this.emptyDataItem = document.createElement("div");
				this.emptyDataItem.className = this.$skin + "-empty-slot";
				this.emptyDataItem.textContent = (!this.isClientFetch && onFetch) ? syra_local.flWaitingData : (this.emptyMessage || this.$item.$noDataText || syra_local.flNoData);
				this.body.appendChild(this.emptyDataItem);
			}
		}

	},
	removeRecord: function(record, removeDom, removeContext) {
		if (record.treeNode && this.treeDecorator) {
			this.treeDecorator.onRemoveRecord(record);
		}
		if (removeContext) {
			this.records.splice(this.records.indexOf(record), 1);
			delete this.recordsMap[record.$uuid];
		}
		this.removeItem(record, removeDom);
	},
	clearEmpty: function() {
		if (this.builder && this.builder.list_clearEmpty) {
			this.builder.list_clearEmpty();
		} else {
			if (this.emptyDataItem) {
				syra_site.dom.removeChild(this.emptyDataItem);
				this.emptyDataItem = null;
			}
		}
	},
	addRecord: function(options) {
		this.clearEmpty();
		if (options.dataRecord.$uuid === undefined) {
			options.dataRecord.$uuid = options.$recordIndex || this.records.length;
		}
		var record = (this.recordsMap[options.dataRecord.$uuid] = new(this.RecordClass || RecordArticle)());
		record.arrayLevel = "record";
		record.$uuid = options.dataRecord.$uuid;
		this.recordsMap[record.$uuid] = record;
		if (options.$recordIndex !== undefined) {
			record.insertBeforeRecord = this.records[options.$recordIndex];
			this.records.splice(options.$recordIndex, 0, record);
		} else {
			this.records.push(record);
		}
		record.garbage = this.garbage;
		if (options.dataRecord) {
			record.dataset = options.dataRecord;
			record.$serverIndex = options.dataRecord.$serverIndex;
		}
		record.$facet = this.$recordFacet;
		record.$isEditMode = this.$isEditMode && !this.treeDecorator;
		record.list = this;
		record.$prototype = options.$prototype || this.$prototype.$item;
		this.page.initializeNewItem(record, options.$item || {}, this);
		record.setMustBeResized();
		record.loadBox(null, options.isCreateAction);
		record.applyChange(this.ensureGlobalMetaRecord());
		options.dataRecord && record.applyChange(options.dataRecord);
		if (this.builder && this.builder.onAfterAddRecord) {
			this.builder.onAfterAddRecord(record);
		}
		return record;
	},

	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		this.ensureDataSet();
		if (metaData) {
			this.applyMetaData(metaData);
		}
		if (dataRecordSet !== undefined) {
			var isDelta = this.page.$isPartialDelta;
			if (!isDelta) {
				isDelta = this.page.$isEditMode && (this.dataset && this.dataset.length > 0) && !this.isSingList;
			}
			this.fillList(dataRecordSet, parentDataRecord, isDelta);
		} else {
			if (metaData) {
				this.validateDisplay();
			}
		}
	},
	fillList: function(dataRecordSet, parentDataRecord, isDelta) {
		filler.fill(this, dataRecordSet, parentDataRecord, isDelta);
	},
	validateDisplay: function() {
		if (!this.disableDisplayValidation) {
			var showAlt = true;
			this.greatestServerIndexRecord = null;
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				var record = this.records[ii];
				if (record.dataset.$index !== undefined) {
					record.dataset.$index = ii;
				}
				if (record.dataset.$serverIndex == undefined) {
					if (record.singleField) {
						record.dataset.$serverIndex = ii;
					} else {
						for (var mm = 0, kk = this.dataset.length; mm < kk; mm++) {
							if (this.dataset[mm] == record.dataset) {
								record.dataset.$serverIndex = mm;
								break;
							}
						}
					}
				}
				record.$serverIndex = record.dataset.$serverIndex;
				if (!this.greatestServerIndexRecord || this.greatestServerIndexRecord.$serverIndex < record.$serverIndex) {
					this.greatestServerIndexRecord = record;
				}
				record.setRowIndex && record.setRowIndex();
				if (this.$item.$alternateStyle) {
					syra_site.dom.toggleClass(record.domItem, "s-list-alt", showAlt = !showAlt);
					record.freezeRow && syra_site.dom.toggleClass(record.freezeRow, "s-list-alt", showAlt);
				}
			}
			//_checkMaxItems
			if (this.$isEditMode) {
				if (this.$prototype.$minItems) {
					while (this.records.length < this.$prototype.$minItems) {
						this.addRecord({
							dataRecord: {}
						});
					}
				}
				if (this.$prototype.$maxItems) {
					if (this._isAddDisabled !== (this.$prototype.$maxItems <= this.dataset.length)) {
						this._disableAdd(!this._isAddDisabled);
					}
				}
			}
		}
	},
	_disableAdd: function(isAddDisabled) {
		this._isAddDisabled = isAddDisabled;
		if (this.menuItems) {
			if (this.menuItems.$create) {
				this.menuItems.$create[0].disable(this._isAddDisabled);
			}
			if (this.menuItems.$select) {
				this.menuItems.$select[0].disable(this._isAddDisabled);
			}
		}
		if (this.$capability.insert) {
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				var record = this.records[ii];
				if (record.menuItems.$create) {
					record.menuItems.$create[0].disable(this._isAddDisabled);
				}
			}
		}
	},
	validate: function() {
		var isValidated = true;
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			isValidated = this.records[ii].validateFields();
		}
		return isValidated;
	},
	dispose: function() {
		var ii = syra_dd.colResizer.indexOf(this);
		if (ii >= 0) {
			syra_dd.colResizer.splice(ii, 1);
		}
		this.designer && this.designer.dispose();

		if (this.articleParent.childLists) {
			var found = this.articleParent.childLists.indexOf(this);
			if (found >= 0) {
				this.articleParent.childLists.splice(found, 1);
			}
		}
		this.capabilityMaker && this.capabilityMaker.dispose(this);
		this.capabilityMaker = this.fetcher = this.tableRow = this._core = null;
		this.domTitle = this._mandatoryFlag = this._description = this._helpFlag = null;
		this.designer = this.$designing = this.emptyDataItem = this.RecordClass = this.body = null;
		this.designBtn = this.topbar = this.bottombar = this.clientDataset = null;
		this.paramsFilter = this.$fields = this.$field = this.$capability = null;
		this.greatestServerIndexRecord = this._dataValue = this.globalMetaRecords = null;
		this.RecordReorderDDAgentClass = this.recordsMap = this.records = null;
		Article.prototype.dispose.call(this);
	},
	getDataValue: function(name, $serverIndex) {
		var dataRecordSet = this.ensureDataSet();
		var field;
		if ($serverIndex !== undefined) {
			if (field = this.getField(name, $serverIndex)) {
				return field.getDataValue();
			} else {
				for (var ii = 0, jj = dataRecordSet.length; ii < jj; ii++) {
					if (dataRecordSet[ii].$serverIndex == $serverIndex) {
						var value = dataRecordSet[ii][name];
						return value === undefined ? null : value;
					}
				}
			}
		}
		return null;
	},
	isReorderRecordDraggable: function(target, event) {
		if (target.syraReorderRecordId == this.id) {
			syra_dd.dropableItem = {
				list: this,
				reorderRecord: this.findRecord(event.target)
			};
			syra_dd.start(this, this.RecordReorderDDAgentClass || RecordReorderDDAgent, this.body);
			event.syraRetValue = false;
			return;
		}
		return null;
	},

	findRecordByServerIndex: function($serverIndex) {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			if (this.records[ii].$serverIndex == $serverIndex) {
				return this.records[ii];
			}
		}
		return null;
	},
	findRecord: function(target) {
		while (target && target != document) {
			if (target.syraRecord !== undefined) {
				return this.recordsMap[target.syraRecord];
			}
			target = target.parentNode;
		}
		return null;
	},
	ensureArticleVisibility: function() {
		if (this.childrenSection) {
			for (var mm = 0, kk = this.childrenSection.length; mm < kk; mm++) {
				this.childrenSection[mm].ensureVisibility();
			}
		}
		var filterRecord = this.builder && this.builder.filterRecord;
		if (filterRecord) {
			if (filterRecord.childrenSection) {
				for (var mm = 0, kk = filterRecord.childrenSection.length; mm < kk; mm++) {
					filterRecord.childrenSection[mm].ensureVisibility();
				}
			}
		}
		if (this.records) {
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				this.records[ii].ensureArticleVisibility();
			}
		}
	},
	resizeArticle: function(resize) {
		if (resize || this.mustBeResized) {
			if (this.records) {
				var record;
				for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
					record = this.records[ii];
					record.resizeArticle(resize);
					record.mustBeResized = false;
				}
				this.quickEdit && this.quickEdit.resize();
			}
			this.designer && this.designer.resizeArticle(resize);
			this.mustBeResized = false;
		}
	},

	selectHTMLContent: function() {
		var range = document.createRange();
		var scrollHeadTable = this.builder && this.builder.scrollTable.headTable;
		scrollHeadTable && range.selectNode(scrollHeadTable);
		this.body && range.selectNode(this.body);
		var select = document.getSelection();
		select.removeAllRanges();
		select.addRange(range);
	}
});