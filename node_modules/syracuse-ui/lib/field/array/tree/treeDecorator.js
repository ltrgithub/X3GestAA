"use strict";
var helpers = require('syracuse-core/lib/helpers');

function TreeDecorator(){
}

exports.TreeDecorator = helpers.defineClass(TreeDecorator, null, {
    load: function(list){
        this.list = list;
        this.$treeview = list.$prototype.$treeview;
        this._map = {};
        this._orphans = {};
        var $bindings = Object.keys(this.$treeview.$bindings);
        for (var ii = 0, jj = $bindings.length; ii < jj; ii++) {
            var $field = list.$fieldProperties[this.$treeview.$bindings[$bindings[ii]]];
            if ($field) {
                $field.$isHidden = true;
            }
        }
        var $bindings = Object.keys(list.$fieldProperties);
        this.$visibleFields = [];
        for (var ii = 0, jj = $bindings.length; ii < jj; ii++) {
            var $field = list.$fieldProperties[$bindings[ii]];
            if (!$field.$isHidden) {
                this.$visibleFields.push($field);
            }
        }
    },
    _appendNode: function(record, slot){
        var node = {
            children: [],
            parentId: record.dataset[this.$treeview.$bindings.$parent],
            id: record.dataset[this.$treeview.$bindings.$id],
            slot: slot,
            item: document.createElement("div"),
            desc: document.createElement("div"),
            picker: document.createElement("a"),
            isOpened: this.$treeview.$bindings.$open ? (record.dataset[this.$treeview.$bindings.$open] === true || record.dataset[this.$treeview.$bindings.$open] === 2) : true
        };
        record.treeNode = node;
        if (node.id != "") {
            this._map[node.id] = record;
            node.parentRecord = this._map[node.parentId];
            if (node.parentRecord) {
                this._linkToParent(record);
                var orphans = this._orphans[node.parentId];
                if (orphans) {
                    for (var ii = 0, jj = orphans.length; ii < jj; ii++) {
                        var orphan = orphans[ii];
                        orphan.treeNode.parentRecord = record;
                        this._linkToParent(orphan);
                        orphan.$isTreeRecordItemMoved = true;
                        orphan.$$item.insertAfter(record.$$item);
                    }
                    delete this._orphans[node.parentId];
                }
                var parentNode = node.parentRecord.treeNode;
                if (parentNode.children.length == 1) {
                    parentNode.picker.className = "s-list-tree-node-picker " + (parentNode.isOpened ? "s-open" : "s-close");
                    parentNode.picker.style.display = "";
                    if (node.parentRecord.$isTreeRecordItemMoved || ((node.parentRecord.$recordIndex - 1) != record.$recordIndex)) {
                        record.$isTreeRecordItemMoved = true;
                        record.$$item.insertAfter(node.parentRecord.$$item);
                    }
                }
                else {
                    var prevChild = parentNode.children[parentNode.children.length - 2];
                    if (prevChild.$isTreeRecordItemMoved || ((prevChild.$recordIndex - 1) != record.$recordIndex)) {
                        record.$isTreeRecordItemMoved = true;
                        record.$$item.insertAfter(this._getLastNode(prevChild).$$item);
                    }
                }
            }
            else {
                if (node.parentId != "") {
                    (this._orphans[node.parentId] = this._orphans[node.parentId] || []).push(record);
                }
                node.level = 0;
            }
            node.item.className = "s-list-tree-node";
            
            node.picker.setAttribute("href", "#");
            if (this.list.$item.$isNodeLazyLoad) {
                node.picker.className = "s-list-tree-node-picker s-close";
                node.picker.style.display = "";
            }
            else {
                node.picker.className = "s-list-tree-node-picker";
                node.picker.style.display = "none";
            }
            node.item.appendChild(node.picker);
            if (this.list.selector.appendToRecord) {
                node.selectorSlot = document.createElement("div");
                node.selectorSlot.style.display = "none";
                node.selectorSlot.className = "s-list-tree-selector";
                node.item.appendChild(node.selectorSlot);
            }
            if (this.$treeview.$bindings.$icon) {
                this._appendIcon(node, record);
            }
            
            node.desc.className = "s-list-tree-node-desc";
            slot.appendChild(node.item);
            node.descriptionField = record.page.loadNewItem(node.item.appendChild(node.desc), {
                $bind: this.$treeview.$bindings.$description,
                $isCellChild: true,
                $inplace: true
            }, record);
            node.descriptionField.setState({
                $isHidden: false
            });
        }
    },
    _appendIcon: function(node, record){
        var name = record.dataset[this.$treeview.$bindings.$icon];
        node.icon = document.createElement("div");
        node.icon.className = "s-list-tree-node-icon";
        node.icon.style.backgroundImage = "url('" + document.site.$item.$iconPath + "tree/" + name + "')";
        node.item.appendChild(node.icon);
    },
    _linkToParent: function(record, parentRecord){
        var parentNode = record.treeNode.parentRecord.treeNode;
        parentNode.children.push(record);
        record.treeNode.level = parentNode.level + 1;
        if (!parentNode.isOpened || !parentNode.isRecordVisible) {
            record.treeNode.isRecordVisible = false;
            record.$$item[0].style.display = "none";
        }
    },
    _displayChildren: function(treeNode, isRecordVisible){
        for (var ii = 0, jj = treeNode.children.length; ii < jj; ii++) {
            var record = treeNode.children[ii];
            record.treeNode.isRecordVisible = isRecordVisible;
            record.$$item[0].style.display = isRecordVisible ? "" : "none";
            if (record.treeNode.children.length) {
                this._displayChildren(record.treeNode, record.treeNode.isOpened && isRecordVisible);
            }
        }
    },
    _getLastNode: function(record){
        if (record.treeNode.children.length > 0) {
            return this._getLastNode(record.treeNode.children[record.treeNode.children.length - 1]);
        }
        return record;
    },
    unregiterRecord: function(record){
        if (record && record.treeNode) {
            if (record.treeNode.parentRecord && record.treeNode.parentRecord.children) {
                //delete record.treeNode.parentRecord.children[treeNode.id];
            }
            delete this._map[record.treeNode.id];
            record.treeNode = null;
        }
    },
    toggleopenTreeNodePicker: function(record, isOpened){
        record.treeNode.isOpened = isOpened;
        record.treeNode.picker.className = "s-list-tree-node-picker " + (record.treeNode.isOpened ? "s-open" : "s-close");
    },
    onNodeEvent: function(event){
        var self = this;
        var record = self.list.findRecord($(event.target));
        self.list.page.externalAdapter.onFieldClickPicker({
            field: record,
            pickerType: "openTreeNode",
            doEvent: function(){
                self.toggleopenTreeNodePicker(record, !record.treeNode.isOpened);
                self._displayChildren(record.treeNode, record.treeNode.isOpened);
            }
        });
    },
    onEndFillList: function(){
        var appendSelector = this.list.selector.appendToRecord;
        var $isNodeLazyLoad = this.list.$item.$isNodeLazyLoad;
        var isMulti = this.list.selector.isMulti;
        for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
            var record = this.list.records[ii];
            var hasChildren = record.treeNode.children.length > 0;
            if (appendSelector) {
                if (isMulti) {
                    if (!record._selectorCheck) {
                        record._selectorCheck = this.list.selector.appendToRecord(record.treeNode.selectorSlot);
                        record.treeNode.selectorSlot.style.display = "";
                    }
                }
                else {
                    if (hasChildren) {
                        if (record._selectorCheck) {
                            document.site.removeDomChild(record._selectorCheck);
                            delete record._selectorCheck;
                            record.treeNode.selectorSlot.style.display = "none";
                        }
                    }
                    else {
                        if (!record._selectorCheck) {
                            record._selectorCheck = this.list.selector.appendToRecord(record.treeNode.selectorSlot);
                            record.treeNode.selectorSlot.style.display = "";
                        }
                    }
                }
            }
            var padding = 0;
            if (record.treeNode.parentRecord && !$isNodeLazyLoad && !hasChildren && record.treeNode.icon) {
                padding = 18;
            }
            record.treeNode.slot.style.paddingLeft = (record.treeNode.level * 18) + padding + "px";
        }
    },
    appendTreeviewCol: function(slot){
        var col = this.list.builder.cols.$treeview = this.list.builder._appendCol();
        col.slot = slot;
        col.titleCell.className = "s-list-tree-title-cell";
        slot.appendChild(col.titleCell);
        if (this.$visibleFields.length == 0) {
            col.groupHead.style.width = col.groupBody.style.width = col.widthValue = "100%";
        }
        else {
            col.groupHead.style.width = col.groupBody.style.width = (col.widthValue = 200) + "px";
        }
        return col;
    },
    appendTreeviewCell: function(record, slot){
        var cell = document.createElement("td");
        cell.className = record.builder.gridCss.cell + " s-list-tree-cell";
        slot.appendChild(cell);
        this._appendNode(record, cell);
        return cell;
    },
    highlightSelection: function(selected){
        if (this.list.$item.$isTreeSelectionVisible) {
        
        }
    },
    dispose: function(){
        this.list = this._map = this._orphans = this.$visibleFields = null;
    }
});
