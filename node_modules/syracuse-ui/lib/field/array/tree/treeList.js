"use strict";
var helpers = require('syracuse-core/lib/helpers');
var TreeNode = require("./treeNode").TreeNode;

function TreeList() {}

exports.TreeList = helpers.defineClass(TreeList, null, {
	load: function(list) {
		this.list = list;
		this.list.$isEditMode = false; // set false editMode for that that contains tree
		this.$treeview = list.$prototype.$treeview;
		this.nodes = {};
		this.orphanNodes = {};
		this.rootNodes = [];
		var $bindings = Object.keys(this.$treeview.$bindings);
		for (var ii = 0, jj = $bindings.length; ii < jj; ii++) {
			var $field = list.$fieldProperties[this.$treeview.$bindings[$bindings[ii]]];
			if ($field) {
				$field.$isHidden = true;
			}
		}
		var $bindings = Object.keys(list.$fieldProperties);
		this.$visibleFields = [];
		for (var ii = 0, jj = $bindings.length; ii < jj; ii++) {
			var $field = list.$fieldProperties[$bindings[ii]];
			if (!$field.$isHidden && !$field.$isExcluded) {
				this.$visibleFields.push($field);
			}
		}
	},
	onNodeEvent: function(event) {
		var record = this.list.findRecord($(event.target));
		this.list.page.externalAdapter.onFieldClickPicker({
			field: record,
			pickerType: "openTreeNode",
			doEvent: function() {
				record.treeNode.onOpenTreeNodeEvent();
			}
		});
	},
	onEndFillList: function() {
		var parentIds = Object.keys(this.orphanNodes);
		for (var ii = 0, jj = parentIds.length; ii < jj; ii++) {
			var id = parentIds[ii];
			if (this.nodes[id]) {
				this.nodes[id].attachOrphans();
			}
		}

		for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
			if (!this.list.records[ii].isDrew && this.list.records[ii].treeNode.parentId == "") {
				this.list.records[ii].treeNode.ensureDraw();
			}
		}
	},
	appendTreeviewCol: function(slot) {
		var col = this.list.builder.cols.$treeview = this.list.builder._appendCol();
		col.slot = slot;
		col.titleCell.className = "s-list-tree-title-cell";
		slot.appendChild(col.titleCell);
		if (this.$visibleFields.length == 0) {
			col.groupHead.style.width = col.groupBody.style.width = col.widthValue = "100%";
		} else {
			col.groupHead.style.width = col.groupBody.style.width = (col.widthValue = 200) + "px";
		}
		return col;
	},
	appendTreeviewCell: function(record, slot) {
		var cell = document.createElement("td");
		cell.className = record.builder.gridCss.cell + " s-list-tree-cell";
		if (this.list.$capability && this.list.$capability.reorder) {
			cell.className += " s-list-record-reorder";
		}
		slot.appendChild(cell);
		var node = new TreeNode();
		node.load(this, record, cell);
		return cell;
	},
	highlightSelection: function(selected) {
		if (this.list.$item.$isTreeSelectionVisible) {

		}
	},
	dispose: function() {
		this.list = this.nodes = this.orphanNodes = this.$visibleFields = null;
	}
});