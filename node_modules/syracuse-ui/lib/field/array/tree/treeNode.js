"use strict";
var helpers = require('syracuse-core/lib/helpers');

function TreeNode() {}

exports.TreeNode = helpers.defineClass(TreeNode, null, {
	load: function(treeList, record, slot) {
		this.treeList = treeList;
		var $bindings = this.treeList.$treeview.$bindings;
		(this.record = record).treeNode = this;
		this.children = [];
		this.parentId = record.dataset[$bindings.$parent];
		this.id = record.dataset[$bindings.$id];
		if (this.id == "") {
			this.id = "s-empty";
		}
		this.slot = slot;
		this.item = document.createElement("div");
		this.item.className = "s-list-tree-node";
		this.isOpened = $bindings.$open ? (record.dataset[$bindings.$open] === true || record.dataset[$bindings.$open] === 2) : true;
		if (this.id != "") {
			this.treeList.nodes[this.id] = this;
			var parentNode = this.treeList.nodes[this.parentId];
			if (parentNode) {
				this.linkToParent(parentNode);
				this.parentNode.attachOrphans();
				if (this.parentNode.children.length == 1) {
					if (this.parentNode.record.$isTreeRecordItemMoved || ((this.parentNode.record.$recordIndex - 1) != this.record.$recordIndex)) {
						this.record.$isTreeRecordItemMoved = true;
						this.parentNode.record.dataRow.parentNode.insertBefore(this.record.dataRow, this.parentNode.record.dataRow.nextSibling);
					}
				} else {
					var prevChildNode = this.parentNode.children[this.parentNode.children.length - 2];
					if (prevChildNode.record.$isTreeRecordItemMoved || ((prevChildNode.record.$recordIndex - 1) != this.record.$recordIndex)) {
						this.record.$isTreeRecordItemMoved = true;
						var prevNode = prevChildNode.getLastNode();
						prevNode.record.dataRow.parentNode.insertBefore(this.record.dataRow, prevNode.record.dataRow.nextSibling);
					}
				}
			} else {
				if (this.parentId != "") {
					(this.treeList.orphanNodes[this.parentId] = this.treeList.orphanNodes[this.parentId] || []).push(this);
				}
				this.level = 0;
			}

			this.appendPicker();
			/*if (this.treeList.list.selector.appendToRecord) {
                this.appendSelector();
            }*/
			this.treeList.list.selector.appendToRecord = false;
			if ($bindings.$icon) {
				this.appendIcon($bindings.$icon);
			}
			this.appendDescription();
		}
	},
	attachOrphans: function() {
		var orphanNodes = this.treeList.orphanNodes[this.id];
		if (orphanNodes) {
			var lastRow = (this.children.length > 0 ? this.children[this.children.length - 1] : this).record.dataRow;
			for (var ii = 0, jj = orphanNodes.length; ii < jj; ii++) {
				var orphan = orphanNodes[ii];
				orphan.linkToParent(this);
				orphan.$isTreeRecordItemMoved = true;
				lastRow.parentNode.insertBefore(orphan.record.dataRow, lastRow.nextSibling);
			}
			delete this.treeList.orphanNodes[this.id];
		}
	},
	linkToParent: function(parentNode) {
		(this.parentNode = parentNode).children.push(this);
		this.level = this.parentNode.level + 1;
		if (!this.parentNode.isOpened || !this.parentNode.isRecordVisible) {
			this.isRecordVisible = false;
			this.record.$$item[0].style.display = "none";
		}
	},
	appendIcon: function($icon) {
		var name = this.record.dataset[$icon];
		this.icon = document.createElement("div");
		this.icon.className = "s-list-tree-node-icon";
		this.icon.style.backgroundImage = "url('" + document.site.$item.$iconPath + "tree/" + name + "')";
		this.item.appendChild(this.icon);
	},
	appendSelector: function() {
		this.selectorSlot = document.createElement("div");
		this.selectorSlot.style.display = "none";
		this.selectorSlot.className = "s-list-tree-selector";
		this.item.appendChild(this.selectorSlot);
	},
	appendPicker: function() {
		this.picker = document.createElement("a");
		this.picker.setAttribute("href", "#");
		if (this.treeList.list.$item.$isNodeLazyLoad) {
			this.picker.className = "s-list-tree-node-picker s-close";
			this.picker.style.display = "";
		} else {
			this.picker.className = "s-list-tree-node-picker";
			this.picker.style.display = "none";
		}
		this.item.appendChild(this.picker);
	},
	appendDescription: function() {
		this.desc = document.createElement("div");
		this.desc.className = "s-list-tree-node-desc";
		this.descriptionField = this.record.page.loadNewItem(this.item.appendChild(this.desc), {
			$bind: this.treeList.$treeview.$bindings.$description,
			$isCellChild: true,
			$inplace: true
		}, this.record);
		this.descriptionField.setState({
			$isHidden: false
		});
		this.descriptionField.fieldValue.className += " s-list-tree-node-desc-value";
		this.slot.appendChild(this.item);
	},
	displayChildren: function(isRecordVisible) {
		for (var ii = 0, jj = this.children.length; ii < jj; ii++) {
			var childNode = this.children[ii];
			childNode.isRecordVisible = isRecordVisible;
			childNode.record.$$item[0].style.display = isRecordVisible ? "" : "none";
			if (childNode.children.length) {
				childNode.displayChildren(childNode.isOpened && isRecordVisible);
			}
		}
	},
	ensureDraw: function() {
		if (this.id != "") {
			var list = this.treeList.list;
			var hasChildren = this.children.length > 0;
			if (list.selector.appendToRecord) {
				if (list.selector.isMulti) {
					if (!this.record._selectorCheck) {
						this.record._selectorCheck = list.selector.appendToRecord(this.selectorSlot);
						this.selectorSlot.style.display = "";
					}
				} else {
					if (hasChildren) {
						if (this.record._selectorCheck) {
							document.site.removeDomChild(this.record._selectorCheck);
							delete this.record._selectorCheck;
							this.selectorSlot.style.display = "none";
						}
					} else {
						if (!this.record._selectorCheck) {
							this.record._selectorCheck = list.selector.appendToRecord(this.selectorSlot);
							this.selectorSlot.style.display = "";
						}
					}
				}
			}
			if (hasChildren) {
				this.togglePicker(this.isOpened);
				this.picker.style.display = "";
			}
			var padding = 0;
			if (this.parentNode) {
				this.record.$$item[0].style.display = this.parentNode.isOpened ? "" : "none";
				if (!list.$item.$isNodeLazyLoad && !hasChildren && this.icon) {
					padding = 18;
				}
			}
			this.slot.style.paddingLeft = (this.level * 18) + padding + "px";
		}
	},
	onOpenTreeNodeEvent: function() {
		this.togglePicker();
		this.displayChildren(this.isOpened);
	},
	togglePicker: function(isOpened) {
		this.isOpened = isOpened === undefined ? !this.isOpened : isOpened;
		this.picker.className = "s-list-tree-node-picker " + (this.isOpened ? "s-open" : "s-close");
	},
	getLastNode: function() {
		if (this.children.length > 0) {
			return this.children[this.children.length - 1].getLastNode();
		}
		return this;
	},
	onRemoveRecord: function() {
		if (this.parentNode && this.parentNode.children) {
			for (var ii = 0, jj = this.parentNode.children.length; ii < jj; ii++) {
				if (this.parentNode.children[ii] == this) {
					this.parentNode.children.splice(ii, 1);
					break;
				}
			}
		}
		if (this.children) {
			for (var ii = 0, jj = this.children.length; ii < jj; ii++) {
				delete this.children[ii].parentNode;
			}
		}
		if (this.treeList && this.treeList.nodes) {
			delete this.treeList.nodes[this.id];
		}
		if (this.record) {
			this.record.treeNode = null;
		}
		this.dispose();
	},
	dispose: function() {
		this.parentNode = this.treeList = this.record = this.children = null;
		this.slot = this.item = this.desc = this.picker = this.selectorSlot = this.icon = this.descriptionField = null;
	}
});