"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ArrayField = require("syracuse-ui/lib/field/array/arrayField").ArrayField;

var _recordSelector = require('./selector/recordSelector');
var _queryFilters = require("./tools/queryFilters");

var FieldsGarbage = require('syracuse-ui/lib/page/tools/fieldsGarbage').FieldsGarbage;
var SelectorCardRecord = require("./selector/selectorCardRecord").SelectorCardRecord;
var TreeDecorator = require("./tools/treeDecorator").TreeDecorator;
var SlotResizerDDAgent = require("./tools/slotResizerDDAgent").SlotResizerDDAgent;
var _graphDecorator = require("./tools/graphDecorator");

var _gridBuilder = require("syracuse-ui/lib/field/array/gridBuilder").GridBuilder;
var _cardsBuilder = require("syracuse-ui/lib/field/array/cardsBuilder").CardsBuilder;

function _applyPageSortWhereCapabilities(list, newData) {
	list.paging.applyMetadata(newData);
	list.sorter.setOrderBy(list, newData.$orderBy);
	if (newData.$where !== undefined) {
		list.$where = newData.$where;
	}
}

function _hasGraph(list) {
	return !!(list.$prototype.$cube || list.$prototype.$decorator);
}

function _setBuilderClass($item) {
	$item.$format = $item.$format == "cards" ? $item.$format : "grid";
	return $item.$format == "cards" ? _cardsBuilder : _gridBuilder;
}

function _endSwitchDesigner(list, open) {
	list.designBtn && syra_menus.button.disable(list.designBtn, !! list.designer);
	if (list.page.isVignettePage && list.articleParent == list.page) {
		var vignetteField = list.page.vignetteField;
		syra_menus.button.disable(vignetteField.refreshBtn, open);
		syra_menus.button.disable(vignetteField.menuBtn, open);
		syra_menus.button.disable(vignetteField.designBtn, open);
	}
};

function MultiArrayField() {}

exports.MultiArrayField = helpers.defineClass(MultiArrayField, ArrayField, {
	enableDefaultDesigner: function() {
		this.switchDesigner = function(open) {
			var self = this;
			if (open && !self.designer) {
				require.async('syracuse-ui/lib/authoring/listDesigner', function(err, module) {
					self.ensureGrapDecorator(true);
					self.designer = new module.Designer();
					self.designer.openDesigner(self);
					_endSwitchDesigner(self, open);
				});
			} else {
				self.designer && self.designer.dispose();
				self.designer = self.$designing = null;
				_endSwitchDesigner(self, open);
			}
		};
		this.toggleUIDesign = function(enable, disposingDesigner) {
			if (enable) {
				if (!this.designBtn) {
					this.designBtn = syra_menus.button.add({
						parent: this,
						text: syra_local.flDesign,
						iconOnly: true,
						css: this.$mnPickersCss,
						fontIcon: "design",
						btnclick: function() {
							syra_site.switchItemDesigner(this.parent, !this.parent.designer);
						}
					});
					this.topbar.insertBefore(this.designBtn.link, this.topbar.firstChild);
				}
			} else {
				disposingDesigner && syra_site.switchItemDesigner(this, false);
				if (this.designBtn) {
					syra_menus.button.remove(this.designBtn);
					this.designBtn = null;
				}
			}
			this.designBtn && syra_menus.button.disable(this.designBtn, !! this.designer);
			this.filler.toggleFakeRecord(this, enable);
		};
		if (this.page.vignetteField) {
			if (["$query", "$cube"].indexOf(this.articleParent.$facet) >= 0) {
				var self = this;
				self.page.vignetteField.switchDesigner = function(open) {
					self.switchDesigner(open);
				};
			}
		}
	},
	loadBox: function(initData) {
		this.page.resizableList.add(this);
		if (!this.$field.$builderClass) {
			this.$field.$builderClass = _setBuilderClass(this.$item);
		}
		ArrayField.prototype.loadBox.call(this, initData);
	},
	reloadLayout: function() {
		this.filler.removeRecords(this);
		var $builderClass = _setBuilderClass(this.$item);
		this.builder && this.builder.dispose(true);
		this.builder = new $builderClass();
		this.builder.initialize(this);
		this.builder.endInitiallize();
		this.builder.list_onAfterDraw();
		var parentDataset = this.articleParent.dataset;
		this.setDataBind(parentDataset[this.$item.$bind], parentDataset, parentDataset.$properties && parentDataset.$properties[this.$item.$bind], this.$item.$bind);
	},
	loadSelector: function() {
		syra_site.disposeObject(this.selector);
		this.selector = new _recordSelector.RecordSelector();
		this.selector.load(this);
	},
	initializeList: function() {
		if (!this.discardFieldsGarbage) {
			this.page.insertNewItems.call(this, true, "field");
		}
		// check Filter Capability
		var hasFilterCapability = syra_fields.embedded.checkListFilterCapabilities(this);
		if ((!hasFilterCapability && this.$item.$isQuickFilter) || (hasFilterCapability && this.$item.$isQuickFilter === undefined)) {
			this.$item.$isQuickFilter = hasFilterCapability;
		}

		if (this.$item.$alternateStyle === undefined) {
			this.$item.$alternateStyle = true;
		}
		if (this.page.userPreferences) {
			this.$userPreferences = this.page.userPreferences.getForField(this.$item.$bind);
			if (this.$userPreferences.$itemsPerPage) {
				this.$item.$itemsPerPage = this.$userPreferences.$itemsPerPage;
			}
		}

		this.fitWidth = this.page.isVignettePage || this.$item.$fitWidth || this.articleParent.isRecordArticle;
		switch (this.articleParent.$facet) {
			case "$query":
				_queryFilters.addLinks(this);
				this.adjustToScrollPage = true;
				this.fitWidth = true;
				this.$addRefresh = true;
				break;
			case "$bulk":
				this.adjustToScrollPage = true;
				this.fitWidth = true;
				break;
			case "$search":
				break;
			case "$lookup":
			case "$select":
				this.$addMaximize = false;
				this.page.isLookUpPage = true;
				this.$item.$selectMode = this.articleParent.$facet == "$select" ? "multi" : "row";
				this.$addRefresh = true;
				break;
			default:
				this.isServerStepPager = false;
				this.isClientFetch = this.isClientFetch !== false;
				if (this.$field.$isEntityFusionList) {
					//set for convergence
					this.$field.$links = this.$field.$links || {
						$lazyLoad: {}
					};
				}
				if (this.$prototype.$treeview) {
					this.isClientFetch = false;
					this.isPagingDisabled = !this.$item.$isNavigationList;
					this.paging.noPageSize = true;
					delete this.$item.$itemsPerPage;
				} else {
					this.isFixedColEnabled = true;
				}
				break;
		}
		if (this.$addMaximize === undefined) {
			this.$addMaximize = !this.$item.$selectorCard && !this.page.vignetteField;
		}
		if (this.$item.$itemsPerPage && !this.isClientFetch) {
			this.page.fetchListItemsPerPage = this.$item.$itemsPerPage;
		}
		if (this.$prototype.$treeview) {
			(this.treeDecorator = new TreeDecorator()).load(this);
		}
		if (_hasGraph(this)) {
			if (this.$item.$graphMode != undefined) {
				if (this.$item.$graphMode == "list") {
					this.$item.$graphPosition = this.$item.$graphPosition || "behind";
				} else {
					this.$item.$graphPosition = this.$item.$graphPosition || "front";
				}
				delete this.$item.$graphMode;
			}
			if (this.$item.$graphPosition == "tab") {
				this.$item.$graphPosition = "front";
			}
			if (!this.page.isVignettePage) {
				this.$isQuickDesignerDisabled = !! this.$item.$isQuickDesignerDisabled;
			}
		}
		if (this.$isQuickDesignerDisabled === undefined) {
			this.$isQuickDesignerDisabled = true;
		}

		this.ensureEditMode();

		if (this.page.$autoFetch) {
			var params = this.page.getUrlParams();
			if (params) {
				if (params.where) {
					this.$prototype.$where = params.where;
				}
				this.$prototype.$filter = params.filter;
			}
		}
		_applyPageSortWhereCapabilities(this, this.$prototype);
		if (this.$field.$isFusionNavigationList) {
			this.isNoPageUniqueSelection = true;
		}
		if (this.$item.$selectorCard) {
			this.isNoPageUniqueSelection = true;
			this.selectorCardRecord = new SelectorCardRecord();
			this.selectorCardRecord.initialize(this);
		}
	},
	clearPreferences: function() {
		this.paging && this.paging.clearPreferences();
		this.builder.clearPreferences && this.builder.clearPreferences();
	},
	fillList: function(dataRecordSet, parentDataRecord, isDelta) {
		_applyPageSortWhereCapabilities(this, parentDataRecord);
		this.filler.fill(this, dataRecordSet, parentDataRecord, isDelta);
		this.treeDecorator && this.treeDecorator.onEndFillList();
		this.paging.draw();
		this.sorter.render(this);
		this.showBody(true);
		this.builder.list_onAfterFill && this.builder.list_onAfterFill();
	},
	emptyBody: function() {
		this.filler.emptyBody(this);
	},

	resizeArticle: function() {
		if (!this.disposed && syra_dom.isVisible(this.domItem)) {
			this.builder.onResizeArray && this.builder.onResizeArray();
			this.designer && this.designer.resizeArticle();
			if (this.selectorCardRecord) {
				this.selectorCardRecord.popupCard && this.selectorCardRecord.popupCard.resizeDialog(true);
			}
			this.chart && this.chart.resizeChart && this.chart.resizeChart();

		}
	},
	onSelectorClick: function(event, btn) {
		if (_recordSelector.onSelectorClick(this, event)) {
			event.preventDefault();
			event.stopPropagation();
		}
		event.syraRetValue = true;
		if (this.$item && this.$item.$isNavigationList) { //test is mandatory as list can be disposed on selection
			this.isMaximized && this.maximizeBtn.link.click();
		}
	},
	onMouseMove: function(event) {
		this.builder.list_onMouseMove && this.builder.list_onMouseMove(event);
	},
	onNotifyDataChange: function(field, value) {
		if (field.$item.$bind == "$itemsPerPage") {
			this.paging.getItemsPerPage(value);
			if (this.page.isVignettePage) {
				this.$item.$itemsPerPage = value;
			}
			(this.$userPreferences = this.$userPreferences || {}).$itemsPerPage = this.paging.getItemsPerPage();
			this.saveListDesign(false, this.$userPreferences);
			this.filler.trigger(this, {
				startIndex: 1
			});
		}
		return false;
	},
	notifyActionChange: function(menuItem, target, value, notifyServer) {
		var record = target.isRecordArticle ? target : null;
		if (value.$create) {
			var dataRecords = this.ensureDataSet();
			this.filler.ensureClientDataset(this);
			var options = {
				isCreateAction: true
			};
			if (record) {
				options.$serverIndex = record.$serverIndex;
				options.$recordIndex = record.getRecordIndex();
			} else {
				if (this.dataset.length > 0) {
					options.$serverIndex = this.dataset[this.dataset.length - 1].$serverIndex + 1;
				} else {
					options.$serverIndex = 0;
				}
			}
			var newValue = {
				$uuid: helpers.uuid.generate()
			};
			if (menuItem.$item.$variantItemKey) {
				options.dataRecord = {};
				options.dataRecord[menuItem.$item.$variantItemKey] = newValue;
			} else {
				options.dataRecord = newValue;
			}
			if (record) {
				var found = this.filler.findDataRecord(this, record.$uuid);
				dataRecords.splice(found.dataRecordIndex, 0, options.dataRecord);
			} else {
				dataRecords.splice(options.$serverIndex, 0, options.dataRecord);
			}
			if (this.paging.$startIndex !== undefined && this.clientDataset.length < this.paging.$startIndex) {
				this.paging.ensureClientRange();
			}
			if ((this.paging.$startIndex + (this.paging.$itemsPerPage - 1)) > options.$serverIndex) {
				var newRecord = this.filler.addRecord(this, options);
			}
			//sendbag begin
			var sendBag = syra_workingCopy.getSendBag(this);
			var saved = {
				$uuid: newValue.$uuid
			};
			if (sendBag.dataRecords.length > 0) {
				sendBag._ensureFullDataSet(this);
				if (!sendBag._findDataRecord(saved.$uuid)) {
					sendBag.dataRecords.splice(options.$serverIndex, 0, saved);
				}
			} else {
				saved.$index = options.$serverIndex;
				sendBag.dataRecords.push(saved);
			}
			//sendbag end
			if (this.isClientFetch) {
				options.dataRecord.$serverIndex = options.$serverIndex;
				if (this.clientDataset != this.dataset) {
					this.clientDataset.push(options.dataRecord);
				}
				if (this.clientFetchOptions) {
					this.filler.applyClientFetchOptions(this, this.clientFetchOptions);
				}
				this.paging.setPage(options.$serverIndex);
			} else {
				this.filler.validateDisplay(this);
			}
			this.page.notifyDataChange(this, sendBag.dataRecords);
		} else {
			var sendBag = syra_workingCopy.getSendBag(this);
			var dataRecords = this.ensureDataSet();
			this.filler.ensureClientDataset(this);
			if (record) {
				var clientDataRecordIndex = this.filler.getClientDataSetIndex(this, record.$serverIndex);
				this.records.splice(this.records.indexOf(record), 1);
				var found = this.filler.findDataRecord(this, record.$uuid);
				if (found) {
					dataRecords.splice(found.dataRecordIndex, 1);
					record.$index = found.dataRecordIndex;
				}
				var found = sendBag.ensureRecord(record);
				if (sendBag.dataRecords.length == 1) {
					found.dataRecord.$index = record.$serverIndex;
					found.dataRecord.$isDeleted = true;
				} else {
					sendBag.dataRecords.splice(found.dataRecordIndex, 1);
				}
				delete record.$index;
				if (clientDataRecordIndex >= 0 && this.clientDataset != this.dataset) {
					this.clientDataset.splice(clientDataRecordIndex, 1);
				}
				delete this.recordsMap[record.$uuid];
				this.filler.removeRecord(record, true);
			} else {
				this.clientDataset.splice(0, dataRecords.length);
				dataRecords.splice(0, dataRecords.length);
				sendBag.dataRecords = [];
				this.filler.removeRecords(this);
			}
			if (this.records.length == 0) {
				this.emptyBody();
			} else {
				if (clientDataRecordIndex >= 0 && this.isClientFetch && this.clientDataset.length) {
					this.paging.setPage(this.clientDataset[Math.min(clientDataRecordIndex, this.clientDataset.length - 1)].$serverIndex);
				} else {
					this.filler.validateDisplay(this);
				}
			}
			this.page.notifyDataChange(this, sendBag.dataRecords);
		}
	},
	ensureGrapDecorator: function(load) {
		if (_hasGraph(this)) {
			!this.toggleGraph && _graphDecorator.load(this);
			this.$item.$graphPosition = this.$item.$graphPosition || "bottom";
			load && _graphDecorator.ensureGraph(this, true);
		}
	},
	addSlotResizer: function(target, event) {
		var resizeCard = target.syraOutCardResizer == this.id;
		var resizeGraph = target.syraGraphResizer == this.id;
		if (resizeCard || resizeGraph) {
			syra_dd.dropableItem = {
				list: this,
				resizeCard: resizeCard,
				resizeGraph: resizeGraph
			};
			syra_dd.start(this, SlotResizerDDAgent, this._core);
			event.syraRetValue = false;
			return true;
		}
	},
	saveListDesign: function(resize, $userPreferences) {
		if ($userPreferences) {
			this.page.userPreferences && this.page.userPreferences.saveForField(this.$item.$bind, $userPreferences);
		}
		if (this.designer) {
			this.designer.endArticleUpdate();
		} else {
			resize && this.resizeArticle();
			this.page.savePageDesign( !! $userPreferences);
		}
	},
	endDrawBox: function() {
		!this.$item.$selectorCard && this.layoutSlot.appendChild(this.domItem);
		this.ensureLayoutMode();
		this.selectorCardRecord && this.selectorCardRecord.loadBox();
		if (!this.$isQuickDesignerDisabled) {
			syra_menus.menus.applyChange(this, {
				$links: {
					$design: {
						$title: _hasGraph(this) ? syra_local.flDesignGraph : syra_local.flDesign
					}
				}
			});
		}
		if (!this.discardFieldsGarbage) {
			this.garbage = new FieldsGarbage();
			this.garbage.load(this);
		}
	},
	defineDefaultCard: function() {
		var $items = [];
		var $binds = Object.keys(this.$fields);
		var $rows = [],
			$cols;
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			if (!this.$fields[$binds[ii]].$isExcluded) {
				/*if (!$cols) {
                 $cols = [{
                 $items: []
                 }, {
                 $items: []
                 }, {
                 $items: []
                 }];
                 }*/
				$items.push({
					$bind: $binds[ii]
				});
			}
		}
		return {
			$layout: {
				$items: $items
			}
		};
	},
	onReloading: function($item) {
		if (this.$item.$format !== undefined && $item.$format != this.$item.$format) {
			this.articleParent.removeItem(this, true, true);
			return null;
		}
		this.applyDesignMetaData($item, true);
		this.designer && this.designer.applyListDesignMetaData();
		this.fillList(this.dataset, this.articleParent.dataset[this.$item.$bind]);
		return this;
	},
	dispose: function() {
		this.page && this.page.resizableList.remove(this);
		this.treeDecorator && this.treeDecorator.dispose();
		_graphDecorator.dispose(this);
		this.selectorCardRecord && this.selectorCardRecord.dispose();
		syra_site.disposeObject(this.selector);
		this._autoInsertFields && this._autoInsertFields.dispose();
		this.garbage && this.garbage.dispose();
		ArrayField.prototype.dispose.call(this);
	}
});