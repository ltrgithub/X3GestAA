"use strict";
var helpers = require('syracuse-core').helpers;
var ArrayField = require("syracuse-ui/lib/field/array/arrayField").ArrayField;
var _selector = require('./tools/selector');
var _queryFilters = require("./tools/queryFilters");
var _graph = require("./tools/graph");
var FieldsGarbage = require('syracuse-ui/lib/page/tools/fieldsGarbage').FieldsGarbage;
var _selectorCard = require("./tools/selectorCard");
var _tree = require("./tools/tree");
var SlotResizerDDAgent = require("./tools/slotResizerDDAgent").SlotResizerDDAgent;
var _gridBuilder = require("syracuse-ui/lib/field/array/gridBuilder").GridBuilder;
var _cardsBuilder = require("syracuse-ui/lib/field/array/cardsBuilder").CardsBuilder;

function _applyPageSortWhereCapabilities(list, newData) {
	list.paging.applyMetadata(newData);
	list.sorter.setOrderBy(list, newData.$orderBy);
	if (newData.$where !== undefined) {
		list.$where = newData.$where;
	}
}

function _setBuilderClass($item) {
	$item.$format = $item.$format == "cards" ? $item.$format : "grid";
	return $item.$format == "cards" ? _cardsBuilder : _gridBuilder;
}

function _endSwitchDesigner(list, open) {
	list.designBtn && syra_button.disable(list.designBtn, !! list.designer);
	if (list.page.isVignettePage && list.articleParent == list.page) {
		var vignetteField = list.page.vignetteField;
		syra_button.disable(vignetteField.refreshBtn, open);
		syra_button.disable(vignetteField.menuBtn, open);
		syra_button.disable(vignetteField.designBtn, open);
	}
};

function MultiArrayField() {}

exports.MultiArrayField = helpers.defineClass(MultiArrayField, ArrayField, {
	enableDefaultDesigner: function() {
		this.switchDesigner = function(open) {
			var self = this;
			if (open && !self.designer) {
				require.async('syracuse-ui/lib/authoring/listDesigner', function(err, module) {
					_graph.draw(self, true);
					self.designer = new module.Designer();
					self.designer.openDesigner(self);
					_endSwitchDesigner(self, open);
				});
			} else {
				self.designer && self.designer.dispose();
				self.designer = self.$designing = null;
				_endSwitchDesigner(self, open);
			}
		};
		this.toggleUIDesign = function(enable, disposingDesigner) {
			if (enable) {
				if (!this.designBtn) {
					this.designBtn = syra_button.add({
						parent: this,
						text: syra_local.flDesign,
						iconOnly: true,
						css: this.$mnPickersCss,
						fontIcon: "design",
						click: function() {
							syra_site.switchItemDesigner(this.parent, !this.parent.designer);
						}
					});
					this.topbar.insertBefore(this.designBtn.link, this.topbar.firstChild);
				}
			} else {
				disposingDesigner && syra_site.switchItemDesigner(this, false);
				if (this.designBtn) {
					syra_button.remove(this.designBtn);
					this.designBtn = null;
				}
			}
			this.designBtn && syra_button.disable(this.designBtn, !! this.designer);
			this.filler.toggleFakeRecord(this, enable);
		};
		if (this.page.vignetteField) {
			if (["$query", "$cube"].indexOf(this.articleParent.$facet) >= 0) {
				var self = this;
				self.page.vignetteField.switchDesigner = function(open) {
					self.switchDesigner(open);
				};
			}
		}
	},
	load: function(initData) {
		this.page.resizableList.add(this);
		if (!this.$field.$builderClass) {
			this.$field.$builderClass = _setBuilderClass(this.$item);
		}
		ArrayField.prototype.load.call(this, initData);
	},
	reloadLayout: function() {
		this.filler.removeRecords(this);
		var $builderClass = _setBuilderClass(this.$item);
		this.builder && this.builder.dispose(true);
		this.builder = new $builderClass();
		this.builder.initialize(this);
		this.builder.endInitiallize();
		this.builder.list_onAfterDraw();
		var parentDataset = this.articleParent.dataset;
		this.setValue(parentDataset[this.$item.$bind], parentDataset.$properties && parentDataset.$properties[this.$item.$bind], parentDataset);
	},
	addSelector: function() {
		_selector.add(this);
	},
	initializeList: function() {
		this.formType = "multiArray";
		if (!this.discardFieldsGarbage) {
			this.page.insertNewItems.call(this, true, "field");
		}
		// check Filter Capability
		var hasFilterCapability = syra_fields.embedded.checkListFilterCapabilities(this);
		if ((!hasFilterCapability && this.$item.$isQuickFilter) || (hasFilterCapability && this.$item.$isQuickFilter === undefined)) {
			this.$item.$isQuickFilter = hasFilterCapability;
		}

		if (this.$item.$alternateStyle === undefined) {
			this.$item.$alternateStyle = true;
		}
		this.$pagePreferences = syra_preference.page.getField(this);
		if (this.$pagePreferences.$itemsPerPage) {
			this.$item.$itemsPerPage = this.$pagePreferences.$itemsPerPage;
		}

		this.fitWidth = this.page.isVignettePage || this.$item.$fitWidth || this.articleParent.isRecordArticle;
		switch (this.articleParent.$facet) {
			case "$query":
				_queryFilters.addLinks(this);
				this.adjustToScrollPage = true;
				this.fitWidth = true;
				this.$addRefresh = true;
				break;
			case "$bulk":
				this.adjustToScrollPage = true;
				this.fitWidth = true;
				break;
			case "$search":
				break;
			case "$lookup":
			case "$select":
				this.fitWidth = true;
				this.$addMaximize = false;
				this.page.isLookUpPage = true;
				this.$item.$selectMode = this.articleParent.$facet == "$select" ? "multi" : "row";
				this.$addRefresh = true;
				break;
			default:
				this.isServerStepPager = false;
				this.isClientFetch = this.isClientFetch !== false;
				if (this.$field.$isEntityFusionList) {
					//set for convergence
					this.$field.$links = this.$field.$links || {
						$lazyLoad: {}
					};
				}
				if (this.$prototype.$treeview) {
					this.isClientFetch = false;
					this.isPagingDisabled = !this.$item.$isNavigationList;
					this.paging.noPageSize = true;
					delete this.$item.$itemsPerPage;
				} else {
					this.isFixedColEnabled = true;
				}
				break;
		}
		if (this.$addMaximize === undefined) {
			this.$addMaximize = !this.$item.$selectorCard && !this.page.vignetteField;
		}
		if (this.$item.$itemsPerPage && !this.isClientFetch) {
			this.page.fetchListItemsPerPage = this.$item.$itemsPerPage;
		}
		if (this.$prototype.$treeview) {
			_tree.add(this);
		}
		if (_graph.isDefined(this)) {
			if (this.page.$prototype.$isCalendarView) {
				this.$addRefresh = false;
				this.$switchToList = false;
			}
			if (this.$item.$graphMode != undefined) {
				if (this.$item.$graphMode == "list") {
					this.$item.$graphPosition = this.$item.$graphPosition || "behind";
				} else {
					this.$item.$graphPosition = this.$item.$graphPosition || "front";
				}
				delete this.$item.$graphMode;
			}
			if (this.$item.$graphPosition == "tab") {
				this.$item.$graphPosition = "front";
			}
			if (!this.page.isVignettePage) {
				this.$isQuickDesignerDisabled = !! this.$item.$isQuickDesignerDisabled;
			}
		}
		if (this.$isQuickDesignerDisabled === undefined) {
			this.$isQuickDesignerDisabled = true;
		}

		syra_fields.ensureEditMode(this);

		if (this.page.$autoFetch) {
			var params = this.page.getUrlParams();
			if (params) {
				if (params.where) {
					this.$prototype.$where = params.where;
				}
				this.$prototype.$filter = params.filter;
			}
		}
		_applyPageSortWhereCapabilities(this, this.$prototype);
		if (this.$field.$isFusionNavigationList) {
			this.isNoPageUniqueSelection = true;
		}
		if (this.$item.$selectorCard) {
			this.isNoPageUniqueSelection = true;
			this.selectorCard = _selectorCard.add(this);
		}
	},

	fillList: function(dataRecordSet, parentDataRecord, isDelta) {
		_applyPageSortWhereCapabilities(this, parentDataRecord);
		this.filler.fill(this, dataRecordSet, parentDataRecord, isDelta);
		this.treeDecorator && this.treeDecorator.onEndFillList();
		this.paging.draw();
		this.sorter.render(this);
		this.showBody(true);
		this.builder.list_onAfterFill && this.builder.list_onAfterFill();
	},
	emptyBody: function() {
		this.filler.emptyBody(this);
	},
	resizeItem: function() {
		if (!this.disposed && syra_dom.isVisible(this.domItem)) {
			this.builder.onResizeArray && this.builder.onResizeArray();
			this.designer && this.designer.resizeItem();
			if (this.selectorCard) {
				this.selectorCard.popupCard && this.selectorCard.popupCard.resize(true);
			}
			this.chartField && this.chartField.resizeItem && this.chartField.resizeItem();

		}
	},
	onSelectorClick: function(event, btn) {
		if (_selector.onSelectorClick(this, event)) {
			event.preventDefault();
			event.stopPropagation();
		}
		event.syraRetValue = true;
		if (this.$item && this.$item.$isNavigationList) { //test is mandatory as list can be disposed on selection
			this.isMaximized && this.maximizeBtn.link.click();
		}
	},
	onMouseMove: function(event) {
		this.builder.list_onMouseMove && this.builder.list_onMouseMove(event);
	},
	drawGraph: function(load) {
		_graph.draw(this, load);
	},
	addSlotResizer: function(target, event) {
		var resizeCard = target.syraOutCardResizer == this.id;
		var resizeGraph = target.syraGraphResizer == this.id;
		if (resizeCard || resizeGraph) {
			syra_dd.dropableItem = {
				list: this,
				resizeCard: resizeCard,
				resizeGraph: resizeGraph
			};
			syra_dd.start(this, SlotResizerDDAgent, this._core);
			event.syraRetValue = false;
			return true;
		}
	},
	saveListDesign: function() {
		if (this.designer) {
			this.designer.endArticleUpdate();
		} else {
			this.page.savePageDesign();
		}
	},
	endDraw: function() {
		!this.$item.$selectorCard && this.layoutSlot.appendChild(this.domItem);
		syra_fields.ensureLayoutMode(this);
		this.selectorCard && this.selectorCard.load();
		if (!this.$isQuickDesignerDisabled) {
			syra_menus.applyChange(this, {
				$links: {
					$design: {
						$title: _graph.isDefined(this) ? syra_local.flDesignGraph : syra_local.flDesign
					}
				}
			});
		}
		if (!this.discardFieldsGarbage) {
			this.garbage = new FieldsGarbage();
			this.garbage.load(this);
		}
	},
	defineDefaultCard: function() {
		var $items = [];
		var $binds = Object.keys(this.$fields);
		var $rows = [];
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			if (!this.$fields[$binds[ii]].$isExcluded) {
				$items.push({
					$bind: $binds[ii]
				});
			}
		}
		return {
			$layout: {
				$items: $items
			}
		};
	},
	onReloading: function($item) {
		if (this.$item.$format !== undefined && $item.$format != this.$item.$format) {
			syra_item.remove(this, true, true);
			return null;
		}
		this.applyDesignMeta($item, true);
		this.designer && this.designer.applyListDesignMetaData();
		this.fillList(this.dataset, this.articleParent.dataset[this.$item.$bind]);
		return this;
	},
	dispose: function() {
		this.page && this.page.resizableList.remove(this);
		syra_site.disposeObject(this.treeDecorator);
		this.chartField && this.chartField.dispose();
		this.selectorCard && this.selectorCard.dispose();
		syra_site.disposeObject(this.selector);
		this._autoInsertFields && this._autoInsertFields.dispose();
		this.garbage && this.garbage.dispose();
		ArrayField.prototype.dispose.call(this);
	}
});