"use strict";
var helpers = require('syracuse-core/lib/helpers');
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var ArrayField = require("syracuse-ui/lib/field/array/arrayField").ArrayField;

var _recordSelector = require('./selector/recordSelector');
var _preferencesHelper = require("./tools/preferencesHelper");
var _embeddedHelper = require('syracuse-ui/lib/field/helpers/embeddedHelper');
var _queryFilters = require("./tools/queryFilters");

var FieldsGarbage = require('syracuse-ui/lib/article/fieldsGarbage').FieldsGarbage;
var SelectorCardRecord = require("./selector/selectorCardRecord").SelectorCardRecord;
var TreeDecorator = require("./tools/treeDecorator").TreeDecorator;
var SlotResizerDDAgent = require("./tools/slotResizerDDAgent").SlotResizerDDAgent;
var GraphDecorator = require("./tools/graphDecorator").GraphDecorator;

var _gridBuilder = require("syracuse-ui/lib/field/array/gridBuilder").GridBuilder;
var _cardsBuilder = require("syracuse-ui/lib/field/array/cardBuilder").CardsBuilder;

function _applyPageSortWhereCapabilities(list, newData) {
	list.pagging.applyMetadata(newData);
	list.capabilityMaker.sorter.setOrderBy(list, newData.$orderBy);
	if (newData.$where !== undefined) {
		list.$where = newData.$where;
	}
}

function _applyFacetSetting(list) {
	list.fitWidth = list.page.isVignettePage || list.$item.$fitWidth;
	switch (list.articleParent.$facet) {
		case "$query":
			_queryFilters.addLinks(list);
			list.adjustToScrollPage = true;
			list.fitWidth = true;
			list.$addRefresh = true;
			list.$addMaximize = !list.page.vignetteField;
			break;
		case "$bulk":
			list.adjustToScrollPage = true;
			list.fitWidth = true;
			list.$addMaximize = !list.page.vignetteField;
			break;
		case "$search":
			break;
		case "$lookup":
			list.isLookUpList = true;
			list.$item.$selectMode = "row";
			list.$item.$isDockedHeight = true;
			list.$addRefresh = true;
			break;
		case "$select":
			list.isLookUpList = true;
			list.$item.$selectMode = "multi";
			list.$item.$isDockedHeight = true;
			list.$addRefresh = true;
			break;
		default:
			list.isServerStepPager = false;
			if (list.$addMaximize === undefined) {
				list.$addMaximize = true;
			}
			list.isClientFetch = list.isClientFetch !== false;
			if (list.$prototype.$treeview) {
				list.isClientFetch = false;
				list.isPagingDisabled = !list.$item.$isNavigationList;
				list.pagging.noPageSize = true;
				delete list.$item.$itemsPerPage;
			}
			break;
	}
	if (list.$item.$itemsPerPage && !list.isClientFetch) { // && list.page.$autoFetch !== false) {
		list.page.defaultItemsPerPage = list.$item.$itemsPerPage;
	}
}

function _hasGraph(list) {
	return !!(list.$prototype.$cube || list.$prototype.$decorator);
}

function _setBuilderClass($item) {
	$item.$format = $item.$format == "cards" ? $item.$format : "grid";
	return $item.$format == "cards" ? _cardsBuilder : _gridBuilder;
}

function _selectIncrementalRecord(list, charCode, event) {
	clearTimeout(list._searchTimer);
	list._searchTerm = (list._searchTerm || "") + charCode;
	list._searchTimer = setTimeout(function() {
		var focused = list.filler.getFocusRecord(list, true);
		if (focused) {
			var searcher = list.searchCapability && list.searchCapability.incrementalSearch(list, event, list._searchTerm);
			if (searcher) {
				var newFocused = list.records[searcher.$serverIndex];
				if (newFocused && newFocused != focused) {
					(focused = newFocused).setFocusRecord();
					focused.scrollToRecord(focused);
				}
			}
		}
		list._searchTerm = "";
	}, 100);
}

function MultiArrayField() {}

exports.MultiArrayField = helpers.defineClass(MultiArrayField, ArrayField, {
	loadBox: function(initData) {
		if (!this.$field.$builderClass) {
			this.$field.$builderClass = _setBuilderClass(this.$item);
		}
		ArrayField.prototype.loadBox.call(this, initData);
	},
	reloadLayout: function() {
		var $builderClass = _setBuilderClass(this.$item);
		this.builder && this.builder.dispose(true);
		this.builder = new $builderClass();
		this.builder.initialize(this);
		this.builder.endInitiallize();
		this.builder.list_onAfterDraw();
		var parentDataset = this.articleParent.dataset;
		this.setDataBind(parentDataset[this.$item.$bind], parentDataset, parentDataset.$properties && parentDataset.$properties[this.$item.$bind], this.$item.$bind);
	},
	loadSelector: function() {
		this.selector && this.selector.dispose();
		this.selector = new _recordSelector.RecordSelector();
		this.selector.load(this);
	},
	initializeList: function() {
		// Auto insert fields in authored list
		if (!this.discardFieldsGarbage) {
			this.page.insertNewItems.call(this, true, "field");
		}
		// check Filter Capability
		var hasFilterCapability = _embeddedHelper.checkListFilterCapabilities(this);
		if ((!hasFilterCapability && this.$item.$isQuickFilter) || (hasFilterCapability && this.$item.$isQuickFilter === undefined)) {
			this.$item.$isQuickFilter = hasFilterCapability;
		}

		if (this.$item.$alternateStyle === undefined) {
			this.$item.$alternateStyle = true;
		}
		_applyFacetSetting(this);

		if (this.$prototype.$treeview) {
			(this.treeDecorator = new TreeDecorator()).load(this);
		}
		if (_hasGraph(this)) {
			if (this.$item.$graphMode != undefined) {
				if (this.$item.$graphMode == "list") {
					this.$item.$graphPosition = this.$item.$graphPosition || "behind";
				} else {
					this.$item.$graphPosition = this.$item.$graphPosition || "front";
				}
				delete this.$item.$graphMode;
			}
			if (this.$item.$graphPosition == "tab") {
				this.$item.$graphPosition = "front";
			}
			if (!this.page.isVignettePage) {
				this.$isQuickDesignerDisabled = !! this.$item.$isQuickDesignerDisabled;
			}
		}
		if (this.$isQuickDesignerDisabled === undefined) {
			this.$isQuickDesignerDisabled = true;
		}

		this.ensureEditMode();

		if (this.page.$autoFetch) {
			var params = this.page.openerUrlSegments && this.page.openerUrlSegments.params;
			if (params) {
				if (params.where) {
					this.$prototype.$where = params.where;
				}
				this.$prototype.$filter = params.filter;
			}
		}
		_applyPageSortWhereCapabilities(this, this.$prototype);
		if (this.$item.$selectorCard) {
			this.selectorCardRecord = new SelectorCardRecord();
			this.selectorCardRecord.initialize(this);
		}
	},
	fillList: function(dataRecordSet, parentDataRecord, isDelta) {
		_applyPageSortWhereCapabilities(this, parentDataRecord);

		this.filler.fill(this, dataRecordSet, parentDataRecord, isDelta);

		var cardDecorator = this.builder && this.builder.cardDecorator;
		if (cardDecorator && cardDecorator.isOutCardMode) {
			this.selector.selectRecord(); //ensure selection
		}
		this.treeDecorator && this.treeDecorator.onEndFillList();
		this.pagging.draw();
		this.capabilityMaker.sorter.render(this);
		this.body.style.display = "";

		this.builder.list_onAfterFill && this.builder.list_onAfterFill();
	},
	emptyBody: function(addEmptySlot, onFetch) {
		if (this.builder.list_emptyBody) {
			this.builder.list_emptyBody(addEmptySlot, onFetch);
		} else {
			this.filler.emptyBody(this, addEmptySlot, onFetch);
		}
	},
	resizeArticle: function(resize) {
		if (!this.disposed) {
			var mustBeResized = resize || this.mustBeResized;
			if (mustBeResized && this.articleParent.isChildItemDisplay(this)) {
				this.builder.resizeScrollView && this.builder.resizeScrollView();
				if (this.records) {
					var record;
					for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
						record = this.records[ii];
						record.resizeArticle(resize);
						record.mustBeResized = false;
					}
					this.quickEdit && this.quickEdit.resize();
				}
				this.designer && this.designer.resizeArticle(resize);
				this.mustBeResized = false;
				this.selectorCardRecord && this.selectorCardRecord.resizezCard();
				this.graphDecorator && this.graphDecorator.onListResize();
			}
		}
	},
	onRowCardClick: function(event, btn) {
		this.builder.cardDecorator.onRowCardOpenerClick(btn);
	},
	onSearchClick: function(event, btn) {
		this.searchCapability.onClick(this, btn.syraValue, event);
	},
	onSortClick: function(event, btn) {
		this.capabilityMaker.sorter.onSortClick(this, btn.syraValue, event);
	},
	onSelectorClick: function(event, btn) {
		_recordSelector.onSelectorClick(this, event);
		event.syraRetValue = true;
		if (this.$item && this.$item.$isNavigationList) { //test is mandatory as list can be disposed on selection
			this.isMaximized && this.onMaximizeClick();
		}
	},
	onMouseMove: function(event) {
		this.builder.list_onMouseMove && this.builder.list_onMouseMove(event);
	},
	onPagerClick: function(event, btn) {
		this.pagging.onPageClick(event, btn);
	},
	onNotifyDataChange: function(field, value) {
		if (field.$item.$bind == "$itemsPerPage") {
			this.pagging.getItemsPerPage(value);
			if (this.page.isVignettePage) {
				this.$item.$itemsPerPage = value;
			}
			this.savePreferences(false, field.$item.$bind);
			this.filler.trigger(this, {
				startIndex: 1
			});
		}
		return false;
	},
	notifyActionChange: function(menuItem, target, value, notifyServer) {
		var record = target.isRecordArticle ? target : null;
		if (value.$create) {
			var dataRecords = this.ensureDataSet();
			this.filler.ensureClientDataset(this);
			var options = {
				isCreateAction: true
			};
			if (record) {
				options.$serverIndex = record.$serverIndex;
				options.$recordIndex = record.getRecordIndex();
			} else {
				if (this.dataset.length > 0) {
					options.$serverIndex = this.dataset[this.dataset.length - 1].$serverIndex + 1;
				} else {
					options.$serverIndex = 0;
				}
			}
			var newValue = {
				$uuid: helpers.uuid.generate()
			};
			if (menuItem.$item.$variantItemKey) {
				options.dataRecord = {};
				options.dataRecord[menuItem.$item.$variantItemKey] = newValue;
			} else {
				options.dataRecord = newValue;
			}
			if (record) {
				var found = this.filler.findDataRecord(this, record.$uuid);
				dataRecords.splice(found.dataRecordIndex, 0, options.dataRecord);
			} else {
				dataRecords.splice(options.$serverIndex, 0, options.dataRecord);
			}
			if (this.pagging.$startIndex !== undefined && this.clientDataset.length < this.pagging.$startIndex) {
				this.pagging.ensureClientRange();
			}
			if ((this.pagging.$startIndex + (this.pagging.$itemsPerPage - 1)) > options.$serverIndex) {
				var newRecord = this.filler.addRecord(this, options);
			}
			//sendbag begin
			var sendBag = this.page.ensureSendBag(this);
			var saved = {
				$uuid: newValue.$uuid
			};
			if (sendBag.dataRecords.length > 0) {
				sendBag._ensureFullDataSet(this);
				if (!sendBag._findDataRecord(saved.$uuid)) {
					sendBag.dataRecords.splice(options.$serverIndex, 0, saved);
				}
			} else {
				saved.$index = options.$serverIndex;
				sendBag.dataRecords.push(saved);
			}
			//sendbag end
			if (this.isClientFetch) {
				options.dataRecord.$serverIndex = options.$serverIndex;
				if (this.clientDataset != this.dataset) {
					this.clientDataset.push(options.dataRecord);
				}
				if (this.clientFetchOptions) {
					this.filler.applyFetchOptions(this, this.clientFetchOptions);
				}
				this.pagging.setPage(options.$serverIndex);
			} else {
				this.filler.validateDisplay(this);
			}
			this.page.notifyDataChange(this, sendBag.dataRecords);
		} else {
			var sendBag = this.page.ensureSendBag(this);
			var dataRecords = this.ensureDataSet();
			this.filler.ensureClientDataset(this);
			if (record) {
				var clientDataRecordIndex = this.filler.getClientDataSetIndex(this, record.$serverIndex);
				this.records.splice(this.records.indexOf(record), 1);
				var found = this.filler.findDataRecord(this, record.$uuid);
				if (found) {
					dataRecords.splice(found.dataRecordIndex, 1);
					record.$index = found.dataRecordIndex;
				}
				var found = sendBag.ensureRecord(record);
				if (sendBag.dataRecords.length == 1) {
					found.dataRecord.$index = record.$serverIndex;
					found.dataRecord.$isDeleted = true;
				} else {
					sendBag.dataRecords.splice(found.dataRecordIndex, 1);
				}
				delete record.$index;
				if (clientDataRecordIndex >= 0 && this.clientDataset != this.dataset) {
					this.clientDataset.splice(clientDataRecordIndex, 1);
				}
				delete this.recordsMap[record.$uuid];
				this.filler.removeRecord(record, true);
			} else {
				this.clientDataset.splice(0, dataRecords.length);
				dataRecords.splice(0, dataRecords.length);
				sendBag.dataRecords = [];
				this.filler.removeRecords(this);
			}
			if (this.records.length == 0) {
				this.emptyBody(true);
			} else {
				if (clientDataRecordIndex >= 0 && this.isClientFetch && this.clientDataset.length) {
					this.pagging.setPage(this.clientDataset[Math.min(clientDataRecordIndex, this.clientDataset.length - 1)].$serverIndex);
				} else {
					this.filler.validateDisplay(this);
				}
			}
			this.page.notifyDataChange(this, sendBag.dataRecords);
		}
	},
	ensureGrapDecorator: function() {
		if (_hasGraph(this)) {
			if (!this.graphDecorator) {
				this.graphDecorator = new GraphDecorator();
				this.graphDecorator.list = this;
			}
			this.$item.$graphPosition = this.$item.$graphPosition || "bottom";
		}
	},
	appendCardGraphSlots: function() {
		var cardDecorator = this.builder && this.builder.cardDecorator;
		var $cardItem = this.$item.$format != "cards" && this.$item.$cardItem;

		!$cardItem && cardDecorator && cardDecorator.removeOutCardSlot();

		if (!this.$item.$graphPosition && this.graphDecorator) {
			this.graphDecorator.removeSlot();
		}
		if (!$cardItem && !this.$item.$graphPosition) {
			if (this.tableRow) {
				syra_site.dom.moveChildNodes(this.tableRow, this._core);
				this._core.removeChild(this.tableRow);
				delete this.tableRow;
			}
		}
		if ($cardItem || this.$item.$graphPosition) {
			this.fitWidth = true;
			var hasRow = $cardItem && ($cardItem.$position == "left" || $cardItem.$position == "right");
			if (!hasRow) {
				hasRow = this.$item.$graphPosition && (this.$item.$graphPosition == "left" || this.$item.$graphPosition == "right");
			}
			if (hasRow) {
				if (!this.tableRow) {
					this.tableRow = document.createElement("div");
					this.tableRow.className = "s-grid-table-row";
					syra_site.dom.moveChildNodes(this._core, this.tableRow);
					this._core.appendChild(this.tableRow);
				}
			} else {
				if (this.tableRow) {
					syra_site.dom.moveChildNodes(this.tableRow, this._core);
					this._core.removeChild(this.tableRow);
					delete this.tableRow;
				}
			}
			cardDecorator && $cardItem && cardDecorator.appendOutCardSlot();

			if (this.$item.$graphPosition && this.graphDecorator) {
				this.graphDecorator.appendSlot();
			}
		}
		if (this.builder) {
			if (this.tableRow) {
				this.builder.tableSlot.className = "s-grid-slot-cell";
			} else {
				this.builder.tableSlot.style.width = "";
				this.builder.tableSlot.className = "s-grid-slot";
			}
		}
	},
	addSlotResizer: function(target, event) {
		var resizeCard = target.syraOutCardResizer == this.id;
		var resizeGraph = target.syraGraphResizer == this.id;
		if (resizeCard || resizeGraph) {
			syra_dd.dropableItem = {
				list: this,
				resizeCard: resizeCard,
				resizeGraph: resizeGraph
			};
			syra_dd.start(this, SlotResizerDDAgent, this._core);
			event.syraRetValue = false;
			return true;
		}
	},
	savePreferences: function(resize, $property) {
		this.saveListDesign(resize, _preferencesHelper.save(this, $property));
	},
	saveListDesign: function(resize, $userPreferences) {
		if ($userPreferences) {
			this.page.userPreferences && this.page.userPreferences.saveForField(this.$item.$bind, $userPreferences);
		}
		if (this.designer) {
			this.designer.endArticleUpdate();
		} else {
			resize && this.resizeArticle();
			this.page.savePageDesign( !! $userPreferences);
		}
	},
	endDrawBox: function() {
		!this.$item.$selectorCard && this.layoutSlot.appendChild(this.domItem);
		this.ensureLayoutMode();
		this.selectorCardRecord && this.selectorCardRecord.loadBox();
		if (!this.$isQuickDesignerDisabled) {
			syra_menus.setMenus(this, {
				$links: {
					$design: {
						$title: _hasGraph(this) ? syra_local.flDesignGraph : syra_local.flDesign
					}
				}
			});
		}
		if (!this.discardFieldsGarbage) {
			this.garbage = new FieldsGarbage();
			this.garbage.load(this);
		}
	},
	defineDefaultCard: function() {
		var $items = [];
		var $binds = Object.keys(this.$fields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			if (!this.$fields[$binds[ii]].$isExcluded) {
				$items.push({
					$bind: $binds[ii]
				});
			}
		}
		return {
			$layout: {
				$items: [{
					$category: "section",
					$layout: {
						$items: $items
					}
				}]
			}
		};
	},
	onReloading: function($item) {
		if (this.$item.$format !== undefined && $item.$format != this.$item.$format) {
			this.articleParent.removeItem(this, true, true);
			return null;
		}
		this.applyDesignMetaData($item, true);
		this.designer && this.designer.applyListDesignMetaData();
		this.fillList(this.dataset, this.articleParent.dataset[this.$item.$bind]);
		return this;
	},
	dispose: function() {
		this.treeDecorator && this.treeDecorator.dispose();
		this.graphDecorator && this.graphDecorator.dispose();
		this.selectorCardRecord && this.selectorCardRecord.dispose();
		this.selector && this.selector.dispose && this.selector.dispose();
		this._autoInsertFields && this._autoInsertFields.dispose();
		this.garbage && this.garbage.dispose();
		ArrayField.prototype.dispose.call(this);
	},

	//For Convergence
	selectRecords: function(start, end) {
		var record;
		if (start === undefined) {
			start = -1;
		}
		if (end === undefined) {
			end = start;
		}
		for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
			if (record = this.recordsMap[this.dataset[ii].$uuid]) {
				var isSelected = record.$serverIndex >= start && record.$serverIndex <= end;
				if (isSelected != this.dataset[ii].$isSelected) {
					//record.select(false);
				}
			} else {
				this.dataset[ii].$isSelected = this.dataset[ii].$serverIndex >= start && this.dataset[ii].$serverIndex <= end;
			}
		}
	},
	getSelectedRecordIndexes: function() {
		var result = [],
			ir = -1;
		for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
			var dataRecord = this.dataset[ii];
			if (dataRecord.$isSelected) {
				if (!result[ir] || result[ir].start + result[ir].count != dataRecord.$serverIndex) {
					result.push({
						start: dataRecord.$serverIndex,
						count: 1
					});
					ir++;
				} else {
					result[ir].count++;
				}
			}
		}
		return result;
	},
	validateKeyPress: function(charCode, event){
		var winName = this.page.$fusionPageMeta && this.page.$fusionPageMeta.winModel ? this.page.$fusionPageMeta.winModel.getWinName() : null;
		if (winName && winName === sapUtil.specialWindow.selbox.id) {
			_selectIncrementalRecord(this, charCode, event);
			event.preventDefault();
		}
		return true;
	}
});