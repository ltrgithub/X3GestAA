"use strict";
var helpers = require('@sage/syracuse-core').helpers;

function _applyMetaDataToRecord(record, metaData) {
	var metaDataBackUp = metaData;
	var actionLinks;
	if (metaData.$links || metaData.$actions) {
		actionLinks = {
			$links: metaData.$links,
			$actions: metaData.$actions
		};
		syra_menus.applyChange(record, metaData);
		delete metaData.$links;
		delete metaData.$actions;
	}
	record.singleField.applyMetaData(metaData);
	if (metaData.$diagnoses && record.singleField.diagsSlot) {
		record.singleField.diagsSlot.className += (record.list.$skin + "-item-diagnoses");
		record.domItem.appendChild(record.singleField.diagsSlot);
	}
	metaData = metaDataBackUp;
	if (actionLinks) {
		metaData.$links = actionLinks.$links;
		metaData.$actions = actionLinks.$actions;
	}
}

function SingleArrayBuilder() {}

exports.SingleArrayBuilder = helpers.defineClass(SingleArrayBuilder, null, {
	initialize: function(list) {
		this.list = list;
	},
	endInitiallize: function() {},
	list_onAfterDraw: function() {
		this.list.endDraw();
	},
	record_reorder: function(record, target, isAfter) {
		target.domItem.parentNode.insertBefore(record.domItem, isAfter ? target.domItem.nextSibling : target.domItem);
	},
	record_draw: function(record) {
		record.$useDeletePicker = true;
		record.isSingleRecord = true;
		record.domItem = syra_dom.div(record.$skin = this.list.$skin + "-item");
		record.domItem.syrainout = record.domItem.syraItem = record.id;

		record.reorderBtnParent = record.recordValue = syra_dom.div(this.list.$skin + "-item-value", record.domItem);

		var dataSlot = syra_dom.div(this.list.$skin + "-item-data", record.recordValue);

		this.list.$capability.reorder && this.list.addReorder(record);

		record.menusSlot = document.createElement("div");
		record.menusSlot.className = this.list.$skin + "-actions-cell";

		if (record.$isEditMode) {
			record.domItem.className += "-edit";
			record.recordValue.className += "-edit";
			this.list.applyCapabilitiesToRecord(record);
			// title slot for reference field
			if (this.list.$field.$item.$type == 'application/x-reference') {
				record.titleSlot = document.createElement("div");
				record.titleSlot.className = this.list.$skin + "-item-title";
				record.domItem.appendChild(record.titleSlot);
			}
		}

		record.singleField = record.page.addItem(dataSlot, {
			$isTitleRowHidden: true,
			$bind: "$singleField",
			$isEditMode: record.$isEditMode,
			$inplace: true,
			$isDiagnoseInline: true
		}, record);
		if (record.$isEditMode && record.singleField.setFieldWidth) {
			record.singleField.setFieldWidth();
		}

		if (record.insertBeforeRecord) {
			record.insertBeforeRecord.domItem.parentNode.insertBefore(record.domItem, record.insertBeforeRecord.domItem);
			delete record.insertBeforeRecord;
		} else {
			this.list.body.appendChild(record.domItem);
		}
	},
	record_onBeforeApplyChange: function(record, metaData, serverResponse) {
		if (metaData && record.singleField && record.singleField.$field && record.singleField.$field.$type == 'application/x-reference') {
			if (metaData.$singleField && metaData.$singleField.$diagnoses) {
				_applyMetaDataToRecord(record, metaData.$singleField);
			}
		}
	},
	record_onAfterApplyChange: function(record, metaData) {
		var singleField = record.singleField.variantItem || record.singleField;
		if (record.menusSlot && !record.menusSlot.parentNode) {
			singleField._dataValue && singleField._dataValue.appendChild(record.menusSlot);
		}
		record.$isReadOnly = singleField.$isReadOnly;
		record.$isDisabled = singleField.$isDisabled;
	},
	record_highlightOnEnter: function(record, onEnter, event) {
		var variantItem = record.singleField && record.singleField.variantItem;
		if (variantItem && variantItem.onItemInOut) {
			variantItem.onItemInOut(onEnter, record);
		}
	}
});