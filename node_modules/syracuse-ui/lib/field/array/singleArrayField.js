"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ArrayField = require("syracuse-ui/lib/field/array/arrayField").ArrayField;
var SingleArrayBuilder = require("syracuse-ui/lib/field/array/singleArrayBuilder").SingleArrayBuilder;

function validatetemp(list, newValue, errors) {
	if (!list.$prototype.$isMultiValue && (list.$prototype.$item.$type != "application/x-boolean")) {
		var values = [];
		for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
			//values = 
		}
		var newValue = field.getDataValue();
		for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
			var record = list.records[ii];
			if (record != list) {
				var valueComp = record.singleField.getDataValue();
				// in case of reference field
				if (record.singleField.$reference && record.singleField.$field.$type == "application/x-reference") {
					if (newValue[record.singleField.$reference.$value.$prop] == valueComp[record.singleField.$reference.$value.$prop]) {
						errors.push(syra_local.sglRecordUniqueValue);
					}
				} else {
					if (valueComp == newValue) {
						errors.push(syra_local.sglRecordUniqueValue);
					}
				}
			}
		}
	}
}

function _appendMenusBar(list) {
	if (list.$isMenuBarAtTop) {
		list.body.parentNode.insertBefore(list.topbar, list.body);
	} else {
		list.body.appendChild(list.topbar);
	}
}

function SingleArrayField() {}

exports.SingleArrayField = helpers.defineClass(SingleArrayField, ArrayField, {
	loadBox: function(initData) {
		if (!this.$field.$builderClass) {
			this.$field.$builderClass = SingleArrayBuilder;
		}
		ArrayField.prototype.loadBox.call(this, initData);
	},
	initializeList: function() {
		this.isPagingDisabled = true;
		this.isClientPagingPerPageDisable = true;
		this.isSingList = true;
		this.isServerStepPager = false;
		this.isClientFetch = this.isClientFetch !== false;
		this.ensureEditMode();
	},
	emptyBody: function(addEmptySlot, onFetch) {
		if (this.topbar.parentNode) {
			this.topbar.parentNode.removeChild(this.topbar);
		}
		this.filler.emptyBody(this, addEmptySlot, onFetch);
		_appendMenusBar(this);
	},
	fillList: function(dataRecordSet, parentDataRecord, isDelta) {
		var focusRecordIndex = -1;
		if (this.page.focusField && this.page.focusField.articleParent &&
			this.page.focusField.articleParent.list == this) {
			focusRecordIndex = this.page.focusField.articleParent.getRecordIndex();
		}
		this.pagging.applyMetadata(parentDataRecord);
		if (this.topbar.parentNode) {
			this.topbar.parentNode.removeChild(this.topbar);
		}

		this.filler.fill(this, dataRecordSet, parentDataRecord, isDelta);
		_appendMenusBar(this);
		this.body.style.display = "";
		if (focusRecordIndex >= 0) {
			if (this.records.length) {
				this.records[Math.min(focusRecordIndex, this.records.length - 1)].boundFields.$singleField[0].focus();
			}
		}
	},

	onNotifyDataChange: function(field, value) {
		return true;
	},
	notifyActionChange: function(menuItem, target, value, notifyServer) {
		var sendBag = this.page.ensureSendBag(this);
		var dataRecords = this.ensureDataSet();
		var record = target.isRecordArticle ? target : null;
		if (value.$create) {
			var options = {};
			if (record) {
				options.$serverIndex = record.$serverIndex;
				options.$recordIndex = record.getRecordIndex();
			} else {
				if (this.records.length > 0) {
					options.$serverIndex = this.records[this.records.length - 1].$serverIndex + 1;
				} else {
					options.$serverIndex = 0;
				}
			}
			var targetType = this.$prototype.$item.$type;
			if (menuItem.$item.$variantItemKey) {
				targetType = this.$prototype.$item.$variants[menuItem.$item.$variantItemKey].$type;
			}
			var newValue = (targetType == "application/x-object") ? {
				$uuid: helpers.uuid.generate()
			} : null;
			if (menuItem.$item.$variantItemKey) {
				options.dataRecord = {};
				options.dataRecord[menuItem.$item.$variantItemKey] = newValue;
			} else {
				options.dataRecord = newValue;
			}
			(sendBag.dataRecords = dataRecords).splice(options.$recordIndex || this.records.length, 0, options.dataRecord);
			var record = this.filler.addRecord(this, options);
			this.filler.validateDisplay(this);
			record.scrollToRecord();
		} else {
			if (record) {
				var recordIndex = record.getRecordIndex();
				this.records.splice(recordIndex, 1);
				dataRecords.splice(recordIndex, 1);
				sendBag.dataRecords = dataRecords;
				delete this.recordsMap[record.$uuid];
				this.filler.removeRecord(record, true);
			} else {
				dataRecords.splice(0, dataRecords.length);
				sendBag.dataRecords = [];
				this.filler.removeRecords(this);
			}
			this.filler.validateDisplay(this);

			if (this.records.length == 0) {
				this.emptyBody(true);
			}
			this.page.notifyDataChange(this, sendBag.dataRecords);
		}
		_appendMenusBar(this);
	},
	endDrawBox: function() {
		syra_dd.addToColResizers(this, true);
		this.layoutSlot.appendChild(this.domItem);
		this.$skin = this.$item.$skin || "s-single";
		this.body = document.createElement("div");
		this.body.className = this.$skin + "-body";
		this.topbar.className = this.$skin + "-menus";
		this._core.appendChild(this.body);
		this.topbar.style.display = "";
		this.applyDesignMetaData(this.$item, false);
		this.setState(this.$field);
		this.capabilityMaker.apply(this);
		this.ensureLayoutMode();
	},
	dispose: function() {
		syra_dd.addToColResizers(this, false);
		ArrayField.prototype.dispose.call(this);
	}

});