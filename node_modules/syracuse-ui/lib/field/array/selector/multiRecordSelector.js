"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordSelector = require('./recordSelector').RecordSelector;

function MultiRecordSelector() {}

exports.MultiRecordSelector = helpers.defineClass(MultiRecordSelector, RecordSelector, {
	load: function(list) {
		this.isMulti = true;
		this.useColumnSelector = !list.$item.$selectByRowIndex && !list.$prototype.$treeview;
		RecordSelector.prototype.load.call(this, list);
	},
	getWidth: function() {
		return 25;
	},
	appendToTitle: function(slot) {
		slot.className += " s-list-selector-slot";
		var input = document.createElement("input");
		input.setAttribute("type", "checkbox");
		input.className = "s-list-selector-all";
		slot.appendChild(input);
	},
	appendToRecord: function(slot) {
		slot.className += " s-list-selector-slot";
		var input = document.createElement("input");
		input.setAttribute("type", "checkbox");
		input.className = "s-list-selector";
		return slot.appendChild(input);
	},
	onclick: function(options) {
		if (this.list.$item.$selectByRowIndex) {
			options.uuidTarget = this.list.findRecordUiid(options.$$selector);
			options.isSelected = !this.records[options.uuidTarget];
		} else {
			options.isSelected = options.$$selector.is(":checked");
			options.uuidTarget = options.$$selector.hasClass("s-list-selector-all") ? null : this.list.findRecordUiid(options.$$selector);
		}
	},
	onSelect: function(options) {
		if (options.$$selector && options.$$selector.hasClass("s-list-selector-all")) {
			this.records = {};
			var uuids = Object.keys(this.list.recordsMap);
			for (var ii = 0, jj = uuids.length; ii < jj; ii++) {
				if (!options.unselectable || !options.unselectable(this.list, {
					"uuid": uuids[ii]
				})) {
					this.select(uuids[ii], options.isSelected);
				}
			}
		} else {
			this.select(options.uuidTarget, options.isSelected);
		}
	}
});