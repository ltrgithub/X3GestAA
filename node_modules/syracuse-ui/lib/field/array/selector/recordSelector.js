"use strict";
var helpers = require('syracuse-core/lib/helpers');

function RecordSelector() {}

exports.RecordSelector = helpers.defineClass(RecordSelector, null, {
	load: function(list) {
		this.list = list;
		this.records = {};
	},
	clear: function() {
		this.records = {};
		delete this.uuid;
	},
	select: function(uuid, selected, selectFirstByDefault) {
		if (uuid === undefined) {
			if (Object.keys(this.records).length == 0) {
				if (this.list.records.length > 0) {
					this.select(this.list.records[0].$uuid, true);
				}
			}
		} else {
			if (!this.isMulti && selected) {
				if (this.uuid !== undefined && uuid != this.uuid) {
					this.select(this.uuid, false);
				}
			}
			var record = this.list.recordsMap[uuid];
			if (record) {
				this.list.highlightSelection(record, selected);
				var dataset = record.ensureDataSet();
			}
			if (selected && dataset) {
				this.uuid = uuid;
				this.records[uuid] = record;
				dataset.$isSelected = true;
			} else {
				delete this.uuid;
				delete this.records[uuid];
				if (dataset) {
					delete dataset.$isSelected;
				}
			}
			if (selectFirstByDefault && !record) {
				this.select(undefined, true);
				return;
			}
			if (this.list && this.list.selectorCardRecord) {
				this.list.selectorCardRecord.onSelect(uuid, selected);
			}
			if (this.list && this.list.treeDecorator) {
				this.list.treeDecorator.onNodeSelected(record, selected);
			}

		}
	},
	onSelectRecords: function(event) {
		var self = this;
		var options = {
			field: self.list,
			event: event,
			selectorTarget: event.target,
			doEvent: function(unselectable) {
				if (unselectable) {
					options.unselectable = unselectable;
				}
				self.onSelect(options);
				if (self.list.articleParent.onSelectRecord) {
					self.list.articleParent.onSelectRecord(self.records);
				} else {
					if (self.list.page.onSelectRecord) {
						self.list.page.onSelectRecord(self.records);
					}
				}
				if (self.list && self.list.selectorCardRecord) {
					self.list.selectorCardRecord.onSelectRecord(self.records);
				}
			}
		};
		self.onclick(options);
		self.list.page.externalAdapter.onSelectRecordEvent(options);
	},
	onSelect: function(options) {
		this.select(options.uuidTarget, options.isSelected);
	},
	dispose: function() {
		this.list = this.records = null;
	}
});