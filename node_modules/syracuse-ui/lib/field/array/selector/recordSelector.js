"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _types = {
	none: {
		load: function(selector) {

		}
	},
	multi: {
		load: function(selector) {
			selector.isMulti = true;
			if (selector.list.$item.$selectByRow) {
				selector.isRowMode = true;
			} else {
				selector.useColumnSelector = !selector.list.$item.$selectByRowIndex && !selector.list.$prototype.$treeview;
			}
		},
		appendToRecord: function(record, selector, slot) {
			selector.addCheckBox(record, slot, true);
		}
	},
	single: {
		load: function(selector) {
			selector.useColumnSelector = !selector.list.$item.$selectByRowIndex && !selector.list.$prototype.$treeview;
		},
		appendToRecord: function(record, selector, slot) {
			selector.addCheckBox(record, slot, false);
		}
	},
	button: {
		load: function(selector) {
			selector.useColumnSelector = true;
			selector.text = syra_local.flSelect || "Select";
		},
		appendToRecord: function(record, selector, slot) {
			slot.className += " s-list-selector-btn-slot";
			slot.appendChild(syra_menus.addTextButton(selector.text, "s-list-selector-btn", "onSelectorClick"));
		}
	},
	row: {
		load: function(selector) {
			selector.isRowMode = true;
		}
	}
};

function _onMultiSelect(selector, targetRecord, unselectable) {
	var records = selector.list.records;
	var range = _getRange(selector, targetRecord);
	if (range) {
		if (range.targetIndex <= range.firstIndex) {
			for (var ii = range.targetIndex; ii < range.firstIndex; ii++) {
				selector.selectRecord(records[ii].$uuid, true);
			}
			for (ii = range.firstIndex + 1; ii <= range.lastIndex; ii++) {
				selector.selectRecord(records[ii].$uuid, false);
			}
		} else {
			for (var ii = range.firstIndex; ii <= range.targetIndex; ii++) {
				!records[ii].$isSelected && selector.selectRecord(records[ii].$uuid, true);
			}
			for (ii; ii <= range.lastIndex; ii++) {
				selector.selectRecord(records[ii].$uuid, false);
			}
		}
		if (targetRecord.checkBox && !targetRecord.checkBox.input.checked) {
			syra_fields.checkbox.setValue(targetRecord, true);
		}
	}
}



function _onSelectAll(selector, isSelected, unselectable) {
	selector.records = {};
	var records = selector.list.records;
	for (var ii = 0, jj = records.length; ii < jj; ii++) {
		var $uuid = records[ii].$uuid;
		if (!(unselectable &&
			unselectable(selector.list, {
				"uuid": $uuid
			}))) {
			selector.selectRecord($uuid, isSelected);
		}
	}
}

function _getRange(selector, targetRecord) {
	var records = selector.list.records;
	var sels = selector.getSelectedList();
	if (sels.length) {
		return {
			firstIndex: records.indexOf(sels[0]),
			lastIndex: records.indexOf(sels[sels.length - 1]),
			targetIndex: records.indexOf(targetRecord)
		};
	}
	return null;
}

function _ensureContiguousSelection(selector, targetRecord) {
	var range = _getRange(selector, targetRecord);
	if (range) {
		var records = selector.list.records;
		if (range.targetIndex < (range.firstIndex - 1) || range.targetIndex > (range.lastIndex + 1)) {
			//out of range clear all
			for (var ii = range.firstIndex; ii <= range.lastIndex; ii++) {
				selector.selectRecord(records[ii].$uuid, false);
			}
		} else {
			if ((range.targetIndex > range.firstIndex) || (range.targetIndex < range.lastIndex)) {
				for (var ii = range.targetIndex + 1; ii <= range.lastIndex; ii++) {
					selector.selectRecord(records[ii].$uuid, false);
				}
			}
		}
	}
}

function _onSelectOn(selector, targetRecord, isSelected) {
	if (selector.isMulti && selector.$useContiguousSelection) {
		//_ensureContiguousSelection(selector, targetRecord);
		var range = _getRange(selector, targetRecord);
		if (range) {
			var records = selector.list.records;
			if (range.targetIndex < range.firstIndex || range.targetIndex > range.lastIndex) {
				//out of range clear all
				for (var ii = range.firstIndex; ii <= range.lastIndex; ii++) {
					selector.selectRecord(records[ii].$uuid, false);
				}
			} else {
				if ((range.targetIndex > range.firstIndex) || (range.targetIndex < range.lastIndex)) {
					for (var ii = range.targetIndex + 1; ii <= range.lastIndex; ii++) {
						selector.selectRecord(records[ii].$uuid, false);
					}
				}
			}
		}
	}
	selector.selectRecord(targetRecord.$uuid, isSelected !== false);
	if (selector.list.$item.$executeUrl && isSelected) {
		var uuids = Object.keys(selector.records);
		var $url = uuids && uuids.length && selector.records[uuids[0]].dataset.$url;
		if ($url) {
			syra_controller.executeMenu({
				$url: $url
			}, selector.records[uuids[0]]);
		}
	}
}

exports.onSelectorClick = function(list, event) {
	var selector = list.selector;
	var record = list.findRecord(event.target);
	var host = record || list;
	var checkBox = host.checkBox;
	checkBox = checkBox && checkBox.input;
	if (!checkBox || checkBox == event.target) {
		var uuidTarget = record && record.$uuid;
		var isSelected = (checkBox || event.target).checked !== false;
		if (list.$item.$selectByRowIndex || list.$item.$selectByRow) {
			isSelected = selector.isMulti ? !selector.records[uuidTarget] : true; //byrowIndex => single always true else toggle
		}
		checkBox && syra_fields.checkbox.setValue(host, isSelected);
		list.page.externalAdapter.onSelectRecordEvent({
			field: list,
			event: event,
			uuidTarget: uuidTarget,
			isSelected: isSelected,
			doEvent: function(unselectable) {
				if (!event.shiftKey && !selector.isMulti) {
					var sels = selector.getSelectedList();
					for (var ii = 0, jj = sels.length; ii < jj; ii++) {
						if (sels[ii] != record) {
							selector.selectRecord(sels[ii].$uuid, false);
						}
					}
				} else {
					document.getSelection().removeAllRanges();
				}
				if (!record) {
					_onSelectAll(selector, isSelected, unselectable);
				} else {
					if (event.shiftKey) {
						_onMultiSelect(selector, record, unselectable);
					} else {
						_onSelectOn(selector, record, isSelected);
					}
				}
				if (list.articleParent.onSelectRecord) {
					list.articleParent.onSelectRecord(selector.records, record, isSelected);
				} else {
					list.page.onSelectRecord && list.page.onSelectRecord(selector.records, record, isSelected);
				}
				list.selectorCardRecord && list.selectorCardRecord.onSelectRecord(selector.records);
			}
		});
	}
};


function RecordSelector() {}

exports.RecordSelector = helpers.defineClass(RecordSelector, null, {
	load: function(list) {
		this.type = _types[list.$item.$selectMode || "none"];
		this.list = list;
		this.$useContiguousSelection = this.list.$field.$useContiguousSelection || this.list.$item.$useContiguousSelection;
		this.records = {};
		this.type.load(this);
	},
	onItemInOut: function(host, on, event) {
		if (host.checkBox && event.target == host.checkBox.icon) {
			syra_site.dom.toggleClass(host.checkBox.icon, "s-enter", on);
		}
	},
	onFieldInputEvent: function(host, event) {
		switch (event.type) {
			case "focusin":
			case "focusout":
				var on = event.type == "focusin";
				if (host.checkBox && event.target == host.checkBox.input) {
					syra_site.dom.toggleClass(host.checkBox.icon, "s-focus", on);
				}
				break;
		}
	},
	addCheckBox: function(record, slot, isCheck) {
		var host = record || this.list;
		syra_fields.checkbox.render(host, host.id + "-recordSelector", "", !isCheck);
		host.checkBox.slot.className += " s-list-check-selector";
		slot.className += " s-list-selector-slot";
		host.checkBox.icon.syrainout = host.id;
		host.checkBox.slot.syraOnClick = "onSelectorClick";
		host.checkBox.input.syraIsSelector = true;
		host.checkBox.input.syraItem = host.checkBox.input.syraOnInput = host.id;
		slot.appendChild(host.checkBox.slot);
	},
	getSelectedList: function() {
		var sels = [];
		var records = this.list.records;
		for (var ii = 0, jj = records.length; ii < jj; ii++) {
			records[ii].$isSelected && sels.push(records[ii]);
		}
		return sels;
	},
	appendToRecord: function(record, slot) {
		this.type.appendToRecord(record, this, slot);
	},

	clear: function() {
		this.records = {};
		delete this.uuid;
	},
	unSelectAll: function() {
		var records = this.list.records;
		for (var ii = 0, jj = records.length; ii < jj; ii++) {
			if (records[ii].$isSelected) {
				this.selectRecord(records[ii].$uuid, false);
			}
		}
	},
	selectRecord: function(uuid, selected, selectFirstByDefault) {
		if (uuid === undefined) {
			if (Object.keys(this.records).length == 0) {
				if (this.list.records.length > 0) {
					this.selectRecord(this.list.records[0].$uuid, true);
				}
			}
		} else {
			if (!this.isMulti && selected) {
				if (this.uuid !== undefined && uuid != this.uuid) {
					this.selectRecord(this.uuid, false);
				}
			}
			var record = this.list.recordsMap[uuid];
			var dataset;
			if (record) {
				record.showRecordSelection(selected);
				dataset = record.ensureDataSet();
				record.$isSelected = selected;
			}
			if (selected && dataset) {
				this.uuid = uuid;
				this.records[uuid] = record;
				dataset.$isSelected = true;
			} else {
				delete this.uuid;
				delete this.records[uuid];
				if (dataset) {
					delete dataset.$isSelected;
				}
			}
			if (selectFirstByDefault && !record) {
				this.selectRecord(undefined, true);
				return;
			}
			if (this.list) {
				var page = this.list.page;
				if (selected && page && !page.isNavigationPage && page.lastSelectedList != this.list) {
					if (!this.list.$field.$isFusionNavigationList) {
						if (page.lastSelectedList && page.lastSelectedList.selector) {
							page.lastSelectedList.selector.unSelectAll();
						}
						this.list.page.lastSelectedList = this.list;
					}
				}
				this.list.selectorCardRecord && this.list.selectorCardRecord.onSelect(uuid, selected);
				this.list.treeDecorator && this.list.treeDecorator.onNodeSelected(record, selected);
			}
		}
	},
	onRecordBeforeApplyChange: function(record, $isSelected) {
		if (this.list) {
			if (record.$syraLoaded) {
				_onSelectOn(this, record, $isSelected);
			} else {
				this.selectRecord(record.$uuid, $isSelected);
			}
		}
	},
	dispose: function() {
		this.list = this.records = null;
	}
});