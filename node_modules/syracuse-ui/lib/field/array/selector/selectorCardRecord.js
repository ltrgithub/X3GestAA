"use strict";
var helpers = require('syracuse-core/lib/helpers');

function SelectorCardRecord() {}

exports.SelectorCardRecord = helpers.defineClass(SelectorCardRecord, null, {
	dispose: function() {
		this.popupCard && this.popupCard.dispose();
		this._popupSlot && syra_dom.removeChild(this._popupSlot);
		syra_article.dispose(this);
	},
	applyChange: function(newData) {
		syra_article.applyChange(this, newData);
	},
	initialize: function(list) {
		this.list = list;
		this.id = this.list.id + "-record-selector";
		syra_item.register(this);
		this.list.$item.$isMenuRecordHidden = true;
		var $selectorCard = this.list.$item.$selectorCard;
		if (this.list.$item.$isTitleRowHidden === undefined) {
			this.list.$item.$isTitleRowHidden = ($selectorCard.$layout && $selectorCard.$layout.$items && $selectorCard.$layout.$items.length > 0);
		}
		this.isRecordArticle = true;
		this.$defaultSkinSection = this.$defaultSkinBlock = "s-h3";
		this.arrayLevel = "record";
		this.$facet = "details";
		this.list.$isEditMode = this.$isEditMode = false;
	},
	loadBox: function() {
		this.$prototype = helpers.object.clone(this.list.$prototype.$item, true);
		this.$item = helpers.object.clone(this.list.$item.$selectorCard, true);
		if (!this.$item.$layout) {
			this.$item.$layout = {
				$items: this.list.$item.$layout.$items
			};
		}
		var $binds = Object.keys(this.$prototype.$properties);
		var $hiddenFields = {};
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			if ($binds[ii] != this.$item.$selectorField) {
				$hiddenFields[$binds[ii]] = {
					$isHidden: true
				};
			}
		}
		this.list.applyMetaData({
			$item: {
				$properties: $hiddenFields
			}
		});
		this._appendSelectorField();
		syra_item.initialize(this.list.page, this, this.$item, this.list);
		syra_article.beforeDrawBox(this);
		this.domItem = syra_dom.addDiv(this.list.$skin + "-record-selector");
		this.domItem.syraItem = this.id;
		this.domItem.setAttribute("data-s-record", this.$uuid);
		this.page.loadNewItem(syra_dom.addDiv(this.list.$skin + "-record", this.domItem), this.$item, this);
		this.list.layoutSlot.appendChild(this.domItem);
		this.domItem.style.visibility = "";
		syra_article.endDrawBox(this);
		this.applyChange(this.list.ensureGlobalMetaRecord());
	},
	_appendSelectorField: function() {
		if (!this.$item.$selectorField) {
			this.$item.$selectorField = Object.keys(this.$prototype.$properties)[0];
		}
		var $field = this.$prototype.$properties[this.$item.$selectorField];
		$field.$isHidden = true;
		this.$prototype.$properties.$selectorField = {
			$title: $field.$title,
			$type: "application/x-reference",
			$item: {
				$value: "{$selectField}",
				$key: "{$selectField}",
				$links: {
					$lookup: {}
				},
				$properties: {
					$selectField: {
						$type: $field.$type
					}
				},
				$selectField: "{" + this.$item.$selectorField + "}"
			}
		};
		this.placeSelectorField(this.$item.$layout);
	},
	placeSelectorField: function($layout) {
		if ($layout && $layout.$items) {
			for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
				var $item = $layout.$items[ii];
				if ($item.$bind == this.$item.$selectorField) {
					$layout.$items.splice(ii, 0, {
						$bind: "$selectorField",
						$isEditMode: true,
						$isTopLabelAlignment: false
					});
					break;
				} else {
					if ($item.$layout) {
						this.placeSelectorField($item.$layout);
					}
				}
			}
		}
	},
	onSelect: function(record, selected) {
		if (selected) {
			if (record) {
				this.applyChange({
					$properties: {
						$selectorField: {
							$links: this.$prototype.$links
						}
					}

				});
				this.applyChange(this.dataset = record.dataset);
			}
		} else {
			this.dataset = null;
			var delta = {};
			var $binds = Object.keys(this.$prototype.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				delta[$binds[ii]] = null;
			}
			this.applyChange(delta);
		}
	},
	onSelectRecord: function(records) {
		if (this.popupCard) {
			this.popupCard.close();
			this.popupCard = null;
		}
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$sourceBind && menuItem.$subRecordKey == "$selectorField") {
			syra_controller.executeMenu(menuItem, this.list.recordsMap[this.dataset.$uuid]);
			return false;
		}
		return true;
	},
	onLookupClick: function(field) {
		if (field.$item.$bind == "$selectorField") {
			var self = this;
			if (!self._popupSlot) {
				self._popupSlot = syra_dom.addDiv(this.list.$skin + "-record-selector-popup");
			}
			self._popupSlot.appendChild(self.list.domItem);
			self.popupCard = syra_dlg.openPopup(self, {
				content: field,
				autoCloseBoundary: field.domItem,
				slot: self._popupSlot,
				picker: field.layoutSlot,
				position: {
					my: "left top",
					at: "left bottom",
					of: $(field.input)
				},
				onOpened: function() {
					self.list.resizeItem();
				},
				onClose: function() {
					self.popupCard = null;
				}
			});
			return false;
		}
		return true;
	},
	onFormUpdateDelta: function(field, value) {
		return field.$item.$bind != "$selectorField";
	}
});