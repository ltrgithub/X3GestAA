"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

function SelectorCardRecord() {}

exports.SelectorCardRecord = helpers.defineClass(SelectorCardRecord, Article, {
	dispose: function() {
		if (this.popupCard) {
			this.popupCard.dispose();
		}
		if (this._popupSlot) {
			document.site.removeDomChild(this._popupSlot);
		}
		this.domItem = this.slot = this.menusSlot = this.popupCard = this._popupSlot = null;
		Article.prototype.dispose.call(this);
	},
	initialize: function(list) {
		this.list = list;
		this.id = this.list.id + "-record-selector";
		this.list.$item.$isMenuRecordHidden = true;
		var $selectorCard = this.list.$item.$selectorCard;
		if (this.list.$item.$isTitleRowHidden === undefined) {
			this.list.$item.$isTitleRowHidden = ($selectorCard.$layout && $selectorCard.$layout.$items && $selectorCard.$layout.$items.length > 0);
		}
		this.isRecordArticle = true;
		this.$defaultSkinSection = this.$defaultSkinBlock = "s-h3";
		this.arrayLevel = "record";
		this.$facet = "details";
		this.list.$isEditMode = this.$isEditMode = false;
	},
	loadBox: function() {
		this.$prototype = helpers.object.clone(this.list.$prototype.$item, true);
		this.$item = helpers.object.clone(this.list.$item.$selectorCard, true);
		if (!this.$item.$layout) {
			this.$item.$layout = {
				$items: this.list.$item.$layout.$items
			};
		}
		var $binds = Object.keys(this.$prototype.$properties);
		var $hiddenFields = {};
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			if ($binds[ii] != this.$item.$selectorField) {
				$hiddenFields[$binds[ii]] = {
					$isHidden: true
				};
			}
		}
		this.list.applyMetaData({
			$item: {
				$properties: $hiddenFields
			}
		});
		this._appendSelectorField();
		this.list.page.initializeNewItem(this, this.$item, this.list);
		Article.prototype.loadBox.call(this);
		this.applyChange(this.list.ensureGlobalMetaRecord());
	},
	_appendSelectorField: function() {
		if (!this.$item.$selectorField) {
			this.$item.$selectorField = Object.keys(this.$prototype.$properties)[0];
		}
		var $field = this.$prototype.$properties[this.$item.$selectorField];
		$field.$isHidden = true;
		this.$prototype.$properties.$selectorField = {
			$title: $field.$title,
			$type: "application/x-reference",
			$item: {
				$value: "{$selectField}",
				$key: "{$selectField}",
				$properties: {
					$selectField: {
						$type: $field.$type
					}
				},
				$selectField: "{" + this.$item.$selectorField + "}"
			}
		};
		this.placeSelectorField(this.$item.$layout);
	},
	placeSelectorField: function($layout) {
		if ($layout && $layout.$items) {
			for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
				var $item = $layout.$items[ii];
				if ($item.$bind == this.$item.$selectorField) {
					$layout.$items.splice(ii, 0, {
						$bind: "$selectorField",
						$isEditMode: true,
						$isTopLabelAlignment: false
					});
					break;
				} else {
					if ($item.$layout) {
						this.placeSelectorField($item.$layout);
					}
				}
			}
		}
	},
	drawBox: function() {
		this.domItem = document.createElement("div");
		this.domItem.setAttribute("data-s-record", this.$uuid);
		this.domItem.className = this.list.$skin + "-record-selector";
		this.$$item = $(this.domItem);
		var card = this.domItem.appendChild(document.createElement("div"));
		card.className = this.list.$skin + "-record";
		this.page.loadNewItem(card, this.$item, this);
		this.list.layoutSlot.appendChild(this.domItem);
		this.domItem.style.visibility = "";
	},
	onSelect: function($uuid, selected) {
		if (selected) {
			var found = this.list.findDataRecord($uuid);
			if (found) {
				this.applyChange({
					$properties: {
						$selectorField: {
							$links: this.$prototype.$links
						}
					}

				});
				this.applyChange(this.dataset = found.dataRecord);
			}
			if (this.popupCard) {
				this.popupCard.close();
				this.popupCard = null;
			}
		} else {
			this.dataset = null;
			var delta = {};
			var $binds = Object.keys(this.$prototype.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				delta[$binds[ii]] = null;
			}
			this.applyChange(delta);
		}
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$sourceBind && menuItem.$subRecordKey == "$selectorField") {
			document.controller.executeMenu(menuItem, null, this.list.recordsMap[this.dataset.$uuid]);
			return false;
		}
		return true;
	},
	onFieldClickPicker: function(field, pickerType, btn) {
		if ((field.$item.$bind == "$selectorField") && pickerType == "lookup") {
			var self = this;
			if (!self._popupSlot) {
				self._popupSlot = document.createElement("div");
				self._popupSlot.className = this.list.$skin + "-record-selector-popup";
			}
			self._popupSlot.appendChild(self.list.domItem);
			self.popupCard = document.site.dialogManager.openPopup(self, {
				content: field,
				autoCloseBoundaryId: field.id,
				$$dialog: $(self._popupSlot),
				position: {
					my: "left top",
					at: "left bottom",
					of: field.$$input
				},
				onClose: function() {
					self.popupCard = null;
				}
			});
			return false;
		}
		return true;
	},
	onNotifyDataChange: function(field, value) {
		if (field.$item.$bind == "$selectorField") {
			return false;
		}
		return true;
	},
	resizeArticle: function() {
		Article.prototype.resizeArticle.call(this);
		if (this.popupCard) {
			this.popupCard.resizeDialog(true);
		}
	}
});