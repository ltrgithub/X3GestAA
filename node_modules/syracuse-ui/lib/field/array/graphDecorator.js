"use strict";
var helpers = require('syracuse-core/lib/helpers');

function GraphDecorator() {}

exports.GraphDecorator = helpers.defineClass(GraphDecorator, null, {
	switchView: function() {
		this.list.$item.$graphPosition = this.list.$item.$graphPosition == "front" ? "behind" : "front";
		this.ensureGraphVisibility();
		if (this.list.pagging) {
			this.list.pagging.showPagers();
		}
		this.list.onWindowResize();
	},
	ensureGraphVisibility: function() {
		if (this.list.$item.$graphPosition == "front" || this.list.$item.$graphPosition == "behind") {
			var showGraph = this.list.$item.$graphPosition == "front";
			this.list.applyActionLinkChange({
				$links: {
					$toggleGraph: {
						$isHidden: false,
						$title: showGraph ? this.list.localize.flSwitchToList : this.list.localize.flSwitchToGraph,
						$iconValue: showGraph ? "switch-to-list" : "switch-to-graph"
					}
				}
			});
			if (this.list.menusBox) {
				document.site.toggleClass(this.list.menusBox.domTitle, "s-list-graph-switch-on", true);
			}
		} else {
			this.list.applyActionLinkChange({
				$links: {
					$toggleGraph: {
						$isHidden: true
					}
				}
			});
			if (this.list.menusBox) {
				document.site.toggleClass(this.list.menusBox.domTitle, "s-list-graph-switch-on", true);
			}
		}
		this.ensureGraph();
		this.list.tableSlot.style.display = (this.list.$item.$graphPosition == "front" && !(this.list.builder.cardDecorator && this.list.builder.cardDecorator.isOutCardMode)) ? "none" : "";
		this._slot.style.display = this.list.$item.$graphPosition == "behind" ? "none" : "";
		this.list.onWindowResize();
	},
	ensureGraph: function() {
		if (!this.list.chart && this.list.$item.$graphPosition != "behind") {
			this.list.chart = this.list.page.loadNewItem(this._slot, {
				$category: "tabularChart",
				$renderer: this.list.$item.$renderer,
				$cube: this.list.$item.$cube,
				$isListEmbeded: true,
				$bind: this.list.$item.$bind
			}, this.list.articleParent);
			this.list.chart.attachedField = this.list;
			if (this.list.records && this.list.records.length) {
				var dataset = this.list.articleParent.dataset;
				if (dataset) {
					this.setDataBind(dataset[this.list.$item.$bind], dataset, dataset.$properties && dataset.$properties[this.list.$item.$bind]);
				}
			}
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		if (metaData.$graphPosition !== undefined) {
			this.list.$item.$graphPosition = metaData.$graphPosition;
		}

		if (metaData.$cube) {
			this.list.$item.$cube = metaData.$cube;
		}
		if (designing) {
			this.list.appendCardGraphSlots();
		}
		this.ensureGraphVisibility();
		if (this.list.chart) {
			this.list.chart.applyDesignMetaData(metaData);
		}
	},
	onWindowResize: function() {
		this.list.chart && this.list.chart.onWindowResize && this.list.chart.onWindowResize();
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		this.list.chart && this.list.chart.setDataBind(dataRecordSet, parentDataRecord, metaData);
	},
	appendSlot: function() {
		var tableSlot = this.list.tableSlot;
		if (!this._separator) {
			this._separator = document.createElement("div");
		}
		if (!this._slot) {
			this._slot = document.createElement("div");
		}
		switch (this.list.$item.$graphPosition) {
			case "left":
				tableSlot.parentNode.insertBefore(this._separator, tableSlot);
				tableSlot.parentNode.insertBefore(this._slot, this._separator);
				this._separator.className = "s-list-graph-sep-cell";
				this._slot.className = "s-list-graph-slot-cell";
				break;
			case "right":
				tableSlot.parentNode.insertBefore(this._separator, tableSlot.nextSibling);
				tableSlot.parentNode.appendChild(this._slot, this._separator.nextSibling);
				this._separator.className = "s-list-graph-sep-cell";
				this._slot.className = "s-list-graph-slot-cell";
				break;
			case "top":
				var sibling = this.list.tableRow || tableSlot;
				sibling.parentNode.insertBefore(this._separator, sibling);
				sibling.parentNode.insertBefore(this._slot, this._separator);
				this._separator.className = "s-list-graph-sep";
				this._slot.className = "s-list-graph-slot";
				this._slot.style.width = "";
				break;
			case "front":
			case "behind":
			case "bottom":
				var sibling = this.list.tableRow || tableSlot;
				sibling.parentNode.appendChild(this._separator);
				sibling.parentNode.appendChild(this._slot);
				this._separator.className = "s-list-graph-sep";
				this._slot.className = "s-list-graph-slot";
				this._slot.style.width = "";
				break;

		}
	},
	removeSlot: function() {
		document.site.removeDomChild(this._separator);
		document.site.removeDomChild(this._slot);
		this._separator = this._slot = null;
	},
	dispose: function() {
		if (this._chart) {
			this._chart.attachedField = null;
		}
		if (this.list) {
			if (this.list.chart && this.list.chart.attachedField) {
				this.list.chart.attachedField = null;
			}
			this.list.chart = null;
		}
		this._separator = this._slot = this.list = null;
	}
});