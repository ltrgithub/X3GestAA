"use strict";
var helpers = require('syracuse-core/lib/helpers');

function GraphDecorator() {}

exports.GraphDecorator = helpers.defineClass(GraphDecorator, null, {
	switchView: function() {
		this.list.$item.$isGraphTabVisible = !this.list.$item.$isGraphTabVisible;
		this._toggleSwitchMenu(true);
		// in order not to display pager for graphs
		if (this.list.pagging.pagers) {
			for (var ii = 0, jj = this.list.pagging.pagers.length; ii < jj; ii++) {
				this.list.pagging.pagers[ii].toggle(!this.list.$item.$isGraphTabVisible);
			}
		}
	},
	_toggleSwitchMenu: function(show) {
		if (show) {
			var showGraph = this.list.$item.$isGraphTabVisible;
			this.list.applyActionLinkChange({
				$links: {
					"$toggleGraph": {
						$isHidden: false,
						$title: showGraph ? this.list.localize.flSwitchToList : this.list.localize.flSwitchToGraph,
						$iconValue: showGraph ? "switch-to-list" : "switch-to-graph"
					}
				}
			});
			if (this.list.menusBox) {
				document.site.toggleClass(this.list.menusBox.domTitle, "s-list-graph-switch-on", true);
			}
			this.list._core.style.display = showGraph ? "none" : "";
			this._graphSlot.style.display = showGraph ? "" : "none";
			if (showGraph) {
				if (this._chart) {
					this._chart.onWindowResize();
				}
			} else {
				this.list.onWindowResize();
			}
		} else {
			this.list.applyActionLinkChange({
				$links: {
					"$toggleGraph": {
						$isHidden: true
					}
				}
			});
			if (this.list.menusBox) {
				document.site.toggleClass(this.list.menusBox.domTitle, "s-list-graph-switch-on", true);
			}
		}
	},
	applyGraphSettings: function(list, metaData) {
		this.list = list;
		if (metaData.$graphMode !== undefined) {
			list.$item.$graphMode = metaData.$graphMode;
		}
		if (metaData.$graphPosition !== undefined) {
			list.$item.$graphPosition = metaData.$graphPosition;
		}
		if (metaData.$graphColumnWidth !== undefined) {
			list.$item.$graphColumnWidth = metaData.$graphColumnWidth;
		}
		if (metaData.$cube) {
			list.$item.$cube = metaData.$cube;
		}
		if (list.$item.$graphMode != "list") {
			if (!this._graphSlot) {
				this._wrapper = document.createElement("div");
				this._wrapper.className = "s-list-listgraph-slot";

				var $$listChildren = $(list._core).children();
				list._core = document.createElement("div");
				list._core.className = "s-list-datalist-slot";
				$(this._wrapper.appendChild(list._core)).append($$listChildren);

				this._graphSlot = document.createElement("div");
				this._graphSlot.className = "s-list-graph-slot";
				this._wrapper.appendChild(this._graphSlot);

				list.fieldValue.appendChild(this._wrapper);

				list.$item.$graphPosition = list.$item.$graphPosition || "top";
				list.chart = this._chart = list.page.loadNewItem(this._graphSlot, {
					$category: "tabularChart",
					$renderer: list.$item.$renderer,
					$cube: list.$item.$cube,
					$isListEmbeded: true,
					$bind: list.$item.$bind
				}, list.articleParent);
				if (this._chart) {
					this._chart.attachedField = list;
				}
			}
			if (list.$item.$graphMode == "both") {
				var $graphPosition = list.$item.$graphPosition;
				if ($graphPosition == "front" || $graphPosition == "behind") {
					this.list.$item.$isGraphTabVisible = ($graphPosition == "front");
					this._wrapper.style.display = "";
					this._wrapper.style.width = "";
					this._toggleSwitchMenu(true);
					list._core.style.width = this._graphSlot.style.width = "";
				} else {
					this._toggleSwitchMenu(false);
					if ($graphPosition == "left" || $graphPosition == "right") {
						this._wrapper.style.display = "table";
						this._wrapper.style.tableLayout = "fixed";
						this._wrapper.style.width = "100%";
						list._core.style.display = "table-cell";
						this._graphSlot.style.display = "table-cell";
						var widths = (list.$item.$graphColumnWidth || "50,50").split(",");
						this._graphSlot.style.width = widths[($graphPosition == "left") ? 0 : 1] + "%";
						list._core.style.width = widths[($graphPosition == "left") ? 1 : 0] + "%";
					} else {
						this._wrapper.style.display = "";
						this._wrapper.style.tableLayout = "";
						this._wrapper.style.width = "";
						list._core.style.display = "";
						list._core.style.width = "";
						this._graphSlot.style.display = "";
						this._graphSlot.style.width = "";
					}
				}
			} else {
				this._toggleSwitchMenu(false);
				list._core.style.display = "none";
				this._graphSlot.style.display = "";
				this._graphSlot.style.width = "";
			}
			$(this._graphSlot)[(["left", "top"].indexOf($graphPosition) >= 0) ? "prependTo" : "appendTo"]($(this._wrapper));
		} else {
			if (this._graphSlot) {
				this._toggleSwitchMenu(false);
				this._wrapper.style.display = "";
				this._wrapper.style.width = "";
				this.list._core.style.display = "";
				this.list._core.style.width = "";
				this._graphSlot.style.display = "none";
			}
		}
		if (this._chart) {
			this._chart.applyDesignMetaData(metaData);
		}
	},
	onWindowResize: function() {
		this._chart && this._chart.onWindowResize && this._chart.onWindowResize();
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		this._chart && this._chart.setDataBind(dataRecordSet, parentDataRecord, metaData);
	},
	dispose: function() {
		if (this._chart) {
			this._chart.attachedField = null;
		}
		if (this.list) {
			this.list.chart = null;
		}
		this.list = this._chart = this._chart = this._graphSlot = this._wrapper = null;
	}
});