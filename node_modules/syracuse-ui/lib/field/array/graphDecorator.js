"use strict";
var helpers = require('syracuse-core/lib/helpers');

function GraphDecorator(){
}

exports.GraphDecorator = helpers.defineClass(GraphDecorator, null, {
    _selectTab: function(){
        var showGraph = this.list.$item.$isGraphTabVisible;
        this.list._core.style.display = showGraph ? "none" : "";
        this._graphSlot.style.display = showGraph ? "" : "none";
        document.site.toggleClass(this._listTab, "s-tab-open", !showGraph);
        document.site.toggleClass(this._graphTab, "s-tab-open", showGraph);
        if (showGraph && this._chart) {
            this._chart.onWindowResize();
        }
    },
    _appendGraphModeTabs: function(){
        var self = this;
        self._listTab = document.createElement("a");
        self._listTab.textContent = self.list.localize.flGraphTabDataList;
        self._listTab.setAttribute("data-s-tab", "list");
        self._listTab.className = "s-list-graph-tab";
        
        self._graphTab = document.createElement("a");
        self._graphTab.textContent = self.list.localize.flGraphTabDataGraph;
        self._graphTab.setAttribute("data-s-tab", "graph");
        self._graphTab.className = "s-list-graph-tab";
        
        self._graphTabs = document.createElement("nav");
        self._graphTabs.className = "s-list-graph-tabs";
        self._graphTabs.appendChild(self._listTab);
        self._graphTabs.appendChild(self._graphTab);
        
        $(self._graphTabs).delegate("a[data-s-tab]", "click", function(){
            self.list.$item.$isGraphTabVisible = $(this).attr("data-s-tab") == "graph";
            self._selectTab();
            return false;
        }).prependTo($(self._wrapper));
    },
    applyGraphSettings: function(list, metaData){
        this.list = list;
        if (metaData.$graphMode !== undefined) {
            list.$item.$graphMode = metaData.$graphMode;
        }
        if (metaData.$graphPosition !== undefined) {
            list.$item.$graphPosition = metaData.$graphPosition;
        }
        if (metaData.$graphColumnWidth !== undefined) {
            list.$item.$graphColumnWidth = metaData.$graphColumnWidth;
        }
        if (metaData.$cube) {
            list.$item.$cube = metaData.$cube;
        }
        if (list.$item.$graphMode != "list") {
            if (!this._graphSlot) {
                this._wrapper = document.createElement("div");
                this._wrapper.className = "s-list-listgraph-slot";
                
                var $$listChildren = $(list._core).children();
                list._core = document.createElement("div");
                list._core.className = "s-list-datalist-slot";
                $(this._wrapper.appendChild(list._core)).append($$listChildren);
                
                this._graphSlot = document.createElement("div");
                this._graphSlot.className = "s-list-graph-slot";
                this._wrapper.appendChild(this._graphSlot);
                
                list.fieldValue.appendChild(this._wrapper);
                
                list.$item.$graphPosition = list.$item.$graphPosition || "top";
                list.chart = this._chart = list.page.loadNewItem(this._graphSlot, {
                    $category: "tabularChart",
                    $renderer: list.$item.$renderer,
                    $cube: list.$item.$cube,
                    $isListEmbeded: true,
                    $bind: list.$item.$bind
                }, list.articleParent);
                if (this._chart) {
                    this._chart.attachedField = list;
                }
            }
            if (list.$item.$graphMode == "both") {
                var $graphPosition = list.$item.$graphPosition;
                if ($graphPosition == "tab") {
                    this._wrapper.style.display = "";
                    this._wrapper.style.width = "";
                    if (!this._graphTabs) {
                        this._appendGraphModeTabs();
                    }
                    this._selectTab();
                    list._core.style.width = "";
                    this._graphSlot.style.width = "";
                    this._graphTabs.style.display = "";
                }
                else {
                    if (this._graphTabs) {
                        this._graphTabs.style.display = "none";
                    }
                    if ($graphPosition == "left" || $graphPosition == "right") {
                        this._wrapper.style.display = "table";
                        this._wrapper.style.tableLayout = "fixed";
                        this._wrapper.style.width = "100%";
                        list._core.style.display = "table-cell";
                        this._graphSlot.style.display = "table-cell";
                        var widths = (list.$item.$graphColumnWidth || "50,50").split(",");
                        this._graphSlot.style.width = widths[($graphPosition == "left") ? 0 : 1] + "%";
                        list._core.style.width = widths[($graphPosition == "left") ? 1 : 0] + "%";
                    }
                    else {
                        this._wrapper.style.display = "";
                        this._wrapper.style.tableLayout = "";
                        this._wrapper.style.width = "";
                        list._core.style.display = "";
                        list._core.style.width = "";
                        this._graphSlot.style.display = "";
                        this._graphSlot.style.width = "";
                    }
                }
            }
            else {
                if (this._graphTabs) {
                    this._graphTabs.style.display = "none";
                }
                list._core.style.display = "none";
                this._graphSlot.style.display = "";
                this._graphSlot.style.width = "";
            }
            $(this._graphSlot)[(["left", "top"].indexOf($graphPosition) >= 0) ? "prependTo" : "appendTo"]($(this._wrapper));
        }
        else {
            if (this._graphSlot) {
                if (this._graphTabs) {
                    this._graphTabs.style.display = "none";
                }
                this._wrapper.style.display = "";
                this._wrapper.style.width = "";
                this.list._core.style.display = "";
                this.list._core.style.width = "";
                this._graphSlot.style.display = "none";
            }
        }
        if (this._chart) {
            this._chart.applyDesignMetaData(metaData);
        }
    },
    onWindowResize: function(){
        this._chart && this._chart.onWindowResize && this._chart.onWindowResize();
    },
    setDataBind: function(dataRecordSet, parentDataRecord, metaData){
        this._chart && this._chart.setDataBind(dataRecordSet, parentDataRecord, metaData);
    },
    dispose: function(){
        if (this._chart) {
            this._chart.attachedField = null;
        }
        if (this.list) {
            this.list.chart = null;
        }
        this.list = this._chart = null;
        if (this._graphTabs) {
            $(this._graphTabs).undelegate();
        }
    }
});
