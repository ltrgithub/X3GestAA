"use strict";
var helpers = require('syracuse-core/lib/helpers');

function GraphDecorator() {}

exports.GraphDecorator = helpers.defineClass(GraphDecorator, null, {
	switchView: function() {
		this.list.$item.$graphPosition = this.list.$item.$graphPosition == "front" ? "behind" : "front";
		this.ensureGraphVisibility();
		if (this.list.pagging) {
			this.list.pagging.showPagers();
		}
		this.list.resizeList(true);
	},
	ensureGraphVisibility: function() {
		var $links;
		this.list.$item.$graphPosition = "front";
		if (this.list.$item.$graphPosition == "front" || this.list.$item.$graphPosition == "behind") {
			var showGraph = this.list.$item.$graphPosition == "front";
			$links = {
				$toggleGraph: {
					$isHidden: false,
					$title: showGraph ? this.list.localize.flSwitchToList : this.list.localize.flSwitchToGraph,
					$iconValue: showGraph ? "switch-to-list" : "switch-to-graph"
				}
			};
		} else {
			$links = {
				$toggleGraph: {
					$isHidden: true
				}
			};
		}
		if (this.list.menusBox) {
			syra_site.dom.toggleClass(this.list.menusBox.domTitle, "s-list-graph-switch-on", true);
		}
		this.ensureGraph();
		if (!this.list.page.isFusionPage) {
			($links = $links || {}).$pptslide = {
				$title: this.list.localize.highCharts_powerpointSlide,
				$url: this.list.page.$prototype.$representationUrl + "&count={recordsPerPage}" + "&pptMode=newSlide&$bind=" + this.list.$item.$bind + "&{linkstartP}",
				$type: "application/syracuse-ppt-slide",
				$confirm: this.list.localize.highCharts_installOfficeAddin,
				$officeAddinSetup: "/msoffice/lib/general/addIn/SyracuseOfficeAddinsSetup.EXE?&format=application/x-msi"
			};
		}
		if ($links) {
			this.list.applyActionLinkChange({
				$links: $links
			});
		}
		this.list.isTableSlotHidden = (this.list.$item.$graphPosition == "front" && !(this.list.cardDecorator && this.list.cardDecorator.isOutCardMode));
		this.list.tableSlot.style.display = this.list.isTableSlotHidden ? "none" : "";

		this.graphSlot.style.display = this.list.$item.$graphPosition == "behind" ? "none" : "";
		this.list.setMustBeResized();
	},
	ensureGraph: function(load) {
		if (!this.list.chart && (load || this.list.$item.$graphPosition != "behind")) {
			this.list.chart = this.list.page.loadNewItem(this.graphSlot, {
				$category: "tabularChart",
				$renderer: this.list.$item.$renderer,
				$cube: this.list.$item.$cube,
				$isListEmbeded: true,
				$bind: this.list.$item.$bind
			}, this.list.articleParent);
			this.list.chart.attachedField = this.list;
			if (this.list.records && this.list.records.length) {
				var dataset = this.list.articleParent.dataset;
				if (dataset) {
					this.setDataBind(dataset[this.list.$item.$bind], dataset, dataset.$properties && dataset.$properties[this.list.$item.$bind]);
				}
			}
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		if (metaData.$graphPosition !== undefined) {
			this.list.$item.$graphPosition = metaData.$graphPosition;
		}

		if (metaData.$cube) {
			this.list.$item.$cube = metaData.$cube;
		}
		if (designing) {
			this.list.appendCardGraphSlots();
		}
		this.ensureGraphVisibility();
		if (this.list.chart) {
			this.list.chart.applyDesignMetaData(metaData);
		}
	},
	onListResize: function() {
		this.list.chart && this.list.chart.resizeChart && this.list.chart.resizeChart();
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		this.list.chart && this.list.chart.setDataBind(dataRecordSet, parentDataRecord, metaData);
	},
	appendSlot: function() {
		var tableSlot = this.list.tableSlot;
		if (!this.separator) {
			this.separator = document.createElement("div");
			this.separator.syraGraphResizer = this.list.id;
			this.separator.syraDragSpot = this.list.id;
		}
		if (!this.graphSlot) {
			this.graphSlot = document.createElement("div");
		}
		switch (this.list.$item.$graphPosition) {
			case "left":
				tableSlot.parentNode.insertBefore(this.separator, tableSlot);
				tableSlot.parentNode.insertBefore(this.graphSlot, this.separator);
				this.separator.className = "s-list-graph-sep-cell";
				this.graphSlot.className = "s-list-graph-slot-cell";
				if (this.list.$item.$graphWidth) {
					this.outCardSlot.style.width = this.list.$item.$graphWidth;
				}
				break;
			case "right":
				tableSlot.parentNode.insertBefore(this.separator, tableSlot.nextSibling);
				tableSlot.parentNode.appendChild(this.graphSlot, this.separator.nextSibling);
				this.separator.className = "s-list-graph-sep-cell";
				this.graphSlot.className = "s-list-graph-slot-cell";
				if (this.list.$item.$graphWidth) {
					this.outCardSlot.style.width = this.list.$item.$graphWidth;
				}
				break;
			case "top":
				var sibling = this.list.tableRow || tableSlot;
				sibling.parentNode.insertBefore(this.separator, sibling);
				sibling.parentNode.insertBefore(this.graphSlot, this.separator);
				this.separator.className = "s-list-graph-sep";
				this.graphSlot.className = "s-list-graph-slot";
				this.graphSlot.style.width = "";
				break;
			case "front":
			case "behind":
			case "bottom":
				var sibling = this.list.tableRow || tableSlot;
				sibling.parentNode.appendChild(this.separator);
				sibling.parentNode.appendChild(this.graphSlot);
				this.separator.className = "s-list-graph-sep";
				this.graphSlot.className = "s-list-graph-slot";
				this.graphSlot.style.width = "";
				break;

		}
	},
	removeSlot: function() {
		syra_site.dom.removeChild(this.separator);
		syra_site.dom.removeChild(this.graphSlot);
		this.separator = this.graphSlot = null;
	},
	dispose: function() {
		if (this.list && this.list.chart) {
			this.list.chart.attachedField = null;
			this.list.chart.dispose();
			this.list.chart = null;
		}
		this.separator = this.graphSlot = this.list = null;
	}
});