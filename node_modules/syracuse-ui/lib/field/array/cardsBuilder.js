"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _addRow(builder) {
	var row = {
		slot: document.createElement("div"),
		index: builder.rows.length,
		count: 0,
		cells: [],
		max: builder.$cardsByRowCount
	};
	row.cellWidth = Math.ceil(100 / row.max) + "%";
	row.slot.className = builder.list.$skin + "-carditem-slot";
	return row;
}

function _addDefaultCell(builder, row) {
	var cell = document.createElement("div");
	cell.className = builder.list.$skin + "-cell";
	cell.style.width = row.cellWidth;
	cell.visibility = "hidden";
	row.cells.push(row.slot.appendChild(cell));
}

function CardsBuilder() {}

exports.CardsBuilder = helpers.defineClass(CardsBuilder, null, {
	initialize: function(list) {
		this.list = list;
		this.list.enableDefaultDesigner();
		list.emptyBody = function() {
			this.builder.rows = [];
			this.filler.emptyBody(this);
		};
	},
	endInitiallize: function() {
		this.list.$item.$isTopLabelAlignment = true;
		if (!this.list.$item.$layout || !this.list.$item.$layout.$items) {
			this.list.$item.$layout = this.list.defineDefaultCard().$layout;
		}
	},
	isDraggable: function(target, event) {
		if (this.list.addSlotResizer(target, event)) {
			return;
		}
		return this.list.isReorderRecordDraggable(target, event);
	},
	list_onAfterApplyDesignMetaData: function(metaData, designing) {
		if (designing) {
			if (metaData.$cardsByRowCount !== undefined) {
				this.$cardsByRowCount = this.list.$item.$cardsByRowCount = metaData.$cardsByRowCount;
				if (this.list.records.length) {
					var newRows = [],
						cellIndex = 0,
						curRow;
					for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
						var record = this.list.records[ii];
						if (cellIndex == 0) {
							newRows.push(curRow = _addRow(this));
							this.list.body.appendChild(curRow.slot);
						}
						record.row = curRow;
						record.cellIndex = cellIndex;
						curRow.count = ++cellIndex;
						record.domItem.style.width = curRow.cellWidth;
						curRow.cells.push(curRow.slot.appendChild(record.domItem));
						if (curRow.count == this.$cardsByRowCount) {
							cellIndex = 0;
						}
					}
					if (curRow.count < curRow.max) {
						for (var ii = curRow.count; ii < curRow.max; ii++) {
							_addDefaultCell(this, curRow);
						}
					}
					for (var ii = 0, jj = this.rows.length; ii < jj; ii++) {
						syra_dom.removeChild(this.rows[ii].slot);
					}
					this.rows = newRows;
				}
			}
		}
		this.list.applyGrapDesignMetaData && this.list.applyGrapDesignMetaData(metaData, designing);
		this.list.paging.applyMetadata(metaData, designing);
	},

	list_onAfterDraw: function() {
		this.list.toggleSearcher(true);
		this.$cardsByRowCount = this.list.$item.$cardsByRowCount || 1;
		this.list._dataValue.style.overflow = "auto";
		this.rows = [];
		this.list.$skin = this.list.$item.$skin || "s-cards";
		this.list.applyDesignMetaData(this.list.$item, false);
		this.tableSlot = document.createElement("div");
		this.tableSlot.className = "s-grid-slot";
		this.tableSlot.style.overflow = "auto";
		this.list._core.appendChild(this.tableSlot);
		this.tableSlot.appendChild(this.list.body = document.createElement("div"));
		this.list.loadSelector();
		this.list.body.className = this.list.$skin + "-body";
		this.list.applyCapabilities();
		this.list.ensureGlobalMetaRecord(true);
		this.list.ensureGrapDecorator();
		this.appendCardGraphSlots();
		this.list.applyDesignMetaData(this.list.$item, false);
		syra_dd.addToColResizers(this.list, true);
		this.list.endDrawBox();
	},
	appendCardGraphSlots: function() {
		if (!this.list.$item.$graphPosition) {
			this.list.removeGrapSlot && this.list.removeGrapSlot();
			if (this.list.tableRow) {
				syra_dom.moveChildNodes(this.list.tableRow, this.list._core);
				this.list._core.removeChild(this.list.tableRow);
				delete this.list.tableRow;
			}
		}
		if (this.list.$item.$graphPosition) {
			this.list.fitWidth = true;
			if (this.list.$item.$graphPosition == "left" || this.list.$item.$graphPosition == "right") {
				if (!this.list.tableRow) {
					this.list.tableRow = document.createElement("div");
					this.list.tableRow.className = "s-grid-table-row";
					syra_dom.moveChildNodes(this.list._core, this.list.tableRow);
					this.list._core.appendChild(this.list.tableRow);
				}
			} else {
				if (this.list.tableRow) {
					syra_dom.moveChildNodes(this.list.tableRow, this.list._core);
					this.list._core.removeChild(this.list.tableRow);
					delete this.list.tableRow;
				}
			}
			if (this.list.$item.$graphPosition) {
				this.list.addGrapSlot && this.list.addGrapSlot();
			}
		}
		if (this.list.tableRow) {
			this.tableSlot.className = "s-grid-slot-cell";
		} else {
			this.tableSlot.style.width = "";
			this.tableSlot.className = "s-grid-slot";
		}
	},
	record_onBeforeLoad: function(record, initData, isCreateAction) {
		var rowIndex;
		if (this.list.$item.$skinCard) {
			record.$defaultSkinSection = record.$defaultSkinBlock = this.list.$item.$skinCard;
		}
		record.$skin = this.list.$skin + "-carditem";
		if (this.rows.length > 0) {
			record.row = this.rows[this.rows.length - 1];
		}
		if (!record.row || (record.row.count == this.$cardsByRowCount)) {
			record.row = _addRow(this);
			if (this.list.treeDecorator) {
				record.dataRow = record.row.slot;
				record.row.cells.push(record.dataRow = record.row.slot);
			} else {
				this.list.body.appendChild(record.row.slot);
				for (var ii = 0; ii < record.row.max; ii++) {
					_addDefaultCell(this, record.row);
				}
			}
			this.rows.push(record.row);
		}
		record.disableEditMenu = true;
		record.cellIndex = record.row.count++;
	},

	record_reorder: function() {
		var rowIndex = 0;
		for (var ii = 0, jj = this.rows.length; ii < jj; ii++) {
			this.rows[ii].count = 0;
			this.rows[ii].cells = [];
		}
		var rowOffset = 0;
		for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
			var record = this.list.records[ii];
			record.row = this.rows[rowOffset];
			record.cellIndex = record.row.count++;
			record.row.slot.appendChild(record.domItem);
			record.row.cells.push(record.domItem);
			if (record.row.count >= record.row.max) {
				rowOffset++;
			}
		}
		var lastRow = this.rows[this.rows.length - 1];
		var $$lastRow = $(lastRow.slot);
		var $$children = $$lastRow.children(".s-cards-cell");
		if ($$children.length) {
			for (var ii = 0; ii < $$children.length; ii++) {
				lastRow.cells.push($($$children[0]).detach().appendTo($$lastRow)[0]);
			}
		}
	},
	record_draw: function(record) {
		record.$item = {
			$layout: this.list.$item.$layout
		};
		record.$mnPickersCss = record.$mnPickersCss || "s-list-record-picker";
		record.$iconPath = this.list.$iconPath;
		record.layoutSlot = record.row.slot;
		record.domItem = record.row.cells[record.cellIndex];
		record.domItem.syraItem = record.id;
		record.reorderBtnParent = record.cardContent = document.createElement("div");
		record.domItem.appendChild(record.cardContent);

		if (this.list.treeDecorator) {
			record.dataSlot = record.body = record.cardContent;
			this.list.treeDecorator.addCardNode(record, record.cardContent);
			if (this.list.selector.isRowMode) {
				record.treeNode.item.syraOnClick = "onSelectorClick";
				record.treeNode.item.className += " s-list-selector-row";
				record.treeNode.item.syrainout = record.id;
			}
			record.ensureLayoutMode();
		} else {
			if (this.list.selector.useColumnSelector || this.list.$item.$isRowIndexVisible || (this.list.$capability && this.list.$capability.reorder) || this.list.$item.$selectByRowIndex || !this.list.$item.$isMenuRecordHidden) {
				this.list.$capability.reorder && this.list.addReorder(record);

				record.toolbar = document.createElement("div");
				if (this.list.selector.useColumnSelector) {
					var selectorSlot = record.cardContent.appendChild(document.createElement("div"));
					this.list.selector.appendToRecord(record, selectorSlot);
					record.toolbar.appendChild(selectorSlot);
				}

				record.cardContent.appendChild(record.toolbar);
				if (!this.list.$item.$isMenuRecordHidden) {
					record.menusSlot = document.createElement("div");
					record.toolbar.appendChild(record.menusSlot);
					this.list.applyCapabilitiesToRecord(record);
				}
				if (this.list.$item.$isRowIndexVisible || this.list.$capability.reorder || this.list.$item.$selectByRowIndex) {
					record.rowIndexBtn = document.createElement("div");
					record.toolbar.appendChild(record.rowIndexBtn);
					record.setRowIndex();
				}
			}
			record.dataSlot = record.body = record.cardContent.appendChild(document.createElement("div"));
			record.body.syrainout = record.id;
			if (this.list.selector.isRowMode) {
				record.body.syraOnClick = "onSelectorClick";
			}
			record.ensureLayoutMode();
			if (this.list.$item.renderRecordContent) {
				this.list.$item.renderRecordContent(record);
			} else {
				record.renderLayoutContent();
			}
			record.cardItem = record;
		}
		record.domItem.style.visibility = "";
	},
	record_onSelect: function(record, selected) {
		syra_dom.toggleClass(this.list.treeDecorator ? (record.treeNode.desc || record.treeNode.item) : record.domItem, "s-list-record-selected", selected);
		record.checkBox && syra_fields.checkbox.setValue(record, selected);
		if (selected && !this.list.selector.isMulti) {
			record.scrollToRecord();
		}
	},
	record_onAfterEnsureLayoutMode: function(record) {
		if (record.toolbar) {
			record.toolbar.className = record.$skin + "-toolbar";
		}
		if (record.rowIndexBtn) {
			record.rowIndexBtn.className = record.$skin + "-row-index";
			if (this.list.$item.$selectByRowIndex) {
				record.rowIndexBtn.className += " s-list-row-index-selector";
				record.rowIndexBtn.syraOnClick = "onSelectorClick";
			}
		}
		if (this.list.selector.isRowMode) {
			record.body.className += " s-list-selector-row";
		}
		if (record.menusSlot) {
			record.menusSlot.className = record.$skin + "-actions-cell s-record-actions";
		}
		record.cardContent.className = record.$skin + "-content";
	},
	record_highlightOnEnter: function(record, onEnter, event) {
		if (this.list.selector) {
			syra_dom.toggleClass(this.list.treeDecorator ? (record.treeNode.desc || record.treeNode.item) : record.domItem, "s-record-enter", onEnter);
			this.list.selector.onItemInOut(record, onEnter, event);
		}
	},
	onResizeArray: function() {
		if (syra_dom.isVisible(this.tableSlot)) {
			var container = this.tableSlot;
			var scrollview, adjustToScrollview = this.list.adjustToScrollPage;
			if (this.list.isMaximized) {
				scrollview = this.list.domItem.parentNode;
				adjustToScrollview = true;
			} else {
				scrollview = this.list.page.scrollview;
				if (this.list.page.vignetteField) {
					if (!this.list.page.vignetteField.isMaximized) {
						adjustToScrollview = false;
						scrollview = this.list.page.vignetteField.page.scrollview;
					}
				}
			}
			if (!this.list.tableRow) {
				container = this.tableSlot.parentNode; //if row tableSlott is cell so maxWidth
			}
			var maxHeight;
			if (this.list.$item.$fixedBodyHeight) {
				var height = this.tableSlot.clientHeight;
				this.tableSlot.style.height = ((Math.abs(parseInt(this.list.$item.$fixedBodyHeight, 10) - height) < 2) ? height : this.list.$fixedBodyHeight) + "px";
			} else {
				if (adjustToScrollview) {
					this.tableSlot.style.maxHeight = "";
					var bodyRect = this.tableSlot.getBoundingClientRect();
					var scrollH = scrollview.scrollHeight;
					var diff = scrollH - scrollview.clientHeight;
					if (diff > 0) {
						this.tableSlot.style.maxHeight = maxHeight = Math.max((bodyRect.height - diff) - 2, 50) + "px";
					}
				} else {
					if (this.list.$fitContainer) {
						if (!this.emptyDataItem.syraIsHidden) {
							this.tableSlot.style.height = "0px";
						} else {
							var top = this.tableSlot.scrollTop;
							var bodyRect = this.tableSlot.getBoundingClientRect();
							var slotRect = this.list.layoutSlot.getBoundingClientRect();
							var height = Math.max(slotRect.height - (bodyRect.top - slotRect.top), 0);
							this.tableSlot.style.height = height + "px";
							this.tableSlot.scrollTop = top;
						}
					} else {
						if (scrollview) {
							var maxH = scrollview.clientHeight;
							if (this.list.isLookUpList) {
								maxH = this.list.page.dialogWrapper._maxHeight;
							}
							this.tableSlot.style.maxHeight = maxHeight = maxH + "px"; //  Math.max(maxH - 75, 100) + "px";
						}
					}
				}
			}
		}
	},
	dispose: function(removeItem) {
		removeItem && syra_dom.removeChild(this.tableSlot);
		syra_dd.addToColResizers(this.list, false);
		syra_site.disposeObject(this);
	}
});