"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _gridCardBuilder = require('./gridMode/gridCardBuilder');
var _filterBuilder = require('./gridMode/tools/filterBuilder');
var _colResizer = require("./gridMode/tools/colResizer");
var _colsReorderer = require('./gridMode/tools/colsReorderer');
var _quickEditBuilder = require("./gridMode/tools/quickEditBuilder");
var _popupCardBuilder = require('./gridMode/popupCardBuilder');
var GridTable = require('./gridMode/gridTable').GridTable;

function _appendRowIndexCell(record, row) {
	var btn = record.rowIndexBtn = document.createElement("td");
	var css = record.list.cssRowIndex;
	if (record.list.$item.$selectByRowIndex) {
		css += " s-list-row-index-selector";
		btn.syraOnClick = "onSelectorClick";
	}
	if (record.list.$capability.reorder) {
		record.reorderBtn = record.rowIndexBtn;
		record.reorderBtn.syraReorderRecordId = record.list.id;
		css += " s-grid-record-reorder";
		record.rowIndexBtn.syraDragSpot = record.id;
	}
	btn.className = css;
	row.appendChild(btn);
	record.setRowIndex();
	return btn;
}

function _initializeFusionNavigationList(list) {
	list.$fitContainer = list.$item.$isNavigationList;
	list.isScrollButtonEnabled = false;
	list.$item.$isPickerMenuHidden = true;
	list.$isQuickDesignerDisabled = true;
	list.$item.$isMenuRecordHidden = true;
	list.isClientFetch = false;
	list.isClientSortEnable = true;
	list.isClientPagingPerPageDisable = true;
	list.discardFieldsGarbage = true;
	list.setFocus = function(select, name, $serverIndex) {
		var bar = this.page && this.page.fusionBar;
		return bar && name ? bar.setFocusBar(select, name) : true;
	};
}

function _hasFreezeField(list, $items) {
	if (!syra_quality.enableTestRobot && !list.isLookUpList) {
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			var $field = list.$fields[$item.$bind];
			if ($field && !$field.$isExcluded) {
				return ($item.$isFixed !== undefined) ? $item.$isFixed : $field.$isFixed;
			}
		}
	}
	return false;
}

function _addTitleRow(builder) {
	var list = builder.list;
	builder.allColumns = [];
	var $items = list.$item.$layout.$items;

	list.ensureGlobalMetaRecord(true);
	if (list.$item.$isQuickFilter) {
		if (builder.filterRecord) {
			builder.filterRecord.drawBox();
		} else {
			builder.filterRecord = _filterBuilder.addRecord(list);
		}
	}
	var hasFreezeField = _hasFreezeField(list, $items);
	var freezeTable = builder.freezeTable;

	if (list.treeDecorator) {
		freezeTable = builder.scrollTable;
		freezeTable.addTreeCol();
	} else {
		if (!_hasFreezeField(list, $items)) {
			freezeTable = builder.scrollTable;
		}
		if (list.$item.$isRowIndexVisible || list.$capability.reorder || list.$item.$selectByRowIndex) {
			freezeTable.addRowIndexCol();
		}
	}
	_gridCardBuilder.addRowCardCol(builder);
	list.selector.useColumnSelector && freezeTable.addSelectorColumn();
	!list.$item.$isMenuRecordHidden && freezeTable.addMenusCol();

	for (var ii = 0, jj = $items.length; ii < jj; ii++) {
		var $item = $items[ii];
		var $field = list.$fields[$item.$bind];
		if ($field && !$field.$isExcluded) {
			var $isFixed = ($item.$isFixed !== undefined) ? $item.$isFixed : $field.$isFixed;
			var col = ($isFixed ? freezeTable : builder.scrollTable).addFieldCol($item, $field);
			builder.filterRecord && builder.filterRecord.addFieldCell(col, $field);
		}
	}
	builder.filterRecord && builder.filterRecord.validateDisplay();
	_checkHeaderVisibility(builder);
}

function _checkHeaderVisibility(builder) {
	var isTitleRowVisible = false,
		isFilterVisible = false;
	for (var ii = 0, jj = builder.allColumns.length; ii < jj; ii++) {
		var col = builder.allColumns[ii];
		if (col.$field && !col.$field.$isExcluded) {
			if (!isTitleRowVisible && col.titleText) {
				isTitleRowVisible = true;
			}
			if (!col.$isHidden && col.$field.$hasFilterCapability) {
				isFilterVisible = true;
			}
		}
	}
	var filter = builder.filterRecord;
	if (filter && filter.isFilterVisible !== isFilterVisible) {
		filter.isFilterVisible = isFilterVisible;
		syra_site.dom.hide(filter.freezeRow, !isFilterVisible);
		syra_site.dom.hide(filter.dataRow, !isFilterVisible);
	}
	if (builder.isTitleRowVisible !== isTitleRowVisible) {
		builder.isTitleRowVisible = isTitleRowVisible;
		if (builder.freezeTable) {
			builder.freezeTable.headSlot.style.display = isTitleRowVisible ? "" : "none";
		}
		builder.scrollTable.headSlot.style.display = isTitleRowVisible ? "" : "none";
	}
}

function _addRow(builder, record) {
	var row = document.createElement("tr");
	row.syraItem = row.syrainout = record.id;
	row.syraRecord = record.$uuid;
	row.className = record.list.$skin + "-row";
	if (record.list.selector.isRowMode || builder.isOutCardMode) {
		row.syraOnClick = "onSelectorClick";
		row.className += " s-list-selector-row";
	}
	return row;
}

function _addHScroller(builder) {
	var page = builder.list.page;
	var scrollTable = builder.scrollTable;
	var freezeBody = builder.freezeTable && builder.freezeTable.bodySlot;
	if (builder.list.$item.$isDockedHeight || builder.list.$fitContainer) {
		scrollTable.bodySlot.style.overflowY = "auto";
	}
	builder.bodySlot_onScroll = scrollTable.bodySlot.addEventListener("scroll", function(event) {
		if (!syra_site.isInoutDisabled && page.isPageLoaded && !page._isDataChanging) {
			if (scrollTable.headSlot.scrollLeft != this.scrollLeft) {
				scrollTable.headSlot.scrollLeft = this.scrollLeft;
			}
			if (freezeBody.scrollTop != this.scrollTop) {
				freezeBody.scrollTop = this.scrollTop;
			}
		}
	});

}

function GridBuilder() {}

exports.GridBuilder = helpers.defineClass(GridBuilder, null, {
	initialize: function(list) {
		this.list = list;
		this.list.enableDefaultDesigner();
		list.$field.$isFusionNavigationList && _initializeFusionNavigationList(list);
		this.columnsMap = {};
		this.allColumns = [];
		_popupCardBuilder.load(this);
	},
	findEventCol: function(event) {
		var target = event.target;
		while (!target.syra_field_bind) {
			target = target.parentNode;
		}
		return this.columnsMap[target.syra_field_bind];
	},
	endInitiallize: function() {
		this.list.$defaultSkin = "s-" + this.list.$item.$format;
		this.list.$item.$isTopLabelAlignment = true;

		this.list.$complexBinds = [];
		var $colBinds = [];
		var defined = [];
		var $binds = Object.keys(this.list.$fields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var $field = this.list.$fields[$bind];
			if (!$field.$isExcluded && !($field.$viewScope && $field.$viewScope == "popup")) {
				switch ($field.$type) {
					case "application/x-variant":
						//need support for later
						break;
					case "application/x-tag-cloud":
					case "application/x-array":
					case "application/x-object":
					case "text/rtf":
					case "text/html":
					case "text/plain":
						this.list.$complexBinds.push($bind);
						break;
					default:
						$colBinds.push($bind);
						defined.push($bind);
						break;
				}
			}
		}

		if (!this.list.$item.$layout) {
			this.list.$item.$layout = (this.list.$designing && this.list.$designing.grid && this.list.$designing.grid.$layout) || {};
		}
		//define default columns

		var $items = this.list.$item.$layout.$items;
		if (!$items) {
			$items = this.list.$item.$layout.$items = [];
			for (var ii = 0, jj = $colBinds.length; ii < jj; ii++) {
				$items.push({
					$bind: $colBinds[ii]
				});
			}
		} else {
			//check items for having only colbinds
			if (!syra_site.mobileGateway) {
				var ii = 0,
					jj = $items.length;
				while (ii < jj) {
					var $item = $items[ii];
					if ($item && $item.$bind) {
						if ($colBinds.indexOf($item.$bind) < 0) {
							$items.splice(ii, 1);
							jj = $items.length;
							continue;
						} else {
							defined.splice(defined.indexOf($item.$bind), 1);
						}
					}
					ii++;
				}
				for (var ii = 0, jj = defined.length; ii < jj; ii++) {
					$items.push({
						$bind: defined[ii]
					});
				}
			}
		}
		if (this.list.$userPreferences && this.list.$userPreferences.$columns) {
			var source = this.list.$item.$layout.$items;
			this.list.$origColumns = [];
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				this.list.$origColumns.push($items[ii].$bind);
			}

			var $items = this.list.$item.$layout.$items = [];
			for (var ii = 0, jj = this.list.$userPreferences.$columns.length; ii < jj; ii++) {
				var $bind = this.list.$userPreferences.$columns[ii];
				for (var mm = 0, kk = source.length; mm < kk; mm++) {
					var $item = source[mm];
					if ($item.$bind == $bind) {
						source.splice(mm, 1);
						$items.push($item);
						break;
					}
				}
			}
			for (var ii = 0, jj = source.length; ii < jj; ii++) {
				$items.push(source[ii]);
			}
		}
		_gridCardBuilder.load(this);
	},

	list_scrollToRecordField: function(field) {
		var col = this.columnsMap[field.$item.$bind];
		if (col && !col.table.isFreeze) {
			this.list.page.scrollToItem(field.domItem, col.table.bodySlot, true);
		}
	},
	list_scrollToRecord: function(record) {
		if (record) {
			var view;

			if (this.list.$item && (this.list.$item.$isNavigationList || this.list.$item.$isSelBoxList)) {
				view = this.scrollTable.bodySlot;
			}
			record.page.scrollToItem(record.dataRow, view || record.page.scrollview, true);
		}

	},
	list_onAfterApplyDesignMetaData: function(metaData, designing) {
		if (designing && metaData.$cardPosition !== undefined) {
			_gridCardBuilder.applyDesignMetaData(this, metaData, designing);
		}
		this.list.applyGrapDesignMetaData && this.list.applyGrapDesignMetaData(metaData, designing);
		this.list.paging.applyMetadata(metaData, designing);
	},
	applyMetaDataRecords: function($meta) {
		var $binds = Object.keys($meta.$properties);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var col = this.columnsMap[$binds[ii]];
			col && col.table.applyColumnMetaData(col, $meta.$properties[$binds[ii]]);
		}
		_checkHeaderVisibility(this);
	},
	list_onItemInOut: function(onEnter, event, target) {
		if (target.syra_field_bind) {
			var col = this.findEventCol(event);
			if (this.list.isColReordering) {
				if (syra_dd.ddAgent && syra_dd.ddAgent.onColumnHeaderEnterLeave) {
					syra_dd.ddAgent.onColumnHeaderEnterLeave(this.columnsMap[target.syra_field_bind], onEnter);
				}
			}
			if (onEnter) {
				if (col.titleCell.syraResizerColId) {
					col.rect = col.titleCell.getBoundingClientRect();
				}
			}
		}
		this.list.selector.onItemInOut(this, onEnter, event, target);
	},
	list_onMouseMove: function(event) {
		var col = this.findEventCol(event);
		col && _colResizer.setCursor(col, event);
	},
	isDraggable: function(target, event) {
		if (target.syraResizerColId == this.list.id) {
			if (_colResizer.isDraggable(this.list, this.findEventCol(event), event)) {
				return;
			}
		}
		if (target.syraReorderColId == this.list.id) {
			_colsReorderer.isDraggable(this.list, this.findEventCol(event), event);
			return;
		} else {
			if (this.list.addSlotResizer(target, event)) {
				return;
			} else {
				return this.list.isReorderRecordDraggable(target, event);
			}
		}
		return null;
	},
	record_remove: function(record) {
		this.freezeTable && this.freezeTable.removeRow(record);
		this.scrollTable && this.scrollTable.removeRow(record);
		record.rowCard && syra_site.dom.removeChild(record.rowCard.row);
	},

	record_dispose: function(record) {
		_quickEditBuilder.onRecordDispose(record);
	},
	record_draw: function(record) {
		record.isGridRecord = true;
		record.$mnPickersCss = record.$mnPickersCss || "s-list-record-picker";
		record.$iconPath = this.list.$iconPath;
		record.$isVerticalDirection = true;
		record.domItem = record.dataRow = _addRow(this, record);
		if (this.allColumns[0].table.isFreeze) {
			record.freezeRow = _addRow(this, record);
		}
		record.fieldCellsMap = {};
		record.cellsMap = {};
		if (this.list.treeDecorator) {
			var col = this.columnsMap.$treeview;
			var td = record.cellsMap[col.key] = document.createElement("td");
			td.className = this.list.cssCell + " " + this.list.treeDecorator.cssNodeCell;
			if (this.list.$capability.reorder) {
				td.className += " s-tree-record-reorder";
				td.syraDragSpot = this.list.id;
			}
			record[col.table.$rowKey].appendChild(td);
			this.list.treeDecorator.addCardNode(record, td);
		} else {
			var before = record.insertBeforeRecord;
			if (before) {
				before.dataRow.parentNode.insertBefore(record.dataRow, before.dataRow);
				before.freezeRow && before.freezeRow.parentNode.insertBefore(record.freezeRow, before.freezeRow);
				delete record.insertBeforeRecord;
			} else {
				record.freezeRow && this.freezeTable.bodyTable.appendChild(record.freezeRow);
				this.scrollTable.bodyTable.appendChild(record.dataRow);
			}
		}

		var cssCell = this.list.cssCell;
		if (this.list.treeDecorator) {
			cssCell += " s-list-no-border";
		}
		for (var ii = 0, jj = this.allColumns.length; ii < jj; ii++) {
			var col = this.allColumns[ii];
			if (col == this.columnsMap.$rowIndex) {
				record.cellsMap[col.key] = _appendRowIndexCell(record, record[col.table.$rowKey]);
				continue;
			}
			if (col == this.columnsMap.rowCard) {
				record[col.table.$rowKey].appendChild(_gridCardBuilder.addRowCardOpener(record, col));
				continue;
			}
			if (col == this.columnsMap.$recordSelector) {
				var td = record.cellsMap[col.key] = document.createElement("td");
				td.className = this.list.cssCell;
				this.list.selector.appendToRecord(record, record[col.table.$rowKey].appendChild(td));
				continue;
			}
			if (col == this.columnsMap.$menus) {
				record.cellsMap[col.key] = record.menusSlot = document.createElement("td");
				record.menusSlot.className = this.list.cssCell + " " + this.list.$skin + "-actions-cell";
				record[col.table.$rowKey].appendChild(record.menusSlot);
				if (this.list.treeDecorator) {
					record.menusSlot.className += " s-list-tree-cell";
				}
				this.list.applyCapabilitiesToRecord(record);
				continue;
			}
			if (col.$bind) {
				var td = record.cellsMap[col.key] = document.createElement("td");
				td.className = cssCell;
				if (col.$isHidden) {
					td.style.display = "none";
				}
				/*record.fieldCellsMap[col.key] = record.page.loadNewItem(td, {
                 $bind: col.$bind,
                 $isCellChild: true,
                 $inplace: true
                 }, record);
                 */
				record.fieldCellsMap[col.key] = record.page.loadNewItem(td, col.$item, record);

				if (!this.list.$isEditMode && col.$field.$hasFilterCapability) {
					td.className += col.cssRecordCellFilter;
				}
				record[col.table.$rowKey].appendChild(td);
			}
		}

	},
	list_onAfterFill: function() {
		this.showOutCard && this.showOutCard();
	},
	list_onAfterDraw: function() {
		this.list.toggleSearcher(true);
		this.list.$skin = this.list.$item.$skin || this.list.$defaultSkin;
		this.list.cssCell = this.list.$skin + "-cell";
		if (this.list.$item.$cssCell) {
			this.list.cssCell += " " + this.list.$item.$cssCell;
		}
		if (this.list.$isEditMode) {
			this.list.cssCell += "-edit";
		}
		this.list.cssRowIndex = this.list.$skin + "-cell " + this.list.$skin + "-row-index";
		this.list._dataValue.style.overflow = "";
		this.tableSlot = document.createElement("div");
		this.tableSlot.className = "s-grid-slot";
		this.list._core.appendChild(this.tableSlot);

		this.list.ensureGrapDecorator();
		this.appendCardGraphSlots();


		this.list.applyDesignMetaData(this.list.$item, false);
		this.list.setState(this.list.$field);

		this.scrollTable = new GridTable();
		this.scrollTable.load(this);

		this.freezeTable = new GridTable();
		this.freezeTable.load(this, true);
		_addHScroller(this);

		this.slotTable = document.createElement("div");
		this.slotTable.className = "s-grid-slot-table";
		this.freezeTableSlot = document.createElement("div");
		this.freezeTableSlot.className = "s-grid-slot-table-freeze";
		this.freezeTableSlot.appendChild(this.freezeTable.headSlot);
		this.freezeTableSlot.appendChild(this.freezeTable.bodySlot);
		this.slotTable.appendChild(this.freezeTableSlot);

		var slot = document.createElement("div");
		slot.className = "s-grid-slot-table-scroll";
		slot.appendChild(this.scrollTable.headSlot);
		slot.appendChild(this.scrollTable.bodySlot);
		this.slotTable.appendChild(slot);

		this.list.body = this.scrollTable.bodyTable;

		this.tableSlot.appendChild(this.slotTable);
		this.emptyDataItem = document.createElement("div");
		this.emptyDataItem.className = this.list.$skin + "-empty-slot";
		this.emptyDataItem.style.display = "none";
		this.tableSlot.appendChild(this.emptyDataItem);


		this.list.loadSelector();
		this.list.applyCapabilities();
		_addTitleRow(this);

		this.list.cursor = "default";
		syra_dd.addToColResizers(this.list, true);
		this.list.endDrawBox();
	},
	appendCardGraphSlots: function() {
		var $cardItem = this.list.$item.$format != "cards" && this.list.$item.$cardItem;
		!$cardItem && _gridCardBuilder.removeOutSlot(this);

		if (!this.list.$item.$graphPosition) {
			this.list.removeGrapSlot && this.list.removeGrapSlot();
		}
		if (!$cardItem && !this.list.$item.$graphPosition) {
			if (this.list.tableRow) {
				syra_site.dom.moveChildNodes(this.list.tableRow, this.list._core);
				this.list._core.removeChild(this.list.tableRow);
				delete this.list.tableRow;
			}
		}
		if ($cardItem || this.list.$item.$graphPosition) {
			this.list.fitWidth = true;
			var hasRow = $cardItem && ($cardItem.$position == "left" || $cardItem.$position == "right");
			if (!hasRow) {
				hasRow = this.list.$item.$graphPosition && (this.list.$item.$graphPosition == "left" || this.list.$item.$graphPosition == "right");
			}
			if (hasRow) {
				if (!this.list.tableRow) {
					this.list.tableRow = document.createElement("div");
					this.list.tableRow.className = "s-grid-table-row";
					syra_site.dom.moveChildNodes(this.list._core, this.list.tableRow);
					this.list._core.appendChild(this.list.tableRow);
				}
			} else {
				if (this.list.tableRow) {
					syra_site.dom.moveChildNodes(this.list.tableRow, this.list._core);
					this.list._core.removeChild(this.list.tableRow);
					delete this.list.tableRow;
				}
			}
			$cardItem && _gridCardBuilder.addOutSlot(this);

			if (this.list.$item.$graphPosition) {
				this.list.addGrapSlot && this.list.addGrapSlot();
			}
		}
		if (this.list.tableRow) {
			this.tableSlot.className = "s-grid-slot-cell";
		} else {
			this.tableSlot.style.width = "";
			this.tableSlot.className = "s-grid-slot";
		}
	},
	toggleQuickEdit: function(record) {
		_quickEditBuilder.toggle(record);
	},
	loadInlinePage: function(record, $itemPage, options) {
		_quickEditBuilder.loadInlinePage(record, $itemPage, options);
	},
	getNextVisibleField: function($bind) {
		return this.getNextField($bind, true);
	},
	getNextFocusableField: function($bind) {
		return this.getNextField($bind, true, true);
	},
	getPreviousVisibleField: function($bind) {
		return this.getPreviousField($bind, true);
	},
	getPreviousFocusableField: function($bind) {
		return this.getPreviousField($bind, true, true);
	},
	getNextField: function($bind, visible, focusable) {
		var col = $bind && this.columnsMap[$bind];
		for (var ii = col ? this.allColumns.indexOf(col) + 1 : 0, jj = this.allColumns.length; ii < jj; ii++) {
			col = this.allColumns[ii];
			if (col.$bind) {
				if (!(col.$isHidden && (visible || focusable)) && !(col.$isDisabled && focusable) && (col.$field && col.$field.$type && col.$field.$type !== "image" && visible && focusable)) {
					break;
				}
			}
			col = null;
		}
		return (col && col.$bind) || $bind;
	},
	getPreviousField: function($bind, visible, focusable) {
		var col = $bind && this.columnsMap[$bind];
		for (var ii = col ? this.allColumns.indexOf(col) - 1 : this.allColumns.length - 1; ii >= 0; ii--) {
			col = this.allColumns[ii];
			if (col.$bind) {
				if ((col.$isHidden && (visible || focusable)) || (col.$isDisabled && focusable)) {
					col = null;
					continue;
				}
				break;
			}
		}
		return (col && col.$bind) || $bind;
	},
	list_emptyBody: function(addEmptySlot, onFetch) {
		this.freezeTable && this.freezeTable.empty();
		this.scrollTable.empty();
		if (addEmptySlot) {
			if (!this.list.isClientFetch && onFetch) {
				this.emptyDataItem.textContent = syra_local.flWaitingData;
			} else {
				this.emptyDataItem.textContent = this.list.$item.$noDataText || syra_local.flNoData;
			}
			this.emptyDataItem.syraIsDisplay = true;
			this.emptyDataItem.style.display = "";

		}
	},
	disposeRecordCard: function(record) {
		syra_menus.button.dispose(record.rowCardBtn);
		record.layoutSlot = record.layoutContent = record.domItem = record.body = record.rowCard = record.cardItem = null;
	},
	record_highlightOnEnter: function(record, onEnter, event) {
		if (this.list.selector) {
			if (record.treeNode) {
				syra_site.dom.toggleClass(record.treeNode.desc || record.treeNode.item, "s-record-enter", onEnter);
				for (var ii = 0, jj = this.allColumns.length; ii < jj; ii++) {
					var col = this.allColumns[ii];
					if (!col.$isHidden && !col.isTreeview && col.key) {
						syra_site.dom.toggleClass(record.cellsMap[col.key], "s-record-enter", onEnter);
					}
				}
			} else {
				record.freezeRow && syra_site.dom.toggleClass(record.freezeRow, "s-record-enter", onEnter);
				syra_site.dom.toggleClass(record.dataRow, "s-record-enter", onEnter);
			}
			this.list.selector.onItemInOut(record, onEnter, event);
		}
	},
	record_onSelect: function(record, selected) {
		if (this.list.treeDecorator) {
			syra_site.dom.toggleClass(record.treeNode.desc || record.treeNode.item, "s-list-record-selected", selected);
			for (var ii = 0, jj = this.allColumns.length; ii < jj; ii++) {
				var col = this.allColumns[ii];
				if (!col.$isHidden && !col.isTreeview && col.key) {
					syra_site.dom.toggleClass(record.cellsMap[col.key], "s-list-record-selected", selected);
				}
			}
		} else {
			syra_site.dom.toggleClass(record.dataRow, "s-list-record-selected", selected);
		}
		record.freezeRow && syra_site.dom.toggleClass(record.freezeRow, "s-list-record-selected", selected);
		record.checkBox && syra_fields.checkbox.setValue(record, selected);
		if (selected && !this.list.selector.isMulti) {
			this.showOutCard && this.showOutCard(record);
			record.scrollToRecord();
		}
	},
	dispose: function(removeItem) {
		if (removeItem) {
			syra_site.dom.removeChild(this.tableSlot);
			_gridCardBuilder.removeOutSlot(this);
		}
		syra_dd.addToColResizers(this.list, false);
		this.list && this.list.removeItem(this.filterRecord);
		_filterBuilder.dispose();
		_popupCardBuilder.dispose(this.list);
		_quickEditBuilder.dispose(this.list);
		syra_site.disposeObject(this.freezeTable);
		if (this.scrollTable) {
			this.bodySlot_onScroll && this.scrollTable.bodySlot.removeEventListener("scroll", this.bodySlot_onScroll);
			syra_site.disposeObject(this.scrollTable);
		}
		syra_site.disposeObject(this);
	},
	onResizeArray: function() {
		if (!this.list.isTableSlotHidden) {
			var container = this.tableSlot;
			var bodySlot = this.scrollTable.bodySlot;
			var scrollview, adjustToScrollview = this.list.adjustToScrollPage;
			if (this.list.isMaximized) {
				scrollview = this.list.domItem.parentNode;
				adjustToScrollview = true;
			} else {
				scrollview = this.list.page.scrollview;
				if (this.list.page.vignetteField) {
					if (!this.list.page.vignetteField.isMaximized) {
						adjustToScrollview = false;
						scrollview = this.list.page.vignetteField.page.scrollview;
					}
				}
			}
			if (!this.list.tableRow) {
				container = this.tableSlot.parentNode; //if row tableSlott is cell so maxWidth
			}
			if (scrollview) {
				var maxSlotWidth = container.clientWidth;
				var maxHeight;
				if (this.list.$item.$fixedBodyHeight) {
					var height = bodySlot.clientHeight;
					bodySlot.style.height = ((Math.abs(parseInt(this.list.$item.$fixedBodyHeight, 10) - height) < 2) ? height : this.list.$fixedBodyHeight) + "px";
				} else {
					if (adjustToScrollview) {
						bodySlot.style.maxHeight = "";
						var bodyRect = bodySlot.getBoundingClientRect();
						var scrollH = scrollview.scrollHeight;
						var diff = scrollH - scrollview.clientHeight;
						if (diff > 0) {
							bodySlot.style.maxHeight = maxHeight = Math.max((bodyRect.height - diff) - 2, 50) + "px";
						}
					} else {
						if (this.list.$fitContainer) {
							if (this.emptyDataItem.syraIsDisplay) {
								bodySlot.style.height = "0px";
							} else {
								var top = bodySlot.scrollTop;
								var bodyRect = bodySlot.getBoundingClientRect();
								var slotRect = this.list.layoutSlot.getBoundingClientRect();
								var height = Math.max(slotRect.height - (bodyRect.top - slotRect.top), 0);
								bodySlot.style.height = height + "px";
								bodySlot.scrollTop = top;
							}
						} else {
							if (scrollview) {
								var maxH = scrollview.clientHeight;
								if (this.list.isLookUpList) {
									maxH = this.list.page.dialogWrapper._maxHeight;
								}
								maxH -= this.scrollTable.headSlot.clientHeight;
								bodySlot.style.maxHeight = maxHeight = Math.max(maxH - 75, 100) + "px";
							}
						}
					}

				}
				if (this.emptyDataItem.syraIsDisplay && this.list.$item.$isTitleRowHidden) {
					this.tableSlot.style.maxWidth = this.emptyDataItem.clientWidth + "px";
				} else {
					var freezeWidth;
					if (this.freezeTable) {
						var table = this.list.$item.$isTitleRowHidden ? this.freezeTable.bodyTable : this.freezeTable.headTable;
						this.freezeTable.setColWidths();
						freezeWidth = table.getBoundingClientRect().width;
						this.freezeTableSlot.style.width = freezeWidth + "px";
						var hasMoved;
						while (this.freezeTable.columns.length && Math.max(maxSlotWidth - freezeWidth, 0) <= 300) {
							hasMoved = true;
							var col = this.freezeTable.columns.pop();
							freezeWidth -= col.colWidth;
							_colsReorderer.moveToSrollTable(col);
						}
						if (hasMoved) {
							freezeWidth = table.getBoundingClientRect().width;
							this.freezeTableSlot.style.width = freezeWidth + "px";
						}
					}
					var fitWidth; // = this.list.articleParent != this.list.page;
					var hasScollHeight = this.scrollTable.bodySlot.scrollHeight > (this.scrollTable.bodySlot.clientHeight + 1);
					if (fitWidth || this.list.fitWidth || this.list.isMaximized || this.list.$field.$isFusionNavigationList) {
						fitWidth = maxSlotWidth - freezeWidth;
						if (hasScollHeight) {
							fitWidth -= 18;
						}
					}
					var scrollLeft = bodySlot.scrollLeft;
					if (!scrollLeft) {
						scrollLeft = this.scrollTable.headSlot.scrollLeft;
					}
					this.scrollTable.setColWidths(fitWidth);

					if (hasScollHeight) {
						if (!this.scrollTable._headerCorner) {
							this.scrollTable._headerCorner = document.createElement("div");
							this.scrollTable._headerCorner.className = this.scrollTable.builder.list.$skin + "-head-corner";
							this.scrollTable.headSlot.parentNode.appendChild(this.scrollTable._headerCorner);
						}
						this.scrollTable._headerCorner.style.height = this.scrollTable.headSlot.clientHeight + "px";
						this.scrollTable._headerCorner.style.display = "";
					} else {
						if (this.scrollTable._headerCorner) {
							this.scrollTable._headerCorner.style.display = "none";
						}
					}
					this.scrollTable.headSlot.style[syra_site.isDocumentRTL ? "marginLeft" : "marginRight"] = hasScollHeight ? "17px" : "";
					bodySlot.style[syra_site.isDocumentRTL ? "paddingLeft" : "paddingRight"] = hasScollHeight ? "17px" : "";

					var scrollWidth = this.scrollTable.bodyTable.getBoundingClientRect().width;
					if (!scrollWidth) {
						scrollWidth = this.scrollTable.headTable.getBoundingClientRect().width;
					}
					scrollWidth += ((this.scrollTable._headerCorner && this.scrollTable._headerCorner.getBoundingClientRect().width) || 0);

					scrollWidth += (freezeWidth || 0);


					if (scrollWidth <= 1) {
						scrollWidth = "";
					}
					bodySlot.scrollLeft = scrollLeft;
					var freezeBody = this.freezeTable && this.freezeTable.bodySlot;
					if (freezeBody) {
						freezeBody.style.maxHeight = (maxHeight === undefined) ? "" : (bodySlot.clientHeight + "px");
					}
					this.tableSlot.style.maxWidth = scrollWidth + "px";
					if (!this.list.tableRow) {
						this.list.topbar.style.maxWidth = scrollWidth + "px";
					}
					if (!this._slotTableWidh) {
						this.slotTable.style.width = this._slotTableWidh = "100%";
					}
				}
			}
			if (this.records && this.isRowCardMode) {
				var maxWidth = this.scrollTable.bodySlot.clientWidth + "px";
				for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
					var record = this.records[ii];
					if (record.cardItem && record.body) {
						record.layoutSlot.style.maxWidth = maxWidth;
					}
				}
			}
		}
	},
	clearPreferences: function() {
		_colsReorderer.resetReorder(this.list);
		if (this.list.$userPreferences) {
			delete this.list.$userPreferences.$columnWidths;
		}
		if (this.list.page.isVignettePage) {
			for (var ii = 0, jj = this.allColumns.length; ii < jj; ii++) {
				if (this.allColumns[ii].$item) {
					delete this.allColumns[ii].$item.$width;
				}
			}
		}
	},
	toggleColWidthToContent: function() {

	},
	record_reorder: function(record, target, isAfter) {
		this.freezeTable && this.freezeTable.reorderRow(target, record, isAfter);
		this.scrollTable && this.scrollTable.reorderRow(target, record, isAfter);
		record.rowCard && record.dataRow.parentNode.insertBefore(record.rowCard.row, record.dataRow.nextSibling);
		if (this.list.quickEdit && this.list.quickEdit.record == record) {
			record.dataRow.parentNode.insertBefore(this.list.quickEdit.card.row, record.dataRow.nextSibling);
		}
	},
	onChildFieldFocus: function(field, isFocusIn) {
		var record = field.articleParent,
			self = this;
		if (record.rowIndexBtn && syra_site.isTabletDevice) {
			//for classicPage, esc is done by default on click
			// but escape is remove on field focusout it's too early so setTimeout ! 
			//quite ugly but if somebody find a best way without breaking the code, let's go !
			setTimeout(function() {
				self.tooggleEscape(record, isFocusIn);
			}, 200);
		}
	},
	tooggleEscape: function(record, isFocusIn) {
		syra_site.dom.toggleClass(record.rowIndexBtn, "s-grid-row-escape", record._hasEscapeRowButton = isFocusIn);
		record.setRowIndex();
	}
});