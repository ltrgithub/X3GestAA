"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

function RecordArticle() {}

exports.RecordArticle = helpers.defineClass(RecordArticle, Article, {
	loadBox: function(initData, isCreateAction) {
		if (this.list.builder && this.list.builder.record_onBeforeLoad) {
			this.list.builder.record_onBeforeLoad(this, initData, isCreateAction);
		}
		this._buttons = [];
		this.isRecordArticle = true;
		this.$defaultSkinSection = this.$defaultSkinSection || "s-h3";
		this.$defaultSkinBlock = this.$defaultSkinBlock || "s-h4";
		Article.prototype.loadBox.call(this, initData);
		if (this.list.builder && this.list.builder.onAfterLoadRecord) {
			this.list.builder.onAfterLoadRecord(this, initData, isCreateAction);
		}
	},
	drawBox: function() {
		if (this.list.builder) {
			this.list.builder.record_draw(this);
		} else {
			Article.prototype.drawBox.call(this);
		}
	},
	reorderItem: function(targetRecord, isAfter) {
		if (this.list.builder) {
			this.list.builder.record_reorder(this, targetRecord, isAfter);
		} else {
			Article.prototype.reorderItem.call(this, targetRecord, isAfter);
		}
	},
	dispose: function() {
		if (this.list) {
			if (this.list.focusedRecord == this) {
				this.list.focusedRecord = null;
			}
			this.list.builder && this.list.builder.record_dispose(this);
		}
		this._buttons = this.reorderBtnParent = this.$capability = this.garbage = this.list = this.menusSlot = this.reorderBtn = null;
		Article.prototype.dispose.call(this);
	},
	resizeArticle: function(doResize, boxParent) {
		Article.prototype.resizeArticle.call(this, doResize, boxParent);
		if (this.list.builder && this.list.builder.record_onAfterResize) {
			this.list.builder.record_onAfterResize(this, doResize, boxParent);
		}
	},
	ensureLayoutMode: function() {
		Article.prototype.ensureLayoutMode.call(this);
		if (this.list.builder && this.list.builder.record_onAfterEnsureLayoutMode) {
			this.list.builder.record_onAfterEnsureLayoutMode(this);
		}
	},
	loadInlinePage: function($itemPage, options) {
		this.list.builder.loadInlinePage(this, $itemPage, options);
	},
	//only for grid record
	onRowCardClick: function(event, btn) {
		this.list.builder.cardDecorator.onRowCardOpenerClick(btn, this);
	},
	onAddButton: function(btn) {
		this._buttons.push(btn);
	},
	setRowIndex: function() {
		if (this.rowIndexBtn && this.$serverIndex != undefined) {
			this.rowIndexBtn.textContent = this._hasEscapeRowButton ? "" : (this.$serverIndex + 1);
		}
	},
	onAddMenuItem: function($bind, $menu) {
		if (this.menusSlot) {
			var item = this.page.loadNewItem(null, {
				$bind: $bind,
				$category: "link",
				$skin: this.list.$itemRecordMenuSkin,
				$menu: $menu,
				$icon: {
					$mode: "icon",
					$path: this.list.$iconPath
				}
			}, this);
			if ($bind == "$edit") {
				var $delete = this.menuItems.$delete && this.menuItems.$delete[0];
				this.menusSlot.insertBefore(item.domItem, ($delete && $delete.domItem) || null);
			} else {
				this.menusSlot.appendChild(item.domItem);
			}
			item.domItem && this.onAddButton(item.domItem);
			item.layoutSlot = this.menusSlot;
			delete item.$item.$menu;
			return item;
		}
	},
	onAddMenuPicker: function(btn) {
		this.menusSlot && this.menusSlot.appendChild(btn);
		this.onAddButton(btn);
	},
	remove: function() {
		if (this.list.builder && this.list.builder.record_remove) {
			this.list.builder.record_remove(this);
		} else {
			syra_site.dom.removeChild(this.domItem);
		}

	},
	getRecordIndex: function() {
		return this.list.records.indexOf(this);
	},
	onTreeNodeClick: function(event, btn) {
		this.list.treeDecorator.onNodeEvent(this, event, btn);
	},

	onSelectorClick: function(event, btn) {
		this.list.onSelectorClick(event, btn);
	},
	getTreeNode: function() {
		if (this.list.treeDecorator && this.list.treeDecorator._uuidNodes) {
			return this.list.treeDecorator._uuidNodes[this.$uuid];
		}
		return null;
	},
	ensureDataSet: function($uuid) {
		var listDataset = this.articleParent.dataset;
		if ($uuid !== undefined) {
			for (var ii = 0, jj = listDataset.length; ii < jj; ii++) {
				if (listDataset[ii].$uuid == $uuid) {
					this.dataset = listDataset[ii];
					this.$serverIndex = this.dataset.$serverIndex;
					break;
				}
			}
		} else {
			if (!this.dataset || this.dataset.$serverIndex != this.$serverIndex) {
				for (var ii = 0, jj = listDataset.length; ii < jj; ii++) {
					if (listDataset[ii].$serverIndex == this.$serverIndex) {
						this.dataset = listDataset[ii];
						break;
					}
				}
			}
		}
		if (!this.dataset) {
			this.dataset = {};
		}
		return this.dataset;
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$item.$bind == "$delete") {
			if (this.list.$confirmDelete) {
				menuItem.$confirm = this.list.$confirmDelete;
			}
		}
		var record_onMenuClick = this.list.builder && this.list.builder.record_onMenuClick;
		return !record_onMenuClick || record_onMenuClick(this, menuItem);
	},
	applyChange: function(metaData) {
		if (metaData) {
			//if (metaData.$properties !== undefined || metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
			if (metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
				var $propertiesMetaData = metaData.$properties || {};
				var $binds = Object.keys(this.boundFields);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var fields = this.boundFields[$bind];
					var $fieldMeta = $propertiesMetaData[$bind] || {};
					if ($fieldMeta.$isReadOnly === undefined && metaData.$isReadOnly !== undefined) {
						$fieldMeta.$isReadOnly = metaData.$isReadOnly;
					}
					if ($fieldMeta.$isDisabled === undefined && metaData.$isDisabled !== undefined) {
						$fieldMeta.$isDisabled = metaData.$isDisabled;
					}
					if ($fieldMeta.$fieldStyle === undefined && metaData.$fieldStyle !== undefined) {
						$fieldMeta.$fieldStyle = metaData.$fieldStyle;
					}
					if ($fieldMeta.$valueStyle === undefined && metaData.$valueStyle !== undefined) {
						$fieldMeta.$valueStyle = metaData.$valueStyle;
					}
					if ($fieldMeta.$titleStyle === undefined && metaData.$titleStyle !== undefined) {
						$fieldMeta.$titleStyle = metaData.$titleStyle;
					}
					for (var kk = 0, mm = fields.length; kk < mm; kk++) {
						fields[kk].setDataBind(undefined, metaData, $fieldMeta, $bind);
					}
				}
			}
			if (metaData.$capabilities !== undefined) {
				this.list.capabilityMaker.applyToRecord(this);
			}
			if (this.list.selector && metaData.$isSelected !== undefined) {
				this.list.selector.onRecordBeforeApplyChange(this, metaData.$isSelected);
			}
			Article.prototype.applyChange.call(this, metaData);

			this.list.builder && this.list.builder.record_onAfterApplyChange(this, metaData);
		}
	},
	onFieldInputEvent: function(event, shortcuts) {
		this.list.selector && this.list.selector.onFieldInputEvent(this, event);
	},
	onItemInOut: function(onEnter, event, target) {
		if (!this.list.$item.$isHoverDisabled) {
			if (this.list.builder && this.list.builder.record_onItemInOut) {
				this.list.builder.record_onItemInOut(this, onEnter);
			} else {
				if (this.list.selector) {
					syra_site.dom.toggleClass(this.list.treeDecorator ? (this.treeNode.desc || this.treeNode.item) : this.domItem, "s-record-enter", onEnter);
				}
			}
			for (var ii = 0, jj = this._buttons.length; ii < jj; ii++) {
				syra_site.dom.toggleClass(this._buttons[ii], "s-enter", onEnter);
			}
			this.list.selector && this.list.selector.highlightOnEnter(this, onEnter, event, target);
		}
	},
	showRecordSelection: function(selected) {
		syra_site.dom.toggleClass(this.list.treeDecorator ? (this.treeNode.desc || this.treeNode.item) : this.domItem, "s-list-record-selected", selected);
		selected && this.list.setFocusRecord(this);
		if (this.list.builder && this.list.builder.record_onShowSelection) {
			this.list.builder.record_onShowSelection(this, selected);
		}
		this.checkBox && syra_fields.setCheckBockValue(this, selected);

		if (selected && !this.list.selector.isMulti) {
			syra_page.scrollToItem(this.list.page, this);
		}
	},
	applyMetaData: function(metaData) {}
});