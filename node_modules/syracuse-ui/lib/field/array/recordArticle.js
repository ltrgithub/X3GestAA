"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

function RecordArticle(){
}

exports.RecordArticle = helpers.defineClass(RecordArticle, Article, {
    loadBox: function(initData){
        this.isRecordArticle = true;
        this.$defaultSkinBlock = "s-h3";
        this.$defaultSkinSection = "s-h3";
        Article.prototype.loadBox.call(this, initData);
    },
    ensureDataSet: function(){
        if (!this.dataset || this.dataset.$serverIndex != this.$serverIndex) {
            this.dataset = {};
            for (var ii = 0, jj = this.articleParent.dataset.length; ii < jj; ii++) {
                if (this.articleParent.dataset[ii].$serverIndex == this.$serverIndex) {
                    this.dataset = this.articleParent.dataset[this.$serverIndex];
                    break;
                }
            }
            if (!this.dataset) {
                this.dataset = {};
            }
        }
        return this.dataset;
    },
    onMenuClick: function(menuItem){
    
        return true;
    },
    onMenuDataFilled: function(menuItem){
        if (menuItem.$item.$bind == "$edit") {
            if (!menuItem.boxParent.isMenuGroup) {
                menuItem.contextField = this;
                if (this.builder.setMenusBoxCol) {
                    this.builder.setMenusBoxCol("$edit", true, 18);
                }
            }
        }
        else {
            if (menuItem.boxParent.isMenuGroup) {
                var menuGroupRoot = menuItem.boxParent.menuGroupRoot;
                if (menuGroupRoot.id == (this.id + "-menu-picker")) {
                    if (!menuGroupRoot.$isPickerVisible) {
                        if (this.builder.setMenusBoxCol) {
                            this.builder.setMenusBoxCol("menu", true, 22);
                        }
                        this._menusSlot.style.display = "";
                        menuGroupRoot.$isPickerVisible = true;
                    }
                    if (!menuItem.$item.$isTop && !menuGroupRoot.isAddinMenus) {
                        menuGroupRoot.isAddinMenus = true;
                        menuGroupRoot.layoutContent.items[0].layoutSlot.className += " s-record-menus-addins";
                    }
                }
            }
        }
    },
    _createMenusBox: function(){
        var $menuBag = {
            $isMenusBag: true,
            $category: "menus",
            $noText: true,
            $title: this.list.localize.flActions,
            $isTitlePicker: true,
            $isBoxCollapsable: true,
            $isPopupContent: true,
            $id: this.id + "-menu-picker",
            $skin: "s-record-menus",
            $layout: {
                $items: [{
                    $layoutType: "stack",
                    $items: [{
                        $bind: "$create",
                        $isTop: true,
                        $icon: {
                            $mode: "iconText",
                            $path: "site/s-list-popup-"
                        }
                    }                    /*, {
                     $bind: "$edit",
                     $isTop: true,
                     $icon: {
                     $mode: "iconText",
                     $path: "site/s-list-popup-"
                     }
                     }*/
                    , {
                        $bind: "$delete",
                        $isTop: true,
                        $icon: {
                            $mode: "iconText",
                            $path: "site/s-list-popup-"
                        }
                    }, {
                        $bind: "$details",
                        $isTop: true,
                        $icon: {
                            $mode: "iconText",
                            $path: "site/s-list-popup-"
                        }
                    }, {
                        $bind: "$print",
                        $isTop: true
                    }]
                }]
            }
        };
        if (this.list.$item.$cards && this.list.$item.$cards.$position == "popup") {
            $menuBag.$layout.$items[0].$items.push({
                $bind: "$recordCard",
                $isTop: true,
                $icon: {
                    $mode: "iconText",
                    $path: "site/s-list-popup-"
                }
            });
        }
        if (!this.disableEditMenu) {
            $menuBag = {
                $layoutType: "row",
                $autoSize: true,
                $items: [{
                    $noText: true,
                    $category: "link",
                    $bind: "$edit",
                    $skin: "s-record-action-edit"
                }, $menuBag]
            };
        }
        document.site.toggleClass(this._menusSlot, "s-record-actions", true);
        this.page.loadNewItem(this._menusSlot, $menuBag, this);
        this.menusBox = this.idMap[this.id + "-menu-picker"];
        this.menusBox.contextField = this;
    },
    applyActionLinkChange: function(resources){
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            if (!this.menusBox && !this.list.$item.$isMenuRecordHidden) {
                this._createMenusBox();
            }
        }
        Article.prototype.applyActionLinkChange.call(this, resources);
    },
    applyStyleChange: function(metaData){
        if (metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
            var updated;
            metaData.$properties = metaData.$properties || {};
            if (metaData.$isReadOnly !== this.$isReadOnly) {
                this.$isReadOnly = metaData.$isReadOnly;
                updated = true;
            }
            if (metaData.$isDisabled !== this.$isDisabled) {
                this.$isDisabled = metaData.$isDisabled;
                updated = true;
            }
            if (metaData.$fieldStyle !== this.$fieldStyle) {
                this.$fieldStyle = metaData.$fieldStyle;
                updated = true;
            }
            if (metaData.$valueStyle !== this.$valueStyle) {
                this.$valueStyle = metaData.$valueStyle;
                updated = true;
            }
            if (metaData.$titleStyle !== this.$titleStyle) {
                this.$titleStyle = metaData.$titleStyle;
                updated = true;
            }
            if (updated) {
                var $binds = Object.keys(this.$prototype.$properties);
                for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                    var $bind = $binds[ii];
                    metaData.$properties[$bind] = metaData.$properties[$bind] || {};
                    if (metaData.$isReadOnly !== undefined) {
                        metaData.$properties[$bind].$isReadOnly = this.$isReadOnly;
                    }
                    if (metaData.$isDisabled !== undefined) {
                        metaData.$properties[$bind].$isDisabled = this.$isDisabled;
                    }
                    if (metaData.$fieldStyle !== undefined) {
                        metaData.$properties[$bind].$fieldStyle = this.$fieldStyle;
                    }
                    if (metaData.$valueStyle !== undefined) {
                        metaData.$properties[$bind].$valueStyle = this.$valueStyle;
                    }
                    if (metaData.$titleStyle !== undefined) {
                        metaData.$properties[$bind].$titleStyle = this.$titleStyle;
                    }
                }
            }
        }
    },
    applyChange: function(metaData){
        this.applyStyleChange(metaData);
        if (this.$syraLoaded) {
            if (metaData.$isSelected) {
                if (this.list.selector.onSelect) {
                    this.list.selector.onSelect({
                        uuidTarget: this.$uuid,
                        isSelected: metaData.$isSelected
                    });
                }
            }
            else {
                if (metaData.$isSelected !== undefined) {
                    /* Only for multi because unselect on single is managed by onSelect  */
                    if (this.list.selector.onUnSelect) {
                        this.list.selector.onUnSelect({
                            uuidTarget: this.$uuid,
                            isSelected: metaData.$isSelected
                        });
                    }
                }
            }
        }
        else {
            if (metaData.$isSelected) {
                if (this.list.selector.select) {
                    this.list.selector.select(this.$uuid, metaData.$isSelected);
                }
            }
        }
        Article.prototype.applyChange.call(this, metaData);
    },
    renderRowIndex: function(){
        if (this._rowIndexCell) {
            this._rowIndexCell.textContent = this.$serverIndex + 1;
        }
    },
    applyMetaData: function(metaData){
    },
    dispose: function(){
        if (this.treeNode) {
            this.treeNode.onRemoveRecord();
        }
        this.menusBox = this.page = this.list = this.builder = null;
        Article.prototype.dispose.call(this);
    }
});
