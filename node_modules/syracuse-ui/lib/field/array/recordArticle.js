"use strict";
var _helpers = require('syracuse-core').helpers;

function RecordArticle() {}

exports.RecordArticle = _helpers.defineClass(RecordArticle, null, {
	getTitle: function() {
		return "";
	},
	highlightOnEnter: function(onEnter, event) {
		if (onEnter) {
			if (syra_site.highlightedRecord && syra_site.highlightedRecord != this) {
				syra_site.highlightedRecord.highlightOnEnter(false);
			}
			syra_site.highlightedRecord = this;
		} else {
			if (syra_site.highlightedRecord == this) {
				delete syra_site.highlightedRecord;
			}
		}
		if (!this.disposed) {
			if (this.list.builder.record_highlightOnEnter) {
				this.list.builder.record_highlightOnEnter(this, onEnter, event);
			} else {
				this.list.selector && this.list.selector.onItemInOut(this, onEnter, event);
				syra_dom.toggleClass(this.domItem, "s-record-enter", onEnter);
			}
		}
	},
	loadBox: function(initData, isCreateAction) {
		if (this.list.builder.record_onBeforeLoad) {
			this.list.builder.record_onBeforeLoad(this, initData, isCreateAction);
		}
		this.isRecordArticle = true;
		this.$defaultSkinSection = this.$defaultSkinBlock = "s-h3";
		syra_article.beforeDraw(this);
		this.drawRecord();
		syra_article.endDraw(this, initData);
		if (this.list.builder.onAfterLoadRecord) {
			this.list.builder.onAfterLoadRecord(this, initData, isCreateAction);
		}
	},
	drawRecord: function() {
		this.list.builder.record_draw(this);
	},
	reorderItem: function(targetRecord, isAfter) {
		this.list.builder && this.list.builder.record_reorder(this, targetRecord, isAfter);
	},
	renderLayoutContent: function() {
		this.layoutContent = this.page.addItem(this.body, this.$item.$layout, this);
	},
	dispose: function() {
		if (syra_site.highlightedRecord == this) {
			delete syra_site.highlightedRecord;
		}
		this.list.builder.record_dispose && this.list.builder.record_dispose(this);
		syra_article.dispose(this);
	},
	ensureLayoutMode: function() {
		this.$skin = this.$skin || this.$item.$skin;
		if (this.domItem) {
			var domItemCss = this.$skin;
			var headerCss = this.$skin + "-head";
			var domTitleCss = this.$skin + "-title";
			var bodyCss = this.$skin + "-body";
			if (this.$item.$css) {
				var $css = " " + this.$item.$css;
				domItemCss += $css;
				bodyCss += $css;
				headerCss += $css;
				domTitleCss += $css;
			}
			if (this.$item.$style) {
				var $style = " s-cst-sty-" + this.$item.$style;
				domItemCss += $style;
				headerCss += $style;
				domTitleCss += $style;
				bodyCss += $style;
			}

			this.domItem.className = domItemCss;
			if (this.body) {
				this.body.className = bodyCss;
			}
			if (this.domTitle) {
				this.domTitle.className = domTitleCss;
			}
			if (this.header) {
				this.header.className = headerCss;
			}
		}
		if (this.list.builder.record_onAfterEnsureLayoutMode) {
			this.list.builder.record_onAfterEnsureLayoutMode(this);
		}
	},
	setRowIndex: function() {
		if (this.rowIndexBtn && this.$serverIndex != undefined) {
			this.rowIndexBtn.textContent = this._hasEscapeRowButton ? "" : (this.$serverIndex + 1);
		}
	},
	onAddMenuItem: function($bind, $menu) {
		if (this.menusSlot) {
			var item = this.page.addItem(null, {
				$bind: $bind,
				$category: "link",
				$skin: this.list.$itemRecordMenuSkin || "s-list-record-picker",
				$menu: $menu,
				$icon: {
					$mode: "icon",
					$path: this.list.$iconPath
				}
			}, this);
			if ($bind == "$edit") {
				var $delete = this.menuItems.$delete && this.menuItems.$delete[0];
				this.menusSlot.insertBefore(item.domItem, ($delete && $delete.domItem) || null);
			} else {
				this.menusSlot.appendChild(item.domItem);
			}
			item.layoutSlot = this.menusSlot;
			delete item.$item.$menu;
			return item;
		}
	},
	onAddMenuPicker: function(btn) {
		this.menusSlot && this.menusSlot.appendChild(btn.link);
	},
	remove: function() {
		if (this.list.builder.record_remove) {
			this.list.builder.record_remove(this);
		} else {
			syra_dom.remove(this.domItem);
		}

	},
	getRecordIndex: function() {
		if (this.list && this.list.records) {
			return this.list.records.indexOf(this);
		}
		return -1;
	},
	onSelectorClick: function(event, btn) {
		this.list.onSelectorClick(event, btn);
	},
	onMenuClick: function(options) {
		if (options.menu.$item.$bind == "$delete") {
			if (this.list.$confirmDelete) {
				options.menu.$confirm = this.list.$confirmDelete;
			}
		}
		if (this.list.builder.record_onMenuClick) {
			return this.list.builder.record_onMenuClick(this, options);
		}
		return true;
	},
	applyChange: function(metaData, serverResponse) {
		if (metaData) {
			if (this.list.builder.record_onBeforeApplyChange) {
				this.list.builder.record_onBeforeApplyChange(this, metaData, serverResponse);
			}
			if (metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
				if (metaData.$isReadOnly !== undefined) {
					this.$isReadOnly = metaData.$isReadOnly;
				}
				if (metaData.$isDisabled !== undefined) {
					this.$isDisabled = metaData.$isDisabled;
				}


				var $propertiesMetaData = metaData.$properties || {};
				var $binds = Object.keys(this.boundFields);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var fields = this.boundFields[$bind];
					var $fieldMeta = $propertiesMetaData[$bind] || {};
					if ($fieldMeta.$isReadOnly === undefined && metaData.$isReadOnly !== undefined) {
						$fieldMeta.$isReadOnly = metaData.$isReadOnly;
					}
					if ($fieldMeta.$isDisabled === undefined && metaData.$isDisabled !== undefined) {
						$fieldMeta.$isDisabled = metaData.$isDisabled;
					}
					if ($fieldMeta.$fieldStyle === undefined && metaData.$fieldStyle !== undefined) {
						$fieldMeta.$fieldStyle = metaData.$fieldStyle;
					}
					if ($fieldMeta.$valueStyle === undefined && metaData.$valueStyle !== undefined) {
						$fieldMeta.$valueStyle = metaData.$valueStyle;
					}
					if ($fieldMeta.$titleStyle === undefined && metaData.$titleStyle !== undefined) {
						$fieldMeta.$titleStyle = metaData.$titleStyle;
					}
					for (var kk = 0, mm = fields.length; kk < mm; kk++) {
						fields[kk].setValue(undefined, $fieldMeta, metaData);
					}
				}
			}
			if (metaData.$capabilities !== undefined) {
				this.list.applyCapabilitiesToRecord(this);
			}
			if (this.list.selector && metaData.$isSelected !== undefined) {
				this.list.selector.applyChange(this, metaData.$isSelected);
			}

			syra_article.applyChange(this, metaData);

			if (this.list.builder.record_onAfterApplyChange) {
				this.list.builder.record_onAfterApplyChange(this, metaData);
			}

			var disabled = this.$isReadOnly || this.$isDisabled;
			if (this.isPickersDisabled != disabled) {
				this.isPickersDisabled = disabled;
				syra_button.disable(this.picker_$quickEdit, this.isPickersDisabled);
				syra_button.disable(this.picker_$edit, this.isPickersDisabled);
				if (!this.page.isFusionPage) {
					syra_button.disable(this.picker_$delete, this.isPickersDisabled);
					syra_button.disable(this.picker_$create, this.isPickersDisabled);
				}
				if (this.isSingleRecord) {
					var menuItems = this.menuItems;
					if (menuItems) {
						menuItems.$delete && menuItems.$delete[0] && menuItems.$delete[0].disable(this.isPickersDisabled);
					}
				}
			}
			syra_button.disable(this.picker_menus, this.$isDisabled);
		}
	},
	onFieldInputEvent: function(event, shortcuts) {
		this.list.selector && this.list.selector.onFieldInputEvent(this, event);
	},
	onItemInOut: function(onEnter, event, target) {
		if (!this.list.$item.$isHoverDisabled) {
			if (this.list.builder.record_onItemInOut) {
				this.list.builder.record_onItemInOut(this, onEnter, event, target);
			} else {
				this.list.builder.record_highlightOnEnter(this, onEnter, event, target);
			}
			if (this.reorderBtn) {
				syra_dom.toggleClass(this.reorderBtn, "s-enter", onEnter && !this.$isDisabled);
			}
		}
	},
	scrollToRecord: function() {
		if (this.list.builder.list_scrollToRecord) {
			this.list.builder.list_scrollToRecord(this);
		} else {
			this.page.scrollToItem(this);
		}
	}
});