"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

function RecordArticle() {}

exports.RecordArticle = helpers.defineClass(RecordArticle, Article, {
	loadBox: function(initData) {
		this.isRecordArticle = true;
		this.localize = this.list.localize;
		this.$defaultSkinSection = this.$defaultSkinSection || "s-h3";
		this.$defaultSkinBlock = this.$defaultSkinBlock || "s-h4";
		Article.prototype.loadBox.call(this, initData);
	},
	onClickPicker: function(picker, event) {
		switch (picker.getAttribute("data-s-picker")) {
			case "grid-rowcard":
				this.list.cardDecorator.onRowCardOpenerClick(picker);
				break;
			case "list-selector":
				return this.list.onClickPicker(picker, event);
			case "list-tree-picker":
				return this.list.onClickPicker(picker, event);
		}
		return true;
	},
	getTreeNode: function() {
		if (this.list.treeDecorator && this.list.treeDecorator._uuidNodes) {
			return this.list.treeDecorator._uuidNodes[this.$uuid];
		}
		return null;
	},
	ensureDataSet: function($uuid) {
		var listDataset = this.articleParent.dataset;
		if ($uuid !== undefined) {
			for (var ii = 0, jj = listDataset.length; ii < jj; ii++) {
				if (listDataset[ii].$uuid == $uuid) {
					this.dataset = listDataset[ii];
					this.$serverIndex = this.dataset.$serverIndex;
					break;
				}
			}
		} else {
			if (!this.dataset || this.dataset.$serverIndex != this.$serverIndex) {
				for (var ii = 0, jj = listDataset.length; ii < jj; ii++) {
					if (listDataset[ii].$serverIndex == this.$serverIndex) {
						this.dataset = listDataset[ii];
						break;
					}
				}
			}
		}
		if (!this.dataset) {
			this.dataset = {};
		}
		return this.dataset;
	},
	onMenuClick: function(menuItem) {
		return true;
	},
	setMenusBoxCol: function($quickAction, add, width) {},
	_clearMenuItems: function() {
		Article.prototype._clearMenuItems.call(this);
		this.setMenusBoxCol("$edit", false, 18);
		if (this.menusBox && this.menusBox.$isPickerVisible) {
			this.setMenusBoxCol("menu", false, 22);
			this.menusSlot.style.display = "none";
			(this.menusBox.layoutParent ? this.menusBox.layoutParent : this).removeItem(this.menusBox, true);
			this.removeMenuBag(this.menusBox);
			delete this.menusBox;
		}
	},
	onMenuDataFilled: function(menuItem) {
		if (menuItem.$item.$bind == "$edit") {
			if (!menuItem.boxParent.isMenuGroup) {
				menuItem.contextField = this;
				this.setMenusBoxCol("$edit", true, 18);
			}
		} else {
			if (menuItem.boxParent.isMenuGroup) {
				var menuGroupRoot = menuItem.boxParent.menuGroupRoot;
				if (menuGroupRoot.id == (this.id + "-menu-picker")) {
					if (!menuGroupRoot.$isPickerVisible) {
						this.setMenusBoxCol("menu", true, 22);
						this.menusSlot.style.display = "";
						menuGroupRoot.$isPickerVisible = true;
					}
				}
			}
		}
	},
	_createMenusBox: function() {
		var $menuBag = {
			$isMenusBag: true,
			$category: "menus",
			$noText: true,
			$title: this.list.localize.flActions,
			$isTitlePicker: true,
			$isBoxCollapsable: true,
			$isPopupContent: true,
			$clientId: this.id + "-menu-picker",
			$skin: "s-record-menus",
			$layout: {
				$items: [{
					$layoutType: "stack",
					$items: [{
						$bind: "$create",
						$icon: {
							$mode: "iconText",
							$path: "list/s-list-"
						}
					}, {
						$bind: "$delete",
						$icon: {
							$mode: "iconText",
							$path: "list/s-list-"
						}
					}, {
						$bind: "$details",
						$icon: {
							$mode: "iconText",
							$path: "list/s-list-"
						}
					}, {
						$bind: "$print"
					}]
				}]
			}
		};
		if (this.list.$popupCard) {
			$menuBag.$layout.$items[0].$items.push({
				$bind: "$recordCard",
				$icon: {
					$mode: "iconText",
					$path: "list/s-list-"
				}
			});
		}
		if (!this.disableEditMenu) {
			$menuBag = {
				$layoutType: "row",
				$autoSize: true,
				$items: [{
						$noText: true,
						$category: "link",
						$bind: "$edit",
						$skin: "s-record-action-edit"
					},
					$menuBag
				]
			};
		}
		document.site.toggleClass(this.menusSlot, "s-record-actions", true);
		this.page.loadNewItem(this.menusSlot, $menuBag, this);
		this.menusBox = this.idMap[this.id + "-menu-picker"];
		this.menusBox.contextField = this;
	},
	applyActionLinkChange: function(resources) {
		if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
			if (!this.menusBox && !this.list.$item.$isMenuRecordHidden && resources.$links !== null) {
				this._createMenusBox();
			}
		}
		Article.prototype.applyActionLinkChange.call(this, resources);
	},
	applyChange: function(metaData) {
		if (metaData) {
			//if (metaData.$properties !== undefined || metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
			if (metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
				var $propertiesMetaData = metaData.$properties || {};
				var $binds = Object.keys(this.boundFields);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var fields = this.boundFields[$bind];
					var $fieldMeta = $propertiesMetaData[$bind] || {};
					if ($fieldMeta.$isReadOnly === undefined && metaData.$isReadOnly !== undefined) {
						$fieldMeta.$isReadOnly = metaData.$isReadOnly;
					}
					if ($fieldMeta.$isDisabled === undefined && metaData.$isDisabled !== undefined) {
						$fieldMeta.$isDisabled = metaData.$isDisabled;
					}
					if ($fieldMeta.$fieldStyle === undefined && metaData.$fieldStyle !== undefined) {
						$fieldMeta.$fieldStyle = metaData.$fieldStyle;
					}
					if ($fieldMeta.$valueStyle === undefined && metaData.$valueStyle !== undefined) {
						$fieldMeta.$valueStyle = metaData.$valueStyle;
					}
					if ($fieldMeta.$titleStyle === undefined && metaData.$titleStyle !== undefined) {
						$fieldMeta.$titleStyle = metaData.$titleStyle;
					}
					for (var kk = 0, mm = fields.length; kk < mm; kk++) {
						fields[kk].setDataBind(undefined, metaData, $fieldMeta, $bind);
					}
				}
			}
			if (metaData.$isSelected !== undefined) {
				this.select(metaData.$isSelected);
			}
			Article.prototype.applyChange.call(this, metaData);
		}
	},
	onItemEnterLeave: function(event) {
		if (this.list.selector && this.list.selector.isRowMode) {
			this.list.selector.onSelectMouseEvent(event);
			this.list.page.registerLastFocusGrid(this.list);
		}
	},
	select: function($isSelected) {
		if (this.list.selector && this.list.selector.list) {
			if (this.$syraLoaded) {
				this.list.selector.onSelect({
					uuidTarget: this.$uuid,
					isSelected: $isSelected
				});
			} else {
				this.list.selector.select(this.$uuid, $isSelected);
			}
		}
	},
	renderRowIndex: function() {
		if (this.rowIndexPicker) {
			this.rowIndexPicker.textContent = this.$serverIndex + 1;
		}
	},
	renderAltStyle: function() {},
	applyMetaData: function(metaData) {},
	dispose: function() {
		this.garbage = this.localize = this.menusBox = this.page = this.list = this.menusSlot = this.rowIndexPicker = this.reorderPicker = null;
		Article.prototype.dispose.call(this);
	}
});