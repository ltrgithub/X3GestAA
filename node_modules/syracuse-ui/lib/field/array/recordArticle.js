"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

function RecordArticle() {}

exports.RecordArticle = helpers.defineClass(RecordArticle, Article, {
	onAddButton: function(btn) {
		this._buttons.push(btn);
	},
	onAddMenuItem: function($bind, $menu) {
		if (this.menusSlot) {
			var item = this.page.loadNewItem(null, {
				$bind: $bind,
				$category: "link",
				$skin: this.list.$itemRecordMenuSkin,
				$menu: $menu,
				$icon: {
					$mode: "icon",
					$path: this.list.$iconPath
				}
			}, this);
			if ($bind == "$edit") {
				var $delete = this.menuItems.$delete && this.menuItems.$delete[0];
				this.menusSlot.insertBefore(item.domItem, ($delete && $delete.domItem) || null);
			} else {
				this.menusSlot.appendChild(item.domItem);
			}
			item.domItem && this.onAddButton(item.domItem);
			item.layoutSlot = this.menusSlot;
			delete item.$item.$menu;
			return item;
		}
	},
	onAddMenuPicker: function(btn) {
		this.menusSlot && this.menusSlot.appendChild(btn);
		this.onAddButton(btn);
	},
	loadBox: function(initData) {
		this._buttons = [];
		this.isRecordArticle = true;
		this.$defaultSkinSection = this.$defaultSkinSection || "s-h3";
		this.$defaultSkinBlock = this.$defaultSkinBlock || "s-h4";
		Article.prototype.loadBox.call(this, initData);
	},
	remove: function() {
		syra_site.dom.removeChild(this.domItem);
	},
	getRecordIndex: function() {
		return this.list.records.indexOf(this);
	},
	onTreeNodeClick: function(event, btn) {
		this.list.treeDecorator.onNodeEvent(this, event, btn);
	},
	onRowCardClick: function(event, btn) {
		this.list.cardDecorator.onRowCardOpenerClick(btn, this);
	},
	onSelectorClick: function(event, btn) {
		this.list.onSelectorClick(event, btn);
	},
	getTreeNode: function() {
		if (this.list.treeDecorator && this.list.treeDecorator._uuidNodes) {
			return this.list.treeDecorator._uuidNodes[this.$uuid];
		}
		return null;
	},
	ensureDataSet: function($uuid) {
		var listDataset = this.articleParent.dataset;
		if ($uuid !== undefined) {
			for (var ii = 0, jj = listDataset.length; ii < jj; ii++) {
				if (listDataset[ii].$uuid == $uuid) {
					this.dataset = listDataset[ii];
					this.$serverIndex = this.dataset.$serverIndex;
					break;
				}
			}
		} else {
			if (!this.dataset || this.dataset.$serverIndex != this.$serverIndex) {
				for (var ii = 0, jj = listDataset.length; ii < jj; ii++) {
					if (listDataset[ii].$serverIndex == this.$serverIndex) {
						this.dataset = listDataset[ii];
						break;
					}
				}
			}
		}
		if (!this.dataset) {
			this.dataset = {};
		}
		return this.dataset;
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$item.$bind == "$delete") {
			if (this.list.$confirmDelete) {
				menuItem.$confirm = this.list.$confirmDelete;
			}

		}
		return true;
	},
	applyChange: function(metaData) {
		if (metaData) {
			//if (metaData.$properties !== undefined || metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
			if (metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
				var $propertiesMetaData = metaData.$properties || {};
				var $binds = Object.keys(this.boundFields);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var fields = this.boundFields[$bind];
					var $fieldMeta = $propertiesMetaData[$bind] || {};
					if ($fieldMeta.$isReadOnly === undefined && metaData.$isReadOnly !== undefined) {
						$fieldMeta.$isReadOnly = metaData.$isReadOnly;
					}
					if ($fieldMeta.$isDisabled === undefined && metaData.$isDisabled !== undefined) {
						$fieldMeta.$isDisabled = metaData.$isDisabled;
					}
					if ($fieldMeta.$fieldStyle === undefined && metaData.$fieldStyle !== undefined) {
						$fieldMeta.$fieldStyle = metaData.$fieldStyle;
					}
					if ($fieldMeta.$valueStyle === undefined && metaData.$valueStyle !== undefined) {
						$fieldMeta.$valueStyle = metaData.$valueStyle;
					}
					if ($fieldMeta.$titleStyle === undefined && metaData.$titleStyle !== undefined) {
						$fieldMeta.$titleStyle = metaData.$titleStyle;
					}
					for (var kk = 0, mm = fields.length; kk < mm; kk++) {
						fields[kk].setDataBind(undefined, metaData, $fieldMeta, $bind);
					}
				}
			}
			if (metaData.$capabilities !== undefined) {
				this.list.capabilityMaker.applyToRecord(this);
			}
			if (metaData.$isSelected !== undefined) {
				this.select(metaData.$isSelected);
			}
			Article.prototype.applyChange.call(this, metaData);
		}
	},
	onItemInOut: function(onEnter) {
		if (this.list.selector) {
			syra_site.dom.toggleClass(this.list.treeDecorator ? (this.treeNode.desc || this.treeNode.item) : this.domItem, "s-record-enter", onEnter);
		}
		this.toggleButtons("s-enter", onEnter);
	},
	toggleButtons: function(css, show) {
		for (var ii = 0, jj = this._buttons.length; ii < jj; ii++) {
			syra_site.dom.toggleClass(this._buttons[ii], css, show);
		}
	},
	select: function($isSelected) {
		if (this.list.selector && this.list.selector.list) {
			if (this.$syraLoaded) {
				this.list.selector.onSelect({
					uuidTarget: this.$uuid,
					isSelected: $isSelected
				});
			} else {
				this.list.selector.select(this.$uuid, $isSelected);
			}
		}
	},


	applyMetaData: function(metaData) {},
	dispose: function() {
		if (this.list && this.list.focusedRecord == this) {
			this.list.focusedRecord = null;
		}
		this._buttons = this.reorderBtnParent = this.$capability = this.garbage = this.list = this.menusSlot = this.reorderBtn = null;
		Article.prototype.dispose.call(this);
	}
});