"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

function RecordArticle() {}

exports.RecordArticle = helpers.defineClass(RecordArticle, Article, {
	loadBox: function(initData) {
		this.isRecordArticle = true;
		this.localize = this.list.localize;
		this.$defaultSkinSection = this.$defaultSkinSection || "s-h3";
		this.$defaultSkinBlock = this.$defaultSkinBlock || "s-h4";
		Article.prototype.loadBox.call(this, initData);
	},
	remove: function() {
		document.site.dom.removeChild(this.domItem);
	},
	getRecordIndex: function() {
		return this.list.records.indexOf(this);
	},
	applyReorderCapability: function(reorder) {
		if (!this.isReorderDisabled) {
			if (this.hasReorderCapability = reorder) {
				if (!this.reorderPicker) {
					this.reorderPicker = document.createElement("div");
					this.reorderPicker.className = this.$skin + "-reorder";
					this.reorderPicker.syraReorderRecordId = this.list.id;
					document.site.ddManager.setDragSpot(this.reorderPicker, true);
					if (this.reorderPickerParent !== null) { //null set for insertPicker after
						var parent = this.reorderPickerParent || this.domItem;
						parent.insertBefore(this.reorderPicker, parent.firstChild);
					}
					if (this.list.$isDisabled) {
						document.site.dom.disableItem(this.reorderPicker, this.list.$isDisabled);
					}
				}
			} else {
				if (this.reorderPicker) {
					document.site.dom.removeChild(this.reorderPicker);
					delete this.reorderPicker;
				}
			}
		}
	},
	applyRecordCapabilities: function(onListMetadata) {
		var $prev = this.$capability;
		this.$capability = this.list.$capability;
		if (this.dataset && this.dataset.$capabilities !== undefined) {
			this.$capability = {};
			this.list.parseCapabilities(this, this.dataset.$capabilities);
		}
		var $actions = {};
		if ($prev) {
			if ($prev["delete"] && !this.$capability["delete"]) {
				$actions.$delete = {
					$isHidden: true
				};
			}
			if ($prev.insert && !this.$capability.insert) {
				$actions.$create = {
					$isHidden: true
				};
			}
		}
		if (this.$capability.insert) {
			$actions.$create = {
				$title: this.localize.flInsert,
				$isHidden: false
			};
		}
		if (this.$capability["delete"]) {
			$actions.$delete = {
				$title: this.localize.flDelete,
				$confirm: this.$confirmDelete,
				$isHidden: false
			};
		}
		if ($actions.$create || $actions.$delete) {
			this.applyActionLinkChange({
				$actions: $actions
			});
		}
		if (onListMetadata) {
			//on metadata
			if (this.hasReorderCapability != this.$capability.reorder) {
				this.applyReorderCapability(this.$capability.reorder);
			}
		}
	},
	onClickPicker: function(picker, event) {
		switch (picker.getAttribute("data-s-picker")) {
			case "grid-rowcard":
				this.list.cardDecorator.onRowCardOpenerClick(picker);
				break;
			case "list-selector":
				return this.list.onClickPicker(picker, event);
			case "list-tree-picker":
				return this.list.onClickPicker(picker, event);
		}
		return true;
	},
	getTreeNode: function() {
		if (this.list.treeDecorator && this.list.treeDecorator._uuidNodes) {
			return this.list.treeDecorator._uuidNodes[this.$uuid];
		}
		return null;
	},
	ensureDataSet: function($uuid) {
		var listDataset = this.articleParent.dataset;
		if ($uuid !== undefined) {
			for (var ii = 0, jj = listDataset.length; ii < jj; ii++) {
				if (listDataset[ii].$uuid == $uuid) {
					this.dataset = listDataset[ii];
					this.$serverIndex = this.dataset.$serverIndex;
					break;
				}
			}
		} else {
			if (!this.dataset || this.dataset.$serverIndex != this.$serverIndex) {
				for (var ii = 0, jj = listDataset.length; ii < jj; ii++) {
					if (listDataset[ii].$serverIndex == this.$serverIndex) {
						this.dataset = listDataset[ii];
						break;
					}
				}
			}
		}
		if (!this.dataset) {
			this.dataset = {};
		}
		return this.dataset;
	},
	onMenuClick: function(menuItem) {
		return true;
	},
	_clearMenuItems: function() {
		Article.prototype._clearMenuItems.call(this);
		delete this.$quickActionsEdit;
		if (this.menusBox && this.menusBox.$isPickerVisible) {
			delete this.$quickActionsMenu;
			this.menusSlot.style.display = "none";
			(this.menusBox.layoutParent ? this.menusBox.layoutParent : this).removeItem(this.menusBox, true);
			this.removeMenuBag(this.menusBox);
			delete this.menusBox;
		}
	},
	onBoxToggled: function(box, isHidden) {
		if (box.id == (this.id + "-menu-picker")) {
			this.$quickActionsMenu = box.$isPickerVisible = !isHidden;
		}
	},
	onMenuDataFilled: function(menuItem) {
		if (menuItem.$item.$bind == "$edit" && !menuItem.boxParent.isMenuGroup) {
			menuItem.contextField = this;
			this.$quickActionsEdit = true;
		}
	},
	_createMenusBox: function() {
		var $menuBag = {
			$isMenusBag: true,
			$category: "menus",
			$noText: true,
			$title: this.list.localize.flActions,
			$isTitlePicker: true,
			$isBoxCollapsable: true,
			$isPopupContent: true,
			$clientId: this.id + "-menu-picker",
			$skin: this.list.$skinRecordMenus,
			$layout: {
				$items: [{
					$layoutType: "stack",
					$items: [this.list.defineNewIconMenu("$create"), this.list.defineNewIconMenu("$delete"), this.list.defineNewIconMenu("$details"), {
						$bind: "$print"
					}]
				}]
			}
		};
		if (this.list.$item.$popupCard) {
			$menuBag.$layout.$items[0].$items.push(this.list.defineNewIconMenu("$recordCard"));
		}
		if (!this.disableEditMenu) {
			$menuBag = {
				$layoutType: "row",
				$autoSize: true,
				$items: [{
						$noText: true,
						$category: "link",
						$bind: "$edit",
						$skin: "s-record-action-edit"
					},
					$menuBag
				]
			};
		}
		document.site.dom.toggleClass(this.menusSlot, "s-record-actions", true);
		this.page.loadNewItem(this.menusSlot, $menuBag, this);
		this.menusBox = this.idMap[this.id + "-menu-picker"];
		this.menusBox.contextField = this;
	},
	applyActionLinkChange: function(resources) {
		if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
			if (!this.menusBox && !this.list.$item.$isMenuRecordHidden && resources.$links !== null) {
				this._createMenusBox();
			}
		}
		Article.prototype.applyActionLinkChange.call(this, resources);
	},
	applyChange: function(metaData) {
		if (metaData) {
			//if (metaData.$properties !== undefined || metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
			if (metaData.$isReadOnly !== undefined || metaData.$isDisabled !== undefined || metaData.$fieldStyle !== undefined || metaData.$valueStyle !== undefined || metaData.$titleStyle !== undefined) {
				var $propertiesMetaData = metaData.$properties || {};
				var $binds = Object.keys(this.boundFields);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var fields = this.boundFields[$bind];
					var $fieldMeta = $propertiesMetaData[$bind] || {};
					if ($fieldMeta.$isReadOnly === undefined && metaData.$isReadOnly !== undefined) {
						$fieldMeta.$isReadOnly = metaData.$isReadOnly;
					}
					if ($fieldMeta.$isDisabled === undefined && metaData.$isDisabled !== undefined) {
						$fieldMeta.$isDisabled = metaData.$isDisabled;
					}
					if ($fieldMeta.$fieldStyle === undefined && metaData.$fieldStyle !== undefined) {
						$fieldMeta.$fieldStyle = metaData.$fieldStyle;
					}
					if ($fieldMeta.$valueStyle === undefined && metaData.$valueStyle !== undefined) {
						$fieldMeta.$valueStyle = metaData.$valueStyle;
					}
					if ($fieldMeta.$titleStyle === undefined && metaData.$titleStyle !== undefined) {
						$fieldMeta.$titleStyle = metaData.$titleStyle;
					}
					for (var kk = 0, mm = fields.length; kk < mm; kk++) {
						fields[kk].setDataBind(undefined, metaData, $fieldMeta, $bind);
					}
				}
			}
			if (metaData.$capabilities !== undefined) {
				this.applyRecordCapabilities();
			}
			if (metaData.$isSelected !== undefined) {
				this.select(metaData.$isSelected);
			}
			Article.prototype.applyChange.call(this, metaData);
		}
	},
	onItemEnterLeave: function(onEnter) {
		if (this.menusSlot) {
			document.site.dom.toggleClass(this.menusSlot, "s-enter", onEnter);
		}
		if (this.reorderPicker) {
			document.site.dom.toggleClass(this.reorderPicker, "s-enter", onEnter);
		}
		if (this.list.selector && this.list.selector.isRowMode) {
			this.onSelectMouseEvent(onEnter);
			this.list.page.registerLastFocusGrid(this.list);
		}
	},
	onSelectMouseEvent: function(onEnter) {
		document.site.dom.toggleClass(this.domItem, "s-record-over", onEnter);
	},
	select: function($isSelected) {
		if (this.list.selector && this.list.selector.list) {
			if (this.$syraLoaded) {
				this.list.selector.onSelect({
					uuidTarget: this.$uuid,
					isSelected: $isSelected
				});
			} else {
				this.list.selector.select(this.$uuid, $isSelected);
			}
		}
	},
	renderRowIndex: function() {
		if (this.rowIndexPicker) {
			this.rowIndexPicker.textContent = this.$serverIndex + 1;
		}
	},
	renderAltStyle: function() {},
	applyMetaData: function(metaData) {},
	dispose: function() {
		this.reorderPickerParent = this.$capability = this.garbage = this.localize = this.menusBox = this.list = this.menusSlot = this.rowIndexPicker = this.reorderPicker = null;
		Article.prototype.dispose.call(this);
	}
});