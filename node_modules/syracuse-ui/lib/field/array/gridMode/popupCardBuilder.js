"use strict";
var _activeList, _activeRecord, _slotCard, _slotHeader, _slotBody, _dialog;

function _makeObsoleteLayout(list) {
	list.$popupCard = {
		$layout: {
			$items: []
		}
	};
	var $meta = list.getMetaData();
	var $metaFields = ($meta && $meta.$item && $meta.$item.$properties) || {};
	var $fields = list.$field.$item.$properties;
	var $binds = Object.keys($fields);
	var $row;
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $bind = $binds[ii];
		var $field = $fields[$bind];
		var $isHidden = $metaFields[$bind] && $metaFields[$bind].$isHidden;
		$isHidden = $isHidden === undefined ? $field.$isHidden : $isHidden;
		if (!$isHidden && !$field.$isExcluded) {
			if ($row && $row.$items.length == 3) {
				$row = null;
			}
			if (!$row) {
				list.$popupCard.$layout.$items.push($row = {
					$layoutType: "row",
					$items: []
				});
			}
			$row.$items.push({
				$bind: $binds[ii]
			});
		}
	}
	if ($row && $row.$items.length < 3) {
		while ($row.$items.length < 3) {
			$row.$items.push({
				$category: "space"
			});
		}
	}
};

function _hasPopupCardCapability(list) {
	if (list.hasPopupCard === undefined) {
		list.hasPopupCard = list.$field.$isEntityFusionList || !! list.$item.$popupCard;
		if (!list.hasPopupCard) {
			var $fields = list.$field.$item.$properties;
			var $binds = Object.keys($fields);
			for (var ii = 0, jj = $binds.length; !list.hasPopupCard && ii < jj; ii++) {
				switch ($fields[$binds[ii]].$viewScope || "") {
					case "popup":
					case "both":
						list.hasPopupCard = true;
						break;
				}
			}
		}
	}
	return list.hasPopupCard;
};

function _makeLayout(list) {
	var $fields = list.$field.$item.$properties;
	var $binds = Object.keys($fields);
	var hasViewScope;
	for (var ii = 0, jj = $binds.length; !hasViewScope && ii < jj; ii++) {
		hasViewScope = $fields[$binds[ii]].$viewScope !== undefined;
	}
	if (hasViewScope) {
		delete list.$item.$popupCard;
		var $popupFields = [];
		var $meta = list.getMetaData();
		var $metaFields = ($meta && $meta.$item && $meta.$item.$properties) || {};
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var $field = $fields[$bind];
			var $isHidden = $metaFields[$bind] && $metaFields[$bind].$isHidden;
			$isHidden = $isHidden === undefined ? $field.$isHidden : $isHidden;
			if (!$isHidden && !$field.$isExcluded) {
				switch ($field.$viewScope) {
					case "popup":
					case "both":
						$popupFields.push($bind);
						break;
				}
			}
		}
		var maxByCol = Math.ceil($popupFields.length / 4);
		var colIndex = 0,
			$cols = [],
			$col;
		for (var ii = 0, jj = $popupFields.length; ii < jj; ii++) {
			if (colIndex == 0) {
				$cols.push($col = {
					$layoutType: "stack",
					$items: []
				});
			}
			$col.$items.push({
				$bind: $popupFields[ii]
			});
			if ((++colIndex) == maxByCol) {
				colIndex = 0;
			}
		}
		list.$popupCard = {
			$layout: {
				$layoutType: "row",
				$items: $cols
			}
		};
	} else {
		_makeObsoleteLayout(list);
	}
	return list.$popupCard;
};

function _hightlightCardRecord(record, show) {
	record.dataRow && syra_site.dom.toggleClass(record.dataRow, "s-list-popupcard-record", show);
	record.freezeRow && syra_site.dom.toggleClass(record.freezeRow, "s-list-popupcard-record", show);
}

function _findPopupCardField(name, record) {
	if (record.popupCard && _activeRecord == record) {
		var list = record.list;
		if (exports.isOpened(list) && _dialog && !_dialog.disposed) {
			var found = null;
			var fields = record.boundFields[name];
			if (fields) {
				for (var ii = 0, jj = fields.length; !found && ii < jj; ii++) {
					var field = fields[ii];
					var boxParent = field.boxParent;
					while (boxParent && boxParent != record) {
						if (boxParent == record.popupCard.content) {
							found = field;
							break;
						}
						boxParent = boxParent.boxParent;
					}
				}
			}
			return found;
		}
	}
	return null;
}

function _onClose() {
	if (_activeList) {
		var list = _activeList;
		list.page.externalAdapter.onFieldClickPicker({
			field: _activeRecord,
			pickerType: "closeCard",
			doEvent: function() {
				syra_site.dom.removeChild(_slotCard);
				_dialog.dispose();
				exports.dispose(list);
				for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
					var record = list.records[ii];
					if (record.popupCard) {
						_hightlightCardRecord(record, false);
						var fields = record.popupCard.content.layoutContent.getFields();
						for (var mm = 0, kk = fields.length; mm < kk; mm++) {
							record.removeItem(fields[mm], false, true);
						}
						record.removeItem(record.popupCard.content, true, true);
						record.popupCard = record.popupCard.content = null;
					}
				}
			}
		});
	}
}

function _activatePopupCard(record) {
	if (!record._isOnApplyingChange) {
		var list = record.list;
		if (list == _activeList) {
			if (_activeRecord) {
				_hightlightCardRecord(_activeRecord, false);
				if (_activeRecord.popupCard) {
					syra_site.dom.removeChild(_activeRecord.popupCard.content.domItem);
				}
			}
			_hightlightCardRecord(_activeRecord = record, true);
			syra_site.dom.empty(_slotBody);
			if (!record.popupCard && (record.list.isClientFetch || list.$field.$treeview)) { // treeview is not isClientFetch but popupcard is available
				var $popupCard = _makeLayout(list);
				$popupCard.$isTitleHidden = !($popupCard.$title && $popupCard.$title != "-");
				$popupCard = {
					$layout: {
						$items: [$popupCard]
					}
				};
			}
			var recordIndex = record.getRecordIndex();
			_slotBody.syraItem = record.id;
			_slotBody.setAttribute("data-s-record", _slotBody.syraRecord = record.$uuid);
			record.setArticleId(_slotBody);
			var card = record.popupCard;
			if (!card) {
				record.popupCard = card = {
					content: list.page.loadNewItem(_slotBody, $popupCard || list.$popupCard, record),
					pagerSlot: document.createElement("div")
				};
				card.pagerSlot.className = "s-popupcard-pager-slot";
				list.paging.addPagerStepLinks(record, card.pagerSlot);
				card.content.body.parentNode.insertBefore(card.pagerSlot, card.content.body);
			} else {
				_slotBody.appendChild(card.content.domItem);
			}
			if (_dialog) {
				_dialog._content = _dialog.options.content = card.content;
			}
			record._isOnApplyingChange = true;
			record.applyChange(list.ensureGlobalMetaRecord());
			record.applyChange(record.dataset);
			if (record.$menusPopup && !card.picker_menus) {
				card.picker_menus = syra_menus.pickers.menus.add(record);
				card.picker_menus.link.className += " s-popupcard-picker",
				card.pagerSlot.insertBefore(card.picker_menus.link, card.pagerSlot.firstChild);
			}
			record._isOnApplyingChange = false;

			syra_menus.menus.applyChange(record, {
				$actions: {
					$first: {
						$isHidden: list.dataset.length < 2,
						$isDisabled: list.paging.$startIndex == 1 && recordIndex == 0
					},
					$previous: {
						$isHidden: list.dataset.length <= 2,
						$isDisabled: list.paging.$startIndex == 1 && recordIndex == 0
					},
					$next: {
						$isHidden: list.dataset.length <= 2,
						$isDisabled: (list.paging.$startIndex + recordIndex) == list.dataset.length
					},
					$last: {
						$isHidden: list.dataset.length < 2,
						$isDisabled: (list.paging.$startIndex + recordIndex) == list.dataset.length
					}
				}
			});
			syra_site.ensureArticleVisibility(record, true);
			syra_site.layoutValidator.validateLayout(card.content.layoutContent, true);
			_dialog && _dialog.resizeDialog();
		}
	}
};

exports.isOpened = function(list) {
	return list && (list == _activeList);
};

exports.togglePopup = function(record) {
	if (record) {
		var list = record.list;
		if (!(_activeList == list && _activeRecord == record)) {
			if (_activeList == list) {
				_activatePopupCard(record);
			} else {
				_activeList = list;
				list.page.externalAdapter.onFieldClickPicker({
					field: record,
					pickerType: "openCard",
					doEvent: function() {
						_slotCard = document.createElement("div");
						_slotCard.className = "s-popupcard-slot";
						_slotHeader = document.createElement("div");
						_slotHeader.className = "s-popupcard-slot-header";
						_slotCard.appendChild(_slotHeader);
						_slotBody = document.createElement("div");
						_slotBody.className = "s-popupcard-slot-body";
						_slotCard.appendChild(_slotBody);

						!record.popupCard && _activatePopupCard(record);

						_dialog = syra_site.dialogManager.openModal(record.page, {
							$isAutoClose: false,
							content: record.popupCard.content,
							slot: _slotCard,
							onClose: function() {
								delete list.$popupCard;
								_onClose(list);
								return true;
							},
							resizeDialog: function(dlg, isDlgResizing) {
								if (!isDlgResizing) {
									_slotBody.style.width = _slotBody.style.height = "";
									dlg.centerDialog();
								}
								var rect = syra_site.dom.getInnerSize(_slotCard);
								_slotBody.style.width = rect.width + "px";
								_slotBody.style.height = (rect.height - _slotHeader.getBoundingClientRect().height) + "px";
							},
							onOpened: function() {
								list.page.externalAdapter.onFieldClickPicker({
									field: record,
									pickerType: "openedCard",
									doEvent: function() {}
								});
								record.applyChange(list.ensureGlobalMetaRecord());
								record.applyChange(_activeRecord.dataset);
							}
						});
						_dialog.addCloseButton();
					}
				});
			}
			return;
		}
	}
	_dialog && _dialog.close();
};

exports.getRecord = function(list) {
	return (_activeRecord && _activeRecord.list == list) ? _activeRecord : null;
};

exports.dispose = function(list) {
	if (_activeList == list) {
		_activeList = _activeRecord = _slotCard = _slotHeader = _slotBody = _dialog = null;
	}
};


exports.load = function(builder) {
	builder.findPopupCardField = function(name, record) {
		return _findPopupCardField(name, record);
	};
	builder.record_onMenuClick = function(record, menuItem) {
		if (!record.disposed) {
			var $newIndex, $startIndex;
			switch (menuItem.$sourceBind) {
				case "$recordCard":
					exports.togglePopup(record);
					return false;
				case "$first":
					$startIndex = 1;
					$newIndex = 0;
					break;
				case "$previous":
					$newIndex = (this.list.paging.$startIndex - 1) + (record.getRecordIndex() - 1);
					break;
				case "$next":
					$newIndex = (this.list.paging.$startIndex - 1) + (record.getRecordIndex() + 1);
					break;
				case "$last":
					$newIndex = this.list.dataset.length - 1;
					break;
				default:
					return true;
			}
			var $startIndex = (Math.floor($newIndex / this.list.paging.getItemsPerPage()) * this.list.paging.getItemsPerPage()) + 1;
			if ($startIndex != this.list.paging.$startIndex) {
				var options = this.list.clientFetchOptions || {};
				(options.params = options.params || {}).startIndex = $startIndex;
				this.list.filler.fetchClientRecordSet(this.list, options);
			}
			_activatePopupCard(this.list.recordsMap[this.list.clientDataset[$newIndex].$uuid]);
			return false;
		}
	};
	builder.onFocusFieldChange = function(select, name, $serverIndex) {
		if (exports.isOpened(this.list)) {
			var focusRecord = this.list.recordsMap[this.list.clientDataset[$serverIndex].$uuid];
			if (focusRecord && (!_activeRecord || (_activeRecord.$uuid != focusRecord.$uuid))) {
				_activatePopupCard(focusRecord);
			}
		}
	};
	builder.onAfterAddRecord = function(record) {
		if (_hasPopupCardCapability(record.list)) {
			if (!record.list.$popupCard) {
				_makeLayout(record.list);
			}
			if (record.list.$popupCard && record.list.$popupCard.$layout.$items.length) {
				syra_menus.menus.applyChange(record, {
					$links: {
						$recordCard: {
							$title: syra_local.flPopupView
						}
					}
				});
			}
		}
	};
};