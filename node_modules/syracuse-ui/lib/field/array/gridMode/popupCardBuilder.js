"use strict";

function _makeObsoleteLayout(list) {
	list.$popupCard = {
		$layout: {
			$items: []
		}
	};
	var $meta = list.getMetaData();
	var $metaFields = ($meta && $meta.$item && $meta.$item.$properties) || {};
	var $fields = list.$field.$item.$properties;
	var $binds = Object.keys($fields);
	var $row;
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $bind = $binds[ii];
		var $field = $fields[$bind];
		var $isHidden = $metaFields[$bind] && $metaFields[$bind].$isHidden;
		$isHidden = $isHidden === undefined ? $field.$isHidden : $isHidden;
		if (!$isHidden && !$field.$isExcluded) {
			if ($row && $row.$items.length == 3) {
				$row = null;
			}
			if (!$row) {
				list.$popupCard.$layout.$items.push($row = {
					$layoutType: "row",
					$items: []
				});
			}
			$row.$items.push({
				$bind: $binds[ii]
			});
		}
	}
	if ($row && $row.$items.length < 3) {
		while ($row.$items.length < 3) {
			$row.$items.push({
				$category: "space"
			});
		}
	}
};

function _hasPopupCardCapability(list) {
	if (list.hasPopupCard === undefined) {
		list.hasPopupCard = list.$field.$isEntityFusionList || !!list.$item.$popupCard;
		if (!list.hasPopupCard) {
			var $fields = list.$field.$item.$properties;
			var $binds = Object.keys($fields);
			for (var ii = 0, jj = $binds.length; !list.hasPopupCard && ii < jj; ii++) {
				switch ($fields[$binds[ii]].$viewScope || "") {
					case "popup":
					case "both":
						list.hasPopupCard = true;
						break;
				}
			}
		}
	}
	return list.hasPopupCard;
};

function _setFocus(slot) {
	var focusLink = document.createElement("a");
	focusLink.className = "s-dialog-focus-anchor";
	focusLink.setAttribute('href', '#');
	slot.appendChild(focusLink);
	focusLink.focus();

	slot.syraOnClick = "onSelectorClick";
};

function _makeLayout(list) {
	var $fields = list.$field.$item.$properties;
	var $binds = Object.keys($fields);
	var hasViewScope;
	for (var ii = 0, jj = $binds.length; !hasViewScope && ii < jj; ii++) {
		hasViewScope = $fields[$binds[ii]].$viewScope !== undefined;
	}
	if (hasViewScope) {
		delete list.$item.$popupCard;
		var $popupFields = [];
		var $meta = list.getMetaData();
		var $metaFields = ($meta && $meta.$item && $meta.$item.$properties) || {};
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var $field = $fields[$bind];
			var $isHidden = $metaFields[$bind] && $metaFields[$bind].$isHidden;
			$isHidden = $isHidden === undefined ? $field.$isHidden : $isHidden;
			if (!$isHidden && !$field.$isExcluded) {
				switch ($field.$viewScope) {
					case "popup":
					case "both":
						$popupFields.push($bind);
						break;
				}
			}
		}
		var maxByCol = Math.ceil($popupFields.length / 4);
		var colIndex = 0,
			$cols = [],
			$col;
		for (var ii = 0, jj = $popupFields.length; ii < jj; ii++) {
			if (colIndex == 0) {
				$cols.push($col = {
					$layoutType: "stack",
					$items: []
				});
			}
			$col.$items.push({
				$bind: $popupFields[ii]
			});
			if ((++colIndex) == maxByCol) {
				colIndex = 0;
			}
		}
		list.$popupCard = {
			$layout: {
				$layoutType: "row",
				$items: $cols
			}
		};
	} else {
		_makeObsoleteLayout(list);
	}
	return list.$popupCard;
};

function _hightlightCardRecord(record, show) {
	record.dataRow && syra_dom.toggleClass(record.dataRow, "s-record-popupcard", show);
	record.fixedRow && syra_dom.toggleClass(record.fixedRow, "s-record-popupcard", show);
}

function _findPopupCardField(name, record) {
	if (record.popupCard && record.list.cardActiveRecord == record) {
		var list = record.list;
		if (exports.isOpened(list) && list.cardModal && !list.cardModal.disposed) {
			var found = null;
			var fields = record.boundFields[name];
			if (fields) {
				for (var ii = 0, jj = fields.length; !found && ii < jj; ii++) {
					var field = fields[ii];
					var boxParent = field.boxParent;
					while (boxParent && boxParent != record) {
						if (boxParent == record.popupCard.content) {
							found = field;
							break;
						}
						boxParent = boxParent.boxParent;
					}
				}
			}
			return found;
		}
	}
	return null;
}

function _onClose(cardActiveList) {
	if (cardActiveList) {
		var list = cardActiveList;
		list.page.externalAdapter.onFieldClickPicker({
			field: list.cardActiveRecord,
			pickerType: "closeCard",
			doEvent: function() {
				syra_dom.remove(list.cardSlotCard);
				list.cardModal.dispose();
				exports.dispose(list);
				for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
					var record = list.records[ii];
					if (record.popupCard) {
						_hightlightCardRecord(record, false);
						var fields = record.popupCard.content.layoutContent.getFields();
						for (var mm = 0, kk = fields.length; mm < kk; mm++) {
							syra_item.remove(fields[mm], false, true);
						}
						syra_item.remove(record.popupCard.content, true, true);
						record.popupCard = record.popupCard.content = null;
					}
				}
			}
		});
	}
}

function _activatePopupCard(record) {
	if (!record._isOnApplyingChange) {
		var list = record.list;
		if (list == list.cardActiveList) {
			if (list.cardActiveRecord) {
				_hightlightCardRecord(list.cardActiveRecord, false);
				if (list.cardActiveRecord.popupCard) {
					syra_dom.remove(list.cardActiveRecord.popupCard.content.domItem);
				}
			}
			_hightlightCardRecord(list.cardActiveRecord = record, true);
			syra_dom.empty(list.cardSlotBody);
			var $popupCard = null;
			if (!record.popupCard && (record.list.isClientFetch || list.$field.$treeview)) { // treeview is not isClientFetch but popupcard is available
				$popupCard = _makeLayout(list);
				$popupCard.$isTitleHidden = !($popupCard.$title && $popupCard.$title != "-");
				$popupCard = {
					$layout: {
						$items: [$popupCard]
					}
				};
			}

			list.cardSlotCard.syraItem = record.id;
			record.onSelectorClick = function() {
				list.cardSlotCard && _setFocus(list.cardSlotCard);
			};

			var recordIndex = record.getRecordIndex();
			list.cardSlotBody.syraItem = record.id;
			list.cardSlotBody.setAttribute("data-s-record", record.$uuid);
			var card = record.popupCard;
			if (!card) {
				record.popupCard = card = {
					content: list.page.addItem(list.cardSlotBody, $popupCard || list.$popupCard, record),
					pagerSlot: document.createElement("div")
				};
				card.pagerSlot.className = "s-popupcard-pager-slot";
				list.paging.addPagerStepLinks(record, card.pagerSlot);
				card.content.body.parentNode.insertBefore(card.pagerSlot, card.content.body);
			} else {
				list.cardSlotBody.appendChild(card.content.domItem);
			}
			if (list.cardModal) {
				list.cardModal._content = list.cardModal.options.content = card.content;
			}
			record._isOnApplyingChange = true;
			record.applyChange(list.ensureGlobalMetaRecord());
			record.applyChange(record.dataset);
			if (record.$menusPopup && !card.picker_menus) {
				card.picker_menus = syra_menus.picker.add(record);
				card.picker_menus.link.className += " s-popupcard-picker", card.pagerSlot.insertBefore(card.picker_menus.link, card.pagerSlot.firstChild);
			}
			record._isOnApplyingChange = false;

			syra_menus.applyChange(record, {
				$actions: {
					$first: {
						$isHidden: list.dataset.length < 2,
						$isDisabled: list.paging.$startIndex == 1 && recordIndex == 0
					},
					$previous: {
						$isHidden: list.dataset.length <= 2,
						$isDisabled: list.paging.$startIndex == 1 && recordIndex == 0
					},
					$next: {
						$isHidden: list.dataset.length <= 2,
						$isDisabled: (list.paging.$startIndex + recordIndex) == list.dataset.length
					},
					$last: {
						$isHidden: list.dataset.length < 2,
						$isDisabled: (list.paging.$startIndex + recordIndex) == list.dataset.length
					}
				}
			});
			list.builder.menuItems = record.menuItems;
			syra_layout.ensureArticleVisibility(record.popupCard.content, true);
			list.cardModal && list.cardModal.resize();
		}
	}
};

exports.isOpened = function(list) {
	return list && (list == list.cardActiveList);
};

exports.togglePopup = function(record) {
	var list = null;
	if (record) {
		list = record.list;
		if (!(list.cardActiveList == list && list.cardActiveRecord == record)) {
			if (list.cardActiveList == list) {
				_activatePopupCard(record);
			} else {
				list.cardActiveList = list;
				list.page.externalAdapter.onFieldClickPicker({
					field: record,
					pickerType: "openCard",
					doEvent: function() {
						list.cardSlotCard = syra_dom.div("s-popupcard-slot");
						list.cardSlotHeader = syra_dom.div("s-popupcard-slot-header", list.cardSlotCard);
						list.cardSlotBody = syra_dom.div("s-popupcard-slot-body", list.cardSlotCard);
						!record.popupCard && _activatePopupCard(record);
						list.cardModal = syra_over.openModal(record.page, {
							$isAutoClose: false,
							content: record.popupCard.content,
							slot: list.cardSlotCard,
							close: function() {
								delete list.$popupCard;
								if (syra_site.selectedList == list) {
									//list.checkUniqueSelection = false; //to avoir call to checkUniqueSelection in global click
								}
								_onClose(list);
								return true;
							},
							resize: function(pn, isDlgResizing) {
								if (!isDlgResizing) {
									list.cardSlotBody.style.width = list.cardSlotBody.style.height = "";
									pn.center();
								}
								var rect = syra_dom.getInnerSize(list.cardSlotCard);
								list.cardSlotBody.style.width = rect.width + "px";
								list.cardSlotBody.style.height = (rect.height - list.cardSlotHeader.getBoundingClientRect().height) + "px";
							},
							onOpened: function() {
								list.page.externalAdapter.onFieldClickPicker({
									field: record,
									pickerType: "openedCard",
									doEvent: function() {}
								});
								record.applyChange(list.ensureGlobalMetaRecord());
								record.applyChange(list.cardActiveRecord.dataset);
							}
						});
						list.cardModal.addCloseButton();
						syra_dom.toggleClass(list.cardModal.btn_close.link, "s-popupcard-close", true);
					}
				});
			}
			return;
		}
	}
	list && list.cardModal && list.cardModal.close();
};

exports.getRecord = function(list) {
	return (list.cardActiveRecord && list.cardActiveRecord.list == list) ? list.cardActiveRecord : null;
};

exports.dispose = function(list) {
	if (list.cardActiveList == list) {
		list.cardActiveList = list.cardActiveRecord = list.cardSlotCard = list.cardSlotHeader = list.cardSlotBody = list.cardModal = null;
	}
};

exports.load = function(builder) {

	builder.applyEscape = function(item) {
		var list = item.list || item.articleParent && item.articleParent.list;
		list.cardModal && list.cardModal.close();
	};

	builder.findPopupCardField = function(name, record) {
		return _findPopupCardField(name, record);
	};
	builder.record_onMenuClick = function(record, options) {
		if (!record.disposed) {
			var $newIndex, $startIndex;

			switch (options.menu.$sourceBind) {
				case "$recordCard":
					exports.togglePopup(record);
					this.list.cardSlotCard && _setFocus(record.list.cardSlotCard);
					return false;
				case "$first":
					$startIndex = 1;
					$newIndex = 0;
					break;
				case "$previous":
					$newIndex = (this.list.paging.$startIndex - 1) + (record.getRecordIndex() - 1);
					break;
				case "$next":
					$newIndex = (this.list.paging.$startIndex - 1) + (record.getRecordIndex() + 1);
					break;
				case "$last":
					$newIndex = this.list.dataset.length - 1;
					break;
				default:
					return true;
			}
			$startIndex = (Math.floor($newIndex / this.list.paging.getItemsPerPage()) * this.list.paging.getItemsPerPage()) + 1;
			if ($startIndex != this.list.paging.$startIndex) {
				var options = this.list.clientFetchOptions || {};
				(options.params = options.params || {}).startIndex = $startIndex;
				this.list.filler.fetchClientRecordSet(this.list, options);
			}
			_activatePopupCard(this.list.recordsMap[this.list.clientDataset[$newIndex].$uuid]);
			return false;
		}
	};
	builder.onFocusFieldChange = function(select, name, $serverIndex) {
		if (exports.isOpened(this.list)) {
			var focusRecord = this.list.recordsMap[this.list.clientDataset[$serverIndex].$uuid];
			if (focusRecord && (!this.list.cardActiveRecord || (this.list.cardActiveRecord.$uuid != focusRecord.$uuid))) {
				_activatePopupCard(focusRecord);
			}
		}
	};
	builder.onAfterAddRecord = function(record) {
		if (_hasPopupCardCapability(record.list)) {
			if (!record.list.$popupCard) {
				_makeLayout(record.list);
			}
			if (record.list.$popupCard && record.list.$popupCard.$layout.$items.length) {
				syra_menus.applyChange(record, {
					$links: {
						$recordCard: {
							$title: syra_local.flPopupView
						}
					}
				});
			}
		}
	};
};