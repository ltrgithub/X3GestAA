"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _onPickerClick() {
	var record = this.parent;
	if (record) {
		if (record.list.quickEdit) {
			var isClosed = record.list.quickEdit.record == record;
			record.list.quickEdit.dispose();
			delete record.loadInlinePage;
			if (isClosed) {
				return;
			}
		}
		record.loadInlinePage = function(record, $itemPage) {
			(record.list.quickEdit = new QuickEdit()).load(record, $itemPage);
		};
		var $mn = record.$menus.$quickEdit = helpers.object.clone(record.$menus.$edit, true);
		$mn.$target = "inline";
		syra_menus.click.menuId(record, $mn.$bind = $mn.$sourceBind = "$quickEdit");
	}
}

exports.addPicker = function(record, $menu) {
	syra_menus.button.addFieldPicker({
		parent: record,
		pickerId: "$quickEdit",
		fontIcon: "quickEdit",
		text: syra_local.fieldQuickEdit,
		checkWorkingCopy: true,
		btnclick: _onPickerClick
	});
};

function QuickEdit() {}

helpers.defineClass(QuickEdit, null, {
	load: function(record, $itemPage) {
		this.list = record.list;
		if (this.list) {
			var builder = this.list.builder;
			if (!builder.record_dispose) {
				builder.record_dispose = function(record) {
					var list = record.list;
					if (list.quickEdit && list.quickEdit.record == record) {
						list.quickEdit.dispose();
					}
				};
			}
			this.card = builder.createQuickEditCard(this.record = record);
			$itemPage.layoutSlot = this.card.contentSlot;
			$itemPage.inlinePageHost = this;
			this.resize();

			this.page = syra_pageBuilder.load($itemPage);
			var slot = document.createElement("aside");
			slot.className = "s-inline-page-menus";
			this.page.loadNewItem(slot, {
				$category: "link",
				$bind: "$save",
				$skin: "s-mn-inline-link s-mn-main-link"
			}, this.page);
			syra_menus.button.add({
				parent: record,
				slot: slot,
				fontIcon: "abort",
				css: "s-mn-inline-link s-mn-main-link",
				text: syra_local.inlinepage_cancel,
				btnclick: function() {
					this.parent.list.quickEdit.dispose();
				}
			});
			this.page.domItem.appendChild(slot);
		}
	},
	onInlinePageResized: function() {
		this.resize();
	},
	resize: function() {
		this.card.contentSlot.style.maxWidth = this.list.builder.scrollTable.bodySlot.clientWidth + "px";
	},
	dispose: function() {
		this.page && this.page.dispose();
		this.card && syra_site.dom.removeChild(this.card.row);
		if (this.list) {
			delete this.list.quickEdit;
		}
		syra_site.disposeObject(this);
	},
	onPreInitializeInlinePage: function(inlinePage, $article) {
		var $items = [];
		var $complex = [];
		var $fields = inlinePage.$prototype.$properties;
		for (var ii = 0, jj = this.list.builder.allColumns.length; ii < jj; ii++) {
			var col = this.list.builder.allColumns[ii];
			if (col.$bind && !col.$isHidden) {
				var $field = $fields[col.$bind];
				if ($field && $field.$type) {
					switch ($field.$type) {
						case "image":
							$complex.push({
								$bind: col.$bind
							});
							break;
						default:
							$items.push({
								$bind: col.$bind
							});
							break;
					}
				}
			}
		}
		var colCount = Math.min(Math.ceil($items.length / 3), 3);
		var colIndex = 0,
			$cols = [];
		for (var ii = 0; ii < colCount; ii++) {
			$cols.push({
				$layoutType: "stack",
				$items: []
			});
		}
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			$cols[colIndex++].$items.push($items[ii]);
			if (colIndex == colCount) {
				colIndex = 0;
			}
		}
		$article.$isMenuBarDisabled = true;
		$article.$layout = {
			$items: [{
				$layoutType: "row",
				$items: $cols
			}]
		};
		if (this.list.$complexBinds) {
			for (var ii = 0, jj = this.list.$complexBinds.length; ii < jj; ii++) {
				$complex.push({
					$bind: this.list.$complexBinds[ii]
				});
			}
		}
		if ($complex.length) {
			colIndex = 0, $cols = [], colCount = ($complex.length >= 2) ? 2 : 1;
			for (var ii = 0; ii < colCount; ii++) {
				$cols.push({
					$layoutType: "stack",
					$items: []
				});
			}
			for (var ii = 0, jj = $complex.length; ii < jj; ii++) {
				$cols[colIndex++].$items.push($complex[ii]);
				if (colIndex == colCount) {
					colIndex = 0;
				}
			}
			$article.$layout.$items.push({
				$layoutType: "row",
				$items: $cols
			});
		}
	}
});