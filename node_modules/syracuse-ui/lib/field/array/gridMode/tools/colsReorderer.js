"use strict";
var helpers = require('syracuse-core').helpers;

function _fillItemsList(list) {
	var allColumns = list.builder.allColumns;
	list.$item.$layout.$items = [];
	for (var ii = 0, jj = allColumns.length; ii < jj; ii++) {
		var col = allColumns[ii];
		if (col.$bind) {
			if (!col.table.isFixedCols) {
				delete col.$item.$isFixed;
			}
			list.$item.$layout.$items.push(col.$item);
		}
	}
}

exports.moveToSrollTable = function(col) {
	col.table = col.list.builder.scrollTable;
	col.table.columns.unshift(col);
	col.table.titleRow.insertBefore(col.titleCell, col.table.titleRow.firstChild);
	col.slot = col.titleCell.parentNode;
	syra_dom.toggleClass(col.titleCell, "s-grid-fixed", false);

	col.filter_cell && col.filter_cell.insertBefore();

	for (var ii = 0, jj = col.list.records.length; ii < jj; ii++) {
		var record = col.list.records[ii];
		record.dataRow.insertBefore(record.cellsMap[col.key], record.dataRow.firstChild);
	}
};

function _clearFieldColumns(columns) {
	if (columns) {
		for (var ii = 0, jj = columns.length; ii < jj; ii++) {
			if (columns[ii].$bind) {
				columns.splice(ii, columns.length - ii);
				break;
			}
		}
	}
}

exports.resetReorder = function(list) {
	var $binds = list.$origColumns;
	if ($binds) {
		_clearFieldColumns(list.builder.allColumns);
		var fixedTable = list.builder.fixedTable;
		var scrollTable = list.builder.scrollTable;
		fixedTable && _clearFieldColumns(fixedTable.columns);
		scrollTable && _clearFieldColumns(scrollTable.columns);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var col = list.builder.columnsMap[$binds[ii]];
			list.builder.allColumns.push(col);
			col.table = col.$field.$isFixed ? fixedTable : scrollTable;
			if (col.titleCell) {
				col.table.titleRow.appendChild(col.titleCell);
				col.slot = col.titleCell.parentNode;
			}
			col.filter_cell && col.filter_cell.append();
			for (var mm = 0, kk = list.records.length; mm < kk; mm++) {
				var record = list.records[mm];
				record[col.table.$rowKey].appendChild(record.cellsMap[col.key]);
			}
			col.table.columns.push(col);
			syra_dom.toggleClass(col.titleCell, "s-grid-fixed", col.table.isFixedCols);
		}
		_fillItemsList(list);
	}
};

function Reordoring(updater, col) {
	syra_site.isInoutDisabled = true;
	this.colSource = col;
	this.updater = updater;
	this.builder = col.list.builder;
	var offset = col.titleCell.getBoundingClientRect();
	this.top = offset.top;
	this.left = offset.left;
	this.boundary = this.builder.scrollTable.titleRow.getBoundingClientRect();
	this.info = syra_dom.div("s-grid-drag-image", syra_site.layoutSlot);
	this.cueTop = syra_dom.div("s-grid-drop-cue-top");
	this.cueBottom = syra_dom.div("s-grid-drop-cue-bottom");
	this.scrollArea = (col.list.records && col.list.records.length) ? this.builder.scrollTable.bodySlot : this.builder.scrollTable.headSlot;
	this.scrollBoundary = syra_dom.getBoundingClientRect(this.scrollArea);
	this.scrollBoundary.scrollWidth = this.scrollArea.scrollWidth;
	this.scrollBoundary.scrollHeight = this.scrollArea.scrollHeight;

	syra_dom.hide(this.cueTop, true);
	syra_dom.hide(this.cueBottom, true);
	this.cueTop.style.top = (this.boundary.top - 9) + "px";
	this.cueBottom.style.top = this.boundary.bottom + "px";
	syra_site.layoutSlot.appendChild(this.cueTop);
	syra_site.layoutSlot.appendChild(this.cueBottom);
	this.info.textContent = col.titleText;
	this.isDragging = false;
	this.bindMouseEvent(true);
}

exports.Reordoring = helpers.defineClass(Reordoring, null, {
	bindMouseEvent: function(bind) {
		var self = this;
		if (bind) {
			syra_site.layoutSlot.addEventListener("mousemove", self.on_mousemove = function(event) {
				event.preventDefault();
				self._move(event);
			}, false);
			syra_site.layoutSlot.addEventListener("mouseup", self.on_mouseup = function(event) {
				self.end();
			}, false);
		} else {
			self.on_mousemove && syra_site.layoutSlot.removeEventListener("mousemove", self.on_mousemove);
			self.on_mouseup && syra_site.layoutSlot.removeEventListener("mouseup", self.on_mouseup);
			self.on_mousemove = self.on_mouseup = null;
		}
	},
	_move: function(event) {
		if (!this.isDragging) {
			if (!this.startX) {
				this.startX = event.pageX;
			} else {
				if (Math.abs(this.startX - event.pageX) > 4) {
					this.isDragging = true;
				}
			}
		}
		if (this.isDragging) {
			var step = 40,
				margin = 80;
			if (this.scrollBoundary) {
				if (event.pageY > (this.scrollBoundary.bottom - margin)) {
					var scrollTop = this.builder.scrollTable.bodySlot.scrollTop;
					if (scrollTop < (this.scrollBoundary.scrollHeight - this.scrollBoundary.height)) {
						this.builder.scrollTable.bodySlot.scrollTop = Math.min(scrollTop + step, this.scrollBoundary.scrollHeight - this.scrollBoundary.height);
					}
				} else {
					if (event.pageY < (this.scrollBoundary.top + margin)) {
						var scrollTop = this.builder.scrollTable.bodySlot.scrollTop;
						this.builder.scrollTable.bodySlot.scrollTop = Math.max(scrollTop - step, 0);
					}
				}
				if (event.pageX > (this.scrollBoundary.right - margin)) {
					var scrollLeft = this.scrollArea.scrollLeft;
					if (scrollLeft < (this.scrollBoundary.scrollWidth - this.scrollBoundary.width)) {
						this.scrollArea.scrollLeft = Math.min(scrollLeft + step, this.scrollBoundary.scrollWidth - this.scrollBoundary.width);
					}
				} else {
					if (event.pageX < (this.scrollBoundary.left + margin)) {
						this.scrollArea.scrollLeft = Math.max(this.scrollArea.scrollLeft - step, 0);
					}
				}
			}

			var top = Math.max(event.pageY, this.boundary.top);
			var left = Math.max(event.pageX, this.boundary.left);
			var inBoundary = (event.pageX == left && event.pageY == top);
			this.info.style.top = top + 15 + "px";
			this.info.style.left = left + 15 + "px";

			if (this.enabled && this.lastColBoundaryX) {
				if (event.pageX > this.lastColBoundaryX) {
					if (!this.dropAtEnd) {
						this.cueBottom.style.left = this.cueTop.style.left = (this.targetX + this.colTarget.colWidth) + "px";
						this.dropAtEnd = true;
					}
				} else {
					if (this.dropAtEnd) {
						this.cueBottom.style.left = this.cueTop.style.left = this.targetX + "px";
						this.dropAtEnd = false;
					}
				}
			}
		}
	},
	end: function() {
		this.bindMouseEvent(false);
		if (this.isDragging && this.colTarget) {
			var list = this.colSource.list;
			var allColumns = list.builder.allColumns;
			var tblSource = this.colSource.table;
			allColumns.splice(allColumns.indexOf(this.colSource), 1);
			tblSource.columns.splice(tblSource.columns.indexOf(this.colSource), 1);
			this.colTarget.titleCell.parentNode.insertBefore(this.colSource.titleCell, this.dropAtEnd ? this.colTarget.titleCell.nextSibling : this.colTarget.titleCell);
			this.colSource.slot = this.colTarget.slot;

			if (this.colSource.filter_cell) {
				var target = this.colTarget.filter_cell.slot;
				target.parentNode.insertBefore(this.colSource.filter_cell.slot, this.dropAtEnd ? target.nextSibling : target);
			}

			for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
				var record = list.records[ii];
				var targetCell = record.cellsMap[this.colTarget.key];
				targetCell.parentNode.insertBefore(record.cellsMap[this.colSource.key], this.dropAtEnd ? targetCell.nextSibling : targetCell);
			}
			allColumns.splice(allColumns.indexOf(this.colTarget) + (this.dropAtEnd ? 1 : 0), 0, this.colSource);
			this.colTarget.table.columns.splice(this.colTarget.table.columns.indexOf(this.colTarget) + (this.dropAtEnd ? 1 : 0), 0, this.colSource);
			this.colSource.table = this.colTarget.table;
			syra_dom.toggleClass(this.colSource.titleCell, "s-grid-fixed", this.colSource.table.isFixedCols);
			_fillItemsList(list);
			var $columns = [];
			for (var ii = 0, jj = list.$item.$layout.$items.length; ii < jj; ii++) {
				$columns.push(list.$item.$layout.$items[ii].$bind);
			}
			list.$pagePreferences.$columns = $columns;
			list.saveListDesign();
			syra_preference.page.saveField(list, list.$pagePreferences);
			list.resizeItem();
		}
		this.dispose();
		syra_site.layoutSlot.style.cursor = "default";
	},
	onColumnHeaderEnterLeave: function(col) {
		this.colTarget = col;
		if (this.colTarget) {
			this.targetX = this.colTarget.titleCell.getBoundingClientRect().left - 4; //4 cue width /2
			if (this.builder.allColumns[this.builder.allColumns.length - 1] == this.colTarget) {
				this.lastColBoundaryX = this.targetX + this.colTarget.colWidth / 2;
			}
			this.cueTop.style.left = this.cueBottom.style.left = this.targetX + "px";
		}
		this.enabled = this.colTarget && (this.colSource != this.colTarget);
		syra_dom.hide(this.cueTop, !this.enabled);
		syra_dom.hide(this.cueBottom, !this.enabled);
		syra_dom.toggleClass(this.info, "s-drag-ok", this.enabled);
	},

	dispose: function() {
		syra_dom.remove(this.info);
		syra_dom.remove(this.cueTop);
		syra_dom.remove(this.cueBottom);
		this.bindMouseEvent(false);
		if (this.updater) {
			delete this.updater.reordoring;
		}
		syra_site.disposeObject(this);
	}
});