"use strict";
var Draggable = require('syracuse-ui/lib/scroll/drag').Draggable;

function _findEventCol(builder, event) {
	var target = event.target;
	while ((!target.syraColKey) && (target != builder.slotTable)) {
		target = target.parentNode;
	}
	return target.syraColKey && builder.columnsMap[target.syraColKey];
}

function _fillItemsList(list) {
	var allColumns = list.builder.allColumns;
	list.$item.$layout.$items = [];
	for (var ii = 0, jj = allColumns.length; ii < jj; ii++) {
		var col = allColumns[ii];
		if (col.$bind) {
			if (!col.table.isFixedCols) {
				delete col.$item.$isFixed;
			}
			list.$item.$layout.$items.push(col.$item);
		}
	}
}

exports.moveToSrollTable = function(col) {
	col.table = col.list.builder.scrollTable;
	col.table.columns.unshift(col);
	col.table.titleRow.insertBefore(col.titleCell, col.table.titleRow.firstChild);
	col.slot = col.titleCell.parentNode;
	syra_dom.toggleClass(col.titleCell, "s-grid-fixed", false);

	col.filter_cell && col.filter_cell.insertBefore();

	for (var ii = 0, jj = col.list.records.length; ii < jj; ii++) {
		var record = col.list.records[ii];
		record.dataRow.insertBefore(record.cellsMap[col.key], record.dataRow.firstChild);
	}
};

function _clearFieldColumns(columns) {
	if (columns) {
		for (var ii = 0, jj = columns.length; ii < jj; ii++) {
			if (columns[ii].$bind) {
				columns.splice(ii, columns.length - ii);
				break;
			}
		}
	}
}

exports.resetReorder = function(list) {
	var $binds = list.$origColumns;
	if ($binds) {
		_clearFieldColumns(list.builder.allColumns);
		var fixedTable = list.builder.fixedTable;
		var scrollTable = list.builder.scrollTable;
		fixedTable && _clearFieldColumns(fixedTable.columns);
		scrollTable && _clearFieldColumns(scrollTable.columns);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var col = list.builder.columnsMap[$binds[ii]];
			list.builder.allColumns.push(col);
			col.table = col.$field.$isFixed ? fixedTable : scrollTable;
			if (col.titleCell) {
				col.table.titleRow.appendChild(col.titleCell);
				col.slot = col.titleCell.parentNode;
			}
			col.filter_cell && col.filter_cell.append();
			for (var mm = 0, kk = list.records.length; mm < kk; mm++) {
				var record = list.records[mm];
				record[col.table.$rowKey].appendChild(record.cellsMap[col.key]);
			}
			col.table.columns.push(col);
			syra_dom.toggleClass(col.titleCell, "s-grid-fixed", col.table.isFixedCols);
		}
		_fillItemsList(list);
	}
};

function _addReorder() {
	return {
		start: function(context) {
			var offset = this.colSource.titleCell.getBoundingClientRect();
			this.top = offset.top;
			this.left = offset.left;
			this.boundary = this.builder.scrollTable.titleRow.getBoundingClientRect();
			this.info = syra_dom.div("s-sortable-info-ok", syra_site.layoutSlot);
			this.cueTop = syra_dom.div("s-grid-drop-cue-top");
			this.cueBottom = syra_dom.div("s-grid-drop-cue-bottom");
			this.scrollArea = (this.list.records && this.list.records.length) ? this.builder.scrollTable.bodySlot : this.builder.scrollTable.headSlot;
			this.scrollBoundary = syra_dom.getBoundingClientRect(this.scrollArea);
			this.scrollBoundary.scrollWidth = this.scrollArea.scrollWidth;
			this.scrollBoundary.scrollHeight = this.scrollArea.scrollHeight;

			syra_dom.hide(this.cueTop, true);
			syra_dom.hide(this.cueBottom, true);
			this.cueTop.style.top = (this.boundary.top - 9) + "px";
			this.cueBottom.style.top = this.boundary.bottom + "px";
			syra_site.layoutSlot.appendChild(this.cueTop);
			syra_site.layoutSlot.appendChild(this.cueBottom);
			this.info.textContent = this.colSource.titleText;
			context.isDragging = false;
		},
		drag: function(context, event) {
			if (!context.isDragging) {
				if (!this.startX) {
					this.startX = event.pageX;
				} else {
					if (Math.abs(this.startX - event.pageX) > 4) {
						context.isDragging = true;
					}
				}
			}
			if (context.isDragging) {
				var step = 40,
					margin = 80;
				if (this.scrollBoundary) {
					if (event.pageY > (this.scrollBoundary.bottom - margin)) {
						var scrollTop = this.builder.scrollTable.bodySlot.scrollTop;
						if (scrollTop < (this.scrollBoundary.scrollHeight - this.scrollBoundary.height)) {
							this.builder.scrollTable.bodySlot.scrollTop = Math.min(scrollTop + step, this.scrollBoundary.scrollHeight - this.scrollBoundary.height);
						}
					} else {
						if (event.pageY < (this.scrollBoundary.top + margin)) {
							var scrollTop = this.builder.scrollTable.bodySlot.scrollTop;
							this.builder.scrollTable.bodySlot.scrollTop = Math.max(scrollTop - step, 0);
						}
					}
					if (event.pageX > (this.scrollBoundary.right - margin)) {
						var scrollLeft = this.scrollArea.scrollLeft;
						if (scrollLeft < (this.scrollBoundary.scrollWidth - this.scrollBoundary.width)) {
							this.scrollArea.scrollLeft = Math.min(scrollLeft + step, this.scrollBoundary.scrollWidth - this.scrollBoundary.width);
						}
					} else {
						if (event.pageX < (this.scrollBoundary.left + margin)) {
							this.scrollArea.scrollLeft = Math.max(this.scrollArea.scrollLeft - step, 0);
						}
					}
				}

				var top = Math.max(event.pageY, this.boundary.top);
				var left = Math.max(event.pageX, this.boundary.left);
				var inBoundary = (event.pageX == left && event.pageY == top);
				this.info.style.top = top + 15 + "px";
				this.info.style.left = left + 15 + "px";

				if (this.enabled && this.lastColBoundaryX) {
					if (event.pageX > this.lastColBoundaryX) {
						if (!this.dropAtEnd) {
							this.cueBottom.style.left = this.cueTop.style.left = (this.targetX + this.colTarget.colWidth) + "px";
							this.dropAtEnd = true;
						}
					} else {
						if (this.dropAtEnd) {
							this.cueBottom.style.left = this.cueTop.style.left = this.targetX + "px";
							this.dropAtEnd = false;
						}
					}
				}
			}
		},
		stop: function(context) {
			if (context.isDragging && this.colTarget) {
				var allColumns = this.builder.allColumns;
				var tblSource = this.colSource.table;
				allColumns.splice(allColumns.indexOf(this.colSource), 1);
				tblSource.columns.splice(tblSource.columns.indexOf(this.colSource), 1);
				this.colTarget.titleCell.parentNode.insertBefore(this.colSource.titleCell, this.dropAtEnd ? this.colTarget.titleCell.nextSibling : this.colTarget.titleCell);
				this.colSource.slot = this.colTarget.slot;

				if (this.colSource.filter_cell) {
					var target = this.colTarget.filter_cell.slot;
					target.parentNode.insertBefore(this.colSource.filter_cell.slot, this.dropAtEnd ? target.nextSibling : target);
				}

				for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
					var record = this.list.records[ii];
					var targetCell = record.cellsMap[this.colTarget.key];
					targetCell.parentNode.insertBefore(record.cellsMap[this.colSource.key], this.dropAtEnd ? targetCell.nextSibling : targetCell);
				}
				allColumns.splice(allColumns.indexOf(this.colTarget) + (this.dropAtEnd ? 1 : 0), 0, this.colSource);
				this.colTarget.table.columns.splice(this.colTarget.table.columns.indexOf(this.colTarget) + (this.dropAtEnd ? 1 : 0), 0, this.colSource);
				this.colSource.table = this.colTarget.table;
				syra_dom.toggleClass(this.colSource.titleCell, "s-grid-fixed", this.colSource.table.isFixedCols);
				_fillItemsList(this.list);
				var $columns = [];
				for (var ii = 0, jj = this.list.$item.$layout.$items.length; ii < jj; ii++) {
					$columns.push(this.list.$item.$layout.$items[ii].$bind);
				}
				this.list.$pagePreferences.$columns = $columns;
				this.list.saveListDesign();
				syra_preference.page.saveField(this.list, this.list.$pagePreferences);
				this.list.resizeItem();
			}
			syra_dom.remove(this.info);
			syra_dom.remove(this.cueTop);
			syra_dom.remove(this.cueBottom);
			delete this.colSource.resizer;
		},
		mousemove: function(event, col) {
			if (this.colTarget != col) {
				this.colTarget = col;
				if (this.colTarget) {
					this.targetX = this.colTarget.titleCell.getBoundingClientRect().left - 4; //4 cue width /2
					if (this.builder.allColumns[this.builder.allColumns.length - 1] == this.colTarget) {
						this.lastColBoundaryX = this.targetX + this.colTarget.colWidth / 2;
					}
					this.cueTop.style.left = this.cueBottom.style.left = this.targetX + "px";
				}
				this.enabled = this.colTarget && (this.colSource != this.colTarget);
				syra_dom.hide(this.cueTop, !this.enabled);
				syra_dom.hide(this.cueBottom, !this.enabled);
				this.info.className = this.enabled ? "s-sortable-info-ok" : "s-sortable-info";
			}
		}
	};
}

function _addResizer() {
	return {
		start: function(context) {
			var record = this.list.records && this.list.records[0];
			var cells = record && record[this.colSource.table.$rowKey].children;
			this.colSource.resizer.dataCell = cells && cells[this.colSource.titleCell.cellIndex];
			this.colSource.resizer.isLast = true;
			var builder = this.list.builder;
			var cols = builder.allColumns;
			for (var ii = cols.indexOf(this.colSource) + 1, jj = cols.length; ii < jj; ii++) {
				if (!cols[ii].$isHidden) {
					this.colSource.resizer.isLast = false;
					break;
				}
			}
			this.colSource.resizer.startWidth = this.colSource.colWidth;
			if (this.colSource.table.isFixedCols) {
				this.colSource.resizer.fixedWidth = this.colSource.table.slot.getBoundingClientRect().width;
			}
			this.colSource.resizer.maxContainerWidth = builder.tableSlot.parentNode.clientWidth;
			this.colSource.resizer.maxTableSlotWidth = builder.tableSlot.getBoundingClientRect().width;
			context.isDragging = false;
		},
		drag: function(context, event) {
			var cursor = "not-allowed";
			var resizer = this.colSource.resizer;
			if ((event.pageY >= (resizer.top - 20)) && (event.pageY <= (resizer.bottom + 20))) {
				if (!context.isDragging && Math.abs(resizer.startX - event.pageX) > 1) {
					context.isDragging = true;
				}
				if (context.isDragging) {
					var newWidth = resizer.startWidth + (syra_context.isRTL ? (resizer.startX - event.pageX) : (event.pageX - resizer.startX));
					if (newWidth > 50) {
						this.colSource.colWidth = this.colSource.newWidth = newWidth;
						if (resizer.dataCell) {
							resizer.dataCell.style.width = this.colSource.colWidth + "px";
						}
						this.colSource.titleCell.style.width = this.colSource.colWidth + "px";
						cursor = "e-resize";
					}
					var diff = this.colSource.colWidth - resizer.startWidth;
					if (resizer.isLast) {
						this.list.builder.tableSlot.style.maxWidth = Math.min((resizer.maxTableSlotWidth + diff), resizer.maxContainerWidth) + "px";
					}
					if (this.colSource.table.isFixedCols) {
						this.colSource.table.slot.style.width = resizer.fixedWidth + diff + "px";
					}
				}
			}
			syra_site.layoutSlot.style.cursor = cursor;
		},
		stop: function(context) {
			if (context.isDragging) {
				this.list.$pagePreferences.$columnWidths = this.list.$pagePreferences.$columnWidths || {};
				delete this.list.$pagePreferences.$colWidths;
				var width = Math.round(this.colSource.colWidth) + "px";
				if (this.colSource.$field) {
					this.colSource.$item.$width = width;
				}
				if (this.colSource.isTreeview) {
					this.list.$item.$treeWidth = width;
				}
				this.list.$pagePreferences.$columnWidths[this.colSource.key] = width;
				delete this.colSource.dynWidth;
				this.list.saveListDesign();
				syra_preference.page.saveField(this.list, this.list.$pagePreferences);
				delete this.colSource.newWidth;
				syra_site.layoutSlot.style.cursor = "default";
				this.list.resizeItem(true);
			}
			delete this.colSource.resizer;
		}
	};
}

exports.add = function(table) {
	return new Draggable({
		builder: table.builder,
		handle: table.titleRow,
		_ensureColResizer: function(col) {
			if (!col.resizer) {
				col.resizer = syra_dom.getBoundingClientRect(col.titleCell);
				col.resizer.startX = col.resizer[syra_context.isRTL ? "left" : "right"];
			}
		},
		mousemove: function(event) {
			if (!this._updater) {
				event.preventDefault();
				if (event.target) {
					var col = _findEventCol(this.builder, event);
					if (col && (col.$field || col.isTreeview)) {
						this._ensureColResizer(col);
						if ((event.pageX >= (col.resizer.startX - 6) && event.pageX <= (col.resizer.startX + 6))) {
							if (this.resizingCol != col) {
								(this.resizingCol = col).titleCell.style.cursor = "e-resize";
							}
						} else {
							if (this.resizingCol) {
								this.resizingCol.titleCell.style.cursor = "";
								this.resizingCol = null;
							}
						}
					}
				}
			} else {
				if (this._updater.mousemove) {
					this._updater.mousemove(event, _findEventCol(this.builder, event));
				}
			}
		},
		mousedown: function(event) {
			if (event.target) {
				var col = _findEventCol(this.builder, event);
				if (col) {
					this._ensureColResizer(col);
					if (col == this.resizingCol) {
						this._updater = _addResizer();
					} else {
						if (!col.$field) {
							return; //no reorder for no col field
						}
						this._updater = _addReorder();
					}
					this._updater.colSource = col;
					this._updater.list = col.list;
					this._updater.builder = col.list.builder;
					return true;
				}
			}
		},
		start: function() {
			this._updater.start(this);
		},
		drag: function(event) {
			this._updater.drag(this, event);
		},
		stop: function() {
			this._updater.stop(this);
			if (this._updater) {
				syra_site.disposeObject(this._updater);
				delete this._updater;
			}
		}
	});
};