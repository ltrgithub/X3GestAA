"use strict";
var _helpers = require('syracuse-core').helpers;
var Reordoring = require('./colsReorderer').Reordoring;

function _findEventCol(builder, event) {
	var target = event.target;
	while ((!target.syra_field_bind) && (target != builder.slotTable)) {
		target = target.parentNode;
	}
	return builder.columnsMap[target.syra_field_bind];
}

function Resizing(updater, col) {
	var self = this;
	self.updater = updater;
	self.col = col;
	syra_site.isInoutDisabled = true;

	var record = col.list.records && col.list.records[0];
	var cells = record && record[col.table.$rowKey].children;
	col.resizer.dataCell = cells && cells[col.titleCell.cellIndex];
	col.resizer.isLast = true;
	var builder = col.list.builder;
	var cols = builder.allColumns;
	for (var ii = cols.indexOf(col) + 1, jj = cols.length; ii < jj; ii++) {
		if (!cols[ii].$isHidden) {
			col.resizer.isLast = false;
			break;
		}
	}
	col.resizer.startWidth = col.colWidth;
	if (col.table.isFixedCols) {
		col.resizer.fixedWidth = col.table.slot.getBoundingClientRect().width;
	}
	col.resizer.maxContainerWidth = builder.tableSlot.parentNode.clientWidth;
	col.resizer.maxTableSlotWidth = builder.tableSlot.getBoundingClientRect().width;
	this.isDragging = false;
	this.bindMouseEvent(true);
}

exports.Resizing = _helpers.defineClass(Resizing, null, {
	bindMouseEvent: function(bind) {
		var self = this;
		if (bind) {
			syra_site.layoutSlot.addEventListener("mousemove", self.on_mousemove = function(event) {
				event.preventDefault();
				var cursor = "not-allowed";
				var resizer = self.col.resizer;
				if ((event.pageY >= (resizer.top - 20)) && (event.pageY <= (resizer.bottom + 20))) {
					if (!self.isDragging && Math.abs(resizer.startX - event.pageX) > 1) {
						self.isDragging = true;
					}
					if (self.isDragging) {
						var newWidth = resizer.startWidth + (syra_context.isRTL ? (resizer.startX - event.pageX) : (event.pageX - resizer.startX));
						if (newWidth > 50) {
							self.col.colWidth = self.col.newWidth = newWidth;
							if (resizer.dataCell) {
								resizer.dataCell.style.width = self.col.colWidth + "px";
							}
							self.col.titleCell.style.width = self.col.colWidth + "px";
							cursor = "e-resize";
						}
						var diff = self.col.colWidth - resizer.startWidth;
						if (resizer.isLast) {
							col.list.builder.tableSlot.style.maxWidth = Math.min((resizer.maxTableSlotWidth + diff), resizer.maxContainerWidth) + "px";
						}
						if (self.col.table.isFixedCols) {
							self.col.table.slot.style.width = resizer.fixedWidth + diff + "px";
						}
					}
				}
				syra_site.layoutSlot.style.cursor = cursor;
			}, false);
			syra_site.layoutSlot.addEventListener("mouseup", self.on_mouseup = function(event) {
				self.end();
				syra_site.isInoutDisabled = false;
			}, false);
		} else {
			self.on_mousemove && syra_site.layoutSlot.removeEventListener("mousemove", self.on_mousemove);
			self.on_mouseup && syra_site.layoutSlot.removeEventListener("mouseup", self.on_mouseup);
			self.on_mousemove = self.on_mouseup = null;
		}
	},
	end: function() {
		this.bindMouseEvent(false);
		if (this.isDragging) {
			var list = this.col.list;
			list.$pagePreferences.$columnWidths = list.$pagePreferences.$columnWidths || {};
			delete list.$pagePreferences.$colWidths;
			list.$pagePreferences.$columnWidths[this.col.$item.$bind] = this.col.$item.$width = Math.round(this.col.colWidth) + "px";
			delete this.col.dynWidth;
			list.saveListDesign();
			syra_preference.page.saveField(list, list.$pagePreferences);
			delete this.col.newWidth;
			syra_site.layoutSlot.style.cursor = "default";
			list.resizeItem(true);
		}
		delete this.col.resizer;
		this.dispose();
	},
	dispose: function() {
		this.bindMouseEvent(false);
		if (this.updater) {
			delete this.updater.resizing;
		}
		syra_site.disposeObject(this);
	}
});

function ColUpdater() {

}

exports.ColUpdater = _helpers.defineClass(ColUpdater, null, {
	_ensureColResizer: function(col) {
		if (!col.resizer) {
			col.resizer = syra_dom.getBoundingClientRect(col.titleCell);
			col.resizer.startX = col.resizer[syra_context.isRTL ? "left" : "right"];
		}
	},
	load: function(table) {
		var self = this;
		self.builder = table.builder;
		self.titleRow = table.titleRow;
		self.titleRow.addEventListener("mousemove", self.on_mousemove = function(event) {
			if (!self.resizing && !self.reordoring) {
				event.preventDefault();
				if (event.target) {
					var col = _findEventCol(self.builder, event);
					if (col) {
						self._ensureColResizer(col);
						if ((event.pageX >= (col.resizer.startX - 6) && event.pageX <= (col.resizer.startX + 6))) {
							if (self.resizingCol != col) {
								(self.resizingCol = col).titleCell.style.cursor = "e-resize";
							}
						} else {
							if (self.resizingCol) {
								self.resizingCol.titleCell.style.cursor = "";
								self.resizingCol = null;
							}
						}
					}
				}
			} else {
				if (self.reordoring) {
					var col = _findEventCol(self.builder, event);
					if (self.reordoring.colTarget != col) {
						self.reordoring.onColumnHeaderEnterLeave(col, true);
					}
				}
			}
		}, false);
		self.titleRow.addEventListener("mousedown", self.on_mousedown = function(event) {
			event.preventDefault();
			if (event.target) {
				var col = _findEventCol(self.builder, event);
				if (col) {
					if (col == self.resizingCol) {
						self._ensureColResizer(col);
						self.resizing = new Resizing(self, col);
						event.stopPropagation();
					} else {
						self._ensureColResizer(col);
						self.reordoring = new Reordoring(self, col);
						event.stopPropagation();
					}
				}
			}
		}, false);
	},
	dispose: function() {
		if (this.titleRow) {
			this.on_mousemove && this.titleRow.removeEventListener("mousemove", this.mousemove);
			this.on_mousedown && this.titleRow.removeEventListener("mousedown", this.on_mousedown);
		}
		this.reordoring && this.reordoring.dispose();
		this.resizing && this.resizing.dispose();
		syra_site.disposeObject(this);
	}
});