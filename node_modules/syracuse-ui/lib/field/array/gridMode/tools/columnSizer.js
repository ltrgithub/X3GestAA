"use strict";

var _widths = {
	picker: 22,
	titleCell: {
		sort: 20,
		noSort: 8
	},
	border: 2,
	input: {
		padding: 12
	}
};


function _findTreeColWidth(records, col) {
	var width = 0;
	for (var ii = 0, jj = records.length; ii < jj; ii++) {
		var record = records[ii];
		var slot = record.treeNode && record.treeNode.slot;
		width = Math.max(slot.scrollWidth, width);
	}
	return width;
}

function _findMaxField(records, col) {
	var width = 0,
		maxField;
	for (var ii = 0, jj = records.length; ii < jj; ii++) {
		var record = records[ii];
		var field = record.fieldCellsMap[col.$bind];
		var length = field.getDisplayText().length;
		if (length > width) {
			maxField = field;
			width = length;
		}
	}
	return maxField;
}

function _findMaxWidth(maxField) {
	var width = 0;
	if (maxField) {
		if (maxField.input) {
			width = maxField.input.scrollWidth + _widths.input.padding;
		} else {
			width = maxField._dataValue.scrollWidth;
		}
	}
	return width;
}

function _findFieldNoEditColWidth(records, col, firstCell) {
	col.colWidth = 0;
	switch (col.$field.$type) {
		case "application/x-choice":
		case "application/x-date":
		case "application/x-time":
		case "application/x-datetime":
		case "application/x-reference":
		case "application/x-integer":
		case "application/x-decimal":
		case "application/x-real":
		case "application/x-string":
			col.colWidth = _findMaxWidth(_findMaxField(records, col));
			break;
		case "application/x-quantity":
			var maxField = _findMaxField(records, col);
			col.colWidth = _findMaxWidth(maxField);
			if (maxField && maxField.unitField) {
				col.colWidth += _findMaxWidth(maxField.unitField);
			}
			break;
		case "application/x-boolean":
			if (firstCell) {
				col.colWidth = firstCell.scrollWidth;
			}
			break;
		case "application/x-icon":
			col.dynWidth = col.colWidth = 82; //32 for padding
			break;
		default:
			var firstField = records[0] && records[0].fieldCellsMap[col.$bind];
			if (firstField && firstField.isDocumentField) {
				if (firstField.isImage) {
					col.colWidth = parseInt(firstField.$item.$imageWidth.replace("px", ""), 10);
					col.colWidth += 32; //cell padding
				} else {
					col.colWidth = _findMaxWidth(_findMaxField(records, col));
				}
			}
			break;
	}
	if (!col.$field.$hasFilterCapability) {
		col.colWidth += 16;
	}
}

function _findFieldEditColWidth(records, col, firstCell) {
	var firstField = records[0] && records[0].fieldCellsMap[col.$bind];
	col.colWidth = col.$field.$displayLength || col.$field.$maxLength || 0;
	if (col.colWidth) {
		col.colWidth = (col.colWidth * 8) + _widths.input.padding;
	}
	if (!col.colWidth) {
		switch (col.$field.$type) {
			case "application/x-choice":
				var $enum = col.$field.$value && col.$field.$value.$enum;
				if ($enum) {
					for (var ii = 0, jj = $enum.length; ii < jj; ii++) {
						col.colWidth = Math.max(col.colWidth, ($enum[ii].$title && $enum[ii].$title.length) || 0);
					}
					col.colWidth = (col.colWidth * 8) + _widths.input.padding;
				}
				break;
			case "application/x-date":
			case "application/x-time":
			case "application/x-datetime":
				if (firstField && firstField.localFormat) {
					col.colWidth = (firstField.localFormat.length * 8) + _widths.input.padding;
				}
				break;
			case "application/x-quantity":
			case "application/x-reference":
				if (firstCell) {
					firstCell.style.width = "";
				}
				col.colWidth = _findMaxWidth(_findMaxField(records, col));
				break;
			case "application/x-integer":
			case "application/x-decimal":
			case "application/x-real":
				if (col.$field.$precision) {
					col.colWidth = col.$field.$precision + 2 * (col.$field.$precision / 3); //separator
				}
				if (col.$field.$scale) {
					col.colWidth += col.$field.$scale + 1; //for separator
				}
				col.colWidth = (col.colWidth * 8) + _widths.input.padding;
				break;
			case "application/x-string":
				if (firstCell) {
					firstCell.style.width = "";
				}
				col.colWidth = _findMaxWidth(_findMaxField(records, col));
				break;
			case "application/x-boolean":
				if (firstCell) {
					col.colWidth = firstCell.scrollWidth;
				}
				break;
			case "application/x-icon":
				col.colWidth = 82; //32 for padding
				break;
			default:
				if (firstField && firstField.isDocumentField) {
					firstCell.style.width = "";
					col.colWidth = firstCell.scrollWidth;
				}
				break;
		}
	}
	col.colWidth = col.colWidth || 0;
	if (firstField) {
		if (firstField.buttons) {
			col.colWidth += (firstField.buttons.length * _widths.picker);
		}
		if (col.colWidth) {
			col.dynWidth = col.colWidth;
		}
	}
}

exports.setColumnWidth = function(col, records, $prefWidths, firstCell) {
	var builder = col.table.builder;
	col.colWidth = col.dynWidth;
	if (!col.colWidth) {
		col.colWidth = $prefWidths[col.$bind] || (col.$item && col.$item.$width) || (col.$field && col.$field.$width);
	}
	if (col.colWidth == "NaNpx") {
		col.colWidth = null;
	}
	if (col.colWidth) {
		col.colWidth = parseInt((col.colWidth + "").replace("px", ""), 10);
	} else {
		//col.titleCell.style.width = "";
		if (col == builder.columnsMap.$treeview) {
			if (firstCell) {
				firstCell.style.width = "";
			}
			col.colWidth = _findTreeColWidth(records, col);
		} else {
			if (col.useContentWidth && firstCell) {
				if (col == builder.columnsMap.$rowIndex) {
					col.colWidth = (((builder.list.greatestRowIndex || 0) + "").length * 8) + 20;
				} else {
					col.colWidth = col.dynWidth = firstCell.scrollWidth;
				}
			} else {
				if (col.$field) {
					if (builder.list.$isEditMode) {
						_findFieldEditColWidth(records, col, firstCell);
					} else {
						if (firstCell) {
							firstCell.style.width = "";
						}
						_findFieldNoEditColWidth(records, col, firstCell);
					}
					if (col.$field.$hasFilterCapability) {
						col.colWidth += 36;
					}
					if (col.dynWidth) {
						col.dynWidth = col.colWidth;
					}
				}
			}
		}
		if (col.colWidth > 1) {
			//>1 cause scrollwidth error
			col.colWidth += 2; //firstCell border 	
		} else {
			col.colWidth = 0;
		}
		if (col.isTitleEmpty) {
			if (col.titleWidth != col.colWidth) {
				col.titleWidth = col.colWidth;
			}
		} else {
			if (!col.titleWidth) {
				col.titleCell.style.width = "";
				if (col.titleLabel) {
					col.titleWidth = col.titleLabel.link.scrollWidth + (col.sortBtn ? _widths.titleCell.sort : _widths.titleCell.noSort);
				} else {
					col.titleWidth = col.titleCell.scrollWidth;
				}
				if (col.titleWidth > 1) {
					col.titleWidth += _widths.border;
				} else {
					col.titleWidth = 0;
				}
			}
			col.colWidth = Math.max(col.colWidth, col.titleWidth);
		}
	}
	if (col.$field) {
		col.colWidth = Math.max(40, col.colWidth);
	}
	return col.colWidth;
};