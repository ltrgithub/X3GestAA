"use strict";
var _popupItem, _popup;
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

exports.dispose = function() {
	_popup && _popup.close();
};

var _operators = {
	ensure: function(field) {
		if (!field.operators) {
			field.operators = syra_site.filterMaker.getFieldOperators(field.$field.$type, field.$filterField && field.$filterField.$type, field.page.isFusionPage);
		}
		return field.operators;
	},
	getDefault: function(field) {
		return _operators.ensure(field)[1];
	},
	onClick: function(event) {
		var field = this.parent;
		var record = field.articleParent;
		record.page.externalAdapter.onFilterEvent({
			operator: field.$filterOperator,
			list: record.list,
			event: event,
			type: "operatorclick",
			doEvent: function() {
				if (_popup && _popupItem && _popupItem.syraItem == field.id) {
					_popup.close();
				} else {
					_ensureFilterField(field);
					if (!_popupItem) {
						_popupItem = document.createElement("div");
						_popupItem.className = "s-mn-popup-body";
					}
					syra_dom.empty(_popupItem);
					_popupItem.syraItem = field.id;
					_operators.ensure(field);
					for (var ii = 0, jj = field.operators.length; ii < jj; ii++) {
						var op = field.operators[ii];
						var btn = syra_button.add({
							parent: field,
							slot: _popupItem,
							text: syra_local["flFilter_" + op],
							css: "s-mn-link",
							fontIcon: "filter_" + op,
							btnclick: _onFilterItemClick,
							operator: op
						});
						if (field.$filterOperator == op) {
							btn.link.className += " s-selected";
						}
					}
					_popup = syra_dlg.openPopup(record.boxParent, {
						content: record,
						slot: _popupItem,
						picker: field.layoutSlot,
						position: {
							my: "left top",
							at: "left bottom",
							of: $(field.layoutSlot)
						},
						onClose: function() {
							syra_dom.removeChild(_popupItem);
							_popup = _popupItem = null;
						}
					});
				}
			}
		});
	},
	setOperator: function(field, operator) {
		syra_dom.toggleClass(field.filterCell, "s-list-filter-cell-active", operator != "none");
		syra_button.setText(field.filterOperatorBtn, "", "filter_" + (field.$filterOperator = operator));
	},
	getOperator: function(field, value) {
		var operator = field.$filterOperator;
		if (value == null || value == "") {
			operator = "none";
		} else {
			if (field.$field && operator == "none") {
				operator = _operators.getDefault(field);
			}
		}
		return operator;
	}
};

function _onFilterItemClick(event) {
	var field = this.parent;
	_operators.setOperator(field, this.operator);
	_popup.close();
	field.page.externalAdapter.onFilterEvent({
		operator: field.$filterOperator,
		list: field.articleParent.list,
		filter: field,
		event: event,
		type: "operatorchange",
		doEvent: function() {
			var record = field.articleParent;
			var value = record.dataset[field.$item.$bind];
			if (field.$filterOperator != "none") {
				if (value != null && value != "") {
					if (field.$filterOperator == "empty" || field.$filterOperator == "notempty") {
						field.setValue(null);
					}
					_triggerFilter(record);
				} else {
					if (field.$filterOperator == "empty" || field.$filterOperator == "notempty") {
						_triggerFilter(record);
					}
				}
			} else {
				if (value != null && value != "") {
					field.setValue(null);
					syra_form.notifyFieldChange(field, null);
				} else {
					_triggerFilter(record);
				}
			}
		}
	});
}

function _ensureFilterField(field) {
	if (field.isReferenceField) {
		field.$filterField = field.$field.$item[field.$reference.$value.$itemProp];
		if (field.$filterField) {
			field.$filterField = field.articleParent.$prototype.$properties[field.$reference.$value.$prop];
			if (field.$filterField) {
				field.$filterCode = field.$reference.$value.$prop;
			}
		}
		if (!field.$filterField) {
			field.$filterField = field.$field.$item.$properties[field.$reference.$value.$prop];
			field.$filterCode = field.$item.$bind + "." + field.$reference.$value.$prop;
		}
	}
}

function _setValue(record, field, value, operator) {
	if (operator === undefined) {
		operator = _operators.getOperator(field, value);
	}
	_operators.setOperator(field, operator);
	if (field.isReferenceField) {
		record.dataset[field.$item.$bind] = {};
		record.dataset[field.$item.$bind][field.$filterBind] = value;
	} else {
		record.dataset[field.$item.$bind] = value;
	}
	field.setValue(value);
}

function _triggerFilter(record) {
	record.list.filler.trigger(record.list, {
		filter: record.getValues().join(" and ")
	});
	record.validateDisplay();
}

function _loadField(record, slot, $field, $bind) {
	var filterCell = slot.appendChild(document.createElement("div"));
	var field = record.page.loadNewItem(filterCell, {
		$bind: $bind,
		$isTopLabelAlignment: false,
		$isGridCell: true,
		$isFilterMode: true,
		$isMenusHiddeen: true,
		$inplace: true,
		$field: $field
	}, record);
	field.filterCell = filterCell;
	if (field.input) {
		field.input.className += " s-list-filter-input";
	}
	field.$filterCode = $bind;
	field.$filterOperator = "none";
	field.filterOperatorBtn = syra_button.add({
		parent: field,
		text: syra_local.flfilter_choiceOperator,
		css: "s-list-filter-cell-picker",
		iconOnly: true,
		fontIcon: "filter_none",
		btnclick: _operators.onClick
	});
	field.filterOperatorBtn.link.removeAttribute("href");
	field._dataValue.insertBefore(field.filterOperatorBtn.link, field._dataValue.firstChild);
	return field;
}

function _getCellValue(field) {
	if (field.$filterOperator != "none") {
		_ensureFilterField(field);
		return syra_site.filterMaker.getFieldValue({
			field: field,
			$bind: field.$item.$bind,
			$type: field.$field.$type,
			operator: field.$filterOperator,
			$filterCode: field.$filterCode,
			$filterField: field.$filterField
		});
	}
}

function _addFieldCell(record, col, $field) {
	var td = record.cellsMap[col.$item.$bind] = document.createElement("td");
	td.className = "s-list-filter-cell";
	record[col.table.$rowKey].appendChild(td);
	col.$isHidden && syra_dom.hide(td, true);
	col.cssFilter = null;
	if ($field.$hasFilterCapability) {
		var field = _loadField(record, td, $field, col.$item.$bind);
		record.fieldCellsMap[col.$item.$bind] = field;
		col.cssRecordCellFilter = " s-grid-col-filter";
		switch ($field.$type) {
			case "application/x-choice":
			case "application/x-date":
			case "application/x-time":
			case "application/x-reference":
				col.cssRecordCellFilter += " s-grid-col-filter-type-btn";
		}

		// update filter cell if where params in url (issue #3022)
		var params = col.list.page.getUrlParams();
		if (params && params.where) {
			field.$filterBind = col.$item.$bind;
			var $isRefField = false;
			// in case of reference field, appropriate $bind value is field.$reference.$value.$prop
			if (field.isReferenceField) {
				field.$filterBind = field.$reference.$value.$prop;
				$isRefField = true;
			}
			var exp = syra_site.filterMaker.parseWhere(params.where, field.$filterBind);
			if (exp && field.$filterBind == exp.$bind) {
				_setValue(record, field, exp.$value, exp.$operator);
			}
		}
		return true;
	}
}

exports.addRecord = function(list) {
	var record = new RecordArticle();
	record.list = list;
	record.isFilterArticle = record.isRecordArticle = true;
	record.$facet = "$filter";
	record.$isEditMode = true;
	record.$prototype = list.$prototype.$item;
	record.$prototype.$localization = list.page.$prototype.$localization;
	record.onFieldFocusChange = function(field, isIn) {
		this.list.builder.scrollTable.switchHeadScroll(isIn);
	}, record.addFieldCell = function(col, $field) {
		_addFieldCell(this, col, $field);
	};
	record.focus = function() {
		var $bind = this.list.builder.getNextFocusableField();
		var field = $bind && this.fieldCellsMap[$bind];
		field && field.focus();
	};
	record.drawRecord = function() {
		this.cellsMap = {};
		this.fieldCellsMap = {};
		this.domItem = this.dataRow = document.createElement("tr");
		this.list.builder.fixedTable && this.list.builder.fixedTable.headTable.appendChild(this.fixedRow = document.createElement("tr"));
		this.list.builder.scrollTable.headTable.appendChild(this.dataRow);
	};
	record.getValues = function() {
		var values = [];
		var $binds = Object.keys(this.boundFields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var field = this.boundFields[$binds[ii]][0];
			if (!field.$isHidden) {
				var value = _getCellValue(field);
				value && values.push(value);
			}
		}
		return values;
	};
	record.validateDisplay = function(event) {
		var show = this.getValues().length > 0;
		if (show && !this.list.toggleFilterBtn) {
			this.list.toggleFilterBtn = syra_button.add({
				parent: this,
				text: syra_local.flfilter_clear,
				css: this.list.$mnPickersCss,
				fontIcon: "filter_clear",
				btnclick: function() {
					var record = this.parent;
					var fields = record.boundFields;
					var $binds = Object.keys(fields);
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						_setValue(record, fields[$binds[ii]][0], null);
					}
					record.page.externalAdapter.onFilterEvent({
						list: record.list,
						event: event,
						type: "clearFilter",
						doEvent: function() {
							_triggerFilter(record);
						}
					});


				}
			});
			this.list.topbar.insertBefore(this.list.toggleFilterBtn.link, this.list.searcherSlot);
		}
		syra_button.hide(this.list.toggleFilterBtn, !show);
	};
	record.onNotifyDataChange = function(field, value) {
		_setValue(this, field, value);
		_triggerFilter(this);
		return false;
	};
	syra_item.initialize(list.page, record, {
		$layout: {
			$items: list.$item.$layout.$items
		}
	}, list);
	record.loadBox();
	return record;
};


exports.fusion = {
	_getSortedFilterRcdFields: function(filterRcd) {
		return (Object.keys(filterRcd.fieldCellsMap)).sort(function(a, b) {
			return parseInt(a.substr(2), 10) - parseInt(b.substr(2), 10);
		});
	},
	getQuickSelValues: function(list) {
		var res = [];
		var record = list.builder.filterRecord;
		if (record) {
			var $binds = this._getSortedFilterRcdFields(record);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var field = record.fieldCellsMap[$binds[ii]];
				if (field.$field) {
					var value = field.getInputValue();
					var defaultFilter = (value !== "" && field.$filterOperator === "none") ? _operators.getDefault(field) : (value === "" && field.$filterOperator !== "none") ? "none" : undefined;
					defaultFilter && _operators.setOperator(field, defaultFilter);
				}
				res.push(_getCellValue(field) || "");
			}
			record.validateDisplay();
		}
		return res;
	},
	getNextQuickSelField: function(list, bind, nextSel) {
		var ret = null,
			next, prev;
		var record = list.builder.filterRecord;
		if (record.$item && record.$item.$layout && record.$item.$layout.$items) {
			if (nextSel === undefined) {
				ret = record.boundFields[bind];
			} else {
				var cells = this._getSortedFilterRcdFields(record);
				for (var ii = 0, jj = cells.length; ii < jj; ii++) {
					if (cells[ii] === bind) {
						if (ii === 0) {
							next = cells[ii + 1];
							prev = bind;
						} else
						if (ii === (cells.length - 1)) {
							next = cells[0];
							prev = cells[ii - 1];
						} else {
							next = cells[ii + 1];
							prev = cells[ii - 1];
						}
						break;
					}
				}
				ret = record.boundFields[nextSel ? next : prev];
			}
		}
		return ret;
	}
};