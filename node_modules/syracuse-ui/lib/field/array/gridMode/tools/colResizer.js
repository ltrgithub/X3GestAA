"use strict";
var _helpers = require('syracuse-core').helpers;

function Resizer() {

}

exports.Resizer = _helpers.defineClass(Resizer, null, {
	load: function(table) {
		var self = this;
		self.builder = table.builder;
		self.titleRow = table.titleRow;
		self.titleRow.addEventListener("mousemove", self.on_mousemove = function(event) {
			if (!self.onmove) {
				event.preventDefault();
				if (event.target) {
					var col = self.builder.findEventCol(event);
					if (col) {
						if (!col.resizer) {
							col.resizer = syra_dom.getBoundingClientRect(col.titleCell);
							col.resizer.startX = col.resizer[syra_context.isRTL ? "left" : "right"];
						}
						if ((event.pageX >= (col.resizer.startX - 6) && event.pageX <= (col.resizer.startX + 6))) {
							if (self.col != col) {
								(self.col = col).titleCell.style.cursor = "e-resize";
							}
						} else {
							if (self.col) {
								self.col.titleCell.style.cursor = "";
								self.col = null;
							}
						}
					}
				}
			}
		}, false);
		self.titleRow.addEventListener("mousedown", self.on_mousedown = function(event) {
			event.preventDefault();
			if (event.target) {
				var col = self.builder.findEventCol(event);
				if (col == self.col) {
					self.startMove();
					event.stopPropagation();
				}
			}
		}, false);
	},
	startMove: function() {
		var self = this;
		syra_site.isInoutDisabled = true;
		var resizer = self.col.resizer;
		var record = self.col.list.records && self.col.list.records[0];
		var cells = record && record[self.col.table.$rowKey].children;
		resizer.dataCell = cells && cells[self.col.titleCell.cellIndex];
		resizer.isLast = true;
		var cols = self.builder.allColumns;
		for (var ii = cols.indexOf(self.col) + 1, jj = cols.length; ii < jj; ii++) {
			if (!cols[ii].$isHidden) {
				resizer.isLast = false;
				break;
			}
		}
		resizer.startWidth = self.col.colWidth;
		if (self.col.table.isFixedCols) {
			resizer.fixedWidth = self.col.table.slot.getBoundingClientRect().width;
		}
		resizer.maxContainerWidth = self.builder.tableSlot.parentNode.clientWidth;
		resizer.maxTableSlotWidth = self.builder.tableSlot.getBoundingClientRect().width;
		this.isDragging = false;
		self.onmove = {};
		syra_site.layoutSlot.addEventListener("mousemove", self.onmove.mousemove = function(event) {
			event.preventDefault();
			var cursor = "not-allowed";
			var resizer = self.col.resizer;
			if ((event.pageY >= (resizer.top - 20)) && (event.pageY <= (resizer.bottom + 20))) {
				if (!self.isDragging && Math.abs(resizer.startX - event.pageX) > 1) {
					self.isDragging = true;
				}
				if (self.isDragging) {
					var newWidth = resizer.startWidth + (syra_context.isRTL ? (resizer.startX - event.pageX) : (event.pageX - resizer.startX));
					if (newWidth > 50) {
						self.col.colWidth = self.col.newWidth = newWidth;
						if (resizer.dataCell) {
							resizer.dataCell.style.width = self.col.colWidth + "px";
						}
						self.col.titleCell.style.width = self.col.colWidth + "px";
						cursor = "e-resize";
					}
					var diff = self.col.colWidth - resizer.startWidth;
					if (resizer.isLast) {
						self.builder.tableSlot.style.maxWidth = Math.min((resizer.maxTableSlotWidth + diff), resizer.maxContainerWidth) + "px";
					}
					if (self.col.table.isFixedCols) {
						self.col.table.slot.style.width = resizer.fixedWidth + diff + "px";
					}
				}
			}
			syra_site.layoutSlot.style.cursor = cursor;
		}, false);
		syra_site.layoutSlot.addEventListener("mouseup", self.onmove.mouseup = function(event) {
			self.endMove();
			syra_site.isInoutDisabled = false;
		}, false);
	},
	endMove: function() {
		if (this.onmove) {
			this.onmove.mousemove && syra_site.layoutSlot.removeEventListener("mousemove", this.onmove.mousemove);
			this.onmove.mouseup && syra_site.layoutSlot.removeEventListener("mouseup", this.onmove.mouseup);
			delete this.onmove;
		}
		if (this.isDragging) {
			var list = this.col.list;
			list.$pagePreferences.$columnWidths = list.$pagePreferences.$columnWidths || {};
			delete list.$pagePreferences.$colWidths;
			list.$pagePreferences.$columnWidths[this.col.$item.$bind] = this.col.$item.$width = Math.round(this.col.colWidth) + "px";
			delete this.col.dynWidth;
			list.saveListDesign();
			syra_preference.page.saveField(list, list.$pagePreferences);
			delete this.col.newWidth;
			syra_site.layoutSlot.style.cursor = "default";
			list.resizeItem(true);
		}
		delete this.col.resizer;
	},
	dispose: function() {
		if (this.titleRow) {
			this.on_mousemove && this.titleRow.removeEventListener("mousedown", this.mousemove);
			this.on_mousedown && this.titleRow.removeEventListener("mousedown", this.on_mousedown);
		}
		this.moving && this.moving.dispose();
		syra_site.disposeObject(this);
	}
});