"use strict";
var _helpers = require('syracuse-core/lib/helpers');
var _columnSizer = require("./tools/columnSizer");

function _setColumnTitle(col, $title) {
	col.titleWidth = 0; //reset for sizing
	if ($title && $title.length > 0 && $title[1] == "@") {
		$title = syra_expression.parse(col.list, $title);
	}
	col.titleText = $title || "";
	if (col.titleText.length > 1) {
		col.titleText = col.titleText.substr(0, 1).toUpperCase() + col.titleText.substr(1);
	}
	syra_dom.toggleClass(col.titleLabel.link, "s-grid-title-empty", col.titleText.length == 0);
	syra_menus.button.setText(col.titleLabel, col.titleText);
}

function _copyColWidth(fromRow, toRow) {
	var toNodes = toRow.childNodes;
	var fromNodes = fromRow.childNodes;
	for (var ii = 0, jj = fromNodes.length; ii < jj; ii++) {
		toNodes[ii].style.width = fromNodes[ii].style.width;
	}
}

function _resetColWidth(row) {
	var nodes = row.childNodes;
	for (var ii = 0, jj = nodes.length; ii < jj; ii++) {
		nodes[ii].style.width = "";
	}
}


function _addTitleEmptyItem(col) {
	var div = document.createElement("div");
	div.className = "s-grid-title-empty";
	col.isTitleEmpty = true;
	col.titleCell.appendChild(div);
}

function GridTable() {}

exports.GridTable = _helpers.defineClass(GridTable, null, {
	switchHeadScroll: function(on) {
		var self = this;
		if (on) {
			if (!self.headSlot_onScroll) {
				self.headSlot_onScroll = self.headSlot.addEventListener("scroll", function(event) {
					var page = self.list.page;
					if (page && !syra_site.isInoutDisabled && page.isPageLoaded && !page._isDataChanging) {
						var diff = self.bodySlot.scrollLeft - this.scrollLeft;
						if (diff > 1 || diff < (-1)) {
							self.bodySlot.scrollLeft = this.scrollLeft;
						}
					}
				});
			}
		} else {
			self.headSlot && self.headSlot_onScroll && self.headSlot.removeEventListener("scroll", self.headSlot_onScroll);
			delete self.headSlot_onScroll;
		}
	},
	switchBodyScroll: function(on) {
		var self = this;
		if (on) {
			if (!self.bodySlot_onScroll) {
				self.bodySlot_onScroll = self.bodySlot.addEventListener("scroll", function(event) {
					var page = self.list.page;
					if (page && !syra_site.isInoutDisabled && page.isPageLoaded && !page._isDataChanging) {
						var diff = self.headSlot.scrollLeft - this.scrollLeft;
						if (diff > 1 || diff < (-1)) {
							self.headSlot.scrollLeft = this.scrollLeft;
						}
						var fixedBody = self.builder.fixedTable && self.builder.fixedTable.bodySlot;
						if (fixedBody && (fixedBody.scrollTop != this.scrollTop)) {
							fixedBody.scrollTop = this.scrollTop;
						}
					}
				});
			}
		} else {
			self.bodySlot && self.bodySlot_onScroll && self.bodySlot.removeEventListener("scroll", self.bodySlot_onScroll);
			delete self.bodySlot_onScroll;
		}
	},
	dispose: function() {
		this.switchHeadScroll(false);
		this.switchBodyScroll(false);
		syra_site.disposeObject(this);
	},
	load: function(builder, isFixedCols, slot) {
		this.builder = builder;
		this.list = builder.list;
		this.columns = [];
		var css = this.list.$skin + (isFixedCols ? "-fixed" : "");

		this.headSlot = document.createElement("div");
		this.headTable = document.createElement("table");
		this.titleRow = document.createElement("tr");
		this.bodySlot = document.createElement("div");

		this.bodyTable = document.createElement("table");

		this.headSlot.className = css + "-slot-head";
		this.headTable.className = css + "-table-head";
		this.headTable.setAttribute("cellspacing", "0");
		this.headTable.setAttribute("cellpadding", "0");
		this.headTable.appendChild(this.titleRow);

		//builder.list.$item.$isTitleRowHidden = true;

		if (this.list.$item.$isTitleRowHidden) {
			syra_dom.hide(this.headTable, true);
		}
		this.headSlot.appendChild(this.headTable);

		this.bodySlot.className = css + "-slot-body";
		this.bodyTable.className = css + "-table-body";
		this.bodyTable.setAttribute("cellspacing", "0");
		this.bodyTable.setAttribute("cellpadding", "0");

		//this.bodySlot.appendChild(this.bodyTable);

		if (this.list.$item.$isDockedHeight || this.list.$fitContainer) {
			this.bodySlot.style.overflowY = "auto";
		}
		this.isFixedCols = isFixedCols;
		this.slot = slot;
		if (this.isFixedCols) {
			this.$rowKey = "fixedRow";
			slot.className = "s-grid-slot-table-fixed";
		} else {
			this.$rowKey = "dataRow";
			slot.className = "s-grid-slot-table-scroll";
		}

		slot.appendChild(this.headSlot);
		slot.appendChild(this.bodySlot);

	},
	showBody: function(show) {
		if (show) {
			if (!this.bodyTable.parentNode) {
				this.bodySlot.insertBefore(this.bodyTable, this.bodySlot.firstChild);
			}
		} else {
			syra_dom.removeChild(this.bodyTable);
		}!this.isFixedCols && this.switchBodyScroll(show);
	},
	_addColumn: function($key) {
		var col = this.builder.columnsMap[$key] = {
			key: $key,
			list: this.list,
			table: this,
			slot: this.titleRow,
			titleCell: this.titleRow.appendChild(document.createElement("th")),
			css: this.list.$skin + "-title-cell" + (this.isFixedCols ? " s-grid-fixed" : "")
		};
		col.titleCell.className = col.css;
		this.builder.allColumns.push(col);
		this.columns.push(col);
		return col;
	},
	_addFilterCell: function(col) {
		var td = this.builder.filterRecord.cellsMap[col.key] = document.createElement("td");
		td.className = "s-list-filter-cell";
		var div = document.createElement("div");
		div.className = "s-list-filter-cell-empty";
		td.appendChild(div);
		this.builder.filterRecord[this.$rowKey].appendChild(td);
		return td;
	},
	addFieldCol: function($item, $field) {
		var col = this._addColumn($item.$bind);
		col.$field = $field;
		col.titleCell.syrainout = this.list.id;
		col.$isHidden = $field.$isHidden;

		//avoid sort for tree
		if (!this.list.treeDecorator && $field.$capabilities && ($field.$capabilities.indexOf("sort") >= 0)) {
			col.isSortable = true;
			col.sortBtn = syra_menus.button.add({
				parent: col,
				css: "s-sort " + col.css,
				link: col.titleCell,
				btnclick: this.list.sorter.onSortClick
			});
		}
		col.titleLabel = syra_menus.button.add({
			isIndicator: true,
			parent: this.list,
			slot: col.titleCell,
			css: this.list.$skin + "-title-cell-label"
		});
		var $title;
		if (this.list.globalMetaRecords && this.list.globalMetaRecords.$properties) {
			var $metaField = this.list.globalMetaRecords.$properties[$item.$bind];
			if ($metaField) {
				$title = $metaField.$title;
			}
		}
		_setColumnTitle(col, $title || $field.$shortTitle || $field.$title);
		col.titleCell.syraOnMouseId = col.titleCell.syraResizerColId = col.titleCell.syraDragSpot = col.titleCell.syraReorderColId = this.list.id;
		col.titleCell.syra_field_bind = $item.$bind || "";
		col.titleCell.syraDragSpot = this.list.id;

		syra_dom.hide(col.titleCell, col.$isHidden);
		col.$bind = $item.$bind;
		col.$item = _helpers.object.clone($item, true);
		col.$item.$isGridCell = true;
		col.$item.$inplace = true;
		return col;
	},
	applyColumnMetaData: function(col, $metaField) {
		if ($metaField.$title !== undefined) {
			_setColumnTitle(col, $metaField.$title);
		}
		if ($metaField.$isHidden !== undefined) {
			col.$isHidden = $metaField.$isHidden;
			if (col.titleCell) {
				syra_dom.hide(col.titleCell, col.$isHidden);
			}
			for (var mm = 0, kk = this.list.records.length; mm < kk; mm++) {
				syra_dom.hide(this.list.records[mm].cellsMap[col.$bind], col.$isHidden);
			}
			if (this.builder.filterRecord) {
				syra_dom.hide(this.builder.filterRecord.cellsMap[col.$bind], col.$isHidden);
			}
		}
	},
	addSelectorColumn: function() {
		var col = this._addColumn("$recordSelector");
		if (this.list.selector.isMulti) {
			this.list.selector.addCheckBox(null, col.titleCell, true);
		} else {
			_addTitleEmptyItem(col);
		}
		col.useContentWidth = true;
		if (this.builder.filterRecord) {
			this._addFilterCell(col);
		}
		return col;
	},
	addTreeCol: function() {
		var col = this._addColumn("$treeview");
		col.isTreeview = true;
		col.titleCell.className = this.list.treeDecorator.cssNode + "-title-cell";
		return col;
	},
	addRowIndexCol: function() {
		var col = this._addColumn("$rowIndex");
		_addTitleEmptyItem(col);
		col.useContentWidth = true;
		this.builder.filterRecord && this._addFilterCell(col);
		return col;
	},

	addMenusCol: function() {
		var col = this._addColumn("$menus");
		col.useContentWidth = true;
		_addTitleEmptyItem(col);
		this.builder.filterRecord && this._addFilterCell(col);
		return col;
	},
	empty: function() {
		syra_dom.empty(this.bodyTable);
	},

	removeRow: function(record) {
		syra_dom.removeChild(record[this.$rowKey]);
	},
	reorderRow: function(target, source, isAfter) {
		var sourceRow = source[this.$rowKey];
		if (sourceRow) {
			if (target) {
				var targetRow = target[this.$rowKey];
				if (targetRow) {
					var widthUpdated;
					var sourceIndex = syra_dom.getIndex(sourceRow);
					var targetIndex = syra_dom.getIndex(targetRow);
					if (!isAfter && targetIndex == 0) {
						widthUpdated = targetRow;
						_copyColWidth(targetRow, sourceRow);
					}
					if (sourceIndex == 0) {
						var nextRow = sourceRow.nextSibling;
						if (nextRow) {
							_copyColWidth(sourceRow, nextRow);
							widthUpdated = sourceRow;
						}
					}
					targetRow.parentNode.insertBefore(sourceRow, isAfter ? targetRow.nextSibling : targetRow);
					widthUpdated && _resetColWidth(widthUpdated);
				}
			} else {
				if (isAfter) {
					this.bodyTable.appendChild(sourceRow);
				} else {
					this.bodyTable.insertBefore(sourceRow, this.bodyTable.firstChild);
				}
			}
		}
	},
	setColWidths: function(fitWidth) {
		var $prefWidths = (this.list.$userPreferences && this.list.$userPreferences.$columnWidths) || {};
		var records = this.list.records;
		var firstRecord = records && records[0];
		if (firstRecord) {
			if (firstRecord.dataRow && firstRecord.dataRow.parentNode) {
				firstRecord = syra_store.get(firstRecord.dataRow.parentNode.children[0].syraItem);
			}
			/*var orderedNodes = this.list.treeDecorator && this.list.treeDecorator._orderedNodes;
             if (orderedNodes && orderedNodes.length) {
             firstRecord = this.list.recordsMap[orderedNodes[0].$uuid]
             }*/
		}
		var row = firstRecord && firstRecord[this.$rowKey];
		var cells = row && row.cells;
		var total = 0;
		var fieldsCount = 0;
		for (var ii = 0, jj = this.columns.length; ii < jj; ii++) {
			var col = this.columns[ii];
			if (!col.$isHidden) {
				if ((col.$field || col.isTreeview)) {
					fieldsCount++;
				}
				total += _columnSizer.setColumnWidth(col, records, $prefWidths, cells && cells[ii]);
			}
		}
		if (fitWidth && fitWidth > total) {
			var space = (fitWidth - total) / fieldsCount;
			for (var ii = 0, jj = this.columns.length; ii < jj; ii++) {
				var col = this.columns[ii];
				if (!col.$isHidden && (col.$field || col.isTreeview)) {
					col.colWidth += space;
				}
			}
		}

		for (var ii = 0, jj = this.columns.length; ii < jj; ii++) {
			var col = this.columns[ii];
			if (!col.$isHidden) {
				var firstCell = cells && cells[ii];
				var isEmpty = col.colWidth == 0;
				col.hasTitleEmptyCss = !! col.hasTitleEmptyCss;
				if (col.hasTitleEmptyCss != isEmpty) {
					col.hasTitleEmptyCss = isEmpty;
					syra_dom.toggleClass(col.titleCell, "s-grid-title-cell-empty", col.hasTitleEmptyCss);
				}
				col.titleCell.style.width = col.colWidth + "px";
				if (firstCell) {
					firstCell.style.width = col.colWidth + "px";
				}
			}
		}

	}
});