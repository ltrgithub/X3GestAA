"use strict";
var _columnSizer = require("./tools/columnSizer");
var ColResizer = require('./tools/colResizer').ColResizer;

function _setColumnTitle(col, $title) {
	col.titleWidth = 0; //reset for sizing
	if ($title && $title.length > 0 && $title[1] == "@") {
		$title = syra_expression.parse(col.list, $title);
	}
	col.titleText = $title || "";
	if (col.titleText.length > 1) {
		col.titleText = col.titleText.substr(0, 1).toUpperCase() + col.titleText.substr(1);
	}
	syra_dom.toggleClass(col.titleLabel.link, "s-grid-title-empty", col.titleText.length == 0);
	syra_button.setText(col.titleLabel, col.titleText);
}

function _copyColWidth(fromRow, toRow) {
	var toNodes = toRow.childNodes;
	var fromNodes = fromRow.childNodes;
	for (var ii = 0, jj = fromNodes.length; ii < jj; ii++) {
		toNodes[ii].style.width = fromNodes[ii].style.width;
	}
}

function _resetColWidth(row) {
	var nodes = row.childNodes;
	for (var ii = 0, jj = nodes.length; ii < jj; ii++) {
		nodes[ii].style.width = "";
	}
}


function _addTitleEmptyItem(col) {
	syra_dom.div("s-grid-title-empty", col.titleCell);
	col.isTitleEmpty = true;
}

function GridTable(builder, isFixedCols, slot) {
	this.builder = builder;
	this.list = builder.list;
	this.columns = [];
	var css = this.list.$skin + (isFixedCols ? "-fixed" : "");

	this.headSlot = syra_dom.div(css + "-slot-head");
	this.headTable = document.createElement("table");
	this.titleRow = document.createElement("tr");
	this.bodySlot = syra_dom.div(css + "-slot-body");

	this.bodyTable = document.createElement("table");

	this.headTable.className = css + "-table-head";
	this.headTable.setAttribute("cellspacing", "0");
	this.headTable.setAttribute("cellpadding", "0");
	this.headTable.appendChild(this.titleRow);

	if (this.list.$item.$isTitleRowHidden) {
		syra_dom.hide(this.headTable, true);
	}
	this.headSlot.appendChild(this.headTable);

	this.bodyTable.className = css + "-table-body";
	this.bodyTable.setAttribute("cellspacing", "0");
	this.bodyTable.setAttribute("cellpadding", "0");

	this.isFixedCols = isFixedCols;
	this.slot = document.createElement("div");
	if (this.isFixedCols) {
		this.$rowKey = "fixedRow";
		this.slot.className = "s-grid-slot-table-fixed";
	} else {
		this.$rowKey = "dataRow";
		this.slot.className = "s-grid-slot-table-scroll";
	}

	this.slot.appendChild(this.headSlot);
	this.slot.appendChild(this.bodySlot);
}


GridTable.prototype.switchHeadScroll = function(on) {
	var self = this;
	if (on) {
		if (!self.headSlot_onScroll) {
			self.headSlot.addEventListener("scroll", self.headSlot_onScroll = function(event) {
				var page = self.list.page;
				if (page && !syra_site.isInoutDisabled && page.isPageLoaded && !page._isDataChanging) {
					var diff = self.bodySlot.scrollLeft - this.scrollLeft;
					if (diff > 1 || diff < (-1)) {
						self.bodySlot.scrollLeft = this.scrollLeft;
					}
				}
			});
		}
	} else {
		self.headSlot && self.headSlot_onScroll && self.headSlot.removeEventListener("scroll", self.headSlot_onScroll);
		delete self.headSlot_onScroll;
	}
};
GridTable.prototype.switchBodyScroll = function(on) {
	var self = this;
	if (on) {
		if (!self.bodySlot_onScroll) {
			self.bodySlot.addEventListener("scroll", self.bodySlot_onScroll = function(event) {
				var page = self.list.page;
				if (page && !syra_site.isInoutDisabled && page.isPageLoaded && !page._isDataChanging) {
					var diff = self.headSlot.scrollLeft - this.scrollLeft;
					if (diff > 1 || diff < (-1)) {
						self.headSlot.scrollLeft = this.scrollLeft;
					}
					var body = self.isFixedCols ? self.builder.scrollTable && self.builder.scrollTable.bodySlot : self.builder.fixedTable && self.builder.fixedTable.bodySlot;
					if (body && body.scrollTop != this.scrollTop)
						body.scrollTop = this.scrollTop;
				}
			});
		}
	} else {
		self.bodySlot && self.bodySlot_onScroll && self.bodySlot.removeEventListener("scroll", self.bodySlot_onScroll);
		delete self.bodySlot_onScroll;
	}
};

GridTable.prototype.showBody = function(show) {
	if (show) {
		if (!this.bodyTable.parentNode) {
			this.bodySlot.insertBefore(this.bodyTable, this.bodySlot.firstChild);
		}
	} else {
		syra_dom.remove(this.bodyTable);
	}
	this.switchBodyScroll(show);
};
GridTable.prototype._addColumn = function($key) {
	var col = this.builder.columnsMap[$key] = {
		key: $key,
		list: this.list,
		table: this,
		slot: this.titleRow,
		titleCell: this.titleRow.appendChild(document.createElement("th")),
		css: this.list.$skin + "-title-cell" + (this.isFixedCols ? " s-grid-fixed" : "")
	};
	col.titleCell.className = col.css;
	this.builder.allColumns.push(col);
	this.columns.push(col);
	return col;
};

GridTable.prototype.addFieldCol = function($item, $field) {
	var col = this._addColumn($item.$bind);
	col.$field = $field;
	col.titleCell.syrainout = this.list.id;
	col.$isHidden = $field.$isHidden;

	//avoid sort for tree
	if (!this.list.treeDecorator && $field.$capabilities && ($field.$capabilities.indexOf("sort") >= 0)) {
		col.isSortable = true;
		col.sortBtn = this.list.sorter.addButton({
			parent: col,
			css: col.css,
			link: col.titleCell
		});
	}
	col.titleLabel = syra_button.add({
		isIndicator: true,
		parent: this.list,
		slot: col.titleCell,
		css: this.list.$skin + "-title-cell-label"
	});
	var $title;
	if (this.list.globalMetaRecords && this.list.globalMetaRecords.$properties) {
		var $metaField = this.list.globalMetaRecords.$properties[$item.$bind];
		if ($metaField) {
			$title = $metaField.$title;
		}
	}
	_setColumnTitle(col, $title || $field.$shortTitle || $field.$title);
	col.titleCell.syraDragSpot = col.titleCell.syraReorderColId = this.list.id;
	col.titleCell.syra_field_bind = $item.$bind || "";
	col.titleCell.syraDragSpot = this.list.id;

	syra_dom.hide(col.titleCell, col.$isHidden);
	col.$bind = $item.$bind;
	col.$item = syra_site.clone($item);
	col.$item.$isGridCell = true;
	col.$item.$inplace = true;


	if (!this.colResizer) {
		this.colResizer = new ColResizer(this);
	}
	return col;
};
GridTable.prototype.applyColumnMetaData = function(col, $metaField) {
	if ($metaField.$title !== undefined) {
		_setColumnTitle(col, $metaField.$title);
	}
	if ($metaField.$isHidden !== undefined) {
		col.$isHidden = $metaField.$isHidden;
		if (col.titleCell) {
			syra_dom.hide(col.titleCell, col.$isHidden);
		}
		for (var mm = 0, kk = this.list.records.length; mm < kk; mm++) {
			syra_dom.hide(this.list.records[mm].cellsMap[col.$bind], col.$isHidden);
		}
		col.filter_cell && col.filter_cell.hide(col.$isHidden);
	}
};
GridTable.prototype.addSelectorColumn = function() {
	var col = this._addColumn("$recordSelector");
	if (this.list.selector.isMulti) {
		this.list.selector.addCheckBox(null, col.titleCell, true);
	} else {
		_addTitleEmptyItem(col);
	}
	col.useContentWidth = true;
	this.addFilterCell(col);
	return col;
};
GridTable.prototype.addFilterCell = function(col) {
	this.list.filter_row && this.list.filter_row.addCriteria(col);
};
GridTable.prototype.addTreeCol = function() {
	var col = this._addColumn("$treeview");
	col.isTreeview = true;
	col.titleCell.className = this.list.$skin + "-title-cell " + "s-tree-node-title-cell";
	return col;
};

GridTable.prototype.addRowIndexCol = function() {
	var col = this._addColumn("$rowIndex");
	_addTitleEmptyItem(col);
	col.useContentWidth = true;
	this.addFilterCell(col);
	return col;
};
GridTable.prototype.addMenusCol = function() {
	var col = this._addColumn("$menus");
	col.useContentWidth = true;
	_addTitleEmptyItem(col);
	this.addFilterCell(col);
	return col;
};
GridTable.prototype.empty = function() {
	syra_dom.empty(this.bodyTable);
};
GridTable.prototype.removeRow = function(record) {
	syra_dom.remove(record[this.$rowKey]);
};
GridTable.prototype.reorderRow = function(target, source, isAfter) {
	var sourceRow = source[this.$rowKey];
	if (sourceRow) {
		if (target) {
			var targetRow = target[this.$rowKey];
			if (targetRow) {
				var widthUpdated;
				var sourceIndex = syra_dom.getNodeIndex(sourceRow);
				var targetIndex = syra_dom.getNodeIndex(targetRow);
				if (!isAfter && targetIndex == 0) {
					widthUpdated = targetRow;
					_copyColWidth(targetRow, sourceRow);
				}
				if (sourceIndex == 0) {
					var nextRow = sourceRow.nextSibling;
					if (nextRow) {
						_copyColWidth(sourceRow, nextRow);
						widthUpdated = sourceRow;
					}
				}
				targetRow.parentNode.insertBefore(sourceRow, isAfter ? targetRow.nextSibling : targetRow);
				widthUpdated && _resetColWidth(widthUpdated);
			}
		} else {
			if (isAfter) {
				this.bodyTable.appendChild(sourceRow);
			} else {
				this.bodyTable.insertBefore(sourceRow, this.bodyTable.firstChild);
			}
		}
	}
};
GridTable.prototype.setColWidths = function(fitWidth) {
	var records = this.list.records;
	var firstRecord = records && records[0];
	if (firstRecord) {
		if (firstRecord.dataRow && firstRecord.dataRow.parentNode) {
			firstRecord = syra_item.get(firstRecord.dataRow.parentNode.children[0].syraItem);
		}
		/*var orderedNodes = this.list.treeDecorator && this.list.treeDecorator._orderedNodes;
		 if (orderedNodes && orderedNodes.length) {
		 firstRecord = this.list.recordsMap[orderedNodes[0].$uuid]
		 }*/
	}
	var row = firstRecord && firstRecord[this.$rowKey];
	var cells = row && row.cells;
	var total = 0;
	var fieldsCount = 0;
	var $columnWidths = ((this.builder.isTitleRowVisible !== false) && this.list.$pagePreferences.$columnWidths) || {};
	for (var ii = 0, jj = this.columns.length; ii < jj; ii++) {
		var col = this.columns[ii];
		delete col.resizer;
		if (!col.$isHidden) {
			if ((col.$field || col.isTreeview)) {
				fieldsCount++;
			}
			total += _columnSizer.setColumnWidth(col, records, $columnWidths, cells && cells[ii]);
		}
	}
	if (fitWidth && fitWidth > total) {
		var space = (fitWidth - total) / fieldsCount;
		for (var ii = 0, jj = this.columns.length; ii < jj; ii++) {
			var col = this.columns[ii];
			if (!col.$isHidden && (col.$field || col.isTreeview)) {
				col.colWidth += space;
			}
		}
	}

	for (var ii = 0, jj = this.columns.length; ii < jj; ii++) {
		var col = this.columns[ii];
		if (!col.$isHidden) {
			var firstCell = cells && cells[ii];
			var isEmpty = col.colWidth == 0;
			col.hasTitleEmptyCss = !!col.hasTitleEmptyCss;
			if (col.hasTitleEmptyCss != isEmpty) {
				col.hasTitleEmptyCss = isEmpty;
				syra_dom.toggleClass(col.titleCell, "s-grid-title-cell-empty", col.hasTitleEmptyCss);
			}
			col.titleCell.style.width = col.colWidth + "px";
			if (firstCell) {
				firstCell.style.width = col.colWidth + "px";
			}
		}
	}
};

GridTable.prototype.dispose = function() {
	this.colResizer && this.colResizer.dispose();
	this.switchHeadScroll(false);
	this.switchBodyScroll(false);
	syra_site.disposeObject(this);
};

exports.addFixed = function(builder) {
	return new GridTable(builder, true);
};

exports.add = function(builder) {
	return new GridTable(builder, false);
};