"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _removeRecordCards(builder) {
	var col = builder.columnsMap.rowCard;
	if (col) {
		builder.allColumns.splice(builder.allColumns.indexOf(col), 1);
		col.table.columns.splice(col.table.columns.indexOf(col), 1);
		syra_site.dom.removeChild(col.titleCell);
		var record = builder.filterRecord;
		if (record) {
			syra_site.dom.removeChild(record.cellsMap[col.key]);
			delete record.cellsMap[col.key];
		}
		var records = builder.list.records;
		for (var ii = 0, jj = records.length; ii < jj; ii++) {
			var record = records[ii];
			if (record.layoutContent) {
				syra_site.layoutUpdater.clearContent(record.layoutContent);
				record.layoutContent.dispose();
				record.rowCard && syra_site.dom.removeChild(record.rowCard.row);
				builder.disposeRecordCard(record);
				delete record.cardItem;
			}
			syra_site.dom.removeChild(record.cellsMap[col.key]);
			delete record.cellsMap[col.key];
		}
		delete builder.columnsMap.rowCard;
		builder.$rowFieldBinds = null;
	}
}

function _convertOldCardItem(list) {
	if (list.$item.$inlineCard) {
		list.$item.$cardItem = list.$item.$inlineCard;
		list.$item.$cardItem.$position = "row";
		delete list.$item.$inlineCard;
	}
	if (list.$item.$cards) {
		switch (list.$item.$cards.$position) {
			case "popup":
				break;
			case "inline":
				if (!(list.$item.$cards.$layout && list.$item.$cards.$layout.$layoutType == "tabs")) {
					list.$item.$cardItem = list.$item.$cards;
				}
				if (list.$item.$cardItem) {
					list.$item.$cardItem.$position = "row";
				}
				break;
			default:
				list.$item.$cardItem = list.$item.$cards;
				break;
		}
		delete list.$item.$cards;
	}
}

function _setRowCardOpenerIcon(opener, expanded) {
	opener.syraExpanded = expanded;
	opener.innerHTML = expanded ? syra_menus.fontIcons.collapse_row : syra_menus.fontIcons.expand_row;
}


function _onRowCardOpenerClick(list, btn) {
	var record = syra_store.findArticle(btn);
	var show = !btn.syraExpanded;
	var records;
	var title;
	if (record == list) {
		records = list.records;
		title = show ? syra_local.flCloseAllCards : syra_local.flShowAllCards;
		list.builder.expandAllCards = show;
	} else {
		records = [record];
		title = show ? syra_local.flCloseCard : syra_local.flShowCard;
	}
	for (var ii = 0, jj = records.length; ii < jj; ii++) {
		var item = records[ii];
		list.builder.toggleRowCard(item, show);
		show && syra_site.ensureArticleVisibility(item, true);
	}
	syra_menus.setButtonTitle(btn, title);
	_setRowCardOpenerIcon(btn, show);
	show && list.page.resizeArticle();
}


function _addRowCard(builder) {
	var list = builder.list;
	if (!list.$item.$cardItem && list.$complexBinds.length) {
		list.$item.$cardItem = {
			$position: "row",
			$layout: {
				$layoutType: "tabs",
				$items: []
			}
		};
		for (var ii = 0, jj = list.$complexBinds.length; ii < jj; ii++) {
			var $bind = list.$complexBinds[ii];
			var $field = list.$fields[$bind];
			var $item = {
				$bind: $bind,
				$isTitleHidden: true
			};
			// adding $item properties (necessary for job viewer diagnose stacktrace view)
			if ($field.$item) {
				if ($field.$item.$isEditMode != undefined) {
					$item.$isEditMode = $field.$item.$isEditMode;
				}
				if ($field.$item.$isTitleRowHidden != undefined) {
					$item.$isTitleRowHidden = $field.$item.$isTitleRowHidden;
				}
				if ($field.$item.$isPagerHidden != undefined) {
					$item.$isPagerHidden = $field.$item.$isPagerHidden;
				}
				if ($field.$item.$isMenuRecordHidden != undefined) {
					$item.$isMenuRecordHidden = $field.$item.$isMenuRecordHidden;
				}
			}
			list.$item.$cardItem.$layout.$items.push({
				$category: "section",
				$title: $field.$shortTitle || $field.$title || ("( " + $bind + " )"),
				$layout: {
					$items: [$item]
				}
			});
		}
	}
	if (list.$item.$cardItem) {
		builder.$rowFieldBinds = syra_page.getDefinedFieldBinds(list.$item.$cardItem.$layout ? list.$item.$cardItem.$layout.$items : list.$item.$cardItem.$items);
	}
	_ensureMode(builder);
}

function _createRowCard(record) {
	var card = {
		cell: document.createElement("td"),
		row: document.createElement("tr"),
		contentSlot: document.createElement("div")
	};
	card.cell.className = record.boxParent.$skin + "-cards-cell";
	card.cell.setAttribute("colspan", record.dataRow.cells.length);
	card.cell.appendChild(card.contentSlot);
	card.row.appendChild(card.cell);
	record.dataRow.parentNode.insertBefore(card.row, record.dataRow.nextSibling);
	return card;
}

function _ensureMode(builder) {
	builder.isOutCardMode = builder.isRowCardMode = false;
	if (builder.list.$item.$cardItem) {
		builder.isOutCardMode = !(builder.isRowCardMode = builder.list.$item.$cardItem.$position == "row");
	}
}

exports.addRowCardCol = function(builder) {
	if (builder.isRowCardMode) {
		var table = builder.freezeTable;
		if (!table || !table.columns.length) {
			table = builder.scrollTable;
		}
		var col = table._addColumn("rowCard");
		col.useContentWidth = true;
		col.titleCell.className += " s-grid-rowcard-cell-picker";
		var btn = syra_menus.addIconButton(syra_local.flShowAllCards, "s-grid-rowcard-picker-all s-fonticon-btn", "onRowCardClick");
		_setRowCardOpenerIcon(btn, false);
		col.titleCell.appendChild(btn);
		builder.filterRecord && table._addFilterCell(col);
		return col;
	}
};


exports.addRowCardOpener = function(record, col) {
	var td = document.createElement("td");
	td.className = record.list.cssCell + " s-grid-rowcard-cell-picker";
	record.rowCardOpener = syra_menus.addIconButton(syra_local.flShowCard, "s-grid-rowcard-picker s-fonticon-btn", "onRowCardClick");
	_setRowCardOpenerIcon(record.rowCardOpener, false);
	td.appendChild(record.rowCardOpener);
	if (record.list.builder.expandAllCards) {
		record.expandRowCard = record.list.builder.expandAllCards;
	}
	return record.cellsMap[col.key] = td;
};


exports.applyDesignMetaData = function(builder, metaData, designing) {
	var list = builder.list;
	var $cardItem = list.$item.$cardItem && helpers.object.clone(list.$item.$cardItem, true);
	if (metaData.$cardPosition == "no" || metaData.$cardPosition == "row") { // || metaData.$cardPosition == undefined) {
		_removeRecordCards(builder);
		delete list.$item.$cardItem;
		builder.appendCardGraphSlots();
		if (metaData.$cardPosition == "row") {
			list.$item.$cardItem = $cardItem;
			if (!list.$item.$cardItem) {
				list.$item.$cardItem = (list.$designing && list.$designing.grid && list.$designing.grid.$cardItem) || list.defineDefaultCard();
			}
			list.$item.$cardItem.$position = "row"; //ensure position
			_addRowCard(builder);

			var col = exports.addRowCardCol(builder);
			var row = col.titleCell.parentNode;
			if (col.$rowIndex) {
				builder.allColumns.splice(1, 0, builder.allColumns.pop());
				col.table.columns.splice(1, 0, col.table.columns.pop());
				row.insertBefore(col.titleCell, col.$rowIndex.titleCell.nextSibling);
			} else {
				builder.allColumns.unshift(builder.allColumns.pop());
				col.table.columns.unshift(col.table.columns.pop());
				row.insertBefore(col.titleCell, row.firstChild);
			}
			var record = builder.filterRecord;
			if (record) {
				var row = record[col.table.$rowKey];
				row.insertBefore(record.cellsMap[col.key], record.cellsMap.$rowIndex ? record.cellsMap.$rowIndex.nextSibling : row.firstChild);
			}
			for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
				var record = list.records[ii];
				var row = record[col.table.$rowKey];
				row.insertBefore(exports.addRowCardOpener(record, col), record.cellsMap.$rowIndex ? record.cellsMap.$rowIndex.nextSibling : row.firstChild);
				if (ii == 0) {
					record.expandRowCard = true;
				}
			}
			list.resizeArticle();
		} else {
			_ensureMode(builder);
		}
	} else {
		builder.isRowCardMode && _removeRecordCards(builder);

		list.$item.$cardItem = $cardItem;
		if (!list.$item.$cardItem) {
			list.$item.$cardItem = (list.$designing && list.$designing.grid && list.$designing.grid.$cardItem) || list.defineDefaultCard();
		}
		list.$item.$cardItem.$position = metaData.$cardPosition;
		_ensureMode(builder);
		builder.appendCardGraphSlots();
		builder.showOutCard();
	}
};


exports.addOutSlot = function(builder) {
	var list = builder.list;
	var separator = builder.outCardSeparator;
	if (!separator) {
		separator = builder.outCardSeparator = document.createElement("div");
		separator.syraOutCardResizer = list.id;
		separator.syraDragSpot = list.id;
	}
	var slot = builder.outCardSlot;
	if (!slot) {
		slot = builder.outCardSlot = document.createElement("div");
	}
	var cssCell = "";
	var tableSlot = builder.tableSlot;
	switch (list.$item.$cardItem.$position) {
		case "left":
			tableSlot.parentNode.insertBefore(separator, tableSlot);
			tableSlot.parentNode.insertBefore(slot, separator);
			cssCell = "-cell";
			if (list.$item.$cardItem.$width) {
				slot.style.width = list.$item.$cardItem.$width;
			}
			break;
		case "right":
			tableSlot.parentNode.insertBefore(separator, tableSlot.nextSibling);
			tableSlot.parentNode.appendChild(slot, separator.nextSibling);
			cssCell = "-cell";
			if (list.$item.$cardItem.$width) {
				slot.style.width = list.$item.$cardItem.$width;
			}
			break;
		case "top":
			var sibling = list.tableRow || tableSlot;
			sibling.parentNode.insertBefore(separator, tableSlot);
			sibling.parentNode.insertBefore(slot, separator);
			slot.style.width = "";
			break;
		case "bottom":
			var sibling = list.tableRow || tableSlot;
			sibling.parentNode.appendChild(separator);
			sibling.parentNode.appendChild(slot);
			slot.style.width = "";
			break;
	}
	separator.className = "s-list-outcard-sep" + cssCell;
	slot.className = "s-list-outcard" + cssCell;
	tableSlot.style.display = "";
};

exports.removeOutSlot = function(builder) {
	syra_site.dom.removeChild(builder.outCardSeparator);
	syra_site.dom.removeChild(builder.outCardSlot);
	builder.outCardSeparator = builder.outCardSlot = null;
};

function _ensureCard(record, slot) {
	slot.setAttribute("data-s-record", slot.syraRecord = record.$uuid);
	record.setArticleId(slot);
	if (!record.cardItem) {
		record.$item = record.list.$item.$cardItem;
		record.$skin = "s-grid-carditem";
		record.layoutSlot = slot;
		record.dataSlot = record.domItem = record.body = document.createElement("div");
		record.layoutSlot.appendChild(record.domItem);
		record.ensureLayoutMode();
		record.renderLayoutContent();
		record.cardItem = record;
	}
	slot.appendChild(record.body);
}

function _hightlightOutCardRecord(record, show) {
	record.dataRow && syra_site.dom.toggleClass(record.dataRow, "s-list-outcard-record", show);
	record.freezeRow && syra_site.dom.toggleClass(record.freezeRow, "s-list-outcard-record", show);
}


exports.load = function(builder) {
	if (builder.list.$item.$inlineCard || builder.list.$item.$cards) {
		_convertOldCardItem(builder.list);
	}
	_addRowCard(builder);

	builder.list.onRowCardClick = function(event, btn) {
		_onRowCardOpenerClick(this, btn);
	};
	builder.record_onAfterApplyChange = function(record) {
		if (!record.list.$isEditMode && record.dataset && record.rowCardOpener) {
			var hasData;
			for (var ii = 0, jj = this.$rowFieldBinds.length; ii < jj; ii++) {
				var data = record.dataset[this.$rowFieldBinds[ii]];
				if (data !== null && data !== undefined) {
					if (data.length !== undefined && !data.length) {
						continue;
					}
					hasData = true;
					break;
				}
			}
			record.rowCardOpener.style.visibility = hasData ? "visible" : "hidden";
		}
	};
	builder.createQuickEditCard = function(record) {
		this.toggleRowCard(record, false);
		return _createRowCard(record);
	};
	builder.toggleRowCard = function(record, show) {
		if (this.isRowCardMode) {
			_setRowCardOpenerIcon(record.rowCardOpener, show);
			if (!record.rowCard) {
				record.rowCard = _createRowCard(record);
				_ensureCard(record, record.rowCard.contentSlot);
			}
			record.rowCard.row.style.display = show ? "" : "none";
			delete record.expandRowCard;
		}
	};
	builder.showOutCard = function(record) {
		if (this.isOutCardMode) {
			if (record && this.outCardRecord != record) {
				this.outCardRecord && _hightlightOutCardRecord(this.outCardRecord, false);
				this.outCardRecord = record;
			}
			if (!this.outCardRecord || this.outCardRecord.getRecordIndex() < 0) {
				this.outCardRecord = this.list.records[0];
			}
			syra_site.dom.empty(this.outCardSlot);
			if (this.outCardRecord) {
				_hightlightOutCardRecord(this.outCardRecord, true);
				_ensureCard(this.outCardRecord, this.outCardSlot);
			}
		}
	};
	builder.onAfterLoadRecord = function(record, initData, isCreateAction) {
		isCreateAction && this.toggleRowCard(record, true);
	};
};