"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;
var filterBuilder = require('./filterBuilder');

function FilterRecord() {}

exports.FilterRecord = helpers.defineClass(FilterRecord, Article, {
	loadRecord: function(list) {
		this.list = list;
		this.isFilterArticle = this.isRecordArticle = true;
		this.$facet = "$filter";
		this.$isEditMode = true;
		this.$prototype = list.$prototype.$item;
		this.$prototype.$localization = list.page.$prototype.$localization;
		list.page.initializeNewItem(this, {
			$layout: {
				$items: list.$item.$layout.$items
			}
		}, list);
		this.loadBox();
	},
	//set focus on first field
	setFocus: function() {
		var $bind = this.list.builder.getNextFocusableField();
		var field = $bind && this.fieldCellsMap[$bind];
		field && field.focus();
	},
	drawBox: function() {
		this.cellsMap = {};
		this.fieldCellsMap = {};
		this.domItem = this.dataRow = document.createElement("tr");
		var builder = this.list.builder;
		builder.freezeTable && builder.freezeTable.headTable.appendChild(this.freezeRow = document.createElement("tr"));
		builder.scrollTable.headTable.appendChild(this.dataRow);
	},
	onNotifyDataChange: function(field, value) {
		return filterBuilder.onNotifyDataChange(this, field, value);
	},
	scrollToRecord: function() {
		RecordArticle.prototype.scrollToRecord.call(this);
	},
	scrollToRecordField: function(field) {
		RecordArticle.prototype.scrollToRecordField.call(this, field);
	}
});