"use strict";
var helpers = require('syracuse-core/lib/helpers');
var parser = require('syracuse-sdata/lib/parser/parser');

function FilterCell() {}

exports.FilterCell = helpers.defineClass(FilterCell, null, {
	addOperator: function() {
		var self = this;
		if (self.field._input) {
			self.field._input.className = self.field._input.className.replace("s-inplace-input", "s-filter-input");
		}
		self._operator = document.createElement("a");
		self._operator.className = "s-list-filter";
		self._operator.style.backgroundImage = "url('" + document.site.$item.$iconPath + "list/s-filter-none.png')";
		$(self.field._dataValue.appendChild(self._operator)).bind("click", function(event) {
			var options = {
				operator: self.operator,
				list: self.record.list,
				event: event,
				type: "operatorclick",
				doEvent: function() {
					if (!self.listPopup) {
						document.site.closePopups();
						self.$$list.empty();
						var operators = self._getOperators();
						for (var ii = 0, jj = operators.length; ii < jj; ii++) {
							var op = operators[ii];
							var link = document.createElement("a");
							link.className = "s-list-filter-item";
							link.setAttribute("data-s-op", op);
							if (self.operator == op) {
								link.className += " s-selected";
							}
							link.style.backgroundImage = "url('" + document.site.$item.$iconPath + "list/s-filter-" + op + ".png')";
							self.$$list[0].appendChild(link).textContent = self.record.boxParent.localize["flFilter_" + op];
						}
						self.listPopup = self.record.boxParent.openDialog({
							$dialogMode: "popup",
							content: self.record,
							$$dialog: self.$$list,
							position: {
								my: "left top",
								at: "left bottom",
								of: $(self.layoutSlot)
							},
							onClose: function() {
								self.listPopup = null;
							}
						});
					} else {
						self.listPopup.close();
					}
				}
			};
			self.record.page.externalAdapter.onFilterEvent(options);
			return false;
		});
		if (!self.$$list) {
			var list = document.createElement("div");
			list.className = "s-list-filter-list";
			list.style.display = "none";
			self.$$list = $(self.field._dataValue.appendChild(list)).delegate("a.s-list-filter-item", "click", function(event) {
				self.setOperator($(this).attr("data-s-op"));
				self.listPopup.close();
				var options = {
					operator: self.operator,
					list: self.record.list,
					filter: self,
					event: event,
					type: "operatorchange",
					doEvent: function() {
						var highField = self.record.boundFields[self.$bind + "$High"];
						if (self.operator === "between") {
							if (highField) {
								$(highField[0]._dataValue).toggle(true);
							} else {
								self.loadField(self.$field, self.$bind + "$High");
							}
						} else {
							if (highField) {
								$(highField[0]._dataValue).toggle(false);
							}
							var value = self.record.dataset[self.$bind];
							if (self.operator != "none") {
								if (value != null && value != "") {
									if (self.operator == "empty" || self.operator == "notempty") {
										var field = self.record.boundFields[self.$bind][0];
										field.setDataValue(null);
										self.record._buildFilter();
									} else {
										self.record._buildFilter();
									}
								} else {
									if (self.operator == "empty" || self.operator == "notempty") {
										self.record._buildFilter();
									}
								}
							} else {
								if (value != null && value != "") {
									var field = self.record.boundFields[self.$bind][0];
									field.setDataValue(null);
									field.notifyFieldChange(null);
								} else {
									self.record._buildFilter();
								}
							}
						}
					}
				};
				self.record.page.externalAdapter.onFilterEvent(options);
			});
		}
	},
	_ensureFilterField: function() {
		if (this.$field.$type == "application/x-reference") {
			this.$filterField = this.field.$field.$item[this.field.$reference.$value.$itemProp];
			if (this.$filterField) {
				this.$filterField = this.record.$prototype.$properties[this.field.$reference.$value.$prop];
				if (this.$filterField) {
					this.$filterCode = this.field.$reference.$value.$prop;
				}
			}
			if (!this.$filterField) {
				this.$filterField = this.field.$field.$item.$properties[this.field.$reference.$value.$prop];
				this.$filterCode = this.$bind + "." + this.field.$reference.$value.$prop;
			}
		}
	},
	render: function(record, layoutSlot, $field, $bind) {
		this.$field = $field;
		this.record = record;
		this.$filterCode = this.$bind = $bind;
		this.operator = "none";
		this.layoutSlot = layoutSlot;
		this.loadField(this.$field, this.$bind);

		// update filter cell if where params in url (issue #3022)
		if (this.record.list.$urlParams.where) {
			var exp = parser.Parser.parse(decodeURI(this.record.list.$urlParams.where));
			var $filterBind = this.$bind;
			var $isRefField = false;
			// in case of reference field, appropriate $bind value is field.$reference.$value.$prop
			if ($field.$type == 'application/x-reference') {
				$filterBind = this.field.$reference.$value.$prop;
				$isRefField = true;
			}
			if ($filterBind == exp.children[0].value) {
				this.setOperator(exp.value.text);
				// update dataset and field data value
				if ($isRefField) {
					this.record.dataset[this.$bind] = {};
					this.record.dataset[this.$bind][$filterBind] = exp.children[1].value;
				} else {
					this.record.dataset[this.$bind] = exp.children[1].value;
				}
				this.field.setDataValue(exp.children[1].value);
			}
		}
	},
	setOperator: function(operator) {
		this._operator.style.backgroundImage = "url('" + document.site.$item.$iconPath + "list/s-filter-" + (this.operator = operator) + ".png')";
	},
	_format: function(field, $type, value, rawValue) {
		switch ($type) {
			case "application/x-reference":
				return this._format(field, this.$filterField.$type, field.getInputValue(), rawValue);
			case "application/x-choice":
				value = this.record.dataset[this.$bind];
				var fieldType = (field.$field && field.$field.$value && field.$field.$value.$type) || "application/x-string";
				return this._format(field, fieldType, value, rawValue);
			case "application/x-boolean":
			case "application/x-integer":
			case "application/x-decimal":
			case "application/x-quantity":
				return this.record.dataset[this.$bind];
			case "application/x-date":
				value = this.record.dataset[this.$bind];
				return rawValue ? value : ("@" + value + "@");
		}
		return rawValue ? value : ("'" + (value || "") + "'");
	},
	//LV operator depend on page type
	_getOperators: function($type) {
		var operators;
		this._ensureFilterField();
		switch ($type || this.field.$field.$type) {
			case "application/x-reference":
				return this._getOperators(this.$filterField.$type);
			case "application/x-date":
			case "application/x-time":
			case "application/x-datetime":
				operators = ["none", "gt", "ge", "lt", "le", "eq", "ne", "empty", "notempty"];
				if (!this.record.page.$isFusionPage && !this.field.$field.$type == "application/x-reference") {
					operators.push("between");
				}
				break;
			case "application/x-string":
				operators = ["none", "gt", "ge", "lt", "le", "eq", "ne", "like_s", "like", "empty", "notempty"];
				if (!this.record.page.$isFusionPage && !this.field.$field.$type == "application/x-reference") {
					operators.push("between");
				}
				break;
			case "application/x-integer":
			case "application/x-quantity":
				if (!this.record.page.$isFusionPage && !this.field.$field.$type == "application/x-reference") {
					operators = ["none", "eq", "ne", "empty", "notempty"];
				} else {
					operators = ["none", "gt", "ge", "lt", "le", "eq", "ne", "empty", "notempty"];
				}
				break;

			default:
				operators = ["none", "eq", "ne", "empty", "notempty"];
				break;
		};
		return operators;
	},
	getValue: function() {
		var field = this.record.boundFields[this.$bind][0];
		var value = field.getInputValue();
		if (this.operator != "none" && value != null) {
			this._ensureFilterField();
			var op = this.operator;
			var right;
			// "%" replaced with "\%" to escape character for server usage
			switch (op) {
				case "like":
					// like is for strings only so direct access to store
					// workaround in case value is an object despite $type is application/x-string
					//right = typeof(value) == 'object' && value.$value ? right = "'%" + value.$value + "%'" : "'%" + value + "%'";
					right = "'%" + this._format(field, this.$field.$type, value, true) + "%'";
					break;
				case "like_s":
					// like is for strings only so direct access to store
					right = "'" + this._format(field, this.$field.$type, value, true) + "%'";
					op = "like";
					break;
				case "between":
					var highValue = this.record.dataset[this.$bind + "$High"];
					if (value && !highValue) {
						right = this._format(field, this.$field.$type, value);
						op = "ge";
					} else {
						if (!value && highValue) {
							right = this._format(field, this.$field.$type, highValue);
							op = "le";
						} else {
							if (value && highValue) {
								right = this._format(field, this.$field.$type, value) + " and " + this._format(field, this.$field.$type, highValue);
							} else {
								return "";
							}
						}
					}
					break;
				case "empty":
					// 'empty' is for all types. It has specific operator and right value. op->eq right->null
					op = "eq";
					right = "''";
					break;
				case "notempty":
					// 'notempty' is for all types. It has specific operator and right value. op->ne right->null
					op = "ne";
					right = "''";
					break;
				default:
					right = this._format(field, this.$field.$type, value);
					break;
			}
			if (typeof right === 'string') {
				right.replace(/%/g, '\%');
			}
			return "(" + this.$filterCode + " " + op + " " + right + ")";
		}
	},
	loadField: function($field, $bind) {
		this.field = this.record.page.loadNewItem(this.layoutSlot.appendChild(document.createElement("div")), {
			$bind: $bind || this.$bind,
			$isTopLabelAlignment: false,
			$isCellChild: true,
			$isFilterMode: true,
			$isMenusHiddeen: true,
			$inplace: true,
			$field: $field
		}, this.record);
		this.addOperator();
	},
	ensureEqual: function() {
		// force operator to equals
		if (this.operator === "none" && this.$field) {
			var defaultFilter;
			switch (this.$field.$type) {
				case "application/x-date":
				case "application/x-time":
				case "application/x-datetime":
					defaultFilter = "ge";
					break;
				case "application/x-string":
					defaultFilter = "like";
					break;
				default:
					defaultFilter = "eq";
					break;
			}
			this.setOperator(defaultFilter);
		}
	},
	ensureDefault: function() {
		// force operator to default
		if (this.$field) {
			var defaultFilter, value = this.record.boundFields[this.$bind][0].getInputValue();
			switch (this.$field.$type) {
				case "application/x-date":
				case "application/x-time":
				case "application/x-datetime":
					defaultFilter = (value !== "" && this.operator === "none") ? "ge" : (value === "" && this.operator !== "none") ? "none" : undefined;
					break;
				case "application/x-string":
					defaultFilter = (value !== "" && this.operator === "none") ? "like_s" : (value === "" && this.operator !== "none") ? "none" : undefined;
					break;
				case "application/x-integer":
					defaultFilter = (value !== "" && this.operator === "none") ? "ge" : (value === "" && this.operator !== "none") ? "none" : undefined;
					break;
				default:
					defaultFilter = (value !== "" && this.operator === "none") ? "ge" : (value === "" && this.operator !== "none") ? "none" : undefined;
					break;
			}
			if (defaultFilter)
				this.setOperator(defaultFilter);
		}
	},
	dispose: function() {
		if (this._operator) {
			$(this._operator).unbind();
		}
		if (this.$$list) {
			this.$$list.undelegate();
		}
		this.$filterField = this.record = this.field = this.layoutSlot = this._operator = this.$$list = this.$field = null;
	},
	// FDB LV
	fusionGetInputValue: function() {
		var field = this.record.boundFields[this.$bind][0];
		var values = ["", field.getInputValue().replace(/\**$/, ""), ""];
		switch (this.operator) {
			case "none":
				break;
			case "gt":
				values[0] = ">";
				break;
			case "ge":
				values[0] = ">=";
				break;
			case "lt":
				values[0] = "<";
				break;
			case "le":
				values[0] = "<=";
				break;
			case "eq":
				values[0] = "=";
				break;
			case "ne":
				values[0] = "<>";
				break;
			case "like_s":
				values[2] = "*";
				break;
			case "like":
				values[0] = "*";
				values[2] = "*";
				break;
			case "between":
				break;
		}
		return values.join("");
	}
});