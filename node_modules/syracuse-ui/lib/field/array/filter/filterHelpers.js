"use strict";

var handlers = {
	onOperatorClick: function(cell, picker, event) {
		var record = cell.record;
		var options = {
			operator: cell.operator,
			list: record.list,
			event: event,
			type: "operatorclick",
			doEvent: function() {
				if (!cell.listPopup) {
					document.site.dialogManager.closePopups();
					document.site.dom.empty(cell.list);
					cell._ensureFilterField();
					var operators = document.site.filterMaker.getFieldOperators(null, cell.field, cell.$filterField);
					for (var ii = 0, jj = operators.length; ii < jj; ii++) {
						var op = operators[ii];
						var link = document.createElement("a");
						link.className = "s-list-filter-item";
						link.syraOnClick = "onFilterCellClick";
						link.syraOnSubClick = "onFilterItemClick";
						link.syraOperator = op;
						if (cell.operator == op) {
							link.className += " s-selected";
						}
						link.style.backgroundImage = "url('" + document.site.$item.$iconPath + "list/s-filter-" + op + ".png')";
						cell.list.appendChild(link).textContent = record.boxParent.localize["flFilter_" + op];
					}
					cell.listPopup = document.site.dialogManager.openPopup(record.boxParent, {
						content: record,
						slot: cell.list,
						position: {
							my: "left top",
							at: "left bottom",
							of: $(cell.layoutSlot)
						},
						onClose: function() {
							cell.listPopup = null;
						}
					});
				} else {
					cell.listPopup.close();
				}
			}
		};
		record.page.externalAdapter.onFilterEvent(options);
	},
	onFilterItemClick: function(cell, picker, event) {
		cell.setOperator(picker.syraOperator);
		cell.listPopup.close();
		cell.record.page.externalAdapter.onFilterEvent({
			operator: cell.operator,
			list: cell.record.list,
			filter: cell,
			event: event,
			type: "operatorchange",
			doEvent: function() {
				var highField = cell.record.boundFields[cell.$bind + "$High"];
				if (cell.operator === "between") {
					if (highField) {
						highField[0]._dataValue.style.display = "";
					} else {
						_loadField(cell, cell.$field, cell.$bind + "$High");
					}
				} else {
					if (highField) {
						highField[0]._dataValue.style.display = "none";
					}
					var value = cell.record.dataset[cell.$bind];
					if (cell.operator != "none") {
						if (value != null && value != "") {
							if (cell.operator == "empty" || cell.operator == "notempty") {
								var field = cell.record.boundFields[cell.$bind][0];
								field.setDataValue(null);
								cell.record._buildFilter();
							} else {
								cell.record._buildFilter();
							}
						} else {
							if (cell.operator == "empty" || cell.operator == "notempty") {
								cell.record._buildFilter();
							}
						}
					} else {
						if (value != null && value != "") {
							var field = cell.record.boundFields[cell.$bind][0];
							field.setDataValue(null);
							field.notifyFieldChange(null);
						} else {
							cell.record._buildFilter();
						}
					}
				}
			}
		});
	}


};

function _onFilterCellClick(picker, event) {
	//this is field instance
	handlers[picker.syraOnSubClick](this.filterCell, picker, event);
}

function _loadField(cell, $field, $bind) {
	cell.field = cell.record.page.loadNewItem(cell.layoutSlot.appendChild(document.createElement("div")), {
		$bind: $bind || cell.$bind,
		$isTopLabelAlignment: false,
		$isCellChild: true,
		$isFilterMode: true,
		$isMenusHiddeen: true,
		$inplace: true,
		$field: $field
	}, cell.record);
	if (cell.field.input) {
		cell.field.input.className = cell.field.input.className.replace("s-inplace-input", "s-filter-input");
	}
	cell._operator = document.createElement("a");
	cell._operator.className = "s-list-filter-cell-picker";
	cell._operator.style.backgroundImage = "url('" + document.site.$item.$iconPath + "list/s-filter-none.png')";
	cell._operator.syraOnClick = "onFilterCellClick";
	cell._operator.syraOnSubClick = "onOperatorClick";
	cell.field._dataValue.appendChild(cell._operator);
	cell.field.filterCell = cell;
	cell.field.onFilterCellClick = _onFilterCellClick;
	if (!cell.list) {
		cell.list = document.createElement("div");
		cell.list.className = "s-list-filter-list";
		cell.list.style.display = "none";
		cell.list.syraItem = cell.field.id;
		cell.field._dataValue.appendChild(cell.list);
	}
}

exports.renderCell = function(cell, record, layoutSlot, $field, $bind) {
	cell.$field = $field;
	cell.record = record;
	cell.$filterCode = cell.$bind = $bind;
	cell.operator = "none";
	cell.layoutSlot = layoutSlot;
	_loadField(cell, cell.$field, cell.$bind);

	// update filter cell if where params in url (issue #3022)
	if (cell.record.list.$urlParams.where) {
		var $filterBind = cell.$bind;
		var exp = document.site.filterMaker.parseWhere(cell.record.list.$urlParams.where, cell.$bind);
		var $isRefField = false;
		// in case of reference field, appropriate $bind value is field.$reference.$value.$prop
		if ($field.$type == 'application/x-reference') {
			$filterBind = cell.field.$reference.$value.$prop;
			$isRefField = true;
		}
		if (exp && $filterBind == exp.children[0].value) {
			cell.setOperator(exp.value.text);
			var value = document.site.filterMaker.unFormatValue(exp.value.text, exp.children[1].value);
			// update dataset and field data value
			if ($isRefField) {
				cell.record.dataset[cell.$bind] = {};
				cell.record.dataset[cell.$bind][$filterBind] = value;
			} else {
				cell.record.dataset[cell.$bind] = value;
			}
			cell.field.setDataValue(value);
		}
	}
};