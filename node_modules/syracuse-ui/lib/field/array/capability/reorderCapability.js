"use strict";
var helpers = require('syracuse-core/lib/helpers');

function ReorderCapability(list) {
	this.list = list;
}

exports.ReorderCapability = helpers.defineClass(ReorderCapability, null, {
	setDraggable: function() {
		var self = this;
		self._eventNamespace = ".reorderCapability" + self.list.id;
		self.list.$$item.delegate(".s-list-record-reorder", "mousedown" + self._eventNamespace, function(event) {
			self.start(self.list.findRecord($(this)));
			return false;
		});
	},
	notifyReorderRecords: function(sourceRecord, targetRecord, $insert) {
		var dataRecords = this.list.ensureDataSet();
		var dataRecord = dataRecords[sourceRecord.dataset.$serverIndex];

		dataRecords.splice(sourceRecord.dataset.$serverIndex, 1);
		this.list.records.splice(sourceRecord.$recordIndex, 1);
		if (targetRecord.$recordIndex > sourceRecord.$recordIndex) {
			sourceRecord.$recordIndex = ($insert == "insertAfter") ? targetRecord.$recordIndex : (targetRecord.$recordIndex - 2);
		} else {
			sourceRecord.$recordIndex = ($insert == "insertAfter") ? targetRecord.$recordIndex + 1 : (targetRecord.$recordIndex);
		}
		if (targetRecord.dataset.$serverIndex > sourceRecord.dataset.$serverIndex) {
			sourceRecord.dataset.$serverIndex = ($insert == "insertAfter") ? targetRecord.dataset.$serverIndex : (targetRecord.dataset.$serverIndex - 2);
		} else {
			sourceRecord.dataset.$serverIndex = ($insert == "insertAfter") ? targetRecord.dataset.$serverIndex + 1 : (targetRecord.dataset.$serverIndex);
		}
		sourceRecord.$recordIndex = Math.max(sourceRecord.$recordIndex, 0);
		sourceRecord.dataset.$serverIndex = Math.max(sourceRecord.dataset.$serverIndex, 0);
		dataRecords.splice(sourceRecord.dataset.$serverIndex, 0, dataRecord);
		this.list.records.splice(sourceRecord.$recordIndex, 0, sourceRecord);
		sourceRecord.reorderItem(targetRecord, $insert);
		for (var ii = 0, jj = dataRecords.length; ii < jj; ii++) {
			dataRecords[ii].$serverIndex = ii;
		}
		for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
			this.list.records[ii].$recordIndex = ii;
		}
		this.list.validateDisplay();

		var sendBag = this.list.page.ensureSendBag(this.list);
		if (this.list.builder.isSingleBuilder) {
			sendBag.dataRecords = dataRecords;
		} else {
			sendBag.ensureRecord(sourceRecord);
			sendBag.ensureRecord(targetRecord);
		}
		this.list.page.notifyDataChange(this.list, sendBag.dataRecords);
	},
	start: function(record, $$boundary) {
		var self = this;
		self.sourceRecord = record;
		self.$$boundary = $$boundary || $(self.list.builder.body);
		self.boundary = self.$$boundary.offset();
		self.boundary.right = self.boundary.left + self.$$boundary.width();
		self.boundary.bottom = self.boundary.top + self.$$boundary.height();
		$(document).bind("mouseup" + self._eventNamespace, function() {
			if (self.targetRecord) {
				self.notifyReorderRecords(self.sourceRecord, self.targetRecord, self.$drag.$insert);
			}
			self.stop();
		}).bind("mousemove" + self._eventNamespace, function(event) {
			if (!event.target || event.target && event.target.className.indexOf("s-list-drop-cue") < 0) {
				self.moveDragImage(event, null, true);
			}
			event.preventDefault();
		});
		self.list.$$item.delegate("[data-s-record]", "mousemove" + self._eventNamespace, function(event) {
			if (self.sourceRecord) {
				self.moveDragImage(event, self.list.findRecord($(this)));
			}
			return false;
		});
	},
	getDropAction: function(event, targetRecord) {
		var $action = null;
		if (this.sourceRecord && this.sourceRecord != targetRecord) {
			$action = {
				$move: true
			};
			this._ensureDragImage();
			this._info.textContent = this.list.localize.flMoveItem;
		}
		return $action;
	},
	_calculateDropCuePosition: function(event) {
		var offset = this.targetRecord.$$item.offset();
		this.$drag = {
			left: offset.left,
			top: offset.top,
			width: this.targetRecord.$$item.outerWidth(),
			height: this.targetRecord.$$item.outerHeight()
		};
		//calculateDropBoundary
		var xmargin = (this.$drag.width * 0.25);
		var ymargin = (this.$drag.height * 0.25);
		var $dropBoundary = {
			left: this.$drag.left + xmargin,
			right: this.$drag.left + this.$drag.width - xmargin,
			top: this.$drag.top + ymargin,
			bottom: this.$drag.top + this.$drag.height - ymargin
		};
		var $position = {
			top: this.$drag.top,
			left: this.$drag.left
		};
		var isAfter = false;
		if (this.sourceRecord.$isVerticalDirection) {
			var bottom = $dropBoundary.bottom;
			if (isAfter = event.pageY > $dropBoundary.bottom) {
				$position.top = $dropBoundary.bottom + ymargin;
			} else {
				$position.top = this.$drag.top;
			}
			$position.height = "0.2em";
			$position.width = this.$drag.width + "px";
		} else {
			isAfter = event.pageX > $dropBoundary.right;
			$position.top -= 3;
			$position.left = this.$drag.left + (isAfter ? (this.$drag.width + 3) : (-3));
			$position.width = "0.2em";
			$position.height = this.$drag.height + 6 + "px";
		}
		this.$drag.$insert = isAfter ? "insertAfter" : "insertBefore";
		return $position;
	},
	moveDragCue: function(event) {
		var $position = null;
		if (event && this.targetRecord) {
			$position = this._calculateDropCuePosition(event);
		}
		if (!this._dropCue) {
			this._dropCue = document.createElement("div");
			this._dropCue.className = "s-list-drop-cue";
			document.site.layoutSlot.appendChild(this._dropCue);
		}
		this._dropCue.className = "s-list-drop-cue";
		if ($position) {
			this._dropCue.style.display = "block";
			var style = this._dropCue.style;
			style.top = $position.top + "px";
			style.left = $position.left + "px";
			style.width = $position.width;
			style.height = $position.height;
			style.display = "block";
		} else {
			this._dropCue.style.display = "none";
		}
	},
	_ensureDragImage: function() {
		if (!this._info) {
			this._info = document.createElement("div");
			this._info.style.display = "none";
			this._info.className = "s-list-drag-image";
			document.site.layoutSlot.appendChild(this._info);
			this._info.textContent = "move record";
		}
	},
	moveDragImage: function(event, targetRecord, isOut) {
		this.$action = null;
		if (targetRecord) {
			this.$action = this.getDropAction(event, targetRecord);
		}

		var top = Math.max(event.pageY, this.boundary.top);
		var left = Math.max(event.pageX, this.boundary.left);
		top = Math.min(top, this.boundary.bottom);
		left = Math.min(left, this.boundary.right);

		var inBoundary = (event.pageX == left && event.pageY == top);
		this._ensureDragImage();
		if (!isOut && this.$action) {
			document.site.toggleClass(this._info, "s-drag-ok", true);
			this.targetRecord = targetRecord;
		} else {
			if (isOut) {
				this._info.textContent = this.list.localize.flMoveItem.replace("{0}", "move record");
			}
			document.site.toggleClass(this._info, "s-drag-ok", false);
			this.targetRecord = null;
		}
		this.moveDragCue(event);
		this._info.style.display = "";
		this._info.style.top = top + 15 + "px";
		this._info.style.left = left + 15 + "px";
	},

	stop: function() {
		document.site.removeDomChild(this._info);
		document.site.removeDomChild(this._dropCue);
		delete this._info;
		delete this._dropCue;
		delete this.sourceRecord;
		delete this.targetRecord;
		if (this._eventNamespace) {
			this.list.$$item.undelegate("[data-s-record]", "mousemove" + this._eventNamespace);
			$(document).unbind(this._eventNamespace);
		}
	},
	dispose: function() {
		this.stop();
		if (this._eventNamespace && this.list && this.list.$$item) {
			this.list.$$item.undelegate(this._eventNamespace);
		}
		delete this.list;
	}
});