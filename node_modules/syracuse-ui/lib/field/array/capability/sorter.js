"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _findSortableReference(list, $bind) {
	var $fields = Object.keys(list.$fields);
	var expressionMaker = syra_site.expressionMaker;
	for (var ii = 0, jj = $fields.length; ii < jj; ii++) {
		var $field = list.$fields[$fields[ii]];
		if ($field.$type == "application/x-reference" && $field.$item && $field.$item.$value) {
			var refBind = expressionMaker.extractCode($field.$item.$value);
			if (refBind && $field.$item[refBind]) {
				refBind = expressionMaker.extractCode($field.$item[refBind]);
				if (list.$fields[refBind] && $bind == refBind) {
					return $fields[ii];
				}
			}
		}
	}
	return null;
}

function _filterByStartLetter(list, criterion) {
	var filterDataset = [];
	for (var ii = 0, jj = list.clientDataset.length; ii < jj; ii++) {
		var dataRecord = list.clientDataset[ii];
		if (criterion.binding) {
			var dataField = dataRecord[criterion.binding];
			if (dataField.search(new RegExp(criterion.startLetter, "i")) == 0) {
				filterDataset.push(dataRecord);
			}
		}
	}
	list.clientDataset = filterDataset;
}

function _resetSort(list) {
	if (list._sortedCols) {
		for (var ii = 0, jj = list._sortedCols.length; ii < jj; ii++) {
			var col = list.cols[list._sortedCols[ii]];
			if (col && col.sortLink) {
				syra_site.dom.toggleClass(col.sortLink, " s-grid-sort-desc", false);
				syra_site.dom.toggleClass(col.sortLink, " s-grid-sort-asc", false);
			}
		}
		delete list._sortedCols;
	}
}


function _sort(list, $orderBy, property) {
	var $externalOrderBy = [];
	$orderBy = $orderBy || [{
		binding: "$serverIndex",
		descending: false,
		$type: "application/x-integer"
	}];
	//map for convergence
	for (var ii = 0, jj = $orderBy.length; ii < jj; ii++) {
		$externalOrderBy.push({
			binding: $orderBy[ii].binding,
			asc: $orderBy[ii].descending !== true
		});
	}
	if (list.page.externalAdapter.sortArray(list, $externalOrderBy)) {
		list.clientDataset.sort(function(itemA, itemB) {
			var wr = 0;
			if (property) {
				itemA = itemA[property];
				itemB = itemB[property];
			}
			for (var mm = 0, kk = $externalOrderBy.length; mm < kk; mm++) {
				var criterion = $externalOrderBy[mm];
				var valueA = itemA[criterion.binding];
				var valueB = itemB[criterion.binding];
				switch (criterion.$type) {
					case "application/x-string":
					case "application/x-datetime":
						break;
					case "application/x-time":
					case "application/x-choice":
					case "application/x-boolean":
					case "application/x-integer":
						valueA = parseInt(valueA, 10);
						valueB = parseInt(valueB, 10);
						break;
					case "application/x-decimal":
					case "application/x-real":
						valueA = parseFloat(valueA, 10);
						valueB = parseFloat(valueB, 10);
						break;
					default:
						break;
				}
				if (valueA != valueB) {
					if (valueA > valueB) {
						wr = (criterion.asc) ? 1 : -1;
					} else {
						//valueA < valueB
						wr = (criterion.asc) ? -1 : 1;
					}
					break;
				}
			}
			return wr;
		});
	}
}

function _doSortClick(list, $bind, event) {
	var $field = list.$fields[$bind];
	if ($field.$type == "application/x-reference") {
		if ($field.$item.$value) {
			var refBind = syra_site.expressionMaker.extractCode($field.$item.$value);
			if (refBind && $field.$item[refBind]) {
				refBind = syra_site.expressionMaker.extractCode($field.$item[refBind]);
				if (list.$fields[refBind]) {
					$bind = refBind;
				}
			} else {
				//todo
			}
		}
	}
	var $newOrderBy = [],
		found;
	if (list._$orderBy) {
		for (var ii = 0, jj = list._$orderBy.length; ii < jj; ii++) {
			var $orderItem = list._$orderBy[ii];
			if ($orderItem.binding == $bind) {
				found = true;
				if (!event.ctrlKey) {
					$orderItem.descending = !$orderItem.descending;
					$newOrderBy.push($orderItem);
				}
			} else {
				$newOrderBy.push($orderItem);

			}
		}
	}
	if (!found) {
		$newOrderBy.push({
			binding: $bind,
			descending: false
		});
	}
	list.fetcher.trigger(list, $newOrderBy ? {
		orderBy: $newOrderBy
	} : null);
}

exports.setFetchParams = function(list, params, options) {
	if (options.orderBy !== undefined) {
		params.startIndex = 1;
		exports.setOrderBy(list, options.orderBy);
	}
	params.orderBy = list._$orderBy ? helpers.url.formatOrderBy(list._$orderBy) : null;
	params.startLetter = options.startLetter;
};

exports.setOrderBy = function(list, $orderBy) {
	if ($orderBy !== undefined) {
		list._$orderBy = $orderBy;
	}
};
exports.dispose = function(list) {
	list._sortedCols = list._$orderBy = null;
};


exports.applyFetchOptions = function(list, params) {
	var $orderBy;
	if (params.orderBy === null) {
		$orderBy = null;
		_resetSort(list);
		delete list._$orderBy;
	} else {
		$orderBy = helpers.url.parseOrderBy(params.orderBy);
		if (params.startLetter) {
			_filterByStartLetter(list, {
				binding: $orderBy[0].binding,
				startLetter: params.startLetter
			});
		}
	}
	_sort(list, $orderBy);
};

exports.onSortClick = function(list, $bind, event) {
	list.page.externalAdapter.onSortClickEvent({
		field: list,
		event: event,
		selectorTarget: event.target,
		doEvent: function() {
			_doSortClick(list, $bind, event);
		}
	});
};

exports.cancel = function(list) {
	list._$orderBy = null;
	list.fetcher.trigger(list, {
		orderBy: null
	});
};

exports.render = function(list) {
	_resetSort(list);
	if (list._$orderBy) {
		list._sortedCols = [];
		for (var ii = 0, jj = list._$orderBy.length; ii < jj; ii++) {
			var criterion = list._$orderBy[ii];
			if (ii == 0) {
				var $field = list.$fields[criterion.binding];
				if ($field.$isHidden) {
					var refBind = _findSortableReference(list, criterion.binding);
					if (refBind) {
						$field = list.$fields[refBind];
					}
				}
			}
			if (list.cols) {
				var col = list.cols[criterion.binding];
				if (!col) {
					var refBind = _findSortableReference(list, criterion.binding);
					if (refBind) {
						col = list.cols[refBind];
					}
				}
				if (col && col.sortLink) {
					syra_site.dom.toggleClass(col.sortLink, criterion.descending ? " s-grid-sort-desc" : " s-grid-sort-asc", true);
					list._sortedCols.push(criterion.binding);
				}
			}
		}
	}
	var isSortedCols = list._sortedCols && (list._sortedCols.length > 0);
	if (isSortedCols || (list.$menus && list.$menus.$cancelSort)) {
		syra_menus.setMenus(list, {
			$links: {
				$cancelSort: {
					$title: syra_local.flUnsort,
					$isHidden: !isSortedCols
				}
			}
		});
	}
};

exports.addPicker = function(list, col, $item) {
	var title = col.sortLink = document.createElement("div");
	title.className = list.$skin + "-title-link";
	title.syraOnClick = "onSortClick";
	title.syraValue = $item.$bind;
	return title;
};