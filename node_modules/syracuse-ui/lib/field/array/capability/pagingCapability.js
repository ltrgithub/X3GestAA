"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _pageSizes = [5, 10, 15, 20, 25, 50, 75, 100, 150, 200, 500];

function _drawPageLink(pager, value, currentPageIndex, text) {
	pager.designBtn = pager.pages[value] = syra_menus.addTextButton(text || value || "", "s-pager-link", "onPagerClick");
	pager.designBtn.syraPage = value;
	if (value == currentPageIndex) {
		pager.designBtn.className += " s-pager-current";
	}
	return pager.designBtn;
}

function _drawItemsPerPage(pager, list) {
	if (list.pagging.getItemsPerPage()) {
		pager.size = document.createElement("div");
		pager.size.className = "s-pager-size";
		var label = document.createElement("label");
		label.className = "s-pager-size-label";
		pager.size.appendChild(label).textContent = syra_local.flPagerPageSize + ":";
		var div = document.createElement("div");
		div.className = "s-pager-size-value";
		var $enums = [];
		for (var ii = 0, jj = _pageSizes.length; ii < jj; ii++) {
			$enums.push({
				$value: _pageSizes[ii],
				$title: _pageSizes[ii] + ""
			});
		}
		pager.itemsPerPageField = list.page.loadNewItem(pager.size.appendChild(div), {
			$bind: "$itemsPerPage",
			$category: "field",
			$isEditMode: true,
			$inplace: true,
			$format: "$combo",
			$field: {
				$type: "application/x-choice",
				$value: {
					$type: "application/x-string",
					$enum: $enums
				}
			}
		}, list);
		pager.domItem.appendChild(pager.size);
		pager.itemsPerPageField.setDataValue(list.pagging.getItemsPerPage());
	}
}

var _pagers = {
	$steps: [{
		$bind: "$first",
		$title: "dskpFirstRecord",
		$shortCut: "ESC SHIFT J",
		$shortCutList: "SHIFT PAGEUP"
	}, {
		$bind: "$previous",
		$title: "dskpPreviousRecord",
		$shortCut: "ESC J",
		$shortCutList: "PAGEUP"
	}, {
		$bind: "$next",
		$title: "dskpNextRecord",
		$shortCut: "ESC K",
		$shortCutList: "PAGEDOWN"
	}, {
		$bind: "$last",
		$title: "dskpLastRecord",
		$shortCut: "ESC SHIFT K",
		$shortCutList: "SHIFT PAGEDOWN"
	}]
};
var _pagerPageFacets = ["$details", "$edit", "$modal2"];

exports.addPagerLinksToPage = function(page, $bind) {
	if (!page.pageSteps && _pagerPageFacets.indexOf(page.$facet) >= 0) {
		var slot = document.createElement("div");
		slot.className = "s-page-pager-slot";
		page.pageSteps = _addPagerStepLinks(page, slot);
		page.header.appendChild(slot);
	}
};


function _addPagerStepLinks(parent, slot, article) {
	var steps = {};
	for (var ii = 0, jj = _pagers.$steps.length; ii < jj; ii++) {
		var $step = _pagers.$steps[ii];
		steps[$step.$bind] = parent.page.loadNewItem(slot, {
			$category: "link",
			$skin: (parent.isList ? "s-pager-link" : "s-page-pager-link"),
			$shortCutTip: parent.isList ? $step.$shortCutList : $step.$shortCut,
			$ownerId: parent.id,
			$isPreloaded: true,
			$bind: $step.$bind,
			$title: syra_local[$step.$title],
			$icon: {
				$mode: "icon"
			}
		}, article || parent);
	}
	return steps;
}

function _addPager(list, slot) {
	var pager = list.pagerTop = {
		pages: [],
		domItem: document.createElement("div")
	};
	pager.domItem.style.display = "none";
	pager.domItem.className = "s-pager";
	list.topbar.appendChild(pager.domItem);
	var range = document.createElement("label");
	range.className = "s-pager-range";
	pager.domItem.appendChild(range);
	var show;
	if (list.clientFetchOptions || list.isClientFetch) {
		list.pagging.$totalResults = list.filler.ensureClientDataset(list).length;
	}
	if (!list.isClientPagingPerPageDisable && list.pagging.$totalResults !== undefined) {
		var itemsPerPage = list.pagging.getItemsPerPage();
		_drawItemsPerPage(pager, list);
		range.style.display = pager.size.style.display = (list.designer || (list.pagging.$totalResults > _pageSizes[0])) ? "" : "none";
		var pageTotal = Math.ceil(list.pagging.$totalResults / itemsPerPage);
		var currentPageIndex = Math.ceil(list.pagging.$startIndex / itemsPerPage);
		range.textContent = list.page.externalAdapter.getPagerTotalRcdLabel(list, list.pagging.$totalResults, [syra_local.flPagerTotalRecord, syra_local.flPagerTotalRecords]);
		if (pageTotal > 1) {
			var group = document.createElement("div");
			group.className = "s-pager-nav";
			var page = 0;
			var lastStepPage = pageTotal - 1;
			group.appendChild(_drawPageLink(pager, ++page, currentPageIndex));
			if (currentPageIndex > 5 && pageTotal > 7) {
				if ((currentPageIndex + 5) < pageTotal) {
					page = currentPageIndex - 1;
				} else {
					page = pageTotal - 6;
				}
				group.appendChild(_drawPageLink(pager, page, currentPageIndex, "..."));
			}
			for (var ii = 0; ii < 5; ii++) {
				if (page == lastStepPage) {
					break;
				}
				page++;
				var btn = _drawPageLink(pager, page, currentPageIndex);
				group.appendChild(btn);
			}
			if (page < lastStepPage) {
				group.appendChild(_drawPageLink(pager, page + 1, currentPageIndex, "..."));
			}
			group.appendChild(_drawPageLink(pager, pageTotal, currentPageIndex));
			pager.domItem.appendChild(group);
			show = true;
			if (!list.isClientFetch) {
				pager.pageSteps = _addPagerStepLinks(list, group, list.page);
			}
		}
	} else {
		!list.isClientPagingPerPageDisable && _drawItemsPerPage(pager, list);
		if (list.isServerStepPager !== false || list.$prototype.$isFieldPager) {
			pager.pageSteps = _addPagerStepLinks(list, pager.domItem, list.$prototype.$isFieldPager ? list : list.page);
		}
	}
	pager.domItem.style.display = (show !== false) ? "" : "none";
	return pager;
}


function _disposePager(list, clear) {
	var pager = list.pagerTop;
	if (pager) {
		if (clear) {
			if (pager.itemsPerPageField) {
				list.removeItem(pager.itemsPerPageField);
				delete pager.itemsPerPageField;
			}
			if (pager.pageSteps) {
				var $binds = Object.keys(pager.pageSteps);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var step = pager.pageSteps[$binds[ii]];
					step.articleParent && step.articleParent.removeItem(step, true, true);
				}
				pager.pageSteps = null;
			}
			syra_site.dom.removeChild(pager.domItem);

		}
		list.pagerTop = pager.size = pager.domItem = pager.itemsPerPageField = pager.pageSteps = null;
	}
}

exports.getDefaultItemsPerPage = function(page, ignoreUrl) {
	var count = !ignoreUrl && (page.openerUrlSegments && page.openerUrlSegments.params && page.openerUrlSegments.params.count);
	if (count) {
		return parseInt(count, 10); // ensure int
	}
	if (page.fetchListItemsPerPage) {
		return page.fetchListItemsPerPage;
	}
	if (page.defaultItemsPerPage) {
		return page.defaultItemsPerPage;
	}
	if (page.isVignettePage) {
		return 10;
	}
	return 50;
};

function PagingCapability(list) {
	this.list = list;
	this.$startIndex = 1;
}

exports.PagingCapability = helpers.defineClass(PagingCapability, null, {
	getParseIndexes: function() {
		var start = this.$startIndex || 1;
		var last = start + (this.getItemsPerPage() - 1);
		return {
			start: start,
			last: Math.min(last, this.list.filler.ensureClientDataset(this.list).length)
		};
	},
	clearPreferences: function() {
		delete this.list.page.fetchListItemsPerPage;
		var defaultValue = exports.getDefaultItemsPerPage(this.list.page, true);
		if (defaultValue !== this.list.$item.$itemsPerPage) {
			this.getItemsPerPage(defaultValue);
			this.list.filler.trigger(this.list, {
				startIndex: 1
			});
		}
	},
	addPagerStepLinks: function(parent, slot, article) {
		_addPagerStepLinks(parent, slot, article);
	},
	ensureClientRange: function($itemsPerPage, $startIndex) {
		this.getItemsPerPage($itemsPerPage);
		this.$startIndex = Math.max(($startIndex || 1), 1);
		this.$totalResults = this.list.filler.ensureClientDataset(this.list).length;
	},
	getItemsPerPage: function($itemsPerPage) {
		if ($itemsPerPage !== undefined) {
			this.list.$item.$itemsPerPage = this.$itemsPerPage = parseInt($itemsPerPage, 10);
		}
		if (this.list.$item.$isPagerHidden || this.noPageSize || this.list.isClientPagingPerPageDisable) {
			this.$itemsPerPage = this.list.filler.ensureClientDataset(this.list).length;
		} else {
			this.$itemsPerPage = this.$itemsPerPage || exports.getDefaultItemsPerPage(this.list.page);
		}
		return this.$itemsPerPage;
	},
	applyMetadata: function(metaData, designing) {
		var hasToFetch;
		if (metaData.$isPagerHidden !== undefined) {
			this.list.$item.$isPagerHidden = metaData.$isPagerHidden;
			this.showPagers(designing);
			hasToFetch = designing;
		}
		if (metaData.$totalResults !== undefined) {
			this.$totalResults = metaData.$totalResults;
		}
		if (metaData.$startIndex !== undefined) {
			this.$startIndex = metaData.$startIndex;
		}
		if (metaData.$itemsPerPage !== undefined) {
			this.getItemsPerPage(metaData.$itemsPerPage);
			hasToFetch = designing;
		}
		hasToFetch && this.list.filler.trigger(this.list);

	},
	onPageClick: function(event, btn) {
		if (btn.syraIsDesign) {
			this.applyMetadata({
				$isPagerHidden: !this.list.$item.$isPagerHidden
			}, true);
			this.list.saveListDesign();
		} else {
			if (this.$totalResults) {
				var pageTotal = Math.ceil(this.$totalResults / this.getItemsPerPage());
				var newPage = Math.max(1, Math.min(btn.syraPage, pageTotal));
				this.list.filler.trigger(this.list, {
					startIndex: ((newPage - 1) * this.getItemsPerPage()) + 1
				});
			}
		}
	},
	showPagers: function(designing) {
		var pager = this.list.pagerTop;
		if (pager) {
			var show = !this.list.$item.$isPagerHidden && this.list.$item.$graphPosition != "front";
			if (designing && this.$itemsPerPage !== undefined) {
				this.designLastGetItemsPerPage = this.$itemsPerPage;
			}
			if (pager.domItem) {
				pager.domItem.style.display = (show !== false) ? "" : "none";
			}
			if (designing && show && pager.itemsPerPageField) {
				pager.itemsPerPageField.setDataValue(this.getItemsPerPage(this.designLastGetItemsPerPage || exports.getDefaultItemsPerPage(this.list.page)));
			}
		} else {
			var show = !this.list.$item.$isPagerHidden && this.list.$item.$graphPosition != "front";
			if (designing && show && this.designLastGetItemsPerPage) {
				this.getItemsPerPage(this.designLastGetItemsPerPage);
			}
		}
	},
	setPage: function($serverIndex) {
		var index = Math.max(this.list.filler.getClientDataSetIndex(this.list, $serverIndex), 0);
		var newPage = Math.ceil((index + 1) / this.getItemsPerPage());
		this.list.filler.trigger(this.list, {
			startIndex: ((newPage - 1) * this.getItemsPerPage()) + 1
		});
	},
	draw: function(designing) {
		if (!designing && this._last) {
			if (this.list.clientFetchOptions || this.list.isClientFetch) {
				this.$totalResults = this.list.dataset.length;
			}
			if (this._last.$itemsPerPage == this.$itemsPerPage &&
				this._last.$totalResults == this.$totalResults &&
				this._last.$startIndex == this.$startIndex) {
				return;
			}
		}
		_disposePager(this.list, true);
		if (this.list.isPagingDisabled !== true && this.list.$item.$isPagerHidden !== true) {
			_addPager(this.list);
			this.showPagers(designing);
			this._last = {
				$itemsPerPage: this.$itemsPerPage,
				$startIndex: this.$startIndex,
				$totalResults: this.$totalResults
			};
		}
	},
	dispose: function() {
		_disposePager(this.list);
		this.list = this.domItem = null;
	}
});