"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Pager = require("./pager").Pager;

function PagingCapability(list) {
	this.list = list;

	this.$startIndex = 1;
}

exports.PagingCapability = helpers.defineClass(PagingCapability, null, {
	goToClientPage: function(options) {
		options = options || {};
		var options = {
			$startIndex: Math.max((options.$startIndex || 1), 1),
			$itemsPerPage: parseInt(options.$itemsPerPage || this.$itemsPerPage, 10),
			$totalResults: this.list.clientDataset.length
		};
		this.setOptions(options);
		return options;
	},
	ensureItemsPerPage: function() {
		this.$itemsPerPage = this.$itemsPerPage || 50;
	},
	applyMetadata: function(metaData, designing) {
		if (metaData.$isPagerHidden !== undefined) {
			this.list.$item.$isPagerHidden = metaData.$isPagerHidden;
			this.showPagers();
		}
		this.setOptions(metaData);
		if (metaData.$itemsPerPage !== undefined) {
			this.list.$item.$itemsPerPage = this.$itemsPerPage;
			if (designing) {
				this.fetchItemPerPage(this.$itemsPerPage);
			}
		}
	},
	fetchItemPerPage: function($itemsPerPage) {
		var self = this;
		setTimeout(function() {
			self.list.fetch({
				$itemsPerPage: self.$itemsPerPage = parseInt($itemsPerPage)
			});
		}, 100);
	},
	setOptions: function(options) {
		if (options.$itemsPerPage !== undefined) {
			this.list.$item.$itemsPerPage = this.$itemsPerPage = parseInt(options.$itemsPerPage, 10);
		}
		if (options.$totalResults !== undefined) {
			this.$totalResults = options.$totalResults;
		}
		if (options.$startIndex !== undefined) {
			this.$startIndex = options.$startIndex;
		}
	},
	onPageClick: function(link) {
		if (link.syraIsDesign) {
			this.applyMetadata({
				$isPagerHidden: !this.list.$item.$isPagerHidden
			}, true);
			if (this.list.designer) {
				this.list.designer.historyTool.notifyUpdate();
			}
		} else {
			if (this.$totalResults) {
				var pageTotal = Math.ceil(this.$totalResults / this.$itemsPerPage);
				var newPage = Math.max(1, Math.min(link.syraPage, pageTotal));
				this.list.fetch({
					startIndex: ((newPage - 1) * this.$itemsPerPage) + 1
				});
			}
		}
	},
	designItem: function(open) {
		if (this.pagers) {
			for (var ii = 0, jj = this.pagers.length; ii < jj; ii++) {
				this.pagers[ii].designItem(open);
			}
		}
	},
	showPagers: function() {
		if (this.pagers) {
			var show = !this.list.$item.$isPagerHidden && this.list.$item.$graphPosition != "front";
			for (var ii = 0, jj = this.pagers.length; ii < jj; ii++) {
				this.pagers[ii].toggle(show);
			}
		}
	},
	setPage: function($serverIndex) {
		var newPage = Math.ceil(($serverIndex + 1) / this.$itemsPerPage);
		this.list.fetch({
			startIndex: ((newPage - 1) * this.$itemsPerPage) + 1
		});
	},
	draw: function() {
		this._disposePagers(true);
		if (this.list.isPagingDisabled !== true && this.list.$item.$isPagerHidden !== true) {
			this.pagers = [];
			var pager = new Pager();
			this.pagers.push(pager);
			pager.load(this.list, this.list.topbar);
			if (this.list.records && this.list.records.length > 20) {
				var pager = new Pager();
				this.pagers.push(pager);
				pager.load(this.list, this.list.ensureBottomBar());
			}
			this.showPagers();
		}
	},
	onShortKeyEvent: function(isPageDown, isShift) {
		if (this.pagers.length) {
			var pager = this.pagers[0];
			if (pager.pages.length > 0) {
				// looking for the next page
				var currentIndex = Math.ceil(this.$startIndex / this.$itemsPerPage);
				var goToPage;
				if (isPageDown) {
					goToPage = isShift ? (pager.pages.length - 1) : (currentIndex + 1);
				} else {
					goToPage = isShift ? 1 : (currentIndex - 1);
				}
				if (goToPage !== undefined) {
					goToPage = Math.min(Math.max(1, goToPage), pager.pages.length - 1);
					pager.pages[goToPage].click();
				}
				if (this.list.clientFetchOptions && this.list.records && this.list.records.length) {
					/* aurelien
                     var record = this.list.records[0];
                     if (record._rowIndexCell) {
                     record._rowIndexCell.click();
                     }*/
				}
			} else {
				var bind = isPageDown ? (isShift ? '$last' : '$next') : (isShift ? '$first' : '$previous');
				for (var ii = 0, jj = pager._serverSteps.length; ii < jj; ii++) {
					if (pager._serverSteps[ii].$bind === bind) {
						pager._serverSteps[ii].click();
						break;
					}
				}
			}
		}
	},
	_disposePagers: function(clear) {
		if (this.pagers) {
			for (var ii = 0, jj = this.pagers.length; ii < jj; ii++) {
				if (clear) {
					this.pagers[ii].clear();
				}
				this.pagers[ii].dispose();
			}
			this.pagers = null;
		}
	},
	dispose: function() {
		this._disposePagers();
		this.list = this._item = null;
	}
});