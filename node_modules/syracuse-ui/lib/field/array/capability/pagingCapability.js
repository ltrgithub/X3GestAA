"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Pager = require("./pager").Pager;

function _disposePagers(capability, clear) {
	capability.pagerTop && capability.pagerTop.dispose(clear);
	capability.pagerBottom && capability.pagerBottom.dispose(clear);
	capability.pagerTop = capability.pagerBottom = null;
}

function PagingCapability(list) {
	this.list = list;
	this.$startIndex = 1;
}

exports.PagingCapability = helpers.defineClass(PagingCapability, null, {
	getParseIndexes: function() {
		var start = this.$startIndex || 1;
		var last = start + (this.getItemsPerPage() - 1);
		return {
			start: start,
			last: Math.min(last, this.list.ensureClientDataset().length)
		};
	},
	reset: function() {
		if (this.list.$origItem.$itemsPerPage !== this.list.$item.$itemsPerPage) {
			if (!this.list.$origItem.$itemsPerPage) {
				delete this.$itemsPerPage;
				delete this.list.$item.$itemsPerPage;
			}
			this.getItemsPerPage(this.list.$origItem.$itemsPerPage);
			this.list.fetcher.trigger(this.list, {
				startIndex: 1
			});
		}
	},
	ensureClientRange: function($itemsPerPage, $startIndex) {
		this.getItemsPerPage($itemsPerPage);
		this.$startIndex = Math.max(($startIndex || 1), 1);
		this.$totalResults = this.list.ensureClientDataset().length;
	},
	getDefaultItemsPerPage: function() {
		return this.list.page.defaultItemsPerPage || 50;
	},
	getItemsPerPage: function($itemsPerPage) {
		if ($itemsPerPage !== undefined) {
			this.list.$item.$itemsPerPage = this.$itemsPerPage = parseInt($itemsPerPage, 10);
		}
		if (this.list.$item.$isPagerHidden || this.noPageSize || this.list.isClientPagingPerPageDisable) {
			this.$itemsPerPage = this.list.ensureClientDataset().length;
		} else {
			this.$itemsPerPage = this.$itemsPerPage || this.getDefaultItemsPerPage();
		}
		return this.$itemsPerPage;
	},
	applyMetadata: function(metaData, designing) {
		var hasToFetch;
		if (metaData.$isPagerHidden !== undefined) {
			this.list.$item.$isPagerHidden = metaData.$isPagerHidden;
			this.showPagers(designing);
			hasToFetch = designing;
		}
		if (metaData.$totalResults !== undefined) {
			this.$totalResults = metaData.$totalResults;
		}
		if (metaData.$startIndex !== undefined) {
			this.$startIndex = metaData.$startIndex;
		}
		if (metaData.$itemsPerPage !== undefined) {
			this.getItemsPerPage(metaData.$itemsPerPage);
			hasToFetch = designing;
		}
		hasToFetch && this.list.fetcher.trigger(this.list);

	},
	onPageClick: function(event, btn) {
		if (btn.syraIsDesign) {
			this.applyMetadata({
				$isPagerHidden: !this.list.$item.$isPagerHidden
			}, true);
			this.list.saveListDesign();
		} else {
			if (this.$totalResults) {
				var pageTotal = Math.ceil(this.$totalResults / this.getItemsPerPage());
				var newPage = Math.max(1, Math.min(btn.syraPage, pageTotal));
				this.list.fetcher.trigger(this.list, {
					startIndex: ((newPage - 1) * this.getItemsPerPage()) + 1
				});
			}
		}
	},
	_showPager: function(pager, show, designing) {
		pager.toggle(show);
		if (designing && show && pager.itemsPerPageField) {
			pager.itemsPerPageField.setDataValue(this.getItemsPerPage(this.designLastGetItemsPerPage || this.getDefaultItemsPerPage()));
		}
	},
	showPagers: function(designing) {
		if (this.pagerTop || this.pagerBottom) {
			var show = !this.list.$item.$isPagerHidden && this.list.$item.$graphPosition != "front";
			if (designing) {
				if (this.$itemsPerPage !== undefined) {
					this.designLastGetItemsPerPage = this.$itemsPerPage;
				}
			}
			this.pagerTop && this._showPager(this.pagerTop, show, designing);
			this.pagerBottom && this._showPager(this.pagerBottom, show, designing);
		} else {
			var show = !this.list.$item.$isPagerHidden && this.list.$item.$graphPosition != "front";
			if (designing && show && this.designLastGetItemsPerPage) {
				this.getItemsPerPage(this.designLastGetItemsPerPage);
			}
		}
	},
	setPage: function($serverIndex) {
		var index = Math.max(this.list.getClientDataSetIndex($serverIndex), 0);
		var newPage = Math.ceil((index + 1) / this.getItemsPerPage());
		this.list.fetcher.trigger(this.list, {
			startIndex: ((newPage - 1) * this.getItemsPerPage()) + 1
		});
	},
	draw: function(designing) {
		if (!designing && this._last) {
			if (this.list.clientFetchOptions || this.list.isClientFetch) {
				this.$totalResults = this.list.dataset.length;
			}
			if (this._last.$itemsPerPage == this.$itemsPerPage &&
				this._last.$totalResults == this.$totalResults &&
				this._last.$startIndex == this.$startIndex) {
				return;
			}
		}
		if (this.list.$fitContainer) {
			this.pagerTopOnly = this.list.$fitContainer;
		}
		_disposePagers(this, true);
		if (this.list.isPagingDisabled !== true && this.list.$item.$isPagerHidden !== true) {
			this.pagerTop = new Pager();
			this.pagerTop.load(this.list, this.list.ensureTopBar());
			if (!this.pagerTopOnly && this.list.records && this.list.records.length > 20) {
				this.pagerBottom = new Pager();
				this.pagerBottom.load(this.list, this.list.ensureBottomBar());
			}
			this.showPagers(designing);
			this._last = {
				$itemsPerPage: this.$itemsPerPage,
				$startIndex: this.$startIndex,
				$totalResults: this.$totalResults
			};
		}
	},
	dispose: function() {
		_disposePagers(this);
		this.list = this.domItem = null;
	}
});