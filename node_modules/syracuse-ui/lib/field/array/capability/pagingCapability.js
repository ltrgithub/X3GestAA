"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Pager = require("./pager").Pager;

function PagingCapability(list) {
	this.list = list;
	this.$startIndex = 1;
}

exports.PagingCapability = helpers.defineClass(PagingCapability, null, {
	getParseIndexes: function() {
		var start = this.$startIndex || 1;
		var last = start + (this.getItemsPerPage() - 1);
		return {
			start: start,
			last: Math.min(last, this.list.ensureClientDataset().length)
		};
	},
	ensureClientRange: function($itemsPerPage, $startIndex) {
		this.getItemsPerPage($itemsPerPage);
		this.$startIndex = Math.max(($startIndex || 1), 1);
		this.$totalResults = this.list.ensureClientDataset().length;
	},
	getDefaultItemsPerPage: function() {
		return this.list.page.defaultItemsPerPage || 50;
	},
	getItemsPerPage: function($itemsPerPage) {
		if ($itemsPerPage !== undefined) {
			this.list.$item.$itemsPerPage = this.$itemsPerPage = parseInt($itemsPerPage, 10);
		}
		if (this.list.$item.$isPagerHidden || this.noPageSize || this.list.isClientPagingPerPageDisable) {
			this.$itemsPerPage = this.list.ensureClientDataset().length;
		} else {
			this.$itemsPerPage = this.$itemsPerPage || this.getDefaultItemsPerPage();
		}
		return this.$itemsPerPage;
	},
	applyMetadata: function(metaData, designing) {
		var hasToFetch;
		if (metaData.$isPagerHidden !== undefined) {
			this.list.$item.$isPagerHidden = metaData.$isPagerHidden;
			this.showPagers(designing);
			hasToFetch = designing;
		}
		if (metaData.$totalResults !== undefined) {
			this.$totalResults = metaData.$totalResults;
		}
		if (metaData.$startIndex !== undefined) {
			this.$startIndex = metaData.$startIndex;
		}
		if (metaData.$itemsPerPage !== undefined) {
			this.getItemsPerPage(metaData.$itemsPerPage);
			hasToFetch = designing;
		}
		if (hasToFetch) {
			this.list.triggerFetch();
		}
	},
	onPageClick: function(link) {
		if (link.syraIsDesign) {
			this.applyMetadata({
				$isPagerHidden: !this.list.$item.$isPagerHidden
			}, true);
			this.list.saveListDesign();
		} else {
			if (this.$totalResults) {
				var pageTotal = Math.ceil(this.$totalResults / this.getItemsPerPage());
				var newPage = Math.max(1, Math.min(link.syraPage, pageTotal));
				this.list.triggerFetch({
					startIndex: ((newPage - 1) * this.getItemsPerPage()) + 1
				});
			}
		}
	},
	showPagers: function(designing) {
		if (this.pagers) {
			var show = !this.list.$item.$isPagerHidden && this.list.$item.$graphPosition != "front";
			if (designing) {
				if (this.$itemsPerPage !== undefined) {
					this.designLastGetItemsPerPage = this.$itemsPerPage;
				}
			}
			for (var ii = 0, jj = this.pagers.length; ii < jj; ii++) {
				this.pagers[ii].toggle(show);
				if (designing && show && this.pagers[ii].itemsPerPageField) {
					this.pagers[ii].itemsPerPageField.setDataValue(this.getItemsPerPage(this.designLastGetItemsPerPage || this.getDefaultItemsPerPage()));
				}
			}
		} else {
			var show = !this.list.$item.$isPagerHidden && this.list.$item.$graphPosition != "front";
			if (designing && show && this.designLastGetItemsPerPage) {
				this.getItemsPerPage(this.designLastGetItemsPerPage);
			}
		}
	},
	setPage: function($serverIndex) {
		var index = Math.max(this.list.getClientDataSetIndex($serverIndex), 0);
		var newPage = Math.ceil((index + 1) / this.getItemsPerPage());
		this.list.triggerFetch({
			startIndex: ((newPage - 1) * this.getItemsPerPage()) + 1
		});
	},
	draw: function(designing) {
		this._disposePagers(true);
		if (this.list.isPagingDisabled !== true && this.list.$item.$isPagerHidden !== true) {
			this.pagers = [];
			var pager = new Pager();
			this.pagers.push(pager);
			pager.load(this.list, this.list.topbar);
			if (this.list.records && this.list.records.length > 20) {
				var pager = new Pager();
				this.pagers.push(pager);
				pager.load(this.list, this.list.ensureBottomBar());
			}
			this.showPagers(designing);
		}
	},

	onShortKeyEvent: function(isPageDown, isShift) {
		if (this.pagers.length) {
			var pager = this.pagers[0];
			if (pager.pages.length > 0) {
				// looking for the next page
				var currentIndex = Math.ceil(this.$startIndex / this.getItemsPerPage());
				var goToPage;
				if (isPageDown) {
					goToPage = isShift ? (pager.pages.length - 1) : (currentIndex + 1);
				} else {
					goToPage = isShift ? 1 : (currentIndex - 1);
				}
				if (goToPage !== undefined) {
					goToPage = Math.min(Math.max(1, goToPage), pager.pages.length - 1);
					pager.pages[goToPage].click();
				}
				if (this.list.clientFetchOptions && this.list.records && this.list.records.length) {
					/* aurelien
                     var record = this.list.records[0];
                     if (record.rowIndexPicker) {
                     record.rowIndexPicker.click();
                     }*/
				}
			} else {
				var bind = isPageDown ? (isShift ? '$last' : '$next') : (isShift ? '$first' : '$previous');
				for (var ii = 0, jj = pager._serverSteps.length; ii < jj; ii++) {
					if (pager._serverSteps[ii].$bind === bind) {
						pager._serverSteps[ii].click();
						break;
					}
				}
			}
		}
	},
	_disposePagers: function(clear) {
		if (this.pagers) {
			for (var ii = 0, jj = this.pagers.length; ii < jj; ii++) {
				if (clear) {
					this.pagers[ii].clear();
				}
				this.pagers[ii].dispose();
			}
			this.pagers = null;
		}
	},
	dispose: function() {
		this._disposePagers();
		this.list = this.domItem = null;
	}
});