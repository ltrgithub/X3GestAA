"use strict";
var helpers = require('syracuse-core/lib/helpers');

function PagingCapability(list){
    this.list = list;
    if (this.list.$item.$isPagerHidden !== true) {
        this.list.$item.$isPagerHidden = false;
    }
    this._$totalResults = 0;
    this.$startIndex = 1;
}

exports.PagingCapability = helpers.defineClass(PagingCapability, null, {
    goToClientPage: function(options){
        options = options || {};
        var dataRecordSet = options.dataRecordSet || this.list.ensureDataSet();
        var options = {
            $startIndex: Math.max((options.$startIndex || 1), 1),
            $itemsPerPage: parseInt(options.$itemsPerPage || this._$itemsPerPage, 10),
            $totalResults: dataRecordSet.length
        };
        this.setOptions(options);
        return options;
    },
    ensureItemsPerPage: function(){
        this._$itemsPerPage = this._$itemsPerPage || 20;
    },
    applyMetadata: function(metaData, onAuthoring){
        if (metaData.$isPagerHidden !== undefined) {
            this._toggle(!(this.list.$item.$isPagerHidden = metaData.$isPagerHidden));
        }
        this.setOptions(metaData);
        if (metaData.$itemsPerPage !== undefined) {
            this.list.$item.$itemsPerPage = this._$itemsPerPage;
            if (onAuthoring) {
                this.fetchItemPerPage(this._$itemsPerPage);
            }
        }
    },
    fetchItemPerPage: function($itemsPerPage){
        var self = this;
        setTimeout(function(){
            self.list.fetch({
                $itemsPerPage: self._$itemsPerPage = parseInt($itemsPerPage)
            });
        }, 100);
    },
    setOptions: function(options){
        if (options.$itemsPerPage !== undefined) {
            this._$itemsPerPage = parseInt(options.$itemsPerPage, 10);
            //this._$itemsPerPage = options.$itemsPerPage;
        }
        if (options.$totalResults !== undefined) {
            this._$totalResults = options.$totalResults;
        }
        if (options.$startIndex !== undefined) {
            this.$startIndex = options.$startIndex;
        }
    },
    onPageClick: function($$link){
        var page = parseInt($$link.attr("data-s-page"), 10);
        var pageTotal = Math.ceil(this._$totalResults / this._$itemsPerPage);
        var newPage = Math.max(1, Math.min(page, pageTotal));
        this.list.fetch({
            startIndex: ((newPage - 1) * this._$itemsPerPage) + 1
        });
    },
    setPage: function($serverIndex){
        var newPage = Math.ceil(($serverIndex + 1) / this._$itemsPerPage)
        this.list.fetch({
            startIndex: ((newPage - 1) * this._$itemsPerPage) + 1
        })
    },
    _toggle: function(show, onDispose){
        var self = this;
        if (show) {
            if (!self._$$item) {
                var div = document.createElement("div");
                div.style.display = "none";
                div.className = "s-pager";
                self._$$item = $(self.list._topbar.appendChild(div));
            }
        }
        else {
            if (this._$$item) {
                if (!onDispose) {
                    this._$$item.remove();
                }
                delete this._$$item;
            }
        }
    },
    _appendLink: function(value, text){
        var link = document.createElement("a");
        link.className = "s-pager-link";
        link.setAttribute("data-s-page", value);
        link.textContent = text || value || "";
        return link;
    },
    draw: function(){
        if (this._$$item) {
            var range = document.createElement("label");
            range.className = "s-pager-range";
            this._$$item.empty().append(range);
            var show;
            if (this._itemsPerPageField) {
                this.list.removeItem(this._itemsPerPageField);
                delete this._itemsPerPageField;
            }
            if (this.serverSteps) {
                var page = this.list.page;
                for (var ii = 0, jj = this.serverSteps.length; ii < jj; ii++) {
                    var step = this.serverSteps[ii];
                    if (page.$menus) {
                        delete page.$menus[step.$bind];
                    }
                    step.unbind();
                    page.removeItem(step, true);
                }
            }
            this.serverSteps = [];
            if (this.list.isClientFetch) {
                this._$totalResults = this.clientTotalRecords || this.list.dataset.length;
            }
            if (!this.list.isClientPagingPerPageDisable && this._$totalResults) {
                this.ensureItemsPerPage();
                this._appendItemsPerPage();
                var pageTotal = Math.ceil(this._$totalResults / this._$itemsPerPage);
                var currentPageIndex = Math.ceil(this.$startIndex / this._$itemsPerPage);
                if (pageTotal <= 1) {
                    range.textContent = this._$totalResults + " " + this.list._localize.pager_totalRecords;
                }
                else {
                    var lastRecordIndex = Math.min((this.$startIndex + this._$itemsPerPage) - 1, this._$totalResults);
                    range.textContent = this.$startIndex + " - " + lastRecordIndex + " " + this.list._localize.pager_itemOf + " " + this._$totalResults;
                    var group = document.createElement("div");
                    group.className = "s-pager-nav";
                    var start = 1;
                    var numLinkMax = 5;
                    if (currentPageIndex > numLinkMax) {
                        var reminder = (currentPageIndex % numLinkMax);
                        start = (reminder == 0) ? (currentPageIndex - numLinkMax) + 1 : (currentPageIndex - reminder) + 1;
                    }
                    
                    var end = (start + numLinkMax) - 1;
                    
                    end = Math.min(end, pageTotal);
                    
                    if (start > 1) {
                        group.appendChild(this._appendLink(1));
                        group.appendChild(this._appendLink((start - 1), "..."));
                    }
                    for (var page = start; page <= end; page++) {
                        var btn = this._appendLink(page);
                        if (page == currentPageIndex) {
                            btn.className += " s-pager-current";
                        }
                        group.appendChild(btn);
                    }
                    if (end < pageTotal) {
                        group.appendChild(this._appendLink(end + 1, "..."));
                        group.appendChild(this._appendLink(pageTotal));
                    }
                    this._$$item.append(group);
                    show = true;
                    this._appendServerStep({
                        $bind: "$previous",
                        $title: "<" + this.list._localize.pager_prev
                    });
                    this._appendServerStep({
                        $bind: "$next",
                        $title: this.list._localize.pager_next + ">"
                    });
                }
            }
            else {
                this._appendItemsPerPage();
                this._appendServerStep({
                    $bind: "$first",
                    $title: this.list._localize.pager_first
                });
                this._appendServerStep({
                    $bind: "$previous",
                    $title: "<" + this.list._localize.pager_prev
                });
                this._appendServerStep({
                    $bind: "$next",
                    $title: this.list._localize.pager_next + ">"
                });
                this._appendServerStep({
                    $bind: "$last",
                    $title: this.list._localize.pager_last
                });
            }
            
            this._$$item[0].style.display = (show !== false) ? "" : "none";
        }
    },
    _appendItemsPerPage: function(){
        if (this._$itemsPerPage) {
            var domSize = document.createElement("div");
            domSize.className = "s-pager-size";
            var label = document.createElement("label");
            label.className = "s-pager-size-label";
            domSize.appendChild(label).textContent = this.list._localize.pager_pageSize + ":";
            var div = document.createElement("div");
            div.className = "s-pager-size-value";
            this._itemsPerPageField = this.list.page.loadNewItem(domSize.appendChild(div), {
                $bind: "$itemsPerPage",
                $category: "field",
                $isEditMode: true,
                $isBorderVisible: true,
                $inplace: true,
                $format: "$combo",
                $field: {
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-string",
                        $enum: ["5", "10", "15", "20", "25", "50", "75", "100", "150", "200", "500"].map(function(count){
                            return {
                                $value: count,
                                $title: count
                            };
                        })
                    }
                }
            }, this.list);
            this._$$item.append(domSize);
            this._itemsPerPageField.setDataValue(this._$itemsPerPage);
        }
    },
    _appendServerStep: function($step){
        var self = this;
        var div = document.createElement("div");
        div.className = "s-pager-step-link";
        var step = self.list.page.loadNewItem(self._$$item[0].appendChild(div), {
            $category: "link",
            $bind: $step.$bind,
            $title: $step.$title,
            $skin: "s-pager-link"
        }, self.list.$prototype.$isFieldPager ? self.list : self.list.page);
        self.serverSteps.push(step);
        step.onMenuClick = function(){
            var $url = this.$url;
            setTimeout(function(){
                self.list.fetch({}, {
                    $url: $url
                });
            }, 100);
            return false;
        };
    },
    dispose: function(){
        this._toggle(false);
        delete this._itemsPerPageField;
        delete this.list;
    }
});
