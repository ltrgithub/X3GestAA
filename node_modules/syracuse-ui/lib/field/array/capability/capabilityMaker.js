"use strict";
var searchCapability = require("./searchCapability");
var PagingCapability = require("./pagingCapability").PagingCapability;

exports.sorter = require("./sorter");

function _parse(item, $capabilities, $variantItemKey) {
	if ($capabilities) {
		var parts = $capabilities.split(",");
		for (var ii = 0, jj = parts.length; ii < jj; ii++) {
			var part = parts[ii];
			if (part) {
				item.$capability[part] = item.$capability[part] || {};
				if ($variantItemKey) {
					(item.$capability[part].$variantItemKeys = item.$capability[part].$variantItemKeys || []).push($variantItemKey);
				}
			}
		}
	}
}

exports.addReorder = function(record, reorder) {
	if (!record.reorderBtn) {
		record.reorderBtn = document.createElement("div");
		record.reorderBtn.className = record.$skin + "-reorder";
		record.reorderBtn.syraReorderRecordId = record.list.id;
		record.reorderBtn.syraDragSpot = record.id;
		record.onAddButton(record.reorderBtn);
		if (record.reorderBtnParent !== null) { //null set for insertPicker after
			var parent = record.reorderBtnParent || record.domItem;
			parent.insertBefore(record.reorderBtn, parent.firstChild);
		}
		record.list.$isDisabled && syra_site.dom.disableItem(record.reorderBtn, record.list.$isDisabled);
	}
};

var _actionTypes = {
	append: {
		$bind: "$create",
		$title: "flAppend"
	},
	deleteAll: {
		$bind: "$delete",
		$title: "flDeleteAll",
		$confirm: "flDeleteAllMessageText"
	},
	copy: {
		$bind: "$copy",
		$title: "flCopy"
	},
	cut: {
		$bind: "$cut",
		$title: "flCut"
	},
	paste: {
		$bind: "$paste",
		$title: "flPaste"
	}
};

function _addAction(list, $actions, name) {
	var action = _actionTypes[name];
	var $newAction = $actions[action.$bind] = {
		$title: syra_local[action.$title],
		$confirm: syra_local[action.$confirm],
		$isHidden: false
	};
	var $keys = list.$capability[name] && list.$capability[name].$variantItemKeys;
	if ($keys) {
		$newAction.$variants = {};
		for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
			$newAction.$variants[$keys[ii]] = {
				$confirm: syra_local[action.$confirm],
				$isHidden: false
			};
		}
	}
}


exports.applyToRecord = function(record, onListMetadata) {
	var $prev = record.$capability;
	record.$capability = record.list.$capability;
	if (record.dataset && record.dataset.$capabilities !== undefined) {
		record.$capability = {};
		_parse(record, record.dataset.$capabilities);
	}
	var $actions = {};
	if ($prev) {
		if ($prev["delete"] && !record.$capability["delete"]) {
			$actions.$delete = {
				$isHidden: true
			};
		}
		if ($prev.insert && !record.$capability.insert) {
			$actions.$create = {
				$isHidden: true
			};
		}
	}
	if (record.$capability.insert) {
		$actions.$create = {
			$title: syra_local.flInsert,
			$isHidden: false
		};
	}
	if (record.$capability["delete"]) {
		$actions.$delete = {
			$title: syra_local.flDelete,
			$confirm: record.list.$confirmDelete,
			$isHidden: false
		};
	}
	if ($actions.$create || $actions.$delete) {
		syra_menus.setMenus(record, {
			$actions: $actions
		});
	}
};

exports.apply = function(list, $meta) {
	var $actions = {};
	var $prev = list.$capability;
	var $capabilities = $meta;
	list.$capability = {};
	if ($meta != null) {
		_parse(list, $capabilities);
	} else {
		_parse(list, list.$prototype.$capabilities);
		if (list.$field.$item && list.$field.$item.$variants) {
			var $keys = Object.keys(list.$field.$item.$variants);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				_parse(list, list.$field.$item.$variants[$keys[ii]].$capabilities, $keys[ii]);
			}

		}
	}
	if ($prev) {
		if ($prev.append && !list.$capability.append) {
			$actions.$create = {
				$isHidden: true
			};
		}
		if ($prev.deleteAll && !list.$capability.deleteAll) {
			$actions.$delete = {
				$isHidden: true
			};
		}
		if ($prev.cut && (!list.$capability.copy || !list.$capability.deleteAll)) {
			$actions.$cut = {
				$isHidden: true
			};
		}
		if ($prev.copy && !list.$capability.copy) {
			$actions.$copy = {
				$isHidden: true
			};
		}
		if ($prev.paste && !list.$capability.paste) {
			$actions.$paste = {
				$isHidden: true
			};
		}
		if ($prev["delete"] && !list.$capability["delete"]) {
			$actions.$delete = {
				$isHidden: true
			};
		}
	}
	list.$capability.append && _addAction(list, $actions, "append");
	if (list.$capability.copy) {
		list.$capability.deleteAll && _addAction(list, $actions, "cut");
		_addAction(list, $actions, "copy");
		_addAction(list, $actions, "paste");
	}
	list.$capability.deleteAll && _addAction(list, $actions, "deleteAll");
	if ($actions.$create || $actions.$delete) {
		syra_menus.setMenus(list, {
			$actions: $actions
		});
	}
	if (list.$capability.search) {
		searchCapability.toggle(list, true);
	}
	if ($meta !== undefined) {
		for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
			exports.applyToRecord(list.records[ii], true);
		}
	}
};

exports.initialize = function(list) {
	list.pagging = new PagingCapability(list);
	(list.searchCapability = searchCapability).initialize(list);
};

exports.dispose = function(list) {
	list.pagging && list.pagging.dispose();
	exports.sorter.dispose(list);
	searchCapability.dispose(list);
	list.pagging = list.searchCapability = null;
};