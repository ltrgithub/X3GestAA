"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _loadItem(list, slot) {
	var searcher = list.searcher;
	searcher.domItem = document.createElement("div");
	searcher.domItem.style.display = "none";
	searcher.domItem.className = "s-list-search";
	list.topbar.appendChild(searcher.domItem);
	if (syra_local.flSearch) {
		var label = document.createElement("label");
		label.className = "s-list-search-label";
		searcher.domItem.appendChild(label).textContent = syra_local.flSearch + ":";
	}

	var btn = syra_menus.addIconButton("", "s-list-search-picker", "onSearchClick", null, "search");
	btn.syraValue = "$searchCollapse";
	searcher.domItem.appendChild(btn);

	searcher._fieldSlot = document.createElement("div");
	searcher._fieldSlot.className = "s-list-search-value";
	searcher._fieldSlot.style.display = "none";

	searcher._itemSearchField = list.page.loadNewItem(searcher.domItem.appendChild(searcher._fieldSlot), {
		$bind: "$search",
		$css: "s-list-search-field",
		$category: "field",
		$isEditMode: true,
		$inplace: true,
		$field: {
			$type: "application/x-string",
		}
	}, list);

	var btn = syra_menus.addIconButton("Next", "s-list-search-goto", "onSearchClick", null, "expand_row");
	btn.syraValue = "$searchNext";
	searcher._itemSearchField._dataValue.appendChild(btn);
	btn = syra_menus.addIconButton("Previous", "s-list-search-goto", "onSearchClick", null, "collapse_row");
	btn.syraValue = "$searchPrevious";
	searcher._itemSearchField._dataValue.appendChild(btn);
	list.topbar.appendChild(searcher.domItem);
	if (list.$item.$graphPosition == "front") {
		exports.toggle(list, false);
	}
}

function _onCollapseClick(searcher, picker) {
	if (searcher._fieldSlot) {
		if (searcher._fieldSlot.style.display == "none") {
			searcher._fieldSlot.style.display = "";
			searcher._itemSearchField.focus();
		} else {
			searcher._fieldSlot.style.display = "none";
		}
	}
}

function _getTitleChoice(datasetValue, colProperties) {
	var result = "";
	if (colProperties.$enum) {
		for (var ii = 0; ii < colProperties.$enum.length; ii++) {
			var $item = colProperties.$enum[ii];
			if ($item.$value == datasetValue) {
				result = $item.$title;
				break;
			}
		}
	}
	return result;
}

function _compare(value, datasetValue, colProperties, incrementalSearch) {
	switch (colProperties.$type) {
		case "application/x-date":
		case "application/x-time":
		case "application/x-datetime":
		case "application/x-integer":
		case "application/x-decimal":
		case "application/x-real":
		case "application/x-quantity":
			if (!datasetValue.toLowerCase) {
				datasetValue = new String(datasetValue);
			}
		case "application/x-string":
			if (incrementalSearch)
				return (datasetValue.toLowerCase().indexOf(value.toLowerCase()) == 0);	
			
			return (datasetValue.toLowerCase().indexOf(value.toLowerCase()) != -1);
			break;
		case "application/x-choice":
			if (incrementalSearch)
				return (_getTitleChoice(datasetValue, colProperties).toLowerCase().indexOf(value.toLowerCase()) == 0);

			return (_getTitleChoice(datasetValue, colProperties).toLowerCase().indexOf(value.toLowerCase()) != -1);
			break;
		case "application/x-icon":
			return false;
			break;
		case "application/x-boolean":
			return false;
			break;
	}
	return false;
}

function _startIndexes(list, next) {
	var searcher = list.searcher;
	var startIndex = {
		row: 0,
		col: 0
	};
	var changeLine = false;
	if (searcher.start && searcher.start.$bind) {
		for (var ii = 0; ii < searcher.orderCols.length; ii++) {
			if (searcher.orderCols[ii].$bind == searcher.start.$bind) {
				if (next) {
					startIndex.col = (ii < searcher.orderCols.length - 1 ? ii + 1 : 0);
					changeLine = !startIndex.col;
				} else {
					startIndex.col = (ii == 0 ? searcher.orderCols.length - 1 : ii - 1);
					changeLine = !(startIndex.col == ii - 1);
				}
				searcher.start.$bind = searcher.orderCols[startIndex.col].$bind;
				break;
			}
		}
	}
	if (searcher.start && searcher.start.$uuid != undefined) {
		for (var ii = 0; ii < list.clientDataset.length; ii++) {
			if (list.clientDataset[ii].$uuid == searcher.start.$uuid) {
				if (changeLine && next) {
					startIndex.row = (ii < list.clientDataset.length - 1 ? ii + 1 : ii);
				} else
				if (changeLine && !next) {
					startIndex.row = (ii > 0 ? ii - 1 : ii);
				} else {
					startIndex.row = ii;
				}
				searcher.start.$uuid = list.clientDataset[startIndex.row].$uuid;
				break;
			}
		}
	}
	return startIndex;
}

function _search(list, value, next, notFound, incrementalSearch) {
	var searcher = list.searcher;
	var startIndexes = _startIndexes(list, next);
	var toRow = (next ? list.clientDataset.length : -1);
	var toCol = (next ? searcher.orderCols.length : -1);
	var found, dataset;
	for (var ii = startIndexes.row;
		(next && ii < toRow) || (!next && ii > toRow);
		(next ? ii++ : ii--)) {
		for (var jj = startIndexes.col;
			(next && jj < toCol) || (!next && jj > toCol);
			(next ? jj++ : jj--)) {
			dataset = list.treeDecorator ? list.records[ii].dataset : list.clientDataset[ii];
			if (dataset[searcher.orderCols[jj].$bind] && _compare(value, dataset[searcher.orderCols[jj].$bind], searcher.orderCols[jj], incrementalSearch)) {
				exports.start(list, dataset.$uuid, searcher.orderCols[jj].$bind, dataset.$serverIndex);
				return searcher.start;
			}
		}
		startIndexes.col = next ? 0 : searcher.orderCols.length - 1;
		toCol = next ? searcher.orderCols.length : -1;
	}
	if (!notFound) {
		if (searcher.start && searcher.start.$uuid) {
			searcher.start = {};
		}
		return _search(list, value, next, true, incrementalSearch);
	}
	searcher.start = {};
	return null;
}

function _ensureOrderCols(list) {
	var colProperties = {};
	list.searcher.orderCols = [];
	var orderCols = list.builder.allColumns;
	for (var ii = 0; ii < orderCols.length; ii++) {
		var col = orderCols[ii];
		if (col.key == "$treeview") {
			col = _descriptionCol(list);
		}
		if (!col.$isHidden && col.$bind) {
			colProperties = {};
			colProperties.$bind = col.$bind;
			colProperties.$type = list.$fields[col.$bind].$type;
			if (list.$fields[col.$bind].$value && list.$fields[col.$bind].$value.$enum) {
				colProperties.$enum = list.$fields[col.$bind].$value.$enum;
			}
			list.searcher.orderCols.push(colProperties);
		}
	}
}

function _descriptionCol(list) {
	var $bind = list.$prototype.$treeview.$bindings.$description;
	return {
		"$bind": $bind
	};
}

function _disposeItem(list, clear) {
	if (clear) {
		if (list.searcher._itemSearchField) {
			list.removeItem(list.searcher._itemSearchField);
			delete list.searcher._itemSearchField;
		}
		syra_site.dom.removeChild(list.searcher.domItem);
		list.searcher.domItem = null;
	}
	list.searcher.domItem = list.searcher._itemSearchField = list.searcher._fieldSlot = null;
}

exports.initialize = function(list) {
	list.searcher = {
		start: {}
	};
};
exports.start = function(list, $uuid, $bind, $serverIndex) {
	list.searcher.start = {
		"$uuid": $uuid,
		"$bind": $bind,
		"$serverIndex": $serverIndex
	};
};

exports.incrementalSearch = function(list, event, incrementalSearchValue) {
	if (incrementalSearchValue === "") {
		return {};
	}

	_ensureOrderCols(list);

	return _search(list, incrementalSearchValue, true, null, true);
};

exports.onClick = function(list, $bind, event) {
	switch ($bind) {
		case "$searchCollapse":
			_onCollapseClick(list.searcher, event.target);
			break;
		case "$searchNext":
		case "$searchPrevious":
			var found, value = list.searcher._itemSearchField.getInputValue();
			if (value === "") {
				return false;
			}
			_ensureOrderCols(list);
			if (found = _search(list, value, ($bind == "$searchNext"))) {
				list.page.externalAdapter.onSearchClickEvent({
					field: list,
					found: found,
					event: event,
					doEvent: function() {
						list.setFocus(true, found.$bind, found.$serverIndex);
					}
				});
			}
			break;
	}
};

exports.toggle = function(list, show) {
	if (list.searcher.domItem) {
		list.searcher.domItem.style.display = (show !== false) ? "" : "none";
	}
};

exports.draw = function(list) {
	_disposeItem(list, true);
	if (list.isSearchDisabled !== true && list.$item.$isSearchHidden !== true) {
		_loadItem(list);
	}
};

exports.dispose = function(list) {
	_disposeItem(list);
	list.searcher = null;
};