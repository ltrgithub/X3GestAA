"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _pageSizes = [5, 10, 15, 20, 25, 50, 75, 100, 150, 200, 500];

function Pager() {}

exports.Pager = helpers.defineClass(Pager, null, {
	load: function(list, slot) {
		this.list = list;
		this.pages = [];
		this.domItem = document.createElement("div");
		this.domItem.style.display = "none";
		this.domItem.className = "s-pager";
		slot.appendChild(this.domItem);
		var range = document.createElement("label");
		range.className = "s-pager-range";
		this.domItem.appendChild(range);
		var show;
		if (this.list.clientFetchOptions || this.list.isClientFetch) {
			this.list.pagging.$totalResults = this.list.filler.ensureClientDataset(this.list).length;
		}
		if (!this.list.isClientPagingPerPageDisable && this.list.pagging.$totalResults !== undefined) {
			var itemsPerPage = this.list.pagging.getItemsPerPage();
			this._drawItemsPerPage();
			range.style.display = this.size.style.display = (this.list.designer || (this.list.pagging.$totalResults > _pageSizes[0])) ? "" : "none";
			var pageTotal = Math.ceil(this.list.pagging.$totalResults / itemsPerPage);
			var currentPageIndex = Math.ceil(this.list.pagging.$startIndex / itemsPerPage);
			range.textContent = this.list.page.externalAdapter.getPagerTotalRcdLabel(this.list, this.list.pagging.$totalResults, [syra_local.flPagerTotalRecord, syra_local.flPagerTotalRecords]);
			if (pageTotal > 1) {
				var group = document.createElement("div");
				group.className = "s-pager-nav";
				var page = 0;
				var lastStepPage = pageTotal - 1;
				group.appendChild(this._drawPageLink(++page, currentPageIndex));
				if (currentPageIndex > 5 && pageTotal > 7) {
					if ((currentPageIndex + 5) < pageTotal) {
						page = currentPageIndex - 1;
					} else {
						page = pageTotal - 6;
					}
					group.appendChild(this._drawPageLink(page, currentPageIndex, "..."));
				}
				for (var ii = 0; ii < 5; ii++) {
					if (page == lastStepPage) {
						break;
					}
					page++;
					var btn = this._drawPageLink(page, currentPageIndex);
					group.appendChild(btn);
				}
				if (page < lastStepPage) {
					group.appendChild(this._drawPageLink(page + 1, currentPageIndex, "..."));
				}
				group.appendChild(this._drawPageLink(pageTotal, currentPageIndex));
				this.domItem.appendChild(group);
				show = true;
				if (!this.list.isClientFetch) {
					this.pageSteps = syra_menus.addPagerStepLinks(this.list, group, this.list.page);
				}
			}
		} else {
			if (!this.list.isClientPagingPerPageDisable) {
				this._drawItemsPerPage();
			}
			if (this.list.isServerStepPager !== false || this.list.$prototype.$isFieldPager) {
				this.pageSteps = syra_menus.addPagerStepLinks(this.list, this.domItem, this.list.$prototype.$isFieldPager ? this.list : this.list.page);
			}
		}
		this.toggle(show);
	},
	_drawItemsPerPage: function() {
		if (this.list.pagging.getItemsPerPage()) {
			this.size = document.createElement("div");
			this.size.className = "s-pager-size";
			var label = document.createElement("label");
			label.className = "s-pager-size-label";
			this.size.appendChild(label).textContent = syra_local.flPagerPageSize + ":";
			var div = document.createElement("div");
			div.className = "s-pager-size-value";
			var $enums = [];
			for (var ii = 0, jj = _pageSizes.length; ii < jj; ii++) {
				$enums.push({
					$value: _pageSizes[ii],
					$title: _pageSizes[ii] + ""
				});
			}
			this.itemsPerPageField = this.list.page.loadNewItem(this.size.appendChild(div), {
				$bind: "$itemsPerPage",
				$category: "field",
				$isEditMode: true,
				$isBorderVisible: true,
				$inplace: true,
				$format: "$combo",
				$field: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-string",
						$enum: $enums
					}
				}
			}, this.list);
			this.domItem.appendChild(this.size);
			this.itemsPerPageField.setDataValue(this.list.pagging.getItemsPerPage());
		}
	},
	_drawPageLink: function(value, currentPageIndex, text) {
		this.designBtn = this.pages[value] = syra_menus.addTextButton(text || value || "", "s-pager-link", "onPagerClick");
		this.designBtn.syraPage = value;
		if (value == currentPageIndex) {
			this.designBtn.className += " s-pager-current";
		}
		return this.designBtn;
	},
	toggle: function(show) {
		if (this.domItem) {
			this.domItem.style.display = (show !== false) ? "" : "none";
		}
	},
	clear: function() {
		if (this.itemsPerPageField) {
			this.list.removeItem(this.itemsPerPageField);
			delete this.itemsPerPageField;
		}
		if (this.pageSteps) {
			var $binds = Object.keys(this.pageSteps);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var pager = this.pageSteps[$binds[ii]];
				pager.articleParent && pager.articleParent.removeItem(pager, true, true);
			}
			this.pageSteps = null;
		}
		syra_site.dom.removeChild(this.domItem);
		this.domItem = null;
	},
	dispose: function(clear) {
		clear && this.clear();
		this.size = this.list = this.domItem = this.itemsPerPageField = this.pageSteps = null;
	}
});