"use strict";
var helpers = require('syracuse-core/lib/helpers');

//serverSteps for shortcuts
//pageLinks

var _pageSizes = ["5", "10", "15", "20", "25", "50", "75", "100", "150", "200", "500"];

function Pager() {}

exports.Pager = helpers.defineClass(Pager, null, {
	load: function(list, slot) {
		this.list = list;
		this._pages = [];
		this._serverSteps = [];
		this._item = document.createElement("div");
		this._item.style.display = "none";
		this._item.className = "s-pager";
		slot.appendChild(this._item);
		var localize = this.list.localize;
		var range = document.createElement("label");
		range.className = "s-pager-range";
		this._item.appendChild(range);
		var show;
		if (this.list.isClientFetch) {
			this.list.pagging.$totalResults = this.clientTotalRecords || this.list.dataset.length;
		}
		if (!this.list.isClientPagingPerPageDisable && this.list.pagging.$totalResults) {
			this.list.pagging.ensureItemsPerPage();
			this._drawItemsPerPage();
			var pageTotal = Math.ceil(this.list.pagging.$totalResults / this.list.pagging.$itemsPerPage);
			var currentPageIndex = Math.ceil(this.list.pagging.$startIndex / this.list.pagging.$itemsPerPage);
			if (pageTotal <= 1) {
				range.textContent = this.list.pagging.$totalResults + " " + localize.flPagerTotalRecords;
			} else {
				range.textContent = this.list.pagging.$totalResults + " " + localize.flPagerTotalRecords;
				var group = document.createElement("div");
				group.className = "s-pager-nav";
				var start = 1;
				var numLinkMax = 5;
				if (currentPageIndex > numLinkMax) {
					var reminder = (currentPageIndex % numLinkMax);
					start = (reminder == 0) ? (currentPageIndex - numLinkMax) + 1 : (currentPageIndex - reminder) + 1;
				}

				var end = (start + numLinkMax) - 1;

				end = Math.min(end, pageTotal);

				if (start > 1) {
					group.appendChild(this._drawLink(1));
					group.appendChild(this._drawLink((start - 1), "..."));
				}
				for (var page = start; page <= end; page++) {
					var btn = this._drawLink(page);
					if (page == currentPageIndex) {
						btn.className += " s-pager-current";
					}
					group.appendChild(btn);
				}
				if (end < pageTotal) {
					group.appendChild(this._drawLink(end + 1, "..."));
					group.appendChild(this._drawLink(pageTotal));
				}
				this._item.appendChild(group);
				show = true;
				this._drawServerStep({
					$bind: "$previous",
					$title: "<" + localize.flPagerPrev
				});
				this._drawServerStep({
					$bind: "$next",
					$title: localize.flPagerNext + ">"
				});
			}
		} else {
			this._drawNoTotalResultsPager();
		}
		this._item.style.display = (show !== false) ? "" : "none";
	},
	_drawNoTotalResultsPager: function() {
		this._drawItemsPerPage();
		this._drawServerStep({
			$bind: "$first",
			$title: this.list.localize.flPagerFirst
		});
		this._drawServerStep({
			$bind: "$previous",
			$title: "<" + this.list.localize.flPagerPrev
		});
		this._drawServerStep({
			$bind: "$next",
			$title: this.list.localize.flPagerNext + ">"
		});
		this._drawServerStep({
			$bind: "$last",
			$title: this.list.localize.flPagerLast
		});
	},
	_drawItemsPerPage: function() {
		if (this.list.pagging.$itemsPerPage) {
			var size = document.createElement("div");
			size.className = "s-pager-size";
			var label = document.createElement("label");
			label.className = "s-pager-size-label";
			size.appendChild(label).textContent = this.list.localize.flPagerPageSize + ":";
			var div = document.createElement("div");
			div.className = "s-pager-size-value";
			var $enums = [];
			for (var ii = 0, jj = _pageSizes.length; ii < jj; ii++) {
				$enums.push({
					$value: _pageSizes[ii],
					$title: _pageSizes[ii]
				});
			}
			this._itemsPerPageField = this.list.page.loadNewItem(size.appendChild(div), {
				$bind: "$itemsPerPage",
				$category: "field",
				$isEditMode: true,
				$isBorderVisible: true,
				$inplace: true,
				$format: "$combo",
				$field: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-string",
						$enum: $enums
					}
				}
			}, this.list);
			this._item.appendChild(size);
			this._itemsPerPageField.setDataValue(this.list.pagging.$itemsPerPage);
		}
	},
	_drawLink: function(value, text) {
		var link = document.createElement("a");
		this._pages[value] = link;
		link.className = "s-pager-link";
		link.setAttribute("data-s-page", value);
		link.textContent = text || value || "";
		return link;
	},
	_drawServerStep: function($step) {
		var self = this;
		var div = document.createElement("div");
		div.className = "s-pager-step-link";
		self._item.appendChild(div);
		var step = self.list.page.loadNewItem(div, {
			$category: "link",
			$bind: $step.$bind,
			$title: $step.$title,
			$skin: "s-pager-link"
		}, self.list.$prototype.$isFieldPager ? self.list : self.list.page);
		self._serverSteps.push(step);
		step.onMenuClick = function() {
			var $url = this.$url;
			setTimeout(function() {
				self.list.fetch({}, {
					$url: $url
				});
			}, 100);
			return false;
		};
	},
	toggle: function(show) {
		if (this._item) {
			this._item.style.display = (show !== false) ? "" : "none";
		}
	},
	clear: function() {
		if (this._itemsPerPageField) {
			this.list.removeItem(this._itemsPerPageField);
			delete this._itemsPerPageField;
		}
		if (this._serverSteps) {
			for (var ii = 0, jj = this._serverSteps.length; ii < jj; ii++) {
				var step = this._serverSteps[ii];
				if (this.list.page.$menus) {
					delete this.list.page.$menus[step.$bind];
				}
				step.unbind();
				this.list.page.removeItem(step, true);
			}
		}
		if (this._item) {
			document.site.removeDomChild(this._item);
		}
		this._item = null;
	},
	dispose: function() {
		this.list = this._serverSteps = this._item = this._itemsPerPageField = this._pages = null;
	}
});