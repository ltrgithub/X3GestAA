"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _pageSizes = [5, 10, 15, 20, 25, 50, 75, 100, 150, 200, 500];

function Pager() {}

exports.Pager = helpers.defineClass(Pager, null, {
	load: function(list, slot) {
		this.list = list;
		this.pages = [];
		this._serverSteps = [];
		this.domItem = document.createElement("div");
		this.domItem.style.display = "none";
		this.domItem.className = "s-pager";
		slot.appendChild(this.domItem);
		var localize = this.list.localize;
		var range = document.createElement("label");
		range.className = "s-pager-range";
		this.domItem.appendChild(range);
		var show;
		if (this.list.clientFetchOptions || this.list.isClientFetch) {
			this.list.pagging.$totalResults = this.list.ensureClientDataset().length;
		}
		if (!this.list.isClientPagingPerPageDisable && this.list.pagging.$totalResults !== undefined) {
			var itemsPerPage = this.list.pagging.getItemsPerPage();
			this._drawItemsPerPage();
			range.style.display = this.size.style.display = (this.list.designer || (this.list.pagging.$totalResults > _pageSizes[0])) ? "" : "none";
			var pageTotal = Math.ceil(this.list.pagging.$totalResults / itemsPerPage);
			var currentPageIndex = Math.ceil(this.list.pagging.$startIndex / itemsPerPage);
			range.textContent = this.list.page.externalAdapter.getPagerTotalRcdLabel(this.list, this.list.pagging.$totalResults, [localize.flPagerTotalRecord, localize.flPagerTotalRecords]);
			if (pageTotal > 1) {
				var group = document.createElement("div");
				group.className = "s-pager-nav";
				var page = 0;
				var lastStepPage = pageTotal - 1;
				group.appendChild(this._drawPageLink(++page, currentPageIndex));
				if (currentPageIndex > 5 && pageTotal > 7) {
					if ((currentPageIndex + 5) < pageTotal) {
						page = currentPageIndex - 1;
					} else {
						page = pageTotal - 6;
					}
					group.appendChild(this._drawPageLink(page, currentPageIndex, "..."));
				}
				for (var ii = 0; ii < 5; ii++) {
					if (page == lastStepPage) {
						break;
					}
					page++;
					var btn = this._drawPageLink(page, currentPageIndex);
					group.appendChild(btn);
				}
				if (page < lastStepPage) {
					group.appendChild(this._drawPageLink(page + 1, currentPageIndex, "..."));
				}
				group.appendChild(this._drawPageLink(pageTotal, currentPageIndex));
				this.domItem.appendChild(group);
				show = true;
				if (!this.list.isClientFetch) {
					this._drawServerStep({
						$bind: "$first",
						$title: this.list.localize.flPagerFirst
					});
					this._drawServerStep({
						$bind: "$previous",
						$title: localize.flPagerPrev
					});
					this._drawServerStep({
						$bind: "$next",
						$title: localize.flPagerNext
					});
					this._drawServerStep({
						$bind: "$last",
						$title: this.list.localize.flPagerLast
					});
				}
			}
		} else {
			if (!this.list.isClientPagingPerPageDisable) {
				this._drawItemsPerPage();
			}
			if (this.list.isServerStepPager !== false || this.list.$prototype.$isFieldPager) {
				this._drawServerStep({
					$bind: "$first",
					$title: this.list.localize.flPagerFirst
				});
				this._drawServerStep({
					$bind: "$previous",
					$title: this.list.localize.flPagerPrev
				});
				this._drawServerStep({
					$bind: "$next",
					$title: this.list.localize.flPagerNext
				});
				this._drawServerStep({
					$bind: "$last",
					$title: this.list.localize.flPagerLast
				});
			}
		}
		this.toggle(show);
	},
	_drawItemsPerPage: function() {
		if (this.list.pagging.getItemsPerPage()) {
			this.size = document.createElement("div");
			this.size.className = "s-pager-size";
			var label = document.createElement("label");
			label.className = "s-pager-size-label";
			this.size.appendChild(label).textContent = this.list.localize.flPagerPageSize + ":";
			var div = document.createElement("div");
			div.className = "s-pager-size-value";
			var $enums = [];
			for (var ii = 0, jj = _pageSizes.length; ii < jj; ii++) {
				$enums.push({
					$value: _pageSizes[ii],
					$title: _pageSizes[ii] + ""
				});
			}
			this.itemsPerPageField = this.list.page.loadNewItem(this.size.appendChild(div), {
				$bind: "$itemsPerPage",
				$category: "field",
				$isEditMode: true,
				$isBorderVisible: true,
				$inplace: true,
				$format: "$combo",
				$syraIsDesignEnable: true,
				$field: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-string",
						$enum: $enums
					}
				}
			}, this.list);
			this.domItem.appendChild(this.size);
			this.itemsPerPageField.setDataValue(this.list.pagging.getItemsPerPage());
		}
	},
	_drawPageLink: function(value, currentPageIndex, text) {
		var link = document.createElement("a");
		this.pages[value] = link;
		link.className = "s-pager-link";
		link.setAttribute("data-s-picker", "list-page");
		link.syraPage = value;
		link.textContent = text || value || "";
		if (value == currentPageIndex) {
			link.className += " s-pager-current";
		}
		return link;
	},
	//"s-direction-" + title 
	_drawServerStep: function($step) {
		var self = this;
		var div = document.createElement("div");
		div.className = "s-pager-step-link";
		self.domItem.appendChild(div);
		var step = self.list.page.loadNewItem(div, {
			$icon: {
				$mode: "icon",
				$path: "list/s-list-"
			},
			$category: "link",
			$bind: $step.$bind,
			$title: $step.$title,
			$skin: "s-pager-link"
		}, self.list.$prototype.$isFieldPager ? self.list : self.list.page);
		self._serverSteps.push(step);
		step.onMenuClick = function() {
			var $url = this.$url;
			if (self.list) {
				self.list.triggerFetch(null, {
					$url: $url
				});
			}
			return false;
		};
	},
	toggle: function(show) {
		if (this.domItem) {
			this.domItem.style.display = (show !== false) ? "" : "none";
		}
	},
	clear: function() {
		if (this.itemsPerPageField) {
			this.list.removeItem(this.itemsPerPageField);
			delete this.itemsPerPageField;
		}
		if (this._serverSteps) {
			for (var ii = 0, jj = this._serverSteps.length; ii < jj; ii++) {
				var step = this._serverSteps[ii];
				if (this.list.page.$menus) {
					delete this.list.page.$menus[step.$bind];
				}
				step.unbind();
				this.list.page.removeItem(step, true);
			}
		}
		if (this.domItem) {
			document.site.removeDomChild(this.domItem);
		}
		this.domItem = null;
	},
	dispose: function() {
		this.size = this.list = this._serverSteps = this.domItem = this.itemsPerPageField = this.pages = null;
	}
});