"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;
var CardDesigner = require("syracuse-ui/lib/field/array/designer/cardDesigner").CardDesigner;

var _style = (function() {
	var map = {
		xy: "line",
		point: "scatter",
		stick: "column",
		radar: "spiderweb"
	};

	return function($style) {
		return $style && (map[$style] || $style);
	};
})();

function ListDesigner() {}

exports.ListDesigner = helpers.defineClass(ListDesigner, Designer, {
	closeDesigner: function() {
		this.designedArticle.designArticle(false);
	},
	registerChildArticle: function() {
		if (this.designedArticle) {
			this.designedArticle.childArticles[this.id] = this;
		}
	},
	unregisterChildArticle: function() {
		if (this.designedArticle && this.designedArticle.childArticles) {
			delete this.designedArticle.childArticles[this.id];
		}
	},
	loadBox: function(designedPage) {
		this.$prototype = {
			$properties: {
				$cardPosition: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "row",
							$title: this.localize.lw_cardPositionRow
						}, {
							$value: "top",
							$title: this.localize.lw_cardPositionTop
						}, {
							$value: "left",
							$title: this.localize.lw_cardPositionLeft
						}, {
							$value: "right",
							$title: this.localize.lw_cardPositionRight
						}, {
							$value: "bottom",
							$title: this.localize.lw_cardPositionBottom
						}]
					}
				},
				$graphPosition: {
					$type: "application/x-choice",
					$isHidden: this.designedArticle.$prototype.$cube ? false : true,
					$title: this.localize.lw_graphPosition,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "top",
							$title: this.localize.lw_graphPositionTop
						}, {
							$value: "left",
							$title: this.localize.lw_graphPositionLeft
						}, {
							$value: "right",
							$title: this.localize.lw_graphPositionRight
						}, {
							$value: "bottom",
							$title: this.localize.lw_graphPositionBottom
						}, {
							$value: "front",
							$title: this.localize.lw_graphPositionFront
						}, {
							$value: "behind",
							$title: this.localize.lw_graphPositionBehind
						}]
					}
				}
			}
		};
		this.$item = {
			$layout: {
				$items: []
			}
		};
		Designer.prototype.loadBox.call(this);
		this.applyListDesignMetaData();
	},
	drawBox: function() {
		this.layoutSlot = document.createElement("aside");
		this.layoutSlot.className = "s-aw-list";
		this.designedArticle._core.parentNode.insertBefore(this.layoutSlot, this.designedArticle._core);
		this.layoutSlot.style.display = "";
		this.addClosePicker(this.layoutSlot);
		this.$$item = $(this.body = this.layoutSlot);
		this.settingsSlot = document.createElement("div");
		this.settingsSlot.className = "s-aw-list-body";
		this.layoutSlot.appendChild(this.settingsSlot);

		this.designedItem = this.designedArticle;
		this.loadHistoryTool();
		this.loadTemplateTools();

		this.appendGroupModes();

		if (this.designedArticle.hasGraph()) {
			this.loadGraphDesigner();
		}
		this.getDesignedCardItem(); //ensuser one carditem is opened
		document.site.resize();
	},
	designCardItem: function(open, cardItem) {
		if (open) {
			this.cardDesigner = cardItem.designer = new CardDesigner();
			cardItem.designer.openDesigner(cardItem);
			cardItem.designer.resizeArticle();
		} else {
			if (cardItem.designer) {
				cardItem.designer.dispose();
			}
			cardItem.designer = null;
			document.site.resize();
		}
	},
	endArticleUpdate: function() {
		var record = this.getDesignedCardItem();
		if (record && record.layoutContent) {
			this.designedArticle.page.ensurePageVisibility();
		}
		this.historyTool.notifyUpdate();
		this.designedArticle.resizeArticle();
		this.saveDesign();
	},
	saveDesign: function() {
		this.designedArticle.page.savePageDesign();
	},
	applyListDesignMetaData: function() {
		var delta = {
			$format: this.designedArticle.$item.$format || "grid",
			$graphPosition: this.designedArticle.$item.$graphPosition || "bottom"
		};
		if (this.designedArticle.$item.$cardItem) {
			delta.$cardPosition = this.designedArticle.$item.$cardItem.$position || "bottom";
		} else {
			delta.$cardPosition = "no";
		}
		this.applyChange(delta);
	},
	onChangeMode: function(newMode) {
		var designer = this;
		var metaData = {};
		switch (newMode) {
			case "cards":
				metaData.$format = "cards";
				break;
			case "grid":
				metaData.$format = "grid";
				metaData.$cardPosition = "no";
				break;
			case "detailgrid":
				metaData.$format = "grid";
				metaData.$cardPosition = this.dataset.$cardPosition || "no";
				if (metaData.$cardPosition == "no") {
					var $designing = this.designedArticle.$designing;
					if ($designing && $designing.grid && $designing.grid.$cardItem) {
						metaData.$cardPosition = $designing.grid.$cardItem.$position || "no";
					}
					if (metaData.$cardPosition == "no") {
						metaData.$cardPosition = "bottom";
					}
				}
				break;
		}
		var list = designer.designedArticle;
		list.$designing = list.$designing || {};
		if (list.$item.$format == "grid") {
			list.$designing.grid = list.$designing.grid || {};
			list.$designing.grid.$layout = helpers.object.clone(list.$item.$layout, true);
			if (list.$item.$cardItem) {
				list.$designing.grid.$cardItem = helpers.object.clone(list.$item.$cardItem, true);
			}
		} else {
			list.$designing.cards = {
				$layout: helpers.object.clone(list.$item.$layout, true)
			};
		}
		if (metaData.$format !== undefined && metaData.$format != list.$item.$format) {
			delete list.$item.$cardItem;
			delete list.$item.$layout;
			list.$item.$format = metaData.$format;
			var newList = list.reloadLayout();
			designer = newList.designer;
		}

		designer.designedArticle.applyDesignMetaData(metaData, true);
		designer.endArticleUpdate();
		designer.applyChange(metaData);
	},
	onClickPicker: function(picker) {
		if (picker.syraPickerType) {
			switch (picker.syraPickerType) {
				case "list-page":
					this.designedArticle.pagging.onPageClick(picker);
					this.setSwitchPagerLinksTitle();
					break;
				case "designMode":
					this.onChangeMode(picker.syraMode);
					return false;
				case "designCard":
					this.designCardItem(true, this.getDesignedCardItem());
					return false;
				case "designGridCard":
					this.designCardItem(true, this.getDesignedCardItem());
					return false;
				case "$colcount":
					this.designedArticle.applyDesignMetaData({
						$cardsByRowCount: picker.$syraColCount
					}, true);
					this.templatesTool.selectColChoice(this.sectionCards, this.designedArticle, picker.$syraColCount);
					this.endArticleUpdate();
					return false;


			}
			return Designer.prototype.onClickPicker.call(this, picker);
		}
		return true;
	},

	getDesignedCardItem: function() {
		var cardItem, record = this.designedArticle.records[0];
		if (this.designedArticle.$item.$format == "grid") {
			if (this.designedArticle.$item.$cardItem) {
				if (this.designedArticle.cardDecorator.isRowCardMode) {
					this.designedArticle.cardDecorator.toggleRowCard(record, true);
					cardItem = record;
				} else {
					for (var ii = 0, jj = this.designedArticle.records.length; ii < jj; ii++) {
						record = this.designedArticle.records[ii];
						if (record.cardItem) {
							cardItem = record.cardItem;
							break;
						}
					}
				}
			}
		} else {
			cardItem = record.cardItem;
		}
		return cardItem;
	},
	addDesignLink: function(pickerId, $title) {
		var link = document.createElement("a");
		link.setAttribute("data-s-picker", link.syraPickerType = pickerId);
		link.title = link.textContent = $title;
		link.className = "s-aw-list-design-card-picker";
		return link;
	},
	addSwitchPagerLink: function(slot) {
		if (this.designedArticle.isClientFetch) {
			var link = document.createElement("a");
			link.setAttribute("data-s-picker", link.syraPickerType = "list-page");
			link.syraIsDesignEnable = link.syraIsDesign = true;
			link.className = "s-aw-list-pager-picker";
			slot.appendChild(link);
			(this.switchPagerLinks = this.switchPagerLinks || []).push(link);
		}
	},
	setSwitchPagerLinksTitle: function() {
		if (this.switchPagerLinks) {
			var title = this.designedArticle.$item.$isPagerHidden ? this.localize.lw_showPager : this.localize.lw_hidePager;
			for (var ii = 0, jj = this.switchPagerLinks.length; ii < jj; ii++) {
				this.switchPagerLinks[ii].title = this.switchPagerLinks[ii].textContent = title;
			}
			this.designedArticle.pagging.draw(true);
		}
	},
	appendGroupModes: function() {
		this.modes = {};
		var table = document.createElement("div");
		table.className = "s-aw-list-slot";
		if (!this.designedArticle.page.isVignettePage && !this.designedArticle.page.designer) {
			table.style.display = "none";
		}
		var title = document.createElement("div");
		title.className = "s-aw-list-title";
		title.textContent = this.localize.lw_presentation;
		var slot = document.createElement("div");
		slot.className = "s-aw-list-modes";
		var modesBody = document.createElement("div");
		modesBody.className = "s-aw-list-modes-body";
		slot.appendChild(title);
		slot.appendChild(modesBody);
		table.appendChild(slot);

		var modeTypes = ["cards", "grid", "detailgrid"];
		for (var ii = 0, jj = modeTypes.length; ii < jj; ii++) {
			var modeType = modeTypes[ii];
			var mode = {
				modeType: modeType,
				link: document.createElement("a"),
				box: document.createElement("div")
			};
			mode.box.className = "s-aw-list-mode";
			var title = document.createElement("div");
			title.className = "s-aw-list-title";
			title.textContent = this.localize["lw_mode_" + modeType + "_title"];
			mode.box.appendChild(title);
			var body = document.createElement("div");
			body.className = "s-aw-list-mode-body";
			mode.box.appendChild(body);
			mode.link.title = this.localize["lw_mode_" + modeType];
			mode.link.className = "s-aw-list-mode-" + modeType;
			mode.link.setAttribute("data-s-picker", mode.link.syraPickerType = "designMode");
			mode.link.syraMode = modeType;
			modesBody.appendChild(mode.link);
			this.modes[modeType] = mode;
			table.appendChild(mode.box);
			switch (modeType) {
				case "grid":
					this.addSwitchPagerLink(body);
					break;
				case "cards":
					var slot = document.createElement("div");
					slot.className = "s-aw-list-card-position";
					this.sectionCards = {
						body: body.appendChild(slot)
					};
					this.templatesTool.addColsCountLinks(this.sectionCards, this.designedItem, this.designedArticle.$cardsByRowCount || 1, 6);
					body.appendChild(this.addDesignLink("designCard", this.localize.lw_designCard));
					this.addSwitchPagerLink(body);
					break;
				case "detailgrid":
					var slot = document.createElement("div");
					slot.className = "s-aw-list-card-position";
					this.loadNewItem(body.appendChild(slot), {
						$bind: "$cardPosition",
						$choiceLayout: "row",
						$isTopLabelAlignment: false,
						$format: "$button",
						$icon: {
							$path: "authoring/s-aw-grid-card-"
						},
						$isEditMode: true,
						$css: "s-aw-prop"
					});
					body.appendChild(this.addDesignLink("designGridCard", this.localize.lw_designDetailView));
					this.addSwitchPagerLink(body);
					break;
			}
		}
		this.setSwitchPagerLinksTitle();
		this.settingsSlot.appendChild(table);
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$format) {
				var isSelectedBoxeHidden;
				var delta = newData.$properties = newData.$properties || {};
				var selectedMode = newData.$format;
				if (newData.$format == "grid") {
					if (newData.$cardPosition != "no") {
						selectedMode = "detailgrid";
					} else {
						isSelectedBoxeHidden = !this.switchPagerLinks;
					}
				}
				var types = Object.keys(this.modes);
				for (var ii = 0, jj = types.length; ii < jj; ii++) {
					var mode = this.modes[types[ii]];
					var isSelected = types[ii] == selectedMode;
					document.site.toggleClass(mode.link, "s-selected", isSelected);
					mode.box.style.display = (isSelected && !isSelectedBoxeHidden) ? "" : "none";
				}
			}
			if (this.graph) {
				var keys = Object.keys(newData);
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					var $bind = keys[ii];
					if (this.graph.styleFields[$bind]) {
						this.graph.colorFields[$bind].domItem.style.visibility = newData[$bind] == "pie" ? "hidden" : "";
					}
				}
			}
		}
		Designer.prototype.applyChange.call(this, newData);
	},
	onNotifyDataChange: function(field, value) {
		var metaData = {};
		var $bind = field.$item.$bind;
		metaData[$bind] = value;
		if (field.$item.$measure) {
			var $cube = this.designedArticle.$item.$cube || {};
			$cube.$measures = $cube.$measures || {};
			($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {})[field.$item.$axisOption] = value;
			this.designedArticle.applyDesignMetaData({
				$cube: $cube
			}, true);
		} else {
			if (metaData.$cardPosition !== undefined) {
				if (!(metaData.$cardPosition == "no" || metaData.$cardPosition == "row")) {
					if (this.designedArticle.$item.$graphPosition == "front" || this.designedArticle.$item.$graphPosition == "behind") {
						metaData.$graphPosition = "bottom";
					}
				}
			}
			this.designedArticle.applyDesignMetaData(metaData, true);
			var record = this.getDesignedCardItem();
			if (record && record.designer) {
				record.designer.toggleUIDesign(record, true);
			}
		}
		this.endArticleUpdate();
		this.applyChange(metaData);
		return false;
	},
	onEndHistoryChangeStep: function() {
		this.applyListDesignMetaData();
	},
	resizeArticle: function() {
		if (this.cardDesigner) {
			this.cardDesigner.resizeArticle();
		}
	},
	loadGraphDesigner: function() {
		this.graph = {
			styleFields: {},
			colorFields: {},
			defaultStyle: "column",
			defaultColor: "#409f8b",
			styles: ["area", "areaspline", "column", "line", "scatter", "spline", "pie", "bar"],
			colors: [{
				$value: "#007f64",
				$title: "green"
			}, {
				$value: "#34b233",
				$title: "brightgreen"
			}, {
				$value: "#4d4f53",
				$title: "darkgrey"
			}, {
				$value: "#9a9b9c",
				$title: "midgray"
			}, {
				$value: "#ff5800",
				$title: "orange"
			}, {
				$value: "#009fda",
				$title: "blue"
			}, {
				$value: "#6639b7",
				$title: "purple"
			}, {
				$value: "#409f8b",
				$title: "1"
			}, {
				$value: "#67c566",
				$title: "2"
			}, {
				$value: "#7a7b7e",
				$title: "3"
			}, {
				$value: "#b3b4b5",
				$title: "4"
			}, {
				$value: "#ff8240",
				$title: "5"
			}, {
				$value: "#40b7e3",
				$title: "6"
			}, {
				$value: "#8c6bc9",
				$title: "7"
			}]
		};
		var table = document.createElement("div");
		table.className = "s-aw-graph";
		var slot = document.createElement("div");
		slot.className = "s-aw-graph-pos";
		var title = document.createElement("div");
		title.className = "s-aw-graph-title";
		title.textContent = this.localize.lw_graphPosition;
		slot.appendChild(title);
		this.loadNewItem(slot, {
			$bind: "$graphPosition",
			$isTitleHidden: true,
			$contentEditable: true,
			$isTopLabelAlignment: false,
			$css: "s-aw-prop",
			$isEditMode: true,
			$format: "$combo"
		});
		table.appendChild(slot);

		slot = document.createElement("div");
		slot.className = "s-aw-graph-measures";
		table.appendChild(slot);
		/*title = document.createElement("div");
         title.className = "s-aw-graph-title";
         title.textContent = this.localize.lw_graphAxis;
         slot.appendChild(title);*/
		var measures = document.createElement("div");
		measures.className = "s-aw-graph-measures-list";
		var delta = {};
		var binds = Object.keys(this.designedArticle.$prototype.$cube.$measures);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			this.appendMeasure(binds[ii], delta, measures);
		}
		slot.appendChild(measures);
		this.settingsSlot.appendChild(table);

		this.applyChange(delta);

	},
	appendMeasure: function(bind, delta, body) {
		var chart = this.designedArticle.chart;
		var $itemMeasures = (this.designedArticle.$item.$cube && this.designedArticle.$item.$cube.$measures) || {};
		//var $measure = this.designedArticle.$prototype.$cube.$measures[bind];
		var serie = chart._meta.series[bind];

		var slot = document.createElement("div");
		slot.className = "s-aw-graph-meassure";
		var title = document.createElement("div");
		title.textContent = serie.measure.$title ? this.designedArticle.page.getLocalizeText(serie.measure.$title) : "";
		title.className = "s-aw-graph-meassure-title";
		slot.appendChild(title);

		var $enum = [];
		for (var mm = 0, kk = this.graph.styles.length; mm < kk; mm++) {
			$enum.push({
				$value: this.graph.styles[mm],
				$title: this.localize[this.graph.styles[mm]] || this.graph.styles[mm]
			});
		}
		this.$prototype.$properties["$cube" + bind] = {
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",
				$enum: $enum
			}
		};

		this.$prototype.$properties["$cube-color-" + bind] = {
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",
				$enum: helpers.object.clone(this.graph.colors, true)
			}
		};

		var cell = document.createElement("div");
		cell.className = "s-aw-graph-meassure-item";
		slot.appendChild(cell);
		this.graph.styleFields["$cube" + bind] = this.loadNewItem(cell, {
			$category: "field",
			$isTitleHidden: true,
			$bind: "$cube" + bind,
			$measure: bind,
			$axisOption: "$style",
			$isTopLabelAlignment: false,
			$icon: {
				$inputMode: "icon",
				$mode: "icon",
				$path: "graphics/s-graph-"
			},
			$choiceLayout: "3",
			$isEditMode: true,
			$css: "s-aw-prop"
		});
		var $style, $color;
		if ($itemMeasures[bind]) {
			$style = $itemMeasures[bind].$style;
			$color = $itemMeasures[bind].$color;
		}
		delta["$cube" + bind] = _style($style || serie.measure.$style || this.graph.defaultStyle);
		delta["$cube-color-" + bind] = $color || serie.measure.$color || this.graph.defaultColor;

		var cell = document.createElement("div");
		cell.className = "s-aw-graph-meassure-item";
		slot.appendChild(cell);
		this.graph.colorFields["$cube" + bind] = this.loadNewItem(cell, {
			$category: "field",
			$isTitleHidden: true,
			$bind: "$cube-color-" + bind,
			$measure: bind,
			$axisOption: "$color",
			$isTopLabelAlignment: false,
			$cssMode: {
				$inputMode: "css",
				$css: "s-graph-color",
				$isColor: true
			},
			$choiceLayout: "2",
			$isEditMode: true,
			$css: "s-aw-prop"
		});
		body.appendChild(slot);
	},
	dispose: function() {
		var pagging = this.designedArticle && this.designedArticle.pagging;
		this.graph = this.cardDesigner = this.switchPagerLinks = this.modes = null;
		document.site.removeDomChild(this.layoutSlot);
		Designer.prototype.dispose.call(this);
		if (pagging) {
			pagging.draw();
		}
	}
});