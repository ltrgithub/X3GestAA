"use strict";
var helpers = require('syracuse-core/lib/helpers');
var PagingCapability = require("./pagingCapability").PagingCapability;
var ReorderCapability = require('./reorderCapability').ReorderCapability;
var SortCapability = require("./sortCapability").SortCapability;
var FilterCapability = require("./filterCapability").FilterCapability;

var _recordSelectors = {
    multi: require('./selector/multiRecordSelector').MultiRecordSelector,
    single: require('./selector/singleRecordSelector').SingleRecordSelector,
    button: require('./selector/buttonRecordSelector').ButtonRecordSelector,
    row: require('./selector/rowRecordSelector').RowRecordSelector
};

function RecordStore(list){
    this.list = list;
    this._isAddDisabled = false;
}

exports.RecordStore = helpers.defineClass(RecordStore, null, {
    load: function(){
        this._records = [];
        this._map = {};
        this.sortCapability = new SortCapability(this.list);
        this.pagingCapability = new PagingCapability(this.list);
        this.filterCapability = new FilterCapability(this.list);
    },
    hasRecords: function(){
        return this._records && this._records.length > 0;
    },
    applySettings: function(newData){
        this.pagingCapability.setOptions(newData);
        this.sortCapability.setOrderBy(newData.$orderBy, newData.$startLetter);
        this.filterCapability.setWhere(newData.$where);
    },
    loadSelector: function(){
        if (this.selector) {
            document.controller.disposeObject(this.selector);
        }
        var selectorClass = _recordSelectors[this.list.$item.$selectMode];
        if (selectorClass) {
            (this.selector = new selectorClass()).load(this.list);
        }
        else {
            this.selector = {};
        }
    },
    findRecord: function($$selector){
        var $uuid = this.findRecordUiid($$selector)
        return this._map[$uuid];
    },
    findRecordUiid: function($$selector){
        return ($$selector.is("[data-s-record]") ? $$selector : $$selector.closest("[data-s-record]")).attr("data-s-record");
    },
    removeRecords: function(addEmptySlot, redraw){
        var self = this;
        self._records.forEach(function(recordArticle){
            delete self._map[recordArticle.$uuid];
            self.list.removeItem(recordArticle);
        });
        self._map = {};
        self._records = [];
        if (self.selector && self.selector.clear) {
            self.selector.clear();
        }
        self.list.builder.emptyBody(addEmptySlot, redraw);
    },
    setState: function(state){
        if (this._records.length > 0) {
            if (state.$isReadOnly !== undefined || state.$isDisabled != undefined) {
                var metaData = {
                    $isReadOnly: state.$isReadOnly,
                    $isDisabled: state.$isDisabled
                };
                this._records.forEach(function(record, index){
                    state.$isDisabled
                    record.applyMetaData(metaData);
                });
                if (this.list.$capability && state.$isDisabled !== undefined) {
                    this._records.forEach(function(record, index){
                        record.setState(state);
                    });
                }
            }
        }
    },
    setSortCapability: function(){
        this.sortCapability.load();
    },
    setReorderCapability: function(reorder){
        if (reorder) {
            this.list.$item.$isRowIndexVisible = true;
            if (!this.reorderCapability) {
                (this.reorderCapability = new ReorderCapability(this.list)).setDraggable();
            }
        }
        else {
            if (this.reorderCapability) {
                document.controller.disposeObject(this.reorderCapability);
                delete this.reorderCapability;
            }
        }
    },
    _getSendBag: function(){
        return this.list.getPage().ensureSendBag(this.list);
    },
    onReorder: function(sourceRecord, targetRecord, $insert){
        var listDataSet = this.list.ensureDataRecords();
        var dataRecord = listDataSet[sourceRecord.$recordIndex];
        listDataSet.splice(sourceRecord.$recordIndex, 1);
        this._records.splice(sourceRecord.$recordIndex, 1);
        if (targetRecord.$recordIndex > sourceRecord.$recordIndex) {
            sourceRecord.$recordIndex = ($insert == "insertAfter") ? targetRecord.$recordIndex : (targetRecord.$recordIndex - 2);
        }
        else {
            sourceRecord.$recordIndex = ($insert == "insertAfter") ? targetRecord.$recordIndex + 1 : (targetRecord.$recordIndex);
        }
        sourceRecord.$recordIndex = Math.max(sourceRecord.$recordIndex, 0);
        listDataSet.splice(sourceRecord.$recordIndex, 0, dataRecord);
        this._records.splice(sourceRecord.$recordIndex, 0, sourceRecord);
        sourceRecord.notifyReorder(targetRecord, $insert);
        this._ensureRecordsIndex();
        
        var sendBag = this._getSendBag();
        if (this.list.builder.isSingleBuilder) {
            sendBag.dataRecords = listDataSet;
        }
        else {
            sendBag.reorderRecord(sourceRecord, targetRecord);
        }
        this.list._notifyChangeToParent(sendBag.dataRecords);
    },
    sort: function(arr, criteria, p){
        this.sortCapability.sort(arr, criteria, p);
    },
    appendRecord: function(options){
        var builder = this.list.builder;
        if (builder.isFusionTemp && options.isInsert) {
            options.$recordIndex = -options.$recordIndex - 1;
        }
        if (builder.isSingleBuilder) {
            options.dataRecord = {
                $singleField: options.dataRecord
            };
            options.$prototype = {
                $properties: {
                    $singleField: this.list.$prototype.$item
                }
            };
        }
        options.dataRecord.$uuid = options.dataRecord.$uuid || options.$recordIndex;
        var record = (this._map[options.dataRecord.$uuid] = new builder.RecordClass());
        record.arrayLevel = "record";
        record.$layoutOptions = builder.$layoutOptions;
        record.$uuid = options.dataRecord.$uuid;
        record.$recordIndex = options.$recordIndex;
        record.$facet = this.list.$recordFacet;
        record.$isEditMode = this.list.$isEditMode;
        record.builder = (record.list = this.list).builder;
        record.$prototype = options.$prototype || this.list.$prototype.$item;
        record.isInsert = options.isInsert;
        if (record.initializeRecord) {
            record.initializeRecord(options);
        }
        document.itemFactory.initializeItem(record, options.$item || {}, this.list);
        record.loadBox(options.dataRecord);
        if (options.isInsert) {
            this._records.splice(options.$recordIndex, 0, record);
        }
        else {
            this._records.push(record);
        }
        return record;
    },
    notifyDeleteRecord: function(record){
        var sendBag = this._getSendBag();
        var dataRecords = this.list.ensureDataRecords();
        if (record) {
            this._records.splice(record.$recordIndex, 1);
            if (this.list.builder.isSingleBuilder) {
				dataRecords.splice(record.$recordIndex, 1);
                sendBag.dataRecords = dataRecords;
            }
            else {
                var found = this.list.findDataRecord(record.$uuid);
                if (found) {
                    dataRecords.splice(found.$index, 1);
					record.$index = found.$index;
                }
                sendBag.deleteRecord(record);
                delete record.$index;
            }
            this.list.removeItem(record, true);
        }
        else {
            dataRecords.splice(0, dataRecords.length);
            sendBag.dataRecords = [];
            this.removeRecords();
        }
        this._ensureRecordsIndex();
        this.list._notifyChangeToParent(sendBag.dataRecords);
    },
    notifySelectRecords: function(selectedRecords){
        if (selectedRecords) {
            var self = this;
            var sendBag = self._getSendBag();
            var dataRecords = self.list.ensureDataRecords();
            if (self.list.builder.isSingleBuilder) {
                sendBag.dataRecords = dataRecords;
                Object.keys(selectedRecords).forEach(function($uuid){
                    var options = {
                        dataRecord: selectedRecords[$uuid].dataset,
                        $recordIndex: self._records.length
                    };
                    if (self.list.$prototype.$item.$type == "application/x-choice") {
                        options.dataRecord = options.dataRecord.$uuid;
                    }
                    dataRecords.push(options.dataRecord);
                    self.appendRecord(options);
                });
            }
            self._ensureRecordsIndex();
            self.list._notifyChangeToParent(sendBag.dataRecords);
        }
    },
    notifyCreateRecord: function(record){
        var sendBag = this._getSendBag();
        var dataRecords = this.list.ensureDataRecords();
        var options = {};
        if (record) {
            options.$recordIndex = record.$recordIndex;
            options.isInsert = true;
        }
        else {
            options.$recordIndex = this._records.length;
        }
        if (this.list.builder.isSingleBuilder) {
            (sendBag.dataRecords = dataRecords).splice(options.$recordIndex, 0, null);
            this.appendRecord(options);
            this._ensureRecordsIndex();
        }
        else {
            options.dataRecord = {
                $uuid: document.controller.generateUUID()
            };
            if (record) {
                var found = this.list.findDataRecord(record.$uuid);
                dataRecords.splice(found.$index, 0, options.dataRecord);
            }
            else {
                dataRecords.push(options.dataRecord);
            }
            var newRecord = this.appendRecord(options);
            sendBag.createRecord(newRecord, options.$recordIndex);
            this._ensureRecordsIndex();
            this.list._notifyChangeToParent(sendBag.dataRecords);
        }
    },
    notifyRecordChange: function(record, $bind, value, isNotifyOnly){
        if (!record.$isDisabled && !record.$isDeleted) {
            if ($bind == "$actions" && (value.$delete || value.$create)) {
                if (value.$delete) {
                    this.notifyDeleteRecord(record);
                }
                if (value.$create) {
                    this.notifyCreateRecord(record);
                }
            }
            else {
                var sendBag = this._getSendBag();
                var dataRecords = this.list.ensureDataRecords();
                if (this.list.builder.isSingleBuilder) {
                    (sendBag.dataRecords = dataRecords)[record.$recordIndex] = value;
                }
                else {
                    if (!isNotifyOnly) {
                        //used for hack cristi on select in list
                        var found = this.list.findDataRecord(record.$uuid);
                        dataRecords[found.$index][$bind] = value;
                    }
                    sendBag.saveRecordChange(record, $bind, value);
                }
                this.list._notifyChangeToParent(sendBag.dataRecords, isNotifyOnly);
            }
        }
    },
    _ensureRecordsIndex: function(){
        var self = this;
        self._records.forEach(function(record, index){
            record.dataset.$index = record.$recordIndex = index;
            record.renderRowIndex();
        });
        self.checkMaxItems();
    },
    doSelectAction: function(){
        var self = this;
        if (self.list.$prototype.$item.$type == "application/x-choice") {
            self.list.builder.loadChoiceSelector();
        }
        else {
            self.list.currentSelectRecords = null;
            self.list.boxParent.openDialog({
                article: self.list,
                $url: self.list.menuItems.$select[0].$url,
                onValidate: function(){
                    self.notifySelectRecords(self.list.currentSelectRecords);
                },
                onSelectRecord: function(selectedRecords){
                    self.list.currentSelectRecords = selectedRecords;
                    return false;
                }
            });
        }
    },
    validate: function(){
        var isValidated = true;
        this._records.forEach(function(record){
            isValidated = record.validate();
        });
        return isValidated;
    },
    checkMaxItems: function(){
        if (this.list.$prototype.$maxItems) {
            var self = this;
            if (self._isAddDisabled !== (self.list.$prototype.$maxItems <= self._records.length)) {
                self._isAddDisabled = !self._isAddDisabled;
                var metaData;
                if (self.list.$menus) {
                    var $actions;
                    ["$create", "$select"].forEach(function($bind){
                        if (self.list.$menus[$bind]) {
                            ($actions = $actions || {})[$bind] = {
                                $isDisabled: self._isAddDisabled
                            };
                        }
                    });
                    if ($actions) {
                        metaData = {
                            $actions: $actions
                        };
                        
                    }
                }
                if (self.list.$capability.insert) {
                    (metaData = metaData || {}).$items = self._records.map(function(){
                        return {
                            $actions: {
                                $create: {
                                    $isDisabled: self._isAddDisabled
                                }
                            }
                        };
                    });
                }
                if (metaData) {
                    var dataset = {
                        $properties: {}
                    };
                    dataset.$properties[this.list.$item.$bind] = metaData;
                    this.list.getArticleParent().applyChange(dataset);
                }
            }
        }
    },
    dispose: function(){
        delete this.list;
    }
});
