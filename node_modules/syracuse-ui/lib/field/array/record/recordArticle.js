"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var ListContextMenu = require('syracuse-ui/lib/field/array/listContextMenu').ListContextMenu;

function RecordArticle(){
}

exports.RecordArticle = helpers.defineClass(RecordArticle, Article, {
    ensureDataSet: function(){
        return this.dataset = this.articleParent.dataset[this.$serverIndex] || {};
    },
    applyActionLinkChange: function(resources){
        Article.prototype.applyActionLinkChange.call(this, resources);
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            if (!this.contextMenu && !this.$item.$isMenuRecordHidden) {
                (this.contextMenu = new ListContextMenu()).create(this);
            }
            if (resources.$links === null && this.contextMenu) {
                this.contextMenu.clearMenuItems();
            }
        }
    },
    applyStyleChange: function(metaData){
        if (metaData.$isReadOnly !== undefined ||
        metaData.$isDisabled !== undefined ||
        metaData.$fieldStyle !== undefined ||
        metaData.$valueStyle !== undefined ||
        metaData.$titleStyle !== undefined) {
            var updated;
            metaData.$properties = metaData.$properties || {};
            if (metaData.$isReadOnly !== this.$isReadOnly) {
                this.$isReadOnly = metaData.$isReadOnly;
                updated = true;
            }
            if (metaData.$isDisabled !== this.$isDisabled) {
                this.$isDisabled = metaData.$isDisabled;
                updated = true;
            }
            if (metaData.$fieldStyle !== this.$fieldStyle) {
                this.$fieldStyle = metaData.$fieldStyle;
                updated = true;
            }
            if (metaData.$valueStyle !== this.$valueStyle) {
                this.$valueStyle = metaData.$valueStyle;
                updated = true;
            }
            if (metaData.$titleStyle !== this.$titleStyle) {
                this.$titleStyle = metaData.$titleStyle;
                updated = true;
            }
            if (updated) {
                var $binds = Object.keys(this.$prototype.$properties);
                for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                    var $bind = $binds[ii];
                    metaData.$properties[$bind] = metaData.$properties[$bind] || {};
                    if (metaData.$isReadOnly !== undefined) {
                        metaData.$properties[$bind].$isReadOnly = this.$isReadOnly;
                    }
                    if (metaData.$isDisabled !== undefined) {
                        metaData.$properties[$bind].$isDisabled = this.$isDisabled;
                    }
                    if (metaData.$fieldStyle !== undefined) {
                        metaData.$properties[$bind].$fieldStyle = this.$fieldStyle;
                    }
                    if (metaData.$valueStyle !== undefined) {
                        metaData.$properties[$bind].$valueStyle = this.$valueStyle;
                    }
                    if (metaData.$titleStyle !== undefined) {
                        metaData.$properties[$bind].$titleStyle = this.$titleStyle;
                    }
                }
            }
        }
    },
    applyChange: function(metaData){
		this.applyStyleChange(metaData);
        if (this.$syraLoaded) {
            if (metaData.$isSelected) {
                if (this.list._store.selector.onSelect) {
                    this.list._store.selector.onSelect({
                        uuidTarget: this.$uuid,
                        isSelected: metaData.$isSelected
                    });
                }
            }
        }
        Article.prototype.applyChange.call(this, metaData);
    },
    renderRowIndex: function(){
        if (this._rowIndexCell) {
            this._rowIndexCell.textContent = (this.list.pagingCapability._$startIndex || 0) + this.$recordIndex;
        }
    },
    applyMetaData: function(metaData){
    },
    dispose: function(){
        delete this.page;
        delete this.list
        delete this.builder;
        if (this.contextMenu) {
            document.controller.disposeObject(this.contextMenu);
            delete this.contextMenu;
        }
		debugger;
        Article.prototype.dispose.call(this);
    }
});
