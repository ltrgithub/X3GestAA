"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var ListContextMenu = require('syracuse-ui/lib/field/array/listContextMenu').ListContextMenu;

function RecordArticle(){
}

exports.RecordArticle = helpers.defineClass(RecordArticle, Article, {
    ensureDataSet: function(){
        return this.dataset = this.articleParent.dataset[this.$serverIndex] || {};
    },
    applyActionLinkChange: function(resources, record){
        Article.prototype.applyActionLinkChange.call(this, resources, record);
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            if (!this.contextMenu && !this.$item.$isMenuRecordHidden) {
                (this.contextMenu = new ListContextMenu()).create(this);
            }
            if (resources.$links === null && this.contextMenu) {
                this.contextMenu.clearMenuItems();
            }
        }
    },
    applyChange: function(newData){
        if (this.$syraLoaded) {
            if (newData.$isReadOnly !== undefined ||
            newData.$isDisabled !== undefined ||
            newData.$fieldStyle !== undefined ||
            newData.$valueStyle !== undefined ||
            newData.$titleStyle !== undefined) {
                var self = this, updated;
                newData.$properties = newData.$properties || {};
                if (newData.$isReadOnly !== self.$isReadOnly) {
                    self.$isReadOnly = newData.$isReadOnly;
                    updated = true;
                }
                if (newData.$isDisabled !== self.$isDisabled) {
                    self.$isDisabled = newData.$isDisabled;
                    updated = true;
                }
                if (newData.$fieldStyle !== self.$fieldStyle) {
                    self.$fieldStyle = newData.$fieldStyle;
                    updated = true;
                }
                if (newData.$valueStyle !== self.$valueStyle) {
                    self.$valueStyle = newData.$valueStyle;
                    updated = true;
                }
                if (newData.$titleStyle !== self.$titleStyle) {
                    self.$titleStyle = newData.$titleStyle;
                    updated = true;
                }
                if (updated) {
                    Object.keys(this.$prototype.$properties).forEach(function($bind){
                        newData.$properties[$bind] = newData.$properties[$bind] || {};
                        if (newData.$isReadOnly !== undefined) {
                            newData.$properties[$bind].$isReadOnly = self.$isReadOnly;
                        }
                        if (newData.$isDisabled !== undefined) {
                            newData.$properties[$bind].$isDisabled = self.$isDisabled;
                        }
                        if (newData.$fieldStyle !== undefined) {
                            newData.$properties[$bind].$fieldStyle = self.$fieldStyle;
                        }
                        if (newData.$valueStyle !== undefined) {
                            newData.$properties[$bind].$valueStyle = self.$valueStyle;
                        }
                        if (newData.$titleStyle !== undefined) {
                            newData.$properties[$bind].$titleStyle = self.$titleStyle;
                        }
                    });
                }
                
            }
        }
        Article.prototype.applyChange.call(this, newData);
    },
    renderRowIndex: function(){
        if (this._rowIndexCell) {
            this._rowIndexCell.textContent = (this.list.pagingCapability._$startIndex || 0) + this.$recordIndex;
        }
    },
    applyMetaData: function(metaData){
    },
    dispose: function(){
        delete this.page;
        delete this.list
        delete this.builder;
        if (this.contextMenu) {
            document.controller.disposeObject(this.contextMenu);
            delete this.contextMenu;
        }
        delete this.arrayLevel;
        delete this._rowIndexCell;
        delete this.$recordIndex;
        Article.prototype.dispose.call(this);
    }
});
