"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

function RecordArticle(){
}

exports.RecordArticle = helpers.defineClass(RecordArticle, Article, {
    loadBox: function(initData){
        this.$defaultSkinBlock = "s-h3";
        this.$defaultSkinSection = "s-h3";
        Article.prototype.loadBox.call(this, initData);
    },
    ensureDataSet: function(){
        if (!this.dataset || this.dataset.$serverIndex != this.$serverIndex) {
            this.dataset = {};
            for (var ii = 0, jj = this.articleParent.dataset.length; ii < jj; ii++) {
                if (this.articleParent.dataset[ii].$serverIndex == this.$serverIndex) {
                    this.dataset = this.articleParent.dataset[this.$serverIndex];
                    break;
                }
            }
            if (!this.dataset) {
                this.dataset = {};
            }
        }
        return this.dataset;
    },
    _ensureMenusBox: function(){
        var self = this;
        if (!self._menusBox) {
            self._menusBox = self.page.loadNewItem(self._menusBoxSlot, {
                $category: "menus",
                $skin: "s-record-actions",
                $layout: {
                    $layoutType: "row",
                    $fitToContent: true,
                    $items: [{
                        $noText: true,
                        $bind: "$create",
                        $skin: "s-record-action-create"
                    }, {
                        $noText: true,
                        $bind: "$edit",
                        $skin: "s-record-action-edit"
                    }, {
                        $noText: true,
                        $bind: "$delete",
                        $skin: "s-record-action-delete"
                    }, {
                        $isMenusBag: true,
                        $category: "menus",
                        $title: "-",
                        $isBoxCollapsable: true,
                        $isPopupContent: true,
                        $id: self.id + "-menu-picker",
                        $skin: "s-record-menus",
                        $itemSkin: "s-field-menus-link",
                        onEnsureVisibility: function(menuGroup, $menuItemBind, menuItem){
                            if ($menuItemBind == "$lazyload") {
                                menuItem.setState({
                                    $isExcluded: true
                                });
                            }
                            if (!menuGroup.$isPickerVisible) {
                                if (self.builder.setMenusBoxCol) {
                                    self.builder.setMenusBoxCol("menu");
                                }
                            }
                        }
                    }]
                },
                onEnsureVisibility: function(menuGroup, $menuItemBind, menuItem){
                    if (!menuGroup.menuGroupRoot.$isPickerVisible) {
                        self._menusBoxSlot.style.display = "";
                        menuGroup.menuGroupRoot.$isPickerVisible = true;
                    }
                    switch ($menuItemBind) {
                        case "$create":
                        case "$edit":
                        case "$delete":
                            if (self.builder.setMenusBoxCol) {
                                self.builder.setMenusBoxCol($menuItemBind);
                            }
                            break;
                        default:
                            break;
                    }
                }
            }, self);
            self._menusBox.contextField = self;
            self._menusBoxSlot.style.display = "";
            self.menuPicker = self.idMap[self.id + "-menu-picker"];
        }
        return self._menusBox;
    },
    applyActionLinkChange: function(resources){
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            if (!this._menusBox && !this.$item.$isMenuRecordHidden) {
                this._ensureMenusBox();
            }
            if (this._menusBox && resources.$links === null) {
                this._menusBox.unload();
                this.menuPicker = this._menusBox = null;
            }
        }
        Article.prototype.applyActionLinkChange.call(this, resources);
    },
    applyStyleChange: function(metaData){
        if (metaData.$isReadOnly !== undefined ||
        metaData.$isDisabled !== undefined ||
        metaData.$fieldStyle !== undefined ||
        metaData.$valueStyle !== undefined ||
        metaData.$titleStyle !== undefined) {
            var updated;
            metaData.$properties = metaData.$properties || {};
            if (metaData.$isReadOnly !== this.$isReadOnly) {
                this.$isReadOnly = metaData.$isReadOnly;
                updated = true;
            }
            if (metaData.$isDisabled !== this.$isDisabled) {
                this.$isDisabled = metaData.$isDisabled;
                updated = true;
            }
            if (metaData.$fieldStyle !== this.$fieldStyle) {
                this.$fieldStyle = metaData.$fieldStyle;
                updated = true;
            }
            if (metaData.$valueStyle !== this.$valueStyle) {
                this.$valueStyle = metaData.$valueStyle;
                updated = true;
            }
            if (metaData.$titleStyle !== this.$titleStyle) {
                this.$titleStyle = metaData.$titleStyle;
                updated = true;
            }
            if (updated) {
                var $binds = Object.keys(this.$prototype.$properties);
                for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                    var $bind = $binds[ii];
                    metaData.$properties[$bind] = metaData.$properties[$bind] || {};
                    if (metaData.$isReadOnly !== undefined) {
                        metaData.$properties[$bind].$isReadOnly = this.$isReadOnly;
                    }
                    if (metaData.$isDisabled !== undefined) {
                        metaData.$properties[$bind].$isDisabled = this.$isDisabled;
                    }
                    if (metaData.$fieldStyle !== undefined) {
                        metaData.$properties[$bind].$fieldStyle = this.$fieldStyle;
                    }
                    if (metaData.$valueStyle !== undefined) {
                        metaData.$properties[$bind].$valueStyle = this.$valueStyle;
                    }
                    if (metaData.$titleStyle !== undefined) {
                        metaData.$properties[$bind].$titleStyle = this.$titleStyle;
                    }
                }
            }
        }
    },
    applyChange: function(metaData){
        this.applyStyleChange(metaData);
        if (this.$syraLoaded) {
            if (metaData.$isSelected) {
                if (this.list._store.selector.onSelect) {
                    this.list._store.selector.onSelect({
                        uuidTarget: this.$uuid,
                        isSelected: metaData.$isSelected
                    });
                }
            }
            else {
                if (metaData.$isSelected !== undefined) {
                    /* Only for multi because unselect on single is managed by onSelect  */
                    if (this.list._store.selector.onUnSelect) {
                        this.list._store.selector.onUnSelect({
                            uuidTarget: this.$uuid,
                            isSelected: metaData.$isSelected
                        });
                    }
                }
            }
        }
        else {
            if (metaData.$isSelected) {
                if (this.list._store.selector.select) {
                    this.list._store.selector.select(this.$uuid, metaData.$isSelected);
                }
            }
        }
        Article.prototype.applyChange.call(this, metaData);
    },
    renderRowIndex: function(){
        if (this._rowIndexCell) {
            this._rowIndexCell.textContent = this.$serverIndex + 1;
        }
    },
    applyMetaData: function(metaData){
    },
    dispose: function(){
		if(this.treeNode){
			this.list.unregiterTreeNode(this);
		}		
        this.page = this.list = this.builder = null;
        if (this._menusBox) {
            document.controller.disposeObject(this._menusBox);
        }
        this.menuPicker = this._menusBox = null;
        Article.prototype.dispose.call(this);
    }
});
