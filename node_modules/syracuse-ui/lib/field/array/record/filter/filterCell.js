"use strict";
var helpers = require('syracuse-core/lib/helpers');

function FilterCell(){
}

exports.FilterCell = helpers.defineClass(FilterCell, null, {
    addOperator: function(field){
        var self = this;
        if (field._input) {
            field._input.className = field._input.className.replace("s-inplace-input", "s-filter-input");
        }
        self._operator = document.createElement("a");
        self._operator.className = "s-list-filter";
        self._operator.style.backgroundImage = "url('" + document.site.$item.$iconPath + "filter/s-filter-none.png')";
        $(field._dataValue.appendChild(self._operator)).bind("click", function(event){
            //LV add External adapter
            var options = {
                operator: self.operator,
                list: self.record.list,
                event: event,
                type: "operatorclick",
                doEvent: function(){
                    if (!self.listPopup) {
                        document.site.closePopups();
                        self.$$list.empty();
                        var operators = self._getOperators();
                        operators.forEach(function(op){
                            var link = document.createElement("a");
                            link.className = "s-list-filter-item";
                            link.setAttribute("data-s-op", op)
                            link.style.backgroundImage = "url('" + document.site.$item.$iconPath + "filter/s-filter-" + op + ".png')";
                            $(link).appendTo(self.$$list).text(self.record.boxParent._localize["filter_" + op]);
                        });
                        self.listPopup = self.record.boxParent.openDialog({
                            $dialogMode: "popup",
                            content: self.record,
                            $$dialog: self.$$list,
                            position: {
                                my: "left top",
                                at: "left bottom",
                                of: $(self.layoutSlot)
                            },
                            onClose: function(){
                                self.listPopup = null;
                            }
                        });
                    }
                    else {
                        self.listPopup.close();
                    }
                }
            }
            self.record.page.externalAdapter.onFilterEvent(options);
            return false;
        });
        if (!self.$$list) {
            var list = document.createElement("div");
            list.className = "s-list-filter-list";
            list.style.display = "none";
            self.$$list = $(field._dataValue.appendChild(list)).delegate("a.s-list-filter-item", "click", function(event){
                self.setOperator($(this).attr("data-s-op"));
                self.listPopup.close();
                //LV add External adapter
                var options = {
                    operator: self.operator,
                    list: self.record.list,
                    filter: self,
                    event: event,
                    type: "operatorchange",
                    doEvent: function(){
                        var highField = self.record.boundFields[self.$bind + "$High"];
                        if (self.operator === "between") {
                            if (highField) {
                                highField[0].$$dataValue.toggle(true);
                            }
                            else {
                                self.loadField(self.$field, self.$bind + "$High");
                            }
                        }
                        else {
                            if (highField) {
                                highField[0].$$dataValue.toggle(false);
                            }
                            var value = self.record.dataset[self.$bind];
                            if (self.operator != "none") {
                                if (value != null && value != "") {
                                    self.record._buildFilter();
                                }
                            }
                            else {
                                if (value != null && value != "") {
                                    var field = self.record.boundFields[self.$bind][0];
                                    field.setDataValue(null);
                                    field.notifyFieldChange(null);
                                }
                                else {
                                    self.record._buildFilter();
                                }
                            }
                        }
                    }
                };
                self.record.page.externalAdapter.onFilterEvent(options);
            });
        }
    },
    render: function(record, layoutSlot, $field, $bind){
        this.$field = $field;
        this.record = record;
        this.$bind = $bind;
        this.operator = "none";
        this.layoutSlot = layoutSlot;
        this.loadField(self.$field, self.$bind);
    },
    setOperator: function(operator){
        this._operator.style.backgroundImage = "url('" + document.site.$item.$iconPath + "filter/s-filter-" + (this.operator = operator) + ".png')";
    },
    _format: function(field, $type, value){
        switch ($type) {
            case "application/x-reference":
                var value;
                if (field._hasUiid) {
                    value = field.currentValue.$uuid;
                }
                else {
                    if (field.$refValue && field.$refValue.$field) {
                        return this._format(field, field.$refValue.$field.$type, field.currentValue.$value);
                    }
                    else {
                        value = field.currentValue.$value;
                    }
                }
                break;
            case "application/x-choice":
                var fieldType = (field.$field && field.$field.$value && field.$field.$value.$type) || "application/x-string";
                return this._format(field, fieldType, value);
            case "application/x-boolean":
            case "application/x-integer":
            case "application/x-decimal":
                return value;
            case "application/x-date":
                return "@" + value + "@";
        }
        return "'" + (value || "") + "'";
    },
    //LV operator depend on page type
    _getOperators: function(){
        var operators;
        switch (this.$field.$type) {
            case "application/x-date":
            case "application/x-time":
            case "application/x-datetime":
                operators = ["none", "gt", "ge", "lt", "le", "eq", "ne"];
                if (!this.record.page.$isFusionPage) {
                    operators.push("between")
                }
                ;                break;
            case "application/x-string":
                operators = ["none", "gt", "ge", "lt", "le", "eq", "ne", "like_s", "like"];
                if (!this.record.page.$isFusionPage) {
                    operators.push("between")
                }
                ;                break;
            case "application/x-integer":
                if (!this.record.page.$isFusionPage) {
                    operators = ["none", "eq", "ne"];
                }
                else {
                    operators = ["none", "gt", "ge", "lt", "le", "eq", "ne"];
                }
                break;
            default:
                operators = ["none", "eq", "ne"];
                break;
        };
        return operators;
    },
    getValue: function(){
        var field = this.record.boundFields[this.$bind][0];
        var value = this.record.dataset[this.$bind];
        if (this.operator != "none" && value != null) {
            var op = this.operator;
            var right;
            switch (op) {
                case "like":
                    // like is for strings only so direct access to store
                    // workaround in case value is an object despite $type is application/x-string
                    right = typeof(value) == 'object' && value.$value ? right = "'%" + value.$value + "%'" : "'%" + value + "%'";
                    break;
                case "like_s":
                    // like is for strings only so direct access to store
                    right = "'" + value + "%'";
                    op = "like";
                    break;
                case "between":
                    var highValue = this.record.dataset[this.$bind + "$High"];
                    if (value && !highValue) {
                        right = this._format(field, this.$field.$type, value);
                        op = "ge";
                    }
                    else {
                        if (!value && highValue) {
                            right = this._format(field, this.$field.$type, highValue);
                            op = "le";
                        }
                        else {
                            if (value && highValue) {
                                right = this._format(field, this.$field.$type, value) + " and " + this._format(field, this.$field.$type, highValue);
                            }
                            else {
                                return "";
                            }
                        }
                    }
                    break;
                default:
                    right = this._format(field, this.$field.$type, value);
                    break;
            }
            return "(" + this.$bind + " " + op + " " + right + ")";
        }
    },
    loadField: function($field, $bind){
        this.addOperator(this.record.page.loadNewItem(this.layoutSlot.appendChild(document.createElement("div")), {
            $bind: $bind || this.$bind,
            $isTopLabelAlignment: false,
            $isCellChild: true,
            $isFilterMode: true,
            $inplace: true,
            $field: $field
        }, this.record));
    },
    ensureEqual: function(){
        // force operator to equals
        if (this.operator === "none" && this.$field) {
            var defaultFilter;
            switch (this.$field.$type) {
                case "application/x-date":
                case "application/x-time":
                case "application/x-datetime":
                    defaultFilter = "ge";
                    break;
                case "application/x-string":
                    defaultFilter = "like";
                    break;
                default:
                    defaultFilter = "eq";
                    break;
            }
            this.setOperator(defaultFilter);
        }
    },
    ensureDefault: function(){
        // force operator to default
        if (this.$field) {
            var defaultFilter, value = this.record.boundFields[this.$bind][0].getInputValue();
            switch (this.$field.$type) {
                case "application/x-date":
                case "application/x-time":
                case "application/x-datetime":
                    defaultFilter = (value !== "" && this.operator === "none") ? "ge" : (value === "" && this.operator !== "none") ? "none" : undefined;
                    break;
                case "application/x-string":
                    defaultFilter = (value !== "" && this.operator === "none") ? "like_s" : (value === "" && this.operator !== "none") ? "none" : undefined;
                    break;
                case "application/x-integer":
                    defaultFilter = (value !== "" && this.operator === "none") ? "ge" : (value === "" && this.operator !== "none") ? "none" : undefined;
                    break
                default:
                    defaultFilter = (value !== "" && this.operator === "none") ? "ge" : (value === "" && this.operator !== "none") ? "none" : undefined;
                    break;
            }
            if (defaultFilter) 
                this.setOperator(defaultFilter);
        }
    },
    dispose: function(){
        if (this._operator) {
            $(this._operator).unbind();
        }
        if (this.$$list) {
            this.$$list.undelegate();
        }
        delete this.record;
    },
    // FDB LV
    fusionGetInputValue: function(){
        var field = this.record.boundFields[this.$bind][0];
        var values = ["", field.getInputValue() , ""];
        switch (this.operator) {
            case "none":
                break;
            case "gt":
                values[0] = ">";
                break;
            case "ge":
                values[0] = ">=";
                break;
            case "lt":
                values[0] = "<";
                break;
            case "le":
                values[0] = "<=";
                break;
            case "eq":
                values[0] = "=";
                break;
            case "ne":
                values[0] = "<>";
                break;
            case "like_s":
                values[2] = "*";
                break;
            case "like":
                values[0] = "*";
                values[2] = "*";
                break;
            case "between":
                break;
        }
        return values.join("");
    }
});
