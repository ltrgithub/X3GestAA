"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var FilterCell = require('./filterCell').FilterCell;

function FilterRecord(){
}

exports.FilterRecord = helpers.defineClass(FilterRecord, Article, {
    loadRecord: function(list){
        this.$facet = "$filter";
        this.$isEditMode = true;
        this.$prototype = list.$prototype.$item;
        this.$prototype.$localization = list.page.$prototype.$localization;
        document.itemFactory.initializeItem(this, {
            $layout: {
                $items: list.$item.$layout.$items
            }
        }, list);
        this.loadBox();
    },
    _appendCell: function(slot){
        var td = document.createElement("td");
        td.className = "s-list-filter-cell";
        return slot.appendChild(td);
    },
    appendEmptyCell: function(slot){
        return this._appendCell(slot || this.$$item[0]);
    },
    appendFlagCell: function(slot){
        var td = this.appendEmptyCell(slot);
        td.className += " s-list-filter-flag";
        td.style.backgroundImage = "url('" + document.site.$item.$iconPath + "filter/s-filter-flag.png')";
    },
    appendFieldCell: function($item, $field){
        var td = this._appendCell(this.boxParent.$item.$format == "vgrid" ? this.boxParent.builder.cols[$item.$bind].slot : this.$$item[0]);
        if ($field.$capabilities && ($field.$capabilities.indexOf("filter") >= 0)) {
            (this._cells[$item.$bind] = new FilterCell()).render(this, $(td), $field, $item.$bind);
        }
    },
    drawBox: function(){
        this._cells = {};
        if (this.boxParent.$item.$format != "vgrid") {
            if (this.$$item) {
                this.$$item.empty()[0];
            }
            else {
                var item = document.createElement("tr");
                this.boxParent.builder._thead.appendChild(item);
                this.$$item = $(this.boxParent.builder._thead.appendChild(item));
            }
        }
    },
    _buildFilter: function(){
        var self = this;
        var values = [];
        var params = {};
        Object.keys(self._cells).forEach(function($bind){
            var value = self._cells[$bind].getValue();
            if (value) {
                values.push(value);
            }
        });
        params.filter = values.join(" and ");
        this.boxParent.fetch(params);
    },
    onNotifyDataChange: function(field, value){
        this.dataset[field.$item.$bind] = value;
        var filter = this._cells[field.$item.$bind];
        if (value == null || value == "") {
            if (filter && filter.operator !== "none") {
                if (filter.operator == "between") {
                    var fieldFirst = this.record.boundFields[filter.$bind][0];
                    var fieldHigh = this.record.boundFields[filter.$bind + "$High"][0];
                    if (fieldFirst.currentValue == fieldHigh.currentValue) {
                        filter.setOperator("none");
                    }
                }
                else {
                    filter.setOperator("none");
                }
            }
        }
        else {
            if (filter) {
                //for high this._cells[$bind] is not defined
                filter.ensureEqual();
            }
        }
        this._buildFilter();
        return false;        
    },
    dispose: function(){
        var self = this;
        if (self._cells) {
            Object.keys(self._cells).forEach(function($bind){
                document.controller.disposeObject(self._cells[$bind]);
            });
            delete self._cells;
        }
        Article.prototype.dispose.call(this);
    },
    // FDB 
    fusionGetInputValues: function(){
        var self = this;
        var res = [];
        Object.keys(self._cells).forEach(function($bind){
            res.push(self._cells[$bind].fusionGetInputValue() || "");
        });
        return res;
    }
});
