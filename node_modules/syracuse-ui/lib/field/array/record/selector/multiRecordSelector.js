"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordSelector = require('./recordSelector').RecordSelector;

function MultiRecordSelector(){
}

exports.MultiRecordSelector = helpers.defineClass(MultiRecordSelector, RecordSelector, {
    getWidth: function(){
        return 25;
    },
    appendToTitle: function(slot){
        slot.className += " s-list-selector-slot";
        var input = document.createElement("input");
        input.setAttribute("type", "checkbox");
        input.className = "s-list-selector-all";
        slot.appendChild(input);
    },
    appendToRecord: function(slot){
        slot.className += " s-list-selector-slot";
        var input = document.createElement("input");
        input.setAttribute("type", "checkbox");
        input.className = "s-list-selector";
        return slot.appendChild(input);
    },
    onclick: function(options){
        options.isSelected = options.$$selector.is(":checked");
        options.uuidTarget = options.$$selector.hasClass("s-list-selector-all") ? null : this.list._store.findRecordUiid(options.$$selector);
    },
    onSelect: function(options){
        var self = this;
        if (options.$$selector && options.$$selector.hasClass("s-list-selector-all")) {
            self.records = {};
            Object.keys(self.list._store._map).forEach(function(uuid){
                if(!options.unselectable || !options.unselectable(self.list,{"uuid":uuid})){
                	self.select(uuid, options.isSelected);
                }
            });
        }
        else { 
            self.select(options.uuidTarget, options.isSelected);
        }
    },
    onUnSelect: function(options){
		this.onSelect(options)
    }
});
