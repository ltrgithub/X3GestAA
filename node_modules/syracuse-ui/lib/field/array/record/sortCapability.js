"use strict";
var helpers = require('syracuse-core/lib/helpers');

function SortCapability(list){
    this.list = list;
}

exports.SortCapability = helpers.defineClass(SortCapability, null, {
    load: function(){
        this.bindEvents();
    },
    stringify: function(){
        return this._$orderBy ? helpers.url.formatOrderBy(this._$orderBy) : null;
    },
    parse: function(param){
        return helpers.url.parseOrderBy(param);
    },
    appendSortLink: function(col, $item){
        var title = col.sortLink = document.createElement("a")
        title.className = this.list.$skin + "-title-link";
        title.setAttribute("data-s-sort", $item.$bind);
        return title;
    },
    setOrderBy: function($orderBy, $startLetter){
        if ($orderBy !== undefined) {
            this._$orderBy = $orderBy;
        }
        if ($startLetter !== undefined) {
            this._$startLetter = $startLetter;
            this._selectAlphaTab();
        }
    },
    bindEvents: function(){
        var self = this;
        self.list.$$item.delegate("a[data-s-sort]", "click", function(event){
            var $bind = $(this).attr("data-s-sort");
            var $newOrderBy = [], found;
            if (self._$orderBy) {
                self._$orderBy.forEach(function($orderItem){
                    if ($orderItem.binding == $bind) {
                        found = true;
                        $orderItem.descending = !$orderItem.descending;
                        $newOrderBy.push($orderItem);
                    }
                    else {
                        if (event.shiftKey) {
                            $newOrderBy.push($orderItem);
                        }
                    }
                });
            }
            if (!found) {
                $newOrderBy.push({
                    binding: $bind,
                    descending: false
                });
            }
            self.list.fetch($newOrderBy ? {
                orderBy: $newOrderBy
            } : null);
            return false;
        });
    },
    renderOrderBy: function(){
        var self = this;
        delete self._alphaTabBinding;
        var css = self.list.$skin + "-title-link";
        if (self._sortedCols) {
            self._sortedCols.forEach(function($bind){
                var col = self.list.builder.cols[$bind];
                if (col && col.sortLink) {
                    col.sortLink.className = css;
                }
            });
            delete self._sortedCols;
        }
        if (self._$orderBy) {
            self._sortedCols = [];
            self._$orderBy.forEach(function(criterion, index){
                if (index == 0) {
                    var $field = self.list.$fieldProperties[criterion.binding];
                    if ($field.$capabilities && ($field.$capabilities.indexOf("alphaTab") >= 0)) {
                        self._alphaTabBinding = criterion.binding;
                    }
                }
                if (self.list.builder.cols) {
                    var col = self.list.builder.cols[criterion.binding];
                    if (col && col.sortLink) {
                        col.sortLink.className = css + (criterion.descending ? " s-grid-sort-desc" : " s-grid-sort-asc");
                        self._sortedCols.push(criterion.binding);
                    }
                }
            });
        }
        self._toggleAlphaTab(self._alphaTabBinding);
    },
    _toggleAlphaTab: function(show){
        var self = this;
        if (show) {
            if (!self._alphaTab) {
                self._alphaTab = document.createElement("div");
                self._alphaTab.className = "s-alphatab";
                self.list._topbar.appendChild(self._alphaTab);
                for (var ii = "A".charCodeAt(0), end = "Z".charCodeAt(0); ii <= end; ii++) {
                    var btn = document.createElement("a");
                    btn.className = "s-alphatab-link";
                    var letter = String.fromCharCode(ii);
                    if (self._$startLetter == letter) {
                        self._selectAlphaTab(btn);
                    }
                    $(self._alphaTab.appendChild(btn)).text(letter);
                }
                $(self._alphaTab).delegate(".s-alphatab-link", "click", function(){
                    var letter = $(this).text();
                    if (self._$startLetter == letter) {
                        delete self._$startLetter;
                        self.list.fetch({});
                        self._selectAlphaTab();
                    }
                    else {
                        self.list.fetch({
                            startLetter: letter
                        });
                        self._selectAlphaTab(this);
                    }
                    return false;
                });
            }
        }
        if (self._alphaTab) {
            self._alphaTab.style.display = show ? "" : "none";
        }
    },
    _selectAlphaTab: function(btn){
        if (this._alphaTab) {
            if (!btn && this._$startLetter) {
                if (this._alphaTab.hasChildNodes()) {
                    var children = this._alphaTab.childNodes;
                    for (var ii = 0; ii < children.length; ii++) {
                        var node = children[ii];
                        if (node.innerHTML == this._$startLetter) {
                            btn = node;
                            break;
                        }
                    }
                }
            }
            if (this._alphaTabSelected) {
                this._alphaTabSelected.className = "s-alphatab-link";
                delete this._alphaTabSelected;
            }
            if (btn) {
                (this._alphaTabSelected = btn).className += " s-alphatab-link-selected";
            }
        }
    },
    filterByStartLetter: function(resource, criterion){
        resource.$startLetter = criterion.startLetter;
        resource.dataRecordSet = resource.dataRecordSet.filter(function(item){
            if (criterion.binding) {
                item = item[criterion.binding];
            }
            return item.search(new RegExp(criterion.startLetter, "i")) == 0;
        });
        
        return resource;
    },
    syracuseSort: function(resource, $orderBy, property){
        this.sort(resource, (resource.$orderBy = $orderBy).map(function(criterion){
            return {
                binding: criterion.binding,
                asc: criterion.descending !== true
            }
        }), property);
    },
    sort: function(resource, criteria, property){
        var self = this;
        resource.dataRecordSet.sort(function(itemA, itemB){
            var wr = 0;
            if (property) {
                itemA = itemA[property];
                itemB = itemB[property];
            }
            for (var ii = 0; ii < criteria.length; ii++) {
                wr = self._compare(criteria[ii], itemA, itemB);
                if (wr != 0) 
                    break;
            }
            return wr;
        });
        return resource;
    },
    _compare: function(criterion, a, b){
        var wr = (criterion.asc) ? 1 : -1;
        var valueA = a[criterion.binding];
        var valueB = b[criterion.binding];
        switch (criterion.$type) {
            case "application/x-string":
            case "application/x-datetime":
                break;
            case "application/x-time":
            case "application/x-choice":
            case "application/x-boolean":
            case "application/x-integer":
                valueA = parseInt(valueA, 10);
                valueB = parseInt(valueB, 10);
                break;
            case "application/x-decimal":
            case "application/x-real":
                valueA = parseFloat(valueA, 10);
                valueB = parseFloat(valueB, 10);
                break;
            default:
                
                break;
        }
        if (valueA > valueB) 
            return wr;
        if (valueA < valueB) 
            return -wr;
        return 0;
    },
    dispose: function(){
        if (this._alphaTab) {
            $(this._alphaTab).undelegate();
        }
        delete this.list;
    }
});


