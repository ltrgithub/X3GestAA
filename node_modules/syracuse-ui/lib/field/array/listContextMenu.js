"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ContextMenu = require('syracuse-ui/lib/field/contextMenu').ContextMenu;

var _$quickActions = {
    list: {
        array: ["$create", "$select", "$delete"],
        "$create": true,
        "$select": true,
        "$delete": true
    },
    record: {
        array: ["$create", "$edit", "$delete"],
        "$create": true,
        "$edit": true,
        "$delete": true
    }
};
function ListContextMenu(){
}

exports.ListContextMenu = helpers.defineClass(ListContextMenu, ContextMenu, {
    appendQuickActions: function($menuItem){
        if (!this._quickActions) {
            this._quickActions = {};
            for (var ii = 0, jj = this.$quickActions.array.length; ii < jj; ii++) {
                var slot = document.createElement("div");
                slot.className = "s-quick-actions-slot";
                this._quickActions[this.$quickActions.array[ii]] = this._actionsSlot.insertBefore(slot, this._menusBtnSlot);
            }
        }
        var menuItem = this.field.page.createNewItem({
            $bind: $menuItem.$bind,
            $category: $menuItem.$category || "link",
            $skin: "s-quick-actions-link",
            $icon: {
                $mode: "icon",
                $useCss: true
            }
        }, this.field);
        menuItem.$$container = $(this._quickActions[$menuItem.$bind]);
        return menuItem;
    },
    clearMenuItems: function(){
        var self = this;
        if (this._quickActions) {
            var $binds = Object.keys(this._quickActions);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                document.site.removeDomChild(this._quickActions[$binds[ii]]);
            }
            delete this._quickActions;
        }
        this._isMenuBtnVisible = false;
        this._menusBtnSlot.style.display = "none";
        if (this.hasColumns) {
            this.field.builder.setContextMenusCol(null, true);
        }
    },
    create: function(field){
        var self = this
        if (field.list) {
            self.$skinMenus = "s-record-menus";
            self.$skinActionSlot = field.list.$skin + "-record-actions";
            self.$quickActions = _$quickActions.record;
            self.hasColumns = false;
            switch (field.list.$item.$format) {
                case "vgrid":
                    self.popupContent = {
                        id: helpers.uuid.generate(),
                        $$item: $(field._contextMenusSlot)
                    };
                    break;
                case "grid":
                    self.hasColumns = true;
                    break;
            }
        }
        else {
            self.$skinMenus = "s-list-menus";
            self.$skinActionSlot = "s-list-actions";
            self.$quickActions = _$quickActions.list;
        }
        ContextMenu.prototype.create.call(this, field, {
            onBeforeAddMenuItem: function($menuItem){
                if (self.$quickActions[$menuItem.$bind]) {
                    if (self.hasColumns) {
                        self.field.builder.setContextMenusCol($menuItem.$bind);
                    }
                    return self.appendQuickActions($menuItem);
                }
                else {
                    if (!self._isMenuBtnVisible) {
                        self._menusBtnSlot.style.display = "";
                        self._isMenuBtnVisible = true;
                        if (self.hasColumns) {
                            self.field.builder.setContextMenusCol($menuItem.$bind);
                        }
                        if ($menuItem.$bind == "$lazyload") {
                            var title;
                            if (self.field.list) {
                                title = self.field.list._localize.mn_actions;
                            }
                            else {
                                title = self.field._localize.mn_actions;
                                self.menuPicker.textContent = title;
                            }
                            self.menuPicker.setAttribute("title", title);
                            return false;
                        }
                    }
                }
            }
        });
    },
    appendOpener: function(){
        this._actionsSlot = document.createElement("div");
        this._actionsSlot.className = this.$skinActionSlot;
        this.field._contextMenusSlot.appendChild(this._actionsSlot);
        this.menuPicker = document.createElement("a");
        var title;
        if (this.field.list) {
            this.menuPicker.className = "s-record-menus-btn s-close";
            title = this.field.list._localize.mn_more;
        }
        else {
            this.menuPicker.className = "s-list-menus-btn s-close";
            title = this.field._localize.mn_more;
            this.menuPicker.textContent = title;
        }
        this.menuPicker.setAttribute("title", title);
        this.menuPicker.setAttribute("data-s-picker", "menus");
        this._isMenuBtnVisible = false;
        this.menuPicker.setAttribute("id", this.field.id + "-menu-btn");
        (this._menusBtnSlot = document.createElement("div")).className = "s-quick-actions-slot";
        this._menusBtnSlot.style.display = "none";
        this._actionsSlot.appendChild(this._menusBtnSlot).appendChild(this.menuPicker);
    },
    removeOpener: function(){
        if (this.menuPicker) {
            document.site.emptyDom(this.field._contextMenusSlot);
            delete this.menuPicker;
            delete this._quickActions;
        }
    }
});
