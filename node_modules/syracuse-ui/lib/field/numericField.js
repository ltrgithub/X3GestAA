"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
var _formatApi = require('syracuse-ui/lib/field/formatApi');

function decimalParser(decimalSep, groupSep, groupSize) {
	decimalSep = decimalSep || '.';
	groupSep = groupSep || ',';
	groupSize = groupSize || 3;
	if (groupSep !== '.' && groupSep !== ',' && (decimalSep === '.' || decimalSep === ','))
		decimalSep = '[.,]';
	else
		decimalSep = "\\" + decimalSep;
	var re = new RegExp("^\\s*([+-]?\\d*(?:\\" + groupSep + "\\d{" + groupSize + "})*)" + decimalSep + "?(\\d*)\\s*$");
	return function(str) {
		var match = re.exec(str);
		if (!match)
			throw new Error(syra_local.nfInvalidNumber + " : " + str);
		return parseFloat(match[1].replace(/[^\d\-]/g, '') + '.' + match[2]);
	};
}

function formatInput(field, val) {
	var numFormatObj = field.numFormatObj;
	var parser = decimalParser(numFormatObj.decimalSeparator, numFormatObj.groupSeparator, numFormatObj.groupSize);
	// formatting
	return field.formatApi.format(field.formatApi.parse(parser(val, field)), field.localFormat);
}

function NumericField() {}

exports.NumericField = helpers.defineClass(NumericField, Field, {
	ensureEditMode: function() {
		if (this.$field.$mode == "progress") {
			this.$isEditMode = false;
		} else {
			Field.prototype.ensureEditMode.call(this);
		}
	},
	format: function(val, format) {
		return this.formatApi.format(val, format);
	},
	dispose: function() {
		var formatEx;
		this.formatApi = this.progressValue = this.numFormatObj = this.localFormat = this._formatInput = this._checkSep = null;
		if ((formatEx = this.formatEx)) {
			var keys = Object.keys(formatEx);
			for (var ii = keys.length - 1; ii >= 0; ii--) {
				delete formatEx[keys[ii]];
			}
		}
		Field.prototype.dispose.call(this);
	},
	initialize: function() {
		this.formatApi = _formatApi.getApi(this.$field.$type);
		this.numFormatObj = _formatApi.getLocale().getNumberFormatObj(this.$field.$type);
		this.$cssFieldType = "s-number";
		this.localFormat = this.$field.$format || this.numFormatObj.numFormat;
		this._formatInput = formatInput;
		this._checkSep = true;
		if (this.formatEx) {
			// Overwrite format APIs  "formatApi", "localFormat", etc...
			helpers.object.extendEx(this, this.formatEx);
			this.formatApi.regionalOptions = this.numFormatObj;
		}
	},
	onInputFocusin: function(input, event) {
		syra_site.dom.toggleClass(input, 's-field-input-error', false);
		var gs = this.numFormatObj.groupSeparator;
		//var ds = this.numFormatObj.decimalSeparator;
		var gsRegExp = gs == " " ? new RegExp("\\s", "g") : new RegExp("[" + gs + "]", "g");
		//var dsRegExp = new RegExp("["+ds+"]","g");
		var editVal = (input.value || "").split(gsRegExp).join('');
		input.value = editVal;
		Field.prototype.onInputFocusin.call(this, input, event);
	},
	onInputFocusout: function(input, event) {
		try {
			if (this._checkSep && !this.valHasChanged) {
				var ds = this.numFormatObj.decimalSeparator;
				var value = input.value || "";
				var rawNum = ds != '.' ? value.replace(new RegExp("[" + ds + "]"), '.') : value;
				var numObj = this.formatApi.parse(rawNum);
				// displaying formatted num
				input.value = this.formatApi.format(numObj, this.localFormat);
			} else {
				this.valHasChanged = false;
			}
		} catch (error) {
			this.showErrors([error.message]);
		}
		Field.prototype.onInputFocusout.call(this, input, event);
	},
	onInputChange: function(input, event) {
		try {
			// handle formatting
			var self = this,
				val = input.value,
				valFormatted = val;
			self.valHasChanged = true;
			if (val != '') {
				input.value = valFormatted = this._formatInput(self, val);
			}
			if (self.validate(valFormatted, [])) {
				self.onInputValidate(event);
			}
		} catch (error) {
			this.showErrors([error.message]);
		}
	},
	onInputValidate: function(event) {
		try {
			var newValue = this.getDataValue();
			if (newValue) {
				this.notifyFieldChange(newValue);
			}
		} catch (error) {
			this.showErrors([error.message]);
		}
	},
	render: function() {
		if (this.$isEditMode) {
			this.input = document.createElement("input");
			syra_site.setSpecificAttributes(this.input);
			this.input.setAttribute("type", syra_site.isTabletDevice ? "number" : "text");
			this.input.className = this.$skinInput + " " + this.$skinInput + "-num";
			this.fieldValue.appendChild(this.input);
			return true;
		} else {
			if (this.$field.$mode == "progress") {
				this.fieldValue.className += " s-field-progress";
				this.progressValue = document.createElement("div");
				this.progressValue.className = "s-field-progress-value";
				this.fieldValue.appendChild(this.progressValue);
			}
		}
		return false;
	},
	setDataValue: function(value) {
		try {
			if (this.progressValue) {
				this.progressValue.style.width = ((this.fieldValue.clientWidth * value) / 100) + "px";
			} else {
				var formattedNum = '';
				this.currentValue = value;
				if (value) {
					// building formatted value
					var numObj = this.formatApi.parse(value);
					formattedNum = this.formatApi.format(numObj, this.localFormat);
				}
				this.fieldHelper.setValueLength(this, formattedNum);
				if (this.$isEditMode) {
					this.setInputValue(formattedNum);
				} else {
					if (formattedNum && !this.$isDetailLinkDisabled && this.$menus && this.$menus.$details) {
						this.appendDetailLink(formattedNum, this.$menus.$details);
					} else {
						this.fieldValue.textContent = formattedNum;
					}
					syra_menus.ensureMenuPicker(this);
				}
			}
		} catch (error) {
			this.showErrors([error.message]);
		}
	},
	getDataValue: function() {
		return this.formatApi.parse(this.getInputValue(), this.localFormat).toString();
	}

});