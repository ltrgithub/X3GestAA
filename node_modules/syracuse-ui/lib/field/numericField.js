"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;
var _formatApi = require('syracuse-ui/lib/field/formatApi');

function _formatInput(field, val) {
	var type = field.$field.$type;
	var numFormatObj = field.numFormatObj;
	var ds = numFormatObj.decimalSeparator;
	var gs = numFormatObj.groupSeparator;

	var chars_ok = "0-9-+";

	// for decimal values, removing invalid chars and setting '.' as decimal separator (javascript float)
	if (type == "application/x-decimal" || type == "application/x-real") {

		chars_ok += ds;

		if (gs != ".") {
			var regexp = new RegExp("[^" + chars_ok + "." + "]", "g");
			val = val.replace(regexp, '');
		} else {
			var regexp = new RegExp("[^" + chars_ok + "]", "g");
			val = val.replace(regexp, '');
		}

		if (ds != ".") {
			var regexp = new RegExp(ds, "g");
			val = val.replace(regexp, '.');
		}
	}
	// for integer values, removing invalid chars
	else {
		var regexp = new RegExp("[^" + chars_ok + "]", "g");
		val = val.replace(regexp, '');
	}

	val = type == "application/x-decimal" ? parseFloat(val) : parseInt(val, 10);

	// control
	if (isNaN(val)) {
		throw new Error("invalid number : " + val);
	}

	// formatting
	return field.formatApi.format(field.formatApi.parse(val), field.localFormat);
}

function NumericField() {}

exports.NumericField = helpers.defineClass(NumericField, Field, {
	ensureEditMode: function() {
		if (this.$field.$mode == "progress") {
			this.$isEditMode = false;
		} else {
			Field.prototype.ensureEditMode.call(this);
		}
	},
	format: function(val, format) {
		return this.formatApi.format(val, format);
	},
	validateType: function(errors, value) {

	},
	dispose: function() {
		var formatEx;
		delete this.formatApi;
		delete this.numFormatObj;
		delete this.localFormat;
		delete this._formatInput;
		delete this._checkSep;
		if ((formatEx = this.formatEx)) {
			Object.keys(formatEx).forEach(function(key) {
				delete formatEx[key];
			});
		}
		Field.prototype.dispose.call(this);
	},
	initialize: function() {
		this.formatApi = _formatApi.getApi(this.$field.$type);
		this.numFormatObj = _formatApi.getLocale().getNumberFormatObj(this.$field.$type);
		this.$cssFieldType = this.$field.$type.replace("application/x-", "s-");
		this.localFormat = this.$field.$format || this.numFormatObj.numFormat;
		this._formatInput = _formatInput;
		this._checkSep = true;
		//this.localFormat = _formatApi.getLocalFormat(this.$field.$type, this.$field.$format);
		if (this.formatEx) {
			// Overwrite format APIs  "formatApi", "localFormat", etc...
			helpers.object.extendEx(this, this.formatEx);
			this.formatApi.regionalOptions = this.numFormatObj;
		}
	},
	onInputFocusin: function(input, event) {
		document.site.toggleClass(input, 's-field-input-error', false);
		var gs = this.numFormatObj.groupSeparator;
		//var ds = this.numFormatObj.decimalSeparator;
		var gsRegExp = gs == " " ? new RegExp("\\s", "g") : new RegExp("[" + gs + "]", "g");
		//var dsRegExp = new RegExp("["+ds+"]","g");
		var editVal = (input.value || "").split(gsRegExp).join('');
		input.value = editVal;
		Field.prototype.onInputFocusin.call(this, input, event);
	},
	onInputFocusout: function(input, event) {
		try {
			if (this._checkSep && !this.valHasChanged) {
				var ds = this.numFormatObj.decimalSeparator;
				var value = input.value || "";
				var rawNum = ds != '.' ? value.replace(new RegExp("[" + ds + "]"), '.') : value;
				var numObj = this.formatApi.parse(rawNum);
				// displaying formatted num
				input.value = this.formatApi.format(numObj, this.localFormat);
			} else {
				this.valHasChanged = false;
			}
		} catch (error) {
			this.showErrors([error.message]);
		}
		Field.prototype.onInputFocusout.call(this, input, event);
	},
	onInputChange: function(input, event) {
		try {
			// handle formatting
			var self = this,
				val = input.value,
				valFormatted = val;
			self.valHasChanged = true;
			if (val != '') {
				input.value = valFormatted = this._formatInput(self, val);
			}
			if (self.validate(valFormatted, [])) {
				self.onInputValidate(event);
			}
		} catch (error) {
			this.showErrors([error.message]);
		}
	},
	onInputValidate: function(event) {
		try {
			var newValue = this.getDataValue();
			if (newValue) {
				this.notifyFieldChange(newValue);
			}
		} catch (error) {
			this.showErrors([error.message]);
		}
	},
	applyShortCuts: function(shortcurts, event) {
		if (shortcurts.esc) {
			var numObj = this.formatApi.parse(input.value || "");
			input.value = this.formatApi.format(numObj, this.localFormat);
			event.preventDefault();
		}
	},
	validateKeyPress: function(charCode) {
		var validated = ((charCode >= "0" && charCode <= "9") || charCode == "-" || charCode == "+" || charCode == this.numFormatObj.groupSeparator || charCode == (this.$field.$type == "application/x-integer" ? '' : this.numFormatObj.decimalSeparator));
		document.site.toggleClass(input, 's-field-input-error', !validated);
		return validated;
	},
	doClickPicker: function(btn) {
		if (!this.$isDisabled && !this.$isReadOnly) {
			var step = this.formatApi.parse(this.$item.$step || "1"); // assuming $item.$step may be set in field object
			var numObj = this.formatApi.parse(this.getInputValue() || "");
			this.currentValue = this.formatApi.numberValue(this.formatApi[(btn.getAttribute("data-s-picker") == "numeric-up") ? "add" : "subtract"](numObj, step));
			this.setInputValue(this.currentValue);
			this._input.focus();
			this.$$input.change();
		}
	},
	render: function() {
		if (this.$isEditMode) {
			this._input = document.createElement("input");
			this._input.setAttribute("type", "text");
			this.$$input = $(this._input);
			this._input.className = this.$skinInput + " " + this.$skinInput + "-num";
			this.fieldValue.appendChild(this._input);
			this._appendLinksPicker();
			return true;
		} else {
			if (this.$field.$mode == "progress") {
				this.fieldValue.className += " s-field-progress";
				this.progressValue = document.createElement("div");
				this.progressValue.className = "s-field-progress-value";
				this.fieldValue.appendChild(this.progressValue);
			}
		}
		return false;
	},
	setDataValue: function(value) {
		try {
			if (this.progressValue) {
				this.progressValue.style.width = ((this.fieldValue.clientWidth * value) / 100) + "px";
			} else {
				var formattedNum = '';
				this.currentValue = value;
				if (value) {
					// building formatted value
					var numObj = this.formatApi.parse(value);
					formattedNum = this.formatApi.format(numObj, this.localFormat);
				}
				if (this.$isEditMode) {
					this.setInputValue(formattedNum);
				} else {
					document.site.emptyDom(this.fieldValue);
					if (formattedNum && this.$rootLinks.$links && this.$rootLinks.$links.$details && !this.$item.$isMenusDisabled) {
						this.appendDetailLink(formattedNum, this.$rootLinks.$links.$details);
					} else {
						this.fieldValue.textContent = formattedNum;
					}
				}
			}
		} catch (error) {
			this.showErrors([error.message]);
		}
	},
	getDataValue: function() {
		return this.formatApi.parse(this.getInputValue(), this.localFormat).toString();
	}

});