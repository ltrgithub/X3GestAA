"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _timeout;

function _move(resizer, event) {
	var cursor = "not-allowed";
	if ((event.pageY >= (resizer.top - 20)) && (event.pageY <= (resizer.bottom + 20))) {
		var newWidth = resizer.width + (resizer.isLeftDirection ? (event.pageX - resizer.resizerRect.left) : (resizer.resizerRect.left - event.pageX));
		if (newWidth > 0) {
			resizer.barSplitter.barSlot.style.width = (resizer.newWidth = newWidth) + "px";
		}
	}
}

function BarResizerDDAgent() {}

exports.BarResizerDDAgent = helpers.defineClass(BarResizerDDAgent, null, {
	start: function(dropItem) {
		_timeout = null;
		this.barSplitter = dropItem.barSplitter;
		syra_site.isInoutDisabled = true;
		syra_dd.ddAgent = this;
		syra_site.dom.getBoundingClientRect(this.barSplitter.barSlot, this);
		this.isLeftDirection = dropItem.resizeDirection == "left";
		this.resizerRect = this.barSplitter.resizePicker.getBoundingClientRect();
		if (this.barSplitter.$isCollapsed) {
			this.barSplitter.ensureState(true);
		}
		syra_site.body.style.cursor = "e-resize";
		syra_site.dom.toggleClass(this.barSplitter.openerPicker, "s-resizing", true);
	},
	onDragMouseMove: function(target, event) {
		var self = this;
		if (!_timeout) {
			_timeout = setTimeout(function() {
				_timeout = null;
				_move(self, event);
			}, 50);
		}
	},
	onDragMouseUp: function(target, event) {
		if (_timeout) {
			clearTimeout(_timeout);
			_timeout = null;
			_move(this, event);
		}
		var newWidth = this.barSplitter.barSlot.clientWidth;
		if (newWidth <= this.barSplitter.closeWidth) {
			this.barSplitter.$isCollapsed = true;
			this.barSplitter.ensureState();
		} else {
			this.barSplitter.$width = this.barSplitter.barSlot.clientWidth;
		}
		syra_site.body.style.cursor = "default";
		syra_site.dom.toggleClass(this.barSplitter.openerPicker, "s-resizing", false);
		this.barSplitter.savePreferences();
		syra_site.isInoutDisabled = false;
	},
	dispose: function() {
		this.resizerRect = this.barSplitter = null;
	}
});