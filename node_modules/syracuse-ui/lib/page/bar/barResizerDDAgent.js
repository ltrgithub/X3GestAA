"use strict";
var helpers = require('syracuse-core/lib/helpers');

function BarResizerDDAgent(){
}

exports.BarResizerDDAgent = helpers.defineClass(BarResizerDDAgent, null, {
    start: function(dropItem){
        this.barSplitter = dropItem.barSplitter;
        document.site.ddManager.ddAgent = this;
        document.site.getBoundingClientRect(this.barSplitter.barSlot, this);
        this.resizeDirection = dropItem.resizeDirection;
        this.resizerRect = this.barSplitter.resizeBar.getBoundingClientRect();
    },
    onDragMouseMove: function(target, event){
        var cursor = "not-allowed";
        if ((event.pageY >= (this.top - 20)) && (event.pageY <= (this.bottom + 20))) {
            var newWidth = this.width + (this.resizeDirection.left ? (event.pageX - this.resizerRect.left) : (this.resizerRect.left - event.pageX));
            if (newWidth > 200) { //this.resizerRect.width) {
                this.barSplitter.barSlot.style.width = (this.newWidth = newWidth) + "px";
                cursor = "e-resize";
            }
        }
        document.site.toggleClass(this.barSplitter.openerPicker, "s-resizing", true);
        document.site.body.style.cursor = cursor;
    },
    onDragMouseUp: function(target, event){
        //this.barSplitter.$barWidth = Math.floor(100 * (this.barSplitter.barSlot.clientWidth / this.barSplitter.barSlot.parentNode.clientWidth)) + "%";
        this.barSplitter.$barWidth = this.barSplitter.barSlot.clientWidth;
        this.barSplitter.barSlot.style.minWidth = this.resizerRect.width + "px";
        this.barSplitter.barSlot.style.width = this.barSplitter.$barWidth;
        if (this.barSplitter.barSlot.clientWidth < this.resizerRect.width) {
            this.barSplitter.barSlot.style.width = this.resizerRect.width + "px";
        }
        document.site.body.style.cursor = "default";
        document.site.toggleClass(this.barSplitter.openerPicker, "s-resizing", false);
        if (this.barSplitter.preferenceKey) {
            document.site.setPreferences(this.barSplitter.preferenceKey, this.barSplitter, ["$barWidth"]);
        }
    },
    dispose: function(){
        this.resizerRect = this.barSplitter = null;
    }
});
