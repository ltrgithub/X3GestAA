"use strict";
var helpers = require('syracuse-core/lib/helpers');

function BarResizerDDAgent() {}

exports.BarResizerDDAgent = helpers.defineClass(BarResizerDDAgent, null, {
	start: function(dropItem) {
		this.barSplitter = dropItem.barSplitter;
		document.site.ddManager.ddAgent = this;
		document.site.getBoundingClientRect(this.barSplitter.barSlot, this);
		this.resizeDirection = dropItem.resizeDirection;
		this.startX = this.barSplitter.resizeBar.getBoundingClientRect().left;
	},
	onDragMouseMove: function(target, event) {
		var cursor = "not-allowed";
		if ((event.pageY >= (this.top - 20)) && (event.pageY <= (this.bottom + 20))) {
			var newWidth = this.width + (this.resizeDirection.left ? (event.pageX - this.startX) : (this.startX - event.pageX));
			if (newWidth > 200) {
				this.barSplitter.barSlot.style.width = (this.newWidth = newWidth) + "px";
				cursor = "e-resize";
			}
		}
		document.site.toggleClass(this.barSplitter.openerPicker, "s-resizing", true);
		document.site.body.style.cursor = cursor;
	},
	onDragMouseUp: function(target, event) {
		var percent = Math.floor(100 * (this.barSplitter.barSlot.clientWidth / this.barSplitter.barSlot.parentNode.clientWidth)) + "%";
		this.barSplitter.barSlot.style.width = percent;
		document.site.body.style.cursor = "default";
		document.site.toggleClass(this.barSplitter.openerPicker, "s-resizing", false);
	},
	dispose: function() {
		this.startX = this.barSplitter = null;
	}
});