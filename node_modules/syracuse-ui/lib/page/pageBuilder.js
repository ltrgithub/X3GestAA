"use strict";
var _helpers = require('syracuse-core/lib/helpers');
var _localizationConverter = require('syracuse-ui/lib/localization/localizationConverter');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var UserPreferences = require('syracuse-ui/lib/page/tools/userPreferences').UserPreferences;
var _childPages = [];

var _queryFacets = ["$query", "$bulk", "$lookup", "$select", "$cube"];
var _autoFetchFacets = _queryFacets.concat(["$details", "$edit", "$summary"]);

exports.getLoaded = function() {
	return _childPages;
};

exports.initialize = function(page) {
	if (!page.isSiteRegisterDisabled) {
		if (_childPages.indexOf(page) < 0) {
			_childPages.push(page);
		}
	}
	page.page = page;

	page._childItemOffset = page._childItemOffset || 1; //initialize for site
	if (!page.id) {
		page.id = syra_site._childPageOffset++;
		syra_store.add(page);
	}
};

exports.resize = function() {
	for (var ii = 0, jj = _childPages.length; ii < jj; ii++) {
		_childPages[ii].resizeArticle(true);
	}
};


exports.load = function($itemPage, onMainPagechange) {
	var $representation = $itemPage.$representation;
	var $pageCategory = ($representation.$article ? $representation.$article.$category : null) || $itemPage.$category;
	$itemPage.openerUrlSegments = $itemPage.openerUrlSegments || {};
	if (!$pageCategory) {
		switch ($itemPage.openerUrlSegments.representationRoot) {
			case "landingVignetteSelect":
				$pageCategory = "landingVignetteSelect";
				$itemPage.$autoFetch = true;
				break;
			default:
				switch ($itemPage.openerUrlSegments.$facet) {
					case "$search":
					case "$dashboard":
						$pageCategory = $itemPage.openerUrlSegments.$facet.slice(1);
						break;
					case "$navigation_edit":
					case "$navigation":
						$pageCategory = "navigation";
						$itemPage.initData = $representation;
						break;
					case "$landing_edit":
					case "$landing":
						$pageCategory = "landing";
						$itemPage.initData = $representation;
						break;
					default:
						$pageCategory = "page";
						break;
				}
				break;
		}
	}
	var item = new($itemPage.$pageCategoryClass || syra_site.widgetsLibrary.pageCategories[$pageCategory] || DesktopPage)();
	var $userPreferencesLink = $representation.$links && $representation.$links.$userPreferences;
	if ($userPreferencesLink) {
		(item.userPreferences = new UserPreferences()).load(item, $userPreferencesLink, $representation.userPreferences && $representation.userPreferences.content);
	}
	item.id = syra_site._childPageOffset++;
	item.openerUrlSegments = $itemPage.openerUrlSegments;
	item.$pageCategory = $pageCategory;
	item.dialogWrapper = $itemPage.dialogWrapper;
	item.$pageCollaborationUrl = $representation.$pageCollaborationUrl;
	item.$authorUrl = $representation.$authorUrl;
	item.$facet = $itemPage.$facet || $itemPage.openerUrlSegments.$facet;
	item.$breadCrumb = $representation.$links && $representation.$links.$breadcrumb;

	item.$isEditMode = $itemPage.$isEditMode || item.$facet == "$edit";
	item.$isEditMode && syra_workingCopy.add(item);

	if ($itemPage.vignetteField) {
		item.vignetteField = $itemPage.vignetteField;
		delete $itemPage.vignetteField;
	}
	var hackFusion = item.$facet.split("_");
	if (hackFusion.length > 1 && hackFusion[0] == "$fusion") {
		item.$isEditMode = true;
		item.$facet = hackFusion[1];
		item.$fusionPageMeta = $itemPage.$fusionPageMeta;
		$itemPage.$autoFetch = false;
	}
	item.layoutSlot = $itemPage.layoutSlot;
	item.$prototype = $representation.$prototype;
	item.page = item;

	var $protoArticle = item.$prototype.$article;
	var $article = item.initializePage ? item.initializePage($itemPage) : $representation.$article;
	if ($article) {
		delete $article.$menus;
	} else {
		$article = $protoArticle;
	}
	$article = exports.ensureDefaultArticle(item, $article, item.$prototype);
	if (item.$prototype.$menus) {
		$article.$menus = item.$prototype.$menus;
	} else {
		if ($protoArticle && $protoArticle.$menus) {
			$article.$menus = $protoArticle.$menus;
		}
	}
	/*if (item.$prototype && item.$prototype.$localization && item.$prototype.$hackLocalization) {
     _localizationConverter.applyHackLocalization(item.$prototype, $article);
     }*/
	if (item.$prototype && item.$prototype.$localization && item.$prototype.$hackBlockRank) {
		if (!$article.$isBlockRankSet) {
			$article.$isBlockRankSet = true;
			if ($article != $protoArticle) {
				if ($protoArticle) {
					$protoArticle.$isBlockRankSet = true;
				}
				_localizationConverter.applyHackBlockRank($article, item.$prototype.$hackBlockRank);
			}
		}
	}
	if (item.$prototype && item.$prototype.$properties) {
		if (item.$prototype.$properties.contract) {
			item.$prototype.$properties.contract.$isHidden = true;
		}
	}

	if ($itemPage.inlinePageHost) {
		item.$isTitleHidden = true;
		item.inlinePageHost = $itemPage.inlinePageHost;
		delete $itemPage.inlinePageHost;
		item.inlinePageHost.onPreInitializeInlinePage(item, $article);
	}

	var layoutSlotStyle = $itemPage.layoutSlot && $itemPage.layoutSlot.style && $itemPage.layoutSlot.style.display;

	syra_site.initializeNewItem(item, $article, $itemPage.boxParent);
	syra_site.localizer.applyPageLocalization(item);

	item.$autoFetch = $itemPage.$autoFetch;
	if (item.$autoFetch === undefined) {
		if (item.$facet == "$edit" && $itemPage.initData) {
			item.$autoFetch = false;
		} else {
			item.$autoFetch = _autoFetchFacets.indexOf(item.$facet) >= 0;
		}
	}

	item.$item.externalAdapter = $itemPage.externalAdapter;
	item.$views = $representation.$views;
	item.loadBox($itemPage.initData);
	item.isPageLoaded = true;
	if ($representation.$diagnoses && $representation != $itemPage.initData) {
		syra_diagnose.showDiagnoses({
			$diagnoses: $representation.$diagnoses
		}, item);
	} else {
		item.diagnosesPanel && item.diagnosesPanel.refresh();
	}
	$itemPage.$pageCategoryClass = $itemPage.boxParent = $itemPage.layoutSlot = $representation = $itemPage.dialogWrapper = null;
	if (layoutSlotStyle !== undefined) {
		item.layoutSlot.style.display = layoutSlotStyle;
	}
	if (onMainPagechange) {
		syra_site.refreshMainPageSecurity(item);
		syra_site.dom.hide(syra_site.body, false);
	}
	syra_site.ensureArticleVisibility(item);
	if (item.$autoFetch) {
		item.fetch({
			isPageLoading: true
		}, function(data, response, requestUrl) {
			if (item && !item.disposed) {
				item.startChange();
				item.applyChange(data, response, requestUrl);
				item.endChange();
				item.onAfterLoad();
			}
		});
	} else {
		item.onAfterLoad();
	}
	return item;
};

exports.activateQueryList = function(page) {
	if (!page.isFusionPage && !page.isVignettePage && _queryFacets.indexOf(page.$facet) >= 0) {
		var list = syra_store.findList(page);
		if (list) {
			page.setShortcutSpyerList(list);
			var filterRecord = list.builder && list.builder.filterRecord;
			filterRecord && filterRecord.setFocus();
		}
	}
};

exports.disposePage = function(page) {
	syra_site.dialogManager.closeAll(page);
	page.userPreferences && page.userPreferences.dispose();
	if (!page.isVignettePage) {
		var found = _childPages.indexOf(page);
		if (found >= 0) {
			_childPages.splice(found, 1);
		}
	}
	page.userPreferences = null;
};


exports.autoScroll = function(scrollViewRect, event) {
	var step = 40,
		margin = 80;
	if (event.pageY > (scrollViewRect.bottom - margin)) {
		var scrollTop = scrollViewRect.item.scrollTop;
		if (scrollTop < (scrollViewRect.scrollHeight - scrollViewRect.height)) {
			scrollViewRect.item.scrollTop = Math.min(scrollTop + step, scrollViewRect.scrollHeight - scrollViewRect.height);
		}
	} else {
		if (event.pageY < (scrollViewRect.top + margin)) {
			var scrollTop = scrollViewRect.item.scrollTop;
			scrollViewRect.item.scrollTop = Math.max(scrollTop - step, 0);
		}
	}
	if (event.pageX > (scrollViewRect.right - margin)) {
		var scrollLeft = scrollViewRect.item.scrollLeft;
		if (scrollLeft < (scrollViewRect.scrollWidth - scrollViewRect.width)) {
			scrollViewRect.item.scrollLeft = Math.min(scrollLeft + step, scrollViewRect.scrollWidth - scrollViewRect.width);
		}
	} else {
		if (event.pageX < (scrollViewRect.left + margin)) {
			var scrollLeft = scrollViewRect.item.scrollLeft;
			scrollViewRect.item.scrollLeft = Math.max(scrollLeft - step, 0);
		}
	}
};

exports.getDefinedFieldBinds = function($items, $binds) {
	$binds = $binds || [];
	if ($items) {
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			if ($item.$bind) {
				$binds.push($item.$bind);
			} else {
				if ($item.$items) {
					$binds = exports.getDefinedFieldBinds($item.$items, $binds);
				}
				if ($item.$layout && $item.$layout.$items) {
					$binds = exports.getDefinedFieldBinds($item.$layout.$items, $binds);
				}
			}
		}
	}
	return $binds;
};


exports.getDefinedFieldList = function($items, $list) {
	if (!$list) {
		$list = [];
	}
	if ($items) {
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			if ($item.$bind) {
				$list.push($item);
			} else {
				if ($item.$items) {
					$list = exports.getDefinedFieldList($item.$items, $list);
				}
				if ($item.$layout && $item.$layout.$items) {
					$list = exports.getDefinedFieldList($item.$layout.$items, $list);
				}
			}
		}
	}
	return $list;
};


function _buildDefaultQueryArticle($article, $prototype) {
	var $items = $article.$layout.$items;
	var binds = Object.keys($prototype.$properties);
	var $field, $bind, $queryBinds = [],
		$moreBinds = [];
	for (var ii = 0, jj = binds.length; ii < jj; ii++) {
		$field = $prototype.$properties[$bind = binds[ii]];
		if ($field && !$field.$isExcluded) {
			if ($field.$type == "application/x-array") {
				$queryBinds.push($bind);
			} else {
				$moreBinds.push($bind);
			}
		}
		$field = null;
	}
	if ($moreBinds.length) {
		var $more = [],
			$query = [];
		for (var ii = 0, jj = $moreBinds.length; ii < jj; ii++) {
			$more.push({
				$bind: $moreBinds[ii]
			});
		}
		for (var ii = 0, jj = $queryBinds.length; ii < jj; ii++) {
			$more.push({
				$bind: $queryBinds[ii]
			});
		}
		$article.$layout = {
			$items: $more
		};
	} else {
		var $item;
		//find array				
		if ($items) {
			$items = syra_site.layoutUpdater.getItemSettings(this, $article.$layout.$items, true) || [];
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				if ($items[ii].$bind == $bind) {
					$item = _helpers.object.clone($items[ii], true);
					break;
				}
			}
		}
		$article.$layout.$items = [$item || {
			$bind: $bind
		}];
	}

}

function _buildDefaultArticle($article, $prototype) {
	if (!$article.$layout.$items) {
		var $items = [];
		var binds = Object.keys($prototype.$properties);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var $field = $prototype.$properties[binds[ii]];
			if ($field && !$field.$isExcluded) {
				$items.push({
					$bind: binds[ii]
				});
			}
		}
		$article.$layout = {
			$items: [{
				$category: "section",
				$layout: {
					$items: [{
						$category: "section",
						$layout: {
							$items: $items
						}
					}]
				}
			}]
		};
	}
}

function _ensureDefaultArticle(page, $article, $prototype) {
	if (!$article) {
		$article = {};
	}
	if (!$article.$layout) {
		$article.$layout = {};
	}
	switch (page.$facet) {
		case "$query":
		case "$bulk":
		case "$cube":
		case "$lookup":
		case "$select":
			_buildDefaultQueryArticle($article, $prototype);
			break;
		default:
			_buildDefaultArticle($article, $prototype);
			break;
	}
	return $article;
}


exports.ensureDefaultArticle = function(page, $article, $prototype) {
	if (page.ensureDefaultArticle) {
		return page.ensureDefaultArticle($article, $prototype);
	}
	return _ensureDefaultArticle(page, $article, $prototype);
};



exports.tempautoAddCubeFields = function(page) {
	var $fields = {}, $cubeField;
	var binds = Object.keys(page.$prototype.$properties);
	for (var ii = 0, jj = binds.length; ii < jj; ii++) {
		var $field = page.$prototype.$properties[binds[ii]];
		if ($field && !$field.$isExcluded) {
			if ($field.type != "application/x-array") {
				$cubeField = binds[ii];
			}
			$fields[binds[ii]] = $field;
		}
	}
	var $binds = Object.keys($fields);
	if ($cubeField && $binds.length) {
		var $items = syra_site.layoutUpdater.getItemSettings(page, null, true) || [];
		var definedBinds = {};
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			if ($items[ii].$bind) {
				definedBinds[$items[ii].$bind] = $items[ii];
			}
		}
		//add date
		var $items = [];
		for (var ii = 0; ii <= 10; ii++) {
			var start = "datstart" + ii;
			if ($fields[start]) {
				var end = "datend" + ii;
				$items.push({
					$layoutType: "row",
					$items: [definedBinds[start] || {
							$bind: start
						},
						definedBinds[end] || {
							$bind: end
						}
					]
				});
				delete $fields[start];
				delete $fields[end];
			}
		}
		$binds = Object.keys($fields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			$items.push(definedBinds[$binds[ii]] || {
				$bind: $binds[ii]
			});
		}
		page.$item.$layout = {
			$items: [{
				$category: "section",
				$layout: {
					$items: [{
						$category: "section",
						$layout: {
							$items: $items
						}
					}]
				}
			}]
		};
	}
};