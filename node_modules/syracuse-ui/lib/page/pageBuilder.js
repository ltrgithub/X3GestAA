"use strict";
var _localizationConverter = require('syracuse-ui/lib/localization/localizationConverter');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var _childPages = [];

var _queryFacets = ["$query", "$bulk", "$lookup", "$select", "$cube"];
var _autoFetchFacets = _queryFacets.concat(["$details", "$edit", "$summary"]);


var vignettePage = require('syracuse-ui/lib/page/vignettePage').VignettePage;
exports.types = {
	landing: require('syracuse-ui/lib/landingPage/landingPage').LandingPage,
	portlet: vignettePage,
	vignette: vignettePage,
	fusion: require('syracuse-ui/lib/fusion/article/sheetPage').SheetPage,
	search: require('syracuse-ui/lib/search/searchPage').SearchPage,
	landingVignetteSelect: require('syracuse-ui/lib/landingPage/select/selectPage').SelectPage
};

exports.getLoaded = function() {
	return _childPages;
};

exports.initialize = function(page) {
	if (!page.isSiteRegisterDisabled) {
		if (_childPages.indexOf(page) < 0) {
			_childPages.push(page);
		}
	}
	page.page = page;

	page._childItemOffset = page._childItemOffset || 1; //initialize for site
	if (!page.id) {
		page.id = syra_site._childPageOffset++;
		syra_item.register(page);
	}
};

exports.resize = function() {
	for (var ii = 0, jj = _childPages.length; ii < jj; ii++) {
		_childPages[ii].resizeItem(true);
	}
};

function _endLoad(context) {
	try {
		var page = context.page;
		var $itemPage = context.$itemPage;
		var $protoArticle = page.$prototype.$article;
		var $article = page.initializePage ? page.initializePage($itemPage) : context.$representation.$article;
		if ($article) {
			delete $article.$menus;
		} else {
			$article = $protoArticle;
		}
		$article = exports.ensureDefaultArticle(page, $article, page.$prototype);
		if (page.$prototype.$menus) {
			$article.$menus = page.$prototype.$menus;
		} else {
			if ($protoArticle && $protoArticle.$menus) {
				$article.$menus = $protoArticle.$menus;
			}
		}
		/*if (page.$prototype && page.$prototype.$localization && page.$prototype.$hackLocalization) {
		 _localizationConverter.applyHackLocalization(page.$prototype, $article);
		 }*/
		if (page.$prototype && page.$prototype.$localization && page.$prototype.$hackBlockRank) {
			if (!$article.$isBlockRankSet) {
				$article.$isBlockRankSet = true;
				if ($article != $protoArticle) {
					if ($protoArticle) {
						$protoArticle.$isBlockRankSet = true;
					}
					_localizationConverter.applyHackBlockRank($article, page.$prototype.$hackBlockRank);
				}
			}
		}

		/*if (page.$prototype && page.$prototype.$links && page.$facet == "$details") {
		 page.$prototype.$links.LK_EMB = {
		 $target: "embedded",
		 $title: "Test embedded",
		 $type: "application/json;vnd.sage=syracuse",
		 $url: "{$baseUrl}/endPoints?representation=endPoint.$query",
		 };
		 }*/
		if ($itemPage.inlinePageHost) {
			page.$isTitleHidden = true;
			page.inlinePageHost = $itemPage.inlinePageHost;
			delete $itemPage.inlinePageHost;
			page.inlinePageHost.onPreInitializeInlinePage(page, $article);
		}

		var layoutSlotStyle = $itemPage.layoutSlot && $itemPage.layoutSlot.style && $itemPage.layoutSlot.style.display;
		syra_item.initialize(syra_site, page, $article, $itemPage.boxParent);
		syra_localizer.applyPageLocalization(page);

		if (page.$autoFetch === undefined) {
			if (page.$facet == "$edit" && $itemPage.initData) {
				page.$autoFetch = false;
			} else {
				page.$autoFetch = _autoFetchFacets.indexOf(page.$facet) >= 0;
			}
		}

		page.$item.externalAdapter = $itemPage.externalAdapter;
		page.$views = context.$representation.$views;
		page.load($itemPage.initData);
		if (syra_site.devTooslPanel && syra_site.devTooslPanel.overSlot) {
			syra_dom.setZIndex(syra_site.devTooslPanel.overSlot);
		}
		page.isPageLoaded = true;
		if (context.$representation.$diagnoses && context.$representation != $itemPage.initData) {
			syra_alert.show(context.$representation.$diagnoses, page);
		} else {
			page.alertPanel && page.alertPanel.refresh();
		}
		$itemPage.$page = $itemPage.boxParent = $itemPage.layoutSlot = $itemPage.overPanel = null;
		if (layoutSlotStyle !== undefined) {
			page.layoutSlot.style.display = layoutSlotStyle;
		}
		if ($itemPage.onMainPagechange) {
			delete $itemPage.onMainPagechange;
			syra_site.refreshMainPageSecurity(page);
		}
		syra_layout.ensureArticleVisibility(page);
		if (page.$autoFetch) {
			page.fetch({
				isPageLoading: true
			}, function(data, response, requestUrl) {
				if (page && !page.disposed) {
					if (!data) {
						data = {
							$diagnoses: [{
								severity: "error",
								message: syra_local.flFetchDataFailed
							}]
						};
						var $binds = Object.keys(page.boundFields);
						for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
							var $bind = [$binds[ii]];
							var field = page.boundFields[$bind];
							field = field && field[0];
							if (field && field.isArrayField) {
								data[$bind] = [];
							}
						}
					}
					page.startChange();
					page.applyChange(data, response, requestUrl);
					page.endChange();
					if (page.mainPageDesignerAccess === "disabled") {
						syra_site.refreshMainPageDesignerSecurity(page);
					}
					syra_quality.page_onAfterLoad(page);

				}
			});
		} else {
			if (page.mainPageDesignerAccess === "disabled") {
				syra_site.refreshMainPageDesignerSecurity(page);
			}
			syra_quality.page_onAfterLoad(page);
		}
		context.success(page);
	} catch (error) {
		context.error(error);
	}
}


exports.load = function(context) {
	try {
		if (!context.error) {
			context.error = function(error) {
				syra_alert.error(error);
			};
		}
		var $itemPage = context.$itemPage;
		var $representation = $itemPage.$representation;
		var $pageCategory = ($representation.$article ? $representation.$article.$category : null) || $itemPage.$category;
		var page = $itemPage.$page;

		$itemPage.urlSeg = $itemPage.urlSeg || {};

		if (!page && $pageCategory && exports.types[$pageCategory]) {
			page = new exports.types[$pageCategory]();
		}
		if (!page) {
			if ($itemPage.urlSeg.representationRoot == "landingVignetteSelect") {
				page = new exports.types.landingVignetteSelect();
				page.$autoFetch = true;
			} else {
				switch ($itemPage.urlSeg.$facet) {
					case "$search":
						page = new exports.types.search();
						break;
					case "$landing_edit":
					case "$landing":
						page = new exports.types.landing();
						$itemPage.initData = $representation;
						break;
					default:
						page = new DesktopPage();
						break;
				}
			}
		}
		syra_preference.page.load(page, $representation);

		page.id = syra_site._childPageOffset++;
		var urlSeg = page.urlSeg = $itemPage.urlSeg;
		page.$pageCategory = $pageCategory;
		page.overPanel = $itemPage.overPanel;
		page.$pageCollaborationUrl = $representation.$pageCollaborationUrl;
		page.$authorUrl = $representation.$authorUrl;
		page.$facet = $itemPage.$facet || urlSeg.$facet;
		page.$breadCrumb = $representation.$links && $representation.$links.$breadcrumb;

		page.$isEditMode = $itemPage.$isEditMode || page.$facet == "$edit";
		page.$isEditMode && syra_form.add(page);

		if ($representation.productName) {
			//syra_site.setProductName($representation.productName);
		}

		if ($itemPage.vignetteField) {
			page.vignetteField = $itemPage.vignetteField;
			delete $itemPage.vignetteField;
		}
		var hackFusion = page.$facet.split("_");
		if (hackFusion.length > 1 && hackFusion[0] == "$fusion") {
			page.$isEditMode = true;
			page.$facet = hackFusion[1];
			page.$fusionPageMeta = $itemPage.$fusionPageMeta;
			page.$autoFetch = false;
		}
		if (context.$autoFetch !== undefined) {
			page.$autoFetch = context.$autoFetch;
		}
		page.layoutSlot = $itemPage.layoutSlot;
		page.$prototype = $representation.$prototype;
		var view = urlSeg && urlSeg.params && urlSeg.params.view;
		if (view == "calendar") {
			page.$prototype.$isCalendarView = true;
		}
		context.page = page.page = page;
		context.$representation = $representation;
		syra_item.ensureMediaTypes(page.$prototype, function() {
			_endLoad(context);
		}, context.error);
	} catch (error) {
		context.error(error);
	}
};

exports.activateQueryList = function(page) {
	if (!page.isFusionPage && !page.isVignettePage && _queryFacets.indexOf(page.$facet) >= 0) {
		var list = syra_item.findList(page);
		if (list) {
			page.setShortcutSpyerList(list);
			list.filter_row && list.filter_row.focus();
		}
	} else
	if (page.isFusionPage && page.isLookUpPage) {
		var list = syra_item.findList(page);
		if (list) {
			page.setShortcutSpyerList(list);
		}
	}
};

exports.disposePage = function(page) {
	syra_over.closeAll(page);
	if (!page.isVignettePage) {
		var found = _childPages.indexOf(page);
		if (found >= 0) {
			_childPages.splice(found, 1);
		}
	}
};


exports.autoScroll = function(scrollViewRect, event) {
	var step = 40,
		margin = 80;
	if (event.pageY > (scrollViewRect.bottom - margin)) {
		var scrollTop = scrollViewRect.item.scrollTop;
		if (scrollTop < (scrollViewRect.scrollHeight - scrollViewRect.height)) {
			scrollViewRect.item.scrollTop = Math.min(scrollTop + step, scrollViewRect.scrollHeight - scrollViewRect.height);
		}
	} else {
		if (event.pageY < (scrollViewRect.top + margin)) {
			var scrollTop = scrollViewRect.item.scrollTop;
			scrollViewRect.item.scrollTop = Math.max(scrollTop - step, 0);
		}
	}
	if (event.pageX > (scrollViewRect.right - margin)) {
		var scrollLeft = scrollViewRect.item.scrollLeft;
		if (scrollLeft < (scrollViewRect.scrollWidth - scrollViewRect.width)) {
			scrollViewRect.item.scrollLeft = Math.min(scrollLeft + step, scrollViewRect.scrollWidth - scrollViewRect.width);
		}
	} else {
		if (event.pageX < (scrollViewRect.left + margin)) {
			var scrollLeft = scrollViewRect.item.scrollLeft;
			scrollViewRect.item.scrollLeft = Math.max(scrollLeft - step, 0);
		}
	}
};

exports.getDefinedFieldBinds = function($items, $binds) {
	$binds = $binds || [];
	if ($items) {
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			if ($item.$bind) {
				$binds.push($item.$bind);
			} else {
				if ($item.$items) {
					$binds = exports.getDefinedFieldBinds($item.$items, $binds);
				}
				if ($item.$layout && $item.$layout.$items) {
					$binds = exports.getDefinedFieldBinds($item.$layout.$items, $binds);
				}
			}
		}
	}
	return $binds;
};


exports.getDefinedFieldList = function($items, $list) {
	if (!$list) {
		$list = [];
	}
	if ($items) {
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			if ($item.$bind) {
				$list.push($item);
			} else {
				if ($item.$items) {
					$list = exports.getDefinedFieldList($item.$items, $list);
				}
				if ($item.$layout && $item.$layout.$items) {
					$list = exports.getDefinedFieldList($item.$layout.$items, $list);
				}
			}
		}
	}
	return $list;
};


function _buildQueryArticle(page, $article, $prototype, isCube) {
	var $items = syra_layout.getItemSettings(page, $article.$layout.$items, true) || [];
	var $defined = {};
	for (var ii = 0, jj = $items.length; ii < jj; ii++) {
		if ($items[ii].$bind) {
			$defined[$items[ii].$bind] = $items[ii];
		}
	}

	var $binds = Object.keys($prototype.$properties);
	var $field, $array = [],
		$more = [];
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $bind = $binds[ii];
		var $field = $prototype.$properties[$bind];
		if ($field && !$field.$isExcluded) {
			var $item = $defined[$bind] ? syra_site.clone($defined[$bind]) : {
				$bind: $bind
			};
			if ($field.$type == "application/x-array") {
				$array.push($item);
			} else {
				if (isCube) {
					if ($bind.indexOf("datend") >= 0) {
						continue;
					} else {
						if ($bind.indexOf("datstart") >= 0) {
							$item.$css = "s-field-cube-date";
							$more.push($item);
							$more.push({
								$bind: $bind.replace("datstart", "datend"),
								$css: "s-field-cube-date"
							});
							continue;
						}
					}
				}
				$more.push($item);
			}
		}
	}
	if ($more.length) {
		$article.$layout = {
			$items: $more.concat($array)
		};
	} else {
		$article.$layout.$items = $array;
	}
}

function _buildDefaultArticle($article, $prototype) {
	if (!$article.$layout.$items) {
		var $items = [];
		var binds = Object.keys($prototype.$properties);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var $field = $prototype.$properties[binds[ii]];
			if ($field && !$field.$isExcluded) {
				$items.push({
					$bind: binds[ii]
				});
			}
		}
		$article.$layout = {
			$items: [{
				$category: "section",
				$layout: {
					$items: [{
						$category: "section",
						$layout: {
							$items: $items
						}
					}]
				}
			}]
		};
	}
}

function _ensureDefaultArticle(page, $article, $prototype) {
	if (!$article) {
		$article = {};
	}
	if (!$article.$layout) {
		$article.$layout = {};
	}
	switch (page.$facet) {
		case "$query":
		case "$bulk":
		case "$cube":
		case "$lookup":
		case "$select":
			_buildQueryArticle(page, $article, $prototype, page.$facet == "$cube");
			break;
		default:
			_buildDefaultArticle($article, $prototype);
			break;
	}
	return $article;
}


exports.ensureDefaultArticle = function(page, $article, $prototype) {
	if (page.ensureDefaultArticle) {
		return page.ensureDefaultArticle($article, $prototype);
	}
	return _ensureDefaultArticle(page, $article, $prototype);
}; // Dummy comment to clean up rollout repository #6948