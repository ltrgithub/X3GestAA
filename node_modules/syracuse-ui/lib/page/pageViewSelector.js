"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('./rawPage').RawPage;

function PageViewSelector(){
}

exports.PageViewSelector = helpers.defineClass(PageViewSelector, RawPage, {
    load: function(page, layoutSlot){
        this.targetPage = page;
        this.layoutSlot = layoutSlot;
        this.loadBox();
    },
    loadBox: function(initData, $initDiagnoses){
        this.externalAdapter = document.site.externalAdapter;
        this.$prototype = {
            $properties: {
                $pageViewSelector: {
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-string",
                        $enum: this.setEnums(this.targetPage.$views)
                    }
                }
            }
        };
        this.$item = {
            $skin: "s-page-view-selector-page",
            $layout: {
                $items: [{
                    $bind: "$pageViewSelector",
                    $title: this.targetPage.pageLocalize.p_viewVariant,
                    $isTopLabelAlignment: false,
                    $format: "$combo",
                    $skin: "s-page-variant",
                    $isEditMode: this.targetPage.$views.length > 0
                }]
            }
        };
        RawPage.prototype.loadBox.call(this, initData, $initDiagnoses);
        this.applyChange({
            $pageViewSelector: this.$selectedId
        });
    },
    notifyDataChange: function(field, value){
        if (field.$item.$bind == "$pageViewSelector") {
            var self = this;
            if (value !== self.$selectedId) {
                var $view = this._views[value];
                if ($view) {
                    var query = document.controller.parseUrl($view.$url);
                    query.sendRequest({}, function(data, response, requestUrl){
                        if (data.$prototype) {
                            setTimeout(function(){
                                if (response.data.$prototype) {
                                    response.data.$prototype.$representationUrl = self.targetPage.$prototype.$representationUrl;
                                }
                                var $itemPage = {
                                    layoutSlot: self.targetPage.layoutSlot,
                                    $category: self.targetPage.$pageCategory,
                                    $urlParts: self.targetPage.$urlParts,
                                    $representation: response.data,
                                    httpQuery: self.targetPage.openerHttpQuery
                                };
                                if (value == "default") {
                                    delete $itemPage.httpQuery.$urlParts.params.pageview;
                                }
                                else {
                                    $itemPage.httpQuery.$urlParts.params.pageview = value;
                                }
                                $itemPage.httpQuery.applyParameters($itemPage.httpQuery.$urlParts.params);
                                document.controller.updateHistory(decodeURIComponent($itemPage.httpQuery.$url));
                                document.controller.changeMainPage($itemPage.httpQuery.$url, $itemPage);
                            }, 100);
                        }
                        else {
                            if (data.$authorUrl) {
                                self.targetPage.$authorUrl = data.$authorUrl;
                            }
                            if (data.$article) {
                                self.targetPage.reloadLayout(data.$article);
                                self.targetPage.warnAdministrationUpdates();
                            }
                            self.fill(self.targetPage.$views = (data.$views || self.targetPage.$views));
                            self.targetPage.openerHttpQuery.$urlParts.params.pageview = value;
                            self.targetPage.openerHttpQuery.applyParameters(self.targetPage.openerHttpQuery.$urlParts.params);
                            document.controller.updateHistory(decodeURIComponent(self.targetPage.openerHttpQuery.$url));
                        }
                    });
                }
            }
        }
    },
    getSelected: function(){
        return this.$selectedId ? this._views[this.$selectedId] : null;
    },
    setEnums: function($views){
        var $enums = [];
        this._views = {};
        this.$selectedId = null;
        if ($views) {
            for (var ii = 0, jj = $views.length; ii < jj; ii++) {
                var $view = $views[ii];
                var $key = $view.$url.split(",");
                $key = $key.length >= 3 ? $key[2] : null; //null for default
                if ($key) {
                    $key = $key.split("'")[0];
                }
                $key = $key || "default";
                $enums.push({
                    $value: $key,
                    $title: $view.$title || "view"
                });
                if ($view.$selected) {
                    this.$selectedId = $key;
                }
                $view.$key = $key;
                this._views[$key] = $view;
            }
            if (!this.$selectedId) {
                this.$selectedId = Object.keys(this._views)[0];
            }
        }
        return $enums;
    },
    fill: function($views){
        if ($views) {
            var $enum = this.setEnums($views);
            this.applyChange({
                $properties: {
                    $pageViewSelector: {
                        $enum: $enum
                    }
                },
                $pageViewSelector: this.$selectedId
            });
        }
    },
    onViewDeleted: function(selectedView, $views){
        if ($views) {
            this.targetPage.$views = $views;
        }
        else {
            if (this._views) {
                delete this._views[selectedView.$key];
            }
            var $keys = Object.keys(this._views);
            this.targetPage.$views = [];
            for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
                this.targetPage.$views.push(this._views[$keys[ii]]);
            }
        }
        this.fill(this.targetPage.$views);
    },
    dispose: function(){
        this.targetPage = this._views = null;
        RawPage.prototype.dispose.call(this);
    }
});
