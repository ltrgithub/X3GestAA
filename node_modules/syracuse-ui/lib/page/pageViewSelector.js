"use strict";
var helpers = require('syracuse-core/lib/helpers');


function PageViewSelector(){
}

exports.PageViewSelector = helpers.defineClass(PageViewSelector, null, {
    load: function(page,slot){
        this.page = page;
        this.slot = slot;
        this.fill(this.page.$views);
    },
    onNotifyChange: function(value){
        var self = this;
        if (value !== self.$selectedId) {
            delete self.page.dataset.$pageViewSelector;
            var $view = this._views[value];
            if ($view) {
                var query = document.controller.parseUrl($view.$url);
                query.sendRequest({}, function(data, response, requestUrl){
                    if (data.$prototype) {
                        setTimeout(function(){
                            if (response.data.$prototype) {
                                response.data.$prototype.$representationUrl = self.page.$prototype.$representationUrl;
                            }
                            var $itemPage = {
                                layoutSlot: self.page.layoutSlot,
                                $category: self.page.$pageCategory,
                                $urlParts: self.page.$urlParts,
                                $representation: response.data,
                                httpQuery: self.page.openerHttpQuery
                            };
                            if (value == "default") {
                                delete $itemPage.httpQuery.$urlParts.params.pageview;
                            }
                            else {
                                $itemPage.httpQuery.$urlParts.params.pageview = value;
                            }
                            $itemPage.httpQuery.applyParameters($itemPage.httpQuery.$urlParts.params);
                            document.controller.updateHistory(decodeURIComponent($itemPage.httpQuery.$url));
                            document.controller.changeMainPage($itemPage.httpQuery.$url, $itemPage);
                        }, 100);
                    }
                    else {
                        if (data.$authorUrl) {
                            self.page.$authorUrl = data.$authorUrl;
                        }
                        if (data.$article) {
                            self.page.reloadLayout(data.$article);
                        }
                        self.fill(self.page.$views = (data.$views || self.page.$views));
                        self.page.openerHttpQuery.$urlParts.params.pageview = value;
                        self.page.openerHttpQuery.applyParameters(self.page.openerHttpQuery.$urlParts.params);
                        document.controller.updateHistory(decodeURIComponent(self.page.openerHttpQuery.$url));
                    }
                });
            }
        }
    },
    fill: function($views){
        document.site.emptyDom(this.slot);
        this._views = {};
        if ($views && $views.length > 1) {
            var $enums = [];
            this.$selectedId = null;
            for (var ii = 0, jj = $views.length; ii < jj; ii++) {
                var $view = $views[ii];
                var $key = $view.$url.split(",");
                $key = $key.length >= 3 ? $key[2] : null; //null for default
                if ($key) {
                    $key = $key.split("'")[0];
                }
                $key = $key || "default";
                $enums.push({
                    $value: $key,
                    $title: $view.$title || "view"
                });
                if ($view.$selected) {
                    this.$selectedId = $key;
                }
                this._views[$key] = $view;
            }
            this.page.$prototype.$properties.$pageViewSelector = {
                $type: "application/x-choice",
                $value: {
                    $type: "application/x-string",
                    $enum: $enums
                }
            };
            this.page.loadNewItem(this.slot, {
                $bind: "$pageViewSelector",
                $title: this.page.pageLocalize.p_viewVariant,
                $isTopLabelAlignment: false,
                $format: "$combo",
                $skin: "s-page-variant",
                $isEditMode: $views.length > 0
            }, this.page);
            this.page.applyChange({
                $pageViewSelector: this.$selectedId
            });
        }
        
    },
    dispose: function(){
        this.page = this.slot = this._views = null;
    }
});
