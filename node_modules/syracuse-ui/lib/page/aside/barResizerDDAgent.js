"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _timeout;

function _move(resizer, event) {
	var cursor = "not-allowed";
	if ((event.pageY >= (resizer.top - 20)) && (event.pageY <= (resizer.bottom + 20))) {
		var newWidth = resizer.width + (resizer.isLeftDirection ? (event.pageX - resizer.resizerRect.left) : (resizer.resizerRect.left - event.pageX));
		if (newWidth > 0) {
			resizer.sideBar.resizeSplitter(resizer.newWidth = newWidth);
		}
	}
}

function BarResizerDDAgent() {}

exports.BarResizerDDAgent = helpers.defineClass(BarResizerDDAgent, null, {
	start: function(dropItem) {
		_timeout = null;
		this.sideBar = dropItem.sideBar;
		syra_site.isInoutDisabled = true;
		syra_dd.ddAgent = this;
		syra_site.dom.getBoundingClientRect(this.sideBar.slot, this);
		this.isLeftDirection = dropItem.resizeDirection == "left";
		if (syra_site.isDocumentRTL) {
			this.isLeftDirection = !this.isLeftDirection;
		}
		this.resizerRect = this.sideBar.resizePicker.getBoundingClientRect();
		if (this.sideBar.$isCollapsed) {
			this.sideBar.ensureState(true);
		}
		syra_site.layoutSlot.style.cursor = "e-resize";
	},
	onDragMouseMove: function(target, event) {
		var self = this;
		if (!_timeout) {
			_timeout = setTimeout(function() {
				_timeout = null;
				_move(self, event);
			}, 50);
		}
	},
	onDragMouseUp: function(target, event) {
		if (_timeout) {
			clearTimeout(_timeout);
			_timeout = null;
			_move(this, event);
		}
		var newWidth = this.sideBar.slot.clientWidth;
		if (newWidth <= this.sideBar.closeWidth) {
			this.sideBar.$isCollapsed = true;
			this.sideBar.ensureState();
		} else {
			this.sideBar.$width = this.sideBar.slot.clientWidth;
		}
		syra_site.layoutSlot.style.cursor = "default";
		this.sideBar.savePreferences();
		this.sideBar.page.resizeArticle(true);
		syra_site.isInoutDisabled = false;
	},
	dispose: function() {
		this.resizerRect = this.sideBar = null;
	}
});