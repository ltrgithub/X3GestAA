"use strict";
var helpers = require('syracuse-core/lib/helpers');
var BarResizerDDAgent = require("./barResizerDDAgent").BarResizerDDAgent;

function _appplyPreferences(bar) {
	var state;
	if (syra_site.$preferences) {
		state = syra_site.$preferences[bar.preferenceKey || bar.userPreferenceKey || "none"];
	}
	state = state || {
		$isCollapsed: false
	};
	if (bar.preferenceKey) {
		syra_preference.profile.get(bar.preferenceKey, state, bar);
	} else {
		if (bar.userPreferenceKey) {
			state = syra_preference.page.get(bar.page, bar.userPreferenceKey) || state;
		}
		syra_preference.profile.applyValues(bar, state);
	}
	bar.$isFloating = bar.options.$isFloating;
}

function SideBar() {}

exports.SideBar = helpers.defineClass(SideBar, null, {
	load: function(page) {
		this.articleParent = page;
		if (!this.id) {
			this.id = page.id + "-" + (++page._childItemOffset);
		}
		syra_item.register(this);
		this.closeWidth = 100;
		this.minWidth = this.minWidth || 200;
		this.page = page;
		_appplyPreferences(this);
		this.options.resizeDirection = this.options.resizeDirection || "left";
		this.slot.className += " s-bar-slot s-bar-slot-" + this.options.resizeDirection;
		if (this.$width != undefined && parseInt(this.$width) <= this.closeWidth) {
			delete this.$width;
		}
		if (this.options.$isResizerDisabled) {
			this.options.isAutoModeDisabled = true;
		}
		if (!this.options.$isResizerDisabled || this.options.$isCollapsable) {
			this.resizePicker = document.createElement("a");
			this.resizePicker.className = this.options.$skin + "-resizer s-bar-resizer-" + this.options.resizeDirection;
			this.openButton = syra_button.add({
				parent: this,
				slot: this.resizePicker,
				text: syra_local.bar_collapse,
				css: this.options.$skin + "-opener s-bar-opener",
				iconOnly: true,
				shortCutTip: ((this.options.resizeDirection == "left") ? syra_shortCuts.tip.hideLeftBar : syra_shortCuts.tip.hideRightBar) + ", " + syra_shortCuts.tip.hideFull,
				fontIcon: this.options.resizeDirection + "_arrow",
				btnclick: function() {
					this.parent.collapse();
				}

			});
			if (!this.options.$isResizerDisabled) {
				this.resizePicker.syraDragSpot = this.id;
			}
			this.slot.appendChild(this.resizePicker);
			syra_dd.addToBarResizers(this, true);
		}

		this.slot.appendChild(this.body);
		syra_dom.setZIndex(this.slot, true);
		this.page.bars.push(this);
		this.ensureState();
	},
	isDraggable: function(target, event) {
		if (target == this.resizePicker) {
			if (event.target != this.openButton.link) {
				syra_dd.dropableItem = {
					sideBar: this,
					resizeDirection: this.options.resizeDirection
				};
				syra_dd.start(this, BarResizerDDAgent, this.slot);
				event.syraRetValue = false;
				return;
			}
		}
		return null;
	},
	resizeSplitter: function(newWidth) {
		if (!this.designing) {
			if (!this.options.isAutoModeDisabled) {
				if (this.isSmall != syra_site.getSize().isSmall) {
					this.isSmall = syra_site.getSize().isSmall;
					this.$isCollapsed = this.isSmall;
				}
			}!newWidth && this.ensureState();
			if (this.slot.parentNode) {
				if (newWidth !== undefined) {
					this.slot.style.width = newWidth + "px";
				}
				var direction = this.options.resizeDirection;
				if (this.$isCollapsed || !this.$isFloating) {
					if (syra_site.isRTL) {
						direction = direction == "left" ? "right" : "left";
					}
					if (this.slot.parentNode) {
						this.slot.parentNode.style["padding" + direction.substr(0, 1).toUpperCase() + direction.substr(1)] = (newWidth || this.slot.clientWidth) + "px";
					}
				}
			}!newWidth && this.resizeBar();
		}
	},
	toggleBar: function(show) {
		syra_dom.hide(this.slot, this.isHidden = !show);
	},
	ensureState: function(startResize) {
		if (!this.isHidden) {
			if (startResize && this.$isCollapsed) {
				this.curCollapsedState = this.$isCollapsed = false;
				delete this.$width;
				this.slot.style.width = this.slot.clientWidth + "px";
				syra_dom.hide(this.body, false);
			} else {
				if (this.curCollapsedState != this.$isCollapsed) {
					if (this.$isCollapsed) {
						syra_dom.hide(this.body, true);
						this.slot.style.width = "";
					} else {
						this.$isCollapsed = false;
						this.slot.style.width = Math.max(this.$width || 0, this.minWidth) + "px";
						syra_dom.hide(this.body, false);
					}
					this.curCollapsedState = this.$isCollapsed;
				}
			}
			syra_dom.toggleClass(this.slot, "s-close", this.$isCollapsed);
			if (this.resizePicker) {
				var icon = this.options.resizeDirection;
				if (this.$isCollapsed) {
					icon = icon == "left" ? "right" : "left";
				}
				syra_button.setText(this.openButton, this.$isCollapsed ? syra_local.bar_expand : syra_local.bar_collapse, icon + "_arrow");
			}
		}
	},
	resizeBar: function(resize) {
		if (this.slot) {
			var pageSize = this.page.getPageSize();
			var height = pageSize.barHeight || pageSize.scrollviewHeight;
			if (height && (resize || (height != this.lastHeight))) {
				this.lastHeight = height;
				this.slot.style.height = height + "px";
				if (this.openButton) {
					this.openButton.link.style.top = ((height - this.openButton.link.clientHeight) / 2) + "px";
				}
				this.body.style.height = height + "px";
				return true;
			}
		}
		return false;
	},

	collapse: function() {
		delete this.onBeforeMaximized;
		this.$isCollapsed = !this.$isCollapsed;
		this.savePreferences();
		this.ensureState();
		this.page.resizeItem(true);
	},
	clearPreferences: function() {
		var key = this.preferenceKey || this.userPreferenceKey;
		if (key) {
			syra_preference.profile.save(key);
			delete this.$width;
			delete this.$isCollapsed;
			this.ensureState();
			_appplyPreferences(this);
		}
	},
	savePreferences: function(key) {
		if (this.preferenceKey) {
			syra_preference.profile.save(this.preferenceKey, this, ["$width", "$isCollapsed"]);
		} else {
			if (this.userPreferenceKey) {
				var preference = syra_preference.page.get(this.page, this.userPreferenceKey) || {};
				preference.$width = this.$width;
				preference.$isCollapsed = this.$isCollapsed;
				syra_preference.page.save(this.page, this.userPreferenceKey, preference);
			}
		}
	},
	dispose: function() {
		var bars = this.page && this.page.bars;
		if (bars) {
			var index = bars.indexOf(this);
			if (index >= 0) {
				bars.splice(index, 1);
			}
		}
		this.resizePicker && syra_dd.addToBarResizers(this, false);
		this.$isFloating && syra_dom.remove(this.slot);
		syra_site.disposeObject(this);
	}
});