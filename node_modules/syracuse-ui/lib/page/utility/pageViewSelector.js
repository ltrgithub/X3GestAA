"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('syracuse-ui/lib/page/rawPage').RawPage;

function PageViewSelector() {}

exports.PageViewSelector = helpers.defineClass(PageViewSelector, RawPage, {
	load: function(page, layoutSlot) {
		this.targetPage = page;
		this.layoutSlot = layoutSlot;
		this.loadBox();
	},
	loadBox: function(initData) {
		this.externalAdapter = document.site.externalAdapter;
		this.$prototype = {
			$properties: {
				$pageViewSelector: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-string",
						$enum: this.setEnums(this.targetPage.$views)
					}
				}
			}
		};
		this.$item = {
			$skin: "s-page-view-selector-page",
			$layout: {
				$items: [{
					$bind: "$pageViewSelector",
					$isTitleHidden: true,
					$isTopLabelAlignment: false,
					$contentEditable: true,
					$format: "$combo",
					$maxByCol: 6,
					$skin: "s-page-variant",
					$isEditMode: this.targetPage.$views.length > 0
				}]
			}
		};
		RawPage.prototype.loadBox.call(this, initData);
		this.applyChange({
			$pageViewSelector: this.selectedId
		});
	},
	selectView: function($view) {
		var selectedId = $view ? this._extractKeyFromUrl($view.$url) : this.selectedId;
		if (selectedId) {
			this.selectedId = null; // ensure new selection
			this.applyChange({
				$pageViewSelector: selectedId
			});
			this.notifyDataChange(this.boundFields.$pageViewSelector[0], selectedId);
		}
	},
	notifyDataChange: function(field, value) {
		if (field.$item.$bind == "$pageViewSelector") {
			var self = this;
			if (value !== self.selectedId) {
				var $view = this._views[value];
				if ($view) {
					var query = document.controller.parseUrl($view.$url);
					query.sendRequest({}, function(data, response, requestUrl) {
						if (data.$prototype) {
							setTimeout(function() {
								if (response.data.$prototype) {
									response.data.$prototype.$representationUrl = self.targetPage.$prototype.$representationUrl;
								}
								var $itemPage = {
									layoutSlot: self.targetPage.layoutSlot,
									$category: self.targetPage.$pageCategory,
									$representation: response.data,
									openerUrlSegments: self.targetPage.openerUrlSegments
								};
								if (value == "default") {
									delete $itemPage.openerUrlSegments.params.pageview;
								} else {
									$itemPage.openerUrlSegments.params.pageview = value;
								}
								document.site.urlMaker.build($itemPage.openerUrlSegments);
								document.site.history.load($itemPage.openerUrlSegments.$url, $itemPage);
							}, 100);
						} else {
							if (data.$authorUrl) {
								self.targetPage.$authorUrl = data.$authorUrl;
							}
							self.fill(self.targetPage.$views = (data.$views || self.targetPage.$views));
							if (data.$article) {
								delete data.$article.$menus;
								if (self.targetPage.convertPersistToVolatil) {
									self.targetPage.convertPersistToVolatil(data.$article);
								}
								if (self.targetPage.$item.$menus) {
									data.$article.$menus = helpers.object.clone(self.targetPage.$item.$menus, true);
								}
								self.targetPage.reloadLayout(data.$article, true);
							}
							var segments = self.targetPage.openerUrlSegments;
							if (segments) {
								segments.params.pageview = value;
								document.site.urlMaker.build(segments);
								if (!document.site.isMobileSite) {
									document.site.history.update(self.targetPage, segments.$url);
								}
							}
							if (self.targetPage.designer) {
								self.targetPage.designer.uiSwitchTool.toggleUIDesign(self.targetPage, true);
								self.targetPage.designer.selectItem(null, true);
								self.disable(true);
								self.targetPage.designer.loadPageStorage();
							}
						}
					});
				}
			}
		}
	},
	getSelected: function() {
		return this.selectedId ? this._views[this.selectedId] : null;
	},
	_extractKeyFromUrl: function($url) {
		var $key = $url.split(",");
		$key = $key.length >= 3 ? $key[2] : null; //null for default
		if ($key) {
			$key = $key.split("'")[0];
		}
		return $key || "default";
	},
	setEnums: function($views) {
		var $enums = [];
		this._views = {};
		this.selectedId = null;
		if ($views) {
			for (var ii = 0, jj = $views.length; ii < jj; ii++) {
				var $view = $views[ii];
				var $key = this._extractKeyFromUrl($view.$url);
				$enums.push({
					$value: $key,
					$title: $view.$title || "view"
				});
				if ($view.$selected) {
					this.selectedId = $key;
				}
				$view.$key = $key;
				this._views[$key] = $view;
			}
			if (!this.selectedId) {
				this.selectedId = Object.keys(this._views)[0];
			}
		}
		return $enums;
	},
	fill: function($views) {
		if ($views) {
			var $enum = this.setEnums($views);
			this.applyChange({
				$properties: {
					$pageViewSelector: {
						$enum: $enum
					}
				},
				$pageViewSelector: this.selectedId
			});
		}
	},
	disable: function($isDisabled) {
		this.applyChange({
			$properties: {
				$pageViewSelector: {
					$isDisabled: $isDisabled
				}
			}
		});
	},
	dispose: function() {
		this.targetPage = this._views = null;
		RawPage.prototype.dispose.call(this);
	}
});