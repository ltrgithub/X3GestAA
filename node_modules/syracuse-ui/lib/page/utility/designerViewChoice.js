"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _extractKeyFromUrl($url) {
	var $key = $url.split(",");
	$key = $key.length >= 3 ? $key[2] : null; //null for default
	if ($key) {
		$key = $key.split("'")[0];
	}
	return $key || "default";
}

exports.disableOpener = function(page, disabled) {
	page.designViewsPopup && page.designViewsPopup.close();
	page.designerViewOpener && syra_site.dom.disableItem(page.designerViewOpener, disabled);
};

function _getSelectedTitle($views) {
	var title;
	for (var ii = 0, jj = $views.length; ii < jj; ii++) {
		title = $views[ii].$title;
		if ($views[ii].$selected) {
			break;
		}
	}
	return title;
}


exports.registerDesignViews = function(page, select) {
	delete page.$selectedDesignView;
	if (page.$views) {
		for (var ii = 0, jj = page.$views.length; ii < jj; ii++) {
			var $view = page.$views[ii];
			if ($view.$selected) {
				page.$selectedDesignView = $view;
			}
			$view.$key = _extractKeyFromUrl($view.$url);
		}
	}
	if (select) {
		if (select !== true) {
			delete page.$selectedDesignView;
		}
		_switchView(page, page.$selectedDesignView || select);
	}

	if (page.$selectedDesignView && page.$views.length > 1) {
		if (!page.designerViewOpener) {
			page.designerViewOpener = syra_menus.addTextButton(_getSelectedTitle(page.$views), "s-designer-view-opener-text", "togglePageOptions");
			page.titleLabel.parentNode.insertBefore(page.designerViewOpener, page.titleLabel.nextSibling);
		}
	} else {
		syra_site.dom.removeChild(page.designerViewOpener);
		delete page.designerViewOpener;
	}
	page.designer && page.designer.displayViewTitle && page.designer.displayViewTitle(page.$selectedDesignView);
};

function _switchView(page, $view, $views) {
	var query = syra_controller.parseUrl($view.$url);
	query.sendRequest({}, function(data, response, requestUrl) {
		if (data.$prototype) {
			setTimeout(function() {
				if (response.data.$prototype) {
					response.data.$prototype.$representationUrl = page.$prototype.$representationUrl;
				}
				var $itemPage = {
					layoutSlot: page.layoutSlot,
					$category: page.$pageCategory,
					$representation: response.data,
					openerUrlSegments: page.openerUrlSegments
				};
				if (value == "default") {
					delete $itemPage.openerUrlSegments.params.pageview;
				} else {
					$itemPage.openerUrlSegments.params.pageview = value;
				}
				syra_site.urlMaker.build($itemPage.openerUrlSegments);
				syra_site.history.load($itemPage.openerUrlSegments.$url, $itemPage);
			}, 100);
		} else {
			if (data.$authorUrl) {
				page.$authorUrl = data.$authorUrl;
			}
			page.$views = data.$views || page.$views;
			//TEMP for V7 Patch6. Will be updated for patch7 
			if ($views) {
				var selectedView;
				for (var ii = 0, jj = page.$views.length; ii < jj; ii++) {
					if (page.$views[ii].$selected) {
						selectedView = page.$views[ii];
						break;
					}
				}
				if (selectedView) {
					for (var ii = 0, jj = $views.length; ii < jj; ii++) {
						var $view = $views[ii];
						if ($view.$url != selectedView.$url) {
							delete $view.$selected;
						} else {
							$view.$selected = true;
						}
					}
					page.$views = $views;
				}
			}
			exports.registerDesignViews(page);
			if (page.designViewsPopup) {
				exports.toggle(page); //close
				exports.toggle(page); //open
			}
			if (data.$article) {
				delete data.$article.$menus;
				if (page.convertPersistToVolatil) {
					page.convertPersistToVolatil(data.$article);
				}
				if (page.$item.$menus) {
					data.$article.$menus = helpers.object.clone(page.$item.$menus, true);
				}
				page.reloadLayout(data.$article, true);
			}
			var segments = page.openerUrlSegments;
			if (segments) {
				segments.params.pageview = $view.$key;
				syra_site.urlMaker.build(segments);
				if (!syra_site.mobileGateway) {
					syra_site.history.update(page, segments.$url);
				}
			}
			if (page.designer) {
				page.designer.uiSwitchTool.toggleUIDesign(page, true);
				page.designer.selectItem(null, true);
				exports.disableOpener(page, true);
				page.designer.loadPageStorage();
			}
		}
	});


}

exports.onDesignViewClick = function(page, event, target) {
	if (!target.syraIsDisabled) {
		var $view = page.$views[target.syraViewIndex];
		(page.$selectedDesignView != $view) && _switchView(page, $view, page.$views);
	}
};
exports.onItemInOut = function(onEnter, event, target) {
	syra_site.dom.toggleClass(target, "s-record-enter", onEnter);
	syra_menus.onTipItemInOut(onEnter, event, target);
};


exports.toggle = function(page) {
	if (!page.designerViewOpener.syraIsDisabled) {
		if (!page.designViewsPopup) {
			var slot = document.createElement("aside");
			slot.className = "s-designer-views";
			var factoriesCount = 0;
			for (var ii = 0, jj = page.$views.length; ii < jj; ii++) {
				if (page.$views[ii].$isFactory) {
					factoriesCount++;
				}
			}
			for (var ii = 0, jj = page.$views.length; ii < jj; ii++) {
				var $view = page.$views[ii];
				var title = $view.$title;
				var view = syra_menus.addTextButton(title, "s-designer-view", "onDesignViewClick");

				view.syraItem = view.syrainout = page.id;
				view.syraViewIndex = ii;
				if ($view.$selected) {
					page.designerViewOpener.textContent = page.designerViewOpener.title = title;
				}
				slot.appendChild(view);
			}
			page.designViewsPopup = syra_site.dialogManager.openPopup(page, {
				content: {},
				slot: slot,
				position: {
					my: "right top",
					at: "right bottom",
					of: $(page.designerViewOpener)
				},
				onClose: function() {
					syra_site.dom.empty(slot);
					page.designViewsPopup = null;
				}
			});
		} else {
			page.designViewsPopup.close();
		}
	}
};


exports.dispose = function(page) {
	page.designViewsPopup && page.designViewsPopup.close();
	page.designViewsPopup = page.designerViewOpener = page.$views = page.$selectedDesignView = null;
};