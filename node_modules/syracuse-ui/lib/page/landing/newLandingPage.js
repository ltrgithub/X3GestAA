"use strict";
var Scrollbar = require('syracuse-ui/lib/scroll/scrollbar').Scrollbar;
var Sortable = require('syracuse-ui/lib/scroll/sortable').Sortable;

//list.$confirmDelete = syra_local.ldpConfirmDelete;
//refreshMainPageDesignerSecurity etait dans after_load de desktoppage, pas bon a voir qui la mis

var _preferences = {
	read: function(record) {
		if (!record.ldpPreferences) {
			record.ldpPreferences = sessionStorage && sessionStorage.getItem("landingpage_" + record.dataset.$uuid);
			record.ldpPreferences = (record.ldpPreferences && JSON.parse(record.ldpPreferences)) || {};
		}
	},
	write: function(record, preferences) {
		record.ldpPreferences[vignetteField.$item.$bind] = preferences;
		sessionStorage && sessionStorage.setItem("landingpage_" + record.dataset.$uuid, JSON.stringify(record.ldpPreferences));
	}
};

function RolePageList(page, dataset) {
	this.page = page;

	this.slot = syra_dom.div("s-ldp-role-pages-slot", page.menuBar.body);
	this.body = syra_dom.ul("s-ldp-role-pages-body", this.slot);
	this.scrollview = syra_dom.div("s-ldp-role-pages-scollview", this.body);
	this.scrollBar = new Scrollbar({
		container: this.body,
		scrollview: this.scrollview
	});
	this.$prototype = page.$prototype.$properties.rolePages;
	this.resize = function(height) {
		this.body.style.height = height + "px";
		this.scrollBar.resize();
	};
	this.dispose = function() {
		this.scrollBar.dispose();
		this.sortable && this.sortable.dispose();
		syra_site.disposeObject(this);
	};
	this.addChildren = function() {
		var records = this.page.dataset.rolePages;
		this.children = [];
		if (records) {
			for (var ii = 0, jj = records.length; ii < jj; ii++) {
				this.addChild(records[ii]);
			}
		}
		this.ensureNoChild();
	};
	this.ensureNoChild = function() {
		if (this.children.length) {
			if (this.noChild) {
				syra_dom.remove(this.noChild);
				delete this.noChild;
			}

		} else {
			syra_dom.empty(this.body);
			(this.noChild = syra_dom.li(this.page.$skin + "-no-modules", this.body)).textContent = syra_local.ldpNoPage;
		}
	};
	this.addChild = function(record) {
		var child = new RolePage(this, record);
		this.children.push(child);
		return child;
	};
}

//field.domItem.className += " s-ldpm-user-pages";
//field.domTitle.className += " s-ldpm-user-pages";
function UserPageList(page, dataset) {
	this.page = page;

	this.slot = syra_dom.div("s-ldp-user-pages-slot", page.menuBar.body);
	this.header = syra_dom.div("s-ldp-user-pages-header", this.slot);
	this.title = syra_dom.text("s-ldp-user-pages-title", syra_local.ldpUserPages, this.header);
	this.actions = syra_dom.div("s-ldp-user-pages-actions", this.header);
	this.$prototype = page.$prototype.$properties.userPages;
	var $create = this.$prototype.$links && this.$prototype.$links.$create;
	if ($create) {
		syra_button.add({
			parent: this,
			slot: this.actions,
			text: $create.$title,
			css: "s-nav-edit-list-action",
			$create: $create,
			fontIcon: "create",
			click: function() {}
		});
	}
	this.body = syra_dom.ul("s-ldp-user-pages-body", this.slot);
	this.scrollview = syra_dom.div("s-ldp-user-pages-scollview", this.body);
	this.scrollBar = new Scrollbar({
		container: this.body,
		scrollview: this.scrollview
	});

	this.resize = function(height) {
		this.body.style.height = height + "px";
		this.scrollBar.resize();
	};
	this.dispose = function() {
		this.scrollBar.dispose();
		this.sortable && this.sortable.dispose();
		syra_site.disposeObject(this);
	};
	this.addChildren = function() {
		var records = this.page.dataset.userPages;
		this.children = [];
		if (records) {
			for (var ii = 0, jj = records.length; ii < jj; ii++) {
				this.addChild(records[ii]);
			}
		}
		this.ensureNoChild();
	};
	this.ensureNoChild = function() {
		if (this.children.length) {
			if (this.noChild) {
				syra_dom.remove(this.noChild);
				delete this.noChild;
			}

		} else {
			syra_dom.empty(this.body);
			(this.noChild = syra_dom.li(this.page.$skin + "-no-modules", this.body)).textContent = syra_local.ldpNoPage;
		}
	};
	this.addChild = function(record) {
		var child = new UserPage(this, record);
		this.children.push(child);
		return child;
	};
}

function RolePage(list, dataset) {
	this.list = list;
	syra_item.initialize(list.page, this);
	this.$prototype = list.page.$prototype.$properties.rolePages.$item;
	this.dataset = dataset || {};
	this.articleParent = this.boxParent = list.page;

	this.slot = syra_dom.li("s-ldp-role-page");
	this.slot.syraItem = this.slot.syrainout = this.id;
	this.slot.syraOnClick = "click";

	this.title = syra_dom.span("s-ldp-role-page-title", this.slot);
	this.title.textContent = this.dataset.title;
	if (dataset.description && dataset.description != dataset.title) {
		this.slot.title = dataset.description;
	}
	list.body.appendChild(this.slot);
	list.page.newRecordsMap[dataset.$uuid] = this;
	_preferences.read(this);
}

RolePage.prototype.click = function() {
	if (this.page.lastSelected != this) {
		this.activate(true);
	}
};
RolePage.prototype.activate = function(on) {
	if (on) {
		if (this.page.pageActivateTimer) {
			clearTimeout(this.page.pageActivateTimer);
			delete this.page.pageActivateTimer;
		}
		this.page.lastSelected && this.page.lastSelected.activate(false);
		this.page.lastSelected = this;
	} else {
		if (this == this.page.lastSelected) {
			this.page.lastSelected = null;
		}
	}
	syra_dom.toggleClass(this.slot, "s-selected", on);
};

RolePage.prototype.onItemInOut = function(onEnter, event, target) {
	var self = this;
	if (onEnter) {
		self.page.pageActivateTimer = setTimeout(function() {
			if (self.page && !self.page.disposed) {
				self.activate(true);
			}
		}, 300);
	} else {
		if (self.page && self.page.pageActivateTimer) {
			clearTimeout(self.page.pageActivateTimer);
			delete self.page.pageActivateTimer;
		}
	}
};

function UserPage(list, dataset) {
	this.list = list;
	syra_item.initialize(list.page, this);
	this.$prototype = list.page.$prototype.$properties.userPages.$item;
	this.dataset = dataset || {};
	this.articleParent = this.boxParent = list.page;

	this.slot = syra_dom.li("s-ldp-user-page");
	this.slot.syraItem = this.slot.syrainout = this.id;
	this.slot.syraOnClick = "click";
	syra_dom.div("s-ldp-user-page-reorder", this.slot).syraSortableHandle = "userpages";
	this.title = syra_dom.span("s-ldp-user-page-title", this.slot);
	this.title.textContent = this.dataset.title;
	if (dataset.description && dataset.description != dataset.title) {
		this.slot.title = dataset.description;
	}
	var $links = this.$prototype.$links;
	var actions = syra_dom.div("s-ldp-user-page-actions", this.slot);
	if ($links.$edit) {
		syra_button.add({
			parent: this,
			slot: actions,
			text: $links.$edit.$title,
			css: "s-ldp-user-page-action",
			$edit: $links.$edit,
			fontIcon: "edit",
			iconOnly: true,
			click: function() {

			}
		});
	}
	if ($links.$delete) {
		syra_button.add({
			parent: this,
			slot: actions,
			text: syra_local.flDelete,
			fontIcon: "delete",
			$delete: $links.$delete,
			css: "s-ldp-user-page-action",
			iconOnly: true,
			click: function() {

			}
		});
	}
	list.body.appendChild(this.slot);
	list.page.newRecordsMap[dataset.$uuid] = this;
	_preferences.read(this);
}

UserPage.prototype.click = function() {
	if (this.page.lastSelected != this) {
		this.activate(true);
	}
};
UserPage.prototype.activate = function(on) {
	if (on) {
		if (this.page.pageActivateTimer) {
			clearTimeout(this.page.pageActivateTimer);
			delete this.page.pageActivateTimer;
		}
		this.page.lastSelected && this.page.lastSelected.activate(false);
		this.page.lastSelected = this;
	} else {
		if (this == this.page.lastSelected) {
			this.page.lastSelected = null;
		}
	}
	syra_dom.toggleClass(this.slot, "s-selected", on);
};

UserPage.prototype.onItemInOut = function(onEnter, event, target) {
	var self = this;
	if (onEnter) {
		self.page.pageActivateTimer = setTimeout(function() {
			if (self.page && !self.page.disposed) {
				self.activate(true);
			}
		}, 300);
	} else {
		if (self.page && self.page.pageActivateTimer) {
			clearTimeout(self.page.pageActivateTimer);
			delete self.page.pageActivateTimer;
		}
	}
};

exports.RolePageList = RolePageList;
exports.UserPageList = UserPageList;