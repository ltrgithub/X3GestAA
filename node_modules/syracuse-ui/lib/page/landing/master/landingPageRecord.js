"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;
var LandingPageChild = require('syracuse-ui/lib/page/landing/landingPageChild').LandingPageChild;

function LandingPageRecord() {}

exports.LandingPageRecord = helpers.defineClass(LandingPageRecord, RecordArticle, {
	loadLandingPreferences: function() {
		if (!this.landingPreferences) {
			this.landingPreferences = sessionStorage.getItem("landingpage_" + this.$uuid);
			this.landingPreferences = (this.landingPreferences && JSON.parse(this.landingPreferences)) || {};
		}
		return this.landingPreferences;
	},
	getVignettePreferences: function(vignetteId) {
		return this.landingPreferences[vignetteId] || {};
	},
	setVignettePreferences: function(vignetteId, preferences) {
		this.landingPreferences[vignetteId] = preferences;
		sessionStorage.setItem("landingpage_" + this.$uuid, JSON.stringify(this.landingPreferences));
	},
	loadBox: function() {
		this.$defaultSkinSection = this.$defaultSkinBlock = this.list.$item.$skinCard || "s-h3";
		RecordArticle.prototype.loadBox.call(this);
	},
	resizeRecord: function(resize) {
		RecordArticle.prototype.resizeRecord.call(this, resize);
		if (this.childPage) {
			this.childPage.resizePage(resize);
		}
	},
	reorderItem: function(targetRecord, isAfter) {
		if (targetRecord) {
			targetRecord.domItem.parentNode.insertBefore(this.domItem, isAfter ? targetRecord.domItem.nextSibling : targetRecord.domItem);
		} else {
			if (isAfter) {
				this.list.body.appendChild(this.domItem);
			} else {
				this.list.body.insertBefore(this.domItem, this.list.body.firstChild);
			}
		}
	},
	applyChange: function(metaData) {
		RecordArticle.prototype.applyChange.call(this, metaData);
		if (this.dataset.description && this.dataset.description != this.dataset.title) {
			this.domItem.title = this.dataset.description;
		}
		if (this.childPage && metaData && metaData.vignettes) {
			this.loadVignettesInChildPage(metaData.vignettes);
		}
	},
	drawBox: function() {
		this.isReorderDisabled = this.list.isRoleList();
		this.$isVerticalDirection = true;
		this.dataRow = this.domItem = document.createElement("div");
		this.$skin = "s-ldpm-record";
		this.domItem.className = this.$skin;
		this.domItem.syraRecord = this.$uuid;
		this.domItem.setAttribute("data-s-record", this.$uuid);
		this.domItem.syrainout = this.domItem.syraItem = this.id;
		this.dataSlot = this.body = document.createElement("div");
		this.body.className = this.$skin + "-title";
		this.domItem.appendChild(this.body);

		this.menusSlot = document.createElement("div");
		if (!this.list.isRoleList()) {
			this.menusSlot.className = this.$skin + "-links";
			this.domItem.appendChild(this.menusSlot);
		}

		this.applyReorderCapability(true);

		if (this.list.selector.isRowMode) {
			this.body.syraOnClick = "onSelectorClick";
			this.body.className += " s-list-selector-row";
			this.body.setAttribute("data-s-record", this.$uuid);
		}
		this.cardItem = this.page.loadNewItem(this.body, {
			$bind: "title",
			$isMenusHidden: true,
			$isDetailLinkDisabled: true,
			$category: "field",
			$isEditMode: this.$isEditMode,
			$inplace: true,
			$css: "s-ldpm-title-field"
		}, this);
		this.list._core.appendChild(this.domItem);
		this.applyRecordCapabilities();
	},
	_createMenusBox: function() {
		if (!this._isMenuLoaded) {
			this._isMenuLoaded = true;
			if (!this.list.isRoleList()) {
				this.page.loadNewItem(this.menusSlot, this.list.defineNewIconMenu("$edit", this.$skin + "-link", true), this);
				this.page.loadNewItem(this.menusSlot, this.list.defineNewIconMenu("$delete", this.$skin + "-link", true), this);
			}
		}
	},
	highlightSelection: function(selected) {
		document.site.dom.toggleClass(this.domItem, "s-list-record-selected", selected);
		this.selectChildLanding(selected);
	},
	loadVignettesInChildPage: function(vignettes) {
		var $fields = {};
		var $diagnoses = [];
		if (vignettes) {
			this.loadLandingPreferences();
			for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
				var source = helpers.object.clone(vignettes[ii]);
				if (source.$links && source.$links.$location) {
					var preferences = this.getVignettePreferences(source.bind);
					var $altLocation = preferences && preferences.$location;
					source.$links.$location.$url = document.site.expressionMaker.parse(this.page, source.$links.$location.$url);
					if ($altLocation) {
						$altLocation.$url = document.site.expressionMaker.parse(this.page, $altLocation.$url);
					}
					$fields[source.bind] = {
						$vignetteId: source.$uuid,
						$type: "application/x-vignette",
						$title: source.$links.$location.$title,
						$location: source.$links.$location,
						$altLocation: $altLocation
					};
				} else {
					$diagnoses.push({
						$message: this.page.localize.ldpVignetteNoLocation.replace("{0}", source.bind),
						$severity: "warning"
					});
				}
			}
		}
		if ($diagnoses.length) {
			this.page.showDiagnoses({
				$diagnoses: $diagnoses
			});
		}
		if (!this.childPage) {
			this.childPage = document.site.loadNewPage({
				$pageCategoryClass: LandingPageChild,
				layoutSlot: this.page.childSlot,
				$category: "dashboard",
				openerUrlSegments: this.page.openerUrlSegments,
				$representation: {
					$prototype: {
						masterRecord: this,
						$title: this.dataset.title,
						$properties: $fields
					},
					$article: (this.dataset.stdLayout && this.dataset.stdLayout.content) || null
				}
			});
		} else {
			this.childPage.applyVignettesChange($fields);
		}
		return this.childPage;
	},
	getSaveDesignLink: function() {
		var stdLayout = this.$prototype.$properties.stdLayout;
		return stdLayout && stdLayout.$item && stdLayout.$item.$links && stdLayout.$item.$links.$save;
	},
	selectChildLanding: function(selected) {
		var page = this.page;
		if (selected) {
			if (this.page.selectedPageRecord && this.list != this.page.selectedPageRecord.list) {
				this.page.selectedPageRecord.list.selector.select(this.page.selectedPageRecord.dataset.$uuid, false);
			}
			this.page.selectedPageRecord = this;
			this.loadVignettesInChildPage(this.dataset.vignettes);
			this.page.childSlot.appendChild(this.childPage.domItem);
			this.page.preferences.$selected = this.dataset.$uuid;
			this.page.savePreferences();
			this.page.setTitle(this.page.$item.$title = this.childPage.getTitle());
			document.site.updateDocumentTitle();
			this.childPage.ensurePageVisibility();
		} else {
			if (this.page.selectedPageRecord == this) {
				this.page.selectedPageRecord = null;
			}
			if (this.childPage) {
				document.site.dom.removeChild(this.childPage.domItem);
			}
		}
	},
	dispose: function() {
		if (this.page && this.page.selectedPageRecord == this) {
			this.selectChildLanding(false);
		}
		if (this.childPage) {
			this.removeItem(this.childPage, true);
		}
		this.childPage = this.cardItem = this.dataSlot = this.body = this.menusSlot = this.dataRow = null;
		RecordArticle.prototype.dispose.call(this);
	}
});