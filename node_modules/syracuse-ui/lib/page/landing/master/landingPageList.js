"use strict";
var helpers = require('syracuse-core/lib/helpers');
var LandingPageRecord = require("./landingPageRecord").LandingPageRecord;
var MultiList = require("syracuse-ui/lib/field/array/multiList").MultiList;

function LandingPageList() {

}

exports.LandingPageList = helpers.defineClass(LandingPageList, MultiList, {
	loadBox: function(initData) {
		this.emptyMessage = this.localize.ldpNoPage;
		this.$confirmDelete = this.localize.ldpConfirmDelete;
		this.$isEditMode = false;
		this.$isQuickDesignerDisabled = true;
		this.$item.$iconPath = "page/s-ldp-";
		this.$item.$skinMenus = "s-nav-list-menus";
		this.$item.$isPagerHidden = true;
		this.$item.$selectMode = "row";
		MultiList.prototype.loadBox.call(this, initData);
	},
	saveReorder: function(reorderRecord, targetRecord, isAfter) {
		var self = this;
		if (!self.isRoleList()) {
			self.page.preferences.pages = [];
			var children = reorderRecord.domItem.parentNode.children;
			for (var ii = 0, jj = children.length; ii < jj; ii++) {
				self.page.preferences.pages.push(children[ii].getAttribute("data-s-record"));
			}
			var reorderIndex = self.page.preferences.pages.indexOf(reorderRecord.$uuid);
			var targetIndex = self.page.preferences.pages.indexOf(targetRecord.$uuid);
			self.page.preferences.pages.splice(reorderIndex, 1);
			if (targetIndex > reorderIndex) {
				reorderIndex = isAfter ? targetIndex : (targetIndex - 2);
			} else {
				reorderIndex = isAfter ? targetIndex + 1 : (targetIndex);
			}
			reorderIndex = Math.max(reorderIndex, 0);
			self.page.preferences.pages.splice(reorderIndex, 0, reorderRecord.$uuid);
			self.page.savePreferences();
			self.applyOrderPreferences();
		}
		return false;
	},
	applyOrderPreferences: function() {
		if (!this.isRoleList() && this.page.preferences.pages) {
			if (this.records && this.records.length) {
				var orders = [];
				for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
					orders.push(this.records[ii].$uuid);
				}
				for (var ii = 0, jj = this.page.preferences.pages.length; ii < jj; ii++) {
					var $uuid = this.page.preferences.pages[ii];
					var record = this.recordsMap[$uuid];
					if (record) {
						record.domItem.parentNode.appendChild(record.domItem);
						orders.splice(orders.indexOf($uuid), 1);
					}
				}
				for (var ii = 0, jj = orders.length; ii < jj; ii++) {
					var record = this.recordsMap[orders[ii]];
					record.domItem.parentNode.appendChild(record.domItem);
				}
			}
		}
	},
	isRoleList: function() {
		return this.$item.$bind == "rolePages";
	},
	drawBox: function() {
		MultiList.prototype.drawBox.call(this);
		this.body = this._core;
		this.fieldValue.style.overflow = "auto";
		this.$skin = this.$item.$skin || "s-cards";
		this.applyDesignMetaData(this.$item, false);
		this.loadSelector();
		this.applyCapabilities();
		document.site.ddManager.toggleColResizerObserver(this, true);
		this.ensureLayoutMode();
		this.layoutSlot.appendChild(this.domItem);
	},
	initializeList: function() {
		this.$item.$isTopLabelAlignment = true;
		this.RecordClass = LandingPageRecord;
		if (!this.$item.$layout || !this.$item.$layout.$items) {
			this.$item.$layout = this.defineDefaultCard().$layout;
		}
		MultiList.prototype.initializeList.call(this);
	},
	fillList: function(dataRecordSet, parentDataRecord, isDelta) {
		/*if (this.dataset) {
         for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
         this.dataset[ii].title = this.dataset[ii].$uuid;
         }
         }*/
		MultiList.prototype.fillList.call(this, dataRecordSet, parentDataRecord, isDelta);
		this.applyOrderPreferences();
	},
	_createMenusBox: function() {
		if (!this.isMenuLoaded) {
			this.isMenuLoaded = true;
			var $item;
			($item = this.defineNewIconMenu("$create", this.$skinMenus + "-link")).$icon.$value = "new-ldp";
			this.page.loadNewItem(this.menusSlot, $item, this);
			($item = this.defineNewIconMenu("$select", this.$skinMenus + "-link")).$icon.$value = "select-ldp";
			this.page.loadNewItem(this.menusSlot, $item, this);
		}
	},
	isDraggable: function(target, event) {
		return this.isReorderRecordDraggable(target, event);
	},
	dispose: function() {
		document.site.emptyDom(this._core);
		MultiList.prototype.dispose.call(this);
	}
});