"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var BarSplitter = require("syracuse-ui/lib/page/bar/barSplitter").BarSplitter;
var ListBuilder = require('syracuse-ui/lib/page/landing/listBuilder').ListBuilder;
var MultiArrayField = require("syracuse-ui/lib/field/array/multiArrayField").MultiArrayField;

function _addVignette(page) {
	page = page || this.parent;
	var $url = syra_url.formatMenuUrl(page.ldpRecord, page.ldpRecord.ldp_getAddLink(), page.ldpRecord);
	syra_site.dialogManager.openPage(page, {
		article: page,
		$url: $url,
		$isOkHidden: true,
		onValidate: function(searchPage) {
			var sels = searchPage.selectedVignettes;
			if (sels) {
				var sendBag = syra_workingCopy.getSendBag(page.ldpRecord);
				sendBag.vignettes = sendBag.vignettes || [];
				var $serverIndex = page.ldpRecord.dataset.vignettes.length + sendBag.vignettes.length;
				for (var ii = 0, jj = sels.length; ii < jj; ii++) {
					var sel = sels[ii];
					sendBag.vignettes.push({
						$uuid: helpers.uuid.generate(),
						$index: $serverIndex++,
						vignette: {
							$uuid: sel.vignette.$key || sel.vignette.$uuid,
							title: sel.vignette.title
						},
						endpoint: {
							$uuid: sel.endpoint.$uuid
						}
					});
				}
				page.notifyChangeToServer(sendBag, page.ldpRecord, true);
			}
		}
	});
}


function LandingPage() {}

exports.LandingPage = helpers.defineClass(LandingPage, DesktopPage, {
	onExecuteMenuResponse: function($bind, record, responseData) {
		if ($bind == "$delete") {
			var list = record.list;
			list.filler.removeRecord(record, true, true);
			if (list.records.length == 0) {
				list.emptyBody(true);
			}!this.ldpRecord && this._ensureRecordSelection();
		}
	},

	saveLandingDesign: function() {
		var self = this;
		var sendBag = {
			$etag: 1,
			$url: syra_url.formatMenuUrl(self.ldpRecord, self.ldpRecord.ldp_getSaveLink())
		};
		sendBag.content = syra_site.layoutUpdater.cleanBeforeSave(helpers.object.clone(self.$item, true));
		delete sendBag.content.$menus;
		delete sendBag.content.$isModel;
		syra_controller.callServer(self, {
			$location: {
				$url: sendBag.$url
			},
			data: sendBag,
			method: "PUT",
			$etag: sendBag.$etag
		}, function(data, response, requestUrl) {
			if (!self.disposed) {
				//debugger;

			}
		});
	},
	deleteOpenedTab: function() {
		var self = this;
		var box = self.layoutContent.getOpenedTab();
		if (box && box.layoutContent) {
			var vignettes = box.layoutContent.getFields();
			syra_diagnose.box.show({
				$title: syra_local.ldpDeleteVignette,
				$message: syra_local.ldpConfirmTabDeleteVignette.replace("{0}", box.getTitle()),
				$type: "question",
				callback: function(response) {
					if (response && response.$clientId === "yes") {
						var uiids = [];
						for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
							uiids.push(vignettes[ii].$field.$vignetteId);
						}
						var fields = box.layoutContent.getFields();
						for (var ii = 0, jj = fields.length; ii < jj; ii++) {
							self.removeItem(fields[ii], true, true);
						}
						box.layoutParent.removeItem(box, true);
						self.ldpRecord.ldp_deleteVignettes(uiids);
					}
				}
			});
		}
	},

	getDataUrl: function(article) {
		article = article || this;
		var $parsedUrl = syra_site.expressionMaker.parse(article, article.dataset.$url || article.$prototype.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	initializePage: function($itemPage) {
		return {
			$layout: {
				$items: []
			}
		};
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "rolePages":
			case "userPages":
				var list = this[$item.$bind] = new MultiArrayField();
				$field.$builderClass = ListBuilder;
				list.ldp_isUserList = $item.$bind == "userPages";
				list.$confirmDelete = syra_local.ldpConfirmDelete;
				list.$isEditMode = false;
				list.$isQuickDesignerDisabled = true;
				list.createMenuItem = function($bind, $menu) {
					return this.page.loadNewItem(null, {
						$category: "link",
						$menu: $menu,
						$bind: $bind,
						$skin: "s-mn-list-btn s-mn-link",
						$icon: {
							$mode: "iconText"
						}
					}, this);
				};
				list.$addMaximize = list.$addRefresh = false;
				$item.$isPagerHidden = true;
				$item.$selectMode = "row";
				return list;
		}
		return null;
	},
	savePreferences: function() {
		syra_site.setPreferences("landingpage", this.preferences);
	},
	loadBox: function(initData) {
		this.isMenuBarDisabled = true;
		this.isAutoInsertFieldDisabled = true;
		this.isBackButtonDisabled = true;
		this.mainPageDesignerAccess = "unknow";

		this.preferences = syra_site.getPreferences("landingpage", {});

		this.$defaultSkinBlock = "s-ldp-h2";
		this.$defaultSkinSection = "s-ldp-h1";
		this.$skin = "s-ldp";
		this.isLandingPage = true;
		syra_site.landingPageMaster = this;

		this.$isEditMode = true;

		var data = {};
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.loadBox.call(this, data);

		this.menuBar = new BarSplitter();
		this.menuBar.preferenceKey = "ldpbar";
		this.menuBar.options = {
			resizeDirection: "left",
			$viewMode: "dock",
			$skin: "s-ldpm-bar"
		};
		this.menuBar.slot = document.createElement("div");
		this.menuBar.slot.className = "s-ldpm-bar-slot";
		this.menuBar.body = document.createElement("div");
		this.menuBar.body.className = "s-ldpm-bar-body";
		if (this.$facet != "$landing_edit") {
			this.domItem.insertBefore(this.menuBar.slot, this.domItem.firstChild);
		}
		this.menuBar.load(this);

		this.loadNewItem(this.menuBar.body, {
			$isTitleHidden: true,
			$bind: "rolePages"
		});

		if (syra_site.userProfile.hasDesignRight()) {
			var field = this.loadNewItem(this.menuBar.body, {
				$title: syra_local.ldpUserPages,
				$bind: "userPages"
			});
			field.domItem.className += " s-ldpm-user-pages";
			field.domTitle.className += " s-ldpm-user-pages";
		}

		var slot = document.createElement("div");
		slot.className = "s-ldp-head-btns";
		this.addVignetteBtn = syra_menus.button.add({
			parent: this,
			slot: slot,
			isHidden: true,
			text: syra_local.ldpAddVignette,
			css: "s-ldp-btn",
			iconOnly: true,
			fontIcon: "create",
			isHidden: true,
			shortCutTip: syra_shortCuts.tip.create,
			btnclick: _addVignette
		});

		this.refreshBtn = syra_menus.button.add({
			parent: this,
			slot: slot,
			text: syra_local.ldpRefresh,
			css: "s-ldp-btn",
			iconOnly: true,
			fontIcon: "refresh",
			shortCutTip: syra_shortCuts.tip.refresh,
			btnclick: function() {
				var items = this.parent.layoutContent.getFields();
				for (var ii = 0, jj = items.length; ii < jj; ii++) {
					items[ii].refresh(true);
				}
			}
		});

		this.designBtn = syra_menus.button.add({
			parent: this,
			slot: slot,
			isHidden: true,
			text: syra_local.ldpOpenDesigner,
			css: "s-ldp-btn",
			iconOnly: true,
			fontIcon: "design",
			isHidden: true,
			btnclick: function() {
				this.parent.designer.toggleDesigner();
			}
		});
		this.addTabBtn = syra_menus.button.add({
			parent: this,
			isHidden: true,
			text: "+",
			title: syra_local.ldpAddTab,
			css: "s-ldp-add-tab",
			shortCutTip: syra_shortCuts.tip.newTab,
			btnclick: function() {
				this.parent.createNewTab();
				this.parent.designer.endArticleUpdate();
			}
		});
		this.header.appendChild(slot);

		this._ensureRecordSelection();
	},
	onAfterLoad: function() {
		DesktopPage.prototype.onAfterLoad.call(this);
		this.ldpRecord && this.ldpRecord.scrollToRecord();
	},
	onMenuClick: function(menuItem) {
		var self = this;
		if (!menuItem.$isAction) {
			switch (menuItem.$sourceBind) {
				case "delete":
					return false;
				case "$create":
				case "$edit":
					syra_site.dialogManager.openPage(self, {
						article: menuItem.articleParent,
						$url: menuItem.$url,
						$method: menuItem.$method,
						onServerSaved: function(saveItem, dialog) {
							dialog.options.article.notifyClientSave(dialog._content.dataset);
							var $uuid = dialog._content.dataset.$uuid;
							dialog.close(true);
							var record = self.userPages.recordsMap[$uuid];
							delete self.ldpRecord;
							self.userPages.selector.selectRecord(record, true);
							if (menuItem.$sourceBind == "$create") {
								_addVignette(self);
								self.userPages.builder.saveReorder();
								syra_site.ensureArticleVisibility(self);
							}
							return false;
						},
						onClose: function(isCanceled, dispose) {
							return true;
						}
					});
					return false;
			}
		}
		return true;
	},
	notifyChangeToServer: function(sendBag, article, onUpdateContent) {
		var self = this;
		article = article || this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.getDataUrl(article);
				sendBag.$etag = article.dataset.$etag;
				syra_site.uiLocker.lock();
				syra_controller.callServer(self, {
					$location: {
						$url: self.getDataUrl(article)
					},
					data: sendBag,
					method: "PUT",
					$etag: sendBag.$etag
				}, function(newData, response, requestUrl) {
					try {
						if (!article.disposed) {
							if (article.page != article) {
								syra_site.deltaManager.applyObjectDelta(article.page, article.dataset, newData);
							}
							article.applyChange(newData, response, requestUrl);
							if (onUpdateContent) {
								delete self.ldpRecord;
								self.userPages.selector.selectRecord(article, true);
								syra_site.ensureArticleVisibility(self);
								self.designer.endArticleUpdate();
							} else {
								syra_site.ensureArticleVisibility(self);
							}
						}
					} finally {
						syra_site.uiLocker.unlock();
					}
				}, function() {
					syra_site.uiLocker.unlock();
				});
			}
		}
	},
	_ensureRecordSelection: function(ignoreLastSelected) {
		var $uuid = (!ignoreLastSelected) ? (this.preferences.$selected || this.dataset.$selected) : undefined;
		if (!$uuid) {
			$uuid = this.userPages && this.userPages.dataset && this.userPages.dataset.length && this.userPages.dataset[0].$uuid;
			if (!$uuid) {
				$uuid = this.rolePages.dataset && this.rolePages.dataset.length && this.rolePages.dataset[0].$uuid;
			}
		}
		if ($uuid) {
			var record = this.rolePages.recordsMap[$uuid];
			if (record) {
				this.userPages && this.userPages.selector.unSelectAll();
				this.rolePages.selector.selectRecord(record, true);
			} else {
				record = this.userPages && this.userPages.recordsMap[$uuid];
				if (record) {
					this.rolePages.selector.unSelectAll();
					this.userPages.selector.selectRecord(record, true);
				}
			}
		}
		if (!this.ldpRecord && !ignoreLastSelected) {
			this._ensureRecordSelection(true);
		}
	},
	onSectionOpenerClick: function(box) {
		if (box && box.isTabLayout) {
			this.designer && this.designer.onTabClik(box);
			this.preferences.tabs = this.preferences.tabs || {};
			this.preferences.tabs[this.ldpRecord.$uuid] = box.layoutParent.items.indexOf(box);
			this.savePreferences();
		}
		return true;
	},
	createNewTab: function() {
		var tab = this.layoutContent.loadChildItem(null, {
			$category: "section",
			$isEmptyVisible: true,
			$title: syra_site.localizer.getDefaultTabTitle(this),
		});
		tab.openBox(true);
		if (this.addTabBtn) {
			this.layoutContent.ensureTabsSlot().appendChild(this.addTabBtn.link);
		}
		return tab;
	},
	dispose: function() {
		delete syra_site.landingPageMaster;
		DesktopPage.prototype.dispose.call(this);
	}
});