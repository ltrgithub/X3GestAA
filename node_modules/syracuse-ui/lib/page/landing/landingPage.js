"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var SideBar = require("syracuse-ui/lib/page/aside/sideBar").SideBar;
var ListBuilder = require('syracuse-ui/lib/page/landing/listBuilder').ListBuilder;
var MultiArrayField = require("syracuse-ui/lib/field/array/multiArrayField").MultiArrayField;
var Designer = require("syracuse-ui/lib/authoring/landingPageDesigner").Designer;

function LandingPage() {}

exports.LandingPage = helpers.defineClass(LandingPage, DesktopPage, {
	onExecuteMenuResponse: function($bind, record, responseData) {
		if ($bind == "$delete") {
			var self = this;
			var list = record.list;
			var delta = {};
			var index = syra_dom.getNodeIndex(record.domItem);
			delta[record.list.$item.$bind] = [{
				$uuid: record.$uuid,
				$isDeleted: true,
				$index: record.$serverIndex
			}];
			self.page.applyChange(delta);
			setTimeout(function() {
				if (!self.ldpRecord) {
					index = Math.min(index, list._core.childNodes.length - 1);
					if (index >= 0) {
						record = syra_item.findItem(list._core.childNodes[index]);
						if (record) {
							list.selector.selectRecord(record, true);
							return;
						}
					}
					self._ensureRecordSelection();
				}
			}, 10);
		}
	},
	saveLayoutContent: function() {
		var record = this.ldpRecord;
		this.addTabBtn && this.layoutContent.ensureTabsSlot().appendChild(this.addTabBtn.link);
		syra_locker.lock();
		var sendBag = {
			$etag: 1,
			$url: syra_url.formatMenuUrl(record, record.ldp_getSaveLink())
		};
		sendBag.content = syra_layoutUpdater.cleanBeforeSave(this.$item);
		delete sendBag.content.$menus;
		delete sendBag.content.$isModel;
		syra_ajax.put({
			page: this,
			url: sendBag.$url,
			data: sendBag,
			$etag: sendBag.$etag,
			success: function(data, response, requestUrl) {
				try {
					if (!record.disposed && data.content) {
						(record.dataset.stdLayout = record.dataset.stdLayout || {}).content = data.content;
					}
				} finally {
					syra_locker.unlock();
				}
			},
			error: function() {
				syra_locker.unlock();
				return true;
			}
		});
	},
	updateWorkingCopy: function(sendBag, article, onUpdateContent) {
		var self = this;
		article = article || this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.getDataUrl(article);
				sendBag.$etag = article.dataset.$etag;
				syra_locker.lock();
				syra_ajax.put({
					page: self,
					url: self.getDataUrl(article),
					data: sendBag,
					$etag: sendBag.$etag,
					success: function(newData, response, requestUrl) {
						try {
							if (!article.disposed) {
								if (article.page != article) {
									syra_dataset.applyDelta(article.page, article.dataset, newData);
								}
								article.applyChange(newData, response, requestUrl);
								if (onUpdateContent) {
									delete self.ldpRecord;
									self.userPages.selector.selectRecord(article, true, true);
								} else {
									syra_site.ensureArticleVisibility(self);
								}
							}
						} finally {
							syra_locker.unlock();
						}
					},
					error: function() {
						syra_locker.unlock();
						return true;
					}
				});
			}
		}
	},
	deleteOpenedTab: function() {
		var self = this;
		var box = self.layoutContent.getOpenedTab();
		if (box && box.layoutContent) {
			var vignettes = box.layoutContent.getFields();
			syra_alert.ask({
				$title: syra_local.ldpDeleteVignette,
				$message: syra_local.ldpConfirmTabDeleteVignette.replace("{0}", box.getTitle()),
				callback: function(response) {
					if (response && response.$clientId === "yes") {
						var uiids = [];
						for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
							uiids.push(vignettes[ii].$field.$vignetteId);
						}
						var fields = box.layoutContent.getFields();
						for (var ii = 0, jj = fields.length; ii < jj; ii++) {
							syra_item.remove(fields[ii], true, true);
						}
						box.layoutParent.removeItem(box, true);
						self.ldpRecord.ldp_deleteVignettes(uiids);
					}
				}
			});
		}
	},
	getDataUrl: function(article) {
		article = article || this;
		var $parsedUrl = syra_expression.parse(article, article.dataset.$url || article.$prototype.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	initializePage: function($itemPage) {
		return {
			$layout: {
				$items: []
			}
		};
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "rolePages":
			case "userPages":
				var list = this[$item.$bind] = new MultiArrayField();
				list.isNoPageUniqueSelection = true;
				$field.$builderClass = ListBuilder;
				list.ldp_isUserList = $item.$bind == "userPages";
				list.$confirmDelete = syra_local.ldpConfirmDelete;
				list.$isEditMode = false;
				list.$isQuickDesignerDisabled = true;
				list.createMenuItem = function($bind, $menu) {
					return this.page.addItem(null, {
						$category: "link",
						$menu: $menu,
						$bind: $bind,
						$skin: "s-mn-list-btn s-mn-link",
						$icon: {
							$mode: "iconText"
						}
					}, this);
				};
				list.$addMaximize = list.$addRefresh = false;
				$item.$isPagerHidden = true;
				$item.$selectMode = "row";
				return list;
		}
		return null;
	},
	saveLandingPreferences: function() {
		syra_preference.profile.save("landingpage", this.$profilePreference);
	},
	loadBox: function(initData) {
		this.isMenuBarDisabled = true;
		this.isAutoInsertFieldDisabled = true;
		this.isBackButtonDisabled = true;
		this.mainPageDesignerAccess = "unknow";
		this.$profilePreference = syra_preference.profile.get("landingpage") || {};
		this.$profilePreference.tabs = this.$profilePreference.tabs || {};
		this.$defaultSkinBlock = "s-ldp-h2";
		this.$defaultSkinSection = "s-ldp-h1";
		this.$skin = "s-ldp";
		this.isLandingPage = true;
		syra_site.landingPage = this;
		this.$isEditMode = true;
		var data = {};
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.loadBox.call(this, data);
		this.menuBar = new SideBar();
		this.menuBar.preferenceKey = "ldpbar";
		this.menuBar.options = {
			resizeDirection: "left",
			$skin: "s-ldpm-bar"
		};
		this.menuBar.slot = syra_dom.addDiv("s-ldpm-bar-slot");
		this.menuBar.body = syra_dom.addDiv("s-ldpm-bar-body");
		if (this.$facet != "$landing_edit") {
			this.domItem.insertBefore(this.menuBar.slot, this.domItem.firstChild);
		}
		this.menuBar.load(this);
		this.addItem(this.menuBar.body, {
			$isTitleHidden: true,
			$bind: "rolePages"
		});
		if (syra_site.userProfile.hasDesignRight()) {
			var field = this.addItem(this.menuBar.body, {
				$title: syra_local.ldpUserPages,
				$bind: "userPages"
			});
			field.domItem.className += " s-ldpm-user-pages";
			field.domTitle.className += " s-ldpm-user-pages";
		}
		var slot = document.createElement("div");
		slot.className = "s-ldp-head-btns";
		this.addVignetteBtn = syra_button.add({
			parent: this,
			slot: slot,
			isHidden: true,
			text: syra_local.ldpAddVignette,
			css: "s-ldp-btn",
			iconOnly: true,
			fontIcon: "create",
			shortCutTip: syra_shortCuts.tip.create,
			click: function() {
				this.parent._addVignette();
			}
		});
		this.refreshBtn = syra_button.add({
			parent: this,
			slot: slot,
			text: syra_local.ldpRefresh,
			css: "s-ldp-btn",
			iconOnly: true,
			fontIcon: "refresh",
			shortCutTip: syra_shortCuts.tip.refresh,
			click: function() {
				var items = this.parent.layoutContent.getFields();
				for (var ii = 0, jj = items.length; ii < jj; ii++) {
					var item = items[ii];
					item.refresh && item.refresh(true);
				}
			}
		});
		this.designBtn = syra_button.add({
			parent: this,
			slot: slot,
			text: syra_local.ldpOpenDesigner,
			css: "s-ldp-btn",
			iconOnly: true,
			fontIcon: "design",
			isHidden: true,
			click: function() {
				this.parent.designer.toggleDesigner();
			}
		});
		this.addTabBtn = syra_button.add({
			parent: this,
			isHidden: true,
			text: "+",
			title: syra_local.ldpAddTab,
			css: "s-ldp-add-tab",
			shortCutTip: syra_shortCuts.tip.newTab,
			click: function() {
				this.parent.createNewTab();
				this.parent.addVignetteBtn.click();
				this.parent.designer && this.parent.designer.endLayoutDisplay();
			}
		});
		this.header.appendChild(slot);
		this._ensureRecordSelection();
	},
	onAfterLoad: function() {
		DesktopPage.prototype.onAfterLoad.call(this);
		this.ldpRecord && this.ldpRecord.scrollToRecord();
	},
	onMenuClick: function(menuItem) {
		var self = this;
		if (!menuItem.$isAction) {
			switch (menuItem.$sourceBind) {
				case "delete":
					return false;
				case "$create":
				case "$edit":
					syra_dlg.openPage(self, {
						article: menuItem.articleParent,
						$url: menuItem.$url,
						$method: menuItem.$method,
						onServerSaved: function(saveItem, dialog) {
							syra_article.notifyClientSave(dialog.options.article, dialog._content.dataset);
							var $uuid = dialog._content.dataset.$uuid;
							dialog.close(true);
							var record = self.userPages.recordsMap[$uuid];
							if (menuItem.$sourceBind == "$create") {
								self.userPages.selector.selectRecord(record, true);
								self.userPages.builder.saveReorder();
								self.addTabBtn.click();
							} else {
								self.userPages.selector.selectRecord(record, false);
								self.userPages.selector.selectRecord(record, true);
							}
							return false;
						},
						onClose: function(isCanceled, dispose) {
							return true;
						}
					});
					return false;
			}
		}
		return true;
	},

	_ensureRecordSelection: function(ignoreLastSelected) {
		var $uuid = (!ignoreLastSelected) ? (this.$profilePreference.$selected || this.dataset.$selected) : undefined;
		if (!$uuid) {
			$uuid = this.userPages && this.userPages.dataset && this.userPages.dataset.length && this.userPages.dataset[0].$uuid;
			if (!$uuid) {
				$uuid = this.rolePages.dataset && this.rolePages.dataset.length && this.rolePages.dataset[0].$uuid;
			}
		}
		if ($uuid) {
			var record = this.rolePages.recordsMap[$uuid] || (this.userPages && this.userPages.recordsMap[$uuid]);
			record && record.list.selector.selectRecord(record, true);
		}
		if (!this.ldpRecord && !ignoreLastSelected) {
			this._ensureRecordSelection(true);
		}
	},
	section_onAfterOpentTab: function(section) {
		if (this.ldpRecord) {
			this.designer && this.designer.onTabClik(section);
			this.$profilePreference.tabs[this.ldpRecord.$uuid] = this.layoutContent.items.indexOf(section);
		}
	},
	saveSelectedTab: function(box) {
		if (this.layoutContent && this.ldpRecord) {
			var tab = this.layoutContent.getOpenedTab();
			this.saveLandingPreferences();
		}
	},
	createNewTab: function() {
		var tab = this.layoutContent.loadChildItem(null, {
			$category: "section",
			$isEmptyVisible: true,
			$title: syra_localizer.getDefaultTabTitle(this),
		});
		if (this.addTabBtn) {
			this.layoutContent.ensureTabsSlot().appendChild(this.addTabBtn.link);
		}
		tab.titleBtn.link.click();
		return tab;
	},
	_addVignette: function() {
		var self = this;
		var $url = syra_url.formatMenuUrl(self.ldpRecord, self.ldpRecord.ldp_getAddLink(), self.ldpRecord);
		syra_dlg.openPage(self, {
			article: self,
			$url: $url,
			$isOkHidden: true,
			onValidate: function(searchPage) {
				var sels = searchPage.selectedVignettes;
				if (sels) {
					var sendBag = syra_form.getSendBag(self.ldpRecord);
					sendBag.vignettes = sendBag.vignettes || [];
					var $serverIndex = self.ldpRecord.dataset.vignettes.length + sendBag.vignettes.length;
					for (var ii = 0, jj = sels.length; ii < jj; ii++) {
						var sel = sels[ii];
						sendBag.vignettes.push({
							$uuid: helpers.uuid.generate(),
							$index: $serverIndex++,
							vignette: {
								$uuid: sel.vignette.$key || sel.vignette.$uuid,
								title: sel.vignette.title
							},
							endpoint: {
								$uuid: sel.endpoint.$uuid
							}
						});
					}
					self.updateWorkingCopy(sendBag, self.ldpRecord, true);
				}
			}
		});
	},
	switchDesigner: function(open) {
		if (open) {
			this.designer = new Designer();
			this.designer.openDesigner(this);
		} else {
			this.designer && this.designer.dispose();
			delete this.designer;
		}
	},
	dispose: function() {
		this.saveSelectedTab();
		delete syra_site.landingPage;
		DesktopPage.prototype.dispose.call(this);
	}
});