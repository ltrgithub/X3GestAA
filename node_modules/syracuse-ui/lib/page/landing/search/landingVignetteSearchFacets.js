"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require('syracuse-ui/lib/article/article').Article;
var SearchFacets = require('syracuse-ui/lib/site/search/searchFacets').SearchFacets;

function LandingVignetteSearchFacets() {}

exports.LandingVignetteSearchFacets = helpers.defineClass(LandingVignetteSearchFacets, SearchFacets, {
	onCheckChange: function(check, event) {
		if (event.type == "change") {
			var $$check = $(check);
			var $$member = $$check.closest("." + this.$itemSkin + "-member");
			var $$facet = $$member.closest("." + this.$itemSkin);
			var $facet = this.$searchFacets[$$facet[0].getAttribute("s-data-facet-index")];
			var $member = $facet.$members[$$member.index()] || {};

			this._updateFilters($facet.$facet, $member.$value || $member.$title, $$check.is(":checked"));

			// in case no filtering param, no "filters" param to add to the url
			var options = Object.keys(this.filters).length > 0 ? {
				jsonParams: {
					filters: this.filters
				}
			} : {};

			this.page.updateFilterState(options);

			this.fetch(options);
		}
	},
	setDataBind: function($searchFacets, record, metaData) {
		// variables
		var self = this;
		self.filters = {};
		self.hasFacet = null;

		if (self.$searchFacets = $searchFacets) {

			// clean
			syra_site.dom.empty(self.domItem);

			// append "filters" header / title
			var searchFacetsHeader = document.createElement("div");
			searchFacetsHeader.className = this.$skin + "-header";
			var searchFacetsTitle = document.createElement("div");
			searchFacetsTitle.className = this.$skin + "-header-title";
			searchFacetsTitle.textContent = "Filters";
			searchFacetsHeader.appendChild(searchFacetsTitle);
			self.domItem.appendChild(searchFacetsHeader);

			// body
			var searchFacetsBody = document.createElement("div");
			searchFacetsBody.className = this.$skin + "-body";
			self.domItem.appendChild(searchFacetsBody);

			// appending searchFacets
			for (var ii = 0, jj = $searchFacets.length; ii < jj; ii++) {

				if ($searchFacets[ii].$members && $searchFacets[ii].$members.length > 0 && ($searchFacets[ii].$facet == "menuCategory" || $searchFacets[ii].$facet == "menuModule")) {

					self.hasFacet = true;

					var facet = document.createElement("div");
					facet.className = this.$itemSkin;
					facet.setAttribute("s-data-facet-index", ii);

					var body = document.createElement("div");
					body.className = this.$itemSkin + "-body";

					var $searchFacet = $searchFacets[ii];

					// append members for each searchFacet
					for (var mm = 0, pp = $searchFacet.$members.length; mm < pp; mm++) {
						var member = document.createElement("div");
						member.className = this.$itemSkin + "-member";

						var checked = document.createElement("input");
						checked.syraItem = this.id;
						checked.syraOnInput = "onCheckChange";
						checked.className = this.$itemSkin + "-member-check";
						checked.setAttribute("type", "checkbox");
						syra_site.setSpecificAttributes(checked);
						member.appendChild(checked);

						var $member = $searchFacet.$members[mm];
						if ($member.$selected) {
							checked.setAttribute('checked', true);
							self._updateFilters($searchFacet.$facet, $member.$value || $member.$title, true);
						}

						var title = document.createElement("div");
						title.className = this.$itemSkin + "-member-title";
						title.textContent = $member.$title;
						member.appendChild(title);

						var count = document.createElement("div");
						count.className = this.$itemSkin + "-member-count";
						count.textContent = "(" + $member.$count + ")";
						member.appendChild(count);

						// append member links if any
						if ($member.$links) {
							var links = document.createElement("div");
							links.className = this.$itemSkin + "-member-links";
							member.appendChild(links);
							var links = self.page.loadNewItem(links, {
								$category: "menus",
								$skin: "s-list-menus",
								$layout: {
									$items: Object.keys($member.$links).map(function($bind) {
										return {
											$bind: $bind
										};
									})
								}
							}, self);
							self.page.applyChange({
								$links: $member.$links
							});
						}

						body.appendChild(member);
					}


					// facet header
					var header = document.createElement("header");
					header.className = this.$itemSkin + "-header";
					var headerTitle = document.createElement("div");
					headerTitle.className = this.$itemSkin + "-header-title" + " " + $searchFacet.$facet;
					headerTitle.textContent = $searchFacet.$title || $searchFacet.$facet;
					header.appendChild(headerTitle);


					// finalize building
					facet.appendChild(header);
					facet.appendChild(body);

					// module before category
					if ($searchFacets[ii].$facet == "menuCategory") {
						searchFacetsBody.appendChild(facet);
					} else {
						if (searchFacetsBody.children.length > 0) {
							searchFacetsBody.insertBefore(facet, searchFacetsBody.firstChild);
						} else {
							searchFacetsBody.appendChild(facet);
						}
					}
				}
			}
		}
	},
	dispose: function() {
		this.hasFacet = null;
		Article.prototype.dispose.call(this);
	}
});