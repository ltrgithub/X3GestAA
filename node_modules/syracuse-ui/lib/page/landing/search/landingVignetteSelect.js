"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var MenuBar = require('syracuse-ui/lib/page/bar/menuBar').MenuBar;

var _gadgetTypes = ["requests", "processes", "stats", "representation", "calendar", "extLink"];

function _gotoPage2(page, show) {
	page.idMap["s-sv-page-2"].setState({
		$isHidden: !show
	});
	page.idMap["s-sv-page-1"].setState({
		$isHidden: show
	});
}

function _updateBrowseViewDisplay(page, show) {
	syra_site.dom.empty(page.idMap["s-sv-browse-section"].body);
	page.idMap["s-sv-browse-section"].body.appendChild(page.browseView);
	page.idMap["s-sv-browse-section"].setTitle(page.selectedCategoryTitle);
	page.idMap["s-sv-browse-section"].setState({
		$isHidden: !show
	});
	syra_site.dom.toggleClass(page.idMap["s-sv-browse-section"].domTitle, "s-disabled");
}

function _onVignetteAdd(page, vignette) {
	page.selectedVignettes.push({
		vignette: vignette,
		endpoint: {
			$uuid: page.selectedEndpoint.$uuid
		}
	});
	page.dialogWrapper.hideOkButton(false);
}

function _findSelectedVignette(page, $uuid) {
	for (var ii = 0, jj = page.selectedVignettes.length; ii < jj; ii++) {
		var sel = page.selectedVignettes[ii];
		if ((sel.vignette.$key || sel.vignette.$uuid) == $uuid) {
			return sel;
		}
	}
	return null;
}

function _formatResourcesData($dataResources) {
	var $resources = [];
	for (var ii = 0, jj = $dataResources.length; ii < jj; ii++) {
		var res = $dataResources[ii];
		res.properties = "";
		if (res.module) {
			var span = document.createElement("span");
			span.className = "s-sv-search-res-mod-value";
			span.textContent = res.module;
			res.properties += span.outerHTML + " | ";
		}
		if (res.categories) {
			for (var mm = 0, pp = res.categories.length; mm < pp; mm++) {
				var span = document.createElement("span");
				span.className = "s-sv-search-res-cat-value";
				span.textContent = res.categories[mm];
				res.properties += span.outerHTML;
				res.properties += mm == pp - 1 ? "" : " | ";
			}
		}
		$resources.push(res);
	}
	return $resources;
}

function _buildBrowseView(page) {
	// dispose values
	page.selectedModId = page.selectedModLink = page.selectedCatId = page.selectedCatLink = null;

	// browse content slot
	page.browseLayout = document.createElement("div");
	page.browseLayout.className = "s-sv-browse-layout";

	// modules layout
	var modulesLayout = document.createElement("div");
	modulesLayout.className = "s-sv-browse-modules";
	page.browseLayout.appendChild(modulesLayout);

	// append separator
	var sep = document.createElement("div");
	sep.className = "s-sv-browse-sep";
	page.browseLayout.appendChild(sep);

	// modules layout header
	page.modulesLayoutHeader = document.createElement("div");
	page.modulesLayoutHeader.className = "s-sv-browse-module-header s-active";
	page.modulesLayoutHeader.textContent = syra_local.ldpModulesTitle;
	modulesLayout.appendChild(page.modulesLayoutHeader);

	// modules layout body
	var body = document.createElement("div");
	body.className = "s-sv-browse-module-body";
	modulesLayout.appendChild(body);

	// append modules
	var modKeys = Object.keys(page.vignetteData.modules);


	// sort alphabetical order
	var self = page;
	modKeys.sort(function(itemA, itemB) {
		if (self.vignetteData.modules[itemA].title > self.vignetteData.modules[itemB].title)
			return self.vignetteData.modules[itemB].title == syra_local.ldpNoModule ? -1 : 1;
		if (self.vignetteData.modules[itemA].title < self.vignetteData.modules[itemB].title)
			return self.vignetteData.modules[itemA].title == syra_local.ldpNoModule ? 1 : -1;
		return 0;
	});

	for (var ii = 0, jj = modKeys.length; ii < jj; ii++) {
		var modKey = modKeys[ii];
		var btn = syra_menus.addTextButton(page.vignetteData.modules[modKey].title, "s-sv-browse-item", "onModuleClick");
		btn.syrainout = page.id;
		btn.setAttribute("sv-module-id", modKey);
		btn.title = page.vignetteData.modules[modKey].code || "";
		body.appendChild(btn);
		var modIcon = document.createElement("div");
		modIcon.className = "s-sv-browse-module-icon";
		modIcon.setAttribute("style", "background-image: url('/syracuse-ui/themes/desktop/sage/images/modules/s_module_" + (page.vignetteData.modules[modKey].code || "no_code").toLowerCase() + ".png')");
		btn.insertBefore(modIcon, btn.firstChild);
	}

	// categories layout
	page.categoriesLayout = document.createElement("div");
	page.categoriesLayout.className = "s-sv-browse-categories";
	page.categoriesLayoutHeader = document.createElement("div");
	page.categoriesLayoutHeader.className = "s-sv-browse-categories-header";
	page.categoriesLayoutHeader.textContent = syra_local.ldpCategoriesTitle;
	page.categoriesLayout.appendChild(page.categoriesLayoutHeader);
	page.categoriesLayoutBody = document.createElement("div");
	page.categoriesLayoutBody.className = "s-sv-browse-categories-body";
	page.categoriesLayout.appendChild(page.categoriesLayoutBody);
	page.browseLayout.appendChild(page.categoriesLayout);

	// append separator (2)
	var sep = document.createElement("div");
	sep.className = "s-sv-browse-sep";
	page.browseLayout.appendChild(sep);

	// vignettes layout
	page.vignettesLayout = document.createElement("div");
	page.vignettesLayout.className = "s-sv-browse-vignettes";
	page.vignettesLayoutHeader = document.createElement("div");
	page.vignettesLayoutHeader.className = "s-sv-browse-vignettes-header";
	page.vignettesLayoutHeader.textContent = syra_local.ldpVignettesTitle;
	page.vignettesLayout.appendChild(page.vignettesLayoutHeader);
	page.vignettesLayoutBody = document.createElement("div");
	page.vignettesLayoutBody.className = "s-sv-browse-vignettes-body";
	page.vignettesLayout.appendChild(page.vignettesLayoutBody);
	page.browseLayout.appendChild(page.vignettesLayout);

	return page.browseLayout;
}

function _updatePage(page, data, isSearchRequest) {
	page.startChange();
	if (isSearchRequest) {
		var $resources = _formatResourcesData(data.$resources);
		data.$searchResult = data.$resources;
		delete data.$resources;
		page.boundFields.$searchVignetteResult[0].vignette.applyChange(data);
		page._applySelectedStyle();
		var searchPage = page.boundFields.$searchVignetteResult[0].vignette;
		searchPage.checkFacetBarVisibility();
	} else {
		var newData = {
			$searchVignetteField: "",
			selectedEndpoint: page.selectedEndpoint,
			$properties: {
				$searchVignetteField: {
					$isHidden: false
				}
			}
		};
		page.applyChange(newData);
		page._buildBrowseData(data);
		page.browseView = _buildBrowseView(page);
	}
	_updateBrowseViewDisplay(page, !isSearchRequest);
	page.idMap["s-sv-vignette-section"].setState({
		$isHidden: !isSearchRequest
	});
	page.endChange();
}

function LandingVignetteSelect() {}

exports.LandingVignetteSelect = helpers.defineClass(LandingVignetteSelect, DesktopPage, {
	onItemInOut: function(onEnter, event, target) {
		if (target.className.indexOf("s-sv-browse-item") >= 0) {
			syra_site.dom.toggleClass(target, "s-record-enter", onEnter);
		} else {
			DesktopPage.prototype.onItemInOut.call(this, onEnter, event, target);
		}
	},
	fetch: function(options) {
		if (options && options.isPageLoading) {
			options.method = "POST";
			DesktopPage.prototype.fetch.call(this, options);
		} else {
			var self = this;
			options.method = options.method || "GET";
			options.$location = options.$location || {
				$url: this.requestUrlComplete
			};
			this.sendRequest(undefined, undefined, function(data) {
				_updatePage(self, data, true);
			}, options);
		}
	},
	onErrorHandler: function(error) {
		var $diagnoses;
		if (error.data.indexOf("$diagnoses") != -1) {
			$diagnoses = JSON.parse(error.data).$diagnoses;
		} else {
			$diagnoses = [{
				$severity: "error",
				$message: error.data
			}];
		}
		syra_site.showDiagnoses({
			$diagnoses: $diagnoses
		});
	},
	sendRequest: function(method, url, onSuccess, options) {
		var self = this;
		syra_controller.sendRequest(this, options || {
			method: method || "GET",
			$location: {
				$url: url
			}
		}, onSuccess, self.onErrorHandler);
	},
	getPrototype: function() {
		this.selectedVignettes = []; // adding prototype properties for search field and results page
		if (this.$prototype && this.$prototype.$properties) {
			this.$prototype.$properties.$searchVignetteField = {
				$type: "application/x-string",
				$title: syra_local.ldpSearch
			};
			this.$prototype.$properties.selectedEndpoint = this.$prototype.$properties.endpoint;
			this.$prototype.$properties.selectedVignettes = {
				$type: "application/x-array",
				$title: syra_local.ldpSelectedVignettes,
				$item: {
					$type: "application/x-string"
				}
			};
			this.$prototype.$properties.$searchVignetteResult = {
				$type: "application/x-vignette",
				$format: "$page",
				$isLandingSearchVignette: true,
				$prototype: {
					$properties: {
						$searchResult: {
							$type: "application/x-array",
							$item: {
								$type: "application/json",
								$properties: {
									title: {
										$title: syra_local.ldpSearchResultTitle,
										$type: "application/x-string",
										$format: "$html",
										$links: {
											$details: {}
										}
									},
									properties: {
										$type: "application/x-string",
										$format: "$html"
									}
								}
							}
						}
					},
					$article: {
						$isTitleHidden: true,
						$skin: "s-sv-vignette",
						$layout: {
							$layoutType: "stack",
							$items: [{
								$bind: "$searchResult",
								$isMenuRecordHidden: true,
								$noDataText: syra_local.search_no_res,
								$format: "cards",
								$alternateStyle: false,
								$skin: "s-sv-search-res",
								//$selectMode: "row",
								$layout: {
									$items: [{
										$bind: "title",
										$isTitleHidden: true,
										$skin: "s-sv-search-res-title"
									}, {
										$isTitleHidden: true,
										$skin: "s-sv-search-class",
										$bind: "properties"
									}]
								}
							}]
						}
					}
				}
			};
		};
		delete this.$prototype.$description; // in order not to display description text value
		return this.$prototype;
	},

	onBackClick: function() {
		this.startChange();
		this.backBtn.style.display = "none";
		this.applyChange({
			$properties: {
				$searchVignetteField: {
					$isHidden: true
				},
				selectedEndpoint: {
					$isHidden: true
				}
			}
		});
		_gotoPage2(this, false);
		_updateBrowseViewDisplay(this);
		this.endChange();
	},
	onMenuClick: function(menu) {
		var self = this;
		if (_gadgetTypes.indexOf(menu.$bind) >= 0) {
			self.selectedCategoryTitle = menu.$title;
			self.requestUrl = menu.$searchUrl || menu.$url;
			self.sendRequest(menu.$method, menu.$url, function(data) {
				self.selectedCategoryTitle = menu.$title;
				if (!self.backBtn) {
					self.backBtn = syra_menus.addIconButton(syra_local.ldpBack, "s-sv-back-link", "onBackClick", null, "reload_back");
					self.titleLabel.parentNode.insertBefore(self.backBtn, self.titleLabel);
				}
				self.backBtn.style.display = "";
				_gotoPage2(self, true);
				_updatePage(self, data);
			});
			return false;
		}

		if (menu.$item && menu.$item.$bind == "$detail") {
			if (_findSelectedVignette(this, menu.articleParent.dataset.$key || menu.articleParent.dataset.$uuid)) {
				this._onVignetteRemove(menu.articleParent.dataset.$key || menu.articleParent.dataset.$uuid);
				syra_site.dom.toggleClass(menu.articleParent.domItem, "s-list-record-selected");
				// update vignette categories and module info style
				this._updatePropertiesStyle(menu.articleParent, false, true);
			} else {
				_onVignetteAdd(this, menu.articleParent.dataset);
				syra_site.dom.toggleClass(menu.articleParent.domItem, "s-list-record-selected", true);
				// update vignette categories and module info style
				this._updatePropertiesStyle(menu.articleParent, true, true);
			}
		}
		return false;
	},
	_updatePropertiesStyle: function(record, selected, onClick) {
		if (record.boundFields.properties[0]._dataValue.children.length > 0) {
			var children = record.boundFields.properties[0]._dataValue.children;
			for (var ii = 0, jj = children.length; ii < jj; ii++) {
				syra_site.dom.toggleClass(children[ii], "s-list-record-selected", selected);
			}
			if (onClick) {
				record.$isSelected = selected;
			}
		}
	},
	onModuleClick: function(event, btn) {
		this.selectedCatId = null;
		var modId = btn.getAttribute("sv-module-id");
		if (!this.selectedModId || (this.selectedModId != modId)) {
			syra_site.dom.toggleClass(this.modulesLayoutHeader, "s-active", true);
			syra_site.dom.toggleClass(this.categoriesLayoutHeader, "s-active");
			syra_site.dom.toggleClass(this.vignettesLayoutHeader, "s-active");
			// update selected css
			if (this.selectedModId) {
				syra_site.dom.toggleClass(this.selectedModLink, "s-list-record-selected");
			}
			syra_site.dom.toggleClass(btn, "s-list-record-selected", true);
			this.selectedModId = modId;
			this.selectedModLink = btn;
			syra_site.dom.empty(this.categoriesLayoutBody);
			syra_site.dom.empty(this.vignettesLayoutBody);
			var categories = this.vignetteData.modules[modId].categories;
			var catKeys = Object.keys(categories);

			// sort alphabetical order
			catKeys.sort(function(itemA, itemB) {
				if (categories[itemA].description > categories[itemB].description)
					return categories[itemB].description == syra_local.ldpNoCategory ? -1 : 1;
				if (categories[itemA].description < categories[itemB].description)
					return categories[itemA].description == syra_local.ldpNoCategory ? 1 : -1;
				return 0;
			});

			for (var ii = 0, jj = catKeys.length; ii < jj; ii++) {
				var btn = syra_menus.addTextButton(this.vignetteData.modules[modId].categories[catKeys[ii]].description, "s-sv-browse-item", "onCategoryClick");
				btn.syrainout = this.id;
				btn.setAttribute("sv-category-id", catKeys[ii]);
				this.categoriesLayoutBody.appendChild(btn);
			}
		}
		this.endChange();
	},
	onCategoryClick: function(event, btn) {
		var catId = btn.getAttribute("sv-category-id");
		if (!this.selectedCatId || this.selectedCatId != catId) {
			syra_site.dom.toggleClass(this.modulesLayoutHeader, "s-active");
			syra_site.dom.toggleClass(this.categoriesLayoutHeader, "s-active", true);
			// update selected css
			if (this.selectedCatId) {
				syra_site.dom.toggleClass(this.selectedCatLink, "s-list-record-selected");
			}
			syra_site.dom.toggleClass(btn, "s-list-record-selected", true);
			this.selectedCatId = catId;
			this.selectedCatLink = btn;
			syra_site.dom.empty(this.vignettesLayoutBody);
			var vignettes = this.vignetteData.modules[this.selectedModId].categories[catId].$vignettes;

			// sort alphabetical order
			vignettes.sort(function(itemA, itemB) {
				if (itemA.title > itemB.title)
					return 1;
				if (itemA.title < itemB.title)
					return -1;
				return 0;
			});

			for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
				var vignette = vignettes[ii];
				var btn = syra_menus.addTextButton(vignette.title || syra_local.ldpNoTitle, "s-sv-browse-item", "onVignetteClick");
				btn.syrainout = this.id;
				if (_findSelectedVignette(this, vignette.$key || vignette.$uuid)) {
					syra_site.dom.toggleClass(btn, "s-list-record-selected", true);
				}
				btn.setAttribute("sv-vignette-id", vignette.$key || vignette.$uuid);
				btn.title = vignette.code;
				this.vignettesLayoutBody.appendChild(btn);
			}
		}
		this.endChange();
	},
	onVignetteClick: function(event, btn) {
		syra_site.dom.toggleClass(this.modulesLayoutHeader, "s-active");
		syra_site.dom.toggleClass(this.categoriesLayoutHeader, "s-active");
		syra_site.dom.toggleClass(this.vignettesLayoutHeader, "s-active", true);
		var isSelected = btn.className.indexOf("s-list-record-selected") >= 0;
		syra_site.dom.toggleClass(btn, "s-list-record-selected", !isSelected);
		var vignetteId = btn.getAttribute("sv-vignette-id");
		if (!isSelected) {
			var vignettes = this.vignetteData.modules[this.selectedModId].categories[this.selectedCatId].$vignettes;
			for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
				if ((vignettes[ii].$key || vignettes[ii].$uuid) == vignetteId) {
					_onVignetteAdd(this, vignettes[ii]);
					break;
				}
			}
		} else {
			this._onVignetteRemove(vignetteId);
		}
		//this.endChange();
	},

	_onVignetteRemove: function(vignetteId) {
		var selected = _findSelectedVignette(this, vignetteId);
		if (selected) {
			this.selectedVignettes.splice(this.selectedVignettes.indexOf(selected), 1);
		}
		this.dialogWrapper.hideOkButton(!this.selectedVignettes.length);
	},
	onNotifyDataChange: function(field, value) {
		var self = this;
		switch (field.$item.$bind) {
			case "$searchVignetteField":
				if (value != '') {
					// change count value
					this.requestUrlComplete = this.requestUrl.replace(/(count=)\d+(.+)/g, "$120$2") + ("&search=" + value);
					this.sendRequest("GET", this.requestUrlComplete, function(data) {
						_updatePage(self, data, true);
					});
				} else {
					this.idMap["s-sv-vignette-section"].setState({
						$isHidden: true
					});
					this.idMap["s-sv-browse-section"].setState({
						$isHidden: false
					});
					this.endChange();
				}
				return false;
			case "endpoint":
				this._updateSelectedEndpoint(value);
				return true;
			default:
				return true;
		}
	},
	applyChange: function(newData) {
		if (newData && newData.endpoint) {
			this._updateSelectedEndpoint(newData.endpoint);
		}
		DesktopPage.prototype.applyChange.call(this, newData);
	},

	_applySelectedStyle: function() {
		var records = this.boundFields.$searchVignetteResult[0].vignette.boundFields.$searchResult[0].records;
		for (var ii = 0, jj = records.length; ii < jj; ii++) {
			var record = records[ii];
			if (_findSelectedVignette(this, record.dataset.$key)) {
				syra_site.dom.toggleClass(record.domItem, "s-list-record-selected", true);
				this._updatePropertiesStyle(record, true, true);
			}
		}
	},

	_updateSelectedEndpoint: function(endpoint) {
		this.selectedEndpoint = endpoint;
		syra_site.dom.empty(this.securityViewSlot);
		if (endpoint) {
			this.securityViewSlot.appendChild(syra_menus.addFontIconText(endpoint.$value || endpoint.description, "s-security-user", "endpoint"));
		}
	},
	updateFilterState: function(options) {
		this.jsonParams = options.jsonParams;
		options.method = "GET";
	},

	_buildBrowseData: function(data) {
		// build browse data
		this.vignetteData = {
			modules: {}
		};
		for (var ii = 0, jj = data.$resources.length; ii < jj; ii++) {

			var resource = data.$resources[ii];
			var noCategoryKey = "noCategory";
			var noModuleKey = "noModule";
			var moduleKey = resource.module && (resource.module.$key || resource.module.$uuid) || noModuleKey;
			var hasCategories = resource.categories && resource.categories.length > 0;

			if (!this.vignetteData.modules[moduleKey]) {
				this.vignetteData.modules[moduleKey] = resource.module || {
					title: syra_local.ldpNoModule
				};
				this.vignetteData.modules[moduleKey].categories = {};
			}

			if (!hasCategories) {
				if (!this.vignetteData.modules[moduleKey].categories[noCategoryKey]) {
					this.vignetteData.modules[moduleKey].categories[noCategoryKey] = {
						$uuid: noCategoryKey,
						$vignettes: [],
						description: syra_local.ldpNoCategory
					};
				}
				this.vignetteData.modules[moduleKey].categories[noCategoryKey].$vignettes.push(resource);
			} else {
				for (var mm = 0, pp = resource.categories.length; mm < pp; mm++) {
					var category = resource.categories[mm];
					if (!this.vignetteData.modules[moduleKey].categories[category.$uuid]) {
						this.vignetteData.modules[moduleKey].categories[category.$uuid] = category;
						this.vignetteData.modules[moduleKey].categories[category.$uuid].$vignettes = [];
					}
					this.vignetteData.modules[moduleKey].categories[category.$uuid].$vignettes.push(resource);
				}
			}

		}

		if (data.$totalResults && data.$itemsPerPage && (data.$totalResults > data.$itemsPerPage)) {
			//TODO show info diagnose only $itemPerPage results considered. Use search feature for complete list
		}
	},


	ensureDefaultArticle: function($article, $prototype) {
		function getTypesLayoutInitValue() {
			return {
				$isTitleHidden: true,
				$css: "s-sv-type",
				$layout: {
					$layoutType: "stack",
					$items: []
				}
			};
		}

		if ($article) {
			return $article;
		} else {

			// --- in order to have types displayed in rows of three types
			var typesLayout = [],
				typesLayoutItem = getTypesLayoutInitValue();

			for (var ii = 0, jj = _gadgetTypes.length; ii < jj; ii++) {
				typesLayoutItem.$layout.$items.push({
					$category: "link",
					$bind: _gadgetTypes[ii],
					$css: "s-sv-type-link s-sv-type-" + _gadgetTypes[ii],
					$skin: "s-sv-type-skin"
				});
				if ((ii + 1) == jj) {
					typesLayout.push(typesLayoutItem);
					break;
				}
				if ((ii + 1) % 2 == 0) {
					typesLayout.push(typesLayoutItem);
					typesLayoutItem = getTypesLayoutInitValue();
				}
			}
			// ---

			return {
				$title: syra_local.ldpAddNewVignette,
				$layout: {
					$items: [{
						$category: "section",
						$isTitleHidden: true,
						$clientId: "s-sv-page-1",
						$layout: {
							$items: [{
								$category: "section",
								$title: syra_local.ldpSelectEndpoint,
								$clientId: "s-sv-endpoint-section",
								$layout: {
									$layoutType: "stack",
									$items: [{
										$isTitleHidden: true,
										$bind: "endpoint",
									}]
								}
							}, {
								$category: "section",
								$title: syra_local.ldpBrowseCategory,
								$clientId: "s-sv-category-section",
								$layout: {
									$layoutType: "row",
									$items: typesLayout
								}
							}]
						}
					}, {
						$category: "section",
						$isTitleHidden: true,
						$clientId: "s-sv-page-2",
						$isHidden: true,
						$layout: {
							$items: [{
								$category: "section",
								$isTitleHidden: true,
								$layout: {
									$items: [{
										$bind: "selectedEndpoint",
										$isHidden: true
									}, {
										$title: syra_local.ldpUseSearch,
										$layout: {
											$items: [{
												$bind: "$searchVignetteField",
												$isTopLabelAlignment: false,
												$isHidden: true
											}]
										}
									}, {
										$category: "field",
										$bind: "selectedVignettes",
										$isTitleHidden: false,
										$clientId: "s-sv-selectedvignettes",
										$noDataText: syra_local.ldpNoVignetteSelected,
										$isHidden: true
									}]
								}
							}, {
								$category: "section",
								$title: syra_local.ldpNoVignetteFounds,
								$clientId: "s-sv-vignette-section",
								$isHidden: true,
								$layout: {
									$layoutType: "stack",
									$items: [{
										$bind: "$searchVignetteResult"
									}]
								}

							}, {
								$category: "section",
								$css: "s-sv-browse-section",
								$isEmptyVisible: true,
								$clientId: "s-sv-browse-section"
							}]
						}
					}]
				}
			};
		}
	},
	_ensureMenus: function() {
		this.menuBar = new MenuBar();
		this.menuBar.options = {
			$isResizerDisabled: true
		};
		this.menuBar.load(this);
	}
});