"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var _browse = require('./browse');
var _facetsBar = require('syracuse-ui/lib/search/facetsBar');

var _gadgetTypes = ["requests", "processes", "stats", "representation", "calendar", "extLink"];

function _addBlock(slot, $title) {
	var block = document.createElement("div");
	block.className = "s-sv-wiz-step-block";

	var title = document.createElement("label");
	title.className = "s-sv-wiz-step-block-title";
	title.textContent = $title;
	block.appendChild(title);

	var body = document.createElement("div");
	body.className = "s-sv-wiz-step-body";
	block.appendChild(body);
	slot.appendChild(block);
	return {
		block: block,
		title: title,
		body: body
	};
}

function _addStep1(page) {
	var step = document.createElement("div");
	step.className = "s-sv-wiz-step";

	var box = _addBlock(step, syra_local.ldpSelectEndpoint);
	page.loadNewItem(box.body, {
		$isTitleHidden: true,
		$bind: "endpoint"
	});


	var box = _addBlock(step, syra_local.ldpBrowseCategory);
	var rowCount = 0;
	for (var ii = 0, jj = _gadgetTypes.length; ii < jj; ii++) {
		page.loadNewItem(box.body, {
			$category: "link",
			$bind: _gadgetTypes[ii],
			$css: "s-sv-type-link s-sv-type-" + _gadgetTypes[ii],
			$skin: "s-sv-type-skin"
		});
		if (++rowCount == 3) {
			rowCount = 0;
			var sep = document.createElement("div");
			sep.className = "s-sv-wiz-cat-sep";
			box.body.appendChild(sep);
		}
	}
	return step;
}

function _addStep2(page) {
	var step = document.createElement("div");
	step.className = "s-sv-wiz-step";

	var box = _addBlock(step, syra_local.ldpUseSearch);
	page.loadNewItem(box.body, {
		$bind: "$searchVignetteField",
		$isTopLabelAlignment: false
	});
	page.searchVignetteBlock = _addBlock(step, syra_local.ldpNoVignetteFounds);
	page.searchVignetteBlock.block.style.display = "none";
	page.searchResultField = page.loadNewItem(page.searchVignetteBlock.body, {
		$bind: "$searchResult",
		$isEditMode: false,
		$isMenuRecordHidden: true,
		$noDataText: syra_local.search_no_res,
		$format: "cards",
		$alternateStyle: false,
		$skin: "s-sv-search-res",
		//$selectMode: "row",
		$layout: {
			$items: [{
				$bind: "title",
				$isTitleHidden: true,
				$skin: "s-sv-search-res-title"
			}]
		}
	});
	page.browseBlock = _addBlock(step, "");
	return step;
}

function _onSelectSearchRecord(record, selected) {
	record.searchModuleItem && syra_site.dom.toggleClass(record.searchModuleItem, "s-list-record-selected", selected);
	if (record.searchCategoryItems) {
		for (var ii = 0, jj = record.searchCategoryItems.length; ii < jj; ii++) {
			syra_site.dom.toggleClass(record.searchCategoryItems[ii], "s-list-record-selected", selected);
		}
	}
	record.$isSelected = selected;
}

function _gotoStep(page, index) {
	var steps = page.layoutContent.domItem.children;
	index--;
	for (var ii = 0, jj = steps.length; ii < jj; ii++) {
		steps[ii].style.display = (ii == index) ? "" : "none";
	}
}

function _updateSelectedEndpoint(page, endpoint) {
	page.selectedEndpoint = endpoint;
	syra_site.dom.empty(page.securityViewSlot);
	if (endpoint) {
		page.securityViewSlot.appendChild(syra_menus.addFontIconText(endpoint.$value || endpoint.description, "s-security-user", "endpoint"));
	}
}

function _applySearchChange(page, data) {
	page.startChange();
	page.browseBlock.block.style.display = "none";
	page.searchVignetteBlock.block.style.display = "";
	data.$searchResult = data.$resources;
	delete data.$resources;
	page.applyChange({
		$searchResult: null
	});
	page.applyChange(data);
	var records = page.searchResultField.records;
	for (var ii = 0, jj = records.length; ii < jj; ii++) {
		var record = records[ii];
		var parentNode = record.boundFields.title[0].layoutSlot.parentNode;
		if (record.dataset.module) {
			var em = record.searchModuleItem = document.createElement("em");
			em.className = "s-sv-search-res-mod-value";
			em.textContent = record.dataset.module;
			parentNode.appendChild(em);
		}
		if (record.dataset.categories) {
			record.searchCategoryItems = [];
			for (var mm = 0, pp = record.dataset.categories.length; mm < pp; mm++) {
				var em = document.createElement("em");
				em.className = "s-sv-search-res-cat-value";
				em.textContent = record.dataset.categories[mm];
				parentNode.appendChild(em);
				record.searchCategoryItems.push(em);
			}
		}
		if (page.findSelectedVignette(record.dataset.$key)) {
			syra_site.dom.toggleClass(record.domItem, "s-list-record-selected", true);
			_onSelectSearchRecord(record, true);
		}
	}
	_facetsBar.checkVisibility();
	page.endChange();
}

function _updatePage(page, data) {
	page.startChange();
	page.applyChange({
		$searchVignetteField: "",
		selectedEndpoint: page.selectedEndpoint
	});
	syra_site.dom.empty(page.browseBlock.body);
	_browse.buildLevels(page, page.browseBlock.body, data);
	page.searchVignetteBlock.block.style.display = "none";
	page.browseBlock.block.style.display = "";
	page.endChange();
}

function _sendRequest(page, method, url, onSuccess, options) {
	syra_controller.sendRequest(page, options || {
		method: method || "GET",
		$location: {
			$url: url
		}
	}, onSuccess, function(error) {
		var $diagnoses;
		if (error.data.indexOf("$diagnoses") != -1) {
			$diagnoses = JSON.parse(error.data).$diagnoses;
		} else {
			$diagnoses = [{
				$severity: "error",
				$message: error.data
			}];
		}
		syra_site.showDiagnoses({
			$diagnoses: $diagnoses
		});
	});
}

function LandingVignetteSelect() {}

exports.LandingVignetteSelect = helpers.defineClass(LandingVignetteSelect, DesktopPage, {
	onItemInOut: function(onEnter, event, target) {
		if (target.className.indexOf("s-sv-browse-item") >= 0) {
			syra_site.dom.toggleClass(target, "s-record-enter", onEnter);
		} else {
			_facetsBar.onItemInOut(onEnter, event, target);
			DesktopPage.prototype.onItemInOut.call(this, onEnter, event, target);
		}
	},
	onFieldInputEvent: function(event) {
		_facetsBar.onFieldInputEvent(event);
	},
	onSelectRecord: function(records) {
		if (records) {
			var keys = Object.keys(records);
			keys.length && syra_menus.click.detail(records[keys[0]]);
		}
	},
	fetch: function(options) {
		var self = this;
		if (options && options.isPageLoading) {
			options.method = "POST";
			DesktopPage.prototype.fetch.call(self, options);
		} else {
			options.method = options.method || "GET";
			options.$location = options.$location || {
				$url: self.requestUrlComplete
			};
			_sendRequest(self, undefined, undefined, function(data) {
				_applySearchChange(self, data);
			}, options);
		}
	},
	getPrototype: function() {
		this.selectedVignettes = []; // adding prototype properties for search field and results page
		if (this.$prototype && this.$prototype.$properties) {
			this.$prototype.$properties.$searchVignetteField = {
				$type: "application/x-string",
				$title: syra_local.ldpSearch
			};
			this.$prototype.$properties.$searchResult = {
				$type: "application/x-array",
				$item: {
					$type: "application/json",
					$properties: {
						title: {
							$title: syra_local.ldpSearchResultTitle,
							$type: "application/x-string",
							$format: "$html",
							$links: {
								$details: {}
							}
						}
					}
				}
			};
		};
		delete this.$prototype.$description; // in order not to display description text value
		return this.$prototype;
	},
	onMenuClick: function(menu) {
		var self = this;
		if (_gadgetTypes.indexOf(menu.$bind) >= 0) {
			self.browseBlock.title.title = self.browseBlock.title.textContent = menu.getTitle();
			self.requestUrl = menu.$searchUrl || menu.$url;
			_sendRequest(self, menu.$method, menu.$url, function(data) {
				self.backBtn.style.display = "";
				_gotoStep(self, 2);
				_updatePage(self, data);
			});
			return false;
		}
		if (menu.$item && menu.$item.$bind == "$detail") {
			var selected = this.selectVignette(menu.articleParent.dataset);
			syra_site.dom.toggleClass(menu.articleParent.domItem, "s-list-record-selected", selected);
			_onSelectSearchRecord(menu.articleParent, selected);
		}
		return false;
	},
	selectVignette: function(dataVignette) {
		var selected = false;
		var vignette = this.findSelectedVignette(dataVignette.$key || dataVignette.$uuid);
		if (vignette) {
			this.selectedVignettes.splice(this.selectedVignettes.indexOf(vignette), 1);
		} else {
			selected = true;
			this.selectedVignettes.push({
				vignette: dataVignette,
				endpoint: {
					$uuid: this.selectedEndpoint.$uuid
				}
			});
		}
		this.dialogWrapper.hideOkButton(this.selectedVignettes.length > 0);
		return selected;
	},
	onModuleClick: function(event, btn) {
		_browse.onModuleClick(this, event, btn);
	},
	onCategoryClick: function(event, btn) {
		_browse.onCategoryClick(this, event, btn);
	},
	onVignetteClick: function(event, btn) {
		_browse.onVignetteClick(this, event, btn);
	},
	onBackClick: function() {
		this.backBtn.style.display = "none";
		_gotoStep(this, 1);
		this.resizeArticle();
	},
	findSelectedVignette: function($uuid) {
		for (var ii = 0, jj = this.selectedVignettes.length; ii < jj; ii++) {
			var sel = this.selectedVignettes[ii];
			if ((sel.vignette.$key || sel.vignette.$uuid) == $uuid) {
				return sel;
			}
		}
		return null;
	},
	onNotifyDataChange: function(field, value) {
		var self = this;
		switch (field.$item.$bind) {
			case "$searchVignetteField":
				if (value != '') {
					// change count value
					self.requestUrlComplete = self.requestUrl.replace(/(count=)\d+(.+)/g, "$120$2") + ("&search=" + value);
					_sendRequest(self, "GET", self.requestUrlComplete, function(data) {
						_applySearchChange(self, data, true);
					});
				} else {
					self.endChange();
				}
				return false;
			case "endpoint":
				_updateSelectedEndpoint(self, value);
				return true;
			default:
				return true;
		}
	},
	applyChange: function(newData) {
		if (newData) {
			newData.endpoint && _updateSelectedEndpoint(this, newData.endpoint);
		}
		DesktopPage.prototype.applyChange.call(this, newData);
		newData && newData.$searchFacets && _facetsBar.fill(this.dataset.$searchFacets);
	},
	ensureDefaultArticle: function($article, $prototype) {
		$prototype.$title = syra_local.ldpAddNewVignette;
		return {
			$layout: {
				$items: []
			}
		};
	},
	drawBox: function() {
		this.isMenuBarDisabled = true;
		DesktopPage.prototype.drawBox.call(this);
		this.layoutContent.domItem.appendChild(_addStep1(this));
		this.layoutContent.domItem.appendChild(_addStep2(this));
		this.backBtn = syra_menus.addIconButton(syra_local.ldpBack, "s-sv-back-link", "onBackClick", null, "reload_back");
		this.backBtn.style.display = "none";
		this.titleLabel.parentNode.insertBefore(this.backBtn, this.titleLabel);
		_gotoStep(this, 1);
		_facetsBar.load(this, {
			$facetSkin: "s-search-vignette",
			$isResizerDisabled: true
		}, {
			$filters: ["menuModule", "menuCategory"],
			$order: ["menuModule", "menuCategory"]
		});
	},
	setFilterQueryParam: function(options) {
		this.jsonParams = options.jsonParams;
		options.method = "GET";
	},
	dispose: function() {
		_browse.dispose();
		_facetsBar.dispose();
		DesktopPage.prototype.dispose.call(this);
	}
});
//$skin: "s-sv-vignette",