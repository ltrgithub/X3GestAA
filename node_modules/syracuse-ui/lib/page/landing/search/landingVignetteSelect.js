"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var MenuBar = require('syracuse-ui/lib/page/bar/menuBar').MenuBar;

function LandingVignetteSelect() {}

exports.LandingVignetteSelect = helpers.defineClass(LandingVignetteSelect, DesktopPage, {
	fetch: function(options) {
		if (options && options.isPageLoading) {
			options.method = "POST";
			DesktopPage.prototype.fetch.call(this, options);
		} else {
			var self = this;
			options.method = options.method || "GET";
			options.$location = options.$location || {
				$url: this.requestUrlComplete
			};
			this.sendRequest(undefined, undefined, function(data) {
				self._updatePage(data, true);
			}, options);
		}
	},
	onErrorHandler: function(error) {
		var $diagnoses;
		if (error.data.indexOf("$diagnoses") != -1) {
			$diagnoses = JSON.parse(error.data).$diagnoses;
		} else {
			$diagnoses = [{
				$severity: "error",
				$message: error.data
			}];
		}
		document.site.showDiagnoses({
			$diagnoses: $diagnoses
		});
	},
	sendRequest: function(method, url, onSuccess, options) {
		var self = this;
		document.controller.sendRequest(this, options || {
			method: method || "GET",
			$location: {
				$url: url
			}
		}, onSuccess, self.onErrorHandler);
	},
	getPrototype: function() {
		this.selectedVignettes = []; // adding prototype properties for search field and results page
		if (this.$prototype && this.$prototype.$properties) {
			this.$prototype.$properties.$searchVignetteField = {
				$type: "application/x-string",
				$title: document.site.localize.ldpSearch
			};
			this.$prototype.$properties.selectedEndpoint = this.$prototype.$properties.endpoint;
			this.$prototype.$properties.selectedVignettes = {
				$type: "application/x-array",
				$title: document.site.localize.ldpSelectedVignettes,
				$item: {
					$type: "application/x-string"
				}
			};
			this.$prototype.$properties.$searchVignetteResult = {
				$type: "application/x-vignette",
				$format: "$page",
				$isLandingSearchVignette: true,
				$prototype: {
					$properties: {
						$searchResult: {
							$type: "application/x-array",
							$item: {
								$type: "application/json",
								$properties: {
									title: {
										$title: document.site.localize.ldpSearchResultTitle,
										$type: "application/x-string",
										$format: "$html",
										$links: {
											$details: {}
										}
									},
									properties: {
										$type: "application/x-string",
										$format: "$html"
									}
								}
							}
						}
					},
					$article: {
						$isTitleHidden: true,
						$skin: "s-sv-vignette",
						$layout: {
							$layoutType: "columns",
							$widths: "100",
							$items: [{
								$items: [{
									$bind: "$searchResult",
									$isMenuRecordHidden: true,
									$noDataText: document.site.localize.search_no_res,
									$format: "cards",
									$skin: "s-sv-search-res",
									$layout: {
										$items: [{
											$bind: "title",
											$isTitleHidden: true,
											$skin: "s-sv-search-res-title"
										}, {
											$isTitleHidden: true,
											$skin: "s-sv-search-class",
											$bind: "properties"
										}]
									}
								}]
							}]
						}
					}
				}
			};
		};
		// adding links
		if (this.$prototype && this.$prototype.$links) {
			this.$prototype.$links.$back = {};
		}
		delete this.$prototype.$description; // in order not to display description text value
		return this.$prototype;
	},
	_setBackButtonPosition: function() {
		if (!this.isBackButtonPositionSet) {
			this.headerCore.insertBefore(this.idMap["s-sv-back-link"].layoutSlot, this.headerCore.firstChild);
			this.isBackButtonPositionSet = true;
		}
	},
	_setSelectedVignettesListPosition: function() {
		if (!this.isSelectedVignettesListPositionSet) {
			this.headerCoreRight.appendChild(this.idMap["s-sv-selectedvignettes"].layoutSlot, this.headerCore.firstChild);
			this.headerCoreRight.style.width = "50em";
			this.isSelectedVignettesListPositionSet = true;
		}
	},
	showPage2: function(show) {
		this.idMap["s-sv-page-2"].setState({
			$isHidden: !show
		});
		this.idMap["s-sv-page-1"].setState({
			$isHidden: show
		});
	},
	onMenuClick: function(menu) {
		var self = this;
		switch (menu.$bind) {
			case "requests":
			case "processes":
			case "stats":
			case "representation":
			case "extLink":
				self.selectedCategoryTitle = menu.$title;
				self.requestUrl = menu.$searchUrl || menu.$url;
				self.sendRequest(menu.$method, menu.$url, function(data) {
					self.selectedCategoryTitle = menu.$title;
					self._setBackButtonPosition();
					//self._setSelectedVignettesListPosition();
					self.showPage2(true);
					self._updatePage(data);
				});
				return false;
			case "$back":
				this.startChange();
				this.applyChange({
					$links: {
						$back: {
							$isHidden: true
						}
					},
					$properties: {
						$searchVignetteField: {
							$isHidden: true
						},
						selectedEndpoint: {
							$isHidden: true
						}
					}
				});
				self.showPage2(false);
				self._updateBrowseViewDisplay();
				this.endChange();
				return false;
			default:
				//TODO complete with other menu cases
		}

		if (!menu.$bind && menu.$item && menu.$item.$bind == "$detail") {
			if (this._findSelectedVignette(menu.articleParent.dataset.$key || menu.articleParent.dataset.$uuid)) {
				this._onVignetteRemove(menu.articleParent.dataset.$key || menu.articleParent.dataset.$uuid);
				document.site.toggleClass(menu.articleParent.cardContent, "s-selected");
				// update vignette categories and module info style
				this._updatePropertiesStyle(menu.articleParent, false, true);
			} else {
				this._onVignetteAdd(menu.articleParent.dataset);
				document.site.toggleClass(menu.articleParent.cardContent, "s-selected", true);
				// update vignette categories and module info style
				this._updatePropertiesStyle(menu.articleParent, true, true);
			}
		}
		return false;
	},
	_updatePropertiesStyle: function(record, selected, onClick) {
		if (record.boundFields.properties[0].fieldValue.children.length > 0) {
			var children = record.boundFields.properties[0].fieldValue.children;
			for (var ii = 0, jj = children.length; ii < jj; ii++) {
				document.site.toggleClass(children[ii], "s-selected", selected);
			}
			record.boundFields.properties[0]._dataValue.style.color = selected ? "white" : "black";
			if (onClick) {
				record.$isSelected = selected;
			}
		}
	},
	onClickPicker: function(picker) {
		var $bind = picker.getAttribute("data-s-picker");
		switch ($bind) {
			case "sv-module-picker":
				this.selectedCatId = null;
				var modId = picker.getAttribute("sv-module-id");
				if (!this.selectedModId || (this.selectedModId != modId)) {
					document.site.toggleClass(this.modulesLayoutHeader, "s-active", true);
					document.site.toggleClass(this.categoriesLayoutHeader, "s-active");
					document.site.toggleClass(this.vignettesLayoutHeader, "s-active");
					// update selected css
					if (this.selectedModId) {
						document.site.toggleClass(this.selectedModLink, "s-selected");
					}
					document.site.toggleClass(picker, "s-selected", true);
					this.selectedModId = modId;
					this.selectedModLink = picker;
					document.site.emptyDom(this.categoriesLayoutBody);
					document.site.emptyDom(this.vignettesLayoutBody);
					var categories = this.vignetteData.modules[modId].categories;
					var catKeys = Object.keys(categories);

					// sort alphabetical order
					catKeys.sort(function(itemA, itemB) {
						if (categories[itemA].description > categories[itemB].description)
							return categories[itemB].description == document.site.localize.ldpNoCategory ? -1 : 1;
						if (categories[itemA].description < categories[itemB].description)
							return categories[itemA].description == document.site.localize.ldpNoCategory ? 1 : -1;
						return 0;
					});

					for (var ii = 0, jj = catKeys.length; ii < jj; ii++) {
						var categoryItemSlot = document.createElement("div");
						categoryItemSlot.className = "s-sv-browse-category-item-slot";
						this.categoriesLayoutBody.appendChild(categoryItemSlot);

						var categoryItem = document.createElement("a");
						categoryItem.className = "s-sv-browse-category-item ";
						categoryItem.setAttribute("data-s-picker", "sv-category-picker");
						categoryItem.setAttribute("sv-category-id", catKeys[ii]);
						categoryItem.textContent = this.vignetteData.modules[modId].categories[catKeys[ii]].description;
						categoryItemSlot.appendChild(categoryItem);
					}
				}
				this.endChange();
				return false;
			case "sv-category-picker":
				var catId = picker.getAttribute("sv-category-id");
				if (!this.selectedCatId || this.selectedCatId != catId) {
					document.site.toggleClass(this.modulesLayoutHeader, "s-active");
					document.site.toggleClass(this.categoriesLayoutHeader, "s-active", true);
					// update selected css
					if (this.selectedCatId) {
						document.site.toggleClass(this.selectedCatLink, "s-selected");
					}
					document.site.toggleClass(picker, "s-selected", true);
					this.selectedCatId = catId;
					this.selectedCatLink = picker;
					document.site.emptyDom(this.vignettesLayoutBody);
					var vignettes = this.vignetteData.modules[this.selectedModId].categories[catId].$vignettes;

					// sort alphabetical order
					vignettes.sort(function(itemA, itemB) {
						if (itemA.title > itemB.title)
							return 1;
						if (itemA.title < itemB.title)
							return -1;
						return 0;
					});

					for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
						var vignetteItemSlot = document.createElement("div");
						vignetteItemSlot.className = "s-sv-browse-vignette-item-slot";
						this.vignettesLayoutBody.appendChild(vignetteItemSlot);

						var vignetteItem = document.createElement("a");
						vignetteItem.className = "s-sv-browse-vignette-item";
						if (this._findSelectedVignette(vignettes[ii].$key || vignettes[ii].$uuid)) {
							document.site.toggleClass(vignetteItem, "s-selected", true);
						}
						vignetteItem.setAttribute("data-s-picker", "sv-vignette-picker");
						vignetteItem.setAttribute("sv-vignette-id", vignettes[ii].$key || vignettes[ii].$uuid);
						vignetteItem.textContent = vignettes[ii].title || document.site.localize.ldpNoTitle;
						vignetteItem.title = vignettes[ii].code;
						vignetteItemSlot.appendChild(vignetteItem);
					}
				}
				this.endChange();
				return false;
			case "sv-vignette-picker":
				document.site.toggleClass(this.modulesLayoutHeader, "s-active");
				document.site.toggleClass(this.categoriesLayoutHeader, "s-active");
				document.site.toggleClass(this.vignettesLayoutHeader, "s-active", true);
				var isSelected = picker.className.indexOf("s-selected") >= 0;
				document.site.toggleClass(picker, "s-selected", !isSelected);
				var vignetteId = picker.getAttribute("sv-vignette-id");
				if (!isSelected) {
					var vignettes = this.vignetteData.modules[this.selectedModId].categories[this.selectedCatId].$vignettes;
					for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
						if ((vignettes[ii].$key || vignettes[ii].$uuid) == vignetteId) {
							this._onVignetteAdd(vignettes[ii]);
							break;
						}
					}
				} else {
					this._onVignetteRemove(vignetteId);
				}
				this.endChange();
				return false;
			default:
				return true;
		}
	},
	_onVignetteAdd: function(vignette) {
		this.selectedVignettes.push({
			vignette: {
				$uuid: vignette.$key || vignette.$uuid,
				title: vignette.title
			},
			endpoint: {
				$uuid: this.selectedEndpoint.$uuid
			}
		});
		this.dialogWrapper.hideOkButton(false);
	},
	_findSelectedVignette: function($uuid) {
		for (var ii = 0, jj = this.selectedVignettes.length; ii < jj; ii++) {
			if (this.selectedVignettes[ii].vignette.$uuid == $uuid) {
				return this.selectedVignettes[ii];
			}
		}
		return null;
	},
	_onVignetteRemove: function(vignetteId) {
		var selected = this._findSelectedVignette(vignetteId);
		if (selected) {
			this.selectedVignettes.splice(this.selectedVignettes.indexOf(selected), 1);
		}
		this.dialogWrapper.hideOkButton(!this.selectedVignettes.length);
	},
	_updateSelectedVignetteArray: function() {
		var newArray = [];
		for (var ii = 0, jj = this.selectedVignettes.length; ii < jj; ii++) {
			newArray.push(this.selectedVignettes[ii].vignette.title);
		}
		this.applyChange({
			selectedVignettes: newArray
		});
	},
	onNotifyDataChange: function(field, value) {
		var self = this;
		switch (field.$item.$bind) {
			case "$searchVignetteField":
				if (value != '') {
					this.requestUrlComplete = this.requestUrl + ("&search=" + value);
					this.sendRequest("GET", this.requestUrl + ("&search=" + value), function(data) {
						self._updatePage(data, true);
					});
				} else {
					this.idMap["s-sv-vignette-section"].setState({
						$isHidden: true
					});
					this.idMap["s-sv-browse-section"].setState({
						$isHidden: false
					});
					this.endChange();
				}
				return false;
			case "endpoint":
				this._updateSelectedEndpoint(value);
				return true;
			default:
				return true;
		}
	},
	applyChange: function(newData) {
		if (newData && newData.endpoint) {
			this._updateSelectedEndpoint(newData.endpoint);
		}
		DesktopPage.prototype.applyChange.call(this, newData);
	},
	_formatResourcesData: function($dataResources) {
		var $resources = [];
		for (var ii = 0, jj = $dataResources.length; ii < jj; ii++) {
			var res = $dataResources[ii];
			res.properties = "";
			if (res.module) {
				var span = document.createElement("span");
				span.className = "s-sv-search-res-mod-value";
				span.textContent = res.module.$value;
				res.properties += span.outerHTML + " | ";
			}
			if (res.categories) {
				for (var mm = 0, pp = res.categories.length; mm < pp; mm++) {
					var span = document.createElement("span");
					span.className = "s-sv-search-res-cat-value";
					span.textContent = res.categories[mm].$value;
					res.properties += span.outerHTML;
					res.properties += mm == pp - 1 ? "" : " | ";
				}
			}
			$resources.push(res);
		}
		return $resources;
	},
	_applySelectedStyle: function() {
		var records = this.boundFields.$searchVignetteResult[0].vignette.boundFields.$searchResult[0].records;
		for (var ii = 0, jj = records.length; ii < jj; ii++) {
			var record = records[ii];
			if (this._findSelectedVignette(record.dataset.$key)) {
				document.site.toggleClass(record.cardContent, "s-selected", true);
			}
		}
	},
	_updatePage: function(data, isSearchRequest) {
		this.startChange();
		if (isSearchRequest) {
			var $resources = this._formatResourcesData(data.$resources);
			data.$searchResult = data.$resources;
			delete data.$resources;
			this.boundFields.$searchVignetteResult[0].vignette.applyChange(data);
			this._applySelectedStyle();
			this._displaySearchFacetsBar(this.boundFields.$searchVignetteResult[0].vignette);
		} else {
			var newData = {
				$searchVignetteField: "",
				selectedEndpoint: this.selectedEndpoint,
				$links: {
					$back: {
						$isHidden: false
					}
				},
				$properties: {
					$searchVignetteField: {
						$isHidden: false
					}
				}
			};
			this.applyChange(newData);
			this._buildBrowseData(data);
			this.browseView = this._buildBrowseView();
		}
		this._updateBrowseViewDisplay(!isSearchRequest);
		this.idMap["s-sv-vignette-section"].setState({
			$isHidden: !isSearchRequest
		});
		this.endChange();
	},
	_updateSelectedEndpoint: function(endpoint) {
		this.selectedEndpoint = endpoint;
		if (this.selectedEndpoint) {
			this.showPageSecurity(undefined, this.selectedEndpoint.$value || this.selectedEndpoint.description);
		}
	},
	updateFilterState: function(options) {
		var self = this;
		self.jsonParams = options.jsonParams;
		options.method = "GET";
	},
	_displaySearchFacetsBar: function(page) {
		page.menuBar.isSlotVisible = true;
		if (!page.menuBar.page.designer) {
			if (page.boundFields.$searchFacets && page.boundFields.$searchFacets[0].hasFacet) {
				page.menuBar.barSlot.style.display = "";
				//document.site.toggleClass(page.menuBar.barSlot, "s-sv-search-menubar", true);
				/*if (page.menuBar.page.layoutSlot.style.display != "none") {
                 document.site.resize();
                 }*/
			}
		}
	},
	_buildBrowseData: function(data) {
		// build browse data
		this.vignetteData = {
			modules: {}
		};
		for (var ii = 0, jj = data.$resources.length; ii < jj; ii++) {

			var resource = data.$resources[ii];
			var noCategoryKey = "noCategory";
			var noModuleKey = "noModule";
			var moduleKey = resource.module && (resource.module.$key || resource.module.$uuid) || noModuleKey;
			var hasCategories = resource.categories && resource.categories.length > 0;

			if (!this.vignetteData.modules[moduleKey]) {
				this.vignetteData.modules[moduleKey] = resource.module || {
					title: document.site.localize.ldpNoModule
				};
				this.vignetteData.modules[moduleKey].categories = {};
			}

			if (!hasCategories) {
				if (!this.vignetteData.modules[moduleKey].categories[noCategoryKey]) {
					this.vignetteData.modules[moduleKey].categories[noCategoryKey] = {
						$uuid: noCategoryKey,
						$vignettes: [],
						description: document.site.localize.ldpNoCategory
					};
				}
				this.vignetteData.modules[moduleKey].categories[noCategoryKey].$vignettes.push(resource);
			} else {
				for (var mm = 0, pp = resource.categories.length; mm < pp; mm++) {
					var category = resource.categories[mm];
					if (!this.vignetteData.modules[moduleKey].categories[category.$uuid]) {
						this.vignetteData.modules[moduleKey].categories[category.$uuid] = category;
						this.vignetteData.modules[moduleKey].categories[category.$uuid].$vignettes = [];
					}
					this.vignetteData.modules[moduleKey].categories[category.$uuid].$vignettes.push(resource);
				}
			}

		}

		if (data.$totalResults && data.$itemsPerPage && (data.$totalResults > data.$itemsPerPage)) {
			//TODO show info diagnose only $itemPerPage results considered. Use search feature for complete list
		}
	},
	_updateBrowseViewDisplay: function(show) {
		document.site.emptyDom(this.idMap["s-sv-browse-section"].body);
		this.idMap["s-sv-browse-section"].body.appendChild(this.browseView);
		this.idMap["s-sv-browse-section"].setTitle(this.selectedCategoryTitle);
		this.idMap["s-sv-browse-section"].setState({
			$isHidden: !show
		});
		document.site.toggleClass(this.idMap["s-sv-browse-section"].domTitle, "s-disabled");

	},
	_buildBrowseView: function() {
		// dispose values
		this.selectedModId = this.selectedModLink = this.selectedCatId = this.selectedCatLink = null;

		// browse content slot
		this.browseLayout = document.createElement("div");
		this.browseLayout.className = "s-sv-browse-layout";

		// modules layout
		var modulesLayout = document.createElement("div");
		modulesLayout.className = "s-sv-browse-modules";
		this.browseLayout.appendChild(modulesLayout);

		// append separator
		var sep = document.createElement("div");
		sep.className = "s-sv-browse-sep";
		this.browseLayout.appendChild(sep);

		// modules layout header
		this.modulesLayoutHeader = document.createElement("div");
		this.modulesLayoutHeader.className = "s-sv-browse-module-header s-active";
		this.modulesLayoutHeader.textContent = document.site.localize.ldpModulesTitle;
		modulesLayout.appendChild(this.modulesLayoutHeader);

		// modules layout body
		var body = document.createElement("div");
		body.className = "s-sv-browse-module-body";
		modulesLayout.appendChild(body);

		// append modules
		var modKeys = Object.keys(this.vignetteData.modules);


		// sort alphabetical order
		var self = this;
		modKeys.sort(function(itemA, itemB) {
			if (self.vignetteData.modules[itemA].title > self.vignetteData.modules[itemB].title)
				return self.vignetteData.modules[itemB].title == document.site.localize.ldpNoModule ? -1 : 1;
			if (self.vignetteData.modules[itemA].title < self.vignetteData.modules[itemB].title)
				return self.vignetteData.modules[itemA].title == document.site.localize.ldpNoModule ? 1 : -1;
			return 0;
		});

		for (var ii = 0, jj = modKeys.length; ii < jj; ii++) {
			var modItemSlot = document.createElement("div");
			modItemSlot.className = "s-sv-browse-module-slot";

			var modIcon = document.createElement("div");
			modIcon.className = "s-sv-browse-module-icon";
			modIcon.setAttribute("style", "background-image: url('/syracuse-ui/themes/desktop/sage/images/modules/s_module_" + (this.vignetteData.modules[modKeys[ii]].code || "no_code").toLowerCase() + ".png')");
			modItemSlot.appendChild(modIcon);

			var modItem = document.createElement("a");
			modItem.className = 's-sv-browse-module-item';
			modItem.setAttribute("data-s-picker", "sv-module-picker");
			modItem.setAttribute("sv-module-id", modKeys[ii]);
			modItem.textContent = this.vignetteData.modules[modKeys[ii]].title;
			modItem.title = this.vignetteData.modules[modKeys[ii]].code || "";
			modItemSlot.appendChild(modItem);
			body.appendChild(modItemSlot);
		}

		// categories layout
		this.categoriesLayout = document.createElement("div");
		this.categoriesLayout.className = "s-sv-browse-categories";
		this.categoriesLayoutHeader = document.createElement("div");
		this.categoriesLayoutHeader.className = "s-sv-browse-categories-header";
		this.categoriesLayoutHeader.textContent = document.site.localize.ldpCategoriesTitle;
		this.categoriesLayout.appendChild(this.categoriesLayoutHeader);
		this.categoriesLayoutBody = document.createElement("div");
		this.categoriesLayoutBody.className = "s-sv-browse-categories-body";
		this.categoriesLayout.appendChild(this.categoriesLayoutBody);
		this.browseLayout.appendChild(this.categoriesLayout);

		// append separator (2)
		var sep = document.createElement("div");
		sep.className = "s-sv-browse-sep";
		this.browseLayout.appendChild(sep);

		// vignettes layout
		this.vignettesLayout = document.createElement("div");
		this.vignettesLayout.className = "s-sv-browse-vignettes";
		this.vignettesLayoutHeader = document.createElement("div");
		this.vignettesLayoutHeader.className = "s-sv-browse-vignettes-header";
		this.vignettesLayoutHeader.textContent = document.site.localize.ldpVignettesTitle;
		this.vignettesLayout.appendChild(this.vignettesLayoutHeader);
		this.vignettesLayoutBody = document.createElement("div");
		this.vignettesLayoutBody.className = "s-sv-browse-vignettes-body";
		this.vignettesLayout.appendChild(this.vignettesLayoutBody);
		this.browseLayout.appendChild(this.vignettesLayout);

		return this.browseLayout;
	},
	ensureDefaultArticle: function($article, $prototype) {
		function getTypesLayoutInitValue() {
			return {
				$isTitleHidden: true,
				$css: "s-sv-type",
				$layout: {
					$layoutType: "stack",
					$items: []
				}
			};
		}

		if ($article) {
			return $article;
		} else {

			// --- in order to have types displayed in rows of three types
			var types = ["requests", "processes", "stats", "representation", "extLink"],
				typesLayout = [],
				typesLayoutItem = getTypesLayoutInitValue();

			for (var ii = 0, jj = types.length; ii < jj; ii++) {
				typesLayoutItem.$layout.$items.push({
					$category: "link",
					$bind: types[ii],
					$css: "s-sv-type-link s-sv-type-" + types[ii],
					$skin: "s-sv-type-skin"
				});
				if ((ii + 1) == jj) {
					typesLayout.push(typesLayoutItem);
					break;
				}
				if ((ii + 1) % 2 == 0) {
					typesLayout.push(typesLayoutItem);
					typesLayoutItem = getTypesLayoutInitValue();
				}
			}
			// ---

			return {
				$title: document.site.localize.ldpAddNewVignette,
				$layout: {
					$items: [{
						$category: "section",
						$isTitleHidden: true,
						$clientId: "s-sv-page-1",
						$layout: {
							$items: [{
								$bind: "$back",
								$category: "link",
								$skin: "s-sv-back-link",
								$isHidden: true,
								$clientId: "s-sv-back-link"
							}, {
								$category: "section",
								$title: document.site.localize.ldpSelectEndpoint,
								$clientId: "s-sv-endpoint-section",
								$layout: {
									$layoutType: "stack",
									$items: [{
										$isTitleHidden: true,
										$bind: "endpoint",
									}]
								}
							}, {
								$category: "section",
								$title: document.site.localize.ldpBrowseCategory,
								$clientId: "s-sv-category-section",
								$layout: {
									$layoutType: "row",
									$items: typesLayout
								}
							}]
						}
					}, {
						$category: "section",
						$isTitleHidden: true,
						$clientId: "s-sv-page-2",
						$isHidden: true,
						$layout: {
							$items: [{
								$category: "section",
								$isTitleHidden: true,
								$layout: {
									$items: [{
										$bind: "selectedEndpoint",
										$isHidden: true
									}, {
										$title: document.site.localize.ldpUseSearch,
										$layout: {
											$items: [{
												$bind: "$searchVignetteField",
												$isTopLabelAlignment: false,
												$isHidden: true
											}]
										}
									}, {
										$category: "field",
										$bind: "selectedVignettes",
										$isTitleHidden: false,
										$clientId: "s-sv-selectedvignettes",
										$noDataText: document.site.localize.ldpNoVignetteSelected,
										$isHidden: true
									}]
								}
							}, {
								$category: "section",
								$title: document.site.localize.ldpNoVignetteFounds,
								$clientId: "s-sv-vignette-section",
								$isHidden: true,
								$layout: {
									$layoutType: "stack",
									$items: [{
										$bind: "$searchVignetteResult"
									}]
								}

							}, {
								$category: "section",
								$css: "s-sv-browse-section",
								$clientId: "s-sv-browse-section"
							}]
						}
					}]
				}
			};
		}
	},
	drawBox: function() {
		DesktopPage.prototype.drawBox.call(this);
		this._bindEvents(true);
	},
	_ensureMenus: function() {
		this.menuBar = new MenuBar();
		this.menuBar.options = {
			$isResizerDisabled: true
		};
		this.menuBar.load(this);
	},
	_bindEvents: function(bind) {
		var self = this;
		if (self.$$item) {
			if (bind) {
				self.$$item.delegate(".s-sv-search-res-carditem", "click", function() {
					if (!this.getAttribute("data-s-menu")) {
						var $$menu = $(this).find("a[data-s-menu]");
						var menu = document.site.findMenu($$menu[0]);
						if (menu && !menu.$isDisabled) {
							menu.click();
						}
						return false;
					}
				});
				self.$$item.delegate(".s-sv-search-res-carditem", "mouseover", function() {
					if (!this.getAttribute("data-s-menu")) {
						var $$menu = $(this).find("a[data-s-menu]");
						var menu = document.site.findMenu($$menu[0]);
						// update vignette categories and module info style
						self._updatePropertiesStyle(menu.articleParent, true);
						return false;
					}
				});
				self.$$item.delegate(".s-sv-search-res-carditem", "mouseout", function() {
					if (!this.getAttribute("data-s-menu")) {
						var $$menu = $(this).find("a[data-s-menu]");
						var menu = document.site.findMenu($$menu[0]);
						// update vignette categories and module info style
						if (menu.articleParent.$isSelected == undefined || menu.articleParent.$isSelected != true) {
							self._updatePropertiesStyle(menu.articleParent, false);
						}
						return false;
					}
				});
			} else {
				self.$$item.undelegate();
			}
		}
	},
	dispose: function() {
		this._bindEvents(false);
		DesktopPage.prototype.dispose.call(this);
	}
});