"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _isRoleList(list) {
	return list.$item.$bind == "rolePages";
}

function _applyOrderPreferences(list) {
	if (!_isRoleList(list) && list.page.preferences.pages) {
		if (list.records && list.records.length) {
			var orders = [];
			for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
				orders.push(list.records[ii].$uuid);
			}
			for (var ii = 0, jj = list.page.preferences.pages.length; ii < jj; ii++) {
				var $uuid = list.page.preferences.pages[ii];
				var record = list.recordsMap[$uuid];
				if (record) {
					record.domItem.parentNode.appendChild(record.domItem);
					orders.splice(orders.indexOf($uuid), 1);
				}
			}
			for (var ii = 0, jj = orders.length; ii < jj; ii++) {
				var record = list.recordsMap[orders[ii]];
				record.domItem.parentNode.appendChild(record.domItem);
			}
		}
	}
}

function Builder() {}

exports.Builder = helpers.defineClass(Builder, null, {
	initialize: function(list) {
		this.list = list;
		this.emptyMessage = syra_local.ldpNoPage;
		list.$item.$isTopLabelAlignment = true;
		if (!list.$item.$layout || !list.$item.$layout.$items) {
			list.$item.$layout = list.defineDefaultCard().$layout;
		}
		list.$item.$alternateStyle = false;
	},
	endInitiallize: function() {
		this.list.$item.$isTopLabelAlignment = true;
		if (!this.list.$item.$layout || !this.list.$item.$layout.$items) {
			this.list.$item.$layout = this.list.defineDefaultCard().$layout;
		}
	},
	saveReorder: function(reorderRecord, targetRecord, isAfter) {
		var list = this.list;
		if (!_isRoleList(list)) {
			var page = list.page;
			page.preferences.pages = [];
			var children = list.body.children;
			for (var ii = 0, jj = children.length; ii < jj; ii++) {
				page.preferences.pages.push(children[ii].syraRecord);
			}
			if (reorderRecord) {
				var reorderIndex = page.preferences.pages.indexOf(reorderRecord.$uuid);
				var targetIndex = page.preferences.pages.indexOf(targetRecord.$uuid);
				page.preferences.pages.splice(reorderIndex, 1);
				if (targetIndex > reorderIndex) {
					reorderIndex = isAfter ? targetIndex : (targetIndex - 2);
				} else {
					reorderIndex = isAfter ? targetIndex + 1 : (targetIndex);
				}
				reorderIndex = Math.max(reorderIndex, 0);
				page.preferences.pages.splice(reorderIndex, 0, reorderRecord.$uuid);
			}
			page.savePreferences();
			_applyOrderPreferences(list);
		}
		return false;
	},
	isDraggable: function(target, event) {
		return this.list.isReorderRecordDraggable(target, event);
	},
	list_onItemInOut: function(onEnter, event, target) {

	},
	list_onAfterFill: function() {
		_applyOrderPreferences(this.list);
	},
	list_onAfterDraw: function() {
		this.list.body = this.list._core;
		this.list._dataValue.style.overflow = "auto";
		this.list.$skin = this.list.$item.$skin || "s-cards";
		this.list.applyDesignMetaData(this.list.$item, false);
		this.list.loadSelector();
		this.list.capabilityMaker.apply(this.list);
		this.list.ensureLayoutMode();
		this.list.layoutSlot.appendChild(this.list.domItem);
		syra_dd.addToColResizers(this.list, true);
	},
	record_reorder: function(record, target, isAfter) {
		if (target) {
			target.domItem.parentNode.insertBefore(this.domItem, isAfter ? target.domItem.nextSibling : target.domItem);
		} else {
			if (isAfter) {
				this.list.body.appendChild(record.domItem);
			} else {
				this.list.body.insertBefore(record.domItem, this.list.body.firstChild);
			}
		}
	},
	record_onItemInOut: function(record, onEnter, event) {
		this.list.selector && record.highlightOnEnter(onEnter, event);
	},
	record_dispose: function(record) {
		if (record.page && record.page.selectedPageRecord == record) {
			this.record_onSelect(record, false);
		}
		record.childPage && record.removeItem(record.childPage, true);
		record.childPage = record.cardItem = record.dataSlot = record.body = record.menusSlot = null;
	},
	record_draw: function(record) {
		record.$useDeletePicker = true;
		record.$item.$isPickerMenuHidden = true;
		record.$mnPickersCss = "s-inplace-picker";
		record.$isVerticalDirection = true;
		record.domItem = document.createElement("div");
		record.$skin = "s-ldpm-record";
		record.domItem.className = record.$skin;
		record.domItem.syraRecord = record.$uuid;
		record.domItem.syrainout = record.domItem.syraItem = record.id;
		record.dataSlot = record.body = document.createElement("div");
		record.body.className = record.$skin + "-title";
		record.domItem.appendChild(record.body);

		if (!_isRoleList(this.list)) {
			record.menusSlot = record.domItem;
			this.list.capabilityMaker.addReorder(record);
		}

		if (this.list.selector.isRowMode) {
			record.body.syraOnClick = "onSelectorClick";
			record.body.className += " s-list-selector-row";
		}
		record.cardItem = record.page.loadNewItem(record.body, {
			$bind: "title",
			$isMenusHidden: true,
			$isDetailLinkDisabled: true,
			$category: "field",
			$isEditMode: record.$isEditMode,
			$inplace: true,
			$css: "s-ldpm-title-field"
		}, record);
		this.list._core.appendChild(record.domItem);
		this.list.capabilityMaker.applyToRecord(record);
	},
	record_onSelect: function(record, selected) {
		syra_site.dom.toggleClass(record.domItem, "s-list-record-selected", selected);
		var page = record.page;
		if (selected) {
			if (page.selectedPageRecord && record.list != page.selectedPageRecord.list) {
				page.selectedPageRecord.list.selector.selectRecord(page.selectedPageRecord, false);
			}
			page.selectedPageRecord = record;
			syra_site.landingPageMaster.loadVignettesInChildPage(record, record.dataset.vignettes);
			page.childSlot.appendChild(record.childPage.domItem);
			page.preferences.$selected = record.dataset.$uuid;
			if (page.isPageLoaded) {
				page.savePreferences();
			}
			page.setTitle(page.$item.$title = record.childPage.getTitle());
			record.childPage.displayed = true;
			syra_site.siteFunctions.refreshMainPageSecurity(record.childPage);
			syra_site.ensureArticleVisibility(record.childPage);
			record.scrollToRecord();
		} else {
			if (page.selectedPageRecord == record) {
				page.selectedPageRecord = null;
			}
			if (record.childPage) {
				record.childPage.displayed = false;
				syra_site.dom.removeChild(record.childPage.domItem);
			}
		}
	},
	record_onBeforeLoad: function(record) {
		record.$defaultSkinSection = record.$defaultSkinBlock = this.list.$item.$skinCard || "s-h3";
	},
	record_onAfterApplyChange: function(record, metaData) {
		if (record.dataset.description && record.dataset.description != record.dataset.title) {
			record.domItem.title = record.dataset.description;
		}
		if (record.childPage && metaData && metaData.vignettes) {
			syra_site.landingPageMaster.loadVignettesInChildPage(record, metaData.vignettes);
		}
	},
	dispose: function() {
		if (this.list) {
			syra_dd.addToColResizers(this.list, false);
			syra_site.dom.empty(this.list._core);
		}
	}
});