"use strict";
var helpers = require('syracuse-core/lib/helpers');
var VignetteField = require("syracuse-ui/lib/page/landing/vignette/field/vignetteField").VignetteField;

var _templatePattern = /(\{.*?\})/g;

function _getCategory(field) {
	return field.$field && field.$field.$isLandingSearchVignette ? "landingSearchVignette" : "vignette";
}

function _loadContentPage(field) {
	if (!field._isContentPageRequested && field.articleParent.isChildItemDisplay(field)) {
		field._isContentPageRequested = true;
		// to handle search vignette page (fk)
		if (!field.$url && field.$field && field.$field.$prototype) {
			field.vignette = syra_site.pageLoader.load({
				layoutSlot: field.body,
				$category: _getCategory(field),
				vignetteField: field,
				$facet: "$query",
				$autoFetch: false,
				$representation: field.$field
			});
			field.onVignettePageLoaded(field._onVignetteRefresh);
		} else {
			!_parseEmbeddedUrl(field) && _loadContentRepresentation(field);

		}
	}
}

function _parseEmbeddedUrl(field) {
	if (field.$field.$location && field.$field.$location.$target == "embedded") {
		var keys = field.$field.$location.$url.match(_templatePattern);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			var key = keys[ii];
			keys[ii] = key.substr(1, key.length - 2);
			if (!field.masterKeys) {
				field.masterKeys = {};
			}
			field.masterKeys[keys[ii]] = undefined;
		}
		(field.articleParent.masterChildRelations = field.articleParent.masterChildRelations || []).push(field);
		return true;
	}
	return false;
}

function _unregisterMasterChildRelation(field) {
	var relations = field.articleParent && field.articleParent.masterChildRelations;
	if (relations) {
		var found = relations.indexOf(field);
		relations.splice(found, 1);
	}
}

function _loadContentRepresentation(field) {
	syra_controller.loadRepresentation({
		article: null,
		segments: field.$url || field.$field.$location.$url,
		success: function($itemPage) {
			if (field.body) {
				$itemPage.layoutSlot = field.body;
				$itemPage.$category = _getCategory(field);
				$itemPage.vignetteField = field;
				var $vignette = field.$item.$vignette;
				var altVignetteKey;
				if (field.$url && field.$field.$location.$url != field.$url) {
					var newSeg = syra_site.urlMaker.parse(field.$url);
					var sourceSeg = syra_site.urlMaker.parse(field.$field.$location.$url);
					if (newSeg.params.representation != sourceSeg.params.representation) {
						$vignette = field.$item.$altVignettes && field.$item.$altVignettes[newSeg.params.representation];
						altVignetteKey = newSeg.params.representation;
						if (!$vignette && field.$item.$vignette) {
							$vignette = helpers.object.clone(field.$item.$vignette, true);
						}
					}
				}
				if ($vignette) {
					$itemPage.$representation.$article = $vignette;
					delete $itemPage.$representation.$article.$menus;
				}
				field.vignette = syra_site.pageLoader.load($itemPage);
				field.vignette.altVignetteKey = altVignetteKey;
				field.onVignettePageLoaded(field._onVignetteRefresh);
			}
		}
	});
}

function PageVignetteField() {}

exports.PageVignetteField = helpers.defineClass(PageVignetteField, VignetteField, {
	onSwitchMaximize: function() {
		this.vignette && this.vignette.ensurePageVisibility();
	},
	refreshChildRelation: function() {
		if (!this.vignette) {
			this.$url = syra_site.expressionMaker.parseUrl(this.articleParent, this.$field.$location.$url, this.articleParent.dataset, this.masterKeys);
			_loadContentRepresentation(this);
		}
	},
	designArticle: function(open) {
		if (this.vignette) {
			switch (this.vignette.$facet) {
				case "$query":
				case "$cube":
					var fields = this.vignette.layoutContent.getFields();
					for (var ii = 0, jj = fields.length; ii < jj; ii++) {
						if (fields[ii].isList) {
							var open = !fields[ii].designer;
							fields[ii].designArticle(open);
							break;
						}
					}
					break;
			}
		}
	},
	onMenusVignetteClick: function(event, picker) {
		this.vignette && this.vignette.onMenusVignetteClick(event, picker);
	},
	renderLayoutContent: function($url, onVignetteRefresh) {
		VignetteField.prototype.renderLayoutContent.call(this);
		if ($url) {
			this.$url = $url;
		} else {
			this.$url = this.$field.$altLocation && this.$field.$altLocation.$url;
			if (this.$url && this.page.masterRecord) {
				this.$url = syra_site.expressionMaker.parse(this.page.masterRecord.page, this.$url);
			}
		}
		this._isContentPageRequested = false;
		this._onVignetteRefresh = onVignetteRefresh;
		_loadContentPage(this);
	},
	onVignettePageLoaded: function(onVignetteRefresh) {
		onVignetteRefresh && this.onItemInOut(true);
		if (this.page.isDesignModeEnabled) {
			this.showButton("design", ["$query", "$cube"].indexOf(this.vignette.$facet) >= 0);
		}
	},
	resizeField: function(doResize) {
		_loadContentPage(this);
		this.vignette && this.vignette.resizeArticle(doResize);
	},
	dispose: function() {
		_unregisterMasterChildRelation(this);
		this._onVignetteRefresh = null;
		if (this.vignette) {
			this.vignette.dispose();
			this.vignette = null;
		}
		VignetteField.prototype.dispose.call(this);
	}
});