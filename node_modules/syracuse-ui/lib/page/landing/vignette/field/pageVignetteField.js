"use strict";
var helpers = require('syracuse-core/lib/helpers');
var VignetteField = require("syracuse-ui/lib/page/landing/vignette/field/vignetteField").VignetteField;

function PageVignetteField() {}

exports.PageVignetteField = helpers.defineClass(PageVignetteField, VignetteField, {
	onSwitchMaximize: function() {
		this.vignette && this.vignette.ensurePageVisibility();
	},
	designArticle: function(open) {
		if (this.vignette) {
			switch (this.vignette.$facet) {
				case "$query":
				case "$cube":
					var fields = this.vignette.layoutContent.getFields();
					for (var ii = 0, jj = fields.length; ii < jj; ii++) {
						if (fields[ii].isList) {
							var open = !fields[ii].designer;
							fields[ii].designArticle(open);
							break;
						}
					}
					break;
			}
		}
	},
	renderLayoutContent: function($url, onVignetteRefresh) {
		VignetteField.prototype.renderLayoutContent.call(this);
		if ($url) {
			this.$url = $url;
		} else {
			this.$url = this.$field.$altLocation && this.$field.$altLocation.$url;
		}
		this._isContentPageRequested = false;
		this._onVignetteRefresh = onVignetteRefresh;
		this._loadContentPage();
	},
	_loadContentPage: function() {
		var self = this;
		if (!self._isContentPageRequested && self.articleParent.isChildItemDisplay(self)) {
			self._isContentPageRequested = true;
			// to handle search vignette page (fk)
			var category = this.$field && this.$field.$isLandingSearchVignette ? "landingSearchVignette" : "vignette";
			if (!this.$url && this.$field && this.$field.$prototype) {
				this.vignette = syra_site.pageLoader.load({
					layoutSlot: this.body,
					$category: category,
					vignetteField: this,
					$facet: "$query",
					$autoFetch: false,
					$representation: this.$field
				});
				this.onVignettePageLoaded(this._onVignetteRefresh);
			} else {
				syra_controller.loadRepresentation({
					article: null,
					segments: self.$url || self.$field.$location.$url,
					success: function($itemPage) {
						if (self.body) {
							$itemPage.layoutSlot = self.body;
							$itemPage.$category = category;
							$itemPage.vignetteField = self;
							var $vignette = self.$item.$vignette;
							var altVignetteKey;
							if (self.$url && self.$field.$location.$url != self.$url) {
								var newSeg = syra_site.urlMaker.parse(self.$url);
								var sourceSeg = syra_site.urlMaker.parse(self.$field.$location.$url);
								if (newSeg.params.representation != sourceSeg.params.representation) {
									$vignette = self.$item.$altVignettes && self.$item.$altVignettes[newSeg.params.representation];
									altVignetteKey = newSeg.params.representation;
									if (!$vignette && self.$item.$vignette) {
										$vignette = helpers.object.clone(self.$item.$vignette, true);
									}
								}
							}
							if ($vignette) {
								$itemPage.$representation.$article = $vignette;
								delete $itemPage.$representation.$article.$menus;
							}
							self.vignette = syra_site.pageLoader.load($itemPage);
							self.vignette.altVignetteKey = altVignetteKey;
							self.onVignettePageLoaded(this._onVignetteRefresh);
						}
					}
				});
			}
		}
	},
	onVignettePageLoaded: function(onVignetteRefresh) {
		onVignetteRefresh && this.onItemInOut(true);
		if (this.page.isDesignModeEnabled) {
			this.togglePicker("design", ["$query", "$cube"].indexOf(this.vignette.$facet) >= 0);
		}
	},
	resizeField: function() {
		this._loadContentPage();
		this.vignette && this.vignette.resizeArticle();
	},
	dispose: function() {
		this._onVignetteRefresh = null;
		if (this.vignette) {
			this.vignette.dispose();
			this.vignette = null;
		}
		VignetteField.prototype.dispose.call(this);
	}
});