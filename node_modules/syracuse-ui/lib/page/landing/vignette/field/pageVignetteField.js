"use strict";
var helpers = require('syracuse-core/lib/helpers');
var VignetteField = require("syracuse-ui/lib/page/landing/vignette/field/vignetteField").VignetteField;

function PageVignetteField() {}

exports.PageVignetteField = helpers.defineClass(PageVignetteField, VignetteField, {
	onSwitchMaximize: function() {
		if (this.vignette) {
			this.vignette.ensurePageVisibility();
		}
	},
	designArticle: function(open) {
		if (this.vignette) {
			switch (this.vignette.$facet) {
				case "$query":
				case "$cube":
					var fields = this.vignette.layoutContent.getFields();
					for (var ii = 0, jj = fields.length; ii < jj; ii++) {
						if (fields[ii].isList) {
							var open = !fields[ii].designer;
							fields[ii].designArticle(open);
							break;
						}
					}
					break;
			}
		}
	},
	renderLayoutContent: function($url, onVignetteRefresh) {
		var self = this;
		VignetteField.prototype.renderLayoutContent.call(self);
		if ($url) {
			self.$url = $url;
		} else {
			self.$url = self.$field.$altLocation && self.$field.$altLocation.$url;
		}

		var category = this.$field && this.$field.$isLandingSearchVignette ? "landingSearchVignette" : "vignette";

		// to handle search vignette page (fk)
		if (!self.$url && self.$field && self.$field.$prototype) {
			self.vignette = syra_site.pageLoader.load({
				layoutSlot: self.body,
				$category: category,
				vignetteField: self,
				$facet: "$query",
				$autoFetch: false,
				$representation: self.$field
			});
			self.onVignettePageLoaded(onVignetteRefresh);
		} else {
			syra_controller.loadRepresentation({
				article: null,
				segments: self.$url || self.$field.$location.$url,
				success: function($itemPage) {
					if (self.body) {
						$itemPage.layoutSlot = self.body;
						$itemPage.$category = category;
						$itemPage.vignetteField = self;
						var $vignette = self.$item.$vignette;
						var altVignetteKey;
						if (self.$url && self.$field.$location.$url != self.$url) {
							var newSeg = syra_site.urlMaker.parse(self.$url);
							var sourceSeg = syra_site.urlMaker.parse(self.$field.$location.$url);
							if (newSeg.params.representation != sourceSeg.params.representation) {
								$vignette = self.$item.$altVignettes && self.$item.$altVignettes[newSeg.params.representation];
								altVignetteKey = newSeg.params.representation;
								if (!$vignette && self.$item.$vignette) {
									$vignette = helpers.object.clone(self.$item.$vignette, true);
								}
							}
						}
						if ($vignette) {
							$itemPage.$representation.$article = $vignette;
							delete $itemPage.$representation.$article.$menus;
						}
						self.vignette = syra_site.pageLoader.load($itemPage);
						self.vignette.altVignetteKey = altVignetteKey;
						self.onVignettePageLoaded(onVignetteRefresh);
					}
				}
			});
		}
	},
	onVignettePageLoaded: function(onVignetteRefresh) {
		if (onVignetteRefresh) {
			this.onItemInOut(true);
		}
		if (this.page.isDesignModeEnabled) {
			this.togglePicker("design", ["$query", "$cube"].indexOf(this.vignette.$facet) >= 0);
		}
	},
	resizeField: function() {
		this.vignette && this.vignette.resizeArticle();
	},
	dispose: function() {
		if (this.vignette) {
			this.vignette.dispose();
			this.vignette = null;
		}
		VignetteField.prototype.dispose.call(this);
	}
});