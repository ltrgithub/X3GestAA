"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SectionBlock = require("syracuse-ui/lib/article/sectionBlock").SectionBlock;

function VignetteField() {}

exports.VignetteField = helpers.defineClass(VignetteField, SectionBlock, {
	ensureSkin: function() {
		SectionBlock.prototype.ensureSkin.call(this);
		this.$skinSlot = this.$skin;
		this.$designLevel = "field";
	},
	ensureVisibility: function() {
		//specific behavior for vignetteField that are section and field
		return true;
	},
	setDataBind: function(value, record, metaData, $bind) {},
	loadBox: function() {
		SectionBlock.prototype.loadBox.call(this);
		if (this.page.registerVignette) {
			this.page.registerVignette(this);
		} else {
			this.articleParent.bind(this, this.$item.$bind);
		}
		if (this.$isAutoSize) {
			this.articleParent.registerAutoSizeFields(this, true);
		}
	},
	dispose: function() {
		if (this.articleParent && this.$isAutoSize) {
			this.articleParent.registerAutoSizeFields(this, false);
		}
		this.vignette = this.$field = null;
		SectionBlock.prototype.dispose.call(this);
	},
	refresh: function(onVignetteRefresh) {
		this.renderLayoutContent(null, onVignetteRefresh);
	},
	doPicker: function(pickerId) {
		switch (pickerId) {
			case "delete":
				this.page.landingPageMaster.onDeleteVignetteClick(this);
				break;
			case "refresh":
				this.refresh(true);
				break;
			case "menus":
				//debugger;
				break;
			default:
				SectionBlock.prototype.doPicker.call(this, pickerId);
				break;
		}
	},
	onItemEnterLeave: function(event, isEnter) {
		if (this.pickers) {
			if (!document.site.siteOptions.isOffice) {
				this.page.showOnEnter(this.pickers.slot, event, isEnter);
			}
		}
	},
	ensurePickersVisibiliy: function() {
		this.onItemEnterLeave();
	},
	drawBox: function() {
		this.domItem = document.createElement("section");
		this.domItem.className = this.$skin;
		this.domItem.setAttribute("data-s-inout", this.id);
		this.domItem.setAttribute("data-s-field", this.domItem.syra_field_id = this.id);

		this.$$item = $(this.layoutSlot.appendChild(this.domItem));
		this.setState(this.$item);
		this.body = document.createElement("div");
		this.body.className = this.$skin + "-body";
		this.appendHeader();
		this.ensureLayoutMode();
		this.domItem.appendChild(this.body);
		this.applyDesignMetaData(this.$item, false);
		if (this.page.isDesignModeEnabled) {
			this.togglePicker("design", true);
		}
		this.togglePicker("refresh", true);
		this.togglePicker("maximize", true);
		if (this.page.isDesignModeEnabled) {
			this.togglePicker("delete", true);
		}
		this.openBox(this.$item.$opened !== false);
	},
	onDesignVignette: function(open) {
		if (this.pickers.items) {
			var site = document.site;
			var ids = Object.keys(this.pickers.items);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				if (ids[ii] != "maximize") {
					site.disableItem(this.pickers.items[ids[ii]], open);
				}
			}
		}
	},
	ensureLayoutMode: function() {
		this.ensureSkin();
		if (this.layoutParent) {
			this.layoutParent.ensureLayoutSlot(this);
		}
	},
	renderLayoutContent: function() {
		if (this.vignette) {
			document.site.emptyDom(this.body);
			document.controller.disposeObject(this.vignette);
		}
	}
});