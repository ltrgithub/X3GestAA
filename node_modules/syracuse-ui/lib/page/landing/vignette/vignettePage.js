"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;

function VignettePage() {}

exports.VignettePage = helpers.defineClass(VignettePage, DesktopPage, {
	loadBox: function(initData) {
		this.isSiteRegisterDisabled = true;
		this.mainPageDesignerAccess = "unknow";
		this.isFreeHeight = true;
		this.menuBarPreferenceKey = "vignette-menubar";
		this.defaultItemsPerPage = 10;
		this.$skin = this.$item.$skin || "s-vignette";
		this.$skinMenuBox = "s-page-menus-box";
		this.$defaultSkinBlock = "s-h2";
		this.$defaultSkinSection = "s-h2";
		this.$pageCategory = "vignette";
		this.isVignettePage = true;
		this.$skinMainAction = "s-vignette-main-link";
		this._defaultTitle = this.localize.dskpVignetteTitle;
		this.$item.$isTitleHidden = true;
		DesktopPage.prototype.loadBox.call(this, initData);
	},
	endChange: function() {
		DesktopPage.prototype.endChange.call(this);
		if (this.hasProcessus()) {
			var $location = this.vignetteField.$field.$altLocation || this.vignetteField.$field.$location;
			if ($location && $location.$bind) {
				var menuItems = this.menuItems[$location.$bind];
				if (menuItems && menuItems.length) {
					menuItems[0].highlight(true);
				}
			}
		}
	},
	hasProcessus: function() {
		if (this._hasProcesus === undefined) {
			this._hasProcesus = false;
			var $fields = this.$prototype && this.$prototype.$properties;
			if ($fields) {
				var keys = Object.keys($fields);
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					var $field = $fields[keys[ii]];
					if ($field.$type == "application/x-process") {
						this._hasProcesus = true;
						break;
					}
				}
			}
		}
		return this._hasProcesus;
	},
	onMenuClick: function(menuItem) {
		var persisLocation = this.hasProcessus();
		if (this.hasProcessus()) {
			var root = menuItem.boxParent && menuItem.boxParent.menuGroupRoot;
			persisLocation = root && root.boxParent == this.pageMenusBox;
		}
		if (!persisLocation) {
			persisLocation = !((menuItem.$target && menuItem.$target != "_self") ||
				(menuItem.$method && menuItem.$method != "GET"));
		}
		if (persisLocation) {
			var masterRecord = this.vignetteField.page.masterRecord;
			if (masterRecord && masterRecord.getVignettePreferences) {
				var preferences = masterRecord.getVignettePreferences(this.vignetteField.$item.$bind);
				this.vignetteField.$field.$altLocation = preferences.$location = helpers.object.clone(this.vignetteField.$field.$location, true);
				preferences.$location.$bind = menuItem.$item.$bind;
				preferences.$location.$title = menuItem.getTitle();
				preferences.$location.$url = menuItem.$url;
				preferences.$location.$description = menuItem.$description;
				masterRecord.setVignettePreferences(this.vignetteField.$item.$bind, preferences);
			}
		}
		return true;
	},
	_ensureMenus: function() {
		if (this.$item.$menus) {
			if (!Array.isArray(this.$item.$menus)) {
				var $items = [];
				this.getDefinedFieldList(this.$item.$menus.$layout.$items, $items);
				this.$item.$menus = $items;
			}
		}
		this.$item.$menus = this.$item.$menus || [];
		for (var ii = 0, jj = this.$item.$menus.length; ii < jj; ii++) {
			var $menus = this.$item.$menus[ii];
			$menus.$isMenuPage = true;
			$menus.$isAuthoringEnabled = false;
			$menus.$category = "menus";
			if ($menus.$isBoxCollapsable === undefined) {
				$menus.$isBoxCollapsable = true;
			}
			$menus.$skin = "s-vignette-menus";
		}
		if (this.$prototype && this.$prototype.$properties && this.$prototype.$properties.process) {
			DesktopPage.prototype._ensureMenus.call(this);
		} else {
			if (this.vignetteField) {
				if (!this.menuBarSlot) {
					if (this.vignetteField.pickers && this.vignetteField.pickers.items.menus) {
						syra_site.dom.empty(this.vignetteField.pickers.items.menus);
					}
					this.vignetteField.applyDesignMetaData({
						$hasMenus: true
					});
				}
				this.setArticleId(this.vignetteField.pickers.items.menus);
				this.page.loadNewItem(this.vignetteField.pickers.items.menus, {
					$isMenusBag: true,
					$category: "menus",
					$noText: true,
					$title: this.localize.dskpActions,
					$isTitlePicker: true,
					$isBoxCollapsable: true,
					$isPopupContent: true,
					$clientId: this.id + "-menu-picker",
					$skin: "s-vignette-menus-bar",
					$itemSkin: "s-vignette-menus-link",
					$layout: {
						$items: this.$item.$menus
					}
				}, this);
			}
		}
	},
	fetch: function(options, callback, error) {
		// handling search page vignette field (fk)
		if (this.vignetteField && this.vignetteField.page && this.vignetteField.page.$pageCategory == 'search' && this.vignetteField.page.dataset && Object.keys(this.vignetteField.page.dataset).length > 0) {
			this.vignetteField.page.fetch(options);
		} else {
			DesktopPage.prototype.fetch.call(this, options, callback, error);
		}
	},
	getMasterPage: function() {
		return this.vignetteField.page;
	}
});