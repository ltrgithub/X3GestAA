"use strict";
var helpers = require('syracuse-core/lib/helpers');
var LandingPageDesigner = require("syracuse-ui/lib/authoring/landingPageDesigner").LandingPageDesigner;
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;

function LandingPageChild() {}

exports.LandingPageChild = helpers.defineClass(LandingPageChild, DesktopPage, {
	designArticle: function(open) {
		document.site.designArticle(open, this, LandingPageDesigner);
	},
	dispose: function() {
		this.masterContext = this.registeredVignettes = this.addLink = this.refreshLink = this.designerOpenerLink = null;
		DesktopPage.prototype.dispose.call(this);
	},
	getAddVignetteDefinition: function() {
		var vignettes = this.masterContext.record.$prototype.$properties.vignettes;
		return vignettes && vignettes.$links && vignettes.$links.$select;
	},
	setMasterContext: function(masterContext) {
		this.masterContext = masterContext;
		if (this.getAddVignetteDefinition()) {
			this.addLink.style.display = "";
		}
	},
	appendHeader: function() {
		DesktopPage.prototype.appendHeader.call(this);
		this.addLink = document.createElement("a");
		this.addLink.style.display = "none";
		this.addLink.className = "s-ldp-add-vignette";
		this.addLink.title = this.localize.landingPageAddVignette;
		this.addLink.setAttribute("data-s-picker", "ldp-addVignette");
		this.headerCoreRight.appendChild(this.addLink);
		this.refreshLink = document.createElement("a");
		this.refreshLink.className = "s-ldp-refresh";
		this.refreshLink.title = this.localize.landingPageRefresh;
		this.refreshLink.setAttribute("data-s-picker", "ldp-refresh");
		this.headerCoreRight.appendChild(this.refreshLink);

		this.designerOpenerLink = document.createElement("a");
		this.designerOpenerLink.className = "s-ldp-designer-picker";
		this.designerOpenerLink.setAttribute("data-s-picker", "ldp-openDesigner");
		this.designerOpenerLink.title = this.localize.landingPageOpenDesigner;
		this.designerOpenerLink.style.display = this.refreshLink.style.display = "none";
		this.headerCoreRight.appendChild(this.designerOpenerLink);
	},
	onClickPicker: function(picker, event) {
		switch (picker.getAttribute("data-s-picker")) {
			case "ldp-addVignette":
				this.masterContext.page.addVignette(this, function() {

				});
				event.stopPropagation();
				return false;
			case "ldp-refresh":
				var items = this.layoutContent.getFields();
				for (var ii = 0, jj = items.length; ii < jj; ii++) {
					if (items[ii].doPicker) {
						items[ii].doPicker("refresh");
					}
				}
				event.stopPropagation();
				return false;
			case "ldp-openDesigner":
				this.designer.toggleDesigner();
				event.stopPropagation();
				return false;
		}
		return true;
	},
	applyShortCuts: function(shortcurts, event) {
		if (shortcurts.esc && shortcurts.r) {
			if (this.registeredVignettes) {
				var $binds = Object.keys(this.registeredVignettes);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var field = this.registeredVignettes[$binds[ii]];
					if (field.vignette && field.vignette.applyShortCuts) {
						field.vignette.applyShortCuts(shortcurts);
					}
				}
			}
			return true;
		}
		return DesktopPage.prototype.applyShortCuts.call(this, shortcurts, event);
	},
	registerVignette: function(vignette, $bind) {
		this.registeredVignettes[$bind || vignette.$item.$bind] = vignette;
	},
	addDefaultField: function($bind, $field) {
		return {
			$bind: $bind
		};
	},
	createDefaultArticle: function($article, $prototype) {
		if (!$article) {
			$article = {};
		}
		if (!$article.$layout) {
			$article.$layout = {};
		}
		if (!$article.$layout.$items) {
			var $items = [];
			var $itemFields = [];
			var binds = Object.keys($prototype.$properties);
			for (var ii = 0, jj = binds.length; ii < jj; ii++) {
				var $bind = binds[ii];
				var $field = $prototype.$properties[$bind];
				if ($field && !$field.$isExcluded && !$field.$isTOC) {
					$itemFields.push(this.addDefaultField($bind, $prototype.$properties[$bind]));
				}
			}
			$article.$layout.$layoutType = "tabs";
			$article.$layout.$items = [{
				$category: "section",
				$title: this.getDefaultTabTitle(),
				$layout: {
					$items: $itemFields
				}
			}];
		}
		for (var ii = 0, jj = $article.$layout.$items.length; ii < jj; ii++) {
			$article.$layout.$items[ii].$isEmptyVisible = true;
		}
		return $article;
	},
	ensureDefaultArticle: function($article, $prototype) {
		return this.createDefaultArticle($article, $prototype);
	},
	_addMenuToMenusBag: function($bind, $menu) {
		DesktopPage.prototype._addMenuToMenusBag.call(this, $bind, $menu);
	},
	reloadLayout: function($item) {
		this.registeredVignettes = {};
		DesktopPage.prototype.reloadLayout.call(this, $item);
	},
	ensureDesignerOpenerVisibility: function() {
		document.site.enablePageDesign(false);
	},
	getDefaultTabTitle: function() {
		var defaultTitle = this.localize.landingPageDefaultTabTitle;
		var tabs = this.layoutContent && this.layoutContent.items;
		var count = 1;
		if (tabs) {
			for (var ii = 0, jj = tabs.length; ii < jj; ii++) {
				var title = tabs[ii].getTitle() || "";
				if (title.indexOf(defaultTitle) >= 0) {
					count++;
				}
			}
		}
		return defaultTitle + " " + count;
	},
	onBoxClickItem: function(box, link) {
		if (box) {
			if (box.$item.$isAddLandingTab) {
				this.layoutContent.loadChildItem(null, {
					$category: "section",
					$isEmptyVisible: true,
					$title: this.getDefaultTabTitle(),
				}, this.layoutContent.items.indexOf(box)).openBox(true);
				return false;
			} else {
				if (box.isTabLayout && this.designer) {
					this.designer.onTabClik(box);
				}
			}
		}
		return true;
	},
	applyVignettesChange: function($vignettes) {
		var uuids = Object.keys($vignettes);
		for (var ii = 0, jj = uuids.length; ii < jj; ii++) {
			var $field = this.$prototype.$properties[uuids[ii]];
			if (!$field) {
				this.$prototype.$properties[uuids[ii]] = $vignettes[uuids[ii]];
				this.layoutContent.tabOpened.layoutContent.createChildItem({
					$bind: uuids[ii]
				});
			}
		}
		this.ensurePageVisibility();
		this.designer.endArticleUpdate(this.layoutContent.tabOpened, true);
	},
	loadBox: function(initData, $initDiagnoses) {
		this.isAutoInsertFieldDisabled = true;
		this.registeredVignettes = {};
		this.isDashBoard = true;
		this.$skin = this.$item.$skin || "s-ldp";
		this.$skinMenu = "s-ldp-nav";
		this.$defaultSkinBlock = "s-ldp-h2";
		this.$defaultSkinSection = "s-ldp-h1";
		this._defaultTitle = this.localize.landingPageTitle;
		this.$autoFetch = false;
		DesktopPage.prototype.loadBox.call(this, initData, $initDiagnoses);

		this.designerOpenerLink.style.display = this.refreshLink.style.display = "";
		this.layoutContent.loadChildItem(null, {
			$category: "section",
			$isAddLandingTab: true,
			$isAuthoringEnabled: false,
			$isEmptyVisible: true,
			$title: "+",
			$description: this.localize.landingPageAddTab
		});
		if (this.layoutContent && this.layoutContent.items.length) {
			if (this.layoutContent.items[0].isTabLayout) {
				this.layoutContent.items[0].openBox(true, true);
			}
		}
		this.designArticle(true);
		document.site.userProfile.showPageSecurity(this);
		//temp for right implementation
		if (this.pageViewSelector) {
			this.pageViewSelector.disable(false);
		}
	}
});