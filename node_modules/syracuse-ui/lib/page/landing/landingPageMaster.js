"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var LandingPageBar = require('./master/landingPageBar').LandingPageBar;
var LandingPageList = require('./master/landingPageList').LandingPageList;

function LandingPageMaster() {}

exports.LandingPageMaster = helpers.defineClass(LandingPageMaster, DesktopPage, {
	onExecuteMenuResponse: function(menuItem, responseData) {
		if (menuItem.$sourceBind == "$delete") {
			var record = menuItem.articleParent;
			var list = record.list;
			list.removeRecord(record, true, true);
			if (list.records.length == 0) {
				list.emptyBody(true);
			}
			if (!this.selectedPageRecord) {
				this.ensureChildPageSelection();
			}
		}
		DesktopPage.prototype.onExecuteMenuResponse.call(this, menuItem, responseData);
	},
	/*resizeArticle: function(resize){
     if (this.selectedPageRecord) {
     this.selectedPageRecord.resizeArticle(resize);
     }
     },*/
	saveLandingDesign: function(childPage) {
		var self = this;
		var sendBag = {
			$etag: 1,
			$url: syra_site.urlMaker.formatMenuUrl(childPage.masterRecord, childPage.masterRecord.getSaveDesignLink())
		};
		sendBag.content = syra_site.layoutUpdater.cleanBeforeSave(helpers.object.clone(childPage.$item, true));
		delete sendBag.content.$menus;
		delete sendBag.content.$isModel;
		syra_controller.sendRequest(self, {
			$location: {
				$url: sendBag.$url
			},
			data: sendBag,
			method: "PUT",
			$etag: sendBag.$etag
		}, function(data, response, requestUrl) {
			if (!self.disposed) {
				//debugger;

			}
		});
	},
	deleteVignettes: function(record, $uuids) {
		if ($uuids && $uuids.length) {
			var sendBag = this.ensureSendBag(record);
			sendBag.vignettes = sendBag.vignettes || [];
			for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
				sendBag.vignettes.push({
					$isDeleted: true,
					$uuid: $uuids[ii]
				});
			}
			for (var ii = 0, jj = record.dataset.vignettes.length; ii < jj; ii++) {
				if ($uuids.indexOf(record.dataset.vignettes[ii].$uuid) >= 0) {
					record.dataset.vignettes.splice(ii, 1);
					ii--;
					jj--;
				}
			}
			record.loadVignettesInChildPage(record.dataset.vignettes);
			this.notifyChangeToServer(sendBag, record, true);
		} else {
			record.childPage.designer.endArticleUpdate();
		}
	},
	onDeleteVignetteClick: function(vignetteField) {
		var self = this;
		syra_site.showMessage({
			$title: syra_local.ldpDeleteVignette,
			$message: syra_local.ldpConfirmDeleteVignette.replace("{0}", vignetteField.getTitle()),
			$type: "question",
			callback: function(response) {
				if (response && response.$clientId === "yes") {
					self.deleteVignettes(vignetteField.page.masterRecord, [vignetteField.$field.$vignetteId]);
				}
			}
		});
	},
	addVignette: function(childPage) {
		var self = this;
		var $url = syra_site.urlMaker.formatMenuUrl(childPage.masterRecord, childPage.getAddVignetteDefinition(), childPage.masterRecord);
		syra_site.dialogManager.openPage(self, {
			article: self,
			$url: $url,
			$isOkHidden: true,
			onValidate: function(searchPage) {
				if (searchPage.selectedVignettes) {
					var sendBag = self.ensureSendBag(self.selectedPageRecord);
					sendBag.vignettes = sendBag.vignettes || [];
					var $serverIndex = self.selectedPageRecord.dataset.vignettes.length + sendBag.vignettes.length;
					var selectedVignettes = helpers.object.clone(searchPage.selectedVignettes, true);
					for (var ii = 0, jj = selectedVignettes.length; ii < jj; ii++) {
						selectedVignettes[ii].$uuid = helpers.uuid.generate();
						selectedVignettes[ii].$index = $serverIndex++;
						sendBag.vignettes.push(selectedVignettes[ii]);
					}
					self.notifyChangeToServer(sendBag, self.selectedPageRecord, true);
				}
			}
		});
	},
	getDataUrl: function(article) {
		article = article || this;
		var $parsedUrl = syra_site.expressionMaker.parse(article, article.dataset.$url || article.$prototype.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	notifyChangeToServer: function(sendBag, articleSender, onUpdateContent) {
		var self = this;
		articleSender = articleSender || this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.getDataUrl(articleSender);
				sendBag.$etag = articleSender.dataset.$etag;
				syra_site.uiLocker.lock();
				syra_controller.sendRequest(self, {
					$location: {
						$url: self.getDataUrl(articleSender)
					},
					data: sendBag,
					method: "PUT",
					$etag: sendBag.$etag
				}, function(newData, response, requestUrl) {
					if (!articleSender.disposed) {
						if (articleSender.page != articleSender) {
							syra_site.deltaManager.applyObjectDelta(articleSender.page, articleSender.dataset, newData);
						}
						articleSender.applyChange(newData, response, requestUrl);
						self.ensurePageVisibility();
						if (onUpdateContent) {
							articleSender.childPage.designer.endArticleUpdate();
						} else {
							articleSender.childPage.ensurePageVisibility();
						}
					}
					syra_site.uiLocker.unlock();
				}, function() {
					syra_site.uiLocker.unlock();
				});
			}
		}
	},
	ensureDefaultArticle: function($article, $prototype) {
		return {
			$layout: {
				$items: []
			}
		};
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "rolePages":
			case "userPages":
				return (this[$item.$bind] = new LandingPageList());
		}
		return null;
	},
	savePreferences: function() {
		syra_site.setPreferences("landingpage", this.preferences);
	},
	loadBox: function(initData) {
		this.isLandingMaster = true;
		this.preferences = syra_site.getPreferences("landingpage", {});
		this.mainPageDesignerAccess = "disabled";
		this.isAutoInsertFieldDisabled = true;
		this.isMenuBarDisabled = true;
		this.$isEditMode = true;
		this.$skin = this.$item.$skin || "s-ldpm-page";
		this.$defaultSkinSection = this.$defaultSkinBlock = "s-ldpm-page-h1";
		var data = {};
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.loadBox.call(this, data);
		this.childSlot = document.createElement("div");
		this.childSlot.className = "s-ldpm-child-slot";
		this.layoutContent.domItem.appendChild(this.childSlot);
		(this.bar = new LandingPageBar()).load(this);
		this.ensureChildPageSelection();
	},
	ensureChildPageSelection: function(ignoreLastSelected) {
		var $uuid = (!ignoreLastSelected) ? (this.preferences.$selected || this.dataset.$selected) : undefined;
		if (!$uuid) {
			$uuid = this.userPages && this.userPages.dataset && this.userPages.dataset.length && this.userPages.dataset[0].$uuid;
			if (!$uuid) {
				$uuid = this.rolePages.dataset && this.rolePages.dataset.length && this.rolePages.dataset[0].$uuid;
			}
		}
		if ($uuid) {
			if (this.rolePages.recordsMap[$uuid]) {
				this.userPages && this.userPages.selector.select(null, false);
				this.rolePages.selector.select($uuid, true);
			} else {
				if (this.userPages && this.userPages.recordsMap[$uuid]) {
					this.rolePages.selector.select(null, false);
					this.userPages.selector.select($uuid, true);
				}
			}
		}
		if (!this.selectedPageRecord && !ignoreLastSelected) {
			this.ensureChildPageSelection(true);
		}
	},
	appendHeader: function() {
		this.header = document.createElement("header");
		this.header.className = this.$skin + "-head";
		this.header.style.display = "none";
	},
	onMenuClick: function(menuItem) {
		var self = this;
		if (!menuItem.$isAction) {
			switch (menuItem.$sourceBind) {
				case "delete":
					return false;
				case "$create":
				case "$edit":
					syra_site.dialogManager.openPage(self, {
						article: menuItem.articleParent,
						$url: menuItem.$url,
						$method: menuItem.$method,
						onSave: function(saveItem, dialog) {
							dialog.options.article.notifyClientSave(dialog._content.dataset);
							var $uuid = dialog._content.dataset.$uuid;
							dialog.close(true);
							self.userPages.selector.select($uuid, true);
							if (menuItem.$sourceBind == "$create") {
								var childPage = self.userPages.recordsMap[$uuid].childPage;
								//childPage.designer.toggleDesigner();
								self.addVignette(childPage);
								self.userPages.saveReorder();
								childPage.ensurePageVisibility();
							}
							return false;
						},
						onValidate: function(page) {
							syra_menus.setMenus(page, {
								$actions: {
									$save: {
										$isDisabled: false
									}
								}
							});
							syra_menus.clickMenu(page, "$save");
							return false;
						},
						onClose: function(isCanceled, dispose) {
							return true;
						}
					});
					return false;
			}
		}
		return true;
	},
	resizeArticle: function(resize) {
		DesktopPage.prototype.resizeArticle.call(this, resize);
		if (this.isPageLoaded && this.bar) {
			this.bar.resizeBar();
		}
	},
	dispose: function() {
		if (this.bar) {
			this.bar.dispose();
		}
		this.bar = this.rolePages = this.userPages = this.selectedPageRecord = null;
		DesktopPage.prototype.dispose.call(this);
	}

});