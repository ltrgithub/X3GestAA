"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var LandingPageBar = require('./master/landingPageBar').LandingPageBar;
var LandingPageList = require('./master/landingPageList').LandingPageList;
var LandingPageChild = require('./landingPageChild').LandingPageChild;

function LandingPageMaster(){
}

exports.LandingPageMaster = helpers.defineClass(LandingPageMaster, DesktopPage, {
    designItem: function(){
    },
    selectLandingPage: function($uuid){
        if (this.rolePages.recordsMap[$uuid]) {
            this.userPages.selector.select(null, false);
            this.rolePages.selector.select(this.userPages.recordsMap[$uuid], true);
        }
        else {
            if (this.userPages.recordsMap[$uuid]) {
                this.rolePages.selector.select(null, false);
                this.userPages.selector.select(this.userPages.recordsMap[$uuid], true);
            }
        }
    },
    selectChildLanding: function(record, selected){
        if (selected) {
            if (this.selectedPageRecord && record.list != this.selectedPageRecord.list) {
                this.selectedPageRecord.list.selector.select(this.selectedPageRecord.dataset.$uuid, false);
            }
            var $uuid = this.selectedPageRecord = record;
            var $vignettes = {};
            if (record.dataset.vignettes) {
                for (var ii = 0, jj = record.dataset.vignettes.length; ii < jj; ii++) {
                    var source = helpers.object.clone(record.dataset.vignettes[ii]);
                    $vignettes[source.bind] = {
                        $type: "application/x-vignette",
                        $title: source.$links.$location.$title,
                        $location: source.$links.$location
                    };
                }
            }
            if (!this.childPageStore[record.$uuid]) {
                this.childPageStore[record.$uuid] = document.site.loadNewPage({
                    $pageCategoryClass: LandingPageChild,
                    layoutSlot: this.childSlot,
                    $category: "dashboard",
                    $urlParts: this.$urlParts,
                    $representation: {
                        $prototype: {
                            $title: record.dataset.title,
                            $properties: $vignettes
                        }
                    }
                });
            }
            else {
                this.childSlot.appendChild(this.childPageStore[record.$uuid].domItem);
            }
            this.childSlot.style.display = "";
        }
        else {
            if (record) {
                if (record == this.selectedPageRecord) {
                    this.selectedPageRecord = null;
                }
                if (this.childPageStore[record.$uuid]) {
                    document.site.removeDomChild(this.childPageStore[record.$uuid].domItem);
                }
            }
            if (this.childSlot) {
                this.childSlot.style.display = "none";
            }
        }
    },
    ensureReorderAndMenusVisibility: function(item, event, useCssForMenus){
        if (useCssForMenus) {
            this.toggleCssOnEnter(item.menusSlot, event);
        }
        else {
            this.showOnEnter(item.menusSlot, event);
        }
        this.showOnEnter(item.reorderPicker, event);
    },
    onBarEvent: function(picker, event){
        if (picker.className.indexOf("s-ldpm-bar") >= 0) {
            this.bar.onClickPicker(picker, event);
        }
        else {
            DesktopPage.prototype.onBarEvent.call(this, picker, event);
        }
    },
    getDataUrl: function(article){
        article = article || this;
        var $parsedUrl = article.parseExpression(article.dataset.$url || article.$prototype.$url);
        return $parsedUrl || this.$prototype.$representationUrl;
    },
    notifyChangeToServer: function(sendBag, articleSender){
        var self = this;
        articleSender = articleSender || this;
        if (!self.disposed && !self.isServerNotifyDisabled) {
            if (self.$prototype.$representationUrl) {
                sendBag.$url = self.getDataUrl(articleSender);
                sendBag.$etag = articleSender.dataset.$etag;
                document.controller.sendRequest(self, {
                    $location: {
                        $url: self.getDataUrl(articleSender)
                    },
                    data: sendBag,
                    method: "PUT",
                    $etag: sendBag.$etag
                }, function(data, response, requestUrl){
                    if (!articleSender.disposed) {
                        articleSender.applyChange(data, response, requestUrl);
                        self.ensurePageVisibility();
                    }
                });
            }
        }
    },
    _ensureMenus: function(){
    
    },
    ensureDefaultArticle: function($article, $prototype){
        return {
            $layout: {
                $items: []
            }
        };
    },
    createField: function($field, $item, boxParent, $class){
        switch ($item.$bind) {
            case "rolePages":
            case "userPages":
                return (this[$item.$bind] = new LandingPageList());
        }
        return null;
    },
    ensureDesignerOpenerVisibility: function(){
        document.site.enablePageDesign(false);
    },
    loadBox: function(initData, $initDiagnoses){
        this.isAutoInsertFieldDisabled = true;
        this.modules = {};
        this.$isEditMode = true;
        this.isLandingPage = true;
        this.$skin = this.$item.$skin || "s-ldpm-page";
        this.$defaultSkinSection = this.$defaultSkinBlock = "s-ldpm-page-h1";
        this._defaultTitle = this.localize.navigPageTitle;
        this.$autoFetch = false;
        var data = {};
        this.childPageStore = {};
        if (initData) {
            var $keys = Object.keys(initData);
            for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
                if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
                    data[$keys[ii]] = initData[$keys[ii]];
                }
            }
        }
        DesktopPage.prototype.loadBox.call(this, data, $initDiagnoses);
        this.childSlot = document.createElement("div");
        this.childSlot.className = "s-ldpm-submodules-slot-admin";
        this.layoutContent.domItem.appendChild(this.childSlot);
        (this.bar = new LandingPageBar()).load(this);
        //select default
        var $selected = this.dataset.$selected;
        if (!$selected) {
            $selected = this.userPages.dataset && this.userPages.dataset.length && this.userPages.dataset[0].$uuid;
            if (!$selected) {
                $selected = this.rolePages.dataset && this.rolePages.dataset.length && this.rolePages.dataset[0].$uuid;
            }
        }
        if ($selected) {
            this.selectLandingPage($selected);
        }
        this.ensurePageVisibility();
    },
    appendHeader: function(){
        this.header = document.createElement("header");
        this.header.className = this.$skin + "-head";
        this.header.style.display = "none";
    },
    onMenuClick: function(menuItem){
        var self = this;
        if (!menuItem.$isAction) {
            switch (menuItem.$item.$bind) {
                case "$create":
                case "$edit":
                    self.openDialog({
                        article: menuItem.articleParent,
                        $url: menuItem.$url,
                        $method: menuItem.$method,
                        onSave: function(menuItem, dialog){
                            dialog.options.article.notifyClientSave(dialog._content.dataset);
                            dialog.close(true);
                            return false;
                        },
                        onValidate: function(page){
                            if (page.validateFields()) {
                                page.clickMenu("$save");
                            }
                            return false;
                        },
                        onClose: function(isCanceled, dispose){
                            return true;
                        }
                    });
                    return false;
            }
        }
        return true;
    },
    
    notifySubModuleDataChange: function(field, value, notifyServerChange){
        var subModule = field.articleParent;
        while (subModule && subModule != this) {
            if (subModule.isSubModuleRecord) {
                var sendBag = this.ensureSendBag(subModule, subModule);
                sendBag.saveDataChange(subModule, field.getArticle(), field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
                if (notifyServerChange !== false) {
                    this.notifyChangeToServer(sendBag, subModule);
                }
                return true;
            }
            subModule = subModule.articleParent;
        }
        return false;
    },
    notifyDataChange: function(field, value, notifyServerChange){
        if (field.isSubModuleList || field.articleParent.isSubModuleRecord) {
            var sendBag = this.ensureSendBag(field.articleParent, field.articleParent);
            sendBag.saveDataChange(field.articleParent, field.getArticle(), field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
            if (notifyServerChange !== false) {
                this.notifyChangeToServer(sendBag, field.articleParent);
            }
        }
        else {
            if (!this.notifySubModuleDataChange(field, value, notifyServerChange)) {
                DesktopPage.prototype.notifyDataChange.call(this, field, value);
            }
        }
    },
    dispose: function(){
        if (this.bar) {
            this.bar.dispose();
        }
        this.childPageStore = this.modules = this.bar = this.rolePages = this.userPages = this.selectedPageRecord = null;
        DesktopPage.prototype.dispose.call(this);
    }
    
});
