"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var LandingPageBar = require('./master/landingPageBar').LandingPageBar;
var LandingPageList = require('./master/landingPageList').LandingPageList;

function LandingPageMaster() {}

exports.LandingPageMaster = helpers.defineClass(LandingPageMaster, DesktopPage, {
	designArticle: function() {},
	selectLandingPage: function($uuid) {
		if (this.rolePages.recordsMap[$uuid]) {
			this.userPages.selector.select(null, false);
			this.rolePages.selector.select(this.userPages.recordsMap[$uuid], true);
		} else {
			if (this.userPages.recordsMap[$uuid]) {
				this.rolePages.selector.select(null, false);
				this.userPages.selector.select(this.userPages.recordsMap[$uuid], true);
			}
		}
	},
	onExecuteMenuResponse: function(menuItem, responseData) {
		if (menuItem.$bind == "$delete") {
			var record = menuItem.articleParent;
			var list = record.list;
			list.removeRecord(record, true, true);
			if (list.records.length == 0) {
				list.emptyBody(true);
			}
			if (!this.selectedPageRecord) {
				this.ensureChildPageSelection();
			}
		}
		DesktopPage.prototype.onExecuteMenuResponse.call(this, menuItem, responseData);
	},
	deleteVignette: function(vignetteField) {
		var self = this;
		document.site.showMessage({
			$title: self.localize.landingVignetteDeleteTitle,
			$message: self.localize.landingVignetteDeleteConfirm.replace("{0}", self.getTitle()),
			$type: "question",
			callback: function(response) {
				if (response && response.$clientId === "yes") {
					var record = vignetteField.page.masterContext.record;
					var sendBag = self.ensureSendBag(record);
					sendBag.vignettes = sendBag.vignettes || [];
					sendBag.vignettes.push({
						$isDeleted: true,
						$uuid: vignetteField.$field.$vignetteId
					});
					self.notifyChangeToServer(sendBag, record);
				}
			}
		});
	},
	addVignette: function(childPage, onSuccess) {
		var self = this;
		var ldpRecord = childPage.masterContext.record;
		var $url = ldpRecord.formatMenuUrl(childPage.getAddVignetteDefinition(), ldpRecord);
		self.openDialog({
			article: self,
			$url: $url,
			$isOkHidden: true,
			onValidate: function(searchPage) {
				if (searchPage.selectedVignettes) {
					var sendBag = self.ensureSendBag(self.selectedPageRecord);
					sendBag.vignettes = sendBag.vignettes || [];
					var $serverIndex = self.selectedPageRecord.dataset.vignettes.length + sendBag.vignettes.length;
					var selectedVignettes = helpers.object.clone(searchPage.selectedVignettes, true);
					for (var ii = 0, jj = selectedVignettes.length; ii < jj; ii++) {
						selectedVignettes[ii].$index = $serverIndex++;
						sendBag.vignettes.push(selectedVignettes[ii]);
					}
					self.notifyChangeToServer(sendBag, self.selectedPageRecord);
				}
			}
		});
	},
	ensureReorderAndMenusVisibility: function(item, event, useCssForMenus) {
		if (useCssForMenus) {
			this.toggleCssOnEnter(item.menusSlot, event);
		} else {
			this.showOnEnter(item.menusSlot, event);
		}
		this.showOnEnter(item.reorderPicker, event);
	},
	onBarEvent: function(picker, event) {
		if (picker.className.indexOf("s-ldpm-bar") >= 0) {
			this.bar.onClickPicker(picker, event);
		} else {
			DesktopPage.prototype.onBarEvent.call(this, picker, event);
		}
	},
	getDataUrl: function(article) {
		article = article || this;
		var $parsedUrl = article.parseExpression(article.dataset.$url || article.$prototype.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	notifyChangeToServer: function(sendBag, articleSender) {
		var self = this;
		articleSender = articleSender || this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.getDataUrl(articleSender);
				sendBag.$etag = articleSender.dataset.$etag;
				document.controller.sendRequest(self, {
					$location: {
						$url: self.getDataUrl(articleSender)
					},
					data: sendBag,
					method: "PUT",
					$etag: sendBag.$etag
				}, function(newData, response, requestUrl) {
					if (!articleSender.disposed) {
						if (articleSender.page != articleSender) {
							articleSender.page.ensureDeltaManager().applyObjectDelta(articleSender.dataset, newData);
						}
						articleSender.applyChange(newData, response, requestUrl);
						self.ensurePageVisibility();
					}
				});
			}
		}
	},
	_ensureMenus: function() {

	},
	ensureDefaultArticle: function($article, $prototype) {
		return {
			$layout: {
				$items: []
			}
		};
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "rolePages":
			case "userPages":
				return (this[$item.$bind] = new LandingPageList());
		}
		return null;
	},
	ensureDesignerOpenerVisibility: function() {
		document.site.enablePageDesign(false);
	},
	loadBox: function(initData, $initDiagnoses) {
		this.isAutoInsertFieldDisabled = true;
		this.$isEditMode = true;
		this.$skin = this.$item.$skin || "s-ldpm-page";
		this.$defaultSkinSection = this.$defaultSkinBlock = "s-ldpm-page-h1";
		this.$autoFetch = false;
		var data = {};
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.loadBox.call(this, data, $initDiagnoses);
		this.childSlot = document.createElement("div");
		this.childSlot.className = "s-ldpm-child-slot";
		this.layoutContent.domItem.appendChild(this.childSlot);
		(this.bar = new LandingPageBar()).load(this);
		this.ensureChildPageSelection();
		this.ensurePageVisibility();
	},
	ensureChildPageSelection: function() {
		var $selected = this.dataset.$selected;
		if (!$selected) {
			$selected = this.userPages.dataset && this.userPages.dataset.length && this.userPages.dataset[0].$uuid;
			if (!$selected) {
				$selected = this.rolePages.dataset && this.rolePages.dataset.length && this.rolePages.dataset[0].$uuid;
			}
		}
		if ($selected) {
			this.selectLandingPage($selected);
		}
	},
	appendHeader: function() {
		this.header = document.createElement("header");
		this.header.className = this.$skin + "-head";
		this.header.style.display = "none";
	},
	onMenuClick: function(menuItem) {
		var self = this;
		if (!menuItem.$isAction) {
			switch (menuItem.$item.$bind) {
				case "delete":
					return false;
				case "$create":
				case "$edit":
					self.openDialog({
						article: menuItem.articleParent,
						$url: menuItem.$url,
						$method: menuItem.$method,
						onSave: function(menuItem, dialog) {
							dialog.options.article.notifyClientSave(dialog._content.dataset);
							dialog.close(true);
							return false;
						},
						onValidate: function(page) {
							if (page.validateFields()) {
								page.clickMenu("$save");
							}
							return false;
						},
						onClose: function(isCanceled, dispose) {
							return true;
						}
					});
					return false;
			}
		}
		return true;
	},
	dispose: function() {
		if (this.bar) {
			this.bar.dispose();
		}
		this.bar = this.rolePages = this.userPages = this.selectedPageRecord = null;
		DesktopPage.prototype.dispose.call(this);
	}

});