"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var BarSplitter = require("syracuse-ui/lib/page/bar/barSplitter").BarSplitter;
var LandingPageBuilder = require('./landingPageBuilder').Builder;
var MultiArrayField = require("syracuse-ui/lib/field/array/multiArrayField").MultiArrayField;
var LandingPageChild = require('syracuse-ui/lib/page/landing/landingPageChild').LandingPageChild;

var _preferences = {
	load: function(record) {
		if (!record.landingPreferences) {
			record.landingPreferences = sessionStorage && sessionStorage.getItem("landingpage_" + record.$uuid);
			record.landingPreferences = (record.landingPreferences && JSON.parse(record.landingPreferences)) || {};
		}
		return record.landingPreferences;
	},
	getVignette: function(record, vignetteId) {
		return record.landingPreferences[vignetteId] || {};
	},
	setVignette: function(record, vignetteId, preferences) {
		record.landingPreferences[vignetteId] = preferences;
		sessionStorage && sessionStorage.setItem("landingpage_" + record.$uuid, JSON.stringify(record.landingPreferences));
	}
};

function LandingPageMaster() {}

exports.LandingPageMaster = helpers.defineClass(LandingPageMaster, DesktopPage, {
	onExecuteMenuResponse: function($bind, record, responseData) {
		if ($bind == "$delete") {
			var list = record.list;
			list.filler.removeRecord(record, true, true);
			if (list.records.length == 0) {
				list.emptyBody(true);
			}!this.selectedPageRecord && this._ensureChildPageSelection();
		}
	},
	getSaveDesignLink: function(record) {
		var stdLayout = record.$prototype.$properties.stdLayout;
		return stdLayout && stdLayout.$item && stdLayout.$item.$links && stdLayout.$item.$links.$save;
	},
	getSelectedChildPage: function() {
		return this.selectedPageRecord && this.selectedPageRecord.childPage;
	},
	saveLandingDesign: function(childPage) {
		var self = this;
		var sendBag = {
			$etag: 1,
			$url: syra_site.urlMaker.formatMenuUrl(childPage.masterRecord, this.getSaveDesignLink(childPage.masterRecord))
		};
		sendBag.content = syra_site.layoutUpdater.cleanBeforeSave(helpers.object.clone(childPage.$item, true));
		delete sendBag.content.$menus;
		delete sendBag.content.$isModel;
		syra_controller.callServer(self, {
			$location: {
				$url: sendBag.$url
			},
			data: sendBag,
			method: "PUT",
			$etag: sendBag.$etag
		}, function(data, response, requestUrl) {
			if (!self.disposed) {
				//debugger;

			}
		});
	},
	deleteOpenedTab: function(childPage) {
		var self = this;
		var box = childPage.layoutContent.getOpenedTab();
		if (box && box.layoutContent) {
			var vignettes = box.layoutContent.getFields();
			syra_diagnose.box.show({
				$title: syra_local.ldpDeleteVignette,
				$message: syra_local.ldpConfirmTabDeleteVignette.replace("{0}", box.getTitle()),
				$type: "question",
				callback: function(response) {
					if (response && response.$clientId === "yes") {
						var uiids = [];
						for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
							uiids.push(vignettes[ii].$field.$vignetteId);
						}
						var fields = box.layoutContent.getFields();
						for (var ii = 0, jj = fields.length; ii < jj; ii++) {
							childPage.removeItem(fields[ii], true, true);
						}
						box.layoutParent.removeItem(box, true);
						self._deleteVignettes(childPage.masterRecord, uiids);
					}
				}
			});
		}
	},


	saveLocation: function(record, vignetteField, menuItem) {
		var preferences = _preferences.getVignette(record, vignetteField.$item.$bind);
		vignetteField.$field.$altLocation = preferences.$location = helpers.object.clone(vignetteField.$field.$location, true);
		preferences.$location.$bind = menuItem.$item.$bind;
		preferences.$location.$title = menuItem.getTitle();
		if (menuItem.$url) {
			preferences.$location.$url = menuItem.$url.replace("{$baseUrl}", "{$selectedEpBaseUrl}");
		}
		preferences.$location.$description = menuItem.$description;
		_preferences.setVignette(record, vignetteField.$item.$bind, preferences);
	},
	loadVignettesInChildPage: function(record, vignettes) {
		var $fields = {};
		var $diagnoses = [];
		if (vignettes) {
			_preferences.load(record);
			for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
				var source = helpers.object.clone(vignettes[ii]);
				if (source.$links && source.$links.$location) {
					var preferences = _preferences.getVignette(record, source.bind);
					var $altLocation = preferences && preferences.$location;
					source.$links.$location.$url = syra_site.expressionMaker.parse(record.page, source.$links.$location.$url);
					if ($altLocation) {
						$altLocation.$url = syra_site.expressionMaker.parse(record.page, $altLocation.$url);
					}
					$fields[source.bind] = {
						$vignetteId: source.$uuid,
						$type: "application/x-vignette",
						$title: source.$links.$location.$title,
						$location: source.$links.$location,
						$altLocation: $altLocation
					};
				} else {
					$diagnoses.push({
						$message: syra_local.ldpVignetteNoLocation.replace("{0}", source.bind),
						$severity: "warning"
					});
				}
			}
		}
		if ($diagnoses.length) {
			syra_diagnose.showDiagnoses({
				$diagnoses: $diagnoses
			}, record.page);
		}
		if (!record.childPage) {
			record.childPage = syra_site.pageLoader.load({
				$pageCategoryClass: LandingPageChild,
				layoutSlot: record.page.childSlot,
				$category: "page",
				openerUrlSegments: record.page.openerUrlSegments,
				$representation: {
					$prototype: {
						masterRecord: record,
						$title: record.dataset.title,
						$properties: $fields
					},
					$article: (record.dataset.stdLayout && record.dataset.stdLayout.content) || null
				}
			});
		} else {
			record.childPage.applyVignettesChange($fields);
		}
		return record.childPage;
	},
	onDeleteVignetteClick: function(vignetteField) {
		var self = this;
		syra_diagnose.box.show({
			$title: syra_local.ldpDeleteVignette,
			$message: syra_local.ldpConfirmDeleteVignette.replace("{0}", vignetteField.getTitle()),
			$type: "question",
			callback: function(response) {
				if (response && response.$clientId === "yes") {
					self._deleteVignettes(vignetteField.page.masterRecord, [vignetteField.$field.$vignetteId]);
				}
			}
		});
	},
	addVignette: function(childPage) {
		var self = this;
		var $url = syra_site.urlMaker.formatMenuUrl(childPage.masterRecord, childPage.getAddVignetteDefinition(), childPage.masterRecord);
		syra_site.dialogManager.openPage(self, {
			article: self,
			$url: $url,
			$isOkHidden: true,
			onValidate: function(searchPage) {
				var sels = searchPage.selectedVignettes;
				if (sels) {
					var sendBag = self.ensureSendBag(self.selectedPageRecord);
					sendBag.vignettes = sendBag.vignettes || [];
					var $serverIndex = self.selectedPageRecord.dataset.vignettes.length + sendBag.vignettes.length;
					for (var ii = 0, jj = sels.length; ii < jj; ii++) {
						var sel = sels[ii];
						sendBag.vignettes.push({
							$uuid: helpers.uuid.generate(),
							$index: $serverIndex++,
							vignette: {
								$uuid: sel.vignette.$key || sel.vignette.$uuid,
								title: sel.vignette.title
							},
							endpoint: {
								$uuid: sel.endpoint.$uuid
							}
						});
					}
					self.notifyChangeToServer(sendBag, self.selectedPageRecord, true);
				}
			}
		});
	},
	_deleteVignettes: function(record, $uuids) {
		if ($uuids && $uuids.length) {
			var sendBag = this.ensureSendBag(record);
			sendBag.vignettes = sendBag.vignettes || [];
			for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
				sendBag.vignettes.push({
					$isDeleted: true,
					$uuid: $uuids[ii]
				});
			}
			for (var ii = 0, jj = record.dataset.vignettes.length; ii < jj; ii++) {
				if ($uuids.indexOf(record.dataset.vignettes[ii].$uuid) >= 0) {
					record.dataset.vignettes.splice(ii, 1);
					ii--;
					jj--;
				}
			}
			this.loadVignettesInChildPage(record, record.dataset.vignettes);
			this.notifyChangeToServer(sendBag, record, true);
		} else {
			record.childPage.designer.endArticleUpdate();
		}
	},
	getDataUrl: function(article) {
		article = article || this;
		var $parsedUrl = syra_site.expressionMaker.parse(article, article.dataset.$url || article.$prototype.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	notifyChangeToServer: function(sendBag, articleSender, onUpdateContent) {
		var self = this;
		articleSender = articleSender || this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.getDataUrl(articleSender);
				sendBag.$etag = articleSender.dataset.$etag;
				syra_site.uiLocker.lock();
				syra_controller.callServer(self, {
					$location: {
						$url: self.getDataUrl(articleSender)
					},
					data: sendBag,
					method: "PUT",
					$etag: sendBag.$etag
				}, function(newData, response, requestUrl) {
					if (!articleSender.disposed) {
						if (articleSender.page != articleSender) {
							syra_site.deltaManager.applyObjectDelta(articleSender.page, articleSender.dataset, newData);
						}
						articleSender.applyChange(newData, response, requestUrl);
						syra_site.ensureArticleVisibility(self);
						if (onUpdateContent) {
							articleSender.childPage.designer.endArticleUpdate();
						} else {
							syra_site.ensureArticleVisibility(articleSender.childPage);
						}
					}
					syra_site.uiLocker.unlock();
				}, function() {
					syra_site.uiLocker.unlock();
				});
			}
		}
	},
	ensureDefaultArticle: function($article, $prototype) {
		return {
			$layout: {
				$items: []
			}
		};
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "rolePages":
			case "userPages":
				var list = this[$item.$bind] = new MultiArrayField();
				$field.$builderClass = LandingPageBuilder;
				list.$confirmDelete = syra_local.ldpConfirmDelete;
				list.$isEditMode = false;
				list.$isQuickDesignerDisabled = true;
				list.$itemRecordMenuSkin = "s-mn-ldp-record-link";
				list.$itemMenuSkin = "s-mn-ldp-link";
				list.$iconPath = "page/s-ldp-";
				list.$addMaximize = list.$addRefresh = false;
				$item.$isPagerHidden = true;
				$item.$selectMode = "row";
				return list;
		}
		return null;
	},
	savePreferences: function() {
		syra_site.setPreferences("landingpage", this.preferences);
	},
	loadBox: function(initData) {
		syra_site.landingPageMaster = this;
		this.preferences = syra_site.getPreferences("landingpage", {});
		this.mainPageDesignerAccess = "disabled";
		this.isAutoInsertFieldDisabled = true;
		this.isMenuBarDisabled = true;
		this.$isEditMode = true;
		this.$skin = this.$item.$skin || "s-ldpm-page";
		this.$defaultSkinSection = this.$defaultSkinBlock = "s-ldpm-page-h1";
		var data = {};
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.loadBox.call(this, data);
		this.childSlot = document.createElement("div");
		this.childSlot.className = "s-ldpm-child-slot";
		this.layoutContent.domItem.appendChild(this.childSlot);

		this.bar = new BarSplitter();
		this.bar.preferenceKey = "ldpbar";
		this.bar.options = {
			resizeDirection: "left",
			$viewMode: "dock",
			$skin: "s-ldpm-bar"
		};
		this.bar.barSlot = document.createElement("div");
		this.bar.barSlot.className = "s-ldpm-bar-slot";
		this.bar.barBody = document.createElement("div");
		this.bar.barBody.className = "s-ldpm-bar-body";
		if (this.$facet != "$landing_edit") {
			this.domItem.insertBefore(this.bar.barSlot, this.domItem.firstChild);
		}
		this.bar.load(this);

		this.loadNewItem(this.bar.barBody, {
			$isTitleHidden: true,
			$bind: "rolePages"
		});

		if (syra_site.userProfile.hasDesignRight()) {
			var field = this.loadNewItem(this.bar.barBody, {
				$title: syra_local.ldpUserPages,
				$bind: "userPages"
			});
			field.domItem.className += " s-ldpm-user-pages";
			field.domTitle.className += " s-ldpm-user-pages";
		}

		this._ensureChildPageSelection();
	},

	appendHeader: function() {
		this.header = document.createElement("header");
		this.header.className = this.$skin + "-head";
		this.header.style.display = "none";
	},
	onMenuClick: function(menuItem) {
		var self = this;
		if (!menuItem.$isAction) {
			switch (menuItem.$sourceBind) {
				case "delete":
					return false;
				case "$create":
				case "$edit":
					syra_site.dialogManager.openPage(self, {
						article: menuItem.articleParent,
						$url: menuItem.$url,
						$method: menuItem.$method,
						onServerSaved: function(saveItem, dialog) {
							dialog.options.article.notifyClientSave(dialog._content.dataset);
							var $uuid = dialog._content.dataset.$uuid;
							dialog.close(true);
							var record = self.userPages.recordsMap[$uuid];
							self.userPages.selector.selectRecord(record, true);
							if (menuItem.$sourceBind == "$create") {
								var childPage = record.childPage;
								self.addVignette(childPage);
								self.userPages.builder.saveReorder();
								syra_site.ensureArticleVisibility(childPage);
							}
							return false;
						},
						onClose: function(isCanceled, dispose) {
							return true;
						}
					});
					return false;
			}
		}
		return true;
	},
	_ensureChildPageSelection: function(ignoreLastSelected) {
		var $uuid = (!ignoreLastSelected) ? (this.preferences.$selected || this.dataset.$selected) : undefined;
		if (!$uuid) {
			$uuid = this.userPages && this.userPages.dataset && this.userPages.dataset.length && this.userPages.dataset[0].$uuid;
			if (!$uuid) {
				$uuid = this.rolePages.dataset && this.rolePages.dataset.length && this.rolePages.dataset[0].$uuid;
			}
		}
		if ($uuid) {
			var record = this.rolePages.recordsMap[$uuid];
			if (record) {
				this.userPages && this.userPages.selector.unSelectAll();
				this.rolePages.selector.selectRecord(record, true);
			} else {
				record = this.userPages && this.userPages.recordsMap[$uuid];
				if (record) {
					this.rolePages.selector.unSelectAll();
					this.userPages.selector.selectRecord(record, true);
				}
			}
		}
		if (!this.selectedPageRecord && !ignoreLastSelected) {
			this._ensureChildPageSelection(true);
		}
	},
	dispose: function() {
		if (syra_site.landingPageMaster == this) {
			delete syra_site.landingPageMaster;
		}
		this.bar && this.bar.dispose();
		DesktopPage.prototype.dispose.call(this);
	}

});