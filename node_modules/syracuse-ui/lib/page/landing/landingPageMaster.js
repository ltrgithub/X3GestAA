"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var BarSplitter = require("syracuse-ui/lib/page/bar/barSplitter").BarSplitter;
var MultiArrayField = require("syracuse-ui/lib/field/array/multiArrayField").MultiArrayField;

var _mastePage;

function Builder() {}

exports.Builder = helpers.defineClass(Builder, null, {
	initialize: function(list) {
		this.list = list;
		this.emptyMessage = syra_local.ldpNoPage;
		list.$item.$isTopLabelAlignment = true;
		if (!list.$item.$layout || !list.$item.$layout.$items) {
			list.$item.$layout = list.defineDefaultCard().$layout;
		}
		list.$item.$alternateStyle = false;
	},
	endInitiallize: function() {
		this.list.$item.$isTopLabelAlignment = true;
		if (!this.list.$item.$layout || !this.list.$item.$layout.$items) {
			this.list.$item.$layout = this.list.defineDefaultCard().$layout;
		}
	},
	saveReorder: function(reorderRecord, targetRecord, isAfter) {
		if (this.list.ldp_isUserList) {
			var page = this.list.page;
			page.preferences.pages = [];
			var children = this.list.body.children;
			for (var ii = 0, jj = children.length; ii < jj; ii++) {
				page.preferences.pages.push(children[ii].syraRecord);
			}
			if (reorderRecord) {
				var reorderIndex = page.preferences.pages.indexOf(reorderRecord.$uuid);
				var targetIndex = page.preferences.pages.indexOf(targetRecord.$uuid);
				page.preferences.pages.splice(reorderIndex, 1);
				if (targetIndex > reorderIndex) {
					reorderIndex = isAfter ? targetIndex : (targetIndex - 2);
				} else {
					reorderIndex = isAfter ? targetIndex + 1 : (targetIndex);
				}
				reorderIndex = Math.max(reorderIndex, 0);
				page.preferences.pages.splice(reorderIndex, 0, reorderRecord.$uuid);
			}
			page.savePreferences();
			this.list_onAfterFill();
		}
		return false;
	},
	isDraggable: function(target, event) {
		return this.list.isReorderRecordDraggable(target, event);
	},
	list_scrollToRecord: function(record) {
		record.page.scrollToItem(record.domItem, record.page.menuBar.body, true);
	},
	list_onAfterFill: function() {
		if (this.list.ldp_isUserList && this.list.page.preferences.pages) {
			if (this.list.records && this.list.records.length) {
				var orders = [];
				for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
					orders.push(this.list.records[ii].$uuid);
				}
				for (var ii = 0, jj = this.list.page.preferences.pages.length; ii < jj; ii++) {
					var $uuid = this.list.page.preferences.pages[ii];
					var record = this.list.recordsMap[$uuid];
					if (record) {
						record.domItem.parentNode.appendChild(record.domItem);
						orders.splice(orders.indexOf($uuid), 1);
					}
				}
				for (var ii = 0, jj = orders.length; ii < jj; ii++) {
					var record = this.list.recordsMap[orders[ii]];
					record.domItem.parentNode.appendChild(record.domItem);
				}
			}
		}
	},
	list_onAfterDraw: function() {
		this.list.body = this.list._core;
		this.list._dataValue.style.overflow = "auto";
		this.list.$skin = this.list.$item.$skin || "s-cards";
		this.list.applyDesignMetaData(this.list.$item, false);
		this.list.loadSelector();
		this.list.applyCapabilities();
		this.list.ensureLayoutMode();
		this.list.layoutSlot.appendChild(this.list.domItem);
		syra_dd.addToColResizers(this.list, true);
	},
	record_reorder: function(record, target, isAfter) {
		if (target) {
			target.domItem.parentNode.insertBefore(this.domItem, isAfter ? target.domItem.nextSibling : target.domItem);
		} else {
			if (isAfter) {
				this.list.body.appendChild(record.domItem);
			} else {
				this.list.body.insertBefore(record.domItem, this.list.body.firstChild);
			}
		}
	},
	record_onItemInOut: function(record, onEnter, event) {
		this.list.selector && record.highlightOnEnter(onEnter, event);
	},
	record_draw: function(record) {
		record.ldp_getSaveLink = function() {
			var stdLayout = this.$prototype.$properties.stdLayout;
			return stdLayout && stdLayout.$item && stdLayout.$item.$links && stdLayout.$item.$links.$save;
		};
		record.ldp_getAddLink = function() {
			var vignettes = this.$prototype.$properties.vignettes;
			return vignettes && vignettes.$links && vignettes.$links.$select;
		};
		record.ldp_getVignette = function(vignetteId) {
			return this.ldpPreferences[vignetteId] || {};
		};
		record.ldp_removeVignette = function($bind) {
			this.page.removeItem(this.vignettes[$bind], false, true);
			delete this.vignettes[$bind];
			delete this.$vignettes[$bind];
		};
		record.ldp_deleteVignettes = function($uuids) {
			if ($uuids && $uuids.length) {
				var sendBag = syra_workingCopy.getSendBag(this);
				sendBag.vignettes = sendBag.vignettes || [];
				for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
					sendBag.vignettes.push({
						$isDeleted: true,
						$uuid: $uuids[ii]
					});
				}
				for (var ii = 0, jj = this.dataset.vignettes.length; ii < jj; ii++) {
					if ($uuids.indexOf(this.dataset.vignettes[ii].$uuid) >= 0) {
						this.dataset.vignettes.splice(ii, 1);
						ii--;
						jj--;
					}
				}
				this.ldp_applyChange();
				this.page.notifyChangeToServer(sendBag, this, true);
			} else {
				this.page.designer.endArticleUpdate();
			}
		};
		record.ldp_saveLocation = function(vignetteField, menuItem) {
			var preferences = this.ldp_getVignette(vignetteField.$item.$bind);
			vignetteField.$field.$altLocation = preferences.$location = helpers.object.clone(vignetteField.$field.$location, true);
			preferences.$location.$bind = menuItem.$item.$bind;
			preferences.$location.$title = menuItem.getTitle();
			if (menuItem.$url) {
				preferences.$location.$url = menuItem.$url.replace("{$baseUrl}", "{$selectedEpBaseUrl}");
			}
			preferences.$location.$description = menuItem.$description;
			this.ldpPreferences[vignetteField.$item.$bind] = preferences;
			sessionStorage && sessionStorage.setItem("landingpage_" + this.$uuid, JSON.stringify(this.ldpPreferences));
		};
		record.ldp_applyChange = function(delta) {
			delta = delta || this.dataset.vignettes;
			var $vignettes = {};
			if (delta) {
				var $diagnoses = [];
				for (var ii = 0, jj = delta.length; ii < jj; ii++) {
					var source = helpers.object.clone(delta[ii]);
					if (source.$links && source.$links.$location) {
						var preferences = record.ldp_getVignette(source.bind);
						var $altLocation = preferences && preferences.$location;
						source.$links.$location.$url = syra_site.expressionMaker.parse(record.page, source.$links.$location.$url);
						if ($altLocation) {
							$altLocation.$url = syra_site.expressionMaker.parse(record.page, $altLocation.$url);
						}
						$vignettes[source.bind] = {
							$vignetteEndpoint: source.endpoint,
							$vignetteId: source.$uuid,
							$type: "application/x-vignette",
							$title: source.$links.$location.$title,
							$location: source.$links.$location,
							$altLocation: $altLocation
						};
					} else {
						$diagnoses.push({
							$message: syra_local.ldpVignetteNoLocation.replace("{0}", source.bind),
							$severity: "warning"
						});
					}
				}
				if ($diagnoses.length) {
					syra_diagnose.showDiagnoses({
						$diagnoses: $diagnoses
					}, record.page);
				}
			}
			if (!this.vignettes) {
				this.$vignettes = $vignettes;
				this.vignettes = {};
			} else {
				var $binds = Object.keys(this.vignettes);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					if (!$vignettes[$bind]) {
						var vignette = this.vignettes[$bind];
						if (vignette) {
							vignette.layoutParent.removeItem(vignette, true);
							this.ldp_removeVignette($bind);
						}

					}
				}
				var $binds = Object.keys($vignettes);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var $vignette = this.$vignettes[$bind] = $vignettes[$bind];
					var $field = this.page.$prototype.$properties[$bind];
					if (!$field) {
						var tab = this.page.layoutContent.getOpenedTab() || this.page._createNewTab();
						this.page.$prototype.$properties[$bind] = $vignette;
						this.vignettes[$bind] = tab.layoutContent.createChildItem({
							$bind: $bind
						});
					}
				}
				//this.page.designer && this.page.designer.endArticleUpdate(null, null, false);
			}
		};

		record.$useDeletePicker = true;
		record.$item.$isPickerMenuHidden = true;
		record.$mnPickersCss = "s-inplace-picker";
		record.$isVerticalDirection = true;
		record.domItem = document.createElement("div");
		record.$skin = "s-ldpm-record";
		record.domItem.className = record.$skin;
		record.domItem.syraRecord = record.$uuid;
		record.domItem.syrainout = record.domItem.syraItem = record.id;
		record.dataSlot = record.body = document.createElement("div");
		record.body.className = record.$skin + "-title";
		record.domItem.appendChild(record.body);

		if (!record.ldpPreferences) {
			record.ldpPreferences = sessionStorage && sessionStorage.getItem("landingpage_" + record.$uuid);
			record.ldpPreferences = (record.ldpPreferences && JSON.parse(record.ldpPreferences)) || {};
		}

		if (this.list.ldp_isUserList) {
			record.menusSlot = document.createElement("div");
			record.menusSlot.className = "s-ldpm-record-btns";
			record.domItem.appendChild(record.menusSlot);
			this.list.addReorder(record);
		}
		if (this.list.selector.isRowMode) {
			record.body.syraOnClick = "onSelectorClick";
			record.body.className += " s-list-selector-row";
		}
		record.cardItem = record.page.loadNewItem(record.body, {
			$bind: "title",
			$isMenusHidden: true,
			$isDetailLinkDisabled: true,
			$category: "field",
			$isEditMode: record.$isEditMode,
			$inplace: true,
			$css: "s-ldpm-title-field"
		}, record);
		this.list._core.appendChild(record.domItem);
		this.list.applyCapabilitiesToRecord(record);
	},
	record_onSelect: function(record, selected) {
		var page = record.page;
		if (selected) {
			var ldpRecord = page.ldpRecord;
			if (ldpRecord) {
				if (ldpRecord == record) {
					return;
				}
				if (ldpRecord && ldpRecord.list != record.list) {
					ldpRecord.list.selector.selectRecord(ldpRecord, false);
				}
			}
			page.ldpRecord = record;
			record.ldp_applyChange();
		} else {
			if (page.ldpRecord == record) {
				delete page.ldpRecord;
			}
		}
		syra_site.dom.toggleClass(record.domItem, "s-list-record-selected", selected);

		if (record.vignettes) {
			if (selected) {
				var $article = (record.dataset.stdLayout && record.dataset.stdLayout.content) || {};
				$article.$layout = $article.$layout || {};
				$article.$layout.$layoutType = "tabs";
				$article.$layout.$items = $article.$layout.$items || [];

				page.$item = helpers.object.clone($article, true);
				page.preferences.tabs = page.preferences.tabs || {};
				page.$item.$layout.$tabIndex = page.preferences.tabs[record.$uuid] || 0;

				var $binds = Object.keys(record.$vignettes);
				page.reloadingFields = {};
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var vignette = record.vignettes[$bind];
					if (vignette) {
						page.reloadingFields[$bind] = vignette;
						vignette.displayed = true;
						//important to avoid applyDesignMetaData on reloading
						vignette.onReloading = function($item) {
							$item.$title = this.$field.$title;
							return this;
						};
						page.addResizable(vignette);
					}
					page.$prototype.$properties[$bind] = record.$vignettes[$bind];
				}
				syra_site.localizer.applyPageLocalization(page);
				record.ldp_displayed = true;
				page.renderLayoutContent();
				delete page.reloadingFields;

				record.isDesignModeEnabled = record.ldp_getSaveLink() != null;
				if (record.isDesignModeEnabled) {
					syra_site.switchItemDesigner(page, true);
				}

				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var vignette = page.boundFields[$bind] && page.boundFields[$bind][0];
					if (vignette) {
						delete vignette.onReloading;
						record.vignettes[$bind] = vignette;
						if (record.isDesignModeEnabled) {
							if (vignette.isDesignModeEnabled !== false) {
								if (!vignette.designBtn) {
									vignette.designBtn = syra_menus.button.add({
										parent: vignette,
										slot: vignette.buttonsSlot,
										text: syra_local.box_design,
										css: vignette.$skin + "-btn",
										iconOnly: true,
										fontIcon: "design",
										btnclick: function() {
											syra_site.switchItemDesigner(this.parent, !this.parent.designer);
										}
									});
								}
							}
							if (!vignette.deleteBtn) {
								vignette.deleteBtn = syra_menus.button.add({
									parent: vignette,
									slot: vignette.buttonsSlot,
									text: syra_local.box_delete,
									css: vignette.$skin + "-btn",
									iconOnly: true,
									fontIcon: "delete",
									btnclick: function() {
										var field = this.parent;
										syra_diagnose.box.show({
											$title: syra_local.ldpDeleteVignette,
											$message: syra_local.ldpConfirmDeleteVignette.replace("{0}", field.getTitle()),
											$type: "question",
											callback: function(response) {
												if (response && response.$clientId === "yes") {
													field.page.ldpRecord.ldp_deleteVignettes([field.$field.$vignetteId]);
												}
											}
										});
									}
								});
							}
						}
					}
				}

				page.layoutContent.ensureTabsSlot().appendChild(page.addTabBtn.link);
				syra_menus.button.hide(page.addVignetteBtn, !record.ldp_getAddLink());
				syra_menus.button.hide(page.addTabBtn, !record.isDesignModeEnabled);
				syra_menus.button.hide(page.designBtn, !record.isDesignModeEnabled);
				syra_menus.button.hide(page.addVignetteBtn, !(record.isDesignModeEnabled && record.ldp_getAddLink()));

				page.preferences.$selected = record.dataset.$uuid;
				page.isPageLoaded && page.savePreferences();
				page.setTitle(record.dataset.title);
				if (page.isPageLoaded) {
					syra_site.ensureArticleVisibility(page);
					record.scrollToRecord();
				}
				page.designer && page.designer.endArticleUpdate(null, null, false);
			} else {
				if (record.ldp_displayed) {
					var $binds = Object.keys(record.vignettes);
					var fields = [];
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						var vignette = record.vignettes[$binds[ii]];
						if (vignette) {
							vignette.displayed = false;
							page.removeResizable(vignette);
							fields.push(vignette);
						}
					}
					delete page.$prototype.$localization;
					delete page.$prototype.$allLocalization;
					syra_site.layoutUpdater.extractItems(page.layoutContent, fields);
					syra_site.layoutUpdater.clearContent(page.layoutContent);
					record.ldp_displayed = false;
				}
			}
		}
	},
	record_onBeforeLoad: function(record) {
		record.$defaultSkinSection = record.$defaultSkinBlock = this.list.$item.$skinCard || "s-h3";
	},
	record_onAfterApplyChange: function(record, metaData) {
		if (record.dataset.description && record.dataset.description != record.dataset.title) {
			record.domItem.title = record.dataset.description;
		}
		if (record.vignettes && metaData && metaData.vignettes) {
			record.ldp_applyChange(metaData.vignettes);
		}
	},
	record_dispose: function(record) {
		if (record.vignettes) {
			this.record_onSelect(record, false);
			var $binds = Object.keys(record.vignettes);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				record.ldp_removeVignette($binds[ii]);
			}
		}
	},
	dispose: function() {
		if (this.list) {
			syra_dd.addToColResizers(this.list, false);
			syra_site.dom.empty(this.list._core);
		}
	}
});


function _addVignette() {
	var page = this.parent;
	var $url = syra_url.formatMenuUrl(_mastePage.ldpRecord, _mastePage.ldpRecord.ldp_getAddLink(), _mastePage.ldpRecord);
	syra_site.dialogManager.openPage(page, {
		article: page,
		$url: $url,
		$isOkHidden: true,
		onValidate: function(searchPage) {
			var sels = searchPage.selectedVignettes;
			if (sels) {
				var sendBag = syra_workingCopy.getSendBag(_mastePage.ldpRecord);
				sendBag.vignettes = sendBag.vignettes || [];
				var $serverIndex = _mastePage.ldpRecord.dataset.vignettes.length + sendBag.vignettes.length;
				for (var ii = 0, jj = sels.length; ii < jj; ii++) {
					var sel = sels[ii];
					sendBag.vignettes.push({
						$uuid: helpers.uuid.generate(),
						$index: $serverIndex++,
						vignette: {
							$uuid: sel.vignette.$key || sel.vignette.$uuid,
							title: sel.vignette.title
						},
						endpoint: {
							$uuid: sel.endpoint.$uuid
						}
					});
				}
				page.notifyChangeToServer(sendBag, _mastePage.ldpRecord, true);
			}
		}
	});
}


function LandingPageMaster() {}

exports.LandingPageMaster = helpers.defineClass(LandingPageMaster, DesktopPage, {
	onExecuteMenuResponse: function($bind, record, responseData) {
		if ($bind == "$delete") {
			var list = record.list;
			list.filler.removeRecord(record, true, true);
			if (list.records.length == 0) {
				list.emptyBody(true);
			}!this.ldpRecord && this._ensureRecordSelection();
		}
	},

	saveLandingDesign: function() {
		var self = this;
		var sendBag = {
			$etag: 1,
			$url: syra_url.formatMenuUrl(self.ldpRecord, self.ldpRecord.ldp_getSaveLink())
		};
		sendBag.content = syra_site.layoutUpdater.cleanBeforeSave(helpers.object.clone(self.$item, true));
		delete sendBag.content.$menus;
		delete sendBag.content.$isModel;
		syra_controller.callServer(self, {
			$location: {
				$url: sendBag.$url
			},
			data: sendBag,
			method: "PUT",
			$etag: sendBag.$etag
		}, function(data, response, requestUrl) {
			if (!self.disposed) {
				//debugger;

			}
		});
	},
	deleteOpenedTab: function() {
		var self = this;
		var box = self.layoutContent.getOpenedTab();
		if (box && box.layoutContent) {
			var vignettes = box.layoutContent.getFields();
			syra_diagnose.box.show({
				$title: syra_local.ldpDeleteVignette,
				$message: syra_local.ldpConfirmTabDeleteVignette.replace("{0}", box.getTitle()),
				$type: "question",
				callback: function(response) {
					if (response && response.$clientId === "yes") {
						var uiids = [];
						for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
							uiids.push(vignettes[ii].$field.$vignetteId);
						}
						var fields = box.layoutContent.getFields();
						for (var ii = 0, jj = fields.length; ii < jj; ii++) {
							self.removeItem(fields[ii], true, true);
						}
						box.layoutParent.removeItem(box, true);
						self.ldpRecord.ldp_deleteVignettes(uiids);
					}
				}
			});
		}
	},

	getDataUrl: function(article) {
		article = article || this;
		var $parsedUrl = syra_site.expressionMaker.parse(article, article.dataset.$url || article.$prototype.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	notifyChangeToServer: function(sendBag, articleSender, onUpdateContent) {
		var self = this;
		articleSender = articleSender || this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.getDataUrl(articleSender);
				sendBag.$etag = articleSender.dataset.$etag;
				syra_site.uiLocker.lock();
				syra_controller.callServer(self, {
					$location: {
						$url: self.getDataUrl(articleSender)
					},
					data: sendBag,
					method: "PUT",
					$etag: sendBag.$etag
				}, function(newData, response, requestUrl) {
					try {
						if (!articleSender.disposed) {
							if (articleSender.page != articleSender) {
								syra_site.deltaManager.applyObjectDelta(articleSender.page, articleSender.dataset, newData);
							}
							articleSender.applyChange(newData, response, requestUrl);
							syra_site.ensureArticleVisibility(self);
							if (onUpdateContent) {
								self.designer.endArticleUpdate();
							} else {
								syra_site.ensureArticleVisibility(self);
							}
						}
					} finally {
						syra_site.uiLocker.unlock();
					}
				}, function() {
					syra_site.uiLocker.unlock();
				});
			}
		}
	},
	initializePage: function($itemPage) {
		return {
			$layout: {
				$items: []
			}
		};
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "rolePages":
			case "userPages":
				var list = this[$item.$bind] = new MultiArrayField();
				$field.$builderClass = Builder;
				list.ldp_isUserList = $item.$bind == "userPages";
				list.$confirmDelete = syra_local.ldpConfirmDelete;
				list.$isEditMode = false;
				list.$isQuickDesignerDisabled = true;
				list.createMenuItem = function($bind, $menu) {
					return this.page.loadNewItem(null, {
						$category: "link",
						$menu: $menu,
						$bind: $bind,
						$skin: "s-mn-list-btn s-mn-link",
						$icon: {
							$mode: "iconText"
						}
					}, this);
				};
				list.$addMaximize = list.$addRefresh = false;
				$item.$isPagerHidden = true;
				$item.$selectMode = "row";
				return list;
		}
		return null;
	},
	savePreferences: function() {
		syra_site.setPreferences("landingpage", this.preferences);
	},
	loadBox: function(initData) {
		this.isMenuBarDisabled = true;
		this.isAutoInsertFieldDisabled = true;
		this.isBackButtonDisabled = true;
		this.mainPageDesignerAccess = "unknow";

		this.preferences = syra_site.getPreferences("landingpage", {});

		this.$defaultSkinBlock = "s-ldp-h2";
		this.$defaultSkinSection = "s-ldp-h1";

		this.isLandingPage = true;
		_mastePage = this;
		syra_site.landingPageMaster = this;

		this.$isEditMode = true;

		this.$skin = this.$item.$skin || "s-ldp";

		var data = {};
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.loadBox.call(this, data);

		this.menuBar = new BarSplitter();
		this.menuBar.preferenceKey = "ldpbar";
		this.menuBar.options = {
			resizeDirection: "left",
			$viewMode: "dock",
			$skin: "s-ldpm-bar"
		};
		this.menuBar.slot = document.createElement("div");
		this.menuBar.slot.className = "s-ldpm-bar-slot";
		this.menuBar.body = document.createElement("div");
		this.menuBar.body.className = "s-ldpm-bar-body";
		if (this.$facet != "$landing_edit") {
			this.domItem.insertBefore(this.menuBar.slot, this.domItem.firstChild);
		}
		this.menuBar.load(this);

		this.loadNewItem(this.menuBar.body, {
			$isTitleHidden: true,
			$bind: "rolePages"
		});

		if (syra_site.userProfile.hasDesignRight()) {
			var field = this.loadNewItem(this.menuBar.body, {
				$title: syra_local.ldpUserPages,
				$bind: "userPages"
			});
			field.domItem.className += " s-ldpm-user-pages";
			field.domTitle.className += " s-ldpm-user-pages";
		}

		var slot = document.createElement("div");
		slot.className = "s-ldp-head-btns";
		this.addVignetteBtn = syra_menus.button.add({
			parent: this,
			slot: slot,
			isHidden: true,
			text: syra_local.ldpAddVignette,
			css: "s-ldp-btn",
			iconOnly: true,
			fontIcon: "create",
			isHidden: true,
			shortCutTip: syra_shortCuts.tip.create,
			btnclick: _addVignette
		});

		this.refreshBtn = syra_menus.button.add({
			parent: this,
			slot: slot,
			text: syra_local.ldpRefresh,
			css: "s-ldp-btn",
			iconOnly: true,
			fontIcon: "refresh",
			shortCutTip: syra_shortCuts.tip.refresh,
			btnclick: function() {
				var items = this.parent.layoutContent.getFields();
				for (var ii = 0, jj = items.length; ii < jj; ii++) {
					items[ii].refresh(true);
				}
			}
		});

		this.designBtn = syra_menus.button.add({
			parent: this,
			slot: slot,
			isHidden: true,
			text: syra_local.ldpOpenDesigner,
			css: "s-ldp-btn",
			iconOnly: true,
			fontIcon: "design",
			isHidden: true,
			btnclick: function() {
				this.parent.designer.toggleDesigner();
			}
		});
		this.addTabBtn = syra_menus.button.add({
			parent: this,
			isHidden: true,
			text: "+",
			title: syra_local.ldpAddTab,
			css: "s-ldp-add-tab",
			shortCutTip: syra_shortCuts.tip.newTab,
			btnclick: function() {
				this.parent._createNewTab();
				this.parent.designer.endArticleUpdate();
			}
		});
		this.layoutContent.tabStop = this.addTabBtn.link;
		this.header.appendChild(slot);

		this._ensureRecordSelection();
	},
	onAfterLoad: function() {
		this.ldpRecord && this.ldpRecord.scrollToRecord();
		DesktopPage.prototype.onAfterLoad.call(this);
	},
	onMenuClick: function(menuItem) {
		var self = this;
		if (!menuItem.$isAction) {
			switch (menuItem.$sourceBind) {
				case "delete":
					return false;
				case "$create":
				case "$edit":
					syra_site.dialogManager.openPage(self, {
						article: menuItem.articleParent,
						$url: menuItem.$url,
						$method: menuItem.$method,
						onServerSaved: function(saveItem, dialog) {
							dialog.options.article.notifyClientSave(dialog._content.dataset);
							var $uuid = dialog._content.dataset.$uuid;
							dialog.close(true);
							var record = self.userPages.recordsMap[$uuid];
							self.userPages.selector.selectRecord(record, true);
							if (menuItem.$sourceBind == "$create") {
								_addVignette();
								self.userPages.builder.saveReorder();
								syra_site.ensureArticleVisibility(self);
							}
							return false;
						},
						onClose: function(isCanceled, dispose) {
							return true;
						}
					});
					return false;
			}
		}
		return true;
	},
	_ensureRecordSelection: function(ignoreLastSelected) {
		var $uuid = (!ignoreLastSelected) ? (this.preferences.$selected || this.dataset.$selected) : undefined;
		if (!$uuid) {
			$uuid = this.userPages && this.userPages.dataset && this.userPages.dataset.length && this.userPages.dataset[0].$uuid;
			if (!$uuid) {
				$uuid = this.rolePages.dataset && this.rolePages.dataset.length && this.rolePages.dataset[0].$uuid;
			}
		}
		if ($uuid) {
			var record = this.rolePages.recordsMap[$uuid];
			if (record) {
				this.userPages && this.userPages.selector.unSelectAll();
				this.rolePages.selector.selectRecord(record, true);
			} else {
				record = this.userPages && this.userPages.recordsMap[$uuid];
				if (record) {
					this.rolePages.selector.unSelectAll();
					this.userPages.selector.selectRecord(record, true);
				}
			}
		}
		if (!_mastePage.ldpRecord && !ignoreLastSelected) {
			this._ensureRecordSelection(true);
		}
	},
	onSectionOpenerClick: function(box) {
		if (box && box.isTabLayout) {
			this.designer && this.designer.onTabClik(box);
			this.preferences.tabs = this.preferences.tabs || {};
			this.preferences.tabs[this.ldpRecord.$uuid] = box.layoutParent.items.indexOf(box);
			this.savePreferences();
		}
		return true;
	},
	_createNewTab: function() {
		var tab = this.layoutContent.loadChildItem(null, {
			$category: "section",
			$isEmptyVisible: true,
			$title: syra_site.localizer.getDefaultTabTitle(this),
		});
		tab.openBox(true);
		return tab;
	},
	dispose: function() {
		delete syra_site.landingPageMaster;
		DesktopPage.prototype.dispose.call(this);
	}
});