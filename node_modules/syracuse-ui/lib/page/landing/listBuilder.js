"use strict";
var helpers = require("syracuse-core/lib/helpers");

function _add_ldpFunctions(record) {
	record.vignettes = {};
	record.ldp_getSaveLink = function() {
		var stdLayout = this.$prototype.$properties.stdLayout;
		return stdLayout && stdLayout.$item && stdLayout.$item.$links && stdLayout.$item.$links.$save;
	};
	record.ldp_getAddLink = function() {
		var vignettes = this.$prototype.$properties.vignettes;
		return vignettes && vignettes.$links && vignettes.$links.$select;
	};
	record.ldp_getVignette = function(vignetteId) {
		return this.ldpPreferences[vignetteId] || {};
	};
	record.ldp_deleteVignettes = function($uuids) {
		if ($uuids && $uuids.length) {
			var sendBag = syra_workingCopy.getSendBag(this);
			sendBag.vignettes = sendBag.vignettes || [];
			for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
				sendBag.vignettes.push({
					$isDeleted: true,
					$uuid: $uuids[ii]
				});
			}
			for (var ii = 0, jj = this.dataset.vignettes.length; ii < jj; ii++) {
				if ($uuids.indexOf(this.dataset.vignettes[ii].$uuid) >= 0) {
					this.dataset.vignettes.splice(ii, 1);
					ii--;
					jj--;
				}
			}
			this.page.notifyChangeToServer(sendBag, this, true);
		} else {
			this.page.designer.endArticleUpdate();
		}
	};
	record.ldp_saveLocation = function(vignetteField, menuItem) {
		var preferences = this.ldp_getVignette(vignetteField.$item.$bind);
		vignetteField.$field.$altLocation = preferences.$location = helpers.object.clone(vignetteField.$field.$location, true);
		preferences.$location.$bind = menuItem.$item.$bind;
		preferences.$location.$title = menuItem.getTitle();
		if (menuItem.$url) {
			preferences.$location.$url = menuItem.$url.replace("{$baseUrl}", "{$selectedEpBaseUrl}");
		}
		preferences.$location.$description = menuItem.$description;
		this.ldpPreferences[vignetteField.$item.$bind] = preferences;
		sessionStorage && sessionStorage.setItem("landingpage_" + this.$uuid, JSON.stringify(this.ldpPreferences));
	};
	record.ldp_onVignetteAdded = function($bind, field) {
		this.vignettes[$bind] = field;
		if (!field.endpointFlag) {
			field.endpointFlag = syra_menus.button.add({
				isIndicator: true,
				parent: field,
				css: "s-vignette-endpoint",
				fontIcon: "endpoint"
			});
			field.buttonsSlot.parentNode.insertBefore(field.endpointFlag.link, field.buttonsSlot);
		}
		var endpoint = field.$field.$vignetteEndpoint;
		syra_menus.button.hide(field.endpointFlag, !endpoint || this.useCurrentEndpoint);
		if (endpoint) {
			syra_menus.button.setText(field.endpointFlag, endpoint.description);
		}

		if (this.isDesignModeEnabled) {
			if (field.isDesignModeEnabled !== false) {
				if (!field.designBtn) {
					field.designBtn = syra_menus.button.add({
						parent: field,
						slot: field.buttonsSlot,
						text: syra_local.box_design,
						css: field.$skin + "-btn",
						iconOnly: true,
						fontIcon: "design",
						btnclick: function() {
							syra_site.switchItemDesigner(this.parent, !this.parent.designer);
						}
					});
				}
			}
			if (!field.deleteBtn) {
				field.deleteBtn = syra_menus.button.add({
					parent: field,
					slot: field.buttonsSlot,
					text: syra_local.box_delete,
					css: field.$skin + "-btn",
					iconOnly: true,
					fontIcon: "delete",
					btnclick: function() {
						var field = this.parent;
						syra_diagnose.box.show({
							$title: syra_local.ldpDeleteVignette,
							$message: syra_local.ldpConfirmDeleteVignette.replace("{0}", field.getTitle()),
							$type: "question",
							callback: function(response) {
								if (response && response.$clientId === "yes") {
									field.page.ldpRecord.ldp_deleteVignettes([field.$field.$vignetteId]);
								}
							}
						});
					}
				});
			}
		}
	};
	record.ldp_clearContent = function() {
		if (this.page && this.vignettes) {
			var $binds = Object.keys(this.vignettes);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				this.page.removeItem(this.vignettes[$binds[ii]], false, true);
				delete this.vignettes[$binds[ii]];
			}
			if (this.page.ldpRecord == this) {
				syra_fields.advancedState.clearPageButton(this.page);
				delete this.page.ldpRecord;
				delete this.page.$prototype.$localization;
				delete this.page.$prototype.$allLocalization;
				syra_site.layoutUpdater.clearContent(this.page.layoutContent);
			}
			this.isLayoutDisplay = false;
		}
	};

}

function ListBuilder() {}

exports.ListBuilder = helpers.defineClass(ListBuilder, null, {
	initialize: function(list) {
		this.list = list;
		this.emptyMessage = syra_local.ldpNoPage;
		list.$item.$isTopLabelAlignment = true;
		if (!list.$item.$layout || !list.$item.$layout.$items) {
			list.$item.$layout = list.defineDefaultCard().$layout;
		}
		list.$item.$alternateStyle = false;
	},
	endInitiallize: function() {
		this.list.$item.$isTopLabelAlignment = true;
		if (!this.list.$item.$layout || !this.list.$item.$layout.$items) {
			this.list.$item.$layout = this.list.defineDefaultCard().$layout;
		}
	},
	saveReorder: function(reorderRecord, targetRecord, isAfter) {
		if (this.list.ldp_isUserList) {
			var page = this.list.page;
			page.preferences.pages = [];
			var children = this.list.body.children;
			for (var ii = 0, jj = children.length; ii < jj; ii++) {
				page.preferences.pages.push(syra_store.findItem(children[ii]).$uuid);
			}
			if (reorderRecord) {
				var reorderIndex = page.preferences.pages.indexOf(reorderRecord.$uuid);
				var targetIndex = page.preferences.pages.indexOf(targetRecord.$uuid);
				page.preferences.pages.splice(reorderIndex, 1);
				if (targetIndex > reorderIndex) {
					reorderIndex = isAfter ? targetIndex : (targetIndex - 2);
				} else {
					reorderIndex = isAfter ? targetIndex + 1 : (targetIndex);
				}
				reorderIndex = Math.max(reorderIndex, 0);
				page.preferences.pages.splice(reorderIndex, 0, reorderRecord.$uuid);
			}
			page.savePreferences();
			this.list_onAfterFill();
		}
		return false;
	},
	isDraggable: function(target, event) {
		return this.list.isReorderRecordDraggable(target, event);
	},
	list_scrollToRecord: function(record) {
		record.page.scrollToItem(record.domItem, record.page.menuBar.body, true);
	},
	list_onAfterFill: function() {
		if (this.list.ldp_isUserList && this.list.page.preferences.pages) {
			if (this.list.records && this.list.records.length) {
				var orders = [];
				for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
					orders.push(this.list.records[ii].$uuid);
				}
				for (var ii = 0, jj = this.list.page.preferences.pages.length; ii < jj; ii++) {
					var $uuid = this.list.page.preferences.pages[ii];
					var record = this.list.recordsMap[$uuid];
					if (record) {
						record.domItem.parentNode.appendChild(record.domItem);
						orders.splice(orders.indexOf($uuid), 1);
					}
				}
				for (var ii = 0, jj = orders.length; ii < jj; ii++) {
					var record = this.list.recordsMap[orders[ii]];
					record.domItem.parentNode.appendChild(record.domItem);
				}
			}
		}
	},
	list_onAfterDraw: function() {
		this.list.body = this.list._core;
		this.list._dataValue.style.overflow = "auto";
		this.list.$skin = this.list.$item.$skin || "s-cards";
		this.list.applyDesignMetaData(this.list.$item, false);
		this.list.loadSelector();
		this.list.applyCapabilities();
		this.list.ensureLayoutMode();
		this.list.layoutSlot.appendChild(this.list.domItem);
		syra_dd.addToColResizers(this.list, true);
	},
	record_reorder: function(record, target, isAfter) {
		if (target) {
			target.domItem.parentNode.insertBefore(record.domItem, isAfter ? target.domItem.nextSibling : target.domItem);
		} else {
			if (isAfter) {
				this.list.body.appendChild(record.domItem);
			} else {
				this.list.body.insertBefore(record.domItem, this.list.body.firstChild);
			}
		}
	},
	record_onItemInOut: function(record, onEnter, event) {
		this.list.selector && record.highlightOnEnter(onEnter, event);
	},
	record_draw: function(record) {
		_add_ldpFunctions(record);

		record.$useDeletePicker = true;
		record.$item.$isPickerMenuHidden = true;
		record.$mnPickersCss = "s-inplace-picker";
		record.$isVerticalDirection = true;
		record.domItem = document.createElement("div");
		record.$skin = "s-ldpm-record";
		record.domItem.className = record.$skin;
		record.domItem.syrainout = record.domItem.syraItem = record.id;
		record.dataSlot = record.body = document.createElement("div");
		record.body.className = record.$skin + "-title";
		record.domItem.appendChild(record.body);

		if (!record.ldpPreferences) {
			record.ldpPreferences = sessionStorage && sessionStorage.getItem("landingpage_" + record.$uuid);
			record.ldpPreferences = (record.ldpPreferences && JSON.parse(record.ldpPreferences)) || {};
		}

		if (this.list.ldp_isUserList) {
			record.menusSlot = document.createElement("div");
			record.menusSlot.className = "s-ldpm-record-btns";
			record.domItem.appendChild(record.menusSlot);
			this.list.addReorder(record);
		}
		if (this.list.selector.isRowMode) {
			record.body.syraOnClick = "onSelectorClick";
			record.body.className += " s-list-selector-row";
		}
		record.cardItem = record.page.loadNewItem(record.body, {
			$bind: "title",
			$isMenusHidden: true,
			$isDetailLinkDisabled: true,
			$category: "field",
			$isEditMode: record.$isEditMode,
			$inplace: true,
			$css: "s-ldpm-title-field"
		}, record);
		this.list._core.appendChild(record.domItem);
		this.list.applyCapabilitiesToRecord(record);
	},
	record_onSelect: function(record, selected) {
		var page = record.page;
		if (selected) {
			var ldpRecord = page.ldpRecord;
			if (ldpRecord) {
				if (ldpRecord == record) {
					return;
				}
				if (ldpRecord && ldpRecord.list != record.list) {
					ldpRecord.list.selector.selectRecord(ldpRecord, false);
				}
			}
			var page = record.page;
			record.$vignettes = {};
			if (record.dataset.vignettes) {
				var $diagnoses = [];
				for (var ii = 0, jj = record.dataset.vignettes.length; ii < jj; ii++) {
					var source = helpers.object.clone(record.dataset.vignettes[ii]);
					if (source.$links && source.$links.$location) {
						var preferences = record.ldp_getVignette(source.bind);
						var $altLocation = preferences && preferences.$location;
						source.$links.$location.$url = syra_site.expressionMaker.parse(page, source.$links.$location.$url);
						if ($altLocation) {
							$altLocation.$url = syra_site.expressionMaker.parse(page, $altLocation.$url);
						}
						page.$prototype.$properties[source.bind] = record.$vignettes[source.bind] = {
							$vignetteEndpoint: source.endpoint,
							$vignetteId: source.$uuid,
							$type: "application/x-vignette",
							$title: source.$links.$location.$title,
							$location: source.$links.$location,
							$altLocation: $altLocation
						};
					} else {
						$diagnoses.push({
							$message: syra_local.ldpVignetteNoLocation.replace("{0}", source.bind),
							$severity: "warning"
						});
					}
				}
				if ($diagnoses.length) {
					syra_diagnose.showDiagnoses({
						$diagnoses: $diagnoses
					}, page);
				}
			}
			page.ldpRecord = record;
			record.useCurrentEndpoint = record.dataset.useCurrentEndpoint;
			var $binds = Object.keys(record.vignettes);
			if ($binds.length) {
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var vignette = record.vignettes[$bind];
					if (vignette) {
						if (!record.$vignettes[$bind]) {
							delete record.vignettes[$bind];
							delete record.$vignettes[$bind];
							delete page.$prototype.$properties[$bind];
							vignette.layoutParent && vignette.layoutParent.extractItem(vignette, true);
							page.removeItem(vignette, true, true);
							if (record.dataset.stdLayout && record.dataset.stdLayout.content) {
								record.dataset.stdLayout.content = syra_site.layoutUpdater.cleanBeforeSave(helpers.object.clone(page.$item, true));
							}
						}

					}
				}
			} else {
				if (!this.isLayoutDisplay) {
					var $article = (record.dataset.stdLayout && record.dataset.stdLayout.content) || {};
					$article.$layout = $article.$layout || {};
					$article.$layout.$layoutType = "tabs";
					$article.$layout.$items = $article.$layout.$items || [];
					page.$item = helpers.object.clone($article, true);
					page.$item.$layout.$tabIndex = page.preferences.tabs[record.$uuid] || 0;
					syra_site.localizer.applyPageLocalization(page);
					page.renderLayoutContent();
				}
			}
			this.isLayoutDisplay = true;
			var $binds = Object.keys(record.$vignettes);
			var hasToBeSave;
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $vignette = record.$vignettes[$bind];
				var field = page.boundFields[$bind];
				if (!(field && field.length)) {
					hasToBeSave = true;
					var tab = page.layoutContent.getOpenedTab() || page.createNewTab();
					record.ldp_onVignetteAdded($bind, tab.layoutContent.createChildItem({
						$bind: $bind
					}));
				}
			}

			record.isDesignModeEnabled = record.ldp_getSaveLink() != null;
			record.isDesignModeEnabled && syra_site.switchItemDesigner(page, true);

			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var vignette = page.boundFields[$bind] && page.boundFields[$bind][0];
				if (vignette) {
					record.ldp_onVignetteAdded($bind, vignette);
				}
			}


			page.layoutContent.ensureTabsSlot().appendChild(page.addTabBtn.link);
			syra_menus.button.hide(page.addVignetteBtn, !record.ldp_getAddLink());
			syra_menus.button.hide(page.addTabBtn, !record.isDesignModeEnabled);
			syra_menus.button.hide(page.designBtn, !record.isDesignModeEnabled);
			syra_menus.button.hide(page.addVignetteBtn, !(record.isDesignModeEnabled && record.ldp_getAddLink()));
			page.setTitle(record.dataset.title);

			page.preferences.$selected = record.dataset.$uuid;
			if (page.isPageLoaded) {
				page.savePreferences();
				syra_site.validateLayoutContent(page);
				page.resizeArticle(true);
				record.scrollToRecord();
				//hasToBeSave && page.saveLandingDesign();
			}
			page.designer && page.designer.endArticleUpdate(null, null, false);
		} else {
			if (page.ldpRecord == record) {
				page.saveSelectedTab();
				record.ldp_clearContent();
			}
		}
		syra_site.dom.toggleClass(record.domItem, "s-list-record-selected", selected);
	},
	record_dispose: function(record) {
		record.ldp_clearContent();
	},
	dispose: function() {
		if (this.list) {
			syra_dd.addToColResizers(this.list, false);
			syra_site.dom.empty(this.list._core);
		}
	}
});