"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('./desktopPage').DesktopPage;
var drawHelper = require("syracuse-ui/lib/authoring/drawHelper");
var importHelper = require('./utility/importHelper');

function DashboardPage() {}

exports.DashboardPage = helpers.defineClass(DashboardPage, DesktopPage, {
	dispose: function() {
		this.registeredVignettes = this.garbageLinks = this.freeLinks = null;
		DesktopPage.prototype.dispose.call(this);
	},
	registerVignette: function(vignette, $bind) {
		this.registeredVignettes[$bind || vignette.$item.$bind] = vignette;
	},
	garbageFreeItems: function() {
		if (this.freeLinks) {
			this.garbageLinks = this.garbageLinks || {};
			var $binds = Object.keys(this.freeLinks);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				this.garbageLinks[$binds[ii]] = this.freeLinks[$binds[ii]];
				delete this.freeLinks[$binds[ii]];
			}
			this.$item.$garbageLinks = Object.keys(this.garbageLinks);
		}
		DesktopPage.prototype.garbageFreeItems.call(this);
	},
	onAuthoringExcludeField: function($bind, isExcluded, isMenuItem) {
		if (isMenuItem) {
			if (isExcluded) {
				this.garbageLinks[$bind] = 1;
			} else {
				delete this.garbageLinks[$bind];
			}
			this.$item.$garbageLinks = Object.keys(this.garbageLinks);
		} else {
			DesktopPage.prototype.onAuthoringExcludeField.call(this, $bind, isExcluded);
		}
	},
	loadGarbage: function() {
		this.garbageLinks = {};
		if (this.$item.$garbageLinks) {
			var $links = this.$prototype.$links || {};
			for (var ii = 0, jj = this.$item.$garbageLinks.length; ii < jj; ii++) {
				this.garbageLinks[this.$item.$garbageLinks[ii]] = $links[this.$item.$garbageLinks[ii]];
			}
		}
		DesktopPage.prototype.loadGarbage.call(this);
	},
	_addDefaultMenus: function($vignette) {
		var $layout = {
			$layoutType: "row",
			$widths: "33,33,33",
			$items: [{
				$layoutType: "stack",
				$items: []
			}, {
				$layoutType: "stack",
				$items: []
			}, {
				$layoutType: "stack",
				$items: []
			}]
		};
		var $linkBinds = Object.keys(this.$prototype.$links);
		var index = 0;
		for (var ii = 0, jj = $linkBinds.length; ii < jj; ii++) {
			var $linkBind = $linkBinds[ii];
			var $link = this.$prototype.$links[$linkBind];
			if ($link.$vignettes && $link.$vignettes.indexOf($vignette) >= 0) {
				$layout.$items[index++].$items.push({
					$category: "link",
					$skin: "s-mn-h2-link",
					$bind: $linkBind
				});
				if (index == 3) {
					index = 0;
				}
			}
		}
		return $layout;
	},
	addDefaultField: function($bind, $field, addSection) {
		addSection = addSection !== false;
		var $item = ($field.$format == "$menu") ? {
			$category: "menus",
			$vignette: $bind,
			$layout: this._addDefaultMenus($bind)
		} : {
			$isTitleHidden: addSection,
			$bind: $bind
		};
		if (addSection) {
			$item = {
				$category: "section",
				$title: $field.$title,
				$layout: {
					$items: [$item]
				}
			};
		}
		return $item;
	},
	createDefaultArticle: function($article, $prototype) {
		if (!$article) {
			$article = {};
		}
		if (!$article.$layout) {
			$article.$layout = {};
		}
		if (!$article.$layout.$items) {
			var $items = [];
			var $itemFields = [];
			var binds = Object.keys($prototype.$properties);
			for (var ii = 0, jj = binds.length; ii < jj; ii++) {
				var $bind = binds[ii];
				var $field = $prototype.$properties[$bind];
				if ($field && !$field.$isExcluded && !$field.$isTOC) {
					$itemFields.push(this.addDefaultField($bind, $prototype.$properties[$bind]));
				}
			}
			if ($itemFields.length == 1) {
				$items = $itemFields;
			} else {
				$article.$layout.$layoutType = "row";
				$items.push({
					$layoutType: "stack",
					$items: []
				}, {
					$layoutType: "stack",
					$items: []
				});
				var half = Math.ceil($itemFields.length / 2);
				for (var ii = 0, jj = $itemFields.length; ii < jj; ii++) {
					$items[ii < half ? 0 : 1].$items.push($itemFields[ii]);
				}
			}
			$article.$layout.$items = $items;
		}
		return $article;
	},
	ensureDefaultArticle: function($article, $prototype) {
		if ($article && $article.$importHint) {
			importHelper.importArticle($article, $prototype, this);
		} else {
			$article = this.createDefaultArticle($article, $prototype);
		}
		return $article;
	},
	loadNewVignetteMenu: function(vignette, $vignette) {
		var awPalette;
		if (this.authoringPage) {
			awPalette = this.authoringPage.getContext(this);
		}
		var $field = this.$prototype.$properties[$vignette];
		if ($field) {
			vignette.$item.$vignette = $vignette;
			this.registerVignette(vignette, $vignette);
			vignette.setTitle(vignette.$item.$title = $field.$title);
			var siblings = vignette.boxParent.layoutContent.getItems();
			var siblingsCount = 0;
			for (var mm = 0, kk = siblings.length; mm < kk; mm++) {
				if (!siblings[mm].isSpaceBox) {
					siblingsCount++;
				}
			}
			if (siblingsCount == 1) {
				vignette.boxParent.setTitle($field.$title);
				vignette.applyDesignMetaData({
					$isTitleHidden: true
				}, true);
			}
			vignette.layoutContent.$layout.$layoutType = "row";
			vignette.layoutContent.$layout.$widths = "33,33,33";
			vignette.layoutContent.ensureLayoutMode();
			if (awPalette) {
				vignette.layoutContent.removeSpaceBox(true);
			}
			var $items = [{
				$layoutType: "stack",
				$items: []
			}, {
				$layoutType: "stack",
				$items: []
			}, {
				$layoutType: "stack",
				$items: []
			}];
			var $linkBinds = Object.keys(this.$prototype.$links);
			var index = 0;
			for (var ii = 0, jj = $linkBinds.length; ii < jj; ii++) {
				var $linkBind = $linkBinds[ii];
				var $link = this.$prototype.$links[$linkBind];
				if ($link.$vignettes && $link.$vignettes.indexOf($vignette) >= 0) {
					$items[index++].$items.push({
						$category: "link",
						$skin: "s-mn-h2-link",
						$bind: $linkBind
					});
					delete this.freeLinks[$linkBind];
					if (index == 3) {
						index = 0;
					}
					if (awPalette) {
						awPalette.onExcludeField($linkBind, false);
					}
				}
			}
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				vignette.layoutContent.createChildItem($items[ii], null, ii);
			}

		}
	},
	isTOCMenu: function($menu) {
		if ($menu.$vignettes) {
			for (var ii = 0, jj = $menu.$vignettes.length; ii < jj; ii++) {
				var $vignette = this.$prototype.$properties[$menu.$vignettes[ii]];
				if ($vignette && $vignette.$isTOC) {
					return true;
				}
			}
		}
		return false;
	},
	_addMenuToMenusBag: function($bind, $menu) {
		if (!this.garbageLinks[$bind]) {
			if ($menu.$vignettes) {
				if (!this.isTOCMenu($menu)) {
					this.freeLinks[$bind] = $menu;
					return;
				}
			}
			DesktopPage.prototype._addMenuToMenusBag.call(this, $bind, $menu);
		}
	},
	_flagNewItems: function($newLinkBinds, $newVignetteBinds) {
		if ($newLinkBinds.length > 0) {
			for (var ii = 0, jj = $newLinkBinds.length; ii < jj; ii++) {
				var menus = this.menuItems[$newLinkBinds[ii]];
				if (menus) {
					for (var mm = 0, kk = menus.length; mm < kk; mm++) {
						this.appendNewItemFlag(menus[mm].mn, "menu");
					}
				}
			}
		}
		if ($newVignetteBinds.length > 0) {
			for (var ii = 0, jj = $newVignetteBinds.length; ii < jj; ii++) {
				var vignette = this.registeredVignettes[$newVignetteBinds[ii]];
				if (vignette) {
					var header = vignette._header;
					if (vignette.isMenuGroup) {
						if (vignette._header.style.display == "none" && vignette.layoutParent && vignette.layoutParent.boxParent.isSection) {
							header = vignette.layoutParent.boxParent._header;
						}
					}
					this.appendNewItemFlag(header, "vignette");
				}
			}
		}
	},
	reloadLayout: function($item) {
		this.registeredVignettes = {};
		this.freeLinks = {};
		DesktopPage.prototype.reloadLayout.call(this, $item);
	},

	onMenuClick: function(menuItem) {
		if (menuItem.$sourceBind) {
			switch (menuItem.$sourceBind) {
				case "$apply_default":
					this._storeArticle();
					var $article = helpers.object.clone(this.ensureDefaultArticle(this.$prototype.$article, this.$prototype), true);
					var $newLinkBinds = Object.keys(this.freeLinks);
					var $newFieldBinds = this.$freeFieldBinds;

					this.reloadLayout($article);
					this.warnAdministrationUpdates();
					this._flagNewItems($newLinkBinds, $newFieldBinds);
					this._showDefaultAuthoringApplyedDiagnoses();
					return false;
				case "$add_new_items":
					this._storeArticle();
					this.layoutContent.ensureContentIsLoaded();
					var $newLinkBinds = Object.keys(this.freeLinks);
					var $newFieldBinds = this.$freeFieldBinds;
					if ($newFieldBinds.length > 0) {
						var $field;
						var layout = this.layoutContent;
						for (var ii = 0, jj = $newFieldBinds.length; ii < jj; ii++) {
							$field = this.$prototype.$properties[$newFieldBinds[ii]];
							var $item = {};
							if ($field.$format == "$menu") {
								drawHelper.onAddNewVignette({
									awArticle: this
								}, this.layoutContent, {
									$category: "menus",
									$title: $field.$title,
									$vignette: $newFieldBinds[ii]
								}, "top");
							} else {
								drawHelper.onAddNewField({
									awArticle: this
								}, this.layoutContent, {
									$fieldBind: $newFieldBinds[ii],
									$fieldCategory: "field"
								}, "top");
							}
						}
					}
					var $freeLinkBinds = Object.keys(this.freeLinks);
					if ($freeLinkBinds.length > 0) {
						for (var ii = 0, jj = $freeLinkBinds.length; ii < jj; ii++) {
							var $linkBind = $freeLinkBinds[ii];
							var $freeLink = this.freeLinks[$linkBind];
							if ($freeLink && $freeLink.$vignettes) {
								var vignette;
								for (var mm = 0, kk = $freeLink.$vignettes.length; !vignette && mm < kk; mm++) {
									var sibling = this.findSiblingMenu($freeLink.$vignettes[mm]);
									if (sibling) {
										drawHelper.onAddNewField({
											awArticle: this
										}, sibling, {
											$fieldBind: $linkBind,
											$fieldCategory: "link",
											$category: "link"
										}, "top");
										delete this.freeLinks[$linkBind];
									}
								}
							}
						}
					}
					this.layoutValidator.validate(this.layoutContent, true);

					this.freeLinks = {};
					this.warnAdministrationUpdates();
					this._flagNewItems($newLinkBinds, $newFieldBinds);
					this._showAddNewItemApplyedDiagnoses();
					return false;
			}
		}
		return DesktopPage.prototype.onMenuClick.call(this, menuItem);
	},
	getLoadedVignetteMenus: function() {
		this.loadedVignettesMenus = {};
		var $binds = Object.keys(this.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var menus = this.menuItems[$binds[ii]];
			if (menus.length > 0) {
				var $vignettes = menus[0].$vignettes;
				if ($vignettes) {
					for (var mm = 0, kk = $vignettes.length; mm < kk; mm++) {
						var $vignetteBind = $vignettes[mm];
						if (!this.garbageFields[$vignetteBind]) {
							this.loadedVignettesMenus[$vignetteBind] = this.$prototype.$properties[$vignetteBind];
						}
					}
				}
			}
		}
	},
	findSiblingMenu: function($vignette) {
		var vignette = this.registeredVignettes[$vignette];
		if (!vignette) {
			var $binds = Object.keys(this.menuItems);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var menus = this.menuItems[$binds[ii]];
				if (menus.length > 0 && menus[0].$vignettes) {
					if (menus[0].$vignettes.indexOf($vignette) >= 0) {
						return menus[0];
					}
				}
			}
		}
		return null;
	},
	warnAdministrationUpdates: function(showDiagnoses) {
		var $freeLinkBinds = Object.keys(this.freeLinks);
		var $fieldsBinds = Object.keys(this.$prototype.$properties);
		this.$freeFieldBinds = [];
		if ($freeLinkBinds.length > 0) {
			this.getLoadedVignetteMenus();
		}
		var $definedBinds = {};
		this.getDefinedFieldsObject(this.$item.$layout.$items, $definedBinds);
		for (var ii = 0, jj = $fieldsBinds.length; ii < jj; ii++) {
			var $bind = $fieldsBinds[ii];
			if (!this.registeredVignettes[$bind]) {
				var $field = this.$prototype.$properties[$bind];
				if ($field && !$field.$isExcluded && !$field.$isTOC) {
					if ($field.$format == "$menu") {
						for (var mm = 0, kk = $freeLinkBinds.length; mm < kk; mm++) {
							var $freeLink = this.freeLinks[$freeLinkBinds[mm]];
							if ($freeLink.$vignettes && $freeLink.$vignettes.indexOf($bind) >= 0) {
								//vignette has new menu Item 
								if (!this.loadedVignettesMenus[$bind]) {
									if (!this.garbageFields[$bind]) {
										this.$freeFieldBinds.push($bind);
									}
								}
								break;
							}
						}
					} else {
						if ($bind != "$pageViewSelector" && !$definedBinds[$bind]) {
							if (!this.garbageFields[$bind]) {
								this.$freeFieldBinds.push($bind);
							}
						}
					}
				}
			}
		}
		if ($freeLinkBinds.length > 0 || this.$freeFieldBinds.length > 0) {
			var $message;
			if ($freeLinkBinds.length > 0) {
				if (this.$freeFieldBinds.length > 0) {
					$message = this.localize.dskpDashNewLinkVignette.replace("{0}", $freeLinkBinds.length);
					$message = $message.replace("{1}", this.$freeFieldBinds.length);
				} else {
					$message = this.localize.dskpDashNewLink.replace("{0}", $freeLinkBinds.length);
				}
			} else {
				$message = this.localize.dskpDashNewVignette.replace("{0}", this.$freeFieldBinds.length);
			}
			if (showDiagnoses !== false) {
				this.showDiagnoses({
					$diagnoses: [{
						$message: $message,
						$severity: "warning",
						$links: {
							"$forget_new_content": {
								$title: this.localize.dskpForgetNewContent
							},
							"$apply_default": {
								$title: this.localize.dskpNewApplyDefault
							},
							"$add_new_items": {
								$title: this.localize.dskpNewBestPlace
							},
							"$open_authoring": {
								$title: this.localize.dskpOpenAuthoring
							}
						}
					}]
				});
			}
		}
	},
	_highlightPageLink: function() {
		if (this.$urlParts && this.$urlParts.params) {
			var representationParam = "representation=" + this.$urlParts.params.representation;
			if (this.menusBags && this.menusBags.length && this.menusBags[0].layoutContent) {
				var menusItems = this.menusBags[0].layoutContent.items;
				if (menusItems.length > 0) {
					var currentMenu;
					for (var ii = 0, jj = menusItems.length; ii < jj; ii++) {
						var menu = menusItems[ii];
						if (menu.$url.indexOf(representationParam) >= 0) {
							currentMenu = menu;
							break;
						}
					}
				}
				if (currentMenu) {
					document.site.toggleClass(currentMenu.mn, "s-cst-sty-main", true);
					document.site.toggleClass(currentMenu.layoutSlot, "s-cst-sty-main", true);

				}
			}
		}
	},
	loadBox: function(initData, $initDiagnoses) {
		this.loadedVignettesMenus = {};
		this.freeLinks = {};
		this.registeredVignettes = {};
		this.isDashBoard = true;
		this.$skin = this.$item.$skin || "s-dash";
		this.$skinMenu = "s-dash-nav";
		this.$defaultSkinBlock = "s-dash-h2";
		this.$defaultSkinSection = "s-dash-h1";
		this._defaultTitle = this.localize.dskpDashboardTitle;
		this.$isSearchFacetEnabled = false;
		this.$autoFetch = false;
		DesktopPage.prototype.loadBox.call(this, initData, $initDiagnoses);
		this._highlightPageLink();
	}
});