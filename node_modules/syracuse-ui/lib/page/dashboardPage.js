"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('./desktopPage').DesktopPage;

function DashboardPage(){
}

exports.DashboardPage = helpers.defineClass(DashboardPage, DesktopPage, {
    dispose: function(){
        this._vignettes = this._vignettesMenus = null;
        DesktopPage.prototype.dispose.call(this);
    },
    registerVignette: function(vignette){
        this._vignettes[vignette.$item.$bind] = vignette;
    },
    onAuthoringAddNewField: function($newItem){
        if ($newItem.$fieldCategory == "link") {
            delete this._vignettesMenus.garbageLinks[$newItem.$fieldBind];
        }
    },
    onAuthoringExcludeItem: function(removedItem){
        if (removedItem.$bind && removedItem.isMenuItem) {
            this._vignettesMenus.garbageLinks[removedItem.$bind] = 1;
        }
    },
    saveGarbageLinks: function($article){
        $article.$garbageLinks = Object.keys(this._vignettesMenus.garbageLinks);
    },
    loadVignetteMenu: function(vignette, $vignette){
        var $field = this.$prototype.$properties[$vignette];
        if ($field) {
            vignette.$item.$vignette = $vignette;
            vignette.setTitle(vignette.$item.$title = $field.$title);
            if ($field.$links) {
                var $binds = Object.keys($field.$links);
                for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                    vignette.addMenuItem({
                        $bind: $binds[ii]
                    });
                }
            }
        }
    },
    _addMenuToMenusBag: function($bind, $menu){
        if (!this._vignettesMenus.garbageLinks[$bind]) {
            if ($menu.$vignettes) {
                this._vignettesMenus.freeLinks[$bind] = $menu;
            }
            else {
                DesktopPage.prototype._addMenuToMenusBag.call(this, $bind, $menu);
            }
        }
        else {
            //debugger;
        }
    },
    onMenuClick: function(menuItem){
        if (menuItem.$sourceBind) {
            switch (menuItem.$sourceBind) {
                case "$dash_apply_default":
                    var $article = helpers.object.clone(document.site.ensureDefaultArticle(this.$prototype.$article, this.$prototype), true);
                    var $freeLinkBinds = this._vignettesMenus.$freeLinkBinds;
                    var $freeVignetteBinds = this._vignettesMenus.$freeVignetteBinds;
                    this._vignettesMenus.freeLinks = {};
                    this.reloadLayout($article);
                    this.warnAdministrationUpdates();
                    if ($freeLinkBinds.length > 0) {
                        for (var ii = 0, jj = $freeLinkBinds.length; ii < jj; ii++) {
                            var menus = this.menuItems[$freeLinkBinds[ii]];
                            for (var mm = 0, kk = menus.length; mm < kk; mm++) {
                                menus[mm].mn.className += " s-dash-new-link";
                            }
                        }
                    }
                    if ($freeVignetteBinds.length > 0) {
                    //debugger;
                    }
                    return false;
                case "$dash_add_new_items":
                    return false;
            }
        }
        return true;
    },
    getLoadedVignetteMenus: function(){
        this._vignettesMenus.loaded = {};
        var $binds = Object.keys(this.menuItems);
        for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
            var menus = this.menuItems[$binds[ii]];
            if (menus.length > 0) {
                var $vignettes = menus[0].$vignettes;
                if ($vignettes) {
                    for (var mm = 0, kk = $vignettes.length; mm < kk; mm++) {
                        this._vignettesMenus.loaded[$vignettes[mm]] = this.$prototype.$properties[$vignettes[mm]];
                    }
                }
            }
        }
    },
    warnAdministrationUpdates: function(){
        this._vignettesMenus.$freeLinkBinds = Object.keys(this._vignettesMenus.freeLinks);
        var $vignettesBinds = Object.keys(this.$prototype.$properties);
        this._vignettesMenus.$freeVignetteBinds = [];
        if (this._vignettesMenus.$freeLinkBinds.length > 0) {
            this.getLoadedVignetteMenus();
        }
        for (var ii = 0, jj = $vignettesBinds.length; ii < jj; ii++) {
            var $bind = $vignettesBinds[ii];
            if (!this._vignettes[$bind]) {
                var $vignette = this.$prototype.$properties[$bind];
                if ($vignette) {
                    if ($vignette.$format == "$menu") {
                        if (this._vignettesMenus.$freeLinkBinds.length > 0) {
                            for (var mm = 0, kk = this._vignettesMenus.$freeLinkBinds.length; mm < kk; mm++) {
                                var $freeLink = this._vignettesMenus.freeLinks[this._vignettesMenus.$freeLinkBinds[mm]];
                                if ($freeLink.$vignettes && $freeLink.$vignettes.indexOf($bind) >= 0) {
                                    //vignette has new menu Item 
                                    if (!this._vignettesMenus.loaded[$bind]) {
                                        this._vignettesMenus.$freeVignetteBinds.push($bind);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    else {
                        if ($bind != "$pageViewSelector") {
                            this._vignettesMenus.$freeVignetteBinds.push($bind);
                        }
                    }
                }
            }
        }
        
        if (this._vignettesMenus.$freeLinkBinds.length > 0 || this._vignettesMenus.$freeVignetteBinds.length > 0) {
            var $message;
            var localize = this.ensurePageLocalize();
            if (this._vignettesMenus.$freeLinkBinds.length > 0) {
                if (this._vignettesMenus.$freeVignetteBinds.length > 0) {
                    $message = localize.p_dashNewLinkVignette.replace("{0}", this._vignettesMenus.$freeLinkBinds.length);
                    $message = $message.replace("{1}", this._vignettesMenus.$freeVignetteBinds.length);
                }
                else {
                    $message = localize.p_dashNewLink.replace("{0}", this._vignettesMenus.$freeLinkBinds.length);
                }
            }
            else {
                $message = localize.p_dashNewVignette.replace("{0}", this._vignettesMenus.$freeVignetteBinds.length);
            }
            this.showDiagnoses({
                $diagnoses: [{
                    $message: $message,
                    $severity: "warning",
                    $links: {
                        "$dash_apply_default": {
                            $title: localize.p_dashNewApplyDefault
                        },
                        "$dash_add_new_items": {
                            $title: localize.p_dashNewBestPlace
                        }
                    }
                }]
            });
        }
    },
    loadBox: function(initData, $initDiagnoses){
        this._vignettesMenus = {
            freeLinks: {},
            garbageLinks: {},
            loaded: {}
        };
        if (this.$item.$garbageLinks) {
            for (var ii = 0, jj = this.$item.$garbageLinks.length; ii < jj; ii++) {
                this._vignettesMenus.garbageLinks[this.$item.$garbageLinks[ii]] = 1;
            }
        }
        this._vignettes = {};
        this.isDashBoard = true;
        this.ensurePageLocalize();
        this.$skin = this.$item.$skin || "s-dash";
        this.$defaultSkinBlock = "s-dash-h2";
        this.$defaultSkinSection = "s-dash-h1";
        this._defaultTitle = this.pageLocalize.p_dashboardTitle;
        this.$isSearchFacetEnabled = false;
        this.$autoFetch = false;
        DesktopPage.prototype.loadBox.call(this, initData, $initDiagnoses);
        this.warnAdministrationUpdates();
    }
});
