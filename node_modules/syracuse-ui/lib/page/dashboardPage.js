"use strict";
var helpers = require('syracuse-core/lib/helpers');
var LandingPageDesigner = require("syracuse-ui/lib/authoring/landingPage/landingPageDesigner").LandingPageDesigner;
var DesktopPage = require('./desktopPage').DesktopPage;
var importHelper = require('./utility/importHelper');

function DashboardPage() {}

exports.DashboardPage = helpers.defineClass(DashboardPage, DesktopPage, {
	designItem: function(open) {
		document.site.designItem(open, this, LandingPageDesigner);
	},
	dispose: function() {
		this.registeredVignettes = null;
		DesktopPage.prototype.dispose.call(this);
	},
	appendHeader: function() {
		DesktopPage.prototype.appendHeader.call(this);
		this.refreshLink = document.createElement("a");
		this.refreshLink.className = "s-dash-refresh";
		this.refreshLink.title = this.localize.landingPageRefresh;
		this.refreshLink.setAttribute("data-s-picker", "refresh");
		this.designerOpenerLink = document.createElement("a");
		this.designerOpenerLink.className = "s-dash-designer-picker";
		this.designerOpenerLink.setAttribute("data-s-picker", "openDesigner");
		this.designerOpenerLink.title = this.localize.landingPageOpenDesigner;
		this.designerOpenerLink.style.display = this.refreshLink.style.display = "none";
		this.headerCoreRight.appendChild(this.refreshLink);
		this.headerCoreRight.appendChild(this.designerOpenerLink);
	},
	onClickPicker: function(picker, event) {
		if (picker == this.refreshLink || picker == this.designerOpenerLink) {
			var items = this.layoutContent.getFields();
			if (picker == this.refreshLink) {
				for (var ii = 0, jj = items.length; ii < jj; ii++) {
					if (items[ii].doPicker) {
						items[ii].doPicker("refresh");
					}
				}
			} else {
				this.designer.toggleDesigner();
			}
			event.stopPropagation();
			return false;
		}
		return true;
	},
	applyShortCuts: function(shortcurts, event) {
		if (shortcurts.esc && shortcurts.r) {
			if (this.registeredVignettes) {
				var $binds = Object.keys(this.registeredVignettes);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var field = this.registeredVignettes[$binds[ii]];
					if (field.vignette && field.vignette.applyShortCuts) {
						field.vignette.applyShortCuts(shortcurts);
					}
				}
			}
			return true;
		}
		return DesktopPage.prototype.applyShortCuts.call(this, shortcurts, event);
	},
	registerVignette: function(vignette, $bind) {
		this.registeredVignettes[$bind || vignette.$item.$bind] = vignette;
	},
	_addDefaultMenus: function($vignette) {
		var $layout = {
			$layoutType: "row",
			$widths: "33,33,33",
			$items: [{
				$layoutType: "stack",
				$items: []
			}, {
				$layoutType: "stack",
				$items: []
			}, {
				$layoutType: "stack",
				$items: []
			}]
		};
		var $linkBinds = Object.keys(this.$prototype.$links);
		var index = 0;
		for (var ii = 0, jj = $linkBinds.length; ii < jj; ii++) {
			var $linkBind = $linkBinds[ii];
			var $link = this.$prototype.$links[$linkBind];
			if ($link.$vignettes && $link.$vignettes.indexOf($vignette) >= 0) {
				$layout.$items[index++].$items.push({
					$category: "link",
					$skin: "s-dash-h2-link",
					$bind: $linkBind
				});
				if (index == 3) {
					index = 0;
				}
			}
		}
		return $layout;
	},
	addDefaultField: function($bind, $field) {
		return ($field.$format == "$menu") ? {
			$category: "section",
			$title: $field.$title,
			$layout: {
				$items: [{
					$category: "menus",
					$vignette: $bind,
					$layout: this._addDefaultMenus($bind)
				}]
			}
		} : {
			$bind: $bind
		};
	},
	createDefaultArticle: function($article, $prototype) {
		if (!$article) {
			$article = {};
		}
		if (!$article.$layout) {
			$article.$layout = {};
		}
		if (!$article.$layout.$items) {
			var $items = [];
			var $itemFields = [];
			var binds = Object.keys($prototype.$properties);
			for (var ii = 0, jj = binds.length; ii < jj; ii++) {
				var $bind = binds[ii];
				var $field = $prototype.$properties[$bind];
				if ($field && !$field.$isExcluded && !$field.$isTOC) {
					$itemFields.push(this.addDefaultField($bind, $prototype.$properties[$bind]));
				}
			}
			if (this.isLandingPage) {
				$article.$layout.$layoutType = "tabs";
				$article.$layout.$items = [{
					$category: "section",
					$title: "New tab",
					$layout: {
						$items: $itemFields
					}
				}];
			} else {
				if ($itemFields.length == 1) {
					$items = $itemFields;
				} else {
					/*$article.$layout.$layoutType = "row";
                     $items.push({
                     $layoutType: "stack",
                     $items: []
                     }, {
                     $layoutType: "stack",
                     $items: []
                     });
                     var half = Math.ceil($itemFields.length / 2);
                     for (var ii = 0, jj = $itemFields.length; ii < jj; ii++) {
                     $items[ii < half ? 0 : 1].$items.push($itemFields[ii]);
                     }*/
					$items = $itemFields;
				}
				$article.$layout.$items = $items;
			}
		}
		return $article;
	},
	ensureDefaultArticle: function($article, $prototype) {
		if ($article && $article.$importHint) {
			importHelper.importArticle($article, $prototype, this);
		} else {
			$article = this.createDefaultArticle($article, $prototype);
		}
		return $article;
	},
	isTOCMenu: function($menu) {
		if ($menu.$vignettes) {
			for (var ii = 0, jj = $menu.$vignettes.length; ii < jj; ii++) {
				var $vignette = this.$prototype.$properties[$menu.$vignettes[ii]];
				if ($vignette && $vignette.$isTOC) {
					return true;
				}
			}
		}
		return false;
	},
	_addMenuToMenusBag: function($bind, $menu) {
		if ($menu.$vignettes) {
			if (!this.isTOCMenu($menu)) {
				return;
			}
		}
		DesktopPage.prototype._addMenuToMenusBag.call(this, $bind, $menu);

	},
	reloadLayout: function($item) {
		this.registeredVignettes = {};
		DesktopPage.prototype.reloadLayout.call(this, $item);
	},
	findSiblingMenu: function($vignette) {
		var vignette = this.registeredVignettes[$vignette];
		if (!vignette) {
			var $binds = Object.keys(this.menuItems);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var menus = this.menuItems[$binds[ii]];
				if (menus.length > 0 && menus[0].$vignettes) {
					if (menus[0].$vignettes.indexOf($vignette) >= 0) {
						return menus[0];
					}
				}
			}
		}
		return null;
	},
	_highlightPageLink: function() {
		if (this.$urlParts && this.$urlParts.params) {
			var representationParam = "representation=" + this.$urlParts.params.representation;
			if (this.menusBags && this.menusBags.length && this.menusBags[0].layoutContent) {
				var menusItems = this.menusBags[0].layoutContent.items;
				if (menusItems.length > 0) {
					var currentMenu;
					for (var ii = 0, jj = menusItems.length; ii < jj; ii++) {
						var menu = menusItems[ii];
						if (menu.$url.indexOf(representationParam) >= 0) {
							currentMenu = menu;
							break;
						}
					}
				}
				if (currentMenu) {
					document.site.toggleClass(currentMenu.mn, "s-cst-sty-main", true);
					document.site.toggleClass(currentMenu.layoutSlot, "s-cst-sty-main", true);

				}
			}
		}
	},
	extractBinds: function($layout, $binds) {
		if (!$binds) {
			$binds = [];
		}
		if ($layout.$items) {
			for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
				var $item = $layout.$items[ii];
				if ($item.$bind && $item.$category != "link") {
					$binds[ii] = $item;
				} else {
					if ($item.$layout || $item.$items) {
						$binds = this.extractBinds($item.$layout || $item, $binds);
					}
				}
			}
		}
		return $binds;
	},
	_applyBinds: function($layout, $binds) {
		if ($layout.$items) {
			for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
				var $item = $layout.$items[ii];
				if ($item.$bind && $binds[$item.$bind]) {
					$item = $binds[$item.$bind];
				} else {
					if ($item.$layout || $item.$items) {
						$binds = this._applyBinds($item.$layout || $item, $binds);
					}
				}
			}
		}
		return $binds;
	},
	applyNewNavigationLayout: function() {
		var $binds = Object.keys(this.$prototype.$properties);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $field = this.$prototype.$properties[$binds[ii]];
			if (!($field.$format == "$menu" || $field.$isTOC)) {
				this.isLandingPage = true;
				break;
			}
		}
		var $definedBinds = (this.$item && this.$item.$layout) ? this.extractBinds(this.$item.$layout) : null;
		if (!this.$prototype.$isDefaultDashboard) {
			this.$item = helpers.object.clone(this.ensureDefaultArticle(this.$prototype.$article, this.$prototype), true);
		}
		if ($definedBinds && $definedBinds.length) {
			this._applyBinds(this.$item.$layout, $definedBinds);
		}
		if (this.isLandingPage) {
			this.$item.$layout.$layoutType = "tabs";
		}
	},
	ensureDesignerOpenerVisibility: function() {
		if (document.site.pageDesignerOpener) {
			document.site.pageDesignerOpener.style.display = "none";
		}
	},
	onBoxClickItem: function(box, link) {
		if (box) {
			if (box.$item.$isAddLandingTab) {
				this.layoutContent.loadChildItem(null, {
					$category: "section",
					$title: "New Tab"
				}, this.layoutContent.items.indexOf(box)).openBox(true);
				return false;
			} else {
				if (box.isTabLayout && this.designer) {
					this.designer.onTabClik(box);
				}
			}
		}
		return true;
	},
	loadBox: function(initData, $initDiagnoses) {
		this.registeredVignettes = {};
		this.isDashBoard = true;
		this.$skin = this.$item.$skin || "s-dash";
		this.$skinMenu = "s-dash-nav";
		this.$defaultSkinBlock = "s-dash-h2";
		this.$defaultSkinSection = "s-dash-h1";
		this._defaultTitle = this.localize.dskpLandingPageTitle;
		this.$autoFetch = false;
		this.applyNewNavigationLayout();
		DesktopPage.prototype.loadBox.call(this, initData, $initDiagnoses);
		this._highlightPageLink();
		if (this.isLandingPage) {
			this.designerOpenerLink.style.display = this.refreshLink.style.display = "";
			this.layoutContent.loadChildItem(null, {
				$category: "section",
				$isAddLandingTab: true,
				$isAuthoringEnabled: false,
				$title: "+",
				$description: this.localize.landingPageAddTab
			});
			if (this.layoutContent && this.layoutContent.items.length) {
				if (this.layoutContent.items[0].isTabLayout) {
					this.layoutContent.items[0].openBox(true, true);
				}
			}
			this.designItem(true);
			//temp for right implementation
			if (this.pageViewSelector) {
				this.pageViewSelector.disable(false);
			}
		}
	}
});