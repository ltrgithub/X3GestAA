"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('./desktopPage').DesktopPage;

function _isSectionMenus($oldBinds, $newBinds, $notDefined) {
	var $defined = [];
	for (var ii = 0, jj = $newBinds.length; ii < jj; ii++) {
		if ($oldBinds.indexOf($newBinds[ii]) < 0) {
			$notDefined.push($newBinds[ii]);
		} else {
			$defined.push($newBinds[ii]);
		}
	}
	return $defined.length > 0;
}

function _extractSections($items, $sections) {
	$sections = $sections || [];
	if ($items) {
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			if ($item.$category == "section") {
				if ($item.$layout && $item.$layout.$items && $item.$layout.$items.length && $item.$layout.$items[0].$category != "section") {
					$sections.push($item);
					$item.$binds = _extractBinds($item.$layout).map(function($item) {
						return $item.$bind;
					});
					continue;
				}
			}
			var $chidItems = $item.$items;
			if (!$chidItems) {
				$chidItems = $item.$layout && $item.$layout.$items;
			}
			if ($chidItems) {
				$sections = _extractSections($chidItems, $sections);
			}
		}
	}
	return $sections;
}

function _extractBinds($layout, $binds) {
	if (!$binds) {
		$binds = [];
	}
	if ($layout.$items) {
		for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
			var $item = $layout.$items[ii];
			if ($item.$bind && $item.$category != "link") {
				$binds.push($item);
			} else {
				if ($item.$layout || $item.$items) {
					$binds = _extractBinds($item.$layout || $item, $binds);
				}
			}
		}
	}
	return $binds;
}

function _applyNewMenuStyle($layout) {
	if ($layout && $layout.$items) {
		for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
			var $item = $layout.$items[ii];
			if ($item.$bind) {
				$item.$category = "link";
				$item.$skin = "s-nav-menu-link";
			} else {
				if ($item.$layout || $item.$items) {
					_applyNewMenuStyle($item.$layout || $item);
				}
			}
		}
	}
}

function _createNewMenuLayout(page, $vignette, $linkBinds) {
	var $layout = {
		$layoutType: "row",
		$widths: "33,33,33",
		$items: [{
			$layoutType: "stack",
			$items: []
		}, {
			$layoutType: "stack",
			$items: []
		}, {
			$layoutType: "stack",
			$items: []
		}]
	};
	var index = 0;
	for (var ii = 0, jj = $linkBinds.length; ii < jj; ii++) {
		var $linkBind = $linkBinds[ii];
		var $link = page.$prototype.$links[$linkBind];
		if ($link.$vignettes && $link.$vignettes.indexOf($vignette) >= 0) {
			$layout.$items[index++].$items.push({
				$category: "link",
				$skin: "s-nav-menu-link",
				$bind: $linkBind
			});
			if (index == 3) {
				index = 0;
			}
		}
	}
	return $layout;
}

function _addDefaultMenus(page, $vignette) {
	var $linkBinds = Object.keys(page.$prototype.$links);
	var $vigLinks = [];
	for (var ii = 0, jj = $linkBinds.length; ii < jj; ii++) {
		var $linkBind = $linkBinds[ii];
		var $link = page.$prototype.$links[$linkBind];
		if ($link.$vignettes && $link.$vignettes.indexOf($vignette) >= 0) {
			$vigLinks.push($linkBind);
		}
	}
	var $layout;
	if (page.$oldDashboardItem) {
		//find
		var test = JSON.stringify(page.$oldDashboardItem);
		if (!page.$oldDashboardSections) {
			page.$oldDashboardSections = _extractSections(page.$oldDashboardItem.$layout && page.$oldDashboardItem.$layout.$items);
		}
		$notDefined = [];
		for (var ii = 0, jj = page.$oldDashboardSections.length; ii < jj; ii++) {
			var $old = page.$oldDashboardSections[ii];
			if (!$old.found) {
				var $notDefined = [];
				if ($old.$binds && _isSectionMenus($old.$binds, $vigLinks, $notDefined)) {
					$layout = $old.$layout;
					$old.found = true;
					_applyNewMenuStyle($layout);
					if ($notDefined.length) {
						$layout.$items.push(_createNewMenuLayout(page, $vignette, $notDefined));
					}
					break;
				}
			}
		}
	}
	if (!$layout) {
		$layout = _createNewMenuLayout(page, $vignette, $vigLinks);
	}
	return $layout;
}


function _applyBinds($layout, $binds) {
	if ($layout.$items) {
		for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
			var $item = $layout.$items[ii];
			if ($item.$bind && $binds[$item.$bind]) {
				$item = $binds[$item.$bind];
			} else {
				if ($item.$layout || $item.$items) {
					$binds = _applyBinds($item.$layout || $item, $binds);
				}
			}
		}
	}
	return $binds;
}

function _addDefaultField(page, $bind, $field) {
	return ($field.$format == "$menu") ? {
		$category: "section",
		$title: $field.$title,
		$layout: {
			$items: [{
				$category: "menus",
				$vignette: $bind,
				$layout: _addDefaultMenus(page, $bind)
			}]
		}
	} : {
		$bind: $bind
	};
}

function DashboardPage() {}

exports.DashboardPage = helpers.defineClass(DashboardPage, DesktopPage, {
	ensureDefaultArticle: function($article, $prototype) {
		if (!$article) {
			$article = {};
		}
		if (!$article.$layout) {
			$article.$layout = {};
		}
		if (!$article.$layout.$items) {
			var $items = [];
			var $itemFields = [];
			var binds = Object.keys($prototype.$properties);
			for (var ii = 0, jj = binds.length; ii < jj; ii++) {
				var $bind = binds[ii];
				var $field = $prototype.$properties[$bind];
				if ($field && !$field.$isExcluded && !$field.$isTOC) {
					$itemFields.push(_addDefaultField(this, $bind, $prototype.$properties[$bind]));
				}
			}
			$article.$layout.$items = $itemFields;
		}
		return $article;
	},
	loadBox: function(initData) {
		this.isAutoInsertFieldDisabled = true;
		this.mainPageDesignerAccess = "disabled";
		this.isDashBoard = true;
		this.$skin = "s-ldp";
		this.$skinMenu = "s-ldp-nav";
		this.$defaultSkinBlock = "s-ldp-h2";
		this.$defaultSkinSection = "s-ldp-h1";
		this._defaultTitle = syra_local.ldpTitle;
		var $binds = Object.keys(this.$prototype.$properties);
		if (this.$item) {
			this.$oldDashboardItem = helpers.object.clone(this.$item);
		}
		var $definedBinds = (this.$item && this.$item.$layout) ? _extractBinds(this.$item.$layout) : null;
		if (!this.$prototype.$isDefaultDashboard) {
			this.$item = helpers.object.clone(this.ensureDefaultArticle(this.$prototype.$article, this.$prototype), true);
		}
		if ($definedBinds && $definedBinds.length) {
			_applyBinds(this.$item.$layout, $definedBinds);
		}
		this.$oldDashboardSections = this.$oldDashboardItem = null;
		DesktopPage.prototype.loadBox.call(this, initData);
	}
});