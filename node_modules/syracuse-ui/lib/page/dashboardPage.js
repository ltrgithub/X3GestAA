"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('./desktopPage').DesktopPage;
var importHelper = require('./utility/importHelper');

function DashboardPage() {}

exports.DashboardPage = helpers.defineClass(DashboardPage, DesktopPage, {
	dispose: function() {
		this.registeredVignettes = null;
		DesktopPage.prototype.dispose.call(this);
	},
	registerVignette: function(vignette, $bind) {
		this.registeredVignettes[$bind || vignette.$item.$bind] = vignette;
	},
	_extractSections: function($items, $sections) {
		$sections = $sections || [];
		if ($items) {
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				var $item = $items[ii];
				if ($item.$category == "section") {
					if ($item.$layout && $item.$layout.$items && $item.$layout.$items.length && $item.$layout.$items[0].$category != "section") {
						$sections.push($item);
						$item.$binds = this.extractBinds($item.$layout).map(function($item) {
							return $item.$bind;
						});
						continue;
					}
				}
				var $chidItems = $item.$items;
				if (!$chidItems) {
					$chidItems = $item.$layout && $item.$layout.$items;
				}
				if ($chidItems) {
					$sections = this._extractSections($chidItems, $sections);
				}
			}
		}
		return $sections;
	},
	isSectionMenus: function($oldBinds, $newBinds, $notDefined) {
		var $defined = [];
		for (var ii = 0, jj = $newBinds.length; ii < jj; ii++) {
			if ($oldBinds.indexOf($newBinds[ii]) < 0) {
				$notDefined.push($newBinds[ii]);
			} else {
				$defined.push($newBinds[ii]);
			}
		}
		return $defined.length > 0;
	},
	applyNewMenuStyle: function($layout) {
		if ($layout && $layout.$items) {
			for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
				var $item = $layout.$items[ii];
				if ($item.$bind) {
					$item.$category = "link";
					$item.$skin = "s-nav-menu-link";
				} else {
					if ($item.$layout || $item.$items) {
						this.applyNewMenuStyle($item.$layout || $item);
					}
				}
			}
		}
	},
	createNewMenuLayout: function($vignette, $linkBinds) {
		var $layout = {
			$layoutType: "row",
			$widths: "33,33,33",
			$items: [{
				$layoutType: "stack",
				$items: []
			}, {
				$layoutType: "stack",
				$items: []
			}, {
				$layoutType: "stack",
				$items: []
			}]
		};
		var index = 0;
		for (var ii = 0, jj = $linkBinds.length; ii < jj; ii++) {
			var $linkBind = $linkBinds[ii];
			var $link = this.$prototype.$links[$linkBind];
			if ($link.$vignettes && $link.$vignettes.indexOf($vignette) >= 0) {
				$layout.$items[index++].$items.push({
					$category: "link",
					$skin: "s-nav-menu-link",
					$bind: $linkBind
				});
				if (index == 3) {
					index = 0;
				}
			}
		}
		return $layout;
	},
	_addDefaultMenus: function($vignette) {
		var $linkBinds = Object.keys(this.$prototype.$links);
		var $vigLinks = [];
		for (var ii = 0, jj = $linkBinds.length; ii < jj; ii++) {
			var $linkBind = $linkBinds[ii];
			var $link = this.$prototype.$links[$linkBind];
			if ($link.$vignettes && $link.$vignettes.indexOf($vignette) >= 0) {
				$vigLinks.push($linkBind);
			}
		}
		var $layout;
		if (this.$oldDashboardItem) {
			//find
			var test = JSON.stringify(this.$oldDashboardItem);
			if (!this.$oldDashboardSections) {
				this.$oldDashboardSections = this._extractSections(this.$oldDashboardItem.$layout && this.$oldDashboardItem.$layout.$items);
			}
			$notDefined = [];
			for (var ii = 0, jj = this.$oldDashboardSections.length; ii < jj; ii++) {
				var $old = this.$oldDashboardSections[ii];
				if (!$old.found) {
					var $notDefined = [];
					if ($old.$binds && this.isSectionMenus($old.$binds, $vigLinks, $notDefined)) {
						$layout = $old.$layout;
						$old.found = true;
						this.applyNewMenuStyle($layout);
						if ($notDefined.length) {
							$layout.$items.push(this.createNewMenuLayout($vignette, $notDefined));
						}
						break;
					}
				}
			}
		}
		if (!$layout) {
			$layout = this.createNewMenuLayout($vignette, $vigLinks);
		}
		return $layout;
	},
	addDefaultField: function($bind, $field) {
		return ($field.$format == "$menu") ? {
			$category: "section",
			$title: $field.$title,
			$layout: {
				$items: [{
					$category: "menus",
					$vignette: $bind,
					$layout: this._addDefaultMenus($bind)
				}]
			}
		} : {
			$bind: $bind
		};
	},
	createDefaultArticle: function($article, $prototype) {
		if (!$article) {
			$article = {};
		}
		if (!$article.$layout) {
			$article.$layout = {};
		}
		if (!$article.$layout.$items) {
			var $items = [];
			var $itemFields = [];
			var binds = Object.keys($prototype.$properties);
			for (var ii = 0, jj = binds.length; ii < jj; ii++) {
				var $bind = binds[ii];
				var $field = $prototype.$properties[$bind];
				if ($field && !$field.$isExcluded && !$field.$isTOC) {
					$itemFields.push(this.addDefaultField($bind, $prototype.$properties[$bind]));
				}
			}
			$article.$layout.$items = $itemFields;
		}
		return $article;
	},
	ensureDefaultArticle: function($article, $prototype) {
		if ($article && $article.$importHint) {
			importHelper.importArticle($article, $prototype, this);
		} else {
			$article = this.createDefaultArticle($article, $prototype);
		}
		return $article;
	},
	isTOCMenu: function($menu) {
		if ($menu.$vignettes) {
			for (var ii = 0, jj = $menu.$vignettes.length; ii < jj; ii++) {
				var $vignette = this.$prototype.$properties[$menu.$vignettes[ii]];
				if ($vignette && $vignette.$isTOC) {
					return true;
				}
			}
		}
		return false;
	},
	reloadLayout: function($item) {
		this.registeredVignettes = {};
		DesktopPage.prototype.reloadLayout.call(this, $item);
	},
	extractBinds: function($layout, $binds) {
		if (!$binds) {
			$binds = [];
		}
		if ($layout.$items) {
			for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
				var $item = $layout.$items[ii];
				if ($item.$bind && $item.$category != "link") {
					$binds.push($item);
				} else {
					if ($item.$layout || $item.$items) {
						$binds = this.extractBinds($item.$layout || $item, $binds);
					}
				}
			}
		}
		return $binds;
	},
	_applyBinds: function($layout, $binds) {
		if ($layout.$items) {
			for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
				var $item = $layout.$items[ii];
				if ($item.$bind && $binds[$item.$bind]) {
					$item = $binds[$item.$bind];
				} else {
					if ($item.$layout || $item.$items) {
						$binds = this._applyBinds($item.$layout || $item, $binds);
					}
				}
			}
		}
		return $binds;
	},
	applyNewNavigationLayout: function() {
		var $binds = Object.keys(this.$prototype.$properties);
		if (this.$item) {
			this.$oldDashboardItem = helpers.object.clone(this.$item);
		}

		var $definedBinds = (this.$item && this.$item.$layout) ? this.extractBinds(this.$item.$layout) : null;
		if (!this.$prototype.$isDefaultDashboard) {
			this.$item = helpers.object.clone(this.ensureDefaultArticle(this.$prototype.$article, this.$prototype), true);
		}
		if ($definedBinds && $definedBinds.length) {
			this._applyBinds(this.$item.$layout, $definedBinds);
		}
		this.$oldDashboardSections = this.$oldDashboardItem = null;

	},
	loadBox: function(initData) {
		this.isAutoInsertFieldDisabled = true;
		this.mainPageDesignerAccess = "disabled";
		this.registeredVignettes = {};
		this.isDashBoard = true;
		this.$skin = "s-ldp";
		this.$skinMenu = "s-ldp-nav";
		this.$defaultSkinBlock = "s-ldp-h2";
		this.$defaultSkinSection = "s-ldp-h1";
		this._defaultTitle = syra_local.ldpTitle;
		this.applyNewNavigationLayout();
		DesktopPage.prototype.loadBox.call(this, initData);
		// highlight Page Link;
		if (this.openerUrlSegments) {
			var representationParam = "representation=" + this.openerUrlSegments.params.representation;
			if (this.$menus) {
				var $binds = Object.keys(this.$menus);
				var currentMenu;
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var $menu = this.$menus[$binds[ii]];
					if ($menu.$url && $menu.$url.indexOf(representationParam) >= 0) {
						currentMenu = this.menuItems[$bind] && this.menuItems[$bind][0];
						break;
					}
				}
				if (currentMenu) {
					syra_site.dom.toggleClass(currentMenu.domItem, "s-cst-sty-main", true);
					syra_site.dom.toggleClass(currentMenu.layoutSlot, "s-cst-sty-main", true);
				}
			}
		}
	}
});