"use strict";
var helpers = require('syracuse-core/lib/helpers');
//var LandingPageDesigner = require("syracuse-ui/lib/authoring/landingPage/landingPageDesigner").LandingPageDesigner;
var DesktopPage = require('./desktopPage').DesktopPage;
var ModuleList = require('./navigation/moduleList').ModuleList;

function NavigationPage() {}

exports.NavigationPage = helpers.defineClass(NavigationPage, DesktopPage, {
	designItem: function(open) {
		//      document.site.designItem(open, this, LandingPageDesigner);
	},
	appendHeader: function() {
		DesktopPage.prototype.appendHeader.call(this);
		this.refreshLink = document.createElement("a");
		this.refreshLink.className = "s-dash-refresh";
		this.refreshLink.title = this.localize.landingPageRefresh;
		this.refreshLink.setAttribute("data-s-picker", "refresh");
		this.designerOpenerLink = document.createElement("a");
		this.designerOpenerLink.className = "s-dash-designer-picker";
		this.designerOpenerLink.setAttribute("data-s-picker", "openDesigner");
		this.designerOpenerLink.title = this.localize.landingPageOpenDesigner;
		this.designerOpenerLink.style.display = this.refreshLink.style.display = "none";
		this.headerCoreRight.appendChild(this.refreshLink);
		this.headerCoreRight.appendChild(this.designerOpenerLink);
	},
	onClickPicker: function(picker, event) {
		if (picker == this.refreshLink || picker == this.designerOpenerLink) {
			var items = this.layoutContent.getFields();
			if (picker == this.refreshLink) {
				for (var ii = 0, jj = items.length; ii < jj; ii++) {
					if (items[ii].doPicker) {
						items[ii].doPicker("refresh");
					}
				}
			} else {
				this.designer.toggleDesigner();
			}
			event.stopPropagation();
			return false;
		}
		return true;
	},
	ensureDefaultArticle: function($article, $prototype) {
		return {
			$layout: {
				$items: [{
					$bind: "modules"
				}]
			}
		};
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "modules":
				return new ModuleList();
		}
		return null;
	},
	loadBox: function(initData, $initDiagnoses) {
		this.isNavigationPage = true;
		this.$skin = this.$item.$skin || "s-dash";
		this.$skinMenu = "s-dash-nav";
		this.$defaultSkinBlock = "s-dash-h2";
		this.$defaultSkinSection = "s-dash-h1";
		this._defaultTitle = this.localize.dskpDashboardTitle;
		this.$autoFetch = false;
		var data = {};
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.loadBox.call(this, data, $initDiagnoses);
	}
});