"use strict";
var helpers = require('syracuse-core/lib/helpers');
//var LandingPageDesigner = require("syracuse-ui/lib/authoring/landingPage/landingPageDesigner").LandingPageDesigner;
var DesktopPage = require('./desktopPage').DesktopPage;
var ModuleBar = require('./navigation/module/moduleBar').ModuleBar;
var ModuleList = require('./navigation/module/moduleList').ModuleList;
var SubModuleList = require('./navigation/subModule/subModuleList').SubModuleList;
var NavigationItemList = require('./navigation/navigationItem/navigationItemList').NavigationItemList;
var NavigationMenuItem = require('./navigation/navigationItem/navigationMenuItem').NavigationMenuItem;
var NavigationMenuBlock = require('./navigation/navigationItem/navigationMenuBlock').NavigationMenuBlock;


function NavigationPage() {}

exports.NavigationPage = helpers.defineClass(NavigationPage, DesktopPage, {
	designItem: function(open) {
		//      document.site.designItem(open, this, LandingPageDesigner);
	},
	// avoir avec cristi nï¿½cessite de prendre representation url
	getDataUrl: function(article) {
		article = article || this;
		var $parsedUrl = article.parseExpression(article.dataset.$url || article.$prototype.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	notifyChangeToServer: function(sendBag, articleSender) {
		var self = this;
		articleSender = articleSender || this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.getDataUrl(articleSender);
				sendBag.$etag = articleSender.dataset.$etag;
				document.controller.sendRequest(self, {
					$location: {
						$url: self.getDataUrl(articleSender)
					},
					data: sendBag,
					method: "PUT",
					$etag: sendBag.$etag
				}, function(data, response, requestUrl) {
					if (!articleSender.disposed) {
						articleSender.applyChange(data, response, requestUrl);
					}
				});
			}
		}
	},
	appendHeader: function() {
		DesktopPage.prototype.appendHeader.call(this);
		this.designerOpenerLink = document.createElement("a");
		this.designerOpenerLink.className = "s-navpage-designer-picker";
		this.designerOpenerLink.setAttribute("data-s-picker", "openDesigner");
		this.designerOpenerLink.title = this.localize.landingPageOpenDesigner;
		this.designerOpenerLink.style.display = "none";
		this.headerCoreRight.appendChild(this.designerOpenerLink);
	},
	onClickPicker: function(picker, event) {
		if (picker == this.designerOpenerLink) {
			this.designer.toggleDesigner();
			event.stopPropagation();
			return false;
		}
		return true;
	},
	ensureDefaultArticle: function($article, $prototype) {
		return {
			$layout: {
				$items: []
			}
		};
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "modules":
				return new ModuleList();
			case "submodules":
				return new SubModuleList();
			case "items":
				return new NavigationItemList();
			case "$singleField":
				switch ($item.$variantItemKey) {
					case "menuItem":
						return new NavigationMenuItem();
					case "menuBlock":
						return new NavigationMenuBlock();
				}
				return null;
		}
		return null;
	},
	ensureDesignerOpenerVisibility: function() {
		if (document.site.pageDesignerOpener) {
			document.site.pageDesignerOpener.style.display = "none";
		}
	},
	hackPrototype: function() {
		var items = this.$prototype.$properties.modules.$item.$properties.submodules.$item.$properties.items;
		var subItems = items.$item.$variants.menuBlock.$item.$properties.items;
		subItems.$links = helpers.object.clone(items.$links, true);
		subItems.$item.$variants.menuBlock.$capabilities = "append,sort,reorder,delete";
	},
	loadBox: function(initData, $initDiagnoses) {
		this.modules = {};
		this.$isEditMode = true;
		this.isNavigationPage = true;
		this.$skin = this.$item.$skin || "s-navpage";
		this.$defaultSkinBlock = "s-navpage-h2";
		this.$defaultSkinSection = "s-navpage-h1";
		this._defaultTitle = this.localize.dskpNavigationPageTitle;
		this.$autoFetch = false;
		var data = {};
		this.hackPrototype();
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.loadBox.call(this, data, $initDiagnoses);
		if (!this.moduleBar) {
			(this.moduleBar = new ModuleBar()).load(this);
		}
	},
	onMenuClick: function(menuItem) {
		var self = this;
		if (!menuItem.$isAction) {
			switch (menuItem.$item.$bind) {
				case "$create":
				case "$edit":
					self.openDialog({
						article: menuItem.articleParent,
						$url: menuItem.$url,
						$isPageDocked: true,
						$method: menuItem.$method,
						onSave: function(menuItem, dialog) {
							dialog.options.article.notifyClientSave(dialog._content.dataset);
							dialog.close(true);
							return false;
						},
						onValidate: function(page) {
							if (page.validateFields()) {
								page.clickMenu("$save");
							}
							return false;
						},
						onClose: function(isCanceled, dispose) {
							return true;
						}
					});
					return false;
			}
		}
		return true;
	},
	_ensureMenus: function() {},
	notifyDataChange: function(field, value) {
		if (field.articleParent.isSubModuleRecord) {
			var sendBag = this.ensureSendBag(field.articleParent, field.articleParent);
			sendBag.saveDataChange(field.articleParent, field.getArticle(), field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
			this.notifyChangeToServer(sendBag, field.articleParent);
		} else {
			DesktopPage.prototype.notifyDataChange.call(this, field, value);
		}
	},
	getNavigationPath: function(navigationMenuItem) {
		var path = {
			menuItem: navigationMenuItem.currentValue.$uuid
		};
		var articleParent = navigationMenuItem.articleParent;
		while (articleParent) {
			articleParent = articleParent.articleParent;
		}
		return path;
	},
	dispose: function() {
		if (this.moduleBar) {
			this.moduleBar.dispose();
		}
		this.modules = this.moduleBar = null;
		DesktopPage.prototype.dispose.call(this);
	}

});