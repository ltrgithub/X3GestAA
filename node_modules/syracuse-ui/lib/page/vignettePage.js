"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('./desktopPage').DesktopPage;

function VignettePage() {}

exports.VignettePage = helpers.defineClass(VignettePage, DesktopPage, {
	loadBox: function(initData, $initDiagnoses) {
		this.menuBarPreferenceKey = "vignette-menubar";
		this.defaultItemsPerPage = 10;
		this.$skin = this.$item.$skin || "s-vignette";
		this.$skinMenuBox = "s-page-menus-box";
		this.$defaultSkinBlock = "s-h2";
		this.$defaultSkinSection = "s-h2";
		this.$pageCategory = "vignette";
		this.isVignettePage = true;
		this.$skinMainAction = "s-vignette-main-link";
		this._defaultTitle = this.localize.dskpVignetteTitle;
		this.$item.$isTitleHidden = true;
		DesktopPage.prototype.loadBox.call(this, initData, $initDiagnoses);
	},
	ensureDesignerOpenerVisibility: function() {
		document.site.enablePageDesign(false);
	},
	onShowAdvancedFields: function() {
		if (this.vignetteField) {
			this.vignetteField.showAdvancedFields(this.$isAdvancedFieldsVisible);
		}
	},
	toggleAdvancedFieldsMode: function(enable, designing) {
		if (enable && this.$isAdvancedModeEnabled) {
			return;
		}
		this.$isAdvancedModeEnabled = enable;
		this.vignetteField.toggleAdvancedFieldsMode(enable, designing);
		this.onShowAdvancedFields();
		if (!enable) {
			delete this.$isAdvancedFieldsVisible;
		}
	},
	_ensureMenus: function() {
		if (this.$item.$menus) {
			if (!Array.isArray(this.$item.$menus)) {
				var $items = [];
				this.getDefinedFieldList(this.$item.$menus.$layout.$items, $items);
				this.$item.$menus = $items;
			}
		}
		this.$item.$menus = this.$item.$menus || [];
		for (var ii = 0, jj = this.$item.$menus.length; ii < jj; ii++) {
			var $menus = this.$item.$menus[ii];
			$menus.$isMenuPage = true;
			$menus.$isAuthoringEnabled = false;
			$menus.$category = "menus";
			if ($menus.$isBoxCollapsable === undefined) {
				$menus.$isBoxCollapsable = true;
			}
			$menus.$skin = "s-vignette-menus";
		}
		if (this.$prototype && this.$prototype.$properties && this.$prototype.$properties.process) {
			DesktopPage.prototype._ensureMenus.call(this);
		} else {
			if (this.vignetteField) {
				if (!this._slot) {
					if (this.vignetteField.pickers && this.vignetteField.pickers.items.menus) {
						document.site.emptyDom(this.vignetteField.pickers.items.menus);
					}
					this.vignetteField.applyDesignMetaData({
						$hasMenus: true
					});
				}
				this.setArticleId(this.vignetteField.pickers.items.menus);
				this.page.loadNewItem(this.vignetteField.pickers.items.menus, {
					$isMenusBag: true,
					$category: "menus",
					$noText: true,
					$title: this.localize.dskpActions,
					$isTitlePicker: true,
					$isBoxCollapsable: true,
					$isPopupContent: true,
					$clientId: this.id + "-menu-picker",
					$skin: "s-vignette-menus-bar",
					$itemSkin: "s-vignette-menus-link",
					$layout: {
						$items: this.$item.$menus
					}
				}, this);
			}
		}
		// in case of vignette for search vignette page
		if (this.vignetteField && this.vignetteField.page && this.vignetteField.page.$pageCategory == 'landingVignetteSelect') {
			DesktopPage.prototype._ensureMenus.call(this);
			if (this.menuBar._bar) {
				this.loadNewItem(this.menuBar._bar, {
					$category: "searchFacets",
					$prototype: {},
					$bind: "$searchFacets",
					$isVignetteSearchFacet: true
				});
			}

		}
	},
	fetch: function(options, callback, error) {
		// handling search page vignette field (fk)
		if (this.vignetteField && this.vignetteField.page && this.vignetteField.page.$pageCategory == 'search' && this.vignetteField.page.dataset && Object.keys(this.vignetteField.page.dataset).length > 0) {
			this.vignetteField.page.fetch(options);
		} else {
			if (this.vignetteField && this.vignetteField.page && this.vignetteField.page.$pageCategory == 'landingVignetteSelect') {
				this.vignetteField && this.vignetteField.page.fetch(options);
			} else {
				if (options && options.isPageLoading) {
					(options.params = options.params || {}).count = this.defaultItemsPerPage;
					delete options.isPageLoading;
				}
				DesktopPage.prototype.fetch.call(this, options, callback, error);
			}
		}
	},
	onMenuClick: function(menu) {
		if (this.vignetteField && this.vignetteField.page && this.vignetteField.page.$pageCategory == 'searchVignette') {
			return this.vignetteField.page.onMenuClick(menu);
		} else {
			return DesktopPage.prototype.onMenuClick.call(this, menu);
		}
	},
	updateFilterState: function(options) {
		if (this.vignetteField && this.vignetteField.page && this.vignetteField.page.$pageCategory == 'searchVignette') {
			this.vignetteField.page.updateFilterState(options);
		}
	},
	onWindowResize: function() {
		if (this.isPageLoaded) {
			if (this.menuBar) {
				this.menuBar.onWindowResize();
			}
		}
	}
});