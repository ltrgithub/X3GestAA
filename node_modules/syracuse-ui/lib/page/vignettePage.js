"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;

function VignettePage() {}

exports.VignettePage = helpers.defineClass(VignettePage, DesktopPage, {
	loadBox: function(initData) {
		this.isSiteRegisterDisabled = true;
		this.mainPageDesignerAccess = "unknow";
		this.$skin = this.$item.$skin || "s-vignette";
		this.$defaultSkinBlock = "s-h2";
		this.$defaultSkinSection = "s-h2";
		this.$pageCategory = "vignette";
		this.isVignettePage = true;
		this.$skinMainAction = "s-vignette-main-link";
		this._defaultTitle = syra_local.dskpVignetteTitle;
		this.$isTitleHidden = true;
		DesktopPage.prototype.loadBox.call(this, initData);
	},
	endChange: function() {
		DesktopPage.prototype.endChange.call(this);
		if (this.hasProcessus()) {
			var $location = this.vignetteField.$field.$altLocation || this.vignetteField.$field.$location;
			if ($location && $location.$bind) {
				var menuItems = this.menuItems[$location.$bind];
				if (menuItems && menuItems.length) {
					syra_dom.toggleClass(menuItems[0].domItem, "s-highlight", true);
				}
			}
		}
	},
	hasProcessus: function() {
		if (this._hasProcesus === undefined) {
			this._hasProcesus = false;
			var $fields = this.$prototype && this.$prototype.$properties;
			if ($fields) {
				var keys = Object.keys($fields);
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					var $field = $fields[keys[ii]];
					if ($field.$type == "application/x-process") {
						this._hasProcesus = true;
						break;
					}
				}
			}
		}
		return this._hasProcesus;
	},
	onMenuClick: function(menuItem) {
		var persisLocation = this.hasProcessus();
		if (this.hasProcessus()) {
			persisLocation = this.isInMenuBar(menuItem);
			if (!menuItem.$target) {
				menuItem.$target = "_self";
			}
		}
		if (!persisLocation) {
			if (!(menuItem.$sourceBind && menuItem.$sourceBind.indexOf("$drill") >= 0)) {
				if (!menuItem.$target) {
					menuItem.$target = "main";
				}
			}
			persisLocation = !((menuItem.$target && menuItem.$target != "_self") ||
				(menuItem.$method && menuItem.$method != "GET"));
		}
		if (persisLocation) {
			var ldpRecord = this.vignetteField.page.ldpRecord;
			ldpRecord && ldpRecord.ldp_saveLocation(this.vignetteField, menuItem);
		}
		return true;
	},
	ensureMenuBar: function() {
		if (this.$item.$menus) {
			if (!Array.isArray(this.$item.$menus)) {
				this.$item.$menus = syra_pageBuilder.getDefinedFieldList(this.$item.$menus.$layout.$items);
			}
		}
		this.$item.$menus = this.$item.$menus || [];
		for (var ii = 0, jj = this.$item.$menus.length; ii < jj; ii++) {
			var $menus = this.$item.$menus[ii];
			$menus.$category = "menus";
			if ($menus.$isBoxCollapsable === undefined) {
				$menus.$isBoxCollapsable = true;
			}
			$menus.$skin = "s-vignette-menus";
		}
		if (this.$prototype && this.$prototype.$properties && this.$prototype.$properties.process) {
			DesktopPage.prototype.ensureMenuBar.call(this);
		} else {
			this.vignetteField && this.vignetteField.toggleMenuButton(true);
		}
	},
	fetch: function(options, callback, error) {
		// handling search page vignette field (fk)
		if (this.vignetteField && this.vignetteField.page && this.vignetteField.page.$pageCategory == 'search' && this.vignetteField.page.dataset && Object.keys(this.vignetteField.page.dataset).length > 0) {
			this.vignetteField.page.fetch(options);
		} else {
			DesktopPage.prototype.fetch.call(this, options, callback, error);
		}
	},
	getMasterPage: function() {
		//this.masterPage temp for soap to reuse with inlinePage
		return this.masterPage || this.vignetteField.page;
	}
});