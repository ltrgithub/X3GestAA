"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('./desktopPage').DesktopPage;

function VignettePage() {}

exports.VignettePage = helpers.defineClass(VignettePage, DesktopPage, {
	loadBox: function(initData, $initDiagnoses) {
		this.$skin = this.$item.$skin || "s-vignette";
		this.$skinMenuBox = "s-page-menus-box";
		this.$defaultSkinBlock = "s-h2";
		this.$defaultSkinSection = "s-h2";
		this.$pageCategory = "vignette";
		this.isVignettePage = true;
		this.$skinMainAction = "s-vignette-main-link";
		this._defaultTitle = this.localize.dskpVignetteTitle;
		this.$item.$isTitleHidden = true;
		DesktopPage.prototype.loadBox.call(this, initData, $initDiagnoses);
	},
	onShowAdvancedFields: function() {
		if (this.vignetteField) {
			this.vignetteField.showAdvancedFields(this.$isAdvancedFieldsVisible);
		}
	},
	toggleAdvancedFieldsMode: function(enable, onAuthoring) {
		if (enable && this.$isAdvancedModeEnabled) {
			return;
		}
		this.$isAdvancedModeEnabled = enable;
		this.vignetteField.toggleAdvancedFieldsMode(enable, onAuthoring);
		this.onShowAdvancedFields();
		if (!enable) {
			delete this.$isAdvancedFieldsVisible;
		}
	},
	_ensureMenus: function() {
		if (this.$item.$menus) {
			if (!Array.isArray(this.$item.$menus)) {
				var $items = [];
				this.getDefinedFieldList(this.$item.$menus.$layout.$items, $items);
				this.$item.$menus = $items;
			}
		}
		this.$item.$menus = this.$item.$menus || [];
		for (var ii = 0, jj = this.$item.$menus.length; ii < jj; ii++) {
			var $menus = this.$item.$menus[ii];
			$menus.$isMenuPage = true;
			$menus.$isAuthoringEnabled = false;
			$menus.$category = "menus";
			if ($menus.$isBoxCollapsable === undefined) {
				$menus.$isBoxCollapsable = true;
			}
			$menus.$skin = "s-vignette-menus";
		}
		if (this.$prototype && this.$prototype.$properties && this.$prototype.$properties.process) {
			DesktopPage.prototype._ensureMenus.call(this);
		} else {
			if (this.vignetteField) {
				if (!this._slot) {
					if (this.vignetteField._pickers && this.vignetteField._pickers.items.menus) {
						document.site.emptyDom(this.vignetteField._pickers.items.menus);
					}
					this.vignetteField.applyDesignMetaData({
						$hasMenus: true
					});
				}
				this.vignetteField._pickers.items.menus.setAttribute("data-s-article", this.id);
				this.page.loadNewItem(this.vignetteField._pickers.items.menus, {
					$isMenusBag: true,
					$category: "menus",
					$noText: true,
					$title: this.localize.dskpActions,
					$isTitlePicker: true,
					$isBoxCollapsable: true,
					$isPopupContent: true,
					$id: this.id + "-menu-picker",
					$skin: "s-vignette-menus-bar",
					$itemSkin: "s-vignette-menus-link",
					$layout: {
						$items: this.$item.$menus
					}
				}, this);
			}
		}

	},
	onWindowResize: function() {
		if (this._isPageLoaded) {
			if (this.menuBar) {
				this.menuBar.onWindowResize();
			}
		}
	}
});