"use strict";
var helpers = require('syracuse-core/lib/helpers');
var notifyHelper = require("syracuse-ui/lib/page/delta/notifyHelper");
var Article = require('syracuse-ui/lib/article/article').Article;
var Layout = require("syracuse-ui/lib/article/layouts/layout").Layout;
var SendBag = require('./delta/sendBag').SendBag;
var DeltaManager = require('./delta/deltaManager').DeltaManager;
var LayoutValidator = require("syracuse-ui/lib/article/layouts/layoutValidator").LayoutValidator;

var _$mainActions = {
	$cube: "$create",
	$query: "$create",
	$details: "$edit",
	$edit: "$save",
	$request: "$invoke"
};
/*
 function _scrollToAnim($$area, action, startPos, targetPos){
 var start = (new Date()).getTime();
 var end = start + 500;
 var interval = setInterval(function(){
 var now = (new Date()).getTime(), delta = (now > end) ? 1 : (now - start) / 500;
 var value = (startPos + (targetPos - startPos) * ((-Math.cos(delta * Math.PI) / 2) + 0.5)) >> 0;
 console.log("start " + start + " " + value);
 $$area[0][action] = value;
 if (now > end) {
 clearInterval(interval);
 }
 }, 10);
 }*/
function RawPage() {}

exports.RawPage = helpers.defineClass(RawPage, Article, {
	scrollToItem: function(item, $$area, isDomItem) {
		if (item == this) {
			if (this.scrollview) {
				this.scrollview.scrollTop = this.scrollview.scrollLeft = "0px";
			}
		} else {
			var target;
			$$area = $$area || this.$$scrollview || document.site.$$body;
			if (isDomItem) {
				target = item;
			} else {
				var parent = item;
				while (parent) {
					if (parent.tabTitle && !parent.$item.$opened) {
						parent.openBox(true);
					}
					parent = parent.boxParent;
				}
				if (item || item.tabTitle || item.$$item) {
					target = item.tabTitle || item.$$item[0];
				}
			}
			var area = $$area[0];
			var offsetTarget = $(target).offset();
			var offsetArea = $$area.offset();
			offsetTarget.top -= offsetArea.top;
			offsetTarget.left -= offsetArea.left;
			if ((area.scrollHeight - area.clientHeight) > 0) {
				if (offsetTarget.top < 0) {
					area.scrollTop = Math.max(offsetTarget.top + (Math.max(area.scrollTop - 20, 0)), 0);
				} else {
					if ((offsetTarget.top + target.offsetHeight) > area.clientHeight) {
						var newTop = offsetTarget.top - area.clientHeight;
						var diff = (target.offsetHeight - area.clientHeight);
						if (diff > 0) {
							newTop += (area.clientHeight - 20);
						} else {
							newTop += target.offsetHeight;
						}
						area.scrollTop += (newTop + 20);
					}
				}
			}
			if ((area.scrollWidth - area.clientWidth) > 0) {
				if (offsetTarget.left < 0) {
					area.scrollLeft = Math.max(offsetTarget.left + (Math.max(area.scrollLeft - 20, 0)), 0);
				} else {
					if (offsetTarget.left > area.clientWidth) {
						var newLeft = offsetTarget.left - area.clientWidth;
						var diff = (target.offsetWidth - area.clientWidth);
						if (diff > 0) {
							newLeft += (area.clientWidth - 20);
						} else {
							newLeft += target.offsetWidth;
						}
						area.scrollLeft += (newLeft + 20);
					}
				}
			}
		}
	},
	_createBoxTitle: function() {
		this.domTitle = document.createElement("div");
		return Article.prototype._createBoxTitle.call(this);
	},
	initializeNewItem: function(item, $item, boxParent) {
		item.page = this;
		this.layoutValidator = new LayoutValidator();
		if ($item) {
			item.$item = $item;
			if (!item.id) {
				item.id = $item.$id;
			}
		}
		if (!item.id) {
			item.id = this.id + "-" + (++this._childItemOffset);
		}
		if (boxParent) {
			item.boxParent = boxParent;
			(item.articleParent = boxParent.getArticle()).idMap[item.id] = item;
		}
		return item;
	},
	createNewItem: function($item, boxParent, newItem) {
		var item = newItem;
		if ($item.$items && !$item.$layoutType && !$item.$bind && !$item.$category) {
			$item.$layoutType = "stack";
		}
		if ($item.$layoutType) {
			item = new Layout();
			item.create($item, boxParent);
		} else {
			var $category = $item.$category;
			if (!$category) {
				$category = $item.$bind ? "field" : "section";
			}
			if (!item) {
				item = this._widgetCategories[$category].create($item, boxParent);
			}
			if (item) {
				this.initializeNewItem(item, $item, boxParent);
			}
		}
		return item;
	},
	loadNewItem: function(slot, $item, boxParent, initData) {
		var item = this.createNewItem($item, boxParent || this);
		if (item) {
			item.layoutSlot = slot;
			item.loadBox(initData);
		}
		return item;
	},
	ensureDeltaManager: function() {
		if (!this.deltaManager) {
			this.deltaManager = new DeltaManager();
			this.deltaManager.page = this;
		}
		return this.deltaManager;
	},
	dispose: function() {
		if (!this._unregisterResizer) {
			document.site.removeResizeListener(this);
		}
		if (this.deltaManager) {
			delete this.deltaManager.page;
			delete this.deltaManager;
		}
		this._menusPager = this.authoringPage = null;
		Article.prototype.dispose.call(this);
		this.layoutValidator = this._widgetCategories = this.vignetteField = null;
	},
	applyChange: function(newData) {
		if (!this.disposed && this.dataset) {
			if (newData && newData.$isPartialDelta) {
				this.$isPartialDelta = true;
				//delete newData.$isPartialDelta;
			}
			this.ensureDeltaManager().applyObjectDelta(this.dataset, newData);
			if (this.isPageSpyed) {
				document.site.spyGateway.spyDataset(this.dataset, newData);
			}
			Article.prototype.applyChange.call(this, newData);
			if (this.dialogWrapper) {
				this.dialogWrapper.onWindowResize();
			}
			delete this.$isPartialDelta;
		}
	},
	ensureSendBag: function(article) {
		var parent = article || this;
		if (parent.sendBag && this.dataset.$etag != parent.sendBag.$etag) {
			delete parent.sendBag;
		}
		if (!parent.sendBag) {
			parent.sendBag = new SendBag();
			parent.sendBag.$etag = this.dataset.$etag = this.dataset.$etag || 1;
			if (parent.isRecordDataset) {
				parent.sendBag.dataRecords = [];
			}

		}
		return parent.sendBag;
	},
	_initializePage: function() {
		this.page = this;
		this._widgetCategories = document.site.siteOptions.widgetsLibrary.categories;
		this._childItemOffset = this._childItemOffset || 1; //initialize for site
		if (!this.id) {
			this.id = document.site._childPageOffset++;
		}
	},
	loadBox: function(initData, $initDiagnoses) {
		this._initializePage();
		if (!this._unregisterResizer) {
			document.site.addResizeListener(this);
		}
		this.$skin = this.$item.$skin || this.$skin || "s-page";
		this.$authoringLevel = "article";
		this.externalAdapter = this.$item.externalAdapter || document.site.externalAdapter;
		delete this.$item.externalAdapter;
		Article.prototype.loadBox.call(this, initData, $initDiagnoses);
		if ($initDiagnoses) {
			this.showDiagnoses({
				$diagnoses: $initDiagnoses
			});
		}
		if (this.$autoFetch = this.$autoFetch !== false) {
			this.fetch();
		}
	},
	getMenuItem: function($bind) {
		var bound = this.menuItems[$bind];
		return bound ? bound[0] : null;
	},
	getDefinedFieldList: function($items, $list) {
		if ($items) {
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				var $item = $items[ii];
				if ($item.$bind) {
					$list.push($item);
				} else {
					if ($item.$items) {
						this.getDefinedFieldList($item.$items, $list);
					}
					if ($item.$layout && $item.$layout.$items) {
						this.getDefinedFieldList($item.$layout.$items, $list);
					}
				}
			}
		}
	},
	getDefinedFieldsObject: function($items, $object) {
		if ($items) {
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				var $item = $items[ii];
				if ($item.$bind) {
					$object[$item.$bind] = $item;
				} else {
					if ($item.$items) {
						this.getDefinedFieldsObject($item.$items, $object);
					}
					if ($item.$layout && $item.$layout.$items) {
						this.getDefinedFieldsObject($item.$layout.$items, $object);
					}
				}
			}
		}
	},
	appendArticleMenus: function(slot) {
		if (!slot) {
			if (!this._slot) {
				slot = this._slot = document.createElement("div");
				this._slot.className = this.$skin + "-menubar-slot";
				this._slot.style.display = "none";
				$(this._slot).prependTo(this.$$item);
			}
		}
		this.$mainAction = _$mainActions[this.$facet];
		if (!this.$item.$menus) {
			this.$item.$menus = [{
				$skin: this.$skinMenu || "s-mn-bar-main",
				$category: "menus",
				$isBoxCollapsable: true,
				$isMenusBag: true,
				$layout: {
					$items: []
				}
			}];
			if (this.$mainAction) {
				this.$item.$menus[0].$layout.$items.push({
					$bind: this.$mainAction,
					$style: "main"
				});
			}
		} else {
			if (!Array.isArray(this.$item.$menus)) {
				var $items = [];
				this.getDefinedFieldList(this.$item.$menus.$layout.$items, $items);
				this.$item.$menus = [{
					$isMenusBag: true,
					$layout: {
						$items: $items
					}
				}];
			}
		}
		for (var ii = 0, jj = this.$item.$menus.length; ii < jj; ii++) {
			var $menus = this.$item.$menus[ii];
			$menus.$isMenuPage = true;
			$menus.$isAuthoringEnabled = false;
			$menus.$category = "menus";
			if ($menus.$isBoxCollapsable === undefined) {
				$menus.$isBoxCollapsable = true;
			}
			if ($menus.$skin === undefined) {
				$menus.$skin = this.$skinMenu || "s-mn-bar-main";
			}
		}
		return this.loadNewItem(slot, {
			$category: "section",
			$skin: this.$skinMenuBox || "s-page-menus-box",
			$layout: {
				$items: this.$item.$menus
			},

		});
	},
	onMenuDataFilled: function(menuItem) {
		if (this._slot) {
			this._slot.style.display = "";
		}
	},
	createField: function($field, $item, boxParent, $class) {
		return null;
	},
	onWindowResize: function() {

	},
	notifyActionChange: function(target, value, notifyServer) {
		notifyHelper.notifyActionChange(this, target, value, notifyServer);
	},
	notifyDataChange: function(field, value) {
		notifyHelper.notifyDataChange(this, field, value);
	},
	notifyChangeToServer: function(sendBag) {
		var self = this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.isPageSpyed) {
				document.site.spyGateway.spyNotify(sendBag);
			}
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.$prototype.$representationUrl;
				sendBag.$etag = self.dataset.$etag;
				document.controller.sendRequest(self, {
					data: sendBag,
					method: "PUT",
					$etag: sendBag.$etag
				}, function(data, response, requestUrl) {
					if (!self.disposed) {
						self.applyChange(data, response, requestUrl);
					}
				});
			}
		}
	},
	notifyChange: function($bind, value) {
		var self = this;
		var data = self.ensureSendBag();
		if (self.dataset && self.dataset.$uuid !== undefined) {
			data.$uuid = self.dataset.$uuid;
		}
		data[$bind] = value;
		data.$url = self.$prototype.$representationUrl;
		if (self.$prototype.$representationUrl) {
			data.$url = self.$prototype.$representationUrl;
			data.$etag = self.dataset.$etag;
			document.controller.sendRequest(self, {
				data: data,
				method: "PUT",
				$etag: data.$etag
			}, function(data, response, requestUrl) {
				self.applyChange(data, response, requestUrl);
			});
		} else {
			delete data.$url;
			delete data.$etag;
			self.applyChange(data);
		}
	},
	validateFields: function() {
		var isValidated;
		try {
			this.isServerNotifyDisabled = true;
			isValidated = Article.prototype.validateFields.call(this);
		} finally {
			this.isServerNotifyDisabled = false;
		}
		return isValidated;
	},
	findItemSetting: function($id, $layout) {
		var found;
		for (var ii = 0, jj = $layout.$items.length; !found && ii < jj; ii++) {
			var $item = $layout.$items[ii];
			if ($item.$id == $id) {
				return $item;
			} else {
				if ($item.$layout) {
					found = this.findItemSetting($id, $item.$layout);
				} else {
					if ($item.$layoutType) {
						found = this.findItemSetting($id, $item);
					}
				}
			}
		}
		return found;
	},
	fetch: function(options, callback, error) {
		if (options) {
			delete options.field;
		}
		document.controller.sendRequest(this, options, callback, error);
	},
	ensureDefaultArticle: function($article, $prototype) {
		if (!$article) {
			$article = {};
		}
		if (!$article.$layout) {
			$article.$layout = {};
		}
		if (!$article.$layout.$items) {
			var $items = [];
			var binds = Object.keys($prototype.$properties);
			for (var ii = 0, jj = binds.length; ii < jj; ii++) {
				$items.push({
					$bind: binds[ii]
				});
			}
			$article.$layout = {
				$items: [{
					$category: "section",
					$layout: {
						$items: [{
							$category: "section",
							$layout: {
								$items: $items
							}
						}]
					}
				}]
			};
		}
		return $article;
	}
});