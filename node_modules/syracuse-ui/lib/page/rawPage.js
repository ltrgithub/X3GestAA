"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require('syracuse-ui/lib/article/article').Article;
var Layout = require("syracuse-ui/lib/article/layouts/layout").Layout;
var SendBag = require('./delta/sendBag').SendBag;

var FieldsAutoInsert = require('syracuse-ui/lib/article/fieldsGarbage').FieldsAutoInsert;


function _setDefaultArticle($article, $prototype) {
	if (!$article.$layout.$items) {
		var $items = [];
		var binds = Object.keys($prototype.$properties);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var $field = $prototype.$properties[binds[ii]];
			if ($field && !$field.$isExcluded) {
				$items.push({
					$bind: binds[ii]
				});
			}
		}
		$article.$layout = {
			$items: [{
				$category: "section",
				$layout: {
					$items: [{
						$category: "section",
						$layout: {
							$items: $items
						}
					}]
				}
			}]
		};
	}
}

function _setQueryArticle($article, $prototype) {
	var $items = $article.$layout.$items;
	var binds = Object.keys($prototype.$properties);
	var $field, $bind;
	for (var ii = 0, jj = binds.length; ii < jj; ii++) {
		$field = $prototype.$properties[$bind = binds[ii]];
		if ($field && !$field.$isExcluded && $field.$type == "application/x-array") {
			break;
		}
		$field = null;
	}
	var $item;
	//find array				
	if ($items) {
		$items = syra_site.layoutUpdater.getItemSettings(this, $article.$layout.$items, true) || [];
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			if ($items[ii].$bind == $bind) {
				$item = helpers.object.clone($items[ii], true);
				break;
			}
		}
	}
	$article.$layout.$items = [$item || {
		$bind: $bind
	}];
}

function RawPage() {}

exports.RawPage = helpers.defineClass(RawPage, Article, {
	onExecuteMenuResponse: function(menuItem, responseData) {

	},
	setShortcutSpyerList: function(list) {
		if (list && !list.isList) {
			while (list && !list.isList) {
				list = list.articleParent;
			}
			if (!list) {
				return;
			}
		}
		this.shortcutSpyerList = list;
	},
	isActionSuccess: function(menuItem) {
		if (menuItem.$diagnoses) {
			for (var ii = 0; ii < menuItem.$diagnoses.length; ii++) {
				if (menuItem.$diagnoses[ii].$severity != "success") {
					return false;
				}
			}
		}
		return true;
	},
	onAfterActionMenuExecute: function(menuItem, $menu) {
		if (this.inlinePageHost) {
			return this.inlinePageHost.onAfterActionMenuExecute(this, menuItem, $menu);
		}
		switch (menuItem.$sourceBind) {
			case "$save":
				if (this.isActionSuccess(menuItem) && this.dialogWrapper && this.dialogWrapper.options.onServerSaved) {
					if (this.dialogWrapper.options.onServerSaved(menuItem, this.dialogWrapper) === false) {
						return false;
					}
				}
				break;
		}
		return true;
	},
	_createBoxTitle: function() {
		this.domTitle = document.createElement("div");
		return Article.prototype._createBoxTitle.call(this);
	},
	initializeNewItem: function(item, $item, boxParent) {
		item.page = this;
		if ($item) {
			item.$item = $item;
			if (!item.id) {
				item.id = $item.$clientId;
			}
		}
		if (!item.id) {
			item.id = this.id + "-" + (++this._childItemOffset);
		}
		syra_store.add(item);
		if (boxParent) {
			item.boxParent = boxParent;
			(item.articleParent = boxParent.getArticle()).idMap[item.id] = item;
			this.registerBoxField(item);
		}
		return item;
	},
	registerBoxField: function(item, check) {
		if (item.boxParent.boxChildItems && item.$item && item.$item.$bind) {
			if (check && item.boxParent.boxChildItems.indexOf(item) >= 0) {
				return;
			}
			item.boxParent.boxChildItems.push(item);
		}
	},
	createNewItem: function($item, boxParent, newItem) {
		var item = newItem;
		if ($item.$items && !$item.$layoutType && !$item.$bind && !$item.$category) {
			$item.$layoutType = "stack";
		}
		if ($item.$layoutType) {
			item = new Layout();
			item.create($item, boxParent);
		} else {
			var $category = $item.$category;
			if (!$category) {
				$category = $item.$bind ? "field" : "section";
			}
			if (!item) {
				item = this._widgetCategories[$category].create($item, boxParent);
			}
			if (item) {
				this.initializeNewItem(item, $item, boxParent);
			}
		}
		return item;
	},
	loadNewItem: function(slot, $item, boxParent, initData) {
		var item = this.createNewItem($item, boxParent || this);
		if (item) {
			item.layoutSlot = slot;
			item.loadBox(initData);
		}
		return item;
	},
	ensurePageVisibility: function() {
		if (this.page.isPageLoaded && !this.page._isDataChanging) {
			this.ensureArticleVisibility(true);
		}
	},
	dispose: function() {
		syra_site.pageLoader.disposePage(this);
		Article.prototype.dispose.call(this);
	},
	startChange: function() {
		this._isDataChanging = true;
	},
	applyChange: function(newData) {
		if (!this.disposed && this.dataset) {
			if (newData && newData.$isPartialDelta) {
				this.$isPartialDelta = true;
				//delete newData.$isPartialDelta;
			}
			syra_site.deltaManager.applyObjectDelta(this, this.dataset, newData);
			Article.prototype.applyChange.call(this, newData);
			if (!this._isDataChanging) {
				this.endChange();
			}
			delete this.$isPartialDelta;
		}
	},
	endChange: function(discardRedraw) {
		this._isDataChanging = false;
		if (!this.disposed) {
			if (!discardRedraw) {
				if (this.diagnosesPanel) {
					this.diagnosesPanel.refresh();
				}
				this.ensurePageVisibility();
			}
		}
	},
	isWorkingCopyUpdated: function() {
		return this.sendBag != null;
	},
	ensureSendBag: function(article, sender) {
		var sender = sender || this;
		var parent = article || this;
		if (parent.sendBag && !parent.sendBag.on412 && sender.dataset.$etag != parent.sendBag.$etag) {
			delete parent.sendBag;
		}
		if (!parent.sendBag) {
			parent.sendBag = new SendBag();
			parent.sendBag.$etag = sender.dataset.$etag = sender.dataset.$etag || 1;
			if (parent.isRecordDataset) {
				parent.sendBag.dataRecords = [];
			}

		}
		if (parent.sendBag.on412) {
			parent.sendBag.$etag = sender.dataset.$etag = sender.dataset.$etag || 1;
			delete parent.sendBag.on412;
		}
		return parent.sendBag;
	},
	isInMenuBar: function(item) {
		var menuGroupRoot = item.menuGroupRoot || (item.boxParent && item.boxParent.menuGroupRoot);
		var layoutParent = menuGroupRoot && menuGroupRoot.layoutParent;
		return layoutParent && layoutParent.isMenuBarLayout;
	},
	savePageDesign: function(saveUserPreferences) {
		if (this.isVignettePage) {
			var $vignette = helpers.object.clone(this.$item, true);
			delete $vignette.$menus;
			if (this.altVignetteKey) {
				(this.vignetteField.$item.$altVignettes = this.vignetteField.$item.$altVignettes || {})[this.altVignetteKey] = $vignette;
			} else {
				this.vignetteField.$item.$vignette = $vignette;
			}
			if (this.vignetteField.page.designer) {
				this.vignetteField.page.designer.endArticleUpdate();
			}
		} else {
			saveUserPreferences && this.userPreferences && this.userPreferences.save();
		}
	},
	loadBox: function(initData) {
		syra_site.pageLoader.initialize(this);
		this.$skin = this.$item.$skin || this.$skin || "s-page";
		this.$designLevel = "article";
		this.externalAdapter = this.$item.externalAdapter || syra_site.externalAdapter;
		delete this.$item.externalAdapter;
		Article.prototype.loadBox.call(this, initData);
		if (this.$autoFetch) {
			this.fetch({
				isPageLoading: true
			});
		}
	},
	getMenuItem: function($bind) {
		var bound = this.menuItems[$bind];
		return bound ? bound[0] : null;
	},

	notifyActionChange: function(menuItem, target, value, notifyServer) {
		if (target != this) {
			var list = target.list || target;
			if (list && list.isList) {
				if (value.$delete || value.$create) {
					list.notifyActionChange(menuItem, target, value, notifyServer);
					this.ensurePageVisibility();
					return;
				}
			}
		}
		var articleParent = (target.getArticle && target.getArticle()) || target.articleParent;
		var sendBag = this.ensureSendBag();
		var articleSendBag = this.ensureSendBag(articleParent);
		var $actions;
		var $bind;
		//var dataset = articleSendBag.dataset || articleSendBag;
		var dataset = articleSendBag;
		if (target.$item && target.$item.$bind) {
			var $properties = dataset.$properties = dataset.$properties || {};
			$properties = $properties[target.$item.$bind] = $properties[target.$item.$bind] || {};
			$actions = $properties.$actions = $properties.$actions || {};
			$bind = "$properties";
		} else {
			$bind = "$actions";
			$actions = dataset.$actions = dataset.$actions || {};
		}
		var $binds = Object.keys(value);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			$actions[$binds[ii]] = value[$binds[ii]];
		}
		value = dataset[$bind];
		if (articleParent != this) {
			while (articleParent != this) {
				if (articleParent.isRecordArticle) {
					var list = articleParent.list;
					var listSendBag = this.ensureSendBag(list);
					if (list.$prototype.$type == "application/x-array") {
						var found = list.findDataRecord(articleParent.$uuid);
						listSendBag.saveRecordChange(articleParent, $bind, value, found.dataRecordIndex);
						value = listSendBag.dataRecords;
					} else {
						if ($bind) {
							(listSendBag.dataset = listSendBag.dataset || {})[$bind] = value;
						}
						value = listSendBag.dataset;
					}
					$bind = list.$item.$bind;
					articleParent = list.articleParent;
				} else {
					if (articleParent.arrayLevel != "array") {
						if (articleParent.dataset && articleParent.dataset.$uuid) {
							sendBag.$uuid = articleParent.dataset.$uuid;
						}
						sendBag[$bind] = value;
					}
					articleParent = articleParent.articleParent;
				}
			}
			sendBag[$bind] = value;
		}
		if (notifyServer !== false) {
			if (this.dataset && this.dataset.$uuid !== undefined) {
				sendBag.$uuid = this.dataset.$uuid;
			}
			this.notifyChangeToServer(sendBag);
		}
	},
	notifyDataChange: function(field, value) {
		var sendBag = this.ensureSendBag();
		sendBag.saveDataChange(this, field.articleParent, field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
		this.notifyChangeToServer(sendBag);

		// saving data for "404 working copy session expired" cases
		if (sessionStorage && this.openerUrlSegments) {
			var key = this.openerUrlSegments.$url;
			var data = sessionStorage.getItem(key) !== "" ? JSON.parse(sessionStorage.getItem(key)) || {} : {};
			data.wcpreloadUrl = data.wcpreloadUrl || this.openerUrlSegments.workingCopyPreloadUrl;
			//data.dataset = this.dataset;
			sessionStorage.setItem(key, JSON.stringify(data));
		}
	},
	getDataUrl: function() {
		var $parsedUrl = syra_site.expressionMaker.parse(this, this.dataset.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	notifyChangeToServer: function(sendBag) {
		var self = this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.getDataUrl();
				sendBag.$etag = self.dataset.$etag;
				syra_controller.callServer(self, {
					$location: {
						$url: self.getDataUrl()
					},
					data: sendBag,
					method: "PUT",
					$etag: sendBag.$etag
				}, function(data, response, requestUrl) {
					if (!self.disposed) {
						if (sendBag) {
							delete sendBag.$actions;
						}
						self.applyChange(data, response, requestUrl);
					}
				});
			}
		}
	},
	validateFields: function() {
		var isValidated;
		try {
			this.isPageValidating = this.isServerNotifyDisabled = true;
			isValidated = Article.prototype.validateFields.call(this);
		} finally {
			this.isServerNotifyDisabled = this.isPageValidating = false;
		}
		return isValidated;
	},
	fetch: function(options, callback, error) {
		if (options) {
			if (options.isPageLoading) {
				(options.params = options.params || {}).count = this.defaultItemsPerPage;
				delete options.isPageLoading;
			}
			delete options.field;
			this.lastFetchOptions = helpers.object.clone(options, true);
		} else {
			delete this.lastFetchOptions;
		}
		syra_controller.callServer(this, options, callback, error);
	},
	fetchLastRequest: function(callback, error) {
		this.fetch(this.lastFetchOptions, callback, error);
	},
	freezeDeletedPage: function() {
		var $properties = {};
		var $binds = Object.keys(this.boundFields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			$properties[$binds[ii]] = {
				$isDisabled: true
			};
		}
		this.applyChange({
			$properties: $properties
		});
		var $binds = Object.keys(this.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var isDisabled = true;
			var $bind = $binds[ii];
			switch (this.$facet) {
				case "$details":
					isDisabled = ($bind != "$query");
					break;
			}
			if (isDisabled) {
				var menus = this.menuItems[$bind];
				for (var mm = 0, kk = menus.length; mm < kk; mm++) {
					menus[mm].disable(true);
				}
			}
		}
	},
	ensureDefaultArticle: function($article, $prototype) {
		if (!$article) {
			$article = {};
		}
		if (!$article.$layout) {
			$article.$layout = {};
		}
		switch (this.$facet) {
			case "$query":
			case "$bulk":
				_setQueryArticle($article, $prototype);
				break;
			case "$lookup":
			case "$select":
				this.isLookupPage = true;
				_setQueryArticle($article, $prototype);
				break;
			default:
				_setDefaultArticle($article, $prototype);
				break;
		}
		return $article;
	},
	registerSectionBlock: function(section) {
		if (!section.boxParent.childrenSection) {
			section.boxParent.childrenSection = [];
		}
		section.boxParent.childrenSection.push(section);
	},
	unregisterSectionBlock: function(section) {
		if (section.boxParent.childrenSection) {
			var index = section.boxParent.childrenSection.indexOf(section);
			if (index >= 0) {
				section.boxParent.childrenSection.splice(index, 1);
			}
		}
	},
	getBindTitle: function($bind, $field) {
		var $X3Name = $field ? $field.$X3Name : null;
		return $X3Name || $bind;
	},
	getMasterPage: function() {
		return this;
	},
	reloadLayout: function($item, layoutSlot, shouldInsertNewItems) {
		this.startChange();
		var prevLayout = this.layoutContent && this.layoutContent.domItem;
		var fields = this.layoutContent.getFields();
		if (fields && fields.length) {
			this.reloadingFields = {};
			for (var ii = 0, jj = fields.length; ii < jj; ii++) {
				var field = fields[ii];
				if (field && field.$item && field.$item.$bind) {
					this.reloadingFields[field.$item.$bind] = field;
				}
			}
		}
		syra_site.layoutUpdater.extractItems(this.layoutContent, fields);
		syra_site.layoutUpdater.clearContent(this.layoutContent);
		this.$item = $item;
		var autoInsertFields = this.insertNewItems();
		this.ensureLayoutMode();
		this.renderLayoutContent(layoutSlot);
		this.reloadingFields = null;

		syra_menus.setMenus(this, this.$prototype);
		syra_menus.setMenus(this, this.dataset);
		if (prevLayout) {
			syra_site.dom.removeChild(prevLayout);
		}
		this.endChange();
		autoInsertFields && autoInsertFields.showDiagnoses();
	},
	insertNewItems: function(displayDiagnoses, designLevel) {
		// Auto insert fields/sections/blocks in authored page... just for Fusion for now
		if (this._autoInsertFields) {
			this._autoInsertFields.dispose();
		}
		if (this.isFusionPage === undefined && this.page ? this.page.isFusionPage : this.isFusionPage) {
			(this._autoInsertFields = new FieldsAutoInsert()).load(this, designLevel || "article");
		}
		if (this._autoInsertFields && displayDiagnoses) {
			this._autoInsertFields.showDiagnoses();
		}
		return this._autoInsertFields;
	}
});