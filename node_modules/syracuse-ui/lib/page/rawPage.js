"use strict";
var _helpers = require('syracuse-core/lib/helpers');
var Article = require('syracuse-ui/lib/article/article').Article;
var Layout = require("syracuse-ui/lib/article/layout").Layout;
var FieldsAutoInsert = require('syracuse-ui/lib/article/fieldsGarbage').FieldsAutoInsert;
var _paging = require("syracuse-ui/lib/field/array/tools/paging");
var _advancedStateHelper = require('syracuse-ui/lib/field/helpers/advancedStateHelper');
var _designerViewChoice = require('syracuse-ui/lib/authoring/designerViewChoice');

var BarSplitter = require("syracuse-ui/lib/page/bar/barSplitter").BarSplitter;

var _menus = {
	_mainActions: {
		$cube: "$create",
		$query: "$create",
		$details: "$edit",
		$edit: "$save",
		$request: "$invoke"
	},
	addToInlinePage: function(page) {
		page.$item.$menus = [{
			$skin: "s-mn-inline",
			$category: "menus",
			$layout: {
				$items: [{
					$bind: page.$mainAction
				}, {
					$bind: "$abort"
				}]
			}
		}];
		var $actions = page.$prototype.$actions = page.$prototype.$actions || {};
		if (!$actions.$abort) {
			$actions.$abort = {
				$title: syra_local.inlinepage_cancel
			};
		}
		return page.$item.$menus;
	},
	addToPage: function(page) {
		if (!page.$item.$menus) {
			page.$item.$menus = [{
				$skin: page.$skinMenu || "s-mn-main",
				$category: "menus",
				$isBoxCollapsable: true,
				$isMenusBag: true,
				$layout: {
					$items: []
				}
			}];
			if (page.$mainAction) {
				page.$item.$menus[0].$layout.$items.push({
					$showIfSet: true,
					$bind: page.$mainAction,
					$style: "main"
				});
			}
		} else {
			if (!Array.isArray(page.$item.$menus)) {
				page.$item.$menus = [{
					$isMenusBag: true,
					$layout: {
						$items: syra_page.getDefinedFieldList(page.$item.$menus.$layout.$items)
					}
				}];
			}
		}
		for (var ii = 0, jj = page.$item.$menus.length; ii < jj; ii++) {
			var $menus = page.$item.$menus[ii];
			$menus.$category = "menus";
			if ($menus.$isBoxCollapsable === undefined) {
				$menus.$isBoxCollapsable = true;
			}
			if ($menus.$skin === undefined) {
				$menus.$skin = page.$skinMenu || "s-mn-main";
			}
		}
		return page.$item.$menus;
	},
	addBar: function(page) {
		var bar = page.menuBar = new BarSplitter();
		bar.preferenceKey = page.isVignettePage ? "vignette-menubar" : "menuBar";
		bar.options = bar.options || {};
		if (page.inlinePageHost) {
			bar.options.$isResizerDisabled = true;
			bar.options.resizeDirection = "bottom";
		} else {
			bar.options.resizeDirection = (page.$pageCategory == "vignette" || page.isLandingPage) ? "left" : "right";
		}
		bar.options.$skin = page.$skin + "-menubar";
		page.initializeNewItem(bar);
		bar.slot = document.createElement("div");
		bar.slot.className = page.$skin + "-menubar-slot";

		bar.body = document.createElement("div");
		bar.body.className = page.$skin + "-menubar-body";

		if (page.$pageCategory == "vignette" || page.isLandingPage) {
			bar.page.domItem.insertBefore(bar.slot, bar.page.domItem.firstChild);
		} else {
			bar.page.domItem.appendChild(bar.slot);
		}
		page.menuBar.load(page);
		if (!syra_site.mobileGateway) {
			if (page.isFusionPage && page.$item.$menus && page.$item.$menus.length) {
				page.$item.$menus[0].$isMenusBag = true;
			}
			page.$mainAction = this._mainActions[page.$facet];
			page.menuBarLayout = page.loadNewItem(bar.body, {
				$layoutType: "stack",
				$items: page.inlinePageHost ? _menus.addToInlinePage(page) : _menus.addToPage(page)
			});
		}
	}
};

function _setDefaultArticle($article, $prototype) {
	if (!$article.$layout.$items) {
		var $items = [];
		var binds = Object.keys($prototype.$properties);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var $field = $prototype.$properties[binds[ii]];
			if ($field && !$field.$isExcluded) {
				$items.push({
					$bind: binds[ii]
				});
			}
		}
		$article.$layout = {
			$items: [{
				$category: "section",
				$layout: {
					$items: [{
						$category: "section",
						$layout: {
							$items: $items
						}
					}]
				}
			}]
		};
	}
}

function _setQueryArticle($article, $prototype) {
	var $items = $article.$layout.$items;
	var binds = Object.keys($prototype.$properties);
	var $field, $bind, $queryField, $moreFields = [];
	for (var ii = 0, jj = binds.length; ii < jj; ii++) {
		$field = $prototype.$properties[$bind = binds[ii]];
		if ($field && !$field.$isExcluded) {
			if ($field.$type == "application/x-array") {
				$queryField = $field;
			} else {
				$moreFields.push($field);
			}
		}
		$field = null;
	}
	if ($moreFields.length) {
		_setDefaultArticle($article, $prototype);
	} else {
		var $item;
		//find array				
		if ($items) {
			$items = syra_site.layoutUpdater.getItemSettings(this, $article.$layout.$items, true) || [];
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				if ($items[ii].$bind == $bind) {
					$item = _helpers.object.clone($items[ii], true);
					break;
				}
			}
		}
		$article.$layout.$items = [$item || {
			$bind: $bind
		}];
	}

}


function RawPage() {}

exports.RawPage = _helpers.defineClass(RawPage, Article, {
	getMainAction: function() {
		var $binds = Object.keys(this.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var menus = this.menuItems[$binds[ii]];
			if (menus && menus.length && ((menus[0].$item.$style === "main") || (menus[0].$item.$kind === "main"))) {
				return menus[0];
			}
		}
	},
	ensureMenuBar: function() {
		if (!this.isMenuBarDisabled) {
			this.isMenuBarDisabled = this.dialogWrapper && !(this.isFusionPage && this.$facet != "$lookup");
		}!this.isMenuBarDisabled && _menus.addBar(this);
	},
	getUrlParams: function() {
		return this.openerUrlSegments && this.openerUrlSegments.params;
	},
	onItemInOut: function(onEnter, event, target) {
		if (target.syraViewIndex !== undefined) {
			_designerViewChoice.onItemInOut(onEnter, event, target);
		}
	},
	getDefaultTitle: function() {
		return this._defaultTitle || "";
	},
	setTitle: function(title, isDynamic) {
		Article.prototype.setTitle.call(this, title, isDynamic);
		this.isPageLoaded && syra_site.refreshBrowserTitle(this);
	},
	switchDesigner: function(open) {
		var self = this;
		if (open) {
			var path = self.isLandingPage ? "syracuse-ui/lib/authoring/landingPageDesigner" : "syracuse-ui/lib/authoring/pageDesigner";
			require.async(path, function(err, module) {
				_advancedStateHelper.toggleAllFields(self, true);
				self.designer = new module.Designer();
				self.designer.openDesigner(self);
				self.resizeArticle(true);
			});
		} else {
			if (self.designer) {
				syra_diagnose.showDiagnoses({
					$diagnoses: null
				}, self.page);
				self.designer.dispose();
				_advancedStateHelper.toggleAllFields(self);
				self.designer = null;
				if (self.isVignettePage) {
					self.resizeArticle(true);
				} else {
					syra_site.resize();
				}

			}
		}
	},
	setShortcutSpyerList: function(list) {
		if (list && !list.isArrayField) {
			while (list && !list.isArrayField) {
				list = list.articleParent;
			}
			if (!list) {
				return;
			}
		}
		this.shortcutSpyerList = list;
	},
	onExecuteMenuResponse: function(menuItem, responseData) {

	},
	_createBoxTitle: function() {
		this.domTitle = document.createElement("div");
		return Article.prototype._createBoxTitle.call(this);
	},
	initializeNewItem: function(item, $item, boxParent) {
		item.page = this;
		if ($item) {
			item.$item = $item;
			if (!item.id) {
				item.id = $item.$clientId;
			}
		}
		if (!item.id) {
			item.id = this.id + "-" + (++this._childItemOffset);
		}
		syra_store.add(item);
		if (boxParent) {
			item.boxParent = boxParent;
			(item.articleParent = boxParent.getArticle()).idMap[item.id] = item;
			this.registerBoxField(item);
		}
		return item;
	},
	registerBoxField: function(item, check) {
		if (item.boxParent.boxChildItems && item.$item && item.$item.$bind) {
			if (check && item.boxParent.boxChildItems.indexOf(item) >= 0) {
				return;
			}
			item.boxParent.boxChildItems.push(item);
		}
	},
	createNewItem: function($item, boxParent, newItem) {
		var item = newItem;
		if ($item) {
			if ($item.$items && !$item.$layoutType && !$item.$bind && !$item.$category) {
				$item.$layoutType = "stack";
			}
			if ($item.$layoutType) {
				item = new Layout();
				item.create($item, boxParent);
			} else {
				var $category = $item.$category;
				if (!$category) {
					$category = $item.$bind ? "field" : "section";
				}
				if (!item) {
					item = syra_site.widgetsLibrary.categories[$category].create($item, boxParent);
				}
				if (item) {
					this.initializeNewItem(item, $item, boxParent);
				}
			}
		}
		return item;
	},
	loadNewItem: function(slot, $item, boxParent, initData) {
		var item = this.createNewItem($item, boxParent || this);
		if (item) {
			item.layoutSlot = slot;
			item.loadBox(initData);
		}
		return item;
	},
	isItemVisible: function(item) {
		var boxParent = item.boxParent;
		while (boxParent && boxParent.$opened && boxParent != this) {
			boxParent = boxParent.boxParent;
		}
		return boxParent == this;
	},
	addResizable: function(item) {
		this.resizableList.indexOf(item) < 0 && this.resizableList.push(item);
	},
	removeResizable: function(item) {
		var ii = this.resizableList && this.resizableList.indexOf(item);
		(ii >= 0) && this.resizableList.splice(ii, 1);
	},
	resizeArticle: function() {
		for (var ii = 0, jj = this.resizableList.length; ii < jj; ii++) {
			var item = this.resizableList[ii];
			!item.disposed && item.resizeArticle();
		}
	},
	setDescription: function($description) {
		if ($description) {
			var title = this.titleLabel ? this.titleLabel.textContent : null;
			if (title != $description) {
				if (!this.domDescription) {
					this.domDescription = document.createElement("div");
					this.domDescription.className = this.$skin + "-description";
					if (this.titleLabel) {
						this.titleLabel.parentNode.insertBefore(this.domDescription, this.titleLabel.nextSibling);
					} else {
						this.header.appendChild(this.domDescription);
					}
				}
				if ($description.indexOf("{") < 0) {
					this.domDescription.textContent = $description;
				} else {
					syra_site.expressionMaker.render(this, $description, this.domDescription, this.$skin + "-description-field", false);
				}
				if (title && title == this.domDescription.textContent) {
					this.domDescription.style.display = "none";
				}
			}
		}
	},
	startChange: function() {
		this._isDataChanging = true;
	},
	applyChange: function(newData) {
		if (!this.disposed && this.dataset) {
			if (newData && newData.$isPartialDelta) {
				this.$isPartialDelta = true;
				//delete newData.$isPartialDelta;
			}
			syra_site.deltaManager.applyObjectDelta(this, this.dataset, newData);
			Article.prototype.applyChange.call(this, newData);
			if (!this._isDataChanging) {
				this.endChange();
			}
			delete this.$isPartialDelta;
		}
	},
	endChange: function(discardRedraw) {
		this._isDataChanging = false;
		if (!this.disposed) {
			if (!discardRedraw) {
				if (this.menuBar && !this.menuBar.isInitialized) {
					this.menuBar.isInitialized = true;
					!this.menuBar.body.firstChild && this.menuBar.toggleBar(false);
				}
				this.diagnosesPanel && this.diagnosesPanel.refresh();
				syra_site.ensureArticleVisibility(this);
			}
		}
		if (!this.disposed && this.isPageLoaded && !this.isFusionPage) {
			syra_site.refreshBrowserTitle(this);
		}
		syra_quality.page_endChange(this);
	},
	isInMenuBar: function(item) {
		var menuGroupRoot = item.menuGroupRoot || (item.boxParent && item.boxParent.menuGroupRoot);
		var layoutParent = menuGroupRoot && menuGroupRoot.layoutParent;
		return layoutParent && layoutParent == page.menuBarLayout;
	},
	savePageDesign: function(saveUserPreferences) {
		if (this.isVignettePage) {
			var $vignette = _helpers.object.clone(this.$item, true);
			delete $vignette.$menus;
			if (this.altVignetteKey) {
				(this.vignetteField.$item.$altVignettes = this.vignetteField.$item.$altVignettes || {})[this.altVignetteKey] = $vignette;
			} else {
				this.vignetteField.$item.$vignette = $vignette;
			}
			if (this.vignetteField.page.designer) {
				this.vignetteField.page.designer.endArticleUpdate();
			}
		} else {
			saveUserPreferences && this.userPreferences && this.userPreferences.save();
		}
	},
	resizeBars: function() {
		if (this.bars) {
			for (var ii = 0, jj = this.bars.length; ii < jj; ii++) {
				this.bars[ii].resizeSplitter();
			}
		}
	},
	loadBox: function(initData) {
		this.bars = [];
		this.resizableList = [];
		syra_site.pageLoader.initialize(this);
		this.$skin = this.$item.$skin || this.$skin || "s-page";
		this.$designLevel = "article";
		this.externalAdapter = this.$item.externalAdapter || syra_site.externalAdapter;
		delete this.$item.externalAdapter;
		Article.prototype.loadBox.call(this, initData);
	},
	getMenuItem: function($bind) {
		var bound = this.menuItems[$bind];
		return bound ? bound[0] : null;
	},

	notifyActionChange: function(menuItem, target, value, notifyServer) {
		if (target != this) {
			var list = target.list || target;
			if (list && list.isArrayField) {
				if (value.$delete || value.$create) {
					list.notifyActionChange(menuItem, target, value, notifyServer);
					syra_site.ensureArticleVisibility(this);
					return;
				}
			}
		}
		var articleParent = (target.getArticle && target.getArticle()) || target.articleParent;
		var sendBag = syra_workingCopy.getSendBag(this);
		var articleSendBag = syra_workingCopy.getSendBag(articleParent);
		var $actions;
		var $bind;
		//var dataset = articleSendBag.dataset || articleSendBag;
		var dataset = articleSendBag;
		if (target.$item && target.$item.$bind) {
			var $properties = dataset.$properties = dataset.$properties || {};
			$properties = $properties[target.$item.$bind] = $properties[target.$item.$bind] || {};
			$actions = $properties.$actions = $properties.$actions || {};
			$bind = "$properties";
		} else {
			$bind = "$actions";
			$actions = dataset.$actions = dataset.$actions || {};
		}
		var $binds = Object.keys(value);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			$actions[$binds[ii]] = value[$binds[ii]];
		}
		value = dataset[$bind];
		if (articleParent != this) {
			while (articleParent != this) {
				if (articleParent.isRecordArticle) {
					var list = articleParent.list;
					var listSendBag = this.getSendBag(list);
					if (list.$prototype.$type == "application/x-array") {
						var found = list.findDataRecord(articleParent.$uuid);
						listSendBag.saveRecordChange(articleParent, $bind, value, found.dataRecordIndex);
						value = listSendBag.dataRecords;
					} else {
						if ($bind) {
							(listSendBag.dataset = listSendBag.dataset || {})[$bind] = value;
						}
						value = listSendBag.dataset;
					}
					$bind = list.$item.$bind;
					articleParent = list.articleParent;
				} else {
					if (articleParent.arrayLevel != "array") {
						if (articleParent.dataset && articleParent.dataset.$uuid) {
							sendBag.$uuid = articleParent.dataset.$uuid;
						}
						sendBag[$bind] = value;
					}
					articleParent = articleParent.articleParent;
				}
			}
			sendBag[$bind] = value;
		}
		if (notifyServer !== false) {
			if (this.dataset && this.dataset.$uuid !== undefined) {
				sendBag.$uuid = this.dataset.$uuid;
			}
			this.notifyChangeToServer(sendBag);
		}
	},
	notifyChangeToServer: function(sendBag) {
		syra_workingCopy.notifyChangeToServer(this, sendBag);
	},
	notifyDataChange: function(field, value) {
		syra_workingCopy.notifyDataChange(this, field, value);
	},
	onAfterActionMenuExecute: function(menuItem, $menu, isSuccess) {
		return syra_workingCopy.onAfterActionMenuExecute(menuItem, $menu, isSuccess);
	},
	getDataUrl: function() {
		var $parsedUrl = syra_site.expressionMaker.parse(this, this.dataset.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	fetch: function(options, callback, error) {
		if (options) {
			if (options.isPageLoading) {
				(options.params = options.params || {}).count = _paging.getDefaultItemsPerPage(this);
				delete options.isPageLoading;
			}
			delete options.field;
			this.lastFetchOptions = _helpers.object.clone(options, true);
		} else {
			delete this.lastFetchOptions;
		}
		syra_controller.callServer(this, options, callback, error);
	},
	fetchLastRequest: function(callback, error) {
		this.fetch(this.lastFetchOptions, callback, error);
	},
	freezeDeletedPage: function() {
		var $properties = {};
		var $binds = Object.keys(this.boundFields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			$properties[$binds[ii]] = {
				$isDisabled: true
			};
		}
		this.applyChange({
			$properties: $properties
		});
		var $binds = Object.keys(this.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var isDisabled = true;
			var $bind = $binds[ii];
			switch (this.$facet) {
				case "$details":
					isDisabled = ($bind != "$query");
					break;
			}
			if (isDisabled) {
				var menus = this.menuItems[$bind];
				for (var mm = 0, kk = menus.length; mm < kk; mm++) {
					menus[mm].disable(true);
				}
			}
		}
	},
	ensureDefaultArticle: function($article, $prototype) {
		if (!$article) {
			$article = {};
		}
		if (!$article.$layout) {
			$article.$layout = {};
		}
		switch (this.$facet) {
			case "$query":
			case "$bulk":
			case "$cube":
				_setQueryArticle($article, $prototype);
				break;
			case "$lookup":
			case "$select":
				this.isLookupPage = true;
				_setQueryArticle($article, $prototype);
				break;
			default:
				_setDefaultArticle($article, $prototype);
				break;
		}
		return $article;
	},
	registerSectionBlock: function(section) {
		if (!section.boxParent.childrenSection) {
			section.boxParent.childrenSection = [];
		}
		var index = section.boxParent.childrenSection.indexOf(section);
		if (index < 0) {
			section.boxParent.childrenSection.push(section);
		}
	},
	unregisterSectionBlock: function(section) {
		if (section.boxParent.childrenSection) {
			var index = section.boxParent.childrenSection.indexOf(section);
			if (index >= 0) {
				section.boxParent.childrenSection.splice(index, 1);
			}
		}
	},
	getBindTitle: function($bind, $field) {
		var $X3Name = $field ? $field.$X3Name : null;
		return $X3Name || $bind;
	},
	getMasterPage: function() {
		return this;
	},
	reloadLayout: function($item, layoutSlot) {
		if (this._advancedFieldsBtn) {
			delete this._hasAdvancedFields;
			syra_menus.button.remove(this._advancedFieldsBtn);
			this._advancedFieldsBtn = null;
		}
		this.startChange();
		var prevLayout = this.layoutContent && this.layoutContent.domItem;
		var fields = this.layoutContent.getFields();
		if (fields && fields.length) {
			this.reloadingFields = {};
			for (var ii = 0, jj = fields.length; ii < jj; ii++) {
				var field = fields[ii];
				if (field && field.$item && field.$item.$bind) {
					this.reloadingFields[field.$item.$bind] = field;
				}
			}
		}
		syra_site.layoutUpdater.extractItems(this.layoutContent, fields);
		syra_site.layoutUpdater.clearContent(this.layoutContent);
		this.$item = $item;
		var autoInsertFields = this.insertNewItems();
		this.ensureLayoutMode();
		this.renderLayoutContent(layoutSlot);
		this.reloadingFields = null;

		syra_menus.setMenus(this, this.$prototype);
		syra_menus.setMenus(this, this.dataset);
		prevLayout && syra_site.dom.removeChild(prevLayout);

		this.endChange();
		autoInsertFields && autoInsertFields.showDiagnoses();

		this.garbage && this.garbage.load(this);
	},
	insertNewItems: function(displayDiagnoses, designLevel) {
		// Auto insert fields/sections/blocks in authored page... just for Fusion for now
		if (this._autoInsertFields) {
			this._autoInsertFields.dispose();
		}
		if (this.isFusionPage === undefined && this.page ? this.page.isFusionPage : this.isFusionPage) {
			(this._autoInsertFields = new FieldsAutoInsert()).load(this, designLevel || "article");
		}
		if (this._autoInsertFields && displayDiagnoses) {
			this._autoInsertFields.showDiagnoses();
		}
		return this._autoInsertFields;
	},
	getScrollviewSize: function() {
		if (!this.scrollviewSize) {
			this.scrollviewSize = syra_site.dom.getBoundingClientRect(this.scrollview);
		}
		return this.scrollviewSize;
	},
	onBreadcrumbClick: function(event, btn) {

	},
	diposeContent: function() {
		Article.prototype.diposeContent.call(this);
		syra_site.dom.empty(this.body);
		this.loaded = false;
		if (this.menuBar) {
			this.menuBar.slot && syra_site.dom.removeChild(this.menuBar.slot);
			this.menuBar.dispose();
		}
		if (this.diagnosesPanel) {
			this.diagnosesPanel.dispose();
			syra_site.dom.empty(this.diagnoseSlot);
		}
		this.diagnosesPanel = this.menuBar = null;
	},
	dispose: function() {
		this.siteLegalLink && syra_site.removeItem(this.siteLegalLink, false, true);
		syra_workingCopy.remove(this);
		this.isDesigned && syra_site.switchItemDesigner(this, false);
		if (this.bars) { //pagestorage no default load
			for (var ii = 0, jj = this.bars.length; ii < jj; ii++) {
				this.bars[ii].dispose();
			}
		}
		this._autoInsertFields && this._autoInsertFields.dispose();
		this.garbage && this.garbage.dispose();
		this.diagnosesPanel && this.diagnosesPanel.dispose();
		_designerViewChoice.dispose(this);
		syra_site.pageLoader.disposePage(this);
		Article.prototype.dispose.call(this);
	}
});