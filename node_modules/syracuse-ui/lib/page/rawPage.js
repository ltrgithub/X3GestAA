"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require('syracuse-ui/lib/article/article').Article;
var Layout = require("syracuse-ui/lib/article/layouts/layout").Layout;
var SendBag = require('./delta/sendBag').SendBag;
var FieldsAutoInsert = require('syracuse-ui/lib/article/fieldsGarbage').FieldsAutoInsert;

var _$mainActions = {
	$cube: "$create",
	$query: "$create",
	$details: "$edit",
	$edit: "$save",
	$request: "$invoke"
};
var _helpTab = {};

function RawPage() {}

exports.RawPage = helpers.defineClass(RawPage, Article, {
	onBarEvent: function(picker, event) {
		if (this.menuBar) {
			this.menuBar.onClickPicker(picker, event);
		}
	},
	registerChildArticle: function() {
		if (this.articleParent) {
			Article.prototype.registerChildArticle.call(this);
		} else {
			if (this != document.site) {
				document.site.childArticles[this.id] = this;
			}
		}
	},
	unregisterChildArticle: function() {
		if (this.articleParent) {
			Article.prototype.unregisterChildArticle.call(this);
		} else {
			if (this != document.site) {
				delete document.site.childArticles[this.id];
			}
		}
	},
	onExecuteMenuResponse: function(menuItem, responseData) {

	},
	addPrototypeToRepository: function($prototype) {
		if ($prototype) {
			if ($prototype.$id) {
				this.$prototypeRepository = this.$prototypeRepository || {};
				this.$prototypeRepository[$prototype.$id] = $prototype;
			}
			if ($prototype.$item && $prototype.$item.$id) {
				this.addPrototypeToRepository($prototype.$item);
			}
			return this.findPrototypeFromRepository($prototype);
		}
	},
	findPrototypeFromRepository: function($prototype) {
		if ($prototype) {
			if (!$prototype.$properties) {
				if ($prototype.$item) {
					$prototype.$item = this.findPrototypeFromRepository($prototype.$item);
				} else {
					if ($prototype.$type == "application/x-pointer" && $prototype.$prototype) {
						var index = $prototype.$prototype.indexOf("#");
						if (index >= 0) {
							$prototype = this.$prototypeRepository[$prototype.$prototype.slice(index + 1)];
						}
					}
				}
			}
		}
		return $prototype;
	},
	isActionSuccess: function(menuItem) {
		if (menuItem.$diagnoses) {
			for (var ii = 0; ii < menuItem.$diagnoses.length; ii++) {
				if (menuItem.$diagnoses[ii].$severity != "success") {
					return false;
				}
			}
		}
		return true;
	},
	onAfterActionMenuExecute: function(menuItem, $menu) {
		switch (menuItem.$bind) {
			case "$save":
				if (this.isActionSuccess(menuItem) && this.dialogWrapper && this.dialogWrapper.options.onSave) {
					if (this.dialogWrapper.options.onSave(menuItem, this.dialogWrapper) === false) {
						return false;
					}
				}
				break;
		}
		return true;
	},
	checkMenuDesignValidaty: function(menuItem) {
		var articleParent = menuItem.articleParent;
		while (articleParent) {
			if (articleParent.designer) {
				return !(articleParent.designer && articleParent.designer.onMenuClick && articleParent.designer.onMenuClick(menuItem) == false);
			}
			if (articleParent == this) {
				break;
			}
			articleParent = articleParent.articleParent;
		}
		return true;
	},
	autoScroll: function(scrollViewRect, event) {
		var step = 40,
			margin = 80;
		if (event.pageY > (scrollViewRect.bottom - margin)) {
			var scrollTop = scrollViewRect.item.scrollTop;
			if (scrollTop < (scrollViewRect.scrollHeight - scrollViewRect.height)) {
				scrollViewRect.item.scrollTop = Math.min(scrollTop + step, scrollViewRect.scrollHeight - scrollViewRect.height);
			}
		} else {
			if (event.pageY < (scrollViewRect.top + margin)) {
				var scrollTop = scrollViewRect.item.scrollTop;
				scrollViewRect.item.scrollTop = Math.max(scrollTop - step, 0);
			}
		}
		if (event.pageX > (scrollViewRect.right - margin)) {
			var scrollLeft = scrollViewRect.item.scrollLeft;
			if (scrollLeft < (scrollViewRect.scrollWidth - scrollViewRect.width)) {
				scrollViewRect.item.scrollLeft = Math.min(scrollLeft + step, scrollViewRect.scrollWidth - scrollViewRect.width);
			}
		} else {
			if (event.pageX < (scrollViewRect.left + margin)) {
				var scrollLeft = scrollViewRect.item.scrollLeft;
				scrollViewRect.item.scrollLeft = Math.max(scrollLeft - step, 0);
			}
		}
	},
	scrollToItem: function(item, area, isDomItem) {
		if (!isDomItem) {
			var masterPage = item.page.getMasterPage();
			if (masterPage != this) {
				masterPage.scrollToItem(item, area, isDomItem);
				return;
			}
		}
		if (item == this) {
			if (this.scrollview) {
				this.scrollview.scrollTop = this.scrollview.scrollLeft = "0px";
			}
		} else {
			var target;
			area = area || this.scrollview || document.site.body;
			if (isDomItem) {
				target = item;
			} else {
				var parent = item;
				while (parent) {
					if (parent.tabTitle && !parent.$opened) {
						parent.layoutParent.openTab(parent);
					}
					parent = parent.boxParent;
				}
				if (item && (item.tabTitle || item.$$item)) {
					target = item.tabTitle || item.$$item[0];
				}
			}
			if (target) {
				var targetRect = document.site.getBoundingClientRect(target);
				var areaRect = document.site.getBoundingClientRect(area);
				targetRect.top -= areaRect.top;
				targetRect.left -= areaRect.left;
				if ((area.scrollHeight - area.clientHeight) > 0) {
					if (targetRect.top < 0) {
						area.scrollTop = Math.max(targetRect.top + (Math.max(area.scrollTop - 20, 0)), 0);
					} else {
						if ((targetRect.top + target.offsetHeight) > area.clientHeight) {
							var newTop = targetRect.top - area.clientHeight;
							var diff = (target.offsetHeight - area.clientHeight);
							if (diff > 0) {
								newTop += (area.clientHeight - 20);
							} else {
								newTop += target.offsetHeight;
							}
							area.scrollTop += (newTop + 20);
						}
					}
				}
				if ((area.scrollWidth - area.clientWidth) > 0) {
					if (targetRect.left < 0) {
						area.scrollLeft = Math.max(targetRect.left + (Math.max(area.scrollLeft - 20, 0)), 0);
					} else {
						if (targetRect.left > area.clientWidth) {
							var newLeft = targetRect.left - area.clientWidth;
							var diff = (target.offsetWidth - area.clientWidth);
							if (diff > 0) {
								newLeft += (area.clientWidth - 20);
							} else {
								newLeft += target.offsetWidth;
							}
							area.scrollLeft += (newLeft + 20);
						}
					}
				}
			}
		}
	},
	_createBoxTitle: function() {
		this.domTitle = document.createElement("div");
		return Article.prototype._createBoxTitle.call(this);
	},
	initializeNewItem: function(item, $item, boxParent) {
		item.page = this;
		if ($item) {
			item.$item = $item;
			if (!item.id) {
				item.id = $item.$clientId;
			}
		}
		if (!item.id) {
			item.id = this.id + "-" + (++this._childItemOffset);
		}
		if (boxParent) {
			item.boxParent = boxParent;
			(item.articleParent = boxParent.getArticle()).idMap[item.id] = item;
			this.registerBoxField(item);
		}
		return item;
	},
	registerBoxField: function(item) {
		if (item.boxParent.boxChildItems && item.$item && item.$item.$bind) {
			item.boxParent.boxChildItems[item.id] = item;
		}
	},
	createNewItem: function($item, boxParent, newItem) {
		var item = newItem;
		if ($item.$items && !$item.$layoutType && !$item.$bind && !$item.$category) {
			$item.$layoutType = "stack";
		}
		if ($item.$layoutType) {
			item = new Layout();
			item.create($item, boxParent);
		} else {
			var $category = $item.$category;
			if (!$category) {
				$category = $item.$bind ? "field" : "section";
			}
			if (!item) {
				item = this._widgetCategories[$category].create($item, boxParent);
			}
			if (item) {
				this.initializeNewItem(item, $item, boxParent);
			}
		}
		return item;
	},
	loadNewItem: function(slot, $item, boxParent, initData) {
		var item = this.createNewItem($item, boxParent || this);
		if (item) {
			item.layoutSlot = slot;
			item.loadBox(initData);
		}
		return item;
	},
	ensurePageVisibility: function() {
		if (this.isPageLoaded) {
			if (this.childrenSection) {
				for (var mm = 0, kk = this.childrenSection.length; mm < kk; mm++) {
					this.childrenSection[mm].ensureVisibility();
				}
			}
			if (this._articles) {
				for (var ii = 0, jj = this._articles.length; ii < jj; ii++) {
					this._articles[ii].ensureArticleVisibility();
				}
			}
			if (this.pageMenusBox) {
				document.site.layoutValidator.validate(this.pageMenusBox.layoutContent, true);
			}
			document.site.layoutValidator.validate(this.layoutContent, true);
			this.resizeArticle();
		}
	},
	findChildArticle: function(id) {
		if (id == this.id) {
			return this;
		}
		if (this._articles) {
			for (var ii = 0, jj = this._articles.length; ii < jj; ii++) {
				if (this._articles[ii].id == id) {
					return this._articles[ii];
				}
			}
		}
		return null;
	},
	dispose: function() {
		this._menusPager = this.$urlParams = this.openerUrlSegments = this.$views = this._$$diagnoseSlot = null;
		Article.prototype.dispose.call(this);
		this.pageMenusBox = this._articles = this.localize = this._widgetCategories = this.vignetteField = this.focusField = null;
		this.lastFetchOptions = this.$prototypeRepository = this.lastFocusGrid = this.externalAdapter = null;
	},
	startChange: function() {
		this._isDataChanging = true;
	},
	applyChange: function(newData) {
		if (!this.disposed && this.dataset) {
			if (newData && newData.$isPartialDelta) {
				this.$isPartialDelta = true;
				//delete newData.$isPartialDelta;
			}
			document.site.deltaManager.applyObjectDelta(this, this.dataset, newData);
			if (this.isPageSpyed) {
				document.site.spyGateway.spyDataset(this.dataset, newData);
			}
			Article.prototype.applyChange.call(this, newData);
			if (!this._isDataChanging) {
				this.endChange();
			}
			delete this.$isPartialDelta;
		}
	},
	endChange: function() {
		this._isDataChanging = false;
		this.ensurePageVisibility();
	},
	ensureSendBag: function(article, sender) {
		var sender = sender || this;
		var parent = article || this;
		if (parent.sendBag && !parent.sendBag.on412 && sender.dataset.$etag != parent.sendBag.$etag) {
			delete parent.sendBag;
		}
		if (!parent.sendBag) {
			parent.sendBag = new SendBag();
			parent.sendBag.$etag = sender.dataset.$etag = sender.dataset.$etag || 1;
			if (parent.isRecordDataset) {
				parent.sendBag.dataRecords = [];
			}

		}
		if (parent.sendBag.on412) {
			parent.sendBag.$etag = sender.dataset.$etag = sender.dataset.$etag || 1;
			delete parent.sendBag.on412;
		}
		return parent.sendBag;
	},
	_initializePage: function() {
		this._articles = [];
		this.$userPreferences = this.$userPreferences || {};
		this.page = this;
		this._widgetCategories = document.site.siteOptions.widgetsLibrary.categories;
		this._childItemOffset = this._childItemOffset || 1; //initialize for site
		if (!this.id) {
			this.id = document.site._childPageOffset++;
		}
		if (!this.localize) {
			this.localize = document.site.localize;
		}
	},
	getFieldUserPreferences: function($bind) {
		return (!this.isVignettePage && this.$userPreferences.$fields && this.$userPreferences.$fields[$bind]) || {};
	},
	setFieldUserPreferences: function($bind, $fieldUserPreferences) {
		if (!this.isVignettePage) {
			(this.$userPreferences.$fields = this.$userPreferences.$fields || {})[$bind] = $fieldUserPreferences;
		}
	},
	applyMenuGroupPreferences: function(menuGroup) {
		if (this.$userPreferences && this.$userPreferences.$menuBarGroup) {
			var $opened = this.$userPreferences.$menuBarGroup[menuGroup.id];
			if ($opened != undefined && menuGroup.$opened != $opened) {
				menuGroup.openBox(menuGroup.$opened = $opened);
			}
		}
	},
	onMenuGroupClick: function(menuGroup) {
		if (this.menuBar && !this.isVignettePage) {
			var box = menuGroup;
			while (box && box != this.pageMenusBox) {
				box = box.boxParent;
			}
			if (box) {
				(this.$userPreferences.$menuBarGroup = this.$userPreferences.$menuBarGroup || {})[menuGroup.id] = menuGroup.$opened;
				this.savePageDesign(true);
			}
		}
	},
	savePageDesign: function(saveUserPreferences) {
		var self = this;
		if (self.isVignettePage) {
			self.vignetteField.$item.$vignette = helpers.object.clone(self.$item, true);
			delete self.vignetteField.$item.$vignette.$menus;
			if (self.vignetteField.page.designer) {
				self.vignetteField.page.designer.endArticleUpdate();
			}
		} else {
			if (self.$userPreferencesLink && saveUserPreferences) {
				var sendBag = {
					$etag: 1,
					$url: document.site.urlMaker.formatMenuUrl(self, self.$userPreferencesLink),
					content: self.$userPreferences
				};
				document.controller.sendRequest(self, {
					$location: {
						$url: sendBag.$url
					},
					data: sendBag,
					method: "PUT",
					$etag: sendBag.$etag
				}, function(data, response, requestUrl) {
					if (!self.disposed) {
						//debugger;

					}
				});
			}
		}
	},
	loadBox: function(initData, $initDiagnoses) {
		this._initializePage();
		this.$skin = this.$item.$skin || this.$skin || "s-page";
		this.$designLevel = "article";
		this.externalAdapter = this.$item.externalAdapter || document.site.externalAdapter;
		delete this.$item.externalAdapter;
		Article.prototype.loadBox.call(this, initData, $initDiagnoses);
		if ($initDiagnoses) {
			this.showDiagnoses({
				$diagnoses: $initDiagnoses
			});
		}
		if (this.$autoFetch = this.$autoFetch !== false) {
			this.fetch({
				isPageLoading: true
			});
		}
	},
	getMenuItem: function($bind) {
		var bound = this.menuItems[$bind];
		return bound ? bound[0] : null;
	},
	getDefinedFieldList: function($items, $list) {
		if ($items) {
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				var $item = $items[ii];
				if ($item.$bind) {
					$list.push($item);
				} else {
					if ($item.$items) {
						this.getDefinedFieldList($item.$items, $list);
					}
					if ($item.$layout && $item.$layout.$items) {
						this.getDefinedFieldList($item.$layout.$items, $list);
					}
				}
			}
		}
	},
	getDefinedFieldBinds: function($items, $binds) {
		$binds = $binds || [];
		if ($items) {
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				var $item = $items[ii];
				if ($item.$bind) {
					$binds.push($item.$bind);
				} else {
					if ($item.$items) {
						$binds = this.getDefinedFieldBinds($item.$items, $binds);
					}
					if ($item.$layout && $item.$layout.$items) {
						$binds = this.getDefinedFieldBinds($item.$layout.$items, $binds);
					}
				}
			}
		}
		return $binds;
	},

	clickMainMenu: function() {
		var $binds = Object.keys(this.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var menus = this.menuItems[$binds[ii]];
			if (menus && menus.length) {
				if (menus[0].$item.$style === "main") {
					menus[0].click();
					break;
				}
			}
		}
	},
	appendPageMenus: function(slot) {
		if (!slot) {
			if (!this._slot) {
				slot = this._slot = document.createElement("div");
				this._slot.className = this.$skin + "-menubar-slot";
				this._slot.style.display = "none";
				$(this._slot).prependTo(this.$$item);
			}
		}
		this.$mainAction = _$mainActions[this.$facet];
		if (!this.$item.$menus) {
			this.$item.$menus = [{
				$skin: this.$skinMenu || "s-mn-bar-main",
				$category: "menus",
				$isBoxCollapsable: true,
				$isMenusBag: true,
				$layout: {
					$items: []
				}
			}];
			if (this.$mainAction) {
				this.$item.$menus[0].$layout.$items.push({
					$bind: this.$mainAction,
					$style: "main"
				});
			}
		} else {
			if (!Array.isArray(this.$item.$menus)) {
				var $items = [];
				this.getDefinedFieldList(this.$item.$menus.$layout.$items, $items);
				this.$item.$menus = [{
					$isMenusBag: true,
					$layout: {
						$items: $items
					}
				}];
			}
		}
		for (var ii = 0, jj = this.$item.$menus.length; ii < jj; ii++) {
			var $menus = this.$item.$menus[ii];
			$menus.$isMenuPage = true;
			$menus.$isAuthoringEnabled = false;
			$menus.$category = "menus";
			if ($menus.$isBoxCollapsable === undefined) {
				$menus.$isBoxCollapsable = true;
			}
			if ($menus.$skin === undefined) {
				$menus.$skin = this.$skinMenu || "s-mn-bar-main";
			}
		}
		return (this.pageMenusBox = this.loadNewItem(slot, {
			$category: "section",
			$skin: this.$skinMenuBox || "s-page-menus-box",
			$layout: {
				$items: this.$item.$menus
			}
		}));
	},
	onMenuDataFilled: function(menuItem) {
		if (this._slot) {
			this._slot.style.display = "";
		}
	},
	createField: function($field, $item, boxParent, $class) {
		return null;
	},
	notifyActionChange: function(menuItem, target, value, notifyServer) {
		if (target != this) {
			var list = target.list || target;
			if (list && list.isList) {
				if (value.$delete || value.$create) {
					list.notifyActionChange(menuItem, target, value, notifyServer);
					this.ensurePageVisibility();
					return;
				}
			}
		}
		var articleParent = target.getArticle();
		var sendBag = this.ensureSendBag();
		var articleSendBag = this.ensureSendBag(articleParent);
		var $actions;
		var $bind;
		var dataset = articleSendBag.dataset || articleSendBag;
		if (target.$item && target.$item.$bind) {
			var $properties = dataset.$properties = dataset.$properties || {};
			$properties = $properties[target.$item.$bind] = $properties[target.$item.$bind] || {};
			$actions = $properties.$actions = $properties.$actions || {};
			$bind = "$properties";
		} else {
			$bind = "$actions";
			$actions = dataset.$actions = dataset.$actions || {};
		}
		var $binds = Object.keys(value);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			$actions[$binds[ii]] = value[$binds[ii]];
		}
		value = dataset[$bind];
		if (articleParent != this) {
			while (articleParent != this) {
				if (articleParent.isRecordArticle) {
					var list = articleParent.list;
					var listSendBag = this.ensureSendBag(list);
					if (list.$prototype.$type == "application/x-array") {
						var found = list.findDataRecord(articleParent.$uuid);
						listSendBag.saveRecordChange(articleParent, $bind, value, found.dataRecordIndex);
						value = listSendBag.dataRecords;
					} else {
						if ($bind) {
							(listSendBag.dataset = listSendBag.dataset || {})[$bind] = value;
						}
						value = listSendBag.dataset;
					}
					$bind = list.$item.$bind;
					articleParent = list.articleParent;
				} else {
					if (articleParent.arrayLevel != "array") {
						if (articleParent.dataset && articleParent.dataset.$uuid) {
							sendBag.$uuid = articleParent.dataset.$uuid;
						}
						sendBag[$bind] = value;
					}
					articleParent = articleParent.articleParent;
				}
			}
			sendBag[$bind] = value;
		}
		if (notifyServer !== false) {
			if (this.dataset && this.dataset.$uuid !== undefined) {
				sendBag.$uuid = this.dataset.$uuid;
			}
			this.notifyChangeToServer(sendBag);
		}
	},
	notifyDataChange: function(field, value) {
		var sendBag = this.ensureSendBag();
		sendBag.saveDataChange(this, field.getArticle(), field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
		this.notifyChangeToServer(sendBag);

		// saving data for "404 working copy session expired" cases
		if (sessionStorage && this.openerUrlSegments) {
			var key = this.openerUrlSegments.$url;
			var data = sessionStorage.getItem(key) !== "" ? JSON.parse(sessionStorage.getItem(key)) || {} : {};
			data.wcpreloadUrl = data.wcpreloadUrl || this.openerUrlSegments.workingCopyPreloadUrl;
			data.dataset = this.dataset;
			sessionStorage.setItem(key, JSON.stringify(data));
		}
	},
	getDataUrl: function() {
		var $parsedUrl = document.site.expressionMaker.parse(this, this.dataset.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	notifyChangeToServer: function(sendBag) {
		var self = this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.isPageSpyed) {
				document.site.spyGateway.spyNotify(sendBag);
			}
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.getDataUrl();
				sendBag.$etag = self.dataset.$etag;
				document.controller.sendRequest(self, {
					$location: {
						$url: self.getDataUrl()
					},
					data: sendBag,
					method: "PUT",
					$etag: sendBag.$etag
				}, function(data, response, requestUrl) {
					if (!self.disposed) {
						self.applyChange(data, response, requestUrl);
					}
				});
			}
		}
	},
	validateFields: function() {
		var isValidated;
		try {
			this.isServerNotifyDisabled = true;
			isValidated = Article.prototype.validateFields.call(this);
		} finally {
			this.isServerNotifyDisabled = false;
		}
		return isValidated;
	},
	findItemSetting: function($clientId, $layout) {
		var found;
		for (var ii = 0, jj = $layout.$items.length; !found && ii < jj; ii++) {
			var $item = $layout.$items[ii];
			if ($item.$clientId == $clientId) {
				return $item;
			} else {
				if ($item.$layout) {
					found = this.findItemSetting($clientId, $item.$layout);
				} else {
					if ($item.$layoutType) {
						found = this.findItemSetting($clientId, $item);
					}
				}
			}
		}
		return found;
	},
	fetch: function(options, callback, error) {
		if (options) {
			if (options.isPageLoading) {
				(options.params = options.params || {}).count = this.defaultItemsPerPage;
				delete options.isPageLoading;
			}
			delete options.field;
			this.lastFetchOptions = helpers.object.clone(options, true);
		} else {
			delete this.lastFetchOptions;
		}
		document.controller.sendRequest(this, options, callback, error);
	},
	fetchLastRequest: function(callback, error) {
		this.fetch(this.lastFetchOptions, callback, error);
	},
	freezeDeletedPage: function() {
		var $properties = {};
		var $binds = Object.keys(this.boundFields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			$properties[$binds[ii]] = {
				$isDisabled: true
			};
		}
		this.applyChange({
			$properties: $properties
		});
		var $binds = Object.keys(this.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var isDisabled = true;
			var $bind = $binds[ii];
			switch (this.$facet) {
				case "$details":
					isDisabled = ($bind != "$query");
					break;
			}
			if (isDisabled) {
				var menus = this.menuItems[$bind];
				for (var mm = 0, kk = menus.length; mm < kk; mm++) {
					menus[mm].disable(true);
				}
			}
		}
	},
	ensureDefaultArticle: function($article, $prototype) {
		if (!$article) {
			$article = {};
		}
		if (!$article.$layout) {
			$article.$layout = {};
		}
		if (!$article.$layout.$items) {
			var $items = [];
			var binds = Object.keys($prototype.$properties);
			for (var ii = 0, jj = binds.length; ii < jj; ii++) {
				var $field = $prototype.$properties[binds[ii]];
				if ($field && !$field.$isExcluded) {
					$items.push({
						$bind: binds[ii]
					});
				}
			}
			$article.$layout = {
				$items: [{
					$category: "section",
					$layout: {
						$items: [{
							$category: "section",
							$layout: {
								$items: $items
							}
						}]
					}
				}]
			};
		}
		return $article;
	},
	registerSectionBlock: function(section) {
		if (!section.boxParent.childrenSection) {
			section.boxParent.childrenSection = [];
		}
		section.boxParent.childrenSection.push(section);
	},
	unregisterSectionBlock: function(section) {
		if (section.boxParent.childrenSection) {
			var index = section.boxParent.childrenSection.indexOf(section);
			if (index >= 0) {
				section.boxParent.childrenSection.splice(index, 1);
			}
		}
	},
	applyEscape: function() {
		if (this.dialogWrapper) {
			this.dialogWrapper.close();
			return true;
		}
	},
	applyShortCuts: function(shortcurts, event, focusField) {
		var self = this;
		if (!focusField) {
			focusField = (self.focusField && !self.focusField.disposed) ? self.focusField : null;
		}
		if (shortcurts.esc) {
			if (shortcurts.g) {
				if (shortcurts.h) {
					document.site.gotoHome();
				}
				return true;
			}
			if (shortcurts.h || shortcurts.f11) {
				if ((shortcurts.h && (shortcurts.a || shortcurts.r)) || shortcurts.f11) {
					if (self.menuBar) {
						self.menuBar.collapse();
					}
					return true;
				}
				if (event.syraKeyMap == "h") {
					event.returnValue = false;
					if (event.preventDefault) {
						event.preventDefault();
					}
				}
			}
			if (shortcurts.enter) {
				self.clickMainMenu();
				return true;
			}
			if (shortcurts.left || shortcurts.right) {
				self.openNextTab(shortcurts.right);
				return true;
			}
			if (shortcurts.f1) {
				if (focusField) {
					focusField.page.externalAdapter.onFieldClickPicker({
						field: (event.shiftKey ? self : focusField),
						pickerType: "help",
						doEvent: function() {
							self.openHelp(event.shiftKey ? null : focusField);
						}
					});
				} else {
					self.openHelp();
				}
				return true;
			}
			if (shortcurts["delete"]) {
				(focusField ? focusField.articleParent : self).clickMenu("$delete");
				return true;
			}
			if (shortcurts.insert) {
				var article;
				if (focusField) {
					article = focusField.articleParent;
					while (!article.disposed && (article != article.page) && !article.menuItems.$create) {
						article = article.articleParent;
					}
				}
				(article || self).clickMenu("$create");
				return true;
			}
			if (shortcurts.n) {
				self.clickMenu("$create");
				return true;
			}
			if (shortcurts.p) {
				self.clickMenu("$print");
				return true;
			}
			if (focusField && ((!shortcurts.h && shortcurts.l) || shortcurts.f12)) {
				focusField.clickPicker("lookup");
				return true;
			}
			if (shortcurts.r) {
				var list = self.getLastFocusGrid(focusField);
				var lists = list ? [list] : self.getLists();
				if (lists) {
					for (var ii = 0, jj = lists.length; ii < jj; ii++) {
						var list = lists[ii];
						if (list && list.fitToWidth) {
							list.fitToWidth();
						}
					}
				}
				return true;
			}
			/*if (shortcurts.pagedown || shortcurts.pageup) {
             var list = self.getLastFocusGrid(focusField);
             var lists = list ? [list] : self.getLists();
             if (lists.length == 1 && lists[0].pagging) {
             lists[0].pagging.onShortKeyEvent(shortcurts.pagedown, shortcurts.shift);
             }
             return true;
             }*/
			if (shortcurts.a) {
				//selectAllGridLines
				// get current grid, we need to have focus at least of an element of the grid
				var list = self.getLastFocusGrid(focusField);
				var lists = list ? [list] : self.getLists();
				if (lists.length == 1 && lists[0].pagging) {
					var range = document.createRange();
					range.selectNode(lists[0].$$item[0]);
					window.getSelection().addRange(range);
				}
				return true;
			}
			if (focusField && (shortcurts.m || shortcurts.f4)) {
				if (shortcurts.shift) {
					focusField = focusField.articleParent;
				}
				if (focusField.menusBox && focusField.menusBox.domTitle) {
					$(focusField.menusBox.domTitle).click();
				}
				return true;
			}
			if (shortcurts.k || shortcurts.j) {
				self.clickMenu(shortcurts.k ? (shortcurts.shift ? "$first" : "$previous") : (shortcurts.shift ? "$last" : "$next"));
				return true;
			}
			if ((shortcurts[":"] && shortcurts.shift) || shortcurts.s || shortcurts.divide) {
				if (document.site.searchField) {
					var $searchFields = document.site.searchField.boundFields.$search;
					if ($searchFields && $searchFields.length) {
						$searchFields[0].focus();
					}
					return true;
				}

			}
		} else {
			if (shortcurts.enter || shortcurts.up || shortcurts.down) {
				if (!(focusField && focusField.$item && focusField.$item.$isFilterMode && shortcurts.enter)) {
					var list = this.getLastFocusGrid(focusField);
					if (list) {
						if (focusField && focusField.$$input && focusField.$$input[0].className === "s-filter-input") {
							list.$$item.focus();
							return true;
						} else {
							if (shortcurts.enter) {
								self.page.externalAdapter.onFieldEvent({
									field: focusField,
									event: event,
									doEvent: function() {
										var fnct = "onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1);
										if (focusField[fnct]) {
											focusField[fnct](event.target, event);
										}
									}
								});

							}
							return true;
						}
					}
				}
				return false;
			}
		}
		return false;
	},
	openHelp: function(field, $url) {
		var winId = "sageerphelp";
		if (!$url) {
			if (this.$prototype.$links && this.$prototype.$links.$help) {
				if (field) {
					$url = document.site.expressionMaker.parse(field.articleParent, this.$prototype.$links.$help.$url) + '#' + field.$item.$bind;
				} else {
					$url = document.site.expressionMaker.parse(this, this.$prototype.$links.$help.$url);
				}
			}
		}
		if ($url) {
			if (document.site && document.site.getBrowserName().toLowerCase() == "msie") {
				// Troubles with IE... to improve!
				window.open($url, "_blank");
				return;
			}
			if (!_helpTab.winRef || _helpTab.winRef.closed == undefined || _helpTab.winRef.closed) {
				_helpTab.winRef = window.open($url, winId, "width=800,height=600,resizable,scrollbars,status");
			} else
			if (_helpTab.lastUrl != $url) {
				_helpTab.winRef = window.open($url, winId, "resizable=true,scrollbars=yes,status=yes");
				if (_helpTab.winRef && _helpTab.winRef.focus) {
					_helpTab.winRef.focus();
				}
			} else
			if (_helpTab.winRef && _helpTab.winRef.focus) {
				_helpTab.winRef.focus();
			}
			_helpTab.lastUrl = $url;
		}
	},
	getLists: function() {
		var lists = [];
		var $binds = Object.keys(this.boundFields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var fields = this.boundFields[$binds[ii]];
			if (fields) {
				for (var mm = 0, kk = fields.length; mm < kk; mm++) {
					if (fields[mm] && fields[mm].isList) {
						lists.push(fields[mm]);
					}
				}
			}
		}
		return lists;
	},
	getTargetList: function(item) {
		var list = null;
		if (item) {
			var article = item.idMap ? item : item.articleParent;
			while (!list && article && !article.disposed && (article != article.page)) {
				if (article.isList) {
					list = article;
				}
				article = article.articleParent;
			}
		}
		return list;
	},
	getLastFocusGrid: function(item) {
		var list = this.getTargetList(item);
		if (list) {
			this.lastFocusGrid = list;
		}
		if (this.lastFocusGrid && this.lastFocusGrid.disposed) {
			this.lastFocusGrid = null;
		}
		return this.lastFocusGrid;
	},
	registerLastFocusGrid: function(item) {
		this.lastFocusGrid = this.getTargetList(item);
	},
	getBindTitle: function($bind, $field) {
		var $X3Name = $field ? $field.$X3Name : null;
		return $X3Name || $bind;
	},
	openNextTab: function(isRight) {
		// retrieve current sectionBlock
		var box = document.site.boxFocus;
		if (!box || box.disposed) {
			//find top tab
			for (var ii = 0, jj = this.childrenSection.length; ii < jj; ii++) {
				var child = this.childrenSection[ii];
				if (child.tabTitle && child.$item.$opened) {
					box = document.site.boxFocus = child;
					break;
				}
			}
		}
		if (box && !box.disposed) {
			var index = box.layoutParent.items.indexOf(box);
			if (index >= 0) {
				while (true) {
					index = isRight ? ++index : --index;
					if (index >= 0 && index < box.layoutParent.items.length) {
						var next = box.layoutParent.items[index];
						if (!next.isInvisible) {
							next.tabTitle.click();
							break;
						}
					} else {
						index = isRight ? -1 : box.layoutParent.items.length;
					}
				}
			}
		}
	},
	showOnEnter: function(domItem, event, show) {
		if (domItem) {
			domItem.style.visibility = (show || (event && event.type == "mouseenter")) ? "visible" : "hidden";
		}
	},
	toggleCssOnEnter: function(domItem, event) {
		if (domItem) {
			document.site.toggleClass(domItem, "s-enter", event && event.type == "mouseenter");
		}
	},
	getMasterPage: function() {
		return this;
	},
	reloadLayout: function($item, layoutSlot, shouldInsertNewItems) {
		this.startChange();
		var prevLayout = this.layoutContent && this.layoutContent.domItem;
		var fields = this.layoutContent.getFields();
		if (fields && fields.length) {
			this.reloadingFields = {};
			for (var ii = 0, jj = fields.length; ii < jj; ii++) {
				var field = fields[ii];
				if (field && field.$item && field.$item.$bind) {
					this.reloadingFields[field.$item.$bind] = field;
				}
			}
		}
		document.site.layoutUpdater.extractItems(this.layoutContent, fields);
		document.site.layoutUpdater.clearContent(this.layoutContent);
		this.$item = $item;
		var autoInsert = this.insertNewItems();
		this.ensureLayoutMode();
		this.renderLayoutContent(layoutSlot);
		this.reloadingFields = null;

		this.applyActionLinkChange(this.$prototype);
		this.applyActionLinkChange(this.dataset);
		if (prevLayout) {
			document.site.removeDomChild(prevLayout);
		}
		this.endChange();
		if (autoInsert) {
			autoInsert.showDiagnoses();
		}
	},
	insertNewItems: function(displayDiagnoses, designLevel) {
		// Auto insert fields/sections/blocks in authored page... just for Fusion for now
		if (this._autoInsertFields) {
			this._autoInsertFields.dispose();
		}
		if (this.isFusionPage === undefined && this.page ? this.page.isFusionPage : this.isFusionPage) {
			(this._autoInsertFields = new FieldsAutoInsert()).load(this, designLevel || "article");
		}
		if (this._autoInsertFields && displayDiagnoses) {
			this._autoInsertFields.showDiagnoses();
		}
		return this._autoInsertFields;
	}
});