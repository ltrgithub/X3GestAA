"use strict";
var helpers = require('syracuse-core/lib/helpers');

function SendBag() {}

exports.SendBag = helpers.defineClass(SendBag, null, {
	_findDataRecord: function($uuid) {
		var found;
		if (this.dataRecords) {
			for (var ii = 0, jj = this.dataRecords.length; ii < jj; ii++) {
				var dataRecord = this.dataRecords[ii];
				if (dataRecord.$uuid == $uuid) {
					found = {
						dataRecord: dataRecord,
						dataRecordIndex: ii
					};
					break;
				}
			}
		}
		return found;
	},
	_ensureFullDataSet: function(list) {
		var firstUpdated = this.dataRecords[0];
		var listDataset = list.ensureDataSet();
		this.dataRecords = [];
		for (var ii = 0, jj = listDataset.length; ii < jj; ii++) {
			var dataRecord = listDataset[ii];
			var saved;
			if (firstUpdated && firstUpdated.$uuid == dataRecord.$uuid) {
				delete firstUpdated.$index;
				saved = firstUpdated;
				firstUpdated = null;
			} else {
				saved = {
					$uuid: dataRecord.$uuid
				};
			}
			this.dataRecords.push(saved);
		}
		if (firstUpdated && !firstUpdated.$isDeleted) {
			delete firstUpdated.$index;
			this.dataRecords.unshift(firstUpdated);
		}
	},
	ensureRecord: function(record) {
		var dataRecord = record.dataset;
		dataRecord = dataRecord.$singleField || dataRecord;
		var found = this._findDataRecord(dataRecord.$uuid);
		if (!found) {
			if (this.dataRecords.length > 0) {
				this._ensureFullDataSet(record.list);
				found = this._findDataRecord(dataRecord.$uuid);
				if (!found) {
					found = {
						dataRecord: {
							$uuid: dataRecord.$uuid
						},
						dataRecordIndex: 0
					};
					this.dataRecords.unshift(found.dataRecord);
				}
			} else {
				found = {
					dataRecord: {
						$uuid: dataRecord.$uuid
					},
					dataRecordIndex: 0
				};
				if (record.$index !== undefined) {
					found.dataRecord.$index = record.$index;
				}
				this.dataRecords.push(found.dataRecord);
			}
		}
		return found;
	},
	saveRecordChange: function(record, $bind, value, $index) {
		var found = this.ensureRecord(record);
		found.dataRecord[$bind] = value;
		if (this.dataRecords.length == 1) {
			found.dataRecord.$index = $index;
		}
	},
	cleanServerIndex: function(list) {
		list = helpers.object.clone(list, true);
		if (list && list.length) {
			for (var ii = 0, jj = list.length; ii < jj; ii++) {
				delete list[ii].$serverIndex;
			}
		}
		return list;
	},
	saveDataChange: function(page, articleParent, $bind, value) {
		while (articleParent != page) {
			if (articleParent.isRecordArticle) {
				var list = articleParent.list;
				var listSendBag = articleParent.page.ensureSendBag(list);
				if (list.$prototype.$type == "application/x-array") {
					var dataRecords = list.ensureDataSet();
					if (list.builder.isSingleBuilder) {
						(listSendBag.dataRecords = dataRecords)[articleParent.$recordIndex] = value;
					} else {
						var found = list.findDataRecord(articleParent.$uuid);
						var $field = list.$fields[$bind];
						if ($field && $field.$type != "application/x-array") {
							dataRecords[found.dataRecordIndex][$bind] = value;
						}
						listSendBag.saveRecordChange(articleParent, $bind, value, found.dataRecordIndex);
					}
					value = this.cleanServerIndex(listSendBag.dataRecords);
				} else {
					if (list.$prototype.$type == "application/x-object") {
						if (!listSendBag.dataset) {
							listSendBag.dataset = list.ensureDataSet();
						}
						listSendBag.dataset[$bind] = value;
						if (list.$item.$variantItemKey) {
							value = {};
							value[list.$item.$variantItemKey] = listSendBag.dataset;
						} else {
							value = listSendBag.dataset;
						}
					}
				}
				$bind = list.$item.$bind;
				if (list.onAfterNotifyDataChange) {
					list.onAfterNotifyDataChange(listSendBag);
				}
				articleParent = list.articleParent;
			} else {
				if (articleParent.arrayLevel != "array") {
					if (articleParent.dataset && articleParent.dataset.$uuid !== undefined) {
						this.$uuid = articleParent.dataset.$uuid;
					}
					this[$bind] = value;
				} else {
					value = this.cleanServerIndex(value);
				}
				articleParent = articleParent.articleParent;
			}
		}
		if (articleParent.dataset && articleParent.dataset.$uuid !== undefined) {
			this.$uuid = articleParent.dataset.$uuid;
		}
		this[$bind] = value;
	},
	dispose: function() {
		delete this.dataRecords;
	}
});