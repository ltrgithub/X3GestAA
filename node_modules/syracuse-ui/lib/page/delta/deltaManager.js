"use strict";
var helpers = require('syracuse-core/lib/helpers');

function DeltaManager() {}

exports.DeltaManager = helpers.defineClass(DeltaManager, null, {
	applyObjectArrayDelta: function(targetList, sourceList) {
		if (sourceList) {
			if (targetList.length == sourceList.length) {
				for (var ii = 0, jj = sourceList.length; ii < jj; ii++) {
					this.applyObjectDelta(targetList[ii], sourceList[ii]);
				}
			} else {
				targetList.splice(0, targetList.length);
				for (var ii = 0, jj = sourceList.length; ii < jj; ii++) {
					targetList.push(sourceList[ii]);
				}
			}
		}
		return targetList;
	},
	applyPageArrayDelta: function(targetList, sourceList) {
		if (sourceList) {
			var targetMap = {};
			if (this.page.$isPartialDelta || (sourceList.length == 1 && sourceList[0].$index !== undefined)) {
				var found, foundIndex;
				for (var ii = 0, jj = sourceList.length; ii < jj; ii++) {
					found = null;
					var sourceRecord = sourceList[ii];
					foundIndex = 0;
					for (var mm = targetList.length; foundIndex < mm; foundIndex++) {
						found = targetList[foundIndex];
						if (found.$uuid == sourceRecord.$uuid) {
							break;
						} else {
							found = null;
						}
					}
					if (found) {
						if (sourceRecord.$isDeleted) {
							targetList.splice(foundIndex, 1);
						} else {
							this.applyObjectDelta(found, sourceRecord);
							if (sourceRecord.$index !== undefined && sourceRecord.$index != foundIndex) {
								targetList.splice(foundIndex, 1);
								targetList.splice(sourceRecord.$index, 0, found);
								delete found.$index;
							}
						}
					} else {
						if (!sourceRecord.$isDeleted) {
							if (sourceRecord.$index !== undefined) {
								targetList.splice(sourceRecord.$index, 0, sourceRecord);
							} else {
								targetList.push(sourceRecord);
							}
						}
					}
				}
			} else {
				for (var ii = 0, jj = targetList.length; ii < jj; ii++) {
					var record = targetList[ii];
					if (record && record.$uuid !== undefined) {
						targetMap[record.$uuid] = record;
					}
				}
				targetList = [];
				for (var ii = 0, jj = sourceList.length; ii < jj; ii++) {
					var record = sourceList[ii];
					if (record.$uuid !== undefined) {
						if (!record.$isDeleted) {
							if ((record.$uuid !== undefined) && targetMap[record.$uuid]) {
								targetList.push(this.applyObjectDelta(targetMap[record.$uuid], record));
							} else {
								targetList.push(record);
							}
						}
					} else {
						targetList.push(record);
					}
				}
			}
		}
		return targetList;
	},
	ensureServerIndex: function(list) {
		for (var ii = 0, jj = list.length; ii < jj; ii++) {
			list[ii].$serverIndex = ii;
		}
	},
	applyObjectDelta: function(target, source, isObjectDelta) {
		if (source) {
			var properties = Object.keys(source);
			for (var ii = 0, jj = properties.length; ii < jj; ii++) {
				var property = properties[ii];
				var targetValue = target[property];
				var sourceValue = source[property];
				if (typeof(sourceValue) == 'object') {
					if (!(targetValue == null || sourceValue === null)) {
						if (Array.isArray(sourceValue)) {
							if (isObjectDelta) {
								sourceValue = this.applyObjectArrayDelta(targetValue, sourceValue);
							} else {
								if (this.page.$isEditMode || this.page.$isPartialDelta) {
									sourceValue = this.applyPageArrayDelta(targetValue, sourceValue);
								}
							}
						} else {
							sourceValue = this.applyObjectDelta(targetValue, sourceValue, isObjectDelta);
						}
					}
					if (Array.isArray(sourceValue)) {
						this.ensureServerIndex(sourceValue);
					}
				}
				target[property] = sourceValue;
			}
		}
		return target;
	}
});