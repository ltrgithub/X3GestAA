"use strict";
var helpers = require('syracuse-core/lib/helpers');








exports.notifyActionChange = function(page, target, value, notifyServer){
    if (target != page) {
        var list = target.list || target;
        if (list.$prototype.$type == "application/x-array") {
            if (value.$delete || value.$create) {
                var record = target.arrayLevel == "record" ? target : null;
                if (value.$delete) {
                    list.helper.notifyDeleteRecord(list, record);
                }
                if (value.$create) {
                    list.helper.notifyCreateRecord(list, record);
                }
                return;
            }
        }
    }
    var articleParent = target.getArticle();
    var sendBag = page.ensureSendBag();
    var articleSendBag = page.ensureSendBag(articleParent);
    var $actions;
    var $bind;
    var dataset = articleSendBag.dataset || articleSendBag;
    if (target.$item && target.$item.$bind) {
        var $properties = dataset.$properties = dataset.$properties || {};
        $properties = $properties[target.$item.$bind] = $properties[target.$item.$bind] || {};
        $actions = $properties.$actions = $properties.$actions || {};
        $bind = "$properties";
    }
    else {
        $bind = "$actions";
        $actions = dataset.$actions = dataset.$actions || {};
    }
    Object.keys(value).forEach(function($bind){
        $actions[$bind] = value[$bind];
    });
    value = dataset[$bind];
    if (articleParent != page) {
        while (articleParent != page) {
            if (articleParent.arrayLevel == "record") {
                var list = articleParent.list;
                var listSendBag = page.ensureSendBag(list);
                if (list.$prototype.$type == "application/x-array") {
                    var found = list.helper.findDataRecord(list,articleParent.$uuid);
                    listSendBag.saveRecordChange(articleParent, $bind, value, found.dataRecordIndex);
                    value = listSendBag.dataRecords;
                }
                else {
                    if ($bind) {
                        (listSendBag.dataset = listSendBag.dataset || {})[$bind] = value;
                    }
                    value = listSendBag.dataset;
                }
                $bind = list.$item.$bind;
                articleParent = list.articleParent;
            }
            else {
                if (articleParent.arrayLevel != "array") {
                    if (articleParent.dataset && articleParent.dataset.$uuid) {
                        sendBag.$uuid = articleParent.dataset.$uuid;
                    }
                    sendBag[$bind] = value;
                }
                articleParent = articleParent.getArticleParent();
            }
        }
        sendBag[$bind] = value;
    }
    if (notifyServer !== false) {
        if (page.dataset && page.dataset.$uuid !== undefined) {
            sendBag.$uuid = page.dataset.$uuid;
        }
        page.notifyChangeToServer(sendBag);
    }
};


exports.notifyDataChange = function(page, field, value){
    var sendBag = page.ensureSendBag();
    sendBag.saveDataChange(page, field.getArticle(), field.$item.$bind, value);
    page.notifyChangeToServer(sendBag);
    
    // saving data for "404 working copy session expired" cases
    if (sessionStorage) {
        if (page && page.openerHttpQuery) {
            var key = page.openerHttpQuery.$url;
            var data = JSON.parse(sessionStorage.getItem(key)) || {};
            data.wcpreloadUrl = data.wcpreloadUrl || page.openerHttpQuery.workingCopyPreloadUrl;
            data.dataset = page.dataset;
            sessionStorage.setItem(key, JSON.stringify(data));
        }
    }
    
};
