"use strict";
var helpers = require('syracuse-core/lib/helpers');

function SubModuleBuilder() {}

exports.SubModuleBuilder = helpers.defineClass(SubModuleBuilder, null, {
	initialize: function(list) {
		this.list = list;
		this.emptyMessage = syra_local.nvpNoSubModule;
		list.onRecordReorderStart = function(ddAgent) {
			ddAgent.boundaryItem = list.articleParent.subModulesAdminTitleList;
		};
		list.onRecordReorderCalculatePosition = function(ddAgent) {
			ddAgent.$drag = syra_site.dom.getBoundingClientRect(ddAgent.targetRecord.header);
		};
		list.$item.$isTopLabelAlignment = true;
		if (!list.$item.$layout || !list.$item.$layout.$items) {
			list.$item.$layout = list.defineDefaultCard().$layout;
		}
		list.$item.$alternateStyle = false;
	},
	endInitiallize: function() {},
	isDraggable: function(target, event) {
		return this.list.isReorderRecordDraggable(target, event);
	},
	list_onItemInOut: function(onEnter, event, target) {

	},
	list_emptyBody: function(addEmptySlot, onFetch) {
		this.list.filler.emptyBody(this.list, addEmptySlot, onFetch);
		if (this.list.page.isAdminMode) {
			syra_site.dom.empty(this.list.articleParent.subModulesAdminTitleList);
			addEmptySlot && this.list.articleParent.subModulesAdminTitleList.appendChild(this.emptyDataItem);
		}
	},
	list_onAfterSetDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		if (this.list.records.length && !this.list.selector.getSelectedRecord()) {
			this.list.selector.selectRecord(this.list.recordsMap[this.list.page.preferences.$submodule] || this.list.records[0], true);
		}
	},
	list_onAfterDraw: function() {
		this.list.body = this.list._core;
		this.list._dataValue.style.overflow = "auto";
		this.list.$skin = this.list.$item.$skin || "s-cards";
		this.list.applyDesignMetaData(this.list.$item, false);
		this.list.loadSelector();
		this.list.applyCapabilities();
		this.list.ensureLayoutMode();
		this.list.layoutSlot.appendChild(this.list.domItem);
		syra_site.dom.removeChild(this.list.topbar);
		syra_dd.addToColResizers(this.list, true);
	},
	record_onBeforeLoad: function(record, initData, isCreateAction) {
		record.isSubModuleRecord = true;
		record.$defaultSkinSection = record.$defaultSkinBlock = this.list.$item.$skinCard || "s-h3";
	},
	record_onBeforeApplyChange: function(record, metaData, serverResponse) {
		serverResponse && syra_site.deltaManager.applyObjectDelta(record.page, record.dataset, metaData);
	},
	record_onAfterApplyChange: function(record, metaData) {
		if (record.dataset.description && record.dataset.description != record.dataset.title) {
			record.domItem.title = record.dataset.description;
		}
	},
	record_onItemInOut: function(record, onEnter, event) {
		if (this.list.selector) {
			record.highlightOnEnter(onEnter, event);
			record.header && syra_site.dom.toggleClass(record.header, "s-record-enter", onEnter);
		}
	},
	record_reorder: function(record, target, isAfter) {
		if (target) {
			target.domItem.parentNode.insertBefore(record.domItem, isAfter ? target.domItem.nextSibling : target.domItem);
			if (record.page.isAdminMode) {
				target.header.parentNode.insertBefore(record.header, isAfter ? target.header.nextSibling : target.header);
			}
		} else {
			if (isAfter) {
				this.list.body.appendChild(record.domItem);
			} else {
				this.list.body.insertBefore(record.domItem, this.list.body.firstChild);
			}
			if (record.page.isAdminMode) {
				var list = this.list.articleParent.subModulesAdminTitleList;
				if (isAfter) {
					list.appendChild(record.header);
				} else {
					list.insertBefore(record.header, list.firstChild);
				}
			}
		}
	},
	record_onSelect: function(record, selected) {
		if (record.page.isAdminMode) {
			syra_site.dom.toggleClass(record.header, "s-list-record-selected", selected);
			record.domItem.style.display = selected ? "" : "none";
			if (selected) {
				record.page.setPreferences(null, record.dataset.$uuid);
				if (record.page.selectedModule) {
					record.page.refreshExpandAllLinks(record.page.selectedSubModuleRecord = record.page.selectedModule.selectedSubModuleRecord = record);
				}
			}
		}
	},
	record_dispose: function(record) {
		if (record.page && record.page.selectedSubModuleRecord == record) {
			delete record.page.selectedSubModuleRecord;
		}
	},
	record_draw: function(record) {
		record.$useDeletePicker = true;
		record.$item.$isPickerMenuHidden = true;
		record.$isVerticalDirection = true;
		record.domItem = document.createElement("div");
		record.$skin = record.page.isAdminMode ? "s-nav-admin-submodule" : "s-nav-submodule";
		record.domItem.className = record.$skin;
		record.domItem.syraRecord = record.$uuid;

		record.header = document.createElement("header");
		record.header.className = record.$skin + "-head";
		if (record.page.isAdminMode) {
			record.domTitle = document.createElement("div");
			record.domTitle.className = record.$skin + "-title";
			record.header.setAttribute("data-s-record", record.header.syraRecord = record.$uuid);
			this.list.articleParent.subModulesAdminTitleList.appendChild(record.header);
			record.setArticleId(record.header);
			record.header.syrainout = record.header.syraItem = record.id;
			record.domItem.style.display = "none";
			record.domTitle.syraOnClick = "onSelectorClick";
			record.domTitle.className += " s-list-selector-row";
		} else {
			record.domTitle = syra_menus.addTextButton("", record.$skin + "-title", "onExpandSubModule", null, "node_expanded");
			record.domTitle.title = syra_local.nvpCollapseSubModule;
			record.domTitle.syraItem = record.id;
			record.domTitle.syraTip = 2;
			record.domItem.appendChild(record.header);
		}
		record.header.appendChild(record.domTitle);
		record.reorderBtnParent = record.domTitle.parentNode;
		record.dataSlot = record.body = document.createElement("div");
		record.body.className = record.$skin + "-body";
		record.isExpanded = true;
		if (record.page.isAdminMode) {
			record.menusSlot = record.header;
		} else {
			var slot = document.createElement("div");
			slot.className = "s-nav-submodule-head-btns";
			record.header.appendChild(slot);
			record.btnExpandAll = slot.appendChild(syra_menus.addIconButton(syra_local.nvpExpandAll, "s-nav-submodule-expand", "onExpandAll", null, "expand"));
			record.btnExpandAll.syraItem = record.id;
			record.btnCollapseAll = slot.appendChild(syra_menus.addIconButton(syra_local.nvpCollapseAll, "s-nav-submodule-expand", "onExpandAll", null, "collapse"));
			record.btnCollapseAll.syraItem = record.id;
			record.btnCollapseAll.syraRecord = record.btnExpandAll.syraRecord = record.id;
		}
		record.itemsFieldSlot = document.createElement("div");
		record.itemsFieldSlot.className = record.page.isAdminMode ? "s-nav-admin-submodules-slot" : "s-nav-submodules-slot";
		record.body.appendChild(record.itemsFieldSlot);
		record.itemsField = record.page.loadNewItem(record.itemsFieldSlot, {
			$isTitleHidden: true,
			$bind: "items"
		}, record);

		this.list.applyCapabilitiesToRecord(record);
		record.page.isAdminMode && this.list.addReorder(record);

		var slot = document.createElement("div");
		slot.className = record.$skin + "-title-value";
		record.cardItem = record.page.loadNewItem(record.domTitle.appendChild(slot), {
			$bind: "title",
			$category: "field",
			$isDetailLinkDisabled: true,
			$isMenusHidden: true,
			$isEditMode: record.$isEditMode,
			$inplace: true
		}, record);
		this.list._core.appendChild(record.domItem);
		record.domItem.appendChild(record.body);

	},
	dispose: function() {
		if (this.list) {
			syra_dd.addToColResizers(this.list, false);
			syra_site.dom.empty(this.list._core);
			this.list.rows = null;
		}
	}
});