"use strict";
var helpers = require('syracuse-core').helpers;

function MenuItem(navParent, dataset) {
	syra_item.initialize(navParent.page, this);
	this.$skin = navParent.$skin_menu || this.page.$skin + "-link";
	this.navParent = navParent;
	this.submodule = navParent.submodule || navParent;
	this.load(dataset);
}

MenuItem.prototype.load = function(dataset) {
	this.dataset = dataset;
	this.slot = syra_dom.li(this.$skin + "-slot");
	this.domItem = syra_dom.anchor(this.$skin);
	this.domItem.textContent = dataset.title;
	this.domItem.syraItem = this.id;
	this.domItem.syraOnClick = "click";

	var _$executes = ["$execute_$query", "$execute_$details", "$execute_$edit", "$execute_$cube"];
	if (this.dataset && this.dataset.$links) {
		this.page = this.submodule.page;
		this.articleParent = this.submodule;

		for (var ii = 0, jj = _$executes.length; ii < jj; ii++) {
			var $execute = this.dataset.$links[_$executes[ii]];
			if ($execute) {
				$execute.$title = $execute.$title;
				if (this.dataset.convergenceFunction) {
					$execute.$description = syra_local.nvpFunction + ": " + this.dataset.convergenceFunction;
				} else {
					if (this.dataset.entity) {
						$execute.$description = syra_local.nvpEntity + ": " + this.dataset.entity;
						if (this.dataset.entity != helpers.string.pluralize(this.dataset.representation || "")) {
							$execute.$description += " (" + syra_local.nvpRepresentation + ": " + this.dataset.representation + ")";
						}
					}
				}
				if (!$execute.$description) {
					$execute.$description = this.dataset.$description;
				}

				var props = Object.keys($execute);
				for (var mm = 0, kk = props.length; mm < kk; mm++) {
					var prop = props[mm];
					this[prop] = $execute[prop];
				}

				this.$url = $execute.$url;
				syra_url.history.setHref(this);

				this.codeMenu = {
					href: this.href,
					$url: this.$url,
					description: this.description,
					title: this.title
				};

				this.singleField = {
					$variantItemKey: "menuItem",
					variantItem: this
				};

				this.domItem.title = this.$description || this.$title;
				this.singleField.$variantItemKey = "menuItem";
				this.isMenuItem = true;
				this.$item = {};

				this.urlSegment = syra_url.parse(this.codeMenu.$url);
				this.page.showBookmarks && this.addBookmarkButton(this);
				break;
			}
		}
	}

	this.slot.appendChild(this.domItem);
};

MenuItem.prototype.addBookmarkButton = function(menuItem) {
	var self = this;
	if (syra_bookmarks) {
		if (this.codeMenu.href) {
			this.bookmarkBtn = syra_button.add({
				parent: this,
				text: syra_local.bookmarks_switch_on,
				css: "s-nav-menu-bookmark",
				iconOnly: true,
				fontIcon: "bookmark_off",
				click: function() {
					syra_bookmarks.onSiteMapMenuItemAddClick(menuItem);
					self.toggleBookmarkButton(this, menuItem.isBookmarkEnabled);
				}
			});

			this.domItem.syrainout = this.id;
			this.bookmarkBtn && this.domItem.appendChild(this.bookmarkBtn.link);

			if (syra_bookmarks.findMenuItem(menuItem.urlSegment)) {
				menuItem.isBookmarkEnabled = true;
			} else {
				menuItem.isBookmarkEnabled = false;
			}

			this.toggleBookmarkButton(this.bookmarkBtn, menuItem.isBookmarkEnabled);
		} else {
			this.codeMenu.domItem.setAttribute("href", "#");
		}
	}
};

MenuItem.prototype.toggleBookmarkButton = function(btn, isOn) {
	syra_button.setText(btn, isOn ? syra_local.bookmarks_switch_off : syra_local.bookmarks_switch_on, isOn ? "bookmark_on" : "bookmark_off");
};

MenuItem.prototype.onItemInOut = function(onEnter) {
	if (this.singleField.$variantItemKey == "menuItem") {
		var menuItem = this.singleField.variantItem;
		if (menuItem.bookmarkBtn && !menuItem.isBookmark) {
			menuItem.bookmarkBtn.link.style.visibility = onEnter ? "visible" : "";
		}
	} else {
		if (this.singleField && this.singleField.variantItem) {
			syra_dom.toggleClass(this.reorderBtn, "s-enter", onEnter);
		}
	}
};

MenuItem.prototype.click = function(event) {
	var self = this;
	syra_menus.click.fire({
		menu: this,
		event: event

	}, event);
	setTimeout(function() {
		self.page.onNavMenuClick();
	}, 200);
};

exports.add = function(navParent, dataset) {
	return new MenuItem(navParent, dataset);
};