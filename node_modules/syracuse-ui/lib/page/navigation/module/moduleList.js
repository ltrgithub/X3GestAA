"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ModuleRecord = require("./moduleRecord").ModuleRecord;
var MultiList = require("syracuse-ui/lib/field/array/multiList").MultiList;

function ModuleList() {

}

exports.ModuleList = helpers.defineClass(ModuleList, MultiList, {
	loadBox: function(initData) {
		this.emptyMessage = syra_local.nvpNoModule;
		this.$confirmDelete = syra_local.nvpConfirmDeleteModule;
		this.$isEditMode = false;
		this.$isQuickDesignerDisabled = true;
		this.$itemRecordMenuSkin = "s-mn-ldp-record-link";
		this.$itemMenuSkin = "s-mn-ldp-link";
		this.$iconPath = "page/s-ldp-";
		this.$item.$isPagerHidden = true;
		this.$item.$selectMode = "row";
		MultiList.prototype.loadBox.call(this, initData);
	},
	showRecordSelection: function(record, selected) {
		MultiList.prototype.showRecordSelection.call(this, record, selected);
		var page = record.page;
		if (page.isAdminMode) {
			if (selected) {
				page.selectedModule = record;
				if (!record.subModulesItem) {
					record.subModulesHead = document.createElement("div");
					record.subModulesHead.className = "s-nav-admin-submodules-head";
					record.subModulesAdminActions = document.createElement("div");
					record.subModulesHead.appendChild(record.subModulesAdminActions).className = "s-nav-admin-submodules-menus-slot";

					record.subModulesAdminTitleList = document.createElement("div");
					record.subModulesHead.appendChild(record.subModulesAdminTitleList).className = "s-nav-admin-submodules-titles";

					record.subModulesAdminBodySep = document.createElement("div");
					record.subModulesAdminBodySep.className = "s-nav-admin-body-sep";
					record.subModulesBody = document.createElement("div");
					record.subModulesBody.className = "s-nav-admin-submodules-body";
					record.subModulesItem = page.loadNewItem(record.subModulesBody, {
						$isTitleHidden: true,
						$bind: "submodules"
					}, record);
					page.adminTableBody.appendChild(record.subModulesHead);
					page.adminTableBody.appendChild(record.subModulesAdminBodySep);
					page.adminTableBody.appendChild(record.subModulesBody);
				}
				page.refreshExpandAllLinks(page.selectedSubModuleRecord = record.selectedSubModuleRecord, true);
			} else {
				if (page.selectedModule == record) {
					page.selectedModule = null;
				}
			}
			record.subModulesHead.style.display = record.subModulesAdminBodySep.style.display = record.subModulesBody.style.display = selected ? "" : "none";
		} else {
			if (selected) {
				if (!record.subModulesItem) {
					record.subModulesSlot = document.createElement("div");
					record.subModulesSlot.className = "s-nav-submodules-slot";
					record.subModulesBody = document.createElement("div");
					record.subModulesBody.className = "s-nav-submodules-body";
					record.subModulesItem = page.loadNewItem(record.subModulesBody, {
						$isTitleHidden: true,
						$bind: "submodules"
					}, record);
					record.subModulesSlot.appendChild(record.subModulesBody);
					page.layoutContent.domItem.appendChild(record.subModulesSlot);
				}
				record.subModulesSlot.style.display = "";
			} else {
				if (record.subModulesSlot) {
					record.subModulesSlot.style.display = "none";
				}
			}
		}
		if (selected && page.isPageLoaded) {
			page.setPreferences(record.dataset.$uuid);
			page.ensurePageVisibility();
		}
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		MultiList.prototype.setDataBind.call(this, dataRecordSet, parentDataRecord, metaData);
		if (this.records.length && this.selector.uuid == undefined) {
			this.selector.selectRecord(this.page.preferences.$module, true, true);
		}
	},
	drawBox: function() {
		MultiList.prototype.drawBox.call(this);
		this.body = this._core;
		this._dataValue.style.overflow = "auto";
		this.$skin = this.$item.$skin || "s-cards";
		this.applyDesignMetaData(this.$item, false);
		this.loadSelector();
		this.capabilityMaker.apply(this);
		syra_dd.colResizer.push(this);
		this.ensureLayoutMode();
		this.layoutSlot.appendChild(this.domItem);
	},
	initializeList: function() {
		this.$item.$isTopLabelAlignment = true;
		this.RecordClass = ModuleRecord;
		if (!this.$item.$layout || !this.$item.$layout.$items) {
			this.$item.$layout = this.defineDefaultCard().$layout;
		}
		this.$item.$alternateStyle = false;
		MultiList.prototype.initializeList.call(this);
	},
	isDraggable: function(target, event) {
		return this.isReorderRecordDraggable(target, event);
	},
	dispose: function() {
		syra_site.dom.empty(this._core);
		MultiList.prototype.dispose.call(this);
	}
});