"use strict";
var helpers = require('syracuse-core/lib/helpers');
var BarSplitter = require("syracuse-ui/lib/page/utility/barSplitter").BarSplitter;

function ModuleBar() {}

exports.ModuleBar = helpers.defineClass(ModuleBar, BarSplitter, {
	load: function(page) {
		this.options = {
			resizeDirection: {
				right: true
			},
			$skins: {
				bar: "s-nav-modulebar",
				openerPicker: "s-nav-modulebar-opener",
				resizeBar: "s-nav-modulebar-resizer"
			}
		};
		var preferences = document.site.ensurePreferences() || {};
		if (!preferences.moduleBar) {
			preferences.moduleBar = {
				isDocked: true,
				isCollapsed: false
			};
		};
		this.preferences = preferences.moduleBar;

		this.barSlot = document.createElement("div");
		this.barSlot.className = "s-nav-modulebar-slot";

		this.barBody = document.createElement("div");
		this.barBody.className = "s-nav-modulebar-body";
		this.barBody.setAttribute("data-s-inout", page.id);
		this.isSlotVisible = true;
		page.domItem.insertBefore(this.barSlot, page.domItem.firstChild);
		BarSplitter.prototype.load.call(this, page);
	},
	onBarBodyAdded: function() {
		this.page.loadNewItem(this.barBody, {
			$isTitleHidden: true,
			$bind: "modules"
		});
	},
	_onResizeBody: function() {
		//blockHeight = this.barBody.clientHeight - blockHeight;
		//this.openedBlock.$$item[0].style.height = blockHeight + "px";
	},
	getArticle: function() {
		return this.page.getArticle();
	},
	dispose: function() {
		if (this.blocks) {
			for (var ii = 0, jj = this.blocks.length; ii < jj; ii++) {
				delete this.blocks[ii].leftList;
			}
			delete this.blocks;
		}
		this.$fusionBar = null;
		BarSplitter.prototype.dispose.call(this);
	}
});