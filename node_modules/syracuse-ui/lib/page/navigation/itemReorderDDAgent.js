"use strict";
var helpers = require('syracuse-core/lib/helpers');

function ItemReorderDDAgent() {}

exports.ItemReorderDDAgent = helpers.defineClass(ItemReorderDDAgent, null, {
	start: function(dropItem) {
		this.isNavigationItemReorderDDAgent = true;
		syra_dd.ddAgent = this;
		this.reorderRecord = dropItem.reorderRecord;
		this.list = dropItem.list;
		this.scrollViewRect = this.list.page.getScrollviewSize();
		this.scrollViewRect.item = this.list.page.scrollview;
		this.scrollViewRect.scrollWidth = this.scrollViewRect.item.scrollWidth;
		this.scrollViewRect.scrollHeight = this.scrollViewRect.item.scrollHeight;
		this.boundary = this.list.subModuleRecord.body.getBoundingClientRect();
		this.boundaryItem = this.list.subModuleRecord.domItem;
	},
	onDragMouseMove: function(target, event) {
		if (event.target) {
			if (this.boundaryItem.contains(event.target)) {
				var target = event.target;
				while (target && target != this.boundaryItem) {
					if (target.syraRecord !== undefined && syra_item.findRecord(this.list, target)) {
						if (this.reorderRecord) {
							this.moveDragImage(event, syra_item.get(target.syraRecord));
							event.stopPropagation();
							return;
						}
					}
					if (target.syraIsEmptyItem) {
						if (this.reorderRecord) {
							var record = {
								domItem: target,
								list: syra_item.get(target.syraIsEmptyItem)
							};
							this.moveDragImage(event, record);
						}
						event.stopPropagation();
						return;
					}
					target = target.parentNode;
				}
			}
		}
		if (!event.target || event.target && event.target.className.indexOf("s-list-drop-cue") < 0) {
			this.moveDragImage(event, null, true);
		}
	},
	onDragMouseUp: function(target, event) {
		if (this.targetRecord) {
			var isAfter = this.$drag.$insert == "insertAfter";
			var source_list = this.reorderRecord.list;
			var target_list = this.targetRecord.list;
			var source_dataRecords = syra_dataset.ensure(source_list);
			var source_dataRecord = source_dataRecords[this.reorderRecord.dataset.$serverIndex];
			var $prevReorderedIndex = this.reorderRecord.dataset.$serverIndex;
			var sourceRecordIndex = this.reorderRecord.getRecordIndex();
			var target_dataRecords = syra_dataset.ensure(target_list);
			source_dataRecords.splice(this.reorderRecord.dataset.$serverIndex, 1);
			source_list.records.splice(sourceRecordIndex, 1);

			if (target_dataRecords.length) {
				var targetRecordIndex = this.targetRecord.getRecordIndex();
				if ((target_list == source_list) && targetRecordIndex > sourceRecordIndex) {
					sourceRecordIndex = isAfter ? targetRecordIndex : (targetRecordIndex - 1);
				} else {
					sourceRecordIndex = isAfter ? targetRecordIndex + 1 : (targetRecordIndex);
				}
				if ((target_list == source_list) && this.targetRecord.dataset.$serverIndex > this.reorderRecord.dataset.$serverIndex) {
					this.reorderRecord.dataset.$serverIndex = isAfter ? this.targetRecord.dataset.$serverIndex : (this.targetRecord.dataset.$serverIndex - 1);
				} else {
					this.reorderRecord.dataset.$serverIndex = isAfter ? this.targetRecord.dataset.$serverIndex + 1 : (this.targetRecord.dataset.$serverIndex);
				}
				sourceRecordIndex = Math.max(sourceRecordIndex, 0);
				this.reorderRecord.dataset.$serverIndex = Math.max(this.reorderRecord.dataset.$serverIndex, 0);
			} else {
				this.reorderRecord.dataset.$serverIndex = 0;
			}
			target_dataRecords.splice(this.reorderRecord.dataset.$serverIndex, 0, source_dataRecord);
			target_list.records.splice(sourceRecordIndex, 0, this.reorderRecord);
			this.reorderRecord.list.builder.record_reorder(this.reorderRecord, this.targetRecord, isAfter);


			target_list.filler.validateDisplay(target_list);
			var target_sendBag = syra_form.getSendBag(target_list);
			for (var ii = 0, jj = target_dataRecords.length; ii < jj; ii++) {
				target_dataRecords[ii].$serverIndex = ii;
			}
			target_sendBag.dataRecords = target_dataRecords;


			if (target_list != source_list) {
				source_list.filler.validateDisplay(source_list);
				var source_sendBag = syra_form.getSendBag(source_list);
				for (var ii = 0, jj = source_dataRecords.length; ii < jj; ii++) {
					source_dataRecords[ii].$serverIndex = ii;
				}
				source_sendBag.dataRecords = source_dataRecords;
				source_list.page.onFormUpdateDelta(source_list, source_sendBag.dataRecords, false);
			}
			source_list.page.onFormUpdateDelta(target_list, target_sendBag.dataRecords);
		}
		syra_dom.remove(this._info);
		syra_dom.remove(this._dropCue);
	},
	moveDragImage: function(event, targetRecord, isOut) {
		this.$action = null;
		if (targetRecord) {
			if (this.reorderRecord && this.reorderRecord != targetRecord) {
				this.$action = {
					$move: true
				};
				this._ensureDragImage();
				this._info.textContent = syra_local.flMoveItem;
			}
		}

		syra_pageBuilder.autoScroll(this.scrollViewRect, event);
		var top = Math.max(event.pageY, this.boundary.top);
		var left = Math.max(event.pageX, this.boundary.left);
		top = Math.min(top, this.boundary.bottom);
		left = Math.min(left, this.boundary.right);

		var inBoundary = (event.pageX == left && event.pageY == top);
		this._ensureDragImage();
		if (!isOut && this.$action) {
			syra_dom.toggleClass(this._info, "s-drag-ok", true);
			this.targetRecord = targetRecord;
		} else {
			if (isOut) {
				this._info.textContent = syra_local.flMoveItem.replace("{0}", "move record");
			}
			syra_dom.toggleClass(this._info, "s-drag-ok", false);
			this.targetRecord = null;
		}
		this.moveDragCue(event);
		this._info.style.display = "";
		this._info.style.top = top + 15 + "px";
		this._info.style.left = left + 15 + "px";
	},
	moveDragCue: function(event) {
		var $position = null;
		if (event && this.targetRecord) {
			$position = this._calculateDropCuePosition(event);
		}
		if (!this._dropCue) {
			this._dropCue = document.createElement("div");
			this._dropCue.className = "s-list-drop-cue";
			syra_site.layoutSlot.appendChild(this._dropCue);
		}
		this._dropCue.className = "s-list-drop-cue";
		if ($position) {
			this._dropCue.style.display = "block";
			var style = this._dropCue.style;
			style.top = $position.top + "px";
			style.left = $position.left + "px";
			style.width = $position.width;
			style.height = $position.height;
			style.display = "block";
		} else {
			this._dropCue.style.display = "none";
		}
	},
	_calculateDropCuePosition: function(event) {
		var offset = this.targetRecord.domItem.getBoundingClientRect();
		this.$drag = {
			top: offset.top,
			left: offset.left,
			height: offset.height,
			width: offset.width
		};
		//calculateDropBoundary
		var xmargin = (this.$drag.width * 0.25);
		var ymargin = (this.$drag.height * 0.25);
		var $dropBoundary = {
			left: this.$drag.left + xmargin,
			right: this.$drag.left + this.$drag.width - xmargin,
			top: this.$drag.top + ymargin,
			bottom: this.$drag.top + this.$drag.height - ymargin
		};
		var $position = {
			top: this.$drag.top,
			left: this.$drag.left
		};
		var isAfter = false;
		if (this.reorderRecord.$isVerticalDirection) {
			var bottom = $dropBoundary.bottom;
			if (isAfter = event.pageY > $dropBoundary.bottom) {
				$position.top = $dropBoundary.bottom + ymargin;
			} else {
				$position.top = this.$drag.top;
			}
			$position.height = "0.2em";
			$position.width = this.$drag.width + "px";
		} else {
			isAfter = event.pageX > $dropBoundary.right;
			$position.top -= 3;
			$position.left = this.$drag.left + (isAfter ? (this.$drag.width + 3) : (-3));
			$position.width = "0.2em";
			$position.height = this.$drag.height + 6 + "px";
		}
		this.$drag.$insert = isAfter ? "insertAfter" : "insertBefore";
		return $position;
	},
	_ensureDragImage: function() {
		if (!this._info) {
			this._info = document.createElement("div");
			this._info.style.display = "none";
			this._info.className = "s-list-drag-image";
			syra_site.layoutSlot.appendChild(this._info);
			this._info.textContent = "move record";
		}
	},
	dispose: function() {
		this.list = this.reorderRecord = this.boundary = this._info = this._dropCue = this.$drag = null;
	}
});