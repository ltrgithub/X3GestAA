"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ChildField = require('syracuse-ui/lib/field/child/childField').ChildField;
var ChildFieldRecord = require('syracuse-ui/lib/field/child/childFieldRecord').ChildFieldRecord;

function MenuBlockField() {}

exports.MenuBlockField = helpers.defineClass(MenuBlockField, ChildField, {
	loadBox: function() {
		this.$skin = this.$item.$skin = this.page.isAdminMode ? "s-admin-block" : "s-nav-block";
		this.ChildRecordClass = MenuBlockFieldRecord;
		this.subModuleRecord = this.articleParent.list.subModuleRecord;
		ChildField.prototype.loadBox.call(this);
		this.articleParent.domItem.className += "  " + this.$skin + "-item";
		this.onReorderItem(this.articleParent);
		this.isMenuBlock = true;
	},
	onReorderItem: function(record) {},
	onItemInOut: function() {
		//important for compatibility
	}
});

function _onExpandClick() {
	var record = this.parent;
	record.expandMenuBlock(!record.$expanded);
	record.page.refreshExpandAllLinks(record.articleParent.subModuleRecord);
}

function MenuBlockFieldRecord() {}

helpers.defineClass(MenuBlockFieldRecord, ChildFieldRecord, {
	drawBox: function() {
		var $skin = this.page.isAdminMode ? "s-admin-block" : "s-nav-block";
		this.$expanded = true;
		this.domItem = this.list._core;
		this.$prototype.$properties.title.$isMandatory = true;

		var prevTitleField = this.titleField;
		this.titleField = this.page.loadNewItem(this.domItem, {
			$bind: "title",
			$isEditMode: this.page.isAdminMode,
			$isAutoSizeDisabled: true,
			$isTitlePlaceHolder: true,
			$title: syra_local.nvpEnterMenuBlock,
			$contentEditable: true,
			$skin: $skin + "-title-field",
			$isMenusHidden: !this.page.isAdminMode,
			$isDetailLinkDisabled: true,
			$useLocalizePicker: true,
			$isTitleHidden: true
		}, this);
		if (!this.itemsField) {
			this.itemsField = this.page.loadNewItem(this.domItem, {
				$bind: "items",
				$isTitleHidden: true
			}, this);
			this.itemsField.body.className += " " + $skin + "-items-field";
		} else {
			this.domItem.insertBefore(this.titleField.domItem, this.itemsField.domItem);
		}
		this.ensureExpandedState();
		prevTitleField && this.removeItem(prevTitleField, true, true);
		if (!this.page.isAdminMode) {
			this.titleField.domItem.syraItem = this.expandBtn.syraItem;
			this.titleField.domItem.syraOnClick = this.expandBtn.syraOnClick;
		}
	},
	onLocalizeField: function(field, data, response, $url) {
		this.articleParent.subModuleRecord.applyChange(data, response, $url);
		return false;
	},
	expandMenuBlock: function(expanded) {
		this.$expanded = expanded;
		this.ensureExpandedState();
	},
	ensureExpandedState: function() {
		var text = this.$expanded ? syra_local.box_collapse : syra_local.box_expand;
		var icon = this.$expanded ? "node_expanded" : "node_collapsed";
		if (!this.expandBtn) {
			this.expandBtn = syra_menus.button.add({
				parent: this,
				text: text,
				css: "s-nav-block-expand",
				iconOnly: true,
				fontIcon: icon,
				btnclick: _onExpandClick
			});
			this.titleField.domItem.insertBefore(this.expandBtn.link, this.titleField.domItem.firstChild);
		} else {
			syra_menus.button.setText(this.expandBtn, text, icon);
		}
		syra_site.dom.hide(this.itemsField.domItem, !this.$expanded);
	}
});