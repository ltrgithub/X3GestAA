"use strict";
var helpers = require('syracuse-core').helpers;
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var MultiArrayField = require("syracuse-ui/lib/field/array/multiArrayField").MultiArrayField;
var SingleArrayField = require("syracuse-ui/lib/field/array/singleArrayField").SingleArrayField;
var SideBar = require("syracuse-ui/lib/page/aside/sideBar").SideBar;
var ModuleBuilder = require('./moduleBuilder').ModuleBuilder;
var NavigationItemBuilder = require('./navigationItemBuilder').NavigationItemBuilder;
var _variantsType = {
	menuItem: require('./menuField').MenuField,
	menuBlock: require('./menuBlockField').MenuBlockField
};


var _subModuleBuilder = require('./subModuleBuilder');

//s-admin-items

function NavigationPage() {}

exports.NavigationPage = helpers.defineClass(NavigationPage, DesktopPage, {
	loadBox: function(initData) {
		this.isBackButtonDisabled = true;
		this.isMenuBarDisabled = true;
		this.mainPageDesignerAccess = "disabled";
		this.isAutoInsertFieldDisabled = true;
		this.isAdminMode = this.$prototype.$editMode == "admin";
		this.modules = {};
		this.$isEditMode = true;
		this.isNavigationPage = true;
		this.$skin = this.isAdminMode ? "s-page" : "s-navpage";
		this.$defaultSkinSection = this.$defaultSkinBlock = "s-navpage-h1";
		this._defaultTitle = syra_local.nvpTitle;
		var data = {};
		this.$profilePreference = syra_preference.profile.get("navigationpage") || {};
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.loadBox.call(this, data);
		this.bindScrollView(true);
		if (this.isAdminMode) {
			this.adminSlot = document.createElement("div");
			this.adminSlot.className = "s-nav-admin-slot";

			this.adminTable = document.createElement("div");
			this.adminTable.className = "s-nav-admin-table";

			var header = document.createElement("div");
			header.className = "s-nav-admin-head";
			var title = header.appendChild(document.createElement("div"));
			title.textContent = syra_local.nvpModules;
			title.className = "s-nav-admin-head-module";
			header.appendChild(document.createElement("div")).className = "s-nav-admin-head-sep";
			title = header.appendChild(document.createElement("div"));
			title.textContent = syra_local.nvpSubModules;
			title.className = "s-nav-admin-head-submodule";
			header.appendChild(document.createElement("div")).className = "s-nav-admin-head-sep";

			var adminMenusSlot = header.appendChild(document.createElement("div"));
			adminMenusSlot.className = "s-nav-admin-head-menus";
			var menusHeader = adminMenusSlot.appendChild(document.createElement("div"));
			menusHeader.className = "s-nav-admin-head-menus-inner";
			title = menusHeader.appendChild(document.createElement("div"));
			title.textContent = syra_local.nvpMenus;
			title.className = "s-nav-admin-head-menus-title";
			if (this.isAdminMode) {
				var slot = document.createElement("div");
				slot.className = "s-nav-admin-head-menus-btns";
				menusHeader.appendChild(slot);
				this.btnExpandAll = syra_button.add({
					parent: this,
					slot: slot,
					text: syra_local.nvpExpandAll,
					iconOnly: true,
					css: "s-nav-submodule-btn",
					fontIcon: "expand_l",
					click: function() {
						if (this.parent.selectedSubModuleRecord) {
							_subModuleBuilder.expandMenuBlocks(this.parent.selectedSubModuleRecord, true);
						}
					}
				});
				this.btnCollapseAll = syra_button.add({
					parent: this,
					slot: slot,
					text: syra_local.nvpCollapseAll,
					iconOnly: true,
					css: "s-nav-submodule-btn",
					fontIcon: "collapse_l",
					click: function() {
						if (this.parent.selectedSubModuleRecord) {
							_subModuleBuilder.expandMenuBlocks(this.parent.selectedSubModuleRecord, false);
						}
					}

				});
			}
			this.adminTable.appendChild(header);

			this.adminTableBody = document.createElement("div");
			this.adminTableBody.className = "s-nav-admin-body";
			this.adminTable.appendChild(this.adminTableBody);

			var adminModulesSlot = this.adminTableBody.appendChild(document.createElement("div"));
			adminModulesSlot.className = "s-nav-admin-modules-slot";
			this.adminTableBody.appendChild(document.createElement("div")).className = "s-nav-admin-body-sep";
			this.addItem(adminModulesSlot, {
				$isTitleHidden: true,
				$bind: "modules"
			});

			this.adminSlot.appendChild(this.adminTable);
			this.layoutContent.domItem.appendChild(this.adminSlot);
		} else {
			this.menuBar = new SideBar();
			this.menuBar.minWidth = 250;
			if (syra_site.isTabletDevice) {
				this.menuBar.options = {
					resizeDirection: "left",
					$skin: "s-nav-modulebar"
				};
			} else {
				this.menuBar.options = {
					$isResizerDisabled: true,
					$skin: "s-nav-modulebar"
				};
			}
			this.menuBar.slot = document.createElement("div");
			this.menuBar.slot.className = "s-nav-modulebar-slot";
			this.menuBar.body = document.createElement("div");
			this.menuBar.body.className = "s-nav-modulebar-body";
			this.domItem.insertBefore(this.menuBar.slot, this.domItem.firstChild);
			this.menuBar.load(this);
			this.addItem(this.menuBar.body, {
				$isTitleHidden: true,
				$bind: "modules"
			});
		}
		syra_site.ensureArticleVisibility(this);
	},
	refreshExpandAllLinks: function(subModule) {
		var hasChildBlock, hasExpandAll, hasCollapseAll;
		var itemField = subModule && subModule.itemsField;
		var records = itemField && itemField.records;
		if (records) {
			for (var ii = 0, jj = records.length; ii < jj; ii++) {
				var singleField = records[ii].singleField;
				if (singleField.$variantItemKey == "menuBlock") {
					hasChildBlock = true;
					if (singleField.variantItem.record.$expanded === false) {
						hasExpandAll = true;
					} else {
						hasCollapseAll = true;
					}
				}
			}
			if (!subModule.isExpanded) {
				hasExpandAll = true;
				hasCollapseAll = false;
			}
		}
		var article = this.isAdminMode ? this : subModule;
		if (article) {
			syra_button.hide(article.btnExpandAll, !(article.btnExpandAll.hasChildBlock = hasChildBlock));
			syra_button.disable(article.btnExpandAll, !hasExpandAll);
			syra_button.hide(article.btnCollapseAll, !(article.btnCollapseAll.hasChildBlock = hasChildBlock));
			syra_button.disable(article.btnCollapseAll, !hasCollapseAll);
		}
	},
	getDataUrl: function(article) {
		article = article || this;
		var $parsedUrl = syra_expression.parse(article, article.dataset.$url || article.$prototype.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	ensureDefaultArticle: function($article, $prototype) {
		return {
			$layout: {
				$items: []
			}
		};
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "modules":
				var list = new MultiArrayField();
				list.isNoPageUniqueSelection = true;
				$field.$builderClass = ModuleBuilder;
				list.$addMaximize = list.$addRefresh = false;
				list.$confirmDelete = syra_local.nvpConfirmDeleteModule;
				list.$isEditMode = false;
				list.$isQuickDesignerDisabled = true;
				list.createMenuItem = function($bind, $menu) {
					return this.page.addItem(null, {
						$category: "link",
						$menu: $menu,
						$bind: $bind,
						$skin: "s-mn-list-btn s-mn-link",
						$icon: {
							$mode: "iconText"
						}
					}, this);
				};

				$item.$isPagerHidden = true;
				$item.$selectMode = "row";
				return list;
			case "submodules":
				var list = new MultiArrayField();
				list.isNoPageUniqueSelection = true;
				list.$addMaximize = list.$addRefresh = false;
				$field.$builderClass = _subModuleBuilder.SubModuleBuilder;
				list.isSubModuleList = true;
				if (this.isAdminMode) {
					$item.$selectMode = "row";
				}
				list.createMenuItem = function($bind, $menu) {
					return this.page.addItem(null, {
						$category: "link",
						$menu: $menu,
						$bind: $bind,
						$skin: "s-mn-list-btn s-mn-link",
						$icon: {
							$mode: "iconText"
						}
					}, this);
				};
				list.$confirmDelete = syra_local.nvpConfirmDeleteSubModule;
				list.$isQuickDesignerDisabled = true;
				$item.$isPagerHidden = true;
				return list;
			case "items":
				var list = new SingleArrayField();
				$field.$builderClass = NavigationItemBuilder;
				list.$isMenuBarAtTop = true;
				$item.$isMenusHidden = !this.isAdminMode;
				list.columnsCount = (boxParent.isSubModuleRecord && !this.isAdminMode) ? 3 : 1;
				$item.$isTopLabelAlignment = true;
				if (!boxParent.isSubModuleRecord) {
					list.createMenuItem = function($bind, $menu) {
						return this.page.addItem(null, {
							$category: "link",
							$menu: $menu,
							$bind: $bind,
							$skin: "s-list-record-picker",
							$icon: {
								$mode: "icon"
							}
						}, this);
					};
				} else {
					list.createMenuItem = function($bind, $menu) {
						return this.page.addItem(null, {
							$category: "link",
							$menu: $menu,
							$bind: $bind,
							$skin: "s-mn-list-btn s-mn-link",
							$icon: {
								$mode: "iconText"
							}
						}, this);
					};
				}
				$item.$skin = this.isAdminMode ? "s-admin-items" : "s-nav-items";
				if (boxParent.isSubModuleRecord) {
					list.subModuleRecord = boxParent;
				} else {
					list.subModuleRecord = boxParent.list.subModuleRecord;
				}
				return list;
			case "$singleField":
				if ($item.$variantItemKey) {
					return new _variantsType[$item.$variantItemKey]();
				}
				return null;
		}
		return null;
	},
	onMenuClick: function(options) {
		if (this.isAdminMode && options.menu.isNavigationMenuItem) {
			return false;
		}
		if (!options.menu.$isAction) {
			switch (options.menu.$item.$bind) {
				case "$create":
				case "$edit":
					syra_over.openModal(this, {
						article: options.menu.articleParent,
						$url: options.menu.$url,
						$method: options.menu.$method,
						onServerSaved: function(menuItem, modal) {
							syra_article.notifyClientSave(modal.options.article, modal.page.dataset);
							modal.close(true);
							return false;
						},
						close: function(isCanceled, dispose) {
							return true;
						}
					});
					return false;
			}
		}
		return true;
	},
	onFormUpdateDelta: function(field, value, notifyServerChange) {
		if (field.isSubModuleList || field.articleParent.isSubModuleRecord) {
			var sendBag = syra_form.getSendBag(field.articleParent, field.articleParent);
			sendBag.save(field.articleParent, field.articleParent, field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
			if (notifyServerChange !== false) {
				this.updateWorkingCopy(sendBag, field.articleParent);
			}
		} else {
			var subModule = field.articleParent;
			while (subModule && subModule != this) {
				if (subModule.isSubModuleRecord) {
					var sendBag = syra_form.getSendBag(subModule, subModule);
					sendBag.save(subModule, field.articleParent, field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
					if (notifyServerChange !== false) {
						this.updateWorkingCopy(sendBag, subModule);
					}
					return false;
				}
				subModule = subModule.articleParent;
			}
			return true;
		}
	},
	updateWorkingCopy: function(sendBag, articleSender) {
		var self = this;
		articleSender = articleSender || this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.getDataUrl(articleSender);
				sendBag.$etag = articleSender.dataset.$etag;
				syra_ajax.put({
					page: self,
					url: self.getDataUrl(articleSender),
					data: syra_dataset.cleanServerIndex(syra_site.clone(sendBag)),
					$etag: sendBag.$etag,
					success: function(newData, response, requestUrl) {
						if (!articleSender.disposed) {
							if (articleSender.page != articleSender) {
								syra_dataset.applyDelta(articleSender.page, articleSender.dataset, newData);
							}
							articleSender.applyChange(newData, response, requestUrl);
							syra_site.ensureArticleVisibility(self);
						}
					}
				});
			}
		}
	},
	bindScrollView: function(bind) {
		var self = this;
		if (bind) {
			self.scrollHandler = self.scrollview.addEventListener("scroll", function(event) {
				if (!syra_site.isInoutDisabled && self.isPageLoaded && !self._isDataChanging) {
					if (!self.scrollTimeout) {
						self.scrollTimeout = setTimeout(function() {
							self.scrollTimeout = null;
							if (self.isNavigationPage && sessionStorage) {
								if (!self.scrollPositionSessionKey) {
									self.scrollPositionSessionKey = "navigationPage" + self.isAdminMode ? "1" : "0";
								}
								if (!self.scrollTimeoutNav) {
									self.scrollTimeoutNav = setTimeout(function() {
										self.scrollTimeoutNav = null;
										if (self.scrollview) {
											sessionStorage.setItem(self.scrollPositionSessionKey, JSON.stringify({
												scrollLeft: self.scrollview.scrollLeft,
												scrollTop: self.scrollview.scrollTop
											}));
										}
									}, 1000);
								}
							}
						}, 100);
					}
				}
				event.stopPropagation();
			}, false);
		} else {
			if (self.scrollTimeoutNav) {
				clearTimeout(self.scrollTimeoutNav);
			}
			if (self.scrollview) {
				self.scrollTimeout && clearTimeout(self.scrollTimeout);
				self.scrollview.removeEventListener("scroll", self.scrollHandler);
			}
		}
	},
	dispose: function() {
		this.bindScrollView(false);
		DesktopPage.prototype.dispose.call(this);
	}
});