"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var ModuleBar = require('./module/moduleBar').ModuleBar;
var ModuleList = require('./module/moduleList').ModuleList;
var SubModuleList = require('./subModule/subModuleList').SubModuleList;
var NavigationItemList = require('./navigationItem/navigationItemList').NavigationItemList;
var NavigationMenuItem = require('./navigationItem/navigationMenuItem').NavigationMenuItem;
var NavigationMenuBlock = require('./navigationItem/navigationMenuBlock').NavigationMenuBlock;


function NavigationPage() {}

exports.NavigationPage = helpers.defineClass(NavigationPage, DesktopPage, {
	designArticle: function() {},
	loadBox: function(initData) {
		this.isMenuBarDisabled = true;
		this.mainPageDesignerAccess = "disabled";
		this.isAutoInsertFieldDisabled = true;
		this.isAdminMode = this.$prototype.$editMode == "admin";
		this.modules = {};
		this.$isEditMode = true;
		this.isNavigationPage = true;
		this.$skin = this.isAdminMode ? "s-page" : "s-navpage";
		this.$defaultSkinSection = this.$defaultSkinBlock = "s-navpage-h1";
		this._defaultTitle = syra_local.nvpTitle;
		var data = {};
		this.getPreferences();
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.loadBox.call(this, data);
		if (this.isAdminMode) {
			this.adminSlot = document.createElement("div");
			this.adminSlot.className = "s-nav-admin-slot";

			this.adminTable = document.createElement("div");
			this.adminTable.className = "s-nav-admin-table";

			var header = document.createElement("div");
			header.className = "s-nav-admin-head";
			var title = header.appendChild(document.createElement("div"));
			title.textContent = syra_local.nvpModules;
			title.className = "s-nav-admin-head-module";
			header.appendChild(document.createElement("div")).className = "s-nav-admin-head-sep";
			title = header.appendChild(document.createElement("div"));
			title.textContent = syra_local.nvpSubModules;
			title.className = "s-nav-admin-head-submodule";
			header.appendChild(document.createElement("div")).className = "s-nav-admin-head-sep";

			var adminMenusSlot = header.appendChild(document.createElement("div"));
			adminMenusSlot.className = "s-nav-admin-head-menus";
			var menusHeader = adminMenusSlot.appendChild(document.createElement("div"));
			menusHeader.className = "s-nav-admin-head-menus-inner";
			title = menusHeader.appendChild(document.createElement("div"));
			title.textContent = syra_local.nvpMenus;
			title.className = "s-nav-admin-head-menus-title";
			this.defineExpandAllItems(menusHeader, "s-nav-admin-head-menus-link");
			this.adminTable.appendChild(header);


			this.adminTableBody = document.createElement("div");
			this.adminTableBody.className = "s-nav-admin-body";
			this.adminTable.appendChild(this.adminTableBody);

			var adminModulesSlot = this.adminTableBody.appendChild(document.createElement("div"));
			adminModulesSlot.className = "s-nav-admin-modules-slot";
			this.adminTableBody.appendChild(document.createElement("div")).className = "s-nav-admin-body-sep";
			this.page.loadNewItem(adminModulesSlot, {
				$isTitleHidden: true,
				$bind: "modules"
			});

			this.adminSlot.appendChild(this.adminTable);
			this.page.layoutContent.domItem.appendChild(this.adminSlot);

			this.addExpandAllLinks();
		} else {
			(this.bar = new ModuleBar()).load(this);
		}
		this.ensurePageVisibility();
	},
	addExpandAllLinks: function(subModuleRecord) {
		(subModuleRecord || this).applyChange({
			$links: {
				"$expand-all": {
					$isHidden: this.isAdminMode && subModuleRecord,
					$title: syra_local.nvpExpandAll
				},
				"$collapse-all": {
					$isHidden: this.isAdminMode && subModuleRecord,
					$title: syra_local.nvpCollapseAll
				}
			}
		});
	},
	defineExpandAllItems: function(slot, $skin, article, $iconPath) {
		article = article || this;
		this.loadNewItem(slot, {
			$category: "link",
			$skin: $skin,
			$bind: "$expand-all",
			$icon: {
				$mode: "icon",
				$path: $iconPath || "page/s-nav-"
			}
		}, article);
		this.loadNewItem(slot, {
			$category: "link",
			$skin: $skin,
			$bind: "$collapse-all",
			$icon: {
				$mode: "icon",
				$path: $iconPath || "page/s-nav-"
			}
		}, article);
	},
	onSubModuleSelected: function(subModuleRecord) {
		this.selectedSubModuleRecord = subModuleRecord;
		this.refreshExpandAllLinks(subModuleRecord);
	},
	refreshExpandAllLinks: function(subModuleRecord) {
		if (!this.isAdminMode) {
			var hasChildBlock;
			if (subModuleRecord.itemsField) {
				if (subModuleRecord.itemsField.dataset) {
					for (var ii = 0, jj = subModuleRecord.itemsField.dataset.length; !hasChildBlock && ii < jj; ii++) {
						hasChildBlock = !! subModuleRecord.itemsField.dataset[ii].menuBlock;
					}
				}
				subModuleRecord.applyChange({
					$links: {
						"$expand-all": {
							$isHidden: !hasChildBlock
						},
						"$collapse-all": {
							$isHidden: !hasChildBlock
						}
					}
				});
			}
		}
	},
	getDataUrl: function(article) {
		article = article || this;
		var $parsedUrl = syra_site.expressionMaker.parse(article, article.dataset.$url || article.$prototype.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	notifyChangeToServer: function(sendBag, articleSender) {
		var self = this;
		articleSender = articleSender || this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.getDataUrl(articleSender);
				sendBag.$etag = articleSender.dataset.$etag;
				syra_controller.sendRequest(self, {
					$location: {
						$url: self.getDataUrl(articleSender)
					},
					data: sendBag,
					method: "PUT",
					$etag: sendBag.$etag
				}, function(newData, response, requestUrl) {
					if (!articleSender.disposed) {
						if (articleSender.page != articleSender) {
							syra_site.deltaManager.applyObjectDelta(articleSender.page, articleSender.dataset, newData);
						}
						articleSender.applyChange(newData, response, requestUrl);
						self.ensurePageVisibility();
					}
				});
			}
		}
	},
	ensureDefaultArticle: function($article, $prototype) {
		return {
			$layout: {
				$items: []
			}
		};
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "modules":
				return new ModuleList();
			case "submodules":
				return new SubModuleList();
			case "items":
				return new NavigationItemList();
			case "$singleField":
				switch ($item.$variantItemKey) {
					case "menuItem":
						return new NavigationMenuItem();
					case "menuBlock":
						return new NavigationMenuBlock();
				}
				return null;
		}
		return null;
	},
	onMenuClick: function(menuItem) {
		var self = this;
		if (this.isAdminMode && menuItem.isNavigationMenuItem) {
			return false;
		}
		if (!menuItem.$isAction) {
			switch (menuItem.$item.$bind) {
				case "$expand-all":
				case "$collapse-all":
					if (this.selectedSubModuleRecord) {
						this.selectedSubModuleRecord.onMenuClick(menuItem);
					}
					return false;
				case "$create":
				case "$edit":
					syra_site.dialogManager.openPage(self, {
						article: menuItem.articleParent,
						$url: menuItem.$url,
						$method: menuItem.$method,
						onSave: function(menuItem, dialog) {
							dialog.options.article.notifyClientSave(dialog._content.dataset);
							dialog.close(true);
							return false;
						},
						onValidate: function(page) {
							syra_menus.clickMenu(page, "$save");
							return false;
						},
						onClose: function(isCanceled, dispose) {
							return true;
						}
					});
					return false;
			}
		}
		return true;
	},
	onScrollView: function() {
		var self = this;
		DesktopPage.prototype.onScrollView.call(self);
		if (sessionStorage) {
			if (!self.scrollTimeoutNav) {
				self.scrollTimeoutNav = setTimeout(function() {
					self.scrollTimeoutNav = null;
					if (self.scrollview) {
						sessionStorage.setItem("navigationPage" + self.isAdminMode ? "1" : "0", JSON.stringify({
							scrollLeft: self.scrollview.scrollLeft,
							scrollTop: self.scrollview.scrollTop
						}));
					}
				}, 1000);
			}
		}
	},
	setScrollViewPosition: function() {
		if (sessionStorage && this.scrollview) {
			if (!this.scrollview.syraIsPosInit) {
				var pos = sessionStorage.getItem("navigationPage" + this.isAdminMode ? "1" : "0");
				if (pos) {
					pos = JSON.parse(pos);
					this.scrollview.scrollLeft = pos.scrollLeft;
					this.scrollview.scrollTop = pos.scrollTop;
				}
				this.scrollview.syraIsPosInit = true;
			}
		}
	},
	notifySubModuleDataChange: function(field, value, notifyServerChange) {
		var subModule = field.articleParent;
		while (subModule && subModule != this) {
			if (subModule.isSubModuleRecord) {
				var sendBag = this.ensureSendBag(subModule, subModule);
				sendBag.saveDataChange(subModule, field.getArticle(), field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
				if (notifyServerChange !== false) {
					this.notifyChangeToServer(sendBag, subModule);
				}
				return true;
			}
			subModule = subModule.articleParent;
		}
		return false;
	},
	notifyDataChange: function(field, value, notifyServerChange) {
		if (field.isSubModuleList || field.articleParent.isSubModuleRecord) {
			var sendBag = this.ensureSendBag(field.articleParent, field.articleParent);
			sendBag.saveDataChange(field.articleParent, field.getArticle(), field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
			if (notifyServerChange !== false) {
				this.notifyChangeToServer(sendBag, field.articleParent);
			}
		} else {
			if (!this.notifySubModuleDataChange(field, value, notifyServerChange)) {
				DesktopPage.prototype.notifyDataChange.call(this, field, value);
			}
		}
	},
	resizeArticle: function(resize) {
		DesktopPage.prototype.resizeArticle.call(this, resize);
		if (this.isPageLoaded) {
			this.setScrollViewPosition();
			if (this.bar) {
				this.bar.resizeBar();
			}
		}
	},
	getPreferences: function() {
		return this.preferences = syra_site.getPreferences("navigationpage", {});
	},
	setPreferences: function($module, $submodule) {
		if (!this.preferences) {
			this.preferences = {};
		}
		if ($module) {
			this.preferences.$module = $module;
		}
		if ($submodule) {
			this.preferences.$submodule = $submodule;
		}
		syra_site.setPreferences("navigationpage", this.preferences);
	},
	dispose: function() {
		if (this.scrollTimeoutNav) {
			clearTimeout(this.scrollTimeoutNav);
		}
		if (this.bar) {
			this.bar.dispose();
		}

		this.selectedSubModuleRecord = this.adminSlot = this.adminTable = this.adminTableBody = this.modules = this.bar = null;
		DesktopPage.prototype.dispose.call(this);
	}
});