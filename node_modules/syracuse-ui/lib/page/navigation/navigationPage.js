"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var ModuleBar = require('./module/moduleBar').ModuleBar;
var ModuleList = require('./module/moduleList').ModuleList;
var SubModuleList = require('./subModule/subModuleList').SubModuleList;
var NavigationItemList = require('./navigationItem/navigationItemList').NavigationItemList;
var NavigationMenuItem = require('./navigationItem/navigationMenuItem').NavigationMenuItem;
var NavigationMenuBlock = require('./navigationItem/navigationMenuBlock').NavigationMenuBlock;


function NavigationPage(){
}

exports.NavigationPage = helpers.defineClass(NavigationPage, DesktopPage, {
    designItem: function(){
    },
    loadBox: function(initData, $initDiagnoses){
        this.isAdminMode = this.$prototype.$editMode == "admin";
        this.modules = {};
        this.$isEditMode = true;
        this.isNavigationPage = true;
        this.$skin = this.isAdminMode ? "s-page" : "s-navpage";
        this.$defaultSkinSection = this.$defaultSkinBlock = "s-navpage-h1";
        this._defaultTitle = this.localize.navigPageTitle;
        this.$autoFetch = false;
        var data = {};
        if (initData) {
            var $keys = Object.keys(initData);
            for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
                if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
                    data[$keys[ii]] = initData[$keys[ii]];
                }
            }
        }
        DesktopPage.prototype.loadBox.call(this, data, $initDiagnoses);
        if (this.isAdminMode) {
            this.adminSlot = document.createElement("div");
            this.adminSlot.className = "s-nav-admin-slot";
            
            this.adminTable = document.createElement("div");
            this.adminTable.className = "s-nav-admin-table";
            
            var header = document.createElement("div");
            header.className = "s-nav-admin-head";
            var title = header.appendChild(document.createElement("div"));
            title.textContent = this.localize.navigPageModules;
            title.className = "s-nav-admin-head-module";
            header.appendChild(document.createElement("div")).className = "s-nav-admin-head-sep";
            title = header.appendChild(document.createElement("div"));
            title.textContent = this.localize.navigPageSubModules;
            title.className = "s-nav-admin-head-submodule";
            header.appendChild(document.createElement("div")).className = "s-nav-admin-head-sep";
            
            var menusSlot = header.appendChild(document.createElement("div"));
            menusSlot.className = "s-nav-admin-head-menus";
            var menusHeader = menusSlot.appendChild(document.createElement("div"));
            menusHeader.className = "s-nav-admin-head-menus-inner";
            title = menusHeader.appendChild(document.createElement("div"));
            title.textContent = this.localize.navigPageMenus;
            title.className = "s-nav-admin-head-menus-title";
            this.defineExpandAllItems();
            menusHeader.appendChild(this.expandMenus);
            this.adminTable.appendChild(header);
            
            
            this.adminTableBody = document.createElement("div");
            this.adminTableBody.className = "s-nav-admin-body";
            this.adminTable.appendChild(this.adminTableBody);
            
            this.adminModulesSlot = this.adminTableBody.appendChild(document.createElement("div"));
            this.adminModulesSlot.className = "s-nav-admin-modules-slot";
            this.adminTableBody.appendChild(document.createElement("div")).className = "s-nav-admin-body-sep";
            this.adminModulesSlot.setAttribute("data-s-inout", this.id);
            this.page.loadNewItem(this.adminModulesSlot, {
                $isTitleHidden: true,
                $bind: "modules"
            });
            
            
            this.adminSlot.appendChild(this.adminTable);
            this.page.layoutContent.domItem.appendChild(this.adminSlot);
            
            this.addExpandAllLinks();
        }
        else {
            (this.bar = new ModuleBar()).load(this);
        }
        this.ensurePageVisibility();
    },
    onItemEnterLeave: function(event){
        if (this.adminModulesSlot && (this.adminModulesSlot == event.currentTarget)) {
            this.getModuleList().onItemEnterLeave(event);
        }
    },
    addExpandAllLinks: function(subModuleRecord){
        (subModuleRecord || this).applyChange({
            $links: {
                "$expand-all": {
                    $isHidden: this.isAdminMode && subModuleRecord,
                    $title: this.localize.navigPageExpandAll
                },
                "$collapse-all": {
                    $isHidden: this.isAdminMode && subModuleRecord,
                    $title: this.localize.navigPageCollapseAll
                }
            }
        });
    },
    defineExpandAllItems: function(subModuleRecord){
        if (subModuleRecord) {
            subModuleRecord.expandMenus = document.createElement("div");
            subModuleRecord.expandMenus.className = this.$skin + "-expand-menus";
            subModuleRecord.expandLink = this.loadNewItem(subModuleRecord.expandMenus, {
                $category: "link",
                $skin: subModuleRecord.list.$skinMenus + "-link",
                $bind: "$expand-all",
                $icon: {
                    $mode: "icon",
                    $path: "page/s-nav-"
                }
            }, subModuleRecord);
            subModuleRecord.collapseLink = this.loadNewItem(subModuleRecord.expandMenus, {
                $category: "link",
                $skin: subModuleRecord.list.$skinMenus + "-link",
                $bind: "$collapse-all",
                $icon: {
                    $mode: "icon",
                    $path: "page/s-nav-"
                }
            }, subModuleRecord);
        }
        else {
            this.expandMenus = document.createElement("div");
            this.expandMenus.className = "s-nav-admin-submodule-expand-menus";
            this.expandLink = this.loadNewItem(this.expandMenus, {
                $category: "link",
                $skin: "s-nav-list-menus-link",
                $bind: "$expand-all",
                $icon: {
                    $mode: "icon",
                    $path: "page/s-nav-"
                }
            }, this);
            this.collapseLink = this.loadNewItem(this.expandMenus, {
                $category: "link",
                $skin: "s-nav-list-menus-link",
                $bind: "$collapse-all",
                $icon: {
                    $mode: "icon",
                    $path: "page/s-nav-"
                }
            }, this);
        }
    },
    onSubModuleSelected: function(subModuleRecord){
        this.selectedSubModuleRecord = subModuleRecord;
        this.refreshExpandAllLinks(subModuleRecord);
    },
    refreshExpandAllLinks: function(subModuleRecord){
        var hasChildBlock;
        if (subModuleRecord.itemsField) {
            if (subModuleRecord.itemsField.dataset) {
                for (var ii = 0, jj = subModuleRecord.itemsField.dataset.length; ii < jj; ii++) {
                    if (subModuleRecord.itemsField.dataset[ii].menuBlock) {
                        hasChildBlock = true;
                        break;
                    }
                }
            }
            if (this.isAdminMode) {
                this.expandMenus.style.visibility = hasChildBlock ? "visible" : "hidden";
            }
            else {
                subModuleRecord.expandLink.setState({
                    $isHidden: !hasChildBlock
                });
                subModuleRecord.collapseLink.setState({
                    $isHidden: !hasChildBlock
                });
            }
        }
        else {
            if (this.isAdminMode) {
                this.expandMenus.style.visibility = "hidden";
            }
        }
    },
    ensureReorderAndMenusVisibility: function(item, event, useCssForMenus){
        if (!this.isAdminMode || !event) {
            if (useCssForMenus) {
                this.toggleCssOnEnter(item.menusSlot);
            }
            else {
                this.showOnEnter(item.menusSlot);
            }
            this.showOnEnter(item.reorderPicker);
        }
        else {
            if (event) {
                if (useCssForMenus) {
                    this.toggleCssOnEnter(item.menusSlot, event);
                }
                else {
                    this.showOnEnter(item.menusSlot, event);
                }
                this.showOnEnter(item.reorderPicker, event);
            }
        }
    },
    onBarEvent: function(picker, event){
        if (picker.className.indexOf("s-nav-modulebar") >= 0) {
            this.bar.onClickPicker(picker, event);
        }
        else {
            DesktopPage.prototype.onBarEvent.call(this, picker, event);
        }
    },
    getDataUrl: function(article){
        article = article || this;
        var $parsedUrl = article.parseExpression(article.dataset.$url || article.$prototype.$url);
        return $parsedUrl || this.$prototype.$representationUrl;
    },
    notifyChangeToServer: function(sendBag, articleSender){
        var self = this;
        articleSender = articleSender || this;
        if (!self.disposed && !self.isServerNotifyDisabled) {
            if (self.$prototype.$representationUrl) {
                sendBag.$url = self.getDataUrl(articleSender);
                sendBag.$etag = articleSender.dataset.$etag;
                document.controller.sendRequest(self, {
                    $location: {
                        $url: self.getDataUrl(articleSender)
                    },
                    data: sendBag,
                    method: "PUT",
                    $etag: sendBag.$etag
                }, function(data, response, requestUrl){
                    if (!articleSender.disposed) {
                        articleSender.applyChange(data, response, requestUrl);
                        self.ensurePageVisibility();
                    }
                });
            }
        }
    },
    _ensureMenus: function(){
        this.page.loadNewItem(this.headerCoreRight, {
            $category: "link",
            $skin: "s-navpage-designer-link",
            $bind: this.isAdminMode ? "display" : "admin",
        }, this);
        
    },
    ensureDefaultArticle: function($article, $prototype){
        return {
            $layout: {
                $items: []
            }
        };
    },
    createField: function($field, $item, boxParent, $class){
        switch ($item.$bind) {
            case "modules":
                return new ModuleList();
            case "submodules":
                return new SubModuleList();
            case "items":
                return new NavigationItemList();
            case "$singleField":
                switch ($item.$variantItemKey) {
                    case "menuItem":
                        return new NavigationMenuItem();
                    case "menuBlock":
                        return new NavigationMenuBlock();
                }
                return null;
        }
        return null;
    },
    ensureDesignerOpenerVisibility: function(){
        document.site.enablePageDesign(false);
    },
    getModuleList: function(){
        return this.boundFields && this.boundFields.modules && this.boundFields.modules[0];
    },
    onMenuClick: function(menuItem){
        var self = this;
        if (this.isAdminMode && menuItem.isNavigationMenuItem) {
            return false;
        }
        if (!menuItem.$isAction) {
            switch (menuItem.$item.$bind) {
                case "$expand-all":
                case "$collapse-all":
                    if (this.selectedSubModuleRecord) {
                        this.selectedSubModuleRecord.onMenuClick(menuItem);
                    }
                    return false;
                case "$create":
                case "$edit":
                    self.openDialog({
                        article: menuItem.articleParent,
                        $url: menuItem.$url,
                        $method: menuItem.$method,
                        onSave: function(menuItem, dialog){
                            dialog.options.article.notifyClientSave(dialog._content.dataset);
                            dialog.close(true);
                            return false;
                        },
                        onValidate: function(page){
                            if (page.validateFields()) {
                                page.clickMenu("$save");
                            }
                            return false;
                        },
                        onClose: function(isCanceled, dispose){
                            return true;
                        }
                    });
                    return false;
            }
        }
        return true;
    },
    
    notifySubModuleDataChange: function(field, value, notifyServerChange){
        var subModule = field.articleParent;
        while (subModule && subModule != this) {
            if (subModule.isSubModuleRecord) {
                var sendBag = this.ensureSendBag(subModule, subModule);
                sendBag.saveDataChange(subModule, field.getArticle(), field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
                if (notifyServerChange !== false) {
                    this.notifyChangeToServer(sendBag, subModule);
                }
                return true;
            }
            subModule = subModule.articleParent;
        }
        return false;
    },
    notifyDataChange: function(field, value, notifyServerChange){
        if (field.isSubModuleList || field.articleParent.isSubModuleRecord) {
            var sendBag = this.ensureSendBag(field.articleParent, field.articleParent);
            sendBag.saveDataChange(field.articleParent, field.getArticle(), field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
            if (notifyServerChange !== false) {
                this.notifyChangeToServer(sendBag, field.articleParent);
            }
        }
        else {
            if (!this.notifySubModuleDataChange(field, value, notifyServerChange)) {
                DesktopPage.prototype.notifyDataChange.call(this, field, value);
            }
        }
    },
    getNavigationPath: function(navigationMenuItem){
        var path = {
            menuItem: navigationMenuItem.currentValue.$uuid
        };
        var articleParent = navigationMenuItem.articleParent;
        while (articleParent) {
            articleParent = articleParent.articleParent;
        }
        return path;
    },
    getTreeLevel: function(item){
        var articleParent = item.articleParent;
        var level = 0;
        while (articleParent && !articleParent.isSubModuleRecord && articleParent != this) {
            if (articleParent.isMenuBlock) {
                level++
            }
            articleParent = articleParent.articleParent;
        }
        return ("s-level-" + level);
    },
    dispose: function(){
        if (this.bar) {
            this.bar.dispose();
        }
        this.selectedSubModuleRecord = this.adminSlot = this.adminTable = this.adminTableBody = this.adminModulesSlot = this.modules = this.bar = null;
        DesktopPage.prototype.dispose.call(this);
    }
});
