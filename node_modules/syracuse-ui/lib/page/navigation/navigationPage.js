"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var MultiArrayField = require("syracuse-ui/lib/field/array/multiArrayField").MultiArrayField;
var SingleArrayField = require("syracuse-ui/lib/field/array/singleArrayField").SingleArrayField;
var BarSplitter = require("syracuse-ui/lib/page/bar/barSplitter").BarSplitter;
var ModuleBuilder = require('./moduleBuilder').ModuleBuilder;
var SubModuleBuilder = require('./subModuleBuilder').SubModuleBuilder;

var NavigationItemBuilder = require('./navigationItemBuilder').NavigationItemBuilder;
var NavigationMenuItem = require('./navigationItem/navigationMenuItem').NavigationMenuItem;
var NavigationMenuBlock = require('./navigationItem/navigationMenuBlock').NavigationMenuBlock;

function _expandMenuBlocks(subModule, expand, itemsField) {
	var items = itemsField || subModule.itemsField;
	for (var ii = 0, jj = items.records.length; ii < jj; ii++) {
		var record = items.records[ii];
		if (record.singleField.variantItem.isMenuBlock) {
			record.singleField.variantItem.record.expandMenuBlock(expand);
			_expandMenuBlocks(subModule, expand, record.singleField.variantItem.record.itemsField);
		}
	}
	if (!itemsField && !subModule.page.isAdminMode) {
		_expandSubModule(subModule, expand);
	}

}

function _expandSubModule(subModule, expanded) {
	syra_site.dom.display(subModule.body, subModule.isExpanded = expanded);
	syra_menus.updateButtonIcon(subModule.btnExpandSubModule, expanded ? syra_local.nvpCollapseSubModule : syra_local.nvpExpandSubModule, expanded ? "node_expanded" : "node_collapsed");
	subModule.page.refreshExpandAllLinks(subModule);
	//syra_site.dom.display(subModule.btnExpandAll, subModule.btnExpandAll.syrahasChildBlock && expanded);
	//syra_site.dom.display(subModule.btnCollapseAll, subModule.btnCollapseAll.syrahasChildBlock && expanded);
}

function ModuleBar() {}

helpers.defineClass(ModuleBar, BarSplitter, {
	load: function(page) {
		this.minWidth = 250;
		if (syra_site.isTabletDevice) {
			this.options = {
				resizeDirection: "left",
				$viewMode: "dock",
				$skin: "s-nav-modulebar"
			};
		} else {
			this.options = {
				$isResizerDisabled: true,
				$skin: "s-nav-modulebar"
			};
		}
		this.barSlot = document.createElement("div");
		this.barSlot.className = "s-nav-modulebar-slot";
		this.barBody = document.createElement("div");
		this.barBody.className = "s-nav-modulebar-body";
		page.domItem.insertBefore(this.barSlot, page.domItem.firstChild);
		BarSplitter.prototype.load.call(this, page);
		this.page.loadNewItem(this.barBody, {
			$isTitleHidden: true,
			$bind: "modules"
		});
	}
});

function NavigationPage() {}

exports.NavigationPage = helpers.defineClass(NavigationPage, DesktopPage, {
	designArticle: function() {},
	loadBox: function(initData) {
		this.isMenuBarDisabled = true;
		this.mainPageDesignerAccess = "disabled";
		this.isAutoInsertFieldDisabled = true;
		this.isAdminMode = this.$prototype.$editMode == "admin";
		this.modules = {};
		this.$isEditMode = true;
		this.isNavigationPage = true;
		this.$skin = this.isAdminMode ? "s-page" : "s-navpage";
		this.$defaultSkinSection = this.$defaultSkinBlock = "s-navpage-h1";
		this._defaultTitle = syra_local.nvpTitle;
		var data = {};
		this.getPreferences();
		if (initData) {
			var $keys = Object.keys(initData);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					data[$keys[ii]] = initData[$keys[ii]];
				}
			}
		}
		DesktopPage.prototype.loadBox.call(this, data);
		if (this.isAdminMode) {
			this.adminSlot = document.createElement("div");
			this.adminSlot.className = "s-nav-admin-slot";

			this.adminTable = document.createElement("div");
			this.adminTable.className = "s-nav-admin-table";

			var header = document.createElement("div");
			header.className = "s-nav-admin-head";
			var title = header.appendChild(document.createElement("div"));
			title.textContent = syra_local.nvpModules;
			title.className = "s-nav-admin-head-module";
			header.appendChild(document.createElement("div")).className = "s-nav-admin-head-sep";
			//header.appendChild(syra_menus.addFontIconFlag("s-nav-admin-head-sep", "right_arrow"));
			title = header.appendChild(document.createElement("div"));
			title.textContent = syra_local.nvpSubModules;
			title.className = "s-nav-admin-head-submodule";
			//header.appendChild(syra_menus.addFontIconFlag("s-nav-admin-head-sep", "right_arrow"));
			header.appendChild(document.createElement("div")).className = "s-nav-admin-head-sep";

			var adminMenusSlot = header.appendChild(document.createElement("div"));
			adminMenusSlot.className = "s-nav-admin-head-menus";
			var menusHeader = adminMenusSlot.appendChild(document.createElement("div"));
			menusHeader.className = "s-nav-admin-head-menus-inner";
			title = menusHeader.appendChild(document.createElement("div"));
			title.textContent = syra_local.nvpMenus;
			title.className = "s-nav-admin-head-menus-title";
			if (this.isAdminMode) {
				this.btnExpandAll = menusHeader.appendChild(syra_menus.addIconButton(syra_local.nvpExpandAll, "s-nav-submodule-expand", "onExpandAll", null, "expand"));
				this.btnExpandAll.syraItem = this.id;
				this.btnCollapseAll = menusHeader.appendChild(syra_menus.addIconButton(syra_local.nvpCollapseAll, "s-nav-submodule-expand", "onExpandAll", null, "collapse"));
				this.btnCollapseAll.syraItem = this.id;
			}
			this.adminTable.appendChild(header);

			this.adminTableBody = document.createElement("div");
			this.adminTableBody.className = "s-nav-admin-body";
			this.adminTable.appendChild(this.adminTableBody);

			var adminModulesSlot = this.adminTableBody.appendChild(document.createElement("div"));
			adminModulesSlot.className = "s-nav-admin-modules-slot";
			this.adminTableBody.appendChild(document.createElement("div")).className = "s-nav-admin-body-sep";
			this.loadNewItem(adminModulesSlot, {
				$isTitleHidden: true,
				$bind: "modules"
			});

			this.adminSlot.appendChild(this.adminTable);
			this.layoutContent.domItem.appendChild(this.adminSlot);
		} else {
			(this.bar = new ModuleBar()).load(this);
		}
		this.ensurePageVisibility();
	},
	onExpandSubModule: function(event, target) {
		if (target.syraItem !== undefined) {
			var subModule = syra_store.get(target.syraItem);
			subModule.isExpanded = !(subModule.isExpanded !== false);
			if (event.shiftKey) {
				var records = subModule.list.records;
				for (var ii = 0, jj = records.length; ii < jj; ii++) {
					_expandSubModule(records[ii], subModule.isExpanded);
				}
			} else {
				_expandSubModule(subModule, subModule.isExpanded);
			}
		}
	},
	onExpandAll: function(event, target) {
		if (target.syraRecord !== undefined) {
			var subModule = syra_store.get(target.syraRecord);
			var isExpand = target == subModule.btnExpandAll;
			if (event.shiftKey) {
				for (var ii = 0, jj = subModule.list.records.length; ii < jj; ii++) {
					_expandMenuBlocks(subModule.list.records[ii], isExpand);
				}
			} else {
				_expandMenuBlocks(subModule, isExpand);
			}
		} else {
			if (this.selectedSubModuleRecord) {
				_expandMenuBlocks(this.selectedSubModuleRecord, target == this.btnExpandAll);
			}
		}
	},
	refreshExpandAllLinks: function(subModule) {
		var hasChildBlock, hasExpandAll, hasCollapseAll;
		var itemField = subModule && subModule.itemsField;
		var records = itemField && itemField.records;
		if (records) {
			for (var ii = 0, jj = records.length; ii < jj; ii++) {
				var singleField = records[ii].singleField;
				if (singleField.$variantItemKey == "menuBlock") {
					hasChildBlock = true;
					if (singleField.variantItem.record.$expanded === false) {
						hasExpandAll = true;
					} else {
						hasCollapseAll = true;
					}
				}
			}
			if (!subModule.isExpanded) {
				hasExpandAll = true;
				hasCollapseAll = false;
			}
		}
		var article = this.isAdminMode ? this : subModule;
		if (article) {
			syra_site.dom.display(article.btnExpandAll, article.btnExpandAll.syrahasChildBlock = hasChildBlock);
			syra_site.dom.display(article.btnCollapseAll, article.btnCollapseAll.syrahasChildBlock = hasChildBlock);
			syra_site.dom.disableItem(article.btnExpandAll, !hasExpandAll);
			syra_site.dom.disableItem(article.btnCollapseAll, !hasCollapseAll);
		}
	},
	getDataUrl: function(article) {
		article = article || this;
		var $parsedUrl = syra_site.expressionMaker.parse(article, article.dataset.$url || article.$prototype.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	notifyChangeToServer: function(sendBag, articleSender) {
		var self = this;
		articleSender = articleSender || this;
		if (!self.disposed && !self.isServerNotifyDisabled) {
			if (self.$prototype.$representationUrl) {
				sendBag.$url = self.getDataUrl(articleSender);
				sendBag.$etag = articleSender.dataset.$etag;
				syra_controller.callServer(self, {
					$location: {
						$url: self.getDataUrl(articleSender)
					},
					data: syra_site.deltaManager.cleanServerIndex(helpers.object.clone(sendBag, true)),
					method: "PUT",
					$etag: sendBag.$etag
				}, function(newData, response, requestUrl) {
					if (!articleSender.disposed) {
						if (articleSender.page != articleSender) {
							syra_site.deltaManager.applyObjectDelta(articleSender.page, articleSender.dataset, newData);
						}
						articleSender.applyChange(newData, response, requestUrl);
						self.ensurePageVisibility();
					}
				});
			}
		}
	},
	ensureDefaultArticle: function($article, $prototype) {
		return {
			$layout: {
				$items: []
			}
		};
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "modules":
				var list = new MultiArrayField();
				$field.$builderClass = ModuleBuilder;
				list.$addMaximize = list.$addRefresh = false;
				list.$confirmDelete = syra_local.nvpConfirmDeleteModule;
				list.$isEditMode = false;
				list.$isQuickDesignerDisabled = true;
				list.$itemRecordMenuSkin = "s-mn-ldp-record-link";
				list.$itemMenuSkin = "s-mn-ldp-link";
				list.$iconPath = "page/s-ldp-";
				$item.$isPagerHidden = true;
				$item.$selectMode = "row";
				return list;
			case "submodules":
				var list = new MultiArrayField();
				list.$addMaximize = list.$addRefresh = false;
				$field.$builderClass = SubModuleBuilder;
				list.isSubModuleList = true;
				if (this.isAdminMode) {
					list.menusSlot = boxParent.subModulesAdminActions;
					$item.$selectMode = "row";
				}
				list.$itemRecordMenuSkin = "s-mn-ldp-record-link";
				list.$itemMenuSkin = "s-mn-ldp-link";
				list.$iconPath = "page/s-ldp-";
				list.$confirmDelete = syra_local.nvpConfirmDeleteSubModule;
				list.$isQuickDesignerDisabled = true;
				$item.$isPagerHidden = true;
				return list;
			case "items":
				var list = new SingleArrayField();
				$field.$builderClass = NavigationItemBuilder;
				$item.$isMenusHidden = !this.isAdminMode;
				list.columnsCount = (boxParent.isSubModuleRecord && !this.isAdminMode) ? 3 : 1;
				$item.$isTopLabelAlignment = true;
				if (!boxParent.isSubModuleRecord) {
					list.$itemMenuSkin = "s-mn-ldp-record-link";
					list.$itemMenuIconMode = "icon";
					list.$iconPath = "page/s-nav-";
				} else {
					list.$itemMenuSkin = "s-mn-ldp-link";
					list.$iconPath = "page/s-ldp-";
				}
				list.$itemRecordMenuSkin = "s-mn-ldp-record-link";
				$item.$skin = this.isAdminMode ? "s-nav-admin-items" : "s-nav-items";
				if (boxParent.isSubModuleRecord) {
					list.subModuleRecord = boxParent;
				} else {
					list.subModuleRecord = boxParent.list.subModuleRecord; //this.articleParent.list = childField
				}
				return list;
			case "$singleField":
				switch ($item.$variantItemKey) {
					case "menuItem":
						return new NavigationMenuItem();
					case "menuBlock":
						return new NavigationMenuBlock();
				}
				return null;
		}
		return null;
	},
	onMenuClick: function(menuItem) {
		var self = this;
		if (this.isAdminMode && menuItem.isNavigationMenuItem) {
			return false;
		}
		if (!menuItem.$isAction) {
			switch (menuItem.$item.$bind) {
				case "$create":
				case "$edit":
					syra_site.dialogManager.openPage(self, {
						article: menuItem.articleParent,
						$url: menuItem.$url,
						$method: menuItem.$method,
						onServerSaved: function(menuItem, dialog) {
							dialog.options.article.notifyClientSave(dialog._content.dataset);
							dialog.close(true);
							return false;
						},
						onClose: function(isCanceled, dispose) {
							return true;
						}
					});
					return false;
			}
		}
		return true;
	},
	setScrollViewPosition: function() {
		if (sessionStorage && this.scrollview) {
			if (!this.scrollview.syraIsPosInit) {
				var pos = sessionStorage.getItem("navigationPage" + this.isAdminMode ? "1" : "0");
				if (pos) {
					pos = JSON.parse(pos);
					this.scrollview.scrollLeft = pos.scrollLeft;
					this.scrollview.scrollTop = pos.scrollTop;
				}
				this.scrollview.syraIsPosInit = true;
			}
		}
	},
	notifySubModuleDataChange: function(field, value, notifyServerChange) {
		var subModule = field.articleParent;
		while (subModule && subModule != this) {
			if (subModule.isSubModuleRecord) {
				var sendBag = this.ensureSendBag(subModule, subModule);
				sendBag.saveDataChange(subModule, field.articleParent, field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
				if (notifyServerChange !== false) {
					this.notifyChangeToServer(sendBag, subModule);
				}
				return true;
			}
			subModule = subModule.articleParent;
		}
		return false;
	},
	notifyDataChange: function(field, value, notifyServerChange) {
		if (field.isSubModuleList || field.articleParent.isSubModuleRecord) {
			var sendBag = this.ensureSendBag(field.articleParent, field.articleParent);
			sendBag.saveDataChange(field.articleParent, field.articleParent, field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
			if (notifyServerChange !== false) {
				this.notifyChangeToServer(sendBag, field.articleParent);
			}
		} else {
			if (!this.notifySubModuleDataChange(field, value, notifyServerChange)) {
				DesktopPage.prototype.notifyDataChange.call(this, field, value);
			}
		}
	},
	getPreferences: function() {
		return this.preferences = syra_site.getPreferences("navigationpage", {});
	},
	setPreferences: function($module, $submodule) {
		if (!this.preferences) {
			this.preferences = {};
		}
		if ($module) {
			this.preferences.$module = $module;
		}
		if ($submodule) {
			this.preferences.$submodule = $submodule;
		}
		syra_site.setPreferences("navigationpage", this.preferences);
	},
	dispose: function() {
		if (this.scrollTimeoutNav) {
			clearTimeout(this.scrollTimeoutNav);
		}
		this.bar && this.bar.dispose();
		DesktopPage.prototype.dispose.call(this);
	}
});