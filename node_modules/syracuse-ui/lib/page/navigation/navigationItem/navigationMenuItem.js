"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ReferenceField = require('syracuse-ui/lib/field/referenceField').ReferenceField;

var _$executes = ["$execute_$query", "$execute_$details", "$execute_$edit"];

function NavigationMenuItem() {}

exports.NavigationMenuItem = helpers.defineClass(NavigationMenuItem, ReferenceField, {
	loadBox: function() {
		this.$item.$skin = "s-nav-menu";
		this.isNavigationMenuItem = true;
		ReferenceField.prototype.loadBox.call(this);
	},
	filterMenu: function($bind) {
		if ($bind.indexOf("$execute") == 0) {
			return false;
		}
		return ReferenceField.prototype.filterMenu.call(this, $bind);
	},
	render: function() {
		this.codeMenu = this.page.loadNewItem(this.fieldValue, {
			$isDescriptionVisible: false,
			$subRecordKey: this.$item.$bind,
			$css: this.$item.$css,
			$category: "link",
			$skin: this.$skin + "-link"
		}, this.boxParent);
		this.setDescription(this.$item.$description || this.$field.$item.$description);
		if (this.currentValue) {
			this._renderCurrentValue();
		}
	},
	_renderCurrentValue: function() {
		if (this.codeMenu) {
			if (this.$rootLinks.$links && this.$rootLinks.$links.$details) {
				this.setMenus({
					$links: {
						$details: {
							$title: this.currentValue.$value || "",
							$description: this.currentValue.$title || ""
						}
					}
				});
			}
			var value = this.getDatasetValue();
			if (value && value.$links) {
				for (var ii = 0, jj = _$executes.length; ii < jj; ii++) {
					var $execute = value.$links[_$executes[ii]];
					if ($execute) {
						$execute.$title = $execute.$title || this.currentValue.$value || "";
						$execute.$description = $execute.$description || this.currentValue.$title || "";
						if ((!$execute.$description || !this.$item.$inplace) && this.currentValue.$description) {
							$execute.$description = this.currentValue.$description;
						}
						this.codeMenu.setMenu($execute, this.currentValue, this.currentValue);
						document.site.favoritesProvider.addFavoritePicker(this);
						break;
					}
				}
			}
		}
	}
});