"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ReferenceField = require('syracuse-ui/lib/field/referenceField').ReferenceField;

var _$executes = ["$execute_$query", "$execute_$details", "$execute_$edit"];

function NavigationMenuItem() {}

exports.NavigationMenuItem = helpers.defineClass(NavigationMenuItem, ReferenceField, {
	dispose: function() {
		this.bookmarkBtn = null;
		ReferenceField.prototype.dispose.call(this);
	},
	loadBox: function() {
		this.$item.$isMenusHidden = true;
		this.$item.$skin = "s-nav-menu";
		ReferenceField.prototype.loadBox.call(this);
		this.onReorderItem(this.articleParent);
		this.articleParent.domItem.className += " " + this.$item.$skin + "-item";
	},
	isPopupMenuItem: function($bind) {
		return $bind.indexOf("$execute") != 0;
	},
	onReorderItem: function(record) {

	},
	_createValueContainer: function() {
		this.fieldValue = this._core = this._dataValue = this.domItem;
	},
	render: function() {
		this.codeMenu = this.page.loadNewItem(this.fieldValue, {
			$subRecordKey: this.$item.$bind,
			$css: this.$item.$css,
			$category: "link",
			$skin: this.$skin + "-link"
		}, this.boxParent);

		this.setDescription(this.$item.$description || this.$field.$item.$description);
		if (this.currentValue) {
			this._renderCurrentValue();
		}
	},
	_renderCurrentValue: function() {
		if (this.codeMenu) {
			if (this.$menus && this.$menus.$details) {
				syra_menus.setMenus(this, {
					$links: {
						$details: {
							$title: this.currentValue.$value || "",
							$description: this.currentValue.$title || ""
						}
					}
				});
			}
			var value = this.getDatasetValue();
			if (value && value.$links) {
				for (var ii = 0, jj = _$executes.length; ii < jj; ii++) {
					var $execute = value.$links[_$executes[ii]];
					if ($execute) {
						$execute.$title = $execute.$title || this.currentValue.$value || "";
						if (value.convergenceFunction) {
							$execute.$description = syra_local.nvpFunction + ": " + value.convergenceFunction;
						} else {
							if (value.entity) {
								$execute.$description = syra_local.nvpEntity + ": " + value.entity;
								if (value.entity != helpers.string.pluralize(value.representation || "")) {
									$execute.$description += " (" + syra_local.nvpRepresentation + ": " + value.representation + ")";
								}
							}
						}
						if (!$execute.$description) {
							$execute.$description = value.$description;
						}
						this.codeMenu.isNavigationMenuItem = true;
						this.codeMenu.setMenu($execute, this.currentValue, this.currentValue);
						this.addBookmarkButton();
						if (this.articleParent.reorderBtn) {
							this.fieldValue.parentNode.insertBefore(this.articleParent.reorderBtn, this.fieldValue);
						}
						break;
					}
				}
			}
		}
	},
	addBookmarkButton: function(item) {
		if (this.codeMenu.href) {
			this.bookmarkBtn = syra_menus.addIconButton(syra_local.bookmarksAdd, "s-nav-menu-bookmark", "onNavigationBookMarkClick");
			this.bookmarkBtn.syraSiteObserver = "bookmarksManager";
			this.bookmarkBtn.syraFieldId = this.id;
			this.fieldValue.parentNode.insertBefore(this.bookmarkBtn, this.fieldValue.nextSibling);
			syra_site.bookmarksManager.checkNavigationMenuItemBookMark(this);
		} else {
			this.codeMenu.domItem.setAttribute("href", "#");
		}
	}
});