"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ReferenceField = require('syracuse-ui/lib/field/referenceField').ReferenceField;

var _$executes = ["$execute_$query", "$execute_$details", "$execute_$edit"];

function NavigationMenuItem() {}

exports.NavigationMenuItem = helpers.defineClass(NavigationMenuItem, ReferenceField, {
	loadBox: function() {
		this.$item.$isMenusHidden = true;
		this.$item.$skin = this.page.isAdminMode ? "s-nav-admin-menu" : "s-nav-menu";
		this.isNavigationMenuItemField = true;
		ReferenceField.prototype.loadBox.call(this);
		this.onReorderItem(this.articleParent);
		this.articleParent.domItem.className += " " + this.$item.$skin + "-item";
	},
	filterMenu: function($bind) {
		//if (($bind == "$details") || ($bind.indexOf("$execute") == 0)) {
		if ($bind.indexOf("$execute") == 0) {
			return false;
		}
		return ReferenceField.prototype.filterMenu.call(this, $bind);
	},
	_createMenusBox: function() {
		this.menusBox = this.page.loadNewItem(this.fieldValue, {
			$isMenusBag: true,
			$category: "menus",
			$clientId: this.id + "menus",
			$noText: true,
			$skin: this.list.$skinRecordMenusLink,
			$layout: {
				$items: [{
					$skin: this.$skinMenus + "-link",
					$bind: this.id + "menus" + "-" + "$details",
					$category: "link",
					$icon: {
						$mode: "icon",
						$value: "details",
						$path: "list/s-list-"
					}
				}]
			}
		}, this.articleParent);
		this.menusBox.contextField = this;
	},
	onReorderItem: function(record) {

	},
	onItemEnterLeave: function(event, record) {
		if (record) {
			this.page.ensureDesignedItemVisibility(record, event);
			this.page.ensureDesignedItemVisibility(this, event);
			if (this.favoritePicker && !this.isFavorite) {
				this.favoritePicker.style.visibility = (event.type == "mouseenter") ? "visible" : "";
			}
		}
		ReferenceField.prototype.onItemEnterLeave.call(this, event);
	},
	_createValueContainer: function() {
		this.fieldValue = this._core = this._dataValue = this.domValueSlot = this.domItem;
	},
	render: function() {
		this.codeMenu = this.page.loadNewItem(this.fieldValue, {
			$isDescriptionVisible: false,
			$subRecordKey: this.$item.$bind,
			$css: this.$item.$css,
			$category: "link",
			$skin: this.$skin + "-link"
		}, this.boxParent);

		this.setDescription(this.$item.$description || this.$field.$item.$description);
		if (this.currentValue) {
			this._renderCurrentValue();
		}
	},
	_renderCurrentValue: function() {
		if (this.codeMenu) {
			if (this.$rootLinks.$links && this.$rootLinks.$links.$details) {
				this.setMenus({
					$links: {
						$details: {
							$title: this.currentValue.$value || "",
							$description: this.currentValue.$title || ""
						}
					}
				});
			}
			var value = this.getDatasetValue();
			if (value && value.$links) {
				for (var ii = 0, jj = _$executes.length; ii < jj; ii++) {
					var $execute = value.$links[_$executes[ii]];
					if ($execute) {
						$execute.$title = $execute.$title || this.currentValue.$value || "";
						if (value.convergenceFunction) {
							$execute.$description = this.page.localize.navigPageFunction + ": " + value.convergenceFunction;
						} else {
							if (value.entity) {
								$execute.$description = this.page.localize.navigPageEntity + ": " + value.entity;
								if (value.entity != helpers.string.pluralize(value.representation || "")) {
									$execute.$description += " (" + this.page.localize.navigPageRepresentation + ": " + value.representation + ")";
								}
							}
						}
						if (!$execute.$description) {
							$execute.$description = value.$description;
						}
						this.codeMenu.isNavigationMenuItem = true;
						this.codeMenu.setMenu($execute, this.currentValue, this.currentValue);
						document.site.favoritesProvider.addFavoritePicker(this);
						if (this.articleParent.reorderPicker) {
							this.fieldValue.parentNode.insertBefore(this.articleParent.reorderPicker, this.fieldValue);
							//this.codeMenu.mn.insertBefore(this.articleParent.reorderPicker, this.codeMenu.mn.firstChild);
						}
						if (this.articleParent.menusSlot) {
							this.articleParent.menusSlot.className = "s-nav-menu-menus";
							this.page.ensureDesignedItemVisibility(this.articleParent);
							this.fieldValue.parentNode.appendChild(this.articleParent.menusSlot);
						}
						break;
					}
				}
			}
		}
	}
});