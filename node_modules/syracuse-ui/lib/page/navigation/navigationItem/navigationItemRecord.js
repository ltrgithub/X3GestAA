"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SingleRecord = require('syracuse-ui/lib/field/array/singleBuilder/singleRecord').SingleRecord;

function NavigationItemRecord() {}

exports.NavigationItemRecord = helpers.defineClass(NavigationItemRecord, SingleRecord, {
	reorderItem: function(targetRecord, isAfter) {
		targetRecord.domItem.parentNode.insertBefore(this.domItem, isAfter ? targetRecord.domItem.nextSibling : targetRecord.domItem);
	},
	_createMenusBox: function() {},
	drawBox: function() {
		this.$isVerticalDirection = true;
		this.domItem = document.createElement("div");
		this.$$item = $(this.domItem);
		this.domItem.className = this.list.$skin + "-item";
		this.domItem.setAttribute("data-s-record", this.$recordIndex);

		this.recordValue = document.createElement("div");
		this.recordValue.className = this.list.$skin + "-item-value";
		this.$$value = $(this.domItem.appendChild(this.recordValue));

		if (this.list.$capability && this.list.$capability.reorder) {
			this.applyReorderCapability(true);
		}
		this._singleField = this.page.loadNewItem(this.recordValue, {
			$isTitleRowHidden: true,
			//$isMenusHidden: true,
			$isDetailLinkDisabled: true,
			$bind: "$singleField",
			$isEditMode: this.$isEditMode,
			$inplace: true,
			$isDiagnoseInline: true
		}, this);

		this.builder.onAppendRecord(this);
		this.list.applyRecordCapabilities(this);
	},
	applyReorderCapability: function(reorder) {
		if (this.hasReorderCapability = reorder) {
			if (!this.reorderPicker) {
				this.reorderPicker = document.createElement("div");
				this.reorderPicker.className = this.list.$skin + "-item-reorder";
				this.reorderPicker.syraReorderRecordId = this.list.id;
				document.site.ddManager.setDragSpot(this.reorderPicker, true);
				this.domItem.insertBefore(this.reorderPicker, this.recordValue);
				if (this.list.$isDisabled) {
					document.site.disableItem(this.reorderPicker, this.list.$isDisabled);
				}
			}
		} else {
			if (this.reorderPicker) {
				document.site.removeDomChild(this.reorderPicker);
				delete this.reorderPicker;
			}
		}
	},
	dispose: function() {
		this._singleField = this.$$value = this.domItem = null;
		SingleRecord.prototype.dispose.call(this);
	}
});