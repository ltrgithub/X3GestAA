"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SingleRecord = require('syracuse-ui/lib/field/array/singleBuilder/singleRecord').SingleRecord;

function NavigationItemRecord() {}

exports.NavigationItemRecord = helpers.defineClass(NavigationItemRecord, SingleRecord, {
	reorderItem: function(targetRecord, isAfter) {
		targetRecord.domItem.parentNode.insertBefore(this.domItem, isAfter ? targetRecord.domItem.nextSibling : targetRecord.domItem);
		this.singleField.variantItem.onReorderItem(this);
	},
	clickBookmark: function() {
		var bookmarkBtn = this.singleField && this.singleField.variantItem && this.singleField.variantItem.bookmarkBtn;
		bookmarkBtn && bookmarkBtn.click();
	},
	_highlightBookmark: function(onEnter) {
		var menuItem = this.singleField.variantItem;
		if (menuItem.bookmarkBtn && !menuItem.isBookmark) {
			menuItem.bookmarkBtn.style.visibility = onEnter ? "visible" : "";
		}
	},
	onFocusInOut: function(onEnter) {
		this._highlightBookmark(onEnter);
	},
	onItemInOut: function(onEnter) {
		this.hideButtons(!onEnter);
		if (this.singleField.$variantItemKey == "menuItem") {
			this._highlightBookmark(onEnter);
		} else {
			var block = this.singleField && this.singleField.variantItem;
			if (block) {
				this.hideMenuBlockMenus(block.record, !onEnter);
				syra_site.dom.toggleClass(this.reorderBtn, "s-enter", onEnter);
			}
		}
	},
	hideMenuBlockMenus: function(blockRecord, hide) {
		var menuItems = blockRecord.itemsField && blockRecord.itemsField.menuItems;
		var $binds = Object.keys(menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var items = menuItems[$binds[ii]];
			for (var mm = 0, kk = items.length; mm < kk; mm++) {
				syra_site.dom.toggleClass(items[mm].domItem, "s-invisible", hide);
			}
		}
		syra_site.dom.toggleClass(blockRecord.titleField.mnPickers.$localize, "s-invisible", hide);
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$sourceBind == "$delete") {
			menuItem.$confirm = syra_local["nvpConfirmDelete" + (this.singleField.$variantItemKey == "menuItem" ? "Menu" : "Block")];
		}
		return true;
	},
	onAddMenuPicker: function(picker) {
		this.domItem.appendChild(picker);
	},
	hideButtons: function(hide) {
		this.toggleButtons("s-invisible", hide);
	},
	drawBox: function() {
		this.$useDeletePicker = true;
		this.isSingleRecord = true;
		if (this.isReorderDisabled == undefined) { //init by bookmark
			this.isReorderDisabled = !this.page.isAdminMode;
		}
		this.reorderBtnParent = null; //!!important picker is inserted bu codemenu 
		this.$isVerticalDirection = true;
		this.domItem = document.createElement("div");
		this.domItem.className = this.$skin = this.list.$skin + "-item";
		this.domItem.syrainout = this.domItem.syrafocusinout = this.id;
		this.domItem.syraRecord = this.$uuid;
		this.domItem.setAttribute("data-s-record", this.$uuid);
		if (!this.list.$item.$isMenusHidden) {
			this.menusSlot = this.domItem;
		}
		this.recordValue = document.createElement("div");
		this.recordValue.className = this.list.$skin + "-item-value";
		this.domItem.appendChild(this.recordValue);

		if (this.list.$capability && this.list.$capability.reorder) {
			this.list.capabilityMaker.addReorder(this, true);
		}
		this.singleField = this.page.loadNewItem(this.recordValue, {
			$isTitleRowHidden: true,
			$isDetailLinkDisabled: true,
			$bind: "$singleField",
			$isEditMode: this.$isEditMode,
			$inplace: true,
			$isDiagnoseInline: true
		}, this);
		this.list.onAppendRecord(this);
		this.list.capabilityMaker.applyToRecord(this);
		this.onItemInOut(false);
	},
	dispose: function() {
		this.singleField = null;
		SingleRecord.prototype.dispose.call(this);
	}
});