"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SingleRecord = require('syracuse-ui/lib/field/array/singleBuilder/singleRecord').SingleRecord;

function NavigationItemRecord() {}

exports.NavigationItemRecord = helpers.defineClass(NavigationItemRecord, SingleRecord, {
	reorderItem: function(targetRecord, isAfter) {
		targetRecord.domItem.parentNode.insertBefore(this.domItem, isAfter ? targetRecord.domItem.nextSibling : targetRecord.domItem);
		this.singleField.variantItem.onReorderItem(this);
	},
	onItemInOut: function(onEnter) {
		if (this.singleField.$variantItemKey == "menuItem") {
			if (this.page.isAdminMode) {
				this.page.toggleCssOnEnter(this.reorderPicker, onEnter);
			}
			var menuItem = this.singleField.variantItem;
			if (menuItem.bookmarkPicker && !menuItem.isBookmark) {
				menuItem.bookmarkPicker.style.visibility = onEnter ? "visible" : "";
			}
			menuItem.onItemInOut(onEnter);
		}
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$sourceBind == "$delete") {
			menuItem.$confirm = syra_local["nvpConfirmDelete" + (this.singleField.$variantItemKey == "menuItem" ? "Menu" : "Block")];
		}
		return true;
	},
	onAddMenuPicker: function(picker) {
		this.domItem.appendChild(picker);
	},
	drawBox: function() {
		this.$item.$useDeletePicker = true;
		this.isSingleRecord = true;
		this.isReorderDisabled = !this.page.isAdminMode;
		this.reorderPickerParent = null; //!!important picker is inserted bu codemenu 
		this.$isVerticalDirection = true;
		this.domItem = document.createElement("div");
		this.domItem.className = this.$skin = this.list.$skin + "-item";
		this.domItem.syrainout = this.id;
		this.domItem.syraRecord = this.$uuid;
		this.domItem.setAttribute("data-s-record", this.$uuid);

		this.recordValue = document.createElement("div");
		this.recordValue.className = this.list.$skin + "-item-value";
		this.domItem.appendChild(this.recordValue);

		if (this.list.$capability && this.list.$capability.reorder) {
			this.applyReorderCapability(true);
		}
		this.singleField = this.page.loadNewItem(this.recordValue, {
			$isTitleRowHidden: true,
			$isDetailLinkDisabled: true,
			$bind: "$singleField",
			$isEditMode: this.$isEditMode,
			$inplace: true,
			$isDiagnoseInline: true
		}, this);
		this.list.onAppendRecord(this);
		this.applyRecordCapabilities();
	},
	dispose: function() {
		this.singleField = null;
		SingleRecord.prototype.dispose.call(this);
	}
});