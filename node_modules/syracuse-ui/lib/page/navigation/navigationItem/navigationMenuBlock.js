"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ChildField = require('syracuse-ui/lib/field/child/childField').ChildField;
var ChildFieldRecord = require('syracuse-ui/lib/field/child/childFieldRecord').ChildFieldRecord;

function NavigationMenuBlock() {}

exports.NavigationMenuBlock = helpers.defineClass(NavigationMenuBlock, ChildField, {
	loadBox: function() {
		this.$skin = this.$item.$skin = this.page.isAdminMode ? "s-nav-admin-block" : "s-nav-block";
		this.ChildRecordClass = NavigationMenuBlockRecord;
		this.subModuleRecord = this.articleParent.list.subModuleRecord;
		ChildField.prototype.loadBox.call(this);
		this.articleParent.domItem.className += "  " + this.$skin + "-item";
		if (this.articleParent.reorderBtn) {
			this.articleParent.reorderBtn.className += " s-nav-block-reorder";
		}
		this.onReorderItem(this.articleParent);
		this.isMenuBlock = true;
	},
	onReorderItem: function(record) {},
	onItemInOut: function() {
		//important for compatibility
	}
});

function NavigationMenuBlockRecord() {}

helpers.defineClass(NavigationMenuBlockRecord, ChildFieldRecord, {
	drawBox: function() {
		var $skin = this.page.isAdminMode ? "s-nav-admin-block" : "s-nav-block";
		this.$expanded = true;
		this.domItem = this.list._core;
		this.blockCard = this.domItem.appendChild(document.createElement("div"));
		this.blockCard.className = this.list.$skin + "-record";
		this.blockCardHeader = this.blockCard.appendChild(document.createElement("div"));
		this.blockCardHeader.className = this.list.$skin + "-record-head";
		this.$prototype.$properties.title.$isMandatory = true;

		var prevTitleField = this.titleField;
		this.titleField = this.page.loadNewItem(this.blockCardHeader, {
			$bind: "title",
			$isEditMode: this.page.isAdminMode,
			$isAutoSizeDisabled: true,
			$isTitlePlaceHolder: true,
			$title: syra_local.nvpEnterMenuBlock,
			$contentEditable: true,
			$skin: $skin + "-title-field",
			$isMenusHidden: !this.page.isAdminMode,
			$isDetailLinkDisabled: true,
			$useLocalizePicker: true,
			$isTitleHidden: true
		}, this);
		if (!this.itemsField) {
			this.itemsField = this.page.loadNewItem(this.blockCard, {
				$bind: "items",
				$isTitleHidden: true
			}, this);
			this.itemsField.body.className += " " + $skin + "-items-field";
		} else {
			this.blockCard.insertBefore(this.titleField.domItem, this.itemsField.domItem);
		}
		this.navigationItemRecord = this.articleParent.articleParent;
		this.ensureExpandedState();
		if (this.navigationItemRecord.reorderBtn) {
			this.expandBtn.parentNode.insertBefore(this.navigationItemRecord.reorderBtn, this.expandBtn);
		}
		if (prevTitleField) {
			this.removeItem(prevTitleField, true, true);
		}
		if (this.page.isAdminMode) {
			var $localize = this.titleField.mnPickers && this.titleField.mnPickers.$localize;
			this.navigationItemRecord.menusSlot = this.titleField.domItem;
			var deleteMenu = this.navigationItemRecord.menuItems.$delete;
			deleteMenu = deleteMenu && deleteMenu[0];
			if (deleteMenu) {
				deleteMenu.layoutSlot = this.navigationItemRecord.menusSlot;
				this.navigationItemRecord.menusSlot.appendChild(deleteMenu.domItem);
			}
			if ($localize) {
				this.titleField._core.parentNode.insertBefore($localize, this.titleField._core.nextSibling);
			}
			this.navigationItemRecord.list.builder.hideMenuBlockMenus(this, true);
		}
	},
	onLocalizeField: function(field, data, response, $url) {
		this.articleParent.subModuleRecord.applyChange(data, response, $url);
		return false;
	},
	onExpandClick: function() {
		this.expandMenuBlock(!this.$expanded);
		this.page.refreshExpandAllLinks(this.articleParent.subModuleRecord);
	},
	expandMenuBlock: function(expanded) {
		this.$expanded = expanded;
		this.ensureExpandedState();
	},
	ensureExpandedState: function() {
		var text = this.$expanded ? syra_local.box_collapse : syra_local.box_expand;
		var icon = this.$expanded ? "node_expanded" : "node_collapsed";
		if (!this.expandBtn) {
			this.expandBtn = syra_menus.addIconButton(text, "s-nav-block-expand", "onExpandClick", null, icon);
			this.expandBtn.syraItem = this.id;
			this.titleField.domItem.insertBefore(this.expandBtn, this.titleField.domItem.firstChild);
		} else {
			syra_menus.updateButtonIcon(this.expandBtn, text, icon);
		}
		this.itemsField.domItem.style.display = this.$expanded ? "" : "none";
	}
});