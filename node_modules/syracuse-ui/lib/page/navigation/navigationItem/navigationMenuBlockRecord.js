"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ChildFieldRecord = require('syracuse-ui/lib/field/child/childFieldRecord').ChildFieldRecord;

function NavigationMenuBlockRecord() {}

exports.NavigationMenuBlockRecord = helpers.defineClass(NavigationMenuBlockRecord, ChildFieldRecord, {
	drawBox: function() {
		this.$$item = $(this.list._core);
		this.blockCard = this.list._core.appendChild(document.createElement("div"));
		this.blockCard.className = this.list.$skin + "-record";

		this.$prototype.$properties.title.$isMandatory = true;
		this.page.menusBlocks[this.id] = this;
		if (this.articleParent.articleParent.menusSlot) {
			this.articleParent.articleParent.menusSlot.className = "s-nav-block-menus";
		}
		this.toggleDesignMode();
	},
	toggleDesignMode: function() {
		var prevTitleField = this.titleField;
		this.titleField = this.page.loadNewItem(this.blockCard, {
			$bind: "title",
			$isEditMode: this.page.designing,
			$isTitlePlaceHolder: true,
			$title: this.page.localize.dskpNavigationPageEnterMenuBlock,
			$contentEditable: true,
			$skin: "s-nav-block-title-field",
			$isMenusHidden: true,
			$isDetailLinkDisabled: true,
			$isTitleHidden: true
		}, this);
		if (!this.itemsField) {
			this.itemsField = this.page.loadNewItem(this.blockCard, {
				$bind: "items",
				$isTitleHidden: true
			}, this);
			this.itemsField.body.className += " s-nav-block-items-field";
			this.itemsField.menusSlot.className = "s-nav-items-menus-slot";
		} else {
			this.blockCard.insertBefore(this.titleField.domItem, this.itemsField.domItem);
		}
		var itemRecord = this.articleParent.articleParent;
		this.titleField._dataValue.appendChild(this.itemsField.menusSlot);
		this.titleField._dataValue.insertBefore(itemRecord.reorderPicker, this.titleField._dataValue.firstChild);
		if (itemRecord.reorderPicker) {
			this.titleField._dataValue.insertBefore(itemRecord.reorderPicker, this.titleField._dataValue.firstChild);
		}
		this.titleField._dataValue.appendChild(itemRecord.menusSlot);
		this.titleField._dataValue.setAttribute("data-s-inout", this.id);
		if (prevTitleField) {
			this.removeItem(prevTitleField, true, true);
		}
	},
	onItemEnterLeave: function(event) {
		if (this.itemsField && this.itemsField.menusSlot) {
			this.page.ensureDesignedItemVisibility(this.itemsField, event);
		}
		this.page.ensureDesignedItemVisibility(this.articleParent.articleParent, event);
	},
	_createMenusBox: function() {

	},
	applyActionLinkChange: function(resources) {
		ChildFieldRecord.prototype.applyActionLinkChange.call(this, resources);
		if (!this.menusBox && resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
			this._createMenusBox();
		}
	},
	dispose: function() {
		if (this.page && this.page.menusBlocks) {
			delete this.page.menusBlocks[this.id];
		}
		this.blockCard = this.titleField = this.itemsField = null;
		ChildFieldRecord.prototype.dispose.call(this);
	}
});