"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ChildFieldRecord = require('syracuse-ui/lib/field/child/childFieldRecord').ChildFieldRecord;

function NavigationMenuBlockRecord() {}

exports.NavigationMenuBlockRecord = helpers.defineClass(NavigationMenuBlockRecord, ChildFieldRecord, {
	drawBox: function() {
		this.$$item = $(this.list._core);
		var card = this.list._core.appendChild(document.createElement("div"));
		card.className = this.list.$skin + "-record";

		this.$prototype.$properties.title.$isMandatory = true;

		this.titleField = this.page.loadNewItem(card, {
			$bind: "title",
			$isEditMode: true,
			$isTitlePlaceHolder: true,
			$title: this.page.localize.dskpNavigationPageEnterMenuBlock,
			$contentEditable: true,
			$skin: "s-nav-block-title-field",
			$isMenusHidden: true,
			$isDetailLinkDisabled: true,
			$isTitleHidden: true
		}, this);
		this.itemsField = this.page.loadNewItem(card, {
			$bind: "items",
			$isTitleHidden: true
		}, this);
		this.itemsField.body.className += " s-nav-block-items-field";
		this.itemsField.menusSlot.className = "s-nav-items-menus-slot";
		this.titleField._dataValue.appendChild(this.itemsField.menusSlot);
		var itemRecord = this.articleParent.articleParent;
		if (itemRecord.reorderPicker) {
			this.titleField._dataValue.insertBefore(itemRecord.reorderPicker, this.titleField._dataValue.firstChild);
		}
		if (itemRecord.menusSlot) {
			itemRecord.menusSlot.className = "s-nav-block-menus";
			this.titleField._dataValue.appendChild(itemRecord.menusSlot);
		}
		this.titleField._dataValue.setAttribute("data-s-inout", this.id);
	},
	onItemEnterLeave: function(event) {
		if (this.itemsField && this.itemsField.menusSlot) {
			document.site.toggleClass(this.itemsField.menusSlot, "s-enter", event.type == "mouseenter");
		}
		var itemRecord = this.articleParent.articleParent;
		if (itemRecord.menusSlot) {
			itemRecord.menusSlot.style.visibility = (event.type == "mouseenter") ? "visible" : "";
		}
		if (itemRecord.reorderPicker) {
			itemRecord.reorderPicker.style.visibility = event.type == "mouseenter" ? "" : "hidden";
		}
	},
	_createMenusBox: function() {

	},
	applyActionLinkChange: function(resources) {
		ChildFieldRecord.prototype.applyActionLinkChange.call(this, resources);
		if (!this.menusBox && resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
			this._createMenusBox();
		}
	},
	dispose: function() {
		this.titleField = this.itemsField = null;
		ChildFieldRecord.prototype.dispose.call(this);
	}
});