"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SingleList = require("syracuse-ui/lib/field/array/singleBuilder/singleList").SingleList;
var NavigationItemRecord = require('./navigationItemRecord').NavigationItemRecord;

function NavigationItemList() {}

exports.NavigationItemList = helpers.defineClass(NavigationItemList, SingleList, {
	loadBox: function(initData) {
		this.RecordClass = NavigationItemRecord;
		this._initRows();
		this.columnsCount = (this.articleParent.isSubModuleRecord && !this.page.isAdminMode) ? 3 : 1;
		this.emptyMessage = syra_local.nvpNoMenuItem;
		this.$item.$isTopLabelAlignment = true;
		this.$itemMenuSkin = "s-mn-ldp-link";
		this.$iconPath = "page/s-ldp-";
		this.$item.$skin = this.page.isAdminMode ? "s-nav-admin-items" : "s-nav-items";
		if (this.articleParent.isSubModuleRecord) {
			this.subModuleRecord = this.articleParent;
		} else {
			this.subModuleRecord = this.articleParent.list.subModuleRecord; //this.articleParent.list = childField
		}
		SingleList.prototype.loadBox.call(this, initData);
		this.subModuleRecord.onLoadNavigationItem(this);
	},
	emptyBody: function(addEmptySlot, onFetch) {
		this._initRows();
		SingleList.prototype.emptyBody.call(this, addEmptySlot, onFetch);
		if (this.emptyDataItem) {
			this.emptyDataItem.isDroppable = false;
			this.emptyDataItem.defautTextContent = this.emptyDataItem.textContent;
			this.emptyDataItem.syraIsEmptyItem = this.id;
		}
	},
	onItemInOut: function(onEnter, event) {
		if (event && (event.currentTarget == this.emptyDataItem)) {
			var isDroppable = !! (onEnter && syra_dd.ddAgent && syra_dd.ddAgent.isNavigationItemReorderDDAgent);
			if (this.emptyDataItem.isDroppable != isDroppable) {
				this.emptyDataItem.isDroppable = isDroppable;
				if (isDroppable) {
					this.emptyDataItem.textContent = syra_local.nvpDropOnEmpty;
					this.emptyDataItem.className = "s-nav-admin-items-empty-drop";
				} else {
					this.emptyDataItem.className = "s-nav-admin-items-empty-slot";
					this.emptyDataItem.textContent = this.emptyDataItem.defautTextContent;
				}

			}

		}
	},
	onAddMenuItem: function($bind, $menu) {
		if (this.page.isAdminMode) {
			SingleList.prototype.onAddMenuItem.call(this, $bind, $menu);
		}
	},
	_ensureMenuSlot: function() {
		if (this.page.isAdminMode) {
			if (!this.menusSlot) {
				this.menusSlot = document.createElement("div");
				if (this.articleParent.isSubModuleRecord) {

					this.menusSlot.className = "s-nav-admin-submodule-items-menus";
					this.articleParent.body.insertBefore(this.menusSlot, this.articleParent.body.firstChild);
				}
			}
			return this.menusSlot;
		}
	},
	dispose: function() {
		this.subModuleRecord = null;
		SingleList.prototype.dispose.call(this);
	},
	_initRows: function() {
		this.rows = [];
		this.currentCol = 0;
	},
	appendRow: function() {
		var row = {
			slot: document.createElement("div"),
			cols: [],
		};
		row.slot.className = this.$skin + "-row";
		this.body.appendChild(row.slot);
		for (var ii = 0; ii < this.columnsCount; ii++) {
			var slot = document.createElement("div");
			slot.className = this.$skin + "-col";
			row.slot.appendChild(slot);
			row.cols.push({
				slot: slot,
				items: []
			});
		}
		return row;
	},

	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		SingleList.prototype.setDataBind.call(this, dataRecordSet, parentDataRecord, metaData);
		if (!this.page.isAdminMode && this.articleParent.isSubModuleRecord) {
			this.page.refreshExpandAllLinks(this.articleParent);
		}
	},
	onAppendRecord: function(newRecord) {
		if (this.rows.length == 0) {
			this.rows = [this.appendRow()];
		}
		this.rows[0].cols[this.currentCol++].slot.appendChild(newRecord.domItem);
		newRecord.rowIndex = 0;
		newRecord.colIndex = this.currentCol;
		if (this.currentCol == this.columnsCount) {
			this.currentCol = 0;
		}
	}
});