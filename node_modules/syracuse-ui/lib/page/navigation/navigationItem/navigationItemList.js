"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SingleList = require("syracuse-ui/lib/field/array/singleBuilder/singleList").SingleList;
var NavigationItemRecord = require('./navigationItemRecord').NavigationItemRecord;

function NavigationItemList() {}

exports.NavigationItemList = helpers.defineClass(NavigationItemList, SingleList, {
	loadBox: function(initData) {
		this.emptyMessage = this.localize.dskpNavigationPageNoMenuItem;
		this.$item.$skin = "s-nav-items";
		this.$isQuickDesignerEnabled = false;
		SingleList.prototype.loadBox.call(this, initData);
	},
	initializeList: function() {
		this.columnsCount = (this.articleParent.isSubModuleRecord && !this.page.isAdminMode()) ? 3 : 1;
		this._initRows();
		this.emptyMessage = this.localize.dskpNavigationPageNoMenuItem;
		this.$item.$isTopLabelAlignment = true;
		this.RecordClass = NavigationItemRecord;
		SingleList.prototype.initializeList.call(this);
	},
	_createMenusBox: function() {
		if (!this.isMenuLoaded) {
			this.isMenuLoaded = true;
			this.page.ensureDesignedItemVisibility(this);
			this.page.loadNewItem(this.menusSlot, {
				$layoutType: "row",
				$autoSize: true,
				$items: [{
					$skin: "s-list-menus-link",
					$bind: "$create",
					$category: "link",
					$icon: {
						$mode: "icon",
						$path: "list/s-list-"
					}
				}, {
					$skin: "s-list-menus-link",
					$bind: "$select",
					$category: "link",
					$icon: {
						$mode: "icon",
						$path: "list/s-list-"
					}
				}]
			}, this);
		}
		this.topbar.style.display = "";
	},
	appendMenusSlot: function() {
		this.menusSlot = document.createElement("div");
	},
	_initRows: function() {
		this.rows = [];
		this.currentCol = 0;
	},
	appendRow: function() {
		var row = {
			slot: document.createElement("div"),
			cols: [],
		};
		row.slot.className = this.$skin + "-row";
		this.body.appendChild(row.slot);
		for (var ii = 0; ii < this.columnsCount; ii++) {
			var slot = document.createElement("div");
			slot.className = this.$skin + "-col";
			row.slot.appendChild(slot);
			row.cols.push({
				slot: slot,
				items: []
			});
		}
		return row;
	},
	emptyBody: function(addEmptySlot, onFetch) {
		this._initRows();
		SingleList.prototype.emptyBody.call(this, addEmptySlot, onFetch);
	},
	onAppendRecord: function(newRecord) {
		if (this.rows.length == 0) {
			this.rows = [this.appendRow()];
		}
		this.rows[0].cols[this.currentCol++].slot.appendChild(newRecord.domItem);
		newRecord.rowIndex = 0;
		newRecord.colIndex = this.currentCol;
		if (this.currentCol == this.columnsCount) {
			this.currentCol = 0;
		}
	}
});