"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SingleList = require("syracuse-ui/lib/field/array/singleBuilder/singleList").SingleList;
var NavigationItemRecord = require('./navigationItemRecord').NavigationItemRecord;

function NavigationItemList(){
}

exports.NavigationItemList = helpers.defineClass(NavigationItemList, SingleList, {
    loadBox: function(initData){
        this.emptyMessage = this.localize.navigPageNoMenuItem;
        this.$item.$iconPath = "page/s-nav-";
        this.$item.$skin = this.page.isAdminMode ? "s-nav-admin-items" : "s-nav-items";
        this.$isQuickDesignerEnabled = false;
        if (this.articleParent.isSubModuleRecord) {
            this.subModuleRecord = this.articleParent;
        }
        else {
            this.subModuleRecord = this.articleParent.list.subModuleRecord; //this.articleParent.list = childField
        }
        SingleList.prototype.loadBox.call(this, initData);
        this.subModuleRecord.onLoadNavigationItem(this);
    },
    dispose: function(){
        this.subModuleRecord = null;
        SingleList.prototype.dispose.call(this);
    },
    initializeList: function(){
        this.columnsCount = (this.articleParent.isSubModuleRecord && !this.page.isAdminMode) ? 3 : 1;
        this._initRows();
        this.emptyMessage = this.localize.navigPageNoMenuItem;
        this.$item.$isTopLabelAlignment = true;
        this.RecordClass = NavigationItemRecord;
        SingleList.prototype.initializeList.call(this);
    },
    _createMenusBox: function(){
        if (!this.isMenuLoaded) {
            this.isMenuLoaded = true;
            this.page.ensureDesignedItemVisibility(this);
            if (this.page.isAdminMode) {
                var $itemBlock = this.defineNewIconMenu("$create", this.$skinMenus + "-link", true);
                $itemBlock.$icon.$value = "new-menus-block";
                var $itemMenu = this.defineNewIconMenu("$select", this.$skinMenus + "-link", true);
                $itemMenu.$icon.$value = "new-menu";
                this.page.loadNewItem(this.menusSlot, {
                    $layoutType: "row",
                    $autoSize: true,
                    $items: [$itemBlock, $itemMenu]
                }, this);
            }
        }
        this.topbar.style.display = "";
    },
    appendMenusSlot: function(){
        this.menusSlot = document.createElement("div");
    },
    _initRows: function(){
        this.rows = [];
        this.currentCol = 0;
    },
    appendRow: function(){
        var row = {
            slot: document.createElement("div"),
            cols: [],
        };
        row.slot.className = this.$skin + "-row";
        this.body.appendChild(row.slot);
        for (var ii = 0; ii < this.columnsCount; ii++) {
            var slot = document.createElement("div");
            slot.className = this.$skin + "-col";
            row.slot.appendChild(slot);
            row.cols.push({
                slot: slot,
                items: []
            });
        }
        return row;
    },
    emptyBody: function(addEmptySlot, onFetch){
        this._initRows();
        SingleList.prototype.emptyBody.call(this, addEmptySlot, onFetch);
    },
    setDataBind: function(dataRecordSet, parentDataRecord, metaData){
        SingleList.prototype.setDataBind.call(this, dataRecordSet, parentDataRecord, metaData);
        if (this.articleParent.isSubModuleRecord) {
            var hasChildBlock;
            if (this.dataset) {
                for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
                    if (this.dataset[ii].menuBlock) {
                        hasChildBlock = true;
                        break;
                    }
                }
            }
            this.articleParent.expandLink.setState({
                $isHidden: !hasChildBlock
            });
            this.articleParent.collapseLink.setState({
                $isHidden: !hasChildBlock
            });
        }
    },
    onAppendRecord: function(newRecord){
        if (this.rows.length == 0) {
            this.rows = [this.appendRow()];
        }
        this.rows[0].cols[this.currentCol++].slot.appendChild(newRecord.domItem);
        newRecord.rowIndex = 0;
        newRecord.colIndex = this.currentCol;
        if (this.currentCol == this.columnsCount) {
            this.currentCol = 0;
        }
    }
});
