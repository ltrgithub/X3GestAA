"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

var Field = require('syracuse-ui/lib/field/field').Field;
var FieldHelper = require('syracuse-ui/lib/field/fieldHelper');
var ReorderCapability = require('syracuse-ui/lib/field/array/capability/reorderCapability').ReorderCapability;
var ListDesigner = require("syracuse-ui/lib/authoring/list/listDesigner").ListDesigner;
var SubModuleRecord = require('./submoduleRecord').SubModuleRecord;

function SubModuleList() {}

exports.SubModuleList = helpers.defineClass(SubModuleList, Article, {
	notifyDesignerUpdate: function() {
		var designer = this.designer || this.page.designer;
		if (designer) {
			designer.historyTool.notifyUpdate();
		}
	},
	designItem: function(open) {
		document.site.designItem(open, this, ListDesigner);
		if (open) {
			this.toggleDesignerPicker(open);
		} else {
			if (!this.page.designer) {
				this.toggleDesignerPicker(open);
			} else {
				if (this.designPicker) {
					this.designPicker.className = "s-list-designer-picker";
				}
			}
		}
	},
	toggleDesignerPicker: function(show) {
		if (show) {
			if (this.topbar) {
				if (!this.designPicker) {
					this.designPickerSlot = document.createElement("div");
					this.designPickerSlot.className = "s-list-designer-picker-slot";
					this.designPicker = document.createElement("a");
					this.designPicker.className = "s-list-designer-picker";
					this.designPicker.setAttribute("data-s-picker", this.designPicker.syraPickerType = "$design");
					this.designPicker.syraIsDesignEnable = true;
					if (this._menusSlot) {
						this._menusSlot.style.display = "none";
					}
					this.designPickerSlot.appendChild(this.designPicker);
					this.topbar.insertBefore(this.designPickerSlot, this.topbar.firstChild);
				}
				if (this.designer) {
					this.designPicker.className = "s-list-designer-picker s-close";
				}
			}
		} else {
			if (this.designPicker) {
				document.site.removeDomChild(this.designPickerSlot);
				this.designPicker = this.designPickerSlot = null;
			}
			if (this._menusSlot) {
				this._menusSlot.style.display = "";
			}
		}
	},
	toggleUIDesign: function(enable, disposingDesigner) {
		if (enable) {
			this.toggleDesignerPicker(true);
		} else {
			this.toggleDesignerPicker(false);
			if (disposingDesigner) {
				this.designItem(false);
			}
		}
	},
	ensureDataSet: function() {
		return this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || [];
	},
	getMetaData: function() {
		var $properties = this.articleParent.dataset.$properties;
		return $properties ? $properties[this.$item.$bind] : null;
	},
	ensureLayoutMode: function() {
		Field.prototype.ensureLayoutMode.call(this);
	},
	onClickPicker: function(picker, event) {
		switch (picker.getAttribute("data-s-picker")) {
			case "$design":
				this.designItem(!this.designer);
				break;
			case "list-selector":
				event.stopPropagation();
				this.selector.onSelectRecords(event);
				event.syraRetValue = true;
				break;
		}
		return true;
	},
	loadBox: function(initData) {
		this.isList = true;
		this.page.attachToPageResizeListener(true, this);
		Article.prototype.loadBox.call(this, initData);
		this.articleParent.bind(this, this.$item.$bind);
		if (document.site.enableTestRobot) {
			Field.prototype.appendQualityAtt.call(this, this._domItem);
		}
		if (this.records.length == 0) {
			this.emptyBody(true, this.page.$autoFetch !== false);
		}
	},
	emptyBody: function(addEmptySlot) {
		document.site.emptyDom(this._core);
		if (addEmptySlot) {
			var empty = document.createElement("div");
			empty.className = this.$skin + "-empty-slot";
			empty.textContent = this.localize.flNoData;
			this._core.appendChild(this.emptyDataItem = empty);
		}
	},
	showDiagnoses: function(diagnoses, options) {
		Field.prototype.showDiagnoses.call(this, diagnoses, options);
	},
	ensureClientDataset: function() {
		if (!this.clientDataset) {
			this.clientDataset = this.ensureDataSet();
		}
		return this.clientDataset;
	},
	drawBox: function() {
		this.arrayLevel = "array";
		this.isRecordDataset = true; //!important for sendBag
		this._isAddDisabled = false;
		this.records = [];
		this.recordsMap = {};

		this.$fields = this.$prototype.$item.$properties || {};

		this.$item.$isTopLabelAlignment = true;
		this.RecordClass = SubModuleRecord;
		if (!this.$item.$layout) {
			this.$item.$layout = {};
		}
		var $items = this.$item.$layout.$items;
		if (!$items) {
			$items = this.$item.$layout.$items = [];
			var $binds = Object.keys(this.$fields);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				if (!this.$fields[$binds[ii]].$isExcluded) {
					$items.push({
						$bind: $binds[ii]
					});
				}
			}
		}


		this.$recordFacet = this.articleParent.$item.$recordFacet || this.$facet || "$details";
		this.$item.$selectMode = "row";
		this.isClientFetch = true;
		if ((this.$isEditMode = this.$item.$isEditMode) === undefined) {
			this.$isEditMode = this.articleParent.$isEditMode;
		}
		this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
		if (this.$isEditMode) {
			this.$skinInput = this.$skin + "-input";
			if (this.$item.$isTopLabelAlignment == null) {
				this.$item.$isTopLabelAlignment = true;
			}
			this.inputId = this.id + "-input";
		}
		Field.prototype._initCss.call(this);

		this._domItem = document.createElement("div");
		this._domItem.className = this._$cssTopField;
		this.$$item = $(this._domItem);
		this.layoutSlot.appendChild(this._domItem);
		this.appendTitle();

		this._createValueContainer();

		this.setTitle(this.$item.$title || this.$field.$title);
		this.setDescription(this.$item.$description || this.$field.$description);
		this.setState(this.$field);

		this.fieldValue.className += " s-list";

		this.topbar = document.createElement("div");
		this.topbar.className = "s-list-topbar";
		this.fieldValue.appendChild(this.topbar);

		this._core = document.createElement("div");
		this._core.className = "s-list-core";
		this.fieldValue.appendChild(this._core);

		this._menusSlot = document.createElement("div");
		this._menusSlot.className = "s-list-menus-cell";
		if (this.$item.$isPopupMenuHidden) {
			this._menusSlot.style.display = "none";
		}
		this.topbar.appendChild(this._menusSlot);

		this.fieldValue.style.overflow = "auto";
		this.$skin = this.$item.$skin || "s-cards";
		this.applyDesignMetaData(this.$item, false);
		this.loadSelector();
		this.applyCapabilities();
		this.ensureLayoutMode();
	},
	ensureArticleId: function() {
		this.topbar.setAttribute("data-s-article", this.id);
		this._core.setAttribute("data-s-article", this.id);
	},
	onWindowResize: function() {
		if (this.graphDecorator) {
			this.graphDecorator.onWindowResize();
		}
	},
	_createValueContainer: function() {
		this.domValueSlot = document.createElement("article");
		this.domValueSlot.className = this._$cssField + "-value";
		this._dataValue = this._core = this.fieldValue = this.domValueSlot;
		this.$$fieldValue = $(this.fieldValue);
		this._domItem.appendChild(this.domValueSlot);
	},
	applyFetchOptions: function(options, pagingChange) {
		this.ensureDataSet();
		if (!pagingChange || (this.clientDataset == this.dataset)) {
			this.clientDataset = [];
			for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
				var dataRecord = this.dataset[ii];
				this.clientDataset.push(dataRecord);
			}
		}
	},
	loadSelector: function() {
		this.selector = {};
	},
	setHelp: function($help) {
		Field.prototype.setHelp.call(this, $help);
	},
	setDescription: function($description) {
		Field.prototype.setDescription.call(this, $description);
	},
	hideTitle: function($isTitleHidden) {
		Field.prototype.hideTitle.call(this, $isTitleHidden);
	},
	getDefaultTitle: function() {
		return this.localize.flDefaultTitle;
	},
	getTitle: function() {
		return Field.prototype.getTitle.call(this);
	},
	setTitle: function($title) {
		Field.prototype.setTitle.call(this, $title);
		if (this.domTitle) {
			this.domTitle.style.display = this.getTitle().length == 0 ? "none" : "";
		}
	},
	getLocalizedTitle: function($title) {
		if ($title && $title.length > 0 && $title[1] == "@") {
			return this.parseExpression($title);
		}
		return $title;
	},
	appendTitle: function() {
		if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
			Field.prototype.appendTitle.call(this);
			this.domTitle.style.display = "none";
		}
	},
	setMenus: function($menus) {
		if ($menus) {
			//important copy allow multi binding
			this.applyActionLinkChange({
				$links: $menus.$links,
				$actions: $menus.$actions
			});
		}
	},
	onAddMenuItem: function($menu) {
		switch ($menu.$bind) {
			case "$first":
			case "$previous":
			case "$next":
			case "$last":
				return false;
		}
		return true;
	},
	_clearMenuItems: function() {
		Article.prototype._clearMenuItems.call(this);
		if (this.menusBox) {
			this._menusSlot.style.display = "none";
			this.menusBox.layoutParent.removeItem(this.menusBox, true);
			this.removeMenuBag(this.menusBox);
			delete this.menusBox;
		}
	},
	onMenuDataFilled: function(menuItem) {
		if (menuItem.boxParent.isMenuGroup) {
			var menuGroupRoot = menuItem.boxParent.menuGroupRoot;
			if (menuGroupRoot.id == (this.id + "-menu-picker")) {
				if (!menuGroupRoot.$isPickerVisible && !menuGroupRoot.$item.$isMenuFilters) {
					this._menusSlot.style.display = "";
					menuGroupRoot.$isPickerVisible = true;
				}
				if (!menuItem.$item.$isTop && !menuGroupRoot.isAddinMenus) {
					menuGroupRoot.isAddinMenus = true;
					menuGroupRoot.layoutContent.items[0].layoutSlot.className += " s-record-menus-addins";
				}
			}
		}
	},
	_createMenusBox: function() {
		var $menuBag = {
			$category: "menus",
			$id: this.id + "-menu-picker",
			$skin: "s-list-menus",
			$itemSkin: "s-record-menus-link",
			$layout: {
				$items: [{
					$skin: "s-list-menus-link",
					$bind: "$create",
					$category: "link",
					$icon: {
						$mode: "icon",
						$path: "list/s-list-"
					}
				}, {
					$skin: "s-list-menus-link",
					$bind: "$select",
					$category: "link",
					$icon: {
						$mode: "icon",
						$path: "list/s-list-"
					}
				}]
			}
		};
		this.page.loadNewItem(this._menusSlot, $menuBag, this);
		this.menusBox = this.idMap[this.id + "-menu-picker"];
		this.menusBox.contextField = this;
	},
	applyActionLinkChange: function(resources) {
		if (!this.menusBox && resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
			this._createMenusBox();
		}
		Article.prototype.applyActionLinkChange.call(this, resources);
	},
	applyFieldStyle: function(metaData) {
		FieldHelper.applyFieldStyle(this, metaData);
	},
	toggleEditMode: function($isEditMode) {},
	onFieldDiagnoseChange: function(add, record) {
		// --- handling grid diag alert info ---

		if (record) {
			var ids = record.diagnosesFields ? Object.keys(record.diagnosesFields) : ids;
			if (ids && ids.length != 0) {
				for (var ii = 0, jj = ids.length; ii < jj; ii++) {
					this.onFieldDiagnoseChange();
				}
			}
		} // if diagnose is added to a cell
		if (add) { // list diag count
			this.diagCount = this.diagCount || 0;
			// list diag info message
			if (!this.diagAlert) {
				var msg = document.createElement("div");
				msg.className = "s-grid-diag-alert";
				this._menusSlot.parentNode.insertBefore(msg, this._menusSlot.nextSibling);
				this.diagAlert = msg;
			}
			this.diagAlert.textContent = ++this.diagCount + this.localize.flDiagAlert;
		}

		// if diagnose is removed from a cell. clean
		else {
			if (this.diagAlert) {
				this.diagAlert.textContent = --this.diagCount + this.localize.flDiagAlert;
				if (this.diagCount == 0) {
					document.site.emptyDom(this.diagAlert);
					this.diagAlert = null;
				}
			}
		}
	},
	onMenuClick: function(menuItem) {
		if (!menuItem.$isAction) {
			switch (menuItem.$bind) {
				case "$select":
					this.doSelectAction();
					return false;
				case "$design":
					this.designItem(true);
					this.toggleDesignerPicker(true);
					return false;
			}
		}
		return true;
	},
	doSelectAction: function() {
		var self = this;
		self.currentSelectRecords = null;
		self.boxParent.openDialog({
			article: self,
			$url: self.menuItems.$select[0].$sourceUrl,
			onValidate: function() {
				self.notifySelectRecords();
			},
			onSelectRecord: function(selectedRecords) {
				self.currentSelectRecords = selectedRecords;
				return false;
			}
		});
	},
	notifyActionChange: function(target, value, notifyServer) {
		var sendBag = this.page.ensureSendBag(this);
		var dataRecords = this.ensureDataSet();
		var record = target.isRecordArticle ? target : null;
		if (value.$create) {
			var options = {
				isCreate: true
			};
			if (record) {
				options.$serverIndex = record.$serverIndex;
				options.$recordIndex = record.$recordIndex;
				options.isInsert = true;
			} else {
				if (this.records.length > 0) {
					options.$serverIndex = this.records[this.records.length - 1].$serverIndex + 1;
				} else {
					options.$serverIndex = 0;
				}
				options.$recordIndex = this.records.length;
			}
			options.dataRecord = {
				$uuid: helpers.uuid.generate()
			};
			if (record) {
				var found = this.findDataRecord(record.$uuid);
				dataRecords.splice(found.dataRecordIndex, 0, options.dataRecord);
			} else {
				dataRecords.splice(options.$serverIndex, 0, options.dataRecord);
			}
			var newRecord = this._appendRecord(options);
			//sendbag begin
			var saved = {
				$uuid: newRecord.dataset.$uuid
			};
			if (sendBag.dataRecords.length > 0) {
				sendBag._ensureFullDataSet(this);
				if (!sendBag._findDataRecord(saved.$uuid)) {
					sendBag.dataRecords.splice(options.$recordIndex, 0, saved);
				}
			} else {
				saved.$index = options.$recordIndex;
				sendBag.dataRecords.push(saved);
			}
			//sendbag end                
			this._validateDisplay();
			this.page.notifyDataChange(this, sendBag.dataRecords);

		} else {
			if (record) {
				this.records.splice(record.$recordIndex, 1);
				var found = this.findDataRecord(record.$uuid);
				if (found) {
					dataRecords.splice(found.dataRecordIndex, 1);
					record.$index = found.dataRecordIndex;
				}
				var found = sendBag.ensureRecord(record);
				if (sendBag.dataRecords.length == 1) {
					found.dataRecord.$index = record.$serverIndex;
					found.dataRecord.$isDeleted = true;
				} else {
					sendBag.dataRecords.splice(found.dataRecordIndex, 1);
				}
				delete record.$index;

				delete this.recordsMap[record.$uuid];
				this.removeRecord(record, true);
			} else {
				dataRecords.splice(0, dataRecords.length);
				sendBag.dataRecords = [];
				this.removeRecords();
			}
			this._validateDisplay();

			if (this.records.length == 0) {
				this.emptyBody(true);
			}
			this.page.notifyDataChange(this, sendBag.dataRecords);
		}
	},
	findDataRecord: function($uuid) {
		var found;
		if (this.dataset) {
			for (var ii = 0, jj = this.dataset.length; ii < jj; ii++) {
				var dataRecord = this.dataset[ii];
				if (dataRecord && dataRecord.$uuid == $uuid) {
					found = {
						dataRecord: dataRecord,
						dataRecordIndex: ii
					};
					break;
				}
			}
		}
		return found;
	},
	onAfterNotifyDataChange: function() {
		this.onWindowResize();
	},
	onNotifyDataChange: function(field, value) {
		return false;
	},
	setState: function(state) {
		Field.prototype.setState.call(this, state);
	},
	showField: function(show) {
		Field.prototype.showField.call(this, show);
	},
	applyRecordCapabilities: function(record, $recordActions) {
		var $actions = $recordActions || {};
		if (this.$capability.insert) {
			$actions.$create = {
				$title: this.localize.flInsert,
				$isHidden: false
			};
		}
		if (this.$capability["delete"]) {
			$actions.$delete = {
				$title: this.localize.flDelete,
				$isHidden: false
			};
		}
		if ($actions.$create || $actions.$delete) {
			record.applyActionLinkChange({
				$actions: $actions
			});
		}
		if ($recordActions) {
			//on metadata
			if (record.hasReorderCapability != this.$capability.reorder) {
				record.applyReorderCapability(this.$capability.reorder);
			}
		}
	},
	applyCapabilities: function($metaCapablities) {
		var $actions = {};
		var $recordActions = {};
		var $capabilities = $metaCapablities;
		if ($capabilities === undefined) {
			$capabilities = this.$prototype.$capabilities;
		}
		var $prev = this.$capability;
		this.$capability = {};
		if ($capabilities !== undefined) {
			$capabilities = $capabilities || "";
			var parts = $capabilities.split(",");
			for (var ii = 0, jj = parts.length; ii < jj; ii++) {
				if (parts[ii]) {
					this.$capability[parts[ii]] = true;
				}
			}
		}
		if ($prev) {
			if ($prev.append && !this.$capability.append) {
				$actions.$create = {
					$isHidden: true
				};
			}
			if ($prev.deleteAll && !this.$capability.deleteAll) {
				$actions.$delete = {
					$isHidden: true
				};
			}
			if ($prev["delete"] && !this.$capability["delete"]) {
				$actions.$delete = {
					$isHidden: true
				};
				$recordActions.$delete = {
					$isHidden: true
				};
			}
			if ($prev.insert && !this.$capability.insert) {
				$recordActions.$create = {
					$isHidden: true
				};
			}
			if ($prev.reorder && !this.$capability.reorder) {
				if (this.reorderCapability) {
					this.reorderCapability.dispose();
					this.reorderCapability = null;
				}
			}
		}

		if (this.$capability.append) {
			$actions.$create = {
				$title: this.localize.flAppend,
				$isHidden: false
			};
		}
		if (this.$capability["deleteAll"]) {
			$actions.$delete = {
				$title: this.localize.flDeleteAll,
				$confirm: this.localize.flDeleteAllMessageText,
				$isHidden: false
			};
		}
		if ($actions.$create || $actions.$delete) {
			this.applyActionLinkChange({
				$actions: $actions
			});
		}
		//this.$capability.reorder = true;
		if (this.$capability.reorder) {
			this.$item.$isRowIndexVisible = true;
			if (!this.reorderCapability) {
				(this.reorderCapability = new ReorderCapability(this)).setDraggable();
			}
		}

		if ($metaCapablities !== undefined) {
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				this.applyRecordCapabilities(this.records[ii], $recordActions);
			}
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		Field.prototype.applyDesignMetaData.call(this, metaData, designing);
	},
	applyMetaData: function(metaData) {
		if (metaData.$item) {
			metaData.$items = metaData.$item;
		}
		Field.prototype.applyMetaData.call(this, metaData);
		if (metaData.$type === undefined) {
			var $metaRecord = {};
			if (metaData.$item && metaData.$item.$properties) {
				$metaRecord.$properties = metaData.$item.$properties;
			}
			if (Object.keys($metaRecord)) {
				for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
					this.records[ii].applyChange($metaRecord);
				}
			}
		}
		if (metaData.$capabilities !== undefined) {
			this.applyCapabilities(metaData.$capabilities);
		}
		if (metaData.$item) {
			if (metaData.$item.$links) {
				var $menus = this.$fields.$links = this.$prototype.$item.$links || {};
				this.page.ensureDeltaManager().applyObjectDelta($menus, metaData.$item.$links, true);
			}
			if (metaData.$item.$actions) {
				var $menus = this.$fields.$actions = this.$prototype.$item.$actions || {};
				this.page.ensureDeltaManager().applyObjectDelta($menus, metaData.$item.$actions, true);
			}
		}
	},
	removeRecords: function(addEmptySlot) {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			var record = this.records[ii];
			delete this.recordsMap[record.$uuid];
			this.removeRecord(record);
		}
		this.recordsMap = {};
		this.records = [];
		if (this.selector && this.selector.clear) {
			this.selector.clear();
		}
		this.emptyBody(addEmptySlot);
	},
	removeRecord: function(record, removeDom) {
		this.onFieldDiagnoseChange(false, record); // update grid diagnose alert
		if (this.page.diagnosesPanel) {
			this.page.diagnosesPanel.cleanBoxDiagnoses(record);
		}
		this.removeItem(record, removeDom);
	},
	_appendRecord: function(options) {
		if (this.emptyDataItem) {
			document.site.emptyDom(this.emptyDataItem);
			this.emptyDataItem = null;
		}
		if (options.dataRecord.$uuid === undefined) {
			options.dataRecord.$uuid = options.$recordIndex;
		}
		var record = (this.recordsMap[options.dataRecord.$uuid] = new this.RecordClass());
		record.arrayLevel = "record";
		record.$uuid = options.dataRecord.$uuid;
		if (options.dataRecord) {
			record.dataset = options.dataRecord;
			record.$serverIndex = options.dataRecord.$serverIndex;
		}
		record.$recordIndex = options.$recordIndex;
		record.$facet = this.$recordFacet;
		record.$isEditMode = this.$isEditMode;
		record.list = this;
		record.$prototype = options.$prototype || this.$prototype.$item;
		record.isInsert = options.isInsert;
		if (record.initializeRecord) {
			record.initializeRecord(options);
		}
		this.page.initializeNewItem(record, options.$item || {}, this);
		record.loadBox();
		if (options.dataRecord) {
			record.applyChange(options.dataRecord);
		}
		if (options.isInsert) {
			this.records.splice(options.$recordIndex, 0, record);
		} else {
			this.records.push(record);
		}
		return record;
	},
	getParseIndexes: function() {
		return {
			start: 1,
			last: this.ensureClientDataset().length
		};
	},
	applyFullDelta: function(dataRecordSet) {
		var oldMap = this.recordsMap;
		this.recordsMap = {};
		this.records = [];
		var lastRecord, recordIndex = 0;
		var dataIndex = this.getParseIndexes();
		for (var ii = dataIndex.start; ii <= dataIndex.last; ii++) {
			var dataRecord = dataRecordSet[ii - 1];
			var $index = dataRecord.$serverIndex;
			if ($index === undefined) {
				$index = dataRecord.$index;
			}
			if ($index === undefined) {
				$index = (ii - 1);
			}
			var sourceDataset = this.dataset[$index];
			if (sourceDataset) {
				var record = oldMap[dataRecord.$uuid];
				if (record) {
					record.applyChange(dataRecord);
					record.$serverIndex = sourceDataset.$serverIndex;
					record.ensureDataSet(dataRecord.$uuid);
					if (record.$recordIndex != recordIndex) {
						if (lastRecord) {
							record.reorderItem(lastRecord, "insertAfter");
						} else {
							record.reorderItem(null, "prepend");
						}
						record.$recordIndex = recordIndex;
					}
					this.records.push(this.recordsMap[dataRecord.$uuid] = lastRecord = record);
				} else {
					record = this._appendRecord({
						dataRecord: sourceDataset,
						$recordIndex: recordIndex,
						isInsert: true
					});
					this.recordsMap[dataRecord.$uuid] = lastRecord = record;
				}
				recordIndex++;
			}
			delete oldMap[dataRecord.$uuid];
		}
		var uiids = Object.keys(oldMap);
		for (var ii = 0, jj = uiids.length; ii < jj; ii++) {
			this.removeRecord(oldMap[uiids[ii]], true);
			delete oldMap[uiids[ii]];
		}
	},
	applyPartialDelta: function(deltaSet) {
		var dataIndex = this.getParseIndexes();
		for (var $serverIndex = 0, jj = deltaSet.length; $serverIndex < jj; $serverIndex++) {
			var deltaRecord = deltaSet[$serverIndex];
			var record = this.recordsMap[deltaRecord.$uuid];
			if (record) {
				var index = parseInt(deltaRecord.$index, 10) + 1;
				if (deltaRecord.$isDeleted || !(dataIndex.start <= index && index <= dataIndex.last)) {
					this.records.splice(this.records.indexOf(record), 1);
					delete this.recordsMap[record.$uuid];
					this.removeRecord(record, true);
				} else {
					var recordIndex = null,
						prevIndex = null;
					if (deltaRecord.$index !== undefined && record.$serverIndex != deltaRecord.$index) {
						prevIndex = this.records.indexOf(record);
						recordIndex = deltaRecord.$index - dataIndex.start;
					}
					record.ensureDataSet(record.$uuid);
					record.applyChange(deltaRecord);
					if (prevIndex) { //not process if this.clientFetchOptions
						this.records.splice(prevIndex, 1);
						this.records.splice(recordIndex, 0, record);
						var nextRecord;
						if ((recordIndex + 1) < this.records.length) {
							nextRecord = this.records[recordIndex + 1];
						}
						record.reorderItem(nextRecord, nextRecord ? "insertBefore" : "append");
					}
				}
			} else {
				if (!deltaRecord.$isDeleted) {
					var index = parseInt(deltaRecord.$index, 10) + 1;
					if (dataIndex.start <= index && index <= dataIndex.last) {
						this._appendRecord({
							dataRecord: this.dataset[deltaRecord.$index],
							$recordIndex: deltaRecord.$index,
							isInsert: true
						});
					}
				}
			}
		}
	},
	hasRecords: function() {
		return this.records && this.records.length > 0;
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		this.ensureDataSet();
		if (metaData) {
			this.applyMetaData(metaData);
		}
		if (dataRecordSet !== undefined) {
			this.fillList(dataRecordSet, parentDataRecord, this.page.$isPartialDelta || (this.page.$isEditMode && this.hasRecords()));
		}
	},
	fillList: function(dataRecordSet, parentDataRecord, isDelta) {
		if (isDelta) {
			var partialDelta = this.page.$isPartialDelta || (dataRecordSet.length == 1 && dataRecordSet[0].$index !== undefined);
			this.clientDataset = this.ensureDataSet();
			if (partialDelta) {
				this.applyPartialDelta(dataRecordSet);
			} else {
				this.applyFullDelta(dataRecordSet);
			}
		} else {
			this.clientDataset = dataRecordSet;
			this._core.style.display = "none";
			this.removeRecords(!(this.clientDataset && this.clientDataset.length > 0));
			if (this.clientDataset) {
				var recordIndex = 0;
				for (var ii = 1, jj = this.clientDataset.length; ii <= jj; ii++) {
					var dataRecord = this.clientDataset[ii - 1];
					if (!dataRecord.$isDeleted) {
						this._appendRecord({
							dataRecord: dataRecord,
							$recordIndex: recordIndex++
						});
					}
				}
			}
		}
		this._validateDisplay();
		this._core.style.display = "";
		this.onWindowResize();
	},
	_validateDisplay: function() {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			var record = this.records[ii];
			record.$recordIndex = ii;
			if (record.dataset.$index !== undefined) {
				record.dataset.$index = ii;
			}
			if (record.dataset.$serverIndex == undefined) {
				if (record._singleField) {
					record.dataset.$serverIndex = ii;
				} else {
					for (var mm = 0, kk = this.dataset.length; mm < kk; mm++) {
						if (this.dataset[mm] == record.dataset) {
							record.dataset.$serverIndex = mm;
							break;
						}
					}
				}
			}
			record.$serverIndex = record.dataset.$serverIndex;
			record.renderRowIndex();
		}

	},
	_disableAdd: function(isAddDisabled) {
		this._isAddDisabled = isAddDisabled;
		if (this.menuItems) {
			if (this.menuItems.$create) {
				this.menuItems.$create[0].disable(this._isAddDisabled);
			}
			if (this.menuItems.$select) {
				this.menuItems.$select[0].disable(this._isAddDisabled);
			}
		}
		if (this.$capability.insert) {
			for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
				var record = this.records[ii];
				if (record.menuItems.$create) {
					record.menuItems.$create[0].disable(this._isAddDisabled);
				}
			}
		}
	},
	validate: function() {
		var isValidated = true;
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			isValidated = this.records[ii].validateFields();
		}
		return isValidated;
	},

	notifySelectRecords: function() {
		if (this.currentSelectRecords) {
			var sendBag = this.page.ensureSendBag(this);
			var dataRecords = this.ensureDataSet();
			this._validateDisplay();
			this.page.notifyDataChange(this, sendBag.dataRecords);
		}
	},
	dispose: function() {
		if (this.page) {
			this.page.attachToPageResizeListener(false, this);
		}
		if (this.reorderCapability) {
			this.reorderCapability.dispose();
		}
		if (this.menusBox) {
			this.menusBox.dispose();
		}
		document.site.emptyDom(this._core);
		this._core = this.menusBox = this.domTitle = this._mandatoryFlag = this._description = this._helpFlag = this.tableRow = null;
		if (this.selector && this.selector.dispose) {
			this.selector.dispose();
		}
		this.emptyDataItem = this.reorderCapability = null;
		this.designPickerSlot = this.designPicker = this.topbar = this.clientDataset = null;
		this._menus = this.page = null;
		this.paramsFilter = this.$fields = this.$field = this.$capability = this._menusSlot = null;
		this._dataValue = this._domItem = this.domValueSlot = this.fieldValue = null;
		this.recordsMap = this.records = this.selector = null;
		Article.prototype.dispose.call(this);
	},

	setFocus: function(select, name, $serverIndex) {
		return null;
	},
	getDataValue: function(name, $serverIndex) {
		var dataRecordSet = this.ensureDataSet();
		var field;
		if ($serverIndex !== undefined) {
			if (field = this.getField(name, $serverIndex)) {
				return field.getDataValue();
			} else {
				for (var ii = 0, jj = dataRecordSet.length; ii < jj; ii++) {
					if (dataRecordSet[ii].$serverIndex == $serverIndex) {
						var value = dataRecordSet[ii][name];
						return value === undefined ? null : value;
					}
				}
			}
		}
		return null;
	},
	findRecordByServerIndex: function($serverIndex) {
		for (var ii = 0, jj = this.records.length; ii < jj; ii++) {
			if (this.records[ii].$serverIndex == $serverIndex) {
				return this.records[ii];
			}
		}
		return null;
	},
	getField: function(name, $serverIndex, select) {
		var fields, record = this.findRecordByServerIndex($serverIndex);
		if (record && !record.disposed) {
			if ((fields = record.boundFields[name]) && fields.length > 0) {
				return fields[0];
			}
		}
		return null;
	},
	findRecord: function($$selector) {
		var $uuid = this.findRecordUiid($$selector);
		return this.recordsMap[$uuid];
	},
	findRecordUiid: function($$selector) {
		return ($$selector.is("[data-s-record]") ? $$selector : $$selector.closest("[data-s-record]")).attr("data-s-record");
	}
});