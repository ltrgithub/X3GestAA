"use strict";
var _subModule = require('./subModule');

function Module(page, dataset) {
	syra_item.initialize(page, this);
	this.$prototype = page.$prototype.$properties.modules.$item;
	this.dataset = dataset || {};
	this.mode = page.mode.module;
	this.navParent = this.articleParent = this.boxParent = page;

	this.$skin = page.$skin + "-module";
	this.slot = syra_dom.li(this.$skin);
	this.slot.syraItem = this.slot.syrainout = this.id;
	this.slot.syraOnClick = "click";

	this.mode.create(this);

	if (dataset.description && dataset.description != dataset.title) {
		this.slot.title = dataset.description;
	}
	page.modulesBar && page.modulesBar.appendChild(this.slot);
}

Module.prototype.click = function() {
	if (this.page.lastSelected != this) {
		this.activate(true);
	}
	// var on = this.page.lastSelected != this;
	// this.activate(on);
	// !on && this.page.mega_togglePopup && this.page.mega_togglePopup();
};

Module.prototype.addChildren = function() {
	var submodules = this.dataset.submodules;
	this.children = [];
	if (submodules) {
		for (var ii = 0, jj = submodules.length; ii < jj; ii++) {
			this.addChild(submodules[ii]);
		}
	}
	this.ensureNoChild();
};

Module.prototype.ensureNoChild = function(slot) {
	if (this.children.length) {
		if (this.noChild) {
			syra_dom.remove(this.noChild);
			delete this.noChild;
		}

	} else {
		syra_dom.empty(this.body);
		(this.noChild = syra_dom.li(this.page.$skin + "-no-submodules", this.body)).textContent = syra_local.nvpNoSubModule;
	}
};


Module.prototype.addChild = function(record) {
	var child = _subModule.add(this, record);
	this.children.push(child);
	return child;
};

Module.prototype.activate = function(on) {
	if (on) {
		if (this.scrolling) {
			if (this.page.lastNavMethod === "menu") {
				this.page.lastNavMethod = "";
				return;
			}
		} else {
			this.page.lastNavMethod = "menu";
		}
		if (this.page.moduleTimer) {
			clearTimeout(this.page.moduleTimer);
			delete this.page.moduleTimer;
		}

		this.page.lastSelected && this.page.lastSelected.activate(false);
		this.mode.activate(on, this);
		this.page.lastSelected = this;
		var child = this.lastSelected || this.children[0];
		child && child.activate(true);
	} else {
		if (this == this.page.lastSelected) {
			this.page.lastSelected = null;
		}
		this.mode.activate(on, this);
	}
	syra_dom.toggleClass(this.slot, "s-selected", on);
};

Module.prototype.onItemInOut = function(onEnter, event, target) {
	var self = this;
	if (onEnter) {
		var relatedTarget = event && event.relatedTarget;
		if (self.page.breadcrumbModules || (self.page.isMapLoaded && self.page.lastSelected && relatedTarget && relatedTarget.parentNode == self.page.modulesBar)) {
			self.activate(true);
		} else {
			self.page.moduleTimer = setTimeout(function() {
				if (self.page && !self.page.disposed) {
					self.activate(true);
				}
			}, (self.page.lastSelected && relatedTarget && relatedTarget.parentNode == self.page.modulesBar) ? 200 : 300);
		}
	} else {
		if (self.page && self.page.moduleTimer) {
			clearTimeout(self.page.moduleTimer);
			delete self.page.moduleTimer;
		}
	}
};

Module.prototype.getChild = function(uuid) {
	for (var ii = 0, jj = this.children.length; ii <= jj; ii++) {
		var child = this.children[ii];
		if (child.dataset.$uuid === uuid)
			return child;
	}
};
exports.add = function(page, dataset) {
	return new Module(page, dataset);
};