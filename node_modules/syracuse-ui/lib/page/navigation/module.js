"use strict";
var _subModule = require('./subModule');

function Module(page, dataset) {
	syra_item.initialize(page, this);
	this.$prototype = page.$prototype.$properties.modules.$item;
	this.dataset = dataset;
	this.navParent = this.articleParent = this.boxParent = page;

	this.$skin = page.$skin + "-module";
	var slot = this.slot = syra_dom.li(this.$skin);
	slot.syraItem = slot.syrainout = this.id;
	slot.syraOnClick = "click";
	slot.textContent = dataset.title;

	if (dataset.description && dataset.description != dataset.title) {
		slot.title = dataset.description;
	}
	if (dataset.code && this.icon) {
		this.icon.style.backgroundImage = "url('" + syra_config.$iconPath + "modules/s_module_" + dataset.code.toLowerCase() + ".png')";
	}
	page.modulesBar.appendChild(slot);
}

Module.prototype.click = function() {
	var on = this.page.lastSelected != this;
	this.activate(on);
	!on && this.page.mega_togglePopup();
};
Module.prototype.activate = function(on) {
	if (on) {
		if (this.page.moduleTimer) {
			clearTimeout(this.page.moduleTimer);
			delete this.page.moduleTimer;
		}

		this.page.lastSelected && this.page.lastSelected.activate(false);

		if (!this.body) {
			this.body = syra_dom.ul(this.page.$skin + "-submodules");
			var submodules = this.dataset && this.dataset.submodules;
			this.children = [];
			if (submodules) {
				for (var ii = 0, jj = submodules.length; ii < jj; ii++) {
					this.children.push(_subModule.add(this, submodules[ii]));
				}
			}
			if (!this.children.length) {
				syra_dom.text(this.page.$skin + +"-no-submodules", syra_local.nvpNoSubModule, this.body);
			}
		}
		this.page.mega_togglePopup(this.body);
		this.page.lastSelected = this;
		var child = this.lastSelected || this.children[0];
		child && child.activate(true);
	} else {
		if (this == this.page.lastSelected) {
			this.page.lastSelected = null;
		}
		syra_dom.empty(this.body.parentNode);
	}
	this.slot.className = this.$skin + (on ? " s-selected" : "");
};
Module.prototype.onItemInOut = function(onEnter, event, target) {
	var self = this;
	if (onEnter) {
		var relatedTarget = event && event.relatedTarget;
		if (self.page.lastSelected && relatedTarget && relatedTarget.parentNode == self.page.modulesBar) {
			self.activate(true);
		} else {
			self.page.moduleTimer = setTimeout(function() {
				if (self.page && !self.page.disposed) {
					self.activate(true);
				}
			}, 1000);
		}
	} else {
		if (self.page && self.page.moduleTimer) {
			clearTimeout(self.page.moduleTimer);
			delete self.page.moduleTimer;
		}
	}
};
Module.prototype.dispose = function() {
	this.page && this.page.disposeItem(this);
};

exports.add = function(page, dataset) {
	return new Module(page, dataset);
};