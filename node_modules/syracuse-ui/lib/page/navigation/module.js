"use strict";
var _subModule = require('./subModule');

function Module(page, dataset) {
	syra_item.initialize(page, this);
	this.$prototype = page.$prototype.$properties.modules.$item;
	this.dataset = dataset || {};
	this.navParent = this.articleParent = this.boxParent = page;

	this.$skin = page.$skin + "-module";
	this.slot = syra_dom.li(this.$skin);
	this.slot.syraItem = this.slot.syrainout = this.id;
	this.slot.syraOnClick = "click";

	this.page.mode.module.create(this);

	if (dataset.description && dataset.description != dataset.title) {
		this.slot.title = dataset.description;
	}
	page.modulesBar && page.modulesBar.appendChild(this.slot);
}

Module.prototype.click = function() {
	var on = this.page.lastSelected != this;
	this.activate(on);
	!on && this.page.mega_togglePopup && this.page.mega_togglePopup();
};

Module.prototype.addSubModules = function() {
	this.children = [];
	var submodules = this.dataset.submodules;
	if (submodules) {
		for (var ii = 0, jj = submodules.length; ii < jj; ii++) {
			this.children.push(_subModule.add(this, submodules[ii]));
		}
	}
	if (!this.children.length) {
		syra_dom.li(this.page.$skin + "-no-submodules", this.body).textContent = syra_local.nvpNoSubModule;
	}
};

Module.prototype.activate = function(on) {
	if (on) {
		if (this.page.moduleTimer) {
			clearTimeout(this.page.moduleTimer);
			delete this.page.moduleTimer;
		}

		this.page.lastSelected && this.page.lastSelected.activate(false);
		this.page.mode.module.activate(on, this);
		this.page.lastSelected = this;
		var child = this.lastSelected || this.children[0];
		child && child.activate(true);
	} else {
		if (this == this.page.lastSelected) {
			this.page.lastSelected = null;
		}
		this.page.mode.module.activate(on, this);
	}
	this.slot.className = this.$skin + (on ? " s-selected" : "");
};

Module.prototype.onItemInOut = function(onEnter, event, target) {
	var self = this;
	if (onEnter) {
		var relatedTarget = event && event.relatedTarget;
		if (self.page.lastSelected && relatedTarget && relatedTarget.parentNode == self.page.modulesBar) {
			self.activate(true);
		} else {
			self.page.moduleTimer = setTimeout(function() {
				if (self.page && !self.page.disposed) {
					self.activate(true);
				}
			}, 1000);
		}
	} else {
		if (self.page && self.page.moduleTimer) {
			clearTimeout(self.page.moduleTimer);
			delete self.page.moduleTimer;
		}
	}
};

exports.add = function(page, dataset) {
	return new Module(page, dataset);
};