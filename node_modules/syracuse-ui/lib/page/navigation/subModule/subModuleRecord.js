"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;
var NavigationItemReorderDDAgent = require("./navigationItemReorderDDAgent").NavigationItemReorderDDAgent;

function SubModuleRecord(){
}

exports.SubModuleRecord = helpers.defineClass(SubModuleRecord, RecordArticle, {
    loadBox: function(options){
        this.isSubModuleRecord = true;
        this.$defaultSkinSection = this.$defaultSkinBlock = this.list.$item.$skinCard || "s-h3";
        RecordArticle.prototype.loadBox.call(this);
    },
    onLoadNavigationItem: function(navigationItem){
        navigationItem.RecordReorderDDAgentClass = NavigationItemReorderDDAgent;
    },
    reorderItem: function(targetRecord, isAfter){
        if (targetRecord) {
            targetRecord.domItem.parentNode.insertBefore(this.domItem, isAfter ? targetRecord.domItem.nextSibling : targetRecord.domItem);
            if (this.page.isAdminMode()) {
                targetRecord.header.parentNode.insertBefore(this.header, isAfter ? targetRecord.header.nextSibling : targetRecord.header);
            }
        }
        else {
            if (isAfter) {
                this.list.body.appendChild(this.domItem);
            }
            else {
                this.list.body.insertBefore(this.domItem, this.list.body.firstChild);
            }
            if (this.page.isAdminMode()) {
				var subModulesAdminTitleList = this.list.articleParent.subModulesAdminTitleList;
                if (isAfter) { 
                    subModulesAdminTitleList.appendChild(this.header);
                }
                else {
                    subModulesAdminTitleList.insertBefore(this.header, subModulesAdminTitleList.firstChild);
                }
            }
        }
    },
    remove: function(){
        if (this.$$item) {
            this.$$item.remove();
        }
    },
    applyReorderCapability: function(reorder){
        if (this.hasReorderCapability = reorder) {
            if (!this.reorderPicker) {
                this.reorderPicker = document.createElement("div");
                this.reorderPicker.className = this.$skin + "-card-reorder";
                this.reorderPicker.syraReorderRecordId = this.list.id;
                document.site.ddManager.setDragSpot(this.reorderPicker, true);
                this.domTitle.parentNode.insertBefore(this.reorderPicker, this.domTitle);
            }
        }
        else {
            if (this.reorderPicker) {
                document.site.removeDomChild(this.reorderPicker);
                delete this.reorderPicker;
            }
        }
    },
    applyChange: function(newData, serverResponse){
        if (serverResponse) {
            this.page.ensureDeltaManager().applyObjectDelta(this.dataset, newData);
        }
        RecordArticle.prototype.applyChange.call(this, newData);
        if (this.dataset.description && this.dataset.description != this.dataset.title) {
            this.domItem.title = this.dataset.description;
        }
    },
    onItemEnterLeave: function(event){
        if (this.itemsField && this.itemsField.menusSlot) {
            this.page.ensureDesignedItemVisibility(this.itemsField, event);
        }
        this.page.ensureDesignedItemVisibility(this, event);
        this.page.showOnEnter(this.expandLink.mn, event);
        this.page.showOnEnter(this.collapseLink.mn, event);
        RecordArticle.prototype.onItemEnterLeave.call(this, event);
    },
    onSelectMouseEvent: function(event){
        document.site.toggleClass(this.header, "s-record-over", event.type == "mouseenter");
    },
    highlightSelection: function(selected){
        document.site.toggleClass(this.header, "s-list-record-selected", selected);
        this.domItem.style.display = selected ? "" : "none";
    },
    drawBox: function(){
        this.$isVerticalDirection = true;
        this.dataRow = this.domItem = document.createElement("div");
        this.$skin = "s-nav-submodule";
        this.domItem.className = this.$skin;
        this.domItem.setAttribute("data-s-record", this.$uuid);
        this.$$item = $(this.domItem);
        
        this.header = document.createElement("header");
        
        this.domTitle = document.createElement("div");
        if (this.page.isAdminMode()) {
            this.domItem.className += "-admin";
            this.header.className = this.$skin + "-head-admin";
            this.header.setAttribute("data-s-record", this.$uuid);
            this.header.appendChild(this.domTitle).className = this.$skin + "-title-admin";
            this.list.articleParent.subModulesAdminTitleList.appendChild(this.header);
            this.header.setAttribute("data-s-article", this.id);
            this.header.setAttribute("data-s-inout", this.id);
            this.domItem.style.display = "none";
            
            this.domTitle.setAttribute("data-s-picker", "list-selector");
            this.domTitle.className += " s-list-selector-row";
            this.domTitle.setAttribute("data-s-record", this.$uuid);
            
        }
        else {
            this.header.className = this.$skin + "-head";
            this.header.appendChild(this.domTitle).className = this.$skin + "-title";
            this.domItem.appendChild(this.header);
        }
        this.domItem.setAttribute("data-s-inout", this.id);
        this.dataSlot = this.body = document.createElement("div");
        this.body.className = this.$skin + "-body";
        
        this.menusBar = document.createElement("div");
        this.menusBar.className = this.$skin + "-bar";
        this.expandLink = this.page.loadNewItem(this.menusBar, {
            $category: "link",
            $skin: "s-list-menus-link",
            $bind: "$expandAll"
        }, this);
        this.collapseLink = this.page.loadNewItem(this.menusBar, {
            $category: "link",
            $skin: "s-list-menus-link",
            $bind: "$collapseAll"
        }, this);
        this.page.showOnEnter(this.expandLink.mn);
        this.page.showOnEnter(this.collapseLink.mn);
        this.menusSlot = document.createElement("div");
        this.menusSlot.className = this.$skin + "-links tut";
        this.menusBar.appendChild(this.menusSlot);
        this.body.appendChild(this.menusBar);
        
        this.itemsFieldSlot = document.createElement("div");
        this.itemsFieldSlot.className = "s-nav-submodules-slot";
        this.body.appendChild(this.itemsFieldSlot);
        this.itemsField = this.page.loadNewItem(this.itemsFieldSlot, {
            $isTitleHidden: true,
            $bind: "items"
        }, this);
        this.domItem.appendChild(this.body);
        this.list.applyRecordCapabilities(this);
        this.applyReorderCapability(true);
        
        this.cardItem = this.page.loadNewItem(this.domTitle, {
            $bind: "title",
            $category: "field",
            $isDetailLinkDisabled: true,
            $isMenusHidden: true,
            $isEditMode: this.$isEditMode,
            $inplace: true
        }, this);
        this.list._core.appendChild(this.domItem);
        this.page.ensureDesignedItemVisibility(this);
        this.applyChange({
            $links: {
                $expandAll: {
                    $title: this.page.localize.navigPageExpandAll
                },
                $collapseAll: {
                    $title: this.page.localize.navigPageCollapseAll
                }
            }
        });
        
    },
    expandMenuBlocks: function(expand, itemsField){
        if (!itemsField) {
            itemsField = this.itemsField;
        }
        for (var ii = 0, jj = itemsField.records.length; ii < jj; ii++) {
            var record = itemsField.records[ii];
            if (record.singleField.variantItem.isMenuBlock) {
                record.singleField.variantItem.record.expandMenuBlock(expand);
                this.expandMenuBlocks(expand, record.singleField.variantItem.record.itemsField);
            }
        }
    },
    onMenuClick: function(menuItem){
        switch (menuItem.$bind) {
            case "$expandAll":
                this.expandMenuBlocks(true);
                return false;
            case "$collapseAll":
                this.expandMenuBlocks(false);
                return false;
        }
        return true;
    },
    _createMenusBox: function(){
        if (!this._isMenuLoaded) {
            this._isMenuLoaded = true;
            if (this.page.isAdminMode()) {
                this.page.ensureDesignedItemVisibility(this);
                this.itemsField.menusSlot.className = "s-nav-items-menus-slot";
                this.menusSlot.appendChild(this.itemsField.menusSlot);
                this.page.loadNewItem(this.menusSlot, {
                    $noText: true,
                    $category: "link",
                    $skin: "s-list-menus-link",
                    $bind: "$delete",
                    $icon: {
                        $mode: "icon",
                        $path: "list/s-list-"
                    }
                }, this);
            }
        }
    },
    dispose: function(){
        this.collapseLink = this.expandLink = null;
        this.cardItem = this.domItem = this.dataSlot = this.body = this.menusSlot = this.dataRow = null;
        this.itemsFieldSlot = this.itemsField = this.header = this.domTitle = this.body = null;
        RecordArticle.prototype.dispose.call(this);
    }
});
