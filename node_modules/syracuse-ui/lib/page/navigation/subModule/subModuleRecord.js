"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function SubModuleRecord() {}

exports.SubModuleRecord = helpers.defineClass(SubModuleRecord, RecordArticle, {
	loadBox: function(options) {
		this.isSubModuleRecord = true;
		this.$defaultSkinSection = this.$defaultSkinBlock = this.list.$item.$skinCard || "s-h3";
		RecordArticle.prototype.loadBox.call(this);
	},
	reorderItem: function(targetRecord, isAfter) {
		if (targetRecord) {
			targetRecord.domItem.parentNode.insertBefore(this.domItem, isAfter ? targetRecord.domItem.nextSibling : targetRecord.domItem);
		} else {
			if (isAfter) {
				this.list.body.appendChild(this.domItem);
			} else {
				this.list.body.insertBefore(this.domItem, this.list.body.firstChild);
			}
		}
	},
	remove: function() {
		if (this.$$item) {
			this.$$item.remove();
		}
	},
	applyReorderCapability: function(reorder) {
		if (this.hasReorderCapability = reorder) {
			if (!this.reorderPicker) {
				this.reorderPicker = document.createElement("div");
				this.reorderPicker.className = this.$skin + "-card-reorder";
				this.reorderPicker.syraReorderRecordId = this.list.id;
				document.site.ddManager.setDragSpot(this.reorderPicker, true);
				this.domItem.insertBefore(this.reorderPicker, this.domItem.firstChild);
			}
		} else {
			if (this.reorderPicker) {
				document.site.removeDomChild(this.reorderPicker);
				delete this.reorderPicker;
			}
		}
	},
	applyChange: function(newData, serverResponse) {
		if (serverResponse) {
			this.page.ensureDeltaManager().applyObjectDelta(this.dataset, newData);
		}
		RecordArticle.prototype.applyChange.call(this, newData);
		if (this.dataset.description && this.dataset.description != this.dataset.title) {
			this.domItem.title = this.dataset.description;
		}
	},
	onItemEnterLeave: function(event) {
		if (this.itemsField && this.itemsField.menusSlot) {
			this.page.ensureDesignedItemVisibility(this.itemsField, event);
		}
		this.page.ensureDesignedItemVisibility(this, event);
		RecordArticle.prototype.onItemEnterLeave.call(this, event);
	},
	drawBox: function() {
		this.$isVerticalDirection = true;
		this.dataRow = this.domItem = document.createElement("div");
		this.$skin = "s-nav-submodule";
		this.domItem.className = this.$skin;
		this.domItem.setAttribute("data-s-record", this.$uuid);
		this.domItem.setAttribute("data-s-inout", this.id);
		this.$$item = $(this.domItem);

		this.header = document.createElement("header");
		this.header.className = this.$skin + "-head";

		this.domTitle = document.createElement("div");
		this.header.appendChild(this.domTitle).className = this.$skin + "-title";

		this.domItem.appendChild(this.header);

		this.dataSlot = this.body = document.createElement("div");
		this.body.className = this.$skin + "-body";

		this.menusSlot = document.createElement("div");
		this.menusSlot.className = this.$skin + "-links";
		this.body.appendChild(this.menusSlot);

		this.itemsFieldSlot = document.createElement("div");
		this.itemsFieldSlot.className = "s-nav-submodules-slot";
		this.body.appendChild(this.itemsFieldSlot);
		this.itemsField = this.page.loadNewItem(this.itemsFieldSlot, {
			$isTitleHidden: true,
			$bind: "items"
		}, this);

		this.itemsField.menusSlot.className = "s-nav-items-menus-slot";
		this.menusSlot.appendChild(this.itemsField.menusSlot);

		this.domItem.appendChild(this.body);
		this.list.applyRecordCapabilities(this);
		this.applyReorderCapability(true);

		this.cardItem = this.page.loadNewItem(this.domTitle, {
			$bind: "title",
			$category: "field",
			$isDetailLinkDisabled: true,
			$isMenusHidden: true,
			$isEditMode: this.$isEditMode,
			$inplace: true
		}, this);
		this.list._core.appendChild(this.domItem);
		this.page.ensureDesignedItemVisibility(this);
	},
	_createMenusBox: function() {
		if (!this._isMenuLoaded) {
			this._isMenuLoaded = true;
			/*this.page.loadNewItem(this.menusSlot, {
             $noText: true,
             $category: "link",
             $skin: "s-list-menus-link",
             $bind: "$edit",
             $icon: {
             $mode: "icon",
             $path: "list/s-list-"
             }
             }, this);*/
			this.page.ensureDesignedItemVisibility(this);
			this.page.loadNewItem(this.menusSlot, {
				$noText: true,
				$category: "link",
				$skin: "s-list-menus-link",
				$bind: "$delete",
				$icon: {
					$mode: "icon",
					$path: "list/s-list-"
				}
			}, this);
		}
	},
	dispose: function() {
		this.cardItem = this.domItem = this.dataSlot = this.body = this.menusSlot = this.dataRow = null;
		this.itemsFieldSlot = this.itemsField = this.header = this.domTitle = this.body = null;
		RecordArticle.prototype.dispose.call(this);
	}
});