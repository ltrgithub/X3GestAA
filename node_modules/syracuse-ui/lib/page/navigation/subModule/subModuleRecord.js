"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;
var NavigationItemReorderDDAgent = require("./navigationItemReorderDDAgent").NavigationItemReorderDDAgent;

function SubModuleRecord() {}

exports.SubModuleRecord = helpers.defineClass(SubModuleRecord, RecordArticle, {
	loadBox: function(options) {
		this.isSubModuleRecord = true;
		this.$defaultSkinSection = this.$defaultSkinBlock = this.list.$item.$skinCard || "s-h3";
		RecordArticle.prototype.loadBox.call(this);
	},
	onLoadNavigationItem: function(navigationItem) {
		navigationItem.RecordReorderDDAgentClass = NavigationItemReorderDDAgent;
	},
	reorderItem: function(targetRecord, isAfter) {
		if (targetRecord) {
			targetRecord.domItem.parentNode.insertBefore(this.domItem, isAfter ? targetRecord.domItem.nextSibling : targetRecord.domItem);
			if (this.page.isAdminMode) {
				targetRecord.header.parentNode.insertBefore(this.header, isAfter ? targetRecord.header.nextSibling : targetRecord.header);
			}
		} else {
			if (isAfter) {
				this.list.body.appendChild(this.domItem);
			} else {
				this.list.body.insertBefore(this.domItem, this.list.body.firstChild);
			}
			if (this.page.isAdminMode) {
				var subModulesAdminTitleList = this.list.articleParent.subModulesAdminTitleList;
				if (isAfter) {
					subModulesAdminTitleList.appendChild(this.header);
				} else {
					subModulesAdminTitleList.insertBefore(this.header, subModulesAdminTitleList.firstChild);
				}
			}
		}
	},
	applyChange: function(newData, serverResponse) {
		if (serverResponse) {
			syra_site.deltaManager.applyObjectDelta(this.page, this.dataset, newData);
		}
		RecordArticle.prototype.applyChange.call(this, newData);
		if (this.dataset.description && this.dataset.description != this.dataset.title) {
			this.domItem.title = this.dataset.description;
		}
	},

	drawBox: function() {
		this.$useDeletePicker = true;
		this.$item.$isPickerMenuHidden = true;
		this.$isVerticalDirection = true;
		this.domItem = document.createElement("div");
		this.$skin = this.page.isAdminMode ? "s-nav-admin-submodule" : "s-nav-submodule";
		this.domItem.className = this.$skin;
		this.domItem.setAttribute("data-s-record", this.domItem.syraRecord = this.$uuid);

		this.header = document.createElement("header");
		this.header.className = this.$skin + "-head";
		this.domTitle = document.createElement("div");
		this.header.appendChild(this.domTitle).className = this.$skin + "-title";

		if (this.page.isAdminMode) {
			this.header.setAttribute("data-s-record", this.header.syraRecord = this.$uuid);
			this.list.articleParent.subModulesAdminTitleList.appendChild(this.header);
			this.setArticleId(this.header);
			this.header.syrainout = this.header.syraItem = this.id;
			this.domItem.style.display = "none";

			this.domTitle.syraOnClick = "onSelectorClick";
			this.domTitle.className += " s-list-selector-row";
		} else {
			this.domItem.appendChild(this.header);
		}
		this.reorderBtnParent = this.domTitle.parentNode;
		this.dataSlot = this.body = document.createElement("div");
		this.body.className = this.$skin + "-body";

		if (this.page.isAdminMode) {
			this.menusSlot = this.header;
		} else {
			this.page.defineExpandAllItems(this.header, this);
		}
		this.itemsFieldSlot = document.createElement("div");
		this.itemsFieldSlot.className = this.page.isAdminMode ? "s-nav-admin-submodules-slot" : "s-nav-submodules-slot";
		this.body.appendChild(this.itemsFieldSlot);
		this.itemsField = this.page.loadNewItem(this.itemsFieldSlot, {
			$isTitleHidden: true,
			$bind: "items"
		}, this);

		this.list.capabilityMaker.applyToRecord(this);
		this.page.isAdminMode && this.list.capabilityMaker.addReorder(this);

		this.cardItem = this.page.loadNewItem(this.domTitle, {
			$bind: "title",
			$category: "field",
			$isDetailLinkDisabled: true,
			$isMenusHidden: true,
			$isEditMode: this.$isEditMode,
			$inplace: true
		}, this);
		this.list._core.appendChild(this.domItem);

		this.domItem.appendChild(this.body);
	},
	expandMenuBlocks: function(expand, itemsField) {
		itemsField = itemsField || this.itemsField;
		for (var ii = 0, jj = itemsField.records.length; ii < jj; ii++) {
			var record = itemsField.records[ii];
			if (record.singleField.variantItem.isMenuBlock) {
				record.singleField.variantItem.record.expandMenuBlock(expand);
				this.expandMenuBlocks(expand, record.singleField.variantItem.record.itemsField);
			}
		}
	},
	onExpandAll: function(event, target) {
		var expand = target == this.btnExpandAll;
		if (event.shiftKey) {
			for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
				this.list.records[ii].expandMenuBlocks(expand);
			}
		} else {
			this.expandMenuBlocks(expand);
		}
		this.page.refreshExpandAllLinks(this);
	},

	dispose: function() {
		if (this.page && this.page.selectedSubModuleRecord == this) {
			delete this.page.selectedSubModuleRecord;
		}
		this.btnExpandAll = this.btnCollapseAll = this.cardItem = this.dataSlot = this.body = this.menusSlot = null;
		this.itemsFieldSlot = this.itemsField = this.header = this.domTitle = this.body = null;
		RecordArticle.prototype.dispose.call(this);
	}
});