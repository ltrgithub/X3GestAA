"use strict";
var helpers = require('syracuse-core/lib/helpers');

function NavigationItemReorderDDAgent() {}

exports.NavigationItemReorderDDAgent = helpers.defineClass(NavigationItemReorderDDAgent, null, {
	start: function(dropItem) {
		document.site.ddManager.ddAgent = this;
		this.reorderRecord = dropItem.reorderRecord;
		this.list = dropItem.list;
		this.boundary = this.list.subModuleRecord.body.getBoundingClientRect();
		this.bindEvent(true);
	},
	bindEvent: function(bind) {
		var self = this;
		var nameSpace = ".recordReorder" + self.list.id;
		if (bind) {
			self.list.subModuleRecord.$$item.delegate("[data-s-record]", "mousemove" + nameSpace, function(event) {
				if (self.reorderRecord) {
					var record = document.controller.findArticle($(this));
					self.moveDragImage(event, record);
				}
				return false;
			});
		} else {
			self.list.subModuleRecord.$$item.undelegate(nameSpace);
		}
	},
	onDragMouseMove: function(target, event) {
		if (!event.target || event.target && event.target.className.indexOf("s-list-drop-cue") < 0) {
			this.moveDragImage(event, null, true);
		}
	},
	onDragMouseUp: function(target, event) {
		if (this.targetRecord) {
			var isAfter = this.$drag.$insert == "insertAfter";
			var source_list = this.reorderRecord.list;
			var source_dataRecords = source_list.ensureDataSet();
			var source_dataRecord = source_dataRecords[this.reorderRecord.dataset.$serverIndex];
			var $prevReorderedIndex = this.reorderRecord.dataset.$serverIndex;
			source_dataRecords.splice(this.reorderRecord.dataset.$serverIndex, 1);
			source_list.records.splice(this.reorderRecord.$recordIndex, 1);

			var target_list = this.targetRecord.list;

			if (this.targetRecord.$recordIndex > this.reorderRecord.$recordIndex) {
				this.reorderRecord.$recordIndex = isAfter ? this.targetRecord.$recordIndex : (this.targetRecord.$recordIndex - 2);
			} else {
				this.reorderRecord.$recordIndex = isAfter ? this.targetRecord.$recordIndex + 1 : (this.targetRecord.$recordIndex);
			}
			if (this.targetRecord.dataset.$serverIndex > this.reorderRecord.dataset.$serverIndex) {
				this.reorderRecord.dataset.$serverIndex = isAfter ? this.targetRecord.dataset.$serverIndex : (this.targetRecord.dataset.$serverIndex - 2);
			} else {
				this.reorderRecord.dataset.$serverIndex = isAfter ? this.targetRecord.dataset.$serverIndex + 1 : (this.targetRecord.dataset.$serverIndex);
			}
			this.reorderRecord.$recordIndex = Math.max(this.reorderRecord.$recordIndex, 0);
			this.reorderRecord.dataset.$serverIndex = Math.max(this.reorderRecord.dataset.$serverIndex, 0);
			var target_dataRecords = target_list.ensureDataSet();
			target_dataRecords.splice(this.reorderRecord.dataset.$serverIndex, 0, source_dataRecord);
			target_list.records.splice(this.reorderRecord.$recordIndex, 0, this.reorderRecord);
			this.reorderRecord.reorderItem(this.targetRecord, isAfter);
			for (var ii = 0, jj = target_list.records.length; ii < jj; ii++) {
				target_list.records[ii].$recordIndex = ii;
			}
			target_list.validateDisplay();
			var target_sendBag = target_list.page.ensureSendBag(target_list);
			for (var ii = 0, jj = target_dataRecords.length; ii < jj; ii++) {
				target_dataRecords[ii].$serverIndex = ii;
			}
			target_sendBag.dataRecords = target_dataRecords;

			if (target_list != source_list) {
				for (var ii = 0, jj = source_list.records.length; ii < jj; ii++) {
					source_list.records[ii].$recordIndex = ii;
				}
				source_list.validateDisplay();

				var source_sendBag = source_list.page.ensureSendBag(source_list);
				for (var ii = 0, jj = source_dataRecords.length; ii < jj; ii++) {
					source_dataRecords[ii].$serverIndex = ii;
				}
				source_sendBag.dataRecords = source_dataRecords;
				source_list.page.notifyDataChange(source_list, source_sendBag.dataRecords, false);
			}
			target_list.page.notifyDataChange(target_list, target_sendBag.dataRecords);
		}
		document.site.removeDomChild(this._info);
		document.site.removeDomChild(this._dropCue);
	},
	moveDragImage: function(event, targetRecord, isOut) {
		this.$action = null;
		if (targetRecord) {
			if (this.reorderRecord && this.reorderRecord != targetRecord) {
				this.$action = {
					$move: true
				};
				this._ensureDragImage();
				this._info.textContent = this.list.localize.flMoveItem;
			}
		}
		var top = Math.max(event.pageY, this.boundary.top);
		var left = Math.max(event.pageX, this.boundary.left);
		top = Math.min(top, this.boundary.bottom);
		left = Math.min(left, this.boundary.right);

		var inBoundary = (event.pageX == left && event.pageY == top);
		this._ensureDragImage();
		if (!isOut && this.$action) {
			document.site.toggleClass(this._info, "s-drag-ok", true);
			this.targetRecord = targetRecord;
		} else {
			if (isOut) {
				this._info.textContent = this.list.localize.flMoveItem.replace("{0}", "move record");
			}
			document.site.toggleClass(this._info, "s-drag-ok", false);
			this.targetRecord = null;
		}
		this.moveDragCue(event);
		this._info.style.display = "";
		this._info.style.top = top + 15 + "px";
		this._info.style.left = left + 15 + "px";
	},
	moveDragCue: function(event) {
		var $position = null;
		if (event && this.targetRecord) {
			$position = this._calculateDropCuePosition(event);
		}
		if (!this._dropCue) {
			this._dropCue = document.createElement("div");
			this._dropCue.className = "s-list-drop-cue";
			document.site.layoutSlot.appendChild(this._dropCue);
		}
		this._dropCue.className = "s-list-drop-cue";
		if ($position) {
			this._dropCue.style.display = "block";
			var style = this._dropCue.style;
			style.top = $position.top + "px";
			style.left = $position.left + "px";
			style.width = $position.width;
			style.height = $position.height;
			style.display = "block";
		} else {
			this._dropCue.style.display = "none";
		}
	},
	_calculateDropCuePosition: function(event) {
		var offset = (this.targetRecord.dataRow || this.targetRecord.domItem).getBoundingClientRect();
		this.$drag = {
			top: offset.top,
			left: offset.left,
			height: offset.height,
			width: offset.width
		};
		if (this.targetRecord.list.scroller) {
			this.$drag.width = this.targetRecord.list.scroller.getVisibleSize().width;
		}
		//calculateDropBoundary
		var xmargin = (this.$drag.width * 0.25);
		var ymargin = (this.$drag.height * 0.25);
		var $dropBoundary = {
			left: this.$drag.left + xmargin,
			right: this.$drag.left + this.$drag.width - xmargin,
			top: this.$drag.top + ymargin,
			bottom: this.$drag.top + this.$drag.height - ymargin
		};
		var $position = {
			top: this.$drag.top,
			left: this.$drag.left
		};
		var isAfter = false;
		if (this.reorderRecord.$isVerticalDirection) {
			var bottom = $dropBoundary.bottom;
			if (isAfter = event.pageY > $dropBoundary.bottom) {
				$position.top = $dropBoundary.bottom + ymargin;
			} else {
				$position.top = this.$drag.top;
			}
			$position.height = "0.2em";
			$position.width = this.$drag.width + "px";
		} else {
			isAfter = event.pageX > $dropBoundary.right;
			$position.top -= 3;
			$position.left = this.$drag.left + (isAfter ? (this.$drag.width + 3) : (-3));
			$position.width = "0.2em";
			$position.height = this.$drag.height + 6 + "px";
		}
		this.$drag.$insert = isAfter ? "insertAfter" : "insertBefore";
		return $position;
	},
	_ensureDragImage: function() {
		if (!this._info) {
			this._info = document.createElement("div");
			this._info.style.display = "none";
			this._info.className = "s-list-drag-image";
			document.site.layoutSlot.appendChild(this._info);
			this._info.textContent = "move record";
		}
	},
	dispose: function() {
		if (this.list) {
			this.bindEvent(false);
			this.list = this.reorderRecord = this.boundary = this._info = this._dropCue = this.$drag = null;
		}
	}
});