"use strict";
var helpers = require('syracuse-core').helpers;
var ItemReorderDDAgent = require("./itemReorderDDAgent").ItemReorderDDAgent;

function _onAppendRecord(list, record) {
	if (list.columnsCount > 1) {
		if (!list.cols) {
			list.cols = [];
			list.currentCol = 0;
			for (var ii = 0; ii < list.columnsCount; ii++) {
				var slot = document.createElement("div");
				slot.className = list.$skin + "-col";
				list.body.appendChild(slot);
				list.cols.push({
					slot: slot,
					items: []
				});
			}
		}
		list.cols[list.currentCol++].slot.appendChild(record.domItem);
		if (list.currentCol == list.columnsCount) {
			list.currentCol = 0;
		}
	} else {
		list.body.appendChild(record.domItem);
	}
}

function NavigationItemBuilder() {}

exports.NavigationItemBuilder = helpers.defineClass(NavigationItemBuilder, null, {
	initialize: function(list) {
		this.list = list;
		if (list.isBookMarkList) {
			this.emptyMessage = syra_local.bookmarksNoMenuItem;
			list.onAddMenuItem = function($bind, $menu) {
				return null;
			};
		} else {
			this.emptyMessage = syra_local.nvpNoMenuItem;
			list.RecordReorderDDAgentClass = ItemReorderDDAgent;
		}
		list.emptyBody = function() {
			this.cols = null;
			this.filler.emptyBody(this);
			/*if (this.builder.emptyDataItem) {
             this.builder.emptyDataItem.isDroppable = false;
             this.builder.emptyDataItem.defautTextContent = this.builder.emptyDataItem.textContent;
             this.builder.emptyDataItem.syraIsEmptyItem = this.id;
             }*/
		};
	},
	endInitiallize: function() {},
	isDraggable: function(target, event) {
		return this.list.isReorderRecordDraggable(target, event);
	},
	list_onAfterDraw: function() {
		var createMn, i, len;
		if (!this.list.isBookMarkList) {
			if (this.list.articleParent.isSubModuleRecord) {
				this.list.topbar.className = "s-nav-admin-submodule-items-menus";
				this.list.articleParent.body.insertBefore(this.list.topbar, this.list.articleParent.body.firstChild);
			} else {
				this.list.menusSlot = document.createElement("div");
				this.list.menusSlot.className = "s-admin-items-item-btns";
			}
		}
		this.list.endDraw();
		createMn = this.list.menuItems && this.list.menuItems.$create;
		if (createMn) {
			// Adjustement to work properly with US 106211-1 specification
			for (i = 0, len = createMn.length; i < len; i++) {
				createMn[i].setMenu({
					"$title": syra_local.nvpMenusCreateBlock
				});
			}
		}
	},
	onAfterAddRecord: function(record) {
		var item = record.singleField.variantItem;
		if (this.list.isBookMarkList) {
			record.domItem.appendChild(record.reorderBtn);
			record.menusSlot && record.domItem.appendChild(record.menusSlot);
			record.domItem.appendChild(record.recordValue);
		} else {
			if (record.page.isAdminMode) {
				if (item.isMenuBlock) {
					var titleField = item.record.titleField;
					titleField.domItem.appendChild(record.reorderBtn);
					titleField.domItem.appendChild(item.record.expandBtn.link);
					titleField.domItem.appendChild(titleField._core);
					titleField.domItem.appendChild(item.record.itemsField.menusSlot);
					titleField.domItem.appendChild(titleField.picker_$localize.link);
					record.menusSlot && titleField.domItem.appendChild(record.menusSlot);
					record.domItem.appendChild(record.recordValue);
				} else {
					record.domItem.appendChild(record.reorderBtn);
					record.domItem.appendChild(record.recordValue);
					record.menusSlot && record.domItem.appendChild(record.menusSlot);
				}
			} else {
				record.domItem.appendChild(record.recordValue);
			}
			if (!item.isMenuBlock) {
				item.bookmarkBtn && record.domItem.appendChild(item.bookmarkBtn.link);
			}

		}
	},
	list_onAfterSetDataValue: function(dataRecordSet, parentDataRecord, metaData) {
		if (!this.list.page.isAdminMode && this.list.articleParent.isSubModuleRecord) {
			this.list.page.refreshExpandAllLinks(this.list.articleParent);
		}
	},
	list_onItemInOut: function(onEnter, event, target) {
		/*if (event && (event.currentTarget == this.emptyDataItem)) {
         var isDroppable = !!(onEnter && syra_dd.ddAgent && syra_dd.ddAgent.isNavigationItemReorderDDAgent);
         if (this.emptyDataItem.isDroppable != isDroppable) {
         this.emptyDataItem.isDroppable = isDroppable;
         if (isDroppable) {
         this.emptyDataItem.textContent = syra_local.nvpDropOnEmpty;
         this.emptyDataItem.className = "s-nav-admin-items-empty-drop";
         }
         else {
         this.emptyDataItem.className = "s-nav-admin-items-empty-slot";
         this.emptyDataItem.textContent = this.emptyDataItem.defautTextContent;
         }
         }
         }*/
	},
	record_onItemInOut: function(record, onEnter) {
		if (record.buttons) {
			for (var ii = 0, jj = record.buttons.length; ii < jj; ii++) {
				var btn = record.buttons[ii];
				btn.pickerId && syra_button.visibility(btn, onEnter);
			}
		}
		if (record.singleField.$variantItemKey == "menuItem") {
			var menuItem = record.singleField.variantItem;
			if (menuItem.bookmarkBtn && !menuItem.isBookmark) {
				menuItem.bookmarkBtn.link.style.visibility = onEnter ? "visible" : "";
			}
		} else {
			var block = record.singleField && record.singleField.variantItem;
			if (block) {
				syra_dom.toggleClass(record.reorderBtn, "s-enter", onEnter);
			}
		}
	},
	record_reorder: function(record, target, isAfter) {
		target.domItem.parentNode.insertBefore(record.domItem, isAfter ? target.domItem.nextSibling : target.domItem);
		record.singleField.variantItem.onReorderItem(record);
	},
	record_onMenuClick: function(record, options) {
		if (!record.disposed) {
			switch (options.menu.$sourceBind) {
				case "remove_separator":
				case "add_separator":
					record.dataset.$singleField.menuItem.$hasSeparator = options.menu.$sourceBind == "add_separator";
					record.page.updateWorkingCopy();
					return false;
				case "$delete":
					if (record.singleField.$variantItemKey == "menuItem") {
						options.menu.$confirm = syra_local.nvpConfirmDeleteMenu;
					} else {
						if (this.list.isBookMarkList) {
							options.menu.$confirm = syra_expression.parse(options.menu.articleParent.dataset.$singleField.menuItem, syra_local.nvpConfirmDeleteBookmark, options.menu.articleParent.dataset.$singleField.menuItem);
						} else {
							options.menu.$confirm = syra_local.nvpConfirmDeleteBlock;
						}
					}
					break;
				case "$edit":
				case "$canceledit":
					record.page.switchBookmarkEditTitle(record, options.menu.$sourceBind == "$edit");
					return false;
			}
			return true;
		}
	},
	clickBookmark: function(record) {
		var bookmarkBtn = record.singleField && record.singleField.variantItem && record.singleField.variantItem.bookmarkBtn;
		bookmarkBtn && bookmarkBtn.link.click();
	},
	record_draw: function(record) {
		record.onAddMenuPicker = function(btn) {
			record.domItem.appendChild(btn.link);
		};
		if (this.list.isBookMarkList) {
			record.onFormUpdateDelta = function(field, value) {
				if (field == record.editTitleField) {
					var menuItem = record.dataset.$singleField.menuItem;
					menuItem.title = menuItem.$title = value;
					record.applyChange(record.dataset);
					return true;
				}
				return false;
			};
		}
		record.$useDeletePicker = true;
		record.isSingleRecord = true;
		record.reorderBtnParent = null; //!!important picker is inserted bu codemenu 
		record.$isVerticalDirection = true;
		record.domItem = document.createElement("div");
		record.domItem.className = record.$skin = this.list.$skin + "-item";
		record.domItem.syraRecord = record.domItem.syraItem = record.domItem.syrainout = record.domItem.syrafocusinout = record.id;
		if (!this.list.$item.$isMenusHidden) {
			record.menusSlot = document.createElement("div");
			record.menusSlot.className = "s-admin-items-item-btns";
		}
		record.recordValue = document.createElement("div");
		record.recordValue.className = this.list.$skin + "-item-value";


		if (this.list.$capability.reorder && (this.list.isBookMarkList || record.page.isAdminMode)) {
			this.list.addReorder(record);
		}

		record.singleField = record.page.addItem(record.recordValue, {
			$isTitleRowHidden: true,
			$isDetailLinkDisabled: true,
			$bind: "$singleField",
			$isEditMode: record.$isEditMode,
			$inplace: true,
			$isDiagnoseInline: true
		}, record);
		_onAppendRecord(this.list, record);
		this.list.applyCapabilitiesToRecord(record);
		if (this.list.isBookMarkList) {
			record.applyChange({
				$actions: {
					$edit: {
						$title: syra_local.bookmarksEdit
					},
					"remove_separator": {
						$title: syra_local.bookmarksRemoveSeparator,
						$isHidden: !record.dataset.$singleField.menuItem.$hasSeparator
					},
					"add_separator": {
						$title: syra_local.bookmarksAddSeparator,
						$isHidden: record.dataset.$singleField.menuItem.$hasSeparator
					}
				}
			});
		}
		record.onItemInOut(false);
	},

	dispose: function() {
		if (this.list) {
			this.list = this.list.subModuleRecord = this.list.cols = null;
		}
	}

});