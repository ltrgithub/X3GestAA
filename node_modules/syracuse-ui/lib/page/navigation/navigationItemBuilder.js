"use strict";
var helpers = require('syracuse-core/lib/helpers');
var NavigationItemReorderDDAgent = require("./navigationItem/navigationItemReorderDDAgent").NavigationItemReorderDDAgent;

function _switchBookmarkEditTitle(record, isEdit) {
	var cell = record.singleField.variantItem.domItem;
	if (isEdit) {
		cell.style.display = "none";
		var slot = document.createElement("div");
		slot.className = cell.className;
		cell.parentNode.insertBefore(slot, cell);
		record.editTitleField = record.page.loadNewItem(slot, {
			$category: "field",
			$isTitleHidden: true,
			$isTopLabelAlignment: false,
			//$contentEditable: true,
			$isEditMode: true,
			$inplace: true,
			$css: "s-nav-admin-menu-edit",
			$field: {
				$isMandatory: true,
				$type: "application/x-string",
				$displayLength: 25
			}
		}, record);
		record.editTitleField.focus();
		record.editTitleField.setDataValue(record.singleField.variantItem.getDatasetValue().title);
	} else {
		cell.style.display = "";
		if (record.editTitleField) {
			record.removeItem(record.editTitleField, true, true);
			record.editTitleField = null;
		}
	}
	record.applyChange({
		$actions: {
			$edit: {
				$isHidden: isEdit
			},
			"$canceledit": {
				$title: syra_local.bookmarksCloseEdit,
				$isHidden: !isEdit
			}
		}
	});
	if (isEdit) {
		var $edit = record.menuItems.$edit;
		if (record.menuItems.$canceledit) {
			record.menuItems.$edit[0].domItem.parentNode.insertBefore(record.menuItems.$canceledit[0].domItem, record.menuItems.$edit[0].domItem);
		}
	}
}


function _onAppendRecord(list, record) {
	if (list.columnsCount > 1) {
		if (!list.cols) {
			list.cols = [];
			list.currentCol = 0;
			for (var ii = 0; ii < list.columnsCount; ii++) {
				var slot = document.createElement("div");
				slot.className = list.$skin + "-col";
				list.body.appendChild(slot);
				list.cols.push({
					slot: slot,
					items: []
				});
			}
		}
		list.cols[list.currentCol++].slot.appendChild(record.domItem);
		if (list.currentCol == list.columnsCount) {
			list.currentCol = 0;
		}
	} else {
		list.body.appendChild(record.domItem);
	}
}

function _highlightBookmark(record, onEnter) {
	var menuItem = record.singleField.variantItem;
	if (menuItem.bookmarkBtn && !menuItem.isBookmark) {
		menuItem.bookmarkBtn.link.style.visibility = onEnter ? "visible" : "";
	}
}

function NavigationItemBuilder() {}

exports.NavigationItemBuilder = helpers.defineClass(NavigationItemBuilder, null, {
	initialize: function(list) {
		this.list = list;
		if (list.isBookMarkList) {
			this.emptyMessage = syra_local.bookmarksNoMenuItem;
			list.onAddMenuItem = function($bind, $menu) {
				return null;
			};
		} else {
			this.emptyMessage = syra_local.nvpNoMenuItem;
			list.RecordReorderDDAgentClass = NavigationItemReorderDDAgent;
		}
	},
	endInitiallize: function() {},
	isDraggable: function(target, event) {
		return this.list.isReorderRecordDraggable(target, event);
	},
	list_onAfterDraw: function() {
		var createMn, i, len;
		if (!this.list.isBookMarkList) {
			if (this.list.articleParent.isSubModuleRecord) {
				this.list.topbar.className = "s-nav-admin-submodule-items-menus";
				this.list.articleParent.body.insertBefore(this.list.topbar, this.list.articleParent.body.firstChild);
			} else {
				this.list.menusSlot = this.list.articleParent.titleField.domItem;
			}
		}
		this.list.endDrawBox();
		createMn = this.list.menuItems && this.list.menuItems.$create;
		if (createMn) {
			// Adjustement to work properly with US 106211-1 specification
			for (i = 0, len = createMn.length; i < len; i++) {
				createMn[i].setMenu({
					"$title": syra_local.nvpMenusCreateBlock
				});
			}
		}
	},
	list_emptyBody: function(addEmptySlot, onFetch) {
		this.list.cols = null;
		this.list.filler.emptyBody(this.list, addEmptySlot, onFetch);
		if (this.emptyDataItem) {
			this.emptyDataItem.isDroppable = false;
			this.emptyDataItem.defautTextContent = this.emptyDataItem.textContent;
			this.emptyDataItem.syraIsEmptyItem = this.list.id;
		}
	},
	list_onAfterSetDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		if (!this.list.page.isAdminMode && this.list.articleParent.isSubModuleRecord) {
			this.list.page.refreshExpandAllLinks(this.list.articleParent);
		}
	},
	list_onItemInOut: function(onEnter, event, target) {
		if (event && (event.currentTarget == this.emptyDataItem)) {
			var isDroppable = !! (onEnter && syra_dd.ddAgent && syra_dd.ddAgent.isNavigationItemReorderDDAgent);
			if (this.emptyDataItem.isDroppable != isDroppable) {
				this.emptyDataItem.isDroppable = isDroppable;
				if (isDroppable) {
					this.emptyDataItem.textContent = syra_local.nvpDropOnEmpty;
					this.emptyDataItem.className = "s-nav-admin-items-empty-drop";
				} else {
					this.emptyDataItem.className = "s-nav-admin-items-empty-slot";
					this.emptyDataItem.textContent = this.emptyDataItem.defautTextContent;
				}
			}
		}
	},
	record_onItemInOut: function(record, onEnter, event) {
		if (record.buttons) {
			for (var ii = 0, jj = record.buttons.length; ii < jj; ii++) {
				var btn = record.buttons[ii];
				btn.pickerId && syra_menus.button.visibility(btn, onEnter);
			}
		}
		if (record.singleField.$variantItemKey == "menuItem") {
			_highlightBookmark(record, onEnter);
		} else {
			var block = record.singleField && record.singleField.variantItem;
			if (block) {
				this.hideMenuBlockMenus(block.record, !onEnter);
				syra_site.dom.toggleClass(record.reorderBtn, "s-enter", onEnter);
			}
		}
	},
	record_reorder: function(record, target, isAfter) {
		target.domItem.parentNode.insertBefore(record.domItem, isAfter ? target.domItem.nextSibling : target.domItem);
		record.singleField.variantItem.onReorderItem(record);
	},
	record_onMenuClick: function(record, menuItem) {
		if (!record.disposed) {
			switch (menuItem.$sourceBind) {
				case "remove_separator":
				case "add_separator":
					record.dataset.$singleField.menuItem.$hasSeparator = menuItem.$sourceBind == "add_separator";
					record.page.notifyDataChange();
					return false;
				case "$delete":
					if (record.singleField.$variantItemKey == "menuItem") {
						menuItem.$confirm = syra_local.nvpConfirmDeleteMenu;
					} else {
						if (this.list.isBookMarkList) {
							menuItem.$confirm = syra_site.expressionMaker.parse(menuItem.articleParent.dataset.$singleField.menuItem, syra_local.nvpConfirmDeleteBookmark, menuItem.articleParent.dataset.$singleField.menuItem);
						} else {
							menuItem.$confirm = syra_local.nvpConfirmDeleteBlock;
						}
					}
					break;
				case "$canceledit":
					_switchBookmarkEditTitle(record, false);
					return false;
				case "$edit":
					_switchBookmarkEditTitle(record, true);
					return false;
			}
			return true;
		}
	},
	clickBookmark: function(record) {
		var bookmarkBtn = record.singleField && record.singleField.variantItem && record.singleField.variantItem.bookmarkBtn;
		bookmarkBtn && bookmarkBtn.link.click();
	},
	record_draw: function(record) {
		record.onFocusInOut = function(onEnter) {
			record.singleField && _highlightBookmark(record, onEnter);
		};
		record.onAddMenuPicker = function(btn) {
			record.domItem.appendChild(btn.link);
		};
		if (this.list.isBookMarkList) {
			record.onNotifyDataChange = function(field, value) {
				if (field == record.editTitleField) {
					var menuItem = record.dataset.$singleField.menuItem;
					menuItem.title = menuItem.$title = value;
					record.applyChange(record.dataset);
					return true;
				}
				return false;
			};
		}
		record.$useDeletePicker = true;
		record.isSingleRecord = true;
		record.reorderBtnParent = null; //!!important picker is inserted bu codemenu 
		record.$isVerticalDirection = true;
		record.domItem = document.createElement("div");
		record.domItem.className = record.$skin = this.list.$skin + "-item";
		record.domItem.syrainout = record.domItem.syrafocusinout = record.id;
		record.domItem.syraRecord = record.$uuid;
		if (!this.list.$item.$isMenusHidden) {
			record.menusSlot = record.domItem;
		}
		record.recordValue = document.createElement("div");
		record.recordValue.className = this.list.$skin + "-item-value";
		record.domItem.appendChild(record.recordValue);

		if (this.list.$capability.reorder && (this.list.isBookMarkList || record.page.isAdminMode)) {
			this.list.addReorder(record);
		}

		record.singleField = record.page.loadNewItem(record.recordValue, {
			$isTitleRowHidden: true,
			$isDetailLinkDisabled: true,
			$bind: "$singleField",
			$isEditMode: record.$isEditMode,
			$inplace: true,
			$isDiagnoseInline: true
		}, record);
		_onAppendRecord(this.list, record);
		this.list.applyCapabilitiesToRecord(record);
		if (this.list.isBookMarkList) {
			record.applyChange({
				$actions: {
					$edit: {
						$title: syra_local.bookmarksEdit
					},
					"remove_separator": {
						$title: syra_local.bookmarksRemoveSeparator,
						$isHidden: !record.dataset.$singleField.menuItem.$hasSeparator
					},
					"add_separator": {
						$title: syra_local.bookmarksAddSeparator,
						$isHidden: record.dataset.$singleField.menuItem.$hasSeparator
					}
				}
			});
		}
		record.onItemInOut(false);
	},
	record_onAfterApplyChange: function(record, metaData) {
		if (record.menusSlot && !record.menusSlot.parentNode) {
			var slot = record.singleField._dataValue || (record.singleField.variantItem && record.singleField.variantItem._dataValue);
			slot && slot.appendChild(record.menusSlot);
		}
	},
	hideMenuBlockMenus: function(blockRecord, hide) {
		var menuItems = blockRecord.itemsField && blockRecord.itemsField.menuItems;
		var $binds = Object.keys(menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var items = menuItems[$binds[ii]];
			for (var mm = 0, kk = items.length; mm < kk; mm++) {
				items[mm].domItem.style.visibility = hide ? "hidden" : "";
			}
		}
		syra_menus.button.visibility(blockRecord.titleField.picker_$localize, !hide);
	},
	dispose: function() {
		if (this.list) {
			this.list = this.list.subModuleRecord = this.list.cols = null;
		}

	}

});