"use strict";
var _menuBlock = require('./menuBlock');
var _menuItem = require('./menuItem');
var _megaDetailPanel = require('./megaDetailPanel');
var _menuScroller = require('./menuScroller');

var LAST_COL_INDEX = 3;

function SubModule(module, dataset) {
	syra_item.initialize(module.page, this);
	this.dataset = dataset || {};
	this.$prototype = module.$prototype.$properties.submodules.$item;
	this.navParent = this.articleParent = this.boxParent = module;
}

SubModule.prototype.onItemInOut = function(onEnter) {
	if (onEnter) {
		this.activate(true);
		var list = this.submoduleList;
		if (list && !list.adjusted) {
			list.adjusted = true;
			var overflowContent = [];
			var maxX = this.page.popup.clientHeight;
			var firtstCol = list.cols[0].slot;
			while (this.page.popup.scrollHeight > maxX && firtstCol.childNodes.length) {
				var child = firtstCol.lastChild;
				syra_dom.remove(child);
				overflowContent.push(child);
			}
			if (overflowContent.length) {
				//  Start adding the array elements to the new column slot in reverse order.
				var col = list._addColumn();
				this.page.popup.appendChild(col.slot); //popupBody
				for (var ii = overflowContent.length - 1; ii > -1 /*&& newColumn < LAST_COL_INDEX*/ ; ii--) {
					col.slot.appendChild(overflowContent[ii]);
					if (maxX < this.page.popup.scrollHeight) {
						this.page.popup.removeChild(this.page.popup.lastChild); //popupBody
						if (list.cols.length === LAST_COL_INDEX)
							break;
						col = list._addColumn();
						this.page.popup.appendChild(col.slot); //popupBody
						ii++;
					}
				}
			}
		}
	}
};
SubModule.prototype.onActivated = function() {
	if (this.mode == "large") {
		this.page.popup.appendChild(this.body);
		this.menuScroller.revalidate(this.page.popup.clientHeight);
	} else {
		this.megaDetailPanel.activate();
	}
};
SubModule.prototype.activate = function(on) {
	this.page.activateItem(this, on);
};

/*	We always show the left-side vertical menu (#1).
 We show an adjacent 2nd vertical menu (#2) if either:
 1) there are 7 or more entries at the level of menu #2
 2) excluding menu #1, there are 3 or more sublevels,
 Otherwise, don't display menu #2, but rather just an options area.
 */
SubModule.prototype._useLargeMode = function(items, isLastLevel) {
	var blockCount = 0;
	if (items) {
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			if (items[ii].menuBlock) {
				blockCount++;
				if (isLastLevel) {
					return true;
				} else {
					return this._useLargeMode(items[ii].menuBlock.items, true);
				}
			}
		}
	}
	return blockCount > 6;
};
SubModule.prototype.addItems = function(items, parent) {
	parent = parent || this;
	parent.children = [];
	for (var ii = 0, jj = items.length; ii < jj; ii++) {
		var item = items[ii];
		var dataItem = item.menuItem || item.menuBlock;
		if (dataItem) {
			var child = item.menuItem ? _menuItem.add(parent) : _menuBlock.add(parent);
			child.load(dataItem);
			if (parent.megaDetailPanel) {
				parent.megaDetailPanel.firstColumnSlot().appendChild(child.slot);
			} else {
				parent.mode === 'large' ? parent.menuScroller.scrollerSlot.appendChild(child.slot) : parent.body.appendChild(child.slot);
			}
			parent.children.push(child);
		}
	}
};
SubModule.prototype.dispose = function() {
	syra_item.unregister(this);
	syra_site.disposeObject(this);
};
SubModule.prototype.load = function() {
	this.$skin = this.page.$skin + "-submodule";
	this.slot = syra_dom.li(this.$skin);
	this.slot.syrainout = this.id;
	this.title = syra_dom.text(this.$skin + "-title", this.dataset.title, this.slot);

	if (this._useLargeMode(this.dataset.items)) {
		this.mode = "large";

		this.body = syra_dom.ul(this.$skin + "-large");

		this.menuScroller = _menuScroller.addScroller(this.page, this.body);

		this.$skin_menu = this.$skin + "-large-link";
	} else {
		this.mode = "small";
		this.megaDetailPanel = _megaDetailPanel.add(this);
	}
	this.addItems(this.dataset.items);
	this.navParent.menuScroller.scrollerSlot.appendChild(this.slot);
};

exports.add = function(module, dataset) {
	var sub = new SubModule(module, dataset);
	sub.load();
	return sub;
};