"use strict";
var _menuItem = require('./menuItem');

var LAST_COL_INDEX = 3;

function MenuBlock(navParent, dataset) {
	syra_item.initialize(navParent.page, this);
	this.navParent = navParent;
	this.submodule = navParent.submodule || navParent;
	this.record = this.dataset = dataset;

	this.$skin = this.page.$skin + "-block";

	this.page.mode.menuBlock.create(this);

	this.submodule.addItems(dataset.items, this);

	!this.megaDetailPanel && this.slot.appendChild(this.body);
}

MenuBlock.prototype.onItemInOut = function(onEnter) {
	var self = this;
	if (onEnter) {
		self.navParent.onEnter = true;
		if (self.navParent.lastSelected === null) {
			self.navParent.onEnter && self.activate(true);
		} else {
			if (self.navParent.lastSelected === self) {
				if (self.navParent.moduleTimer) {
					clearTimeout(self.navParent.moduleTimer);
					delete self.navParent.moduleTimer;
				}
			} else {
				self.navParent.moduleTimer && clearTimeout(self.navParent.moduleTimer);
				self.navParent.moduleTimer = setTimeout(function() {
					self.navParent.onEnter && self.megaDetailPanel && self.activate(true);
					delete self.navParent.moduleTimer;
				}, 150);
			}
		}
	} else {
		self.navParent.onEnter = false;
	}
};

MenuBlock.prototype.activate = function(on) {
	this.megaDetailPanel && this.submodule.activate(on, this);
};

MenuBlock.prototype.getChildItem = function(uuid) {
	for (var ii = 0, jj = this.children.length; ii <= jj; ii++) {
		var item = this.children[ii];
		if (item.dataset.$uuid === uuid)
			return item;
	}
};


function SubModule(module, dataset) {
	syra_item.initialize(module.page, this);
	this.dataset = dataset || {};
	this.$prototype = module.$prototype.$properties.submodules.$item;
	this.navParent = this.articleParent = this.boxParent = module;

	this.$skin = this.page.$skin + "-submodule";
	this.slot = syra_dom.li(this.$skin);
	this.slot.syrainout = this.id;

	this.page.mode.subModule.create(this);

	this.navParent.body && this.navParent.body.appendChild(this.slot);
}

SubModule.prototype.onItemInOut = function(onEnter) {
	var self = this;
	if (onEnter) {
		self.navParent.onEnter = true;
		if (self.navParent.lastSelected === null) {
			self.navParent.onEnter && self.activate(true);
		} else {
			if (self.navParent.lastSelected === self) {
				if (self.navParent.moduleTimer) {
					clearTimeout(self.navParent.moduleTimer);
					delete self.navParent.moduleTimer;
				}
			} else {
				self.navParent.moduleTimer && clearTimeout(self.navParent.moduleTimer);
				self.navParent.moduleTimer = setTimeout(function() {
					self.navParent.onEnter && self.activate(true);
					delete self.navParent.moduleTimer;
				}, 150);
			}
		}
	} else {
		self.navParent.onEnter = false;
	}
};

SubModule.prototype.activate = function(on, block) {
	block = block || this;
	if (on) {
		if (block.navParent.lastSelected) {
			block.navParent.lastSelected.activate(false);
		}
		this.page.mode.subModule.activate(on, block);
		var child = block.lastSelected || block.children[0];
		if (child && child.activate) {
			child.activate(true);
		}
	} else {
		if (block == block.navParent.lastSelected) {
			block.navParent.lastSelected = null;
		}
		this.page.mode.subModule.activate(on, block);
	}
};

SubModule.prototype.addItems = function(items, parent) {
	parent = parent || this;
	parent.children = [];
	var slot = parent.megaDetailPanel ? parent.megaDetailPanel.cols[0] : parent.body;
	if (items.length) {
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			var item = items[ii];
			var dataItem = item.menuItem || item.menuBlock;
			if (dataItem) {
				var child = item.menuItem ? _menuItem.add(parent, dataItem) : (new MenuBlock(parent, dataItem));
				slot.appendChild(child.slot);
				parent.children.push(child);
			}
		}
	} else {
		syra_dom.li(this.page.$skin + "-no-menu", slot).textContent = syra_local.nvpNoMenuItem;
	}
};

SubModule.prototype.getChildItem = function(uuid) {
	for (var ii = 0, jj = this.children.length; ii <= jj; ii++) {
		var item = this.children[ii];
		if (item.dataset.$uuid === uuid)
			return item;
	}
};

exports.add = function(module, dataset) {
	return new SubModule(module, dataset);
};