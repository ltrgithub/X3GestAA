"use strict";
var _menuBlock = require('./menuBlock');
var _menuItem = require('./menuItem');
var _megaDetailPanel = require('./megaDetailPanel');
var _menuScroller = require('./menuScroller');

var LAST_COL_INDEX = 3;

function SubModule(module, dataset) {
	syra_item.initialize(module.page, this);
	this.dataset = dataset || {};
	this.$prototype = module.$prototype.$properties.submodules.$item;
	this.navParent = this.articleParent = this.boxParent = module;

	this.$skin = this.page.$skin + "-submodule";
	this.slot = syra_dom.li(this.$skin);
	this.slot.syrainout = this.id;
	this.title = syra_dom.text(this.$skin + "-title", this.dataset.title, this.slot);

	if (this._useLargeMode(this.dataset.items)) {
		this.mode = "large";
		this.body = syra_dom.ul(this.$skin + "-large");

		this.menuScroller = _menuScroller.addScroller(this.page, this.body);

		this.$skin_menu = this.$skin + "-large-link";
	} else {
		this.mode = "small";
		this.megaDetailPanel = _megaDetailPanel.add(this);
	}
	this.addItems(this.dataset.items);
	this.navParent.menuScroller.scrollerSlot.appendChild(this.slot);
}

SubModule.prototype.onItemInOut = function(onEnter) {
	onEnter && this.activate(true);
};
SubModule.prototype.activate = function(on, block) {
	block = block || this;
	if (on) {
		if (block.navParent.lastSelected) {
			block.navParent.lastSelected.activate(false);
		}
		block.page.mega_popup.appendChild(block.body);
		block.megaDetailPanel && block.megaDetailPanel.activate();
		block.navParent.lastSelected = block;
		var child = block.lastSelected || block.children[0];
		if (child && child.activate) {
			child.activate(true);
		}

		block.menuScroller && block.menuScroller.revalidate(block.page.mega_popup.clientHeight);
	} else {
		if (block == block.navParent.lastSelected) {
			block.navParent.lastSelected = null;
		}
		if (block.body.parentNode) {
			while (block.page.mega_popup.lastChild != block.body) {
				syra_dom.remove(block.page.mega_popup.lastChild);
			}
			syra_dom.remove(block.body);
		}
	}
	block.title.className = block.$skin + "-title" + (on ? " s-selected" : "");
	block.slot.className = block.$skin + (on ? " s-selected" : "");
};

/*	We always show the left-side vertical menu (#1).
 We show an adjacent 2nd vertical menu (#2) if either:
 1) there are 7 or more entries at the level of menu #2
 2) excluding menu #1, there are 3 or more sublevels,
 Otherwise, don't display menu #2, but rather just an options area.
 */
SubModule.prototype._useLargeMode = function(items, isLastLevel) {
	var blockCount = 0;
	if (items) {
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			if (items[ii].menuBlock) {
				blockCount++;
				if (isLastLevel) {
					return true;
				} else {
					return this._useLargeMode(items[ii].menuBlock.items, true);
				}
			}
		}
	}
	return blockCount > 6;
};
SubModule.prototype.addItems = function(items, parent) {
	parent = parent || this;
	parent.children = [];

	var slot = parent.megaDetailPanel ? parent.megaDetailPanel.cols[0] : (parent.menuScroller ? parent.menuScroller.scrollerSlot : parent.body);

	for (var ii = 0, jj = items.length; ii < jj; ii++) {
		var item = items[ii];
		var dataItem = item.menuItem || item.menuBlock;
		if (dataItem) {
			var child = item.menuItem ? _menuItem.add(parent, dataItem) : _menuBlock.add(parent, dataItem);
			slot.appendChild(child.slot);
		}
	}
};
SubModule.prototype.dispose = function() {
	this.page && this.page.disposeItem(this);
};

exports.add = function(module, dataset) {
	return new SubModule(module, dataset);
};