"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("syracuse-ui/lib/field/array/recordArticle").RecordArticle;

function MenuItemRecord() {}

exports.MenuItemRecord = helpers.defineClass(MenuItemRecord, RecordArticle, {
	initializeRecord: function(options) {
		this.$defaultSkinSection = this.$defaultSkinBlock = this.list.$item.$skinCard || "s-h3";
	},
	reorderItem: function() {
		var rowIndex = 0;
		for (var ii = 0, jj = this.builder.rows.length; ii < jj; ii++) {
			this.builder.rows[ii].count = 0;
			this.builder.rows[ii].cells = [];
		}
		var rowOffset = 0;
		for (var ii = 0, jj = this.list.records.length; ii < jj; ii++) {
			var record = this.list.records[ii];
			record.row = this.builder.rows[rowOffset];
			record.cellIndex = record.row.count++;
			record.$$item.detach().appendTo($(record.row.slot));
			record.row.cells.push(record._item);
			if (record.row.count >= record.row.max) {
				rowOffset++;
			}
		}
		var lastRow = this.builder.rows[this.builder.rows.length - 1];
		var $$lastRow = $(lastRow.slot);
		var $$children = $$lastRow.children(".s-cards-cell");
		if ($$children.length) {
			for (var ii = 0; ii < $$children.length; ii++) {
				lastRow.cells.push($($$children[0]).detach().appendTo($$lastRow)[0]);
			}
		}
	},
	remove: function() {
		if (this.$$item) {
			this.$$item.remove();
		}
	},
	applyReorderCapability: function(reorder) {
		/*if (!this._reorder) {
         this._reorder = document.createElement("div");
         this._reorder.className = this.list.$skin + "-card-reorder s-list-record-reorder";
         this.slot.insertBefore(this._reorder, this.slot.firstChild);
         }*/
	},
	applyChange: function(metaData) {
		RecordArticle.prototype.applyChange.call(this, metaData);
		if (this.dataset.description && this.dataset.description != this.dataset.title) {
			this._item.title = this.dataset.description;
		}
	},
	drawBox: function() {
		this.dataRow = this._item = document.createElement("div");
		this._item.className = "s-nav-submodule";
		this._item.setAttribute("data-s-record", this.$uuid);
		this.$$item = $(this._item);

		this.header = document.createElement("header");
		this.header.className = "s-nav-submodule-head";

		this.domTitle = document.createElement("div");
		this.header.appendChild(this.domTitle).className = "s-nav-submodule-title";

		this._item.appendChild(this.header);

		this.body = document.createElement("div");
		this.body.className = "s-nav-submodule-body";

		this._menusSlot = document.createElement("div");
		this.body.appendChild(this._menusSlot).className = "s-nav-submodule-links";

		this._item.appendChild(this.body);
		this.applyReorderCapability(true);

		this.cardItem = this.page.loadNewItem(this.domTitle, {
			$bind: "title",
			$category: "field",
			$isEditMode: this.$isEditMode,
			$inplace: true
		}, this);
		this.list._core.appendChild(this._item);
	},
	_createMenusBox: function() {
		this.page.loadNewItem(this._menusSlot, {
			$noText: true,
			$category: "link",
			$skin: "s-nav-submodule-link",
			$bind: "$edit",
			$icon: {
				$mode: "icon",
				$path: "list/s-list-"
			}
		}, this);
		this.page.loadNewItem(this._menusSlot, {
			$noText: true,
			$category: "link",
			$skin: "s-nav-submodule-link",
			$bind: "$delete",
			$icon: {
				$mode: "icon",
				$path: "list/s-list-"
			}
		}, this);
	},

	onSelectMouseEvent: function(event) {
		document.site.toggleClass(this._item, "s-record-over", event.type == "mouseenter");
	},
	dispose: function() {
		this.cardItem = this._item = this.slot = this._reorder = this._menusSlot = this.dataRow = null;
		this.header = this.domTitle = this.body = null;
		RecordArticle.prototype.dispose.call(this);
	}
});