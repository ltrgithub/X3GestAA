"use strict";
//s-nav-mega-link-parent
var helpers = require('syracuse-core').helpers;
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;

var _index = 0;
var LAST_COL_INDEX = 3;

var _megaMenus;

function _activate(item, on) {
	if (on) {
		if (item.megaParent.lastSelected) {
			item.megaParent.lastSelected.activate(false);
		}
		item.onActivated();
		_megaMenus.popupBody.appendChild(item.body);
		item.megaParent.lastSelected = item;
	} else {
		if (item == item.megaParent.lastSelected) {
			item.megaParent.lastSelected = null;
		}
		if (item.children) {
			for (var ii = 0, jj = item.children.length; ii < jj; ii++) {
				item.children[ii].activate && item.children[ii].activate(false);
			}
		}
		syra_dom.remove(item.body);
	}
	syra_dom.toggleClass(item.title, "s-selected", on);
	syra_dom.toggleClass(item.slot, "s-selected", on);

}


function Module() {

}

exports.Module = helpers.defineClass(Module, null, {
	load: function(page, dataset) {
		this.id = "Module-" + (_index++);

		//article compatiblity
		this.$prototype = page.$prototype.$properties.modules.$item;
		this.dataset = dataset;
		this.page = this.articleParent = this.boxParent = page;

		syra_item.register(this);
		this.slot = syra_dom.li('s-mega-module');
		this.slot.syrainout = this.id;
		this.slot.syraOnClick = "click";
		this.slot.textContent = dataset.title;

		if (dataset.description && dataset.description != dataset.title) {
			this.slot.title = dataset.description;
		}
		if (dataset.code && this.icon) {
			this.icon.style.backgroundImage = "url('" + syra_config.$iconPath + "modules/s_module_" + dataset.code.toLowerCase() + ".png')";
		}
	},
	click: function() {
		this.activate(true);
	},
	onActivated: function() {
		if (!this.body) {
			this.body = syra_dom.ul("s-mega-submodules");
			var dataRecords = this.dataset && this.dataset.submodules;
			this.children = [];
			if (dataRecords) {
				for (var ii = 0, jj = dataRecords.length; ii < jj; ii++) {
					var submodule = new SubModule();
					submodule.load(this, dataRecords[ii]);
					this.body.appendChild(submodule.slot);
					this.children.push(submodule);
				}
			}
			if (!this.children.length) {
				syra_dom.text("s-mega-submodules-empty-slot", syra_local.nvpNoSubModule, this.body);
			}
		}
		this.page.togglePopup(this.body);
	},
	activate: function(on) {
		_activate(this, on);
	},
	onItemInOut: function(onEnter) {
		var self = this;
		if (onEnter) {
			self.hoverTimer = setTimeout(function() {
				delete self.hoverTimer;
				self.activate(true);
			}, 500);
		} else {
			if (self.hoverTimer) {
				clearTimeout(self.hoverTimer);
				delete self.hoverTimer;
			}
		}
	},
	dispose: function() {
		if (this.subModules) {
			for (var ii = 0, jj = this.subModules.length; ii < jj; ii++) {
				this.subModules[ii].dispose();
			}
		}
		syra_item.unregister(this);
		syra_site.disposeObject(this);
	}
});

/*
 * We always show the left-side vertical menu (#1).
 * We show an adjacent 2nd vertical menu (#2) if either:
 * 1) there are 7 or more entries at the level of menu #2
 * 2) excluding menu #1, there are 3 or more sublevels,
 * Otherwise, don't display menu #2, but rather just an options area.
 */
function _hasLargeVolume(items, isLastLevel) {
	var count = 0;
	if (items) {
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			if (items[ii].menuBlock) {
				count++;
				if (isLastLevel) {
					return true;
				} else {
					return _hasLargeVolume(items[ii].menuBlock.items, true);
				}
			}
		}
	}
	return count > 6;
}

function SubModule() {

}

exports.SubModule = helpers.defineClass(SubModule, null, {
	load: function(module, dataset) {
		this.megaParent = module;

		//article compatiblity
		this.dataset = dataset;
		this.$prototype = module.$prototype.$properties.submodules.$item;
		this.articleParent = this.boxParent = module;
		this.page = module.page;

		this.id = "SubModule-" + (_index++);
		syra_item.register(this);

		this.mode = exports.mode || (_hasLargeVolume(dataset.items) ? "large" : "small");

		this.slot = syra_dom.li('s-mega-submodule');
		this.slot.syrainout = this.id;
		this.title = syra_dom.div("s-mega-submodule-title", this.slot);
		this.title.textContent = dataset.title;

		this.body = syra_dom.ul("s-mega-submodules-level-2");

		this.children = [];
		for (var ii = 0, jj = dataset.items.length; ii < jj; ii++) {
			var item = dataset.items[ii];
			var dataItem = item.menuItem || item.menuBlock;
			if (dataItem) {
				var slot = syra_dom.li(this.mode == "large" ? "s-mega-sub-menu-block-slot" : "s-nav-mega-link-parent", this.body);
				var child;
				if (item.menuItem) {
					child = new MenuItem();
					child.isSubmoduleLink = true;
				} else { //item.menuBlock
					child = new SubModuleMenuBlock();
					child.isHLayout = this.mode == "large";
				}
				this.children.push(child);
				child.slot = slot;
				child.megaParent = child.submodule = this;
				child.id = this.id + "-item-" + (_index++);
				syra_item.register(child);
				child.load(dataItem);
				if (slot != child.domItem) {
					slot.appendChild(child.domItem);
				}
			}
		}
	},
	onItemInOut: function(onEnter) {
		if (onEnter) {
			this.activate(true);
			var list = this.submoduleList;
			if (list && !list.adjusted) {
				list.adjusted = true;
				var overflowContent = [];
				var maxX = this.page.popup.clientHeight;
				var firtstCol = list.cols[0].slot;
				while (this.page.popup.scrollHeight > maxX && firtstCol.childNodes.length) {
					var child = firtstCol.lastChild;
					syra_dom.remove(child);
					overflowContent.push(child);
				}
				if (overflowContent.length) {
					//  Start adding the array elements to the new column slot in reverse order.
					var col = list._addColumn();
					this.page.popupBody.appendChild(col.slot);
					for (var ii = overflowContent.length - 1; ii > -1 /*&& newColumn < LAST_COL_INDEX*/ ; ii--) {
						col.slot.appendChild(overflowContent[ii]);
						if (maxX < this.page.popup.scrollHeight) {
							this.page.popupBody.removeChild(this.page.popupBody.lastChild);
							if (list.cols.length === LAST_COL_INDEX)
								break;
							col = list._addColumn();
							this.page.popupBody.appendChild(col.slot);
							ii++;
						}
					}
				}
			}
		}
	},
	onActivated: function() {
		this.page.popupBody.appendChild(this.body);
	},
	activate: function(on) {
		_activate(this, on);
	},
	dispose: function() {
		syra_item.unregister(this);
		syra_site.disposeObject(this);
	}
});

function MenuItem() {}

exports.MenuItem = helpers.defineClass(MenuItem, null, {
	load: function(dataset) {
		this.dataset = dataset;
		this.domItem = syra_dom.anchor(this.isSubmoduleLink ? "s-mega-submodule-link" : "s-mega-link");
		this.domItem.textContent = dataset.title;
		this.domItem.syraItem = this.id;
		this.domItem.syraOnClick = "click";

		var _$executes = ["$execute_$query", "$execute_$details", "$execute_$edit", "$execute_$cube"];
		if (this.dataset && this.dataset.$links) {
			this.page = this.submodule.page;
			this.articleParent = this.submodule;

			for (var ii = 0, jj = _$executes.length; ii < jj; ii++) {
				var $execute = this.dataset.$links[_$executes[ii]];
				if ($execute) {
					$execute.$title = $execute.$title;
					if (this.dataset.convergenceFunction) {
						$execute.$description = syra_local.nvpFunction + ": " + this.dataset.convergenceFunction;
					} else {
						if (this.dataset.entity) {
							$execute.$description = syra_local.nvpEntity + ": " + this.dataset.entity;
							if (this.dataset.entity != helpers.string.pluralize(this.dataset.representation || "")) {
								$execute.$description += " (" + syra_local.nvpRepresentation + ": " + this.dataset.representation + ")";
							}
						}
					}
					if (!$execute.$description) {
						$execute.$description = this.dataset.$description;
					}

					this.$url = $execute.$url;
					this.domItem = this.domItem;
					syra_url.history.setHref(this);

					this.codeMenu = {
						href: this.href,
						$url: this.$url,
						description: this.description,
						title: this.title
					};

					this.singleField = {
						$variantItemKey: "menuItem",
						variantItem: this
					};

					this.singleField.$variantItemKey = "menuItem";
					this.isMenuItem = true;
					this.$item = {};
					break;
				}
			}
		}
	},
	click: function(event) {
		syra_menus.click.fire({
			menu: this,
			event: event

		}, event);
		setTimeout(function() {
			_megaMenus.togglePopup();
		}, 200);
	},
	dispose: function() {
		syra_item.unregister(this);
		syra_site.disposeObject(this);
	}
});

function SubModuleMenuBlock() {}

exports.SubModuleMenuBlock = helpers.defineClass(SubModuleMenuBlock, null, {
	load: function(dataset) {
		//test par rapport au submodule
		var css = this.isHLayout ? {
			slot: "s-mega-sub-menu-block-slot",
			title: "s-mega-sub-menu-block-title",
			body: "s-mega-submodules-level-2 s-mega-block-detail",
			titleLink: "s-mega-link-slot"
		} : {
			slot: "s-mega-block-slot",
			title: "s-mega-block-title",
			body: "s-mega-block-body",
			titleLink: "s-mega-link-slot"
		};
		this.record = dataset;
		this.domItem = this.slot;
		this.domItem.syrainout = this.id;
		this.title = syra_dom.div(css.title, this.domItem);
		this.title.textContent = dataset.title;
		this.body = syra_dom.ul(css.body);
		for (var ii = 0, jj = dataset.items.length; ii < jj; ii++) {
			var item = dataset.items[ii];
			var dataItem = item.menuItem || item.menuBlock;
			if (dataItem) {
				var child;
				if (item.menuItem) {
					child = new MenuItem();
					child.slot = syra_dom.li(css.titleLink, this.body);
				} else {
					child = new SubModuleMenuBlock();
					child.slot = syra_dom.li(css.slot, this.body);
				}
				child.megaParent = this;
				child.submodule = this.submodule;
				child.id = this.id + "-item-" + (_index++);
				syra_item.register(child);
				child.load(dataItem);
				if (child.slot != child.domItem) {
					child.slot.appendChild(child.domItem);
				}
			}
		}
		if (!this.isHLayout) {
			this.domItem.appendChild(this.body);
		}
	},
	onItemInOut: function(onEnter) {
		onEnter && this.activate(true);
	},
	onActivated: function() {
		if (this.isHLayout) {
			_megaMenus.popupBody.appendChild(this.body);
		}
	},
	activate: function(on) {
		this.isHLayout && _activate(this, on);
	},
	dispose: function() {
		syra_item.unregister(this);
		syra_site.disposeObject(this);
	}
});


function MegaMenus() {}

helpers.defineClass(MegaMenus, DesktopPage, {
	load: function() {
		(this.page = this).$item = {
			$layout: {
				$items: []
			}
		};
		var sav = this.body;
		DesktopPage.prototype.load.call(this);
		this.body = sav;
		this.popup = syra_dom.div("s-mega-popup");
		this.popupBody = syra_dom.div("s-mega-popup-body", this.popup);
		this.draw();
		this.isModulesLoaded = true;
		//syra_site.header.appendChild(this.body);
		//delete syra_site.size;
		this.resize();
	},
	togglePopup: function(content) {
		var self = this;
		if (content) {
			self.popupBody.appendChild(content);
			if (!self.popupDlg) {
				self.popupDlg = syra_over.openPopup(self.page, {
					content: {},
					slot: self.popup,
					autoCloseBoundary: self.body,
					picker: self.body,
					position: {
						my: "left top",
						at: "left bottom",
						of: self.body
					},
					close: function() {
						if (exports.cssMode) {
							return false;
						}
						self.popupDlg = null;
					}
				});
			}
		} else {
			self.popupDlg && self.popupDlg.close();
		}
	},
	addMore: function() {
		var self = this;
		self.moreBtn = syra_button.add({
			parent: syra_site,
			slot: syra_dom.li("s-mega-module-more", self.body),
			text: syra_local.megaMenuMore,
			title: syra_local.megaMenuMoreTooltip,
			css: "s-mega-module-more-link",
			click: function() {
				if (!self.morePopupDlg) {
					var slot = syra_dom.div("s-mega-more-popup");
					slot.appendChild(self.morePopupBody);
					self.morePopupDlg = syra_over.openPopup(self.page, {
						content: {},
						slot: slot,
						picker: self.moreBtn.link,
						position: {
							my: "left top",
							at: "left bottom",
							of: self.moreBtn.link
						},
						close: function() {
							if (exports.cssMode) {
								return false;
							}
							self.morePopupDlg = null;
						}
					});
				} else {
					self.morePopupDlg.close();
				}
			}
		});
		self.morePopupBody = syra_dom.ul("s-mega-more-popup-body");
	},
	draw: function() {
		var dataRecords = this.page.dataset && this.page.dataset.modules;
		this.modules = [];
		syra_dom.empty(this.body);
		if (dataRecords) {
			for (var ii = 0, jj = dataRecords.length; ii < jj; ii++) {
				var module = new Module();
				module.megaParent = this;
				module.load(this.page, dataRecords[ii]);
				this.body.appendChild(module.slot);
				this.modules.push(module);
			}
		}
		if (!this.modules.length) {
			syra_dom.text("s-mega-submodules-empty-slot", syra_local.nvpNoModule, this.body);
		}
	},
	resize: function() {
		if (this.isModulesLoaded && this.body) {
			var maxW = this.body.clientWidth + 1; //1 for little space
			if (this.lastWidth != maxW) {
				!this.moreBtn && this.addMore();
				this.lastWidth = maxW;
				if (this.body.scrollWidth > maxW) {
					while (this.body.scrollWidth > maxW) {
						var item = this.moreBtn.slot.previousSibling;
						if (!item) {
							break;
						}
						item.className += " s-mega-more-popup-item";
						this.morePopupBody.insertBefore(item, this.morePopupBody.firstChild);
					}
				} else {
					while (this.morePopupBody.childNodes.length) {
						var node = this.morePopupBody.childNodes[0];
						node.className = node.className.replace("s-mega-more-popup-item", "");
						this.body.insertBefore(node, this.moreBtn.slot);
						if (this.body.scrollWidth > maxW) {
							node.className += " s-mega-more-popup-item";
							this.morePopupBody.insertBefore(node, this.morePopupBody.firstChild);
							break;
						}
					}
				}
				this.moreBtn.slot.style.visibility = this.morePopupBody.childNodes.length ? "visible" : "hidden";
			}
		}
	},
	clear: function() {
		syra_dom.empty(this.popupBody);
		syra_dom.empty(this.body);
		syra_button.remove(this.moreBtn);
		this.moreBtn = this.lastSelected = null;
		if (this.modules) {
			for (var ii = 0, jj = this.modules.length; ii < jj; ii++) {
				this.modules[ii].dispose();
			}
		}
	},
	dispose: function() {
		_megaMenus = null;
		this.clear();
		DesktopPage.prototype.dispose.call(this);
	}
});

var _isEnabled = true;;
exports.on = function() {
	_isEnabled = true;
	_megaMenus.load();
};
exports.large = function() {
	exports.mode = "large";
	if (_megaMenus) {
		_megaMenus.clear();
		_megaMenus.draw();
		_megaMenus.resize();
	}
};
exports.small = function() {
	exports.mode = "small";
	if (_megaMenus) {
		_megaMenus.clear();
		_megaMenus.draw();
		_megaMenus.resize();
	}
};
exports.css = function() {
	exports.cssMode = true;
};

exports.mode = "large";

exports.resize = function() {
	_megaMenus && _megaMenus.resize();
};

exports.setMode = function(value) {
	exports.mode = value;
	this.megaMenus.draw();
};

exports.fetch = function() {
	_megaMenus = exports.megaMenus = new MegaMenus();
	_megaMenus.body = syra_dom.ul("s-mega-modules", syra_site.header);
	syra_router.loadRepresentation({
		article: syra_site,
		segments: syra_site.$menus.$navigation.$url,
		success: function($itemPage) {
			if ($itemPage && $itemPage.$representation) {
				_megaMenus.$prototype = $itemPage.$representation.$prototype;
				_megaMenus.dataset = {};
				var initData = $itemPage.$representation;
				var $keys = Object.keys(initData);
				if (initData && initData.modules) {
					for (var ii = 0; ii < 20; ii++) {
						var newmod = helpers.object.clone(initData.modules[0], true);
						newmod.$uuid += "-" + "ii";
						initData.modules.push(newmod);
					}
				}
				for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
					if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
						_megaMenus.dataset[$keys[ii]] = initData[$keys[ii]];
					}
				}

				_megaMenus.load();
			}
		}
	});
};




exports.showSiteMap = function() {
	alert("");
};