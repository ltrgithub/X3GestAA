"use strict";
var SimpleBar = require('syracuse-ui/lib/field/custom/simpleScroller').simplebar;

function Columns() {}

Columns.prototype.firstColumnSlot = function() {
	return this.columnList.cols[0].slot;
};
Columns.prototype.adjustColumnContent = function(maxColumnCount) {

	if (this.columnList && !this.columnList.adjusted) {
		this.columnList.adjusted = true;

		/*
		 * Remove each overflowed root element from the column and place it an array, leave at least one element in the first column
		 */
		var overflowContent = [];
		while (this.scrollBody.clientHeight < this.firstColumnSlot().scrollHeight && this.firstColumnSlot().childNodes.length > 1) {
			overflowContent.push(this.firstColumnSlot().removeChild(this.firstColumnSlot().lastChild));
		}

		if (overflowContent.length) {
			/*
			 * Start adding the array elements to the new column slot in reverse order.
			 */
			var columnNumber = 1;
			var maxItemColumns = maxColumnCount === 5 ? 3 : 2;

			this.addColumn();

			var maxScrollHeight = Math.max(this.columnList.cols[0].slot.clientHeight, this.scrollBody.clientHeight);

			for (var ii = overflowContent.length - 1; ii > -1; ii--) {
				var overflowDomItem = overflowContent[ii];
				this.columnList.cols[columnNumber].slot.appendChild(overflowDomItem);

				if (columnNumber + 1 < maxItemColumns) {
					if (maxScrollHeight + 1 < this.columnList.cols[columnNumber].slot.scrollHeight && this.columnList.cols[columnNumber].slot.childNodes.length > 1) {
						this.columnList.cols[columnNumber].slot.removeChild(this.columnList.cols[columnNumber].slot.lastChild);

						if (columnNumber === this.columnList.lastColumn - 1)
							break;

						maxScrollHeight = Math.max(this.columnList.cols[columnNumber].slot.clientHeight, maxScrollHeight);
						++columnNumber;
						this.addColumn();
						ii++;
					}
				}
			}
		}
		// adjust the position of the scrollbar...
		//$('#contentPanelScrollBar').simplebar().css("width", this.columnList.cols.length * 240 + "px");

	}

};

Columns.prototype.addColumn = function() {
	var slot = syra_dom.ul("s-mega-scroll-column");
	this.columnList.cols[0].slot.parentNode.appendChild(slot);
	this.columnList.cols.push({
		slot: slot
	});
};

Columns.prototype.dispose = function() {};
exports.add = function(parentNode, scrollBody) {
	var cols = new Columns();
	cols.scrollBody = scrollBody;

	cols.columnList = {
		cols: []
	};

	cols.columnList.cols.push({
		slot: syra_dom.ul("s-mega-scroll-column", parentNode)
	});
	return cols;
};