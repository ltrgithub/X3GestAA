"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var localizationPagePrototype = require("./setting/localizationPagePrototype");
var localizationPageArticle = require("./setting/localizationPageArticle");

function LocalizationPage() {}

exports.LocalizationPage = helpers.defineClass(LocalizationPage, RawPage, {
	loadBox: function($enum) {
		//var $skin = "s-localization-page";
		var self = this;
		self.$prototype = localizationPagePrototype.getPrototype();
		self.$prototype.$properties.$translations.$item.$properties.$locale.$value.$enum = $enum;
		self.$item = localizationPageArticle.getItem();

		self.$isEditMode = true;

		self.layoutSlot = document.createElement("div");
		self.layoutSlot.className = "s-localization-page s-modal-page-container";

		RawPage.prototype.loadBox.call(self);
	},
	notifyDataChange: function(field, value) {

		// change locale value
		if (field.$item.$bind == '$localeValue') {
			// if locale not set, display err
			if (field.articleParent.dataset.$locale == 0) {
				this._showErrMsg(document.site.localize.lPageLocaleNotSet);
			}
		}
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$bind == '$save') {
			//TODO
			this.dialogWrapper.close();
		}
	},
	applyValues: function(data) {

		// is payload ok ?
		if (!this._isPayloadOk(data)) {
			return false;
		}

		// payload ok
		this.$values = data.$values;
		var newData = {
			$translations: []
		};
		var $enum = [];
		this.enumLocaleSet = {};
		this.enumLocaleUnset = {};

		// building newData object
		for (var ii = 0; ii < this.$values.length; ii++) {
			if (this.$values[ii].$value) {
				// add record data
				newData.$translations.push({
					$index: ii,
					$locale: ii + 1,
					$localeValue: this.$values[ii].$value
				});

				// for locale with value
				this.enumLocaleSet[this.$values[ii].$locale] = {
					$title: this.$values[ii].$title
				};
			} else {
				// for locale without value
				this.enumLocaleUnset[this.$values[ii].$locale] = {
					$title: this.$values[ii].$title
				};
			}
			$enum.push({
				$value: ii + 1,
				$title: this.$values[ii].$title
			});
		}

		// add new empty row only if enumLocaleUnset unempty
		if (Object.keys(this.enumLocaleUnset).length > 0) {
			newData.$translations.push({
				$index: newData.$translations.length,
				$locale: 0,
				$localeValue: ""
			});
		}

		// build page (with locale enum values)
		this.loadBox($enum);

		// apply newData
		this.applyChange.call(this, newData);

		return true;

	},
	applyChange: function(newData) {
		// apply change
		RawPage.prototype.applyChange.call(this, newData);

		// set non empty locale enum to read-only state
		// set enum list for empty record
		if (this.boundFields && this.boundFields.$translations[0].records) {
			for (var ii = 0; ii < this.boundFields.$translations[0].records.length; ii++) {
				var record = this.boundFields.$translations[0].records[ii];
				if (record.dataset && record.dataset.$locale != undefined) {
					var keys = Object.keys(record.idMap);
					for (var mm = 0, kk = keys.length; mm < kk; mm++) {
						var item = record.idMap[keys[mm]];
						if (item && item.$item && item.$item.$format == '$combo') {
							// set read-only state
							if (record.dataset.$locale >= 1) {
								item.setState({
									$isReadOnly: true
								});
							} else {
								// set enum list if enumLocaleUnset defined
								var keys = Object.keys(this.enumLocaleUnset);
								if (keys.length > 0) {
									var $enum = [];
									for (var ff = 0, pp = keys.length; ff < pp; ff++) {
										$enum.push({
											$value: ff + 1,
											$title: this.enumLocaleUnset[keys[ff]].$title
										});
									}
									item.builder.setEnum($enum);
								}
							}
						}
					}
				}
			}
		}
	},
	_showErrMsg: function(msg) {
		document.site.showDiagnoses({
			$diagnoses: [{
				$message: msg
			}]
		});
	},
	_isPayloadOk: function(data) {
		if (!data.$values) {
			this._showErrMsg(document.site.localize.lPageNoValues);
			return false;
		}
		if (!data.$links) {
			this._showErrMsg(document.site.localize.lPageNoLink);
			return false;
		} else {
			if (!data.$links.$save) {
				this._showErrMsg(document.site.localize.lPageNoLink);
				return false;
			}
		}
		return true;
	}
});