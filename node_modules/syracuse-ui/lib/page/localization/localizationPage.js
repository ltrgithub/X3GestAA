"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;

function LocalizationPage() {}

exports.LocalizationPage = helpers.defineClass(LocalizationPage, DesktopPage, {
	notifyDataChange: function(field, value) {
		// clean diagnoses panel if any
		if (this.diagnosesPanel) {
			this.diagnosesPanel.clean();
		}

		var record = field.articleParent;

		// on locale field value change
		if (field.$item.$bind == '$localeValue') {
			if (record.dataset.$localeChoice != null) {

				// if locale not set, display err
				if (record.dataset.$localeChoice == 0) {
					document.site.showDiagnoses({
						$diagnoses: [{
							$message: document.site.localize.lPageLocaleNotSet
						}]
					}, field);
				} else {
					// == update this.$values (which is to be sent on $save action) ==


					// get $localeChoice value corresponding
					var $locale = record.dataset.$localeChoice;

					// set value in $values array
					this.$values[this.enumLocaleData.enumLocale[$locale].$index].$value = value !== '' ? value : null;

					// update enumLocaleUnset (remove the corresponding locale choice)
					delete this.enumLocaleData.enumLocaleUnset[$locale];

					// add remove link -- set localeChoice state readOnly
					this.applyChange({
						$translations: [{
							$uuid: record.$uuid,
							$index: record.getRecordIndex(),
							$links: {
								$delete: {
									$isHidden: false
								}
							},
							$properties: {
								$localeChoice: {
									$isReadOnly: true
								}
							}
						}]
					});
				}
			}
		}

		// on locale choice value change
		if (field.$item.$bind == '$localeChoice' && record.dataset.$localeChoice != null) {
			// set locale field editable
			this.applyChange({
				$translations: [{
					$uuid: record.$uuid,
					$index: record.getRecordIndex(),
					$properties: {
						$localeValue: {
							$isEditMode: true
						}
					}
				}]
			});
		}
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$bind == '$delete') {
			this._onRemoveLocale(menuItem.articleParent);
			return false;
		}
	},
	onSave: function() {
		var self = this;
		var $menu = self.$menus.$save;
		if ($menu.$url !== 'test') { // 'test' is $url value for $save link in test page
			var reqOpt = {
				method: $menu.$method,
				$location: {
					$url: $menu.$url
				},
				data: {
					$values: self.$values
				},
				$contentType: "application/json"
			};

			document.controller.sendRequest(null, reqOpt, function(data, response, $url) {
				// assuming client receives data for the underneath page
				if (!(self.openerMenu.articleParent.onLocalizeField && !self.openerMenu.articleParent.onLocalizeField(self.openerMenu, data, response, $url))) {
					self.openerMenu.page.applyChange(data);
				}
				self.dialogWrapper.close(undefined, true);
			}, function(error, httpquery) {
				var $diagnoses;
				if (error.data.indexOf("$diagnoses") != -1) {
					$diagnoses = JSON.parse(error.data).$diagnoses;
				} else {
					$diagnoses = [{
						$severity: "error",
						$message: error.data
					}];
				}
				document.site.showDiagnoses({
					$diagnoses: $diagnoses
				}, self);
			});
		} else {
			self.dialogWrapper.close();
		}
	},
	_onRemoveLocale: function(record) {
		var list = record.list;
		// on removing record with locale choice set
		if (record.dataset.$localeChoice) {

			var $isListMaxLength = this.valuesCount == list.dataset.length;
			var $isLastRecordSet = list.recordsMap[list.dataset[list.dataset.length - 1].$uuid].boundFields["$localeChoice"][0].$isReadOnly;

			// ==  update enumLocaleUnset ==
			var $locale = record.dataset.$localeChoice;

			this.enumLocaleData.enumLocaleUnset[$locale] = {
				$title: this.enumLocaleData.enumLocale[$locale].$title
			};

			// == update this.$values ==
			this.$values[this.enumLocaleData.enumLocale[$locale].$index].$value = null;

			// == update display ==
			this.applyChange({
				$translations: [{
					$uuid: record.$uuid,
					$index: record.getRecordIndex(),
					$isDeleted: true
				}]
			});

			// if record remove from list at its max size, empty row is added
			if ($isListMaxLength && $isLastRecordSet) {
				this._appendEmptyRow(list.dataset.length);
			}
		}
	},
	applyChange: function(newData) {
		// apply change
		DesktopPage.prototype.applyChange.call(this, newData);
		// set non empty locale enum to read-only state
		// set enum list for empty record
		var records = this.boundFields && this.boundFields.$translations[0].records;
		if (records) {
			for (var ii = 0, jj = records.length; ii < jj; ii++) {
				var record = records[ii];
				if (record.dataset && record.dataset.$localeChoice != undefined) {
					var comboItem = record.boundFields.$localeChoice[0];
					// set enum list for empty row if enumLocaleUnset defined
					if (record.dataset.$localeChoice == 0 || comboItem.$isEditMode) {
						var keys = Object.keys(this.enumLocaleData.enumLocaleUnset);
						if (keys.length > 0) {
							var $enum = [];
							for (var ff = 0, pp = keys.length; ff < pp; ff++) {
								if (this.enumLocaleData.enumLocaleUnset[keys[ff]]) {
									$enum.push({
										$value: keys[ff],
										$title: this.enumLocaleData.enumLocaleUnset[keys[ff]].$title
									});
								}
							}
							comboItem.builder.setEnum($enum);
						}
					}
				}
			}
		}
	},
	_appendEmptyRow: function(index) {
		this.applyChange({
			$translations: [{
				$uuid: helpers.uuid.generate(),
				$index: index,
				$localeChoice: "",
				$localeValue: "",
				$links: {
					$delete: {
						$isHidden: true
					}
				},
				$properties: {
					$localeValue: {
						$isEditMode: false
					}
				}
			}]
		});
	},
	dispose: function() {
		this.openerMenu = this.enumLocaleData = this.$values = this.newData = null;
		DesktopPage.prototype.dispose.call(this);
	},
	applyShortCuts: function(shortcurts, event, focusField) {
		var self = this;
		if (!focusField) {
			focusField = (self.focusField && !self.focusField.disposed) ? self.focusField : null;
		}
		if (shortcurts.enter || shortcurts.tab) {
			self._appendNewRow(shortcurts.enter, shortcurts.tab, focusField);
		}

		return false;
	},
	_appendNewRow: function(isSelect, isTab, focusField) {
		// add a new row on enter if last cell focused
		if ((isSelect || isTab) && focusField) {
			var list = this.getLastFocusGrid(focusField);
			if (focusField.getDataValue() &&
				focusField.$item.$bind == "$localeValue" &&
				focusField.articleParent.getRecordIndex() == (list.dataset.length - 1) &&
				list.dataset.length < Object.keys(this.enumLocaleData.enumLocale).length) {
				this._appendEmptyRow(focusField.articleParent.getRecordIndex() + 1);
			}
		}
	}
});