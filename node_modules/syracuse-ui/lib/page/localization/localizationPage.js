"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;

function LocalizationPage() {}

exports.LocalizationPage = helpers.defineClass(LocalizationPage, DesktopPage, {
	notifyDataChange: function(field, value) {
		// clean diagnoses panel if any
		if (this.diagnosesPanel) {
			this.diagnosesPanel.clean();
		}

		var record = field.articleParent;

		// on locale field value change
		if (field.$item.$bind == '$localeValue') {
			if (record.dataset.$localeChoice != null) {

				// if locale not set, display err
				if (record.dataset.$localeChoice == 0) {
					document.site.showDiagnoses({
						$diagnoses: [{
							$message: document.site.localize.lPageLocaleNotSet
						}]
					}, field);
				} else {
					// == update this.$values (which is to be sent on $save action) ==


					// get $localeChoice value corresponding
					var $locale = record.dataset.$localeChoice;

					// set value in $values array
					this.$values[this.enumLocaleData.enumLocale[$locale].$index].$value = value !== '' ? value : null;

					// update enumLocaleUnset (remove the corresponding locale choice)
					delete this.enumLocaleData.enumLocaleUnset[$locale];

					// add remove link -- set localeChoice state readOnly
					this.applyChange({
						$translations: [{
							$uuid: record.$uuid,
							$index: record.$recordIndex,
							$links: {
								$delete: {
									$isHidden: false
								}
							},
							$properties: {
								$localeChoice: {
									$isReadOnly: true
								}
							}
						}]
					});
				}
			}
		}

		// on locale choice value change
		if (field.$item.$bind == '$localeChoice' && record.dataset.$localeChoice != null) {
			// set locale field editable
			this.applyChange({
				$translations: [{
					$uuid: record.$uuid,
					$index: record.$recordIndex,
					$properties: {
						$localeValue: {
							$isEditMode: true
						}
					}
				}]
			});
		}
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$bind == '$delete') {
			this._onRemoveLocale(menuItem.articleParent);
			return false;
		}
	},
	onSave: function() {
		var self = this;
		var $menu = self.$menus.$save;
		if ($menu.$url !== 'test') { // 'test' is $url value for $save link in test page
			var reqOpt = {
				method: $menu.$method,
				$location: {
					$url: $menu.$url
				},
				data: {
					$values: self.$values
				},
				$contentType: "application/json"
			};

			document.controller.sendRequest(null, reqOpt, function(data, response, $url) {
				// assuming client receives data for the underneath page
				if (self.dialogWrapper.options && (self.dialogWrapper.options.article || self.dialogWrapper.options.boxParent)) {
					(self.dialogWrapper.options.article || self.dialogWrapper.options.boxParent).page.applyChange(data);
				}
				self.dialogWrapper.close(undefined, true);
			}, function(error, httpquery) {
				var $diagnoses;
				if (error.data.indexOf("$diagnoses") != -1) {
					$diagnoses = JSON.parse(error.data).$diagnoses;
				} else {
					$diagnoses = [{
						$severity: "error",
						$message: error.data
					}];
				}
				document.site.showDiagnoses({
					$diagnoses: $diagnoses
				}, self);
			});
		} else {
			self.dialogWrapper.close();
		}
	},
	_onRemoveLocale: function(record) {
		var list = record.list;
		// on removing record with locale choice set
		if (record.dataset.$localeChoice) {

			var $isListMaxLength = this.valuesCount == list.dataset.length;
			var $isLastRecordSet = list.recordsMap[list.dataset[list.dataset.length - 1].$uuid].boundFields["$localeChoice"][0].$isReadOnly;

			// ==  update enumLocaleUnset ==
			var $locale = record.dataset.$localeChoice;

			this.enumLocaleData.enumLocaleUnset[$locale] = {
				$title: this.enumLocaleData.enumLocale[$locale].$title
			};

			// == update this.$values ==
			this.$values[this.enumLocaleData.enumLocale[$locale].$index].$value = null;

			// == update display ==
			this.applyChange({
				$translations: [{
					$uuid: record.$uuid,
					$index: record.$recordIndex,
					$isDeleted: true
				}]
			});

			// if record remove from list at its max size, empty row is added
			if ($isListMaxLength && $isLastRecordSet) {
				this._appendEmptyRow(list.dataset.length);
			}
		}
	},
	applyChange: function(newData) {
		// apply change
		DesktopPage.prototype.applyChange.call(this, newData);
		// set non empty locale enum to read-only state
		// set enum list for empty record
		var records = this.boundFields && this.boundFields.$translations[0].records;
		if (records) {
			for (var ii = 0, jj = records.length; ii < jj; ii++) {
				var record = records[ii];
				if (record.dataset && record.dataset.$localeChoice != undefined) {
					var comboItem = record.boundFields.$localeChoice[0];
					// set enum list for empty row if enumLocaleUnset defined
					if (record.dataset.$localeChoice == 0 || comboItem.$isEditMode) {
						var keys = Object.keys(this.enumLocaleData.enumLocaleUnset);
						if (keys.length > 0) {
							var $enum = [];
							for (var ff = 0, pp = keys.length; ff < pp; ff++) {
								if (this.enumLocaleData.enumLocaleUnset[keys[ff]]) {
									$enum.push({
										$value: keys[ff],
										$title: this.enumLocaleData.enumLocaleUnset[keys[ff]].$title
									});
								}
							}
							comboItem.builder.setEnum($enum);
						}
					}
				}
			}
		}
	},
	_appendEmptyRow: function(index) {
		this.applyChange({
			$translations: [{
				$uuid: helpers.uuid.generate(),
				$index: index,
				$localeChoice: "",
				$localeValue: "",
				$links: {
					$delete: {
						$isHidden: true
					}
				},
				$properties: {
					$localeValue: {
						$isEditMode: false
					}
				}
			}]
		});
	},
	dispose: function() {
		this.enumLocaleData = this.$values = this.newData = null;
		DesktopPage.prototype.dispose.call(this);
	},
	applyShortCuts: function(shortcurts, event, focusField) {
		// /!\ TODO to update when raw#applyShortCuts() will be updated
		var self = this;
		if (!focusField) {
			focusField = (self.focusField && !self.focusField.disposed) ? self.focusField : null;
		}
		if (shortcurts.esc) {
			if (shortcurts.g) {
				if (shortcurts.h) {
					document.site.gotoHome();
				}
				return true;
			}
			if (shortcurts.h || shortcurts.f11) {
				if ((shortcurts.h && (shortcurts.a || shortcurts.r)) || shortcurts.f11) {
					if (self.menuBar) {
						self.menuBar.collapse();
					}
					return true;
				}
				if (event.syraKeyMap == "h") {
					event.returnValue = false;
					if (event.preventDefault) {
						event.preventDefault();
					}
				}
			}
			if (shortcurts.enter) {
				self.clickMainMenu();
				return true;
			}
			if (shortcurts.left || shortcurts.right) {
				self.openNextTab(shortcurts.right);
				return true;
			}
			if (shortcurts.f1) {
				if (focusField) {
					focusField.page.externalAdapter.onFieldClickPicker({
						field: focusField,
						pickerType: "help",
						doEvent: function() {
							self.openHelp(focusField);
						}
					});
				} else {
					self.openHelp();
				}
				return true;
			}
			if (shortcurts["delete"]) {
				(focusField ? focusField.articleParent : self).clickMenu("$delete");
				return true;
			}
			if (shortcurts.insert) {
				var article;
				if (focusField) {
					article = focusField.articleParent;
					while (!article.disposed && (article != article.page) && !article.menuItems.$create) {
						article = article.articleParent;
					}
				}
				(article || self).clickMenu("$create");
				return true;
			}
			if (shortcurts.n) {
				self.clickMenu("$create");
				return true;
			}
			if (shortcurts.p) {
				self.clickMenu("$print");
				return true;
			}
			if (focusField && ((!shortcurts.h && shortcurts.l) || shortcurts.f12)) {
				focusField.clickPicker("lookup");
				return true;
			}
			if (shortcurts.r) {
				var list = self.getLastFocusGrid(focusField);
				var lists = list ? [list] : self.getLists();
				if (lists) {
					for (var ii = 0, jj = lists.length; ii < jj; ii++) {
						var list = lists[ii];
						if (list && list.builder && list.builder.fitToWidth) {
							list.builder.fitToWidth();
						}
					}
				}
				return true;
			}
			if (shortcurts.pagedown || shortcurts.pageup) {
				var list = self.getLastFocusGrid(focusField);
				var lists = list ? [list] : self.getLists();
				if (lists.length == 1 && lists[0].pagging) {
					lists[0].pagging.onShortKeyEvent(shortcurts.pagedown, shortcurts.shift);
				}
				return true;
			}
			if (shortcurts.a) {
				//selectAllGridLines
				// get current grid, we need to have focus at least of an element of the grid
				var list = self.getLastFocusGrid(focusField);
				var lists = list ? [list] : self.getLists();
				if (lists.length == 1 && lists[0].pagging) {
					var range = document.createRange();
					range.selectNode(lists[0].$$item[0]);
					window.getSelection().addRange(range);
				}
				return true;
			}
			if (focusField && (shortcurts.m || shortcurts.f4)) {
				if (shortcurts.shift) {
					focusField = focusField.articleParent;
				}
				if (focusField.menusBox && focusField.menusBox.domTitle) {
					$(focusField.menusBox.domTitle).click();
				}
				return true;
			}
			if (shortcurts.k || shortcurts.j) {
				self.clickMenu(shortcurts.k ? (shortcurts.shift ? "$first" : "$previous") : (shortcurts.shift ? "$last" : "$next"));
				return true;
			}
			if ((shortcurts[":"] && shortcurts.shift) || shortcurts.s || shortcurts.divide) {
				if (document.site.searchField) {
					var $searchFields = document.site.searchField.boundFields.$search;
					if ($searchFields && $searchFields.length) {
						$searchFields[0].focus();
					}
					return true;
				}

			}
		} else {
			if (shortcurts.enter || shortcurts.up || shortcurts.down || shortcurts.tab) {
				return self.navRowList(shortcurts.enter, shortcurts.down, focusField, shortcurts.tab);
			}
		}
		return false;
	},
	navRowList: function(isSelect, isDown, focusField, isTab) {
		// /!\ TODO to update when raw#navRowList() will be updated

		// add a new row on enter if last cell focused
		if ((isSelect || isTab) && focusField) {
			var list = this.getLastFocusGrid(focusField);
			if (focusField.getDataValue() &&
				focusField.$item.$bind == "$localeValue" &&
				focusField.articleParent.$recordIndex == (list.dataset.length - 1) &&
				list.dataset.length < Object.keys(this.enumLocaleData.enumLocale).length) {
				this._appendEmptyRow(focusField.articleParent.$recordIndex + 1);
			}
		}

		DesktopPage.prototype.navRowList.call(this, isSelect, isDown, focusField);
	}
});