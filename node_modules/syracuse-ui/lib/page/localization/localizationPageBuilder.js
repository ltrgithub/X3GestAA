"use strict";
var helpers = require('syracuse-core/lib/helpers');
var LocalizationPage = require('syracuse-ui/lib/page/localization/localizationPage').LocalizationPage;

function LocalizationPageBuilder() {}

exports.LocalizationPageBuilder = helpers.defineClass(LocalizationPageBuilder, null, {
	loadLocalizationPage: function(menu) {
		var self = this;
		// getting localization payload
		document.controller.sendRequest(null, {
			method: "GET",
			$location: {
				$url: menu.$url
			}
		}, function(data, response, $url) {
			self._createPage(data, menu);
		}, function(error, httpquery) {
			var $diagnoses;
			if (error.data.indexOf("$diagnoses") != -1) {
				$diagnoses = JSON.parse(error.data).$diagnoses;
			} else {
				$diagnoses = [{
					$severity: "error",
					$message: error.data
				}];
			}
			document.site.showDiagnoses({
				$diagnoses: $diagnoses
			});
		});
	},
	_createPage: function(data, openerMenu) {
		var self = this;
		self.newData = {
			$translations: []
		};
		var $enum = [];
		self.enumLocale = {};
		self.enumLocaleSet = {};
		self.enumLocaleUnset = {};
		self.enumLocaleData = {
			enumLocale: self.enumLocale,
			enumLocaleSet: self.enumLocaleSet,
			enumLocaleUnset: self.enumLocaleUnset
		};

		// === building locale enum data & newData object ===
		// is payload ok ?
		if (!self._isPayloadOk(data)) {
			return false;
		}

		// payload ok
		self.$values = data.$values;
		for (var ii = 0; ii < self.$values.length; ii++) {
			if (self.$values[ii].$value) {
				// add record data
				self.newData.$translations.push({
					$uuid: helpers.uuid.generate(),
					$index: ii,
					$localeChoice: self.$values[ii].$locale,
					$localeValue: self.$values[ii].$value,
					$properties: {
						$localeChoice: {
							$isReadOnly: true
						}
					}
				});

				// for locale with value
				self.enumLocaleSet[self.$values[ii].$locale] = {
					$title: self.$values[ii].$title
				};
			} else {
				// for locale without value
				self.enumLocaleUnset[self.$values[ii].$locale] = {
					$title: self.$values[ii].$title
				};
			}

			$enum.push({
				$value: self.$values[ii].$locale,
				$title: self.$values[ii].$title
			});

			self.enumLocale[self.$values[ii].$locale] = {
				$index: ii,
				$title: self.$values[ii].$title
			};
		}

		// add new empty row only if enumLocaleUnset unempty
		if (Object.keys(self.enumLocaleUnset).length > 0) {
			self.newData.$translations.push({
				$uuid: helpers.uuid.generate(),
				$index: self.newData.$translations.length,
				$localeChoice: "",
				$localeValue: "",
				$links: {
					$delete: {
						$isHidden: true
					}
				},
				$properties: {
					$localeValue: {
						$isEditMode: false
					}
				}
			});
		}

		// === building localization page ===
		openerMenu.page.openDialog({
			$dialogMode: "modal",
			$itemPage: {
				$isEditMode: true,
				$urlParts: {
					$facet: "$localize"
				},
				$pageCategoryClass: LocalizationPage,
				$representation: {
					$prototype: {
						$properties: {
							$translations: {
								$type: "application/x-array",
								$capabilities: "delete",
								$item: {
									$properties: {
										$localeChoice: {
											$type: "application/x-choice",
											$title: document.site.localize.lPageLocale,
											$value: {
												$type: "application/x-integer",
												$enum: $enum
											}
										},
										$localeValue: {
											$type: "application/x-string",
											$title: document.site.localize.lPageField
										}
									}
								}
							}
						},
						$links: data.$links
					},
					$article: {
						$category: "page",
						$title: document.site.localize.lPageTitle,
						$layout: {
							$items: [{
								$format: "cards",
								$skin: "s-localization-page-skin",
								$isTitleHidden: true,
								$isPagerHidden: true,
								$isQuickDesignerEnabled: false,
								$bind: "$translations",
								$skinCard: "s-localization-page-cards",
								$layout: {
									$items: [{
										$layoutType: "row",
										"$isFixedWidth": true,
										"$widths": "250,*",
										$items: [{
											$bind: "$localeChoice",
											$format: "$combo",
											$isTitleHidden: true,
											$title: document.site.localize.lPageLocaleTitle,
											$isPlaceHolder: true,
											$icon: {
												$mode: "iconText",
												$path: "flags_iso/"
											}
										}, {
											$bind: "$localeValue",
											$isTitleHidden: true
										}]
									}]
								}
							}]
						}
					}
				},
				onAfterLoadPage: function(page) {
					page.enumLocaleData = self.enumLocaleData; //enumLocale, enumLocaleSet, enumLocaleUnset
					page.$values = self.$values;
					page.valuesCount = page.$values.length;
					page.applyChange(self.newData);
					self.dispose();
				}
			},
			onValidate: function(page) {
				page.validateFields();
				page.onSave();
			},
			onClose: function(validated, dispose) {
				if (validated) {
					return true;
				}
				return false;
			}
		});
	},
	_isPayloadOk: function(data) {
		if (!data.$values) {
			this.showErrMsg(document.site.localize.lPageNoValues);
			return false;
		}
		if (!data.$links) {
			this.showErrMsg(document.site.localize.lPageNoLink);
			return false;
		} else {
			if (!data.$links.$save) {
				this.showErrMsg(document.site.localize.lPageNoLink);
				return false;
			}
		}
		return true;
	},
	showErrMsg: function(msg, item) {
		document.site.showDiagnoses({
			$diagnoses: [{
				$message: msg
			}]
		}, item);
	},
	dispose: function() {
		this.newData = this.$values = this.enumLocaleData = null;
	}
});