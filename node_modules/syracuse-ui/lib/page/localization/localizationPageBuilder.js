"use strict";
var helpers = require('syracuse-core/lib/helpers');
var localizationPagePrototype = require("./setting/localizationPagePrototype");
var localizationPageArticle = require("./setting/localizationPageArticle");
var LocalizationPage = require('syracuse-ui/lib/page/localization/localizationPage').LocalizationPage;

function LocalizationPageBuilder() {}

exports.LocalizationPageBuilder = helpers.defineClass(LocalizationPageBuilder, null, {
	loadLocalizationPage: function(menu) {
		var self = this;
		var lPage;

		var reqOpt = {
			method: "GET",
			$location: {
				$url: menu.$url
			}
		};

		// getting localization payload
		document.controller.sendRequest(null, reqOpt, function(data, response, $url) {
			if (lPage = self._createPage(data)) {
				menu.boxParent.openDialog({
					article: menu.articleParent,
					page: lPage
				});
				lPage.setData(self);
				lPage.applyChange(lPage.newData);
			}
		}, function(error, httpquery) {
			var $diagnoses;
			if (error.data.indexOf("$diagnoses") != -1) {
				$diagnoses = JSON.parse(error.data).$diagnoses;
			} else {
				$diagnoses = [{
					$severity: "error",
					$message: error.data
				}];
			}
			document.site.showDiagnoses({
				$diagnoses: $diagnoses
			});
		});
	},
	_createPage: function(data) {
		this.newData = {
			$translations: []
		};
		var $enum = [];
		this.enumLocale = {};
		this.enumLocaleSet = {};
		this.enumLocaleUnset = {};
		this.enumLocaleData = {
			enumLocale: this.enumLocale,
			enumLocaleSet: this.enumLocaleSet,
			enumLocaleUnset: this.enumLocaleUnset
		};

		// === building locale enum data & newData object ===
		// is payload ok ?
		if (!this._isPayloadOk(data)) {
			return false;
		}

		// payload ok
		this.$values = data.$values;
		for (var ii = 0; ii < this.$values.length; ii++) {
			if (this.$values[ii].$value) {
				// add record data
				this.newData.$translations.push({
					$uuid: helpers.uuid.generate(),
					$index: ii,
					$localeChoice: this.$values[ii].$locale,
					$localeValue: this.$values[ii].$value,
					$properties: {
						$localeChoice: {
							$isReadOnly: true
						}
					}
				});

				// for locale with value
				this.enumLocaleSet[this.$values[ii].$locale] = {
					$title: this.$values[ii].$title
				};
			} else {
				// for locale without value
				this.enumLocaleUnset[this.$values[ii].$locale] = {
					$title: this.$values[ii].$title
				};
			}

			$enum.push({
				$value: this.$values[ii].$locale,
				$title: this.$values[ii].$title
			});

			this.enumLocale[this.$values[ii].$locale] = {
				$index: ii,
				$title: this.$values[ii].$title
			};
		}

		// add new empty row only if enumLocaleUnset unempty
		if (Object.keys(this.enumLocaleUnset).length > 0) {
			this.newData.$translations.push({
				$uuid: helpers.uuid.generate(),
				$index: this.newData.$translations.length,
				$localeChoice: "",
				$localeValue: "",
				$links: {
					$delete: {
						$isHidden: true
					}
				},
				$properties: {
					$localeValue: {
						$isEditMode: false
					}
				}
			});
		}


		// === building localization page ===
		var layoutSlot = document.createElement("div");
		layoutSlot.className = "s-localization-page s-modal-page-container";
		var $itemPage = {
			$isEditMode: true,
			layoutSlot: layoutSlot,
			$urlParts: {
				$facet: "$localize"
			},
			$pageCategoryClass: LocalizationPage,
			$representation: {
				$prototype: localizationPagePrototype.getPrototype(),
				$article: localizationPageArticle.getItem()
			}
		};
		$itemPage.$representation.$prototype.$properties.$translations.$item.$properties.$localeChoice.$value.$enum = $enum;
		$itemPage.$representation.$prototype.$links = data.$links;

		return document.site.loadNewPage($itemPage);
	},
	_isPayloadOk: function(data) {
		if (!data.$values) {
			this.showErrMsg(document.site.localize.lPageNoValues);
			return false;
		}
		if (!data.$links) {
			this.showErrMsg(document.site.localize.lPageNoLink);
			return false;
		} else {
			if (!data.$links.$save) {
				this.showErrMsg(document.site.localize.lPageNoLink);
				return false;
			}
		}
		return true;
	},
	showErrMsg: function(msg, item) {
		document.site.showDiagnoses({
			$diagnoses: [{
				$message: msg
			}]
		}, item);
	},
	getEnumLocaleData: function() {
		return this.enumLocaleData;
	},
	getValues: function() {
		return this.$values;
	},
	getNewData: function() {
		return this.newData;
	},
	dispose: function() {
		this.newData = this.$values = this.enumLocaleData = null;
	}
});