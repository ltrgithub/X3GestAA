"use strict";

exports.autoScroll = function(scrollViewRect, event) {
	var step = 40,
		margin = 80;
	if (event.pageY > (scrollViewRect.bottom - margin)) {
		var scrollTop = scrollViewRect.item.scrollTop;
		if (scrollTop < (scrollViewRect.scrollHeight - scrollViewRect.height)) {
			scrollViewRect.item.scrollTop = Math.min(scrollTop + step, scrollViewRect.scrollHeight - scrollViewRect.height);
		}
	} else {
		if (event.pageY < (scrollViewRect.top + margin)) {
			var scrollTop = scrollViewRect.item.scrollTop;
			scrollViewRect.item.scrollTop = Math.max(scrollTop - step, 0);
		}
	}
	if (event.pageX > (scrollViewRect.right - margin)) {
		var scrollLeft = scrollViewRect.item.scrollLeft;
		if (scrollLeft < (scrollViewRect.scrollWidth - scrollViewRect.width)) {
			scrollViewRect.item.scrollLeft = Math.min(scrollLeft + step, scrollViewRect.scrollWidth - scrollViewRect.width);
		}
	} else {
		if (event.pageX < (scrollViewRect.left + margin)) {
			var scrollLeft = scrollViewRect.item.scrollLeft;
			scrollViewRect.item.scrollLeft = Math.max(scrollLeft - step, 0);
		}
	}
};



exports.showBreadCrumb = function(page) {

	function getDotItem(breadCrumbSlot) {
		var middle = -1;
		var sizeBC = 0;
		for (var i = 0; i < breadCrumbSlot.childNodes.length; i++) {
			var item = breadCrumbSlot.childNodes.item(i);
			sizeBC += item.scrollWidth;
			if (item.firstChild.textContent.indexOf("...") === 0) {
				middle = i; // identify the middle
			}
		};
		if (middle === -1) {
			middle = Math.floor(breadCrumbSlot.childNodes.length / 2);
		}
		return {
			middle: middle,
			size: sizeBC
		};
	}

	function addItem(value, i, length) {
		item = document.createElement("div");
		item.className = page.$skin + "-breadcrumb-item";
		item.textContent = value;

		var child;
		if (i === length - 1) {
			child = document.createElement("span");
			child.className = "s-page-breadcrumb-close";
		} else {

			child = document.createElement("span");
			child.className = "s-page-breadcrumb-item s-fonticon-btn";

			child.innerHTML = syra_site.isDocumentRTL ? syra_menus.fontIcons["filter_lt"] : syra_menus.fontIcons["filter_gt"];
		}
		item.appendChild(child);

		return item;
	}
	if (page.$facet !== "$modal2") {
		if (page.breadCrumbSlot) page.breadCrumbSlot.textContent = "";
		var breadCrumbSlot = document.createElement("div");
		var arr = [];
		if (page.$breadCrumb && page.$breadCrumb.length > 0) {

			var item, breadLink;


			for (var ii = 0, jj = page.$breadCrumb.length - 1; ii <= jj; ii++) {
				var item = addItem(page.$breadCrumb[ii].title, ii, page.$breadCrumb.length);
				breadCrumbSlot.appendChild(item);
			}
			// check total length of breadCrumbSlot
			page.breadCrumbSlot.appendChild(breadCrumbSlot);
			// check the size of breadCrumBSlot depending of the size of the page

			var dotItem = getDotItem(breadCrumbSlot);
			var sizeBC = dotItem.size;
			var middle = dotItem.middle;

			var setDot = false;
			// still continu if the size if bigger that page size and if the middle of the BC is 1 and already contains "..." string
			while (page.scrollview.scrollWidth < sizeBC && (breadCrumbSlot.childNodes.length > 3 || !setDot)) {
				var lnMax = breadCrumbSlot.childNodes.length - 1;
				// set ... for the middle one
				if (setDot) { // if it's already set ... we have to remove the previous one of the next one
					if (breadCrumbSlot.childNodes.length % 2) { // try to remove on the left but on the right if it's not working
						middle - 1 > 0 ? breadCrumbSlot.removeChild(breadCrumbSlot.childNodes[middle - 1]) : middle + 1 < lnMax && breadCrumbSlot.removeChild(breadCrumbSlot.childNodes[middle + 1]);
					} else { // try to remove on te right but on te left if it's not possible
						middle + 1 < lnMax ? breadCrumbSlot.removeChild(breadCrumbSlot.childNodes[middle + 1]) : middle - 1 > 0 && breadCrumbSlot.removeChild(breadCrumbSlot.childNodes[middle - 1]);
					}
				} else {
					breadCrumbSlot.childNodes[middle].firstChild.textContent = "...";
					setDot = true;
				}
				// find the one that contain ... or take te middle
				dotItem = getDotItem(breadCrumbSlot);
				sizeBC = dotItem.size;
				middle = dotItem.middle;
			}
		}
	}
};

exports.getDefinedFieldBinds = function($items, $binds) {
	$binds = $binds || [];
	if ($items) {
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			if ($item.$bind) {
				$binds.push($item.$bind);
			} else {
				if ($item.$items) {
					$binds = exports.getDefinedFieldBinds($item.$items, $binds);
				}
				if ($item.$layout && $item.$layout.$items) {
					$binds = exports.getDefinedFieldBinds($item.$layout.$items, $binds);
				}
			}
		}
	}
	return $binds;
};


exports.getDefinedFieldList = function($items, $list) {
	if (!$list) {
		$list = [];
	}
	if ($items) {
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			if ($item.$bind) {
				$list.push($item);
			} else {
				if ($item.$items) {
					$list = exports.getDefinedFieldList($item.$items, $list);
				}
				if ($item.$layout && $item.$layout.$items) {
					$list = exports.getDefinedFieldList($item.$layout.$items, $list);
				}
			}
		}
	}
	return $list;
};