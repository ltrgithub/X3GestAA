"use strict";
exports.tempautoAddCubeFields = function(page) {
	var $fields = {}, $cubeField;
	var binds = Object.keys(page.$prototype.$properties);
	for (var ii = 0, jj = binds.length; ii < jj; ii++) {
		var $field = page.$prototype.$properties[binds[ii]];
		if ($field && !$field.$isExcluded) {
			if ($field.type != "application/x-array") {
				$cubeField = binds[ii];
			}
			$fields[binds[ii]] = $field;
		}
	}
	var $binds = Object.keys($fields);
	if ($cubeField && $binds.length) {
		var $items = syra_site.layoutUpdater.getItemSettings(page, null, true) || [];
		var definedBinds = {};
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			if ($items[ii].$bind) {
				definedBinds[$items[ii].$bind] = $items[ii];
			}
		}
		//add date
		var $items = [];
		for (var ii = 0; ii <= 10; ii++) {
			var start = "datstart" + ii;
			if ($fields[start]) {
				var end = "datend" + ii;
				$items.push({
					$layoutType: "row",
					$items: [definedBinds[start] || {
							$bind: start
						},
						definedBinds[end] || {
							$bind: end
						}
					]
				});
				delete $fields[start];
				delete $fields[end];
			}
		}
		$binds = Object.keys($fields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			$items.push(definedBinds[$binds[ii]] || {
				$bind: $binds[ii]
			});
		}
		page.$item.$layout = {
			$items: [{
				$category: "section",
				$layout: {
					$items: [{
						$category: "section",
						$layout: {
							$items: $items
						}
					}]
				}
			}]
		};
	}
};

function _findPrototypeFromRepository(page, $prototype) {
	if ($prototype) {
		if (!$prototype.$properties) {
			if ($prototype.$item) {
				$prototype.$item = _findPrototypeFromRepository(page, $prototype.$item);
			} else {
				if ($prototype.$type == "application/x-pointer" && $prototype.$prototype) {
					var index = $prototype.$prototype.indexOf("#");
					if (index >= 0) {
						$prototype = page.$prototypeRepository[$prototype.$prototype.slice(index + 1)];
					}
				}
			}
		}
	}
	return $prototype;
}

exports.addPrototypeToRepository = function(page, $prototype) {
	if ($prototype) {
		if ($prototype.$id) {
			page.$prototypeRepository = page.$prototypeRepository || {};
			page.$prototypeRepository[$prototype.$id] = $prototype;
		}
		if ($prototype.$item && $prototype.$item.$id) {
			exports.addPrototypeToRepository(page, $prototype.$item);
		}
		return _findPrototypeFromRepository(page, $prototype);
	}
};


exports.autoScroll = function(scrollViewRect, event) {
	var step = 40,
		margin = 80;
	if (event.pageY > (scrollViewRect.bottom - margin)) {
		var scrollTop = scrollViewRect.item.scrollTop;
		if (scrollTop < (scrollViewRect.scrollHeight - scrollViewRect.height)) {
			scrollViewRect.item.scrollTop = Math.min(scrollTop + step, scrollViewRect.scrollHeight - scrollViewRect.height);
		}
	} else {
		if (event.pageY < (scrollViewRect.top + margin)) {
			var scrollTop = scrollViewRect.item.scrollTop;
			scrollViewRect.item.scrollTop = Math.max(scrollTop - step, 0);
		}
	}
	if (event.pageX > (scrollViewRect.right - margin)) {
		var scrollLeft = scrollViewRect.item.scrollLeft;
		if (scrollLeft < (scrollViewRect.scrollWidth - scrollViewRect.width)) {
			scrollViewRect.item.scrollLeft = Math.min(scrollLeft + step, scrollViewRect.scrollWidth - scrollViewRect.width);
		}
	} else {
		if (event.pageX < (scrollViewRect.left + margin)) {
			var scrollLeft = scrollViewRect.item.scrollLeft;
			scrollViewRect.item.scrollLeft = Math.max(scrollLeft - step, 0);
		}
	}
};

exports.scrollToItem = function(page, item, area, isDomItem) {
	if (!isDomItem) {
		var masterPage = item.page.getMasterPage();
		if (masterPage != page) {
			exports.scrollToItem(masterPage, item, area, isDomItem);
			return;
		}
	}
	if (item == page) {
		if (page.scrollview) {
			page.scrollview.scrollTop = page.scrollview.scrollLeft = "0px";
		}
	} else {
		var target;
		area = area || page.scrollview || syra_site.body;
		if (isDomItem) {
			target = item;
		} else {
			var parent = item;
			while (parent) {
				if (parent.tabTitle && !parent.$opened) {
					parent.layoutParent.openTab(parent);
				}
				parent = parent.boxParent;
			}
			if (item && (item.tabTitle || item.domItem)) {
				target = item.tabTitle || item.domItem;
			}
		}
		if (target) {
			var targetRect = syra_site.dom.getBoundingClientRect(target);
			var areaRect = syra_site.dom.getBoundingClientRect(area);
			if (targetRect.top < areaRect.top) {
				//target is above area
				area.scrollTop -= ((areaRect.top - targetRect.top) + (areaRect.height > 20 ? 20 : 0));
			} else {
				if (targetRect.top > areaRect.bottom || targetRect.bottom > areaRect.bottom) {
					var diff = areaRect.height - targetRect.height;
					if (diff > 0) {
						area.scrollTop += (targetRect.bottom - areaRect.bottom) + Math.min(20, diff);
					} else {
						//ensure top is visible
						if (targetRect.top > areaRect.bottom) {
							area.scrollTop = 0;
						} else {
							diff = areaRect.bottom - targetRect.top;
							if (diff < 20) {
								area.scrollTop -= (20 - diff);
							}
						}
					}
				}
			}
			if (targetRect.left < areaRect.left) {
				//target is left  area
				area.scrollLeft -= ((areaRect.left - targetRect.left) + (areaRect.width > 20 ? 20 : 0));
			} else {
				if (targetRect.left > areaRect.right || targetRect.right > areaRect.right) {
					var diff = areaRect.width - targetRect.width;
					if (diff > 0) {
						area.scrollLeft += (targetRect.right - areaRect.right) + Math.min(20, diff);
					} else {
						if (targetRect.left > areaRect.right) {
							area.scrollLeft = 0;
						} else {
							diff = areaRect.right - targetRect.left;
							if (diff < 20) {
								area.scrollLeft -= (20 - diff);
							}
						}
					}
				}
			}
		}
	}
};


exports.addFooter = function(page) {
	if (!page.isFooterDisabled && !page.dialogWrapper && !page.inlinePageHost && !page.isVignettePage && (page != syra_site.landingPageMaster)) {
		page.footer = document.createElement("footer");
		page.footer.className = "s-site-footer";
		page.siteLegalLink = syra_site.loadNewItem(page.footer, {
			$bind: "$legal",
			$category: "link",
			$skin: "s-site-footer-legal-link"
		}, syra_site);
		page.scrollview.appendChild(page.footer);
	}
};

exports.showBreadCrumb = function(page) {
	if (page.$breadCrumb && page.$breadCrumb.length > 0) {
		if (!page.breadCrumbSlot) {
			page.breadCrumbSlot = document.createElement("div");
			page.breadCrumbSlot.className = page.$skin + "-head-breadcrumb";
			page.breadCrumbSlot.syraItem = page.id;
			page.securityViewSlot.parentNode.insertBefore(page.breadCrumbSlot, page.securityViewSlot.nextSibling);
		}
		var item, breadLink;
		for (var ii = 0, jj = page.$breadCrumb.length - 1; ii <= jj; ii++) {
			item = document.createElement("div");
			item.className = page.$skin + "-breadcrumb-item";
			item.textContent = page.$breadCrumb[ii];
			var child;
			if (ii == jj) {
				child = syra_menus.addIconButton("", page.$skin + "-breadcrumb-close", "onBreadcrumbClick");
			} else {
				child = document.createElement("div");
				child.className = "s-page-breadcrumb-between";
			}
			if (syra_site.isDocumentRTL) {
				child.className += " s-rtl-img";
			}
			item.appendChild(child);
			page.breadCrumbSlot.appendChild(item);
		}
	}
};

function _onScrollView(page) {
	if (page._scrollViewListeners) {
		for (var ii = 0, jj = page._scrollViewListeners.length; ii < jj; ii++) {
			if (page._scrollViewListeners[ii]) {
				page._scrollViewListeners[ii].onPageScrollViewChange();
			}
		}
	}
	if (page.isNavigationPage && sessionStorage) {
		if (!page.scrollTimeoutNav) {
			page.scrollTimeoutNav = setTimeout(function() {
				page.scrollTimeoutNav = null;
				if (page.scrollview) {
					sessionStorage.setItem("navigationPage" + page.isAdminMode ? "1" : "0", JSON.stringify({
						scrollLeft: page.scrollview.scrollLeft,
						scrollTop: page.scrollview.scrollTop
					}));
				}
			}, 1000);
		}
	}
};


exports.addScrollViewListener = function(page, listener) {
	(page._scrollViewListeners = page._scrollViewListeners || []).push(listener);

};
exports.removeScrollViewListener = function(page, listener) {
	if (page) {
		var found = page._scrollViewListeners && page._scrollViewListeners.indexOf(listener);
		if (found >= 0) {
			page._scrollViewListeners.splice(found, 1);
		}
	}
};
exports.bindScrollView = function(page, bind) {
	if (bind) {
		page.scrollHandler = page.scrollview.addEventListener("scroll", function(event) {
			if (!syra_site.isInoutDisabled && page.isPageLoaded && !page._isDataChanging) {
				if (!page.scrollTimeout) {
					//syra_site.dialogManager.closePopups(page);
					page.scrollTimeout = setTimeout(function() {
						page.scrollTimeout = null;
						_onScrollView(page);
					}, 100);
				}
			}
			event.stopPropagation();
		}, false);
	} else {
		if (page.scrollview) {
			page.scrollTimeout && clearTimeout(page.scrollTimeout);
			page.scrollview.removeEventListener("scroll", page.scrollHandler);
		}
	}
};


exports.getDefinedFieldBinds = function($items, $binds) {
	$binds = $binds || [];
	if ($items) {
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			if ($item.$bind) {
				$binds.push($item.$bind);
			} else {
				if ($item.$items) {
					$binds = exports.getDefinedFieldBinds($item.$items, $binds);
				}
				if ($item.$layout && $item.$layout.$items) {
					$binds = exports.getDefinedFieldBinds($item.$layout.$items, $binds);
				}
			}
		}
	}
	return $binds;
};


exports.getDefinedFieldList = function($items, $list) {
	if (!$list) {
		$list = [];
	}
	if ($items) {
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			if ($item.$bind) {
				$list.push($item);
			} else {
				if ($item.$items) {
					$list = exports.getDefinedFieldList($item.$items, $list);
				}
				if ($item.$layout && $item.$layout.$items) {
					$list = exports.getDefinedFieldList($item.$layout.$items, $list);
				}
			}
		}
	}
	return $list;
};