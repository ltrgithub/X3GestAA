"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('./rawPage').RawPage;
var locale = require('syracuse-core/lib/locale');
var MenuBar = require('./menuBar').MenuBar;
var DiagnosesPanel = require('syracuse-ui/lib/diagnoses/diagnosesPanel').DiagnosesPanel;

function DesktopPage(){
}

exports.DesktopPage = helpers.defineClass(DesktopPage, RawPage, {

    getDefaultTitle: function(){
        return this._defaultTitle;
    },
    loadBox: function(initData){
        var localize = locale.resources(module)();
        switch (this.$pageCategory) {
            case "lookup":
                this.isTitleSectionHidden = true;
                this.$skin = this.$item.$skin || "s-page";
                this._defaultTitle = localize.p_pageTitle;
                this.$isSearchFacetEnabled = this.$isSearchFacetEnabled !== false;
                break;
            case "dashboard":
                this.$skin = this.$item.$skin || "s-dash";
                this.$defaultSkinBlock = "s-dash-h2";
                this.$defaultSkinSection = "s-dash-h1";
                this._defaultTitle = localize.p_dashboardTitle;
                this.$authoringSubType = "dashboard";
                this.$isSearchFacetEnabled = false;
                this.$autoFetch = false;
                break;
            case "portlet":
            case "vignette":
                this.$skin = this.$item.$skin || "s-vignette";
                this.$defaultSkinMenu = "s-vignette-menus";
                this.$defaultSkinBlock = "s-h2";
                this.$defaultSkinSection = "s-h2";
                this.$pageCategory = "vignette";
                this.$skinMainAction = "s-vignette-main-link";
                this._defaultTitle = localize.p_vignetteTitle;
                if (this.$facet == "$demo") {
                    this.$autoFetch = false;
                }
                this.$isSearchFacetEnabled = false;
                this.$item.$isTitleHidden = true;
                this.$isResizeEnabled = false;
                break;
            default:
                this.$skin = this.$item.$skin || "s-page";
                this._defaultTitle = localize.p_pageTitle;
                this.$isSearchFacetEnabled = this.$isSearchFacetEnabled !== false;
                break;
        }
        RawPage.prototype.loadBox.call(this, initData);
    },
    onWindowResize: function(){
        if (this._body.clientWidth) {
            if (document.site.body.clientWidth <= 900) {
                this.isAutoFloat = true;
                if (this.menuBar) {
                    if (this.menuBar.preferences.menuBar.isDocked) {
                        this.menuBar.preferences.menuBar.isDocked = false;
                        this.menuBar.preferences.menuBar.isCollapsed = true;
                        this.menuBar.ensureState();
                    }
                }
                if (this.fusionBar) {
                    if (this.fusionBar.preferences.convergenceBar.isDocked) {
                        this.fusionBar.preferences.convergenceBar.isDocked = false;
                        this.fusionBar.preferences.convergenceBar.isCollapsed = true;
                        this.fusionBar.ensureState();
                    }
                }
            }
            else {
                if (this.isAutoFloat) {
                    this.isAutoFloat = false;
                    if (this.menuBar) {
                        this.menuBar.preferences.menuBar.isDocked = true;
                        this.menuBar.preferences.menuBar.isCollapsed = false;
                        this.menuBar.ensureState();
                    }
                    if (this.fusionBar) {
                        this.fusionBar.preferences.convergenceBar.isDocked = true;
                        this.fusionBar.preferences.convergenceBar.isCollapsed = false;
                        this.fusionBar.ensureState();
                    }
                }
            }
            if (this.menuBar) {
                this.menuBar.onWindowResize();
            }
            if (this.fusionBar) {
                this.fusionBar.onWindowResize();
            }
            
        }
        this.fitPageToContainer();
        RawPage.prototype.onWindowResize.call(this);
    },
    fitPageToContainer: function(){
        if (this.$isResizeEnabled !== false) {
            var height = document.site.$$body.height();
            this._item.style.height = height + "px";
            this.scrollview.style.height = (height - this._$$diagnoseSlot.outerHeight(true)) + "px";
            if (this.authoringContentView) {
                this.authoringContentView.style.height = (height - this.authoringContentView.offsetTop) + "px";
            }
        }
    },
    setDescription: function($description){
        if ($description) {
            if (!this.domDescription) {
                this.domDescription = document.createElement("div");
                this.domDescription.className = this.$skin + "-description";
                this._headerDescription.appendChild(this.domDescription);
            }
            if ($description.indexOf("{") < 0) {
                this.domDescription.textContent = $description;
            }
            else {
                this.renderExpression($description, this.domDescription, this.$skin + "-description-field", false);
            }
        }
    },
    notifyDataChange: function(field, value){
        if (field.$item.$bind == "$pageVariantSelector") {
            var self = this;
            if (value !== this._$selectedVariantView) {
                delete self.dataset.$pageVariantSelector;
                var query = document.controller.parseUrl(self.$views[value].$url);
                query.sendRequest({}, function(data, response, requestUrl){
                    if (data.$prototype) {
                        setTimeout(function(){
                            if (response.data.$prototype) {
                                response.data.$prototype.$representationUrl = self.$prototype.$representationUrl;
                            }
                            var $itemPage = {
                                layoutSlot: self.layoutSlot,
                                $category: self.$pageCategory,
                                $urlParts: self.$urlParts,
                                $representation: response.data,
                                httpQuery: self.openerHttpQuery
                            };
                            document.site.onMainPageChange($itemPage);
                        }, 100);
                    }
                    else {
                        if (data.$authorUrl) {
                            self.$authorUrl = data.$authorUrl;
                        }
                        if (data.$article) {
                            self.reloadLayout(data.$article);
                        }
                        self.showVariantSelector(data.$views || self.$views);
                    }
                });
            }
            return;
        }
        RawPage.prototype.notifyDataChange.call(this, field, value);
    },showVariantSelector: function($views){
        document.site.emptyDom(this._headerVariants);
        if ($views && $views.length > 1) {
            var $enums = [];
            this._$selectedVariantView = null;
            for (var ii = 0, jj = $views.length; ii < jj; ii++) {
                var $view = $views[ii];
                $enums.push({
                    $value: ii,
                    $title: $view.$title || "view"
                });
                if ($view.$selected) {
                    this._$selectedVariantView = ii;
                }
            }
            this.$prototype.$properties.$pageVariantSelector = {
                $type: "application/x-choice",
                $value: {
                    $type: "application/x-string",
                    $enum: $enums
                }
            };
            this.loadNewItem(this._headerVariants, {
                $bind: "$pageVariantSelector",
                $title: locale.resources(module)().p_viewVariant,
                $isTopLabelAlignment: false,
                $format: "$combo",
                $skin: "s-page-variant",
                $isEditMode: $views.length > 0
            }, this);
            this.applyChange({
                $pageVariantSelector: this._$selectedVariantView
            });
        }
    },
    appendHeader: function(){
        this._header = document.createElement("header");
        this._header.className = this.$skin + "-head";
        this._header.style.display = "none";
        this.scrollview.appendChild(this._header);
        this._headerCore = document.createElement("div");
        this._headerCore.className = this.$skin + "-head-core";
        this._headerCore.appendChild(this._createBoxTitle());
        this.setTitle(this.$item.$title || (this.$field ? this.$field.$title : null));
        this.securityViewSlot = document.createElement("div");
        this.securityViewSlot.className = this.$skin + "-security-view-slot";
        this.securityViewSlot.style.display = "none";
        this._headerCore.appendChild(this.securityViewSlot);
        this._header.appendChild(this._headerCore);
        this._headerDescription = document.createElement("div");
        this._headerDescription.className = this.$skin + "-head-desc";
        this.setDescription(this.$prototype.$description || this.$item.$description);
        this._header.appendChild(this._headerDescription);
        
        this._headerFoooter = document.createElement("div");
        this._headerFoooter.className = this.$skin + "-head-footer";
        this._headerNav = document.createElement("div");
        this._headerNav.className = this.$skin + "-head-footer-nav";
        this._headerFoooter.appendChild(this._headerNav);
        this._headerVariants = document.createElement("div");
        this._headerVariants.className = this.$skin + "-head-footer-variants";
        if (this.$views) {
            this.showVariantSelector(this.$views);
        }
        this._headerFoooter.appendChild(this._headerVariants);
        this._header.appendChild(this._headerFoooter);
        
    },
    showDiagnoses: function(message, options){
        if (!this.diagnosesPanel) {
            if (this.$pageCategory == "dashboard" || this.$pageCategory == "page" || this.$pageCategory == "fusion") {
                this.diagnosesPanel = new DiagnosesPanel();
                this.diagnosesPanel.appendToPage(this);
            }
        }
        if (this.diagnosesPanel) {
            this.diagnosesPanel.showDiagnoses(message, this, options);
        }
    },
    drawBox: function(){
        this.$item.$title = this.$item.$title || "{$title}";
        this._item = document.createElement("article");
        this._item.className = this.$skin;
        this.$$item = $(this.layoutSlot.appendChild(this._item));
        
        this.dataSlot = document.createElement("div");
        this.dataSlot.className = this.$skin + "-data";
        this._$$dataSlot = $(this.dataSlot);
        this._item.appendChild(this.dataSlot);
        
        this.diagnoseSlot = document.createElement("div");
        this.diagnoseSlot.className = this.$skin + "-diag-slot";
        this._$$diagnoseSlot = $(this.diagnoseSlot);
        
        this.scrollview = document.createElement("div");
        this.scrollview.className = this.$skin + "-scrollview";
        this.$$scrollview = $(this.scrollview);
        
        this.$$body = $(this._body = document.createElement("div"));
        this.appendHeader();
        this.ensureLayoutMode();
        this.scrollview.appendChild(this._body);
        this.dataSlot.appendChild(this.diagnoseSlot);
        this.dataSlot.appendChild(this.scrollview);
        this.fitPageToContainer();
        this._renderLayoutContent();
        this._ensureMenus();
    },
    _ensureMenus: function(){
        if (this.$pageCategory == "vignette") {
            DesktopPage.prototype.appendArticleMenus.call(this);
        }
        else {
            this.menuBar = new MenuBar();
            this.menuBar.load(this);
        }
        if (this.menuBar && this.menuBar._bar && this.$isSearchFacetEnabled) {
            this.loadNewItem(this.menuBar._bar, {
                $category: "searchFacets",
                $prototype: {},
                $bind: "$searchFacets"
            });
        }
    },
    appendArticleMenus: function(slot){
        if (this.$facet == "$details" || this.$facet == "$edit") {
            var localize = locale.resources(module)();
            document.site.emptyDom(this._headerNav);
            this._menusPager = this.loadNewItem(this._headerNav, {
                $skin: "s-page-pager",
                $category: "menus",
                $itemIcon: {
                    $mode: "iconText",
                    $path: "site/s-record-"
                },
                $layout: {
                    $fitToContent: true,
                    $layoutType: "row",
                    $items: [{
                        $bind: "$first",
                        $title: localize.p_firstRecord
                    }, {
                        $bind: "$previous",
                        $title: localize.p_previousRecord
                    }, {
                        $bind: "$lookup"
                    }, {
                        $bind: "$next",
                        $title: localize.p_nextRecord
                    }, {
                        $bind: "$last",
                        $title: localize.p_lastRecord
                    }]
                }
            });
        }
        RawPage.prototype.appendArticleMenus.call(this, slot);
    },
    onMenuDataFilled: function(menuItem){
        if (this.menuBar) {
            this.menuBar.onMenuDataFilled(menuItem);
        }
        else {
            RawPage.prototype.onMenuDataFilled.call(this);
        }
    },
    diposeContent: function(){
        RawPage.prototype.diposeContent.call(this);
        document.site.emptyDom(this._body);
        this.loaded = false;
        this.boundFields = {};
        this.layouts = {};
        this.idMap = {};
        this.menuItems = {};
        this.menuBoxes = [];
        if (this.menuBar) {
            if (this.menuBar._slot) {
                document.site.removeDomChild(this.menuBar._slot);
            }
            this.menuBar.dispose();
        }
        if (this.diagnosesPanel) {
            document.controller.disposeObject(this.diagnosesPanel);
            document.site.emptyDom(this.diagnoseSlot);
        }
        this.diagnosesPanel = this.menuBar = null;
    },
    reloadLayout: function($item){
        this.diposeContent();
        this.$item = $item;
        this.$menus = {};
        this._ensureMenus();
        this.applyActionLinkChange(this.$prototype);
        this.applyActionLinkChange(this.dataset);
        this.openBox(true);
    },
    addMenuItem: function($menus, groupId){
        var group;
        if (groupId) {
            group = this.idMap[groupId];
            if (group) {
                if ($menus.$links) {
                    Object.keys($menus.$links).map(function($bind){
                        group.addMenuItem({
                            $bind: $bind,
                            $icon: $menus.$links[$bind].$icon
                        });
                    });
                }
                if ($menus.$actions) {
                    Object.keys($menus.$actions).map(function($bind){
                        group.addMenuItem({
                            $bind: $bind,
                            $isAction: true
                        }, true);
                    });
                }
            }
        }
        this.applyActionLinkChange($menus);
    },
    dispose: function(){
        if (document.site.authorPage && document.site.authorPage.targetPage == this) {
            document.site.openAuthoringPage(false);
        }
        if (this.menuBar) {
            this.menuBar.dispose();
        }
        if (this.diagnosesPanel) {
            document.controller.disposeObject(this.diagnosesPanel);
        }
        this._$$diagnoseSlot = this._$$dataSlot = this.$$scrollview = this.scrollview = this.$menus = this.menuBar = this.diagnosesPanel = this._headerCore = this._headerDescription = null;
        RawPage.prototype.dispose.call(this);
    },
});
