"use strict";
var _helpers = require('syracuse-core/lib/helpers');
var RawPage = require('./rawPage').RawPage;
var FieldsGarbage = require('syracuse-ui/lib/article/fieldsGarbage').FieldsGarbage;


var _designerViewChoice = require('syracuse-ui/lib/authoring/designerViewChoice');

function DesktopPage() {}

exports.DesktopPage = _helpers.defineClass(DesktopPage, RawPage, {
	loadBox: function(initData) {
		this.isDesktopPage = true;
		if (this.$facet == "$cube") {
			syra_page.tempautoAddCubeFields(this);
		}
		switch (this.$pageCategory) {
			case "lookup":
				this.$skin = this.$item.$skin || "s-page";
				this._defaultTitle = syra_local.dskpPageTitle;
				break;
			default:
				this.$skin = this.$skin || this.$item.$skin || "s-page";
				if (this.inlinePageHost) {
					this.$skin = "s-inline-page " + this.$skin;
				}
				this._defaultTitle = this._defaultTitle || syra_local.dskpPageTitle;
				break;
		}
		var autoInsertFields = this.insertNewItems();
		RawPage.prototype.loadBox.call(this, initData);

		(this.garbage = new FieldsGarbage()).load(this);
		autoInsertFields && autoInsertFields.showDiagnoses();
	},
	resizeArticle: function(resize, boxParent) {
		if (this.displayed !== false && this.isPageLoaded && !this._isDataChanging) {
			delete this.scrollviewSize;
			var height;
			if (this.dialogWrapper) {
				if (!this.dialogWrapper.isOpened) {
					return;
				}
			} else {
				var isHFit = !this.inlinePageHost && !this.vignetteField;
				var slot = this.scrollContainer,
					diff = 0;
				if (this.vignetteField) {
					if (this.vignetteField.isMaximized) {
						slot = this.vignetteField.page.isLandingPage ? syra_site.body : this.vignetteField.page.layoutSlot;
						var rect = this.vignetteField.header.getBoundingClientRect();
						diff = rect.height + (2 * (rect.top - slot.getBoundingClientRect().top));
						isHFit = true;
					} else {
						if (this.scrollview.syraIsHFit) {
							//just after minimize  
							this.domItem.style.height = "";
							this.scrollview.style.height = "";
							this.body.style.minHeight = "";
							this.scrollview.syraIsHFit = false;
						}
					}
				}
				if (!slot) {
					slot = this.isLandingPage ? syra_site.body : this.layoutSlot;
				}
				if (isHFit) {
					height = this.barHeight = slot.getBoundingClientRect().height;
					this.domItem.style.height = height + "px";
					if (this.menuBar && !this.menuBar.isVertical) {
						height -= this.menuBar.slot.getBoundingClientRect().height;
					}
					var height = height - diff;
					this.scrollview.syraIsHFit = true;
					this.scrollview.style.height = (height - this.diagnoseSlot.getBoundingClientRect().height) + "px";
					if (this.footer) {
						this.body.syraMinHeight = (this.scrollview.clientHeight - this.header.getBoundingClientRect().height - this.footer.clientHeight);
						this.body.style.minHeight = this.body.syraMinHeight + "px";
					}
				}
			}
			syra_site.dialogManager.resizePositionedDialogs(this);
			this.designer && this.designer.resizeArticle(resize);
			this.setScrollViewPosition && this.setScrollViewPosition();
			this.resizeBars();
			RawPage.prototype.resizeArticle.call(this, resize, boxParent); //boxParent is set for landingpage
			if (this.dialogWrapper && this.dialogWrapper.isOpened) {
				this.dialogWrapper.resizeDialog();
			}
			this.inlinePageHost && this.inlinePageHost.onInlinePageResized(this);
			// breadcrumb displayed depending of the size of the windows
			// add breadcrumb if exists
			syra_page.showBreadCrumb(this);
		}
	},
	appendHeader: function() {
		this.header = document.createElement("header");
		this.header.className = this.$skin + "-head";
		this.header.style.display = "none";
		this.scrollview.appendChild(this.header);

		// breadcrumb
		var top = document.createElement("div");
		top.className = "s-page-head-top";
		this.breadCrumbSlot = document.createElement("div");
		this.breadCrumbSlot.className = "s-page-head-breadcrumb";
		this.breadCrumbSlot.syraItem = this.id;
		top.appendChild(this.breadCrumbSlot);
		this.securityViewSlot = document.createElement("div");
		this.securityViewSlot.className = "s-security-view-slot";
		top.appendChild(this.securityViewSlot);

		this.header.appendChild(top);
		this.header.appendChild(this._createBoxTitle());
		delete this.$item.$isTitleHidden;
		this.setTitle(this.$item.$title || (this.$field ? this.$field.$title : null));
		this.setDescription(this.$prototype.$description || this.$item.$description);
		_designerViewChoice.registerDesignViews(this);
	},
	drawBox: function() {
		this.$item.$title = this.$item.$title || "{$title}";
		this.domItem = document.createElement("article");
		this.domItem.className = this.$skin;
		this.domItem.syraPage = this.domItem.syraItem = this.id;
		this.layoutSlot.appendChild(this.domItem);

		this.diagnoseSlot = document.createElement("div");


		this.scrollview = document.createElement("div");
		this.scrollview.className = this.$skin + "-scrollview";


		this.body = document.createElement("div");
		this.appendHeader();
		this.ensureLayoutMode();
		this.scrollview.appendChild(this.body);
		syra_page.addFooter(this);
		this.domItem.appendChild(this.diagnoseSlot);
		this.domItem.appendChild(this.scrollview);
		this.ensureMenuBar();
		this.renderLayoutContent();
	}

});