"use strict";
var helpers = require('syracuse-core/lib/helpers');
var PageDesigner = require("syracuse-ui/lib/authoring/pageDesigner").PageDesigner;
var RawPage = require('./rawPage').RawPage;
var FieldsGarbage = require('syracuse-ui/lib/article/fieldsGarbage').FieldsGarbage;
var MenuBar = require('syracuse-ui/lib/page/bar/menuBar').MenuBar;
var PageViewSelector = require('./utility/pageViewSelector').PageViewSelector;
var advancedStateHelper = require('syracuse-ui/lib/field/helpers/advancedStateHelper');

function DesktopPage() {}

exports.DesktopPage = helpers.defineClass(DesktopPage, RawPage, {
	designArticle: function(open) {
		if (open) {
			this.designer = new PageDesigner();
			advancedStateHelper.toggleAllFields(this, true);
			this.designer.openDesigner(this);
		} else {
			if (this.designer) {
				this.page.showDiagnoses({
					$diagnoses: null
				});
				this.designer.dispose();
				advancedStateHelper.toggleAllFields(this);
			}
			this.designer = null;
		}
		this.resizeArticle(true);
	},
	_clearEmptySection: function(section) {
		if (section && section.page != section) {
			var boxParent = section.boxParent;
			var layoutParent = section.layoutParent;
			if (layoutParent) {
				layoutParent.removeItem(section, true);
			}
			if (!(boxParent.boxChildItems && boxParent.boxChildItems.length > 0) && !(boxParent.childrenSection && boxParent.childrenSection.length > 0)) {
				this._clearEmptySection(boxParent);
			}
		}
	},
	clearUnknowFields: function() {
		if (this.noProtoFields) {
			for (var ii = 0, jj = this.noProtoFields.length; ii < jj; ii++) {
				var field = this.noProtoFields[ii];
				var boxParent = field.boxParent;
				if (field.layoutParent) {
					field.layoutParent.removeItem(field, true);
				}
				if (boxParent) {
					if (!(boxParent.boxChildItems && boxParent.boxChildItems.length > 0) && !(boxParent.childrenSection && boxParent.childrenSection.length > 0)) {
						this._clearEmptySection(boxParent);
					}
				}
			}
			delete this.noProtoFields;
		}
	},
	getDefaultTitle: function() {
		return this._defaultTitle || "";
	},
	enableDesignerOpener: function() {
		if (this.mainPageDesignerAccess != "unknow") {
			var enabled = this.mainPageDesignerAccess != "disabled" && !(syra_site.userProfile.getAuthoringLevel() === "none");
			if (syra_site.pageDesignerOpener) {
				syra_site.pageDesignerOpener.style.visibility = enabled ? "" : "hidden";
			}
		}
	},
	tempautoAddCubeFields: function() {
		var $fields = {}, $cubeField;
		var binds = Object.keys(this.$prototype.$properties);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var $field = this.$prototype.$properties[binds[ii]];
			if ($field && !$field.$isExcluded) {
				if ($field.type != "application/x-array") {
					$cubeField = binds[ii];
				}
				$fields[binds[ii]] = $field;
			}
		}
		var $binds = Object.keys($fields);
		if ($cubeField && $binds.length) {
			var $items = syra_site.layoutUpdater.getItemSettings(this, null, true) || [];
			var definedBinds = {};
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				if ($items[ii].$bind) {
					definedBinds[$items[ii].$bind] = $items[ii];
				}
			}
			//add date
			var $items = [];
			for (var ii = 0; ii <= 10; ii++) {
				var start = "datstart" + ii;
				if ($fields[start]) {
					var end = "datend" + ii;
					$items.push({
						$layoutType: "row",
						$items: [definedBinds[start] || {
								$bind: start
							},
							definedBinds[end] || {
								$bind: end
							}
						]
					});
					delete $fields[start];
					delete $fields[end];
				}
			}
			$binds = Object.keys($fields);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				$items.push(definedBinds[$binds[ii]] || {
					$bind: $binds[ii]
				});
			}
			this.$item.$layout = {
				$items: [{
					$category: "section",
					$layout: {
						$items: [{
							$category: "section",
							$layout: {
								$items: $items
							}
						}]
					}
				}]
			};
		}
	},
	loadBox: function(initData) {
		this.isDesktopPage = true;
		this.menuBarPreferenceKey = this.menuBarPreferenceKey || "menubar";
		this.defaultItemsPerPage = this.defaultItemsPerPage || 50;
		if (this.$facet == "$cube") {
			this.tempautoAddCubeFields();
		}
		switch (this.$pageCategory) {
			case "lookup":
				this.$skin = this.$item.$skin || "s-page";
				this._defaultTitle = this.localize.dskpPageTitle;
				break;
			default:
				this.$skin = this.$skin || this.$item.$skin || "s-page";
				this._defaultTitle = this._defaultTitle || this.localize.dskpPageTitle;
				break;
		}
		var autoInsert = this.insertNewItems();
		RawPage.prototype.loadBox.call(this, initData);
		syra_site.pageLoader.showPageSecurity(this);
		this.enableDesignerOpener();
		this._showBreadCrumb();
		(this.garbage = new FieldsGarbage()).load(this);
		if (autoInsert) {
			autoInsert.showDiagnoses();
		}
	},
	getPageSlot: function() {
		return this.layoutSlot;
	},
	getScrollviewSize: function() {
		if (!this.scrollviewSize) {
			this.scrollviewSize = syra_site.dom.getBoundingClientRect(this.scrollview);
		}
		return this.scrollviewSize;
	},
	resizeArticle: function(resize, boxParent) {
		if (this.isPageLoaded && !this._isDataChanging) {
			delete this.scrollviewSize;
			var height;
			if (this.dialogWrapper) {
				if (!this.dialogWrapper.isOpened) {
					return;
				}
				this.dialogWrapper.resizeDialog();
			} else {
				if (!this.isFreeHeight) {
					height = this.barHeight = this.getPageSlot().getBoundingClientRect().height;
					this.domItem.style.height = height + "px";
					this.scrollview.style.height = (height - this.diagnoseSlot.getBoundingClientRect().height) + "px";
				}
			}
			syra_site.dialogManager.resizePositionedDialogs(this);
			if (this.dialogWrapper && this.dialogWrapper.isOpened) {
				RawPage.prototype.resizeArticle.call(this, resize);
				this.dialogWrapper.resizeDialog();
			} else {
				if (this.menuBar) {
					this.menuBar.onPageResize();
				}
				if (this.fusionBar) {
					this.fusionBar.onPageResize();
				}
				if (this.designer) {
					this.designer.resizeArticle(resize);
				}
				RawPage.prototype.resizeArticle.call(this, resize, boxParent); //boxParent is set for landingpage
			}
		}
	},
	setDescription: function($description) {
		if ($description) {
			var title = this.textTitle ? this.textTitle.textContent : null;
			if (title != $description) {
				if (!this.domDescription) {
					this.domDescription = document.createElement("div");
					this.domDescription.className = this.$skin + "-description";
					if (this.textTitle) {
						this.textTitle.parentNode.insertBefore(this.domDescription, this.textTitle.nextSibling);
					} else {
						this.headerCoreLeft.appendChild(this.domDescription);
					}
				}
				if ($description.indexOf("{") < 0) {
					this.domDescription.textContent = $description;
				} else {
					syra_site.expressionMaker.render(this, $description, this.domDescription, this.$skin + "-description-field", false);
				}
				if (title && title == this.domDescription.textContent) {
					this.domDescription.style.display = "none";
				}
			}
		}
	},
	appendHeader: function() {
		this.header = document.createElement("header");
		this.header.className = this.$skin + "-head";
		this.header.style.display = "none";
		this.scrollview.appendChild(this.header);
		this.securityViewSlot = document.createElement("div");
		this.securityViewSlot.className = "s-security-view-slot";
		this.header.appendChild(this.securityViewSlot);
		this.headerCore = document.createElement("div");
		this.headerCore.className = this.$skin + "-head-core";
		this.headerCoreLeft = document.createElement("div");
		this.headerCoreLeft.className = this.$skin + "-head-core-left";
		this.headerCoreLeft.appendChild(this._createBoxTitle());
		this.setTitle(this.$item.$title || (this.$field ? this.$field.$title : null));

		this.headerViewSelector = document.createElement("div");
		this.headerViewSelector.className = this.$skin + "-view-slot";
		this.headerCoreLeft.appendChild(this.headerViewSelector);

		this.setDescription(this.$prototype.$description || this.$item.$description);
		this.headerCore.appendChild(this.headerCoreLeft);

		this.headerCoreRight = document.createElement("div");
		this.headerCoreRight.className = this.$skin + "-head-core-right";
		this.headerCore.appendChild(this.headerCoreRight);

		this.headerCore.appendChild(this.headerCoreRight);


		this.header.appendChild(this.headerCore);
		this.loadPageViewSelector();
	},
	loadPageViewSelector: function() {
		syra_site.dom.empty(this.headerViewSelector);
		if (this.pageViewSelector) {
			this.pageViewSelector.dispose();
			this.pageViewSelector = null;
		}
		if (this.$views) {
			this.pageViewSelector = new PageViewSelector();
			this.pageViewSelector.localize = this.localize;
			this.pageViewSelector.load(this, this.headerViewSelector);
		}
	},
	onBreadcrumbClick: function(picker, event) {

	},
	_showBreadCrumb: function() {
		if (this.$breadCrumb && this.$breadCrumb.length > 0) {
			if (!this.breadCrumbSlot) {
				this.breadCrumbSlot = document.createElement("div");
				this.breadCrumbSlot.className = this.$skin + "-head-breadcrumb";
				this.breadCrumbSlot.syraItem = this.id;
				this.securityViewSlot.parentNode.insertBefore(this.breadCrumbSlot, this.securityViewSlot.nextSibling);
			}
			var breadItem, breadLink;
			this._breadCrumb = document.createElement("ul");
			this._breadCrumb.className = this.$skin + "-breadcrumb-slot";
			for (var ii = 0; ii < this.$breadCrumb.length; ii++) {
				breadItem = document.createElement("li");
				breadItem.className = this.$skin + "-breadcrumb-link-slot-" + (ii == 0 ? "first" : "next");
				breadItem.textContent = this.$breadCrumb[ii];
				this._breadCrumb.appendChild(breadItem);
			}
			breadItem = document.createElement("li");
			breadItem.className = this.$skin + "-breadcrumb-link-slot-last";

			breadItem.textContent = this.getTitle();

			breadLink = document.createElement("a");
			breadLink.className = this.$skin + "-breadcrumb-link";
			breadLink.syraOnClick = "onBreadcrumbClick";
			breadLink.setAttribute("href", "#");
			breadItem.appendChild(breadLink);
			this._breadCrumb.appendChild(breadItem);
			this.breadCrumbSlot.appendChild(this._breadCrumb);
		}
	},
	showDiagnoses: function(message, options) {
		if (!this.diagnosesPanel) {
			this.diagnosesPanel = new syra_site.diagnoseManager.DiagnosesPanel();
			this.diagnosesPanel.appendToPage(this);
		}
		if (this.diagnosesPanel) {
			this.diagnosesPanel.showDiagnoses(message, this, options);
		}
	},
	drawBox: function() {
		this.$item.$title = this.$item.$title || "{$title}";
		this.domItem = document.createElement("article");
		this.domItem.className = this.$skin;
		this.domItem.syraItem = this.id;
		this.layoutSlot.appendChild(this.domItem);

		this.dataSlot = document.createElement("div");
		this.dataSlot.className = this.$skin + "-data";
		this.domItem.appendChild(this.dataSlot);

		this.diagnoseSlot = document.createElement("div");
		this.diagnoseSlot.className = this.$skin + "-diag-slot";

		this.scrollview = document.createElement("div");
		this.scrollview.syraIsMouseEventDisabled = true;
		this.scrollview.className = this.$skin + "-scrollview";
		this._bindScrollView(true);

		this.body = document.createElement("div");
		this.appendHeader();
		this.ensureLayoutMode();
		this.scrollview.appendChild(this.body);
		this.dataSlot.appendChild(this.diagnoseSlot);
		this.dataSlot.appendChild(this.scrollview);
		this._ensureMenus();
		this.renderLayoutContent();
	},
	onScrollView: function() {
		//syra_site.dialogManager.resizePositionedDialogs(this);
		if (this._scrollViewListeners) {
			for (var ii = 0, jj = this._scrollViewListeners.length; ii < jj; ii++) {
				if (this._scrollViewListeners[ii]) {
					this._scrollViewListeners[ii].onPageScrollViewChange();
				}
			}
		}
	},
	_bindScrollView: function(bind) {
		var self = this;
		if (bind) {
			self.scrollHandler = self.scrollview.addEventListener("scroll", function(event) {
				if (!syra_site.isInoutDisabled && self.isPageLoaded && !self._isDataChanging) {
					if (!self.scrollTimeout) {
						syra_site.dialogManager.closePopups(self);
						self.scrollTimeout = setTimeout(function() {
							self.scrollTimeout = null;
							self.onScrollView();
						}, 1000);
					}
				}
				event.stopPropagation();
			}, false);
		} else {
			if (self.scrollview) {
				self.scrollTimeout && clearTimeout(self.scrollTimeout);
				self.scrollview.removeEventListener("scroll", self.scrollHandler);
			}
		}
	},
	addScrollViewListener: function(listener) {
		(this._scrollViewListeners = this._scrollViewListeners || []).push(listener);
	},
	removeScrollViewListener: function(listener) {
		var found = this._scrollViewListeners && this._scrollViewListeners.indexOf(listener);
		if (found >= 0) {
			this._scrollViewListeners.splice(found, 1);
		}
	},
	_ensureMenus: function() {
		if (!this.isMenuBarDisabled) {
			this.menuBar = new MenuBar();
			this.menuBar.load(this);
		}
	},
	_appendHeaderFooter: function() {
		if (!this._headerFoooter) {
			this._headerFoooter = document.createElement("div");
			this._headerFoooter.className = this.$skin + "-head-footer";
			this._headerNav = document.createElement("div");
			this._headerNav.className = this.$skin + "-head-footer-nav";
			this._headerFoooter.appendChild(this._headerNav);
			this.header.appendChild(this._headerFoooter);
		}
	},
	appendPageMenus: function(slot) {
		if (this.$facet == "$details" || this.$facet == "$edit" || this.$facet == "$modal2") {
			this._appendHeaderFooter();
			syra_site.dom.empty(this._headerNav);
			this._menusPager = this.loadNewItem(this._headerNav, {
				$isAuthoringEnabled: false,
				$skin: "s-page-pager",
				$category: "menus",
				$itemIcon: {
					$mode: "icon",
					$path: "list/s-record-"
				},
				$layout: {
					$autoSize: true,
					$layoutType: "row",
					$items: [{
						$bind: "$first",
						$title: this.localize.dskpFirstRecord
					}, {
						$bind: "$previous",
						$title: this.localize.dskpPreviousRecord
					}, {
						$bind: "$next",
						$title: this.localize.dskpNextRecord
					}, {
						$bind: "$last",
						$title: this.localize.dskpLastRecord
					}]
				}
			});
		}
		RawPage.prototype.appendPageMenus.call(this, slot);
	},
	onMenuDataFilled: function(menuItem) {
		if (menuItem && this.$mainAction && menuItem.$item.$bind == this.$mainAction) {
			menuItem.domItem.className += " s-main-" + this.$mainAction.substr(1);
		}
		if (this.menuBar) {
			this.menuBar.onMenuDataFilled(menuItem);
		}
	},
	diposeContent: function() {
		RawPage.prototype.diposeContent.call(this);
		syra_site.dom.empty(this.body);
		this.loaded = false;
		if (this.menuBar) {
			if (this.menuBar.barSlot) {
				syra_site.dom.removeChild(this.menuBar.barSlot);
			}
			this.menuBar.dispose();
		}
		if (this.diagnosesPanel) {
			this.diagnosesPanel.dispose();
			syra_site.dom.empty(this.diagnoseSlot);
		}
		this._scrollViewListeners = this.diagnosesPanel = this.menuBar = null;
	},

	reloadLayout: function($item, shouldInsertNewItems) {
		if (this._advancedFieldsSlot) {
			delete this._hasAdvancedFields;
			syra_site.dom.removeChild(this._advancedFieldsSlot);
			this._advancedFieldsSlot = this._advancedFieldsLink = null;
		}
		RawPage.prototype.reloadLayout.call(this, $item, null, shouldInsertNewItems);
		this.garbage.load(this);
	},
	addMenuItem: function($menus, groupId) {
		var group;
		if (groupId) {
			group = this.idMap[groupId];
			if (group) {
				if ($menus.$links) {
					var $bind, $binds = Object.keys($menus.$links);
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						$bind = $binds[ii];
						group.addMenuItem({
							$bind: $bind,
							$icon: $menus.$links[$bind].$icon
						});
					}
				}
				if ($menus.$actions) {
					var $bind, $binds = Object.keys($menus.$actions);
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						$bind = $binds[ii];
						group.addMenuItem({
							$bind: $bind,
							$isAction: true
						}, true);
					}
				}
			}
		}
		this.applyActionLinkChange($menus);
	},
	loadSelectedDesignView: function($selectedView) {
		var self = this;
		var query = syra_controller.parseUrl(syra_site.urlMaker.buildPageCollaborationUrl(self, self.openerUrlSegments));
		query.sendRequest({
			params: {
				select: "$views"
			}
		}, function(data, response, requestUrl) {
			self.$views = data.$views;
			self.loadPageViewSelector();
			if (self.pageViewSelector) {
				self.pageViewSelector.selectView($selectedView);
			} else {
				self.$item = helpers.object.clone(self.ensureDefaultArticle(self.$prototype.$article, self.$prototype), true);
				self.reloadLayout(self.$item);
				if (self.openerUrlSegments) {
					delete self.openerUrlSegments.params.pageview;
					syra_site.urlMaker.build(self.openerUrlSegments);
					if (!syra_site.isMobileSite) {
						syra_site.history.update(self, self.openerUrlSegments.$url);
					}
				}
			}
		});
	},
	dispose: function() {
		if (this.isDesigned) {
			this.designArticle(false);
		}
		this._bindScrollView(false);
		if (this.menuBar) {
			this.menuBar.dispose();
		}
		if (this._autoInsertFields) {
			this._autoInsertFields.dispose();
		}
		if (this.garbage) {
			this.garbage.dispose();
		}
		if (this.diagnosesPanel) {
			this.diagnosesPanel.dispose();
		}
		if (this.pageViewSelector) {
			this.pageViewSelector.dispose();
		}
		if (this.breadCrumbSlot) {
			this._breadCrumb = this.breadCrumbSlot = null;
		}
		this._headerNav = this.securityViewSlot = this.security = this.openerUrlSegments = this.noProtoFields = null;
		this.garbage = this.$persistPrototype = this.pageViewSelector = null;
		this._advancedFieldsSlot = this._advancedFieldsLink = this.diagnoseSlot = this.dataSlot = this._headerFoooter = this.headerViewSelector = null;
		this.headerCoreRight = this.scrollHandler = this.scrollview = this.$menus = this.menuBar = this._autoInsertFields = null;
		this.diagnosesPanel = this.headerCore = this.headerCoreLeft = this.domDescription = null;
		RawPage.prototype.dispose.call(this);
	}
});