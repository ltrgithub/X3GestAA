"use strict";
var _helpers = require('syracuse-core/lib/helpers');
var Article = require('syracuse-ui/lib/article/article').Article;
var Layout = require("syracuse-ui/lib/article/layout/layout").Layout;
var _garbage = require('syracuse-ui/lib/page/tools/fieldsGarbage');
var _paging = require("syracuse-ui/lib/field/array/tools/paging");
var _breadcrumb = require('syracuse-ui/lib/page/aside/breadcrumb');
var _designerViewChoice = require('syracuse-ui/lib/authoring/designerViewChoice');
var SideBar = require("syracuse-ui/lib/page/aside/sideBar").SideBar;

var _menus = {
	_mainActions: {
		$cube: "$create",
		$query: "$create",
		$details: "$edit",
		$edit: "$save",
		$request: "$invoke"
	},
	addToPage: function(page) {
		if (!page.$item.$menus) {
			page.$item.$menus = [{
				$skin: page.$skinMenu || "s-mn-main",
				$category: "menus",
				$isBoxCollapsable: true,
				$isMenusBag: true,
				$layout: {
					$items: []
				}
			}];
			if (page.$mainAction) {
				page.$item.$menus[0].$layout.$items.push({
					$showIfSet: true,
					$bind: page.$mainAction,
					$style: "main"
				});
			}
		} else {
			if (!Array.isArray(page.$item.$menus)) {
				page.$item.$menus = [{
					$isMenusBag: true,
					$layout: {
						$items: syra_pageBuilder.getDefinedFieldList(page.$item.$menus.$layout.$items)
					}
				}];
			}
		}
		for (var ii = 0, jj = page.$item.$menus.length; ii < jj; ii++) {
			var $menus = page.$item.$menus[ii];
			$menus.$category = "menus";
			if ($menus.$isBoxCollapsable === undefined) {
				$menus.$isBoxCollapsable = true;
			}
			if ($menus.$skin === undefined) {
				$menus.$skin = page.$skinMenu || "s-mn-main";
			}
		}
		return page.$item.$menus;
	},
	addBar: function(page) {
		var bar = page.menuBar = new SideBar();
		bar.preferenceKey = page.isVignettePage ? "vignette-menubar" : "menuBar";
		bar.options = bar.options || {};
		bar.options.resizeDirection = (page.$pageCategory == "vignette" || page.isLandingPage) ? "left" : "right";
		bar.options.$skin = page.$skin + "-menubar";
		page.initializeNewItem(bar);
		bar.slot = document.createElement("div");
		bar.slot.className = page.$skin + "-menubar-slot";

		bar.body = document.createElement("div");
		bar.body.className = page.$skin + "-menubar-body";

		if (page.$pageCategory == "vignette" || page.isLandingPage) {
			bar.page.domItem.insertBefore(bar.slot, bar.page.domItem.firstChild);
		} else {
			bar.page.domItem.appendChild(bar.slot);
		}
		page.menuBar.load(page);
		if (!syra_site.mobileGateway) {
			if (page.isFusionPage && page.$item.$menus && page.$item.$menus.length) {
				page.$item.$menus[0].$isMenusBag = true;
			}
			page.$mainAction = this._mainActions[page.$facet];
			page.menuBarLayout = page.loadNewItem(bar.body, {
				$layoutType: "stack",
				$items: _menus.addToPage(page)
			});
		}
	}
};






function DesktopPage() {}

exports.DesktopPage = _helpers.defineClass(DesktopPage, Article, {
	getTitle: function(applyDefault) {
		var title = (this.domTitle && this.domTitle.textContent) || (this.$item && this.$item.$title) || "";
		if ((title == "" || title == "-") && applyDefault !== false) {
			title = this._defaultTitle || "";
		}
		return title;
	},
	getMainAction: function() {
		var $binds = Object.keys(this.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var menus = this.menuItems[$binds[ii]];
			if (menus && menus.length && ((menus[0].$item.$style === "main") || (menus[0].$item.$kind === "main"))) {
				return menus[0];
			}
		}
	},
	ensureMenuBar: function() {
		if (!this.isMenuBarDisabled) {
			this.isMenuBarDisabled = this.$item.$isMenuBarDisabled;
			if (!this.isMenuBarDisabled) {
				this.isMenuBarDisabled = this.dialogWrapper && !(this.isFusionPage && this.$facet != "$lookup");
			}
		}!this.isMenuBarDisabled && _menus.addBar(this);
	},
	getUrlParams: function() {
		return this.openerUrlSegments && this.openerUrlSegments.params;
	},
	onItemInOut: function(onEnter, event, target) {
		if (target.syraViewIndex !== undefined) {
			_designerViewChoice.onItemInOut(onEnter, event, target);
		}
	},
	setTitle: function(title, isDynamic) {
		if (this.domTitle) {
			if (isDynamic && this.$item.$XID) {
				//set only by convergence setDataContainer
				this.dynamicTitles = this.dynamicTitles || {};
				this.dynamicTitles[this.$item.$XID] = title;
			}
			if (title != null && title != "") {
				this.titleText = title;
				if (this.titleText == "-") {
					this.titleText = "";
				}
				if (this.titleText.indexOf("{") < 0) {
					this.domTitle.textContent = this.titleText;
					if (!this.domTitle.syrainout) {
						this.domTitle.title = this.titleText;
					}
				} else {
					this.domTitle.textContent = "";
					var parsedText = syra_site.expressionMaker.render(this, this.titleText, this.domTitle, this.$skin + "-title-field", false);
					if (parsedText && parsedText.charAt(0) == "@") {
						this.isTitleUnlocalized = this.titleText == ("{" + parsedText + "}");
						this.domTitle.style.visibility = this.isTitleUnlocalized ? "hidden" : "";
					} else {
						this.titleText = parsedText;
						if (this.isTitleUnlocalized) {
							this.isTitleUnlocalized = false;
							this.domTitle.style.visibility = "";
						}
					}
				}
				this.isTitleHidden = this.$isTitleHidden || this.$item.$isTitleHidden;
			} else {
				this.isTitleHidden = true;
			}
			syra_site.dom.hide(this.header, this.isTitleHidden);
		}
		this.isPageLoaded && syra_site.refreshBrowserTitle(this);
	},
	switchDesigner: function(open) {
		var self = this;
		if (open) {
			require.async("syracuse-ui/lib/authoring/pageDesigner", function(err, module) {
				syra_fields.advancedState.toggleAllFields(self, true);
				self.designer = new module.Designer();
				self.designer.openDesigner(self);
				self.resizeArticle(true);
			});
		} else {
			if (self.designer) {
				syra_diagnose.showDiagnoses({
					$diagnoses: null
				}, self.page);
				self.designer.dispose();
				syra_fields.advancedState.toggleAllFields(self);
				self.designer = null;
				if (self.isVignettePage) {
					self.resizeArticle(true);
				} else {
					syra_site.resizeArticle();
				}

			}
		}
	},
	setShortcutSpyerList: function(list) {
		if (list && !list.isArrayField) {
			while (list && !list.isArrayField) {
				list = list.articleParent;
			}
			if (!list) {
				return;
			}
		}
		this.shortcutSpyerList = list;
	},
	initializeNewItem: function(item, $item, boxParent) {
		item.page = this;
		if ($item) {
			item.$item = $item;
			if (!item.id) {
				item.id = $item.$clientId;
			}
		}
		if (!item.id) {
			item.id = this.id + "-" + (++this._childItemOffset);
		}
		syra_store.add(item);
		if (boxParent) {
			item.boxParent = boxParent;
			(item.articleParent = boxParent.getArticle()).idMap[item.id] = item;
			this.registerBoxField(item);
		}
		return item;
	},
	registerBoxField: function(item, check) {
		if (item.boxParent.boxChildItems && item.$item && item.$item.$bind) {
			if (check && item.boxParent.boxChildItems.indexOf(item) >= 0) {
				return;
			}
			item.boxParent.boxChildItems.push(item);
		}
	},
	createNewItem: function($item, boxParent, newItem) {
		var item = newItem;
		if ($item) {
			if ($item.$items && !$item.$layoutType && !$item.$bind && !$item.$category) {
				$item.$layoutType = "stack";
			}
			if ($item.$layoutType) {
				item = new Layout();
				item.create($item, boxParent);
			} else {
				var $category = $item.$category;
				if (!$category) {
					$category = $item.$bind ? "field" : "section";
				}
				if (!item) {
					item = syra_site.widgetsLibrary.categories[$category].create($item, boxParent);
				}
				if (item) {
					this.initializeNewItem(item, $item, boxParent);
				}
			}
		}
		return item;
	},
	loadNewItem: function(slot, $item, boxParent, initData) {
		var item = this.createNewItem($item, boxParent || this);
		if (item) {
			item.layoutSlot = slot;
			item.loadBox(initData);
		}
		return item;
	},

	addResizable: function(item) {
		this.resizableList.indexOf(item) < 0 && this.resizableList.push(item);
	},
	removeResizable: function(item) {
		var ii = this.resizableList && this.resizableList.indexOf(item);
		(ii >= 0) && this.resizableList.splice(ii, 1);
	},
	resizeArticle: function(resize, articleParent) {
		if (this.displayed !== false && this.isPageLoaded && !this._isDataChanging) {
			if (syra_site.dom.isVisible(this.domItem)) {
				delete this.scrollviewSize;
				var height;
				if (this.dialogWrapper) {
					if (!this.dialogWrapper.isOpened) {
						return;
					}
				} else {
					var isHFit = !this.inlinePageHost && !this.vignetteField;
					var slot = this.scrollContainer,
						diff = 0;
					if (this.vignetteField) {
						if (this.vignetteField.isMaximized) {
							slot = this.vignetteField.page.isLandingPage ? syra_site.body : this.vignetteField.page.layoutSlot;
							var rect = this.vignetteField.header.getBoundingClientRect();
							diff = rect.height + (2 * (rect.top - slot.getBoundingClientRect().top));
							isHFit = true;
						} else {
							if (this.scrollview.syraIsHFit) {
								//just after minimize  
								this.domItem.style.height = "";
								this.scrollview.style.height = "";
								this.body.style.minHeight = "";
								this.scrollview.syraIsHFit = false;
							}
						}
					}
					if (!slot) {
						slot = this.isLandingPage ? syra_site.body : this.layoutSlot;
					}
					if (this.scrollview && slot && isHFit) {
						height = this.barHeight = slot.getBoundingClientRect().height;
						this.domItem.style.height = height + "px";
						if (this.menuBar && !this.menuBar.isVertical) {
							height -= this.menuBar.slot.getBoundingClientRect().height;
						}
						var height = height - diff;
						this.scrollview.syraIsHFit = true;
						this.scrollview.style.height = (height - this.diagnoseSlot.clientHeight) + "px";
						if (this.footer) {
							this.body.syraMinHeight = (this.scrollview.clientHeight - this.header.clientHeight - this.footer.clientHeight);
							this.body.style.minHeight = this.body.syraMinHeight + "px";
						}
					}
				}
				syra_site.dialogManager.resizePositionedDialogs(this);
				this.designer && this.designer.resizeArticle(resize);
				this.setScrollViewPosition && this.setScrollViewPosition();
				this.resizeBars();

				for (var ii = 0, jj = this.resizableList.length; ii < jj; ii++) {
					var item = this.resizableList[ii];
					if (!item.disposed && (item.displayed !== false)) {
						if (articleParent && (item.articleParent != articleParent)) {
							continue;
						}
						item.resizeArticle();
					}
				}


				if (this.dialogWrapper && this.dialogWrapper.isOpened) {
					this.dialogWrapper.resizeDialog();
				}
				this.inlinePageHost && this.inlinePageHost.onInlinePageResized(this);
			}
		}
	},
	setDescription: function($description) {
		if ($description) {
			var title = this.domTitle ? this.domTitle.textContent : null;
			if (title != $description) {
				if (!this.domDescription) {
					this.domDescription = document.createElement("div");
					this.domDescription.className = this.$skin + "-description";
					if (this.domTitle) {
						this.domTitle.parentNode.insertBefore(this.domDescription, this.domTitle.nextSibling);
					} else {
						this.header.appendChild(this.domDescription);
					}
				}
				if ($description.indexOf("{") < 0) {
					this.domDescription.textContent = $description;
				} else {
					syra_site.expressionMaker.render(this, $description, this.domDescription, this.$skin + "-description-field", false);
				}
				if (title && title == this.domDescription.textContent) {
					syra_site.dom.hide(this.domDescription, true);
				}
			}
		}
	},
	startChange: function() {
		this._isDataChanging = true;
	},
	applyChange: function(newData) {
		if (!this.disposed && this.dataset) {
			if (newData && newData.$isPartialDelta) {
				this.$isPartialDelta = true;
				//delete newData.$isPartialDelta;
			}
			syra_site.deltaManager.applyObjectDelta(this, this.dataset, newData);
			Article.prototype.applyChange.call(this, newData);
			if (!this._isDataChanging) {
				this.endChange();
			}
			delete this.$isPartialDelta;
		}
	},
	endChange: function(discardRedraw) {
		this._isDataChanging = false;
		if (!this.disposed) {
			if (!discardRedraw) {
				if (this.menuBar && !this.menuBar.isInitialized) {
					this.menuBar.isInitialized = true;
					var body = (this.menuBarLayout && this.menuBarLayout.domItem) || this.menuBar.body;
					!body.firstChild && this.menuBar.toggleBar(false);
				}
				this.diagnosesPanel && this.diagnosesPanel.refresh();
				this.isPageLoaded && this.resizeArticle(true);
			}
		}
		if (!this.disposed && this.isPageLoaded && !this.isFusionPage) {
			syra_site.refreshBrowserTitle(this);
		}
		syra_quality.page_endChange(this);
	},
	isInMenuBar: function(item) {
		var menuGroupRoot = item.menuGroupRoot || (item.boxParent && item.boxParent.menuGroupRoot);
		var layoutParent = menuGroupRoot && menuGroupRoot.layoutParent;
		return layoutParent && layoutParent == this.menuBarLayout;
	},
	savePageDesign: function(saveUserPreferences) {
		if (this.isVignettePage) {
			var $vignette = _helpers.object.clone(this.$item, true);
			delete $vignette.$menus;
			if (this.altVignetteKey) {
				(this.vignetteField.$item.$altVignettes = this.vignetteField.$item.$altVignettes || {})[this.altVignetteKey] = $vignette;
			} else {
				this.vignetteField.$item.$vignette = $vignette;
			}
			if (this.vignetteField.page.designer) {
				this.vignetteField.page.designer.endArticleUpdate();
			}
		} else {
			saveUserPreferences && this.userPreferences && this.userPreferences.save();
		}
	},
	resizeBars: function() {
		if (this.bars) {
			for (var ii = 0, jj = this.bars.length; ii < jj; ii++) {
				this.bars[ii].resizeSplitter();
			}
		}
	},
	loadBox: function(initData) {
		this.isDesktopPage = true;
		switch (this.$pageCategory) {
			case "lookup":
				this.$skin = this.$item.$skin || "s-page";
				this._defaultTitle = syra_local.dskpPageTitle;
				break;
			default:
				this.$skin = this.$skin || this.$item.$skin || "s-page";
				if (this.inlinePageHost) {
					this.$skin = "s-inline-page " + this.$skin;
				}
				this._defaultTitle = this._defaultTitle || syra_local.dskpPageTitle;
				break;
		}
		var autoInsertFields;
		if (!this.isAutoInsertFieldDisabled) {
			autoInsertFields = this.insertNewItems();
		}

		this.bars = [];
		this.resizableList = [];
		syra_pageBuilder.initialize(this);
		this.$skin = this.$item.$skin || this.$skin || "s-page";
		this.$designLevel = "article";
		this.externalAdapter = this.$item.externalAdapter || syra_site.externalAdapter;
		delete this.$item.externalAdapter;
		Article.prototype.loadBox.call(this, initData);
		if (!this.isAutoInsertFieldDisabled) {
			(this.garbage = new _garbage.FieldsGarbage()).load(this);
			autoInsertFields && autoInsertFields.showDiagnoses();
		}
		return this;
	},
	ensureSkin: function() {
		this.$skin = this.$skin || this.$item.$skin;
	},
	drawBox: function() {
		this.$item.$title = this.$item.$title || "{$title}";
		this.domItem = document.createElement("article");
		this.domItem.className = this.$skin;
		this.domItem.syraPage = this.domItem.syraItem = this.id;
		this.layoutSlot && this.layoutSlot.appendChild(this.domItem);

		this.diagnoseSlot = document.createElement("div");

		this.scrollview = document.createElement("div");
		this.scrollview.className = this.$skin + "-scrollview";

		this.body = document.createElement("div");

		this.header = document.createElement("header");
		this.header.className = this.$skin + "-head";
		this.scrollview.appendChild(this.header);

		// breadcrumb
		if (!this.isSecurityViewHidden && !this.isBreadCrumbHidden) {
			this.securityBreadcrumbSlot = document.createElement("div");
			this.securityBreadcrumbSlot.className = "s-page-head-top";
			syra_site.dom.hide(this.securityBreadcrumbSlot, true);
			!this.isBreadCrumbHidden && _breadcrumb.show(this, this.securityBreadcrumbSlot);
			this.header.appendChild(this.securityBreadcrumbSlot);
		}

		this.domTitle = document.createElement("div");
		this.domTitle.className = this.$skin + "-title";
		this.domTitle.syraItem = this.id;
		this.header.appendChild(this.domTitle);
		delete this.$item.$isTitleHidden;
		this.setTitle(this.$item.$title || (this.$field ? this.$field.$title : null));
		this.setDescription(this.$prototype.$description || this.$item.$description);
		_designerViewChoice.registerDesignViews(this);

		this.ensureLayoutMode();
		this.scrollview.appendChild(this.body);
		if (!this.isFooterDisabled && !this.dialogWrapper && !this.inlinePageHost && !this.isVignettePage) {
			this.footer = document.createElement("footer");
			this.footer.className = "s-site-footer";
			this.siteLegalLink = syra_site.loadNewItem(this.footer, {
				$bind: "$legal",
				$category: "link",
				$skin: "s-site-footer-legal-link"
			}, syra_site);
			this.scrollview.appendChild(this.footer);
		}
		this.domItem.appendChild(this.diagnoseSlot);
		this.domItem.appendChild(this.scrollview);
		this.ensureMenuBar();
		this.renderLayoutContent();
	},
	applyDesignMetaData: function() {
		//inportant for authoring
	},
	getMenuItem: function($bind) {
		var bound = this.menuItems[$bind];
		return bound ? bound[0] : null;
	},
	notifyActionChange: function(menuItem, target, value, notifyServer) {
		if (target != this) {
			var list = target.list || target;
			if (list && list.isArrayField) {
				if (value.$delete || value.$create) {
					list.notifyActionChange(menuItem, target, value, notifyServer);
					//list.resizeArticle(true);
					return;
				}
			}
		}
		var articleParent = (target.getArticle && target.getArticle()) || target.articleParent;
		var sendBag = syra_workingCopy.getSendBag(this);
		var articleSendBag = syra_workingCopy.getSendBag(articleParent);
		var $actions;
		var $bind;
		//var dataset = articleSendBag.dataset || articleSendBag;
		var dataset = articleSendBag;
		if (target.$item && target.$item.$bind) {
			var $properties = dataset.$properties = dataset.$properties || {};
			$properties = $properties[target.$item.$bind] = $properties[target.$item.$bind] || {};
			$actions = $properties.$actions = $properties.$actions || {};
			$bind = "$properties";
		} else {
			$bind = "$actions";
			$actions = dataset.$actions = dataset.$actions || {};
		}
		var $binds = Object.keys(value);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			$actions[$binds[ii]] = value[$binds[ii]];
		}
		value = dataset[$bind];
		if (articleParent != this) {
			while (articleParent != this) {
				if (articleParent.isRecordArticle) {
					var list = articleParent.list;
					var listSendBag = syra_workingCopy.getSendBag(list);
					if (list.$prototype.$type == "application/x-array") {
						var found = list.findDataRecord(articleParent.$uuid);
						listSendBag.saveRecordChange(articleParent, $bind, value, found.dataRecordIndex);
						value = listSendBag.dataRecords;
					} else {
						if ($bind) {
							(listSendBag.dataset = listSendBag.dataset || {})[$bind] = value;
						}
						value = listSendBag.dataset;
					}
					$bind = list.$item.$bind;
					articleParent = list.articleParent;
				} else {
					if (articleParent.arrayLevel != "array") {
						if (articleParent.dataset && articleParent.dataset.$uuid) {
							sendBag.$uuid = articleParent.dataset.$uuid;
						}
						sendBag[$bind] = value;
					}
					articleParent = articleParent.articleParent;
				}
			}
			sendBag[$bind] = value;
		}
		if (notifyServer !== false) {
			if (this.dataset && this.dataset.$uuid !== undefined) {
				sendBag.$uuid = this.dataset.$uuid;
			}
			this.notifyChangeToServer(sendBag);
		}
	},
	notifyChangeToServer: function(sendBag) {
		syra_workingCopy.notifyChangeToServer(this, sendBag);
	},
	notifyDataChange: function(field, value) {
		syra_workingCopy.notifyDataChange(this, field, value);
	},

	getDataUrl: function() {
		var $parsedUrl = syra_site.expressionMaker.parse(this, this.dataset.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	fetch: function(options, callback, error) {
		if (options) {
			if (options.isPageLoading) {
				(options.params = options.params || {}).count = _paging.getDefaultItemsPerPage(this);
				delete options.isPageLoading;
			}
			delete options.field;
			this.lastFetchOptions = _helpers.object.clone(options, true);
		} else {
			delete this.lastFetchOptions;
		}
		syra_controller.callServer(this, options, callback, error);
	},
	fetchLastRequest: function(callback, error) {
		this.fetch(this.lastFetchOptions, callback, error);
	},
	freezeDeletedPage: function() {
		var $properties = {};
		var $binds = Object.keys(this.boundFields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			$properties[$binds[ii]] = {
				$isDisabled: true
			};
		}
		this.applyChange({
			$properties: $properties
		});
		var $binds = Object.keys(this.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var isDisabled = true;
			var $bind = $binds[ii];
			switch (this.$facet) {
				case "$details":
					isDisabled = ($bind != "$query");
					break;
			}
			if (isDisabled) {
				var menus = this.menuItems[$bind];
				for (var mm = 0, kk = menus.length; mm < kk; mm++) {
					menus[mm].disable(true);
				}
			}
		}
	},

	registerSectionBlock: function(section) {
		if (!section.boxParent.childrenSection) {
			section.boxParent.childrenSection = [];
		}
		var index = section.boxParent.childrenSection.indexOf(section);
		if (index < 0) {
			section.boxParent.childrenSection.push(section);
		}
	},
	unregisterSectionBlock: function(section) {
		if (section.boxParent.childrenSection) {
			var index = section.boxParent.childrenSection.indexOf(section);
			if (index >= 0) {
				section.boxParent.childrenSection.splice(index, 1);
			}
		}
	},
	getBindTitle: function($bind, $field) {
		var $X3Name = $field ? $field.$X3Name : null;
		return $X3Name || $bind;
	},
	getMasterPage: function() {
		return this;
	},
	reloadLayout: function($item, layoutSlot) {
		syra_fields.advancedState.clearPageButton(this);
		this.startChange();
		var prevLayout = this.layoutContent && this.layoutContent.domItem;
		var fields = this.layoutContent.getFields();
		if (fields && fields.length) {
			this.reloadingFields = {};
			for (var ii = 0, jj = fields.length; ii < jj; ii++) {
				var field = fields[ii];
				var $key = field && field.$item && (field.$item.$bind || field.$item.$fieldId);
				if ($key) {
					this.reloadingFields[$key] = field;
				}
			}
		}
		syra_site.layoutUpdater.extractItems(this.layoutContent, fields);
		syra_site.layoutUpdater.clearContent(this.layoutContent);
		this.$item = $item;
		var autoInsertFields = this.insertNewItems();
		this.ensureLayoutMode();
		this.renderLayoutContent(layoutSlot);
		this.reloadingFields = null;

		syra_menus.menus.applyChange(this, this.$prototype);
		syra_menus.menus.applyChange(this, this.dataset);
		prevLayout && syra_site.dom.removeChild(prevLayout);

		syra_site.validateLayoutContent(this);
		this.endChange();
		autoInsertFields && autoInsertFields.showDiagnoses();

		this.garbage && this.garbage.load(this);
	},
	renderLayoutContent: function() {
		this.layoutContent = this.page.createNewItem(this.$item.$layout, this);
		this.layoutContent.layoutSlot = this.body;
		this.layoutContent.loadBox();
	},
	ensureLayoutMode: function() {
		this.ensureSkin();
		if (this.domItem) {
			var domItemCss = this.$skin;
			var headerCss = this.$skin + "-head";
			var domTitleCss = this.$skin + "-title";
			var bodyCss = this.$skin + "-body";
			if (this.$item.$css) {
				var $css = " " + this.$item.$css;
				domItemCss += $css;
				bodyCss += $css;
				headerCss += $css;
				domTitleCss += $css;
			}
			if (this.$item.$style) {
				var $style = " s-cst-sty-" + this.$item.$style;
				domItemCss += $style;
				headerCss += $style;
				domTitleCss += $style;
				bodyCss += $style;
			}

			this.domItem.className = domItemCss;
			if (this.body) {
				this.body.className = bodyCss;
			}
			if (this.domTitle) {
				this.domTitle.className = domTitleCss;
			}
			if (this.header) {
				this.header.className = headerCss;
			}
			this.layoutParent && this.layoutParent.ensureLayoutSlot(this);
		}
	},
	insertNewItems: function(displayDiagnoses, designLevel) {
		// Auto insert fields/sections/blocks in authored page... just for Fusion for now
		this._autoInsertFields && this._autoInsertFields.dispose();
		if (this.isFusionPage === undefined && this.page ? this.page.isFusionPage : this.isFusionPage) {
			(this._autoInsertFields = new _garbage.FieldsAutoInsert()).load(this, designLevel || "article");
		}
		if (this._autoInsertFields && displayDiagnoses) {
			this._autoInsertFields.showDiagnoses();
		}
		return this._autoInsertFields;
	},
	getScrollviewSize: function() {
		if (!this.scrollviewSize) {
			this.scrollviewSize = syra_site.dom.getBoundingClientRect(this.scrollview);
		}
		return this.scrollviewSize;
	},
	onBreadcrumbClick: function(event, btn) {

	},
	scrollToItem: function(item, area, isDomItem) {
		if (!isDomItem) {
			var masterPage = item.page.getMasterPage();
			if (masterPage != this) {
				masterPage.scrollToItem(item, area, isDomItem);
				return;
			}
		}
		if (item == this) {
			if (this.scrollview) {
				this.scrollview.scrollTop = this.scrollview.scrollLeft = "0px";
			}
		} else {
			var target;
			area = area || this.scrollview || syra_site.body;
			if (isDomItem) {
				target = item;
			} else {
				var parent = item;
				while (parent) {
					if (parent.tabTitle && !parent.$opened) {
						parent.openTab();
					}
					parent = parent.boxParent;
				}
				if (item && (item.tabTitle || item.domItem)) {
					target = item.tabTitle || item.domItem;
				}
			}
			if (target) {
				var targetRect = syra_site.dom.getBoundingClientRect(target);
				var areaRect = syra_site.dom.getBoundingClientRect(area);
				if (targetRect.top < areaRect.top) {
					//target is above area
					area.scrollTop -= ((areaRect.top - targetRect.top) + (areaRect.height > 20 ? 20 : 0));
				} else {
					if (targetRect.top > areaRect.bottom || targetRect.bottom > areaRect.bottom) {
						var diff = areaRect.height - targetRect.height;
						if (diff > 0) {
							area.scrollTop += (targetRect.bottom - areaRect.bottom) + Math.min(20, diff);
						} else {
							//ensure top is visible
							if (targetRect.top > areaRect.bottom) {
								area.scrollTop = 0;
							} else {
								diff = areaRect.bottom - targetRect.top;
								if (diff < 20) {
									area.scrollTop -= (20 - diff);
								}
							}
						}
					}
				}
				if (targetRect.left < areaRect.left) {
					//target is left  area
					area.scrollLeft -= ((areaRect.left - targetRect.left) + (areaRect.width > 20 ? 20 : 0));
				} else {
					if (targetRect.left > areaRect.right || targetRect.right > areaRect.right) {
						var diff = areaRect.width - targetRect.width;
						if (diff > 0) {
							area.scrollLeft += (targetRect.right - areaRect.right) + Math.min(20, diff);
						} else {
							if (targetRect.left > areaRect.right) {
								area.scrollLeft = 0;
							} else {
								diff = areaRect.right - targetRect.left;
								if (diff < 20) {
									area.scrollLeft -= (20 - diff);
								}
							}
						}
					}
				}
			}
		}
	},
	onAfterLoad: function() {
		syra_quality.page_onAfterLoad(this);
	},
	diposeContent: function() {
		Article.prototype.diposeContent.call(this);
		syra_site.dom.empty(this.body);
		this.loaded = false;
		if (this.menuBar) {
			this.menuBar.slot && syra_site.dom.removeChild(this.menuBar.slot);
			this.menuBar.dispose();
		}
		if (this.diagnosesPanel) {
			this.diagnosesPanel.dispose();
			syra_site.dom.empty(this.diagnoseSlot);
		}
		this.diagnosesPanel = this.menuBar = null;
	},
	dispose: function() {
		this.siteLegalLink && syra_site.removeItem(this.siteLegalLink, false, true);
		syra_workingCopy.remove(this);
		this.isDesigned && syra_site.switchItemDesigner(this, false);
		if (this.bars) { //pagestorage no default load
			while (this.bars.length) {
				this.bars[0].dispose();
			}
		}
		this._autoInsertFields && this._autoInsertFields.dispose();
		this.garbage && this.garbage.dispose();
		this.diagnosesPanel && this.diagnosesPanel.dispose();
		_designerViewChoice.dispose(this);
		syra_pageBuilder.disposePage(this);
		Article.prototype.dispose.call(this);
	}
});