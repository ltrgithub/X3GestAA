"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('./rawPage').RawPage;
var MenuBar = require('./menuBar').MenuBar;
var DiagnosesPanel = require('syracuse-ui/lib/diagnoses/diagnosesPanel').DiagnosesPanel;
var PageViewSelector = require('./utility/pageViewSelector').PageViewSelector;
var AuthorWorkingCopy = require('syracuse-ui/lib/authoring/authorWorkingCopy').AuthorWorkingCopy;

function DesktopPage() {}

exports.DesktopPage = helpers.defineClass(DesktopPage, RawPage, {
	onAuthoringExcludeField: function($bind, isExcluded) {
		if (isExcluded) {
			this.garbageFields[$bind] = 1;
		} else {
			delete this.garbageFields[$bind];
		}
		this.$item.$garbageFields = Object.keys(this.garbageFields);
	},
	garbageFreeItems: function() {
		if (this.$freeFieldBinds) {
			this.garbageFields = this.garbageFields || {};
			for (var ii = 0, jj = this.$freeFieldBinds.length; ii < jj; ii++) {
				this.garbageFields[this.$freeFieldBinds[ii]] = 1;
			}
			this.$freeFieldBinds = [];
			this.$item.$garbageFields = Object.keys(this.garbageFields);
		}
	},
	loadGarbage: function() {
		this.garbageFields = {};
		if (this.$item.$garbageFields) {
			var $properties = this.$prototype.$properties || {};
			for (var ii = 0, jj = this.$item.$garbageFields.length; ii < jj; ii++) {
				this.garbageFields[this.$item.$garbageFields[ii]] = $properties[this.$item.$garbageFields[ii]];
			}
		}
	},
	loadProtoArticle: function() {
		if (this.$prototype && this.$prototype.$article) {
			var $newArticle = helpers.object.clone(this.$prototype.$article, true);
			if (this.$prototype.$menus) {
				$newArticle.$menus = helpers.object.clone(this.$prototype.$menus, true);
			}
			this.reloadLayout($newArticle);
		}
	},
	getDefaultTitle: function() {
		return this._defaultTitle;
	},
	_showDefaultAuthoringApplyedDiagnoses: function() {
		this.showDiagnoses({
			$diagnoses: null
		});
		var $isFactory = (this.pageViewSelector && this.pageViewSelector.getSelected()).$isFactory;
		this.showDiagnoses({
			$diagnoses: [{
				$message: this.localize.dskpDefaultApplied,
				$severity: "info",
				$links: {
					"$restorePage": {
						$title: this.localize.dskpRestorePage
					},
					"$save_authoring": {
						$isHidden: (!document.site.developpementMode && $isFactory),
						$title: this.localize.dskpSaveAuthoring
					},
					"$saveAs_authoring": {
						$title: this.localize.dskpSaveAsAuthoring
					},
					"$open_authoring": {
						$title: this.localize.dskpOpenAuthoring
					}
				}
			}]
		});
	},
	_showAddNewItemApplyedDiagnoses: function() {
		this.showDiagnoses({
			$diagnoses: null
		});
		var $isFactory = (this.pageViewSelector && this.pageViewSelector.getSelected()).$isFactory;
		this.showDiagnoses({
			$diagnoses: [{
				$message: this.localize.dskpDefaultApplied,
				$severity: "info",
				$links: {
					"$restorePage": {
						$title: this.localize.dskpRestorePage
					},
					"$save_authoring": {
						$isHidden: (!document.site.developpementMode && $isFactory),
						$title: this.localize.dskpSaveAuthoring
					},
					"$saveAs_authoring": {
						$title: this.localize.dskpSaveAsAuthoring
					},
					"$open_authoring": {
						$title: this.localize.dskpOpenAuthoring
					}
				}
			}]
		});
	},
	warnAdministrationUpdates: function(showDiagnoses) {
		this.$freeFieldBinds = [];
		var $fieldsBinds = Object.keys(this.$prototype.$properties);
		var $definedBinds = {};
		this.getDefinedFieldsObject(this.$item.$layout.$items, $definedBinds);
		for (var ii = 0, jj = $fieldsBinds.length; ii < jj; ii++) {
			var $bind = $fieldsBinds[ii];
			var $field = this.$prototype.$properties[$bind];
			if ($field && !$field.$isExcluded) {
				if ($bind != "$pageViewSelector" && !$definedBinds[$bind] && ($bind.charAt(0) != "$")) {
					if (!(this.$isFusionPage && $bind.charAt(0) == "b")) {
						if (!this.garbageFields[$bind]) {
							this.$freeFieldBinds.push($bind);
						}
					}
				}
			}
		}
		if (this.$freeFieldBinds.length > 0) {
			return;
			if (document.site.userProfile.getAuthoringLevel() !== "none") {
				if (showDiagnoses !== false) {
					var $isFactory = (this.pageViewSelector && this.pageViewSelector.getSelected()).$isFactory;
					this.showDiagnoses({
						$diagnoses: [{
							$message: this.localize.dskpNewField.replace("{0}", this.$freeFieldBinds.length),
							$severity: "warning",
							$links: {
								"$forget_new_content": {
									$isHidden: (!document.site.developpementMode && $isFactory),
									$title: this.localize.dskpForgetNewContent
								},
								"$apply_default": {
									$title: this.localize.dskpNewApplyDefault
								},
								/*  "$add_new_items": {
                                 $title: this.localize.dskpNewBestPlace
                                 },*/
								"$open_authoring": {
									$title: this.localize.dskpOpenAuthoring
								}
							}
						}]
					});
				}
			}
		}
	},
	loadBox: function(initData, $initDiagnoses) {
		this.loadGarbage();
		document.site.desktopPages[this.id] = this;
		switch (this.$pageCategory) {
			case "lookup":
				this.$skin = this.$item.$skin || "s-page";
				this._defaultTitle = this.localize.dskpPageTitle;
				break;
			default:
				this.$skin = this.$skin || this.$item.$skin || "s-page";
				this._defaultTitle = this._defaultTitle || this.localize.dskpPageTitle;
				break;
		}
		RawPage.prototype.loadBox.call(this, initData, $initDiagnoses);
		this._showBreadCrumb();
		this._isPageLoaded = true;
		this.onWindowResize();
		this.warnAdministrationUpdates();
	},
	onWindowResize: function() {
		if (this._isPageLoaded) {
			var height;
			if (this.dialogWrapper) {
				if (!this.dialogWrapper.isOpened) {
					return;
				}
				height = this.dialogWrapper.$$dialogSlot.height();
				this._item.style.width = this.dialogWrapper.$$dialogSlot.width() + "px";
			} else {
				height = document.site.$$body.height();
			}
			this._item.style.height = height + "px";
			this.scrollview.style.height = (height - this._$$diagnoseSlot.outerHeight(true)) + "px";
			if (this.dialogWrapper) {
				this.scrollview.style.width = this.dialogWrapper.$$dialogSlot.width() + "px";
				if (this.lookupList) {
					this._body.style.height = (this.scrollview.clientHeight - this._$$header.outerHeight(true)) + "px";
					this.lookupList.onWindowResize();
				}
				if (!document.site.isResizing) {
					var diff = this.scrollview.scrollHeight - this.scrollview.clientHeight;
					if (diff > 0) {
						this.dialogWrapper.dialogSlot.style.height = Math.min(this.dialogWrapper._maxHeight, this.dialogWrapper.$$dialogSlot.outerHeight(true) + diff) + "px";
						height = this.dialogWrapper.$$dialogSlot.height();
						this._item.style.height = height + "px";
						this.scrollview.style.height = (height - this._$$diagnoseSlot.outerHeight(true)) + "px";
					}
				}
			}
			if (document.site.body.clientWidth) {
				if (document.site.body.clientWidth <= 900) {
					this.isAutoFloat = true;
					if (this.menuBar) {
						if (this.menuBar.preferences.menuBar.isDocked) {
							this.menuBar.preferences.menuBar.isDocked = false;
							this.menuBar.preferences.menuBar.isCollapsed = true;
							this.menuBar.ensureState();
						}
					}
					if (this.fusionBar) {
						if (this.fusionBar.preferences.convergenceBar.isDocked) {
							this.fusionBar.preferences.convergenceBar.isDocked = false;
							this.fusionBar.preferences.convergenceBar.isCollapsed = true;
							this.fusionBar.ensureState();
						}
					}
				} else {
					if (this.isAutoFloat) {
						this.isAutoFloat = false;
						if (this.menuBar) {
							if (!this.menuBar.preferences.menuBar.isDocked) {
								this.menuBar.preferences.menuBar.isDocked = true;
								this.menuBar.preferences.menuBar.isCollapsed = false;
								this.menuBar.ensureState();
							}
						}
						if (this.fusionBar) {
							if (!this.fusionBar.preferences.convergenceBar.isDocked) {
								this.fusionBar.preferences.convergenceBar.isDocked = true;
								this.fusionBar.preferences.convergenceBar.isCollapsed = false;
								this.fusionBar.ensureState();
							}
						}
					}
				}
			}
			if (this.menuBar) {
				this.menuBar.onWindowResize();
			}
			if (this.fusionBar) {
				this.fusionBar.onWindowResize();
			}
		}
		if (this.isOnAuthoring) {
			document.site.authorPage.resizePalette();
		}

	},
	onFillLookupList: function() {
		if (this.dialogWrapper && this.dialogWrapper._content) {
			var invisible = this.lookupList.builder.scroller.getInvisibleSize();
			var diff = invisible.height;
			if (!diff) {
				diff = invisible.width ? 20 : 0;
			}
			if (diff) {
				this.dialogWrapper.dialogSlot.style.height = Math.min(this.dialogWrapper._maxHeight, this.dialogWrapper.$$dialogSlot.outerHeight(true) + diff + 20) + "px";
				this.dialogWrapper.onWindowResize();
			}
			if (!this.lookupSizeInit) {
				this.lookupSizeInit = true;
				this.onFillLookupList();
			}
		}
	},
	onShowAdvancedFields: function() {
		this._advancedFieldsLink.textContent = this._advancedFieldsLink.title = this.$isAdvancedFieldsVisible ? this.localize.box_advanced_hide : this.localize.box_advanced;
		document.site.toggleClass(this._advancedFieldsLink, "s-hide-advanced", this.$isAdvancedFieldsVisible);
	},
	toggleAdvancedFieldsMode: function(enable, onAuthoring) {
		if (enable && this.$isAdvancedModeEnabled) {
			return;
		}
		this.$isAdvancedModeEnabled = enable;
		if (!this._advancedFieldsSlot) {
			this._advancedFieldsSlot = document.createElement("div");
			this._advancedFieldsSlot.className = this.$skin + "-head-advanced-fields";
			this._headerCoreLeft.appendChild(this._advancedFieldsSlot);
			this._advancedFieldsLink = document.createElement("a");
			this._advancedFieldsLink.setAttribute("data-s-picker", "box-picker");
			this._advancedFieldsLink.syraBoxPickerId = "advanced";
			this._advancedFieldsLink.syraBoxId = this.id;
			this._advancedFieldsLink.className = this.$skin + "-head-advanced-fields-link";
			this._advancedFieldsSlot.appendChild(this._advancedFieldsLink);
		}
		this._advancedFieldsSlot.style.display = this.$isAdvancedModeEnabled ? "" : "none";
		this.onShowAdvancedFields();
		if (!enable) {
			delete this.$isAdvancedFieldsVisible;
		}
	},
	setDescription: function($description) {
		if ($description) {
			var title = this._textTitle ? this._textTitle.textContent : null;
			if (title != $description) {
				if (!this.domDescription) {
					this.domDescription = document.createElement("div");
					this.domDescription.className = this.$skin + "-description";
					if (this._textTitle) {
						this._textTitle.parentNode.insertBefore(this.domDescription, this._textTitle.nextSibling);
					} else {
						this._headerCoreLeft.appendChild(this.domDescription);
					}
				}
				if ($description.indexOf("{") < 0) {
					this.domDescription.textContent = $description;
				} else {
					this.renderExpression($description, this.domDescription, this.$skin + "-description-field", false);
				}
				if (title && title == this.domDescription.textContent) {
					this.domDescription.style.display = "none";
				}
			}
		}
	},
	appendHeader: function() {
		this._header = document.createElement("header");
		this._header.className = this.$skin + "-head";
		this._header.style.display = "none";
		this.scrollview.appendChild(this._header);
		this.securityViewSlot = document.createElement("div");
		this.securityViewSlot.className = this.$skin + "-security-view-slot";
		this._header.appendChild(this.securityViewSlot);
		this._headerCore = document.createElement("div");
		this._headerCore.className = this.$skin + "-head-core";
		this._headerCoreLeft = document.createElement("div");
		this._headerCoreLeft.className = this.$skin + "-head-core-left";

		this._headerCoreLeft.appendChild(this._createBoxTitle());
		this.setTitle(this.$item.$title || (this.$field ? this.$field.$title : null));


		this.setDescription(this.$prototype.$description || this.$item.$description);
		this._headerCore.appendChild(this._headerCoreLeft);

		this._headerViewSelector = document.createElement("div");
		this._headerViewSelector.className = this.$skin + "-head-core-right";
		this._headerCore.appendChild(this._headerViewSelector);


		this._header.appendChild(this._headerCore);
		this._$$header = $(this._header);

		this._headerFoooter = document.createElement("div");
		this._headerFoooter.className = this.$skin + "-head-footer";
		this._headerNav = document.createElement("div");
		this._headerNav.className = this.$skin + "-head-footer-nav";
		this._headerFoooter.appendChild(this._headerNav);

		this.loadPageViewSelector();
		this._header.appendChild(this._headerFoooter);

	},
	loadPageViewSelector: function() {
		document.site.emptyDom(this._headerViewSelector);
		if (this.pageViewSelector) {
			document.controller.disposeObject(this.pageViewSelector);
		}
		if (this.$views) {
			this.pageViewSelector = new PageViewSelector();
			this.pageViewSelector.localize = this.localize;
			this.pageViewSelector.load(this, this._headerViewSelector);
		}
	},
	_showBreadCrumb: function() {
		if (this.$breadCrumb && this.$breadCrumb.length > 0) {
			if (!this.breadCrumbSlot) {
				this.breadCrumbSlot = document.createElement("div");
				this.breadCrumbSlot.className = this.$skin + "-head-breadcrumb";
				this.breadCrumbSlot.setAttribute("data-s-box", this.id);
				this.securityViewSlot.parentNode.insertBefore(this.breadCrumbSlot, this.securityViewSlot.nextSibling);
			}
			var breadItem, breadLink;
			this._breadCrumb = document.createElement("ul");
			this._breadCrumb.className = this.$skin + "-breadcrumb-slot";
			for (var ii = 0; ii < this.$breadCrumb.length; ii++) {
				breadItem = document.createElement("li");
				breadItem.className = this.$skin + "-breadcrumb-link-slot-" + (ii == 0 ? "first" : "next");
				breadItem.textContent = this.$breadCrumb[ii];
				this._breadCrumb.appendChild(breadItem);
			}
			/* breadItem = document.createElement("li");
             breadItem.className =  this.$skin + "-breadcrumb-link-slot-next";
             breadItem.textContent = this.getTitle();
             this._breadCrumb.appendChild(breadItem)
             */
			breadItem = document.createElement("li");
			breadItem.className = this.$skin + "-breadcrumb-link-slot-last";

			breadItem.textContent = this.getTitle();

			breadLink = document.createElement("a");
			breadLink.className = this.$skin + "-breadcrumb-link";
			breadLink.setAttribute("href", "#");
			breadItem.appendChild(breadLink);
			this._breadCrumb.appendChild(breadItem);
			this.breadCrumbSlot.appendChild(this._breadCrumb);
		}
	},
	showDiagnoses: function(message, options) {
		if (!this.diagnosesPanel) {
			if (this.$pageCategory == "dashboard" || this.$pageCategory == "page" || this.$pageCategory == "fusion" || this.$pageCategory == "soap" || this.$pageCategory == "vignette") {
				this.diagnosesPanel = new DiagnosesPanel();
				this.diagnosesPanel.appendToPage(this);
			}
		}
		if (this.diagnosesPanel) {
			this.diagnosesPanel.showDiagnoses(message, this, options);
		}
	},
	drawBox: function() {
		this.$item.$title = this.$item.$title || "{$title}";
		this._item = document.createElement("article");
		this._item.className = this.$skin;
		this.$$item = $(this.layoutSlot.appendChild(this._item));

		this.dataSlot = document.createElement("div");
		this.dataSlot.className = this.$skin + "-data";
		this._item.appendChild(this.dataSlot);

		this.diagnoseSlot = document.createElement("div");
		this.diagnoseSlot.className = this.$skin + "-diag-slot";
		this._$$diagnoseSlot = $(this.diagnoseSlot);

		this.scrollview = document.createElement("div");
		this.scrollview.className = this.$skin + "-scrollview";
		this.$$scrollview = $(this.scrollview);
		this._bindScrollView(true);

		this.$$body = $(this._body = document.createElement("div"));
		this.appendHeader();
		this.ensureLayoutMode();
		this.scrollview.appendChild(this._body);
		this.dataSlot.appendChild(this.diagnoseSlot);
		this.dataSlot.appendChild(this.scrollview);
		this._ensureMenus();
		this.renderLayoutContent();
	},
	registerPositionedDialog: function(dlg, add) {
		if (!this.positionedList) {
			this.positionedList = [];
		}
		if (add) {
			this.positionedList.push(dlg);
		} else {
			if (this.positionedList) {
				for (var ii = 0, jj = this.positionedList.length; ii < jj; ii++) {
					if (this.positionedList[ii] == dlg) {
						this.positionedList.splice(ii, 1);
						break;
					}
				}
			}
		}
	},
	_bindScrollView: function(bind) {
		var self = this;
		if (bind) {
			self.$$scrollview.bind("scroll", function(evt) {
				if (self.positionedList) {
					for (var ii = 0, jj = self.positionedList.length; ii < jj; ii++) {
						var dlg = self.positionedList[ii];
						if (dlg && !dlg.disposed) {
							dlg.onWindowResize(null, true);
						}
					}
				}
				if (self._scrollViewListeners) {
					var ids = Object.keys(self._scrollViewListeners);
					for (var ii = 0, jj = ids.length; ii < jj; ii++) {
						if (self._scrollViewListeners[ids[ii]]) {
							var list = self.idMap[ids[ii]];
							if (list) {
								self._scrollViewListeners[ids[ii]](list.builder.scroller);
							}
						}
					}
				}
			});
		} else {
			if (self.$$scrollview) {
				self.$$scrollview.unbind("scroll");
			}
		}
	},
	addScrollViewListener: function(id, handler) {
		this._scrollViewListeners = this._scrollViewListeners || {};
		this._scrollViewListeners[id] = handler;
	},
	removeScrollViewListener: function(id) {
		if (this._scrollViewListeners) {
			delete this._scrollViewListeners[id];
		}
	},
	_ensureMenus: function() {
		this.menuBar = new MenuBar();
		this.menuBar.load(this);
	},
	appendArticleMenus: function(slot) {
		if (this.$facet == "$details" || this.$facet == "$edit") {
			document.site.emptyDom(this._headerNav);
			this._menusPager = this.loadNewItem(this._headerNav, {
				$isAuthoringEnabled: false,
				$skin: "s-page-pager",
				$category: "menus",
				$itemIcon: {
					$mode: "iconText",
					$path: "list/s-record-"
				},
				$layout: {
					$autoSize: true,
					$layoutType: "row",
					$items: [{
						$bind: "$first",
						$title: this.localize.dskpFirstRecord
					}, {
						$bind: "$previous",
						$title: this.localize.dskpPreviousRecord
					}, {
						$bind: "$next",
						$title: this.localize.dskpNextRecord
					}, {
						$bind: "$last",
						$title: this.localize.dskpLastRecord
					}]
				}
			});
		}
		RawPage.prototype.appendArticleMenus.call(this, slot);
	},
	onMenuDataFilled: function(menuItem) {
		if (menuItem && this.$mainAction && menuItem.$item.$bind == this.$mainAction) {
			menuItem.mn.className += " s-main-" + this.$mainAction.substr(1);
		}
		if (this.menuBar) {
			this.menuBar.onMenuDataFilled(menuItem);
		} else {
			RawPage.prototype.onMenuDataFilled.call(this);
		}
	},
	diposeContent: function() {
		RawPage.prototype.diposeContent.call(this);
		document.site.emptyDom(this._body);
		this.loaded = false;
		if (this.menuBar) {
			if (this.menuBar._slot) {
				document.site.removeDomChild(this.menuBar._slot);
			}
			this.menuBar.dispose();
		}
		if (this.diagnosesPanel) {
			document.controller.disposeObject(this.diagnosesPanel);
			document.site.emptyDom(this.diagnoseSlot);
		}
		this._scrollViewListeners = this.diagnosesPanel = this.menuBar = null;
	},
	_storeArticle: function() {
		if (!this._$sourceArticle) {
			this._$sourceArticle = helpers.object.clone(this.$item, true);
		}
	},
	reloadLayout: function($item) {
		this.diposeContent();
		this.$item = $item;
		this.resizableChildren = {};
		this.boundFields = {};
		this.layouts = {};
		this.idMap = {};
		this.menuItems = {};
		this.menusBags = [];
		this.$menus = {};
		this._ensureMenus();
		this.loadGarbage();
		this.openBox(true);
		this.applyActionLinkChange(this.$prototype);
		this.applyActionLinkChange(this.dataset);
	},
	addMenuItem: function($menus, groupId) {
		var group;
		if (groupId) {
			group = this.idMap[groupId];
			if (group) {
				if ($menus.$links) {
					var $bind, $binds = Object.keys($menus.$links);
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						$bind = $binds[ii];
						group.addMenuItem({
							$bind: $bind,
							$icon: $menus.$links[$bind].$icon
						});
					}
				}
				if ($menus.$actions) {
					var $bind, $binds = Object.keys($menus.$actions);
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						$bind = $binds[ii];
						group.addMenuItem({
							$bind: $bind,
							$isAction: true
						}, true);
					}
				}
			}
		}
		this.applyActionLinkChange($menus);
	},
	appendNewItemFlag: function(parent, type) {
		var flag = document.createElement("div");
		flag.className = "s-new-" + type + "-flag";
		parent.appendChild(flag);
		document.site.setZIndex(flag);
	},
	_flagNewItems: function($newFieldBinds) {
		if ($newFieldBinds.length > 0) {
			for (var ii = 0, jj = $newFieldBinds.length; ii < jj; ii++) {
				var fields = this.boundFields[$newFieldBinds[ii]];
				if (fields) {
					for (var mm = 0, kk = fields.length; mm < kk; mm++) {
						var field = fields[mm];
						if (field.$$item) {
							this.appendNewItemFlag(field.$$item[0], "field");
							if (field.$isHidden && field.layoutSlot) {
								field.layoutSlot.style.display = "";
								if (field.rowSeparator) {
									field.rowSeparator.style.display = "";
								}
								field.$$item[0].style.display = "";
								document.site.toggleClass(field.layoutSlot, "s-aw-visibility-forced", true);
							}
						}
					}
				}
			}
		}
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$sourceBind) {
			switch (menuItem.$sourceBind) {
				case "$forget_new_content":
					if (this._$sourceArticle) {
						this.reloadLayout(this._$sourceArticle);
					}
					this.showDiagnoses({
						$diagnoses: null
					});
					this._onQuickSaveAuthoring("$save_authoring");
					break;
				case "$apply_default":
					this._storeArticle();
					var $article = helpers.object.clone(this.ensureDefaultArticle(this.$prototype.$article, this.$prototype), true);
					var $newFieldBinds = this.$freeFieldBinds;
					this.reloadLayout($article);
					this.warnAdministrationUpdates();
					this._flagNewItems($newFieldBinds);
					this._showDefaultAuthoringApplyedDiagnoses();
					return false;
				case "$add_new_items":
					this._storeArticle();
					this.layoutContent.ensureContentIsLoaded();
					var $newFieldBinds = this.$freeFieldBinds;
					/*if ($newFieldBinds.length > 0) {
                 for (var ii = 0, jj = $newFieldBinds.length; ii < jj; ii++) {
                 var $fieldBind = $newFieldBinds[ii];
                 var $freeLink = this.freeLinks[$linkBind];
                 if ($freeLink && $freeLink.$vignettes) {
                 var vignette;
                 for (var mm = 0, kk = $freeLink.$vignettes.length; !vignette && mm < kk; mm++) {
                 var sibling = this.findSiblingMenu($freeLink.$vignettes[mm]);
                 if (sibling) {
                 this.onAddNewItem( this
                 , sibling, {
                 $fieldBind: $linkBind,
                 $fieldCategory: "link",
                 $category: "link"
                 }, "top");
                 delete this.freeLinks[$linkBind];
                 }
                 }
                 }
                 }
                 }*/
					this.layoutValidator.validate(this.layoutContent, true);
					this.warnAdministrationUpdates();
					this._flagNewItems($newFieldBinds);
					this._showAddNewItemApplyedDiagnoses();
					return false;
				case "$restorePage":
					this.reloadLayout(this._$sourceArticle);
					this.showDiagnoses({
						$diagnoses: null
					});
					return false;
				case "$open_authoring":
					this.showDiagnoses({
						$diagnoses: null
					});
					document.site.openAuthoringPage(true);
					return false;
				case "$save_authoring":
				case "$saveAs_authoring":
					this._onQuickSaveAuthoring(menuItem.$sourceBind);
					return false;
			}
		}
		return true;
	},
	_onQuickSaveAuthoring: function($menuBind) {
		var self = this;
		if (self.authorWorkingCopy) {
			document.controller.disposeObject(self.authorWorkingCopy);
		}
		self.authorWorkingCopy = new AuthorWorkingCopy();
		self.authorWorkingCopy.load(self, $menuBind, function() {
			setTimeout(function() {
				if (self.authorWorkingCopy) {
					document.controller.disposeObject(self.authorWorkingCopy);
					self.authorWorkingCopy = null;
				}
			}, 100);
		});
	},
	onAddNewItem: function(article, targetItem, newItem, $insertAt) {
		var newChild = newItem;
		var $authoringLevel = newItem.$authoringLevel;
		var $category, $item;
		if (newItem.$awAddNewItem) {
			if (newItem.$fieldBind) {
				$authoringLevel = "field";
				$item = {
					$bind: newItem.$fieldBind,
					$category: $category = newItem.$fieldCategory,
					$skin: newItem.$fieldSkin
				};
			} else {
				$authoringLevel = newItem.$authoringLevel;
				$item = {
					$category: "section"
				};
			}
			newChild = article.layoutContent.loadChildItem(null, $item);
		}
		newChild = this._addNewItem(article, targetItem, $authoringLevel, newItem.$bind, newChild, $insertAt, $category);
		var awPalette = (this.authoringPage) ? this.authoringPage.getContext(article) : null;
		if (awPalette && awPalette.onExcludeField && $authoringLevel == "field") {
			awPalette.onExcludeField(newItem.$fieldBind || newItem.$vignette, false, newItem.$vignette != null);
		}
		var section = newChild.boxParent;
		if (section.$item.$fieldsIsTopLabelAlignment !== undefined ||
			section.$item.$fieldsIsRightTextLabelAlignment !== undefined ||
			section.$item.$fieldsIsTitleHidden !== undefined) {
			if (newChild.isField) {
				section.applyDesignMetaDataToField(newChild, section.$item);
			} else {
				if (newChild.isSection) {
					newChild.applyDesignMetaData({
						$fieldsIsTopLabelAlignment: section.$item.$fieldsIsTopLabelAlignment,
						$fieldsIsRightTextLabelAlignment: section.$item.$fieldsIsRightTextLabelAlignment,
						$fieldsIsTitleHidden: section.$item.$fieldsIsTitleHidden
					}, true);
				}
			}
		}

		if (newItem.$vignette) {
			this.loadNewVignetteMenu(newChild, newItem.$vignette);
		}
		return newChild;
	},
	_addNewItem: function(awArticle, targetItem, $newAuthoringLevel, $bind, dropItem, $insertAt, $newCategory) {
		var newChild;
		var targetBoxParent = targetItem.boxParent;
		var targetItemIndex = targetItem.layoutParent ? targetItem.layoutParent.$layout.$items.indexOf(targetItem.$item) : undefined;

		if ($insertAt !== "undefined") {
			if (targetItem.layoutParent) {
				switch (targetItem.layoutParent.$layout.$layoutType) {
					case "stack":
						switch ($insertAt) {
							case "top":
								break;
							case "bottom":
								targetItemIndex++;
								break;
							case "left":
							case "right":
								if (!(targetItem.isLayout && targetItem.$layout.$layoutType == "row")) {
									var rowLayout = targetItem.layoutParent.createChildItem({
										$layoutType: "row",
										$items: []
									}, null, targetItemIndex);
									rowLayout.loadChildItems([targetItem]);
									rowLayout.$layout.$widths = null;
									targetItemIndex = $insertAt == "left" ? 0 : 1;
								} else {
									targetItem.loadChildItem(dropItem, null, $insertAt == "left" ? 0 : targetItem.items.length);
									return dropItem;
								}
								break;
						}
						break;
					case "row":
						switch ($insertAt) {
							case "top":
							case "bottom":
								//drop in row empty cell, wrap drop in stack
								targetItem.layoutParent.wrapIntack([targetItem], targetItemIndex);
								targetItemIndex = ($insertAt == "top") ? 0 : 1;
								break;
							case "left":
							case "right":
								targetItem.layoutParent.$layout.$widths = null;
								if ($insertAt == "right") {
									targetItemIndex++;
								}
								break;
						}
						break;
					case "tabs":
						if ($insertAt == "right") {
							targetItemIndex++;
						}
						break;
				}
			} else {
				targetItemIndex = 0;
			}
		}
		if (dropItem && dropItem.isLayout) {
			newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
		} else {
			if (targetItem.isLayout) {
				targetItem.setChildAuhtoringLevel();
			}
			var $targetAuthoringLevel = targetItem.$chilAuthoringLevel || targetItem.$authoringLevel;
			if (targetItem.isLayout) {
				$targetAuthoringLevel = targetItem.$chilAuthoringLevel;
				if (!targetItem.layoutParent) {
					targetItem = document.site.authorPage.ensureLayoutHasParent(targetItem);
				}
			}
			if ($targetAuthoringLevel == "field") {
				if ($newAuthoringLevel == "field") {
					newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
				} else {
					//dragged section                       
					targetItem.layoutParent.loadChildItems(dropItem.layoutContent.getItems("field"), targetItemIndex);
					newChild = targetItem;
				}
			} else {
				if ($targetAuthoringLevel == "block" && $newAuthoringLevel == "section") {
					dropItem.layoutContent.setChildAuhtoringLevel();
					if (dropItem.layoutContent.$chilAuthoringLevel == "block") {
						targetItem.layoutParent.loadChildItems(dropItem.layoutContent.getChildren(), targetItemIndex);
						newChild = targetItem.boxParent;
					} else {
						var children = dropItem.layoutContent.extractAndDispose();
						if (children.length > 0) {
							newChild = page.layoutContent.ensureSection(children[0], targetItemIndex);
							newChild.layoutContent.newLoadChildItems(children, 1);
						}
					}
				} else {
					newChild = targetItem.layoutParent.ensureSection(dropItem, targetItemIndex);
				}
			}
		}
		if (!newChild) {
			newChild = targetItem && targetItem.isSpaceBox;
			newChild = newChild || awArticle;
		}
		if (targetItem && targetItem.isSpaceBox) {
			targetItem.layoutParent.removeItem(targetItem, true, false);
		}
		if (dropItem && !dropItem.layoutParent && dropItem.articleParent) {
			dropItem.articleParent.removeItem(dropItem, true);
		}
		return newChild;
	},
	dispose: function() {
		if (this.id && document.site.desktopPages) {
			delete document.site.desktopPages[this.id];
		}
		if (this.isOnAuthoring) {
			document.site.openAuthoringPage(false);
		}
		this._bindScrollView(false);
		if (this.menuBar) {
			this.menuBar.dispose();
		}
		if (this.authorWorkingCopy) {
			document.controller.disposeObject(this.authorWorkingCopy);
		}
		if (this.diagnosesPanel) {
			document.controller.disposeObject(this.diagnosesPanel);
		}
		if (this.pageViewSelector) {
			this.pageViewSelector.dispose();
		}
		this.$freeFieldBinds = this._headerNav = this.securityViewSlot = this.security = this.openerHttpQuery = this.noProtoFields = null;
		this.$sourcePrototype = this._$sourceArticle = this.authorWorkingCopy = this.garbageFields = this.pageViewSelector = null;
		this._advancedFieldsSlot = this._advancedFieldsLink = this._$$ditagnoseSlot = this.diagnoseSlot = this.dataSlot = this._$$header = this._headerFoooter = this._headerViewSelector = null;
		this.$$scrollview = this.scrollview = this.$menus = this.menuBar = null;
		this.positionedList = this.diagnosesPanel = this._headerCore = this._headerCoreLeft = this.domDescription = this.lookupList = null;
		RawPage.prototype.dispose.call(this);
	}
});