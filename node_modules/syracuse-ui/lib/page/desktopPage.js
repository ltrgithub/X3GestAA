"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPageDesigner = require("syracuse-ui/lib/authoring/desktopPage/desktopPageDesigner").DesktopPageDesigner;
var RawPage = require('./rawPage').RawPage;
var FieldsGarbage = require('syracuse-ui/lib/article/fieldsGarbage').FieldsGarbage;
var MenuBar = require('syracuse-ui/lib/page/bar/menuBar').MenuBar;
var DiagnosesPanel = require('syracuse-ui/lib/diagnoses/diagnosesPanel').DiagnosesPanel;
var PageViewSelector = require('./utility/pageViewSelector').PageViewSelector;



function DesktopPage(){
}

exports.DesktopPage = helpers.defineClass(DesktopPage, RawPage, {
    designItem: function(open){
        document.site.designItem(open, this, DesktopPageDesigner);
    },
    _clearEmptySection: function(section){
        if (section && section.page != section) {
            var boxParent = section.boxParent;
            var layoutParent = section.layoutParent;
            layoutParent.removeItem(section, true);
            if (!(boxParent.boxFields && Object.keys(boxParent.boxFields).length > 0) && !(boxParent.childrenSection && boxParent.childrenSection.length > 0)) {
                this._clearEmptySection(boxParent);
            }
        }
    },
    clearUnknowFields: function(){
        if (this.noProtoFields) {
            for (var ii = 0, jj = this.noProtoFields.length; ii < jj; ii++) {
                var field = this.noProtoFields[ii];
                var boxParent = field.boxParent;
                field.layoutParent.removeItem(field, true);
                if (boxParent) {
                    if (!(boxParent.boxFields && Object.keys(boxParent.boxFields).length > 0) && !(boxParent.childrenSection && boxParent.childrenSection.length > 0)) {
                        this._clearEmptySection(boxParent);
                    }
                }
            }
            //this.layoutValidator.validate(this.layoutContent, true);
            delete this.noProtoFields;
        }
    },
    getDefaultTitle: function(){
        return this._defaultTitle;
    },
    ensureDesignerOpenerVisibility: function(){
        if (document.site.pageDesignerOpener) {
            document.site.pageDesignerOpener.style.display = !(document.site.userProfile.getAuthoringLevel() === "none") ? "" : "none";
        }
    },
    loadBox: function(initData, $initDiagnoses){
        this.defaultItemsPerPage = this.defaultItemsPerPage || 50;
        this.ensureDesignerOpenerVisibility();
        document.site.desktopPages[this.id] = this;
        switch (this.$pageCategory) {
            case "lookup":
                this.$skin = this.$item.$skin || "s-page";
                this._defaultTitle = this.localize.dskpPageTitle;
                break;
            default:
                this.$skin = this.$skin || this.$item.$skin || "s-page";
                this._defaultTitle = this._defaultTitle || this.localize.dskpPageTitle;
                break;
        }
        RawPage.prototype.loadBox.call(this, initData, $initDiagnoses);
        this._showBreadCrumb();
        this._isPageLoaded = true;
        this.onWindowResize();
        (this.garbage = new FieldsGarbage()).load(this);
    },
    onWindowResize: function(){
        if (this._isPageLoaded) {
            var height;
            this.resizePositionedDialogs();
            if (this.dialogWrapper) {
                if (!this.dialogWrapper.isOpened) {
                    return;
                }
                this.dialogWrapper.onContentPageChange();
            }
            else {
                height = document.site.$$body.height();
                this.domItem.style.height = height + "px";
                this.scrollview.style.height = (height - this._$$diagnoseSlot.outerHeight(true)) + "px";
            }
            if (document.site.body.clientWidth) {
				// adapt menubar floating
                var isAutoFloat;
                if (document.site.$item && document.site.$item.$device) {
                    switch (document.site.$item.$device) {
                        case "desktop":
                            isAutoFloat = document.site.body.clientWidth <= 900;
                            break;
                        case "tablet":
                            isAutoFloat = document.body.clientHeight >= document.body.clientWidth;
                            break;
                    }
                }
                
                if (this.menuBar) {
                    this.menuBar.toggleAutoFloat(isAutoFloat);
                }
                if (this.fusionBar) {
                    this.fusionBar.toggleAutoFloat(isAutoFloat);
                }
            }
            RawPage.prototype.onWindowResize.call(this);
        }
        if (this.designer) {
            this.designer.onWindowResize();
        }
        
    },
    onShowAdvancedFields: function(){
        this._advancedFieldsLink.textContent = this._advancedFieldsLink.title = this.$isAdvancedFieldsVisible ? this.localize.box_advanced_hide : this.localize.box_advanced;
        document.site.toggleClass(this._advancedFieldsLink, "s-hide-advanced", this.$isAdvancedFieldsVisible);
    },
    toggleAdvancedFieldsMode: function(enable, designing){
        if (enable && this.$isAdvancedModeEnabled) {
            return;
        }
        this.$isAdvancedModeEnabled = enable;
        if (!this._advancedFieldsSlot) {
            this._advancedFieldsSlot = document.createElement("div");
            this._advancedFieldsSlot.className = this.$skin + "-head-advanced-fields";
            this.headerCoreLeft.appendChild(this._advancedFieldsSlot);
            this._advancedFieldsLink = document.createElement("a");
            this._advancedFieldsLink.setAttribute("data-s-picker", "box-picker");
            this._advancedFieldsLink.syraBoxPickerId = "advanced";
            this._advancedFieldsLink.syraBoxId = this.id;
            this._advancedFieldsLink.className = this.$skin + "-head-advanced-fields-link";
            this._advancedFieldsSlot.appendChild(this._advancedFieldsLink);
        }
        this._advancedFieldsSlot.style.display = this.$isAdvancedModeEnabled ? "" : "none";
        this.onShowAdvancedFields();
        if (!enable) {
            delete this.$isAdvancedFieldsVisible;
        }
    },
    setDescription: function($description){
        if ($description) {
            var title = this._textTitle ? this._textTitle.textContent : null;
            if (title != $description) {
                if (!this.domDescription) {
                    this.domDescription = document.createElement("div");
                    this.domDescription.className = this.$skin + "-description";
                    if (this._textTitle) {
                        this._textTitle.parentNode.insertBefore(this.domDescription, this._textTitle.nextSibling);
                    }
                    else {
                        this.headerCoreLeft.appendChild(this.domDescription);
                    }
                }
                if ($description.indexOf("{") < 0) {
                    this.domDescription.textContent = $description;
                }
                else {
                    this.renderExpression($description, this.domDescription, this.$skin + "-description-field", false);
                }
                if (title && title == this.domDescription.textContent) {
                    this.domDescription.style.display = "none";
                }
            }
        }
    },
    appendHeader: function(){
        this.header = document.createElement("header");
        this.header.className = this.$skin + "-head";
        this.header.style.display = "none";
        this.scrollview.appendChild(this.header);
        this.securityViewSlot = document.createElement("div");
        this.securityViewSlot.className = "s-security-view-slot";
        this.header.appendChild(this.securityViewSlot);
        this.headerCore = document.createElement("div");
        this.headerCore.className = this.$skin + "-head-core";
        this.headerCoreLeft = document.createElement("div");
        this.headerCoreLeft.className = this.$skin + "-head-core-left";
        this.headerCoreLeft.appendChild(this._createBoxTitle());
        this.setTitle(this.$item.$title || (this.$field ? this.$field.$title : null));
        
        this.headerViewSelector = document.createElement("div");
        this.headerViewSelector.className = this.$skin + "-view-slot";
        this.headerCoreLeft.appendChild(this.headerViewSelector);
        
        this.setDescription(this.$prototype.$description || this.$item.$description);
        this.headerCore.appendChild(this.headerCoreLeft);
        
        this.headerCoreRight = document.createElement("div");
        this.headerCoreRight.className = this.$skin + "-head-core-right";
        this.headerCore.appendChild(this.headerCoreRight);
        
        this.headerCore.appendChild(this.headerCoreRight);
        
        
        this.header.appendChild(this.headerCore);
        this._$$header = $(this.header);
        this.loadPageViewSelector();
    },
    loadPageViewSelector: function(){
        document.site.emptyDom(this.headerViewSelector);
        if (this.pageViewSelector) {
            document.controller.disposeObject(this.pageViewSelector);
        }
        if (this.$views) {
            this.pageViewSelector = new PageViewSelector();
            this.pageViewSelector.localize = this.localize;
            this.pageViewSelector.load(this, this.headerViewSelector);
        }
    },
    _showBreadCrumb: function(){
        if (this.$breadCrumb && this.$breadCrumb.length > 0) {
            if (!this.breadCrumbSlot) {
                this.breadCrumbSlot = document.createElement("div");
                this.breadCrumbSlot.className = this.$skin + "-head-breadcrumb";
                this.breadCrumbSlot.setAttribute("data-s-box", this.id);
                this.securityViewSlot.parentNode.insertBefore(this.breadCrumbSlot, this.securityViewSlot.nextSibling);
            }
            var breadItem, breadLink;
            this._breadCrumb = document.createElement("ul");
            this._breadCrumb.className = this.$skin + "-breadcrumb-slot";
            for (var ii = 0; ii < this.$breadCrumb.length; ii++) {
                breadItem = document.createElement("li");
                breadItem.className = this.$skin + "-breadcrumb-link-slot-" + (ii == 0 ? "first" : "next");
                breadItem.textContent = this.$breadCrumb[ii];
                this._breadCrumb.appendChild(breadItem);
            }
            /* breadItem = document.createElement("li");
             breadItem.className =  this.$skin + "-breadcrumb-link-slot-next";
             breadItem.textContent = this.getTitle();
             this._breadCrumb.appendChild(breadItem)
             */
            breadItem = document.createElement("li");
            breadItem.className = this.$skin + "-breadcrumb-link-slot-last";
            
            breadItem.textContent = this.getTitle();
            
            breadLink = document.createElement("a");
            breadLink.className = this.$skin + "-breadcrumb-link";
            breadLink.setAttribute("href", "#");
            breadItem.appendChild(breadLink);
            this._breadCrumb.appendChild(breadItem);
            this.breadCrumbSlot.appendChild(this._breadCrumb);
        }
    },
    showDiagnoses: function(message, options){
        if (!this.diagnosesPanel) {
            this.diagnosesPanel = new DiagnosesPanel();
            this.diagnosesPanel.appendToPage(this);
        }
        if (this.diagnosesPanel) {
            this.diagnosesPanel.showDiagnoses(message, this, options);
        }
    },
    drawBox: function(){
        this.$item.$title = this.$item.$title || "{$title}";
        this.domItem = document.createElement("article");
        this.domItem.className = this.$skin;
        this.$$item = $(this.layoutSlot.appendChild(this.domItem));
        
        this.dataSlot = document.createElement("div");
        this.dataSlot.className = this.$skin + "-data";
        this.domItem.appendChild(this.dataSlot);
        
        this.diagnoseSlot = document.createElement("div");
        this.diagnoseSlot.className = this.$skin + "-diag-slot";
        this._$$diagnoseSlot = $(this.diagnoseSlot);
        
        this.scrollview = document.createElement("div");
        this.scrollview.className = this.$skin + "-scrollview";
        this.$$scrollview = $(this.scrollview);
        this._bindScrollView(true);
        
        this.$$body = $(this.body = document.createElement("div"));
        this.appendHeader();
        this.ensureLayoutMode();
        this.scrollview.appendChild(this.body);
        this.dataSlot.appendChild(this.diagnoseSlot);
        this.dataSlot.appendChild(this.scrollview);
        this._ensureMenus();
        this.renderLayoutContent();
    },
    registerPositionedDialog: function(dlg, add){
        if (!this.positionedList) {
            this.positionedList = [];
        }
        if (add) {
            this.positionedList.push(dlg);
        }
        else {
            if (this.positionedList) {
                for (var ii = 0, jj = this.positionedList.length; ii < jj; ii++) {
                    if (this.positionedList[ii] == dlg) {
                        this.positionedList.splice(ii, 1);
                        break;
                    }
                }
            }
        }
    },
    resizePositionedDialogs: function(){
        if (this.positionedList) {
            for (var ii = 0, jj = this.positionedList.length; ii < jj; ii++) {
                var dlg = this.positionedList[ii];
                if (dlg && !dlg.disposed) {
                    dlg.onWindowResize(null, true);
                }
            }
        }
    },
    _bindScrollView: function(bind){
        var self = this;
        if (bind) {
            self.$$scrollview.bind("scroll", function(evt){
                self.resizePositionedDialogs();
                if (self._scrollViewListeners) {
                    var ids = Object.keys(self._scrollViewListeners);
                    for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                        if (self._scrollViewListeners[ids[ii]]) {
                            var list = self.idMap[ids[ii]];
                            if (list) {
                                self._scrollViewListeners[ids[ii]](list.scroller);
                            }
                        }
                    }
                }
            });
        }
        else {
            if (self.$$scrollview) {
                self.$$scrollview.unbind("scroll");
            }
        }
    },
    addScrollViewListener: function(id, handler){
        this._scrollViewListeners = this._scrollViewListeners || {};
        this._scrollViewListeners[id] = handler;
    },
    removeScrollViewListener: function(id){
        if (this._scrollViewListeners) {
            delete this._scrollViewListeners[id];
        }
    },
    _ensureMenus: function(){
        this.menuBar = new MenuBar();
        this.menuBar.load(this);
    },
    _appendHeaderFooter: function(){
        if (!this._headerFoooter) {
            this._headerFoooter = document.createElement("div");
            this._headerFoooter.className = this.$skin + "-head-footer";
            this._headerNav = document.createElement("div");
            this._headerNav.className = this.$skin + "-head-footer-nav";
            this._headerFoooter.appendChild(this._headerNav);
            this.header.appendChild(this._headerFoooter);
        }
    },
    appendArticleMenus: function(slot){
        if (this.$facet == "$details" || this.$facet == "$edit") {
            this._appendHeaderFooter();
            document.site.emptyDom(this._headerNav);
            this._menusPager = this.loadNewItem(this._headerNav, {
                $isAuthoringEnabled: false,
                $skin: "s-page-pager",
                $category: "menus",
                $itemIcon: {
                    $mode: "iconText",
                    $path: "list/s-record-"
                },
                $layout: {
                    $autoSize: true,
                    $layoutType: "row",
                    $items: [{
                        $bind: "$first",
                        $title: this.localize.dskpFirstRecord
                    }, {
                        $bind: "$previous",
                        $title: this.localize.dskpPreviousRecord
                    }, {
                        $bind: "$next",
                        $title: this.localize.dskpNextRecord
                    }, {
                        $bind: "$last",
                        $title: this.localize.dskpLastRecord
                    }]
                }
            });
        }
        RawPage.prototype.appendArticleMenus.call(this, slot);
    },
    onMenuDataFilled: function(menuItem){
        if (menuItem && this.$mainAction && menuItem.$item.$bind == this.$mainAction) {
            menuItem.mn.className += " s-main-" + this.$mainAction.substr(1);
        }
        if (this.menuBar) {
            this.menuBar.onMenuDataFilled(menuItem);
        }
        else {
            RawPage.prototype.onMenuDataFilled.call(this);
        }
    },
    diposeContent: function(){
        RawPage.prototype.diposeContent.call(this);
        document.site.emptyDom(this.body);
        this.loaded = false;
        if (this.menuBar) {
            if (this.menuBar.barSlot) {
                document.site.removeDomChild(this.menuBar.barSlot);
            }
            this.menuBar.dispose();
        }
        if (this.diagnosesPanel) {
            document.controller.disposeObject(this.diagnosesPanel);
            document.site.emptyDom(this.diagnoseSlot);
        }
        this._scrollViewListeners = this.diagnosesPanel = this.menuBar = null;
    },
    
    reloadLayout: function($item){
        RawPage.prototype.reloadLayout.call(this, $item);
        this.garbage.load(this);
    },
    addMenuItem: function($menus, groupId){
        var group;
        if (groupId) {
            group = this.idMap[groupId];
            if (group) {
                if ($menus.$links) {
                    var $bind, $binds = Object.keys($menus.$links);
                    for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                        $bind = $binds[ii];
                        group.addMenuItem({
                            $bind: $bind,
                            $icon: $menus.$links[$bind].$icon
                        });
                    }
                }
                if ($menus.$actions) {
                    var $bind, $binds = Object.keys($menus.$actions);
                    for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                        $bind = $binds[ii];
                        group.addMenuItem({
                            $bind: $bind,
                            $isAction: true
                        }, true);
                    }
                }
            }
        }
        this.applyActionLinkChange($menus);
    },
    onMenuClick: function(menuItem){
        return this.garbage.onMenuClick(menuItem);
    },
    _appendNewSectionNode: function(article, sectionNode){
        for (var ii = 0, jj = sectionNode.garbage.length; ii < jj; ii++) {
            this.garbage.onAddField(sectionNode.garbage[ii]);
        }
        for (var ii = 0, jj = sectionNode.free.length; ii < jj; ii++) {
            this.garbage.onAddField(sectionNode.free[ii]);
        }
        if (sectionNode.children) {
            for (var ii = 0, jj = sectionNode.children.length; ii < jj; ii++) {
                var child = sectionNode.children[ii];
                if (child.garbage || child.free) {
                    this._appendNewSectionNode(article, child);
                }
            }
        }
    },
    _loadAddNewItem: function(article, newAddItem){
        var $item;
        if (newAddItem.$fieldBind) {
            if (newAddItem.$isFreeField) {
                this.garbage.onAddField(newAddItem.$fieldBind);
            }
            $item = {
                $bind: newAddItem.$fieldBind,
                $category: newAddItem.$fieldCategory || "field",
                $skin: newAddItem.$fieldSkin
            };
        }
        else {
            if (newAddItem.sectionNode) {
                this._appendNewSectionNode(article, newAddItem.sectionNode);
                if (newAddItem.sectionNode.loadedFields.length) {
                    article.reloadingFields = article.reloadingFields || {};
                    for (var ii = 0, jj = newAddItem.sectionNode.loadedFields.length; ii < jj; ii++) {
                        var field = newAddItem.sectionNode.loadedFields[ii];
                        if (field && field.$item && field.$item.$bind) {
                            article.reloadingFields[field.$item.$bind] = field;
                            field.layoutParent.extractItem(field);
                        }
                    }
                }
            }
            $item = newAddItem.$item ||
            {
                $category: "section"
            };
            if (this.$isFusionPage && $item.$layout) {
                $item.$layout = this.cleanLayoutSetting($item.$layout);
            }
        }
        var newItem = this.createNewItem($item, this);
        newItem.$newAddItem = true;
        return newItem;
    },
    onAddNewItem: function(article, targetItem, newItem, $insertAt){
        var newChild = newItem;
        if (newItem.$awAddNewItem) {
            newChild = this._loadAddNewItem(article, newItem);
        }
        newChild = this._addNewItem(article, targetItem, newItem.$designLevel, newItem.$bind, newChild, $insertAt);
        if (newItem.$designLevel == "field") {
            this.garbage.onAddField(newItem.$fieldBind || newItem.$vignette);
        }
        var section = newChild.boxParent;
        if (section.$item.$fieldsIsTopLabelAlignment !== undefined ||
        section.$item.$fieldsIsRightTextLabelAlignment !== undefined ||
        section.$item.$fieldsIsTitleHidden !== undefined) {
            if (newChild.isField) {
                section.applyDesignMetaDataToField(newChild, section.$item);
            }
            else {
                if (newChild.isSection) {
                    newChild.applyDesignMetaData({
                        $fieldsIsTopLabelAlignment: section.$item.$fieldsIsTopLabelAlignment,
                        $fieldsIsRightTextLabelAlignment: section.$item.$fieldsIsRightTextLabelAlignment,
                        $fieldsIsTitleHidden: section.$item.$fieldsIsTitleHidden
                    }, true);
                }
            }
        }
        delete article.reloadingFields;
        return newChild;
    },
    
    _addNewItem: function(awArticle, targetItem, $newAuthoringLevel, $bind, dropItem, $insertAt){
        var newChild;
        var targetBoxParent = targetItem.boxParent;
        var targetItemIndex = targetItem.layoutParent ? targetItem.layoutParent.$layout.$items.indexOf(targetItem.$item) : undefined;
        var targetLayout;
        
        if ($insertAt !== "undefined") {
            if (targetItem.layoutParent) {
                switch (targetItem.layoutParent.$layout.$layoutType) {
                    case "stack":
                        switch ($insertAt) {
                            case "bottom":
                                targetItemIndex++;
                                break;
                            case "left":
                            case "right":
                                if (!(targetItem.isLayout && targetItem.$layout.$layoutType == "row")) {
                                    var rowLayout = targetItem.layoutParent.createChildItem({
                                        $layoutType: "row",
                                        $items: []
                                    }, null, targetItemIndex);
                                    rowLayout.loadChildItems([targetItem]);
                                    rowLayout.$layout.$widths = null;
                                    targetItemIndex = $insertAt == "left" ? 0 : 1;
                                }
                                else {
                                    targetItemIndex = $insertAt == "left" ? 0 : targetItem.items.length;
                                }
                                break;
                        }
                        break;
                    case "row":
                        switch ($insertAt) {
                            case "top":
                            case "bottom":
                                if (targetItem.isSpaceBox) {
                                    //drop in an empty collumn
                                    targetLayout = targetItem.layoutParent;
                                    targetLayout.removeItem(targetItem, true);
                                    targetItem = targetLayout; //important 
                                }
                                else {
                                    //drop in row empty cell, wrap drop in stack
                                    targetItem.layoutParent.wrapIntack([targetItem], targetItemIndex);
                                    targetItemIndex = ($insertAt == "top") ? 0 : 1;
                                }
                                break;
                            case "left":
                            case "right":
                                targetItem.layoutParent.$layout.$widths = null;
                                if ($insertAt == "right") {
                                    targetItemIndex++;
                                }
                                break;
                        }
                        break;
                    case "tabs":
                        /*if ($insertAt == "right") {
                     targetItemIndex++;
                     }*/
                        break;
                }
            }
        }
        targetLayout = targetLayout || targetItem.layoutParent;
        if (dropItem && dropItem.isLayout) {
            if (!targetLayout) {
                targetItemIndex = $insertAt == "top" ? 0 : 1;
                targetItem = targetItem.ensureHasParent();
                targetLayout = targetItem.layoutParent;
            }
            newChild = targetLayout.loadChildItem(dropItem, null, targetItemIndex);
        }
        else {
            if (targetItem.isLayout) {
                targetItem.setChildAuhtoringLevel();
            }
            var $targetAuthoringLevel = targetItem.$chilAuthoringLevel || targetItem.$designLevel;
            if (targetItem.isLayout) {
                $targetAuthoringLevel = targetItem.$chilAuthoringLevel;
                if (targetItem.isRow && ($insertAt == "left" || $insertAt == "right")) {
                    targetLayout = targetItem;
                }
                if (!targetLayout) {
                    targetItemIndex = $insertAt == "top" ? 0 : 1;
                    targetItem = targetItem.ensureHasParent();
                    targetLayout = targetItem.layoutParent;
                }
            }
            if ($targetAuthoringLevel == "field") {
                if ($newAuthoringLevel == "field") {
                    newChild = targetLayout.loadChildItem(dropItem, null, targetItemIndex);
                }
                else {
                    //dragged section  
                    if (dropItem.layoutContent) {
                        targetLayout.loadChildItems(dropItem.layoutContent.getFields(), targetItemIndex);
                        if (dropItem.layoutParent) {
                            dropItem.layoutParent.removeItem(dropItem, true);
                        }
                    }
                    else {
                        var $children = dropItem.getItemSettings(null, true);
                        for (var ii = 0, jj = $children.length; ii < jj; ii++) {
                            targetLayout.createChildItem($children[ii], null, targetItemIndex);
                        }
                    }
                    newChild = targetItem;
                }
            }
            else {
                if ($targetAuthoringLevel == "block" && $newAuthoringLevel == "section") {
                    if (dropItem.layoutContent) {
                        dropItem.layoutContent.setChildAuhtoringLevel();
                        if (dropItem.layoutContent.$chilAuthoringLevel == "block") {
                            targetLayout.loadChildItems(dropItem.layoutContent.getChildren(), targetItemIndex);
                            newChild = targetItem.boxParent;
                        }
                        else {
                            targetLayout.loadChildItems(dropItem.layoutContent.getChildren(), targetItemIndex);
                            if (dropItem.layoutParent) {
                                dropItem.layoutParent.removeItem(dropItem, true);
                            }
                            newChild = targetLayout.boxParent;
                        }
                    }
                    else {
                        var $chilAuthoringLevel = "block";
                        var $children = dropItem.getItemSettings();
                        if ($children.length > 0) {
                            $chilAuthoringLevel = $children[0].$bind ? "field" : "block";
                        }
                        for (var ii = 0, jj = $children.length; ii < jj; ii++) {
                            targetLayout.createChildItem($children[ii], null, targetItemIndex);
                        }
                        if ($chilAuthoringLevel == "block") {
                            newChild = ($chilAuthoringLevel == "block") ? targetItem.boxParent : targetLayout.boxParent;
                        }
                    }
                }
                else {
                    newChild = targetLayout.ensureSection(dropItem, targetItemIndex);
                }
            }
        }
        if (!newChild) {
            newChild = targetItem && targetItem.isSpaceBox;
            newChild = newChild || awArticle;
        }
        if (targetItem && targetItem.isSpaceBox) {
            targetItem.layoutParent.removeItem(targetItem, true, false);
        }
        if (dropItem && !dropItem.layoutParent && dropItem.articleParent) {
            dropItem.articleParent.removeItem(dropItem, true);
        }
        return newChild;
    },
    loadSelectedDesignView: function($selectedView){
        var self = this;
        var query = document.controller.parseUrl(this.$pageRepresentationURL);
        query.sendRequest({
            params: {
                select: "$views"
            }
        }, function(data, response, requestUrl){
            self.$views = data.$views;
            self.loadPageViewSelector();
            self.pageViewSelector.selectView($selectedView);
        });
    },
    dispose: function(){
        if (this.id && document.site.desktopPages) {
            delete document.site.desktopPages[this.id];
        }
        if (this.isDesigned) {
            this.designItem(false);
        }
        this._bindScrollView(false);
        if (this.menuBar) {
            this.menuBar.dispose();
        }
        if (this.garbage) {
            this.garbage.dispose();
        }
        if (this.diagnosesPanel) {
            document.controller.disposeObject(this.diagnosesPanel);
        }
        if (this.pageViewSelector) {
            this.pageViewSelector.dispose();
        }
        this._headerNav = this.securityViewSlot = this.security = this.openerHttpQuery = this.noProtoFields = null;
        this.garbage = this.$persistPrototype = this.pageViewSelector = null;
        this._advancedFieldsSlot = this._advancedFieldsLink = this._$$ditagnoseSlot = this.diagnoseSlot = this.dataSlot = this._$$header = this._headerFoooter = this.headerViewSelector = null;
        this.$$scrollview = this.scrollview = this.$menus = this.menuBar = null;
        this.positionedList = this.diagnosesPanel = this.headerCore = this.headerCoreLeft = this.domDescription = null;
        RawPage.prototype.dispose.call(this);
    }
});
