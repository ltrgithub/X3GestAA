"use strict";
var _helpers = require('@sage/syracuse-core').helpers;
var _garbage = require('syracuse-ui/lib/page/tools/fieldsGarbage');
var _paging = require("syracuse-ui/lib/field/array/tools/paging");
var _designerViewChoice = require('syracuse-ui/lib/authoring/designerViewChoice');
var SideBar = require("syracuse-ui/lib/page/tools/sideBar").SideBar;
var _facetWithoutDesigner = ["$summary"];

var _menus = {
	_mainActions: {
		$cube: "$create",
		$query: "$create",
		$details: "$edit",
		$edit: "$save",
		$request: "$invoke"
	},
	addToPage: function(page) {
		if (!page.$item.$menus) {
			page.$item.$menus = [{
				$skin: page.$skinMenu || "s-mn-main",
				$category: "menus",
				$isBoxCollapsable: true,
				$isMenusBag: true,
				$layout: {
					$items: []
				}
			}];
			if (page.$mainAction) {
				page.$item.$menus[0].$layout.$items.push({
					$showIfSet: true,
					$bind: page.$mainAction,
					$style: "main"
				});
			}
		} else {
			if (!Array.isArray(page.$item.$menus)) {
				page.$item.$menus = [{
					$isMenusBag: true,
					$layout: {
						$items: syra_pageBuilder.getDefinedFieldList(page.$item.$menus.$layout.$items)
					}
				}];
			}
		}
		for (var ii = 0, jj = page.$item.$menus.length; ii < jj; ii++) {
			var $menus = page.$item.$menus[ii];
			$menus.$category = "menus";
			if ($menus.$isBoxCollapsable === undefined) {
				$menus.$isBoxCollapsable = true;
			}
			if ($menus.$skin === undefined) {
				$menus.$skin = page.$skinMenu || "s-mn-main";
			}
		}
		return page.$item.$menus;
	},
	addBar: function(page) {
		var bar = page.menuBar = new SideBar();
		bar.preferenceKey = page.isVignettePage ? "vignette-menubar" : "menuBar";
		bar.options = bar.options || {};
		bar.options.resizeDirection = (page.$pageCategory == "vignette" || page.isLandingPage) ? "left" : "right";
		bar.options.$skin = page.$skin + "-menubar";
		syra_item.initialize(page, bar);
		bar.slot = syra_dom.div(page.$skin + "-menubar-slot");
		bar.body = syra_dom.div(page.$skin + "-menubar-body");

		if (page.$pageCategory == "vignette" || page.isLandingPage) {
			bar.page.domItem.insertBefore(bar.slot, bar.page.domItem.firstChild);
		} else {
			bar.page.domItem.appendChild(bar.slot);
		}
		page.menuBar.load(page);
		if (!syra_site.mobile) {
			if (page.isFusionPage && page.$item.$menus && page.$item.$menus.length) {
				page.$item.$menus[0].$isMenusBag = true;
			}
			page.$mainAction = this._mainActions[page.$facet];
			page.menuBarLayout = page.addItem(bar.body, {
				$layoutType: "stack",
				$items: _menus.addToPage(page)
			});
		}
	}
};


function ResizableList() {
	this.stack = [];
}

_helpers.defineClass(ResizableList, null, {
	add: function(item) {
		this.stack.indexOf(item) < 0 && this.stack.push(item);
	},
	remove: function(item) {
		var ii = this.stack && this.stack.indexOf(item);
		(ii >= 0) && this.stack.splice(ii, 1);
	},
	resize: function(articleParent) {
		for (var ii = 0, jj = this.stack.length; ii < jj; ii++) {
			var item = this.stack[ii];
			if (!item.disposed && item.resizeItem && (item.displayed !== false)) {
				if (articleParent && (item.articleParent != articleParent)) {
					continue;
				}
				item.resizeItem();
			}
		}
	}
});

function DesktopPage() {}

exports.DesktopPage = _helpers.defineClass(DesktopPage, null, {
	getTitle: function(applyDefault) {
		var title = (this.domTitle && this.domTitle.textContent) || (this.$item && this.$item.$title) || "";
		if ((title == "" || title == "-") && applyDefault !== false) {
			title = this._defaultTitle || "";
		}
		return title;
	},
	getMainAction: function() {
		var $binds = Object.keys(this.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var menus = this.menuItems[$binds[ii]];
			if (menus && menus.length && ((menus[0].$item.$style === "main") || (menus[0].$item.$kind === "main"))) {
				return menus[0];
			}
		}
	},
	ensureMenuBar: function() {
		if (!this.isMenuBarDisabled) {
			this.isMenuBarDisabled = this.$item.$isMenuBarDisabled;
			if (!this.isMenuBarDisabled) {
				this.isMenuBarDisabled = this.overPanel && !(this.isFusionPage && this.$facet != "$lookup");
			}
		}!this.isMenuBarDisabled && _menus.addBar(this);
	},
	onItemInOut: function(onEnter, event, target) {},
	setTitle: function(title, isDynamic) {
		if (this.domTitle) {
			if (isDynamic && this.$item.$XID) {
				//set only by convergence setDataContainer
				this.dynamicTitles = this.dynamicTitles || {};
				this.dynamicTitles[this.$item.$XID] = title;
			}
			if (title != null && title != "") {
				this.titleText = title;
				if (this.titleText == "-") {
					this.titleText = "";
				}
				if (this.titleText.indexOf("{") < 0) {
					this.domTitle.textContent = this.titleText;
					if (!this.domTitle.syrainout) {
						this.domTitle.title = this.titleText;
					}
				} else {
					this.domTitle.textContent = "";
					var parsedText = syra_expression.render(this, this.titleText, this.domTitle, this.$skin + "-title-field", false);
					if (parsedText && parsedText.charAt(0) == "@") {
						this.isTitleUnlocalized = this.titleText == ("{" + parsedText + "}");
						this.domTitle.style.visibility = this.isTitleUnlocalized ? "hidden" : "";
					} else {
						this.titleText = parsedText;
						if (this.isTitleUnlocalized) {
							this.isTitleUnlocalized = false;
							this.domTitle.style.visibility = "";
						}
					}
				}
				this.isTitleHidden = this.$isTitleHidden || this.$item.$isTitleHidden;
			} else {
				if (!this.isFusionPage) {
					this.isTitleHidden = true;
				} else {
					this.domTitle.textContent = this.titleText = "";
				}
			}
			syra_dom.hide(this.header, this.isTitleHidden);
		}
		this.isPageLoaded && syra_site.refreshBrowserTitle(this);
	},
	switchDesigner: function(open) {
		var self = this;
		if (open) {
			require.async("syracuse-ui/lib/authoring/pageDesigner", function(error, module) {
				if (error) {
					syra_alert.error(error);
					return;
				}
				syra_fields.advancedState.toggleAllFields(self, true);
				self.designer = new module.Designer();
				self.designer.openDesigner(self);
				self.resizeItem(true);
			});
		} else {
			if (self.designer) {
				syra_alert.clear(self.page);
				self.designer.dispose();
				syra_fields.advancedState.toggleAllFields(self);
				self.designer = null;
				if (self.isVignettePage) {
					self.resizeItem(true);
				} else {
					syra_site.resizeItem();
				}

			}
		}
	},
	setShortcutSpyerList: function(list) {
		if (list && !list.isArrayField) {
			while (list && !list.isArrayField) {
				list = list.articleParent;
			}
			if (!list) {
				return;
			}
		}
		this.shortcutSpyerList = list;
	},
	renderLayoutContent: function() {
		this.layoutContent = this.addItem(this.body, this.$item.$layout);
	},
	addItem: function(slot, $item, boxParent, initData) {
		var item = syra_item.add(this, $item, boxParent || this);
		if (item) {
			item.layoutSlot = slot;
			item.load(initData);
		}
		return item;
	},
	getPageSize: function(updated) {
		if (this.layoutSlot && this.size == undefined) {
			var slot = this.layoutSlot;
			var sizeSize = syra_site.getSize();
			var diff = 0;
			var isHFit = !this.inlinePageHost && !this.vignetteField;
			if (this.vignetteField && this.vignetteField.isMaximized) {
				isHFit = true;
				slot = this.vignetteField.page.layoutSlot;
				diff = this.vignetteField.header.clientHeight + (2 * this.vignetteField.header.offsetTop); //2* offsetTop for margin
			}
			if (slot == syra_site.body) {
				var body = sizeSize.body;
				this.size = {
					height: body.height,
					width: body.width
				};
			} else {
				this.size = {
					height: this.layoutSlot.clientHeight,
					width: this.layoutSlot.clientWidth
				};
			}
			this.size.isHFit = isHFit;
			this.size.height = this.size.height - diff;
			this.size.headerHeight = this.header ? this.header.clientHeight : 0;

			if (this.overPanel) {
				var overSize = this.size.overPanel = {
					maxWidth: this.overPanel.$width || sizeSize.overPanel.maxWidth,
					maxHeight: this.overPanel.$height || sizeSize.overPanel.maxHeight
				};
				if (this.$facet == "$lookup" || this.$facet == "$select") {
					this.size.lookupMargin = (this.domItem.offsetTop * 2) + this.size.headerHeight;
				}
				overSize.marginWidth = this.domItem.offsetLeft * 2;
				overSize.marginHeight = this.domItem.offsetTop * 2;
			}
		}
		return this.size;
	},
	resizeItem: function(resize, articleParent) {
		if (this.displayed !== false && this.isPageLoaded && !this._isDataChanging) {
			if (syra_dom.isVisible(this.domItem)) {
				this.isResizing = true;
				if (this.diagnoseSlot) {
					var newHeight = this.diagnoseSlot.clientHeight;
					if (newHeight != this.diagnoseHeight) {
						this.contentSlot.style.paddingTop = (this.diagnoseHeight = newHeight) + "px";
					}
				}
				delete this.size;
				this.getPageSize();
				syra_over.resizePositioned(this);
				this.designer && this.designer.resizeItem(resize);
				if (this.bars) {
					for (var ii = 0, jj = this.bars.length; ii < jj; ii++) {
						this.bars[ii].resizeSplitter();
					}
				}
				this.resizableList.resize(articleParent);
				this.overPanel && this.overPanel.resize();
				this.inlinePageHost && this.inlinePageHost.onInlinePageResized(this);
				this.isResizing = false;
			}
		}
	},
	setDescription: function($description) {
		if ($description) {
			var title = this.domTitle ? this.domTitle.textContent : null;
			if (title != $description) {
				if (!this.domDescription) {
					this.domDescription = syra_dom.div(this.$skin + "-description");
					if (this.domTitle) {
						this.domTitle.parentNode.insertBefore(this.domDescription, this.domTitle.nextSibling);
					} else {
						this.header.appendChild(this.domDescription);
					}
				}
				if ($description.indexOf("{") < 0) {
					this.domDescription.textContent = $description;
				} else {
					syra_expression.render(this, $description, this.domDescription, this.$skin + "-description-field", false);
				}
				if (title && title == this.domDescription.textContent) {
					syra_dom.hide(this.domDescription, true);
				}
			}
		}
	},
	startChange: function() {
		this._isDataChanging = true;
	},
	applyChange: function(newData) {
		if (!this.disposed && this.dataset) {
			if (newData && newData.$isPartialDelta) {
				this.$isPartialDelta = true;
				//delete newData.$isPartialDelta;
			}
			if (newData) {
				syra_dataset.applyDelta(this, this.dataset, newData);
				newData.$description && this.setDescription(newData.$description);
				syra_article.applyChange(this, newData);
			}
			if (!this._isDataChanging) {
				this.endChange();
			}
			delete this.$isPartialDelta;
		}
	},
	endChange: function(discardRedraw) {
		this._isDataChanging = false;
		if (!this.disposed) {
			if (!discardRedraw) {
				if (this.menuBar && !this.menuBar.isInitialized) {
					this.menuBar.isInitialized = true;
					var body = (this.menuBarLayout && this.menuBarLayout.domItem) || this.menuBar.body;
					!body.firstChild && this.menuBar.toggleBar(false);
				}
				this.alertPanel && this.alertPanel.refresh();
				this.isPageLoaded && this.resizeItem(true);
			}
		}
		if (!this.disposed && this.isPageLoaded && !this.isFusionPage) {
			syra_site.refreshBrowserTitle(this);
		}
		syra_quality.page_endChange(this);
	},
	isInMenuBar: function(item) {
		var menuGroupRoot = item.menuGroupRoot || (item.boxParent && item.boxParent.menuGroupRoot);
		var layoutParent = menuGroupRoot && menuGroupRoot.layoutParent;
		return layoutParent && layoutParent == this.menuBarLayout;
	},
	savePageDesign: function() {
		if (this.isVignettePage) {
			var $vignette = _helpers.object.clone(this.$item, true);
			delete $vignette.$menus;
			if (this.altVignetteKey) {
				(this.vignetteField.$item.$altVignettes = this.vignetteField.$item.$altVignettes || {})[this.altVignetteKey] = $vignette;
			} else {
				this.vignetteField.$item.$vignette = $vignette;
			}
			if (this.vignetteField.page.designer) {
				this.vignetteField.page.designer.endArticleUpdate();
			}
		}
	},
	load: function(initData) {
		this.isDesktopPage = true;
		switch (this.$pageCategory) {
			case "lookup":
				this.$skin = this.$item.$skin || "s-page";
				this._defaultTitle = syra_local.dskpPageTitle;
				break;
			default:
				this.$skin = this.$skin || this.$item.$skin || "s-page";
				if (this.inlinePageHost) {
					this.$skin = "s-inline-page " + this.$skin;
				}
				this._defaultTitle = this._defaultTitle || syra_local.dskpPageTitle;
				break;
		}
		var autoInsertFields;
		if (!this.isAutoInsertFieldDisabled) {
			autoInsertFields = this.insertNewItems();
		}

		this.bars = [];
		this.resizableList = new ResizableList();
		syra_pageBuilder.initialize(this);
		this.$skin = this.$item.$skin || this.$skin || "s-page";
		this.$designLevel = "article";
		this.externalAdapter = this.$item.externalAdapter || syra_site.externalAdapter;
		delete this.$item.externalAdapter;

		syra_article.beforeDraw(this);
		this.drawPage();
		syra_article.endDraw(this, initData);

		if (!this.isAutoInsertFieldDisabled) {
			(this.garbage = new _garbage.FieldsGarbage()).load(this);
			autoInsertFields && autoInsertFields.alert();
		}

		if (this.mainPageDesignerAccess === undefined) {
			this.mainPageDesignerAccess = _facetWithoutDesigner.indexOf(this.$facet) >= 0 ? "disabled" : null;
		}
		return this;
	},
	ensureSkin: function() {
		this.$skin = this.$skin || this.$item.$skin;
	},
	drawPage: function() {
		this.$item.$title = this.$item.$title || "{$title}";
		//this.domItem = syra_dom.article(this.$skin, this.layoutSlot);
		this.domItem = syra_dom.article(this.$skin);
		this.domItem.syraPage = this.domItem.syraItem = this.id;
		this.contentSlot = syra_dom.div(this.$skin + "-content-slot");
		this.diagnoseSlot = syra_dom.div("", this.contentSlot);
		this.scrollview = syra_dom.div(this.$skin + "-scrollview", this.contentSlot);

		this.body = document.createElement("div");

		this.header = syra_dom.header(this.$skin + "-head", this.scrollview);

		syra_nav.breadcrumb && syra_nav.breadcrumb.addPath(this, this.header);

		this.domTitle = syra_dom.div(this.$skin + "-title", this.header);
		this.domTitle.syraItem = this.id;
		delete this.$item.$isTitleHidden;
		this.setTitle(this.$item.$title || (this.$field ? this.$field.$title : null));
		this.setDescription(this.$prototype.$description || this.$item.$description);
		_designerViewChoice.registerDesignViews(this);

		this.ensureLayoutMode();
		this.scrollview.appendChild(this.body);
		this.domItem.appendChild(this.contentSlot);
		this.ensureMenuBar();
		this.renderLayoutContent();
		this.layoutSlot && this.layoutSlot.appendChild(this.domItem);
	},
	applyDesignMeta: function() {
		//inportant for authoring
	},
	getMenuItem: function($bind) {
		var bound = this.menuItems[$bind];
		return bound ? bound[0] : null;
	},

	getDataUrl: function() {
		var $parsedUrl = syra_expression.parse(this, this.dataset.$url);
		return $parsedUrl || this.$prototype.$representationUrl;
	},
	fetch: function(options, success, error) {
		var self = this;
		if (options) {
			if (options.isPageLoading) {
				(options.params = options.params || {}).count = _paging.getDefaultItemsPerPage(self);
				delete options.isPageLoading;
			}
			delete options.field;
			self.lastFetchOptions = syra_site.clone(options);
		} else {
			delete self.lastFetchOptions;
		}
		options = options || {};
		options.url = options.$url || self.getDataUrl();
		options.page = self;
		options.success = success;
		if (!options.success) {
			options.success = function(data, response, requestUrl) {
				self.startChange();
				self.applyChange(data, response, requestUrl);
				self.endChange();
			};
		}
		options.error = error;
		syra_ajax.send(options);
	},
	fetchLastRequest: function(callback, error) {
		this.fetch(this.lastFetchOptions, callback, error);
	},
	freezeDeletedPage: function() {
		var $properties = {};
		var $binds = Object.keys(this.boundFields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			$properties[$binds[ii]] = {
				$isDisabled: true
			};
		}
		this.applyChange({
			$properties: $properties
		});
		var $binds = Object.keys(this.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var isDisabled = true;
			var $bind = $binds[ii];
			switch (this.$facet) {
				case "$details":
					isDisabled = ($bind != "$query");
					break;
			}
			if (isDisabled) {
				var menus = this.menuItems[$bind];
				for (var mm = 0, kk = menus.length; mm < kk; mm++) {
					menus[mm].disable(true);
				}
			}
		}
	},


	getBindTitle: function($bind, $field) {
		var $X3Name = $field ? $field.$X3Name : null;
		return $X3Name || $bind;
	},
	getMasterPage: function() {
		return this;
	},
	reloadLayout: function($item, layoutSlot) {
		syra_fields.advancedState.clearPageButton(this);
		this.startChange();
		var prevLayout = this.layoutContent && this.layoutContent.domItem;
		var fields = this.layoutContent.getFields();
		if (fields && fields.length) {
			this.reloadingFields = {};
			for (var ii = 0, jj = fields.length; ii < jj; ii++) {
				var field = fields[ii];
				var $key = field && field.$item && (field.$item.$bind || field.$item.$fieldId);
				if ($key) {
					this.reloadingFields[$key] = field;
				}
			}
		}
		syra_layout.extractItems(this.layoutContent, fields);
		syra_layout.clearContent(this.layoutContent);
		this.$item = $item;
		var autoInsertFields = this.insertNewItems();
		this.ensureLayoutMode();
		this.renderLayoutContent(layoutSlot);
		this.reloadingFields = null;

		syra_menus.applyChange(this, this.$prototype);
		syra_menus.applyChange(this, this.dataset);
		prevLayout && syra_dom.remove(prevLayout);

		syra_layout.validateLayoutContent(this);
		this.endChange();
		autoInsertFields && autoInsertFields.alert();

		this.garbage && this.garbage.load(this);
	},
	ensureLayoutMode: function() {
		this.ensureSkin();
		if (this.domItem) {
			var domItemCss = this.$skin;
			var headerCss = this.$skin + "-head";
			var domTitleCss = this.$skin + "-title";
			var bodyCss = this.$skin + "-body";
			if (this.$item.$css) {
				var $css = " " + this.$item.$css;
				domItemCss += $css;
				bodyCss += $css;
				headerCss += $css;
				domTitleCss += $css;
			}
			if (this.$item.$style) {
				var $style = " s-cst-sty-" + this.$item.$style;
				domItemCss += $style;
				headerCss += $style;
				domTitleCss += $style;
				bodyCss += $style;
			}

			this.domItem.className = domItemCss;
			if (this.body) {
				this.body.className = bodyCss;
			}
			if (this.domTitle) {
				this.domTitle.className = domTitleCss;
			}
			if (this.header) {
				this.header.className = headerCss;
			}
			this.layoutParent && this.layoutParent.ensureLayoutSlot(this);
		}
	},
	insertNewItems: function(displayDiagnoses, designLevel) {
		// Auto insert fields/sections/blocks in authored page... just for Fusion for now
		this._autoInsertFields && this._autoInsertFields.dispose();
		if (this.isFusionPage === undefined && this.page ? this.page.isFusionPage : this.isFusionPage) {
			(this._autoInsertFields = new _garbage.FieldsAutoInsert()).load(this, designLevel || "article");
		}
		if (this._autoInsertFields && displayDiagnoses) {
			this._autoInsertFields.alert();
		}
		return this._autoInsertFields;
	},
	scrollToItem: function(item, area, isDomItem) {
		if (!isDomItem) {
			var masterPage = item.page.getMasterPage();
			if (masterPage != this) {
				masterPage.scrollToItem(item, area, isDomItem);
				return;
			}
		}
		if (item == this) {
			if (this.scrollview) {
				this.scrollview.scrollTop = this.scrollview.scrollLeft = "0px";
			}
		} else {
			var target;
			area = area || this.scrollview || syra_site.body;
			if (isDomItem) {
				target = item;
			} else {
				var parent = item;
				while (parent) {
					if (parent.tabTitle && !parent.$opened) {
						parent.openTab();
					}
					parent = parent.boxParent;
				}
				if (item && (item.tabTitle || item.domItem)) {
					target = item.tabTitle || item.domItem;
				}
			}
			if (target) {
				var targetRect = syra_dom.getBoundingClientRect(target);
				var areaRect = syra_dom.getBoundingClientRect(area);
				if (targetRect.top < areaRect.top) {
					//target is above area
					area.scrollTop -= ((areaRect.top - targetRect.top) + (areaRect.height > 20 ? 20 : 0));
				} else {
					if (targetRect.top > areaRect.bottom || targetRect.bottom > areaRect.bottom) {
						var diff = areaRect.height - targetRect.height;
						if (diff > 0) {
							area.scrollTop += (targetRect.bottom - areaRect.bottom) + Math.min(20, diff);
						} else {
							//ensure top is visible
							if (targetRect.top > areaRect.bottom) {
								area.scrollTop = 0;
							} else {
								diff = areaRect.bottom - targetRect.top;
								if (diff < 20) {
									area.scrollTop -= (20 - diff);
								}
							}
						}
					}
				}
				if (targetRect.left < areaRect.left) {
					//target is left  area
					area.scrollLeft -= ((areaRect.left - targetRect.left) + (areaRect.width > 20 ? 20 : 0));
				} else {
					if (targetRect.left > areaRect.right || targetRect.right > areaRect.right) {
						var diff = areaRect.width - targetRect.width;
						if (diff > 0) {
							area.scrollLeft += (targetRect.right - areaRect.right) + Math.min(20, diff);
						} else {
							if (targetRect.left > areaRect.right) {
								area.scrollLeft = 0;
							} else {
								diff = areaRect.right - targetRect.left;
								if (diff < 20) {
									area.scrollLeft -= (20 - diff);
								}
							}
						}
					}
				}
			}
		}
	},
	dispose: function() {
		if (this.mainPageDesignerAccess === "disabled") {
			syra_site.refreshMainPageDesignerSecurity(syra_site.page);
		}
		syra_form.remove(this);
		this.isDesigned && syra_site.switchItemDesigner(this, false);
		if (this.bars) { //pagestorage no default load
			while (this.bars.length) {
				this.bars[0].dispose();
			}
		}

		this._autoInsertFields && this._autoInsertFields.dispose();
		this.garbage && this.garbage.dispose();
		if (this.alertPanel) {
			syra_site.disposeObject(this.alertPanel);
			syra_dom.empty(this.diagnoseSlot);
		}
		_designerViewChoice.dispose(this);
		syra_pageBuilder.disposePage(this);
		syra_dom.empty(this.body);
		this.loaded = false;
		if (this.menuBar) {
			this.menuBar.slot && syra_dom.remove(this.menuBar.slot);
			this.menuBar.dispose();
		}
		syra_article.dispose(this);
	}
});