"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('./rawPage').RawPage;
var locale = require('syracuse-core/lib/locale');
var MenuBar = require('./menuBar').MenuBar;
var DiagnosesPanel = require('syracuse-ui/lib/diagnoses/diagnosesPanel').DiagnosesPanel;


function DesktopPage(){
}

exports.DesktopPage = helpers.defineClass(DesktopPage, RawPage, {

    getDefaultTitle: function(){
        return this._defaultTitle;
    },
    loadBox: function(initData){
        var localize = locale.resources(module)();
        switch (this.$pageCategory) {
            case "dashboard":
                this.$skin = this.$item.$skin || "s-dash";
                this.$defaultSkinBlock = "s-dash-h2";
                this.$defaultSkinSection = "s-dash-h1";
                this._defaultTitle = localize.p_dashboardTitle;
                this.$authoringSubType = "dashboard";
                this.$isSearchFacetEnabled = false;
                this.$autoFetch = false;
                break;
            case "portlet":
            case "vignette":
                this.$skin = this.$item.$skin || "s-vignette";
                this.$defaultSkinMenu = "s-vignette-menus";
                this.$defaultSkinBlock = "s-h2";
                this.$defaultSkinSection = "s-h2";
                this.$pageCategory = "vignette";
                this.$skinMainAction = "s-vignette-main-link";
                this._defaultTitle = localize.p_vignetteTitle;
                if (this.$facet == "$demo") {
                    this.$autoFetch = false;
                }
                this.$isSearchFacetEnabled = false;
                this.$item.$isTitleHidden = true;
                this.$isResizeEnabled = false;
                break;
            default:
                this.$skin = this.$item.$skin || "s-page";
                this._defaultTitle = localize.p_pageTitle;
                this.$isSearchFacetEnabled = this.$isSearchFacetEnabled !== false;
                break;
        }
        RawPage.prototype.loadBox.call(this, initData);
    },
    onWindowResize: function(){
        if (this._body.clientWidth) {
            if (document.site.body.clientWidth <= 900) {
                this.isAutoFloat = true;
                if (this.menuBar) {
                    if (this.menuBar.preferences.menuBar.isDocked) {
                        this.menuBar.preferences.menuBar.isDocked = false;
                        this.menuBar.preferences.menuBar.isCollapsed = true;
                        this.menuBar._ensureState();
                    }
                }
                if (this.fusionBar) {
                    if (this.fusionBar.preferences.convergenceBar.isDocked) {
                        this.fusionBar.preferences.convergenceBar.isDocked = false;
                        this.fusionBar.preferences.convergenceBar.isCollapsed = true;
                        this.fusionBar._ensureState();
                    }
                }
            }
            else {
                if (this.isAutoFloat) {
                    this.isAutoFloat = false;
                    if (this.menuBar) {
                        this.menuBar.preferences.menuBar.isDocked = true;
                        this.menuBar.preferences.menuBar.isCollapsed = false;
                        this.menuBar._ensureState();
                    }
                    if (this.fusionBar) {
                        this.fusionBar.preferences.convergenceBar.isDocked = true;
                        this.fusionBar.preferences.convergenceBar.isCollapsed = false;
                        this.fusionBar._ensureState();
                    }
                }
            }
            if (this.menuBar) {
                this.menuBar.onWindowResize();
            }
            if (this.fusionBar) {
                this.fusionBar.onWindowResize();
            }
            
        }
        this.fitPageToContainer();
        RawPage.prototype.onWindowResize.call(this);
    },
    fitPageToContainer: function(){
        if (this.$isResizeEnabled !== false) {
            var height = document.site.body.clientHeight;
            this._item.style.height = height + "px";
            this.scrollview.style.height = (height - this.scrollview.offsetTop) + "px";
            if (this.authoringContentView) {
                this.authoringContentView.style.height = (height - this.authoringContentView.offsetTop) + "px";
            }
        }
        else {
            /*if (this.$facet == "$lookup") {
             var height = this.scrollview.clientHeight;
             if (height) {
             this._body.style.height = (height - this._body.offsetTop) + "px";
             }
             }*/
        }
    },
    drawUserProfile: function(userProfile){
        if (document.site.$item.$isUserProfileQuickViewEnabled !== false) {
            if (!this.headerUserProfile) {
                this.headerUserProfile = document.createElement("div");
                this.headerUserProfile.className = this.$skin + "-head-user-profile";
                this._headerCore.appendChild(this.headerUserProfile);
            }
            else {
                document.site.emptyDom(this.headerUserProfile);
            }
            if (userProfile) {
                if (userProfile.selectedRole) {
                    var label = document.createElement("label");
                    label.className = this.$skin + "-head-user-role";
                    label.textContent = userProfile.selectedRole.description || "";
                    this.headerUserProfile.appendChild(label);
                }
                if (userProfile.selectedEndpoint) {
                    var label = document.createElement("label");
                    label.className = this.$skin + "-head-user-endpoint";
                    label.textContent = userProfile.selectedEndpoint.description || "";
                    this.headerUserProfile.appendChild(label);
                }
                userProfile.selectedRole && userProfile.selectedRole.description
            }
        }
    },
    setDescription: function($description){
        if ($description) {
            if (!this.domDescription) {
                this.domDescription = document.createElement("div");
                this.domDescription.className = this.$skin + "-description";
                this._headerBottom.appendChild(this.domDescription);
            }
            if ($description.indexOf("{") < 0) {
                this.domDescription.textContent = $description;
            }
            else {
                this._renderExpression($description, this.domDescription, this.$skin + "-description-field", false);
            }
        }
    },
    appendHeader: function(){
        this._header = document.createElement("header");
        this._header.className = this.$skin + "-head";
        this._header.style.display = "none";
        this.scrollview.appendChild(this._header);
        this._headerCore = document.createElement("div");
        this._headerCore.className = this.$skin + "-head-core";
        this._headerCore.appendChild(this._createBoxTitle());
        this.setTitle(this.$item.$title || (this.$field ? this.$field.$title : null));
        this._header.appendChild(this._headerCore);
        this._headerBottom = document.createElement("div");
        this._headerBottom.className = this.$skin + "-head-bottom";
        this.setDescription(this.$prototype.$description || this.$item.$description);
        this._header.appendChild(this._headerBottom);
    },
    showDiagnoses: function(message, options){
        if (!this.diagnosesPanel) {
            if (this.$pageCategory == "dashboard" || this.$pageCategory == "page" || this.$pageCategory == "fusion") {
                this.diagnosesPanel = new DiagnosesPanel();
                this.diagnosesPanel.appendToPage(this);
            }
        }
        if (this.diagnosesPanel) {
            this.diagnosesPanel.showDiagnoses(message, this, options);
        }
    },
    drawBox: function(){
        this.$item.$title = this.$item.$title || "{$title}";
        this._item = document.createElement("article");
        this._item.className = this.$skin;
        this.$$item = $(this.layoutSlot.appendChild(this._item));
        
        this.dataSlot = document.createElement("div");
        this.dataSlot.className = this.$skin + "-data";
        this._item.appendChild(this.dataSlot);
        
        this.diagnoseSlot = document.createElement("div");
        this.diagnoseSlot.className = this.$skin + "-diag-slot";
        
        
        this.scrollview = document.createElement("div");
        this.scrollview.className = this.$skin + "-scrollview";
        
        
        this.$$body = $(this._body = document.createElement("div"));
        this.appendHeader();
        this.ensureLayoutMode();
        this.scrollview.appendChild(this._body);
        this.dataSlot.appendChild(this.diagnoseSlot);
        this.dataSlot.appendChild(this.scrollview);
        this.fitPageToContainer();
        this._renderLayoutContent(this.$item);
        this._ensureMenus();
    },
    _ensureMenus: function(){
        if (this.$pageCategory == "vignette") {
            if (this.$facet != "$menu") {
                RawPage.prototype.appendArticleMenus.call(this);
            }
        }
        else {
            this.menuBar = new MenuBar();
            this.menuBar.load(this);
        }
        if (this.menuBar && this.menuBar._bar && this.$isSearchFacetEnabled) {
            this.loadNewItem(this.menuBar._bar, {
                $category: "searchFacets",
                $prototype: {},
                $bind: "$searchFacets"
            });
        }
    },
    onMenuDataFilled: function(){
        if (this.menuBar) {
            this.menuBar.onMenuDataFilled();
        }
        else {
            RawPage.prototype.onMenuDataFilled.call(this);
        }
    },
    diposeContent: function(){
        RawPage.prototype.diposeContent.call(this);
        this.$$body.empty();
        this.loaded = false;
        this.boundFields = {};
        this.idMap = {};
        this.menuItems = {};
        this.menuBoxes = [];
        if (this.menuBar) {
            if (this.menuBar._slot) {
                document.site.removeDomChild(this.menuBar._slot);
            }
            this.menuBar.dispose();
        }
        if (this.diagnosesPanel) {
            document.controller.disposeObject(this.diagnosesPanel);
            document.site.emptyDom(this.diagnoseSlot);
        }
        this.diagnosesPanel = this.menuBar = null;
    },
    reloadLayout: function($item){
        this.diposeContent();
        this.$item = $item;
        this.$menus = {};
        this._ensureMenus();
        this.applyActionLinkChange(this.$prototype);
        this.applyActionLinkChange(this.dataset);
        this.openBox(true);
    },
    dispose: function(){
        if (this.menuBar) {
            this.menuBar.dispose();
        }
        if (this.diagnosesPanel) {
            document.controller.disposeObject(this.diagnosesPanel);
        }
        this.$menus = this.menuBar = this.diagnosesPanel = this._headerCore = this._headerBottom = null;
        RawPage.prototype.dispose.call(this);
    },
});
