"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('./rawPage').RawPage;
var locale = require('syracuse-core/lib/locale');
var MenuBar = require('./menuBar').MenuBar;
var DiagnosesPanel = require('syracuse-ui/lib/diagnoses/diagnosesPanel').DiagnosesPanel;
var PageViewSelector = require('./pageViewSelector').PageViewSelector;

function DesktopPage(){
}

exports.DesktopPage = helpers.defineClass(DesktopPage, RawPage, {
    ensurePageLocalize: function(){
        if (!this.pageLocalize) {
            this.pageLocalize = locale.resources(module)();
        }
        return this.pageLocalize;
    },
    getDefaultTitle: function(){
        return this._defaultTitle;
    },
    loadBox: function(initData){
        this.ensurePageLocalize();
        switch (this.$pageCategory) {
            case "lookup":
                this.$skin = this.$item.$skin || "s-page";
                this._defaultTitle = this.pageLocalize.p_pageTitle;
                this.$isSearchFacetEnabled = this.$isSearchFacetEnabled !== false;
                break;
            default:
                this.$skin = this.$skin || this.$item.$skin || "s-page";
                this._defaultTitle = this._defaultTitle || this.pageLocalize.p_pageTitle;
                this.$isSearchFacetEnabled = this.$isSearchFacetEnabled !== false;
                break;
        }
        RawPage.prototype.loadBox.call(this, initData);
        this.setBreadCrumb(this.$breadCrumb)
        this._isPageLoaded = true;
        this.onWindowResize();
    },
    onWindowResize: function(){
        if (this._isPageLoaded) {
            var height;
            if (this.dialogWrapper) {
                if (!this.dialogWrapper.isOpened) {
                    return;
                }
                height = this.dialogWrapper.$$dialogSlot.height();
                this._item.style.width = this.dialogWrapper.$$dialogSlot.width() + "px";
            }
            else {
                height = document.site.$$body.height();
            }
            this._item.style.height = height + "px";
            this.scrollview.style.height = (height - this._$$diagnoseSlot.outerHeight(true)) + "px";
            if (this.dialogWrapper) {
                this.scrollview.style.width = this.dialogWrapper.$$dialogSlot.width() + "px";
                if (this.lookupList) {
                    this._body.style.height = (this.scrollview.clientHeight - this._$$header.outerHeight(true)) + "px";
                    this.lookupList.onWindowResize();
                }
                if (!document.site.isResizing) {
                    var diff = this.scrollview.scrollHeight - this.scrollview.clientHeight;
                    if (diff > 0) {
                        this.dialogWrapper.dialogSlot.style.height = Math.min(this.dialogWrapper._maxHeight, this.dialogWrapper.$$dialogSlot.outerHeight(true) + diff) + "px";
                        height = this.dialogWrapper.$$dialogSlot.height();
                        this._item.style.height = height + "px";
                        this.scrollview.style.height = (height - this._$$diagnoseSlot.outerHeight(true)) + "px";
                    }
                }
            }
            if (document.site.body.clientWidth) {
                if (document.site.body.clientWidth <= 900) {
                    this.isAutoFloat = true;
                    if (this.menuBar) {
                        if (this.menuBar.preferences.menuBar.isDocked) {
                            this.menuBar.preferences.menuBar.isDocked = false;
                            this.menuBar.preferences.menuBar.isCollapsed = true;
                            this.menuBar.ensureState();
                        }
                    }
                    if (this.fusionBar) {
                        if (this.fusionBar.preferences.convergenceBar.isDocked) {
                            this.fusionBar.preferences.convergenceBar.isDocked = false;
                            this.fusionBar.preferences.convergenceBar.isCollapsed = true;
                            this.fusionBar.ensureState();
                        }
                    }
                }
                else {
                    if (this.isAutoFloat) {
                        this.isAutoFloat = false;
                        if (this.menuBar) {
                            if (!this.menuBar.preferences.menuBar.isDocked) {
                                this.menuBar.preferences.menuBar.isDocked = true;
                                this.menuBar.preferences.menuBar.isCollapsed = false;
                                this.menuBar.ensureState();
                            }
                        }
                        if (this.fusionBar) {
                            if (!this.fusionBar.preferences.convergenceBar.isDocked) {
                                this.fusionBar.preferences.convergenceBar.isDocked = true;
                                this.fusionBar.preferences.convergenceBar.isCollapsed = false;
                                this.fusionBar.ensureState();
                            }
                        }
                    }
                }
            }
            if (this.menuBar) {
                this.menuBar.onWindowResize();
            }
            if (this.fusionBar) {
                this.fusionBar.onWindowResize();
            }
        }
        if (this.isOnAuthoring) {
            document.site.authorPage.resizePalette();
        }
        
    },
    onFillLookupList: function(){
        if (this.dialogWrapper._content) {
            var invisible = this.lookupList.builder.scroller.getInvisibleSize();
            var diff = invisible.height;
            if (!diff) {
                diff = invisible.width ? 10 : 0;
            }
            if (diff) {
                this.dialogWrapper.dialogSlot.style.height = Math.min(this.dialogWrapper._maxHeight, this.dialogWrapper.$$dialogSlot.outerHeight(true) + diff + 10) + "px";
                this.dialogWrapper.onWindowResize();
            }
            if (!this.lookupSizeInit) {
                this.lookupSizeInit = true;
                this.onFillLookupList();
            }
        }
    },
    setDescription: function($description){
        if ($description) {
            if (!this.domDescription) {
                this.domDescription = document.createElement("div");
                this.domDescription.className = this.$skin + "-description";
                this._headerDescription.appendChild(this.domDescription);
            }
            if ($description.indexOf("{") < 0) {
                this.domDescription.textContent = $description;
            }
            else {
                this.renderExpression($description, this.domDescription, this.$skin + "-description-field", false);
            }
        }
    },
    notifyDataChange: function(field, value){
        if (field.$item.$bind == "$pageViewSelector") {
            this.pageViewSelector.onNotifyChange(value);
        }
        else {
            RawPage.prototype.notifyDataChange.call(this, field, value);
        }
    },
    
    appendHeader: function(){
        this._header = document.createElement("header");
        this._header.className = this.$skin + "-head";
        this._header.style.display = "none";
        this.scrollview.appendChild(this._header);
        if (this.$breadCrumb) {
            this._header.appendChild(this._createBoxBreadCrumb())
        }
        this._headerCore = document.createElement("div");
        this._headerCore.className = this.$skin + "-head-core";
        this._headerCore.appendChild(this._createBoxTitle());
        this.setTitle(this.$item.$title || (this.$field ? this.$field.$title : null));
        this.securityViewSlot = document.createElement("div");
        this.securityViewSlot.className = this.$skin + "-security-view-slot";
        this.securityViewSlot.style.display = "none";
        this._headerCore.appendChild(this.securityViewSlot);
        this._header.appendChild(this._headerCore);
        this._headerDescription = document.createElement("div");
        this._headerDescription.className = this.$skin + "-head-desc";
        this.setDescription(this.$prototype.$description || this.$item.$description);
        this._header.appendChild(this._headerDescription);
        this._$$header = $(this._header);
        
        this._headerFoooter = document.createElement("div");
        this._headerFoooter.className = this.$skin + "-head-footer";
        this._headerNav = document.createElement("div");
        this._headerNav.className = this.$skin + "-head-footer-nav";
        this._headerFoooter.appendChild(this._headerNav);
        this._headerViewSelector = document.createElement("div");
        this._headerViewSelector.className = this.$skin + "-head-footer-variants";
        this._headerFoooter.appendChild(this._headerViewSelector);
        this.loadPageViewSelector();
        this._header.appendChild(this._headerFoooter);
        
    },
    loadPageViewSelector: function(){
        document.site.emptyDom(this._headerViewSelector);
        if (this.pageViewSelector) {
            this.pageViewSelector.dispose();
        }
        this.pageViewSelector = new PageViewSelector();
        this.pageViewSelector.load(this, this._headerViewSelector);
    },
    _createBoxBreadCrumb: function(){
        this.domBreadCrumb = this.domBreadCrumb || document.createElement("div");
        this.domBreadCrumb.className = this.$skin + "-head-breadcrumb";
        this.domBreadCrumb.setAttribute("data-s-box", this.id);
        return this.domBreadCrumb;
    },
    setBreadCrumb: function(breadCrumb){
        if (this.domBreadCrumb && breadCrumb.length > 0) {
            var breadItem, breadLink;
            this._breadCrumb = document.createElement("ul");
            this._breadCrumb.className = this.$skin + "-breadcrumb-slot";
            for (var ii = 0; ii < breadCrumb.length; ii++) {
                breadItem = document.createElement("li");
                breadItem.className = this.$skin + "-breadcrumb-link-slot-" + (ii == 0 ? "first" : "next");
                breadItem.textContent = breadCrumb[ii]
                this._breadCrumb.appendChild(breadItem)
            }
            /* breadItem = document.createElement("li");
             breadItem.className =  this.$skin + "-breadcrumb-link-slot-next";
             breadItem.textContent = this.getTitle();
             this._breadCrumb.appendChild(breadItem)
             */
            breadItem = document.createElement("li");
            breadItem.className = this.$skin + "-breadcrumb-link-slot-last";
            
            breadItem.textContent = this.getTitle();
            
            breadLink = document.createElement("a");
            breadLink.className = this.$skin + "-breadcrumb-link";
            breadLink.setAttribute("href", "#")
            breadItem.appendChild(breadLink)
            this._breadCrumb.appendChild(breadItem)
            this.domBreadCrumb.appendChild(this._breadCrumb)
        }
    },
    showDiagnoses: function(message, options){
        if (!this.diagnosesPanel) {
            if (this.$pageCategory == "dashboard" || this.$pageCategory == "page" || this.$pageCategory == "fusion") {
                this.diagnosesPanel = new DiagnosesPanel();
                this.diagnosesPanel.appendToPage(this);
            }
        }
        if (this.diagnosesPanel) {
            this.diagnosesPanel.showDiagnoses(message, this, options);
        }
    },
    drawBox: function(){
        this.$item.$title = this.$item.$title || "{$title}";
        this._item = document.createElement("article");
        this._item.className = this.$skin;
        this.$$item = $(this.layoutSlot.appendChild(this._item));
        
        this.dataSlot = document.createElement("div");
        this.dataSlot.className = this.$skin + "-data";
        this._$$dataSlot = $(this.dataSlot);
        this._item.appendChild(this.dataSlot);
        
        this.diagnoseSlot = document.createElement("div");
        this.diagnoseSlot.className = this.$skin + "-diag-slot";
        this._$$diagnoseSlot = $(this.diagnoseSlot);
        
        this.scrollview = document.createElement("div");
        this.scrollview.className = this.$skin + "-scrollview";
        this.$$scrollview = $(this.scrollview);
        this._bindScrollView(true);
        
        this.$$body = $(this._body = document.createElement("div"));
        this.appendHeader();
        this.ensureLayoutMode();
        this.scrollview.appendChild(this._body);
        this.dataSlot.appendChild(this.diagnoseSlot);
        this.dataSlot.appendChild(this.scrollview);
        this._ensureMenus();
        this.renderLayoutContent();
    },
    registerPositionedDialog: function(dlg, add){
        if (!this.positionedList) {
            this.positionedList = [];
        }
        if (add) {
            this.positionedList.push(dlg);
        }
        else {
            if (this.positionedList) {
                for (var ii = 0, jj = this.positionedList.length; ii < jj; ii++) {
                    if (this.positionedList[ii] == dlg) {
                        this.positionedList.splice(ii, 1);
                        break;
                    }
                }
            }
        }
    },
    _bindScrollView: function(bind){
        var self = this;
        if (bind) {
            self.$$scrollview.bind("scroll", function(evt){
                if (self.positionedList) {
                    for (var ii = 0, jj = self.positionedList.length; ii < jj; ii++) {
                        var dlg = self.positionedList[ii];
                        if (dlg && !dlg.disposed) {
                            dlg.onWindowResize(null, true);
                        }
                    }
                }
            });
        }
        else {
            if (self.$$scrollview) {
                self.$$scrollview.unbind("scroll");
            }
        }
    },
    _ensureMenus: function(){
        this.menuBar = new MenuBar();
        this.menuBar.load(this);
        if (this.menuBar && this.menuBar._bar && this.$isSearchFacetEnabled) {
            this.loadNewItem(this.menuBar._bar, {
                $category: "searchFacets",
                $prototype: {},
                $bind: "$searchFacets"
            });
        }
    },
    appendArticleMenus: function(slot){
        if (this.$facet == "$details" || this.$facet == "$edit") {
            document.site.emptyDom(this._headerNav);
            this._menusPager = this.loadNewItem(this._headerNav, {
                $isAuthoringEnabled: false,
                $skin: "s-page-pager",
                $category: "menus",
                $itemIcon: {
                    $mode: "iconText",
                    $path: "site/s-record-"
                },
                $layout: {
                    $autoSize: true,
                    $layoutType: "row",
                    $items: [{
                        $bind: "$first",
                        $title: this.pageLocalize.p_firstRecord
                    }, {
                        $bind: "$previous",
                        $title: this.pageLocalize.p_previousRecord
                    }, {
                        $bind: "$next",
                        $title: this.pageLocalize.p_nextRecord
                    }, {
                        $bind: "$last",
                        $title: this.pageLocalize.p_lastRecord
                    }]
                }
            });
        }
        RawPage.prototype.appendArticleMenus.call(this, slot);
    },
    onMenuDataFilled: function(menuItem){
        if (menuItem && this.$mainAction && menuItem.$item.$bind == this.$mainAction) {
            menuItem.mn.className += " s-main-" + this.$mainAction.substr(1);
        }
        if (this.menuBar) {
            this.menuBar.onMenuDataFilled(menuItem);
        }
        else {
            RawPage.prototype.onMenuDataFilled.call(this);
        }
    },
    diposeContent: function(){
        RawPage.prototype.diposeContent.call(this);
        document.site.emptyDom(this._body);
        this.loaded = false;
        this.boundFields = {};
        this.layouts = {};
        this.idMap = {};
        this.menuItems = {};
        this.menusBags = [];
        if (this.menuBar) {
            if (this.menuBar._slot) {
                document.site.removeDomChild(this.menuBar._slot);
            }
            this.menuBar.dispose();
        }
        if (this.diagnosesPanel) {
            document.controller.disposeObject(this.diagnosesPanel);
            document.site.emptyDom(this.diagnoseSlot);
        }
        this.diagnosesPanel = this.menuBar = null;
    },
    reloadLayout: function($item){
        this.diposeContent();
        this.$item = $item;
        this.$menus = {};
        this._ensureMenus();
        this.openBox(true);
        this.applyActionLinkChange(this.$prototype);
        this.applyActionLinkChange(this.dataset);
    },
    addMenuItem: function($menus, groupId){
        var group;
        if (groupId) {
            group = this.idMap[groupId];
            if (group) {
                if ($menus.$links) {
                    Object.keys($menus.$links).map(function($bind){
                        group.addMenuItem({
                            $bind: $bind,
                            $icon: $menus.$links[$bind].$icon
                        });
                    });
                }
                if ($menus.$actions) {
                    Object.keys($menus.$actions).map(function($bind){
                        group.addMenuItem({
                            $bind: $bind,
                            $isAction: true
                        }, true);
                    });
                }
            }
        }
        this.applyActionLinkChange($menus);
    },
    dispose: function(){
        if (this.isOnAuthoring) {
            document.site.openAuthoringPage(false);
        }
        this._bindScrollView(false);
        if (this.menuBar) {
            this.menuBar.dispose();
        }
        if (this.diagnosesPanel) {
            document.controller.disposeObject(this.diagnosesPanel);
        }
        if (this.pageViewSelector) {
            this.pageViewSelector.dispose();
        }
        this.pageViewSelector = this._$$diagnoseSlot = this._$$header = this._headerFoooter = this._headerViewSelector = null;
        this._$$dataSlot = this.$$scrollview = this.scrollview = this.$menus = this.menuBar = null;
        this.positionedList = this.diagnosesPanel = this._headerCore = this._headerDescription = this.lookupList = null;
        RawPage.prototype.dispose.call(this);
    }
});
