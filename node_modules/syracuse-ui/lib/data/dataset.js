"use strict";
exports.compare = require('syracuse-ui/lib/data/comparator');
exports.array = {
	find: function(list, $uuid, variant) {
		for (var ii = 0, jj = list.length; ii < jj; ii++) {
			var record = list[ii];
			if (record) {
				if (variant) {
					if (record[variant] && record[variant].$uuid == $uuid) {
						return record;
					}
				} else {
					if (record.$uuid == $uuid) {
						return record;
					}
				}
			}
		}
		return null;
	},
	moveTo: function(list, item, index) {
		list.splice(list.indexOf(item), 1);
		list.splice(index, 0, item);
	}
};
exports.delta = {
	array: {
		$uuids: function(list) {
			var $uuids = [];
			for (var ii = 0, jj = list.length; ii < jj; ii++) {
				$uuids.push({
					$uuid: list[ii].$uuid
				});
			}
			return $uuids;
		},

		add: function(list, items) {
			var delta = [];
			var no_uuid = items.length && items[0].$uuid === undefined; //$uuid is undefined for array of date, number, string or variant
			if (no_uuid) {
				delta = delta.concat(list).concat(items);
			} else {
				for (var ii = 0, jj = items.length; ii < jj; ii++) {
					var item = items[ii];
					if (!exports.array.find(list, item.$uuid)) {
						delta.push(item);
					}
				}
				if (delta.length) {
					if (delta.length == 1) {
						delta[0].$index = list.length; //add to end
					} else {
						for (var ii = list.length - 1; ii >= 0; ii--) {
							delta.unshift({
								$uuid: list[ii].$uuid
							});
						}
					}
				}
			}
			return delta;
		}
	}
};


function _ensureServerIndex(list) {
	if (list.length) {
		var first = list[0];
		if (first !== null && typeof(first) == 'object') {
			if (first.$uuid == undefined && Object.keys(first).length == 1) {
				for (var ii = 0, jj = list.length; ii < jj; ii++) {
					var record = list[ii];
					if (typeof(record) == 'object') {
						var k = Object.keys(record)[0];
						// if test avoid assignment to read-only string with arrays like [{ foo: "bar" }]
						if (typeof record[k] === 'object')
							record[k].$serverIndex = ii;
					}
				}
			} else {
				if (first.$uuid !== undefined) {
					for (var ii = 0, jj = list.length; ii < jj; ii++) {
						list[ii].$serverIndex = ii;
					}
				}
			}
		}
	}
}

function _applyPageRecordDelta(page, record, subRecord, targetMap, targetList, variantKey) {
	if (subRecord.$uuid !== undefined) {
		if (!subRecord.$isDeleted) {
			if ((subRecord.$uuid !== undefined) && targetMap[subRecord.$uuid]) {
				if (variantKey) {
					var newNecord = exports.applyDelta(page, targetMap[subRecord.$uuid], subRecord);
					record = {};
					record[variantKey] = newNecord;
					targetList.push(record);
				} else {
					targetList.push(exports.applyDelta(page, targetMap[subRecord.$uuid], subRecord));
				}
			} else {
				targetList.push(record);
			}
		}
	} else {
		targetList.push(record);
	}
}

function _applyObjectArrayDelta(page, targetList, sourceList) {
	if (sourceList) {
		if (targetList.length == sourceList.length) {
			for (var ii = 0, jj = sourceList.length; ii < jj; ii++) {
				exports.applyDelta(page, targetList[ii], sourceList[ii]);
			}
		} else {
			targetList.splice(0, targetList.length);
			for (var ii = 0, jj = sourceList.length; ii < jj; ii++) {
				targetList.push(sourceList[ii]);
			}
		}
	}
	return targetList;
}

exports.applyDelta = function(page, target, source, isObjectDelta) {
	if (source) {
		var properties = Object.keys(source);
		for (var ii = 0, jj = properties.length; ii < jj; ii++) {
			var property = properties[ii];
			var targetValue = target[property];
			var sourceValue = source[property];
			if (typeof(sourceValue) == 'object') {
				if (!(targetValue == null || sourceValue === null)) {
					if (Array.isArray(sourceValue)) {
						if (isObjectDelta) {
							sourceValue = _applyObjectArrayDelta(page, targetValue, sourceValue);
						} else {
							//	if (page.$isEditMode || page.$isPartialDelta) {
							sourceValue = exports.applyPageArrayDelta(page, targetValue, sourceValue);
							//}
						}
					} else {
						if (typeof(targetValue) == 'object') {
							sourceValue = exports.applyDelta(page, targetValue, sourceValue, isObjectDelta);
						}
					}
				}
				if (Array.isArray(sourceValue)) {
					_ensureServerIndex(sourceValue);
				}
			}
			target[property] = sourceValue;
		}
	}
	return target;
};


exports.cleanServerIndex = function(source) {
	if (source && (typeof(source) == 'object')) {
		if (Array.isArray(source)) {
			for (var ii = 0, jj = source.length; ii < jj; ii++) {
				exports.cleanServerIndex(source[ii]);
			}
		} else {
			delete source.$serverIndex;
			var properties = Object.keys(source);
			for (var ii = 0, jj = properties.length; ii < jj; ii++) {
				exports.cleanServerIndex(source[properties[ii]]);
			}
		}
	}
	return source;
};

function _isVariantArray(first) {
	return first !== null && typeof(first) == 'object' && first.$uuid == undefined && Object.keys(first).length == 1;
}


exports.applyPageArrayDelta = function(page, targetList, sourceList) {
	if (sourceList) {
		var targetMap = {};
		var isVariant = _isVariantArray(sourceList.length && sourceList[0]);
		if (page.$isPartialDelta || (sourceList.length == 1 && sourceList[0].$index !== undefined)) {
			var found, foundIndex;
			for (var ii = 0, jj = sourceList.length; ii < jj; ii++) {
				found = null;
				var sourceRecord = sourceList[ii];
				foundIndex = 0;
				for (var mm = targetList.length; foundIndex < mm; foundIndex++) {
					found = targetList[foundIndex];
					if (found.$uuid == sourceRecord.$uuid) {
						break;
					} else {
						found = null;
					}
				}
				if (found) {
					if (sourceRecord.$isDeleted) {
						targetList.splice(foundIndex, 1);
					} else {
						exports.applyDelta(page, found, sourceRecord);
						if (sourceRecord.$index !== undefined && sourceRecord.$index != foundIndex) {
							targetList.splice(foundIndex, 1);
							targetList.splice(sourceRecord.$index, 0, found);
							delete found.$index;
						}
					}
				} else {
					if (!sourceRecord.$isDeleted) {
						if (sourceRecord.$index !== undefined) {
							targetList.splice(sourceRecord.$index, 0, sourceRecord);
						} else {
							targetList.push(sourceRecord);
						}
					}
				}
			}
		} else {
			for (var ii = 0, jj = targetList.length; ii < jj; ii++) {
				var record = targetList[ii];
				if (record) {
					if (record.$uuid !== undefined) {
						targetMap[record.$uuid] = record;
					} else {
						if (isVariant) {
							record = record[Object.keys(record)[0]];
							if (record.$uuid !== undefined) {
								targetMap[record.$uuid] = record;
							}
						}
					}

				}
			}
			targetList = [];
			for (var ii = 0, jj = sourceList.length; ii < jj; ii++) {
				var record = sourceList[ii];
				if (isVariant) {
					var variantKey = Object.keys(record)[0];
					_applyPageRecordDelta(page, record, record[variantKey], targetMap, targetList, variantKey);
				} else {
					_applyPageRecordDelta(page, record, record, targetMap, targetList);
				}

			}
		}
	}
	return targetList;
};

exports.ensure = function(article, $uuid) {
	if (article.ensureDataSet) {
		return article.ensureDataSet($uuid);
	} else {
		if (article.isRecordArticle) {
			var listDataset = article.articleParent.dataset;
			if ($uuid !== undefined) {
				for (var ii = 0, jj = listDataset.length; ii < jj; ii++) {
					if (listDataset[ii].$uuid == $uuid) {
						article.dataset = listDataset[ii];
						article.$serverIndex = article.dataset.$serverIndex;
						break;
					}
				}
			} else {
				if (!article.dataset || article.dataset.$serverIndex != article.$serverIndex) {
					for (var ii = 0, jj = listDataset.length; ii < jj; ii++) {
						if (listDataset[ii].$serverIndex == article.$serverIndex) {
							article.dataset = listDataset[ii];
							break;
						}
					}
				}
			}
			if (!article.dataset) {
				article.dataset = {};
			}
		} else {
			if (article.$item && article.$item.$bind && article.articleParent) {
				article.dataset = exports.setFieldValue(article, exports.getFieldValue(article) || (article.isArrayField ? [] : {}));
			} else {
				article.dataset = article.dataset || {};
			}
		}
	}
	return article.dataset;
};
exports.getFieldValue = function(field) {
	if (field.variantItem) {
		field = field.variantItem;
	}
	var value = field.articleParent.dataset[field.$item.$bind];
	if (field.$item.$variantItemKey) {
		if (value) {
			return value[field.$item.$variantItemKey];
		}
	}
	return value;
};
exports.setFieldValue = function(field, value) {
	if (field.variantItem) {
		field = field.variantItem;
	}
	if (field.setDatasetValue) {
		return field.setDatasetValue(value);
	}
	var value = field.currentValue = (value === undefined ? field.getValue() : value);
	var dataset = field.articleParent.dataset;
	if (field.$item.$variantItemKey) {
		if (!dataset[field.$item.$bind]) {
			dataset[field.$item.$bind] = {};
		}
		dataset[field.$item.$bind][field.$item.$variantItemKey] = value;
	} else {
		dataset[field.$item.$bind] = value;
	}
	return value;
};