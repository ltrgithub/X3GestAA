"use strict";

function _match(operator, value) {
	switch (operator) {
		case ">":
			return value > 0;
		case ">=":
			return value >= 0;
		case "<":
			return value < 0;
		case "<=":
			return value <= 0;
		case "=":
			return value == 0;
		case "<>":
			return value != 0;
	}
	return true;
}

exports.number = function(v1, v2, operator) {
	if (operator == 'like') {
		throw new Error(syra_local.flFilter_err_wrong_type.replace('{operator}', operator).replace('{type}', "number"));
	}
	return _match(operator, v1 - v2);
};

exports.string = function(v1, v2, operator) {
	if (operator == 'like') {
		// "contains" operation
		if (/^%(([^%]|\%)*)%$/g.test(v2)) {
			// in case '%' has been escaped with '\%', removing '\'
			var cleanV2 = /^%(([^%]|\%)*)%$/g.exec(v2)[1].replace(/\\%/g, "%");
			res = v1.indexOf(cleanV2) >= 0;
		}
		// "starts with" operation
		else {
			if (/(([^%]|\%)*)%$/g.test(v2)) {
				// in case '%' has been escaped with '\%', removing '\'
				var cleanV2 = /(([^%]|\%)*)%$/g.exec(v2)[1].replace(/\\%/g, "%");
				var re = new RegExp('^' + cleanV2);
				res = re.test(v1);
			} else {
				throw new Error(syra_local.flFilter_err_wrong_value.replace('{operator}', operator).replace('{value}', v2));
			}
		}
	}
	return _match(operator, v1.localeCompare(v2));
};

exports.date = function(v1, v2, operator) {
	if (operator == 'like') {
		throw new Error(syra_local.flFilter_err_wrong_type.replace('{operator}', operator).replace('{type}', "date"));
	}
	return _match(operator, syra_culture.date.parse(v1).compare(v2));
};