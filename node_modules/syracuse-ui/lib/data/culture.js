"use strict";
var _types = require('syracuse-core').types;
exports.date = _types.date;
exports.datetime = _types.datetime;
exports.time = _types.time;
exports.integer = _types.integer;
exports.decimal = _types.decimal;
exports.real = _types.real;


exports.api = {
	"application/x-date": _types.date,
	"application/x-datetime": _types.datetime,
	"application/x-time": _types.time,
	"application/x-integer": _types.integer,
	"application/x-decimal": _types.decimal,
	"application/x-real": _types.real
};

exports.format = {
	get: function(type, $displayFormat) { // return the corresponding date format
		switch (type) {
			case "application/x-date":
				return this.getDate($displayFormat);
			case "application/x-time":
				return this.getTime($displayFormat);
			case "application/x-datetime":
				return this.getDatetime($displayFormat);
		}
		return $displayFormat || this.getNumberFormat(type);
	},
	getDate: function(code) {
		return code == "DD" ? this.date_long : this.date_short;
	},
	getTime: function(code) {
		return code == "TT" ? this.time_long : this.time_short;
	},
	getDatetime: function(code) {
		switch (code) {
			case "F":
				return this.datetime_sortable;
			case "FF":
				return this.datetime_full;
			case "U":
				return this.datetime_universal;
		}
		return this.datetime_default;
	},
	getTwoDigitYearMax: function() {
		return this.twoDigitYearMax;
	},
	getNumberFormat: function(type) {
		return this.numberFormat[type] || this.numberFormat.numFormat;
	},
	getNumberFormatObj: function(type) {
		return {
			numFormat: this.getNumberFormat(type),
			decimalSeparator: this.numberFormat.decimalSeparator,
			groupSeparator: this.numberFormat.groupSeparator,
			groupSize: this.numberFormat.groupSize
		};
	},
	initialize: function(locale) {
		locale = locale || {};
		var dtPatterns = _types.date.resources().formatPatterns || {};
		this.date_long = locale.longDate || "dd MMMM yyyy";
		this.date_short = locale.shortDate || "yyyy-MM-dd";
		this.time_long = locale.longTime || "HH:mm:ss";
		this.time_short = locale.shortTime || "HH:mm";
		this.datetime_sortable = dtPatterns.sortableDateTime || "yyyy-MM-ddTHH:mm:ss";
		this.datetime_full = locale.longDatetime || dtPatterns.fullDateTime || "dd MMMM yyyy HH:mm:ss";
		this.datetime_universal = locale.longDatetime || dtPatterns.universalSortableDateTime || "yyyy-MM-dd HH:mm:ssZ";
		this.twoDigitYearMax = locale.twoDigitYearMax || 2029;
		this.numberFormat = {
			groupSize: locale.numberGroupSize || "3",
			decimalSeparator: locale.numberDecimalSeparator || ".",
			groupSeparator: locale.numberGroupSeparator || ","
		};
		// numFormat default -> #,##0 (integer) or #,##0.## (decimal)
		var numFormat = "#,";
		var groupSize = this.numberFormat.groupSize;
		for (var ii = 0; ii < groupSize; ii++) {
			numFormat += (ii == groupSize - 1) ? "0" : "#";
		}
		this.numberFormat.numFormat = numFormat + '.##';
		this.numberFormat["application/x-integer"] = numFormat + '';
		this.datetime_default = locale.shortDatetime || (this.date_short + " " + this.time_short);
	}
};

exports.utcToLocal = function(value) {
	value = value.replace(/(\d{4}-\d{2}-\d{2})[ T](\d{2}:\d{2}:\d{2})(Z|\s*GMT)/, "$1T$2Z");
	var dtLocal = _types.datetime.parse(value);
	return dtLocal.toString(exports.format.datetime_full);
};


/**
 * Returns JSON formatObj with some properties :
 * - dirOne : first directive
 * - dirTwo : second ...
 * - dirThree : third ...
 * each directive has properties : *directive* (actual directive) and *count* (minimum digits)
 * - maxLenght : maximum possible date length according to the format
 * @param {String} format : date format
 * @return {Object} formatObj
 */
// TO IMPROVE
var _formats = {};

var _directives = ["dirOne", "dirTwo", "dirThree"];

function _setMaxLength(formatObj) {
	var maxLength = 0;
	for (var ii = 0, jj = _directives.length - 1; ii < jj; ii++) {
		var dir = _directives[ii];
		maxLength += formatObj[dir].count > 2 ? formatObj[dir].count : 2;
	}
	maxLength += 2;
	formatObj.maxLength = maxLength;
}

exports.processFormat = function(format) {
	var formatObj = _formats[format];
	if (!formatObj) {
		var i = 0,
			len = format.length;
		formatObj = _formats[format] = {};

		while (i < len) {
			var c = format[i];
			switch (c) {
				case "'":
					i++;
					var literal = '';
					// going to the end of the following litteral or to the format end
					for (; i < len; i++) {
						if (format[i] === "'") {
							i++;
							// check wether the "'" is not doubled
							if (format[i] === "'") {
								literal += "'";
							} else
								break;
						} else {
							literal += format[i];
						}
					}
					if (!formatObj.separator) {
						formatObj.separator = literal;
					}
					break;
				case "d":
				case "M":
				case "y":
					var ch = format[i],
						repeat = 1;
					while (format[i + repeat] === ch) {
						repeat++;
					}
					for (var mm = 0, kk = _directives.length; mm < kk; mm++) {
						var d = _directives[mm];
						if (!formatObj[d]) {
							formatObj[d] = {};
							formatObj[d].dir = c;
							formatObj[d].count = repeat;
							formatObj[d].max = repeat < 2 ? 2 : repeat;
							break;
						}
					}

					i += repeat;
					break;
				default:
					if (!formatObj.separator) {
						formatObj.separator = c;
					}
					i++;
			}
		}
		_setMaxLength(formatObj);
	}
	return formatObj;
};