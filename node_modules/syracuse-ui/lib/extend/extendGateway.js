"use strict";
exports.culture = require('syracuse-ui/lib/data/culture');
exports.icon = require("syracuse-ui/lib/utility/icon");

exports.registerFlashWidget = function(context) {
	context.field.layoutSlot.className += " s-field-flash-slot";
	var boxParent = (context.field.attachedField || context.field).boxParent;
	while (boxParent) {
		boxParent.hasFlashChildField = true;
		boxParent = boxParent.boxParent;
	}
};

exports.data = {
	clone: function(obj) {
		return syra_site.clone(obj);
	},
	parseExpression: function(context, expression, dataset) {
		return syra_expression.parse(context.field.articleParent, expression, dataset);
	},
	fetch: function(context, options, success, error) {
		options = options || {};
		if (options.$url) {
			options.$url = this.parseExpression(context, options.$url);
		}
		context.field.page.fetch(options, success, error);
	}
};

exports.localizeText = function(context, text) {
	return syra_localizer.getLocalizeText(context.field.articleParent, text);
};

exports.menu = {
	fire: function(context, options) {
		if (options.dataset) {
			if (options.$link) {
				options.$link = syra_site.clone(options.$link);
				options.$link.$url = exports.data.parseExpression(context, options.$link.$url, options.dataset);
			}
		}
		options.scope = context.field.articleParent;
		syra_menus.click.fire(options);
	},
	open: function(context, options) {
		if (options.$scope) {
			options.$scope.page = options.$scope.page || context.field.page;
			options.$scope.articleParent = options.$scope.articleParent || context.field.articleParent;
		}
		syra_menus.open(options);
	}
};

exports.page = {
	getBodySize: function(context) {
		var size = context.field.page.getPageSize();
		return {
			height: size.bodyHeight,
			width: size.bodyWidth
		};
	},
	resize: function(context) {
		context.field.page.resizeItem();
	}
};

exports.modal = {
	open: function(option) {
		return syra_over.openModal(syra_site, option);
	}
};
exports.popup = {
	open: function(option) {
		return syra_over.openPopup(syra_site, option);
	},
	closeAll: function() {
		syra_site.closePopups();
	}
};

exports.tip = {
	show: function(text, target, check) {
		syra_tip.titleTip(text, target, check);
	}
};

exports.item = {
	addButton: function(context, option) {
		option.parent = option.parent || context.field.page;
		return syra_button.add(option);
	},
	addIndicator: function(context, option) {
		option.isIndicator = true;
		option.parent = option.parent || context.field.page;
		return syra_button.add(option);
	},
	add: function(context, slot, option, boxParent) {
		return context.field.page.addItem(slot, option, boxParent);
	},
	addRecord: function(context, options) {
		options.page = context.field.page;
		options.articleParent = context.field.articleParent;
		return syra_item.addRecord(options);
	}
};


exports.preference = {
	profile: {
		get: function(key) {
			return syra_preference.profile.get(key);
		},
		save: function(key, value) {
			syra_preference.profile.save(key, value);
		}
	},
	page: {
		get: function(context) {
			return syra_preference.page.getField(context.field);
		},
		save: function(context, value) {
			syra_preference.page.saveField(context.field, value);
		}
	}
};

exports.dom = {
	//fontIcon is added dinalically  
	hide: function(node, isHidden) {
		syra_dom.hide(node, isHidden);
	},
	isVisible: function(node) {
		return syra_dom.isVisible(node);
	},
	isParent: function(parent, node) {
		return syra_dom.isParent(parent, node);
	},
	empty: function(node) {
		return syra_dom.empty(node);
	},
	disable: function(node, isDisabled) {
		syra_dom.disable(node, isDisabled);
	},
	toggleClass: function(node, css, show) {
		syra_dom.toggleClass(node, css, show);
	},
	getNodeIndex: function(node) {
		return syra_dom.getNodeIndex(node);
	},
	moveChildNodes: function(source, target) {
		return syra_dom.moveChildNodes(source, target);
	},
	remove: function(node) {
		return syra_dom.remove(node);
	},
	input: function(css, parent, type) {
		return syra_dom.input(css, parent, type);
	},
	textarea: function(css, parent, rows) {
		return syra_dom.textarea(css, parent, rows);
	},
	div: function(css, parent) {
		return syra_dom.div(css, parent);
	},
	text: function(css, text, parent) {
		return syra_dom.text(css, text, parent);
	},
	addFontIcon: function(css, fontKey, parent) {
		return syra_dom.addFontIcon(css, fontKey, parent);
	}
};
exports.alert = {
	info: function(context, message) {
		syra_alert.info(message, context.field);
	},
	warn: function(context, message) {
		syra_alert.warn(message, context.field);
	},
	error: function(context, message) {
		syra_alert.error(message, context.field);
	},
	ask: function(message) {
		return syra_alert.ask(message);
	}
};

exports.ajax = {
	get: function(options) {
		syra_ajax.get(options);
	},
	post: function(options) {
		syra_ajax.post(options);
	},
	put: function(options) {
		syra_ajax.put(options);
	},
	"delete": function(options) {
		syra_ajax["delete"](options);
	}
};


exports.classic = {
	getController: function(context) {
		return syra_fusion.syraUtil.getFusionController(context.field);
	},
	onBlockExRpc: function(context, proxy, values, opt) {
		syra_fusion.onBlockExRpc(context.field.attachedField || context.field, proxy, values, opt);
	}
};