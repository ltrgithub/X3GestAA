"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var Article = require('syracuse-ui/lib/article/article').Article;
var JobsViewer = require('./jobsViewer').JobsViewer;

function JobHandler() {}

exports.JobHandler = helpers.defineClass(JobHandler, null, {
	capitalize: function(s) {
		//capitalize first letter
		return s[0].toUpperCase() + s.slice(1);
	},
	cancelAsynchRequest: function() {
		var self = this;
		if (self.asynchReq && self.asynchReq.length > 0) {
			console.log("asynreq  cleared");
			for (var ii = 0; ii < self.asynchReq.length; ii++) {
				clearTimeout(self.asynchReq[ii]);
			}
		}
	},
	sendRequest: function(reqOpt, cbck, onRelease) {
		var self = this;

		// cancel any asynch request (202) if on release
		if (onRelease) {
			self.cancelAsynchRequest();
		}

		document.controller.sendRequest(null, reqOpt, function(data, response, $url) {
			self.onSuccess(data, response, $url, cbck);
		}, function(error, httpquery) {
			self.onError(error, httpquery, cbck);
		});
	},
	buildReqOpt: function(method, $url) {
		var reqOpt = {};
		reqOpt.noDisplayErr = true;
		reqOpt.method = method || "GET";
		reqOpt.$location = {
			$url: $url
		};
		return reqOpt;
	},
	register: function(jobParams, currentState, nextStateSvcId, cancelSvcId, explicitReleaseCallback) {
		var self = this;
		self.params = jobParams;

		// set/update jobs viewer properties
		self.jobsViewer = (document.site.jobsViewer ? document.site.jobsViewer : document.site.jobsViewer = new JobsViewer());

		// save job handler
		self.jobsViewer.addJob(self);

		// update jobs types list
		self.jobsViewer.updateJobsTypesList(self.params.kind, true);

		// init record for jobs viewer (desktopList)
		var record = self._buildInitRecord();

		var newData = {
			//TODO $jobType
			$jobType: self.jobsViewer.boundFields && self.jobsViewer.boundFields.$jobType[0].currentValue || 1,
			$jobDetails: [record],
			$properties: {
				$jobType: {
					$value: {
						$enum: self.jobsViewer.getJobsTypesEnum()
					}
				}
			}
		};

		// draw jobs viewer panel if necessary
		if (!self.jobsViewer.$$item) {
			self.jobsViewer.loadBox();
		}

		// append job view (record)
		document.site.jobsViewer.applyChange(newData, undefined, true);

	},
	_buildInitRecord: function() {
		var self = this;
		if (self.params) {
			var record = {};
			var $isHiddenFalse = {
				$isHidden: false
			};
			record.$properties = {};

			record.$uuid = self.params.uuid;
			record.$index = self.$index = self.jobsViewer.getRecordsList().length || 0;
			record.jobTitle = self.params.title;
			record.jobType = self.params.kind;
			record.percentage = 1;
			record.$properties.jobTitle = $isHiddenFalse;

			if (self.params.$diagnoses) {
				// filtering diagnoses messages according to severity
				var $diagnoses = self.params.$diagnoses;
				var diagMsg = {};
				for (var ii = 0; ii < Object.keys($diagnoses).length; ii++) {
					var $severity = $diagnoses[ii].severity || $diagnoses[ii].$severity;
					var $message = $diagnoses[ii].message || $diagnoses[ii].$message;
					diagMsg[$severity] = diagMsg[$severity] ? diagMsg[$severity] + "\n" + $message : $message;
				}
				var severities = Object.keys(diagMsg);
				if (severities.length > 0) {
					// info,warning,error,success,fatal --> Info,Warning,Error,Success,Fatal
					for (var ii = 0; ii < severities.length; ii++) {
						// append to record
						var $diagBind = "diagnose" + self.capitalize(severities[ii]);
						record[$diagBind] = diagMsg[severities[ii]];
						record.$properties[$diagBind] = $isHiddenFalse;
					}
				}
			}
			record.$links = {};
			record.$links["$job" + self.capitalize(self.params.kind) + "Icon"] = $isHiddenFalse;

			// init progress bar
			record.$links.$progressOff = $isHiddenFalse;

			// append specific property (syra or fusion)
			self.appendSpecificProperty(record);

			return record;
		} else {
			return {
				$uuid: helpers.uuid.generate(),
				diagnoseError: "no params",
				$properties: {
					diagnoseError: $isHiddenFalse
				}
			};
		}
	},
	buildRecord: function(data, success) {
		var self = this;
		var record = {};
		record.$properties = {};
		var $isHiddenFalse = {
			$isHidden: false
		};
		var $isHiddenTrue = {
			$isHidden: true
		};
		record.$links = {};
		record.$uuid = self.params.uuid;
		record.$index = self.$index;
		var $binds = ["jobTitle", "phase", "phaseDetail", "progress", "elapsedSeconds", "remainingSeconds"];

		// append data
		for (var ii = 0; ii < $binds.length; ii++) {
			if (data[$binds[ii]]) {
				record[$binds[ii]] = data[$binds[ii]];
				record.$properties[$binds[ii]] = $isHiddenFalse;
			}
		}

		// handle diagnoses
		if (data.$diagnoses) {
			// filtering diagnoses messages according to severity
			var $diagnoses = data.$diagnoses;
			var diagMsg = {};
			for (var ii = 0; ii < Object.keys($diagnoses).length; ii++) {
				var $severity = $diagnoses[ii].severity || $diagnoses[ii].$severity;
				var $message = $diagnoses[ii].message || $diagnoses[ii].$message;
				diagMsg[$severity] = diagMsg[$severity] ? diagMsg[$severity] + "\n" + $message : $message;
			}
			var severities = Object.keys(diagMsg);
			if (severities.length > 0) {

				// info,warning,error,success,fatal --> Info,Warning,Error,Success,Fatal
				for (var ii = 0; ii < severities.length; ii++) {
					// append to record
					var $diagBind = "diagnose" + self.capitalize(severities[ii]);
					record[$diagBind] = diagMsg[severities[ii]];
					record.$properties[$diagBind] = $isHiddenFalse;
				}
			}
		}

		// progress bar
		if (success) {
			record.$links.$progressOn = $isHiddenTrue;
			record.$links.$progressOff = $isHiddenFalse;
		} else {
			record.$links.$progressOff = $isHiddenTrue;
			record.$links.$progressOn = $isHiddenFalse;
		}

		record.$links["$job" + self.capitalize(self.params.kind) + "Icon"] = $isHiddenFalse;

		return record;
	},
	onError: function(error, httpquery, cbck) {
		var self = this;
		var $diagnoses;

		if (error.data.indexOf("$diagnoses") != -1) {
			$diagnoses = JSON.parse(error.data).$diagnoses;
		} else {
			$diagnoses = [{
				$severity: "error",
				$message: error.data
			}];
		}
		var data = {};
		data.$diagnoses = $diagnoses;
		var record = self.buildRecord(data, true);
		var newData = {
			$jobDetails: [record]
		};
		self.jobsViewer.applyChange(newData, true);
	},
	dispose: function() {
		this.params = null;
		this.cancelSvcId = null;
		this.explicitReleaseCallback = null;
		this.$index = null;
	}
});