"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var Article = require('syracuse-ui/lib/article/article').Article;
var JobsViewer = require('./jobsViewer').JobsViewer;
var date = require('syracuse-core/lib/types/date');
var time = require('syracuse-core/lib/types/time');

function JobHandler() {}

exports.JobHandler = helpers.defineClass(JobHandler, null, {
	capitalize: function(s) {
		//capitalize first letter
		return s[0].toUpperCase() + s.slice(1);
	},
	cancelAsynchRequest: function() {
		var self = this;
		if (self.asynchReq && self.asynchReq.length > 0) {
			for (var ii = 0; ii < self.asynchReq.length; ii++) {
				clearTimeout(self.asynchReq[ii]);
			}
		}
	},
	sendRequest: function(reqOpt, cbck, onRelease) {
		var self = this;

		// cancel any asynch request (202) if on release
		if (onRelease) {
			self.cancelAsynchRequest();
		}

		document.controller.sendRequest(null, reqOpt, function(data, response, $url) {
			self.onSuccess(data, response, $url, cbck);
		}, function(error, httpquery) {
			self.onError(error, httpquery, cbck);
		});
	},
	buildReqOpt: function(method, $url) {
		var reqOpt = {};
		reqOpt.noDisplayErr = true;
		reqOpt.method = method || "GET";
		reqOpt.$location = {
			$url: $url
		};
		return reqOpt;
	},
	register: function(jobParams, currentState, nextStateSvcId, cancelSvcId, explicitReleaseCallback) {
		var self = this;

		// properties used to set prioritary severity (used for adapting progress bar display at the end of the process)
		self.severities = {
			fatal: 4,
			error: 3,
			warning: 2,
			info: 1,
			success: 0
		};
		self.severity = 0;

		self.params = jobParams;

		// set/update jobs viewer properties
		self.jobsViewer = (document.site.jobsViewer ? document.site.jobsViewer : document.site.jobsViewer = new JobsViewer());
		self.jobsViewer.localize = document.site.localize;
		// save job handler
		self.jobsViewer.addJob(self);

		// update jobs types list
		self.jobsViewer.updateJobsTypesList(self.params.kind, true);

		// init record for jobs viewer (desktopList)
		var record = self._buildInitRecord();

		var newData = {
			$jobType: self.jobsViewer.boundFields && self.jobsViewer.boundFields.$jobType[0].currentValue || 1,
			$jobDetails: [record],
			$properties: {
				$jobType: {
					$value: {
						$enum: self.jobsViewer.getJobsTypesEnum()
					}
				}
			}
		};

		// draw jobs viewer panel if necessary
		if (!self.jobsViewer.$$item) {
			self.jobsViewer.loadBox();
		}

		// append job view (record)
		document.site.jobsViewer.applyChange(newData, undefined, true);
	},
	_buildInitRecord: function() {
		var self = this;
		if (self.params) {
			var record = {};
			var $isHiddenFalse = {
				$isHidden: false
			};
			record.$properties = {};

			record.$uuid = self.params.uuid;
			record.$index = self.$index = self.jobsViewer.getRecordsList().length || 0;
			record.jobTitle = self.params.title;
			record.jobType = self.params.kind;
			record.percentage = 1;
			record.$properties.jobTitle = $isHiddenFalse;

			var datetimebinds = ["startDate", "startTime"],
				startDate;
			if (self.params.startDate) {
				startDate = new Date(self.params.startDate);
				self.params[datetimebinds[0]] = date.fromJsDate(startDate).toString();
				self.params[datetimebinds[1]] = time.fromJsDate(startDate).toString();
			}
			// append date time data
			for (var ii = 0; ii < datetimebinds.length; ii++) {
				if (self.params[datetimebinds[ii]]) {
					record[datetimebinds[ii]] = self.params[datetimebinds[ii]];
					record.$properties[datetimebinds[ii]] = $isHiddenFalse;
				}
			}


			// handle diagnoses
			if (self.params.$diagnoses) {
				self._appendDiagnoses(record, self.params.$diagnoses);
			}
			record.$links = {};
			record.$links["$job" + self.capitalize(self.params.kind) + "Icon"] = $isHiddenFalse;

			// init progress bar
			record.$links.$progressOff = $isHiddenFalse;

			// append specific property (syra or fusion)
			self.appendSpecificProperty(record);

			return record;
		} else {
			return {
				$uuid: helpers.uuid.generate(),
				jobDiagnoses: [{
					$index: 0,
					diagMsg: self.jobsViewer.localize.jobs_no_params
				}]
			};
		}
	},
	_applyAlertStyle: function() {
		var self = this;
		var isRecordVisible = (self.jobsViewer && self.jobsViewer.$$item && !self.jobsViewer.$$item.is(":visible")) || (self.params && !document.site.isScrolledIntoView(self.jobsViewer.getRecord(self.params.uuid).$$item, self.jobsViewer.$$item));
		if (isRecordVisible) {
			document.site.toggleClass(document.site._jobsViewerOpener, "s-jobs-viewer-opener");
			document.site.toggleClass(document.site._jobsViewerOpener, "s-jobs-viewer-opener-animated", true);
			self.jobsViewer.alertTimeout = setTimeout(function() {
				document.site.toggleClass(document.site._jobsViewerOpener, "s-jobs-viewer-opener-animated");
				document.site.toggleClass(document.site._jobsViewerOpener, "s-jobs-viewer-opener-highlight", true);
			}, 5000);
			return true;
		} else {
			return false;
		}
	},
	_removeAlertStyle: function() {
		document.site.toggleClass(document.site._jobsViewerOpener, "s-jobs-viewer-opener-animated");
		document.site.toggleClass(document.site._jobsViewerOpener, "s-jobs-viewer-opener-highlight");
		document.site.toggleClass(document.site._jobsViewerOpener, "s-jobs-viewer-opener", true);
	},
	alertUser: function() {
		var self = this;
		self._applyAlertStyle();
		clearInterval(self.jobsViewer.alertInterval);
		self.jobsViewer.alertInterval = setInterval(function() {
			if (!self._applyAlertStyle()) {
				self._removeAlertStyle();
				clearInterval(self.jobsViewer.alertInterval);
				clearTimeout(self.jobsViewer.alertTimeout);
			}
		}, 15000);
	},
	_appendDiagnoses: function(record, $diagnoses) {

		record.jobDiagnoses = [];
		for (var ii = 0, jj = $diagnoses.length; ii < jj; ii++) {
			var jobDiag = {
				$uuid: helpers.uuid.generate(),
				$index: ii,
				diagMsg: $diagnoses[ii].$message || $diagnoses[ii].message,
				$properties: {
					diagMsg: {
						$valueStyle: "cst_sty_jv" + (($diagnoses[ii].$severity || $diagnoses[ii].severity).toLowerCase() || "error")
					},
					diagStack: {
						$valueStyle: "cst_sty_jvwhitespace"
					}
				}
			};
			if ($diagnoses[ii].$stackTrace != undefined) {
				jobDiag.diagStack = [];
				jobDiag.diagStack.push({
					$uuid: helpers.uuid.generate(),
					$index: 0,
					stackTrace: $diagnoses[ii].$stackTrace
				});
			}

			// setting prioritary severity
			this.severity = this.severities[$diagnoses[ii].$severity] > this.severity ? this.severities[$diagnoses[ii].$severity] : this.severity;

			record.jobDiagnoses.push(jobDiag);
		}
		// in order not to limit number of diagnoses in the jobs view
		this.$diagItemsPerPage = this.$diagItemsPerPage + $diagnoses.length || $diagnoses.length;
		record.$properties.jobDiagnoses = {
			$itemsPerPage: this.$diagItemsPerPage
		};
	},
	_getPriorSeverity: function() {
		if (this.severity != undefined && this.severities != undefined) {
			var severities = Object.keys(this.severities);
			var severity;
			for (var ii = 0, jj = severities.length; ii < jj; ii++) {
				severity = this.severities[severities[ii]] == this.severity ? severities[ii] : severity;
			}
			return severity;
		} else {
			return "success";
		}
	},
	buildRecord: function(data, success) {
		var self = this;
		if (self.params) {
			var record = {};
			record.$properties = {};
			var $isHiddenFalse = {
				$isHidden: false
			};
			var $isHiddenTrue = {
				$isHidden: true
			};
			record.$links = {};
			record.$uuid = self.params.uuid;
			record.$index = self.$index;
			var $binds = ["jobTitle", "phase", "phaseDetail", "progress", "elapsedSeconds", "remainingSeconds", "startDate", "startTime"];

			// append data
			for (var ii = 0; ii < $binds.length; ii++) {
				if (data[$binds[ii]]) {
					record[$binds[ii]] = data[$binds[ii]];
					record.$properties[$binds[ii]] = $isHiddenFalse;
				}
			}

			// handle diagnoses
			if (data.$diagnoses) {
				self._appendDiagnoses(record, data.$diagnoses);
			}

			// progress bar
			if (success) {
				record.$links.$progressOn = $isHiddenTrue;
				record.$links.$progressOff = $isHiddenTrue;
				record.$links["$progress" + self.capitalize(self._getPriorSeverity())] = $isHiddenFalse;
			} else {
				record.$links.$progressOff = $isHiddenTrue;
				record.$links.$progressOn = $isHiddenFalse;
			}

			record.$links["$job" + self.capitalize(self.params.kind) + "Icon"] = $isHiddenFalse;

			return record;
		}
	},
	onError: function(error, httpquery, cbck) {
		var self = this;
		var $diagnoses;

		if (error.data.indexOf("$diagnoses") != -1) {
			$diagnoses = JSON.parse(error.data).$diagnoses;
			// setting prioritary severity
			for (var ii = 0, jj = $diagnoses.length; ii < jj; ii++) {
				this.severity = this.severity || 0;
				this.severity = this.severities[$diagnoses[ii].$severity] > this.severity ? this.severities[$diagnoses[ii].$severity] : this.severity;
			}
		} else {
			$diagnoses = [{
				$severity: "error",
				$message: error.data
			}];
			// setting prioritary severity
			this.severity = this.severities["error"];
		}
		var data = {};
		data.$diagnoses = $diagnoses;
		var record = self.buildRecord(data, true);
		var newData = {
			$jobDetails: [record]
		};
		self.jobsViewer.applyChange(newData, true);
		self.alertUser();
	},
	dispose: function() {
		this.params = null;
		this.cancelSvcId = null;
		this.explicitReleaseCallback = null;
		this.$index = null;
		this.$diagItemsPerPage = null;
	}
});