"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require('syracuse-ui/lib/article/article').Article;
var JobsPage = require('./jobsViewer').JobsPage;
var date = require('syracuse-core/lib/types/date');
var time = require('syracuse-core/lib/types/time');

function JobHandler() {}

exports.JobHandler = helpers.defineClass(JobHandler, null, {
	capitalize: function(s) {
		//capitalize first letter
		return s[0].toUpperCase() + s.slice(1);
	},
	cancelAsynchRequest: function() {
		if (this.asynchReq && this.asynchReq.length > 0) {
			for (var ii = 0; ii < this.asynchReq.length; ii++) {
				clearTimeout(this.asynchReq[ii]);
			}
		}
	},
	sendRequest: function(reqOpt, cbck, onRelease) {
		var self = this;

		// cancel any asynch request (202) if on release
		if (onRelease) {
			self.cancelAsynchRequest();
		}

		syra_controller.sendRequest(null, reqOpt, function(data, response, $url) {
			self.onSuccess(data, response, $url, cbck);
		}, function(error, httpquery) {
			self.onError(error, httpquery, cbck);
		});
	},
	buildReqOpt: function(method, $url) {
		var reqOpt = {};
		reqOpt.noDisplayErr = true;
		reqOpt.method = method || "GET";
		reqOpt.$location = {
			$url: $url
		};
		return reqOpt;
	},
	register: function(jobParams, currentState, nextStateSvcId, cancelSvcId, explicitReleaseCallback) {
		// properties used to set prioritary severity (used for adapting progress bar display at the end of the process)
		this.severities = {
			fatal: 4,
			error: 3,
			warning: 2,
			info: 1,
			success: 0
		};
		this.severity = 0;

		this.params = jobParams;

		// set/update jobs viewer properties
		if (!syra_site.jobsPage) {
			syra_site.jobsPage = new JobsPage();
			syra_site.jobsPage.jobsCount = 0;
			syra_site.jobsPage.$isEditMode = true;
		}
		// save job handler
		syra_site.jobsPage.addJob(this);

		// update jobs types list
		syra_site.jobsPage.updateJobsTypesList(this.params.kind, true);

		// init record for jobs viewer (desktopList)
		var record = this._buildInitRecord();
		var newData = {
			$jobType: syra_site.jobsPage.boundFields && syra_site.jobsPage.boundFields.$jobType[0].currentValue || 1,
			$jobDetails: [record],
			$properties: {
				$jobType: {
					$value: {
						$enum: syra_site.jobsPage.getJobsTypesEnum()
					}
				}
			}
		};

		// draw jobs viewer panel if necessary
		if (!syra_site.jobsPage.domItem) {
			syra_site.jobsPage.loadBox();
		}
		syra_site.jobsPage.toggle(true);
		// append job view (record)
		syra_site.jobsPage.isPageLoaded = true;
		syra_site.jobsPage.applyChange(newData, undefined, true);
	},
	_buildInitRecord: function() {
		var record;
		if (this.params) {
			record = {
				$properties: {
					jobTitle: {
						$isHidden: false
					}
				},
				$uuid: this.params.uuid,
				$index: syra_site.jobsPage.getRecordsList().length || 0,
				jobTitle: this.params.title,
				jobType: this.params.kind,
				percentage: 1
			};
			// handling date time data
			this._appendDateTimeData(this.params, record);
			// handle diagnoses
			if (this.params.$diagnoses) {
				this._appendDiagnoses(record, this.params.$diagnoses);
			}
			record.$links = {
				$progressOff: {
					$isHidden: false
				}
			};
			record.$links["$job" + this.capitalize(this.params.kind) + "Icon"] = {
				$isHidden: false
			};
			// append specific property (syra or fusion)
			this.appendSpecificProperty(record);
		} else {
			record = {
				$uuid: helpers.uuid.generate(),
				jobDiagnoses: [{
					$index: 0,
					diagMsg: syra_local.jobs_no_params
				}]
			};
		}
		return record;
	},
	_appendDiagnoses: function(record, $diagnoses) {
		record.jobDiagnoses = [];
		if (!syra_site.jobsPage._diagnosesId) {
			syra_site.jobsPage._diagnosesId = 1;
		}
		for (var ii = 0, jj = $diagnoses.length; ii < jj; ii++) {
			var jobDiag = {
				$uuid: ++syra_site.jobsPage._diagnosesId,
				diagMsg: $diagnoses[ii].$message || $diagnoses[ii].message,
				$properties: {
					diagMsg: {
						$valueStyle: "cst_sty_jv" + (($diagnoses[ii].$severity || $diagnoses[ii].severity).toLowerCase() || "error")
					},
					diagStack: {
						$valueStyle: "cst_sty_jvwhitespace"
					}
				}
			};
			if ($diagnoses[ii].$stackTrace != undefined) {
				jobDiag.diagStack = [{
					$uuid: syra_site.jobsPage._diagnosesId + "stack",
					stackTrace: $diagnoses[ii].$stackTrace
				}];
			}
			// setting prioritary severity
			this.severity = this.severities[$diagnoses[ii].$severity] > this.severity ? this.severities[$diagnoses[ii].$severity] : this.severity;

			record.jobDiagnoses.push(jobDiag);
		}
		// in order not to limit number of diagnoses in the jobs view
		this.$diagItemsPerPage = this.$diagItemsPerPage + $diagnoses.length || $diagnoses.length;
		record.$properties.jobDiagnoses = {
			$itemsPerPage: this.$diagItemsPerPage
		};
	},
	_appendDateTimeData: function(data, record) {
		if (data.startDate) {
			var startDate = new Date(data.startDate);
			record.startDate = date.fromJsDate(startDate).toString();
			record.startTime = time.fromJsDate(startDate).toString();
			record.$properties.startDate = {
				$isHidden: false
			};
			record.$properties.startTime = {
				$isHidden: false
			};
		}
	},
	buildRecord: function(data, success) {
		if (this.params) {
			var record = {
				$uuid: this.params.uuid,
				$index: syra_site.jobsPage.getRecord(this.params.uuid).getRecordIndex(),
				$properties: {},
				$links: {}
			};
			var $progressValue;
			if (success) {
				if (this.severity != undefined && this.severities != undefined) {
					var severities = Object.keys(this.severities);
					for (var ii = 0, jj = severities.length; ii < jj; ii++) {
						$progressValue = this.severities[severities[ii]] == this.severity ? severities[ii] : $progressValue;
					}
				}
				$progressValue = $progressValue || "success";
			}
			record.$links = {
				$progressValue: {
					$value: $progressValue || "on"
				}
			};
			var binds = ["jobTitle", "phase", "phaseDetail", "progress", "elapsedSeconds", "remainingSeconds"];
			// append data
			for (var ii = 0; ii < binds.length; ii++) {
				var bind = binds[ii];
				if (data[bind]) {
					record[bind] = data[bind];
					record.$properties[bind] = {
						$isHidden: false
					};
				}
			}
			// handling date time data
			this._appendDateTimeData(data, record);
			// handle diagnoses
			if (data.$diagnoses) {
				this._appendDiagnoses(record, data.$diagnoses);
			}
			record.$links["$job" + this.capitalize(this.params.kind) + "Icon"] = {
				$isHidden: false
			};
			return record;
		}
	},
	onError: function(error, httpquery, cbck) {
		var $diagnoses;
		if (error.data.indexOf("$diagnoses") != -1) {
			$diagnoses = JSON.parse(error.data).$diagnoses;
			if ($diagnoses) {
				// setting prioritary severity
				for (var ii = 0, jj = $diagnoses.length; ii < jj; ii++) {
					this.severity = this.severity || 0;
					this.severity = this.severities[$diagnoses[ii].$severity] > this.severity ? this.severities[$diagnoses[ii].$severity] : this.severity;
				}
			} else {
				$diagnoses = [{
					$severity: "error",
					$message: syra_local.job_err_without_diag.replace("{status}", error.status)
				}];
			}
		} else {
			$diagnoses = [{
				$severity: "error",
				$message: error.data
			}];
			// setting prioritary severity
			this.severity = this.severities["error"];
		}
		syra_site.jobsPage.applyChange({
			$jobDetails: [this.buildRecord({
				$diagnoses: $diagnoses
			}, true)]
		}, true);
	},
	dispose: function() {
		this.params = this.cancelSvcId = this.explicitReleaseCallback = this.$diagItemsPerPage = null;
	}
});