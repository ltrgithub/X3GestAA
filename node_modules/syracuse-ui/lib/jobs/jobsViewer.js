"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var jobsViewerPrototype = require("./setting/jobsViewerPrototype");
var jobsViewerArticle = require("./setting/jobsViewerArticle");

function JobsViewer(){
    this.localize = locale.resources(module)();
    this.jobsCount = 0;
}

exports.JobsViewer = helpers.defineClass(JobsViewer, RawPage, {
    addJob: function(jobView){
        var self = this;
        self.jobs = self.jobs || {};
        self.jobs[jobView.params.uuid] = jobView;
        self._updateJobsViewCount('add');
    },
    removeJob: function(uuid){
        var self = this;
        if (self.jobs) {
            self.jobs[uuid] && self.jobs[uuid].dispose && self.jobs[uuid].dispose();
            self._updateJobsViewCount('remove');
        }
    },
    updateJobsTypesList: function(jobType, add){
        var self = this;
        self.jobsTypes = self.jobsTypes || {};
        if (add) {
            var types = Object.keys(self.jobsTypes);
            if (types.length == 0) {
                self.jobsTypes[jobType] = {
                    count: 1
                };
            }
            else {
                if (self.jobsTypes[jobType]) {
                    self.jobsTypes[jobType].count++;
                }
                else {
                    self.jobsTypes[jobType] = {
                        count: 1
                    };
                }
            }
        }
        else {
            self.jobsTypes[jobType].count--;
        }
    },
    _getJobsTypesEnum: function(){
        var self = this;
        if (self.jobsTypes) {
            var jobsTypesEnum = [];
            var keys = Object.keys(self.jobsTypes);
            var addAll = false;
            for (var ii = 0; ii < keys.length; ii++) {
                if (self.jobsTypes[keys[ii]].count > 0) {
                    addAll = true;
                    jobsTypesEnum.push({
                        $value: ii + 1,
                        $title: keys[ii]
                    });
                }
            }
            if (addAll) {
                jobsTypesEnum.push({
                    $value: ii + 1,
                    $title: "all jobs"
                })
            }
            return jobsTypesEnum;
        }
        else {
            return [{
                $value: "1",
                $title: "all jobs"
            }]
        }
    },
    drawBox: function(){
        RawPage.prototype.drawBox.call(this);
    },
    loadBox: function(){
    
        var $skin = "s-jobs-viewer";
        var self = this;
        self.$prototype = jobsViewerPrototype.$prototype;
        self.$prototype.$properties.$jobType.$value.$enum = self._getJobsTypesEnum();
        
        //$choiceLayout: self.selectedTypeValue || "1",
        self.$item = jobsViewerArticle.$item;
        
        self.layoutSlot = document.createElement("div");
        self.layoutSlot.className = $skin;
        document.site.layoutSlot.appendChild(self.layoutSlot);
        
        RawPage.prototype.loadBox.call(self);
    },
    notifyDataChange: function(field, value){
    
        /*if (field.$item.$bind == "$search") {
         // only if search field not empty
         if (value.replace(/\s+/g, '') !== "") {
         this.dataset[field.$item.$bind] = value;
         this.menuItems["$searchLink"][0].$url = this.$prototype.$links.$searchLink.$url + "";
         document.controller.executeMenu(this.menuItems["$searchLink"][0]);
         }
         }*/
    },
    onMenuClick: function(menuItem){
        var self = this;
        switch (menuItem.$bind) {
            case "$clearJob":
                self._onJobViewRemove(menuItem);
                
                break;
        }
        
        
        // to prevent call to document.controller.executeMenu
        menuItem.onMenuClick = this.onMenuItemClick;
        
        return false;
    },
    _removeJobView: function(record){
        var self = this;
        this.removeJob(record.$uuid);
        record.remove();
        self.updateJobsTypesList(record.dataset.jobType);
        
        // update types list
        
        if (self.jobsCount == 0) {
            //self._item.style.display = "none";
            self.$$item.remove();
            //TODO : document.site._jobsViewerOpener.style.display = "none";
        }
        else {
            // update types list
            self.applyChange({
                $properties: {
                    $jobType: {
                        $value: {
                            $enum: self._getJobsTypesEnum()
                        }
                    }
                }
            });
        }
    },
    _updateJobsViewCount: function(operation){
        switch (operation) {
            case 'add':
                //document.site._jobsViewerOpener.textContent = ++this.jobsCount;
                ++this.jobsCount;
                break;
            case 'remove':
                //document.site._jobsViewerOpener.textContent = --this.jobsCount;
                --this.jobsCount;
                break;
        }
    },
    onMenuItemClick: function(menuItem){
        return false;
    },
    _onJobViewRemove: function(menuItem){
        var self = this;
        // Alert if job still in progress (depends on progress bar beeing visible or not)
        // getting progress bar item
        var keys = Object.keys(menuItem.articleParent.idMap);
        var progressItem;
        for (var mm = 0, kk = keys.length; mm < kk; mm++) {
            var item = menuItem.articleParent.idMap[keys[mm]];
            if (item.$item && item.$item.$bind == '$progressOn') {
                progressItem = item;
            }
        }
        
        // show alert
        if (progressItem && progressItem.$$item.is(":visible")) {
            var options = {};
            options.$message = (self.localize.job_remove_msg.replace("{jobTitle}", menuItem.articleParent.dataset.jobTitle)).replace("{jobKind}", menuItem.articleParent.dataset.jobType);
            options.$type = "warning";
            options.$buttons = "yesno";
            options.$autoClose = 25000;
            options.$default = "no";
            options.$title = self.localize.job_remove_title;
            options.callback = function(response, closedBy){
                var close = closedBy == "no" || closedBy == "auto";
                if (!close) {
                    self._removeJobView(menuItem.articleParent);
                }
                return true;
            }
            document.site.showMessage(options);
        }
        
        // remove record
        else {
            self._removeJobView(menuItem.articleParent);
        }
        
    },
    applyChange: function(newData){
    
        RawPage.prototype.applyChange.call(this, newData);
        
        if (newData.$jobDetails && newData.$jobDetails.length > 0) {
            var recordWithDiag = {};
            for (var pp = 0, hh = newData.$jobDetails.length; pp < hh; pp++) {
                if (newData.$jobDetails[pp].diagnoseFatal ||
                newData.$jobDetails[pp].diagnoseError ||
                newData.$jobDetails[pp].diagnoseWarning ||
                newData.$jobDetails[pp].diagnoseInfo ||
                newData.$jobDetails[pp].diagnoseSuccess) {
                    recordWithDiag[pp] = {};
                }
            }
            
            var records = this.boundFields.$jobDetails[0].records;
            for (var ii = 0, jj = records.length; ii < jj; ii++) {
                if (recordWithDiag[ii]) {
                    var keys = Object.keys(records[ii].idMap);
                    for (var mm = 0, kk = keys.length; mm < kk; mm++) {
                        var item = records[ii].idMap[keys[mm]];
                        if (item.$item && item.$item.$isDiagBox) {
                            item.setState({
                                $isHidden: false
                            });
                        }
                    }
                }
            }
        }
        
    },
    toggle: function(){
        /*if (this.$$item.is(":visible")) {
         this.$$item.hide();
         }*/
        /*
         else {
         this.$$item.show();
         }*/
    },
    dispose: function(){
        RawPage.prototype.dispose.call(this);
    }
});

