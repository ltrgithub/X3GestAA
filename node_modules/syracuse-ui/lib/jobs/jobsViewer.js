"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

function JobsViewer(){
}

exports.JobsViewer = helpers.defineClass(JobsViewer, null, {
    create: function(){
        var self = this;
        
        self.localize = locale.resources(module)();
        
        self.jobsCount = 0;
        
        // $$item
        self._item = document.createElement("div");
        self._item.className = "s-jobs-viewer";
        self.$$item = $(self._item);
        
        // header
        self._appendHeader();
        
        var container = document.createElement("div");
        container.className = "s-jobs-viewer-container";
        self._item.appendChild(container);
        
        // $$core
        self._core = document.createElement("div");
        self._core.className = "s-jobs-viewer-core";
        $(container).append(self.$$core = $(self._core));
        
        // append to site
        document.site.appendJobsViewer(self);
        
        self._bindEvents(true);
    },
    _appendHeader: function(){
        // header will show two informations : job type filtering and delete all button
        
        var self = this;
        
        // container
        self._header = document.createElement("div");
        self._header.className = "s-jobs-viewer-header";
        
        // type
        var div = document.createElement("div");
        div.className = "s-jobs-viewer-type";
        var label = document.createElement("label");
        label.className = "s-jobs-viewer-type-label";
        label.textContent = self.localize.jv_type_label;
        div.appendChild(label);
        self._selector = document.createElement("a");
        self._selector.textContent = self.localize.jv_type_default;
        self.$selectedType = 'default';
        self._selector.className = "s-jobs-viewer-type-selector";
        div.appendChild(self._selector);
        self._header.appendChild(div);
        
        // delete all
        div = document.createElement("div");
        div.className = "s-jobs-viewer-clear";
        self._clear = document.createElement("a");
        self._clear.className = "s-jobs-viewer-clear-btn";
        self._clear.textContent = self.localize.jv_clear;
        div.appendChild(self._clear);
        self._header.appendChild(div);
        
        self._item.appendChild(self._header);
    },
    updateHeader: function(operation, jobView){
        var self = this;
        switch (operation) {
            case "add":
                //TODO use jobView ?
                break;
            case "remove":
                //TODO use jobView ?
                break;
        }
    },
    _bindEvents: function(bind){
        var self = this;
        if (self.$$item) {
            if (bind) {
                self.$$item.delegate("a.s-jobs-viewer-clear-btn", "click", function(){
                    self._onClean();
                    //TODO
                    /*
                     var ids = Object.keys(self.jobsViews);
                     for (var ii = 0; ii < ids.length; ii++) {
                     self.onJobViewRemove(self.jobsViews[ids[ii]]);
                     }*/
                }).delegate("a.s-jobs-viewer-type-selector", "click", function(){
                    if (self._typesSelector) {
                        if ($(self._typesSelector).is(":visible")) {
                            self._typesSelector.style.display = "none";
                        }
                        
                        else {
                            $(self._typesSelector).show().position({
                                my: "right top",
                                at: "left bottom",
                                of: $(self._header)
                            })
                        }
                    }
                }).delegate("a[class*='s-jobs-viewer-select-']", "click", function(){
                    self._onJobTypeSelect($(this)[0]);
                });
            }
            else {
                self.$$item.undelegate();
            }
        }
    },
    _onClean: function(){
        var self = this;
        if (self.jobsViews) {
            var jobsViews = Object.keys(self.jobsViews);
            if (self.$selectedType == 'default') {
                for (var ii = 0; ii < jobsViews.length; ii++) {
                    self.onJobViewRemove(self.jobsViews[jobsViews[ii]]);
                }
            }
            else {
                for (var ii = 0; ii < jobsViews.length; ii++) {
                    if (self.jobsViews[jobsViews[ii]].$jobType == self.$selectedType) {
                        self.onJobViewRemove(self.jobsViews[jobsViews[ii]]);
                    }
                }
            }
        }
    },
    _onJobTypeSelect: function(typeDom){
        var self = this;
        if (self.jobsViews && typeDom.getAttribute("data-s-job-type") != self.$selectedType) {
            var jobsViews = Object.keys(self.jobsViews);
            
            if (typeDom.getAttribute("data-s-job-type") == "default") {
                for (var ii = 0; ii < jobsViews.length; ii++) {
                    self.jobsViews[jobsViews[ii]]._item.style.display = "";
                }
            }
            else {
                for (var ii = 0; ii < jobsViews.length; ii++) {
                    self.jobsViews[jobsViews[ii]]._item.style.display = self.jobsViews[jobsViews[ii]].$jobType == typeDom.getAttribute("data-s-job-type") ? "" : "none";
                }
            }
            
            self._selector.textContent = typeDom.getAttribute("data-s-job-type") == "default" ? self.localize.jv_type_default : self.localize.jv_type_selected.replace('{jobType}', typeDom.getAttribute('data-s-job-type'));
            self._clear.textContent = typeDom.getAttribute("data-s-job-type") == "default" ? self.localize.jv_clear : self.localize.jv_clear + ' ' + typeDom.getAttribute("data-s-job-type");
        }
        self.$selectedType = typeDom.getAttribute("data-s-job-type");
        self._typesSelector.style.display = "none";
    },
    appendJobView: function(jobView){
        var self = this;
        
        self.jobsViews = self.jobsViews || {};
        self.jobsViews[jobView.job.params.uuid] = jobView;
        
        self._updateJobsTypes(jobView.$jobType, true);
        
        self._core.appendChild(jobView.$$item[0]);
        
        // hide if jobs type filtered
        if (self.$selectedType && self.$selectedType != 'default' && self.$selectedType != jobView.$jobType) {
            jobView.$$item.hide();
        }
        
        self._updateJobsViewCount('add');
        self.toggle(true);
    },
    _updateJobsTypes: function(jobType, add){
        var self = this;
        self.jobsTypes = self.jobsTypes || {};
        if (add) {
            var types = Object.keys(self.jobsTypes);
            if (types.length == 0) {
                self.jobsTypes[jobType] = {
                    count: 1
                };
            }
            else {
                if (self.jobsTypes[jobType]) {
                    self.jobsTypes[jobType].count++;
                }
                else {
                    self.jobsTypes[jobType] = {
                        count: 1
                    };
                }
            }
        }
        else {
            self.jobsTypes[jobType].count--;
        }
        
        self._updateJobsTypesSelector();
    },
    _updateJobsTypesSelector: function(){
        var self = this;
        if (!self._typesSelector) {
            self._typesSelector = document.createElement('nav');
            self._typesSelector.className = 's-jobs-viewer-types-list';
            self._typesSelector.style.display = "none";
            self._item.appendChild(self._typesSelector);
        }
        
        else {
            document.site.emptyDom(self._typesSelector);
        }
        
        if (self.jobsTypes && Object.keys(self.jobsTypes).length > 0) {
            var div = document.createElement("div");
            div.className = "s-jobs-viewer-types-select";
            var mn;
            var types = Object.keys(self.jobsTypes);
            for (var ii = 0; ii < types.length; ii++) {
                if (self.jobsTypes[types[ii]] && self.jobsTypes[types[ii]].count > 0) {
                    mn = document.createElement("a");
                    mn.className = "s-jobs-viewer-select-" + types[ii];
                    mn.setAttribute("data-s-job-type", types[ii])
                    mn.textContent = types[ii].toUpperCase();
                    div.appendChild(mn);
                }
            }
            // append 'all types' selection
            mn = document.createElement("a");
            mn.className = "s-jobs-viewer-select-default";
            mn.setAttribute("data-s-job-type", "default");
            mn.textContent = self.localize.jv_type_default.toUpperCase();
            div.appendChild(mn);
            
            // append types list
            self._typesSelector.appendChild(div);
        }
    },
    _updateJobsViewCount: function(operation){
        switch (operation) {
            case 'add':
                document.site._jobsViewerOpener.textContent = ++this.jobsCount;
                break;
            case 'remove':
                document.site._jobsViewerOpener.textContent = --this.jobsCount;
                break;
        }
    },
    onJobViewRemove: function(jobView){
        var self = this;
        // alert if job still in progress 
        if (jobView._progressValue && jobView._progressValue.className == "s-job-view-progress-value") {
            var options = {};
            options.$message = (jobView.localize.job_remove_msg.replace("{jobTitle}", jobView._title.textContent)).replace("{jobKind}", jobView.job.params.kindLabel || jobView.job.params.kind || "");
            options.$message.replace("{jobTitle}", jobView._title.textContent);
            options.$type = "warning";
            options.$buttons = "yesno";
            options.$autoClose = 25000;
            options.$default = "no";
            options.$title = jobView.localize.job_remove_title;
            options.callback = function(response, closedBy){
                var close = closedBy == "no" || closedBy == "auto";
                if (!close) {
                    self._removeJobView(jobView);
                }
                return true;
            }
            document.site.showMessage(options);
        }
        else {
            self._removeJobView(jobView);
        }
    },
    _removeJobView: function(jobView){
        var self = this;
        jobView.$$item.remove();
        self._updateJobsViewCount('remove');
        self._updateJobsTypes(jobView.$jobType);
        if (self.jobsCount == 0) {
            self._item.style.display = "none";
            document.site._jobsViewerOpener.style.display = "none";
            
            // reset values
            self._clear.textContent = self.localize.jv_clear;
            self._selector.textContent = self.localize.jv_type_default;
            self.$selectedType = 'default';
        }
    },
    toggle: function(show, event){
        var self = this;
        switch (show) {
            case true:
                self._item.style.display = '';
                document.site.setZIndex(self._item);
                //self._core.style.display = "block";
                document.site._jobsViewerOpener.style.display = "";
                break;
            case false:
                if (event && ($(event.target).hasClass('s-job-view-remove-btn') || $(event.target).closest(self.$$item).length)) {
                    return;
                }
                //self._core.style.display = "none";
                self._item.style.display = "none";
                break;
            default:
                //self._core.style.display = !self._core.style.display || self._core.style.display == "block" ? "none" : "block";
                self._item.style.display = !self._item.style.display || self._item.style.display == "block" ? "none" : "block";
        }
    },
    _toggleViewerCore: function(){
        //TODO : animation
    },
    dispose: function(){
        this._bindEvents(false);
    }
});
