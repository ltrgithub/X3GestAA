"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var jobsViewerPrototype = require("./setting/jobsViewerPrototype");
var jobsViewerArticle = require("./setting/jobsViewerArticle");

function JobsViewer(){
    this.localize = locale.resources(module)();
    this.jobsCount = 0;
    this.$isEditMode = true;
}

exports.JobsViewer = helpers.defineClass(JobsViewer, RawPage, {
    addJob: function(jobHandler){
        var self = this;
        self.jobs = self.jobs || {};
        self.jobs[jobHandler.params.uuid] = jobHandler;
        self._updateJobsViewCount('add');
    },
    removeJob: function(uuid){
        var self = this;
        if (self.jobs) {
            self.jobs[uuid] && self.jobs[uuid].dispose && self.jobs[uuid].dispose();
            self._updateJobsViewCount('remove');
        }
    },
    updateJobsTypesList: function(jobType, add){
        var self = this;
        self.jobsTypes = self.jobsTypes || {};
        if (add) {
            var types = Object.keys(self.jobsTypes);
            if (types.length == 0) {
                self.jobsTypes[jobType] = {
                    count: 1
                };
            }
            else {
                if (self.jobsTypes[jobType]) {
                    self.jobsTypes[jobType].count++;
                }
                else {
                    self.jobsTypes[jobType] = {
                        count: 1
                    };
                }
            }
        }
        else {
            self.jobsTypes[jobType].count--;
        }
    },
    _getJobsTypesEnum: function(){
        var self = this;
        if (self.jobsTypes) {
            var jobsTypesEnum = [];
            var keys = Object.keys(self.jobsTypes);
            for (var ii = 0; ii < keys.length; ii++) {
                if (self.jobsTypes[keys[ii]].count > 0) {
                    jobsTypesEnum.push({
                        $value: ii + 1,
                        $title: keys[ii]
                    });
                }
            }
            
            if (jobsTypesEnum.length > 1) {
                jobsTypesEnum.push({
                    $value: ii + 1,
                    $title: self.localize.jv_type_default
                })
            }
            return jobsTypesEnum;
        }
        else {
            return [{
                $value: "1",
                $title: self.localize.jv_type_default
            }]
        }
    },
    drawBox: function(){
        RawPage.prototype.drawBox.call(this);
    },
    loadBox: function(){
    
        var $skin = "s-jobs-viewer";
        var self = this;
        self.$prototype = jobsViewerPrototype.$prototype;
        self.$prototype.$properties.$jobType.$value.$enum = self._getJobsTypesEnum();
        
        //$choiceLayout: self.selectedTypeValue || "1",
        self.$item = jobsViewerArticle.$item;
        
        self.layoutSlot = document.createElement("div");
        self.layoutSlot.className = $skin;
        document.site.layoutSlot.appendChild(self.layoutSlot);
        
        RawPage.prototype.loadBox.call(self);
    },
    onMenuClick: function(menuItem){
        var self = this;
        switch (menuItem.$bind) {
            case "$clearJob":
                self._onJobViewRemove(menuItem, menuItem.$clearForced);
                break;
            case "$clearList":
                self._onClearList(menuItem);
                break;
            case "$download":
                window.open(menuItem.$url, "_blank");
                break;
            case "$cancel":
                var callback = function(){
                    self.jobs[menuItem.articleParent.$uuid].onClientRelease();
                }
                self._showMessage(menuItem, callback);
                break;
            case "$abort":
            case "$suspend":
            case "$resume":
                var callback = function(){
                    self.jobs[menuItem.articleParent.$uuid].onClientRelease(menuItem.$url);
                }
                self._showMessage(menuItem, callback);
                break;
        }
        
        // to prevent call to document.controller.executeMenu
        menuItem.onMenuClick = this.onMenuItemClick;
        
        return false;
    },
    onMenuItemClick: function(menuItem){
        return false;
    },
    getRecordsList: function(type){
        var self = this;
        if (type) {
            var records = self.boundFields.$jobDetails[0].records;
            var list = [];
            for (var mm = 0, pp = records.length; mm < pp; mm++) {
                if ((records[mm].dataset.jobType == type) || (type == self.localize.jv_type_default)) {
                    list.push(records[mm]);
                }
            }
            return list;
        }
        else {
            return (self.boundFields && self.boundFields.$jobDetails[0].records) || [];
        }
    },
    _hasJobInProgress: function(list){
        var self = this;
        for (var ii = 0, jj = list.length; ii < jj; ii++) {
            var record = list[ii];
            var keys = Object.keys(record.idMap);
            for (var mm = 0, kk = keys.length; mm < kk; mm++) {
                var item = record.idMap[keys[mm]];
                if (item.$item && item.$item.$bind == '$progressOn' && item.$$item.is(":visible")) {
                    return true;
                }
            }
        }
    },
    _getRecord: function(uuid){
        return this.boundFields && this.boundFields.$jobDetails[0].recordsMap[uuid] || null;
    },
    _onClearList: function(menuItem){
        var self = this;
        // get selected job type
        var selectedValue = self.boundFields.$jobType[0].currentValue;
        var $enum = self.boundFields.$jobType[0].$enum;
        var selectedTitle;
        for (var ii = 0, jj = $enum.length; ii < jj; ii++) {
            if ($enum[ii].$value == selectedValue) {
                selectedTitle = $enum[ii].$title;
                break;
            }
        }
        var list = self.getRecordsList(selectedTitle);
        if (self._hasJobInProgress(list)) {
            self._showMessage(menuItem, function(){
                self._clearList(list);
            });
        }
        else {
            self._clearList(list);
        }
    },
    _clearList: function(list){
        var self = this;
        for (var ii = 0, jj = list.length; ii < jj; ii++) {
            list[ii].menuItems.$clearJob[0].$clearForced = true;
            list[ii].menuItems.$clearJob[0].click();
        }
    },
    _updateJobsViewCount: function(operation){
        switch (operation) {
            case 'add':
                document.site._jobsViewerOpener.style.display = "";
                this.$$item && this.$$item.show();
                document.site._jobsViewerOpener.textContent = ++this.jobsCount;
                break;
            case 'remove':
                document.site._jobsViewerOpener.textContent = --this.jobsCount;
                break;
        }
    },
    _onJobViewRemove: function(menuItem, forced){
        var self = this;
        
        // clear forced (in case of list clear action)
        if (forced) {
            self._removeJobView(menuItem.articleParent);
            return;
        }
        
        // alert if job in progress
        if (self._hasJobInProgress([menuItem.articleParent])) {
            self._showMessage(menuItem, function(){
                self._removeJobView(menuItem.articleParent);
            });
        }
        else {
            self._removeJobView(menuItem.articleParent);
        }
    },
    _removeJobView: function(record){
        var self = this;
        self.updateJobsTypesList(record.dataset.jobType);
        this.removeJob(record.$uuid);
        var list = self.getRecordsList(self.localize.jv_type_default);
        
        
        var newData = {};
        var $enum = self._getJobsTypesEnum();
        if ($enum.length == 1) {
            var $jobType = $enum[0].$value;
        }
        
        newData = {
            $jobType: $jobType,
            $jobDetails: [{
                $uuid: record.$uuid,
                $index: record.$recordIndex,
                $isDeleted: true
            }],
            $properties: {
                $jobType: {
                    $value: {
                        $enum: $enum
                    }
                }
            }
        };
        
        self.applyChange(newData);
        
        // if one type left, show previously hidden jobs views (useful in case of previous filtering)
        if ($enum.length == 1) {
            var records = self.getRecordsList();
            for (var ii = 0, jj = records.length; ii < jj; ii++) {
                records[ii].$$item.show();
            }
        }
        
        
        if (self.jobsCount == 0) {
            //self._item.style.display = "none";
            self.$$item.hide();
            document.site._jobsViewerOpener.style.display = "none";
        }
    },
    _showMessage: function(menuItem, cbck){
        var self = this;
        var options = {};
        options.$message = (self.localize['job_' + menuItem.$bind.slice(1) + '_msg'].replace("{jobTitle}", menuItem.articleParent.dataset.jobTitle)).replace("{jobKind}", menuItem.articleParent.dataset.jobType);
        options.$title = self.localize['job_' + menuItem.$bind.slice(1) + '_title'];
        options.$type = "warning";
        options.$buttons = "yesno";
        options.$autoClose = 25000;
        options.$default = "no";
        options.callback = function(response, closedBy){
            var close = closedBy == "no" || closedBy == "auto";
            if (!close) {
                cbck();
            }
            return true;
        }
        document.site.showMessage(options);
        self.msgBoxId = document.site._msgBox.id;
    },
    notifyDataChange: function(field, value){
        var self = this;
        // get title
        var title;
        for (var ii = 0, jj = field.$enum.length; ii < jj; ii++) {
            if (field.$enum[ii].$value == value) {
                title = field.$enum[ii].$title;
                break;
            }
        }
        // show or hide corresponding records
        if (title) {
            var records = self.getRecordsList();
            for (var mm = 0, pp = records.length; mm < pp; mm++) {
                if ((records[mm].dataset.jobType == title) || (title == self.localize.jv_type_default)) {
                    records[mm].$$item.show();
                }
                else {
                    records[mm].$$item.hide();
                }
            }
        }
    },
    applyChange: function(newData, closeMsgBox){
        var self = this;
        RawPage.prototype.applyChange.call(this, newData);
        
        // show diagnose block in jobview if any diagnoses
        if (newData.$jobDetails && newData.$jobDetails.length > 0) {
            var recordWithDiag = {};
            
            for (var pp = 0, hh = newData.$jobDetails.length; pp < hh; pp++) {
                if (newData.$jobDetails[pp].diagnoseFatal ||
                newData.$jobDetails[pp].diagnoseError ||
                newData.$jobDetails[pp].diagnoseWarning ||
                newData.$jobDetails[pp].diagnoseInfo ||
                newData.$jobDetails[pp].diagnoseSuccess) {
                    var record = self._getRecord(newData.$jobDetails[pp].$uuid);
                    var keys = Object.keys(record.idMap);
                    for (var mm = 0, kk = keys.length; mm < kk; mm++) {
                        var item = record.idMap[keys[mm]];
                        if (item.$item && item.$item.$isDiagBox) {
                            item.setState({
                                $isHidden: false
                            });
                        }
                    }
                }
            }
        }
        
        // if success, close any message box opened from jobsViewer
        if (closeMsgBox && document.site._msgBox && self.msgBoxId == document.site._msgBox.id && !document.site._msgBox.disposed) {
            document.site._msgBox.close("no");
        }
    },
    toggle: function(){
        /*if (this.$$item.is(":visible")) {
         this.$$item.hide();
         }*/
        /*
         else {
         this.$$item.show();
         }*/
    },
    dispose: function(){
        RawPage.prototype.dispose.call(this);
    }
});

