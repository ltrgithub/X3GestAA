"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var _formatApi = require('syracuse-ui/lib/field/formatApi');

function _hasJobInProgress(records) {
	for (var ii = 0, jj = records.length; ii < jj; ii++) {
		var $progressValue = records[ii].$menus && records[ii].$menus.$progressValue;
		if ($progressValue && $progressValue.$value == "on") {
			return true;
		}
	}
}

function _clearJob(record) {
	var page = record.page;
	page.updateJobsTypesList(page.jobs[record.dataset.$uuid].params.kind);
	if (page.jobs) {
		page.jobs[record.$uuid] && page.jobs[record.$uuid].dispose && page.jobs[record.$uuid].dispose();
		syra_site._jobsViewerOpener.textContent = --page.jobsCount;
	}

	var list = page.getRecords(syra_local.jv_type_default);

	var $enum = page.getJobsTypesEnum();
	if ($enum.length == 1) {
		var $jobType = $enum[0].$value;
	}
	page.applyChange({
		$jobType: $jobType,
		$jobDetails: [{
			$uuid: record.$uuid,
			$index: record.getRecordIndex(),
			$isDeleted: true
		}],
		$properties: {
			$jobType: {
				$value: {
					$enum: $enum
				}
			}
		}
	});

	// if one type left, show previously hidden jobs views (useful in case of previous filtering)
	if ($enum.length == 1) {
		var records = page.getRecords();
		for (var ii = 0, jj = records.length; ii < jj; ii++) {
			records[ii].domItem.style.display = "";
		}
	}

	if (page.jobsCount == 0) {
		page.domItem.style.display = "none";
		syra_site._jobsViewerOpener.style.display = "none";
	}
}

function _showMessage(page, menuItem, cbck) {
	page.msgBoxId = syra_diagnose.showBox({
		$message: (syra_local['job_' + menuItem.$bind.slice(1) + '_msg'].replace("{jobTitle}", menuItem.articleParent.dataset.jobTitle)).replace("{jobKind}", menuItem.articleParent.dataset.jobType),
		$title: syra_local['job_' + menuItem.$bind.slice(1) + '_title'],
		$type: "warning",
		$buttons: "yesno",
		$isAutoClose: 25000,
		$default: "no",
		callback: function(response, closedBy) {
			var close = closedBy == "no" || closedBy == "auto";
			if (!close) {
				cbck();
			}
			return true;
		}
	}).id;
}

function _addRecordRow1(record) {
	var page = record.page;
	var row = document.createElement("div");
	row.className = "s-job-view-row";
	record.body.appendChild(row);
	record.typeIcon = row.appendChild(document.createElement("div"));
	page.loadNewItem(row, {
		$layoutType: "stack",
		$css: "s-job-view-phase-info",
		$items: [{
			$bind: "$progressValue",
			$isTitleHidden: true,
			$category: "link",
			$noText: true,
			$prefixValue: "s-job-",
			$skin: "s-job-view-progress-value"
		}, {
			$bind: "progress",
			$isHidden: true,
			$isTitleHidden: true,
			$isEditMode: false,
			$css: "s-job-view-info-field",
			$skin: "s-job-view-progress-data",
			$isTopLabelAlignment: true
		}]
	}, record);

	var cell = document.createElement("div");
	cell.className = "s-job-action-slot";
	row.appendChild(cell);
	record.jobBtn = syra_menus.addTextButton("", "s-job-action-link", "onJobActionClick", null, "cancel");
	record.jobBtn.style.visibility = "hidden";
	record.jobBtn.syraItem = page.id;
	cell.appendChild(record.jobBtn);

	record.clearBtn = syra_menus.addIconButton(syra_local.jobs_clear_job, "s-job-view-remove-btn", "onClearJob", null, "delete");
	record.clearBtn.syraRecord = record.id;
	record.clearBtn.syraItem = page.id;
	row.appendChild(record.clearBtn);
}

function _addCell(row, $title) {
	var title = document.createElement("div");
	title.textContent = $title;
	title.className = "s-job-view-info-title";
	var value = document.createElement("div");
	value.className = "s-job-view-info-value";
	return {
		title: row.appendChild(title),
		value: row.appendChild(value)
	};
}

function _addRecordRow2(record) {
	var row = document.createElement("div");
	row.className = "s-job-view-infos";
	record.body.appendChild(row);
	record.infos = {
		jobTitle: _addCell(row, syra_local.jobs_job_title),
		phase: _addCell(row, syra_local.jobs_job_phase),
		phaseDetail: _addCell(row, syra_local.jobs_job_phase_detail),
		startTime: _addCell(row, syra_local.jobs_job_starttime),
		startDate: _addCell(row, syra_local.jobs_job_startdate),
		elapsedSeconds: _addCell(row, syra_local.jobs_elapsed_seconds),
		remainingSeconds: _addCell(row, syra_local.jobs_remaining_seconds)
	};
}

function JobsPage() {

}

exports.JobsPage = helpers.defineClass(JobsPage, RawPage, {
	addJob: function(jobHandler) {
		this.jobs = this.jobs || {};
		this.jobs[jobHandler.params.uuid] = jobHandler;
		this.incrementCount();
	},
	updateJobsTypesList: function(jobType, add) {
		this.jobsTypes = this.jobsTypes || {};
		if (add) {
			var types = Object.keys(this.jobsTypes);
			if (types.length == 0) {
				this.jobsTypes[jobType] = {
					count: 1
				};
			} else {
				if (this.jobsTypes[jobType]) {
					this.jobsTypes[jobType].count++;
				} else {
					this.jobsTypes[jobType] = {
						count: 1
					};
				}
			}
		} else {
			this.jobsTypes[jobType].count--;
		}
	},
	getJobsTypesEnum: function() {
		if (this.jobsTypes) {
			var jobsTypesEnum = [];
			var keys = Object.keys(this.jobsTypes);
			for (var ii = 0; ii < keys.length; ii++) {
				if (this.jobsTypes[keys[ii]].count > 0) {
					jobsTypesEnum.push({
						$value: ii + 1,
						$title: keys[ii]
					});
				}
			}

			if (jobsTypesEnum.length > 1) {
				jobsTypesEnum.push({
					$value: ii + 1,
					$title: syra_local.jv_type_default
				});
			}
			return jobsTypesEnum;
		} else {
			return [{
				$value: "1",
				$title: syra_local.jv_type_default
			}];
		}
	},
	loadBox: function() {
		this.datetApi = _formatApi.getApi("application/x-date");
		this.dateLocalFormat = _formatApi.getLocalFormat("application/x-date");
		this.timeApi = _formatApi.getApi("application/x-time");
		this.timeLocalFormat = _formatApi.getLocalFormat("application/x-time");

		var $skin = "s-jobs-viewer";
		this.$prototype = {
			$properties: {
				$jobType: {
					$type: "application/x-choice",
					$title: syra_local.jobs_list,
					$value: {
						$type: "application/x-integer",
						$enum: this.getJobsTypesEnum()
					}
				},
				$jobDetails: {
					"$type": "application/x-array",
					$item: {
						$properties: {
							progress: {
								$title: syra_local.jobs_progress,
								$type: "application/x-quantity",
								$value: {
									$title: "{$value} {$unit}",
									$type: "application/x-decimal",
									$format: "0.00"
								},
								$unit: "percentage"
							},
							percentage: {
								"$title": "Percentage",
								"$type": "application/x-choice",
								"$value": {
									"$type": "application/x-integer",
									"$enum": [{
										"$value": 1,
										"$title": syra_local.jobs_percent
									}]
								}
							},
							pollingMillis: {
								$type: "application/x-integer",
								$title: syra_local.jobs_polling_millis
							},
							progressIcon: {
								$type: "application/x-string",
								$title: syra_local.jobs_progress_icon
							},
							jobDiagnoses: {
								$type: "application/x-array",
								$item: {
									$type: "application/json",
									$properties: {
										diagMsg: {
											$type: "application/x-string"
										},
										diagStack: {
											$type: "application/x-array",
											$title: syra_local.jobs_diagStackTrace,
											$item: {
												$properties: {
													stackTrace: {
														$type: "application/x-string"
													}
												},
												$isEditMode: false,
												$isTitleRowHidden: true,
												$isTitleHidden: true,
												$isPagerHidden: true,
												$isMenuRecordHidden: true
											}
										}
									}
								}
							}
						}
					}
				}
			}
		};

		//$choiceLayout: this.selectedTypeValue || "1",
		this.$item = {
			$skin: "s-jobs-viewer-h1",
			$layout: {
				$items: []
			}
		};

		this.layoutSlot = document.createElement("div");
		this.layoutSlot.className = $skin;
		syra_site.layoutSlot.appendChild(this.layoutSlot);

		RawPage.prototype.loadBox.call(this);
		var header = document.createElement("div");
		header.className = "s-jobs-viewer-header";
		this.domItem.insertBefore(header, this.domItem.firstChild);
		this.jobTypeField = this.loadNewItem(header, {
			$css: "s-jobs-viewer-types-list",
			$bind: "$jobType",
			$isEditMode: true,
			$format: "$combo"
		});
		var btn = syra_menus.addTextButton(syra_local.jobs_clear_list, "s-jobs-viewer-clear-list", "onClearList");
		btn.syraItem = this.id;
		header.appendChild(btn);

		var body = document.createElement("div");
		body.className = "s-jobs-viewer-body";
		this.jobDetailsField = this.loadNewItem(body, {
			$skin: "s-jobs-viewer-head",
			$css: "s-jobs-viewer-head",
			$format: "cards",
			$bind: "$jobDetails",
			$alternateStyle: false,
			$isTitleHidden: true,
			$isPagerHidden: true,
			$isMenuRecordHidden: true,
			$skinCard: "s-jobs-viewer-cards",
			$isDrawOrderReversed: true,
			renderRecordContent: function(record) {
				_addRecordRow1(record);
				_addRecordRow2(record);
				record.page.loadNewItem(record.body, {
					$isBoxCollapsable: true,
					$skin: "s-h3",
					$opened: false,
					$title: syra_local.jobs_diag,
					$isHidden: true,
					$isDiagBox: true,
					$css: $skin + "-diagnose",
					$layout: {
						$layoutType: "stack",
						$items: [{
							$isEditMode: false,
							$isTitleRowHidden: true,
							$isTitleHidden: true,
							$isPagerHidden: true,
							$isMenuRecordHidden: true,
							$bind: "jobDiagnoses",
							$fitWidth: true,
							$layout: {
								$items: [{
									$bind: "diagMsg"
								}]
							}
						}]
					}
				}, record);
			}
		});
		this.domItem.insertBefore(body, body.nextSibling);
	},
	onClearJob: function(event, target) {
		var record = syra_store.get(target.syraRecord);
		if (_hasJobInProgress([record])) {
			_showMessage(this, {
				$bind: "$clearJob",
				articleParent: this
			}, function() {
				_clearJob(record);
			});
		} else {
			_clearJob(record);
		}
	},
	onClearList: function(event, target, records) {
		var self = this;
		if (!records) {
			// get selected job type
			var selectedValue = self.jobTypeField.currentValue;
			var $enum = self.jobTypeField.$enum;
			var selectedTitle;
			for (var ii = 0, jj = $enum.length; ii < jj; ii++) {
				if ($enum[ii].$value == selectedValue) {
					selectedTitle = $enum[ii].$title;
					break;
				}
			}
			records = self.getRecords(selectedTitle);
			if (_hasJobInProgress(records)) {
				_showMessage(self, {
					$bind: "$clearList",
					articleParent: self
				}, function() {
					self.onClearList(event, target, records);
				});
			}
		}
		if (records) {
			for (var ii = 0, jj = records.length; ii < jj; ii++) {
				_clearJob(records[ii]);
			}
		}
	},
	onJobActionClick: function(menuItem) {
		var self = this,
			job;
		switch (menuItem.$sourceBind) {
			case "$download":
				if ((job = self.jobs[menuItem.articleParent.$uuid])) {
					if (menuItem.$verifyUrl) {
						var $verifyUrl = syra_site.formatVerifyMenuUrl(menuItem.articleParent, menuItem.articleParent.$menus.$download);
						syra_controller.sendRequest(null, job.buildReqOpt("GET", $verifyUrl, job.params.mime), function(data, response, $url) {
							window.open(menuItem.$url, "_blank");
						}, function(error, httpquery) {
							job.onError(error, true);
						});
						return;
					}
				}
				window.open(menuItem.$url, "_blank");
				break;
			case "$cancel":
				var callback = function() {
					self.jobs[menuItem.articleParent.$uuid].onClientRelease();
				};
				_showMessage(self, menuItem, callback);
				break;
			case "$abort":
			case "$suspend":
			case "$resume":
				var callback = function() {
					self.jobs[menuItem.articleParent.$uuid].onClientRelease(menuItem.$url, menuItem.$method);
				};
				_showMessage(self, menuItem, callback);
				break;
			default:
				var win = window.open(menuItem.$url, '_self');
				win.focus();
				break;
		}
	},
	getRecords: function(type) {
		var records = this.jobDetailsField && this.jobDetailsField.records;
		if (type) {
			var list = [];
			for (var mm = 0, pp = records.length; mm < pp; mm++) {
				if ((records[mm].dataset.jobType == type) || (type == syra_local.jv_type_default)) {
					list.push(records[mm]);
				}
			}
			return list;
		}
		return records || [];
	},
	getRecord: function(uuid) {
		return this.jobDetailsField.recordsMap[uuid] || null;
	},
	incrementCount: function() {
		syra_site._jobsViewerOpener.style.display = "";
		if (this.domItem) {
			this.domItem.style.display = "";
			syra_site.dom.setZIndex(this.domItem);
		}
		syra_site._jobsViewerOpener.textContent = ++this.jobsCount;
	},
	notifyDataChange: function(field, value) {
		var title;
		for (var ii = 0, jj = field.$enum.length; ii < jj; ii++) {
			if (field.$enum[ii].$value == value) {
				title = field.$enum[ii].$title;
				break;
			}
		}
		if (title) {
			var records = this.getRecords();
			for (var mm = 0, pp = records.length; mm < pp; mm++) {
				records[mm].domItem.style.display = ((records[mm].dataset.jobType == title) || (title == syra_local.jv_type_default)) ? "" : "none";
			}
		}
	},
	applyChange: function(newData, closeMsgBox, newRecord) {
		if (newRecord && newData.$jobDetails && newData.$jobDetails.length <= 1) {
			var $prevEnum = this.dataset && this.dataset.$properties && this.dataset.$properties.$jobType.$value.$enum;
			if ($prevEnum && $prevEnum.length > 0) {
				var recordToHide;
				// if there were only one job type in the jobs types list
				if ($prevEnum.length == 1) {
					// if new job type record, switch selected job type to "all types" value
					if (newData.$jobDetails[0].jobType != $prevEnum[0].$title) {
						newData.$jobType = this.getJobsTypesEnum().length;
					}
					// otherwise, there is nothing to do 
				}
				// if there were more than one job type in the jobs types list
				else {
					// if a specific job type selected (different from "all types")        
					// if new job type is different from the selected job type, it has to be hidden
					if ($prevEnum[this.dataset.$jobType - 1].$title != newData.$jobDetails[0].jobType) {
						recordToHide = true;
					}
				}
			}
		}
		RawPage.prototype.applyChange.call(this, newData);

		// css hack in order for text-overflow:ellipsis, white-space:nowrap, overflow:hidden style properties to be effective
		var records = this.jobDetailsField.records;
		for (var ii = 0, jj = records.length; ii < jj; ii++) {
			var record = records[ii];
			if (record.$menus.$jobPrintIcon && !record.$menus.$jobPrintIcon.$isHidden) {
				record.typeIcon.className = "s-job-view-type-print";
			}
			if (record.$menus.$jobOperationIcon && !record.$menus.$jobOperationIcon.$isHidden) {
				record.typeIcon.className = "s-job-view-type-operation";
			}
			var infos = record.infos;
			infos.jobTitle.value.textContent = record.dataset.jobTitle;
			infos.phase.value.textContent = record.dataset.phase;
			infos.phaseDetail.value.textContent = record.dataset.phaseDetail;
			infos.startTime.value.textContent = this.timeApi.parse(record.dataset.startTime).toString(this.timeLocalFormat);
			infos.startDate.value.textContent = this.datetApi.parse(record.dataset.startDate).toString(this.dateLocalFormat);
			infos.elapsedSeconds.value.textContent = record.dataset.elapsedSeconds;
			record.infos.remainingSeconds.value.textContent = record.dataset.remainingSeconds;
			var actions = ["$abort", "$suspend", "$resume", "$cancel", "$download", "$details"];
			var visible;
			for (var mm = 0, pp = actions.length; mm < pp; mm++) {
				var $mn = record.$menus[actions[mm]];
				if ($mn && !$mn.$isHidden) {
					visible = true, syra_menus.updateButtonIcon(record.jobBtn, $mn.$title, $mn.$bind);
				}
			}
			record.jobBtn.style.visibility = visible ? "" : "hidden";
		}

		// show diagnose block in jobview if any diagnoses
		if (newData.$jobDetails && newData.$jobDetails.length > 0) {
			for (var pp = 0, hh = newData.$jobDetails.length; pp < hh; pp++) {
				if (newData.$jobDetails[pp].jobDiagnoses && newData.$jobDetails[pp].jobDiagnoses.length > 0) {
					var record = this.getRecord(newData.$jobDetails[pp].$uuid);
					if (record) {
						var keys = Object.keys(record.idMap);
						for (var mm = 0, kk = keys.length; mm < kk; mm++) {
							var item = record.idMap[keys[mm]];
							if (item.$item && item.$item.$isDiagBox) {
								item.setState({
									$isHidden: false
								});
							}
						}
					}
				}
			}
		}
		closeMsgBox && syra_diagnose.closeBox("no", this.msgBoxId);
		// hide record if necessary (according to jobs types list filtering)
		if (recordToHide) {
			this.getRecord(newData.$jobDetails[0].$uuid).domItem.style.display = "none";
		}
		this.ensurePageVisibility();
	},
	close: function() {

	},
	toggle: function(show) {
		var self = this;
		show = show || !self.popupPicker;
		if (self.domItem) {
			if (show) {
				if (!self.popupPicker) {
					self.layoutSlot.style.display = "";
					self.popupPicker = syra_site.dialogManager.openPopup(self, {
						content: self,
						slot: self.layoutSlot,
						position: {
							my: "right top",
							at: "right bottom",
							of: $(syra_site._jobsViewerOpener)
						},
						onClose: function() {
							setTimeout(function() {
								if (self.layoutSlot) {
									self.layoutSlot.style.display = "none";
								}
								self.popupPicker = null;
							}, 200);
						}
					});
				}
			} else {
				self.popupPicker && self.popupPicker.close();
			}
		}
	}
});