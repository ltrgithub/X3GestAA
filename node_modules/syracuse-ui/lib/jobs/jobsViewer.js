"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

function JobsViewer(){
}

exports.JobsViewer = helpers.defineClass(JobsViewer, null, {
    create: function(){
        var self = this;
        
        self.jobsCount = 0;
        
        // $$item
        self._item = document.createElement("div");
        self._item.className = "s-jobs-viewer";
        self.$$item = $(self._item);
        
        var container = document.createElement("div");
        container.className = "s-jobs-viewer-container";
        self._item.appendChild(container);
        
        // $$core
        self._core = document.createElement("div");
        self._core.className = "s-jobs-viewer-core";
        $(container).append(self.$$core = $(self._core));
        
        // append to site
        document.site.appendJobsViewer(self);
    },
    appendJobView: function(jobView){
        var self = this;
        
        self._core.appendChild(jobView.$$item[0]);
        self._updateJobsViewCount('add');
        self.toggle(true);
    },
    _updateJobsViewCount: function(operation){
        switch (operation) {
            case 'add':
                document.site._jobsViewerOpener.textContent = ++this.jobsCount;
                break;
            case 'remove':
                document.site._jobsViewerOpener.textContent = --this.jobsCount;
                break;
        }
    },
    onJobViewRemove: function(jobView){
        var self = this;
        // alert if job still in progress 
        if (jobView._progressValue && jobView._progressValue.className == "s-job-view-progress-value") {
            var options = {};
            options.$message = (jobView.localize.job_remove_msg.replace("{jobTitle}", jobView._title.textContent)).replace("{jobKind}", jobView.job.params.kindLabel || jobView.job.params.kind || "");
            options.$message.replace("{jobTitle}", jobView._title.textContent);
            options.$type = "warning";
            options.$buttons = "yesno";
            options.$autoClose = 25000;
            options.$default = "no";
            options.$title = jobView.localize.job_remove_title;
            options.callback = function(response, closedBy){
                var close = closedBy == "no" || closedBy == "auto";
                if (!close) {
                    self._removeJobView(jobView);
                }
                return true;
            }
            document.site.showMessage(options);
        }
        else {
            self._removeJobView(jobView);
        }
    },
    _removeJobView: function(jobView){
        var self = this;
        jobView.$$item.remove();
        self._updateJobsViewCount('remove');
        if (self.jobsCount == 0) {
            self._item.style.display = "none";
            document.site._jobsViewerOpener.style.display = "none";
        }
    },
    _bindEvents: function(bind){
        var self = this;
        if (self.$$item) {
            if (bind) {
                self.$$item.delegate(".s-jobs-viewer-opened,.s-jobs-viewer-closed", "click", function(){
                    self.show = self.show != undefined ? !self.show : false;
                    self._core.style.height = self.show ? "auto" : 0;
                    var css = "s-jobs-viewer-" + ($(this)[0].className.indexOf("opened") < 0 ? "opened" : "closed");
                    document.site.toggleClass($(this)[0], $(this)[0].className);
                    document.site.toggleClass($(this)[0], css, true);
                })
            }
            else {
                self.$$item.undelegate();
            }
        }
    },
    toggle: function(show, event){
        switch (show) {
            case true:
                this._item.style.display = '';
                document.site.setZIndex(this._item);
                this._core.style.display = "block";
                document.site._jobsViewerOpener.style.display = "";
                break;
            case false:
                if (event && ($(event.target).hasClass('s-job-view-remove-btn') || $(event.target).closest(this.$$item).length)) {
                    return;
                }
                this._core.style.display = "none";
                break;
            default:
                this._core.style.display = !this._core.style.display || this._core.style.display == "block" ? "none" : "block";
        }
    },
    _toggleViewerCore: function(){
        //TODO : animation
    },
    dispose: function(){
        this._bindEvents(false);
    }
});
