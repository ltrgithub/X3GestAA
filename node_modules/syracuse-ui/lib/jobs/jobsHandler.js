"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

function JobsHandler(){
}

exports.JobsHandler = helpers.defineClass(JobsHandler, null, {
    startService: function(params){
        if (!params.$url) {
            document.site.showDiagnoses({
                $diagnoses: [{
                    severity: "error",
                    message: "no url specified" // TODO : localize
                }]
            });
            return;
        }
        var self = this;
        self.jobType = params.jobType;
        var reqOpt = {};
        reqOpt.noDisplayErr = true;
        reqOpt.method = "POST";
        reqOpt.$location = {
            $url: params.$url
        };
        self._sendRequest(reqOpt);
    },
    _sendRequest: function(reqOpt){
        var self = this;
        document.controller.sendRequest(null, reqOpt, function(data, response, $url){
            self._onSuccess(data, response, $url);
        }, function(error, httpquery){
            self._onError(error, httpquery);
        });
    },
    _onSuccess: function(data, response, $url){
        var self = this;
        var reqOpt = {};
        reqOpt.noDisplayErr = true;
        reqOpt.method = "GET";
        reqOpt.$location = {
            $url: response.headers.location
        }
        switch (response.status) {
            case 200: // operation is complete
                console.info("status : " + response.status);
                if (data.$diagnoses) {
                    var $diagnoses = data.$diagnoses;
                    for (var ii = 0; ii < $diagnoses.length; ii++) {
                        console.info($diagnoses[ii].message + "\n");
                    }
                }
                break;
            case 201: // 201 => new GET request to send
                console.info(data.phase ? "Phase : " + data.phase + "\n" : "");
                console.info(data.phaseDetail ? "phaseDetail : " + data.phaseDetail + "\n" : "");
                console.info(data.progress ? "progress : " + data.progress + "\n" : "");
                console.info(data.elapsedSeconds ? "elapsedSeconds : " + data.elapsedSeconds + "\n" : "");
                console.info(data.remainingSeconds ? "remainingSeconds : " + data.remainingSeconds + "\n" : "");
                
                if (data.$diagnoses) {
                    var $diagnoses = data.$diagnoses;
                    for (var ii = 0; ii < $diagnoses.length; ii++) {
                        console.info($diagnoses[ii].message + "\n");
                    }
                }
                
                //                if (self.jobType && self.jobType == "print") {
                //                    window.open(response.headers.location, "_blank");
                //                }
                if (response.headers.location.indexOf("/print/$report") != -1) {
                    window.open(response.headers.location, "_blank");
                }
                else {
                    // send new request
                    self._sendRequest(reqOpt);
                }
                
                break;
            case 202: // 202 => server processes request asynchronously
                console.info(data.phase ? "Phase : " + data.phase + "\n" : "");
                console.info(data.phaseDetail ? "phaseDetail : " + data.phaseDetail + "\n" : "");
                console.info(data.progress ? "progress : " + data.progress + "\n" : "");
                console.info(data.elapsedSeconds ? "elapsedSeconds : " + data.elapsedSeconds + "\n" : "");
                console.info(data.remainingSeconds ? "remainingSeconds : " + data.remainingSeconds + "\n" : "");
                
                //	TODO updateProgressData(opt)
                setTimeout(function(){
                    self._sendRequest(reqOpt);
                }, data.pollingMillis);
                
                break;
        }
    },
    _onError: function(error, httpquery){
        var self = this;
        
        console.error(error.data + "\n");
        console.error(JSON.stringify(httpquery));
    },
    _trackServiceProgress: function(reqOpt, onSuccess, onError, delay){
        return setTimeout(function(){
            document.controller.sendRequest(null, reqOpt, onSuccess, onError);
        }, delay);
    },
    _updateProgressData: function(opt){
        // TODO
    },
    dispose: function(){
        this.jobType = null;
    }
    
});
