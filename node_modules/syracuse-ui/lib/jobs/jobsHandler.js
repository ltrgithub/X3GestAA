"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var Article = require('syracuse-ui/lib/article/article').Article;
var JobView = require('./jobView').JobView;
var JobsViewer = require('./jobsViewer').JobsViewer;

function JobsHandler(){
}

exports.JobsHandler = helpers.defineClass(JobsHandler, null, {
    _buildInitRecord: function(){
        if (self.params) {
            var record = {};
            record.$uuid = self.jobParams.uuid;
            record.jobTitle = self.params.title;
            if (self.params.$diagnoses) {
                var $diagnoses = self.params.$diagnoses;
                var diagMsg = {};
                for (var ii = 0; ii < $diagnoses.length; ii++) {
                
                }
            }
        }
        else {
            return {
                $uuid: helpers.uuid.generate(),
                diagnoseError: "no params",
                $properties: {
                    diagnoseError: {
                        $isHidden: false
                    }
                }
            }
        }
    },
    register: function(jobParams, currentState, nextStateSvcId, cancelSvcId, explicitReleaseCallback){
    
        var self = this;
        self.params = jobParams;
        
        // set/update jobs viewer properties
        if (!document.site.jobsViewer) {
            document.site.jobsViewer = new JobsViewer();
        }
        document.site.jobsViewer._updateJobsTypesList(self.params.kind, true);
        
        var record = self._buildInitRecord();
        
        var newData = {
            $jobType: document.site.jobsViewer.selectedType || "1",
            $jobDetails: [{
                $uuid: self.jobParams.uuid,
                jobTitle: self.params.title
            }]
        };
        
        // request is not sent if err diagnoses
        if (self.params.$diagnoses && self._hasErrDiag(self.params.$diagnoses)) {
        
        }
        // if not err diagnoses, request can be sent
        else {
        
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        self.localize = locale.resources(module)();
        self.params = jobParams;
        // for tests purposes
        /*
         var types = ["default", "print", "operation"];
         self.params.kind = types[Math.floor(Math.random() * 2) + 1];*/
        self.cancelSvcId = cancelSvcId;
        self.explicitReleaseCallback = explicitReleaseCallback;
        
        if (self.params.$diagnoses && self.params.$diagnoses.length > 0) {
            var $diagnoses = self.params.$diagnoses;
            var errDiag = false;
            for (var ii = 0; ii < $diagnoses.length; ii++) {
                if ($diagnoses[ii].severity !== "info") {
                    errDiag = true;
                    console.error($diagnoses[ii].message);
                }
            }
            document.site.showDiagnoses({
                $diagnoses: $diagnoses,
                autoHide: {
                    autoHideTimeOut: 1000
                }
            });
        }
        
        // proceed if no error
        if (!errDiag) {
        
            var reqOpt = {};
            reqOpt.noDisplayErr = true;
            reqOpt.method = "POST";
            var article = new Article(); // to parse location expression
            reqOpt.$location = {
                $url: article.parseExpression(self.params.$location, self.params.services[nextStateSvcId])
            };
            self._sendRequest(reqOpt);
        }
        
        // return $diagnoses or null if not any
        return errDiag ? {
            $diagnoses: $diagnoses
        } : null;
        
    },
    _hasErrDiag: function($diagnoses){
        var errDiag = false;
        for (var ii = 0; ii < $diagnoses.length; ii++) {
            if ($diagnoses[ii].severity == "info" || $diagnoses[ii].severity == "fatal") {
                errDiag = true;
            }
        }
        return errDiag;
    },
    registerSyra: function(params){
        var self = this;
        
        self.localize = locale.resources(module)();
        self.params = params;
        
        self.jobView = new JobView();
        
        self.jobView.create(self);
        var phase = "begin";
        
        // req
        var reqOpt = self._buildReqOpt("GET", params.$location);
        
        // job view info
        var phaseInfo = self._fillPhaseInfo({
            phase: params.$state
        });
        
        // update job view info
        self.jobView.updateInfo(phaseInfo, undefined, phase);
        
        // send tracking request
        self._sendRequest(reqOpt);
        
    },
    _cancelAsynchRequest: function(){
        var self = this;
        if (self.asynchReq && self.asynchReq.length > 0) {
            console.log("asynreq  cleared");
            for (var ii = 0; ii < self.asynchReq.length; ii++) {
                clearTimeout(self.asynchReq[ii]);
            }
        }
    },
    _sendRequest: function(reqOpt, cbck, onRelease){
        var self = this;
        
        // cancel any asynch request (202) if on release
        if (onRelease) {
            self._cancelAsynchRequest();
        }
        
        document.controller.sendRequest(null, reqOpt, function(data, response, $url){
            self._onSuccess(data, response, $url, cbck);
        }, function(error, httpquery){
            self._onError(error, httpquery, cbck);
        });
    },
    _fillInfo: function(binds, data){
        var info = {};
        var noInfo = true;
        for (var ii = 0; ii < binds.length; ii++) {
            if (data[binds[ii]]) {
                noInfo = false;
                info[binds[ii]] = data[binds[ii]];
            }
        }
        return noInfo ? '' : info;
    },
    _fillPhaseInfo: function(data){
        var binds = ["phase", "phaseDetail"];
        return this._fillInfo(binds, data);
    },
    _fillTimeInfo: function(data){
        var binds = ["progress", "elapsedSeconds", "remainingSeconds"];
        return this._fillInfo(binds, data);
    },
    _buildReqOpt: function(method, $url){
        var reqOpt = {};
        reqOpt.noDisplayErr = true;
        reqOpt.method = method || "GET";
        reqOpt.$location = {
            $url: $url
        }
        return reqOpt;
    },
    _onSuccess: function(data, response, $url, cbck){
        var self = this;
        
        // req
        var reqOpt = self._buildReqOpt("GET", response.headers.location);
        
        var phase = response.status == 200 ? "end" : phase;
        
        // job view
        if (!self.jobView.$$body) {
            self.jobView.create(self);
            phase = "begin";
        }
        
        // job view info
        var phaseInfo = self._fillPhaseInfo(data);
        var timeInfo = self._fillTimeInfo(data);
        
        
        // update job view info
        self.jobView.updateInfo(phaseInfo, timeInfo, phase);
        
        
        switch (response.status) {
            case 200: // operation is complete
                // cancel any asynch (timeout) request planned
                self._cancelAsynchRequest();
                
                // set final url value in jobView instance
                self.jobView.setFinalUrl($url);
                
                // handle diagnoses if any                
                this._onDiagnoses(data, cbck);
                
                // open report in new tab (or download suggestion)
                if ($url && $url.indexOf("/print/$report") != -1) {
                    window.open($url, "_blank");
                }
                
                // in case of asynch service operation, clean on success 
                else 
                    if ($url && $url.indexOf("/sdata/$trackers") != -1) {
                        reqOpt.method = "DELETE";
                        self._sendRequest(reqOpt);
                    }
                
                self._onOperationComplete();
                break;
            case 201: // 201 => new GET request to send
                if (response.headers.location.indexOf("/print/$report") != -1) {
                    // set request accept type value
                    reqOpt.$acceptType = self.params.mime;
                    // set final url value in jobView instance
                    self.jobView.setFinalUrl(response.headers.location);
                }
                
                // handle diagnoses if any
                this._onDiagnoses(data, cbck);
                
                // send new request
                self._sendRequest(reqOpt);
                
                break;
            case 202: // 202 => server processes request asynchronously
                self.asynchReq = [];
                self.asynchReq.push(setTimeout(function(){
                    self._sendRequest(reqOpt);
                }, data.pollingMillis));
                break;
            case 424:
                // received after tracker abort
                if ($url && $url.indexOf("/sdata/$trackers") != -1) {
                    reqOpt.method = "DELETE";
                    self._sendRequest(reqOpt);
                }
                break;
            case 204:
            //received after tracker DELETE request
            default:
                console.info("status = " + response.status);
                console.log("data=" + data);
        }
    },
    _onDiagnoses: function(data, cbck){
        if (data.$diagnoses) {
            // append diagnoses to jobView if any
            this.jobView.appendDiagnoses(data.$diagnoses);
            // Cvg diagnoses handler
            if (cbck) {
                cbck(data.$diagnoses);
            }
        }
    },
    _onError: function(error, httpquery, cbck){
        var self = this;
        var phaseInfo = {};
        phaseInfo[self.localize.jh_errInfo_title] = self.localize.jh_errInfo;
        self.jobView.updateInfo(phaseInfo, undefined, "error", error.data);
        self._onOperationComplete();
    },
    _updateProgressData: function(opt){
        // TODO
    },
    _onOperationComplete: function(){
        try {
            if (this.explicitReleaseCallback) {
                this.explicitReleaseCallback();
            }
        } 
        catch (e) {
            console.log("no convergence callback set for successful end of operation");
        }
    },
    onClientRelease: function(){
        var self = this;
        self.release(self.cancelSvcId);
        if (self.explicitReleaseCallback) {
            self.explicitReleaseCallback();
        }
    },
    release: function(releaseSvcId, cbck){
        var self = this;
        var article = new Article(); // used to parse location expression
        var reqOpt = self._buildReqOpt("GET", article.parseExpression(self.params.$location, self.params.services[releaseSvcId]));
        self._sendRequest(reqOpt, cbck, true);
    },
    dispose: function(){
        this.params = null;
        this.cancelSvcId = null;
        this.explicitReleaseCallback = null;
    }
    
});
