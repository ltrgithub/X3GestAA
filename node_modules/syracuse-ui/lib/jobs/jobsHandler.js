"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var Article = require('syracuse-ui/lib/article/article').Article;
var JobView = require('./jobView').JobView;

function JobsHandler(){
}

exports.JobsHandler = helpers.defineClass(JobsHandler, null, {
    register: function(jobParams, currentState, nextStateSvcId, cancelSvcId, explicitReleaseCallback){
    
        var self = this;
        
        self.localize = locale.resources(module)();
        self.params = jobParams;
        self.cancelSvcId = cancelSvcId;
        self.explicitReleaseCallback = explicitReleaseCallback;
        self.jobView = new JobView();
        
        if (self.params.$diagnoses && self.params.$diagnoses.length > 0) {
            var $diagnoses = self.params.$diagnoses;
            var errDiag = false;
            for (var ii = 0; ii < $diagnoses.length; ii++) {
                if ($diagnoses[ii].severity == "error") {
                    errDiag = true;
                    console.error($diagnoses[ii].message);
                }
            }
            document.site.showDiagnoses({
                $diagnoses: $diagnoses,
                autoHide: {
                    autoHideTimeOut: 2000
                }
            });
        }
        
        // proceed if no error
        if (!errDiag) {
        
            var reqOpt = {};
            reqOpt.noDisplayErr = true;
            reqOpt.method = "POST";
            var article = new Article(); // to parse location expression
            reqOpt.$location = {
                $url: article.parseExpression(self.params.$location, self.params.services[nextStateSvcId])
            };
            self._sendRequest(reqOpt);
        }
        
        // return $diagnoses or null if not any
        return errDiag ? {
            $diagnoses: $diagnoses
        } : null;
        
    },
    _sendRequest: function(reqOpt, cbck){
        var self = this;
        document.controller.sendRequest(null, reqOpt, function(data, response, $url){
            self._onSuccess(data, response, $url, cbck);
        }, function(error, httpquery){
            self._onError(error, httpquery, cbck);
        });
    },
    _fillInfo: function(binds, data){
        var info = {};
        var noInfo = true;
        for (var ii = 0; ii < binds.length; ii++) {
            if (data[binds[ii]]) {
                noInfo = false;
                info[binds[ii]] = data[binds[ii]];
            }
        }
        return noInfo ? '' : info;
    },
    _fillPhaseInfo: function(data){
        var binds = ["phase", "phaseDetail"];
        return this._fillInfo(binds, data);
    },
    _fillTimeInfo: function(data){
        var binds = ["progress", "elapsedSeconds", "remainingSeconds"];
        return this._fillInfo(binds, data);
    },
    _buildReqOpt: function(method, $url){
        var reqOpt = {};
        reqOpt.noDisplayErr = true;
        reqOpt.method = method || "GET";
        reqOpt.$location = {
            $url: $url
        }
        return reqOpt;
    },
    _onSuccess: function(data, response, $url, cbck){
        var self = this;
        
        // req
        var reqOpt = self._buildReqOpt("GET", response.headers.location);
        
        var phase = response.status == 200 ? "end" : phase;
        
        // job view
        if (!self.jobView.$$body) {
            self.jobView.create(self);
            phase = "begin";
        }
        
        // job view info
        var phaseInfo = self._fillPhaseInfo(data);
        var timeInfo = self._fillTimeInfo(data);
        
        
        // update job view info
        self.jobView.updateInfo(phaseInfo, timeInfo, phase);
        
        
        switch (response.status) {
            case 200: // operation is complete
                console.info("status : " + response.status);
                if (data.$diagnoses) {
                    //TODO
                    self.jobView.appendDiagnoses(data.$diagnoses);
                    
                    var $diagnoses = data.$diagnoses;
                    for (var ii = 0; ii < $diagnoses.length; ii++) {
                        console.info($diagnoses[ii].message + "\n");
                    }
                    if (cbck) {
                        cbck($diagnoses);
                    }
                }
                self._onOperationComplete();
                break;
            case 201: // 201 => new GET request to send
                if (data.$diagnoses) {
                    //TODO
                    self.jobView.appendDiagnoses(data.$diagnoses);
                    
                    var $diagnoses = data.$diagnoses;
                    for (var ii = 0; ii < $diagnoses.length; ii++) {
                        console.info($diagnoses[ii].message + "\n");
                    }
                    if (cbck) {
                        cbck($diagnoses);
                    }
                }
                
                //TODO if (response.headers.isFinalUrl){}
                // self.finalUrl = response.headers.location;
                if (response.headers.location.indexOf("/print/$report") != -1) {
                    reqOpt.$acceptType = self.params.mime;
                    window.open(response.headers.location, "_blank");
                }
                
                // send new request
                self._sendRequest(reqOpt);
                
                break;
            case 202: // 202 => server processes request asynchronously
                //	TODO updateProgressData(opt)
                setTimeout(function(){
                    self._sendRequest(reqOpt);
                }, data.pollingMillis);
                
                break;
            case 204:
                //TODO
                break;
            default:
                console.info("status = " + response.status);
                console.log("data=" + data);
        }
    },
    _onError: function(error, httpquery, cbck){
        var self = this;
        var phaseInfo = {};
        phaseInfo[self.localize.jh_errInfo_title] = self.localize.jh_errInfo;
        self.jobView.updateInfo(phaseInfo, undefined, "error", error.data);
        self._onOperationComplete();
    },
    _updateProgressData: function(opt){
        // TODO
    },
    _onOperationComplete: function(){
        try {
            if (this.explicitReleaseCallback) {
                this.explicitReleaseCallback();
            }
        } 
        catch (e) {
            console.log("no convergence callback set for successful end of operation");
        }
    },
    onClientRelease: function(){
        var self = this;
        self.release(self.cancelSvcId);
        if (self.explicitReleaseCallback) {
            self.explicitReleaseCallback();
        }
    },
    release: function(releaseSvcId, cbck){
        var self = this;
        var article = new Article(); // to parse location expression
        var reqOpt = self._buildReqOpt("GET", article.parseExpression(self.params.$location, self.params.services[releaseSvcId]));
        self._sendRequest(reqOpt, cbck);
    },
    dispose: function(){
        this.params = null;
        this.cancelSvcId = null;
        this.explicitReleaseCallback = null;
    }
    
});
