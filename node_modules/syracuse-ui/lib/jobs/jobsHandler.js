"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var Article = require('syracuse-ui/lib/article/article').Article;
var JobView = require('./jobView').JobView;
var JobsViewer = require('./jobsViewer').JobsViewer;

function JobsHandler(){
}

exports.JobsHandler = helpers.defineClass(JobsHandler, null, {
    _buildInitRecord: function(){
        var self = this;
        if (self.params) {
            var record = {};
            record.$properties = {};
            
            record.$uuid = self.params.uuid;
            record.jobTitle = self.params.title;
            record.$properties.jobTitle = {
                $isHidden: false
            }
            
            if (self.params.$diagnoses) {
                // filtering diagnoses messages according to severity
                var $diagnoses = self.params.$diagnoses;
                var diagMsg = {};
                for (var ii = 0; ii < Object.keys($diagnoses).length; ii++) {
                    diagMsg[$diagnoses[ii].severity] = diagMsg[$diagnoses[ii].severity] ? diagMsg[$diagnoses[ii].severity] + "\n" + $diagnoses[ii].message : $diagnoses[ii].message;
                }
                var severities = Object.keys(diagMsg);
                if (severities.length > 0) {
                
                    // info,warning,error,success,fatal --> Info,Warning,Error,Success,Fatal
                    for (var ii = 0; ii < severities.length; ii++) {
                        // append to record
                        var $diagBind = "diagnose" + self._capitalize(severities[ii]);
                        record[$diagBind] = diagMsg[severities[ii]];
                        record.$properties[$diagBind] = {
                            $isHidden: false
                        };
                    }
                }
            }
            record.$links = {};
            record.$links["$job" + self._capitalize(self.params.kind) + "Icon"] = {
                $isHidden: false
            }
            
            // append cancel link
            if (self.cancelSvcId) {
                record.$links.$cancel = {
                    $title: "cancel"
                }
                
            }
            
            return record;
        }
        else {
            return {
                $uuid: helpers.uuid.generate(),
                diagnoseError: "no params",
                $properties: {
                    diagnoseError: {
                        $isHidden: false
                    }
                }
            }
        }
    },
    _capitalize: function(s){
        //capitalize first letter
        return s[0].toUpperCase() + s.slice(1);
    },
    register: function(jobParams, currentState, nextStateSvcId, cancelSvcId, explicitReleaseCallback){
    
        var self = this;
        self.params = jobParams;
        self.cancelSvcId = cancelSvcId;
        self.explicitReleaseCallback = explicitReleaseCallback;
        
        // set/update jobs viewer properties
        self.jobsViewer = (document.site.jobsViewer ? document.site.jobsViewer : document.site.jobsViewer = new JobsViewer());
        
        // save job handler
        //TODO : self.jobsViewer.addJob()/removeJob()
        self.jobsViewer.jobs = self.jobsViewer.jobs || {};
        self.jobsViewer.jobs[self.params.uuid] = this;
        
        self.jobsViewer.updateJobsTypesList(self.params.kind, true);
        
        var record = self._buildInitRecord();
        
        var newData = {
            $jobType: self.jobsViewer.selectedType ? self.jobsViewer.selectedType : self.jobsViewer.selectedType = 1,
            $jobDetails: [record],
            $properties: {
                $jobType: {
                    $value: {
                        $enum: self.jobsViewer._getJobsTypesEnum()
                    }
                }
            }
        };
        
        // show jobs survey panel
        if (!self.jobsViewer.$$item) {
            self.jobsViewer.loadBox();
        }
        document.site.jobsViewer.applyChange(newData);
        
        
        if (!self.params) {
            return {
                $diagnoses: [{
                    severity: 'error',
                    message: 'no params'
                }]
            }
        }
        
        return self._hasErrDiag(self.params.$diagnoses) ? {
            $diagnoses: $diagnoses
        } : null;
        
        // send request if no err diagnose
        if (self.params) {
        
            // prepare request
            var reqOpt = {};
            reqOpt.noDisplayErr = true;
            reqOpt.method = "POST";
            var article = new Article(); // to parse location expression
            reqOpt.$location = {
                $url: article.parseExpression(self.params.$location, self.params.services[nextStateSvcId])
            };
            
            // if no diagnoses or no err diagnoses, send request. else request is not sent    
            if (!self.params.$diagnoses || (self.params.$diagnoses && !self._hasErrDiag(self.params.$diagnoses))) {
                self._sendRequest(reqOpt);
            }
        }
    },
    _hasErrDiag: function($diagnoses){
        var errDiag = false;
        for (var ii = 0; ii < $diagnoses.length; ii++) {
            if ($diagnoses[ii].severity == "info" || $diagnoses[ii].severity == "fatal") {
                errDiag = true;
            }
        }
        return errDiag;
    },
    _buildInitRecordSyra: function(){
        var self = this;
        if (self.params) {
            var record = {};
            record.$properties = {};
            
            record.$uuid = self.params.uuid;
            record.jobTitle = self.params.title;
            record.phase = self.params.$state;
            record.$properties.jobTitle = record.$properties.phase = {
                $isHidden: false
            }
            
            if (self.params.$diagnoses) {
                // filtering diagnoses messages according to severity
                var $diagnoses = self.params.$diagnoses;
                var diagMsg = {};
                for (var ii = 0; ii < Object.keys($diagnoses).length; ii++) {
                    diagMsg[$diagnoses[ii].severity] = diagMsg[$diagnoses[ii].severity] ? diagMsg[$diagnoses[ii].severity] + "\n" + $diagnoses[ii].message : $diagnoses[ii].message;
                }
                var severities = Object.keys(diagMsg);
                if (severities.length > 0) {
                
                    // info,warning,error,success,fatal --> Info,Warning,Error,Success,Fatal
                    for (var ii = 0; ii < severities.length; ii++) {
                        // append to record
                        var $diagBind = "diagnose" + self._capitalize(severities[ii]);
                        record[$diagBind] = diagMsg[severities[ii]];
                        record.$properties[$diagBind] = {
                            $isHidden: false
                        };
                    }
                }
            }
            
            record.$links = {};
            record.$links["$job" + self._capitalize(self.params.kind) + "Icon"] = {
                $isHidden: false
            }
            
            return record;
        }
        else {
            return {
                $uuid: helpers.uuid.generate(),
                diagnoseError: "no params",
                $properties: {
                    diagnoseError: {
                        $isHidden: false
                    }
                }
            }
        }
    },
    registerSyra: function(params){
        var self = this;
        
        self.params = params;
        
        // set/update jobs viewer properties
        self.jobsViewer = (document.site.jobsViewer ? document.site.jobsViewer : document.site.jobsViewer = new JobsViewer());
        
        // save job handler
        //TODO : self.jobsViewer.addJob()/removeJob()
        self.jobsViewer.jobs = self.jobsViewer.jobs || {};
        self.jobsViewer.jobs[self.params.uuid] = this;
        
        self.jobsViewer.updateJobsTypesList(self.params.kind, true);
        
        var record = self._buildInitRecordSyra();
        
        var newData = {
            $jobType: self.jobsViewer.selectedType ? self.jobsViewer.selectedType : self.jobsViewer.selectedType = 1,
            $jobDetails: [record],
            $properties: {
                $jobType: {
                    $value: {
                        $enum: self.jobsViewer._getJobsTypesEnum()
                    }
                }
            }
        };
        
        // show jobs survey panel
        if (!self.jobsViewer.$$item) {
            self.jobsViewer.loadBox();
        }
        document.site.jobsViewer.applyChange(newData);
        
        // send request if no err diagnose
        if (self.params) {
            // req
            var reqOpt = self._buildReqOpt("GET", params.$location);
            
            // send tracking request
            self._sendRequest(reqOpt);
        }
        else {
            return;
        }
    },
    _cancelAsynchRequest: function(){
        var self = this;
        if (self.asynchReq && self.asynchReq.length > 0) {
            console.log("asynreq  cleared");
            for (var ii = 0; ii < self.asynchReq.length; ii++) {
                clearTimeout(self.asynchReq[ii]);
            }
        }
    },
    _sendRequest: function(reqOpt, cbck, onRelease){
        var self = this;
        
        // cancel any asynch request (202) if on release
        if (onRelease) {
            self._cancelAsynchRequest();
        }
        
        document.controller.sendRequest(null, reqOpt, function(data, response, $url){
            self._onSuccess(data, response, $url, cbck);
        }, function(error, httpquery){
            self._onError(error, httpquery, cbck);
        });
    },
    _fillInfo: function(binds, data){
        var info = {};
        var noInfo = true;
        for (var ii = 0; ii < binds.length; ii++) {
            if (data[binds[ii]]) {
                noInfo = false;
                info[binds[ii]] = data[binds[ii]];
            }
        }
        return noInfo ? '' : info;
    },
    _fillPhaseInfo: function(data){
        var binds = ["phase", "phaseDetail"];
        return this._fillInfo(binds, data);
    },
    _fillTimeInfo: function(data){
        var binds = ["progress", "elapsedSeconds", "remainingSeconds"];
        return this._fillInfo(binds, data);
    },
    _buildReqOpt: function(method, $url){
        var reqOpt = {};
        reqOpt.noDisplayErr = true;
        reqOpt.method = method || "GET";
        reqOpt.$location = {
            $url: $url
        }
        return reqOpt;
    },
    _buildRecord: function(data){
        var self = this;
        var record = {};
        record.$properties = {};
        record.$links = {};
        record.$uuid = self.params.uuid;
        var $binds = ["jobTitle", "phase", "phaseDetail", "progress", "elapsedSeconds", "remainingSeconds"];
        
        // append data
        for (var ii = 0; ii < $binds.length; ii++) {
            if (data[$binds[ii]]) {
                record[$binds[ii]] = data[$binds[ii]];
                record.$properties[$binds[ii]] = {
                    $isHidden: false
                }
            }
        }
        
        // handle diagnoses
        if (data.$diagnoses) {
            // filtering diagnoses messages according to severity
            var $diagnoses = data.$diagnoses;
            var diagMsg = {};
            for (var ii = 0; ii < Object.keys($diagnoses).length; ii++) {
                diagMsg[$diagnoses[ii].severity] = diagMsg[$diagnoses[ii].severity] ? diagMsg[$diagnoses[ii].severity] + "\n" + $diagnoses[ii].message : $diagnoses[ii].message;
            }
            var severities = Object.keys(diagMsg);
            if (severities.length > 0) {
            
                // info,warning,error,success,fatal --> Info,Warning,Error,Success,Fatal
                for (var ii = 0; ii < severities.length; ii++) {
                    // append to record
                    var $diagBind = "diagnose" + self._capitalize(severities[ii]);
                    record[$diagBind] = diagMsg[severities[ii]];
                    record.$properties[$diagBind] = {
                        $isHidden: false
                    };
                }
            }
        }
        
        // handle links
        if (data.$links) {
            var bindLinks = Object.keys(data.$links);
            for (var ii = 0; ii < bindLinks.length; ii++) {
                record.$links[bindLinks[ii]] = {
                    $title: bindLinks[ii].indexOf("$") != -1 ? bindLinks[ii].slice(1) : bindLinks[ii]
                }
            }
        }
        
        record.$links["$job" + self._capitalize(self.params.kind) + "Icon"] = {
            $isHidden: false
        }
        
        return record;
    },
    _onSuccess: function(data, response, $url, cbck){
        //return;
        var self = this;
        
        // building request
        var reqOpt = self._buildReqOpt("GET", response.headers.location);
        
        var record = self._buildRecord(data);
        
        var newData = {
            $jobDetails: [record]
        };
        
        if (response.status != 204) {
            document.site.jobsViewer.applyChange(newData);
        }
        
        switch (response.status) {
            case 200: // operation is complete
                // cancel any asynch (timeout) request planned
                self._cancelAsynchRequest();
                
                // set final url value in jobView instance
                //self.jobView.setFinalUrl($url);
                
                // handle diagnoses if any
                //this._onDiagnoses(data, cbck);
                
                // open report in new tab (or download suggestion)
                if ($url && $url.indexOf("/print/$report") != -1) {
                    window.open($url, "_blank");
                }
                
                // in case of asynch service operation, clean on success
                else 
                    if ($url && $url.indexOf("/sdata/$trackers") != -1) {
                        reqOpt.method = "DELETE";
                        self._sendRequest(reqOpt);
                    }
                
                self._onOperationComplete();
                break;
            case 201: // 201 => new GET request to send
                if (response.headers.location.indexOf("/print/$report") != -1) {
                    // set request accept type value
                    reqOpt.$acceptType = self.params.mime;
                // set final url value in jobView instance
                //self.jobView.setFinalUrl(response.headers.location);
                }
                
                // handle diagnoses if any
                //this._onDiagnoses(data, cbck);
                
                // send new request
                self._sendRequest(reqOpt);
                
                break;
            case 202: // 202 => server processes request asynchronously
                self.asynchReq = [];
                self.asynchReq.push(setTimeout(function(){
                    self._sendRequest(reqOpt);
                }, data.pollingMillis));
                break;
            case 424:
                // received after tracker abort
                if ($url && $url.indexOf("/sdata/$trackers") != -1) {
                    reqOpt.method = "DELETE";
                    self._sendRequest(reqOpt);
                }
                break;
            case 204:
            //received after tracker DELETE request
            default:
                console.info("status = " + response.status);
                console.log("data=" + data);
        }
        
        
        
        
        
        
        
        /*
         var phase = response.status == 200 ? "end" : phase;
         
         // job view
         if (!self.jobView.$$body) {
         self.jobView.create(self);
         phase = "begin";
         }
         
         // job view info
         var phaseInfo = self._fillPhaseInfo(data);
         var timeInfo = self._fillTimeInfo(data);
         
         
         // update job view info
         self.jobView.updateInfo(phaseInfo, timeInfo, phase);
         
         
         switch (response.status) {
         case 200: // operation is complete
         // cancel any asynch (timeout) request planned
         self._cancelAsynchRequest();
         
         // set final url value in jobView instance
         self.jobView.setFinalUrl($url);
         
         // handle diagnoses if any
         this._onDiagnoses(data, cbck);
         
         // open report in new tab (or download suggestion)
         if ($url && $url.indexOf("/print/$report") != -1) {
         window.open($url, "_blank");
         }
         
         // in case of asynch service operation, clean on success
         else
         if ($url && $url.indexOf("/sdata/$trackers") != -1) {
         reqOpt.method = "DELETE";
         self._sendRequest(reqOpt);
         }
         
         self._onOperationComplete();
         break;
         case 201: // 201 => new GET request to send
         if (response.headers.location.indexOf("/print/$report") != -1) {
         // set request accept type value
         reqOpt.$acceptType = self.params.mime;
         // set final url value in jobView instance
         self.jobView.setFinalUrl(response.headers.location);
         }
         
         // handle diagnoses if any
         this._onDiagnoses(data, cbck);
         
         // send new request
         self._sendRequest(reqOpt);
         
         break;
         case 202: // 202 => server processes request asynchronously
         self.asynchReq = [];
         self.asynchReq.push(setTimeout(function(){
         self._sendRequest(reqOpt);
         }, data.pollingMillis));
         break;
         case 424:
         // received after tracker abort
         if ($url && $url.indexOf("/sdata/$trackers") != -1) {
         reqOpt.method = "DELETE";
         self._sendRequest(reqOpt);
         }
         break;
         case 204:
         //received after tracker DELETE request
         default:
         console.info("status = " + response.status);
         console.log("data=" + data);
         }*/
    },
    _onDiagnoses: function(data, cbck){
        if (data.$diagnoses) {
            // append diagnoses to jobView if any
            this.jobView.appendDiagnoses(data.$diagnoses);
            // Cvg diagnoses handler
            if (cbck) {
                cbck(data.$diagnoses);
            }
        }
    },
    _onError: function(error, httpquery, cbck){
        var self = this;
        var phaseInfo = {};
        phaseInfo[self.localize.jh_errInfo_title] = self.localize.jh_errInfo;
        self.jobView.updateInfo(phaseInfo, undefined, "error", error.data);
        self._onOperationComplete();
    },
    _updateProgressData: function(opt){
        // TODO
    },
    _onOperationComplete: function(){
        try {
            if (this.explicitReleaseCallback) {
                this.explicitReleaseCallback();
            }
        } 
        catch (e) {
            console.log("no convergence callback set for successful end of operation");
        }
    },
    onClientRelease: function(){
        var self = this;
        self.release(self.cancelSvcId);
        if (self.explicitReleaseCallback) {
            self.explicitReleaseCallback();
        }
    },
    release: function(releaseSvcId, cbck){
        var self = this;
        var article = new Article(); // used to parse location expression
        var reqOpt = self._buildReqOpt("GET", article.parseExpression(self.params.$location, self.params.services[releaseSvcId]));
        self._sendRequest(reqOpt, cbck, true);
    },
    dispose: function(){
        this.params = null;
        this.cancelSvcId = null;
        this.explicitReleaseCallback = null;
    }
    
});
