"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var JobsViewer = require('./jobsViewer').JobsViewer;

function JobView(){
}

exports.JobView = helpers.defineClass(JobView, null, {
    create: function(job){
        var self = this;
        self.job = job;
        self.localize = locale.resources(module)();
        
        // container
        self._item = document.createElement("div");
        self._item.className = "s-job-view-item";
        self.$$item = $(self._item);
        
        
        // body. divided in 4 columns. (1st container child)
        self._body = document.createElement("div");
        self._body.className = "s-job-view-body";
        self.$$item.append(self.$$body = self.$$body = $(self._body));
        
        // info column
        self._info = document.createElement("div");
        self._info.className = "s-job-view-info";
        self.$$body.append(self.$$info = $(self._info));
        
        // title label (in info column)
        self._title = document.createElement("label");
        self._title.className = "s-job-view-title";
        self._title.textContent = job.params.title;
        self._info.appendChild(self._title);
        
        // phase details (in info column)
        self._phase = document.createElement("div");
        self._phase.className = "s-job-view-phase";
        self._info.appendChild(self._phase);
        
        // progress bar column
        self._bar = document.createElement("div");
        self._bar.className = "s-job-view-bar";
        self.$$body.append(self.$$bar = $(self._bar));
        
        // res icons column
        self._res = document.createElement("div");
        self._res.className = "s-job-view-res";
        self._cancel = document.createElement("a");
        self._cancel.className = job.cancelSvcId ? "s-job-view-cancel" : "s-job-view-cancel-disabled";
        self._cancel.setAttribute("alt", self.localize.job_cancel_alt);
        self._success = document.createElement("a");
        self._success.className = "s-job-view-success-disabled";
        self._res.appendChild(self._cancel);
        self._res.appendChild(self._success);
        self.$$body.append(self.$$res = $(self._res));
        
        // remove icon (remove job from job viewer)
        self._remove = document.createElement("div");
        self._remove.className = "s-job-view-remove";
        var anchor = document.createElement("a");
        anchor.className = "s-job-view-remove-btn";
        self._remove.appendChild(anchor);
        self.$$body.append(self.$$remove = $(self._remove));
        
        // diagnoses layer. (2nd container child)
        self._diag = document.createElement("div");
        self._diag.className = "s-job-view-diagnose";
        self.$$item.append(self.$$diag = $(self._diag));
        
        // append to jobs viewer
        self._appendToViewer();
        
        // bind events
        self._bindEvents(true);
        
    },
    _bindEvents: function(bind){
        var self = this;
        if (self.$$item) {
            if (bind) {
                self.$$item.delegate("a.s-job-view-cancel", "click", function(){
                    if (self.job.cancelSvcId) {
                        self.job.onClientRelease();
                    }
                }).delegate("a.s-job-view-remove-btn", "click", function(){
                    self.jobsViewer.onJobViewRemove(self);
                });
            }
            else {
                self.$$item.undelegate();
            }
        }
    },
    _appendToViewer: function(){
        var self = this;
        var jobsViewer;
        if (!document.site.jobsViewer) {
            jobsViewer = new JobsViewer();
            jobsViewer.create();
        }
        else {
            jobsViewer = document.site.jobsViewer;
            if (!jobsViewer._item.parentNode) {
                document.site.appendJobsViewer();
            }
        }
        jobsViewer.appendJobView(this);
        self.jobsViewer = jobsViewer;
    },
    _appendInfo: function(values, dom){
        var $bindings = Object.keys(values);
        var label;
        for (var ii = 0; ii < $bindings.length; ii++) {
            if (values[$bindings[ii]]) {
                label = document.createElement("label");
                label.className = "s-job-view-info-elt";
                label.textContent = $bindings[ii] + ": " + values[$bindings[ii]];
                dom.appendChild(label);
            }
        }
    },
    updateInfo: function(jobPhaseInfo, jobTimeInfo, phase, errData){
        var self = this;
        if (jobPhaseInfo && Object.keys(jobPhaseInfo).length > 0) {
            $(self._phase).empty();
            self._appendInfo(jobPhaseInfo, self._phase);
        }
        
        // update progress bar
        switch (phase) {
            case "begin":
                self._onBegin(jobTimeInfo);
                break;
            case "end":
                self._onEnd();
                break;
            case "error":
                self._onError(errData);
                break;
            default:
                self._onProgress(jobTimeInfo);
        }
    },
    appendDiagnoses: function($diagnoses){
        //TODO
        var self = this;
        var label;
        // empty diagnoses layer
        self.$$diag.empty();
        if ($diagnoses) {
            for (var ii = 0; ii < $diagnoses.length; ii++) {
                label = document.createElement("label");
                label.className = 's-job-view-diag-' + $diagnoses[ii].severity;
                label.innerHTML = document.site.formatHTMLMessage($diagnoses[ii].message);
                self._diag.appendChild(label);
            }
        }
    },
    appendErrData: function(errData){
        var self = this;
        var $diagnoses = JSON.parse(errData).$diagnoses;
        if ($diagnoses) {
            self.appendDiagnoses($diagnoses);
        }
        else {
            var div = document.createElement("div");
            div.className = "s-job-view-err";
            div.innerHTML = document.site.formatHTMLMessage(errData);
            self._diag.appendChild(div);
        }
    },
    _onBegin: function(jobTimeInfo){
        var self = this;
        self._progress = document.createElement("div");
        self._progress.className = "s-job-view-progress";
        self._bar.appendChild(self._progress);
        self._progressValue = document.createElement("div");
        self._progressValue.className = "s-job-view-progress-value";
        self._progress.appendChild(self._progressValue);
        
        self._time = document.createElement("div");
        self._time.className = "s-job-view-time-info";
        self._bar.appendChild(self._time);
        
        if (jobTimeInfo && Object.keys(jobTimeInfo).length > 0) {
            $(self._time).empty();
            self._appendInfo(jobTimeInfo, self._time);
        }
    },
    _onProgress: function(jobTimeInfo){
        if (jobTimeInfo && Object.keys(jobTimeInfo).length > 0) {
            $(self._time).empty();
            self._appendInfo(jobTimeInfo, self._time);
        }
    },
    _onEnd: function(onError){
        var self = this;
        
        if (self._progress) {
            document.site.toggleClass(self._progressValue, "s-job-view-progress-value");
            document.site.toggleClass(self._progressValue, "s-job-view-progress-value-dis", true);
        }
        
        self._cancel.className = "s-job-view-cancel-disabled";
        self._success.className = onError ? self._success.className : "s-job-view-success";
        
        // TODO remove cancel icon !!
    },
    _onError: function(errData){
        var self = this;
        self._onEnd(true);
        self.appendErrData(errData);
    },
    dispose: function(){
        var self = this;
        self._bindEvents(false);
    }
});
