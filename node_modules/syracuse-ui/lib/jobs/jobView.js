"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var JobsViewer = require('./jobsViewer').JobsViewer;

function JobView(){
}

exports.JobView = helpers.defineClass(JobView, null, {
    create: function(title){
        var self = this;
        self._body = document.createElement("div");
        self._body.className = "s-job-view-body";
        self.$$body = $(self._body);
        
        self._info = document.createElement("div");
        self._info.className = "s-job-view-info";
        self.$$body.append(self.$$info = $(self._info));
        
        self._title = document.createElement("label");
        self._title.className = "s-job-view-title";
        self._title.textContent = title;
        self._info.appendChild(self._title);
        
        self._bar = document.createElement("div");
        self._bar.className = "s-job-view-bar";
        self.$$body.append(self.$$bar = $(self._bar));
        
        self._res = document.createElement("div");
        self._res.className = "s-job-view-res";
        self.$$body.append(self.$$res = $(self._res));
        
        // append to jobs viewer
        self._appendToViewer();
    },
    _appendToViewer: function(){
        var jobsViewer;
        if (!document.site.jobsViewer) {
            jobsViewer = new JobsViewer();
            jobsViewer.create();
        }
        else {
            jobsViewer = document.site.jobsViewer;
        }
        jobsViewer.appendJobView(this);
    },
    _appendInfo: function(values, dom){
        var $bindings = Object.keys(values);
        var label;
        for (var ii = 0; ii < $bindings.length; ii++) {
            if (values[$bindings[ii]]) {
                label = document.createElement("label");
                label.className = "s-job-view-info-elt";
                label.textContent = $bindings[ii] + ": " + values[$bindings[ii]];
                dom.appendChild(label);
            }
        }
    },
    updateInfo: function(jobPhaseInfo, jobTimeInfo, phase){
        var self = this;
        if (jobPhaseInfo && Object.keys(jobPhaseInfo).length > 0) {
            self.$$info.empty();
            self._appendInfo(jobPhaseInfo, self._info);
        }
        
        // update progress bar
        switch (phase) {
            case "begin":
                self._onBegin(jobTimeInfo);
                break;
            case "end":
                self._onEnd(jobTimeInfo);
                break;
            default:
                self._onProgress(jobTimeInfo);
        }
    },
    appendDiagnoses: function($diagnoses){
        //TODO
    },
    _onBegin: function(jobTimeInfo){
        var self = this;
        self._progress = document.createElement("div");
        self._progress.className = "s-file-progress";
        self._bar.appendChild(self._progress);
        self.progressValue = document.createElement("div");
        self.progressValue.className = "s-file-progress-value";
        self._progress.appendChild(self.progressValue);
        
        self._time = document.createElement("div");
        self._time.className = "s-job-view-time-info";
        self._bar.appendChild(self._time);
        
        if (jobTimeInfo && Object.keys(jobTimeInfo).length > 0) {
            $(self._time).empty();
            self._appendInfo(jobTimeInfo, self._time);
        }
    },
    _onProgress: function(jobTimeInfo){
        if (jobTimeInfo && Object.keys(jobTimeInfo).length > 0) {
            $(self._time).empty();
            self._appendInfo(jobTimeInfo, self._time);
        }
    },
    _onEnd: function(jobTimeInfo){
        var self = this;
        
        if (self._progress) {
            document.site.removeDomChild(self._progress);
            delete self._progress;
        }
        delete self.progressValue;
    }
});
