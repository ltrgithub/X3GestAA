"use strict";
//var io = require('syracuse-ui/deps/socket.io-client');

var _templates = {
	notifPicker: '\
		<a class="s-notif-picker {{#if count}}new{{/if}}">\
			<i class="fa fa-bell"></i>\
			<label class="s-notif-count">\
				{{#if count}}\
					{{count}}\
				{{/if}}\
			</label>\
		</a>',
	notifPanel: '\
		<div class="s-notif-panel">\
			<header>NOTIFICATIONS</header>\
			<section class="s-notif-panel-section">{{{notifications}}}</section>\
			<footer>{{{chatForm}}}</footer>\
		</div>',
	notifItem: '\
		<div class="s-notif-item" id="{{id}}">\
			<div class="s-notif-status">\
				{{#if isUser}}\
					<i class="fa fa-circle {{status}}"></i>\
				{{/if}}\
			</div>\
			<div class="s-notif-origin">\
				<a href="#" class="s-notif-origin-link">\
					<img class="s-notif-origin-img" src="{{originSrc}}">\
				</a>\
			</div>\
			<div class="s-notif-content">\
				<div class="s-notif-content-one">\
					<div class="s-notif-content-origin-label">\
						{{originLabel}}\
					</div>\
					<div class="s-notif-content-origin-time">\
						{{time}} ago\
					</div>\
				</div>\
				<div class="s-notif-content-two">\
					<div class="s-notif-content-desc">\
						{{desc}}\
					</div>\
				</div>\
			</div>\
			<div class="s-notif-link">\
				{{#if link}}\
					<a href="{{linkUrl}}" target="_blank">{{linkTitle}}</a>\
				{{/if}}\
			</div>\
			<div class="s-notif-type">\
				<i class="{{typeIcon}} type"></i>\
			</div>\
		</div>',
	notifItemEmpty: '\
		<div class="s-notif-empty">\
			No notification available\
		</div>',
	chatForm: '\
		<div class="s-chat-slot">\
			<header>\
				<div class="s-chat-recipient-label">\
					<label>TO :</label>\
					<input type="text" name="chatinputto" class="s-chat-input-to" placeholder="Enter recipient here">\
				</div>\
			</header>\
			<section>\
				<div class="s-chat-content">\
					<input type="text" placeholder="Enter text here" name="schatinput" class="s-chat-input-txt">\
					<input type="button" value="SEND" class="s-chat-input-submit">\
				</div>\
			</section>\
		</div>',
	chatFormOld: '\
		<div class="s-chat-slot">\
			<header>\
				<div class="s-chat-recipient-img">\
					<img src="{{originSrc}}">\
				</div>\
				<div class="s-chat-recipient-info">\
					<div class="s-chat-recipient-login">\
						{{login}}\
					</div>\
					<div class="s-chat-recipient-status">\
						<i class="fa fa-circle {{status}}"></i>\
						<label>{{status}}</label>\
					</div>\
				</div>\
			</header>\
			<section>\
				<div class="s-chat-history">\
				</div>\
				<div class="s-chat-input">\
					<input type="text" placeholder="Enter text here" name="schatinput">\
				</div>\
			</section>\
		</div>'
};

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};


var _hasPanel = function() {
	var $$notifPanel = $(".s-notif-panel");
	if ($$notifPanel.length > 0) {
		return $$notifPanel;
	} else {
		return false;
	}
};

var _updateCount = function(add) {
	if (add) {
		syra_site.notifCount++;
	} else {
		syra_site.notifCount = 0;
	}
};

var _getCount = function() {
	return syra_site.notifCount;
};

var _updatePicker = function(nn) {
	// if new notifications
	if (nn) {
		// update count
		_updateCount(true);
		$(".s-notif-count").text(_getCount());

		// update style
		$(".s-notif-picker").toggleClass("new", true);
	}
	// reset picker
	else {
		// update count
		_updateCount();
		$(".s-notif-count").text("");

		// update style
		$(".s-notif-picker").toggleClass("new", false);
	}
};

var _getSrc = function(from) {
	var beginUrl = "/syracuse-ui/themes/desktop/sage/images/notificationsusers/img-";
	var endUrl = ".jpg";
	return beginUrl + from + endUrl;
};

var _buildNotifItem = function(msg) {
	var notifItem = "";
	var ctx = {};

	ctx.id = msg._id;

	// set originSrc
	if (msg.type === "business") {
		ctx.originSrc = _getSrc("business");
	} else {
		ctx.originSrc = _getSrc(msg.from);
	}
	ctx.originLabel = msg.firstName || msg.type === "business" ? "Business" : "user unidentified";
	ctx.time = msg.stamp;
	ctx.desc = msg.data.message;

	if (msg.link) {
		ctx.link = true;
		ctx.linkUrl = msg.link.url,
		ctx.linkTitle = msg.link.title;
	}

	// type icon
	if (msg.severity) {
		ctx.typeIcon = msg.severity === "warning" ? "fa fa-flash" : "fa fa-info-circle";
	} else {
		ctx.typeIcon = msg.type === "message" ? "fa fa-info-circle" : "fa fa-brief-case";
	}

	return _getHtml(null, "notifItem", ctx);

};

var _initChat = function() {
	var ctx = {};
	// ctx.originSrc = "/syracuse-ui/themes/desktop/sage/images/notificationsusers/img004.jpg";
	// ctx.login = login;
	// ctx.status = _getStatus(login);

	return _getHtml(null, "chatForm", ctx);
};


var _updatePanel = function() {
	var notifications;
	if (syra_site.notifArr && syra_site.notifArr.length > 0) {
		notifications = [];
		syra_site.notifArr.forEach(function(msg, idx) {
			notifications.push(_buildNotifItem(msg));
		});
		notifications = notifications.join('');
	} else {
		notifications = _getHtml(null, "notifItemEmpty", {});
	}

	var notifPanelHtml = _getHtml(null, "notifPanel", {
		notifications: notifications,
		chatForm: _initChat()
	});

	var $$panel = _hasPanel();
	if ($$panel) {
		// panel not empty
		if ($$panel.find(".s-notif-item").length > 0) {
			// empty panel
			var $$panelSection = $$panel.find(".s-notif-panel-section");
			$$panelSection.empty();
			// fill panel
			$$panelSection.append($(notifications));
			//$(notifications).insertAfter($$panel.find("header"));
		}
		// panel empty
		else {
			var $$notifPanel = $(notifPanelHtml);

			// append notifpanel
			$(document.body).append($$notifPanel);
			$$notifPanel.toggle();
		}
	} else {
		$$panel = $(notifPanelHtml);

		// append notifpanel
		$(document.body).append($$panel);
		$$panel.toggle();
	}

};

// var _appendEvents = function() {
// 	var $$panel = _hasPanel();
// 	if ($$panel) {
// 		syra_site.notifArr.forEach(function(msg,idx){
// 			$$panel.append($(_buildNotifItem(msg)));
// 		});
// 	} else {
// 		_updatePanel();
// 	}
// };

var _togglePanel = function() {
	var $$notifPanel = _hasPanel();
	if ($$notifPanel) {
		// TODO if notif was closed, and if new, reset count and remove style
		if (!$$notifPanel.is(":visible")) {
			_updatePicker();
		}
		$$notifPanel.toggle();
	} else {
		// update picker
		_updatePicker();
	}

};

/*
 *	Handles notification when a message is received
 */
var _onMessage = function(msg) {

	_updateEvents([msg]);

	// Is panel already built
	var $$panel = _hasPanel();
	if ($$panel) {

		// is panel opened
		if ($$panel.is(":visible")) {}
		// is panel closed
		else {
			_updatePicker(true);
		}
	}

	// panel is not already built
	else {
		//TODO
		_updatePicker(true);
	}

	_updatePanel();
};

var _updateEvents = function(events) {
	syra_site.notifArr = syra_site.notifArr || [];
	events.forEach(function(evt, idx) {
		syra_site.notifArr.unshift(evt);
	});
	// if (!syra_site.notifArr) {
	// 	syra_site.notifArr = [];
	// 	events.forEach(function(evt, idx) {
	// 		syra_site.notifArr.push(evt);
	// 	});
	// } else {
	// 	events.forEach(function(evt, idx) {
	// 		syra_site.notifArr.unshift(evt);
	// 	});
	// }
};

var _getStatus = function(login) {
	//TODO
	return "disconnected";
};

var _isUserItem = function(dom) {
	if (dom.src && dom.src.indexOf("img00") >= 0) {
		return true;
	} else {
		return false;
	}
};

var _getRecipientLogin = function(id) {
	if (syra_site.notifArr) {
		syra_site.notifArr.forEach(function(msg) {
			if (msg.id === id) {
				return "admin"; // msg.data.from;
			}
		});
	}
};

var _bindEvents = function(bind) {
	if (bind) {
		$(document.body).delegate(".s-notif-origin-img", "click", function(evt) {
			// is user
			if (_isUserItem(evt.target)) {
				// get recipient login
				var recipient = _getRecipientLogin($(evt.target).closest(".s-notif-item").attr("id"));

				// init chat window
				_initChat(recipient);
			}
			evt.preventDefault();
			evt.stopPropagation();
		});


		$(document.body).delegate(".s-chat-input-submit", "click", function(evt) {
			// get recipients
			var recipient = $(".s-chat-input-to").val();
			if (!recipient) {
				alert("Please specify recipient");
				evt.preventDefault();
				evt.stopPropagation();
				return;
			}

			var recipArr = recipient.split(",");


			// build message
			var $$txt = $(".s-chat-input-txt");
			var txt = $$txt.val();
			if (!txt) {
				alert("Please enter message text");
				evt.preventDefault();
				evt.stopPropagation();
				return;
			} else {
				// reset input
				$$txt.val('');
			}

			var msg = {
				message: txt,
				from: syra_site.userProfile.dataset.user.$value,
				to: recipArr,
				type: "message"
			};

			// send message
			syra_site.notifSocket.emit("message", msg);

			evt.preventDefault();
			evt.stopPropagation();
		});
	} else {
		$(document.body).undelegate(".s-notif-origin-img");
	}
};

var _appendPicker = function() {

	// dom element before which trigger button will be added
	var $$siteOpener = $(".s-site-help-link");

	//notifPicker

	// building picker button
	// TODO : GET COUNT
	syra_site.notifCount = 0;
	var pickerHtml = _getHtml(null, "notifPicker", {
		count: syra_site.notifCount
	});
	var $$picker = $(pickerHtml);

	// bind function on click
	$$picker.click(_togglePanel);

	// append trigger button
	$$picker.insertBefore($$siteOpener);


	// IO CONNECTION
	var host = "http://" + window.location.host;

	var socket = syra_site.notifSocket = io.connect(host);

	// on message receive
	socket.on("message", function(msg) {
		console.log("message received : " + JSON.stringify(msg, null, 2));
		_onMessage(msg);
		// TODO : DISPLAY MESSAGE SOMEWHERE
	});

	var login = syra_site.userProfile.dataset.user.$value || "admin";
	socket.emit("login", login);

	// var msg = {
	// 	title: "Hello",
	// 	message: "Test Message",
	// 	from: login,
	// 	to: ['admin', 'Teddy', 'Christophe'],
	// 	severity: "info"
	// };
	// socket.emit("message", msg);

	// retrieve events
	var events = syra_site.notifSocket.emit("get events", 30, function(events) {
		console.log("events received : " + JSON.stringify(events, null, 2));
		_updateEvents(events);
		_updatePanel();
	});

	_bindEvents(true);

	//
	//
	//
	//	// Example to retrieve events
	//	var events = socket.emit("get events", 30, function(events) {
	//		//console.log("events received : " + JSON.stringify(events, null, 2));
	//	});

	var users = socket.emit("get users", 30, function(users) {
		console.log("connected users : " + JSON.stringify(users, null, 2));
	});

	//socket.emit("disconnect", login);

};

exports.appendPicker = _appendPicker;
exports.bindEvents = _bindEvents;