"use strict";
//var io = require('syracuse-ui/deps/socket.io-client');

var _templates = {
	notifPicker: '\
		<a class="s-notif-picker {{#if count}}new{{/if}}">\
			<i class="fa fa-bell"></i>\
			<label class="s-notif-count">\
				{{#if count}}\
					{{count}}\
				{{/if}}\
			</label>\
		</a>',
	notifPanel: '\
		<div class="s-notif-panel">\
			<header>NOTIFICATIONS</header>\
			<section>{{{notifications}}}</section>\
			<footer></footer>\
		</div>',
	notifItem: '\
		<div class="s-notif-item" id="{{id}}">\
			<div class="s-notif-status">\
				{{#if isUser}}\
					<i class="fa fa-circle {{status}}"></i>\
				{{/if}}\
			</div>\
			<div class="s-notif-origin">\
				<img class="s-notif-origin-img" src="{{originSrc}}">\
			</div>\
			<div class="s-notif-content">\
				<div class="s-notif-content-one">\
					<div class="s-notif-content-origin-label">\
						{{originLabel}}\
					</div>\
					<div class="s-notif-content-origin-time">\
						{{time}} ago\
					</div>\
				</div>\
				<div class="s-notif-content-two">\
					<div class="s-notif-content-desc">\
						{{desc}}\
					</div>\
				</div>\
			</div>\
			<div class="s-notif-type">\
				<i class="{{typeIcon}} type"></i>\
			</div>\
		</div>',
	notifItemEmpty: '\
			<div class="s-notif-empty">\
				No notification available\
			</div>'
};

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};


var _hasPanel = function() {
	var $$notifPanel = $(".s-notif-panel");
	if ($$notifPanel.length > 0) {
		return $$notifPanel;
	} else {
		return false;
	}
};

var _updateCount = function(add) {
	if (add) {
		syra_site.notifCount++;
	} else {
		syra_site.notifCount = 0;
	}
};

var _getCount = function() {
	return syra_site.notifCount;
};

var _updatePicker = function(nn) {
	// if new notifications
	if (nn) {
		// update count
		_updateCount(true);
		$(".s-notif-count").text(_getCount());

		// update style
		$(".s-notif-picker").toggleClass("new", true);
	}
	// reset picker
	else {
		// update count
		_updateCount();
		$(".s-notif-count").text("");

		// update style
		$(".s-notif-picker").toggleClass("new", false);
	}
};


var _buildNotifItem = function(msg) {
	var notifItem = "";
	var ctx = {};

	ctx.id = msg._id;
	ctx.originSrc = "/syracuse-ui/themes/desktop/sage/images/notificationsusers/img004.jpg";
	ctx.originLabel = "TODO";
	ctx.time = "TODOh";
	ctx.desc = msg.data.message;

	// type icon
	if (msg.severity) {
		ctx.typeIcon = msg.severity === "warning" ? "fa fa-flash" : "fa fa-info-circle";
	} else {
		ctx.typeIcon = msg.type === "message" ? "fa fa-info-circle" : "fa fa-brief-case";
	}

	return _getHtml(null, "notifItem", ctx);

};


var _updatePanel = function() {
	var notifications;
	if (syra_site.notifArr && syra_site.notifArr.length > 0) {
		notifications = [];
		syra_site.notifArr.forEach(function(msg, idx) {
			notifications.push(_buildNotifItem(msg));
		});
		notifications = notifications.join('');
	} else {
		notifications = _getHtml(null, "notifItemEmpty", {});
	}

	var notifPanelHtml = _getHtml(null, "notifPanel", {
		notifications: notifications
	});

	var $$panel = _hasPanel();
	if ($$panel) {
		// panel not empty
		if ($$panel.find(".s-notif-item").length > 0) {
			// empty panel
			var $$panelSection = $$panel.find("section");
			$$panel.empty($$panelSection);
			// fill panel
			$(notifications).insertAfter($$panel.find("header"));
		}
		// panel empty
		else {
			alert("TODO : not implemented yet");
		}
	} else {
		var $$notifPanel = $(notifPanelHtml);

		// append notifpanel
		$(document.body).append($$notifPanel);
		$$notifPanel.toggle();
	}
};

// var _appendEvents = function() {
// 	var $$panel = _hasPanel();
// 	if ($$panel) {
// 		syra_site.notifArr.forEach(function(msg,idx){
// 			$$panel.append($(_buildNotifItem(msg)));
// 		});
// 	} else {
// 		_updatePanel();
// 	}
// };

var _togglePanel = function() {
	var $$notifPanel = _hasPanel();
	if ($$notifPanel) {
		// TODO if notif was closed, and if new, reset count and remove style
		$$notifPanel.toggle();
	} else {

		// update picker
		_updatePicker();
	}

};

/*
 *	Handles notification when a message is received
 */
var _onMessage = function(msg) {

	_updateEvents([msg]);

	// Is panel already built
	var $$panel = _hasPanel();
	if ($$panel) {

		// is panel opened
		if ($$panel.is(":visible")) {}
		// is panel closed
		else {
			_updatePicker(true);
		}
	}

	// panel is not already built
	else {
		//TODO
		_updatePicker(true);
	}

	_updatePanel();
};

var _updateEvents = function(events) {

	if (!syra_site.notifArr) {
		syra_site.notifArr = [];
		events.forEach(function(evt, idx) {
			syra_site.notifArr.push(evt);
		});
	} else {
		events.forEach(function(evt, idx) {
			syra_site.notifArr.unshit(evt);
		});
	}
};

var _appendPicker = function() {

	// dom element before which trigger button will be added
	var $$siteOpener = $(".s-site-help-link");

	//notifPicker

	// building picker button
	// TODO : GET COUNT
	syra_site.notifCount = 0;
	var pickerHtml = _getHtml(null, "notifPicker", {
		count: syra_site.notifCount
	});
	var $$picker = $(pickerHtml);

	// bind function on click
	$$picker.click(_togglePanel);

	// append trigger button
	$$picker.insertBefore($$siteOpener);


	// IO CONNECTION
	var host = "http://" + window.location.host;

	var socket = syra_site.notifSocket = io.connect(host);

	// on message receive
	socket.on("message", function(msg) {
		console.log("message received : " + JSON.stringify(msg, null, 2));
		_onMessage(msg);
		// TODO : DISPLAY MESSAGE SOMEWHERE
	});

	var login = syra_site.userProfile.dataset.user.$value || "admin";
	socket.emit("login", login);

	//	var msg = {
	//		title: "Hello",
	//		message: "Test Message",
	//		from: login,
	//		to: ['admin', 'Teddy', 'Christophe'],
	//		severity: "info"
	//	};
	//	socket.emit("message", msg);

	// retrieve events
	var events = syra_site.notifSocket.emit("get events", 30, function(events) {
		console.log("events received : " + JSON.stringify(events, null, 2));
		_updateEvents(events);
		_updatePanel();
	});

	//
	//
	//
	//	// Example to retrieve events
	//	var events = socket.emit("get events", 30, function(events) {
	//		//console.log("events received : " + JSON.stringify(events, null, 2));
	//	});

	var users = socket.emit("get users", 30, function(users) {
		console.log("connected users : " + JSON.stringify(users, null, 2));
	});

	//socket.emit("disconnect", login);

};

exports.appendPicker = _appendPicker;