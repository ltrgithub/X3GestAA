"use strict";
var helpers = require('syracuse-core/lib/helpers');
var io = require('syracuse-ui/deps/socket.io-client/socket.io');

/// !doc
///
/// # socketHandle API
/// This module allow the client framework to register any kind of event in order
//  to receive push server message and emit in return message to server
/// ``` javascript
/// var SocketHandler = require('syracuse-x3/lib/notifications/SocketHandler').create();
///
///
var SocketHandler = helpers.defineClass(function() {
	this.listSocketEvent = {};
	this.host = "http://" + window.location.host;
	this.listSocket = {};
	// on message receive

}, null, {
	///
	/// # register socketio event
	/// register for a specific path and socket io callback depending of event
	/// var socketEvent = {
	///     "path" : "/session", -> path of event
	///     "id" : "identifier", -> identifier of the socket in order to retrieve it easily to emit message to the server
	///     "message" : {
	///         "event-id" : function(socket){
	///            //this is the handler function that will be execution on reception of event-id message
	///         },...
	///     }
	/// }
	///
	///
	register: function(socketEvent) {
		this.listSocketEvent[socketEvent.id] = socketEvent;
		this._initEvents(); // reinitialize event to manage
		return this.listSocket[socketEvent.id];
	},
	unregister: function(id) {
		delete this.listSocketEvent[id];
		this._initEvents(); // reinitialize event to manage
	},
	emit: function(idEvent, message, data) {
		this.listSocket[idEvent].emit(message, data);
	},
	_initEvents: function() {
		var self = this;
		Object.keys(this.listSocketEvent).forEach(function(key) {
			var event = self.listSocketEvent[key];
			if (event) {
				self.listSocket[event.id] = io.connect(self.host + event.path);

				event.message && Object.keys(event.message).forEach(function(k) {
					var message = event.message[k];
					self.listSocket[event.id].on(k, message);
				});

			}
		});
	},
});

exports.create = function() {
	return new SocketHandler();
};