"use strict";
var helpers = require("syracuse-core/lib/helpers")
var Article = require("syracuse-ui/lib/common/article/article").Article;

function MobileSimpleFieldsTest(){
}

exports.SimpleFieldsTest = helpers.defineClass(MobileSimpleFieldsTest, Article, {

    notifyField: function($bind, value){
        var field = this.boundFields[$bind][0];
        field.setDataBind(value);
        field.notifyChange(value, true);
    },
    
    onNotifyRecordChange: function(value, binding){
        var self = this;
        switch (binding) {
            case "$actions":
                self.notifyField("$field$isHidden", true);
                setTimeout(function(){
                    self.notifyField("$field$isHidden", false);
                    self.notifyField("$field$isDisabled", true);
                    self.notifyField("$field$isMandatory", true);
                    setTimeout(function(){
                        self.notifyField("$field$isDisabled", false);
                        self.notifyField("$field$isTitleHidden", true);
                        setTimeout(function(){
                            self.notifyField("$field$isTitleHidden", false);
                            self.notifyField("$field$isRightTextLabelAlignment", true);
                            setTimeout(function(){
                                self.notifyField("$field$isRightTextLabelAlignment", false);
                                self.notifyField("$field$isTopLabelAlignment", true);
                                setTimeout(function(){
                                    self.notifyField("$field$isTopLabelAlignment", false);
                                    
                                }, 2000);
                            }, 2000);
                        }, 2000);
                    }, 2000);
                }, 2000);
                break;
            case "$field$description":
                Object.keys(self.boundFields).forEach(function(bind){
                    var metaData = {
                        $description: value ? "description dqdfsdhfdlsk fdqsmf,qsdmfmqsdj fmsdfmqsdf fmsdmdlsjgq" : null
                    };
                    if (bind.indexOf("$field") != 0) {
                        self.boundFields[bind].forEach(function(field){
                            field.applyMetaData(metaData);
                        });
                    }
                });
                break;
            case "$field$isDiagnoseViewerHidden":
                if (self.isDiagnoseViewerHidden = value) {
                    if (document.site._diagnoseViewer && document.site._diagnoseViewer.$$item) {
                        document.site._diagnoseViewer.$$item.hide();
                    }
                }
                break;
            case "$field$isDiagnoses":
                Object.keys(self.boundFields).forEach(function(bind){
                    var metaData = {};
                    if (value == "clear") {
                        metaData.$diagnoses = null;
                    }
                    else {
                        metaData.$diagnoses = [{
                            severity: "error",
                            message: "Error test  blalfozf f;zeapfazfg fzefazeazertaze rzererzer rzerazerazerz Errror testfin"
                        }];
                        if (value == "full") {
                            metaData.$diagnoses.push({
                                severity: "warning",
                                message: "Warning test  blalfozf f;zeapfazfg fzefazeazertaze rzererzer rzerazerazerz Warning testfin"
                            });
                            metaData.$diagnoses.push({
                                severity: "info",
                                message: "Info test  blalfozf f;zeapfazfg fzefazeazertaze rzererzer rzerazerazerz Info testfin"
                            });
                        }
                    }
                    if (bind.indexOf("$field") != 0) {
                        self.boundFields[bind].forEach(function(field){
                            field.applyMetaData(metaData);
                        });
                    }
                });
                if (self.isDiagnoseViewerHidden) {
                    document.site._diagnoseViewer.$$item.hide();
                }
                break;
            default:
                if (binding.indexOf("$field") == 0) {
                    var $field = self.$prototype.$[binding];
                    binding = binding.replace("$field", "");
                    var metaData = {};
                    metaData[binding] = value;
                    Object.keys(self.boundFields).forEach(function(bind){
                        if (bind.indexOf("$field") != 0) {
                            self.boundFields[bind].forEach(function(field){
                                if ($field.$isMetaData) {
                                    field.applyMetaData(metaData);
                                }
                                else {
                                    field.applyDesignMetaData(metaData, true);
                                }
                            });
                        }
                    });
                }
                break;
        }
        return null; //cancel notify
    },
    _initializeBox: function(){
        var self = this;
        self.$prototype = {
            "$": {
                "application/x-string": {
                    $title: "x-string",
                    $type: "application/x-string",
                    $constraints: {
                        $maxLength: 30
                    },
                    $capabilities: "sort,filter,alphaTab"
                },
                "application/x-choice": {
                    $title: "application/x-choice",
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-integer",
                        $constraints: {
                            $enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value){
                                return {
                                    "$value": value,
                                    $title: "Value " + value
                                };
                            })
                        }
                    }
                },
                "application/x-date": {
                    $title: "x-date",
                    $type: "application/x-date"
                },
                "application/x-time": {
                    $title: "x-time",
                    $type: "application/x-time"
                },
                "application/x-datetime": {
                    $title: "x-datetime",
                    $type: "application/x-datetime"
                },
                "application/x-boolean": {
                    $title: "application/x-boolean",
                    $type: "application/x-boolean"
                },
                "$email": {
                    $title: "$format: $email",
                    $type: "application/x-string",
                    $format: "$email"
                
                },
                "$phone": {
                    $title: "$format: $phone",
                    $type: "application/x-string",
                    $format: "$phone"
                },
                "application/x-integer": {
                    $title: "application/x-integer",
                    $type: "application/x-integer",
                    $constraints: {
                        "$isNullable": true
                    },
                    "$capabilities": "sort,filter"
                },
                "application/x-decimal": {
                    $title: "application/x-decimal",
                    $type: "application/x-decimal",
                    $constraints: {
                        "$isNullable": true
                    }
                }
            },
            "application/x-string": "ceci est du texte",
            "$phone": "01.41.66.21.21",
            "$email": "toto@sage.com",
            "application/x-integer": 200,
            "application/x-decimal": 2987111111111.4548,
            "application/x-boolean": true,
            "application/x-date": "2011-06-07",
            "application/x-time": "12:00:00",
            "application/x-datetime": "2012-03-16T12:40:50.957Z",
            "application/x-choice": 2,
            $actions: {
                $startMacro: {
                    $title: "Start"
                }
            },
        };
        self.$item = {
            $skin: "s-portlet",
            $layout: {
                $items: [{
                    $category: "section",
                    $title: "Fields ($isEditMode: true / $isEditMode: false)",
                    $layout: {
                        $items: self._makeBlock(true)
                    }
                }]
            }
        };
        Article.prototype._initializeBox.call(self);
    },
    _makeBlock: function($isEditMode){
        return [this._makeEditReadBlock("application/x-string", [{
            $bind: "application/x-string"
        }, {
            $bind: "$phone"
        }, {
            $bind: "$email"
        }]), this._makeEditReadBlock("Time", [{
            $bind: "application/x-date"
        }, {
            $bind: "application/x-time"
        }, {
            $bind: "application/x-datetime"
        }]), this._makeEditReadBlock("Numeric", [{
            $bind: "application/x-integer"
        }, {
            $bind: "application/x-decimal"
        }]), this._makeEditReadBlock("application/x-boolean", [{
            $bind: "application/x-boolean"
        }]), this._makeEditReadBlock("application/x-choice", [{
            $title: "default >4 combo",
            $bind: "application/x-choice"
        }, {
            $title: "$format:$combo",
            $bind: "application/x-choice",
            $format: "$combo"
        }, {
            $title: "$format:$radios",
            $bind: "application/x-choice",
            $format: "$radios"
        }])];
        /*
         , this._makeEditReadBlock("application/x-choice", [{
         $title: "default >4 combo",
         $bind: "application/x-choice"
         }, {
         $title: "$format:$combo",
         $bind: "application/x-choice",
         $format: "$combo"
         }, {
         $title: "$format:$radios",
         $bind: "application/x-choice",
         $format: "$radios"
         }])
         */
    },
    _makeEditReadBlock: function($title, $items){
        return {
            $category: "block",
            $title: $title,
            $layout: {
                $items: $items.map(function($item){
                    var newItem = {
                        $isEditMode: true
                    };
                    Object.keys($item).forEach(function($prop){
                        newItem[$prop] = $item[$prop];
                    });
                    return newItem;
                })
            
            }
        };
    },
    _makeEditReadStack: function($items, $isEditMode){
        return {
            $layoutType: "stack",
            $items: $items.map(function($item){
                var newItem = {
                    $isEditMode: $isEditMode
                };
                Object.keys($item).forEach(function($prop){
                    newItem[$prop] = $item[$prop];
                });
                return newItem;
            })
        };
    },
    loadBox: function(){
        var self = this;
        Article.prototype.loadBox.call(self);
        
    }
});
