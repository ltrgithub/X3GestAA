"use strict";
var helpers = require('syracuse-core/lib/helpers');
var box = require('syracuse-ui/lib/common/article/box');

function MobileBox(){
}

exports.MobileBox = helpers.defineClass(MobileBox, box.Box, {
    _initializeBox: function(){
        box.Box.prototype._initializeBox.call(this);
        this.$item.$skin = this.$item.$skin || "mobile-box";
        this.$headerTag = "h3";
    },
    openBox: function(open){
        if (!this.isjqmBoxInit) {
            this.$theme = this.$theme ||
            {
                $header: "a",
                $content: "a"
            };
            /*if (this.$item.$title) {
             this.$item.$isBoxCollapsable = !this.$isTabLayout;
             }*/
            if (this.applyCollapsable(this.$item.$isBoxCollapsable)) {
                if (document.site.isjqmPageLoaded()) {
                    document.site.refreshJQMPlugin(this.$$item, "collapsible");
                }
            }
            this.isjqmBoxInit = true;
        }
        box.Box.prototype.openBox.call(this, open);
    },
    applyCollapsable: function($isBoxCollapsable){
        if ($isBoxCollapsable) {
            if (!this.$$collapsWrapper) {
                if (this.$collapseCss) {
                    this.$$item[0].className = this.$$item[0].className.replace(this.$collapseCss, "");
                }
                this.$$item.attr("data-role", "collapsible").attr("data-collapsed", this.$item.$opened === false);
                this.$$item.wrap(this.$$collapsWrapper = $("<div style='padding:5px 12px'/>"));
                //!!!important avoid ui-collapsible-heading maring-8px errror
                this.$$item.attr("data-theme", this.$theme.$header).attr("data-content-theme", this.$theme.$content);
            }
        }
        else {
            if (!this.$contentThemeCss && (this.$item && !this.$item.$isBodyTransparent)) {
                this.$$item[0].className += (this.$contentThemeCss = " ui-body ui-body-" + this.$theme.$content);
            }
            
        }
        return $isBoxCollapsable;
    }
});

var _formatAdapter = {
    "button": {
        getItemContainer: function(){
            return $("<p/>");
        },
        initDrawBox: function(menus){
            _formatAdapter.list.initDrawBox(menus);
        },
        refresh: function(menus){
            _formatAdapter.list.refresh(menus);
        }
    },
    "icon": {
        getItemContainer: function(){
            return $("<div/>");
        },
        initDrawBox: function(menus){
            menus.$$item = menus.$$body = $("<div/>").addClass("ui-grid-b").addClass("s-mobile-grid");
        },
        refresh: function(){
        
        }
    },
    "list": {
        getItemContainer: function(){
            return $("<li/>");
        },
        initDrawBox: function(menus){
            menus.$$item = menus.$$body = $("<ul data-inset='true' data-role='listview'/>").attr("data-theme", menus.$theme.$items);
        },
        refresh: function(menus){
            if (document.site.isjqmPageLoaded()) {
                document.site.refreshJQMPlugin(menus.$$body, "listview");
            }
        }
    },
    "selectmenu": {
        getItemContainer: function(value){
            return $("<div>");
        },
        initDrawBox: function(menus){
            menus.$$item = menus.$$body = $("<div>").attr("data-role", "content");
        }
    }
};

function MobileMenus(){
}

exports.MobileMenus = helpers.defineClass(MobileMenus, box.Box, {
    addMenuItem: function($menu, record){
        if (!this.$item.$excludeBind || this.$item.$excludeBind.indexOf($menu.$bind) < 0) {
            var menuItem = document.itemFactory.create({
                $bind: $menu.$bind,
                $theme: this.$theme.$item,
                $format: this.$item.$format || null,
                $category: "link",
                $button: this.$item.$button
            }, this);
            menuItem.$$container = this.formatAdapter.getItemContainer($menu.$bind);
            menuItem.$$container.appendTo(this.$$body);
            menuItem.loadBox();
            menuItem.loaded = true;
            menuItem.setMenu($menu, record);
            if (this.formatAdapter.onAddMenuItem) {
                this.formatAdapter.onAddMenuItem(this, menuItem);
            }
            this.menuItems.push(menuItem);
            return menuItem;
        }
    },
    refreshListView: function(){
        this.formatAdapter.refresh(this);
    },
    drawBox: function(){
        this.$skin = "mobile";
        this.$theme = this.$item.$theme || document.site.$item.$themes.$default.$menus;
        (this.formatAdapter = _formatAdapter[this.$item.$format = this.$item.$format || "list"]).initDrawBox(this);
        this.$$item.css("display", "none").appendTo(this.$$container);
        this.applyHiddenState(this.$item);
        this.menuItems = [];
        this.openBox(this.$item.$opened !== false);
    },
    _renderLayoutContent: function(){
        //this.$$item.hide()=> if hideen show if menu in menuItem
        //this.$isHidden = true;
        var self = this;
        self.menuItemsCount = 0;
        if (!self.$item.$columnLimit) {
            self.$moreLimit = self.$item.$moreLimit || 20;
        }
        if (!self.$item.$isBindDisabled) {
            self.getArticle().menusFacade.bindBox(self);
        }
        else {
            if (self.$item.$links) {
                Object.keys(self.$item.$links).forEach(function($bind){
                    var $menu = self.$item.$links[$bind];
                    $menu.$bind = $bind;
                    self.addMenuItem($menu);
                });
            }
            if (self.$item.$actions) {
                Object.keys(self.$item.$actions).forEach(function($bind){
                    var $menu = self.$item.$actions[$bind];
                    $menu.$bind = $bind;
                    $menu.$isAction = true;
                    self.addMenuItem($menu);
                });
            }
        }
    },
    dispose: function(){
        if (this.menuItems) {
            var article = this.getArticle();
            if (article) {
                this.menuItems.forEach(function(menuItem){
                    article.removeItem(menuItem);
                });
                delete this.menuItems;
            }
        }
        delete this.formatAdapter;
        delete this.onMenuClick;
        box.Box.prototype.dispose.call(this);
    }
});
