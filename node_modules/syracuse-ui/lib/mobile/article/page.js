"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Page = require('syracuse-ui/lib/common/article/page').Page;
var localize = require('syracuse-ui/lib/mobile/localize');
var ArticleMenusPage = require('syracuse-ui/lib/mobile/article/articleMenusPage').ArticleMenusPage;

function MobilePage(){
}

exports.MobilePage = helpers.defineClass(MobilePage, Page, {
    loadBox: function(initData){
        var $representationUrl = this.$prototype ? this.$prototype.$representationUrl : null;
        if ($representationUrl && $representationUrl.indexOf("x3/erp/SUPERV/AUTILISM") >= 0) {
            var $list = this.$item.$layout.$items[0].$layout.$items[0];
            $list.$format = "cardList";
            $list.$cardsByRowCount = 3;
            $list.$cardview = {
                $layout: {
                    $layoutType: "side",
                    $items: [{
                        $category: "block",
                        $layoutType: "stack",
                        $items: [{
                            $bind: "PHOTO",
                            $isTitleHidden: true
                        }]
                    }, {
                        $layoutType: "stack",
                        $items: [{
                            $bind: "USR",
                            $isTitleHidden: true
                        }, {
                            $bind: "INTUSR",
                            $isTitleHidden: true
                        }]
                    }]
                }
            }
        }
        else {
            if ($representationUrl && $representationUrl.indexOf("x3/erp/SUPERV/COMPANYM") >= 0) {
                var $list = this.$item.$layout.$items[0].$layout.$items[0];
                $list.$format = "cardList";
                $list.$cardsByRowCount = 3;
                $list.$cardview = {
                    $layout: {
                        $layoutType: "side",
                        $items: [{
                            $category: "block",
                            $layoutType: "stack",
                            $items: [{
                                $bind: "LOGO",
                                $isTitleHidden: true
                            }]
                        }, {
                            $layoutType: "stack",
                            $items: [{
                                $bind: "CPY",
                                $isTitleHidden: true
                            }, {
                                $bind: "CPYSHO",
                                $isTitleHidden: true
                            }]
                        }]
                    }
                }
            }
        }
        switch (this.$pageCategory) {
            case "dashboard":
                this.$authoringSubType = "dashboard";
                this.$autoFetch = false;
                break;
            case "portlet":
                this.$isMainPage = false;
                if (this.$facet == "$demo") {
                    this.$autoFetch = false;
                }
                this.$item.$isTitleHidden = true;
                break;
        }
        Page.prototype.loadBox.call(this, initData);
    },
    applyActionLinkChange: function(resources, record){
        Page.prototype.applyActionLinkChange.call(this, resources, record);
        if (resources || record) {
            var self = this;
            self.menuBoxes.forEach(function(menus){
                menus.refreshListView();
            });
        }
    },
    _drawHeaderBar: function(){
    
        var self = this;
        
        if (self.$pageCategory == "portlet") {
            return;
        }
        
        self._$$headerBar = $("<header/>");
        self._$$headerBar.attr("data-role", "header").attr("data-add-back-btn", false).attr("data-position", "fixed").attr("data-theme", self.$layoutOptions.theme.$headerBar);
        self._$$headerBar.appendTo(self.$$item);
        self._buildHeaderBarGrid();
        
    },
    _buildHeaderBarGrid: function(){
        // grid columns number depends on header links number (mobile.js $links)
        // there should be as many columns as there are links. There will be two by default
        // 5 columns max for more user friendly UI
        var gridLetter;
        var columnNumberCorrespondence = {
            "a": 2,
            "b": 3,
            "c": 4,
            "d": 5
        }
        
        if (document.site.$prototype.$links) {
            var linksNumber = Object.keys(document.site.$prototype.$links).length;
            Object.keys(columnNumberCorrespondence).forEach(function(letter){
                if (linksNumber == columnNumberCorrespondence[letter]) {
                    gridLetter = letter;
                }
            });
            if (!gridLetter) {
                throw new Error("too many or not enough elements in document.site.$prototype.$links. must be between 2 and 5 included");
            }
        }
        else {
            throw new Error("document.site.$prototype.$links is undefined");
        }
        
        var $$headerGrid = $('<div>').addClass('ui-grid-' + gridLetter).appendTo(this._$$headerBar);
        
        this._appendHeaderBarLinks($$headerGrid);
    },
    _appendHeaderBarLinks: function($$container){
        var self = this;
        var letters = ['a', 'b', 'c', 'd', 'e'];
        Object.keys(document.site.$prototype.$links).forEach(function($link){
            var $$blockDiv = $('<div>').addClass('ui-block-' + letters[0]).appendTo($$container);
            letters.splice(0, 1);
            document.itemFactory.load($$blockDiv, {
                $bind: $link,
                $category: "link",
                $theme: document.site.$item.$layoutOptions.site.theme.$home,
                $noText: true,
                $icon: document.site.$prototype.$links[$link].$icon,
                $button: document.site.$prototype.$links[$link].$button,
                $format: "button",
                $css: document.site.$prototype.$links[$link].$css,
            }, self).onMenuClick = document.site.$prototype.$links[$link].onMenuClick;
        });
    },
    _drawFooterBar: function(){
        var self = this;
        
        // footer bar
        self._$$footerBar = $("<footer class='ui-bar'/>").attr("data-role", "footer").attr("data-position", "fixed").attr("data-theme", self.$layoutOptions.theme.$footerBar);
        
        self._$$footerCopyright = $("<div>").addClass("copyright").text(localize.footer.copyright).appendTo(self._$$footerBar);
        
        // appending footer bar
        self._$$footerBar.appendTo(self.$$item);
        
    },
    drawBox: function(){
        this.$item.$title = this.$item.$title || "{$title}";
        this.$theme = this.$layoutOptions.theme;
        this.$skin = "s-mobile-page";
        if (this.$isMainPage !== false) {
            this.$$item = $("<div data-role='page'/>").attr("data-theme", this.$layoutOptions.theme.$page).appendTo(this.$$container);
            this._drawHeaderBar();
            this.$$pageContent = $("<div/>").attr("data-role", "content").attr("data-theme", this.$layoutOptions.theme.$content).appendTo(this.$$item);
            this._drawFooterBar();
        }
        else {
            this.$$item = this.$$container;
            this.$$pageContent = this.$$item;
        }
        if (!this.$item.$isTitleHidden) {
            this.appendHeader(this.$$pageContent);
            //            if (this.$prototype.$description) {
            //                this.renderDescription(this.$prototype.$description);
            //            }
        }
        this.$$body = $("<div/>").addClass(this.$skin + "-body").appendTo(this.$$pageContent);
        
        this._renderLayoutContent(this.$item);
        this.appendArticleMenus();
        
        if (this.$dialogMode == "modal") {
            debugger;
        }
    },
    
    appendHeader: function($$container, hideHeader){
        this.$$header = $("<header/>").addClass(this.$skin + "-head");
        this.$$title = $("<div/>").addClass(this.$skin + "-title").appendTo(this.$$header);
        if (this.$item.$isTitleHidden || hideHeader) {
            this.$$header[0].style.display = "none"; //used by porletfield
        }
        this.$$header.prependTo($$container || this.$$item);
        this.renderTitle(this.$item.$title || this.id);
        if (this.$item.$description) {
            this.renderDescription(this.$item.$description);
        }
    },
    appendArticleMenus: function(){
        var self = this;
        
        if (self.$pageCategory == "dashboard") {
            return;
        }
        
        self.$facetMenus = self._getFacetMenus();
        if (self.$facetMenus) {
        
            // article actions menus button
            self._$$footerMenusBtn = $("<a>").attr("data-role", "button").attr("data-icon", document.site.$item.$icons.menusIcon).text(localize.footer.menus).appendTo(self._$$footerBar);
            
            
            // handling menus page opening
            self._$$footerMenusBtn.bind("click", function(){
                var menusPage = new ArticleMenusPage();
                menusPage.show({
                    $bind: "$linkBox",
                    $skin: self.$layoutOptions.menus,
                    $category: "links",
                    $format: "selectmenu",
                    $excludeBind: self.$facetMenus.$linkBox.$excludeBind
                }, self);
            });
            
            
            // loading footer main action button
            document.itemFactory.load(self._$$footerBar, {
                $category: "link",
                $format: "button",
                $icon: {
                    $name: document.site.$item.$icons.mainAction[self.$facetMenus.$mainAction]
                },
                $theme: document.site.$item.$layoutOptions.site.theme.$mainAction,
                $bind: self.$facetMenus.$mainAction
            }, self);
            
        }
    }
});
