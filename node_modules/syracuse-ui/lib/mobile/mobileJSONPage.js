"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;

function MobileJSONPage(){
}

exports.MobileJSONPage = helpers.defineClass(MobileJSONPage, DesktopPage, {
    loadBox: function($fieldsPrototype, initData, $initDiagnoses){
        this.$prototype = {
            $properties: {
                $fieldPrototype: {
                    "$title": "Prototype",
                    "$type": "application/x-string"
                },
                $fieldJSON: {
                    "$title": "Article",
                    "$type": "application/x-string"
                }
            },
            $actions: {
                $applyChange: {
                    $title: "apply Change"
                }
            }
        };
        this.$item = {
            $layout: {
                $items: [{
                    $skin: "s-record-menus-link",
                    $category: "link",
                    $bind: "$applyChange"
                
                }, {
                    $layoutType: "row",
                    $items: [{
                        $bind: "$fieldJSON",
                        $isEditMode: true,
                        $rows: 50,
                        $isAutoSizeDisabled: true,
                        $skin: "s-json-field"
                    }, {
                        $bind: "$fieldPrototype",
                        $isEditMode: true,
                        $rows: 50,
                        $isAutoSizeDisabled: true,
                        $skin: "s-json-field"
                    }]
                }]
            }
        };
        this.$autoFetch = false;
        DesktopPage.prototype.loadBox.call(this, initData, $initDiagnoses);
        this._header.style.display = "none";
        this._body.style.padding = "0.5em";
    },
    notifyActionChange: function(target, value){
        if (value.$applyChange) {
            try {
                var authorPage = document.site.authorPage;
                var $article = JSON.parse(this.boundFields.$fieldJSON[0].getDataValue());
                document.site.mobileGateway.applyChange($article);
                authorPage.notifyUpdate(true);
                authorPage.onEndChangeStep(authorPage.getPageContext(), null, helpers.object.clone($article, true));
                
            } 
            catch (error) {
                document.site.showDiagnoses({
                    $diagnoses: [{
                        $message: error.message
                    }]
                });
            }
            return;
        }
        DesktopPage.prototype.notifyActionChange.call(this, target, value);
    },
    fillEditors: function($prototype, $article){
        this.boundFields.$fieldJSON[0].setDataValue(JSON.stringify($article, null, 2));
        this.boundFields.$fieldPrototype[0].setDataValue(JSON.stringify($prototype, null, 2));
    }
});
