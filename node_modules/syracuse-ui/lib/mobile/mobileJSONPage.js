"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var locale = require('syracuse-core/lib/locale');

function MobileJSONPage() {}

exports.MobileJSONPage = helpers.defineClass(MobileJSONPage, DesktopPage, {
	loadBox: function($fieldsPrototype, initData, $initDiagnoses) {
		this.isAuthoringEventEnabled = true;
		this.$prototype = {
			$properties: {
				$fieldPrototype: {
					"$type": "application/x-string"
				},
				$fieldJSON: {
					"$type": "application/x-string"
				}
			},
			$actions: {
				$applyChange: {
					$title: "apply Change"
				}
			}
		};
		var localize = locale.resources(module)();
		this.$item = {
			$layout: {
				$items: [{
					$skin: "s-record-menus-link",
					$category: "link",
					$bind: "$applyChange"

				}, {
					$layoutType: "tabs",
					$items: [{
						$category: "section",
						$title: localize.p_fieldJSON,
						$layout: {
							$items: [{
								$bind: "$fieldJSON",
								$isTitleHidden: true,
								$isEditMode: true,
								$rows: 50,
								$isAutoSizeDisabled: true,
								$skin: "s-json-field"
							}]
						}

					}, {
						$category: "section",
						$title: localize.p_fieldPrototype,
						$layout: {
							$items: [{
								$bind: "$fieldPrototype",
								$isTitleHidden: true,
								$isEditMode: true,
								$rows: 50,
								$isAutoSizeDisabled: true,
								$skin: "s-json-field"
							}]
						}
					}]
				}]
			}
		};
		this.$autoFetch = false;
		DesktopPage.prototype.loadBox.call(this, initData, $initDiagnoses);
		this._header.style.display = "none";
		this._body.style.padding = "0.5em";
	},
	notifyActionChange: function(target, value) {
		if (value.$applyChange) {
			try {
				var authorPage = document.site.authorPage;
				var $article = JSON.parse(this.boundFields.$fieldJSON[0].getDataValue());
				document.site.mobileGateway.applyChange($article);
				authorPage.notifyUpdate(true);
				authorPage.onEndChangeStep(authorPage.getPageContext(), null, helpers.object.clone($article, true));

			} catch (error) {
				document.site.showDiagnoses({
					$diagnoses: [{
						$message: error.message
					}]
				});
			}
			return;
		}
		DesktopPage.prototype.notifyActionChange.call(this, target, value);
	},
	fillEditors: function($prototype, $article) {
		this.applyChange({
			$fieldJSON: JSON.stringify($article, null, 2),
			$fieldPrototype: JSON.stringify($prototype, null, 2)

		});
	}
});