"use strict";
var helpers = require('syracuse-core/lib/helpers');
var MobileBox = require("syracuse-ui/lib/mobile/article/box").MobileBox;

var _formatBuilder = {
    "$html": require('./htmlPortletBuilder'),
    "$page": {
        load: function(field){
            document.controller.loadRepresentation(null, field.$field.$location.$url, function($itemPage){
                $itemPage.$$container = field.$$body;
                $itemPage.$category = "portlet";
                field.portlet = document.itemFactory.loadPage($itemPage);
            });
        },
        getAuthoringWidget: function(field){
            return null;
        },
        dispose: function(){
        }
    },
    "$item": {
        load: function(field){
            field.portlet = document.itemFactory.load(field.$$body, field.$field.$item, field);
        },
        getAuthoringWidget: function(field){
            return null;
        },
        dispose: function(){
        }
    },
    "$menu": require('./menusPortletBuilder')
};

function MobilePortletField(){
}

exports.MobilePortletField = helpers.defineClass(MobilePortletField, MobileBox, {
    loadBox: function(){
        this.$authoringLevel = "field";
        this.$skin = "s-portlet-field";
        MobileBox.prototype.loadBox.call(this);
    },
    onModalResize: function(){
        // Nothing       
    },
    drawBox: function(){
        var dashboard = this.getPage();
        this.$theme = document.site.$item.$themes.$field.$portletField;
        if (this.$item.$isBoxCollapsable === undefined) {
            this.$item.$isBoxCollapsable = false;
        }
        this.$$item = $("<div/>").appendTo(this.$$container);
        if (!this.$item.$isTitleHidden) {
            this.appendHeader(null, false, true);
        }
        this.applyDesignMetaData(this.$item, false);
        this.$$body = $("<div class='" + this.$skin + "-body'/>").appendTo(this.$$item);
        this.openBox(this.$item.$opened !== false)
    },
    _renderLayoutContent: function(){
        var self = this;
        if (self.portlet) {
            self.$$body.empty();
            document.controller.disposeObject(self.portlet);
        }
        if (!this.$field.$format && this.$field.$location) {
            this.$field.$format = this.$field.$location.$type == "html" ? "$html" : "$page";
        }
        if (this.formatBuilder = _formatBuilder[this.$field.$format]) {
            this.formatBuilder.load(this);
        }
        return;
        if (self.$field.$location) {
            document.controller.loadRepresentation(null, self.$field.$location.$url, function($itemPage){
                $itemPage.$$container = self.$$body;
                $itemPage.$category = "portlet";
                self.portlet = document.itemFactory.loadPage($itemPage);
            });
        }
        else {
            switch (self.$field.$format) {
                case "$menu":
                    self.portlet = document.itemFactory.loadPage({
                        $$container: self.$$body,
                        $representation: {
                            $prototype: {
                                $links: self.$field.$links,
                                $actions: self.$field.$actions
                            },
                            $article: {
                                $category: "portlet",
                                $layout: {
                                    $items: [{
                                        $theme: document.site.$item.$themes.$portletMenus,
                                        $format: self.$item.$menusFormat || "icon",
                                        $category: "links"
                                    }]
                                }
                            }
                        },
                        $urlParts: {
                            $facet: "$menu"
                        },
                        $category: "portlet"
                    });
                    break;
            }
        }
    },
    dispose: function(){
        this.formatBuilder.dispose(this);
        delete this.formatBuilder;
        MobileBox.prototype.dispose.call(this);
    }
});



