"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ReferenceField = require('syracuse-ui/lib/common/field/referenceField').ReferenceField;
var fieldHelper = require('./fieldHelper');
var localize = require('syracuse-ui/lib/mobile/localize');

var MobilePopup = require("syracuse-ui/lib/mobile/site/popup").MobilePopup;

function MobileReference(){
}

exports.MobileReference = helpers.defineClass(MobileReference, ReferenceField, {
    loadBox: function(){
        fieldHelper.onLoadBox(ReferenceField, this);
    },
    setDescription: function(){
    },
    setHelp: function(){
    },
    render: function(){
        var self = this;
        if (self.$isEditMode) {
            //if (self.$isEditMode) {	// previous code version
            if (self.$field.$links && self.$field.$links.$lookup) {
                self.$$dataValue = self.$$input = $("<input type='text'/>");
                if (self.inputId) {
                    self.$$input.attr("id", self.inputId);
                }
                //self.$$input.appendTo(self.$$item).textinput();	// previous code version
                self.$$input.appendTo(self.$$item);
                
                // lookup button
                self.$$pickerBtn = $("<a>").attr("data-role", "button").attr("data-icon", document.site.$item.$icons.searchBtnIcon).attr("data-iconpos", document.site.$item.$icons.searchBtnIconpos);
                self.$$pickerBtn.addClass(self.$skin + "-ref-picker").bind("click", function(){
                    self.clickLookUp(self);
                }).appendTo(self.$$item);
            }
            else {
                self.$$item.append(self.$$dataValue = $("<div/>").appendTo(self.$$item));
            }
            if (!self.$item.$inplace && !self.$item.$isDescriptionHidden) {
                self.$$refTitle = $("<label/>").addClass(self.$skin + "-ref-desc");
            }
        }
        else {
            self.codeMenu = document.itemFactory.load(self.$$dataValue, {
                $bind: "$detail",
                $isDescriptionVisible: self.$item.$isReferenceTitleVisible !== false,
                $css: self.$item.$css,
                $category: "link",
                $skin: "ui-link " + self.$skin + "-ref-link",
                $skinDescription: self.$skin + "-ref-link-desc",
                $format: self.$item.$format,
                $button: self.$item.$button
            }, self.boxParent);
        }
    },
    _createValueContainer: function(){
        this.$$valueSlot = this.$$dataValue = this.$$item;
    },
    clickLookUp: function(field){
		var self = this;
        var article = field.getArticle();
        /*
         document.controller.loadRepresentation(article, field.$field.$links.$lookup.$url, function($itemPage){
         document.controller.sendRequest($itemPage.$representation, null, function(data){
         var lookupPage = new MobileLookupPage();
         lookupPage.show(field, data, $itemPage.$representation.$prototype.$title);
         });
         });
         */
        var options = {
            article: article,
            $url: field.$field.$links.$lookup.$url,
        };
        
        document.controller.loadRepresentation(options.article, options.$url, function($itemPage){
            $itemPage.$$container = $(document.createElement("div"));
			$itemPage.$$container = document.site.$$container;
            $itemPage.$displayTarget = "modal";
            self.lookupPage = document.itemFactory.loadPage($itemPage);
        });
    }
});

function MobileLookupPage(){
}

exports.MobileLookupPage = helpers.defineClass(MobileLookupPage, MobilePopup, {
    _initialize: function($title){
        var self = this;
        // page
        self.$$item = $("<div>").attr("data-role", "page").attr("data-theme", document.site.$item.$layoutOptions.dialogbox.theme.$page).appendTo(document.site.$$container);
        
        // header
        self.$$header = $("<div>").attr("data-role", "header").attr("data-theme", document.site.$item.$layoutOptions.dialogbox.theme.$header).appendTo(self.$$item);
        $("<h1/>").appendTo(self.$$header).text($title);
        
        // handling dialog close
        self.$$header.delegate("a", "click", function(){
            return self.close();
        });
        
        // core
        self.$$core = $('<div/>').attr("data-role", "content").appendTo(self.$$item);
        
        // list
        self.$$list = $('<ul/>').attr('data-role', 'listview').attr('data-filter', true).attr('data-inset', true).appendTo(self.$$core);
        
    },
    show: function(field, data, $title){
        var self = this;
        
        // initialize if necessary
        if (!self.$$header) {
            self._initialize($title);
        }
        
        // appending records
        self._appendRecords(field, data);
        
        // show lookup page
        $.mobile.changePage(self.$$item, {
            transition: "none",
            role: "dialog",
            changeHash: false,
            reverse: false
        });
        
        // hack to avoid JQM close behaviour
        self.$$item.data("dialog").close = function(){
        }
        
        // register popup in registered popups stack
        MobilePopup.prototype.init.call(this, self);
    },
    _appendRecords: function(field, data){
        var self = this;
        self.data = data;
        data.$resources.forEach(function(record){
            var $$li = $('<li/>').appendTo(self.$$list);
            var $$a = $("<a/>").attr('href', '#').appendTo($$li);
            $$a.text(record.description);
            $$li.bind("click", function(rec){
                field.setDataValue(record);
                return self.close();
            });
        });
        // useful : data.$resources, data.$totalResults, data.$descriptor, data.$itemsPerPage, data.$startIndex
    },
    dispose: function(){
        var self = this;
        self.$$header.undelegate();
        document.controller.disposeObject(self.data);
        self.data = null;
        self.$$item.empty();
    }
});
