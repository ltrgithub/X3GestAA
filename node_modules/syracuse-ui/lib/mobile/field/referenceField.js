"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ReferenceField = require('syracuse-ui/lib/common/field/referenceField').ReferenceField;
var fieldHelper = require('./fieldHelper');
var localize = require('syracuse-ui/lib/mobile/localize');

var MobilePopup = require("syracuse-ui/lib/mobile/site/popup").MobilePopup;

function MobileReference(){
}

exports.MobileReference = helpers.defineClass(MobileReference, ReferenceField, {
    loadBox: function(){
        fieldHelper.onLoadBox(ReferenceField, this);
    },
    setDescription: function(){
    },
    setHelp: function(){
    },
    render: function(){
        var self = this;
        if (self.$isEditMode) {
            //if (self.$isEditMode) {	// previous code version
            if (self.$field.$links && self.$field.$links.$lookup) {
                self.$$inputValue = self.$$dataValue = self.$$input = $("<input type='text'/>").addClass("s-field-edit-ref-input");
                if (self.inputId) {
                    self.$$input.attr("id", self.inputId);
                }
                //self.$$input.appendTo(self.$$item).textinput();	// previous code version
                self.$$input.appendTo(self.$$item);
                
                // lookup button
                self.$$pickerBtn = $("<a>").attr("data-role", "button").attr("data-icon", document.site.$item.$icons.searchBtnIcon).attr("data-iconpos", document.site.$item.$icons.searchBtnIconpos);
                self.$$pickerBtn.addClass(self.$skin + "-ref-picker").bind("click", function(){
                    self.clickLookUp(self);
                }).appendTo(self.$$item);
            }
            else {
                self.$$item.append(self.$$inputValue = $("<div/>").appendTo(self.$$item));
            }
            if (!self.$item.$inplace && !self.$item.$isDescriptionHidden) {
                self.$$refTitle = $("<label/>").addClass(self.$skin + "-ref-desc");
            }
        }
        else {
            self.codeMenu = document.itemFactory.load(self.$$textValue, {
                $bind: "$detail",
                $isDescriptionVisible: self.$item.$isReferenceTitleVisible !== false,
                $css: self.$item.$css,
                $category: "link",
                $skin: "ui-link " + self.$skin + "-ref-link",
                $skinDescription: self.$skin + "-ref-link-desc",
                $format: self.$item.$format,
                $button: self.$item.$button
            }, self.boxParent);
        }
    },
    _createValueContainer: function(){
        this.domValueSlot = (this.$$textValue = this.$$inputValue = this.$$dataValue = this.$$item)[0];
    },
    clickLookUp: function(field){
        var self = this;
        var article = field.getArticle();
        var options = {
            article: article,
            $url: field.$field.$links.$lookup.$url,
            onSelectRecord: function(selectedRecords){
                var $result = field.$field.$links.$lookup.$result;
                var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
                field.setDataValue($result ? record.dataset[$result] : record.dataset);
                document.fieldController.notifyChange(field, field.currentValue);
            }
        };
        var lookupPage = new MobileLookupPage();
        lookupPage.show(options);
    }
});

function MobileLookupPage(){
}

exports.MobileLookupPage = helpers.defineClass(MobileLookupPage, MobilePopup, {
    show: function(options){
        var self = this;
        self.options = options;
        document.controller.loadRepresentation(self.options.article, self.options.$url, function($itemPage){
            $itemPage.$$container = document.site.$$container;
            $itemPage.$category = "dialogpage";
            self.lookupPage = document.itemFactory.loadPage($itemPage);
            
            $.mobile.changePage(self.lookupPage.$$item, {
                transition: "none",
                role: "dialog",
                changeHash: false,
                reverse: false
            });
            
            if (self.options.onSelectRecord) {
                self.lookupPage.onSelectRecord = function(selectedRecords){
                    if (self.options.onSelectRecord(selectedRecords, self.lookupPage) !== false) {
                        self.close();
                        return false;
                    }
                };
            }
            
            // handling dialog close
            self.lookupPage._$$headerBar.find("a").bind("click", function(){
                self.close();
                return false;
            });
            
            // hack to avoid JQM close behaviour
            self.lookupPage.$$item.data("dialog").close = function(){
            }
            
            // register popup in registered popups stack
            MobilePopup.prototype.init.call(this, self);
        });
    },
    dispose: function(){
        var self = this;
        self.lookupPage._$$headerBar.undelegate();
        self.lookupPage.$$item.empty();
        document.controller.disposeObject(self.lookupPage);
        delete self.lookupPage;
        delete self.options;
    }
});
