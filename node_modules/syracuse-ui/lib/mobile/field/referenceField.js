"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ReferenceField = require('syracuse-ui/lib/common/field/referenceField').ReferenceField;
var fieldHelper = require('./fieldHelper');
var localize = require('syracuse-ui/lib/mobile/localize');
function MobileReference(){
}

exports.MobileReference = helpers.defineClass(MobileReference, ReferenceField, {
    loadBox: function(){
        fieldHelper.onLoadBox(ReferenceField, this);
    },
    setDescription: function(){
    },
    setHelp: function(){
    },
    render: function(){
        var self = this;
        if (self.$isEditMode) {
            //if (self.$isEditMode) {	// previous code version
            if (self.$field.$links && self.$field.$links.$lookup) {
                self.$$dataValue = self.$$input = $("<input type='text'/>");
                if (self.inputId) {
                    self.$$input.attr("id", self.inputId);
                }
                //self.$$input.appendTo(self.$$item).textinput();	// previous code version
                self.$$input.appendTo(self.$$item);
                
                // lookup button
                self.$$pickerBtn = $("<a>").attr("data-role", "button").attr("data-icon", document.site.$item.$icons.searchBtnIcon).attr("data-iconpos", document.site.$item.$icons.searchBtnIconpos);
                self.$$pickerBtn.addClass(self.$skin + "-ref-picker").bind("click", function(){
                    clickLookUp(self);
                }).appendTo(self.$$item);
            }
            else {
                self.$$item.append(self.$$dataValue = $("<div/>").appendTo(self.$$item));
            }
            if (!self.$item.$inplace && !self.$item.$isDescriptionHidden) {
                self.$$refTitle = $("<label/>").addClass(self.$skin + "-ref-desc");
            }
        }
        else {
            self.codeMenu = document.itemFactory.load(self.$$dataValue, {
                $bind: "$detail",
                $isDescriptionVisible: self.$item.$isReferenceTitleVisible !== false,
                $css: self.$item.$css,
                $category: "link",
                $skin: "ui-link " + self.$skin + "-ref-link",
                $skinDescription: self.$skin + "-ref-link-desc",
                $format: self.$item.$format,
                $button: self.$item.$button
            }, self.boxParent);
        }
    },
    _createValueContainer: function(){
        this.$$valueSlot = this.$$dataValue = this.$$item;
    },
    clickLookUp: function(){
        /*
         var article = field.getArticle();
         document.controller.loadRepresentation(article, field.$field.$links.$lookup.$url, function($itemPage){
         $itemPage.$$container = $("<div/>");
         $itemPage.$displayTarget = "modal";
         field.lookupPage = document.itemFactory.loadPage($itemPage);
         field.lookupPage.onClose = function(){
         field.lookupPage.$$container.remove();
         document.controller.disposeObject(field.lookupPage);
         field.lookupPage = null;
         return false;
         };
         field.lookupPage.onSelectRecord = function(selectedRecords){
         var $result = field.$field.$links.$lookup.$result;
         var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
         field.setDataValue($result ? record.dataset[$result] : record.dataset);
         field.focus();
         field.notifyChange(field.currentValue); //currentValue updated by setValue
         field.lookupPage.onClose();
         return false;
         };
         });
         */
    }
});
