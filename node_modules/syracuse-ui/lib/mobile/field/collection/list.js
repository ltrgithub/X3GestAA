"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var Pager = require("./pager").Pager;
var fieldHelper = require('syracuse-ui/lib/mobile/field/fieldHelper');
var RawList = require("syracuse-ui/lib/common/field/collection/list").RawList;


var ReferenceListBuilder = require("./referenceListBuilder").Builder;
var SingleFieldListBuilder = require("./singleFieldListBuilder").Builder;
var CardListBuilder = require("./cardListBuilder").Builder;

function List(){
}

exports.List = helpers.defineClass(List, RawList, {
    createBuilder: function(){
        if (this.$field.$item.$type == "application/x-reference") {
            this.builder = new ReferenceListBuilder();
        }
        else {
            if (this.$field.$item.$type == "application/x-string") {
                this.builder = new SingleFieldListBuilder();
            }
            else {
                this.builder = new CardListBuilder();
            }
        }
        this.builder.list = this;
        this.builder.initialize();
    },
    _initializeBox: function(){
        fieldHelper.setTheme(this);
        this.createBuilder();
        RawList.prototype._initializeBox.call(this);
    },
    applyActionLinkChange: function(resources, record){
        RawList.prototype.applyActionLinkChange.call(this, resources, record);
        if (resources || record) {
            var self = this;
            self.menusFacade.boxes.forEach(function(menus){
                menus.refreshListView();
            });
        }
    },
    appendArticleMenus: function($$container){
        return document.itemFactory.load($("<div/>").appendTo($$container), {
            $category: "links",
            $theme: this.$theme.$menus,
            $format: "button",
            $button: {
                $inline: true
            }
        }, this);
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        this.applyHiddenState(metaData);
        if (metaData.$width) {
            this.$$value[0].style.paddingRight = {
                fit: null,
                small: "75%",
                medium: "50%",
                large: "25%"
            }[this.$item.$width = metaData.$width];
        }
        if ((onAuthoring !== false) && metaData.$isTopLabelAlignment !== undefined) {
            var itemCss = this._makeSkinField();
            var titleCss = this._makeSkinField("-title");
            var valueCss = this._makeSkinField("-value");
            this.$item.$isTopLabelAlignment = metaData.$isTopLabelAlignment;
            var dom = this.$$item[0];
            dom.className = dom.className.replace(itemCss, this._makeSkinField());
            if (this.$$title) {
                dom = this.$$title[0];
                dom.className = dom.className.replace(titleCss, this._makeSkinField("-title"));
            }
            dom = this.$$value[0];
            dom.className = dom.className.replace(valueCss, this._makeSkinField("-value"));
        }
        if (this.$$title) {
            var dom = this.$$title[0];
            if (metaData.$isRightTextLabelAlignment !== undefined) {
                dom.style.textAlign = (this.$item.$isRightTextLabelAlignment = metaData.$isRightTextLabelAlignment) ? "right" : "left";
            }
            if (metaData.$isTitleHidden !== undefined) {
                dom.style.display = (this.$item.$isTitleHidden = metaData.$isTitleHidden) ? "none" : "";
            }
        }
    }
});
