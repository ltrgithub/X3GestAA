"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawListBuilder = require("syracuse-ui/lib/common/field/collection/rawListBuilder").RawListBuilder;
var localize = require('syracuse-ui/lib/common/controller/localize').list;
var Pager = require("./pager").Pager;
var CardRecord = require('./cardRecord').CardRecord;


function CardListBuilder(){
}

exports.Builder = helpers.defineClass(CardListBuilder, RawListBuilder, {
    initialize: function(){
        this.RecordClass = CardRecord;
    },
    drawBuilder: function(){
        var self = this;
        var list = self.list;
        list.$skin = list.$item.$skin || "s-grid";
        
        list.appendArticleMenus(list.$$dataValue);
        if (!list.$item.$isPagerHidden) {
            (list._pager = new Pager()).load(list);
        }
        list._body = document.createElement("ul");
        list._body.setAttribute("data-inset", true);
        list._body.setAttribute("data-theme", list.$theme.$item || document.site.$item.$themes.$default.$item);
        list._body.style.display = "none";
        list.$$dataValue[0].appendChild(list._body);
        
        this.$cardview = (typeof(list.$item.$cardview) === "object") ? list.$item.$cardview : {
            $layout: {
                $items: list.$item.$layout.$items
            }
        };
        this.$cardview.$category = "block";
        this.$cardview.$isBodyTransparent = true;
        
        list.applyDesignMetaData(list.$item, false);
        list.boxParent.getArticle().bind(list, list.$item.$bind);
        self.refreshListView();
        list._body.style.display = "";
        list._$$body = $(list._body);
    },
    refreshListView: function(){
        if (this.list.getPage().$isjqmPage) {
            document.site.refreshJQMPlugin(this.list._$$body, "listview");
        }
    },
    onAfterDataBinding: function(){
        if (this.list._pager) {
            this.list._pager.draw();
        }
        this.refreshListView();
    }
});
