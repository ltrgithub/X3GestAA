"use strict";
var helpers = require('syracuse-core/lib/helpers');
var localize = require('syracuse-ui/lib/common/controller/localize').list;
var RawListBuilder = require("syracuse-ui/lib/common/field/collection/rawListBuilder").RawListBuilder;
var ReferenceRecord = require('./referenceRecord').ReferenceRecord;

function ReferenceListBuilder(){
}

exports.Builder = helpers.defineClass(ReferenceListBuilder, RawListBuilder, {
    initialize: function(){
        this.list.$item.$selectMode = "multi";
        this.RecordClass = ReferenceRecord;
		RawListBuilder.prototype.initialize.call(this);
    },
    appendRecord: function(options){
        options.record = {
            $uuid: options.$recordIndex,
            $singleField: options.record
        };
        options.$prototype = {
            $properties: {
                $singleField: this.list.$prototype.$item
            }
        };
        return RawListBuilder.prototype.appendRecord.call(this, options);
    },
    /*_bindRecordSelectors: function(){
        var self = this;
        self.list.$$item.delegate(".s-list-selector,.s-list-selector-all", "click", function(event){
            event.stopPropagation();
            var $$selector = $(this);
            var selected = self.list.recordSelector.$selectMode == "button" || $$selector.is(":checked");
            if ($$selector.hasClass("s-list-selector-all")) {
                self.list.recordSelector.records = {};
                Object.keys(self.list.dataset).forEach(function(uuid){
                    self.list.recordSelector.select(uuid, selected);
                    
                });
            }
            else {
                var uuid = ($$selector.is("[data-s-record]") ? $$selector : $$selector.closest("[data-s-record]")).attr("data-s-record");
                if (self.list.$item.$selectMode != "multi" && self.list.recordSelector.uuid) {
                    self.list.recordSelector.select(self.list.recordSelector.uuid, false);
                }
                self.list.recordSelector.select(self.list.recordSelector.uuid = uuid, selected);
            }
            var page = self.list.getPage();
            if (page.onSelectRecord) {
                page.onSelectRecord(self.list.recordSelector.records);
            }
        });
    },*/
    drawBuilder: function(){
        this.list.$skin = this.list.$item.$skin || "s-references";
        this.appendArticleMenus();
        this._body = document.createElement("div");
        this._body.className = this.list.$skin + "-body";
        this.list.$$dataValue.append(this._body);
        
        this.list.applyDesignMetaData(this.list.$item, false);
        this.list.boxParent.getArticle().bind(this.list, this.list.$item.$bind);
    },
    appendArticleMenus: function(){
        var self = this;
        var menus = self.list.appendArticleMenus(self.list.$$dataValue);
        if (self.list.$isEditMode) {
            menus.addMenuItem({
                $bind: "$linkRecords",
                $title: localize.link,
                $category: "link"
            }).onMenuClick = function(){
                self.list.currentSelection = null;
                /* document.controller.loadRepresentation(self.list, (self.list.$prototype.$item.$thumb || self.list.$prototype.$item).$links.$select.$url, function($itemPage){
                 $itemPage.$$container = $("<div/>").appendTo(self.list.$$dataValue);
                 $itemPage.$dialogMode = "modal";
                 self.lookupPage = document.itemFactory.loadPage($itemPage);
                 self.lookupPage.appendOkButton();
                 self.lookupPage.onClose = function(){
                 self.lookupPage.$$container.remove();
                 document.controller.disposeObject(self.lookupPage);
                 self.lookupPage = null;
                 return false;
                 };
                 self.lookupPage.onSelectRecord = function(selectedRecords){
                 self.list.currentSelection = selectedRecords;
                 }, self.lookupPage.onValidate = function(page){
                 var $index = Object.keys(self.list.dataset).length;
                 if (self.list.currentSelection) {
                 var records = Object.keys(self.list.currentSelection).map(function($uuid){
                 return {
                 $uuid: $uuid,
                 $index: ++$index
                 };
                 });
                 if (records.length > 0) {
                 document.controller.notifyChange(self.list.getArticleParent(), self.list.$item.$bind, records);
                 }
                 }
                 self.lookupPage.onClose();
                 return false;
                 };
                 });*/
                return false;
            };
            
        }
    }
});
