"use strict";
var helpers = require('syracuse-core/lib/helpers');
function Pager(){
}

exports.Pager = exports.Pager = helpers.defineClass(Pager, null, {
    onPageChange: function($$page){
        var self = this;
        var page = parseInt($$page, 10);
        var pageTotal = Math.ceil(self.list.$totalResults / self.list.$itemsPerPage);
        var newPage = Math.max(1, Math.min(page, pageTotal));
        self.list.fetch({
            startIndex: ((newPage - 1) * self.list.$itemsPerPage) + 1
        });
        setTimeout(function(){
            self.list.builder.refreshListView();
        }, 200);
        return false;
    },
    load: function(list){
        var self = this;
        self.list = list;
        self._$$item = $("<div/>").addClass("s-pager").appendTo(list.$$dataValue);
        self._$$item.delegate("a[data-s-page]", "click", function(event){
            return self.onPageChange($(this).attr("data-s-page"));
        }).delegate("li", "click", function(event){
            return self.onPageChange($(this).attr("value"));
        });
    },
    _appendLink: function(value, text){
        return $("<li>").addClass("s-pager-nav").attr("value", value).text(text || value);
    },
    draw: function(){
        this._$$item.empty();
        var self = this;
        var localize = document.controller.localize.list.pager;
        var $$range = $("<label/>").addClass("s-pager-range");
        if (self.list.$totalResults) {
            $$range.appendTo($("<div/>").appendTo(self._$$item));
            var pageTotal = Math.ceil(this.list.$totalResults / this.list.$itemsPerPage);
            var currentPageIndex = Math.ceil(this.list.$startIndex / this.list.$itemsPerPage);
            if (pageTotal <= 1) {
                $$range.text(this.list.$totalResults + " " + localize.totalRecords);
            }
            else {
                var lastRecordIndex = Math.min((self.list.$startIndex + self.list.$itemsPerPage) - 1, self.list.$totalResults);
                $$range.text(self.list.$startIndex + " - " + lastRecordIndex + " " + localize.itemOf + " " + self.list.$totalResults);
                var $$group = $("<ul>").addClass("s-pager-nav-container");
                var start = 1;
                var numLinkMax = 2;
                if (currentPageIndex > numLinkMax) {
                    var reminder = (currentPageIndex % numLinkMax);
                    start = (reminder == 0) ? (currentPageIndex - numLinkMax) + 1 : (currentPageIndex - reminder) + 1;
                }
                var end = (start + numLinkMax) - 1;
                
                end = Math.min(end, pageTotal);
                
                if (start > 1) {
                    $$group.append(self._appendLink(1)).append(self._appendLink((start - 1), "..."));
                }
                for (var page = start; page <= end; page++) {
                    var $$button = self._appendLink(page);
                    $$button.toggleClass('s-pager-nav-fake-hover', false);
                    if (page == currentPageIndex) {
                        $$button.toggleClass('s-pager-nav-fake-hover', true);
                    }
                    $$group.append($$button);
                }
                if (end < pageTotal) {
                    $$group.append(self._appendLink(end + 1, "...")).append(self._appendLink(pageTotal));
                }
                
                self._appendServerStep({
                    $bind: "$previous",
                    $icon: {
                        $name: "arrow-l",
                        $position: "notext"
                    },
                    $title: "<" + localize.prev
                });
                
                $$group.appendTo($("<div class='s-pager-item'/>").appendTo(self._$$item));
                
                self._appendServerStep({
                    $bind: "$next",
                    $icon: {
                        $name: "arrow-r",
                        $position: "notext"
                    },
                    $title: localize.next + ">"
                });
            }
        }
        else {
            this._appendServerStep({
                $bind: "$first",
                $title: localize.first
            });
            this._appendServerStep({
                $bind: "$previous",
                $icon: {
                    $name: "arrow-l",
                    $position: "notext"
                },
                $title: "<" + localize.prev
            });
            this._appendServerStep({
                $bind: "$next",
                $icon: {
                    $name: "arrow-r",
                    $position: "notext"
                },
                $title: localize.next + ">"
            });
            this._appendServerStep({
                $bind: "$last",
                $title: localize.last
            });
        }
        //self._$$item.css("display", (self.list.$totalResults > 0) ? "" : "none");
    },
    _appendServerStep: function($step){
        var self = this;
        document.itemFactory.load($("<div class='s-pager-item'/>").appendTo(self._$$item), {
            $category: "link",
            $format: "button",
            $icon: $step.$icon,
            $bind: $step.$bind,
            $title: $step.$title,
            $skin: "s-pager-link"
        }, self.list.getPage()).onMenuClick = function(){
            var $url = this.$url;
            setTimeout(function(){
                self.list.fetch({}, {
                    $url: $url
                });
                setTimeout(function(){
                    self.list.builder.refreshListView();
                }, 200);
            }, 100);
            return false;
        };
    },
    dispose: function(){
        if (this._$$item) {
            this._$$item.undelegate();
        }
        delete this.list;
    }
});


