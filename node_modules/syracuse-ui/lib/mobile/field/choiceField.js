"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ChoiceField = require('syracuse-ui/lib/common/field/choiceField').ChoiceField;
var fieldHelper = require('./fieldHelper');

function MobileComboChoice(){
}

exports.MobileComboChoice = helpers.defineClass(MobileComboChoice, ChoiceField, {
    loadBox: function(){
        fieldHelper.onLoadBox(ChoiceField, this, "selectmenu", function(field){
            if (field.$isEditMode) {
                field.$$input[0].setAttribute("data-overlay-theme", field.$theme.$overlay);
            }
        });
    },
    setDescription: function(){
    },
    setHelp: function(){
    },
    setDataValue: function(value){
        this.$selectedEnum = this.$listSelection = this.findEnum(value);
        var $title = this.$selectedEnum ? this.$selectedEnum.$title : "";
        if (this.$isEditMode) {
            if (this.currentValue && this.currentValue != value) {
                var $prevEnum = this.findEnum(this.currentValue);
                this.$$inputValue.find("option[value='" + $prevEnum.$index + "']").attr("checked", false);
            }
            this.currentValue = value;
            if (this.$selectedEnum) {
                this.$$inputValue.find("option[value='" + this.$selectedEnum.$index + "']").attr("selected", true);
            }
            if (this.getPage().$isjqmPage) {
                document.site.refreshJQMPlugin(this.$$input, "selectmenu");
            }
        }
        else {
            this.$$textValue.text($title);
        }
        
    },
    getInputValue: function(){
        return this.$selectedEnum ? this.$selectedEnum.$value : null;
    },
    render: function(){
        var self = this;
        self.$enum = self.$field.$value.$constraints.$enum;
        if (this.$isEditMode) {
            self.$$inputValue = self.$$input = $("<select data-native-menu='false'/>").appendTo(self.$$item);
            if (self.inputId) {
                self.$$input.attr("id", self.inputId);
            }
            self.$enum.forEach(function($enum, index){
                var $$item = $("<option/>").attr("value", index).append($enum.$title);
                if (self.currentValue == $enum.$value) {
                    $$item.attr("selected", true);
                }
                self.$$input.append($$item);
                
            });
            self.$$item.children(".s-field-edit-value").remove();
        }
    },
    _createValueContainer: function(){
        if (this.$isEditMode) {
            this.domValueSlot = (this.$$inputValue = this.$$dataValue = this.$$item)[0];
        }
        else {
            ChoiceField.prototype._createValueContainer.call(this);
        }
    }
});

function MobileRadioChoice(){
}

exports.MobileRadioChoice = helpers.defineClass(MobileRadioChoice, ChoiceField, {
    loadBox: function(){
        fieldHelper.onLoadBox(ChoiceField, this, "checkboxradio", function(field){
            if (field.$isEditMode) {
                if (field.getPage().$isjqmPage) {
                    field.$$fieldset.controlgroup({
                        excludeInvisible: false
                    });
                }
            }
        });
    },
    getInputValue: function(){
        var index = this.$$fieldset.find("input").filter(":checked").val();
        return (index == null) ? null : this.$enum[index].$value;
    },
    setDataValue: function(value){
        var self = this;
        var $isjqmPage = self.getPage().$isjqmPage;
        self.$selectedEnum = self.findEnum(value);
        var $title = self.$selectedEnum ? self.$selectedEnum.$title : "";
        if (self.$isEditMode) {
            if (self.currentValue && self.currentValue != value) {
                var $prevEnum = self.findEnum(self.currentValue);
                var $$prev = self.$$inputValue.find("input[value='" + $prevEnum.$index + "']").attr("checked", false);
                if (self.$isjqmField) {
                    $$prev.checkboxradio("refresh");
                }
                if ($isjqmPage) {
                    document.site.refreshJQMPlugin($$prev, "checkboxradio");
                }
            }
            self.currentValue = value;
            if (self.$selectedEnum) {
                var $$new = self.$$inputValue.find("input[value='" + self.$selectedEnum.$index + "']").attr("checked", true);
                if ($isjqmPage) {
                    document.site.refreshJQMPlugin($$new, "checkboxradio");
                }
            }
            
            // refresh all other input checkbox
            if ($isjqmPage) {
                var indexes = [];
                self.$enum.forEach(function(elt){
                    indexes.push(self.findEnum(elt.$value).$index);
                })
                indexes.forEach(function(i){
                    if (self.$selectedEnum && self.$selectedEnum.$index && i != self.$selectedEnum.$index) {
                        var $$checkbox = self.$$inputValue.find("input[value='" + i + "']").attr("checked", false);
                        if (self.$isjqmField) {
                            $$checkbox.checkboxradio("refresh");
                        }
                        document.site.refreshJQMPlugin($$checkbox, "checkboxradio");
                    }
                });
            }
        }
        else {
            self.$$textValue.text($title);
        }
    },
    render: function(){
        var self = this;
        self.$enum = self.getDataType().$constraints.$enum;
        if (self.$isEditMode) {
            self.$$inputValue = self.$$dataValue = self.$$item;
            var $groupName = document.controller.generateUUID();
            //self.$$fieldset = $("<fieldset data-role='controlgroup'" + (self.$item.halign ? 'data-type="horizontal"' : "") + "/>").appendTo(self.$$value);
            //self.$$fieldset = $("<fieldset data-role='controlgroup' data-type='horizontal'/>").appendTo(self.$$value);
            self.$$fieldset = $("<fieldset data-role='controlgroup' data-type='horizontal'/>").appendTo(self.$$inputValue);
            self.$$fieldset.bind("change", function(elt){
                return false;
            });
            if (self.$$title) {
                self.$$title = $("<legend/>").appendTo(self.$$fieldset).append(self.$$title);
            }
            self.$enum.forEach(function($enum, index){
                var id = $groupName + index;
                var $$input = $("<input type='radio'/>").attr("id", id).attr("name", $groupName).val(index);
                var $$title = $("<label/>").attr("for", id).text($enum.$title);
                self.$$fieldset.append($$input).append($$title);
            });
            self.$$item.children(".s-field-edit-value").remove();
            
        }
    },
    setState: function(state){
        ChoiceField.prototype.setState.call(this, state);
        if (state.$isDisabled !== undefined) {
            this.$$dataValue.find("input").attr("disabled", state.$isDisabled);
        }
    }
});
