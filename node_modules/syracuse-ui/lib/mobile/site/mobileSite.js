"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawSite = require("syracuse-ui/lib/common/site/rawSite").RawSite;
var Popup = require('./popup').Popup;

function MobileSite(){
}

exports.MobileSite = helpers.defineClass(MobileSite, RawSite, {
    notifyRequestSurvey: function(pendingRequests){
    },
    refreshJQMPlugin: function($$item, pluginName){
        var plugin = $$item.data(pluginName);
        if (plugin) {
            $$item[pluginName]("refresh");
        }
        else {
            $$item[pluginName]();
        }
    },
    drawBox: function(){
        this.$$body = $("<div/>").appendTo(this.$$container);
        document.controller.startNavigation();
        this.$$container.show();
        this.appendDiagnoseViewer(this.$$container, this);
    },
    onMainPageChange: function($itemPage){
        var self = this;
        self._disposeMainPage();
        if (this._diagnoseViewer) {
            this._diagnoseViewer._emptyBody();
        }
        
        var $$pagesToRemove = this.$$container.find('div.ui-page');
        
        
        $itemPage.boxParent = null;
        $itemPage.$$container = document.site.$$container;
        if (self.prevPage && self.prevPage.$$item) {
            self.prevPage.$$item.remove();
        }
        self.prevPage = self.mainPage;
        self.mainPage = null;
        self.mainPage = document.itemFactory.loadPage($itemPage);
        $.mobile.changePage(self.mainPage.$$item, {
            transition: "none",
            reverse: false
        });
        
        $$pagesToRemove.remove(); // remove from DOM
        if (this.$$container.find('div[id="s-diagnose-viewer-core"]').length == 0) {
            document.site.appendDiagnoseViewer(this.$$container, this);
        }
        
        
        self.mainPage.$isjqmPage = true;
        self.mainPage.applyChange({
            $links: self.$prototype.$links
        });
        self.updateDocumentTitle();
        return this.mainPage;
    },
    _disposeMainPage: function(){
        var prev = this.mainPage;
        if (prev && prev.externalAdapter) {
            prev.externalAdapter.releaseMainPage({
                mainPage: prev,
                doEvent: function(){
                    setTimeout(function(){
                        document.controller.disposeObject(prev);
                    }, 10);
                }
            });
        }
    },
    updateDocumentTitle: function(){
        var title = this.mainPage.getTitle();
        if (title) {
            this.mainPage.$$item.attr("data-title", title);
            document.title = title;
        }
    },
    onNotifyRecordChange: function(value, binding){
        if (binding == "search") {
            this.dataset[binding] = value;
            document.controller.executeMenu(this.menuItems["$searchLink"][0]);
        }
    },
    registerPopups: function(popup){
        if (!this.popups) {
            this.popups = {}
        }
        this.popups[document.controller.generateUUID()] = popup;
    },
    disposePopups: function(){
        document.controller.disposeObject(this.popups);
        delete this.popups;
    },
    backToMainPage: function(){
        var self = this;
        setTimeout(function(){
            self.disposePopups();
            setTimeout(function(){
                $.mobile.changePage(document.site.mainPage.$$item, {
                    transition: "none",
                    changeHash: false
                });
            }, 200);
        }, 10);
        return false;
    }
});

exports.load = function($item, $prototype){
    var site = (new MobileSite()).loadSite({
        $item: $item,
        $prototype: $prototype,
        widgetsLibrary: require('./widgetsLibrary'),
        messageBoxClass: require('./messageBox').MessageBox,
        diagnoseViewerClass: require('./diagnoseViewer').MobileDiagnoseViewer
    });
    $.mobile.initializePage();
    return site;
};
//diagnoseViewerClass: require('./diagnoseViewer').MobileDiagnoseViewer
