"use strict";
var MobileMenuItem = require('syracuse-ui/lib/mobile/article/menuItem').MobileMenuItem;
var box = require('syracuse-ui/lib/mobile/article/box');
var datetimeField = require('../field/datetimeField');
var choiceField = require('../field/choiceField');
var binaryField = require('../field/binaryField');
var alphaNumField = require('../field/alphaNumField');
var referenceField = require('../field/referenceField');
var testFactory = require('../tests/testFactory');

var _fieldTypes = {
    "application/x-choice$combo": choiceField.MobileComboChoice,
    "application/x-choice$radios": choiceField.MobileRadioChoice,
    "application/x-date": datetimeField.MobileDateTime,
    "application/x-time": datetimeField.MobileDateTime,
    "application/x-datetime": datetimeField.MobileDateTime,
    "application/x-binary": binaryField.MobileImage,
    "image": binaryField.MobileImage,
    "application/x-boolean": require('../field/booleanField').MobileBoolean,
    "application/x-integer": alphaNumField.MobileNumeric,
    "application/x-decimal": alphaNumField.MobileNumeric,
    "application/x-real": alphaNumField.MobileNumeric,
    "application/x-password": alphaNumField.MobilePassword,
    "application/x-string$text": alphaNumField.MobileText,
    "application/x-string$phone": alphaNumField.MobilePhone,
    "application/x-string$email": alphaNumField.MobileEmail,
    "application/x-string$textarea": alphaNumField.MobileTextArea,
    "application/x-collection": require("../field/collection/list").List,
    "application/x-reference": require('../field/referenceField').MobileReference,
    "application/x-cube": require("../field/collection/list").List,
    "application/x-portlet": require('../field/portlet/portletField').MobilePortletField
};

exports.layouts = {
    columns: require("syracuse-ui/lib/common/article/layouts/columnsLayout").ColumnsLayout,
    side: require("syracuse-ui/lib/common/article/layouts/sideLayout").SideLayout,
    stack: require("syracuse-ui/lib/common/article/layouts/stackLayout").StackLayout,
    tabs: require("syracuse-ui/lib/mobile/article/layouts/tabsLayout").MobileTabsLayout
};

exports.defaultPageCategory = require('syracuse-ui/lib/mobile/article/page').MobilePage;

exports.categories = {
    tests: {
        create: function($item){
            return new testFactory[$item.$format]();
        }
    },
    section: {
        create: function($item){
            var section = new box.MobileBox();
            section.$skinLevel = "h1";
            section.$authoringLevel = "section";
            section.$htmlTag = "section";
            section.$theme = document.site.$item.$themes.$section;
            return section;
        }
    },
    sectionDashboard: {
        create: function($item){
            var section = new box.MobileBox();
            section.$skinLevel = "h1";
            section.$authoringLevel = "section";
            section.$htmlTag = "section";
            section.$theme = document.site.$item.$themes.$sectionDashboard;
            return section;
        }
    },
    block: {
        create: function($item){
            var block = new box.MobileBox();
            block.$theme = "c"
            block.$theme = document.site.$item.$themes.$block;
            return block;
        }
    },
    links: {
        create: function(){
            return new box.MobileMenus();
        }
    },
    link: {
        create: function(){
            return new MobileMenuItem();
        }
    },
    field: {
        create: function($item, boxParent){
            var $field = $item.$field || boxParent.getArticle().$prototype.$[$item.$bind];
            var field;
            if ($field) {
                var $class = $field.$type;
                switch ($class) {
                    case "application/x-string":
                        $class += ($field.$format || "$text");
                        break;
                    case "application/x-choice":
                        var $format = $field.$format || $item.$format;
                        if ($item.$inplace || $item.$filterMode || $format == undefined && ($field.$value.$constraints.$enum.length > ($item.$radiosMax || 4))) {
                            $format = "$combo";
                        }
                        $class += ($format || "$radios");
                        break;
                }
//                if ($class == "application/x-choice$radios") {
//                    $class = "application/x-choice$combo";
//                }
                if (!field) {
                    var fieldClass = _fieldTypes[$class];
                    if (fieldClass) {
                        (field = new fieldClass()).$field = $field;
                    }
                }
                if (!field) {
                    console.log("field type unknow:" + $item.$bind + ($field.$type || ""));
                }
            }
            else {
                console.log($item.$bind + " is defined in Layout but not in proto");
            }
            return field;
        }
    }
};
