"use strict";
var MobileMenuItem = require('syracuse-ui/lib/mobile/article/menuItem').MobileMenuItem;
var MobileMenus = require('syracuse-ui/lib/mobile/article/mobileMenus').MobileMenus;
var MobileSectionBlock = require('syracuse-ui/lib/mobile/article/mobileSectionBlock').MobileSectionBlock;
var datetimeField = require('../field/datetimeField');
var choiceField = require('../field/choiceField');
var binaryField = require('../field/binaryField');
var alphaNumField = require('../field/alphaNumField');
var referenceField = require('../field/referenceField');
var testFactory = require('../tests/testFactory');
var mobilePanel = require('../site/mobilePanel').MobilePanel;
var MobileVignetteField = require('../field/vignette/vignetteField').MobileVignetteField;

var _fieldTypes = {
    "application/x-choice$combo": choiceField.MobileComboChoice,
    "application/x-choice$radios": choiceField.MobileRadioChoice,
    "application/x-date": datetimeField.MobileDateTime,
    "application/x-time": datetimeField.MobileDateTime,
    "application/x-datetime": datetimeField.MobileDateTime,
    "application/x-binary": binaryField.MobileImage,
    "image": binaryField.MobileImage,
    "application/x-boolean": require('../field/booleanField').MobileBoolean,
    "application/x-integer": alphaNumField.MobileNumeric,
    "application/x-decimal": alphaNumField.MobileNumeric,
    "application/x-real": alphaNumField.MobileNumeric,
    "application/x-password": alphaNumField.MobilePassword,
    "application/x-string$text": alphaNumField.MobileText,
    "application/x-string$phone": alphaNumField.MobilePhone,
    "application/x-string$email": alphaNumField.MobileEmail,
    "application/x-string$textarea": alphaNumField.MobileTextArea,
    "application/x-collection": require("../field/collection/list").List,
    "application/x-reference": require('../field/referenceField').MobileReference,
    "application/x-cube": require("../field/collection/list").List,
    "application/x-vignette": MobileVignetteField,
    "application/x-portlet": MobileVignetteField
};

var _layout = require("syracuse-ui/lib/common/article/layouts/layout").Layout;
exports.layouts = {
    columns: require("syracuse-ui/lib/common/article/layouts/columnsLayout").ColumnsLayout,
    side: _layout,
    stack: _layout,
    tabs: require("syracuse-ui/lib/mobile/article/layouts/tabsLayout").MobileTabsLayout
};

exports.defaultPageCategory = require('syracuse-ui/lib/mobile/article/page').MobilePage;
exports.pageCategories = {
    dialogpage: require('syracuse-ui/lib/mobile/article/dialogPage').DialogPage
};

exports.categories = {
    tests: {
        create: function($item){
            return new testFactory[$item.$format]();
        }
    },
    panel: {
        create: function($item){
            return new mobilePanel();
        }
    },
    section: {
        create: function($item){
            var item = new MobileSectionBlock();
            item.$authoringLevel = "section";
            return item;
        }
    },
    block: {
        create: function(){
            var item = new MobileSectionBlock();
            item.$authoringLevel = "block";
            return item;
        }
    },
    links: {
        create: function(){
            return new MobileMenus();
        }
    },
    link: {
        create: function(){
            return new MobileMenuItem();
        }
    },
    field: {
        create: function($item, boxParent){
            var $field = $item.$field || boxParent.getArticle().$prototype.$[$item.$bind];
            var field;
            if ($field) {
                var $class = $field.$type;
                switch ($class) {
                    case "application/x-string":
                        $class += ($field.$format || "$text");
                        break;
                    case "application/x-choice":
                        var $format = $field.$format || $item.$format;
                        if ($item.$inplace || $item.$isFilterMode || $format == undefined && ($field.$value.$constraints.$enum.length > ($item.$radiosMax || 4))) {
                            $format = "$combo";
                        }
                        $class += ($format || "$radios");
                        break;
                }
                //                if ($class == "application/x-choice$radios") {
                //                    $class = "application/x-choice$combo";
                //                }
                if (!field) {
                    var fieldClass = _fieldTypes[$class];
                    if (fieldClass) {
                        (field = new fieldClass()).$field = $field;
                    }
                }
                if (!field) {
                    console.log("field type unknow:" + $item.$bind + ($field.$type || ""));
                }
            }
            else {
                console.log($item.$bind + " is defined in Layout but not in proto");
            }
            return field;
        }
    }
};
