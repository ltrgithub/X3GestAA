"use strict"

var helpers = require("syracuse-core/lib/helpers");
var pluralize = helpers.string.pluralize;

function _isQueryFacet(facet) {
	return ["$query", "$lookup", "$select", "$bulk", "$search"].indexOf(facet) >= 0;
}

function _hasCapability(entity, cap) {
	return (entity.$capabilities || "").indexOf(cap) >= 0;
}

function DataModel(contract) {
	this._contract = contract;
	this._plurals = null;
	this.$workingCopies = {};
}

exports.DataModel = helpers.defineClass(DataModel, null, {
	makePlurals: function() {
		var self = this;
		self._plurals = {};
		Object.keys(self._contract.entities).forEach(function(eName) {
			var e = self._contract.entities[eName];
			self._plurals[e.$pluralName || pluralize(eName)] = e;
		});
	},
	pluralToEntity: function(plural) {
		if(!this._plurals) this.makePlurals();
		return this._plurals[plural];
	},
	nameToEntity: function(name) {
		if(!this._plurals) this.makePlurals();
		return this._contract.entities[name];
	},
	getRepresentation: function(name) {
		return this._contract.representations[name];
	},
	getArticle: function(reprName, facet) {
		var r = this.getRepresentation(reprName);
		if(r && r[facet] && r[facet].$layout)
			return {
				$layout: r[facet].$layout
			}
		else
			return null;
	},
	getPrototype: function(entity, facet, representationName) {
		var proto = {
			$type: "application/json",
			$properties: {}
		};
		if(entity.$title) proto.$title = entity.$title;
		if(entity.$value) proto.$value = entity.$value;
		//
		entity.$properties && Object.keys(entity.$properties).forEach(function(propName) {
			var prop = entity.$properties[propName];
			var r = proto.$properties[propName] = {};
			if(prop.$enum) {
				r.$type = "application/x-choice",
				r = r.$value = {};
				r.$enum = prop.$enum;
			}
			r.$type = "application/x-" + (prop.$type || "string");
			r.$isMandatory = prop.$isMandatory;
			//
			if(prop.$isArray) {
				r = proto.$properties[propName] = {
					$type: "application/x-array",
					$item: r
				};
				if(prop.$select) {
					r.$links = r.$links || {};
					var l = r.$links.$select = r.$links.$select || {};
					l.$title = prop.$select.$title;
					l.$url = prop.$select.$url;
					if(prop.$select.$filter)
						l.$url += "&where=" + prop.$select.$filter;
					if(prop.$select.$parameters)
						l.$url += "&" + prop.$select.$parameters;
				}
			}
			r.$title = prop.$title;
			r.$description = prop.$description;
			r.$isHidden = prop.$isHidden;
			r.$capabilities = prop.$capabilities;
		});
		entity.$relations && Object.keys(entity.$relations).forEach(function(relName) {
			var rel = entity.$relations[relName];
			var r = proto.$properties[relName] = {
				$title: rel.$title,
				$description: rel.$description,
				$isMandatory: rel.$isMandatory,
				$capabilities: rel.$capabilities
			}
			if(facet !== "$edit") r.$capabilities = "";
			if(rel.$isPlural) {
				r.$type = "application/x-array";
				r.$item = {
					$item: {
						$value: rel.$value,
						$title: rel.$itemTitle,
						$key: rel.$key || "{$uuid}",
						$properties: rel.$properties || {},
						$links: {
							$details: {
								
							}
						}
					},
					$type: rel.$isChild ? "application/x-object" : "application/x-reference"
				}
				r.$item.$links = r.$item.$links || {};
				r.$links = r.$links || {};
				var l = r.$links.$select = r.$links.$select || {};
				l.$url = (rel.$select && rel.$select.$url);
				l.$url = l.$url || ((rel.$baseUrl || "{$baseUrl}") + "/" + rel.$type + "?representation=" + rel.$representation + ".$select");
				if(rel.$select) {
					if(rel.$select.$filter)
						l.$url += "&where=" + rel.$select.$filter;
					if(rel.$select.$parameters)
						l.$url += "&" + rel.$select.$parameters;
				}
			} else {
				r.$type = rel.$isChild ? "application/x-object" : "application/x-reference"
				r.$item = {
					$value: rel.$value,
					$title: rel.$itemTitle,
					$key: rel.$key || "{$uuid}", 
					$properties: rel.$properties || {}
				}
				r.$item.$links = r.$item.$links || {};
				var l = r.$item.$links.$lookup = r.$item.$links.$lookup || {};
				l.$url = (rel.$baseUrl || "{$baseUrl}") + "/" + rel.$type + "?representation=" + rel.$representation + ".$lookup";
				if(rel.$lookup) {
					if(rel.$lookup.$filter)
						l.$url += "&where=" + rel.$lookup.$filter;
					if(rel.$lookup.$parameters)
						l.$url += "&" + rel.$lookup.$parameters;
				}
			}
		});
		//
		if(facet !== "$edit") {
			if(_hasCapability(entity, "edit")) {
				proto.$links = proto.$links || {};
				proto.$links.$edit = {
					// TODO: translate
					$title: "Edit",
					// TODO: manage protocol and url generically
					$url: "excel://" + entity.$pluralName + "('{$uuid}')/$workingCopies?representation=" + entity.$entityName + ".$edit",
					$method: "POST"
				}
			}
			if(_hasCapability(entity, "delete")) {
				proto.$links = proto.$links || {};
				proto.$links.$delete = {
					// TODO: translate
					$title: "Delete",
					// TODO: manage protocol and url generically
					$url: "excel://" + entity.$pluralName + "('{$uuid}')?representation=" + entity.$entityName + ".$detail",
					$method: "DELETE"
				}
			}
		}
		//
		if(entity.$actions) {
			proto.$actions = proto.$actions || {};
			Object.keys(entity.$actions).forEach(function(lName) {
				var a = entity.$actions[lName];
				if(!a.$facets || (a.$facets && a.$facets.indexOf(facet) >= 0))
					proto.$actions[lName] = a;
			});
		}
		if(entity.$links) {
			proto.$links = proto.$links || {};
			Object.keys(entity.$links).forEach(function(lName) {
				var l = entity.$links[lName];
				if(l.$facets && (l.$facets.indexOf(facet) < 0)) return;
				proto.$links[lName] = {
					$title: l.$title,
					$url: l.$url,
					$method: l.$method
				};
			});
		}
		//
		if(_isQueryFacet(facet)) {
			proto = {
				$properties: {
					$resources: {
						$type: "application/x-array",
						$item: proto
					}
				}
			}
			if(entity.$queryLinks) {
				proto.$links = proto.$links || {};
				Object.keys(entity.$queryLinks).forEach(function(lName) {
					proto.$links[lName] = entity.$queryLinks[lName];
				});
			}
		}
		var r = representationName || entity.$entityName;
		//
		var complement = this.getRepresentation(representationName);
		if(complement[facet] && complement[facet].$prototype) {
			helpers.object.extend(proto, complement[facet].$prototype, true, true);
		}
		//
		proto.$article = this.getArticle(representationName, facet);
		return proto;
	},
	applyMeta: function(entity, resource) {
		function _setState(prop, item, pName, state, cb) {
			if(prop[state] && typeof prop[state] === "function") {
				var ip = item.$properties[pName] = item.$properties[pName] || {};
				if(cb)
					cb(ip, prop[state](item));
				else
					ip[state] = prop[state](item);
			}
		}
		var res = resource.$resources || [resource];
		res.forEach(function(item) {
			item.$properties = item.$properties || {};
			Object.keys(entity.$properties || {}).forEach(function(pName) {
				var p = entity.$properties[pName];
				_setState(p, item, pName, "$isDefined", function(p, s) { p.$isHidden = !s; });
				_setState(p, item, pName, "$isDisabled");
				if(p.$applyMeta)
					p.$applyMeta(item);
			});
			Object.keys(entity.$relations || {}).forEach(function(pName) {
				var p = entity.$relations[pName];
				_setState(p, item, pName, "$isDefined", function(p, s) { p.$isHidden = !s; });
				_setState(p, item, pName, "$isDisabled");
				if(p.$applyMeta)
					p.$applyMeta(item);
			});
		});
	},
	getWorkingCopy: function(wcId) {
		return this.$workingCopies[wcId];
	},
	createWorkingCopy: function(entity, reprName, id) {
		var data;
		if(id)
			data = entity.$fetch(id);
		else {
			// create
			data = {
				$uuid: helpers.uuid.generate()
			}
			//
			Object.keys(entity.$properties || {}).forEach(function(pName) {
				var p = entity.$properties[pName];
				if(p.hasOwnProperty("$default"))
					data[pName] = p.$default;
			});
			Object.keys(entity.$relations || {}).forEach(function(pName) {
				var p = entity.$relations[pName];
				if(p.hasOwnProperty("$default"))
					data[pName] = p.$default;
			});
		}
    	this.$workingCopies = this.$workingCopies || {};
    	var wc = helpers.object.clone(data, true);
    	wc.$pluralName = entity.$pluralName;
    	wc.$entityName = entity.$entityName;
    	wc.$trackingId = helpers.uuid.generate();
    	wc.$url = "excel://$workingCopies('" + wc.$trackingId + "')?representation=" + reprName + ".$edit";
		wc.$etag = 1;
    	this.applyMeta(entity, wc);
    	this.$workingCopies[wc.$trackingId] = wc;
    	return wc;
	}
});