"use strict"

// This controller is only used to catch the save event of a document entry to directly
// save content from an active document inside ms word
// Also the controller assigns a default storage are for templates

var helpers = require('syracuse-core/lib/helpers');
var CommonController = require('syracuse-ui/lib/common/controller/controller').Controller;

var storageVolumes = {
		msoMailMergeTemplate: "WORD_TEMPLATE_MAILMERGE",
		msoReportTemplate: "WORD_TEMPLATE_REPORT"
};

function Controller(){
}

exports.Controller = helpers.defineClass(Controller, CommonController, {
	executeMenu: function(menu, record, article, confirmed) {
        var self = this;
        var args = arguments;

		if (menu.$item.$bind === "$save")
		{
	        article = article || menu.article;
	        var repr = self._getRepresentation(article);
			if (storageVolumes[repr])
			{
				self._setVolume(article, storageVolumes[repr]);
			}
		}
		CommonController.prototype.executeMenu.apply(self, args);
	},
    notifyChange: function(article, binding, value) {
        var self = this;
        var notifyArgs = arguments;
        
        if (binding === "$actions") 
        {
            var repr = self._getRepresentation(article);
            if (repr === "msoMailMergeTemplate" || repr == "msoReportTemplate" || repr === "msoWordDocument")
            {
                document.site.wordInterface.publishDocument(
                		article.parseExpression(article.$prototype.$url + "?representation={$representation}.$details"), 
                		article.dataset.description, article.parseExpression(article.get$Properties().content.$url), 
                		function(data, resp) {
                			CommonController.prototype.notifyChange.apply(self, notifyArgs);
                		});
            } 
            else
            {
            	CommonController.prototype.notifyChange.apply(self, notifyArgs);
            }
        }
        else 
        {
            CommonController.prototype.notifyChange.apply(self, notifyArgs);
        }
    },
    _getRepresentation: function(article)
    {
        var repr = ((article && article.dataset.$url) || "").match(/\?.*representation=(.*)\./);
        repr = (repr && repr[1]) || "";
        return repr;
    },
    // Fetch UUID of storage volume from the server and set UI control
	_setVolume: function(article, volumeCode) {
		var self 	= this;
	    function notifyController(article, bind, val) {
	    	CommonController.prototype.notifyChange.apply(self, arguments);
	    };
		
		var field 	= article.boundFields && article.boundFields.volume && article.boundFields.volume[0];
		if (!field)
		{
			return; 
		}
		if (field.currentValue && field.currentValue.$key)
		{
			return;
		}

		var base 	= article.$prototype.$baseUrl;
		var parts 	= base.split("/");
		var host 	= parts.slice(0, 3).join('/');
		
		var url 	= host + "/sdata/syracuse/collaboration/syracuse/storageVolumes" +
							 "?representation=storageVolume.$query" +
							 "&where=(code%20like%20%27%25" +
							 volumeCode + 
							 "%25%27)&startIndex=1&count=1";

		var response = $.ajax({
			type: 'get',
			url: url,
			dataType: 'json',
			async: false
		});

		if (response.status == 200) {
			try {
				var list = JSON.parse(response.responseText);
				var volume = list && list.$resources && list.$resources[0];
				if (volume)
				{
				    field.setDataValue(volume);
				    document.fieldController.notifyChange(field, field.currentValue);
				}
			} catch (e) {
				alert(e);
			}
		}
	}
});
