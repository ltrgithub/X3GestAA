"use strict"

var helpers = require('syracuse-core/lib/helpers');
var page = require('syracuse-ui/lib/common/article/page');
var article = require('syracuse-ui/lib/common/article/article');

function WordReportPage() {
}

exports.WordReportPage = helpers.defineClass(WordReportPage, page.Page, {
    drawBox: function() {
    	var self = this;
    	self.wordLayoutBoxes = new Array();
    	self.createLayout(self.$item, self.$prototype.$, null, self.wordLayoutBoxes);
    },
    createWordTemplate: function(wordInterface) {
    	var self = this;
    	wordInterface.createWordTemplate(self.wordLayoutBoxes);
    },
    onDialogResize: function() {
    },
    applyChange: function(newData, response, requestUrl) {
    },
    dispose: function() {
    },
    createLayout: function(article, prototype, parent, boxes) {
    	// walk layout and build flat list of boxes which contain properties with type information
    	var self = this;
    	
    	var layoutType;
    	var bind;
    	var layoutSubType;
    	var data;
    	var box;
    	var hidden;
    	
    	var items = article.$items || (article.$layout && article.$layout.$items);
    	
    	if (article.$bind && items) {
    		// collection
    		bind = article.$bind; // collection property
    		data = (prototype && bind) ? prototype[bind] : prototype;
    		if (!data || data.$type.indexOf("application/x-collection") < 0)
    		{
    			// Not handled yet
    			console.log("unknown type: " + (data && data.$type) + "(" + bind + ")");
    		}
    		else
    		{
	    		data = data.$item.$;
	    		box = {
	    			$title:  article.$title,
	    			$container: "table"
	    		};
    		}
    	} else if (article.$bind && !items) {
    		// property
    		bind = article.$bind; // property
    		hidden = article.$isHidden || false
    		data = (prototype && bind) ? prototype[bind] : prototype;
    		if (data) {
    			parent.$items = parent.$items || {};
    			parent.$items[bind] = {
    					$type: data.$type,
    					$title: data.$title || bind,
    					$bind: bind,
    					$hidden: hidden
    			};
    		}
    	} else {
    		// container
    		data = prototype;
    		box = {
    				$title:  article.$title,
    				$container: "box"
    		};
    	}
    	items && items.map(function(item) {
    		self.createLayout(item, data, box, boxes);
    	});

    	if (box) {
    		if (box.$title || box.$items)
    			boxes.push(box);
    	}
    }
});
