"use strict"

var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('syracuse-ui/lib/article/rawPage').RawPage;
var article = require('syracuse-ui/lib/article/article');

function MailMergeGrid(page, prototype){
    this.$page = page;
    this.$prototype = prototype;
    this.dataset = {};
}

var MailMergeGrid = helpers.defineClass(MailMergeGrid, article.Article, {
    getArticleParent: function(){
        return this.$page;
    }
});

function MailMergeRecord(mailMergeGrid, prototype){
    this.$grid = mailMergeGrid;
    this.$prototype = prototype;
    this.dataset = {};
}

var MailMergeRecord = helpers.defineClass(MailMergeRecord, article.Article, {
    getArticleParent: function(){
        return this.$grid;
    }
});


function WordPage(){
}

exports.WordPage = helpers.defineClass(WordPage, RawPage, {

    drawBox: function(){
        var $properties = this.get$Properties();
        this.$mailMergeGridPrototype = this.createMailMergeDataPrototype($properties.$resources.$item.$properties, this.$item);
        this.$grid = new MailMergeGrid(this, $properties.$resources);
        this.$grid.$record = new MailMergeRecord(this.$grid, $properties.$resources.$item);
        this.mailMergeData = {
        		columns: [],
        		data: []
        };
    },
    onDialogResize: function(){
    },
    
    applyChange: function(newData, response, requestUrl, wordInterface){
        var self = this;
        var representation = this;
        var proto = representation.get$Properties().$resources.$item.$properties;
        var items = self.$mailMergeGridPrototype;
        var data = self.convertDataTo2DimArray(newData, proto, items);
        
        self.mailMergeData.columns = items;
        for (var i = 0; i < data.length; i++) {
        	self.mailMergeData.data.push(data[i]);
        }
    },
    
    finish: function(wordInterface, requestUrl){
    	wordInterface.createDatasource(this.mailMergeData, requestUrl);
    },
    dispose: function(){
		
    },
    
    createMailMergeDataPrototype: function($prototype, $item){
        var proto = $prototype;
        var _item = $item;
        
        // get to "$resources" layout
        while (_item && _item.$layout && (_item.$bind !== "$resources")) 
            _item = _item.$layout.$items && _item.$layout.$items[0];
        
        if (!_item) 
            return;
        
        // get column list as string array 
        var items = (_item.$layout && _item.$layout.$items) || _item.$items ||
        Object.keys(proto).map(function(prop){
            return {
                $bind: prop
            };
        });
        
        // simplified proto
        return items.map(function(item){
            var protoItem = proto[item.$bind];
            return {
                _name: item.$bind.replace("$", "_"), // escape $ properties
                _orgName: item.$bind, // temporary storage of original name
                _title: protoItem.$title,
                _type: protoItem.$type
            }
        });
    },
    
    convertDataTo2DimArray: function(data, $prototype, $mailMergeGridPrototype){
        var proto = $prototype;
        var items = $mailMergeGridPrototype;
        var self = this;
        //
        
    	function format(expression, res) {
    		res = res || {};
    		var value = expression && expression.replace(/\{(.*?)\}/g, function(match, p1) {
    			return res[p1] || self.$prototype[p1];
    		});

    		return value;
    	}

    	var ret = data.$resources.map(function(res){
            return items.map(function(item){
                var prop = res[item._orgName];
                var propProto = proto[item._orgName];
                var result = {value: "", $type: ""};
                var record = res;
                // manage limited set of types
                switch (item._type) {
                    case "application/x-string":
                    case "application/x-integer":
                    case "application/x-decimal":
                    case "application/x-datetime":
                    case "application/x-date":
                    case "application/x-time":
                    	result.value = prop;
                    	break;
                    case "image":
                    	if (res[item._orgName])
                    		result.$url = format(res[item._orgName].$url , record);
                    	break;
                    case "application/x-boolean":
                        result.value = prop;
                        break;
                    	
                    case "application/x-choice":
                        result.value = prop;
                        propProto.$value.$enum.some(function(element) {
                        	if (element.$value == prop) {
                        		result.value = element.$title;
                        		return true;
                        	}
                        	return false;
                        });
                        break;

                    case "application/x-reference":
                        record = prop;
                        result.value = (record && propProto.$value && self.$grid.$record.parseExpression(propProto.$value, record)) || "";
                        break;
                    default:
                        result.value = "";
                }
                result.value = result.value || "";
                result.$type = item._type;
                return result;
                //
                /*
                if (record && propProto.$links && propProto.$links.$details) 
                    return [result, document.location.protocol + "//" + document.location.host +
                    document.site.$syracuseMainPageUrl +
                    "?url=" +
                    encodeURIComponent(self.$grid.$record.parseExpression(propProto.$links.$details.$url, record))];
                else 
                    return result;
                    */
            });
        });
        return ret;
    },
    setLineCount: function(lineCount){
    },
});

// Called from word when additional data has to be fetched (eg. images)
//ONLY WORKS IN IE. no problem here, since this is only called from IE within word!
window.readBinaryURLContentIE = function(url) {

	var xhr = new XMLHttpRequest();
	var data = {};
	xhr.open('GET', url, false);

	xhr.setRequestHeader("X-Content-Type-Override", "text/plain; charset=x-user-defined");
	xhr.onreadystatechange = function(e) {
	  if (this.readyState == 4 && this.status == 200) {
		  // this.responseText is broken in IE with binary data!
		  data.responseBody = this.responseBody;
	  }
	};
	xhr.send();
	
	// This is a c# byte array!
	return data.responseBody;
};