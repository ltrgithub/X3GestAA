"use strict"

var helpers = require('syracuse-core/lib/helpers');
var page = require('syracuse-ui/lib/common/article/page');
var article = require('syracuse-ui/lib/common/article/article');

function MailMergeGrid(page, prototype) {
    this.$page = page;
    this.$prototype = prototype;
    this.dataset = {};
}

var MailMergeGrid = helpers.defineClass(MailMergeGrid, article.Article, {
    getArticleParent: function() {
        return this.$page;
    }
});

function MailMergeRecord(mailMergeGrid, prototype) {
    this.$grid = mailMergeGrid;
    this.$prototype = prototype;
    this.dataset = {};
}

var MailMergeRecord = helpers.defineClass(MailMergeRecord, article.Article, {
    getArticleParent: function() {
        return this.$grid;
    }
});


function WordPage() {
}

exports.WordPage = helpers.defineClass(WordPage, page.Page, {
	
    drawBox: function() {
        this.$mailMergeGridPrototype = this.createMailMergeDataPrototype(this.$prototype.$.$resources.$item.$, this.$item);
        this.$grid = new MailMergeGrid(this, this.$prototype.$.$resources);
        this.$grid.$record = new MailMergeRecord(this.$grid, this.$prototype.$.$resources.$item);
    },
    onDialogResize: function(){
    },
    
    applyChange: function(newData, response, requestUrl, wordInterface) {
        var self = this;
        var representation = this;
        var proto = representation.$prototype.$.$resources.$item.$;
        var items = self.$mailMergeGridPrototype;
    	var data = self.convertDataTo2DimArray(newData, proto, items);
    	var mailMergeData = {columns: items, data: data};

    	wordInterface.createDatasource(mailMergeData, requestUrl);
    },
    
    dispose: function(){
    },    

    createMailMergeDataPrototype: function($prototype, $item) {
        var proto = $prototype;
        var _item = $item;

        // get to "$resources" layout
        while(_item && _item.$layout && (_item.$bind !== "$resources"))
            _item = _item.$layout.$items && _item.$layout.$items[0];
        
        if(!_item) 
        	return;

        // get column list as string array 
        var items = (_item.$layout && _item.$layout.$items) || _item.$items || 
        	Object.keys(proto).map(
        		function(prop) {
        			return {$bind: prop};
        		}
        	);

        // simplified proto
        return items.map(function(item) {
            var protoItem = proto[item.$bind];
            return {
                _name: item.$bind.replace("$", "_"), // escape $ properties
                _orgName: item.$bind, // temporary storage of original name
                _title: protoItem.$title,
                _type: protoItem.$type
            }
        });
    },
    
    convertDataTo2DimArray: function(data, $prototype, $mailMergeGridPrototype) {
        var proto = $prototype;
        var items = $mailMergeGridPrototype;
        var self = this;
        //
        return data.$resources.map(function(res) {
            return items.map(function(item) {
                var prop = res[item._orgName];
                var propProto = proto[item._orgName];
                var result = "";
                var record = res;
                // manage limited set of types
                switch(item._type) {
                    case "application/x-string":
                    case "application/x-integer":
                    case "application/x-decimal":
                    case "application/x-datetime":
                    case "application/x-date":
                    case "application/x-time":
                    case "application/x-boolean":
                    case "application/x-choice":
                        result = prop; 
                        break;
                    case "application/x-reference":
                        record = prop;
                        result = (record && propProto.$value && self.$grid.$record.parseExpression(propProto.$value, record)) || "";  
                        break; 
                    default:
                        result = "";
                }
                //
                if(record && propProto.$links && propProto.$links.$details)
                    return [result, document.location.protocol + "//" + document.location.host + 
                        document.site.$syracuseMainPageUrl + "?url=" + encodeURIComponent(
                            self.$grid.$record.parseExpression(propProto.$links.$details.$url, record))];
                else
                    return result;
            });
        });
    },
    setLineCount: function(lineCount) {
    },
});

