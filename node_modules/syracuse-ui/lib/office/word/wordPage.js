"use strict";

var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('syracuse-ui/lib/page/rawPage').RawPage;
var article = require('syracuse-ui/lib/article/article');

var lastError;

function MailMergeGrid(page, prototype) {
	this.$page = page;
	this.$prototype = prototype;
	this.dataset = {};
}

var MailMergeGrid = helpers.defineClass(MailMergeGrid, article.Article, {

});

function MailMergeRecord(mailMergeGrid, prototype) {
	this.$grid = mailMergeGrid;
	this.$prototype = prototype;
	this.dataset = {};
}

var MailMergeRecord = helpers.defineClass(MailMergeRecord, article.Article, {

});

function WordPage() {}

exports.WordPage = helpers.defineClass(WordPage, RawPage, {

	drawBox: function() {
		var $properties = this.$prototype.$properties;
		this.$mailMergeGridPrototype = this.createMailMergeDataPrototype($properties.$resources.$item.$properties, this.$item);
		this.$grid = new MailMergeGrid(this, $properties.$resources);
		this.$grid.$record = new MailMergeRecord(this.$grid, $properties.$resources.$item);
		this.mailMergeData = {
			columns: [],
			data: []
		};
	},
	onDialogResize: function() {},

	applyChange: function(newData, response, requestUrl, wordInterface) {
		var self = this;
		var representation = this;
		var proto = representation.$prototype.$properties.$resources.$item.$properties;
		var items = self.$mailMergeGridPrototype;
		var data = self.convertDataTo2DimArray(newData, proto, items);

		self.mailMergeData.columns = items;
		for (var i = 0; i < data.length; i++) {
			self.mailMergeData.data.push(data[i]);
		}
	},

	finish: function(wordInterface, requestUrl) {
		wordInterface.createDatasource(this.mailMergeData, requestUrl);
	},
	dispose: function() {

	},

	createMailMergeDataPrototype: function($prototype, $item) {
		var proto = $prototype;
		var _item = $item;

		// get to "$resources" layout
		while (_item && _item.$layout && (_item.$bind !== "$resources"))
		_item = _item.$layout.$items && _item.$layout.$items[0];

		if (!_item) return;

		// get column list as string array 
		var items = (_item.$layout && _item.$layout.$items) || _item.$items || Object.keys(proto).map(function(prop) {
			return {
				$bind: prop
			};
		});

		// simplified proto
		return items.map(function(item) {
			var protoItem = proto[item.$bind];
			return {
				_name: item.$bind.replace("$", "_"), // escape $ properties
				_orgName: item.$bind, // temporary storage of original name
				_title: protoItem.$title,
				_type: protoItem.$type
			};
		});
	},

	convertDataTo2DimArray: function(data, $prototype, $mailMergeGridPrototype) {
		var proto = $prototype;
		var items = $mailMergeGridPrototype;
		var self = this;
		//

		function format(expression, res) {
			res = res || {};
			var value = expression && expression.replace(/\{(.*?)\}/g, function(match, p1) {
				return res[p1] || self.$prototype[p1];
			});

			return value;
		}

		var ret = data.$resources.map(function(res) {
			return items.map(function(item) {
				var prop = res[item._orgName];
				var propProto = proto[item._orgName];
				var result = {
					value: "",
					$type: "",
					$link: ""
				};
				var record = res;
				// manage limited set of types
				switch (item._type) {
					case "application/x-string":
						if (record && prop && propProto.$format) {
							switch (propProto.$format) {
								case "$email":
									if (prop) {
										result.$link = "mailto:" + prop;
										break;
									}
								case "$phone":
									if (prop) {
										result.$link = "phoneto:" + prop;
										break;
									}
								case "$url":
									if (prop) {
										result.$link = prop;
										break;
									}
							}
						}
						/*
                    	result.value = prop;
                    	if (prop){
                    		if (propProto.$format == "$email"){
                    			result.value = "mailto:" + prop;
                    		}
                    		else if (propProto.$format == "$phone"){
                    			result.value = "phoneto:" + prop;
                    		}
                    	}
                    	break;
                    	*/
					case "application/x-integer":
					case "application/x-decimal":
					case "application/x-datetime":
					case "application/x-date":
					case "application/x-time":
						result.value = prop;
						break;
					case "image":
						if (res[item._orgName]) result.$url = format(res[item._orgName].$url, record);
						break;
					case "application/x-boolean":
						result.value = prop;
						break;

					case "application/x-choice":
						result.value = prop;
						propProto.$value.$enum.some(function(element) {
							if (element.$value == prop) {
								result.value = element.$title;
								return true;
							}
							return false;
						});
						break;

					case "application/x-reference":
						record = prop;
						result.value = (record && propProto.$value && self.$grid.$record.parseExpression(propProto.$value, record)) || "";
						break;
					default:
						result.value = "";
				}

				/*
				// Handle special formatted properties here to eventually overide detail link
				if (propProto.$format){
	                switch (propProto.$format) {
					case "$email":
						if (value) {
							result.$link = "mailto:" + value;
							break;
						}
						
					case "$phone":
						if (value) {
							result.$link = "phoneto:" + value;
							break;
						}
					}
				}
				*/
				result.value = result.value || "";
				result.$type = item._type;
				result.$link = result.$link || "";
				return result;
				//
				/*
                if (record && propProto.$links && propProto.$links.$details) 
                    return [result, document.location.protocol + "//" + document.location.host +
                    document.site.$syracuseMainPageUrl +
                    "?url=" +
                    encodeURIComponent(self.$grid.$record.parseExpression(propProto.$links.$details.$url, record))];
                else 
                    return result;
                    */
			});
		});
		return ret;
	},
	setLineCount: function(lineCount) {},
});