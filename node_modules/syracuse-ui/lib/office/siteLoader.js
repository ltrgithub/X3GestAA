"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Site = require('syracuse-ui/lib/site/site').Site;
var _widgetsLibrary = require('syracuse-ui/lib/site/widgetsLibrary');

var _devices = {
	word: {
		onCreateSite: function(site) {
			_widgetsLibrary.pageCategories.wordmailmerge = require("./wordPage").WordPage;
			_widgetsLibrary.pageCategories.wordreport = require("./wordReportPage").WordReportPage;
			site.agents = {
				createMailMergeDS: {
					saveDSWord: function(article, menu, record) {
						site.wordInterface.attachResourceUrl(record.serviceUrl);
						site.wordInterface.onLogin();
					}
				}
			};
			site._onAfterLogon: function() {
				this.history.start();
				try {
					this.wordInterface.onLogin();
				} catch (e) {}
				this.layoutSlot.style.display = "";
				this.resize();
			};
			var wordInterface = require('msoffice/lib/word/wordInterface').WordInterface;
			site.wordInterface = new wordInterface();
			site.$syracuseMainPageUrl = $item.$syracuseMainPageUrl;
		}
	},
	ppt: {
		onCreateSite: function(site) {
			_widgetsLibrary.pageCategories.ppt_populate_worksheet = require("./pptPage").PptPage;
			site._onAfterLogon = function() {
				this.history.start();
				try {
					this.pptInterface.onLogin();
				} catch (e) {}
				var addinVersion = this.pptInterface.getAddinVersion();
				this.layoutSlot.style.display = "";
				this.resize();
			};
			site._renderHeader: function() {

			};
			var pptInterface = require('msoffice/lib/ppt/pptInterface').PptInterface;
			site.pptInterface = new pptInterface();
			site.$syracuseMainPageUrl = $item.$syracuseMainPageUrl;
		},
	},
	excel: {
		onCreateSite: function(site) {
			_widgetsLibrary.pageCategories.excelreport = require("./excelReportPage").ExcelReportPage;
			site._onAfterLogon = function() {
				syra_site.history.start();
				try {
					this.excelInterface.onLogin();
				} catch (e) {}
				this.layoutSlot.style.display = "";
				this.resize();
			};
			site._renderHeader = function() {

			};
			var excelInterface = require('msoffice/lib/excel/excelInterface').ExcelInterface;
			site.excelInterface = new excelInterface();
			site.$syracuseMainPageUrl = $item.$syracuseMainPageUrl;
		}
	}
};

exports.load = function($item, $prototype) {
	window.syra_store = store;
	window.getStack = function() {
		try {
			var stack = [];
			var f = arguments.callee.caller;
			while (f) {
				var fn = f.toString();
				var fname = fn.substring(fn.indexOf('function') + 8, fn.indexOf('(')) || 'anonymous';
				stack.push(fname);
				f = f.caller;
			}
			return stack.join('\n');
		} catch (e) {}
	};
	window.onerror = function(message, url, line) {
		alert(message + '\nurl=' + url + '\nat line ' + line + '\n' + window.getStack());
		return false;
	};
	window.readBinaryURLContentIE = function(url, returnData) {
		try {
			var xhr = new XMLHttpRequest();
			var data = {};
			xhr.open('GET', url, false);

			xhr.setRequestHeader("X-Content-Type-Override", "text/plain; charset=x-user-defined");
			xhr.onreadystatechange = function(e) {};
			xhr.send();
			if (xhr.status == 200) {
				// this.responseText is broken in IE with binary data!
				// This is a c# byte array!
				returnData.setData(xhr.responseBody);
			} else
			if (xhr.status == 1223) {
				returnData.setErrorText("NOTFOUND");
			} else
			if (xhr.status == 404) {
				returnData.setErrorText("NOTFOUND");
			} else {
				returnData.setErrorText(xhr.response + "(" + xhr.status + ")");
			}
		} catch (e) {
			returnData.setErrorText(e);
		}
	};
	var site = new Site();
	site.$isSecurityTitleVisible = false;
	site.officeDevice = _devices[site.$officeDevice = $item.$officeDevice];
	site.$isUserEndpointChangeDisabled = true;
	site.loadBox({
		$item: $item,
		$prototype: $prototype
	});
	return site;
};