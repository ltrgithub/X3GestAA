"use strict"

var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('syracuse-ui/lib/article/rawPage').RawPage;
var article = require('syracuse-ui/lib/article/article');
var highChartsTheme = require('syracuse-ui/themes/desktop/sage/highcharts/theme').theme;

function PptDataGrid(page, prototype){
    this.$page = page;
    this.$prototype = prototype;
    this.dataset = {};
}

var PptDataGrid = helpers.defineClass(PptDataGrid, article.Article, {
    getArticleParent: function(){
        return this.$page;
    }
});

function PptDataGridRecord(DataGrid, prototype){
    this.$grid = DataGrid;
    this.$prototype = prototype;
    this.dataset = {};
}

var PptDataGridRecord = helpers.defineClass(PptDataGridRecord, article.Article, {
    getArticleParent: function(){
        return this.$grid;
    }
});


function PptPage(){
}

exports.PptPage = helpers.defineClass(PptPage, RawPage, {

    drawBox: function(){
        var $properties = this.$prototype.$properties;
        this.$dataGridPrototype = this.createListPrototype($properties.$resources.$item.$properties, this.$item);
        this.$chartExtensions = this.createChartExtensions($properties.$resources, this.$item)
        this.$grid = new PptDataGrid(this, $properties.$resources);
        this.$grid.$record = new PptDataGridRecord(this.$grid, $properties.$resources.$item);
    },
    onDialogResize: function(){
    },
    
    applyChange: function(newData, response, requestUrl, pptInterface, isFirstPage, isLastPage){
        var self = this;
        var representation = this;
        var proto = representation.$prototype.$properties.$resources.$item.$properties;
        var items = self.$dataGridPrototype;
        var data = self.convertDataTo2DimArray(newData, proto, items);

        var worksheetData = {
            $columns: items,
            $chartExtensions: self.$chartExtensions,
            $data: data,
            $startIndex: newData.$startIndex,
            $totalResults: newData.$totalResults,
            $itemsPerPage: newData.$itemsPerPage,
            $isFirstPage: isFirstPage,
            $isLastPage: isLastPage
        };
        
        if (isLastPage)
        {
        	worksheetData.$chartUUID = helpers.uuid.generate();

        	var colors = [];
        	highChartsTheme.colors.map(function(c) {
        		colors.push(self._hexToRgbInt(c));
        	});
        	worksheetData.$colors = colors;
        }
        pptInterface.addDataToWorksheet(worksheetData);
    },
    
    dispose: function(){
    },
    
    createListPrototype: function($prototype, $item) {
        var proto = $prototype;
        var _item = $item;
        
        // get to "$resources" layout
        while (_item && _item.$layout && (_item.$bind !== "$resources")) 
            _item = _item.$layout.$items && _item.$layout.$items[0];
        
        if (!_item) 
            return;
        
        // get column list as string array 
        var items = (_item.$layout && _item.$layout.$items) || _item.$items ||
        Object.keys(proto).map(function(prop){
            return {
                $bind: prop
            };
        });
        
        // simplified proto
        return items.map(function(item){
            var protoItem = proto[item.$bind];
            return {
                _name: item.$bind.replace("$", "_"), // escape $ properties
                _orgName: item.$bind, // temporary storage of original name
                _title: protoItem.$title,
                _type: protoItem.$type
            }
        });
    },
    
    createChartExtensions: function($prototype, $item) {
    	return {
    		$axes: $prototype.$axes,
    		$cube: $prototype.$cube
    	};
    },
    
    convertDataTo2DimArray: function(data, $prototype, $dataGridPrototype){
        var proto = $prototype;
        var items = $dataGridPrototype;
        var self = this;
        //
        
    	function format(expression, res) {
    		res = res || {};
    		var value = expression && expression.replace(/\{(.*?)\}/g, function(match, p1) {
    			return res[p1] || self.$prototype[p1];
    		});

    		return value;
    	}

    	var ret = data.$resources.map(function(res){
            return items.map(function(item){
                var prop = res[item._orgName];
                var propProto = proto[item._orgName];
                var result = {value: "", $type: ""};
                var record = res;
                // manage limited set of types
                switch (item._type) {
                    case "application/x-string":
                    case "application/x-integer":
                    case "application/x-decimal":
                    case "application/x-datetime":
                    case "application/x-date":
                    case "application/x-time":
                    	result.value = prop;
                    	break;
                    case "image":
                    	if (res[item._orgName])
                    		result.$url = format(res[item._orgName].$url , record);
                    	break;
                    case "application/x-boolean":
                        result.value = prop;
                        break;
                    	
                    case "application/x-choice":
                        result.value = prop;
                        propProto.$value.$enum.some(function(element) {
                        	if (element.$value == prop) {
                        		result.value = element.$title;
                        		return true;
                        	}
                        	return false;
                        });
                        break;

                    case "application/x-reference":
                        record = prop;
                        result.value = (record && propProto.$value && self.$grid.$record.parseExpression(propProto.$value, record)) || "";
                        break;
                    default:
                        result.value = "";
                }
                result.value = result.value || "";
                result.$type = item._type;
                return result;
            });
        });
        return ret;
    },
    _hexToRgbInt: function(hex) {
        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        // abc -> aabbcc
        hex = hex.replace(shorthandRegex, function(m, r, g, b) {
            return r + r + g + g + b + b;
        });
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return (parseInt(result[1], 16)<<16) + (parseInt(result[2], 16)<<8) + parseInt(result[3], 16);
    }
});
