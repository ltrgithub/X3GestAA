"use strict";

// This site is only used to exchange the controller an catch the save event of a document entry to directly
// save content from an active document inside ms ppt

var helpers = require('syracuse-core/lib/helpers');
var Site = require('syracuse-ui/lib/site/site').Site;
var OfficePage = require('syracuse-ui/lib/office/officePage').OfficePage;
var CommonController = require('syracuse-ui/lib/controller/controller').Controller;

function PptSafeSite() {}

exports.PptSafeSite = helpers.defineClass(PptSafeSite, Site, {
	_onAfterLogon: function() {
		syra_site.history.start();
		try {
			// Access the current document url (URL where the doc is saved in storage area)
			// if the url  is set, directly safe w/o showing edit page
			var docUrl = syra_site.pptInterface.getDocumentUrl();
			if (docUrl && docUrl !== "")
				syra_site.pptInterface.publishDocument();
		} catch (e) {}
		this.layoutSlot.style.display = "";
		this.resize();
	},
	_renderHeader: function() {

	}
});

exports.load = function($item, $prototype) {
	var widgetsLibrary = require('syracuse-ui/lib/site/widgetsLibrary');
	widgetsLibrary.defaultPageCategory = OfficePage;
	$item.$isSecurityTitleVisible = false;
	var site = (new PptSafeSite()).loadBox({
		isOffice: true,
		isUserEndpointChangeDisabled: true,
		widgetsLibrary: widgetsLibrary,
		controllerClass: CommonController,
		$item: $item,
		$prototype: $prototype
	});

	var pptInterface = require('msoffice/lib/ppt/pptInterface').PptInterface;
	site.pptInterface = new pptInterface();
	site.$syracuseMainPageUrl = $item.$syracuseMainPageUrl;
	return site;
};