"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;

function OfficePage() {}

exports.OfficePage = helpers.defineClass(OfficePage, DesktopPage, {
	_initializePage: function() {
		if (this.$facet == "$dashboard") {
			this.$autoFetch = false;
		}
		DesktopPage.prototype._initializePage.call(this);
	},
	loadBox: function(initData, $initDiagnoses) {
		this.mainPageDesignerAccess = "disabled";
		DesktopPage.prototype.loadBox.call(this, initData, $initDiagnoses);
	},
	notifyActionChange: function(menuItem, target, value, notifyServer) {
		var self = this;

		// extract representation
		var repr = (this.dataset.$url || "").match(/\?.*representation=(.*)\./);
		repr = (repr && repr[1]) || "";
		var reprn = repr.split(".");
		if (reprn && reprn[1])
			repr = reprn[0];
		var documentUrl = document.site.expressionMaker.parse(this, "{$baseUrl}/{$pluralType}('{$key}')?representation={$representation}.$details");
		var publisher;
		var saveUrl = (this.$prototype.$properties.content || {}).$url;
		if (saveUrl) {
			saveUrl = document.site.expressionMaker.parse(this, saveUrl);
			switch (repr) {
				case "msoMailMergeTemplate":
				case "msoReportTemplate":
				case "msoWordDocument":
					publisher = document.site.wordInterface;
					break;
				case "msoPptDocument":
					// save the document to the working copy
					publisher = document.site.pptInterface;
					break;
				case "msoExcelReportTemplate":
				case "msoExcelDocument":
					publisher = document.site.excelInterface;
					break;
				case "documentExcel":
				case "documentExcelSI":
					// save the document to the working copy
					publisher = document.site.excelDocument;
					break;
			}
		}

		// save the document to the working copy
		if (publisher && value && value.$save && value.$save.$isRequested) {
			publisher.publishDocument(documentUrl, this.dataset.description, saveUrl, function(data, resp) {
				// on succes continue with save the working copy
				DesktopPage.prototype.notifyActionChange.call(self, menuItem, target, value, notifyServer);
			});
		} else
			DesktopPage.prototype.notifyActionChange.call(this, menuItem, target, value, notifyServer);
	},
	resizePage: function() {
		DesktopPage.prototype.resizePage.call(this);
		if (this.menuBar && this.$facet && this.$facet !== "$lookup") {
			this.menuBar.ensureState();
			this.menuBar.resizeBar();
		}
	}
});