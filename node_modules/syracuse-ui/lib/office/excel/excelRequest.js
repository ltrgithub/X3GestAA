"use strict";
var helpers = require("syracuse-core/lib/helpers");
var locale = require("syracuse-core/lib/locale");
var _pendingRequests = 0;

// !!! lowercase
var _entities = {
	excelDatasources: require("msoffice/lib/excel/excelDatasources"),
	excelDocuments: require("msoffice/lib/excel/excelPublisher"),
	worksheetActions: require("msoffice/lib/excel/excelWorksheetActions"),
	excelSIParams: require("msoffice/lib/excel/excelSIParam")
};
var _representations = {
	excelDocument: _entities.excelDocuments,
	worksheetAction: _entities.worksheetActions,
	excelSIParam: _entities.excelSIParams
};

var _handlers = {
	prototypes: function(context, id, data, onSuccess, onError) {
		context.prototypeId = id;
		_dispatch(context, _prototypeMap, data, onSuccess, onError);
	},
	walk: function(context, name, id, data, onSuccess, onError) {
		context.entityName = name;
		context.resourceId = id;
		_dispatch(context, _entityMap, data, onSuccess, onError);
	},
	workingCopies: function(context, id, data, onSuccess, onError) {
		context.resourceId = id;
		_dispatch(context, _wcMap, data, onSuccess, onError);
	}
};

var _prototypeMap = {
	GET: function(context, data, onSuccess, onError) {
		var parts = context.prototypeId.split(".");
		var r = parts[0];
		var f = parts[1];
		if (_representations[parts[0]])
		// compat
			_representations[parts[0]].getPrototype(parts[0], parts[1], onSuccess, onError);
		else {
			var m = document.site.excelDocument.getDataModel();
			var rep = m.getRepresentation(r);
			var eName = (rep && rep.$entityName) || r;
			var e = m.nameToEntity(eName);
			if (!e) return onError(locale.format(module, "entityNotFound", r));
			var p = m.getPrototype(e, f, r);
			if (p) onSuccess({
				$prototype: helpers.object.clone(p, true)
			});
			else onError && onError(locale.format(module, "representationNotFound", r));
		}
	}
};

var _entityMap = {
	service: function(context, id, data, onSuccess, onError) {
		_dispatch(context, _serviceMap, data, onSuccess, onError);
	},
	workingCopies: function(context, id, data, onSuccess, onError) {
		_dispatch(context, _wcMap, data, onSuccess, onError);
	},
	template: function(context, id, data, onSuccess, onError) {
		_dispatch(context, _templateMap, data, onSuccess, onError);
	},
	GET: function(context, data, onSuccess, onError) {
		if (_entities[context.entityName].dispatcher["GET"])
		// compat
			_entities[context.entityName].dispatcher["GET"](context, context.resourceId, data, onSuccess, onError);
		else {
			// TODO: error management
			var m = document.site.excelDocument.getDataModel();
			var e = m.pluralToEntity(context.entityName);
			var r = e.$fetch(context.resourceId);
			m.applyMeta(e, r);
			onSuccess(r);
		}
	},
	PUT: function(context, data, onSuccess, onError) {
		_entities[context.entityName].dispatcher["PUT"](context, context.resourceId, data, onSuccess, onError);
	},
	POST: function(context, data, onSuccess, onError) {
		_entities[context.entityName].dispatcher["POST"](context, context.resourceId, data, onSuccess, onError);
	},
	DELETE: function(context, data, onSuccess, onError) {
		_entities[context.entityName].dispatcher["DELETE"](context, context.resourceId, data, onSuccess, onError);
	}
};

var _serviceMap = {
	walk: function(context, name, id, data, onSuccess, onError) {
		context.operationName = name;
		_dispatch(context, _operationMap, data, onSuccess, onError);
	}
};

var _operationMap = {
	GET: function(context, data, onSuccess, onError) {
		_entities[context.entityName].executeOperation(context.operationName, context.resourceId, "GET", data, onSuccess, onError);
	},
	POST: function(context, data, onSuccess, onError) {
		_entities[context.entityName].executeOperation(context.operationName, context.resourceId, "POST", data, onSuccess, onError);
	}
};

var _wcMap = {
	GET: function(context, data, onSuccess, onError) {
		var wc = document.site.excelDocument.getDataModel().getWorkingCopy(context.resourceId);
		onSuccess(wc);
	},
	DELETE: function(context, data, onSuccess, onError) {
		onSuccess({}, {});
	},
	PUT: function(context, data, onSuccess, onError) {
		var wc = document.site.excelDocument.getDataModel().getWorkingCopy(context.resourceId);
		_entities[wc.$pluralName].workingCopies["PUT"](context, context.resourceId, data, onSuccess, onError);
	},
	POST: function(context, data, onSuccess, onError) {
		var m = document.site.excelDocument.getDataModel();
		var e = m.pluralToEntity(context.entityName);
		var wc = m.createWorkingCopy(e, context.representationName, context.resourceId);
		onSuccess(data, {
			headers: {},
			data: wc
		});
	}
};

var _templateMap = {
	workingCopies: function(context, id, data, onSuccess, onError) {
		_dispatch(context, _wcMap, data, onSuccess, onError);
	}
};

var BROWSER_VERBS_ALLOWED = {
	GET: 1,
	POST: 1
};

function _parseSegment(segment) {
	return helpers.url.decodeDetailSegment(segment) || {
		name: segment
	};
}

function _dispatch(context, map, data, onSuccess, onError) {
	var seg = context.walkUrl();
	if (seg == null) {
		// we reached the end of the URL, dispatch method
		//var method = context.request.method.toLowerCase();
		var method = context.method;
		if (map[method]) return map[method](context, data, onSuccess, onError);
		else throw new Error("Method not supported: " + method);
	} else {
		var pair = _parseSegment(seg);
		if (pair.id) {
			// predefined var, TODO: something more generic ...
			pair.id = pair.id.replace("{$currentDatasource}", document.site.excelDocument.getCurrentDatasourceId());
			//
			context.isExpressionId = pair.isExpressionId;
		}
		if (pair.name[0] == '$') {
			var name = pair.name.substring(1);
			if (map[name]) {
				return map[name](context, pair.id, data, onSuccess, onError);
			}
		} else if (map.walk) {
			return map.walk(context, pair.name, pair.id, data, onSuccess, onError);
		}
		throw new Error("unexpected URL segment: " + seg);
	}
}

function _parseResponse(jqXHR, data) {
	document.site.notifyRequestSurvey(--_pendingRequests);
	var headers = {};
	var httpHeader = jqXHR.getAllResponseHeaders();
	if ((httpHeader = httpHeader.trim())) {
		httpHeader.split("\n").forEach(function(header) {
			header = header.trim();
			if (header) {
				var separatorIndex = header.indexOf(":");
				headers[header.substr(0, separatorIndex).trim().toLowerCase()] = header.substr(separatorIndex + 1).trim();
			}
		});
	}
	return {
		status: jqXHR.status,
		headers: headers,
		data: data || jqXHR.responseText
	};
};

function _onReceiveError(error) {
	if (document.site.mainPage) {
		document.site.showDiagnoses({
			$diagnoses: (error.data.indexOf("$diagnoses") >= 0) ? JSON.parse(error.data).$diagnoses : [{
				$message: error.data
			}]
		});
	} else {
		//debugger; //TODO	
	}
}

exports.upload = function(options, responseCallback, progressCallback) {
	throw new Error("Not allowed in this context");
};

function ExcelQuery() {

}

helpers.defineClass(ExcelQuery, null, {
	_getHostname: function() {
		var reg = new RegExp('^(?:f|ht)tp(?:s)?\://([^/]+)', 'im');
		var $urlParts = this.$url.match(reg);
		return $urlParts ? $urlParts[1].toString() : null;
	},
	getPageTemplateUrl: function() {
		return "excel://$prototypes('{representation}')";
	},
	appendHost: function() {
		var host = this._getHostname();
		if (!host) {
			var href = window.location.href;
			this.$url = href.slice(0, href.indexOf(window.location.host) + window.location.host.length) + this.$url;
		}
	},
	getEndpoint: function() {
		return (this.$urlParts.endpoint ? {
			"endpoint": this.$urlParts.endpoint,
			"sep": "."
		} : null);
	},
	isSyracuseURL: function() {
		var host = this._getHostname();
		return host ? host == window.location.host : true;
	},
	parse: function($url) {
		var self = this;
		var limit = $url.indexOf('?');
		self.$url = $url;
		self.$urlParts = {
			uri: $url.slice(0, limit),
			params: {},
			target: "$page"
		};
		$url.slice(limit + 1).split('&').forEach(function(param) {
			var hash = param.split("=");
			self.$urlParts.params[hash[0]] = hash[1];
		});
		if (!(self.$urlParts.endpoint = self.$urlParts.params.endpoint)) {
			var sdataIndex = $url.search(/\/sdata\//i);
			if (sdataIndex >= 0) {
				self.$urlParts.endpoint = $url.slice(sdataIndex + ("/sdata/").length).split("/").slice(0, 3).join(".");
			} else {
				self.$urlParts.endpoint = document.site.userProfile ? document.site.userProfile.getSelectedEndpointString() : null;
			}
		}
		self.$urlParts.endpoint = self.$urlParts.endpoint || "syracuse.collaboration.syracuse";
		var endpointParts = self.$urlParts.endpoint.split(".");
		if (endpointParts.length == 3) {
			self.$urlParts.endpointParts = {
				application: endpointParts[0],
				contract: endpointParts[1],
				dataset: endpointParts[2]
			};
		}

		if (self.$urlParts.params.representation) {
			var result = self.$urlParts.params.representation.split(".");
			self.$urlParts.representationRoot = result[0];
			self.$urlParts.$facet = result[1];
		}
	},
	applyParameters: function(params) {},
	_prepareRequest: function(options) {},
	dispatchUrl: function(url, method, data, onSuccess, onError) {
		var context = helpers.url.parseUrl(url);
		context.method = method;
		context.representationName = this.representationName;
		_dispatch(context, _handlers, data, onSuccess, onError);
	},
	sendRequest: function(options, onSuccess, onError) {
		var self = this;
		//        var url = (self.$url.split("?")[0]).toLowerCase();
		var url = (self.$url.split("?")[0]);
		var r = self.$url.match(/.*representation=(.*).*/);
		self.representationName = r && (r[1].split("&")[0].split(".")[0]);
		// remove protocol
		url = url.replace("excel://", "/");
		//
		self.dispatchUrl(url, ((options && options.method) || "GET").toUpperCase(), options && options.data, onSuccess, onError);
	}
});

exports.parseUrl = function($url) {
	var excelQuery = new ExcelQuery();
	excelQuery.parse($url);
	return excelQuery;
};