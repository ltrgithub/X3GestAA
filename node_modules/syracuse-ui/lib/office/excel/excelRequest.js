"use strict";
var helpers = require("syracuse-core/lib/helpers");
var jsurl = require('jsurl/lib/jsurl');
var forEachKey = helpers.object.forEachKey;
var excelDatasources = require("msoffice/lib/excel/excelDatasources");
var excelPublisher = require("msoffice/lib/excel/excelPublisher");
var excelWorksheetActions = require("msoffice/lib/excel/excelWorksheetActions");
var excelSIParams = require("msoffice/lib/excel/excelSIParam");
var _pendingRequests = 0;

var _prototypes ={
    exceldatasource: excelDatasources.getPrototype,
    exceldocument: excelPublisher.getPrototype,
    worksheetaction: excelWorksheetActions.getPrototype,
	excelsiparam: excelSIParams.getPrototype
}

// !!! lowercase
var _handlers = {
    prototypes: {
        GET: function(excelQuery, id, data, onSuccess, onError) {
            var parts = id.split(".");
            if(_prototypes[parts[0]])
                _prototypes[parts[0]](parts[1], onSuccess, onError);
            else
                onSuccess({});
        }
    },
    exceldatasources: excelDatasources.dispatcher,
    exceldocuments: excelPublisher.dispatcher,
    worksheetactions: excelWorksheetActions.dispatcher,
	excelsiparams: excelSIParams.dispatcher
}

var BROWSER_VERBS_ALLOWED = {
    GET: 1,
    POST: 1
};

function _parseResponse(jqXHR, data){
    document.site.notifyRequestSurvey(--_pendingRequests);
    var headers = {};
    var httpHeader = jqXHR.getAllResponseHeaders();
    if ((httpHeader = httpHeader.trim())) {
        httpHeader.split("\n").forEach(function(header){
            header = header.trim();
            if (header) {
                var separatorIndex = header.indexOf(":");
                headers[header.substr(0, separatorIndex).trim().toLowerCase()] = header.substr(separatorIndex + 1).trim();
            }
        });
    }
    return {
        status: jqXHR.status,
        headers: headers,
        data: data || jqXHR.responseText
    };
};

function _onReceiveError(error){
    if (document.site.mainPage) {
        document.site.showDiagnoses({
            $diagnoses: (error.data.indexOf("$diagnoses") >= 0) ? JSON.parse(error.data).$diagnoses : [{
                message: error.data
            }]
        });
    }
    else {
        debugger; //TODO	
    }
}

exports.upload = function(options, responseCallback, progressCallback){
    throw new Error("Not allowed in this context");
};

function ExcelQuery(){

}

helpers.defineClass(ExcelQuery, null, {
    _getHostname: function(){
        var reg = new RegExp('^(?:f|ht)tp(?:s)?\://([^/]+)', 'im');
        var $urlParts = this.$url.match(reg);
        return $urlParts ? $urlParts[1].toString() : null;
    },
    getPageTemplateUrl: function() {
        return "excel://prototypes('{representation}')";
    },
    appendHost: function(){
        var host = this._getHostname();
        if (!host) {
            var href = window.location.href;
            this.$url = href.slice(0, href.indexOf(window.location.host) + window.location.host.length) + this.$url;
        }
    },
    getEndpoint: function(){
        return (this.$urlParts.endpoint ? {
            "endpoint": this.$urlParts.endpoint,
            "sep": "."
        } : null);
    },
    isSyracuseURL: function(){
        var host = this._getHostname();
        return host ? host == window.location.host : true;
    },
    parse: function($url){
        var self = this;
        var limit = $url.indexOf('?');
        self.$url = $url;
        self.$urlParts = {
            uri: $url.slice(0, limit),
            params: {},
            target: "$page"
        };
        $url.slice(limit + 1).split('&').forEach(function(param){
            var hash = param.split("=");
            self.$urlParts.params[hash[0]] = hash[1];
        });
        if (!(self.$urlParts.endpoint = self.$urlParts.params.endpoint)) {
            var sdataIndex = $url.search(/\/sdata\//i);
            if (sdataIndex >= 0) {
                self.$urlParts.endpoint = $url.slice(sdataIndex + ("/sdata/").length).split("/").slice(0, 3).join(".");
            }
            else {
            	self.$urlParts.endpoint = document.site.userProfile ? document.site.userProfile.getSelectedEndpointString() : null;
            }
        }
        self.$urlParts.endpoint = self.$urlParts.endpoint || "syracuse.collaboration.syracuse";
        var endpointParts = self.$urlParts.endpoint.split(".");
        if (endpointParts.length == 3) {
            self.$urlParts.endpointParts = {
                application: endpointParts[0],
                contract: endpointParts[1],
                dataset: endpointParts[2]
            }
        }
        
        if (self.$urlParts.params.representation) {
            var result = self.$urlParts.params.representation.split(".");
            self.$urlParts.representationRoot = result[0];
            self.$urlParts.$facet = result[1];
        }
    },
    applyParameters: function(params){
    },
    _prepareRequest: function(options){
    },
    dispatchUrl: function(url, method, data, onSuccess, onError) {
        var matches = /^([^\/(]*)\('([^']*)'\)$/.exec(url);
        //
        var entity;
        var id;
        if(matches) {
            entity = matches[1];
            id = matches[2];
        } else
            entity = url;
        //
        if(_handlers[entity] && _handlers[entity][method])
            _handlers[entity][method](this, id, data, onSuccess, onError);
        else
            onSuccess && onSuccess({});
    },
    sendRequest: function(options, onSuccess, onError){
        var self = this;
        var url = (self.$url.split("?")[0]).toLowerCase();
        // remove protocol
        url = url.replace("excel://", "");
        //
        self.dispatchUrl(url, (options && options.method) || "GET", options && options.data, onSuccess, onError);
    }
});

exports.parseUrl = function($url){
    var excelQuery = new ExcelQuery();
    excelQuery.parse($url);
    return excelQuery;
};
