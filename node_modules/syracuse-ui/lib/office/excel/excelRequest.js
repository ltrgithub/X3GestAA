"use strict";
var helpers = require("syracuse-core/lib/helpers");

// !!! lowercase
var _entities = {
	excelDatasources: require("./excelDatasources"),
	excelDocuments: require("./excelPublisher"),
	worksheetActions: require("./excelWorksheetActions")
};
var _representations = {
	excelDocument: _entities.excelDocuments,
	worksheetAction: _entities.worksheetActions
};

var _handlers = {
	prototypes: function(context, id, data, onSuccess, onError) {
		context.prototypeId = id;
		_dispatch(context, _prototypeMap, data, onSuccess, onError);
	},
	walk: function(context, name, id, data, onSuccess, onError) {
		context.entityName = name;
		context.resourceId = id;
		_dispatch(context, _entityMap, data, onSuccess, onError);
	},
	workingCopies: function(context, id, data, onSuccess, onError) {
		context.resourceId = id;
		_dispatch(context, _wcMap, data, onSuccess, onError);
	}
};

var _prototypeMap = {
	GET: function(context, data, onSuccess, onError) {
		var parts = context.prototypeId.split(".");
		var r = parts[0];
		var f = parts[1];
		if (_representations[parts[0]])
		// compat
			_representations[parts[0]].getPrototype(parts[0], parts[1], onSuccess, onError);
		else {
			var rep = syra_site.excelDatasources.getRepresentation(r);
			var eName = (rep && rep.$entityName) || r;
			if (eName != "excelDatasource") {
				return onError("Entity {0} not found"); //r
			}
			var p = syra_site.excelDatasources.getPrototype(f, r);
			if (p)
				onSuccess({
					$prototype: helpers.object.clone(p, true)
				});
			else
				onError && onError("Representation {0} not found"); //r
		}
	}
};

var _entityMap = {
	service: function(context, id, data, onSuccess, onError) {
		_dispatch(context, _serviceMap, data, onSuccess, onError);
	},
	workingCopies: function(context, id, data, onSuccess, onError) {
		_dispatch(context, _wcMap, data, onSuccess, onError);
	},
	template: function(context, id, data, onSuccess, onError) {
		_dispatch(context, _templateMap, data, onSuccess, onError);
	},
	GET: function(context, data, onSuccess, onError) {
		if (_entities[context.entityName].dispatcher["GET"])
		// compat
			_entities[context.entityName].dispatcher["GET"](context, context.resourceId, data, onSuccess, onError);
		else {
			var r = syra_site.excelDocument.getDatasourcesResource(context.resourceId);
			syra_site.excelDatasources.applyMeta(r);
			onSuccess(r);
		}
	},
	PUT: function(context, data, onSuccess, onError) {
		_entities[context.entityName].dispatcher["PUT"](context, context.resourceId, data, onSuccess, onError);
	},
	POST: function(context, data, onSuccess, onError) {
		_entities[context.entityName].dispatcher["POST"](context, context.resourceId, data, onSuccess, onError);
	},
	DELETE: function(context, data, onSuccess, onError) {
		_entities[context.entityName].dispatcher["DELETE"](context, context.resourceId, data, onSuccess, onError);
	}
};

var _serviceMap = {
	walk: function(context, name, id, data, onSuccess, onError) {
		context.operationName = name;
		_dispatch(context, _operationMap, data, onSuccess, onError);
	}
};

var _operationMap = {
	GET: function(context, data, onSuccess, onError) {
		_entities[context.entityName].executeOperation(context.operationName, context.resourceId, "GET", data, onSuccess, onError);
	},
	POST: function(context, data, onSuccess, onError) {
		_entities[context.entityName].executeOperation(context.operationName, context.resourceId, "POST", data, onSuccess, onError);
	}
};

var _wcMap = {
	GET: function(context, data, onSuccess, onError) {
		onSuccess(syra_site.excelDatasources.getWorkingCopy(context.resourceId));
	},
	DELETE: function(context, data, onSuccess, onError) {
		onSuccess({}, {});
	},
	PUT: function(context, data, onSuccess, onError) {
		var wc = syra_site.excelDatasources.getWorkingCopy(context.resourceId);
		_entities[wc.$pluralName].workingCopies["PUT"](context, context.resourceId, data, onSuccess, onError);
	},
	POST: function(context, data, onSuccess, onError) {
		onSuccess(data, {
			headers: {},
			data: syra_site.excelDatasources.createWorkingCopy(context.representationName, context.resourceId)
		});
	}
};

var _templateMap = {
	workingCopies: function(context, id, data, onSuccess, onError) {
		_dispatch(context, _wcMap, data, onSuccess, onError);
	}
};

var BROWSER_VERBS_ALLOWED = {
	GET: 1,
	POST: 1
};

function _dispatch(context, map, data, onSuccess, onError) {
	var seg = context.walkUrl();
	if (seg == null) {
		// we reached the end of the URL, dispatch method
		//var method = context.request.method.toLowerCase();
		var method = context.method;
		if (map[method])
			return map[method](context, data, onSuccess, onError);
		else
			throw new Error("Method not supported: " + method);
	} else {
		var pair = helpers.url.decodeDetailSegment(seg) || {
			name: seg
		};
		if (pair.id) {
			// predefined var, TODO: something more generic ...
			pair.id = pair.id.replace("{$currentDatasource}", syra_site.excelDocument.getCurrentDatasourceId());
			//
			context.isExpressionId = pair.isExpressionId;
		}
		if (pair.name[0] == '$') {
			var name = pair.name.substring(1);
			if (map[name]) {
				return map[name](context, pair.id, data, onSuccess, onError);
			}
		} else
		if (map.walk) {
			return map.walk(context, pair.name, pair.id, data, onSuccess, onError);
		}
		throw new Error("unexpected URL segment: " + seg);
	}
}


function _parseResponse(jqXHR, data) {
	var headers = {};
	var httpHeader = jqXHR.getAllResponseHeaders();
	if ((httpHeader = httpHeader.trim())) {
		httpHeader.split("\n").forEach(function(header) {
			header = header.trim();
			if (header) {
				var separatorIndex = header.indexOf(":");
				headers[header.substr(0, separatorIndex).trim().toLowerCase()] = header.substr(separatorIndex + 1).trim();
			}
		});
	}
	return {
		status: jqXHR.status,
		headers: headers,
		data: data || jqXHR.responseText
	};
}

function _onReceiveError(error) {
	if (syra_site.mainPage) {
		syra_site.showDiagnoses({
			$diagnoses: (error.data.indexOf("$diagnoses") >= 0) ? JSON.parse(error.data).$diagnoses : [{
				$message: error.data
			}]
		});
	} else {
		//debugger; //TODO	
	}
}

exports.upload = function(options, responseCallback, progressCallback) {
	throw new Error("Not allowed in this context");
};

function ExcelQuery() {

}

helpers.defineClass(ExcelQuery, null, {
	parse: function($url) {
		this.openerUrlSegments = syra_site.urlMaker.parse(this.$url = $url);
	},
	sendNewRequest: function(options) {
		options = options || {};
		var url = (this.$url.split("?")[0]);
		var r = this.$url.match(/.*representation=(.*).*/);
		this.representationName = r && (r[1].split("&")[0].split(".")[0]);
		url = url.replace("excel://", "/");
		var context = helpers.url.parseUrl(url);
		context.method = ((options && options.method) || "GET").toUpperCase();
		context.representationName = this.representationName;
		_dispatch(context, _handlers, options.data, options.onSuccess, options.onError);
	}
});

exports.parseUrl = function($url) {
	var excelQuery = new ExcelQuery();
	excelQuery.parse($url);
	return excelQuery;
};