"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;

var _localize = {
    $about: "About"
};

function DesktopTopPanel(){

}

exports.DesktopTopPanel = helpers.defineClass(DesktopTopPanel, Article, {
    loadBox: function(){
        document.itemFactory.initializeItem(this, {});
        document.site.setZIndex(this.$$item = this.$$container);
        Article.prototype.loadBox.call(this);
        var $$item = document.site.userProfile ? document.site.userProfile.$$item : null;
        if ($$item) {
            if ($$item.parent().length == 0) {
                this.$$topUserProfile.empty().append($$item);
            }
        }
        this.$$container.css("height", (this.$$body.outerHeight() + this.$$body.offset().top) + "px");
    },
    renderTopBar: function(){
        var self = this;
        self.$$topBar = $("<div id='s-site-top-pn-top-bar'/>").appendTo(self.$$body);
        self.$$topUserProfile = $("<div id='s-site-top-pn-user-profile'/>").appendTo(self.$$topBar);
        
        self.$$topLinks = $("<div id='s-site-user-top-pn-links'/>").appendTo(self.$$topBar);
    },
    renderAboutBar: function(){
        this.$$aboutBar = $("<div id='s-site-top-pn-about-bar'/>").appendTo(this.$$body);
        document.itemFactory.load(this.$$aboutBar, {
            $category: "block",
            $title: _localize.$about,
            $skin: "s-site-top-pn-about-bar",
            $layout: {
                $items: [{
                    $category: "links",
                    $isBindDisabled: true,
                    $links: this.$prototype.$navigation.$about,
                    $skin: "s-site-top-pn-about-menus"
                }]
            }
        }, this);
    },
    drawBox: function(){
        this.$$body = $("<div id='s-site-top-pn-body'/>").appendTo(this.$$item);
        this.renderTopBar();
        this.renderAboutBar();
    },
    closePanel: function(){
        var $$item = document.site.userProfile ? document.site.userProfile.$$item : null;
        if ($$item) {
            $$item.detach();
        }
        this.$$container.hide().empty();
        document.controller.disposeObject(this);
    },
    dispose: function(){
        var self = this;
        if (self.navItems) {
            Object.keys(self.navItems).forEach(function(navItem){
                if (navItem.$$cell) {
                    navItem.$$cell.unbind();
                }
            });
        }
        Article.prototype.dispose.call(this);
    }
});

