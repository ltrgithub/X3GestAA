"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Site = require('syracuse-ui/lib/site/site').Site;
var Controller = require("./controller").Controller;
var ExcelDocument = require('msoffice/lib/excel/excelDocument').ExcelDocument;
var dispatcher = require('msoffice/lib/excel/dispatcher');
var OfficePage = require('syracuse-ui/lib/office/officePage').OfficePage;
var store = require('syracuse-ui/lib/site/tools/store');

function OfficeSite() {}

exports.OfficeSite = helpers.defineClass(OfficeSite, Site, {
	_onAfterLogon: function() {
		var self = this;
		syra_site.history.start();

		self.layoutSlot.style.display = "";
		self.resize();
		//
		var excelLoaded = (external && external.Application);
		//
		excelLoaded && external.onLogon();
		// check addin version
		syra_controller.sendRequest(null, {
			$location: {
				$url: "/sdata/syracuse/collaboration/syracuse/moduleVersions('officeAddin')?representation=moduleVersion.$details"
			}
		}, function(data, response) {
			if (data && data.version) {
				if ("expectedVersion" in external) {
					external.expectedVersion(data.version);
				}
				self._hasBetterAddinVersion = (excelLoaded && (external.GetAddinVersion() < data.version)) || !excelLoaded;
				self._hasBetterAddinVersion && self.renderUpdatePanel();
			}
		});
	},
	drawBox: function() {
		var self = this;
		self.siteFunctions.addDragDropManager();
		self._renderHeader();
		self.body = ($("<div id='s-site-body'/>").appendTo($(self.layoutSlot)))[0];
		self.logon(function() {
			self._onAfterLogon();
		});
	},
	renderUpdatePanel: function() {
		var self = this;
		if (self.$$updatePanel) {
			self.$$updatePanel.show();
			return;
		}
		self.$$updatePanel = $("<div id='s-site-updatePanel'/>").prependTo(self.body);
		$("<a href='/msoffice/lib/general/addIn/SyracuseOfficeAddinsSetup.EXE'>A newer version of the addin is available. Click here to download it</a>").appendTo(self.$$updatePanel);
	},
	onMainPageChange: function($itemPage) {
		this.$$updatePanel = null;
		Site.prototype.onMainPageChange.apply(this, arguments);
		if (this._hasBetterAddinVersion)
			this.renderUpdatePanel();
		syra_site.excelDocument.autoLoad();
		return this.mainPage;
	},
	_renderHeader: function() {

	},
	getPageTemplateUrl: function(url) {
		if (url.split(":")[0] == "excel") {
			return "excel://$prototypes('{representation}')";
		}
		return Site.prototype.getPageTemplateUrl.call(this, url);
	}
});

exports.load = function($item, $prototype) {
	window.syra_store = store;
	var widgetsLibrary = require('syracuse-ui/lib/site/widgetsLibrary');
	widgetsLibrary.defaultPageCategory = OfficePage;
	widgetsLibrary.pageCategories.worksheet = require("./excelPage").ExcelPage;
	var site = new OfficeSite();
	site.excelDocument = new ExcelDocument();
	$item.$isSecurityTitleVisible = false;
	site.loadBox({
		isOffice: true,
		widgetsLibrary: widgetsLibrary,
		isUserEndpointChangeDisabled: true,
		controllerClass: Controller,
		$item: $item,
		$prototype: $prototype
	});
	site.requestControllers["excel"] = require("syracuse-ui/lib/office/excel/excelRequest");
	dispatcher.on("refreshAll", function() {
		site.excelDocument.refreshAllDatasources();
	});
	dispatcher.on("saveDocument", function() {
		site.excelDocument.publishDocument();
	});
	dispatcher.on("selectionChanged", function() {
		site.excelDocument.selectionChanged();
	});
	site.$syracuseMainPageUrl = $item.$syracuseMainPageUrl;
	return site;
};

//Called from Excel to close the connection to Syracuse
//ONLY WORKS IN IE. no problem here, since this is only called from IE within Excel!
window.postUrl = function(url, returnData) {
	try {
		var xhr = new XMLHttpRequest();
		var data = {};
		xhr.open('POST', url, false);

		xhr.setRequestHeader("X-Content-Type-Override", "text/plain; charset=x-user-defined");
		xhr.onreadystatechange = function(e) {};
		xhr.send();
		if (xhr.status == 200) {
			// this.responseText is broken in IE with binary data!
			// This is a c# byte array!
			returnData.setData(xhr.responseBody);
		} else
		if (xhr.status == 1223) {
			returnData.setErrorText("NOTFOUND");
		} else
		if (xhr.status == 404) {
			returnData.setErrorText("NOTFOUND");
		} else {
			returnData.setErrorText(xhr.response + "(" + xhr.status + ")");
		}
	} catch (e) {
		returnData.setErrorText(e);
	}
};