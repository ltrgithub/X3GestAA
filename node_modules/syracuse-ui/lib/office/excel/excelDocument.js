"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _httpController = require("syracuse-ui/lib/controller/httpController");
var _isExcelLoaded = (external && external.Application);
var _udfRegistry = require('syracuse-ui/lib/office/excel/udfRegistry');
var base64 = require("msoffice/lib/Base64").Base64;
var locale = require("syracuse-core/lib/locale");

var _defines = {
	x3CustomPropDsPrefix: "Sage.X3.DS",
	documentUrlAddress: "A3",
	documentTitleAddress: "A4",
	datasourcesAddress: "A5",
	SIParametersAddress: "A6",
	syracuseEndpoint: "A10",
	defaultFetchCount: 1000
};


var _stub = {
	Worksheet: {
		Cells: function(row, col) {
			return _stub.Range;
		}
	},
	Range: {
		Insert: function(dir) {
			return _stub.Range;
		},
		Worksheet: this.Worksheet
	},
	Workbook: {
		CustomDocumentProperties: {
			Item: function(arg) {
				return null;
			},
			Add: function(arg1, arg2, arg3, arg4) {}
		}
	},
	Application: {
		ActiveWorkbook: this.Workbook,
		ActiveCell: this.Range,
		Run: function() {
			return null;
		},
		MacroOptions2: function() {
			return null;
		}
	},
	External: {
		GetActiveWorkbookCustomProperties: function() {

		}
	}
};


var _Application = (external && external.Application) || _stub.Application;



var _stubsDs = {
	"f1af2c6d-ccd9-4488-a2f1-c54166147374": {
		$uuid: "f1af2c6d-ccd9-4488-a2f1-c54166147374",
		$url: "/sdata/syracuse/collaboration/syracuse/applications?representation=application.$bulk&count=1000",
		$title: "Applications",
		title: "Applications",
		entity: "applications",
		representation: "application",
		endpoint: "syracuse",
		fetchAll: false,
		fetchLimit: 1000,
		filter: "(application eq \"x3\") and (contract eq \"erp\")",
		dataBaseUrl: "/sdata/syracuse/collaboration/syracuse",
		orderBys: [{
			$uuid: "id1",
			name: "application",
			title: "Name"
		}, {
			$uuid: "id2",
			name: "contract",
			title: "Contract"
		}],
		dsName: "Sage.X3.DS.syracuse_applications"
	},
	"f1af2c6d-ccd9-4488-a2f1-c54166147375": {
		$uuid: "f1af2c6d-ccd9-4488-a2f1-c54166147375",
		$url: "/sdata/syracuse/collaboration/syracuse/documents?representation=document.$bulk&count=1000",
		$title: "Documents",
		title: "Documents",
		entity: "documents",
		representation: "document",
		endpoint: "syracuse",
		fetchAll: true,
		fetchLimit: 1000,
		filter: "(description eq \"sample\")",
		dataBaseUrl: "/sdata/syracuse/collaboration/syracuse",
		orderBys: [],
		dsName: "Sage.X3.DS.syracuse_documents"
	},
	"f1af2c6d-ccd9-4488-a2f1-c54166147376": {
		$uuid: "f1af2c6d-ccd9-4488-a2f1-c54166147376",
		$url: "/sdata/syracuse/collaboration/syracuse/users?representation=user.$bulk&count=1000",
		$title: "Users",
		title: "Users",
		entity: "users",
		representation: "user",
		endpoint: "syracuse",
		fetchAll: true,
		fetchLimit: 1000,
		filter: "(active eq true)",
		dataBaseUrl: "/sdata/syracuse/collaboration/syracuse",
		orderBys: [],
		dsName: "Sage.X3.DS.syracuse_documents"
	}
};


function _storeCustomData(adr, value) {
	_isExcelLoaded && external.StoreCustomData(adr, value);
}

function _getCustomData(adr) {
	return _isExcelLoaded ? external.GetCustomData(adr) : "";
}

function _loadDatasources() {
	return JSON.parse(_getCustomData(_defines.datasourcesAddress) || "{}");
}

function _makeDatasourceName(datasource) {
	// fetch list objects names
	var objectNames = [];
	if (_isExcelLoaded) {
		var sheets = _Application.Worksheets;
		for (var ii = 1, jj = sheets.Count; ii <= sheets.Count; ii++) {
			var listObjects = sheets.Item(ii).ListObjects;
			for (var mm = 1, kk = listObjects.Count; mm <= kk; mm++)
				objectNames.push(listObjects.Item(mm).Name);
		}
	}
	// make a name like endpoint_entity
	var dsName = _defines.x3CustomPropDsPrefix + "." + datasource.$url.replace(/#|'/g, "").replace(/\(|\)/g, "_").split("?")[0].split("/").slice(-2).join("_");
	// test if dsName exists
	var nameIdx = 1;
	var orgDsName = dsName;
	while (objectNames.indexOf(dsName) >= 0)
		dsName = orgDsName + "_" + nameIdx++;
	return dsName;
}


function _loadPage(datasource, name, cellAddress, onLoaded) {
	name = name || _makeDatasourceName(datasource);

	_isExcelLoaded && external.StartUpdateTable();
	var order = (datasource.orderBys || []).map(function(orderBy) {
		return orderBy.name + (orderBy.order ? (" " + orderBy.order) : "");
	});
	var url = datasource.$url + (order.length ? "&orderBy=" + order.join(",") : "");

	if (datasource.filter && url.indexOf("&where") < 0) {
		url += "&where=" + encodeURIComponent(datasource.filter);
	}

	syra_controller.loadRepresentation({
		article: null,
		segments: url,
		success: function(response) {
			var repr = response.$representation;
			repr.$article = (repr.$prototype || {}).$article || {};
			repr.$article.$category = "worksheet";
			repr.$prototype = repr.$prototype || {};
			repr.$prototype.$datasource = datasource;
			repr.$prototype.$datasourceName = name;
			repr.$prototype.cellAddress = cellAddress;
			repr.$prototype.fields = datasource.fields;
			//
			var page = syra_site.pageLoader.load({
				$representation: repr,
				openerUrlSegments: response.openerUrlSegments,
				$category: "worksheet"
			});
			//
			_fetchSlice(page, (datasource.fetchAll ? -1 : (datasource.fetchLimit || 1000)), null, onLoaded);
		},
		onError: function(error) {
			_isExcelLoaded && external.EndUpdateTable();
		}
	});
}

function _fetchSlice(page, maxLines, data, onLoaded) {
	function onEndData() {
		_isExcelLoaded && external.EndUpdateTable();
		_isExcelLoaded && external.SelectionChanged();
		onLoaded && onLoaded();
	}
	var options = null;
	if (data) {
		if (data.$links && data.$links.$next) {
			var url = syra_site.urlMaker.formatMenuUrl(page, data.$links.$next, data);
			// TODO: proper count detection and insertion
			if (url.indexOf("&count=") < 0) {
				if (url.indexOf("?") < 0)
					url = url + "?count=" + _defines.defaultFetchCount;
				else
					url = url + "&count=" + _defines.defaultFetchCount;
			}
			options = {
				$location: {
					$url: url,
					$type: data.$links.$next.$type
				}
			};
		} else
			return;
	}
	page.fetch(options, function(fetchData, response, requestUrl) {
		// first fetch, resize table
		if (!data) {
			var fetchCount = fetchData.$totalResults || fetchData.$resources.length;
			var res;
			if (maxLines < 0)
				res = page.createExcelTableShell(fetchCount);
			else
				res = page.createExcelTableShell(Math.min(fetchCount, maxLines));
			// if cannot resize, return
			if (!res) {
				onEndData();
				return;
			}
		}
		if (!fetchData.$startIndex)
			fetchData.$startIndex = ((data && data.$startIndex) || 1) + (data && data.$resources && data.$resources.length);
		if (fetchData.$startIndex < 0) {
			onEndData();
			throw new Error("Internal error: $startIndex out of range: " + fetchData.$startIndex);
		}
		if (!fetchData.$itemsPerPage)
			fetchData.$itemsPerPage = fetchData.$resources.length;
		if ((maxLines > 0) && ((fetchData.$startIndex + fetchData.$itemsPerPage) > maxLines)) {
			fetchData.$resources = fetchData.$resources.slice(0, maxLines - fetchData.$startIndex + 1);
		}
		// apply data
		if (!page.applyChange(fetchData, response, requestUrl)) {
			onEndData();
			return;
		}
		var aborted = _isExcelLoaded && external.Aborted;
		if (!aborted && (((fetchData.$startIndex + fetchData.$itemsPerPage) < maxLines) || (maxLines < 0)) && (fetchData.$links && fetchData.$links.$next && fetchData.$links.$next.$url)) {
			// next
			_fetchSlice(page, maxLines, fetchData, onLoaded);
		} else {
			onEndData();
		}
	}, function(error, query) {
		onEndData();
	});
}


function ExcelDocument() {
	var self = this;
	window.syra_excel_local = locale.resources(module)();
	// allow testing in Firefox
	this.workbook = _Application.ActiveWorkbook;
	// register UDFS
	_udfRegistry.registerUdfs(this.workbook);
	// document Url
	Object.defineProperty(this, "documentUrl", {
		get: function() {
			return _getCustomData(_defines.documentUrlAddress);
		},
		set: function(value) {
			_storeCustomData(_defines.documentUrlAddress, value);
		}
	});
	// document title
	Object.defineProperty(this, "documentTitle", {
		get: function() {
			return _getCustomData(_defines.documentTitleAddress);
		},
		set: function(value) {
			_storeCustomData(_defines.documentTitleAddress, value);
		}
	});
}

exports.ExcelDocument = helpers.defineClass(ExcelDocument, null, {

	customProperty: function(propName, value) {
		if (arguments.length == 1) {
			// get
			try {
				return this.workbook.CustomDocumentProperties.Item(propName);
			} catch (e) {
				return null;
			}
		} else {
			// set
			var prop = this.customProperty(propName);
			if (prop)
				prop.Value = value;
			else
				this.workbook.CustomDocumentProperties.Add(propName, false, external.msoString, value);
		}
	},

	_saveDatasources: function() {
		_storeCustomData(_defines.datasourcesAddress, JSON.stringify(this.datasources));
	},


	autoLoad: function() {
		var self = this;
		// autoload ?
		var datasources = self.getDatasources();
		helpers.object.forEachKey(datasources, function(key, ds) {
			if (ds.$mustRefresh) {
				delete ds.$mustRefresh;
				self.loadPage(ds, ds.dsName);
			}
		});
	},
	getDatasources: function() {
		return this.datasources = _loadDatasources();
	},
	getDatasource: function(uuid) {
		return this.getDatasources()[uuid];
	},
	getWorkingCopy: function(wcId) {
		return (this.$workingCopies = this.$workingCopies || {})[wcId];
	},
	deleteWorkingCopy: function(wcId) {
		if (this.$workingCopies && this.$workingCopies[wcId])
			this.$workingCopies[wcId] = null;
	},
	getDatasourcesResource: function(uuid, applyMeta) {
		function getDsResource(datasource) {
			var dsItem = helpers.object.clone(datasource);
			dsItem.$uuid = dsItem.$uuid || helpers.uuid.generate();
			dsItem.$key = dsItem.$uuid;
			dsItem.$etag = 1;
			dsItem.description = locale.format(module, "representation", dsItem.title, dsItem.representation, dsItem.entity, dsItem.endpoint);
			dsItem.orderBys = datasource.orderBys && datasource.orderBys.slice(0);
			dsItem.serviceUrl = datasource.$url;
			return dsItem;
		}
		var resource;
		if (!_isExcelLoaded) {
			if (uuid) {
				resource = getDsResource(_stubsDs[uuid] || {});
			} else {
				resource = {
					$resources: Object.keys(_stubsDs).map(function(uuid) {
						return _stubsDs[uuid];
					})
				};
			}
		} else {
			if (uuid) {
				resource = getDsResource(this.getDatasource(uuid) || {});
			} else {
				// load datasources
				var datasources = this.getDatasources();
				var i = 0;
				resource = {
					$resources: Object.keys(datasources || {}).filter(function(dsName) {
						return !datasources[dsName].$isHidden;
					}).map(function(dsName) {
						var r = getDsResource(datasources[dsName]);
						r.$index = i++;
						return r;
					})
				};
			}
		}

		if (applyMeta) {
			var records = resource.$resources || [resource];
			for (var ii = 0, jj = records.length; ii < jj; ii++) {
				var record = records[ii];
				record.$properties = record.$properties || {};
				(record.$properties.fetchLimit = record.$properties.fetchLimit || {}).$isHidden = record.fetchAll;
				(record.$properties.menurecord = record.$properties.menurecord || {}).$isDisabled = record.endpoint == null;
				(record.$properties.representationRef = record.$properties.representationRef || {}).$isDisabled = record.endpoint == null;

				(record.$properties.filter = record.$properties.filter || {}).$isDisabled = record.entity == null;
				// Fallback: When a datasource is created by creating a new xlsx document,
				// there is no endpointRef and therefor no dataBaseUrl
				if ((!record.dataBaseUrl || record.dataBaseUrl === "") && record.serviceUrl) {
					record.dataBaseUrl = record.serviceUrl.split("/").slice(0, 5).join("/");
				}
				if (record.dataBaseUrl && record.representation) {
					record.$properties = record.$properties || {};
					var filter = record.$properties.filter = record.$properties.filter || {};
					filter.$links = filter.$links || {};
					filter.$links.$prototype = filter.$links.$prototype || {};
					filter.$links.$prototype.$url = "{dataBaseUrl}/$prototypes('{representation}.$query')";
				}
			}
		}
		return resource;
	},
	updateDatasourceToDocument: function(datasource, name) {
		datasource.dsName = datasource.dsName || name;
		datasource.$uuid = datasource.$uuid || helpers.uuid.generate();
		this.datasources[datasource.$uuid] = datasource;
		//
		this._saveDatasources();
	},
	deleteDatasource: function(dsUuid) {
		var ds = this.getDatasource(dsUuid);
		if (ds && external.DeleteTable(ds.dsName)) {
			// force datasources load
			this.datasources = _loadDatasources();
			delete this.datasources[dsUuid];
			this._saveDatasources();
		}
	},
	workingCopyToDatasource: function(workingCopy) {
		var record = workingCopy;
		var ds = {
			$uuid: record.$uuid,
			dsName: record.dsName,
			$url: record.serviceUrl,
			$title: record.title,
			title: record.title,
			entity: record.entity,
			representation: record.representation,
			endpoint: record.dataset,
			dataset: record.dataset,
			fetchAll: record.fetchAll,
			fetchLimit: record.fetchLimit,
			filter: record.filter,
			dataBaseUrl: record.dataBaseUrl
		};
		if (record.orderBys)
			ds.orderBys = record.orderBys.map(function(orderBy) {
				return {
					$index: orderBy.$index,
					name: orderBy.name,
					title: orderBy.title,
					order: orderBy.order
				};
			});
		return ds;
	},
	// loading
	addDatasource: function(record, onLoaded) {
		if (record.serviceUrl) {
			// load / update datasource
			// TODO: make a datasource validation function
			var ds = this.getDatasource(record.$uuid);
			if (!ds) {
				ds = this.workingCopyToDatasource(record);
				this._saveDatasources();
			}
			if (ds)
				this.loadPage(ds, ds.dsName, null, onLoaded);
		}
	},
	refreshDatasource: function(dsUuid, onLoaded) {
		var ds = this.getDatasource(dsUuid);
		ds && this.loadPage(ds, ds.dsName, null, onLoaded);
	},
	refreshAllDatasources: function() {
		function asyncRefresh() {
			var key = keys.shift();
			key && self.refreshDatasource(key, asyncRefresh);
		}
		//
		var self = this;
		var keys = Object.keys(self.getDatasources() || {});
		asyncRefresh();
	},


	loadPage: function(datasource, name, cellAddress, onLoaded) {
		var self = this;

		var role = (external.getSyracuseRole && external.getSyracuseRole()) || syra_site.userProfile._selectedRoleUiid;
		var loc = external.getSyracuseLocale && external.getSyracuseLocale();
		var endpoint = (external.getSyracuseEndpoint && external.getSyracuseEndpoint()) || syra_site.userProfile._selectedEndpointUiid;

		syra_controller.callServer(null, {
			$location: {
				$url: "/sdata/syracuse/collaboration/syracuse/userProfiles/$template/$workingCopies?representation=userProfile.$edit"
			},
			method: "POST",
			data: {
				"$etag": 1,
				"selectedRole": {
					"$uuid": role
				},
				"selectedLocale": {
					"$uuid": loc
				},
				"selectedEndpoint": {
					"$uuid": endpoint
				},
				"$actions": {
					"$save": {
						"$isRequested": true
					}
				}
			}
		}, function(data, response) {

			syra_site.deltaManager.applyObjectDelta(syra_site.userProfile, syra_site.userProfile.dataset, data);

			if (data && data.selectedEndpoint) {
				syra_site.userProfile._selectedEndpointUiid = data.selectedEndpoint.$uuid;
			}

			if (data && data.selectedRole) {
				syra_site.userProfile._selectedRoleUiid = data.selectedRole.$uuid;
			}

			syra_site.userProfile.currentLangCode = (data && data.selectedLocale && data.selectedLocale.code) || syra_site.localizer.getLanguage();

			_loadPage(datasource, name, cellAddress, onLoaded);
		});
	},


	// load one table
	loadTable: function(params, onLoaded, onError) {
		var self = this;
		var isDetail = params.hasOwnProperty("endpointId");
		var epUrl = isDetail ? "/sdata/syracuse/collaboration/syracuse/endPoints('" + params.endpointId + "')?representation=endPoint.$details" : "/sdata/syracuse/collaboration/syracuse/endPoints?representation=endPoint.$query&where=(dataset eq \"" + params.endpointName + "\")";
		// fetch the endpoint
		//var facetName = "$query";
		var facetName = "$bulk";
		var query = _httpController.parseUrl(epUrl).sendNewRequest({
			onSuccess: function(data) {
				if ((data && data.$resources && data.$resources.length) || isDetail) {
					var ep = isDetail ? data : data.$resources[0];
					var ds = {
						$isHidden: params.$isHidden,
						$url: ["/sdata", ep.application, ep.contract, ep.dataset, params.className].join("/") + "?representation=" + params.representationName + "." + facetName + (params.parameters ? "&" + params.parameters : ""),
						$title: params.dsName,
						title: params.dsName,
						entity: params.className,
						representation: params.representationName,
						endpoint: ep.dataset,
						fetchAll: true,
						fetchLimit: params.limit,
						fields: params.fields,
						filter: params.filter
					};
					//
					self.loadPage(ds, params.dsName, params.cellAddress, onLoaded);
				} else
				// TODO: localize
					onError("Endpoint " + params.endpointName + " not found");
			},
			onError: function(error) {
				onError && onError(error);
			}
		});
	},
	// load all tables
	loadTables: function(params, onLoaded, onError) {
		var self = this;

		function asyncLoad() {
			var t = p.shift();
			if (t) {
				self.loadTable(t, asyncLoad, onError);
			} else
				onLoaded && onLoaded();
		}
		var p = params.slice(0);
		asyncLoad();
	},
	// publishing
	publishDocument: function(documentUrl, documentTitle, saveUrl, onSuccess) {
		var docUrl = this.documentUrl;
		if (!docUrl)
			docUrl = this.documentUrl = documentUrl;
		if (documentUrl && (docUrl !== documentUrl)) {
			throw new Error("This document is allready published");
		}
		var docTitle = this.documentTitle;
		if (documentTitle)
			docTitle = this.documentTitle = documentTitle;
		// content is documents binary buffer
		// important: get the content only after having set documentUrl and documentTitle, or theses won't be saved 
		var content = _isExcelLoaded ? base64.raw_decode(external.GetDocumentContent()) : "";
		// dont send any contentType as the output format gets UTF-8 instead of binary
		_httpController.upload({
			buffer: content,
			url: saveUrl || (docUrl.substring(0, docUrl.indexOf("?")) + "/content"),
			headers: {
				"X-Content-Type-Override": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
			},
			fileName: docTitle + ".xlsx"
		}, function(data, response) {
			onSuccess && onSuccess(data, response);
			_isExcelLoaded && external.DocumentSaved();
		});
	},
	// other
	getCurrentDatasourceId: function() {
		return _isExcelLoaded ? (syra_site.$currentDatasource || "") : "f1af2c6d-ccd9-4488-a2f1-c54166147374";
	}
});

window.onOfficeEvent = function(event, args) {
	if (site.excelDocument) {
		switch (event) {
			case "refreshAll":
				site.excelDocument.refreshAllDatasources();
				break;
			case "selectionChanged":
				var activeCell = external.Application.ActiveCell;
				if (activeCell && activeCell.ListObject) {
					var name = activeCell.ListObject.Name;
					var tableId = null;
					var dss = site.excelDocument.getDatasources();
					for (var ds in dss) {
						if (dss[ds].dsName === name) {
							tableId = ds;
							break;
						}
					}
					if (tableId && (syra_site.$currentDatasource !== tableId)) {
						syra_site.$currentDatasource = tableId;
						syra_site.mainPage && syra_site.mainPage.fetch && syra_site.mainPage.fetch(syra_site.$currentDatasource);
					}
				}
				break;
		}
	}
};

window.invokeUDF = function(udfName, args) {
	return (_udfRegistry.UdfRegistry[udfName] && _udfRegistry.UdfRegistry[udfName].$handler && _udfRegistry.UdfRegistry[udfName].$handler(Array.prototype.slice.call(arguments, 1))) || "";
};

window.loadTables = function(args) {
	var par = JSON.parse(args || "[]");
	syra_site.excelDocument.loadTables(par, function() {
		external.onTablesLoaded("");
	}, function(errorMessage) {
		external.onTablesLoaded(errorMessage);
	});
};