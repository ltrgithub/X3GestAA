"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _representations = {
	excelBrowseDsMenuItem: {
		$edit: {
			$layout: {
				$items: [{
					$bind: "endpointRef"
				}, {
					$bind: "menuItem"
				}, {
					$bind: "title"
				}, {
					$bind: "filter"
				}, {
					$bind: "fetchAll"
				}, {
					$bind: "fetchLimit"
				}, {
					$bind: "orderBys"
				}]
			}
		}
	},
	excelBrowseDsEntity: {
		$edit: {
			$layout: {
				$items: [{
					$bind: "endpointRef"
				}, {
					$bind: "representationRef"
				}, {
					$bind: "title"
				}, {
					$bind: "filter"
				}, {
					$bind: "fetchAll"
				}, {
					$bind: "fetchLimit"
				}, {
					$bind: "orderBys"
				}]
			}
		}
	},
	excelActionPanelDs: {
		$details: {
			$layout: {
				$items: [{
					$bind: "title"
				}, {
					$bind: "entity"
				}, {
					$bind: "filter",
				}, {
					"$bind": "fetchAll"
				}, {
					"$bind": "fetchLimit"
				}]
			}
		}
	}
};

exports.getRepresentation = function(name) {
	return _representations[name];
};

exports.getPrototype = function(facet, representationName) {
	var proto = {
		$type: "application/json",
		$links: {}
	};
	if (facet !== "$edit") {
		delete proto.$properties.orderBys.$capabilities;
	} else {

	}

	var r = representationName || "excelDatasource";
	if (r == "excelActionPanelDs" && facet == "$details" && proto.$links.$edit) {
		proto.$links.$edit.$isHidden = true;
	}
	r = _representations[r];
	proto.$article = (r && r[facet] && r[facet].$layout) ? {
		$layout: r[facet].$layout
	} : null;
	return proto;
};

function _computeServiceUrl(resource) {
	if (resource.dataBaseUrl && resource.representation && resource.entity) {
		var facetName = "$bulk";
		var limit = resource.fetchLimit;
		var params = ["representation=" + resource.representation + "." + facetName];
		if (!resource.fetchAll)
			params.push("count=" + limit);
		return ([resource.dataBaseUrl, resource.entity].join("/") +
			"?" +
			params.join("&"));
	} else
	if (resource.serviceUrl)
		return resource.serviceUrl;
	else
		return "";
}

exports.dispatcher = {
	DELETE: function(excelQuery, id, data, onSuccess, onError) {
		if (id) {
			syra_site.excelDocument.deleteDatasource(id);
			syra_site.excelDocument._saveDatasources();
		}
		var h = syra_site.$prototype && syra_site.$prototype.$links && syra_site.$prototype.$links.$home;
		onSuccess({}, {
			headers: {
				location: h && h.$url
			},
			data: {
				$diagnoses: [{
					$severity: "success",
					$message: syra_excel_local.resourceDeleted
				}]
			}
		});
	}
};