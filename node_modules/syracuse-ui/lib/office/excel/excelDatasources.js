"use strict";
var helpers = require('syracuse-core/lib/helpers');
var forEachKey = helpers.object.forEachKey;

function _wrapOfficePage(page) {
	page.onButtonClick = function(event, btn) {
		var article = syra_store.findArticle(btn);
		page.$actions[(article == page) ? "$page" : "$record"][btn.syraValue].execute(article);
	};
	if (page.$actions) {
		page.addMenuBar = function($actions) {
			var $binds = Object.keys($actions);
			var nav = document.createElement("div");
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var btn = syra_menus.addTextButton($actions[$bind].$title, "s-mn-list-link", "onButtonClick", null, $bind);
				nav.appendChild(btn).syraValue = $bind;
			}
			return nav;
		};
		page.layoutContent.domItem.insertBefore(page.addMenuBar(page.$actions.$page), page.layoutContent.domItem.firstChild);
	}
}

var _excelDatasource = {
	$title: "Data Sources",
	$entityName: "excelDatasource",
	$pluralName: "excelDatasources",
	$capabilities: "edit,delete",
	$properties: {
		description: {
			$title: "Description",
			$type: "application/x-string"
		},
		dsName: {
			$title: "Name",
			$type: "application/x-string"
		},
		title: {
			$title: "Title",
			$type: "application/x-string"
		},
		endpoint: {
			$title: "Endpoint",
			$type: "application/x-string"
		},
		endpointRef: {
			$isMandatory: true,
			$title: "Endpoint",
			$value: "{description}",
			$baseUrl: "/sdata/syracuse/collaboration/syracuse",
			$type: "application/x-reference",
			$item: {
				$key: "{dataset}",
				$links: {
					$lookup: {
						$url: "/sdata/syracuse/collaboration/syracuse/endPoints?representation=endPoint.$lookup"
					}
				},
				$properties: {
					applicationRef: {},
					dataset: {},
					application: {},
					contract: {}
				}
			}
		},
		menuItem: {
			$title: "Data Source",
			$type: "application/x-reference",
			$item: {
				$value: "{description}",
				$key: "{description}",
				$properties: {
					representationRef: {},
					title: {},
					linkType: {},
					requestName: {},
					requestLevel: {},
					statName: {},
					$links: {}
				},
				$links: {
					$lookup: {
						$url: "/sdata/syracuse/collaboration/syracuse/menuItems?representation=menuItem.$lookup&where=(application eq \"{applicationId}\") and (((linkType eq \"$representation\") and (facet eq \"$query\")) or (linkType eq \"$request\") or (linkType eq \"$stats\"))"
					}
				}
			}
		},
		orderBys: {
			$title: "Order bys",
			$capabilities: "insert,append,delete,reorder",
			$type: "application/x-array",
			$item: {
				$type: "application/x-reference",
				$item: {
					$value: "{name}",
					$title: "{title}",
					$key: "{$uuid}",
					$properties: {
						title: {
							"$type": "application/x-string"
						},
						name: {
							"$type": "application/x-string"
						}
					},
					$links: {
						"$details": {}
					}
				}

			},
			$links: {
				$select: {
					$url: "/sdata/syracuse/collaboration/syracuse/lookupEntityAttrs?representation=lookupEntityAttr.$select&dataset={endpoint}&entity={entity}"
				}
			}
		},
		entity: {
			$title: "Entity",
			$type: "application/x-string"
		},
		representation: {
			$title: "Representation",
			$type: "application/x-string"
		},
		representationRef: {
			$title: "Representation",
			$capabilities: "",
			$type: "application/x-object",
			$item: {
				$value: "{description}",
				$key: "{respresentation}",
				$properties: {
					entity: {
						$title: "Entity",
						$type: "application/x-string"
					},
					representation: {
						$title: "Representation",
						$type: "application/x-string"
					}
				},
				$links: {
					$lookup: {
						$url: "/sdata/syracuse/collaboration/syracuse/representationProxies?representation=representationProxy.$lookup&dataset={endpoint}"
					}
				}
			}
		},
		fetchAll: {
			$title: "Fetch all",
			$type: "application/x-boolean"
		},
		fetchLimit: {
			$title: "Fetch limit",
			$type: "application/x-integer"
		},
		filter: {
			$title: "Filter",
			$type: "application/x-filter"
		}
	}
};

var _representations = {
	excelBrowseDsMenuItem: {
		$entityName: "excelDatasource",
		$edit: {
			$layout: {
				$items: [{
					$bind: "endpointRef"
				}, {
					$bind: "menuItem"
				}, {
					$bind: "title"
				}, {
					$bind: "filter"
				}, {
					$bind: "fetchAll"
				}, {
					$bind: "fetchLimit"
				}, {
					$bind: "orderBys"
				}]
			}
		}
	},
	excelBrowseDsEntity: {
		$entityName: "excelDatasource",
		$edit: {
			$layout: {
				$items: [{
					$bind: "endpointRef"
				}, {
					$bind: "representationRef"
				}, {
					$bind: "title"
				}, {
					$bind: "filter"
				}, {
					$bind: "fetchAll"
				}, {
					$bind: "fetchLimit"
				}, {
					$bind: "orderBys"
				}]
			}
		}
	},
	excelDatasource: {
		$entityName: "excelDatasource",
		$query: {
			$layout: {
				$items: [{
					$bind: "$resources",
					$format: "cards",
					renderRecordContent: function(record) {
						var page = record.page;
						syra_site.dom.removeChild(record.toolbar);
						if (!page.onButtonClick) {
							record.onPreInitializeInlinePage = function(inlinePage, $article) {};
							record.onInlinePageResized = function() {

							};
							page.$actions = {
								$page: {
									browseMenu: {
										$title: "Predefined datasources",
										$url: "excel://excelDatasources/$template/$workingCopies?representation=excelBrowseDsMenuItem.$edit",
										$method: "POST",
										execute: function() {

										}
									},
									browseEntity: {
										$title: "Data model browse",
										$url: "excel://excelDatasources/$template/$workingCopies?representation=excelBrowseDsEntity.$edit",
										$method: "POST",
										execute: function() {

										}
									},
									refreshAll: {
										$title: "Refresh all",
										execute: function() {
											syra_site.excelDocument.refreshAllDatasources();
										}
									}
								},
								$record: {
									refresh: {
										$title: syra_local.box_refresh,
										execute: function(record) {
											syra_site.excelDocument.refreshDatasource(record.$uuid);
										}
									},
									"delete": {
										$title: syra_local.fieldDelete,
										execute: function(record) {
											syra_site.excelDocument.deleteDatasource(record.$uuid);
										}
									},
									edit: {
										$title: syra_local.fieldEdit,
										execute: function(record) {
											var $itemPage = {
												inlinePageHost: record,
												layoutSlot: record.body,
												$category: "page",
												$facet: "$edit",
												$representation: {
													$article: {
														$layout: {
															$items: []
														}
													},
													$prototype: helpers.object.clone(record.$prototype, true)
												}
											};
											delete $itemPage.$representation.$prototype.$links;
											$itemPage.$representation.$prototype.$actions = {
												$save: {
													$title: "Apply"
													/*,
                                                     execute: function(){
                                                     var resource = page.dataset;
                                                     resource.serviceUrl = _computeServiceUrl(resource);
                                                     syra_site.excelDocument.updateDatasourceToDocument(syra_site.excelDocument.workingCopyToDatasource(resource));
                                                     syra_site.excelDocument.addDatasource(resource);
                                                     /*(action.$diagnoses = action.$diagnoses || []).push({
                                                     severity: "success",
                                                     message: syra_excel_local.modificationsApplied
                                                     });
                                                     }
                                                     }
                                                     } */
												}
											};
											var page = syra_site.pageLoader.load($itemPage);

											var $binds = ["description", "title", "filter", "fetchAll", "fetchLimit", "orderBys"];
											for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
												var $item = {
													$bind: $binds[ii]
												};
												if ($item.$bind == "description") {
													$item.$isEditMode = false;
													$item.$isTopAlignement = true;
												}
												page.loadNewItem(page.layoutContent.domItem, $item);
											}
											_wrapOfficePage(page);
											page.applyChange(record.dataset);
										}
									}
								}
							};
							_wrapOfficePage(page);
						}
						record.body.appendChild(page.addMenuBar(page.$actions.$record));
						var $binds = ["dsName", "description", "filter", "orderBys", "fetchAll", "fetchLimit"];
						for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
							page.loadNewItem(record.body, {
								$bind: $binds[ii]
							}, record);
						}
					},
					$layout: {
						$items: []
					}
				}]
			}
		}
	},
	excelActionPanelDs: {
		$entityName: "excelDatasource",
		$details: {
			$layout: {
				$items: [{
					$bind: "title"
				}, {
					$bind: "entity"
				}, {
					$bind: "filter",
				}, {
					"$bind": "fetchAll"
				}, {
					"$bind": "fetchLimit"
				}]
			}
		}
	}
};

exports.getRepresentation = function(name) {
	return _representations[name];
};

exports.getPrototype = function(facet, representationName) {
	var proto = {
		$type: "application/json",
		$title: _excelDatasource.$title,
		$properties: helpers.object.clone(_excelDatasource.$properties, true),
		$links: {}
	};
	if (facet !== "$edit") {
		delete proto.$properties.orderBys.$capabilities;
	} else {
		proto.$actions = {
			$save: {
				$title: "Apply",
				$links: {
					$details: {
						$title: "Ok",
						$url: syra_site.$prototype && syra_site.$prototype.$links && syra_site.$prototype.$links.$home && syra_site.$prototype.$links.$home.$url,
						$isHidden: false
					}
				}
			}
		};
	}
	if (["$query", "$lookup", "$select", "$bulk", "$search"].indexOf(facet) >= 0) {
		proto = {
			$properties: {
				$resources: {
					$type: "application/x-array",
					$item: proto
				}
			}
		};
	}
	var r = representationName || _excelDatasource.$entityName;
	if (r == "excelActionPanelDs" && facet == "$details" && proto.$links.$edit) {
		proto.$links.$edit.$isHidden = true;
	}
	r = _representations[r];
	proto.$article = (r && r[facet] && r[facet].$layout) ? {
		$layout: r[facet].$layout
	} : null;
	return proto;
};


exports.applyMeta = function(resource) {
	var records = resource.$resources || [resource];
	for (var ii = 0, jj = records.length; ii < jj; ii++) {
		var record = records[ii];
		record.$properties = record.$properties || {};
		(record.$properties.fetchLimit = record.$properties.fetchLimit || {}).$isHidden = record.fetchAll;
		(record.$properties.menurecord = record.$properties.menurecord || {}).$isDisabled = record.endpoint == null;
		(record.$properties.representationRef = record.$properties.representationRef || {}).$isDisabled = record.endpoint == null;

		(record.$properties.filter = record.$properties.filter || {}).$isDisabled = record.entity == null;
		// Fallback: When a datasource is created by creating a new xlsx document,
		// there is no endpointRef and therefor no dataBaseUrl
		if ((!record.dataBaseUrl || record.dataBaseUrl === "") && record.serviceUrl) {
			record.dataBaseUrl = record.serviceUrl.split("/").slice(0, 5).join("/");
		}
		if (record.dataBaseUrl && record.representation) {
			record.$properties = record.$properties || {};
			var filter = record.$properties.filter = record.$properties.filter || {};
			filter.$links = filter.$links || {};
			filter.$links.$prototype = filter.$links.$prototype || {};
			filter.$links.$prototype.$url = "{dataBaseUrl}/$prototypes('{representation}.$query')";
		}
	}
};

function _computeServiceUrl(resource) {
	if (resource.dataBaseUrl && resource.representation && resource.entity) {
		var facetName = "$bulk";
		var limit = resource.fetchLimit;
		var params = ["representation=" + resource.representation + "." + facetName];
		if (!resource.fetchAll)
			params.push("count=" + limit);
		return ([resource.dataBaseUrl, resource.entity].join("/") +
			"?" +
			params.join("&"));
	} else
	if (resource.serviceUrl)
		return resource.serviceUrl;
	else
		return "";
}

function _applyDelta(resource, target) {
	var result = {};

	var datasource = target = target || syra_site.excelDocument.getDatasource(resource.$uuid) || {};
	if (resource.$isDeleted) {
		syra_site.excelDocument.deleteDatasource(resource.$uuid);
	} else {
		if (resource.endpointRef !== undefined) {
			var oldDataset = target.endpointRef && target.endpointRef.dataset;
			target.endpointRef = resource.endpointRef;
			if (target.endpointRef) {
				target.applicationId = (resource.endpointRef.applicationRef && resource.endpointRef.applicationRef.$uuid) || "";
				target.dataset = target.endpoint = resource.endpointRef.dataset;
				target.dataBaseUrl = ["/sdata", resource.endpointRef.application, resource.endpointRef.contract, target.dataset].join("/");
				if (target.dataset && oldDataset && target.dataset !== oldDataset) {
					target.entity = target.representation = target.menuItem = target.filter = target.title = "";
				}
			} else {
				target.applicationId = target.endpoint = target.dataset = target.databaseUrl = "";
				target.entity = target.representation = target.menuItem = target.filter = "";
			}
		}
		if (resource.menuItem !== undefined) {
			var val = target.menuItem = resource.menuItem;
			if (val) {
				switch (val.linkType || "$query") {
					case "$representation":
						target.entity = (val.representationRef && val.representationRef.entity) || "";
						target.representation = (val.representationRef && val.representationRef.representation) || "";
						break;
					case "$request":
						target.entity = "QUERY('" + val.requestName + "')";
						target.representation = "QUERY~" + val.requestName + (val.requestLevel ? "~" + val.requestLevel : "");
						break;
					case "$stats":
						target.entity = "STATS('" + val.requestName + "')";
						target.representation = "STATS~" + val.statName;
						break;
				}
				target.title = val.title;
			} else {
				target.entity = target.representation = target.filter = target.title = "";
			}
		}
		if (resource.representationRef !== undefined) {
			target.representationRef = resource.representationRef;
			if (resource.representationRef) {
				target.representation = resource.representationRef.representation;
				target.entity = resource.representationRef.entity;
				target.title = resource.representationRef.title;
			} else {
				target.representation = target.entity = target.filter = target.title = "";
			}
		}
		if (resource.fetchAll !== undefined) {
			target.fetchAll = resource.fetchAll;
		}
		if (resource.fetchLimit !== undefined) {
			target.fetchLimit = resource.fetchLimit;
		}
		if (resource.filter !== undefined) {
			target.filter = resource.filter;
		}
		if (resource.title !== undefined) {
			target.title = resource.title;
		}
		if (resource.hasOwnProperty("orderBys")) {
			target.orderBys = resource.orderBys.map(function(order) {
				return {
					$uuid: order.$uuid,
					name: order.name,
					title: order.title
				};
			});
		}
	}
	syra_site.excelDocument._saveDatasources();
	if (resource.$actions)
		forEachKey(resource.$actions, function(key, action) {
			if (!action.$isRequested) {
				if (_excelDatasource && _excelDatasource.$actions && _excelDatasource.$actions[key] && typeof _excelDatasource.$actions[key].$isDisabled === "function") {
					action.$isDisabled = _excelDatasource.$actions[key].$isDisabled(target);
				} else {
					action.$isDisabled = false;
				}
				return;
			}
			result = _actions[key] && _actions[key](action, target);
			action.$isRequested = false;
			action.$isDisabled = true;
		});
	return result;
}

exports.dispatcher = {
	PUT: function(excelQuery, id, data, onSuccess, onError) {
		var result = null;
		// only actions for now
		// data = id ? data : data.$resources;
		var resData = syra_site.excelDocument.getDatasourcesResource(id ? data.$uuid : null);
		if (data) {
			_applyDelta(data, resData);
			var resources = data.$resources;
			if (resources && Array.isArray(resources))
				resources.forEach(function(res) {
					_applyDelta(res);
				});
		}
		if (resData.$resources && data.$resources) {
			var dataMap = data.$resources.reduce(function(prev, val) {
				prev[val.$uuid] = val;
				return prev;
			}, {});
			resData.$resources.forEach(function(r) {
				dataMap[r.$uuid] && helpers.object.extend(r, dataMap[r.$uuid], false, true);
			});
			if (data.$actions)
				helpers.object.extend(resData.$actions = (resData.$actions || {}), data.$actions, false, true);
		} else
		if (id)
			helpers.object.extend(resData, data, false, true);
		onSuccess(resData);
	},
	DELETE: function(excelQuery, id, data, onSuccess, onError) {
		if (id) {
			syra_site.excelDocument.deleteDatasource(id);
			syra_site.excelDocument._saveDatasources();
		}
		var h = syra_site.$prototype && syra_site.$prototype.$links && syra_site.$prototype.$links.$home;
		onSuccess({}, {
			headers: {
				location: h && h.$url
			},
			data: {
				$diagnoses: [{
					$severity: "success",
					$message: syra_excel_local.resourceDeleted
				}]
			}
		});
	}
};