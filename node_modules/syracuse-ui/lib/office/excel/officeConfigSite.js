"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Site = require('syracuse-ui/lib/site/site').Site;
var Controller = require("./controller").Controller;
var ExcelDocument = require('msoffice/lib/excel/excelDocument').ExcelDocument;
var dispatcher = require('msoffice/lib/excel/dispatcher');
var OfficePage = require('syracuse-ui/lib/office/officePage').OfficePage;
var store = require('syracuse-ui/lib/site/tools/store');

function OfficeSite() {}

exports.OfficeSite = helpers.defineClass(OfficeSite, Site, {
	_onAfterLogon: function() {
		var self = this;
		syra_site.history.start();
		var excelLoaded = (external && external.Application);
		excelLoaded && external.onLogon();
		// check addin version
		syra_controller.callServer(null, {
			$location: {
				$url: "/sdata/syracuse/collaboration/syracuse/moduleVersions('officeAddin')?representation=moduleVersion.$details"
			}
		}, function(data, response) {
			if (data && data.version) {
				self._hasBetterAddinVersion = (excelLoaded && (external.GetAddinVersion() < data.version)) || !excelLoaded;
				self._hasBetterAddinVersion && self.renderUpdatePanel();
			}
		});
		self.layoutSlot.style.display = "";
		self.resize();
	},
	renderUpdatePanel: function() {
		var self = this;
		if (self.$$updatePanel) {
			self.$$updatePanel.show();
			return;
		}
		self.$$updatePanel = $("<div id='s-site-updatePanel'/>").prependTo(self.body);
		$("<a href='/msoffice/lib/general/addIn/SyracuseOfficeAddinsSetup.EXE'>A newer version of the addin is available. Click here to download it</a>").appendTo(self.$$updatePanel);
	},
	onMainPageChange: function($itemPage) {
		this.$$updatePanel = null;
		Site.prototype.onMainPageChange.apply(this, arguments);
		if (this._hasBetterAddinVersion)
			this.renderUpdatePanel();
		// TODO: should this be conditionnal ?
		this.mainPage.onSelectRecord = function(result) {
			if (Object.keys(result).length) {
				var first = result[Object.keys(result)[0]];
				external.onSelectRecord(JSON.stringify(first.$prototype), JSON.stringify(first.dataset));
			}
		};
		// autoload should be done by main page
		// syra_site.excelDocument.autoLoad();
		return this.mainPage;
	},
	_renderHeader: function() {
		this.header = document.createElement("header");
		this.header.setAttribute("id", "s-site-header");
		this.dom.setZIndex(this.header);

		this.headerTop = document.createElement("div");
		this.headerTop.id = "s-site-header-top";

		this.addLogo(this.headerTop);

		var middleCell = document.createElement("div");
		middleCell.id = "s-site-header-middle-cell";
		this.headerTop.appendChild(middleCell);

		this.setArticleId(this.layoutSlot);
		this.topPanel.addOpener(middleCell);

		this.loadNewItem(this.headerTop, {
			$bind: "$help",
			$category: "link",
			$noText: true,
			$skin: "s-site-help-link",
			$icon: {
				$value: "help"
			}
		});

		this.homeLink = this.loadNewItem(this.headerTop, {
			$bind: "$home",
			$category: "link",
			$noText: true,
			$skin: "s-site-home"
		});
		this.header.appendChild(this.headerTop);
		this.layoutSlot.insertBefore(this.header, this.layoutSlot.firstChild);

	},
	getPageTemplateUrl: function(url) {
		if (url.split(":")[0] == "excel") {
			return "excel://$prototypes('{representation}')";
		}
		return Site.prototype.getPageTemplateUrl.call(this, url);
	}
});

exports.load = function($item, $prototype) {
	window.syra_store = store;
	var widgetsLibrary = require('syracuse-ui/lib/site/widgetsLibrary');
	widgetsLibrary.defaultPageCategory = OfficePage;
	widgetsLibrary.pageCategories.worksheet = require("./excelPage").ExcelPage;
	var site = new OfficeSite();
	site.excelDocument = new ExcelDocument();
	site.loadBox({
		isOffice: true,
		widgetsLibrary: widgetsLibrary,
		isUserEndpointChangeDisabled: true,
		controllerClass: Controller,
		$item: $item,
		$prototype: $prototype
	});
	site.requestControllers["excel"] = require("syracuse-ui/lib/office/excel/excelRequest");
	site.$syracuseMainPageUrl = $item.$syracuseMainPageUrl;
	//
	site.agents = {
		excelDatasources: {
			saveDatasource: function(article, menu, record) {
				site.excelDocument.addDatasource(record);
			}
		}
	};
	dispatcher.on("refreshAll", function() {
		site.excelDocument.refreshAllDatasources();
	});
	//
	return site;
};