"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Site = require('syracuse-ui/lib/site/site').Site;
var Controller = require("./controller").Controller;
var ExcelDocument = require('msoffice/lib/excel/excelDocument').ExcelDocument;
var OfficeSiteTopPanel = require("./officeSiteTopPanel").OfficeSiteTopPanel;
var dispatcher = require('msoffice/lib/excel/dispatcher');
var OfficePage = require('syracuse-ui/lib/office/officePage').OfficePage;

function OfficeSite(){
}

exports.OfficeSite = helpers.defineClass(OfficeSite, Site, {
    _onLogon: function(){
        var self = this;
        var excelLoaded = (external && external.Application);
        excelLoaded && external.onLogon();
        // check addin version
        document.controller.sendRequest(null, {
            $location: {
                $url: "/sdata/syracuse/collaboration/syracuse/moduleVersions('excelAddin')?representation=moduleVersion.$details"
            }
        }, function(data, response){
            if (data && data.version) {
                self._hasBetterAddinVersion = (excelLoaded && (external.GetAddinVersion() < data.version)) || !excelLoaded;
                self._hasBetterAddinVersion && self.renderUpdatePanel();
            }
        });
    },
    renderUpdatePanel: function(){
        var self = this;
        if (self.$$updatePanel) {
            self.$$updatePanel.show();
            return;
        }
        self.$$updatePanel = $("<div id='s-site-updatePanel'/>").prependTo(self.$$body);
        $("<a href='/msoffice/lib/excel/addIn/ExcelAddinSetup.msi'>A newer version of the addin is available. Click here to download it</a>").appendTo(self.$$updatePanel);
    },
    onMainPageChange: function($itemPage){
        this.$$updatePanel = null;
        Site.prototype.onMainPageChange.apply(this, arguments);
        if (this._hasBetterAddinVersion) 
            this.renderUpdatePanel();
        // TODO: should this be conditionnal ?
        this.mainPage.onSelectRecord = function(result){
            if (Object.keys(result).length) {
                var first = result[Object.keys(result)[0]];
                external.onSelectRecord(JSON.stringify(first.$prototype), JSON.stringify(first.dataset));
            }
        }
        // autoload should be done by main page
        // document.site.excelDocument.autoLoad();
        return this.mainPage;
    },
    updateDocumentTitle: function(){
        var title = this.mainPage.getTitle();
        if (title) {
            var record = this.userProfile.dataset;
            if (record) {
                if (record.selectedRole) {
                    title += " (" + record.selectedRole.description + ")";
                }
                if (record.selectedEndpoint) {
                    title += " (" + record.selectedEndpoint.description + ")";
                }
            }
            else {
                this.userProfile.$isTitleUpdateRequested = true;
            }
            this.mainPage.drawUserProfile(record);
            document.title = title;
        }
    },
    
    _renderHeader: function(){
        var self = this;
        this._$$header = $(this._header = document.createElement("header"));
        this._header.setAttribute("id", "s-site-header");
        this.setZIndex(this._header);
		
        var $$top = $("<div id='s-site-header-top'>");
        var $$topLeft = $("<div id='s-site-header-top-left'/>").appendTo($$top);
        
        $$topLeft.append("<div id='s-site-sage'/>").append($("<div id='s-site-module'/>").text(self.$item.$module));
        
        self._appendTopPanelOpener($$top, OfficeSiteTopPanel);
        
        var $$topRight = $("<div id='s-site-header-top-right'/>").appendTo($$top);
        
        this.loadNewItem($("<div id='s-site-home'/>").appendTo($$topRight), {
            $bind: "$home",
            $category: "link",
            $noText: true,
            $skin: "s-site-home-link"
        });
        
        this.loadNewItem($("<div id='s-site-help'/>").appendTo($$topRight), {
            $bind: "$help",
            $category: "link",
            $noText: true,
            $skin: "s-site-help-link"
        });
        
        
        self.$$container.append(self._$$header.append($$top)).append("<div id='s-site-top-pn'/>");
        //self.appendDiagnosesPanel(self.$$container, self);
    },
    _renderSearch: function($$container){
    }
});

exports.load = function($item, $prototype){
    var widgetsLibrary = require('syracuse-ui/lib/site/widgetsLibrary');
    widgetsLibrary.defaultPageCategory = OfficePage;
    widgetsLibrary.pageCategories.worksheet = require("./excelPage").ExcelPage;
    var site = new OfficeSite();
    site.excelDocument = new ExcelDocument();
    site.loadBox({
        widgetsLibrary: widgetsLibrary,
        userProfileClass: require("syracuse-ui/lib/office/userProfile").UserProfile,
        controllerClass: Controller,
        $item: $item,
        $prototype: $prototype
    });
    site.requestControllers["excel"] = require("syracuse-ui/lib/office/excel/excelRequest");
    site.$syracuseMainPageUrl = $item.$syracuseMainPageUrl;
    //
    site.agents = {
        excelDatasources: {
            saveDatasource: function(article, menu, record){
                site.excelDocument.addDatasource(record);
            }
        }
    }
    dispatcher.on("refreshAll", function(){
        site.excelDocument.refreshAllDatasources();
    });
    //
    return site;
};
