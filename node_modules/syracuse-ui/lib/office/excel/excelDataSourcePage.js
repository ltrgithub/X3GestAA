"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;

function _setPrototype(page) {
	page.$prototype = {
		$properties: {
			description: {
				$title: "Description",
				$type: "application/x-string"
			},
			dsName: {
				$title: "Name",
				$type: "application/x-string"
			},
			title: {
				$title: "Title",
				$type: "application/x-string"
			},
			endpoint: {
				$title: "Endpoint",
				$type: "application/x-string"
			},
			endpointRef: {
				$isMandatory: true,
				$title: "Endpoint",
				$value: "{description}",
				$baseUrl: "/sdata/syracuse/collaboration/syracuse",
				$type: "application/x-reference",
				$item: {
					$key: "{dataset}",
					$links: {
						$lookup: {
							$url: "/sdata/syracuse/collaboration/syracuse/endPoints?representation=endPoint.$lookup"
						}
					},
					$properties: {
						applicationRef: {},
						dataset: {},
						application: {},
						contract: {}
					}
				}
			},
			menuItem: {
				$title: "Data Source",
				$type: "application/x-reference",
				$item: {
					$value: "{description}",
					$key: "{description}",
					$properties: {
						representationRef: {},
						title: {},
						linkType: {},
						requestName: {},
						requestLevel: {},
						statName: {},
						$links: {}
					},
					$links: {
						$lookup: {
							$url: "/sdata/syracuse/collaboration/syracuse/menuItems?representation=menuItem.$lookup&where=(application eq \"{applicationId}\") and (((linkType eq \"$representation\") and (facet eq \"$query\")) or (linkType eq \"$request\") or (linkType eq \"$stats\"))"
						}
					}
				}
			},
			orderBys: {
				$title: "Order bys",
				$capabilities: "delete,reorder",
				$type: "application/x-array",
				$item: {
					$type: "application/x-reference",
					$item: {
						$value: "{name}",
						$title: "{title}",
						$key: "{$uuid}",
						$properties: {
							title: {
								"$type": "application/x-string"
							},
							name: {
								"$type": "application/x-string"
							}
						}
					}

				},
				$links: (page.$facet == "$edit") ? {
					$select: {
						$title: "Add",
						$url: "/sdata/syracuse/collaboration/syracuse/lookupEntityAttrs?representation=lookupEntityAttr.$select&dataset={endpoint}&entity={entity}"
					}
				} : null
			},
			entity: {
				$title: "Entity",
				$type: "application/x-string"
			},
			representation: {
				$title: "Representation",
				$type: "application/x-string"
			},
			representationRef: {
				$title: "Representation",
				$capabilities: "",
				$type: "application/x-object",
				$item: {
					$value: "{description}",
					$key: "{respresentation}",
					$properties: {
						entity: {
							$title: "Entity",
							$type: "application/x-string"
						},
						representation: {
							$title: "Representation",
							$type: "application/x-string"
						}
					},
					$links: {
						$lookup: {
							$url: "/sdata/syracuse/collaboration/syracuse/representationProxies?representation=representationProxy.$lookup&dataset={endpoint}"
						}
					}
				}
			},
			fetchAll: {
				$title: "Fetch all",
				$type: "application/x-boolean"
			},
			fetchLimit: {
				$title: "Fetch limit",
				$type: "application/x-integer"
			},
			filter: {
				$title: "Filter",
				$type: "application/x-filter"
			}
		}
	};
	switch (page.$facet) {
		case "$dashboard":
		case "$query":
			page.$prototype = {
				$title: "Workbook settings - Data Sources",
				$properties: {
					$resources: {
						$type: "application/x-array",
						$item: page.$prototype
					}
				}
			};
			break;
		case "$edit":
			page.$prototype.$actions = {
				$save: {
					$title: "Apply"
				}
			};
			break;
	}
}

/*
 $save: {
 $title: "Apply"
 
 execute: function(){
 var resource = page.dataset;
 resource.serviceUrl = _computeServiceUrl(resource);
 syra_site.excelDocument.updateDatasourceToDocument(syra_site.excelDocument.workingCopyToDatasource(resource));
 syra_site.excelDocument.addDatasource(resource);
 /*(action.$diagnoses = action.$diagnoses || []).push({
 severity: "success",
 message: syra_excel_local.modificationsApplied
 });
 }
 }
 } */
function _setArticle(page) {
	switch (page.$facet) {
		case "$dashboard":
		case "$query":
			page.layoutContent.domItem.appendChild(_addMenuBar({
				browseMenu: {
					$title: "Predefined datasources",
					$url: "excel://excelDatasources/$template/$workingCopies?representation=excelBrowseDsMenuItem.$edit"
				},
				browseEntity: {
					$title: "Data model browse",
					$url: "excel://excelDatasources/$template/$workingCopies?representation=excelBrowseDsEntity.$edit"
				},
				refreshAll: {
					$title: "Refresh all"
				}
			}));
			page.loadNewItem(page.layoutContent.domItem, {
				$bind: "$resources",
				$format: "cards",
				renderRecordContent: function(record) {
					syra_site.dom.removeChild(record.toolbar);
					record.onPreInitializeInlinePage = function(inlinePage, $article) {};
					record.onInlinePageResized = function() {

					};
					record.body.appendChild(_addMenuBar({
						refresh: {
							$title: syra_local.box_refresh
						},
						"delete": {
							$title: syra_local.fieldDelete
						},
						edit: {
							$title: syra_local.fieldEdit
						}
					}));
					var $binds = ["dsName", "description", "filter", "orderBys", "fetchAll", "fetchLimit"];
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						record.page.loadNewItem(record.body, {
							$bind: $binds[ii]
						}, record);
					}
				},
				$layout: {
					$items: []
				}
			});
			page.applyChange(syra_site.excelDocument.getDatasourcesResource(null, true));
			break;
		case "$edit":
			var $binds = ["description", "title", "filter", "fetchAll", "fetchLimit", "orderBys"];
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $item = {
					$bind: $binds[ii]
				};
				if ($item.$bind == "description") {
					$item.$isEditMode = false;
					$item.$isTopAlignement = true;
				}
				page.loadNewItem(page.layoutContent.domItem, $item);
			}
			break;
	}
}

function _addMenuBar($actions) {
	var $binds = Object.keys($actions);
	var nav = document.createElement("div");
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $bind = $binds[ii];
		var btn = syra_menus.addTextButton($actions[$bind].$title, "s-mn-list-link", "onButtonClick", null, $bind);
		nav.appendChild(btn).syraValue = $bind;
	}
	return nav;
}

function ExcelDatasourcePage() {}

exports.ExcelDatasourcePage = helpers.defineClass(ExcelDatasourcePage, DesktopPage, {
	loadBox: function() {
		_setPrototype(this);
		DesktopPage.prototype.loadBox.call(this);
		_setArticle(this);
	},
	ensureDefaultArticle: function() {
		return {
			$layout: {
				$items: []
			}
		};
	},
	onButtonClick: function(event, btn) {
		var article = syra_store.findArticle(btn);
		switch (btn.syraValue) {
			case "browseMenu":
				break;
			case "browseEntity":
				break;
			case "refreshAll":
				syra_site.excelDocument.refreshAllDatasources();
				break;
			case "refresh":
				syra_site.excelDocument.refreshDatasource(article.$uuid);
				break;
			case "delete":
				syra_site.excelDocument.deleteDatasource(article.$uuid);
				break;
			case "edit":
				var page = syra_site.pageLoader.load({
					inlinePageHost: article,
					layoutSlot: article.body,
					"$category": "excelDatasource",
					$facet: "$edit",
					$representation: {
						$prototype: {},
						$article: {
							$layout: {
								$items: []
							}
						}
					}
				});
				page.applyChange(article.dataset);
				break;
		}
	},
	notifyChangeToServer: function(sendBag) {
		var resData = syra_site.excelDocument.getDatasourcesResource(sendBag.$uuid);
		sendBag.$etag = this.dataset.$etag;
		var result = {};

		var datasource = resData = resData || syra_site.excelDocument.getDatasource(sendBag.$uuid) || {};
		if (sendBag.$isDeleted) {
			syra_site.excelDocument.deleteDatasource(sendBag.$uuid);
		} else {
			if (sendBag.endpointRef !== undefined) {
				var oldDataset = resData.endpointRef && resData.endpointRef.dataset;
				resData.endpointRef = sendBag.endpointRef;
				if (resData.endpointRef) {
					resData.applicationId = (sendBag.endpointRef.applicationRef && sendBag.endpointRef.applicationRef.$uuid) || "";
					resData.dataset = resData.endpoint = sendBag.endpointRef.dataset;
					resData.dataBaseUrl = ["/sdata", sendBag.endpointRef.application, sendBag.endpointRef.contract, resData.dataset].join("/");
					if (resData.dataset && oldDataset && resData.dataset !== oldDataset) {
						resData.entity = resData.representation = resData.menuItem = resData.filter = resData.title = "";
					}
				} else {
					resData.applicationId = resData.endpoint = resData.dataset = resData.databaseUrl = "";
					resData.entity = resData.representation = resData.menuItem = resData.filter = "";
				}
			}
			if (sendBag.menuItem !== undefined) {
				var val = resData.menuItem = sendBag.menuItem;
				if (val) {
					switch (val.linkType || "$query") {
						case "$representation":
							resData.entity = (val.representationRef && val.representationRef.entity) || "";
							resData.representation = (val.representationRef && val.representationRef.representation) || "";
							break;
						case "$request":
							resData.entity = "QUERY('" + val.requestName + "')";
							resData.representation = "QUERY~" + val.requestName + (val.requestLevel ? "~" + val.requestLevel : "");
							break;
						case "$stats":
							resData.entity = "STATS('" + val.requestName + "')";
							resData.representation = "STATS~" + val.statName;
							break;
					}
					resData.title = val.title;
				} else {
					resData.entity = resData.representation = resData.filter = resData.title = "";
				}
			}
			if (sendBag.representationRef !== undefined) {
				resData.representationRef = sendBag.representationRef;
				if (sendBag.representationRef) {
					resData.representation = sendBag.representationRef.representation;
					resData.entity = sendBag.representationRef.entity;
					resData.title = sendBag.representationRef.title;
				} else {
					resData.representation = resData.entity = resData.filter = resData.title = "";
				}
			}
			if (sendBag.fetchAll !== undefined) {
				resData.fetchAll = sendBag.fetchAll;
			}
			if (sendBag.fetchLimit !== undefined) {
				resData.fetchLimit = sendBag.fetchLimit;
			}
			if (sendBag.filter !== undefined) {
				resData.filter = sendBag.filter;
			}
			if (sendBag.title !== undefined) {
				resData.title = sendBag.title;
			}
			if (sendBag.hasOwnProperty("orderBys")) {
				resData.orderBys = sendBag.orderBys.map(function(order) {
					return {
						$uuid: order.$uuid,
						name: order.name,
						title: order.title
					};
				});
			}
		}
		syra_site.excelDocument._saveDatasources();
		var $action = sendBag.$actions && sendBag.$action.$save;
		if ($action) {
			action.$isRequested = false;
			action.$isDisabled = true;
		}
		this.applyChange(sendBag);
	},
	dispose: function() {
		DesktopPage.prototype.dispose.call(this);
	}
});