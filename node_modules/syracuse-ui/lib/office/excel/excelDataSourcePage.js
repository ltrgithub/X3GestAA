"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;

var _entities = {
	excelDocuments: require("./excelPublisher")
};
var _representations = {
	excelDocument: _entities.excelDocuments
};

function _computeServiceUrl(resource) {
	if (resource.dataBaseUrl && resource.representation && resource.entity) {
		var facetName = "$bulk";
		if (resource.entity.indexOf("STATS('") === 0)
			facetName = "$cube";
		var limit = resource.fetchLimit;
		var params = ["representation=" + resource.representation + "." + facetName];
		if (!resource.fetchAll && (facetName === "$query" || facetName === "$cube"))
			params.push("count=" + limit);
		return ([resource.dataBaseUrl, resource.entity].join("/") +
			"?" +
			params.join("&"));
	} else
	if (resource.serviceUrl)
		return resource.serviceUrl;
	else
		return "";
}

function _loadPage(articleParent, $excelView, dataset) {
	var page = syra_site.pageLoader.load({
		layoutSlot: syra_site.body,
		$category: "excelDatasource",
		$facet: "$edit",
		$representation: {
			$prototype: {
				$excelView: $excelView
			},
			$article: {
				$layout: {
					$items: []
				}
			}
		}
	});
	page.unloadRelated = function(save) {
		var related = this;
		setTimeout(function() {
			var openerPage = related.openerArticle.page;
			try {
				openerPage.fetch();
			} catch (error) {
				alert("in fetch");
			}
			/*var record = related.openerArticle;
             if (save) {
             var $binds = Object.keys(record.$prototype.$properties);
             var $delta = {};
             for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
             var $bind = $binds[ii];
             if (related.dataset[$bind] != undefined) {
             $delta[$bind] = related.dataset[$bind];
             }
             }
             syra_site.deltaManager.applyObjectDelta(record.page, record.dataset, $delta);
             record.applyChange($delta);
             }*/
			try {
				syra_site.body.removeChild(related.domItem);
				related.dispose && related.dispose();
				syra_site.dom.display(openerPage.domItem, true);
				syra_site.resize();
			} catch (error) {
				alert("in resize");
			}
		}, 10);
	};

	page.applyChange({
		$actions: {}
	});
	page.openerArticle = articleParent;
	syra_site.dom.display(articleParent.page.domItem, false);

	dataset && page.applyChange(dataset);

}

function _addMenuBar($menus) {
	var nav = document.createElement("div");
	for (var ii = 0, jj = $menus.length; ii < jj; ii++) {
		var btn = syra_menus.addTextButton($menus[ii].$title, "s-mn-list-link", "onButtonClick", null, $menus[ii].$bind);
		nav.appendChild(btn).syraValue = $menus[ii].$bind;
	}
	return nav;
}


function ExcelDatasourcePage() {}

exports.ExcelDatasourcePage = helpers.defineClass(ExcelDatasourcePage, DesktopPage, {
	initializeArticle: function($itemPage) {
		var $excelView = $itemPage.$excelView || $itemPage.$representation.$prototype.$excelView;
		var $items = [];
		this.$prototype = {
			$properties: {
				description: {
					$title: "Description",
					$type: "application/x-string"
				},
				dsName: {
					$title: "Name",
					$type: "application/x-string"
				},
				title: {
					$title: "Title",
					$type: "application/x-string"
				},
				endpoint: {
					$title: "Endpoint",
					$type: "application/x-string"
				},
				endpointRef: {
					$isMandatory: true,
					$title: "Endpoint",
					$value: "{description}",
					$baseUrl: "/sdata/syracuse/collaboration/syracuse",
					$type: "application/x-reference",
					$item: {
						$key: "{dataset}",
						$links: {
							$lookup: {
								$url: "/sdata/syracuse/collaboration/syracuse/endPoints?representation=endPoint.$lookup"
							}
						},
						$properties: {
							applicationRef: {},
							dataset: {},
							application: {},
							contract: {}
						}
					}
				},
				menuItem: {
					$title: "Data Source",
					$type: "application/x-reference",
					$item: {
						$value: "{description}",
						$key: "{description}",
						$properties: {
							representationRef: {},
							title: {},
							linkType: {},
							requestName: {},
							requestLevel: {},
							statName: {},
							$links: {}
						},
						$links: {
							$lookup: {
								$url: "/sdata/syracuse/collaboration/syracuse/menuItems?representation=menuItem.$lookup&where=(application eq \"{applicationId}\") and (((linkType eq \"$representation\") and (facet eq \"$query\")) or (linkType eq \"$request\") or (linkType eq \"$stats\"))"
							}
						}
					}
				},
				orderBys: {
					$title: "Order bys",
					$capabilities: "delete,reorder",
					$type: "application/x-array",
					$item: {
						$type: "application/x-reference",
						$item: {
							$value: "{name}",
							$title: "{title}",
							$key: "{$uuid}",
							$properties: {
								title: {
									"$type": "application/x-string"
								},
								name: {
									"$type": "application/x-string"
								}
							}
						}

					},
					$links: (this.$facet == "$edit") ? {
						$select: {
							$title: "Add",
							$url: "/sdata/syracuse/collaboration/syracuse/lookupEntityAttrs?representation=lookupEntityAttr.$select&dataset={endpoint}&entity={entity}"
						}
					} : null
				},
				entity: {
					$title: "Entity",
					$type: "application/x-string"
				},
				representation: {
					$title: "Representation",
					$type: "application/x-string"
				},
				representationRef: {
					$title: "Representation",
					$capabilities: "",
					$type: "application/x-object",
					$item: {
						$value: "{description}",
						$key: "{respresentation}",
						$properties: {
							entity: {
								$title: "Entity",
								$type: "application/x-string"
							},
							representation: {
								$title: "Representation",
								$type: "application/x-string"
							}
						},
						$links: {
							$lookup: {
								$url: "/sdata/syracuse/collaboration/syracuse/representationProxies?representation=representationProxy.$lookup&dataset={endpoint}"
							}
						}
					}
				},
				fetchAll: {
					$title: "Fetch all",
					$type: "application/x-boolean"
				},
				fetchLimit: {
					$title: "Fetch limit",
					$type: "application/x-integer"
				},
				filter: {
					$title: "Filter",
					$type: "application/x-filter"
				}
			}
		};
		if (this.$facet == "$query") {
			this.$prototype = {
				$title: "Workbook settings - Data Sources",
				$properties: {
					$resources: {
						$type: "application/x-array",
						$item: this.$prototype
					}
				}
			};
			$items = [{
				$bind: "$resources",
				$format: "cards",
				renderRecordContent: function(record) {
					syra_site.dom.removeChild(record.toolbar);
					record.body.appendChild(_addMenuBar([{
						$bind: "refresh",
						$title: syra_local.box_refresh
					}, {
						$bind: "delete",
						$title: syra_local.fieldDelete
					}, {
						$bind: "edit",
						$title: syra_local.fieldEdit,
					}]));
					var $binds = ["dsName", "description", "filter", "orderBys", "fetchAll", "fetchLimit"];
					for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
						record.page.loadNewItem(record.body, {
							$bind: $binds[ii]
						}, record);
					}
				},
				$layout: {
					$items: []
				}
			}];

		} else {
			var $binds;
			switch ($excelView) {
				case "browseMenu":
					this.$prototype.$title = "Predefined datasources";
					$binds = ["endpointRef", "menuItem", "title", "filter", "fetchAll", "fetchLimit", "orderBys"];
					$itemPage.initData = {
						$uuid: helpers.uuid.generate(),
						fetchLimit: 1000
					};
					syra_site.excelDocument.applyMeta($itemPage.initData);
					break;
				case "browseEntity":
					this.$prototype.$title = "Data model browse";
					$binds = ["endpointRef", "representationRef", "title", "filter", "fetchAll", "fetchLimit", "orderBys"];
					break;
			}
			if (this.$facet == "$details") {
				//"$url": "excel://excelDatasources('{$currentDatasource}')?representation=excelActionPanelDs.$details"
				$binds = ["entity", "description", "title", "filter", "fetchAll", "fetchLimit", "orderBys"];
			}
			if (!$binds) {
				$binds = ["description", "title", "filter", "fetchAll", "fetchLimit", "orderBys"];
			}
			for (var ii = 0, jj = $binds.length; ii < jj; ii) {
				var $item = {
					$bind: $binds[ii]
				};
				if (this.$facet = "$edit" && $item.$bind == "description") {
					$item.$isEditMode = false;
					$item.$isTopAlignement = true;
				}
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $item = {
						$bind: $binds[ii]
					};

					$items.push($item);
				}
			}
			if (this.$facet = "$edit") {
				this.$prototype.$actions = {
					$save: {
						$title: "Apply"
					},
					$abort: {
						$title: syra_local.inlinepage_cancel
					}
				};
			}
		}
		return {
			$layout: {
				$items: $items
			}
		};
	},

	loadBox: function(initData) {
		DesktopPage.prototype.loadBox.call(this, initData);
		switch (this.$facet) {
			case "$query":
				this.layoutContent.domItem.insertBefore(_addMenuBar([{
					$bind: "browseMenu",
					$title: "Predefined datasources"
				}, {
					$bind: "browseEntity",
					$title: "Data model browse"
				}, {
					$bind: "refreshAll",
					$title: "Refresh all",
				}]), this.layoutContent.domItem.firstChild);
				this.fetch();
				break;
			case "$details":
				this.layoutContent.domItem.insertBefore(_addMenuBar([{
					$bind: "refreshAll",
					$title: "Refresh all",
				}]), this.layoutContent.domItem.firstChild);
				break;
		}
	},
	fetch: function() {
		this.applyChange(syra_site.excelDocument.getDatasourcesResource(this.$facet == "$query" ? null : syra_site.excelDocument.getCurrentDatasourceId(), true));
	},
	onMenuClick: function(menuItem) {
		switch (menuItem.$bind) {
			case "$save":
				menuItem.articleParent.notifyActionChange(menuItem, menuItem.articleParent, {
					$save: {
						$isRequested: true
					}
				});
				this.unloadRelated(menuItem.$bind == "$save");
				return false;
			case "$abort":
				this.unloadRelated(menuItem.$bind == "$save");
				return false;
		}
		return true;
	},
	ensureDefaultArticle: function($article) {
		return $article;
	},
	onButtonClick: function(event, btn) {
		var article = syra_store.findArticle(btn);
		switch (btn.syraValue) {
			case "refreshAll":
				syra_site.excelDocument.refreshAllDatasources();
				break;
			case "refresh":
				syra_site.excelDocument.refreshDatasource(article.$uuid);
				break;
			case "delete":
				syra_site.excelDocument.deleteDatasource(article.$uuid);
				syra_site.excelDocument._saveDatasources();
				article.page.fetch();
				break;
			case "edit":
				_loadPage(article, "edit", article.dataset);
				break;
			case "browseMenu":
			case "browseEntity":
				_loadPage(article, btn.syraValue);
				break;
		}
	},
	notifyChangeToServer: function(sendBag) {
		var resData = syra_site.excelDocument.getDatasourcesResource(sendBag.$uuid);
		sendBag.$etag = this.dataset.$etag;
		var result = {};

		var datasource = resData = resData || syra_site.excelDocument.getDatasource(sendBag.$uuid) || {};
		if (sendBag.$isDeleted) {
			syra_site.excelDocument.deleteDatasource(sendBag.$uuid);
		} else {
			if (sendBag.endpointRef !== undefined) {
				var oldDataset = resData.endpointRef && resData.endpointRef.dataset;
				resData.endpointRef = sendBag.endpointRef;
				if (resData.endpointRef) {
					resData.applicationId = (sendBag.endpointRef.applicationRef && sendBag.endpointRef.applicationRef.$uuid) || "";
					resData.dataset = resData.endpoint = sendBag.endpointRef.dataset;
					resData.dataBaseUrl = ["/sdata", sendBag.endpointRef.application, sendBag.endpointRef.contract, resData.dataset].join("/");
					if (resData.dataset && oldDataset && resData.dataset !== oldDataset) {
						resData.entity = resData.representation = resData.menuItem = resData.filter = resData.title = "";
					}
				} else {
					resData.applicationId = resData.endpoint = resData.dataset = resData.databaseUrl = "";
					resData.entity = resData.representation = resData.menuItem = resData.filter = "";
				}
			}
			if (sendBag.menuItem !== undefined) {
				var val = resData.menuItem = sendBag.menuItem;
				if (val) {
					switch (val.linkType || "$query") {
						case "$representation":
							resData.entity = (val.representationRef && val.representationRef.entity) || "";
							resData.representation = (val.representationRef && val.representationRef.representation) || "";
							break;
						case "$request":
							resData.entity = "QUERY('" + val.requestName + "')";
							resData.representation = "QUERY~" + val.requestName + (val.requestLevel ? "~" + val.requestLevel : "");
							break;
						case "$stats":
							resData.entity = "STATS('" + val.requestName + "')";
							resData.representation = "STATS~" + val.statName;
							break;
					}
					resData.title = val.title;
				} else {
					resData.entity = resData.representation = resData.filter = resData.title = "";
				}
			}
			if (sendBag.representationRef !== undefined) {
				resData.representationRef = sendBag.representationRef;
				if (sendBag.representationRef) {
					resData.representation = sendBag.representationRef.representation;
					resData.entity = sendBag.representationRef.entity;
					resData.title = sendBag.representationRef.title;
					/*["representation", "entity", "title"].forEach(function($bind){
                     if (sendBag.representationRef[$bind] !== undefined) {
                     resData[$bind] = sendBag.representationRef[$bind];
                     }
                     });*/
				} else {
					resData.representation = resData.entity = resData.filter = resData.title = "";
				}
			}
			if (sendBag.fetchAll !== undefined) {
				resData.fetchAll = sendBag.fetchAll;
			}
			if (sendBag.fetchLimit !== undefined) {
				resData.fetchLimit = sendBag.fetchLimit;
			}
			if (sendBag.filter !== undefined) {
				resData.filter = sendBag.filter;
			}
			if (sendBag.title !== undefined) {
				resData.title = sendBag.title;
			}
			if (sendBag.orderBys) {
				resData.orderBys = sendBag.orderBys.map(function(order) {
					return {
						$uuid: order.$uuid,
						name: order.name,
						title: order.title
					};
				});
			}
		}
		syra_site.excelDocument._saveDatasources();
		var $action = sendBag.$actions && sendBag.$actions.$save;
		if ($action && $action.$isRequested) {
			var resource = this.dataset;
			resource.serviceUrl = _computeServiceUrl(resource);
			syra_site.excelDocument.updateDatasourceToDocument(syra_site.excelDocument.workingCopyToDatasource(resource));
			syra_site.excelDocument.addDatasource(resource);
			($action.$diagnoses = $action.$diagnoses || []).push({
				severity: "success",
				message: syra_excel_local.modificationsApplied
			});
			$action.$isRequested = false;
			$action.$isDisabled = true;
		}
		helpers.object.extend(sendBag, resData, true, true);
		syra_site.excelDocument.applyMeta(sendBag);
		this.applyChange(sendBag);
	}
});


exports.dispatcher = {
	DELETE: function(excelQuery, id, data, onSuccess, onError) {
		if (id) {
			syra_site.excelDocument.deleteDatasource(id);
			syra_site.excelDocument._saveDatasources();
		}
		var h = syra_site.$prototype && syra_site.$prototype.$links && syra_site.$prototype.$links.$home;
		onSuccess({}, {
			headers: {
				location: h && h.$url
			},
			data: {
				$diagnoses: [{
					$severity: "success",
					$message: syra_excel_local.resourceDeleted
				}]
			}
		});
	}
};



exports.executeOperation = function(name, id, method, data, onSuccess, onError) {
	// saveDocument - POST   
	if (syra_site.excelDocument.documentUrl)
		syra_site.excelDocument.publishDocument("", null, null, function(data, response) {
			// show diagnoses as server doesn't send diagnoses in this case            
			syra_site.showDiagnoses({
				$diagnoses: [{
					severity: "info",
					message: "The document has been saved"
				}]
			});
		});
	else {
		external.ShowSettingsForm();
	}
};