"use strict";
var _parser = require('@sage/syracuse-sdata-parser');

function _match(operator, value) {
	switch (operator) {
		case "gt":
			return value > 0;
		case "ge":
			return value >= 0;
		case "lt":
			return value < 0;
		case "le":
			return value <= 0;
		case "eq":
			return value == 0;
		case "ne":
			return value != 0;
	}
	return true;
}

var _compare = {
	number: function(v1, v2, operator) {
		if (operator == 'like') {
			throw new Error(syra_local.flFilter_err_wrong_type.replace('{operator}', operator).replace('{type}', "number"));
		}
		return _match(operator, v1 - v2);
	},
	string: function(v1, v2, operator) {
		v1 = v1.toUpperCase();
		v2 = v2.toUpperCase();
		if (operator == 'like') {
			// "contains" operation
			if (/^%(([^%]|\%)*)%$/g.test(v2)) {
				// in case '%' has been escaped with '\%', removing '\'
				var cleanV2 = /^%(([^%]|\%)*)%$/g.exec(v2)[1].replace(/\\%/g, "%");
				return v1.indexOf(cleanV2) >= 0;
			}
			// "starts with" operation
			else {
				if (/(([^%]|\%)*)%$/g.test(v2)) {
					// in case '%' has been escaped with '\%', removing '\'
					var cleanV2 = /(([^%]|\%)*)%$/g.exec(v2)[1].replace(/\\%/g, "%");
					var re = new RegExp('^' + cleanV2);
					return re.test(v1);
				} else {
					throw new Error(syra_local.flFilter_err_wrong_value.replace('{operator}', operator).replace('{value}', v2));
				}
			}
		}
		return _match(operator, v1.localeCompare(v2));
	},
	date: function(v1, v2, operator) {
		if (operator == 'like') {
			throw new Error(syra_local.flFilter_err_wrong_type.replace('{operator}', operator).replace('{type}', "date"));
		}
		return _match(operator, syra_culture.date.parse(v1).compare(v2));
	}
};

exports.apply = function(where, dataset, $fields) {
	function _extractParts(exp) {
		if (exp && exp.children) {
			var identifier = exp.children[0];
			if (identifier && identifier.type == "identifier") {
				parts.push({
					$bind: identifier.value,
					$value: exp.children[1].value,
					$operator: exp.value.text
				});
			} else {
				for (var ii = 0, jj = exp.children.length; ii < jj; ii++) {
					_extractParts(exp.children[ii]);
				}
			}
		}
	}

	function _filterRecord(record) {
		var ok = false;
		for (var ii = 0, jj = parts.length; ii < jj; ii++) {
			var part = parts[ii];
			var value = record[part.$bind];
			if (value != null) {
				var $field = $fields[part.$bind];
				if (typeof(value) == "object") {
					// quick workaround ($title). to improve for generic cases
					ok = _compare.string(value.$title, part.$value, part.$operator);
				} else {
					if (typeof(part.$value) == "string") {
						ok = _compare.string(value, part.$value, part.$operator);
					} else {
						// filter date
						if (typeof(part.$value) == "object" && $field && $field.$type == "application/x-date") {
							ok = _compare.date(value, part.$value, part.$operator);
						} else {
							// case of integer (application/x-choice)
							if (typeof(value) == "number") {
								ok = _compare.number(value, part.$value, part.$operator);
							} else {
								ok = false;
							}
						}
					}
					if (!ok)
						return;
				}
			}
		}
		ok && result.push(record);
	}

	var result = [];
	var parts = [];
	_extractParts(_parser.parse(where));

	for (var ii = 0, jj = dataset.length; ii < jj; ii++) {
		_filterRecord(dataset[ii]);
	}

	return result;
};