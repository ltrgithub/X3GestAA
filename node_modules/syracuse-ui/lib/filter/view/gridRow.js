"use strict";
var _helpers = require('syracuse-core').helpers;

function GridCell(row, col) {
	this.row = row;
	this.slot = syra_dom.td(row.filter_criteria_css);
	(this.col = col).filter_cell = this;
	if (!col.$field) {
		syra_dom.div(row.filter_criteria_css + "-empty", this.slot);
	} else {
		col.$isHidden && syra_dom.hide(this.slot, true);
		col.cssFilter = null;
		if (col.$field.$filterable) {
			var css = " s-filter-criteria-col";
			switch (col.$field.$type) {
				case "application/x-choice":
				case "application/x-date":
				case "application/x-time":
					css += " s-filter-criteria-col-with-btn";
					break;
				case "application/x-reference":
					var $links = col.$field.$item.$links;
					var $lookup = $links && $links.$lookup;
					col.$field.$filterable = $lookup && !!$lookup.$url;
					css += " s-filter-criteria-col-with-btn";
					break;
			}
			if (col.$field.$filterable) {
				this.field = syra_filter.addField(row, this.slot, {
					$field: col.$field,
					$bind: col.$item.$bind,
					$isTopLabelAlignment: false,
					$isGridCell: true,
					$inplace: true
				});
				col.cssRecordCellFilter = css;
			}
		}
	}
	this.append();
}

_helpers.defineClass(GridCell, null, {
	focus: function() {
		this.field.focus();
	},
	append: function() {
		this.row[this.col.table.$rowKey].appendChild(this.slot);
	},
	insertBefore: function(col) {
		var tr = this.row[this.col.table.$rowKey];
		tr.insertBefore(this.slot, (col && col.filter_cell && col.filter_cell.slot.nextSibling) || tr.firstChild);
	},
	hide: function(isHidden) {
		syra_dom.hide(this.slot, isHidden);
	},
	remove: function() {
		syra_dom.remove(this.slot);
		this.dispose();
	},
	dispose: function() {
		if (this.col) {
			delete this.col.filter_cell;
		}
		syra_article.dispose(this);
	}
});


function GridRow(list) {
	this.list = list;
	this.filter_criteria_css = "s-filter-criteria-cell";
	this.isFilterArticle = this.isRecordArticle = true;
	this.$facet = "$filter";
	this.$isEditMode = true;
	this.$prototype = list.$prototype.$item;
	this.$prototype.$localization = list.page.$prototype.$localization;
	syra_item.initialize(list.page, this, {
		$layout: {
			$items: list.$item.$layout.$items
		}
	}, list);

	syra_article.beforeDraw(this);
	this.filterMap = {};
	list.builder.fixedTable && list.builder.fixedTable.headTable.appendChild(this.fixedRow = document.createElement("tr"));
	list.builder.scrollTable.headTable.appendChild(this.domItem = this.dataRow = document.createElement("tr"));
}

_helpers.defineClass(GridRow, null, {
	load: function() {
		var params = this.page.urlSeg && this.page.urlSeg.params;
		if (params && params.where) {
			this.sdata_where = syra_filter.parse(params.where);
			if (this.page.isLookUpPage) {
				this.fixed_where = params.where;
			}
		}
		var columns = this.list.builder.allColumns;
		for (var ii = 0, jj = columns.length; ii < jj; ii++) {
			var col = columns[ii];
			if (col && col.$bind) {
				this._addCriteria(col);
				var field = col.filter_cell.field;
				if (field) {
					if (this.sdata_where) {
						syra_filter.setField(this.sdata_where, field);
						if (field.filter_selectedOperator != "none") {
							if (this.fixed_where) {
								syra_fields.disable(field, true);
								syra_button.disable(field.filter_picker, true);
							}
						}
					}
				}
			}
		}
		this.validateDisplay();
	},
	addEmptyCell: function(col) {
		this._addCriteria(col);
	},
	_addCriteria: function(col) {
		this.filterMap[col.key] = new GridCell(this, col);
	},
	focus: function() {
		var map = this.list.builder.columnsMap;
		var $bind = this.list.builder.getNextFocusableField();
		$bind && map[$bind] && map[$bind].filter_cell && map[$bind].filter_cell.focus();
	},
	triggerFilter: function() {
		var criterion = syra_filter.getCriterion(this);
		var filter = criterion.join(" and ");
		if (this.fixed_where) {
			filter = this.fixed_where + (filter ? (" and " + filter) : "");
		}
		this.list.filler.trigger(this.list, {
			filter: filter
		});
		this.validateDisplay(criterion);
	},
	validateDisplay: function(criterion) {
		var show = (criterion || syra_filter.getCriterion(this)).length > 0;
		if (show && !this.filter_clear) {
			this.list.topbar.insertBefore(syra_filter.addClear(this).link, this.list.searcherSlot);
		}
		syra_button.hide(this.filter_clear, !show);
	},
	onFormUpdateDelta: function(field, value) {
		syra_filter.setCriteria(field, {
			value: value
		});
		this.triggerFilter();
		return false;
	},
	dispose: function() {
		if (this.list) {
			this.filter_clear && syra_button.remove(this.filter_clear);
			var cols = this.list.builder.allColumns;
			if (cols) {
				for (var ii = 0, jj = cols.length; ii < jj; ii++) {
					cols[ii].filter_cell && cols[ii].filter_cell.dispose();
				}
			}
			delete this.list.filter_row;
		}
		syra_article.dispose(this);
	},
	onFieldFocusChange: function(field, isIn) {
		this.list.builder.scrollTable.switchHeadScroll(isIn);
	},
	setFilterable: function(filterable) {
		if (this.filterable !== filterable) {
			this.filterable = filterable;
			syra_dom.hide(this.fixedRow, !filterable);
			syra_dom.hide(this.dataRow, !filterable);
		}
	},
	fusion_getUIOrdereddBinds: function() {
		var ret;
		return ((ret = this.list.$pagePreferences) && (ret = ret.$columns) && ret.length > 0) ? ret : this.fusion_getSortedBinds();
	},
	fusion_getSortedBinds: function() {
		return (Object.keys(this.filterMap)).sort(function(a, b) {
			return parseInt(a.substr(2), 10) - parseInt(b.substr(2), 10);
		});
	},
	fusion_getCriterion: function() {
		var criterion = [];
		var $binds = this.fusion_getSortedBinds();
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var field = this.boundFields[$bind] && this.boundFields[$bind][0];
			if (field && !field.$isHidden) {
				syra_filter.operators.setFieldOperator(field, field.getInputValue());
				criterion.push(field.getFilterCriteria() || "");
			}
		}
		this.validateDisplay();
		return criterion;
	},
	fusion_focusToNextCol: function(bind, nextSel) {
		var field;
		if (nextSel === undefined) {
			field = this.filterMap[bind].field;
		} else {
			var binds = this.fusion_getUIOrdereddBinds();
			var ii = binds.indexOf(bind);
			var next = binds[(ii == (binds.length - 1)) ? 0 : ii + 1];
			var prev = binds[(ii == 0) ? 0 : ii - 1];
			field = this.filterMap[nextSel ? next : prev].field;
		}
		field && field.focus();
	}
});

exports.add = function(list) {
	if (list.filter_row) {
		list.filter_row.dispose();
	}
	list.filter_row = new GridRow(list);
};