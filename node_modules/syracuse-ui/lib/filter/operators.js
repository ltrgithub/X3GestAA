"use strict";
var _helpers = require('syracuse-core').helpers;

function _clickOperator(event) {
	var field = this.parent;
	var old = field.filter_selectedOperator;
	exports.setFieldOperator(field, undefined, this.operator);
	if (field.filter_selectedOperator != old) {
		if (field.articleParent.list && (field.filter_selectedOperator == "between" || old == "between")) {
			field.articleParent.list.resizeItem();
		}
	}
	field.page.filter_popup && field.page.filter_popup.close();
	field.page.externalAdapter.onFilterEvent({
		operator: field.filter_selectedOperator,
		list: field.articleParent.list,
		filter: field,
		event: event,
		type: "operatorchange",
		doEvent: function() {
			var record = field.articleParent;
			var value = field.getInputValue();
			if (field.filter_selectedOperator != "none") {
				if (value != null && value != "") {
					if (field.filter_selectedOperator == "empty" || field.filter_selectedOperator == "notempty") {
						syra_filter.setCriteria(field, {
							value: null,
							operator: field.filter_selectedOperator
						});
					}
					record.triggerFilter();
				} else {
					if (field.filter_selectedOperator == "empty" || field.filter_selectedOperator == "notempty") {
						record.triggerFilter();
					}
				}
			} else {
				if (value != null && value != "") {
					syra_filter.setCriteria(field, {
						value: null,
						operator: field.filter_selectedOperator
					});
					syra_form.update(field, null);
				} else {
					record.triggerFilter();
				}
			}
		}
	});
}

function _clickShowList(event) {
	var field = this.parent;
	var record = field.articleParent;
	record.page.externalAdapter.onFilterEvent({
		operator: field.filter_selectedOperator,
		list: record.list,
		event: event,
		type: "operatorclick",
		doEvent: function() {
			if (field.page.filter_popup) {
				field.page.filter_popup.close();
			} else {
				var ul = syra_dom.ul();
				ul.syraItem = field.id;
				exports.assignToField(field);
				for (var ii = 0, jj = field.filter_operators.length; ii < jj; ii++) {
					var op = field.filter_operators[ii];
					var btn = syra_button.add({
						parent: field,
						slot: syra_dom.li("s-popup-default-li", ul),
						text: syra_local["flFilter_" + op],
						css: "s-popup-default-btn-default",
						fontIcon: "filter_" + op,
						click: _clickOperator,
						operator: op
					});
					if (field.filter_selectedOperator == op) {
						btn.link.className += " s-selected";
					}
				}
				field.page.filter_popup = syra_over.openPopup(record.boxParent, {
					content: record,
					slot: ul,
					picker: field.layoutSlot,
					position: {
						my: "left top",
						at: "left bottom",
						of: field.layoutSlot
					},
					close: function() {
						if (field.page) {
							field.page.filter_popup = null;
						}
					}
				});
			}
		}
	});
}

function _getFieldOperators(field) {
	var $type = (field.$filterField && field.$filterField.$type) || field.$field.$type;
	if (field.page.isFusionPage) {
		switch ($type) {
			case "application/x-date":
			case "application/x-time":
			case "application/x-datetime":
				return ["none", "ge", "gt", "lt", "le", "eq", "ne"];
			case "application/x-string":
				return ["none", "like_s", "like", "like_e", "gt", "ge", "lt", "le", "eq", "ne"];
			case "application/x-choice":
			case "application/x-real":
			case "application/x-decimal":
			case "application/x-integer":
			case "application/x-quantity":
				return ["none", "eq", "gt", "ge", "lt", "le", "ne"];
			default:
				return ["none", "eq", "ne"];
		}
	} else {
		switch ($type) {
			case "application/x-date":
			case "application/x-time":
			case "application/x-datetime":
				var operators = ["none", "ge", "gt", "lt", "le", "eq", "ne"];
				if (field.$field.$type != "application/x-reference") {
					operators.push("between");
				}
				return operators;
			case "application/x-string":
				return ["none", "like_s", "like", "like_e", "gt", "ge", "lt", "le", "eq", "ne", "empty", "notempty", "between"];
			case "application/x-binary":
			case "application/x-document":
			case "image":
				return ["none", "empty", "notempty"];
			case "application/x-boolean":
				return ["none", "eq", "ne"];
			case "application/x-decimal":
			case "application/x-integer":
			case "application/x-quantity":
				if (field.$field.$type != "application/x-reference") {
					return ["none", "gt", "ge", "lt", "le", "eq", "ne", "between"];
				}
				return ["none", "eq", "ne"];
		}
		return ["none", "eq", "ne"];
	}
}

exports.assignToField = function(field) {
	return field.filter_operators || (field.filter_operators = _getFieldOperators(field));
};

exports.getDefault = function(field) {
	return exports.assignToField(field)[1];
};

exports.addPicker = function(field, css) {
	field.filter_picker = syra_button.add({
		parent: field,
		text: syra_local.flfilter_choiceOperator,
		css: css,
		iconOnly: true,
		fontIcon: "filter_none",
		click: _clickShowList
	});
	field.filter_picker.link.removeAttribute("href");
	field._dataValue.insertBefore(field.filter_picker.link, field._dataValue.firstChild);
};

exports.setFieldOperator = function(field, value, operator) {
	if (operator === undefined) {
		operator = field.filter_selectedOperator;
		if (value == null || value == "") {
			operator = "none";
		} else {
			if (field.$field && operator == "none") {
				operator = exports.getDefault(field);
			}
		}
	}
	syra_dom.toggleClass(field.filter_slot, field.articleParent.filter_criteria_css + "-active", operator != "none");
	syra_button.setText(field.filter_picker, "", "filter_" + (field.filter_selectedOperator = operator));
	if (operator == "between") {
		if (!field.highField) {
			var $bind = field.$item.$bind;
			field.articleParent.$prototype.$properties[$bind + "$high"] = _helpers.object.clone(field.articleParent.$prototype.$properties[$bind], true);
			var $item = _helpers.object.clone(field.$item, true);
			$item.$bind = $bind + "$high";
			var slot = syra_dom.div("s-filter-between-right", field.filter_slot);
			field.highField = field.page.addItem(slot, $item, field.articleParent);
			syra_dom.toggleClass(field._dataValue, "s-filter-between-left", true);
		}
	} else {
		if (field.highField) {
			syra_item.remove(field.highField, true, true);
			delete field.articleParent.$prototype.$properties[field.$item.$bind + "$high"];
			delete field.highField;
			syra_dom.toggleClass(field._dataValue, "s-filter-between-left", false);
		}
	}
};