"use strict";
exports.operators = require('syracuse-ui/lib/filter/operators');
var _parser = require('syracuse-sdata-parser');

function _formatFusionCriteria(field, operator, value) {
	var v = value;
	if (["like_s", "like_e", "like"].indexOf(operator) >= 0) {
		v = v.replace(/\**$/, "");
		v = v.replace(/\**/, "");
	}
	var values = ["", v, ""];
	switch (operator) {
		case "none":
			break;
		case "gt":
			values[0] = ">";
			break;
		case "ge":
			values[0] = ">=";
			break;
		case "lt":
			values[0] = "<";
			break;
		case "le":
			values[0] = "<=";
			break;
		case "eq":
			values[0] = "=";
			break;
		case "ne":
			values[0] = "<>";
			break;
		case "like_s":
			values[2] = "*";
			break;
		case "like_e":
			values[0] = "*";
			break;
		case "like":
			values[0] = "*";
			values[2] = "*";
			break;
		case "between":
			break;
	}
	return values.join("");
}

function _formatCriteria(field, operator) {
	var value = field.getInputValue();
	if (field.page.isFusionPage) {
		return _formatFusionCriteria(field, operator, value);
	}
	switch (operator) {
		case "empty":
			value = "''";
			operator = "eq";
			break;
		case "notempty":
			value = "''";
			operator = "ne";
			break;
		default:
			if (value != null && value != "") {
				var rawValue = value = field.getValue();
				var type = field.$field.$type;
				if (type === "application/x-choice" && field.$field.$value) type = field.$field.$value.$type;
				switch (type) {
					case "application/x-reference":
						rawValue = rawValue.$value;
						value = "'" + rawValue + "'";
						break;
					case "application/x-boolean":
					case "application/x-integer":
					case "application/x-decimal":
					case "application/x-quantity":
					case "application/x-choice":
						value = rawValue;
						break;
					case "application/x-date":
						value = "@" + rawValue + "@";
						break;
					default:
						value = "'" + (rawValue || "") + "'";
						break;
				}
				switch (operator) {
					case "like":
						value = "'%" + ("" + rawValue).replace(/'/g, "''") + "%'";
						break;
					case "like_s":
						value = "'" + ("" + rawValue).replace(/'/g, "''") + "%'";
						operator = "like";
						break;
					case "like_e":
						value = "'%" + ("" + rawValue).replace(/'/g, "''") + "'";
						operator = "like";
						break;
					case "between":
						var highValue = field.highField.getInputValue();
						highValue = highValue && field.highField.getValue();
						if (!highValue) {
							return;
						}
						switch (field.$field.$type) {
							case "application/x-reference":
								highValue = "'" + highValue + "'";
								break;
							case "application/x-boolean":
							case "application/x-integer":
							case "application/x-decimal":
							case "application/x-quantity":
							case "application/x-choice":
								break;
							case "application/x-date":
								highValue = "@" + highValue + "@";
								break;
							default:
								highValue = "'" + (highValue || "") + "'";
								break;
						}
						value = value + " and " + highValue;
						break;
				}
			}
			break;
	}
	if (value != null && value != "") {
		var code = field.$item.$bind;
		// handling specific reference field case (fix SAM 97863)
		if (field.$field) {
			switch (field.$field.$type) {
				case "application/x-reference":
					if (value == "''" && field.$filterCode.indexOf(".") != -1) {
						value = null;
					} else {
						code = field.$filterCode;
					}
					break;
			}
			var list = field.articleParent.list;
			if (list && !list.isClientFetch && field.$field.$capabilities.indexOf("filter_upper") >= 0) {
				value = value.toUpperCase();
				code = "upper(" + code + ")";
			}
		}
		return "(" + code + " " + operator + " " + value + ")";
	}
}

function _getCriteria(sdata_where, keys, parentExp) {
	var criteria;
	for (var ii = 0, jj = sdata_where.children.length; !criteria && ii < jj; ii++) {
		var child = sdata_where.children[ii];
		if (child.type == "identifier" && keys.indexOf(child.value) >= 0) {
			var root = jj > 1 ? sdata_where : (parentExp && parentExp.children.length > 1) ? parentExp : null;
			if (root) {
				if (keys.length == 1 && (root.children[1].type != "identifier")) {
					criteria = {
						keys: keys,
						value: root.children[1].value,
						operator: root.value.text
					};
				} else {
					if (root.children.length == keys.length && root.value.text == ".") {
						for (var mm = 0, kk = keys.length; mm < kk; mm++) {
							if (root.children[mm] != keys[mm]) {
								break;
							}
						}
						if (mm == kk) {
							criteria = {
								keys: keys,
								value: parentExp.children[1].value,
								operator: parentExp.value.text
							};
						}
					}
				}
				if (criteria) {
					criteria.value = criteria.value === null ? "" : criteria.value;
					switch (criteria.operator) {
						case "between":
							if (root.children.length >= 3) {
								criteria.highValue = root.children[2].value;
							}
							break;
						case "like":
						case "like_s":
						case "like_e":
							if (criteria.value.length) {
								var first = criteria.value[0],
									last = criteria.value[criteria.value.length - 1];
								if (criteria.operator == "like") {
									if (first != "%" && last == "%") {
										criteria.operator = "like_s";
									} else {
										if (last != "%") {
											criteria.operator = "like_e";
										}
									}
								}
								if (first == "%" && criteria.operator != "like_s") {
									criteria.value = criteria.value.slice(1);
								}
								if (last == "%" && criteria.operator != "like_e") {
									criteria.value = criteria.value.slice(0, -1);
								}
							}
							break;
						case "eq":
						case "ne":
							if (criteria.value.length === 0) {
								criteria.operator = (criteria.operator == "eq") ? "empty" : "notempty";
							}
							break;

					}
				}
			}
		} else {
			criteria = child.children && _getCriteria(child, keys, sdata_where);
		}
	}
	return criteria;
}


exports.parse = function(where, keys) {
	return _parser.parse(where);
};


exports.addField = function(articleParent, slot, $item) {
	$item.$isFilterMode = true;
	var field = articleParent.page.addItem(slot, $item, articleParent);
	if (field.isReferenceField) {
		field.$filterField = field.$field.$item[field.$reference.$value.$itemProp];
		if (field.$filterField) {
			field.$filterField = field.articleParent.$prototype.$properties[field.$reference.$value.$prop];
			if (field.$filterField) {
				field.$filterCode = field.$reference.$value.$prop;
			}
		}
		if (!field.$filterField) {
			field.$filterField = field.$field.$item.$properties[field.$reference.$value.$prop];
			field.$filterCode = field.$item.$bind + "." + field.$reference.$value.$prop;
		}
	}
	field.getFilterCriteria = function() {
		if (field.filter_selectedOperator != "none") {
			return _formatCriteria(field, field.filter_selectedOperator);
		}
	};
	if (!articleParent.filter_criteria_css_input) {
		articleParent.filter_criteria_css_input = " " + articleParent.filter_criteria_css + "-input";
		articleParent.filter_criteria_css_picker = articleParent.filter_criteria_css + "-picker";
	}
	field.filter_slot = slot;
	if (field.input) {
		field.input.className += articleParent.filter_criteria_css_input;
	}
	field.filter_selectedOperator = "none";
	exports.operators.addPicker(field, articleParent.filter_criteria_css_picker);
	return field;
};

exports.getCriterion = function(record) {
	var values = [];
	var $binds = Object.keys(record.filterMap);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var field = record.filterMap[$binds[ii]].field;
		if (field && !field.$isHidden) {
			var value = field.getFilterCriteria();
			value && values.push(value);
		}
	}
	return values;
};

function _setFieldValue(field, value) {
	field.diagnoseFlag && syra_alert.show(null, field);
	switch (field.$field.$type) {
		case "application/x-reference":
			if (typeof(value) != 'object') {
				var obj = {};
				obj[field.$filterBind] = value;
				value = obj;
			}
			break;
		case "application/x-date":
		case "application/x-datetime":
		case "application/x-time":
			if (value) {
				value = value.toString();
			} else {
				value = null;
			}
			break;
	}
	field.setValue(value);
}

exports.setCriteria = function(field, criteria) {
	var articleParent = field.articleParent;
	exports.operators.setFieldOperator(field, criteria.value, criteria.operator);

	_setFieldValue(field, criteria.value);
	criteria.highValue != undefined && field.highField && _setFieldValue(field.highField, criteria.highValue);
};

function _fetchReferenceItem(sdata_where, field, keys) {
	keys.pop();
	var criteria = _getCriteria(sdata_where, keys);
	if (criteria) {
		if (criteria.value.length == 0) {
			exports.setCriteria(field, criteria);
			field.articleParent.validateDisplay && field.articleParent.validateDisplay();
		} else {
			//filter is on uuid for fur syracuse
			if (field.$menus && field.$menus.$lookup) {
				var $url = syra_expression.parse(field.articleParent, field.$menus.$lookup.$url);
				syra_ajax.get({
					page: field.page,
					$url: $url,
					params: {
						where: "$uuid eq '" + criteria.value + "'"
					},
					success: function(data) {
						var list = data && data.$resources;
						if (list && list.length == 1) {
							criteria.value = list[0][field.$filterBind];
							if (criteria.value !== undefined) {
								exports.setCriteria(field, criteria);
								field.articleParent.validateDisplay && field.articleParent.validateDisplay();
							}
						}
					}
				});
			}
		}
	}
}

exports.setField = function(sdata_where, field) {
	var criteria, keys = [field.$filterBind = field.$item.$bind];
	// in case of reference field, appropriate $bind value is field.$reference.value.$prop
	if (field.isReferenceField) {
		keys.push(field.$filterBind = field.$reference.$value.$prop);
		criteria = _getCriteria(sdata_where, keys);
		if (!criteria && keys.length > 1) {
			_fetchReferenceItem(sdata_where, field, keys);
			return;
		}
	} else {
		criteria = _getCriteria(sdata_where, keys);
	}
	if (criteria && keys == keys) {
		exports.setCriteria(field, criteria);
	}
};


exports.addClear = function(article) {
	return article.filter_clear = syra_button.add({
		parent: article,
		text: syra_local.flfilter_clear,
		css: "s-mn-list-btn s-mn-link",
		fontIcon: "filter_clear",
		click: function() {
			var article = this.parent;
			var fields = article.filterMap;
			var $binds = Object.keys(fields);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var field = article.filterMap[$binds[ii]].field;
				if (field) {
					exports.setCriteria(field, {
						value: null,
						highValue: null
					});
				}
			}
			article.page.externalAdapter.onFilterEvent({
				list: article.list,
				event: event,
				type: "clearFilter",
				doEvent: function() {
					article.triggerFilter();
				}
			});
		}
	});
};