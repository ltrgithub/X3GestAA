"use strict";
var _criteria = require('syracuse-ui/lib/filter/criteria');
var _operators = require('syracuse-ui/lib/filter/operators');
var _parser = require('syracuse-sdata-parser');


exports.parse = function(where, keys) {
	return _parser.parse(where);
};


exports.addField = function(articleParent, slot, $item) {
	//$item.$isMenusHidden = true;
	$item.$isFilterMode = true;
	var field = articleParent.page.addItem(slot, $item, articleParent);
	if (field.isReferenceField) {
		field.ensureFilterSetting = function() {
			this.$filterField = this.$field.$item[this.$reference.$value.$itemProp];
			if (this.$filterField) {
				this.$filterField = this.articleParent.$prototype.$properties[this.$reference.$value.$prop];
				if (this.$filterField) {
					this.$filterCode = this.$reference.$value.$prop;
				}
			}
			if (!this.$filterField) {
				this.$filterField = this.$field.$item.$properties[this.$reference.$value.$prop];
				this.$filterCode = this.$item.$bind + "." + this.$reference.$value.$prop;
			}
		};
	}
	field.getFilterCriteria = function() {
		if (field.filter_selectedOperator != "none") {
			field.ensureFilterSetting && field.ensureFilterSetting();
			return _criteria.format({
				field: field,
				$bind: field.$item.$bind,
				$type: field.$field.$type,
				operator: field.filter_selectedOperator,
				$filterCode: field.$filterCode,
				$filterField: field.$filterField
			});
		}
	};
	if (!articleParent.filter_criteria_css_input) {
		articleParent.filter_criteria_css_input = " " + articleParent.filter_criteria_css + "-input";
		articleParent.filter_criteria_css_picker = articleParent.filter_criteria_css + "-picker";
	}
	field.filter_slot = slot;
	if (field.input) {
		field.input.className += articleParent.filter_criteria_css_input;
	}
	field.$filterCode = $item.$bind;
	field.filter_selectedOperator = "none";
	_operators.addPicker(field, articleParent.filter_criteria_css_picker);
	return field;
};

exports.getCriterion = function(record, $binds, setOperator) {
	var values = [];
	$binds = $binds || Object.keys(record.boundFields);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var field = record.boundFields[$binds[ii]][0];
		if (!field.$isHidden) {
			if (setOperator) {
				_operators.setFieldOperator(field, field.getInputValue());
			}
			var value = field.getFilterCriteria();
			value && values.push(value);
		}
	}
	return values;
};

exports.setField = function(sdata_where, field) {
	var keys = [field.$filterBind = field.$item.$bind];
	// in case of reference field, appropriate $bind value is field.$reference.$value.$prop
	if (field.isReferenceField) {
		keys.push(field.$filterBind = field.$reference.$value.$prop);
	}
	var exp = _criteria.getCriteria(sdata_where, keys);
	if (exp && keys == keys) {
		_operators.setFieldOperator(field, exp.$value, exp.$operator);
		if (field.isReferenceField) {
			var obj = {};
			obj[field.$filterBind] = exp.$value;
			exp.$value = obj;
		}
		field.setValue(exp.$value);
	}
};

exports.setCriteria = function(record, field, value, operator) {
	_operators.setFieldOperator(field, value, operator);
	if (field.isReferenceField) {
		record.dataset[field.$item.$bind] = {};
		record.dataset[field.$item.$bind][field.$filterBind] = value;
	} else {
		//vient de filterblock
		/*switch (field.$field.$type) {
		 case "application/x-date":
		 case "application/x-datetime":
		 case "application/x-time":
		 value = value.toString(field.localFormat);
		 break;
		 }*/
		record.dataset[field.$item.$bind] = value;
	}
	field.setValue(value);
};

exports.addClear = function(article) {
	return article.filter_clear = syra_button.add({
		parent: article,
		text: syra_local.flfilter_clear,
		css: "s-mn-list-btn s-mn-link",
		fontIcon: "filter_clear",
		click: function() {
			var article = this.parent;
			var fields = article.boundFields;
			var $binds = Object.keys(fields);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				exports.setCriteria(article, fields[$binds[ii]][0], null);
			}
			article.page.externalAdapter.onFilterEvent({
				list: article.list,
				event: event,
				type: "clearFilter",
				doEvent: function() {
					article.triggerFilter();
				}
			});
		}
	});
};