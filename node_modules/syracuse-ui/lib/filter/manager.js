"use strict";
exports.operators = require('syracuse-ui/lib/filter/operators');
var _parser = require('syracuse-sdata-parser');

function _formatFusionCriteria(options) {
	var values = ["", options.value.replace(/\**$/, ""), ""];
	switch (options.operator) {
		case "none":
			break;
		case "gt":
			values[0] = ">";
			break;
		case "ge":
			values[0] = ">=";
			break;
		case "lt":
			values[0] = "<";
			break;
		case "le":
			values[0] = "<=";
			break;
		case "eq":
			values[0] = "=";
			break;
		case "ne":
			values[0] = "<>";
			break;
		case "like_s":
			values[2] = "*";
			break;
		case "like":
			values[0] = "*";
			values[2] = "*";
			break;
		case "between":
			break;
	}
	return values.join("");
}

function _formatCriteria(options) {
	options.value = options.field.getInputValue();
	if (options.field.page.isFusionPage) {
		return _formatFusionCriteria(options);
	}
	switch (options.operator) {
		case "empty":
			options.value = "''";
			options.operator = "eq";
			break;
		case "notempty":
			options.value = "''";
			options.operator = "ne";
			break;
		default:
			if (options.value != null) {
				var rawValue = options.value = options.field.getValue();
				switch (options.$type) {
					case "application/x-reference":
						rawValue = rawValue.$value;
						options.value = "'" + rawValue + "'";
						break;
					case "application/x-date":
						options.value = "@" + rawValue + "@";
						break;
					default:
						options.value = "'" + (rawValue || "") + "'";
						break;
				}
				switch (options.operator) {
					case "like":
						options.value = "'%" + ("" + rawValue).replace(/'/g, "''") + "%'";
						break;
					case "like_s":
						options.value = "'" + ("" + rawValue).replace(/'/g, "''") + "%'";
						options.operator = "like";
						break;
					case "between":
						var highValue = options.field.articleParent.dataset[options.$bind + "$High"];
						if (value && !highValue) {
							options.value = _formatFieldCriteria(options);
							options.operator = "ge";
						} else {
							if (!value && highValue) {
								options.value = highValue;
								options.value = _formatFieldCriteria(options);
								operator = "le";
							} else {
								if (value && highValue) {
									var minValue = _formatFieldCriteria(options);
									options.value = highValue;
									options.value = minValue + " and " + _formatFieldCriteria(options);
								} else {
									return "";
								}
							}
						}
						break;
					default:
						break;
				}
			}
			break;
	}
	if (options.value != null) {
		var $field = options.field.$field;
		// handling specific reference field case (fix SAM 97863)
		if ($field) {
			switch ($field.$type) {
				case "application/x-reference":
					if (options.value == "''" && options.$filterCode.indexOf(".") != -1) {
						options.value = null;
						options.$filterCode = options.field.$item.$bind;
					}
					break;
			}
			var list = options.field.articleParent.list;
			if (list && !list.isClientFetch && $field.$capabilities.indexOf("filter_upper") >= 0) {
				options.value = options.value.toUpperCase();
				options.$filterCode = "upper(" + options.$filterCode + ")";
			}
		}
		return "(" + options.$filterCode + " " + options.operator + " " + options.value + ")";
	}
}

function _getCriteria(sdata_where, keys, parentExp) {
	var criteria;
	for (var ii = 0, jj = sdata_where.children.length; !criteria && ii < jj; ii++) {
		var child = sdata_where.children[ii];
		if (child.type == "identifier" && keys.indexOf(child.value) >= 0) {
			var root = jj > 1 ? sdata_where : (parentExp && parentExp.children.length > 1) ? parentExp : null;
			if (root) {
				if (keys.length == 1 && (root.children[1].type != "identifier")) {
					criteria = {
						keys: keys,
						$value: root.children[1].value,
						$operator: root.value.text
					};
					switch (criteria.$operator) {
						case "like":
						case "like_s":
							if (criteria.$value.length) {
								var first = criteria.$value[0],
									last = criteria.$value[criteria.$value.length - 1];
								if (criteria.$operator == "like") {
									if (first != "%") {
										if (last == "%") {
											criteria.$operator = "like_s";
										}
									} else {
										criteria.$value = criteria.$value.slice(1);
									}
								}
								if (last == "%") {
									criteria.$value = criteria.$value.slice(0, -1);
								}
							}
							break;
						case "eq":
						case "ne":
							if (criteria.$value.length === 0) {
								criteria.$operator = (criteria.$operator == "eq") ? "empty" : "notempty";
							}
							break;

					}
				} else {
					if (root.children.length == keys.length && root.value.text == ".") {
						for (var mm = 0, kk = keys.length; mm < kk; mm++) {
							if (root.children[mm] != keys[mm]) {
								break;
							}
						}
						if (mm == kk) {
							criteria = {
								keys: keys,
								$value: parentExp.children[1].value,
								$operator: parentExp.value.text
							};
						}
					}
				}
			}
		} else {
			criteria = child.children && _getCriteria(child, keys, sdata_where);
		}
	}
	return criteria;
}


exports.parse = function(where, keys) {
	return _parser.parse(where);
};


exports.addField = function(articleParent, slot, $item) {
	$item.$isFilterMode = true;
	var field = articleParent.page.addItem(slot, $item, articleParent);
	if (field.isReferenceField) {
		field.ensureFilterSetting = function() {
			this.$filterField = this.$field.$item[this.$reference.$value.$itemProp];
			if (this.$filterField) {
				this.$filterField = this.articleParent.$prototype.$properties[this.$reference.$value.$prop];
				if (this.$filterField) {
					this.$filterCode = this.$reference.$value.$prop;
				}
			}
			if (!this.$filterField) {
				this.$filterField = this.$field.$item.$properties[this.$reference.$value.$prop];
				this.$filterCode = this.$item.$bind + "." + this.$reference.$value.$prop;
			}
		};
	}
	field.getFilterCriteria = function() {
		if (field.filter_selectedOperator != "none") {
			field.ensureFilterSetting && field.ensureFilterSetting();
			return _formatCriteria({
				field: field,
				$bind: field.$item.$bind,
				$type: field.$field.$type,
				operator: field.filter_selectedOperator,
				$filterCode: field.$filterCode,
				$filterField: field.$filterField
			});
		}
	};
	if (!articleParent.filter_criteria_css_input) {
		articleParent.filter_criteria_css_input = " " + articleParent.filter_criteria_css + "-input";
		articleParent.filter_criteria_css_picker = articleParent.filter_criteria_css + "-picker";
	}
	field.filter_slot = slot;
	if (field.input) {
		field.input.className += articleParent.filter_criteria_css_input;
	}
	field.$filterCode = $item.$bind;
	field.filter_selectedOperator = "none";
	exports.operators.addPicker(field, articleParent.filter_criteria_css_picker);
	return field;
};

exports.getCriterion = function(record) {
	var values = [];
	var $binds = Object.keys(record.boundFields);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var field = record.boundFields[$binds[ii]][0];
		if (!field.$isHidden) {
			var value = field.getFilterCriteria();
			value && values.push(value);
		}
	}
	return values;
};
exports.setValue = function(field, value, operator) {
	var articleParent = field.articleParent;
	exports.operators.setFieldOperator(field, value, operator);
	switch (field.$field.$type) {
		case "application/x-reference":
			if (typeof(value) != 'object') {
				var obj = {};
				obj[field.$filterBind] = value;
				value = obj;
			}
			break;
		case "application/x-date":
		case "application/x-datetime":
		case "application/x-time":
			if (value) {
				value = value.toString();
			} else {
				value = null;
			}
			break;
	}
	field.setValue(value);
};

function _fetchReferenceItem(sdata_where, field, keys) {
	keys.pop();
	var exp = _getCriteria(sdata_where, keys);
	if (exp) {
		//filter is on uuid for fur syracuse
		if (field.$menus && field.$menus.$lookup) {
			var $url = syra_expression.parse(field.articleParent, field.$menus.$lookup.$url);
			syra_ajax.get({
				page: field.page,
				$url: $url,
				params: {
					where: "$uuid eq '" + exp.$value + "'"
				},
				success: function(data) {
					var list = data && data.$resources;
					if (list && list.length == 1) {
						exp.$value = list[0][field.$filterBind];
						if (exp.$value !== undefined) {
							exports.setValue(field, exp.$value, exp.$operator);
							field.articleParent.validateDisplay && field.articleParent.validateDisplay();
						}
					}
				}
			});
		}
	}
}

exports.setField = function(sdata_where, field) {
	var exp, keys = [field.$filterBind = field.$item.$bind];
	// in case of reference field, appropriate $bind value is field.$reference.$value.$prop
	if (field.isReferenceField) {
		keys.push(field.$filterBind = field.$reference.$value.$prop);
		exp = _getCriteria(sdata_where, keys);
		if (!exp && keys.length > 1) {
			_fetchReferenceItem(sdata_where, field, keys);
			return;
		}
	} else {
		exp = _getCriteria(sdata_where, keys);
	}
	if (exp && keys == keys) {
		exports.setValue(field, exp.$value, exp.$operator);
	}
};


exports.addClear = function(article) {
	return article.filter_clear = syra_button.add({
		parent: article,
		text: syra_local.flfilter_clear,
		css: "s-mn-list-btn s-mn-link",
		fontIcon: "filter_clear",
		click: function() {
			var article = this.parent;
			var fields = article.boundFields;
			var $binds = Object.keys(fields);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				exports.setValue(fields[$binds[ii]][0], null);
			}
			article.page.externalAdapter.onFilterEvent({
				list: article.list,
				event: event,
				type: "clearFilter",
				doEvent: function() {
					article.triggerFilter();
				}
			});
		}
	});
};