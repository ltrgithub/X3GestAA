"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;

function TranslationPage() {}

exports.TranslationPage = helpers.defineClass(TranslationPage, DesktopPage, {
	loadBox: function(data) {
		this.layoutSlot = document.createElement("div");
		this.$facet = "$localize";
		this.$isEditMode = true;
		this.$values = data.$values;
		this.valuesCount = this.$values.length;
		this._enumLocale = {};
		this._enumLocaleSet = {};
		this._enumLocaleUnset = {};
		var $translations = [];
		var $enum = [];
		for (var ii = 0; ii < this.valuesCount; ii++) {
			var $value = this.$values[ii];
			if ($value.$value) {
				$translations.push({
					$uuid: helpers.uuid.generate(),
					$index: ii,
					$localeChoice: $value.$locale,
					$localeValue: $value.$value,
					$properties: {
						$localeChoice: {
							$isReadOnly: true
						}
					}
				});
				this._enumLocaleSet[$value.$locale] = {
					$title: $value.$title
				};
			} else {
				this._enumLocaleUnset[$value.$locale] = {
					$title: $value.$title
				};
			}

			$enum.push({
				$value: $value.$locale,
				$title: $value.$title
			});

			this._enumLocale[$value.$locale] = {
				$index: ii,
				$title: $value.$title
			};
		}
		// add new empty row only if enumLocaleUnset unempty and if page is not details facet
		if (Object.keys(this._enumLocaleUnset).length > 0 && !this.isReadOnly) {
			$translations.push({
				$uuid: helpers.uuid.generate(),
				$index: $translations.length,
				$localeChoice: "",
				$localeValue: "",
				$links: {
					$delete: {
						$isHidden: true
					}
				},
				$properties: {
					$localeValue: {
						$isEditMode: false
					}
				}
			});
		}

		this.$prototype = {
			$properties: {
				$translations: {
					$type: "application/x-array",
					$capabilities: this.isReadOnly ? "" : "delete",
					$item: {
						$properties: {
							$localeChoice: {
								$type: "application/x-choice",
								$title: syra_local.lPageLocale,
								$value: {
									$type: "application/x-integer",
									$enum: $enum
								}
							},
							$localeValue: {
								$type: "application/x-string",
								$title: syra_local.lPageField,
								$isReadOnly: this.isReadOnly ? true : false
							}
						}
					}
				}
			},
			$links: data.$links
		};
		this.$item = {
			$category: "page",
			$title: syra_local.lPageTitle,
			$layout: {
				$items: [{
					$format: "cards",
					$skin: "s-localization-list",
					$isTitleHidden: true,
					$isPagerHidden: true,
					$isQuickDesignerDisabled: true,
					$bind: "$translations",
					$skinCard: "s-localization-list-cards",
					$layout: {
						$items: [{
							$layoutType: "row",
							$isFixedWidth: true,
							$widths: "250,*",
							$items: [{
								$bind: "$localeChoice",
								$format: "$combo",
								$isTitleHidden: true,
								$title: syra_local.lPageLocaleTitle,
								$isTitlePlaceHolder: true,
								$icon: {
									$mode: "iconText",
									$path: "flags_iso/"
								}
							}, {
								$bind: "$localeValue",
								$isTitleHidden: true
							}]
						}]
					}
				}]
			}
		};
		DesktopPage.prototype.loadBox.call(this, {
			$translations: $translations
		});
		this.isPageLoaded = true;
	},
	notifyDataChange: function(field, value) {
		// clean diagnoses panel if any
		if (this.diagnosesPanel) {
			this.diagnosesPanel.clean();
		}
		var record = field.articleParent;
		// on locale field value change
		if (field.$item.$bind == '$localeValue') {
			if (record.dataset.$localeChoice != null) {

				// if locale not set, display err
				if (record.dataset.$localeChoice == 0) {
					syra_site.showDiagnoses({
						$diagnoses: [{
							$message: syra_local.lPageLocaleNotSet
						}]
					}, field);
				} else {
					// == update this.$values (which is to be sent on $save action) ==
					// get $localeChoice value corresponding
					var $locale = record.dataset.$localeChoice;
					// set value in $values array
					this.$values[this._enumLocale[$locale].$index].$value = value !== '' ? value : null;
					// update enumLocaleUnset (remove the corresponding locale choice)
					delete this._enumLocaleUnset[$locale];
					// add remove link -- set localeChoice state readOnly
					this.applyChange({
						$translations: [{
							$uuid: record.$uuid,
							$index: record.getRecordIndex(),
							$links: {
								$delete: {
									$isHidden: false
								}
							},
							$properties: {
								$localeChoice: {
									$isReadOnly: true
								}
							}
						}]
					});
				}
			}
		}

		// on locale choice value change
		if (field.$item.$bind == '$localeChoice' && record.dataset.$localeChoice != null) {
			// set locale field editable
			this.applyChange({
				$translations: [{
					$uuid: record.$uuid,
					$index: record.getRecordIndex(),
					$properties: {
						$localeValue: {
							$isEditMode: true
						}
					}
				}]
			});
		}
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$bind == '$delete') {
			this._onRemoveLocale(menuItem.articleParent);
			return false;
		}
	},
	_onRemoveLocale: function(record) {
		var list = record.list;
		// on removing record with locale choice set
		if (record.dataset.$localeChoice) {

			var $isListMaxLength = this.valuesCount == list.dataset.length;
			var $isLastRecordSet = list.recordsMap[list.dataset[list.dataset.length - 1].$uuid].boundFields["$localeChoice"][0].$isReadOnly;

			// ==  update enumLocaleUnset ==
			var $locale = record.dataset.$localeChoice;

			this._enumLocaleUnset[$locale] = {
				$title: this._enumLocale[$locale].$title
			};

			// == update this.$values ==
			this.$values[this._enumLocale[$locale].$index].$value = null;

			// == update display ==
			this.applyChange({
				$translations: [{
					$uuid: record.$uuid,
					$index: record.getRecordIndex(),
					$isDeleted: true
				}]
			});

			// if record remove from list at its max size, empty row is added
			if ($isListMaxLength && $isLastRecordSet) {
				this._appendEmptyRow(list.dataset.length);
			}
		}
	},
	applyChange: function(newData) {
		// apply change
		DesktopPage.prototype.applyChange.call(this, newData);
		// set non empty locale enum to read-only state
		// set enum list for empty record
		var records = this.boundFields && this.boundFields.$translations[0].records;
		if (records) {
			for (var ii = 0, jj = records.length; ii < jj; ii++) {
				var record = records[ii];
				if (record.dataset && record.dataset.$localeChoice != undefined) {
					var comboItem = record.boundFields.$localeChoice[0];
					// set enum list for empty row if enumLocaleUnset defined
					if (record.dataset.$localeChoice == 0 || comboItem.$isEditMode) {
						var keys = Object.keys(this._enumLocaleUnset);
						if (keys.length > 0) {
							var $enum = [];
							for (var ff = 0, pp = keys.length; ff < pp; ff++) {
								if (this._enumLocaleUnset[keys[ff]]) {
									$enum.push({
										$value: keys[ff],
										$title: this._enumLocaleUnset[keys[ff]].$title
									});
								}
							}
							comboItem.builder.setEnum($enum);
						}
					}
				}
			}
		}
	},
	_appendEmptyRow: function(index) {
		this.applyChange({
			$translations: [{
				$uuid: helpers.uuid.generate(),
				$index: index,
				$localeChoice: "",
				$localeValue: "",
				$links: {
					$delete: {
						$isHidden: true
					}
				},
				$properties: {
					$localeValue: {
						$isEditMode: false
					}
				}
			}]
		});
	},
	applyShortCuts: function(shortcurts, event, focusField) {
		if (!focusField) {
			focusField = (this.focusField && !this.focusField.disposed) ? this.focusField : null;
		}
		if (shortcurts.enter || shortcurts.tab) {
			this._appendNewRow(shortcurts.enter, shortcurts.tab, focusField);
		}
		return false;
	},
	_appendNewRow: function(isSelect, isTab, focusField) {
		// add a new row on enter if last cell focused
		if ((isSelect || isTab) && focusField) {
			var list = this.getLastFocusGrid(focusField);
			if (focusField.getDataValue() &&
				focusField.$item.$bind == "$localeValue" &&
				focusField.articleParent.getRecordIndex() == (list.dataset.length - 1) &&
				list.dataset.length < Object.keys(this._enumLocale).length) {
				this._appendEmptyRow(focusField.articleParent.getRecordIndex() + 1);
			}
		}
	},
	dispose: function() {
		this._enumLocale = this._enumLocaleSet = this._enumLocaleUnset = this.$values = null;
		DesktopPage.prototype.dispose.call(this);
	}
});