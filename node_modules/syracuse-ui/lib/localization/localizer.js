"use strict";
var helpers = require('syracuse-core/lib/helpers');
var TranslationPage = require('syracuse-ui/lib/localization/translationPage').TranslationPage;


function _ensureLocalizeItemId($item) {
	if (!$item.$title || $item.$title.indexOf("{@") < 0) {
		$item.$title = "{@" + helpers.uuid.generate() + "}";
	}
}

function _extractTitleKey($title) {
	return document.site.expressionParser.extractCode($title);
}

function _updatePageLocalization(page, $key, values) {
	var language = exports.getLanguage();
	var $localization = page.$item.$localization = page.$item.$localization || {};
	for (var ii = 0, jj = values.length; ii < jj; ii++) {
		var value = values[ii];
		if (value.$value) {
			($localization[value.$locale] = $localization[value.$locale] || {})[$key] = value.$value;
			if (value.$locale == language) {
				(page.$prototype.$localization = page.$prototype.$localization || {})[$key] = value.$value;
			}
		} else {
			if ($localization[value.$locale]) {
				delete $localization[value.$locale][$key];
				if (!Object.keys($localization[value.$locale]).length) {
					delete $localization[value.$locale];
				}
			}
		}
	}
}


function _setPageLocalizationEntry(page, $key, $value) {
	if (page && page.$item) {
		var $localization = page.$item.$localization = page.$item.$localization || {};
		var language = exports.getLanguage();
		if (language) {
			($localization[language] = $localization[language] || {})[$key] = $value;
			(page.$prototype.$localization = page.$prototype.$localization || {})[$key] = $value;
		}
	}
};

exports.getLanguage = function() {
	return document.site.userProfile.getSelectedLocale().code;
};


exports.getDefaultTabTitle = function(boxParent, $id) {
	var defaultTitle = document.site.localize.defaultTabTitle;
	var tabs = boxParent.layoutContent && boxParent.layoutContent.items;
	var count = 1;
	if (tabs) {
		for (var ii = 0, jj = tabs.length; ii < jj; ii++) {
			var title = tabs[ii].getTitle() || "";
			if (title.indexOf(defaultTitle) >= 0) {
				count++;
			}
		}
	}
	var $key = "@" + ($id || helpers.uuid.generate());
	_setPageLocalizationEntry(boxParent.page, $key, defaultTitle + " " + count);
	return "{" + $key + "}";
};

exports.applyPageLocalization = function(page) {
	if (page.$item.$localization) {
		var langs = Object.keys(page.$item.$localization);
		if (langs.length) {
			var language = exports.getLanguage();
			var $localization;
			if (language) {
				$localization = page.$item.$localization[language];
			}
			if (!$localization) {
				$localization = page.$item.$localization["en-us"] || page.$item.$localization[langs[0]];
			}
			if ($localization) {
				page.$prototype.$localization = page.$prototype.$localization || {};
				document.site.deltaManager.applyObjectDelta(page, page.$prototype.$localization, $localization);
			}
		}
	}
};

function _localizeFieldValue(menuItem) {
	if (!menuItem.contextField.getDataValue() || menuItem.contextField.getDataValue() == '') {
		document.site.showMessage({
			$title: document.site.localize.fieldEmptyErrLocalizeTitle,
			$message: document.site.localize.fieldEmptyErrLocalize,
			$type: "warning",
			$buttons: "ok",
			$default: "ok"
		});
	}
	document.controller.sendRequest(null, {
		method: "GET",
		$location: {
			$url: menuItem.$url
		}
	}, function(data, response, $url) {
		if (!data.$values) {
			document.site.showDiagnoses({
				$diagnoses: [{
					$message: document.site.localize.lPageNoValues
				}]
			}, menuItem);
			return false;
		}
		var translationPage = new TranslationPage();
		translationPage.isReadOnly = !(data.$links && data.$links.$save);
		translationPage.loadBox(data);
		if (translationPage.menuBar) {
			translationPage.menuBar.toggleBar(false);
		}
		var options = {
			$dialogMode: "modal",
			$useModalSkin: true,
			page: translationPage
		};
		if (!translationPage.isReadOnly) {
			options.onValidate = function(page) {
				page.validateFields();
				var $menu = page.$menus.$save;
				if ($menu.$url !== 'test') { // 'test' is $url value for $save link in test page
					var reqOpt = {
						method: $menu.$method,
						$location: {
							$url: $menu.$url
						},
						data: {
							$values: page.$values
						},
						$contentType: "application/json"
					};
					document.controller.sendRequest(null, reqOpt, function(data, response, $url) {
						// assuming client receives data for the underneath page
						if (!(menuItem.articleParent.onLocalizeField && !menuItem.articleParent.onLocalizeField(menuItem, data, response, $url))) {
							menuItem.page.applyChange(data);
						}
						if (page.dialogWrapper) {
							page.dialogWrapper.close(undefined, true);
						}
					}, function(error, httpquery) {
						var $diagnoses;
						if (error.data.indexOf("$diagnoses") != -1) {
							$diagnoses = JSON.parse(error.data).$diagnoses;
						} else {
							$diagnoses = [{
								$severity: "error",
								$message: error.data
							}];
						}
						document.site.showDiagnoses({
							$diagnoses: $diagnoses
						}, page);
					});
					return false;
				}
				return true;
			};
		}
		menuItem.page.openDialog(options);
	}, function(error, httpquery) {
		var $diagnoses;
		if (error.data.indexOf("$diagnoses") != -1) {
			$diagnoses = JSON.parse(error.data).$diagnoses;
		} else {
			$diagnoses = [{
				$severity: "error",
				$message: error.data
			}];
		}
		document.site.showDiagnoses({
			$diagnoses: $diagnoses
		});
	});
}

function _localizeSectionTitle(menuItem) {
	document.site.userProfile.getRegionalPreferences(function(preferences) {
		var $pageLocalization = menuItem.page.designedArticle.$item.$localization || {};
		var $values = [];
		var section = menuItem.contextField.localizedSection;
		var $titleKey = _extractTitleKey(section.$item.$title);
		for (var ii = 0, jj = preferences.length; ii < jj; ii++) {
			var value = {
				$title: preferences[ii].description,
				$locale: preferences[ii].code,
			};
			if ($pageLocalization[value.$locale]) {
				value.$value = $pageLocalization[value.$locale][$titleKey];
			}
			$values.push(value);
		}
		var translationPage = new TranslationPage();
		translationPage.loadBox({
			$values: $values
		});
		menuItem.page.openDialog({
			$dialogMode: "modal",
			$useModalSkin: true,
			page: translationPage,
			onValidate: function(page) {
				page.validateFields();
				_updatePageLocalization(section.page, $titleKey, page.$values);
				section.setTitle(section.$item.$title);
				menuItem.contextField.setDataValue(section.getTitle());
				menuItem.contextField.page.saveArticleUpdate(); //page is designer
				return true;
			}
		});
	});
}

exports.setSectionTitleEditor = function(field, section) {
	field.localizedSection = section;
	_ensureLocalizeItemId(section.$item);
	if (section.isTitleUnlocalized) {
		field.setDataValue("");
	} else {
		field.setDataValue(section.getTitle());
	}
};

exports.onSectionTitleEditorChange = function(field, value) {
	var section = field.localizedSection;
	_setPageLocalizationEntry(section.page, _extractTitleKey(section.$item.$title), value);
	section.setTitle(section.$item.$title);
};
exports.onLocalizeFieldClick = function(menuItem) {
	if (menuItem.contextField.localizedSection) {
		_localizeSectionTitle(menuItem);
	} else {
		_localizeFieldValue(menuItem);
	}
};