"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;
var SideBar = require("syracuse-ui/lib/page/aside/sideBar").SideBar;
var InsertTree = require("syracuse-ui/lib/authoring/tree/insertTree").InsertTree;
var ContentTree = require("syracuse-ui/lib/authoring/tree/contentTree").ContentTree;
var _designerViewChoice = require('syracuse-ui/lib/authoring/designerViewChoice');
var _uiSwitchTool = require("syracuse-ui/lib/authoring/tools/uiSwitchTool");
var _localizationTool = require("syracuse-ui/lib/authoring/tools/localizationTool");

var PageStorage = require("syracuse-ui/lib/authoring/pageStorage").PageStorage;
var ItemTool = require("syracuse-ui/lib/authoring/tools/itemTool").ItemTool;

var _settingPanel = require("syracuse-ui/lib/authoring/tools/settingPanel");


function _onDesignerApplyChangeToLabel(designedItem, newData) {
	var $titleChoice = newData.$fieldsTitleChoice || newData.$fieldTitleChoice;
	if ($titleChoice !== undefined) {
		if (!newData.$properties.$labelAlignment) {
			newData.$properties.$labelAlignment = {};
		}
		newData.$properties.$labelAlignment.$isDisabled = $titleChoice == 2;
	}
	if (newData.$isTitleHidden !== undefined) {
		newData.$properties.$title = newData.$properties.$title || {};
		newData.$properties.$title.$isDisabled = newData.$isTitleHidden;
		newData.$properties.$title = newData.$properties.$isBoxCollapsable = newData.$properties.$isMaximizable = {
			$isDisabled: newData.$isTitleHidden
		};
	}
}

function _getTitleChoiceProto() {
	return {
		$type: "application/x-choice",
		$isTitleHidden: true,
		$value: {
			$type: "application/x-string",
			$enum: [{
				$value: 0,
				$title: syra_local.aw_titleVisible
			}, {
				$value: 1,
				$title: syra_local.aw_titleBlank
			}, {
				$value: 2,
				$title: syra_local.aw_titleHidden
			}]
		}
	};
}

function _addLabelFields(designer, $stepSkin) {
	designer.$prototype.$properties.$labelAlignment = {
		$type: "application/x-choice",
		$title: syra_local.aw_labelPosition,
		$value: {
			$type: "application/x-string",
			$enum: [{
				$value: "t",
				$title: syra_local.aw_labelPositionTop
			}, {
				$value: "ll",
				$title: syra_local.aw_labelPositionLeftLeft
			}, {
				$value: "lr",
				$title: syra_local.aw_labelPositionLeftRight
			}]
		}
	};
	designer.$prototype.$properties.$fieldsTitleChoice = _getTitleChoiceProto();
	designer.$prototype.$properties.$fieldTitleChoice = _getTitleChoiceProto();
}

function _addViewBtns(designer, slot) {
	var types = ["viewTypePreview", "viewTypeLayout", "viewTypeStructure"];
	syra_site.mobileGateway && types.push("viewTypeJSON");

	designer.onViewClick = function(event, btn) {
		var designer = this.parent;
		if (designer.$viewType) {
			syra_dom.toggleClass(designer[designer.$viewType + "_btn"].link, "s-selected", false);
		}
		designer.$viewType = this.viewType;
		if (designer.isJsonMode && designer.$viewType != "viewTypeJSON") {
			designer.isJsonMode = false;
			syra_site.mobileGateway.toggleJsonEditor(false);
		}
		designer._ensureDesigneBar();
		if (designer.$viewType == "viewTypeJSON") {
			designer.isJsonMode = true;
			syra_site.mobileGateway.toggleJsonEditor(true);
		}
		syra_dom.toggleClass(this.link, "s-selected", true);
		designer.toggleUIDesign(designer.designedArticle, true);
		syra_site.ensureArticleVisibility(designer.designedArticle.page);
	};

	types.forEach(function(type) {
		designer[type + "_btn"] = syra_menus.button.add({
			parent: designer,
			slot: slot,
			text: syra_local["aw_" + type],
			css: "s-aw-viewType-link",
			btnclick: designer.onViewClick,
			viewType: type
		});
	});

	syra_dom.toggleClass(designer[(designer.$viewType = "viewTypeLayout") + "_btn"].link, "s-selected", true);

};

var _stack = [];

exports.Designer = helpers.defineClass(function() {}, Designer, {
	setFieldTitleItem: function(item) {
		var $titleChoice = item.$item.$isTitleHidden ? 2 : ((item.$item.$isTitleEmpty) ? 1 : 0);
		this.applyChange({
			$fieldTitleChoice: $titleChoice,
		});
	},
	isTopPageDesigner: function() {
		return _stack.indexOf(this) == (_stack.length - 1);
	},
	loadBox: function() {

		(_stack.indexOf(this) < 0) && _stack.push(this);

		this.$prototype = {
			$properties: {
				$isMaximizable: {
					$type: "application/x-boolean",
					$title: syra_local.aw_isMaximizable
				},
				$isBoxCollapsable: {
					$type: "application/x-boolean",
					$title: syra_local.aw_isBoxCollapsable
				},
				$isAdvanced: {
					$type: "application/x-boolean",
					$title: syra_local.aw_isAdvanced
				},

				$rowAlign: {
					$type: "application/x-choice",
					$title: syra_local.aw_rowAlign,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "top",
							$title: syra_local.aw_rowAlignTop
						}, {
							$value: "bottom",
							$title: syra_local.aw_rowAlignBottom
						}]
					}
				}
			}
		};
		Designer.prototype.loadBox.call(this);
	},
	drawBox: function() {
		syra_site.registerScreenDesigner(true, this);
		(this.itemTool = new ItemTool()).load(this);

		this.domItem = this.layoutSlot = document.createElement("aside");
		this.layoutSlot.className = "s-aw-page";
		syra_site.header.parentNode.insertBefore(this.layoutSlot, syra_site.header.nextSibling);
		syra_dom.hide(this.layoutSlot, false);

		this.leftTop = syra_dom.addDiv("s-aw-page-left", this.layoutSlot);
		var viewsSlot = syra_dom.addDiv("s-aw-page-views", this.layoutSlot);

		this.treebarSlot = syra_dom.addDiv("s-aw-treebar-slot");
		this.setArticleId(this.treebarSlot);
		this.asideParent = this.designedArticle.page;
		if (this.asideParent.isVignettePage) {
			this.asideParent = this.asideParent.getMasterPage();
		}
		_uiSwitchTool.load(this);
		if (this.designedArticle == this.designedArticle.page) {
			_addViewBtns(this, viewsSlot);
		}
		this.designerHelpLink = this.loadNewItem(this.leftTop, {
			$bind: "$designerDocumentation",
			$category: "link",
			$noText: true,
			$skin: "s-design-history-btn-icon",
			$icon: {
				$value: "help"
			}
		}, syra_site);

		this.loadHistoryTool();

		this.loadPageStorage();

		_localizationTool.load(this);
		this.loadTemplateTools();
		_addLabelFields(this);

		this.propertiesBar = new _settingPanel.PropertiesBar();
		this.propertiesBar.load(this);

		this.asideParent.domItem.appendChild(this.propertiesBar.slot);
		this.asideParent.domItem.appendChild(this.treebarSlot);

		var bar = this.treesBar = new SideBar();
		bar.options = {
			resizeDirection: "left",
			$skin: "s-aw-treebar"
		};
		bar.designer = this;
		bar.resizeBar = function() {
			if (SideBar.prototype.resizeBar.call(this)) {
				if (this.designer.contentTree) {
					var height = syra_dom.getInnerSize(this.slot).height;
					var bodyHeight = Math.max(height - this.header.getBoundingClientRect().height, 20) + "px";
					this.designer.contentTree.tabItem.body.style.height = bodyHeight;
					this.designer.insertTree.tabItem.body.style.height = bodyHeight;
				}
			}
		};
		bar.isDesignerBar = true;
		//bar.layoutSlot = designer.propertiesSlot;
		bar.slot = this.treebarSlot;
		bar.header = document.createElement("div");
		bar.body = document.createElement("div");
		bar.body.className = "s-aw-treebar-body";
		bar.body.appendChild(bar.header);
		bar.load(this.designedArticle.page);

		this.selectedTab = null;
		this.designedArticle.garbage && this.designedArticle.garbage.loadFreeField();
		(this.contentTree = new ContentTree()).load(this);
		(this.insertTree = new InsertTree()).load(this);
		this.contentTree.tabItem.select(true);

		syra_dom.hide(this.treebarSlot, false);

		this.toggleUIDesign(this.designedArticle, true);

		if (this.designedArticle.$item.$transaction && this.leftTop) {
			var $title = "Transaction";
			if (this.designedArticle.$item.$isModel) {
				$title += " Model";
			}
			this.transactionLabel = document.createElement("div");
			this.transactionLabel.textContent = $title;
			this.transactionLabel.id = "s-aw-transaction";
			syra_dom.hide(this.transactionLabel, true);
			this.leftTop.appendChild(this.transactionLabel);
		}
		this._ensureDesigneBar();
		this.selectItem(this.designedArticle, true);
	},
	_ensureDesigneBar: function(isDesigning) {
		isDesigning = isDesigning !== false;
		this.isDesignBarVisible = isDesigning && this.$viewType != "viewTypePreview";

		if (this.propertiesBar) {
			syra_dom.hide(this.propertiesBar.slot, !this.isDesignBarVisible);
			this.asideParent.domItem.style.paddingRight = this.isDesignBarVisible ? (this.propertiesBar.slot.clientWidth + "px") : "";
		}
		this.asideParent.domItem.style.paddingLeft = this.isDesignBarVisible ? (this.treebarSlot.clientWidth + "px") : "";
		var page = this.designedArticle;
		if (page.bars) {
			for (var ii = 0, jj = page.bars.length; ii < jj; ii++) {
				var bar = page.bars[ii];
				var visible = this.isDesignBarVisible == !! bar.isDesignerBar;
				if (visible) {
					if (bar.beforeDesign) {
						bar.beforeDesign.parentNode && bar.beforeDesign.parentNode.insertBefore(bar.slot, bar.slot.nextSibling);
						delete bar.beforeDesign;
						bar.resizeSplitter();
					}
				} else {
					if (!bar.beforeDesign) {
						bar.beforeDesign = {
							parentNode: bar.slot.parentNode,
							nextSibling: bar.slot.nextSibling
						};
						syra_dom.removeChild(bar.slot);
					}
				}
			}
		}
	},
	fillTree: function() {
		if (this.designedArticle) {
			this.contentTree.fill();
			this.insertTree.fill();
			this.selectedTab && this.selectedTab.select(true);
		}
	},

	displayViewTitle: function($view) {
		if ($view) {
			this.viewTitleSlot.textContent = $view.$isFactory ? syra_local.aw_pg_choice_factory : $view.$title;
		}
		syra_dom.hide(this.viewTitleSlot, !! $view);
	},
	onEndHistoryChangeStep: function(itemToSelect) {
		this.fillTree && this.fillTree();
		this.toggleUIDesign(this.designedArticle, true);
		this.selectItem(itemToSelect, true);
	},
	endArticleUpdate: function(selectedItem, isStructureUpdated) {
		syra_site.ensureArticleVisibility(this.designedArticle.page);
		isStructureUpdated && this.fillTree && this.fillTree();
		selectedItem = selectedItem || this.designedItem;
		this.selectItem(selectedItem, true);
		this.toggleUIDesign(this.designedArticle, true);
		this.history.updateSteps();
		this.saveDesign();
	},
	saveDesign: function() {
		this.pageStorage && this.pageStorage.saveDesign();
	},
	onBeforeMainPageChange: function(continueChanging) {
		if (this.pageStorage && this.pageStorage.onBeforeMainPageChange(continueChanging) == false) {
			return false;
		}
		this.closeDesigner();
		return true;
	},
	openDesigner: function(designedArticle) {
		Designer.prototype.openDesigner.call(this, designedArticle);
		_designerViewChoice.disableOpener(this.designedArticle, true);
	},
	closeDesigner: function() {
		_designerViewChoice.disableOpener(this.designedArticle, false);
		syra_site.switchItemDesigner(this.designedArticle, false);
	},
	onTopScreenDesigner: function(isTop) {
		syra_dom.hide(this.propertiesBar.slot, !isTop);
		syra_dom.hide(this.layoutSlot, !isTop);
		syra_dom.hide(this.treebarSlot, !isTop);
	},
	loadPageStorage: function() {
		var id;
		if (this.pageStorage) {
			id = this.pageStorage.id;
			this.pageStorage.dispose();

		}
		this.pageStorage = new PageStorage();
		this.pageStorage.id = id;
		this.pageStorage.load(this);
	},


	selectItem: function(item, select) {
		if (item && item.isMenuItem && item.referenceField) {
			item = item.referenceField;
		}
		if (this.awLayout && this.awLayout.disposed) {
			this.awLayout = null;
		}
		if (this.designedItem && this.designedItem.disposed) {
			this.designedItem = null;
		}
		if (item && item.disposed) {
			item = this.designedItem;
		}
		if (select) {
			item = item || this.designedArticle.page;
			this.selectItem(null, false);
			if (item.isLayout) {
				this.designedItem = item.boxParent;
				this.awLayout = item;
			} else {
				this.designedItem = item;
				this.awLayout = null;
			}

			this.designedArticle.page.scrollToItem(this.awLayout || this.designedItem);
			this.propertiesBar.show();
			this.awLayout && this.toggleItemCss(this.awLayout, "s-aw-designed", true);
			this.toggleItemCss(item, "s-aw-designed", true);
		} else {
			item = item || this.designedItem;
			item && this.toggleItemCss(item, "s-aw-designed", false);
			this.awLayout && this.toggleItemCss(this.awLayout, "s-aw-designed", false);
		}
		if (this.contentTree) {
			this.contentTree.selectNode(item, select);
			this.insertTree.selectNode(item, select);
		}
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$isHidden !== undefined) {
				newData.$properties.$isMaximizable = {
					$isDisabled: newData.$isHidden
				};
				newData.$properties.$isBoxCollapsable = {
					$isDisabled: newData.$isHidden
				};
			}
			_onDesignerApplyChangeToLabel(this.designedItem, newData);

			this.propertiesBar.applyChange(newData);

			if (newData.$title !== undefined) {
				this._ensureSelectedItemTitle();
			}
		}
		Designer.prototype.applyChange.call(this, newData);
	},
	notifyDataChange: function(field, value) {
		this.saveDesign();
		switch (field.$item.$bind) {
			case "$rowAlign":
				if (this.awLayout) {
					this.awLayout.$layout.$rowAlign = value;
					for (var ii = 0, jj = this.awLayout.items.length; ii < jj; ii++) {
						this.awLayout.items[ii].layoutSlot.style.verticalAlign = value;
					}
					this.endArticleUpdate(this.awLayout, true);
				}
				break;
			default:
				var metaData = {};
				if (!_localizationTool.onNotifyDataChange(this, metaData, field, value)) {
					switch (field.$item.$bind) {
						case "$fieldsTitleChoice":
							var $meta = {
								$fieldsIsTitleEmpty: false,
								$fieldsIsTitleHidden: false
							};
							switch (value) {
								case 1:
									$meta.$fieldsIsTitleEmpty = true;
									break;
								case 2:
									$meta.$fieldsIsTitleHidden = true;
									break;
							}
							this.designedItem.applyDesignMetaData($meta, true);
							metaData[field.$item.$bind] = value;
							break;
						case "$fieldTitleChoice":
							var $meta = {
								$isTitleEmpty: false,
								$isTitleHidden: false
							};
							switch (value) {
								case 1:
									$meta.$isTitleEmpty = true;
									break;
								case 2:
									$meta.$isTitleHidden = true;
									break;
							}
							this.designedItem.applyDesignMetaData($meta, true);
							metaData[field.$item.$bind] = value;
							break;
						case "$labelAlignment":
							metaData.$isTopLabelAlignment = (value == "t");
							if (metaData.$isTopLabelAlignment == false) {
								metaData.$isRightTextLabelAlignment = (value == "lr");
							}
							if (this.designedItem.isField) {
								this.designedItem.applyDesignMetaData(metaData, true);
							} else {
								this.designedItem.applyDesignMetaData({
									$fieldsIsTopLabelAlignment: metaData.$isTopLabelAlignment,
									$fieldsIsRightTextLabelAlignment: metaData.$isRightTextLabelAlignment
								}, true);
							}
							break;
						default:
							metaData[field.$item.$bind] = value;
					}
				}
				this.designedItem.applyDesignMetaData(metaData, true);
				this.propertiesBar.notifyDataChange(metaData);
				this.history.updateSteps();
				this.applyChange(metaData);
				this.toggleUIDesign(this.designedArticle, true);
				break;
		}
	},
	_ensureSelectedItemTitle: function() {
		this.selectedItemTitle = this.designedItem.getTitle(false);
		if (this.selectedItemTitle == "" && this.designedItem.$designLevel == "field") {
			this.selectedItemTitle = this.getBindTitle(this.designedItem.$item.$bind, this.designedItem.$field);
		}
		this.propertiesBar.selectedPanel.itemTitle.textContent = this.selectedItemTitle && this.selectedItemTitle != "-" ? this.selectedItemTitle : "";
		this.fillTree && this.fillTree();
	},
	resizeArticle: function(resize) {
		if (this.propertiesBar) {
			var page = this.designedArticle.page;
			if (page.isVignettePage) {
				page = syra_site.landingPage;
			}
			if (this.isDesignBarVisible) {
				if (page.scrollview && this.treesBar && this.treebarSlot.parentNode) {
					this.treesBar.resizeBar();
					this.asideParent.domItem.style.paddingLeft = this.treebarSlot.clientWidth + "px";
				}
				this.propertiesBar.resizeBar(page.barHeight);
			} else {
				this.asideParent.domItem.style.paddingRight = "";
				this.asideParent.domItem.style.paddingLeft = "";
				this.designedArticle.menuBar && this.designedArticle.menuBar.resizeSplitter();
				this.designedArticle.fusionBar && this.designedArticle.fusionBar.resizeSplitter();
			}
		}
		Designer.prototype.resizeArticle.call(this, resize);
	},
	onMenuClick: function(menuItem) {
		if (this.pageStorage) {
			return this.pageStorage.onMenuClick(menuItem);
		}
		return true;
	},
	dispose: function() {
		var found = _stack.indexOf(this);
		(found >= 0) && _stack.splice(found, 1);
		this._ensureDesigneBar(false);
		this.contentTree && this.contentTree.dispose();
		this.insertTree && this.insertTree.dispose();
		this.pageStorage && this.pageStorage.dispose();
		this.itemTool && this.itemTool.dispose();
		this.treesBar && this.treesBar.dispose();
		this.propertiesBar && this.propertiesBar.dispose();
		syra_dom.removeChild(this.layoutSlot);
		syra_dom.removeChild(this.treebarSlot);
		syra_site.registerScreenDesigner(false, this);
		this.toggleUIDesign(this.designedArticle, false, true);
		Designer.prototype.dispose.call(this);
	}
});