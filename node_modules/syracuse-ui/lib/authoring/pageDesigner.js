"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;

var TreesBar = require("syracuse-ui/lib/authoring/page/tree/treesBar").TreesBar;
var Trees = require("syracuse-ui/lib/authoring/page/tree/trees").Trees;
var designProperties = require("syracuse-ui/lib/authoring/page/designProperties");

var DesignerFieldAddins = require("syracuse-ui/lib/authoring/fieldAddins/designerFieldAddins").DesignerFieldAddins;
var UISwitchTool = require("syracuse-ui/lib/authoring/tools/uiSwitchTool").UISwitchTool;
var ViewsTool = require("syracuse-ui/lib/authoring/tools/viewsTool").ViewsTool;
var LocalizationTool = require("syracuse-ui/lib/authoring/tools/localizationTool").LocalizationTool;
var LabelTool = require("syracuse-ui/lib/authoring/tools/labelTool").LabelTool;

var PageStorage = require("syracuse-ui/lib/authoring/storage/pageStorage").PageStorage;
var ItemTool = require("syracuse-ui/lib/authoring/tools/itemTool").ItemTool;

function PageDesigner() {}

exports.PageDesigner = helpers.defineClass(PageDesigner, Designer, {
	loadBox: function() {
		this.$prototype = {
			$properties: {
				$isMaximizable: {
					$type: "application/x-boolean",
					$title: this.localize.aw_isMaximizable
				},
				$isBoxCollapsable: {
					$type: "application/x-boolean",
					$title: this.localize.aw_isBoxCollapsable
				},
				$isAdvanced: {
					$type: "application/x-boolean",
					$title: this.localize.aw_isAdvanced
				},

				$rowAlign: {
					$type: "application/x-choice",
					$title: this.localize.aw_rowAlign,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "top",
							$title: this.localize.aw_rowAlignTop
						}, {
							$value: "bottom",
							$title: this.localize.aw_rowAlignBottom
						}]
					}
				}
			}
		};
		this.panels = {};
		Designer.prototype.loadBox.call(this);
	},
	appendSideBars: function(append) {
		var page = this.designedArticle.page;
		if (page.isVignettePage) {
			page = page.getMasterPage();
			page.landingPageMaster.bar.toggleBar(!append);
		}
		if (append) {
			page.domItem.appendChild(this.propertiesSlot);
			page.domItem.insertBefore(this.treebarSlot, page.domItem.firstChild);
		} else {
			document.site.removeDomChild(this.treebarSlot);
			document.site.removeDomChild(this.propertiesSlot);
		}
	},
	drawBox: function() {
		document.site.registerScreenDesigner(true, this);
		(this.itemTool = new ItemTool()).load(this);

		this.designedArticle.isDesignFreeze = true;
		this.layoutSlot = document.createElement("aside");
		this.layoutSlot.className = "s-aw-page";
		document.site.header.parentNode.insertBefore(this.layoutSlot, document.site.header.nextSibling);
		this.layoutSlot.style.display = "";
		this.$$item = $(this.layoutSlot);

		//left part
		this.leftTop = document.createElement("div");
		this.leftTop.className = "s-aw-page-left";
		this.layoutSlot.appendChild(this.leftTop);

		//middle part
		this.viewsSlot = this.layoutSlot.appendChild(document.createElement("div"));
		this.viewsSlot.className = "s-aw-page-views";

		//right part
		this.propertiesSlot = document.createElement("div");
		this.propertiesSlot = document.createElement("div");
		this.propertiesSlot.className = "s-aw-properties-slot";
		this.propertiesSlot.style.width = "200px";
		this.propertiesBodySlot = document.createElement("div");
		this.setArticleId(this.propertiesBodySlot);
		this.propertiesSlot.appendChild(this.propertiesBodySlot).className = "s-aw-properties-body";


		this.treebarSlot = document.createElement("div");
		this.treebarSlot.className = "s-aw-treebar-slot";
		this.setArticleId(this.treebarSlot);
		this.appendSideBars(true);

		(this.uiSwitchTool = new UISwitchTool()).load(this);
		if (this.designedArticle == this.designedArticle.page) {
			(this.viewsTool = new ViewsTool()).load(this, "s-aw-viewType-link");
		}

		this.helpLink = document.createElement("a");
		this.helpLink.title = this.localize.aw_help;
		this.helpLink.setAttribute("data-s-picker", this.helpLink.syraPickerType = "$authorHelp");
		this.helpLink.className = "s-design-history-link-icon";
		this.helpLink.style.backgroundImage = "url('/syracuse-ui/themes/desktop/sage/images/authoring/s-aw-help.png')";

		this.historySlot = document.createElement("div");
		this.historySlot.className = "s-design-history-slot";
		this.historySlot.appendChild(this.helpLink);
		this.leftTop.appendChild(this.historySlot);
		this.loadHistoryTool();

		this.loadPageStorage();

		(this.localizationTool = new LocalizationTool()).load(this);
		this.loadTemplateTools();
		(this.labelTool = new LabelTool()).load(this);
		(this.fieldAddinsTool = new DesignerFieldAddins()).load(this);

		this.trees = new Trees();
		this.trees.treebarBody = document.createElement("div");
		this.trees.treebarBody.className = "s-aw-treebar-body";

		this.treesBar = new TreesBar();
		this.treesBar.trees = this.trees;
		this.treesBar.layoutSlot = this.propertiesBodySlot;
		this.treesBar.barSlot = this.treebarSlot;
		this.treesBar.barBody = this.trees.treebarBody;
		this.treesBar.load(this.designedArticle.page);

		this.trees.load(this);
		this.propertiesBodySlot.style.display = "";
		this.treebarSlot.style.display = "";

		this.uiSwitchTool.toggleUIDesign(this.designedArticle, true);

		if (this.designedArticle.$item.$transaction && this.historySlot) {
			var $title = "Transaction";
			if (this.designedArticle.$item.$isModel) {
				$title += " Model";
			}
			this.transactionLabel = document.createElement("div");
			this.transactionLabel.style.display = "";
			this.transactionLabel.textContent = $title;
			this.transactionLabel.id = "s-aw-transaction";
			this.transactionLabel.style.display = "none";
			this.historySlot.appendChild(this.transactionLabel);
		}
		this.selectItem(this.designedArticle, true);
	},
	onEndHistoryChangeStep: function(itemToSelect) {
		if (this.trees) {
			this.trees.fill();
		}
		this.uiSwitchTool.toggleUIDesign(this.designedArticle, true);
		this.selectItem(itemToSelect, true);
	},
	endArticleUpdate: function(selectedItem, isStructureUpdated) {
		this.designedArticle.page.ensurePageVisibility();
		if (isStructureUpdated && this.trees) {
			this.trees.fill();
		}
		selectedItem = selectedItem || this.designedItem;
		this.selectItem(selectedItem, true);
		this.uiSwitchTool.toggleUIDesign(this.designedArticle, true);
		this.historyTool.notifyUpdate();
		this.saveDesign();
	},
	saveDesign: function() {
		if (this.pageStorage) {
			this.pageStorage.saveDesign();
		}
	},
	onBeforeMainPageChange: function(continueChanging) {
		if (this.pageStorage && this.pageStorage.onBeforeMainPageChange(continueChanging) == false) {
			return false;
		}
		this.closeDesigner();
		return true;
	},
	closeDesigner: function() {
		if (this.designedArticle.pageViewSelector) {
			this.designedArticle.pageViewSelector.disable(false);
		}
		this.designedArticle.designArticle(false);
	},
	onTopScreenDesigner: function(isTop) {
		this.propertiesSlot.style.display = this.layoutSlot.style.display = this.treebarSlot.style.display = isTop ? "" : "none";
		this.itemTool.bindEvents(isTop);
	},
	loadPageStorage: function() {
		var id;
		if (this.pageStorage) {
			id = this.pageStorage.id;
			this.pageStorage.dispose();

		}
		this.pageStorage = new PageStorage();
		this.pageStorage.id = id;
		this.pageStorage.load(this);
	},
	onBarEvent: function(picker, event) {
		if (picker.className.indexOf("s-aw-treebar") >= 0) {
			this.onClickPicker(picker);
		} else {
			Designer.prototype.onBarEvent.call(this, picker, event);
		}
	},
	onClickPicker: function(picker) {
		if (!Designer.prototype.onClickPicker.call(this, picker)) {
			return false;
		}
		if (this.uiSwitchTool && this.uiSwitchTool.onClickPicker(picker)) {
			return false;
		}
		if (this.treesBar && this.treesBar.onClickPicker(picker)) {
			return false;
		}
		if (this.viewsTool && this.viewsTool.onClickPicker(picker)) {
			return false;
		}
		var $bind = picker.getAttribute("data-s-picker");
		switch ($bind) {
			case "$excludeMe":
				var layoutParent = this.designedItem.layoutParent;
				var excludedFields;
				if (this.designedItem.$designLevel == "field") {
					excludedFields = [this.designedItem];
				} else {
					excludedFields = this.designedItem.layoutContent.getFields();
				}
				if (excludedFields) {
					for (var ii = 0, jj = excludedFields.length; ii < jj; ii++) {
						this.designedArticle.garbage.onExcludeField(excludedFields[ii].$item.$bind, true);
						this.designedArticle.unbind(excludedFields[ii]);
					}
				}
				var index = layoutParent.items.indexOf(this.designedItem);
				layoutParent.removeItem(this.designedItem, true);
				var newItem = layoutParent.items[index] || layoutParent.items[index - 1];
				if (newItem && newItem.isSpaceBox) {
					newItem = null;
				}
				newItem = newItem || layoutParent.boxParent;
				switch (layoutParent.$layout.$layoutType) {
					case "row":
						layoutParent.addSpaceBox(index);
						break;
					case "tabs":
						if (layoutParent.items.length == 0) {
							document.site.layoutUpdater.convertToNewLayout(layoutParent, {
								$layoutType: "stack",
								$width: "100"
							});
						}
						break;
				}
				this.endArticleUpdate(newItem, true);
				break;
			case "$addRowBefore":
			case "$addRowAfter":
				var layout = this.awLayout ? this.awLayout : (this.designedItem.layoutContent || this.designedItem.layoutParent);
				var $curRow = {
					$layoutType: layout.$layout.$layoutType,
					$widths: layout.$layout.$widths,
					$autoSize: layout.$layout.$autoSize
				};
				if (!layout.layoutParent) {
					layout = document.site.layoutUpdater.ensureHasParent(layout);
				}
				var index = layout.layoutParent.items.indexOf(layout);
				var newRow = layout.layoutParent.loadChildItem(null, {
					$layoutType: $curRow.$layoutType,
					$widths: $curRow.$widths,
					$autoSize: $curRow.$autoSize,
				}, ($bind == "$addRowAfter") ? ++index : index);
				this.endArticleUpdate(newRow, true);
				break;
		}
		return true;
	},
	selectItem: function(item, select) {
		if (this.awLayout && this.awLayout.disposed) {
			this.awLayout = null;
		}
		if (this.designedItem && this.designedItem.disposed) {
			this.designedItem = null;
		}
		if (item && item.disposed) {
			item = this.designedItem;
		}
		if (select) {
			item = item || this.designedArticle.page;
			this.selectItem(null, false);
			if (item.isLayout) {
				this.designedItem = item.boxParent;
				this.awLayout = item;
			} else {
				this.designedItem = item;
				this.awLayout = null;
			}

			this.designedArticle.page.scrollToItem(this.awLayout || this.designedItem);
			this.showSettingPanel();
			if (this.awLayout) {
				this.uiSwitchTool._toggleItemCss(this.awLayout, "s-aw-designed", true);
			}
			this.uiSwitchTool._toggleItemCss(item, "s-aw-designed", true);
		} else {
			item = item || this.designedItem;
			if (item) {
				this.uiSwitchTool._toggleItemCss(item, "s-aw-designed", false);
			}
			if (this.awLayout) {
				this.uiSwitchTool._toggleItemCss(this.awLayout, "s-aw-designed", false);
			}
		}
		if (this.trees) {
			this.trees.selectNode(item, select);
		}
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$isHidden !== undefined) {
				newData.$properties.$isMaximizable = {
					$isDisabled: newData.$isHidden
				};
				newData.$properties.$isBoxCollapsable = {
					$isDisabled: newData.$isHidden
				};
			}
			this.labelTool.onDesignerApplyChange(this.designedItem, newData);
			this.fieldAddinsTool.onDesignerApplyChange(newData);
			if (newData.$title !== undefined) {
				this._ensureSelectedItemTitle();
			}
		}
		Designer.prototype.applyChange.call(this, newData);
	},
	notifyDataChange: function(field, value) {
		this.saveDesign();
		switch (field.$item.$bind) {
			case "$rowAlign":
				if (this.awLayout) {
					this.awLayout.$layout.$rowAlign = value;
					for (var ii = 0, jj = this.awLayout.items.length; ii < jj; ii++) {
						this.awLayout.items[ii].layoutSlot.style.verticalAlign = value;
					}
					this.endArticleUpdate(this.awLayout, true);
				}
				break;
			default:
				var metaData = {};
				if (!this.localizationTool.onDesignerNotifyDataChange(this.designedItem, metaData, field, value) && !this.labelTool.onDesignerNotifyDataChange(this.designedItem, metaData, field, value)) {
					metaData[field.$item.$bind] = value;
				}
				this.designedItem.applyDesignMetaData(metaData, true);
				if (this.designedItem.$designLevel == "field") {
					this.fieldAddinsTool.notifyDataChange(metaData);
				}
				this.historyTool.notifyUpdate();
				this.applyChange(metaData);
				break;
		}
	},
	_ensureSelectedItemTitle: function() {
		this.selectedItemTitle = this.designedItem.getTitle(false);
		if (this.selectedItemTitle == "" && this.designedItem.$designLevel == "field") {
			this.selectedItemTitle = this.getBindTitle(this.designedItem.$item.$bind, this.designedItem.$field);
		}
		this.selectedPanel.setDescription(this.selectedItemTitle && this.selectedItemTitle != "-" ? this.selectedItemTitle : "");
		if (this.trees) {
			this.trees.fill();
		}
	},


	findItem: function(domItem, findLayout, event) {
		if (domItem.syraAwTreeNodeId) {
			var node = this.trees.findNode(event);
			return node && node.item;
		}
		return Designer.prototype.findItem.call(this, domItem, findLayout, event);
	},
	addExcludeMeLink: function(panelId) {
		if (panelId != "article") {
			this.selectedPanel.datastore = this.selectedPanel.datastore || {};
			if (!this.selectedPanel.datastore.excludeMeLink) {
				var excludeMeLink = document.createElement("a");
				excludeMeLink.className = "s-aw-exclude-me";
				excludeMeLink.textContent = excludeMeLink.title = this.localize.aw_excludeMe;
				excludeMeLink.setAttribute("data-s-picker", "$excludeMe");
				var slot = document.createElement("div");
				slot.className = "s-aw-exclude-me-slot";
				this.selectedPanel.datastore.excludeMeLink = slot.appendChild(excludeMeLink);
				this.selectedPanel.layoutContent.domItem.insertBefore(slot, this.selectedPanel.layoutContent.domItem.firstChild);
			}
		}
	},
	showSettingPanel: function() {
		if (this.panels) {
			this.startChange();
			var panelId = this.designedItem.isMenuItem ? "menu" : this.designedItem.$designLevel;
			if (this.selectedPanel) {
				this.selectedPanel.setState({
					$isHidden: true
				});
			}
			if (!this.panels[panelId]) {
				var $item = designProperties[panelId](this.localize);
				if (panelId == "field") {
					var $items = $item.$layout.$items;
					this.fieldAddinsTool.addFieldSection($items[$items.length - 1].$layout);
				}
				this.panels[panelId] = this.loadNewItem(this.propertiesBodySlot, $item, this);
			}
			(this.selectedPanel = this.panels[panelId]).setTitle(this.localize["aw_" + panelId]);
			this.applyChange({
				$isAdvanced: false,
				$isHidden: false
			});
			this._ensureSelectedItemTitle();
			this.applyChange({
				$isAdvanced: this.designedItem.$item.$isAdvanced,
				$isMaximizable: this.designedItem.$item.$isMaximizable,
				$isBoxCollapsable: this.designedItem.$item.$isBoxCollapsable,
				$rowAlign: (this.awLayout ? this.awLayout.$layout.$rowAlign : "top")
			});
			if (this.designedItem.isField) {
				this.fieldAddinsTool.onShow();
			}
			this.selectedPanel.setState({
				$isHidden: false
			});
			this.localizationTool.setTitleItem(this.designedItem);
			this.labelTool.setLabelItem(this.designedItem);
			var sections = this.selectedPanel.layoutContent.items;
			var layout = this.awLayout || this.designedItem.layoutContent;
			this.selectedPanel.colCount = layout ? layout.getColumnsCount() : 1;
			this.addExcludeMeLink(panelId);
			for (var ii = 0, jj = sections.length; ii < jj; ii++) {
				var section = sections[ii];
				var isHidden = this.awLayout == null ? false : true;
				if (section.$item.$isSectionModels) {
					this.templatesTool.addPageModelLinks(section, this.designedItem, this.selectedPanel.colCount, this.awLayout);
				}
				if (section.$item.$isTitleSection) {
					var titleLocalization = section.layoutContent.items[2];
					var titleLocalizationChoice = section.layoutContent.items[1].builder.choicesItems[0];
					document.site.toggleClass(titleLocalization.domItem, "s-aw-title-localization", true);
					titleLocalizationChoice.appendChild(titleLocalization.domItem);
				}
				if (section.$item.$isLabelSection) {
					if (this.designedItem.unknowMode) {
						isHidden = true;
					}
					this.applyChange({
						$properties: {
							$labelAlignment: {
								$isHidden: this.designedItem.$field.$type == "application/x-boolean"
							}
						}
					});

				}
				if (section.$item.$isFieldAddinSection) {
					isHidden = true;
					if (this.designedItem.$authoringType) {
						var fieldSections = section.layoutContent.items;
						for (var ii = 0, jj = fieldSections.length; ii < jj; ii++) {
							var fieldSection = fieldSections[ii],
								isSectionHidden = true;
							if (fieldSection.$item.$authoringType == this.designedItem.$authoringType) {
								if (fieldSection.$item.$authoringEditMode !== undefined) {
									isHidden = isSectionHidden = !(fieldSection.$item.$authoringEditMode == this.designedItem.$isEditMode);
								} else {
									isHidden = isSectionHidden = false;
								}
							}
							fieldSection.setState({
								$isHidden: isSectionHidden
							});
						}
					}
				}
				if (section.$item.$isRowSection) {
					if (!(isHidden = this.awLayout == null ? true : false)) {
						designProperties.fillRowSection(this.localize, section);
					}
				} else {
					if (section.$item.$isStructure && this.designedItem.$designLevel == "field") {
						if (this.designedItem.layoutParent && this.designedItem.layoutParent.isRow) {
							isHidden = true;
						}
					}
				}
				if (section.showItem) {
					section.showItem(!(section.$isHidden = isHidden));
				}
				if (section.$item.$isTabChoice) {
					this.templatesTool.fillTabChoice(section, this.designedItem);
				}
			}
			this.endChange();
		}
	},
	resizeSideBars: function() {

		if (this.propertiesBodySlot) {
			var page = this.designedArticle.page;
			if (page.isVignettePage) {
				page = page.getMasterPage().landingPageMaster;
			}
			if (page.scrollview && this.treesBar) {
				this.treesBar.resizeBar(page.scrollview);
			}
		}
	},
	onMenuClick: function(menuItem) {
		if (this.pageStorage) {
			return this.pageStorage.onMenuClick(menuItem);
		}
		return true;
	},
	dispose: function() {
		if (this.pageStorage) {
			this.pageStorage.dispose();
		}
		if (this.itemTool) {
			this.itemTool.dispose();
		}
		delete this.designedArticle.isDesignFreeze;
		document.site.removeDomChild(this.layoutSlot);
		this.appendSideBars(false);
		document.site.removeDomChild(this.propertiesBodySlot);

		document.site.registerScreenDesigner(false, this);
		if (this.viewsTool) {
			this.viewsTool.ensureLayoutView();
		}
		this.uiSwitchTool.toggleUIDesign(this.designedArticle, false, true);
		var ids = ["viewsTool", "uiSwitchTool", "localizationTool", "labelTool", "fieldAddinsTool"];
		for (var ii = 0, jj = ids.length; ii < jj; ii++) {
			if (this[ids[ii]]) {
				this[ids[ii]].dispose();
			}
			this[ids[ii]] = null;
		}
		if (this.trees) {
			this.trees.dispose();
		}
		if (this.treesBar) {
			this.treesBar.dispose();
		}
		if (this.selectedPanel) {
			this.selectedPanel.fieldAddinSection = null;
		}
		this.itemTool = this.pageStorage = this.treebarSlot = this.propertiesSlot = this.propertiesBodySlot = this.historySlot = this.viewsSlot = null;
		this.leftTop = this.treesBar = this.panels = this.trees = this.selectedPanel = this.transactionLabel = null;
		Designer.prototype.dispose.call(this);
	}
});