"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;
var designerViewChoice = require('syracuse-ui/lib/page/utility/designerViewChoice');
var BarSplitter = require("syracuse-ui/lib/page/bar/barSplitter").BarSplitter;
var _trees = require("syracuse-ui/lib/authoring/page/tree/trees");

var _uiSwitchTool = require("syracuse-ui/lib/authoring/tools/uiSwitchTool");
var _localizationTool = require("syracuse-ui/lib/authoring/tools/localizationTool");

var PageStorage = require("syracuse-ui/lib/authoring/storage/pageStorage").PageStorage;
var ItemTool = require("syracuse-ui/lib/authoring/tools/itemTool").ItemTool;

var settingPanel = require("syracuse-ui/lib/authoring/tools/settingPanel");

var _fieldAddinTypes = [require("syracuse-ui/lib/authoring/fieldAddins/choiceFieldAddin"), require("syracuse-ui/lib/authoring/fieldAddins/documentFieldAddin")];

function _onDesignerApplyChangeToLabel(designedItem, newData) {
	if (newData.$isHidden !== undefined) {
		newData.$properties.$isTitleHidden = {
			$isDisabled: newData.$isHidden
		};
		newData.$properties.$fieldsIsTitleHidden = {
			$isDisabled: newData.$isHidden
		};
		newData.$properties.$labelAlignment = {
			$isDisabled: newData.$isHidden
		};
	}
	if (newData.$fieldsIsTitleHidden !== undefined) {
		(newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$fieldsIsTitleHidden;
	}
	if (newData.$isTitleHidden !== undefined) {
		newData.$properties.$title = newData.$properties.$title || {};
		newData.$properties.$title.$isDisabled = newData.$isTitleHidden;
		if (designedItem.$designLevel == "field") {
			(newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$isTitleHidden;
		} else {
			newData.$properties.$title = newData.$properties.$isBoxCollapsable = newData.$properties.$isMaximizable = {
				$isDisabled: newData.$isTitleHidden
			};
		}
	}
}

function _onNotifyDataChangeToLabel(item, metaData, field, value) {
	switch (field.$item.$bind) {
		case "$fieldsIsTitleHidden":
			item.applyDesignMetaData({
				$fieldsIsTitleHidden: value
			}, true);
			break;
		case "$labelAlignment":
			metaData.$isTopLabelAlignment = (value == "t");
			if (metaData.$isTopLabelAlignment == false) {
				metaData.$isRightTextLabelAlignment = (value == "lr");
			}
			if (item.isField) {
				item.applyDesignMetaData(metaData, true);
			} else {
				item.applyDesignMetaData({
					$fieldsIsTopLabelAlignment: metaData.$isTopLabelAlignment,
					$fieldsIsRightTextLabelAlignment: metaData.$isRightTextLabelAlignment
				}, true);
			}
			break;
		default:
			return false;
	}
	return true;
}

function _addLabelFields(designer, $stepSkin) {
	designer.$prototype.$properties.$labelAlignment = {
		$type: "application/x-choice",
		$title: syra_local.aw_labelPosition,
		$value: {
			$type: "application/x-string",
			$enum: [{
				$value: "t",
				$title: syra_local.aw_labelPositionTop
			}, {
				$value: "ll",
				$title: syra_local.aw_labelPositionLeftLeft
			}, {
				$value: "lr",
				$title: syra_local.aw_labelPositionLeftRight
			}]
		}
	};
	designer.$prototype.$properties.$isTitleHidden = {
		$type: "application/x-boolean",
		$title: syra_local.aw_isTitleHidden
	};
	designer.$prototype.$properties.$fieldsIsTitleHidden = {
		$type: "application/x-boolean",
		$title: syra_local.aw_isLabelHidden
	};
}

function _addViewBtns(designer, slot) {
	var types = ["viewTypePreview", "viewTypeLayout", "viewTypeStructure"];
	syra_site.mobileGateway && types.push("viewTypeJSON");
	for (var ii = 0, jj = types.length; ii < jj; ii++) {
		var type = types[ii];
		var btn = syra_menus.addTextButton(syra_local["aw_" + type], "s-aw-viewType-link", "onViewClick");
		btn.syraViewType = type;
		btn.syraItem = designer.id;
		slot.appendChild(designer[type + "_btn"] = btn);
	}
	syra_site.dom.toggleClass(designer[designer.$viewType = "viewTypeLayout_btn"], "s-selected", true);

	designer.onViewClick = function(event, btn) {
		if (this.$viewType) {
			syra_site.dom.toggleClass(this[this.$viewType + "_btn"], "s-selected", false);
		}
		this.$viewType = btn.syraViewType;
		if (this.isJsonMode && this.$viewType != "viewTypeJSON") {
			this.isJsonMode = false;
			syra_site.mobileGateway.toggleJsonEditor(false);
		}
		this.ensureDesigneBar();
		if (this.$viewType == "viewTypeJSON") {
			this.isJsonMode = true;
			syra_site.mobileGateway.toggleJsonEditor(true);
		}
		syra_site.dom.toggleClass(btn, "s-selected", true);
		this.toggleUIDesign(this.designedArticle, true);
		this.designedArticle.page.ensurePageVisibility();
	};
};

function PageDesigner() {}

exports.PageDesigner = helpers.defineClass(PageDesigner, Designer, {
	loadBox: function() {
		this.$prototype = {
			$properties: {
				$isMaximizable: {
					$type: "application/x-boolean",
					$title: syra_local.aw_isMaximizable
				},
				$isBoxCollapsable: {
					$type: "application/x-boolean",
					$title: syra_local.aw_isBoxCollapsable
				},
				$isAdvanced: {
					$type: "application/x-boolean",
					$title: syra_local.aw_isAdvanced
				},

				$rowAlign: {
					$type: "application/x-choice",
					$title: syra_local.aw_rowAlign,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "top",
							$title: syra_local.aw_rowAlignTop
						}, {
							$value: "bottom",
							$title: syra_local.aw_rowAlignBottom
						}]
					}
				}
			}
		};
		this.panels = {};
		Designer.prototype.loadBox.call(this);
	},
	appendSideBars: function(append) {
		this.asideParent = this.designedArticle.page;
		if (this.asideParent.isVignettePage) {
			this.asideParent = page.getMasterPage();
			syra_site.landingPageMaster.bar.toggleBar(!append);
		}
		if (append) {
			this.asideParent.domItem.appendChild(this.propertiesSlot);
			this.asideParent.domItem.appendChild(this.treebarSlot);
		} else {
			syra_site.dom.removeChild(this.treebarSlot);
			syra_site.dom.removeChild(this.propertiesSlot);
		}
	},
	drawBox: function() {
		syra_site.registerScreenDesigner(true, this);
		(this.itemTool = new ItemTool()).load(this);

		this.domItem = this.layoutSlot = document.createElement("aside");
		this.layoutSlot.className = "s-aw-page";
		syra_site.header.parentNode.insertBefore(this.layoutSlot, syra_site.header.nextSibling);
		this.layoutSlot.style.display = "";

		//left part
		this.leftTop = document.createElement("div");
		this.leftTop.className = "s-aw-page-left";
		this.layoutSlot.appendChild(this.leftTop);

		//middle part
		var viewsSlot = this.layoutSlot.appendChild(document.createElement("div"));
		viewsSlot.className = "s-aw-page-views";

		//right part
		this.propertiesSlot = document.createElement("div");
		this.propertiesSlot.className = "s-aw-properties-slot";
		this.propertiesSlot.style.width = "200px";
		this.setArticleId(this.propertiesSlot);

		this.treebarSlot = document.createElement("div");
		this.treebarSlot.className = "s-aw-treebar-slot";
		this.setArticleId(this.treebarSlot);
		this.appendSideBars(true);

		_uiSwitchTool.load(this);
		if (this.designedArticle == this.designedArticle.page) {
			_addViewBtns(this, viewsSlot);
		}
		this.leftTop.appendChild(syra_menus.addIconButton(syra_local.aw_help, "s-design-history-btn-icon", "onDesignerHelpClick", null, "help"));

		this.loadHistoryTool();

		this.loadPageStorage();

		_localizationTool.load(this);
		this.loadTemplateTools();
		_addLabelFields(this);

		for (var ii = 0, jj = _fieldAddinTypes.length; ii < jj; ii++) {
			_fieldAddinTypes[ii].load(this);
		}

		this.treebarBody = document.createElement("div");
		this.treebarBody.className = "s-aw-treebar-body";

		this.treesBar = new BarSplitter();
		this.treesBar.options = {
			resizeDirection: "left",
			$skin: "s-aw-treebar"
		};
		this.treesBar.resizeBar = function() {
			if (BarSplitter.prototype.resizeBar.call(this)) {
				if (this.contentTree) {
					var height = syra_site.dom.getInnerSize(this.barSlot).height;
					var bodyHeight = Math.max(height - this.treebarTabs.getBoundingClientRect().height, 20) + "px";
					this.contentTree.tabItem.body.style.height = bodyHeight;
					this.insertTree.tabItem.body.style.height = bodyHeight;
				}
			}
		};
		this.treesBar.layoutSlot = this.propertiesSlot;
		this.treesBar.barSlot = this.treebarSlot;
		this.treesBar.barBody = this.treebarBody;
		this.treesBar.load(this.designedArticle.page);

		_trees.load(this);
		this.propertiesSlot.style.display = "";
		this.treebarSlot.style.display = "";

		this.toggleUIDesign(this.designedArticle, true);

		if (this.designedArticle.$item.$transaction && this.leftTop) {
			var $title = "Transaction";
			if (this.designedArticle.$item.$isModel) {
				$title += " Model";
			}
			this.transactionLabel = document.createElement("div");
			this.transactionLabel.style.display = "";
			this.transactionLabel.textContent = $title;
			this.transactionLabel.id = "s-aw-transaction";
			this.transactionLabel.style.display = "none";
			this.leftTop.appendChild(this.transactionLabel);
		}
		this.ensureDesigneBar();
		this.selectItem(this.designedArticle, true);
	},
	addFieldAddinToSection: function(section) {
		for (var ii = 0, jj = _fieldAddinTypes.length; ii < jj; ii++) {
			_fieldAddinTypes[ii].addToSection(this, section);
		}
	},
	onShowFieldAddins: function() {
		for (var ii = 0, jj = _fieldAddinTypes.length; ii < jj; ii++) {
			_fieldAddinTypes[ii].onShow(this);
		}
	},
	displayViewTitle: function($view) {
		if ($view) {
			this.viewTitleSlot.textContent = $view.$isFactory ? syra_local.aw_pg_choice_factory : $view.$title;
			this.viewTitleSlot.style.display = "";
		} else {
			this.viewTitleSlot.style.display = "none";
		}
	},
	onDesignerHelpClick: function() {

	},
	ensureDesigneBar: function(isDesigning) {
		isDesigning = isDesigning !== false;
		if (isDesigning) {
			this.isDesignBarVisible = !(this.$viewType == "viewTypePreview");
			this.propertiesSlot.style.display = this.isDesignBarVisible ? "" : "none";
			this.treesBar.toggleBar(this.isDesignBarVisible);
		} else {
			this.isDesignBarVisible = false;
		}
		this.asideParent.domItem.style.paddingLeft = this.isDesignBarVisible ? (this.treebarSlot.clientWidth + "px") : "";
		this.asideParent.domItem.style.paddingRight = this.isDesignBarVisible ? (this.propertiesSlot.clientWidth + "px") : "";

		this.togglePageBar(this.designedArticle.menuBar, !this.isDesignBarVisible, isDesigning);
		this.togglePageBar(this.designedArticle.fusionBar, !this.isDesignBarVisible, isDesigning);
	},
	togglePageBar: function(bar, isVisible, isDesigning) {
		if (bar) {
			if (isDesigning) {
				bar.barSlot.syraAllClickDisabled = true;
			} else {
				delete bar.barSlot.syraAllClickDisabled;
			}
			bar.barSlot.style.display = (isVisible && !bar.isHidden && bar.isSlotVisible) ? "" : "none";
			bar.resizeSplitter();
		}
	},
	onEndHistoryChangeStep: function(itemToSelect) {
		this.fillTree && this.fillTree();
		this.toggleUIDesign(this.designedArticle, true);
		this.selectItem(itemToSelect, true);
	},
	endArticleUpdate: function(selectedItem, isStructureUpdated) {
		this.designedArticle.page.ensurePageVisibility();
		isStructureUpdated && this.fillTree && this.fillTree();
		selectedItem = selectedItem || this.designedItem;
		this.selectItem(selectedItem, true);
		this.toggleUIDesign(this.designedArticle, true);
		this.history.updateSteps();
		this.saveDesign();
	},
	saveDesign: function() {
		if (this.pageStorage) {
			this.pageStorage.saveDesign();
		}
	},
	onBeforeMainPageChange: function(continueChanging) {
		if (this.pageStorage && this.pageStorage.onBeforeMainPageChange(continueChanging) == false) {
			return false;
		}
		this.closeDesigner();
		return true;
	},
	openDesigner: function(designedArticle) {
		Designer.prototype.openDesigner.call(this, designedArticle);
		designerViewChoice.disableOpener(this.designedArticle, true);
	},
	closeDesigner: function() {
		designerViewChoice.disableOpener(this.designedArticle, false);
		this.designedArticle.designArticle(false);
	},
	onTopScreenDesigner: function(isTop) {
		this.propertiesSlot.style.display = this.layoutSlot.style.display = this.treebarSlot.style.display = isTop ? "" : "none";
	},
	loadPageStorage: function() {
		var id;
		if (this.pageStorage) {
			id = this.pageStorage.id;
			this.pageStorage.dispose();

		}
		this.pageStorage = new PageStorage();
		this.pageStorage.id = id;
		this.pageStorage.load(this);
	},
	onAddRowClick: function(event, btn) {
		var layout = this.awLayout ? this.awLayout : (this.designedItem.layoutContent || this.designedItem.layoutParent);
		var $curRow = {
			$layoutType: layout.$layout.$layoutType,
			$widths: layout.$layout.$widths,
			$autoSize: layout.$layout.$autoSize
		};
		if (!layout.layoutParent) {
			layout = syra_site.layoutUpdater.ensureHasParent(layout);
		}
		var index = layout.layoutParent.items.indexOf(layout);
		var newRow = layout.layoutParent.loadChildItem(null, {
			$layoutType: $curRow.$layoutType,
			$widths: $curRow.$widths,
			$autoSize: $curRow.$autoSize,
		}, (btn.syraAdd == "addRowAfter") ? ++index : index);
		this.endArticleUpdate(newRow, true);
	},
	onExcludeItemClick: function(event) {
		var layoutParent = this.designedItem.layoutParent;
		var excludedFields;
		if (this.designedItem.$designLevel == "field") {
			excludedFields = [this.designedItem];
		} else {
			excludedFields = this.designedItem.layoutContent.getFields();
		}
		//check manadatory
		if (excludedFields) {
			for (var ii = 0, jj = excludedFields.length; ii < jj; ii++) {
				var field = excludedFields[ii];
				if (field.$item.$bind) {
					this.designedArticle.garbage.onExcludeField(field.$item.$bind, true);
					this.designedArticle.unbind(field);
				}
			}
		}
		var index = layoutParent.items.indexOf(this.designedItem);
		layoutParent.removeItem(this.designedItem, true);
		var newItem = layoutParent.items[index] || layoutParent.items[index - 1];
		if (newItem && newItem.isSpaceBox) {
			newItem = null;
		}
		newItem = newItem || layoutParent.boxParent;
		switch (layoutParent.$layout.$layoutType) {
			case "row":
				layoutParent.addSpaceBox(index);
				break;
			case "tabs":
				if (layoutParent.items.length == 0) {
					syra_site.layoutUpdater.convertToNewLayout(layoutParent, {
						$layoutType: "stack",
						$width: "100"
					});
				}
				break;
		}
		this.endArticleUpdate(newItem, true);
	},
	selectItem: function(item, select) {
		if (this.awLayout && this.awLayout.disposed) {
			this.awLayout = null;
		}
		if (this.designedItem && this.designedItem.disposed) {
			this.designedItem = null;
		}
		if (item && item.disposed) {
			item = this.designedItem;
		}
		if (select) {
			item = item || this.designedArticle.page;
			this.selectItem(null, false);
			if (item.isLayout) {
				this.designedItem = item.boxParent;
				this.awLayout = item;
			} else {
				this.designedItem = item;
				this.awLayout = null;
			}

			syra_page.scrollToItem(this.designedArticle.page, this.awLayout || this.designedItem);
			settingPanel.show(this);
			if (this.awLayout) {
				_uiSwitchTool.toggleItemCss(this.awLayout, "s-aw-designed", true);
			}
			_uiSwitchTool.toggleItemCss(item, "s-aw-designed", true);
		} else {
			item = item || this.designedItem;
			if (item) {
				_uiSwitchTool.toggleItemCss(item, "s-aw-designed", false);
			}
			if (this.awLayout) {
				_uiSwitchTool.toggleItemCss(this.awLayout, "s-aw-designed", false);
			}
		}
		if (this.contentTree) {
			this.contentTree.selectNode(item, select);
			this.insertTree.selectNode(item, select);
		}
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$isHidden !== undefined) {
				newData.$properties.$isMaximizable = {
					$isDisabled: newData.$isHidden
				};
				newData.$properties.$isBoxCollapsable = {
					$isDisabled: newData.$isHidden
				};
			}
			_onDesignerApplyChangeToLabel(this.designedItem, newData);
			for (var ii = 0, jj = _fieldAddinTypes.length; ii < jj; ii++) {
				_fieldAddinTypes[ii].onDesignerApplyChange(this, newData);
			}
			if (newData.$title !== undefined) {
				this._ensureSelectedItemTitle();
			}
		}
		Designer.prototype.applyChange.call(this, newData);
	},
	notifyDataChange: function(field, value) {
		this.saveDesign();
		switch (field.$item.$bind) {
			case "$rowAlign":
				if (this.awLayout) {
					this.awLayout.$layout.$rowAlign = value;
					for (var ii = 0, jj = this.awLayout.items.length; ii < jj; ii++) {
						this.awLayout.items[ii].layoutSlot.style.verticalAlign = value;
					}
					this.endArticleUpdate(this.awLayout, true);
				}
				break;
			default:
				var metaData = {};
				if (!_localizationTool.onNotifyDataChange(this, metaData, field, value) && !_onNotifyDataChangeToLabel(this.designedItem, metaData, field, value)) {
					metaData[field.$item.$bind] = value;
				}
				this.designedItem.applyDesignMetaData(metaData, true);
				if (this.designedItem.$designLevel == "field") {
					for (var ii = 0, jj = _fieldAddinTypes.length; ii < jj; ii++) {
						_fieldAddinTypes[ii].notifyDataChange(this, metaData);
					}
				}
				this.history.updateSteps();
				this.applyChange(metaData);
				break;
		}
	},
	_ensureSelectedItemTitle: function() {
		this.selectedItemTitle = this.designedItem.getTitle(false);
		if (this.selectedItemTitle == "" && this.designedItem.$designLevel == "field") {
			this.selectedItemTitle = this.getBindTitle(this.designedItem.$item.$bind, this.designedItem.$field);
		}
		this.selectedPanel.itemTitle.textContent = this.selectedItemTitle && this.selectedItemTitle != "-" ? this.selectedItemTitle : "";
		this.fillTree && this.fillTree();
	},
	findItem: function(domItem, findLayout, event) {
		if (domItem.syraAwTreeNodeId) {
			var target = event.target;
			while (target != null && !target.syraAwTree) {
				target = target.parentNode;
			}
			var tree = target.syraAwTree ? this[target.syraAwTree] : null;
			var node = tree ? tree.findNode(event) : null;
			return node && node.item;
		}
		return Designer.prototype.findItem.call(this, domItem, findLayout, event);
	},
	resizeArticle: function(resize) {
		if (this.propertiesSlot) {
			var page = this.designedArticle.page;
			if (page.isVignettePage) {
				page = syra_site.landingPageMaster;
			}
			if (this.isDesignBarVisible) {
				if (page.scrollview && this.treesBar && this.treebarSlot.parentNode) {
					this.treesBar.resizeBar();
					this.asideParent.domItem.style.paddingLeft = this.treebarSlot.clientWidth + "px";
				}
				if (this.propertiesSlot.parentNode) {
					this.propertiesSlot.style.height = page.barHeight + "px";
					this.asideParent.domItem.style.paddingRight = this.propertiesSlot.clientWidth + "px";
				}
			} else {
				this.asideParent.domItem.style.paddingRight = "";
				this.asideParent.domItem.style.paddingLeft = "";
				this.designedArticle.menuBar && this.designedArticle.menuBar.resizeSplitter();
				this.designedArticle.fusionBar && this.designedArticle.fusionBar.resizeSplitter();
			}
		}
		Designer.prototype.resizeArticle.call(this, resize);
	},
	onMenuClick: function(menuItem) {
		if (this.pageStorage) {
			return this.pageStorage.onMenuClick(menuItem);
		}
		return true;
	},
	dispose: function() {
		this.ensureDesigneBar(false);
		this.contentTree && this.contentTree.dispose();
		this.insertTree && this.insertTree.dispose();
		this.pageStorage && this.pageStorage.dispose();
		this.itemTool && this.itemTool.dispose();

		syra_site.dom.removeChild(this.layoutSlot);
		this.appendSideBars(false);
		syra_site.registerScreenDesigner(false, this);
		this.toggleUIDesign(this.designedArticle, false, true);
		if (this.selectedPanel) {
			this.selectedPanel.fieldAddinSection = null;
		}
		syra_site.layoutRect = null; //important for dialog resize
		Designer.prototype.dispose.call(this);
	}
});