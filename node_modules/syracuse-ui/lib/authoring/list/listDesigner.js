"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;
var CardDesigner = require("syracuse-ui/lib/authoring/list/cardDesigner").CardDesigner;
var GraphAddin = require("syracuse-ui/lib/authoring/list/graphAddin").GraphAddin;

function ListDesigner() {}

exports.ListDesigner = helpers.defineClass(ListDesigner, Designer, {
	designCardItem: function(cardItem) {
		document.site.designItem(open, cardItem.articleParent, CardDesigner);
	},
	endTargetPageUpdate: function() {
		this.historyTool.notifyUpdate();
		if (this.designerWorkingCopy) {
			this.designerWorkingCopy.temporalySave();
		}
	},
	loadBox: function(designedPage) {
		this.$prototype = {
			$properties: {
				$cardPosition: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "inline",
							$title: this.localize.lw_cardPositionInline
						}, {
							$value: "top",
							$title: this.localize.lw_cardPositionTop
						}, {
							$value: "left",
							$title: this.localize.lw_cardPositionLeft
						}, {
							$value: "right",
							$title: this.localize.lw_cardPositionRight
						}, {
							$value: "bottom",
							$title: this.localize.lw_cardPositionBottom
						}]
					}
				},
				$graphPosition: {
					$type: "application/x-choice",
					$isHidden: this.awArticle.$prototype.$cube ? false : true,
					$title: this.localize.lw_graphPosition,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "top",
							$title: this.localize.lw_graphPositionTop
						}, {
							$value: "left",
							$title: this.localize.lw_graphPositionLeft
						}, {
							$value: "right",
							$title: this.localize.lw_graphPositionRight
						}, {
							$value: "bottom",
							$title: this.localize.lw_graphPositionBottom
						}, {
							$value: "front",
							$title: this.localize.lw_graphPositionFront
						}, {
							$value: "behind",
							$title: this.localize.lw_graphPositionBehind
						}]
					}
				}
			}
		};
		this.$item = {
			$layout: {
				$items: []
			}
		};
		Designer.prototype.loadBox.call(this);
		this.applyListDesignMetaData();
	},
	applyListDesignMetaData: function() {
		var delta = {
			$format: this.awArticle.$item.$format || "grid",
			$graphPosition: this.awArticle.$item.$graphPosition || "bottom"
		};
		if (this.awArticle.$item.$cards) {
			delta.$cardPosition = this.awArticle.$item.$cards.$position || "bottom";
		} else {
			delta.$cardPosition = this.awArticle.builder.$inlineCard ? "inline" : "no";
		}
		this.applyChange(delta);
	},
	onClickPicker: function(picker) {
		if (picker.syraPickerType) {
			switch (picker.syraPickerType) {
				case "designMode":
					var metaData = {
						$format: picker.syraMode == "cards" ? "cards" : "grid"
					};
					if (picker.syraMode == "detailgrid") {
						metaData.$cardPosition = this.dataset.$cardPosition || "no";
						if (metaData.$cardPosition == "no") {
							metaData.$cardPosition = "bottom";
						}
					}
					this.awArticle.applyDesignMetaData(metaData, true);
					this.historyTool.notifyUpdate();
					this.applyChange(metaData);
					return false;
				case "designCard":
					this.designCardItem(this.getDesignedCardItem());
					return false;
				case "designGridCard":
					this.designCardItem(this.getDesignedCardItem());
					return false;
				case "$colcount":
					this.awArticle.applyDesignMetaData({
						$cardsByRowCount: picker.$syraColCount
					}, true);
					this.templatesTool.selectColChoice(this.sectionCards, this.awArticle, picker.$syraColCount);
					this.historyTool.notifyUpdate();
					return false;


			}
			return Designer.prototype.onClickPicker.call(this, picker);
		}
		return true;
	},
	ensureHistoryVisibility: function() {
		this.navSlot.style.display = this.awArticle.page.designer ? "none" : "";
	},
	drawBox: function() {
		this.layoutSlot = document.createElement("aside");
		this.layoutSlot.className = "s-aw-list";
		this.awArticle._core.parentNode.insertBefore(this.layoutSlot, this.awArticle._core);
		this.layoutSlot.style.display = "";
		this.$$item = this.$$body = $(this.layoutSlot);
		this.navSlot = document.createElement("div");
		this.navSlot.className = "s-aw-list-nav";
		this.ensureHistoryVisibility();
		this.layoutSlot.appendChild(this.navSlot);
		this.settingsSlot = document.createElement("div");
		this.settingsSlot.className = "s-aw-list-body";
		this.layoutSlot.appendChild(this.settingsSlot);

		this.awItem = this.awArticle;

		this.loadDefaultTools("s-aw-list");
		this.loadTemplateTools();

		this.appendGroupModes();
		this.loadNewItem(this.modes.detailgrid.body, {
			$bind: "$cardPosition",
			$choiceLayout: "row",
			$isTopLabelAlignment: false,
			$format: "$button",
			$icon: {
				$path: "authoring/s-aw-grid-card-"
			},
			$isEditMode: true,
			$skin: "s-aw-field"
		});
		this.sectionGridCard = {
			body: this.modes.detailgrid.body.appendChild(document.createElement("div"))
		};
		this.templatesTool.addListModelLinks(this.sectionGridCard, this.awItem);
		this.sectionCards = {
			body: this.modes.cards.body
		};

		this.designCardLink = document.createElement("a");
		this.designGridCardLink = document.createElement("a");
		this.designCardLink.setAttribute("data-s-picker", this.designCardLink.syraPickerType = "designCard");
		this.designGridCardLink.setAttribute("data-s-picker", this.designGridCardLink.syraPickerType = "designGridCard");

		this.designCardLink.title = this.designCardLink.textContent = this.designGridCardLink.title = this.designGridCardLink.textContent = "design card";
		this.designCardLink.className = this.designGridCardLink.className = "s-aw-list-design-card";
		this.templatesTool.addColsCountLinks(this.sectionCards, this.awItem, this.awArticle.builder.$cardsByRowCount || 1, 6);
		this.templatesTool.addListModelLinks(this.sectionCards, this.awItem);

		this.sectionGridCard.body.appendChild(this.designGridCardLink);
		this.sectionCards.body.appendChild(this.designCardLink);


		this.navSlot.appendChild(this.historySlot);
		//	this.navSlot.appendChild(this.workinCopySlot);

		if (this.awArticle.chart && this.awArticle.chart.designGraphType == "cube$highCharts") {
			(this.graphAddin = new GraphAddin()).load(this);
		}
		this.awArticle.pagging.designItem(true);
		document.site.resize();
	},

	getDesignedCardItem: function() {
		var cardItem, record = this.awArticle.records[0];
		if (this.awArticle.$item.$format == "grid") {
			cardItem = record.inlineCardItem;
			if (!cardItem) {
				for (var ii = 0, jj = this.awArticle.records.length; ii < jj; ii++) {
					if (this.awArticle.records[ii].outCardItem) {
						record = this.awArticle.records[ii];
						cardItem = record.outCardItem;
						break;
					}
				}
			}
		} else {
			cardItem = record.cardItem;
		}
		return cardItem;
	},
	onTemplateChoiceClick: function(picker, awItem, awLayout) {
		if (this.awArticle.records && this.awArticle.records.length > 0) {
			switch (picker.syraPickerType) {
				case "$model_smart":
					this.templatesTool._applySectionSmartModel(this.getDesignedCardItem());
					return awItem;
				case "$model_3cols":
					this.templatesTool.splitInColumns(this.getDesignedCardItem(), null, 3);
					return awItem;
				case "$model_4cols":
					this.templatesTool.splitInColumns(this.getDesignedCardItem(), null, 4);
					return awItem;
				case "$model_mixt":
					this.templatesTool.build_mixt(this.getDesignedCardItem());
					return awItem;
				default:
					if (picker.syraPickerType.indexOf("$model_") == 0) {
						this.templatesTool._applySectionModel(this.getDesignedCardItem(), picker.syraPickerType);
						return awItem;
					}
					break;
			}
		}
	},
	appendGroupTitle: function($title) {
		var title = document.createElement("div");
		title.className = "s-aw-list-group-title";
		title.textContent = $title;
		return title;
	},
	appendModeLink: function(modeType, titleRow, links) {
		var mode = {
			title: this.appendGroupTitle(this.localize["lw_mode_" + modeType + "_title"]),
			modeType: modeType,
			link: document.createElement("a"),
			body: document.createElement("div")
		};
		mode.link.title = this.localize["lw_mode_" + modeType];
		mode.link.className = "s-aw-list-mode-" + modeType;
		mode.link.setAttribute("data-s-picker", mode.link.syraPickerType = "designMode");
		mode.link.syraMode = modeType;
		mode.body.className = "s-aw-list-group-cell";
		this.modeLinks.appendChild(mode.link);
		return (this.modes[modeType] = mode);
	},
	_appendGroup: function(groups) {
		var header = document.createElement("div");
		header.className = "s-aw-list-group-row";
		var body = document.createElement("div");
		body.className = "s-aw-list-group-row";
		for (var ii = 0, jj = groups.length; ii < jj; ii++) {
			header.appendChild(groups[ii].title);
			body.appendChild(groups[ii].body);
		}
		var table = document.createElement("div");
		table.className = "s-aw-list-group";
		table.appendChild(header);
		table.appendChild(body);
		this.settingsSlot.appendChild(table);
		return table;
	},
	addGroupSeparator: function() {
		var body = document.createElement("div");
		body.className = "s-aw-list-group-sep";
		return {
			title: this.appendGroupTitle(""),
			body: body
		};
	},
	appendGroupModes: function() {
		this.modes = {};
		var linksSlot = document.createElement("div");
		linksSlot.className = "s-aw-list-group-cell";
		this.modeLinks = linksSlot.appendChild(document.createElement("div"));
		this.modeLinks.className = "s-aw-list-modes";
		this._appendGroup([{
				title: this.appendGroupTitle("Presentation"),
				body: linksSlot
			},
			this.addGroupSeparator(), this.appendModeLink("cards"), this.appendModeLink("grid"), this.appendModeLink("detailgrid")
		]);
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$format) {
				var delta = newData.$properties = newData.$properties || {};
				var selectedMode = newData.$format;
				if (newData.$format == "grid" && newData.$cardPosition != "no") {
					selectedMode = "detailgrid";
				}
				var types = Object.keys(this.modes);
				for (var ii = 0, jj = types.length; ii < jj; ii++) {
					var mode = this.modes[types[ii]];
					var isSelected = types[ii] == selectedMode;
					document.site.toggleClass(mode.link, "s-selected", isSelected);
					mode.title.style.display = mode.body.style.display = isSelected ? "" : "none";
				}
			}
		}
		Designer.prototype.applyChange.call(this, newData);
	},
	onNotifyDataChange: function(field, value) {
		var metaData = {};
		var $bind = field.$item.$bind;
		metaData[$bind] = value;
		if (field.$item.$measure) {
			this.graphAddin.onNotifyDataChange(metaData, field, value);
		} else {
			if (metaData.$cardPosition !== undefined) {
				if (!(metaData.$cardPosition == "no" || metaData.$cardPosition == "inline")) {
					if (this.awArticle.$item.$graphPosition == "front" || this.awArticle.$item.$graphPosition == "behind") {
						metaData.$graphPosition = "bottom";
					}
				}
				//metaData.$isCardPosition = metaData.$cardPosition != "no";
			}
			this.awArticle.applyDesignMetaData(metaData, true);
		}
		this.applyChange(metaData);
		this.historyTool.notifyUpdate();
		return false;
	},
	onEndHistoryChangeStep: function() {
		this.applyListDesignMetaData();
	},
	onWindowResize: function() {},
	dispose: function() {
		if (this.awArticle && this.awArticle.pagging) {
			this.awArticle.pagging.designItem(false);
		}
		if (this.graphAddin) {
			this.graphAddin.dispose();
		}
		this.graphAddin = this.modes = null;
		document.site.removeDomChild(this.layoutSlot);
		Designer.prototype.dispose.call(this);
	}
});