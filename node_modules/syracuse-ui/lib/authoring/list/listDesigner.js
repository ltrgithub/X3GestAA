"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;
var CardDesigner = require("syracuse-ui/lib/authoring/list/cardDesigner").CardDesigner;
var GraphAddin = require("syracuse-ui/lib/authoring/list/graphAddin").GraphAddin;

function ListDesigner() {}

exports.ListDesigner = helpers.defineClass(ListDesigner, Designer, {
	designCardItem: function(cardItem) {
		document.site.designItem(open, cardItem, CardDesigner);
		this.cardDesiggner = cardItem.designer;
	},
	endTargetPageUpdate: function() {
		var record = this.getDesignedCardItem();
		if (record && record.layoutContent) {
			this.awArticle.page.layoutValidator.validate(record.layoutContent, true);
		}
		this.awArticle.onWindowResize();
		this.historyTool.notifyUpdate();
		this.persistence.temporalySave();
	},
	loadBox: function(designedPage) {
		this.$prototype = {
			$properties: {
				$cardPosition: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "row",
							$title: this.localize.lw_cardPositionRow
						}, {
							$value: "top",
							$title: this.localize.lw_cardPositionTop
						}, {
							$value: "left",
							$title: this.localize.lw_cardPositionLeft
						}, {
							$value: "right",
							$title: this.localize.lw_cardPositionRight
						}, {
							$value: "bottom",
							$title: this.localize.lw_cardPositionBottom
						}]
					}
				},
				$graphPosition: {
					$type: "application/x-choice",
					$isHidden: this.awArticle.$prototype.$cube ? false : true,
					$title: this.localize.lw_graphPosition,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "top",
							$title: this.localize.lw_graphPositionTop
						}, {
							$value: "left",
							$title: this.localize.lw_graphPositionLeft
						}, {
							$value: "right",
							$title: this.localize.lw_graphPositionRight
						}, {
							$value: "bottom",
							$title: this.localize.lw_graphPositionBottom
						}, {
							$value: "front",
							$title: this.localize.lw_graphPositionFront
						}, {
							$value: "behind",
							$title: this.localize.lw_graphPositionBehind
						}]
					}
				}
			}
		};
		this.$item = {
			$layout: {
				$items: []
			}
		};
		Designer.prototype.loadBox.call(this);
		this.applyListDesignMetaData();
	},
	applyListDesignMetaData: function() {
		var delta = {
			$format: this.awArticle.$item.$format || "grid",
			$graphPosition: this.awArticle.$item.$graphPosition || "bottom"
		};
		if (this.awArticle.$item.$cardItem) {
			delta.$cardPosition = this.awArticle.$item.$cardItem.$position || "bottom";
		} else {
			delta.$cardPosition = "no";
		}
		this.applyChange(delta);
	},
	onClickPicker: function(picker) {
		if (picker.syraPickerType) {
			switch (picker.syraPickerType) {
				case "list-page":
					this.awArticle.pagging.onPageClick(picker);
					this.setSwitchPagerLinksTitle();
					break;
				case "designMode":
					var metaData = {};
					switch (picker.syraMode) {
						case "cards":
							metaData.$format = "cards";
							break;
						case "grid":
							metaData.$format = "grid";
							metaData.$cardPosition = "no";
							break;
						case "detailgrid":
							metaData.$format = "grid";
							metaData.$cardPosition = this.dataset.$cardPosition || "no";
							if (metaData.$cardPosition == "no") {
								var $designing = this.awArticle.$designing;
								if ($designing && $designing.grid && $designing.grid.$cardItem) {
									metaData.$cardPosition = $designing.grid.$cardItem.$position || "no";
								}
								if (metaData.$cardPosition == "no") {
									metaData.$cardPosition = "bottom";
								}
							}
							break;
					}
					this.awArticle.applyDesignMetaData(metaData, true);
					this.endTargetPageUpdate();
					this.applyChange(metaData);
					return false;
				case "designCard":
					this.designCardItem(this.getDesignedCardItem());
					return false;
				case "designGridCard":
					this.designCardItem(this.getDesignedCardItem());
					return false;
				case "$colcount":
					this.awArticle.applyDesignMetaData({
						$cardsByRowCount: picker.$syraColCount
					}, true);
					this.templatesTool.selectColChoice(this.sectionCards, this.awArticle, picker.$syraColCount);
					this.endTargetPageUpdate();
					return false;


			}
			return Designer.prototype.onClickPicker.call(this, picker);
		}
		return true;
	},
	drawBox: function() {
		this.layoutSlot = document.createElement("aside");
		this.layoutSlot.className = "s-aw-list";
		this.awArticle._core.parentNode.insertBefore(this.layoutSlot, this.awArticle._core);
		this.layoutSlot.style.display = "";
		this.$$item = this.$$body = $(this.layoutSlot);
		this.navSlot = document.createElement("div");
		this.navSlot.className = "s-aw-list-nav";
		if (this.awArticle.articleParent.designer) {
			//this.navSlot.style.display = "none";
			//this.historyToolDesigner = this.awArticle.articleParent.designer;
		}
		this.layoutSlot.appendChild(this.navSlot);
		this.settingsSlot = document.createElement("div");
		this.settingsSlot.className = "s-aw-list-body";
		this.layoutSlot.appendChild(this.settingsSlot);

		this.awItem = this.awArticle;

		this.loadDefaultTools("s-aw-list");
		this.loadTemplateTools();

		this.appendGroupModes();

		this.navSlot.appendChild(this.historySlot);
		this.navSlot.appendChild(this.workinCopySlot);

		if (this.awArticle.chart && this.awArticle.chart.designGraphType == "cube$highCharts") {
			(this.graphAddin = new GraphAddin()).load(this);
		}
		this.getDesignedCardItem(); //ensuser one carditem is opened
		document.site.resize();
	},

	getDesignedCardItem: function() {
		var cardItem, record = this.awArticle.records[0];
		if (this.awArticle.$item.$format == "grid") {
			if (this.awArticle.$item.$cardItem) {
				if (this.awArticle.builder.cardDecorator.isRowCardMode) {
					record.builder.cardDecorator.toggleRowCard(record, true);
					cardItem = record;
				} else {
					for (var ii = 0, jj = this.awArticle.records.length; ii < jj; ii++) {
						record = this.awArticle.records[ii];
						if (record.cardItem) {
							cardItem = record.cardItem;
							break;
						}
					}
				}
			}
		} else {
			cardItem = record.cardItem;
		}
		return cardItem;
	},
	addDesignLink: function(pickerId, $title) {
		var link = document.createElement("a");
		link.setAttribute("data-s-picker", link.syraPickerType = pickerId);
		link.title = link.textContent = $title;
		link.className = "s-aw-list-design-card-picker";
		return link;
	},
	addSwitchPagerLink: function(slot) {
		if (this.awArticle.isClientFetch) {
			var link = document.createElement("a");
			link.setAttribute("data-s-picker", link.syraPickerType = "list-page");
			link.syraIsDesignEnable = link.syraIsDesign = true;
			link.className = "s-aw-list-pager-picker";
			slot.appendChild(link);
			(this.switchPagerLinks = this.switchPagerLinks || []).push(link);
		}
	},
	setSwitchPagerLinksTitle: function() {
		if (this.switchPagerLinks) {
			var title = this.awArticle.$item.$isPagerHidden ? this.localize.lw_showPager : this.localize.lw_hidePager;
			for (var ii = 0, jj = this.switchPagerLinks.length; ii < jj; ii++) {
				this.switchPagerLinks[ii].title = this.switchPagerLinks[ii].textContent = title;
			}
			this.awArticle.pagging.draw(true);
		}
	},
	appendGroupModes: function() {
		this.modes = {};
		var table = document.createElement("div");
		table.className = "s-aw-list-slot";

		var title = document.createElement("div");
		title.className = "s-aw-list-title";
		title.textContent = this.localize.lw_presentation;
		var slot = document.createElement("div");
		slot.className = "s-aw-list-modes";
		var modesBody = document.createElement("div");
		modesBody.className = "s-aw-list-modes-body";
		slot.appendChild(title);
		slot.appendChild(modesBody);
		table.appendChild(slot);

		var modeTypes = ["cards", "grid", "detailgrid"];
		for (var ii = 0, jj = modeTypes.length; ii < jj; ii++) {
			var modeType = modeTypes[ii];
			var mode = {
				modeType: modeType,
				link: document.createElement("a"),
				box: document.createElement("div")
			};
			mode.box.className = "s-aw-list-mode";
			var title = document.createElement("div");
			title.className = "s-aw-list-title";
			title.textContent = this.localize["lw_mode_" + modeType + "_title"];
			mode.box.appendChild(title);
			var body = document.createElement("div");
			body.className = "s-aw-list-mode-body";
			mode.box.appendChild(body);
			mode.link.title = this.localize["lw_mode_" + modeType];
			mode.link.className = "s-aw-list-mode-" + modeType;
			mode.link.setAttribute("data-s-picker", mode.link.syraPickerType = "designMode");
			mode.link.syraMode = modeType;
			modesBody.appendChild(mode.link);
			this.modes[modeType] = mode;
			table.appendChild(mode.box);
			switch (modeType) {
				case "grid":
					this.addSwitchPagerLink(body);
					break;
				case "cards":
					var slot = document.createElement("div");
					slot.className = "s-aw-list-card-position";
					this.sectionCards = {
						body: body.appendChild(slot)
					};
					this.templatesTool.addColsCountLinks(this.sectionCards, this.awItem, this.awArticle.builder.$cardsByRowCount || 1, 6);
					body.appendChild(this.addDesignLink("designCard", this.localize.lw_designCard));
					this.addSwitchPagerLink(body);
					break;
				case "detailgrid":
					var slot = document.createElement("div");
					slot.className = "s-aw-list-card-position";
					this.loadNewItem(body.appendChild(slot), {
						$bind: "$cardPosition",
						$choiceLayout: "row",
						$isTopLabelAlignment: false,
						$format: "$button",
						$icon: {
							$path: "authoring/s-aw-grid-card-"
						},
						$isEditMode: true,
						$css: "s-aw-prop"
					});
					body.appendChild(this.addDesignLink("designGridCard", this.localize.lw_designDetailView));
					this.addSwitchPagerLink(body);
					break;
			}
		}
		this.setSwitchPagerLinksTitle();
		this.settingsSlot.appendChild(table);
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$format) {
				var isSelectedBoxeHidden;
				var delta = newData.$properties = newData.$properties || {};
				var selectedMode = newData.$format;
				if (newData.$format == "grid") {
					if (newData.$cardPosition != "no") {
						selectedMode = "detailgrid";
					} else {
						isSelectedBoxeHidden = !this.switchPagerLinks;
					}
				}
				var types = Object.keys(this.modes);
				for (var ii = 0, jj = types.length; ii < jj; ii++) {
					var mode = this.modes[types[ii]];
					var isSelected = types[ii] == selectedMode;
					document.site.toggleClass(mode.link, "s-selected", isSelected);
					mode.box.style.display = (isSelected && !isSelectedBoxeHidden) ? "" : "none";
				}
			}
			if (this.graphAddin) {
				this.graphAddin.onApplyChange(newData);
			}

		}
		Designer.prototype.applyChange.call(this, newData);
	},
	onNotifyDataChange: function(field, value) {
		var metaData = {};
		var $bind = field.$item.$bind;
		metaData[$bind] = value;
		if (field.$item.$measure) {
			this.graphAddin.onNotifyDataChange(metaData, field, value);
		} else {
			if (metaData.$cardPosition !== undefined) {
				if (!(metaData.$cardPosition == "no" || metaData.$cardPosition == "row")) {
					if (this.awArticle.$item.$graphPosition == "front" || this.awArticle.$item.$graphPosition == "behind") {
						metaData.$graphPosition = "bottom";
					}
				}
			}
			this.awArticle.applyDesignMetaData(metaData, true);
			var record = this.getDesignedCardItem();
			if (record && record.designer) {
				record.designer.toggleUIDesign(record, true);
			}
		}
		this.applyChange(metaData);
		this.historyTool.notifyUpdate();
		return false;
	},
	onEndHistoryChangeStep: function() {
		this.applyListDesignMetaData();
	},
	onWindowResize: function() {
		if (this.cardDesiggner) {
			this.cardDesiggner.onWindowResize();
		}
	},
	dispose: function() {
		var pagging = this.awArticle && this.awArticle.pagging;
		if (this.graphAddin) {
			this.graphAddin.dispose();
		}
		this.cardDesiggner = this.historyToolDesigner = this.switchPagerLinks = this.graphAddin = this.modes = null;
		document.site.removeDomChild(this.layoutSlot);
		Designer.prototype.dispose.call(this);
		if (pagging) {
			pagging.draw();
		}
	}
});