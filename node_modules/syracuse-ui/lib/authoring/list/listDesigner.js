"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;
var CardDesigner = require("syracuse-ui/lib/authoring/list/cardDesigner").CardDesigner;

function ListDesigner() {}

exports.ListDesigner = helpers.defineClass(ListDesigner, Designer, {
	designCardItem: function(cardItem) {
		document.site.designItem(open, cardItem.articleParent, CardDesigner);
	},
	endTargetPageUpdate: function() {
		this.historyTool.notifyUpdate();
		if (this.designerWorkingCopy) {
			this.designerWorkingCopy.temporalySave();
		}
	},
	loadBox: function(designedPage) {
		this.$prototype = {
			$properties: {
				$isCardPosition: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-boolean",
						$enum: [{
							$value: false,
							$title: this.localize.lw_isCardPositionNo
						}, {
							$value: true,
							$title: this.localize.lw_isCardPositionYes
						}]
					}
				},
				$cardPosition: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "inline",
							$title: this.localize.lw_cardPositionInline
						}, {
							$value: "top",
							$title: this.localize.lw_cardPositionTop
						}, {
							$value: "left",
							$title: this.localize.lw_cardPositionLeft
						}, {
							$value: "right",
							$title: this.localize.lw_cardPositionRight
						}, {
							$value: "bottom",
							$title: this.localize.lw_cardPositionBottom
						}]
					}
				},
				$graphPosition: {
					$type: "application/x-choice",
					$isHidden: this.awArticle.$prototype.$cube ? false : true,
					$title: this.localize.lw_graphPosition,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "top",
							$title: this.localize.lw_graphPositionTop
						}, {
							$value: "left",
							$title: this.localize.lw_graphPositionLeft
						}, {
							$value: "right",
							$title: this.localize.lw_graphPositionRight
						}, {
							$value: "bottom",
							$title: this.localize.lw_graphPositionBottom
						}, {
							$value: "front",
							$title: this.localize.lw_graphPositionFront
						}, {
							$value: "behind",
							$title: this.localize.lw_graphPositionBehind
						}]
					}
				}
			}
		};
		this.$item = {
			$layout: {
				$items: []
			}
		};
		Designer.prototype.loadBox.call(this);
		this.applyListDesignMetaData();
	},
	applyListDesignMetaData: function() {
		var delta = {
			$format: this.awArticle.$item.$format || "grid",
			$graphPosition: this.awArticle.$item.$graphPosition || "bottom"
		};
		if (this.awArticle.$item.$cards) {
			delta.$cardPosition = this.awArticle.$item.$cards.$position || "bottom";
		} else {
			delta.$cardPosition = this.awArticle.builder.$inlineCard ? "inline" : "no";
		}
		delta.$isCardPosition = delta.$cardPosition != "no";
		this.applyChange(delta);
	},
	onClickPicker: function(picker) {
		if (picker.syraPickerType) {
			switch (picker.syraPickerType) {
				case "designCard":
					this.designCardItem(this.getDesignedCardItem());
					return false;
				case "designGridCard":
					this.designCardItem(this.getDesignedCardItem());
					return false;
				case "$colcount":
					this.awArticle.applyDesignMetaData({
						$cardsByRowCount: picker.$syraColCount
					}, true);
					this.templatesTool.selectColChoice(this.sectionCards, this.awArticle, picker.$syraColCount);
					this.historyTool.notifyUpdate();
					return false;

				case "$format":
					var metaData = {
						$format: picker.syraFormat
					};
					this.awArticle.applyDesignMetaData(metaData, true);
					this.historyTool.notifyUpdate();
					this.applyChange(metaData);
					return false;
			}
			return Designer.prototype.onClickPicker.call(this, picker);
		}
		return true;
	},
	ensureHistoryVisibility: function() {
		this.navSlot.style.display = this.awArticle.page.designer ? "none" : "";
	},
	drawBox: function() {
		this.layoutSlot = document.createElement("aside");
		this.layoutSlot.className = "s-listdesigner";
		this.awArticle._core.parentNode.insertBefore(this.layoutSlot, this.awArticle._core);
		this.layoutSlot.style.display = "";
		this.$$item = this.$$body = $(this.layoutSlot);
		this.navSlot = document.createElement("div");
		this.navSlot.className = "s-listdesigner-nav";
		this.ensureHistoryVisibility();
		this.layoutSlot.appendChild(this.navSlot);
		this.settingsSlot = document.createElement("div");
		this.settingsSlot.className = "s-listdesigner-settings";
		this.layoutSlot.appendChild(this.settingsSlot);

		this.awItem = this.awArticle;

		this.loadDefaultTools("s-listdesigner");
		this.loadTemplateTools();

		this.appendFormat();
		this.loadNewItem(this.gridSlot, {
			$bind: "$isCardPosition",
			$choiceLayout: "1",
			$isEditMode: true,
			$isTopLabelAlignment: false,
			$skin: "s-aw-field"
		});
		this.loadNewItem(this.gridSlot, {
			$bind: "$cardPosition",
			$choiceLayout: "row",
			$isTopLabelAlignment: false,
			$format: "$button",
			$icon: {
				$path: "authoring/s-aw-grid-card-"
			},
			$isEditMode: true,
			$skin: "s-aw-field"
		});
		this.sectionGridCard = {
			body: this.gridSlot.appendChild(document.createElement("div"))
		};
		this.templatesTool.addListModelLinks(this.sectionGridCard, this.awItem);
		this.sectionCards = {
			body: this.cardsSlot
		};

		this.designCardLink = document.createElement("a");
		this.designGridCardLink = document.createElement("a");
		this.designCardLink.setAttribute("data-s-picker", this.designCardLink.syraPickerType = "designCard");
		this.designGridCardLink.setAttribute("data-s-picker", this.designGridCardLink.syraPickerType = "designGridCard");

		this.designCardLink.title = this.designCardLink.textContent = this.designGridCardLink.title = this.designGridCardLink.textContent = "design card";
		this.designCardLink.className = this.designGridCardLink.className = "s-aw-list-design-card";
		this.templatesTool.addColsCountLinks(this.sectionCards, this.awItem, this.awArticle.builder.$cardsByRowCount || 1, 6);
		this.templatesTool.addListModelLinks(this.sectionCards, this.awItem);

		this.sectionGridCard.body.appendChild(this.designGridCardLink);
		this.sectionCards.body.appendChild(this.designCardLink);
		this.sectionGraph = {
			body: this.settingsSlot.appendChild(document.createElement("div"))
		};
		this.sectionGraph.body.style.display = this.awArticle.$prototype.$cube ? "" : "none";
		this.sectionGraph.body.className = "s-aw-list-graph-slot";

		var div = document.createElement("div");
		div.textContent = this.localize.aw_graph;
		this.sectionGraph.body.appendChild(div).className = "s-aw-list-graph-title";
		this.loadNewItem(this.sectionGraph.body, {
			$bind: "$graphPosition",
			$contentEditable: true,
			$isTopLabelAlignment: false,
			$skin: "s-aw-field",
			$isEditMode: true,
			$format: "$combo"
		});

		this.navSlot.appendChild(this.historySlot);
		//	this.navSlot.appendChild(this.workinCopySlot);

		var $fieldCube = this.awArticle.$item.$cube || this.awArticle.$prototype.$cube;
		this.fieldMeasures = [];
		if ($fieldCube && $fieldCube.$measures) {
			if (this.awArticle.chart && this.awArticle.chart.designGraphType == "cube$highCharts") {
				var $itemCube = this.awArticle.$item.$cube || {};
				var $itemMeasures = $itemCube.$measures || {};
				var delta = {};
				var binds = Object.keys($fieldCube.$measures);
				for (var ii = 0, jj = binds.length; ii < jj; ii++) {
					var bind = binds[ii];
					var $measure = $fieldCube.$measures[bind];
					var $field = {
						$type: "application/x-choice",
						$title: "",
						$value: {
							$type: "application/x-string",
							$enum: []
						}
					};
					var $choices = ["area", "areaspline", "column", "line", "scatter", "spline", "pie"];
					for (var mm = 0, kk = $choices.length; mm < kk; mm++) {
						$field.$value.$enum.push({
							$value: $choices[mm],
							$title: this.localize[$choices[mm]] || $choices[mm]
						});
					}
					$field.$title = $measure.$title ? this.awArticle.page.getLocalizeText($measure.$title) : "";
					this.$prototype.$properties["$cube" + bind] = $field;
					this.fieldMeasures.push(this.loadNewItem(this.sectionGraph.body, {
						$category: "field",
						$bind: "$cube" + bind,
						$measure: bind,
						$isTopLabelAlignment: false,
						$icon: {
							$inputMode: "icon",
							$mode: "icon",
							$path: "graphics/s-graph-"
						},
						$choiceLayout: "3",
						$isEditMode: true,
						$skin: "s-aw-field"
					}));
					delta["$cube" + bind] = ($itemMeasures[bind] ? $itemMeasures[bind].$style : null) || "area";
				}
				this.applyChange(delta);
			}
		}
		this.awArticle.pagging.designItem(true);
		document.site.resize();
	},
	getDesignedCardItem: function() {
		var cardItem, record = this.awArticle.records[0];
		if (this.awArticle.$item.$format == "grid") {
			cardItem = record.inlineCardItem;
			if (!cardItem) {
				for (var ii = 0, jj = this.awArticle.records.length; ii < jj; ii++) {
					if (this.awArticle.records[ii].outCardItem) {
						record = this.awArticle.records[ii];
						cardItem = record.outCardItem;
						break;
					}
				}
			}
		} else {
			cardItem = record.cardItem;
		}
		return cardItem;
	},
	onTemplateChoiceClick: function(picker, awItem, awLayout) {
		if (this.awArticle.records && this.awArticle.records.length > 0) {
			switch (picker.syraPickerType) {
				case "$model_smart":
					this.templatesTool._applySectionSmartModel(this.getDesignedCardItem());
					return awItem;
				case "$model_3cols":
					this.templatesTool.splitInColumns(this.getDesignedCardItem(), null, 3);
					return awItem;
				case "$model_4cols":
					this.templatesTool.splitInColumns(this.getDesignedCardItem(), null, 4);
					return awItem;
				case "$model_mixt":
					this.templatesTool.build_mixt(this.getDesignedCardItem());
					return awItem;
				default:
					if (picker.syraPickerType.indexOf("$model_") == 0) {
						this.templatesTool._applySectionModel(this.getDesignedCardItem(), picker.syraPickerType);
						return awItem;
					}
					break;
			}
		}
	},
	appendTitle: function($title) {
		var title = document.createElement("div");
		title.className = "s-aw-list-formats-title";
		title.textContent = $title;
		return title;
	},
	appendFormat: function() {
		this.gridLink = document.createElement("a");
		this.cardsLink = document.createElement("a");
		this.gridSlot = document.createElement("div");
		this.cardsSlot = document.createElement("div");

		this.gridLink.title = this.gridLink.textContent = this.localize.lw_gridMode;
		this.cardsLink.title = this.cardsLink.textContent = this.localize.lw_cardMode;
		this.gridLink.className = "s-aw-list-format-grid";
		this.cardsLink.className = "s-aw-list-format-cards";
		var table = document.createElement("div");
		table.className = "s-aw-list-formats";

		var titleRow = document.createElement("div");
		titleRow.className = "s-aw-list-formats-row";
		titleRow.appendChild(this.appendTitle("Presentation"));
		titleRow.appendChild(this.appendTitle("")); //separator
		(this.cardsTitle = titleRow.appendChild(this.appendTitle("Columns"))).style.display = "none";
		(this.gridTitle = titleRow.appendChild(this.appendTitle(this.localize.lw_cardPosition))).style.display = "none";
		table.appendChild(titleRow);

		var row = document.createElement("div");
		row.className = "s-aw-list-formats-row";

		var links = document.createElement("div");
		links.className = "s-aw-list-formats-links";
		links.appendChild(this.cardsLink).setAttribute("data-s-picker", this.cardsLink.syraPickerType = "$format");
		links.appendChild(this.gridLink).setAttribute("data-s-picker", this.gridLink.syraPickerType = "$format");
		row.appendChild(links);

		var sep = document.createElement("div");
		sep.className = "s-aw-list-formats-sep";
		row.appendChild(sep);
		this.cardsLink.syraFormat = "cards";
		this.gridLink.syraFormat = "grid";
		this.gridSlot.style.display = "none";
		this.gridSlot.className = "s-aw-list-formats-cell";
		row.appendChild(this.gridSlot);
		this.cardsSlot.style.display = "none";
		this.cardsSlot.className = "s-aw-list-formats-cell";
		row.appendChild(this.cardsSlot);

		table.appendChild(row);
		this.settingsSlot.appendChild(table);
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$format) {
				var delta = newData.$properties = newData.$properties || {};
				this.gridLink.className = "s-aw-list-format-grid";
				this.cardsLink.className = "s-aw-list-format-cards";
				if (newData.$format == "cards") {
					this.cardsTitle.style.display = this.cardsSlot.style.display = "";
					this.gridTitle.style.display = this.gridSlot.style.display = "none";
				} else {
					this.cardsTitle.style.display = this.cardsSlot.style.display = "none";
					this.gridTitle.style.display = this.gridSlot.style.display = "";
				}
				this[newData.$format + "Link"].className += " s-selected";
			}
			if (newData.$graphPosition !== undefined) {
				var show = newData.$graphPosition == "behind" ? "none" : "";
				if (this.fieldMeasures) {
					for (var ii = 0, jj = this.fieldMeasures.length; ii < jj; ii++) {
						this.fieldMeasures[ii]._domItem.style.display = show;
					}
				}
			}
			if (newData.$isCardPosition !== undefined) {
				(newData.$properties = newData.$properties || {}).$cardPosition = {
					$isHidden: !newData.$isCardPosition
				};
				this.sectionGridCard.body.style.display = newData.$isCardPosition ? "" : "none";
			}
		}
		Designer.prototype.applyChange.call(this, newData);
	},
	onNotifyDataChange: function(field, value) {
		var metaData = {};
		var $bind = field.$item.$bind;
		metaData[$bind] = value;
		if (this.awArticle.isList && field.$item.$measure) {
			var $cube = this.awArticle.$item.$cube || {};
			$cube.$measures = $cube.$measures || {};
			($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {}).$style = value;
			this.awArticle.applyDesignMetaData({
				$cube: $cube
			}, true);
		} else {
			if (metaData.$cardPosition !== undefined) {
				if (!(metaData.$cardPosition == "no" || metaData.$cardPosition == "inline")) {
					if (this.awArticle.$item.$graphPosition == "front" || this.awArticle.$item.$graphPosition == "behind") {
						metaData.$graphPosition = "bottom";
					}
				}
				metaData.$isCardPosition = metaData.$cardPosition != "no";
			} else {
				if (metaData.$isCardPosition !== undefined) {
					metaData.$cardPosition = "no";
					if (metaData.$isCardPosition) {
						metaData.$cardPosition = this.dataset.$cardPosition || "no";
						if (metaData.$cardPosition == "no") {
							metaData.$cardPosition = "bottom";
						}
					}
				}
			}
			this.awArticle.applyDesignMetaData(metaData, true);
		}
		this.applyChange(metaData);
		this.historyTool.notifyUpdate();
		return false;
	},
	onEndHistoryChangeStep: function() {
		this.applyListDesignMetaData();
	},
	onWindowResize: function() {},
	dispose: function() {
		if (this.awArticle && this.awArticle.pagging) {
			this.awArticle.pagging.designItem(false);
		}
		this.fieldMeasures = null;
		this.gridLink = this.cardsLink = this.gridSlot = this.cardsSlot = null;
		document.site.removeDomChild(this.layoutSlot);
		Designer.prototype.dispose.call(this);
	}
});