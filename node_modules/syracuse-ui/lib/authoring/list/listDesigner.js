"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;
var CardDesigner = require("syracuse-ui/lib/authoring/list/cardDesigner").CardDesigner;

function _loadGraphDesigner(designer) {
	var list = designer.designedArticle;
	var hasDecorator = !! list.$prototype.$decorator;
	var hasCube = !! list.$prototype.$cube;
	if (hasDecorator || hasCube) {
		designer.graph = {
			styleFields: {},
			colorFields: {},
			defaultStyle: "column",
			defaultColor: "#409f8b",
			styles: ["area", "areaspline", "column", "line", "scatter", "spline", "pie", "bar"],
			colors: [{
				$value: "#007f64",
				$title: "green"
			}, {
				$value: "#409f8b",
				$title: "1"
			}, {
				$value: "#34b233",
				$title: "brightgreen"
			}, {
				$value: "#67c566",
				$title: "2"
			}, {
				$value: "#4d4f53",
				$title: "darkgrey"
			}, {
				$value: "#7a7b7e",
				$title: "3"
			}, {
				$value: "#9a9b9c",
				$title: "midgray"
			}, {
				$value: "#b3b4b5",
				$title: "4"
			}, {
				$value: "#ff5800",
				$title: "orange"
			}, {
				$value: "#ff8240",
				$title: "5"
			}, {
				$value: "#009fda",
				$title: "blue"
			}, {
				$value: "#40b7e3",
				$title: "6"
			}, {
				$value: "#6639b7",
				$title: "purple"
			}, {
				$value: "#8c6bc9",
				$title: "7"
			}]
		};
		var table = syra_dom.addDiv("s-aw-graph");
		var slot = syra_dom.addDiv("s-aw-graph-pos");
		syra_dom.addTextInfo("s-aw-graph-title", syra_local.lw_graph_position, slot);
		designer.loadNewItem(slot, {
			$bind: "$graphPosition",
			$inplace: true,
			$contentEditable: true,
			$isTopLabelAlignment: false,
			$isEditMode: true,
			$format: "$combo"
		});
		table.appendChild(slot);

		designer.layoutSlot.appendChild(table);
		if (hasCube) {
			slot = syra_dom.addDiv("s-aw-graph-measures", table);
			/*title = document.createElement("div");
             title.className = "s-aw-graph-title";
             title.textContent = syra_local.lw_graphAxis;
             slot.appendChild(title);*/
			var measures = syra_dom.addDiv("s-aw-graph-measures-list");
			var delta = {};
			var binds = Object.keys(list.$prototype.$cube.$measures);
			for (var ii = 0, jj = binds.length; ii < jj; ii++) {
				designer.appendMeasure(binds[ii], delta, measures);
			}
			slot.appendChild(measures);
			designer.applyChange(delta);
		}
	}
}


function _onModeClick(event, btn) {
	var designer = this.parent;
	var list = designer.designedArticle;
	var metaData = {};
	if (this.modeType) {
		switch (this.modeType) {
			case "cards":
				metaData.$format = "cards";
				break;
			case "grid":
				metaData.$format = "grid";
				metaData.$cardPosition = "no";
				break;
			case "detailgrid":
				metaData.$format = "grid";
				metaData.$cardPosition = designer.dataset.$cardPosition || "no";
				if (metaData.$cardPosition == "no") {
					var $designing = list.$designing;
					if ($designing && $designing.grid && $designing.grid.$cardItem) {
						metaData.$cardPosition = $designing.grid.$cardItem.$position || "no";
					}
					if (metaData.$cardPosition == "no") {
						metaData.$cardPosition = "bottom";
					}
				}
				break;
		}
		list.$designing = list.$designing || {};
		if (list.$item.$format == "grid") {
			list.$designing.grid = list.$designing.grid || {};
			list.$designing.grid.$layout = helpers.object.clone(list.$item.$layout, true);
			if (list.$item.$cardItem) {
				list.$designing.grid.$cardItem = helpers.object.clone(list.$item.$cardItem, true);
			}
		} else {
			list.$designing.cards = {
				$layout: helpers.object.clone(list.$item.$layout, true)
			};
		}
		if (metaData.$format !== undefined && metaData.$format != list.$item.$format) {
			delete list.$item.$cardItem;
			delete list.$item.$layout;
			list.$item.$format = metaData.$format;
			list.reloadLayout();
			designer = list.designer;
		}
	} else {
		if (this.position !== undefined) {
			metaData.$cardPosition = this.position;
			if (!(metaData.$cardPosition == "no" || metaData.$cardPosition == "row")) {
				if (list.$item.$graphPosition == "front" || list.$item.$graphPosition == "behind") {
					metaData.$graphPosition = "bottom";
				}
			}
		}
	}

	designer.designedArticle.applyDesignMetaData(metaData, true);
	var record = designer.getDesignedCardItem();
	record && record.designer && record.designer.toggleUIDesign(record, true);
	designer.endArticleUpdate();
	designer.applyChange(metaData);
}

function _onSwitchPagerClick() {
	var list = this.parent.designedArticle;
	list.paging.applyMetadata({
		$isPagerHidden: !list.$item.$isPagerHidden
	}, true);
	list.saveListDesign();
	this.parent._setSwitchPagerBtnsTitle();
}

exports.Designer = helpers.defineClass(function() {}, Designer, {
	closeDesigner: function() {
		syra_site.switchItemDesigner(this.designedArticle, false);
	},
	loadBox: function(designedPage) {
		this.$prototype = {
			$properties: {
				$graphPosition: {
					$type: "application/x-choice",
					$title: syra_local.lw_graph_position,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "top",
							$title: syra_local.lw_graph_position_top
						}, {
							$value: "left",
							$title: syra_local.lw_graph_position_left
						}, {
							$value: "right",
							$title: syra_local.lw_graph_position_right
						}, {
							$value: "bottom",
							$title: syra_local.lw_graph_position_bottom
						}, {
							$value: "front",
							$title: syra_local.lw_graph_position_front
						}, {
							$value: "behind",
							$title: syra_local.lw_graph_position_behind
						}]
					}
				}
			}
		};
		this.$item = {
			$layout: {
				$items: []
			}
		};
		Designer.prototype.loadBox.call(this);
		this.applyListDesignMetaData();
	},
	drawBox: function() {
		this.domItem = this.body = this.layoutSlot = document.createElement("aside");
		this.domItem.syraItem = this.domItem.syraarticle = this.id;
		this.layoutSlot.className = "s-aw-list";
		this.designedArticle._core.parentNode.insertBefore(this.layoutSlot, this.designedArticle._core);
		this.layoutSlot.style.display = "";
		this.addCloseButton(this.layoutSlot);
		this.settingsSlot = syra_dom.addDiv("s-aw-list-body", this.layoutSlot);

		this.designedItem = this.designedArticle;
		this.loadHistoryTool();
		this.loadTemplateTools();

		/*if (!this.designedArticle.page.isVignettePage && !this.designedArticle.page.designer) {
         table.style.display = "none";
         }*/
		var modesSlot = document.createElement("div");
		modesSlot.className = "s-aw-list-modes";
		modesSlot.textContent = syra_local.lw_presentation;
		modesSlot.appendChild(document.createElement("br"));
		this.settingsSlot.appendChild(modesSlot);

		var modeTypes = ["cards", "grid", "detailgrid"];
		for (var ii = 0, jj = modeTypes.length; ii < jj; ii++) {
			var modeType = modeTypes[ii];
			var box;
			syra_menus.button.add({
				parent: this,
				slot: modesSlot,
				text: syra_local["lw_mode_" + modeType],
				css: "s-aw-list-mode",
				iconOnly: true,
				imageName: "authoring/s-aw-list-mode-" + modeType + ".png",
				btnclick: _onModeClick,
				modeType: modeType,
				box: box = document.createElement("div")
			});
			box.className = "s-aw-list-mode-detail";
			box.textContent = syra_local["lw_mode_" + modeType + "_title"];
			box.appendChild(document.createElement("br"));
			this.settingsSlot.appendChild(box);
			if (modeType != "grid") {
				var slot = syra_dom.addDiv("s-aw-list-card-position", box);
				if (modeType == "cards") {
					this.sectionCards = {
						body: slot
					};
					this.addColsCountButtons(this.sectionCards, this.designedItem, this.designedArticle.builder.$cardsByRowCount || 1, 6);
				} else { //"detailgrid"
					var positions = ["row", "top", "left", "right", "bottom"];
					for (var mm = 0, kk = positions.length; mm < kk; mm++) {
						var position = positions[mm];
						syra_menus.button.add({
							parent: this,
							slot: slot,
							iconOnly: true,
							text: syra_local["lw_card_position_" + position],
							css: "s-aw-list-mode",
							imageName: "authoring/s-aw-grid-card-" + position + ".png",
							btnclick: _onModeClick,
							position: position
						});
					}
				}
				syra_menus.button.add({
					parent: this,
					slot: box,
					text: syra_local.lw_designCard,
					css: "s-aw-list-design-card-picker",
					btnclick: function() {
						var designer = new CardDesigner();
						designer.openDesigner(this.parent.getDesignedCardItem());
						designer.resizeArticle();
					}
				});
			}
			if (this.designedArticle.isClientFetch) {
				(this._switchPagerBtns = this._switchPagerBtns || []).push(syra_menus.button.add({
					parent: this,
					slot: box,
					text: syra_local["lw_mode_" + modeType],
					css: "s-aw-list-pager-btn",
					btnclick: _onSwitchPagerClick
				}));
			}

		}
		this._setSwitchPagerBtnsTitle();

		_loadGraphDesigner(this);
		this.getDesignedCardItem(); //ensuser one carditem is opened
		syra_site.resizeArticle();
	},
	endArticleUpdate: function() {
		var record = this.getDesignedCardItem();
		if (record && record.layoutContent) {
			syra_site.ensureArticleVisibility(this.designedArticle.page);
		}
		this.history.updateSteps();
		if (this.designedArticle.page.designer) {
			this.designedArticle.page.designer.endArticleUpdate(this.designedArticle);
		} else {
			this.designedArticle.resizeArticle(true);
			this.saveDesign();
		}
	},
	saveDesign: function() {
		if (this.designedArticle.page.designer) {
			this.designedArticle.page.designer.saveDesign();
		} else {
			this.designedArticle.page.savePageDesign();
		}

	},
	applyListDesignMetaData: function() {
		var delta = {
			$format: this.designedArticle.$item.$format || "grid",
			$graphPosition: this.designedArticle.$item.$graphPosition || "bottom"
		};
		if (this.designedArticle.$item.$cardItem) {
			delta.$cardPosition = this.designedArticle.$item.$cardItem.$position || "bottom";
		} else {
			delta.$cardPosition = "no";
		}
		this.applyChange(delta);
	},
	getDesignedCardItem: function() {
		var cardItem, record = this.designedArticle.records[0];
		if (this.designedArticle.$item.$format == "grid") {
			if (this.designedArticle.$item.$cardItem) {
				if (this.designedArticle.builder.toggleRowCard) {
					this.designedArticle.builder.toggleRowCard(record, true);
					cardItem = record;
				} else {
					for (var ii = 0, jj = this.designedArticle.records.length; ii < jj; ii++) {
						record = this.designedArticle.records[ii];
						if (record.cardItem) {
							cardItem = record.cardItem;
							break;
						}
					}
				}
			}
		} else {
			cardItem = record ? record.cardItem : null;
		}
		return cardItem;
	},
	_setSwitchPagerBtnsTitle: function() {
		if (this._switchPagerBtns) {
			var title = this.designedArticle.$item.$isPagerHidden ? syra_local.lw_showPager : syra_local.lw_hidePager;
			for (var ii = 0, jj = this._switchPagerBtns.length; ii < jj; ii++) {
				syra_menus.button.setText(this._switchPagerBtns[ii], title);
			}
			this.designedArticle.paging.draw(true);
		}
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$format) {
				var isSelectedBoxeHidden;
				var delta = newData.$properties = newData.$properties || {};
				var selectedMode = newData.$format;
				if (newData.$format == "grid") {
					if (newData.$cardPosition != "no") {
						selectedMode = "detailgrid";
					} else {
						isSelectedBoxeHidden = !this._switchPagerBtns;
					}
				}
				for (var ii = 0, jj = this.buttons.length; ii < jj; ii++) {
					var btn = this.buttons[ii];
					if (btn.modeType) {
						var isSelected = btn.modeType == selectedMode;
						syra_dom.toggleClass(btn.link, "s-selected", isSelected);
						btn.box.style.display = (isSelected && !isSelectedBoxeHidden) ? "" : "none";
					}
				}

			}
			if (newData.$cardPosition) {
				for (var ii = 0, jj = this.buttons.length; ii < jj; ii++) {
					var btn = this.buttons[ii];
					if (btn.position) {
						var isSelected = btn.position == newData.$cardPosition;
						syra_dom.toggleClass(btn.link, "s-selected", isSelected);
					}
				}

			}
			if (this.graph) {
				var keys = Object.keys(newData);
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					var $bind = keys[ii];
					if (this.graph.styleFields[$bind]) {
						this.graph.colorFields[$bind].domItem.style.visibility = newData[$bind] == "pie" ? "hidden" : "";
					}
				}
			}
		}
		Designer.prototype.applyChange.call(this, newData);
	},
	onNotifyDataChange: function(field, value) {
		var metaData = {};
		var $bind = field.$item.$bind;
		metaData[$bind] = value;
		if (field.$item.$measure) {
			var $cube = this.designedArticle.$item.$cube || {};
			$cube.$measures = $cube.$measures || {};
			($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {})[field.$item.$axisOption] = value;
			this.designedArticle.applyDesignMetaData({
				$cube: $cube
			}, true);
		} else {
			this.designedArticle.applyDesignMetaData(metaData, true);
			var record = this.getDesignedCardItem();
			record && record.designer && record.designer.toggleUIDesign(record, true);
		}
		this.endArticleUpdate();
		this.applyChange(metaData);
		return false;
	},
	onEndHistoryChangeStep: function() {
		this.applyListDesignMetaData();
	},
	resizeArticle: function() {
		this.cardDesigner && this.cardDesigner.resizeArticle();
	},

	appendMeasure: function(bind, delta, body) {
		var chart = this.designedArticle.chart;
		var $itemMeasures = (this.designedArticle.$item.$cube && this.designedArticle.$item.$cube.$measures) || {};
		//var $measure = this.designedArticle.$prototype.$cube.$measures[bind];
		var serie = chart._meta.series[bind];

		var slot = document.createElement("div");
		slot.className = "s-aw-graph-meassure";
		var title = document.createElement("div");
		title.textContent = serie.measure.$title ? this.designedArticle.page.getLocalizeText(serie.measure.$title) : "";
		title.className = "s-aw-graph-title";
		slot.appendChild(title);

		var $enum = [];
		for (var mm = 0, kk = this.graph.styles.length; mm < kk; mm++) {
			$enum.push({
				$value: this.graph.styles[mm],
				$title: syra_local[this.graph.styles[mm]] || this.graph.styles[mm]
			});
		}
		this.$prototype.$properties["$cube" + bind] = {
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",
				$enum: $enum
			}
		};

		this.$prototype.$properties["$cube-color-" + bind] = {
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",
				$enum: helpers.object.clone(this.graph.colors, true)
			}
		};

		var cell = syra_dom.addDiv("s-aw-graph-meassure-item", slot);
		this.graph.styleFields["$cube" + bind] = this.loadNewItem(cell, {
			$category: "field",
			$inplace: true,
			$bind: "$cube" + bind,
			$measure: bind,
			$choiceLayout: 2,
			$axisOption: "$style",
			$icon: {
				$mode: "icon",
				$path: "site/s-graph-"
			},
			$isEditMode: true
		});
		var $style, $color;
		if ($itemMeasures[bind]) {
			$style = $itemMeasures[bind].$style;
			$color = $itemMeasures[bind].$color;
		}
		$style = $style || serie.measure.$style || this.graph.defaultStyle;
		delta["$cube" + bind] = ($style && {
			xy: "line",
			point: "scatter",
			stick: "column",
			radar: "spiderweb"
		}[$style]) ||
			$style;
		delta["$cube-color-" + bind] = $color || serie.measure.$color || this.graph.defaultColor;

		this.graph.colorFields["$cube" + bind] = this.loadNewItem(syra_dom.addDiv("s-aw-graph-meassure-item", slot), {
			$category: "field",
			$inplace: true,
			$bind: "$cube-color-" + bind,
			$choiceLayout: 2,
			$measure: bind,
			$axisOption: "$color",
			$colorChoice: true,
			$isEditMode: true
		});
		body.appendChild(slot);
	},
	dispose: function() {
		var paging = this.designedArticle && this.designedArticle.paging;
		syra_dom.removeChild(this.layoutSlot);
		Designer.prototype.dispose.call(this);
		paging && paging.draw();
	}
});