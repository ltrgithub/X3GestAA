"use strict";
var helpers = require('syracuse-core/lib/helpers');

function GraphAddin() {}

exports.GraphAddin = helpers.defineClass(GraphAddin, null, {
	load: function(listDesigner) {
		this.listDesigner = listDesigner;
		this.list = this.listDesigner.awArticle;
		this.styles = ["area", "areaspline", "column", "line", "scatter", "spline", "pie", "bar"];
		this.colorTitles = {
			'#007f64': "green",
			'#34b233': "brightgreen",
			'#4d4f53': "darkgrey",
			'#9a9b9c': "midgray",
			'#ff5800': "orange",
			'#009fda': "blue",
			'#6639b7': "purple",
			'#409f8b': "1",
			'#67c566': "2",
			'#7a7b7e': "3",
			'#b3b4b5': "4",
			'#ff8240': "5",
			'#40b7e3': "6",
			'#8c6bc9': "7"
		};
		this.colors = ["#007f64", "#34b233", "#4d4f53", "#9a9b9c", "#ff5800", "#009fda", "#6639b7", "#409f8b", "#67c566", "#7a7b7e", "#b3b4b5", "#ff8240", "#40b7e3", "#8c6bc9"];
		this.defaultStyle = "area";

		var header = this.listDesigner.settingsSlot.appendChild(document.createElement("div"));
		header.className = "s-aw-list-group-cell";
		var body = document.createElement("div");
		body.className = "s-aw-list-group-cell";

		var group = this.listDesigner._appendGroup([{
				title: this.listDesigner.appendGroupTitle(this.listDesigner.localize.lw_graphPosition),
				body: header
			},
			this.listDesigner.addGroupSeparator(), {
				title: this.listDesigner.appendGroupTitle("Axis"),
				body: body
			}
		]);
		group.className += " s-aw-list-graph-slot";

		this.listDesigner.loadNewItem(header, {
			$bind: "$graphPosition",
			$isTitleHidden: true,
			$contentEditable: true,
			$isTopLabelAlignment: false,
			$skin: "s-aw-field",
			$isEditMode: true,
			$format: "$combo"
		});

		var delta = {};
		var binds = Object.keys(this.list.$prototype.$cube.$measures);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			this.appendMeasure(binds[ii], delta, body);
		}
		this.listDesigner.applyChange(delta);

	},
	appendMeasure: function(bind, delta, body) {
		var $itemMeasures = (this.list.$item.$cube && this.list.$item.$cube.$measures) || {};
		var $measure = this.list.$prototype.$cube.$measures[bind];

		var slot = document.createElement("div");
		slot.className = "s-aw-list-graph-meassure";
		var title = document.createElement("div");
		title.textContent = $measure.$title ? this.list.page.getLocalizeText($measure.$title) : "";
		title.className = "s-aw-list-graph-meassure-title";
		slot.appendChild(title);

		var $enum = [];
		for (var mm = 0, kk = this.styles.length; mm < kk; mm++) {
			$enum.push({
				$value: this.styles[mm],
				$title: this.listDesigner.localize[this.styles[mm]] || this.styles[mm]
			});
		}
		this.listDesigner.$prototype.$properties["$cube" + bind] = {
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",
				$enum: $enum
			}
		};

		var $enum = [];
		for (var mm = 0, kk = this.colors.length; mm < kk; mm++) {
			$enum.push({
				$value: this.colors[mm],
				$title: this.colorTitles[this.colors[mm]]
			});
		}
		this.listDesigner.$prototype.$properties["$cube-color-" + bind] = {
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",
				$enum: $enum
			}
		};

		var cell = document.createElement("div");
		cell.className = "s-aw-list-graph-meassure-item";
		slot.appendChild(cell);
		this.listDesigner.loadNewItem(cell, {
			$category: "field",
			$isTitleHidden: true,
			$bind: "$cube" + bind,
			$measure: bind,
			$axisOption: "$style",
			$isTopLabelAlignment: false,
			$icon: {
				$inputMode: "icon",
				$mode: "icon",
				$path: "graphics/s-graph-"
			},
			$choiceLayout: "3",
			$isEditMode: true,
			$skin: "s-aw-field"
		});
		var $style = $itemMeasures[bind] && $itemMeasures[bind].$style;
		delta["$cube" + bind] = $style || $measure.$style || this.defaultStyle;

		var cell = document.createElement("div");
		cell.className = "s-aw-list-graph-meassure-item";
		slot.appendChild(cell);
		this.listDesigner.loadNewItem(cell, {
			$category: "field",
			$isTitleHidden: true,
			$bind: "$cube-color-" + bind,
			$measure: bind,
			$axisOption: "$color",
			$isTopLabelAlignment: false,
			$cssMode: {
				$inputMode: "css",
				$css: "s-aw-graph-color",
				$isColor: true
			},
			$choiceLayout: "2",
			$isEditMode: true,
			$skin: "s-aw-field"
		});

		body.appendChild(slot);
	},
	onNotifyDataChange: function(metaData, field, value) {
		if (field.$item.$measure) {
			var $cube = this.list.$item.$cube || {};
			$cube.$measures = $cube.$measures || {};
			($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {})[field.$item.$axisOption] = value;
			this.list.applyDesignMetaData({
				$cube: $cube
			}, true);
		}
	},
	dispose: function() {
		this.list = this.listDesigner = null;
	}
});