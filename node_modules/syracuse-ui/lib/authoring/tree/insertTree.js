"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ItemTree = require("syracuse-ui/lib/authoring/tree/itemTree").ItemTree;

function InsertTree() {}

exports.InsertTree = helpers.defineClass(InsertTree, ItemTree, {
	fill: function() {
		this.awArticle = this.toolbar.awPalette.awArticle;
		this._clear();
		this.nodes = [];
		this.tabItem.body.syraAwTree = "insertTree";
		this._addInsertNewSectionBlockNode();
		this._showLink = document.createElement("a");
		this._showLink.className = "s-aw-tree-show-link";
		this.tabItem.body.appendChild(this._showLink);
		if (this.awArticle.page == this.awArticle) {
			this.$sourceItem = this.awArticle.$prototype.$article;
			if (!this.$sourceItem) {
				var $items = [];
				var binds = Object.keys(this.awArticle.$prototype.$properties);
				for (var ii = 0, jj = binds.length; ii < jj; ii++) {
					var $bind = binds[ii];
					if ($bind != "$pageViewSelector" && $bind.charAt(0) != "$" && !(this.$isFusionPage && $bind.charAt(0) == "b")) {
						var $field = this.awArticle.$prototype.$properties[$bind];
						if ($field && !$field.$isExcluded) {
							$items.push({
								$bind: $bind
							});
						}
					}
				}
				this.$sourceItem = {
					$layout: {
						$items: $items
					}
				};
			}
		} else {
			this.$sourceItem = this.awArticle.$item;
		}
		this.$sourceItem = helpers.object.clone(this.$sourceItem, true);
		this._addNode(this.$sourceItem, {
			node: this.tabItem.body,
			isRoot: true
		});
		this._showNodes();
	},
	_bindEvents: function() {
		var self = this;
		if (self.tabItem && self.tabItem.body) {
			ItemTree.prototype._bindEvents.call(self);
			$(self.tabItem.body).delegate(".s-aw-tree-show-link", "click.authoringTree", function(event) {
				self.showAll = !self.showAll;
				self._showNodes();
			});
		}
	},
	_showNodes: function() {
		this._showLink.textContent = this.showAll ? "show available" : "show all";
		for (var ii = 2, jj = this.nodes.length; ii < jj; ii++) {
			var nodeItem = this.nodes[ii];
			if (this.showAll) {
				nodeItem.node.style.display = "";
			} else {
				if (nodeItem.item && nodeItem.item.$awAddNewItem && nodeItem.item.$fieldBind) {
					nodeItem.node.style.display = "";
					var parentNode = nodeItem.parentNode;
					while (parentNode) {
						parentNode.node.style.display = "";
						if (parentNode.opener) {
							this.openParentNode(parentNode, true);
						}
						parentNode = parentNode.parentNode;
					}
				} else {
					nodeItem.node.style.display = "none";
				}

			}
		}
	},
	_addInsertNewSectionBlockNode: function($authoringLevel) {
		var itemNode = this._createNodeItem("node-" + this.nodes.length, "section");
		this.tabItem.body.appendChild(itemNode.node);
		itemNode.titleText.textContent = itemNode.node.title = document.site.authorPage.localize.aw_addSectionBlock;
		this.nodes.push(itemNode);
		itemNode.item = {
			$title: document.site.authorPage.localize.aw_addSectionBlock,
			$awAddNewItem: true,
			$authoringLevel: itemNode.$authoringLevel
		};
	},
	_addInsertType: function(itemNode, $isFreeField, isGarbage) {
		itemNode.insertType = document.createElement("div");
		itemNode.insertType.className = $isFreeField ? "s-aw-tree-item-flag-new" : isGarbage ? "s-aw-tree-item-flag-garbage" : "s-aw-tree-item-flag";
		itemNode.node.appendCjildinsertBefore(itemNode.type, itemNode.titleText);
	},
	_addNode: function($item, parentNode) {
		var $items;
		if ($item.$category != "space") {
			if ($item.$items && !$item.$bind && !$item.$category) {
				$items = $item.$items;
			} else {
				this._setParentNode(parentNode);

				var $authoringLevel = parentNode.isRoot ? "article" : ($item.$bind ? "field" : parentNode.$authoringLevel == "section" ? "block" : "section");
				var itemNode = this._createNodeItem("node-" + this.nodes.length, $authoringLevel);
				itemNode.parentNode = parentNode;
				itemNode.$item = $item;
				this.nodes.push(itemNode);

				var $field = $item.$bind ? this.awArticle.$prototype.$properties[$item.$bind] : null;
				var title;
				if (parentNode.isRoot) {
					title = "Available";
				} else {
					title = $item.$title || ($field ? $field.$title : null) || "";
					if (title && title.indexOf("{") >= 0) {
						if (title[1] == "@") {
							title = title.slice(1, title.length - 1);
							if (this.awArticle.$prototype.$localization) {
								title = this.awArticle.$prototype.$localization[title];
							}
						}
					}
				}
				if (title == "-") {
					title = document.site.authorPage.localize["aw_" + itemNode.$authoringLevel];
				}
				itemNode.insertType = document.createElement("div");
				itemNode.insertType.className = "s-aw-tree-item-flag";
				itemNode.data.insertBefore(itemNode.insertType, itemNode.data.firstChild);
				this._setTitleNode(itemNode, $item, $field, title);
				if ($field) {
					this._addFieldType(itemNode, $field);
					var $isFreeField = this.awArticle.$freeFieldBinds.indexOf($item.$bind) >= 0;
					if (this.awArticle.garbageFields[$item.$bind] || $isFreeField) {
						itemNode.insertType.className = $isFreeField ? "s-aw-tree-item-flag-new" : "s-aw-tree-item-flag-garbage";
						itemNode.item = {
							$isFreeField: $isFreeField,
							$title: itemNode.node.title,
							$awAddNewItem: true,
							$fieldBind: $item.$bind,
							$authoringLevel: "field"
						};
						itemNode.node.style.display = "";
					} else {
						var boundField = this.awArticle.boundFields[$item.$bind];
						if (boundField && boundField.length > 0) {
							itemNode.item = boundField[0];
							itemNode.node.style.display = "none";
						}
					}
				} else {
					itemNode.item = {
						$title: itemNode.node.title,
						$awAddNewItem: true,
						$authoringLevel: itemNode.$authoringLevel
					};
					itemNode.node.style.display = "none";
				}
				parentNode.children.appendChild(itemNode.node);
			}
			if ($item.$layout && !$item.$bind) {
				$items = $item.$layout.$items;
			}
			if ($items) {
				for (var ii = 0, jj = $items.length; ii < jj; ii++) {
					this._addNode($items[ii], itemNode || parentNode);
				}
			}
		}
	}
});