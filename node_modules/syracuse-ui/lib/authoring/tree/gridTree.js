"use strict";
var helpers = require('syracuse-core/lib/helpers');


function GridTree() {}

exports.GridTree = helpers.defineClass(GridTree, null, {
	load: function(awPalette, awArticle, slot) {
		var authorPage = document.site.authorPage;
		this.awPalette = awPalette;
		this.list = awArticle;
		slot.style.display = "none";
		document.site.emptyDom(slot);
		var $items = this.list.$item.$layout.$items;
		var root = document.createElement("ul");
		root.className = "s-aw-list-cols";
		this._nodes = [];
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			var $field = this.list.$fieldProperties[$item.$bind];
			if ($field && !$field.$isHidden && !$field.$isExcluded) {
				var node = {
					$item: $item,
					item: document.createElement("li"),
					isFixed: document.createElement("a"),
					$delete: document.createElement("a"),
					title: document.createElement("div")
				};
				node.item.className = "s-aw-list-cols-col s-aw-add-item";
				node.item.setAttribute("data-s-bind", $item.$bind);

				node.isFixed.className = "s-aw-list-cols-col-fixe";
				if ($item.$isFixed) {
					node.isFixed.className += " s-field-fixed";
					node.isFixed.title = authorPage.localize.aw_listUnFixeColumn;
				} else {
					node.isFixed.title = authorPage.localize.aw_listFixeColumn;
				}
				node.$delete.className = "s-aw-list-cols-col-delete";
				node.$delete.title = authorPage.localize.aw_listHideColumn;

				node.title.className = "s-aw-list-cols-col-title";
				var title = this.list.getLocalizedTitle($field.$title);
				var bindTitle = "",
					desc = title;
				bindTitle = authorPage.getBindTitle($item.$bind, $field);
				if (title == "") {
					desc = title = bindTitle;
				} else {
					desc = title + " (" + bindTitle + ")";
				}
				node.title.textContent = title;
				node.title.title = desc;

				node.item.appendChild(node.isFixed);
				node.item.appendChild(node.$delete);
				node.item.appendChild(node.title);
				root.appendChild(node.item);
				this._nodes.push(node);
			}
		}
		slot.appendChild(root);
		(this.slot = slot).style.display = "";
	},
	unload: function() {
		this.slot.style.display = "none";
		document.site.emptyDom(this.slot);
		this.dispose();
	},
	dispose: function() {
		this._nodes = this.slot = this.awPalette = this.list = null;
	},
	onNodeEvent: function(event) {
		var authorPage = document.site.authorPage;
		delete document.site.requestedDDAuthoringItem;
		event.stopPropagation();
		delete document.site.requestedDDAuthoringItem;
		event.stopPropagation();
		var node, nodeIndex = 0;
		var $$target = $(event.target);
		var $bind = $$target.attr("data-s-bind");
		if (!$bind) {
			$bind = $$target.closest("[data-s-bind]").attr("data-s-bind");
		}
		if ($bind) {
			for (var ii = 0, jj = this._nodes.length; ii < jj; ii++) {
				if (this._nodes[ii].$item.$bind == $bind) {
					node = this._nodes[nodeIndex = ii];
					break;
				}
			}
		}
		if (node) {
			if (event.currentTarget.className.indexOf("s-aw-list-cols-col-delete") >= 0) {
				this.list.builder.removeColumn(node.$item.$bind);
				document.site.removeDomChild(node.item);
				document.site.authorPage.notifyUpdate();
				this.awPalette.onEndChangeStep();
			} else {
				if (event.currentTarget.className.indexOf("s-aw-list-cols-col-fixe") >= 0) {
					var isFixed = !(event.target.className.indexOf("s-field-fixed") >= 0);
					var $items = this.list.$item.$layout.$items;
					if (isFixed) {
						for (var ii = 0, jj = nodeIndex; ii <= jj; ii++) {
							var colNode = this._nodes[ii];
							this.list.builder.cols[colNode.$item.$bind].$isFixed = colNode.$item.$isFixed = isFixed;
							colNode.isFixed.className = "s-aw-list-cols-col-fixe s-field-fixed";
							colNode.isFixed.title = document.site.authorPage.localize.aw_listUnFixeColumn;
						}
					} else {
						for (var ii = nodeIndex, jj = this._nodes.length; ii < jj; ii++) {
							var colNode = this._nodes[ii];
							this.list.builder.cols[colNode.$item.$bind].$isFixed = colNode.$item.$isFixed = isFixed;
							colNode.isFixed.className = "s-aw-list-cols-col-fixe";
							colNode.isFixed.title = document.site.authorPage.localize.aw_listFixeColumn;
						}
					}
					document.site.authorPage.endTargetPageUpdate();
				} else {
					if (event.target.className.indexOf("s-aw-tree-item-opener-children") >= 0) {
						var open = !(node.opener.className.indexOf("s-open") < 0);
						node.children.style.display = open ? "" : "none";
						document.site.toggleClass(node.opener, "s-open", !open);
					} else {
						switch (event.type) {
							case "click":
								var col = this.list.builder.cols[node.$item.$bind];
								if (col) {
									this.list.builder.scroller.scrollToTitleItem(col.titleCell);
								}
								break;
						}
					}
				}
			}
		}
	}
});