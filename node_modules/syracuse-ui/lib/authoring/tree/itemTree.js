"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _onNodeOpenerClick(event) {
	syra_dd.cancel();
	event.stopPropagation();
	var node = this.parent;
	if (node) {
		this.opened = !this.opened;
		node.childRoot.style.display = this.opened ? "" : "none";
		syra_button.setText(node.openerBtn, this.opened ? syra_local.aw_tree_collapse : syra_local.aw_tree_expand, this.opened ? "node_expanded" : "node_collapsed");
	}
}

function _onNodeClick(event) {
	var tree = this.parent;
	syra_dd.cancel();
	event.stopPropagation();
	var node = this.itemNode;
	if (this.itemNode && !this.itemNode.item.$awAddNewItem) {
		if (this.itemNode.item == tree.designer.designedArticle) {
			tree.designer.designedArticle.page.scrollToItem(this.itemNode.item);
		}
		tree.selectNode(this.itemNode.item, true);
		tree._isSelecteDisabled = true;
		tree.designer.selectItem(this.itemNode.item, true);
		tree._isSelecteDisabled = false;
	}
}

function ItemTree() {}

exports.ItemTree = helpers.defineClass(ItemTree, null, {
	load: function(designer, title) {
		this.tabItem = syra_button.add({
			parent: designer,
			slot: designer.treesBar.header,
			text: title,
			css: "s-aw-tlbr-tab",
			btnclick: function() {
				this.select(this.parent, this.link, true);
			},
			body: document.createElement("div"),
			select: function(select) {
				if (select && this.parent.selectedTab && this.parent.selectedTab != this) {
					this.parent.selectedTab.select(false);
				}
				this.parent.selectedTab = select ? this : null;
				this.link.className = "s-aw-tlbr-tab" + (select ? " s-tab-open" : "");
				syra_dom.hide(this.body, !select);
			}
		});
		syra_dom.hide(this.tabItem.body, true);
		this.tabItem.body.className = "s-aw-content-tree";
		designer.treesBar.body.appendChild(this.tabItem.body);

		this.designer = designer;
		this.id = designer.id + "-" + (++designer._childItemOffset);
		syra_item.register(this);
	},
	onItemInOut: function(onEnter, event, target) {
		syra_dd.cancel();
		event.stopPropagation();
		var node = syra_item.findItem(target);
		if (node) {
			if (onEnter) {
				if (!node.item.$awAddNewItem) {
					this.designer.toggleOverItem(node.item, true);
					this.designer.designedArticle.page.scrollToItem(node.item);
				}
			} else {
				if (!node.item.$awAddNewItem) {
					this.designer.toggleOverItem(node.item, false);
				}
			}
		}
	},
	selectNode: function(item, select) {
		if (!this._isSelecteDisabled && item && !item.disposed) {
			var node;
			for (var ii = 0, jj = this.nodes.length; ii < jj; ii++) {
				if (this.nodes[ii].item == item) {
					node = this.nodes[ii];
					break;
				}
			}
			if (node) {
				if (select) {
					if (this.selectedNode && this.selectedNode != node && this.selectedNode.item) {
						syra_dom.toggleClass(this.selectedNode.title, "s-aw-tree-designed-" + this.selectedNode.item.$designLevel, false);
					}
					this.selectedNode = node;
					syra_dom.toggleClass(node.title, "s-aw-tree-designed-" + node.item.$designLevel, true);
					this.designer.scrollToItem(this.selectedNode.node, this.tabItem.body, true);
				} else {
					if (this.selectedNode == node) {
						this.selectedNode = null;
						syra_dom.toggleClass(node.title, "s-aw-tree-designed-" + node.item.$designLevel, false);
					}
				}
			}
		}
	},
	_setParentNode: function(parentNode) {
		if (!parentNode.childRoot) {
			parentNode.children = [];
			parentNode.childRoot = document.createElement("ul");
			parentNode.childRoot.className = "s-aw-tree-level";
			parentNode.node.appendChild(parentNode.childRoot);
			if (!parentNode.openerBtn) {
				if (parentNode.title) {
					parentNode.openerBtn = syra_button.add({
						parent: parentNode,
						text: syra_local.aw_tree_collapse,
						iconOnly: true,
						css: "s-aw-tree-item-opener",
						fontIcon: "node_expanded",
						btnclick: _onNodeOpenerClick,
						opened: true,
						tree: this
					});
					parentNode.title.insertBefore(parentNode.openerBtn.link, parentNode.title.firstChild);
				}
			}
			if (parentNode.isRoot) {
				parentNode.childRoot.className += " s-aw-tree-root";
			}
		}
	},
	_createNodeItem: function($designLevel) {
		var itemNode = {
			isTreeNode: true,
			id: syra_site._childPageOffset++
		};
		itemNode.node = syra_button.add({
			parent: this,
			link: document.createElement("li"),
			css: "s-aw-tree-item s-aw-add-item",
			btnclick: _onNodeClick,
			itemNode: itemNode
		}).link;
		syra_item.register(itemNode);
		itemNode.node.syraItem = itemNode.id;
		itemNode.node.syraDragSpot = this.id;

		itemNode.data = document.createElement("div");
		itemNode.data.className = "s-aw-tree-item-data";
		itemNode.node.appendChild(itemNode.data);

		itemNode.title = document.createElement("div");
		itemNode.title.syrainout = this.id;
		itemNode.title.className = "s-aw-tree-item-title s-aw-tree-" + (itemNode.$designLevel = $designLevel);
		itemNode.titleLabel = document.createElement("div");
		itemNode.titleLabel.className = "s-aw-tree-item-text";
		itemNode.title.appendChild(itemNode.titleLabel);
		itemNode.data.appendChild(itemNode.title);
		return itemNode;
	},
	_setTitleNode: function(itemNode, $item, $field, title) {
		var bindTitle = "",
			desc = title;
		if ($item.$bind) {
			bindTitle = this.designer.getBindTitle($item.$bind, $field);
			if (title == "") {
				desc = title = bindTitle;
			} else {
				desc = title + " (" + bindTitle + ")";
			}
		}
		itemNode.titleLabel.textContent = title;
		itemNode.node.title = desc;
	},
	_addFieldType: function(itemNode, $field) {
		itemNode.titleLabel.parentNode.insertBefore(syra_button.add({
			isIndicator: true,
			parent: itemNode,
			iconOnly: true,
			css: "s-aw-tree-field-type",
			fontIcon: syra_fields.getTypeFieldIcon($field.$type)
		}).link, itemNode.titleLabel);
	},
	_clear: function() {
		if (this.tabItem) {
			this.tabItem.body.style.display = "none";
			syra_dom.empty(this.tabItem.body);
		}
		if (this.nodes) {
			for (var ii = 0, jj = this.nodes.length; ii < jj; ii++) {
				var node = this.nodes[ii];
				if (node) {
					if (node.item) {
						node.item.sectionNode = null;
					}
					syra_button.dispose(node.openerBtn);
					syra_site.disposeObject(node);
				}
			}
		}
		this.sectionsNodes = this.fieldsNodes = this.nodes = this.selectedNode = null;
	},
	dispose: function() {
		this._clear();
		syra_site.disposeObject(this);
	}
});