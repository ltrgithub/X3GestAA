"use strict";
var helpers = require('syracuse-core/lib/helpers');

function ItemTree() {}

exports.ItemTree = helpers.defineClass(ItemTree, null, {
	load: function(toolbar, tabItem) {
		this.toolbar = toolbar;
		this.tabItem = tabItem;
		this._bindEvents();
	},
	findField: function($bind) {
		for (var ii = 0, jj = this._nodes.length; ii < jj; ii++) {
			if (this._nodes[ii].$item.$bind == target.$bind) {
				return this._nodes[ii];
			}
		}
	},
	findNode: function(event, id) {
		if (id === undefined) {
			var target = event.target;
			while (target && !target.syraNodeId) {
				target = target.parentNode;
			}
			if (target && target.syraNodeId) {
				id = target.syraNodeId;
			}

		}
		if (id !== undefined) {
			for (var ii = 0, jj = this.nodes.length; ii < jj; ii++) {
				if (this.nodes[ii].node.syraNodeId == id) {
					return this.nodes[ii];
				}
			}
		}
		return null;
	},
	openParentNode: function(node, open) {
		node.children.style.display = open ? "" : "none";
		document.site.toggleClass(node.opener, "s-open", !open);
	},
	onNodeEvent: function(event) {
		var authorPage = document.site.authorPage;
		delete document.site.requestedDDAuthoringItem;
		event.stopPropagation();
		var node = this.findNode(event);
		if (node) {
			if (event.target.className.indexOf("s-aw-tree-item-opener-children") >= 0) {
				this.openParentNode(node, !(node.opener.className.indexOf("s-open") < 0));
			} else {
				//event hidden  if card
				switch (event.type) {
					case "mouseenter":
						if (!node.item.$awAddNewItem) {
							authorPage.toggleOverItem(node.item, true);
							this.toolbar.awPalette.targetPage.scrollToItem(node.item);
						}
						break;
					case "mouseleave":
						if (!node.item.$awAddNewItem) {
							authorPage.toggleOverItem(node.item, false);
						}
						break;
					case "click":
						if (!node.item.$awAddNewItem) {
							if (node.item == this.toolbar.awPalette.awArticle) {
								this.toolbar.awPalette.targetPage.scrollToItem(node.item);
							}
							this.selectNode(node.item, true);
							this._isSelecteDisabled = true;
							authorPage.selectItem(node.item, true);
							this._isSelecteDisabled = false;
						}
						break;
				}
			}
		}
	},
	_bindEvents: function() {
		var self = this;
		if (self.tabItem && self.tabItem.body) {
			$(self.tabItem.body).delegate(".s-aw-content-tree", "mousedow.authoringTree click.authoringTree", function(event) {
				self.onNodeEvent(event);
				return false;
			}).delegate(".s-aw-tree-item-opener-children", "click.authoringTree", function(event) {
				self.onNodeEvent(event);
				return false;
			}).delegate(".s-aw-tree-item-title", "mouseenter.authoringTree mouseleave.authoringTree click.authoringTree", function(event) {
				self.onNodeEvent(event);
				return false;
			});
		}
	},
	selectNode: function(item, select) {
		if (!this._isSelecteDisabled && item && !item.disposed) {
			var node = this.findNode(null, item.id);
			if (node) {
				if (select) {
					if (this.selectedNode && this.selectedNode != node && this.selectedNode.item) {
						document.site.toggleClass(this.selectedNode.title, "s-aw-tree-designed-" + this.selectedNode.item.$authoringLevel, false);
					}
					this.selectedNode = node;
					document.site.toggleClass(node.title, "s-aw-tree-designed-" + node.item.$authoringLevel, true);
					this.toolbar.awPalette.scrollToItem(this.selectedNode.node, $(this.tabItem.body), true);
				} else {
					if (this.selectedNode == node) {
						this.selectedNode = null;
						document.site.toggleClass(node.title, "s-aw-tree-designed-" + node.item.$authoringLevel, false);
					}
				}
			}
		}
	},
	_setParentNode: function(parentNode) {
		if (!parentNode.children) {
			parentNode.children = document.createElement("ul");
			parentNode.children.className = "s-aw-tree-level";
			parentNode.node.appendChild(parentNode.children);
			if (!parentNode.opener) {
				if (parentNode.title) {
					parentNode.opener = document.createElement("a");
					parentNode.opener.className = "s-aw-tree-item-opener";
					parentNode.title.parentNode.insertBefore(parentNode.opener, parentNode.title);
					parentNode.opener.className = "s-aw-tree-item-opener-children";
				}
			}
			if (parentNode.isRoot) {
				parentNode.children.className += " s-aw-tree-root";
			}
		}
	},
	_createNodeItem: function(id, $authoringLevel) {
		var itemNode = {};
		itemNode.node = document.createElement("li");
		itemNode.node.syraNodeId = id;
		itemNode.node.className = "s-aw-tree-item s-aw-add-item";

		itemNode.data = document.createElement("div");
		itemNode.data.className = "s-aw-tree-item-data";
		itemNode.node.appendChild(itemNode.data);

		itemNode.title = document.createElement("div");
		itemNode.title.className = "s-aw-tree-item-title s-aw-tree-" + (itemNode.$authoringLevel = $authoringLevel);
		itemNode.titleText = document.createElement("div");
		itemNode.titleText.className = "s-aw-tree-item-text";
		itemNode.title.appendChild(itemNode.titleText);
		itemNode.data.appendChild(itemNode.title);
		return itemNode;
	},
	_setTitleNode: function(itemNode, $item, $field, title) {
		var bindTitle = "",
			desc = title;
		if ($item.$bind) {
			bindTitle = this.toolbar.awPalette.getBindTitle($item.$bind, $field);
			if (title == "") {
				desc = title = bindTitle;
			} else {
				desc = title + " (" + bindTitle + ")";
			}
		}
		itemNode.titleText.textContent = title;
		itemNode.node.title = desc;
	},
	_addFieldType: function(itemNode, $field) {
		itemNode.type = document.createElement("div");
		itemNode.type.textContent = document.site.getFieldIconType($field.$type);
		itemNode.type.className = "s-aw-tree-field-type";
		itemNode.titleText.parentNode.insertBefore(itemNode.type, itemNode.titleText);
	},
	_clear: function() {
		if (this.tabItem) {
			this.tabItem.body.style.display = "none";
			document.site.emptyDom(this.tabItem.body);
		}
		if (this.nodes) {
			for (var ii = 0, jj = this.nodes.length; ii < jj; ii++) {
				var node = this.nodes[ii];
				if (node) {
					node.item = node.node = node.children = node.data = null;
					node.opener = node.title = node.titleText = null;
				}
			}
		}
		this.nodes = this.selectedNode = null;
	},
	dispose: function() {
		this._clear();
		if (this.tabItem && this.tabItem.body) {
			$(this.tabItem.body).undelegate();
		}
		this.tabItem = this.nodes = this.selectedNode = this.toolbar = null;
	}
});