"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var paletteSettings = require("./setting/paletteSettings");
var palettePrototype = require("./setting/palettePrototype");
var fieldLibrary = require("./field/fieldLibrary");
var historyHelper = require("./historyHelper");
var ToolsBar = require("./aside/toolsBar").ToolsBar;

function ItemPalette(){
}

exports.ItemPalette = helpers.defineClass(ItemPalette, RawPage, {
    notifySteps: function(resetUpdates){
        historyHelper.notifySteps(this.awContext, resetUpdates);
    },
    onChangeSep: function(menuItem){
        historyHelper.onChangeSep(this.awContext, menuItem);
    },
    
    loadBox: function(){
        this.diagnosePage = this.awContext.targetPage;
        this._unregisterResizer = true;
        this.externalAdapter = document.site.externalAdapter;
        this.$prototype = palettePrototype.$prototype;
        this.$autoFetch = false;
        this.$item = paletteSettings.getSettings();
        this.$item.$menus.$isMenusBag = false;
        var keys = Object.keys(this.awContext.localize);
        this.$prototype.$localization = {};
        for (var ii = 0, jj = keys.length; ii < jj; ii++) {
            this.$prototype.$localization[keys[ii].replace("aw_", "@")] = this.awContext.localize[keys[ii]];
        }
        
        this._initializePage();
        
        this.layoutSlot = document.createElement("div");
        this.awContext.authorPage.paletteSlot.appendChild(this.layoutSlot).className = "s-aw-palette-body";
        this.awContext.authorPage._paletteBar.setAttribute("data-s-article", this.id);
        RawPage.prototype.loadBox.call(this, {
            $viewType: "layout",
            $links: {
                $help: document.site.$prototype.$links.$help
            }
        });
        this.awContext.toolsBar = new ToolsBar();
        this.awContext.toolsBar.loadToolbar(this.awContext);
        this.notifySteps()// initialize  
        this.awContext.authorPage.selectItem(this.awContext.targetPage, true);
        this.appendArticleMenus(this.awContext.authorPage._paletteBar);
    },
    appendLinkBox: function($$slot){
    },
    excludeItem: function(removedItem){
        if (removedItem.isMenuItem && this.awContext.targetPage.isDashBoard) {
            this.awContext.targetPage.garbageLinks[removedItem.$bind] = 1;
        }
        var layoutParent = removedItem.layoutParent;
        var excludedFields = (removedItem.$authoringLevel == "field") ? [removedItem] : this.awContext.drawHelper.extractFields(removedItem.layoutContent);
        if (excludedFields) {
            for (var ii = 0, jj = excludedFields.length; ii < jj; ii++) {
                this.awContext.toolsBar.onExcludeField(excludedFields[ii].$item.$bind, false);
            }
        }
        var index = layoutParent.getItemIndex(removedItem, true);
        layoutParent.removeItem(removedItem, true);
        var newItem = layoutParent.items[index];
        if (!newItem) {
            newItem = layoutParent.items[--index];
        }
        newItem = newItem || layoutParent.boxParent;
        switch (layoutParent.$layout.$layoutType) {
            case "row":
                layoutParent.addSpaceBox(index);
                break;
            case "tabs":
                if (layoutParent.items.length == 0) {
                    this.awContext.drawHelper.newConvert(layoutParent, {
                        $layoutType: "stack",
                        $width: "100"
                    });
                }
                break;
        }
        if (this.awContext.treeContent) {
            this.awContext.treeContent.toggle(true);
        }
        return newItem;
    },
    
    onMenuClick: function(menuItem){
        switch (menuItem.$item.$bind) {
            case "$excludeMe":
                this.awContext.authorPage.endTargetPageUpdate(this.excludeItem(this.awContext.awItem), true);
                break;
            case "$addRowBefore":
            case "$addRowAfter":
                var layout = this.awContext.awLayout ? this.awContext.awLayout : (this.awContext.awItem.layoutContent || this.awContext.awItem.layoutParent);
                var newChild = this.awContext.authorPage.addSiblingToLayout(layout, menuItem.$item.$bind == "$addRowBefore" ? "top" : "bottom");
                this.awContext.authorPage.endTargetPageUpdate(newChild, true);
                break;
            case "$previousLayout":
            case "$nextLayout":
            case "$undoAllLayout":
                this.onChangeSep(menuItem);
                return false;
            case "$help":
                return true;
            default:
                if (menuItem.$item.$bind.indexOf("s-layout-type-") >= 0) {
                    var layout = this.awContext.awLayout ? this.awContext.awLayout : this.awContext.awItem.layoutContent;
                    if (this.awContext.awItem.$authoringLevel == "field") {
                        layout = this.awContext.awItem.layoutParent.wrapIntack([this.awContext.awItem], this.awContext.awItem.layoutParent.getItemIndex(this.awContext.awItem, true));
                        layout.removeSpaceBox(true);
                    }
                    var $widths = menuItem.$widths;
                    layout = this.awContext.drawHelper.newConvert(layout, {
                        $layoutType: $widths == "100" ? "stack" : "row",
                        $widths: $widths
                    });
                    this.awContext.authorPage.endTargetPageUpdate(layout.$layout.$layoutType == "stack" ? this.awContext.awItem : layout, true);
                    break;
                }
                this.awContext.awItem.applyDesignMetaData(metaData, true);
                break;
        }
    },
    onWindowResize: function(){
        if (this.layoutSlot && this.awContext && this.awContext.targetPage) {
            var height = $(this.awContext.targetPage.scrollview).height();
            if (height) {
                this.layoutSlot.style.height = height + "px";
                this.awContext.toolsBar.onWindowResize();
                this.resizeDialogPage();
            }
        }
    },
    resizeDialogPage: function(){
        if (this.awContext.targetPage.dialogWrapper) {
            var width = this.awContext.targetPage.dialogWrapper.$$dialogSlot.width();
            if (width) {
                this.awContext.targetPage.scrollview.style.width = (width - (this.layoutSlot.offsetWidth + this.awContext.toolsBar.layoutSlot.offsetWidth)) + "px";
            }
        }
    },
    showSettingPanel: function(){
        var selectedPanel, hideStructure;
        var paletteId = this.awContext.awItem.isMenuItem ? "menu" : this.awContext.awItem.$authoringLevel;
        for (var ii = 0, jj = this.layoutContent.items.length; ii < jj; ii++) {
            var panel = this.layoutContent.items[ii];
            panel.setState({
                $isHidden: true
            });
            if (panel.$item.$paletteId == paletteId) {
                selectedPanel = panel;
            }
        }
        if (selectedPanel) {
            this.applyChange({
                $isHidden: false,
                $title: "",
                $isMaximizable: false,
                $isBoxCollapsable: false,
                $isTitleHidden: false,
                $fieldsIsTitleHidden: false,
                $labelAlignment: this.awContext.targetPage.$isEditMode ? "t" : "ll"
            });
            this.selectedPanel = selectedPanel;
            var title = this.awContext.awItem.getTitle(false);
            if (title == "" && this.awContext.awItem.$authoringLevel == "field") {
                title = this.awContext.awItem.$item.$bind;
            }
            this.selectedPanel.setDescription(title);
            
            var $labelAlignment;
            if (this.awContext.awItem.$item.$isTopLabelAlignment || this.awContext.awItem.$item.$fieldsIsTopLabelAlignment) {
                $labelAlignment = "t";
            }
            else {
                if (this.awContext.awItem.$item.$isRightTextLabelAlignment || this.awContext.awItem.$item.$fieldsIsRightTextLabelAlignment) {
                    $labelAlignment = "lr";
                }
                else {
                    $labelAlignment = "ll";
                }
            }
            this.applyChange({
                $title: title,
                $isMaximizable: this.awContext.awItem.$item.$isMaximizable,
                $isBoxCollapsable: this.awContext.awItem.$item.$isBoxCollapsable,
                $isTitleHidden: this.awContext.awItem.$item.$isTitleHidden,
                $fieldsIsTitleHidden: this.awContext.awItem.$item.$fieldsIsTitleHidden,
                $labelAlignment: $labelAlignment,
                $boxTabChoice: (this.awContext.awItem.isTabLayout) ? "tabs" : "stack",
                $layoutTabChoice: (this.awContext.awItem.$item.$layout && this.awContext.awItem.$item.$layout.$layoutType == "tabs") ? "tabs" : "stack"
            });
            this.selectedPanel.setState({
                $isHidden: false
            })
            
            if (this._fieldWidget) {
                this._fieldWidget.designedField = null;
                this.removeItem(this._fieldWidget, true);
                this._fieldWidget = null;
            }
            if (this.awContext.awItem.$authoringLevel == "field") {
                if (this.awContext.awItem.$field) {
                    if (this.awContext.awItem.$field.$type == "application/x-boolean") {
                        var items = this.page.idMap["s-aw-palette-field"].layoutContent.items;
                        for (var ii = 0; ii < jj; ii++) {
                            if (items[ii].$item.$isLabelSection) {
                                items[ii].setState({
                                    $isHidden: true
                                });
                                break;
                            }
                        }
                    }
                    if (this._fieldWidget = fieldLibrary.getAuthoringFieldWidget(this.awContext.awItem)) {
                        this._fieldWidget.layoutSlot = this.idMap["s-aw-field-widget"].$$body[0];
                        this.page.initializeNewItem(this._fieldWidget, {}, this);
                        this._fieldWidget.designedField = this.awContext.awItem;
                        this._fieldWidget.$skin = "s-aw-h2";
                        this._fieldWidget.loadBox(this.awContext.awItem.$item);
                    }
                }
                layout = this.awContext.awItem.layoutParent;
                if (layout && layout.$layout.$layoutType == "row") {
                    hideStructure = true;
                }
            }
            var layout = this.awContext.awLayout || this.awContext.awItem.layoutContent;
            var count = 1;
            if (layout && layout.$item) {
                count = (layout.$item.$widths || "100").split(",").length;
            }
            var metadata = {
                $links: {}
            };
            for (var ii = 0; ii <= 5; ii++) {
                metadata.$links["s-layout-type-" + ii] = {
                    $style: count == ii ? "selected" : null
                };
            }
            metadata.$properties = {
                $layoutTabChoice: {
                    $isDisabled: (count != 1),
                    $title: this.awContext.awItem.$authoringLevel == "article" ? this.awContext.localize.aw_showSectionsAs : this.awContext.localize.aw_showBlocksAs
                }
            };
            metadata.$properties.$isTitleHidden = {
                $isHidden: this.awContext.awItem.isTabLayout == true
            };
            this.applyChange(metadata);
            var sections = this.selectedPanel.layoutContent.items[0].layoutContent.items;
            var isHidden, section;
            if (sections[0].$bind == "$excludeMe") {
                sections[0].layoutSlot.style.textAlign = "center";
            }
            for (var ii = 0, jj = sections.length; ii < jj; ii++) {
                section = sections[ii];
                isHidden = this.awContext.awLayout == null ? false : true;
                if (section.id == "s-aw-field-widget" && !this._fieldWidget) {
                    isHidden = true;
                }
                if (section.$item.$isRow) {
                    isHidden = this.awContext.awLayout == null ? true : false;
                }
                else {
                    if (hideStructure && section.$item.$isStructure) {
                        isHidden = true;
                    }
                }
                section.setState({
                    $isHidden: isHidden
                });
            }
        }
    },
    notifyDataChange: function(field, value){
        var fieldArticle = field.getArticle();
        if (fieldArticle.designedField) {
            var metaData = {};
            metaData[field.$item.$bind] = value;
            fieldArticle.designedField.applyDesignMetaData(metaData, true);
            fieldArticle.applyChange(metaData);
            if (fieldArticle.onNotifyAuthoringChange) {
                fieldArticle.onNotifyAuthoringChange(field, value, metaData);
            }
            this.awContext.authorPage.notifyUpdate();
        }
        else {
            switch (field.$item.$bind) {
                case "$boxTabChoice":
                    if (this.awContext.awItem.layoutParent.$layoutType != value) {
                        this.awContext.authorPage.switchTabPanel(this.awContext, value);
                        this.awContext.authorPage.endTargetPageUpdate(this.awContext.awItem, true);
                    }
                    break;
                case "$layoutTabChoice":
                    var children = this.awContext.drawHelper.getItemsFromLayout(this.awContext.awItem.isLayout ? this.awContext.awItem : this.awContext.awItem.layoutContent);
                    if (children.length > 0 && children[0].$authoringLevel == "field") {
                        break;
                    }
                    this.awContext.drawHelper.newConvert(this.awContext.awItem.layoutContent, {
                        $layoutType: (value == "tabs") ? "tabs" : "stack"
                    });
                    var children = this.awContext.drawHelper.getItemsFromLayout(this.awContext.awItem.layoutContent);
                    for (var ii = 0, jj = children.length; ii < jj; ii++) {
                        if (!children[ii].isSpaceBox) {
                            this.awContext.awItem.layoutContent.loadChildItems([children[ii]]);
                        }
                    }
                    var items = [];
                    for (var ii = 0, jj = this.awContext.awItem.layoutContent.items.length; ii < jj; ii++) {
                        if (!this.awContext.awItem.layoutContent.items[ii].isSection) {
                            items.push(this.awContext.awItem.layoutContent.items[ii]);
                        }
                    }
                    for (var ii = 0, jj = items.length; ii < jj; ii++) {
                        this.awContext.awItem.layoutContent.removeItem(items[ii], true);
                    }
                    this.awContext.authorPage.endTargetPageUpdate(this.awContext.awItem, true);
                    break;
                case "$viewType":
                    this.toggleViewType(value);
                    break;
                case "$labelAlignment":
                    var metaData = {};
                    if (this.awContext.awItem.$authoringLevel == "field") {
                        metaData.$isTopLabelAlignment = (value == "t");
                        if (!metaData.$isTopLabelAlignment) {
                            metaData.$isRightTextLabelAlignment = (value == "lr");
                        }
                        this.awContext.awItem.applyDesignMetaData(metaData, true);
                    }
                    else {
                        if (metaData.$fieldsIsTopLabelAlignment = (value == "t")) {
                            this.awContext.authorPage._notifyChildFields(this.awContext.awItem, true, "$isTopLabelAlignment");
                        }
                        else {
                            this.awContext.authorPage._notifyChildFields(this.awContext.awItem, false, "$isTopLabelAlignment");
                            this.awContext.authorPage._notifyChildFields(this.awContext.awItem, metaData.$fieldsIsRightTextLabelAlignment = (value == "lr"), "$isRightTextLabelAlignment");
                        }
                        this.awContext.authorPage._notifyChildBox(this.awContext.awItem, metaData);
                    }
                    this.awContext.authorPage.notifyUpdate();
                    break;
                default:
                    var metaData = {};
                    metaData[field.$item.$bind] = value;
                    if (this.awContext.awItem.$authoringLevel == "field") {
                        this.awContext.awItem.applyDesignMetaData(metaData, true);
                    }
                    else {
                        if (field.$item.$bind.indexOf("$fields") == 0) {
                            var fieldBind = field.$item.$bind.slice("$fields".length);
                            fieldBind = fieldBind.slice(0, 1).toLowerCase() + fieldBind.slice(1);
                            this.awContext.authorPage._notifyChildFields(this.awContext.awItem, value, "$" + fieldBind);
                        }
                        this.awContext.awItem.applyDesignMetaData(metaData, true);
                    }
                    this.awContext.authorPage.notifyUpdate();
                    this.applyChange(metaData);
                    break;
            }
        }
    },
    applyChange: function(newData){
        if (newData) {
            newData.$properties = newData.$properties || {};
            if (newData.$isHidden !== undefined) {
                var keys = ["$title", "$isMaximizable", "$isBoxCollapsable", "$isTitleHidden", "$fieldsIsTitleHidden", "$labelAlignment"];
                for (var ii = 0, jj = keys.length; ii < jj; ii++) {
                    newData.$properties[keys[ii]] = {
                        $isDisabled: newData.$isHidden
                    };
                }
                this.awContext.toolsBar.applyChange(newData);
            }
            if (newData.$fieldsIsTitleHidden !== undefined) {
                (newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$fieldsIsTitleHidden;
            }
            if (newData.$isTitleHidden !== undefined) {
                newData.$properties.$title = newData.$properties.$title || {};
                newData.$properties.$title.$isDisabled = newData.$isTitleHidden;
                if (this.awContext.awItem.$authoringLevel == "field") {
                    (newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$isTitleHidden;
                }
                else {
                    newData.$properties.$title = newData.$properties.$isBoxCollapsable = newData.$properties.$isMaximizable = {
                        $isDisabled: newData.$isTitleHidden
                    };
                }
            }
        }
        RawPage.prototype.applyChange.call(this, newData);
    },
    toggleViewType: function($viewType){
        this.awContext.$viewType = $viewType;
        if (this.awContext.isOnPreviewMode && $viewType != "preview") {
            this.awContext.isOnPreviewMode = false;
            this.awContext.authorPage.paletteSlot.style.display = "";
            this.awContext.toolsBar.layoutSlot.style.display = "";
            this.awContext.authorPage.toggleItemAuthoring(this.awContext.targetPage, true);
        }
        switch ($viewType) {
            case "preview":
                if (!this.awContext.isOnPreviewMode) {
                    if (this.awContext.$isLightMode) {
                        this.awContext.$isLightMode = false
                        this.awContext.authorPage.toggleItemAuthoring(this.awContext.targetPage, true);
                    }
                    this.awContext.isOnPreviewMode = true;
                    this.awContext.authorPage.paletteSlot.style.display = "none";
                    this.awContext.toolsBar.layoutSlot.style.display = "none";
                }
                break;
            case "structure":
                if (!this.awContext.$isLightMode) {
                    this.awContext.$isLightMode = true;
                }
                break;
            case "layout":
                if (this.awContext.$isLightMode) {
                    this.awContext.$isLightMode = false
                }
                break;
        }
        this.awContext.authorPage.toggleItemAuthoring(this.awContext.targetPage, !this.awContext.isOnPreviewMode);
        this.awContext.targetPage.onWindowResize();
    },
    dispose: function(){
        if (this._fieldWidget) {
            this._fieldWidget = this._fieldWidget.designedField = null;
        }
        if (this.awContext) {
            if (this.awContext.$viewType != "layout") {
                this.toggleViewType("layout");
            }
            if (this.awContext.toolsBar) {
                document.controller.disposeObject(this.awContext.toolsBar);
                this.awContext.toolsBar = null;
            }
        }
        this.awContext = this.diagnosePage = this.$item = this.externalAdapter = this.$prototype = this.layoutSlot = null;
        RawPage.prototype.dispose.call(this);
    }
});
