"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var paletteSettings = require("./setting/paletteSettings");
var palettePrototype = require("./setting/palettePrototype");
var fieldLibrary = require("./field/fieldLibrary");
var patternFactory = require("syracuse-ui/lib/authoring/patterns/patternFactory");


function ItemPalette(){
}

exports.ItemPalette = helpers.defineClass(ItemPalette, RawPage, {
    _fillModelsMenus: function(){
        var $awModels = this.findItemSetting("s-awModels", this.$item.$menus.$layout);
        var $actions = this.$prototype.$actions = this.$prototype.$actions || {};
        var $keys = Object.keys(patternFactory.patterns);
        var $row;
        $awModels.$layout = {
            $items: [{
                $layoutType: "row",
                $items: [{
                    $icon: null,
                    "$bind": "pattern-headerTabs"
                }, {
                    $icon: null,
                    "$bind": "$defaultLayout"
                }]
            }]
        };
        
        for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
            var $key = $keys[ii];
            if (ii % 2 == 0) {
                $row = {
                    $layoutType: "row",
                    $items: []
                };
                $awModels.$layout.$items.push($row);
            }
            $row.$items.push({
                $bind: $key
            });
            var $layout = patternFactory.patterns[$key];
            $layout.$title = this.localize["aw_title_" + $key.replace("-", "_", "g")];
            $actions[$key] = {
                $title: $layout.$title || this.localize.aw_layoutComposite
            };
        }
    },
    _fillAddFieldsMenus: function(){
        var $awAddField = this.findItemSetting("$awAddField", this.$item.$menus.$layout);
        var $properties = this.authorPage.targetPage.$prototype.$properties;
        var binds = Object.keys($properties);
        $awAddField.$layout.$items = [{
            $layoutType: "stack",
            $css: "s-aw-insert-col",
            "$items": []
        }, {
            $layoutType: "stack",
            $css: "s-aw-insert-col",
            "$items": []
        }, {
            $layoutType: "stack",
            $css: "s-aw-insert-col",
            "$items": []
        }];
        var $actions = this.$prototype.$actions = this.$prototype.$actions || {};
        for (var ii = 0, jj = binds.length, kk = 0; ii < jj; ii++) {
            var bind = binds[ii];
            var $field = $properties[bind];
            if ($field && $field.$type) {
                var actionId = "$fieldLink" + bind;
                $actions[actionId] = {
                    $title: $field.$title ? this.authorPage.targetPage.getLocalizeText($field.$title) : this.localize.aw_defaultFieldTitle
                };
                $awAddField.$layout.$items[kk++].$items.push({
                    $bind: actionId,
                    $fieldBind: bind,
                    $value: $field.$type.replace("application/x-", "").replace("/", "-")
                });
                if (kk == ($awAddField.$layout.$items.length)) {
                    kk = 0;
                }
            }
        }
    },
    _refreshStepLinks: function(){
        var metadata;
        if (this.updatedSteps.length > 1) {
            metadata = {
                $links: {
                    $previousLayout: {
                        $title: this.localize.aw_previousLayoutOn.replace("{0}", this._currentUpdtateStep).replace("{1}", this.updatedSteps.length),
                        $isDisabled: this._currentUpdtateStep == 0
                    },
                    $undoAllLayout: {
                        $isDisabled: false
                    }
                }
            };
            if (this._currentUpdtateStep == this.updatedSteps.length - 1) {
                metadata.$links.$nextLayout = {
                    $title: this.localize.aw_nextLayout,
                    $isDisabled: true
                };
            }
            else {
                metadata.$links.$nextLayout = {
                    $title: this.localize.aw_nextLayoutOn.replace("{0}", this._currentUpdtateStep + 1).replace("{1}", this.updatedSteps.length),
                    $isDisabled: false
                };
            }
        }
        else {
            metadata = {
                $links: {
                    $previousLayout: {
                        $title: this.localize.aw_previousLayout,
                        $isDisabled: true
                    },
                    $nextLayout: {
                        $title: this.localize.aw_nextLayout,
                        $isDisabled: true
                    },
                    $undoAllLayout: {
                        $isDisabled: true
                    }
                }
            };
        }
        this.applyChange(metadata);
    },
    _onChangeSep: function(menuItem){
        var self = this;
        var $item;
        switch (menuItem.$item.$bind) {
            case "$previousLayout":
                self._currentUpdtateStep--;
                self.onEndChangeStep(menuItem, $item);
                break;
            case "$nextLayout":
                self._currentUpdtateStep++;
                self.onEndChangeStep(menuItem, $item);
                break;
            case "$undoAllLayout":
                document.site.showMessage({
                    $title: self.localize.aw_updateMessageTitle,
                    $message: self.localize.aw_confirmUndoAll,
                    $type: "question",
                    $buttons: "yesno",
                    callback: function(response){
                        if (response.$id == "yes") {
                            self._currentUpdtateStep = 0;
                            self.notifySteps(true);
                            self.onEndChangeStep(menuItem, $item);
                        }
                    }
                });
                break;
            case "$defaultLayout":
                $item = self.authorPage.$defaultItem;
                self.authorPage.notifyUpdate(true);
                self.onEndChangeStep(menuItem, $item);
                break;
            default:
                if (menuItem.$item.$bind.indexOf("pattern") == 0) {
                    if (self.authorPage.awItem.$authoringLevel == "section" || self.authorPage.awItem.$authoringLevel == "block") {
                        var pattern = patternFactory.patterns[menuItem.$item.$bind];
                        if (pattern.isBoxOnly) {
                            var children = self.authorPage.getItemsFromLayout(self.authorPage.awItem.layoutContent);
                            if (children.length && children[0].$authoringLevel == "field") {
                                return;
                            }
                        }
                        var $result = patternFactory.build(menuItem.$item.$bind, self.authorPage.targetPage.$prototype, self.authorPage.awItem.$item);
                        if (!$result && !$result.$layout) {
                            return;
                        }
                        self.authorPage.awItem.$item.$layout = $result.$layout;
                        $item = self.authorPage.targetPage.$item;
                    }
                    else {
                        $item = patternFactory.build(menuItem.$item.$bind, self.authorPage.targetPage.$prototype, self.authorPage.$sourceItem);
                    }
                    self.authorPage.notifyUpdate(true);
                }
                self.onEndChangeStep(menuItem, $item);
                break;
        }
    },
    onEndChangeStep: function(menuItem, $item){
        var $bind = this.authorPage.awItem.$item.$bind;
        this.authorPage.targetPage.reloadLayout(helpers.object.clone($item || this.updatedSteps[this._currentUpdtateStep], true));
        this._refreshStepLinks();
        var selectItem;
        if ($bind) {
            var bounds = this.authorPage.targetPage.boundFields[$bind];
            selectItem = bounds ? bounds[0] : null;
        }
        this.authorPage.selectItem(selectItem || this.authorPage.targetPage, true);
    },
    notifySteps: function(resetUpdates){
        if (!resetUpdates && this.authorPage.isUpdated) {
            if (this._currentUpdtateStep != this.updatedSteps.length - 1) {
                this.notifySteps(true);
            }
            this.updatedSteps.push(helpers.object.clone(this.authorPage.targetPage.$item, true));
            this._currentUpdtateStep = this.updatedSteps.length - 1;
        }
        else {
            (this.updatedSteps = []).push(this.authorPage.$sourceItem);
            this._currentUpdtateStep = 0;
        }
        this._refreshStepLinks();
    },
    loadBox: function(){
        this.authorPage = document.site.authorPage;
        this.localize = this.authorPage.localize;
        this.externalAdapter = document.site.externalAdapter;
        this.$prototype = palettePrototype.$prototype;
        this.$autoFetch = false;
        this.$item = paletteSettings.$item;
        this.$item.$menus.$isMenusBag = false;
        var keys = Object.keys(this.localize);
        this.$prototype.$localization = {};
        for (var ii = 0, jj = keys.length; ii < jj; ii++) {
            this.$prototype.$localization[keys[ii].replace("aw_", "@")] = this.localize[keys[ii]];
        }
        
        this._initializePage();
        
        this.layoutSlot = document.createElement("div");
        this.authorPage.paletteSlot.appendChild(this.layoutSlot).className = "s-aw-palette-body";
        
        this.authorPage._paletteBar.setAttribute("data-s-article", this.id);
        this._fillAddFieldsMenus();
        this._fillModelsMenus();
        RawPage.prototype.loadBox.call(this, {
            $viewType: "layout",
            $links: {
                $help: document.site.$prototype.$links.$help
            }
        });
        this.notifySteps()// initialize  
        this.authorPage.selectItem(this.authorPage.targetPage, true);
        this.appendArticleMenus(this.authorPage._paletteBar);
    },
    appendLinkBox: function($$slot){
    },
    onMenuClick: function(menuItem){
        var awItem = this.authorPage.awItem;
        switch (menuItem.$item.$bind) {
            case "$addRowBefore":
            case "$addRowAfter":
                var layout = this.authorPage.awLayout ? this.authorPage.awLayout : (awItem.layoutContent || awItem.layoutParent);
                var $layout = {
                    $layoutType: "row",
                    $widths: layout.$layout.$widths || "33,33,33"
                };
                this.authorPage.notifyUpdate();
                break;
            case "$addSection":
            case "$addBlock":
                var newChild = this.authorPage.addNewItem(awItem, menuItem.$item.$bind.replace("$add", "").toLowerCase());
                this.authorPage.validateTargetPageLayout();
                this.authorPage.selectItem(newChild, true, true);
                this.authorPage.notifyUpdate();
                return false;
            case "$previousLayout":
            case "$nextLayout":
            case "$undoAllLayout":
            case "$defaultLayout":
            case "pattern-headerTabs":
                this._onChangeSep(menuItem);
                return false;
            case "$help":
                return true;
            default:
                if (menuItem.$item.$fieldBind) {
                    var newChild = this.authorPage.addNewItem(awItem, "field", menuItem.$item.$fieldBind);
                    var layout = newChild.layoutParent || newChild.layoutContent;
                    if (layout) {
                        layout.page.layoutValidator.validate(layout);
                    }
                    this.authorPage.selectItem(newChild, true, true);
                    this.authorPage.notifyUpdate();
                }
                else {
                    if (menuItem.$item.$bind.indexOf("s-layout-type-") >= 0) {
                        var layout = this.authorPage.awLayout ? this.authorPage.awLayout : awItem.layoutContent;
                        if (awItem.$authoringLevel == "field") {
                            layout = awItem.layoutParent.wrapIntack([awItem], awItem.layoutParent.getItemIndex(awItem, true));
                        }
                        this.authorPage.newConvert(layout, {
                            $layoutType: menuItem.$widths == "100" ? "stack" : "row",
                            $widths: menuItem.$widths
                        });
                        this.authorPage.validateTargetPageLayout(awItem.layoutParent);
                        this.authorPage.selectItem(this.authorPage.awLayout || awItem, true, true);
                        this.authorPage.notifyUpdate();
                        break;
                    }
                    if (menuItem.$item.$bind.indexOf("pattern") == 0) {
                        this._onChangeSep(menuItem);
                        break;
                    }
                    awItem.applyDesignMetaData(metaData, true);
                }
                break;
        }
    },
    onWindowResize: function(){
        if (this.layoutSlot) {
            var height = document.site.$$body.height();
            if (height) {
                this.layoutSlot.style.height = height + "px";
            }
        }
    },
    _setLabelAlignement: function($item){
        var $labelAlignment;
        if ($item.$isTopLabelAlignment || $item.$fieldsIsTopLabelAlignment) {
            $labelAlignment = "t";
        }
        else {
            $labelAlignment = ($item.$isRightTextLabelAlignment || $item.$fieldsIsRightTextLabelAlignment) ? "lr" : "ll";
        }
        return $labelAlignment;
    },
    showSettingPanel: function(){
        var selectedPanel;
        var awItem = this.authorPage.awItem;
        var awLayout = this.authorPage.awLayout;
        for (var ii = 0, jj = this.layoutContent.items.length; ii < jj; ii++) {
            var panel = this.layoutContent.items[ii];
            panel.setState({
                $isExcluded: true
            });
            if (panel.$item.$paletteId == awItem.$authoringLevel) {
                selectedPanel = panel;
            }
        }
        if (selectedPanel) {
            this.applyChange({
                $isExcluded: false,
                $title: "",
                $isMaximizable: false,
                $isBoxCollapsable: false,
                $isTitleHidden: false,
                $fieldsIsTitleHidden: false,
                $labelAlignment: this.authorPage.targetPage.$isEditMode ? "t" : "ll"
            });
            this.selectedPanel = selectedPanel;
            var title = awItem.getTitle();
            this.selectedPanel.setDescription(title);
            this.applyChange({
                $isExcluded: awItem.$item.$isExcluded,
                $title: title,
                $isMaximizable: awItem.$item.$isMaximizable,
                $isBoxCollapsable: awItem.$item.$isBoxCollapsable,
                $isTitleHidden: awItem.$item.$isTitleHidden,
                $fieldsIsTitleHidden: awItem.$item.$fieldsIsTitleHidden,
                $labelAlignment: this._setLabelAlignement(awItem.$item),
                $layoutTabChoice: (awItem.$item.$layout && awItem.$item.$layout.$layoutType == "tabs") ? "tabs" : "stack"
            });
            this.selectedPanel.setState({
                $isExcluded: false
            })
            var block = this.idMap["s-aw-field-widget"];
            if (this._fieldWidget) {
                block.setState({
                    $isExcluded: true
                });
                this._fieldWidget.designedField = null;
                this.removeItem(this._fieldWidget, true);
                this._fieldWidget = null;
            }
            
            if (awItem.$authoringLevel == "field") {
                if (this._fieldWidget = fieldLibrary.getAuthoringFieldWidget(awItem)) {
                    this._fieldWidget.layoutSlot = block.$$body[0];
                    block.setState({
                        $isExcluded: false
                    });
                    this.page.initializeNewItem(this._fieldWidget, {}, this);
                    this._fieldWidget.designedField = awItem;
                    this._fieldWidget.$skin = "s-aw-h2";
                    this._fieldWidget.loadBox(awItem.$item);
                }
                layout = awItem.layoutParent;
            }
            var layout = awLayout || awItem.layoutContent;
            var count = 1;
            if (layout && layout.$item) {
                count = (layout.$item.$widths || "100").split(",").length;
            }
            var metadata = {
                $links: {}
            };
            for (var ii = 0; ii <= 5; ii++) {
                metadata.$links["s-layout-type-" + ii] = {
                    $style: count == ii ? "selected" : null
                };
            }
            metadata.$properties = {
                $layoutTabChoice: {
                    $isDisabled: (count != 1)
                }
            };
            this.applyChange(metadata);
            this.idMap["s-aw-add-rows-" + awItem.$authoringLevel].setState({
                $isExcluded: awLayout == null
            });
        }
    },
    toggleMenuBarAuthoringMode: function(menuBar, show){
        if (show) {
            menuBar._slot.style.display = "";
            menuBar._slot.style.width = "auto";
            menuBar.pickerBar.style.display = "none";
            menuBar._header.style.visibility = "hidden";
        }
        else {
            menuBar._slot.style.display = "none";
            menuBar._slot.style.width = "";
            menuBar.pickerBar.style.display = "";
            menuBar._header.style.visibility = "";
        }
    },
    _toggleViewType: function($viewType){
        var targetPage = this.authorPage.targetPage;
        if ($viewType == "menus") {
            targetPage.dataSlot.style.display = "none";
            this.toggleMenuBarAuthoringMode(targetPage.menuBar, true);
        }
        else {
            targetPage.dataSlot.style.display = "";
            this.toggleMenuBarAuthoringMode(targetPage.menuBar, false);
        }
        this.authorPage.treeContent.toggle($viewType == "content");
        switch ($viewType) {
            case "menus":
                this.authorPage.treeContent.toggle(false);
                break;
            case "structure":
                if (!this.authorPage.$isLightMode) {
                    this.authorPage.$isLightMode = true;
                    this.authorPage.toggleItemAuthoring(targetPage, true);
                }
                break;
            case "layout":
                if ($viewType == "layout" && this.authorPage.$isLightMode) {
                    this.authorPage.$isLightMode = false
                    this.authorPage.toggleItemAuthoring(targetPage, true);
                }
                break;
        }
    },
    notifyDataChange: function(field, value){
        var awItem = this.authorPage.awItem;
        var fieldArticle = field.getArticle();
        if (fieldArticle.designedField) {
            var metaData = {};
            metaData[field.$item.$bind] = value;
            fieldArticle.designedField.applyDesignMetaData(metaData, true);
            fieldArticle.applyChange(metaData);
            if (fieldArticle.onNotifyAuthoringChange) {
                fieldArticle.onNotifyAuthoringChange(field, value, metaData);
            }
            this.authorPage.notifyUpdate();
        }
        else {
            switch (field.$item.$bind) {
                case "$layoutTabChoice":
                    var children = this.authorPage.getItemsFromLayout(awItem.isLayout ? awItem : awItem.layoutContent);
                    if (children.length > 0 && children[0].$authoringLevel == "field") {
                        break;
                    }
                    this.authorPage.newConvert(awItem.layoutContent, {
                        $layoutType: (value == "tabs") ? "tabs" : "stack"
                    });
                    this.authorPage.validateTargetPageLayout(awItem.layoutParent);
                    this.authorPage.selectItem(awItem, true, true);
                    this.authorPage.notifyUpdate();
                    break;
                case "$viewType":
                    this._toggleViewType(value);
                    break;
                case "$labelAlignment":
                    var metaData = {};
                    if (awItem.$authoringLevel == "field") {
                        metaData.$isTopLabelAlignment = (value == "t");
                        if (!metaData.$isTopLabelAlignment) {
                            metaData.$isRightTextLabelAlignment = (value == "lr");
                        }
                        awItem.applyDesignMetaData(metaData, true);
                    }
                    else {
                        if (metaData.$fieldsIsTopLabelAlignment = (value == "t")) {
                            this.authorPage._notifyChildFields(awItem, true, "$isTopLabelAlignment");
                        }
                        else {
                            this.authorPage._notifyChildFields(awItem, false, "$isTopLabelAlignment");
                            this.authorPage._notifyChildFields(awItem, metaData.$fieldsIsRightTextLabelAlignment = (value == "lr"), "$isRightTextLabelAlignment");
                        }
                        this.authorPage._notifyChildBox(awItem, metaData);
                    }
                    this.authorPage.notifyUpdate();
                    break;
                default:
                    var metaData = {};
                    metaData[field.$item.$bind] = value;
                    if (awItem.$authoringLevel == "field") {
                        awItem.applyDesignMetaData(metaData, true);
                    }
                    else {
                        if (field.$item.$bind.indexOf("$fields") == 0) {
                            var fieldBind = field.$item.$bind.slice("$fields".length);
                            fieldBind = fieldBind.slice(0, 1).toLowerCase() + fieldBind.slice(1);
                            this.authorPage._notifyChildFields(awItem, value, "$" + fieldBind);
                        }
                        awItem.applyDesignMetaData(metaData, true);
                    }
                    if (this.authorPage.treeContent && field.$item.$bind == "$isExcluded") {
                        this.authorPage.treeContent.onItemHide(awItem, value);
                    }
                    this.authorPage.notifyUpdate();
                    this.applyChange(metaData);
                    break;
            }
        }
    },
    applyChange: function(newData){
        if (newData) {
            newData.$properties = newData.$properties || {};
            if (newData.$isExcluded !== undefined) {
                var keys = ["$title", "$isMaximizable", "$isBoxCollapsable", "$isTitleHidden", "$fieldsIsTitleHidden", "$labelAlignment"];
                for (var ii = 0, jj = keys.length; ii < jj; ii++) {
                    newData.$properties[keys[ii]] = {
                        $isDisabled: newData.$isExcluded
                    };
                }
                keys = ["$addBlock", "$addSection", "$addField"];
                for (var ii = 0, jj = keys.length; ii < jj; ii++) {
                    if (this.menuItems[keys[ii]]) {
                        this.menuItems[keys[ii]][0].setMenu({
                            $isDisabled: newData.$isExcluded
                        });
                    }
                }
            }
            if (newData.$fieldsIsTitleHidden !== undefined) {
                (newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$fieldsIsTitleHidden;
            }
            if (newData.$isTitleHidden !== undefined) {
                newData.$properties.$title = newData.$properties.$title || {};
                newData.$properties.$title.$isDisabled = newData.$isTitleHidden || newData.$isExcluded;
                if (this.authorPage.awItem.$authoringLevel == "field") {
                    (newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$isTitleHidden;
                }
                else {
                    newData.$properties.$title = newData.$properties.$isBoxCollapsable = newData.$properties.$isMaximizable = {
                        $isDisabled: newData.$isTitleHidden
                    };
                }
            }
        }
        RawPage.prototype.applyChange.call(this, newData);
    },
    dispose: function(){
        if (this._fieldWidget) {
            this._fieldWidget = this._fieldWidget.designedField = null;
        }
        this.$item = this.authorPage = this.localize = this.externalAdapter = this.$prototype = this.layoutSlot = null;
        RawPage.prototype.dispose.call(this);
    }
});
