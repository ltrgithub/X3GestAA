"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;

var TreesBar = require("syracuse-ui/lib/authoring/desktopPage/tree/treesBar").TreesBar;
var Trees = require("syracuse-ui/lib/authoring/desktopPage/tree/trees").Trees;
var designProperties = require("syracuse-ui/lib/authoring/desktopPage/designProperties");
var RowResizer = require("syracuse-ui/lib/authoring/tools/rowResizer").RowResizer;
var DesignerFieldAddins = require("syracuse-ui/lib/authoring/fieldAddins/designerFieldAddins").DesignerFieldAddins;
var UISwitchTool = require("syracuse-ui/lib/authoring/tools/uiSwitchTool").UISwitchTool;
var ViewsTool = require("syracuse-ui/lib/authoring/tools/viewsTool").ViewsTool;
var LocalizationTool = require("syracuse-ui/lib/authoring/tools/localizationTool").LocalizationTool;
var LabelTool = require("syracuse-ui/lib/authoring/tools/labelTool").LabelTool;
var DesignDDAgent = require("syracuse-ui/lib/authoring/tools/designDDAgent").DesignDDAgent;

function DesktopPageDesigner() {}

exports.DesktopPageDesigner = helpers.defineClass(DesktopPageDesigner, Designer, {
	onEndHistoryChangeStep: function(itemToSelect) {
		if (this.trees) {
			this.trees.fill();
		}
		this.selectItem(itemToSelect, true);
	},
	onBeforeSiteResize: function(site) {
		var newHeight = $(this.layoutSlot).outerHeight(true);
		site.body.style.height = (site.$$layoutSlot.height() - newHeight) + "px";
	},

	endTargetPageUpdate: function(selectedItem, isStructureUpdated) {
		this.awArticle.page.layoutValidator.validate(this.awArticle.page.layoutContent, true);
		if (isStructureUpdated && this.trees) {
			this.trees.fill();
		}
		selectedItem = selectedItem || this.awItem;
		this.selectItem(selectedItem, true, true);
		if (selectedItem && selectedItem.$designLevel == "field" && selectedItem.boxParent) {
			selectedItem.boxParent.validateFieldVisibility();
			this.uiSwitchTool.toggleUIDesign(this.awArticle, true);
		}
		this.historyTool.notifyUpdate();
		if (this.designerWorkingCopy) {
			this.designerWorkingCopy.temporalySave();
		}
	},
	initializePageDesigner: function() {
		document.site.header.style.display = "none";
		document.site.ddManager.togglePageObserver(this, true);
		this.$prototype = {
			$properties: {
				$isMaximizable: {
					$type: "application/x-boolean",
					$title: this.localize.aw_isMaximizable
				},
				$isBoxCollapsable: {
					$type: "application/x-boolean",
					$title: this.localize.aw_isBoxCollapsable
				},
				$isAdvanced: {
					$type: "application/x-boolean",
					$title: this.localize.aw_isAdvanced
				},

				$rowAlign: {
					$type: "application/x-choice",
					$title: this.localize.aw_rowAlign,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "top",
							$title: this.localize.aw_rowAlignTop
						}, {
							$value: "bottom",
							$title: this.localize.aw_rowAlignBottom
						}]
					}
				}
			}
		};
		this.panels = {};
	},
	loadBox: function(designedPage) {
		this.initializePageDesigner();
		Designer.prototype.loadBox.call(this);
	},
	drawBox: function() {
		this.awArticle.isDesignFreeze = true;
		this.layoutSlot = document.createElement("aside");
		this.layoutSlot.className = "s-aw-page";
		document.site.header.parentNode.insertBefore(this.layoutSlot, document.site.header.nextSibling);
		this.layoutSlot.style.display = "";
		this.$$item = $(this.layoutSlot);
		this.propertiesSlot = document.createElement("div");
		this.propertiesSlot = document.createElement("div");
		this.propertiesSlot.className = "s-aw-properties-slot";
		this.propertiesSlot.style.width = "200px";
		this.propertiesBodySlot = document.createElement("div");
		this.propertiesBodySlot.setAttribute("data-s-article", this.id);
		this.propertiesSlot.appendChild(this.propertiesBodySlot).className = "s-aw-properties-body";

		//left part
		var leftTop = document.createElement("div");
		leftTop.className = "s-aw-page-left";
		this.layoutSlot.appendChild(leftTop);

		//middle part
		this.viewsSlot = this.layoutSlot.appendChild(document.createElement("div"));
		this.viewsSlot.className = "s-aw-page-views";

		//right part
		this.awArticle.page._item.appendChild(this.propertiesSlot);

		this.treebarSlot = document.createElement("div");
		this.treebarSlot.className = "s-aw-treebar-slot";
		this.treebarSlot.setAttribute("data-s-article", this.id);
		this.awArticle.page._item.insertBefore(this.treebarSlot, this.awArticle.page._item.firstChild);

		(this.uiSwitchTool = new UISwitchTool()).load(this);
		if (this.awArticle == this.awArticle.page) {
			(this.viewsTool = new ViewsTool()).load(this, "s-aw-viewType-link");
		}

		this.loadDefaultTools();
		leftTop.appendChild(this.historySlot);
		this.layoutSlot.appendChild(this.workinCopySlot);

		(this.localizationTool = new LocalizationTool()).load(this);
		this.loadTemplateTools();
		(this.labelTool = new LabelTool()).load(this);
		(this.fieldAddinsTool = new DesignerFieldAddins()).load(this);

		this.trees = new Trees();
		this.trees.treebarBody = document.createElement("div");
		this.trees.treebarBody.className = "s-aw-treebar-body";

		this.treesBar = new TreesBar();
		this.treesBar.trees = this.trees;
		this.treesBar.layoutSlot = this.propertiesBodySlot;
		this.treesBar.barSlot = this.treebarSlot;
		this.treesBar.barBody = this.trees.treebarBody;
		this.treesBar.load(this.awArticle.page);

		this.trees.load(this);
		this.propertiesBodySlot.style.display = "";
		this.treebarSlot.style.display = "";

		this.uiSwitchTool.toggleUIDesign(this.awArticle, true);
		this.bindEvents();

		if (this.awArticle.$item.$transaction) {
			var $title = "Transaction";
			if (this.awArticle.$item.$isModel) {
				$title += " Model";
			}
			this.transactionLabel = document.createElement("div");
			this.transactionLabel.style.display = "";
			this.transactionLabel.textContent = $title;
			this.transactionLabel.id = "s-aw-transaction";
			this.transactionLabel.style.display = "none";
			this.historySlot.appendChild(this.transactionLabel);
		}
		document.site.resize();
		this.selectItem(this.awArticle, true);
	},
	onDeleteLayout: function(deleteLink) {
		var self = this;
		if (!document.site.ddManager.ddAgent) {
			document.site.ddManager.cancel();
			var spaceBox = self.findItem(deleteLink);
			setTimeout(function() {
				var layout = spaceBox.layoutParent;
				var layoutParent = layout.layoutParent;
				var deletedIndex;
				if (spaceBox) {
					deletedIndex = layout.items.indexOf(spaceBox);
					layout.removeItem(spaceBox, true);
				}
				if (layout.items.length > 0 && layout.isRow) {
					layout.deleteRowColumn(deletedIndex);
				} else {
					if (layoutParent) {
						layoutParent.removeItem(layout, true);
						if (layoutParent.isRow) {
							layoutParent.deleteRowColumn(deletedIndex);
						}
					} else {
						layoutParent = layout.boxParent.layoutParent;
						layoutParent.removeItem(layout.boxParent, true, layoutParent.isRow);
					}
				}
				self.endTargetPageUpdate(null, true);
			}, 10);
		}

	},
	onClickPicker: function(picker) {
		if (!Designer.prototype.onClickPicker.call(this, picker)) {
			return false;
		}
		if (this.treesBar && this.treesBar.onClickPicker(picker)) {
			return false;
		}
		if (this.viewsTool && this.viewsTool.onClickPicker(picker)) {
			return false;
		}
		var $bind = picker.getAttribute("data-s-picker");
		switch ($bind) {
			case "s-aw-del-layout":
				this.onDeleteLayout(picker);
				break;
			case "$excludeMe":
				var layoutParent = this.awItem.layoutParent;
				var excludedFields;
				if (this.awItem.$designLevel == "field") {
					excludedFields = [this.awItem];
				} else {
					excludedFields = this.awItem.layoutContent.getFields();
				}
				if (excludedFields) {
					for (var ii = 0, jj = excludedFields.length; ii < jj; ii++) {
						this.awArticle.page.onExcludeField(excludedFields[ii].$item.$bind, true);
						this.awArticle.page.unbind(excludedFields[ii]);
					}
				}
				var index = layoutParent.items.indexOf(this.awItem);
				layoutParent.removeItem(this.awItem, true);
				var newItem = layoutParent.items[index] || layoutParent.items[index - 1];
				if (newItem && newItem.isSpaceBox) {
					newItem = null;
				}
				newItem = newItem || layoutParent.boxParent;
				switch (layoutParent.$layout.$layoutType) {
					case "row":
						layoutParent.addSpaceBox(index);
						break;
					case "tabs":
						if (layoutParent.items.length == 0) {
							layoutParent.convertToNewLayout({
								$layoutType: "stack",
								$width: "100"
							});
						}
						break;
				}
				this.endTargetPageUpdate(newItem, true);
				break;
			case "$addRowBefore":
			case "$addRowAfter":
				var layout = this.awLayout ? this.awLayout : (this.awItem.layoutContent || this.awItem.layoutParent);
				var $curRow = {
					$layoutType: layout.$layout.$layoutType,
					$widths: layout.$layout.$widths,
					$autoSize: layout.$layout.$autoSize
				};
				if (!layout.layoutParent) {
					layout = layout.ensureHasParent();
				}
				var index = layout.layoutParent.items.indexOf(layout);
				var newRow = layout.layoutParent.loadChildItem(null, {
					$layoutType: $curRow.$layoutType,
					$widths: $curRow.$widths,
					$autoSize: $curRow.$autoSize,
				}, ($bind == "$addRowAfter") ? ++index : index);
				this.endTargetPageUpdate(newRow, true);
				break;
		}
		return true;
	},
	selectItem: function(item, select, ensureSelect) {
		if (this.awLayout && this.awLayout.disposed) {
			this.awLayout = null;
		}
		if (this.awItem && this.awItem.disposed) {
			this.awItem = null;
		}
		if (item && item.disposed) {
			item = this.awItem;
		}
		if (select) {
			item = item || this.awArticle.page;
			if (ensureSelect || item != this.awItem) {
				this.selectItem(null, false);
				if (item.isLayout) {
					this.awItem = item.boxParent;
					this.awLayout = item;
				} else {
					this.awItem = item;
					this.awLayout = null;
				}

				this.awArticle.page.scrollToItem(this.awLayout || this.awItem);
				this.showSettingPanel();
				if (this.awLayout) {
					this.uiSwitchTool._toggleItemCss(this.awLayout, "s-aw-designed", true);
				}
				this.uiSwitchTool._toggleItemCss(item, "s-aw-designed", true);
				document.site.resize();
			}
		} else {
			item = item || this.awItem;
			if (item) {
				this.uiSwitchTool._toggleItemCss(item, "s-aw-designed", false);
			}
			if (this.awLayout) {
				this.uiSwitchTool._toggleItemCss(this.awLayout, "s-aw-designed", false);
			}
		}
		if (this.trees) {
			this.trees.selectNode(item, select);
		}
	},
	findTopDesignedITem: function(item) {
		var designedItem = item;
		while (designedItem && designedItem.articleParent != this.awArticle) {
			designedItem = designedItem.articleParent;
		}
		return designedItem || this.awArticle;
	},
	onClickItem: function(item, target, article) {
		article = article || document.controller.findArticle($(target));
		if (article.isDesigned || article.page.isDesigned) {
			var syraIsDesignEnable = target.syraIsDesignEnable === true;
			if (document.site.ddManager.ddAgent) {
				document.site.ddManager.stop();
			} else {
				if (article.page.isDesigned) {
					/*if (!item) {
                     //general click picker
                     item = article;
                     }*/
					article = article.page;
				}
				if (article.isDesigned) {
					document.site.ddManager.cancel();
					item = item || this.findItem(target);
					if (item) {
						if (item.$item.$syraIsDesignEnable) {
							syraIsDesignEnable = true;
						}
						syraIsDesignEnable;
						if (item.isSpaceBox) {
							item = item.boxParent;
						}
						if (item.isMenuGroup && item.contextField) {
							return false;
						}
						if (item && (item != this && item.page != this)) {
							this.selectItem(this.findTopDesignedITem(item), true, true);
						}
					}
				}
			}
			return syraIsDesignEnable;
		} else {
			return Designer.prototype.onClickItem.call(this, item, target, article);
		}
		return true;
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$isHidden !== undefined) {
				newData.$properties.$isMaximizable = {
					$isDisabled: newData.$isHidden
				};
				newData.$properties.$isBoxCollapsable = {
					$isDisabled: newData.$isHidden
				};
			}
			this.labelTool.onDesignerApplyChange(this.awItem, newData);
			this.fieldAddinsTool.onDesignerApplyChange(newData);
			if (newData.$title !== undefined) {
				this._ensureSelectedItemTitle();
			}
		}
		Designer.prototype.applyChange.call(this, newData);
	},
	notifyDataChange: function(field, value) {
		if (this.designerWorkingCopy) {
			this.designerWorkingCopy.temporalySave();
		}
		switch (field.$item.$bind) {
			case "$rowAlign":
				if (this.awLayout) {
					this.awLayout.$layout.$rowAlign = value;
					for (var ii = 0, jj = this.awLayout.items.length; ii < jj; ii++) {
						this.awLayout.items[ii].layoutSlot.style.verticalAlign = value;
					}
					this.endTargetPageUpdate(this.awLayout, true);
				}
				break;
			default:
				var metaData = {};
				if (!this.localizationTool.onDesignerNotifyDataChange(this.awItem, metaData, field, value) && !this.labelTool.onDesignerNotifyDataChange(this.awItem, metaData, field, value)) {
					metaData[field.$item.$bind] = value;
				}
				this.awItem.applyDesignMetaData(metaData, true);
				if (this.awItem.$designLevel == "field") {
					this.fieldAddinsTool.notifyDataChange(metaData);
				}
				this.historyTool.notifyUpdate();
				this.applyChange(metaData);
				break;
		}
	},
	_ensureSelectedItemTitle: function() {
		this.selectedItemTitle = this.awItem.getTitle(false);
		if (this.selectedItemTitle == "" && this.awItem.$designLevel == "field") {
			this.selectedItemTitle = this.getBindTitle(this.awItem.$item.$bind, this.awItem.$field);
		}
		this.selectedPanel.setDescription(this.selectedItemTitle && this.selectedItemTitle != "-" ? this.selectedItemTitle : "");
		if (this.trees) {
			this.trees.fill();
		}
	},
	bindEvents: function() {
		var self = this;
		self.eventNamespace = ".designer" + self.id;
		document.site.$$layoutSlot.delegate(".s-aw-item", "click" + self.eventNamespace, function(event) {
			self.onClickItem(self.findItem(this), this);
			return false;
		}).delegate(".s-aw-item", "mouseenter" + self.eventNamespace + " mouseleave" + self.eventNamespace, function(event) {
			if (document.site.ddManager.ddAgent) {
				var layout = self.findItem(this, true);
				if (layout && layout.$layout.$layoutType == "tabs") {
					if (event.type == "mouseenter") {
						var tabItem = self.findItem(this);
						self._ddTabEnter = setTimeout(function() {
							if (tabItem && tabItem.$item) {
								if (!tabItem.$opened) {
									tabItem.openBox(true);
								}
							}
						}, 500);
					} else {
						if (self._ddTabEnter) {
							clearTimeout(self._ddTabEnter);
							delete self._ddTabEnter;
						}
					}
				}
				return false;
			}
			return true;
			// return false;
		});
	},
	isDraggable: function(target, event) {
		if (target.syraSepType && target.syraSepType == "row") {
			return target;
		}
		var item = this.findItem(target, undefined, event);
		return (item && (item.$awAddNewItem || (item != this.awArticle.page && item.page == this.awArticle.page))) ? item : null;
	},
	onDragMove: function(target, event) {
		if (document.site.ddManager.dropableItem) {
			if (document.site.ddManager.dropableItem.syraSepType == "row") {
				document.site.ddManager.start(this, RowResizer, this.awArticle.page.$$scrollview);
				return;
			}
		}
		if (target.className && target.className.indexOf && (target.className.indexOf("s-aw-item") >= 0 || target.className.indexOf("s-aw-add-item") >= 0)) {
			var item = this.findItem(target, undefined, event);
			if (item) {
				if (item != this.awArticle.page) {
					if (document.site.ddManager.dropableItem) {
						document.site.ddManager.start(this, DesignDDAgent, this.awArticle.page.$$scrollview);
					} else {
						var className = event.target && event.target.className;
						if (className && className.indexOf &&
							(className.indexOf("s-aw-slot-sep-row") >= 0 ||
								className.indexOf("s-aw-slot-sep-stack") >= 0)) {
							item = this.findItem(event.target, undefined, event);
						}
						if (document.site.ddManager.ddAgent) {
							document.site.ddManager.ddAgent.onDragMouseMove(target, event, item);
						}
					}
				}
				this.uiSwitchTool.toggleOverItem(item, true);
				return false;
			}
			if (document.site.ddManager.ddAgent) {
				return false;
			}
			return true; //find cancel observers parse
		}
	},
	findItem: function(item, findLayout, event) {
		if (item.syraAwTreeNodeId) {
			var node = this.trees.findNode(event);
			return node && node.item;
		} else {
			var article = item.syraDesigneArticle ? document.controller._articles[item.syraDesigneArticle] : document.controller.findArticle($(item));
			if (article) {
				if (findLayout || item.syraAwLayoutId) {
					while (item && !item.syraAwLayoutId) {
						item = item.parentNode;
					}
					if (item) {
						return (article.id == item.syraAwLayoutId) ? article : (article.layouts[item.syraAwLayoutId] || null);
					}
				} else {
					while (item && !item.syraAwItemId) {
						item = item.parentNode;
					}
					if (item) {
						item = (article.id == item.syraAwItemId) ? article : (article.idMap[item.syraAwItemId] || null);
						if (!item) {
							item = document.controller.findMenu($(item));
						}
						return item;

					}
				}
			}
		}
		return null;
	},
	addExcludeMeLink: function(panelId) {
		if (panelId != "article") {
			this.selectedPanel.datastore = this.selectedPanel.datastore || {};
			if (!this.selectedPanel.datastore.excludeMeLink) {
				var excludeMeLink = document.createElement("a");
				excludeMeLink.className = "s-aw-exclude-me";
				excludeMeLink.textContent = excludeMeLink.title = this.localize.aw_excludeMe;
				excludeMeLink.setAttribute("data-s-picker", "$excludeMe");
				var slot = document.createElement("div");
				slot.className = "s-aw-exclude-me-slot";
				this.selectedPanel.datastore.excludeMeLink = slot.appendChild(excludeMeLink);
				this.selectedPanel.layoutContent._item.insertBefore(slot, this.selectedPanel.layoutContent._item.firstChild);
			}
		}
	},
	showSettingPanel: function() {
		if (this.panels) {
			var panelId = this.awItem.isMenuItem ? "menu" : this.awItem.$designLevel;
			if (this.selectedPanel) {
				this.selectedPanel.setState({
					$isHidden: true
				});
			}
			if (!this.panels[panelId]) {
				var $item = designProperties[panelId](this.localize);
				if (panelId == "field") {
					var $items = $item.$layout.$items;
					this.fieldAddinsTool.addFieldSection($items[$items.length - 1].$layout);
				}
				this.panels[panelId] = this.loadNewItem(this.propertiesBodySlot, $item, this);
			}
			(this.selectedPanel = this.panels[panelId]).setTitle(this.localize["aw_" + panelId]);
			this.applyChange({
				$isAdvanced: false,
				$isHidden: false
			});
			this._ensureSelectedItemTitle();
			this.applyChange({
				$isAdvanced: this.awItem.$item.$isAdvanced,
				$isMaximizable: this.awItem.$item.$isMaximizable,
				$isBoxCollapsable: this.awItem.$item.$isBoxCollapsable,
				$rowAlign: (this.awLayout ? this.awLayout.$layout.$rowAlign : "top")
			});
			if (this.awItem.isField) {
				this.fieldAddinsTool.onShow();
			}
			this.selectedPanel.setState({
				$isHidden: false
			});
			this.localizationTool.setTitleItem(this.awItem);
			this.labelTool.setLabelItem(this.awItem);
			var sections = this.selectedPanel.layoutContent.items;
			var layout = this.awLayout || this.awItem.layoutContent;
			this.selectedPanel.colCount = layout ? layout.getColumnsCount() : 1;
			this.addExcludeMeLink(panelId);
			for (var ii = 0, jj = sections.length; ii < jj; ii++) {
				var section = sections[ii];
				var isHidden = this.awLayout == null ? false : true;
				if (section.$item.$isSectionModels) {
					this.templatesTool.addPageModelLinks(section, this.awItem, this.selectedPanel.colCount, this.awLayout);
				}
				if (section.$item.$isTitleSection) {
					var titleLocalization = section.layoutContent.items[2];
					var titleLocalizationChoice = section.layoutContent.items[1].builder.choicesItems[0];
					document.site.toggleClass(titleLocalization._domItem, "s-aw-title-localization", true);
					titleLocalizationChoice.appendChild(titleLocalization._domItem);
				}
				if (section.$item.$isLabelSection) {
					if (this.awItem.unknowMode || this.awItem.$field.$type == "application/x-boolean") {
						isHidden = true;
					}
				}
				if (section.$item.$isFieldAddinSection) {
					isHidden = true;
					if (this.awItem.$authoringType) {
						var fieldSections = section.layoutContent.items;
						for (var ii = 0, jj = fieldSections.length; ii < jj; ii++) {
							var fieldSection = fieldSections[ii],
								isSectionHidden = true;
							if (fieldSection.$item.$authoringType == this.awItem.$authoringType) {
								isHidden = isSectionHidden = false;
							}
							fieldSection.setState({
								$isHidden: isSectionHidden
							});
						}
					}
				}
				if (section.$item.$isRowSection) {
					if (!(isHidden = this.awLayout == null ? true : false)) {
						designProperties.fillRowSection(this.localize, section);
					}
				} else {
					if (section.$item.$isStructure && this.awItem.$designLevel == "field") {
						if (this.awItem.layoutParent && this.awItem.layoutParent.isRow) {
							isHidden = true;
						}
					}
				}
				if (section.hideBox) {
					section.hideBox(section.$isHidden = isHidden);
				}
				if (section.$item.$isTabChoice) {
					this.templatesTool.fillTabChoice(section, this.awItem);
				}
			}
		}
	},
	onWindowResize: function() {
		if (this.propertiesBodySlot && this.awArticle.scrollview) {
			this.treesBar.onWindowResize();
		}
	},
	dispose: function() {
		delete this.awArticle.isDesignFreeze;
		if (this.eventNamespace) {
			document.site.$$layoutSlot.undelegate(this.eventNamespace);
		}
		document.site.header.style.display = "";
		document.site.removeDomChild(this.layoutSlot);
		document.site.removeDomChild(this.treebarSlot);
		document.site.removeDomChild(this.propertiesSlot);
		document.site.removeDomChild(this.propertiesBodySlot);
		document.site.ddManager.togglePageObserver(this, false);

		if (this.viewsTool) {
			this.viewsTool.ensureLayoutView();
		}
		if (this.uiSwitchTool) {
			this.uiSwitchTool.toggleUIDesign(this.awArticle, false, true);
		}
		var ids = ["viewsTool", "uiSwitchTool", "localizationTool", "labelTool", "fieldAddinsTool"];
		for (var ii = 0, jj = ids.length; ii < jj; ii++) {
			if (this[ids[ii]]) {
				this[ids[ii]].dispose();
			}
			this[ids[ii]] = null;
		}
		if (this.trees) {
			this.trees.dispose();
		}
		if (this.treesBar) {
			this.treesBar.dispose();
		}
		if (this.selectedPanel) {
			this.selectedPanel.fieldAddinSection = null;
		}
		this.treebarSlot = this.propertiesSlot = this.propertiesBodySlot = this.historySlot = this.viewsSlot = null;
		this.treesBar = this._ddTabEnter = this.panels = this.trees = this.selectedPanel = this.transactionLabel = null;
		Designer.prototype.dispose.call(this);
	}
});