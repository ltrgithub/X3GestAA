"use strict";

function _extractKeyFromUrl($url) {
	var $key = $url.split(",");
	$key = $key.length >= 3 ? $key[2] : null; //null for default
	if ($key) {
		$key = $key.split("'")[0];
	}
	return $key || "default";
}

exports.disableOpener = function(page, disabled) {
	page.designViewsPopup && page.designViewsPopup.close();
	syra_button.disable(page.designerViewBtn, disabled);
};

exports.registerDesignViews = function(page, select) {
	delete page.$selectedDesignView;
	if (page.$views) {
		for (var ii = 0, jj = page.$views.length; ii < jj; ii++) {
			var $view = page.$views[ii];
			if ($view.$selected) {
				page.$selectedDesignView = $view;
			}
			$view.$key = _extractKeyFromUrl($view.$url);
		}
	}
	if (select) {
		if (select !== true) {
			delete page.$selectedDesignView;
		}
		_switchView(page, page.$selectedDesignView || select);
	}

	if (page.$selectedDesignView) { // && page.$views.length > 1) {
		var $view;
		for (var ii = 0, jj = page.$views.length; ii < jj; ii++) {
			$view = page.$views[ii];
			if ($view.$selected) {
				break;
			}
		}
		var tip = $view.$title + " (" + $view.$code + ")";
		if (!page.designerViewBtn) {
			page.designerViewBtn = syra_button.add({
				parent: page,
				text: $view.$title,
				title: tip,
				css: "s-designer-view-opener-text",
				click: function() {
					_toggle(this.parent);
				}
			});
			page.domTitle.parentNode.insertBefore(page.designerViewBtn.link, page.domTitle.nextSibling);
		} else {
			syra_button.setText(page.designerViewBtn, $view.$title, undefined, tip);
		}
	} else {
		syra_button.remove(page.designerViewBtn);
		delete page.designerViewBtn;
	}
};

function _switchView(page, $view, $views) {
	if ($view.$url) {
		syra_ajax.get({
			page: page,
			url: $view.$url,
			success: function(data, response, requestUrl) {
				if (data.$prototype) {
					setTimeout(function() {
						if (response.data.$prototype) {
							response.data.$prototype.$representationUrl = page.$prototype.$representationUrl;
						}
						var $itemPage = {
							layoutSlot: page.layoutSlot,
							$category: page.$pageCategory,
							$representation: response.data,
							urlSeg: page.urlSeg
						};
						if (value == "default") {
							delete $itemPage.urlSeg.params.pageview;
						} else {
							$itemPage.urlSeg.params.pageview = value;
						}
						syra_url.build($itemPage.urlSeg);
						syra_url.history.load({
							$url: $itemPage.urlSeg.$url
							/*,
								 $itemPage: $itemPage*/
						});
					}, 100);
				} else {
					if (data.$authorUrl) {
						page.$authorUrl = data.$authorUrl;
					}
					page.$views = data.$views || page.$views;
					//TEMP for V7 Patch6. Will be updated for patch7 
					if ($views) {
						var selectedView;
						for (var ii = 0, jj = page.$views.length; ii < jj; ii++) {
							if (page.$views[ii].$selected) {
								selectedView = page.$views[ii];
								break;
							}
						}
						if (selectedView) {
							for (var ii = 0, jj = $views.length; ii < jj; ii++) {
								if ($views[ii].$url != selectedView.$url) {
									delete $views[ii].$selected;
								} else {
									$views[ii].$selected = true;
								}
							}
							page.$views = $views;
						}
					}
					exports.registerDesignViews(page);
					if (page.designViewsPopup) {
						_toggle(page); //close
						_toggle(page); //open
					}
					if (data.$article) {
						delete data.$article.$menus;
						if (page.convertPersistToVolatil) {
							page.convertPersistToVolatil(data.$article);
						}
						if (page.$item.$menus) {
							data.$article.$menus = syra_site.clone(page.$item.$menus);
						}
						page.reloadLayout(data.$article, true);
					}
					if (page.urlSeg) {
						$view.$key = _extractKeyFromUrl($view.$url);
						page.urlSeg.params.pageview = $view.$key;
						syra_url.build(page.urlSeg);
						if (!syra_site.mobile) {
							syra_url.history.update(page, page.urlSeg.$url);
						}
					}
					if (page.designer) {
						page.designer.toggleUIDesign(page, true);
						page.designer.selectItem(null, true);
						exports.disableOpener(page, true);
						page.designer.loadPageStorage();
					}
				}
			}
		});
	}
}

function _onDesignViewClick() {
	var page = this.parent;
	var $view = page.$views[this.$viewIndex];
	(page.$selectedDesignView != $view) && _switchView(page, $view, page.$views);
	setTimeout(function() {
		page.designViewsPopup && page.designViewsPopup.close();
	}, 10);
};
exports.onItemInOut = function(onEnter, event, target) {
	syra_dom.toggleClass(target, "s-record-enter", onEnter);
};


function _toggle(page) {
	if (!page.designerViewBtn.link.syraIsDisabled) {
		if (!page.designViewsPopup) {
			var slot = document.createElement("aside");
			slot.className = "s-designer-views";
			var factoriesCount = 0;
			for (var ii = 0, jj = page.$views.length; ii < jj; ii++) {
				if (page.$views[ii].$isFactory) {
					factoriesCount++;
				}
			}
			for (var ii = 0, jj = page.$views.length; ii < jj; ii++) {
				var $view = page.$views[ii];
				var btn = syra_button.add({
					parent: page,
					slot: slot,
					text: $view.$title,
					css: "s-designer-view",
					click: _onDesignViewClick,
					$viewIndex: ii
				});
				btn.syraTip = 1;
				$view.$selected && syra_button.setText(page.designerViewBtn, btn.text);
			}

			page.designViewsPopup = syra_over.openPopup(page, {
				slot: slot,
				picker: page.designerViewBtn.link,
				position: {
					my: "right top",
					at: "right bottom",
					of: page.designerViewBtn.link
				},
				close: function() {
					syra_dom.empty(slot);
					page.designViewsPopup = null;
				}
			});
		} else {
			page.designViewsPopup.close();
		}
	}
}

exports.dispose = function(page) {
	page.designViewsPopup && page.designViewsPopup.close();
	page.designViewsPopup = page.designerViewBtn = page.$views = page.$selectedDesignView = null;
};