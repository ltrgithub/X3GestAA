"use strict";
var helpers = require('syracuse-core/lib/helpers');

function BarSplitter() {}

exports.BarSplitter = helpers.defineClass(BarSplitter, null, {
	load: function(page, layoutSlot, barSlot, barBody) {
		this.page = page;
		this.preferences = {
			isDocked: true,
			isCollapsed: this.page.dialogWrapper != null
		};
		this.layoutSlot = layoutSlot;
		this._$$barSlot = $(this._barSlot = barSlot);
		this._barBody = barBody;
		this._bar = document.createElement("div");
		this._bar.className = "s-aw-treebar";

		this._resizeBar = document.createElement("a");
		this._resizeBar.className = "s-aw-treebar-resizer";
		this._openerPicker = document.createElement("a");
		this._openerPicker.className = "s-aw-treebar-opener";
		this._openerPicker.setAttribute("data-s-picker", "s-bar-collapse");
		this._resizeBar.appendChild(this._openerPicker);
		this._bar.appendChild(this._resizeBar);
		this._bar.appendChild(this._barBody);
		this._addResizer();
		this._barSlot.appendChild(this._bar);
		this._ensureState();
	},
	_ensureState: function() {
		if (this.preferences.isCollapsed) {
			this._openedWidth = this._$$barSlot.outerWidth();
			this._barSlot.style.width = "10px";
			this._barBody.style.display = "none";
			this._resizeBar.className = "s-aw-treebar-resizer s-close";
			this._openerPicker.className = "s-aw-treebar-opener s-close";
			if (!this.preferences.isDocked) {
				this._bar.style.width = "10px";
			}
		} else {
			this._resizeBar.className = "s-aw-treebar-resizer";
			this._openerPicker.className = "s-aw-treebar-opener";
			this._resizeBar.style.width = "";
			if (this.preferences.isDocked) {
				this._barSlot.style.width = (this._openedWidth || 200) + "px";
				this._bar.style.position = "";
				this._bar.style.width = "";
			} else {
				this._barSlot.style.width = "10px";
				document.site.setZIndex(this._bar);
				this._bar.style.position = "absolute";
				this._bar.style.width = "200px";
				this._bar.style.top = "0px";
				this._bar.style.left = "0px";
			}
			this._barBody.style.display = "";
		}
	},
	_addResizer: function() {
		var self = this;
		self._widgetResizer = document.site.setWidgetResizable({
			source: self,
			slot: self._barSlot,
			dragSpot: null,
			direction: {
				right: true
			},
			minWidth: 200,
			resizerSpot: self._resizeBar,
			onResize: function(resizer, moving) {
				if (!moving) {
					document.site.toggleClass(self._resizeBar, "s-resizing", document.site.resizing);
					document.site.toggleClass(self._openerPicker, "s-resizing", document.site.resizing);
				}
			}
		});
		self._widgetResizer.isEnabled = !self.preferences.isCollapsed;
	},
	onClickPicker: function(picker) {
		var $bind = picker.getAttribute("data-s-picker");
		switch ($bind) {
			case "s-bar-dockMode":
			case "s-bar-collapse":
				if ($bind == "s-bar-dockMode") {
					this.preferences.isDocked = !this.preferences.isDocked;
				} else {
					this._widgetResizer.isEnabled = !(this.preferences.isCollapsed = !this.preferences.isCollapsed);
				}
				this._ensureState();
				this.page.onWindowResize();
				this._resizeDialogPage();
				return true;
		}
		return false;
	},
	onWindowResize: function(treebar) {
		var height = this.page.$$scrollview.height();
		if (height) {
			this.layoutSlot.style.height = height + "px";
			this._bar.style.height = height + "px";
			this._resizeBar.style.height = height + "px";
			this._openerPicker.style.top = ((height - this._openerPicker.clientHeight) / 2) + "px";
			treebar.onWindowResize(this._bar.clientHeight);
			this._resizeDialogPage();
		}
	},
	_resizeDialogPage: function() {
		if (this.page.dialogWrapper) {
			var width = this.page.dialogWrapper.$$dialogSlot.width();
			if (width) {
				this.page.scrollview.style.width = (width - (200 + this._barSlot.offsetWidth)) + "px";
			}
		}
	},
	dispose: function() {
		if (this._widgetResizer) {
			this._widgetResizer.dispose();
		}
		this.page = this._barSlot = this._barBody = this._bar = this._$$barSlot = null;
		this._resizeBar = this._openerPicker = null;
	}

});