"use strict";
var helpers = require('syracuse-core/lib/helpers');

function ArticleToolBox() {}

exports.ArticleToolBox = helpers.defineClass(ArticleToolBox, null, {
	load: function(awContext, box) {
		var self = this;
		self.awContext = awContext;
		self.toolbarBox = box;
		self._nodes = {};
		self.slot = document.createElement("div");
		self.slot.className = "s-aw-content-tree";
		box.content.layoutContent._item.appendChild(self.slot);
		self.toolbarBox.onResize = function(height) {
			self.slot.style.height = height + "px";
		};
		(self.$$slot = $(self.slot)).delegate(".s-aw-content-tree", "mousedow.authoringTree click.authoringTree", function(event) {
			self.onNodeEvent(event);
			return false;
		}).delegate(".s-aw-tree-item-opener-children", "click.authoringTree", function(event) {
			self.onNodeEvent(event);
			return false;
		}).delegate(".s-aw-tree-item-title", "mouseenter.authoringTree mouseleave.authoringTree click.authoringTree", function(event) {
			self.onNodeEvent(event);
			return false;
		});
	},
	dispose: function() {
		if (this.$$slot) {
			this.$$slot.undelegate(".authoringTree");
		}
		if (this.toolbarBox) {
			this.toolbarBox = this.toolbarBox.onResize = null;
		}
		this.toggle(false, true);
		this.$$slot = this.awContext = this.selectedNode = null;
	},
	onParentBoxExpanded: function() {
		this.toggle(true);
	},
	toggle: function(show, disposing) {
		var self = this;
		if (self.awContext.awArticle) {
			if (show) {
				self._nodes = {};
				self.slot.style.display = "none";
				document.site.emptyDom(self.slot);
				self._buildTreeNode(self.awContext.awArticle, {
					node: self.slot,
					isRoot: true
				});
				self.slot.style.display = "";
			} else {
				if (self.slot) {
					self.slot.style.display = "none";
				}
				if (disposing) {
					document.site.emptyDom(self.slot);
					delete self.slot;
				}
				if (self._nodes) {
					var ids = Object.keys(self._nodes);
					for (var ii = 0, jj = ids.length; ii < jj; ii++) {
						var node = self._nodes[ids[ii]];
						node.item = node.node = node.children = node.data = null;
						node.opener = node.title = null;
					}
					self._nodes = {};
				}
				if (disposing) {
					self._nodes = null;
				}
			}
		}
	},
	findNode: function(event) {
		var $$target = $(event.target);
		var id = $$target.attr("data-s-item");
		if (!id) {
			id = $$target.closest("[data-s-item]").attr("data-s-item");
		}
		return id ? this._nodes[id] : null;
	},
	onNodeEvent: function(event) {
		delete document.site.requestedDDAuthoringItem;
		event.stopPropagation();
		var node = this.findNode(event);
		if (node) {
			if (event.target.className.indexOf("s-aw-tree-item-opener-children") >= 0) {
				var open = !(node.opener.className.indexOf("s-open") < 0);
				node.children.style.display = open ? "" : "none";
				document.site.toggleClass(node.opener, "s-open", !open);
			} else {
				switch (event.type) {
					case "mouseenter":
						this.awContext.authorPage.toggleOverItem(node.item, true);
						this.awContext.targetPage.scrollToItem(node.item);
						break;
					case "mouseleave":
						this.awContext.authorPage.toggleOverItem(node.item, false);
						break;
					case "click":
						if (node.item == this.awContext.awArticle) {
							this.awContext.targetPage.scrollToItem(node.item);
						}
						this.selectNode(node.item, true);
						this._isSelecteDisabled = true;
						this.awContext.authorPage.selectItem(node.item, true);
						this._isSelecteDisabled = false;
						break;
				}
			}
		}

	},
	selectNode: function(item, select) {
		if (!this._isSelecteDisabled && item && !item.disposed) {
			var node = this._nodes[item.id];
			if (node) {
				if (select) {
					if (this.selectedNode && this.selectedNode != node && this.selectedNode.item) {
						document.site.toggleClass(this.selectedNode.title, "s-aw-tree-designed-" + this.selectedNode.item.$authoringLevel, false);
					}
					this.selectedNode = node;
					document.site.toggleClass(node.title, "s-aw-tree-designed-" + node.item.$authoringLevel, true);
				} else {
					if (this.selectedNode == node) {
						this.selectedNode = null;
						document.site.toggleClass(node.title, "s-aw-tree-designed-" + node.item.$authoringLevel, false);
					}
				}
			}
		}
	},
	_buildTreeNode: function(item, parentNode) {
		var items;
		if (!item.isSpaceBox) {
			if (item.isLayout) {
				items = item.items;
			} else {
				//item.parent = parent;
				if (!parentNode.children) {
					parentNode.children = document.createElement("ul");
					parentNode.children.className = "s-aw-tree-level";
					parentNode.node.appendChild(parentNode.children);
					if (!parentNode.opener) {
						if (parentNode.title) {
							parentNode.opener = document.createElement("a");
							parentNode.opener.className = "s-aw-tree-item-opener";
							parentNode.title.parentNode.insertBefore(parentNode.opener, parentNode.title);
							parentNode.opener.className = "s-aw-tree-item-opener-children";
						}
					}
					if (parentNode.isRoot) {
						parentNode.children.className += " s-aw-tree-root";
					}
				}
				var itemNode = {};
				itemNode.item = item;
				itemNode.node = document.createElement("li");
				itemNode.node.setAttribute("data-s-item", item.id);
				this._nodes[item.id] = itemNode;
				itemNode.node.className = "s-aw-tree-item s-aw-add-item";
				parentNode.children.appendChild(itemNode.node);

				itemNode.data = document.createElement("div");
				itemNode.data.className = "s-aw-tree-item-data";
				itemNode.node.appendChild(itemNode.data);

				itemNode.title = document.createElement("div");
				itemNode.title.className = "s-aw-tree-item-title s-aw-tree-" + item.$authoringLevel;
				if (this.awContext.awItem == item) {
					itemNode.title.className += " s-aw-tree-designed-" + item.$authoringLevel;
				}
				var title = item.getTitle();
				if (title == "-" && item.getDefaultTitle) {
					title = item.getDefaultTitle();
				}
				if (title == "" && item.$item && item.$item.$bind) {
					title = item.$item.$bind;
				}
				itemNode.title.textContent = title;
				itemNode.data.appendChild(itemNode.title);
			}
			if (item.layoutContent) {
				items = item.layoutContent.items;
			}
			if (items) {
				for (var ii = 0, jj = items.length; ii < jj; ii++) {
					this._buildTreeNode(items[ii], itemNode || parentNode);
				}
			}
		}
	}
});