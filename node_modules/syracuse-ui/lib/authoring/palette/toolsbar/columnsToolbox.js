"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ArticleToolBox = require("syracuse-ui/lib/authoring/palette/toolsbar/articleToolBox").ArticleToolBox;

function ColumnsToolbox(){
}

exports.ColumnsToolbox = helpers.defineClass(ColumnsToolbox, ArticleToolBox, {
    load: function(awContext, box){
        var self = this;
        self.awContext = awContext;
        self.toolbarBox = box
        self.slot = document.createElement("div");
        self.slot.className = "s-aw-list-columns";
        box.content.layoutContent._item.appendChild(self.slot);
        self.toolbarBox.onResize = function(height){
            self.slot.style.height = height + "px";
        };
        (self.$$slot = $(self.slot)).delegate(".s-aw-list-cols-col", "mousedow.authoringList click.authoringList", function(event){
            self.onNodeEvent(event);
            return false;
        }).delegate(".s-aw-list-cols-col-fixe", "click.authoringList", function(event){
            self.onNodeFixeEvent(event);
            return false;
        }).delegate(".s-aw-list-cols-col-delete", "click.authoringList", function(event){
            self.onNodeHideEvent(event);
            return false;
        }).delegate(".s-aw-list-cols-col-title", "click.authoringList", function(event){
            self.onNodeEvent(event);
            return false;
        });
    },
    dispose: function(){
        if (this.$$slot) {
            this.$$slot.undelegate(".authoringTree");
        }
        if (this.toolbarBox) {
            this.toolbarBox = this.toolbarBox.onResize = null;
        }
        this.toggle(false, true);
        this.$$slot = this.awContext = this.selectedNode = null;
    },
    onParentBoxExpanded: function(){
        this.toggle(true);
    },
    toggle: function(show, disposing){
        var self = this;
        if (self.awContext.awArticle) {
            if (show) {
                self.slot.style.display = "none";
                document.site.emptyDom(self.slot);
                self._buildColumnsList();
                self.slot.style.display = "";
            }
            else {
                if (self.slot) {
                    self.slot.style.display = "none";
                }
                if (disposing) {
                    document.site.emptyDom(self.slot);
                    delete self.slot;
                }
                if (disposing) {
                    self.nodes = null;
                }
            }
        }
    },
    findNode: function(event, getIndex){
        var $$target = $(event.target);
        var $bind = $$target.attr("data-s-bind");
        if (!$bind) {
            $bind = $$target.closest("[data-s-bind]").attr("data-s-bind");
        }
        if ($bind) {
            for (var ii = 0, jj = this.nodes.length; ii < jj; ii++) {
                if (this.nodes[ii].$item.$bind == $bind) {
                    return getIndex ? ii : this.nodes[ii];
                }
            }
        }
        return null;
    },
    onNodeFixeEvent: function(event){
        delete document.site.requestedDDAuthoringItem;
        event.stopPropagation();
        var foundIndex = this.findNode(event, true);
        var isFixed = !(event.target.className.indexOf("s-field-fixed") >= 0);
        var list = this.awContext.awArticle;
        var $items = list.$item.$layout.$items;
        if (isFixed) {
            for (var ii = 0, jj = foundIndex; ii <= jj; ii++) {
                var node = this.nodes[ii];
                list.builder.cols[node.$item.$bind].$isFixed = node.$item.$isFixed = isFixed;
                node.isFixed.className = "s-aw-list-cols-col-fixe s-field-fixed";
                node.isFixed.title = this.awContext.localize.aw_listUnFixeColumn;
            }
        }
        else {
            for (var ii = foundIndex, jj = this.nodes.length; ii < jj; ii++) {
                var node = this.nodes[ii];
                list.builder.cols[node.$item.$bind].$isFixed = node.$item.$isFixed = isFixed;
                node.isFixed.className = "s-aw-list-cols-col-fixe";
                node.isFixed.title = this.awContext.localize.aw_listFixeColumn;
            }
        }
        this.awContext.authorPage.endTargetPageUpdate();
    },
    onNodeHideEvent: function(event){
        delete document.site.requestedDDAuthoringItem;
        event.stopPropagation();
        var node = this.findNode(event);
        if (node) {
            this.awContext.awArticle.builder.removeColumn(node.$item.$bind);
            document.site.removeDomChild(node.item);
            this.awContext.authorPage.notifyUpdate();
            this.awContext.toolsBar.reloadInsertMenus();
        }
        
    },
    onNodeEvent: function(event){
        delete document.site.requestedDDAuthoringItem;
        event.stopPropagation();
        var node = this.findNode(event);
        if (node) {
            if (event.target.className.indexOf("s-aw-tree-item-opener-children") >= 0) {
                var open = !(node.opener.className.indexOf("s-open") < 0);
                node.children.style.display = open ? "" : "none"
                document.site.toggleClass(node.opener, "s-open", !open);
            }
            else {
                switch (event.type) {
                    case "click":
                        var node = this.findNode(event);
                        if (node) {
                            var col = this.awContext.awArticle.builder.cols[node.$item.$bind];
                            if (col) {
                                this.awContext.awArticle.builder.scroller.scrollToItem(col.titleCell);
                            }
                        }
                        break;
                }
            }
        }
        
    },
    _buildColumnsList: function(){
        var items;
        var list = this.awContext.awArticle;
        var $items = list.$item.$layout.$items;
        this.root = document.createElement("ul");
        this.root.className = "s-aw-list-cols";
        this.nodes = [];
        for (var ii = 0, jj = $items.length; ii < jj; ii++) {
            var $item = $items[ii];
            var $field = list.$fieldProperties[$item.$bind];
            if ($field && !$field.$isHidden) {
                var node = {
                    $item: $item,
                    item: document.createElement("li"),
                    isFixed: document.createElement("a"),
                    $delete: document.createElement("a"),
                    title: document.createElement("div")
                };
                node.item.className = "s-aw-list-cols-col s-aw-add-item";
                node.item.setAttribute("data-s-bind", $item.$bind);
                
                node.isFixed.className = "s-aw-list-cols-col-fixe";
                if ($item.$isFixed) {
                    node.isFixed.className += " s-field-fixed";
                    node.isFixed.title = this.awContext.localize.aw_listUnFixeColumn;
                }
                else {
                    node.isFixed.title = this.awContext.localize.aw_listFixeColumn;
                }
                node.$delete.className = "s-aw-list-cols-col-delete";
                node.$delete.title = this.awContext.localize.aw_listHideColumn;
                
                node.title.className = "s-aw-list-cols-col-title";
                node.title.textContent = list.getLocalizedTitle($field.$title);
                node.item.appendChild(node.isFixed);
                node.item.appendChild(node.$delete);
                node.item.appendChild(node.title);
                this.root.appendChild(node.item);
                this.nodes.push(node);
            }
        }
        this.slot.appendChild(this.root);
    }
});
