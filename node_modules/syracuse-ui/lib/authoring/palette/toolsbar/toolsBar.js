"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var ArticleToolBox = require("syracuse-ui/lib/authoring/palette/toolsbar/articleToolBox").ArticleToolBox;

function ToolsBar() {}

exports.ToolsBar = helpers.defineClass(ToolsBar, RawPage, {
	loadToolbar: function(awContext) {
		this.isAuthoringEventEnabled = true;
		this.awContext = awContext;
		this._initializePage();
		this._unregisterResizer = true;
		this.$autoFetch = false;
		this.$item = {};
		this.$prototype = {
			$properties: {},
			$links: {
				$addSection: {
					$title: this.awContext.localize.aw_addSection
				},
				$addBlock: {
					$title: this.awContext.localize.aw_addBlock
				}
			}
		};
		this.$prototype.$localization = this.awContext.palette.$prototype.$localization;

		this.preferences = {
			isDocked: true,
			isCollapsed: this.awContext.dialogWrapper != null
		};

		this.$$item = this.$$slot = $(this.layoutSlot = document.createElement("div"));
		this.layoutSlot.className = "s-aw-toolbar-slot";
		this.layoutSlot.setAttribute("data-s-article", this.id);
		this.awContext.targetPage._item.insertBefore(this.layoutSlot, this.awContext.targetPage._item.firstChild);

		this.loadBox();

	},
	onEndExcludeItem: function() {
		this.articleToolBox.toggle(true);
	},
	onEndChangeStep: function() {
		this.reloadInsertMenus();
		this.articleToolBox.toggle(true);
	},
	dispose: function() {
		if (this._resizer) {
			this._resizer.dispose();
			this._resizer = null;
		}
		this.toggleItemAuthoring(false);
		if (this._boxes) {
			for (var ii = 0, jj = this._boxes.length; ii < jj; ii++) {
				delete this._boxes[ii].toolBox;
				delete this._boxes[ii].content;
			}
		}
		if (this.layoutSlot) {
			document.site.removeDomChild(this.layoutSlot);
		}
		if (this.$prototype) {
			this.$prototype = this.$prototype.$localization = null;
		}
		if (this.articleToolBox) {
			this.articleToolBox.dispose();
		}
		this._insertMenusBox = null;
		this.articleToolBox = this.awContext = this._boxes = this.layoutSlot = this.$$item = this.$$slot = null;
	},
	_loadInsertLinks: function() {
		var $items = [];
		var binds = Object.keys(this.awContext.$prototype.$properties);
		if (binds.length > 0) {
			var $actions = {};
			for (var ii = 0, jj = binds.length; ii < jj; ii++) {
				var bind = binds[ii];
				if (bind.charAt(0) != "$") {
					var $field = this.awContext.$prototype.$properties[bind];
					if ($field && $field.$type && !$field.$isExcluded) {
						var actionId = "$insertAction" + bind;
						var title = $field.$title ? this.awContext.targetPage.getLocalizeText($field.$title) : "";
						$actions[actionId] = {
							$title: (title == "") ? bind : title
						};
						$items.push({
							$bind: actionId,
							$fieldCategory: "field",
							$fieldBind: bind,
							$css: "s-aw-add-item",
							$value: $field.$type.replace("application/x-", "").replace("/", "-")
						});
					}
				}
			}
			var fields = this.awContext.drawHelper.extractFields(this.awContext.awArticle.layoutContent);
			for (var ii = 0, jj = fields.length; ii < jj; ii++) {
				var $action = $actions["$insertAction" + fields[ii].$item.$bind];
				if ($action) {
					$action.$isHidden = true;
				}
			}
			this.applyChange({
				$actions: $actions
			});
		}
		return $items;
	},
	reloadInsertMenus: function() {
		this._clearInsertMenus();
		this._insertMenusBox.layoutContent.removeItems();
		this.awContext.targetPage.warnAdministrationUpdates(false);
		this.loadAvailableFields();
	},
	_clearInsertMenus: function() {
		var ids = Object.keys(this.$menus);
		for (var ii = 0, jj = ids.length; ii < jj; ii++) {
			var id = ids[ii];
			if (id.indexOf("$insertAction") >= 0) {
				delete this.menuItems[id];
				delete this.$menus[id];
			}
		}
	},
	_createArticleToolbox: function($title) {
		var box = this.createBox({
			$category: "section",
			$title: $title || this.awContext.localize.aw_viewTypeContent,
			$layout: {
				$items: []
			}
		});
		this.articleToolBox = box.toolBox = new ArticleToolBox();
		this.articleToolBox.load(this.awContext, box);
	},
	_loadAvailableFields: function($fieldBinds) {
		if ($fieldBinds.length > 0) {
			var $actions = {};
			for (var ii = 0, jj = $fieldBinds.length; ii < jj; ii++) {
				var $bind = $fieldBinds[ii];
				if ($bind.charAt(0) != "$") {
					var $field = this.awContext.$prototype.$properties[$bind];
					if ($field && $field.$type && !$field.$isExcluded) {
						var actionId = "$insertAction" + $bind;
						var title = $field.$title ? this.awContext.targetPage.getLocalizeText($field.$title) : "";
						$actions[actionId] = {
							$title: (title == "") ? $bind : title
						};
						var $item = {
							$category: "link",
							$skin: "s-aw-mn-field-link",
							$icon: {
								$mode: "iconText",
								$path: "authoring/s-aw-"
							},
							$bind: actionId,
							$fieldCategory: "field",
							$fieldBind: $bind,
							$css: "s-aw-add-item",
							$value: $field.$type.replace("application/x-", "").replace("/", "-")
						};
						this._insertMenusBox.layoutContent.createChildItem($item);
					}
				}
			}
			this.applyChange({
				$actions: $actions
			});
		}
	},
	_setBoxTitle: function(menuBox) {
		var length = menuBox.layoutContent.items.length;
		menuBox.setTitle(length + " " + menuBox.$item.$title);
		menuBox.setState({
			$isHidden: length == 0
		});
	},
	loadAvailableFields: function() {
		this._loadAvailableFields(this.awContext.targetPage.$freeFieldBinds);
		this._loadAvailableFields(Object.keys(this.awContext.targetPage.garbageFields));
		this._setBoxTitle(this._insertMenusBox);
	},
	_createBoxes: function() {
		this.awContext.targetPage.warnAdministrationUpdates(false);
		this._createArticleToolbox();
		var box = this.createBox({
			$category: "section",
			$skin: "s-aw-toolbox",
			$title: this.awContext.localize.aw_insert,
			$layout: {
				$items: [{
					$category: "link",
					$skin: "s-aw-menus-link",
					$css: "s-aw-add-section s-aw-add-item",
					$bind: "$addSection",
					$value: "add-section",
					$icon: {
						$mode: "iconText",
						$path: "authoring/s-aw-"
					}
				}, {
					$category: "link",
					$skin: "s-aw-menus-link",
					$css: "s-aw-add-block s-aw-add-item",
					$bind: "$addBlock",
					$value: "add-block",
					$icon: {
						$mode: "iconText",
						$path: "authoring/s-aw-"
					}
				}, {
					$category: "menus",
					$title: this.awContext.localize.aw_insertFields,
					$itemSkin: "s-aw-mn-field-link",
					$titleIcon: {
						$value: "template",
						$path: "authoring/s-aw-"
					},
					$itemIcon: {
						$mode: "iconText",
						$path: "authoring/s-aw-"
					},
					$layout: {
						$items: []
					}
				}]
			}
		});
		this._insertMenusBox = box.content.layoutContent.items[2];
		this.loadAvailableFields();
	},
	_getDefaultBox: function() {
		return this.articleToolBox;
	},
	drawBox: function() {
		document.site.emptyDom(this.layoutSlot);
		this._bar = document.createElement("div");
		this._bar.className = "s-aw-toolbar";
		this.$$bar = $(this._bar);
		this.appendPickerBar();

		this._body = document.createElement("div");
		this._body.className = "s-aw-toolbar-body";
		this._$$body = $(this._body);
		this._bar.appendChild(this._body);
		this._boxes = [];

		this._createBoxes();

		this.$$bar.appendTo(this.layoutSlot);

		if (!this.openedBox) {
			this.collapseBox(this._getDefaultBox().toolbarBox, true, null, true);
		}
		this.ensureState();
	},

	onClickPicker: function(btn, event) {
		switch (btn.getAttribute("data-s-picker")) {
			case "s-bar-dockMode":
				this.preferences.isDocked = !this.preferences.isDocked;
				break;
			case "s-bar-collapse":
				this._resizer.isEnabled = !(this.preferences.isCollapsed = !this.preferences.isCollapsed);
				break;
			case "s-bar-title":
				var $id = $(event.target).closest("[data-s-box]").attr("data-s-box");
				for (var ii = 0, jj = this._boxes.length; ii < jj; ii++) {
					if (this._boxes[ii].$item.$id == $id) {
						this.collapseBox(this._boxes[ii], true);
						break;
					}
				}
				break;
			default:
				return true;
		}
		this.ensureState();
		this.onWindowResize();
		this.awContext.palette.resizeDialogPage();
	},
	appendPickerBar: function() {
		var self = this;
		self.resizeBar = document.createElement("a");
		self.resizeBar.className = "s-aw-toolbar-resizer";
		self.openerPicker = document.createElement("a");
		self.openerPicker.className = "s-aw-toolbar-opener";
		self.openerPicker.setAttribute("data-s-picker", "s-bar-collapse");
		self.resizeBar.appendChild(self.openerPicker);
		self._bar.appendChild(self.resizeBar);
		self.openerPickerHeight = $(self.openerPicker).outerHeight();
		self._resizer = document.site.setResizable({
			source: self,
			slot: self.layoutSlot,
			dragSpot: null,
			direction: {
				right: true
			},
			minWidth: 200,
			resizerSpot: self.resizeBar,
			onResize: function(resizer, moving) {
				if (!moving) {
					document.site.toggleClass(self.resizeBar, "s-resizing", document.site.resizing);
					document.site.toggleClass(self.openerPicker, "s-resizing", document.site.resizing);
				}
			}
		});
		self._resizer.isEnabled = !self.preferences.isCollapsed;

	},
	createBox: function($item) {
		$item.$id = this.id + "-box-" + (this._boxes.length + 1);
		var box = {
			boxParent: this,
			$item: $item
		};
		this._boxes.push(box);
		var boxItem = document.createElement("section");
		boxItem.className = "s-aw-toolbar-box";
		boxItem.setAttribute("data-s-box", $item.$id);
		box.$$item = $(boxItem);

		var title = document.createElement("a");
		title.setAttribute("data-s-picker", "s-bar-title");
		title.className = "s-aw-toolbar-box-title";
		title.textContent = $item.$title || "";

		var dom = document.createElement("div");
		dom.className = "s-aw-toolbar-box-body";
		box.$$body = $(dom);

		dom = document.createElement("header");
		dom.className = "s-aw-toolbar-box-header";
		dom.appendChild(title);
		box.$$header = $(dom);

		box.$$item.append(box.$$header).append(box.$$body);
		this._body.appendChild(boxItem);

		box.$item.$isTitleHidden = true;
		box.$$body[0].style.display = "none";
		box.$$header.toggleClass("s-open", false);
		box.$$item.toggleClass("s-open", false);
		box.content = this.loadNewItem(box.$$body.empty()[0], box.$item);
		return box;
	},
	collapseBox: function(box, show, isFirstTime, onDrawBar) {
		if (show && this.openedBox && (this.openedBox != box)) {
			this.collapseBox(this.openedBox, false);
		}
		this.openedBox = box;
		box.$$item[0].style.display = (box.$isHidden) ? "none" : "";
		box.$$body[0].style.display = show ? "" : "none";
		box.$$header.toggleClass("s-open", show);
		box.$$item.toggleClass("s-open", show);
		if (show) {
			if (box.toolBox && box.toolBox.onParentBoxExpanded) {
				box.toolBox.onParentBoxExpanded();
			}
			this.onWindowResize();
		} else {
			box.$$item[0].style.height = "";
		}
	},
	_hideBox: function(box, hide) {
		box.toolbarBox.$isHidden = hide;
		if (box.toolbarBox.$$item) {
			box.toolbarBox.$$item[0].style.display = (hide) ? "none" : "";
		}
	},
	ensureState: function() {
		if (this.preferences.isCollapsed) {
			this.openedWidth = this.$$slot.outerWidth();
			this.layoutSlot.style.width = "10px";
			this._body.style.display = "none";
			this.resizeBar.className = "s-aw-toolbar-resizer s-close";
			this.openerPicker.className = "s-aw-toolbar-opener s-close";
			if (!this.preferences.isDocked) {
				this._bar.style.width = "10px";
			}
		} else {
			this.resizeBar.className = "s-aw-toolbar-resizer";
			this.openerPicker.className = "s-aw-toolbar-opener";
			this.resizeBar.style.width = "";
			if (this.preferences.isDocked) {
				this.layoutSlot.style.width = (this.openedWidth || 200) + "px";
				this._bar.style.position = "";
				this._bar.style.width = "";
			} else {
				this.layoutSlot.style.width = "10px";
				document.site.setZIndex(this._bar);
				this._bar.style.position = "absolute";
				this._bar.style.width = "200px";
				this._bar.style.top = "0px";
				this._bar.style.left = "0px";
			}
			this._body.style.display = "";
		}
	},
	onWindowResize: function() {
		if (this.$$bar && this.layoutSlot) {
			var height = $(this.awContext.scrollview).height();
			if (height) {
				this._bar.style.height = height + "px";
				this.resizeBar.style.height = height + "px";
				this.openerPicker.style.top = ((height - this.openerPickerHeight) / 2) + "px";
				this._body.style.height = (height - this._body.offsetTop) + "px";
				if (this.openedBox) {
					var boxHeight = 0;
					for (var ii = 0, jj = this._boxes.length; ii < jj; ii++) {
						var box = this._boxes[ii];
						if (box != this.openedBox && !box.$isHidden) {
							boxHeight += box.$$item.outerHeight(true);
						}
					}
					boxHeight = this._body.clientHeight - boxHeight;
					this.openedBox.$$item[0].style.height = boxHeight + "px";
					this.openedBox.$$body.height(this.openedBox.$$item.height() - this.openedBox.$$header.outerHeight(true));
					if (this.openedBox.content && this.openedBox.content.resize) {
						this.openedBox.content.resize(this.openedBox.$$body.height());
					}
					if (this.openedBox.onResize) {
						this.openedBox.onResize(this.openedBox.$$body.height());
					}
				}
			}
		}
	},
	onNotifyDataChange: function(field, value) {
		var metaData = {};
		metaData[field.$item.$bind] = value;
		this.applyChange(metaData);
		document.site.authorPage.notifyUpdate();
	},
	applyChange: function(newData) {
		if (newData && newData.$isHidden !== undefined) {
			if (this.menuItems.$addBlock) {
				this.menuItems.$addBlock[0].setMenu({
					$isDisabled: newData.$isHidden
				});
			}
			if (this.menuItems.$addSection) {
				this.menuItems.$addSection[0].setMenu({
					$isDisabled: newData.$isHidden
				});
			}
		}
		RawPage.prototype.applyChange.call(this, newData);
	},
	onMenuClick: function(menuItem) {
		switch (menuItem.$item.$bind) {
			case "$addSection":
			case "$addBlock":
				var newChild = this.awContext.drawHelper.addNewItem(this.awContext.awArticle, this.awContext.awItem, menuItem.$item.$bind.replace("$add", "").toLowerCase());
				this.awContext.authorPage.endTargetPageUpdate(newChild, true);
				return false;

			default:
				if (menuItem.$item.$fieldBind) {
					var newChild = this.awContext.drawHelper.onAddNewField(this.awContext, this.awContext.awItem, menuItem.$item);
					this.awContext.authorPage.endTargetPageUpdate(newChild, true);
				}
				break;
		}
	},
	onExcludeField: function($bind, isExcluded) {
		var targetPage = this.awContext.targetPage;
		var actionId = "$insertAction" + $bind;
		if (isExcluded) {
			if (!this.menuItems[actionId]) {
				var $actions = {};
				var $field = targetPage.$prototype.$properties[$bind];
				targetPage.onAuthoringExcludeField($bind, isExcluded, false);
				this._insertMenusBox.layoutContent.createChildItem({
					$category: "link",
					$skin: "s-aw-mn-field-link",
					$icon: {
						$mode: "iconText",
						$path: "authoring/s-aw-"
					},
					$bind: actionId,
					$fieldCategory: "field",
					$fieldBind: $bind,
					$css: "s-aw-add-item",
					$value: $field.$type.replace("application/x-", "").replace("/", "-")
				});
				this._setBoxTitle(this._insertMenusBox);
				var title = $field.$title ? targetPage.getLocalizeText($field.$title) : "";
				$actions[actionId] = {
					$title: (title == "") ? $bind : title
				};
				this.applyChange({
					$actions: $actions
				});
			}
		} else {
			if (this.menuItems[actionId]) {
				var menuItem = this.menuItems[actionId][0];
				this._insertMenusBox.layoutContent.removeItem(menuItem, true);
				delete this.menuItems[actionId];
				delete this.$menus[actionId];
			}
			if (targetPage.$freeFieldBinds.indexOf($bind) >= 0) {
				targetPage.$freeFieldBinds.splice(targetPage.$freeFieldBinds.indexOf($bind), 1);
			}
			targetPage.onAuthoringExcludeField($bind, isExcluded);
			this._setBoxTitle(this._insertMenusBox);
		}
	},
	toggleItemAuthoring: function(enable) {}
});