"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ToolsBar = require("syracuse-ui/lib/authoring/palette/toolsbar/toolsBar").ToolsBar;
var ColumnsToolbox = require("syracuse-ui/lib/authoring/palette/toolsbar/array/columnsToolbox").ColumnsToolbox;
var CardsToolBox = require("syracuse-ui/lib/authoring/palette/toolsbar/array/cardsToolBox").CardsToolBox;

function ArrayToolsBar(){
}

exports.ArrayToolsBar = helpers.defineClass(ArrayToolsBar, ToolsBar, {
    dispose: function(){
        if (this.columnsToolBox) {
            this.columnsToolBox.dispose();
        }
        this.columnsToolBox = this.graphToolBox = null;
        ToolsBar.prototype.dispose.call(this);
    },
    onEndChangeStep: function(){
        ToolsBar.prototype.onEndChangeStep.call(this);
        if (this.columnsToolBox) {
            this.columnsToolBox.toggle(true);
        }
    },
    _reloadInsertMenuBox: function(menuBox, $items){
        if (menuBox && menuBox.layoutContent) {
            if (menuBox.layoutContent) {
                var items = menuBox.layoutContent.items;
                while (items.length > 0) {
                    menuBox.layoutContent.removeItem(items[0], true);
                }
                this.removeItem(menuBox.layoutContent, true);
            }
            menuBox.$item.$layout.$items = $items;
            menuBox.ensureLinkSettings(menuBox.$item, menuBox.$item.$isBoxCollapsable);
            menuBox.renderLayoutContent();
        }
    },
    reloadInsertMenus: function(){
        this._clearInsertMenus();
        this._insertMenusBox.layoutContent.removeItems();
        this._loadInsertLinks();
    },
    _loadInsertLinks: function(){
        var binds = Object.keys(this.awContext.$prototype.$properties);
        if (binds.length > 0) {
            var $actions = {};
            for (var ii = 0, jj = binds.length; ii < jj; ii++) {
                var bind = binds[ii];
                if (bind.charAt(0) != "$") {
                    var $field = this.awContext.$prototype.$properties[bind];
                    if ($field && $field.$type && !$field.$isExcluded) {
                        var actionId = "$insertAction" + bind;
                        var title = $field.$title ? this.awContext.targetPage.getLocalizeText($field.$title) : "";
                        $actions[actionId] = {
                            $title: (title == "") ? bind : title
                        };
                        this._insertMenusBox.layoutContent.createChildItem({
                            $category: "link",
                            $skin: "s-aw-mn-field-link",
                            $bind: actionId,
                            $fieldCategory: "field",
                            $fieldBind: bind,
                            $css: "s-aw-add-item",
                            $value: $field.$type.replace("application/x-", "").replace("/", "-")
                        });
                    }
                }
            }
            var $item = this.awContext.awArticle.$item;
            var $fields = this.awContext.authorPage.getItemSettings($item.$layout);
            for (var ii = 0, jj = $fields.length; ii < jj; ii++) {
                if ($fields[ii].$bind) {
                    var $action = $actions["$insertAction" + $fields[ii].$bind];
                    if ($action) {
                        $action.$isHidden = true;
                    }
                }
            }
            if ($item.$cards) {
                var $fields = this.awContext.authorPage.getItemSettings($item.$cards.$layout);
                for (var ii = 0, jj = $fields.length; ii < jj; ii++) {
                    if ($fields[ii].$bind) {
                        var $action = $actions["$insertAction" + $fields[ii].$bind];
                        if ($action) {
                            $action.$isHidden = true;
                        }
                    }
                }
            }
            this.applyChange({
                $actions: $actions
            });
        }
    },
    ensureArrayBoxVisibility: function(resize){
        var hideColumns = false, hideCards = false;
        if (this.awContext.awArticle.$item.$format == "cards") {
            hideColumns = true;
        }
        else {
            if (this.awContext.awArticle.$item.$cards) {
                switch (this.awContext.awArticle.$item.$cards.$position || "inline") {
                    case "popup":
                        hideColumns = true;
                        break;
                    default:
                        break;
                }
            }
            else {
                hideCards = true;
            }
        }
        // hideCards = true;
        this._hideBox(this.columnsToolBox, hideColumns);
        this._hideBox(this.articleToolBox, hideCards);
        if (hideColumns && this.openedBox == this.columnsToolBox.toolbarBox) {
            this.collapseBox(this.articleToolBox.toolbarBox, true);
        }
        if (hideCards && this.openedBox == this.articleToolBox.toolbarBox) {
            this.collapseBox(this.columnsToolBox.toolbarBox, true);
        }
        if (resize !== false) {
            this.onWindowResize();
        }
    },
    _createColumnsToolbox: function(){
        var box = this.createBox({
            $category: "section",
            $title: this.awContext.localize.aw_listColumns,
            $layout: {
                $items: []
            }
        });
        this.columnsToolBox = box.toolBox = new ColumnsToolbox();
        this.columnsToolBox.load(this.awContext, box);
    },
    _createGrapToolbox: function(){
        var list = this.awContext.awArticle;
        var chart = list.chart;
        if (chart && chart.$authoringType == "cube$highCharts") {
            var $fieldCube = list.$item.$cube || list.$prototype.$cube;
            if ($fieldCube && $fieldCube.$measures) {
                var $items = [];
                var $itemCube = list.$item.$cube || {};
                var $itemMeasures = $itemCube.$measures || {};
                var delta = {};
                var binds = Object.keys($fieldCube.$measures);
                for (var ii = 0, jj = binds.length; ii < jj; ii++) {
                    var bind = binds[ii];
                    var $measure = $fieldCube.$measures[bind];
                    var $field = chart.createChoices();
                    $field.$title = $measure.$title ? this.awContext.targetPage.getLocalizeText($measure.$title) : "";
                    var $toolBind = "$cube" + bind;
                    this.$prototype.$properties[$toolBind] = $field;
                    $items.push({
                        $category: "field",
                        $bind: $toolBind,
                        $measure: bind,
                        $icon: {
                            $mode: "icon",
                            $path: "graphics/s-graph-"
                        },
                        $choiceLayout: "3",
                        $isEditMode: true,
                        $skin: "s-aw-field"
                    });
                    delta[$toolBind] = ($itemMeasures[bind] ? $itemMeasures[bind].$style : null) || "area";
                }
                this.graphToolBox = this.createBox({
                    $category: "section",
                    $skin: "s-aw-list",
                    $title: this.awContext.localize.aw_graph,
                    $layout: {
                        $items: $items
                    }
                });
                this.applyChange(delta);
            }
        }
    },
    _createArticleToolbox: function(){
        var box = this.createBox({
            $category: "section",
            $title: this.awContext.localize.aw_listCard,
            $layout: {
                $items: []
            }
        });
        this.articleToolBox = box.toolBox = new CardsToolBox();
        this.articleToolBox.load(this.awContext, box);
    },
    _createInsertToolbox: function($items){
        var box = this.createBox({
            $category: "section",
            $skin: "s-aw-toolbox",
            $title: this.awContext.localize.aw_insert,
            $layout: {
                $items: [{
                    $category: "link",
                    $skin: "s-aw-menus-link",
                    $css: "s-aw-add-section s-aw-add-item",
                    $bind: "$addSection",
                    $value: "add-section",
                    $icon: {
                        $mode: "iconText",
                        $path: "authoring/s-aw-"
                    }
                }, {
                    $category: "link",
                    $skin: "s-aw-menus-link",
                    $css: "s-aw-add-block s-aw-add-item",
                    $bind: "$addBlock",
                    $value: "add-block",
                    $icon: {
                        $mode: "iconText",
                        $path: "authoring/s-aw-"
                    }
                }, {
                    $category: "menus",
                    $itemSkin: "s-aw-mn-field-link",
                    $titleIcon: {
                        $value: "template",
                        $path: "authoring/s-aw-"
                    },
                    $itemIcon: {
                        $mode: "iconText",
                        $path: "authoring/s-aw-"
                    },
                    $layout: {
                        $items: []
                    }
                }]
            }
        });
        this._insertMenusBox = box.content.layoutContent.items[2];
        this._loadInsertLinks();
    },
    _createBoxes: function(){
        this._createColumnsToolbox();
        this._createArticleToolbox();
        this._createGrapToolbox();
        this._createInsertToolbox();
        this.ensureArrayBoxVisibility();
    },
    _getDefaultBox: function(){
        return (!this.columnsToolBox.$isHidden) ? this.columnsToolBox : this.articleToolBox;
    },
    onNotifyDataChange: function(field, value){
        if (field.$item.$measure) {
            var $cube = this.awContext.awArticle.$item.$cube || {};
            $cube.$measures = $cube.$measures || {};
            ($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {}).$style = value;
            this.awContext.awArticle.awAddin.applyFieldDesignMetaDataChange({
                $cube: $cube
            });
        }
        ToolsBar.prototype.onNotifyDataChange.call(this, field, value);
    },
    onExcludeField: function($bind, isExcluded){
        if ($bind) {
            var $actions = {};
            $actions[$bind] = {
                $isHidden: isExcluded
            };
            this.applyChange({
                $actions: $actions
            });
        }
    }
});
