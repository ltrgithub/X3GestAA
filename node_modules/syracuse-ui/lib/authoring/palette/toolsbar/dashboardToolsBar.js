"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ToolsBar = require("syracuse-ui/lib/authoring/palette/toolsbar/toolsbar").ToolsBar;
function DashboardToolsBar(){
}

exports.DashboardToolsBar = helpers.defineClass(DashboardToolsBar, ToolsBar, {
    dispose: function(){
        this._insertLinksMenusBox = null;
        ToolsBar.prototype.dispose.call(this);
    },
    _loadInsertLinks: function(){
        var $field, actionId, title, bind, $item;
        this._$insertLinksItems = [];
        this._$insertItems = [];
        this._$insertActions = {};
        var binds = Object.keys(this.awContext.$prototype.$properties);
        for (var ii = 0, jj = binds.length; ii < jj; ii++) {
            var bind = binds[ii];
            if (bind.charAt(0) != "$") {
                var $field = this.awContext.$prototype.$properties[bind];
                if ($field && $field.$type) {
                    actionId = "$insertAction" + bind;
                    title = $field.$title ? this.awContext.targetPage.getLocalizeText($field.$title) : "";
                    this._$insertActions[actionId] = {
                        $title: (title == "") ? bind : title
                    };
                    $item = {
                        $category: "link",
                        $skin: "s-aw-mn-field-link",
                        $icon: {
                            $mode: "iconText",
                            $path: "authoring/s-aw-"
                        },
                        $bind: actionId
                    };
                    if ($field.$type == "application/x-vignette" && $field.$format == "$menu") {
                        $item.$fieldCategory = "menus";
                        $item.$vignette = bind;
                        $item.$css = "s-aw-add-block s-aw-add-item";
                    }
                    else {
                        $item.$fieldCategory = "field";
                        $item.$fieldBind = bind;
                        $item.$css = "s-aw-add-item";
                        $item.$value = $field.$type.replace("application/x-", "").replace("/", "-");
                    }
                    this._$insertItems.push($item);
                }
            }
        }
        
        for (var mm = 0; mm < 2; mm++) {
            var $menus = mm == 0 ? this.awContext.$prototype.$links : this.awContext.$prototype.$actions;
            if ($menus) {
                var binds = Object.keys($menus);
                for (var ii = 0, jj = binds.length; ii < jj; ii++) {
                    bind = binds[ii];
                    $field = $menus[bind];
                    actionId = "$insertAction" + bind;
                    title = $field.$title ? this.awContext.targetPage.getLocalizeText($field.$title) : "";
                    this._$insertActions[actionId] = this._$insertActions[actionId] = {
                        $title: (title == "") ? bind : title
                    };
                    this._$insertLinksItems.push({
                        $category: "link",
                        $skin: "s-aw-mn-field-link",
                        $bind: actionId,
                        $fieldBind: bind,
                        $fieldCategory: "link",
                        $css: "s-aw-add-item",
                        $value: "menu"
                    });
                }
            }
        }
        var fields = this.awContext.drawHelper.extractFields(this.awContext.awArticle.layoutContent);
        for (var ii = 0, jj = fields.length; ii < jj; ii++) {
            actionId = "$insertAction" + fields[ii].$item.$bind;
            if (this._$insertActions[actionId]) {
                this._$insertActions[actionId].$isHidden = true;
                delete this._$insertActions[actionId];
            }
        }
        this.applyChange({
            $actions: this._$insertActions
        });
        
    },
    reloadInsertMenus: function(){
        ToolsBar.prototype.reloadInsertMenus.call(this);
        this._reloadInsertMenuBox(this._insertLinksMenusBox, this._$insertLinksItems);
    },
    _createBoxes: function(){
        this._loadInsertLinks();
        this.applyChange({
            $links: {
                $addMenus: {
                    $title: this.awContext.localize.aw_addMenus
                }
            }
        });
        this._createArticleToolbox();
        var box = this.createBox({
            $category: "section",
            $skin: "s-aw-toolbox",
            $title: this.awContext.localize.aw_insert,
            $layout: {
                $items: [{
                    $category: "link",
                    $skin: "s-aw-menus-link",
                    $css: "s-aw-add-section s-aw-add-item",
                    $bind: "$addSection",
                    $value: "add-section",
                    $icon: {
                        $mode: "iconText",
                        $path: "authoring/s-aw-"
                    }
                }, {
                    $category: "link",
                    $skin: "s-aw-menus-link",
                    $css: "s-aw-add-block s-aw-add-item",
                    $bind: "$addMenus",
                    $value: "add-menu-group",
                    $icon: {
                        $mode: "iconText",
                        $path: "authoring/s-aw-"
                    }
                }, {
                    $layoutType: "tabs",
                    $items: [{
                        $category: "section",
                        $skin: "s-aw-tb-fields",
                        $isContentLoaded: true,
                        $title: this.awContext.localize.aw_insertLinks,
                        $layout: {
                            $items: this._$insertLinksItems
                        }
                    }, {
                        $category: "section",
                        $skin: "s-aw-tb-fields",
                        $isContentLoaded: true,
                        $title: this.awContext.localize.aw_insertVignettes,
                        $layout: {
                            $items: this._$insertItems
                        }
                    }]
                }]
            }
        });
        this._insertMenusBox = box.content.layoutContent.items[2];
        this._insertLinksMenusBox = box.content.layoutContent.items[3];
    },
    applyChange: function(newData){
        if (newData && newData.$isHidden !== undefined) {
            if (this.menuItems.$addMenus) {
                this.menuItems.$addMenus[0].setMenu({
                    $isDisabled: newData.$isHidden
                });
            }
        }
        ToolsBar.prototype.applyChange.call(this, newData);
    },
    onMenuClick: function(menuItem){
        switch (menuItem.$item.$bind) {
            case "$addMenus":
                var newChild = this.awContext.drawHelper.addNewItem(this.awContext.awArticle, this.awContext.awItem, "block", null, undefined, undefined, "menus");
                this.awContext.authorPage.endTargetPageUpdate(newChild, true);
                return false;
            default:
                if (menuItem.$item.$vignette) {
                    var newChild = this.awContext.drawHelper.onAddNewVignette(this.awContext, this.awContext.awItem, menuItem.$item);
                    this.awContext.authorPage.endTargetPageUpdate(newChild, true);
                    return false;
                }
                break;
        }
        return ToolsBar.prototype.onMenuClick.call(this, menuItem);
    }
});
