"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ToolsBar = require("syracuse-ui/lib/authoring/palette/toolsbar/toolsBar").ToolsBar;

function DashboardToolsBar(){
}

exports.DashboardToolsBar = helpers.defineClass(DashboardToolsBar, ToolsBar, {
    dispose: function(){
        this._insertFreeVignettesBox = this._insertFreeLinksBox = null;
        ToolsBar.prototype.dispose.call(this);
    },
    _loadAvailableVignettes: function($vignetteBinds){
        if ($vignetteBinds.length > 0) {
            var $actions = {};
            for (var ii = 0, jj = $vignetteBinds.length; ii < jj; ii++) {
                var $bind = $vignetteBinds[ii];
                if ($bind.charAt(0) != "$") {
                    var $field = this.awContext.$prototype.$properties[$bind];
                    if ($field && $field.$type) {
                        var actionId = "$insertAction" + $bind;
                        var title = $field.$title ? this.awContext.targetPage.getLocalizeText($field.$title) : "";
                        $actions[actionId] = {
                            $title: (title == "") ? $bind : title
                        };
                        var $item = {
                            $category: "link",
                            $skin: "s-aw-mn-field-link",
                            $icon: {
                                $mode: "iconText",
                                $path: "authoring/s-aw-"
                            },
                            $bind: actionId
                        };
                        if ($field.$type == "application/x-vignette" && $field.$format == "$menu") {
                            $item.$fieldCategory = "menus";
                            $item.$vignette = $bind;
                            $item.$css = "s-aw-add-block s-aw-add-item";
                        }
                        else {
                            $item.$fieldCategory = "field";
                            $item.$fieldBind = $bind;
                            $item.$css = "s-aw-add-item";
                            $item.$value = $field.$type.replace("application/x-", "").replace("/", "-");
                        }
                        this._insertFreeVignettesBox.layoutContent.createChildItem($item);
                    }
                }
            }
            this.applyChange({
                $actions: $actions
            });
        }
    },
    loadAvailableVignettes: function(){
        this._loadAvailableVignettes(this.awContext.targetPage.$freeFieldBinds);
        this._loadAvailableVignettes(Object.keys(this.awContext.targetPage.garbageFields));
        this._setBoxTitle(this._insertFreeVignettesBox);
    },
    _loadAvailableLinks: function($availableLinks){
        var $binds = Object.keys($availableLinks);
        if ($binds.length > 0) {
            var $actions = {};
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                var $bind = $binds[ii];
                var $field = $availableLinks[$bind];
                if ($field) { //important test for garbage link 
                    var actionId = "$insertAction" + $bind;
                    var title = $field.$title ? this.awContext.targetPage.getLocalizeText($field.$title) : "";
                    $actions[actionId] = $actions[actionId] = {
                        $title: (title == "") ? $bind : title
                    };
                    this._insertFreeLinksBox.layoutContent.createChildItem({
                        $category: "link",
                        $skin: "s-aw-mn-field-link",
                        $bind: actionId,
                        $fieldBind: $bind,
                        $fieldCategory: "link",
                        $css: "s-aw-add-item",
                        $value: "menu"
                    });
                }
            }
            this.applyChange({
                $actions: $actions
            });
        }
        this._setBoxTitle(this._insertFreeLinksBox);
    },
    loadAvailableLinks: function(){
        this._loadAvailableLinks(this.awContext.targetPage.freeLinks);
        this._loadAvailableLinks(this.awContext.targetPage.garbageLinks);
    },
    reloadInsertMenus: function(){
        this._clearInsertMenus();
        this._insertFreeLinksBox.layoutContent.removeItems();
        this._insertFreeVignettesBox.layoutContent.removeItems();
        this.awContext.targetPage.warnAdministrationUpdates(false);
        this.loadAvailableLinks();
        this.loadAvailableVignettes();
        this.ensureOpenedTab();
    },
    ensureOpenedTab: function(){
        var layoutTabs = this._insertFreeLinksBox.layoutParent;
        if (!layoutTabs.tabOpened || (layoutTabs.tabOpened && layoutTabs.tabOpened.$isHidden)) {
            if (!this._insertFreeLinksBox.$isHidden) {
                this._insertFreeLinksBox.openBox(true);
            }
            else {
                if (!this._insertFreeVignettesBox.$isHidden) {
                    this._insertFreeVignettesBox.openBox(true);
                }
            }
        }
    },
    onEndExcludeItem: function(){
        this.ensureOpenedTab();
        ToolsBar.prototype.onEndExcludeItem.call(this);
    },
    onExcludeField: function($bind, isExcluded, isVignette){
        if ($bind) {
            var actionId = "$insertAction" + $bind;
            if (isExcluded) {
                if (!this.menuItems[actionId]) {
                    var $actions = {};
                    var menuBox, $item;
                    var $field = this.awContext.targetPage.$menus[$bind];
                    if ($field) {
                        menuBox = this._insertFreeLinksBox;
                        $item = {
                            $category: "link",
                            $skin: "s-aw-mn-field-link",
                            $bind: actionId,
                            $fieldBind: $bind,
                            $fieldCategory: "link",
                            $css: "s-aw-add-item",
                            $value: "menu"
                        };
                        this.awContext.targetPage.onAuthoringExcludeField($bind, isExcluded, true);
                    }
                    else {
                        $field = this.awContext.targetPage.$prototype.$properties[$bind];
                        $item = {
                            $category: "link",
                            $skin: "s-aw-mn-field-link",
                            $icon: {
                                $mode: "iconText",
                                $path: "authoring/s-aw-"
                            },
                            $bind: actionId
                        };
                        if ($field.$type == "application/x-vignette" && $field.$format == "$menu") {
                            $item.$fieldCategory = "menus";
                            $item.$vignette = $bind;
                            $item.$css = "s-aw-add-block s-aw-add-item";
                        }
                        else {
                            $item.$fieldCategory = "field";
                            $item.$fieldBind = $bind;
                            $item.$css = "s-aw-add-item";
                            $item.$value = $field.$type.replace("application/x-", "").replace("/", "-");
                        }
                        menuBox = this._insertFreeVignettesBox;
                        this.awContext.targetPage.onAuthoringExcludeField($bind, isExcluded, false);
                    }
                    menuBox.layoutContent.createChildItem($item);
                    this._setBoxTitle(menuBox);
                    var title = $field.$title ? this.awContext.targetPage.getLocalizeText($field.$title) : "";
                    $actions[actionId] = {
                        $title: (title == "") ? $bind : title
                    };
                    this.applyChange({
                        $actions: $actions
                    });
                }
            }
            else {
                var menuBox;
                if (this.menuItems[actionId]) {
                    var menuItem = this.menuItems[actionId][0];
                    if (menuItem.boxParent == this._insertFreeLinksBox) {
                        isVignette = false;
                        menuBox = this._insertFreeLinksBox;
                    }
                    else {
                        isVignette = true;
                        menuBox = this._insertFreeVignettesBox;
                    }
                    menuBox.layoutContent.removeItem(menuItem, true);
                    delete this.menuItems[actionId];
                    delete this.$menus[actionId];
                }
                if (!isVignette) {
                    menuBox = this._insertFreeLinksBox;
                    delete this.awContext.targetPage.freeLinks[$bind];
                    this.awContext.targetPage.onAuthoringExcludeField($bind, isExcluded, true);
                }
                else {
                    menuBox = this._insertFreeVignettesBox;
                    if (this.awContext.targetPage.$freeFieldBinds.indexOf($bind) >= 0) {
                        this.awContext.targetPage.$freeFieldBinds.splice(this.awContext.targetPage.$freeFieldBinds.indexOf($bind), 1);
                        delete this.awContext.targetPage.registeredVignettes[$bind];
                    }
                    this.awContext.targetPage.onAuthoringExcludeField($bind, isExcluded, false);
                }
                this._setBoxTitle(menuBox);
            }
            this.ensureOpenedTab();
        }
    },
    _createBoxes: function(){
        this.awContext.targetPage.warnAdministrationUpdates(false);
        this.applyChange({
            $links: {
                $addMenus: {
                    $title: this.awContext.localize.aw_addMenus
                }
            }
        });
        this._createArticleToolbox();
        var box = this.createBox({
            $category: "section",
            $skin: "s-aw-toolbox",
            $title: this.awContext.localize.aw_insert,
            $layout: {
                $items: [{
                    $category: "link",
                    $skin: "s-aw-menus-link",
                    $css: "s-aw-add-section s-aw-add-item",
                    $bind: "$addSection",
                    $value: "add-section",
                    $icon: {
                        $mode: "iconText",
                        $path: "authoring/s-aw-"
                    }
                }, {
                    $category: "link",
                    $skin: "s-aw-menus-link",
                    $css: "s-aw-add-block s-aw-add-item",
                    $bind: "$addMenus",
                    $value: "add-menu-group",
                    $icon: {
                        $mode: "iconText",
                        $path: "authoring/s-aw-"
                    }
                }, {
                    $layoutType: "tabs",
                    $items: [{
                        $category: "section",
                        $skin: "s-aw-tb-fields",
                        $isContentLoaded: true,
                        $title: this.awContext.localize.aw_insertLinks,
                        $layout: {
                            $items: []
                        }
                    }, {
                        $category: "section",
                        $skin: "s-aw-tb-fields",
                        $isContentLoaded: true,
                        $title: this.awContext.localize.aw_insertVignettes,
                        $layout: {
                            $items: []
                        }
                    }]
                }]
            }
        });
        box.$$body[0].style.overflow = "auto";
        this._insertFreeLinksBox = box.content.layoutContent.items[2].items[0];
        this._insertFreeVignettesBox = box.content.layoutContent.items[2].items[1];
        this.loadAvailableLinks();
        this.loadAvailableVignettes();
        this.ensureOpenedTab();
    },
    applyChange: function(newData){
        if (newData && newData.$isHidden !== undefined) {
            if (this.menuItems.$addMenus) {
                this.menuItems.$addMenus[0].setMenu({
                    $isDisabled: newData.$isHidden
                });
            }
        }
        ToolsBar.prototype.applyChange.call(this, newData);
    },
    onMenuClick: function(menuItem){
        switch (menuItem.$item.$bind) {
            case "$addMenus":
                var newChild = this.awContext.drawHelper.addNewItem(this.awContext.awArticle, this.awContext.awItem, "block", null, undefined, undefined, "menus");
                this.awContext.authorPage.endTargetPageUpdate(newChild, true);
                return false;
            default:
                if (menuItem.$item.$vignette) {
                    var newChild = this.awContext.drawHelper.onAddNewVignette(this.awContext, this.awContext.awItem, menuItem.$item);
                    this.awContext.authorPage.endTargetPageUpdate(newChild, true);
                    return false;
                }
                break;
        }
        return ToolsBar.prototype.onMenuClick.call(this, menuItem);
    }
});
