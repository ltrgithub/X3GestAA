"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var ArticleToolBox = require("syracuse-ui/lib/authoring/palette/articleToolBox").ArticleToolBox;
var ColumnsToolbox = require("syracuse-ui/lib/authoring/palette/columnsToolbox").ColumnsToolbox;
function ToolsBar(){
}

exports.ToolsBar = helpers.defineClass(ToolsBar, RawPage, {
    loadToolbar: function(awContext){
        this.isAuthoringEventEnabled = true;
        this.awContext = awContext;
        this._initializePage();
        this._unregisterResizer = true;
        this.$autoFetch = false;
        this.$item = {};
        this.$prototype = {
            $properties: {},
            $links: {
                $addSection: {
                    $title: "{@addSection}"
                },
                $addBlock: {
                    $title: "{@addBlock}"
                },
                $addMenus: {
                    $title: "{@addMenus}"
                },
                $defaultLayout: {
                    $title: "{@defaultLayout}"
                },
                "pattern-headerTabs": {
                    $title: "{@autoLayout}"
                },
                "pattern-1": {
                    $title: "{@layoutComposite}"
                },
                "pattern-2": {
                    $title: "{@layoutComposite}"
                },
                "pattern-3": {
                    $title: "{@layoutComposite}"
                },
                "pattern-4": {
                    $title: "{@layoutComposite}"
                }
            }
        };
        this.$prototype.$localization = this.awContext.palette.$prototype.$localization;
        
        this.preferences = {
            isDocked: true,
            isCollapsed: this.awContext.dialogWrapper != null
        };
        
        this.$$item = this.$$slot = $(this.layoutSlot = document.createElement("div"));
        this.layoutSlot.className = "s-aw-toolbar-slot";
        this.layoutSlot.setAttribute("data-s-article", this.id);
        this.awContext.targetPage._item.insertBefore(this.layoutSlot, this.awContext.targetPage._item.firstChild);
        
        this.loadBox();
        
    },
    onExcludeItem: function(){
        this.awContext.articleToolBox.toggle(true);
    },
    onEndChangeStep: function(){
        this.reloadFields();
        this.awContext.articleToolBox.toggle(true);
        if (this.awContext.columnsToolBox) {
            this.awContext.columnsToolBox.toggle(true);
        }
    },
    dispose: function(){
        if (this._resizer) {
            this._resizer.dispose();
            this._resizer = null;
        }
        this.toggleItemAuthoring(false);
        if (this._boxes) {
            for (var ii = 0, jj = this._boxes.length; ii < jj; ii++) {
                delete this._boxes[ii].toolBox;
                delete this._boxes[ii].content;
            }
        }
        if (this.layoutSlot) {
            document.site.removeDomChild(this.layoutSlot);
        }
        if (this.$prototype) {
            this.$prototype = this.$prototype.$localization = null;
        }
        if (this.awContext) {
            if (this.awContext.articleToolBox) {
                this.awContext.articleToolBox.dispose();
            }
            if (this.awContext.columnsToolBox) {
                this.awContext.columnsToolBox.dispose();
            }
            this.awContext.insertToolBox = this.awContext.modelsToolBox = null;
            this.awContext.articleToolBox = this.awContext.columnsToolBox = this.awContext.graphToolBox = null;
        }
        this.awContext = this._boxes = this.layoutSlot = this.$$item = this.$$slot = null;
    },
    _fillInsertMenusBox: function($actions, $items, $type){
        var $menus = this.awContext.$prototype[$type];
        if ($menus) {
            var binds = Object.keys($menus);
            for (var ii = 0, jj = binds.length; ii < jj; ii++) {
                var bind = binds[ii];
                var $field = $menus[bind];
                var actionId = "$fieldLink" + bind;
                var title = $field.$title ? this.awContext.targetPage.getLocalizeText($field.$title) : "";
                $actions[actionId] = {
                    $title: (title == "") ? bind : title
                };
                $items.push({
                    $bind: actionId,
                    $fieldBind: bind,
                    $fieldCategory: "link",
                    $css: "s-aw-add-item",
                    $value: "menu"
                });
            }
        }
    },
    _createGrapToolbox: function(){
        if (this.awContext.isArrayField) {
            var chart = this.awContext.awArticle.chart;
            if (chart && chart.$authoringType == "cube$highCharts") {
                var $fieldCube = this.awContext.awArticle.$prototype.$cube;
                if ($fieldCube && $fieldCube.$measures) {
                    var $items = [];
                    var $itemCube = this.awContext.awArticle.$item.$cube || {};
                    var $itemMeasures = $itemCube || {};
                    var delta = {};
                    var binds = Object.keys($fieldCube.$measures);
                    for (var ii = 0, jj = binds.length; ii < jj; ii++) {
                        var bind = binds[ii];
                        var $measure = $fieldCube.$measures[bind];
                        var $field = chart.createChoices();
                        $field.$title = $measure.$title ? this.awContext.targetPage.getLocalizeText($measure.$title) : "";
                        var $toolBind = "$cube" + bind;
                        this.$prototype.$properties[$toolBind] = $field;
                        $items.push({
                            $category: "field",
                            $bind: $toolBind,
                            $measure: bind,
                            $icon: {
                                $mode: "icon",
                                $path: "graphics/s-graph-"
                            },
                            $choiceLayout: "3",
                            $isEditMode: true,
                            $skin: "s-aw-field"
                        });
                        delta[$toolBind] = ($itemMeasures[bind] ? $itemMeasures[bind].$style : null) || "area";
                    }
                    this.awContext.graphToolBox = this.createBox({
                        $category: "section",
                        $skin: "s-aw-list",
                        $title: this.awContext.localize.aw_graph,
                        $layout: {
                            $items: $items
                        }
                    });
                    this.applyChange(delta);
                }
            }
        }
    },
    _fillInsertBox: function(addLinks){
        var $items = [];
        var $actions = {};
        if (addLinks) {
            this._fillInsertMenusBox($actions, $items, "$links");
            this._fillInsertMenusBox($actions, $items, "$actions");
        }
        else {
            var $properties = this.awContext.$prototype.$properties;
            var binds = Object.keys($properties);
            for (var ii = 0, jj = binds.length; ii < jj; ii++) {
                var bind = binds[ii];
                if (bind.charAt(0) != "$") {
                    var $field = $properties[bind];
                    if ($field && $field.$type) {
                        var actionId = "$fieldLink" + bind;
                        var title = $field.$title ? this.awContext.targetPage.getLocalizeText($field.$title) : "";
                        $actions[actionId] = {
                            $title: (title == "") ? bind : title
                        };
                        $items.push({
                            $bind: actionId,
                            $fieldCategory: "field",
                            $fieldBind: bind,
                            $css: "s-aw-add-item",
                            $value: $field.$type.replace("application/x-", "").replace("/", "-")
                        });
                    }
                }
            }
        }
        
        var fields = this.awContext.drawHelper.extractFields(this.awContext.awArticle.layoutContent);
        for (var ii = 0, jj = fields.length; ii < jj; ii++) {
            var $action = $actions["$fieldLink" + fields[ii].$item.$bind];
            if ($action) {
                $action.$isHidden = true;
            }
        }
        this.applyChange({
            $actions: $actions
        });
        return $items;
    },
    reloadFields: function(){
        var boxIds = ["$menuInsertLinks", "$menuInsertFields"];
        for (var ii = 0, jj = boxIds.length; ii < jj; ii++) {
            var menuBox = this.idMap[boxIds[ii]];
            if (menuBox && menuBox.layoutContent) {
                var items = menuBox.layoutContent.items;
                while (items.length > 0) {
                    menuBox.layoutContent.removeItem(items[0], true);
                }
                this.removeItem(menuBox.layoutContent, true);
            }
        }
        var ids = Object.keys(this.$menus);
        for (var ii = 0, jj = ids.length; ii < jj; ii++) {
            var id = ids[ii];
            if (id.indexOf("$fieldLink") >= 0) {
                delete this.menuItems[id];
                delete this.$menus[id];
            }
        }
        for (var ii = 0, jj = boxIds.length; ii < jj; ii++) {
            var menuBox = this.idMap[boxIds[ii]];
            if (menuBox) {
                menuBox.$item.$layout.$items = this._fillInsertBox(boxIds[ii] == "$menuInsertLinks");
                menuBox.ensureLinkSettings(menuBox.$item, menuBox.$item.$isCollapsable);
                menuBox.renderLayoutContent();
            }
        }
    },
    ensureArrayBoxVisibility: function(resize){
        var hideColumns = false, hideCards = false;
        if (this.awContext.isArrayField) {
            if (this.awContext.awArticle.$item.$format == "cards") {
                hideColumns = true;
            }
            else {
                if (this.awContext.awArticle.$item.$cards) {
                    switch (this.awContext.awArticle.$item.$cards.$position || "inline") {
                        case "popup":
                            hideColumns = true;
                            break;
                        default:
                            break;
                    }
                }
                else {
                    hideCards = true;
                }
            }
            this._hideBox(this.awContext.columnsToolBox, hideColumns);
            this._hideBox(this.awContext.articleToolBox, hideCards);
            if (hideColumns && this.openedBox == this.awContext.columnsToolBox.toolbarBox) {
                this.collapseBox(this.awContext.articleToolBox.toolbarBox, true);
            }
            if (hideCards && this.openedBox == this.awContext.articleToolBox.toolbarBox) {
                this.collapseBox(this.awContext.columnsToolBox.toolbarBox, true);
            }
            if (resize !== false) {
                this.onWindowResize();
            }
        }
    },
    _createColumnsToolbox: function(){
        if (this.awContext.isArrayField) {
            var box = this.createBox({
                $category: "section",
                $title: this.awContext.localize.aw_listColumns,
                $layout: {
                    $items: []
                }
            });
            this.awContext.columnsToolBox = box.toolBox = new ColumnsToolbox();
            this.awContext.columnsToolBox.load(this.awContext, box);
        }
    },
    _createArticleToolbox: function(){
        var box = this.createBox({
            $category: "section",
            $title: this.awContext.localize[this.awContext.isArrayField ? "aw_listCard" : "aw_viewTypeContent"],
            $layout: {
                $items: []
            }
        });
        this.awContext.articleToolBox = box.toolBox = new ArticleToolBox();
        this.awContext.articleToolBox.load(this.awContext, box);
    },
    _createInsertToolbox: function(){
        this.awContext.insertToolBox = this.createBox({
            $category: "section",
            $title: this.awContext.localize.aw_insert,
            $layout: {
                $items: [{
                    $category: "menus",
                    $itemIcon: {
                        $mode: "iconText",
                        $path: "authoring/s-aw-"
                    },
                    $skin: "s-aw-menus",
                    $itemSkin: "s-aw-menus-link",
                    $layout: {
                        $items: [{
                            $css: "s-aw-add-section s-aw-add-item",
                            $bind: "$addSection",
                            $value: "add-section"
                        }, {
                            $css: "s-aw-add-block s-aw-add-item",
                            $bind: "$addBlock",
                            $value: "add-block",
                            $isHidden: this.awContext.targetPage.isDashBoard
                        }, {
                            $category: "menus",
                            $id: "$menuInsertFields",
                            $itemSkin: "s-aw-mn-field-link",
                            $titleIcon: {
                                $value: "template",
                                $path: "authoring/s-aw-"
                            },
                            $itemIcon: {
                                $mode: "iconText",
                                $path: "authoring/s-aw-"
                            },
                            $layout: {
                                $items: this._fillInsertBox()
                            }
                        }]
                    }
                }]
            }
        });
    },
    _createinsertLinksToolbox: function(){
        this.awContext.insertLinksToolBox = this.createBox({
            $category: "section",
            $title: this.awContext.localize.aw_insert_links,
            $layout: {
                $items: [{
                    $category: "menus",
                    $itemIcon: {
                        $mode: "iconText",
                        $path: "authoring/s-aw-"
                    },
                    $skin: "s-aw-menus",
                    $itemSkin: "s-aw-menus-link",
                    $layout: {
                        $items: [{
                            $css: "s-aw-add-section s-aw-add-item",
                            $bind: "$addSection",
                            $value: "add-section"
                        }, {
                            $css: "s-aw-add-block s-aw-add-item",
                            $bind: "$addMenus",
                            $value: "add-menu-group"
                        }, {
                            $category: "menus",
                            $id: "$menuInsertLinks",
                            $itemSkin: "s-aw-mn-field-link",
                            $titleIcon: {
                                $value: "template",
                                $path: "authoring/s-aw-"
                            },
                            $itemIcon: {
                                $mode: "iconText",
                                $path: "authoring/s-aw-"
                            },
                            $layout: {
                                $items: this._fillInsertBox(true)
                            }
                        }]
                    }
                }]
            }
        });
    },
    _createModelsToolbox: function(){
        this.awContext.modelsToolBox = this.createBox({
            $category: "section",
            $title: this.awContext.localize.aw_models,
            $layout: {
                $items: [{
                    $id: "s-awModels",
                    $category: "menus",
                    $itemIcon: {
                        $mode: "icon",
                        $path: "authoring/s-aw-"
                    },
                    $skin: "s-aw-menus",
                    $itemSkin: "s-aw-menus-link",
                    $layout: {
                        $items: [{
                            $icon: null,
                            $bind: "pattern-headerTabs"
                        }, {
                            $icon: null,
                            $bind: "$defaultLayout"
                        }, {
                            $bind: "pattern-1"
                        }, {
                            $bind: "pattern-2"
                        }, {
                            $bind: "pattern-3"
                        }, {
                            $bind: "pattern-4"
                        }]
                    }
                }]
            }
        });
    },
    drawBox: function(){
        document.site.emptyDom(this.layoutSlot);
        this._bar = document.createElement("div");
        this._bar.className = "s-aw-toolbar";
        this.$$bar = $(this._bar);
        this.appendPickerBar();
        
        this._body = document.createElement("div");
        this._body.className = "s-aw-toolbar-body";
        this._$$body = $(this._body);
        this._bar.appendChild(this._body);
        this._boxes = [];
        
        this._createColumnsToolbox();
        this._createArticleToolbox();
        this._createGrapToolbox();
        this._createInsertToolbox();
        if (this.awContext.targetPage.isDashBoard) {
            this._createinsertLinksToolbox();
        };
        this._createModelsToolbox()
        this.$$bar.appendTo(this.layoutSlot);
        this.ensureArrayBoxVisibility(false);
        if (!this.openedBox) {
            var defaultOpened = this.awContext.articleToolBox;
            if (this.awContext.isArrayField && !this.awContext.columnsToolBox.$isHidden) {
                defaultOpened = this.awContext.columnsToolBox;
            }
            this.collapseBox(defaultOpened.toolbarBox, true, null, true);
        }
        this.ensureState();
    },
    
    onClickPicker: function(pickerId, event){
        switch (pickerId) {
            case "s-bar-dockMode":
                this.preferences.isDocked = !this.preferences.isDocked;
                break;
            case "s-bar-collapse":
                this._resizer.isEnabled = !(this.preferences.isCollapsed = !this.preferences.isCollapsed);
                break;
            case "s-bar-title":
                var $id = $(event.target).closest("[data-s-box]").attr("data-s-box");
                for (var ii = 0, jj = this._boxes.length; ii < jj; ii++) {
                    if (this._boxes[ii].$item.$id == $id) {
                        this.collapseBox(this._boxes[ii], true);
                        break;
                    }
                }
                break;
            default:
                return true;
        }
        this.ensureState();
        this.onWindowResize();
        this.awContext.palette.resizeDialogPage();
    },
    appendPickerBar: function(){
        var self = this;
        self.resizeBar = document.createElement("a");
        self.resizeBar.className = "s-aw-toolbar-resizer";
        self.openerPicker = document.createElement("a");
        self.openerPicker.className = "s-aw-toolbar-opener";
        self.openerPicker.setAttribute("data-s-picker", "s-bar-collapse");
        self.resizeBar.appendChild(self.openerPicker);
        self._bar.appendChild(self.resizeBar);
        self.openerPickerHeight = $(self.openerPicker).outerHeight();
        self._resizer = document.site.setResizable({
            source: self,
            slot: self.layoutSlot,
            dragSpot: null,
            direction: {
                right: true
            },
            minWidth: 200,
            resizerSpot: self.resizeBar,
            onResize: function(resizer, moving){
                if (!moving) {
                    document.site.toggleClass(self.resizeBar, "s-resizing", document.site.resizing);
                    document.site.toggleClass(self.openerPicker, "s-resizing", document.site.resizing);
                }
            }
        });
        self._resizer.isEnabled = !self.preferences.isCollapsed;
        
    },
    createBox: function($item){
        $item.$id = this.id + "-box-" + (this._boxes.length + 1);
        var box = {
            boxParent: this,
            $item: $item
        };
        this._boxes.push(box)
        var boxItem = document.createElement("section");
        boxItem.className = "s-aw-toolbar-box";
        boxItem.setAttribute("data-s-box", $item.$id);
        box.$$item = $(boxItem);
        
        var title = document.createElement("a");
        title.setAttribute("data-s-picker", "s-bar-title");
        title.className = "s-aw-toolbar-box-title";
        title.textContent = $item.$title || "";
        
        var dom = document.createElement("div");
        dom.className = "s-aw-toolbar-box-body";
        box.$$body = $(dom);
        
        dom = document.createElement("header");
        dom.className = "s-aw-toolbar-box-header";
        dom.appendChild(title);
        box.$$header = $(dom);
        
        box.$$item.append(box.$$header).append(box.$$body);
        this._body.appendChild(boxItem);
        
        box.$item.$isTitleHidden = true;
        box.$$body[0].style.display = "none";
        box.$$header.toggleClass("s-open", false);
        box.$$item.toggleClass("s-open", false);
        box.content = this.loadNewItem(box.$$body.empty()[0], box.$item);
        return box;
    },
    collapseBox: function(box, show, isFirstTime, onDrawBar){
        if (show && this.openedBox && (this.openedBox != box)) {
            this.collapseBox(this.openedBox, false);
        }
        this.openedBox = box;
        box.$$item[0].style.display = (box.$isHidden) ? "none" : "";
        box.$$body[0].style.display = show ? "" : "none";
        box.$$header.toggleClass("s-open", show);
        box.$$item.toggleClass("s-open", show);
        if (show) {
            if (box.toolBox && box.toolBox.onParentBoxExpanded) {
                box.toolBox.onParentBoxExpanded();
            }
            this.onWindowResize();
        }
        else {
            box.$$item[0].style.height = "";
        }
    },
    _hideBox: function(box, hide){
        box.toolbarBox.$isHidden = hide;
        if (box.toolbarBox.$$item) {
            box.toolbarBox.$$item[0].style.display = (hide) ? "none" : "";
        }
    },
    ensureState: function(){
        if (this.preferences.isCollapsed) {
            this.openedWidth = this.$$slot.outerWidth();
            this.layoutSlot.style.width = "10px";
            this._body.style.display = "none";
            this.resizeBar.className = "s-aw-toolbar-resizer s-close";
            this.openerPicker.className = "s-aw-toolbar-opener s-close";
            if (!this.preferences.isDocked) {
                this._bar.style.width = "10px";
            }
        }
        else {
            this.resizeBar.className = "s-aw-toolbar-resizer";
            this.openerPicker.className = "s-aw-toolbar-opener";
            this.resizeBar.style.width = "";
            if (this.preferences.isDocked) {
                this.layoutSlot.style.width = (this.openedWidth || 200) + "px";
                this._bar.style.position = "";
                this._bar.style.width = "";
            }
            else {
                this.layoutSlot.style.width = "10px";
                document.site.setZIndex(this._bar);
                this._bar.style.position = "absolute";
                this._bar.style.width = "200px";
                this._bar.style.top = "0px";
                this._bar.style.left = "0px";
            }
            this._body.style.display = "";
        }
    },
    onWindowResize: function(){
        if (this.$$bar && this.layoutSlot) {
            var height = $(this.awContext.scrollview).height();
            if (height) {
                this._bar.style.height = height + "px";
                this.resizeBar.style.height = height + "px";
                this.openerPicker.style.top = ((height - this.openerPickerHeight) / 2) + "px";
                this._body.style.height = (height - this._body.offsetTop) + "px";
                if (this.openedBox) {
                    var boxHeight = 0;
                    for (var ii = 0, jj = this._boxes.length; ii < jj; ii++) {
                        var box = this._boxes[ii];
                        if (box != this.openedBox && !box.$isHidden) {
                            boxHeight += box.$$item.outerHeight(true);
                        }
                    }
                    boxHeight = this._body.clientHeight - boxHeight;
                    this.openedBox.$$item[0].style.height = boxHeight + "px";
                    this.openedBox.$$body.height(this.openedBox.$$item.height() - this.openedBox.$$header.outerHeight(true));
                    if (this.openedBox.content && this.openedBox.content.resize) {
                        this.openedBox.content.resize(this.openedBox.$$body.height());
                    }
                    if (this.openedBox.onResize) {
                        this.openedBox.onResize(this.openedBox.$$body.height());
                    }
                }
            }
        }
    },
    onNotifyDataChange: function(field, value){
        if (field.$item.$measure) {
            var $cube = this.awContext.awArticle.$item.$cube || {};
            $cube.$measures = $cube.$measures || {};
            ($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {}).$style = value;
            this.awContext.awArticle.applyDesignMetaData({
                $cube: $cube
            }, true);
        }
        var metaData = {};
        metaData[field.$item.$bind] = value;
        this.applyChange(metaData);
        document.site.authorPage.notifyUpdate();
    },
    applyChange: function(newData){
        if (newData) {
            if (newData.$isHidden !== undefined) {
                var keys = ["$addBlock", "$addSection", "$addMenus"];
                for (var ii = 0, jj = keys.length; ii < jj; ii++) {
                    if (this.menuItems[keys[ii]]) {
                        this.menuItems[keys[ii]][0].setMenu({
                            $isDisabled: newData.$isHidden
                        });
                    }
                }
            }
        }
        RawPage.prototype.applyChange.call(this, newData);
    },
    onMenuClick: function(menuItem){
        switch (menuItem.$item.$bind) {
            case "$addSection":
            case "$addBlock":
                var newChild = this.awContext.drawHelper.addNewItem(this.awContext.awArticle, this.awContext.awItem, menuItem.$item.$bind.replace("$add", "").toLowerCase());
                this.awContext.authorPage.endTargetPageUpdate(newChild, true);
                return false;
            case "$addMenus":
                var newChild = this.awContext.drawHelper.addNewItem(this.awContext.awArticle, this.awContext.awItem, "block", null, undefined, undefined, "menus");
                this.awContext.authorPage.endTargetPageUpdate(newChild, true);
                return false;
            case "$defaultLayout":
            case "pattern-headerTabs":
                this.awContext.authorPage.onChangeSep(menuItem);
                return false;
            default:
                if (menuItem.$item.$fieldBind) {
                    var newChild = this.awContext.drawHelper.onAddNewField(this.awContext, this.awContext.awItem, menuItem.$item);
                    this.awContext.authorPage.endTargetPageUpdate(newChild, true);
                }
                else {
                    if (menuItem.$item.$bind.indexOf("pattern") == 0) {
                        this.awContext.authorPage.onChangeSep(menuItem);
                        break;
                    }
                    this.awContext.awItem.applyDesignMetaData(metaData, true);
                }
                break;
        }
    },
    onExcludeField: function($bind, isExcluded){
        var $actions = {};
        $actions["$fieldLink" + $bind] = {
            $isHidden: isExcluded
        };
        this.applyChange({
            $actions: $actions
        });
    },
    toggleItemAuthoring: function(enable){
    }
});
