"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var ToolsBar = require("syracuse-ui/lib/authoring/palette/toolsbar/toolsBar").ToolsBar;
var DashboardToolsBar = require("syracuse-ui/lib/authoring/palette/toolsbar/dashboardToolsBar").DashboardToolsBar;
var ArrayToolsBar = require("syracuse-ui/lib/authoring/palette/toolsbar/array/arrayToolsBar").ArrayToolsBar;
var ArticlePanel = require("syracuse-ui/lib/authoring/palette/articlePanel").ArticlePanel;

function Palette(){
}

exports.Palette = helpers.defineClass(Palette, RawPage, {
    toggleContext: function(show){
        var display = show ? "" : "none";
        this.layoutSlot.style.display = display;
        if (this.awContext.toolsBar) {
            this.awContext.toolsBar.layoutSlot.style.display = display;
        }
    },
    loadTitlesChoices: function(){
        var $enum = [];
        var $localization = this.awContext.$prototype.$localization;
        if ($localization) {
            var $keys = Object.keys($localization);
            for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
                $enum.push({
                    $value: "{" + $keys[ii] + "}",
                    $title: $localization[$keys[ii]]
                });
            }
        }
        this.$prototype.$properties.$titleLocalization.$value.$enum = $enum;
        if ($enum.length) {
            this.$prototype.$properties.$titleChoice.$value.$enum.unshift({
                $value: 0,
                $title: this.awContext.localize.aw_titleLocalization
            });
        }
        else {
            this.$prototype.$properties.$titleChoice.$value.$enum.unshift({
                $value: 0,
                $title: this.awContext.localize.aw_titleVisible
            });
            this.$prototype.$properties.$titleLocalization.$isHidden = true;
        }
    },
    loadBox: function(awContext){
        this.isAuthoringEventEnabled = true;
        this.awContext = awContext;
        this.diagnosePage = this.awContext.targetPage;
        this._unregisterResizer = true;
        this.externalAdapter = document.site.externalAdapter;
        this.panels = {};
        this.$prototype = {
            $properties: {
                $titleChoice: {
                    $type: "application/x-choice",
                    $isTitleHidden: true,
                    $value: {
                        $type: "application/x-string",
                        $enum: [{
                            $value: 1,
                            $title: this.awContext.localize.aw_titleBlank
                        }, {
                            $value: 2,
                            $title: this.awContext.localize.aw_titleHidden
                        }]
                    }
                },
                $titleLocalization: {
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-string",
                        $enum: []
                    }
                },
                $title: {
                    $type: "application/x-string",
                    $title: this.awContext.localize.aw_boxTitle,
                    $isHidden: true
                },
                $isMaximizable: {
                    $type: "application/x-boolean",
                    $title: this.awContext.localize.aw_isMaximizable
                },
                $isBoxCollapsable: {
                    $type: "application/x-boolean",
                    $title: this.awContext.localize.aw_isBoxCollapsable
                },
                $isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: this.awContext.localize.aw_isTitleHidden
                },
                $fieldsIsTitleHidden: {
                    $type: "application/x-boolean",
                    $title: this.awContext.localize.aw_isLabelHidden
                },
                $labelAlignment: {
                    $type: "application/x-choice",
                    $title: this.awContext.localize.aw_labelPosition,
                    $value: {
                        $type: "application/x-string",
                        $enum: [{
                            $value: "t",
                            $title: this.awContext.localize.aw_labelPositionTop
                        }, {
                            $value: "ll",
                            $title: this.awContext.localize.aw_labelPositionLeftLeft
                        }, {
                            $value: "lr",
                            $title: this.awContext.localize.aw_labelPositionLeftRight
                        }]
                    }
                },
                $layoutTabChoice: {
                    $type: "application/x-choice",
                    $title: this.awContext.localize.aw_showAs,
                    $value: {
                        $type: "application/x-string",
                        $enum: [{
                            $value: "tabs",
                            $title: this.awContext.localize["aw_s-layout-tabs"]
                        }, {
                            $value: "stack",
                            $title: this.awContext.localize["aw_s-layout-panels"]
                        }]
                    }
                },
                $rowAlign: {
                    $type: "application/x-choice",
                    $title: this.awContext.localize.aw_rowAlign,
                    $value: {
                        $type: "application/x-string",
                        $enum: [{
                            $value: "top",
                            $title: this.awContext.localize.aw_rowAlignTop
                        }, {
                            $value: "bottom",
                            $title: this.awContext.localize.aw_rowAlignBottom
                        }]
                    }
                },
                $boxTabChoice: {
                    $type: "application/x-choice",
                    $title: this.awContext.localize.aw_showAs,
                    $value: {
                        $type: "application/x-string",
                        $enum: [{
                            $value: "tabs",
                            $title: this.awContext.localize["aw_s-layout-tabs"]
                        }, {
                            $value: "stack",
                            $title: this.awContext.localize["aw_s-layout-panels"]
                        }]
                    }
                }
            },
            $links: {
                $excludeMe: {
                    $title: this.awContext.localize.aw_excludeMe
                },
                $addRowBefore: {
                    $title: this.awContext.localize.aw_addRowBefore
                },
                $addRowAfter: {
                    $title: this.awContext.localize.aw_addRowAfter
                }
            }
        };
        this.$item = {
            $skin: "s-aw-palette-item",
            $isTitleHidden: true,
            $layout: {
                $items: []
            }
        };
        this.$autoFetch = false;
        var keys = Object.keys(this.awContext.localize);
        this.$prototype.$localization = {};
        for (var ii = 0, jj = keys.length; ii < jj; ii++) {
            this.$prototype.$localization[keys[ii].replace("aw_", "@")] = this.awContext.localize[keys[ii]];
        }
        this.loadTitlesChoices();
        this._initializePage();
        this.layoutSlot = document.createElement("div");
        this.awContext.paletteSlot.appendChild(this.layoutSlot).className = "s-aw-palette-body";
        
        RawPage.prototype.loadBox.call(this);
        this.articlePanel = new ArticlePanel();
        this.articlePanel.load(this.awContext);
        
        var toolsBarClass = ToolsBar;
        if (this.awContext.isArrayField) {
            toolsBarClass = ArrayToolsBar;
        }
        else {
            if (this.awContext.targetPage.isDashBoard) {
                toolsBarClass = DashboardToolsBar;
            }
        }
        this.awContext.toolsBar = new toolsBarClass();
        this.awContext.toolsBar.loadToolbar(this.awContext);
        this.awContext.authorPage.selectItem(this.awContext.awArticle, true);
    },
    
    appendLinkBox: function($$slot){
    },
    onMenuClick: function(menuItem){
        switch (menuItem.$item.$bind) {
            case "$excludeMe":
                var pageContext = this.awContext.authorPage.getPageContext();
                pageContext.authorPage.endTargetPageUpdate(pageContext.drawHelper.excludeItem(pageContext, this.awContext.awItem), true);
                break;
            case "$addRowBefore":
            case "$addRowAfter":
                var layout = this.awContext.awLayout ? this.awContext.awLayout : (this.awContext.awItem.layoutContent || this.awContext.awItem.layoutParent);
                var newChild = this.awContext.drawHelper.addSiblingToLayout(layout, menuItem.$item.$bind == "$addRowBefore" ? "top" : "bottom");
                this.awContext.authorPage.endTargetPageUpdate(newChild, true);
                break;
            case "$defaultLayout":
            case "pattern-headerTabs":
                this.awContext.authorPage.onChangeSep(menuItem);
                return false;
            default:
                if (menuItem.$item.$bind.indexOf("pattern") == 0) {
                    this.awContext.authorPage.onChangeSep(menuItem);
                    break;
                }
                else {
                    if (menuItem.$item.$bind.indexOf("s-layout-type-") >= 0) {
                        var layout = this.awContext.awLayout ? this.awContext.awLayout : this.awContext.awItem.layoutContent;
                        if (this.awContext.awItem.$authoringLevel == "field") {
                            layout = this.awContext.awItem.layoutParent.wrapIntack([this.awContext.awItem], this.awContext.awItem.layoutParent.getItemIndex(this.awContext.awItem, true));
                            layout.removeSpaceBox(true);
                        }
                        var $widths = menuItem.$widths;
                        layout = this.awContext.drawHelper.newConvert(layout, {
                            $layoutType: $widths == "100" ? "stack" : "row",
                            $widths: $widths
                        });
                        this.awContext.authorPage.endTargetPageUpdate(layout.$layout.$layoutType == "stack" ? this.awContext.awItem : layout, true);
                        break;
                    }
                }
                break;
        }
    },
    onWindowResize: function(){
        if (this.layoutSlot && this.awContext && this.awContext.scrollview) {
            var height = $(this.awContext.scrollview).height();
            if (height) {
                this.layoutSlot.style.height = height + "px";
                this.awContext.toolsBar.onWindowResize();
                this.resizeDialogPage();
            }
        }
    },
    resizeDialogPage: function(){
        if (this.awContext.dialogWrapper) {
            var width = this.awContext.dialogWrapper.$$dialogSlot.width();
            if (width) {
                this.awContext.scrollview.style.width = (width - (this.awContext.authorPage._widths.palette + this.awContext.toolsBar.layoutSlot.offsetWidth)) + "px";
            }
        }
    },
    ensureSelectedItemTitle: function(){
        var title = this.awContext.awItem.getTitle(false);
        if (title == "" && this.awContext.awItem.$authoringLevel == "field") {
            title = this.awContext.awItem.$item.$bind;
        }
        this.selectedPanel.setDescription(title && title != "-" ? title : "");
        return title;
    },
    showSettingPanel: function(){
        var paletteId = this.awContext.awItem.isMenuItem ? "menu" : this.awContext.awItem.$authoringLevel;
        if (this.selectedPanel) {
            this.selectedPanel.setState({
                $isHidden: true
            });
        }
        if (!this.panels[paletteId]) {
            this.panels[paletteId] = this.layoutContent.loadChildItem(null, this.articlePanel["get_" + paletteId]());
        }
        this.panels[paletteId].setTitle(this.awContext.awItem.isMenuGroup ? this.awContext.localize.aw_menus : this.awContext.localize["aw_" + paletteId]);
        this.selectedPanel = this.panels[paletteId];
        
        var hideStructure;
        this.applyChange({
            $isHidden: false,
            $title: "",
            $isMaximizable: false,
            $isBoxCollapsable: false,
            $isTitleHidden: false,
            $fieldsIsTitleHidden: false,
            $labelAlignment: this.awContext.targetPage.$isEditMode ? "t" : "ll"
        });
        var $labelAlignment;
        if (this.awContext.awItem.$item.$isTopLabelAlignment || this.awContext.awItem.$item.$fieldsIsTopLabelAlignment) {
            $labelAlignment = "t";
        }
        else {
            if (this.awContext.awItem.$item.$isRightTextLabelAlignment || this.awContext.awItem.$item.$fieldsIsRightTextLabelAlignment) {
                $labelAlignment = "lr";
            }
            else {
                $labelAlignment = "ll";
            }
        }
        var $awItem = this.awContext.awItem.$item;
        var $awTitle = $awItem.$title;
        var $titleChoice = ($awItem.$isTitleHidden || $awTitle == null) ? 2 : (($awTitle == "-") ? 1 : 0);
        this.applyChange({
            $title: this.dataset.$savedTitle = this.ensureSelectedItemTitle(),
            $titleLocalization: $awTitle,
            $titleChoice: $titleChoice,
            $isMaximizable: $awItem.$isMaximizable,
            $isBoxCollapsable: $awItem.$isBoxCollapsable,
            $isTitleHidden: $awItem.$isTitleHidden,
            $fieldsIsTitleHidden: $awItem.$fieldsIsTitleHidden,
            $labelAlignment: $labelAlignment,
            $boxTabChoice: (this.awContext.awItem.isTabLayout) ? "tabs" : "stack",
            $layoutTabChoice: ($awItem.$layout && $awItem.$layout.$layoutType == "tabs") ? "tabs" : "stack",
            $rowAlign: (this.awContext.awLayout ? this.awContext.awLayout.$layout.$rowAlign : "top")
        });
        
        this.selectedPanel.setState({
            $isHidden: false
        });
        if (this.boundFields.$titleChoice && this.boundFields.$titleLocalization) {
            this.applyChange({
                $properties: {
                    $titleLocalization: {
                        $isDisabled: ($titleChoice != 0)
                    }
                }
            });
        }
        var sections = this.selectedPanel.layoutContent.items[0].layoutContent.items;
        var fieldAddinSection;
        if (this.awContext.awItem.$authoringLevel == "field") {
            if (this.awContext.awItem.$field) {
                if (this.awContext.awItem.$field.$type == "application/x-boolean") {
                    var items = this.page.idMap["s-aw-palette-field"].layoutContent.items;
                    for (var ii = 0; ii < jj; ii++) {
                        if (items[ii].$item.$isLabelSection) {
                            items[ii].setState({
                                $isHidden: true
                            });
                            break;
                        }
                    }
                }
                fieldAddinSection = this.selectedPanel.fieldAddinSection || this._getFieldAddinSection(sections);
                var addinSlot = fieldAddinSection.layoutContent._item;
                if (addinSlot.firstChild) {
                    $(addinSlot.firstChild).detach();
                }
                if (!this.awContext.awItem.awAddin) {
                    this.awContext.awItem.awAddin = this.awContext.awItem.getAuthoringWidget ? this.awContext.awItem.getAuthoringWidget(this.awContext.awItem) : null;
                    if (this.awContext.awItem.awAddin) {
                        this.awContext.awItem.awAddin.loadBox($awItem);
                    }
                }
                if (this.awContext.awItem.awAddin) {
                    this.awContext.awItem.awAddin.showAddin(addinSlot);
                }
            }
            layout = this.awContext.awItem.layoutParent;
            if (layout && layout.$layout.$layoutType == "row") {
                hideStructure = true;
            }
        }
        var layout = this.awContext.awLayout || this.awContext.awItem.layoutContent;
        var count = 1;
        if (layout && layout.$item) {
            count = (layout.$item.$widths || "100").split(",").length;
        }
        var metadata = {
            $links: {}
        };
        for (var ii = 0; ii <= 5; ii++) {
            metadata.$links["s-layout-type-" + ii] = {
                $style: count == ii ? "selected" : null
            };
        }
        metadata.$properties = {
            $layoutTabChoice: {
                $isDisabled: (count != 1),
                $title: this.awContext.awItem.$authoringLevel == "article" ? this.awContext.localize.aw_showSectionsAs : this.awContext.localize.aw_showBlocksAs
            }
        };
        metadata.$properties.$isTitleHidden = {
            $isHidden: this.awContext.awItem.isTabLayout == true
        };
        this.applyChange(metadata);
        
        var isHidden, section;
        if (sections[0].$bind == "$excludeMe") {
            sections[0].layoutSlot.style.textAlign = "center";
        }
        for (var ii = 0, jj = sections.length; ii < jj; ii++) {
            section = sections[ii];
            isHidden = this.awContext.awLayout == null ? false : true;
            if (section.$item.$isSectionFields) {
                isHidden = this.awContext.targetPage.isDashBoard || this.awContext.awItem.isMenuGroup == true;
            }
            if (section.$item.$isTitleSection) {
                var titleLocalization = section.layoutContent.items[2];
                var titleLocalizationChoice = section.layoutContent.items[1].builder.choicesItems[0];
                document.site.toggleClass(titleLocalization._domItem, "s-aw-title-localization", true);
                titleLocalizationChoice.appendChild(titleLocalization._domItem);
            }
            if (section == fieldAddinSection && !this.awContext.awItem.awAddin) {
                isHidden = true;
            }
            if (section.$item.$isRow) {
                isHidden = this.awContext.awLayout == null ? true : false;
            }
            else {
                if (hideStructure && section.$item.$isStructure) {
                    isHidden = true;
                }
            }
            section.setState({
                $isHidden: isHidden
            });
            
        }
    },
    _getFieldAddinSection: function(sections){
        for (var ii = 0, jj = sections.length; ii < jj; ii++) {
            if (sections[ii].$item.$isFieldAddinSection) {
                return sections[ii];
            }
        }
        return null;
    },
    notifyDataChange: function(field, value){
        var fieldArticle = field.getArticle();
        if (fieldArticle.designedField) {
            var metaData = {};
            metaData[field.$item.$bind] = value;
            fieldArticle.designedField.applyDesignMetaData(metaData, true);
            fieldArticle.applyChange(metaData);
            if (fieldArticle.onNotifyAuthoringChange) {
                fieldArticle.onNotifyAuthoringChange(field, value, metaData);
            }
            this.awContext.authorPage.notifyUpdate();
        }
        else {
            switch (field.$item.$bind) {
                case "$boxTabChoice":
                    if (this.awContext.awItem.layoutParent.$layoutType != value) {
                        this.awContext.drawHelper.switchTabPanelBox(this.awContext, value);
                    }
                    break;
                case "$rowAlign":
                    this.awContext.drawHelper.setRowAlign(this.awContext, value);
                    break;
                case "$layoutTabChoice":
                    this.awContext.drawHelper.switchTabPanelChildren(this.awContext, value);
                    break;
                case "$labelAlignment":
                    var metaData = {};
                    if (this.awContext.awItem.$authoringLevel == "field") {
                        metaData.$isTopLabelAlignment = (value == "t");
                        if (!metaData.$isTopLabelAlignment) {
                            metaData.$isRightTextLabelAlignment = (value == "lr");
                        }
                        this.awContext.awItem.applyDesignMetaData(metaData, true);
                    }
                    else {
                        if (metaData.$fieldsIsTopLabelAlignment = (value == "t")) {
                            this.awContext.authorPage._notifyChildFields(this.awContext.awItem, true, "$isTopLabelAlignment");
                        }
                        else {
                            this.awContext.authorPage._notifyChildFields(this.awContext.awItem, false, "$isTopLabelAlignment");
                            this.awContext.authorPage._notifyChildFields(this.awContext.awItem, metaData.$fieldsIsRightTextLabelAlignment = (value == "lr"), "$isRightTextLabelAlignment");
                        }
                        this.awContext.authorPage._notifyChildBox(this.awContext.awItem, metaData);
                    }
                    this.awContext.authorPage.notifyUpdate();
                    break;
                default:
                    var metaData = {};
                    var $bind = field.$item.$bind;
                    if ($bind == "$titleChoice") {
                        var isTitleLocalizationDisabled = true;
                        switch (value) {
                            case 0:
                                $bind = "$title";
                                metaData.$isTitleHidden = false;
                                if (this.$prototype.$properties.$titleLocalization.$isHidden) {
                                    value = this.dataset.$savedTitle;
                                }
                                else {
                                    isTitleLocalizationDisabled = false;
                                    value = this.awContext.awItem.$item.$title;
                                    if (!value || value == "-") {
                                        value = this.$prototype.$properties.$titleLocalization.$value.$enum[0].$value;
                                    }
                                    this.applyChange({
                                        $titleLocalization: value
                                    });
                                }
                                break;
                            case 1:
                                $bind = "$title"
                                value = "-";
                                metaData.$isTitleHidden = false;
                                break;
                            case 2:
                                $bind = "$isTitleHidden";
                                value = true;
                                break;
                        }
                        this.applyChange({
                            $properties: {
                                $titleLocalization: {
                                    $isDisabled: isTitleLocalizationDisabled
                                }
                            }
                        });
                    }
                    if ($bind == "$titleLocalization") {
                        $bind = "$title";
                    }
                    metaData[$bind] = value;
                    if (this.awContext.awItem.$authoringLevel == "field") {
                        this.awContext.awItem.applyDesignMetaData(metaData, true);
                    }
                    else {
                        if ($bind.indexOf("$fields") == 0) {
                            var fieldBind = $bind.slice("$fields".length);
                            fieldBind = fieldBind.slice(0, 1).toLowerCase() + fieldBind.slice(1);
                            this.awContext.authorPage._notifyChildFields(this.awContext.awItem, value, "$" + fieldBind);
                        }
                        this.awContext.awItem.applyDesignMetaData(metaData, true);
                    }
                    this.awContext.authorPage.notifyUpdate();
                    this.applyChange(metaData);
                    break;
            }
        }
    },
    applyChange: function(newData){
        if (newData) {
            newData.$properties = newData.$properties || {};
            if (newData.$isHidden !== undefined) {
                var keys = ["$title", "$isMaximizable", "$isBoxCollapsable", "$isTitleHidden", "$fieldsIsTitleHidden", "$labelAlignment"];
                for (var ii = 0, jj = keys.length; ii < jj; ii++) {
                    newData.$properties[keys[ii]] = {
                        $isDisabled: newData.$isHidden
                    };
                }
                this.awContext.toolsBar.applyChange(newData);
            }
            if (newData.$title !== undefined) {
                this.awContext.toolsBar.onEndExcludeItem();
                this.ensureSelectedItemTitle();
            }
            if (newData.$fieldsIsTitleHidden !== undefined) {
                (newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$fieldsIsTitleHidden;
            }
            if (newData.$isTitleHidden !== undefined) {
                newData.$properties.$title = newData.$properties.$title || {};
                newData.$properties.$title.$isDisabled = newData.$isTitleHidden;
                if (this.awContext.awItem.$authoringLevel == "field") {
                    (newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$isTitleHidden;
                }
                else {
                    newData.$properties.$title = newData.$properties.$isBoxCollapsable = newData.$properties.$isMaximizable = {
                        $isDisabled: newData.$isTitleHidden
                    };
                }
            }
        }
        RawPage.prototype.applyChange.call(this, newData);
    },
    
    dispose: function(){
        if (this.awContext) {
            if (this.awContext.toolsBar) {
                document.controller.disposeObject(this.awContext.toolsBar);
                this.awContext.toolsBar = null;
            }
        }
        if (this.selectedPanel) {
            this.selectedPanel.fieldAddinSection = null;
        }
        if (this.articlePanel) {
            this.articlePanel.dispose();
        }
        if (this.layoutSlot) {
            document.site.removeDomChild(this.layoutSlot);
        }
        this.selectedPanel = this.articlePanel = this.awContext = this.diagnosePage = this.$item = this.externalAdapter = this.$prototype = this.layoutSlot = null;
        RawPage.prototype.dispose.call(this);
    }
});
