"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var fieldLibrary = require("syracuse-ui/lib/authoring/field/fieldLibrary");
var historyHelper = require("syracuse-ui/lib/authoring/historyHelper");
var ToolsBar = require("syracuse-ui/lib/authoring/palette/toolsBar").ToolsBar;
var ArticlePanel = require("syracuse-ui/lib/authoring/palette/articlePanel").ArticlePanel;
function ItemPalette(){
}

exports.ItemPalette = helpers.defineClass(ItemPalette, RawPage, {
    notifySteps: function(resetUpdates){
        historyHelper.notifySteps(this.awContext, resetUpdates);
    },
    onChangeSep: function(menuItem){
        historyHelper.onChangeSep(this.awContext, menuItem);
    },
    toggleContext: function(show){
        var display = show ? "" : "none";
        this.layoutSlot.style.display = this.topBarSlot.style.display = display;
        if (this.awContext.toolsBar) {
            this.awContext.toolsBar.layoutSlot.style.display = display;
        }
    },
    _addTopLeftBar: function(){
        this.$prototype.$properties.$viewType = {
            $type: "application/x-choice",
            $value: {
                $type: "application/x-string",
                "$enum": [{
                    $value: "preview",
                    $title: this.awContext.localize.aw_viewTypePreview
                }, {
                    $value: "layout",
                    $title: this.awContext.localize.aw_viewTypeLayout
                }, {
                    $value: "structure",
                    $title: this.awContext.localize.aw_viewTypeStructure
                }]
            }
        };
        this.$item.$menus = [{
            $skin: "s-aw-menus",
            $layout: {
                $layoutType: "row",
                $items: [{
                    $layoutType: "row",
                    $autoSize: true,
                    $items: [{
                        $icon: {
                            $mode: "icon",
                            $path: "authoring/s-aw-"
                        },
                        $skin: "s-aw-menus-link",
                        $bind: "$help"
                    }, {
                        $icon: {
                            $mode: "icon",
                            $path: "authoring/s-aw-"
                        },
                        $skin: "s-aw-menus-link",
                        $bind: "$previousLayout"
                    }, {
                        $icon: {
                            $mode: "icon",
                            $path: "authoring/s-aw-"
                        },
                        $skin: "s-aw-menus-link",
                        $bind: "$nextLayout"
                    }, {
                        $skin: "s-aw-menus-link",
                        $bind: "$undoAllLayout"
                    }]
                }, {
                    $category: "field",
                    $bind: "$viewType",
                    $skin: "s-aw-viewType",
                    $isEditMode: true,
                    $format: "$button",
                    $choiceLayout: "row"
                }]
            }
        }];
    },
    loadBox: function(awContext){
        this.isAuthoringEventEnabled = true;
        this.awContext = awContext;
        this.diagnosePage = this.awContext.targetPage;
        this._unregisterResizer = true;
        this.externalAdapter = document.site.externalAdapter;
        this.panels = {};
        this.$prototype = {
            $properties: {
                $title: {
                    $type: "application/x-string",
                    $title: this.awContext.localize.aw_boxTitle
                },
                $isMaximizable: {
                    $type: "application/x-boolean",
                    $title: this.awContext.localize.aw_isMaximizable
                },
                $isBoxCollapsable: {
                    $type: "application/x-boolean",
                    $title: this.awContext.localize.aw_isBoxCollapsable
                },
                $isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: this.awContext.localize.aw_isTitleHidden
                },
                $fieldsIsTitleHidden: {
                    $type: "application/x-boolean",
                    $title: this.awContext.localize.aw_isLabelHidden
                },
                $labelAlignment: {
                    $type: "application/x-choice",
                    $title: this.awContext.localize.aw_labelPosition,
                    $value: {
                        $type: "application/x-string",
                        $enum: [{
                            $value: "t",
                            $title: this.awContext.localize.aw_labelPositionTop
                        }, {
                            $value: "ll",
                            $title: this.awContext.localize.aw_labelPositionLeftLeft
                        }, {
                            $value: "lr",
                            $title: this.awContext.localize.aw_labelPositionLeftRight
                        }]
                    }
                },
                $layoutTabChoice: {
                    $type: "application/x-choice",
                    $title: this.awContext.localize.aw_showAs,
                    $value: {
                        $type: "application/x-string",
                        $enum: [{
                            $value: "tabs",
                            $title: this.awContext.localize["aw_s-layout-tabs"]
                        }, {
                            $value: "stack",
                            $title: this.awContext.localize["aw_s-layout-panels"]
                        }]
                    }
                },
                $boxTabChoice: {
                    $type: "application/x-choice",
                    $title: this.awContext.localize.aw_showAs,
                    $value: {
                        $type: "application/x-string",
                        $enum: [{
                            $value: "tabs",
                            $title: this.awContext.localize["aw_s-layout-tabs"]
                        }, {
                            $value: "stack",
                            $title: this.awContext.localize["aw_s-layout-panels"]
                        }]
                    }
                }
            },
            $links: {
                $previousLayout: {
                    $isDisabled: true,
                    $title: this.awContext.localize.aw_previousLayout
                },
                $nextLayout: {
                    $isDisabled: true,
                    $title: this.awContext.localize.aw_nextLayout
                },
                $undoAllLayout: {
                    $isDisabled: true,
                    $title: this.awContext.localize.aw_undoAllLayout
                },
                $excludeMe: {
                    $title: this.awContext.localize.aw_excludeMe
                },
                $help: {
                    $title: this.awContext.localize.aw_help
                },
                $addRowBefore: {
                    $title: this.awContext.localize.aw_addRowBefore
                },
                $addRowAfter: {
                    $title: this.awContext.localize.aw_addRowAfter
                }
            }
        };
        this.$item = {
            $skin: "s-aw-palette-item",
            $isTitleHidden: true,
            $layout: {
                $items: []
            }
        };
        this._addTopLeftBar();
        this.$autoFetch = false;
        var keys = Object.keys(this.awContext.localize);
        this.$prototype.$localization = {};
        for (var ii = 0, jj = keys.length; ii < jj; ii++) {
            this.$prototype.$localization[keys[ii].replace("aw_", "@")] = this.awContext.localize[keys[ii]];
        }
        
        this._initializePage();
        
        this.layoutSlot = document.createElement("div");
        this.awContext.paletteSlot.appendChild(this.layoutSlot).className = "s-aw-palette-body";
        
        RawPage.prototype.loadBox.call(this, {
            $viewType: "layout",
            $links: {
                $help: document.site.$prototype.$links.$help
            }
        });
        this.articlePanel = new ArticlePanel();
        this.articlePanel.load(this.awContext);
        this.awContext.toolsBar = new ToolsBar();
        this.awContext.toolsBar.loadToolbar(this.awContext);
        this.notifySteps()// initialize  
        this.awContext.authorPage.selectItem(this.awContext.awArticle, true);
        this.topBarSlot = document.createElement("div");
        this.topBarSlot.setAttribute("data-s-article", this.id);
        this.appendArticleMenus(this.awContext.topLeftBar.appendChild(this.topBarSlot));
    },
    
    appendLinkBox: function($$slot){
    },
    onMenuClick: function(menuItem){
        switch (menuItem.$item.$bind) {
            case "$excludeMe":
                this.awContext.authorPage.endTargetPageUpdate(this.awContext.drawHelper.excludeItem(this.awContext, this.awContext.awItem), true);
                break;
            case "$addRowBefore":
            case "$addRowAfter":
                var layout = this.awContext.awLayout ? this.awContext.awLayout : (this.awContext.awItem.layoutContent || this.awContext.awItem.layoutParent);
                var newChild = this.awContext.authorPage.addSiblingToLayout(layout, menuItem.$item.$bind == "$addRowBefore" ? "top" : "bottom");
                this.awContext.authorPage.endTargetPageUpdate(newChild, true);
                break;
            case "$previousLayout":
            case "$nextLayout":
            case "$undoAllLayout":
                this.onChangeSep(menuItem);
                return false;
            case "$help":
                return true;
            default:
                if (menuItem.$item.$bind.indexOf("s-layout-type-") >= 0) {
                    var layout = this.awContext.awLayout ? this.awContext.awLayout : this.awContext.awItem.layoutContent;
                    if (this.awContext.awItem.$authoringLevel == "field") {
                        layout = this.awContext.awItem.layoutParent.wrapIntack([this.awContext.awItem], this.awContext.awItem.layoutParent.getItemIndex(this.awContext.awItem, true));
                        layout.removeSpaceBox(true);
                    }
                    var $widths = menuItem.$widths;
                    layout = this.awContext.drawHelper.newConvert(layout, {
                        $layoutType: $widths == "100" ? "stack" : "row",
                        $widths: $widths
                    });
                    this.awContext.authorPage.endTargetPageUpdate(layout.$layout.$layoutType == "stack" ? this.awContext.awItem : layout, true);
                    break;
                }
                this.awContext.awItem.applyDesignMetaData(metaData, true);
                break;
        }
    },
    onWindowResize: function(){
        if (this.layoutSlot && this.awContext && this.awContext.scrollview) {
            var height = $(this.awContext.scrollview).height();
            if (height) {
                this.layoutSlot.style.height = height + "px";
                this.awContext.toolsBar.onWindowResize();
                this.resizeDialogPage();
            }
        }
    },
    resizeDialogPage: function(){
        if (this.awContext.dialogWrapper) {
            var width = this.awContext.dialogWrapper.$$dialogSlot.width();
            if (width) {
                this.awContext.scrollview.style.width = (width - (this.layoutSlot.offsetWidth + this.awContext.toolsBar.layoutSlot.offsetWidth)) + "px";
            }
        }
    },
    showSettingPanel: function(){
        var paletteId = this.awContext.awItem.isMenuItem ? "menu" : this.awContext.awItem.$authoringLevel;
        if (this.selectedPanel) {
            this.selectedPanel.setState({
                $isHidden: true
            });
        }
        if (!this.panels[paletteId]) {
            this.panels[paletteId] = this.layoutContent.loadChildItem(null, this.articlePanel["get_" + paletteId]());
        }
        this.selectedPanel = this.panels[paletteId];
        
        var hideStructure;
        this.applyChange({
            $isHidden: false,
            $title: "",
            $isMaximizable: false,
            $isBoxCollapsable: false,
            $isTitleHidden: false,
            $fieldsIsTitleHidden: false,
            $labelAlignment: this.awContext.targetPage.$isEditMode ? "t" : "ll"
        });
        
        var title = this.awContext.awItem.getTitle(false);
        if (title == "" && this.awContext.awItem.$authoringLevel == "field") {
            title = this.awContext.awItem.$item.$bind;
        }
        this.selectedPanel.setDescription(title);
        
        var $labelAlignment;
        if (this.awContext.awItem.$item.$isTopLabelAlignment || this.awContext.awItem.$item.$fieldsIsTopLabelAlignment) {
            $labelAlignment = "t";
        }
        else {
            if (this.awContext.awItem.$item.$isRightTextLabelAlignment || this.awContext.awItem.$item.$fieldsIsRightTextLabelAlignment) {
                $labelAlignment = "lr";
            }
            else {
                $labelAlignment = "ll";
            }
        }
        this.applyChange({
            $title: title,
            $isMaximizable: this.awContext.awItem.$item.$isMaximizable,
            $isBoxCollapsable: this.awContext.awItem.$item.$isBoxCollapsable,
            $isTitleHidden: this.awContext.awItem.$item.$isTitleHidden,
            $fieldsIsTitleHidden: this.awContext.awItem.$item.$fieldsIsTitleHidden,
            $labelAlignment: $labelAlignment,
            $boxTabChoice: (this.awContext.awItem.isTabLayout) ? "tabs" : "stack",
            $layoutTabChoice: (this.awContext.awItem.$item.$layout && this.awContext.awItem.$item.$layout.$layoutType == "tabs") ? "tabs" : "stack"
        });
        this.selectedPanel.setState({
            $isHidden: false
        })
        var sections = this.selectedPanel.layoutContent.items[0].layoutContent.items;
        var fieldAddinSection;
        if (this.awContext.awItem.$authoringLevel == "field") {
            if (this.awContext.awItem.$field) {
                if (this.awContext.awItem.$field.$type == "application/x-boolean") {
                    var items = this.page.idMap["s-aw-palette-field"].layoutContent.items;
                    for (var ii = 0; ii < jj; ii++) {
                        if (items[ii].$item.$isLabelSection) {
                            items[ii].setState({
                                $isHidden: true
                            });
                            break;
                        }
                    }
                }
                fieldAddinSection = this.selectedPanel.fieldAddinSection || this._getFieldAddinSection(sections);
                var addinSlot = fieldAddinSection.layoutContent._item;
                if (addinSlot.firstChild) {
                    $(addinSlot.firstChild).detach();
                }
                if (this.awContext.awItem.awAddin) {
                    addinSlot.appendChild(this.awContext.awItem.awAddin.$$item[0]);
                }
                else {
                    this.awContext.awItem.awAddin = fieldLibrary.getAuthoringFieldWidget(this.awContext.awItem);
                    if (this.awContext.awItem.awAddin) {
                        this.awContext.awItem.awAddin.designedField = this.awContext.awItem;
                        this.awContext.awItem.awAddin.loadBox(this.awContext.awItem.$item);
                        addinSlot.appendChild(this.awContext.awItem.awAddin.$$item[0]);
                    }
                }
            }
            layout = this.awContext.awItem.layoutParent;
            if (layout && layout.$layout.$layoutType == "row") {
                hideStructure = true;
            }
        }
        var layout = this.awContext.awLayout || this.awContext.awItem.layoutContent;
        var count = 1;
        if (layout && layout.$item) {
            count = (layout.$item.$widths || "100").split(",").length;
        }
        var metadata = {
            $links: {}
        };
        for (var ii = 0; ii <= 5; ii++) {
            metadata.$links["s-layout-type-" + ii] = {
                $style: count == ii ? "selected" : null
            };
        }
        metadata.$properties = {
            $layoutTabChoice: {
                $isDisabled: (count != 1),
                $title: this.awContext.awItem.$authoringLevel == "article" ? this.awContext.localize.aw_showSectionsAs : this.awContext.localize.aw_showBlocksAs
            }
        };
        metadata.$properties.$isTitleHidden = {
            $isHidden: this.awContext.awItem.isTabLayout == true
        };
        this.applyChange(metadata);
        
        var isHidden, section;
        if (sections[0].$bind == "$excludeMe") {
            sections[0].layoutSlot.style.textAlign = "center";
        }
        for (var ii = 0, jj = sections.length; ii < jj; ii++) {
            section = sections[ii];
            isHidden = this.awContext.awLayout == null ? false : true;
            if (section == fieldAddinSection && !this.awContext.awItem.awAddin) {
                isHidden = true;
            }
            if (section.$item.$isRow) {
                isHidden = this.awContext.awLayout == null ? true : false;
            }
            else {
                if (hideStructure && section.$item.$isStructure) {
                    isHidden = true;
                }
            }
            section.setState({
                $isHidden: isHidden
            });
            
        }
    },
    _getFieldAddinSection: function(sections){
        for (var ii = 0, jj = sections.length; ii < jj; ii++) {
            if (sections[ii].$item.$isFieldAddinSection) {
                return sections[ii];
            }
        }
        return null;
    },
    notifyDataChange: function(field, value){
        var fieldArticle = field.getArticle();
        if (fieldArticle.designedField) {
            var metaData = {};
            metaData[field.$item.$bind] = value;
            fieldArticle.designedField.applyDesignMetaData(metaData, true);
            fieldArticle.applyChange(metaData);
            if (fieldArticle.onNotifyAuthoringChange) {
                fieldArticle.onNotifyAuthoringChange(field, value, metaData);
            }
            this.awContext.authorPage.notifyUpdate();
        }
        else {
            switch (field.$item.$bind) {
                case "$boxTabChoice":
                    if (this.awContext.awItem.layoutParent.$layoutType != value) {
                        this.awContext.drawHelper.switchTabPanelBox(this.awContext, value);
                    }
                    break;
                case "$layoutTabChoice":
                    this.awContext.drawHelper.switchTabPanelChildren(this.awContext, value);
                    break;
                case "$viewType":
                    this.awContext.authorPage.toggleViewType(value);
                    break;
                case "$labelAlignment":
                    var metaData = {};
                    if (this.awContext.awItem.$authoringLevel == "field") {
                        metaData.$isTopLabelAlignment = (value == "t");
                        if (!metaData.$isTopLabelAlignment) {
                            metaData.$isRightTextLabelAlignment = (value == "lr");
                        }
                        this.awContext.awItem.applyDesignMetaData(metaData, true);
                    }
                    else {
                        if (metaData.$fieldsIsTopLabelAlignment = (value == "t")) {
                            this.awContext.authorPage._notifyChildFields(this.awContext.awItem, true, "$isTopLabelAlignment");
                        }
                        else {
                            this.awContext.authorPage._notifyChildFields(this.awContext.awItem, false, "$isTopLabelAlignment");
                            this.awContext.authorPage._notifyChildFields(this.awContext.awItem, metaData.$fieldsIsRightTextLabelAlignment = (value == "lr"), "$isRightTextLabelAlignment");
                        }
                        this.awContext.authorPage._notifyChildBox(this.awContext.awItem, metaData);
                    }
                    this.awContext.authorPage.notifyUpdate();
                    break;
                default:
                    var metaData = {};
                    metaData[field.$item.$bind] = value;
                    if (this.awContext.awItem.$authoringLevel == "field") {
                        this.awContext.awItem.applyDesignMetaData(metaData, true);
                    }
                    else {
                        if (field.$item.$bind.indexOf("$fields") == 0) {
                            var fieldBind = field.$item.$bind.slice("$fields".length);
                            fieldBind = fieldBind.slice(0, 1).toLowerCase() + fieldBind.slice(1);
                            this.awContext.authorPage._notifyChildFields(this.awContext.awItem, value, "$" + fieldBind);
                        }
                        this.awContext.awItem.applyDesignMetaData(metaData, true);
                    }
                    this.awContext.authorPage.notifyUpdate();
                    this.applyChange(metaData);
                    break;
            }
        }
    },
    applyChange: function(newData){
        if (newData) {
            newData.$properties = newData.$properties || {};
            if (newData.$isHidden !== undefined) {
                var keys = ["$title", "$isMaximizable", "$isBoxCollapsable", "$isTitleHidden", "$fieldsIsTitleHidden", "$labelAlignment"];
                for (var ii = 0, jj = keys.length; ii < jj; ii++) {
                    newData.$properties[keys[ii]] = {
                        $isDisabled: newData.$isHidden
                    };
                }
                this.awContext.toolsBar.applyChange(newData);
            }
            if (newData.$fieldsIsTitleHidden !== undefined) {
                (newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$fieldsIsTitleHidden;
            }
            if (newData.$isTitleHidden !== undefined) {
                newData.$properties.$title = newData.$properties.$title || {};
                newData.$properties.$title.$isDisabled = newData.$isTitleHidden;
                if (this.awContext.awItem.$authoringLevel == "field") {
                    (newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$isTitleHidden;
                }
                else {
                    newData.$properties.$title = newData.$properties.$isBoxCollapsable = newData.$properties.$isMaximizable = {
                        $isDisabled: newData.$isTitleHidden
                    };
                }
            }
        }
        RawPage.prototype.applyChange.call(this, newData);
    },
    
    dispose: function(){
        if (this.awContext) {
            if (this.awContext.toolsBar) {
                document.controller.disposeObject(this.awContext.toolsBar);
                this.awContext.toolsBar = null;
            }
        }
        if (this.selectedPanel) {
            this.selectedPanel.fieldAddinSection = null;
        }
        if (this.articlePanel) {
            this.articlePanel.dispose();
        }
        this.selectedPanel = this.articlePanel = this.awContext = this.diagnosePage = this.$item = this.externalAdapter = this.$prototype = this.layoutSlot = null;
        RawPage.prototype.dispose.call(this);
    }
});
