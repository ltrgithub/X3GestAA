"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;

function ArrayAuthoring() {}

exports.ArrayAuthoring = helpers.defineClass(ArrayAuthoring, RawPage, {
	create: function(designedField) {
		this.designedField = designedField;
	},
	showAddin: function(slot) {
		slot.appendChild(this.$$item[0]);
	},
	applyChange: function(newData) {
		if (newData) {
			if (newData.$format) {
				var delta = newData.$properties = newData.$properties || {};
				var isCards = newData.$format == "cards";
				delta.$cardsByRowCount = delta.$cardsByRowCount || {};
				delta.$cardsByRowCount.$isHidden = !isCards;

				delta.$position = delta.$position || {};
				delta.$position.$isHidden = newData.$format != "grid";

				delta.$widths = delta.$widths || {};
				var $position = newData.$position || this.dataset.$position;
				if ($position == "no" && this.designedField.$item.$cards) {
					this.designedField.$item.$cards.$position = "inline";
				}
				delta.$widths.$isHidden = delta.$position.$isHidden || ($position == "no") || ($position == "inline");

			}
			if (newData.$cards && newData.$cards.$position) {
				var delta = newData.$properties = newData.$properties || {};
				delta.$widths = delta.$widths || {};
				delta.$widths.$isHidden = (newData.$cards.$position == "no") || (newData.$cards.$position == "inline");
			}
			if (newData.$graphMode) {
				var delta = newData.$properties = newData.$properties || {};
				delta.$graphPosition = delta.$graphPosition || {};
				delta.$graphPosition.$isHidden = newData.$graphMode != "both";
			}
		}
		RawPage.prototype.applyChange.call(this, newData);
	},
	loadBox: function() {
		var localize = document.site.authorPage.localize;
		this.layoutSlot = document.createElement("div");
		this.layoutSlot.className = "s-aw-list-page";

		this.$skin = "s-aw-list";
		RawPage.prototype.loadBox.call(this, this.designedField.$item);
		var delta = {
			$cardsByRowCount: this.designedField.$item.$cardsByRowCount || 1,
			$format: this.designedField.$item.$format || "grid",
			$itemsPerPage: this.designedField.$item.$itemsPerPage || 20
		};
		if (this.designedField.$item.$cards) {
			delta.$position = this.designedField.$item.$cards.$position;
			delta.$widths = this.designedField.$item.$cards.$widths;
		}
		delta.$position = delta.$position || "no";
		delta.$widths = delta.$widths || "50";

		this.applyChange(delta);
	},
	refreshToolsBar: function() {
		if (this.designer) {
			this.designer.treebar.toggleColumnsToolBox();
		}
	},
	dispose: function() {
		this.vignetteAuhoring = null;
		RawPage.prototype.dispose.call(this);
	}
});