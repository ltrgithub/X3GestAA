"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;

function ArrayAuthoring() {}

exports.ArrayAuthoring = helpers.defineClass(ArrayAuthoring, RawPage, {
	create: function(designedField) {
		this.designedField = designedField;
	},
	showAddin: function(slot) {
		slot.appendChild(this.$$item[0]);
	},
	ensureCards: function($cards) {
		if (!$cards) {
			$cards = {
				$layout: {
					$items: []
				}
			};
			var $binds = Object.keys(this.designedField.$fieldProperties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				if (!this.designedField.$fieldProperties[$binds[ii]].$isExcluded) {
					$cards.$layout.$items.push({
						$bind: $binds[ii]
					});
				}
			}
		}
		return $cards;
	},
	applyFieldDesignMetaDataChange: function(metaData) {
		this.designedField.applyDesignMetaData(metaData, true);
		if (this.vignetteAuhoring) {
			this.vignetteAuhoring.onNotifyVignetteContentChange(this.designedField.page.$item);
		}
	},
	onNotifyDataChange: function(field, value) {
		var metaData = {};
		var $bind = field.$item.$bind;
		if ($bind == "$position" || $bind == "$widths") {
			if ($bind == "$position") {
				if (value == "no") {
					if (this.designedField.$item.$cards) {
						metaData.$cards = false;
					}
				} else {
					metaData.$cards = this.ensureCards(this.designedField.$item.$cards);
					metaData.$cards.$position = value;
				}
			}
			if ($bind == "$widths") {
				metaData.$cards = this.ensureCards(this.designedField.$item.$cards);
				metaData.$cards.$widths = value;
			}
		} else {
			metaData[$bind] = value;
		}
		this.applyChange(metaData);
		this.applyFieldDesignMetaDataChange(metaData);
		if (this.awPalette) {
			this.awPalette.toolbar.ensureArrayBoxVisibility();
			document.site.authorPage.endTargetPageUpdate();
		}
	},
	applyChange: function(newData) {
		if (newData) {
			if (newData.$format) {
				var delta = newData.$properties = newData.$properties || {};
				var isCards = newData.$format == "cards";
				delta.$cardsByRowCount = delta.$cardsByRowCount || {};
				delta.$cardsByRowCount.$isHidden = !isCards;

				delta.$position = delta.$position || {};
				delta.$position.$isHidden = newData.$format != "grid";

				delta.$widths = delta.$widths || {};
				var $position = newData.$position || this.dataset.$position;
				if ($position == "no" && this.designedField.$item.$cards) {
					this.designedField.$item.$cards.$position = "inline";
				}
				delta.$widths.$isHidden = delta.$position.$isHidden || ($position == "no") || ($position == "inline");

			}
			if (newData.$cards && newData.$cards.$position) {
				var delta = newData.$properties = newData.$properties || {};
				delta.$widths = delta.$widths || {};
				delta.$widths.$isHidden = (newData.$cards.$position == "no") || (newData.$cards.$position == "inline");
			}
			if (newData.$graphMode) {
				var delta = newData.$properties = newData.$properties || {};
				delta.$graphPosition = delta.$graphPosition || {};
				delta.$graphPosition.$isHidden = newData.$graphMode != "both";
			}
		}
		RawPage.prototype.applyChange.call(this, newData);
	},
	loadBox: function() {
		this.isAuthoringEventEnabled = true;
		var localize = document.site.authorPage.localize;
		this.layoutSlot = document.createElement("div");
		this.layoutSlot.className = "s-aw-list-page";
		this.$prototype = {
			"$properties": {
				$itemsPerPage: {
					$type: "application/x-choice",
					$title: localize.lw_itemsPerPage,
					$value: {
						$type: "application/x-string",
						$enum: ["5", "10", "15", "20", "25", "50", "75", "100", "150", "200"].map(function(count) {
							return {
								$value: count,
								$title: count
							};
						})
					}
				},
				$widths: {
					$type: "application/x-choice",
					$title: localize.lw_cardviewWidth,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "15",
							$title: "15 %"
						}, {
							$value: "25",
							$title: "25 %"
						}, {
							$value: "40",
							$title: "40 %"
						}, {
							$value: "50",
							$title: "50 %"
						}, {
							$value: "60",
							$title: "60 %"
						}, {
							$value: "75",
							$title: "75 %"
						}]
					}
				},
				$position: {
					$type: "application/x-choice",
					$title: localize.lw_cardviewPosition,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "no",
							$title: localize.lw_cardviewPositionNo
						}, {
							$value: "inline",
							$title: localize.lw_cardviewPositionInline
						}, {
							$value: "top",
							$title: localize.lw_cardviewPositionTop
						}, {
							$value: "left",
							$title: localize.lw_cardviewPositionLeft
						}, {
							$value: "right",
							$title: localize.lw_cardviewPositionRight
						}, {
							$value: "bottom",
							$title: localize.lw_cardviewPositionBottom
						}]
					}
				},
				$cardsByRowCount: {
					$isHidden: true,
					$type: "application/x-choice",
					$title: localize.lw_cardListByRowCount,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: 1,
							$title: localize.lw_title_cardsByRow_1
						}, {
							$value: 2,
							$title: localize.lw_title_cardsByRow_2
						}, {
							$value: 3,
							$title: localize.lw_title_cardsByRow_3
						}, {
							$value: 4,
							$title: localize.lw_title_cardsByRow_4
						}, {
							$value: 5,
							$title: localize.lw_title_cardsByRow_5
						}]
					}
				},
				$format: {
					$type: "application/x-choice",
					$title: localize.lw_format,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "cards",
							$title: localize.lw_formatCards
						}, {
							$value: "grid",
							$title: localize.lw_formatHGrid
						}]
					}
				},
				$graphMode: {
					$type: "application/x-choice",
					$isHidden: this.designedField.$prototype.$cube ? false : true,
					$title: localize.lw_graphMode,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "list",
							$title: localize.lw_graphModeList
						}, {
							$value: "both",
							$title: localize.lw_graphModeGraphList
						}, {
							$value: "graph",
							$title: localize.lw_graphModeGraph
						}]
					}
				},
				$graphPosition: {
					$type: "application/x-choice",
					$isHidden: this.designedField.$prototype.$cube ? false : true,
					$title: localize.lw_graphPosition,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "top",
							$title: localize.lw_graphPositionTop
						}, {
							$value: "left",
							$title: localize.lw_graphPositionLeft
						}, {
							$value: "right",
							$title: localize.lw_graphPositionRight
						}, {
							$value: "bottom",
							$title: localize.lw_graphPositionBottom
						}, {
							$value: "front",
							$title: localize.lw_graphPositionFront
						}, {
							$value: "behind",
							$title: localize.lw_graphPositionBehind
						}]
					}
				}
			},
			$graphMode: "both",
			$graphPosition: "bottom"
		};

		this.$item = {
			$layout: {
				$layoutType: "stack",
				$items: [{
					$bind: "$itemsPerPage",
					$isEditMode: true,
					$skin: "s-aw-field",
					$choiceLayout: "4",
					$isLeftSpaceHidden: true
				}, {
					$bind: "$format",
					$skin: "s-aw-field",
					$isEditMode: true
				}, {
					$layoutType: "row",
					$items: [{
						$bind: "$position",
						$isEditMode: true,
						$skin: "s-aw-field",
						$isLeftSpaceHidden: true
					}, {
						$bind: "$widths",
						$isHidden: true,
						$isEditMode: true,
						$choiceLayout: "2",
						$skin: "s-aw-field",
						$isLeftSpaceHidden: true
					}]
				}, {
					$bind: "$cardsByRowCount",
					$skin: "s-aw-field",
					$isEditMode: true,
					$format: "$radios",
					$choiceLayout: "1"
				}, {
					$bind: "$graphMode",
					$skin: "s-aw-field",
					$isEditMode: true,
					$format: "$combo"
				}, {
					$bind: "$graphPosition",
					$skin: "s-aw-field",
					$isEditMode: true,
					$format: "$combo"
				}]
			}

		};

		this.$skin = "s-aw-list";
		RawPage.prototype.loadBox.call(this, this.designedField.$item);
		var delta = {
			$cardsByRowCount: this.designedField.$item.$cardsByRowCount || 1,
			$format: this.designedField.$item.$format || "grid",
			$itemsPerPage: this.designedField.$item.$itemsPerPage || 20
		};
		if (this.designedField.$item.$cards) {
			delta.$position = this.designedField.$item.$cards.$position;
			delta.$widths = this.designedField.$item.$cards.$widths;
		}
		delta.$position = delta.$position || "no";
		delta.$widths = delta.$widths || "50";

		this.applyChange(delta);
	},
	ensureDesignContext: function(awPalette) {
		if (!this.awPalette) {
			this.awPalette = document.site.authorPage.createContext(this.designedField);
		}
	},
	refreshToolsBar: function() {
		if (this.awPalette) {
			this.awPalette.toolbar.toggleColumnsToolBox();
		}
	},
	dispose: function() {
		if (this.designedField) {
			this.designedField = this.designedField.awAddin = null;
		}
		if (this.awPalette) {
			this.awPalette.dispose();
			this.awPalette = null;
		}
		this.vignetteAuhoring = null;
		RawPage.prototype.dispose.call(this);
	}
});