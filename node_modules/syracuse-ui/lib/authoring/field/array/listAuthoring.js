"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var FieldsSelector = require("syracuse-ui/lib/authoring/field/array/fieldsSelector").FieldsSelector;
var fieldLibrary = require("syracuse-ui/lib/authoring/field/fieldLibrary");
function ListAuthoring(){

}

exports.ListAuthoring = helpers.defineClass(ListAuthoring, RawPage, {
    onNotifyDataChange: function(field, value){
        var metaData = {};
        var $bind = field.$item.$bind;
        if ($bind == "$cardsPosition") {
            if (value == "no") {
                if (this.designedField.$item.$cards) {
                    $bind = "$cards";
                    value = false;
                }
            }
            else {
                if (!this.designedField.$item.$cards) {
                    metaData.$cards = true;
                }
            }
        }
        metaData[$bind] = value;
        this.applyChange(metaData);
        if (this.designedTestFields) {
            this.designedTestFields.forEach(function(field){
                field.applyDesignMetaData(metaData, true);
            });
        }
        else {
            this.boxParent.applyDesignMetaData(metaData, true);
        }
        this.notifyUpdate();
    },
    notifyUpdate: function(isUpdated){
        this.isUpdated = isUpdated !== false;
    },
    _getGrapAuthoringBox: function(){
        return this.idMap[this.designedField.id + "GraphAuthoring"];
    },
    _onOpenGrapContainer: function(){
        debugger;
        var containerBox = this._getGrapAuthoringBox();
        if (containerBox && containerBox.$$body) {
            if (!this.chartAuthoring && this.designedField.chart) {
                if (this.chartAuthoring = fieldLibrary.getAuthoringFieldWidget(this.designedField.chart)) {
                    debugger;
                    this.chartAuthoring.layoutSlot = document.createElement("div");
                    this.chartAuthoring.layoutSlot.className = "s-aw-designer-custom-field";
                    containerBox.$$body[0].appendChild(this.chartAuthoring.layoutSlot);
                    this.initializeNewItem(this.chartAuthoring, {}, this);
                    this.chartAuthoring.$skin = "s-h3";
                    this.chartAuthoring.designedField = this.designedField.chart;
                    this.chartAuthoring.loadBox(this.designedField.chart.$item);
                }
            }
        }
    },
    applyChange: function(newData){
        if (newData) {
            if (newData.$format) {
            
                var delta = newData.$properties = newData.$properties || {};
                var isCards = newData.$format == "cards";
                delta.$cardsByRowCount = delta.$cardsByRowCount || {};
                delta.$cardsByRowCount.$isHidden = !isCards;
                
                delta.$isQuickFilter = delta.$isQuickFilter || {};
                delta.$isQuickFilter.$isHidden = isCards;
                delta.$isRowIndexVisible = delta.$isRowIndexVisible || {};
                delta.$isRowIndexVisible.$isHidden = isCards;
                
                delta.$cardsPosition = delta.$cardsPosition || {};
                delta.$cardsPosition.$isHidden = newData.$format != "grid";
                
                delta.$cardsWidth = delta.$cardsWidth || {};
                var position = this.boundFields.$cardsPosition[0].getDataValue();
                if (position == "no" && this.designedField.$item.$cards) {
                    newData.$cardsPosition = position = "inline";
                }
                delta.$cardsWidth.$isHidden = delta.$cardsPosition.$isHidden || (position == "no") || (position == "inline");
            }
            if (newData.$cardsPosition) {
                var delta = newData.$properties = newData.$properties || {};
                delta.$cardsWidth = delta.$cardsWidth || {};
                delta.$cardsWidth.$isHidden = (newData.$cardsPosition == "no") || (newData.$cardsPosition == "inline");
            }
            if (newData.$graphMode) {
                var delta = newData.$properties = newData.$properties || {};
                delta.$graphPosition = delta.$graphPosition || {};
                delta.$graphPosition.$isHidden = newData.$graphMode != "both";
                if (this.chartAuthoring) {
                    var box = this._getGrapAuthoringBox();
                    if (box) {
                        box.applyDesignMetaData({
                            $isHidden: delta.$graphPosition.$isHidden
                        });
                    }
                }
            }
            /*if (newData.$cards) {
             newData.$cardsPosition = newData.$cardsPosition || "inline" ;
             }*/
        }
        RawPage.prototype.applyChange.call(this, newData);
        if (newData.$graphMode != "list") {
            this._onOpenGrapContainer();
        }
    },
    loadBox: function(opener){
        var self = this;
        self.localize = locale.resources(module)();
        self.isAuthoringDisabled = true;
        self.layoutSlot = document.createElement("div");
        self.layoutSlot.className = "s-aw-list-page";
        self.designedField = (self.opener = opener).designedField;
        self.designedField.page.initializeNewItem(self, {}, self.designedField);
        
        self.$prototype = {
            "$properties": {
                $itemsPerPage: {
                    $type: "application/x-choice",
                    $title: self.localize.lw_itemsPerPage,
                    $value: {
                        $type: "application/x-string",
                        $enum: ["5", "10", "15", "20", "25", "50", "75", "100", "150", "200"].map(function(count){
                            return {
                                $value: count,
                                $title: count
                            };
                        })
                    }
                },
                $cardsWidth: {
                    $type: "application/x-choice",
                    $title: self.localize.lw_cardviewWidth,
                    $value: {
                        $type: "application/x-string",
                        
                        $enum: [{
                            $value: "15",
                            $title: "15 %"
                        }, {
                            $value: "25",
                            $title: "25 %"
                        }, {
                            $value: "40",
                            $title: "40 %"
                        }, {
                            $value: "50",
                            $title: "50 %"
                        }, {
                            $value: "60",
                            $title: "60 %"
                        }, {
                            $value: "75",
                            $title: "75 %"
                        }]
                    }
                },
                $cardsPosition: {
                    $type: "application/x-choice",
                    $title: self.localize.lw_cardviewPosition,
                    $value: {
                        $type: "application/x-string",
                        
                        $enum: [{
                            $value: "no",
                            $title: self.localize.lw_cardviewPositionNo
                        }, {
                            $value: "inline",
                            $title: self.localize.lw_cardviewPositionInline
                        }, {
                            $value: "top",
                            $title: self.localize.lw_cardviewPositionTop
                        }, {
                            $value: "left",
                            $title: self.localize.lw_cardviewPositionLeft
                        }, {
                            $value: "right",
                            $title: self.localize.lw_cardviewPositionRight
                        }, {
                            $value: "bottom",
                            $title: self.localize.lw_cardviewPositionBottom
                        }]
                    }
                },
                $isQuickFilter: {
                    $type: "application/x-boolean",
                    $title: self.localize.lw_isQuickFilter
                },
                $isRowIndexVisible: {
                    $type: "application/x-boolean",
                    $title: self.localize.lw_isRowIndexVisible
                },
                $cardsByRowCount: {
                    $isHidden: true,
                    $type: "application/x-choice",
                    $title: self.localize.lw_cardListByRowCount,
                    $value: {
                        $type: "application/x-string",
                        
                        $enum: [{
                            $value: 1,
                            $title: self.localize.lw_title_cardsByRow_1
                        }, {
                            $value: 2,
                            $title: self.localize.lw_title_cardsByRow_2
                        }, {
                            $value: 3,
                            $title: self.localize.lw_title_cardsByRow_3
                        }, {
                            $value: 4,
                            $title: self.localize.lw_title_cardsByRow_4
                        }, {
                            $value: 5,
                            $title: self.localize.lw_title_cardsByRow_5
                        }]
                    }
                },
                $format: {
                    $type: "application/x-choice",
                    $title: self.localize.lw_format,
                    $value: {
                        $type: "application/x-string",
                        
                        $enum: [{
                            $value: "cards",
                            $title: self.localize.lw_formatCards
                        }, {
                            $value: "grid",
                            $title: self.localize.lw_formatHGrid
                        }, {
                            $value: "vgrid",
                            $title: self.localize.lw_formatVGrid
                        }]
                    }
                },
                $graphMode: {
                    $type: "application/x-choice",
                    $title: self.localize.lw_graphMode,
                    $value: {
                        $type: "application/x-string",
                        
                        $enum: [{
                            $value: "list",
                            $title: self.localize.lw_graphModeList
                        }, {
                            $value: "both",
                            $title: self.localize.lw_graphModeGraphList
                        }, {
                            $value: "graph",
                            $title: self.localize.lw_graphModeGraph
                        }]
                    }
                },
                $graphPosition: {
                    $type: "application/x-choice",
                    $title: self.localize.lw_graphPosition,
                    $value: {
                        $type: "application/x-string",
                        
                        $enum: [{
                            $value: "top",
                            $title: self.localize.lw_graphPositionTop
                        }, {
                            $value: "left",
                            $title: self.localize.lw_graphPositionLeft
                        }, {
                            $value: "right",
                            $title: self.localize.lw_graphPositionRight
                        }, {
                            $value: "bottom",
                            $title: self.localize.lw_graphPositionBottom
                        }, {
                            $value: "tab",
                            $title: self.localize.lw_graphPositionTab
                        }]
                    }
                }
            },
            $format: "grid",
            $graphMode: "both",
            $graphPosition: "bottom",
            $cardsByRowCount: 1,
            $isRowIndexVisible: false,
            $isQuickFilter: false,
            $itemsPerPage: self.designedField.$item.$itemsPerPage || 20,
            $cardsPosition: "no",
            $cardsWidth: "50",
        };
        debugger;
        self.$item = {
            $category: "section",
            $title: self.localize.lw_title_list_authoring,
            $skin: "s-aw-h1",
            $css: "s-aw-palette-field",
            $id: self.$item.$id,
            $layout: {
                $layoutType: "tabs",
                $items: [{
                    $category: "section",
                    $skin: "s-aw-h2",
                    $css: "s-aw-palette-field",
                    $id: (self.$layoutSectionId = helpers.uuid.generate()),
                    $title: self.localize.lw_title_display,
                    $layout: {
                        $layoutType: "row",
                        $items: [{
                            $layoutType: "stack",
                            $items: [{
                                $bind: "$format",
                                $skin: "s-aw-field",
                                $isEditMode: true,
                                $format: "$combo"
                            }, {
                                $bind: "$cardsPosition",
                                $isEditMode: true,
                                $skin: "s-aw-field",
                                $isLeftSpaceHidden: true
                            }, {
                                $bind: "$cardsWidth",
                                $isHidden: true,
                                $isEditMode: true,
                                $choiceLayout: "2",
                                $skin: "s-aw-field",
                                $isLeftSpaceHidden: true
                            }]
                        }, {
                            $bind: "$cardsByRowCount",
                            $skin: "s-aw-field",
                            $isEditMode: true
                        }, {
                            $layoutType: "stack",
                            $items: [{
                                $layoutType: "stack",
                                $items: [{
                                    $bind: "$itemsPerPage",
                                    $isEditMode: true,
                                    $skin: "s-aw-field",
                                    $choiceLayout: "2",
                                    $isLeftSpaceHidden: true
                                }, {
                                    $bind: "$isRowIndexVisible",
                                    $isEditMode: true,
                                    $skin: "s-aw-field",
                                    $isLeftSpaceHidden: true
                                }, {
                                    $bind: "$isQuickFilter",
                                    $isEditMode: true,
                                    $skin: "s-aw-field",
                                    $isLeftSpaceHidden: true
                                }]
                            }]
                        }]
                    }
                }, {
                    $category: "section",
                    $skin: "s-aw-h2",
                    $css: "s-aw-palette-field",
                    $isHidden: self.designedField.$prototype.$cube == null,
                    $title: self.localize.lw_graphIntegration,
                    $layout: {
                        $items: [{
                            $bind: "$graphMode",
                            $skin: "s-aw-field",
                            $isEditMode: true,
                            $isTitleHidden: true
                        }, {
                            $bind: "$graphPosition",
                            $skin: "s-aw-field",
                            $isEditMode: true,
                            $isTitleHidden: true,
                            $format: "$combo"
                        }, {
                            $category: "section",
                            $id: self.designedField.id + "GraphAuthoring",
                            onOpen: function(box){
                                self._onOpenGrapContainer(box);
                            },
                            $layout: {
                                $items: []
                            }
                        }]
                    }
                }, {
                    $category: "section",
                    $skin: "s-aw-h2",
                    $css: "s-aw-palette-field",
                    $id: self.designedField.id + "FieldsSelector",
                    $title: self.localize.lw_title_columns,
                    $layout: {
                        $items: []
                    }
                }]
            
            }
        };
        
        self.$skin = "s-aw-list";
        
        if (self.opener.isQuickDesigner) {
            self.$sourceItem = helpers.object.clone(self.designedField.$item, true);
        }
        RawPage.prototype.loadBox.call(self, self.designedField.$item);
        
        
        self.appendFieldsSelector();
    },
    appendFieldsSelector: function(){
        this.fieldsSelector = new FieldsSelector();
        this.fieldsSelector.load(this.designedField, this.idMap[this.designedField.id + "FieldsSelector"].$$body);
    },
    onClose: function(){
        var self = this;
        if (!self._isClosed && self.isUpdated && !document.site.authorPage) {
            document.site.showMessage({
                $title: self.localize.lw_updateMessageTitle,
                $message: self.localize.lw_cancelMessageText,
                $type: "question",
                $buttons: "yesnocancel",
                callback: function(response){
                    if (response.$id == "yes") {
                        self.onValidate();
                    }
                    else {
                        if (response.$id == "no") {
                            self.designedField.$item = self.$sourceItem;
                            self.designedField.reloadBuilder(true);
                            self._isClosed = true;
                            self.opener.toggleQuick();
                        }
                    }
                }
            });
            return false;
        }
        return true;
    },
    onValidate: function(){
        var self = this;
        if (!self._isClosed && self.isUpdated && !document.site.authorPage) {
            //to implement
            self.opener.toggleQuick();
            self.notifyUpdate(false);
        }
    },
    dispose: function(){
        this.opener = this.authoringFieldLibrary = this.$sourceItem = this.designedField = null;
        RawPage.prototype.dispose.call(this);
    }
});
