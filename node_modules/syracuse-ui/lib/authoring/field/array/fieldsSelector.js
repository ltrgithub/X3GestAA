"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

function FieldsSelector(){
    this._localize = locale.resources(module)();
}

exports.FieldsSelector = helpers.defineClass(FieldsSelector, null, {
    load: function(list, $$container){
        var self = this;
        self.list = list;
        self.$$item = $("<table class='s-aw-list-fields'/>").appendTo($$container);
        self.$$table = $("<table class='s-aw-list-fields-table'/>");
        var $$rowHeader = $(document.createElement("tr"));
        var $rowBody = $(document.createElement("tr"));
        self.availableList = {
            $status: ["add"],
            $isHiddenItem: true,
            $$th: $("<th class='s-aw-list-fields-items-th'/>").appendTo($$rowHeader).text("Available"),
            $$td: $("<td class='s-aw-list-fields-items-td'/>").appendTo($rowBody)
        };
        
        self.arrows = {
            $fullCss: "s-aw-list-fields-items",
            $$th: $("<th class='s-aw-list-fields-arrows-th'/>").appendTo($$rowHeader),
            $$td: $("<td class='s-aw-list-fields-arrows-td'/>").appendTo($rowBody)
        };
        self.displayList = {
            $status: ["del", "unfrozen"],
            $isHiddenItem: false,
            $$th: $("<th class='s-aw-list-fields-items-th'/>").appendTo($$rowHeader).text("Display"),
            $$td: $("<td class='s-aw-list-fields-items-td'/>").appendTo($rowBody)
        };
        self.$$table.append($$rowHeader).append($rowBody).appendTo(self.$$item);
        
        var link = document.createElement("a");
        link.className = "s-aw-list-fields-select";
        self.$$select = $(link).appendTo(self.arrows.$$td);
        link = document.createElement("a");
        link.className = "s-aw-list-fields-unselect";
        self.$$unselect = $(link).appendTo(self.arrows.$$td);
        
        self._fillList(self.availableList);
        self._fillList(self.displayList);
        
        self.$$item.delegate("a[data-s-status]", "click", function(){
            var status = this.getAttribute("data-s-status");
            if (status.indexOf("frozen") >= 0) {
                status = (status == "frozen") ? "unfrozen" : "frozen";
                this.getAttribute("data-s-status", status);
                this.className = "s-aw-list-fields-" + status;
            }
            else {
                var hideColumn = this.getAttribute("data-s-status") == "del";
                var $bind = $(this).closest("[data-s-bind]").attr("data-s-bind");
                setTimeout(function(){
                    self._moveItem($bind, hideColumn, true);
                });
            }
            return false;
        }).delegate(".s-aw-list-fields-li", "click", function(){
            $(this).toggleClass("s-aw-list-fields-selected");
            return false;
        }).delegate(".s-aw-list-fields-li", "dblclick", function(){
            var $bind = $(this).attr("data-s-bind");
            var hideColumn = ($(this).closest("td").index() == 2);
            setTimeout(function(){
                self._moveItem($bind, hideColumn, true);
            });
            return false;
        }).delegate("a.s-aw-list-fields-select,a.s-aw-list-fields-unselect", "click", function(){
            var hideColumn = this.className.indexOf("unselect") > 0;
            var sourceList = hideColumn ? self.displayList : self.availableList;
            var $$selectedItems = sourceList.$$ul.children(".s-aw-list-fields-selected");
            if ($$selectedItems.length == 0) {
                document.site.showMessage({
                    $title: self._localize.fs_msg_title,
                    $message: self._localize.fs_no_selected_field
                });
            }
            else {
                if (hideColumn && $$selectedItems.length == self.displayList.$$ul.children().length) {
                    document.site.showMessage({
                        $title: self._localize.fs_msg_title,
                        $message: self._localize.fs_one_field_to_display
                    });
                }
                else {
                    self._moveItems($$selectedItems, hideColumn);
                }
                
            }
            return false;
        }).delegate("a.s-aw-list-fields-select-all,a.s-aw-list-fields-unselect-all", "click", function(){
            var $$list = ($(this).closest("th").index() == 2) ? self.displayList : self.availableList;
            var select = this.className.indexOf("unselect") < 0;
            $$list.$$ul.children("li").toggleClass("s-aw-list-fields-selected", select);
            this.className = select ? "s-aw-list-fields-unselect-all" : "s-aw-list-fields-select-all";
            return false;
        });
    },
    _moveItems: function($$selectedItems, $isHidden){
        var metaData = {};
        for (var ii = 0; ii < $$selectedItems.length; ii++) {
            var $bind = $$selectedItems[ii].getAttribute("data-s-bind");
            metaData[$bind] = {
                $isHidden: $isHidden
            };
            this._moveItem($bind, $isHidden);
        }
        this.list.applyDesignMetaData({
            $item: {
                $properties: metaData
            }
        }, true);
    },
    _moveItem: function($bind, $isHidden, notify){
        if (notify) {
            if ($isHidden && this.displayList.$$ul.children().length <= 1) {
                document.site.showMessage({
                    $title: self._localize.fs_msg_title,
                    $message: self._localize.fs_one_field_to_display
                });
                return;
            }
            var metaData = {};
            metaData[$bind] = {
                $isHidden: $isHidden
            };
            this.list.applyDesignMetaData({
                $item: {
                    $properties: metaData
                }
            }, true);
        }
        ($isHidden ? this.displayList : this.availableList).$$ul.find("[data-s-bind='" + $bind + "']").remove();
        this._addItem(($isHidden ? this.availableList : this.displayList), $bind, this.list.$fieldProperties[$bind]);
    },
    _addItem: function(itemList, $bind, $field){
        $field = $field || this.$fieldProperties[$bind];
        var li = document.createElement("li");
        li.className = "s-aw-list-fields-li";
        li.setAttribute("data-s-bind", $bind);
        var $$li = $(li).appendTo(itemList.$$ul).text($field.$title);
        itemList.$status.forEach(function($status){
            var btn = document.createElement("a");
            btn.setAttribute("data-s-status", $status);
            btn.className = "s-aw-list-fields-" + $status;
            $(btn).prependTo($$li);
        });
    },
    _fillList: function(itemList){
        var self = this;
        itemList.$$tdBody = $("<div class='s-aw-list-fields-td-body'/>").appendTo(itemList.$$td);
        itemList.$$ul = $("<ul class='s-aw-list-fields-ul'/>").appendTo(itemList.$$tdBody);
        self.list.$item.$layout.$items.forEach(function($item){
            var $field = self.list.$fieldProperties[$item.$bind];
            if ($field && !$field.$isHidden) {
                if (itemList.$isHiddenItem == ($item.$isHidden || false)) {
                    self._addItem(itemList, $item.$bind, $field);
                }
            }
        });
        var btn = document.createElement("a");
        btn.className = "s-aw-list-fields-select-all";
        $(btn).prependTo(itemList.$$th);
    },
    dispose: function(){
        delete this.list;
        if (this.$$item) {
            this.$$item.undelegate();
        }
        if (this.$$select) {
            this.$$select.unbind();
            this.$$unselect.unbind();
        }
    }
});
