"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;

function ImageAuthoring(){
}

exports.ImageAuthoring = helpers.defineClass(ImageAuthoring, RawPage, {
    onNotifyDataChange: function(field, value){
        var metaData = {};
        metaData[field.$item.$bind] = value;
        this.applyChange(metaData);
        document.site.authorPage.notifyUpdate();
    },
    applyChange: function(newData){
        var metaData = {
            $properties: {}
        };
        if (newData) {
            Object.keys(newData).forEach(function($prop){
                var value = newData[$prop];
                if ($prop == "$isAutoSize") {
                    metaData.$properties.$imageHeight = {
                        $isDisabled: value
                    };
                }
                metaData[$prop] = value;
            });
        }
        RawPage.prototype.applyChange.call(this, metaData);
        this.designedField.applyDesignMetaData(newData, true);
    },
    loadBox: function(initData){
        this.isAuthoringEventEnabled = true;
        this.$prototype = {
            "$properties": {
                $imageWidth: {
                    $type: "application/x-string",
                    $title: this.designedField._localize.if_imageFieldWidth
                },
                $imageHeight: {
                    $type: "application/x-string",
                    $title: this.designedField._localize.if_imageFieldHeight
                },
                $isAutoSize: {
                    $type: "application/x-boolean",
                    $title: this.designedField._localize.if_imageFieldWidthIsAutoSize
                }
            }
        };
        this.$item = {
            $category: "section",
            $layout: {
                $items: [{
                    $bind: "$isAutoSize",
                    $isEditMode: true,
                    $skin: "s-aw-field"
                }, {
                    $bind: "$imageHeight",
                    $isEditMode: true,
                    $skin: "s-aw-field"
                }]
            }
        };
        this.$skin = "s-aw-list";
        RawPage.prototype.loadBox.call(this, initData);
    },
    dispose: function(){
        if (this.designedField) {
            this.designedField = this.designedField.awAddin = null;
        }
        RawPage.prototype.dispose.call(this);
    }
});
