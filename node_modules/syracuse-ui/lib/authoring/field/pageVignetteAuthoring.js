"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;

function PageVignetteAuthoring() {

}

exports.PageVignetteAuthoring = helpers.defineClass(PageVignetteAuthoring, RawPage, {
	create: function(designedField) {
		this.designedField = designedField;
		this.designedField.$item.$page = this.designedField.vignette.$item;
		if (designedField.vignette.$facet == "$query" || designedField.vignette.$facet == "$cube") {
			var $properties = designedField.vignette.$prototype.$properties;
			var $binds = Object.keys($properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				if ($properties[$bind].$type == "application/x-array") {
					var fields = designedField.vignette.boundFields[$bind];
					if (fields && fields.length > 0) {
						this.contentField = fields[0];
						if (this.contentField) {
							this.contentAddin = this.contentField.getAuthoringWidget(this.contentField);
							this.contentAddin.vignetteAuhoring = this;
							break;
						}
					}

				}

			}
		}
	},
	onNotifyVignetteContentChange: function($contentItem) {
		/*this.designedField.$item.$page = {};
         var $props = Object.keys($contentItem);
         for (var ii = 0, jj = $props.length; ii < jj; ii++) {
         if ($props[ii] != "$menus") {
         this.designedField.$item.$page[$props[ii]] = $contentItem[$props[ii]];
         }
         }*/
	},
	showAddin: function(slot) {
		if (this.contentAddin) {
			if (this.contentField && this.contentAddin && this.contentAddin.designer) {
				document.site.authorPage.getContext(this.contentField);
			} else {
				slot.appendChild(this.contentAddin.$$item[0]);
			}

		} else {
			slot.appendChild(this.$$item[0]);
		}
	},
	ensureDesignContext: function(designer) {
		if (this.contentAddin && this.contentAddin.ensureDesignContext) {
			this.contentAddin.ensureDesignContext(designer);
		}
	},
	onNotifyDataChange: function(field, value) {},
	applyChange: function(newData) {
		/*if (this.contentAddin && this.contentAddin.loaded && newData.$page) {
         this.contentAddin.applyChange(newData.$page);
         }*/
	},
	loadBox: function(initData) {
		this.isAuthoringEventEnabled = true;
		this.$prototype = {
			$properties: {}
		};
		this.$item = {
			$category: "section",
			$layout: {
				$items: [{}]
			}
		};
		RawPage.prototype.loadBox.call(this);
		if (this.contentAddin) {
			this.contentAddin.loadBox();
		}
		this.applyChange(initData);
	},
	dispose: function() {
		if (this.contentAddin) {
			this.contentAddin.vignetteAuhoring = null;
			document.controller.disposeObject(this.contentAddin);
			this.contentAddin = null;
		}
		if (this.designedField) {
			this.designedField = this.designedField.awAddin = null;
		}
		RawPage.prototype.dispose.call(this);
	}
});