"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var locale = require('syracuse-core/lib/locale');

function HtmlVignetteAuthoring(){

}

exports.HtmlVignetteAuthoring = helpers.defineClass(HtmlVignetteAuthoring, RawPage, {
    onNotifyDataChange: function(field, value){
        var metaData = {};
        var $bind = field.$item.$bind;
        if ($bind == "$locationTitle") {
            $bind = "$title";
        }
        else {
            if ($bind == "$locationUrl") {
                $bind = "$url";
            }
        }
        metaData[$bind] = value;
        this.designedField.applyDesignMetaData(metaData, true);
        this.applyChange(metaData);
        document.site.authorPage.notifyUpdate();
    },
    applyChange: function(newData){
        if (newData) {
            var data = {};
            var $keys = Object.keys(newData);
            for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
                var $key = $keys[ii];
                switch ($key) {
                    case "$title":
                        data.$locationTitle = newData[$key];
                        break;
                    case "$url":
                        data.$locationUrl = newData[$key];
                        break;
                    default:
                        data[$key] = newData[$key];
                        break;
                }
            }
            RawPage.prototype.applyChange.call(this, data);
        }
    },
    loadBox: function(initData){
        this.isAuthoringEventEnabled = true;
        var localize = locale.resources(module)();
        this.$prototype = {
            "$properties": {
                $locationTitle: {
                    $type: "application/x-string",
                    $title: localize.htmlV_location_title
                },
                $locationUrl: {
                    $type: "application/x-string",
                    $title: localize.htmlV_location_url
                },
                $width: {
                    $type: "application/x-string",
                    $title: localize.htmlV_width
                },
                $height: {
                    $type: "application/x-string",
                    $title: localize.htmlV_height
                }
            },
            $width: "100%",
            $height: "100%",
            $locationTitle: this.designedField.$item.$title || this.designedField.$field.$location.$title,
            $locationUrl: this.designedField.$item.$url || this.designedField.$field.$location.$url,
        };
        this.$item = {
            $category: "section",
            $layout: {
                $items: [{
                    $bind: "$locationTitle",
                    $isEditMode: true,
                    $skin: "s-aw-field"
                }, {
                    $bind: "$locationUrl",
                    $isEditMode: true,
                    $skin: "s-aw-field",
                    $rows: 5
                }, {
                    $layoutType: "row",
                    $autoSize: true,
                    $items: [{
                        $bind: "$width",
                        $isEditMode: true,
                        
                        $skin: "s-aw-field"
                    }, {
                        $bind: "$height",
                        $isEditMode: true,
                        $skin: "s-aw-field"
                    }]
                }]
            }
        };
        this.$skin = "s-aw-list";
        RawPage.prototype.loadBox.call(this, initData);
    },
    dispose: function(){
        if (this.designedField) {
            this.designedField = this.designedField.awAddin = null;
        }
        RawPage.prototype.dispose.call(this);
    }
});
