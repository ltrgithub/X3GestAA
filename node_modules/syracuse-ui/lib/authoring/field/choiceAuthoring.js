"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;

function ChoiceAuthoring(){

}

exports.ChoiceAuthoring = helpers.defineClass(ChoiceAuthoring, RawPage, {
    create: function(designedField){
        this.designedField = designedField;
    },
    showAddin: function(slot){
        slot.appendChild(this.$$item[0]);
    },
    onNotifyDataChange: function(field, value){
        var metaData = {};
        metaData[field.$item.$bind] = value;
        this.applyChange(metaData);
        document.site.authorPage.notifyUpdate();
    },
    applyChange: function(newData){
        RawPage.prototype.applyChange.call(this, newData);
        if (newData) {
            this.designedCombo = (this.designedField.$item.$format == "$combo") ? this.designedField : null;
        }
        this.designedField.applyDesignMetaData(newData, true);
    },
    loadBox: function(initData){
        this.isAuthoringEventEnabled = true;
        var localize = document.site.authorPage.localize;
        this.$prototype = {
            "$properties": {
                $format: {
                    $type: "application/x-choice",
                    $title: localize.cfa_format_title,
                    $value: {
                        $type: "application/x-string",
                        
                        $enum: [{
                            $value: "$combo",
                            $title: localize.cfa_format_enum_dropdownlist
                        }, {
                            $value: "$radios",
                            $title: localize.cfa_format_enum_radiobuttons
                        }]
                    }
                },
                $choiceLayout: {
                    $type: "application/x-choice",
                    $title: localize.cfa_choiceLayout_title,
                    $value: {
                        $type: "application/x-string",
                        
                        $enum: [{
                            $value: "row",
                            $title: localize.cfa_choiceLayout_enum_1_row
                        }, {
                            $value: "1",
                            $title: localize.cfa_choiceLayout_enum_1_column
                        }, {
                            $value: "2",
                            $title: localize.cfa_choiceLayout_enum_2_columns
                        }, {
                            $value: "3",
                            $title: localize.cfa_choiceLayout_enum_3_columns
                        }, {
                            $value: "4",
                            $title: localize.cfa_choiceLayout_enum_4_columns
                        }]
                    }
                }
            }
        };
        this.$item = {
            $category: "section",
            $layout: {
                $items: [{
                    $bind: "$format",
                    $isEditMode: true,
                    $skin: "s-aw-field",
                    "$choiceLayout": "1"
                }, {
                    $bind: "$choiceLayout",
                    $format: "$combo",
                    $isEditMode: true,
                    $skin: "s-aw-field"
                }]
            }
        };
        this.$skin = "s-aw-list";
        RawPage.prototype.loadBox.call(this, initData);
    },
    dispose: function(){
        if (this.designedCombo && this.designedCombo.builder) {
            this.designedCombo.builder.onAuthoring = false;
            this.designedCombo.builder.toggleList(false);
        }
        if (this.designedField) {
            this.designedField = this.designedField.awAddin = null;
        }
        this.designedCombo = null;
        RawPage.prototype.dispose.call(this);
    }
});
