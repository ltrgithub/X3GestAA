"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var BarSplitter = require("syracuse-ui/lib/authoring/barSplitter").BarSplitter;
var Treebar = require("syracuse-ui/lib/authoring/tree/treebar").Treebar;
var sectionProvider = require("syracuse-ui/lib/authoring/sectionProvider");
var RowResizer = require("syracuse-ui/lib/authoring/tools/rowResizer").RowResizer;
var DesignerFieldAddins = require("syracuse-ui/lib/authoring/fieldAddins/designerFieldAddins").DesignerFieldAddins;
var DesignerUISwitch = require("syracuse-ui/lib/authoring/tools/designerUISwitch").DesignerUISwitch;
var DesignerViews = require("syracuse-ui/lib/authoring/tools/designerViews").DesignerViews;
var DesignerTemplates = require("syracuse-ui/lib/authoring/tools/designerTemplates").DesignerTemplates;
var DesignerHistory = require("syracuse-ui/lib/authoring/tools/designerHistory").DesignerHistory;
var DesignerLocalization = require("syracuse-ui/lib/authoring/tools/designerLocalization").DesignerLocalization;
var DesignerLabel = require("syracuse-ui/lib/authoring/tools/designerLabel").DesignerLabel;
var DragDrop = require("syracuse-ui/lib/authoring/tools/dragDrop").DragDrop;

function ArticleDesigner() {}

exports.ArticleDesigner = helpers.defineClass(ArticleDesigner, RawPage, {
	onEndChangeStep: function($item) {
		var $bind = this.awItem.$item.$bind;
		var $article = helpers.object.clone($item || this.tools.history.getCurrentStep(), true);
		this.awArticle.reloadLayout($article);
		this.tools.history.refreshStepLinks();
		var itemToSelect;
		if ($bind) {
			var bounds = this.awArticle.boundFields[$bind];
			itemToSelect = bounds ? bounds[0] : null;
		}
		this.awArticle.page.warnAdministrationUpdates(false);
		this.treebar.fill(true);
		this.selectItem(itemToSelect || this.awArticle, true);
		this.applyChangeToMobile($article);
	},
	loadBox: function(authorPage, awArticle, toolsSlots) {
		this.toolsSlots = toolsSlots;
		this.awArticle = awArticle;
		if (this.awArticle.page.dialogWrapper) {
			this._toggleDesignDialog(true);
		}
		this.designerLocalize = authorPage.localize;
		this.$prototype = {
			$properties: {
				$isMaximizable: {
					$type: "application/x-boolean",
					$title: this.designerLocalize.aw_isMaximizable
				},
				$isBoxCollapsable: {
					$type: "application/x-boolean",
					$title: this.designerLocalize.aw_isBoxCollapsable
				},
				$isAdvanced: {
					$type: "application/x-boolean",
					$title: this.designerLocalize.aw_isAdvanced
				},

				$rowAlign: {
					$type: "application/x-choice",
					$title: this.designerLocalize.aw_rowAlign,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "top",
							$title: this.designerLocalize.aw_rowAlignTop
						}, {
							$value: "bottom",
							$title: this.designerLocalize.aw_rowAlignBottom
						}]
					}
				}
			},
			$links: {
				$excludeMe: {
					$title: this.designerLocalize.aw_excludeMe
				}
			}
		};
		this.awArticle.designer = this;
		this.awArticle.isDesigned = true;
		this.diagnosePage = this.awArticle.page;
		this._loadTools(true);
		this.isAuthoringEventEnabled = true;
		this._unregisterResizer = true;
		this.externalAdapter = document.site.externalAdapter;
		this.panels = {};

		this.$item = {
			$skin: "s-aw-properties-item",
			$isTitleHidden: true,
			$layout: {
				$items: []
			}
		};
		this.$autoFetch = false;
		var keys = Object.keys(this.designerLocalize);
		this.$prototype.$localization = {};
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			this.$prototype.$localization[keys[ii].replace("aw_", "@")] = this.designerLocalize[keys[ii]];
		}
		this.localize = document.site.localize;
		this._initializePage();
		this.layoutSlot = document.createElement("div");
		this.toolsSlots.properties.appendChild(this.layoutSlot).className = "s-aw-properties-body";
		this.awArticle.page._item.appendChild(this.toolsSlots.properties);
		RawPage.prototype.loadBox.call(this);

		this.toolsSlots.treebar = document.createElement("div");
		this.toolsSlots.treebar.className = "s-aw-treebar-slot";
		this.toolsSlots.treebar.setAttribute("data-s-article", this.id);
		this.awArticle.page._item.insertBefore(this.toolsSlots.treebar, this.awArticle.page._item.firstChild);

		document.site.emptyDom(this.toolsSlots.treebar);

		this.treebar = new Treebar();
		this.treebar.treebarBody = document.createElement("div");
		this.treebar.treebarBody.className = "s-aw-treebar-body";
		this._$$body = $(this.treebar.treebarBody);

		this.barSplitter = new BarSplitter();
		this.barSplitter.load(this.awArticle.page, this.layoutSlot, this.toolsSlots.treebar, this.treebar.treebarBody);

		this.treebar.load(this);
		this.selectItem(this.awArticle, true);
		this.layoutSlot.style.display = "";
		this.toolsSlots.treebar.style.display = "";
		this.tools.uiSwitch.toggleItemAuthoring(this.awArticle, true);
		this.bindEvents();

		if (this.awArticle.page.$item.$transaction) {
			var $title = "Transaction";
			if (this.awArticle.page.$item.$isModel) {
				$title += " Model";
			}
			var label = document.createElement("div");
			label.style.display = "";
			this.transactionLabel.textContent = $title;
			label.id = "s-aw-transaction";
			label.style.display = "none";
			this.toolsSlots.history.appendChild(label);
		}
	},

	_loadTools: function(load) {
		if (load) {
			this.tools = {
				uiSwitch: new DesignerUISwitch(),
				views: new DesignerViews("s-aw-viewType-link"),
				history: new DesignerHistory("s-aw-top-left-link"),
				localization: new DesignerLocalization(),
				templates: new DesignerTemplates(),
				label: new DesignerLabel(),
				fieldAddins: new DesignerFieldAddins(),
				rowResizer: new RowResizer()
			};
			var ids = Object.keys(this.tools);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				this.tools[ids[ii]].load(this);
			}
		} else {
			var ids = Object.keys(this.tools);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				this.tools[ids[ii]].dispose();
			}
			this.tools = null;
		}
	},
	onMenuClick: function(menuItem) {
		switch (menuItem.$item.$bind) {
			case "$excludeMe":
				var layoutParent = this.awItem.layoutParent;
				var excludedFields;
				if (this.awItem.$designLevel == "field") {
					excludedFields = [this.awItem];
				} else {
					excludedFields = this.awItem.layoutContent.getFields();
				}
				if (excludedFields) {
					for (var ii = 0, jj = excludedFields.length; ii < jj; ii++) {
						this.awArticle.page.onExcludeField(excludedFields[ii].$item.$bind, true);
					}
				}
				var index = layoutParent.items.indexOf(this.awItem);
				layoutParent.removeItem(this.awItem, true);
				var newItem = layoutParent.items[index] || layoutParent.items[index - 1];
				if (newItem && newItem.isSpaceBox) {
					newItem = null;
				}
				newItem = newItem || layoutParent.boxParent;
				switch (layoutParent.$layout.$layoutType) {
					case "row":
						layoutParent.addSpaceBox(index);
						break;
					case "tabs":
						if (layoutParent.items.length == 0) {
							layoutParent.convertToNewLayout({
								$layoutType: "stack",
								$width: "100"
							});
						}
						break;
				}
				this.treebar.fill(true);
				this.endTargetPageUpdate(newItem, true);
				break;
		}
	},
	onWindowResize: function() {
		if (this.layoutSlot && this.awArticle.scrollview) {
			this.barSplitter.onWindowResize(this.treebar);
		}
	},
	_ensureSelectedItemTitle: function() {
		this.selectedItemTitle = this.awItem.getTitle(false);
		if (this.selectedItemTitle == "" && this.awItem.$designLevel == "field") {
			this.selectedItemTitle = this.getBindTitle(this.awItem.$item.$bind, this.awItem.$field);
		}
		this.selectedPanel.setDescription(this.selectedItemTitle && this.selectedItemTitle != "-" ? this.selectedItemTitle : "");
		this.treebar.fill(true);
	},
	showSettingPanel: function() {
		var panelId = this.awItem.isMenuItem ? "menu" : this.awItem.$designLevel;
		if (this.selectedPanel) {
			this.selectedPanel.setState({
				$isHidden: true
			});
		}
		if (!this.panels[panelId]) {
			var $item = sectionProvider[panelId](this.designerLocalize);
			if (panelId == "field") {
				var $items = $item.$layout.$items;
				this.tools.fieldAddins.addFieldSection($items[$items.length - 1].$layout);
			}
			this.panels[panelId] = this.layoutContent.loadChildItem(null, $item);
		}
		(this.selectedPanel = this.panels[panelId]).setTitle(this.designerLocalize["aw_" + panelId]);
		this.applyChange({
			$isAdvanced: false,
			$isHidden: false
		});
		this._ensureSelectedItemTitle();
		this.applyChange({
			$isAdvanced: this.awItem.$item.$isAdvanced,
			$isMaximizable: this.awItem.$item.$isMaximizable,
			$isBoxCollapsable: this.awItem.$item.$isBoxCollapsable,
			$rowAlign: (this.awLayout ? this.awLayout.$layout.$rowAlign : "top")
		});
		if (this.awItem.isField) {
			this.tools.fieldAddins.onShow();
		}
		this.selectedPanel.setState({
			$isHidden: false
		});
		this.tools.localization.setTitleItem(this.awItem);
		this.tools.label.setLabelItem(this.awItem);
		var sections = this.selectedPanel.layoutContent.items;
		var layout = this.awLayout || this.awItem.layoutContent;
		this.selectedPanel.colCount = (layout && layout.$item) ? (layout.$item.$widths || "100").split(",").length : 1;

		var isHidden, section;
		if (sections[0].$bind == "$excludeMe") {
			sections[0].layoutSlot.style.textAlign = "center";
		}
		for (var ii = 0, jj = sections.length; ii < jj; ii++) {
			section = sections[ii];
			isHidden = this.awLayout == null ? false : true;
			if (section.$item.$isSectionModels) {
				this.tools.templates.addModelLinks(section, this.awItem, this.selectedPanel.colCount, this.awLayout);
			}
			if (section.$item.$isTitleSection) {
				var titleLocalization = section.layoutContent.items[2];
				var titleLocalizationChoice = section.layoutContent.items[1].builder.choicesItems[0];
				document.site.toggleClass(titleLocalization._domItem, "s-aw-title-localization", true);
				titleLocalizationChoice.appendChild(titleLocalization._domItem);
			}
			if (section.$item.$isLabelSection) {
				if (this.awItem.unknowMode || this.awItem.$field.$type == "application/x-boolean") {
					isHidden = true;
				}
			}
			if (section.$item.$isFieldAddinSection) {
				isHidden = true;
				if (this.awItem.$authoringType) {
					var fieldSections = section.layoutContent.items;
					for (var ii = 0, jj = fieldSections.length; ii < jj; ii++) {
						var fieldSection = fieldSections[ii],
							isSectionHidden = true;
						if (fieldSection.$item.$authoringType == this.awItem.$authoringType) {
							isHidden = isSectionHidden = false;
						}
						fieldSection.setState({
							$isHidden: isSectionHidden
						});
					}
				}
			}
			if (section.$item.$isRowSection) {
				if (!(isHidden = this.awLayout == null ? true : false)) {
					sectionProvider.fillRowSection(this.designerLocalize, section);
				}
			} else {
				if (section.$item.$isStructure && this.awItem.$designLevel == "field") {
					if (this.awItem.layoutParent && this.awItem.layoutParent.isRow) {
						isHidden = true;
					}
				}
			}
			if (section.hideBox) {
				section.hideBox(section.$isHidden = isHidden);
			}
			if (section.$item.$isTabChoice) {
				this.tools.templates.fillTabChoice(section, this.awItem);
			}
		}
	},
	notifyDataChange: function(field, value) {
		switch (field.$item.$bind) {
			case "$rowAlign":
				if (this.awLayout) {
					this.awLayout.$layout.$rowAlign = value;
					for (var ii = 0, jj = this.awLayout.items.length; ii < jj; ii++) {
						this.awLayout.items[ii].layoutSlot.style.verticalAlign = value;
					}
					this.endTargetPageUpdate(this.awLayout, true);
				}
				break;
			default:
				var metaData = {};
				if (!this.tools.localization.onDesignerNotifyDataChange(this.awItem, metaData, field, value) && !this.tools.label.onDesignerNotifyDataChange(this.awItem, metaData, field, value)) {
					metaData[field.$item.$bind] = value;
				}
				this.awItem.applyDesignMetaData(metaData, true);
				if (this.awItem.$designLevel == "field") {
					this.tools.fieldAddins.notifyDataChange(metaData);
				}
				this.tools.history.notifyUpdate();
				this.applyChange(metaData);
				break;
		}
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$isHidden !== undefined) {
				newData.$properties.$isMaximizable = {
					$isDisabled: newData.$isHidden
				};
				newData.$properties.$isBoxCollapsable = {
					$isDisabled: newData.$isHidden
				};
			}
			this.tools.label.onDesignerApplyChange(this.awItem, newData);
			this.tools.fieldAddins.onDesignerApplyChange(newData);
			if (newData.$title !== undefined) {
				this._ensureSelectedItemTitle();
			}
		}
		RawPage.prototype.applyChange.call(this, newData);
	},
	onClickPicker: function(picker) {
		var templateResult = this.tools.templates.onTemplateChoiceClick(picker, this.awItem, this.awLayout);
		if (templateResult) {
			this.endTargetPageUpdate(templateResult, true);
			return false;
		}
		if (this.barSplitter.onClickPicker(picker)) {
			return false;
		}
		var $bind = picker.getAttribute("data-s-picker");
		switch ($bind) {
			case "$addRowBefore":
			case "$addRowAfter":
				var layout = this.awLayout ? this.awLayout : (this.awItem.layoutContent || this.awItem.layoutParent);
				var $curRow = {
					$layoutType: layout.$layout.$layoutType,
					$widths: layout.$layout.$widths,
					$autoSize: layout.$layout.$autoSize
				};
				if (!layout.layoutParent) {
					layout = layout.ensureHasParent();
				}
				var index = layout.layoutParent.items.indexOf(layout);
				var newRow = layout.layoutParent.loadChildItem(null, {
					$layoutType: $curRow.$layoutType,
					$widths: $curRow.$widths,
					$autoSize: $curRow.$autoSize,
				}, ($bind == "$addRowAfter") ? ++index : index);
				this.endTargetPageUpdate(newRow, true);
				break;
		}
		return true;
	},

	onNotifyDataChange: function(field, value) {
		if (this.awArticle.isList && field.$item.$measure) {
			var $cube = this.awArticle.$item.$cube || {};
			$cube.$measures = $cube.$measures || {};
			($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {}).$style = value;
			this.awArticle.awAddin.applyFieldDesignMetaDataChange({
				$cube: $cube
			});
			var metaData = {};
			metaData[field.$item.$bind] = value;
			this.applyChange(metaData);
			this.tools.history.notifyUpdate();
			return false;
		}
		return true;
	},
	applyChangeToMobile: function($article) {
		if (document.site.mobileGateway) {
			document.site.mobileGateway.applyChange($article);
		}
	},
	endTargetPageUpdate: function(selectedItem, isStructureUpdated) {
		this.awArticle.page.layoutValidator.validate(this.awArticle.page.layoutContent, true);
		if (isStructureUpdated) {
			this.treebar.fill(false);
		}
		selectedItem = selectedItem || this.awItem;
		this.selectItem(selectedItem, true, true);
		if (selectedItem && selectedItem.$designLevel == "field" && selectedItem.boxParent) {
			selectedItem.boxParent.validateFieldVisibility();
			this.tools.uiSwitch.toggleItemAuthoring(this.awArticle.page, true);
		}
		this.tools.history.notifyUpdate();
		document.site.authorPage.temporalySave();
	},
	selectItem: function(item, select, ensureSelect) {
		if (this.awLayout && this.awLayout.disposed) {
			this.awLayout = null;
		}
		if (this.awItem && this.awItem.disposed) {
			this.awItem = null;
		}
		if (item && item.disposed) {
			item = this.awItem;
		}
		if (select) {
			item = item || this.awArticle.page;
			if (ensureSelect || item != this.awItem) {
				this.selectItem(null, false);
				if (item.isLayout) {
					this.awItem = item.boxParent;
					this.awLayout = item;
				} else {
					this.awItem = item;
					this.awLayout = null;
				}

				this.awArticle.page.scrollToItem(this.awLayout || this.awItem);
				this.showSettingPanel();
				if (this.awLayout) {
					this.tools.uiSwitch._toggleItemCss(this.awLayout, "s-aw-designed", true);
				}
				this.tools.uiSwitch._toggleItemCss(item, "s-aw-designed", true);
				document.site.resize();
			}
		} else {
			item = item || this.awItem;
			if (item) {
				this.tools.uiSwitch._toggleItemCss(item, "s-aw-designed", false);
			}
			if (this.awLayout) {
				this.tools.uiSwitch._toggleItemCss(this.awLayout, "s-aw-designed", false);
			}
		}
		this.treebar.selectNode(item, select);
	},
	onClickItem: function(item, target) {
		var article = document.controller.findArticle($(target));
		if (article.isDesigned) {
			if (document.site.dragDropInstance && document.site.dragDropInstance.isDragAuthoring) {
				document.site.dragDropInstance.stop(event);
				document.site.setDragDropInstance();
			} else {
				delete document.site.requestedDDAuthoringItem;
				item = item || this.findItem(target);
				if (item) {
					if (item.isSpaceBox) {
						item = item.boxParent;
					}
					if (item.isMenuGroup && item.contextField) {
						return false;
					}
					if (item && (item != this && item.page != this)) {
						this.selectItem(item, true, true);
					}
				}
			}
		} else {
			if (!article.page.isAuthoringEventEnabled && article.page != this) {
				if (!(article.page.$prototype && article.page.$prototype.$representation == "authoringSaveParam")) {
					return false;
				}
			}
		}
		return true;
	},
	bindEvents: function() {
		var self = this;
		document.site.$$layoutSlot.delegate(".s-aw-item", "click.author", function(event) {
			self.onClickItem(self.findItem(this), this);
			return false;
		}).delegate(".s-aw-slot-sep-row", "mousedown.author", function(event) {
			if (!document.site.dragDropInstance) {
				self.tools.rowResizer.start(this, event);
				return false;
			}
		}).delegate(".s-aw-item, .s-aw-add-item", "mousedown.author", function(event) {
			if (document.site.dragDropInstance) {
				if (!document.site.dragDropInstance.isDragAuthoring) {
					return;
				}
				document.site.dragDropInstance.stop(event);
				document.site.setDragDropInstance();
			} else {
				if (event.currentTarget.className.indexOf("s-aw-add-item") >= 0) {
					var node = self.treebar.findNode(event);
					if (node) {
						document.site.requestedDDAuthoringItem = node.item;
						return false;
					}
				} else {
					var item = self.findItem(this);
					if (item) {
						if (item != self.awArticle.page && item.page == self.awArticle.page) {
							document.site.requestedDDAuthoringItem = item;
							return false;
						}
					}
				}
			}
			// return false;
		}).delegate(".s-aw-slot-sep-row,.s-aw-slot-sep-stack", "mousemove.author", function(event) {
			if (!document.site.dragDropInstance) {
				var item = self.findItem(this);
				if (item) {
					if (item != self.awArticle.page) {
						if (document.site.requestedDDAuthoringItem) {
							(document.site.dragDropInstance = new DragDrop()).start(self, self.awArticle.page.$$scrollview);
						} else {
							if (document.site.dragDropInstance) {
								if (item.layoutParent || item.isLayout) {
									document.site.dragDropInstance.moveDragImage(event, item);
								}
							}
						}
					}
					self.tools.uiSwitch.toggleOverItem(item, true);
				}
				return false;
			}
			return true;
		}).delegate(".s-aw-item,.s-aw-add-item", "mousemove.author", function(event) {
			if (!document.site.dragDropInstance || document.site.dragDropInstance.isDragAuthoring) {
				if (event.currentTarget.className.indexOf("s-aw-add-item") >= 0) {
					var node = self.treebar.findNode(event);
					if (node) {
						var item = node.item;
						if (document.site.requestedDDAuthoringItem) {
							document.site.setDragDropInstance(new DragDrop());
							document.site.dragDropInstance.start(self, self.awArticle.page.$$scrollview);
						} else {
							if (document.site.dragDropInstance) {
								if (item.layoutParent || item.isLayout || item.$awAddNewItem) {
									document.site.dragDropInstance.moveDragImage(event, item);
								}
							}
						}
					}
				} else {
					var item = self.findItem(this);
					if (item) {
						if (item != self.awArticle.page) {
							if (document.site.requestedDDAuthoringItem) {
								document.site.setDragDropInstance(new DragDrop());
								document.site.dragDropInstance.start(self, self.awArticle.page.$$scrollview);
							} else {
								if (document.site.dragDropInstance) {
									if (item.layoutParent || item.isLayout) {
										document.site.dragDropInstance.moveDragImage(event, item);
									}
								}
							}
						}
						self.tools.uiSwitch.toggleOverItem(item, true);
					}
				}
				return false;
			}
			return true;
		}).delegate(".s-aw-item", "mouseenter.author mouseleave.author", function(event) {
			if (document.site.dragDropInstance && document.site.dragDropInstance.isDragAuthoring) {
				var $$item = $(this);
				var layout = self.findItem(this, true);
				if (layout && layout.$layout.$layoutType == "tabs") {
					if (event.type == "mouseenter") {
						var tabItem = self.findItem(this);
						self._ddTabEnter = setTimeout(function() {
							if (tabItem && tabItem.$item) {
								if (!tabItem.$item.$opened) {
									tabItem.openBox(true);
								}
							}
						}, 500);
					} else {
						if (self._ddTabEnter) {
							clearTimeout(self._ddTabEnter);
							delete self._ddTabEnter;
						}
					}
				}
				return false;
			}
			return true;
			// return false;
		}).delegate(".s-aw-layout-delete", "click.author", function() {
			if (!document.site.dragDropInstance) {
				delete document.site.requestedDDAuthoringItem;
				var spaceBox = self.findItem(this);
				setTimeout(function() {
					var layout = spaceBox.layoutParent;
					var layoutParent = layout.layoutParent;
					var deletedIndex;
					if (spaceBox) {
						deletedIndex = layout.items.indexOf(spaceBox);
						layout.removeItem(spaceBox, true);
					}
					if (layout.items.length > 0 && layout.isRow) {
						layout.deleteRowColumn(deletedIndex);
					} else {
						if (layoutParent) {
							layoutParent.removeItem(layout, true);
							if (layoutParent.isRow) {
								layoutParent.deleteRowColumn(deletedIndex);
							}
						} else {
							layoutParent = layout.boxParent.layoutParent;
							layoutParent.removeItem(layout.boxParent, true, layoutParent.isRow);
						}
					}
					self.endTargetPageUpdate(null, true);
				}, 10);
			}
			return false;
		});
	},
	findItem: function(item, findLayout) {
		var $$item = $(item);
		var article = document.controller.findArticle($(item));
		if (article) {
			if (findLayout || item.syraAwLayoutId) {
				while (item && !item.syraAwLayoutId) {
					item = item.parentNode;
				}
				if (item) {
					return (article.id == item.syraAwLayoutId) ? article : (article.layouts[item.syraAwLayoutId] || null);
				}
			} else {
				while (item && !item.syraAwItemId) {
					item = item.parentNode;
				}
				if (item) {
					item = (article.id == item.syraAwItemId) ? article : (article.idMap[item.syraAwItemId] || null);
					if (!item) {
						item = document.controller.findMenu($$item);
					}
					return item;

				}
			}
		}
		return null;
	},
	_toggleDesignDialog: function(begin) {
		this.awArticle.page.dialogWrapper.$$closeBtn[0].style.display = begin ? "none" : "";
		this.awArticle.page.dialogWrapper.overlay.className = begin ? "s-aw-overlay" : "s-overlay";
	},
	dispose: function() {
		if (document.site.$$layoutSlot) {
			document.site.$$layoutSlot.undelegate(".author");
		}
		if (this.awArticle.page == this.awArticle) {
			if (this.awArticle.page.dialogWrapper) {
				this._toggleDesignDialog(false);
			}
			this.awArticle.page.isDesigned = false;
			this.tools.uiSwitch.toggleItemAuthoring(this.awArticle.page, false);
			delete this.awArticle.page.designer;
		}
		this._loadTools(false);
		if (this.treebar) {
			this.treebar.dispose();
		}
		if (this.barSplitter) {
			this.barSplitter.dispose();
		}
		if (this.toolsSlots.treebar) {
			document.site.removeDomChild(this.toolsSlots.treebar);
		}
		this.$prototype = this.$$item = null;

		if (this.selectedPanel) {
			this.selectedPanel.fieldAddinSection = null;
		}
		if (this.layoutSlot) {
			document.site.removeDomChild(this.layoutSlot);
		}
		this.designerLocalize = null;
		this.barSplitter = this._ddTabEnter = this.awItem = this.awLayout = this.toolsSlots = null;
		this.treebar = this.selectedPanel = this.diagnosePage = this.$item = this.externalAdapter = this.$prototype = this.layoutSlot = null;
		RawPage.prototype.dispose.call(this);
	}
});