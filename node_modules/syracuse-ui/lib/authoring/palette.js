"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var Toolbar = require("syracuse-ui/lib/authoring/toolbar").Toolbar;
var modelFactory = require("syracuse-ui/lib/authoring/modelFactory");
var paletteSectionProvider = require("syracuse-ui/lib/authoring/paletteSectionProvider");
var paletteFieldsProvider = require("syracuse-ui/lib/authoring/paletteFieldsProvider");

function Palette() {}

exports.Palette = helpers.defineClass(Palette, RawPage, {
	toggleContext: function(show) {
		var display = show ? "" : "none";
		this.layoutSlot.style.display = display;
		if (this.toolbarSlot) {
			this.toolbarSlot.style.display = display;
		}
	},
	getawPrototype: function() {
		return this.awArticle.$prototype.$item ? this.awArticle.$prototype.$item : this.awArticle.$prototype;
	},
	getawScrollview: function() {
		return this.awArticle.scrollview || this.targetPage.scrollview;
	},
	_loadDefinedTitles: function(section, $titles) {
		$titles = $titles || {};
		if (section.$item.$title) {
			$titles[section.$item.$title] = section.id;
		}
		if (section.childrenSection) {
			for (var ii = 0, jj = section.childrenSection.length; ii < jj; ii++) {
				var child = section.childrenSection[ii];
				if (child.isSection && !child.isMenuGroup) {
					this._loadDefinedTitles(section.childrenSection[ii], $titles);
				}
			}
		}
		return $titles;
	},
	filterConvergenceTitle: function($awTitle) {
		var $enum = [];
		var $localization = this.getawPrototype().$localization;
		var $keys = Object.keys($localization);
		var $definedTitles = this._loadDefinedTitles(this.awArticle);
		for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
			var $key = "{" + $keys[ii] + "}";
			if (($key[2] == "B" || $key[2] == "S") && ($keys == $awTitle || !$definedTitles[$key])) {
				$enum.push({
					$value: $key,
					$title: $localization[$keys[ii]]
				});
			}
		}
		return $enum;
	},
	loadTitlesChoices: function() {
		var authorPage = document.site.authorPage;
		var $enum = [];
		var $localization = this.getawPrototype().$localization;
		if ($localization) {
			if (authorPage.targetPage.$isFusionPage) {
				$enum = this.filterConvergenceTitle();
			} else {
				var $keys = Object.keys($localization);
				for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
					$enum.push({
						$value: "{" + $keys[ii] + "}",
						$title: $localization[$keys[ii]]
					});
				}
			}
		}
		this.$prototype.$properties.$titleLocalization.$value.$enum = $enum;
		if ($enum.length) {
			this.$prototype.$properties.$titleChoice.$value.$enum.unshift({
				$value: 0,
				$title: authorPage.localize.aw_titleLocalization
			});
		} else {
			this.$prototype.$properties.$titleChoice.$value.$enum.unshift({
				$value: 0,
				$title: authorPage.localize.aw_titleVisible
			});
			this.$prototype.$properties.$titleLocalization.$isHidden = true;
		}
	},

	loadBox: function(authorPage, awArticle) {
		var self = this;
		var localize = document.site.authorPage.localize;
		self.isAuthoringEventEnabled = true;
		self._unregisterResizer = true;
		self.externalAdapter = document.site.externalAdapter;
		self.panels = {};
		self.$prototype = {
			$properties: {
				$titleChoice: {
					$type: "application/x-choice",
					$isTitleHidden: true,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: 1,
							$title: localize.aw_titleBlank
						}, {
							$value: 2,
							$title: localize.aw_titleHidden
						}]
					}
				},
				$titleLocalization: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-string",
						$enum: []
					}
				},
				$title: {
					$type: "application/x-string",
					$title: localize.aw_boxTitle,
					$isHidden: true
				},
				$isMaximizable: {
					$type: "application/x-boolean",
					$title: localize.aw_isMaximizable
				},
				$isBoxCollapsable: {
					$type: "application/x-boolean",
					$title: localize.aw_isBoxCollapsable
				},
				$isTitleHidden: {
					$type: "application/x-boolean",
					$title: localize.aw_isTitleHidden
				},
				$fieldsIsTitleHidden: {
					$type: "application/x-boolean",
					$title: localize.aw_isLabelHidden
				},
				$isAdvanced: {
					$type: "application/x-boolean",
					$title: localize.aw_isAdvanced
				},
				$labelAlignment: {
					$type: "application/x-choice",
					$title: localize.aw_labelPosition,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "t",
							$title: localize.aw_labelPositionTop
						}, {
							$value: "ll",
							$title: localize.aw_labelPositionLeftLeft
						}, {
							$value: "lr",
							$title: localize.aw_labelPositionLeftRight
						}]
					}
				},
				$rowAlign: {
					$type: "application/x-choice",
					$title: localize.aw_rowAlign,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "top",
							$title: localize.aw_rowAlignTop
						}, {
							$value: "bottom",
							$title: localize.aw_rowAlignBottom
						}]
					}
				}
			},
			$links: {
				$excludeMe: {
					$title: localize.aw_excludeMe
				}
			}
		};
		paletteFieldsProvider.addFieldProperties(self.$prototype.$properties, localize);
		self.$item = {
			$skin: "s-aw-palette-item",
			$isTitleHidden: true,
			$layout: {
				$items: []
			}
		};
		self.$autoFetch = false;
		var keys = Object.keys(localize);
		self.$prototype.$localization = {};
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			self.$prototype.$localization[keys[ii].replace("aw_", "@")] = localize[keys[ii]];
		}
		self.loadTitlesChoices();
		self.localize = document.site.localize;
		self._initializePage();
		self.layoutSlot = document.createElement("div");
		document.site.authorPage.paletteSlot.appendChild(self.layoutSlot).className = "s-aw-palette-body";

		RawPage.prototype.loadBox.call(self);

		self.preferences = {
			isDocked: true,
			isCollapsed: self.targetPage.dialogWrapper != null
		};
		self.$$toolbarSlot = $(self.toolbarSlot = document.createElement("div"));
		self.toolbarSlot.className = "s-aw-toolbar-slot";
		self.toolbarSlot.setAttribute("data-s-article", self.id);
		self.targetPage._item.insertBefore(self.toolbarSlot, self.targetPage._item.firstChild);

		document.site.emptyDom(self.toolbarSlot);
		self._bar = document.createElement("div");
		self._bar.className = "s-aw-toolbar";
		self.$$bar = $(self._bar);

		self.resizeBar = document.createElement("a");
		self.resizeBar.className = "s-aw-toolbar-resizer";
		self.openerPicker = document.createElement("a");
		self.openerPicker.className = "s-aw-toolbar-opener";
		self.openerPicker.setAttribute("data-s-picker", "s-bar-collapse");
		self.resizeBar.appendChild(self.openerPicker);
		self._bar.appendChild(self.resizeBar);
		self._widgetResizer = document.site.setWidgetResizable({
			source: self,
			slot: self.toolbarSlot,
			dragSpot: null,
			direction: {
				right: true
			},
			minWidth: 200,
			resizerSpot: self.resizeBar,
			onResize: function(resizer, moving) {
				if (!moving) {
					document.site.toggleClass(self.resizeBar, "s-resizing", document.site.resizing);
					document.site.toggleClass(self.openerPicker, "s-resizing", document.site.resizing);
				}
			}
		});
		self._widgetResizer.isEnabled = !self.preferences.isCollapsed;

		self.toolbar = new Toolbar();
		self.toolbar.toolbarBody = document.createElement("div");
		self.toolbar.toolbarBody.className = "s-aw-toolbar-body";
		self._$$body = $(self.toolbar.toolbarBody);
		self._bar.appendChild(self.toolbar.toolbarBody);
		self.toolbar.load(this);

		self.toolbarSlot.appendChild(self._bar);
		self.ensureState();
		document.site.authorPage.selectItem(self.awArticle, true);
		self.toggleContext(true);

	},
	onMenuClick: function(menuItem) {
		switch (menuItem.$item.$bind) {
			case "$excludeMe":
				var layoutParent = this.awItem.layoutParent;
				var excludedFields;
				if (this.awItem.$authoringLevel == "field") {
					excludedFields = [this.awItem];
				} else {
					excludedFields = this.awItem.layoutContent.getItems("field");
				}
				if (excludedFields) {
					for (var ii = 0, jj = excludedFields.length; ii < jj; ii++) {
						this.targetPage.onExcludeField(excludedFields[ii].$item.$bind, true);
					}
				}
				var index = layoutParent.items.indexOf(this.awItem);
				layoutParent.removeItem(this.awItem, true);
				var newItem = layoutParent.items[index] || layoutParent.items[index - 1];
				if (newItem && newItem.isSpaceBox) {
					newItem = null;
				}
				newItem = newItem || layoutParent.boxParent;
				switch (layoutParent.$layout.$layoutType) {
					case "row":
						layoutParent.addSpaceBox(index);
						break;
					case "tabs":
						if (layoutParent.items.length == 0) {
							layoutParent.convertToNewLayout({
								$layoutType: "stack",
								$width: "100"
							});
						}
						break;
				}
				this.toolbar.fill(true);
				document.site.authorPage.endTargetPageUpdate(newItem, true);
				break;
		}
	},
	onWindowResize: function() {
		if (this.layoutSlot && this.getawScrollview()) {
			var height = $(this.getawScrollview()).height();
			if (height) {
				this.layoutSlot.style.height = height + "px";
				if (this.$$bar) {
					this._bar.style.height = height + "px";
					this.resizeBar.style.height = height + "px";
					this.openerPicker.style.top = ((height - this.openerPicker.clientHeight) / 2) + "px";
					this.toolbar.onWindowResize(this._bar.clientHeight);
				}
				this.resizeDialogPage();
			}
		}
	},
	resizeDialogPage: function() {
		if (this.targetPage.dialogWrapper) {
			var width = this.targetPage.dialogWrapper.$$dialogSlot.width();
			if (width) {
				this.getawScrollview().style.width = (width - (document.site.authorPage._widths.palette + this.toolbarSlot.offsetWidth)) + "px";
			}
		}
	},
	ensureSelectedItemTitle: function() {
		var title = this.awItem.getTitle(false);
		if (title == "" && this.awItem.$authoringLevel == "field") {
			title = this.getBindTitle(this.awItem.$item.$bind, this.awItem.$field);
		}
		this.selectedPanel.setDescription(title && title != "-" ? title : "");
		return title;
	},
	showSettingPanel: function() {
		var localize = document.site.authorPage.localize;
		var paletteId = this.awItem.isMenuItem ? "menu" : this.awItem.$authoringLevel;
		if (this.selectedPanel) {
			this.selectedPanel.setState({
				$isHidden: true
			});
		}
		if (!this.panels[paletteId]) {
			var $item = paletteSectionProvider[paletteId](localize);
			if (paletteId == "field") {
				var $items = $item.$layout.$items[0].$layout.$items;
				paletteFieldsProvider.addFieldSection($items[$items.length - 1].$layout);
			}
			this.panels[paletteId] = this.layoutContent.loadChildItem(null, $item);
		}
		(this.selectedPanel = this.panels[paletteId]).setTitle(localize["aw_" + paletteId]);
		this.applyChange({
			$isAdvanced: false,
			$isHidden: false,
			$isTitleHidden: false,
			$fieldsIsTitleHidden: false,
			$labelAlignment: this.getLabelAlignment()
		});

		var $awItem = this.awItem.$item;
		var $awTitle = $awItem.$title;
		var $titleChoice = ($awItem.$isTitleHidden || $awTitle == null) ? 2 : (($awTitle == "-") ? 1 : 0);
		this.applyChange({
			$isAdvanced: $awItem.$isAdvanced,
			$title: this.dataset.$savedTitle = this.ensureSelectedItemTitle(),
			$titleLocalization: $awTitle,
			$titleChoice: $titleChoice,
			$isMaximizable: $awItem.$isMaximizable,
			$isBoxCollapsable: $awItem.$isBoxCollapsable,
			$isTitleHidden: $awItem.$isTitleHidden,
			$fieldsIsTitleHidden: $awItem.$fieldsIsTitleHidden,
			$labelAlignment: this.getLabelAlignment($awItem),
			$rowAlign: (this.awLayout ? this.awLayout.$layout.$rowAlign : "top")
		});
		if (this.awItem.isField) {
			paletteFieldsProvider.onShow(this, this.awItem);
		}
		this.selectedPanel.setState({
			$isHidden: false
		});
		if (this.boundFields.$titleChoice && this.boundFields.$titleLocalization) {
			var $titleLocalization = {
				$isDisabled: ($titleChoice != 0)
			};
			if (this.awItem.isSection && document.site.authorPage.targetPage.$isFusionPage && !$titleLocalization.$isDisabled) {
				$titleLocalization.$value = {
					$enum: this.filterConvergenceTitle($awTitle)
				};
			}
			this.applyChange({
				$properties: {
					$titleLocalization: $titleLocalization
				}
			});
		}
		var sections = this.selectedPanel.layoutContent.items[0].layoutContent.items;
		modelFactory.fillModelsSection(sections, this.awItem.$authoringLevel);

		var layout = this.awLayout || this.awItem.layoutContent;
		this.selectedPanel.colCount = (layout && layout.$item) ? (layout.$item.$widths || "100").split(",").length : 1;

		this.applyChange({
			$properties: {
				$isTitleHidden: {
					$isHidden: this.awItem.isTabLayout == true
				}
			}
		});

		var isHidden, section;
		if (sections[0].$bind == "$excludeMe") {
			sections[0].layoutSlot.style.textAlign = "center";
		}
		for (var ii = 0, jj = sections.length; ii < jj; ii++) {
			section = sections[ii];
			isHidden = this.awLayout == null ? false : true;
			if (section.$item.$isTitleSection) {
				var titleLocalization = section.layoutContent.items[2];
				var titleLocalizationChoice = section.layoutContent.items[1].builder.choicesItems[0];
				document.site.toggleClass(titleLocalization._domItem, "s-aw-title-localization", true);
				titleLocalizationChoice.appendChild(titleLocalization._domItem);
			}
			if (section.$item.$isLabelSection) {
				if (this.awItem.unknowMode || this.awItem.$field.$type == "application/x-boolean") {
					isHidden = true;
				}
			}
			if (section.$item.$isFieldAddinSection) {
				isHidden = true;
				if (this.awItem.$authoringType) {
					var fieldSections = section.layoutContent.items;
					for (var ii = 0, jj = fieldSections.length; ii < jj; ii++) {
						var fieldSection = fieldSections[ii],
							isSectionHidden = true;
						if (fieldSection.$item.$authoringType == this.awItem.$authoringType) {
							isHidden = isSectionHidden = false;
						}
						fieldSection.setState({
							$isHidden: isSectionHidden
						});
					}
				}
			}
			if (section.$item.$isRowSection) {
				if (!(isHidden = this.awLayout == null ? true : false)) {
					paletteSectionProvider.fillRowSection(localize, section);
				}
			} else {
				if (section.$item.$isStructure && this.awItem.$authoringLevel == "field") {
					if (this.awItem.layoutParent && this.awItem.layoutParent.isRow) {
						isHidden = true;
					}
				}
			}
			if (section.hideBox) {
				section.hideBox(section.$isHidden = isHidden);
			}
			if (section.$item.$isColumnSection) {
				paletteSectionProvider.fillColChoices(localize, section, this.selectedPanel.colCount);
			}
			if (section.$item.$isTabChoice) {
				this.selectedPanel.sectionTabChoice = section;
				paletteSectionProvider.fillTabChoice(section.$item.$isTabChoice, localize, this.selectedPanel, this.awItem);
			}
		}
	},
	setRowAlign: function(valign) {
		if (this.awLayout) {
			this.awLayout.$layout.$rowAlign = valign;
			for (var ii = 0, jj = this.awLayout.items.length; ii < jj; ii++) {
				this.awLayout.items[ii].layoutSlot.style.verticalAlign = valign;
			}
			document.site.authorPage.endTargetPageUpdate(this.awLayout, true);
		}
	},
	getLabelAlignment: function($item) {
		var alignment = this.targetPage.$isEditMode ? "t" : "ll";
		if ($item) {
			if ($item.$isTopLabelAlignment !== undefined ||
				$item.$fieldsIsTopLabelAlignment !== undefined ||
				$item.$isRightTextLabelAlignment !== undefined ||
				$item.$fieldsIsRightTextLabelAlignment !== undefined) {
				if ($item.$isTopLabelAlignment || $item.$fieldsIsTopLabelAlignment) {
					alignment = "t";
				} else {
					if ($item.$isRightTextLabelAlignment || $item.$fieldsIsRightTextLabelAlignment) {
						alignment = "lr";
					} else {
						alignment = "ll";
					}
				}
			}
		}
		return alignment;
	},
	_applyDesignMetaDataToSection: function(section, metaData) {
		section.applyDesignMetaData(metaData, true);
		var items = section.layoutContent.getItems();
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			var item = items[ii];
			if (item.isField) {
				item.applyDesignMetaData({
					$isTopLabelAlignment: metaData.$fieldsIsTopLabelAlignment,
					$isRightTextLabelAlignment: metaData.$fieldsIsRightTextLabelAlignment,
					$isTitleHidden: metaData.$fieldsIsTitleHidden
				}, true);
			} else
			if (item.isSection) {
				this._applyDesignMetaDataToSection(item, metaData);
			}
		}
	},
	notifyDataChange: function(field, value) {
		var authorPage = document.site.authorPage;
		switch (field.$item.$bind) {
			case "$rowAlign":
				this.setRowAlign(value);
				break;
			case "$fieldsIsTitleHidden":
				this.awItem.applyDesignMetaData({
					$fieldsIsTitleHidden: value
				}, true);
				authorPage.notifyUpdate();
				break;
			case "$labelAlignment":
				var metaData = {
					$isTopLabelAlignment: value == "t"
				};
				if (metaData.$isTopLabelAlignment == false) {
					metaData.$isRightTextLabelAlignment = (value == "lr");
				}
				if (this.awItem.isField) {
					this.awItem.applyDesignMetaData(metaData, true);
				} else {
					this.awItem.applyDesignMetaData({
						$fieldsIsTopLabelAlignment: metaData.$isTopLabelAlignment,
						$fieldsIsRightTextLabelAlignment: metaData.$isRightTextLabelAlignment
					}, true);
				}
				authorPage.notifyUpdate();
				break;
			default:
				var metaData = {};
				var $bind = field.$item.$bind;
				if ($bind == "$titleChoice") {
					var isTitleLocalizationDisabled = true;
					switch (value) {
						case 0:
							$bind = "$title";
							metaData.$isTitleHidden = false;
							if (this.$prototype.$properties.$titleLocalization.$isHidden) {
								value = this.dataset.$savedTitle;
							} else {
								isTitleLocalizationDisabled = false;
								value = this.awItem.$item.$title;
								if (!value || value == "-") {
									value = this.$prototype.$properties.$titleLocalization.$value.$enum[0].$value;
								}
								this.applyChange({
									$titleLocalization: value
								});
							}
							break;
						case 1:
							$bind = "$title";
							value = "-";
							metaData.$isTitleHidden = false;
							break;
						case 2:
							$bind = "$isTitleHidden";
							value = true;
							break;
					}
					this.applyChange({
						$properties: {
							$titleLocalization: {
								$isDisabled: isTitleLocalizationDisabled
							}
						}
					});
				}
				if ($bind == "$titleLocalization") {
					$bind = "$title";
				}
				metaData[$bind] = value;
				this.awItem.applyDesignMetaData(metaData, true);
				if (this.awItem.$authoringLevel == "field") {
					paletteFieldsProvider.notifyDataChange(this, this.awItem, metaData);
				}
				authorPage.notifyUpdate();
				this.applyChange(metaData);
				break;
		}
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$isHidden !== undefined) {
				var keys = ["$title", "$isMaximizable", "$isBoxCollapsable", "$isTitleHidden", "$fieldsIsTitleHidden", "$labelAlignment"];
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					newData.$properties[keys[ii]] = {
						$isDisabled: newData.$isHidden
					};
				}
			}
			if (newData.$title !== undefined) {
				this.toolbar.fill(true);
				this.ensureSelectedItemTitle();
			}
			if (newData.$fieldsIsTitleHidden !== undefined) {
				(newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$fieldsIsTitleHidden;
			}
			if (newData.$isTitleHidden !== undefined) {
				newData.$properties.$title = newData.$properties.$title || {};
				newData.$properties.$title.$isDisabled = newData.$isTitleHidden;
				if (this.awItem.$authoringLevel == "field") {
					(newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$isTitleHidden;
				} else {
					newData.$properties.$title = newData.$properties.$isBoxCollapsable = newData.$properties.$isMaximizable = {
						$isDisabled: newData.$isTitleHidden
					};
				}
			}
			paletteFieldsProvider.applyChange(this, this.awItem, newData);
		}
		RawPage.prototype.applyChange.call(this, newData);
	},
	onClickPicker: function(target) {
		var $bind = target.getAttribute("data-s-picker");
		if ($bind.indexOf("$model_") == 0) {
			modelFactory.onModelClick($bind, this);
			return false;
		}
		switch ($bind) {
			case "$contentTabChoice":
				var children = (this.awItem.isLayout ? this.awItem : this.awItem.layoutContent).getItems();
				if (!(children.length > 0 && children[0].$authoringLevel == "field")) {
					this.awItem.layoutContent.convertToNewLayout({
						$layoutType: (target.$syraValue == "tabs") ? "tabs" : "stack"
					});
					paletteSectionProvider.fillTabChoice($bind, document.site.authorPage.localize, this.selectedPanel, this.awItem);
					document.site.authorPage.endTargetPageUpdate(this.awItem, true);
				}
				break;
			case "$boxTabChoice":
				if (this.awItem.layoutParent.$layoutType != target.$syraValue) {
					if (this.awItem.layoutParent.items.length == 1) {
						this.awItem.layoutParent.convertToNewLayout({
							$layoutType: target.$syraValue
						});
					} else {
						var layoutRoot = this.awItem.layoutParent;
						if (target.$syraValue != "stack") {
							var layoutTab = layoutRoot.wrapIntack([this.awItem], layoutRoot.$layout.$items.indexOf(this.awItem.$item));
							layoutTab.convertToNewLayout({
								$layoutType: "tabs"
							});
						}
					}
					document.site.authorPage.endTargetPageUpdate(this.awItem, true);
				}
				break;
			case "$colcount":
				var layout = this.awLayout ? this.awLayout : this.awItem.layoutContent;
				if (this.awItem.$authoringLevel == "field") {
					layout = this.awItem.layoutParent.wrapIntack([this.awItem], this.awItem.layoutParent.items.indexOf(this.awItem));
					layout.removeSpaceBox(true);
				}
				var $widths = ["100", "50,50", "33,33,33", "25,25,25,25", "20,20,20,20,20", "17,17,16,16,17,17"][target.$syraCoCount - 1];
				layout.convertToNewLayout({
					$layoutType: $widths == "100" ? "stack" : "row",
					$widths: $widths
				});
				document.site.authorPage.endTargetPageUpdate(layout.$layout.$layoutType == "stack" ? this.awItem : layout, true);
				break;
			case "$addRowBefore":
			case "$addRowAfter":
				var layout = this.awLayout ? this.awLayout : (this.awItem.layoutContent || this.awItem.layoutParent);
				document.site.authorPage.insertRow(layout, $bind == "$addRowBefore" ? "top" : "bottom");
				break;
			case "s-bar-dockMode":
			case "s-bar-collapse":
				if ($bind == "s-bar-dockMode") {
					this.preferences.isDocked = !this.preferences.isDocked;
				} else {
					this._widgetResizer.isEnabled = !(this.preferences.isCollapsed = !this.preferences.isCollapsed);
				}
				this.ensureState();
				this.onWindowResize();
				this.resizeDialogPage();
				break;
		}
		return true;
	},
	onEndChangeStep: function() {
		var ids = Object.keys(this.$menus);
		this.targetPage.warnAdministrationUpdates(false);
		this.toolbar.fill(true);
	},

	ensureState: function() {
		if (this.preferences.isCollapsed) {
			this.openedWidth = this.$$toolbarSlot.outerWidth();
			this.toolbarSlot.style.width = "10px";
			this.toolbar.toolbarBody.style.display = "none";
			this.resizeBar.className = "s-aw-toolbar-resizer s-close";
			this.openerPicker.className = "s-aw-toolbar-opener s-close";
			if (!this.preferences.isDocked) {
				this._bar.style.width = "10px";
			}
		} else {
			this.resizeBar.className = "s-aw-toolbar-resizer";
			this.openerPicker.className = "s-aw-toolbar-opener";
			this.resizeBar.style.width = "";
			if (this.preferences.isDocked) {
				this.toolbarSlot.style.width = (this.openedWidth || 200) + "px";
				this._bar.style.position = "";
				this._bar.style.width = "";
			} else {
				this.toolbarSlot.style.width = "10px";
				document.site.setZIndex(this._bar);
				this._bar.style.position = "absolute";
				this._bar.style.width = "200px";
				this._bar.style.top = "0px";
				this._bar.style.left = "0px";
			}
			this.toolbar.toolbarBody.style.display = "";
		}
	},
	onNotifyDataChange: function(field, value) {
		if (this.awArticle.isList && field.$item.$measure) {
			var $cube = this.awArticle.$item.$cube || {};
			$cube.$measures = $cube.$measures || {};
			($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {}).$style = value;
			this.awArticle.awAddin.applyFieldDesignMetaDataChange({
				$cube: $cube
			});
			var metaData = {};
			metaData[field.$item.$bind] = value;
			this.applyChange(metaData);
			document.site.authorPage.notifyUpdate();
			return false;
		}
		return true;
	},
	dispose: function(onAuthorPageDispose) {
		if (!onAuthorPageDispose) {
			document.site.authorPage.onContextDisposed(this);
		}
		if (this.toolbar) {
			this.toolbar.dispose();
		}
		if (this._widgetResizer) {
			this._widgetResizer.dispose();
			this._widgetResizer = null;
		}
		if (this.toolbarSlot) {
			document.site.removeDomChild(this.toolbarSlot);
		}
		this.$prototype = this.toolbarSlot = this.$$item = this.$$toolbarSlot = null;

		if (this.selectedPanel) {
			this.selectedPanel.sectionTabChoice = this.selectedPanel.fieldAddinSection = null;
		}
		if (this.layoutSlot) {
			document.site.removeDomChild(this.layoutSlot);
		}
		this.targetPage = this.$sourceItem = null;
		this.awItem = this.awLayout = null;
		this.toolbar = this.selectedPanel = this.diagnosePage = this.$item = this.externalAdapter = this.$prototype = this.layoutSlot = null;
		RawPage.prototype.dispose.call(this);
	}
});