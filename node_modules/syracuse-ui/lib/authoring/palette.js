"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var drawHelper = require("syracuse-ui/lib/authoring/drawHelper");
var ArticleTree = require("syracuse-ui/lib/authoring/articleTree").ArticleTree;
var GridTree = require("syracuse-ui/lib/authoring/gridTree").GridTree;

function Palette() {}

exports.Palette = helpers.defineClass(Palette, RawPage, {
	toggleContext: function(show) {
		var display = show ? "" : "none";
		this.layoutSlot.style.display = display;
		if (this.toolbarSlot) {
			this.toolbarSlot.style.display = display;
		}
	},
	getawPrototype: function() {
		return this.awArticle.$prototype.$item ? this.awArticle.$prototype.$item : this.awArticle.$prototype;
	},
	getawScrollview: function() {
		return this.awArticle.scrollview || this.targetPage.scrollview;
	},
	loadTitlesChoices: function() {
		var authorPage = document.site.authorPage;
		var $enum = [];
		var $localization = this.getawPrototype().$localization;
		if ($localization) {
			var $keys = Object.keys($localization);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				$enum.push({
					$value: "{" + $keys[ii] + "}",
					$title: $localization[$keys[ii]]
				});
			}
		}
		this.$prototype.$properties.$titleLocalization.$value.$enum = $enum;
		if ($enum.length) {
			this.$prototype.$properties.$titleChoice.$value.$enum.unshift({
				$value: 0,
				$title: authorPage.localize.aw_titleLocalization
			});
		} else {
			this.$prototype.$properties.$titleChoice.$value.$enum.unshift({
				$value: 0,
				$title: authorPage.localize.aw_titleVisible
			});
			this.$prototype.$properties.$titleLocalization.$isHidden = true;
		}
	},
	loadBox: function(authorPage, awArticle) {
		var self = this;
		var authorPage = document.site.authorPage;
		self.isAuthoringEventEnabled = true;
		self._unregisterResizer = true;
		self.externalAdapter = document.site.externalAdapter;
		self.panels = {};
		self.$prototype = {
			$properties: {
				$titleChoice: {
					$type: "application/x-choice",
					$isTitleHidden: true,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: 1,
							$title: authorPage.localize.aw_titleBlank
						}, {
							$value: 2,
							$title: authorPage.localize.aw_titleHidden
						}]
					}
				},
				$titleLocalization: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-string",
						$enum: []
					}
				},
				$title: {
					$type: "application/x-string",
					$title: authorPage.localize.aw_boxTitle,
					$isHidden: true
				},
				$isMaximizable: {
					$type: "application/x-boolean",
					$title: authorPage.localize.aw_isMaximizable
				},
				$isBoxCollapsable: {
					$type: "application/x-boolean",
					$title: authorPage.localize.aw_isBoxCollapsable
				},
				$isTitleHidden: {
					$type: "application/x-boolean",
					$title: authorPage.localize.aw_isTitleHidden
				},
				$fieldsIsTitleHidden: {
					$type: "application/x-boolean",
					$title: authorPage.localize.aw_isLabelHidden
				},
				$isAdvanced: {
					$type: "application/x-boolean",
					$title: authorPage.localize.aw_isAdvanced
				},
				$labelAlignment: {
					$type: "application/x-choice",
					$title: authorPage.localize.aw_labelPosition,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "t",
							$title: authorPage.localize.aw_labelPositionTop
						}, {
							$value: "ll",
							$title: authorPage.localize.aw_labelPositionLeftLeft
						}, {
							$value: "lr",
							$title: authorPage.localize.aw_labelPositionLeftRight
						}]
					}
				},
				$layoutTabChoice: {
					$type: "application/x-choice",
					$title: authorPage.localize.aw_showAs,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "tabs",
							$title: authorPage.localize["aw_s-layout-tabs"]
						}, {
							$value: "stack",
							$title: authorPage.localize["aw_s-layout-panels"]
						}]
					}
				},
				$rowAlign: {
					$type: "application/x-choice",
					$title: authorPage.localize.aw_rowAlign,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "top",
							$title: authorPage.localize.aw_rowAlignTop
						}, {
							$value: "bottom",
							$title: authorPage.localize.aw_rowAlignBottom
						}]
					}
				},
				$boxTabChoice: {
					$type: "application/x-choice",
					$title: authorPage.localize.aw_showAs,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "tabs",
							$title: authorPage.localize["aw_s-layout-tabs"]
						}, {
							$value: "stack",
							$title: authorPage.localize["aw_s-layout-panels"]
						}]
					}
				}
			},
			$links: {
				$addSection: {
					$title: authorPage.localize.aw_addSection
				},
				$addBlock: {
					$title: authorPage.localize.aw_addBlock
				},
				$addMenus: {
					$title: authorPage.localize.aw_addMenus
				},
				$excludeMe: {
					$title: authorPage.localize.aw_excludeMe
				},
				$addRowBefore: {
					$title: authorPage.localize.aw_addRowBefore
				},
				$addRowAfter: {
					$title: authorPage.localize.aw_addRowAfter
				},
				"s-layout-type-1": {
					$title: "1",
					$widths: "100"
				},
				"s-layout-type-2": {
					$title: "2",
					$widths: "50,50"
				},
				"s-layout-type-3": {
					$title: "3",
					$widths: "33,33,33"
				},
				"s-layout-type-4": {
					$title: "4",
					$widths: "25,25,25,25"
				},
				"s-layout-type-5": {
					$title: "5",
					$widths: "20,20,20,20,20"
				},
				"s-layout-type-6": {
					$title: "6",
					$widths: "17,17,16,16,17,17"
				}
			}
		};
		self.$item = {
			$skin: "s-aw-palette-item",
			$isTitleHidden: true,
			$layout: {
				$items: []
			}
		};
		self.$autoFetch = false;
		var keys = Object.keys(authorPage.localize);
		self.$prototype.$localization = {};
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			self.$prototype.$localization[keys[ii].replace("aw_", "@")] = authorPage.localize[keys[ii]];
		}
		self.loadTitlesChoices();
		self.localize = document.site.localize;
		self._initializePage();
		self.layoutSlot = document.createElement("div");
		authorPage.paletteSlot.appendChild(self.layoutSlot).className = "s-aw-palette-body";

		RawPage.prototype.loadBox.call(self);

		self.preferences = {
			isDocked: true,
			isCollapsed: self.targetPage.dialogWrapper != null
		};
		self.$$toolbarSlot = $(self.toolbarSlot = document.createElement("div"));
		self.toolbarSlot.className = "s-aw-toolbar-slot";
		self.toolbarSlot.setAttribute("data-s-article", self.id);
		self.targetPage._item.insertBefore(self.toolbarSlot, self.targetPage._item.firstChild);

		document.site.emptyDom(self.toolbarSlot);
		self._bar = document.createElement("div");
		self._bar.className = "s-aw-toolbar";
		self.$$bar = $(self._bar);

		self.resizeBar = document.createElement("a");
		self.resizeBar.className = "s-aw-toolbar-resizer";
		self.openerPicker = document.createElement("a");
		self.openerPicker.className = "s-aw-toolbar-opener";
		self.openerPicker.setAttribute("data-s-picker", "s-bar-collapse");
		self.resizeBar.appendChild(self.openerPicker);
		self._bar.appendChild(self.resizeBar);
		self._resizer = document.site.setResizable({
			source: self,
			slot: self.toolbarSlot,
			dragSpot: null,
			direction: {
				right: true
			},
			minWidth: 200,
			resizerSpot: self.resizeBar,
			onResize: function(resizer, moving) {
				if (!moving) {
					document.site.toggleClass(self.resizeBar, "s-resizing", document.site.resizing);
					document.site.toggleClass(self.openerPicker, "s-resizing", document.site.resizing);
				}
			}
		});
		self._resizer.isEnabled = !self.preferences.isCollapsed;

		self.toolbarBody = document.createElement("div");
		self.toolbarBody.className = "s-aw-toolbar-body";
		self._$$body = $(self.toolbarBody);
		self._bar.appendChild(self.toolbarBody);

		if (self.awArticle.isList) {
			self._createArrayBoxes();
		} else {
			if (self.targetPage.isDashBoard) {
				self._createDashboardBoxes();
			} else {
				self._createPageBoxes();
			}

		}
		self.toolbarSlot.appendChild(self._bar);
		self.ensureState();
		authorPage.selectItem(self.awArticle, true);
		self.toggleContext(true);
		self._bindEvents(true);
	},
	onMenuClick: function(menuItem) {
		var authorPage = document.site.authorPage;
		switch (menuItem.$item.$bind) {
			case "$addMenus":
				var newChild = drawHelper.addNewItem(this.awArticle, this.awItem, "block", null, undefined, undefined, "menus");
				authorPage.endTargetPageUpdate(newChild, true);
				return false;
			case "$addSection":
			case "$addBlock":
				var newChild = drawHelper.addNewItem(this.awArticle, this.awItem, menuItem.$item.$bind.replace("$add", "").toLowerCase());
				authorPage.endTargetPageUpdate(newChild, true);
				return false;
			case "$excludeMe":
				authorPage.endTargetPageUpdate(drawHelper.excludeItem(authorPage.getPageContext(), this.awItem), true);
				break;
			case "$addRowBefore":
			case "$addRowAfter":
				var layout = this.awLayout ? this.awLayout : (this.awItem.layoutContent || this.awItem.layoutParent);
				var newChild = drawHelper.addSiblingToLayout(layout, menuItem.$item.$bind == "$addRowBefore" ? "top" : "bottom");
				authorPage.endTargetPageUpdate(newChild, true);
				break;
			case "$defaultLayout":
			case "pattern-headerTabs":
				authorPage.onChangeSep(menuItem);
				return false;
			default:
				if (menuItem.$item.$vignette) {
					var newChild = drawHelper.onAddNewVignette(this, this.awItem, menuItem.$item);
					authorPage.endTargetPageUpdate(newChild, true);
				} else {
					if (menuItem.$item.$fieldBind) {
						var newChild = drawHelper.onAddNewField(this, this.awItem, menuItem.$item);
						authorPage.endTargetPageUpdate(newChild, true);
					} else {
						if (menuItem.$item.$bind.indexOf("pattern") == 0) {
							authorPage.onChangeSep(menuItem);
						} else {
							if (menuItem.$item.$bind.indexOf("s-layout-type-") >= 0) {
								var layout = this.awLayout ? this.awLayout : this.awItem.layoutContent;
								if (this.awItem.$authoringLevel == "field") {
									layout = this.awItem.layoutParent.wrapIntack([this.awItem], this.awItem.layoutParent.getItemIndex(this.awItem, true));
									layout.removeSpaceBox(true);
								}
								var $widths = menuItem.$widths;
								layout = drawHelper.newConvert(layout, {
									$layoutType: $widths == "100" ? "stack" : "row",
									$widths: $widths
								});
								authorPage.endTargetPageUpdate(layout.$layout.$layoutType == "stack" ? this.awItem : layout, true);
							}
						}
					}
				}
				break;
		}
	},
	onWindowResize: function() {
		if (this.layoutSlot && this.getawScrollview()) {
			var height = $(this.getawScrollview()).height();
			if (height) {
				this.layoutSlot.style.height = height + "px";
				if (this.$$bar) {
					this._bar.style.height = height + "px";
					this.resizeBar.style.height = height + "px";
					this.openerPicker.style.top = ((height - this.openerPicker.clientHeight) / 2) + "px";
					this.toolbarBody.style.height = (height - this.toolbarBody.offsetTop) + "px";
					if (this.toolbarLayout && this.toolbarLayout.tabOpened) {
						var boxHeight = this.toolbarBody.clientHeight;
						this.toolbarLayout.tabOpened.$$item[0].style.height = boxHeight + "px";
						this.toolbarLayout.tabOpened._body.style.height = (this.toolbarLayout.tabOpened.$$item.height() - $(this.toolbarLayout.tabOpened.layoutParent._tabs).outerHeight(true)) + "px";
						if (this.toolbarLayout.tabOpened.toolBoxSlot) {
							this.toolbarLayout.tabOpened.toolBoxSlot.style.height = this.toolbarLayout.tabOpened.$$body.height() + "px";
						}
					}
				}
				this.resizeDialogPage();
			}
		}
	},
	resizeDialogPage: function() {
		if (this.targetPage.dialogWrapper) {
			var width = this.targetPage.dialogWrapper.$$dialogSlot.width();
			if (width) {
				this.getawScrollview().style.width = (width - (document.site.authorPage._widths.palette + this.toolbarSlot.offsetWidth)) + "px";
			}
		}
	},
	ensureSelectedItemTitle: function() {
		var title = this.awItem.getTitle(false);
		if (title == "" && this.awItem.$authoringLevel == "field") {
			title = this.getBindTitle(this.awItem.$item.$bind, this.awItem.$field);
		}
		this.selectedPanel.setDescription(title && title != "-" ? title : "");
		return title;
	},
	_setSelectedPanel: function() {
		var authorPage = document.site.authorPage;
		var paletteId = this.awItem.isMenuItem ? "menu" : this.awItem.$authoringLevel;
		if (this.selectedPanel) {
			this.selectedPanel.setState({
				$isHidden: true
			});
		}
		if (!this.panels[paletteId]) {
			var $item;
			switch (paletteId) {
				case "article":
					$item = {
						$category: "section",
						$skin: "s-aw-h1",
						$css: "s-aw-palette-article",
						$title: authorPage.localize.aw_page,
						$isHidden: true,
						$layout: {
							$items: [{
								$category: "section",
								$isTitleHidden: true,
								$skin: "s-aw-palette-item",
								$layout: {
									$layoutType: "stack",
									$items: [this._getRowSection(), this._getLayoutSection("article"), {
											$category: "section",
											$skin: "s-aw-h2",
											$css: "s-aw-palette-article",
											$bind: "$field",
											$isSectionFields: true,
											$isBoxCollapsable: true,
											$title: authorPage.localize.aw_sectionFields,
											$layout: {
												$layoutType: "stack",
												$items: [{
													$bind: "$fieldsIsTitleHidden",
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true
												}, {
													$bind: "$labelAlignment",
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true,
													$choiceLayout: "1"
												}]
											}
										},
										this._getModelsSection("article")
									]
								}
							}]
						}
					};
					break;
				case "section":
					$item = {
						$category: "section",
						$skin: "s-aw-h1",
						$css: "s-aw-palette-section",
						$title: authorPage.localize.aw_section,
						$isHidden: true,
						$layout: {
							$items: [{
								$category: "section",
								$isTitleHidden: true,
								$skin: "s-aw-palette-item",
								$layout: {
									$layoutType: "stack",
									$items: [{
											$bind: "$excludeMe",
											$category: "link",
											$skin: "s-aw-menus-link",
											$css: "s-aw-exclude-me"
										},
										this._getRowSection(), this._getAppearanceSection("section"), this._getLayoutSection("section"), {
											$category: "section",
											$skin: "s-aw-h2",
											$css: "s-aw-palette-section",
											$isBoxCollapsable: true,
											$isTitleSection: true,
											$title: authorPage.localize.aw_sectionAppearance,
											$layout: {
												$items: [{
													$bind: "$title",
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true
												}, {
													$bind: "$titleChoice",
													$skin: "s-aw-field",
													$isEditMode: true,
													$choiceLayout: "1"
												}, {
													$bind: "$titleLocalization",
													$skin: "s-aw-field",
													$isEditMode: true,
													$format: "$combo"
												}]
											}
										}, {
											$category: "section",
											$skin: "s-aw-h2",
											$css: "s-aw-palette-section",
											$isBoxCollapsable: true,
											$title: authorPage.localize.aw_sectionBehaviour,
											$layout: {
												$items: [{
													$bind: "$isBoxCollapsable",
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true
												}, {
													$bind: "$isMaximizable",
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true
												}]
											}
										}, {
											$category: "section",
											$skin: "s-aw-h2",
											$css: "s-aw-palette-section",
											$isBoxCollapsable: true,
											$bind: "$field",
											$isSectionFields: true,
											$title: authorPage.localize.aw_sectionFields,
											$layout: {
												$layoutType: "stack",
												$items: [{
													$bind: "$fieldsIsTitleHidden",
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true
												}, {
													$bind: "$labelAlignment",
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true,
													$choiceLayout: "1"
												}]
											}
										}
									]
								}
							}]
						}
					};
					break;
				case "block":
					$item = {
						$category: "section",
						$skin: "s-aw-h1",
						$css: "s-aw-palette-block",
						$title: authorPage.localize.aw_block,
						$isHidden: true,
						$layout: {
							$items: [{
								$category: "section",
								$isTitleHidden: true,
								$skin: "s-aw-palette-item",
								$layout: {
									$layoutType: "stack",
									$items: [{
											$bind: "$excludeMe",
											$category: "link",
											$skin: "s-aw-menus-link",
											$css: "s-aw-exclude-me"
										},
										this._getRowSection(), this._getAppearanceSection("block"), this._getLayoutSection("block"), {
											$category: "section",
											$skin: "s-aw-h2",
											$css: "s-aw-palette-block",
											$isBoxCollapsable: true,
											$isTitleSection: true,
											$title: authorPage.localize.aw_sectionAppearance,
											$layout: {
												$items: [{
													$bind: "$title",
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true
												}, {
													$bind: "$titleChoice",
													$skin: "s-aw-field",
													$isEditMode: true,
													$choiceLayout: "1"
												}, {
													$bind: "$titleLocalization",
													$skin: "s-aw-field",
													$isEditMode: true,
													$format: "$combo"
												}]
											}
										}, {
											$category: "section",
											$skin: "s-aw-h2",
											$css: "s-aw-palette-block",
											$isBoxCollapsable: true,
											$title: authorPage.localize.aw_sectionBehaviour,
											$layout: {
												$items: [{
													$bind: "$isBoxCollapsable",
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true
												}, {
													$bind: "$isMaximizable",
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true
												}]
											}
										}, {
											$category: "section",
											$skin: "s-aw-h2",
											$css: "s-aw-palette-block",
											$isBoxCollapsable: true,
											$bind: "$field",
											$isSectionFields: true,
											$title: authorPage.localize.aw_sectionFields,
											$layout: {
												$layoutType: "stack",
												$items: [{
													$bind: "$fieldsIsTitleHidden",
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true
												}, {
													$bind: "$labelAlignment",
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true,
													$choiceLayout: "1"
												}]
											}
										}
									]
								}
							}]
						}
					};
					break;
				case "field":
					$item = {
						$category: "section",
						$skin: "s-aw-h1",
						$css: "s-aw-palette-field",
						$title: authorPage.localize.aw_field,
						$isHidden: true,
						$layout: {
							$items: [{
								$category: "section",
								$isTitleHidden: true,
								$id: "s-aw-palette-field",
								$skin: "s-aw-palette-item",
								$layout: {
									$layoutType: "stack",
									$items: [{
											$bind: "$excludeMe",
											$category: "link",
											$skin: "s-aw-menus-link",
											$css: "s-aw-exclude-me"
										}, {
											$bind: "$isAdvanced",
											$skin: "s-aw-field",
											$isEditMode: true,
											$isLeftSpaceHidden: true
										},
										this._getRowSection(), this._getLayoutSection("field"), {
											$category: "section",
											$css: "s-aw-palette-field",
											$skin: "s-aw-h2",
											$isLabelSection: true,
											$isBoxCollapsable: true,
											$title: authorPage.localize.aw_sectionFieldLabel,
											$layout: {
												$layoutType: "stack",
												$items: [{
													$bind: "$isTitleHidden",
													$title: authorPage.localize.aw_isLabelHidden,
													$skin: "s-aw-field",
													$isEditMode: true,
													$isLeftSpaceHidden: true
												}, {
													$bind: "$labelAlignment",
													$title: authorPage.localize.aw_sectionFieldLabelPosition,
													$skin: "s-aw-field",
													$isEditMode: true,
													$choiceLayout: "1"
												}]
											}
										}, {
											$category: "section",
											$title: authorPage.localize.aw_sectionFieldWidget,
											$isBoxCollapsable: true,
											$css: "s-aw-palette-field",
											$skin: "s-aw-h2",
											$isHidden: true,
											$isFieldAddinSection: true,
											$layout: {
												$items: []
											}
										}
									]
								}
							}]
						}
					};
					break;
				case "menu":
					$item = {
						$category: "section",
						$skin: "s-aw-h1",
						$css: "s-aw-palette-field",
						$title: authorPage.localize.aw_menuItem,
						$isHidden: true,
						$layout: {
							$items: [{
								$category: "section",
								$isTitleHidden: true,
								$skin: "s-aw-palette-item",
								$layout: {
									$layoutType: "stack",
									$items: [{
											$bind: "$excludeMe",
											$category: "link",
											$skin: "s-aw-menus-link",
											$css: "s-aw-exclude-me"
										},
										this._getRowSection(), this._getLayoutSection("field")
									]
								}
							}]
						}
					};
					break;
			}
			this.panels[paletteId] = this.layoutContent.loadChildItem(null, $item);
		}
		this.panels[paletteId].setTitle(this.awItem.isMenuGroup ? authorPage.localize.aw_menus : authorPage.localize["aw_" + paletteId]);
		this.selectedPanel = this.panels[paletteId];
	},
	showSettingPanel: function() {
		this._setSelectedPanel();
		var hideStructure;
		this.applyChange({
			$isAdvanced: false,
			$isHidden: false,
			$title: "",
			$isMaximizable: false,
			$isBoxCollapsable: false,
			$isTitleHidden: false,
			$fieldsIsTitleHidden: false,
			$labelAlignment: this.targetPage.$isEditMode ? "t" : "ll"
		});
		var $labelAlignment;
		if (this.awItem.$item.$isTopLabelAlignment || this.awItem.$item.$fieldsIsTopLabelAlignment) {
			$labelAlignment = "t";
		} else {
			if (this.awItem.$item.$isRightTextLabelAlignment || this.awItem.$item.$fieldsIsRightTextLabelAlignment) {
				$labelAlignment = "lr";
			} else {
				$labelAlignment = "ll";
			}
		}
		var $awItem = this.awItem.$item;
		var $awTitle = $awItem.$title;
		var $titleChoice = ($awItem.$isTitleHidden || $awTitle == null) ? 2 : (($awTitle == "-") ? 1 : 0);
		this.applyChange({
			$isAdvanced: $awItem.$isAdvanced,
			$title: this.dataset.$savedTitle = this.ensureSelectedItemTitle(),
			$titleLocalization: $awTitle,
			$titleChoice: $titleChoice,
			$isMaximizable: $awItem.$isMaximizable,
			$isBoxCollapsable: $awItem.$isBoxCollapsable,
			$isTitleHidden: $awItem.$isTitleHidden,
			$fieldsIsTitleHidden: $awItem.$fieldsIsTitleHidden,
			$labelAlignment: $labelAlignment,
			$boxTabChoice: (this.awItem.isTabLayout) ? "tabs" : "stack",
			$layoutTabChoice: ($awItem.$layout && $awItem.$layout.$layoutType == "tabs") ? "tabs" : "stack",
			$rowAlign: (this.awLayout ? this.awLayout.$layout.$rowAlign : "top")
		});

		this.selectedPanel.setState({
			$isHidden: false
		});
		if (this.boundFields.$titleChoice && this.boundFields.$titleLocalization) {
			this.applyChange({
				$properties: {
					$titleLocalization: {
						$isDisabled: ($titleChoice != 0)
					}
				}
			});
		}
		var sections = this.selectedPanel.layoutContent.items[0].layoutContent.items;
		var fieldAddinSection;
		if (this.awItem.$authoringLevel == "field") {
			if (this.awItem.$field) {
				if (this.awItem.$field.$type == "application/x-boolean") {
					var items = this.page.idMap["s-aw-palette-field"].layoutContent.items;
					for (var ii = 0; ii < jj; ii++) {
						if (items[ii].$item.$isLabelSection) {
							items[ii].setState({
								$isHidden: true
							});
							break;
						}
					}
				}
				fieldAddinSection = this.selectedPanel.fieldAddinSection || this._getFieldAddinSection(sections);
				var addinSlot = fieldAddinSection.layoutContent._item;
				if (addinSlot.firstChild) {
					$(addinSlot.firstChild).detach();
				}
				if (!this.awItem.awAddin) {
					this.awItem.awAddin = this.awItem.getAuthoringWidget ? this.awItem.getAuthoringWidget(this.awItem) : null;
					if (this.awItem.awAddin) {
						this.awItem.awAddin.loadBox($awItem);
					}
				}
				if (this.awItem.awAddin) {
					this.awItem.awAddin.showAddin(addinSlot);
				}
			}
			layout = this.awItem.layoutParent;
			if (layout && layout.$layout.$layoutType == "row") {
				hideStructure = true;
			}
		}
		var layout = this.awLayout || this.awItem.layoutContent;
		var count = 1;
		if (layout && layout.$item) {
			count = (layout.$item.$widths || "100").split(",").length;
		}
		var metadata = {
			$links: {}
		};
		for (var ii = 0; ii <= 5; ii++) {
			metadata.$links["s-layout-type-" + ii] = {
				$style: count == ii ? "selected" : null
			};
		}
		metadata.$properties = {
			$layoutTabChoice: {
				$isDisabled: (count != 1),
				$title: this.awItem.$authoringLevel == "article" ? document.site.authorPage.aw_showSectionsAs : document.site.authorPage.localize.aw_showBlocksAs
			}
		};
		metadata.$properties.$isTitleHidden = {
			$isHidden: this.awItem.isTabLayout == true
		};
		this.applyChange(metadata);

		var isHidden, section;
		if (sections[0].$bind == "$excludeMe") {
			sections[0].layoutSlot.style.textAlign = "center";
		}
		for (var ii = 0, jj = sections.length; ii < jj; ii++) {
			section = sections[ii];
			isHidden = this.awLayout == null ? false : true;
			if (section.$item.$isSectionFields) {
				isHidden = this.targetPage.isDashBoard || this.awItem.isMenuGroup == true;
			}
			if (section.$item.$isTitleSection) {
				var titleLocalization = section.layoutContent.items[2];
				var titleLocalizationChoice = section.layoutContent.items[1].builder.choicesItems[0];
				document.site.toggleClass(titleLocalization._domItem, "s-aw-title-localization", true);
				titleLocalizationChoice.appendChild(titleLocalization._domItem);
			}
			if (section.$item.$isLabelSection && this.awItem.unknowMode) {
				isHidden = true;
			}
			if (section == fieldAddinSection && !this.awItem.awAddin) {
				isHidden = true;
			}
			if (section.$item.$isRow) {
				isHidden = this.awLayout == null ? true : false;
			} else {
				if (hideStructure && section.$item.$isStructure) {
					isHidden = true;
				}
			}
			section.setState({
				$isHidden: isHidden
			});

		}
	},
	_getFieldAddinSection: function(sections) {
		for (var ii = 0, jj = sections.length; ii < jj; ii++) {
			if (sections[ii].$item.$isFieldAddinSection) {
				return sections[ii];
			}
		}
		return null;
	},
	setRowAlign: function(valign) {
		if (this.awLayout) {
			this.awLayout.$layout.$rowAlign = valign;
			for (var ii = 0, jj = this.awLayout.items.length; ii < jj; ii++) {
				this.awLayout.items[ii].layoutSlot.style.verticalAlign = valign;
			}
			document.site.authorPage.endTargetPageUpdate(this.awLayout, true);
		}
	},
	switchTabPanelBox: function($layoutType) {
		if (this.awItem.layoutParent.items.length == 1) {
			drawHelper.newConvert(this.awItem.layoutParent, {
				$layoutType: $layoutType
			});
		} else {
			var layoutRoot = this.awItem.layoutParent;
			if ($layoutType == "stack") {
				drawHelper.newConvert(layoutRoot, {
					$layoutType: "stack"
				});
				var children = layoutRoot.getItems();
				var layoutTab;
				for (var ii = 0, jj = children.length; ii < jj; ii++) {
					if (children[ii] == this.awItem) {
						layoutRoot.loadChildItems([children[ii]]);
						layoutTab = null;
					} else {
						if (!children[ii].isSpaceBox) {
							if (!layoutTab) {
								layoutTab = layoutRoot.loadChildItem(null, {
									$layoutType: "tabs"
								});
							}
							layoutTab.loadChildItems([children[ii]]);
						} else {
							// layoutRoot.removeItem(children[ii], true);
						}
					}
				}
			} else {
				var layoutTab = layoutRoot.wrapIntack([this.awItem], layoutRoot.getItemIndex(this.awItem.$item));
				drawHelper.newConvert(layoutTab, {
					$layoutType: "tabs"
				});
			}
		}
		document.site.authorPage.endTargetPageUpdate(this.awItem, true);
	},
	notifyDataChange: function(field, value) {
		var authorPage = document.site.authorPage;
		if (field.articleParent.designedField) {
			var metaData = {};
			metaData[field.$item.$bind] = value;
			field.articleParent.designedField.applyDesignMetaData(metaData, true);
			field.articleParent.applyChange(metaData);
			if (field.articleParent.onNotifyAuthoringChange) {
				field.articleParent.onNotifyAuthoringChange(field, value, metaData);
			}
			authorPage.notifyUpdate();
		} else {
			switch (field.$item.$bind) {
				case "$boxTabChoice":
					if (this.awItem.layoutParent.$layoutType != value) {
						this.switchTabPanelBox(value);
					}
					break;
				case "$rowAlign":
					this.setRowAlign(value);
					break;
				case "$layoutTabChoice":
					drawHelper.switchTabPanelChildren(this, value);
					break;
				case "$labelAlignment":
					var metaData = {};
					if (this.awItem.$authoringLevel == "field") {
						metaData.$isTopLabelAlignment = (value == "t");
						if (!metaData.$isTopLabelAlignment) {
							metaData.$isRightTextLabelAlignment = (value == "lr");
						}
						this.awItem.applyDesignMetaData(metaData, true);
					} else {
						if (metaData.$fieldsIsTopLabelAlignment = (value == "t")) {
							authorPage._notifyChildFields(this.awItem, true, "$isTopLabelAlignment");
						} else {
							authorPage._notifyChildFields(this.awItem, false, "$isTopLabelAlignment");
							authorPage._notifyChildFields(this.awItem, metaData.$fieldsIsRightTextLabelAlignment = (value == "lr"), "$isRightTextLabelAlignment");
						}
						authorPage._notifyChildBox(this.awItem, metaData);
					}
					authorPage.notifyUpdate();
					break;
				default:
					var metaData = {};
					var $bind = field.$item.$bind;
					if ($bind == "$titleChoice") {
						var isTitleLocalizationDisabled = true;
						switch (value) {
							case 0:
								$bind = "$title";
								metaData.$isTitleHidden = false;
								if (this.$prototype.$properties.$titleLocalization.$isHidden) {
									value = this.dataset.$savedTitle;
								} else {
									isTitleLocalizationDisabled = false;
									value = this.awItem.$item.$title;
									if (!value || value == "-") {
										value = this.$prototype.$properties.$titleLocalization.$value.$enum[0].$value;
									}
									this.applyChange({
										$titleLocalization: value
									});
								}
								break;
							case 1:
								$bind = "$title";
								value = "-";
								metaData.$isTitleHidden = false;
								break;
							case 2:
								$bind = "$isTitleHidden";
								value = true;
								break;
						}
						this.applyChange({
							$properties: {
								$titleLocalization: {
									$isDisabled: isTitleLocalizationDisabled
								}
							}
						});
					}
					if ($bind == "$titleLocalization") {
						$bind = "$title";
					}
					metaData[$bind] = value;
					if (this.awItem.$authoringLevel == "field") {
						this.awItem.applyDesignMetaData(metaData, true);
					} else {
						if ($bind.indexOf("$fields") == 0) {
							var fieldBind = $bind.slice("$fields".length);
							fieldBind = fieldBind.slice(0, 1).toLowerCase() + fieldBind.slice(1);
							authorPage._notifyChildFields(this.awItem, value, "$" + fieldBind);
						}
						this.awItem.applyDesignMetaData(metaData, true);
					}
					authorPage.notifyUpdate();
					this.applyChange(metaData);
					break;
			}
		}
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$isHidden !== undefined) {
				if (this.menuItems.$addBlock) {
					this.menuItems.$addBlock[0].setMenu({
						$isDisabled: newData.$isHidden
					});
				}
				if (this.menuItems.$addSection) {
					this.menuItems.$addSection[0].setMenu({
						$isDisabled: newData.$isHidden
					});
				}
				if (this.menuItems.$addMenus) {
					this.menuItems.$addMenus[0].setMenu({
						$isDisabled: newData.$isHidden
					});
				}
				var keys = ["$title", "$isMaximizable", "$isBoxCollapsable", "$isTitleHidden", "$fieldsIsTitleHidden", "$labelAlignment"];
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					newData.$properties[keys[ii]] = {
						$isDisabled: newData.$isHidden
					};
				}
			}
			if (newData.$title !== undefined) {
				this.onEndExcludeItem();
				this.ensureSelectedItemTitle();
			}
			if (newData.$fieldsIsTitleHidden !== undefined) {
				(newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$fieldsIsTitleHidden;
			}
			if (newData.$isTitleHidden !== undefined) {
				newData.$properties.$title = newData.$properties.$title || {};
				newData.$properties.$title.$isDisabled = newData.$isTitleHidden;
				if (this.awItem.$authoringLevel == "field") {
					(newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$isTitleHidden;
				} else {
					newData.$properties.$title = newData.$properties.$isBoxCollapsable = newData.$properties.$isMaximizable = {
						$isDisabled: newData.$isTitleHidden
					};
				}
			}
		}
		RawPage.prototype.applyChange.call(this, newData);
	},
	_getRowSection: function(isField) {
		var authorPage = document.site.authorPage;
		var $items = [];
		for (var ii = 1; ii <= 6; ii++) {
			$items.push({
				$bind: "s-layout-type-" + ii
			});
		}
		return {
			$category: "section",
			$skin: "s-aw-h2",
			$css: "s-aw-palette-layout",
			$isBoxCollapsable: true,
			$title: authorPage.localize.aw_rowLayout,
			$isRow: true,
			$layout: {
				$items: [{
					$category: "menus",
					$title: authorPage.localize.aw_addrow,
					$skin: "s-aw-cols",
					$isHidden: true,
					$itemSkin: "s-aw-cols-link",
					$layout: {
						$layoutType: "stack",
						$items: [{
							$css: "s-aw-cols-add-before",
							$bind: "$addRowBefore"
						}, {
							$css: "s-aw-cols-add-after",
							$bind: "$addRowAfter"
						}]
					}
				}, {
					$category: "menus",
					$title: authorPage.localize.aw_columns,
					$skin: "s-aw-cols",
					"$itemSkin": "s-aw-cols-link",
					$layout: {
						$layoutType: "row",
						$autoSize: true,
						$items: $items
					}
				}, {
					$category: "field",
					$bind: "$rowAlign",
					$skin: "s-aw-field",
					$isEditMode: true
				}]
			}
		};
	},
	_getAppearanceSection: function($level) {
		return {
			$category: "section",
			$skin: "s-aw-h2",
			$css: "s-aw-palette-" + $level,
			$isBoxCollapsable: true,
			$isStructure: true,
			$title: document.site.authorPage.localize.aw_appearance,
			$layout: {
				$items: [{
					$category: "field",
					$css: "s-layout-tab-choice",
					$bind: "$boxTabChoice",
					$skin: "s-aw-field",
					$isEditMode: true,
					$format: "$button",
					$choiceLayout: "row",
					$icon: {
						$mode: "icon",
						$path: "authoring/s-layout-"
					}
				}]
			}
		};
	},
	_getLayoutSection: function($level) {
		var authorPage = document.site.authorPage;
		var $items = [];
		for (var ii = 1; ii <= 6; ii++) {
			$items.push({
				$bind: "s-layout-type-" + ii,
				$css: $level == "field" ? "" : "s-aw-row-box"
			});
		}
		var $layout = {
			$category: "section",
			$skin: "s-aw-h2",
			$css: "s-aw-palette-" + $level,
			$isBoxCollapsable: true,
			$isStructure: true,
			$title: authorPage.localize.aw_layout,
			$layout: {
				$items: [{
					$category: "menus",
					$title: authorPage.localize.aw_columns,
					$skin: "s-aw-cols",
					$itemSkin: "s-aw-cols-link",
					$layout: {
						$layoutType: "row",
						$autoSize: true,
						$items: $items
					}
				}, {
					$category: "field",
					$isHidden: !($level == "article" || $level == "section"),
					$css: "s-layout-tab-choice",
					$bind: "$layoutTabChoice",
					$skin: "s-aw-field",
					$isEditMode: true,
					$format: "$button",
					$choiceLayout: "row",
					$icon: {
						$mode: "icon",
						$path: "authoring/s-layout-"
					}
				}]
			}
		};
		return $layout;
	},
	_getModelsSection: function($level) {
		var authorPage = document.site.authorPage;
		this.applyChange({
			$links: {
				$defaultLayout: {
					$title: authorPage.localize.aw_defaultLayout
				},
				"pattern-headerTabs": {
					$title: authorPage.localize.aw_autoLayout
				},
				"pattern-1": {
					$title: authorPage.localize.aw_layoutComposite
				},
				"pattern-2": {
					$title: authorPage.localize.aw_layoutComposite
				},
				"pattern-3": {
					$title: authorPage.localize.aw_layoutComposite
				},
				"pattern-4": {
					$title: authorPage.localize.aw_layoutComposite
				}
			}
		});
		return {
			$category: "section",
			$skin: "s-aw-h2",
			$isBoxCollapsable: true,
			$css: "s-aw-palette-" + $level,
			$title: authorPage.localize.aw_models,
			$layout: {
				$items: [{
					$category: "menus",
					$itemIcon: {
						$mode: "icon",
						$path: "authoring/s-aw-"
					},
					$skin: "s-aw-menus",
					$itemSkin: "s-aw-menus-link",
					$layout: {
						$items: [{
							$layoutType: "row",
							$items: [{
								$icon: null,
								$bind: "pattern-headerTabs",
								$css: "s-aw-pattern"
							}, {
								$icon: null,
								$bind: "$defaultLayout",
								$css: "s-aw-pattern"
							}]

						}, {
							$layoutType: "row",
							$items: [{
								$bind: "pattern-1",
								$css: "s-aw-pattern"
							}, {
								$bind: "pattern-2",
								$css: "s-aw-pattern"
							}, {
								$bind: "pattern-3",
								$css: "s-aw-pattern"
							}, {
								$bind: "pattern-4",
								$css: "s-aw-pattern"
							}]
						}]
					}
				}]
			}
		};
	},
	onEndChangeStep: function() {
		var ids = Object.keys(this.$menus);
		for (var ii = 0, jj = ids.length; ii < jj; ii++) {
			var id = ids[ii];
			if (id.indexOf("$insertAction") >= 0) {
				delete this.menuItems[id];
				delete this.$menus[id];
			}
		}
		if (this.awArticle.isList) {
			this._insertMenusBox.layoutContent.removeItems();
			this._loadInsertLinks();
		} else {
			if (this.targetPage.isDashBoard) {
				this._insertFreeLinksBox.layoutContent.removeItems();
				this._insertFreeVignettesBox.layoutContent.removeItems();
				this.targetPage.warnAdministrationUpdates(false);
				this.loadAvailableLinks();
				this.loadAvailableVignettes();
				this.ensureOpenedTab();
			} else {
				this._insertMenusBox.layoutContent.removeItems();
				this.targetPage.warnAdministrationUpdates(false);
				this.loadAvailableFields();
			}
		}
		this.toggleArticleToolBox(true);

		if (this.columnsToolBarBox) {
			this.toggleColumnsToolBox(true);
		}
	},
	_createInsertLink: function($bind, $field) {
		var $action = {
			$title: $field.$title ? this.targetPage.getLocalizeText($field.$title) : ""
		};
		var bindTitle = this.getBindTitle($bind, $field);
		if ($action.$title == "") {
			$action.$description = $action.$title = bindTitle;
		} else {
			$action.$description = $action.$title + " (" + bindTitle + ")";
		}
		return $action;
	},
	_loadAvailableVignettes: function($vignetteBinds) {
		if ($vignetteBinds.length > 0) {
			var $actions = {};
			var $properties = this.getawPrototype().$properties;
			for (var ii = 0, jj = $vignetteBinds.length; ii < jj; ii++) {
				var $bind = $vignetteBinds[ii];
				if ($bind.charAt(0) != "$") {
					var $field = $properties[$bind];
					if ($field && $field.$type) {
						var actionId = "$insertAction" + $bind;
						$actions[actionId] = this._createInsertLink($bind, $field);
						var $item = {
							$category: "link",
							$skin: "s-aw-mn-field-link",
							$icon: {
								$mode: "iconText",
								$path: "authoring/s-aw-"
							},
							$bind: actionId
						};
						if ($field.$type == "application/x-vignette" && $field.$format == "$menu") {
							$item.$fieldCategory = "menus";
							$item.$vignette = $bind;
							$item.$css = "s-aw-add-block s-aw-add-item";
						} else {
							$item.$fieldCategory = "field";
							$item.$fieldBind = $bind;
							$item.$css = "s-aw-add-item";
							$item.$value = $field.$type.replace("application/x-", "").replace("/", "-");
						}
						this._insertFreeVignettesBox.layoutContent.createChildItem($item);
					}
				}
			}
			this.applyChange({
				$actions: $actions
			});
		}
	},
	loadAvailableVignettes: function() {
		this._loadAvailableVignettes(this.targetPage.$freeFieldBinds);
		this._loadAvailableVignettes(Object.keys(this.targetPage.garbageFields));
		this._setBoxTitle(this._insertFreeVignettesBox);
	},
	_loadAvailableLinks: function($availableLinks) {
		var $binds = Object.keys($availableLinks);
		if ($binds.length > 0) {
			var $actions = {};
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $field = $availableLinks[$bind];
				if ($field) { //important test for garbage link 
					var actionId = "$insertAction" + $bind;
					$actions[actionId] = this._createInsertLink($bind, $field);
					this._insertFreeLinksBox.layoutContent.createChildItem({
						$category: "link",
						$skin: "s-aw-mn-field-link",
						$bind: actionId,
						$fieldBind: $bind,
						$fieldCategory: "link",
						$css: "s-aw-add-item",
						$value: "menu"
					});
				}
			}
			this.applyChange({
				$actions: $actions
			});
		}
		this._setBoxTitle(this._insertFreeLinksBox);
	},
	loadAvailableLinks: function() {
		this._loadAvailableLinks(this.targetPage.freeLinks);
		this._loadAvailableLinks(this.targetPage.garbageLinks);
	},
	_setBoxTitle: function(menuBox) {
		var length = menuBox.layoutContent.items.length;
		menuBox.setTitle(length + " " + menuBox.$item.$title);
		menuBox.setState({
			$isHidden: length == 0
		});
	},
	_loadAvailableFields: function($fieldBinds) {
		if ($fieldBinds.length > 0) {
			var $actions = {};
			var $properties = this.getawPrototype().$properties;
			for (var ii = 0, jj = $fieldBinds.length; ii < jj; ii++) {
				var $bind = $fieldBinds[ii];
				if ($bind.charAt(0) != "$") {
					if (!(this.targetPage.$isFusionPage && $bind.charAt(0) == "b")) {
						var $field = $properties[$bind];
						if ($field && $field.$type && !$field.$isExcluded) {
							var actionId = "$insertAction" + $bind;
							$actions[actionId] = this._createInsertLink($bind, $field);
							var $item = {
								$category: "link",
								$skin: "s-aw-mn-field-link",
								$icon: {
									$mode: "iconText",
									$path: "authoring/s-aw-"
								},
								$bind: actionId,
								$fieldCategory: "field",
								$fieldBind: $bind,
								$css: "s-aw-add-item",
								$value: $field.$type.replace("application/x-", "").replace("/", "-")
							};
							this._insertMenusBox.layoutContent.createChildItem($item);
						}
					}
				}
			}
			this.applyChange({
				$actions: $actions
			});
		}
	},
	loadAvailableFields: function() {
		this._loadAvailableFields(this.targetPage.$freeFieldBinds);
		this._loadAvailableFields(Object.keys(this.targetPage.garbageFields));
		this._setBoxTitle(this._insertMenusBox);
	},
	_loadInsertLinks: function() {
		var authorPage = document.site.authorPage;
		var $properties = this.getawPrototype().$properties;
		var binds = Object.keys($properties);
		if (binds.length > 0) {
			var $actions = {};
			for (var ii = 0, jj = binds.length; ii < jj; ii++) {
				var bind = binds[ii];
				if (bind.charAt(0) != "$") {
					var $field = $properties[bind];
					if ($field && $field.$type && !$field.$isExcluded) {
						var actionId = "$insertAction" + bind;
						$actions[actionId] = this._createInsertLink(bind, $field);
						this._insertMenusBox.layoutContent.createChildItem({
							$category: "link",
							$skin: "s-aw-mn-field-link",
							$bind: actionId,
							$fieldCategory: "field",
							$fieldBind: bind,
							$css: "s-aw-add-item",
							$value: $field.$type.replace("application/x-", "").replace("/", "-")
						});
					}
				}
			}
			var $item = this.awArticle.$item;
			var $fields = authorPage.getItemSettings($item.$layout);
			for (var ii = 0, jj = $fields.length; ii < jj; ii++) {
				if ($fields[ii].$bind) {
					var $action = $actions["$insertAction" + $fields[ii].$bind];
					if ($action) {
						$action.$isHidden = true;
					}
				}
			}
			if ($item.$cards) {
				var $fields = authorPage.getItemSettings($item.$cards.$layout);
				for (var ii = 0, jj = $fields.length; ii < jj; ii++) {
					if ($fields[ii].$bind) {
						var $action = $actions["$insertAction" + $fields[ii].$bind];
						if ($action) {
							$action.$isHidden = true;
						}
					}
				}
			}
			this.applyChange({
				$actions: $actions
			});
		}
	},
	onEndExcludeItem: function() {
		if (!this.awArticle.isList && this.targetPage.isDashBoard) {
			this.ensureOpenedTab();
		}
		this.toggleArticleToolBox(true);
	},
	ensureOpenedTab: function() {
		var layoutTabs = this._insertFreeLinksBox.layoutParent;
		if (!layoutTabs.tabOpened || (layoutTabs.tabOpened && layoutTabs.tabOpened.$isHidden)) {
			if (!this._insertFreeLinksBox.$isHidden) {
				this._insertFreeLinksBox.openBox(true);
			} else {
				if (!this._insertFreeVignettesBox.$isHidden) {
					this._insertFreeVignettesBox.openBox(true);
				}
			}
		}
	},
	onExcludeField: function($bind, isExcluded) {
		if ($bind) {
			if (this.awArticle.isList) {
				var $actions = {};
				$actions[$bind] = {
					$isHidden: isExcluded
				};
				this.applyChange({
					$actions: $actions
				});
			} else {
				if (this.targetPage.isDashBoard) {
					var actionId = "$insertAction" + $bind;
					if (isExcluded) {
						if (!this.menuItems[actionId]) {
							var $actions = {};
							var menuBox, $item;
							var $field = this.targetPage.$menus[$bind];
							if ($field) {
								menuBox = this._insertFreeLinksBox;
								$item = {
									$category: "link",
									$skin: "s-aw-mn-field-link",
									$bind: actionId,
									$fieldBind: $bind,
									$fieldCategory: "link",
									$css: "s-aw-add-item",
									$value: "menu"
								};
								this.targetPage.onAuthoringExcludeField($bind, isExcluded, true);
							} else {
								$field = this.targetPage.$prototype.$properties[$bind];
								$item = {
									$category: "link",
									$skin: "s-aw-mn-field-link",
									$icon: {
										$mode: "iconText",
										$path: "authoring/s-aw-"
									},
									$bind: actionId
								};
								if ($field.$type == "application/x-vignette" && $field.$format == "$menu") {
									$item.$fieldCategory = "menus";
									$item.$vignette = $bind;
									$item.$css = "s-aw-add-block s-aw-add-item";
								} else {
									$item.$fieldCategory = "field";
									$item.$fieldBind = $bind;
									$item.$css = "s-aw-add-item";
									$item.$value = $field.$type.replace("application/x-", "").replace("/", "-");
								}
								menuBox = this._insertFreeVignettesBox;
								this.targetPage.onAuthoringExcludeField($bind, isExcluded, false);
							}
							menuBox.layoutContent.createChildItem($item);
							this._setBoxTitle(menuBox);
							$actions[actionId] = this._createInsertLink($bind, $field);
							this.applyChange({
								$actions: $actions
							});
						}
					} else {
						var menuBox, isVignette;
						if (this.menuItems[actionId]) {
							var menuItem = this.menuItems[actionId][0];
							if (menuItem.boxParent == this._insertFreeLinksBox) {
								isVignette = false;
								menuBox = this._insertFreeLinksBox;
							} else {
								isVignette = true;
								menuBox = this._insertFreeVignettesBox;
							}
							menuBox.layoutContent.removeItem(menuItem, true);
							delete this.menuItems[actionId];
							delete this.$menus[actionId];
						}
						if (!isVignette) {
							menuBox = this._insertFreeLinksBox;
							delete this.targetPage.freeLinks[$bind];
							this.targetPage.onAuthoringExcludeField($bind, isExcluded, true);
						} else {
							menuBox = this._insertFreeVignettesBox;
							if (this.targetPage.$freeFieldBinds.indexOf($bind) >= 0) {
								this.targetPage.$freeFieldBinds.splice(this.targetPage.$freeFieldBinds.indexOf($bind), 1);
								delete this.targetPage.registeredVignettes[$bind];
							}
							this.targetPage.onAuthoringExcludeField($bind, isExcluded, false);
						}
						this._setBoxTitle(menuBox);
					}
					this.ensureOpenedTab();
				} else {
					var actionId = "$insertAction" + $bind;
					if (isExcluded) {
						if (!this.menuItems[actionId]) {
							var $actions = {};
							var $field = this.targetPage.$prototype.$properties[$bind];
							this.targetPage.onAuthoringExcludeField($bind, isExcluded, false);
							this._insertMenusBox.layoutContent.createChildItem({
								$category: "link",
								$skin: "s-aw-mn-field-link",
								$icon: {
									$mode: "iconText",
									$path: "authoring/s-aw-"
								},
								$bind: actionId,
								$fieldCategory: "field",
								$fieldBind: $bind,
								$css: "s-aw-add-item",
								$value: $field.$type.replace("application/x-", "").replace("/", "-")
							});
							this._setBoxTitle(this._insertMenusBox);
							$actions[actionId] = this._createInsertLink($bind, $field);
							this.applyChange({
								$actions: $actions
							});
						}
					} else {
						if (this.menuItems[actionId]) {
							var menuItem = this.menuItems[actionId][0];
							this._insertMenusBox.layoutContent.removeItem(menuItem, true);
							delete this.menuItems[actionId];
							delete this.$menus[actionId];
						}
						if (this.targetPage.$freeFieldBinds.indexOf($bind) >= 0) {
							this.targetPage.$freeFieldBinds.splice(this.targetPage.$freeFieldBinds.indexOf($bind), 1);
						}
						this.targetPage.onAuthoringExcludeField($bind, isExcluded);
						this._setBoxTitle(this._insertMenusBox);
					}
				}

			}
		}
	},
	ensureArrayBoxVisibility: function(resize) {
		var hideColumns = false,
			hideCards = false;
		if (this.awArticle.$item.$format == "cards") {
			hideColumns = true;
		} else {
			if (this.awArticle.$item.$cards) {
				switch (this.awArticle.$item.$cards.$position || "inline") {
					case "popup":
						hideCards = true;
						break;
					default:
						break;
				}
			} else {
				hideCards = true;
			}
		}
		// hideCards = true;        
		this.columnsToolBarBox.$isHidden = hideColumns;
		if (this.columnsToolBarBox.$$item) {
			this.columnsToolBarBox.$$item[0].style.display = (hideColumns) ? "none" : "";
		}
		this.articleToolBarBox.$isHidden = hideCards;
		if (this.articleToolBarBox.$$item) {
			this.articleToolBarBox.$$item[0].style.display = (hideCards) ? "none" : "";
		}

		if (hideColumns && (this.toolbarLayout && this.toolbarLayout.tabOpened == this.columnsToolBarBox)) {
			this.articleToolBarBox.hideBox(true);
		}
		if (hideCards && (this.toolbarLayout && this.toolbarLayout.tabOpened == this.articleToolBarBox)) {
			this.columnsToolBarBox.hideBox(true);
		}
		if (resize !== false) {
			this.onWindowResize();
		}
	},
	_createArrayBoxes: function() {
		var authorPage = document.site.authorPage;
		var $toolbarLayout = {
			$layoutType: "tabs",
			$items: [{
				$category: "section",
				$skin: "s-aw-tlbr",
				$title: authorPage.localize.aw_listColumns,
				$layout: {
					$items: []
				}
			}, {
				$isContentLoaded: true,
				$category: "section",
				$skin: "s-aw-tlbr",
				$title: authorPage.localize.aw_listCard,
				$layout: {
					$items: []
				}
			}]
		};


		var insertMenusBoxIndex = 2;
		if (this.awArticle.chart && this.awArticle.chart.$authoringType == "cube$highCharts") {
			var $fieldCube = this.awArticle.$item.$cube || this.awArticle.$prototype.$cube;
			if ($fieldCube && $fieldCube.$measures) {
				var $items = [];
				var $itemCube = this.awArticle.$item.$cube || {};
				var $itemMeasures = $itemCube.$measures || {};
				var delta = {};
				var binds = Object.keys($fieldCube.$measures);
				for (var ii = 0, jj = binds.length; ii < jj; ii++) {
					var bind = binds[ii];
					var $measure = $fieldCube.$measures[bind];
					var $field = this.awArticle.chart.createChoices();
					$field.$title = $measure.$title ? this.targetPage.getLocalizeText($measure.$title) : "";
					var $toolBind = "$cube" + bind;
					this.$prototype.$properties[$toolBind] = $field;
					$items.push({
						$category: "field",
						$bind: $toolBind,
						$measure: bind,
						$icon: {
							$mode: "icon",
							$path: "graphics/s-graph-"
						},
						$choiceLayout: "3",
						$isEditMode: true,
						$skin: "s-aw-field"
					});
					delta[$toolBind] = ($itemMeasures[bind] ? $itemMeasures[bind].$style : null) || "area";
				}
				insertMenusBoxIndex++;
				$toolbarLayout.$items.push({
					$category: "section",
					$skin: "s-aw-tlbr",
					$isContentLoaded: true,
					$title: authorPage.localize.aw_graph,
					$layout: {
						$items: $items
					}
				});
				this.applyChange(delta);
			}
		}
		$toolbarLayout.$items.push({
			$category: "section",
			$skin: "s-aw-tlbr",
			$isContentLoaded: true,
			$title: authorPage.localize.aw_insert,
			$layout: {
				$items: [{
					$category: "link",
					$skin: "s-aw-menus-link",
					$css: "s-aw-add-section s-aw-add-item",
					$bind: "$addSection",
					$value: "add-section",
					$icon: {
						$mode: "iconText",
						$path: "authoring/s-aw-"
					}
				}, {
					$category: "link",
					$skin: "s-aw-menus-link",
					$css: "s-aw-add-block s-aw-add-item",
					$bind: "$addBlock",
					$value: "add-block",
					$icon: {
						$mode: "iconText",
						$path: "authoring/s-aw-"
					}
				}, {
					$category: "menus",
					$itemSkin: "s-aw-mn-field-link",
					$titleIcon: {
						$value: "template",
						$path: "authoring/s-aw-"
					},
					$itemIcon: {
						$mode: "iconText",
						$path: "authoring/s-aw-"
					},
					$layout: {
						$items: []
					}
				}]
			}
		});
		this.toolbarLayout = this.loadNewItem(this.toolbarBody, $toolbarLayout);
		this.columnsToolBarBox = this.toolbarLayout.items[0];
		this.columnsToolBarBox.toolBoxSlot = document.createElement("div");
		this.columnsToolBarBox.toolBoxSlot.className = "s-aw-list-columns";
		this.columnsToolBarBox.layoutContent._item.appendChild(this.columnsToolBarBox.toolBoxSlot);
		this._createArticleToolBox(this.toolbarLayout.items[1]);
		this._insertMenusBox = this.toolbarLayout.items[insertMenusBoxIndex].layoutContent.items[2];
		this._loadInsertLinks();
		if (this.columnsToolBarBox) {
			this.toggleColumnsToolBox(true);
		}
		this.ensureArrayBoxVisibility();
	},
	toggleColumnsToolBox: function(show) {
		if (show) {
			if (this.awArticle) {
				this.gridTree = new GridTree();
				this.gridTree.load(this, this.awArticle, this.columnsToolBarBox.toolBoxSlot);
			}
		} else {
			if (this.gridTree) {
				this.gridTree.unload();
				this.gridTree = null;
			}
		}
	},
	toggleArticleToolBox: function(show) {
		if (show) {
			if (this.awArticle) {
				this.articleTree = new ArticleTree();
				this.articleTree.load(this, this.awArticle, this.articleToolBarBox.toolBoxSlot);
			}
		} else {
			if (this.articleTree) {
				this.articleTree.unload();
				this.articleTree = null;
			}
		}
	},
	_createArticleToolBox: function(box) {
		this.articleToolBarBox = box;
		box.toolBoxSlot = document.createElement("div");
		box.toolBoxSlot.className = "s-aw-content-tree";
		box.layoutContent._item.appendChild(box.toolBoxSlot);
	},
	getBindTitle: function($bind, $field) {
		var $X3Name = $field ? $field.$X3Name : null;
		return $X3Name || $bind;
	},
	_createPageBoxes: function() {
		var authorPage = document.site.authorPage;
		this.targetPage.warnAdministrationUpdates(false);
		this.toolbarLayout = this.loadNewItem(this.toolbarBody, {
			$layoutType: "tabs",
			$items: [{
				$isContentLoaded: true,
				$category: "section",
				$skin: "s-aw-tlbr",
				$title: authorPage.localize.aw_viewTypeContent,
				$layout: {
					$items: []
				}
			}, {
				$isContentLoaded: true,
				$category: "section",
				$skin: "s-aw-tlbr",
				$title: authorPage.localize.aw_insert,
				$layout: {
					$items: [{
						$category: "link",
						$skin: "s-aw-menus-link",
						$css: "s-aw-add-section s-aw-add-item",
						$bind: "$addSection",
						$value: "add-section",
						$icon: {
							$mode: "iconText",
							$path: "authoring/s-aw-"
						}
					}, {
						$category: "link",
						$skin: "s-aw-menus-link",
						$css: "s-aw-add-block s-aw-add-item",
						$bind: "$addBlock",
						$value: "add-block",
						$icon: {
							$mode: "iconText",
							$path: "authoring/s-aw-"
						}
					}, {
						$category: "menus",
						$title: authorPage.localize.aw_insertFields,
						$itemSkin: "s-aw-mn-field-link",
						$titleIcon: {
							$value: "template",
							$path: "authoring/s-aw-"
						},
						$itemIcon: {
							$mode: "iconText",
							$path: "authoring/s-aw-"
						},
						$layout: {
							$items: []
						}
					}]
				}
			}]
		});
		this._createArticleToolBox(this.toolbarLayout.items[0]);
		this._insertMenusBox = this.toolbarLayout.items[1].layoutContent.items[2];
		this.loadAvailableFields();
	},
	_createDashboardBoxes: function() {
		this.targetPage.warnAdministrationUpdates(false);
		this.toolbarLayout = this.loadNewItem(this.toolbarBody, {
			$layoutType: "tabs",
			$items: [{
				$isContentLoaded: true,
				$category: "section",
				$skin: "s-aw-tlbr",
				$title: document.site.authorPage.localize.aw_viewTypeContent,
				$layout: {
					$items: []
				}
			}, {
				$isContentLoaded: true,
				$category: "section",
				$skin: "s-aw-tlbr",
				$title: document.site.authorPage.localize.aw_insert,
				$layout: {
					$items: [{
						$category: "link",
						$skin: "s-aw-menus-link",
						$css: "s-aw-add-section s-aw-add-item",
						$bind: "$addSection",
						$value: "add-section",
						$icon: {
							$mode: "iconText",
							$path: "authoring/s-aw-"
						}
					}, {
						$category: "link",
						$skin: "s-aw-menus-link",
						$css: "s-aw-add-block s-aw-add-item",
						$bind: "$addMenus",
						$value: "add-menu-group",
						$icon: {
							$mode: "iconText",
							$path: "authoring/s-aw-"
						}
					}, {
						$layoutType: "tabs",
						$items: [{
							$isContentLoaded: true,
							$category: "section",
							$skin: "s-aw-tb-fields",
							$title: document.site.authorPage.localize.aw_insertLinks,
							$layout: {
								$items: []
							}
						}, {
							$isContentLoaded: true,
							$category: "section",
							$skin: "s-aw-tb-fields",
							$title: document.site.authorPage.localize.aw_insertVignettes,
							$layout: {
								$items: []
							}
						}]
					}]
				}
			}]

		});
		this._createArticleToolBox(this.toolbarLayout.items[0]);
		var insertTabs = this.toolbarLayout.items[1].layoutContent.items[2];
		this._insertFreeLinksBox = insertTabs.items[0];
		this._insertFreeVignettesBox = insertTabs.items[1];
		this.loadAvailableLinks();
		this.loadAvailableVignettes();
		this.ensureOpenedTab();
	},
	createBox: function($item) {
		var box = {
			boxParent: this,
			$item: $item
		};

		var boxItem = document.createElement("section");
		boxItem.className = "s-aw-toolbar-box";
		boxItem.setAttribute("data-s-box", $item.$id);
		box.$$item = $(boxItem);

		var title = document.createElement("a");
		title.setAttribute("data-s-picker", "s-bar-title");
		title.className = "s-aw-toolbar-box-title";
		title.textContent = $item.$title || "";

		var dom = document.createElement("div");
		dom.className = "s-aw-toolbar-box-body";
		box.$$body = $(dom);

		dom = document.createElement("header");
		dom.className = "s-aw-toolbar-box-header";
		dom.appendChild(title);
		box.$$header = $(dom);

		box.$$item.append(box.$$header).append(box.$$body);
		this.toolbarBody.appendChild(boxItem);

		box.$item.$isTitleHidden = true;
		box.$$body[0].style.display = "none";
		box.$$header.toggleClass("s-open", false);
		box.$$item.toggleClass("s-open", false);
		box.content = this.loadNewItem(box.$$body.empty()[0], box.$item);
		return box;
	},
	ensureState: function() {
		if (this.preferences.isCollapsed) {
			this.openedWidth = this.$$toolbarSlot.outerWidth();
			this.toolbarSlot.style.width = "10px";
			this.toolbarBody.style.display = "none";
			this.resizeBar.className = "s-aw-toolbar-resizer s-close";
			this.openerPicker.className = "s-aw-toolbar-opener s-close";
			if (!this.preferences.isDocked) {
				this._bar.style.width = "10px";
			}
		} else {
			this.resizeBar.className = "s-aw-toolbar-resizer";
			this.openerPicker.className = "s-aw-toolbar-opener";
			this.resizeBar.style.width = "";
			if (this.preferences.isDocked) {
				this.toolbarSlot.style.width = (this.openedWidth || 200) + "px";
				this._bar.style.position = "";
				this._bar.style.width = "";
			} else {
				this.toolbarSlot.style.width = "10px";
				document.site.setZIndex(this._bar);
				this._bar.style.position = "absolute";
				this._bar.style.width = "200px";
				this._bar.style.top = "0px";
				this._bar.style.left = "0px";
			}
			this.toolbarBody.style.display = "";
		}
	},

	onClickPicker: function(btn, event) {
		switch (btn.getAttribute("data-s-picker")) {
			case "s-bar-dockMode":
				this.preferences.isDocked = !this.preferences.isDocked;
				break;
			case "s-bar-collapse":
				this._resizer.isEnabled = !(this.preferences.isCollapsed = !this.preferences.isCollapsed);
				break;
			default:
				return true;
		}
		this.ensureState();
		this.onWindowResize();
		this.resizeDialogPage();
	},
	onNotifyDataChange: function(field, value) {
		if (this.awArticle.isList && field.$item.$measure) {
			var $cube = this.awArticle.$item.$cube || {};
			$cube.$measures = $cube.$measures || {};
			($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {}).$style = value;
			this.awArticle.awAddin.applyFieldDesignMetaDataChange({
				$cube: $cube
			});
			var metaData = {};
			metaData[field.$item.$bind] = value;
			this.applyChange(metaData);
			document.site.authorPage.notifyUpdate();
			return false;
		}
		return true;
	},
	_bindEvents: function(bind) {
		var self = this;
		if (self.toolbarBody) {
			if (bind) {
				$(self.toolbarBody).delegate(".s-aw-list-cols-col,.s-aw-list-cols-col-title,.s-aw-list-cols-col-fixe,.s-aw-list-cols-col-delete", "click.authoringList", function(event) {
					self.gridTree.onNodeEvent(event);
					return false;
				}).delegate(".s-aw-content-tree", "mousedow.authoringTree click.authoringTree", function(event) {
					self.articleTree.onNodeEvent(event);
					return false;
				}).delegate(".s-aw-tree-item-opener-children", "click.authoringTree", function(event) {
					self.articleTree.onNodeEvent(event);
					return false;
				}).delegate(".s-aw-tree-item-title", "mouseenter.authoringTree mouseleave.authoringTree click.authoringTree", function(event) {
					self.articleTree.onNodeEvent(event);
					return false;
				});
			} else {
				$(self.toolbarBody).undelegate();
			}
		}
	},
	dispose: function(onAuthorPageDispose) {
		if (!onAuthorPageDispose) {
			document.site.authorPage.onContextDisposed(this);
		}
		this._bindEvents(false);
		this._insertFreeVignettesBox = this._insertFreeLinksBox = null;
		this.columnsToolBox = this.columnsToolBarBox = null;
		if (this._resizer) {
			this._resizer.dispose();
			this._resizer = null;
		}
		if (this.toolbarSlot) {
			document.site.removeDomChild(this.toolbarSlot);
		}
		this.toggleColumnsToolBox(false);
		this.toggleArticleToolBox(false);

		this._insertMenusBox = null;
		this.$prototype = this.toolbarSlot = this.$$item = this.$$toolbarSlot = null;

		if (this.selectedPanel) {
			this.selectedPanel.fieldAddinSection = null;
		}
		if (this.layoutSlot) {
			document.site.removeDomChild(this.layoutSlot);
		}
		this.targetPage = this.$sourceItem = null;
		this.awItem = this.awLayout = null;

		this.toolbarBody = this.selectedPanel = this.diagnosePage = this.$item = this.externalAdapter = this.$prototype = this.layoutSlot = null;
		RawPage.prototype.dispose.call(this);
	}
});