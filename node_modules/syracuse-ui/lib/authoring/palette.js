"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var drawHelper = require("syracuse-ui/lib/authoring/drawHelper");
var Toolbar = require("syracuse-ui/lib/authoring/toolbar").Toolbar;
var modelFactory = require("syracuse-ui/lib/authoring/modelFactory");
var paletteSectionProvider = require("syracuse-ui/lib/authoring/paletteSectionProvider");

function Palette() {}

exports.Palette = helpers.defineClass(Palette, RawPage, {
	toggleContext: function(show) {
		var display = show ? "" : "none";
		this.layoutSlot.style.display = display;
		if (this.toolbarSlot) {
			this.toolbarSlot.style.display = display;
		}
	},
	getawPrototype: function() {
		return this.awArticle.$prototype.$item ? this.awArticle.$prototype.$item : this.awArticle.$prototype;
	},
	getawScrollview: function() {
		return this.awArticle.scrollview || this.targetPage.scrollview;
	},
	_loadDefinedTitles: function(section, $titles) {
		$titles = $titles || {};
		if (section.$item.$title) {
			$titles[section.$item.$title] = section.id;
		}
		if (section.childrenSection) {
			for (var ii = 0, jj = section.childrenSection.length; ii < jj; ii++) {
				var child = section.childrenSection[ii];
				if (child.isSection && !child.isMenuGroup) {
					this._loadDefinedTitles(section.childrenSection[ii], $titles);
				}
			}
		}
		return $titles;
	},
	filterConvergenceTitle: function($awTitle) {
		var $enum = [];
		var $localization = this.getawPrototype().$localization;
		var $keys = Object.keys($localization);
		var $definedTitles = this._loadDefinedTitles(this.awArticle);
		for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
			var $key = "{" + $keys[ii] + "}";
			if (($key[2] == "B" || $key[2] == "S") && ($keys == $awTitle || !$definedTitles[$key])) {
				$enum.push({
					$value: $key,
					$title: $localization[$keys[ii]]
				});
			}
		}
		return $enum;
	},
	loadTitlesChoices: function() {
		var authorPage = document.site.authorPage;
		var $enum = [];
		var $localization = this.getawPrototype().$localization;
		if ($localization) {
			if (authorPage.targetPage.$isFusionPage) {
				$enum = this.filterConvergenceTitle();
			} else {
				var $keys = Object.keys($localization);
				for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
					$enum.push({
						$value: "{" + $keys[ii] + "}",
						$title: $localization[$keys[ii]]
					});
				}
			}
		}
		this.$prototype.$properties.$titleLocalization.$value.$enum = $enum;
		if ($enum.length) {
			this.$prototype.$properties.$titleChoice.$value.$enum.unshift({
				$value: 0,
				$title: authorPage.localize.aw_titleLocalization
			});
		} else {
			this.$prototype.$properties.$titleChoice.$value.$enum.unshift({
				$value: 0,
				$title: authorPage.localize.aw_titleVisible
			});
			this.$prototype.$properties.$titleLocalization.$isHidden = true;
		}
	},
	loadBox: function(authorPage, awArticle) {
		var self = this;
		var authorPage = document.site.authorPage;
		self.isAuthoringEventEnabled = true;
		self._unregisterResizer = true;
		self.externalAdapter = document.site.externalAdapter;
		self.panels = {};
		self.$prototype = {
			$properties: {
				$titleChoice: {
					$type: "application/x-choice",
					$isTitleHidden: true,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: 1,
							$title: authorPage.localize.aw_titleBlank
						}, {
							$value: 2,
							$title: authorPage.localize.aw_titleHidden
						}]
					}
				},
				$titleLocalization: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-string",
						$enum: []
					}
				},
				$title: {
					$type: "application/x-string",
					$title: authorPage.localize.aw_boxTitle,
					$isHidden: true
				},
				$isMaximizable: {
					$type: "application/x-boolean",
					$title: authorPage.localize.aw_isMaximizable
				},
				$isBoxCollapsable: {
					$type: "application/x-boolean",
					$title: authorPage.localize.aw_isBoxCollapsable
				},
				$isTitleHidden: {
					$type: "application/x-boolean",
					$title: authorPage.localize.aw_isTitleHidden
				},
				$fieldsIsTitleHidden: {
					$type: "application/x-boolean",
					$title: authorPage.localize.aw_isLabelHidden
				},
				$isAdvanced: {
					$type: "application/x-boolean",
					$title: authorPage.localize.aw_isAdvanced
				},
				$labelAlignment: {
					$type: "application/x-choice",
					$title: authorPage.localize.aw_labelPosition,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "t",
							$title: authorPage.localize.aw_labelPositionTop
						}, {
							$value: "ll",
							$title: authorPage.localize.aw_labelPositionLeftLeft
						}, {
							$value: "lr",
							$title: authorPage.localize.aw_labelPositionLeftRight
						}]
					}
				},
				$rowAlign: {
					$type: "application/x-choice",
					$title: authorPage.localize.aw_rowAlign,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "top",
							$title: authorPage.localize.aw_rowAlignTop
						}, {
							$value: "bottom",
							$title: authorPage.localize.aw_rowAlignBottom
						}]
					}
				}
			},
			$links: {
				$excludeMe: {
					$title: authorPage.localize.aw_excludeMe
				}
			}
		};
		self.$item = {
			$skin: "s-aw-palette-item",
			$isTitleHidden: true,
			$layout: {
				$items: []
			}
		};
		self.$autoFetch = false;
		var keys = Object.keys(authorPage.localize);
		self.$prototype.$localization = {};
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			self.$prototype.$localization[keys[ii].replace("aw_", "@")] = authorPage.localize[keys[ii]];
		}
		self.loadTitlesChoices();
		self.localize = document.site.localize;
		self._initializePage();
		self.layoutSlot = document.createElement("div");
		authorPage.paletteSlot.appendChild(self.layoutSlot).className = "s-aw-palette-body";

		RawPage.prototype.loadBox.call(self);

		self.preferences = {
			isDocked: true,
			isCollapsed: self.targetPage.dialogWrapper != null
		};
		self.$$toolbarSlot = $(self.toolbarSlot = document.createElement("div"));
		self.toolbarSlot.className = "s-aw-toolbar-slot";
		self.toolbarSlot.setAttribute("data-s-article", self.id);
		self.targetPage._item.insertBefore(self.toolbarSlot, self.targetPage._item.firstChild);

		document.site.emptyDom(self.toolbarSlot);
		self._bar = document.createElement("div");
		self._bar.className = "s-aw-toolbar";
		self.$$bar = $(self._bar);

		self.resizeBar = document.createElement("a");
		self.resizeBar.className = "s-aw-toolbar-resizer";
		self.openerPicker = document.createElement("a");
		self.openerPicker.className = "s-aw-toolbar-opener";
		self.openerPicker.setAttribute("data-s-picker", "s-bar-collapse");
		self.resizeBar.appendChild(self.openerPicker);
		self._bar.appendChild(self.resizeBar);
		self._resizer = document.site.setResizable({
			source: self,
			slot: self.toolbarSlot,
			dragSpot: null,
			direction: {
				right: true
			},
			minWidth: 200,
			resizerSpot: self.resizeBar,
			onResize: function(resizer, moving) {
				if (!moving) {
					document.site.toggleClass(self.resizeBar, "s-resizing", document.site.resizing);
					document.site.toggleClass(self.openerPicker, "s-resizing", document.site.resizing);
				}
			}
		});
		self._resizer.isEnabled = !self.preferences.isCollapsed;

		self.toolbar = new Toolbar();
		self.toolbar.toolbarBody = document.createElement("div");
		self.toolbar.toolbarBody.className = "s-aw-toolbar-body";
		self._$$body = $(self.toolbar.toolbarBody);
		self._bar.appendChild(self.toolbar.toolbarBody);
		self.toolbar.load(this);

		self.toolbarSlot.appendChild(self._bar);
		self.ensureState();
		authorPage.selectItem(self.awArticle, true);
		self.toggleContext(true);

	},
	excludeItem: function(removedItem) {
		var layoutParent = removedItem.layoutParent;
		var excludedFields;
		if (removedItem.$item && removedItem.$item.$vignette) {
			this.onExcludeField(removedItem.$item.$vignette, true, true);
		} else {
			if (this.targetPage.isDashBoard && removedItem.layoutContent) {
				var children = removedItem.layoutContent.getItems();
				for (var ii = 0, jj = children.length; ii < jj; ii++) {
					if (children[ii].$item && children[ii].$item.$vignette) {
						this.onExcludeField(children[ii].$item.$vignette, true, true);
					}
				}
			}
		}
		if (removedItem.$authoringLevel == "field") {
			excludedFields = [removedItem];
		} else {
			excludedFields = removedItem.layoutContent.getItems("field");
		}
		if (excludedFields) {
			for (var ii = 0, jj = excludedFields.length; ii < jj; ii++) {
				this.onExcludeField(excludedFields[ii].$item.$bind, true);
			}
		}
		var index = layoutParent.getItemIndex(removedItem, true);
		layoutParent.removeItem(removedItem, true);
		var newItem = layoutParent.items[index];
		if (!newItem) {
			newItem = layoutParent.items[--index];
		}
		newItem = newItem || layoutParent.boxParent;
		switch (layoutParent.$layout.$layoutType) {
			case "row":
				layoutParent.addSpaceBox(index);
				break;
			case "tabs":
				if (layoutParent.items.length == 0) {
					layoutParent.convertToNewLayout({
						$layoutType: "stack",
						$width: "100"
					});
				}
				break;
		}
		this.toolbar.toggleArticleToolBox(true);
		return newItem;
	},
	onMenuClick: function(menuItem) {
		var authorPage = document.site.authorPage;
		switch (menuItem.$item.$bind) {
			case "$excludeMe":
				authorPage.endTargetPageUpdate(this.excludeItem(this.awItem), true);
				break;

			default:
				if (menuItem.$item.$vignette) {
					var newChild = drawHelper.onAddNewVignette(this, this.awItem, menuItem.$item);
					authorPage.endTargetPageUpdate(newChild, true);
				} else {
					if (menuItem.$item.$fieldBind) {
						var newChild = drawHelper.onAddNewField(this, this.awItem, menuItem.$item);
						authorPage.endTargetPageUpdate(newChild, true);
					}
				}
				break;
		}
	},
	onWindowResize: function() {
		if (this.layoutSlot && this.getawScrollview()) {
			var height = $(this.getawScrollview()).height();
			if (height) {
				this.layoutSlot.style.height = height + "px";
				if (this.$$bar) {
					this._bar.style.height = height + "px";
					this.resizeBar.style.height = height + "px";
					this.openerPicker.style.top = ((height - this.openerPicker.clientHeight) / 2) + "px";
					this.toolbar.onWindowResize(this._bar.clientHeight);
				}
				this.resizeDialogPage();
			}
		}
	},
	resizeDialogPage: function() {
		if (this.targetPage.dialogWrapper) {
			var width = this.targetPage.dialogWrapper.$$dialogSlot.width();
			if (width) {
				this.getawScrollview().style.width = (width - (document.site.authorPage._widths.palette + this.toolbarSlot.offsetWidth)) + "px";
			}
		}
	},
	ensureSelectedItemTitle: function() {
		var title = this.awItem.getTitle(false);
		if (title == "" && this.awItem.$authoringLevel == "field") {
			title = this.getBindTitle(this.awItem.$item.$bind, this.awItem.$field);
		}
		this.selectedPanel.setDescription(title && title != "-" ? title : "");
		return title;
	},
	showSettingPanel: function() {
		var localize = document.site.authorPage.localize;
		var hideStructure;
		var paletteId = this.awItem.isMenuItem ? "menu" : this.awItem.$authoringLevel;
		if (this.selectedPanel) {
			this.selectedPanel.setState({
				$isHidden: true
			});
		}
		if (!this.panels[paletteId]) {
			this.panels[paletteId] = this.layoutContent.loadChildItem(null, paletteSectionProvider[paletteId](localize));
		}
		(this.selectedPanel = this.panels[paletteId]).setTitle(this.awItem.isMenuGroup ? localize.aw_menus : localize["aw_" + paletteId]);
		this.applyChange({
			$isAdvanced: false,
			$isHidden: false,
			$title: "",
			$isMaximizable: false,
			$isBoxCollapsable: false,
			$isTitleHidden: false,
			$fieldsIsTitleHidden: false,
			$labelAlignment: this.targetPage.$isEditMode ? "t" : "ll"
		});
		var $labelAlignment;
		if (this.awItem.$item.$isTopLabelAlignment || this.awItem.$item.$fieldsIsTopLabelAlignment) {
			$labelAlignment = "t";
		} else {
			if (this.awItem.$item.$isRightTextLabelAlignment || this.awItem.$item.$fieldsIsRightTextLabelAlignment) {
				$labelAlignment = "lr";
			} else {
				$labelAlignment = "ll";
			}
		}
		var $awItem = this.awItem.$item;
		var $awTitle = $awItem.$title;
		var $titleChoice = ($awItem.$isTitleHidden || $awTitle == null) ? 2 : (($awTitle == "-") ? 1 : 0);
		this.applyChange({
			$isAdvanced: $awItem.$isAdvanced,
			$title: this.dataset.$savedTitle = this.ensureSelectedItemTitle(),
			$titleLocalization: $awTitle,
			$titleChoice: $titleChoice,
			$isMaximizable: $awItem.$isMaximizable,
			$isBoxCollapsable: $awItem.$isBoxCollapsable,
			$isTitleHidden: $awItem.$isTitleHidden,
			$fieldsIsTitleHidden: $awItem.$fieldsIsTitleHidden,
			$labelAlignment: $labelAlignment,
			$rowAlign: (this.awLayout ? this.awLayout.$layout.$rowAlign : "top")
		});

		this.selectedPanel.setState({
			$isHidden: false
		});
		if (this.boundFields.$titleChoice && this.boundFields.$titleLocalization) {
			var $titleLocalization = {
				$isDisabled: ($titleChoice != 0)
			};
			if (this.awItem.isSection && document.site.authorPage.targetPage.$isFusionPage && !$titleLocalization.$isDisabled) {
				$titleLocalization.$value = {
					$enum: this.filterConvergenceTitle($awTitle)
				};
			}
			this.applyChange({
				$properties: {
					$titleLocalization: $titleLocalization
				}
			});
		}
		var sections = this.selectedPanel.layoutContent.items[0].layoutContent.items;
		modelFactory.fillModelsSection(sections, this.awItem.$authoringLevel);

		var fieldAddinSection;
		if (this.awItem.$authoringLevel == "field") {
			if (this.awItem.$field) {
				if (this.awItem.$field.$type == "application/x-boolean") {
					var items = this.page.idMap["s-aw-palette-field"].layoutContent.items;
					for (var ii = 0; ii < jj; ii++) {
						if (items[ii].$item.$isLabelSection) {
							items[ii].setState({
								$isHidden: true
							});
							break;
						}
					}
				}
				fieldAddinSection = this.selectedPanel.fieldAddinSection;
				if (!fieldAddinSection) {
					for (var ii = 0, jj = sections.length; ii < jj; ii++) {
						if (sections[ii].$item.$isFieldAddinSection) {
							fieldAddinSection = sections[ii];
							break;
						}
					}
				}
				var addinSlot = fieldAddinSection.layoutContent._item;
				if (addinSlot.firstChild) {
					$(addinSlot.firstChild).detach();
				}
				if (!this.awItem.awAddin) {
					this.awItem.awAddin = this.awItem.getAuthoringWidget ? this.awItem.getAuthoringWidget(this.awItem) : null;
					if (this.awItem.awAddin) {
						this.awItem.awAddin.loadBox($awItem);
					}
				}
				if (this.awItem.awAddin) {
					this.awItem.awAddin.showAddin(addinSlot);
				}
			}
			layout = this.awItem.layoutParent;
			if (layout && layout.$layout.$layoutType == "row") {
				hideStructure = true;
			}
		}
		var layout = this.awLayout || this.awItem.layoutContent;
		this.selectedPanel.colCount = (layout && layout.$item) ? (layout.$item.$widths || "100").split(",").length : 1;

		this.applyChange({
			$properties: {
				$isTitleHidden: {
					$isHidden: this.awItem.isTabLayout == true
				}
			}
		});

		var isHidden, section;
		if (sections[0].$bind == "$excludeMe") {
			sections[0].layoutSlot.style.textAlign = "center";
		}
		for (var ii = 0, jj = sections.length; ii < jj; ii++) {
			section = sections[ii];
			isHidden = this.awLayout == null ? false : true;
			if (section.$item.$isSectionFields) {
				isHidden = this.targetPage.isDashBoard || this.awItem.isMenuGroup == true;
			}
			if (section.$item.$isTitleSection) {
				var titleLocalization = section.layoutContent.items[2];
				var titleLocalizationChoice = section.layoutContent.items[1].builder.choicesItems[0];
				document.site.toggleClass(titleLocalization._domItem, "s-aw-title-localization", true);
				titleLocalizationChoice.appendChild(titleLocalization._domItem);
			}
			if (section.$item.$isLabelSection && this.awItem.unknowMode) {
				isHidden = true;
			}
			if (section == fieldAddinSection && !this.awItem.awAddin) {
				isHidden = true;
			}
			if (section.$item.$isRowSection) {
				if (!(isHidden = this.awLayout == null ? true : false)) {
					paletteSectionProvider.fillRowSection(localize, section);
				}
			} else {
				if (hideStructure && section.$item.$isStructure) {
					isHidden = true;
				}
			}
			section.setState({
				$isHidden: isHidden
			});
			if (section.$item.$isColumnSection) {
				paletteSectionProvider.fillColChoices(localize, section, this.selectedPanel.colCount);
			}
			if (section.$item.$isTabChoice) {
				this.selectedPanel.sectionTabChoice = section;
				paletteSectionProvider.fillTabChoice(section.$item.$isTabChoice, localize, this.selectedPanel, this.awItem);
			}
		}
	},
	setRowAlign: function(valign) {
		if (this.awLayout) {
			this.awLayout.$layout.$rowAlign = valign;
			for (var ii = 0, jj = this.awLayout.items.length; ii < jj; ii++) {
				this.awLayout.items[ii].layoutSlot.style.verticalAlign = valign;
			}
			document.site.authorPage.endTargetPageUpdate(this.awLayout, true);
		}
	},
	_applyDesignMetaDataToFields: function(parentItem, value, binding) {
		var items = parentItem.layoutContent ? parentItem.layoutContent.items : parentItem.items;
		if (items) {
			for (var ii = 0, jj = items.length; ii < jj; ii++) {
				var child = items[ii];
				if (child.isField && child.applyDesignMetaData) {
					var metaData = {};
					metaData[binding] = value;
					child.applyDesignMetaData(metaData, true);
				} else {
					this._applyDesignMetaDataToFields(child, value, binding);
				}
			}
		}
	},
	_applyDesignMetaDataToSection: function(section, metaData) {
		section.applyDesignMetaData(metaData, true);
		if (section.childrenSection) {
			for (var ii = 0, jj = section.childrenSection.length; ii < jj; ii++) {
				this._applyDesignMetaDataToSection(section.childrenSection[ii], metaData);
			}
		}
	},
	switchTabPanelBox: function($layoutType) {

	},
	notifyDataChange: function(field, value) {
		var authorPage = document.site.authorPage;
		if (field.articleParent.designedField) {
			var metaData = {};
			metaData[field.$item.$bind] = value;
			field.articleParent.designedField.applyDesignMetaData(metaData, true);
			field.articleParent.applyChange(metaData);
			if (field.articleParent.onNotifyAuthoringChange) {
				field.articleParent.onNotifyAuthoringChange(field, value, metaData);
			}
			authorPage.notifyUpdate();
		} else {
			switch (field.$item.$bind) {
				case "$rowAlign":
					this.setRowAlign(value);
					break;
				case "$labelAlignment":
					var metaData = {};
					if (this.awItem.$authoringLevel == "field") {
						metaData.$isTopLabelAlignment = (value == "t");
						if (!metaData.$isTopLabelAlignment) {
							metaData.$isRightTextLabelAlignment = (value == "lr");
						}
						this.awItem.applyDesignMetaData(metaData, true);
					} else {
						if (metaData.$fieldsIsTopLabelAlignment = (value == "t")) {
							this._applyDesignMetaDataToFields(this.awItem, true, "$isTopLabelAlignment");
						} else {
							this._applyDesignMetaDataToFields(this.awItem, false, "$isTopLabelAlignment");
							this._applyDesignMetaDataToFields(this.awItem, metaData.$fieldsIsRightTextLabelAlignment = (value == "lr"), "$isRightTextLabelAlignment");
						}
						this._applyDesignMetaDataToSection(this.awItem, metaData);
					}
					authorPage.notifyUpdate();
					break;
				default:
					var metaData = {};
					var $bind = field.$item.$bind;
					if ($bind == "$titleChoice") {
						var isTitleLocalizationDisabled = true;
						switch (value) {
							case 0:
								$bind = "$title";
								metaData.$isTitleHidden = false;
								if (this.$prototype.$properties.$titleLocalization.$isHidden) {
									value = this.dataset.$savedTitle;
								} else {
									isTitleLocalizationDisabled = false;
									value = this.awItem.$item.$title;
									if (!value || value == "-") {
										value = this.$prototype.$properties.$titleLocalization.$value.$enum[0].$value;
									}
									this.applyChange({
										$titleLocalization: value
									});
								}
								break;
							case 1:
								$bind = "$title";
								value = "-";
								metaData.$isTitleHidden = false;
								break;
							case 2:
								$bind = "$isTitleHidden";
								value = true;
								break;
						}
						this.applyChange({
							$properties: {
								$titleLocalization: {
									$isDisabled: isTitleLocalizationDisabled
								}
							}
						});
					}
					if ($bind == "$titleLocalization") {
						$bind = "$title";
					}
					metaData[$bind] = value;
					if (this.awItem.$authoringLevel == "field") {
						this.awItem.applyDesignMetaData(metaData, true);
					} else {
						if ($bind.indexOf("$fields") == 0) {
							var fieldBind = $bind.slice("$fields".length);
							fieldBind = fieldBind.slice(0, 1).toLowerCase() + fieldBind.slice(1);
							this._applyDesignMetaDataToFields(this.awItem, value, "$" + fieldBind);
						}
						this.awItem.applyDesignMetaData(metaData, true);
					}
					authorPage.notifyUpdate();
					this.applyChange(metaData);
					break;
			}
		}
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$isHidden !== undefined) {
				var keys = ["$title", "$isMaximizable", "$isBoxCollapsable", "$isTitleHidden", "$fieldsIsTitleHidden", "$labelAlignment"];
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					newData.$properties[keys[ii]] = {
						$isDisabled: newData.$isHidden
					};
				}
			}
			if (newData.$title !== undefined) {
				this.toolbar.toggleArticleToolBox(true);
				this.ensureSelectedItemTitle();
			}
			if (newData.$fieldsIsTitleHidden !== undefined) {
				(newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$fieldsIsTitleHidden;
			}
			if (newData.$isTitleHidden !== undefined) {
				newData.$properties.$title = newData.$properties.$title || {};
				newData.$properties.$title.$isDisabled = newData.$isTitleHidden;
				if (this.awItem.$authoringLevel == "field") {
					(newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$isTitleHidden;
				} else {
					newData.$properties.$title = newData.$properties.$isBoxCollapsable = newData.$properties.$isMaximizable = {
						$isDisabled: newData.$isTitleHidden
					};
				}
			}
		}
		RawPage.prototype.applyChange.call(this, newData);
	},


	onClickPicker: function(target) {
		var $bind = target.getAttribute("data-s-picker");
		if ($bind.indexOf("$model_") == 0) {
			modelFactory.onModelClick($bind, this);
			return false;
		}
		switch ($bind) {
			case "$contentTabChoice":
				var children = (this.awItem.isLayout ? this.awItem : this.awItem.layoutContent).getItems();
				if (!(children.length > 0 && children[0].$authoringLevel == "field")) {
					this.awItem.layoutContent.convertToNewLayout({
						$layoutType: (target.$syraValue == "tabs") ? "tabs" : "stack"
					});
					paletteSectionProvider.fillTabChoice($bind, document.site.authorPage.localize, this.selectedPanel, this.awItem);
					document.site.authorPage.endTargetPageUpdate(this.awItem, true);
				}
				break;
			case "$boxTabChoice":
				if (this.awItem.layoutParent.$layoutType != target.$syraValue) {
					if (this.awItem.layoutParent.items.length == 1) {
						this.awItem.layoutParent.convertToNewLayout({
							$layoutType: target.$syraValue
						});
					} else {
						var layoutRoot = this.awItem.layoutParent;
						if (target.$syraValue == "stack") {
							/*layoutRoot.convertToNewLayout({
                         $layoutType: "stack"
                         });
                         var children = layoutRoot.getItems();
                         var layoutTab;
                         for (var ii = 0, jj = children.length; ii < jj; ii++) {
                         if (children[ii] == this.awItem) {
                         layoutRoot.loadChildItems([children[ii]]);
                         layoutTab = null;
                         }
                         else {
                         if (!children[ii].isSpaceBox) {
                         if (!layoutTab) {
                         layoutTab = layoutRoot.loadChildItem(null, {
                         $layoutType: "tabs"
                         });
                         }
                         layoutTab.loadChildItems([children[ii]]);
                         }
                         else {
                         // layoutRoot.removeItem(children[ii], true);
                         }
                         }
                         }*/
						} else {
							var layoutTab = layoutRoot.wrapIntack([this.awItem], layoutRoot.getItemIndex(this.awItem.$item));
							layoutTab.convertToNewLayout({
								$layoutType: "tabs"
							});
						}
					}
					document.site.authorPage.endTargetPageUpdate(this.awItem, true);
				}
				break;
			case "$colcount":
				var layout = this.awLayout ? this.awLayout : this.awItem.layoutContent;
				if (this.awItem.$authoringLevel == "field") {
					layout = this.awItem.layoutParent.wrapIntack([this.awItem], this.awItem.layoutParent.items.indexOf(this.awItem));
					layout.removeSpaceBox(true);
				}
				var $widths = ["100", "50,50", "33,33,33", "25,25,25,25", "20,20,20,20,20", "17,17,16,16,17,17"][target.$syraCoCount - 1];
				layout.convertToNewLayout({
					$layoutType: $widths == "100" ? "stack" : "row",
					$widths: $widths
				});
				document.site.authorPage.endTargetPageUpdate(layout.$layout.$layoutType == "stack" ? this.awItem : layout, true);
				break;
			case "$addRowBefore":
			case "$addRowAfter":
				var layout = this.awLayout ? this.awLayout : (this.awItem.layoutContent || this.awItem.layoutParent);
				document.site.authorPage.insertRow(layout, $bind == "$addRowBefore" ? "top" : "bottom");
				break;
			case "s-bar-dockMode":
			case "s-bar-collapse":
				if ($bind == "s-bar-dockMode") {
					this.preferences.isDocked = !this.preferences.isDocked;
				} else {
					this._resizer.isEnabled = !(this.preferences.isCollapsed = !this.preferences.isCollapsed);
				}
				this.ensureState();
				this.onWindowResize();
				this.resizeDialogPage();
				break;
		}
		return true;
	},

	onEndChangeStep: function() {
		var ids = Object.keys(this.$menus);

		if (this.targetPage.isDashBoard) {
			this.targetPage.warnAdministrationUpdates(false);
			this.loadAvailableLinks();
		} else {
			this.targetPage.warnAdministrationUpdates(false);
		}
		this.loadAvailableFields();

		this.toolbar.toggleArticleToolBox(true);

		if (this.toolbar.newColumnsTab) {
			this.toolbar.toggleColumnsToolBox();
		}
	},
	_loadAvailableFields: function($binds) {
		if ($binds.length > 0) {
			if (this.toolbar.itemTree) {
				var $properties = this.getawPrototype().$properties;
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					if ($bind.charAt(0) != "$") {
						if (!(this.targetPage.$isFusionPage && $bind.charAt(0) == "b")) {
							var $field = $properties[$bind];
							if ($field && $field.$type && !$field.$isExcluded) {
								this.toolbar.itemTree.onExcludeField($bind, isExcluded, ($field.$type == "application/x-vignette" && $field.$format == "$menu") ? "menus" : "field"); //vignette 
							}
						}
					}
				}
			}
		}
	},
	loadAvailableFields: function() {
		this._loadAvailableFields(this.targetPage.$freeFieldBinds);
		this._loadAvailableFields(Object.keys(this.targetPage.garbageFields));
	},
	_loadAvailableLinks: function($availableLinks) {
		var $binds = Object.keys($availableLinks);
		if (this.toolbar.itemTree) {
			if ($binds.length > 0) {
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var $field = $availableLinks[$bind];
					if ($field) { //important test for garbage link
						this.toolbar.itemTree.onExcludeField($bind, "link");
					}
				}
			}
		}
	},
	loadAvailableLinks: function() {
		this._loadAvailableLinks(this.targetPage.freeLinks);
		this._loadAvailableLinks(this.targetPage.garbageLinks);
	},
	onExcludeField: function($bind, isExcluded) {
		if (this.targetPage.isDashBoard) {
			if (isExcluded) {
				var $field = this.targetPage.$menus[$bind];
				if ($field) {
					this.targetPage.onAuthoringExcludeField($bind, isExcluded, true);
					//this.toolbar.itemTree.onExcludeField($bind, "link");
				} else {
					$field = this.targetPage.$prototype.$properties[$bind];
					//this.toolbar.itemTree.onExcludeField($bind, isExcluded, ($field.$type == "application/x-vignette" && $field.$format == "$menu") ? "menus" : "field"); //vignette
					this.targetPage.onAuthoringExcludeField($bind, isExcluded, false);
				}
			} else {
				var isVignette;
				//this.toolbar.itemTree.onExcludeField($bind, isExcluded);
				if (!isVignette) {
					delete this.targetPage.freeLinks[$bind];
					this.targetPage.onAuthoringExcludeField($bind, isExcluded, true);
				} else {
					if (this.targetPage.$freeFieldBinds.indexOf($bind) >= 0) {
						this.targetPage.$freeFieldBinds.splice(this.targetPage.$freeFieldBinds.indexOf($bind), 1);
						delete this.targetPage.registeredVignettes[$bind];
					}
					this.targetPage.onAuthoringExcludeField($bind, isExcluded, false);
				}
			}
		} else {
			//this.toolbar.itemTree.onExcludeField($bind, isExcluded);
			if (isExcluded) {
				this.targetPage.onAuthoringExcludeField($bind, isExcluded, false);
			} else {
				if (this.targetPage.$freeFieldBinds.indexOf($bind) >= 0) {
					this.targetPage.$freeFieldBinds.splice(this.targetPage.$freeFieldBinds.indexOf($bind), 1);
				}
				this.targetPage.onAuthoringExcludeField($bind, isExcluded);
			}
		}
	},

	ensureState: function() {
		if (this.preferences.isCollapsed) {
			this.openedWidth = this.$$toolbarSlot.outerWidth();
			this.toolbarSlot.style.width = "10px";
			this.toolbar.toolbarBody.style.display = "none";
			this.resizeBar.className = "s-aw-toolbar-resizer s-close";
			this.openerPicker.className = "s-aw-toolbar-opener s-close";
			if (!this.preferences.isDocked) {
				this._bar.style.width = "10px";
			}
		} else {
			this.resizeBar.className = "s-aw-toolbar-resizer";
			this.openerPicker.className = "s-aw-toolbar-opener";
			this.resizeBar.style.width = "";
			if (this.preferences.isDocked) {
				this.toolbarSlot.style.width = (this.openedWidth || 200) + "px";
				this._bar.style.position = "";
				this._bar.style.width = "";
			} else {
				this.toolbarSlot.style.width = "10px";
				document.site.setZIndex(this._bar);
				this._bar.style.position = "absolute";
				this._bar.style.width = "200px";
				this._bar.style.top = "0px";
				this._bar.style.left = "0px";
			}
			this.toolbar.toolbarBody.style.display = "";
		}
	},
	onNotifyDataChange: function(field, value) {
		if (this.awArticle.isList && field.$item.$measure) {
			var $cube = this.awArticle.$item.$cube || {};
			$cube.$measures = $cube.$measures || {};
			($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {}).$style = value;
			this.awArticle.awAddin.applyFieldDesignMetaDataChange({
				$cube: $cube
			});
			var metaData = {};
			metaData[field.$item.$bind] = value;
			this.applyChange(metaData);
			document.site.authorPage.notifyUpdate();
			return false;
		}
		return true;
	},
	dispose: function(onAuthorPageDispose) {
		if (!onAuthorPageDispose) {
			document.site.authorPage.onContextDisposed(this);
		}
		if (this.toolbar) {
			this.toolbar.dispose();
		}
		if (this._resizer) {
			this._resizer.dispose();
			this._resizer = null;
		}
		if (this.toolbarSlot) {
			document.site.removeDomChild(this.toolbarSlot);
		}
		this.$prototype = this.toolbarSlot = this.$$item = this.$$toolbarSlot = null;

		if (this.selectedPanel) {
			this.selectedPanel.sectionTabChoice = this.selectedPanel.fieldAddinSection = null;
		}
		if (this.layoutSlot) {
			document.site.removeDomChild(this.layoutSlot);
		}
		this.targetPage = this.$sourceItem = null;
		this.awItem = this.awLayout = null;
		this.toolbar = this.selectedPanel = this.diagnosePage = this.$item = this.externalAdapter = this.$prototype = this.layoutSlot = null;
		RawPage.prototype.dispose.call(this);
	}
});