"use strict";
var helpers = require('syracuse-core/lib/helpers');

function HeaderTabsPattern(){
}

exports.HeaderTabsPattern = helpers.defineClass(HeaderTabsPattern, null, {
    _extractItemSetting: function($items, $layout){
        for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
            var $item = $layout.$items[ii];
            if ($item.$items && !$item.$bind && !$item.$category) {
                if (!$item.$layoutType) {
                    $item.$layoutType = "stack";
                }
                this._extractItemSetting($items, $item);
            }
            else {
                $items.push($item);
            }
        }
    },
    build: function($prototype, $sourceArticle){
        var $newArticle = {
            $layout: {
                $items: []
            }
        };
        var $rootItems = [];
        this._extractItemSetting($rootItems, $sourceArticle.$layout);
        if ($rootItems[0].$category != "section") {
            $newArticle.$layout.$items.push({
                $category: "section",
                $title: "Section",
                $layout: {
                    $items: $rootItems
                }
            });
        }
        else {
            if ($rootItems.length < 3) {
                $newArticle.$layout.$items = $rootItems;
            }
            else {
                $newArticle.$layout.$items.push({
                    $layoutType: "stack",
                    $items: [$rootItems[0]]
                });
                var $tabs = {
                    $layoutType: "tabs",
                    $items: []
                };
                $newArticle.$layout.$items.push($tabs);
                for (var ii = 1, jj = $rootItems.length; ii < jj; ii++) {
                    $tabs.$items.push($rootItems[ii]);
                }
            }
        }
        for (var ii = 0, jj = $rootItems.length; ii < jj; ii++) {
            var $parent = $rootItems[ii];
            var $children = [];
            this._extractItemSetting($children, $parent.$layout);
            if ($children.length > 0) {
                if ($children[0].$category == "block") {
                    this._buildBlock($prototype, $parent, $children);
                }
                else {
                    $parent.$layout.$items = $children;
                }
            }
        }
        
        return $newArticle;
    },
    _buildBlock: function($prototype, $parent, $blocks){
        var $row, colIndex, nextBlock;
        if ($blocks.length > 1) {
            $parent.$layout.$items = [];
            for (var ii = 0, jj = $blocks.length; ii < jj; ii++) {
                var $block = $blocks[ii];
                var $children = [];
                this._extractItemSetting($children, $block.$layout);
                
                var $fields = [];
                this._extractItemSetting($fields, $block.$layout);
                if ($fields.length > 0) {
                    var addFields = true;
                    if ($fields.length == 1) {
                        var $field = $fields[0];
                        if ($field.$bind && $prototype.$properties[$field.$bind]) {
                            if ($prototype.$properties[$field.$bind].$type == "application/x-array") {
                                $parent.$layout.$items.push({
                                    $layoutType: "stack",
                                    $items: [$block]
                                });
                                colIndex = -1;
                                addFields = false;
                            }
                        }
                    }
                    if (addFields) {
                        $block.$layout.$items = $fields;
                    }
                }
                if (colIndex == -1) {
                    $row = null;
                }
                else {
                    if (!$row) {
                        colIndex = 0;
                        $row = {
                            $layoutType: "columns",
                            $layoutSubType: "33,33,33",
                            $items: [{
                                $layoutType: "stack",
                                $items: []
                            }, {
                                $layoutType: "stack",
                                $items: []
                            }, {
                                $layoutType: "stack",
                                $items: []
                            }]
                        };
                        $parent.$layout.$items.push($row);
                    }
                    $row.$items[colIndex++].$items.push($block);
                    if (colIndex == 3) {
                        $row = null;
                    }
                }
                
            }
        }
        else 
            if ($blocks.length == 1) {
                var $fields = [];
                this._extractItemSetting($fields, $blocks[0].$layout);
                $blocks[0].$layout.$items = $fields;
            }
    }
});
