"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ItemTree = require("syracuse-ui/lib/authoring/page/tree/itemTree").ItemTree;

function InsertTree() {}

exports.InsertTree = helpers.defineClass(InsertTree, ItemTree, {
	dispose: function() {
		this.designedArticle = this.$sourceItem = this.rootNode = null;
		ItemTree.prototype.dispose.call(this);
	},
	fill: function() {
		this.designedArticle = this.trees.designer.designedArticle;
		this.showAll = ((this.designedArticle.$item.$garbageFields && this.designedArticle.$item.$garbageFields.length > 0) ||
			(this.designedArticle.garbage._$freeFieldBinds && this.designedArticle.garbage._$freeFieldBinds.length > 0));

		this._clear();
		this.nodes = [];
		this.sectionsNodes = [];
		this.fieldsNodes = [];
		this.tabItem.body.syraAwTree = "insertTree";
		this._addInsertNewSectionBlockNode("section");

		this.itemNodeStart = 1;
		if (this.designedArticle.page == this.designedArticle) {
			this.$sourceItem = this.designedArticle.$prototype.$article;
			if (!this.$sourceItem) {
				var $items = [];
				var binds = Object.keys(this.designedArticle.$prototype.$properties);
				for (var ii = 0, jj = binds.length; ii < jj; ii++) {
					var $bind = binds[ii];
					if ($bind.charAt(0) != "$" && !(this.designedArticle.page.isFusionPage && this.designedArticle.page.isNavigationListItem($bind))) {
						var $field = this.designedArticle.$prototype.$properties[$bind];
						if ($field && !$field.$isExcluded) {
							$items.push({
								$bind: $bind
							});
						}
					}
				}
				this.$sourceItem = {
					$layout: {
						$items: $items
					}
				};
			}
		} else {
			this.$sourceItem = this.designedArticle.$item;
		}
		this.$sourceItem = helpers.object.clone(this.$sourceItem, true);
		this._parseNodesItem(this.$sourceItem, this.rootNode = {
			node: this.tabItem.body,
			isRoot: true
		});
		for (var ii = this.itemNodeStart, jj = this.nodes.length; ii < jj; ii++) {
			var nodeItem = this.nodes[ii];
			nodeItem.node.style.display = this.showAll ? "" : "none";
		}
		this.checkNodes();
	},
	_addInsertNewSectionBlockNode: function($designLevel) {
		var itemNode = this._createNodeItem("node-" + this.nodes.length, "section");
		this.tabItem.body.appendChild(itemNode.node);
		itemNode.titleText.textContent = itemNode.node.title = this.trees.designer.localize["aw_drop_new_section"];
		this.nodes.push(itemNode);
		itemNode.item = {
			$title: this.trees.designer.localize["aw_drop_new_section"],
			$awAddNewItem: true,
			$designLevel: itemNode.$designLevel
		};
		itemNode.item.$item = {
			$category: "section",
			$layout: {
				$items: [{
					$category: "section",
					$title: "-",
					$layout: {
						$items: []
					}
				}]
			}
		};
	},
	_parseNodesItem: function($item, parentNode) {
		var $items = $item && $item.$items;
		if ($item.$layout && !$item.$bind) {
			$items = $item.$layout.$items;
		}
		if ($items) {
			for (var ii = 0, jj = $items.length; ii < jj; ii++) {
				this._addNode($items[ii], parentNode);
			}
		}
	},
	_addNode: function($item, parentNode) {
		var $items;
		if ($item.$category != "space") {
			if ($item.$items && !$item.$bind && !$item.$category) {
				$items = $item.$items;
			} else {
				this._setParentNode(parentNode);

				var $designLevel, $field, item;
				if ($item.$bind) {
					$designLevel = "field";
					$field = this.designedArticle.$prototype.$properties[$item.$bind];
					var boundField = this.designedArticle.boundFields[$item.$bind];
					if (boundField && boundField.length > 0) {
						item = boundField[0];
					}
				} else {
					$designLevel = parentNode.$designLevel == "section" ? "block" : "section";
				}
				var itemNode = this._createNodeItem(item ? item.id : "node-" + this.nodes.length, $designLevel);
				itemNode.parentNode = parentNode;
				itemNode.$item = $item;
				this.nodes.push(itemNode);


				var title = $item.$title || ($field ? $field.$title : null) || "";
				if (title && title.indexOf("{") >= 0) {
					if (title[1] == "@") {
						title = title.slice(1, title.length - 1);
						if (this.designedArticle.page.$prototype.$localization) {
							title = this.designedArticle.page.$prototype.$localization[title];
						}
					}
				}
				if (title == "-" || title == "") {
					title = this.trees.designer.localize["aw_" + itemNode.$designLevel];
				}

				itemNode.insertType = document.createElement("div");
				itemNode.insertType.className = "s-aw-tree-item-flag";
				itemNode.data.insertBefore(itemNode.insertType, itemNode.data.firstChild);
				this._setTitleNode(itemNode, $item, $field, title);
				if ($field) {
					this._addFieldType(itemNode, $field);
					var $isFreeField = this.designedArticle.garbage._$freeFieldBinds && this.designedArticle.garbage._$freeFieldBinds.indexOf($item.$bind) >= 0;
					if ((this.designedArticle.garbage._garbageFields && this.designedArticle.garbage._garbageFields[$item.$bind]) || $isFreeField) {
						itemNode.insertType.className = $isFreeField ? "s-aw-tree-item-flag-new" : "s-aw-tree-item-flag-garbage";
						itemNode.item = {
							$isFreeField: $isFreeField,
							$title: itemNode.node.title,
							$awAddNewItem: true,
							$fieldBind: $item.$bind,
							$designLevel: "field"
						};
						itemNode.node.style.display = "";
					} else {
						if (item) {
							itemNode.item = item;
							//itemNode.node.style.display = "none";
						}
					}
					this.fieldsNodes.push(itemNode);
				} else {
					itemNode.item = {
						$title: itemNode.node.title,
						$item: $item,
						$awAddNewItem: true,
						$designLevel: itemNode.$designLevel
					};
					itemNode.insertType.style.display = "none";
					//itemNode.node.style.display = "none";
					this.sectionsNodes.push(itemNode);
				}
				parentNode.children.push(itemNode);
				parentNode.childRoot.appendChild(itemNode.node);
			}
			this._parseNodesItem($item, itemNode || parentNode);
		}
	},
	findChildFieldStatus: function(children, sectionNode) {
		if (children) {
			for (var ii = 0, jj = children.length; ii < jj; ii++) {
				var child = children[ii];
				if (child.children) {
					this.findChildFieldStatus(child, sectionNode);
				}
				if (child.item) {
					if (child.item.$awAddNewItem) {
						if (child.item.$fieldBind) {
							if (child.item.$isFreeField) {
								sectionNode.free.push(child.item.$fieldBind);
							} else {
								sectionNode.garbage.push(child.item.$fieldBind);
							}
						}
					} else {
						if (child.item.$item && child.item.$item.$bind) {
							sectionNode.loadedFields.push(child.item);
						}
					}
				}
			}
		}
	},
	checkNodes: function() {
		var loadedNodes = this.trees.contentTree.sectionsNodes;
		for (var ii = 0, jj = this.sectionsNodes.length; ii < jj; ii++) {
			var sectionNode = this.sectionsNodes[ii];
			//find section by Title
			if (sectionNode.item.$item.$title) {
				for (var mm = 0, kk = loadedNodes.length; mm < kk; mm++) {
					var loadedNode = loadedNodes[mm];
					if (loadedNode.item.$item.$title) {
						if (loadedNode.item.$item.$title == sectionNode.item.$item.$title) {
							sectionNode.item = loadedNode.item;
							break;
						}
					}
				}
			}
			if (sectionNode.item.$awAddNewItem) {
				sectionNode.item.sectionNode = sectionNode;
				sectionNode.loadedFields = [];
				sectionNode.garbage = [];
				sectionNode.free = [];
				this.findChildFieldStatus(sectionNode.children, sectionNode);
				var loadedCount = sectionNode.loadedFields.length;
				if (loadedCount) {
					var parentBoxes = {};
					for (var mm = 0, kk = loadedCount; mm < kk; mm++) {
						var boxParent = sectionNode.loadedFields[mm].boxParent;
						if (!parentBoxes[boxParent.id]) {
							parentBoxes[boxParent.id] = {
								count: 1,
								item: boxParent
							};
						}
					}
					var idsParent = Object.keys(parentBoxes);
					if (idsParent.length >= 1) {
						var topParent = parentBoxes[idsParent[0]];
						for (var mm = 1, kk = idsParent.length; mm < kk; mm++) {
							if (topParent.count < parentBoxes[idsParent[mm]].count) {
								topParent = parentBoxes[idsParent[mm]];
							}
						}
						sectionNode.item = topParent.item;
						if (sectionNode.parentNode && !sectionNode.parentNode.isRoot && sectionNode.parentNode.item.$awAddNewItem) {
							if (sectionNode.item.boxParent && sectionNode.item.boxParent.isSection) {
								sectionNode.parentNode.item = sectionNode.item.boxParent;
								sectionNode.parentNode.insertType.style.display = "none";
							}
						}
					}
				}
				if (sectionNode.item.$awAddNewItem) {
					sectionNode.insertType.className = (sectionNode.garbage && sectionNode.garbage.length) ? "s-aw-tree-item-flag-garbage" : "s-aw-tree-item-flag-new";
					sectionNode.insertType.style.display = "";
				}
			}
		}
	}
});