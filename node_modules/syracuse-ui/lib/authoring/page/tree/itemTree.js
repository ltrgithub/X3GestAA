"use strict";
var helpers = require('syracuse-core/lib/helpers');
var fieldHelper = require('syracuse-ui/lib/field/helpers/fieldHelper');

function ItemTree() {}

exports.ItemTree = helpers.defineClass(ItemTree, null, {
	load: function(trees, tabItem) {
		this.trees = trees;
		this.id = trees.designer.id + "-" + (++trees.designer._childItemOffset);
		syra_store.add(this);
		this.tabItem = tabItem;
	},
	findField: function($bind) {
		for (var ii = 0, jj = this._nodes.length; ii < jj; ii++) {
			if (this._nodes[ii].$item.$bind == target.$bind) {
				return this._nodes[ii];
			}
		}
	},
	findNode: function(event, id) {
		if (id === undefined) {
			var target = event.target;
			while (target && !target.syraAwTreeNodeId) {
				target = target.parentNode;
			}
			if (target && target.syraAwTreeNodeId) {
				id = target.syraAwTreeNodeId;
			}

		}
		if (id !== undefined) {
			for (var ii = 0, jj = this.nodes.length; ii < jj; ii++) {
				if (this.nodes[ii].node.syraAwTreeNodeId == id) {
					return this.nodes[ii];
				}
			}
		}
		return null;
	},
	openParentNode: function(node, open) {
		node.childRoot.style.display = open ? "" : "none";
		syra_menus.setButtonTitle(node.opener, open ? syra_local.aw_tree_collapse : syra_local.aw_tree_expand);
		syra_site.dom.toggleClass(node.opener, "s-open", !open);
	},
	onNodeOpenerClick: function(event) {
		syra_dd.cancel();
		event.stopPropagation();
		var node = this.findNode(event);
		if (node) {
			this.openParentNode(node, !(node.opener.className.indexOf("s-open") < 0));
		}
	},
	onNodeClick: function(event) {
		syra_dd.cancel();
		event.stopPropagation();
		var node = this.findNode(event);
		if (node && !node.item.$awAddNewItem) {
			if (node.item == this.trees.designer.designedArticle) {
				this.trees.designer.designedArticle.page.scrollToItem(node.item);
			}
			this.selectNode(node.item, true);
			this._isSelecteDisabled = true;
			this.trees.designer.selectItem(node.item, true);
			this._isSelecteDisabled = false;
		}
	},
	onItemInOut: function(onEnter, event, target) {
		syra_dd.cancel();
		event.stopPropagation();
		var node = this.findNode(event);
		if (node) {
			if (onEnter) {
				if (!node.item.$awAddNewItem) {
					this.trees.designer.uiSwitchTool.toggleOverItem(node.item, true);
					this.trees.designer.designedArticle.page.scrollToItem(node.item);
				}
			} else {
				if (!node.item.$awAddNewItem) {
					this.trees.designer.uiSwitchTool.toggleOverItem(node.item, false);
				}
			}
		}
	},
	selectNode: function(item, select) {
		if (!this._isSelecteDisabled && item && !item.disposed) {
			var node = this.findNode(null, item.id);
			if (node) {
				if (select) {
					if (this.selectedNode && this.selectedNode != node && this.selectedNode.item) {
						syra_site.dom.toggleClass(this.selectedNode.title, "s-aw-tree-designed-" + this.selectedNode.item.$designLevel, false);
					}
					this.selectedNode = node;
					syra_site.dom.toggleClass(node.title, "s-aw-tree-designed-" + node.item.$designLevel, true);
					this.trees.designer.scrollToItem(this.selectedNode.node, this.tabItem.body, true);
				} else {
					if (this.selectedNode == node) {
						this.selectedNode = null;
						syra_site.dom.toggleClass(node.title, "s-aw-tree-designed-" + node.item.$designLevel, false);
					}
				}
			}
		}
	},
	_setParentNode: function(parentNode) {
		if (!parentNode.childRoot) {
			parentNode.children = [];
			parentNode.childRoot = document.createElement("ul");
			parentNode.childRoot.className = "s-aw-tree-level";
			parentNode.node.appendChild(parentNode.childRoot);
			if (!parentNode.opener) {
				if (parentNode.title) {
					parentNode.opener = syra_menus.addIconButton(syra_local.aw_tree_collapse, "s-aw-tree-item-opener", "onNodeOpenerClick");
					if (syra_site.isDocumentRTL) {
						parentNode.opener.className += " s-rtl-img ";
					}
					parentNode.title.parentNode.insertBefore(parentNode.opener, parentNode.title.parentNode.firstChild);
				}
			}
			if (parentNode.isRoot) {
				parentNode.childRoot.className += " s-aw-tree-root";
			}
		}
	},
	_createNodeItem: function(id, $designLevel) {
		var itemNode = {};
		itemNode.node = document.createElement("li");
		itemNode.node.syraAwTreeNodeId = id;
		itemNode.node.syraTool = this.id;
		itemNode.node.syraOnClick = "onNodeClick";

		itemNode.node.syraDragSpot = this.id;
		itemNode.node.className = "s-aw-tree-item s-aw-add-item";

		itemNode.data = document.createElement("div");
		itemNode.data.className = "s-aw-tree-item-data";
		itemNode.node.appendChild(itemNode.data);

		itemNode.title = document.createElement("div");
		itemNode.title.syrainout = this.id;
		itemNode.title.className = "s-aw-tree-item-title s-aw-tree-" + (itemNode.$designLevel = $designLevel);
		itemNode.titleLabel = document.createElement("div");
		itemNode.titleLabel.className = "s-aw-tree-item-text";
		itemNode.title.appendChild(itemNode.titleLabel);
		itemNode.data.appendChild(itemNode.title);
		return itemNode;
	},
	_setTitleNode: function(itemNode, $item, $field, title) {
		var bindTitle = "",
			desc = title;
		if ($item.$bind) {
			bindTitle = this.trees.designer.getBindTitle($item.$bind, $field);
			if (title == "") {
				desc = title = bindTitle;
			} else {
				desc = title + " (" + bindTitle + ")";
			}
		}
		itemNode.titleLabel.textContent = title;
		itemNode.node.title = desc;
	},
	_addFieldType: function(itemNode, $field) {
		itemNode.type = document.createElement("div");
		itemNode.type.textContent = fieldHelper.getTypeFieldIcon($field.$type);
		itemNode.type.className = "s-aw-tree-field-type";
		itemNode.titleLabel.parentNode.insertBefore(itemNode.type, itemNode.titleLabel);
	},
	_clear: function() {
		if (this.tabItem) {
			this.tabItem.body.style.display = "none";
			syra_site.dom.empty(this.tabItem.body);
		}
		if (this.nodes) {
			for (var ii = 0, jj = this.nodes.length; ii < jj; ii++) {
				var node = this.nodes[ii];
				if (node) {
					if (node.item) {
						node.item.sectionNode = null;
					}
					node.children = node.item = node.node = node.childRoot = node.data = null;
					node.opener = node.title = node.titleLabel = null;
				}
			}
		}
		this.sectionsNodes = this.fieldsNodes = this.nodes = this.selectedNode = null;
	},
	dispose: function() {
		syra_store.remove(this);
		this._clear();
		this.tabItem = this.nodes = this.selectedNode = this.trees = null;
	}
});