"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var designLocalization = require("syracuse-ui/lib/authoring/designLocalization");
var LandingPageTemplatesTool = require("syracuse-ui/lib/authoring/tools/landingPageTemplatesTool").LandingPageTemplatesTool;
var HistoryTool = require("syracuse-ui/lib/authoring/tools/historyTool").HistoryTool;
var DragDrop = require("syracuse-ui/lib/authoring/tools/dragDrop").DragDrop;
var DesignerWorkingCopy = require("syracuse-ui/lib/authoring/designerWorkingCopy").DesignerWorkingCopy;

function LandingPageDesigner() {}

exports.LandingPageDesigner = helpers.defineClass(LandingPageDesigner, RawPage, {
	toggleItemAuthoring: function(item, enable) { //desktopPage compatiibility
	},
	showAdvancedItem: function(item, $isAdvanced) { //desktopPage compatiibility
	},
	showHiddenItem: function(item) { //desktopPage compatiibility
	},
	onEndChangeStep: function($item) {
		var $bind = this.awItem.$item.$bind;
		var $article = helpers.object.clone($item || this.historyTool.getCurrentStep(), true);
		this.awArticle.reloadLayout($article);
		this.historyTool.refreshStepLinks();
		var itemToSelect;
		if ($bind) {
			var bounds = this.awArticle.boundFields[$bind];
			itemToSelect = bounds ? bounds[0] : null;
		}
		this.awArticle.page.warnAdministrationUpdates(false);
		this.applyChangeToMobile($article);
	},
	endTargetPageUpdate: function(selectedItem, isStructureUpdated) {
		this.awArticle.page.layoutValidator.validate(this.awArticle.page.layoutContent, true);
		selectedItem = selectedItem || this.awItem;
		if (selectedItem && selectedItem.$designLevel == "field" && selectedItem.boxParent) {
			selectedItem.boxParent.validateFieldVisibility();
		}
		this.historyTool.notifyUpdate();
		this.designerWorkingCopy.temporalySave();
	},
	applyChangeToMobile: function($article) {
		if (document.site.mobileGateway) {
			document.site.mobileGateway.applyChange($article);
		}
	},
	loadBox: function(designedPage) {
		document.site.authorPage = this;
		(this.diagnosePage = this.awArticle = designedPage).clearUnknowFields();
		this.localize = designLocalization.getLocalize();
		this.showTargetPageDiagnoses({
			$diagnoses: null
		});
		/*if (this.awArticle.$prototype.$article) {
         this.awArticle.$prototype.$article = helpers.object.clone(this.awArticle.$prototype.$article, true);
         } */
		this.awItem = this.awArticle;
		this.awArticle.designer = this;
		this.awArticle.isDesigned = true;
		this.$prototype = {
			$properties: {},
			$links: {}
		};
		this.$item = {};
		this._unregisterResizer = true;
		this.$autoFetch = false;
		RawPage.prototype.loadBox.call(this);
	},
	drawBox: function() {
		this.layoutSlot = document.createElement("aside");
		this.layoutSlot.id = "s-aw-page";

		this.awArticle.header.appendChild(this.layoutSlot);
		this.layoutSlot.style.display = "";
		this.$$item = $(this.layoutSlot);
		this.sectionModel = {
			body: this.layoutSlot.appendChild(document.createElement("div"))
		};
		this.sectionModel.body.className = "s-aw-lp-model-slot";

		//left part
		this.helpLink = document.createElement("a");
		this.helpLink.title = this.localize.aw_help;
		this.helpLink.setAttribute("data-s-picker", "$authorHelp");
		this.helpLink.className = "s-aw-top-left-link-icon";
		this.helpLink.style.backgroundImage = "url('/syracuse-ui/themes/desktop/sage/images/authoring/s-aw-help.png')";

		this.historySlot = document.createElement("div");
		this.historySlot.id = "s-aw-top-left-links";
		this.historySlot.appendChild(this.helpLink);

		//right part
		this.workinCopySlot = document.createElement("div");
		this.workinCopySlot.id = "s-aw-page-right";
		this.workinCopySlot.appendChild(this.historySlot);
		this.layoutSlot.appendChild(this.workinCopySlot);

		(this.historyTool = new HistoryTool()).load(this, "s-aw-top-left-link");
		(this.templatesTool = new LandingPageTemplatesTool()).load(this);

		this.templatesTool.addModelLinks(this.sectionModel, this.awItem, this.awItem.layoutContent.getColumnsCount());


		this.designerWorkingCopy = new DesignerWorkingCopy();
		this.designerWorkingCopy.load(this, this.workinCopySlot);

		document.site.resize();
	},
	closeDesigner: function() {
		this.awArticle.page.designPage(false);
	},
	cancelUpdate: function() {
		var $item = helpers.object.clone(this.historyTool.$sourceItem, true);
		this.awArticle.page.reloadLayout($item);
		this.applyChangeToMobile($item);
		this.closeDesigner();
	},
	showTargetPageDiagnoses: function(message, options) {
		this.awArticle.showDiagnoses(message, options);
		if (document.site.mobileGateway) {
			document.site.mobileGateway.onShowTargetPageDiagnoses(message, options);
		}
	},
	onBeforeMainPageChange: function(continueChanging) {
		var self = this;
		if (self.designedPage.designer.historyTool.isUpdated) {
			document.site.showMessage({
				$title: self.localize.aw_updateMessageTitle,
				$message: self.localize.aw_cancelMessageText,
				$type: "question",
				$buttons: "yesnocancel",
				callback: function(response) {
					if (response.$id == "yes") {
						self.clickMenu("$save");
						setTimeout(function() {
							self.designedPage.designPage(false);
							continueChanging();
						}, 300);
					} else {
						if (response.$id == "no") {
							self.designedPage.designPage(false);
							continueChanging();
						}
					}
				}
			});
			return false;
		}
		self.designedPage.designPage(false);
		return true;
	},
	onMenuClick: function(menuItem) {
		var self = this;
		if (this.designerWorkingCopy.onMenuClick(menuItem)) {
			switch (menuItem.$item.$bind) {
				default: if (menuItem.$sourceBind == "$aw_quit") {
					this.showTargetPageDiagnoses(this.awArticle, null);
					this.awArticle.designPage(false);
					return false;
				} else {
					if (menuItem.page != this && menuItem.page != this.awArticle.designer) {
						if (!menuItem.page.isAuthoringFriend && !menuItem.boxParent.isDiagnoseMenus) {
							return !menuItem.page.vignetteField && !menuItem.page.isDesigned;
						}
					}
					return true;
				}
			}
		}
		return false;
	},
	onClickPicker: function(picker) {
		var $bind = picker.getAttribute("data-s-picker");
		if (this.awArticle.designer.historyTool.onClickPicker($bind)) {
			return false;
		}
		var templateResult = this.templatesTool.onTemplateChoiceClick(picker, this.awItem, this.awLayout);
		if (templateResult) {
			this.endTargetPageUpdate(templateResult, true);
			return false;
		}

		switch ($bind) {
			case "$authorHelp":
				return true;
		}
		return true;
	},
	onClickItem: function(item, target, article) {
		article = article || document.controller.findArticle($(target));
		if (article.isDesigned) {} else {
			if (!article.page.isAuthoringEventEnabled && article.page != this) {
				if (!(article.page.$prototype && article.page.$prototype.$representation == "authoringSaveParam")) {
					return false;
				}
			}
		}
		return true;
	},
	onNotifyDataChange: function(field, value) {
		if (this.awArticle.isList && field.$item.$measure) {
			var $cube = this.awArticle.$item.$cube || {};
			$cube.$measures = $cube.$measures || {};
			($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {}).$style = value;
			this.awArticle.awAddin.applyFieldDesignMetaDataChange({
				$cube: $cube
			});
			var metaData = {};
			metaData[field.$item.$bind] = value;
			this.applyChange(metaData);
			this.historyTool.notifyUpdate();
			return false;
		}
		return true;
	},
	notifyDataChange: function(field, value) {
		this.designerWorkingCopy.temporalySave();
		switch (field.$item.$bind) {
			default: var metaData = {};
			this.awItem.applyDesignMetaData(metaData, true);
			this.historyTool.notifyUpdate();
			this.applyChange(metaData);
			break;
		}
	},
	dispose: function() {
		if (this.designerWorkingCopy) {
			this.designerWorkingCopy.dispose();
		}
		document.site.removeDomChild(this.layoutSlot);
		document.site.authorPage = null;
		if (this.awArticle) {
			this.awArticle.page.isDesigned = false;
			delete this.awArticle.designer;
		}
		if (this.historyTool) {
			this.historyTool.dispose();
		}
		if (this.templatesTool) {
			this.templatesTool.dispose();
		}
		this.historyTool = this.templatesTool = this.historySlot = this.sectionModel = this.workinCopySlot = null;
		this.awItem = this.awLayout = this.awArticle = null;
		this.designerWorkingCopy = this.page = this.diagnosePage = this.helpLink = this.designerWorkingCopy = null;
		RawPage.prototype.dispose.call(this);
	}
});