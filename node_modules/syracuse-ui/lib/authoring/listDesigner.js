"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;

function ListDesigner() {}

exports.ListDesigner = helpers.defineClass(ListDesigner, Designer, {
	loadBox: function(designedPage) {
		this.$prototype = {
			$properties: {
				$itemsPerPage: {
					$type: "application/x-choice",
					$precision: 3,
					$title: this.localize.lw_itemsPerPage,
					$value: {
						$type: "application/x-integer",
						$enum: ["5", "10", "15", "20", "25", "50", "75", "100", "150", "200"].map(function(count) {
							return {
								$value: count,
								$title: count
							};
						})
					}
				},
				$widths: {
					$type: "application/x-choice",
					$title: this.localize.lw_cardWidth,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "15",
							$title: "15 %"
						}, {
							$value: "25",
							$title: "25 %"
						}, {
							$value: "40",
							$title: "40 %"
						}, {
							$value: "50",
							$title: "50 %"
						}, {
							$value: "60",
							$title: "60 %"
						}, {
							$value: "75",
							$title: "75 %"
						}]
					}
				},
				$position: {
					$type: "application/x-choice",
					$title: this.localize.lw_cardPosition,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "no",
							$title: this.localize.lw_cardPositionNo
						}, {
							$value: "inline",
							$title: this.localize.lw_cardPositionInline
						}, {
							$value: "top",
							$title: this.localize.lw_cardPositionTop
						}, {
							$value: "left",
							$title: this.localize.lw_cardPositionLeft
						}, {
							$value: "right",
							$title: this.localize.lw_cardPositionRight
						}, {
							$value: "bottom",
							$title: this.localize.lw_cardPositionBottom
						}]
					}
				},
				$cardsByRowCount: {
					$isHidden: true,
					$type: "application/x-choice",
					$title: this.localize.lw_cardListByRowCount,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: 1,
							$title: this.localize.lw_title_cardsByRow_1
						}, {
							$value: 2,
							$title: this.localize.lw_title_cardsByRow_2
						}, {
							$value: 3,
							$title: this.localize.lw_title_cardsByRow_3
						}, {
							$value: 4,
							$title: this.localize.lw_title_cardsByRow_4
						}, {
							$value: 5,
							$title: this.localize.lw_title_cardsByRow_5
						}]
					}
				},
				$format: {
					$type: "application/x-choice",
					$title: this.localize.lw_format,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "cards",
							$title: this.localize.lw_formatCards
						}, {
							$value: "grid",
							$title: this.localize.lw_formatHGrid
						}]
					}
				},
				$graphMode: {
					$type: "application/x-choice",
					$isHidden: this.awArticle.$prototype.$cube ? false : true,
					$title: this.localize.lw_graphMode,
					$value: {
						$type: "application/x-string",
						$enum: [{
							$value: "list",
							$title: this.localize.lw_graphModeList
						}, {
							$value: "both",
							$title: this.localize.lw_graphModeGraphList
						}, {
							$value: "graph",
							$title: this.localize.lw_graphModeGraph
						}]
					}
				},
				$graphPosition: {
					$type: "application/x-choice",
					$isHidden: this.awArticle.$prototype.$cube ? false : true,
					$title: this.localize.lw_graphPosition,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "top",
							$title: this.localize.lw_graphPositionTop
						}, {
							$value: "left",
							$title: this.localize.lw_graphPositionLeft
						}, {
							$value: "right",
							$title: this.localize.lw_graphPositionRight
						}, {
							$value: "bottom",
							$title: this.localize.lw_graphPositionBottom
						}, {
							$value: "front",
							$title: this.localize.lw_graphPositionFront
						}, {
							$value: "behind",
							$title: this.localize.lw_graphPositionBehind
						}]
					}
				}
			},
			$graphMode: "both",
			$graphPosition: "bottom"
		};
		this.$item = {
			$layout: {
				$layoutType: "stack",
				$items: [{
					$bind: "$itemsPerPage",
					$isTopLabelAlignment: false,
					$isEditMode: true,
					$skin: "s-aw-field",
					$choiceLayout: "4",
					$isLeftSpaceHidden: true
				}, {
					$bind: "$format",
					$isTopLabelAlignment: false,
					$skin: "s-aw-field",
					$isEditMode: true
				}, {
					$layoutType: "row",
					$items: [{
						$bind: "$position",
						$isTopLabelAlignment: false,
						$isEditMode: true,
						$skin: "s-aw-field",
						$isLeftSpaceHidden: true
					}, {
						$bind: "$widths",
						$isTopLabelAlignment: false,
						$isHidden: true,
						$isEditMode: true,
						$choiceLayout: "2",
						$skin: "s-aw-field",
						$isLeftSpaceHidden: true
					}]
				}, {
					$bind: "$cardsByRowCount",
					$isTopLabelAlignment: false,
					$skin: "s-aw-field",
					$isEditMode: true,
					$format: "$radios",
					$choiceLayout: "1"
				}, {
					$bind: "$graphMode",
					$isTopLabelAlignment: false,
					$skin: "s-aw-field",
					$isEditMode: true,
					$format: "$combo"
				}, {
					$bind: "$graphPosition",
					$isTopLabelAlignment: false,
					$skin: "s-aw-field",
					$isEditMode: true,
					$format: "$combo"
				}]
			}

		};
		Designer.prototype.loadBox.call(this);
		var delta = {
			$cardsByRowCount: this.awArticle.$item.$cardsByRowCount || 1,
			$format: this.awArticle.$item.$format || "grid",
			$itemsPerPage: this.awArticle.$item.$itemsPerPage || 20
		};
		if (this.awArticle.$item.$cards) {
			delta.$position = this.awArticle.$item.$cards.$position;
			delta.$widths = this.awArticle.$item.$cards.$widths;
		}
		delta.$position = delta.$position || "no";
		delta.$widths = delta.$widths || "50";

		this.applyChange(delta);
	},
	onMenuClick: function(menuItem) {
		var self = this;
		if (this.designerWorkingCopy.onMenuClick(menuItem)) {
			switch (menuItem.$item.$bind) {
				case "$excludeMe":
					var layoutParent = this.awItem.layoutParent;
					var excludedFields;
					if (this.awItem.$designLevel == "field") {
						excludedFields = [this.awItem];
					} else {
						excludedFields = this.awItem.layoutContent.getFields();
					}
					if (excludedFields) {
						for (var ii = 0, jj = excludedFields.length; ii < jj; ii++) {
							this.awArticle.page.onExcludeField(excludedFields[ii].$item.$bind, true);
						}
					}
					var index = layoutParent.items.indexOf(this.awItem);
					layoutParent.removeItem(this.awItem, true);
					var newItem = layoutParent.items[index] || layoutParent.items[index - 1];
					if (newItem && newItem.isSpaceBox) {
						newItem = null;
					}
					newItem = newItem || layoutParent.boxParent;
					switch (layoutParent.$layout.$layoutType) {
						case "row":
							layoutParent.addSpaceBox(index);
							break;
						case "tabs":
							if (layoutParent.items.length == 0) {
								layoutParent.convertToNewLayout({
									$layoutType: "stack",
									$width: "100"
								});
							}
							break;
					}
					this.treebar.fill(true);
					this.endTargetPageUpdate(newItem, true);
					break;
				default:
					if (menuItem.$sourceBind == "$aw_quit") {
						this.showTargetPageDiagnoses(this.awArticle, null);
						this.awArticle.designItem(false);
						return false;
					} else {
						if (menuItem.page != this && menuItem.page != this.awArticle.designer) {
							if (!menuItem.page.isAuthoringFriend && !menuItem.boxParent.isDiagnoseMenus) {
								return !menuItem.page.vignetteField && !menuItem.page.isDesigned;
							}
						}
						return true;
					}
			}
		}
		return false;
	},
	onClickPicker: function(picker) {
		if (!Designer.prototype.onClickPicker.call(this, picker)) {
			return false;
		}
		var $bind = picker.getAttribute("data-s-picker");
		switch ($bind) {
			case "$addRowBefore":
			case "$addRowAfter":
				var layout = this.awLayout ? this.awLayout : (this.awItem.layoutContent || this.awItem.layoutParent);
				var $curRow = {
					$layoutType: layout.$layout.$layoutType,
					$widths: layout.$layout.$widths,
					$autoSize: layout.$layout.$autoSize
				};
				if (!layout.layoutParent) {
					layout = layout.ensureHasParent();
				}
				var index = layout.layoutParent.items.indexOf(layout);
				var newRow = layout.layoutParent.loadChildItem(null, {
					$layoutType: $curRow.$layoutType,
					$widths: $curRow.$widths,
					$autoSize: $curRow.$autoSize,
				}, ($bind == "$addRowAfter") ? ++index : index);
				this.endTargetPageUpdate(newRow, true);
				break;
		}
		return true;
	},
	onClickItem: function(item, target, article) {
		article = article || document.controller.findArticle($(target));
		if (article.isDesigned) {
			if (document.site.dragDropInstance && document.site.dragDropInstance.isDragAuthoring) {
				document.site.dragDropInstance.stop(event);
				document.site.setDragDropInstance();
			} else {
				delete document.site.requestedDDAuthoringItem;
				item = item || this.findItem(target);
				if (item) {
					if (item.isSpaceBox) {
						item = item.boxParent;
					}
					if (item.isMenuGroup && item.contextField) {
						return false;
					}
					if (item && (item != this && item.page != this)) {
						this.selectItem(item, true, true);
					}
				}
			}
		} else {
			if (!article.page.isAuthoringEventEnabled && article.page != this) {
				if (!(article.page.$prototype && article.page.$prototype.$representation == "authoringSaveParam")) {
					return false;
				}
			}
		}
		return true;
	},
	drawBox: function() {
		this.layoutSlot = document.createElement("aside");
		this.layoutSlot.id = "s-aw-page";
		this.awArticle._core.parentNode.insertBefore(this.layoutSlot, this.awArticle._core);
		this.layoutSlot.style.display = "";
		this.$$item = this.$$body = $(this.layoutSlot);
		this.renderLayoutContent();

		this.awItem = this.awArticle;

		this.loadDefaultTools();
		this.workinCopySlot.appendChild(this.historySlot);
		this.layoutSlot.appendChild(this.workinCopySlot);

		document.site.resize();
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$format) {
				var delta = newData.$properties = newData.$properties || {};
				var isCards = newData.$format == "cards";
				delta.$cardsByRowCount = delta.$cardsByRowCount || {};
				delta.$cardsByRowCount.$isHidden = !isCards;

				delta.$position = delta.$position || {};
				delta.$position.$isHidden = newData.$format != "grid";

				delta.$widths = delta.$widths || {};
				var $position = newData.$position || this.dataset.$position;
				if ($position == "no" && this.awItem.$item.$cards) {
					this.awItem.$item.$cards.$position = "inline";
				}
				delta.$widths.$isHidden = delta.$position.$isHidden || ($position == "no") || ($position == "inline");

			}
			if (newData.$cards && newData.$cards.$position) {
				var delta = newData.$properties = newData.$properties || {};
				delta.$widths = delta.$widths || {};
				delta.$widths.$isHidden = (newData.$cards.$position == "no") || (newData.$cards.$position == "inline");
			}
			if (newData.$graphMode) {
				var delta = newData.$properties = newData.$properties || {};
				delta.$graphPosition = delta.$graphPosition || {};
				delta.$graphPosition.$isHidden = newData.$graphMode != "both";
			}
		}
		Designer.prototype.applyChange.call(this, newData);
	},
	ensureCards: function($cards) {
		if (!$cards) {
			$cards = {
				$layout: {
					$items: []
				}
			};
			var $binds = Object.keys(this.awItem.$fieldProperties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				if (!this.awItem.$fieldProperties[$binds[ii]].$isExcluded) {
					$cards.$layout.$items.push({
						$bind: $binds[ii]
					});
				}
			}
		}
		return $cards;
	},
	onNotifyDataChange: function(field, value) {
		var metaData = {};
		var $bind = field.$item.$bind;
		if ($bind == "$position" || $bind == "$widths") {
			if ($bind == "$position") {
				if (value == "no") {
					if (this.awItem.$item.$cards) {
						metaData.$cards = false;
					}
				} else {
					metaData.$cards = this.ensureCards(this.awItem.$item.$cards);
					metaData.$cards.$position = value;
				}
			}
			if ($bind == "$widths") {
				metaData.$cards = this.ensureCards(this.awItem.$item.$cards);
				metaData.$cards.$widths = value;
			}
		} else {
			metaData[$bind] = value;
		}
		this.applyChange(metaData);
		this.historyTool.notifyUpdate();

		if (this.awArticle.isList && field.$item.$measure) {
			var $cube = this.awArticle.$item.$cube || {};
			$cube.$measures = $cube.$measures || {};
			($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {}).$style = value;
			this.awArticle.awAddin.applyFieldDesignMetaDataChange({
				$cube: $cube
			});
			var metaData = {};
			metaData[field.$item.$bind] = value;
			this.applyChange(metaData);
			this.historyTool.notifyUpdate();
			return false;
		}
		return true;
	},
	onWindowResize: function() {},
	dispose: function() {
		document.site.removeDomChild(this.layoutSlot);
		Designer.prototype.dispose.call(this);
	}
});