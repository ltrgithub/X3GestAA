"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;

function ListDesigner() {}

exports.ListDesigner = helpers.defineClass(ListDesigner, Designer, {
	loadBox: function(designedPage) {
		this.$prototype = {
			$properties: {
				$position: {
					$type: "application/x-choice",
					$title: this.localize.lw_cardPosition,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "no",
							$title: this.localize.lw_cardPositionNo
						}, {
							$value: "inline",
							$title: this.localize.lw_cardPositionInline
						}, {
							$value: "top",
							$title: this.localize.lw_cardPositionTop
						}, {
							$value: "left",
							$title: this.localize.lw_cardPositionLeft
						}, {
							$value: "right",
							$title: this.localize.lw_cardPositionRight
						}, {
							$value: "bottom",
							$title: this.localize.lw_cardPositionBottom
						}]
					}
				},
				$graphPosition: {
					$type: "application/x-choice",
					$isHidden: this.awArticle.$prototype.$cube ? false : true,
					$title: this.localize.lw_graphPosition,
					$value: {
						$type: "application/x-string",

						$enum: [{
							$value: "top",
							$title: this.localize.lw_graphPositionTop
						}, {
							$value: "left",
							$title: this.localize.lw_graphPositionLeft
						}, {
							$value: "right",
							$title: this.localize.lw_graphPositionRight
						}, {
							$value: "bottom",
							$title: this.localize.lw_graphPositionBottom
						}, {
							$value: "front",
							$title: this.localize.lw_graphPositionFront
						}, {
							$value: "behind",
							$title: this.localize.lw_graphPositionBehind
						}]
					}
				}
			},
			$graphPosition: "bottom"
		};
		this.$item = {
			$layout: {
				$items: []
			}
		};
		Designer.prototype.loadBox.call(this);
		var delta = {
			$format: this.awArticle.$item.$format || "grid"
		};
		if (this.awArticle.builder.$inlineCard) {
			delta.$position = "inline";
		}
		//this.awArticle.$item.$cards.$position;
		delta.$position = delta.$position || "no";

		this.applyChange(delta);
		this._creatGrapBox();
	},
	onMenuClick: function(menuItem) {
		var self = this;
		switch (menuItem.$item.$bind) {
			case "$excludeMe":
				this.endTargetPageUpdate(newItem, true);
				break;
			default:
				return Designer.prototype.onMenuClick.call(this, menuItem);
		}
		return false;
	},
	onClickPicker: function(picker) {
		if (picker.syraPickerType) {
			switch (picker.syraPickerType) {
				case "$colcount":
					this.awArticle.applyDesignMetaData({
						$cardsByRowCount: picker.$syraCoCount
					}, true);
					this.templatesTool.selectColChoice(this.sectionCards, this.awArticle, picker.$syraCoCount);
					this.historyTool.notifyUpdate();
					return false;

				case "$format":
					var metaData = {
						$format: picker.syraFormat
					};
					this.awArticle.applyDesignMetaData(metaData, true);
					this.historyTool.notifyUpdate();
					this.applyChange(metaData);
					return false;
			}
			return Designer.prototype.onClickPicker.call(this, picker);
		}
		return true;
	},
	drawBox: function() {
		this.layoutSlot = document.createElement("aside");
		this.layoutSlot.id = "s-aw-page";
		this.awArticle._core.parentNode.insertBefore(this.layoutSlot, this.awArticle._core);
		this.layoutSlot.style.display = "";
		this.$$item = this.$$body = $(this.layoutSlot);
		this.renderLayoutContent();

		this.awItem = this.awArticle;

		this.loadDefaultTools();
		this.loadTemplateTools();

		this.appendFormat();
		this.sectionGrid = {
			body: this.layoutSlot.appendChild(document.createElement("div"))
		};
		this.sectionGrid.body.style.display = "none";
		this.sectionGrid.body.className = "s-aw-list-cards-slot";
		this.loadNewItem(this.sectionGrid.body, {
			$bind: "$position",
			$isTopLabelAlignment: false,
			$isEditMode: true,
			$skin: "s-aw-field"
		});

		this.sectionCards = {
			body: this.layoutSlot.appendChild(document.createElement("div"))
		};
		this.sectionCards.body.style.display = "none";
		this.sectionCards.body.className = "s-aw-list-cards-slot";
		this.templatesTool.addColsCountLinks(this.sectionCards, this.awItem, this.awArticle.builder.$cardsByRowCount || 1, 6);

		this.sectionGraph = {
			body: this.layoutSlot.appendChild(document.createElement("div"))
		};
		this.sectionGraph.body.style.display = this.awArticle.$prototype.$cube ? "" : "none";
		this.sectionGraph.body.className = "s-aw-list-cards-slot";
		this.loadNewItem(this.sectionGraph.body, {
			$bind: "$graphPosition",
			$isTopLabelAlignment: false,
			$skin: "s-aw-field",
			$isEditMode: true,
			$format: "$combo"
		});

		this.workinCopySlot.appendChild(this.historySlot);
		this.layoutSlot.appendChild(this.workinCopySlot);

		document.site.resize();
	},
	appendFormat: function() {
		this.formats = {
			slot: document.createElement("div"),
			grid: document.createElement("a"),
			cards: document.createElement("a")
		};
		this.formats.grid.title = this.formats.grid.textContent = this.localize.lw_gridMode;
		this.formats.cards.title = this.formats.cards.textContent = this.localize.lw_cardMode;
		this.formats.grid.className = this.formats.cards.className = "s-aw-list-format";
		this.formats.slot.appendChild(this.formats.cards).setAttribute("data-s-picker", this.formats.cards.syraPickerType = "$format");
		this.formats.slot.appendChild(this.formats.grid).setAttribute("data-s-picker", this.formats.grid.syraPickerType = "$format");
		this.formats.cards.syraFormat = "cards";
		this.formats.grid.syraFormat = "grid";
		this.formats.slot.className = "s-aw-list-formats";
		this.layoutSlot.appendChild(this.formats.slot);
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
			if (newData.$format) {
				var delta = newData.$properties = newData.$properties || {};
				this.formats.grid.className = this.formats.cards.className = "s-aw-list-format";
				if (newData.$format == "cards") {
					this.sectionCards.body.style.display = "";
					this.sectionGrid.body.style.display = "none";
				} else {
					this.sectionCards.body.style.display = "none";
					this.sectionGrid.body.style.display = "";
				}
				this.formats[newData.$format].className += " s-selected";

				delta.$position = delta.$position || {};
				delta.$position.$isHidden = newData.$format != "grid";

				var $position = newData.$position || this.dataset.$position;
				if ($position == "no" && this.awItem.$item.$cards) {
					this.awItem.$item.$cards.$position = "inline";
				}

			}
		}
		Designer.prototype.applyChange.call(this, newData);
	},
	ensureCards: function($cards) {
		if (!$cards) {
			$cards = {
				$layout: {
					$items: []
				}
			};
			var $binds = Object.keys(this.awItem.$fields);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				if (!this.awItem.$fields[$binds[ii]].$isExcluded) {
					$cards.$layout.$items.push({
						$bind: $binds[ii]
					});
				}
			}
		}
		return $cards;
	},
	onNotifyDataChange: function(field, value) {
		var metaData = {};
		var $bind = field.$item.$bind;
		if ($bind == "$position") {
			if ($bind == "$position") {
				if (value == "no") {
					if (this.awItem.$item.$cards) {
						metaData.$cards = false;
					}
				} else {
					metaData.$cards = this.ensureCards(this.awItem.$item.$cards);
					metaData.$cards.$position = value;
				}
			}
		} else {
			metaData[$bind] = value;
		}
		this.awArticle.applyDesignMetaData(metaData, true);
		this.applyChange(metaData);
		this.historyTool.notifyUpdate();
		if (this.awArticle.isList && field.$item.$measure) {
			var $cube = this.awArticle.$item.$cube || {};
			$cube.$measures = $cube.$measures || {};
			($cube.$measures[field.$item.$measure] = $cube.$measures[field.$item.$measure] || {}).$style = value;
			this.awArticle.applyDesignMetaData({
				$cube: $cube
			}, true);
			var metaData = {};
			metaData[field.$item.$bind] = value;
			this.applyChange(metaData);
			this.historyTool.notifyUpdate();
			return false;
		}
		return true;
	},
	onWindowResize: function() {},
	_creatGrapBox: function() {
		//his.localize.aw_graph
		if (this.awArticle.chart && this.awArticle.chart.$authoringType == "cube$highCharts") {
			var $fieldCube = this.awArticle.$item.$cube || this.awArticle.$prototype.$cube;
			if ($fieldCube && $fieldCube.$measures) {
				var $items = [];
				var $itemCube = this.awArticle.$item.$cube || {};
				var $itemMeasures = $itemCube.$measures || {};
				var delta = {};
				var binds = Object.keys($fieldCube.$measures);
				for (var ii = 0, jj = binds.length; ii < jj; ii++) {
					var bind = binds[ii];
					var $measure = $fieldCube.$measures[bind];
					var $field = this.createChoices();
					$field.$title = $measure.$title ? this.awArticle.page.getLocalizeText($measure.$title) : "";
					var $toolBind = "$cube" + bind;
					this.$prototype.$properties[$toolBind] = $field;
					$items.push({
						$category: "field",
						$bind: $toolBind,
						$measure: bind,
						$icon: {
							$mode: "icon",
							$path: "graphics/s-graph-"
						},
						$choiceLayout: "3",
						$isEditMode: true,
						$skin: "s-aw-field"
					});
					delta[$toolBind] = ($itemMeasures[bind] ? $itemMeasures[bind].$style : null) || "area";
				}
				this.layoutContent.loadChildItem(null, {
					$layoutType: "stack",
					$items: $items
				});
				this.applyChange(delta);
			}
		}
	},
	createChoices: function() {
		var $enums = [];
		var $choices = ["area", "areaspline", "column", "line", "scatter", "spline", "pie"];
		for (var ii = 0, jj = $choices.length; ii < jj; ii++) {
			$enums.push({
				$value: $choices[ii],
				$title: this.localize[$choices[ii]] || $choices[ii]
			});
		}
		return {
			$type: "application/x-choice",
			$title: "",
			$value: {
				$type: "application/x-string",
				$enum: $enums
			}
		};
	},
	dispose: function() {
		this.sectionCards = null;
		document.site.removeDomChild(this.layoutSlot);
		Designer.prototype.dispose.call(this);
	}
});