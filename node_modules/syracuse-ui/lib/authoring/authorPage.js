"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var ItemPalette = require("./itemPalette").ItemPalette;
var TreeContent = require("./treeContent").TreeContent;
var DragDrop = require("./dragDrop").DragDrop;

function AuthorPage(){
}

exports.AuthorPage = helpers.defineClass(AuthorPage, RawPage, {
    notifyUpdate: function(isUpdated){
        this.isUpdated = isUpdated !== false;
        console.log("AuthorPage ", this.isUpdated);
        this.palette.notifySteps();
    },
    beginAuthoring: function(awPageSlot){
        this._initializePage();
        this.layoutSlot = awPageSlot;
        this.localize = locale.resources(module)();
        this.bindEvents();
        (this.targetPage = document.site.mainPage).authoringPage = this;
        this.targetOrigStatus = {};
        if (this.targetPage.menuBar) {
            this.targetOrigStatus.menuBarDisplay = this.targetPage.menuBar._slot.style.display || "";
            this.targetPage.menuBar._slot.style.display = "none";
        }
        this.paletteSlot = document.createElement("div");
        this.paletteSlot.className = "s-aw-palette-slot";
        this.targetPage._item.appendChild(this.paletteSlot);
        this.$sourceItem = helpers.object.clone(this.targetPage.$item, true);
        this.$defaultItem = helpers.object.clone(document.site.ensureDefaultArticle(this.targetPage.$prototype.$article, this.targetPage.$prototype), true);
        this.isUpdated = false;
        document.controller.loadWorkingCopy({
            menu: {
                $url: this.targetPage.$authorUrl
            },
            article: this,
            callback: function(){
                document.site.resize();
            }
        });
        document.site._eventListener.bindAuthoringEvent(true);
        this.treeContent = new TreeContent();
    },
    onMenuClick: function(menuItem){
        var self = this;
        switch (menuItem.$item.$bind) {
            case "$close":
                if (self.isUpdated) {
                    document.site.showMessage({
                        $title: self.localize.aw_updateMessageTitle,
                        $message: self.localize.aw_cancelMessageText,
                        $type: "question",
                        $buttons: "yesnocancel",
                        callback: function(response){
                            if (response.$id == "yes") {
                                self.menuItems.$save[0].click();
                            }
                            else {
                                if (response.$id == "no") {
                                    document.site.openAuthoringPage(false);
                                    document.controller.reloadMainPage();
                                }
                            }
                        }
                    });
                }
                else {
                    document.site.openAuthoringPage(false);
                }
                return false;
            default:
                if (menuItem.$sourceBind == "$aw_quit") {
                    document.site.showDiagnoses(null);
                    document.site.openAuthoringPage(false);
                    return false
                }
                break;
        }
        if (menuItem.page != this && menuItem.page != this.palette) {
            if (!menuItem.page.isAuthoringFriend && !menuItem.boxParent.isDiagnoseMenus) {
                return false;
            }
        }
        return true;
    },
    drawBox: function(){
        (this.$$item = $(this.layoutSlot)).empty().show();
        this._paletteBar = document.createElement("div");
        this._paletteBar.setAttribute("id", "s-aw-page-left");
        this.layoutSlot.appendChild(this._paletteBar);
        
        var actions = document.createElement("div");
        actions.setAttribute("id", "s-aw-page-right");
        var close = this.loadNewItem(actions, {
            $bind: "$close",
            $title: this.localize.aw_close,
            $category: "link",
            $icon: {
                $mode: "icon"
            },
            $skin: "s-aw-page-close"
        });
        close.setMenu({
            $title: this.localize.aw_close
        }, null);
        this.loadNewItem(actions, {
            $bind: "$save",
            $category: "link",
            $skin: "s-aw-page-save"
        });
        this.layoutSlot.appendChild(actions);
        (this.palette = new ItemPalette()).loadBox();
        
        document.site.resize();
        
        this.toggleItemAuthoring(this.targetPage, true);
        this.selectItem(this.targetPage, true);
    },
    selectItem: function(item, select, ensureSelect){
        if (select) {
            if (ensureSelect || item != this.awItem) {
                if (this.awItem) {
                    this._toggleItemCss(this.awItem, "s-aw-designed", false);
                }
                this.scrollToItem(this.awItem = item);
                this.palette.showSettingPanel(item.$authoringLevel);
                this._toggleItemCss(item, "s-aw-designed", true);
                document.site.resize();
            }
        }
        else {
            if (item) {
                this._toggleItemCss(item, "s-aw-designed", false);
            }
        }
    },
    toggleItemAuthoring: function(item, enable){
        var site = document.site;
        if (item.isSpaceBox) {
            if (enable) {
                if (!item.deleteLink) {
                    if (item.boxParent.$authoringLevel == "block") {
                        item.$authoringLevel = "field";
                    }
                    else {
                        var children = this.extractItemsFromLayout(item.boxParent.layoutContent);
                        if (children.length > 0) {
                            item.$authoringLevel = children[0].$authoringLevel;
                        }
                        else {
                            item.$authoringLevel = item.boxParent.$authoringLevel == "section" ? "block" : "section";
                        }
                    }
                    item.deleteLink = document.createElement("a");
                    item.deleteLink.className = "s-aw-layout-delete";
                    item.deleteLink.textContent = this.localize.aw_deleteColumn;
                    item._body.appendChild(item.deleteLink);
                }
            }
            else {
                site.removeDomChild(item.deleteLink);
                item.deleteLink = null;
                site.toggleClass(item.layoutSlot, "s-aw-designed", false);
                site.toggleClass(item.layoutSlot, "s-aw-over", false);
            }
            site.toggleClass(item.layoutSlot, "s-aw-item", enable);
        }
        var domItem = item.dataSlot;
        if (!domItem && item.$$item) {
            domItem = item.$$item[0];
        }
        if (domItem) {
            //no domitem for layout
            if (item._tabTitle) {
                if (enable) {
                    item._tabTitle.setAttribute("data-s-item", item.id);
                }
                else {
                    site.toggleClass(item._tabTitle, "s-aw-designed", false);
                    site.toggleClass(item._body, "s-aw-designed", false);
                    site.toggleClass(item._tabTitle, "s-aw-over", false);
                    site.toggleClass(item._body, "s-aw-over", false);
                    item._tabTitle.removeAttribute("data-s-item");
                }
                site.toggleClass(item._tabTitle, "s-aw-item", enable);
                site.toggleClass(item._body, "s-aw-item", enable);
                site.toggleClass(item._tabTitle, "s-aw-light", enable && this.$isLightMode);
                site.toggleClass(item._body, "s-aw-light", enable && this.$isLightMode);
            }
            if (enable) {
                domItem.setAttribute("data-s-item", item.id);
                item.layoutSlot.setAttribute("data-s-item", item.id);
                site.toggleClass(item.layoutSlot, "s-aw-on", true);
            }
            else {
                if (domItem) {
                    if (item._body) {
                        site.toggleClass(item._body, "s-aw-over", false);
                        site.toggleClass(item._body, "s-aw-designed", false);
                    }
                    if (item._header) {
                        site.toggleClass(item._header, "s-aw-over", false);
                        site.toggleClass(item._header, "s-aw-designed", false);
                    }
                    site.toggleClass(item.layoutSlot, "s-aw-on", false);
                    site.toggleClass(item.layoutSlot, "s-aw-designed", false);
                    site.toggleClass(item.layoutSlot, "s-aw-over", false);
                    site.toggleClass(domItem, "s-aw-designed", false);
                    site.toggleClass(domItem, "s-aw-over", false);
                    domItem.removeAttribute("data-s-item");
                    item.layoutSlot.removeAttribute("data-s-item");
                }
            }
            if (item.$authoringLevel == "field") {
                item.layoutSlot.style.display = (this.$isLightMode || item.$isHidden) ? "none" : "";
                // (item.$item.$inplace ? item.$$dataValue : item.$$item)[0].style.display = (this.$isLightMode || item.$isHidden) ? "none" : "";
            }
            if (item.isLayout) {
                if (enable) {
                    if (item.layoutParent) {
                        if (item.$layout.$layoutType == "row") {
                            site.toggleClass(item._item, "s-aw-item", true);
                        }
                    }
                }
                else {
                    site.toggleClass(domItem, "s-aw-item", false);
                }
            }
            else {
                if (item.layoutSlot) {
                    site.toggleClass(item.layoutSlot, "s-aw-item", enable);
                }
                site.toggleClass(domItem, "s-aw-item", enable);
                site.toggleClass(domItem, "s-aw-light", enable && this.$isLightMode);
            }
        }
        
        if (item.isLayout) {
            if (item.items) {
                /* if (enable && item.items.length == 0) {
                 item.ensureSpaceBox();
                 }*/
                for (var ii = 0, jj = item.items.length; ii < jj; ii++) {
                    this.toggleItemAuthoring(item.items[ii], enable);
                }
            }
        }
        else {
            if (item.layoutContent) {
                //items = item.layoutContent.items;
                this.toggleItemAuthoring(item.layoutContent, enable);
            }
        }
    },
    _toggleItemCss: function(item, css, show){
        if (item.$$item) {
            if (item._tabTitle) {
                document.site.toggleClass(item._tabTitle, css, show);
                document.site.toggleClass(item._body, css, show);
            }
            else {
                if (item.dataSlot) {
                    document.site.toggleClass(item.dataSlot, css, show); //page
                }
                else {
                    if (item.layoutSlot) {
                        document.site.toggleClass(item.layoutSlot, css, show);
                    }
                }
                if (item.isLayout) {
                    document.site.toggleClass(item._item, css, show);
                }
                if (item._header) {
                    document.site.toggleClass(item._header, css, show);
                }
                if (item._body) {
                    document.site.toggleClass(item._body, css, show);
                }
            }
        }
    },
    toggleOverItem: function(item, isOver){
        var css = "s-aw-over";
        this._toggleItemCss(item, css, isOver);
        if (isOver && this._overItem != item) {
            if (this._oveItems) {
                for (var ii = 0, jj = this._oveItems.length; ii < jj; ii++) {
                    this._toggleItemCss(this._oveItems[ii], css, false);
                }
            }
            this._oveItems = [];
            this._overItem = item;
            while (item) {
                this._toggleItemCss(item, css, true);
                this._oveItems.push(item);
                item = item.boxParent;
            }
        }
    },
    applyChange: function(newData){
        if (newData && newData.$actions && newData.$actions.$save) {
            if (newData.$actions.$save.$isDisabled && newData.$actions.$save.$isRequested === false) {
                if (newData.$actions.$save.$diagnoses) {
                    for (var ii = 0, jj = newData.$actions.$save.$diagnoses.length; ii < jj; ii++) {
                        if (newData.$actions.$save.$diagnoses[ii].severity !== "success") {
                            return false;
                        }
                    }
                }
                delete newData.$actions.$save;
                this.notifyUpdate(false);
                document.site.showDiagnoses({
                    $diagnoses: [{
                        message: this.localize.aw_saveMessageText,
                        severity: "success"
                    }],
                    $links: {
                        $aw_quit: {
                            $title: this.localize.aw_quit
                        }
                    }
                });
            }
        }
        RawPage.prototype.applyChange.call(this, newData);
    },
    notifyActionChange: function(target, value, notifyServer){
        this.ensureSendBag().content = {
            $article: this.targetPage.$item
        };
        /*if (!this.dataset.application) {
         var httpQuery = document.controller.parseUrl(this.targetPage.$prototype.$representationUrl);
         data.application = httpQuery.$urlParts.endpointParts.application;
         data.contract = httpQuery.$urlParts.endpointParts.contract;
         data.representation = httpQuery.$urlParts.representationRoot;
         data.facet = httpQuery.$urlParts.$facet;
         }*/
        RawPage.prototype.notifyActionChange.call(this, target, value, notifyServer);
    },
    notifyDataChange: function(field, value){
        this.ensureSendBag().content = {
            $article: this.targetPage.$item
        };
        RawPage.prototype.notifyDataChange.call(this, field, value);
    },
    addNewSection: function(layoutParent, dropItem, index){
        var newSection = layoutParent.loadChildItem(dropItem, dropItem ? null : {
            $category: "section",
            $applyDefaultTitle: true
        }, index);
        if (!newSection.layoutContent) {
            newSection.openBox(true);
        }
        return newSection;
    },
    addNewItem: function(targetItem, $newAuthoringLevel, $bind, dropItem){
        var newChild;
        var targetBoxParent = targetItem.boxParent;
        var targetItemIndex = targetItem.layoutParent ? targetItem.layoutParent.getItemIndex(targetItem.$item) : undefined;
        var sourceDropLayout, sourceDropIndex;
        if (dropItem) {
            sourceDropIndex = (sourceDropLayout = dropItem.layoutParent).getItemIndex(dropItem.$item);
        }
        switch (targetItem.$authoringLevel) {
            case "article":
                if ($newAuthoringLevel == "field") {
                    newChild = this.addNewItem(targetItem, "section");
                    newChild = this.addNewItem(newChild, $newAuthoringLevel, $bind, dropItem);
                }
                else {
                    var newTopChild = newChild = this.addNewSection(targetItem.layoutContent, dropItem, 0);
                    if ($newAuthoringLevel == "block" && !dropItem) {
                        newChild = this.addNewItem(newTopChild, $newAuthoringLevel);
                    }
                    var children = this.extractItemsFromLayout(targetItem.layoutContent, null, "field");
                    if (children.length > 0 && (children[0].$authoringLevel == "field")) {
                        newChild.layoutContent.grabItems(targetItem.layoutContent, targetItemIndex, newTopChild);
                    }
                }
                this.selectItem(newChild, true);
                break;
            case "section":
                switch ($newAuthoringLevel) {
                    case "field":
                        if (dropItem) {
                            newChild = this.addNewSection(targetItem.layoutParent, null, targetItemIndex);
                            newChild = newChild.layoutContent.loadChildItem(dropItem);
                        }
                        else {
                            var children = this.extractItemsFromLayout(targetItem.layoutContent);
                            if (children.length == 0) {
                                newChild = targetItem.layoutContent.loadChildItem(null, {
                                    $bind: $bind
                                });
                            }
                            else {
                                if (children[0].$authoringLevel == "field") {
                                    newChild = children[0].layoutParent.loadChildItem(null, {
                                        $bind: $bind
                                    }, children[0].layoutParent.getItemIndex(children[0].$item));
                                }
                            }
                        }
                        break;
                    case "section":
                        newChild = this.addNewSection(targetItem.layoutParent, dropItem, targetItemIndex);
                        break;
                    case "block":
                        if (dropItem) {
                            newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
                        }
                        else {
                            newChild = this.addNewSection(targetItem.layoutContent, null, 0);
                            var children = this.extractItemsFromLayout(targetItem.layoutContent, null, "field");
                            if (children.length > 0 && (children[0].$authoringLevel == "field")) {
                                newChild.layoutContent.grabItems(targetItem.layoutContent, targetItemIndex, newChild);
                            }
                        }
                        break;
                }
                this.selectItem(newChild, true);
                break;
            case "block":
                switch ($newAuthoringLevel) {
                    case "field":
                        if (dropItem) {
                            newChild = this.addNewSection(targetItem.layoutParent, null, targetItemIndex);
                            newChild = newChild.layoutContent.loadChildItem(dropItem);
                        }
                        else {
                            newChild = targetItem.layoutContent.loadChildItem(null, {
                                $bind: $bind
                            });
                        }
                        break;
                    case "section":
                        if (dropItem) {
                            var children = this.extractItemsFromLayout(dropItem.layoutContent);
                            if (children.length > 0 && (children[0].$authoringLevel == "block")) {
                                newChild = targetItem.layoutParent.grabItems(dropItem.layoutContent, targetItemIndex);
                            }
                            else {
                                newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
                            }
                        }
                        else {
                            newChild = this.addNewItem(targetItem.boxParent, $newAuthoringLevel);
                        }
                        break;
                    case "block":
                        newChild = this.addNewSection(targetItem.layoutParent, dropItem, targetItemIndex);
                        break;
                }
                this.selectItem(newChild, true);
                break
            case "field":
                var sectionParent = targetBoxParent;
                if (targetBoxParent.$authoringLevel == "block") {
                    sectionParent = targetBoxParent.boxParent; //else $authoringLevel== section or article = no need of boxparent
                }
                switch ($newAuthoringLevel) {
                    case "section":
                    case "block":
                        if (dropItem) {
                            //dragged section
                            var children = this.extractItemsFromLayout(dropItem.layoutContent);
                            if (children.length > 0 && children[0].$authoringLevel == "field") {
                                for (var ii = 0, jj = children.length; ii < jj; ii++) {
                                    targetItem.layoutParent.loadChildItem(children[ii], null, targetItemIndex);
                                }
                                newChild = children[0]
                            }
                        }
                        else {
                            var layoutParent, newTopChild;
                            if ($newAuthoringLevel == "block") {
                                layoutParent = sectionParent.layoutContent;
                                if (targetItem.boxParent.$authoringLevel == "block") {
                                    targetItemIndex = targetItem.boxParent.layoutParent.getItemIndex(targetItem.boxParent.$item);
                                }
                            }
                            else {
                                if (sectionParent.layoutParent) {
                                    layoutParent = sectionParent.layoutParent;
                                    targetItemIndex = layoutParent.getItemIndex(sectionParent.$item);
                                }
                                else {
                                    layoutParent = sectionParent.layoutContent;
                                    targetItemIndex = undefined;
                                }
                            }
                            newTopChild = newChild = layoutParent.loadChildItem(null, {
                                $category: "section",
                                $applyDefaultTitle: true
                            }, targetItemIndex);
                            if (newTopChild.$authoringLevel == "section" && $newAuthoringLevel == "block") {
                                newChild = this.addNewSection(newTopChild.layoutContent);
                            }
                            if (targetItem.boxParent == newTopChild.boxParent) {
                                var first = 0;
                                var sourceItems = targetItem.boxParent.layoutContent.items;
                                for (var ii = 0, jj = sourceItems.length; ii < jj; ii++) {
                                    if (sourceItems[first] == newTopChild) {
                                        first = 1;
                                    }
                                    else {
                                        newChild.layoutContent.loadChildItem(sourceItems[first]);
                                    }
                                }
                            }
                        }
                        break;
                    case "field":
                        newChild = targetItem.layoutParent.loadChildItem(dropItem, dropItem ? null : {
                            $bind: $bind
                        }, targetItemIndex);
                        break;
                        
                }
                this.selectItem(newChild, true);
                break;
        }
        if (targetItem && targetItem.isSpaceBox) {
            targetItem.layoutParent.removeItem(targetItem, true, false);
        }
        if (sourceDropLayout && sourceDropLayout.$layout && sourceDropLayout.$layout.$layoutType == "row") {
            sourceDropLayout.ensureSpaceBox(true, sourceDropIndex);
            sourceDropLayout.ensureColWidths();
        }
        if (targetItem.layoutParent) {
            targetItem.layoutParent.ensureColWidths();
        }
        return this.awItem;
    },
    _notifyChildFields: function(parentItem, value, binding){
        var items = parentItem.layoutContent ? parentItem.layoutContent.items : parentItem.items;
        if (items) {
            for (var ii = 0, jj = items.length; ii < jj; ii++) {
                var childItem = items[ii];
                if (childItem.$authoringLevel == "field") {
                    var metaData = {}
                    metaData[binding] = value;
                    childItem.applyDesignMetaData(metaData, true);
                }
                else {
                    this._notifyChildFields(childItem, value, binding);
                }
            }
        }
    },
    _notifyChildBox: function(parentItem, metaData){
        var items = parentItem.layoutContent ? parentItem.layoutContent.items : parentItem.items;
        parentItem.applyDesignMetaData(metaData);
        if (parentItem.layoutContent) {
            for (var ii = 0, jj = items.length; ii < jj; ii++) {
                var childItem = items[ii];
                if (childItem.$authoringLevel != "field") {
                    this._notifyChildBox(childItem, metaData);
                }
            }
        }
    },
    _findTargetItemEvent: function(target, findLayout){
        var item;
        if (findLayout || target.getAttribute("data-s-layout")) {
            item = document.controller.findLayout($(target));
        }
        else {
            item = document.controller.findItem($(target));
        }
        return item;
    },
    bindEvents: function(){
        var self = this;
        document.site.$$layoutSlot.delegate(".s-aw-item", "click.author", function(event){
            self.onClickItem(self._findTargetItemEvent(this), this);
            return false;
        }).delegate(".s-aw-item", "mousedown.author", function(event){
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.stop(event);
                delete document.site.DDAuthoring;
            }
            else {
                var item = document.controller.findItem($(this));
                if (item) {
                    if (item != self.targetPage && item.page == self.targetPage) {
                        document.site.requestedDDAuthoringItem = item;
                        return false;
                    }
                }
            }
            // return false;
        }).delegate(".s-aw-item", "mousemove.author", function(event){
            var item = self._findTargetItemEvent(this);
            if (item) {
                if (item != self.targetPage) {
                    if (document.site.requestedDDAuthoringItem) {
                        (document.site.DDAuthoring = new DragDrop()).start(self.targetPage.$$body);
                    }
                    else {
                        if (document.site.DDAuthoring) {
                            if (item.layoutParent) {
                                document.site.DDAuthoring.moveDragImage(event, item);
                            }
                        }
                    }
                }
                self.toggleOverItem(item, true);
            }
            return false;
        }).delegate(".s-aw-item", "mouseenter.author mouseleave.author", function(event){
            if (document.site.DDAuthoring) {
                var $$item = $(this);
                var layout = self._findTargetItemEvent(this, true);
                if (layout && layout.$layout.$layoutType == "tabs") {
                    if (event.type == "mouseenter") {
                        var tabItem = self._findTargetItemEvent(this);
                        self._ddTabEnter = setTimeout(function(){
                            if (tabItem) {
                                if (!tabItem.$item.$opened) {
                                    tabItem.openBox(true);
                                }
                            }
                        }, 500);
                    }
                    else {
                        if (self._ddTabEnter) {
                            clearTimeout(self._ddTabEnter);
                            delete self._ddTabEnter;
                        }
                    }
                }
            }
            // return false;
        }).delegate(".s-aw-layout-delete", "click.author", function(){
            if (!document.site.DDAuthoring) {
                delete document.site.requestedDDAuthoringItem;
                var spaceBox = document.controller.findItem($(this));
                setTimeout(function(){
                    self.deleteLayout(spaceBox.layoutParent, spaceBox);
                    self.notifyUpdate(true);
                }, 10);
            }
            return false;
        });
    },
    onClickItem: function(item, target){
        if (!document.controller.findArticle($(target)).isAuthoringDisabled) {
            // if (target.className.indexOf("s-aw-item") >= 0) {
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.stop(event);
                delete document.site.DDAuthoring;
            }
            else {
                delete document.site.requestedDDAuthoringItem;
                item = item || document.controller.findItem($(target));
                if (item && (item != this.palette && item.page != this.palette)) {
                    this.selectItem(item, true);
                }
            } //  return false;
        }
        //}
        return true;
    },
    _extractFields: function(layout, fields, onlyDirectChild){
        fields = fields || [];
        if (layout) {
            for (var ii = layout.items.length - 1; ii >= 0; ii--) {
                var item = layout.items[ii];
                if (item != layout.boxParent) {
                    if (item.$authoringLevel === "field") {
                        fields.push(item);
                    }
                    else {
                        if (onlyDirectChild && !item.isLayout) {
                            continue;
                        }
                        fields = this._extractFields(item.isLayout ? item : item.layoutContent, fields);
                    }
                }
            }
        }
        return fields;
    },
    extractItemsFromLayout: function(layout, children, $authoringLevel){
        if (!children) {
            children = [];
        }
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            var item = layout.items[ii];
            if (item != layout.boxParent) {
                if (item.isLayout) {
                    children = this.extractItemsFromLayout(item, children, $authoringLevel);
                }
                else {
                    if (!$authoringLevel || ($authoringLevel == item.$authoringLevel)) {
                        children.push(item);
                    }
                }
            }
        }
        return children;
    },
    extractItemSettings: function($layout, $items){
        if (!$items) {
            $items = [];
        }
        for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
            var $item = $layout.$items[ii];
            if ($item.$items && !$item.$bind && !$item.$category) {
                if (!$item.$layoutType) {
                    $item.$layoutType = "stack";
                }
                this.extractItemSettings($item, $items);
            }
            else {
                $items.push($item);
            }
        }
        return $items;
    },
    deleteLayout: function(layout, spaceBox){
        layout.isSpaceBoxDisabled = true;
        if (spaceBox) {
            document.site.removeDomChild(spaceBox.layoutSlot);
            layout.removeItem(spaceBox, false, false);
        }
        if (layout.items.length > 0 && layout.$layout.$layoutType == "row") {
            if (layout.items.length > 1) {
                layout.colWidths = (layout.$layout.$layoutSubType = layout.items.length == 2 ? "50-50" : "33-33-33").split("-");
                layout.ensureColWidths();
            }
            else {
                if (layout.items.length == 1 && layout.items[0].isLayout) {
                    if (layout.layoutParent) {
                        layout.layoutParent.appendChildItem(layout.items[0]);
                        layout.layoutParent.removeItem(layout);
                    }
                    else {
                        var source = layout.items[0];
                        source.isSpaceBoxDisabled = true;
                        //move layout
                        var first = 0;
                        for (var ii = 0, jj = source.items.length; ii < jj; ii++) {
                            if (source.items[0] == layout) {
                                first = 1;
                            }
                            else {
                                layout.loadChildItem(source.items[first]);
                            }
                        }
                        
                        source.isSpaceBoxDisabled = false;
                        var $sourceLayout = source.$layout;
                        layout.removeItem(source, true);
                        this.newConvert(layout, $sourceLayout);
                    }
                }
                if (layout.items.length == 0) {
                }
            }
        }
        else {
            if (layout.layoutParent) {
                layout.layoutParent.removeItem(layout, true);
            }
            else {
                var layoutParent = layout.boxParent.layoutParent;
                if (layoutParent.items.length == 1) {
                    this.deleteLayout(layoutParent);
                }
                else {
                    layoutParent.isSpaceBoxDisabled = true;
                    layoutParent.removeItem(layout.boxParent, true, false);
                    layoutParent.isSpaceBoxDisabled = false;
                }
                if (layoutParent.$layout.$layoutType == "tabs") {
                    layoutParent._ensureOneTabOpened();
                }
            }
        }
        layout.isSpaceBoxDisabled = false;
    },
    newConvert: function(layout, $newLayout){
        var $oldLayoutType = layout.$layout.$layoutType;
        var oldColWidths = layout.colWidths;
        var isTabLayout = $newLayout.$layoutType == "tabs";
        if (layout._tabs && !isTabLayout) {
            document.site.removeDomChild(layout._tabs);
            delete layout._tabs;
        }
        //replace layout properties by new ones
        delete layout.$layout.$fitToContent;
        delete layout.$layout.$layoutSubType;
        if ($newLayout.$fitToContent != undefined) {
            layout.$layout.$fitToContent = $newLayout.$fitToContent;
        }
        if ($newLayout.$layoutSubType != undefined) {
            layout.$layout.$layoutSubType = $newLayout.$layoutSubType;
        }
        layout.$layout.$layoutType = $newLayout.$layoutType;
        layout.ensureLayoutMode();
        
        if (layout.$layout.$layoutType == "row") {
            if ($oldLayoutType == "row") {
                if (oldColWidths.length > layout.colWidths.length) {
                    //A copier dans la dernierecolonne
                    var targetCell = layout.items[layout.colWidths.length - 1]
                    var targetLayout = targetCell;
                    
                    while (layout.items.length > layout.colWidths.length) {
                        var lastCell = layout.items[layout.items.length - 1];
                        var lastItems;
                        if (lastCell.items) {
                            lastItems = lastCell.items;
                        }
                        else {
                            if (!lastCell.isSpaceBox) {
                                lastItems = [lastCell];
                            }
                        }
                        if (lastItems) {
                            for (var ii = lastItems.length - 1; ii >= 0; ii--) {
                                if (!targetCell.items) {
                                    if (targetCell.isSpaceBox) {
                                        layout.isSpaceBoxDisabled = true;
                                        layout.removeItem(targetCell, true, false);
                                        layout.isSpaceBoxDisabled = false;
                                        continue;
                                    }
                                    else {
                                        targetLayout = layout.createChildItem({
                                            $layoutType: "stack",
                                            $items: []
                                        }, null, layout.getItemIndex(targetCell.$item));
                                        targetLayout.loadChildItem(targetCell);
                                        targetCell = targetLayout;
                                    }
                                }
                                else {
                                    if (targetCell.items.length == 1) {
                                        targetLayout = layout.createChildItem({
                                            $layoutType: "stack",
                                            $items: []
                                        });
                                    }
                                }
                                targetLayout.loadChildItem(lastItems[0]);
                            }
                        }
                        else {
                            layout.isSpaceBoxDisabled = true;
                            layout.removeItem(lastCell, true, false);
                            layout.isSpaceBoxDisabled = false;
                        }
                    }
                }
            }
            else {
                if (layout.items.length > 1) {
                    var stackCol = layout.createChildItem({
                        $layoutType: "stack",
                        $items: []
                    });
                    while (layout.items.length > 1) {
                        stackCol.loadChildItem(layout.items[0]);
                    }
                }
            }
        }
        else {
            if ($oldLayoutType == "row") {
                var children = this.extractItemsFromLayout(layout);
                layout.isSpaceBoxDisabled = true;
                for (var ii = 0, jj = children.length; ii < jj; ii++) {
                    if (children[ii].isSpaceBox) {
                        layout.removeItem(children[ii], true, false);
                    }
                }
                layout.isSpaceBoxDisabled = false;
            }
        }
        if (isTabLayout) {
            var children = this.extractItemsFromLayout(layout);
            layout.isSpaceBoxDisabled = true;
            for (var ii = 0, jj = children.length; ii < jj; ii++) {
                if (!children[ii].isSpaceBox) {
                    layout.loadChildItem(children[ii]);
                }
            }
            var toClean = [];
            for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                var item = layout.items[ii];
                if (item.isSpaceBox || (item.$authoringLevel != "section" && item.$authoringLevel != "block")) {
                    toClean.push(item);
                }
            }
            for (var ii = 0, jj = toClean.length; ii < jj; ii++) {
                layout.removeItem(toClean[ii]);
            }
            layout.isSpaceBoxDisabled = false;
        }
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            if ($oldLayoutType == "row" && layout.$layout.$layoutType != $oldLayoutType) {
                layout.items[ii].layoutSlot.style.width = "";
            }
            var item = layout.items[ii];
            if (item.isLayout) {
                item.ensureLayoutMode();
            }
            else {
                item.isTabLayout = isTabLayout;
                item.ensureLayoutMode();
                if (isTabLayout && item.$item.$opened) {
                    layout.tabOpened = item;
                }
                if (item.openBox && !item._tabTitle && !item.loaded && item.$item.$opened !== false) {
                    item.openBox(true);
                }
            }
        }
        layout.ensureColWidths();
        if (layout.$layout.$layoutType == "tabs") {
            layout._ensureOneTabOpened();
        }
    },
    dispose: function(){
        document.site._eventListener.bindAuthoringEvent(false);
        if (this.targetPage) {
            this.toggleItemAuthoring(this.targetPage, false);
            if (this.targetPage.menuBar) {
                this.targetPage.menuBar._slot.style.display = this.targetOrigStatus.menuBarDisplay;
            }
            delete this.targetPage.authoringPage;
            this.targetPage = null;
        }
        if (this.paletteSlot) {
            document.site.removeDomChild(this.paletteSlot);
            this.paletteSlot = null;
        }
        if (this.treeContent) {
            this.treeContent.toggle(false, true);
        }
        this.treeContent = this._overItem = this._oveItems = this.targetPage = this.awItem = null;
        if (document.site.$$layoutSlot) {
            document.site.$$layoutSlot.undelegate(".author");
        }
        this._ddTabEnter = this.page = this.paletteSlot = this._paletteBar = null;
        RawPage.prototype.dispose.call(this);
    }
});
