"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;


var ArticleDesigner = require("syracuse-ui/lib/authoring/articleDesigner").ArticleDesigner;

function AuthorPage() {}

exports.AuthorPage = helpers.defineClass(AuthorPage, RawPage, {
	beginAuthoring: function(awPageSlot) {
		this.localize = document.site.localize;
		this._initializePage();
		this.layoutSlot = awPageSlot;
		this.localize = locale.resources(module)();
		if (document.site.mainPage.isFusionPage) {
			this.designedPage = document.site.fusionGateway.activatedBook.selectedSheet;
		} else {
			this.designedPage = document.site.getTopDialogPage();
			if (this.designedPage) {
				this.designedPage = this.designedPage._content;
			}
		}
		this.diagnosePage = this.designedPage = this.designedPage || document.site.mainPage;
		this.designedPage.clearUnknowFields();
		this.showTargetPageDiagnoses({
			$diagnoses: null
		});
		this.designedPage.isDesigned = true;
		if (this.designedPage.$prototype.$article) {
			this.designedPage.$prototype.$article = helpers.object.clone(this.designedPage.$prototype.$article, true);
		}
		document.controller.loadWorkingCopy({
			menu: {
				$url: this.designedPage.$authorUrl
			},
			article: this,
			callback: function() {
				document.site.resize();
			}
		});

	},
	showTargetPageDiagnoses: function(message, options) {
		this.designedPage.showDiagnoses(message, options);
		if (document.site.mobileGateway) {
			document.site.mobileGateway.onShowTargetPageDiagnoses(message, options);
		}
	},
	onBeforeMainPageChange: function(continueChanging) {
		var self = this;
		if (self.designedPage.designer.tools.history.isUpdated) {
			document.site.showMessage({
				$title: self.localize.aw_updateMessageTitle,
				$message: self.localize.aw_cancelMessageText,
				$type: "question",
				$buttons: "yesnocancel",
				callback: function(response) {
					if (response.$id == "yes") {
						self.clickMenu("$save");
						setTimeout(function() {
							document.site.openAuthoringPage(false);
							continueChanging();
						}, 300);
					} else {
						if (response.$id == "no") {
							document.site.openAuthoringPage(false);
							continueChanging();
						}
					}
				}
			});
			return false;
		}
		document.site.openAuthoringPage(false);
		return true;
	},
	onMenuClick: function(menuItem) {
		var self = this;
		switch (menuItem.$item.$bind) {
			case "$delete":
				if (menuItem.page != self.designedPage) {
					if (self.designedPage.pageViewSelector) {
						var selectedView = self.designedPage.pageViewSelector.getSelected();
						document.site.showMessage({
							$title: self.localize.aw_deleteMessageTitle,
							$message: self.localize.aw_deleteMessageText.replace("{0}", "'" + selectedView.$title + "'"),
							$type: "question",
							$buttons: "yesno",
							callback: function(response) {
								if (response.$id == "yes") {
									document.controller.executeMenu(menuItem);
								}
							}
						});
					}
				}
				return false;
			case "$close":
				if (self.designedPage.designer.tools.history.isUpdated) {
					document.site.showMessage({
						$title: self.localize.aw_updateMessageTitle,
						$message: self.localize.aw_cancelMessageText,
						$type: "question",
						$buttons: "yesnocancel",
						callback: function(response) {
							if (response.$id == "yes") {
								self.clickMenu("$save");
							} else {
								if (response.$id == "no") {
									var $item = helpers.object.clone(self.designedPage.designer.tools.history.$sourceItem, true);
									self.designedPage.reloadLayout($item);
									self.designedPage.designer.applyChangeToMobile($item);
									document.site.openAuthoringPage(false);
								}
							}
						}
					});
				} else {
					document.site.openAuthoringPage(false);
				}
				return false;
			default:
				if (menuItem.$sourceBind == "$aw_quit") {
					self.showdesignedPageDiagnoses(self.designedPage, null);
					document.site.openAuthoringPage(false);
					return false;
				} else {
					if (menuItem.page != self && menuItem.page != self.designedPage.designer) {
						if (!menuItem.page.isAuthoringFriend && !menuItem.boxParent.isDiagnoseMenus) {
							return !menuItem.page.vignetteField && !menuItem.page.isDesigned;
						}
					}
					return true;
				}
		}
	},
	onClickPicker: function(target) {
		var $bind = target.getAttribute("data-s-picker");
		switch ($bind) {
			case "$authorHelp":
				return true;
			default:
				if (this.designedPage.designer.tools.history.onClickPicker($bind) ||
					this.designedPage.designer.tools.views.onClickPicker($bind)) {
					return false;
				}
				break;
		}
		return true;
	},
	drawBox: function() {
		document.site.emptyDom(this.layoutSlot);
		(this.$$item = $(this.layoutSlot)).show();
		this.$skin = "s-authorpage";
		this.toolsSlots = {};
		this.toolsSlots.properties = document.createElement("div");
		this.toolsSlots.properties.className = "s-aw-properties-slot";
		this.toolsSlots.properties.style.width = "200px";
		this.$prototype.$properties = this.$prototype.$properties || {};

		var topSlot = document.createElement("div");
		topSlot.id = "s-aw-page-left";
		this.toolsSlots.history = document.createElement("div");
		this.toolsSlots.history.id = "s-aw-top-left-links";
		this.helpLink = document.createElement("a");
		this.helpLink.title = this.localize.aw_help;
		this.helpLink.setAttribute("data-s-picker", "$authorHelp");
		this.helpLink.className = "s-aw-top-left-link-icon";
		this.helpLink.style.backgroundImage = "url('/syracuse-ui/themes/desktop/sage/images/authoring/s-aw-help.png')";
		this.toolsSlots.history.appendChild(this.helpLink);
		topSlot.appendChild(this.toolsSlots.history);
		this.layoutSlot.appendChild(topSlot);

		this.toolsSlots.views = this.layoutSlot.appendChild(document.createElement("div"));
		this.toolsSlots.views.id = "s-aw-page-views";
		var topRight = document.createElement("div");
		topRight.id = "s-aw-page-right";
		this.loadNewItem(topRight, {
			$category: "menus",
			$skin: "s-aw-top-actions",
			$itemIcon: {
				$mode: "icon",
				$path: "authoring/s-aw-"
			},
			$layout: {
				$layoutType: "row",
				$widths: "25,25,25,25",
				$items: [{
					$bind: "$save",
					$css: "s-aw-menus-save"
				}, {
					$bind: "saveAs",
					$css: "s-aw-menus-saveas"
				}, {
					$bind: "$delete",
					$css: "s-aw-menus-delete"
				}, {
					$css: "s-aw-page-close",
					$bind: "$close"
				}]
			}
		});

		this.menuItems.$close[0].setMenu({
			$title: this.localize.aw_close
		}, null);
		this.designedPage.designer = new ArticleDesigner();
		this.designedPage.designer.loadBox(this, this.designedPage, this.toolsSlots);
		this.layoutSlot.appendChild(topRight);
		document.site.resize();
		this.designedPage.designer.selectItem(this.designedPage, true);
	},
	applyChange: function(newData) {
		if (newData && newData.$actions) {
			if (newData.$actions.saveAs) {
				if (newData.$actions.saveAs && newData.$actions.saveAs.$isDisabled && newData.$actions.saveAs.$isRequested === false) {
					if (!newData.$actions.saveAs.$confirm) {
						if (newData.$authorUrl) {
							this.designedPage.$authorUrl = newData.$authorUrl;
						}
						if (newData.$actions.saveAs.$diagnoses) {
							for (var ii = 0, jj = newData.$actions.saveAs.$diagnoses.length; ii < jj; ii++) {
								var $diagnose = newData.$actions.saveAs.$diagnoses[ii];
								if (($diagnose.severity || $diagnose.$severity) !== "success") {
									return false;
								}
							}
						}
						delete newData.$actions.saveAs;
						this.designedPage.designer.tools.history.notifyUpdate(false);
						this.showTargetPageDiagnoses({
							$diagnoses: [{
								$message: this.localize.aw_saveMessageText,
								$severity: "success"
							}],
							$links: {
								$aw_quit: {
									$title: this.localize.aw_quit
								}
							}
						});
					}
				}
			}
			if (newData.$actions.$save) {
				if (newData.$actions.$save.$isDisabled && newData.$actions.$save.$isRequested === false) {
					if (!newData.$actions.$save.$confirm) {
						if (newData.$authorUrl) {
							this.designedPage.$authorUrl = newData.$authorUrl;
						}
						if (newData.$actions.$save.$diagnoses) {
							for (var ii = 0, jj = newData.$actions.$save.$diagnoses.length; ii < jj; ii++) {
								var $diagnose = newData.$actions.$save.$diagnoses[ii];
								if (($diagnose.severity || $diagnose.$severity) !== "success") {
									return false;
								}
							}
						}
						newData.$actions.$save.$isDisabled = false;
						newData.$actions.$save.$isRequested = true;
						this.designedPage.designer.tools.history.notifyUpdate(false);

						this.showTargetPageDiagnoses({
							$diagnoses: [{
								$message: this.localize.aw_saveMessageText,
								$severity: "success"
							}],
							$links: {
								$aw_quit: {
									$title: this.localize.aw_quit
								}
							}
						});
					}
				}
			}
			if (newData.$actions.$delete) {
				if (newData.$actions.$delete.$isDisabled && newData.$actions.$delete.$isRequested === false) {
					var selectedView = this.designedPage.pageViewSelector.getSelected();
					if (newData.$authorUrl) {
						this.designedPage.$authorUrl = newData.$authorUrl;
					}
					if (newData.$actions.$delete.$diagnoses) {
						for (var ii = 0, jj = newData.$actions.$delete.$diagnoses.length; ii < jj; ii++) {
							var $diagnose = newData.$actions.$delete.$diagnoses[ii];
							if (($diagnose.severity || $diagnose.$severity) !== "success") {
								return false;
							}
						}
					}
					var $diagnose = {
						$message: this.localize.aw_isDeletedMessageText.replace("{0}", "'" + selectedView.$title + "'"),
						$severity: "success"
					};
					document.site.openAuthoringPage(false);
					this.designedPage.pageViewSelector.onViewDeleted(selectedView);
					this.showTargetPageDiagnoses({
						$diagnoses: [$diagnose]
					});
				}
				return false;
			}
		}
		RawPage.prototype.applyChange.call(this, newData);
	},
	temporalySave: function($article) {
		this.ensureSendBag().content = {
			$article: $article || this.designedPage.$item
		};
	},
	notifyActionChange: function(target, value, notifyServer) {
		if (value && value.$save || value.saveAs) {
			this.designedPage.garbageFreeItems();
		}
		var $article = helpers.object.clone(this.designedPage.$item, true);
		delete $article.$menus;
		delete $article.$isModel;
		// crnit: we should test prototype's generator version, not $article's. If there is not authoring yet
		// the article's generator version would be absent but the new authoring must be stored converted
		// Reason: if there is no authoring the $article is the one generated by X3 and is in phase with the prototype
		// so there is no need to convert. But as soon as we have it stored, the authoring have to be converted as the
		// prototype may change
		// if ($article.$generatorVersion) {
		if (this.designedPage.$prototype.$generatorVersion) {
			var $prototype = helpers.object.clone(this.designedPage.$prototype, true);
			document.site._cvgPageConverterMakePersistent($prototype, $article);
			$article.$generatorVersion = 1;
		}
		this.temporalySave($article);
		RawPage.prototype.notifyActionChange.call(this, target, value, notifyServer);
	},
	notifyDataChange: function(field, value) {
		this.temporalySave();
		RawPage.prototype.notifyDataChange.call(this, field, value);
	},
	authorizeEvent: function(item) {
		return (item.page && (item.page.$dialogMode || (item.page == this) || item.page.isAuthoringEventEnabled));
	},
	dispose: function() {
		if (this.designedPage && this.designedPage.designer) {
			this.designedPage.designer.dispose();
		}
		if (this.toolsSlots && this.toolsSlots.properties) {
			document.site.removeDomChild(this.toolsSlots.properties);
		}
		this.page = this.diagnosePage = this.designedPage = this.toolsSlots = null;
		RawPage.prototype.dispose.call(this);
	}
});