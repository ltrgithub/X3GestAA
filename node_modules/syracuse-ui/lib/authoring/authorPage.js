"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var patternFactory = require("syracuse-ui/lib/authoring/patterns/patternFactory");
var DragDrop = require("./aside/dragDrop").DragDrop;
var RowResizer = require("./aside/rowResizer").RowResizer;
var drawHelper = require("./drawHelper");
var Palette = require("syracuse-ui/lib/authoring/palette").Palette;

function AuthorPage() {}

exports.AuthorPage = helpers.defineClass(AuthorPage, RawPage, {
	onEndChangeStep: function(menuItem, $item) {
		var awPagePalette = this.getPageContext();
		var $bind = awPagePalette.awItem.$item.$bind;
		var $article = helpers.object.clone($item || this.updatedSteps[this.currentUpdtateStep], true);
		awPagePalette.awArticle.reloadLayout($article);
		this.refreshStepLinks();
		var selectItem;
		if ($bind) {
			var bounds = awPagePalette.awArticle.boundFields[$bind];
			selectItem = bounds ? bounds[0] : null;
		}
		awPagePalette.onEndChangeStep();
		this.selectItem(selectItem || awPagePalette.awArticle, true);
		this.applyChangeToMobile($article);
	},
	refreshStepLinks: function() {
		var metadata;
		if (this.updatedSteps.length > 1) {
			metadata = {
				$links: {
					$authorPreviousLayout: {
						$title: this.localize.aw_previousLayoutOn.replace("{0}", this.currentUpdtateStep).replace("{1}", this.updatedSteps.length),
						$isDisabled: this.currentUpdtateStep == 0
					},
					$authorUndoAllLayout: {
						$isDisabled: false
					}
				}
			};
			if (this.currentUpdtateStep == this.updatedSteps.length - 1) {
				metadata.$links.$authorNextLayout = {
					$title: this.localize.aw_nextLayout,
					$isDisabled: true
				};
			} else {
				metadata.$links.$authorNextLayout = {
					$title: this.localize.aw_nextLayoutOn.replace("{0}", this.currentUpdtateStep + 1).replace("{1}", this.updatedSteps.length),
					$isDisabled: false
				};
			}
		} else {
			metadata = {
				$links: {
					$authorPreviousLayout: {
						$title: this.localize.aw_previousLayout,
						$isDisabled: true
					},
					$authorNextLayout: {
						$title: this.localize.aw_nextLayout,
						$isDisabled: true
					},
					$authorUndoAllLayout: {
						$isDisabled: true
					}
				}
			};
		}
		this.applyChange(metadata);
	},
	applyChangeToMobile: function($article) {
		if (document.site.mobileGateway) {
			document.site.mobileGateway.applyChange($article);
		}
	},
	notifySteps: function(awPagePalette, resetUpdates) {
		awPagePalette = awPagePalette || this.getPageContext();
		if (!resetUpdates && this.isUpdated) {
			if (this.currentUpdtateStep != this.updatedSteps.length - 1) {
				this.updatedSteps.splice(this.currentUpdtateStep + 1);
			}
			var $article = helpers.object.clone(awPagePalette.awArticle.$item, true);
			this.updatedSteps.push($article);
			this.applyChangeToMobile($article);
			this.currentUpdtateStep = this.updatedSteps.length - 1;
		} else {
			(this.updatedSteps = []).push(awPagePalette.$sourceItem);
			//this.applyChangeToMobile(awPagePalette.$sourceItem);
			this.currentUpdtateStep = 0;
		}
		this.refreshStepLinks();
	},
	onChangeSep: function(menuItem) {
		var self = this;
		var $item;
		var awPagePalette = self.getPageContext();
		switch (menuItem.$item.$bind) {
			case "$authorPreviousLayout":
				self.currentUpdtateStep--;
				self.onEndChangeStep(menuItem, $item);
				break;
			case "$authorNextLayout":
				self.currentUpdtateStep++;
				self.onEndChangeStep(menuItem, $item);
				break;
			case "$authorUndoAllLayout":
				document.site.showMessage({
					$title: self.localize.aw_updateMessageTitle,
					$message: self.localize.aw_confirmUndoAll,
					$type: "question",
					$buttons: "yesno",
					callback: function(response) {
						if (response.$id == "yes") {
							self.currentUpdtateStep = 0;
							self.notifySteps(awPagePalette, true);
							self.onEndChangeStep(menuItem, $item);
						}
					}
				});
				break;
			case "$defaultLayout":
				$item = helpers.object.clone(awPagePalette.targetPage.ensureDefaultArticle(awPagePalette.getawPrototype().$article, awPagePalette.getawPrototype()), true);
				self.notifyUpdate(true);
				self.onEndChangeStep(menuItem, $item);
				break;
			default:
				if (menuItem.$item.$bind.indexOf("pattern") == 0) {
					if ((menuItem.$item.$bind != "pattern-headerTabs") && (awPagePalette.awItem.$authoringLevel == "section" || awPagePalette.awItem.$authoringLevel == "block")) {
						var pattern = patternFactory.patterns[menuItem.$item.$bind];
						if (pattern.isBoxOnly) {
							var children = awPagePalette.awItem.layoutContent.getItems();
							if (children.length && children[0].$authoringLevel == "field") {
								return;
							}
						}
						var $result = patternFactory.build(menuItem.$item.$bind, awPagePalette.getawPrototype(), awPagePalette.awItem.$item);
						if (!$result && !$result.$layout) {
							return;
						}
						awPagePalette.awItem.$item.$layout = $result.$layout;
						$item = awPagePalette.awArticle.$item;
					} else {
						$item = patternFactory.build(menuItem.$item.$bind, awPagePalette.getawPrototype(), awPagePalette.$sourceItem);
					}
					self.notifyUpdate(true);
				}
				self.onEndChangeStep(menuItem, $item);
				break;
		}
	},
	resizePalette: function() {
		if (this.awPalette) {
			this.awPalette.onWindowResize();
		}
	},
	notifyUpdate: function(isUpdated) {
		this.isUpdated = isUpdated !== false;
		this.notifySteps();
	},
	_toggleAuthoringDialog: function(dialogWrapper, begin) {
		if (begin) {
			dialogWrapper.$$closeBtn[0].style.display = "none";
			dialogWrapper.overlay.className = "s-aw-overlay";
		} else {
			dialogWrapper.$$closeBtn[0].style.display = "";
			dialogWrapper.overlay.className = "s-overlay";
		}
	},
	getPageContext: function() {
		return this.contextStack[0];
	},
	onContextDisposed: function(disposedContext) {
		if (this.contextStack) {
			for (var ii = 0, jj = this.contextStack.length; ii < jj; ii++) {
				if (this.contextStack[ii] == disposedContext) {
					this.contextStack.splice(ii, 1);
					if (this.awPalette == this) {
						this.awPalette = ii > 0 ? this.contextStack[ii - 1] : null;
						if (this.awPalette) {
							this.awPalette.toggleContext(true);
						}
					}
					break;
				}
			}
		}
	},
	getContext: function(item) {

		if (item) {
			if (this.awPalette.awArticle != item && (item.isOnAuthoring || this.awPalette.awArticle != item.articleParent)) {
				for (var ii = 0, jj = this.contextStack.length; ii < jj; ii++) {
					var palette = this.contextStack[ii];
					if (palette.awArticle == item || (!item.isOnAuthoring && palette.awArticle == item.articleParent)) {
						this.awPalette.toggleContext(false);
						this.awPalette = palette;
						this.awPalette.toggleContext(true);
						break;
					}
				}
			}
		}
		if (this.awPalette == null || this.awPalette.authorPage == null) {
			if (this.contextStack.length > 0) {
				this.awPalette = this.contextStack[this.contextStack.length - 1];
				this.awPalette.toggleContext(true);
			}
		}
		return this.awPalette;
	},
	createContext: function(awArticle, options) {
		if (this.awPalette) {
			this.awPalette.toggleContext(false);
		}
		this.awPalette = new Palette();
		if (options) {
			var keys = Object.keys(options);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				this.awPalette[keys[ii]] = options[keys[ii]];
			}
		}
		this.awPalette.authorPage = this;
		this.awPalette.awArticle = awArticle;
		awArticle.isOnAuthoring = true;
		this.awPalette.diagnosePage = this.awPalette.targetPage = this.contextStack.length > 0 ? this.contextStack[0].awArticle : awArticle;
		this.contextStack.push(this.awPalette);
		this.awPalette.$sourceItem = helpers.object.clone(awArticle.$item, true);
		if (awArticle.dialogWrapper) {
			this._toggleAuthoringDialog(awArticle.dialogWrapper, true);
		}
		this.toggleItemAuthoring(awArticle, true);
		this.awPalette.loadBox(this);
		return this.awPalette;
	},
	clearEmptySection: function(section) {
		if (section && section.page != section) {
			var boxParent = section.boxParent;
			section.layoutParent.removeItem(section, true);
			if (!(boxParent.boxFields && Object.keys(boxParent.boxFields).length > 0) && !(boxParent.childrenSection && boxParent.childrenSection.length > 0)) {
				this.clearEmptySection(boxParent);
			}
		}
	},
	clearUnknowFields: function() {
		if (this.targetPage.noProtoFields) {
			for (var ii = 0, jj = this.targetPage.noProtoFields.length; ii < jj; ii++) {
				var field = this.targetPage.noProtoFields[ii];
				var boxParent = field.boxParent;
				field.layoutParent.removeItem(field, true);
				if (boxParent) {
					if (!(boxParent.boxFields && Object.keys(boxParent.boxFields).length > 0) && !(boxParent.childrenSection && boxParent.childrenSection.length > 0)) {
						this.clearEmptySection(boxParent);
					}
				}
			}
			delete this.targetPage.noProtoFields;
		}
	},
	beginAuthoring: function(awPageSlot, authoredItem) {
		this.authoredItem = authoredItem;
		this.preferences = document.site.ensurePreferences();
		this.preferences.authoring = this.preferences.authoring || {};
		this.localize = document.site.localize;
		this._initializePage();
		this.layoutSlot = awPageSlot;
		this.contextStack = [];
		this.localize = locale.resources(module)();
		this.bindEvents();
		if (document.site.mainPage.isFusionPage) {
			this.targetPage = document.site.fusionGateway.activatedBook.selectedSheet;
		} else {
			this.targetPage = document.site.getTopDialogPage();
			if (this.targetPage) {
				this.targetPage = this.targetPage._content;
			}
		}

		this.diagnosePage = this.targetPage = this.targetPage || document.site.mainPage;
		this.clearUnknowFields();
		this.showTargetPageDiagnoses(this.targetPage, {
			$diagnoses: null
		});
		this.targetPage.authoringPage = this;
		this.targetPage.isOnAuthoring = true;
		document.controller.loadWorkingCopy({
			menu: {
				$url: this.targetPage.$authorUrl
			},
			article: this,
			callback: function() {
				document.site.resize();
			}
		});
		this.rowResizer = new RowResizer();
		this.rowResizer.load();
	},
	showTargetPageDiagnoses: function(targetPage, message, options) {
		targetPage.showDiagnoses(message, options);
		if (document.site.mobileGateway) {
			document.site.mobileGateway.onShowTargetPageDiagnoses(message, options);
		}
	},
	_togglePageBarItemAuthoring: function(targetPage, enable, isOnPreviewMode) {
		if (targetPage.menuBar) {
			targetPage.menuBar.toggleItemAuthoring(enable, isOnPreviewMode);
		}
		if (targetPage.fusionBar) {
			targetPage.fusionBar.toggleItemAuthoring(enable, isOnPreviewMode);
		}
	},
	onBeforeMainPageChange: function(continueChanging) {
		var self = this;
		if (self.isUpdated) {
			document.site.showMessage({
				$title: self.localize.aw_updateMessageTitle,
				$message: self.localize.aw_cancelMessageText,
				$type: "question",
				$buttons: "yesnocancel",
				callback: function(response) {
					if (response.$id == "yes") {
						self.clickMenu("$save");
						setTimeout(function() {
							document.site.openAuthoringPage(false);
							continueChanging();
						}, 300);
					} else {
						if (response.$id == "no") {
							document.site.openAuthoringPage(false);
							continueChanging();
						}
					}
				}
			});
			return false;
		}
		document.site.openAuthoringPage(false);
		return true;
	},
	onMenuClick: function(menuItem) {
		var self = this;
		var awPalette = self.getContext();
		switch (menuItem.$item.$bind) {
			case "$authorPreviousLayout":
			case "$authorNextLayout":
			case "$authorUndoAllLayout":
				self.onChangeSep(menuItem);
				return false;
			case "$authorHelp":
				return true;
			case "$delete":
				if (awPalette.targetPage.pageViewSelector) {
					var selectedView = awPalette.targetPage.pageViewSelector.getSelected();
					document.site.showMessage({
						$title: self.localize.aw_deleteMessageTitle,
						$message: self.localize.aw_deleteMessageText.replace("{0}", "'" + selectedView.$title + "'"),
						$type: "question",
						$buttons: "yesno",
						callback: function(response) {
							if (response.$id == "yes") {
								self.deletedView = selectedView;
								document.controller.executeMenu(menuItem);
							}
						}
					});
				}
				return false;
			case "$close":
				if (self.isUpdated) {
					document.site.showMessage({
						$title: self.localize.aw_updateMessageTitle,
						$message: self.localize.aw_cancelMessageText,
						$type: "question",
						$buttons: "yesnocancel",
						callback: function(response) {
							if (response.$id == "yes") {
								self.clickMenu("$save");
							} else {
								if (response.$id == "no") {
									var $item = helpers.object.clone(self.getPageContext().$sourceItem, true);
									awPalette.targetPage.reloadLayout($item);
									self.applyChangeToMobile($item);
									document.site.openAuthoringPage(false);
								}
							}
						}
					});
				} else {
					document.site.openAuthoringPage(false);
				}
				return false;
			default:
				if (menuItem.$sourceBind == "$aw_quit") {
					self.showTargetPageDiagnoses(awPalette.targetPage, null);
					document.site.openAuthoringPage(false);
					return false;
				} else {
					if (menuItem.page != self && menuItem.page != awPalette) {
						if (!menuItem.page.isAuthoringFriend && !menuItem.boxParent.isDiagnoseMenus) {
							return !menuItem.page.vignetteField && !menuItem.page.isOnAuthoring;
						}
					}
					return true;
				}
		}
	},
	drawBox: function() {
		document.site.emptyDom(this.layoutSlot);
		(this.$$item = $(this.layoutSlot)).show();
		this.$skin = "s-authorpage";
		this.paletteSlot = document.createElement("div");
		this.paletteSlot.className = "s-aw-palette-slot";
		this._widths = {
			palette: 200
		};
		this.paletteSlot.style.width = this._widths.palette + "px";
		this.$prototype.$properties = this.$prototype.$properties || {};
		this.$prototype.$properties.$viewType = {
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",
				"$enum": [{
					$value: "preview",
					$title: this.localize.aw_viewTypePreview
				}, {
					$value: "layout",
					$title: this.localize.aw_viewTypeLayout
				}, {
					$value: "structure",
					$title: this.localize.aw_viewTypeStructure
				}]
			}
		};
		this.$prototype.$properties.$authorTransaction = {
			$type: "application/x-string",
			$isHidden: true
		};
		if (document.site.isMobileSite) {
			this.$prototype.$properties.$viewType.$value.$enum.push({
				$value: "json",
				$title: this.localize.aw_viewTypeJSON
			});
		}


		var topLeft = document.createElement("div");
		topLeft.id = "s-aw-page-left";
		this.loadNewItem(topLeft, {
			$layoutType: "row",
			$items: [{
				$layoutType: "row",
				$autoSize: true,
				$items: [{
					$category: "link",
					$icon: {
						$mode: "icon",
						$path: "authoring/s-aw-",
						$value: "help"
					},
					$skin: "s-aw-menus-link",
					$bind: "$authorHelp"
				}, {
					$category: "link",
					$icon: {
						$mode: "icon",
						$path: "authoring/s-aw-",
						$value: "previousLayout"
					},
					$skin: "s-aw-menus-link",
					$bind: "$authorPreviousLayout"
				}, {
					$category: "link",
					$icon: {
						$mode: "icon",
						$path: "authoring/s-aw-",
						$value: "nextLayout"
					},
					$skin: "s-aw-menus-link",
					$bind: "$authorNextLayout"
				}, {
					$category: "link",
					$skin: "s-aw-menus-link",
					$bind: "$authorUndoAllLayout"
				}, {
					$category: "field",
					$skin: "s-aw-transaction",
					$isTitleHidden: true,
					$isEditMode: false,
					$bind: "$authorTransaction"
				}]
			}, {
				$category: "field",
				$bind: "$viewType",
				$skin: "s-aw-viewType",
				$isEditMode: true,
				$format: "$button",
				$choiceLayout: "row"
			}]
		});
		var topRight = document.createElement("div");
		topRight.id = "s-aw-page-right";
		this.loadNewItem(topRight, {
			$category: "menus",
			$skin: "s-aw-top-actions",
			$itemIcon: {
				$mode: "icon",
				$path: "authoring/s-aw-"
			},
			$layout: {
				$layoutType: "row",
				$widths: "25,25,25,25",
				$items: [{
					$bind: "$save",
					$css: "s-aw-menus-save"
				}, {
					$bind: "saveAs",
					$css: "s-aw-menus-saveas"
				}, {
					$bind: "$delete",
					$css: "s-aw-menus-delete"
				}, {
					$css: "s-aw-page-close",
					$bind: "$close"
				}]
			}
		});

		this.menuItems.$close[0].setMenu({
			$title: this.localize.aw_close
		}, null);

		this.applyChange({
			$links: {
				$authorPreviousLayout: {
					$isDisabled: true,
					$title: this.localize.aw_previousLayout
				},
				$authorNextLayout: {
					$isDisabled: true,
					$title: this.localize.aw_nextLayout
				},
				$authorUndoAllLayout: {
					$isDisabled: true,
					$title: this.localize.aw_undoAllLayout
				},
				$authorHelp: {
					$title: this.localize.aw_help
				}
			}
		});
		if (this.targetPage.$item.$transaction) {
			var $title = "Transaction";
			if (this.targetPage.$item.$isModel) {
				$title += " Model";
			}
			this.applyChange({
				$properties: {
					$authorTransaction: {
						$isHidden: false
					}
				},
				$authorTransaction: $title
			});
		}
		this.createContext(this.targetPage);
		this.notifySteps(); // initialize  
		this.awPalette.targetPage._item.appendChild(this.paletteSlot);
		this.layoutSlot.appendChild(topLeft);
		this.layoutSlot.appendChild(topRight);
		document.site.resize();
		if (this.authoredItem) {
			var awPalette = this.getContext(this.authoredItem);
			this.selectItem(this.authoredItem, true);
			if (this.authoredItem.awAddin && this.authoredItem.awAddin.ensureDesignContext) {
				this.authoredItem.awAddin.ensureDesignContext(awPalette);
			}
			this.authoredItem = null;
		} else {
			this.selectItem(this.awPalette.targetPage, true);
		}
	},
	selectItem: function(item, select, ensureSelect) {
		var awPalette = this.getContext();
		if (awPalette.awLayout && awPalette.awLayout.disposed) {
			awPalette.awLayout = null;
		}
		if (awPalette.awItem && awPalette.awItem.disposed) {
			awPalette.awItem = null;
		}
		if (item && item.disposed) {
			item = awPalette.awItem;
		}
		if (select) {
			item = item || awPalette.targetPage;
			if (ensureSelect || item != awPalette.awItem) {
				this.selectItem(null, false);
				if (item.isLayout) {
					awPalette.awItem = item.boxParent;
					awPalette.awLayout = item;
				} else {
					awPalette.awItem = item;
					awPalette.awLayout = null;
				}

				this.scrollToItem(awPalette.awLayout || awPalette.awItem);
				awPalette.showSettingPanel();
				if (awPalette.awLayout) {
					this._toggleItemCss(awPalette.awLayout, "s-aw-designed", true);
				}
				this._toggleItemCss(item, "s-aw-designed", true);
				document.site.resize();
			}
		} else {
			item = item || awPalette.awItem;
			if (item) {
				this._toggleItemCss(item, "s-aw-designed", false);
			}
			if (awPalette.awLayout) {
				this._toggleItemCss(awPalette.awLayout, "s-aw-designed", false);
			}
		}
		awPalette.selectNode(item, select);
	},
	toggleDropArea: function(spaceBox, dropItem) {
		if (dropItem) {
			if (spaceBox.deleteLink) {
				spaceBox.deleteLink.style.display = "none";
			}
			if (!spaceBox.dropArea) {
				spaceBox.dropArea = document.createElement("div");
				spaceBox.dropArea.className = "s-aw-drop-area-" + dropItem.$authoringLevel;
				spaceBox.dropArea.textContent = this.localize["aw_drop_" + dropItem.$authoringLevel];
				spaceBox._body.appendChild(spaceBox.dropArea);
			}
		} else {
			if (spaceBox.deleteLink) {
				spaceBox.deleteLink.style.display = "";
			}
			if (spaceBox.dropArea) {
				document.site.removeDomChild(spaceBox.dropArea);
				spaceBox.dropArea = null;
			}
		}
	},
	toggleArrayFieldAuthoring: function(item, enable) {
		if (this.awPalette.isArrayField && item == this.awPalette.awArticle) {
			if (item.$item.$format == "grid") {
				if (item.$item.$cards) {
					var recordCardView;
					if (item.$item.$cards.$position == "inline") {
						if (item.records.length > 0) {
							recordCardView = item.records[0];
						}
					} else {
						recordCardView = item.builder.cardBuilder.recordCardView;
					}
					if (recordCardView) {
						if (!recordCardView.cardview) {
							recordCardView.builder.cardBuilder.toggleCard(recordCardView, true);
						}
						this.toggleItemAuthoring(recordCardView.cardview, enable);
					}
				}
			} else {
				if (item.records.length > 0) {
					var record = item.records[0];
					this.toggleItemAuthoring(record, enable);
				}
			}
		}
	},
	toggleItemAuthoring: function(item, enable) {

		var site = document.site;
		var awPalette = this.getContext();
		if (awPalette) {
			if (item == awPalette.awArticle) {
				this.toggleArrayFieldAuthoring(item, enable);
				this._togglePageBarItemAuthoring(item, enable || this.isOnPreviewMode, this.isOnPreviewMode);
			}
			if (!enable && item.loadPageViewSelector) {
				item.loadPageViewSelector();
			}
			if (item.articleParent && item.articleParent != awPalette.targetPage) {
				return;
			}
			if (item.isMenuGroup || item.isMenuItem) {
				if (!awPalette.targetPage.isDashBoard) {
					return;
				}
			}
			if ((item.$item && item.$item.$isAuthoringEnabled === false) || (item.boxParent && item.boxParent.$item.$isAuthoringEnabled === false)) {
				return;
			}
			item.isAuthingEnabled = enable;
			if (item.isSpaceBox) {
				if (enable) {
					if (!item.deleteLink) {
						if (item.boxParent.$authoringLevel == "block") {
							item.$authoringLevel = "field";
						} else {
							var children = item.boxParent.layoutContent ? item.boxParent.layoutContent.getItems() : [];
							if (children.length > 0) {
								item.$authoringLevel = children[0].$authoringLevel;
							} else {
								item.$authoringLevel = item.boxParent.$authoringLevel == "section" ? "block" : "section";
							}
						}
						item.deleteLink = document.createElement("a");
						item.deleteLink.className = "s-aw-layout-delete";
						item.deleteLink.title = this.localize.aw_deleteColumn;
						item._body.appendChild(item.deleteLink);
					}
				} else {
					site.removeDomChild(item.deleteLink);
					item.deleteLink = null;
					site.toggleClass(item.layoutSlot, "s-aw-designed", false);
					site.toggleClass(item.layoutSlot, "s-aw-over", false);
				}
				site.toggleClass(item.layoutSlot, "s-aw-item", enable);
			}
			if (item.isTabLayout) {
				if (!item.isLayout && item.isSection && !item.loaded && item.$item.$opened !== false) {
					item.renderLayoutContent();
					item.loaded = true;
				}
			}
			var domItem = item.dataSlot;
			if (!domItem && item.$$item) {
				domItem = item.$$item[0];
			}
			if (domItem) {
				//no domitem for layout
				if (item.tabTitle) {
					if (enable) {
						item.tabTitle.setAttribute("data-s-item", item.id);
					} else {
						site.toggleClass(item.tabTitle, "s-aw-designed", false);
						site.toggleClass(item._body, "s-aw-designed", false);
						site.toggleClass(item.tabTitle, "s-aw-over", false);
						site.toggleClass(item._body, "s-aw-over", false);
						item.tabTitle.removeAttribute("data-s-item");
					}
					site.toggleClass(item.tabTitle, "s-aw-item", enable);
					site.toggleClass(item._body, "s-aw-item", enable);
					site.toggleClass(item.tabTitle, "s-aw-light", enable && this.$isLightMode);
					site.toggleClass(item._body, "s-aw-light", enable && this.$isLightMode);
				}
				if (enable) {
					domItem.setAttribute("data-s-item", item.id);
					if (!item.isLayout) {
						item.layoutSlot.setAttribute("data-s-item", item.id);
					}
				} else {
					if (domItem) {
						if (item._body) {
							site.toggleClass(item._body, "s-aw-over", false);
							site.toggleClass(item._body, "s-aw-designed", false);
						}
						if (item._header) {
							site.toggleClass(item._header, "s-aw-over", false);
							site.toggleClass(item._header, "s-aw-designed", false);
						}
						site.toggleClass(item.layoutSlot, "s-aw-designed", false);
						site.toggleClass(item.layoutSlot, "s-aw-over", false);
						site.toggleClass(domItem, "s-aw-designed", false);
						site.toggleClass(domItem, "s-aw-over", false);
						domItem.removeAttribute("data-s-item");
						item.layoutSlot.removeAttribute("data-s-item");
					}
				}
				if (item.isLayout) {
					if (enable) {
						if (item.$layout.$layoutType == "row") {
							site.toggleClass(item._item, "s-aw-item", true);
							if (item.layoutSlot) {
								site.toggleClass(item.layoutSlot, "s-aw-item", true);
							}
							if (this.$isLightMode) {
								var children = item.getItems();
								if (!children.length || children[0].$authoringLevel == "field") {
									item._item.style.display = "none";
								}
							} else {
								item._item.style.display = "";
							}
						}
					} else {
						site.toggleClass(domItem, "s-aw-item", false);
						if (item.layoutSlot) {
							site.toggleClass(item.layoutSlot, "s-aw-item", false);
						}
						item._item.style.display = "";
					}
				} else {
					if (item.layoutSlot) {
						site.toggleClass(item.layoutSlot, "s-aw-item", enable);
					}
					site.toggleClass(domItem, "s-aw-item", enable);
					site.toggleClass(domItem, "s-aw-light", enable && this.$isLightMode);
					this.showHiddenItem(item);
					this.showAdvancedItem(item);
				}
			}
			if (item.rowSeparator) {
				site.toggleClass(item.rowSeparator, "s-aw-slot-sep-" + item.layoutParent.$layout.$layoutType, enable);
				item.rowSeparator.setAttribute(item.isLayout ? "data-s-layout" : "data-s-item", item.id);
			}
			if (item.isLayout) {
				if (item.items) {
					for (var ii = 0, jj = item.items.length; ii < jj; ii++) {
						this.toggleItemAuthoring(item.items[ii], enable);
					}
				}
			} else {
				if (item.layoutContent) {
					this.toggleItemAuthoring(item.layoutContent, enable);
				}
			}
			if (!enable && item.awAddin && !this.isOnPreviewMode) {
				document.controller.disposeObject(item.awAddin);
			}
		}
	},
	showAdvancedItem: function(item, $isAdvanced) {
		if (item.$authoringLevel == "field") {
			if ($isAdvanced === undefined) {
				$isAdvanced = item.$item.$isAdvanced;
			}
			if ($isAdvanced !== undefined) {
				var domItem = item._item || item._domItem;
				if (item.layoutSlot) {
					document.site.toggleClass(item.layoutSlot, "s-aw-advanced-visibility-forced", $isAdvanced);
				}
				document.site.toggleClass(domItem, "s-aw-advanced-visibility-forced", $isAdvanced);
				item.showField(true);
				this.showHiddenItem(item);
			}
		}
	},
	showHiddenItem: function(item) {
		if (item.page != item && !item.$item.$isPopupContent) {
			var display = (!item.isAuthingEnabled && (!(item.layoutParent && item.layoutParent.isRow) && (item.$isHidden || item.isItemHidden))) ? "none" : "";
			if (item.layoutSlot) {
				if (this.$isLightMode && item.$authoringLevel == "field") {
					item.layoutSlot.style.display = "none";
					if (item.rowSeparator) {
						item.rowSeparator.style.display = "none";
					}
				} else {
					item.layoutSlot.style.display = display;
					if (item.rowSeparator) {
						item.rowSeparator.style.display = display;
					}
				}
				document.site.toggleClass(item.layoutSlot, "s-aw-visibility-forced", item.isAuthingEnabled && item.$isHidden);
			}
			if (item.tabTitle) {
				item.tabTitle.style.display = display;
			}
			var domItem = item._item || item._domItem;
			if (domItem) {
				if (item.isAuthingEnabled) {
					if (this.$isLightMode && item.$authoringLevel == "field") {
						domItem.style.display = "none";
					} else {
						// domItem.style.display = item.$isHidden ? "none" : "";
						domItem.style.display = "";
					}
					document.site.toggleClass(domItem, "s-aw-visibility-forced", item.$isHidden);
				} else {
					document.site.toggleClass(domItem, "s-aw-visibility-forced", false);
					domItem.style.display = item.$isHidden ? "none" : "";
				}
			}

		}
	},
	_toggleItemCss: function(item, css, show) {
		if (item.$$item) {
			if (item.tabTitle) {
				document.site.toggleClass(item.tabTitle, css, show);
				document.site.toggleClass(item._body, css, show);
			} else {
				if (item.dataSlot) {
					document.site.toggleClass(item.dataSlot, css, show); //page
				} else {
					if (item.layoutSlot) {
						document.site.toggleClass(item.layoutSlot, css, show);
					}
				}
				if (item.isLayout) {
					document.site.toggleClass(item._item, css, show);
				}
				if (item._header) {
					document.site.toggleClass(item._header, css, show);
				}
				if (item._body) {
					document.site.toggleClass(item._body, css, show);
				}
			}
		}
	},
	toggleOverItem: function(item, isOver) {
		var css = "s-aw-over";
		this._toggleItemCss(item, css, isOver);
		if (isOver && this._overItem != item) {
			if (this._oveItems) {
				for (var ii = 0, jj = this._oveItems.length; ii < jj; ii++) {
					this._toggleItemCss(this._oveItems[ii], css, false);
				}
			}
			this._oveItems = [];
			this._overItem = item;
			while (item) {
				this._toggleItemCss(item, css, true);
				this._oveItems.push(item);
				item = item.boxParent;
			}
		}
	},
	applyChange: function(newData) {
		if (newData && newData.$actions) {
			var awPalette = this.getContext();
			if (newData.$actions.saveAs) {
				if (newData.$actions.saveAs && newData.$actions.saveAs.$isDisabled && newData.$actions.saveAs.$isRequested === false) {
					if (newData.$authorUrl) {
						awPalette.targetPage.$authorUrl = newData.$authorUrl;
					}
					if (newData.$actions.saveAs.$diagnoses) {
						for (var ii = 0, jj = newData.$actions.saveAs.$diagnoses.length; ii < jj; ii++) {
							var $diagnose = newData.$actions.saveAs.$diagnoses[ii];
							if (($diagnose.severity || $diagnose.$severity) !== "success") {
								return false;
							}
						}
					}
					delete newData.$actions.saveAs;
					if (awPalette.authorPage) {
						awPalette.authorPage.notifyUpdate(false);
					}
					this.showTargetPageDiagnoses(awPalette.targetPage, {
						$diagnoses: [{
							$message: this.localize.aw_saveMessageText,
							$severity: "success"
						}],
						$links: {
							$aw_quit: {
								$title: this.localize.aw_quit
							}
						}
					});
				}
			}
			if (newData.$actions.$save) {
				if (newData.$actions.$save.$isDisabled && newData.$actions.$save.$isRequested === false) {
					if (newData.$authorUrl) {
						awPalette.targetPage.$authorUrl = newData.$authorUrl;
					}
					if (newData.$actions.$save.$diagnoses) {
						for (var ii = 0, jj = newData.$actions.$save.$diagnoses.length; ii < jj; ii++) {
							var $diagnose = newData.$actions.$save.$diagnoses[ii];
							if (($diagnose.severity || $diagnose.$severity) !== "success") {
								return false;
							}
						}
					}
					newData.$actions.$save.$isDisabled = false;
					newData.$actions.$save.$isRequested = true;
					if (awPalette.authorPage) {
						awPalette.authorPage.notifyUpdate(false);
					}
					this.showTargetPageDiagnoses(awPalette.targetPage, {
						$diagnoses: [{
							$message: this.localize.aw_saveMessageText,
							$severity: "success"
						}],
						$links: {
							$aw_quit: {
								$title: this.localize.aw_quit
							}
						}
					});
				}
			}
			if (newData.$actions.$delete) {
				if (newData.$actions.$delete.$isDisabled && newData.$actions.$delete.$isRequested === false) {
					var selectedView = awPalette.targetPage.pageViewSelector.getSelected();
					if (newData.$authorUrl) {
						awPalette.targetPage.$authorUrl = newData.$authorUrl;
					}
					if (newData.$actions.$delete.$diagnoses) {
						for (var ii = 0, jj = newData.$actions.$delete.$diagnoses.length; ii < jj; ii++) {
							var $diagnose = newData.$actions.$delete.$diagnoses[ii];
							if (($diagnose.severity || $diagnose.$severity) !== "success") {
								return false;
							}
						}
					}
					var page = awPalette.targetPage;
					var $diagnose = {
						$message: this.localize.aw_isDeletedMessageText.replace("{0}", "'" + selectedView.$title + "'"),
						$severity: "success"
					};
					document.site.openAuthoringPage(false);
					page.pageViewSelector.onViewDeleted(selectedView);
					this.showTargetPageDiagnoses(page, {
						$diagnoses: [$diagnose]
					});
				}
				return false;
			}
		}
		RawPage.prototype.applyChange.call(this, newData);
	},
	temporalySave: function(awPalette, $article) {
		var content = this.ensureSendBag().content = {
			$article: $article || awPalette.targetPage.$item
		};
		/*if (document.site.mobileGateway) {
         document.site.mobileGateway.applyChange(content.$article);
         }*/
	},
	notifyActionChange: function(target, value, notifyServer) {
		var awPalette = this.getContext();
		if (value && value.$save || value.saveAs) {
			awPalette.targetPage.garbageFreeItems();
		}
		var $article = helpers.object.clone(awPalette.targetPage.$item, true);
		delete $article.$menus;
		delete $article.$isModel;
		// crnit: we should test prototype's generator version, not $article's. If there is not authoring yet
		// the article's generator version would be absent but the new authoring must be stored converted
		// Reason: if there is no authoring the $article is the one generated by X3 and is in phase with the prototype
		// so there is no need to convert. But as soon as we have it stored, the authoring have to be converted as the
		// prototype may change
		// if ($article.$generatorVersion) {
		if (awPalette.targetPage.$prototype.$generatorVersion) {
			var $prototype = helpers.object.clone(awPalette.targetPage.$prototype, true);
			document.site._cvgPageConverterMakePersistent($prototype, $article);
			$article.$generatorVersion = 1;
		}
		this.temporalySave(awPalette, $article);
		RawPage.prototype.notifyActionChange.call(this, target, value, notifyServer);
	},
	notifyDataChange: function(field, value) {
		switch (field.$item.$bind) {
			case "$viewType":
				this._toggleViewType(value);
				break;
			default:
				this.temporalySave(this.getContext());
				RawPage.prototype.notifyDataChange.call(this, field, value);
				break;
		}
	},
	_notifyChildFields: function(parentItem, value, binding) {
		var items = parentItem.layoutContent ? parentItem.layoutContent.items : parentItem.items;
		if (items) {
			for (var ii = 0, jj = items.length; ii < jj; ii++) {
				var childItem = items[ii];
				if (childItem.$authoringLevel == "field") {
					var metaData = {};
					metaData[binding] = value;
					if (childItem.applyDesignMetaData) {
						//not available for menu
						childItem.applyDesignMetaData(metaData, true);
					}
				} else {
					this._notifyChildFields(childItem, value, binding);
				}
			}
		}
	},
	_notifyChildBox: function(parentItem, metaData) {
		var items = parentItem.layoutContent ? parentItem.layoutContent.items : parentItem.items;
		parentItem.applyDesignMetaData(metaData, true);
		if (parentItem.layoutContent) {
			for (var ii = 0, jj = items.length; ii < jj; ii++) {
				var childItem = items[ii];
				if (childItem.$authoringLevel != "field") {
					this._notifyChildBox(childItem, metaData);
				}
			}
		}
	},
	findTargetItemEvent: function(target, findLayout) {
		var item;
		if (findLayout || target.getAttribute("data-s-layout")) {
			item = document.controller.findLayout($(target));
		} else {
			item = document.controller.findItem($(target));
		}
		return item;
	},
	authorizeEvent: function(item) {
		return (item.page && (item.page.$dialogMode || (item.page == this) || item.page.isAuthoringEventEnabled));
	},
	bindEvents: function() {
		var self = this;
		document.site.$$layoutSlot.delegate(".s-aw-item", "click.author", function(event) {
			self.onClickItem(self.findTargetItemEvent(this), this);
			return false;
		}).delegate(".s-aw-item, .s-aw-add-item", "mousedown.author", function(event) {
			var awPalette = self.getContext();
			if (document.site.dragDropInstance) {
				if (!document.site.dragDropInstance.isDragAuthoring) {
					return;
				}
				document.site.dragDropInstance.stop(event);
				document.site.setDragDropInstance();
			} else {
				if (event.currentTarget.className.indexOf("s-aw-add-item") >= 0) {
					if (event.currentTarget.className.indexOf("s-aw-tree-item") >= 0) {
						var node = awPalette.findNode(event);
						if (node) {
							document.site.requestedDDAuthoringItem = node.item;
							return false;
						}
					} else {
						document.site.requestedDDAuthoringItem = document.controller.findItem($(event.currentTarget));
						return false;
					}
				} else {
					var item = self.findTargetItemEvent(this);
					if (item) {
						if (item != awPalette.targetPage && item.page == awPalette.targetPage) {
							document.site.requestedDDAuthoringItem = item;
							return false;
						}
					}
				}
			}
			// return false;
		}).delegate(".s-aw-slot-sep-row,.s-aw-slot-sep-stack", "mousemove.author", function(event) {
			if (!document.site.dragDropInstance) {
				var item = self.findTargetItemEvent(this);
				if (item) {
					var awPalette = self.getContext();
					if (item != awPalette.targetPage) {
						if (document.site.requestedDDAuthoringItem) {
							(document.site.dragDropInstance = new DragDrop()).start(awPalette, awPalette.targetPage.$$scrollview);
						} else {
							if (document.site.dragDropInstance) {
								if (item.layoutParent || item.isLayout) {
									document.site.dragDropInstance.moveDragImage(event, item);
								}
							}
						}
					}
					self.toggleOverItem(item, true);
				}
				return false;
			}
			return true;
		}).delegate(".s-aw-item,.s-aw-add-item", "mousemove.author", function(event) {
			if (!document.site.dragDropInstance || document.site.dragDropInstance.isDragAuthoring) {
				var awPalette = self.getContext();
				if (event.currentTarget.className.indexOf("s-aw-add-item") >= 0) {
					if (event.currentTarget.className.indexOf("s-aw-tree-item") >= 0) {
						var node = awPalette.findNode(event);
						if (node) {
							var item = node.item;
							if (document.site.requestedDDAuthoringItem) {
								document.site.setDragDropInstance(new DragDrop());
								document.site.dragDropInstance.start(awPalette, awPalette.targetPage.$$scrollview);
							} else {
								if (document.site.dragDropInstance) {
									if (item.layoutParent || item.isLayout) {
										document.site.dragDropInstance.moveDragImage(event, item);
									}
								}
							}
						}
					} else {
						if (document.site.requestedDDAuthoringItem) {
							var menuItem = document.site.requestedDDAuthoringItem;
							var $drop = {
								$awAddNewItem: true
							};
							switch (menuItem.$item.$bind) {
								case "$addSection":
									$drop.$authoringLevel = "section";
									break;
								case "$addBlock":
									$drop.$authoringLevel = "block";
									break;
								case "$addMenus":
									$drop.$authoringLevel = "block";
									$drop.$category = "menus";
									break;
								default:
									if (menuItem.$item.$fieldCategory == "menus") {
										$drop.$authoringLevel = "block";
										$drop.$category = "menus";
										$drop.$vignette = menuItem.$item.$vignette;
									} else {
										$drop.$authoringLevel = "field";
										$drop.$fieldBind = menuItem.$item.$fieldBind;
										$drop.$fieldCategory = $drop.$category = menuItem.$item.$fieldCategory;
										$drop.$fieldSkin = $drop.$category = menuItem.$item.$fieldSkin;
									}
									break;
							}
							$drop.$title = menuItem.getTitle();
							document.site.requestedDDAuthoringItem = $drop;
							document.site.setDragDropInstance(new DragDrop());
							document.site.dragDropInstance.start(awPalette, awPalette.targetPage.$$scrollview);
						}
					}
				} else {
					var item = self.findTargetItemEvent(this);
					if (item) {
						if (item != awPalette.targetPage) {
							if (document.site.requestedDDAuthoringItem) {
								document.site.setDragDropInstance(new DragDrop());
								document.site.dragDropInstance.start(awPalette, awPalette.targetPage.$$scrollview);
							} else {
								if (document.site.dragDropInstance) {
									if (item.layoutParent || item.isLayout) {
										document.site.dragDropInstance.moveDragImage(event, item);
									}
								}
							}
						}
						self.toggleOverItem(item, true);
					}
				}
				return false;
			}
			return true;
		}).delegate(".s-aw-item", "mouseenter.author mouseleave.author", function(event) {
			if (document.site.dragDropInstance && document.site.dragDropInstance.isDragAuthoring) {
				var $$item = $(this);
				var layout = self.findTargetItemEvent(this, true);
				if (layout && layout.$layout.$layoutType == "tabs") {
					if (event.type == "mouseenter") {
						var tabItem = self.findTargetItemEvent(this);
						self._ddTabEnter = setTimeout(function() {
							if (tabItem && tabItem.$item) {
								if (!tabItem.$item.$opened) {
									tabItem.openBox(true);
								}
							}
						}, 500);
					} else {
						if (self._ddTabEnter) {
							clearTimeout(self._ddTabEnter);
							delete self._ddTabEnter;
						}
					}
				}
				return false;
			}
			return true;
			// return false;
		}).delegate(".s-aw-layout-delete", "click.author", function() {
			if (!document.site.dragDropInstance) {
				delete document.site.requestedDDAuthoringItem;
				var spaceBox = document.controller.findItem($(this));
				setTimeout(function() {
					var awPalette = self.getContext();
					drawHelper.deleteLayout(spaceBox);
					self.endTargetPageUpdate(null, true);
				}, 10);
			}
			return false;
		});
	},
	onClickItem: function(item, target) {
		var awPalette = this.getContext(item);
		var article = document.controller.findArticle($(target));
		if (article.isOnAuthoring) {
			if (document.site.dragDropInstance && document.site.dragDropInstance.isDragAuthoring) {
				document.site.dragDropInstance.stop(event);
				document.site.setDragDropInstance();
			} else {
				delete document.site.requestedDDAuthoringItem;
				item = item || document.controller.findItem($(target));
				if (item) {
					if (item.isSpaceBox) {
						item = item.boxParent;
					}
					if (item.isMenuGroup && item.contextField) {
						return false;
					}
					if (item && (item != awPalette && item.page != awPalette)) {
						this.selectItem(item, true, true);
						if (item.awAddin && item.awAddin.ensureDesignContext) {
							item.awAddin.ensureDesignContext(awPalette);
						}
					}
				}
			}
		} else {
			if (!article.page.isAuthoringEventEnabled && article.page != this && article.page != awPalette) {
				if (!(article.page.$prototype && article.page.$prototype.$representation == "authoringSaveParam")) {
					return false;
				}
			}
		}
		return true;
	},
	getItemSettings: function($layout, $items) {
		if (!$items) {
			$items = [];
		}
		if ($layout) { //null for spacebox
			for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
				var $item = $layout.$items[ii];
				if ($item.$items && !$item.$bind && !$item.$category) {
					if (!$item.$layoutType) {
						$item.$layoutType = "stack";
					}
					this.getItemSettings($item, $items);
				} else {
					$items.push($item);
				}
			}
		}
		return $items;
	},
	endTargetPageUpdate: function(selectedItem, isStructureUpdated) {
		var awPalette = this.getContext();
		this.layoutValidator.validate(awPalette.targetPage.layoutContent, true);
		if (isStructureUpdated) {
			awPalette.toggleArticleToolBox(true);
		}
		selectedItem = selectedItem || awPalette.awItem;
		this.selectItem(selectedItem, true, true);
		if (selectedItem && selectedItem.$authoringLevel == "field" && selectedItem.boxParent) {
			selectedItem.boxParent.validateFieldVisibility();
			this.toggleItemAuthoring(this.targetPage, true);
		}
		this.notifyUpdate();
		this.temporalySave(awPalette);
	},
	_toggleViewType: function($viewType) {
		this.$viewType = $viewType;
		var isBarsVisible = true;
		if (this.isOnPreviewMode && $viewType != "preview") {
			this.isOnPreviewMode = false;
			this.toggleItemAuthoring(this.targetPage, true);
		}
		if (this.isJsonMode && $viewType != "json") {
			this.isJsonMode = false;
			document.site.mobileGateway.toggleJsonEditor(false);
		}
		switch ($viewType) {
			case "json":
				if (this.$isLightMode) {
					this.$isLightMode = false;
				}
				this.isJsonMode = true;
				isBarsVisible = false;
				document.site.mobileGateway.toggleJsonEditor(true);
				break;
			case "preview":
				if (!this.isOnPreviewMode) {
					if (this.$isLightMode) {
						this.$isLightMode = false;
						this.toggleItemAuthoring(this.targetPage, true);
					}
					this.isOnPreviewMode = true;
				}
				isBarsVisible = false;
				break;
			case "structure":
				if (!this.$isLightMode) {
					this.$isLightMode = true;
				}
				break;
			case "layout":
				if (this.$isLightMode) {
					this.$isLightMode = false;
				}
				break;
		}
		this.getContext().toolbarSlot.style.display = this.paletteSlot.style.display = isBarsVisible ? "" : "none";
		this.toggleItemAuthoring(this.targetPage, !this.isOnPreviewMode);
		this.layoutValidator.validate(this.targetPage.layoutContent, true);
		this.targetPage.onWindowResize();
	},
	dispose: function() {
		this.deletedView = null;
		if (document.site.$$layoutSlot) {
			document.site.$$layoutSlot.undelegate(".author");
		}
		if (this.contextStack && this.contextStack.length) {
			var palette = this.getPageContext();
			if (this.$viewType && this.$viewType != "layout") {
				this._toggleViewType("layout");
			}
			for (var ii = this.contextStack.length - 1; ii >= 0; ii--) {
				palette = this.contextStack[ii];
				if (palette && !palette.disposed) {
					if (palette.targetPage == palette.awArticle) {
						this.awPalette = palette;
						if (palette.targetPage) {
							if (palette.targetPage.dialogWrapper) {
								this._toggleAuthoringDialog(palette.targetPage.dialogWrapper, false);
							}
							palette.targetPage.isOnAuthoring = false;
							this.isOnPreviewMode = false;
							this.toggleItemAuthoring(palette.targetPage, false);
							delete palette.targetPage.authoringPage;
						}
					}
					palette.dispose(true);
				}
			}
			if (this.rowResizer) {
				this.rowResizer.dispose();
				this.rowResizer = null;
			}
		}
		this.contextStack = this.awPalette = this.diagnosePage = null;
		if (this.paletteSlot) {
			document.site.removeDomChild(this.paletteSlot);
		}
		this.authoredItem = this._overItem = this._oveItems = null;
		this._ddTabEnter = this.page = this.paletteSlot = this.targetPage = null;
		RawPage.prototype.dispose.call(this);
	}
});