"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var RawPage = require("syracuse-ui/lib/article/rawPage").RawPage;
var LayoutAuthoring = require("./layoutAuthoring").LayoutAuthoring;
var ItemPalette = require("./itemPalette").ItemPalette;
var TreeContent = require("./treeContent").TreeContent;
function AuthorPage(){
}

exports.AuthorPage = helpers.defineClass(AuthorPage, RawPage, {
    notifyUpdate: function(isUpdated){
        this.isUpdated = isUpdated !== false;
        console.log("AuthorPage ", this.isUpdated);
        this.palette.notifySteps();
    },
    beginAuthoring: function(awPageSlot){
        this._initializePage();
        this.$$container = $(awPageSlot);
        this.localize = locale.resources(module)();
        this.layoutAuthoring = new LayoutAuthoring();
        this.layoutAuthoring.load(this);
        (this.targetPage = document.site.mainPage).authoringPage = this;
        this.targetOrigStatus = {};
        if (this.targetPage.menuBar) {
            this.targetOrigStatus.menuBarDisplay = this.targetPage.menuBar._slot.style.display || "";
            this.targetPage.menuBar._slot.style.display = "none";
        }
        this.paletteSlot = document.createElement("div");
        this.paletteSlot.className = "s-aw-palette-slot";
        this.targetPage._item.appendChild(this.paletteSlot);
        this.$sourceItem = helpers.object.clone(this.targetPage.$item, true);
        this.$defaultItem = helpers.object.clone(document.site.ensureDefaultArticle(this.targetPage.$prototype.$article, this.targetPage.$prototype), true);
        this.isUpdated = false;
        document.controller.loadWorkingCopy({
            menu: {
                $url: this.targetPage.$authorUrl
            },
            article: this,
            callback: function(){
                document.site.resize();
            }
        });
        document.site._eventListener.bindAuthoringEvent(true);
        this.treeContent = new TreeContent();
    },
    onMenuClick: function(menuItem){
        var self = this;
        switch (menuItem.$item.$bind) {
            case "$close":
                if (self.isUpdated) {
                    document.site.showMessage({
                        $title: self.localize.aw_updateMessageTitle,
                        $message: self.localize.aw_cancelMessageText,
                        $type: "question",
                        $buttons: "yesnocancel",
                        callback: function(response){
                            if (response.$id == "yes") {
                                self.menuItems.$save[0].click();
                            }
                            else {
                                if (response.$id == "no") {
                                    document.site.openAuthoringPage(false);
                                    document.controller.reloadMainPage();
                                }
                            }
                        }
                    });
                }
                else {
                    document.site.openAuthoringPage(false);
                }
                return false;
            default:
                if (menuItem.$sourceBind == "$aw_quit") {
                    document.site.showDiagnoses(null);
                    document.site.openAuthoringPage(false);
                    return false
                }
                break;
        }
        return true;
    },
    drawBox: function(){
        this.$$container.empty().show();
        this.$$item = this.$$container;
        
        this._paletteBar = document.createElement("div");
        this._paletteBar.setAttribute("id", "s-aw-page-left");
        this.$$container[0].appendChild(this._paletteBar);
        
        var actions = document.createElement("div");
        actions.setAttribute("id", "s-aw-page-right");
        var $$actions = $(actions);
        
        var close = this.loadNewItem($$actions, {
            $bind: "$close",
            $title: this.localize.aw_close,
            $category: "link",
            $icon: {
                $mode: "icon"
            },
            $skin: "s-aw-page-close"
        });
        close.setMenu({
            $title: this.localize.aw_close
        }, null);
        this.loadNewItem($$actions, {
            $bind: "$save",
            $category: "link",
            $skin: "s-aw-page-save"
        });
        this.$$container[0].appendChild(actions);
        (this.palette = new ItemPalette()).loadBox();
        
        document.site.resize();
        
        this.toggleItemAuthoring(this.targetPage, true);
        this.selectItem(this.targetPage, true);
    },
    selectItem: function(item, select){
        if (select) {
            if (item != this.awItem) {
                if (this.awItem) {
                    this._toggleItemCss(this.awItem, "s-aw-designed", false);
                }
                this.scrollToItem(this.awItem = item);
                this.palette.showSettingPanel(item.$authoringLevel);
                this._toggleItemCss(item, "s-aw-designed", true);
                document.site.resize();
            }
        }
        else {
            if (item) {
                this._toggleItemCss(item, "s-aw-designed", false);
            }
        }
    },
    toggleItemAuthoring: function(item, enable){
        if (item.isEmptyBox) {
            if (enable) {
                if (!item.deleteLink) {
                    if (item.boxParent.$authoringLevel == "block") {
                        item.$authoringLevel = "field";
                    }
                    else {
                        var children = this.layoutAuthoring.extractItemsFromLayout(item.boxParent.layoutContent);
                        if (children.length > 0) {
                            item.$authoringLevel = children[0].$authoringLevel;
                        }
                        else {
                            item.$authoringLevel = item.boxParent.$authoringLevel == "section" ? "block" : "section";
                        }
                    }
                    item.deleteLink = document.createElement("a");
                    item.deleteLink.className = "s-aw-layout-delete";
                    item.deleteLink.textContent = this.localize.aw_deleteColumn;
                    item._body.appendChild(item.deleteLink);
                }
            }
            else {
                document.site.removeDomChild(item.deleteLink);
                item.deleteLink = null;
            }
        }
        var domItem = item.dataSlot;
        if (!domItem && item.$$item) {
            domItem = item.$$item[0];
        }
		if (domItem) {
			//no domitem for layout
			if (item._tabTitle) {
				if (enable) {
					item._tabTitle.setAttribute("data-s-item", item.id);
				}
				else {
					document.site.toggleClass(item._tabTitle, "s-aw-designed", false);
					document.site.toggleClass(item._body, "s-aw-designed", false);
					document.site.toggleClass(item._tabTitle, "s-aw-over", false);
					document.site.toggleClass(item._body, "s-aw-over", false);
					item._tabTitle.removeAttribute("data-s-item");
				}
				document.site.toggleClass(item._tabTitle, "s-aw-item", enable);
				document.site.toggleClass(item._body, "s-aw-item", enable);
				document.site.toggleClass(item._tabTitle, "s-aw-light", enable && this.$isLightMode);
				document.site.toggleClass(item._body, "s-aw-light", enable && this.$isLightMode);
			}
			if (enable) {
				domItem.setAttribute("data-s-item", item.id);
			}
			else {
				if (domItem) {
					document.site.toggleClass(domItem, "s-aw-designed", false);
					document.site.toggleClass(domItem, "s-aw-over", false);
					domItem.removeAttribute("data-s-item");
				}
			}
			if (item.$authoringLevel == "field") {
				(item.$item.$inplace ? item.$$dataValue : item.$$item)[0].style.display = (this.$isLightMode || item.$isHidden) ? "none" : "";
			}
			document.site.toggleClass(domItem, "s-aw-item", enable);
			document.site.toggleClass(domItem, "s-aw-light", enable && this.$isLightMode);
		}
        var items;
        if (item.$layout) {
            items = item.items;
        }
        if (item.layoutContent) {
            items = item.layoutContent.items;
            item.layoutContent.toggleAuthoring(enable);
        }
        if (items) {
            for (var ii = 0, jj = items.length; ii < jj; ii++) {
                this.toggleItemAuthoring(items[ii], enable);
            }
        }
    },
    _toggleItemCss: function(item, css, show){
        if (item.$$item) {
            if (item._tabTitle) {
                document.site.toggleClass(item._tabTitle, css, show);
                document.site.toggleClass(item._body, css, show);
            }
            else {
                document.site.toggleClass(item.dataSlot || item.$$item[0], css, show);
            }
        }
    },
    toggleOverItem: function(item, isOver){
        var css = "s-aw-over";
        this._toggleItemCss(item, css, isOver);
        if (isOver && this._overItem != item) {
            if (this._oveItems) {
                for (var ii = 0, jj = this._oveItems.length; ii < jj; ii++) {
                    this._toggleItemCss(this._oveItems[ii], css, false);
                }
            }
            this._oveItems = [];
            this._overItem = item;
            while (item) {
                this._toggleItemCss(item, css, true);
                this._oveItems.push(item);
                item = item.boxParent;
            }
        }
    },
    applyChange: function(newData){
        if (newData && newData.$actions && newData.$actions.$save) {
            if (newData.$actions.$save.$isDisabled && newData.$actions.$save.$isRequested === false) {
                if (newData.$actions.$save.$diagnoses) {
                    for (var ii = 0, jj = newData.$actions.$save.$diagnoses.length; ii < jj; ii++) {
                        if (newData.$actions.$save.$diagnoses[ii].severity !== "success") {
                            return false;
                        }
                    }
                }
                delete newData.$actions.$save;
                this.notifyUpdate(false);
                document.site.showDiagnoses({
                    $diagnoses: [{
                        message: this.localize.aw_saveMessageText,
                        severity: "success"
                    }],
                    $links: {
                        $aw_quit: {
                            $title: this.localize.aw_quit
                        }
                    }
                });
            }
        }
        RawPage.prototype.applyChange.call(this, newData);
    },
    notifyActionChange: function(target, value, notifyServer){
        this.ensureSendBag().content = {
            $article: this.targetPage.$item
        };
        /*if (!this.dataset.application) {
         var httpQuery = document.controller.parseUrl(this.targetPage.$prototype.$representationUrl);
         data.application = httpQuery.$urlParts.endpointParts.application;
         data.contract = httpQuery.$urlParts.endpointParts.contract;
         data.representation = httpQuery.$urlParts.representationRoot;
         data.facet = httpQuery.$urlParts.$facet;
         }*/
        RawPage.prototype.notifyActionChange.call(this, target, value, notifyServer);
    },
    notifyDataChange: function(field, value){
        this.ensureSendBag().content = {
            $article: this.targetPage.$item
        };
        RawPage.prototype.notifyDataChange.call(this, field, value);
    },
    //opt.targetItem, opt.$category, opt.$bind, opt.newItem,opt.sibling
    addNewItem: function(opt){
        if (opt.$category == "field") {
            if (opt.targetItem.$authoringLevel == "field") {
                var newField = opt.newItem ||
                opt.targetItem.page.createNewItem({
                    $bind: opt.$bind
                }, opt.targetItem.boxParent);
                this.layoutAuthoring.newMoveItem(opt.targetItem.layoutParent, opt.targetItem, newField, false);
            }
            else {
                var boxParent = opt.targetItem;
                var children = this.layoutAuthoring.extractItemsFromLayout(boxParent.layoutContent);
                if (children.length == 0 || (children.length > 0 && children[0].$authoringLevel != "field")) {
                    if (boxParent.$authoringLevel == "article" || children.length > 0) {
                        boxParent = this.addNewItem({
                            targetItem: boxParent,
                            $category: children.length > 0 ? children[0].$authoringLevel : "section",
                            sibling: opt.sibling
                        });
                    }
                    var newField = opt.newItem ||
                    boxParent.page.createNewItem({
                        $bind: opt.$bind
                    }, boxParent);
                    this.layoutAuthoring.newMoveItem(boxParent.layoutContent, null, newField);
                    this.selectItem(newField, true);
                }
                else {
                    this.addNewItem({
                        targetItem: children[0],
                        $category: opt.$category,
                        $bind: opt.$bind
                    });
                }
            }
        }
        else {
            switch (opt.targetItem.$authoringLevel) {
                case "article":
                    var block;
                    var section = (opt.$category == "section" && opt.newItem) ? opt.newItem : opt.targetItem.page.createNewItem({
                        $category: "section"
                    }, opt.targetItem);
                    this.layoutAuthoring.newMoveItem(opt.targetItem.layoutContent, opt.sibling, section, false);
                    if (opt.$category == "block") {
                        block = opt.newItem ||
                        opt.targetItem.page.createNewItem({
                            $category: "section"
                        }, section);
                        this.layoutAuthoring.newMoveItem(section.layoutContent, null, block);
                    }
                    this.selectItem(block || section, true);
                    break;
                case "section":
                    var section;
                    if (opt.$category == "block") {
                        section = opt.newItem ||
                        opt.targetItem.page.createNewItem({
                            $category: "section"
                        }, opt.targetItem);
                        this.layoutAuthoring.newMoveItem(opt.targetItem.layoutContent, opt.sibling, section, false);
                    }
                    else {
                        section = opt.newItem ||
                        opt.targetItem.page.createNewItem({
                            $category: "section"
                        }, opt.targetItem.boxParent);
                        this.layoutAuthoring.newMoveItem(opt.targetItem.layoutParent, opt.targetItem, section, false);
                    }
                    this.selectItem(section, true);
                    break;
                case "block":
                    var block, section, sibling;
                    if (opt.$category == "section") {
                        //boxParent is parent section
                        section = opt.targetItem.page.createNewItem({
                            $category: "section"
                        }, opt.targetItem.boxParent.boxParent);
                        this.layoutAuthoring.newMoveItem(opt.targetItem.boxParent.layoutParent, opt.targetItem.boxParent, section, false);
                    }
                    else {
                        section = opt.targetItem.boxParent;
                        sibling = opt.targetItem;
                    }
                    block = opt.newItem ||
                    opt.targetItem.page.createNewItem({
                        $category: "section"
                    }, section);
                    this.layoutAuthoring.newMoveItem(section.layoutContent, sibling, block, false);
                    this.selectItem(block, true);
                    break
                case "field":
                    var block, section;
                    var sectionParent = opt.targetItem.boxParent.$authoringLevel == "section" ? opt.targetItem.boxParent : opt.targetItem.boxParent.boxParent;
                    if (opt.$category == "section") {
                        section = opt.newItem ||
                        opt.targetItem.page.createNewItem({
                            $category: "section"
                        }, sectionParent.boxParent);
                        this.layoutAuthoring.newMoveItem(sectionParent.layoutParent, sectionParent, section, false);
                    }
                    else {
                        var sibling = (opt.targetItem.boxParent.$authoringLevel == "block") ? opt.targetItem.boxParent : null;
                        block = opt.newItem ||
                        opt.targetItem.page.createNewItem({
                            $category: "section"
                        }, sectionParent);
                        this.layoutAuthoring.newMoveItem(opt.targetItem.layoutParent, sibling, block, false);
                        if (opt.targetItem.boxParent.$authoringLevel == "section") {
                            for (var ii = 0, jj = sectionParent.layoutContent.items.length - 1; ii <= jj; ii++) {
                                var item = sectionParent.layoutContent.items[ii];
                                if (item != block) {
                                    this.layoutAuthoring.newMoveItem(block.layoutContent, null, item);
                                }
                            }
                        }
                    }
                    this.selectItem(block || section, true);
                    break;
            }
        }
        return this.awItem;
    },
    _notifyChildFields: function(parentItem, value, binding){
        if (parentItem.layoutContent) {
            for (var ii = 0, jj = parentItem.layoutContent.items.length; ii < jj; ii++) {
                var childItem = parentItem.layoutContent.items[ii];
                if (childItem.$authoringLevel == "field") {
                    var metaData = {}
                    metaData[binding] = value;
                    childItem.applyDesignMetaData(metaData, true);
                }
                else {
                    this._notifyChildFields(childItem, value, binding);
                }
            }
        }
    },
    _notifyChildBox: function(parentItem, metaData){
        parentItem.applyDesignMetaData(metaData);
        if (parentItem.layoutContent) {
            for (var ii = 0, jj = parentItem.layoutContent.items.length; ii < jj; ii++) {
                var childItem = parentItem.layoutContent.items[ii];
                if (childItem.$authoringLevel != "field") {
                    this._notifyChildBox(childItem, metaData);
                }
            }
        }
    },
    
    dispose: function(){
        document.site._eventListener.bindAuthoringEvent(false);
        if (this.targetPage) {
            this.toggleItemAuthoring(this.targetPage, false);
            if (this.targetPage.menuBar) {
                this.targetPage.menuBar._slot.style.display = this.targetOrigStatus.menuBarDisplay;
            }
            delete this.targetPage.authoringPage;
            this.targetPage = null;
        }
        if (this.paletteSlot) {
            document.site.removeDomChild(this.paletteSlot);
            this.paletteSlot = null;
        }
        if (this.treeContent) {
            this.treeContent.toggle(false, true);
        }
        this.treeContent = this._overItem = this._oveItems = this.targetPage = this.awItem = null;
        if (this.layoutAuthoring) {
            this.layoutAuthoring.dispose();
        }
        this.page = this.layoutAuthoring = this.paletteSlot = this._paletteBar = null;
        RawPage.prototype.dispose.call(this);
    }
});
