"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var ItemPalette = require("./itemPalette").ItemPalette;
var TreeContent = require("./aside/treeContent").TreeContent;
var DragDrop = require("./aside/dragDrop").DragDrop;
var RowResizer = require("./aside/rowResizer").RowResizer;

function AuthorPage(){
}

exports.AuthorPage = helpers.defineClass(AuthorPage, RawPage, {
    notifyUpdate: function(isUpdated){
        this.isUpdated = isUpdated !== false;
        this.palette.notifySteps();
    },
    beginAuthoring: function(awPageSlot){
        this.preferences = document.site.ensurePreferences();
        this.preferences.authoring = this.preferences.authoring || {};
        this._initializePage();
        this.layoutSlot = awPageSlot;
        this.localize = locale.resources(module)();
        this.bindEvents();
        (this.targetPage = document.site.mainPage).authoringPage = this;
        this.targetPage.isOnAuthoring = true;
        this.targetOrigStatus = {};
        if (this.targetPage.menuBar) {
            this.targetOrigStatus.menuBarDisplay = this.targetPage.menuBar._slot.style.display || "";
            this.targetPage.menuBar._slot.style.display = "none";
        }
        this.paletteSlot = document.createElement("div");
        this.paletteSlot.className = "s-aw-palette-slot";
        this.targetPage._item.appendChild(this.paletteSlot);
        this.$sourceItem = helpers.object.clone(this.targetPage.$item, true);
        this.$defaultItem = helpers.object.clone(document.site.ensureDefaultArticle(this.targetPage.$prototype.$article, this.targetPage.$prototype), true);
        this.isUpdated = false;
        document.controller.loadWorkingCopy({
            menu: {
                $url: this.targetPage.$authorUrl
            },
            article: this,
            callback: function(){
                document.site.resize();
            }
        });
        document.site._eventListener.bindAuthoringEvent(true);
        this.treeContent = new TreeContent();
        this.rowResizer = new RowResizer();
        this.rowResizer.load();
    },
    onBeforeMainPageChange: function(continueChanging){
        var self = this;
        if (self.isUpdated) {
            document.site.showMessage({
                $title: self.localize.aw_updateMessageTitle,
                $message: self.localize.aw_cancelMessageText,
                $type: "question",
                $buttons: "yesnocancel",
                callback: function(response){
                    if (response.$id == "yes") {
                        self.menuItems.$save[0].click();
                        setTimeout(function(){
                            document.site.openAuthoringPage(false);
                            continueChanging();
                        }, 300);
                    }
                    else {
                        if (response.$id == "no") {
                            document.site.openAuthoringPage(false);
                            continueChanging();
                        }
                    }
                }
            });
            return false;
        }
        document.site.openAuthoringPage(false);
        return true;
    },
    onMenuClick: function(menuItem){
        var self = this;
        switch (menuItem.$item.$bind) {
            case "$close":
                if (self.isUpdated) {
                    document.site.showMessage({
                        $title: self.localize.aw_updateMessageTitle,
                        $message: self.localize.aw_cancelMessageText,
                        $type: "question",
                        $buttons: "yesnocancel",
                        callback: function(response){
                            if (response.$id == "yes") {
                                self.menuItems.$save[0].click();
                            }
                            else {
                                if (response.$id == "no") {
                                    document.site.openAuthoringPage(false);
                                    document.controller.reloadMainPage();
                                }
                            }
                        }
                    });
                }
                else {
                    document.site.openAuthoringPage(false);
                }
                return false;
            default:
                if (menuItem.$sourceBind == "$aw_quit") {
                    document.site.showDiagnoses(null);
                    document.site.openAuthoringPage(false);
                    return false
                }
                break;
        }
        if (menuItem.page != this && menuItem.page != this.palette) {
            if (!menuItem.page.isAuthoringFriend && !menuItem.boxParent.isDiagnoseMenus) {
                return !menuItem.page.isOnAuthoring;
            }
        }
        return true;
    },
    drawBox: function(){
        (this.$$item = $(this.layoutSlot)).empty().show();
        this._paletteBar = document.createElement("div");
        this._paletteBar.setAttribute("id", "s-aw-page-left");
        this.layoutSlot.appendChild(this._paletteBar);
        
        var actions = document.createElement("div");
        actions.setAttribute("id", "s-aw-page-right");
        var close = this.loadNewItem(actions, {
            $bind: "$close",
            $title: this.localize.aw_close,
            $category: "link",
            $icon: {
                $mode: "icon"
            },
            $skin: "s-aw-page-close"
        });
        close.setMenu({
            $title: this.localize.aw_close
        }, null);
        this.loadNewItem(actions, {
            $bind: "$save",
            $category: "link",
            $skin: "s-aw-page-save"
        });
        this.layoutSlot.appendChild(actions);
        (this.palette = new ItemPalette()).loadBox();
        
        document.site.resize();
        
        this.toggleItemAuthoring(this.targetPage, true);
        this.selectItem(this.targetPage, true);
    },
    selectItem: function(item, select, ensureSelect){
        if (this.awLayout && this.awLayout.disposed) {
            this.awLayout = null;
        }
        if (this.awItem && this.awItem.disposed) {
            this.awItem = null;
        }
        if (item && item.disposed) {
            item = this.awItem;
        }
        if (select) {
            item = item || this.targetPage;
            if (ensureSelect || item != this.awItem) {
                this.selectItem(null, false);
                if (item.isLayout) {
                    this.awItem = item.boxParent;
                    this.awLayout = item;
                }
                else {
                    this.awItem = item;
                    this.awLayout = null;
                }
                this.scrollToItem(this.awLayout || this.awItem);
                this.palette.showSettingPanel();
                if (this.awLayout) {
                    this._toggleItemCss(this.awLayout, "s-aw-designed", true);
                }
                this._toggleItemCss(item, "s-aw-designed", true);
                document.site.resize();
            }
        }
        else {
            item = item || this.awItem;
            if (item) {
                this._toggleItemCss(item, "s-aw-designed", false);
            }
            if (this.awLayout) {
                this._toggleItemCss(this.awLayout, "s-aw-designed", false);
            }
        }
    },
    defineLayoutChildAuhtoringLevel: function(layout){
        if (layout.boxParent.$authoringLevel == "block") {
            layout.$chilAuthoringLevel = "field";
        }
        else {
            var children = this.getItemsFromLayout(layout);
            if (children.length > 0) {
                layout.$chilAuthoringLevel = children[0].$authoringLevel;
            }
            else {
                layout.$chilAuthoringLevel = layout.boxParent.$authoringLevel == "section" ? "block" : "section";
            }
        }
    },
    toggleDropArea: function(spaceBox, dropItem){
        if (dropItem) {
            if (spaceBox.deleteLink) {
                spaceBox.deleteLink.style.display = "none";
            }
            if (!spaceBox.dropArea) {
                spaceBox.dropArea = document.createElement("div");
                spaceBox.dropArea.className = "s-aw-drop-area-" + dropItem.$authoringLevel;
                spaceBox.dropArea.textContent = this.localize["aw_drop_" + dropItem.$authoringLevel];
                spaceBox._body.appendChild(spaceBox.dropArea);
            }
        }
        else {
            if (spaceBox.deleteLink) {
                spaceBox.deleteLink.style.display = "";
            }
            if (spaceBox.dropArea) {
                document.site.removeDomChild(spaceBox.dropArea);
                spaceBox.dropArea = null;
            }
        }
    },
    toggleItemAuthoring: function(item, enable){
        var site = document.site;
        if (item.$item) {
            if (item.$item.$category == "menus" || item.$item.$category == "link") {
                return;
            }
        }
        if (item.isSpaceBox) {
            if (enable) {
                if (!item.deleteLink) {
                    if (item.boxParent.$authoringLevel == "block") {
                        item.$authoringLevel = "field";
                    }
                    else {
                        var children = this.getItemsFromLayout(item.boxParent.layoutContent);
                        if (children.length > 0) {
                            item.$authoringLevel = children[0].$authoringLevel;
                        }
                        else {
                            item.$authoringLevel = item.boxParent.$authoringLevel == "section" ? "block" : "section";
                        }
                    }
                    item.deleteLink = document.createElement("a");
                    item.deleteLink.className = "s-aw-layout-delete";
                    item.deleteLink.textContent = this.localize.aw_deleteColumn;
                    item._body.appendChild(item.deleteLink);
                }
            }
            else {
                site.removeDomChild(item.deleteLink);
                item.deleteLink = null;
                site.toggleClass(item.layoutSlot, "s-aw-designed", false);
                site.toggleClass(item.layoutSlot, "s-aw-over", false);
            }
            site.toggleClass(item.layoutSlot, "s-aw-item", enable);
        }
        var domItem = item.dataSlot;
        if (!domItem && item.$$item) {
            domItem = item.$$item[0];
        }
        if (domItem) {
            //no domitem for layout
            if (item._tabTitle) {
                if (enable) {
                    item._tabTitle.setAttribute("data-s-item", item.id);
                }
                else {
                    site.toggleClass(item._tabTitle, "s-aw-designed", false);
                    site.toggleClass(item._body, "s-aw-designed", false);
                    site.toggleClass(item._tabTitle, "s-aw-over", false);
                    site.toggleClass(item._body, "s-aw-over", false);
                    item._tabTitle.removeAttribute("data-s-item");
                }
                site.toggleClass(item._tabTitle, "s-aw-item", enable);
                site.toggleClass(item._body, "s-aw-item", enable);
                site.toggleClass(item._tabTitle, "s-aw-light", enable && this.$isLightMode);
                site.toggleClass(item._body, "s-aw-light", enable && this.$isLightMode);
            }
            if (enable) {
                domItem.setAttribute("data-s-item", item.id);
                item.layoutSlot.setAttribute("data-s-item", item.id);
                site.toggleClass(item.layoutSlot, "s-aw-on", true);
            }
            else {
                if (domItem) {
                    if (item._body) {
                        site.toggleClass(item._body, "s-aw-over", false);
                        site.toggleClass(item._body, "s-aw-designed", false);
                    }
                    if (item._header) {
                        site.toggleClass(item._header, "s-aw-over", false);
                        site.toggleClass(item._header, "s-aw-designed", false);
                    }
                    site.toggleClass(item.layoutSlot, "s-aw-on", false);
                    site.toggleClass(item.layoutSlot, "s-aw-designed", false);
                    site.toggleClass(item.layoutSlot, "s-aw-over", false);
                    site.toggleClass(domItem, "s-aw-designed", false);
                    site.toggleClass(domItem, "s-aw-over", false);
                    domItem.removeAttribute("data-s-item");
                    item.layoutSlot.removeAttribute("data-s-item");
                }
            }
            if (item.$authoringLevel == "field") {
                item.layoutSlot.style.display = (this.$isLightMode || (item.isVisible === false)) ? "none" : "";
            }
            if (item.isLayout) {
                if (enable) {
                    if (item.$layout.$layoutType == "row") {
                        site.toggleClass(item._item, "s-aw-item", true);
                        if (item.layoutSlot) {
                            site.toggleClass(item.layoutSlot, "s-aw-item", true);
                        }
                        if (this.$isLightMode) {
                            var children = this.getItemsFromLayout(item);
                            if (!children.length || children[0].$authoringLevel == "field") {
                                item._item.style.display = "none";
                            }
                        }
						else{
							item._item.style.display = "";
						}
                    }
                }
                else {
                    site.toggleClass(domItem, "s-aw-item", false);
                    if (item.layoutSlot) {
                        site.toggleClass(item.layoutSlot, "s-aw-item", false);
                    }
                    item._item.style.display = "";
                }
            }
            else {
                if (item.layoutSlot) {
                    site.toggleClass(item.layoutSlot, "s-aw-item", enable);
                }
                site.toggleClass(domItem, "s-aw-item", enable);
                site.toggleClass(domItem, "s-aw-light", enable && this.$isLightMode);
            }
        }
        
        if (item.isLayout) {
            if (item.items) {
                for (var ii = 0, jj = item.items.length; ii < jj; ii++) {
                    this.toggleItemAuthoring(item.items[ii], enable);
                }
            }
            this.ensureRowSeparators(item, enable);
        }
        else {
            if (this.preferences.authoring.$isVisibilityForced) {
                if (item.isVisible === false) {
                    this._toggleForcedVisibility(item, true);
                }
                else {
                    if (item.isVisibilityForced) {
                        this._toggleForcedVisibility(item, false);
                    }
                }
            }
            else {
                if (item.isVisibilityForced) {
                    this._toggleForcedVisibility(item, false);
                }
            }
            if (item.layoutContent) {
                //items = item.layoutContent.items;
                this.toggleItemAuthoring(item.layoutContent, enable);
            }
        }
    },
    _toggleForcedVisibility: function(item, forced){
        item.isVisibilityForced = forced;
        if (item.layoutSlot) {
            item.layoutSlot.style.display = (forced || item.isVisible) ? "" : "none";
            document.site.toggleClass(item.layoutSlot, "s-aw-visibility-forced", forced && !item.isVisible);
        }
        var domItem = item._item || item._domItem;
        if (domItem) {
            domItem.style.display = (forced || item.isVisible) ? "" : "none";
            document.site.toggleClass(domItem, "s-aw-visibility-forced", forced && !item.isVisible);
        }
    },
    forceLayoutVisibility: function(layout, forced){
        if (layout && layout.items) {
            for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                var item = layout.items[ii];
                if (!item.isLayout) {
                    this._toggleForcedVisibility(item, forced);
                }
                this.forceLayoutVisibility(item.isLayout ? item : item.layoutContent, forced);
            }
        }
    },
    forceVisibility: function($isVisibilityForced){
        this.preferences.authoring.$isVisibilityForced = $isVisibilityForced;
        this.forceLayoutVisibility(this.targetPage.layoutContent, $isVisibilityForced);
    },
    _toggleItemCss: function(item, css, show){
        if (item.$$item) {
            if (item._tabTitle) {
                document.site.toggleClass(item._tabTitle, css, show);
                document.site.toggleClass(item._body, css, show);
            }
            else {
                if (item.dataSlot) {
                    document.site.toggleClass(item.dataSlot, css, show); //page
                }
                else {
                    if (item.layoutSlot) {
                        document.site.toggleClass(item.layoutSlot, css, show);
                    }
                }
                if (item.isLayout) {
                    document.site.toggleClass(item._item, css, show);
                }
                if (item._header) {
                    document.site.toggleClass(item._header, css, show);
                }
                if (item._body) {
                    document.site.toggleClass(item._body, css, show);
                }
            }
        }
    },
    toggleOverItem: function(item, isOver){
        var css = "s-aw-over";
        this._toggleItemCss(item, css, isOver);
        if (isOver && this._overItem != item) {
            if (this._oveItems) {
                for (var ii = 0, jj = this._oveItems.length; ii < jj; ii++) {
                    this._toggleItemCss(this._oveItems[ii], css, false);
                }
            }
            this._oveItems = [];
            this._overItem = item;
            while (item) {
                this._toggleItemCss(item, css, true);
                this._oveItems.push(item);
                item = item.boxParent;
            }
        }
    },
    applyChange: function(newData){
        if (newData && newData.$actions && newData.$actions.$save) {
            if (newData.$actions.$save.$isDisabled && newData.$actions.$save.$isRequested === false) {
                if (newData.$url) {
                    this.targetPage.$authorUrl = newData.$authorUrl;
                    this.$prototype.$representationUrl = newData.$authorUrl;
                }
                if (newData.$actions.$save.$diagnoses) {
                    for (var ii = 0, jj = newData.$actions.$save.$diagnoses.length; ii < jj; ii++) {
                        if (newData.$actions.$save.$diagnoses[ii].severity !== "success") {
                            return false;
                        }
                    }
                }
                delete newData.$actions.$save;
                this.notifyUpdate(false);
                document.site.showDiagnoses({
                    $diagnoses: [{
                        message: this.localize.aw_saveMessageText,
                        severity: "success"
                    }],
                    $links: {
                        $aw_quit: {
                            $title: this.localize.aw_quit
                        }
                    }
                });
            }
        }
        RawPage.prototype.applyChange.call(this, newData);
    },
    notifyActionChange: function(target, value, notifyServer){
        this.ensureSendBag().content = {
            $article: this.targetPage.$item
        };
        /*if (!this.dataset.application) {
         var httpQuery = document.controller.parseUrl(this.targetPage.$prototype.$representationUrl);
         data.application = httpQuery.$urlParts.endpointParts.application;
         data.contract = httpQuery.$urlParts.endpointParts.contract;
         data.representation = httpQuery.$urlParts.representationRoot;
         data.facet = httpQuery.$urlParts.$facet;
         }*/
        RawPage.prototype.notifyActionChange.call(this, target, value, notifyServer);
    },
    notifyDataChange: function(field, value){
        this.ensureSendBag().content = {
            $article: this.targetPage.$item
        };
        RawPage.prototype.notifyDataChange.call(this, field, value);
    },
    addNewSection: function(layoutParent, dropItem, index){
        layoutParent.removeSpaceBox();
        var newSection = layoutParent.loadChildItem(dropItem, dropItem ? null : {
            $category: "section",
            $applyDefaultTitle: true
        }, index);
        if (!newSection.layoutContent) {
            newSection.openBox(true);
        }
        return newSection;
    },
    wrapLayoutContent: function(layoutContent){
        var $newLayout = {
            $layoutType: layoutContent.$layout.$layoutType,
            $widths: layoutContent.$layout.$widths,
            $fitToContent: layoutContent.$layout.$fitToContent
        };
        var items = layoutContent.items.slice(0);
        for (var ii = 0, jj = items.length; ii < jj; ii++) {
            layoutContent.extractItem(items[ii]);
        }
        this.newConvert(layoutContent, {
            $layoutType: "stack"
        });
        var prevLayoutContent = layoutContent.createChildItem($newLayout);
        prevLayoutContent.removeSpaceBox(true);
        for (var ii = 0, jj = items.length; ii < jj; ii++) {
            prevLayoutContent.loadChildItem(items[ii], null, ii);
        }
        prevLayoutContent.$chilAuthoringLevel = layoutContent.$chilAuthoringLevel;
        delete layoutContent.$chilAuthoringLevel;
        return prevLayoutContent;
    },
    addSiblingToLayout: function(targetLayout, $insertAt){
        if (!targetLayout.layoutParent) {
            return this.addSiblingToLayout(this.wrapLayoutContent(targetLayout), $insertAt);
        }
        var $newLayout = {
            $layoutType: targetLayout.$layout.$layoutType,
            $widths: targetLayout.$layout.$widths,
            $fitToContent: targetLayout.$layout.$fitToContent
        };
        var targetItemIndex = targetLayout.layoutParent.getItemIndex(targetLayout, true);
        if ($insertAt == "bottom") {
            targetItemIndex++;
        }
        return targetLayout.layoutParent.loadChildItem(null, $newLayout, targetItemIndex);
    },
    insertFieldsWrapper: function(targetItem, $insertAt){
        var newChild;
        var items = targetItem.layoutContent.items.slice(0);
        if (this.hasLevelItems(items, "field")) {
            for (var ii = 0, jj = items.length; ii < jj; ii++) {
                targetItem.layoutContent.extractItem(items[ii]);
            }
            var $prevLayoutType = {
                $layoutType: targetItem.layoutContent.$layout.$layoutType,
                $widths: targetItem.layoutContent.$layout.$widths,
                $fitToContent: targetItem.layoutContent.$layout.$fitToContent
            };
            this.newConvert(targetItem.layoutContent, {
                $layoutType: "stack"
            });
            newChild = this.addNewSection(targetItem.layoutContent, null, 0);
            this.newConvert(newChild.layoutContent, $prevLayoutType);
            newChild.layoutContent.removeSpaceBox(true);
            for (var ii = 0, jj = items.length; ii < jj; ii++) {
                newChild.layoutContent.loadChildItem(items[ii], null, ii);
            }
        }
        else {
        
            newChild = this.addNewSection(targetItem.layoutContent, null, 0);
        }
        return newChild;
    },
    addNewItem: function(targetItem, $newAuthoringLevel, $bind, dropItem, $insertAt){
        var newChild;
        var targetBoxParent = targetItem.boxParent;
        var targetItemIndex = targetItem.layoutParent ? targetItem.layoutParent.getItemIndex(targetItem.$item) : undefined;
        
        if ($insertAt !== "undefined") {
            if (targetItem.layoutParent) {
                switch (targetItem.layoutParent.$layout.$layoutType) {
                    case "stack":
                        switch ($insertAt) {
                            case "top":
                                break;
                            case "bottom":
                                targetItemIndex++;
                                break;
                            case "left":
                            case "right":
                                var rowLayout = targetItem.layoutParent.createChildItem({
                                    $layoutType: "row",
                                    $items: []
                                }, null, targetItemIndex);
                                rowLayout.loadChildItems([targetItem]);
                                rowLayout.$layout.$widths = null;
                                break;
                        }
                        break;
                    case "row":
                        switch ($insertAt) {
                            case "top":
                            case "bottom":
                                //drop in row empty cell, wrap drop in stack
                                targetItem.layoutParent.wrapIntack([targetItem], targetItemIndex);
                                targetItemIndex = ($insertAt == "top") ? 0 : 1;
                                break;
                            case "left":
                            case "right":
                                targetItem.layoutParent.$layout.$widths = null;
                                if ($insertAt == "right") {
                                    targetItemIndex++;
                                }
                                break;
                        }
                        break;
                    case "tabs":
                        if ($insertAt == "right") {
                            targetItemIndex++;
                        }
                        break;
                }
            }
            else {
                targetItemIndex = 0;
            }
        }
        if (dropItem && dropItem.isLayout) {
            if (targetItem.isLayout && !targetItem.layoutParent) {
                targetItem = this.wrapLayoutContent(targetItem);
            }
            newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
        }
        else {
            if (targetItem.isLayout && !targetItem.layoutParent) {
                targetItem = this.wrapLayoutContent(targetItem);
            }
            switch (targetItem.$chilAuthoringLevel || targetItem.$authoringLevel) {
                case "article":
                    if ($newAuthoringLevel == "field") {
                        newChild = this.addNewItem(targetItem, "section");
                        newChild = this.addNewItem(newChild, $newAuthoringLevel, $bind, dropItem);
                    }
                    else {
                        if (!dropItem) {
                            newChild = this.insertFieldsWrapper(targetItem);
                            if ($newAuthoringLevel == "block") {
                                newChild = this.insertFieldsWrapper(newChild);
                            }
                        }
                        else {
                            newChild = this.addNewSection(targetItem.layoutContent, dropItem, 0);
                        }
                    }
                    break;
                case "section":
                    switch ($newAuthoringLevel) {
                        case "field":
                            if (dropItem) {
                                newChild = this.addNewSection(targetItem.layoutParent, null, targetItemIndex);
                                newChild = newChild.layoutContent.loadChildItem(dropItem);
                            }
                            else {
                                var children = this.getItemsFromLayout(targetItem.layoutContent);
                                if (children.length == 0) {
                                    newChild = targetItem.layoutContent.loadChildItem(null, {
                                        $bind: $bind
                                    });
                                }
                                else {
                                    if (children[0].$authoringLevel == "field") {
                                        newChild = children[0].layoutParent.loadChildItem(null, {
                                            $bind: $bind
                                        }, children[0].layoutParent.getItemIndex(children[0].$item));
                                    }
                                }
                            }
                            break;
                        case "section":
                            newChild = this.addNewSection(targetItem.layoutParent, dropItem, targetItemIndex);
                            break;
                        case "block":
                            if (dropItem) {
                                newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
                            }
                            else {
                                newChild = this.insertFieldsWrapper(targetItem);
                            }
                            break;
                    }
                    break;
                case "block":
                    switch ($newAuthoringLevel) {
                        case "field":
                            if (dropItem) {
                                newChild = this.addNewSection(targetItem.layoutParent, null, targetItemIndex);
                                newChild = newChild.layoutContent.loadChildItem(dropItem);
                            }
                            else {
                                newChild = targetItem.layoutContent.loadChildItem(null, {
                                    $bind: $bind
                                });
                            }
                            break;
                        case "section":
                            if (dropItem) {
                                var children = dropItem.layoutContent.items.slice(0);
                                if (this.hasLevelItems(children, "block")) {
                                    targetItem.layoutParent.loadChildItems(children, targetItemIndex);
                                    targetItem.layoutParent.removeItem(dropItem, true);
                                    newChild = targetItem;
                                }
                                else {
                                    newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
                                }
                            }
                            else {
                                newChild = this.addNewItem(targetItem.boxParent, $newAuthoringLevel);
                            }
                            break;
                        case "block":
                            newChild = this.addNewSection(targetItem.layoutParent, dropItem, targetItemIndex);
                            break;
                    }
                    break
                case "field":
                    var sectionParent = targetBoxParent;
                    if (targetBoxParent.$authoringLevel == "block") {
                        sectionParent = targetBoxParent.boxParent; //else $authoringLevel== section or article = no need of boxparent
                    }
                    switch ($newAuthoringLevel) {
                        case "section":
                        case "block":
                            if (dropItem) {
                                //dragged section							
                                var children = this._extractFields(dropItem.layoutContent);
                                targetItem.layoutParent.loadChildItems(children, targetItemIndex);
                                targetItem.layoutParent.removeItem(dropItem, true);
                                newChild = targetItem;
                            }
                            else {
                                var layoutParent, newTopChild;
                                if ($newAuthoringLevel == "block") {
                                    layoutParent = sectionParent.layoutContent;
                                    if (targetItem.boxParent.$authoringLevel == "block") {
                                        targetItemIndex = targetItem.boxParent.layoutParent.getItemIndex(targetItem.boxParent.$item);
                                    }
                                }
                                else {
                                    if (sectionParent.layoutParent) {
                                        layoutParent = sectionParent.layoutParent;
                                        targetItemIndex = layoutParent.getItemIndex(sectionParent.$item);
                                    }
                                    else {
                                        layoutParent = sectionParent.layoutContent;
                                        targetItemIndex = undefined;
                                    }
                                }
                                var children = layoutParent.items.slice(0);
                                newTopChild = newChild = this.addNewSection(layoutParent, null, targetItemIndex);
                                if (newTopChild.$authoringLevel == "section" && $newAuthoringLevel == "block") {
                                    newChild = this.addNewSection(newTopChild.layoutContent);
                                }
                                if (targetItem.boxParent == newTopChild.boxParent) {
                                    newChild.layoutContent.loadChildItems(children);
                                }
                            }
                            break;
                        case "field":
                            newChild = targetItem.layoutParent.loadChildItem(dropItem, dropItem ? null : {
                                $bind: $bind
                            }, targetItemIndex);
                            break;
                            
                    }
                    break;
            }
        }
        if (!newChild) {
            newChild = targetItem && targetItem.isSpaceBox;
            newChild = newChild || this.targetPage;
        }
        
        if (targetItem && targetItem.isSpaceBox) {
            targetItem.layoutParent.removeItem(targetItem, true, false);
        }
        return newChild;
    },
    
    _notifyChildFields: function(parentItem, value, binding){
        var items = parentItem.layoutContent ? parentItem.layoutContent.items : parentItem.items;
        if (items) {
            for (var ii = 0, jj = items.length; ii < jj; ii++) {
                var childItem = items[ii];
                if (childItem.$authoringLevel == "field") {
                    var metaData = {}
                    metaData[binding] = value;
                    childItem.applyDesignMetaData(metaData, true);
                }
                else {
                    this._notifyChildFields(childItem, value, binding);
                }
            }
        }
    },
    _notifyChildBox: function(parentItem, metaData){
        var items = parentItem.layoutContent ? parentItem.layoutContent.items : parentItem.items;
        parentItem.applyDesignMetaData(metaData, true);
        if (parentItem.layoutContent) {
            for (var ii = 0, jj = items.length; ii < jj; ii++) {
                var childItem = items[ii];
                if (childItem.$authoringLevel != "field") {
                    this._notifyChildBox(childItem, metaData);
                }
            }
        }
    },
    findTargetItemEvent: function(target, findLayout){
        var item;
        if (findLayout || target.getAttribute("data-s-layout")) {
            item = document.controller.findLayout($(target));
        }
        else {
            item = document.controller.findItem($(target));
        }
        return item;
    },
    bindTabletEvents: function(){
        var self = this;
        document.site.$$layoutSlot.delegate(".s-aw-item", "touchstart.author", function(event){
            if (document.site.DDAuthoring) {
                var moveEvent = event.originalEvent.touches[0];
                document.site.DDAuthoring.stop(moveEvent);
                delete document.site.DDAuthoring;
            }
            else {
                var item = self.findTargetItemEvent(this);
                if (item) {
                    if (item != self.targetPage && item.page == self.targetPage) {
                        document.site.requestedDDAuthoringItem = item;
                        return false;
                    }
                }
            }
            // return false;
        }).delegate(".s-aw-item", "touchmove.author", function(event){
            var item = self.findTargetItemEvent(this);
            if (item) {
                if (item != self.targetPage) {
                    if (document.site.requestedDDAuthoringItem) {
                        (document.site.DDAuthoring = new DragDrop()).start(self.targetPage.$$scrollview);
                    }
                    else {
                        if (document.site.DDAuthoring) {
                            if (item.layoutParent) {
                                var moveEvent = event.originalEvent.touches[0];
                                document.site.DDAuthoring.moveDragImage(moveEvent, item);
                            }
                        }
                    }
                }
                self.toggleOverItem(item, true);
            }
            return false;
        });
    },
    authorizeEvent: function(item){
        return (item.page && ((item.page == this) || (item.page == this.palette)));
    },
    bindEvents: function(){
        var self = this;
        document.site.$$layoutSlot.delegate(".s-aw-item", "click.author", function(event){
            self.onClickItem(self.findTargetItemEvent(this), this);
            return false;
        }).delegate(".s-aw-item", "mousedown.author", function(event){
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.stop(event);
                delete document.site.DDAuthoring;
            }
            else {
                var item = self.findTargetItemEvent(this);
                if (item) {
                    if (item != self.targetPage && item.page == self.targetPage) {
                        document.site.requestedDDAuthoringItem = item;
                        return false;
                    }
                }
            }
            // return false;
        }).delegate(".s-aw-item", "mousemove.author", function(event){
            if (!self.rowResizer.onResizing) {
                var item = self.findTargetItemEvent(this);
                if (item) {
                    if (item != self.targetPage) {
                        if (document.site.requestedDDAuthoringItem) {
                            (document.site.DDAuthoring = new DragDrop()).start(self.targetPage.$$scrollview);
                        }
                        else {
                            if (document.site.DDAuthoring) {
                                if (item.layoutParent || item.isLayout) {
                                    document.site.DDAuthoring.moveDragImage(event, item);
                                }
                            }
                        }
                    }
                    self.toggleOverItem(item, true);
                }
                return false;
            }
            return true;
        }).delegate(".s-aw-item", "mouseenter.author mouseleave.author", function(event){
            if (!self.rowResizer.onResizing) {
                if (document.site.DDAuthoring) {
                    var $$item = $(this);
                    var layout = self.findTargetItemEvent(this, true);
                    if (layout && layout.$layout.$layoutType == "tabs") {
                        if (event.type == "mouseenter") {
                            var tabItem = self.findTargetItemEvent(this);
                            self._ddTabEnter = setTimeout(function(){
                                if (tabItem && tabItem.$item) {
                                    if (!tabItem.$item.$opened) {
                                        tabItem.openBox(true);
                                    }
                                }
                            }, 500);
                        }
                        else {
                            if (self._ddTabEnter) {
                                clearTimeout(self._ddTabEnter);
                                delete self._ddTabEnter;
                            }
                        }
                    }
                }
                return false;
            }
            return true;
            // return false;
        }).delegate(".s-aw-layout-delete", "click.author", function(){
            if (!document.site.DDAuthoring) {
                delete document.site.requestedDDAuthoringItem;
                var spaceBox = document.controller.findItem($(this));
                setTimeout(function(){
                    self.deleteLayout(spaceBox);
                    self.endTargetPageUpdate();
                }, 10);
            }
            return false;
        });
    },
    onClickItem: function(item, target){
        var article = document.controller.findArticle($(target));
        if (article.isOnAuthoring) {
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.stop(event);
                delete document.site.DDAuthoring;
            }
            else {
                delete document.site.requestedDDAuthoringItem;
                item = item || document.controller.findItem($(target));
                if (item) {
                    if (item.isSpaceBox) {
                        item = item.boxParent;
                    }
                    if (item.isMenuGroup && item.contextField) {
                        return false;
                    }
                    if (item && (item != this.palette && item.page != this.palette)) {
                        this.selectItem(item, true, true);
                    }
                }
            }
        }
        else {
            if (article.page != this && article.page != this.palette) {
                return false;
            }
        }
        return true;
    },
    _extractFields: function(layout, fields, onlyDirectChild){
        fields = fields || [];
        if (layout) {
            for (var ii = layout.items.length - 1; ii >= 0; ii--) {
                var item = layout.items[ii];
                if (item != layout.boxParent) {
                    if (item.$authoringLevel === "field") {
                        fields.push(item);
                    }
                    else {
                        if (onlyDirectChild && !item.isLayout) {
                            continue;
                        }
                        fields = this._extractFields(item.isLayout ? item : item.layoutContent, fields);
                    }
                }
            }
        }
        return fields;
    },
    hasLevelItems: function(items, $authoringLevel){
        var res = false;
        if (items) {
            for (var ii = 0, jj = items.length; ii < jj && !res; ii++) {
                var item = items[ii];
                if (item.$authoringLevel == $authoringLevel && !item.isSpaceBox) {
                    res = true;
                }
                else 
                    if (item.isLayout) {
                        res = this.hasLevelItems(item.items, $authoringLevel);
                    }
            }
        }
        return res;
    },
    getItemsFromLayout: function(layout, children, $authoringLevel){
        if (!children) {
            children = [];
        }
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            var item = layout.items[ii];
            if (item != layout.boxParent) {
                if (item.isLayout) {
                    children = this.getItemsFromLayout(item, children, $authoringLevel);
                }
                else {
                    if (!$authoringLevel || ($authoringLevel == item.$authoringLevel)) {
                        children.push(item);
                    }
                }
            }
        }
        return children;
    },
    getItemSettings: function($layout, $items){
        if (!$items) {
            $items = [];
        }
        if ($layout) { //null for spacebox
            for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
                var $item = $layout.$items[ii];
                if ($item.$items && !$item.$bind && !$item.$category) {
                    if (!$item.$layoutType) {
                        $item.$layoutType = "stack";
                    }
                    this.getItemSettings($item, $items);
                }
                else {
                    $items.push($item);
                }
            }
        }
        return $items;
    },
    _deleteLayoutRowItem: function(layout, deletedIndex){
        var widths = this.layoutValidator.getWidthValues(layout.$layout.$widths);
        var deletedWidth = widths[deletedIndex];
        var updatedIndex = Math.min(deletedIndex > 0 ? (deletedIndex - 1) : 1, widths.length - 1);
        widths[updatedIndex] += deletedWidth;
        widths.splice(deletedIndex, 1);
        layout.$layout.$widths = widths.join(",");
        if (layout.items.length == 1) {
            this.newConvert(layout, {
                $layoutType: "stack",
                $width: "100"
            });
        }
    },
    deleteLayout: function(spaceBox){
        var layout = spaceBox.layoutParent;
        var layoutParent = layout.layoutParent;
        var deletedIndex;
        if (spaceBox) {
            deletedIndex = layout.getItemIndex(spaceBox, true);
            layout.removeItem(spaceBox, true);
        }
        if (layout.items.length > 0 && layout.$layout.$layoutType == "row") {
            this._deleteLayoutRowItem(layout, deletedIndex);
        }
        else {
            if (layoutParent) {
                layoutParent.removeItem(layout, true);
                if (layoutParent.$layout.$layoutType == "row") {
                    this._deleteLayoutRowItem(layoutParent, deletedIndex);
                }
            }
            else {
                layoutParent = layout.boxParent.layoutParent;
                layoutParent.removeItem(layout.boxParent, true, false);
            }
        }
    },
    endTargetPageUpdate: function(selectedItem){
        this.layoutValidator.validate(this.targetPage.layoutContent, true);
        this.selectItem(selectedItem || this.awItem, true, true);
        this.notifyUpdate();
    },
    newConvert: function(layout, $newLayout){
        var $oldLayoutType = layout.$layout.$layoutType;
        var $oldWidths = layout.$layout.$widths;
        var isTabLayout = $newLayout.$layoutType == "tabs";
        if (layout._tabs && !isTabLayout) {
            document.site.removeDomChild(layout._tabs);
            delete layout._tabs;
        }
        //replace layout properties by new ones
        delete layout.$layout.$fitToContent;
        delete layout.$layout.$widths;
        if ($newLayout.$fitToContent != undefined) {
            layout.$layout.$fitToContent = $newLayout.$fitToContent;
        }
        if ($newLayout.$widths != undefined) {
            layout.$layout.$widths = $newLayout.$widths;
        }
        layout.$layout.$layoutType = $newLayout.$layoutType;
        layout.ensureLayoutMode();
        
        if ($oldLayoutType == "row") {
            var oldWidths = $oldWidths.split(",");
            var newWidths = (layout.$layout.$widths || "100").split(",");
            if (oldWidths.length > newWidths.length) {
                var targetCell = layout.items[newWidths.length - 1]
                var targetLayout = targetCell;
                var outofItems = layout.items.slice(newWidths.length);
                for (var ii = 0, jj = outofItems.length; ii < jj; ii++) {
                    var item = outofItems[ii];
                    if (item.isSpaceBox) {
                        layout.removeItem(item, true);
                    }
                    else {
                        if (targetCell.isSpaceBox) {
                            layout.removeItem(targetCell, true);
                        }
                        if (targetCell.isLayout) {
                            if (targetCell.$layout.$layoutType == "stack") {
                                if (item.isLayout && item.$layout.$layoutType == "stack") {
                                    item.moveItems(targetCell);
                                    layout.removeItem(item, true);
                                }
                                else {
                                    targetCell.loadChildItems([item]);
                                }
                            }
                            else {
                                targetLayout = layout.wrapIntack([targetCell], layout.getItemIndex(targetCell.$item));
                                targetLayout.loadChildItems([item]);
                            }
                        }
                        else {
                            if (targetCell.isDisposed) {
                                //previous was removed spaceBox
                                layout.loadChildItems([item]);
                            }
                            else {
                                targetLayout = layout.wrapIntack([targetCell], layout.getItemIndex(targetCell.$item));
                                targetLayout.loadChildItems([item]);
                            }
                        }
                    }
                }
            }
        }
        else {
            if (layout.items.length > 1) {
                layout.wrapIntack(layout.items.slice(0));
            }
        }
        if (isTabLayout) {
            var children = this.getItemsFromLayout(layout);
            for (var ii = 0, jj = children.length; ii < jj; ii++) {
                if (!children[ii].isSpaceBox) {
                    layout.loadChildItem(children[ii]);
                }
            }
            var toClean = layout.items.slice(0);
            for (var ii = 0, jj = toClean.length; ii < jj; ii++) {
                var item = toClean[ii];
                if (item.isSpaceBox || !item.isSection) {
                    layout.removeItem(item, true);
                }
            }
        }
        else {
            if (layout.$layout.$layoutType == "stack") {
                if (!layout.isSpaceBox && layout.layoutParent && layout.items.length == 1) {
                    var layoutParent = layout.layoutParent;
                    layout.moveItems(layoutParent, null, layoutParent.getItemIndex(layout.$item));
                    layoutParent.removeItem(layout, true);
                    layout = layoutParent;
                }
            }
        }
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            var item = layout.items[ii];
            item.isTabLayout = isTabLayout;
            item.ensureLayoutMode();
            if (!item.isLayout && !isTabLayout) {
                if (item.isSection && !item._tabTitle && !item.loaded && item.$item.$opened !== false) {
                    item.openBox(true);
                }
            }
        }
        return layout;
    },
    ensureRowSeparators: function(layout, enable){
        if (enable !== false && layout.$layout.$layoutType == "row") {
            layout.rowSeparators = layout.rowSeparators || [];
            if (layout.items) {
                for (var ii = 1, jj = layout.items.length; ii < jj; ii++) {
                    var separator = layout.rowSeparators[ii - 1];
                    if (!separator) {
                        layout.rowSeparators[ii - 1] = separator = document.createElement("div");
                        separator.className = "s-aw-slot-row-sep";
                    }
                    var item = layout.items[ii];
                    separator.setAttribute("data-s-index", ii);
                    item.layoutSlot.parentNode.insertBefore(separator, item.layoutSlot);
                }
                this.removeRowSeparator(layout, Math.max(layout.items.length - 1, 0));
            }
        }
        else {
            this.removeRowSeparator(layout);
        }
    },
    removeRowSeparator: function(layout, start){
        if (layout.rowSeparators) {
            start = start || 0;
            for (var ii = start, jj = layout.rowSeparators.length; ii < jj; ii++) {
                document.site.removeDomChild(layout.rowSeparators[ii]);
                layout.rowSeparators[ii] = null;
            }
            if (start == 0) {
                layout.rowSeparators = null;
            }
        }
    },
    dispose: function(){
        document.site._eventListener.bindAuthoringEvent(false);
        if (this.rowResizer) {
            this.rowResizer.dispose();
            this.rowResizer = null;
        }
        if (this.targetPage) {
            this.targetPage.isOnAuthoring = false;
            this.toggleItemAuthoring(this.targetPage, false);
            if (this.targetPage.menuBar) {
                this.targetPage.menuBar._slot.style.display = this.targetOrigStatus.menuBarDisplay;
            }
            delete this.targetPage.authoringPage;
            this.targetPage = null;
        }
        if (this.paletteSlot) {
            document.site.removeDomChild(this.paletteSlot);
            this.paletteSlot = null;
        }
        if (this.treeContent) {
            this.treeContent.toggle(false, true);
        }
        this.treeContent = this._overItem = this._oveItems = this.targetPage = this.awItem = this.awLayout = null;
        if (document.site.$$layoutSlot) {
            document.site.$$layoutSlot.undelegate(".author");
        }
        this._ddTabEnter = this.page = this.paletteSlot = this._paletteBar = null;
        RawPage.prototype.dispose.call(this);
    }
});
