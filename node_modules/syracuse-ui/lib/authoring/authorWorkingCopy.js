"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;

function AuthorWorkingCopy(){
}

exports.AuthorWorkingCopy = helpers.defineClass(AuthorWorkingCopy, RawPage, {
    load: function(designedPage, actionId, onCopySave){
        var self = this;
        self.localize = document.site.localize;
        self._initializePage();
        self.diagnosePage = self.designedPage = designedPage;
        self.localize = locale.resources(module)();
        self.layoutSlot = document.createElement("div");
        self.onCopySave = onCopySave;
        document.controller.loadWorkingCopy({
            menu: {
                $url: self.designedPage.$authorUrl
            },
            article: self,
            callback: function(){
                switch (actionId) {
                    case "$save_authoring":
                        self._saveTargetArticle();
                        self.menuItems.$save[0].click();
                        break;
                    case "$saveAs_authoring":
                        self._saveTargetArticle();
                        self.menuItems.saveAs[0].click();
                        break;
                }
            }
        });
    },
    _saveTargetArticle: function(){
        this.designedPage.garbage.garbageFreeItems();
        var content = this.ensureSendBag().content = {
            $article: this.designedPage.$item
        };
    },
    drawBox: function(){
        this.loadNewItem(this.layoutSlot, {
            $category: "menus",
            $skin: "s-aw-top-actions",
            $itemIcon: {
                $mode: "icon",
                $path: "authoring/s-aw-"
            },
            $layout: {
                $layoutType: "row",
                $widths: "25,25,25,25",
                $items: [{
                    $bind: "$save",
                    $css: "s-aw-menus-save"
                }, {
                    $bind: "saveAs",
                    $css: "s-aw-menus-saveas"
                }, {
                    $bind: "$delete",
                    $css: "s-aw-menus-delete"
                }, {
                    $css: "s-aw-page-close",
                    $bind: "$close"
                }]
            }
        });
    },
    applyChange: function(newData){
        if (newData && newData.$actions) {
            var $action;
            if (newData.$actions.$save && newData.$actions.$save.$isDisabled && newData.$actions.$save.$isRequested === false) {
                $action = newData.$actions.$save;
            }
            else {
                if (newData.$actions.saveAs && newData.$actions.saveAs.$isDisabled && newData.$actions.saveAs.$isRequested === false) {
                    $action = newData.$actions.saveAs;
                }
            }
            if ($action && $action.$isDisabled && $action.$isRequested === false) {
                if (!$action.$confirm) {
                    if (newData.$authorUrl) {
                        this.designedPage.$authorUrl = newData.$authorUrl;
                    }
                    this.designedPage.showDiagnoses({
                        $diagnoses: null
                    });
                    if ($action.$diagnoses) {
                        for (var ii = 0, jj = $action.$diagnoses.length; ii < jj; ii++) {
                            var $diagnose = $action.$diagnoses[ii];
                            if (($diagnose.severity || $diagnose.$severity) !== "success") {
                                this.designedPage.showDiagnoses({
                                    $diagnoses: $action.$diagnoses
                                });
                                return false;
                            }
                        }
                    }
                    this.designedPage.showDiagnoses({
                        $diagnoses: [{
                            $message: this.localize.aw_saveMessageText,
                            $severity: "success"
                        }]
                    });
                    if (this.onCopySave) {
                        this.onCopySave();
                    }
                }
                return false;
            }
        }
        RawPage.prototype.applyChange.call(this, newData);
    },
    dispose: function(){
        if (this.layoutSlot) {
            document.site.emptyDom(this.layoutSlot);
        }
        this.onCopySave = this.layoutSlot = this.localize = this.diagnosePage = this.designedPage = null;
        RawPage.prototype.dispose.call(this);
    }
});
