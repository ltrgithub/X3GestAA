"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var crudHelper = require("./crudHelper");

function AuthorWorkingCopy() {}

exports.AuthorWorkingCopy = helpers.defineClass(AuthorWorkingCopy, RawPage, {
	load: function(targetPage, actionId, onCopySave) {
		var self = this;
		self._initializePage();
		self.diagnosePage = self.targetPage = targetPage;
		self.localize = locale.resources(module)();
		self.layoutSlot = document.createElement("div");
		self.onCopySave = onCopySave;
		document.controller.loadWorkingCopy({
			menu: {
				$url: self.targetPage.$authorUrl
			},
			article: self,
			callback: function() {
				switch (actionId) {
					case "$save_authoring":
						self._saveTargetArticle();
						self.menuItems.$save[0].click();
						break;
					case "$saveAs_authoring":
						self._saveTargetArticle();
						self.menuItems.saveAs[0].click();
						break;
				}
			}
		});
	},
	_saveTargetArticle: function() {
		this.targetPage.garbageFreeItems();
		var content = this.ensureSendBag().content = {
			$article: this.targetPage.$item
		};
	},
	drawBox: function() {
		this.loadNewItem(this.layoutSlot, {
			$layoutType: "row",
			$autoSize: true,
			$items: [{
				$category: "link",
				$bind: "$save",
				$skin: "s-aw-menus-save"
			}, {
				$category: "link",
				$bind: "saveAs",
				$skin: "s-aw-menus-saveas"
			}, {
				$category: "link",
				$bind: "$delete",
				$skin: "s-aw-menus-delete"
			}]
		});
	},
	applyChange: function(newData) {
		if (newData && newData.$actions) {
			var $action;
			if (newData.$actions.$save && newData.$actions.$save.$isDisabled && newData.$actions.$save.$isRequested === false) {
				$action = newData.$actions.$save;
			} else {
				if (newData.$actions.saveAs && newData.$actions.saveAs.$isDisabled && newData.$actions.saveAs.$isRequested === false) {
					$action = newData.$actions.saveAs;
				}
			}
			if ($action && $action.$isDisabled && $action.$isRequested === false) {
				if (newData.$authorUrl) {
					this.targetPage.$authorUrl = newData.$authorUrl;
				}
				this.targetPage.showDiagnoses({
					$diagnoses: null
				});
				if ($action.$diagnoses) {
					for (var ii = 0, jj = $action.$diagnoses.length; ii < jj; ii++) {
						var $diagnose = $action.$diagnoses[ii];
						if (($diagnose.severity || $diagnose.$severity) !== "success") {
							this.targetPage.showDiagnoses({
								$diagnoses: $action.$diagnoses
							});
							return false;
						}
					}
				}
				this.targetPage.showDiagnoses({
					$diagnoses: [{
						$message: this.localize.aw_saveMessageText,
						$severity: "success"
					}]
				});
				if (this.onCopySave) {
					this.onCopySave();
				}
				return false;
			}
		}
		RawPage.prototype.applyChange.call(this, newData);
	},
	dispose: function() {
		if (this.layoutSlot) {
			document.site.emptyDom(this.layoutSlot);
		}
		this.onCopySave = this.layoutSlot = this.localize = this.diagnosePage = this.targetPage = null;
		RawPage.prototype.dispose.call(this);
	}
});