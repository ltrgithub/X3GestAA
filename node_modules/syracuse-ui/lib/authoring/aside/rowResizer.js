"use strict";
var helpers = require('syracuse-core/lib/helpers');

function RowResizer(){
}

exports.RowResizer = helpers.defineClass(RowResizer, null, {
    load: function(){
        var self = this;
        self.percents = [16, 20, 25, 33, 40, 50, 60, 66, 75, 80, 84];
        document.site.$$layoutSlot.delegate(".s-aw-slot-sep-row", "mousedown.syraauthorresizer", function(event){
            self.start(this, event);
            return false;
        });
    },
    start: function(domSeparator, event){
        var self = this;
        if (self.stopTimeout) {
            clearTimeout(self.stopTimeout);
            delete self.stopTimeout;
        }
        self.stop();
        self.onResizing = true;
        self.startX = event.pageX;
        self.index = parseInt(domSeparator.getAttribute("data-s-index"), 10);
        self.layout = document.site.authorPage.findTargetItemEvent(domSeparator, true);
        self.widths = document.site.authorPage.layoutValidator.getWidthValues(self.layout.$layout.$widths)
        
        self.leftItem = self.layout.items[self.index - 1];
        self.leftWidth = $(self.leftItem.layoutSlot).width();
        self.rightItem = self.layout.items[self.index];
        self.rightWidth = $(self.rightItem.layoutSlot).width();
        self.offset = $(self.layout.$$item).offset();
        
        self.steps = [];
        var max = self.maxWidth = $(self.layout.$$item).width();
        var steps = [max / 6, max / 5, max / 4, max / 3, 2 * (max / 5), max / 2, 3 * (max / 5), 2 * (max / 3), 3 * (max / 4), 4 * (max / 5), 5 * (max / 6)];
        self.margin = document.site.$$body.offset();
        self.$$rowSeparator = $(domSeparator);
        
        var minWidth = 0, maxWidth = 0;
        for (var ii = 0, jj = self.widths.length; ii < jj; ii++) {
            if (ii < (self.index - 1)) {
                minWidth += self.widths[ii];
            }
            if (ii <= (self.index)) {
                maxWidth += self.widths[ii];
            }
        }
        
        minWidth = Math.max(self.percents[0], minWidth);
        maxWidth = Math.min(self.percents[self.percents.length - 1], maxWidth);
        var lastX = 0;
        for (var ii = 0, jj = steps.length; ii < jj; ii++) {
            var width = steps[ii];
            var marker = document.createElement("div");
            marker.className = "s-aw-resizer-marker";
            var pageX = self.offset.left + width;
            marker.style.left = (pageX - self.margin.left) + "px";
            marker.style.top = (self.offset.top - self.margin.top - 10) + "px";
            self.steps.push({
                percent: self.percents[ii],
                pageXMin: lastX ? (pageX - ((pageX - lastX) / 2)) : 0,
                pageX: pageX,
                offsetX: width,
                width: width,
                marker: document.site.body.appendChild(marker)
            });
            lastX = pageX;
            if (ii > 0) {
                self.steps[ii - 1].pageXMax = self.steps[ii - 1].pageX + ((pageX - self.steps[ii - 1].pageX) / 2);
            }
            var percent = self.percents[ii];
            if (((percent - 2) <= minWidth) && (minWidth <= (percent + 2))) {
                self.minStep = ii;
            }
            if (((percent - 2) <= maxWidth) && (maxWidth <= (percent + 2))) {
                self.maxStep = ii;
            }
        }
        self.steps[steps.length - 1].pageXMax = (self.steps[steps.length - 1].pageX * 100); //infini
        if (self.index > 1) {
            self.minStep++;
        }
        if (self.index < (self.widths.length - 1)) {
            self.maxStep--;
        }
        document.site.body.style.cursor = "w-resize";
        $(document).bind("mouseup.syraauthorresizing", function(event){
            $(document).unbind(".syraauthorresizing");
            var widths = self.layout.$layout.$widths.split(",");
            var step = self._findStep(self.$$rowSeparator);
            self.setLeftRightWidths(step.pageX);
            var limitPercent = 0;
            if (self.index > 1) {
                limitPercent = self._findStep($(self.layout.rowSeparators[self.index - 2])).percent;
            }
            widths[self.index - 1] = step.percent - limitPercent;
            limitPercent = 100;
            if (self.index < self.layout.rowSeparators.length) {
                limitPercent = self._findStep($(self.layout.rowSeparators[self.index])).percent;
            }
            widths[self.index] = limitPercent - step.percent;
            self.layout.$layout.$widths = widths.join(",");
            
            self.stopTimeout = setTimeout(function(){
                self.stop();
            }, 300);
            event.preventDefault();
            return false;
        }).bind("mousemove.syraauthorresizing", function(event){
            self.onSeparatorMove(event)
            event.preventDefault();
        });
    },
    _findStep: function($$rowSeparator){
        var separatorOffset = $$rowSeparator.offset();
        var lastX = this.steps[0];
        for (var ii = 0, jj = this.steps.length; ii < jj; ii++) {
            var step = this.steps[ii];
            if (step.pageXMin <= separatorOffset.left && separatorOffset.left < step.pageXMax) {
                return step;
            }
        }
        return null;
    },
    setLeftRightWidths: function(pageX){
        pageX -= this.startX;
        this.leftItem.layoutSlot.style.width = Math.max(this.leftWidth + pageX) + "px";
        this.rightItem.layoutSlot.style.width = this.rightWidth + (pageX * (-1)) + "px";
    },
    onSeparatorMove: function(event){
        var pageX;
        if (event.pageX >= this.steps[this.minStep].pageX && event.pageX <= this.steps[this.maxStep].pageX) {
            pageX = event.pageX;
        }
        else {
            pageX = this.steps[(event.pageX < this.steps[this.minStep].pageX) ? this.minStep : this.maxStep].pageX;
        }
        if (pageX !== undefined) {
            this.setLeftRightWidths(pageX);
        }
    },
    _clearSteps: function(){
        if (this.steps) {
            for (var ii = 0, jj = this.steps.length; ii < jj; ii++) {
                document.site.removeDomChild(this.steps[ii].marker);
                this.steps[ii].marker = null;
            }
        }
    },
    stop: function(){
        document.site.body.style.cursor = "default";
        $(document).unbind(".syraauthorresizing");
        this._clearSteps();
        this.index = this.leftWidth = this.rightWidth = this.offset = null;
        this.stopTimeout = this.steps = this.widths = this.layout = this.leftItem = this.rightItem = null;
        this.onResizing = false;
    },
    dispose: function(){
        this.stop();
        if (document.site.$$layoutSlot) {
            document.site.$$layoutSlot.undelegate(".syraauthorresizer");
        }
    }
});
