"use strict";
var helpers = require('syracuse-core/lib/helpers');

function RowResizer() {}

exports.RowResizer = helpers.defineClass(RowResizer, null, {
	load: function() {
		var self = this;
		document.site.$$layoutSlot.delegate(".s-aw-slot-sep-row", "mousedown.syraauthorresizer", function(event) {
			if (!document.site.dragDropInstance) {
				self.start(this, event);
				return false;
			}
		});
	},
	_drawSmallSteps: function() {
		this.smallSteps = [];
		var smallWidth = this.maxWidth / 30;
		var minWidth = 0,
			maxWidth = 0;
		for (var ii = 0, jj = this.widths.length; ii < jj; ii++) {
			if (ii < (this.index - 1)) {
				minWidth += this.widths[ii];
			}
			if (ii <= (this.index)) {
				maxWidth += this.widths[ii];
			}
		}
		var lastX = 0;
		var percents = [];
		for (var ii = 0; ii < 29; ii++) {
			percents.push(Math.round((100 / 30) * (ii + 1)));
		}
		minWidth = Math.max(percents[0], minWidth);
		maxWidth = Math.min(percents[percents.length - 1], maxWidth);
		for (var ii = 0, jj = percents.length; ii < jj; ii++) {
			var width = smallWidth * (ii + 1);
			var marker = document.createElement("div");
			marker.className = "s-aw-resizer-small-marker";
			var pageX = this.offset.left + width;
			marker.style.left = (pageX - this.margin.left) + "px";
			marker.style.top = (this.offset.top - this.margin.top - 5) + "px";
			marker.style.zIndex = this.markerzIndex;
			this.smallSteps.push({
				percent: percents[ii],
				index: ii,
				pageXMin: lastX ? (pageX - ((pageX - lastX) / 2)) : 0,
				pageX: pageX,
				offsetX: width,
				width: width,
				marker: document.site.body.appendChild(marker)
			});
			lastX = pageX;
			if (ii > 0) {
				this.smallSteps[ii - 1].pageXMax = this.smallSteps[ii - 1].pageX + ((pageX - this.smallSteps[ii - 1].pageX) / 2);
			}
			var percent = percents[ii];
			if (((percent - 2) <= minWidth) && (minWidth <= (percent + 2))) {
				this.minPercentStep = ii;
			}
			if (((percent - 2) <= maxWidth) && (maxWidth <= (percent + 2))) {
				this.maxPercentStep = ii;
			}
		}
		this.smallSteps[percents.length - 1].pageXMax = (this.smallSteps[percents.length - 1].pageX * 100); //infini
		if (this.index > 1) {
			this.minPercentStep++;
		}
		if (this.index < (this.widths.length - 1)) {
			this.maxPercentStep--;
		}
	},
	_drawPercentSteps: function() {
		this.percentSteps = [];
		var max = this.maxWidth;
		var percentSteps = [max / 6, max / 5, max / 4, max / 3, 2 * (max / 5), max / 2, 3 * (max / 5), 2 * (max / 3), 3 * (max / 4), 4 * (max / 5), 5 * (max / 6)];
		var minWidth = 0,
			maxWidth = 0;
		for (var ii = 0, jj = this.widths.length; ii < jj; ii++) {
			if (ii < (this.index - 1)) {
				minWidth += this.widths[ii];
			}
			if (ii <= (this.index)) {
				maxWidth += this.widths[ii];
			}
		}
		var percents = [16, 20, 25, 33, 40, 50, 60, 66, 75, 80, 84];
		minWidth = Math.max(percents[0], minWidth);
		maxWidth = Math.min(percents[percents.length - 1], maxWidth);
		var lastX = 0;
		for (var ii = 0, jj = percentSteps.length; ii < jj; ii++) {
			var width = percentSteps[ii];
			var marker = document.createElement("div");
			marker.className = "s-aw-resizer-marker";
			var pageX = this.offset.left + width;
			marker.style.left = (pageX - this.margin.left) + "px";
			marker.style.top = (this.offset.top - this.margin.top - 12) + "px";
			marker.style.zIndex = this.markerzIndex;
			this.percentSteps.push({
				percent: percents[ii],
				pageXMin: lastX ? (pageX - ((pageX - lastX) / 2)) : 0,
				pageX: pageX,
				offsetX: width,
				width: width,
				marker: document.site.body.appendChild(marker)
			});
			lastX = pageX;
			if (ii > 0) {
				this.percentSteps[ii - 1].pageXMax = this.percentSteps[ii - 1].pageX + ((pageX - this.percentSteps[ii - 1].pageX) / 2);
			}
			var percent = percents[ii];
			if (((percent - 2) <= minWidth) && (minWidth <= (percent + 2))) {
				this.minPercentStep = ii;
			}
			if (((percent - 2) <= maxWidth) && (maxWidth <= (percent + 2))) {
				this.maxPercentStep = ii;
			}
		}
		this.percentSteps[percentSteps.length - 1].pageXMax = (this.percentSteps[percentSteps.length - 1].pageX * 100); //infini
		if (this.index > 1) {
			this.minPercentStep++;
		}
		if (this.index < (this.widths.length - 1)) {
			this.maxPercentStep--;
		}

	},
	start: function(domSeparator, event) {
		var self = this;
		if (self.stopTimeout) {
			clearTimeout(self.stopTimeout);
			delete self.stopTimeout;
		}
		self.stop();
		self.onResizing = true;
		document.site.setDragDropInstance(self);
		self.startX = event.pageX;

		self.index = parseInt(domSeparator.getAttribute("data-s-index"), 10);
		self.layout = document.site.authorPage.findItem(domSeparator.parentNode, true);
		self.widths = self.layout.getWidthValues();

		self.leftItem = self.layout.items[self.index - 1];
		self.leftWidth = $(self.leftItem.layoutSlot).width();
		self.rightItem = self.layout.items[self.index];
		self.rightWidth = $(self.rightItem.layoutSlot).width();
		self.offset = $(self.layout.$$item).offset();

		self.margin = document.site.$$body.offset();
		self.$$rowSeparator = $(domSeparator);
		self.maxWidth = $(self.layout.$$item).width();
		self.markerzIndex = document.site.setZIndex();
		self._drawPercentSteps();
		self._drawSmallSteps();

		document.site.body.style.cursor = "w-resize";
		$(document).bind("mouseup.syraauthorresizing", function(event) {
			$(document).unbind(".syraauthorresizing");
			var widths = self.layout.$layout.$widths.split(",");
			var step = self._findSmallStep(self.$$rowSeparator);
			self.setLeftRightWidths(step.pageX);
			var limitPercent = 0;
			if (self.index > 1) {
				limitPercent = self._findSmallStep($(self.layout.rowSeparators[self.index - 2])).percent;
			}
			widths[self.index - 1] = step.percent - limitPercent;
			limitPercent = 100;
			if (self.index < self.layout.rowSeparators.length) {
				limitPercent = self._findSmallStep($(self.layout.rowSeparators[self.index])).percent;
			}
			widths[self.index] = limitPercent - step.percent;
			self.layout.$layout.$widths = widths.join(",");
			document.site.authorPage.notifyUpdate();
			self.layout.page.layoutValidator.setRowWidths(self.layout);
			self.stopTimeout = setTimeout(function() {
				self.stop();
			}, 300);
			event.preventDefault();
			return false;
		}).bind("mousemove.syraauthorresizing", function(event) {
			self.onSeparatorMove(event);
			event.preventDefault();
		});
	},
	_findStep: function($$rowSeparator) {
		var separatorOffset = $$rowSeparator.offset();
		var lastX = this.percentSteps[0];
		for (var ii = 0, jj = this.percentSteps.length; ii < jj; ii++) {
			var step = this.percentSteps[ii];
			if (step.pageXMin <= separatorOffset.left && separatorOffset.left < step.pageXMax) {
				return step;
			}
		}
		return null;
	},
	_findSmallStep: function($$rowSeparator) {
		var separatorOffset = $$rowSeparator.offset();
		var lastX = this.smallSteps[0];
		for (var ii = 0, jj = this.smallSteps.length; ii < jj; ii++) {
			var step = this.smallSteps[ii];
			if (step.pageXMin <= separatorOffset.left && separatorOffset.left < step.pageXMax) {
				return step;
			}
		}
		return null;
	},
	setLeftRightWidths: function(pageX) {
		pageX -= this.startX;
		this.leftItem.layoutSlot.style.width = Math.max(this.leftWidth + pageX) + "px";
		this.rightItem.layoutSlot.style.width = this.rightWidth + (pageX * (-1)) + "px";
	},
	onSeparatorMove: function(event) {
		var pageX;
		if (event.pageX >= this.smallSteps[this.minPercentStep].pageX && event.pageX <= this.smallSteps[this.maxPercentStep].pageX) {
			pageX = event.pageX;
		} else {
			pageX = this.smallSteps[(event.pageX < this.smallSteps[this.minPercentStep].pageX) ? this.minPercentStep : this.maxPercentStep].pageX;
		}
		if (pageX !== undefined) {
			this.setLeftRightWidths(pageX);
		} else {
			if (event.pageX >= this.percentSteps[this.minPercentStep].pageX && event.pageX <= this.percentSteps[this.maxPercentStep].pageX) {
				pageX = event.pageX;
			} else {
				pageX = this.percentSteps[(event.pageX < this.percentSteps[this.minPercentStep].pageX) ? this.minPercentStep : this.maxPercentStep].pageX;
			}
			if (pageX !== undefined) {
				this.setLeftRightWidths(pageX);
			}
		}
	},
	stop: function() {
		document.site.body.style.cursor = "default";
		$(document).unbind(".syraauthorresizing");
		if (this.percentSteps) {
			for (var ii = 0, jj = this.percentSteps.length; ii < jj; ii++) {
				document.site.removeDomChild(this.percentSteps[ii].marker);
				this.percentSteps[ii].marker = null;
			}
		}
		if (this.smallSteps) {
			for (var ii = 0, jj = this.smallSteps.length; ii < jj; ii++) {
				document.site.removeDomChild(this.smallSteps[ii].marker);
				this.smallSteps[ii].marker = null;
			}
		}
		this.index = this.leftWidth = this.rightWidth = this.offset = null;
		this.stopTimeout = this.smallSteps = this.percentSteps = this.widths = this.layout = this.leftItem = this.rightItem = null;
		document.site.setDragDropInstance();
	},
	dispose: function() {
		this.stop();
		if (document.site.$$layoutSlot) {
			document.site.$$layoutSlot.undelegate(".syraauthorresizer");
		}
		document.site.setDragDropInstance();
	}
});