"use strict";
var helpers = require('syracuse-core/lib/helpers');

function ToolsBar(){
}


exports.ToolsBar = helpers.defineClass(ToolsBar, null, {
    _fillInsertMenusBlock: function($actions, $items, targetPage, $type){
        var $menus = targetPage.$prototype[$type];
        if ($menus) {
            var binds = Object.keys($menus);
            for (var ii = 0, jj = binds.length; ii < jj; ii++) {
                var bind = binds[ii];
                var $field = $menus[bind];
                var actionId = "$fieldLink" + bind;
                var title = $field.$title ? targetPage.getLocalizeText($field.$title) : "";
                $actions[actionId] = {
                    $title: (title == "") ? bind : title
                };
                $items.push({
                    $bind: actionId,
                    $fieldBind: bind,
                    $fieldCategory: "link",
                    $css: "s-aw-add-item",
                    $value: "menu"
                });
            }
        }
    },
    _fillInsertBlock: function(addLinks){
        var targetPage = this.palette.authorPage.targetPage;
        var $items = [];
        var $actions = {};
        if (addLinks) {
            this._fillInsertMenusBlock($actions, $items, targetPage, "$links");
            this._fillInsertMenusBlock($actions, $items, targetPage, "$actions");
        }
        else {
            var binds = Object.keys(targetPage.$prototype.$properties);
            for (var ii = 0, jj = binds.length; ii < jj; ii++) {
                var bind = binds[ii];
                if (bind.charAt(0) != "$") {
                    var $field = targetPage.$prototype.$properties[bind];
                    if ($field && $field.$type) {
                        var actionId = "$fieldLink" + bind;
                        var title = $field.$title ? targetPage.getLocalizeText($field.$title) : "";
                        $actions[actionId] = {
                            $title: (title == "") ? bind : title
                        };
                        $items.push({
                            $bind: actionId,
                            $fieldCategory: "field",
                            $fieldBind: bind,
                            $css: "s-aw-add-item",
                            $value: $field.$type.replace("application/x-", "").replace("/", "-")
                        });
                    }
                }
            }
        }
        
        var fields = this.palette.authorPage._extractFields(targetPage.layoutContent);
        for (var ii = 0, jj = fields.length; ii < jj; ii++) {
            var $action = $actions["$fieldLink" + fields[ii].$item.$bind];
            if ($action) {
                $action.$isHidden = true;
            }
        }
        this.palette.applyChange({
            $actions: $actions
        });
        return $items;
    },

    load: function(palette){
        this.palette = palette;
        this.preferences = {
            isDocked: true,
            isCollapsed: this.palette.authorPage.targetPage.dialogWrapper
        };
        this.$$slot = $(this._slot = document.createElement("div"));
        this._slot.className = "s-aw-toolbar-slot";
        this._slot.setAttribute("data-s-article", this.palette.id);
        this.palette.authorPage.targetPage._item.insertBefore(this._slot, this.palette.authorPage.targetPage._item.firstChild);
        
        this._bar = document.createElement("div");
        this._bar.className = "s-aw-toolbar";
        this.$$bar = $(this._bar);
        this.appendPickerBar();
        
        this._body = document.createElement("div");
        this._body.className = "s-aw-toolbar-body";
        this._$$body = $(this._body);
        this._bar.appendChild(this._body);
        this.blocks = []
        this.blocks.push(this.createBlock({
            $category: "section",
            $id: "$treeContentBlock",
            $title: this.palette.localize.aw_viewTypeContent,
            $layout: {
                $items: []
            }
        }, this.blocks.length));
        var isDashboard = this.palette.authorPage.targetPage.$facet == "$dashboard";
        this.blocks.push(this.createBlock({
            $category: "section",
            $id: "$insertBlock",
            $title: this.palette.localize.aw_insert,
            $layout: {
                $items: [{
                    $category: "menus",
                    $itemIcon: {
                        "$mode": "iconText",
                        "$path": "authoring/s-aw-"
                    },
                    $skin: "s-aw-menus",
                    $itemSkin: "s-aw-menus-link",
                    $layout: {
                        $items: [{
                            $css: "s-aw-add-section s-aw-add-item",
                            $bind: "$addSection",
                            $value: "add-section"
                        }, {
                            $css: "s-aw-add-block s-aw-add-item",
                            $bind: "$addBlock",
                            $value: "add-block",
                            $isHidden: isDashboard
                        }, {
                            $category: "menus",
                            $itemSkin: "s-aw-mn-field-link",
                            $titleIcon: {
                                "$value": "template",
                                "$path": "authoring/s-aw-"
                            },
                            $itemIcon: {
                                "$mode": "iconText",
                                "$path": "authoring/s-aw-"
                            },
                            $layout: {
                                $items: this._fillInsertBlock()
                            }
                        }]
                    }
                }]
            }
        }, this.blocks.length));
        if (isDashboard) {
            this.blocks.push(this.createBlock({
                $category: "section",
                $id: "$insertLinks",
                $title: this.palette.localize.aw_insert_links,
                $layout: {
                    $items: [{
                        $category: "menus",
                        $itemIcon: {
                            "$mode": "iconText",
                            "$path": "authoring/s-aw-"
                        },
                        $skin: "s-aw-menus",
                        $itemSkin: "s-aw-menus-link",
                        $layout: {
                            $items: [{
                                $css: "s-aw-add-section s-aw-add-item",
                                $bind: "$addSection",
                                $value: "add-section"
                            }, {
                                $css: "s-aw-add-block s-aw-add-item",
                                $bind: "$addMenus",
                                $value: "add-menu-group"
                            }, {
                                $category: "menus",
                                $itemSkin: "s-aw-mn-field-link",
                                $titleIcon: {
                                    "$value": "template",
                                    "$path": "authoring/s-aw-"
                                },
                                $itemIcon: {
                                    "$mode": "iconText",
                                    "$path": "authoring/s-aw-"
                                },
                                $layout: {
                                    $items: this._fillInsertBlock(true)
                                }
                            }]
                        }
                    }]
                }
            }, this.blocks.length));
        }
        this.blocks.push(this.createBlock({
            $category: "section",
            $id: "$modelsBlock",
            $title: this.palette.localize.aw_models,
            $layout: {
                $items: [{
                    $id: "s-awModels",
                    $category: "menus",
                    $itemIcon: {
                        $mode: "icon",
                        $path: "authoring/s-aw-"
                    },
                    $skin: "s-aw-menus",
                    $itemSkin: "s-aw-menus-link",
                    $layout: {
                        $items: [{
                            $icon: null,
                            $bind: "pattern-headerTabs"
                        }, {
                            $icon: null,
                            $bind: "$defaultLayout"
                        }, {
                            $bind: "pattern-1"
                        }, {
                            $bind: "pattern-2"
                        }, {
                            $bind: "pattern-3"
                        }, {
                            $bind: "pattern-4"
                        }]
                    }
                }]
            }
        }, this.blocks.length));
        this.$$bar.appendTo(this._slot);
        if (!this.openedBlock && this.blocks.length > 0) {
            this.collapseBlock(this.blocks[0], true, null, true);
        }
        //this._bindEvents(true);
        this.ensureState();
    },
    onClickPicker: function(pickerId, event){
        switch (pickerId) {
            case "s-bar-dockMode":
                this.preferences.isDocked = !this.preferences.isDocked;
                break;
            case "s-bar-collapse":
                this._resizer.isEnabled = !(this.preferences.isCollapsed = !this.preferences.isCollapsed);
                break;
            case "s-bar-title":
                var index = parseInt($(event.target).closest("[data-s-block]").attr("data-s-block"), 10);
                this.collapseBlock(this.blocks[index], true);
                break;
        }
        this.ensureState();
        this.onWindowResize();
        this.palette.resizeDialogPage();
    },
    /* _bindEvents: function($bind){
     var self = this;
     if ($bind) {
     self.$$slot.bind("mouseenter mouseleave", function(event){
     clearTimeout(self._closeTimeout);
     if ((event.type == "mouseleave" && !self.preferences.isCollapsed && !self.preferences.isDocked) ||
     (event.type == "mouseenter" && self.preferences.isCollapsed)) {
     self._closeTimeout = setTimeout(function(){
     self.preferences.isCollapsed = !self.preferences.isCollapsed;
     self.ensureState();
     self.onWindowResize();
     }, 300);
     }
     });
     }
     else {
     if (self.$$slot) {
     self.$$slot.unbind();
     }
     }
     },*/
    appendPickerBar: function(){
        var self = this;
        
        /*self.dockMode = document.createElement("a");
         self.dockMode.setAttribute("data-s-picker", "s-bar-dockMode");
         self.dockMode.className = "s-aw-toolbar-docked";*/
        self.resizeBar = document.createElement("a");
        self.resizeBar.className = "s-aw-toolbar-resizer";
        self.openerPicker = document.createElement("a");
        self.openerPicker.className = "s-aw-toolbar-opener";
        self.openerPicker.setAttribute("data-s-picker", "s-bar-collapse");
        self.resizeBar.appendChild(self.openerPicker);
        self._bar.appendChild(self.resizeBar);
        self.openerPickerHeight = $(self.openerPicker).outerHeight();
        self._resizer = document.site.setResizable({
            source: self,
            slot: self._slot,
            dragSpot: null,
            direction: {
                right: true
            },
            minWidth: 180,
            resizerSpot: self.resizeBar,
            onResize: function(resizer, moving){
                if (!moving) {
                    document.site.toggleClass(self.resizeBar, "s-resizing", document.site.resizing);
                    document.site.toggleClass(self.openerPicker, "s-resizing", document.site.resizing);
                }
            }
        });
        self._resizer.isEnabled = !self.preferences.isCollapsed;
        
    },
    createBlock: function($item, index){
        var block = {
            boxParent: this,
            index: index,
            $item: $item
        };
        
        var blockItem = document.createElement("section");
        blockItem.className = "s-aw-toolbar-block";
        blockItem.setAttribute("data-s-block", block.index);
        block.$$item = $(blockItem);
        
        var title = document.createElement("a");
        title.setAttribute("data-s-picker", "s-bar-title");
        title.className = "s-aw-toolbar-block-title";
        title.textContent = $item.$title || "";
        
        var dom = document.createElement("div");
        dom.className = "s-aw-toolbar-block-body";
        block.$$body = $(dom);
        
        dom = document.createElement("header");
        dom.className = "s-aw-toolbar-block-header";
        dom.appendChild(title);
        block.$$header = $(dom);
        
        block.$$item.append(block.$$header).append(block.$$body);
        this._body.appendChild(blockItem);
        return block;
    },
    collapseBlock: function(block, show, isFirstTime, onDrawBar){
        if (show && this.openedBlock && (this.openedBlock != block)) {
            this.collapseBlock(this.openedBlock, false);
        }
        this.openedBlock = block;
        block.$$body[0].style.display = show ? "" : "none";
        block.$$header.toggleClass("s-open", show);
        block.$$item.toggleClass("s-open", show);
        if (show) {
            if (!block.islistLoaded) {
                block.islistLoaded = true;
                block.$item.$isTitleHidden = true;
                block.leftList = this.palette.loadNewItem(block.$$body.empty()[0], block.$item);
            }
            this.palette.treeContent.toggle(block.$item.$id == "$treeContentBlock");
            this.onWindowResize();
        }
        else {
            block.$$item[0].style.height = "";
        }
    },
    ensureState: function(){
        if (this.preferences.isCollapsed) {
            this.openedWidth = this.$$slot.outerWidth();
            this._slot.style.width = "10px";
            this._body.style.display = "none";
            this.resizeBar.className = "s-aw-toolbar-resizer s-close";
            this.openerPicker.className = "s-aw-toolbar-opener s-close";
            if (!this.preferences.isDocked) {
                this._bar.style.width = "10px";
            }
        }
        else {
            this.resizeBar.className = "s-aw-toolbar-resizer";
            this.openerPicker.className = "s-aw-toolbar-opener";
            this.resizeBar.style.width = "";
            if (this.preferences.isDocked) {
                this._slot.style.width = (this.openedWidth || 180) + "px";
                this._bar.style.position = "";
                this._bar.style.width = "";
            }
            else {
                this._slot.style.width = "10px";
                document.site.setZIndex(this._bar);
                this._bar.style.position = "absolute";
                this._bar.style.width = "180px";
                this._bar.style.top = "0px";
                this._bar.style.left = "0px";
            }
            this._body.style.display = "";
        }
    },
    onWindowResize: function(){
        if (this.$$bar && this._slot) {
            var height = $(this.palette.authorPage.targetPage.scrollview).height();
            if (height) {
                this._bar.style.height = height + "px";
                this.resizeBar.style.height = height + "px";
                this.openerPicker.style.top = ((height - this.openerPickerHeight) / 2) + "px";
                this._body.style.height = (height - this._body.offsetTop) + "px";
                if (this.openedBlock) {
                    var blockHeight = 0;
                    for (var ii = 0, jj = this.blocks.length; ii < jj; ii++) {
                        var block = this.blocks[ii];
                        if (block != this.openedBlock) {
                            blockHeight += block.$$item.outerHeight(true);
                        }
                    }
                    blockHeight = this._body.clientHeight - blockHeight;
                    this.openedBlock.$$item[0].style.height = blockHeight + "px";
                    this.openedBlock.$$body.height(this.openedBlock.$$item.height() - this.openedBlock.$$header.outerHeight(true));
                    if (this.openedBlock.leftList && this.openedBlock.leftList.resize) {
                        this.openedBlock.leftList.resize(this.openedBlock.$$body.height());
                    }
                    if (this.openedBlock.onResize) {
                        this.openedBlock.onResize(this.openedBlock.$$body.height());
                    }
                }
            }
        }
    },
    toggleItemAuthoring: function(enable){
    },
    dispose: function(){
        //this._bindEvents(false);
        if (this._resizer) {
            this._resizer.dispose();
            this._resizer = null;
        }
        this.toggleItemAuthoring(false);
        if (this.blocks) {
            this.blocks.forEach(function(block){
                delete block.leftList;
            });
        }
        if (this._slot) {
            document.site.removeDomChild(this._slot);
            this._slot = null;
        }
        this.palette = this.blocks = null;
    }
});
