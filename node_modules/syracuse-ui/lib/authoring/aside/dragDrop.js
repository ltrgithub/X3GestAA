"use strict";
var helpers = require('syracuse-core/lib/helpers');

function DragDrop(){
}

exports.DragDrop = helpers.defineClass(DragDrop, null, {
    start: function($$boundary){
        var self = this;
        self.isDragAuthoring = true;
        self.dropItem = document.site.requestedDDAuthoringItem;
        if (self.dropItem.isLayout) {
            document.site.authorPage.defineLayoutChildAuhtoringLevel(self.dropItem);
        }
        self.toggleDraggedCss(true);
        delete document.site.requestedDDAuthoringItem;
        self.boundary = $$boundary.offset();
        self.boundary.$$boundary = $$boundary;
        self.boundary.height = $$boundary.height();
        self.boundary.width = $$boundary.width();
        self.boundary.scrollWidth = $$boundary[0].scrollWidth;
        self.boundary.scrollHeight = $$boundary[0].scrollHeight;
        self.boundary.right = self.boundary.left + self.boundary.width;
        self.boundary.bottom = self.boundary.top + self.boundary.height;
        $(document).bind("mouseup.syradragdrop", function(event){
            if (self.targetItem) {
                self.toggleDraggedCss(false);
                var targetItem = self.targetItem;
                var dropItem = self.dropItem;
                var $insertAt = self.$drag.$insertAt;
                var authorPage = document.site.authorPage;
                if (targetItem && dropItem) {
                    var enable = true;
                    if (targetItem.layoutParent && targetItem.layoutParent.$layout.$layoutType == "row") {
                        enable = !(targetItem.layoutParent.items.length > 5 && (($insertAt == "left" || $insertAt == "right") && !targetItem.isSpaceBox));
                    }
                    if (enable) {
                        if (dropItem.layoutParent) {
                            if (dropItem.layoutParent.$layout.$layoutType == "row") {
                                dropItem.layoutParent.addSpaceBox(dropItem.layoutParent.getItemIndex(dropItem, true));
                            }
                            dropItem.layoutParent.extractItem(dropItem);
                        }
                        var newChild = authorPage.addNewItem(targetItem, dropItem.$authoringLevel, dropItem.$bind, dropItem, $insertAt);
                        authorPage.endTargetPageUpdate(newChild, true);
                    }
                }
            }
            self.stop();
            document.site.setDragDropInstance();
        }).bind("mousemove.syradragdrop", function(event){
            if (!event.target || event.target) {
                if (event.target && event.target.className) {
                    if (event.target.className.indexOf("s-aw-drop-cue") < 0) {
                        self.moveDragImage(event, null, true);
                    }
                }
                else {
                    self.moveDragImage(event, null, true);
                }
                
            }
            event.preventDefault();
        });
    },
    validateDropTarget: function(event, targetItem){
        var isDropEnabled = false;
        if (this.dropItem) {
            if (this.dropItem != targetItem) {
                var text;
                if (this.dropItem.isLayout) {
                    if (this.dropItem.boxParent == targetItem.boxParent) {
                        var layoutParent = targetItem.layoutParent;
                        while (layoutParent) {
                            if (this.dropItem == layoutParent) {
                                return false;
                            }
                            layoutParent = layoutParent.layoutParent;
                        }
                        isDropEnabled = true;
                    }
                }
                else {
                    if (this.dropItem.$authoringLevel != "field") {
                        var boxParent = targetItem.boxParent;
                        while (boxParent) {
                            if (this.dropItem == boxParent) {
                                return isDropEnabled;
                            }
                            boxParent = boxParent.boxParent;
                        }
                    }
                    if (this.dropItem.$authoringLevel == "field") {
                        isDropEnabled = true;
                    }
                    else {
                        //section
                        if (targetItem.$authoringLevel == "field") {
                            var sourceBox = this.dropItem;
                            while (sourceBox && sourceBox != targetItem.boxParent) {
                                sourceBox = sourceBox.boxParent;
                            }
                            if (!sourceBox) {
                                text = document.site.authorPage.localize.dd_moveFields;
                                isDropEnabled = true;
                            }
                        }
                        else {
                            isDropEnabled = true;
                        }
                    }
                }
                
                if (isDropEnabled) {
                    text = text || document.site.authorPage.localize.dd_moveItem;
                    this._ensureDragImage();
                    this._info.textContent = text.replace("{0}", this.getDropItemTitle(this.dropItem));
                }
            }
        }
        return isDropEnabled;
    },
    _calculateDropCuePosition: function(event, targetItem){
        var $position = null;
        if (targetItem && (targetItem.layoutParent || targetItem.isLayout)) {
            var $layoutType = (targetItem.layoutParent || targetItem).$layout.$layoutType;
            var $$target;
            if (targetItem.tabTitle) {
                $$target = $(targetItem.tabTitle);
            }
            else {
                $$target = targetItem.layoutSlot ? $(targetItem.layoutSlot) : targetItem.$$item;
            }
            var offset = $$target.offset();
            this.$drag = {
                left: offset.left,
                top: offset.top,
                width: $$target.outerWidth(),
                height: $$target.outerHeight()
            };
            this.$drag.right = this.$drag.left + this.$drag.width;
            //calculateDropBoundary
            var xmargin = (this.$drag.width * 0.25);
            var ymargin = (this.$drag.height * 0.25);
            var $dropBoundary = {
                left: this.$drag.left + xmargin,
                right: this.$drag.left + this.$drag.width - xmargin,
                top: this.$drag.top + ymargin,
                bottom: this.$drag.top + this.$drag.height - ymargin
            };
            $position = {
                top: this.$drag.top,
                left: this.$drag.left
            };
            var isLeft = ((event.pageX > this.$drag.left) && (event.pageX < (this.$drag.left + 50)));
            var isRight = ((event.pageX < this.$drag.right) && (event.pageX > (this.$drag.right - 50)));
            if (event.target.className.indexOf("s-aw-slot-sep-row") >= 0) {
                isRight = true;
            }
            if (isLeft || isRight) {
                this.$drag.$insertAt = isRight ? "right" : "left";
                $position.top -= 3;
                $position.left = this.$drag.left + (isRight ? (this.$drag.width) : (-3));
                $position.width = "0.3em";
                $position.height = this.$drag.height + 6 + "px";
            }
            else {
                var isBottom = event.pageY >= $dropBoundary.bottom;
                this.$drag.$insertAt = isBottom ? "bottom" : "top";
                $position.top = this.$drag.top + (isBottom ? this.$drag.height : 0);
                $position.height = "0.3em";
                $position.width = this.$drag.width + "px";
            }
            
        }
        return $position;
    },
    _moveDragCue: function($position){
        if (!this._dropCue) {
            this._dropCue = document.createElement("div");
            this._dropCue.className = "s-aw-drop-cue";
            document.site.layoutSlot.appendChild(this._dropCue);
        }
        var css = "s-aw-drop-cue s-aw-drop-cue-";
        if (!this.dropItem.isLayout && this.targetItem) {
            if (this.targetItem.isLayout) {
                if (!this.targetItem.$chilAuthoringLevel) {
                    document.site.authorPage.defineLayoutChildAuhtoringLevel(this.targetItem);
                }
                css += this.targetItem.$chilAuthoringLevel;
            }
            else {
                css += this.targetItem.$authoringLevel;
            }
        }
        else {
            css += this.dropItem.$authoringLevel;
        }
        
        this._dropCue.className = css;
        if ($position) {
            var style = this._dropCue.style;
            style.top = $position.top + "px";
            style.left = $position.left + "px";
            style.width = $position.width;
            style.height = $position.height;
            if (this.targetItem && this.targetItem.isSpaceBox) {
                style.display = "none";
                this.toggleDropArea(this.targetItem, this.dropItem);
            }
            else {
                style.display = "block";
            }
        }
        else {
            this._dropCue.style.display = "none";
        }
    },
    _ensureDragImage: function(){
        if (!this._info) {
            this._info = document.createElement("div");
            this._info.style.display = "none";
            this._info.className = "s-aw-drag-image";
            document.site.layoutSlot.appendChild(this._info);
            this._info.textContent = this.getDropItemTitle(this.dropItem);
        }
    },
    getDropItemTitle: function(dropItem){
        var title = dropItem.getTitle();
        if (!title) {
            title = document.site.authorPage.localize[dropItem.isLayout ? "aw_rowLayout" : "aw_" + dropItem.$authoringLevel];
        }
        return title;
    },
    
    autoScroll: function(event){
        var step = 40, margin = 80;
        if (event.pageY > (this.boundary.bottom - margin)) {
            var scrollTop = this.boundary.$$boundary.scrollTop();
            if (scrollTop < (this.boundary.scrollHeight - this.boundary.height)) {
                this.boundary.$$boundary.scrollTop(Math.min(scrollTop + step, this.boundary.scrollHeight - this.boundary.height));
            }
        }
        else {
            if (event.pageY < (this.boundary.top + margin)) {
                var scrollTop = this.boundary.$$boundary.scrollTop();
                this.boundary.$$boundary.scrollTop(Math.max(scrollTop - step, 0));
            }
        }
        if (event.pageX > (this.boundary.right - margin)) {
            var scrollLeft = this.boundary.$$boundary.scrollLeft();
            if (scrollLeft < (this.boundary.scrollWidth - this.boundary.width)) {
                this.boundary.$$boundary.scrollLeft(Math.min(scrollLeft + step, this.boundary.scrollWidth - this.boundary.width));
            }
        }
        else {
            if (event.pageX < (this.boundary.left + margin)) {
                var scrollLeft = this.boundary.$$boundary.scrollLeft();
                this.boundary.$$boundary.scrollLeft(Math.max(scrollLeft - step, 0));
            }
        }
    },
    moveDragImage: function(event, targetItem, isOut){
        this.isDropEnabled = false;
        if (targetItem) {
            this.isDropEnabled = this.validateDropTarget(event, targetItem);
        }
        this.autoScroll(event);
        var top = Math.max(event.pageY, this.boundary.top);
        var left = Math.max(event.pageX, this.boundary.left);
        top = Math.min(top, this.boundary.bottom);
        left = Math.min(left, this.boundary.right);
        
        var inBoundary = (event.pageX == left && event.pageY == top);
        this._ensureDragImage();
        if (!isOut && this.isDropEnabled) {
            document.site.toggleClass(this._info, "s-drag-ok", true);
            if (this.targetItem != targetItem) {
                this.toggleDropArea(this.targetItem);
            }
            this.targetItem = targetItem;
        }
        else {
            if (isOut) {
                var title = this.dropItem.getTitle();
                if (!title) {
                    title = document.site.authorPage.localize["aw_" + this.dropItem.$authoringLevel];
                }
                this._info.textContent = document.site.authorPage.localize.dd_moveItem.replace("{0}", title);
            }
            document.site.toggleClass(this._info, "s-drag-ok", false);
            this.toggleDropArea(this.targetItem);
            this.targetItem = null;
        }
        this._moveDragCue(this._calculateDropCuePosition(event, this.targetItem));
        
        this._info.style.display = "";
        this._info.style.top = top + 15 + "px";
        this._info.style.left = left + 15 + "px";
    },
    stop: function(){
        delete document.site.requestedDDAuthoringItem;
        document.controller.disposeObject(this);
    },
    toggleDraggedCss: function(show){
        if (this.dropItem && this.dropItem.$$item) {
            document.site.toggleClass(this.dropItem.$$item[0], "s-aw-dragged", show);
        }
    },
    toggleDropArea: function(targetItem, dropItem){
        if (targetItem && targetItem.isSpaceBox) {
            document.site.authorPage.toggleDropArea(targetItem, dropItem);
        }
    },
    dispose: function(){
        $(document).unbind('.syradragdrop');
        this.toggleDraggedCss(false);
        delete this.targetItem;
        if (this.boundary) {
            this.boundary.$$boundary = null;
        }
        document.site.removeDomChild(this._info);
        document.site.removeDomChild(this._dropCue);
        this.dropItem = this.boundary = this._info = this._dropCue = null;
    }
});
