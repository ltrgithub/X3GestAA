"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;
var UISwitchTool = require("syracuse-ui/lib/authoring/tools/uiSwitchTool").UISwitchTool;
var DesignDDAgent = require("syracuse-ui/lib/authoring/tools/designDDAgent").DesignDDAgent;
var RowResizer = require("syracuse-ui/lib/authoring/tools/rowResizer").RowResizer;

function LandingPageDesigner() {}

exports.LandingPageDesigner = helpers.defineClass(LandingPageDesigner, Designer, {
	drawBox: function() {
		this.layoutSlot = document.createElement("aside");
		this.layoutSlot.className = "s-aw-page";
		this.awItem = this.awArticle;
		this.awArticle.header.appendChild(this.layoutSlot);
		this.isVisible = false;
		this.toggleDesigner(false);
		this.$$item = $(this.layoutSlot);
		this.sectionModel = {
			body: this.layoutSlot.appendChild(document.createElement("div"))
		};
		this.sectionModel.body.className = "s-aw-lp-model-slot";
		(this.uiSwitchTool = new UISwitchTool()).load(this);
		this.viewsTool = {}; //for compatibility
		this.loadDefaultTools();
		this.workinCopySlot.appendChild(this.historySlot);
		this.layoutSlot.appendChild(this.workinCopySlot);

		this.loadTemplateTools();
		document.site.ddManager.togglePageObserver(this, true);
		this.uiSwitchTool.toggleUIDesign(this.awArticle, true);
		document.site.resize();
	},
	findItem: function(item, findLayout, event) {
		if (item.syraAwTreeNodeId) {
			var node = this.trees.findNode(event);
			return node && node.item;
		} else {
			var article = item.syraDesigneArticle ? document.controller._articles[item.syraDesigneArticle] : document.controller.findArticle($(item));
			if (article) {
				if (findLayout || item.syraAwLayoutId) {
					while (item && !item.syraAwLayoutId) {
						item = item.parentNode;
					}
					if (item) {
						return (article.id == item.syraAwLayoutId) ? article : (article.layouts[item.syraAwLayoutId] || null);
					}
				} else {
					while (item && !item.syraAwItemId) {
						item = item.parentNode;
					}
					if (item) {
						item = (article.id == item.syraAwItemId) ? article : (article.idMap[item.syraAwItemId] || null);
						if (!item) {
							item = document.controller.findMenu($(item));
						}
						return item;

					}
				}
			}
		}
		return null;
	},
	isDraggable: function(target, event) {
		if (target.syraSepType && target.syraSepType == "row") {
			return target;
		}
		var item = this.findItem(target, undefined, event);
		return (item && (item.$awAddNewItem || (item != this.awArticle.page && item.page == this.awArticle.page))) ? item : null;
	},
	onDragMove: function(target, event) {
		if (document.site.ddManager.dropableItem) {
			if (document.site.ddManager.dropableItem.syraSepType == "row") {
				document.site.ddManager.start(this, RowResizer, this.awArticle.page.$$scrollview);
				return;
			}
		}
		if (target.className && target.className.indexOf && (target.className.indexOf("s-aw-item") >= 0 || target.className.indexOf("s-aw-add-item") >= 0)) {
			var item = this.findItem(target, undefined, event);
			if (item) {
				if (item != this.awArticle.page) {
					if (document.site.ddManager.dropableItem) {
						document.site.ddManager.start(this, DesignDDAgent, this.awArticle.page.$$scrollview);
					} else {
						var className = event.target && event.target.className;
						if (className && className.indexOf &&
							(className.indexOf("s-aw-slot-sep-row") >= 0 ||
								className.indexOf("s-aw-slot-sep-stack") >= 0)) {
							item = this.findItem(event.target, undefined, event);
						}
						if (document.site.ddManager.ddAgent) {
							document.site.ddManager.ddAgent.onDragMouseMove(target, event, item);
						}
					}
				}
				this.uiSwitchTool.toggleOverItem(item, true);
				return false;
			}
			if (document.site.ddManager.ddAgent) {
				return false;
			}
			return true; //find cancel observers parse
		}
	},
	onMenuClick: function(menuItem) {
		Designer.prototype.onMenuClick.call(this, menuItem);
		return true;
	},
	onTabClik: function(tabOpened) {
		if (this.isVisible) {
			this.templatesTool.addModelLinks(this.sectionModel, tabOpened || this.awItem.layoutContent.tabOpened);
		}
	},
	toggleDesigner: function(show) {
		this.isVisible = show === undefined ? !this.isVisible : show;
		document.site.toggleClass(this.awArticle.designerOpenerLink, "s-close", this.isVisible);
		this.layoutSlot.style.display = this.isVisible ? "" : "none";
		this.onTabClik();
		document.site.resize();
	},
	onTemplateChoiceClick: function(picker, awItem, awLayout) {
		awItem = awItem.layoutContent.tabOpened;
		if (picker.syraFieldsCount) {
			var funcName;
			var templates = this.templatesTool.countTemplates[picker.syraFieldsCount];
			if (templates) {
				funcName = picker.syraFieldsCount;
			} else {
				templates = this.templatesTool.defaultTemplates;
				funcName = picker.syraTemplate;
			}
			var fields = awItem.layoutContent.getFields();
			awItem.layoutContent.extractItems(fields);
			this.templatesTool["build_" + funcName](awItem, picker.syraTemplate, fields);
			return awItem;
		} else {
			if (picker.$syraColCount) {
				this.templatesTool.selectColChoice(this.sectionModel, awItem, picker.$syraColCount);
				return this.templatesTool.convertByColumns(picker, awItem, awLayout);
			}
		}
		return null;
	},
	dispose: function() {
		document.site.ddManager.togglePageObserver(this, false);
		document.site.removeDomChild(this.layoutSlot);
		this.sectionModel = null;
		Designer.prototype.dispose.call(this);
	}
});