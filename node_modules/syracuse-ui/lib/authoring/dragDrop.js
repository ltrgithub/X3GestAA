"use strict";
var helpers = require('syracuse-core/lib/helpers');
function DragDrop(){

}

exports.DragDrop = helpers.defineClass(DragDrop, null, {
    start: function($$boundary){
        var self = this;
        self.sourceItem = document.site.requestedDDAuthoringItem;
        self.toggleDraggedCss(true);
        delete document.site.requestedDDAuthoringItem;
        self.boundary = $$boundary.offset();
        self.boundary.right = self.boundary.left + $$boundary.width();
        self.boundary.bottom = self.boundary.top + $$boundary.height();
        $(document).bind("mouseup.syradragdrop", function(event){
            if (self.targetItem) {
                self.toggleDraggedCss(false);
                var authorPage = document.site.authorPage;
                authorPage.addNewItem(self.targetItem, self.sourceItem.$authoringLevel, self.sourceItem.$bind, self.sourceItem);
                authorPage.autoSizeRow(authorPage.awItem);
                authorPage.selectItem(authorPage.awItem, true, true);
                authorPage.notifyUpdate();
            }
            self.stop();
            delete document.site.DDAuthoring;
        }).bind("mousemove.syradragdrop", function(event){
            if (!event.target || event.target && event.target.className.indexOf("s-aw-drop-cue") < 0) {
                self.moveDragImage(event, null, true);
            }
            event.preventDefault();
        });
    },
    getDropAction: function(event, targetItem){
        var $action = null;
        if (this.sourceItem) {
            if (this.sourceItem != targetItem) {
                var text;
                if (this.sourceItem.$authoringLevel != "field") {
                    var boxParent = targetItem.boxParent;
                    while (boxParent) {
                        if (this.sourceItem == boxParent) {
                            return null;
                        }
                        boxParent = boxParent.boxParent
                    }
                }
                if (this.sourceItem.$authoringLevel == "field") {
                    $action = {
                        $move: true
                    };
                    var $authoringLevel = targetItem.$authoringLevel;
                    if ($authoringLevel != "field") {
                        $action.$appendNew = $authoringLevel;
                    }
                }
                else {
                    //section
                    if (targetItem.$authoringLevel == "field") {
                        var sourceBox = this.sourceItem;
                        while (sourceBox && sourceBox != targetItem.boxParent) {
                            sourceBox = sourceBox.boxParent;
                        }
                        if (!sourceBox) {
                            text = document.site.authorPage.localize.dd_moveFields;
                            $action = {
                                $moveContent: true
                            };
                        }
                    }
                    else {
                        $action = {
                            $move: true
                        };
                    }
                }
                if ($action) {
                    text = text || document.site.authorPage.localize.dd_moveItem;
                    this._ensureDragImage();
                    this._info.textContent = text.replace("{0}", this.sourceItem.getTitle());
                }
            }
        }
        return $action;
    },
    _calculateDropCuePosition: function(event, targetItem){
        var $position = null;
        if (targetItem && targetItem.layoutParent) {
            var $layoutType = targetItem.layoutParent.$layout.$layoutType;
            var $$target;
            if (targetItem._tabTitle) {
                $$target = $(targetItem._tabTitle);
            }
            else {
                $$target = targetItem.layoutSlot ? $(targetItem.layoutSlot) : targetItem.$$item;
            }
            var offset = $$target.offset();
            this.$drag = {
                left: offset.left,
                top: offset.top,
                width: $$target.outerWidth(),
                height: $$target.outerHeight()
            };
            this.$drag.right = this.$drag.left + this.$drag.width;
            //calculateDropBoundary
            var xmargin = (this.$drag.width * 0.25);
            var ymargin = (this.$drag.height * 0.25);
            var $dropBoundary = {
                left: this.$drag.left + xmargin,
                right: this.$drag.left + this.$drag.width - xmargin,
                top: this.$drag.top + ymargin,
                bottom: this.$drag.top + this.$drag.height - ymargin
            };
            $position = {
                top: this.$drag.top,
                left: this.$drag.left
            };
            var isAfter = false;
            /*  if ($layoutType == "stack") {
             isAfter = event.pageY > $dropBoundary.bottom;
             $position.top = this.$drag.top + (isAfter ? this.$drag.height : 0);
             $position.height = "0.6em";
             $position.width = this.$drag.width + "px";
             }
             else {
             debugger;
             isAfter = event.pageX > $dropBoundary.right;
             $position.top -= 3;
             $position.left = this.$drag.left + (isAfter ? (this.$drag.width + 3) : (-3));
             $position.width = "0.6em";
             $position.height = this.$drag.height + 6 + "px";
             }*/
            var isLeft = ((event.pageX > this.$drag.left) && (event.pageX < (this.$drag.left + 50)));
            var isRight = ((event.pageX < this.$drag.right) && (event.pageX > (this.$drag.right - 50)));
            if (isLeft || isRight) {
                debugger;
                isAfter = isRight; //event.pageX > $dropBoundary.right;
                $position.top -= 3;
                $position.left = this.$drag.left + (isAfter ? (this.$drag.width) : (-3));
                $position.width = "0.6em";
                $position.height = this.$drag.height + 6 + "px";
            }
            else {
                debugger;
                isAfter = event.pageY > $dropBoundary.bottom;
                $position.top = this.$drag.top + (isAfter ? this.$drag.height : 0);
                $position.height = "0.6em";
                $position.width = this.$drag.width + "px";
            }
            this.$drag.$insert = isAfter ? "insertAfter" : "insertBefore";
        }
        return $position;
    },
    moveDragCue: function($position){
        if (!this._dropCue) {
            this._dropCue = document.createElement("div");
            this._dropCue.className = "s-aw-drop-cue";
            document.site.layoutSlot.appendChild(this._dropCue);
        }
        this._dropCue.className = "s-aw-drop-cue s-aw-drop-cue-" + (this.targetItem ? this.targetItem.$authoringLevel : this.sourceItem.$authoringLevel);
        if ($position) {
            var style = this._dropCue.style;
            style.top = $position.top + "px";
            style.left = $position.left + "px";
            style.width = $position.width;
            style.height = $position.height;
            style.display = "block";
        }
        else {
            this._dropCue.style.display = "none";
        }
    },
    _ensureDragImage: function(){
        if (!this._info) {
            this._info = document.createElement("div");
            this._info.style.display = "none";
            this._info.className = "s-aw-drag-image";
            document.site.layoutSlot.appendChild(this._info);
            this._info.textContent = this.sourceItem.getTitle();
        }
    },
    
    moveDragImage: function(event, targetItem, isOut){
        this.$action = null;
        if (targetItem) {
            this.$action = this.getDropAction(event, targetItem);
        }
        var top = Math.max(event.pageY, this.boundary.top);
        var left = Math.max(event.pageX, this.boundary.left);
        top = Math.min(top, this.boundary.bottom);
        left = Math.min(left, this.boundary.right);
        
        var inBoundary = (event.pageX == left && event.pageY == top);
        this._ensureDragImage();
        if (!isOut && this.$action) {
            document.site.toggleClass(this._info, "s-drag-ok", true);
            this.targetItem = targetItem;
        }
        else {
            if (isOut) {
                this._info.textContent = document.site.authorPage.localize.dd_moveItem.replace("{0}", this.sourceItem.getTitle());
            }
            document.site.toggleClass(this._info, "s-drag-ok", false);
            this.targetItem = null;
        }
        this.moveDragCue(this._calculateDropCuePosition(event, this.targetItem));
        
        this._info.style.display = "";
        this._info.style.top = top + 15 + "px";
        this._info.style.left = left + 15 + "px";
    },
    stop: function(){
        delete document.site.requestedDDAuthoringItem;
        document.controller.disposeObject(this);
    },
    toggleDraggedCss: function(show){
        if (this.sourceItem && this.sourceItem.$$item) {
            document.site.toggleClass(this.sourceItem.$$item[0], "s-aw-dragged", show);
        }
    },
    dispose: function(){
        $(document).unbind('.syradragdrop');
        this.toggleDraggedCss(false);
        delete this.targetItem;
        document.site.removeDomChild(this._info);
        document.site.removeDomChild(this._dropCue);
        delete this.sourceItem;
    }
});
