"use strict";

function _hasLevelItems(items, $authoringLevel){
    var res = false;
    if (items) {
        for (var ii = 0, jj = items.length; ii < jj && !res; ii++) {
            var item = items[ii];
            if (item.$authoringLevel == $authoringLevel && !item.isSpaceBox) {
                res = true;
            }
            else 
                if (item.isLayout) {
                    res = _hasLevelItems(item.items, $authoringLevel);
                }
        }
    }
    return res;
}

function _wrapLayoutContent(layoutContent){
    var $newLayout = {
        $layoutType: layoutContent.$layout.$layoutType,
        $widths: layoutContent.$layout.$widths,
        $autoSize: layoutContent.$layout.$autoSize
    };
    var items = layoutContent.items.slice(0);
    for (var ii = 0, jj = items.length; ii < jj; ii++) {
        layoutContent.extractItem(items[ii]);
    }
    _newConvert(layoutContent, {
        $layoutType: "stack"
    });
    var prevLayoutContent = layoutContent.createChildItem($newLayout);
    prevLayoutContent.removeSpaceBox(true);
    for (var ii = 0, jj = items.length; ii < jj; ii++) {
        prevLayoutContent.loadChildItem(items[ii], null, ii);
    }
    prevLayoutContent.$chilAuthoringLevel = layoutContent.$chilAuthoringLevel;
    delete layoutContent.$chilAuthoringLevel;
    return prevLayoutContent;
}

function _addNewSection(awArticle, layoutParent, dropItem, index, $newCategory){
    layoutParent.removeSpaceBox();
    var $item = null;
    if (!dropItem) {
        $item = {
            $applyDefaultTitle: true
        };
        if ($newCategory != "menus") {
            if (awArticle.isDashBoard) {
                if (layoutParent.boxParent.isSection) {
                    $newCategory = "menus";
                }
            }
        }
        if ($newCategory == "menus") {
            $item.$category = $newCategory;
            $item.$isHidden = false;
        }
        else {
            $item.$category = "section";
        }
    }
    var newSection = layoutParent.loadChildItem(dropItem, $item, index);
    if (!newSection.layoutContent) {
        newSection.openBox(true);
    }
    return newSection;
}

function _insertFieldsWrapper(awArticle, targetItem, $insertAt, $newCategory){
    var newChild;
    var items = targetItem.layoutContent.items.slice(0);
    if (_hasLevelItems(items, "field")) {
        for (var ii = 0, jj = items.length; ii < jj; ii++) {
            targetItem.layoutContent.extractItem(items[ii]);
        }
        var $prevLayoutType = {
            $layoutType: targetItem.layoutContent.$layout.$layoutType,
            $widths: targetItem.layoutContent.$layout.$widths,
            $autoSize: targetItem.layoutContent.$layout.$autoSize
        };
        _newConvert(targetItem.layoutContent, {
            $layoutType: "stack"
        });
        newChild = _addNewSection(awArticle, targetItem.layoutContent, null, 0);
        _newConvert(newChild.layoutContent, $prevLayoutType);
        newChild.layoutContent.removeSpaceBox(true);
        for (var ii = 0, jj = items.length; ii < jj; ii++) {
            newChild.layoutContent.loadChildItem(items[ii], null, ii);
        }
    }
    else {
        newChild = _addNewSection(awArticle, targetItem.layoutContent, null, 0, $newCategory);
    }
    return newChild;
}

function _deleteLayoutRowItem(layout, deletedIndex){
    var widths = layout.page.layoutValidator.getWidthValues(layout.$layout.$widths);
    var deletedWidth = widths[deletedIndex];
    var updatedIndex = Math.min(deletedIndex > 0 ? (deletedIndex - 1) : 1, widths.length - 1);
    widths[updatedIndex] += deletedWidth;
    widths.splice(deletedIndex, 1);
    layout.$layout.$widths = widths.join(",");
    if (layout.items.length == 1) {
        _newConvert(layout, {
            $layoutType: "stack",
            $width: "100"
        });
    }
}

function _newConvert(layout, $newLayout){
    var $oldLayoutType = layout.$layout.$layoutType;
    var $oldWidths = layout.$layout.$widths;
    var isTabLayout = $newLayout.$layoutType == "tabs";
    if (layout._tabs && !isTabLayout) {
        document.site.removeDomChild(layout._tabs);
        delete layout._tabs;
    }
    //replace layout properties by new ones
    delete layout.$layout.$autoSize;
    delete layout.$layout.$widths;
    if ($newLayout.$autoSize != undefined) {
        layout.$layout.$autoSize = $newLayout.$autoSize;
    }
    if ($newLayout.$widths != undefined) {
        layout.$layout.$widths = $newLayout.$widths;
    }
    layout.$layout.$layoutType = $newLayout.$layoutType;
    layout.ensureLayoutMode();
    
    if ($oldLayoutType == "row") {
        var oldWidths = $oldWidths.split(",");
        var newWidths = (layout.$layout.$widths || "100").split(",");
        if (oldWidths.length > newWidths.length) {
            var targetCell = layout.items[newWidths.length - 1]
            var targetLayout = targetCell;
            var outofItems = layout.items.slice(newWidths.length);
            for (var ii = 0, jj = outofItems.length; ii < jj; ii++) {
                var item = outofItems[ii];
                if (item.isSpaceBox) {
                    layout.removeItem(item, true);
                }
                else {
                    if (targetCell.isSpaceBox) {
                        layout.removeItem(targetCell, true);
                    }
                    if (targetCell.isLayout) {
                        if (targetCell.$layout.$layoutType == "stack") {
                            if (item.isLayout && item.$layout.$layoutType == "stack") {
                                item.moveItems(targetCell);
                                layout.removeItem(item, true);
                            }
                            else {
                                targetCell.loadChildItems([item]);
                            }
                        }
                        else {
                            targetLayout = layout.wrapIntack([targetCell], layout.getItemIndex(targetCell.$item));
                            targetLayout.loadChildItems([item]);
                        }
                    }
                    else {
                        if (targetCell.isDisposed) {
                            //previous was removed spaceBox
                            layout.loadChildItems([item]);
                        }
                        else {
                            targetLayout = layout.wrapIntack([targetCell], layout.getItemIndex(targetCell.$item));
                            targetLayout.loadChildItems([item]);
                        }
                    }
                }
            }
        }
    }
    /* else {
     if (layout.items.length > 1) {
     layout.wrapIntack(layout.items.slice(0));
     }
     }*/
    if (isTabLayout) {
        var children = exports.getItemsFromLayout(layout);
        /* for (var ii = 0, jj = children.length; ii < jj; ii++) {
         // if (!children[ii].isSpaceBox) {
         layout.loadChildItem(children[ii], undefined, ii);
         // }
         
         }*/
        layout.loadChildItems(children);
        var toClean = layout.items.slice(0);
        for (var ii = 0, jj = toClean.length; ii < jj; ii++) {
            var item = toClean[ii];
            if (item.isSpaceBox || !item.isSection) {
                layout.removeItem(item, true);
            }
        }
    }
    else {
        if (layout.$layout.$layoutType == "stack") {
            if (!layout.isSpaceBox && layout.layoutParent && layout.items.length == 1) {
                var layoutParent = layout.layoutParent;
                layout.moveItems(layoutParent, null, layoutParent.getItemIndex(layout.$item));
                layoutParent.removeItem(layout, true);
                layout = layoutParent;
            }
        }
    }
    for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
        var item = layout.items[ii];
        item.isTabLayout = isTabLayout;
        item.ensureLayoutMode();
        if (!item.isLayout && !isTabLayout) {
            if (item.isSection && !item.tabTitle && !item.loaded && item.$item.$opened !== false) {
                item.openBox(true);
            }
        }
        else {
            if ($oldLayoutType == "tabs" && !isTabLayout) {
                for (var mm = 0, kk = item.items.length; mm < kk; mm++) {
                    var child = item.items[mm];
                    if (!child.isLayout && child.isSection && !child.tabTitle && !child.loaded && child.$item.$opened !== false) {
                        child.openBox(true);
                    }
                }
            }
        }
    }
    return layout;
}

function _addNewItem(awArticle, targetItem, $newAuthoringLevel, $bind, dropItem, $insertAt, $newCategory){
    var newChild;
    var targetBoxParent = targetItem.boxParent;
    var targetItemIndex = targetItem.layoutParent ? targetItem.layoutParent.getItemIndex(targetItem.$item) : undefined;
    
    if ($insertAt !== "undefined") {
        if (targetItem.layoutParent) {
            switch (targetItem.layoutParent.$layout.$layoutType) {
                case "stack":
                    switch ($insertAt) {
                        case "top":
                            break;
                        case "bottom":
                            targetItemIndex++;
                            break;
                        case "left":
                        case "right":
                            /*if (targetItem.layoutParent.layoutParent && (targetItem.layoutParent.layoutParent.$layout.$layoutType == "row")) {
                     return _addNewItem(awArticle,targetItem.layoutParent, $newAuthoringLevel, $bind, dropItem, $insertAt);
                     }*/
                            if (!(targetItem.isLayout && targetItem.$layout.$layoutType == "row")) {
                                var rowLayout = targetItem.layoutParent.createChildItem({
                                    $layoutType: "row",
                                    $items: []
                                }, null, targetItemIndex);
                                rowLayout.loadChildItems([targetItem]);
                                rowLayout.$layout.$widths = null;
                                targetItemIndex = $insertAt == "left" ? 0 : 1;
                            }
                            else {
                                targetItem.loadChildItem(dropItem, null, $insertAt == "left" ? 0 : targetItem.items.length);
                                return dropItem;
                            }
                            break;
                    }
                    break;
                case "row":
                    switch ($insertAt) {
                        case "top":
                        case "bottom":
                            //drop in row empty cell, wrap drop in stack
                            targetItem.layoutParent.wrapIntack([targetItem], targetItemIndex);
                            targetItemIndex = ($insertAt == "top") ? 0 : 1;
                            break;
                        case "left":
                        case "right":
                            targetItem.layoutParent.$layout.$widths = null;
                            if ($insertAt == "right") {
                                targetItemIndex++;
                            }
                            break;
                    }
                    break;
                case "tabs":
                    if ($insertAt == "right") {
                        targetItemIndex++;
                    }
                    break;
            }
        }
        else {
            targetItemIndex = 0;
        }
    }
    if (dropItem && dropItem.isLayout) {
        if (targetItem.isLayout && !targetItem.layoutParent) {
            targetItem = _wrapLayoutContent(targetItem);
        }
        newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
    }
    else {
        if (targetItem.isLayout && !targetItem.layoutParent) {
            targetItem = _wrapLayoutContent(targetItem);
        }
        if (targetItem.isLayout) {
            exports.defineLayoutChildAuhtoringLevel(targetItem);
        }
        
        switch (targetItem.$chilAuthoringLevel || targetItem.$authoringLevel) {
            case "article":
                if ($newAuthoringLevel == "field") {
                    newChild = _addNewItem(awArticle, targetItem, "section");
                    newChild = _addNewItem(awArticle, newChild, $newAuthoringLevel, $bind, dropItem);
                }
                else {
                    if (!dropItem) {
                        newChild = _insertFieldsWrapper(awArticle, targetItem);
                        if ($newAuthoringLevel == "block") {
                            newChild = _insertFieldsWrapper(awArticle, newChild, undefined, $newCategory);
                        }
                    }
                    else {
                        newChild = _addNewSection(awArticle, targetItem.layoutContent, dropItem, 0);
                    }
                }
                break;
            case "section":
                switch ($newAuthoringLevel) {
                    case "field":
                        if (dropItem) {
                            newChild = _addNewSection(awArticle, targetItem.layoutParent, null, targetItemIndex);
                            newChild = newChild.layoutContent.loadChildItem(dropItem);
                        }
                        else {
                            var children = exports.getItemsFromLayout(targetItem.layoutContent);
                            if (children.length == 0) {
                                newChild = targetItem.layoutContent.loadChildItem(null, {
                                    $bind: $bind
                                });
                            }
                            else {
                                if (children[0].$authoringLevel == "field") {
                                    newChild = children[0].layoutParent.loadChildItem(null, {
                                        $bind: $bind
                                    }, children[0].layoutParent.getItemIndex(children[0].$item));
                                }
                                else {
                                    newChild = _addNewItem(awArticle, targetItem, children[0].$authoringLevel);
                                    newChild = newChild.layoutContent.loadChildItem(null, {
                                        $bind: $bind
                                    });
                                }
                            }
                        }
                        break;
                    case "section":
                        newChild = _addNewSection(awArticle, targetItem.layoutParent, dropItem, targetItemIndex);
                        break;
                    case "block":
                        if (dropItem) {
                            newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
                        }
                        else {
                            newChild = _insertFieldsWrapper(awArticle, targetItem, undefined, $newCategory);
                        }
                        break;
                }
                break;
            case "block":
                switch ($newAuthoringLevel) {
                    case "field":
                        if (dropItem) {
                            newChild = _addNewSection(awArticle, targetItem.layoutParent, null, targetItemIndex);
                            newChild = newChild.layoutContent.loadChildItem(dropItem);
                        }
                        else {
                            newChild = targetItem.layoutContent.loadChildItem(null, {
                                $bind: $bind
                            });
                        }
                        break;
                    case "section":
                        if (dropItem) {
                            var children = dropItem.layoutContent.items.slice(0);
                            if (_hasLevelItems(children, "block")) {
                                targetItem.layoutParent.loadChildItems(children, targetItemIndex);
                                targetItem.layoutParent.removeItem(dropItem, true);
                                newChild = targetItem;
                            }
                            else {
                                newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
                            }
                        }
                        else {
                            newChild = _addNewItem(awArticle, targetItem.boxParent, $newAuthoringLevel);
                        }
                        break;
                    case "block":
                        newChild = _addNewSection(awArticle, targetItem.layoutParent, dropItem, targetItemIndex, $newCategory);
                        break;
                }
                break
            case "field":
                var sectionParent = targetBoxParent;
                if (targetBoxParent.$authoringLevel == "block") {
                    sectionParent = targetBoxParent.boxParent; //else $authoringLevel== section or article = no need of boxparent
                }
                switch ($newAuthoringLevel) {
                    case "section":
                    case "block":
                        if (dropItem) {
                            //dragged section							
                            var children = exports.extractFields(dropItem.layoutContent);
                            targetItem.layoutParent.loadChildItems(children, targetItemIndex);
                            targetItem.layoutParent.removeItem(dropItem, true);
                            newChild = targetItem;
                        }
                        else {
                            var layoutParent, newTopChild;
                            if ($newAuthoringLevel == "block") {
                                layoutParent = sectionParent.layoutContent;
                                if (targetItem.boxParent.$authoringLevel == "block") {
                                    targetItemIndex = targetItem.boxParent.layoutParent.getItemIndex(targetItem.boxParent.$item);
                                }
                            }
                            else {
                                if (sectionParent.layoutParent) {
                                    layoutParent = sectionParent.layoutParent;
                                    targetItemIndex = layoutParent.getItemIndex(sectionParent.$item);
                                }
                                else {
                                    layoutParent = sectionParent.layoutContent;
                                    targetItemIndex = undefined;
                                }
                            }
                            var children = layoutParent.items.slice(0);
                            newTopChild = newChild = _addNewSection(awArticle, layoutParent, null, targetItemIndex);
                            if (newTopChild.$authoringLevel == "section" && $newAuthoringLevel == "block") {
                                newChild = _addNewSection(awArticle, newTopChild.layoutContent);
                            }
                            if (targetItem.boxParent == newTopChild.boxParent) {
                                newChild.layoutContent.loadChildItems(children);
                            }
                        }
                        break;
                    case "field":
                        var $item = null;
                        if (!dropItem) {
                            $item = {
                                $bind: $bind
                            };
                            if ($newCategory == "link") {
                                $item.$category = $newCategory;
                                $item.$skin = "s-mn-h2-link";
                            }
                        }
                        newChild = targetItem.layoutParent.loadChildItem(dropItem, $item, targetItemIndex);
                        break;
                        
                }
                break;
        }
    }
    if (!newChild) {
        newChild = targetItem && targetItem.isSpaceBox;
        newChild = newChild || awArticle;
    }
    
    if (targetItem && targetItem.isSpaceBox) {
        targetItem.layoutParent.removeItem(targetItem, true, false);
    }
    return newChild;
};


exports.addNewItem = _addNewItem;
exports.newConvert = _newConvert;

exports.addSiblingToLayout = function(targetLayout, $insertAt){
    if (!targetLayout.layoutParent) {
        return exports.addSiblingToLayout(_wrapLayoutContent(targetLayout), $insertAt);
    }
    var $newLayout = {
        $layoutType: targetLayout.$layout.$layoutType,
        $widths: targetLayout.$layout.$widths,
        $autoSize: targetLayout.$layout.$autoSize
    };
    var targetItemIndex = targetLayout.layoutParent.getItemIndex(targetLayout, true);
    if ($insertAt == "bottom") {
        targetItemIndex++;
    }
    return targetLayout.layoutParent.loadChildItem(null, $newLayout, targetItemIndex);
};
exports.setRowAlign = function(awContext, valign){
    if (awContext.awLayout) {
        awContext.awLayout.$layout.$rowAlign = valign;
        for (var ii = 0, jj = awContext.awLayout.items.length; ii < jj; ii++) {
            awContext.awLayout.items[ii].layoutSlot.style.verticalAlign = valign;
        }
        awContext.authorPage.endTargetPageUpdate(awContext.awLayout, true);
    }
};
exports.switchTabPanelBox = function(awContext, $layoutType){
    if (awContext.awItem.layoutParent.items.length == 1) {
        _newConvert(awContext.awItem.layoutParent, {
            $layoutType: $layoutType
        });
    }
    else {
        var layoutRoot = awContext.awItem.layoutParent;
        if ($layoutType == "stack") {
            _newConvert(layoutRoot, {
                $layoutType: "stack"
            });
            var children = exports.getItemsFromLayout(layoutRoot);
            var layoutTab;
            for (var ii = 0, jj = children.length; ii < jj; ii++) {
                if (children[ii] == awContext.awItem) {
                    layoutRoot.loadChildItems([children[ii]]);
                    layoutTab = null;
                }
                else {
                    if (!children[ii].isSpaceBox) {
                        if (!layoutTab) {
                            layoutTab = layoutRoot.loadChildItem(null, {
                                $layoutType: "tabs"
                            });
                        }
                        layoutTab.loadChildItems([children[ii]]);
                    }
                    else {
                        // layoutRoot.removeItem(children[ii], true);
                    }
                }
            }
        }
        else {
            var layoutTab = layoutRoot.wrapIntack([awContext.awItem], layoutRoot.getItemIndex(awContext.awItem.$item));
            _newConvert(layoutTab, {
                $layoutType: "tabs"
            });
        }
    }
    awContext.authorPage.endTargetPageUpdate(awContext.awItem, true);
};

exports.switchTabPanelChildren = function(awContext, $layoutType){
    var children = exports.getItemsFromLayout(awContext.awItem.isLayout ? awContext.awItem : awContext.awItem.layoutContent);
    if (!(children.length > 0 && children[0].$authoringLevel == "field")) {
        exports.newConvert(awContext.awItem.layoutContent, {
            $layoutType: ($layoutType == "tabs") ? "tabs" : "stack"
        });
        var children = exports.getItemsFromLayout(awContext.awItem.layoutContent);
        for (var ii = 0, jj = children.length; ii < jj; ii++) {
            if (!children[ii].isSpaceBox) {
                awContext.awItem.layoutContent.loadChildItems([children[ii]]);
            }
        }
        var items = [];
        for (var ii = 0, jj = awContext.awItem.layoutContent.items.length; ii < jj; ii++) {
            if (!awContext.awItem.layoutContent.items[ii].isSection) {
                items.push(awContext.awItem.layoutContent.items[ii]);
            }
        }
        for (var ii = 0, jj = items.length; ii < jj; ii++) {
            awContext.awItem.layoutContent.removeItem(items[ii], true);
        }
        awContext.authorPage.endTargetPageUpdate(awContext.awItem, true);
    }
}
exports.onDropItem = function(awContext, targetItem, dropItem, $insertAt, $drag){
    var newChild;
    if ($drag.isTab) {
        if ($drag.isTabBody || ($insertAt == "bottom" || $insertAt == "top")) {
            var isDropItemTab = dropItem.isTabLayout;
            var layoutRoot = targetItem.layoutParent;
            if (!targetItem.layoutParent.layoutParent) {
                var children = exports.getItemsFromLayout(layoutRoot);
                for (var ii = 0, jj = children.length; ii < jj; ii++) {
                    layoutRoot.extractItem(children[ii]);
                }
                _newConvert(layoutRoot, {
                    $layoutType: "stack"
                });
                var layoutTab = layoutRoot.loadChildItem(null, {
                    $layoutType: "tabs"
                });
                for (var ii = 0, jj = children.length; ii < jj; ii++) {
                    if (dropItem != children[ii]) {
                        layoutTab.loadChildItem(children[ii]);
                    }
                }
                layoutRoot = layoutTab;
            }
            targetItem = layoutRoot;
        }
    }
    if (!newChild) {
        if (dropItem.$awAddNewItem) {
            if (dropItem.$fieldBind) {
                newChild = exports.onAddNewField(awContext, targetItem, dropItem, $insertAt);
            }
            else {
                if (dropItem.$vignette) {
                    newChild = exports.onAddNewVignette(awContext, targetItem, dropItem, $insertAt);
                }
                else {
                    if ($insertAt) {
                        newChild = _addNewSection(awContext.awArticle, awContext.awArticle.layoutContent, null, 0, dropItem.$category);
                        newChild.layoutParent.extractItem(newChild);
                    }
                    newChild = _addNewItem(awContext.awArticle, targetItem, dropItem.$authoringLevel, null, newChild, $insertAt, dropItem.$category);
                }
            }
        }
        else {
            newChild = _addNewItem(awContext.awArticle, targetItem, dropItem.$authoringLevel, dropItem.$bind, dropItem, $insertAt);
        }
    }
};


exports.excludeItem = function(awContext, removedItem){
    if (removedItem.isMenuItem && awContext.targetPage.isDashBoard) {
        awContext.targetPage.garbageLinks[removedItem.$bind] = 1;
    }
    var layoutParent = removedItem.layoutParent;
    var excludedFields = (removedItem.$authoringLevel == "field") ? [removedItem] : exports.extractFields(removedItem.layoutContent);
    if (excludedFields) {
        for (var ii = 0, jj = excludedFields.length; ii < jj; ii++) {
            awContext.toolsBar.onExcludeField(excludedFields[ii].$item.$bind, false);
        }
    }
    var index = layoutParent.getItemIndex(removedItem, true);
    layoutParent.removeItem(removedItem, true);
    var newItem = layoutParent.items[index];
    if (!newItem) {
        newItem = layoutParent.items[--index];
    }
    newItem = newItem || layoutParent.boxParent;
    switch (layoutParent.$layout.$layoutType) {
        case "row":
            layoutParent.addSpaceBox(index);
            break;
        case "tabs":
            if (layoutParent.items.length == 0) {
                exports.newConvert(layoutParent, {
                    $layoutType: "stack",
                    $width: "100"
                });
            }
            break;
    }
    if (awContext.toolsBar) {
        awContext.toolsBar.onExcludeItem();
    }
    return newItem;
}

exports.onAddNewVignette = function(awContext, targetItem, $newItem, $insertAt){
    var newChild = _addNewItem(awContext.awArticle, targetItem, "block", null, undefined, $insertAt, "menus");
    awContext.toolsBar.onExcludeField($newItem.$vignette, true);
    newChild.page.loadVignetteMenu(newChild, $newItem.$vignette);
    return newChild;
};


exports.onAddNewField = function(awContext, targetItem, $newItem, $insertAt){
    if ($newItem.$fieldCategory == "link") {
        delete awContext.targetPage.garbageLinks[$newItem.$fieldBind];
    }
    var newChild;
    if ($insertAt) {
        newChild = awContext.awArticle.layoutContent.loadChildItem(null, {
            $bind: $newItem.$fieldBind,
            $category: $newItem.$fieldCategory
        });
        newChild.layoutParent.extractItem(newChild);
    }
    newChild = _addNewItem(awContext.awArticle, targetItem, "field", $newItem.$fieldBind, newChild, $insertAt, $newItem.$fieldCategory);
    awContext.toolsBar.onExcludeField($newItem.$fieldBind, true);
    return newChild;
};

exports.deleteLayout = function(spaceBox){
    var layout = spaceBox.layoutParent;
    var layoutParent = layout.layoutParent;
    var deletedIndex;
    if (spaceBox) {
        deletedIndex = layout.getItemIndex(spaceBox, true);
        layout.removeItem(spaceBox, true);
    }
    if (layout.items.length > 0 && layout.$layout.$layoutType == "row") {
        _deleteLayoutRowItem(layout, deletedIndex);
    }
    else {
        if (layoutParent) {
            layoutParent.removeItem(layout, true);
            if (layoutParent.$layout.$layoutType == "row") {
                _deleteLayoutRowItem(layoutParent, deletedIndex);
            }
        }
        else {
            layoutParent = layout.boxParent.layoutParent;
            layoutParent.removeItem(layout.boxParent, true, false);
        }
    }
};
exports.getItemsFromLayout = function(layout, children, $authoringLevel){
    if (!children) {
        children = [];
    }
    for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
        var item = layout.items[ii];
        if (item != layout.boxParent) {
            if (item.isLayout) {
                children = exports.getItemsFromLayout(item, children, $authoringLevel);
            }
            else {
                if (!$authoringLevel || ($authoringLevel == item.$authoringLevel)) {
                    children.push(item);
                }
            }
        }
    }
    return children;
};

exports.defineLayoutChildAuhtoringLevel = function(layout){
    if (layout.boxParent.$authoringLevel == "block") {
        layout.$chilAuthoringLevel = "field";
    }
    else {
        var children = exports.getItemsFromLayout(layout);
        if (children.length > 0) {
            layout.$chilAuthoringLevel = children[0].$authoringLevel;
        }
        else {
            layout.$chilAuthoringLevel = layout.boxParent.$authoringLevel == "section" ? "block" : "section";
        }
    }
};

exports.extractFields = function(layout, fields, onlyDirectChild){
    fields = fields || [];
    if (layout) {
        for (var ii = layout.items.length - 1; ii >= 0; ii--) {
            var item = layout.items[ii];
            if (item != layout.boxParent) {
                if (item.$authoringLevel === "field") {
                    fields.push(item);
                }
                else {
                    if (onlyDirectChild && !item.isLayout) {
                        continue;
                    }
                    fields = exports.extractFields(item.isLayout ? item : item.layoutContent, fields);
                }
            }
        }
    }
    return fields;
}
