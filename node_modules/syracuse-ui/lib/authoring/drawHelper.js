"use strict";

function _hasLevelItems(items, $authoringLevel) {
	var res = false;
	if (items) {
		for (var ii = 0, jj = items.length; ii < jj && !res; ii++) {
			var item = items[ii];
			if (item.$authoringLevel == $authoringLevel && !item.isSpaceBox) {
				res = true;
			} else
			if (item.isLayout) {
				res = _hasLevelItems(item.items, $authoringLevel);
			}
		}
	}
	return res;
}

function _newConvert(layout, $newLayout) {
	var $oldLayoutType = layout.$layout.$layoutType;
	var $oldWidths = layout.$layout.$widths;
	var isTabLayout = $newLayout.$layoutType == "tabs";
	if (layout._tabs && !isTabLayout) {
		document.site.removeDomChild(layout._tabs);
		delete layout._tabs;
	}
	//replace layout properties by new ones
	delete layout.$layout.$autoSize;
	delete layout.$layout.$widths;
	if ($newLayout.$autoSize != undefined) {
		layout.$layout.$autoSize = $newLayout.$autoSize;
	}
	if ($newLayout.$widths != undefined) {
		layout.$layout.$widths = $newLayout.$widths;
	}
	layout.$layout.$layoutType = $newLayout.$layoutType;
	layout.ensureLayoutMode();

	if ($oldLayoutType == "row") {
		var oldWidths = $oldWidths.split(",");
		var newWidths = (layout.$layout.$widths || "100").split(",");
		if (oldWidths.length > newWidths.length) {
			var targetCell = layout.items[newWidths.length - 1];
			var targetLayout = targetCell;
			var outofItems = layout.items.slice(newWidths.length);
			for (var ii = 0, jj = outofItems.length; ii < jj; ii++) {
				var item = outofItems[ii];
				if (item.isSpaceBox) {
					layout.removeItem(item, true);
				} else {
					if (targetCell.isSpaceBox) {
						layout.removeItem(targetCell, true);
					}
					if (targetCell.isLayout) {
						if (targetCell.$layout.$layoutType == "stack") {
							if (item.isLayout && item.$layout.$layoutType == "stack") {
								item.moveItems(targetCell);
								layout.removeItem(item, true);
							} else {
								targetCell.loadChildItems([item]);
							}
						} else {
							targetLayout = layout.wrapIntack([targetCell], layout.getItemIndex(targetCell.$item));
							targetLayout.loadChildItems([item]);
						}
					} else {
						if (targetCell.isDisposed) {
							//previous was removed spaceBox
							layout.loadChildItems([item]);
						} else {
							targetLayout = layout.wrapIntack([targetCell], layout.getItemIndex(targetCell.$item));
							targetLayout.loadChildItems([item]);
						}
					}
				}
			}
		}
	} else {
		if ($newLayout.$layoutType == "row" && $oldLayoutType == "stack" && layout.items.length > 1) {
			layout.wrapIntack(layout.items.slice(0));
		}
	}
	if (isTabLayout) {
		var children = layout.getItems();
		/* for (var ii = 0, jj = children.length; ii < jj; ii++) {
         // if (!children[ii].isSpaceBox) {
         layout.loadChildItem(children[ii], undefined, ii);
         // }
         
         }*/
		layout.loadChildItems(children);
		var toClean = layout.items.slice(0);
		for (var ii = 0, jj = toClean.length; ii < jj; ii++) {
			var item = toClean[ii];
			if (item.isSpaceBox || !item.isSection) {
				layout.removeItem(item, true);
			}
		}
	} else {
		if (layout.$layout.$layoutType == "stack") {
			if (!layout.isSpaceBox && layout.layoutParent && layout.items.length == 1) {
				var layoutParent = layout.layoutParent;
				layout.moveItems(layoutParent, null, layoutParent.getItemIndex(layout.$item));
				layoutParent.removeItem(layout, true);
				layout = layoutParent;
			}
		}
	}
	for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
		var item = layout.items[ii];
		item.isTabLayout = isTabLayout;
		item.ensureLayoutMode();
		if (!item.isLayout && !isTabLayout) {
			if (item.isSection && !item.tabTitle && !item.loaded && item.$item.$opened !== false) {
				item.openBox(true);
			}
		} else {
			if ($oldLayoutType == "tabs" && !isTabLayout) {
				for (var mm = 0, kk = item.items.length; mm < kk; mm++) {
					var child = item.items[mm];
					if (!child.isLayout && child.isSection && !child.tabTitle && !child.loaded && child.$item.$opened !== false) {
						child.openBox(true);
					}
				}
			}
		}
	}
	return layout;
}

function _addNewItem(awPalette, awArticle, targetItem, $newAuthoringLevel, $bind, dropItem, $insertAt, $newCategory) {
	var newChild;
	var targetBoxParent = targetItem.boxParent;
	var targetItemIndex = targetItem.layoutParent ? targetItem.layoutParent.getItemIndex(targetItem.$item) : undefined;

	if ($insertAt !== "undefined") {
		if (targetItem.layoutParent) {
			switch (targetItem.layoutParent.$layout.$layoutType) {
				case "stack":
					switch ($insertAt) {
						case "top":
							break;
						case "bottom":
							targetItemIndex++;
							break;
						case "left":
						case "right":
							if (!(targetItem.isLayout && targetItem.$layout.$layoutType == "row")) {
								var rowLayout = targetItem.layoutParent.createChildItem({
									$layoutType: "row",
									$items: []
								}, null, targetItemIndex);
								rowLayout.loadChildItems([targetItem]);
								rowLayout.$layout.$widths = null;
								targetItemIndex = $insertAt == "left" ? 0 : 1;
							} else {
								targetItem.loadChildItem(dropItem, null, $insertAt == "left" ? 0 : targetItem.items.length);
								return dropItem;
							}
							break;
					}
					break;
				case "row":
					switch ($insertAt) {
						case "top":
						case "bottom":
							//drop in row empty cell, wrap drop in stack
							targetItem.layoutParent.wrapIntack([targetItem], targetItemIndex);
							targetItemIndex = ($insertAt == "top") ? 0 : 1;
							break;
						case "left":
						case "right":
							targetItem.layoutParent.$layout.$widths = null;
							if ($insertAt == "right") {
								targetItemIndex++;
							}
							break;
					}
					break;
				case "tabs":
					if ($insertAt == "right") {
						targetItemIndex++;
					}
					break;
			}
		} else {
			targetItemIndex = 0;
		}
	}
	if (dropItem && dropItem.isLayout) {
		newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
	} else {
		if (targetItem.isLayout) {
			targetItem.setChildAuhtoringLevel();
		}
		var $targetAuthoringLevel = targetItem.$chilAuthoringLevel || targetItem.$authoringLevel;
		if (targetItem.isLayout) {
			$targetAuthoringLevel = targetItem.$chilAuthoringLevel;
			if (!targetItem.layoutParent) {
				targetItem = document.site.authorPage.ensureLayoutHasParent(targetItem);
			}
		}
		if ($targetAuthoringLevel == "field") {
			if ($newAuthoringLevel == "field") {
				newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
			} else {
				//dragged section                       
				targetItem.layoutParent.loadChildItems(dropItem.layoutContent.getItems("field"), targetItemIndex);
				newChild = targetItem;
			}
		} else {
			if ($targetAuthoringLevel == "block" && $newAuthoringLevel == "section") {
				dropItem.layoutContent.setChildAuhtoringLevel();
				if (dropItem.layoutContent.$chilAuthoringLevel == "block") {
					targetItem.layoutParent.loadChildItems(dropItem.layoutContent.getChildren(), targetItemIndex);
					newChild = targetItem.boxParent;
				} else {
					var children = dropItem.layoutContent.extractAndDispose();
					if (children.length > 0) {
						newChild = page.layoutContent.ensureSection(children[0], targetItemIndex);
						newChild.layoutContent.newLoadChildItems(children, 1);
					}
				}
			} else {
				newChild = targetItem.layoutParent.ensureSection(dropItem, targetItemIndex);
			}
		}
	}
	if (!newChild) {
		newChild = targetItem && targetItem.isSpaceBox;
		newChild = newChild || awArticle;
	}
	if (targetItem && targetItem.isSpaceBox) {
		targetItem.layoutParent.removeItem(targetItem, true, false);
	}
	if (dropItem && !dropItem.layoutParent && dropItem.articleParent) {
		dropItem.articleParent.removeItem(dropItem, true);
	}
	return newChild;
};

exports.switchTabPanelChildren = function(awPalette, $layoutType) {
	var children = (awPalette.awItem.isLayout ? awPalette.awItem : awPalette.awItem.layoutContent).getItems();
	if (!(children.length > 0 && children[0].$authoringLevel == "field")) {
		exports.newConvert(awPalette.awItem.layoutContent, {
			$layoutType: ($layoutType == "tabs") ? "tabs" : "stack"
		});
		var children = awPalette.awItem.layoutContent.getItems();
		for (var ii = 0, jj = children.length; ii < jj; ii++) {
			if (!children[ii].isSpaceBox) {
				awPalette.awItem.layoutContent.loadChildItems([children[ii]]);
			}
		}
		var items = [];
		for (var ii = 0, jj = awPalette.awItem.layoutContent.items.length; ii < jj; ii++) {
			if (!awPalette.awItem.layoutContent.items[ii].isSection) {
				items.push(awPalette.awItem.layoutContent.items[ii]);
			}
		}
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			awPalette.awItem.layoutContent.removeItem(items[ii], true);
		}
		document.site.authorPage.endTargetPageUpdate(awPalette.awItem, true);
	}
};
exports.onDropItem = function(awPalette, targetItem, dropItem, $insertAt, $drag) {
	var newChild;
	if ($drag.isTab) {
		if ($drag.isTabBody || ($insertAt == "bottom" || $insertAt == "top")) {
			var isDropItemTab = dropItem.isTabLayout;
			var layoutRoot = targetItem.layoutParent;
			if (!targetItem.layoutParent.layoutParent) {
				var children = layoutRoot.getItems();
				for (var ii = 0, jj = children.length; ii < jj; ii++) {
					layoutRoot.extractItem(children[ii]);
				}
				_newConvert(layoutRoot, {
					$layoutType: "stack"
				});
				var layoutTab = layoutRoot.loadChildItem(null, {
					$layoutType: "tabs"
				});
				for (var ii = 0, jj = children.length; ii < jj; ii++) {
					if (dropItem != children[ii]) {
						layoutTab.loadChildItem(children[ii]);
					}
				}
				layoutRoot = layoutTab;
			}
			targetItem = layoutRoot;
		}
	}
	if (!newChild) {
		if (dropItem.$awAddNewItem) {
			if (dropItem.$fieldBind) {
				newChild = exports.onAddNewField(awPalette, targetItem, dropItem, $insertAt);
			} else {
				if (dropItem.$vignette) {
					newChild = exports.onAddNewVignette(awPalette, targetItem, dropItem, $insertAt);
				} else {
					if ($insertAt) {
						newChild = _addNewSection(awPalette.awArticle, awPalette.awArticle.layoutContent, null, 0, dropItem.$category);
						newChild.layoutParent.extractItem(newChild);
					}
					newChild = _addNewItem(awPalette, awPalette.awArticle, targetItem, dropItem.$authoringLevel, null, newChild, $insertAt, dropItem.$category);
				}
			}
		} else {
			newChild = _addNewItem(awPalette, awPalette.awArticle, targetItem, dropItem.$authoringLevel, dropItem.$bind, dropItem, $insertAt);
		}
	}
};



exports.onAddNewVignette = function(awPalette, targetItem, $newItem, $insertAt) {
	var newChild = _addNewItem(awPalette, awPalette.awArticle, targetItem, "block", null, undefined, $insertAt, "menus");
	if (awPalette.onExcludeField) {
		awPalette.onExcludeField($newItem.$vignette, false, true);
	}
	newChild.page.loadNewVignetteMenu(newChild, $newItem.$vignette);
	return newChild;
};

exports.onAddNewField = function(awPalette, targetItem, $newItem, $insertAt) {
	var newChild;
	if ($insertAt) {
		newChild = awPalette.awArticle.layoutContent.loadChildItem(null, {
			$bind: $newItem.$fieldBind,
			$category: $newItem.$fieldCategory,
			$skin: $newItem.$fieldSkin
		});
		newChild.layoutParent.extractItem(newChild);
	}
	newChild = _addNewItem(awPalette, awPalette.awArticle, targetItem, "field", $newItem.$fieldBind, newChild, $insertAt, $newItem.$fieldCategory);
	if (awPalette.onExcludeField) {
		awPalette.onExcludeField($newItem.$fieldBind, false);
	}
	return newChild;
};