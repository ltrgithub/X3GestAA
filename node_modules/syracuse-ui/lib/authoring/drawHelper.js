"use strict";

exports.onDropItem = function(awPalette, targetItem, dropItem, $insertAt, $drag) {
	var newChild;
	if ($drag.isTab) {
		if ($drag.isTabBody || ($insertAt == "bottom" || $insertAt == "top")) {
			var isDropItemTab = dropItem.isTabLayout;
			var layoutRoot = targetItem.layoutParent;
			if (!targetItem.layoutParent.layoutParent) {
				var children = layoutRoot.getItems();
				for (var ii = 0, jj = children.length; ii < jj; ii++) {
					layoutRoot.extractItem(children[ii]);
				}
				layoutRoot.convertToNewLayout({
					$layoutType: "stack"
				});
				var layoutTab = layoutRoot.loadChildItem(null, {
					$layoutType: "tabs"
				});
				for (var ii = 0, jj = children.length; ii < jj; ii++) {
					if (dropItem != children[ii]) {
						layoutTab.loadChildItem(children[ii]);
					}
				}
				layoutRoot = layoutTab;
			}
			targetItem = layoutRoot;
		}
	}
	exports.onAddNewItem(targetItem, dropItem, $insertAt);
};


function _addNewItem(awArticle, targetItem, $newAuthoringLevel, $bind, dropItem, $insertAt, $newCategory) {
	var newChild;
	var targetBoxParent = targetItem.boxParent;
	var targetItemIndex = targetItem.layoutParent ? targetItem.layoutParent.$layout.$items.indexOf(targetItem.$item) : undefined;

	if ($insertAt !== "undefined") {
		if (targetItem.layoutParent) {
			switch (targetItem.layoutParent.$layout.$layoutType) {
				case "stack":
					switch ($insertAt) {
						case "top":
							break;
						case "bottom":
							targetItemIndex++;
							break;
						case "left":
						case "right":
							if (!(targetItem.isLayout && targetItem.$layout.$layoutType == "row")) {
								var rowLayout = targetItem.layoutParent.createChildItem({
									$layoutType: "row",
									$items: []
								}, null, targetItemIndex);
								rowLayout.loadChildItems([targetItem]);
								rowLayout.$layout.$widths = null;
								targetItemIndex = $insertAt == "left" ? 0 : 1;
							} else {
								targetItem.loadChildItem(dropItem, null, $insertAt == "left" ? 0 : targetItem.items.length);
								return dropItem;
							}
							break;
					}
					break;
				case "row":
					switch ($insertAt) {
						case "top":
						case "bottom":
							//drop in row empty cell, wrap drop in stack
							targetItem.layoutParent.wrapIntack([targetItem], targetItemIndex);
							targetItemIndex = ($insertAt == "top") ? 0 : 1;
							break;
						case "left":
						case "right":
							targetItem.layoutParent.$layout.$widths = null;
							if ($insertAt == "right") {
								targetItemIndex++;
							}
							break;
					}
					break;
				case "tabs":
					if ($insertAt == "right") {
						targetItemIndex++;
					}
					break;
			}
		} else {
			targetItemIndex = 0;
		}
	}
	if (dropItem && dropItem.isLayout) {
		newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
	} else {
		if (targetItem.isLayout) {
			targetItem.setChildAuhtoringLevel();
		}
		var $targetAuthoringLevel = targetItem.$chilAuthoringLevel || targetItem.$authoringLevel;
		if (targetItem.isLayout) {
			$targetAuthoringLevel = targetItem.$chilAuthoringLevel;
			if (!targetItem.layoutParent) {
				targetItem = document.site.authorPage.ensureLayoutHasParent(targetItem);
			}
		}
		if ($targetAuthoringLevel == "field") {
			if ($newAuthoringLevel == "field") {
				newChild = targetItem.layoutParent.loadChildItem(dropItem, null, targetItemIndex);
			} else {
				//dragged section                       
				targetItem.layoutParent.loadChildItems(dropItem.layoutContent.getItems("field"), targetItemIndex);
				newChild = targetItem;
			}
		} else {
			if ($targetAuthoringLevel == "block" && $newAuthoringLevel == "section") {
				dropItem.layoutContent.setChildAuhtoringLevel();
				if (dropItem.layoutContent.$chilAuthoringLevel == "block") {
					targetItem.layoutParent.loadChildItems(dropItem.layoutContent.getChildren(), targetItemIndex);
					newChild = targetItem.boxParent;
				} else {
					var children = dropItem.layoutContent.extractAndDispose();
					if (children.length > 0) {
						newChild = page.layoutContent.ensureSection(children[0], targetItemIndex);
						newChild.layoutContent.newLoadChildItems(children, 1);
					}
				}
			} else {
				newChild = targetItem.layoutParent.ensureSection(dropItem, targetItemIndex);
			}
		}
	}
	if (!newChild) {
		newChild = targetItem && targetItem.isSpaceBox;
		newChild = newChild || awArticle;
	}
	if (targetItem && targetItem.isSpaceBox) {
		targetItem.layoutParent.removeItem(targetItem, true, false);
	}
	if (dropItem && !dropItem.layoutParent && dropItem.articleParent) {
		dropItem.articleParent.removeItem(dropItem, true);
	}
	return newChild;
};