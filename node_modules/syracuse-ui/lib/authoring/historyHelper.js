"use strict";
var helpers = require('syracuse-core/lib/helpers');
var patternFactory = require("syracuse-ui/lib/authoring/patterns/patternFactory");

function _refreshStepLinks(awContext){
    var metadata;
    if (awContext.updatedSteps.length > 1) {
        metadata = {
            $links: {
                $previousLayout: {
                    $title: awContext.localize.aw_previousLayoutOn.replace("{0}", awContext.currentUpdtateStep).replace("{1}", awContext.updatedSteps.length),
                    $isDisabled: awContext.currentUpdtateStep == 0
                },
                $undoAllLayout: {
                    $isDisabled: false
                }
            }
        };
        if (awContext.currentUpdtateStep == awContext.updatedSteps.length - 1) {
            metadata.$links.$nextLayout = {
                $title: awContext.localize.aw_nextLayout,
                $isDisabled: true
            };
        }
        else {
            metadata.$links.$nextLayout = {
                $title: awContext.localize.aw_nextLayoutOn.replace("{0}", awContext.currentUpdtateStep + 1).replace("{1}", awContext.updatedSteps.length),
                $isDisabled: false
            };
        }
    }
    else {
        metadata = {
            $links: {
                $previousLayout: {
                    $title: awContext.localize.aw_previousLayout,
                    $isDisabled: true
                },
                $nextLayout: {
                    $title: awContext.localize.aw_nextLayout,
                    $isDisabled: true
                },
                $undoAllLayout: {
                    $isDisabled: true
                }
            }
        };
    }
    awContext.palette.applyChange(metadata);
}

function _onEndChangeStep(awContext, menuItem, $item){
    var $bind = awContext.awItem.$item.$bind;
    awContext.awArticle.reloadLayout(helpers.object.clone($item || awContext.updatedSteps[awContext.currentUpdtateStep], true));
    _refreshStepLinks(awContext);
    var selectItem;
    if ($bind) {
        var bounds = awContext.awArticle.boundFields[$bind];
        selectItem = bounds ? bounds[0] : null;
    }
    awContext.toolsBar.onEndChangeStep();
    awContext.authorPage.selectItem(selectItem || awContext.awArticle, true);
}


exports.notifySteps = function(awContext, resetUpdates){
    if (!resetUpdates && awContext.isUpdated) {
        if (awContext.currentUpdtateStep != awContext.updatedSteps.length - 1) {
            awContext.updatedSteps.splice(awContext.currentUpdtateStep + 1);
            //this.notifySteps(true);
        }
        awContext.updatedSteps.push(helpers.object.clone(awContext.awArticle.$item, true));
        awContext.currentUpdtateStep = awContext.updatedSteps.length - 1;
    }
    else {
        (awContext.updatedSteps = []).push(awContext.$sourceItem);
        awContext.currentUpdtateStep = 0;
    }
    _refreshStepLinks(awContext);
};


exports.onChangeSep = function(awContext, menuItem){
    var $item;
    switch (menuItem.$item.$bind) {
        case "$previousLayout":
            awContext.currentUpdtateStep--;
            _onEndChangeStep(awContext, menuItem, $item);
            break;
        case "$nextLayout":
            awContext.currentUpdtateStep++;
            _onEndChangeStep(awContext, menuItem, $item);
            break;
        case "$undoAllLayout":
            document.site.showMessage({
                $title: awContext.localize.aw_updateMessageTitle,
                $message: awContext.localize.aw_confirmUndoAll,
                $type: "question",
                $buttons: "yesno",
                callback: function(response){
                    if (response.$id == "yes") {
                        awContext.currentUpdtateStep = 0;
                        exports.notifySteps(awContext, true);
                        _onEndChangeStep(awContext, menuItem, $item);
                    }
                }
            });
            break;
        case "$defaultLayout":
            $item = awContext.$defaultItem;
            awContext.authorPage.notifyUpdate(true);
            _onEndChangeStep(awContext, menuItem, $item);
            break;
        default:
            if (menuItem.$item.$bind.indexOf("pattern") == 0) {
                if ((menuItem.$item.$bind != "pattern-headerTabs") && (awContext.awItem.$authoringLevel == "section" || awContext.awItem.$authoringLevel == "block")) {
                    var pattern = patternFactory.patterns[menuItem.$item.$bind];
                    if (pattern.isBoxOnly) {
                        var children = awContext.drawHelper.getItemsFromLayout(awContext.awItem.layoutContent);
                        if (children.length && children[0].$authoringLevel == "field") {
                            return;
                        }
                    }
                    var $result = patternFactory.build(menuItem.$item.$bind, awContext.$prototype, awContext.awItem.$item);
                    if (!$result && !$result.$layout) {
                        return;
                    }
                    awContext.awItem.$item.$layout = $result.$layout;
                    $item = awContext.awArticle.$item;
                }
                else {
                    $item = patternFactory.build(menuItem.$item.$bind, awContext.$prototype, awContext.$sourceItem);
                }
                awContext.authorPage.notifyUpdate(true);
            }
            _onEndChangeStep(awContext, menuItem, $item);
            break;
    }
};
