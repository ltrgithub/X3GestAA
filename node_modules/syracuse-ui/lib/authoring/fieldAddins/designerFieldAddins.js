"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _types = [require("syracuse-ui/lib/authoring/fieldAddins/choiceFieldAddin").ChoiceFieldAddin, require("syracuse-ui/lib/authoring/fieldAddins/documentFieldAddin").DocumentFieldAddin];

function DesignerFieldAddins() {}

exports.DesignerFieldAddins = helpers.defineClass(DesignerFieldAddins, null, {
	load: function(designer) {
		this.designer = designer;
		this.addins = [];
		for (var ii = 0, jj = _types.length; ii < jj; ii++) {
			var addin = new _types[ii]();
			addin.load(this.designer);
			this.addins.push(addin);
		}
	},
	addFieldSection: function($layout) {
		if ($layout.$items.length == 0) {
			for (var ii = 0, jj = this.addins.length; ii < jj; ii++) {
				$layout.$items.push(this.addins[ii].getSection());
			}
		}
	},
	onShow: function() {
		for (var ii = 0, jj = this.addins.length; ii < jj; ii++) {
			this.addins[ii].onShow();
		}
	},
	notifyDataChange: function(metaData) {
		for (var ii = 0, jj = this.addins.length; ii < jj; ii++) {
			this.addins[ii].notifyDataChange(metaData);
		}
	},
	onDesignerApplyChange: function(newData) {
		for (var ii = 0, jj = this.addins.length; ii < jj; ii++) {
			this.addins[ii].onDesignerApplyChange(newData);
		}
	},
	dispose: function() {
		if (this.addins) {
			for (var ii = 0, jj = this.addins.length; ii < jj; ii++) {
				this.addins[ii].dispose();
			}
		}
		this.designer = this.addins = null;
	}
});