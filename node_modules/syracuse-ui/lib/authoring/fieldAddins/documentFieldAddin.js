"use strict";
var helpers = require('syracuse-core/lib/helpers');

function DocumentFieldAddin() {}

exports.DocumentFieldAddin = helpers.defineClass(DocumentFieldAddin, null, {
	load: function(designer) {
		this.designer = designer;
		this.designer.$prototype.$properties.$documentField$isEmbedded = {
			$type: "application/x-boolean",
			$title: syra_local.fdoc_isEmbedded
		};
		this.designer.$prototype.$properties.$documentField$imageWidth = {
			$type: "application/x-string",
			$title: syra_local.fdoc_width
		};
		this.designer.$prototype.$properties.$documentField$imageHeight = {
			$type: "application/x-string",
			$title: syra_local.fdoc_height
		};
		this.designer.$prototype.$properties.$documentField$isAutoSize = {
			$type: "application/x-boolean",
			$title: syra_local.fdoc_isAutoHeight
		};
	},
	getSection: function() {
		return {
			$category: "section",
			$authoringType: "documentField",
			$isTitleHidden: true,
			$layout: {
				$items: [{
					$bind: "$documentField$isAutoSize",
					$isEditMode: true,
					$isLeftSpaceHidden: true,
					$css: "s-aw-prop"
				}, {
					$bind: "$documentField$isEmbedded",
					$isEditMode: true,
					$isLeftSpaceHidden: true,
					$css: "s-aw-prop"
				}, {
					$bind: "$documentField$imageWidth",
					$isEditMode: true,
					$css: "s-aw-prop"
				}, {
					$bind: "$documentField$imageHeight",
					$isEditMode: true,
					$css: "s-aw-prop"
				}]
			}
		};
	},
	onShow: function() {
		var designedItem = this.designer.designedItem;
		if (designedItem.$authoringType == "documentField") {
			this.designer.applyChange({
				$documentField$isAutoSize: designedItem.$item.$isAutoSize,
				$documentField$imageWidth: designedItem.$item.$imageWidth,
				$documentField$imageHeight: designedItem.$item.$imageHeight,
				$documentField$isEmbedded: designedItem.$item.$isEmbedded,
				$properties: {
					$documentField$isAutoSize: {
						isHidden: !designedItem.isImage
					},
					$documentField$isEmbedded: {
						isHidden: designedItem.isImage
					},
					$documentField$imageWidth: {
						isHidden: !designedItem.isImage
					},
					$documentField$imageHeight: {
						isHidden: !designedItem.isImage
					}
				}
			});
		}
	},
	notifyDataChange: function(metaData) {
		if (this.designer.designedItem.$authoringType == "documentField") {
			if (metaData.$documentField$isAutoSize != undefined ||
				metaData.$documentField$isEmbedded != undefined ||
				metaData.$documentField$imageHeight != undefined ||
				metaData.$documentField$imageWidth != undefined) {
				this.designer.designedItem.applyDesignMetaData({
					$isAutoSize: metaData.$documentField$isAutoSize,
					$imageWidth: metaData.$documentField$imageWidth,
					$imageHeight: metaData.$documentField$imageHeight,
					$isEmbedded: metaData.$documentField$isEmbedded
				}, true);
			}
		}
	},
	onDesignerApplyChange: function(newData) {
		if (newData.$documentField$isAutoSize !== undefined) {
			this.designer.applyChange({
				$properties: {
					$documentField$imageHeight: {
						$isDisabled: newData.$documentField$isAutoSize
					}
				}
			}, true);
		}
	},
	dispose: function() {
		this.designer = null;
	}
});