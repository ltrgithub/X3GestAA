"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DragDrop = require("./dragDrop").DragDrop;
var layoutSettings = require('./setting/layoutSettings');



function LayoutAuthoring(){
}

exports.LayoutAuthoring = helpers.defineClass(LayoutAuthoring, null, {
    load: function(authorPage){
        this.authorPage = authorPage;
        this.bindEvents();
    },
    getPatterns: function(){
        return layoutSettings.patterns;
    },
    getPattern: function($layoutSubType){
        var $layout = layoutSettings.patterns[$layoutSubType];
        $layout.$title = this.authorPage.localize["aw_title_" + $layoutSubType.replace("-", "_", "g")];
        return $layout;
    },
    _disposeLayout: function(layout){
        if (layout.layoutParent) {
            var childIndex = layout.layoutParent.getItemIndex(layout.$item);
            if (childIndex >= 0) {
                layout.layoutParent.$layout.$items.splice(childIndex, 1);
                layout.layoutParent.items.splice(childIndex, 1);
            }
        }
        document.controller.disposeObject(layout);
    },
    onClickItem: function(item, target){
        if (!document.controller.findArticle($(target)).isAuthoringDisabled) {
            // if (target.className.indexOf("s-aw-item") >= 0) {
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.stop(event);
                delete document.site.DDAuthoring;
            }
            else {
                delete document.site.requestedDDAuthoringItem;
                var item = document.controller.findItem($(target));
                if (item) {
                    this.authorPage.selectItem(item, true);
                }
            }
            //  return false;
        }
        //}
        return true;
    },
    bindEvents: function(){
        var self = this;
        document.site.$$container.delegate(".s-aw-item", "click.author", function(event){
            self.onClickItem(document.controller.findItem($(this)), this);
            return false;
        }).delegate(".s-aw-item", "mousedown.author", function(event){
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.stop(event);
                delete document.site.DDAuthoring;
            }
            else {
                document.site.requestedDDAuthoringItem = document.controller.findItem($(this));
            }
            return false;
        }).delegate(".s-aw-item", "mousemove.author", function(event){
            var item = document.controller.findItem($(this));
            if (document.site.requestedDDAuthoringItem) {
                (document.site.DDAuthoring = new DragDrop()).start(self.authorPage.targetPage.$$body);
            }
            else {
                if (document.site.DDAuthoring) {
                    if (item.layoutParent) {
                        document.site.DDAuthoring.moveDragImage(event, item);
                    }
                }
            }
            if (item) {
                self.authorPage.toggleOverItem(item, true);
            }
            return false;
        }).delegate(".s-aw-item", "mouseenter.author mouseleave.author", function(event){
            if (document.site.DDAuthoring) {
                var $$item = $(this);
                var layout = document.controller.findLayout($$item);
                if (layout && layout.$layout.$layoutType == "tabs") {
                    if (event.type == "mouseenter") {
                        var tabItem = document.controller.findItem($$item);
                        self._ddTabEnter = setTimeout(function(){
                            if (tabItem) {
                                if (!tabItem.$item.$opened) {
                                    tabItem.openBox(true);
                                }
                            }
                        }, 500);
                    }
                    else {
                        if (self._ddTabEnter) {
                            clearTimeout(self._ddTabEnter);
                            delete self._ddTabEnter;
                        }
                    }
                }
            }
            // return false;
        });
        document.site.$$container.delegate(".s-aw-emptyold", "mouseup.author mousemove.author mouseleave.author mouseenter.author", function(event){
            if (document.site.DDAuthoring) {
                var dragdrop = document.site.DDAuthoring;
                if (dragdrop.sourceItem) {
                    var layout = document.controller.findLayout($(this));
                    var emptyBox = document.controller.findItem($(event.target));
                    switch (event.type) {
                        case "mouseup":
                            dragdrop.targetItem = emptyBox;
                            return true;
                            break;
                        case "mousemove":
                            dragdrop.moveDragImage(event, layout.boxParent);
                            break;
                        case "mouseleave":
                            emptyBox.deleteLink.style.visibility = "";
                            document.site.toggleClass(emptyBox.drop, "s-drop-over", false);
                            break;
                        case "mouseenter":
                            if (dragdrop.getDropAction(event, layout.boxParent)) {
                                emptyBox.deleteLink.style.visibility = "hidden";
                                document.site.toggleClass(emptyBox.drop, "s-drop-over", true);
                                dragdrop.moveDragCue(null); //hide
                            }
                            break;
                    }
                }
            }
            return false;
        }).delegate(".s-aw-layout-delete", "click.author", function(){
            if (!document.site.DDAuthoring) {
                delete document.site.requestedDDAuthoringItem;
                var emptyBox = document.controller.findItem($(this));
                setTimeout(function(){
                    self.deleteLayout(emptyBox.layoutParent, emptyBox);
                }, 10);
            }
            return false;
        });
    },
    deleteLayout: function(layout, emptyBox){
        if (layout.$layout.$layoutType == "row" && layout.items.length > 1) {
            var childIndex = emptyBox.layoutParent.getItemIndex(emptyBox.$item);
            layout.boxParent.getArticle().removeItem(emptyBox, true);
            if (childIndex >= 0) {
                document.site.removeDomChild(layout._slots[childIndex]);
                layout.$layout.$items.splice(childIndex, 1);
                layout.items.splice(childIndex, 1);
                layout._slots.splice(childIndex, 1);
            }
            layout.colWidths = (layout.$layout.$layoutSubType = layout.items.length == 2 ? "50-50" : "33-33-33").split("-");
            for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                layout._slots[ii].style.width = layout.colWidths[ii] + "%";
            }
        }
        else {
            if (layout.layoutParent) {
                this._disposeLayout(layout);
            }
            else {
                var layoutParent = layout.boxParent.layoutParent
                layoutParent.removeItem(layout.boxParent);
            }
        }
    },
    newConvert: function(layout, $newLayout){
        var $isTabLayout = $newLayout.$layoutType == "tabs";
        if (layout._tabs && !$isTabLayout) {
            document.site.removeDomChild(layout._tabs);
            delete layout._tabs;
        }
        var oldChildSlots = layout._slots;
        var oldColWidths = layout.colWidths;
        
        //replace layout properties by new ones
        delete layout.$layout.$fitToContent;
        delete layout.$layout.$layoutSubType;
        if ($newLayout.$fitToContent != undefined) {
            layout.$layout.$fitToContent = $newLayout.$fitToContent;
        }
        if ($newLayout.$layoutSubType != undefined) {
            layout.$layout.$layoutSubType = $newLayout.$layoutSubType;
        }
        layout.$layout.$layoutType = $newLayout.$layoutType;
        layout._ensureRoot();
        // if (layout._slots.length > 0) {
        if (layout.$layout.$layoutType == "row") {
            if (oldChildSlots.length > 0) {
                if (oldColWidths.length > layout.colWidths.length) {
                    //A copier dans la dernierecolonne
                    var lastSlot = layout._slots[layout.colWidths.length - 1];
                    var lastItem = layout.items[layout.colWidths.length - 1];
                    for (var ii = layout._slots.length, jj = oldColWidths.length; ii < jj; ii++) {
                        layout._slots[ii].style.width = layout.colWidths[ii] + "%";
                    }
                }
            }
            else {
                if (layout.colWidths.length > layout.items.length) {
                    for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                        layout.wrapInSlot(layout.items[ii], ii);
                    }
                }
                else {
                    var stackCol = layout.boxParent.page.createNewLayout({
                        $layoutType: "stack",
                        $items: []
                    }, layout.boxParent);
                    layout.wrapInSlot(stackCol, 0);
                    stackCol._ensureRoot();
                    stackCol.items = [];
                    for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                        var item = layout.items[ii];
                        item.layoutParent = null;
                        this.newMoveItem(stackCol, null, item, true);
                    }
                    (layout.$layout.$items = []).push(stackCol.$layout);
                    (layout.items = []).push(stackCol);
                }
            }
            if (layout.colWidths.length > 0) {
                for (var ii = layout.items.length, jj = layout.colWidths.length; ii < jj; ii++) {
                    // var newEmptyBox = layout.boxParent.page.createNewItem({}, layout.box, new emptyBox.EmptyBox());
                    // this.newMoveItem(layout, null, newEmptyBox);
                    layout.ensureEmptyBox(true);
                    layout._slots[ii].style.width = layout.colWidths[ii] + "%";
                }
            }
        }
        else {
            if (oldChildSlots) {
                for (var ii = 0, jj = oldChildSlots.length; ii < jj; ii++) {
                    var $$oldSlot = $(oldChildSlots[ii]);
                    layout._root.appendcolWidths($$oldSlot.children());
                    $$oldSlot.remove();
                }
            }
        }
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            var item = layout.items[ii];
            item.$isTabLayout = $isTabLayout;
            if (item.ensureLayoutMode) {
                item.ensureLayoutMode();
            }
        }
        if ($isTabLayout) {
            layout._ensureOneTabOpened();
        }
    },
    _extractFields: function(layout, fields){
        fields = fields || [];
        if (layout) {
            for (var ii = layout.items.length - 1; ii >= 0; ii--) {
                var item = layout.items[ii];
                if (item != layout.boxParent) {
                    if (item.$authoringLevel === "field") {
                        fields.push(item);
                    }
                    else {
                        fields = this._extractFields(item.$layout ? item : item.layoutContent, fields);
                    }
                }
            }
        }
        return fields;
    },
    newMoveItem: function(layout, targetItem, newItem, insertAfter){
        if (!targetItem || (targetItem.$authoringLevel == newItem.$authoringLevel) || (targetItem.isSection == newItem.isSection)) {
            var action = insertAfter ? "insertAfter" : "insertBefore";
            var sourceLayout = newItem.layoutParent;
            if (sourceLayout) {
                //source layout is null for new item
                var oldIndex = sourceLayout.getItemIndex(newItem.$item);
                //remove from previous position in source layout
                sourceLayout.$layout.$items.splice(oldIndex, 1);
                sourceLayout.items.splice(oldIndex, 1);
                sourceLayout.ensureEmptyBox();
            }
            var newItemIndex = targetItem ? layout.getItemIndex(targetItem) : (layout.$layout.$items.length + 1);
            if (insertAfter) {
                newItemIndex++;
            }
            else {
                if (!targetItem && !layout.$layout.$layoutType == "row") {
                    newItemIndex = 0;
                }
            }
            layout.$layout.$items.splice(newItemIndex, 0, newItem.$item);
            layout.items.splice(newItemIndex, 0, newItem);
            if (targetItem) {
                if (layout == sourceLayout) {
                    newItem.$$item[action](targetItem.$$item);
                }
                else {
                    newItem.$$container = targetItem.$$container;
                }
                if (!newItem.$$item && newItem.$$container) {
                    newItem.loadBox();
                    if (newItem.isSection) {
                        newItem.setTitle(newItem.getTitle());
                    }
                }
                newItem.$$item[action](targetItem.$$item);
                
            }
            else {
                if (!newItem.$$item && newItem.$$container) {
                    newItem.loadBox();
                }
            }
            if (layout.$layout.$layoutType == "row") {
                layout.wrapInSlot(newItem, newItemIndex);
            }
            else {
                layout.wrapInSlot(newItem);
            }
            if (!newItem.$$item && newItem.$$container) {
                newItem.loadBox();
                if (newItem.isSection) {
                    newItem.setTitle(newItem.getTitle());
                    newItem.ensureLayoutMode();
                }
            }
            if (newItemIndex == 0) {
                newItem.$$container.prepend(newItem.$$item);
            }
        }
        else {
            if (targetItem.$authoringLevel == "field") {
                if (newItem.layoutContent) {
                    var fields = this._extractFields(newItem.layoutContent);
                    for (var ii = 0, jj = fields.length; ii < jj; ii++) {
                        this.newMoveItem(targetItem.layoutParent, targetItem, fields[ii], false);
                    }
                }
            }
            else {
                this.authorPage.addNewItem({
                    targetItem: targetItem.$authoringLevel == "article" ? targetItem : targetItem.boxParent,
                    sibling: targetItem,
                    $category: newItem.$authoringLevel,
                    $bind: newItem.$item.$bind,
                    newItem: newItem
                });
            }
        }
    },
    extractItemsFromLayout: function(layout, children){
        if (!children) {
            children = [];
        }
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            var item = layout.items[ii];
            if (item != layout.boxParent) {
                if (item.$layout) {
                    children = this.extractItemsFromLayout(item, children);
                }
                else {
                    children.push(item);
                }
            }
        }
        return children;
    },
    dispose: function(){
        if (document.site.$$container) {
            document.site.$$container.undelegate(".author");
        }
        this.authorPage = this._ddTabEnter = null;
    }
});
