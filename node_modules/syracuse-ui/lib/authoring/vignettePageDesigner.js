"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Designer = require("syracuse-ui/lib/authoring/designer").Designer;
var HistoryTool = require("syracuse-ui/lib/authoring/tools/historyTool").HistoryTool;
var DesignerWorkingCopy = require("syracuse-ui/lib/authoring/designerWorkingCopy").DesignerWorkingCopy;

function VignettePageDesigner() {}

exports.VignettePageDesigner = helpers.defineClass(VignettePageDesigner, Designer, {
	onEndChangeStep: function($item) {
		var $bind = this.awItem.$item.$bind;
		var $article = helpers.object.clone($item || this.historyTool.getCurrentStep(), true);
		this.awArticle.reloadLayout($article);
		this.historyTool.refreshStepLinks();
		var itemToSelect;
		if ($bind) {
			var bounds = this.awArticle.boundFields[$bind];
			itemToSelect = bounds ? bounds[0] : null;
		}
		this.awArticle.page.warnAdministrationUpdates(false);
		this.applyChangeToMobile($article);
	},
	loadBox: function(designedPage) {
		this.$skin = "s-vignette-designer";
		document.site.authorPage = this;
		this.$prototype = {
			$properties: {
				$title: {
					$type: "application/x-string",
					$title: this.localize.htmlV_location_title
				},
				$url: {
					$type: "application/x-string",
					$title: this.localize.htmlV_location_url
				},
				$width: {
					$type: "application/x-string",
					$title: this.localize.htmlV_width
				},
				$height: {
					$type: "application/x-string",
					$title: this.localize.htmlV_height
				}
			}
		};
		this.$item = {
			$category: "section",
			$layout: {
				$items: [{
					$bind: "$url",
					$isEditMode: true,
					$skin: "s-aw-field"
				}, {
					$layoutType: "row",
					$autoSize: true,
					$items: [{
						$bind: "$title",
						$isEditMode: true,
						$skin: "s-aw-field"
					}, {
						$bind: "$width",
						$isEditMode: true,

						$skin: "s-aw-field"
					}, {
						$bind: "$height",
						$isEditMode: true,
						$skin: "s-aw-field"
					}]
				}]
			}
		};
		Designer.prototype.loadBox.call(this);
		this.applyChange({
			$title: this.awItem.$item.$title || this.awItem.$field.$title,
			$url: this.awItem.$item.$url || (this.awItem.$field.$location ? this.awItem.$field.$location.$url : null),
		});
	},
	onMenuClick: function(menuItem) {
		var self = this;
		if (this.designerWorkingCopy.onMenuClick(menuItem)) {
			switch (menuItem.$item.$bind) {
				default: if (menuItem.$sourceBind == "$aw_quit") {
					this.showTargetPageDiagnoses(this.awArticle, null);
					this.closeDesigner();
					return false;
				} else {
					if (menuItem.page != this && menuItem.page != this.awArticle.designer) {
						if (!menuItem.page.isAuthoringFriend && !menuItem.boxParent.isDiagnoseMenus) {
							return !menuItem.page.vignetteField && !menuItem.page.isDesigned;
						}
					}
					return true;
				}
			}
		}
		return false;
	},
	onClickPicker: function(picker) {
		var $bind = picker.getAttribute("data-s-picker");
		if (this.awArticle.designer.historyTool.onClickPicker($bind)) {
			return false;
		}
		switch ($bind) {
			case "$authorHelp":
				return true;
		}
		return true;
	},
	onClickItem: function(item, target, article) {
		article = article || document.controller.findArticle($(target));
		if (article.isDesigned) {} else {
			if (!article.page.isAuthoringEventEnabled && article.page != this) {
				if (!(article.page.$prototype && article.page.$prototype.$representation == "authoringSaveParam")) {
					return false;
				}
			}
		}
		return true;
	},
	drawBox: function() {
		this.layoutSlot = document.createElement("aside");
		this.layoutSlot.id = "s-aw-page";
		this.awArticle.body.insertBefore(this.layoutSlot, this.awArticle.body.firstChild);
		this.layoutSlot.style.display = "";
		this.$$item = this.$$body = $(this.layoutSlot);
		this.renderLayoutContent();

		this.helpLink = document.createElement("a");
		this.helpLink.title = this.localize.aw_help;
		this.helpLink.setAttribute("data-s-picker", "$authorHelp");
		this.helpLink.className = "s-aw-top-left-link-icon";
		this.helpLink.style.backgroundImage = "url('/syracuse-ui/themes/desktop/sage/images/authoring/s-aw-help.png')";

		this.historySlot = document.createElement("div");
		this.historySlot.id = "s-aw-top-left-links";
		this.historySlot.appendChild(this.helpLink);

		this.workinCopySlot = document.createElement("div");
		this.workinCopySlot.id = "s-aw-page-right";
		this.workinCopySlot.appendChild(this.historySlot);
		this.layoutSlot.appendChild(this.workinCopySlot);

		this.awItem = this.awArticle;
		(this.historyTool = new HistoryTool()).load(this, "s-aw-top-left-link");
		this.designerWorkingCopy = new DesignerWorkingCopy();
		this.designerWorkingCopy.load(this, this.workinCopySlot);

		document.site.resize();
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$properties = newData.$properties || {};
		}
		Designer.prototype.applyChange.call(this, newData);
	},
	notifyDataChange: function(field, value) {
		this.designerWorkingCopy.temporalySave();
		switch (field.$item.$bind) {
			default: var metaData = {};
			metaData[field.$item.$bind] = value;
			this.awItem.applyDesignMetaData(metaData, true);
			this.historyTool.notifyUpdate();
			this.applyChange(metaData);
			break;
		}
	},
	findItem: function(item, findLayout) {
		var $$item = $(item);
		var article = document.controller.findArticle($(item));
		if (article) {
			if (findLayout || item.syraAwLayoutId) {
				while (item && !item.syraAwLayoutId) {
					item = item.parentNode;
				}
				if (item) {
					return (article.id == item.syraAwLayoutId) ? article : (article.layouts[item.syraAwLayoutId] || null);
				}
			} else {
				while (item && !item.syraAwItemId) {
					item = item.parentNode;
				}
				if (item) {
					item = (article.id == item.syraAwItemId) ? article : (article.idMap[item.syraAwItemId] || null);
					if (!item) {
						item = document.controller.findMenu($$item);
					}
					return item;

				}
			}
		}
		return null;
	},
	onWindowResize: function() {

	},
	dispose: function() {
		document.site.removeDomChild(this.layoutSlot);
		document.site.authorPage = null;
		this.helpLink;
		Designer.prototype.dispose.call(this);
	}
});