"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;

function DesignerWorkingCopy() {}

exports.DesignerWorkingCopy = helpers.defineClass(DesignerWorkingCopy, RawPage, {
	load: function(designer, linksSlot) {
		this.linksSlot = linksSlot;
		this.designer = designer;
		this.diagnosePage = designer.awArticle.page;
		this.localize = this.designer.localize;
		this._initializePage();
		document.controller.loadWorkingCopy({
			menu: {
				$url: this.designer.awArticle.page.$authorUrl
			},
			article: this,
			callback: function() {
				document.site.resize();
			}
		});
	},
	onMenuClick: function(menuItem) {
		var self = this;
		switch (menuItem.$item.$bind) {
			case "$delete":
				if (menuItem.page != self.designer.awArticle.page) {
					if (self.designer.awArticle.page.pageViewSelector) {
						var selectedView = self.designer.awArticle.page.pageViewSelector.getSelected();
						document.site.showMessage({
							$title: self.localize.aw_deleteMessageTitle,
							$message: self.localize.aw_deleteMessageText.replace("{0}", "'" + selectedView.$title + "'"),
							$type: "question",
							$buttons: "yesno",
							callback: function(response) {
								if (response.$id == "yes") {
									document.controller.executeMenu(menuItem);
								}
							}
						});
					}
				}
				return false;
			case "$close":
				if (self.designer.historyTool.isUpdated) {
					document.site.showMessage({
						$title: self.localize.aw_updateMessageTitle,
						$message: self.localize.aw_cancelMessageText,
						$type: "question",
						$buttons: "yesnocancel",
						callback: function(response) {
							if (response.$id == "yes") {
								self.saveUpdate();
							} else {
								if (response.$id == "no") {
									self.designer.cancelUpdate();
								}
							}
						}
					});
				} else {
					self.designer.closeDesigner();
				}
				return false;
			default:
				if (menuItem.$sourceBind == "$aw_quit") {
					self.designer.showTargetPageDiagnoses(null);
					self.designer.closeDesigner();
					return false;
				}
				if (menuItem.page != self && !menuItem.page.isMessageBox && !menuItem.boxParent.isDiagnoseMenus && menuItem.page.isDesigned) {
					return false;
				}
		}
		return true;
	},
	saveUpdate: function() {
		this.clickMenu((this.$menus.$save && !this.$menus.$save.$isDisabled) ? "$save" : "saveAs");
	},
	drawBox: function() {
		this.$prototype.$properties = this.$prototype.$properties || {};
		var row = document.createElement("div");
		row.className = "s-aw-menus-row";
		this.linksSlot.appendChild(row);
		this.loadNewItem(row, {
			$bind: "$save",
			$category: "link",
			$skin: "s-aw-menus-save",
			$icon: {
				$mode: "icon",
				$path: "authoring/s-aw-"
			}
		});
		this.loadNewItem(row, {
			$bind: "saveAs",
			$category: "link",
			$skin: "s-aw-menus-saveas",
			$icon: {
				$mode: "icon",
				$path: "authoring/s-aw-"
			}
		});
		this.loadNewItem(row, {
			$bind: "$delete",
			$category: "link",
			$skin: "s-aw-menus-delete",
			$icon: {
				$mode: "icon",
				$path: "authoring/s-aw-"
			}
		});
		if (!this.designer.awArticle.isDashBoard) {
			this.loadNewItem(row, {
				$bind: "$close",
				$category: "link",
				$skin: "s-aw-page-close",
				$icon: {
					$mode: "icon",
					$path: "authoring/s-aw-"
				}
			});
			this.menuItems.$close[0].setMenu({
				$title: this.localize.aw_close
			}, null);
		}
	},
	isActionSuccess: function(menuItem) {
		if (menuItem.$diagnoses) {
			for (var ii = 0; ii < menuItem.$diagnoses.length; ii++) {
				if (menuItem.$diagnoses[ii].$severity != "success") {
					return false;
				}
			}
		}
		return true;
	},
	onAfterActionMenuExecute: function(menuItem, $menu) {
		switch (menuItem.$bind) {
			case "$save":
			case "saveAs":
				if (this.isActionSuccess(menuItem)) {
					if (this.dataset.$authorUrl) {
						this.designer.awArticle.page.$authorUrl = this.dataset.$authorUrl;
					}
					this.designer.historyTool.notifyUpdate(false);
					$menu.$diagnoses = [{
						$message: this.localize.aw_saveMessageText,
						$severity: "success"
					}];
					$menu.$links = {
						$create: {
							$isHidden: true
						},
						$details: {
							$isHidden: true
						},
						$query: {
							$isHidden: true
						},
						$aw_quit: {
							$title: this.localize.aw_quit
						}
					};
					menuItem.page.ensureDeltaManager().applyObjectDelta(menuItem.articleParent.$menus[menuItem.$bind], {
						$links: $menu.$links
					});
					menuItem.disable(false);
					if (menuItem.$bind == "saveAs") {
						this.designer.awArticle.page.loadSelectedDesignView(menuItem.$links && menuItem.$links.$view);
					}
				} else {
					if (menuItem.$bind == "saveAs") {
						menuItem.disable(false);
					}
				}
				break;
			case "$delete":
				if (this.isActionSuccess(menuItem)) {
					var selectedView = this.designer.awArticle.page.pageViewSelector.getSelected();
					if (this.dataset.$authorUrl) {
						this.designer.awArticle.page.$authorUrl = this.dataset.$authorUrl;
					}
					var $diagnose = {
						$message: this.localize.aw_isDeletedMessageText.replace("{0}", "'" + selectedView.$title + "'"),
						$severity: "success"
					};
					var page = this.designer.awArticle.page;
					this.designer.closeDesigner();
					page.loadSelectedDesignView();
					return false;
				}
				break;
		}
	},
	applyChange: function(newData) {
		if (newData) {
			newData.$diagnoses = null;
		}
		RawPage.prototype.applyChange.call(this, newData);
	},
	temporalySave: function($article) {
		this.ensureSendBag().content = {
			$article: $article || this.designer.awArticle.page.$item
		};
	},
	notifyActionChange: function(target, value, notifyServer) {
		if (value && value.$save || value.saveAs) {
			this.designer.awArticle.page.garbageFreeItems();
		}
		var $article = helpers.object.clone(this.designer.awArticle.page.$item, true);
		delete $article.$menus;
		delete $article.$isModel;
		// crnit: we should test prototype's generator version, not $article's. If there is not authoring yet
		// the article's generator version would be absent but the new authoring must be stored converted
		// Reason: if there is no authoring the $article is the one generated by X3 and is in phase with the prototype
		// so there is no need to convert. But as soon as we have it stored, the authoring have to be converted as the
		// prototype may change
		// if ($article.$generatorVersion) {
		if (this.designer.awArticle.page.$prototype.$generatorVersion) {
			var $prototype = helpers.object.clone(this.designer.awArticle.page.$prototype, true);
			document.site._cvgPageConverterMakePersistent($prototype, $article);
			$article.$generatorVersion = 1;
		}
		this.temporalySave($article);
		RawPage.prototype.notifyActionChange.call(this, target, value, notifyServer);
	},
	dispose: function() {
		this.linksSlot = null;
		RawPage.prototype.dispose.call(this);
	}
});