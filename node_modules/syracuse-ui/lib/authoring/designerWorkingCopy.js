"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;

function DesignerWorkingCopy() {}

exports.DesignerWorkingCopy = helpers.defineClass(DesignerWorkingCopy, RawPage, {
	load: function(designer, linksSlot) {
		this.linksSlot = linksSlot;
		this.designer = designer;
		this.localize = this.designer.localize;
		this._initializePage();
		document.controller.loadWorkingCopy({
			menu: {
				$url: this.designer.awArticle.page.$authorUrl
			},
			article: this,
			callback: function() {
				document.site.resize();
			}
		});
	},
	onMenuClick: function(menuItem) {
		var self = this;
		switch (menuItem.$item.$bind) {
			case "$delete":
				if (menuItem.page != self.designer.awArticle.page) {
					if (self.designer.awArticle.page.pageViewSelector) {
						var selectedView = self.designer.awArticle.page.pageViewSelector.getSelected();
						document.site.showMessage({
							$title: self.localize.aw_deleteMessageTitle,
							$message: self.localize.aw_deleteMessageText.replace("{0}", "'" + selectedView.$title + "'"),
							$type: "question",
							$buttons: "yesno",
							callback: function(response) {
								if (response.$id == "yes") {
									document.controller.executeMenu(menuItem);
								}
							}
						});
					}
				}
				return false;
			case "$close":
				if (self.designer.historyTool.isUpdated) {
					document.site.showMessage({
						$title: self.localize.aw_updateMessageTitle,
						$message: self.localize.aw_cancelMessageText,
						$type: "question",
						$buttons: "yesnocancel",
						callback: function(response) {
							if (response.$id == "yes") {
								self.clickMenu("$save");
							} else {
								if (response.$id == "no") {
									self.designer.cancelUpdate();
								}
							}
						}
					});
				} else {
					self.designer.closeDesigner();
				}
				return false;
			default:
				if (menuItem.$sourceBind == "$aw_quit") {
					self.designer.showTargetPageDiagnoses(null);
					self.designer.closeDesigner();
					return false;
				} else {
					if (menuItem.page != self && menuItem.page != self.designer) {
						if (!menuItem.page.isAuthoringFriend && !menuItem.boxParent.isDiagnoseMenus) {
							return !menuItem.page.vignetteField && !menuItem.page.isDesigned;
						}
					}
					return true;
				}
		}
	},
	drawBox: function() {
		this.$prototype.$properties = this.$prototype.$properties || {};
		this.loadNewItem(this.linksSlot, {
			$category: "menus",
			$skin: "s-aw-top-actions",
			$itemIcon: {
				$mode: "icon",
				$path: "authoring/s-aw-"
			},
			$layout: {
				$layoutType: "row",
				$widths: "25,25,25,25",
				$items: [{
					$bind: "$save",
					$css: "s-aw-menus-save"
				}, {
					$bind: "saveAs",
					$css: "s-aw-menus-saveas"
				}, {
					$bind: "$delete",
					$css: "s-aw-menus-delete"
				}, {
					$bind: "$close",
					$css: "s-aw-page-close"
				}]
			}
		});
		this.menuItems.$close[0].setMenu({
			$title: this.localize.aw_close
		}, null);
	},
	onSaveResponse: function($action, newData) {
		if (!$action.$confirm) {
			if (newData.$authorUrl) {
				this.designer.awArticle.page.$authorUrl = newData.$authorUrl;
			}
			if ($action.$diagnoses) {
				for (var ii = 0, jj = $action.$diagnoses.length; ii < jj; ii++) {
					var $diagnose = $action.$diagnoses[ii];
					if (($diagnose.severity || $diagnose.$severity) !== "success") {
						return false;
					}
				}
			}
			this.designer.historyTool.notifyUpdate(false);
			this.designer.showTargetPageDiagnoses({
				$diagnoses: [{
					$message: this.localize.aw_saveMessageText,
					$severity: "success"
				}],
				$links: {
					$aw_quit: {
						$title: this.localize.aw_quit
					}
				}
			});
			return true;
		}
		return false;
	},
	applyChange: function(newData) {
		var $actions = newData && newData.$actions;
		if ($actions) {
			if ($actions.saveAs && $actions.saveAs.$isDisabled && $actions.saveAs.$isRequested === false) {
				if (this.onSaveResponse($actions.saveAs, newData)) {
					delete $actions.saveAs;
				}
			}
			if ($actions.$save && $actions.$save.$isDisabled && $actions.$save.$isRequested === false) {
				if (this.onSaveResponse($actions.save, newData)) {
					$actions.$save.$isDisabled = false;
					$actions.$save.$isRequested = true;
				}
			}
			if ($actions.$delete && $actions.$delete.$isDisabled && $actions.$delete.$isRequested === false) {
				var selectedView = this.designer.awArticle.page.pageViewSelector.getSelected();
				if (newData.$authorUrl) {
					this.designer.awArticle.page.$authorUrl = newData.$authorUrl;
				}
				if ($actions.$delete.$diagnoses) {
					for (var ii = 0, jj = $actions.$delete.$diagnoses.length; ii < jj; ii++) {
						var $diagnose = $actions.$delete.$diagnoses[ii];
						if (($diagnose.severity || $diagnose.$severity) !== "success") {
							return false;
						}
					}
				}
				var $diagnose = {
					$message: this.localize.aw_isDeletedMessageText.replace("{0}", "'" + selectedView.$title + "'"),
					$severity: "success"
				};
				this.designer.awArticle.page.designPage(false);
				this.designer.awArticle.page.pageViewSelector.onViewDeleted(selectedView);
				this.designer.showTargetPageDiagnoses({
					$diagnoses: [$diagnose]
				});
			}
			return false;
		}
		RawPage.prototype.applyChange.call(this, newData);
	},
	temporalySave: function($article) {
		this.ensureSendBag().content = {
			$article: $article || this.designer.awArticle.page.$item
		};
	},
	notifyActionChange: function(target, value, notifyServer) {
		if (value && value.$save || value.saveAs) {
			this.designer.awArticle.page.garbageFreeItems();
		}
		var $article = helpers.object.clone(this.designer.awArticle.page.$item, true);
		delete $article.$menus;
		delete $article.$isModel;
		// crnit: we should test prototype's generator version, not $article's. If there is not authoring yet
		// the article's generator version would be absent but the new authoring must be stored converted
		// Reason: if there is no authoring the $article is the one generated by X3 and is in phase with the prototype
		// so there is no need to convert. But as soon as we have it stored, the authoring have to be converted as the
		// prototype may change
		// if ($article.$generatorVersion) {
		if (this.designer.awArticle.page.$prototype.$generatorVersion) {
			var $prototype = helpers.object.clone(this.designer.awArticle.page.$prototype, true);
			document.site._cvgPageConverterMakePersistent($prototype, $article);
			$article.$generatorVersion = 1;
		}
		this.temporalySave($article);
		RawPage.prototype.notifyActionChange.call(this, target, value, notifyServer);
	},
	dispose: function() {
		this.linksSlot = null;
		RawPage.prototype.dispose.call(this);
	}
});