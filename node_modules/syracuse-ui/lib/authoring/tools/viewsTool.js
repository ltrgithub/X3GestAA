"use strict";
var helpers = require('syracuse-core/lib/helpers');

function ViewsTool(){
}

exports.ViewsTool = helpers.defineClass(ViewsTool, null, {
    load: function(designer, $skin){
        this.designer = designer;
        this.drawLinks($skin);
    },
    drawLinks: function($skin){
        var $types = ["viewTypePreview", "viewTypeLayout", "viewTypeStructure", "viewTypeJSON"];
        var linksSlot = document.createElement("div");
        linksSlot.id = "s-aw-viewType";
        this._links = {};
        for (var ii = 0, jj = $types.length; ii < jj; ii++) {
            var $type = $types[ii];
            if ($type != "viewTypeJSON" || document.site.isMobileSite) {
                var link = document.createElement("a");
                link.setAttribute("data-s-picker", link.syraPickerType = $type);
                link.className = $skin;
                link.textContent = link.title = this.designer.localize["aw_" + $type];
                this._links[$type] = link;
                linksSlot.appendChild(link);
            }
        }
        document.site.toggleClass(this._links[this.$viewType = "viewTypeLayout"], "s-selected", true);
        this.designer.viewsSlot.appendChild(linksSlot);
    },
    ensureLayoutView: function(){
        if (this.$viewType != "viewTypeLayout") {
            this.toggleViewType("viewTypeLayout");
        }
    },
    toggleViewType: function($viewType){
        if (this.$viewType) {
            document.site.toggleClass(this._links[this.$viewType], "s-selected", false);
        }
        this.$viewType = $viewType;
        var isBarsVisible = true;
        if (this.isOnPreviewMode && this.$viewType != "viewTypePreview") {
            this.isOnPreviewMode = false;
            this.designer.toggleUIDesign(this.designer.designedArticle, true);
        }
        if (this.isJsonMode && this.$viewType != "viewTypeJSON") {
            this.isJsonMode = false;
            document.site.mobileGateway.toggleJsonEditor(false);
        }
        document.site.toggleClass(this._links[this.$viewType], "s-selected", true);
        switch (this.$viewType) {
            case "viewTypeJSON":
                if (this.$isLightMode) {
                    this.$isLightMode = false;
                }
                this.isJsonMode = true;
                isBarsVisible = false;
                document.site.mobileGateway.toggleJsonEditor(true);
                break;
            case "viewTypePreview":
                if (!this.isOnPreviewMode) {
                    if (this.$isLightMode) {
                        this.$isLightMode = false;
                        this.designer.toggleUIDesign(this.designer.designedArticle, true);
                    }
                    this.isOnPreviewMode = true;
                }
                isBarsVisible = false;
                break;
            case "viewTypeStructure":
                if (!this.$isLightMode) {
                    this.$isLightMode = true;
                }
                break;
            case "viewTypeLayout":
                if (this.$isLightMode) {
                    this.$isLightMode = false;
                }
                break;
        }
        this.designer.treebarSlot.style.display = this.designer.propertiesSlot.style.display = isBarsVisible ? "" : "none";
        this.designer.toggleUIDesign(this.designer.designedArticle, !this.isOnPreviewMode);
        this.designer.designedArticle.page.ensurePageVisibility();
    },
    onClickPicker: function(picker){
        if ((picker.syraPickerType || "").indexOf("viewType") == 0) {
            this.toggleViewType(picker.syraPickerType);
            return true;
        }
        return false;
    },
    dispose: function(){
        this.designer = this._links = null;
    }
});
