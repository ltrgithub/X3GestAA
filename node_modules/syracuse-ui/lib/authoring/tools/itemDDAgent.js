"use strict";
var helpers = require('syracuse-core/lib/helpers');

function ItemDDAgent() {}

exports.ItemDDAgent = helpers.defineClass(ItemDDAgent, null, {
	start: function(dropItem, itemTool, boundaryItem) {
		this.designer = itemTool.designer;
		this.dropItem = dropItem;
		if (this.dropItem.isLayout) {
			document.site.layoutUpdater.setChildAuhtoringLevel(this.dropItem);
		}
		this.toggleDraggedCss(true);
		this.boundary = document.site.getBoundingClientRect(boundaryItem);
		this.scrollViewRect = boundaryItem.getBoundingClientRect();
		this.scrollViewRect.item = boundaryItem;
		this.scrollViewRect.scrollWidth = this.scrollViewRect.item.scrollWidth;
		this.scrollViewRect.scrollHeight = this.scrollViewRect.item.scrollHeight;

	},
	toggleDraggedCss: function(show) {
		if (this.dropItem && this.dropItem.$$item) {
			document.site.toggleClass(this.dropItem.$$item[0], "s-dd-dragged", show);
		}
	},
	onDragMouseMove: function(target, event, item) {
		if (item) {
			if (item.layoutParent || item.isLayout || item.$awAddNewItem) {
				this.moveDragImage(event, item);
			}
		} else {
			if (event.target && event.target.className && event.target.className.indexOf) {
				if (event.target.className.indexOf("s-aw-drop-cue") < 0) {
					this.moveDragImage(event, null, true);
				}
			} else {
				this.moveDragImage(event, null, true);
			}
		}
	},
	onDragMouseUp: function(target, event) {
		if (this.targetItem) {
			this.toggleDraggedCss(false);
			if (this.dropItem) {
				var targetItem = this.targetItem;
				var enable = true;
				if (targetItem.layoutParent && targetItem.layoutParent.isRow) {
					enable = !(targetItem.layoutParent.items.length > 5 && ((this.$drag.$insertAt == "left" || this.$drag.$insertAt == "right") && !targetItem.isSpaceBox));
				}
				if (enable) {
					if (this.$drag.isTab && (this.$drag.isTabBody || (this.$drag.$insertAt == "bottom" || this.$drag.$insertAt == "top"))) {
						if (!targetItem.page.isLandingPage) {
							targetItem = targetItem.layoutParent;
						}
					}
					var newChild = document.site.layoutUpdater.onAddNewItem(targetItem.articleParent, targetItem, this.dropItem, this.$drag.$insertAt);
					if (newChild && newChild.isTabLayout) {
						newChild.openBox(true);
					}
					this.designer.endArticleUpdate(newChild, true);
				}
			}
		}
	},

	validateDropTarget: function(event, targetItem) {
		if (targetItem && targetItem.$awAddNewItem) {
			return false;
		}
		var isDropEnabled = (targetItem && this.targetItem && (targetItem == this.targetItem));
		if (!isDropEnabled) {
			if (this.dropItem) {
				if (this.dropItem != targetItem) {
					if (event.target.syraSepType == "stack" && this.targetItem && this.targetItem != targetItem) {
						if (targetItem == this.targetItem.boxParent || targetItem == this.targetItem.layoutParent) {
							return true;
						}
					}
					if (this.dropItem.isLayout) {
						if (this.dropItem.boxParent == targetItem.boxParent) {
							var layoutParent = targetItem.layoutParent;
							while (layoutParent) {
								if (this.dropItem == layoutParent) {
									return false;
								}
								layoutParent = layoutParent.layoutParent;
							}
							isDropEnabled = true;
						}
					} else {
						if (this.dropItem.$designLevel != "field") {
							var boxParent = targetItem.boxParent;
							while (boxParent) {
								if (this.dropItem == boxParent) {
									return false;
								}
								boxParent = boxParent.boxParent;
							}
						}
						if (this.dropItem.$designLevel == "field") {
							isDropEnabled = true;
						} else {
							//section
							if (targetItem.$designLevel == "field") {
								if (!this.dropItem.$awAddNewItem) {
									var sourceBox = this.dropItem;
									while (sourceBox && sourceBox != targetItem.boxParent) {
										sourceBox = sourceBox.boxParent;
									}
									if (!sourceBox) {
										this.infoText = this.designer.localize.dd_moveFields;
										isDropEnabled = true;
									}
								} else {
									if (this.dropItem.$fieldBind) {
										isDropEnabled = true;
									}
								}
							} else {
								isDropEnabled = true;
								if (targetItem.page.isLandingPage) {
									if (targetItem.isLayout) {
										isDropEnabled = !(targetItem == targetItem.page.layoutContent ||
											targetItem == this.designer.designedItem.layoutContent.getOpenedTab().layoutContent);
									}
								}

							}
						}
					}

					if (isDropEnabled) {
						this.targetInfoTitle = targetItem.isRow ? "row" : (targetItem.getTitle ? targetItem.getTitle(true) : "");
						this.infoText = (this.dropItem.$awAddNewItem) ? "dd_addItem_" : "dd_moveItem_";
						this._ensureDragImage();
						this.infoDropTitle = this.getDropItemTitle(this.dropItem);
					}
				}
			}
			if (isDropEnabled) {
				if (this.targetItem != targetItem) {
					this.toggleDropArea(this.targetItem);
				}
				this.targetItem = targetItem;
			}
		}
		return isDropEnabled;
	},
	calculatePanelDropCue: function(event, targetItem) {
		var $position = null;
		this.$drag = document.site.getBoundingClientRect(targetItem.layoutSlot ? targetItem.layoutSlot : targetItem.$$item[0]);

		//calculateDropBoundary
		var xmargin = (this.$drag.width * 0.25);
		var ymargin = (this.$drag.height * 0.25);
		var $dropBoundary = {
			left: this.$drag.left + xmargin,
			right: this.$drag.left + this.$drag.width - xmargin,
			top: this.$drag.top + ymargin,
			bottom: this.$drag.top + this.$drag.height - ymargin
		};
		$position = {
			top: this.$drag.top,
			left: this.$drag.left
		};
		var isLeft = ((event.pageX > this.$drag.left) && (event.pageX < (this.$drag.left + (this.$drag.width * 0.2))));
		var isRight = ((event.pageX < this.$drag.right) && (event.pageX > (this.$drag.right - (this.$drag.width * 0.2))));
		if (event.target.className.indexOf("s-aw-slot-sep-row") >= 0) {
			isRight = true;
		}
		if (isLeft || isRight) {
			this.$drag.$insertAt = isRight ? "right" : "left";
			$position.top -= 3;
			$position.left = this.$drag.left + (isRight ? (this.$drag.width) : (-3));
			$position.width = "0.3em";
			$position.height = this.$drag.height + 6 + "px";
		} else {
			var isBottom = event.pageY >= $dropBoundary.bottom;
			this.$drag.$insertAt = isBottom ? "bottom" : "top";
			$position.top = this.$drag.top + (isBottom ? this.$drag.height : 0);
			$position.height = "0.3em";
			$position.width = this.$drag.width + "px";
		}
		return $position;
	},
	calculateTabDropCue: function(event, targetItem) {
		var $position = null;
		if (event.target == targetItem.body) {
			this.$drag = document.site.getBoundingClientRect(targetItem.layoutParent.$$item[0]);
			this.$drag.isTabBody = true;
		} else {
			this.$drag = document.site.getBoundingClientRect(targetItem.tabTitle);
			this.$drag.isTabTitle = true;
		}
		this.$drag.isTab = true;
		this.$drag.right = this.$drag.left + this.$drag.width;
		//calculateDropBoundary
		var xmargin = (this.$drag.width * 0.25);
		var ymargin = (this.$drag.height * 0.25);
		var $dropBoundary = {
			left: this.$drag.left + xmargin,
			right: this.$drag.left + this.$drag.width - xmargin,
			top: this.$drag.top + ymargin,
			bottom: this.$drag.top + this.$drag.height - ymargin
		};
		$position = {
			top: this.$drag.top,
			left: this.$drag.left
		};
		var isLeft, isRight;
		if (targetItem.page.isLandingPage) {
			isLeft = ((event.pageX > this.$drag.left) && (event.pageX < (this.$drag.left + (this.$drag.width * 0.5))));
			isRight = ((event.pageX < this.$drag.right) && (event.pageX > (this.$drag.right - (this.$drag.width * 0.5))));
			if (event.target.className.indexOf("s-aw-slot-sep-row") >= 0) {
				isRight = true;
			}
		} else {
			isLeft = ((event.pageX > this.$drag.left) && (event.pageX < (this.$drag.left + (this.$drag.width * 0.2))));
			isRight = ((event.pageX < this.$drag.right) && (event.pageX > (this.$drag.right - (this.$drag.width * 0.2))));
			if (event.target.className.indexOf("s-aw-slot-sep-row") >= 0) {
				isRight = true;
			}
		}
		if (isLeft || isRight) {
			this.$drag.$insertAt = isRight ? "right" : "left";
			$position.top -= 3;
			$position.left = this.$drag.left + (isRight ? (this.$drag.width) : (-3));
			$position.width = "0.3em";
			$position.height = this.$drag.height + 6 + "px";
		} else {
			var isBottom = event.pageY >= $dropBoundary.bottom;
			this.$drag.$insertAt = isBottom ? "bottom" : "top";
			$position.top = this.$drag.top + (isBottom ? this.$drag.height : 0);
			$position.height = "0.3em";
			$position.width = this.$drag.width + "px";
		}
		return $position;
	},
	_ensureDragImage: function() {
		if (!this._info) {
			this._info = document.createElement("div");
			this._info.style.display = "none";
			this._info.className = "s-aw-drag-info";
			this._infoDropType = document.createElement("div");
			this._infoDropType.className = "s-aw-drag-info-type";
			this._infoLabel = document.createElement("div");
			this._infoLabel.className = "s-aw-drag-info-label";
			this._info.appendChild(this._infoDropType);
			this._info.appendChild(this._infoLabel);
			document.site.layoutSlot.appendChild(this._info);
			this._infoDropType.textContent = this.dropItem.$field ? document.site.getFieldIconType(this.dropItem.$field.$type) : "";
			this._infoLabel.textContent = this.getDropItemTitle(this.dropItem);
		}
	},
	getDropItemTitle: function(dropItem) {
		var title = dropItem.$awAddNewItem ? dropItem.$title : dropItem.getTitle();
		if (!title) {
			title = this.designer.localize[dropItem.isLayout ? "aw_rowLayout" : "aw_" + dropItem.$designLevel];
		}
		return title;
	},
	moveDragImage: function(event, targetItem, isOut) {
		this.isDropEnabled = false;
		if (!isOut && targetItem) {
			this.isDropEnabled = this.validateDropTarget(event, targetItem);
			if (this.isDropEnabled) {
				this.targetItem = null;
				this.validateDropTarget(event, targetItem);
			}
		}
		this.designer.autoScroll(this.scrollViewRect, event);
		var top = Math.max(event.pageY, this.scrollViewRect.top);
		var left = Math.max(event.pageX, this.scrollViewRect.left);
		top = Math.min(top, this.scrollViewRect.bottom);
		left = Math.min(left, this.scrollViewRect.right);

		var inBoundary = (event.pageX == left && event.pageY == top);
		this._ensureDragImage();
		if (this.isDropEnabled) {
			this._info.className = "s-aw-drag-info-" + this.dropItem.$designLevel;
			var $position = null;
			if (event.target && event.target.className && event.target.className.indexOf) {
				if (this.targetItem && (this.targetItem.layoutParent || this.targetItem.isLayout)) {
					$position = this.targetItem.tabTitle ? this.calculateTabDropCue(event, this.targetItem) : this.calculatePanelDropCue(event, this.targetItem);
					if ($position) {
						if (!this._dropCue) {
							this._dropCue = document.createElement("div");
							this._dropCue.className = "s-aw-drop-cue";
							document.site.layoutSlot.appendChild(this._dropCue);
						}
						var css;
						if (!this.dropItem.isLayout) {
							if (this.targetItem.isLayout) {
								if (!this.targetItem.$chilAuthoringLevel) {
									document.site.layoutUpdater.setChildAuhtoringLevel(this.targetItem);
								}
								css = this.targetItem.$chilAuthoringLevel;
							} else {
								css = this.targetItem.$designLevel;
							}
						} else {
							css = this.dropItem.$designLevel;
						}

						this._dropCue.className = "s-aw-drop-cue s-aw-drop-cue-" + css;

						var style = this._dropCue.style;
						style.display = "none";
						style.top = $position.top + "px";
						style.left = $position.left + "px";
						style.width = $position.width;
						style.height = $position.height;
						if (this.targetItem && this.targetItem.isSpaceBox) {
							this.toggleDropArea(this.targetItem, this.dropItem);
						} else {
							style.display = "block";
						}
						var text = this.designer.localize[this.infoText + this.$drag.$insertAt] || "";
						this._infoLabel.textContent = text.replace("{0}", this.infoDropTitle).replace("{1}", this.targetInfoTitle);
					}
				}
			}
		} else {
			if (isOut) {
				var title, localText = this.designer.localize.dd_nodrop;
				if (this.dropItem.$awAddNewItem) {
					title = this.dropItem.$title;
				} else {
					title = this.dropItem.getTitle();
				}
				if (!title) {
					title = this.designer.localize["aw_" + this.dropItem.$designLevel];
				}
				this._infoLabel.textContent = localText + "  " + title;
			}
			this._info.className = "s-aw-drag-info";
			this.toggleDropArea(this.targetItem);
			this.targetItem = null;
			if (this._dropCue) {
				this._dropCue.style.display = "none";
			}
		}
		this._info.style.top = top + 15 + "px";
		this._info.style.left = left + 15 + "px";
		this._info.style.display = "";
	},
	toggleDropArea: function(targetItem, dropItem) {
		if (targetItem && targetItem.isSpaceBox) {
			if (targetItem.deleteLink) {
				targetItem.deleteLink.style.display = dropItem ? "none" : "";
			}
			if (dropItem) {
				if (!targetItem.dropArea) {
					targetItem.dropArea = document.createElement("div");
					targetItem.dropArea.className = "s-aw-drop-area-" + dropItem.$designLevel;
					targetItem.dropArea.textContent = this.designer.localize["aw_drop_" + dropItem.$designLevel];
					targetItem.body.appendChild(targetItem.dropArea);
				}
			} else {
				if (targetItem.dropArea) {
					document.site.removeDomChild(targetItem.dropArea);
					targetItem.dropArea = null;
				}
			}
		}
	},
	dispose: function() {
		this.toggleDraggedCss(false);
		delete this.targetItem;
		document.site.removeDomChild(this._info);
		document.site.removeDomChild(this._dropCue);
		this.designer = this.dropItem = this.scrollViewRect = this._info = this._dropCue = null;
	}
});