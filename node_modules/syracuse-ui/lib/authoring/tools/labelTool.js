"use strict";
var helpers = require('syracuse-core/lib/helpers');

function LabelTool() {}

exports.LabelTool = helpers.defineClass(LabelTool, null, {
	load: function(designer, $stepSkin) {
		this.designer = designer;
		this.designer.$prototype.$properties.$labelAlignment = {
			$type: "application/x-choice",
			$title: this.designer.localize.aw_labelPosition,
			$value: {
				$type: "application/x-string",
				$enum: [{
					$value: "t",
					$title: this.designer.localize.aw_labelPositionTop
				}, {
					$value: "ll",
					$title: this.designer.localize.aw_labelPositionLeftLeft
				}, {
					$value: "lr",
					$title: this.designer.localize.aw_labelPositionLeftRight
				}]
			}
		};
		this.designer.$prototype.$properties.$isTitleHidden = {
			$type: "application/x-boolean",
			$title: this.designer.localize.aw_isTitleHidden
		};
		this.designer.$prototype.$properties.$fieldsIsTitleHidden = {
			$type: "application/x-boolean",
			$title: this.designer.localize.aw_isLabelHidden
		};
	},
	setLabelItem: function(item) {
		var alignment = this.designer.awArticle.page.$isEditMode ? "t" : "ll";
		this.designer.applyChange({
			$labelAlignment: alignment,
			$isTitleHidden: false,
			$fieldsIsTitleHidden: false
		});
		if (item.$item) {
			if (item.$item.$isTopLabelAlignment !== undefined ||
				item.$item.$fieldsIsTopLabelAlignment !== undefined ||
				item.$item.$isRightTextLabelAlignment !== undefined ||
				item.$item.$fieldsIsRightTextLabelAlignment !== undefined) {
				if (item.$item.$isTopLabelAlignment || item.$item.$fieldsIsTopLabelAlignment) {
					alignment = "t";
				} else {
					if (item.$item.$isRightTextLabelAlignment || item.$item.$fieldsIsRightTextLabelAlignment) {
						alignment = "lr";
					} else {
						alignment = "ll";
					}
				}
			}
		}
		this.designer.applyChange({
			$labelAlignment: alignment,
			$isTitleHidden: item.$item.$isTitleHidden,
			$fieldsIsTitleHidden: item.$item.$fieldsIsTitleHidden,
			$properties: {
				$isTitleHidden: {
					$isHidden: item.isTabLayout == true
				}
			}
		});
	},
	onDesignerNotifyDataChange: function(awItem, metaData, field, value) {
		switch (field.$item.$bind) {
			case "$fieldsIsTitleHidden":
				awItem.applyDesignMetaData({
					$fieldsIsTitleHidden: value
				}, true);
				break;
			case "$labelAlignment":
				metaData.$isTopLabelAlignment = (value == "t");
				if (metaData.$isTopLabelAlignment == false) {
					metaData.$isRightTextLabelAlignment = (value == "lr");
				}
				if (awItem.isField) {
					awItem.applyDesignMetaData(metaData, true);
				} else {
					awItem.applyDesignMetaData({
						$fieldsIsTopLabelAlignment: metaData.$isTopLabelAlignment,
						$fieldsIsRightTextLabelAlignment: metaData.$isRightTextLabelAlignment
					}, true);
				}
				break;
			default:
				return false;
		}
		return true;
	},
	onDesignerApplyChange: function(awItem, newData) {
		if (newData.$isHidden !== undefined) {
			newData.$properties.$isTitleHidden = {
				$isDisabled: newData.$isHidden
			};
			newData.$properties.$fieldsIsTitleHidden = {
				$isDisabled: newData.$isHidden
			};
			newData.$properties.$labelAlignment = {
				$isDisabled: newData.$isHidden
			};
		}
		if (newData.$fieldsIsTitleHidden !== undefined) {
			(newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$fieldsIsTitleHidden;
		}
		if (newData.$isTitleHidden !== undefined) {
			newData.$properties.$title = newData.$properties.$title || {};
			newData.$properties.$title.$isDisabled = newData.$isTitleHidden;
			if (awItem.$designLevel == "field") {
				(newData.$properties.$labelAlignment = newData.$properties.$labelAlignment || {}).$isDisabled = newData.$isTitleHidden;
			} else {
				newData.$properties.$title = newData.$properties.$isBoxCollapsable = newData.$properties.$isMaximizable = {
					$isDisabled: newData.$isTitleHidden
				};
			}
		}
	},
	dispose: function() {
		this.designer = null;
	}
});