"use strict";
var helpers = require('syracuse-core/lib/helpers');
var designProperties = require("syracuse-ui/lib/authoring/page/designProperties");

function _addExcludeMe(designer, panelId) {
	if (panelId != "article") {
		designer.selectedPanel.datastore = designer.selectedPanel.datastore || {};
		if (!designer.selectedPanel.datastore.excludeMeLink) {
			var btn = syra_menus.addTextButton(syra_local.aw_excludeMe, "s-aw-exclude-me", "onExcludeItemClick");
			var slot = document.createElement("div");
			slot.className = "s-aw-exclude-me-slot";
			designer.selectedPanel.datastore.excludeMeLink = slot.appendChild(btn);
			designer.selectedPanel.layoutContent.domItem.insertBefore(slot, designer.selectedPanel.layoutContent.domItem.firstChild);
		}
		var enable = !designer.designedItem.$isMandatory;
		if (enable && designer.designedItem.layoutContent) {
			var fields = designer.designedItem.layoutContent.getFields();
			for (var ii = 0, jj = fields.length; enable && ii < jj; ii++) {
				enable = !fields[ii].$isMandatory;
			}
		}
		designer.selectedPanel.datastore.excludeMeLink.style.display = enable ? "" : "none";
	}
}


exports.show = function(designer) {
	if (designer.panels) {
		designer.startChange();
		var panelId = designer.designedItem.$designLevel;
		if (designer.selectedPanel) {
			designer.selectedPanel.setState({
				$isHidden: true
			});
		}
		if (!designer.panels[panelId]) {
			var $item = designProperties[panelId]();
			if (panelId == "field") {
				var $items = $item.$layout.$items;
				designer.fieldAddinsTool.addFieldSection($items[$items.length - 1].$layout);
			}
			designer.propertiesSlot.syraItem = designer.id;
			designer.panels[panelId] = designer.loadNewItem(designer.propertiesSlot, $item, designer);
		}
		(designer.selectedPanel = designer.panels[panelId]).setTitle(syra_local["aw_" + panelId]);
		designer.applyChange({
			$isAdvanced: false,
			$isHidden: false
		});
		designer._ensureSelectedItemTitle();
		designer.applyChange({
			$isAdvanced: designer.designedItem.$item.$isAdvanced,
			$isMaximizable: designer.designedItem.$item.$isMaximizable,
			$isBoxCollapsable: designer.designedItem.$item.$isBoxCollapsable,
			$rowAlign: (designer.awLayout ? designer.awLayout.$layout.$rowAlign : "top")
		});
		if (designer.designedItem.isField) {
			designer.fieldAddinsTool.onShow();
		}
		designer.selectedPanel.setState({
			$isHidden: false
		});
		designer.localizationTool.setTitleItem(designer.designedItem);
		designer.labelTool.setLabelItem(designer.designedItem);
		var sections = designer.selectedPanel.layoutContent.items;
		var layout = designer.awLayout || designer.designedItem.layoutContent;
		designer.selectedPanel.colCount = layout ? layout.getColumnsCount() : 1;
		_addExcludeMe(designer, panelId);
		for (var ii = 0, jj = sections.length; ii < jj; ii++) {
			var section = sections[ii];
			var isHidden = designer.awLayout == null ? false : true;
			if (section.$item.$isSectionModels) {
				designer.templatesTool.addPageModelLinks(section, designer.designedItem, designer.selectedPanel.colCount, designer.awLayout);
			}
			if (section.$item.$isTitleSection) {
				var titleLocalization = section.layoutContent.items[2];
				var titleLocalizationChoice = section.layoutContent.items[1].builder._choices[0];
				syra_site.dom.toggleClass(titleLocalization.domItem, "s-aw-title-localization", true);
				titleLocalizationChoice.slot.appendChild(titleLocalization.domItem);
			}
			if (section.$item.$isLabelSection) {
				if (designer.designedItem.unknowMode) {
					isHidden = true;
				}
				designer.applyChange({
					$properties: {
						$labelAlignment: {
							$isHidden: designer.designedItem.$field.$type == "application/x-boolean"
						}
					}
				});

			}
			if (section.$item.$isFieldAddinSection) {
				isHidden = true;
				if (designer.designedItem.$authoringType) {
					var fieldSections = section.layoutContent.items;
					for (var ii = 0, jj = fieldSections.length; ii < jj; ii++) {
						var fieldSection = fieldSections[ii],
							isSectionHidden = true;
						if (fieldSection.$item.$authoringType == designer.designedItem.$authoringType) {
							if (fieldSection.$item.$authoringEditMode !== undefined) {
								isHidden = isSectionHidden = !(fieldSection.$item.$authoringEditMode == designer.designedItem.$isEditMode);
							} else {
								isHidden = isSectionHidden = false;
							}
						}
						fieldSection.setState({
							$isHidden: isSectionHidden
						});
					}
				}
			}
			if (section.$item.$isRowSection) {
				if (!(isHidden = designer.awLayout == null ? true : false)) {
					designProperties.fillRowSection(section);
				}
			} else {
				if (section.$item.$isStructure && designer.designedItem.$designLevel == "field") {
					if (designer.designedItem.layoutParent && designer.designedItem.layoutParent.isRow) {
						isHidden = true;
					}
				}
			}
			if (designer.designedItem.$item.$isPageFrame) {

			}

			if (section.showItem) {
				section.showItem(!(section.$isHidden = isHidden));
			}
			if (section.$item.$isTabChoice) {
				designer.templatesTool.fillTabChoice(section, designer.designedItem);
			}
		}
		designer.endChange();
		section && section.layoutContent && syra_site.layoutValidator.validate(section.layoutContent, true);
		var $field = designer.designedItem.$field;
		if ($field && $field.$type == "application/x-vignette") {
			if (!$field.$location) {
				_addVignette(designer);
			}
		}
	}
};

function _addVignette(designer) {
	var $url = "/sdata/syracuse/collaboration/syracuse/landingVignetteSelects/$template/$workingCopies?representation=landingVignetteSelect.$edit";
	var designedItem = designer.designedItem;
	var layoutParent = designer.designedItem.layoutParent;
	syra_site.dialogManager.openPage(designer, {
		article: designer,
		$url: $url,
		$isOkHidden: true,
		onValidate: function(searchPage) {
			var sels = searchPage.selectedVignettes;
			if (sels) {
				var newSelect;
				for (var ii = 0, jj = sels.length; ii < jj; ii++) {
					var sel = sels[ii];
					var newItem = {
						$title: sel.vignette.title,
						$awAddNewItem: true,
						$isPageFrame: true,
						$designLevel: "field",
						$field: {
							$type: "application/x-vignette",
							$title: sel.vignette.title,
							$location: helpers.object.clone(sel.vignette.$links[Object.keys(sel.vignette.$links)[0]], true)
						}
					};
					var newChild = syra_site.layoutUpdater.onAddNewItem(designedItem.articleParent, designedItem, newItem, layoutParent.isRow ? "right" : "top");
					if (!newSelect) {
						newSelect = newChild;
					}
				}
				designer.endArticleUpdate(newSelect, true);
				layoutParent.removeItem(designedItem, true, true);
			}
		},
		onClose: function(isCanceled) {
			if (isCanceled) {
				designedItem.boxParent && designer.selectItem(designedItem.boxParent, true);
				layoutParent.removeItem(designedItem, true, true);
			}
			return true;
		}
	});
}