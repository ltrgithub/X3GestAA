"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _addPanel($title, $skin) {
	var panel = {};
	$skin = " s-aw-type-" + $skin;
	var slot = panel.slot = document.createElement("div");
	slot.className = "s-aw-panel" + $skin;

	var head = document.createElement("div");
	head.className = "s-aw-panel-head" + $skin;
	head.textContent = $title;
	var itemTitle = panel.itemTitle = document.createElement("div");
	itemTitle.className = "s-aw-panel-head-title" + $skin;
	head.appendChild(itemTitle);
	slot.appendChild(head);

	panel.body = document.createElement("div");
	panel.body.className = "s-aw-panel-body" + $skin;
	slot.appendChild(panel.body);
	return panel;
}

function _addBox(container, $title, $skin) {
	var box = {};
	$skin = " s-aw-type-" + $skin;
	var slot = box.slot = document.createElement("div");
	slot.className = "s-aw-box" + $skin;

	var head = document.createElement("div");
	head.className = "s-aw-box-head" + $skin;
	head.textContent = $title;
	slot.appendChild(head);

	box.body = document.createElement("div");
	box.body.className = "s-aw-box-body" + $skin;
	slot.appendChild(box.body);
	container.appendChild(slot);
	return box;
}

function _addTitleBox(designer, container, $level) {
	var box = _addBox(container, syra_local.aw_sectionAppearance, $level);
	box.titleField = designer.loadNewItem(box.body, {
		$bind: "$title",
		$isEditMode: true,
		$isLeftSpaceHidden: true
	}, designer);
	box.titleChoiceField = designer.loadNewItem(box.body, {
		$bind: "$titleChoice",
		$isTitleHidden: true,
		$isEditMode: true,
		$choiceLayout: "1"
	}, designer);
	box.titleLocalizationField = designer.loadNewItem(box.body, {
		$bind: "$titleLocalization",
		$isTitleHidden: true,
		$isEditMode: true,
		$format: "$combo"
	}, designer);
	return box;
}

function _addFieldsLabelBox(designer, container, $level) {
	var box = _addBox(container, syra_local.aw_sectionFields, $level);
	designer.loadNewItem(box.body, {
		$bind: "$fieldsTitleChoice",
		$isTitleHidden: true,
		$isEditMode: true,
		$choiceLayout: "1"
	}, designer);
	box.labelAlignmentField = designer.loadNewItem(box.body, {
		$bind: "$labelAlignment",
		$isEditMode: true,
		$choiceLayout: "1"
	}, designer);
	return box;
}

function _addBehaviorBox(designer, container, $level) {
	var box = _addBox(container, syra_local.aw_sectionBehaviour, $level);
	box.isBoxCollapsableField = designer.loadNewItem(box.body, {
		$bind: "$isBoxCollapsable",
		$isEditMode: true,
		$isLeftSpaceHidden: true
	}, designer);

	box.isMaximizableField = designer.loadNewItem(box.body, {
		$bind: "$isMaximizable",
		$isEditMode: true,
		$isLeftSpaceHidden: true
	}, designer);
	return box;
}

function _getRowSection(designer, slot) {
	var box = _addBox(slot, syra_local.aw_rowLayout, "layout");
	designer.loadNewItem(box.body, {
		$category: "field",
		$bind: "$rowAlign",
		$isEditMode: true
	}, designer);
	return box;
}

function _fillRowSection(designer, box) {
	if (!box.insertRow) {
		var row = document.createElement("div");
		row.className = "s-aw-insert-row";

		var cell = document.createElement("div");
		cell.className = "s-aw-insert-row-label";
		cell.textContent = syra_local.aw_addrow;
		row.appendChild(cell);

		cell = document.createElement("div");
		cell.className = "s-aw-insert-row-btns";
		designer.onAddRowClick = function(event, btn) {
			var designer = this.parent;
			var layout = designer.awLayout ? designer.awLayout : (designer.designedItem.layoutContent || designer.designedItem.layoutParent);
			var $curRow = {
				$layoutType: layout.$layout.$layoutType,
				$widths: layout.$layout.$widths,
				$autoSize: layout.$layout.$autoSize
			};
			if (!layout.layoutParent) {
				layout = syra_site.layoutUpdater.ensureHasParent(layout);
			}
			var index = layout.layoutParent.items.indexOf(layout);
			var newRow = layout.layoutParent.loadChildItem(null, {
				$layoutType: $curRow.$layoutType,
				$widths: $curRow.$widths,
				$autoSize: $curRow.$autoSize,
			}, this.isBefore ? index : ++index);
			designer.endArticleUpdate(newRow, true);
		};
		syra_menus.button.add({
			parent: designer,
			slot: cell,
			text: syra_local.aw_addRowBefore,
			css: "s-aw-insert-row-btn",
			btnclick: designer.onAddRowClick,
			isBefore: true
		});
		syra_menus.button.add({
			parent: designer,
			slot: cell,
			text: syra_local.aw_addRowAfter,
			css: "s-aw-insert-row-btn",
			btnclick: designer.onAddRowClick
		});
		row.appendChild(cell);
		box.body.insertBefore(box.insertRow = row, box.body.firstChild);
	}
}

var _panels = {
	article: function(designer, slot) {
		var panel = _addPanel(syra_local.aw_page, "article");
		panel.advancedSection = designer.loadNewItem(panel.body, {
			$bind: "$isAdvanced",
			$isEditMode: true,
			$isLeftSpaceHidden: true
		}, designer);
		panel.rowSection = _getRowSection(designer, panel.body);
		panel.layoutSection = _addBox(panel.body, syra_local.aw_template, "article");
		panel.fieldsLabelSection = _addFieldsLabelBox(designer, panel.body, "article");
		return panel;
	},
	section: function(designer, slot) {
		var panel = _addPanel(syra_local.aw_section, "section");
		panel.rowSection = _getRowSection(designer, panel.body);
		panel.apperanceSection = _addBox(panel.body, syra_local.aw_appearance, "section");
		panel.layoutSection = _addBox(panel.body, syra_local.aw_template, "section");
		panel.titleSection = _addTitleBox(designer, panel.body, "section");
		panel.behaviorSection = _addBehaviorBox(designer, panel.body, "section");
		panel.fieldsLabelSection = _addFieldsLabelBox(designer, panel.body, "section");
		return panel;
	},
	block: function(designer, slot) {
		var panel = _addPanel(syra_local.aw_block, "block");
		panel.rowSection = _getRowSection(designer, panel.body);
		panel.apperanceSection = _addBox(panel.body, syra_local.aw_appearance, "block");
		panel.layoutSection = _addBox(panel.body, syra_local.aw_template, "block");
		panel.titleSection = _addTitleBox(designer, panel.body, "block");
		panel.behaviorSection = _addBehaviorBox(designer, panel.body, "block");
		panel.fieldsLabelSection = _addFieldsLabelBox(designer, panel.body, "block");
		return panel;
	},
	field: function(designer, slot) {
		var panel = _addPanel(syra_local.aw_field, "field");
		panel.advancedSection = designer.loadNewItem(panel.body, {
			$bind: "$isAdvanced",
			$isEditMode: true,
			$isLeftSpaceHidden: true
		}, designer);
		panel.rowSection = _getRowSection(designer, panel.body);
		panel.layoutSection = _addBox(panel.body, syra_local.aw_template, "field");

		var box = _addBox(panel.body, syra_local.aw_sectionFieldLabel, "field");
		box.titleChoiceField = designer.loadNewItem(box.body, {
			$bind: "$fieldTitleChoice",
			$isTitleHidden: true,
			$isEditMode: true,
			$choiceLayout: "1"
		}, designer);
		box.isTitleHiddenField = designer.loadNewItem(box.body, {
			$bind: "$isTitleHidden",
			$title: syra_local.aw_isLabelHidden,
			$isEditMode: true,
			$isLeftSpaceHidden: true
		}, designer);
		box.labelAlignmentField = designer.loadNewItem(box.body, {
			$bind: "$labelAlignment",
			$title: syra_local.aw_sectionFieldLabelPosition,
			$isEditMode: true,
			$choiceLayout: "1"
		}, designer);
		panel.fieldAddinSection = _addBox(panel.body, syra_local.aw_sectionFieldWidget, "field");
		panel.fieldAddinSection.fields = [];
		return panel;
	}
};

function _addExcludeMe(designer, panelId) {
	if (panelId != "article") {
		if (!designer.selectedPanel.excludeMeBtn) {
			var slot = document.createElement("div");
			slot.className = "s-aw-exclude-me-slot";
			designer.selectedPanel.body.insertBefore(slot, designer.selectedPanel.body.firstChild);
			designer.selectedPanel.excludeMeBtn = syra_menus.button.add({
				parent: designer,
				slot: slot,
				text: syra_local.aw_excludeMe,
				css: "s-aw-exclude-me",
				btnclick: function() {
					var designer = this.parent;
					var layoutParent = designer.designedItem.layoutParent;
					var excludedFields;
					if (designer.designedItem.$designLevel == "field") {
						excludedFields = [designer.designedItem];
					} else {
						excludedFields = designer.designedItem.layoutContent.getFields();
					}
					//check manadatory
					if (excludedFields) {
						for (var ii = 0, jj = excludedFields.length; ii < jj; ii++) {
							var field = excludedFields[ii];
							if (field.$item.$bind) {
								designer.designedArticle.garbage.onExcludeField(field.$item.$bind, true);
								designer.designedArticle.unbind(field);
							}
						}
					}
					var index = layoutParent.items.indexOf(designer.designedItem);
					layoutParent.removeItem(designer.designedItem, true);
					var newItem = layoutParent.items[index] || layoutParent.items[index - 1];
					if (newItem && newItem.isSpaceBox) {
						newItem = null;
					}
					newItem = newItem || layoutParent.boxParent;
					switch (layoutParent.$layout.$layoutType) {
						case "row":
							layoutParent.addSpaceBox(index);
							break;
						case "tabs":
							if (layoutParent.items.length == 0) {
								syra_site.layoutUpdater.convertToNewLayout(layoutParent, {
									$layoutType: "stack",
									$width: "100"
								});
							}
							break;
					}
					designer.endArticleUpdate(newItem, true);
				}
			});
		}
		var enable = !designer.designedItem.$isMandatory;
		if (enable && designer.designedItem.layoutContent) {
			var fields = designer.designedItem.layoutContent.getFields();
			for (var ii = 0, jj = fields.length; enable && ii < jj; ii++) {
				enable = !fields[ii].$isMandatory;
			}
		}
		designer.selectedPanel.excludeMeBtn.link.style.display = enable ? "" : "none";
	}
}

function _fillTabChoice(designer, box) {
	var value = designer.designedItem.isTabLayout ? "tabs" : "stack";
	var isLinkDisabled = false;
	var $layoutTypes = ["tabs", "stack"];
	if (!box.tabChoice) {
		box.tabChoice = {};
		box.body.textContent = syra_local.aw_showAs;
		for (var ii = 0, jj = $layoutTypes.length; ii < jj; ii++) {
			var $layoutType = $layoutTypes[ii];
			box.tabChoice[$layoutType] = syra_menus.button.add({
				parent: designer,
				slot: box.body,
				text: syra_local["aw_section_" + $layoutType],
				css: "s-aw-tab-choice",
				iconOnly: true,
				imageName: "authoring/s-layout-" + $layoutType + ".png",
				btnclick: designer.onTemplateClick,
				$modelType: "modelTab",
				$layoutType: $layoutType
			});
		}
	}
	for (var ii = 0, jj = $layoutTypes.length; ii < jj; ii++) {
		var link = box.tabChoice[$layoutTypes[ii]].link;
		link.className = "s-aw-tab-choice" + (value == $layoutTypes[ii] ? " s-selected" : "");
		syra_site.dom.disableItem(link, isLinkDisabled);
	}
}


function _setLabelItem(designer) {
	var item = designer.designedItem;
	var alignment = designer.designedArticle.page.$isEditMode ? "t" : "ll";
	designer.applyChange({
		$labelAlignment: alignment,
		$isTitleHidden: false,
		$fieldsTitleChoice: 1
	});
	if (item.$item) {
		if (item.$item.$isTopLabelAlignment !== undefined ||
			item.$item.$fieldsIsTopLabelAlignment !== undefined ||
			item.$item.$isRightTextLabelAlignment !== undefined ||
			item.$item.$fieldsIsRightTextLabelAlignment !== undefined) {
			if (item.$item.$isTopLabelAlignment || item.$item.$fieldsIsTopLabelAlignment) {
				alignment = "t";
			} else {
				if (item.$item.$isRightTextLabelAlignment || item.$item.$fieldsIsRightTextLabelAlignment) {
					alignment = "lr";
				} else {
					alignment = "ll";
				}
			}
		}
	}
	designer.applyChange({
		$labelAlignment: alignment,
		$isTitleHidden: item.$item.$isTitleHidden,
		$fieldsTitleChoice: item.$item.$fieldsIsTitleHidden ? 2 : ((item.$item.$fieldsIsTitleEmpty) ? 1 : 0),
		$properties: {
			$isTitleHidden: {
				$isHidden: item.isTabLayout == true
			}
		}
	});
}

exports.show = function(designer) {
	if (designer.panels) {
		designer.startChange();
		var panelId = designer.designedItem.$designLevel;
		if (designer.selectedPanel) {
			syra_site.dom.removeChild(designer.selectedPanel.slot);
		}
		if (!designer.panels[panelId]) {
			designer.propertiesSlot.syraItem = designer.id;
			designer.panels[panelId] = _panels[panelId](designer, designer.propertiesSlot);
			panelId == "field" && designer.addFieldAddinToSection(designer.panels[panelId].fieldAddinSection);
		}
		var panel = designer.selectedPanel = designer.panels[panelId];
		designer.applyChange({
			$isAdvanced: false,
		});
		designer._ensureSelectedItemTitle();
		//ensure default setting
		designer.applyChange({
			$isAdvanced: false,
			$isMaximizable: false,
			$isBoxCollapsable: false,
			$rowAlign: "top"
		});

		designer.applyChange({
			$isAdvanced: designer.designedItem.$item.$isAdvanced,
			$isMaximizable: designer.designedItem.$item.$isMaximizable,
			$isBoxCollapsable: designer.designedItem.$item.$isBoxCollapsable,
			$rowAlign: (designer.awLayout ? designer.awLayout.$layout.$rowAlign : "top")
		});
		if (designer.onShowFieldAddins && designer.designedItem.isField) {
			designer.onShowFieldAddins();
		}
		designer.propertiesSlot.appendChild(designer.selectedPanel.slot);
		designer.setFieldTitleItem(designer.designedItem);
		designer.setLocalizeTitleItem(designer.designedItem);
		_setLabelItem(designer);
		var layout = designer.awLayout || designer.designedItem.layoutContent;
		designer.selectedPanel.colCount = layout ? layout.getColumnsCount() : 1;
		_addExcludeMe(designer, panelId);

		var isHidden = designer.awLayout == null ? false : true;
		if (panel.rowSection) {
			designer.addPageModelLinks(panel.rowSection, designer.designedItem, designer.selectedPanel.colCount, designer.awLayout);
			var sectionHidden = true;
			if (designer.awLayout) {
				_fillRowSection(designer, panel.rowSection);
				sectionHidden = false;
			}
			syra_site.dom.hide(panel.rowSection.slot, sectionHidden);
		}
		if (panel.apperanceSection) {
			_fillTabChoice(designer, panel.apperanceSection);
			syra_site.dom.hide(panel.apperanceSection.slot, isHidden);
		}
		if (panel.layoutSection) {
			designer.addPageModelLinks(panel.layoutSection, designer.designedItem, designer.selectedPanel.colCount, designer.awLayout);
			var sectionHidden = isHidden;
			if (designer.designedItem.$designLevel == "field") {
				if (designer.designedItem.layoutParent && designer.designedItem.layoutParent.isRow) {
					sectionHidden = true;
				}
			}
			syra_site.dom.hide(panel.layoutSection.slot, sectionHidden);
		}
		if (panel.titleSection) {
			syra_site.dom.toggleClass(panel.titleSection.titleLocalizationField.domItem, "s-aw-title-localization", true);
			var choice = panel.titleSection.titleChoiceField._choices[0];
			choice.slot.appendChild(panel.titleSection.titleLocalizationField.domItem);
			syra_site.dom.hide(panel.titleSection.slot, isHidden);
		}
		panel.behaviorSection && syra_site.dom.hide(panel.behaviorSection.slot, isHidden);
		panel.fieldsLabelSection && syra_site.dom.hide(panel.fieldsLabelSection.slot, isHidden);

		if (panel.fieldLabelSection) {
			panel.fieldLabelSection.showItem(!(panel.fieldLabelSection.$isHidden = (designer.designedItem.unknowMode || isHidden)));
			designer.applyChange({
				$properties: {
					$labelAlignment: {
						$isHidden: designer.designedItem.$field.$type == "application/x-boolean"
					}
				}
			});
		}
		if (panel.fieldAddinSection) {
			isHidden = true;
			if (designer.designedItem.$authoringType) {
				var fields = panel.fieldAddinSection.fields;
				for (var ii = 0, jj = fields.length; ii < jj; ii++) {
					var field = fields[ii],
						isSectionHidden = true;
					if (field.$item.$authoringType == designer.designedItem.$authoringType) {
						if (field.$item.$authoringEditMode !== undefined) {
							isHidden = isSectionHidden = !(field.$item.$authoringEditMode == designer.designedItem.$isEditMode);
						} else {
							isHidden = isSectionHidden = false;
						}
					}
					field.setState({
						$isHidden: isSectionHidden
					});
				}
			}
			syra_site.dom.hide(panel.fieldAddinSection.slot, isHidden);
		}
		designer.endChange();
		var $field = designer.designedItem.$field;
		if ($field && $field.$type == "application/x-vignette") {
			!$field.$location && _addVignette(designer);
		}
	}
};

function _addVignette(designer) {
	var $url = "/sdata/syracuse/collaboration/syracuse/landingVignetteSelects/$template/$workingCopies?representation=landingVignetteSelect.$edit";
	var designedItem = designer.designedItem;
	var layoutParent = designer.designedItem.layoutParent;
	syra_site.dialogManager.openPage(designer, {
		article: designer,
		$url: $url,
		$isOkHidden: true,
		onValidate: function(searchPage) {
			var sels = searchPage.selectedVignettes;
			if (sels) {
				var newSelect;
				for (var ii = 0, jj = sels.length; ii < jj; ii++) {
					var sel = sels[ii];
					var newItem = {
						$title: sel.vignette.title,
						$awAddNewItem: true,
						$designLevel: "field",
						$field: {
							$type: "application/x-vignette",
							$title: sel.vignette.title,
							$location: helpers.object.clone(sel.vignette.$links[Object.keys(sel.vignette.$links)[0]], true)
						}
					};
					var newChild = syra_site.layoutUpdater.onAddNewItem(designedItem.articleParent, designedItem, newItem, layoutParent.isRow ? "right" : "top");
					if (!newSelect) {
						newSelect = newChild;
					}
				}
				designer.endArticleUpdate(newSelect, true);
				layoutParent.removeItem(designedItem, true, true);
			}
		},
		onClose: function(isCanceled) {
			if (isCanceled) {
				designedItem.boxParent && designer.selectItem(designedItem.boxParent, true);
				layoutParent.removeItem(designedItem, true, true);
			}
			return true;
		}
	});
}