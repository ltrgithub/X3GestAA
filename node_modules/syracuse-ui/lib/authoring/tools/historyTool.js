"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _refreshStepLinks(hist) {
	if (hist) {
		if (hist.steps.length > 1) {
			syra_menus.button.setTitle(hist.prevBtn, syra_local.aw_previousLayoutOn.replace("{0}", hist.currentStep).replace("{1}", hist.steps.length));
			syra_menus.button.disable(hist.prevBtn, hist.currentStep == 0);
			if (hist.currentStep == hist.steps.length - 1) {
				syra_menus.setButtonTitle(hist.nextBtn, syra_local.aw_nextLayout);
				syra_menus.button.disable(hist.nextBtn, true);
			} else {
				syra_menus.button.setTitle(hist.nextBtn, syra_local.aw_nextLayoutOn.replace("{0}", hist.currentStep + 1).replace("{1}", hist.steps.length));
				syra_menus.button.disable(hist.nextBtn, false);
			}
			syra_menus.button.disable(hist.undoAllBtn, false);
		} else {
			if (hist.nextBtn) {
				syra_menus.button.setTitle(hist.nextBtn, syra_local.aw_nextLayout);
				syra_menus.button.disable(hist.prevBtn, true);
				syra_menus.button.disable(hist.nextBtn, true);
				syra_menus.button.disable(hist.undoAllBtn, true);
			}
		}
	}
}

function _updateSteps(designer, resetUpdates) {
	var hist = designer.history;
	if (!resetUpdates && hist.isUpdated) {
		if (hist.currentStep != hist.steps.length - 1) {
			hist.steps.splice(hist.currentStep + 1);
		}
		var $article = helpers.object.clone(designer.designedArticle.$item, true);
		hist.steps.push($article);
		syra_site.mobileGateway && syra_site.mobileGateway.applyChange($article);
		hist.currentStep = hist.steps.length - 1;
	} else {
		(hist.steps = []).push(designer.$sourceItem);
		hist.currentStep = 0;
	}
	_refreshStepLinks(designer.history);
}

function _onAfterStepChange(designer, $item) {
	try {
		syra_site.uiLocker.lock();
		var $bind = designer.designedItem.$item.$bind;
		var $article = helpers.object.clone($item || designer.history.steps[designer.history.currentStep], true);
		var newList = designer.designedArticle.reloadLayout($article);
		var designer = newList ? newList.designer : designer;
		_refreshStepLinks(designer.history);
		var itemToSelect = null;
		if ($bind) {
			var bounds = designer.designedArticle.boundFields[$bind];
			if (bounds) {
				for (var ii = 0, jj = bounds.length; ii < jj; ii++) {
					var bound = bounds[ii];
					if (bound && !bound.disposed && bound.layoutParent) {
						itemToSelect = bound;
						break;
					}
				}
			}
		}
		if (designer.designedArticle.page.garbage) {
			designer.designedArticle.page.garbage.loadFreeField();
		}
		syra_site.mobileGateway && syra_site.mobileGateway.applyChange($article);
		if (designer.onEndHistoryChangeStep) {
			designer.onEndHistoryChangeStep(itemToSelect || designer.designedArticle);
		}
	} finally {
		syra_site.uiLocker.unlock();
	}
}

exports.load = function(designer) {
	designer.$sourceItem = helpers.object.clone(designer.designedArticle.$item, true);
	designer.history = {
		onAfterStepChange: function($item) {
			_onAfterStepChange(designer, $item);
		},
		updateSteps: function(isUpdated) {
			this.isUpdated = isUpdated !== false;
			_updateSteps(designer);
		}
	};
	_updateSteps(designer);
	designer.history.prevBtn = syra_menus.button.add({
		parent: designer,
		slot: designer.leftTop,
		text: "previousLayout",
		iconOnly: true,
		fontIcon: "reload_back",
		css: "s-design-history-btn-icon s-disabled",
		btnclick: function() {
			if (this.parent.history.currentStep) {
				this.parent.history.currentStep--;
				_onAfterStepChange(this.parent);
			}
		}
	});
	designer.history.nextBtn = syra_menus.button.add({
		parent: designer,
		slot: designer.leftTop,
		text: "nextLayout",
		iconOnly: true,
		fontIcon: "reload_next",
		css: "s-design-history-btn-icon s-disabled",
		btnclick: function() {
			if ((this.parent.history.currentStep + 1) < this.parent.history.steps.length) {
				this.parent.history.currentStep++;
				_onAfterStepChange(this.parent);
			}
		}
	});
	designer.history.undoAllBtn = syra_menus.button.add({
		parent: designer,
		slot: designer.leftTop,
		text: syra_local.aw_undoAllLayout,
		css: "s-design-history-btn s-disabled",
		btnclick: function() {
			var designer = this.parent;
			syra_diagnose.box.show({
				$title: syra_local.aw_updateMessageTitle,
				$message: syra_local.aw_confirmUndoAll,
				$type: "question",
				$buttons: "yesno",
				callback: function(response) {
					if (response.$clientId == "yes") {
						designer.history.currentStep = 0;
						_updateSteps(designer, true);
						_onAfterStepChange(designer);
					}
				}
			});
		}
	});
};