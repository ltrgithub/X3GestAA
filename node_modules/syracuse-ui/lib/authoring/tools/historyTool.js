"use strict";
var helpers = require('syracuse-core/lib/helpers');

function HistoryTool() {}

exports.HistoryTool = helpers.defineClass(HistoryTool, null, {
	load: function(designer, $stepSkin) {
		this.designer = designer;
		this.$sourceItem = helpers.object.clone(this.designer.awArticle.$item, true);
		this._notifySteps();
		this.drawStepLinks($stepSkin);
	},
	getCurrentStep: function() {
		return this._steps[this._currentStep];
	},
	notifyUpdate: function(isUpdated) {
		this.isUpdated = isUpdated !== false;
		this._notifySteps();
	},
	_notifySteps: function(resetUpdates) {
		if (!resetUpdates && this.isUpdated) {
			if (this._currentStep != this._steps.length - 1) {
				this._steps.splice(this._currentStep + 1);
			}
			var $article = helpers.object.clone(this.designer.awArticle.$item, true);
			this._steps.push($article);
			this.designer.applyChangeToMobile($article);
			this._currentStep = this._steps.length - 1;
		} else {
			(this._steps = []).push(this.$sourceItem);
			this._currentStep = 0;
		}
		this.refreshStepLinks();
	},
	drawStepLinks: function($stepSkin) {
		var $steps = ["previousLayout", "nextLayout", "undoAllLayout"];
		for (var ii = 0, jj = $steps.length; ii < jj; ii++) {
			var $step = $steps[ii];
			var link = document.createElement("a");
			link.title = this.designer.localize["aw_" + $step];
			link.setAttribute("data-s-picker", $step);
			if ($step == "undoAllLayout") {
				link.className = $stepSkin;
				link.textContent = link.title;
			} else {
				link.className = $stepSkin + "-icon";
				link.style.backgroundImage = "url('/syracuse-ui/themes/desktop/sage/images/authoring/s-aw-" + $step + ".png')";
			}
			this[$step] = link;
			this._disableLink($step, true);
			this.designer.historySlot.appendChild(link);
		}
	},
	refreshStepLinks: function() {
		if (this._steps.length > 1) {
			this.previousLayout.title = this.designer.localize.aw_previousLayoutOn.replace("{0}", this._currentStep).replace("{1}", this._steps.length);
			this._disableLink("previousLayout", this._currentStep == 0);
			if (this._currentStep == this._steps.length - 1) {
				this.nextLayout.title = this.designer.localize.aw_nextLayout;
				this._disableLink("nextLayout", true);
			} else {
				this.nextLayout.title = this.designer.localize.aw_nextLayoutOn.replace("{0}", this._currentStep + 1).replace("{1}", this._steps.length);
				this._disableLink("nextLayout", false);
			}
			this._disableLink("undoAllLayout", false);
		} else {
			if (this.nextLayout) {
				this.nextLayout.title = this.designer.localize.aw_nextLayout;
				this._disableLink("previousLayout", true);
				this._disableLink("nextLayout", true);
				this._disableLink("undoAllLayout", true);
			}
		}
	},
	onClickPicker: function($bind) {
		var self = this;
		switch ($bind) {
			case "previousLayout":
				self._currentStep--;
				self.designer.onEndChangeStep();
				break;
			case "nextLayout":
				self._currentStep++;
				self.designer.onEndChangeStep();
				break;
			case "undoAllLayout":
				document.site.showMessage({
					$title: self.designer.localize.aw_updateMessageTitle,
					$message: self.designer.localize.aw_confirmUndoAll,
					$type: "question",
					$buttons: "yesno",
					callback: function(response) {
						if (response.$id == "yes") {
							self._currentStep = 0;
							self._notifySteps(true);
							self.designer.onEndChangeStep();
						}
					}
				});
				break;
			default:
				return false;
		}
		return true;
	},
	_disableLink: function($bind, isDisabled) {
		document.site.toggleClass(this[$bind], "s-disabled", isDisabled);
	},
	dispose: function() {
		this.previousLayout = this.nextLayout = this.undoAllLayout = null;
		this.designer = this._steps = this.$sourceItem = null;
	}
});