"use strict";
var helpers = require('syracuse-core/lib/helpers');

function RowResizer() {}

exports.RowResizer = helpers.defineClass(RowResizer, null, {
	start: function(dropItem, itemTool) {
		this.designer = itemTool.designer;
		this.dropItem = dropItem;
		this.startX = this.dropItem.layoutSlot.getBoundingClientRect().right;
		this.layout = this.dropItem.layoutParent;
		this.index = this.layout.items.indexOf(this.dropItem);
		this.widths = syra_site.layoutUpdater.getWidthValues(this.layout);

		this.leftItem = this.dropItem;
		this.leftWidth = this.leftItem.layoutSlot.getBoundingClientRect().width;
		this.rightItem = this.layout.items[this.index + 1];
		this.rightWidth = this.rightItem.layoutSlot.getBoundingClientRect().width;

		this.maxWidth = this.layout.domItem.getBoundingClientRect().width;
		this.markerzIndex = syra_site.dom.setZIndex();
		this._drawSteps();
		syra_site.body.style.cursor = "w-resize";
	},
	_drawSteps: function() {
		var smallW = this.maxWidth / 30,
			steps = [],
			width = 0;
		for (var ii = 0; ii < 29; ii++) {
			steps.push(width += smallW);
		}
		this.markersSlot = document.createElement("div");
		this.markersSlot.className = "s-aw-markers";
		this.markersSlot.style.zIndex = this.markerzIndex;
		syra_site.layoutSlot.appendChild(this.markersSlot);
		var height = this.markersSlot.clientHeight;
		var rect = this.layout.domItem.getBoundingClientRect();
		this.markersSlot.style.top = (rect.top - height - 2) + "px";
		this.markersSlot.style.left = rect.left + "px";
		this.markersSlot.style.width = rect.width + "px";
		this.markers = [];
		var lastMarker;
		for (var ii = 0, jj = steps.length; ii < jj; ii++) {
			var marker = document.createElement("div");
			marker.className = "s-aw-marker";
			marker.style.left = steps[ii] + "px";
			marker.style.height = height + "px";
			marker.syraPageX = rect.left + steps[ii];
			marker.syraStep = steps[ii];
			if (lastMarker) {
				lastMarker.syraPageMaxX = lastMarker.syraPageX + ((marker.syraPageX - lastMarker.syraPageX) / 2);
				marker.syraPageMinX = lastMarker.syraPageMaxX - 1;
			} else {
				marker.syraPageMinX = rect.left;
			}
			lastMarker = marker;
			this.markersSlot.appendChild(marker);
			this.markers.push(marker);
		}
		lastMarker.syraPageMaxX = rect.left + rect.width;
	},
	_findStep: function(rowSeparator) {
		var right = syra_site.dom.getBoundingClientRect(rowSeparator).right;
		for (var ii = 0, jj = this.markers.length; ii < jj; ii++) {
			var step = this.markers[ii];
			if (step.syraPageMinX <= right && right < step.syraPageMaxX) {
				return step;
			}
		}
		return null;
	},
	setLeftRightWidths: function(pageX) {
		this.layout.domItem.style.width = "";
		pageX -= this.startX;
		this.leftItem.layoutSlot.style.width = Math.max(this.leftWidth + pageX) + "px";
		this.rightItem.layoutSlot.style.width = this.rightWidth + (pageX * (-1)) + "px";
	},
	onDragMouseUp: function(target, event) {
		var widths = this.layout.$layout.$widths.split(",");
		var step = this._findStep(this.leftItem.layoutSlot);
		this.setLeftRightWidths(step.syraPageX);
		var tot = this.layout.domItem.getBoundingClientRect().width;
		for (var ii = 0, jj = this.layout.items.length; ii < jj; ii++) {
			var width = this.layout.items[ii].layoutSlot.getBoundingClientRect().width;
			widths[ii] = (100 * width) / tot;
		}
		this.layout.$layout.$widths = widths.join(",");
		syra_site.layoutValidator.setRowWidths(this.layout);
		this.designer.endArticleUpdate(this.designedItem, false);

	},
	onDragMouseMove: function(target, event) {
		var pageX;
		if (event.pageX >= this.markers[0].syraPageX && event.pageX <= this.markers[this.markers.length - 1].syraPageX) {
			pageX = event.pageX;
		} else {
			pageX = this.markers[(event.pageX < this.markers[0].syraPageX) ? 0 : this.markers.length - 1].syraPageX;
		}
		if (pageX !== undefined) {
			this.setLeftRightWidths(pageX);
		}
	},
	stop: function() {
		this.markersSlot && syra_site.dom.removeChild(this.markersSlot);
		this.markers = this.leftWidth = this.rightWidth = null;
		this.stopTimeout = this.widths = this.layout = this.leftItem = this.rightItem = null;
	},
	dispose: function() {
		this.stop();
		this.designer = null;
	}
});