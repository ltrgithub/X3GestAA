"use strict";
var helpers = require('syracuse-core/lib/helpers');

function RowResizer() {}

exports.RowResizer = helpers.defineClass(RowResizer, null, {
	start: function(dropItem, itemTool) {
		this.designer = itemTool.designer;
		this.rowSeparator = dropItem;
		this.startX = document.site.getBoundingClientRect(this.rowSeparator).left;
		this.index = dropItem.syraSeparatorIndex;
		this.layout = this.designer.findItem(dropItem.parentNode, true);
		this.widths = this.layout.getWidthValues();

		this.leftItem = this.layout.items[this.index - 1];
		this.leftWidth = document.site.getBoundingClientRect(this.leftItem.layoutSlot).width;
		this.rightItem = this.layout.items[this.index];
		this.rightWidth = document.site.getBoundingClientRect(this.rightItem.layoutSlot).width;
		this.offset = $(this.layout.$$item).offset();

		this.margin = document.site.getBoundingClientRect(document.site.body);

		this.maxWidth = $(this.layout.$$item).width();
		this.markerzIndex = document.site.setZIndex();
		this._drawPercentSteps();
		this._drawSmallSteps();
		document.site.body.style.cursor = "w-resize";
	},
	_drawSmallSteps: function() {
		this.smallSteps = [];
		var smallWidth = this.maxWidth / 30;
		var minWidth = 0,
			maxWidth = 0;
		for (var ii = 0, jj = this.widths.length; ii < jj; ii++) {
			if (ii < (this.index - 1)) {
				minWidth += this.widths[ii];
			}
			if (ii <= (this.index)) {
				maxWidth += this.widths[ii];
			}
		}
		var lastX = 0;
		var percents = [];
		for (var ii = 0; ii < 29; ii++) {
			percents.push(Math.round((100 / 30) * (ii + 1)));
		}
		minWidth = Math.max(percents[0], minWidth);
		maxWidth = Math.min(percents[percents.length - 1], maxWidth);
		for (var ii = 0, jj = percents.length; ii < jj; ii++) {
			var width = smallWidth * (ii + 1);
			var marker = document.createElement("div");
			marker.className = "s-aw-resizer-small-marker";
			var pageX = this.offset.left + width;
			marker.style.left = (pageX - this.margin.left) + "px";
			marker.style.top = (this.offset.top - this.margin.top - 5) + "px";
			marker.style.zIndex = this.markerzIndex;
			this.smallSteps.push({
				percent: percents[ii],
				index: ii,
				pageXMin: lastX ? (pageX - ((pageX - lastX) / 2)) : 0,
				pageX: pageX,
				offsetX: width,
				width: width,
				marker: document.site.body.appendChild(marker)
			});
			lastX = pageX;
			if (ii > 0) {
				this.smallSteps[ii - 1].pageXMax = this.smallSteps[ii - 1].pageX + ((pageX - this.smallSteps[ii - 1].pageX) / 2);
			}
			var percent = percents[ii];
			if (((percent - 2) <= minWidth) && (minWidth <= (percent + 2))) {
				this.minPercentStep = ii;
			}
			if (((percent - 2) <= maxWidth) && (maxWidth <= (percent + 2))) {
				this.maxPercentStep = ii;
			}
		}
		this.smallSteps[percents.length - 1].pageXMax = (this.smallSteps[percents.length - 1].pageX * 100); //infini
		if (this.index > 1) {
			this.minPercentStep++;
		}
		if (this.index < (this.widths.length - 1)) {
			this.maxPercentStep--;
		}
	},
	_drawPercentSteps: function() {
		this.percentSteps = [];
		var max = this.maxWidth;
		var percentSteps = [max / 6, max / 5, max / 4, max / 3, 2 * (max / 5), max / 2, 3 * (max / 5), 2 * (max / 3), 3 * (max / 4), 4 * (max / 5), 5 * (max / 6)];
		var minWidth = 0,
			maxWidth = 0;
		for (var ii = 0, jj = this.widths.length; ii < jj; ii++) {
			if (ii < (this.index - 1)) {
				minWidth += this.widths[ii];
			}
			if (ii <= (this.index)) {
				maxWidth += this.widths[ii];
			}
		}
		var percents = [16, 20, 25, 33, 40, 50, 60, 66, 75, 80, 84];
		minWidth = Math.max(percents[0], minWidth);
		maxWidth = Math.min(percents[percents.length - 1], maxWidth);
		var lastX = 0;
		for (var ii = 0, jj = percentSteps.length; ii < jj; ii++) {
			var width = percentSteps[ii];
			var marker = document.createElement("div");
			marker.className = "s-aw-resizer-marker";
			var pageX = this.offset.left + width;
			marker.style.left = (pageX - this.margin.left) + "px";
			marker.style.top = (this.offset.top - this.margin.top - 12) + "px";
			marker.style.zIndex = this.markerzIndex;
			this.percentSteps.push({
				percent: percents[ii],
				pageXMin: lastX ? (pageX - ((pageX - lastX) / 2)) : 0,
				pageX: pageX,
				offsetX: width,
				width: width,
				marker: document.site.body.appendChild(marker)
			});
			lastX = pageX;
			if (ii > 0) {
				this.percentSteps[ii - 1].pageXMax = this.percentSteps[ii - 1].pageX + ((pageX - this.percentSteps[ii - 1].pageX) / 2);
			}
			var percent = percents[ii];
			if (((percent - 2) <= minWidth) && (minWidth <= (percent + 2))) {
				this.minPercentStep = ii;
			}
			if (((percent - 2) <= maxWidth) && (maxWidth <= (percent + 2))) {
				this.maxPercentStep = ii;
			}
		}
		this.percentSteps[percentSteps.length - 1].pageXMax = (this.percentSteps[percentSteps.length - 1].pageX * 100); //infini
		if (this.index > 1) {
			this.minPercentStep++;
		}
		if (this.index < (this.widths.length - 1)) {
			this.maxPercentStep--;
		}
	},
	_findStep: function(rowSeparator) {
		var rect = document.site.getBoundingClientRect(rowSeparator);
		var lastX = this.percentSteps[0];
		for (var ii = 0, jj = this.percentSteps.length; ii < jj; ii++) {
			var step = this.percentSteps[ii];
			if (step.pageXMin <= rect.left && rect.left < step.pageXMax) {
				return step;
			}
		}
		return null;
	},
	_findSmallStep: function(rowSeparator) {
		var rect = document.site.getBoundingClientRect(rowSeparator);
		var lastX = this.smallSteps[0];
		for (var ii = 0, jj = this.smallSteps.length; ii < jj; ii++) {
			var step = this.smallSteps[ii];
			if (step.pageXMin <= rect.left && rect.left < step.pageXMax) {
				return step;
			}
		}
		return null;
	},
	setLeftRightWidths: function(pageX) {
		pageX -= this.startX;
		this.leftItem.layoutSlot.style.width = Math.max(this.leftWidth + pageX) + "px";
		this.rightItem.layoutSlot.style.width = this.rightWidth + (pageX * (-1)) + "px";
	},
	onDragMouseUp: function(target, event) {
		var widths = this.layout.$layout.$widths.split(",");
		var step = this._findSmallStep(this.rowSeparator);
		this.setLeftRightWidths(step.pageX);
		var limitPercent = 0;
		if (this.index > 1) {
			limitPercent = this._findSmallStep(this.layout.rowSeparators[this.index - 2]).percent;
		}
		widths[this.index - 1] = step.percent - limitPercent;
		limitPercent = 100;
		if (this.index < this.layout.rowSeparators.length) {
			limitPercent = this._findSmallStep(this.layout.rowSeparators[this.index]).percent;
		}
		widths[this.index] = limitPercent - step.percent;
		this.layout.$layout.$widths = widths.join(",");
		this.designer.historyTool.notifyUpdate();
		this.layout.page.layoutValidator.setRowWidths(this.layout);
	},
	onDragMouseMove: function(target, event) {
		var pageX;
		if (event.pageX >= this.smallSteps[this.minPercentStep].pageX && event.pageX <= this.smallSteps[this.maxPercentStep].pageX) {
			pageX = event.pageX;
		} else {
			pageX = this.smallSteps[(event.pageX < this.smallSteps[this.minPercentStep].pageX) ? this.minPercentStep : this.maxPercentStep].pageX;
		}
		if (pageX !== undefined) {
			this.setLeftRightWidths(pageX);
		} else {
			if (event.pageX >= this.percentSteps[this.minPercentStep].pageX && event.pageX <= this.percentSteps[this.maxPercentStep].pageX) {
				pageX = event.pageX;
			} else {
				pageX = this.percentSteps[(event.pageX < this.percentSteps[this.minPercentStep].pageX) ? this.minPercentStep : this.maxPercentStep].pageX;
			}
			if (pageX !== undefined) {
				this.setLeftRightWidths(pageX);
			}
		}
	},
	stop: function() {
		if (this.percentSteps) {
			for (var ii = 0, jj = this.percentSteps.length; ii < jj; ii++) {
				document.site.removeDomChild(this.percentSteps[ii].marker);
				this.percentSteps[ii].marker = null;
			}
		}
		if (this.smallSteps) {
			for (var ii = 0, jj = this.smallSteps.length; ii < jj; ii++) {
				document.site.removeDomChild(this.smallSteps[ii].marker);
				this.smallSteps[ii].marker = null;
			}
		}
		this.index = this.leftWidth = this.rightWidth = this.offset = null;
		this.stopTimeout = this.smallSteps = this.percentSteps = this.widths = this.layout = this.leftItem = this.rightItem = null;
	},
	dispose: function() {
		this.stop();
		this.designer = null;
	}
});