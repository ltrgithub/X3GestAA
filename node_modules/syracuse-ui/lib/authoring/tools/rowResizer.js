"use strict";
var helpers = require('syracuse-core').helpers;

function _drawSteps(resizer) {
	var smallW = resizer.maxWidth / 30,
		steps = [],
		width = 0;
	for (var ii = 0; ii < 29; ii++) {
		steps.push(width += smallW);
	}
	resizer.markersSlot = syra_dom.div("s-aw-markers");
	resizer.markersSlot.style.zIndex = resizer.markerzIndex;
	syra_site.layoutSlot.appendChild(resizer.markersSlot);
	var height = resizer.markersSlot.clientHeight;
	var rect = resizer._row.getBoundingClientRect();
	resizer.markersSlot.style.top = (rect.top - height - 2) + "px";
	resizer.markersSlot.style.left = rect.left + "px";
	resizer.markersSlot.style.width = rect.width + "px";
	resizer.markers = [];
	var lastMarker;
	for (var ii = 0, jj = steps.length; ii < jj; ii++) {
		var marker = document.createElement("div");
		marker.className = "s-aw-marker";
		marker.style.left = steps[ii] + "px";
		marker.style.height = height + "px";
		marker.syraPageX = rect.left + steps[ii];
		marker.syraStep = steps[ii];
		if (lastMarker) {
			lastMarker.syraPageMaxX = lastMarker.syraPageX + ((marker.syraPageX - lastMarker.syraPageX) / 2);
			marker.syraPageMinX = lastMarker.syraPageMaxX - 1;
		} else {
			marker.syraPageMinX = rect.left;
		}
		lastMarker = marker;
		resizer.markersSlot.appendChild(marker);
		resizer.markers.push(marker);
	}
	lastMarker.syraPageMaxX = rect.left + rect.width;
}

function _setLeftRightWidths(resizer, pageX) {
	if (!resizer.designer.designedArticle.isLandingPage) {
		resizer._row.style.width = ""; //temp hack	
	}
	pageX -= resizer.startX;
	if (syra_context.isRTL) {
		resizer._right.style.width = Math.max(resizer._rightW + pageX) + "px";
		resizer._left.style.width = resizer._leftW + (pageX * (-1)) + "px";
	} else {
		resizer._left.style.width = Math.max(resizer._leftW + pageX) + "px";
		resizer._right.style.width = resizer._rightW + (pageX * (-1)) + "px";
	}
}

function RowResizer() {}

exports.RowResizer = helpers.defineClass(RowResizer, null, {
	start: function(dropItem, itemTool) {
		this.designer = itemTool.designer;
		this._rowLayout = this.designer.findItem(itemTool.cellToResize.parentNode);
		this.widths = syra_layout.getWidthValues(this._rowLayout);

		this.sideProperty = syra_context.isRTL ? "left" : "right";

		this._left = itemTool.cellToResize;
		this._row = this._left.parentNode;
		var rect = this._left.getBoundingClientRect();
		this.startX = rect[this.sideProperty];
		this._leftW = rect.width;
		this._right = this._left.nextSibling;
		this._rightW = this._right.getBoundingClientRect().width;

		this.maxWidth = this._row.getBoundingClientRect().width;
		this.markerzIndex = syra_dom.setZIndex();
		_drawSteps(this);
		syra_site.layoutSlot.style.cursor = "w-resize";
	},
	onDragMouseUp: function(target, event) {
		var widths = this._rowLayout.$layout.$widths.split(",");
		var step = null;
		var right = syra_dom.getBoundingClientRect(this._left)[this.sideProperty];
		for (var ii = 0, jj = this.markers.length; ii < jj; ii++) {
			var found = this.markers[ii];
			if (found.syraPageMinX <= right && right < found.syraPageMaxX) {
				step = found;
				break;
			}
		}
		_setLeftRightWidths(this, step.syraPageX);
		var tot = this._row.getBoundingClientRect().width;
		var children = this._row.children;
		for (var ii = 0, jj = children.length; ii < jj; ii++) {
			var width = children[ii].getBoundingClientRect().width;
			widths[ii] = syra_site.roundDecimal((100 * width) / tot, 2);
		}
		this._rowLayout.$layout.$widths = widths.join(",");
		syra_layout.setRowWidths(this._rowLayout);
		this.designer.endArticleUpdate(this.designedItem || this._rowLayout, false);

	},
	onDragMouseMove: function(target, event) {
		var pageX;
		if (event.pageX >= this.markers[0].syraPageX && event.pageX <= this.markers[this.markers.length - 1].syraPageX) {
			pageX = event.pageX;
		} else {
			pageX = this.markers[(event.pageX < this.markers[0].syraPageX) ? 0 : this.markers.length - 1].syraPageX;
		}
		if (pageX !== undefined) {
			_setLeftRightWidths(this, pageX);
		}
	},
	stop: function() {
		this.markersSlot && syra_dom.remove(this.markersSlot);
		this._row = this.markers = this._leftW = this._rightW = this._left = this._right = this.stopTimeout = this.widths = this._rowLayout = null;
	},
	dispose: function() {
		this.stop();
		this.designer = null;
	}
});