"use strict";

function _getDefinedTitles(section, $titles) {
	$titles = $titles || {};
	if (section.$item.$title) {
		$titles[section.$item.$title] = section.id;
	}
	if (section.childrenSection) {
		for (var ii = 0, jj = section.childrenSection.length; ii < jj; ii++) {
			var child = section.childrenSection[ii];
			if (child.isSection && !child.isMenuGroup) {
				_getDefinedTitles(section.childrenSection[ii], $titles);
			}
		}
	}
	return $titles;
}

function _getTitleEnum(designer, $title) {
	var designedPage = designer.designedArticle.page;
	var $enum = [];
	var $keys = Object.keys(designedPage.$prototype.$localization);
	var $definedTitles = _getDefinedTitles(designer.designedArticle);
	for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
		var $key = "{" + $keys[ii] + "}";
		if (($key[2] == "B" || $key[2] == "S") && ($keys == $title || !$definedTitles[$key])) {
			$enum.push({
				$value: $key,
				$title: designedPage.$prototype.$localization[$keys[ii]]
			});
		}
	}
	return $enum;
}

function _fillTitlesChoices(designer) {
	var $enum = [];
	var designedPage = designer.designedArticle.page;
	if (designedPage.$prototype.$localization) {
		if (designedPage.isFusionPage) {
			$enum = _getTitleEnum(designer);
		} else {
			var $keys = Object.keys(designedPage.$prototype.$localization);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				$enum.push({
					$value: "{" + $keys[ii] + "}",
					$title: designedPage.$prototype.$localization[$keys[ii]]
				});
			}
		}
	}
	var $fieds = designer.$prototype.$properties;
	$fieds.$titleLocalization.$value.$enum = $enum;
	if ($enum.length) {
		$fieds.$titleChoice.$value.$enum.unshift({
			$value: 0,
			$title: syra_local.aw_titleLocalization
		});
	} else {
		$fieds.$titleChoice.$value.$enum.unshift({
			$value: 0,
			$title: syra_local.aw_titleVisible
		});
		$fieds.$titleLocalization.$isHidden = true;
	}
}

exports.onFormUpdateDelta = function(designer, metaData, field, value) {
	switch (field.$item.$bind) {
		case "$titleChoice":
			var isTitleLocalizationDisabled = true;
			switch (value) {
				case 0:
					metaData.$isTitleHidden = false;
					if (designer.$prototype.$properties.$titleLocalization.$isHidden) {
						value = designer.selectedItemTitle;
					} else {
						isTitleLocalizationDisabled = false;
						value = designer.designedItem.$item.$title;
						if (!value || value == "-") {
							value = designer.$prototype.$properties.$titleLocalization.$value.$enum[0].$value;
						}
						designer.applyChange({
							$titleLocalization: value
						});
					}
					metaData.$title = value;
					break;
				case 1:
					metaData.$title = "-";
					metaData.$isTitleHidden = false;
					break;
				case 2:
					metaData.$isTitleHidden = true;
					break;
			}
			designer.applyChange({
				$properties: {
					$titleLocalization: {
						$isDisabled: isTitleLocalizationDisabled
					}
				}
			});
			break;
		case "$titleLocalization":
			metaData.$title = value;
			break;
		default:
			return false;
	}
	return true;
};

exports.load = function(designer, $stepSkin) {
	designer.$prototype.$properties.$titleChoice = {
		$type: "application/x-choice",
		$isTitleHidden: true,
		$value: {
			$type: "application/x-string",
			$enum: [{
				$value: 1,
				$title: syra_local.aw_titleBlank
			}, {
				$value: 2,
				$title: syra_local.aw_titleHidden
			}]
		}
	};
	designer.$prototype.$properties.$titleLocalization = {
		$type: "application/x-choice",
		$value: {
			$type: "application/x-string",
			$enum: []
		}
	};
	designer.setLocalizeTitleItem = function(item) {
		var $titleChoice = (item.$item.$isTitleHidden || item.$item.$title == null) ? 2 : ((item.$item.$title == "-") ? 1 : 0);
		var $titleLocalization = {
			$isDisabled: ($titleChoice != 0)
		};
		if (item.isSection && this.designedArticle.page.isFusionPage && !$titleLocalization.$isDisabled) {
			$titleLocalization.$value = {
				$enum: _getTitleEnum(this, item.$item.$title)
			};
		}
		this.applyChange({
			$titleLocalization: item.$item.$title,
			$titleChoice: $titleChoice,
			$properties: {
				$titleLocalization: $titleLocalization,
				$titleChoice: {
					$isDisabled: item.isTabLayout == true
				}
			}
		});
	};
	_fillTitlesChoices(designer);
};