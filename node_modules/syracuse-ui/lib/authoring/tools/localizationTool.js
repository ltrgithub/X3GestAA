"use strict";
var helpers = require('syracuse-core/lib/helpers');

function LocalizationTool() {}

exports.LocalizationTool = helpers.defineClass(LocalizationTool, null, {
	load: function(designer, $stepSkin) {
		this.designer = designer;
		this.designer.$prototype.$properties.$titleChoice = {
			$type: "application/x-choice",
			$isTitleHidden: true,
			$value: {
				$type: "application/x-string",
				$enum: [{
					$value: 1,
					$title: syra_local.aw_titleBlank
				}, {
					$value: 2,
					$title: syra_local.aw_titleHidden
				}]
			}
		};
		this.designer.$prototype.$properties.$titleLocalization = {
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",
				$enum: []
			}
		};
		this.fillTitlesChoices();
	},
	onDesignerNotifyDataChange: function(designedItem, metaData, field, value) {
		switch (field.$item.$bind) {
			case "$titleChoice":
				var isTitleLocalizationDisabled = true;
				switch (value) {
					case 0:
						metaData.$isTitleHidden = false;
						if (this.designer.$prototype.$properties.$titleLocalization.$isHidden) {
							value = this.designer.selectedItemTitle;
						} else {
							isTitleLocalizationDisabled = false;
							value = designedItem.$item.$title;
							if (!value || value == "-") {
								value = this.designer.$prototype.$properties.$titleLocalization.$value.$enum[0].$value;
							}
							this.designer.applyChange({
								$titleLocalization: value
							});
						}
						metaData.$title = value;
						break;
					case 1:
						metaData.$title = "-";
						metaData.$isTitleHidden = false;
						break;
					case 2:
						metaData.$isTitleHidden = true;
						break;
				}
				this.designer.applyChange({
					$properties: {
						$titleLocalization: {
							$isDisabled: isTitleLocalizationDisabled
						}
					}
				});
				break;
			case "$titleLocalization":
				metaData.$title = value;
				break;
			default:
				return false;
		}
		return true;
	},
	fillTitlesChoices: function() {
		var $enum = [];
		var designedPage = this.designer.designedArticle.page;
		if (designedPage.$prototype.$localization) {
			if (designedPage.isFusionPage) {
				$enum = this._getTitleEnum();
			} else {
				var $keys = Object.keys(designedPage.$prototype.$localization);
				for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
					$enum.push({
						$value: "{" + $keys[ii] + "}",
						$title: designedPage.$prototype.$localization[$keys[ii]]
					});
				}
			}
		}
		this.designer.$prototype.$properties.$titleLocalization.$value.$enum = $enum;
		if ($enum.length) {
			this.designer.$prototype.$properties.$titleChoice.$value.$enum.unshift({
				$value: 0,
				$title: syra_local.aw_titleLocalization
			});
		} else {
			this.designer.$prototype.$properties.$titleChoice.$value.$enum.unshift({
				$value: 0,
				$title: syra_local.aw_titleVisible
			});
			this.designer.$prototype.$properties.$titleLocalization.$isHidden = true;
		}
	},
	setTitleItem: function(item) {
		var $titleChoice = (item.$item.$isTitleHidden || item.$item.$title == null) ? 2 : ((item.$item.$title == "-") ? 1 : 0);
		var $titleLocalization = {
			$isDisabled: ($titleChoice != 0)
		};
		if (item.isSection && this.designer.designedArticle.page.isFusionPage && !$titleLocalization.$isDisabled) {
			$titleLocalization.$value = {
				$enum: this._getTitleEnum(item.$item.$title)
			};
		}
		this.designer.applyChange({
			$titleLocalization: item.$item.$title,
			$titleChoice: $titleChoice,
			$properties: {
				$titleLocalization: $titleLocalization,
				$titleChoice: {
					$isDisabled: item.isTabLayout == true
				}
			}
		});
	},
	_getTitleEnum: function($title) {
		var designedPage = this.designer.designedArticle.page;
		var $enum = [];
		var $keys = Object.keys(designedPage.$prototype.$localization);
		var $definedTitles = this._getDefinedTitles(this.designer.designedArticle);
		for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
			var $key = "{" + $keys[ii] + "}";
			if (($key[2] == "B" || $key[2] == "S") && ($keys == $title || !$definedTitles[$key])) {
				$enum.push({
					$value: $key,
					$title: designedPage.$prototype.$localization[$keys[ii]]
				});
			}
		}
		return $enum;
	},
	_getDefinedTitles: function(section, $titles) {
		$titles = $titles || {};
		if (section.$item.$title) {
			$titles[section.$item.$title] = section.id;
		}
		if (section.childrenSection) {
			for (var ii = 0, jj = section.childrenSection.length; ii < jj; ii++) {
				var child = section.childrenSection[ii];
				if (child.isSection && !child.isMenuGroup) {
					this._getDefinedTitles(section.childrenSection[ii], $titles);
				}
			}
		}
		return $titles;
	},
	dispose: function() {
		this.designer = null;
	}
});