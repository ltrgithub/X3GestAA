"use strict";
var helpers = require('syracuse-core/lib/helpers');


function _addModelBtn($model, slot, isTextIcon) {
	var btn = syra_menus.addIconButton(syra_local["aw_model_" + $model] || syra_local.aw_model_default_title, "s-aw-template", "onTemplateClick");
	btn.syraModelType = "model_" + $model;
	btn.syraTemplate = $model;
	var img = document.createElement("div");
	img.className = "s-aw-template-icon";
	img.style.backgroundImage = "url('/syracuse-ui/themes/desktop/sage/images/authoring/s-template-" + $model + ".png')";
	btn.appendChild(img);
	if (isTextIcon) {
		var label = document.createElement("div");
		label.className = "s-aw-template-label";
		label.textContent = btn.title;
		btn.appendChild(label);
	} else {
		btn.className += " s-icon";
	}
	return slot.appendChild(btn);
}


function TemplatesTool() {}

exports.TemplatesTool = helpers.defineClass(TemplatesTool, null, {
	load: function(designer) {
		this.designer = designer;
		this.id = designer.id + "templatestool";
		syra_store.add(this);
		this._boxSlots = [];
	},
	dispose: function() {
		syra_store.remove(this);
		this.designer = this._boxSlots = null;
	},
	_applyArticleSmartModel: function(article) {
		var article = this.designer.getDesignedCardItem ? this.designer.getDesignedCardItem() : this.designer.designedArticle;
		var children = syra_site.layoutUpdater.extractItems(article.layoutContent);
		syra_site.layoutUpdater.clearContent(article.layoutContent);
		var prevLayout = article.layoutContent.domItem;
		article.$item.$layout = {
			$layoutType: "stack",
			$items: []
		};
		article.renderLayoutContent();
		syra_site.layoutUpdater.clearContent(article.layoutContent);
		if (children.length > 0) {
			article.layoutContent.ensureSection(children[0]);
			if (children.length > 1) {
				if (children.length > 2) {
					var tabs = article.layoutContent.loadChildItem(null, {
						$layoutType: "tabs",
						$items: []
					});
					for (var ii = 1, jj = children.length - 1; ii < jj; ii++) {
						tabs.ensureSection(children[ii]);
					}
				}
				article.layoutContent.ensureSection(children[children.length - 1]);
			}
		}
		children = article.layoutContent.getItems();
		for (var ii = 0, jj = children.length; ii < jj; ii++) {
			this.applySectionSmartModel(children[ii]);
		}
		syra_site.dom.removeChild(prevLayout);
	},
	applySectionSmartModel: function(section) {
		var layoutUpdater = syra_site.layoutUpdater;
		var children = layoutUpdater.extractItems(section.layoutContent);
		syra_site.layoutUpdater.clearContent(section.layoutContent);
		var prevLayout = section.layoutContent.domItem;
		if (children.length > 0) {
			var $rows = [];
			var colIndex = 0;
			for (var ii = 0, jj = children.length; ii < jj; ii++) {
				colIndex++;
				if (children[ii].isSection) {
					var subChildren = children[ii].layoutContent.getItems();
					if (subChildren && subChildren.length > 0) {
						if (subChildren[0].$field && subChildren[0].$field.$type == "application/x-array") {
							$rows.push({
								$layoutType: colIndex > 1 ? "row" : "stack",
								$items: []
							});
							colIndex = 1;
						}
					}
				} else {
					if (children[ii].$field && children[ii].$field.$type == "application/x-array") {
						if (colIndex > 1) {
							$rows.push({
								$layoutType: "row",
								$items: []
							});
						}
						$rows.push({
							$layoutType: "stack",
							$items: []
						});
						colIndex = 0;
					}
				}
				if (colIndex == 3) {
					$rows.push({
						$layoutType: "row",
						$items: []
					});
					colIndex = 0;
				}
			}
			if (colIndex) {
				$rows.push({
					$layoutType: colIndex > 1 ? "row" : "stack",
					$items: []
				});
			}
			if ($rows.length == 1) {
				section.$item.$layout = $rows[0];
				section.renderLayoutContent();
				section.layoutContent.removeSpaceBox(true);
				layoutUpdater.newLoadChildItems(section.layoutContent, children);
			} else {
				section.$item.$layout = {
					$layoutType: "stack",
					$items: $rows
				};
				section.renderLayoutContent();
				var rowIndex = colIndex = 0;
				for (var ii = 0, jj = children.length; ii < jj; ii++) {
					colIndex++;
					if (children[ii].isSection) {
						var subChildren = children[ii].layoutContent.getItems();
						if (subChildren && subChildren.length > 0) {
							if (subChildren[0].$field && subChildren[0].$field.$type == "application/x-array") {
								rowIndex++;
								colIndex = 1;
							}
						}
					} else {
						if (children[ii].$field && children[ii].$field.$type == "application/x-array") {
							if (colIndex > 1) {
								rowIndex++;
							}
							colIndex = 3;
						}
					}
					section.layoutContent.items[rowIndex].removeSpaceBox(true);
					section.layoutContent.items[rowIndex].loadChildItem(children[ii]);
					if (colIndex == 3) {
						rowIndex++;
						colIndex = 0;
					}
				}
			}
		}

		children = section.layoutContent.getItems();
		for (var ii = 0, jj = children.length; ii < jj; ii++) {
			if (children[ii].isSection) {
				this.applySectionSmartModel(children[ii]);
			}
		}
		syra_site.dom.removeChild(prevLayout);
	},
	applyCardListFactoryModel: function(list) {
		var list = this.designer.designedArticle.list || this.designer.designedArticle;
		if (list.$item.$format == "grid") {
			var $cardPosition = list.$item.$cardItem.$position;
			list.applyDesignMetaData({
				$cardPosition: "no"
			}, true);
			list.$item.$cardItem = list.defineDefaultCard();
			list.$item.$cardItem.$position = $cardPosition;
			if (list.$item.$cardItem.$position == "row") {
				list.cardDecorator.$rowFieldBinds = list.page.getDefinedFieldBinds(list.$item.$cardItem.$layout.$items);
			}
			list.applyDesignMetaData({
				$cardPosition: $cardPosition
			}, true);
		} else {
			list.$item.$layout = list.defineDefaultCard().$layout;
			this.designer.designedArticle.reloadLayout({
				$layout: list.defineDefaultCard().$layout
			});
		}
	},
	_applyPageFactoryModel: function(page) {
		var children = syra_site.layoutUpdater.extractItems(page.layoutContent);
		syra_site.layoutUpdater.clearContent(page.layoutContent);
		page.$item = helpers.object.clone(page.ensureDefaultArticle(page.$prototype.$article, page.$prototype), true);
		page.reloadLayout(page.$item);
	},
	_createLayout: function(section, $newLayout) {
		syra_site.layoutUpdater.clearContent(section.layoutContent);
		var prevLayout = section.layoutContent.domItem;
		section.$item.$layout = $newLayout;
		section.renderLayoutContent();
		section.layoutContent.removeSpaceBox(true);
		return prevLayout;
	},
	splitInColumns: function(section, children, maxCol) {
		children = children || syra_site.layoutUpdater.extractItems(section.layoutContent);
		var prevLayout = this._createLayout(section, {
			$layoutType: "row",
			$widths: syra_site.layoutValidator.getDefaultWidths(maxCol),
			$items: []
		});
		var row = 0,
			colIndex = 0;
		for (var ii = 0, jj = children.length; ii < jj; ii++) {
			if (!children[ii].disposed) {
				var layout;
				switch (row) {
					case 0:
						layout = section.layoutContent;
						break;
					case 1:
						layout = syra_site.layoutUpdater.wrapIntack(section.layoutContent, [section.layoutContent.items[colIndex]], colIndex);
						break;
					default:
						layout = section.layoutContent.items[colIndex];
						break;
				}
				colIndex++;
				layout.loadChildItem(children[ii]);
				if (colIndex == maxCol) {
					colIndex = 0;
					row++;
				}
			}
		}
		syra_site.dom.removeChild(prevLayout);
	},
	_applySectionColumnsModel: function(section, children, maxCols) {
		section.$item.$layout = {
			$layoutType: "row",
			$items: []
		};
		var width = Math.ceil(100 / maxCols);
		var widths = [];
		for (var ii = 0; ii < maxCols; ii++) {
			widths.push(width);
		}
		section.$item.$layout.$widths = widths.join(",");
		if (children.length > maxCols) {
			for (var ii = 0; ii < maxCols; ii++) {
				section.$item.$layout.$items.push({
					$layoutType: "stack",
					$items: []
				});
			}
		}
		section.renderLayoutContent();
		if (children.length > maxCols) {
			var colIndex = 0;
			for (var ii = 0, jj = children.length; ii < jj; ii++) {
				section.layoutContent.items[colIndex++].loadChildItem(children[ii]);
				if (colIndex == maxCols) {
					colIndex = 0;
				}
			}
		} else {
			syra_site.layoutUpdater.clearContent(section.layoutContent);
			syra_site.layoutUpdater.newLoadChildItems(section.layoutContent, children);
		}
	},
	applySectionModel: function(section, $model) {
		var children = syra_site.layoutUpdater.extractItems(section.layoutContent);
		var prevLayout = section.layoutContent.domItem;
		syra_site.layoutUpdater.clearContent(section.layoutContent);
		switch ($model) {
			case "model_rows":
				section.$item.$layout = {
					$layoutType: "stack",
					$items: []
				};
				section.renderLayoutContent();
				syra_site.layoutUpdater.newLoadChildItems(section.layoutContent, children);
				break;
			case "model_3cols":
				this._applySectionColumnsModel(section, children, 3);
				break;
			case "model_4cols":
				this._applySectionColumnsModel(section, children, 4);
				break;
			case "model_tabs":
				section.$item.$layout = {
					$layoutType: "tabs",
					$items: []
				};
				section.renderLayoutContent();
				syra_site.layoutUpdater.clearContent(section.layoutContent);
				for (var ii = 0, jj = children.length; ii < jj; ii++) {
					section.layoutContent.ensureSection(children[ii]);
				}
				break;
		}
		syra_site.dom.removeChild(prevLayout);
	},
	addLandingPageModels: function(section, designedItem) {
		this.countTemplates = {
			2: ["2-1", "2-2"],
			3: ["3-1", "3-2", "3-3", "3-4"],
			4: ["4-1", "4-2", "4-3"],
			5: ["5-1", "5-2", "5-3"],
			6: ["6-1", "6-2"]
		};
		this.defaultTemplates = ["rows", "3cols", "4cols", "mixt"];
		var colCount = designedItem.layoutContent.getColumnsCount();
		var fields = designedItem.layoutContent.getFields();
		syra_site.dom.empty(section.dataStore.modelSlot);
		if (!section.dataStore.modelSlot.syraTool) {
			this._setSyraBoxSlot(section.dataStore.modelSlot);
		}
		var count = fields.length;
		if (count > 1) {
			var field = document.createElement("div");
			field.className = "s-aw-prop s-field";
			var slot = document.createElement("div");
			slot.className = "s-aw-prop s-field-title";
			slot.textContent = syra_local.ldpTemplate;
			field.appendChild(slot);
			slot = document.createElement("div");
			slot.className = "s-aw-prop s-field-core";
			field.appendChild(slot);
			var templates = this.countTemplates[count] || this.defaultTemplates;
			var row = document.createElement("div");
			row.className = "s-aw-template-row";
			for (var ii = 0, jj = templates.length; ii < jj; ii++) {
				_addModelBtn(templates[ii], row).syraFieldsCount = count;
			}
			slot.appendChild(row);
			section.dataStore.modelSlot.appendChild(field);
		}
	},
	_setSyraBoxSlot: function(slot) {
		this._boxSlots.push(slot);
		slot.syraTool = this.designer.id;
		slot.syraarticle = this.designer.id;
		return slot;
	},
	addPageModelLinks: function(section, designedItem, colCount) {
		section.dataStore = section.dataStore || {};
		if (!section.dataStore.modelSlot) {
			section.dataStore.modelSlot = this._setSyraBoxSlot(document.createElement("div"));
			section.body.appendChild(section.dataStore.modelSlot);
		}
		syra_site.dom.empty(section.dataStore.modelSlot);
		if (!designedItem.isField) {
			if (designedItem.$designLevel == "article") {
				var slot = document.createElement("div");
				slot.className = "s-aw-template-row";
				_addModelBtn("smart", slot, true);
				_addModelBtn("factory", slot, true);
				section.dataStore.modelSlot.appendChild(slot);
			}
			var slot = document.createElement("div");
			slot.className = "s-aw-template-row";
			if (designedItem.$designLevel == "article" || designedItem.$designLevel == "section") {
				_addModelBtn("tabs", slot);
			}
			_addModelBtn("rows", slot);
			_addModelBtn("3cols", slot);
			_addModelBtn("4cols", slot);
			_addModelBtn("mixt", slot);
			section.dataStore.modelSlot.appendChild(slot);
		}
		this.addColsCountButtons(section, designedItem, colCount, 6);
	},
	addColsCountButtons: function(section, designedItem, colCount, max) {
		section.dataStore = section.dataStore || {};
		if (!section.dataStore.colChoices) {
			section.dataStore.colChoices = {};
			var row = document.createElement("div");
			row.className = "s-aw-cols";
			var cell = document.createElement("div");
			cell.className = "s-aw-cols-label";
			cell.textContent = syra_local.aw_columns;
			row.appendChild(cell);
			for (var ii = 1; ii <= max; ii++) {
				var btn = syra_menus.addTextButton(ii, "", "onTemplateClick");
				btn.$syraColCount = ii;
				btn.syraModelType = "colcount";
				row.appendChild(section.dataStore.colChoices[ii] = btn);
			}
			section.body.appendChild(this._setSyraBoxSlot(row));
		}
		this.selectColChoice(section, designedItem, colCount);
	},
	selectColChoice: function(section, designedItem, colCount) {
		var css = "s-aw-cols-link " + (designedItem.$designLevel == "field" ? "" : "s-aw-row-box");
		var keys = Object.keys(section.dataStore.colChoices);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			section.dataStore.colChoices[keys[ii]].className = css + (colCount == keys[ii] ? " s-selected" : "");
		}
	},
	fillTabChoice: function(section, designedItem) {
		var title = syra_local.aw_showAs;
		var value = designedItem.isTabLayout ? "tabs" : "stack";
		var isLinkDisabled = false;
		var btnTypes = ["tabs", "stack"];
		section.dataStore = section.dataStore || {};

		if (!section.dataStore.tabChoice) {
			section.dataStore.tabChoice = {};
			var row = document.createElement("div");
			row.className = "s-aw-tab-choices";
			var cell = document.createElement("div");
			cell.className = "s-aw-tab-choices-label";
			section.dataStore.tabChoice.label = cell;
			row.appendChild(cell);

			for (var ii = 0, jj = btnTypes.length; ii < jj; ii++) {
				var $syraValue = btnTypes[ii];
				var btn = syra_menus.addIconButton(syra_local["aw_section_" + $syraValue], "s-aw-tab-choice", "onTemplateClick");
				section.dataStore.tabChoice[btn.$syraValue = $syraValue] = btn;
				btn.syraModelType = "modelTab";
				var img = document.createElement("div");
				img.className = "s-aw-tab-choice-icon";
				img.style.backgroundImage = "url('/syracuse-ui/themes/desktop/sage/images/authoring/s-layout-" + btn.$syraValue + ".png')";
				btn.appendChild(img);
				row.appendChild(btn);
			}
			section.body.appendChild(this._setSyraBoxSlot(row));
		}

		section.dataStore.tabChoice.label.textContent = title;
		for (var ii = 0, jj = btnTypes.length; ii < jj; ii++) {
			var link = section.dataStore.tabChoice[btnTypes[ii]];
			link.className = "s-aw-tab-choice" + (value == btnTypes[ii] ? " s-selected" : "");
			syra_site.dom.disableItem(link, isLinkDisabled);
		}
	},
	onTemplateClick: function(event, btn) {
		var selectItem;
		var designedItem = this.designer.designedItem;
		var awLayout = this.designer.awLayout;
		if (btn.syraFieldsCount) {
			selectItem = this.designer.designedArticle.layoutContent.getOpenedTab();
			var funcName;
			var templates = this.countTemplates[btn.syraFieldsCount];
			if (templates) {
				funcName = btn.syraFieldsCount;
			} else {
				templates = this.defaultTemplates;
				funcName = btn.syraTemplate;
			}
			var fields = selectItem.layoutContent.getFields();
			syra_site.layoutUpdater.extractItems(selectItem.layoutContent, fields);
			this["build_" + funcName](selectItem, btn.syraTemplate, fields);
		}
		if (!selectItem) {
			switch (btn.syraModelType) {
				case "modelTab":
					if (designedItem.layoutParent.$layoutType != btn.$syraValue) {
						if (designedItem.layoutParent.items.length == 1) {
							syra_site.layoutUpdater.convertToNewLayout(designedItem.layoutParent, {
								$layoutType: btn.$syraValue
							});
						} else {
							var layoutRoot = designedItem.layoutParent;
							if (btn.$syraValue != "stack") {
								var layoutTab = syra_site.layoutUpdater.wrapIntack(layoutRoot, [designedItem], layoutRoot.$layout.$items.indexOf(designedItem.$item));
								syra_site.layoutUpdater.convertToNewLayout(layoutTab, {
									$layoutType: "tabs"
								});
							}
						}
						selectItem = designedItem;
					}
					break;
				case "colcount":
					selectItem = this.convertByColumns(btn, designedItem, awLayout);
					break;
				case "model_smart":
					this._applyArticleSmartModel();
					selectItem = designedItem;
					break;
				case "model_factory":
					if (this.designer.designedArticle.page == this.designer.designedArticle) {
						this._applyPageFactoryModel(this.designer.designedArticle);
					} else {
						this.applyCardListFactoryModel();
					}
					selectItem = designedItem;
					break;
				case "model_3cols":
					var item = this.designer.getDesignedCardItem ? this.designer.getDesignedCardItem() : designedItem;
					this.splitInColumns(item, null, 3);
					selectItem = designedItem;
					break;
				case "model_4cols":
					var item = this.designer.getDesignedCardItem ? this.designer.getDesignedCardItem() : designedItem;
					this.splitInColumns(item, null, 4);
					selectItem = designedItem;
					break;
				case "model_mixt":
					var item = this.designer.getDesignedCardItem ? this.designer.getDesignedCardItem() : designedItem;
					this.build_mixt(item);
					selectItem = designedItem;
					break;
				default:
					if (btn.syraModelType.indexOf("model_") == 0) {
						var item = this.designer.getDesignedCardItem ? this.designer.getDesignedCardItem() : designedItem;
						this.applySectionModel(item, btn.syraModelType);
						selectItem = designedItem;
					}
					break;
			}
		}
		if (selectItem) {
			this.designer.endArticleUpdate(selectItem, true);
		}
	},
	convertByColumns: function(btn, designedItem, awLayout) {
		var layout = awLayout ? awLayout : designedItem.layoutContent;
		if (designedItem.$designLevel == "field") {
			layout = syra_site.layoutUpdater.wrapIntack(designedItem.layoutParent, [designedItem], designedItem.layoutParent.items.indexOf(designedItem));
			layout.removeSpaceBox(true);
			awLayout = layout;
		}
		var $widths = ["100", "50,50", "33,33,33", "25,25,25,25", "20,20,20,20,20", "17,17,16,16,17,17"][btn.$syraColCount - 1];
		syra_site.layoutUpdater.convertToNewLayout(layout, {
			$layoutType: $widths == "100" ? "stack" : "row",
			$widths: $widths
		});
		return awLayout ? awLayout : designedItem.layoutContent;
	},
	build_2: function(designedItem, template, fields) {
		var prevLayout = this._createLayout(designedItem, (template == "2-1") ? {
			$layoutType: "stack",
			$items: []
		} : {
			$layoutType: "row",
			$widths: "50,50",
			$items: []
		});
		syra_site.layoutUpdater.newLoadChildItems(designedItem.layoutContent, fields);
		syra_site.dom.removeChild(prevLayout);
	},
	build_3: function(designedItem, template, fields) {
		var prevLayout;
		var layoutUpdater = syra_site.layoutUpdater;
		switch (template) {
			case "3-1":
				prevLayout = this._createLayout(designedItem, {
					$layoutType: "stack",
					$items: [{
						$layoutType: "row",
						$widths: "50,50",
						$items: []
					}]
				});
				designedItem.layoutContent.items[0].removeSpaceBox(true);
				layoutUpdater.newLoadChildItems(designedItem.layoutContent.items[0], fields.splice(0, 2));
				layoutUpdater.newLoadChildItems(designedItem.layoutContent, fields);
				break;
			case "3-2":
				prevLayout = this._createLayout(designedItem, {
					$layoutType: "row",
					$widths: "50,50",
					$items: []
				});
				layoutUpdater.newLoadChildItems(designedItem.layoutContent.loadChildItem(null, {
					$layoutType: "stack",
					$items: []
				}), fields.splice(0, 2));
				layoutUpdater.newLoadChildItems(designedItem.layoutContent, fields);
				break;
			case "3-3":
				prevLayout = this._createLayout(designedItem, {
					$layoutType: "row",
					$widths: "50,50",
					$items: []
				});
				layoutUpdater.newLoadChildItems(designedItem.layoutContent, fields.splice(0, 1));
				layoutUpdater.newLoadChildItems(designedItem.layoutContent.loadChildItem(null, {
					$layoutType: "stack",
					$items: []
				}), fields);
				break;
			case "3-4":
				prevLayout = this._createLayout(designedItem, {
					$layoutType: "stack",
					$items: []
				});
				layoutUpdater.newLoadChildItems(designedItem.layoutContent, fields.splice(0, 1));
				var row = designedItem.layoutContent.loadChildItem(null, {
					$layoutType: "row",
					$widths: "50,50",
					$items: []
				});
				row.removeSpaceBox(true);
				layoutUpdater.newLoadChildItems(row, fields);
				break;
		}
		syra_site.dom.removeChild(prevLayout);
	},
	build_4: function(designedItem, template, fields) {
		var prevLayout;
		var layoutUpdater = syra_site.layoutUpdater;
		switch (template) {
			case "4-1":
				prevLayout = this._createLayout(designedItem, {
					$layoutType: "stack",
					$items: [{
						$layoutType: "row",
						$widths: "50,50",
						$items: []
					}, {
						$layoutType: "row",
						$widths: "50,50",
						$items: []
					}]
				});
				var row = designedItem.layoutContent.items[0];
				row.removeSpaceBox(true);
				layoutUpdater.newLoadChildItems(row, fields.splice(0, 2));
				row = designedItem.layoutContent.items[1];
				row.removeSpaceBox(true);
				layoutUpdater.newLoadChildItems(row, fields);
				break;
			case "4-2":
				prevLayout = this._createLayout(designedItem, {
					$layoutType: "stack",
					$items: []
				});
				layoutUpdater.newLoadChildItems(designedItem.layoutContent, fields.splice(0, 1));
				var row = designedItem.layoutContent.loadChildItem(null, {
					$layoutType: "row",
					$widths: "33,33,33",
					$items: []
				});
				row.removeSpaceBox(true);
				layoutUpdater.newLoadChildItems(row, fields);
				break;
			case "4-3":
				prevLayout = this._createLayout(designedItem, {
					$layoutType: "stack",
					$items: [{
						$layoutType: "row",
						$widths: "33,33,33",
						$items: []
					}]
				});
				var row = designedItem.layoutContent.items[0];
				row.removeSpaceBox(true);
				layoutUpdater.newLoadChildItems(row, fields.splice(0, 3));
				layoutUpdater.newLoadChildItems(designedItem.layoutContent, fields);
				break;

		}
		syra_site.dom.removeChild(prevLayout);
	},
	build_5: function(designedItem, template, fields) {
		var prevLayout;
		var layoutUpdater = syra_site.layoutUpdater;
		switch (template) {
			case "5-1":
				prevLayout = this._createLayout(designedItem, {
					$layoutType: "row",
					$widths: "50,50",
					$items: [{
						$layoutType: "stack",
						$items: []
					}, {
						$layoutType: "stack",
						$items: []
					}]
				});
				layoutUpdater.newLoadChildItems(designedItem.layoutContent.items[0], fields.splice(0, 2));
				layoutUpdater.newLoadChildItems(designedItem.layoutContent.items[1], fields);
				break;
			case "5-2":
				prevLayout = this._createLayout(designedItem, {
					$layoutType: "stack",
					$items: [{
						$layoutType: "row",
						$widths: "33,33,33",
						$items: []
					}, {
						$layoutType: "row",
						$widths: "50,50",
						$items: []
					}]
				});
				var row = designedItem.layoutContent.items[0];
				row.removeSpaceBox(true);
				layoutUpdater.newLoadChildItems(row, fields.splice(0, 3));
				row = designedItem.layoutContent.items[1];
				row.removeSpaceBox(true);
				layoutUpdater.newLoadChildItems(row, fields);
				break;
			case "5-3":
				prevLayout = this._createLayout(designedItem, {
					$layoutType: "stack",
					$items: []
				});
				layoutUpdater.newLoadChildItems(designedItem.layoutContent, fields.splice(0, 1));
				var row = designedItem.layoutContent.loadChildItem(null, {
					$layoutType: "row",
					$widths: "50,50",
					$items: []
				});
				row.removeSpaceBox(true);
				layoutUpdater.newLoadChildItems(row, fields.splice(0, 2));
				var row = designedItem.layoutContent.loadChildItem(null, {
					$layoutType: "row",
					$widths: "50,50",
					$items: []
				});
				row.removeSpaceBox(true);
				layoutUpdater.newLoadChildItems(row, fields);
				break;

		}
		syra_site.dom.removeChild(prevLayout);
	},
	build_6: function(designedItem, template, fields) {
		var prevLayout;
		switch (template) {
			case "6-1":
				prevLayout = this._createLayout(designedItem, {
					$layoutType: "stack",
					$items: [{
						$layoutType: "row",
						$widths: "50,50",
						$items: []
					}, {
						$layoutType: "row",
						$widths: "50,50",
						$items: []
					}, {
						$layoutType: "row",
						$widths: "50,50",
						$items: []
					}]
				});
				var row = designedItem.layoutContent.items[0];
				row.removeSpaceBox(true);
				syra_site.layoutUpdater.newLoadChildItems(row, fields.splice(0, 2));
				row = designedItem.layoutContent.items[1];
				row.removeSpaceBox(true);
				syra_site.layoutUpdater.newLoadChildItems(row, fields.splice(0, 2));
				row = designedItem.layoutContent.items[2];
				row.removeSpaceBox(true);
				syra_site.layoutUpdater.newLoadChildItems(row, fields.splice(0, 2));
				break;
			case "6-2":
				prevLayout = this._createLayout(designedItem, {
					$layoutType: "stack",
					$items: [{
						$layoutType: "row",
						$widths: "33,33,33",
						$items: []
					}, {
						$layoutType: "row",
						$widths: "33,33,33",
						$items: []
					}]
				});
				var row = designedItem.layoutContent.items[0];
				row.removeSpaceBox(true);
				syra_site.layoutUpdater.newLoadChildItems(row, fields.splice(0, 3));
				row = designedItem.layoutContent.items[1];
				row.removeSpaceBox(true);
				syra_site.layoutUpdater.newLoadChildItems(row, fields.splice(0, 3));
				break;

		}
		syra_site.dom.removeChild(prevLayout);
	},
	build_rows: function(designedItem, template, fields) {
		syra_site.dom.removeChild(prevLayout);
	},
	build_3cols: function(designedItem, template, fields) {
		this.splitInColumns(designedItem, fields, 3);
	},
	build_4cols: function(designedItem, template, fields) {
		this.splitInColumns(designedItem, fields, 4);
	},
	build_mixt: function(section, template, children) {
		children = children || syra_site.layoutUpdater.extractItems(section.layoutContent);
		var prevLayout = section.layoutContent.domItem;
		syra_site.layoutUpdater.clearContent(section.layoutContent);
		section.$item.$layout = {
			$layoutType: "row",
			$widths: "50,50",
			$items: []
		};
		section.renderLayoutContent();
		syra_site.layoutUpdater.clearContent(section.layoutContent);
		if (children.length) {
			section.layoutContent.loadChildItem(children[0]);
			if (children.length > 2) {
				syra_site.layoutUpdater.newLoadChildItems(section.layoutContent.loadChildItem(null, {
					$layoutType: "stack",
					$items: []
				}), children, 1);
			} else {
				if (children.length == 2) {
					section.layoutContent.loadChildItem(children[1]);
				}
			}
		}
		syra_site.dom.removeChild(prevLayout);
	}
});