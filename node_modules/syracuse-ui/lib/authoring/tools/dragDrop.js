"use strict";
var helpers = require('syracuse-core/lib/helpers');

function DragDrop() {}

exports.DragDrop = helpers.defineClass(DragDrop, null, {
	start: function(designer, $$boundary) {
		var self = this;
		self.designer = designer;
		self.isDragAuthoring = true;
		self.dropItem = document.site.requestedDDAuthoringItem;
		if (self.dropItem.isLayout) {
			self.dropItem.setChildAuhtoringLevel();
		}
		self.toggleDraggedCss(true);
		delete document.site.requestedDDAuthoringItem;
		self.boundary = $$boundary.offset();
		self.boundary.$$boundary = $$boundary;
		self.boundary.height = $$boundary.height();
		self.boundary.width = $$boundary.width();
		self.boundary.scrollWidth = $$boundary[0].scrollWidth;
		self.boundary.scrollHeight = $$boundary[0].scrollHeight;
		self.boundary.right = self.boundary.left + self.boundary.width;
		self.boundary.bottom = self.boundary.top + self.boundary.height;
		$(document).bind("mouseup.syradragdrop", function(event) {
			if (self.targetItem) {
				self.toggleDraggedCss(false);
				if (self.dropItem) {
					var targetItem = self.targetItem;
					var enable = true;
					if (targetItem.layoutParent && targetItem.layoutParent.isRow) {
						enable = !(targetItem.layoutParent.items.length > 5 && ((self.$drag.$insertAt == "left" || self.$drag.$insertAt == "right") && !targetItem.isSpaceBox));
					}
					if (enable) {
						if (self.$drag.isTab && (self.$drag.isTabBody || (self.$drag.$insertAt == "bottom" || self.$drag.$insertAt == "top"))) {
							targetItem = targetItem.layoutParent;
						}
						var newChild = targetItem.articleParent.page.onAddNewItem(targetItem.articleParent, targetItem, self.dropItem, self.$drag.$insertAt);
						self.designer.endTargetPageUpdate(newChild, true);
					}
				}
			}
			self.stop();
			document.site.setDragDropInstance();
		}).bind("mousemove.syradragdrop", function(event) {
			if (!event.target || event.target) {
				if (event.target && event.target.className && event.target.className.indexOf) {
					if (event.target.className.indexOf("s-aw-drop-cue") < 0) {
						self.moveDragImage(event, null, true);
					}
				} else {
					self.moveDragImage(event, null, true);
				}

			}
			event.preventDefault();
		});
	},
	validateDropTarget: function(event, targetItem) {
		if (targetItem && targetItem.$awAddNewItem) {
			return false;
		}
		var isDropEnabled = (targetItem && this.targetItem && (targetItem == this.targetItem));
		if (!isDropEnabled) {
			if (this.dropItem) {
				if (this.dropItem != targetItem) {
					if (event.target.$syraSep == "stack" && this.targetItem && this.targetItem != targetItem) {
						if (targetItem == this.targetItem.boxParent || targetItem == this.targetItem.layoutParent) {
							return true;
						}
					}
					if (this.dropItem.isLayout) {
						if (this.dropItem.boxParent == targetItem.boxParent) {
							var layoutParent = targetItem.layoutParent;
							while (layoutParent) {
								if (this.dropItem == layoutParent) {
									return false;
								}
								layoutParent = layoutParent.layoutParent;
							}
							isDropEnabled = true;
						}
					} else {
						if (this.dropItem.$designLevel != "field") {
							var boxParent = targetItem.boxParent;
							while (boxParent) {
								if (this.dropItem == boxParent) {
									return false;
								}
								boxParent = boxParent.boxParent;
							}
						}
						if (this.dropItem.$designLevel == "field") {
							isDropEnabled = true;
						} else {
							//section
							if (targetItem.$designLevel == "field") {
								if (!this.dropItem.$awAddNewItem) {
									var sourceBox = this.dropItem;
									while (sourceBox && sourceBox != targetItem.boxParent) {
										sourceBox = sourceBox.boxParent;
									}
									if (!sourceBox) {
										this.infoText = this.designer.designerLocalize.dd_moveFields;
										isDropEnabled = true;
									}
								} else {
									if (this.dropItem.$fieldBind) {
										isDropEnabled = true;
									}
								}
							} else {
								isDropEnabled = true;
							}
						}
					}

					if (isDropEnabled) {
						this.targetInfoTitle = targetItem.isRow ? "row" : (targetItem.getTitle ? targetItem.getTitle(true) : "");
						this.infoText = (this.dropItem.$awAddNewItem) ? "dd_addItem_" : "dd_moveItem_";
						this._ensureDragImage();
						this.infoDropTitle = this.getDropItemTitle(this.dropItem);
					}
				}
			}
			if (isDropEnabled) {
				if (this.targetItem != targetItem) {
					this.toggleDropArea(this.targetItem);
				}
				this.targetItem = targetItem;
			}
		}
		return isDropEnabled;
	},
	calculatePanelDropCue: function(event, targetItem) {
		var $position = null;
		var $$target = targetItem.layoutSlot ? $(targetItem.layoutSlot) : targetItem.$$item;
		var offset = $$target.offset();
		this.$drag = {
			left: offset.left,
			top: offset.top,
			width: $$target.outerWidth(),
			height: $$target.outerHeight()
		};
		this.$drag.right = this.$drag.left + this.$drag.width;
		//calculateDropBoundary
		var xmargin = (this.$drag.width * 0.25);
		var ymargin = (this.$drag.height * 0.25);
		var $dropBoundary = {
			left: this.$drag.left + xmargin,
			right: this.$drag.left + this.$drag.width - xmargin,
			top: this.$drag.top + ymargin,
			bottom: this.$drag.top + this.$drag.height - ymargin
		};
		$position = {
			top: this.$drag.top,
			left: this.$drag.left
		};
		var isLeft = ((event.pageX > this.$drag.left) && (event.pageX < (this.$drag.left + (this.$drag.width * 0.2))));
		var isRight = ((event.pageX < this.$drag.right) && (event.pageX > (this.$drag.right - (this.$drag.width * 0.2))));
		if (event.target.className.indexOf("s-aw-slot-sep-row") >= 0) {
			isRight = true;
		}
		if (isLeft || isRight) {
			this.$drag.$insertAt = isRight ? "right" : "left";
			$position.top -= 3;
			$position.left = this.$drag.left + (isRight ? (this.$drag.width) : (-3));
			$position.width = "0.3em";
			$position.height = this.$drag.height + 6 + "px";
		} else {
			var isBottom = event.pageY >= $dropBoundary.bottom;
			this.$drag.$insertAt = isBottom ? "bottom" : "top";
			$position.top = this.$drag.top + (isBottom ? this.$drag.height : 0);
			$position.height = "0.3em";
			$position.width = this.$drag.width + "px";
		}
		return $position;
	},
	calculateTabDropCue: function(event, targetItem) {
		var $position = null;
		var offsetTabsSlot = targetItem.layoutParent.$$item.offset();
		if (event.target == targetItem._body) {
			this.$drag = {
				isTabBody: true,
				left: offsetTabsSlot.left,
				top: offsetTabsSlot.top,
				width: targetItem.layoutParent.$$item.outerWidth(),
				height: targetItem.layoutParent.$$item.outerHeight()
			};
		} else {
			var $$target = $(targetItem.tabTitle);
			var offset = $$target.offset();
			this.$drag = {
				isTabTitle: true,
				left: offset.left,
				top: offset.top,
				width: $$target.outerWidth(),
				height: $$target.outerHeight()
			};
		}
		this.$drag.isTab = true;
		this.$drag.right = this.$drag.left + this.$drag.width;
		//calculateDropBoundary
		var xmargin = (this.$drag.width * 0.25);
		var ymargin = (this.$drag.height * 0.25);
		var $dropBoundary = {
			left: this.$drag.left + xmargin,
			right: this.$drag.left + this.$drag.width - xmargin,
			top: this.$drag.top + ymargin,
			bottom: this.$drag.top + this.$drag.height - ymargin
		};
		$position = {
			top: this.$drag.top,
			left: this.$drag.left
		};
		var isLeft = ((event.pageX > this.$drag.left) && (event.pageX < (this.$drag.left + (this.$drag.width * 0.2))));
		var isRight = ((event.pageX < this.$drag.right) && (event.pageX > (this.$drag.right - (this.$drag.width * 0.2))));
		if (event.target.className.indexOf("s-aw-slot-sep-row") >= 0) {
			isRight = true;
		}
		if (isLeft || isRight) {
			this.$drag.$insertAt = isRight ? "right" : "left";
			$position.top -= 3;
			$position.left = this.$drag.left + (isRight ? (this.$drag.width) : (-3));
			$position.width = "0.3em";
			$position.height = this.$drag.height + 6 + "px";
		} else {
			var isBottom = event.pageY >= $dropBoundary.bottom;
			this.$drag.$insertAt = isBottom ? "bottom" : "top";
			$position.top = this.$drag.top + (isBottom ? this.$drag.height : 0);
			$position.height = "0.3em";
			$position.width = this.$drag.width + "px";
		}
		return $position;
	},
	_ensureDragImage: function() {
		if (!this._info) {
			this._info = document.createElement("div");
			this._info.style.display = "none";
			this._info.className = "s-aw-drag-info";
			this._infoDropType = document.createElement("div");
			this._infoDropType.className = "s-aw-drag-info-type";
			this._infoLabel = document.createElement("div");
			this._infoLabel.className = "s-aw-drag-info-label";
			this._info.appendChild(this._infoDropType);
			this._info.appendChild(this._infoLabel);
			document.site.layoutSlot.appendChild(this._info);
			this._infoDropType.textContent = this.dropItem.$field ? document.site.getFieldIconType(this.dropItem.$field.$type) : "";
			this._infoLabel.textContent = this.getDropItemTitle(this.dropItem);
		}
	},
	getDropItemTitle: function(dropItem) {
		var title = dropItem.$awAddNewItem ? dropItem.$title : dropItem.getTitle();
		if (!title) {
			title = this.designer.designerLocalize[dropItem.isLayout ? "aw_rowLayout" : "aw_" + dropItem.$designLevel];
		}
		return title;
	},

	autoScroll: function(event) {
		var step = 40,
			margin = 80;
		if (event.pageY > (this.boundary.bottom - margin)) {
			var scrollTop = this.boundary.$$boundary.scrollTop();
			if (scrollTop < (this.boundary.scrollHeight - this.boundary.height)) {
				this.boundary.$$boundary.scrollTop(Math.min(scrollTop + step, this.boundary.scrollHeight - this.boundary.height));
			}
		} else {
			if (event.pageY < (this.boundary.top + margin)) {
				var scrollTop = this.boundary.$$boundary.scrollTop();
				this.boundary.$$boundary.scrollTop(Math.max(scrollTop - step, 0));
			}
		}
		if (event.pageX > (this.boundary.right - margin)) {
			var scrollLeft = this.boundary.$$boundary.scrollLeft();
			if (scrollLeft < (this.boundary.scrollWidth - this.boundary.width)) {
				this.boundary.$$boundary.scrollLeft(Math.min(scrollLeft + step, this.boundary.scrollWidth - this.boundary.width));
			}
		} else {
			if (event.pageX < (this.boundary.left + margin)) {
				var scrollLeft = this.boundary.$$boundary.scrollLeft();
				this.boundary.$$boundary.scrollLeft(Math.max(scrollLeft - step, 0));
			}
		}
	},
	moveDragImage: function(event, targetItem, isOut) {
		this.isDropEnabled = false;
		if (!isOut && targetItem) {
			this.isDropEnabled = this.validateDropTarget(event, targetItem);
			if (this.isDropEnabled) {
				this.targetItem = null;
				this.validateDropTarget(event, targetItem);
			}
		}
		this.autoScroll(event);
		var top = Math.max(event.pageY, this.boundary.top);
		var left = Math.max(event.pageX, this.boundary.left);
		top = Math.min(top, this.boundary.bottom);
		left = Math.min(left, this.boundary.right);

		var inBoundary = (event.pageX == left && event.pageY == top);
		this._ensureDragImage();
		if (this.isDropEnabled) {
			this._info.className = "s-aw-drag-info-" + this.dropItem.$designLevel;
			var $position = null;
			if (event.target && event.target.className && event.target.className.indexOf) {
				if (this.targetItem.layoutParent || this.targetItem.isLayout) {
					$position = this.targetItem.tabTitle ? this.calculateTabDropCue(event, this.targetItem) : this.calculatePanelDropCue(event, this.targetItem);
					if ($position) {
						if (!this._dropCue) {
							this._dropCue = document.createElement("div");
							this._dropCue.className = "s-aw-drop-cue";
							document.site.layoutSlot.appendChild(this._dropCue);
						}
						var css;
						if (!this.dropItem.isLayout) {
							if (this.targetItem.isLayout) {
								if (!this.targetItem.$chilAuthoringLevel) {
									this.targetItem.setChildAuhtoringLevel();
								}
								css = this.targetItem.$chilAuthoringLevel;
							} else {
								css = this.targetItem.$designLevel;
							}
						} else {
							css = this.dropItem.$designLevel;
						}

						this._dropCue.className = "s-aw-drop-cue s-aw-drop-cue-" + css;

						var style = this._dropCue.style;
						style.display = "none";
						style.top = $position.top + "px";
						style.left = $position.left + "px";
						style.width = $position.width;
						style.height = $position.height;
						if (this.targetItem && this.targetItem.isSpaceBox) {
							this.toggleDropArea(this.targetItem, this.dropItem);
						} else {
							style.display = "block";
						}
						var text = this.designer.designerLocalize[this.infoText + this.$drag.$insertAt] || "";
						this._infoLabel.textContent = text.replace("{0}", this.infoDropTitle).replace("{1}", this.targetInfoTitle);
					}
				}
			}
		} else {
			if (isOut) {
				var title, localText = this.designer.designerLocalize.dd_nodrop;
				if (this.dropItem.$awAddNewItem) {
					title = this.dropItem.$title;
				} else {
					title = this.dropItem.getTitle();
				}
				if (!title) {
					title = this.designer.designerLocalize["aw_" + this.dropItem.$designLevel];
				}
				this._infoLabel.textContent = localText + "  " + title;
			}
			this._info.className = "s-aw-drag-info";
			this.toggleDropArea(this.targetItem);
			this.targetItem = null;
			if (this._dropCue) {
				this._dropCue.style.display = "none";
			}
		}
		this._info.style.top = top + 15 + "px";
		this._info.style.left = left + 15 + "px";
		this._info.style.display = "";
	},
	stop: function() {
		delete document.site.requestedDDAuthoringItem;
		this.designer = null;
		document.controller.disposeObject(this);
	},
	toggleDraggedCss: function(show) {
		if (this.dropItem && this.dropItem.$$item) {
			document.site.toggleClass(this.dropItem.$$item[0], "s-aw-dragged", show);
		}
	},
	toggleDropArea: function(targetItem, dropItem) {
		if (targetItem && targetItem.isSpaceBox) {
			if (targetItem.deleteLink) {
				targetItem.deleteLink.style.display = dropItem ? "none" : "";
			}
			if (dropItem) {
				if (!targetItem.dropArea) {
					targetItem.dropArea = document.createElement("div");
					targetItem.dropArea.className = "s-aw-drop-area-" + dropItem.$designLevel;
					targetItem.dropArea.textContent = this.designer.designerLocalize["aw_drop_" + dropItem.$designLevel];
					targetItem._body.appendChild(targetItem.dropArea);
				}
			} else {
				if (targetItem.dropArea) {
					document.site.removeDomChild(targetItem.dropArea);
					targetItem.dropArea = null;
				}
			}
		}
	},
	dispose: function() {
		$(document).unbind('.syradragdrop');
		this.toggleDraggedCss(false);
		delete this.targetItem;
		if (this.boundary) {
			this.boundary.$$boundary = null;
		}
		document.site.removeDomChild(this._info);
		document.site.removeDomChild(this._dropCue);
		this.designer = this.dropItem = this.boundary = this._info = this._dropCue = null;
	}
});