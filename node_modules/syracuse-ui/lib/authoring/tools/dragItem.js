"use strict";
var Draggable = require('syracuse-ui/lib/utility/drag').Draggable;

function _addItemDrag(dropItem) {
	return {
		dropItem: dropItem,
		start: function(context) {
			this.boundaryItem = this.designer.designedArticle.page.scrollview;
			if (this.dropItem.isLayout) {
				syra_layout.setChildAuhtoringLevel(this.dropItem);
			}
			this.toggleDraggedCss(true);
			this.scrollViewRect = syra_dom.getBoundingClientRect(this.boundaryItem);
			this.scrollViewRect.item = this.boundaryItem;
			this.scrollViewRect.scrollWidth = this.scrollViewRect.item.scrollWidth;
			this.scrollViewRect.scrollHeight = this.scrollViewRect.item.scrollHeight;
			context.isDragging = false;
		},
		openTab: function(tab) {
			var self = this;
			if (!!tab) {
				if (tab != self._openTabItem) {
					self.openTab(false);
					self._openTabItem = tab;
					self._openTabTimer = setTimeout(function() {
						if (!self.disposed && !self._openTabItem.disposed && !self._openTabItem.$opened) {
							self._openTabItem.openTab();
						}
					}, 500);
				}
			} else {
				if (self._openTabTimer) {
					clearTimeout(self._openTabTimer);
					self._openTabItem = self._openTabTimer = null;
				}
			}
		},
		drag: function(context, event) {
			var item = this.designer.findItem(event.target, undefined, event);
			if (item) {
				//open automatically tab                    
				this.openTab(item.isTabSection && (item.header == event.target || item.header.contains(event.target)) && item);

				if (item.layoutParent || item.isLayout || item.$awAddNewItem) {
					this.moveDragImage(context, event, item);
				}
			} else {
				this.openTab(false);
				if (event.target && event.target.className && event.target.className.indexOf) {
					if (event.target.className.indexOf("s-aw-drop-cue") < 0) {
						this.moveDragImage(context, event, null, true);
					}
				} else {
					this.moveDragImage(context, event, null, true);
				}
			}
		},
		stop: function(context) {
			if (context.isDragging && this.targetItem) {
				this.toggleDraggedCss(false);
				if (this.dropItem) {
					var targetItem = this.targetItem;
					if (this.$drag.isTab && (this.$drag.isTabBody || (this.$drag.$insertAt == "bottom" || this.$drag.$insertAt == "top"))) {
						if (!targetItem.page.isLandingPage) {
							targetItem = targetItem.layoutParent;
						}
					}
					var newChild = syra_layout.onAddNewItem(targetItem.articleParent, targetItem, this.dropItem, this.$drag.$insertAt);
					if (newChild && newChild.isTabLayout) {
						newChild.openTab();
					}
					this.designer.endArticleUpdate(newChild, true);
				}
			}
			this.toggleDraggedCss(false);
			delete this.targetItem;
			syra_dom.remove(this._info);
			syra_dom.remove(this._dropCue);
		},
		validateDropTarget: function(event, targetItem) {
			if (targetItem && targetItem.$awAddNewItem) {
				return false;
			}
			var isDropEnabled = (targetItem && this.targetItem && (targetItem == this.targetItem));
			if (!isDropEnabled) {
				if (this.dropItem && (this.dropItem != targetItem)) {
					if (this.dropItem.isLayout) {
						if (this.dropItem.boxParent == targetItem.boxParent) {
							var layoutParent = targetItem.layoutParent;
							while (layoutParent) {
								if (this.dropItem == layoutParent) {
									return false;
								}
								layoutParent = layoutParent.layoutParent;
							}
							isDropEnabled = true;
						}
					} else {
						if (this.dropItem.$designLevel != "field") {
							var boxParent = targetItem.boxParent;
							while (boxParent) {
								if (this.dropItem == boxParent) {
									return false;
								}
								boxParent = boxParent.boxParent;
							}
						}
						if (this.dropItem.$designLevel == "field") {
							isDropEnabled = true;
						} else {
							//section
							if (targetItem.$designLevel == "field") {
								if (!this.dropItem.$awAddNewItem) {
									var sourceBox = this.dropItem;
									while (sourceBox && sourceBox != targetItem.boxParent) {
										sourceBox = sourceBox.boxParent;
									}
									if (!sourceBox) {
										this.infoText = syra_local.dd_moveFields;
										isDropEnabled = true;
									}
								} else {
									if (this.dropItem.$fieldBind) {
										isDropEnabled = true;
									}
								}
							} else {
								isDropEnabled = true;
								if (targetItem.page.isLandingPage) {
									if (targetItem.isLayout) {
										isDropEnabled = !(targetItem == targetItem.page.layoutContent ||
											targetItem == this.designer.designedItem.layoutContent.getOpenedTab().layoutContent);
									}
								}

							}
						}
					}

					if (isDropEnabled) {
						this.targetInfoTitle = targetItem.isRow ? "row" : (targetItem.getTitle ? targetItem.getTitle(true) : "");
						this.infoText = (this.dropItem.$awAddNewItem) ? "dd_addItem_" : "dd_moveItem_";
						this._ensureDragImage();
						this.infoDropTitle = this.getDropItemTitle(this.dropItem);
					}

				}
				if (isDropEnabled) {
					if (this.targetItem != targetItem) {
						this.toggleDropArea(this.targetItem);
					}
					this.targetItem = targetItem;
				}
			}
			return isDropEnabled;
		},
		calculatePanelDropCue: function(event, targetItem) {
			var $position = null;
			this.$drag = syra_dom.getBoundingClientRect(targetItem.layoutSlot ? targetItem.layoutSlot : targetItem.domItem);

			//calculateDropBoundary
			var xmargin = (this.$drag.width * 0.25);
			var ymargin = (this.$drag.height * 0.25);
			var $dropBoundary = {
				left: this.$drag.left + xmargin,
				right: this.$drag.left + this.$drag.width - xmargin,
				top: this.$drag.top + ymargin,
				bottom: this.$drag.top + this.$drag.height - ymargin
			};
			$position = {
				top: this.$drag.top,
				left: this.$drag.left
			};
			var isLeft = ((event.pageX > this.$drag.left) && (event.pageX < (this.$drag.left + (this.$drag.width * 0.2))));
			var isRight = ((event.pageX < this.$drag.right) && (event.pageX > (this.$drag.right - (this.$drag.width * 0.2))));
			if (isLeft || isRight) {
				if (syra_context.isRTL) {
					this.$drag.$insertAt = isRight ? "left" : "right";
				} else {
					this.$drag.$insertAt = isRight ? "right" : "left";
				}
				$position.top -= 3;
				$position.left = this.$drag.left + (isRight ? (this.$drag.width) : (-3));
				$position.width = "0.3em";
				$position.height = this.$drag.height + 6 + "px";
			} else {
				var isBottom = event.pageY >= $dropBoundary.bottom;
				this.$drag.$insertAt = isBottom ? "bottom" : "top";
				$position.top = this.$drag.top + (isBottom ? this.$drag.height : 0);
				$position.height = "0.3em";
				$position.width = this.$drag.width + "px";
			}
			return $position;
		},
		calculateTabDropCue: function(event, targetItem) {
			var $position = null;
			if (event.target == targetItem.body) {
				this.$drag = syra_dom.getBoundingClientRect(targetItem.layoutParent.domItem);
				this.$drag.isTabBody = true;
			} else {
				this.$drag = syra_dom.getBoundingClientRect(targetItem.header);
				this.$drag.isTabTitle = true;
			}
			this.$drag.isTab = true;
			this.$drag.right = this.$drag.left + this.$drag.width;
			//calculateDropBoundary
			var xmargin = (this.$drag.width * 0.25);
			var ymargin = (this.$drag.height * 0.25);
			var $dropBoundary = {
				left: this.$drag.left + xmargin,
				right: this.$drag.left + this.$drag.width - xmargin,
				top: this.$drag.top + ymargin,
				bottom: this.$drag.top + this.$drag.height - ymargin
			};
			$position = {
				top: this.$drag.top,
				left: this.$drag.left
			};
			var isLeft, isRight;
			if (targetItem.page.isLandingPage) {
				isLeft = ((event.pageX > this.$drag.left) && (event.pageX < (this.$drag.left + (this.$drag.width * 0.5))));
				isRight = ((event.pageX < this.$drag.right) && (event.pageX > (this.$drag.right - (this.$drag.width * 0.5))));
			} else {
				isLeft = ((event.pageX > this.$drag.left) && (event.pageX < (this.$drag.left + (this.$drag.width * 0.2))));
				isRight = ((event.pageX < this.$drag.right) && (event.pageX > (this.$drag.right - (this.$drag.width * 0.2))));
			}
			if (isLeft || isRight) {
				this.$drag.$insertAt = isRight ? "right" : "left";
				$position.top -= 3;
				$position.left = this.$drag.left + (isRight ? (this.$drag.width) : (-3));
				$position.width = "0.3em";
				$position.height = this.$drag.height + 6 + "px";
			} else {
				var isBottom = event.pageY >= $dropBoundary.bottom;
				this.$drag.$insertAt = isBottom ? "bottom" : "top";
				$position.top = this.$drag.top + (isBottom ? this.$drag.height : 0);
				$position.height = "0.3em";
				$position.width = this.$drag.width + "px";
			}
			return $position;
		},
		_ensureDragImage: function() {
			if (!this._info) {
				this._info = syra_dom.div("s-aw-drag-info");
				this._info.style.display = "none";
				this._infoLabel = syra_dom.div("s-aw-drag-info-label");
				if (this.dropItem.$field && this.dropItem.$field.$type) {
					syra_button.add({
						isIndicator: true,
						parent: this,
						slot: this._info,
						iconOnly: true,
						css: "s-aw-tree-field-type",
						fontIcon: syra_fields.getTypeFieldIcon(this.dropItem.$field.$type)
					});
				}
				this._info.appendChild(this._infoLabel);
				syra_site.layoutSlot.appendChild(this._info);
				this._infoLabel.textContent = this.getDropItemTitle(this.dropItem);
			}
		},
		getDropItemTitle: function(dropItem) {
			var title = dropItem.$awAddNewItem ? dropItem.$title : dropItem.getTitle();
			if (!title) {
				title = syra_local[dropItem.isLayout ? "aw_rowLayout" : "aw_" + dropItem.$designLevel];
			}
			return title;
		},
		moveDragImage: function(context, event, targetItem, isOut) {
			context.isDragging = true;
			this.isDropEnabled = false;
			if (!isOut && targetItem) {
				this.isDropEnabled = this.validateDropTarget(event, targetItem);
				if (this.isDropEnabled) {
					this.targetItem = null;
					this.validateDropTarget(event, targetItem);
				}
			}
			syra_pageBuilder.autoScroll(this.scrollViewRect, event);
			var top = Math.max(event.pageY, this.scrollViewRect.top);
			var left = Math.max(event.pageX, this.scrollViewRect.left);
			top = Math.min(top, this.scrollViewRect.bottom);
			left = Math.min(left, this.scrollViewRect.right);

			var inBoundary = (event.pageX == left && event.pageY == top);
			this._ensureDragImage();
			if (this.isDropEnabled) {
				this._info.className = "s-aw-drag-info-" + this.dropItem.$designLevel;
				var $position = null;
				if (event.target && event.target.className && event.target.className.indexOf) {
					if (this.targetItem && (this.targetItem.layoutParent || this.targetItem.isLayout)) {
						$position = this.targetItem.isTabSection ? this.calculateTabDropCue(event, this.targetItem) : this.calculatePanelDropCue(event, this.targetItem);
						if ($position) {
							if (!this._dropCue) {
								this._dropCue = syra_dom.div("s-aw-drop-cue", syra_site.layoutSlot);
							}
							var css;
							if (!this.dropItem.isLayout) {
								if (this.targetItem.isLayout) {
									if (!this.targetItem.$chilAuthoringLevel) {
										syra_layout.setChildAuhtoringLevel(this.targetItem);
									}
									css = this.targetItem.$chilAuthoringLevel;
								} else {
									css = this.targetItem.$designLevel;
								}
							} else {
								css = this.dropItem.$designLevel;
							}

							this._dropCue.className = "s-aw-drop-cue s-aw-drop-cue-" + css;

							var style = this._dropCue.style;
							style.display = "none";
							style.top = $position.top + "px";
							style.left = $position.left + "px";
							style.width = $position.width;
							style.height = $position.height;
							if (this.targetItem && this.targetItem.isSpaceBox) {
								this.toggleDropArea(this.targetItem, this.dropItem);
							} else {
								style.display = "block";
							}
							var text = syra_local[this.infoText + this.$drag.$insertAt] || "";
							this._infoLabel.textContent = text.replace("{0}", this.infoDropTitle).replace("{1}", this.targetInfoTitle);
						}
					}
				}
			} else {
				if (isOut) {
					var title, localText = syra_local.dd_nodrop;
					if (this.dropItem.$awAddNewItem) {
						title = this.dropItem.$title;
					} else {
						title = this.dropItem.getTitle();
					}
					if (!title) {
						title = syra_local["aw_" + this.dropItem.$designLevel];
					}
					this._infoLabel.textContent = localText + "  " + title;
				}
				this._info.className = "s-aw-drag-info";
				this.toggleDropArea(this.targetItem);
				this.targetItem = null;
				if (this._dropCue) {
					this._dropCue.style.display = "none";
				}
			}
			this._info.style.top = top + 15 + "px";
			this._info.style.left = left + 15 + "px";
			this._info.style.display = "";
		},
		toggleDropArea: function(targetItem, dropItem) {
			if (targetItem && targetItem.isSpaceBox) {
				targetItem.deleteBtn && syra_button.hide(targetItem.deleteBtn, dropItem);
				if (dropItem) {
					if (!targetItem.dropArea) {
						targetItem.dropArea = syra_dom.text("s-aw-drop-area-" + dropItem.$designLevel, syra_local["aw_drop_" + dropItem.$designLevel], targetItem.body);
					}
				} else {
					if (targetItem.dropArea) {
						syra_dom.remove(targetItem.dropArea);
						targetItem.dropArea = null;
					}
				}
			}
		},
		toggleDraggedCss: function(show) {
			if (this.dropItem && this.dropItem.domItem) {
				syra_dom.toggleClass(this.dropItem.domItem, "s-dd-dragged", show);
			}
		}
	};
};

function _addRowResizer(cellToResize) {
	return ({
		_left: cellToResize,
		start: function(context) {
			this._row = this._left.parentNode;
			this._rowLayout = this.designer.findItem(this._row);
			this.widths = syra_layout.getWidthValues(this._rowLayout);
			this.sideProperty = syra_context.isRTL ? "left" : "right";

			var rect = this._left.getBoundingClientRect();
			this.startX = rect[this.sideProperty];
			this._leftW = rect.width;
			this._right = this._left.nextSibling;
			this._rightW = this._right.getBoundingClientRect().width;

			this.maxWidth = this._row.getBoundingClientRect().width;
			this.markerzIndex = syra_dom.setZIndex();

			var smallW = this.maxWidth / 30,
				steps = [],
				width = 0;
			for (var ii = 0; ii < 29; ii++) {
				steps.push(width += smallW);
			}
			this.markersSlot = syra_dom.div("s-aw-markers");
			this.markersSlot.style.zIndex = this.markerzIndex;
			syra_site.layoutSlot.appendChild(this.markersSlot);
			var rect = this._row.getBoundingClientRect();
			this.markersSlot.style.top = (rect.top - this.markersSlot.clientHeight - 2) + "px";
			this.markersSlot.style.left = rect.left + "px";
			this.markersSlot.style.width = rect.width + "px";
			this.markers = [];
			var lastMarker;
			for (var ii = 0, jj = steps.length; ii < jj; ii++) {
				var marker = syra_dom.div("s-aw-marker", this.markersSlot);
				marker.style.left = steps[ii] + "px";
				marker.syraPageX = rect.left + steps[ii];
				marker.syraStep = steps[ii];
				if (lastMarker) {
					lastMarker.syraPageMaxX = lastMarker.syraPageX + ((marker.syraPageX - lastMarker.syraPageX) / 2);
					marker.syraPageMinX = lastMarker.syraPageMaxX - 1;
				} else {
					marker.syraPageMinX = rect.left;
				}
				lastMarker = marker;
				this.markers.push(marker);
			}
			lastMarker.syraPageMaxX = rect.left + rect.width;
		},
		drag: function(context, event) {
			var pageX;
			if (event.pageX >= this.markers[0].syraPageX && event.pageX <= this.markers[this.markers.length - 1].syraPageX) {
				pageX = event.pageX;
			} else {
				pageX = this.markers[(event.pageX < this.markers[0].syraPageX) ? 0 : this.markers.length - 1].syraPageX;
			}
			if (pageX !== undefined) {
				this._setLeftRightWidths(pageX);
			}
		},
		stop: function(context) {
			var widths = this._rowLayout.$layout.$widths.split(",");
			var step = null;
			var right = syra_dom.getBoundingClientRect(this._left)[this.sideProperty];
			for (var ii = 0, jj = this.markers.length; ii < jj; ii++) {
				var found = this.markers[ii];
				if (found.syraPageMinX <= right && right < found.syraPageMaxX) {
					step = found;
					break;
				}
			}
			this._setLeftRightWidths(step.syraPageX);
			var tot = this._row.getBoundingClientRect().width;
			var children = this._row.children;
			for (var ii = 0, jj = children.length; ii < jj; ii++) {
				var width = children[ii].getBoundingClientRect().width;
				widths[ii] = syra_site.roundDecimal((100 * width) / tot, 2);
			}
			this._rowLayout.$layout.$widths = widths.join(",");
			syra_layout.setRowWidths(this._rowLayout);
			this.designer.endArticleUpdate(this.designedItem || this._rowLayout, false);

			this.markersSlot && syra_dom.remove(this.markersSlot);
		},
		_setLeftRightWidths: function(pageX) {
			if (!this.designer.designedArticle.isLandingPage) {
				this._row.style.width = ""; //temp hack	
			}
			pageX -= this.startX;
			if (syra_context.isRTL) {
				this._right.style.width = Math.max(this._rightW + pageX) + "px";
				this._left.style.width = this._leftW + (pageX * (-1)) + "px";
			} else {
				this._left.style.width = Math.max(this._leftW + pageX) + "px";
				this._right.style.width = this._rightW + (pageX * (-1)) + "px";
			}
		}
	});
};

exports.add = function(designer) {
	return new Draggable({
		designer: designer,
		handle: designer.designedArticle.domItem,
		mousemove: function(event) {
			if (!this._updater) {
				if (event.target.syraSeparatorType == "row") {
					var right = event.target.getBoundingClientRect()[syra_context.isRTL ? "left" : "right"];
					if (event.pageX > (right - 4) && event.pageX < (right + 4)) {
						if (!this.cellToResize) {
							this.cellToResize = event.target;
							syra_site.layoutSlot.style.cursor = "w-resize";
						}
						return;
					}
				}
				this.setDefaultCursor();
			}
		},
		mousedown: function(event) {
			if (event.target) {
				var item = this.designer.findItem(event.target, undefined, event);
				if (item && this.designer.designedArticle.page == item.page) {
					this._updater = this.cellToResize ? _addRowResizer(this.cellToResize) : _addItemDrag(item);
					this._updater.designer = this.designer;
					this.setDefaultCursor();
					return true;
				}
			}
		},
		start: function() {
			this._updater.start(this);
		},
		drag: function(event) {
			this._updater.drag(this, event);
		},
		stop: function() {
			this._updater.stop(this);
			if (this._updater) {
				syra_site.disposeObject(this._updater);
				delete this._updater;
			}
			this.setDefaultCursor();
		},
		setDefaultCursor: function() {
			if (this.cellToResize) {
				this.cellToResize = null;
				syra_site.layoutSlot.style.cursor = "default";
			}
		}
	})
};