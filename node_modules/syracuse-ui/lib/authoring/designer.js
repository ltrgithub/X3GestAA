"use strict";
var helpers = require('syracuse-core').helpers;
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var _historyTool = require("syracuse-ui/lib/authoring/tools/historyTool");
var _templatesTool = require("syracuse-ui/lib/authoring/tools/templatesTool");

function _clearEmptySection(section) {
	if (section && section.isSection && section.page != section) {
		var boxParent = section.boxParent;
		var layoutParent = section.layoutParent;
		layoutParent && layoutParent.removeItem(section, true);
		if (boxParent) {
			if (!(boxParent.boxChildItems && boxParent.boxChildItems.length > 0) && !(boxParent.childrenSection && boxParent.childrenSection.length > 0)) {
				_clearEmptySection(boxParent);
			}
		}
	}
}


function _clearUnknowFields(page) {
	if (page.noProtoFields) {
		for (var ii = 0, jj = page.noProtoFields.length; ii < jj; ii++) {
			var field = page.noProtoFields[ii];
			var boxParent = field.boxParent;
			if (field.layoutParent) {
				field.layoutParent.removeItem(field, true);
			}
			if (boxParent) {
				if (!(boxParent.boxChildItems && boxParent.boxChildItems.length > 0) && !(boxParent.childrenSection && boxParent.childrenSection.length > 0)) {
					_clearEmptySection(boxParent);
				}
			}
		}
		delete page.noProtoFields;
	}
}


function Designer() {}

exports.Designer = helpers.defineClass(Designer, DesktopPage, {
	addItem: function(slot, $item, boxParent, initData) {
		var item = DesktopPage.prototype.addItem.call(this, slot, $item, boxParent, initData);
		if (item.input) {
			if (!item.isBooleanField && item._dataValue) {
				item._dataValue.className += " s-aw-prop-field-input";
			}
			item.domItem.className += " s-aw-prop-field";
		}
		return item;
	},
	addCloseButton: function(slot) {
		syra_button.add({
			parent: this,
			slot: slot,
			text: syra_local.aw_close,
			iconOnly: true,
			css: "s-aw-designer-close",
			click: function() {
				var self = this.parent;
				setTimeout(function() {
					self.closeDesigner();
				}, 100);
			}
		});
	},
	loadHistoryTool: function() {
		_historyTool.load(this);
	},
	endArticleUpdate: function(selectedItem, isStructureUpdated) {
		syra_site.ensureArticleVisibility(this.designedArticle.page);
		this.history && this.history.updateSteps();
		this.saveDesign();
	},
	clearDiagnoses: function(message) {
		syra_alert.clear(this.designedArticle);
		if (syra_site.mobile && syra_site.mobile._jsonPage) {
			syra_alert.clear(syra_site.mobile._jsonPage);
		}
	},
	_toggleDesignDialog: function(page, begin) {
		var overPanel = page && page.overPanel;
		if (overPanel) {
			syra_button.hide(overPanel.btn_close, begin);
			overPanel.overlay.className = begin ? "s-aw-overlay" : "s-overlay";
			!begin && overPanel.resize();
		}
	},

	openDesigner: function(designedArticle) {
		this.isPageDesigner = true;
		this.isSiteRegisterDisabled = true;
		this.designedArticle = designedArticle;
		this.designedArticle.designer = this;
		this.designedArticle.isDesigned = true;
		this.$prototype = {
			$properties: {},
			$links: {}
		};
		this.$item = {};
		if (this.designedArticle.page == this.designedArticle) {
			_clearUnknowFields(this.diagnosePage = this.designedArticle);
			this.clearDiagnoses();
		}
		if (this.designedArticle.page.overPanel) {
			this._toggleDesignDialog(this.designedArticle.page, true);
		}
		if (designedArticle.$prototype && designedArticle.$prototype.$article) {
			//imortant save article for page
			designedArticle.$prototype.$article = syra_site.clone(designedArticle.$prototype.$article);
		}
		this.load(designedArticle);
		this.isPageLoaded = true;
		if (!this.designedArticle.page.isVignettePage) {
			syra_site.ensureArticleVisibility(this);
		}
	},
	loadTemplateTools: function() {
		_templatesTool.load(this);
	},
	findItem: function(domItem, findLayout) {
		var item = syra_item.findItem(domItem);
		return (item && item.isTreeNode) ? item.item : item;
	},
	dispose: function() {
		var page;
		if (this.designedArticle) {
			page = this.designedArticle.page;
			this.designedArticle.isDesigned = false;
			delete this.designedArticle.designer;
		}
		DesktopPage.prototype.dispose.call(this);
		this._toggleDesignDialog(page, false);
	}
});