"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var designLocalization = require("syracuse-ui/lib/authoring/designLocalization");

function Designer() {}

exports.Designer = helpers.defineClass(Designer, RawPage, {
	toggleItemAuthoring: function(item, enable) {
		if (this.uiSwitchTool) {
			this.uiSwitchTool.toggleItemAuthoring(item, enable);
		}
	},
	showAdvancedItem: function(item, $isAdvanced) {
		if (this.uiSwitchTool) {
			this.uiSwitchTool.toggleItemAuthoring(item, $isAdvanced);
		}
	},
	showHiddenItem: function(item) {
		if (this.uiSwitchTool) {
			this.uiSwitchTool.showHiddenItem(item);
		}
	},
	applyChangeToMobile: function($article) {
		if (document.site.mobileGateway) {
			document.site.mobileGateway.applyChange($article);
		}
	},
	showTargetPageDiagnoses: function(message, options) {
		this.awArticle.showDiagnoses(message, options);
		if (document.site.mobileGateway) {
			document.site.mobileGateway.onShowTargetPageDiagnoses(message, options);
		}
	},
	_toggleDesignDialog: function(begin) {
		this.awArticle.page.dialogWrapper.$$closeBtn[0].style.display = begin ? "none" : "";
		this.awArticle.page.dialogWrapper.overlay.className = begin ? "s-aw-overlay" : "s-overlay";
	},
	onBeforeMainPageChange: function(continueChanging) {
		var self = this;
		if (self.historyTool.isUpdated) {
			document.site.showMessage({
				$title: self.localize.aw_updateMessageTitle,
				$message: self.localize.aw_cancelMessageText,
				$type: "question",
				$buttons: "yesnocancel",
				callback: function(response) {
					if (response.$id == "yes") {
						self.designerWorkingCopy.saveUpdate();;
						setTimeout(function() {
							self.closeDesigner();
							continueChanging();
						}, 300);
					} else {
						if (response.$id == "no") {
							self.closeDesigner();
							continueChanging();
						}
					}
				}
			});
			return false;
		}
		self.closeDesigner();
		return true;
	},
	openDesigner: function(designedItem) {
		this.localize = designLocalization.getLocalize();
		this.awArticle = designedItem;
		this.awArticle.designer = this;
		this.awArticle.isDesigned = true;
		this.$prototype = {
			$properties: {},
			$links: {}
		};
		this.$item = {};
		this.$autoFetch = false;
		this._unregisterResizer = true;
		if (this.awArticle.page == this.awArticle) {
			(this.diagnosePage = this.awArticle).clearUnknowFields();
			this.showTargetPageDiagnoses({
				$diagnoses: null
			});
		}
		if (this.awArticle.page.dialogWrapper) {
			this._toggleDesignDialog(true);
		}
		this.loadBox(designedItem);
	},
	closeDesigner: function() {
		this.awArticle.designPage(false);
	},
	cancelUpdate: function() {
		var $item = helpers.object.clone(this.historyTool.$sourceItem, true);
		this.awArticle.page.reloadLayout($item);
		this.applyChangeToMobile($item);
		this.closeDesigner();
	},
	dispose: function() {
		if (this.designerWorkingCopy) {
			this.designerWorkingCopy.dispose();
		}
		if (this.historyTool) {
			this.historyTool.dispose();
		}
		if (this.templatesTool) {
			this.templatesTool.dispose();
		}
		if (this.awArticle) {
			if (this.awArticle.page.dialogWrapper) {
				this._toggleDesignDialog(false);
			}
			this.awArticle.isDesigned = false;
			delete this.awArticle.designer;
		}
		this.workinCopySlot = null;
		this.historyTool = this.templatesTool = null;
		this.awItem = this.awLayout = this.awArticle = null;
		this.designerWorkingCopy = this.page = this.diagnosePage = this.designerWorkingCopy = null;
		RawPage.prototype.dispose.call(this);
	}
});