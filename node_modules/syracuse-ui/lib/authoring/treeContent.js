"use strict";
var helpers = require('syracuse-core/lib/helpers');

function TreeContent(){
}

exports.TreeContent = helpers.defineClass(TreeContent, null, {
    toggle: function(show, disposing){
        var targetPage = document.site.authorPage.targetPage;
        if (targetPage) {
            if (show) {
                this._nodes = this._nodes || {};
                if (!targetPage.authoringContentView) {
                    targetPage.authoringContentView = document.createElement("div");
                    targetPage.authoringContentView.className = "s-aw-content-tree";
                    targetPage.scrollview.parentNode.insertBefore(targetPage.authoringContentView, targetPage.scrollview);
                }
                document.site.emptyDom(targetPage.authoringContentView);
                this._buildTreeNode(targetPage, {
                    node: targetPage.authoringContentView
                });
                targetPage.scrollview.style.display = "none";
                targetPage.authoringContentView.style.display = "";
            }
            else {
                if (targetPage.authoringContentView) {
                    targetPage.authoringContentView.style.display = "none";
                }
                if (targetPage.scrollview.style.display == "none") {
                    targetPage.scrollview.style.display = "";
                }
                if (disposing) {
                    document.site.emptyDom(targetPage.authoringContentView);
                    delete targetPage.authoringContentView;
                }
                if (this._nodes) {
                    var ids = Object.keys(this._nodes);
                    for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                        var node = this._nodes[ids[ii]];
                        node.item = node.node = node.children = node.data = null;
                        node.opener = node.isExcludeCheck = node.title = null;
                    }
                    this._nodes = {};
                }
                if (disposing) {
                    this._nodes = null;
                    return; //no need to resize
                }
            }
            targetPage.onWindowResize();
        }
    },
    onItemHide: function(awItem, value){
        if (this._nodes) {
            var ids = Object.keys(this._nodes);
            for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                var node = this._nodes[ids[ii]];
                if (node.item == awItem) {
                    node.isExcludeCheck.checked = value !== true;
                    break;
                }
            }
        }
    },
    onNodeEvent: function(event){
        var authorPage = document.site.authorPage;
        delete document.site.requestedDDAuthoringItem;
        event.stopPropagation();
        var $$target = $(event.target);
        var id = $$target.attr("data-s-item");
        if (!id) {
            id = $$target.closest("[data-s-item]").attr("data-s-item");
        }
        if (id) {
            var node = this._nodes[id];
            if (event.target.className.indexOf("s-aw-tree-item-opener-children") >= 0) {
                var open = !(node.opener.className.indexOf("s-open") < 0);
                node.children.style.display = open ? "" : "none"
                document.site.toggleClass(node.opener, "s-open", !open);
            }
            else {
                if (event.target.className.indexOf("s-aw-tree-item-check") >= 0) {
                    var metaData = {
                        $isExcluded: !node.isExcludeCheck.checked
                    };
                    node.item.applyDesignMetaData(metaData);
                    if (node.item.$item.$bind == authorPage.awItem.$item.$bind) {
                        authorPage.palette.applyChange(metaData);
                    }
                    authorPage.notifyUpdate();
                }
                else {
                    switch (event.type) {
                        case "mouseenter":
                            authorPage.toggleOverItem(node.item, true);
                            authorPage.scrollToItem(node.item);
                            break;
                        case "mouseleave":
                            authorPage.toggleOverItem(node.item, false);
                            break;
                        case "click":
                            if (authorPage.awItem != node.item) {
                                var prev = this._nodes[authorPage.awItem.id];
                                if (prev) {
                                    document.site.toggleClass(prev.title, "s-aw-tree-designed-" + prev.item.$authoringLevel, false);
                                }
                            }
                            document.site.toggleClass(node.title, "s-aw-tree-designed-" + node.item.$authoringLevel, true);
                            authorPage.selectItem(node.item, true);
                            break;
                    }
                }
            }
        }
        
    },
    _buildTreeNode: function(item, parent){
        var items;
        item.parent = parent;
        if (!parent.children) {
            parent.children = document.createElement("ul");
            parent.children.className = "s-aw-tree-level";
            parent.node.appendChild(parent.children);
            if (parent.opener) {
                parent.opener.className = "s-aw-tree-item-opener-children";
            }
        }
        var itemNode = {};
        itemNode.item = item;
        itemNode.node = document.createElement("li");
        itemNode.node.setAttribute("data-s-item", item.id);
        this._nodes[item.id] = itemNode;
        itemNode.node.className = "s-aw-tree-item";
        parent.children.appendChild(itemNode.node);
        
        itemNode.data = document.createElement("div");
        itemNode.data.className = "s-aw-tree-item-data";
        itemNode.node.appendChild(itemNode.data);
        
        
        itemNode.opener = document.createElement("a");
        itemNode.opener.className = "s-aw-tree-item-opener";
        itemNode.data.appendChild(itemNode.opener);
        
        itemNode.isExcludeCheck = document.createElement("input");
        itemNode.isExcludeCheck.setAttribute("type", "checkbox");
        itemNode.isExcludeCheck.className = "s-aw-tree-item-check";
        itemNode.isExcludeCheck.checked = item.$item.$isExcluded !== true;
        itemNode.data.appendChild(itemNode.isExcludeCheck);
        
        itemNode.title = document.createElement("div");
        itemNode.title.className = "s-aw-tree-item-title s-aw-tree-" + item.$authoringLevel;
        if (document.site.authorPage.awItem == item) {
            itemNode.title.className += " s-aw-tree-designed-" + item.$authoringLevel;
        }
        itemNode.title.textContent = item.getTitle();
        itemNode.data.appendChild(itemNode.title);
        
        if (item.$layout) {
            items = item.items;
        }
        if (item.layoutContent) {
            items = item.layoutContent.items;
        }
        if (items) {
            for (var ii = 0, jj = items.length; ii < jj; ii++) {
                this._buildTreeNode(items[ii], itemNode);
            }
        }
        return itemNode;
    }
});
