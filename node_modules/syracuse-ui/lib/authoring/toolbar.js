"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ItemTree = require("syracuse-ui/lib/authoring/tree/itemTree").ItemTree;
var GridTree = require("syracuse-ui/lib/authoring/tree/gridTree").GridTree;

function Toolbar() {}

exports.Toolbar = helpers.defineClass(Toolbar, null, {
	load: function(awPalette) {
		this.awPalette = awPalette;
		this.awArticle = awPalette.awArticle;
		this.toolbarTabs = document.createElement("div");
		this.toolbarTabs.className = "s-aw-tlbr-tabs-nav";
		this.toolbarBody.appendChild(this.toolbarTabs);
		this.selectedTabIndex = -1;
		this.tabs = [];
		var localize = document.site.authorPage.localize;
		if (this.awArticle.isList) {
			this._createArrayBoxes();
		} else {
			this.awPalette.targetPage.warnAdministrationUpdates(false);
			this.newArticleTab = this.appendTab(localize.aw_viewTypeContent);
			this.newInsertTab = this.appendTab(localize.aw_insert);
			this.selectTab(this.newArticleTab.index, true);
			if (this.awPalette.targetPage.isDashBoard) {
				this.awPalette.loadAvailableLinks();
			}
			this.awPalette.loadAvailableFields();

		}
		this._bindEvents(true);
	},
	selectTab: function(index, select) {
		if (select && this.selectedTabIndex >= 0 && this.selectedTabIndex !== index) {
			this.selectTab(this.selectedTabIndex, false);
		}
		this.selectedTabIndex = index;
		this.tabs[index].tab.className = "new-s-aw-tlbr-tab" + (select ? " s-tab-open" : "");
		this.tabs[index].body.style.display = select ? "" : "none";
	},
	appendTab: function(title) {
		var tab = document.createElement("a");
		tab.className = "new-s-aw-tlbr-tab";
		tab.textContent = title;
		var body = document.createElement("div");
		body.style.display = "none";
		body.className = "s-aw-content-tree";
		var tabItem = {
			tab: this.toolbarTabs.appendChild(tab),
			index: this.tabs.length,
			body: this.toolbarBody.appendChild(body)
		};
		this.tabs.push(tabItem);
		return tabItem;
	},
	toggleArticleToolBox: function(refreshInsert) {
		if (this.awArticle) {
			if (!this.itemTree) {
				this.itemTree = new ItemTree();
			}
			this.itemTree.load(this);
		}
	},
	toggleColumnsToolBox: function() {
		if (this.awArticle) {
			this.gridTree = new GridTree();
			this.gridTree.load(this.awPalette, this.awArticle, this.newColumnsTab.body);
		}
	},
	_createArrayBoxes: function() {
		var localize = document.site.authorPage.localize;
		this.newColumnsTab = this.appendTab(localize.aw_listColumns);
		this.newGraphTab = this.appendTab(localize.aw_graph);
		this.newArticleTab = this.appendTab(localize.aw_listCard);
		this.newInsertTab = this.appendTab(localize.aw_insert);
		this.selectTab(this.newColumnsTab.index, true);
		if (this.awArticle.chart && this.awArticle.chart.$authoringType == "cube$highCharts") {
			var $fieldCube = this.awArticle.$item.$cube || this.awArticle.$prototype.$cube;
			if ($fieldCube && $fieldCube.$measures) {
				var $items = [];
				var $itemCube = this.awArticle.$item.$cube || {};
				var $itemMeasures = $itemCube.$measures || {};
				var delta = {};
				var binds = Object.keys($fieldCube.$measures);
				for (var ii = 0, jj = binds.length; ii < jj; ii++) {
					var bind = binds[ii];
					var $measure = $fieldCube.$measures[bind];
					var $field = this.awArticle.chart.createChoices();
					$field.$title = $measure.$title ? this.awPalette.targetPage.getLocalizeText($measure.$title) : "";
					var $toolBind = "$cube" + bind;
					this.awPalette.$prototype.$properties[$toolBind] = $field;
					$items.push({
						$category: "field",
						$bind: $toolBind,
						$measure: bind,
						$icon: {
							$mode: "icon",
							$path: "graphics/s-graph-"
						},
						$choiceLayout: "3",
						$isEditMode: true,
						$skin: "s-aw-field"
					});
					delta[$toolBind] = ($itemMeasures[bind] ? $itemMeasures[bind].$style : null) || "area";
				}
				this.awPalette.loadNewItem(this.newGraphTab.body, {
					$layoutType: "stack",
					$items: $items
				});
				this.awPalette.applyChange(delta);
			}
		}

		this.toggleColumnsToolBox();
		this.ensureArrayBoxVisibility();
	},
	ensureArrayBoxVisibility: function(resize) {
		var hideColumns = false,
			hideCards = false;
		if (this.awArticle.$item.$format == "cards") {
			hideColumns = true;
		} else {
			if (this.awArticle.$item.$cards) {
				switch (this.awArticle.$item.$cards.$position || "inline") {
					case "popup":
						hideCards = true;
						break;
					default:
						break;
				}
			} else {
				hideCards = true;
			}
		}
		// hideCards = true;        
		/*  this.columnsToolBarBox.$isHidden = hideColumns;
         if (this.columnsToolBarBox.$$item) {
         this.columnsToolBarBox.$$item[0].style.display = (hideColumns) ? "none" : "";
         }
         this.newArticleBody.style.display = (hideCards) ? "none" : "";
         if (hideColumns && (this.toolbarLayout && this.toolbarLayout.tabOpened == this.columnsToolBarBox)) {
         this.articleToolBarBox.hideBox(true);
         }
         if (hideCards && (this.toolbarLayout && this.toolbarLayout.tabOpened == this.articleToolBarBox)) {
         this.columnsToolBarBox.hideBox(true);
         }*/
		if (resize !== false) {
			this.awPalette.onWindowResize();
		}
	},
	_bindEvents: function(bind) {
		var self = this;
		if (self.toolbarBody) {
			if (bind) {
				$(self.toolbarBody).delegate(".s-aw-list-cols-col,.s-aw-list-cols-col-title,.s-aw-list-cols-col-fixe,.s-aw-list-cols-col-delete", "click.authoringList", function(event) {
					self.gridTree.onNodeEvent(event);
					return false;
				}).delegate(".new-s-aw-tlbr-tab", "click.authoringTree click.authoringTree", function(event) {
					for (var ii = 0, jj = self.tabs.length; ii < jj; ii++) {
						if (self.tabs[ii].tab == event.target) {
							self.selectTab(ii, true);
							break;
						}
					}
					return false;
				}).delegate(".s-aw-content-tree", "mousedow.authoringTree click.authoringTree", function(event) {
					self.itemTree.onNodeEvent(event);
					return false;
				}).delegate(".s-aw-tree-item-opener-children", "click.authoringTree", function(event) {
					self.itemTree.onNodeEvent(event);
					return false;
				}).delegate(".s-aw-tree-item-title", "mouseenter.authoringTree mouseleave.authoringTree click.authoringTree", function(event) {
					self.itemTree.onNodeEvent(event);
					return false;
				});
			} else {
				$(self.toolbarBody).undelegate();
			}
		}
	},
	onWindowResize: function(height) {
		this.toolbarBody.style.height = (height - this.toolbarBody.offsetTop) + "px";
		var bodyHeight = Math.max(height - this.toolbarTabs.clientHeight, 20) + "px";
		for (var ii = 0, jj = this.tabs.length; ii < jj; ii++) {
			this.tabs[ii].body.style.height = bodyHeight;
		}
	},
	dispose: function() {
		this._bindEvents(false);
		if (this.itemTree) {
			this.itemTree.dispose();
		}
		if (this.gridTree) {
			this.gridTree.unload();
		}
		this.itemTree = this.gridTree = null;
		this.awPalette = this.toolbarBody = this.tabs = null;
	}
});