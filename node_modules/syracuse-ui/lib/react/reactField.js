"use strict";
var helpers = require('syracuse-core').helpers;
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;

exports.add = function($item, loaded) {
	var $prototype = syra_site.clone($item.$prototype);
	var $props = $prototype.$properties;
	var binds = Object.keys($props);
	for (var ii = 0, jj = binds.length; ii < jj; ii++) {
		var bind = binds[ii];
		if (bind != $item.bind) {
			$props[bind].$isExcluded = true;
		}
	}
	$prototype.$article = {
		$layout: {
			$items: [{
				$isEditMode: $item.editable,
				$bind: $item.bind
			}]
		}
	};
	syra_pageBuilder.load({
		$autoFetch: false,
		$itemPage: {
			$page: new ReactPage(),
			$facet: "$react",
			$representation: {
				$prototype: $prototype
			}
		},
		success: function(page) {
			$item.slot.appendChild(page.domItem);
			page.startChange();
			page.applyChange($item.dataset);
			page.endChange()
			loaded(page);
		}
	});
};

function ReactPage() {}

helpers.defineClass(ReactPage, DesktopPage, {
	load: function() {
		this.$autoFetch = false;
		this.isMenuBarDisabled = true;
		this.isBookmarkDisable = false;
		DesktopPage.prototype.load.call(this);
	},
	applyReactChange: function(delta) {
		delete this.size;
		this.startChange();
		var resetDelta = {};
		var binds = Object.keys(this.$prototype.$properties);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			resetDelta[binds[ii]] = null;
		}
		this.applyChange(resetDelta);
		this.applyChange(delta);
		this.endChange();


	},
	drawPage: function() {
		this.layoutSlot = this.body = this.domItem = this.contentSlot = this.scrollview = syra_dom.article(this.$skin);
		this.diagnoseSlot = syra_dom.div("");
		this.domItem.syraPage = this.domItem.syraItem = this.id;
		this.slotListener = syra_site.addEventListeners(this.domItem);
		this.renderLayoutContent();

	},
	dispose: function() {
		this.slotListener && this.slotListener.dispose();
		DesktopPage.prototype.dispose.call(this);
	}
});