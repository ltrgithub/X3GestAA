"use strict";
var helpers = require('syracuse-core').helpers;
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;

exports.add = function(slot, $prototype, $dataset, $bind) {
	var $prototype = syra_site.clone($prototype);
	$prototype.$article = {
		$layout: {
			$items: []
		}
	};
	syra_pageBuilder.load({
		$autoFetch: false,
		$itemPage: {
			$facet: "$edit",
			$representation: {
				$prototype: $prototype
			}
		},
		success: function(page) {
			slot.appendChild(page.domItem);
		}
	});
};
/*
 function ReactPage(){
 }
 helpers.defineClass(ReactPage, DesktopPage, {
 load: function(){
 var self = this;
 self.$autoFetch = false(self.searchField = syra_site.searcher).toggle(true);
 self.$prototype = {
 $properties: {}
 };
 self.isMenuBarDisabled = true;
 self.isBookmarkDisable = false;
 DesktopPage.prototype.load.call(self);
 
 var params = self.urlSeg && self.urlSeg.params;
 self.searchField.setValue(self.searchCriteria = params.q);
 self.searchField.isFuzzyMode = params.qt == "fuzzy";
 
 self.facetBar = new FacetsBar();
 self.facetBar.load(self, {
 resizeDirection: "right"
 });
 
 var slot = document.createElement("div");
 slot.className = "s-search-options";
 slot.textContent = syra_local.searchOptionLabel;
 self._modeBtn = syra_button.add({
 parent: self,
 slot: slot,
 text: self.searchField.isFuzzyMode ? syra_local.searchStartingWith : syra_local.searchSimilar,
 css: "s-search-mode",
 click: function(){
 self.searchField.isFuzzyMode = !self.searchField.isFuzzyMode;
 syra_button.setText(this, self.searchField.isFuzzyMode ? syra_local.searchStartingWith : syra_local.searchSimilar);
 syra_url.history.update(self, self.searchField.getUrl(self.searchCriteria));
 self.functionsBox.fetch();
 self.dataBox.fetch();
 }
 });
 self.header.appendChild(slot);
 
 ["functions", "data"].forEach(function($source){
 var box = new SearchBox();
 box.$bind = (box.$source = $source) + "Box";
 (box.page = self)[box.$bind] = box;
 box.load(self.layoutContent.domItem);
 });
 
 self.fetch();
 },
 onSelectRecord: function(records, record, isSelected){
 isSelected && record && this.searchField.executeRecord(record.dataset);
 },
 ensureDefaultArticle: function(){
 return {
 $title: syra_local.searchPageTitle,
 $layout: {
 $items: []
 }
 };
 },
 onItemInOut: function(onEnter, event, target){
 this.facetBar.onItemInOut(onEnter, event, target);
 },
 fetch: function(options){
 options = options || {};
 if (options.$url) {
 var $bind = options.$url.indexOf("source=data") >= 0 ? "dataBox" : "functionsBox";
 this[$bind].fetch(options);
 }
 // others (simple pager navigation) (pagination)
 // get corresponding tab information, update content accordingly
 else {
 var params = this.urlSeg && this.urlSeg.params;
 if (options.field && options.field.$item && options.field.$item.$bind) {
 options.jsonParams = this.jsonParams;
 this[options.field.$item.$bind].fetch(options);
 }
 else {
 // in order to handle navigation issues (prev/next) issue #2824
 if (params.source) {
 options.params = {
 count: params.count,
 startIndex: params.startIndex
 };
 }
 // to handle navigation (prev/next) issues.
 var functionsOptions = syra_site.clone(options);
 var dataOptions = syra_site.clone(options);
 // remove params unecessary for appropriate source
 if (params.source) {
 if (params.source == 'data') {
 delete functionsOptions.params;
 }
 else {
 delete dataOptions.params;
 }
 }
 this.functionsBox.fetch(functionsOptions, this.searchField.results.functions);
 this.dataBox.fetch(dataOptions, this.searchField.results.data);
 }
 }
 
 },
 onFacetFilterChange: function(options){
 this.jsonParams = options.jsonParams;
 this.dataBox.fetch(options);
 },
 dispose: function(){
 if (this.searchField) {
 delete this.searchField.isFuzzyMode;
 }
 syra_site.disposeObject(this.functionsBox);
 syra_site.disposeObject(this.dataBox);
 syra_site.disposeObject(this.facetBar);
 DesktopPage.prototype.dispose.call(this);
 }
 });*/