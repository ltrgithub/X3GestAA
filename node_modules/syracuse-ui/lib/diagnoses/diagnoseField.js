"use strict";

function _addIconText(slot, text, severity) {
	slot.appendChild(syra_menus.addFontIconText(text, "s-diag-field s-diag-" + severity, severity == "info" ? severity : "diagnose"));
}

function _addMessage(field, $diagnose) {
	$diagnose.$message && _addIconText(field.diagsSlot, $diagnose.$message, $diagnose.$severity);
}

function _refreshParentBoxes(box, update, add) {
	while (box) {
		box.severitiesCount = box.severitiesCount || {};
		var prioritySeverity;
		var severities = ["fatal", "error", "warning", "info", "success"];
		for (var ii = 0, jj = severities.length; ii < jj; ii++) {
			var severity = severities[ii];
			if (update[severity]) {
				if (add) {
					box.severitiesCount[severity] = (box.severitiesCount[severity] || 0) + update[severity];
				} else {
					box.severitiesCount[severity] -= update.fatal;
				}
			}
			if (box.severitiesCount[severity]) {
				if (!prioritySeverity) {
					prioritySeverity = severity;
				}
			}
		}
		if (box.tabTitleHead || (box.header && box.$item.$isBoxCollapsable)) {
			if (add && box.prioritySeverity != prioritySeverity) {
				box.diagnoseBtn = syra_menus.button.add({
					parent: box,
					slot: box.ensureButtonsSlot(),
					text: syra_local.box_diagnoses,
					css: box.$skin + "-btn",
					iconOnly: true,
					fontIcon: prioritySeverity == "info" ? prioritySeverity : "diagnose"
				});
				box.diagnoseBtn.link.className += " s-diag-" + prioritySeverity;
				box.diagnoseBtn.link.title = "";
				box.diagnoseBtn.link.syrainout = box.id;
			}
			box.prioritySeverity = prioritySeverity;
			if (!box.prioritySeverity) {
				syra_menus.button.remove(box.diagnoseBtn);
				delete box.diagnoseBtn;
			}
		}
		box = box.boxParent;
	}
}

function _onClickGoToField() {
	var field = syra_store.get(this.fieldId);
	if (field) {
		field.focus && field.focus();
		exports.walkToField(this.parent, 0, field);
	}
}

exports.show = function(panel, message) {
	var field = message.field;
	if (field) {
		field.isDiagnosePopup = field.$item.$inplace && !field.$item.$isDiagnoseInline;
		if (!field.isDiagnoseDisabled && message.$diagnoses && message.$diagnoses.length > 0) {
			if (field.isDiagnosePopup) {
				if (!field.mnPickers.diagnose && !syra_site.isTabletDevice) {
					var severity = message.$diagnoses[0].$severity;
					var css = field.$isEditMode ? "s-diag-inline-edit" : "s-diag-inline";
					field.mnPickers.diagnose = syra_menus.addFontIconFlag(css + " s-diag-" + severity, severity == "info" ? severity : "diagnose");
					field._dataValue.appendChild(field.mnPickers.diagnose);
				}
			} else {
				field.diagsSlot = document.createElement("div");
				field.diagsSlot.className = "s-diag-field-slot";
			}
			var severities = {};
			for (var ii = 0, jj = message.$diagnoses.length; ii < jj; ii++) {
				var item = panel.addDiagnoseItem(field.page, message.$diagnoses[ii], field);
				var topLinkText;
				if (field.isDiagnosePopup) {
					var text = "";
					if (field.articleParent.getRecordIndex) {
						text = " (line " + (field.articleParent.getRecordIndex() + 1) + " )";
					}
					topLinkText = (field.getTitle() || field.$field.$title || "") + text;
				} else {
					// title for single record collections if not in field data
					if (!field.getTitle() && !field.$field.$title && field.arrayLevel && field.arrayLevel == "cell") {
						var parent = field.articleParent.articleParent;
						var title = parent.titleLabel ? parent.titleLabel : (parent.$field ? parent.$field.$title : title);
						topLinkText = title + ":";
					} else {
						topLinkText = (field.getTitle() || field.$field.$title || field.$item.$bind) + ":";
					}
					_addMessage(field, item.$diagnose);
				}

				var gotoBtn = syra_menus.button.add({
					parent: panel,
					slot: this.msgItem,
					text: topLinkText,
					css: "s-diagnose-msg-link",
					btnclick: _onClickGoToField,
					fieldId: field.id
				});
				item.addTopLabel();
				severities[item.$diagnose.$severity] = (severities[item.$diagnose.$severity] || 0) + 1;
				if (field.$item.$isExpressionChild) {
					var dom = document.createElement("span");
					dom.setAttribute("data-s-menu", field.id);
					dom.textContent = gotoBtn.link.textContent.toUpperCase() + " ";
					item.topLabel.insertBefore(dom, item.topLabel.firstChild);
					if (field.diagsSlot) {
						field.diagsSlot.style.display = "none";
					}
				} else {
					item.topLabel.insertBefore(gotoBtn.link, item.topLabel.firstChild);
				}
			}
			_refreshParentBoxes(field.boxParent, severities, true);
			syra_site.dom.toggleClass(field._dataValue, "s-" + item.$diagnose.$severity, true);
			field.diagsSlot && field._core.appendChild(field.diagsSlot);
		}
	}
};

exports.clean = function(panel, field) {
	if (field.diagsSlot) {
		field.diagsSlot.parentNode.removeChild(field.diagsSlot);
		delete field.diagsSlot;
	}
	if (field.mnPickers.diagnose) {
		field.mnPickers.diagnose.parentNode.removeChild(field.mnPickers.diagnose);
		delete field.mnPickers.diagnose;
	}

	var css = field._dataValue.className;
	var severities = {};
	var items = panel.getFieldItems(field);
	for (var ii = 0, jj = items.length; ii < jj; ii++) {
		var item = items[ii];
		severities[item.$diagnose.$severity] = (severities[item.$diagnose.$severity] || 0) + 1;
		css = css.replace("s-" + item.$diagnose.$severity, "");
		item.clean();
	}
	field._dataValue.className = css;
	_refreshParentBoxes(field.boxParent, severities, false);
};

exports.onFieldItemInOut = function(panel, field, onEnter) {
	var items = panel.getFieldItems(field);
	if (field.isDiagnosePopup && items) {
		if (onEnter) {
			if (!field.diagsSlot) {
				if (items.length) {
					field.diagsSlot = document.createElement("div");
					field.diagsSlot.className = "s-diag-field-slot-popup";
					for (var ii = 0, jj = items.length; ii < jj; ii++) {
						_addMessage(field, items[ii].$diagnose);
					}
					field.diagsPopup = syra_site.dialogManager.openPopup(field.page, {
						content: {},
						slot: field.diagsSlot,
						position: {
							my: "left top",
							at: "left bottom",
							of: $(field.domItem)
						},
						onClose: function() {
							syra_site.dom.removeChild(field.diagsSlot);
							field.diagsSlot = field.diagsPopup = null;
						}
					});
				}
			}
		} else {
			field.diagsPopup && field.diagsPopup.close();
		}
	}
};


exports.walkToField = function(panel, btn, field) {
	if (panel.fieldStack && panel.fieldStack.length > 0) {
		var focused = panel._focused;
		var items = field && panel.getFieldItems(field);
		if (!btn && items && items.length) {
			focused = items[0];
		} else {
			var first, last, next;
			for (var ii = 0, jj = panel.fieldStack.length; ii < jj; ii++) {
				var last = panel.fieldStack[ii];
				if (first == undefined) {
					first = last;
				}
				if (panel._focused && panel._focused.field == last.field) {
					next = true;
				} else {
					if (next === true) {
						next = last;
					}
				}
			}
			if (panel._focused) {
				focused = panel._focused == last ? first : ((next === true) ? first : next);
			} else {
				focused = first;
			}
			focused.field.focus && focused.field.focus();
		}
		focused.focus();
		panel.refresh();
	}
};