"use strict";

function _addIconText(slot, text, severity) {
	slot.appendChild(syra_menus.addFontIconText(text, "s-diag-field s-diag-" + severity, severity == "info" ? severity : "diagnose"));
}

function _addMessage(field, $diagnose) {
	$diagnose.$message && _addIconText(field.diagsSlot, $diagnose.$message, $diagnose.$severity);
}

function _refreshParentBoxes(box, update, add) {
	while (box) {
		box.severitiesCount = box.severitiesCount || {};
		var prioritySeverity;
		var severities = ["fatal", "error", "warning", "info", "success"];
		for (var ii = 0, jj = severities.length; ii < jj; ii++) {
			var severity = severities[ii];
			if (update[severity]) {
				if (add) {
					box.severitiesCount[severity] = (box.severitiesCount[severity] || 0) + update[severity];
				} else {
					box.severitiesCount[severity] -= update.fatal;
				}
			}
			if (box.severitiesCount[severity]) {
				if (!prioritySeverity) {
					prioritySeverity = severity;
				}
			}
		}
		if (box.tabTitleHead || (box.header && box.$item.$isBoxCollapsable)) {
			if (add && box.prioritySeverity != prioritySeverity) {
				box.showButton("diagnoses", true, undefined, prioritySeverity == "info" ? prioritySeverity : "diagnose");
				var btn = box.btns.items.diagnoses;
				btn.className += " s-diag-" + prioritySeverity;
				btn.title = "";
				btn.syrainout = box.id;
			}
			box.prioritySeverity = prioritySeverity;
			!box.prioritySeverity && box.showButton("diagnoses", false);
		}
		box = box.boxParent;
	}
}

exports.show = function(panel, message) {
	var field = message.field;
	if (field) {
		field.isDiagnosePopup = field.$item.$inplace && !field.$item.$isDiagnoseInline;
		if (!field.isDiagnoseDisabled && message.$diagnoses && message.$diagnoses.length > 0) {
			if (field.isDiagnosePopup) {
				if (!field.mnPickers.diagnose && !syra_site.isTabletDevice) {
					var severity = message.$diagnoses[0].$severity;
					var css = field.$isEditMode ? "s-diag-inline-edit" : "s-diag-inline";
					field.mnPickers.diagnose = syra_menus.addFontIconFlag(css + " s-diag-" + severity, severity == "info" ? severity : "diagnose");
					field._dataValue.appendChild(field.mnPickers.diagnose);
				}
			} else {
				field.diagsSlot = document.createElement("div");
				field.diagsSlot.className = "s-diag-field-slot";
			}
			var severities = {};
			for (var ii = 0, jj = message.$diagnoses.length; ii < jj; ii++) {
				var diagInfo = {
					page: field.articleParent.page,
					article: field.articleParent,
					field: field,
					$diagnose: message.$diagnoses[ii]
				};
				panel._diagnoses.push(diagInfo);
				var topLinkText;
				if (field.isDiagnosePopup) {
					var text = "";
					if (field.articleParent.getRecordIndex) {
						text = " (line " + (field.articleParent.getRecordIndex() + 1) + " )";
					}
					topLinkText = (field.getTitle() || field.$field.$title || "") + text;
				} else {
					// title for single record collections if not in field data
					if (!field.getTitle() && !field.$field.$title && field.arrayLevel && field.arrayLevel == "cell") {
						var parent = field.articleParent.articleParent;
						var title = parent.titleLabel ? parent.titleLabel : (parent.$field ? parent.$field.$title : title);
						topLinkText = title + ":";
					} else {
						topLinkText = (field.getTitle() || field.$field.$title || field.$item.$bind) + ":";
					}
					_addMessage(field, diagInfo.$diagnose);
				}

				var topBtn = syra_menus.addTextButton(topLinkText, "s-diagnose-msg-link", "goToField");
				field.articleParent.setArticleId(topBtn);
				topBtn.syraFieldId = field.id;

				panel.addTopLabel(diagInfo);
				severities[diagInfo.$diagnose.$severity] = (severities[diagInfo.$diagnose.$severity] || 0) + 1;
				if (field.$item.$isExpressionChild) {
					var dom = document.createElement("span");
					dom.setAttribute("data-s-menu", field.id);
					dom.textContent = topBtn.textContent.toUpperCase() + " ";
					diagInfo.topLabel.insertBefore(dom, diagInfo.topLabel.firstChild);
					if (field.diagsSlot) {
						field.diagsSlot.style.display = "none";
					}
				} else {
					diagInfo.topLabel.insertBefore(topBtn, diagInfo.topLabel.firstChild);
				}
			}
			_refreshParentBoxes(field.boxParent, severities, true);
			syra_site.dom.toggleClass(field._dataValue, "s-" + diagInfo.$diagnose.$severity, true);
			field.diagsSlot && field._core.appendChild(field.diagsSlot);
		}
	}
};


exports.clean = function(panel, field) {
	if (field.diagsSlot) {
		field.diagsSlot.parentNode.removeChild(field.diagsSlot);
		delete field.diagsSlot;
	}
	if (field.mnPickers.diagnose) {
		field.mnPickers.diagnose.parentNode.removeChild(field.mnPickers.diagnose);
		delete field.mnPickers.diagnose;
	}

	var css = field._dataValue.className;
	var severities = {};
	var newDiags = [];
	for (var ii = 0, jj = panel._diagnoses.length; ii < jj; ii++) {
		var diag = panel._diagnoses[ii];
		if (diag.field == field) {
			if (diag.msgItem) {
				syra_site.dom.removeChild(diag.msgItem);
				if (diag == panel._diagnoseFocused) {
					panel._diagnoseFocused = null;
				}
				delete diag.msgItem;
			}
			severities[diag.$diagnose.$severity] = (severities[diag.$diagnose.$severity] || 0) + 1;
			css = css.replace("s-" + diag.$diagnose.$severity, "");
		} else {
			newDiags.push(diag);
		}
	}
	panel._diagnoses = newDiags;
	field._dataValue.className = css;
	_refreshParentBoxes(field.boxParent, severities, false);
};

exports.onFieldItemInOut = function(panel, field, onEnter) {
	var diags = panel.getFieldDiagnoses(field);
	if (field.isDiagnosePopup && diags) {
		if (onEnter) {
			if (!field.diagsSlot) {
				if (diags.length) {
					field.diagsSlot = document.createElement("div");
					field.diagsSlot.className = "s-diag-field-slot-popup";
					for (var ii = 0, jj = diags.length; ii < jj; ii++) {
						_addMessage(field, diags[ii].$diagnose);
					}
					field.diagsPopup = syra_site.dialogManager.openPopup(field.page, {
						content: {},
						slot: field.diagsSlot,
						position: {
							my: "left top",
							at: "left bottom",
							of: $(field.domItem)
						},
						onClose: function() {
							syra_site.dom.removeChild(field.diagsSlot);
							field.diagsSlot = field.diagsPopup = null;
						}
					});
				}
			}
		} else {
			field.diagsPopup && field.diagsPopup.close();
		}
	}
};