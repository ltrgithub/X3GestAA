"use strict";
var helpers = require('syracuse-core/lib/helpers');
var BoxDiagnose = require('syracuse-ui/lib/diagnoses/boxDiagnose').BoxDiagnose;

exports.drawDiagnose = function(field, $diagnose, severityGroup){
    var link = document.createElement("a");
    
    var label = document.createElement("label");
    label.className = "s-field-diagnose-msg-" + severityGroup.severity;
    
    if (field.isDiagnoseInPlace) {
        if (!field._diagnoseFlag) {
            field._diagnoseFlag = document.createElement("a");
            field._diagnoseFlag.className = "s-field-diagnose-flag-" + severityGroup.severity;
            field.appendToPickerBox(field._diagnoseFlag);
        }
        link.className = "s-field-diagnose-link s-field-diagnose-link-" + severityGroup.severity;
        label.innerHTML = document.site.formatHTMLMessage($diagnose.message);
        
        $(label).prepend($(link).text(field.getTitle() + ":")).appendTo(field.domDiagnose);
        
        var diagLink = document.createElement("a");
        diagLink.className = "s-diag-view-msg-link";
        diagLink.setAttribute("data-s-picker", "field-msg");
        diagLink.setAttribute("data-s-menu", field.id);
        diagLink.setAttribute("data-s-article", field.articleParent.id);
        var options = {};
        var index = field.arrayLevel && field.arrayLevel == "cell" ? ' (' + field.articleParent.dataset.$serverIndex + ')' : index; // in case of collection field
        options.$$fieldLink = $(diagLink).text((field.getTitle() || field.$field.$title) + index + " :");
        options.field = field;
        severityGroup.drawDiagnose($diagnose, options);
        drawBoxParentDiagnose(field, $diagnose);
        field.diagSeverities = field.diagSeverities || [];
        field.diagSeverities.push($diagnose.severity);
    }
    else {
        if (!severityGroup.$$group.children().children().children("a[data-s-menu='" + field.id + "']")[0]) {
            link.className = "s-diag-view-msg-link";
            link.setAttribute("data-s-picker", "field-msg");
            var options = {};
            
            // title for single record collections if not in field data
            if (!field.getTitle() && !field.$field.$title && field.arrayLevel && field.arrayLevel == "cell") {
                var parent = field.articleParent.articleParent;
                var title = parent.$field ? parent.$field.$title : title;
                options.$$fieldLink = $(link).text(title + ":");
            }
            else {
                options.$$fieldLink = $(link).text((field.getTitle() || field.$field.$title) + ":");
            }
            options.field = field;
            severityGroup.drawDiagnose($diagnose, options);
            drawBoxParentDiagnose(field, $diagnose);
            field.diagSeverities = field.diagSeverities || [];
            field.diagSeverities.push($diagnose.severity);
        }
        label.innerHTML = document.site.formatHTMLMessage($diagnose.message);
        field.domDiagnose.appendChild(label);
        link.setAttribute("data-s-menu", field.id);
    }
    link.setAttribute("data-s-article", field.articleParent.id);
    link.setAttribute("data-s-field", field.id);
};


/**********************Article diagnose (for article flaging, necessary to run field diagnose cleaning)*********/
exports.cleanRecordDiagnoses = function(record){
    var rr = record;
    var boxDiagnose = rr.boxDiagnose;
    if (boxDiagnose) {
    
        // get ids of fields concerned, and clean corresponding diagnose in diagnoses panel
        var ids = [];
        var fieldsData = boxDiagnose.fieldsData;
        var severities = ["fatal", "error", "warning", "info"];
        for (var ii = 0; ii < fieldsData.length; ii++) {
            var fieldId = fieldsData[ii].fieldId;
            ids.push(fieldId);
            record.page.diagnosesPanel.emptyDiagnoseByFieldId(fieldId);
            //document.site.mainPage.diagnosesPanel.emptyDiagnoseByFieldId(fieldId);
            //            if (document.site.mainPage.diagnosesPanel) {
            //                document.site.mainPage.diagnosesPanel.emptyDiagnoseByFieldId(fieldId);
            //            }
        }
        
        // cleaning boxes up in the tree
        while (rr.boxParent) {
            if (boxDiagnose) {
                var fieldsData = boxDiagnose.fieldsData;
                for (var ii = 0; ii < fieldsData.length; ii++) {
                    var fieldId = fieldsData[ii].fieldId;
                    // only for the ids of the fields under the first concerned record
                    if (ids.indexOf(fieldId) != -1) {
                        for (var jj = 0; jj < severities.length; jj++) {
                            var severity = severities[jj];
                            var diagCount = fieldsData[ii].severitiesCount[severity];
                            while (diagCount > 0) {
                                boxDiagnose.removeDiagnoseIcon(fieldId, severity);
                                diagCount--;
                            }
                        }
                        
                    }
                    
                }
            }
            rr = rr.boxParent;
            boxDiagnose = rr.boxDiagnose;
        }
    }
};

function drawBoxParentDiagnose(field, $diagnose){
    var ff = field;
    while (ff.boxParent) {
        // collapsible
        //ff.boxParent.$opened
        if (ff.boxParent.$item.$isBoxCollapsable) {
            var html = document.createElement("a");
            ff.boxParent._header.appendChild(html);
            (ff.boxParent.boxDiagnose = ff.boxParent.boxDiagnose || new BoxDiagnose(html)).appendDiagnoseIcon(field.id, $diagnose.severity);
        }
        
        else 
            // tab 
            //ff.boxParent.isTabLayout
            if (ff.boxParent.tabTitle) {
                (ff.boxParent.boxDiagnose = ff.boxParent.boxDiagnose || new BoxDiagnose(ff.boxParent.tabTitle, true)).appendDiagnoseIcon(field.id, $diagnose.severity);
            }
            // other
            else {
                (ff.boxParent.boxDiagnose = ff.boxParent.boxDiagnose || new BoxDiagnose()).appendDiagnoseIcon(field.id, $diagnose.severity);
            }
        
        ff = ff.boxParent;
    }
};

function emptyBoxParentDiagnose(field){
    var ff = field;
    if (field.diagSeverities) {
        while (ff.boxParent) {
            if (ff.boxParent.boxDiagnose) {
                for (var ii = 0; ii < field.diagSeverities.length; ii++) {
                    ff.boxParent.boxDiagnose.removeDiagnoseIcon(field.id, field.diagSeverities[ii]);
                }
            }
            ff = ff.boxParent;
        }
        field.diagSeverities = null;
    }
};

exports.emptyDiagnoseSlot = function(field){
    if (field.domDiagnose) {
        document.site.emptyDom(field.domDiagnose);
        field.domDiagnose.style.visibility = "hidden";
        if (field._diagnoseFlag) {
            field.removeFromPickerBox(field._diagnoseFlag);
            delete field._diagnoseFlag;
        }
    }
    if (field.diagSeverities) {
        for (var ii = 0; ii < field.diagSeverities.length; ii++) {
            field.toggleDiagnose("s-" + field.diagSeverities[ii]);
        }
    }
    
    emptyBoxParentDiagnose(field);
};
exports.ensureDiagnoseSlot = function(field){
    if (!field.domDiagnose) {
        field.domDiagnose = document.createElement("div");
        field.domDiagnose.className = "s-field-diagnose";
        if (field.$item.$inplace && field.articleParent.ensureFieldDiagnoseSlot) {
            field.isDiagnoseInPlace = true;
            field.articleParent.ensureFieldDiagnoseSlot(field);
        }
        else {
            field._core.appendChild(field.domDiagnose);
        }
    }
    else {
        document.site.emptyDom(field.domDiagnose);
    }
};

exports.toggleDiagnose = function(field, css, show){
    if (field._input) {
        document.site.toggleClass(field._input, css, show);
    }
    document.site.toggleClass(field._dataValue, css, show);
};
