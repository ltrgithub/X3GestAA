"use strict";
var helpers = require('syracuse-core/lib/helpers');

exports.drawDiagnose = function(field, $diagnose, severityGroup){
    var label = document.createElement("label");
    label.className = "s-field-diagnose-msg-" + severityGroup.$severity;
    
    if (field.popupDiagnose) {
        if (!field._diagnoseFlag) {
            field._diagnoseFlag = document.createElement("a");
            field._diagnoseFlag.className = "s-field-diagnose-flag-" + severityGroup.$severity;
            field.appendToPickerBox(field._diagnoseFlag);
        }
        var link = document.createElement("a");
        link.className = "s-field-diagnose-link s-field-diagnose-link-" + severityGroup.$severity;
        label.innerHTML = document.site.formatHTMLMessage($diagnose.message || $diagnose.$message);
        label.appendChild(link);
        field.diagnoseFieldSlot.appendChild(label);
        
        
        link = document.createElement("a");
        link.className = "s-diagnose-msg-link";
        link.setAttribute("data-s-picker", "field-msg");
        link.setAttribute("data-s-menu", field.id);
        link.setAttribute("data-s-article", field.articleParent.id);
		link.setAttribute("data-s-field", field.id);
        var index = field.arrayLevel && field.arrayLevel == "cell" ? ' (line ' + (field.articleParent.dataset.$serverIndex + 1) + ')' : index; // in case of collection field
        link.textContent = (field.getTitle() || field.$field.$title) + index + " :";
        severityGroup.drawDiagnose($diagnose, {
            fieldLink: link,
            field: field
        });
        field.boxParent.toggleDiagnoseIcon(field.id, $diagnose.severity || $diagnose.$severity, true);
        field.diagSeverities = field.diagSeverities || [];
        field.diagSeverities.push($diagnose.severity || $diagnose.$severity);
    }
    else {
        if (!severityGroup.$$group.children().children().children("a[data-s-menu='" + field.id + "']")[0]) {
            var link = document.createElement("a");
            link.className = "s-diagnose-msg-link";
            link.setAttribute("data-s-picker", "field-msg");
            link.setAttribute("data-s-menu", field.id);
            link.setAttribute("data-s-article", field.articleParent.id);
            link.setAttribute("data-s-field", field.id);
            // title for single record collections if not in field data
            if (!field.getTitle() && !field.$field.$title && field.arrayLevel && field.arrayLevel == "cell") {
                var parent = field.articleParent.articleParent;
                var title = parent.titleText ? parent.titleText : (parent.$field ? parent.$field.$title : title);
                link.textContent = title + ":";
            }
            else {
                link.textContent = (field.getTitle() || field.$field.$title) + ":";
            }
            severityGroup.drawDiagnose($diagnose, {
                fieldLink: link,
                field: field
            });
            field.boxParent.toggleDiagnoseIcon(field.id, $diagnose.severity || $diagnose.$severity, true);
            field.diagSeverities = field.diagSeverities || [];
            field.diagSeverities.push($diagnose.severity || $diagnose.$severity);
        }
        label.innerHTML = document.site.formatHTMLMessage($diagnose.message || $diagnose.$message);
        field.diagnoseFieldSlot.appendChild(label);
    }
    
};

/**********************Article diagnose (for article flaging, necessary to run field diagnose cleaning)*********/
exports.emptyDiagnoseSlot = function(field){
    if (field.diagnoseFieldSlot) {
        document.site.emptyDom(field.diagnoseFieldSlot);
        field.diagnoseFieldSlot.style.visibility = "hidden";
        if (field._diagnoseFlag) {
            field.removeFromPickerBox(field._diagnoseFlag);
            delete field._diagnoseFlag;
        }
        // grid cell cases
        if (field.popupDiagnose) {
            field.popupDiagnose = field.popupDiagnoseBody = null;
            if (field.articleParent.ensureFieldDiagnoseSlot) {
                field.articleParent.ensureFieldDiagnoseSlot(false);
            }
        }
    }
    if (field.diagSeverities) {
        for (var ii = 0; ii < field.diagSeverities.length; ii++) {
            field.toggleDiagnose("s-" + field.diagSeverities[ii]);
        }
    }
    
    if (field.diagSeverities) {
        for (var ii = 0; ii < field.diagSeverities.length; ii++) {
            field.boxParent.toggleDiagnoseIcon(field.id, field.diagSeverities[ii], false);
        }
        field.diagSeverities = null;
    }
};
exports.ensureDiagnoseSlot = function(field){
    if (!field.diagnoseFieldSlot) {
        field.diagnoseFieldSlot = document.createElement("div");
        field.diagnoseFieldSlot.className = "s-field-diagnose";
    }
    document.site.emptyDom(field.diagnoseFieldSlot);
    if (field.$item.$inplace && !field.$item.$isDiagnoseInline) {
        if (!field.popupDiagnose) {
            field.popupDiagnose = document.createElement("div");
            field.popupDiagnose.className = "s-diagnose-popup";
            field.popupDiagnoseBody = document.createElement("div");
            field.popupDiagnoseBody.className = "s-diagnose-popup-body";
            field.popupDiagnose.appendChild(field.popupDiagnoseBody);
        }
        field.popupDiagnoseBody.appendChild(field.diagnoseFieldSlot);
        if (field.articleParent.ensureFieldDiagnoseSlot) {
            field.articleParent.ensureFieldDiagnoseSlot(true);
        }
    }
    else {
        field._core.appendChild(field.diagnoseFieldSlot);
    }
    
};

exports.toggleDiagnose = function(field, css, show){
    if (field._input) {
        document.site.toggleClass(field._input, css, show);
    }
    document.site.toggleClass(field._dataValue, css, show);
};
