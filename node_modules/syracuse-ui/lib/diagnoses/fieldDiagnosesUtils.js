"use strict";
var helpers = require('syracuse-core/lib/helpers');

exports.drawDiagnose = function(field, $diagnose, severityGroup){
    var link = document.createElement("a");
    
    var label = document.createElement("label");
    label.className = "s-field-diagnose-msg-" + severityGroup.severity;
    
    if (field.isDiagnoseInPlace) {
        if (!field._diagnoseFlag) {
            field._diagnoseFlag = document.createElement("a");
            field._diagnoseFlag.className = "s-field-diagnose-flag-" + severityGroup.severity;
            field.appendToPickerBox(field._diagnoseFlag);
        }
        link.className = "s-field-diagnose-link s-field-diagnose-link-" + severityGroup.severity;
        label.innerHTML = document.site.formatHTMLMessage($diagnose.message);
        
        $(label).prepend($(link).text(field.getTitle() + ":")).appendTo(field.domDiagnose);
    }
    else {
        if (!severityGroup.$$group.children().children().children("a[data-s-menu='" + field.id + "']")[0]) {
            link.className = "s-diag-view-msg-link";
            //severityGroup.drawLabel($diagnose).prepend($(link).text(field.$field.$title + ":")).appendTo(severityGroup.$$group);
            var options = {};
            options.$$fieldLink = $(link).text(field.$field.$title + ":");
            options.field = field;
            severityGroup.drawDiagnose($diagnose, options);
            drawBoxParentDiagnose(field, $diagnose);
            field.diagSeverities = field.diagSeverities || [];
            field.diagSeverities.push($diagnose.severity);
        }
        label.innerHTML = document.site.formatHTMLMessage($diagnose.message);
        field.domDiagnose.appendChild(label);
        link.setAttribute("data-s-menu", field.id);
    }
    link.setAttribute("data-s-article", field.articleParent.id);
    link.setAttribute("data-s-field", field.id);
};


/**********************Article diagnose (for article flaging, necessary to run field diagnose cleaning)*********/

/******** Box diagnose (for diagnose icon appending) ********/
function BoxDiagnose(titleDom, isTab){
    this.titleDom = titleDom;
    this.isTab = isTab;
    this.diagClassNameRoot = this.isTab ? "s-box-tab-" : "s-box-collapsible-";
    this.severitiesCount = {
        "error": 0,
        "fatal": 0,
        "warning": 0,
        "info": 0
    };
    this.fieldsData = [];
}

helpers.defineClass(BoxDiagnose, null, {
    addSeverityCount: function(severity){
        this.severitiesCount[severity]++;
    },
    removeSeverityCount: function(severity){
        this.severitiesCount[severity]--;
    },
    addFieldData: function(fieldId, severity){
        var self = this;
        var index;
        for (var ii = 0; ii < self.fieldsData.length; ii++) {
            index = self.fieldsData[ii].fieldId == fieldId ? ii : index;
            if (index != undefined) {
                break;
            }
        }
        var fieldData = index != undefined ? self.fieldsData[index] : {};
        fieldData.fieldId = fieldData.fieldId || fieldId;
        fieldData.severitiesCount = fieldData.severitiesCount ||
        {
            "error": 0,
            "fatal": 0,
            "warning": 0,
            "info": 0
        };
        fieldData.severitiesCount[severity]++;
        if (index != undefined) {
            this.fieldsData.splice(index);
        }
        this.fieldsData.push(fieldData);
    },
    removeFieldData: function(fieldId, severity){
        var self = this;
        if (self.fieldsData) {
            var index;
            for (var ii = 0; ii < self.fieldsData.length; ii++) {
                index = self.fieldsData[ii].fieldId == fieldId ? ii : index;
                if (index != undefined) {
                    break;
                }
            }
            // update field data
            if (index != undefined) {
                self.fieldsData[index].severitiesCount[severity]--;
            }
        }
    },
    getPrioritySeverity: function(){
        var self = this;
        var priorityOrder = ["fatal", "error", "warning", "info"];
        var severity = "";
        for (var i = 0; i < priorityOrder.length; i++) {
            severity = self.severitiesCount[priorityOrder[i]] > 0 ? priorityOrder[i] : severity;
            if (severity) {
                return severity;
            }
        }
        return severity;
    },
    appendDiagnoseIcon: function(fieldId, severity){
        var self = this;
        
        // add field data
        self.addFieldData(fieldId, severity);
        
        // following operations are only necessary for box with titleDom
        if (self.titleDom) {
        
            // add severity count
            self.addSeverityCount(severity);
            
            
            var prioritySeverity = self.getPrioritySeverity();
            
            // two possibilites 
            //"icon already" -> change icon or not ?
            //"icon not yet" -> add it
            
            // icon already appended
            if (self.$hasIcon) {
                // severity priority change ? else do nothing
                
                if (self.prioritySeverity != prioritySeverity) {
                    document.site.toggleClass(self.titleDom, self.diagClassNameRoot + self.prioritySeverity);
                    document.site.toggleClass(self.titleDom, self.diagClassNameRoot + prioritySeverity, true);
                    //self.$$titleDom.toggleClass(self.diagClassNameRoot + self.prioritySeverity).toggleClass(self.diagClassNameRoot + prioritySeverity);
                }
            }
            // icon not yet appended.
            else {
                document.site.toggleClass(self.titleDom, self.diagClassNameRoot + severity, true);
                //self.$$titleDom.addClass(self.diagClassNameRoot + severity);
                self.$hasIcon = true;
                
            }
            self.prioritySeverity = prioritySeverity;
            self.diagClassName = self.diagClassNameRoot + self.prioritySeverity;
        }
        
        
    },
    removeDiagnoseIcon: function(fieldId, severity){
        var self = this;
        //var diagClassNameRoot = isTab ? "s-box-tab-" : "s-box-collapsible-";
        //var diagClassName = diagClassNameRoot + severity;
        
        
        // remove field data
        self.removeFieldData(fieldId, severity);
        
        if (self.titleDom) {
            // decrease severity count
            self.removeSeverityCount(severity);
            
            // change icon if necessary
            // case 1 : no more priority -> remove
            // case 2 : priority
            // case 2-1 : same as old one, do nothing
            // case 2-2 : different than previous one, change
            
            var prioritySeverity = self.getPrioritySeverity();
            if (!prioritySeverity) {
                document.site.toggleClass(self.titleDom, self.diagClassNameRoot + self.prioritySeverity);
                //self.$$titleDom.toggleClass(self.diagClassNameRoot + self.prioritySeverity);
                self.$hasIcon = false;
            }
            else {
                if (self.prioritySeverity != prioritySeverity) {
                    document.site.toggleClass(self.titleDom, self.diagClassNameRoot + self.prioritySeverity);
                    document.site.toggleClass(self.titleDom, self.diagClassNameRoot + prioritySeverity, true);
                    //self.$$titleDom.toggleClass(self.diagClassNameRoot + self.prioritySeverity).toggleClass(self.diagClassNameRoot + prioritySeverity);
                }
            }
            self.prioritySeverity = prioritySeverity;
            self.diagClassName = self.diagClassNameRoot + self.prioritySeverity;
        }
    },
    dispose: function(){
        delete this.severitiesCount;
        delete this.titleDom;
        delete this.isTab;
        delete this.diagClassNameRoot;
        delete this.fieldsData;
        if (this.$hasIcon) {
            delete this.$hasIcon;
        }
        if (this.prioritySeverity) {
            delete this.prioritySeverity;
        }
        if (this.diagClassName) {
            delete this.diagClassName;
        }
    }
});


exports.cleanRecordDiagnoses = function(record){
    var rr = record;
    var boxDiagnose = rr.boxDiagnose;
    if (boxDiagnose) {
    
        // get ids of fields concerned, and clean corresponding diagnose in diagnoses panel
        var ids = [];
        var fieldsData = boxDiagnose.fieldsData;
        var severities = ["fatal", "error", "warning", "info"];
        for (var ii = 0; ii < fieldsData.length; ii++) {
            var fieldId = fieldsData[ii].fieldId;
            ids.push(fieldId);
            document.site.mainPage.diagnosesPanel.emptyDiagnoseByFieldId(fieldId);
        }
        
        // cleaning boxes up in the tree
        while (rr.boxParent) {
        
            if (boxDiagnose) {
                var fieldsData = boxDiagnose.fieldsData;
                for (var ii = 0; ii < fieldsData.length; ii++) {
                    var fieldId = fieldsData[ii].fieldId;
                    // only for the ids of the fields under the first concerned record
                    if (ids.indexOf(fieldId) != undefined) {
                        for (var jj = 0; jj < severities.length; jj++) {
                            var severity = severities[jj];
                            var diagCount = fieldsData[ii].severitiesCount[severity];
                            while (diagCount > 0) {
                                boxDiagnose.removeDiagnoseIcon(fieldId, severity);
                                diagCount--;
                            }
                        }
                        
                    }
                    
                }
            }
            rr = rr.boxParent;
            boxDiagnose = rr.boxDiagnose;
        }
    }
};

function drawBoxParentDiagnose(field, $diagnose){
    var ff = field;
    
    while (ff.boxParent) {
        // collapsible
        //ff.boxParent.$opened
        if (ff.boxParent.$item.$isBoxCollapsable) {
            var html = document.createElement("a");
            ff.boxParent._header.appendChild(html);
            (ff.boxParent.boxDiagnose = ff.boxParent.boxDiagnose || new BoxDiagnose(html)).appendDiagnoseIcon(field.id, $diagnose.severity);
        }
        
        else 
            // tab 
            //ff.boxParent.isTabLayout
            if (ff.boxParent._tabTitle) {
                (ff.boxParent.boxDiagnose = ff.boxParent.boxDiagnose || new BoxDiagnose(ff.boxParent._tabTitle, true)).appendDiagnoseIcon(field.id, $diagnose.severity);
            }
            
            // other
            else {
                (ff.boxParent.boxDiagnose = ff.boxParent.boxDiagnose || new BoxDiagnose()).appendDiagnoseIcon(field.id, $diagnose.severity);
            }
        
        ff = ff.boxParent;
    }
};

function emptyBoxParentDiagnose(field){
    var ff = field;
    if (field.diagSeverities) {
        while (ff.boxParent) {
            if (ff.boxParent.boxDiagnose) {
                for (var ii = 0; ii < field.diagSeverities.length; ii++) {
                    ff.boxParent.boxDiagnose.removeDiagnoseIcon(field.id, field.diagSeverities[ii]);
                }
            }
            ff = ff.boxParent;
        }
        field.diagSeverities = null;
    }
};

exports.emptyDiagnoseSlot = function(field){
    if (field.domDiagnose) {
        document.site.emptyDom(field.domDiagnose);
        field.domDiagnose.style.visibility = "hidden";
        if (field._diagnoseFlag) {
            field.removeFromPickerBox(field._diagnoseFlag);
            delete field._diagnoseFlag;
        }
    }
    if (field.diagSeverities) {
        for (var ii = 0; ii < field.diagSeverities.length; ii++) {
            field.toggleDiagnose("s-" + field.diagSeverities[ii]);
        }
    }
    emptyBoxParentDiagnose(field);
};
exports.ensureDiagnoseSlot = function(field){
    if (!field.domDiagnose) {
        field.domDiagnose = document.createElement("div");
        field.domDiagnose.className = "s-field-diagnose";
        if (field.$item.$inplace && field.articleParent.ensureFieldDiagnoseSlot) {
            field.isDiagnoseInPlace = true;
            field.articleParent.ensureFieldDiagnoseSlot(field);
        }
        else {
            field._core.appendChild(field.domDiagnose);
        }
    }
    else {
        document.site.emptyDom(field.domDiagnose);
    }
};

exports.showErrors = function(field, errors, options){
    field.applyMetaData({
        $diagnoses: null
    }, options);
    if (errors.length > 0) {
        field.applyMetaData({
            $diagnoses: (field.$displayedDiagnoses = errors.map(function(error){
                return {
                    message: error,
                    severity: "error"
                };
            }))
        }, options);
    }
};

exports.showDiagnoses = function(field, diagnoses, options){
    field.applyMetaData({
        $diagnoses: null
    }, options);
    if (diagnoses.length > 0) {
        field.applyMetaData({
            $diagnoses: diagnoses
        }, options);
    }
};

exports.toggleDiagnose = function(field, css, show){
    if (field._input) {
        document.site.toggleClass(field._input, css, show);
    }
    document.site.toggleClass(field._dataValue, css, show);
};



