"use strict";
var helpers = require('syracuse-core/lib/helpers');

function DiagnoseGroup() {

}

exports.DiagnoseGroup = helpers.defineClass(DiagnoseGroup, null, {
	create: function($severity, viewer) {
		this._groupItem = document.createElement("div");
		this._groupItem.className = 's-diagnose-group-' + (this.$severity = $severity);
		this.$$group = $(this._groupItem);
		this.viewer = viewer;
	},
	empty: function(field) {
		if (field) {
			//this.$$group.children().children().children("a[data-s-menu=" + field.id + "]").parent().parent().remove();
			this.$$group.children().children().children("[data-s-menu=" + field.id + "]").parent().parent().remove();
		} else {
			this.$$group.empty();
		}
	},
	drawDiagnose: function($diagnose, options) {
		var diagMsg = document.createElement("div");
		diagMsg.className = "s-diagnose-msg s-diagnose-msg-" + this.$severity;

		var label = document.createElement("label");
		label.className = "s-diagnose-msg-label";
		var $$label = $(label);
		$$label.append(document.site.formatHTMLMessage($diagnose.message || $diagnose.$message));
		diagMsg.appendChild(label);

		// add field link if any
		if (options) {

			if (options.field && options.field.$item.$isExpressionChild) {
				var dom = document.createElement("span");
				dom.setAttribute("data-s-menu", options.field.id);
				dom.textContent = options.$$fieldLink[0].textContent.toUpperCase() + " ";
				$$label.prepend($(dom));
				options.field.domDiagnose.style.display = "none";
			} else {
				$$label.prepend(options.$$fieldLink);
			}
		}

		// saving diagnose components into viewer diagnoses array
		if (this.viewer._diagnoses) {
			this.viewer._diagnoses.push({
				diagMsg: diagMsg,
				label: label,
				field: options && options.field ? options.field : undefined
			});
		}

		if ($$label.find("br")[0]) { //$diagnose.message.indexOf("\n") > 0
			var expandedText = label.innerHTML.substr(label.innerHTML.indexOf("<br>") + "<br>".length);
			this._wrapTextToHide(expandedText, label, diagMsg);
		} else {
			var diagMaxLength = 130;
			if (label.textContent.length > diagMaxLength) {
				// getting understandable text from 100 first characters
				var maxLengthText = label.textContent.substr(0, diagMaxLength);
				var maxLengthTextWords = maxLengthText.split(/\s/);
				maxLengthTextWords.splice(maxLengthTextWords.length - 1);
				maxLengthText = maxLengthTextWords.join(" ");

				// wrap text to hide
				var expandedText = label.innerHTML.substr(label.innerHTML.lastIndexOf(maxLengthText) + maxLengthText.length);
				this._wrapTextToHide(expandedText, label, diagMsg, true);
			}
		}


		// add links if any
		if ($diagnose.$links || $diagnose.$actions) {
			var container = document.createElement("div");
			container.className = "s-diagnose-links-bar-" + ($diagnose.severity || $diagnose.$severity);
			this.viewer.drawLinks(diagMsg.appendChild(container), $diagnose, this.viewer.page, diagMsg);
		}

		// add stacktrace if any
		if ($diagnose.$stackTrace) {
			// expander
			var html = document.createElement("a");
			html.className = "s-diagnose-msg-more";
			html.setAttribute("data-s-picker", "detail");
			html.textContent = this.viewer.localize.diag_stacktrace;
			diagMsg.appendChild(html);

			// append stacktrace content
			html = document.createElement("div");
			html.className = "s-diagnose-stacktrace";
			html.innerHTML = document.site.formatHTMLMessage($diagnose.stackTrace || $diagnose.$stackTrace);
			html.style.display = "none";
			diagMsg.appendChild(html);
		}

		diagMsg.style.display = "none";
		this._groupItem.appendChild(diagMsg);
	},
	_wrapTextToHide: function(textToHide, label, diagMsg, lineBreak) {
		if (textToHide.match(/\S/g)) {
			label.innerHTML = label.innerHTML.replace(textToHide, (lineBreak ? "<br>" : "") + "<span class='s-diagnose-msg-expanded-text'>" + textToHide + "</span>");
			var hide = document.createElement("div");
			hide.className = "s-diagnose-msg-hide";
			diagMsg.appendChild(hide);
		}
	},
	dispose: function() {
		this.viewer = this.$$group = this._groupItem = null;
	}
});