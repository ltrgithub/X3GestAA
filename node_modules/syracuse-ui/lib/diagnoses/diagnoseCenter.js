"use strict";
var MessageBox = require('syracuse-ui/lib/diagnoses/messageBox').MessageBox;
var pages = require('syracuse-ui/lib/diagnoses/diagnosesPage');
var _diagnosesPanel = require('syracuse-ui/lib/diagnoses/diagnosesPanel');

var _messageBox;


exports.showPage = function(errorPage, error, $diagnoses) {
	if (!(pages[errorPage] && pages[errorPage](error, $diagnoses))) {
		exports.showBox({
			$title: syra_local.error_page_default,
			$message: $diagnoses.length == 1 && $diagnoses[0].$message,
			$diagnoses: $diagnoses,
			callback: function() {
				if (syra_site.lastOpenedMainPageUrlSegments) {
					syra_site.history.load(syra_site.lastOpenedMainPageUrlSegments.$url);
				} else {
					syra_menus.click.navigation();
				}
			}
		});
		return false;
	}
};

exports.showBox = function(options, displayDisabled) {
	_messageBox && _messageBox.dispose();
	options.$type = options.$type || "alert";
	_messageBox = new MessageBox();
	_messageBox.$prototype = {};
	_messageBox.displayDisabled = displayDisabled; // property necessary for htmleditor msgbox
	syra_site.initializeNewItem(_messageBox, options);
	_messageBox.loadBox();
	return _messageBox;
};

exports.getOpenedBox = function() {
	return _messageBox;
};

exports.closeBox = function(closedBy, messageBoxId) {
	if (_messageBox) {
		if (!messageBoxId || messageBoxId == _messageBox.id) {
			_messageBox.close(closedBy);
		}
	}
};

exports.disposeBox = function() {
	_messageBox && _messageBox.dispose();
	_messageBox = null;
};

exports.dispose = function() {
	exports.disposeBox();
};


exports.onBoxItemInOut = function(box, onEnter) {
	_diagnosesPanel.onBoxItemInOut(box, onEnter);
};

exports.hasErrors = function(page) {
	return _diagnosesPanel.hasErrors(page);
};


exports.showDiagnoses = function(message, item, options) {
	if (item && item.isField) {
		item = item.variantItem ? item.variantItem : item;
		message.field = item;
		if (message.field.isDiagnoseDisabled) {
			return;
		}
		item.showDiagnosSlot && item.showDiagnosSlot();
		item = item.boxParent;
		if (message.$diagnoses) {
			if (message.$diagnoses.length == 0) {
				message.$diagnoses = null;
			} else {
				message.field.forceVisibility && message.field.forceVisibility();
			}
		}
	}
	var page = item && item.page;
	if (page && page.diagnosePage) {
		page = page.diagnosePage;
	}
	if (!page || page.disposed) {
		page = syra_site.dialogManager.getTopDialogPage();
		page = page && page._content;
		if (!page || page.disposed) {
			page = syra_site.mainPage;
		}
	}
	if (page && !page.disposed && page != syra_site && page != syra_site.userProfile) {
		if (!page.diagnosesPanel) {
			page.diagnosesPanel = new _diagnosesPanel.DiagnosesPanel();
			page.diagnosesPanel.appendToPage(page);
		}
		page.diagnosesPanel.showDiagnoses(message, page, options);
	} else {
		if (message && message.$diagnoses && message.$diagnoses.length) {
			var onlyOne = message.$diagnoses.length == 1 && message.$diagnoses[0];
			exports.showBox({
				$type: (onlyOne && onlyOne.$severity) || "alert",
				$buttons: "ok",
				$title: syra_local.siteMsgboxTitle,
				$diagnoses: onlyOne ? null : message.$diagnoses,
				$message: (onlyOne && onlyOne.$message) || syra_local.userProfile_siteMsgboxMsg,
				$origin: onlyOne ? onlyOne.$origin : "",
				$useLinkAsOk: (page && page == syra_site.userProfile) ? onlyOne && onlyOne.$links : null //temp hack
			});
		}
	}
};



exports.addIconText = function(slot, text, severity) {
	slot.appendChild(syra_menus.addFontIconText(text, "s-diag-field s-diag-" + severity, severity == "info" ? severity : "diagnose"));
};

exports.addInlineFlag = function(field, message) {
	if (!field.mnPickers.diagnose && !syra_site.isTabletDevice) {
		var severity = message.$diagnoses[0].$severity;
		var css = field.$isEditMode ? "s-diag-inline-edit" : "s-diag-inline";
		field.mnPickers.diagnose = syra_menus.addFontIconFlag(css + " s-diag-" + severity, severity == "info" ? severity : "diagnose");
		field._dataValue.appendChild(field.mnPickers.diagnose);
	}
};

exports.removeInlineFlag = function(field) {
	if (field.mnPickers.diagnose) {
		field.mnPickers.diagnose.parentNode.removeChild(field.mnPickers.diagnose);
		delete field.mnPickers.diagnose;
	}
};