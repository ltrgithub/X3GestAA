"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DiagnoseMessagePopup = require('syracuse-ui/lib/diagnoses/diagnoseMessagePopup').DiagnoseMessagePopup;


function DiagnosesPanel() {}

exports.DiagnosesPanel = helpers.defineClass(DiagnosesPanel, null, {
	appendToPage: function(page) {
		this.page = page;
		this.isPageOwner = true;
		this._item = document.createElement("div");
		this._item.className = "s-diagnose";
		this._item.style.display = "none";
		this.$$item = $(this.page.diagnoseSlot.appendChild(this._item));
	},
	createGroup: function($severity) {
		var slot = document.createElement("div");
		slot.className = 's-diagnose-group-' + $severity;
		return this._groupsMap[$severity] = {
			$severity: $severity,
			slot: this.body.appendChild(slot),
			diagnosesCount: 0
		};
	},
	_setPicker: function(picker, key) {
		picker.setAttribute("data-s-picker", "diag-picker");
		picker.syraDiagPicker = key;
		if (this.isPageOwner) {
			picker.$syraDiagPage = this.page.id;
		}
	},
	_initialize: function() {
		this.localize = document.site.localize;

		this._core = document.createElement("div");
		this._core.className = "s-diagnose-core";
		this.$$core = $(this._item.appendChild(this._core));

		this._close = document.createElement("a");
		this._close.className = "s-diagnose-close";
		this._setPicker(this._close, "diag-close");
		this._core.appendChild(this._close);

		this._content = document.createElement("div");
		this._content.className = "s-diagnose-content";
		this._core.appendChild(this._content);

		this.body = document.createElement("div");
		this.body.className = "s-diagnose-msg-list";
		this.$$body = $(this.body);

		this.fieldDiagnosesCount = 0;
		this._fieldsMap = {};
		this.diagnoses = [];
		this._groupsMap = {};
		this._groups = [this.createGroup("fatal"), this.createGroup("error"), this.createGroup("warning"), this.createGroup("info"), this.createGroup("success")];

		this._content.appendChild(this.body);

		var diagNavBar = document.createElement("div");
		diagNavBar.className = "s-diagnose-navigation-bar";
		this._content.appendChild(diagNavBar);

		this._next = document.createElement("a");
		this._next.className = "s-diagnose-nav-next";
		this._setPicker(this._next, "next");
		this._next.style.display = "none";
		this._next.title = this.localize.diag_next_tooltip;
		this._next.textContent = this.localize.diag_next;
		diagNavBar.appendChild(this._next);

		// links bar (_core child)
		this._diagViewLinks = document.createElement("div");
		this._diagViewLinks.className = "s-diagnose-links-bar";
		this.$$diagViewLinks = $(this._core.appendChild(this._diagViewLinks));

		this._expand = document.createElement("a");
		this._expand.className = "s-diagnose-expander";
		this._setPicker(this._expand, "diag-expand");
		this._expand.style.display = "none";
		this.isCollapsed = true;
		this._core.appendChild(this._expand);

		// diag opening tab (used when diagnoses panel is closed) ($$item child)
		this._opener = document.createElement("a");
		this._opener.className = "s-diagnose-opener";
		this._setPicker(this._opener, "diag-opener");
		this._opener.textContent = this.localize.diag_opener;
		this._opener.style.display = "none";

		var html = document.createElement("div");
		html.className = "s-diagnose-open";
		html.appendChild(this._opener);
		this._item.appendChild(html);
	},
	clean: function() {
		if (this._item) {
			this._item.style.display = "none";

			if (this._menus) {
				this._menus.unload();
				delete this._menus;
			}
			delete this.diagFocused;
			this.total = 0;
			this.fieldDiagnosesCount = 0;
			this._fieldsMap = {};
			this.diagnoses = [];
			for (var ii = 0, jj = this._groups.length; ii < jj; ii++) {
				var group = this._groups[ii];
				document.site.emptyDom(group.slot);
				group.diagnosesCount = 0;
			}
		}
	},
	cleanGlobalDiagnoses: function() {
		if (this.body) {
			if (this.diagnoses.length > 0) {
				var ii = 0;
				while (ii < this.diagnoses.length) {
					if (!this.diagnoses[ii].field) {
						this._cleanDiagnose(this.diagnoses[ii]);
					} else {
						ii++;
					}
				}
			} else {
				this.clean();
			}
		}
	},
	onMessageClick: function(messageLink) {
		var self = this;
		var id = messageLink.getAttribute("data-s-diagmsg-popup");
		if (id) {
			if (self.diagPopups && self.diagPopups[id]) {
				self.diagPopups[id].close();
			}
		} else {
			var label = messageLink.children[0];
			if (messageLink.children[1] && messageLink.children[1].className == "s-diagnose-msg-hide") {
				var msgPopup = new DiagnoseMessagePopup();
				msgPopup.loadBox(label.innerHTML, messageLink.getAttribute("data-s-severity"));
				var diagPopup = self.page.openDialog({
					content: msgPopup,
					$dialogMode: "popup",
					$$dialog: msgPopup.$$item,
					position: {
						my: "left top",
						at: "left bottom",
						of: $(label)
					},
					onClose: function() {
						msgPopup.dispose();
						messageLink.removeAttribute("data-s-diagmsg-popup");
						self.diagPopups[this.id] = null;
					},
					isAutoClose: false
				});
				diagPopup.appendCloseButton(msgPopup.header);
				messageLink.setAttribute("data-s-diagmsg-popup", diagPopup.id);
				self.diagPopups = self.diagPopups || {};
				self.diagPopups[diagPopup.id] = diagPopup;
			}
		}
	},
	onClickPicker: function(picker) {
		switch (picker.syraDiagPicker) {
			case "diag-expand":
				this.isCollapsed = !this.isCollapsed;
				this._setExpandState(true);
				this.page.onWindowResize();
				break;
			case "field-msg":
				var article = document.controller.findArticle($(picker));
				if (article) {
					var fieldId = picker.getAttribute("data-s-diag-field");
					var field = article.idMap[fieldId];
					if (field) {
						if (field.focus) {
							field.focus();
						}
						this.onNavigationClick(0, field);
					}
				}
				break;
			case "diag-close":
				this._item.style.display = "none";
				this.cleanGlobalDiagnoses();
				this.page.onWindowResize();
				break;
			case "diag-opener":
				if (this._opener && this._core) {
					this._core.style.display = "inline-block";
					this._opener.style.display = "none";
					this.page.onWindowResize();
				}
				break;
			case "detail":
				$(picker.previousElementSibling).toggleClass("s-diagnose-msg-label-hidden").toggleClass("s-diagnose-msg-label");
				$(picker.nextElementSibling).toggle();
				$(picker).toggleClass("s-diagnose-msg-more").toggleClass("s-diagnose-msg-less");
				//document.site.scrollToItem(this.diagFocused.diagMsg, $(this._content), true);

				// scroll diagmsg on opening in detailed mode
				/*
             if (picker.className === "s-diagnose-msg-less") {
             var prevDiagMsg = picker.parentNode.previousElementSibling;
             if (prevDiagMsg && prevDiagMsg.className.indexOf("s-diagnose-msg") != -1) {
             var elemBottom = $(prevDiagMsg).position().top + $(prevDiagMsg).height();
             this._content.scrollTop += elemBottom;
             console.log('scrolled');
             }
             }*/
				this.page.onWindowResize();
				break;
			case "next":
				this.onNavigationClick(picker);
				break;
			case "s-diagnose-msg":
				this.onMessageClick(picker);
				break;
		}
	},
	onNavigationClick: function(navLink, field) {
		if (this.diagnoses && this.diagnoses.length > 0) {
			var currentDiagnose = this.diagFocused;
			// if navigation from direct field focus and not from "next" button
			// getting corresponding index to update focus in diagnose panel
			if (!navLink && field && this._fieldsMap[field.id]) {
				currentDiagnose = this._fieldsMap[field.id][0];
			} else {
				var first, last, next;
				for (var ii = 0, jj = this.diagnoses.length; ii < jj; ii++) {
					var diagnose = this.diagnoses[ii];
					if (diagnose.field) {
						last = diagnose;
						if (first == undefined) {
							first = last;
						}
						if (this.diagFocused && this.diagFocused.field == diagnose.field) {
							next = true;
						} else {
							if (next === true) {
								next = last;
							}
						}
					}
				}
				// update index
				if (this.diagFocused) {
					currentDiagnose = this.diagFocused == last ? first : ((next === true) ? first : next);
				} else {
					currentDiagnose = first;
				}
				if (currentDiagnose.field.focus) {
					currentDiagnose.field.focus();
				}
			}
			if (this.diagFocused) {
				document.site.toggleClass(this.diagFocused.label, "s-diagnose-msg-focus", false);
			}
			document.site.toggleClass((this.diagFocused = currentDiagnose).label, "s-diagnose-msg-focus", true);
			if (this.diagFocused.diagMsg) {
				document.site.scrollToItem(this.diagFocused.diagMsg, $(this._content), true);
			}

			this._setExpandState(true);
		}
	},
	_setExpandState: function(refreshDiagnoses) {
		if (refreshDiagnoses) {
			if (this.isCollapsed) {
				for (var ii = 0, jj = this.diagnoses.length; ii < jj; ii++) {
					if (this.diagnoses[ii].diagMsg) {
						this.diagnoses[ii].diagMsg.style.display = "none";
					}
				}
			} else {
				for (var ii = 0, jj = this.diagnoses.length; ii < jj; ii++) {
					this.ensureMessage(this.diagnoses[ii]).style.display = "";
					this._onLastDiagDisplay();
				}
			}
		}
		this._expand.style.display = (this.total == 1) ? "none" : "";
		if (this.isCollapsed) {
			var diagDisplay = (this.diagFocused != undefined) ? this.diagFocused : this.diagnoses[0];
			if (diagDisplay) {
				this.ensureMessage(diagDisplay).style.display = "";
			}
			this._expand.textContent = (this.total - 1) + this.localize.diag_expand;
		} else {
			this._expand.textContent = this.localize.diag_collapse;
		}
	},
	_onLastDiagDisplay: function() {
		// append expander button if necessary
		if (this.lastDiagAppended) {
			var oldDisplayState = this.lastDiagAppended.diagMsg.style.display;
			this.lastDiagAppended.diagMsg.style.display = oldDisplayState === "none" ? "" : oldDisplayState;
			if (this._isEllipsisActive(this.lastDiagAppended.label) && !this.lastDiagAppended.diagInfo.$hasExpander) {
				this._appendExpander(this.lastDiagAppended.diagMsg, this.lastDiagAppended.diagInfo);
			}
			this.lastDiagAppended.diagMsg.style.display = oldDisplayState === "none" ? "none" : oldDisplayState;
			this.lastDiagAppended = null;
		}
	},
	drawLinks: function(slot, message, page) {
		page = page || this.page;
		if (!this._menus) {
			this._menus = page.loadNewItem(slot, {
				$isAuthoringEnabled: false,
				$category: "menus",
				$isOwner: true,
				$skin: "s-diagnose-links"
			});
			this._menus.isDiagnoseMenus = true;
		}
		this._menus.ensurePrivateMenus(message);
	},
	cleanBoxDiagnoses: function(box) {
		if (box.diagnosesFields) {
			var fieldIds = Object.keys(box.diagnosesFields);
			for (var ii = 0, jj = fieldIds.length; ii < jj; ii++) {
				this._cleanFieldDiagnoses(fieldIds[ii]);
			}
			box.diagnosesFields = box.severitiesCount = null;
			this.total = this.diagnoses.length;
			if (this.diagnoses.length == 0) {
				this.clean();
			} else {
				this._setExpandState(false);
			}
		}
	},
	showDiagnoses: function(message, page, options) {
		if (!message || (!message.field && !message.$diagnoses)) {
			if (!this._groups) {
				//not init
				return;
			}
			this.clean();
		} else {
			if (message.field && message.field.$item.$isExpressionChild) {
				return;
			}
			if (!this._core) {
				this._initialize();
			}
			if (this.onSuccess) {
				// clean diagnoses panel
				this.clean();
				// remove success style
				this._diagViewLinks.className = "s-diagnose-links-bar";
				// update success flag
				this.onSuccess = false;
			}
			// append message links
			if (message.$links || message.$actions) {
				// links are most of the times supposed to be sent when there is success after validation
				// flaging success mode, cleaning body
				if (message.$diagnoses.length == 1 && (message.$diagnoses[0].severity || message.$diagnoses[0].$severity) == "success") {
					this.onSuccess = true;
					this.clean();
				}
				this.drawLinks(this._diagViewLinks, message, page);
			}
			if (message.field) {
				this._cleanFieldDiagnoses(message.field.id);
			}
			if (message.$diagnoses && message.$diagnoses.length > 0) {
				if (message.field) {
					this.ensureFieldDiagnoseSlot(message.field);
				}
				for (var ii = 0, jj = message.$diagnoses.length; ii < jj; ii++) {
					var $diagnose = message.$diagnoses[ii];
					var $severity = $diagnose.severity || $diagnose.$severity || "error";
					var group = this._groupsMap[$severity.toLowerCase()];
					if (message.field) {
						this.drawFieldDiagnose(message.field, $diagnose, group);
					} else {
						this.appendDiagnose(group, $diagnose);
					}
				}
				if (message.field) {
					message.field.diagnoseFieldSlot.style.visibility = "";
					if (group) {
						this.toggleFieldDiagnose(message.field, "s-" + group.$severity, true);
					}
				}
			}
			// show/refresh diagnoses panel
			if (!options || !options.noViewer) {
				this.total = this.diagnoses.length;
				// show diagnoses panel if any diagnose
				if (this.total > 0) {
					this._next.style.display = (this.fieldDiagnosesCount > 1) ? "" : "none";
					this._setExpandState(true);
					this._core.style.display = "inline-block";
					this._item.style.display = "";
					// in order to append diag expand button when necessary
					this._onLastDiagDisplay();
					document.site.setZIndex(this._item);
					document.site.setZIndex(this._close);
					this._opener.style.display = "none";
					if (this.onSuccess) {
						this._diagViewLinks.className = "s-diagnose-links-bar-success";
					}
				}
				// 0 diagnose => clean
				else {
					this._item.style.display = "none";
				}
				if (message.autoHide) {
					this.triggerAutoHide(message.autoHide);
				}
			}
		}
		this.page.onWindowResize();
	},
	_isEllipsisActive: function(e) {
		return (e.offsetWidth < e.scrollWidth);
	},
	triggerAutoHide: function(autoHide) {
		var self = this;
		setTimeout(function() {
			self.clean();
			self.page.onWindowResize();
		}, autoHide.autoHideTimeOut || 4000);
	},
	drawFieldDiagnose: function(field, $diagnose, group) {
		if (!field.isDiagnoseDisabled) {
			var label = document.createElement("label");
			label.className = "s-field-diagnose-msg-" + group.$severity;
			label.innerHTML = document.site.formatHTMLMessage($diagnose.message || $diagnose.$message);
			if (field.popupDiagnose) {
				if (!field.diagnoseFlag) {
					field.diagnoseFlag = document.createElement("a");
					field.diagnoseFlag.className = "s-field-diagnose-flag-" + group.$severity;
					field.appendToPickerBox(field.diagnoseFlag);
				}
				var link = document.createElement("a");
				link.setAttribute("data-s-picker", "field-diagnose-link");
				link.className = "s-field-diagnose-link-" + group.$severity;
				label.appendChild(link);
			}

			var link = document.createElement("a");
			link.className = "s-diagnose-msg-link";
			this._setPicker(link, "field-msg");
			link.setAttribute("data-s-article", field.articleParent.id);
			link.setAttribute("data-s-diag-field", field.id);

			if (field.popupDiagnose) {
				var index = field.arrayLevel && field.arrayLevel == "cell" && !isNaN(field.articleParent.dataset.$serverIndex) ? ' (line ' + ((field.articleParent.dataset.$serverIndex) + 1) + ')' : index; // in case of collection field
				link.textContent = (field.getTitle() || field.$field.$title) + (index ? index : "") + " :";
			} else {
				// title for single record collections if not in field data
				if (!field.getTitle() && !field.$field.$title && field.arrayLevel && field.arrayLevel == "cell") {
					var parent = field.articleParent.articleParent;
					var title = parent.titleText ? parent.titleText : (parent.$field ? parent.$field.$title : title);
					link.textContent = title + ":";
				} else {
					link.textContent = (field.getTitle() || field.$field.$title) + ":";
				}
			}
			this.appendDiagnose(group, $diagnose, field, link);
			var severity = $diagnose.severity || $diagnose.$severity;
			if (field.boxParent) {
				if (!field.boxParent.diagnosesFields) {
					field.boxParent.diagnosesFields = {};
				}
				var fieldSeverities = field.boxParent.diagnosesFields[field.id];
				if (!fieldSeverities) {
					fieldSeverities = field.boxParent.diagnosesFields[field.id] = {};
				}
				fieldSeverities[severity] = (fieldSeverities[severity] || 0) + 1;
				this.notifyAddToBoxParent(field.boxParent, severity);
			}
			field.hasDiagnoses = true;
			field.diagnoseFieldSlot.appendChild(label);
		}
	},
	_cleanDiagnose: function(diagInfo) {
		if (this.diagFocused && this.diagFocused == diagInfo) {
			delete this.diagFocused;
		}
		if (diagInfo.diagMsg) {
			document.site.removeDomChild(diagInfo.diagMsg);
		}
		diagInfo.group.diagnosesCount = Math.max(--diagInfo.group.diagnosesCount, 0);
		var index = this.diagnoses.indexOf(diagInfo);
		if (index >= 0) {
			this.diagnoses.splice(index, 1);
		}
	},
	_cleanFieldDiagnoses: function(fieldId) {
		var diags = this._fieldsMap[fieldId];
		if (diags && diags.length) {
			var field = diags[0].field;
			var severities = {};
			for (var ii = 0, jj = diags.length; ii < jj; ii++) {
				var diagInfo = diags[ii];
				severities[diagInfo.group.$severity] = true;
				this._cleanDiagnose(diagInfo);
				this.fieldDiagnosesCount--;
			}
			this.fieldDiagnosesCount = Math.max(this.fieldDiagnosesCount, 0);
			if (field.diagnoseFieldSlot) {
				document.site.emptyDom(field.diagnoseFieldSlot);
				field.diagnoseFieldSlot.style.visibility = "hidden";
				if (field.diagnoseFlag) {
					field.removeFromPickerBox(field.diagnoseFlag);
					delete field.diagnoseFlag;
				}
				// grid cell cases
				if (field.popupDiagnose) {
					field.popupDiagnose = field.popupDiagnoseBody = null;
					if (field.articleParent.onFieldDiagnoseChange) {
						field.articleParent.onFieldDiagnoseChange(false);
					}
				}
				if (field.hasDiagnoses) {
					var keys = Object.keys(severities);
					for (var ii = 0, jj = keys.length; ii < jj; ii++) {
						var severity = keys[ii];
						this.toggleFieldDiagnose(field, "s-" + severity, false);
						if (field.boxParent.diagnosesFields) {
							var fieldSeverities = field.boxParent.diagnosesFields[field.id];
							if (fieldSeverities[severity]) {
								fieldSeverities[severity]--;
								this.notifyRemoveToBoxParent(field.boxParent, severity);
							}
						}
					}
				}
				delete field.hasDiagnoses;
			}
		}
		delete this._fieldsMap[fieldId];
	},
	ensureFieldDiagnoseSlot: function(field) {
		if (!field.isDiagnoseDisabled) {
			if (!field.diagnoseFieldSlot) {
				field.diagnoseFieldSlot = document.createElement("div");
				field.diagnoseFieldSlot.className = "s-field-diagnose";
			}
			document.site.emptyDom(field.diagnoseFieldSlot);
			if (field.$item.$inplace && !field.$item.$isDiagnoseInline) {
				if (!field.popupDiagnose) {
					field.popupDiagnose = document.createElement("div");
					field.popupDiagnose.className = "s-diagnose-popup";
					field.popupDiagnoseBody = document.createElement("div");
					field.popupDiagnoseBody.className = "s-diagnose-popup-body";
					field.popupDiagnose.appendChild(field.popupDiagnoseBody);
				}
				field.popupDiagnoseBody.appendChild(field.diagnoseFieldSlot);
				if (field.articleParent.onFieldDiagnoseChange) {
					field.articleParent.onFieldDiagnoseChange(true);
				}
			} else {
				field._core.appendChild(field.diagnoseFieldSlot);
			}
		}
	},
	toggleFieldDiagnose: function(field, css, show) {
		if (field._input) {
			document.site.toggleClass(field._input, css, show);
		}
		document.site.toggleClass(field._dataValue, css, show);
	},
	ensureMessage: function(diagInfo) {
		if (diagInfo.diagMsg) {
			return diagInfo.diagMsg;
		}
		var diagMsg = document.createElement("div");
		diagMsg.className = "s-diagnose-msg s-diagnose-msg-" + diagInfo.group.$severity;
		diagMsg.setAttribute("data-s-severity", diagInfo.group.$severity);
		this._setPicker(diagMsg, "s-diagnose-msg");
		diagMsg.appendChild(diagInfo.label);
		diagInfo.diagMsg = diagMsg;
		var labelText = diagInfo.label.innerHTML;
		var indexBr = labelText.indexOf("<br>");
		if (indexBr >= 0) {
			// append expander btn
			this._appendExpander(diagMsg, diagInfo);
		} else {
			var diagMaxLength = 130;
			if (diagInfo.label.textContent.length > diagMaxLength) {
				// append expander btn
				this._appendExpander(diagMsg, diagInfo);
			}
		}

		// add links if any
		if (diagInfo.$diagnose.$links || diagInfo.$diagnose.$actions) {
			var container = document.createElement("div");
			container.className = "s-diagnose-links-bar-" + (diagInfo.$diagnose.severity || diagInfo.$diagnose.$severity);
			this.drawLinks(diagMsg.appendChild(container), diagInfo.$diagnose, this.page, diagMsg);
		}

		// add stacktrace if any
		if (diagInfo.$diagnose.$stackTrace) {
			// add expander btn
			this._appendExpander(diagMsg, diagInfo);

			// append stacktrace content
			var html = document.createElement("div");
			html.className = "s-diagnose-stacktrace";
			html.innerHTML = document.site.formatHTMLMessage(diagInfo.$diagnose.stackTrace || diagInfo.$diagnose.$stackTrace);
			html.style.display = "none";
			diagMsg.appendChild(html);
		}

		diagMsg.style.display = "none";
		diagInfo.group.slot.appendChild(diagMsg);

		// used to append detail btn when necessary
		this.lastDiagAppended = {
			label: diagInfo.label,
			diagMsg: diagMsg,
			diagInfo: diagInfo
		};

		return diagMsg;
	},
	_appendExpander: function(diagMsg, diagInfo) {
		if (!diagInfo.$hasExpander) {
			// expander
			var html = document.createElement("a");
			html.className = "s-diagnose-msg-more";
			this._setPicker(html, "detail");
			html.textContent = this.localize.diag_stacktrace;
			diagMsg.appendChild(html);
			diagInfo.$hasExpander = true;
		}
	},
	appendDiagnose: function(group, $diagnose, field, fieldLink) {
		var label = document.createElement("label");
		label.className = "s-diagnose-msg-label-hidden";
		label.innerHTML = document.site.formatHTMLMessage($diagnose.message || $diagnose.$message);

		// add field link if any
		if (field) {
			if (field.$item.$isExpressionChild) {
				var dom = document.createElement("span");
				dom.setAttribute("data-s-menu", field.id);
				dom.textContent = fieldLink.textContent.toUpperCase() + " ";
				label.insertBefore(dom, label.firstChild);
				field.diagnoseFieldSlot.style.display = "none";
			} else {
				label.insertBefore(fieldLink, label.firstChild);
			}
		}

		// saving diagnose components into viewer diagnoses array
		var diagInfo = {
			label: label,
			field: field,
			$diagnose: $diagnose,
			group: group
		};
		group.diagnosesCount++;

		this.diagnoses.push(diagInfo);
		if (field) {
			(this._fieldsMap[field.id] = this._fieldsMap[field.id] || []).push(diagInfo);
			this.fieldDiagnosesCount++;
		}
	},
	dispose: function() {
		if (this._groups) {
			for (var ii = 0, jj = this._groups.length; ii < jj; ii++) {
				var group = this._groups[ii];
				delete this._groupsMap[group.$severity];
				group = group.slot = null;
			}
		}
		this.$$body = this.$$core = this.$$diagViewLinks = this.$$item = null;
		this._close = this._content = this._core = this._diagViewLinks = this._expand = null;
		this._item = this._next = this._opener = null;
		this.localize = this._groups = this._groupsMap = this._fieldsMap = null;
		this.page = this.total = this.onSuccess = this.diagnoses = this.body = null;
	},
	refreshBoxDiagnoseIcon: function(box, add) {
		if (box.isTabLayout || box.$item.$isBoxCollapsable) {
			if (box.tabTitleHead || box.header) {
				var prioritySeverity;
				if (box.severitiesCount.fatal) {
					prioritySeverity = "fatal";
				} else {
					if (box.severitiesCount.error) {
						prioritySeverity = "error";
					} else {
						if (box.severitiesCount.warning) {
							prioritySeverity = "warning";
						} else {
							if (box.severitiesCount.info) {
								prioritySeverity = "info";
							}
						}
					}
				}
				if (add && box.prioritySeverity != prioritySeverity) {
					box.togglePicker("diagnoses", true);
				}
				box.prioritySeverity = prioritySeverity;
				if (!box.prioritySeverity) {
					box.togglePicker("diagnoses", false);
				}
				if (box.pickers && box.pickers.items.diagnoses) {
					box.pickers.items.diagnoses.className = "s-box-diagnose-" + box.prioritySeverity;
					var text = "";
					if (box.severitiesCount.fatal) {
						text += box.severitiesCount.fatal + " " + box.localize.box_fatal + "  ";
					}
					if (box.severitiesCount.error) {
						text += box.severitiesCount.error + " " + box.localize.box_error + "  ";
					}
					if (box.severitiesCount.warning) {
						text += box.severitiesCount.warning + " " + box.localize.box_warning + "  ";
					}
					if (box.severitiesCount.info) {
						text += box.severitiesCount.info + " " + box.localize.box_info + "  ";
					}
					box.pickers.items.diagnoses.title = text;
				}
			}
		}
	},
	notifyAddToBoxParent: function(box, severity) {
		if (box) {
			if (!box.severitiesCount) {
				box.severitiesCount = {};
			}
			box.severitiesCount[severity] = (box.severitiesCount[severity] || 0) + 1;
			this.refreshBoxDiagnoseIcon(box, true);
			this.notifyAddToBoxParent(box.boxParent, severity);
		}
	},
	notifyRemoveToBoxParent: function(box, severity) {
		if (box && box.severitiesCount) {
			if (box.severitiesCount[severity]) {
				box.severitiesCount[severity]--;
				this.refreshBoxDiagnoseIcon(box, false);
				this.notifyRemoveToBoxParent(box.boxParent, severity);
			}
		}
	}
});