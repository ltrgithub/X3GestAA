"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DiagnoseGroup = require('syracuse-ui/lib/diagnoses/diagnoseGroup').DiagnoseGroup;
var DiagnoseMessagePopup = require('syracuse-ui/lib/diagnoses/diagnoseMessagePopup').DiagnoseMessagePopup;

function DiagnosesPanel(){
}

exports.DiagnosesPanel = helpers.defineClass(DiagnosesPanel, null, {
    emptyViewer: function(){
        this._diagnoses = null;
        this.$$item.hide();
        if (this._menus) {
            this._menus.unload();
            delete this._menus;
        }
        this._emptyGroups();
        this.page.onWindowResize();
    },
    _emptyGroups: function(field){
        if (this._groups) {
            for (var ii = 0, jj = this._groups.length; ii < jj; ii++) {
                this._groups[ii].empty(field);
            }
        }
    },
    appendToPage: function(page){
        this.page = page;
        var html = document.createElement("div");
        html.className = "s-diagnose";
        this.$$item = $(html).appendTo($(this.page.diagnoseSlot));
    },
    _refreshViewer: function(options, page){
        this.total = 0;
        this.$$body.empty();
        if (this._groups) {
            for (var ii = 0, jj = this._groups.length; ii < jj; ii++) {
                var group = this._groups[ii];
                var count = group.$$group.children().children("label").length;
                if (count) {
                    this.total += count;
                    group.$$group.appendTo(this.$$body);
                }
            }
        }
        // show diagnoses panel if any diagnose
        if (this.total > 0) {
            this.showDiagnosesPanel();
        }
        // 0 diagnose => clean
        else {
            this.$$item.hide();
        }
        this.page.onWindowResize();
    },
    showDiagnosesPanel: function(){
        var fieldsCount = 0;
        for (var mm = 0, pp = this._diagnoses.length; mm < pp; mm++) {
            fieldsCount = this._diagnoses[mm].field ? fieldsCount + 1 : fieldsCount;
            if (fieldsCount > 1) {
                break;
            }
        }
        
        // show next nav button if necessary (field diagnoses > 0)
        this._nextLink.style.display = (fieldsCount > 1) ? "" : "none";
        
        
        // show expand (more/less) button if necessary (total > 1)
        if (this.total > 1) {
            // expand link text value for diagnose panel closed state
            var moreText = (this.total) - 1 == 0 ? this.localize.diag_expand : (this.total - 1) + this.localize.diag_expand;
            
            // if expand link already set
            if (this._expandLink.textContent) {
                // diagnoses panel is in opened mode
                if (this._expandLink.textContent.indexOf(this.localize.diag_collapse) != -1) {
                    for (var ii = 0; ii < this._diagnoses.length; ii++) {
                        this._diagnoses[ii].diagMsg.style.display = "block";
                    }
                }
                // diagnoses panel is in closed mode
                else {
                    for (var ii = 0; ii < this._diagnoses.length; ii++) {
                        this._diagnoses[ii].diagMsg.style.display = ii == 0 ? "block" : "none";
                    }
                    this._expandLink.textContent = moreText;
                }
            }
            // expand link not yet set
            else {
                for (var jj = 0; jj < this._diagnoses.length; jj++) {
                    this._diagnoses[jj].diagMsg.style.display = jj == 0 ? "block" : "none";
                }
                this._expandLink.textContent = moreText;
            }
            this._expandLink.style.display = "";
        }
        else {
            // if one diag only, expand button is not necessary.
            if (this.total == 1) {
                this._diagnoses[0].diagMsg.style.display = "block";
                this._expandLink.textContent = "";
                this._expandLink.style.display = "none";
            }
        }
        
        // show diagnoses panel content
        this._core.style.display = "inline-block";
        this.$$item.show();
        document.site.setZIndex(this.$$item[0]);
        document.site.setZIndex(this._diagCloser);
        this._diagOpener.style.display = "none";
        
        if (this.onSuccess) {
            this._applySuccessStyle();
        }
    },
    _applySuccessStyle: function(){
        this._diagViewLinks.className = "s-diagnose-links-bar-success";
        this.page.onWindowResize();
    },
    _cleanSuccessStyle: function(){
        // clean diagnoses panel
        this.emptyViewer();
        // remove success style
        this._diagViewLinks.className = "s-diagnose-links-bar";
        // update success flag
        this.onSuccess = false;
    },
    _initialize: function(){
        this.localize = document.site.localize;
        
        this._core = document.createElement("div");
        this._core.className = "s-diagnose-core";
        this.$$item.append(this.$$core = $(this._core));
        
        this._diagCloser = document.createElement("a");
        this._diagCloser.className = "s-diagnose-close";
        this._diagCloser.setAttribute("data-s-picker", "diag-close");
        this._core.appendChild(this._diagCloser);
        
        this._content = document.createElement("div");
        this._content.className = "s-diagnose-content";
        this._core.appendChild(this._content);
        
        var html = document.createElement("div");
        html.className = "s-diagnose-msg-list";
        this.$$body = $(html);
        
        this._groupsMap = {};
        this._groups = [];
        var severities = ["fatal", "error", "warning", "info", "success"];
        for (var ii = 0, jj = severities.length; ii < jj; ii++) {
            var $severity = severities[ii];
            (this._groupsMap[$severity] = new DiagnoseGroup()).create($severity, this);
            this._groups.push(this._groupsMap[$severity]);
        }
        
        this._content.appendChild(this.$$body[0]);
        
        // navigation bar ("next" button) (navigation through diagnoses with field links)
        var diagNavBar = document.createElement("div");
        diagNavBar.className = "s-diagnose-navigation-bar";
        this._content.appendChild(diagNavBar);
        
        // navigation links/buttons ("next")
        this._nextLink = document.createElement("a");
        this._nextLink.className = "s-diagnose-nav-next";
        this._nextLink.setAttribute("data-s-picker", "next");
        this._nextLink.style.display = "none";
        this._nextLink.title = this.localize.diag_next_tooltip;
        this._nextLink.textContent = this.localize.diag_next;
        diagNavBar.appendChild(this._nextLink);
        
        // links bar (_core child)
        this._diagViewLinks = document.createElement("div");
        this._diagViewLinks.className = "s-diagnose-links-bar";
        this.$$diagViewLinks = $(this._core.appendChild(this._diagViewLinks));
        
        this._expandLink = document.createElement("a");
        this._expandLink.className = "s-diagnose-expander";
        this._expandLink.setAttribute("data-s-picker", "diag-expand");
        this._expandLink.style.display = "none";
        this._core.appendChild(this._expandLink);
        
        // diag opening tab (used when diagnoses panel is closed) ($$item child)
        this._diagOpener = document.createElement("a");
        this._diagOpener.className = "s-diagnose-opener";
        this._diagOpener.setAttribute("data-s-picker", "diag-opener");
        this._diagOpener.textContent = this.localize.diag_opener;
        this._diagOpener.style.display = "none";
        
        html = document.createElement("div");
        html.className = "s-diagnose-open";
        html.appendChild(this._diagOpener);
        this.$$item[0].appendChild(html);
        
        this._bindEvents(true);
        
    },
    _bindEvents: function(bind){
        var self = this;
        if (self.$$item) {
            if (bind) {
                self.$$item.delegate("a[data-s-picker]", "click", function(){
                    switch (this.getAttribute("data-s-picker")) {
                        case "close-msg":
                            self._onDiagnoseClose($(this));
                            break;
                        case "field-msg":
                            var field = document.controller.findItem($(this));
                            if (field) {
                                if (field.focus) {
                                    field.focus();
                                }
                                self.onNavigationClick(0, field);
                            }
                            break;
                        case "diag-close":
                            self.$$item.hide();
                            self.cleanGlobalDiagnoses();
                            self.page.onWindowResize();
                            break;
                        case "diag-opener":
                            self._onDiagOpenerClick();
                            break;
                        case "diag-expand":
                            self._onDiagExpand();
                            break;
                        case "detail":
                            $(this.nextElementSibling).toggle();
                            $(this).toggleClass("s-diagnose-msg-more").toggleClass("s-diagnose-msg-less");
                            self.page.onWindowResize();
                            break;
                        case "next":
                            self.onNavigationClick(this);
                            break;
                    }
                    return false;
                }).delegate("div.s-diagnose-msg", "click", function(){
                    var id = this.getAttribute("data-s-diagmsg-popup");
                    if (id) {
                        if (self.diagPopups && self.diagPopups[id]) {
                            self.diagPopups[id].close();
                        }
                    }
                    else {
                        var label = this.children[0];
                        if (this.children[1] && this.children[1].className == "s-diagnose-msg-hide") {
                            self._openMessagePopup(this, label);
                        }
                    }
                });
            }
            else {
                self.$$item.undelegate();
            }
        }
    },
    _openMessagePopup: function(diagLayout, label){
        var self = this;
        var severity = self._getSeverity(diagLayout);
        var msgPopup = new DiagnoseMessagePopup();
        msgPopup.loadBox(label.innerHTML, severity);
        var diagPopup = self.page.openDialog({
            content: msgPopup,
            $dialogMode: "popup",
            $$dialog: msgPopup.$$item,
            position: {
                my: "left top",
                at: "left bottom",
                of: $(label)
            },
            onClose: function(){
                msgPopup.dispose();
                diagLayout.removeAttribute("data-s-diagmsg-popup");
                self.diagPopups[this.id] = null;
            },
            isAutoClose: false
        });
        diagPopup.appendCloseButton(msgPopup._header);
        diagLayout.setAttribute("data-s-diagmsg-popup", diagPopup.id);
        self.diagPopups = self.diagPopups || {};
        self.diagPopups[diagPopup.id] = diagPopup;
    },
    _getSeverity: function(dom){
        var severity;
        var severities = ["fatal", "error", "warning", "info", "success"];
        for (var ii = 0, jj = severities.length; ii < jj; ii++) {
            if (dom.className.indexOf(severities[ii]) > 0) {
                severity = severities[ii];
                break;
            }
        }
        return severity;
    },
    _onDiagExpand: function(){
        // expand link text value for diagnose panel closed state
        var moreText = (this.total) - 1 == 0 ? this.localize.diag_expand : (this.total - 1) + this.localize.diag_expand;
        
        // precondition 1 : is a diag focused ?
        var diagFocused;
        for (var ii = 0, jj = this._diagnoses.length; ii < jj; ii++) {
            if (this._diagnoses[ii].label.className.indexOf("s-diagnose-msg-focus") > -1) {
                diagFocused = ii;
            }
        }
        // precondition 2 : was expand link on diagnose panel opened/closed state ?
        // expand link previously on diagnose panel opened state
        if (this._expandLink.textContent.indexOf(this.localize.diag_collapse) > -1) {
        
            // precondition 1 true, showing previous diag focused
            if (diagFocused != undefined) {
                for (var ii = 0; ii < jj; ii++) {
                    this._diagnoses[ii].diagMsg.style.display = "none";
                }
                this._diagnoses[diagFocused].diagMsg.style.display = "block";
            }
            // precondition 1 false, showing first diag 
            else {
                for (var ii = 0; ii < jj; ii++) {
                    this._diagnoses[ii].diagMsg.style.display = ii == 0 ? "block" : "none";
                }
            }
            this._expandLink.textContent = moreText;
            
        }
        // expand link previously on diagnose panel closed state, show all diagnoses
        else {
            for (var ii = 0; ii < jj; ii++) {
                this._diagnoses[ii].diagMsg.style.display = "block";
            }
            this._expandLink.textContent = this.localize.diag_collapse;
        }
        this.page.onWindowResize();
    },
    onNavigationClick: function(navLink, field){
        var index;
        if (this._diagnoses && this._diagnoses.length > 0) {
            // getting index of previously focused diagnose if any
            for (var ii = 0; ii < this._diagnoses.length; ii++) {
                if (this._diagnoses[ii].field && this._diagnoses[ii].label.className.indexOf("s-diagnose-msg-focus") > -1) {
                    index = ii;
                    break;
                }
            }
            // if navigation from direct field focus and not from "next" button
            // getting corresponding index to update focus in diagnose panel
            if (!navLink && field) {
                for (var ii = 0, jj = this._diagnoses.length; ii < jj; ii++) {
                    if (this._diagnoses[ii].field && this._diagnoses[ii].field.id == field.id) {
                        index = ii;
                        break;
                    }
                }
            }
            else {
            
                var firstFieldIndex, lastFieldIndex;
                
                for (var ii = 0, jj = this._diagnoses.length; ii < jj; ii++) {
                    firstFieldIndex = this._diagnoses[ii].field && firstFieldIndex == undefined ? ii : firstFieldIndex;
                    lastFieldIndex = this._diagnoses[ii].field ? ii : lastFieldIndex;
                }
                
                // update index
                if (index != undefined) {
                
                    if (index == lastFieldIndex) {
                        index = firstFieldIndex;
                    }
                    else {
                        var nextFieldIndex;
                        for (var mm = index + 1, pp = this._diagnoses.length; mm < pp; mm++) {
                            nextFieldIndex = this._diagnoses[mm].field ? mm : nextFieldIndex;
                            if (nextFieldIndex != undefined) {
                                break;
                            }
                        }
                        index = nextFieldIndex;
                    }
                }
                // set index value
                else {
                    index = firstFieldIndex;
                }
                
                // focus corresponding field
                var field = this._diagnoses[index].field;
                if (field.focus) {
                    field.focus();
                }
            }
            // focus corresponding diag
            for (var ii = 0; ii < this._diagnoses.length; ii++) {
                if (ii == index) {
                    document.site.toggleClass(this._diagnoses[index].label, "s-diagnose-msg-focus", true);
                }
                else {
                    document.site.toggleClass(this._diagnoses[ii].label, "s-diagnose-msg-focus");
                }
            }
            document.site.scrollToItem(this._diagnoses[index].diagMsg, $(this._content), true);
            
            // if in collapse mode, show focused diag
            if (this._expandLink.textContent.indexOf(this.localize.diag_expand) > -1) {
                // hiding all diagnoses in diagnose panel
                for (var ii = 0; ii < this._diagnoses.length; ii++) {
                    this._diagnoses[ii].diagMsg.style.display = "none";
                }
                $(this._diagnoses[index].diagMsg).show();
            }
            return false;
        }
    },
    _onDiagOpenerClick: function(){
        if (this._diagOpener && this._core) {
            this._core.style.display = "inline-block";
            this._diagOpener.style.display = "none";
            this.page.onWindowResize();
        }
        return false;
    },
    _onDiagnoseRemoval: function(){
        // update self.total, update expandLink text value, hide $$item if no diag left
        
        // clean if last dialog removed
        if (this._diagnoses.length == 1) {
            this.emptyViewer();
        }
        else {
            this.total = this._diagnoses.length;
            // if diagnoses panel was collapsed, update expand link text or hide it
            if (this._expandLink.textContent.indexOf(this.localize.diag_expand) != -1) {
                this._diagnoses[0].diagMsg.style.display = "block";
                if (this.total == 1) {
                    this._expandLink.style.display = "none";
                }
                else {
                    this._expandLink.textContent = (this.total - 1) + this.localize.diag_expand;
                }
            }
            // if diagnoses panel was expanded, remove expand link if one diagnose left
            else {
                if (this.total == 1) {
                    this._expandLink.style.display = "none";
                }
            }
        }
        this.page.onWindowResize();
    },
    _onDiagnoseClose: function($$closeButton){
        // update self.total, update expandLink text value, hide $$item if no diag left        
        var isLastDialog = this._diagnoses.length == 1 ? true : false;
        $$closeButton.parent().remove();
        // clean if last dialog removed
        if (isLastDialog) {
            this.emptyViewer();
        }
        else {
            this.total--;
            // if diagnoses panel was collapsed, update expand link text or hide it
            if (this._expandLink.textContent.indexOf(this.localize.diag_expand) != -1) {
                this.diagnoses[1].diagMsg.style.display = "block";
                
                if (this.total == 1) {
                    this._expandLink.style.display = "none";
                }
                else {
                    this._expandLink.textContent = (this.total - 1) + this.localize.diag_expand;
                }
            }
            // if diagnoses panel was expanded, remove expand link if one diagnose left
            else {
                if (this.total == 1) {
                    this._expandLink.style.display = "none";
                }
            }
        }
        this.page.onWindowResize();
        return false;
    },
    _updateFieldFocusHandling: function(field, fieldId){
        // remove field from viewer._diagnoses array
        if (this._diagnoses) {
            var index;
            
            // getting index of field to remove
            if (fieldId) {
                for (var ii = 0; ii < this._diagnoses.length; ii++) {
                    index = this._diagnoses[ii].field && this._diagnoses[ii].field.id == fieldId ? ii : index;
                    if (index != undefined) {
                        break;
                    }
                }
            }
            else {
                for (var ii = 0; ii < this._diagnoses.length; ii++) {
                    index = this._diagnoses[ii].field && this._diagnoses[ii].field.id == field.id ? ii : index;
                    if (index != undefined) {
                        break;
                    }
                }
            }
            
            // removing field from array
            if (index != undefined) {
                this._diagnoses.splice(index, 1);
            }
        }
        this.numFocusedField = 0;
    },
    _getFieldWithBind: function($bind){
        var self = this;
        var index;
        if (self._diagnoses) {
            for (var ii = 0, jj = self._diagnoses.length; ii < jj; ii++) {
                index = self._diagnoses[ii].field && self._diagnoses[ii].field.$item.$bind == $bind ? ii : index;
            }
        }
        return index != undefined ? self._diagnoses[index].field : index;
    },
    cleanGlobalDiagnoses: function(){
        if (this.$$body) {
            if (this._diagnoses && this._diagnoses.length > 0) {
                var newDiagArray = [];
                for (var ii = 0, jj = this._diagnoses.length; ii < jj; ii++) {
                    if (!this._diagnoses[ii].field) {
                        this._diagnoses[ii].diagMsg.parentNode.removeChild(this._diagnoses[ii].diagMsg);
                    }
                    else {
                        newDiagArray.push(this._diagnoses[ii]);
                    }
                }
                this._diagnoses = newDiagArray;
            }
            else {
                this.emptyViewer();
            }
        }
    },
    drawLinks: function(slot, message, page){
        page = page || this.page;
        if (!this._menus) {
            this._menus = page.loadNewItem(slot, {
                $isAuthoringEnabled: false,
                $category: "menus",
                $isOwner: true,
                $skin: "s-diagnose-links"
            });
            this._menus.isDiagnoseMenus = true;
        }
        this._menus.ensurePrivateMenus(message);
    },
    emptyDiagnoseByFieldId: function(fieldId){
        if (this._diagnoses) {
            for (var ii = 0, jj = this._diagnoses.length; ii < jj; ii++) {
                if (this._diagnoses[ii].field && this._diagnoses[ii].field.id == fieldId) {
                    // remove diagnose from diagnose panel
                    this._diagnoses[ii].diagMsg.parentNode.removeChild(this._diagnoses[ii].diagMsg);
                    
                    // remove field from _diagnoses array
                    this._updateFieldFocusHandling(undefined, fieldId);
                    
                    // update diagnoses panel ui accordingly
                    this._onDiagnoseRemoval();
                    
                    break;
                }
            }
        }
    },
    showDiagnoses: function(message, page, options){
        var self = this;
        // clean if no message
        if (!message || (!message.field && !message.$diagnoses)) {
            self.emptyViewer();
            if (options) {
                // for further usage ?
            }
        }
        else {
            // initialize
            if (!self._core) {
                self._initialize();
            }
            if (self.onSuccess) {
                self._cleanSuccessStyle();
            }
            if (options) {
                // for further usage ?
            }
            // append message links
            if (message.$links || message.$actions) {
                // links are most of the times supposed to be sent when there is success after validation
                // flaging success mode, cleaning body 
                if (message.$diagnoses.length == 1 && (message.$diagnoses[0].severity || message.$diagnoses[0].$severity) == "success") {
                    self.onSuccess = true;
                    self.emptyViewer();
                }
                self.drawLinks(self._diagViewLinks, message, page);
            }
            
            // array used for field focus purpose
            self._diagnoses = self._diagnoses || [];
            
            // draw diagnoses
            if (message.$diagnoses && message.$diagnoses.length > 0) {
                if (message.field) {
                    self._cleanDiagnoses(message.field);
                    message.field.ensureDiagnoseSlot();
                }
                var group;
                for (var ii = 0, jj = message.$diagnoses.length; ii < jj; ii++) {
                    var $diagnose = message.$diagnoses[ii];
                    var $severity = $diagnose.severity;
                    $severity = $severity || $diagnose.$severity;
                    $severity = ($severity) ? $severity.toLowerCase() : "";
                    group = self._groupsMap[$severity] || self._groupsMap["error"];
                    if (message.field) {
                    
                        // handling expression child field case
                        var field = self._getFieldWithBind(message.field.$item.$bind);
                        if (field) { // there is already a diagnose for this field in the panel
                            // prev diag is for expression child field and new diag is not
                            // -> remove previous from diagnoses panel and add new 
                            if (field.$item.$isExpressionChild && !message.field.$item.$isExpressionChild) {
                                self._cleanDiagnoses(field);
                                message.field.drawDiagnose($diagnose, group);
                            }
                            else {
                                if (!field.$item.$isExpressionChild && !message.field.$item.$isExpressionChild) {
                                    message.field.drawDiagnose($diagnose, group);
                                }
                            }
                        }
                        else {
                            message.field.drawDiagnose($diagnose, group);
                        }
                    }
                    else {
                        group.drawDiagnose($diagnose);
                    }
                }
                if (message.field) {
                    message.field.diagnoseFieldSlot.style.visibility = "";
                    if (group) {
                        message.field.toggleDiagnose("s-" + group.$severity, true);
                    }
                }
            }
            else {
                self._cleanDiagnoses(message.field);
            }
            // show/refresh diagnoses panel
            if (!options || !options.noViewer) {
                self._refreshViewer(options, page);
                if (message.autoHide) {
                    setTimeout(function(){
                        self.emptyViewer();
                    }, message.autoHide.autoHideTimeOut || 4000);
                }
            }
        }
    },
    _cleanDiagnoses: function(field){
        this._emptyGroups(field);
        if (field && field.diagnoseFieldSlot) {
            field.emptyDiagnoseSlot();
            this._updateFieldFocusHandling(field);
        }
    },
    dispose: function(){
        if (this._groups) {
            for (var ii = 0, jj = this._groups.length; ii < jj; ii++) {
                var group = this._groups[ii];
                delete this._groupsMap[group.$severity];
                group.dispose();
            }
        }
        this._bindEvents(false);
        this._groups = this._groupsMap = null;
        this.page = this.total = this.onSuccess = this._diagnoses = null;
    }
});
