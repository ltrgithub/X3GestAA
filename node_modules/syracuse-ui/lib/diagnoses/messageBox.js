"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var WidgetResizer = require("syracuse-ui/lib/site/resize/widgetResizer").WidgetResizer;

function MessageBox() {}

exports.MessageBox = helpers.defineClass(MessageBox, RawPage, {
	_initFooterButtons: function() {
		if (!this.$item.$buttons) {
			switch (this.$item.$type) {
				case "question":
					this.$item.$buttons = "yesno";
					break;
				case "prompt":
					this.$item.$buttons = "okcancel";
					break;
				default:
					this.$item.$buttons = "ok";
					break;
			}
		}

		this.isMessageBox = true;
		this.$prototype.$links = {};
		this.$itemButtons = [];
		var ids = ["yes", "no", "ok", "cancel"];
		for (var ii = 0, jj = ids.length; ii < jj; ii++) {
			var id = ids[ii];
			if (this.$item.$buttons.indexOf(id) >= 0) {
				this.$prototype.$links[id] = {
					$title: this.$item.$buttonsTitle && this.$item.$buttonsTitle[id] || syra_local["msgbox_" + id]
				};
				this.$itemButtons.push({
					$bind: id
				});
				if ((this.$item.$default || "ok") == id) {
					this._defaultBtnId = id;
				}
			}
		}
		if (!this._defaultBtnId) {
			this._defaultBtnId = this.$itemButtons[0].$bind;
		}
	},
	loadBox: function(initData) {
		this.$item.$skin = "s-msgbox";

		this._initFooterButtons();

		this.$prototype.$properties = {
			$message: {
				$type: "application/x-string",
				$title: "$isTitleHidden",
			}
		};
		this.$item.$layout = {
			$items: [{
				$bind: "$message",
				$isTitleHidden: true,
				$skin: this.$item.$skin + "-msg"
			}]
		};
		if (this.$item.$type == "prompt") {
			this.$prototype.$properties.$prompt = {
				$type: "application/x-string"
			};
			this.$item.$layout.$items.push({
				$bind: "$prompt",
				$isEditMode: true,
				$isAutoSizeDisabled: true,
				$maxLength: 50,
				$isTitleHidden: true,
				$skin: this.$item.$skin + "-prompt"
			});
		}
		this.$item.$layout.$items.push({
			$skin: "s-msgbox-foot",
			$clientId: "$footer",
			$category: "menus",
			$layout: {
				$items: [{
					$category: "menus",
					$skin: "s-msgbox-links",
					$isMenusBag: true,
					$isHidden: this.$item.$useLinkAsOk
				}, {
					$skin: "s-msgbox-buttons",
					$layout: {
						$layoutType: "row",
						$autoSize: true,
						$items: this.$itemButtons
					}
				}]
			}
		});

		RawPage.prototype.loadBox.call(this, initData);

		if (!this.displayDisabled) {
			if (this.$item.layoutSlot) {
				(this.layoutSlot = this.$item.layoutSlot).appendChild(this.domItem);
				this.domItem.style.display = "inline-block";
			} else {
				this.domItem.style.position = "fixed";
				this.dialogWrapper = syra_site.dialogManager.openModal(syra_site, {
					id: helpers.uuid.generate(),
					content: this,
					$isAutoClose: false,
					$autoFocus: true,
					isResizingEnabled: false,
					resizeDialog: function(dlg) {
						dlg.centerDialog();
					}
				});
			}
		}
		// handling window close with ENTER or ESCAPE buttons
		this.keys = {};
		this.$item.$showDetail && this._onBodyBtnClick();

		this.focusBtnId = this._defaultBtnId;
	},
	onMenuDataFilled: function(menuItem) {
		if (menuItem && (menuItem.$item.$bind == this.focusBtnId)) {
			setTimeout(function() {
				menuItem.domItem && menuItem.domItem.focus();
			}, 100);
		}
	},
	preformat: function(txt) {
		return "<pre class='s-msgbox-pre'>" + syra_site.dom.formatHTMLText(txt, true) + "</pre>";
	},
	detailToString: function(o) {
		if (o == undefined)
			return "";
		try {
			if (typeof(o) == 'string') {
				if (o.length == 0)
					return o;
				o = JSON.parse(o);
			}
			return JSON.stringify(o, null, "   ");
		} catch (e) {
			return o.toString();
		}
	},
	selectText: function() {
		if (this._coreFormatted) {
			var textItem = this._coreFormatted && syra_site.dom.isDisplay(this._coreFormatted) ? this._coreFormatted : this._coreRaw;
			if (document.body.createTextRange) { //ms
				var range = document.body.createTextRange();
				range.moveToElementText(textItem);
				range.select();
			} else
			if (window.getSelection) { //all others
				var selection = window.getSelection();
				var range = document.createRange();
				range.selectNodeContents(textItem);
				selection.removeAllRanges();
				selection.addRange(range);
			}
		}
	},
	ensureLayoutMode: function() {
		RawPage.prototype.ensureLayoutMode.call(this);
		if (this.domTitle) {
			this.domTitle.className += " s-msgbox-msg-" + (this.$item.$severity || this.$item.$type);
		}
	},
	drawBox: function() {
		var fHtmlEsc = helpers.string.htmlEscape;
		RawPage.prototype.drawBox.call(this);
		this.domItem.syraItem = this.id;
		this.layoutSlot = this.domItem;
		this._widgetResizer = new WidgetResizer();
		this._widgetResizer.setResizable({
			source: this,
			slot: this.layoutSlot,
			dragSpot: this.header,
			isResizingEnabled: false
		});
		this._message = this.boundFields.$message[0].domItem;
		var msg = ["<h1>", (fHtmlEsc(this.$item.$message || syra_local.msgbox_default_message)).replace(/\n/g, '</h1><h1>'), "</h1>"];
		$(this.boundFields.$message[0]._dataValue).html(msg.join(""));

		// links (AFTER MSG ADDITION !)
		if (this.$item.$links || this.$item.$actions) {
			this.$item.noDispDiag = true;
			this.applyChange(this.$item);
		}
		if (this.$item.$origin) {
			this._ensureStackTrace();
			var origin = syra_local.msgbox_body_stackTrace_origin + this.$item.$origin;
			// add to formatted tab content
			var div = document.createElement("div");
			div.className = "s-msgbox-origin";
			$(this._coreFormatted.appendChild(div)).html(fHtmlEsc(origin));
			// add to raw tab content
			this._coreRaw.innerHTML += this.preformat(this.$item.$origin + "<br/>");
		}
		if (this.$item.$details) {
			this._ensureStackTrace();
			var div = document.createElement("div");
			div.className = "s-msgbox-details";
			$(this._coreFormatted.appendChild(div)).html((fHtmlEsc(this.$item.$details)).replace(/\n/g, '<br/>'));
			this._coreRaw.innerHTML += this.preformat(this.$item.$details + "<br/>");
		}
		if (this.$item.$diagnoses && this.$item.$diagnoses.length > 0) {
			this._appendDiagnoses(this.$item.$diagnoses);
		}
		if (this.$item.$type == "prompt") {
			this.boundFields["$prompt"][0].input.setAttribute("size", 50);
		}
		this.getMenuItem(this._defaultBtnId).domItem.className += " s-msgbox-button-default";

		// handling window dimension
		this.domItem.style.minWidth = this.$item.$minWidth ? this.$item.$minWidth + "px" : "350px"; // "400px" ? "100px" ?
		// showing msgbox
		// displayDisabled property set in site#showMessage(). used for htmleditor msgbox
		if (this.$item.$isAutoClose) {
			this.appendAutoClose();
		}

	},
	appendAutoClose: function() {
		var self = this;
		var count = (typeof(self.$item.$isAutoClose) == "number" ? self.$item.$isAutoClose : 4000) / 1000;
		self.domTitle.textContent = self.$item.$title + "  (" + count + ")";
		self.autoCloseTimeOut = setInterval(function() {
			var countTxt = "(" + (--count) + ")";
			self.domTitle.textContent = self.$item.$title + " " + countTxt;
			if (count == 0) {
				clearInterval(self.autoCloseTimeOut);
				self.close("auto");
			}
		}, 1000);
	},
	onMenuClick: function(menuItem) {
		switch (menuItem.$bind) {
			case "yes":
			case "no":
			case "ok":
			case "cancel":
				if (this.$item.$useLinkAsOk && menuItem.$bind == "ok") {
					var $bind = Object.keys(this.$item.$diagnoses[0].$links)[0];
					this.menuItems[$bind][0].domItem.click();
				} else {
					this.close(menuItem.$bind, {
						$clientId: menuItem.$bind,
						prompt: (this.$item.$type == "prompt") ? this.boundFields["$prompt"][0].getDataValue() : null
					});
				}
				return false;
		}
		return true;
	},
	onTabClick: function(event, btn) {
		this._openedTab.className = "s-msgbox-core-tab";
		(this._openedTab = btn).className = "s-msgbox-core-tab s-open";
		syra_site.dom.toggle(this._coreFormatted);
		syra_site.dom.toggle(this._coreRaw);
		this.resizeArticle();
	},
	onMessageClick: function(event, btn) {
		btn.syraOpened = !btn.syraOpened;
		syra_menus.updateButtonIcon(btn, btn.syraOpened ? syra_local.msgbox_diagnose_hide_detail : syra_local.msgbox_diagnose_show_detail, btn.syraOpened ? "collapse" : "expand");
		var message = this._groups[btn.syraSeverity].messages[btn.syraIndex];
		if (btn.syraOpened) {
			if (!message.stackTraceView) {
				message.stackTraceView = document.createElement("div");
				message.stackTraceView.className = "s-msgbox-diag-stackTrace";
				message.stackTraceView.innerHTML = this.preformat(((message.appCode != undefined ? message.appCode + "\n" : "") + (message.stackTrace || message.$stackTrace)).replace(/\n/g, "<br/>"));
				message.label.appendChild(message.stackTraceView);
			}
		}
		message.stackTraceView.style.display = btn.syraOpened ? "" : "none";
		this.resizeArticle();
	},

	_onBodyBtnClick: function() {
		syra_site.dom.toggle(this._coreTabsNav);
		syra_site.dom.toggle(this._core);
		this._bodyBtn.syraOpened = !this._bodyBtn.syraOpened;
		syra_menus.updateButtonIcon(this._bodyBtn, this._bodyBtn.syraOpened ? syra_local.msgbox_body_picker_opened : syra_local.msgbox_body_picker_closed, this._bodyBtn.syraOpened ? "collapse_row" : "expand_row");
		this._selectBtn.style.display = this._bodyBtn.syraOpened ? "" : "none";
		this.resizeArticle();
	},
	_ensureStackTrace: function() {
		if (!this._core) {
			var footer = this.idMap["$footer"];
			this._coreTabsNav = document.createElement("nav");
			this._coreTabsNav.className = "s-msgbox-core-tabs-nav";
			this._coreTabsNav.style.display = "none";
			footer.domItem.parentNode.insertBefore(this._coreTabsNav, footer.domItem);

			this._core = document.createElement("div");
			this._core.className = "s-msgbox-core";
			this._core.style.display = "none";
			footer.domItem.parentNode.insertBefore(this._core, footer.domItem);

			// tabs
			this._openedTab = syra_menus.addTextButton(syra_local.msgbox_nav_title_formatted, "s-msgbox-core-tab s-open", "onTabClick");
			this._coreTabsNav.appendChild(this._openedTab);
			this._coreTabsNav.appendChild(syra_menus.addTextButton(syra_local.msgbox_nav_title_raw, "s-msgbox-core-tab", "onTabClick"));

			// tabs content
			this._coreFormatted = document.createElement("div");
			this._coreFormatted.className = "s-msgbox-core-tab-formatted";
			this._core.appendChild(this._coreFormatted);

			this._coreRaw = document.createElement("div");
			this._coreRaw.className = "s-msgbox-core-tab-raw";
			this._coreRaw.style.display = "none";
			this._core.appendChild(this._coreRaw);

			this._bodyBtn = syra_menus.addTextButton(syra_local.msgbox_body_picker_closed, "s-msg-box-body-btn", "_onBodyBtnClick", null, "expand_row");

			var slot = document.createElement("div");
			slot.className = "s-msgbox-btn-slot";
			slot.appendChild(this._bodyBtn);
			this._message.parentNode.insertBefore(slot, this._message);

			this._selectBtn = syra_menus.addTextButton(syra_local.msgbox_select_picker, "s-msgbox-select-btn", "selectText");
			this._selectBtn.style.display = "none";
			slot = document.createElement("div");
			slot.className = "s-msgbox-btn-slot";
			slot.appendChild(this._selectBtn);
			this._message.parentNode.insertBefore(slot, this._message);
		}
	},
	_appendDiagnoses: function($diagnoses) {
		this._ensureStackTrace();
		// add to formatted tab content
		var diagnoses = document.createElement("div");
		diagnoses.className = "s-msgbox-diagnoses";
		this._coreFormatted.appendChild(diagnoses);

		this._groups = {};
		var severities = ["error", "fatal", "warning", "info"];
		for (var ii = 0, jj = severities.length; ii < jj; ii++) {
			var severity = severities[ii];
			var groupItem = document.createElement("div");
			groupItem.className = 's-msgbox-group-' + severity;
			this._groups[severity] = {
				groupItem: groupItem,
				messages: []
			};
		}
		for (var ii = 0, jj = $diagnoses.length; ii < jj; ii++) {
			var $diagnose = $diagnoses[ii];
			var severity = $diagnose.severity || $diagnose.$severity;
			var group = null;
			if (severity) {
				severity = severity.toLowerCase();
				group = this._groups[severity];
			}
			if (!group) {
				group = this._groups[severity = "error"];
			}
			var _code = $diagnose.appCode != null && $diagnose.appCode != undefined ? $diagnose.appCode : ($diagnose.sdataCode != null && $diagnose.sdataCode != undefined ? $diagnose.sdataCode : null);
			var message = {
				label: document.createElement("div"),
				stackTrace: $diagnose.stackTrace || $diagnose.$stackTrace,
				appCode: _code != null ? (syra_local.msgbox_diag_appCode + _code) : undefined
			};
			group.messages.push(message);
			message.label.className = "s-msgbox-label";
			message.label.innerHTML = syra_site.dom.formatHTMLText($diagnose.message || $diagnose.$message || syra_local.msgbox_diagnose_default_msg, true);
			if ($diagnose.stackTrace || $diagnose.$stackTrace) {
				var btn = syra_menus.addIconButton(syra_local.msgbox_diagnose_show_detail, "s-msgbox-diag-btn", "onMessageClick", null, "expand");
				btn.syraSeverity = severity;
				btn.syraIndex = group.messages.length - 1;
				message.label.appendChild(btn);
			}
			var flag = document.createElement("em");
			flag.className = "s-msgbox-label-" + severity;
			flag.textContent = ".";
			message.label.insertBefore(flag, message.label.firstChild);
			group.groupItem.appendChild(message.label);
			if ($diagnose.$links || $diagnose.$actions) {
				this.applyChange($diagnose);
			}
			diagnoses.appendChild(group.groupItem);
		}
		// add to raw tab content
		this._coreRaw.innerHTML += this.preformat(this.detailToString($diagnoses));
	},
	resizeArticle: function(setMinimumDimensions) {
		if (this._core) {
			this._core.style.height = "";
		}
		this.dialogWrapper && this.dialogWrapper.resizeDialog();

		if (this._core) {
			var diff = this.domItem.scrollHeight - this.domItem.clientHeight;
			if (diff) {
				this._core.style.height = Math.max((this._core.getBoundingClientRect().height - diff), 50) + "px";
			}
		}
	},
	applyEscape: function() {
		this.close("esc");
		return true;
	},
	close: function(closedBy, response) {
		if (this.$item) {
			if (this.$item.callback) {
				this.$item.callback(response, closedBy);
			}
			syra_site.dom.removeChild(this.domItem);
			syra_diagnose.disposeBox();
		}
	},
	dispose: function() {
		if (this.$item && this.$item.callback) {
			this.$item.callback = null;
		}
		if (this._groups) {
			var ids = Object.keys(this._groups);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				var id = ids[ii];
				this._groups[id].groupItem = null;
			}
		}
		if (this.autoCloseTimeOut) {
			clearInterval(this.autoCloseTimeOut);
			delete this.autoCloseTimeOut;
		}
		this._widgetResizer && this._widgetResizer.dispose();
		this.dialogWrapper && this.dialogWrapper.dispose();
		RawPage.prototype.dispose.call(this);
	}
});