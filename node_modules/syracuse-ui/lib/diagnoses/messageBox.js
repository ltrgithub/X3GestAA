"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;

function MessageBox() {}

exports.MessageBox = helpers.defineClass(MessageBox, RawPage, {
	_initFooterButtons: function() {
		if (!this.$item.$buttons) {
			switch (this.$item.$type) {
				case "question":
					this.$item.$buttons = "yesno";
					break;
				case "prompt":
					this.$item.$buttons = "okcancel";
					break;
				default:
					this.$item.$buttons = "ok";
					break;
			}
		}

		this.isMessageBox = true;
		this.$prototype.$links = {};
		this.$itemButtons = [];
		var ids = ["yes", "no", "ok", "cancel"];
		for (var ii = 0, jj = ids.length; ii < jj; ii++) {
			var id = ids[ii];
			if (this.$item.$buttons.indexOf(id) >= 0) {
				this.$prototype.$links[id] = {
					$title: this.$item.$buttonsTitle && this.$item.$buttonsTitle[id] || this.localize["msgbox_" + id]
				};
				this.$itemButtons.push({
					$bind: id
				});
				if ((this.$item.$default || "ok") == id) {
					this._defaultBtnId = id;
				}
			}
		}
		if (!this._defaultBtnId) {
			this._defaultBtnId = this.$itemButtons[0].$bind;
		}
	},
	loadBox: function(initData) {
		this.$autoFetch = false;
		this.localize = document.site.localize;
		this.$item.$skin = "s-msgbox";

		this._initFooterButtons();

		this.$prototype.$properties = {
			$message: {
				$type: "application/x-string",
				$title: "$isTitleHidden",
			}
		};
		this.$item.$isAuthoringEnabled = false;
		this.$item.$layout = {
			$items: [{
				$bind: "$message",
				$isTitleHidden: true,
				$skin: this.$item.$skin + "-msg"
			}]
		};
		if (this.$item.$type == "prompt") {
			this.$prototype.$properties.$prompt = {
				$type: "application/x-string"
			};
			this.$item.$layout.$items.push({
				$bind: "$prompt",
				$isEditMode: true,
				$isAutoSizeDisabled: true,
				$maxLength: 50,
				$isTitleHidden: true,
				$skin: this.$item.$skin + "-prompt"
			});
		}
		this.$item.$layout.$items.push({
			$skin: "s-msgbox-foot",
			$clientId: "$footer",
			$category: "menus",
			$layout: {
				$items: [{
					$category: "menus",
					$skin: "s-msgbox-links",
					$isMenusBag: true,
					$isHidden: this.$item.$useLinkAsOk
				}, {
					$skin: "s-msgbox-buttons",
					$layout: {
						$layoutType: "row",
						$autoSize: true,
						$items: this.$itemButtons
					}
				}]
			}
		});

		RawPage.prototype.loadBox.call(this, initData);

		this.resizeArticle();
	},
	onMenuDataFilled: function(menuItem) {
		if (menuItem && (menuItem.$item.$bind == this._focusBtnId)) {
			setTimeout(function() {
				if (menuItem.$$item) {
					menuItem.$$item.focus();
				}
			}, 100);
		}
	},
	preformat: function(txt) {
		return "<pre class='s-msgbox-pre'>" + txt + "</pre>";
	},
	detailToString: function(o) {
		if (o == undefined)
			return "";
		try {
			if (typeof(o) == 'string') {
				if (o.length == 0)
					return o;
				o = JSON.parse(o);
			}
			return JSON.stringify(o, null, "   ");
		} catch (e) {
			return o.toString();
		}
	},
	selectText: function(element) {
		if (this._coreFormatted) {
			var textItem = this._coreFormatted && document.site.isDomDisplay(this._coreFormatted) ? this._coreFormatted : this._coreRaw;
			if (document.body.createTextRange) { //ms
				var range = document.body.createTextRange();
				range.moveToElementText(textItem);
				range.select();
			} else
			if (window.getSelection) { //all others
				var selection = window.getSelection();
				var range = document.createRange();
				range.selectNodeContents(textItem);
				selection.removeAllRanges();
				selection.addRange(range);
			}
		}
	},
	ensureLayoutMode: function() {
		RawPage.prototype.ensureLayoutMode.call(this);
		if (this.domTitle) {
			this.domTitle.className += " s-msgbox-msg-" + (this.$item.$severity || this.$item.$type);
		}
	},
	drawBox: function() {
		var fHtmlEsc = helpers.string.htmlEscape;
		RawPage.prototype.drawBox.call(this);
		this.layoutSlot = this.$$item[0];
		this._widgetResizer = document.site.setWidgetResizable({
			source: this,
			slot: this.layoutSlot,
			dragSpot: this.header,
			isResizingEnabled: false
		});
		this._message = this.boundFields.$message[0].domItem;
		this._$$message = $(this._message);
		var msg = ["<h1>", (fHtmlEsc(this.$item.$message || this.localize.msgbox_default_message)).replace(/\n/g, '</h1><h1>'), "</h1>"];
		$(this.boundFields.$message[0].fieldValue).html(msg.join(""));

		// links (AFTER MSG ADDITION !)
		if (this.$item.$links || this.$item.$actions) {
			this.$item.noDispDiag = true;
			this.applyChange(this.$item);
		}
		if (this.$item.$origin) {
			this._ensureStackTrace();
			var origin = this.localize.msgbox_body_stackTrace_origin + this.$item.$origin;
			// add to formatted tab content
			var div = document.createElement("div");
			div.className = "s-msgbox-origin";
			$(this._coreFormatted.appendChild(div)).html(fHtmlEsc(origin));
			// add to raw tab content
			this._coreRaw.innerHTML += this.preformat(this.$item.$origin + "<br/>");
		}
		if (this.$item.$details) {
			this._ensureStackTrace();
			var div = document.createElement("div");
			div.className = "s-msgbox-details";
			$(this._coreFormatted.appendChild(div)).html((fHtmlEsc(this.$item.$details)).replace(/\n/g, '<br/>'));
			this._coreRaw.innerHTML += this.preformat(this.$item.$details + "<br/>");
		}
		if (this.$item.$diagnoses && this.$item.$diagnoses.length > 0) {
			this._appendDiagnoses(this.$item.$diagnoses);
		}
		if (this.$item.$type == "prompt") {
			this.boundFields["$prompt"][0]._input.setAttribute("size", 50);
		}
		this.getMenuItem(this._defaultBtnId).mn.className += " s-msgbox-button-default";

		// handling window dimension
		this.domItem.style.minWidth = this.$item.$minWidth ? this.$item.$minWidth + "px" : "350px"; // "400px" ? "100px" ?
		// showing msgbox
		// displayDisabled property set in site#showMessage(). used for htmleditor msgbox
		if (!this.displayDisabled) {
			if (this.$item.layoutSlot) {
				(this.layoutSlot = this.$item.layoutSlot).appendChild(this.$$item[0]);
				this.domItem.style.display = "inline-block";
			} else {
				this.domItem.style.position = "fixed";
				this.dialog = document.site.dialogManager.openModal(document.site, {
					id: helpers.uuid.generate(),
					content: this,
					$isAutoClose: false,
					$autoFocus: true,
					isResizingEnabled: false,
					resizeDialog: function(dlg) {
						dlg.centerDialog();
					}
				});
			}
		}

		if (this.$item.$isAutoClose) {
			this.appendAutoClose();
		}

		// handling window close with ENTER or ESCAPE buttons
		this.keys = {};
		if (this.$item.$showDetail) {
			this.onBodyPickerClick();
		}

		this._focusBtnId = this._defaultBtnId;
	},
	appendAutoClose: function() {
		var self = this;
		var count = (typeof(self.$item.$isAutoClose) == "number" ? self.$item.$isAutoClose : 4000) / 1000;
		self.domTitle.textContent = self.$item.$title + "  (" + count + ")";
		self.autoCloseTimeOut = setInterval(function() {
			var countTxt = "(" + (--count) + ")";
			self.domTitle.textContent = self.$item.$title + " " + countTxt;
			if (count == 0) {
				clearInterval(self.autoCloseTimeOut);
				self.close("auto");
			}
		}, 1000);
	},
	onMenuClick: function(menuItem) {
		switch (menuItem.$bind) {
			case "yes":
			case "no":
			case "ok":
			case "cancel":
				if (this.$item.$useLinkAsOk && menuItem.$bind == "ok") {
					var $bind = Object.keys(this.$item.$diagnoses[0].$links)[0];
					this.menuItems[$bind][0].domItem.click();
				} else {

					this.close(menuItem.$bind, {
						$clientId: menuItem.$bind,
						prompt: (this.$item.$type == "prompt") ? this.boundFields["$prompt"][0].getDataValue() : null
					});
				}
				return false;
		}
		return true;
	},
	onClickPicker: function(btn, event) {
		var picker = event.target;
		switch (btn.getAttribute("data-s-picker")) {
			case "tab":
				this._openedTab.className = "s-msgbox-core-tab";
				(this._openedTab = picker).className = "s-msgbox-core-tab s-open";
				document.site.toggleDom(this._coreFormatted);
				document.site.toggleDom(this._coreRaw);
				this.resizeArticle();
				break;
			case "select":
				this.selectText();
				break;
			case "body":
				this.onBodyPickerClick();
				break;
			case "msg":
				var show = picker.className.indexOf("s-open") < 0; //toggle
				document.site.toggleClass(picker, "s-open", show);
				var message = this._groups[picker.getAttribute("data-s-severity")].messages[picker.getAttribute("data-s-index")];
				if (show) {
					if (!message.stackTraceView) {
						message.stackTraceView = document.createElement("div");
						message.stackTraceView.className = "s-msgbox-diag-stackTrace";
						message.stackTraceView.innerHTML = this.preformat(((message.appCode != undefined ? message.appCode + "\n" : "") + (message.stackTrace || message.$stackTrace)).replace(/\n/g, "<br/>"));
						message.label.appendChild(message.stackTraceView);
					}
				}
				message.stackTraceView.style.display = show ? "" : "none";
				this.resizeArticle();
				break;
		}
	},
	applyShortCuts: function(shortcurts) {
		var self = this;
		if (shortcurts.enter) {
			self.onMenuClick({
				$bind: self._focusBtnId
			});
			return true;
		}
		if (shortcurts.esc) {
			self.close("esc");
			return true;
		}
		if (shortcurts.tab) {
			if (self.$itemButtons.length > 1) {
				var ii, len;
				for (ii = 0, len = self.$itemButtons.length; ii < len; ii++) {
					if (self.$itemButtons[ii].$bind == self._focusBtnId) {
						break;
					}
				}
				if (ii < len) {
					ii = shortcurts.shift ? (ii == 0 ? len - 1 : ii - 1) : (ii + 1 == len ? 0 : ii + 1);
					document.site.toggleClass(self.getMenuItem(self._focusBtnId).mn, "s-msgbox-button-default", false);
					self._focusBtnId = self.$itemButtons[ii].$bind;
					document.site.toggleClass(self.getMenuItem(self._focusBtnId).mn, "s-msgbox-button-default", true);
					setTimeout(function() {
						self.getMenuItem(self._focusBtnId).$$item.focus();
					}, 5);
				}
			}
			return true;
		}
		if (shortcurts.a && shortcurts.ctrl) {
			self.selectText();
			return true;
		}
		return false;
	},
	onBodyPickerClick: function() {
		document.site.toggleDom(this._coreTabsNav);
		document.site.toggleDom(this._core);
		var show = this.bodyPicker.className.indexOf("s-open") < 0; //toggle
		document.site.toggleClass(this.bodyPicker, "s-open", show);
		this.bodyPicker.textContent = show ? this.localize.msgbox_body_picker_opened : this.localize.msgbox_body_picker_closed;
		this._selectPicker.style.display = show ? "" : "none";
		this.resizeArticle();
	},
	_ensureStackTrace: function() {
		if (!this._core) {
			var footer = this.idMap["$footer"];
			this._coreTabsNav = document.createElement("nav");
			this._coreTabsNav.className = "s-msgbox-core-tabs-nav";
			this._coreTabsNav.style.display = "none";
			footer.domItem.parentNode.insertBefore(this._coreTabsNav, footer.domItem);

			this._core = document.createElement("div");
			this._core.className = "s-msgbox-core";
			this._core.style.display = "none";
			footer.domItem.parentNode.insertBefore(this._core, footer.domItem);

			// tabs
			var tab = document.createElement("a");
			tab.className = "s-msgbox-core-tab s-open";
			tab.setAttribute("data-s-picker", "tab");
			tab.textContent = this.localize.msgbox_nav_title_formatted;
			this._coreTabsNav.appendChild(this._openedTab = tab);
			tab = document.createElement("a");
			tab.className = "s-msgbox-core-tab";
			tab.setAttribute("data-s-picker", "tab");
			tab.textContent = this.localize.msgbox_nav_title_raw;
			this._coreTabsNav.appendChild(tab);

			// tabs content
			this._coreFormatted = document.createElement("div");
			this._coreFormatted.className = "s-msgbox-core-tab-formatted";
			this._core.appendChild(this._coreFormatted);

			this._coreRaw = document.createElement("div");
			this._coreRaw.className = "s-msgbox-core-tab-raw";
			this._coreRaw.style.display = "none";
			this._core.appendChild(this._coreRaw);

			this.bodyPicker = document.createElement("a");
			this.bodyPicker.className = "s-msg-box-body-picker";
			this.bodyPicker.setAttribute("data-s-picker", "body");
			this.bodyPicker.textContent = this.localize.msgbox_body_picker_closed;

			var slot = document.createElement("div");
			slot.className = "s-msgbox-picker-slot";
			slot.appendChild(this.bodyPicker);
			this._message.parentNode.insertBefore(slot, this._message);

			this._selectPicker = document.createElement("a");
			this._selectPicker.setAttribute("data-s-picker", "select");
			this._selectPicker.className = "s-msgbox-select-picker";
			this._selectPicker.style.display = "none";
			this._selectPicker.textContent = this.localize.msgbox_select_picker;
			slot = document.createElement("div");
			slot.className = "s-msgbox-picker-slot";
			slot.appendChild(this._selectPicker);
			this._message.parentNode.insertBefore(slot, this._message);
		}
	},
	_appendDiagnoses: function($diagnoses) {
		this._ensureStackTrace();
		// add to formatted tab content
		var diagnoses = document.createElement("div");
		diagnoses.className = "s-msgbox-diagnoses";
		this._coreFormatted.appendChild(diagnoses);

		this._groups = {};
		var severities = ["error", "fatal", "warning", "info"];
		for (var ii = 0, jj = severities.length; ii < jj; ii++) {
			var severity = severities[ii];
			var groupItem = document.createElement("div");
			groupItem.className = 's-msgbox-group-' + severity;
			this._groups[severity] = {
				groupItem: groupItem,
				messages: []
			};
		}
		for (var ii = 0, jj = $diagnoses.length; ii < jj; ii++) {
			var $diagnose = $diagnoses[ii];
			var severity = $diagnose.severity || $diagnose.$severity;
			var group = null;
			if (severity) {
				severity = severity.toLowerCase();
				group = this._groups[severity];
			}
			if (!group) {
				group = this._groups[severity = "error"];
			}
			var _code = $diagnose.appCode != null && $diagnose.appCode != undefined ? $diagnose.appCode : ($diagnose.sdataCode != null && $diagnose.sdataCode != undefined ? $diagnose.sdataCode : null);
			var message = {
				label: document.createElement("label"),
				stackTrace: $diagnose.stackTrace || $diagnose.$stackTrace,
				appCode: _code != null ? (this.localize.msgbox_diag_appCode + _code) : undefined
			};
			group.messages.push(message);
			message.label.className = "s-msgbox-label-" + severity;
			message.label.innerHTML = document.site.formatHTMLText($diagnose.message || $diagnose.$message || this.localize.msgbox_diagnose_default_msg);
			if ($diagnose.stackTrace || $diagnose.$stackTrace) {
				var picker = document.createElement("a");
				picker.setAttribute("data-s-severity", severity);
				picker.setAttribute("data-s-picker", "msg");
				picker.setAttribute("data-s-index", group.messages.length - 1);
				picker.className = "s-msgbox-diag-picker";
				message.label.appendChild(picker);
			}
			group.groupItem.appendChild(message.label);
			if ($diagnose.$links || $diagnose.$actions) {
				this.applyChange($diagnose);
			}
			diagnoses.appendChild(group.groupItem);
		}
		// add to raw tab content
		this._coreRaw.innerHTML += this.preformat(this.detailToString($diagnoses));
	},
	resizeArticle: function(setMinimumDimensions) {
		RawPage.prototype.resizeArticle.call(this);
		if (this._core) {
			this._core.style.height = "";
		}
		if (this.dialog) {
			this.dialog.resizeDialog();
		}
		if (this._core) {
			var diff = this.domItem.scrollHeight - this.domItem.clientHeight;
			if (diff) {
				this._core.style.height = Math.max((this._core.getBoundingClientRect().height - diff), 50) + "px";
			}
		}
	},
	close: function(closedBy, response) {
		if (this.$item) {
			if (this.$item.callback) {
				this.$item.callback(response, closedBy);
			}
			if (this.$$item) {
				this.$$item.remove();
			}
			this.dispose();
		}
	},
	dispose: function() {
		if (this.$item && this.$item.callback) {
			this.$item.callback = null;
		}
		if (this._groups) {
			var ids = Object.keys(this._groups);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				var id = ids[ii];
				this._groups[id].groupItem = null;
			}
		}
		if (this.autoCloseTimeOut) {
			clearInterval(this.autoCloseTimeOut);
			delete this.autoCloseTimeOut;
		}
		if (this._widgetResizer) {
			this._widgetResizer.dispose();
			this._widgetResizer = null;
		}
		if (this.dialog) {
			this.dialog.dispose();
		}
		this._coreTabsNav = this._core = this._coreFormatted = this._coreRaw = null;
		this.bodyPicker = this._selectPicker = this._message = this._$$message = this._openedTab = null;
		this.dialog = this.$itemButtons = this._groups = null;
		if (document.site) {
			document.site.messageBox = null;
		}
		RawPage.prototype.dispose.call(this);
	}
});