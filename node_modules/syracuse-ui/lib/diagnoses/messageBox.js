"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var keyHelper = require('syracuse-ui/lib/site/aside/keyHelper');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;

function MessageBox(){
}

exports.MessageBox = helpers.defineClass(MessageBox, RawPage, {
    _initFooterButtons: function(){
        if (!this.$item.$buttons) {
            switch (this.$item.$type) {
                case "question":
                    this.$item.$buttons = "yesno";
                    break;
                case "prompt":
                    this.$item.$buttons = "okcancel";
                    break;
                default:
                    this.$item.$buttons = "ok";
                    break;
            }
        }
        
        this.isAuthoringFriend = true;
        this.$prototype.$links = {};
        this.$itemButtons = [];
        var ids = ["yes", "no", "ok", "cancel"];
        for (var ii = 0, jj = ids.length; ii < jj; ii++) {
            var id = ids[ii];
            if (this.$item.$buttons.indexOf(id) >= 0) {
                this.$prototype.$links[id] = {
                    $title: this.localize["msgbox_" + id]
                };
                this.$itemButtons.push({
                    $bind: id
                });
                if ((this.$item.$default || "ok") == id) {
                    this._defaultBtnId = id;
                }
            }
        }
        if (!this._defaultBtnId) {
            this._defaultBtnId = this.$itemButtons[0].$bind;
        }
    },
    loadBox: function(initData){
        var self = this;
        self.$autoFetch = false;
        self.localize = locale.resources(module)();
        self.$item.$skin = "s-msgbox";
        
        self._initFooterButtons();
        
        self.$prototype.$properties = {
            $message: {
                $type: "application/x-string",
                $title: "$isTitleHidden",
            }
        };
        self.$item.$layout = {
            $items: [{
                $bind: "$message",
                $isTitleHidden: true,
                $skin: self.$item.$skin + "-msg"
            }]
        };
        if (self.$item.$type == "prompt") {
            self.$prototype.$properties.$prompt = {
                $type: "application/x-string"
            };
            self.$item.$layout.$items.push({
                $bind: "$prompt",
                $isEditMode: true,
                $isAutoSizeDisabled: true,
                $maxLength: 50,
                $isTitleHidden: true,
                $skin: self.$item.$skin + "-prompt"
            });
        }
        self.$item.$layout.$items.push({
            $skin: "s-msgbox-foot",
            $id: "$footer",
            $category: "menus",
            $layout: {
                $items: [{
                    $category: "menus",
                    $skin: "s-msgbox-links",
                    $isMenusBag: true
                }, {
                    $skin: "s-msgbox-buttons",
                    $layout: {
                        $layoutType: "row",
                        $fitToContent: true,
                        $items: self.$itemButtons
                    
                    },
                    onEnsureVisibility: function(menuGroup, $menuItemBind, menuItem){
                        if ($menuItemBind == self._focusBtnId) {
                            setTimeout(function(){
                                if (menuItem.$$item) {
                                    menuItem.$$item.focus();
                                }
                            }, 100);
                            
                        }
                    }
                }]
            }
        });
        RawPage.prototype.loadBox.call(this, initData);
    },
    preformat: function(txt){
        return "<pre class='s-msgbox-pre'>" + txt + "</pre>";
    },
    detailToString: function(o){
        if (o == undefined) 
            return "";
        try {
            if (typeof(o) == 'string') {
                if (o.length == 0) 
                    return o;
                o = JSON.parse(o);
            }
            return JSON.stringify(o, null, "   ");
        } 
        catch (e) {
            return o.toString();
        }
    },
    selectText: function(element){
        if (this._coreFormatted) {
            var textItem = this._coreFormatted && document.site.isDomDisplay(this._coreFormatted) ? this._coreFormatted : this._coreRaw;
            if (document.body.createTextRange) { //ms
                var range = document.body.createTextRange();
                range.moveToElementText(textItem);
                range.select();
            }
            else 
                if (window.getSelection) { //all others
                    var selection = window.getSelection();
                    var range = document.createRange();
                    range.selectNodeContents(textItem);
                    selection.removeAllRanges();
                    selection.addRange(range);
                }
        }
    },
    ensureLayoutMode: function(){
        RawPage.prototype.ensureLayoutMode.call(this);
        if (this.domTitle) {
            this.domTitle.className += " s-msgbox-msg-" + (this.$item.$severity || this.$item.$type);
        }
    },
    drawBox: function(){
        RawPage.prototype.drawBox.call(this);
        this.layoutSlot = this.$$item[0];
        document.site.setDraggable(this, $(this._header));
        
        this._message = this.boundFields.$message[0]._domItem;
        this._$$message = $(this._message);
        var msg = this.$item.$message || this.localize.msgbox_default_message;
        $(this.boundFields.$message[0].fieldValue).html(msg.replace(/\n/g, '<br/>'));
        
        // links (AFTER MSG ADDITION !)
        if (this.$item.$links || this.$item.$actions) {
            this.$item.noDispDiag = true;
            this.applyChange(this.$item);
        }
        if (this.$item.$origin) {
            this._ensureStackTrace();
            var origin = this.localize.msgbox_body_stackTrace_origin + this.$item.$origin;
            // add to formatted tab content
            var div = document.createElement("div");
            div.className = "s-msgbox-origin";
            $(this._coreFormatted.appendChild(div)).html(origin);
            // add to raw tab content
            this._coreRaw.innerHTML += this.preformat(this.$item.$origin + "<br/>");
        }
        if (this.$item.$details) {
            this._ensureStackTrace();
            var div = document.createElement("div");
            div.className = "s-msgbox-details";
            $(this._coreFormatted.appendChild(div)).html(this.$item.$details.replace(/\n/g, '<br/>'));
            this._coreRaw.innerHTML += this.preformat(this.$item.$details + "<br/>");
        }
        if (this.$item.$diagnoses && this.$item.$diagnoses.length > 0) {
            this._appendDiagnoses(this.$item.$diagnoses);
        }
        if (this.$item.$type == "prompt") {
            this.boundFields["$prompt"][0]._input.setAttribute("size", 50);
        }
        this.getMenuItem(this._defaultBtnId).mn.className += " s-msgbox-button-default";
        
        // handling window dimension 
        this._item.style.minWidth = "350px"; // "400px" ? "100px" ?
        //this._body.style.minHeight = "30px";
        if (this._core) {
            this._core.style.minHeight = "180px";
        }
        this.onWindowResize();
        
        // showing msgbox
        if (this.$item.layoutSlot) {
            (this.layoutSlot = this.$item.layoutSlot).appendChild(this.$$item[0]);
            this._item.style.display = "inline-block";
        }
        else {
            this._item.style.position = "fixed";
            this.dialog = document.site.openDialog({
                id: helpers.uuid.generate(),
                content: this,
                $autoClose: false,
                $dialogSize: "content",
            });
        }
        
        if (this.$item.$autoClose) {
            this.appendAutoClose();
        }
        
        // handling window close with ENTER or ESCAPE buttons
        this.keys = {};
        this._bindEvents(true);
        if (this.$item.$showDetail) {
            this.onBodyPickerClick();
        }
        
        this._focusBtnId = this._defaultBtnId;
    },
    appendAutoClose: function(){
        var self = this;
        var count = (typeof(self.$item.$autoClose) == "number" ? self.$item.$autoClose : 4000) / 1000;
        self.domTitle.textContent = self.$item.$title + "  (" + count + ")";
        self.autoCloseTimeOut = setInterval(function(){
            var countTxt = "(" + (--count) + ")";
            self.domTitle.textContent = self.$item.$title + " " + countTxt;
            if (count == 0) {
                clearInterval(self.autoCloseTimeOut);
                self.close("auto");
            }
        }, 1000);
    },
    onMenuClick: function(menuItem){
        switch (menuItem.$bind) {
            case "yes":
            case "no":
            case "ok":
            case "cancel":
                this.close(menuItem.$bind, {
                    $id: menuItem.$bind,
                    prompt: (this.$item.$type == "prompt") ? this.boundFields["$prompt"][0].getDataValue() : null
                });
                return false;
        }
        return true;
    },
    onClickPicker: function(pickerId, event){
        var picker = event.target;
        switch (pickerId) {
            case "tab":
                this._openedTab.className = "s-msgbox-core-tab";
                (this._openedTab = picker).className = "s-msgbox-core-tab s-open";
                document.site.toggleDom(this._coreFormatted);
                document.site.toggleDom(this._coreRaw);
                if (this.dialog) {
                    this.dialog.onWindowResize();
                }
                break;
            case "select":
                this.selectText();
                break;
            case "body":
                this.onBodyPickerClick();
                break;
            case "msg":
                var show = picker.className.indexOf("s-open") < 0; //toggle
                document.site.toggleClass(picker, "s-open", show);
                var message = this._groups[picker.getAttribute("data-s-severity")].messages[picker.getAttribute("data-s-index")];
                if (show) {
                    if (!message.stackTraceView) {
                        message.stackTraceView = document.createElement("div");
                        message.stackTraceView.className = "s-msgbox-diag-stackTrace";
                        message.stackTraceView.innerHTML = this.preformat(((message.appCode != undefined ? message.appCode + "\n" : "") + message.stackTrace).replace(/\n/g, "<br/>"));
                        message.label.appendChild(message.stackTraceView);
                    }
                }
                message.stackTraceView.style.display = show ? "" : "none";
                if (this.dialog) {
                    this.dialog.onWindowResize();
                }
                break;
        }
    },
    _bindEvents: function(bind){
        var self = this;
        var namespace = ".msgbox" + this.id
        if (bind) {
            $(document).bind("keypress" + namespace + " keydown" + namespace + " keyup" + namespace, function(event){
                switch (event.type) {
                    case "keypress":
                        switch (event.keyCode) {
                            case keyHelper.keyCode.ENTER:
                                self.onMenuClick({
                                    $bind: self._focusBtnId
                                });
                                return false;
                            case keyHelper.keyCode.ESCAPE:
                                self.close("esc");
                                return false;
                            case keyHelper.keyCode.BACKSPACE:
                                return false;
                            case keyHelper.keyCode.TAB:
                                if (self.$itemButtons.length > 1) {
                                    var ii, len;
                                    
                                    for (ii = 0, len = self.$itemButtons.length; ii < len; ii++) {
                                        if (self.$itemButtons[ii].$bind == self._focusBtnId) {
                                            break;
                                        }
                                    }
                                    
                                    if (ii < len) {
                                        ii = event.shiftKey ? (ii == 0 ? len - 1 : ii - 1) : (ii + 1 == len ? 0 : ii + 1);
                                        document.site.toggleClass(self.getMenuItem(self._focusBtnId).mn, "s-msgbox-button-default", false);
                                        self._focusBtnId = self.$itemButtons[ii].$bind;
                                        document.site.toggleClass(self.getMenuItem(self._focusBtnId).mn, "s-msgbox-button-default", true);
                                        setTimeout(function(){
                                            self.getMenuItem(self._focusBtnId).$$item.focus();
                                        }, 5);
                                    }
                                }
                                break;
                        }
                        break;
                    case "keydown":
                        switch (event.keyCode) {
                            case keyHelper.keyCode.CTRL:
                                if (self.keys) {
                                    self.keys[keyHelper.keyCode.CTRL] = true;
                                    return false;
                                }
                                break;
                            case keyHelper.keyCode.ALPHAPAD_A:
                                if (self.keys && self.keys[keyHelper.keyCode.CTRL]) {
                                    self.selectText();
                                    return false;
                                }
                                return true;
                            default:
                                return true;
                        }
                        break;
                    case "keydown":
                        if (self.keys && self.keys[event.keyCode]) {
                            delete self.keys[event.keyCode];
                            return false;
                        }
                        break;
                }
                
            });
        }
        else {
            $(document).unbind(namespace);
        }
    },
    onBodyPickerClick: function(){
        document.site.toggleDom(this._coreTabsNav);
        document.site.toggleDom(this._core);
        var show = this._bodyPicker.className.indexOf("s-open") < 0; //toggle
        document.site.toggleClass(this._bodyPicker, "s-open", show);
        this._bodyPicker.textContent = show ? this.localize.msgbox_body_picker_opened : this.localize.msgbox_body_picker_closed;
        this._selectPicker.style.display = show ? "" : "none";
        this.onWindowResize();
        if (this.dialog) {
            this.dialog.onWindowResize();
        }
    },
    _ensureStackTrace: function(){
        if (!this._core) {
            var footer = this.idMap["$footer"];
            this._coreTabsNav = document.createElement("nav");
            this._coreTabsNav.className = "s-msgbox-core-tabs-nav";
            this._coreTabsNav.style.display = "none";
            footer._item.parentNode.insertBefore(this._coreTabsNav, footer._item);
            
            this._core = document.createElement("div");
            this._core.className = "s-msgbox-core";
            this._core.style.display = "none";
            footer._item.parentNode.insertBefore(this._core, footer._item);
            
            // tabs
            var tab = document.createElement("a");
            tab.className = "s-msgbox-core-tab s-open";
            tab.setAttribute("data-s-picker", "tab");
            tab.textContent = this.localize.msgbox_nav_title_formatted;
            this._coreTabsNav.appendChild(this._openedTab = tab);
            tab = document.createElement("a");
            tab.className = "s-msgbox-core-tab";
            tab.setAttribute("data-s-picker", "tab");
            tab.textContent = this.localize.msgbox_nav_title_raw;
            this._coreTabsNav.appendChild(tab);
            
            // tabs content
            this._coreFormatted = document.createElement("div");
            this._coreFormatted.className = "s-msgbox-core-tab-formatted";
            this._core.appendChild(this._coreFormatted);
            
            this._coreRaw = document.createElement("div");
            this._coreRaw.className = "s-msgbox-core-tab-raw";
            this._coreRaw.style.display = "none";
            this._core.appendChild(this._coreRaw);
            
            this._bodyPicker = document.createElement("a");
            this._bodyPicker.className = "s-msg-box-body-picker";
            this._bodyPicker.setAttribute("data-s-picker", "body");
            this._bodyPicker.textContent = this.localize.msgbox_body_picker_closed;
            
            var slot = document.createElement("div");
            slot.className = "s-msgbox-picker-slot";
            slot.appendChild(this._bodyPicker);
            this._message.parentNode.insertBefore(slot, this._message);
            
            this._selectPicker = document.createElement("a");
            this._selectPicker.setAttribute("data-s-picker", "select");
            this._selectPicker.className = "s-msgbox-select-picker";
            this._selectPicker.style.display = "none";
            this._selectPicker.textContent = this.localize.msgbox_select_picker;
            slot = document.createElement("div");
            slot.className = "s-msgbox-picker-slot";
            slot.appendChild(this._selectPicker)
            this._message.parentNode.insertBefore(slot, this._message);
        }
    },
    _appendDiagnoses: function($diagnoses){
        this._ensureStackTrace();
        // add to formatted tab content
        var diagnoses = document.createElement("div");
        diagnoses.className = "s-msgbox-diagnoses";
        this._coreFormatted.appendChild(diagnoses);
        
        this._groups = {};
        var severities = ["error", "fatal", "warning", "info"];
        for (var ii = 0, jj = severities.length; ii < jj; ii++) {
            var severity = severities[ii];
            var groupItem = document.createElement("div");
            groupItem.className = 's-msgbox-group-' + severity;
            this._groups[severity] = {
                groupItem: groupItem,
                messages: []
            };
        }
        for (var ii = 0, jj = $diagnoses.length; ii < jj; ii++) {
            var $diagnose = $diagnoses[ii];
            var severity = $diagnose.severity;
            var group = null;
            if (severity) {
                severity = severity.toLowerCase();
                group = this._groups[severity];
            }
            if (!group) {
                group = this._groups[severity = "error"]
            }
            var _code = $diagnose.appCode != null && $diagnose.appCode != undefined ? $diagnose.appCode : ($diagnose.sdataCode != null && $diagnose.sdataCode != undefined ? $diagnose.sdataCode : null);
            var message = {
                label: document.createElement("label"),
                stackTrace: $diagnose.stackTrace,
                appCode: _code != null ? (this.localize.msgbox_diag_appCode + _code) : undefined
            };
            group.messages.push(message);
            message.label.className = "s-msgbox-label-" + severity;
            message.label.innerHTML = document.site.formatHTMLMessage($diagnose.message || this.localize.msgbox_diagnose_default_msg);
            if ($diagnose.stackTrace) {
                var picker = document.createElement("a");
                picker.setAttribute("data-s-severity", severity);
                picker.setAttribute("data-s-picker", "msg");
                picker.setAttribute("data-s-index", group.messages.length - 1);
                picker.className = "s-msgbox-diag-picker";
                message.label.appendChild(picker);
            }
            group.groupItem.appendChild(message.label);
            if ($diagnose.$links || $diagnose.$actions) {
                this.applyChange($diagnose);
            }
            diagnoses.appendChild(group.groupItem);
        }
        // add to raw tab content
        this._coreRaw.innerHTML += this.preformat(this.detailToString($diagnoses));
    },
    onWindowResize: function(setMinimumDimensions){
        var body = document.site.$$body[0];
        var computeItemMaxWidth = (body.clientWidth - 600);
        this._item.style.maxWidth = computeItemMaxWidth >= 800 ? "800px" : computeItemMaxWidth + "px";
        if (this._core) {
            var bodyMsgHeight = this._$$message.outerHeight();
            var computeBodyStackMaxHeight = (body.clientHeight - $(this._header).outerHeight() - bodyMsgHeight - 150);
            this._core.style.maxHeight = computeBodyStackMaxHeight >= 500 ? "500px" : computeBodyStackMaxHeight + "px";
        }
    },
    close: function(closedBy, response){
        var self = this;
        if (self.$item) {
            if (self.$item.callback) {
                self.$item.callback(response, closedBy);
            }
            if (self.$$item) {
                self.$$item.remove();
            }
            document.controller.disposeObject(self);
        }
    },
    dispose: function(){
        if (this.$item.callback) {
            this.$item.callback = null;
        }
        if (this._groups) {
            var ids = Object.keys(this._groups);
            for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                var id = ids[ii];
                this._groups[id]._groupItem = null;
            }
        }
        if (this.autoCloseTimeOut) {
            clearInterval(this.autoCloseTimeOut);
            delete this.autoCloseTimeOut;
        }
        this._bindEvents(false);
        this._coreTabsNav = this._core = this._coreFormatted = this._coreRaw = null;
        this._bodyPicker = this._selectPicker = this._message = this._$$message = this._openedTab = null;
        this.$itemButtons = this._groups = null;
        RawPage.prototype.dispose.call(this);
    }
});
