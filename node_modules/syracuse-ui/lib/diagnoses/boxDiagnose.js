"use strict";
var helpers = require('syracuse-core/lib/helpers');

function BoxDiagnose(titleDom, isTab){
    this.titleDom = titleDom;
    this.isTab = isTab;
    this.diagClassNameRoot = this.isTab ? "s-box-tab-" : "s-box-collapsible-";
    this.severitiesCount = {
        "error": 0,
        "fatal": 0,
        "warning": 0,
        "info": 0
    };
    this.fieldsData = [];
}

exports.BoxDiagnose = helpers.defineClass(BoxDiagnose, null, {
    addFieldData: function(fieldId, severity){
        var index;
        for (var ii = 0; ii < this.fieldsData.length; ii++) {
            index = this.fieldsData[ii].fieldId == fieldId ? ii : index;
            if (index != undefined) {
                break;
            }
        }
        var fieldData = index != undefined ? this.fieldsData[index] : {};
        fieldData.fieldId = fieldData.fieldId || fieldId;
        fieldData.severitiesCount = fieldData.severitiesCount ||
        {
            "error": 0,
            "fatal": 0,
            "warning": 0,
            "info": 0
        };
        fieldData.severitiesCount[severity]++;
        if (index != undefined) {
            this.fieldsData.splice(index);
        }
        this.fieldsData.push(fieldData);
    },
    getPrioritySeverity: function(){
        var priorityOrder = ["fatal", "error", "warning", "info"];
        var severity = "";
        for (var i = 0; i < priorityOrder.length; i++) {
            severity = this.severitiesCount[priorityOrder[i]] > 0 ? priorityOrder[i] : severity;
            if (severity) {
                return severity;
            }
        }
        return severity;
    },
    appendDiagnoseIcon: function(fieldId, severity){
        // add field data
        this.addFieldData(fieldId, severity);
        
        // following operations are only necessary for box with titleDom
        if (this.titleDom) {
            // add severity count
            this.severitiesCount[severity]++;
            var prioritySeverity = this.getPrioritySeverity();
            // two possibilites 
            //"icon already" -> change icon or not ?
            //"icon not yet" -> add it            
            // icon already appended
            if (this.$hasIcon) {
                // severity priority change ? else do nothing
                
                if (this.prioritySeverity != prioritySeverity) {
                    document.site.toggleClass(this.titleDom, this.diagClassNameRoot + this.prioritySeverity);
                    document.site.toggleClass(this.titleDom, this.diagClassNameRoot + prioritySeverity, true);
                    //this.$$titleDom.toggleClass(this.diagClassNameRoot + this.prioritySeverity).toggleClass(this.diagClassNameRoot + prioritySeverity);
                }
            }
            // icon not yet appended.
            else {
                document.site.toggleClass(this.titleDom, this.diagClassNameRoot + severity, true);
                //this.$$titleDom.addClass(this.diagClassNameRoot + severity);
                this.$hasIcon = true;
                
            }
            this.prioritySeverity = prioritySeverity;
            this.diagClassName = this.diagClassNameRoot + this.prioritySeverity;
        }
    },
    removeDiagnoseIcon: function(fieldId, severity){
        //var diagClassNameRoot = isTab ? "s-box-tab-" : "s-box-collapsible-";
        //var diagClassName = diagClassNameRoot + severity;  
        // remove field data
        if (this.fieldsData) {
            var index;
            for (var ii = 0; ii < this.fieldsData.length; ii++) {
                index = this.fieldsData[ii].fieldId == fieldId ? ii : index;
                if (index != undefined) {
                    break;
                }
            }
            // update field data
            if (index != undefined) {
                this.fieldsData[index].severitiesCount[severity]--;
            }
        }
        if (this.titleDom) {
            // decrease severity count
            this.severitiesCount[severity]--;
            
            // change icon if necessary
            // case 1 : no more priority -> remove
            // case 2 : priority
            // case 2-1 : same as old one, do nothing
            // case 2-2 : different than previous one, change
            
            var prioritySeverity = this.getPrioritySeverity();
            if (!prioritySeverity) {
                document.site.toggleClass(this.titleDom, this.diagClassNameRoot + this.prioritySeverity);
                //this.$$titleDom.toggleClass(this.diagClassNameRoot + this.prioritySeverity);
                this.$hasIcon = false;
            }
            else {
                if (this.prioritySeverity != prioritySeverity) {
                    document.site.toggleClass(this.titleDom, this.diagClassNameRoot + this.prioritySeverity);
                    document.site.toggleClass(this.titleDom, this.diagClassNameRoot + prioritySeverity, true);
                    //this.$$titleDom.toggleClass(this.diagClassNameRoot + this.prioritySeverity).toggleClass(this.diagClassNameRoot + prioritySeverity);
                }
            }
            this.prioritySeverity = prioritySeverity;
            this.diagClassName = this.diagClassNameRoot + this.prioritySeverity;
        }
    },
    dispose: function(){
        this.severitiesCount = this.titleDom = this.diagClassNameRoot = this.fieldsData = this.$hasIcon = this.prioritySeverity = this.diagClassName = null;
    }
});
