"use strict";
var MenuItem = require('./menuItem').MenuItem;

function MenuBlock(navParent, variant_dataset) {
	this.variantKey = "menuBlock";
	syra_item.initialize(navParent.page, this);
	this.navParent = navParent;
	this.submodule = navParent.submodule || navParent;
	this.record = this.dataset = variant_dataset.menuBlock;
	this.variant_dataset = variant_dataset;
	this.$skin = this.page.$skins.block;

	(this.mode = this.page.mode.menuBlock).create(this);

	this.submodule.addChildren(this.dataset.items, this);

	!this.megaDetailPanel && this.slot.appendChild(this.body);
}

MenuBlock.prototype.onItemInOut = function(onEnter) {
	var self = this;
	if (onEnter) {
		self.navParent.onEnter = true;
		if (self.navParent.lastSelected === null) {
			self.navParent.onEnter && self.activate(true);
		} else {
			if (self.navParent.lastSelected === self) {
				if (self.navParent.moduleTimer) {
					clearTimeout(self.navParent.moduleTimer);
					delete self.navParent.moduleTimer;
				}
			} else {
				self.navParent.moduleTimer && clearTimeout(self.navParent.moduleTimer);
				self.navParent.moduleTimer = setTimeout(function() {
					self.navParent.onEnter && self.megaDetailPanel && self.activate(true);
					delete self.navParent.moduleTimer;
				}, 150);
			}
		}
	} else {
		self.navParent.onEnter = false;
	}
};

MenuBlock.prototype.activate = function(on) {
	this.megaDetailPanel && this.submodule.activate(on, this);
};

MenuBlock.prototype.getChild = function(uuid) {
	for (var ii = 0, jj = this.children.length; ii <= jj; ii++) {
		var item = this.children[ii];
		if (item.dataset.$uuid === uuid)
			return item;
	}
};


function SubModule(module, dataset) {
	syra_item.initialize(module.page, this);
	this.dataset = dataset || {};
	this.$prototype = module.$prototype.$properties.submodules.$item;
	this.navParent = this.articleParent = this.boxParent = module;

	this.$skin = this.page.$skins.submodule;
	this.slot = syra_dom.li(this.$skin);
	this.slot.syraItem = this.slot.syrainout = this.id;
	(this.mode = this.page.mode.subModule).create(this);

	this.navParent.body && this.navParent.body.appendChild(this.slot);
}

SubModule.prototype.onItemInOut = function(onEnter) {
	var self = this;
	if (onEnter) {
		self.navParent.onEnter = true;
		if (self.navParent.lastSelected === null) {
			self.navParent.onEnter && self.activate(true);
		} else {
			if (self.navParent.lastSelected === self) {
				if (self.navParent.moduleTimer) {
					clearTimeout(self.navParent.moduleTimer);
					delete self.navParent.moduleTimer;
				}
			} else {
				self.navParent.moduleTimer && clearTimeout(self.navParent.moduleTimer);
				self.navParent.moduleTimer = setTimeout(function() {
					self.navParent.onEnter && self.activate(true);
					delete self.navParent.moduleTimer;
				}, 150);
			}
		}
	} else {
		self.navParent.onEnter = false;
	}
};

SubModule.prototype.activate = function(on, block) {
	block = block || this;
	if (on) {
		if (block.navParent.lastSelected) {
			block.navParent.lastSelected.activate(false);
		}
		this.mode.activate(on, block);
		var child = block.lastSelected || block.children[0];
		if (child && child.activate) {
			child.activate(true);
		}
	} else {
		if (block == block.navParent.lastSelected) {
			block.navParent.lastSelected = null;
		}
		this.mode.activate(on, block);
	}
};

SubModule.prototype.addChildren = function(items, parent) {
	parent = parent || this;
	parent.children = [];
	if (items.length) {
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			this.addChild(items[ii], parent);
		}
	}
	this.ensureNoChild(parent);
};

SubModule.prototype.ensureNoChild = function(parent) {
	parent = parent || this;
	if (parent.children.length) {
		if (parent.noChild) {
			syra_dom.remove(parent.noChild);
			delete parent.noChild;
		}
	} else {
		var slot = parent.megaDetailPanel ? parent.megaDetailPanel.cols[0] : parent.body;
		syra_dom.empty(slot);
		parent.noChild = syra_dom.li(parent.page.$skins.nomenu, slot);
		parent.noChild.textContent = syra_local.nvpNoMenuItem;
	}
};

SubModule.prototype.addChild = function(record, parent) {
	parent = parent || this;
	if (record.menuItem || record.menuBlock) {
		var child = new(record.menuItem ? MenuItem : MenuBlock)(parent, record);
		var slot = parent.megaDetailPanel ? parent.megaDetailPanel.cols[0] : parent.body;
		slot.appendChild(child.slot);
		parent.children.push(child);
		return child;
	}
};
SubModule.prototype.getChild = function(uuid) {
	for (var ii = 0, jj = this.children.length; ii <= jj; ii++) {
		var item = this.children[ii];
		if (item.dataset.$uuid === uuid)
			return item;
	}
};

exports.add = function(module, dataset) {
	return new SubModule(module, dataset);
};