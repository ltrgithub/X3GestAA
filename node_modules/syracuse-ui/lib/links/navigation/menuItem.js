"use strict";
var helpers = require('syracuse-core').helpers;

function MenuItem(navParent, variant_dataset) {
	this.variantKey = "menuItem";
	syra_item.initialize(navParent.page, this);
	this.$skin = navParent.$skin_menu || this.page.$skins.menu;
	this.navParent = navParent;
	this.submodule = navParent.submodule || navParent;
	this.dataset = variant_dataset.menuItem;
	this.variant_dataset = variant_dataset;
	this.load();
	if (this.page.mode.menuItem) {
		this.page.mode.menuItem.create(this);
	}
}

exports.MenuItem = MenuItem;

MenuItem.prototype.load = function() {
	this.slot = syra_dom.li(this.$skin + "-slot");
	this.domItem = syra_dom.anchor(this.$skin);
	this.domItem.textContent = this.dataset.title;
	this.slot.syraItem = this.domItem.syraItem = this.id;
	this.domItem.syraOnClick = "click";
	this.slot.appendChild(this.domItem);
	var _$executes = ["$execute_$query", "$execute_$details", "$execute_$edit", "$execute_$cube"];
	if (this.dataset && this.dataset.$links) {
		this.page = this.submodule.page;
		this.articleParent = this.submodule;

		for (var ii = 0, jj = _$executes.length; ii < jj; ii++) {
			var $execute = this.dataset.$links[_$executes[ii]];
			if ($execute) {
				$execute.$title = $execute.$title;
				if (this.dataset.convergenceFunction) {
					$execute.$description = syra_local.nvpFunction + ": " + this.dataset.convergenceFunction;
				} else {
					if (this.dataset.entity) {
						$execute.$description = syra_local.nvpEntity + ": " + this.dataset.entity;
						if (this.dataset.entity != helpers.string.pluralize(this.dataset.representation || "")) {
							$execute.$description += " (" + syra_local.nvpRepresentation + ": " + this.dataset.representation + ")";
						}
					}
				}
				if (!$execute.$description) {
					$execute.$description = this.dataset.$description;
				}

				var props = Object.keys($execute);
				for (var mm = 0, kk = props.length; mm < kk; mm++) {
					var prop = props[mm];
					this[prop] = $execute[prop];
				}

				this.$url = $execute.$url;
				syra_url.history.setHref(this);

				this.codeMenu = {
					href: this.href,
					$url: this.$url,
					description: this.description,
					title: this.title
				};

				this.singleField = {
					$variantItemKey: this.variantKey,
					variantItem: this
				};

				this.domItem.title = this.$description || this.$title;
				this.singleField.$variantItemKey = this.variantKey;
				this.isMenuItem = true;
				this.$item = {};

				this.urlSegment = syra_url.parse(this.codeMenu.$url);
				if (this.page.showBookmarks && this.codeMenu.href) {
					this.slot.syrainout = this.id;
					syra_bookmarks.addButton(this);
				}
				if (this.page.isActivePageFusion && !this.urlSegment.isFusion) {
					syra_dom.disable(this.domItem, this.$disabled = true);
				}
				break;
			}
		}
	}
};

MenuItem.prototype.onItemInOut = function(onEnter) {
	if (this.bookmarkBtn) {
		this.bookmarkBtn.link.style.visibility = onEnter ? "visible" : "";
	}
};

MenuItem.prototype.click = function(event) {
	var self = this;
	if (!self.$disabled) {
		syra_menus.click.fire({
			menu: this,
			event: event

		}, event);
		if (self.page.onNavMenuClick) {
			setTimeout(function() {
				self.page.onNavMenuClick();
			}, 200);
		}
	}
};