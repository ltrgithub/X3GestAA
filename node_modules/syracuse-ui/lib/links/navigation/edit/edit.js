"use strict";
var Scrollbar = require('syracuse-ui/lib/scroll/scrollbar').Scrollbar;
var Sortable = require('syracuse-ui/lib/scroll/sortable').Sortable;

var _editItem = require('./editItem');

var _cols, _page;

function Column(level, skin) {
	this.level = level;
	this.slot = syra_dom.div(skin + "-slot", _page.body);
	this.header = syra_dom.div(skin + "-header", this.slot);
	this.title = syra_dom.text(skin + "-title", syra_local["nav_edit_" + level], this.header);
	this.actions = syra_dom.div("s-nav-edit-list-actions", this.header);

	this.body = syra_dom.div(skin + "-body", this.slot);
	this.scrollview = syra_dom.div(skin + "-scollview", this.body);
	this.scrollBar = new Scrollbar({
		container: this.body,
		scrollview: this.scrollview
	});

	this.resize = function(height) {
		this.body.style.height = height + "px";
		this.scrollBar.resize();
	};
	this.dispose = function() {
		this.scrollBar.dispose();
		this.sortable && this.sortable.dispose();
		syra_site.disposeObject(this);
	};
	this.disable = function(disabled) {
		if (this.disabled != disabled) {
			this.disabled = disabled;
			for (var ii = 0, jj = this.buttons.length; ii < jj; ii++) {
				syra_button.disable(this.buttons[ii], disabled);
			}
			if (this.disabled) {
				this.resize(); //avoid scrollbar
			}
		}
	};
}

function _getArticleParent(level) {
	return level == "modules" ? _page : _page.lastSelected;
}

function _create() {
	var btn = this;
	var articleParent = _getArticleParent(btn.level);
	syra_over.openModal(_page, {
		article: _page,
		$url: syra_expression.parse(articleParent, btn.$create.$url),
		$method: btn.$create.$method,
		onServerSaved: function(menuItem, modal) {
			if (!articleParent.dataset[btn.level]) {
				articleParent.dataset[btn.level] = [];
			}
			articleParent.dataset[btn.level].push(modal.page.dataset);
			var child = articleParent.addChild(modal.page.dataset);
			articleParent.ensureNoChild();
			_page.scrollToItem(child.slot, _cols[btn.level].scrollview, true);
			child.activate(true);
			modal.close(true);
			return false;
		}
	});
}

function _select() {
	var btn = this;
	var articleParent = _getArticleParent(btn.level);
	var record = record = btn.record || articleParent;
	syra_over.openModal(_page, {
		article: _page,
		$url: syra_expression.parse(articleParent, btn.$select.$url, record.dataset),
		onValidate: function() {
			var selected = this.selected;
			if (selected && selected.length) {
				var delta = syra_dataset.delta.array.add(record.dataset[btn.level], selected);
				if (delta.length > 0) {
					var sending = {
						$uuid: articleParent.dataset.$uuid,
						$etag: 1
					};
					sending[btn.level] = delta;
					syra_ajax.put({
						page: _page,
						url: syra_expression.parse(articleParent, articleParent.dataset.$url || articleParent.$prototype.$url),
						data: sending,
						success: function(newData, response, requestUrl) {
							if (!_page.disposed) {
								syra_dataset.applyDelta(_page, articleParent.dataset, newData);
								if (newData.$diagnoses) {
									syra_alert.show(newData.$diagnoses, articleParent);
								}
								var children = record.dataset[btn.level];
								if (children) {
									var child;
									for (var ii = 0, jj = selected.length; ii < jj; ii++) {
										child = syra_dataset.array.find(children, selected[ii].$uuid);
										if (child) {
											child = articleParent.addChild(child, record);
										}
									}
									if (child) {
										articleParent.ensureNoChild(record);
										_page.scrollToItem(child.slot, btn.parent.scrollview, true);
										child.activate && child.activate(true);
									}
								}
							}
						}
					});
				}
			}
		},
		onSelectRecord: function(selected) {
			this.selected = [];
			var $uuids = Object.keys(selected);
			for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
				this.selected.push(selected[$uuids[ii]].dataset);
			}
			return false;
		}
	});
}

function _edit() {
	var btn = this;
	var record = btn.parent;
	var articleParent = record.articleParent;
	syra_over.openModal(_page, {
		article: _page,
		$url: syra_expression.parse(record, btn.$edit.$url),
		$method: btn.$edit.$method,
		onServerSaved: function(menuItem, modal) {
			var newData = modal.page.dataset;
			syra_dataset.applyDelta(_page, record.dataset, newData);
			if (newData.$diagnoses) {
				syra_alert.show(newData.$diagnoses, record);
			}
			record.title.textContent = record.dataset.title;
			record.slot.title = "";
			if (record.dataset.description && record.dataset.description != record.dataset.title) {
				record.slot.title = record.dataset.description;
			}
			_page.scrollToItem(record.slot, _cols[btn.level].scrollview, true);
			record.activate(true);
			modal.close(true);
			return false;
		}
	});
}

function _delete() {
	var btn = this;
	var record = btn.parent;
	var articleParent = record.articleParent;
	var recordIndex = articleParent.children.indexOf(record);
	syra_alert.ask({
		$title: btn.text,
		$message: syra_expression.parse(record, syra_local["nav_edit_confirm_delete_" + btn.level]),
		yes: function() {
			var sending = {
				$uuid: articleParent.dataset.$uuid,
				$etag: 1
			};
			sending[btn.level] = [{
				$index: recordIndex,
				$isDeleted: true,
				$uuid: record.dataset.$uuid
			}];
			syra_ajax.put({
				page: _page,
				url: syra_expression.parse(articleParent, articleParent.dataset.$url || articleParent.$prototype.$url),
				data: sending,
				success: function(newData, response, requestUrl) {
					if (!_page.disposed) {
						syra_dataset.applyDelta(_page, articleParent.dataset, newData);
						if (newData.$diagnoses) {
							syra_alert.show(newData.$diagnoses, articleParent);
						}
						if (articleParent.lastSelected == record) {
							record.activate(false);
						}
						syra_dom.remove(record.slot);
						articleParent.children.splice(articleParent.children.indexOf(record), 1);
						_page.disposeChild(record);
						if (articleParent.children.length) {
							if (articleParent.lastSelected == record) {
								delete articleParent.lastSelected;
								record = articleParent.children[Math.min(recordIndex, articleParent.children.length - 1)];
								_page.scrollToItem(record.slot, _cols[btn.level].scrollview, true);
								record.activate && record.activate(true);
							}
						} else {
							articleParent.ensureNoChild();
							articleParent.activate(true);
						}
					}
				}
			});
		}
	});
}

function _addGroup(level, $group) {
	var col = _cols[level] = new Column(level, "s-nav-edit-modules");
	var $links = $group.$links;
	if ($links) {
		$links.$create &&
			syra_button.add({
				parent: col,
				slot: col.actions,
				text: $links.$create.$title,
				css: "s-nav-edit-list-action",
				$create: $links.$create,
				level: level,
				fontIcon: "create",
				click: _create
			});
		$links.$select &&
			syra_button.add({
				parent: col,
				slot: col.actions,
				css: "s-nav-edit-list-action",
				$select: $links.$select,
				text: $links.$select.$title,
				level: level,
				fontIcon: "select",
				click: _select
			});
		col.$recordActions = {
			$edit: $group.$item.$links && $group.$item.$links.$edit,
			$delete: $group.$capabilities && $group.$capabilities.indexOf("delete") >= 0
		};
	}
}

function _drawColumns() {
	_cols = [];

	var modules = _page.$prototype.$properties.modules;
	_addGroup("modules", modules);

	var submodules = modules.$item.$properties.submodules;
	_addGroup("submodules", submodules);

	_editItem.setColumn(_page, _cols.items = new Column("items", "s-nav-edit-items"), submodules.$item.$properties.items);

	_cols.resize = function() {
		var height = _cols.modules.slot.clientHeight - _cols.modules.header.clientHeight;
		_cols.modules.resize(height);
		_cols.submodules.resize(height);
		_cols.items.resize(height);
	};
}

exports.page = {
	draw: function(page, $representation) {
		syra_nav.toggleMegaMenus(false);
		_page = page;

		page.isBackButtonDisabled = true;
		page.isMenuBarDisabled = true;
		page.mainPageDesignerAccess = "disabled";
		page.isAutoInsertFieldDisabled = true;

		page.$skins = {
			module: "s-nav-edit-module",
			submodule: "s-nav-edit-module",
			nosubmodules: "s-nav-edit-no-submodules",
			block: "s-nav-edit-block",
			menu: "s-nav-edit-link",
			nomenu: "s-nav-edit-no-menu"
		};

		page.$prototype = $representation.$prototype;
		page.dataset = {};
		var $keys = Object.keys($representation);
		for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
			if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
				page.dataset[$keys[ii]] = $representation[$keys[ii]];
			}
		}
		page.$skin = "s-nav-edit";
		page.domItem = syra_dom.article("s-page");
		page.domItem.syraPage = page.domItem.syraItem = page.id;
		page.diagnoseSlot = syra_dom.div("", page.domItem);
		page.header = syra_dom.header("s-page-head", page.domItem);

		page.domTitle = syra_dom.div("s-page-title", page.header);
		page.domTitle.syraItem = page.id;
		page.setTitle(page.$prototype.$title);

		page.body = syra_dom.div("s-page-body", page.domItem);
		_drawColumns(page);

		page.resizeItem = function() {
			if (_page) { //resizeItem is called in dispose by toggleMegaMenus	
				if (!this.isMapLoaded) {
					this.isMapLoaded = true;
					if (this.children.length) {
						this.children[0].activate(true);
					}
				}
				if (this.isMapLoaded) {
					delete this.size;
					this.getPageSize();
					this.body.style.height = (this.size.barHeight - this.size.headerHeight - this.diagnoseSlot.clientHeight) + "px";
					_cols.items.slot.style.maxWidth = (this.body.clientWidth - _cols.modules.slot.clientWidth - _cols.submodules.slot.clientWidth) + "px";
					_cols.resize();
				}
			}
		};
		syra_menus.applyChange(syra_site, {
			$links: {
				site_sitemap: {
					$isDisabled: false
				}
			}
		});

		page.layoutSlot.appendChild(page.domItem);
	},
	dispose: function() {
		_editItem.dispose();
		if (_cols) {
			_cols.modules.dispose();
			_cols.submodules.dispose();
			_cols.items.dispose();
			_cols = null;
		}
		_page = null;

		syra_nav.toggleMegaMenus(true);
	}
};

function _addRecordActions($actions, record, level) {
	var actions = syra_dom.div("s-nav-edit-group-actions", record.slot);
	if ($actions.$edit) {
		syra_button.add({
			parent: record,
			slot: actions,
			text: $actions.$edit.$title,
			css: "s-nav-edit-group-action",
			$edit: $actions.$edit,
			fontIcon: "edit",
			iconOnly: true,
			level: level,
			click: _edit
		});
	}
	if ($actions.$delete) {
		syra_button.add({
			parent: record,
			slot: actions,
			text: syra_local.flDelete,
			fontIcon: "delete",
			css: "s-nav-edit-group-action",
			iconOnly: true,
			level: level,
			click: _delete
		});
	}
}


function setGroupSortable(col, root) {
	col.sortable && col.sortable.dispose();
	col.sortable = new Sortable({
		root: root,
		handle: col.level,
		scrollview: col.scrollBar.scrollview,
		start: function(node) {
			this.moved = syra_item.findItem(node);
			var lastSelected = (col.level == "modules") ? _page.lastSelected : _page.lastSelected.lastSelected;
			if (this.moved !== lastSelected) {
				this.moved.activate(true);
			}
		},
		setDraggingText: function(node) {
			return this.moved.dataset.title;
		},
		end: function(node) {
			var moved = this.moved;
			delete this.moved;
			var index = syra_dom.getNodeIndex(node);

			syra_dataset.array.moveTo(moved.navParent.dataset[col.level], moved.dataset, index);
			syra_dataset.array.moveTo(moved.navParent.children, moved, index);

			_commitSortable(syra_dataset.delta.array.$uuids(moved.articleParent.dataset[col.level]), moved, col);
		}
	});
}

function setItemsSortable(col, root) {
	col.sortable && col.sortable.dispose();
	col.sortable = new Sortable({
		root: root,
		handle: col.level,
		scrollview: col.scrollBar.scrollview,
		start: function(node) {
			this.moved = syra_item.findItem(node);
		},
		setDraggingText: function(node) {
			return this.moved.dataset.title;
		},
		end: function(node) {
			var moved = this.moved;
			delete this.moved;

			var index = syra_dom.getNodeIndex(node);

			var navParent = moved.navParent;
			navParent.dataset.items.splice(navParent.dataset.items.indexOf(moved.variant_dataset), 1);
			navParent.children.splice(navParent.children.indexOf(moved), 1);

			navParent = syra_item.findItem(moved.slot.parentNode);
			navParent.dataset.items.splice(index, 0, moved.variant_dataset);
			navParent.children.splice(index, 0, moved);
			moved.submodule.ensureNoChild(navParent);
			_commitSortable(moved.articleParent.dataset.items, moved, col);

		}
	});
}

function _commitSortable(items, moved, col) {
	var articleParent = moved.articleParent;
	var sending = {
		$uuid: articleParent.dataset.$uuid,
		$etag: 1
	};
	sending[col.level] = items;
	syra_ajax.put({
		page: _page,
		url: syra_expression.parse(articleParent, articleParent.dataset.$url || articleParent.$prototype.$url),
		data: sending,
		success: function(newData, response, requestUrl) {
			if (!_page.disposed) {
				syra_dataset.applyDelta(_page, articleParent.dataset, newData);
				if (newData.$diagnoses) {
					syra_alert.show(newData.$diagnoses, articleParent);
				}
				_page.scrollToItem(moved.slot, col.scrollview, true);
				moved.activate && moved.activate(true);
			}
		}
	});
}


exports.module = {
	create: function(record) {
		syra_dom.div("s-nav-edit-reorder", record.slot).syraSortableHandle = "modules";
		record.title = syra_dom.span(record.$skin + "-title", record.slot);
		record.title.textContent = record.dataset.title;
		_addRecordActions(_cols.modules.$recordActions, record, _cols.modules.level);
		if (!_page.modulesBody) {
			_page.modulesBody = syra_dom.ul("s-nav-edit-modules", _cols.modules.scrollview);
			setGroupSortable(_cols.modules, _page.modulesBody);
		}
		_page.modulesBody.appendChild(record.slot);
	},
	activate: function(on, module) {
		if (on) {
			if (!module.body) {
				module.body = syra_dom.ul("s-nav-edit-module-body");
				module.addChildren();
			}
			_cols.submodules.scrollview.appendChild(module.body);
			setGroupSortable(_cols.submodules, module.body);
			_cols.items.disable(!!module.noChild);
		} else {
			syra_dom.remove(module.body);
			module.lastSelected && syra_dom.remove(module.lastSelected.body);
		}
	}
};


exports.subModule = {
	create: function(record) {
		syra_dom.div("s-nav-edit-reorder", record.slot).syraSortableHandle = "submodules";
		record.title = syra_dom.span(record.$skin + "-title", record.slot);
		record.title.textContent = record.dataset.title;
		_addRecordActions(_cols.submodules.$recordActions, record, _cols.submodules.level);
		record.body = syra_dom.ul(record.$skin + "-body");
		record.body.syraItem = record.id; //!! important for sortable to find articleParent
		record.addChildren(record.dataset.items);
	},
	activate: function(on, block) {
		if (on) {
			_cols.items.scrollview.appendChild(block.scrollview || block.body);
			setItemsSortable(_cols.items, block.body);
			block.navParent.lastSelected = block;
			_cols.items.disable(false);
			_cols.resize();
		} else {
			syra_dom.remove(block.scrollview || block.body);
		}
		block.title.className = block.$skin + "-title" + (on ? " s-selected" : "");
		block.slot.className = block.$skin + (on ? " s-selected" : "");
	}
};


exports.menuBlock = _editItem.menuBlock;

exports.menuItem = _editItem.menuItem;