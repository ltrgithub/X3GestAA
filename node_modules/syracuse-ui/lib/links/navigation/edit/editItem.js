"use strict";
var _helpers = require('syracuse-core').helpers;

var _col, _page;

function _getSelectedSubModule() {
	return _page.lastSelected.lastSelected;
}

function _createBlock() {
	var btn = this;
	var submodule = _getSelectedSubModule();
	var record = btn.record || submodule;
	record.dataset.items.push({
		menuBlock: {
			$uuid: _helpers.uuid.generate(),
			title: syra_local.nav_edit_edit_block
		}
	});
	syra_ajax.put({
		lock: true,
		page: _page,
		url: syra_expression.parse(submodule, submodule.dataset.$url || submodule.$prototype.$url),
		data: {
			$uuid: submodule.dataset.$uuid,
			$etag: 1,
			items: submodule.dataset.items
		},
		success: function(newData, response, requestUrl) {
			if (!_page.disposed) {
				syra_dataset.applyDelta(_page, submodule.dataset, newData);
				if (newData.$diagnoses) {
					syra_alert.show(newData.$diagnoses, submodule);
				}
				var child = submodule.addChild(record.dataset.items[record.dataset.items.length - 1], record);
				submodule.ensureNoChild(record);
				_page.scrollToItem(child.slot, _col.scrollview, true);
				child.activate(true);
			}
		}
	});
}

function _delete() {
	var btn = this;
	var record = btn.parent;
	var submodule = record.submodule;
	var navParent = record.navParent;
	syra_alert.ask({
		$title: btn.text,
		$message: syra_expression.parse(record, syra_local["nav_edit_confirm_delete_" + btn.variant]),
		yes: function() {
			navParent.dataset.items.splice(navParent.dataset.items.indexOf(record.dataset), 1);
			syra_ajax.put({
				lock: true,
				page: _page,
				url: syra_expression.parse(submodule, submodule.dataset.$url || submodule.$prototype.$url),
				data: {
					$uuid: submodule.dataset.$uuid,
					$etag: 1,
					items: submodule.dataset.items
				},
				success: function(newData, response, requestUrl) {
					if (!_page.disposed) {
						syra_dataset.applyDelta(_page, submodule.dataset, newData);
						if (newData.$diagnoses) {
							syra_alert.show(newData.$diagnoses, submodule);
						}
						if (submodule.lastSelected == record) {
							record.activate(false);
						}
						var index = navParent.children.indexOf(record);
						syra_dom.remove(record.slot);
						navParent.children.splice(navParent.children.indexOf(record), 1);
						_page.disposeChild(record);
						if (navParent.children.length) {
							if (submodule.lastSelected == record) {
								delete submodule.lastSelected;
								record = navParent.children[Math.min(index, navParent.children.length - 1)];
								_page.scrollToItem(record.slot, _col.scrollview, true);
								record.activate && record.activate(true);
							}
						} else {
							submodule.ensureNoChild();
							submodule.activate(true);
						}
					}
				}
			});
		}
	});
}

function _addDelete(item, variant) {
	syra_button.add({
		parent: item,
		slot: syra_dom.div("s-nav-edit-item-actions", item.slot),
		text: syra_local.flDelete,
		css: "s-nav-record-btn",
		iconOnly: true,
		variant: variant,
		fontIcon: "delete",
		click: _delete
	});
}

function _select(btn) {
	var btn = this;
	var submodule = _getSelectedSubModule();
	var record = btn.record || submodule;
	syra_over.openModal(_page, {
		article: _page,
		$url: syra_expression.parse(submodule, btn.$select.$url, record.dataset),
		onValidate: function() {
			var selected = this.selected;
			if (selected && selected.length) {
				var delta = syra_dataset.delta.array.add(record.dataset.items, selected);
				if (delta.length > 0) {
					var sending = {
						$uuid: submodule.dataset.$uuid,
						$etag: 1
					};
					if (record == submodule) {
						sending.items = delta;
					} else {
						//send all the article dataset. use for level == "items" for menublock(record) and submodule(article)
						record.dataset.items = delta;
						sending.items = submodule.dataset.items;
					}
					syra_ajax.put({
						lock: true,
						page: _page,
						url: syra_expression.parse(submodule, submodule.dataset.$url || submodule.$prototype.$url),
						data: sending,
						success: function(newData, response, requestUrl) {
							if (!_page.disposed) {
								syra_dataset.applyDelta(_page, submodule.dataset, newData);
								if (newData.$diagnoses) {
									syra_alert.show(newData.$diagnoses, submodule);
								}
								var children = record.dataset.items;
								if (children) {
									var child;
									for (var ii = 0, jj = selected.length; ii < jj; ii++) {
										child = syra_dataset.array.find(children, selected[ii].menuItem.$uuid, "menuItem");
										if (child) {
											child = submodule.addChild(child, record);
											submodule.ensureNoChild(record);
										}
									}
									if (child) {
										_page.scrollToItem(child.slot, btn.parent.scrollview, true);
										child.activate && child.activate(true);
									}
								}
							}
						}
					});
				}
			}
		},
		onSelectRecord: function(selected) {
			this.selected = [];
			var $uuids = Object.keys(selected);
			for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
				this.selected.push({
					menuItem: selected[$uuids[ii]].dataset
				});
			}
			return false;
		}
	});
}


function _expand(block) {
	if (block.dataset.isExpanded) {
		syra_dom.hide(block.body, false);
		syra_button.setText(block.titleBtn, undefined, "node_expanded");
		block.titleBtn.link.syraTipTitle = syra_local.nvpCollapseSubModule;

	} else {
		syra_dom.hide(block.body, true);
		syra_button.setText(block.titleBtn, undefined, "node_collapsed");
		block.titleBtn.link.syraTipTitle = syra_local.nvpExpandSubModule;

	}
}

function _clickExpand(event) {
	var block = this.parent;
	block.dataset.isExpanded = !(block.dataset.isExpanded !== false);
	if (event.shiftKey) {
		var children = block.navParent.children;
		for (var ii = 0, jj = children.length; ii < jj; ii++) {
			var child = children[ii];
			if (!child.isMenuItem) {
				child.dataset.isExpanded = block.dataset.isExpanded;
				_expand(child);
			}
		}
	} else {
		_expand(block);
	}
	_col.resize();
}

function _saveTitle(block) {
	var subModule = block.submodule;
	block.dataset.title = block.titleField.textContent;
	syra_ajax.put({
		lock: true,
		page: _page,
		url: syra_expression.parse(subModule, subModule.dataset.$url || subModule.$prototype.$url),
		data: {
			$uuid: subModule.dataset.$uuid,
			$etag: 1,
			items: subModule.dataset.items
		},
		success: function(newData, response, requestUrl) {
			if (!_page.disposed) {
				syra_dataset.applyDelta(_page, subModule.dataset, newData);
				if (newData.$diagnoses) {
					syra_alert.show(newData.$diagnoses, subModule);
				}
				block.titleField.textContent = block.dataset.title;
				_editTitle(false, block);
				_page.scrollToItem(block.slot, _col.scrollview, true);
				block.activate(true);
			}
		}
	});
}

function _editTitle(edit, item) {
	if (edit) {
		if (!item.editable) {
			item.titleField.setAttribute("contenteditable", "true");
			item.titleField.className = "s-nav-edit-block-title  s-contenteditable";

			item.onFieldInputEvent = function(event) {
				switch (event.type) {
					case "focusin":
					case "focusout":
						var focusin = event.type == "focusin";
						if (!focusin) {
							if (this.titleField.textContent != this.dataset.title) {
								item.applyShortCut({
									enter: true
								});
							}
						}
						syra_dom.toggleClass(this.titleField, "s-focus", focusin);
						if (!focusin) {
							this.titleField.removeAttribute("contenteditable");
							this.titleField.className = "s-nav-edit-block-title";
						}
						break;
				}
			};
			item.applyEscape = function() {
				item.titleField.textContent = item.dataset.title;
				_editTitle(false, this);
			};
			item.isField = true; // for findField
			item.$item = item.$item || {}; // field have always $item
			item.editable = true;
			item.applyShortCut = function(shortcuts) {
				if (shortcuts.enter) {
					if (this.titleField.textContent) {
						_saveTitle(this);
					} else {
						this.titleField.textContent = syra_local.nav_edit_edit_block;
					}
					return true;
				}
			};
			item.titleField.focus();
		}
	} else {
		delete item.editable;
		item.titleField.removeAttribute("contenteditable");
		item.titleField.className = "s-nav-edit-block-title";
		item.onFieldInputEvent = item.applyEscape = null;
	}
}

function _localizeTitle() {
	var btn = this;
	var block = this.parent;
	syra_localizer.onMenuClick({
		scope: {
			page: block.page,
			articleParent: block,
			getValue: function() {
				return block.titleField.textContent;
			},
			onLocalizeField: function(newData, response, $url) {
				syra_dataset.applyDelta(_page, block.submodule.dataset, newData);
				if (newData.$diagnoses) {
					syra_alert.show(newData.$diagnoses, block.submodule);
				}
				block.titleField.textContent = block.dataset.title;
			}
		},
		menu: this.$localize
	});
}

exports.menuBlock = {
	create: function(item) {
		item.articleParent = item.navParent;
		item.domItem = item.slot = syra_dom.li(item.$skin);
		item.slot.syraItem = item.id;
		syra_dom.div("s-nav-record-reorder", item.slot).syraSortableHandle = "items";
		item.titleBtn = syra_button.add({
			parent: item,
			slot: item.slot,
			text: syra_local.nvpCollapseSubModule,
			css: "s-nav-edit-block-title-btn",
			fontIcon: "node_expanded",
			iconOnly: true,
			click: _clickExpand
		});
		item.titleField = syra_dom.text("s-nav-edit-block-title", item.dataset.title, item.slot);
		item.titleField.syraOnClick = "onClick";
		item.titleField.syraItem = item.id;
		item.onClick = function(event) {
			_editTitle(true, this);
		};
		var actions = syra_dom.div("s-nav-edit-item-actions", item.slot);
		var $actions = _col.$recordActions.menuBlock;
		if ($actions.$create) {
			syra_button.add({
				parent: item,
				slot: actions,
				css: "s-nav-record-btn",
				$create: $actions.$create,
				text: syra_local.nav_edit_new_block,
				iconOnly: true,
				record: item,
				fontIcon: "create",
				click: _createBlock
			});
		}
		if ($actions.$select) {
			syra_button.add({
				parent: item,
				slot: actions,
				css: "s-nav-record-btn",
				$select: $actions.$select,
				iconOnly: true,
				record: item,
				text: $actions.$select.$title,
				fontIcon: "select",
				click: _select
			});
		}
		syra_button.add({
			parent: item,
			slot: actions,
			$localize: $actions.$localize,
			text: $actions.$localize.$title,
			css: "s-nav-record-btn",
			fontIcon: "localize",
			iconOnly: true,
			record: item,
			click: _localizeTitle
		});
		$actions.$delete && _addDelete(item, "menuBlock");

		item.body = syra_dom.ul(item.$skin + "-body", item.slot);
	}
};


exports.menuItem = {
	create: function(item) {
		syra_dom.div("s-nav-record-reorder", item.slot).syraSortableHandle = "items";
		_col.$recordActions.menuItem.$delete && _addDelete(item, "menuItem");
	}
};


exports.setColumn = function(page, col, $items) {
	_page = page;
	_col = col;
	var $links = $items.$links;
	var menuBlock = $items.$item.$variants.menuBlock;
	if (menuBlock.$capabilities && menuBlock.$capabilities.indexOf("append") >= 0) {
		syra_button.add({
			parent: col,
			slot: col.actions,
			css: "s-nav-list-btn",
			$create: $links.$creat,
			text: syra_local.nav_edit_new_block,
			fontIcon: "create",
			click: _createBlock
		});
	}
	var $select = $links.$select && $links.$select.$variants && $links.$select.$variants.menuItem;
	$select &&
		syra_button.add({
			parent: col,
			slot: col.actions,
			css: "s-nav-list-btn",
			$select: $select,
			text: $select.$title,
			fontIcon: "select",
			click: _select
		});

	var menuItem = $items.$item.$variants.menuItem;
	col.$recordActions = {
		menuBlock: {
			$create: menuBlock.$capabilities && menuBlock.$capabilities.indexOf("append") >= 0,
			$select: $select,
			$delete: menuBlock.$capabilities && menuBlock.$capabilities.indexOf("delete") >= 0,
			$localize: menuBlock.$item.$properties.title.$links.$localize
		},
		menuItem: {
			$delete: menuItem.$capabilities && menuItem.$capabilities.indexOf("delete") >= 0
		}
	};
};


exports.dispose = function() {
	_col = _page = null;
};