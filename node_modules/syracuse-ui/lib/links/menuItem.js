"use strict";

function _setVariants(menu, $variants) {
	if (!menu.childVariants) {
		menu.childVariants = {};
	}
	if (menu.layoutSlot) {
		var $keys = Object.keys($variants);
		for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
			if (!menu.childVariants[$keys[ii]]) {
				var $newItem = syra_site.clone(menu.$item);
				$newItem.$variantItemKey = $keys[ii];
				var $variant = $variants[$keys[ii]];
				$newItem.$title = menu.$title;
				if (!$variant.$title) {
					$variant.$title = menu.$title;
					if (menu.articleParent.$field) {
						if (menu.articleParent.$field.$item && menu.articleParent.$field.$item.$variants) {
							var $field = menu.articleParent.$field.$item.$variants[$newItem.$variantItemKey];
							if ($field && $field.$title) {
								$variant.$title += " " + $field.$title;
							}
						}
					}
				}
				menu.childVariants[$keys[ii]] = menu.page.addItem(menu.layoutSlot, $newItem, menu.articleParent);
			}
		}
	}
	menu.showMenuItem(false);
}

function _ensureCss(menu, $style, $value) {
	if (menu._isLoaded) {
		if ($style !== undefined) {
			menu.cssStyle = (menu.$style = $style) ? (" s-cst-sty-" + $style) : null;
			menu.cssUpdated = true;
		}
		if (menu.cssUpdated) {
			var css = menu.$skin;
			if (menu.cssStyle) {
				css += menu.cssStyle;
			}
			if (menu.domItem.syraIsDisabled) {
				css += " s-disabled";
			}
			if (menu.$item.$css) {
				css += " " + menu.$item.$css;
			}
			if (menu.cssTitle) {
				css += menu.cssTitle;
			}
			menu.domItem.className = css;
			menu.cssUpdated = false;
		}
	}
}


function _isHrefEnabled(menuItem) {
	return !menuItem.$isAction && !(menuItem.$parameters && (menuItem.$parameters.$actions || menuItem.$parameters.$properties)) && !(menuItem.$method && menuItem.$method != "GET");
}

function _onMenuDataFilled(page, menuItem) {
	if (page.isAlertModal) {
		if (menuItem && (menuItem.$item.$bind == page.focusBtnId)) {
			setTimeout(function() {
				menuItem.domItem && menuItem.domItem.focus();
			}, 100);
		}
		return;
	}
	if (page.isDesktopPage) {
		if (menuItem && menuItem.$item && menuItem.$item.$bind) {
			var icon = menuItem.$item.$bind;
			icon = (icon[0] == "$") ? icon.substr(1) : icon;
			if (syra_icon.font[icon]) {
				(menuItem.$item.$icon = menuItem.$item.$icon || {}).$value = icon;
			}
		}
	}
}



function _initMenu(menu, $menu) {
	menu.isInvisible = false; //important
	_onMenuDataFilled(menu.articleParent, menu);
	menu.$isHidden = $menu.$isHidden;
	if (menu.$isHidden == undefined) {
		menu.$isHidden = menu.$item.$isHidden;
	}
	if (menu.$isHidden) {
		menu.isInvisible = true;
		syra_dom.hide(menu.domItem, true);
	} else {
		if (menu.$item.$showIfSet) { //used by job
			menu.isInvisible = false;
			syra_dom.hide(menu.domItem, false);
		}
	}
	menu.layoutParent && menu.layoutParent.ensureItemVisibility(menu, menu.$isHidden);
	if (!$menu.$title && menu.$item.$title) {
		$menu.$title = menu.$item.$title; //use for pager (next prev) currently
	}
	if (menu.$item.$value) {
		menu.value = menu.$item.$value;
	}
	menu._isInit = true;
}

function _setTitle(menu, $title, $iconValue) {
	menu.$title = ($title || "") + ""; //ensure title is string
	delete menu.domItem.syraTitle;
	var title = menu.getTitle();
	menu.domItem.title = menu.$description || title;

	if (!menu.$item.$noText && !(menu.$item.$icon && menu.$item.$icon.$mode == "icon")) {
		if (title.indexOf("<em") >= 0) {
			menu.domItem.innerHTML = title.replace(/<em>/g, "<em class='" + menu.$skin + "-em'>");
		} else {
			menu.domItem.textContent = title;
		}
	}
	if (menu.$item.$icon) {

		if ($iconValue != undefined) {
			menu.$iconValue = $iconValue;
		}
		var name = menu.$iconValue || menu.value || menu.$item.$icon.$value;
		if (!name) {
			name = menu.$sourceBind || menu.$item.$bind;
		}
		name = (name[0] == "$") ? name.substr(1) : name;
		var fontIcon = syra_icon.font[name];

		if (menu.$item.$icon && !menu.iconValue) {
			menu.cssTitle = null;
			var cssBtn = syra_button.cssFontIcon + "s-btn-" + name;
			if (menu.$item.$icon.$mode == "icon") {
				menu.$item.$noText = true;
				menu.iconValue = menu.domItem;
				menu.cssTitle = fontIcon ? cssBtn : " s-mn-icon";
			} else {
				var iconCss = menu.$skin + "-icon s-mn-icontext" + (fontIcon ? cssBtn : " s-mn-icon");
				if (menu.$item.$css) {
					iconCss += " " + menu.$item.$css;
				}
				menu.iconValue = syra_dom.div(iconCss);
				menu.cssTitle = " s-with-icon";
			}
			menu.cssUpdated = true;
		}
		if (fontIcon) {
			menu.iconValue.innerHTML = fontIcon;
		} else {
			var $path = syra_config.$iconPath + (menu.$item.$icon.$path || "");
			menu.iconValue.style.backgroundImage = "url('" + $path + name + ".png')";
		}
		if (menu.iconValue != menu.domItem) {
			menu.domItem.insertBefore(menu.iconValue, menu.domItem.firstChild);
		}
	}

	if (menu.$description && menu.$item.$isDescriptionVisible) {
		if (!menu.descriptionItem) {
			menu.descriptionItem = syra_dom.div(menu.$item.$skinDescription || (menu.$skin + "-desc"));
		}
		menu.descriptionItem.textContent = menu.$description;
		menu.domItem.appendChild(menu.descriptionItem);
	}
	if (!menu.isExternalHidden && menu.$target == "blank") {
		if (!menu.external) {
			menu.external = document.createElement("div");
			syra_button.setFontIcon(menu.external, "external");
		}
		menu.domItem.appendChild(menu.external);
	}
}



function _setMenu(menu, $menu, record, outOfDate) {
	if ($menu) {
		if ($menu.$type) {
			menu.$sourceType = $menu.$type;
			menu.isRepresentationUrl = !(menu.$sourceType && (menu.$sourceType.indexOf('json') == -1));
		}

		if (!menu._isInit) {
			_initMenu(menu, $menu);
		}

		var props = Object.keys($menu);
		for (var ii = 0, jj = props.length; ii < jj; ii++) {
			var prop = props[ii];
			menu[prop] = $menu[prop];
		}
		var $iconValue = $menu.$iconValue;
		if ($iconValue === undefined) {
			$iconValue = $menu.$icon && $menu.$icon.$value;
		}
		if ($menu.$title !== undefined || $iconValue !== undefined) {
			_setTitle(menu, $menu.$title, $iconValue);
		}

		menu.setState($menu);
		if ($menu.$isDisabled !== undefined) {
			menu.disable($menu.$isDisabled);
		}

		if ((menu.$sourceBind || menu.$item.$bind) == "$lazyload") {
			if (menu.domItem.parentNode) {
				menu.domItem.parentNode.removeChild(menu.domItem);
			}
		}
		if ($menu.$isRequested === false) {
			if (!syra_form.onActionExecuted(menu, $menu)) {
				return;
			}
		}
		if ($menu.$variants) {
			if (menu.$item.$variantItemKey) {
				_setMenu(menu, $menu.$variants[menu.$item.$variantItemKey], record);

			} else {
				_setVariants(menu, $menu.$variants);
			}
		}

	}
	if (!menu.$sourceUrl || ($menu && $menu.$url)) {
		menu.$sourceUrl = menu.$url;
		if (menu.$type && (menu.$type.indexOf('json') == -1) && (menu.$type != "html")) {
			if (menu.$sourceUrl && (menu.$sourceUrl.indexOf("format=") < 0)) { // TODO: improve menu hack
				menu.$sourceUrl += (menu.$sourceUrl.indexOf("?") >= 0 ? "&" : "?") + "format=" +
					syra_url.formatMenuUrl(menu.articleParent, {
						$url: menu.$type,
						$parameters: menu.$parameters
					}, record);
			}
		}
	}
	menu.$url = menu.$sourceUrl;
	if ($menu || outOfDate) {
		$menu = $menu || menu; //id outOfDate, $menu can be empty
		if (!menu.isRepresentationUrl && ($menu.$type || $menu.$title) && (menu.$sourceType.indexOf("html") < 0)) {
			if ($menu.$url && _isHrefEnabled(menu)) {
				syra_url.history.setHref(menu, record, true);
			} else {
				menu.domItem.setAttribute("href", "#");
			}
			menu.value = syra_icon.getDocument(menu.$sourceType); //  menu.$sourceType.replace("application/", "").replace("/", "-");
			if (!menu.$item.$icon) {
				menu.$item.$icon = {
					$path: "file/s-link-"
				};
			}
			if (menu.$title !== undefined) {
				_setTitle(menu, menu.$title);
			}
		} else {
			if (menu.domItem) {
				if ($menu.customHref) {
					menu.domItem.setAttribute("href", $menu.customHref);
					menu.domItem.syraIsDefaultLink = true;
				} else if ($menu.$url && _isHrefEnabled(menu)) {
					syra_url.history.setHref(menu, record);
				} else {
					menu.domItem.setAttribute("href", "#");
				}
			}
		}
		_ensureCss(menu, $menu.$kind, $menu.$value);
		_ensureCss(menu, $menu.$style, $menu.$value);
	}
	if (menu.isHiddenOnPreload) {
		syra_dom.hide(menu.domItem, false);
		menu.isHiddenOnPreload = false;
	}
}

function _load(menu, record) {
	menu.isRepresentationUrl = true;
	menu.$designLevel = "field";
	menu.isMenuItem = true;
	menu.domItem = document.createElement("a");
	if (menu.$item.$shortCutTip) {
		menu.domItem.syraShortCutTip = menu.$item.$shortCutTip;
		if (menu.$item.$shortCut) {
			syra_shortCuts.register(menu, menu.$item.$shortCut, menu.$item.$shortCutTip, _processShortCut, null, menu);
		}
	}
	menu.domItem.syraOnClick = "click";
	menu.domItem.syraItem = menu.domItem.syrainout = menu.domItem.syrafocusinout = menu.id;
	syra_item.register(menu);

	menu.$skin = menu.$item.$skin;

	if (!menu.$skin) {
		menu.$skin = "s-mn-extra-link";
	}
	var $menu = menu.$item.$menu;
	if (!($menu && !$menu.$isHidden)) {
		if (menu.$item.$showIfSet) {
			//used by job
			menu.isInvisible = true;
			syra_dom.hide(menu.domItem, true);
		} else {
			menu.showMenuItem(false);
		}
	} else {
		menu.isInvisible = false;
		menu.layoutParent && menu.layoutParent.ensureItemVisibility(menu, menu.isInvisible);
	}
	if (!(menu.$subRecordKey = menu.$item.$subRecordKey)) {
		if (menu.boxParent && menu.boxParent.contextField) {
			menu.contextField = menu.boxParent.contextField;
			if (menu.contextField.$item) {
				menu.$subRecordKey = menu.contextField.$item.$bind;
			}
		}
	}
	var $menu;
	if (menu.$item.$bind) {
		var bounds = menu.articleParent.menuItems[menu.$item.$bind];
		if (!bounds) {
			bounds = menu.articleParent.menuItems[menu.$item.$bind] = [];
		}
		bounds.push(menu);
		$menu = menu.articleParent.$menus[menu.$item.$bind];
	} else {
		$menu = menu.$item.$link;
	}
	menu._isLoaded = menu.cssUpdated = true;
	_ensureCss(menu, menu.$item.$style);
	if ($menu) {
		_setMenu(menu, $menu, record);
	} else {
		if (menu.$item.$isPreloaded) {
			menu.isHiddenOnPreload = true;
			syra_dom.hide(menu.domItem, true);
		}
	}
	menu.layoutSlot && menu.layoutSlot.appendChild(menu.domItem);
	syra_fields.ensureLayoutMode(menu);
};

function _processShortCut(event, menu) {
	return syra_menus.click.fire({
		menu: menu,
		event: event
	});
}

function _checkVisibilityForTablet(menu) {
	//indexOf important as for convergence, $bind can be an integer
	if (menu.$item.$bind && menu.$item.$bind.indexOf &&
		(menu.$item.$bind.indexOf("$word") === 0 ||
			menu.$item.$bind.indexOf("$excel") === 0 ||
			menu.$item.$bind.indexOf("$pptslide") === 0 ||
			menu.$item.$bind.indexOf("cvgOffice") === 0)) {
		menu.isInvisible = true;
	} else
	if (menu.$type &&
		(menu.$type.indexOf("application/syracuse-excel") >= 0 ||
			menu.$type.indexOf("application/syracuse-word") >= 0 ||
			menu.$type.indexOf("application/syracuse-ppt") >= 0)) {
		menu.isInvisible = true;
	}
}

function MenuItem() {

};

MenuItem.prototype.load = function(record) {
	this.$isAuthoringEnabled = false;
	syra_site.isTabletDevice && _checkVisibilityForTablet(this);
	_load(this, record);
};

MenuItem.prototype.onItemInOut = function(onEnter, event) {
	if (onEnter) {
		if (this.outOfDate) {
			this.setMenu(null, this.articleParent.dataset, this.outOfDate);
			this.outOfDate = false;
		}
		var showAlways;
		if (this.domItem) {
			showAlways = this.domItem.syraTitle && ((this.domItem.title && this.domItem.title != this.domItem.syraTitle) || this.$item.$noText);
			syra_tip.titleTip.show(this.domItem.title, this.domItem, !showAlways); // if no show always => check tip visibility
		}
	}
};
MenuItem.prototype.getTitle = function() {
	if (this.domItem.syraTitle == null && this.$title) {
		if (this.$title && this.$title.length > 0 && this.$title[1] == "@") {
			this.domItem.syraTitle = syra_expression.render(this.boxParent, this.$title) + "";
		} else {
			this.domItem.syraTitle = this.$title;
		}
	}
	return this.domItem.syraTitle || "";
};
MenuItem.prototype.click = function(event) {
	syra_menus.click.fire({
		menu: this,
		event: event
	});
};
MenuItem.prototype.showMenuItem = function(show) {
	if (this.isInvisible == show) {
		syra_dom.hide(this.domItem, !show);
		this.isInvisible = !show;
		this.layoutParent && this.layoutParent.ensureItemVisibility(this, !show);
	}
};
MenuItem.prototype.setState = function(state) {
	if (state.$isHidden !== undefined) {
		this.showMenuItem(!(this.$isHidden = state.$isHidden));
	}
};
MenuItem.prototype.disable = function($value) {
	syra_dom.disable(this.domItem, this.$isDisabled = $value || false);
	if (this.$isDisabled) {
		if (this.domItem.syraOnClick) {
			this.syraOnClick_disabling = this.domItem.syraOnClick;
			delete this.domItem.syraOnClick;
		}
	} else {
		if (this.syraOnClick_disabling) {
			this.domItem.syraOnClick = this.syraOnClick_disabling;
		}
	}
};
MenuItem.prototype.setMenu = function($menu, record, outOfDate) {
	_setMenu(this, $menu, record, outOfDate);
};
MenuItem.prototype.dispose = function() {
	this.onItemInOut();
	if (this.$item && this.$item.$shortCut) {
		syra_shortCuts.unregister(this.$item.$shortCut.item, this.$item.$shortCutTip);
	}
	syra_site.disposeObject(this);
};


exports.create = function() {
	return new MenuItem();
};