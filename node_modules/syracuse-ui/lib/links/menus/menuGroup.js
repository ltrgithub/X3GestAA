"use strict";
var helpers = require('syracuse-core').helpers;
var Section = require('syracuse-ui/lib/item/section').Section;


function _loadMenuItem(group, $menuItem, slot) {
	$menuItem.$category = "link";
	switch ($menuItem.$skin) {
		case "s-page-menus-link":
			$menuItem.$skin = "s-mn-main-link";
			break;
	}

	if (!$menuItem.$ownerId && group.$item.$ownerId) {
		$menuItem.$ownerId = group.$item.$ownerId;
	}
	if (!$menuItem.$skin) {
		if (group.$item.$isPopupContent) {
			$menuItem.$skin = "s-list-default-btn-default";
		} else {
			$menuItem.$skin = group.$item.$itemSkin || (group.$skin + "-link");
		}
	}
	if (group.$item.$itemIcon) {
		if ($menuItem.$icon === undefined) {
			$menuItem.$icon = {};
		}
		if (!$menuItem.$icon.$mode) {
			$menuItem.$icon.$mode = group.$item.$itemIcon.$mode;
		}
		if (!$menuItem.$icon.$path) {
			$menuItem.$icon.$path = group.$item.$itemIcon.$path;
		}
	}
	return group.page.addItem(slot, $menuItem, group);
}

function MenuGroup() {}

exports.MenuGroup = helpers.defineClass(MenuGroup, Section, {
	load: function() {
		if (this.boxParent && this.boxParent.boxChildItems) {
			this.boxParent.boxChildItems.push(this);
		}
		switch (this.$item.$skin) {
			case "s-page-menus":
				this.$item.$skin = "s-mn-main";
				break;
			case "s-mn-h2":
				delete this.$item.$skin;
				break;
		}
		this.$isAuthoringEnabled = false;
		if (this.isMenuGroupRoot = (!this.boxParent.isMenuGroup)) {
			this.menuGroupRoot = this;
		} else {
			var parent = this.boxParent;
			while (parent) {
				if (parent.menuGroupRoot) {
					this.menuGroupRoot = parent.menuGroupRoot;
					break;
				}
			}
		}
		this.isMenuGroup = true;
		this.$childMenus = {};
		if (this.$item.$isPopupContent) {
			this.$item.$opened = false;
		}
		Section.prototype.load.call(this);

		if (!this.$item.$isPopupContent) {
			var pref = syra_preference.page.get(this.page, "$menuBarGroup");
			if (pref) {
				var $opened = pref[this.id];
				if ($opened != undefined && this.$opened != $opened) {
					this.openBox(this.$opened = $opened);
					this._setExpandIcon();
				}
			}
		}

		if (this.$item.$isMenusBag) {
			this.articleParent.menusBag = this;
		}
		if (this.isMenuGroupRoot || this.boxParent.$item.$isPopupContent) {
			syra_dom.toggleClass(this.body, "s-menu-group-root", true);
		}
	},
	addMenuItem: function($menu) {
		var $item = this.$childMenus[$menu.$bind];
		if (!$item) {
			this.$childMenus[$menu.$bind] = $item = {
				$bind: $menu.$bind,
				$isAction: $menu.$isAction,
				$icon: $menu.$icon
			};
		}
		return _loadMenuItem(this, $item, this.body);
	},
	renderLayoutContent: function($layout, slot) {
		if (!$layout) {
			//init
			this.childItems = [];
			$layout = this.$item.$layout;
			slot = this.body;
		}
		var cssRow, width;
		var newItem;
		for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
			var $child = $layout.$items[ii];
			newItem = null;
			if ($child.$bind) {
				if (!$child.$category || $child.$category == "link") {
					this.childItems.push(newItem = _loadMenuItem(this, $child, slot));
				}
			} else {
				if ($child.$layout || $child.$category == "menus") {
					$child.$category = "menus";
					if ($child.$skin === undefined) {
						$child.$skin = this.$skin;
					}
					if (this.$item.$itemSkin && $child.$itemSkin === undefined) {
						$child.$itemSkin = this.$item.$itemSkin;
					}
					if (this.$item.$isBoxCollapsable && $child.$isBoxCollapsable === undefined) {
						$child.$isBoxCollapsable = this.$item.$isBoxCollapsable;
					}
					this.childItems.push(newItem = this.page.addItem(slot, $child, this));
				} else
				if ($child.$layoutType) {
					newItem = document.createElement("div");
					this.renderLayoutContent($child, newItem);
					slot.appendChild(newItem);
				}
			}
			if (cssRow && newItem) {
				newItem = newItem.domItem || newItem;
				syra_dom.toggleClass(newItem, cssRow, true);
				if (width) {
					newItem.style.width = width;
				}
			}
		}
	},
	applyEscape: function(shortcuts, event) {
		if (this.contextField && this.contextField.menusPopup) {
			this.contextField.menusPopup.close();
			return true;
		}
		return false;
	},
	getMenuItems: function() {
		var items = [];
		for (var ii = 0; ii < this.boxChildItems.length; ii++) {
			if (this.boxChildItems[ii].$sourceBind != "$lazyload") { //(???)
				items.push(this.boxChildItems[ii]);
			}
		}
		return items;
	},
	onBoxToggle: function() {
		var self = this;
		if (self.$item) {
			var page = self.page;
			if (page.menuBar && !page.isVignettePage) {
				if (page.isInMenuBar(self) && !self.$item.$isPopupContent) {
					var pref = syra_preference.page.get(page, "$menuBarGroup") || {};
					pref[self.id] = self.$opened;
					syra_preference.page.save(page, "$menuBarGroup", pref);
				}
			}
			self.openBox(self.$opened);
			if (self.$item.$isPopupContent) {
				if (!self.menusPopup) {
					self.menusPopup = syra_over.openPopup(self, {
						content: self,
						slot: self.body,
						position: {
							my: "right top",
							at: "right bottom",
							of: self.domTitle
						},
						close: function() {
							self.domTitle && syra_dom.toggleClass(self.domTitle, "s-close", true);
							self.$opened = false;
							self.menusPopup = null;
						}
					});
				} else {
					self.menusPopup.close();
				}
			}
		}
	},
	applyShortCut: function(shortcuts, event) {
		var current, items;
		if (shortcuts.enter && this._$selectedListIndex != undefined) {
			var menuItem = this.getMenuItems()[this._$selectedListIndex];
			if (menuItem) {
				menuItem.domItem.click();
				return true;
			}
		}
		if (shortcuts.up || shortcuts.down) {
			current = (this._$selectedListIndex != undefined) ? this._$selectedListIndex : -1;
			items = this.getMenuItems();
			if (shortcuts.down) {
				current++;
				if (current >= items.length) {
					current = 0;
				}
			} else {
				current--;
				if (current < 0) {
					current = items.length - 1;
				}
			}
			this._$selectedListIndex = Math.max(current, 0);
			for (var ii = 0, jj = items.length; ii < jj; ii++) {
				var menuItem = items[ii];
				if (menuItem.domItem) {
					syra_dom.toggleClass(menuItem.domItem, "s-selected", ii == this._$selectedListIndex);
				}
			}
			event.preventDefault();
			event.stopPropagation();
			return true;
		}
		return false;
	},
	dispose: function() {
		delete this.onMenuClick;
		Section.prototype.dispose.call(this);
	}
});