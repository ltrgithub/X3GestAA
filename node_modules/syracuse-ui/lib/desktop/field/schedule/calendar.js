"use strict";

// TODO: manage color ID
/// !doc
/// 
/// # Calendar Field
/// 
/// Calendar field is based on Google Calendar Model. see <https://developers.google.com/google-apps/calendar/>
/// The widget currently used is fullcalendar. see <http://arshaw.com/fullcalendar/docs/usage/>
/// 
var helpers = require('syracuse-core/lib/helpers');
var datetime = require('syracuse-core/lib/types/datetime');
var date = require('syracuse-core/lib/types/date');
var Field = require('syracuse-ui/lib/common/field/field').Field;
//var Article = require("syracuse-ui/lib/common/article/article").Article;
require('syracuse-ui/deps/fullcalendar/fullcalendar');
//require('syracuse-ui/deps/fullcalendar/fullcalendar.min');
var forEachKey = helpers.object.forEachKey;
var objectCopy = helpers.object.copy;
var objectClone = helpers.object.clone;

var _localize = {
    today: "aujourd'hui",
    month: "mois",
    week: "semaine",
    day: "jour",
    untitledEvent: "untitled event"
};

var _days = [0, 1, 2, 3, 4, 5, 6];
var _months = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];

var _status = ["confirmed", "tentative", "cancelled"]; // see https://developers.google.com/google-apps/calendar/v3/reference/events
function Calendar(){
}

exports.Calendar = helpers.defineClass(Calendar, Field, {
    setDataValue: function(value){
        this.currentValue = value;
        if (value && value.$events) {
            this._events = this._getEvents(value.$events);
            var self = this;
            setTimeout(function(){
                self.calendar.fullCalendar('refetchEvents');
            }, 100);
        }
    },
    render: function(){
        var self = this;
        var id = "a" + document.controller.generateUUID();
        self.$$dataValue.attr("id", id);
        self._widget = $('<div />').attr('id', "cal_" + id)        //.attr('style', 'width: 900px; margin: 0 auto;')
        .appendTo(self.$$dataValue);
        
        var calendar = self._widget.fullCalendar({
            aspectRatio: 2.25,
            header: {
                left: 'prev,next today',
                center: 'title',
                right: 'month,agendaWeek,agendaDay'
            },
            // ============ locale ============
            buttonText: {
                // left triangle
                // prev: '&nbsp;&#9668;&nbsp;',
                // right triangle
                // next: '&nbsp;&#9658;&nbsp;',
                // <<
                // prevYear: '&nbsp;&lt;&lt;&nbsp;',
                // >>
                // nextYear: '&nbsp;&gt;&gt;&nbsp;',
                today: _localize.today,
                //today',
                month: _localize.month,
                //month',
                week: _localize.week,
                //week',
                day: _localize.day,
                //day'
            },
            monthNames: _months.map(function(i){
                return date.monthName(i);
            }),
            monthNamesShort: _months.map(function(i){
                return date.monthName(i, true);
            }),
            dayNames: _days.map(function(i){
                return date.dayName(i);
            }),
            dayNamesShort: _days.map(function(i){
                return date.dayName(i, true);
            }),
            firstDay: 1,
            //=================================
            selectable: true,
            selectHelper: true,
            select: function(start, end, allDay){
                var title = prompt('Event Title:');
                if (title) {
                    calendar.fullCalendar('renderEvent', {
                        title: title,
                        start: start,
                        end: end,
                        allDay: allDay
                    }, true // make the event "stick"
);
                }
                calendar.fullCalendar('unselect');
            },
            unselect: function(ev){
                console.log("calendar.unselect " + ev);
            },
            editable: true,
            events: function(start, end, callback){
                var events = self._events &&
                self._events.filter(function(event){
                    return event.end > start && event.start < end;
                });
                callback(events || []);
            },
            // ui events
            loading: function(inProgress){
                console.log("calendar.loading " + inProgress);
            },
            viewDisplay: function(){
                console.log("calendar.viewDisplay");
            },
            windowResize: function(){
                console.log("calendar.windowResize");
            },
            eventRender: function(event){
                console.log("calendar.eventRender " + event);
            },
            eventAfterRender: function(event){
                console.log("calendar.eventAfterRender " + event);
            },
            eventResizeStart: function(event){
                console.log("calendar.eventResizeStart " + event);
            },
            eventResizeStop: function(event){
                console.log("calendar.eventResizeStop " + event);
            },
            eventResize: function(event, dayDelta, minuteDelta){
                console.log("calendar.eventResize " + event);
            },
            dayClick: function(date, allDay){
                console.log("calendar.dayClick " + date);
            },
            eventClick: function(event){
                alert(event.title);
            },
            eventMouseover: function(event){
                console.log("calendar.eventMouseover " + event);
            },
            eventMouseout: function(event){
                console.log("calendar.eventMouseout " + event);
            },
            eventDragStart: function(event){
                console.log("calendar.eventDragStart " + event);
            },
            eventDragStop: function(event){
                console.log("calendar.eventDragStop " + event);
            },
            eventDrop: function(event, dayDelta, minuteDelta, allDay){
                console.log("calendar.eventDrop " + event);
            },
            drop: function(date, b){
                console.log("calendar.drop " + date);
            },
            allDaySlot: true
        });
        self.calendar = calendar;
    },
    _getEvents: function(events){
        var self = this;
        return events.map(function(event){
            return {
                id: event.id,
                title: event.summary || _localize.untitledEvent,
                start: event.start && datetime.parse(event.start.date || event.start.datetime).toJsDate(),
                // unused: event.start.timeZone
                end: event.end && datetime.parse(event.end.date || event.end.datetime).toJsDate(),
                // unused: event.end.timeZone
                allDay: !!event.start.date,
                color: self._getColor(event.colorId),
                // url : ???,
                data: event
            };
        });
    },
    _getColor: function(colorId){
        // TODO: manage color ID
        return "#69923A";
    }
});
