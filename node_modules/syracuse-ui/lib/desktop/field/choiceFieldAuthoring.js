"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;

var _localize = {
    itemsPerPage: "page size",
    cardListByRowCount: "Place",
    format: "Format",
    formatCardList: "Card list",
    formatHGrid: "Grid",
    formatVGrid: "Vertical Grid",
    isQuickFilter: "show filters",
    isRowIndexVisible: "show row index",
    graphIntegration: "Graph Integration",
    graphMode: "graph mode",
    graphModeList: "list only",
    graphModeGraphList: "graph and list",
    graphModeGraph: "graph only",
    graphPosition: "position",
    graphPositionTop: "top",
    graphPositionLeft: "left",
    graphPositionRight: "right",
    graphPositionBottom: "bottom",
    linkOk: "Ok",
    linkCancel: "Cancel",
    addSection: "add a section",
    addBlock: "add a block",
    isBoxCollapsable: "collapsible",
    isMaximizable: "maximizable",
    isTitleHidden: "hide panel title",
    widthSmall: "small",
    widthMedium: "medium",
    widthLarge: "large",
    widthMaximum: "maximum",
    isHidden: "hide me",
    isTopLabelAlignment: "top aligned",
    isLabelHidden: "hidden",
    isRightTextLabelAlignment: "text",
    textLabelLeftAligned: "left aligned",
    textLabelRightAligned: "right aligned"
};

function DesktopChoiceFieldAuthoring(){

}

exports.DesktopChoiceFieldAuthoring = helpers.defineClass(DesktopChoiceFieldAuthoring, Article, {
    onNotifyRecordChange: function(value, binding){
        var metaData = {};
        metaData[binding] = value;
        if (binding == "$format") {
            this.applyChange(metaData);
        }
        this.designedField.applyDesignMetaData(metaData, true);
        return null; //cancel notify
    },
    applyChange: function(newData){
        if (newData) {
            if (newData.$format) {
                var delta = newData.$ = newData.$ || {};
                (delta.$radiosLayout = delta.$radiosLayout || {}).$isHidden = newData.$format != "$radios";
            }
        }
        Article.prototype.applyChange.call(this, newData);
        
    },
    loadBox: function(initData){
        this.$prototype = {
            "$": {
                $format: {
                    $type: "application/x-choice",
                    $title: "Format",
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "$combo",
                                $title: "Drop down list"
                            }, {
                                $value: "$radios",
                                $title: "Radio buttons"
                            }]
                        }
                    }
                },
                $radiosLayout: {
                    $type: "application/x-choice",
                    $title: "Show on",
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "row",
                                $title: "1 row"
                            }, {
                                $value: "1",
                                $title: "1 column"
                            }, {
                                $value: "2",
                                $title: "2 columns"
                            }, {
                                $value: "3",
                                $title: "3 columns"
                            }, {
                                $value: "4",
                                $title: "4 columns"
                            }]
                        }
                    }
                }
            }
        };
        this.$item = {
            $category: "section",
            $title: "Choice Type",
            $layout: {
                $items: [{
                    $bind: "$format",
                    $isEditMode: true,
                    $labelWidth: "auto",
                    $skin: "s-author-field"
                }, {
                    $bind: "$radiosLayout",
                    $format: "$combo",
                    $isEditMode: true,
                    $labelWidth: "auto",
                    $skin: "s-author-field"
                }]
            }
        };
        Article.prototype.loadBox.call(this, initData);
    },
    dispose: function(){
        Article.prototype.dispose.call(this);
    }
});
