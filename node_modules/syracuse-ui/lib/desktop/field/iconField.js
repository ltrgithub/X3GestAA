"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('./field').Field;

function IconField(){
}

exports.IconField = helpers.defineClass(IconField, Field, {
    setDataValue: function(value){
        this.currentValue = value;
        if (value != null) {
            var $path = document.site.$item.$iconPath + (this.$icon.$path || "x3icons/");
            this.icon.style.backgroundImage = "url('" + $path + this.currentValue + ".png')";
        }
        else {
            this.icon.style.backgroundImage = "";
        }
    },
    getDataValue: function(){
        return this.currentValue || "";
    },
    loadBox: function($$item){
        this.$item.$isEditMode = this.$item.$isEditMode || false;
        if (this.$item.$isTitleHidden == undefined) {
            this.$item.$isTitleHidden = true;
        }
        Field.prototype.loadBox.call(this, $$item);
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        if (state.$isDisabled !== undefined) {
            document.site.disableItem(this.icon, this.$isDisabled);
        }
    },
    focus: function(){
        if (this.icon) {
            this.icon.focus();
        }
    },
    setMenus: function(metaData){
        if (metaData.$links !== undefined) {
            this._renderIcon(metaData);
        }
    },
    _renderIcon: function(metaData){
        var self = this;
        var oldIcon;
        if (metaData.$links != self.$links) {
            oldIcon = self.icon;
            if (self.$$iconLink) {
                self.$$iconLink.unbind();
                delete self.$$iconLink
            }
        }
        else {
            if (self.icon) {
                return;
            }
        }
        var domValue = self.$$fieldValue[0];
        if (self.$links = metaData.$links) {
            self.icon = document.createElement("a");
            self.icon.setAttribute("href", "#");
            self.icon.className = self.$skin + "-value-icon s-icon-link";
            (self.$$iconLink = $(self.icon)).bind("click", function(event){
                if (!self.$isDisabled) {
                    self.getPage().externalAdapter.onFieldEvent({
                        field: self,
                        event: event,
                        doEvent: function(){
                            var article = self.getArticle();
                            if (article.onIconFieldClick) {
                                article.onIconFieldClick(self);
                            }
                        }
                    });
                }
                return false;
            });
        }
        else {
            self.icon = document.createElement("div");
            self.icon.className = self.$skin + "-value-icon";
        }
        self.icon.style.width = self.$icon.$width || "16px";
        self.icon.style.height = self.$icon.$height || "16px";
        if (this.$isDisabled !== undefined) {
            document.site.disableItem(this.icon, this.$isDisabled);
        }
        if (this.currentValue != null) {
            this.setDataValue(this.currentValue);
        }
        document.site.toggleClass(domValue, self.$skin + "-icon", true);
        document.site.toggleClass(domValue, "s-icon-link", self.$$iconLink != null);
        if (oldIcon) {
            domValue.replaceChild(self.icon, oldIcon);
        }
        else {
            domValue.appendChild(self.icon);
        }
    },
    render: function(){
        this.$icon = this.$item.$icon || {};
        this._renderIcon(this.$field);
    },
    dispose: function(){
        if (this.$$iconLink) {
            this.$$iconLink.unbind();
        }
        Field.prototype.dispose.call(this);
    }
});
