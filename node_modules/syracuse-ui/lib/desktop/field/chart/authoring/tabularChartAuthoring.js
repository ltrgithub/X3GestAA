"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;


var _localize = {
    itemsPerPage: "page size"
};

function TabularChartAuthoring(){

}

exports.TabularChartAuthoring = helpers.defineClass(TabularChartAuthoring, Article, {
    onNotifyRecordChange: function(value, binding){
        var metaData = {};
        metaData[binding] = value;
        this.designedField.applyDesignMetaData(metaData, true);
        return null; //cancel notify
    },
    applyChange: function(newData){
        if (newData) {
            if (newData.$format) {
                /*                var delta = newData.$ = newData.$ || {};
                 var isCardList = newData.$format == "cardList";
                 delta.$cardsByRowCount = delta.$cardsByRowCount || {};
                 delta.$cardsByRowCount.$isHidden = !isCardList;
                 
                 delta.$isQuickFilter = delta.$isQuickFilter || {};
                 delta.$isQuickFilter.$isHidden = isCardList;
                 delta.$isRowIndexVisible = delta.$isRowIndexVisible || {};
                 delta.$isRowIndexVisible.$isHidden = isCardList;*/
            }
        }
        Article.prototype.applyChange.call(this, newData);
        
    },
    loadBox: function(initData){
        this.$prototype = {
            "$": {
                $chartType: this.designedField._createChoices()
            },
            $chartType: "column"
        };
        this.$item = {
            $category: "section",
            $layout: {
                $items: [{
                    $bind: "$chartType",
                    $isEditMode: true,
                    $skin: "s-author-field",
                    $isLeftSpaceHidden: true
                }]
            }
        };
        Article.prototype.loadBox.call(this, initData);
    },
    dispose: function(){
        Article.prototype.dispose.call(this);
    }
});
