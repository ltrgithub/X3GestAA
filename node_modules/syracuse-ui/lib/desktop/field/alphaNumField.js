"use strict";
var helpers = require('syracuse-core/lib/helpers');
var commonField = require('syracuse-ui/lib/common/field/alphaNumField');
var _localize = {
    confirmPassword: "Confirm password",
    confirmPasswordError: "Password does not match"
};

function DesktopPassword(){
}

exports.DesktopPassword = helpers.defineClass(DesktopPassword, commonField.PasswordField, {
    render: function(){
        commonField.PasswordField.prototype.render.call(this);
        if (this.$isEditMode) {
            this.$$value.append(this.$$confirmInput = $("<input type='password'/>"));
            this.$$confirmInput.attr("placeholder", _localize.confirmPassword)[0].className = this.$$input[0].className + " s-field-pwd-conf";
            if (this.$item.$isCellChild) {
                this.$$confirmInput[0].style.width = "100%";
            }
            if (this.$$title) {
                this.$$title.toggleClass("s-field-title-complex");
            }
        }
    },
    setDataValue: function(value, record){
        commonField.PasswordField.prototype.setDataValue.call(this, value, record);
        this.confirmValue = this.currentValue = value;
    },
    applyDisableState: function(state){
        commonField.PasswordField.prototype.applyDisableState.call(this, state);
        if (this.$isEditMode && state.$isDisabled !== undefined) {
            this.$$confirmInput.attr("disabled", state.$isDisabled).toggleClass("s-disabled", state.$isDisabled);
        }
    },
    onInputValidate: function(event){
        var $$upadted = $(event.target);
        var newValue = $$upadted.val();
        if (this.$$input.val() != this.$$confirmInput.val()) {
            this.validate(newValue);
        }
        else {
            commonField.PasswordField.prototype.onInputValidate.call(this, event);
        }
    },
    validateType: function(errors, value){
        if (this.$$input.val() != this.$$confirmInput.val()) {
            errors.push(_localize.confirmPasswordError);
        }
    }
});


function DesktopNumeric(){
}

exports.DesktopNumeric = helpers.defineClass(DesktopNumeric, commonField.NumericField, {
    clickPicker: function($$btn){
        var self = this;
        if (!self.$isDisabled) {
            self.focus();
            var action = $$btn[0].className.indexOf("-num-up") > 0 ? "add" : "subtract";
            var step = self.formatApi.parse(self.$item.$step || "1"); // assuming $item.$step may be set in field object
            var numObj = self.formatApi.parse(self.$$input.val());
            self.currentValue = self.formatApi.numberValue(self.formatApi[action](numObj, step));
            self.$$input.val(self.currentValue);
        }
    },
    render: function(){
        var self = this;
        if (self.$isEditMode) {
            var input = (self.$$input = $("<input type='text'/>"))[0];
			input.className = self.$skinInput + " " + self.$skinInput + "-num";
            var btn = document.createElement("a");
            btn.className = self.$skin + "-num-up";
            self.$$pickerBtnUp = $(btn).bind("click", function(){
                self.clickPicker($(this));
            });
            var btn = document.createElement("a");
            btn.className = self.$skin + "-num-down";
            self.$$pickerBtnDn = $(btn).bind("click", function(){
                self.clickPicker($(this));
            });
            var box = document.createElement("div");
            box.className = self.$skinInput + "-box";
            $(box).append(self.$$input).append(self.$$pickerBtnUp).append(self.$$pickerBtnDn).appendTo(self.$$value);
            return true;
        }
        return false;
    },
    dispose: function(){
        if (this.$$pickerBtnUp) {
            this.$$pickerBtnUp.unbind();
        }
        if (this.$$pickerBtnDn) {
            this.$$pickerBtnDn.unbind();
        }
        commonField.NumericField.prototype.dispose.call(this);
    }
});

function DesktopText(){
}

exports.DesktopText = helpers.defineClass(DesktopText, commonField.TextField, {});


function DesktopPhone(){
}

exports.DesktopPhone = helpers.defineClass(DesktopPhone, commonField.PhoneField, {});

function DesktopEmail(){
}

exports.DesktopEmail = helpers.defineClass(DesktopEmail, commonField.EmailField, {});
