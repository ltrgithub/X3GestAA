"use strict";
var helpers = require('syracuse-core/lib/helpers');
var localize = require('syracuse-ui/lib/common/controller/localize').list;

function GraphDecorator(){
}

exports.GraphDecorator = helpers.defineClass(GraphDecorator, null, {
    _selectTab: function(){
        var showGraph = this.list.$item.$isGraphTabVisible;
        this.list.$$listSlot[0].style.display = showGraph ? "none" : "";
        this.$$graphSlot[0].style.display = showGraph ? "" : "none";
        this.$$listTab[0].className = showGraph ? "s-list-listgraph-tab" : "s-list-listgraph-tab-open";
        this.$$graphTab[0].className = showGraph ? "s-list-listgraph-tab-open" : "s-list-listgraph-tab";
        
    },
    _appendGraphModeTabs: function(){
        var self = this;
        self.$$graphTabs = $("<nav class='s-list-listgraph-tabs'/>");
        self.$$listTab = $("<a data-s-tab='list'/>").text(localize.graphTabDataList);
        self.$$graphTab = $("<a data-s-tab='graph'/>").text(localize.graphTabDataGraph);
        self.$$graphTabs.append(self.$$listTab).append(self.$$graphTab).delegate("a[data-s-tab]", "click", function(){
            self.list.$item.$isGraphTabVisible = $(this).attr("data-s-tab") == "graph";
            self._selectTab();
            return false;
        }).prependTo(self.$$wrapper);
    },
    applyGraphSettings: function(list, metadata){
        this.list = list;
        if (metadata.$graphMode !== undefined) {
            list.$item.$graphMode = metadata.$graphMode;
        }
        if (metadata.$graphPosition !== undefined) {
            list.$item.$graphPosition = metadata.$graphPosition;
        }
        if (metadata.$graphColumnWidth !== undefined) {
            list.$item.$graphColumnWidth = metadata.$graphColumnWidth;
        }
        if (list.$item.$graphMode != "list") {
            if (!this.$$graphSlot) {
                var div = document.createElement("div");
                div.className = "s-list-listgraph-slot";
                this.$$wrapper = $(div);
                
                div = document.createElement("div");
                div.className = "s-list-datalist-slot";
                list.$$listSlot = $(div).append(list.$$listSlot.children()).appendTo(this.$$wrapper);
                
                div = document.createElement("div");
                div.className = "s-list-graph-slot";
                this.$$graphSlot = $(div).appendTo(this.$$wrapper);
                
                this.$$wrapper.appendTo(list.$$coreRight);
                
                list.$item.$graphPosition = list.$item.$graphPosition || "top";
                
                list.chart = document.itemFactory.load(this.$$graphSlot, {
                    $category: "tabularChart",
                    $chartType: list.$item.$chartType,
                    $bind: list.$item.$bind
                }, list.getArticleParent());
            }
            var wrapper = this.$$wrapper[0];
            var listSlot = list.$$listSlot[0];
            var graphSlot = this.$$graphSlot[0];
            if (list.$item.$graphMode == "both") {
                var $graphPosition = list.$item.$graphPosition;
                if ($graphPosition == "tab") {
                    wrapper.style.display = "";
                    wrapper.style.width = "";
                    if (!this.$$graphTabs) {
                        this._appendGraphModeTabs();
                    }
                    this._selectTab();
                    listSlot.style.width = "";
                    graphSlot.style.width = "";
                    this.$$graphTabs[0].style.display = "";
                }
                else {
                    if (this.$$graphTabs) {
                        this.$$graphTabs[0].style.display = "none";
                    }
                    if ($graphPosition == "left" || $graphPosition == "right") {
                        wrapper.style.display = "table";
                        wrapper.style.tableLayout = "fixed";
                        wrapper.style.width = "100%";
                        listSlot.style.display = "table-cell";
                        graphSlot.style.display = "table-cell";
                        var widths = (list.$item.$graphColumnWidth || "50,50").split(",");
                        graphSlot.style.width = widths[($graphPosition == "left") ? 0 : 1] + "%";
                        listSlot.style.width = widths[($graphPosition == "left") ? 1 : 0] + "%";
                    }
                    else {
                        wrapper.style.display = "";
                        wrapper.style.tableLayout = "";
                        wrapper.style.width = "";
                        listSlot.style.display = "";
                        graphSlot.style.display = "";
                        listSlot.style.width = "";
                        graphSlot.style.width = "";
                    }
                }
            }
            else {
                if (this.$$graphTabs) {
                    this.$$graphTabs[0].style.display = "none";
                }
                listSlot.style.display = "none";
                graphSlot.style.display = "";
                graphSlot.style.width = "";
            }
            this.$$graphSlot[(["left", "top"].indexOf($graphPosition) >= 0) ? "prependTo" : "appendTo"](this.$$wrapper);
        }
        else {
            if (this.$$graphSlot) {
                if (this.$$graphTabs) {
                    this.$$graphTabs[0].style.display = "none";
                }
                var style = this.$$wrapper[0].style;
                style.display = "";
                style.width = "";
                style = this.list.$$listSlot[0].style;
                style.display = "";
                style.width = "";
                this.$$graphSlot[0].style.display = "none";
            }
        }
    },
    dispose: function(){
        delete this.list;
        if (this.$$graphTabs) {
            this.$$graphTabs.undelegate();
        }
    }
});
