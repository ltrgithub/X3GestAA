"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var _templatePattern = /(\{.*?\})/g;

var _localizeOperators = {
    "none": "All",
    "gt": "Greater than",
    "ge": "Greater than or equals",
    "lt": "Less than",
    "le": "Less than or equals",
    "eq": "Equals",
    "ne": "Not equals",
    "between": "Between",
    "like": "Contains",
    "like_s": "Starts with"
}

function _getDefaultFilter($type){
    switch ($type) {
        case "application/x-date":
        case "application/x-time":
        case "application/x-datetime":
            return "ge";
        case "application/x-string":
            return "like";
    }
    return "eq";
}

function _getOperators($type){
    switch ($type) {
        case "application/x-date":
        case "application/x-time":
        case "application/x-datetime":
            return ["none", "gt", "ge", "lt", "le", "eq", "ne", "between"];
        case "application/x-string":
            return ["none", "gt", "ge", "lt", "le", "eq", "ne", "like_s", "like", "between"];
    }
    return ["none", "eq", "ne"];
}

function FilterCell(){
}

helpers.defineClass(FilterCell, null, {
    render: function(record, $$container, $field, $bind){
        var self = this;
        self.$field = $field;
        self.record = record;
        self.$bind = $bind;
        self.operator = "none";
        var $$filter = $("<div/>").appendTo(self.$$container = $$container);
        self.$$list = $("<div class='s-q-filter-list'/>").appendTo($$filter).hide();
        self.hookListClick();
        self.$$operator = $("<a class='s-q-filter s-q-filter-op-none'/>").appendTo($$filter).bind("click", function(){
            if (!self.listPopup) {
                self.$$list.empty();
                _getOperators(self.$field.$type).forEach(function(op){
                    self.$$list.append($("<a class='s-q-filter-item s-q-filter-op-" + op + "'/>").attr("data-s-op", op).text(_localizeOperators[op]));
                });
                self.listPopup = document.site.createPopup({
                    page: self.record.getPage(),
                    $$popup: self.$$list,
                    position: {
                        my: "left top",
                        at: "left bottom",
                        of: self.$$container
                    },
                    closeHandler: function(){
                        self.listPopup = null;
                        return true;
                    },
                    boundarySelector: "#" + self.record.id
                });
            }
            else {
                self.listPopup.close();
            }
            return false;
        });
        self.loadField();
    },
    setOperator: function(operator){
        this.$$operator[0].className = "s-q-filter s-q-filter-op-" + (this.operator = operator);
    },
    hookListClick: function(){
        var self = this;
        self.$$list.delegate("a.s-q-filter-item", "click", function(){
            self.setOperator($(this).attr("data-s-op"));
            self.listPopup.close()
            // between, create the "high" field
            var highField = self.record.boundFields[self.$bind + "$High"];
            if (self.operator === "between") {
                if (highField) {
                    highField[0].$$dataValue.toggle(true);
                }
                else {
                    self.loadField(self.$field, self.$bind + "$High");
                }
            }
            else {
                if (highField) {
                    highField[0].$$dataValue.toggle(false);
                }
                var value = self.record.dataset[self.$bind];
                if (self.operator != "none") {
                    if (value != null && value != "") {
                        self.record._buildFilter();
                    }
                }
                else {
                    if (value != null && value != "") {
                        var field = self.record.boundFields[self.$bind][0];
                        field.setDataValue(null);
                        document.editFieldController.notifyChange(field, null);
                    }
                    else {
                        self.record._buildFilter();
                    }
                }
            }
        });
    },
    _format: function(field, $type, value){
        switch ($type) {
            case "application/x-reference":
                return "'" + (field.currentValue.$key || field.currentValue.$value) + "'";
            case "application/x-choice":
                var fieldType = (field.$field && field.$field.$value && field.$field.$value.$type) || "application/x-string";
                return this._format(field, fieldType, value);
            case "application/x-boolean":
            case "application/x-integer":
            case "application/x-decimal":
                return value;
            case "application/x-date":
                return "@" + value + "@";
        }
        return "'" + value + "'";
    },
    getValue: function(){
        var field = this.record.boundFields[this.$bind][0];
        var value = this.record.dataset[this.$bind];
        if (this.operator != "none" && value != null) {
            var op = this.operator;
            var right;
            switch (op) {
                case "like":
                    // like is for strings only so direct access to store
                    right = "'%" + value + "%'";
                    break;
                case "like_s":
                    // like is for strings only so direct access to store
                    right = "'" + value + "%'";
                    op = "like";
                    break;
                case "between":
                    var highValue = this.record.dataset[this.$bind + "$High"];
                    if (value && !highValue) {
                        right = this._format(field, this.$field.$type, value);
                        op = "ge";
                    }
                    else {
                        if (!value && highValue) {
                            right = this._format(field, this.$field.$type, highValue);
                            op = "le";
                        }
                        else {
                            if (value && highValue) {
                                right = this._format(field, this.$field.$type, value) + " and " + this._format(field, this.$field.$type, highValue);
                            }
                            else {
                                return "";
                            }
                        }
                    }
                    break;
                default:
                    right = this._format(field, this.$field.$type, value);
                    break;
            }
            return "(" + this.$bind + " " + op + " " + right + ")";
        }
    },
    loadField: function($field, $bind){
        document.itemFactory.load(this.$$container, {
            $bind: $bind || this.$bind,
            $isCellChild: true,
            $isFilterMode: true,
            $inplace: true,
            $field: $field
        }, this.record);
    },
    ensureEqual: function(){
        // force operator to equals
        if (this.operator === "none" && this.$field) {
            this.setOperator(_getDefaultFilter(this.$field.$type));
        }
    },
    dispose: function(){
        if (this.$$operator) {
            this.$$operator.unbind();
        }
        if (this.$$list) {
            this.$$list.undelegate();
        }
        delete this.record;
    },
	// FDB 
	fusionGetInputValue: function(){		
        var field = this.record.boundFields[this.$bind][0];
		return field.getDataValue();
	}
});

function FilterRecord(){
}

exports.FilterRecord = helpers.defineClass(FilterRecord, Article, {
    loadRecord: function(list){
        this.$facet = "$filter";
        this.$isEditMode = true;
        this.$prototype = list.$prototype.$item;
		// FDB - $localization is needed for placeholder attribute...
        this.$prototype.$localization= list.getPage().$prototype.$localization;
        document.itemFactory.initializeItem(this, {
            $layout: {
                $items: list.$item.$layout.$items
            }
        }, list);
        this.loadBox();
    },
    drawBox: function(){
        var self = this;
        var list = self.boxParent;
        var htmlCell = "<th class='s-q-filter-cell'/>";
        self._filters = {};
        if (list.builder.$$VGridRows) {
            if (list.recordSelector.hasColumn) {
                $(htmlCell).appendTo(list.builder.$$VGridRows[list.builder.$rowSelector]).append("<div class='s-q-filter-flag'/>");
            }
            list.parseItems(function($item, $field){
                var $$cell = $(htmlCell).appendTo(self.$$item);
                if ($field.$capability.filter) {
                    var $$container = $("<div class='s-q-filter-cont'/>").appendTo($(htmlCell).appendTo(list.builder.$$VGridRows[$item.$bind]));
                    (self._filters[$item.$bind] = new FilterCell()).render(self, $$container, $field, $item.$bind);
                }
            });
            $(htmlCell).appendTo(list.builder.$$VGridRows[list.builder.$rowMenu]);
        }
        else {
            if (self.$$item) {
                self.$$item.empty();
            }
            else {
                self.$$item = $("<tr/>").appendTo(list._$$header);
            }
            if (list.builder.cardview) {
                list.builder.cardview.onQuickFilterDrawBox(htmlCell, self.$$item);
            }
            if (list.recordSelector.hasColumn) {
                $(htmlCell).appendTo(self.$$item).append("<div class='" + list.$skin + "-quick-flag'/>");
            }
            if (list.$item.$isRowIndexVisible) {
                $(htmlCell).appendTo(self.$$item);
            }
            list.parseItems(function($item, $field){
                var $$cell = $(htmlCell).appendTo(self.$$item);
                if ($field.$capability.filter) {
                    var $$container = $("<div class='s-q-filter-cont'/>").appendTo($$cell);
                    // create filter anchor
                    (self._filters[$item.$bind] = new FilterCell()).render(self, $$container, $field, $item.$bind);
                }
            });
        }
        
    },
    _buildFilter: function(){
        var self = this;
        var values = [];
        var params = {};
        Object.keys(self._filters).forEach(function($bind){
            var value = self._filters[$bind].getValue();
            if (value) {
                values.push(value);
            }
        });
        params.filter = values.join(" and ");
        this.boxParent.fetch(params);
    },
    onNotifyRecordChange: function(value, $bind){
        this.dataset[$bind] = value;
        var filter = this._filters[$bind];
        if (value == null || value == "") {
            if (filter && filter.operator !== "none") {
                if (filter.operator == "between") {
                    var field = this.record.boundFields[filter.$bind][0];
                    var fieldHigh = this.record.boundFields[filter.$bind + "$High"][0];
                    if (field.currentValue == fieldHigh.currentValue) {
                        filter.setOperator("none");
                    }
                }
                else {
                    filter.setOperator("none");
                }
            }
        }
        else {
            if (filter) {
                //for high this._filters[$bind] is not defined
                filter.ensureEqual();
            }
        }
        this._buildFilter();
        return null;
    },
    dispose: function(){
        var self = this;
        if (self._filters) {
            Object.keys(self._filters).forEach(function($bind){
                document.controller.disposeObject(self._filters[$bind]);
            });
            delete self._filters;
        }
        Article.prototype.dispose.call(this);
    },	
	// FDB 
	fusionGetInputValues: function(){	
        var self = this;
        var res = [];
        Object.keys(self._filters).forEach(function($bind){
               res.push(self._filters[$bind].fusionGetInputValue() || "");
        });
       return res;
	}	
});
