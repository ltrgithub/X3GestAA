"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("./recordArticle").RecordArticle;

function HGridRecord(){
}

exports.HGridRecord = helpers.defineClass(HGridRecord, RecordArticle, {
    initializeRecord: function(options){
        options.$item = {
            $layout: {
                $items: this.list.$item.$layout.$items
            }
        };
    },
    applyMetaData: function(metaData){
    },
    remove: function(){
        this.$$item.remove();
        if (this.builder.cardview) {
            this.builder.cardview.onRecordRemove(this);
        }
    },
    appendCapabilitiesSlot: function(){
        this._capabilities = {
            slot: this._tdCapabilities
        };
        this._capabilities.slot.className += "  " + this.list.$skin + "-record-actions";
    },
    appendCapabilities: function($$container){
        if (this._capabilities) {
            document.site.emptyDom(this._capabilities.slot);
            delete this._capabilities;
        }
        RecordArticle.prototype.appendCapabilities.call(this, $$container);
    },
    drawBox: function(){
        var self = this;
        self.$isVerticalDirection = true;
        self._dataRow = document.createElement("tr");
        self._dataRow.setAttribute("data-s-record", self.$recordUuid);
        self.$$item = $(self.list._body.appendChild(self._dataRow));
        
        if (self.list.$alternateStyle && self.$recordIndex % 2) {
            self._dataRow.className = self.list.$alternateSkin;
        }
        self._tdCapabilities = document.createElement("td");
        self._tdCapabilities.className = self.builder.gridCss.cell;
        self.appendCapabilities();
        self._dataRow.appendChild(self._tdCapabilities);
        
        
        if (self.builder.cardview) {
            self.builder.cardview.onRecordDrawBox(self);
        }
        if (self.list.recordSelector.hasColumn) {
            var td = document.createElement("td");
            td.className = self.builder.gridCss.rowIndex;
            self._dataRow.appendChild(td);
            $(td).append(self.$$selector = $(self.list.recordSelector.record));
        }
        if (self.list.recordSelector.isRowMode) {
            self._dataRow.className = self.list.$skin + "-mod-sel-row";
        }
        if (self.list.$item.$isRowIndexVisible) {
            var td = document.createElement("td");
            td.className = self.builder.gridCss.rowIndex;
            self._dataRow.appendChild(td);
            $(td).text((self.list.$startIndex || 0) + self.$recordIndex);
        }
        self.list.parseItems(function($item, $field){
            var td = document.createElement("td");
            td.className = self.builder.gridCss.cell;
            document.itemFactory.load($(self._dataRow.appendChild(td)), {
                $bind: $item.$bind,
                $isCellChild: true,
                $inplace: true
            }, self);
        });
        if (!self.list.$item.$isMenuRecordHidden) {
            self._appendPopupMenu();
        }
    },
    _appendPopupMenu: function(){
        var self = this;
        var div = document.createElement("div");
        div.className = "s-field-menus-popup";
        self._$$menusPopup = $(div);
        self._loadMenu(div);
        
        if (!self._capabilities) {
            self.appendCapabilitiesSlot();
        }
        var btn = this._appendCapability("menus");
        btn.className = "s-field-menus-btn s-close";
        btn.setAttribute("id", self.id + "-menu-btn");
        self.$$menusBtn = $(btn)
        self.$$menusBtn.bind("click", function(){
            document.site.onBeforClick();
            if (!self.$isDisabled) {
                self.getPage().externalAdapter.onFieldClickPicker({
                    field: self.list,
                    pickerType: "contextMenu",
                    doEvent: function(){
                        if (!self._popupMenus) {
                            document.site.toggleClass(self.$$menusBtn[0], "s-close", false);
                            self.$$item[0].setAttribute("id", self.id);
                            self._popupMenus = self.boxParent.openDialog({
                                $dialogMode: "popup",
                                content: self,
                                $$dialog: self._$$menusPopup,
                                position: {
                                    my: "right top",
                                    at: "right bottom",
                                    of: self.$$menusBtn
                                },
                                onClose: function(){
                                    document.site.toggleClass(self.$$menusBtn[0], "s-close", true);
                                    self._popupMenus = null;
                                },
                                autocCloseBoundary: "#" + self.id + "-menu-btn"
                            });
                        }
                        else {
                            self._popupMenus.close();
                        }
                    }
                });
            }
            return false;
        });
    },
    highlightSelection: function(selected){
        document.site.toggleClass(this.$$item[0], "s-list-record-selected", selected);
        if (this.builder.cardview) {
            this.builder.cardview.onRecordHighlightSelection(this, selected);
        }
        if (this.$$selector && this.$$selector.is("input")) {
            this.$$selector.attr('checked', selected);
        }
    }
});
