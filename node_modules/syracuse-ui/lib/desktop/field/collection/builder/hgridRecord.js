"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;

function HGridRecord(){
}

exports.HGridRecord = helpers.defineClass(HGridRecord, Article, {
    loadRecord: function(list, record, $recordIndex, $$recordContainer){
        this.$recordUuid = record.$uuid;
        this.$recordIndex = $recordIndex;
        this.$$recordContainer = $$recordContainer;
        this.$facet = list.$recordFacet;
        this.$prototype = list.$prototype.$item;
        this.builder = (this.list = list).builder;
        document.itemFactory.initializeItem(this, {
            $layout: {
                $items: list.$item.$layout.$items
            }
        }, list);
        this.loadBox(record);
    },
    
    remove: function(){
        this.$$item.remove();
        if (this.builder.cardview) {
            this.builder.cardview.onRecordRemove(this);
        }
        if (this.$$menuRow) {
            this.$$menuRow.remove();
        }
    },
    drawBox: function(){
        var self = this;
        var tr = document.createElement("tr");
        tr.setAttribute("data-s-record", self.$recordUuid);
        self.$$item = $(tr).appendTo(self.list._$$body);
        
        if (self.list.$alternateStyle && self.$recordIndex % 2) {
            tr.className = self.list.$alternateSkin;
        }
        if (this.builder.cardview) {
            this.builder.cardview.onRecordDrawBox(self);
        }
        if (self.list.recordSelector.hasColumn) {
            var td = document.createElement("td");
            td.className = self.builder.gridCss.rowIndex;
            self.$$item.append($(td).append(self.$$selector = $(self.list.recordSelector.record)));
        }
        if (self.list.recordSelector.isRowMode) {
            tr.className = self.list.$skin + "-mod-sel-row";
        }
        if (self.list.$item.$isRowIndexVisible) {
            var td = document.createElement("td");
            td.className = self.builder.gridCss.rowIndex;
            self.$$item.append($(td).text((self.list.$startIndex || 0) + self.$recordIndex));
        }
        self.list.parseItems(function($item, $field){
            var td = document.createElement("td");
            td.className = self.builder.gridCss.cell;
            document.itemFactory.load($(td).appendTo(self.$$item), {
                $bind: $item.$bind,
                $isCellChild: true,
                $inplace: true
            }, self);
        });
        
        if (!self.list.$item.$isMenuRecordHidden) {
            self.appendMenuRow();
        }
    },
    appendMenuRow: function(){
        var tr = document.createElement("tr");
        tr.setAttribute("data-s-record", this.$recordUuid);
        this.$$menuRow = $(tr).appendTo(this.list._$$body);
        var colSpan = this.builder.$columnsCount;
        if (this.builder.cardview) {
            colSpan = this.builder.cardview.onAppendMenuRow(this, colSpan);
        }
        if (this.list.recordSelector.hasColumn) {
            colSpan--;
            this.appendEmptyMenuCell();
        }
        if (this.list.$item.$isRowIndexVisible) {
            colSpan--;
            this.appendEmptyMenuCell();
        }
        var td = document.createElement("td");
        td.className = this.builder.gridCss.menuRow;
        td.setAttribute("colspan", colSpan);
        this.$$menuContainer = $(td).appendTo(this.$$menuRow);
    },
    appendEmptyMenuCell: function(){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.menuRow;
        this.$$menuRow.append(td);
    },
    highlightSelection: function(selected){
        document.site.toggleClass(this.$$item, "s-list-record-selected", selected);
        if (this.$$menuRow) {
            document.site.toggleClass(this.$$menuRow, "s-list-record-selected", selected);
        }
        if (this.builder.cardview) {
            this.builder.cardview.onRecordHighlightSelection(this, selected);
        }
        if (this.$$selector && this.$$selector.is("input")) {
            this.$$selector.attr('checked', selected);
        }
    },
    dispose: function(){
        delete this.list
        delete this.builder;
        delete this.menus;
        Article.prototype.dispose.call(this);
    }
});
