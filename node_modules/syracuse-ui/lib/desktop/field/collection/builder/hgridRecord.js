"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;

function HGridRecord(){
}

exports.HGridRecord = helpers.defineClass(HGridRecord, Article, {
    initializeRecord: function(options){
        options.$item = {
            $layout: {
                $items: this.list.$item.$layout.$items
            }
        };
    },
    applyMetaData: function(metaData){
    },
    remove: function(){
        this.$$item.remove();
        if (this.builder.cardview) {
            this.builder.cardview.onRecordRemove(this);
        }
        if (this._menuRow) {
            document.site.removeDomChild(this._menuRow);
            delete this._menuRow;
        }
    },
    appendCapabilitiesSlot: function(){
        this._tdCapabilities.appendChild(this.capabilities.slot);
        this._tdCapabilities.style.display = "";
        if (this._tdMenuRowCapabilities) {
            this._tdMenuRowCapabilities.style.display = "";
        }
    },
    drawBox: function(){
        var self = this;
        self.$isVerticalDirection = true;
        self._dataRow = document.createElement("tr");
        self._dataRow.setAttribute("data-s-record", self.$recordUuid);
        self.$$item = $(self.list._body.appendChild(self._dataRow));
        
        if (self.list.$alternateStyle && self.$recordIndex % 2) {
            self._dataRow.className = self.list.$alternateSkin;
        }
        self._tdCapabilities = document.createElement("td");
        self._tdCapabilities.style.display = "none";
        self._tdCapabilities.className = self.builder.gridCss.cell;
        self.list._appendCapabilities(self);
        self._dataRow.appendChild(self._tdCapabilities);
        if (self.capabilities && self.capabilities.slot) {
            self._tdCapabilities.style.width = $(self.capabilities.slot).width() + "px";
        }
        
        if (self.builder.cardview) {
            self.builder.cardview.onRecordDrawBox(self);
        }
        if (self.list.recordSelector.hasColumn) {
            var td = document.createElement("td");
            td.className = self.builder.gridCss.rowIndex;
            self._dataRow.appendChild(td);
            $(td).append(self.$$selector = $(self.list.recordSelector.record));
        }
        if (self.list.recordSelector.isRowMode) {
            self._dataRow.className = self.list.$skin + "-mod-sel-row";
        }
        if (self.list.$item.$isRowIndexVisible) {
            var td = document.createElement("td");
            td.className = self.builder.gridCss.rowIndex;
            self._dataRow.appendChild(td);
            $(td).text((self.list.$startIndex || 0) + self.$recordIndex);
        }
        self.list.parseItems(function($item, $field){
            var td = document.createElement("td");
            td.className = self.builder.gridCss.cell;
            document.itemFactory.load($(self._dataRow.appendChild(td)), {
                $bind: $item.$bind,
                $isCellChild: true,
                $inplace: true
            }, self);
        });
        
        if (!self.list.$item.$isMenuRecordHidden) {
            self.appendMenuRow();
        }
    },
    appendMenuRow: function(){
        this._menuRow = document.createElement("tr");
		this._menuRow.setAttribute("data-s-menu-row","1");
        this._menuRow.setAttribute("data-s-record", this.$recordUuid);
        this.list._body.appendChild(this._menuRow);
        var colSpan = this.builder.$columnsCount;
        //empty column for capabilities
        /*colSpan--;
         this._tdMenuRowCapabilities = this.appendEmptyMenuCell(true);
         */
        if (this.builder.cardview) {
            colSpan = this.builder.cardview.onAppendMenuRow(this, colSpan);
        }
        if (this.list.recordSelector.hasColumn) {
            colSpan--;
            this.appendEmptyMenuCell();
        }
        if (this.list.$item.$isRowIndexVisible) {
            colSpan--;
            this.appendEmptyMenuCell();
        }
        var td = document.createElement("td");
        td.className = this.builder.gridCss.menuRow;
        td.setAttribute("colspan", colSpan);
        this.$$menuContainer = $(this._menuRow.appendChild(td));
    },
    appendEmptyMenuCell: function(isHidden){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.menuRow;
        if (isHidden) {
            td.style.display = "none";
        }
        this._menuRow.appendChild(td);
        return td;
    },
    highlightSelection: function(selected){
        document.site.toggleClass(this.$$item[0], "s-list-record-selected", selected);
        if (this._menuRow) {
            document.site.toggleClass(this._menuRow, "s-list-record-selected", selected);
        }
        if (this.builder.cardview) {
            this.builder.cardview.onRecordHighlightSelection(this, selected);
        }
        if (this.$$selector && this.$$selector.is("input")) {
            this.$$selector.attr('checked', selected);
        }
    },
    dispose: function(){
        delete this.list
        delete this.builder;
        delete this.menus;
        Article.prototype.dispose.call(this);
    }
});
