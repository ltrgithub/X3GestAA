"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("./recordArticle").RecordArticle;

function _drawVgridRecord(record){
    var css = record.$skin + "-cell";
    record.orderCols = [];
    if (record.list.$item.$isRowIndexVisible) {
        var td = record.appendRowIndexCell(record.builder.table.cols.$rowIndex.slot);
        if (record.list.recordSelector.isRowMode) {
            td.className += " s-list-selector-row";
            td.setAttribute("data-s-record", record.$recordUuid);
        }
        record.orderCols.push(td);
    }
    if (record.list.recordSelector.appendToRecord) {
        record.orderCols.push(record.appendRecordSelector(record.builder.table.cols.$recordSelector.slot));
        record._selectorCheck.setAttribute("data-s-record", record.$recordUuid);
    }
    record.list.parseItems(function($item, $field){
        var td = record.appendFieldCell(record.builder.table.cols[$item.$bind].slot, $item);
        if (record.list.recordSelector.isRowMode) {
            td.className += " s-list-selector-row";
            td.setAttribute("data-s-record", record.$recordUuid);
        }
        record.orderCols.push(td);
    });
    
    if (!record.list.$item.$isMenuRecordHidden) {
        //var cell = document.createElement("td");
        //cell.className = record.list.$skin + "-cell";
        //record._loadMenu(record.builder.vgridRows[record.builder.$rowMenu].appendChild(cell));
    }
}

function HGridRecord(){
}

exports.HGridRecord = helpers.defineClass(HGridRecord, RecordArticle, {
    initializeRecord: function(options){
        options.$item = {
            $layout: {
                $items: this.list.$item.$layout.$items
            }
        };
    },
    remove: function(){
        if (this.list.$item.$format == "grid") {
            this.$$item.remove();
            if (this.builder.cardview) {
                this.builder.cardview.onRecordRemove(this);
            }
        }
    },
    appendCapabilitiesSlot: function(){
        this._capabilities = {
            slot: this._tdCapabilities
        };
        this._capabilities.slot.className += "  " + this.list.$skin + "-record-actions";
    },
    appendCapabilities: function($$container){
        if (this._capabilities) {
            document.site.emptyDom(this._capabilities.slot);
            delete this._capabilities;
        }
        RecordArticle.prototype.appendCapabilities.call(this, $$container);
    },
    appendRowIndexCell: function(slot){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.rowIndex;
        $(slot.appendChild(td)).text((this.list.$startIndex || 0) + this.$recordIndex);
        return td;
    },
    appendFieldCell: function(slot, $item){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.cell;
        document.itemFactory.load($(slot.appendChild(td)), {
            $bind: $item.$bind,
            $isCellChild: true,
            $inplace: true
        }, this)
        return td;
    },
    appendRecordSelector: function(slot){
        var td = document.createElement("td");
        td.className = this.builder.gridCss.cell;
        this._selectorCheck = this.list.recordSelector.appendToRecord(slot.appendChild(td));
        return td;
    },
    drawBox: function(){
        if (this.list.$item.$format == "vgrid") {
            _drawVgridRecord(this);
        }
        else {
            var self = this;
            
            self.$isVerticalDirection = true;
            self._dataRow = document.createElement("tr");
            self._dataRow.setAttribute("data-s-record", self.$recordUuid);
            self.$$item = $(self.list._body.appendChild(self._dataRow));
            
            if (self.list.$item.$alternateStyle && self.$recordIndex % 2) {
                self._dataRow.className = self.list.$skin + "-alt";
            }
            
            if (self.list.$item.$isRowIndexVisible) {
                this.appendRowIndexCell(self._dataRow);                
            }
            
            self._tdCapabilities = document.createElement("td");
            self._tdCapabilities.className = self.builder.gridCss.cell;
            self.appendCapabilities();
            self._dataRow.appendChild(self._tdCapabilities);
            
            
            if (self.builder.cardview) {
                self.builder.cardview.onRecordDrawBox(self);
            }
            
            if (self.list.recordSelector.appendToRecord) {
                self.appendRecordSelector(self._dataRow);
            }
            if (self.list.recordSelector.isRowMode) {
                self._dataRow.className = "s-list-selector-row";
            }
            
            self.list.parseItems(function($item, $field){
                self.appendFieldCell(self._dataRow, $item);
            });
            if (!self.list.$item.$isMenuRecordHidden) {
                self._appendPopupMenu();
            }
        }
    },
    _appendPopupMenu: function(){
        var self = this;
        var div = document.createElement("div");
        div.className = "s-field-menus-popup";
        self._$$menusPopup = $(div);
        self._loadMenu(div);
        
        if (!self._capabilities) {
            self.appendCapabilitiesSlot();
        }
        var btn = this._appendCapability("menus");
        btn.className = "s-field-menus-btn s-close";
        btn.setAttribute("id", self.id + "-menu-btn");
        self.$$menusBtn = $(btn)
        self.$$menusBtn.bind("click", function(){
            document.site.onBeforClick();
            if (!self.$isDisabled) {
                self.getPage().externalAdapter.onFieldClickPicker({
                    field: self.list,
                    pickerType: "contextMenu",
                    doEvent: function(){
                        if (!self._popupMenus) {
                            document.site.toggleClass(self.$$menusBtn[0], "s-close", false);
                            self.$$item[0].setAttribute("id", self.id);
                            self._popupMenus = self.boxParent.openDialog({
                                $dialogMode: "popup",
                                content: self,
                                $$dialog: self._$$menusPopup,
                                position: {
                                    my: "right top",
                                    at: "right bottom",
                                    of: self.$$menusBtn
                                },
                                onClose: function(){
                                    document.site.toggleClass(self.$$menusBtn[0], "s-close", true);
                                    self._popupMenus = null;
                                },
                                autocCloseBoundary: "#" + self.id + "-menu-btn"
                            });
                        }
                        else {
                            self._popupMenus.close();
                        }
                    }
                });
            }
            return false;
        });
    },
    highlightSelection: function(selected){
        if (this.list.$item.$format == "grid") {
            document.site.toggleClass(this.$$item[0], "s-list-record-selected", selected);
            if (this.builder.cardview) {
                this.builder.cardview.onRecordHighlightSelection(this, selected);
            }
        }
        else {
            if (this.orderCols) {
                this.orderCols.forEach(function(td){
                    document.site.toggleClass(td, "s-list-record-selected", selected);
                });
            }
        }
        if (this._selectorCheck) {
            $(this._selectorCheck).attr("checked", selected);
        }
    }
});
