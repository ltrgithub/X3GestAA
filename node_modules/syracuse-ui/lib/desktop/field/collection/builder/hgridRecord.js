"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;

function HGridRecord(){
}

exports.HGridRecord = helpers.defineClass(HGridRecord, Article, {
    loadRecord: function(list, record, $recordIndex, $$recordContainer){
        this.$recordUuid = record.$uuid;
        this.$recordIndex = $recordIndex;
        this.$$recordContainer = $$recordContainer;
        this.$facet = list.$recordFacet;
        this.$prototype = list.$prototype.$item;
        document.itemFactory.initializeItem(this, {
            $layout: {
                $items: list.$item.$layout.$items
            }
        }, list);
        this.loadBox(record);
        
    },
    togglePreview: function(show){
        this.$$previewOpener.toggleClass("s-close", !show);
        if (!this.$$previewRow) {
            var td = document.createElement("td");
            td.className = this.boxParent.$skin + "-preview-cell";
            td.setAttribute("colspan", this.boxParent.builder.$columnsCount);
            var $$cell = $(td).appendTo(this.$$previewRow = $(document.createElement("tr")).insertAfter(this.$$dataRow));
            var $preView = this.boxParent.$item.$preView;
            $preView.$category = $preView.$category || "section"
            document.itemFactory.load($$cell, $preView, this);
        }
        this.$$previewRow.toggle(show);
    },
    remove: function(){
        this.$$dataRow.remove();
        if (this.$$previewRow) {
            this.$$previewRow.remove();
        }
        if (this.$$menuRow) {
            this.$$menuRow.remove();
        }
    },
    drawBox: function(){
        var self = this;
        var list = self.boxParent;
        var gridCss = list.builder.gridCss;
        var tr = document.createElement("tr");
        tr.setAttribute("data-s-record", self.$recordUuid);
        self.$$dataRow = $(tr).appendTo(list._$$body);
        
        if (list.$alternateStyle && self.$recordIndex % 2) {
            tr.className = list.$alternateSkin;
        }
        if (list.$item.$preView) {
            var th = document.createElement("td");
            th.className = gridCss.cell + " " + list.$skin + "-preview-cell";
            var btn = document.createElement("a");
            btn.className = list.$skin + "-preview-opener s-close";
            self.$$dataRow.append($(th).append(self.$$previewOpener = $(btn)));
        }
        if (list.recordSelector.hasColumn) {
            var td = document.createElement("td");
            td.className = gridCss.rowIndex;
            self.$$dataRow.append($(td).append(self.$$selector = $(list.recordSelector.record)));
        }
        if (list.recordSelector.isRowMode) {
            tr.className = list.$skin + "-mod-sel-row";
        }
        if (list.$item.$isRowIndexVisible) {
            var td = document.createElement("td");
            td.className = gridCss.rowIndex;
            self.$$dataRow.append($(td).text((list.$startIndex || 0) + self.$recordIndex));
        }
        self.$item.$layout.$items.forEach(function($item){
            var $field = list.$fields[$item.$bind];
            if ($field && !$field.$isHidden) {
                var td = document.createElement("td");
                td.className = gridCss.cell;
                document.itemFactory.load($(td).appendTo(self.$$dataRow), {
                    $bind: $item.$bind,
                    $isCellChild: true,
                    $inplace: true
                }, self);
            }
        });
        if (!list.$item.$isMenuRecordHidden) {
            self.appendMenuRow();
        }
    },
    appendMenuRow: function(){
        var list = this.boxParent;
        var tr = document.createElement("tr");
        tr.setAttribute("data-s-record", this.$recordUuid);
        this.$$menuRow = $(tr).appendTo(list._$$body);
        var colSpan = list.builder.$columnsCount;
        if (list.$item.$preView) {
            colSpan--;
            this.appendEmptyMenuCell();
        }
        if (list.recordSelector.hasColumn) {
            colSpan--;
            this.appendEmptyMenuCell();
        }
        if (list.$item.$isRowIndexVisible) {
            colSpan--;
            this.appendEmptyMenuCell();
        }
        var td = document.createElement("td");
        td.className = list.builder.gridCss.menuRow;
        td.setAttribute("colspan", colSpan);
        this.$$menuContainer = $(td).appendTo(this.$$menuRow);
    },
    appendEmptyMenuCell: function(){
        var td = document.createElement("td");
        td.className = this.boxParent.builder.gridCss.menuRow;
        this.$$menuRow.append(td);
    },
    highlightSelection: function(selected){
        document.site.toggleClass(this.$$dataRow, "s-list-record-selected", selected);
        if (this.$$menuRow) {
            document.site.toggleClass(this.$$menuRow, "s-list-record-selected", selected);
        }
        if (this.$$previewRow) {
            document.site.toggleClass(this.$$previewRow, "s-list-record-selected", selected);
        }
        if (this.$$selector && this.$$selector.is("input")) {
            this.$$selector.attr('checked', selected);
        }
    },
    dispose: function(){
        delete this.menus;
        Article.prototype.dispose.call(this);
    }
});
