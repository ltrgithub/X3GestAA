"use strict";
var helpers = require('syracuse-core/lib/helpers');
var HGridBuilder = require("./hgridBuilder").Builder;
var VGridRecord = require('./vgridRecord').VGridRecord;

function VGridBuilder(){
}

exports.Builder = helpers.defineClass(VGridBuilder, HGridBuilder, {
    initialize: function(){
        this.$defaultSkin = "s-vgrid";
        this.RecordClass = VGridRecord;
    },
    appendRow: function($bind){
        return this.vgridRows[$bind] = this.list._body.appendChild(document.createElement("tr"));
    },
    renderOrderBy: function(){
        var self = this;
        if (self.list.$$orderedLink) {
            self.list.$$orderedLink.removeClass("s-grid-sort-asc s-grid-sort-desc");
            self.list.$$orderedLink = null;
        }
        if (self.list.$orderBy) {
            self.list.$orderBy.forEach(function(field){
                self.list.$$orderedLink = $(self.vgridRows[field.binding]).find("a[data-s-sort=" + field.binding + "]").addClass(field.descending ? "s-grid-sort-desc" : "s-grid-sort-asc");
            });
        }
    },
    makeColGroup: function(){
    
    },
    makeTitleRow: function(){
        var self = this;
        this.vgridRows = {};
        this.$columnsCount = 1 + (this.list.$item.$isQuickFilter ? 1 : 0); //1 for title cell
        var css = self.list.$skin + "-title-cell";
        if (self.list.recordSelector.hasColumn) {
            self.appendRow(self.$rowSelector = "$grid-row-selector").append($("<th/>").addClass(css).addClass(self.list.$skin + self.list.recordSelector.titleCss).append(self.list.recordSelector.title));
        }
        self.list.parseItems(function($item, $field){
            var cell = document.createElement("th");
            cell.className = css;
            self.appendRow($item.$bind).appendChild(cell);
            var title;
            if ($field.$capability.sort != false) {
                title = document.createElement("a");
                title.setAttribute("data-s-sort", $item.$bind);
                title.className = self.list.$skin + "-title-link";
            }
            else {
                title = document.createElement("div");
            }
            $(cell.appendChild(title)).text(self.list.getLocalizedTitle($field.$title || ""));
        });
        var cell = document.createElement("th");
        cell.className = css;
        self.appendRow(self.$rowMenu = "$grid-row-menu").appendChild(cell);
    },
    emptyDataBody: function(){
        var self = this;
        $(self.list._body).children().each(function(){
            $(this).children().slice(self.$columnsCount).remove();
        });
    },
    appendNoRecordRow: function(){
        var $$rows = $(this.list._body).children();
        $($$rows[0]).append($("<td/>").attr("rowspan", $$rows.length).append(this.list.appendEmptyInfo()));
    }
});
