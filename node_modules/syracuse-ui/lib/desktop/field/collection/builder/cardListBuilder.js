"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CardRecord = require('./cardRecord').CardRecord;
var RawListBuilder = require("syracuse-ui/lib/common/field/collection/rawListBuilder").RawListBuilder;

function CardListBuilder(){
}

exports.Builder = helpers.defineClass(CardListBuilder, RawListBuilder, {
    initialize: function(){
        this.RecordClass = CardRecord;
        this.list.recordSelector = "div[data-s-record]";
    },
    applyDesignMetaData: function(metadata, onAuthoring){
        if (onAuthoring) {
            if (metadata.$cardsByRowCount !== undefined) {
                this.list.$item.$cardsByRowCount = metadata.$cardsByRowCount;
                this.list.reloadBuilder();
            }
            if (metadata.$graphMode !== undefined) {
                this.toggleDataList(metadata.$graphMode != "graph");
            }
        }
    },
    toggleDataList: function(show){
        if (this.list._body) {
            this.list._body.style.display = show ? "" : "none";
        }
        else {
            this._drawDataList();
        }
    },
    _drawDataList: function(){
        this.list._listSlot.appendChild(this.list._body = document.createElement("div"));
        this.list.appendSelector();
        var css = this.list.$skin + ((this.list.$item.$cardsByRowCount == 0) ? "-free" : "-cell");
        this.list.$recordCss = css + "-record";
        this.list._body.className = css + "-body";
    },
    emptyDataBody: function(){
        RawListBuilder.prototype.emptyDataBody.call(this);
        this.rows = [];
    },
    drawBuilder: function(){
        var list = this.list;
        this.rows = [];
        list.$skin = list.$item.$skin || "s-cards";
        
        list.$item.$cardview = (typeof(list.$item.$cardview) === "object") ? list.$item.$cardview : {
            $layout: {
                $items: list.$item.$layout.$items
            }
        };
        if (list.$item.$cardsByRowCount == undefined) {
            list.$item.$cardsByRowCount = 1;
        }
        this._drawDataList();
        this.list.applyCapabilities(this.list.$prototype.$capabilities === undefined ? {
            $capabilities: "insert,append,delete,reorder"
        } : this.list.$prototype);
        list.applyDesignMetaData(list.$item, false);
        list.boxParent.getArticle().bind(list, list.$item.$bind);
    },
    appendCardsRow: function(){
        var row = {
            index: this.rows.length,
            cards: {},
            count: 0,
            $$cells: []
        };
        row.$$row = document.createElement("div");
        row.$$row.className = this.list.$recordCss + "-row";
        this.list._body.appendChild(row.$$row);
        if (this.list.$item.$cardsByRowCount) {
            var count = this.list.$item.$cardsByRowCount || 1;
            var width = (100 / count) + "%";
            for (var ii = 0; ii < count; ii++) {
                row.$$cells.push($("<div/>").addClass(this.list.$recordCss).css("width", width).css("visibility", "hidden").appendTo(row.$$row));
            }
        }
        
        this.rows.push(row);
        return row;
    }
});
