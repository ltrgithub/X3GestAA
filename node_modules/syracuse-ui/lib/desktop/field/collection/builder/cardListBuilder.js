"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CardRecord = require('./cardRecord').CardRecord;
var RawListBuilder = require("syracuse-ui/lib/common/field/collection/rawListBuilder").RawListBuilder;

function CardListBuilder(){
}

exports.Builder = helpers.defineClass(CardListBuilder, RawListBuilder, {
    initialize: function(){
        this.list.RecordClass = CardRecord;
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if (onAuthoring) {
            if (metaData.$cardsByRowCount !== undefined) {
                this.list.$item.$cardsByRowCount = metaData.$cardsByRowCount;
                this.list.reloadBuilder();
            }
        }
    },
    drawBuilder: function(){
        var self = this;
        self.rows = [];
        self.list.$skin = self.list.$item.$skin || "s-cards";
        self.list.$$list = $("<div/>").addClass("s-list").appendTo(self.list.$$value);
        self.list.$$topbar = $("<div/>").addClass("s-list-topbar").appendTo(self.list.$$list);
        self.list.appendArticleMenus(self.list.$$topbar);
        if (!self.list.$item.$hidePager) {
            self.list.appendPager(self.list.$$topbar);
        }
        self.list._appendCore();
        self.list._appendAuthoringOpener(self.list.$$topbar);
        
        self.list._$$body = $("<div/>").appendTo(self.list.$$coreRight);
        
        self.list.appendSelector();
        
        if (!self.list.$item.$items) {
            self.list.$item.$items = self.list.$binds.map(function($bind){
                return {
                    $bind: $bind
                };
            });
        }
        self.list.$cardView = (typeof(self.list.$item.$cardView) === "object") ? self.list.$item.$cardView : {
            $layout: {
                $items: self.list.$item.$items
            }
        };
        if (self.list.$item.$cardsByRowCount == undefined) {
            self.list.$item.$cardsByRowCount = 1;
        }
        var css = self.list.$skin + ((self.list.$item.$cardsByRowCount == 0) ? "-free" : "-cell");
        self.list.$recordCss = css + "-record";
        self.list._$$body.addClass(css + "-body");
        
        self.list.applyDesignMetaData(self.list.$item, false);
        self.list.boxParent.getArticle().bind(self.list, self.list.$item.$bind);
        
        if (!self.list.$item.$isMenuRecordHidden) {
            self.list.$$item.delegate("div[data-s-record]", "mouseenter mouseleave", function(event){
                var $uuid = this.getAttribute("data-s-record");
                self.list.toggleRecordMenu(event.type == "mouseenter", self.list.dataset[$uuid]);
                return false;
            });
        }
    },
    appendCardsRow: function(){
        var row = {
            index: this.rows.length,
            cards: {},
            count: 0,
            $$cells: [],
            $$row: $("<div/>").addClass(this.list.$recordCss + "-row").appendTo(this.list._$$body)
        };
        if (this.list.$item.$cardsByRowCount) {
            var count = this.list.$item.$cardsByRowCount || 1;
            var width = (100 / count) + "%";
            for (var ii = 0; ii < count; ii++) {
                row.$$cells.push($("<div/>").addClass(this.list.$recordCss).css("width", width).css("visibility", "hidden").appendTo(row.$$row));
            }
        }
        
        this.rows.push(row);
        return row;
    },
    appendRecord: function(record, $recordIndex){
        var row, rowIndex;
        if (this.rows.length == 0) {
            row = this.appendCardsRow();
        }
        else {
            row = this.rows[this.rows.length - 1];
        }
        if (this.list.$item.$cardsByRowCount) {
            if (row.count == this.list.$item.$cardsByRowCount) {
                row = this.appendCardsRow();
            }
        }
        else {
            var div = document.createElement("div");
            div.className = this.list.$recordCss;
            div.style.visibility = "hidden";
            row.$$cells.push($(div).appendTo(row.$$row));
        }
        (this.list.dataset[record.$uuid] = new this.list.RecordClass()).loadRecord(this.list, record, $recordIndex, row, row.count++);
    }
});
