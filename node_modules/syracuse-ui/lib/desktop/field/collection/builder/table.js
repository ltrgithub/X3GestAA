"use strict";
var helpers = require('syracuse-core/lib/helpers');
var QuickFilterRecord = require("./filter/quickFilterRecord").QuickFilterRecord;

function Table(){
}

exports.Table = helpers.defineClass(Table, null, {
    load: function(builder, slot){
        this.cols = {};
        this.orderCols = [];
        this.builder = builder;
        this._table = document.createElement("table");
        this.toggle(false);
        this._table.className = builder.list.$skin;
        this._table.setAttribute("cellspacing", "0");
        this._table.setAttribute("cellpadding", "0");
        if (this.builder.list.$item.$fitContainer !== false) {
            this._table.style.width = "100%";
        }
        this._colgroup = this._table.appendChild(document.createElement("colgroup"));
        this._thead = this._table.appendChild(document.createElement("thead"));
        slot.appendChild(this._table);
        this._bindSort();
    },
    _bindSort: function(){
        var self = this;
        self.builder.list.$$item.delegate("a[data-s-sort]", "click", function(){
            var $bind = $(this).attr("data-s-sort");
            var $newOrderBy = [], found;
            if (self.builder.list.$orderBy) {
                self.builder.list.$orderBy.forEach(function($orderItem){
                    if ($orderItem.binding == $bind) {
                        found = true;
                        if ($orderItem.$step != 2) {
                            $orderItem.$step = ($orderItem.$step || 0) + 1;
                            if (!$orderItem.descending) {
                                $orderItem.descending = true;
                            }
                            $newOrderBy.push($orderItem);
                        }
                    }
                    else {
                        $newOrderBy.push($orderItem);
                    }
                });
            }
            if (!found) {
                $newOrderBy.push({
                    binding: $bind,
                    descending: false,
                    $step: 1
                });
            }
            self.builder.list.fetch($newOrderBy ? {
                orderBy: $newOrderBy
            } : null);
            return false;
        });
    },
    toggle: function(show){
        this._table.style.display = show ? "" : "none";
    },
    renderOrderBy: function(){
        var self = this;
        delete self.alphaTabBinding;
        if (self.sortedCols) {
            self.sortedCols.forEach(function($bind){
                var col = self.cols[$bind];
                if (col && col.sortLink) {
                    col.sortLink.className = self.builder.list.$skin + "-title-link";
                }
            });
            delete self.sortedCols;
        }
        if (self.builder.list.$orderBy) {
            self.sortedCols = [];
            self.builder.list.$orderBy.forEach(function(field, index){
                if (index == 0) {
                    if (self.builder.list.$fields[field.binding].$capability.alphaTab) {
                        self.alphaTabBinding = field.binding;
                    }
                }
                var col = self.cols[field.binding];
                if (col && col.sortLink) {
                    col.sortLink.className = self.builder.list.$skin + "-title-link" + (field.descending ? " s-grid-sort-desc" : " s-grid-sort-asc");
                    self.sortedCols.push(field.binding);
                }
            });
        }
        self._showAlphaPager(self.alphaTabBinding);
    },
    appendBody: function(){
        return this._table.appendChild(document.createElement("tbody"));
    },
    _appendCol: function(){
        return {
            titleCell: document.createElement("th"),
            group: this._colgroup.appendChild(document.createElement("col"))
        };
    },
    appendRowIndexCol: function(slot){
        var col = this.cols.$rowIndex = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.builder.gridCss.title;
        slot.appendChild(col.titleCell);
        col.group.style.width = "1.5em";
        return col;
    },
    appendCardViewCol: function(slot){
        var col = this.cols.$cardView = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.builder.gridCss.title + " " + this.builder.list.$skin + "-cardview-cell";
        var opener = document.createElement("a");
        opener.className = this.builder.list.$skin + "-cardview-opener s-close";
        slot.appendChild(col.titleCell).appendChild(opener);
        this.builder.cardview._bindOpener();
        return col;
    },
    appendRecordSelectorCol: function(slot){
        var col = this.cols.$recordSelector = this._appendCol();
        col.slot = slot;
        col.titleCell.className = this.builder.gridCss.title;
        this.builder.list.recordSelector.appendToTitle(slot.appendChild(col.titleCell));
        col.group.style.width = this.builder.list.recordSelector.getWidth();
        return col;
    },
    appendCapabilitiesCol: function(slot){
        var col = this.cols.$capabilities = this._appendCol();
        col.slot = slot;
        var width = 0;
        col.titleCell.className = this.builder.gridCss.title;
        slot.appendChild(col.titleCell);
        
        if (this.builder.list.$capability) {
            ["reorder", "insert", "delete"].forEach(function($capability){
                if (this.builder.list.$capability[$capability]) {
                    width += 20;
                }
            });
        }
        if (!this.builder.list.$item.$isMenuRecordHidden) {
            width += 20;
        }
        width = 80; //hack temp
        if (width > 0) {
            col.group.style.width = width + "px";
            col.group.style.display = "";
        }
        else {
            col.group.style.display = "none";
        }
        return col;
    },
    appendFieldCol: function(slot, $item, $field){
        var col = this.cols[$item.$bind] = this._appendCol();
        col.slot = slot;
        var title;
        if ($field.$capability.sort) {
            title = col.sortLink = document.createElement("a")
            title.className = this.builder.list.$skin + "-title-link";
            title.setAttribute("data-s-sort", $item.$bind);
        }
        else {
            title = document.createElement("div");
            title.className = this.builder.list.$skin + "-title-label";
        }
        var text = this.builder.list.getLocalizedTitle($field.$title || "");
        $(title).text(text);
        title.setAttribute("title", text);
        
        col.titleCell.className = this.builder.gridCss.title;
        col.titleCell.appendChild(title);
        slot.appendChild(col.titleCell);
        
        //set colgroup
        var width = $item.$width || $field.$width;
        if (width) {
            col.group.style.width = width;
        }
        else {
            var $width = document.site.getFieldWidth($field.$type, $field.$format);
            var widthValue = $width.$width;
            if ($width.$charWidth) {
                widthValue = ($width.$charWidth * (($field.$constraints ? $field.$constraints.$size : null) || $width.$size));
            }
            col.group.style.width = widthValue + "em";
        }
        col.group.setAttribute("data-s-bind", $item.$bind);
        return col;
    },
    _ensureQuickFilter: function(){
        if (this.builder.list.$item.$isQuickFilter && this.builder.list.$facet != "$details") {
            if (this.quickFilterRecord) {
                this.quickFilterRecord.drawBox();
            }
            else {
                (this.quickFilterRecord = new QuickFilterRecord()).loadRecord(this.builder.list);
            }
        }
    },
    makeTitleRow: function(){
        var self = this;
        var list = self.builder.list;
        self.orderCols = [];
        
        if (list.$item.$format == "vgrid") {
            var $$colgroup = $(self._colgroup).detach();
            self._ensureQuickFilter();
            //this.$columnsCount = 1 + (list.$item.$isQuickFilter ? 1 : 0); //1 for title cell
            var css = list.$skin + "-title-cell";
            
            if (list.$item.$isRowIndexVisible) {
                self.orderCols.push(this.appendRowIndexCol(list._body.appendChild(document.createElement("tr"))));
                if (self.quickFilterRecord) {
                    self.quickFilterRecord.appendEmptyCell(self.cols.$rowIndex.slot);
                }
            }
            
            if (list.recordSelector.appendToTitle) {
                var col = self.appendRecordSelectorCol(list._body.appendChild(document.createElement("tr")));
                self.orderCols.push(col);
                if (self.quickFilterRecord) {
                    self.quickFilterRecord.appendEmptyCell(self.cols.$recordSelector.slot);
                }
            }
            list.parseItems(function($item, $field){
                var row = list._body.appendChild(document.createElement("tr"));
                self.orderCols.push(self.appendFieldCol(row, $item, $field));
                if (self.quickFilterRecord) {
                    self.quickFilterRecord.appendFieldCell($item, $field);
                }
            });
            
            self.headerColsCount = 1;
            $$colgroup.empty();
            self._colgroup.appendChild(document.createElement("col")).style.width = "10em";
            if (self.quickFilterRecord) {
                self.headerColsCount++;
                self._colgroup.appendChild(document.createElement("col")).style.width = "10em";
            }
            $$colgroup.prependTo(self._table);
            
            /*  var cell = document.createElement("th");
             cell.className = css;
             self.appendVRow(self.$rowMenu = "$grid-row-menu").appendChild(cell);*/
        }
        else {
            if (self.titleRow) {
                $(self.titleRow).empty();
            }
            else {
                self.titleRow = self._thead.appendChild(document.createElement("tr"));
            }
            self.titleRow.style.display = list.$item.$isTitleRowHidden ? "none" : "";
            self._ensureQuickFilter();
            
            if (list.$item.$isRowIndexVisible) {
                if (self.quickFilterRecord) {
                    self.quickFilterRecord.appendEmptyCell();
                }
                self.orderCols.push(this.appendRowIndexCol(self.titleRow));
            }
            
            //capabilities
            if (self.quickFilterRecord) {
                self.quickFilterRecord.appendEmptyCell();
            }
            self.orderCols.push(this.appendCapabilitiesCol(self.titleRow));
            
            if (self.builder.cardview && self.builder.cardview.$cardviewPosition == "inline") {
                if (self.quickFilterRecord) {
                    self.quickFilterRecord.appendEmptyCell();
                }
                self.orderCols.push(self.appendCardViewCol(self.titleRow));
            }
            
            if (list.recordSelector.appendToTitle) {
                if (self.quickFilterRecord) {
                    self.quickFilterRecord.appendFlagCell();
                }
                self.orderCols.push(self.appendRecordSelectorCol(self.titleRow));
            }
            list.parseItems(function($item, $field){
                self.orderCols.push(self.appendFieldCol(self.titleRow, $item, $field));
                if (self.quickFilterRecord) {
                    self.quickFilterRecord.appendFieldCell($item, $field);
                }
            });
            
            /*   var topBarRow = document.createElement("tr");
             var td = topBarRow.appendChild(document.createElement("td"));
             td.setAttribute("colspan", self.orderCols.length);
             td.appendChild(list.$$topbar[0]);
             self._thead.insertBefore(topBarRow, self.titleRow);*/
        }
    },
    _showAlphaPager: function(show){
        var self = this;
        if (show) {
            if (!self._alphaPager) {
                self._alphaPager = document.createElement("div");
                self._alphaPager.className = "s-alphapager";
                self.builder.list._topbar.appendChild(self._alphaPager);
                for (var ii = "A".charCodeAt(0), end = "Z".charCodeAt(0); ii <= end; ii++) {
                    var btn = document.createElement("a");
                    btn.className = "s-alphapager-link";
                    $(self._alphaPager.appendChild(btn)).text(String.fromCharCode(ii));
                }
                $(self._alphaPager).delegate(".s-alphapager-link", "click", function(){
                    self.builder.list.fetch({
                        startLetter: $(this).text()
                    });
                    $(self._alphaPager).children(".s-alphapager-link-selected").removeClass("s-alphapager-link-selected");
                    $(this).toggleClass("s-alphapager-link-selected", true);
                    return false;
                });
            }
        }
        if (self._alphaPager) {
            self._alphaPager.style.display = show ? "" : "none";
        }
    },
    dispose: function(){
        if (this.quickFilterRecord) {
            this.builder.list.removeItem(this.quickFilterRecord);
            delete this.quickFilterRecord;
        }
        if (this._alphaPager) {
            $(this._alphaPager).undelegate();
        }
        delete this.builder;
    }
});
