"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawListBuilder = require("syracuse-ui/lib/common/field/collection/rawListBuilder").RawListBuilder;
var ArrayRecord = require('./arrayRecord').ArrayRecord;

function ArrayBuilder(){
}

exports.Builder = helpers.defineClass(ArrayBuilder, RawListBuilder, {
    initialize: function(){
        var self = this;
        self.list.$item.$isQuickDesignerEnabled = false;
        self.list.$item.$isPagerHidden = true;
        self.$capabilities = self.list.$prototype.$capabilities || "insert,append,delete,reorder";
    },
    appendRecord: function(record, $recordIndex, isInsert){
        var record = {
            $uuid: $recordIndex,
            $bindRecord: record
        };
        var recordArticle = (this.list.dataset[record.$uuid] = new ArrayRecord());
        recordArticle.$layoutOptions = this.$layoutOptions;
        recordArticle.loadRecord(this.list, record, $recordIndex, isInsert);
        return recordArticle;
    },
    doCapabilities: function(record, $capability){
        var self = this;
        if (!record.$isDeleted) {
            var $resources = record.getListDataSet();
            switch ($capability) {
                case "delete":
                    record.applyChange({
                        $: {
                            $bindRecord: {
                                $isDisabled: true
                            }
                        }
                    });
                    record.$isDeleted = true;
                    record.$$actions.toggleClass("s-array-record-deleted", true);
                    record.$$item.toggleClass("s-array-record-deleted", true);
                    record._notifyChange($resources.filter(function(item, index){
                        return index != record.$recordIndex;
                    }));
                    break;
                case "insert":
                    var index = record.$recordIndex;
                    $resources.splice(index, 0, null);
                    self.list.dataRows.splice(index, 0, self.appendRecord(null, index, true));
                    self.list.dataRows.forEach(function(row, index){
                        row.$recordIndex = index;
                    });
                    record._notifyChange($resources);
                    break;
            }
        }
    },
    drawBuilder: function(){
        this.list.$skin = this.list.$item.$skin || "s-array";
        
        var div = document.createElement("div");
        div.className = this.list.$skin + "-body";
        this.list._$$body = $(div).appendTo(this.list.$$listSlot);
        
        this.list.applyDesignMetaData(this.list.$item, false);
        this.list.setState(this.list.$field);
        this.list.boxParent.getArticle().bind(this.list, this.list.$item.$bind);
    },
    setDataBind: function($resources, record, metaData){
        var redraw = false;
        var self = this;
        if (metaData) {
            redraw = self.list.applyMetaData(metaData);
        }
        if ($resources !== undefined) {
            self.list.applySettings(record);
            var body = self.list._$$body[0];
            body.style.display = "none";
            if (redraw) {
                self.onRedrawCore();
            }
            self.list.removeRecords();
            if ($resources) {
                $resources.forEach(function(record, $recordIndex){
                    self.list.dataRows.push(self.appendRecord(record, $recordIndex));
                });
            }
            if (self.list.$isEditMode) {
                if (self.list.$prototype.$minItems) {
                    while (self.list.dataRows.length < self.list.$prototype.$minItems) {
                        self.list.dataRows.push(self.appendRecord(null, self.list.dataRows.length));
                    }
                }
                if (self.list.$prototype.$maxItems) {
                    if (self.list.dataRows.length < self.list.$prototype.$maxItems) {
                        self.list.dataRows.push(self.appendRecord(null, self.list.dataRows.length));
                    }
                }
            }
            self.onAfterDataBinding();
            body.style.display = "";
        }
    },
    dispose: function(){
        RawListBuilder.prototype.dispose.call(this);
    }
});
