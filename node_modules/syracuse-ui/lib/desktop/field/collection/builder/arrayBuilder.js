"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawListBuilder = require("syracuse-ui/lib/common/field/collection/rawListBuilder").RawListBuilder;
var ArrayRecord = require('./arrayRecord').ArrayRecord;
function ArrayBuilder(){
}

exports.Builder = helpers.defineClass(ArrayBuilder, RawListBuilder, {
    initialize: function(){
        this.list.$item.$isQuickDesignerEnabled = false;
        this.list.$item.$isPagerHidden = true;
        this.RecordClass = ArrayRecord;
        RawListBuilder.prototype.initialize.call(this);
    },
    appendRecord: function(options){
        options.record = {
            $uuid: options.$recordIndex,
            $singleField: options.record
        };
        options.$prototype = {
            $: {
                $singleField: this.list.$prototype.$item
            }
        };
        return RawListBuilder.prototype.appendRecord.call(this, options);
    },
    
    _notifyChange: function(newDataSet){
        document.controller.notifyChange(this.list.getArticleParent(), this.list.$item.$bind, newDataSet);
    },
    drawBuilder: function(){
        var self = this;
        self.list._topbar.style.display = "none";
        self.list.$skin = self.list.$item.$skin || "s-array";
        self._body = document.createElement("div");
        self._body.className = self.list.$skin + "-body";
        self.list._core.appendChild(self._body);
        
        self.list.applyDesignMetaData(self.list.$item, false);
        self.list.parseCapabilities((self.list.$prototype.$capabilities === undefined ? {
            $capabilities: "insert,append,delete,reorder"
        } : self.list.$prototype).$capabilities);
        self.list.setState(self.list.$field);
        self.list.boxParent.getArticle().bind(self.list, self.list.$item.$bind);
    },
    setDataBind: function($resources, record, metaData){
        var redraw = false;
        var self = this;
        if (metaData) {
            redraw = self.list.applyMetaData(metaData);
        }
        if ($resources !== undefined) {
            self.list.applySettings(record);
            self._body.style.display = "none";
            if (redraw) {
                self.onRedrawCore();
            }
            self.list.removeRecords();
            if ($resources) {
                $resources.forEach(function(record, $recordIndex){
                    self._records.push(self.appendRecord({
                        record: record,
                        $recordIndex: $recordIndex
                    }));
                });
            }
            if (self.list.$isEditMode) {
                if (self.list.$prototype.$minItems) {
                    while (self._records.length < self.list.$prototype.$minItems) {
                        self._records.push(self.appendRecord({
                            $recordIndex: self._records.length
                        }));
                    }
                }
                if (self.list.$prototype.$maxItems && self.list.$capability.append) {
                    if (self._records.length < self.list.$prototype.$maxItems) {
                        self._records.push(self.appendRecord({
                            $recordIndex: self._records.length
                        }));
                    }
                }
            }
            self.onAfterDataBinding();
            self._body.style.display = "";
        }
    },
    dispose: function(){
        if (this.list && this.list.$$item) {
            this.list.$$item.undelegate(".arrayBuilder");
        }
        RawListBuilder.prototype.dispose.call(this);
    }
});
