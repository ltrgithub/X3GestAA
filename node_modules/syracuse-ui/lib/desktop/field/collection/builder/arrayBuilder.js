"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawListBuilder = require("syracuse-ui/lib/common/field/collection/rawListBuilder").RawListBuilder;
var ArrayRecord = require('./arrayRecord').ArrayRecord;
function ArrayBuilder(){
}

exports.Builder = helpers.defineClass(ArrayBuilder, RawListBuilder, {
    initialize: function(){
        this.list.$item.$isQuickDesignerEnabled = false;
        this.list.$item.$isPagerHidden = true;
        this.RecordClass = ArrayRecord;
        RawListBuilder.prototype.initialize.call(this);
    },
    appendRecord: function(options){
        options.record = {
            $uuid: options.$recordIndex,
            $singleField: options.record
        };
        options.$prototype = {
            $: {
                $singleField: this.list.$prototype.$item
            }
        };
        return RawListBuilder.prototype.appendRecord.call(this, options);
    },
    
    _notifyChange: function(newDataSet){
        document.controller.notifyChange(this.list.getArticleParent(), this.list.$item.$bind, newDataSet);
    },
    
    doCapabilities: function(record, $capability){
        var self = this;
        if (!record.$isDeleted) {
            var $resources = self.getListDataSet();
            switch ($capability) {
                case "delete":
                    /*record.applyChange({
                 $: {
                 $singleField: {
                 $isDisabled: true
                 }
                 }
                 });
                 record.$isDeleted = true;
                 document.site.toggleClass(record._capabilities.slot, "s-array-record-deleted", true);
                 record.$$item.toggleClass("s-array-record-deleted", true);
                 */
                    self._notifyChange($resources.filter(function(item, index){
                        return index != record.$recordIndex;
                    }));
                    $resources.splice(record.$recordIndex, 1);
                    self._records.splice(record.$recordIndex, 1);
                    self.list.removeItem(record, true);
                    self._records.forEach(function(record, index){
                        record.$recordIndex = index;
                    });
                    break;
                case "insert":
                    var index = record.$recordIndex;
                    $resources.splice(index, 0, null);
                    self._records.splice(index, 0, self.appendRecord({
                        $recordIndex: index,
                        isInsert: true
                    }));
                    self._records.forEach(function(record, index){
                        record.$recordIndex = index;
                    });
                    // record._notifyChange($resources);
                    break;
            }
        }
    },
    drawBuilder: function(){
    
        this.list.$skin = this.list.$item.$skin || "s-array";
        this._body = document.createElement("div");
        this._body.className = this.list.$skin + "-body";
        this.list._core.appendChild(this._body);
        
        this.list.applyDesignMetaData(this.list.$item, false);
        this.list.applyMetaData(this.list.$prototype.$capabilities === undefined ? {
            $capabilities: "insert,append,delete,reorder"
        } : this.list.$prototype);
        this.list.setState(this.list.$field);
        this.list.boxParent.getArticle().bind(this.list, this.list.$item.$bind);
    },
    
    setDataBind: function($resources, record, metaData){
        var redraw = false;
        var self = this;
        if (metaData) {
            redraw = self.list.applyMetaData(metaData);
        }
        if ($resources !== undefined) {
            self.list.applySettings(record);
            self._body.style.display = "none";
            if (redraw) {
                self.onRedrawCore();
            }
            self.list.removeRecords();
            if ($resources) {
                $resources.forEach(function(record, $recordIndex){
                    self._records.push(self.appendRecord({
                        record: record,
                        $recordIndex: $recordIndex
                    }));
                });
            }
            if (self.list.$isEditMode) {
                if (self.list.$prototype.$minItems) {
                    while (self._records.length < self.list.$prototype.$minItems) {
                        self._records.push(self.appendRecord({
                            $recordIndex: self._records.length
                        }));
                    }
                }
                if (self.list.$prototype.$maxItems && self.list.$capability.append) {
                    if (self._records.length < self.list.$prototype.$maxItems) {
                        self._records.push(self.appendRecord({
                            $recordIndex: self._records.length
                        }));
                    }
                }
            }
            self.onAfterDataBinding();
            self._body.style.display = "";
        }
    },
    dispose: function(){
        RawListBuilder.prototype.dispose.call(this);
    }
});
