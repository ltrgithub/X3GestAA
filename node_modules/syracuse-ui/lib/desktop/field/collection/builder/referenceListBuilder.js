"use strict";
var helpers = require('syracuse-core/lib/helpers');
var localize = require('syracuse-ui/lib/common/controller/localize').list;
var ReferenceRecord = require('./referenceRecord').ReferenceRecord;
var RawListBuilder = require("syracuse-ui/lib/common/field/collection/rawListBuilder").RawListBuilder;

function ReferenceListBuilder(){
}

exports.Builder = helpers.defineClass(ReferenceListBuilder, RawListBuilder, {
    initialize: function(){
        this.list.$item.$isQuickDesignerEnabled = false;
        this.list.$item.$isPagerHidden = true;
        this.list.$item.$selectMode = "multi";
        this.list.RecordClass = ReferenceRecord;
    },
    drawBuilder: function(){
        this.list.$skin = this.list.$item.$skin || "s-references";

        var div = document.createElement("div");
        div.className = this.list.$skin + "-body";
        this.list._$$body = $(div).appendTo(this.list.$$listSlot);
        this.list.appendSelector();
        
        this.list.applyDesignMetaData(this.list.$item, false);
        this.list.boxParent.getArticle().bind(this.list, this.list.$item.$bind);
        
        if (this.list.$isEditMode) {
            this._addMenus();
        }
    },
    _addMenus: function(){
        var self = this;
        self.list._menus.addMenuItem({
            $bind: "$linkRecords",
            $title: localize.link,
            $category: "link"
        }).onMenuClick = function(){
            self.list.currentSelection = null;
            document.controller.loadRepresentation(self.list, (self.list.$prototype.$item.$thumb || self.list.$prototype.$item).$links.$select.$url, function($itemPage){
                $itemPage.$$container = $(document.createElement("div"));
                $itemPage.$displayTarget = "modal";
                self.lookupPage = document.itemFactory.loadPage($itemPage);
                self.lookupPage.appendOkButton();
                self.lookupPage.onClose = function(){
                    self.lookupPage.$$container.remove();
                    document.controller.disposeObject(self.lookupPage);
                    self.lookupPage = null;
                    return false;
                };
                self.lookupPage.onSelectRecord = function(selectedRecords){
                    self.list.currentSelection = selectedRecords;
                }, self.lookupPage.onValidate = function(page){
                    var $index = Object.keys(self.list.dataset).length;
                    if (self.list.currentSelection) {
                        var records = Object.keys(self.list.currentSelection).map(function($uuid){
                            return {
                                $uuid: $uuid,
                                $index: ++$index
                            };
                        });
                        if (records.length > 0) {
                            document.controller.notifyChange(self.list.getArticleParent(), self.list.$item.$bind, records);
                        }
                    }
                    self.lookupPage.onClose();
                    return false;
                };
            });
            return false;
        };
    }
});
