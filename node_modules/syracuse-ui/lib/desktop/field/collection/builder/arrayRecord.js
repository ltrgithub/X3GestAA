"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;

function ArrayRecord(){
}

exports.ArrayRecord = helpers.defineClass(ArrayRecord, Article, {
    loadRecord: function(list, record, $recordIndex){
        this.$recordUuid = record.$uuid;
        this.$recordIndex = $recordIndex;
        this.$facet = list.$recordFacet;
        this.$isEditMode = list.$isEditMode;
        this.$prototype = {
            $: {
                $bindRecord: list.$prototype.$item
            }
        };
        document.itemFactory.initializeItem(this, {}, list);
        this.loadBox(record);
    },
    getListDataSet: function(){
        return this.boxParent.getArticleParent().dataset[this.boxParent.$item.$bind];
    },
    onNotifyRecordChange: function(value, binding){
        var dataset = this.getListDataSet();
        dataset[this.$recordIndex] = value;
        this._notifyChange(dataset);
        return null;
    },
    _notifyChange: function(newDataSet){
        document.controller.notifyChange(this.boxParent.getArticleParent(), this.boxParent.$item.$bind, newDataSet);
    },
    remove: function(){
        this.$$item.remove();
    },
    drawBox: function(){
        var self = this;
        var list = self.boxParent;
        var div = document.createElement("div");
        div.className = list.$skin + "-record " + list.$recordCss;
        div.setAttribute("data-s-record", self.$recordIndex);
        self.$$item = $(div);
        
        var div = document.createElement("div");
        div.className = list.$skin + "-record-data";
        var $$data = $(div).appendTo(self.$$item);
        if (this.$isEditMode) {
            var btn = document.createElement("a");
            btn.className = list.$skin + "-record-del";
            self.$$del = $(btn).appendTo(self.$$item).bind("click", function(){
                var $resources = self.getListDataSet();
                self._notifyChange($resources.filter(function(item, index){
                    return index != self.$recordIndex;
                }));
                return false;
            });
        }
        document.itemFactory.load($$data, {
            $isTitleRowHidden: true,
            $bind: "$bindRecord",
            $isEditMode: self.$isEditMode,
            $skin: "s-array-item",
            $inplace: true
        }, this);
        self.$$item.appendTo(list._$$body);
    },
    dispose: function(){
        if (this.$$del) {
            this.$$del.unbind();
        }
        delete this.menus;
        Article.prototype.dispose.call(this);
    }
});
