"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("./recordArticle").RecordArticle;

function ArrayRecord(){
}

exports.ArrayRecord = helpers.defineClass(ArrayRecord, RecordArticle, {
    onNotifyRecordChange: function(value, binding){
        var self = this;
        if (binding == "$actions") {
            var builder = self.builder;
            if (!self.$isDisabled) {
                if (!self.$isDeleted) {
                    var $resources = builder.getListDataSet();
                    if (value.$delete) {
                        /*self.applyChange({
                         $properties: {
                         $singleField: {
                         $isDisabled: true
                         }
                         }
                         });
                         self.$isDeleted = true;
                         document.site.toggleClass(record._capabilities.slot, "s-array-record-deleted", true);
                         self.$$item.toggleClass("s-array-record-deleted", true);
                         */
                        builder._notifyChange($resources.filter(function(item, index){
                            return index != self.$recordIndex;
                        }));
                        $resources.splice(self.$recordIndex, 1);
                        builder._records.splice(self.$recordIndex, 1);
                        builder.list.removeItem(self, true);
                        builder._records.forEach(function(record, index){
                            record.$recordIndex = index;
                        });
                    }
                    if (value.$create) {
                        var index = self.$recordIndex;
                        $resources.splice(index, 0, null);
                        builder._records.splice(index, 0, builder.appendRecord({
                            $recordIndex: index,
                            isInsert: true
                        }));
                        builder._records.forEach(function(record, index){
                            record.$recordIndex = index;
                        });
                        // record._notifyChange($resources);
                    }
                    
                }
            }
            return null; //cancel notify
        }
        else {
            var dataset = this.builder.getListDataSet();
            dataset[this.$recordIndex] = value;
            this.builder._notifyChange(dataset);
        }
        return null;
    },
    notifyReorder: function(targetRecord, $insert){
        this.$$item[$insert](targetRecord.$$item);
        var $resources = this.builder._records.map(function(record){
            return record.boundFields.$singleField[0].getDataValue();
        });
        this.builder._notifyChange(this.builder.list.getArticleParent().dataset[this.list.$item.$bind] = $resources);
    },
    applyMetaData: function(metaData){
        if (metaData) {
            var field = this.boundFields.$singleField[0];
            field.applyMetaData(metaData);
            if (metaData.$diagnoses && field.$$diagnose) {
                field.$$diagnose.appendTo(this.$$item);
            }
        }
    },
    remove: function(){
        this.$$item.remove();
    },
    drawBox: function(){
        var item = document.createElement("div");
        item.className = "s-array-record-item";
        item.setAttribute("data-s-record", this.$recordIndex);
        this.$$item = $(item);
        
        var recordValue = document.createElement("div");
        recordValue.className = "s-array-record-value";
        this.$$value = $(item.appendChild(recordValue));
        
        var div = document.createElement("div");
        div.className = "s-array-record-data";
        var $$data = $(recordValue.appendChild(div));
        
        if (this.$isEditMode) {
            var toolbar = document.createElement("div");
            toolbar.className = this.list.$skin + "-toolbar";
            item.insertBefore(toolbar, recordValue);
            if (this.list.$capability.reorder) {
                var dom = document.createElement("div");
                dom.className = this.list.$skin + "-row-index";
                var btn = document.createElement("a");
                toolbar.appendChild(dom).appendChild(btn).className = "s-array-record-reorder s-list-record-reorder";
                if (this.list.$isDisabled) {
                    document.site.disableItem(btn, this.list.$isDisabled);
                }
            }
            this._contextMenusSlot = document.createElement("div");
            this._contextMenusSlot.className = this.list.$skin + "-actions-cell";
            toolbar.appendChild(this._contextMenusSlot);
            
            item.className += "-edit";
            recordValue.className += "-edit";
            var metaData = {
                $actions: {}
            };
            if (this.list.$capability.insert) {
                metaData.$actions.$create = {
                    $title: "Insert"
                };
            }
            if (this.list.$capability["delete"]) {
                metaData.$actions.$delete = {
                    $title: "Delete"
                };
            }
            this.applyChange(metaData);
        }
        document.itemFactory.load($$data, {
            $isTitleRowHidden: true,
            $bind: "$singleField",
            $isEditMode: this.$isEditMode,
            // $skin: "s-array-item",
            $inplace: true
        }, this);
        if (this.isInsert) {
            this.$$item.insertBefore(this.builder._records[this.$recordIndex].$$item);
            delete this.isInsert;
        }
        else {
            this.builder._body.appendChild(item);
        }
    }
});
