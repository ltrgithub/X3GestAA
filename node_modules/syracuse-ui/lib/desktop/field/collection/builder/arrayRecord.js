"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RecordArticle = require("./recordArticle").RecordArticle;

function ArrayRecord(){
}

exports.ArrayRecord = helpers.defineClass(ArrayRecord, RecordArticle, {
    onInputFocusin: function(){
        this.setCapabilitiesVisible(true);
    },
    onInputFocusout: function(){
        this.setCapabilitiesVisible(false);
    },
    applyMetaData: function(metaData){
        if (metaData) {
            var field = this.boundFields.$singleField[0];
            field.applyMetaData(metaData);
            if (metaData.$diagnoses && field.$$diagnose) {
                field.$$diagnose.appendTo(this.$$item);
            }
        }
    },
    onNotifyRecordChange: function(value, binding){
        var dataset = this.builder.getListDataSet();
        dataset[this.$recordIndex] = value;
        this.builder._notifyChange(dataset);
        return null;
    },
    remove: function(){
        this.$$item.remove();
    },
    appendCapabilitiesSlot: function(){
        RecordArticle.prototype.appendCapabilitiesSlot.call(this);
        $(this._capabilities.slot).prependTo(this.$$value);
    },
    drawBox: function(){
        var recordItem = document.createElement("div");
        recordItem.className = this.list.$skin + "-record-item";
        recordItem.setAttribute("data-s-record", this.$recordIndex);
        this.$$item = $(recordItem);
        
        var recordValue = document.createElement("div");
        recordValue.className = this.list.$skin + "-record-value";
        this.$$value = $(recordValue).appendTo(this.$$item);
        
        var div = document.createElement("div");
        div.className = this.list.$skin + "-record-data";
        var $$data = $(div).appendTo(this.$$value);
        if (this.$isEditMode) {
            recordItem.className += "-edit";
            recordValue.className += "-edit";
            this.appendCapabilities();
        }
        document.itemFactory.load($$data, {
            $isTitleRowHidden: true,
            $bind: "$singleField",
            $isEditMode: this.$isEditMode,
            // $skin: "s-array-item",
            $inplace: true
        }, this);
        if (this.isInsert) {
            this.$$item.insertBefore(this.list._records[this.$recordIndex].$$item);
            delete this.isInsert;
        }
        else {
            this.list._body.appendChild(recordItem);
        }
    }
});
