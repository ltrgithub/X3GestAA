"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;

function RecordArticle(){
}

exports.RecordArticle = helpers.defineClass(RecordArticle, Article, {

    setCapabilitiesVisible: function(isVisible){
        if (!this.list.$isDisabled && this._capabilities) {
            document.site.toggleClass(this._capabilities.slot, "s-hover", isVisible);
        }
    },
    appendCapabilitiesSlot: function(){
        this._capabilities = {
            slot: document.createElement("div")
        };
        this._capabilities.slot.className = this.list.$skin + "-record-actions";
    },
    setState: function(state){
        if (this._capabilities) {
            Object.keys(this._capabilities).forEach(function(capability){
                document.site.disableItem(this._capabilities[capability], state.$isDisabled);
            });
        }
    },
    appendCapabilities: function($$container){
        if (this._capabilities) {
            document.site.removeDomChild(this._capabilities.slot);
            delete this._capabilities;
        }
        if (this.list.$capability.reorder) {
            this._appendCapability("reorder");
        }
        if (this.list.$capability.insert) {
            this._appendCapability("insert");
        }
        if (this.list.$capability["delete"]) {
            this._appendCapability("delete");
        }
    },
    _appendCapability: function($capability){
        if (!this._capabilities) {
            this.appendCapabilitiesSlot();
        }
        var btn = this._capabilities[$capability] = document.createElement("a");
        btn.className = this.list.$skin + "-record-" + $capability;
        btn.setAttribute("data-s-capability", $capability);
        if (this.list.$isDisabled) {
            document.site.disableItem(btn, this.list.$isDisabled);
        }
        this._capabilities.slot.appendChild(btn);
        return btn;
    },
    _loadMenu: function(slot){
        this.menus = document.itemFactory.load($(slot), {
            $category: "links",
            $skin: this.builder.$layoutOptions.recordMenus
            /*,
             $isBindDisabled: true,
             $links: {},
             $actions: {}*/
        }, this);
    },
    applyMetaData: function(metaData){
    },
    dispose: function(){
        delete this.list
        delete this.builder;
        delete this.menus;
        Article.prototype.dispose.call(this);
    }
});
