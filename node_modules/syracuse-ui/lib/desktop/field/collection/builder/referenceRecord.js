"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;

function ReferenceRecord(){
}

exports.ReferenceRecord = helpers.defineClass(ReferenceRecord, Article, {
    remove: function(){
        this.$$item.remove();
    },
    applyMetaData: function(metaData){
    },
    drawBox: function(){
        var self = this;
        var domItem = document.createElement("div");
        domItem.className = self.boxParent.$skin + "-record " + self.boxParent.$recordCss;
        domItem.setAttribute("data-s-record", self.$recordUuid);
        self.$$item = $(domItem);
        
        var div = document.createElement("div");
        div.className = self.boxParent.$skin + "-record-data";
        var $$data = $(domItem.appendChild(div));
        if (this.$isEditMode) {
            var btn = document.createElement("a");
            btn.className = self.boxParent.$skin + "-record-del";
            self.$$del = $(domItem.appendChild(btn)).bind("click", function(){
                document.controller.notifyChange(self.boxParent.getArticleParent(), self.boxParent.$item.$bind, [{
                    $uuid: self.$recordUuid,
                    $index: self.$recordIndex,
                    $isDeleted: true
                }]);
                return false;
            });
        }
        document.itemFactory.load($$data, {
            $isTitleRowHidden: true,
            $bind: "$singleField",
            $isEditMode: false,
            $skin: "s-references-item",
            $inplace: true
        }, this);
        self.boxParent._body.appendChild(domItem);
    },
    dispose: function(){
        if (this.$$del) {
            this.$$del.unbind();
        }
        delete this.list
        delete this.builder;
        delete this.menus;
        Article.prototype.dispose.call(this);
    }
});
