"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var QuickFilterCell = require('./quickFilterCell').QuickFilterCell;

function QuickFilterRecord(){
}

exports.QuickFilterRecord = helpers.defineClass(QuickFilterRecord, Article, {
    loadRecord: function(list){
        this.$facet = "$filter";
        this.$isEditMode = true;
        this.$prototype = list.$prototype.$item;
        // FDB - $localization is needed for placeholder attribute...
        this.$prototype.$localization = list.getPage().$prototype.$localization;
        document.itemFactory.initializeItem(this, {
            $layout: {
                $items: list.$item.$layout.$items
            }
        }, list);
        this.loadBox();
    },
    _appendCell: function(slot){
        var td = document.createElement("td");
        td.className = "s-q-filter-cell";
        return slot.appendChild(td);
    },
    appendEmptyCell: function(){
        this._appendCell(this.$$item[0]);
    },
    appendFieldCell: function($item, $field){
        var slot = this.boxParent.$item.$format == "vgrid" ? this.boxParent.builder.table.cols[$item.$bind].slot : this.$$item[0];
        var td = this._appendCell(slot);
        if ($field.$capability.filter) {
            var div = document.createElement("div");
            div.className = "s-q-filter-cont";
            (this._filters[$item.$bind] = new QuickFilterCell()).render(this, $(td.appendChild(div)), $field, $item.$bind);
        }
    },
    drawBox: function(){
        var self = this;
        var list = self.boxParent;
        var item;
        self._filters = {};
        if (self.boxParent.$item.$format == "vgrid") {
            if (list.recordSelector.appendToRecord) {
                var div = document.createElement("div");
                div.className = "s-q-filter-flag";
                self._appendCell(list.builder.vgridRows[list.builder.$rowSelector]).appendChild(div);
            }            
            /*var cell = document.createElement("td");
             cell.className = "s-q-filter-cell";
             list.builder.vgridRows[list.builder.$rowMenu].appendChild(cell);
             */
        }
        else {
            if (self.$$item) {
                item = self.$$item.empty()[0];
            }
            else {
                item = document.createElement("tr");
                list.builder.table._thead.appendChild(item);
                self.$$item = $(list.builder.table._thead.appendChild(item));
            }
            if (list.recordSelector.appendToRecord) {
                var div = document.createElement("div");
                div.className = list.$skin + "-quick-flag";
                self._appendCell(item).appendChild(div);
            }
        }
    },
    _buildFilter: function(){
        var self = this;
        var values = [];
        var params = {};
        Object.keys(self._filters).forEach(function($bind){
            var value = self._filters[$bind].getValue();
            if (value) {
                values.push(value);
            }
        });
        params.filter = values.join(" and ");
        this.boxParent.fetch(params);
    },
    onNotifyRecordChange: function(value, $bind){
        this.dataset[$bind] = value;
        var filter = this._filters[$bind];
        if (value == null || value == "") {
            if (filter && filter.operator !== "none") {
                if (filter.operator == "between") {
                    var field = this.record.boundFields[filter.$bind][0];
                    var fieldHigh = this.record.boundFields[filter.$bind + "$High"][0];
                    if (field.currentValue == fieldHigh.currentValue) {
                        filter.setOperator("none");
                    }
                }
                else {
                    filter.setOperator("none");
                }
            }
        }
        else {
            if (filter) {
                //for high this._filters[$bind] is not defined
                filter.ensureEqual();
            }
        }
        this._buildFilter();
        return null;
    },
    dispose: function(){
        var self = this;
        if (self._filters) {
            Object.keys(self._filters).forEach(function($bind){
                document.controller.disposeObject(self._filters[$bind]);
            });
            delete self._filters;
        }
        Article.prototype.dispose.call(this);
    },
    // FDB 
    fusionGetInputValues: function(){
        var self = this;
        var res = [];
        Object.keys(self._filters).forEach(function($bind){
            res.push(self._filters[$bind].fusionGetInputValue() || "");
        });
        return res;
    }
});
