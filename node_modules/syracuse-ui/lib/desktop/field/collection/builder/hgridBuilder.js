"use strict";
var helpers = require('syracuse-core/lib/helpers');
var HGridRecord = require('./hgridRecord').HGridRecord;
var RawListBuilder = require("syracuse-ui/lib/common/field/collection/rawListBuilder").RawListBuilder;
var GridCardViewDecorator = require("./gridCardViewDecorator").GridCardViewDecorator;

function HGridBuilder(){
}

exports.Builder = helpers.defineClass(HGridBuilder, RawListBuilder, {
    initialize: function(){
        this.$defaultSkin = "s-grid";
        this.RecordClass = HGridRecord;
        this.list.recordSelector = "tr[data-s-record]";
    },
    applyDesignMetaData: function(metadata, onAuthoring){
        if (onAuthoring) {
            if (metadata.$isRowIndexVisible !== undefined) {
                this.list.$item.$isRowIndexVisible = metadata.$isRowIndexVisible;
                this.list.reloadBuilder();
            }
            if (metadata.$graphMode !== undefined) {
                this.toggleDataList(metadata.$graphMode != "graph");
            }
            if (metadata.$cardviewWidth !== undefined) {
                this.list.$item.$cardviewWidth = metadata.$cardviewWidth;
            }
            if (metadata.$cardview !== undefined || metadata.$cardviewPosition !== undefined) {
                if (metadata.$cardview !== undefined) {
                    this.list.$item.$cardview = metadata.$cardview;
                }
                if (metadata.$cardviewPosition !== undefined) {
                    this.list.$item.$cardviewPosition = metadata.$cardviewPosition;
                }
                if (this.cardview) {
                    this.cardview.release();
                }
                this.list.reloadBuilder();
            }
            if (metadata.$cardviewWidth !== undefined) {
                if (this.cardview) {
                    this.cardview._cardSlot.style.width = this.list.$item.$cardviewWidth + "%";
                }
            }
        }
    },
    _bindSort: function(){
        var self = this;
        self.list.$$item.delegate("a[data-s-sort]", "click", function(){
            var $bind = $(this).attr("data-s-sort");
            var $newOrderBy = [], found;
            if (self.list.$orderBy) {
                self.list.$orderBy.forEach(function($orderItem){
                    if ($orderItem.binding == $bind) {
                        found = true;
                        if ($orderItem.$step != 2) {
                            $orderItem.$step = ($orderItem.$step || 0) + 1;
                            if (!$orderItem.descending) {
                                $orderItem.descending = true;
                            }
                            $newOrderBy.push($orderItem);
                        }
                    }
                    else {
                        $newOrderBy.push($orderItem);
                    }
                });
            }
            if (!found) {
                $newOrderBy.push({
                    binding: $bind,
                    descending: false,
                    $step: 1
                });
            }
            self.list.fetch($newOrderBy ? {
                orderBy: $newOrderBy
            } : null);
            return false;
        });
    },
    renderOrderBy: function(){
        var self = this;
        delete self.list.alphaTabBind;
        if (self.list.$$orderedLinks) {
            self.list.$$orderedLinks.forEach(function($$orderedLink){
                $$orderedLink.removeClass("s-grid-sort-asc s-grid-sort-desc");
            });
            delete self.list.$$orderedLinks;
        }
        if (self.list.$orderBy) {
            self.list.$$orderedLinks = [];
            self.list.$orderBy.forEach(function(field, index){
                if (index == 0) {
                    if (self.list.$fields[field.binding].$capability.alphaTab) {
                        self.list.alphaTabBind = field.binding;
                    }
                }
                self.list.$$orderedLinks.push(self.$$titleRow.find("a[data-s-sort=" + field.binding + "]").removeClass("s-grid-sort-asc s-grid-sort-desc").addClass(field.descending ? "s-grid-sort-desc" : "s-grid-sort-asc"));
            });
        }
        self.showAlphaPager(self.list.alphaTabBind);
    },
    showAlphaPager: function(show){
        var self = this;
        if (show) {
            if (!self._alphaPager) {
                self._alphaPager = document.createElement("div");
                self._alphaPager.className = "s-alphapager";
                self.list.appendToCoreLeft(self._alphaPager);
                for (var ii = "A".charCodeAt(0), end = "Z".charCodeAt(0); ii <= end; ii++) {
                    var btn = document.createElement("a");
                    btn.className = "s-alphapager-link";
                    $(self._alphaPager.appendChild(btn)).text(String.fromCharCode(ii));
                }
                $(self._alphaPager).delegate(".s-alphapager-link", "click", function(){
                    self.list.fetch({
                        startLetter: $(this).text()
                    });
                    $(self._alphaPager).children(".s-alphapager-link-selected").removeClass("s-alphapager-link-selected");
                    $(this).toggleClass("s-alphapager-link-selected", true);
                    return false;
                });
            }
        }
        if (self._alphaPager) {
            self._alphaPager.style.visibility = show ? "visible" : "hidden";
        }
    },
    makeColGroup: function(){
        var self = this;
        self.colgroup = {};
        var width = 0;
        self.colgroup.$capabilities = self._tableColgroup.appendChild(document.createElement("col"));
        if (self.list.$capability) {
            ["reorder", "insert", "delete"].forEach(function($capability){
                if (self.list.$capability[$capability]) {
                    width += 20;
                }
            });
        }
        if (!self.list.$item.$isMenuRecordHidden) {
            width += 20;
        }
        var style = self.colgroup.$capabilities.style;
        if (width > 0) {
            style.width = width + "px";
            style.display = "";
        }
        else {
            style.display = "none";
        }
        if (self.cardview) {
            var col = self.cardview.onMakeColGroup();
            if (col) {
                self.colgroup.$cardView = self._tableColgroup.appendChild(col);
            }
        }
        if (self.list.recordSelector.hasColumn) {
            self.colgroup.$recordSelector = self._tableColgroup.appendChild(document.createElement("col"));
        }
        if (self.list.$item.$isRowIndexVisible) {
            self.colgroup.$rowIndex = self._tableColgroup.appendChild(document.createElement("col"));
        }
		var lastCol;
        self.list.parseItems(function($item, $field){
            var col = lastCol = self.colgroup[$item.$bind] = self._tableColgroup.appendChild(document.createElement("col"));
            var width = $item.$width || $field.$width;
            if (width) {
                col.style.width = width;
            }
            else {
				//var $width = document.site.getFieldWidth();
				/*if($width.$width){
					
				}*/
                col.style.width =  "150px";
            }
            col.setAttribute("data-s-bind", $item.$bind);
        });
    },
    makeTitleRow: function(){
        var self = this;
        var isNew, titleRow;
        if (self.$$titleRow) {
            titleRow = self.$$titleRow.empty()[0];
        }
        else {
            isNew = true;
            self.$$titleRow = $(titleRow = document.createElement("tr"));
        }
        self.thCapabilities = document.createElement("th");
        self.thCapabilities.className = self.gridCss.title;
        titleRow.appendChild(self.thCapabilities);
        if (self.cardview) {
            self.cardview.onMakeTitleRow();
        }
        if (self.list.recordSelector.hasColumn) {
            var th = document.createElement("th");
            th.className = self.gridCss.title + " " + self.list.$skin + self.list.recordSelector.titleCss;
            $(titleRow.appendChild(th)).append(self.list.recordSelector.title);
        }
        if (self.list.$item.$isRowIndexVisible) {
            var td = document.createElement("td");
            td.className = self.gridCss.title + " " + self.gridCss.rowIndex;
            titleRow.appendChild(td);
        }
        self.$$titleCells = {};
        var cssLink = self.list.$skin + "-title-link";
        self.list.parseItems(function($item, $field){
            var title;
            if ($field.$capability.sort) {
                title = document.createElement("a");
                title.className = cssLink;
                title.setAttribute("data-s-sort", $item.$bind);
            }
            else {
                title = document.createElement("div");
            }
            $(title).text(self.list.getLocalizedTitle($field.$title || ""));
            var th = document.createElement("th");
            th.className = self.gridCss.title;
            th.appendChild(title);
            self.$$titleCells[$item.$bind] = $(titleRow.appendChild(th));
        });
        if (isNew) {
            self.list._header.appendChild(titleRow);
        }
    },
    drawOrientation: function(){
        var $item = this.list.$item;
        if ($item.$alternateStyle) {
            this.$alternateStyle = this.list.$skin + "-alt";
        }
        this.$columnsCount = $item.$layout.$items.length + 1; //+1 for capabilities
        if (this.cardview) {
            this.cardview.onDrawOrientation();
        }
        if (this.list.recordSelector.hasColumn) {
            this.$columnsCount++;
        }
        if ($item.$isRowIndexVisible) {
            this.$columnsCount++;
        }
    },
    toggleDataList: function(show){
        if (this._table) {
            this._table.style.display = show ? "" : "none";
        }
        else {
            this._drawDataList();
        }
    },
    _drawDataList: function(){
        this._table = document.createElement("table");
        this._table.style.display = "none";
        this._table.className = this.list.$skin;
        this._table.setAttribute("cellspacing", "0");
        this._table.setAttribute("cellpadding", "0");
        this._table.appendChild(this._tableColgroup = document.createElement("colgroup"));
        this.list._$$header = $(this.list._header = this._table.appendChild(document.createElement("thead")));
        this.list._body = this._table.appendChild(document.createElement("tbody"));
        (this.list._tableSlot || this.list._listSlot).appendChild(this._table);
        
        this.list.appendSelector();
        this.drawOrientation();
        //this.makeColGroup();
        
        if (!this.list.$item.$isTitleRowHidden) {
            this.makeTitleRow();
        }
        this.list.appendQuickFilter();
        this._bindSort();
    },
    ensureCardView: function(){
        var self = this
        var $collectionBinds = [];
        if (!self.list.$item.$cardview) {
            self.list.parseItems(function($item, $field){
                if ($field && $field.$type == "application/x-collection") {
                    if (!$field.$isHidden) {
                        if (self.list.$item.$cardview) {
                            $field.$isHidden = true;
                        }
                        else {
                            $collectionBinds.push($item.$bind);
                        }
                    }
                }
            });
            if ($collectionBinds.length > 0) {
                self.list.$item.$layout.$items = self.list.$item.$layout.$items.filter(function($item){
                    return $collectionBinds.indexOf($item.$bind) < 0;
                });
                self.list.$item.$cardview = {
                    $layout: {
                        $layoutType: "tabs",
                        $items: $collectionBinds.map(function($bind){
                            return {
                                $category: "section",
                                $title: self.list.$fields[$bind].$title,
                                $layout: {
                                    $items: [{
                                        $bind: $bind,
                                        $isTitleHidden: true
                                    }]
                                }
                            
                            };
                        })
                    }
                };
            }
        }
        if (self.list.$item.$cardview) {
            self.cardview = new GridCardViewDecorator();
            self.cardview.initialize(self);
        }
    },
    
    drawBuilder: function(){
        var self = this;
        var list = this.list;
        list.$$list[0].style.overflow = "auto";
        var $skin = list.$skin = list.$item.$skin || this.$defaultSkin;
        this.gridCss = {
            title: $skin + "-title-cell",
            cell: $skin + "-cell",
            rowIndex: $skin + "-cell " + $skin + "-row-index"
        };
        
        self.ensureCardView();
        
        list.$item.$width = list.$item.$width || "100%";
        
        list.applyDesignMetaData(list.$item, false);
        list.setState(list.$field);
        
        this._drawDataList();
        this.list.applyCapabilities(this.list.$prototype.$capabilities === undefined ? {
            $capabilities: "insert,append,delete,reorder"
            //$capabilities: ""
        } : this.list.$prototype);
        this.makeColGroup();
        list.boxParent.getArticle().bind(list, list.$item.$bind);
        this._table.style.display = "";
    },
    onAfterDataBinding: function(){
        RawListBuilder.prototype.onAfterDataBinding.call(this);
        if (this.cardview) {
            this.cardview.onAfterDataBinding();
        }
    },
    
    onRedrawCore: function(){
        this.drawOrientation();
        if (!this.list.$item.$isTitleRowHidden) {
            this.makeTitleRow();
        }
        if (this.list.quickFilterBox) {
            this.list.quickFilterBox.drawBox();
        }
    },
    
    appendNoRecordRow: function(){
        var emptyRow = document.createElment("tr");
        $(emptyRow).append($("<td/>").attr("colspan", this.$columnsCount).append(this.list.appendEmptyInfo()));
        this.list._body.appendChild(emptyRow);
    },
    dispose: function(){
        if (this._alphaPager) {
            $(this._alphaPager).undelegate();
        }
        RawListBuilder.prototype.dispose.call(this);
    }
});
