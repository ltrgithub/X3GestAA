"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawListBuilder = require("syracuse-ui/lib/common/field/collection/rawListBuilder").RawListBuilder;
var GridCardViewDecorator = require("./gridCardViewDecorator").GridCardViewDecorator;
var Table = require("./table").Table;

var HGridRecord = require('./hgridRecord').HGridRecord;


function HGridBuilder(){
}

exports.Builder = helpers.defineClass(HGridBuilder, RawListBuilder, {
    initialize: function(){
        this.$defaultSkin = "s-" + this.list.$item.$format;
        this.RecordClass = HGridRecord;
        this.list.$item.$isTopLabelAlignment = true;
        // this.list.recordSelector = "tr[data-s-record]";
    },
    emptyDataBody: function(){
        var self = this;
        if (self.list.$item.$format == "vgrid") {
            Object.keys(self.table.cols).forEach(function($bind){
                var col = self.table.cols[$bind];
                var children = $(col.slot).children();
                var dataColsCount = children.length - self.table.headerColsCount;
                if (dataColsCount) {
                    children.slice(dataColsCount).remove();
                }
            });
        }
        else {
            RawListBuilder.prototype.emptyDataBody.call(self);
        }
    },
    appendNoRecordRow: function(){
        var div = document.createElement("div");
        div.className = this.$skin + "-no-record";
        $(div).text(localize.noRecords);
        var slot;
        if (this.$format == "vgrid") {
            var $$rows = $(this.list._body).children();
            slot = document.createElment("td");
            slot.setAttribute("rowspan", $$rows.length);
            $($$rows[0]).append(slot);
        }
        else {
            slot = document.createElment("td");
            slot.setAttribute("colspan", this.table.orderCols.length);
            this.list._body.appendChild(document.createElment("tr")).appendChild(slot);
        }
        slot.apppendChild(div);
    },
    applyDesignMetaData: function(metadata, onAuthoring){
        if (onAuthoring) {
            if (metadata.$isRowIndexVisible !== undefined) {
                this.list.$item.$isRowIndexVisible = metadata.$isRowIndexVisible;
                this.list.reloadBuilder();
            }
            if (metadata.$graphMode !== undefined) {
                this.toggleDataList(metadata.$graphMode != "graph");
            }
            if (metadata.$cardviewWidth !== undefined) {
                this.list.$item.$cardviewWidth = metadata.$cardviewWidth;
            }
            if (metadata.$cardview !== undefined || metadata.$cardviewPosition !== undefined) {
                if (metadata.$cardview !== undefined) {
                    this.list.$item.$cardview = metadata.$cardview;
                }
                if (metadata.$cardviewPosition !== undefined) {
                    this.list.$item.$cardviewPosition = metadata.$cardviewPosition;
                }
                if (this.cardview) {
                    this.cardview.release();
                }
                this.list.reloadBuilder();
            }
            if (metadata.$cardviewWidth !== undefined) {
                if (this.cardview) {
                    this.cardview._cardSlot.style.width = this.list.$item.$cardviewWidth + "%";
                }
            }
            if (metadata.$fitContainer !== undefined) {
                this._table.style.width = (this.list.$item.$fitContainer = metadata.$fitContainer) ? "100%" : "";
            }
        }
        
    },
    renderOrderBy: function(){
        this.table.renderOrderBy();
    },
    toggleDataList: function(show){
        if (this.table) {
            this.table.toggle(show);
        }
        else {
            (this.table = new Table()).load(this, this.list._tableSlot || this.list._core);
            this.list._body = this.table.appendBody();
            
            this.list.loadRecordSelector();
            this.onRedrawCore();
        }
    },
    ensureCardView: function(){
        var self = this
        var $collectionBinds = [];
        if (!self.list.$item.$cardview) {
            self.list.parseItems(function($item, $field){
                if ($field && $field.$type == "application/x-collection") {
                    if (!$field.$isHidden) {
                        if (self.list.$item.$cardview) {
                            $field.$isHidden = true;
                        }
                        else {
                            $collectionBinds.push($item.$bind);
                        }
                    }
                }
            });
            if ($collectionBinds.length > 0) {
                self.list.$item.$layout.$items = self.list.$item.$layout.$items.filter(function($item){
                    return $collectionBinds.indexOf($item.$bind) < 0;
                });
                self.list.$item.$cardview = {
                    $layout: {
                        $layoutType: "tabs",
                        $items: $collectionBinds.map(function($bind){
                            return {
                                $category: "section",
                                $title: self.list.$fields[$bind].$title,
                                $layout: {
                                    $items: [{
                                        $bind: $bind,
                                        $isTitleHidden: true
                                    }]
                                }
                            
                            };
                        })
                    }
                };
            }
        }
        if (self.list.$item.$cardview) {
            self.cardview = new GridCardViewDecorator();
            self.cardview.initialize(self);
        }
    },
    drawBuilder: function(){
        var self = this;
        var list = this.list;
        list.$$fieldValue[0].style.overflow = "auto";
        var $skin = list.$skin = list.$item.$skin || this.$defaultSkin;
        this.gridCss = {
            title: $skin + "-title-cell",
            cell: $skin + "-cell",
            rowIndex: $skin + "-cell " + $skin + "-row-index"
        };
        
        self.ensureCardView();
        
        list.applyDesignMetaData(list.$item, false);
        list.setState(list.$field);
        
        this.toggleDataList(true);
        this.list.applyCapabilities(this.list.$prototype.$capabilities === undefined ? {
            $capabilities: "insert,append,delete,reorder"
            //$capabilities: ""
        } : this.list.$prototype);
        
        list.boxParent.getArticle().bind(list, list.$item.$bind);
        this.table.toggle(true);
    },
    onAfterDataBinding: function(){
        RawListBuilder.prototype.onAfterDataBinding.call(this);
        if (this.cardview) {
            this.cardview.onAfterDataBinding();
        }
    },
    onRedrawCore: function(){
        this.table.makeTitleRow();
    },
    dispose: function(){
        if (this.table) {
            document.controller.disposeObject(this.table);
            delete this.table;
        }
        RawListBuilder.prototype.dispose.call(this);
    }
});
