"use strict";
var helpers = require('syracuse-core/lib/helpers');
var HGridRecord = require('./hgridRecord').HGridRecord;
var RawListBuilder = require("syracuse-ui/lib/common/field/collection/rawListBuilder").RawListBuilder;

function HGridBuilder(){
}

exports.Builder = helpers.defineClass(HGridBuilder, RawListBuilder, {
    initialize: function(){
        this.$defaultSkin = "s-grid";
        this.list.RecordClass = HGridRecord;
    },
    applyDesignMetaData: function(metadata, onAuthoring){
        if (onAuthoring) {
            if (metadata.$isRowIndexVisible !== undefined) {
                this.list.$item.$isRowIndexVisible = metadata.$isRowIndexVisible;
                this.list.reloadBuilder();
            }
            if (metadata.$graphMode !== undefined) {
                this.toggleDataList(metadata.$graphMode != "graph");
            }
        }
    },
    _bindSort: function(){
        var self = this;
        self.list.$$item.delegate("a[data-s-sort]", "click", function(){
            var $bind = $(this).attr("data-s-sort");
            var $newOrderBy = [], found;
            if (self.list.$orderBy) {
                self.list.$orderBy.forEach(function($orderItem){
                    if ($orderItem.binding == $bind) {
                        found = true;
                        if ($orderItem.$step != 2) {
                            $orderItem.$step = ($orderItem.$step || 0) + 1;
                            if (!$orderItem.descending) {
                                $orderItem.descending = true;
                            }
                            $newOrderBy.push($orderItem);
                        }
                    }
                    else {
                        $newOrderBy.push($orderItem);
                    }
                });
            }
            if (!found) {
                $newOrderBy.push({
                    binding: $bind,
                    descending: false,
                    $step: 1
                });
            }
            self.list.fetch($newOrderBy ? {
                orderBy: $newOrderBy
            } : null);
            return false;
        });
    },
    renderOrderBy: function(){
        var self = this;
        delete self.list.alphaTabBind;
        if (self.list.$$orderedLinks) {
            self.list.$$orderedLinks.forEach(function($$orderedLink){
                $$orderedLink.removeClass("s-grid-sort-asc s-grid-sort-desc");
            });
            delete self.list.$$orderedLinks;
        }
        if (self.list.$orderBy) {
            self.list.$$orderedLinks = [];
            self.list.$orderBy.forEach(function(field, index){
                if (index == 0) {
                    if (self.list.$fields[field.binding].$capability.alphaTab) {
                        self.list.alphaTabBind = field.binding;
                    }
                }
                self.list.$$orderedLinks.push(self.$$titleRow.find("a[data-s-sort=" + field.binding + "]").removeClass("s-grid-sort-asc s-grid-sort-desc").addClass(field.descending ? "s-grid-sort-desc" : "s-grid-sort-asc"));
            });
        }
        self.showAlphaPager(self.list.alphaTabBind);
    },
    showAlphaPager: function(show){
        var self = this;
        if (show) {
            if (!self.$$alphaPager) {
                var div = document.createElement("div");
                div.className = "s-alphapager";
                self.list.appendToCoreLeft(self.$$alphaPager = $(div));
                for (var ii = "A".charCodeAt(0), end = "Z".charCodeAt(0); ii <= end; ii++) {
                    var btn = document.createElement("a");
                    btn.className = "s-alphapager-link";
                    $(btn).appendTo(self.$$alphaPager).text(String.fromCharCode(ii));
                }
                self.$$alphaPager.delegate(".s-alphapager-link", "click", function(){
                    self.list.fetch({
                        startLetter: $(this).text()
                    });
                    self.$$alphaPager.children(".s-alphapager-link-selected").removeClass("s-alphapager-link-selected");
                    $(this).toggleClass("s-alphapager-link-selected", true);
                    return false;
                });
            }
        }
        if (self.$$alphaPager) {
            self.$$alphaPager[0].style.visibility = show ? "visible" : "hidden";
        }
    },
    makeColGroup: function(){
        var self = this;
        var cols = "";
        if (self.list.$item.$preView) {
            cols += "<col/>";
        }
        if (self.list.recordSelector.hasColumn) {
            cols += "<col/>";
        }
        if (self.list.$item.$isRowIndexVisible) {
            cols += "<col/>";
        }
        self.list.$item.$layout.$items.forEach(function($item){
            var $field = self.list.$fields[$item.$bind];
            if ($field && !$field.$isHidden) {
                var col = "<col";
                var width = $item.$width || $field.$width;
                if (width) {
                    col += " width='" + width + "'";
                }
                cols += col + "/>";
            }
        });
        self.$$table.append("<colgroup>" + cols + "</colgroup>");
    },
    makeTitleRow: function(){
        var self = this;
        var isNew;
        if (self.$$titleRow) {
            self.$$titleRow.empty();
        }
        else {
            isNew = true;
            self.$$titleRow = $(document.createElement("tr"));
        }
        if (self.list.$item.$preView) {
            var th = document.createElement("th");
            th.className = self.gridCss.title + " " + self.list.$skin + "-preview-cell";
            self.$$titleRow.append($(th).append("<a class='" + self.list.$skin + "-preview-opener s-close'/>"));
        }
        if (self.list.recordSelector.hasColumn) {
            var th = document.createElement("th");
            th.className = self.gridCss.title + " " + self.list.$skin + self.list.recordSelector.titleCss;
            self.$$titleRow.append($(th).append(self.list.recordSelector.title));
        }
        if (self.list.$item.$isRowIndexVisible) {
            var td = document.createElement("td");
            td.className = self.gridCss.title + " " + self.gridCss.rowIndex;
            self.$$titleRow.append(td);
        }
        self.$$titleCells = {};
        var cssLink = self.list.$skin + "-title-link";
        self.list.$item.$layout.$items.forEach(function($item){
            var $field = self.list.$fields[$item.$bind];
            if ($field && !$field.$isHidden) {
                var title;
                if ($field.$capability.sort) {
                    title = document.createElement("a");
                    title.className = cssLink;
                    title.setAttribute("data-s-sort", $item.$bind);
                }
                else {
                    title = document.createElement("div");
                }
                var th = document.createElement("th");
                th.className = self.gridCss.title;
                self.$$titleRow.append(self.$$titleCells[$item.$bind] = $(th).append($(title).text(self.list.getLocalizedTitle($field.$title || ""))));
            }
        });
        if (isNew) {
            self.list._$$header.append(self.$$titleRow);
        }
    },
    drawOrientation: function(){
        var $item = this.list.$item;
        if ($item.$alternateStyle) {
            this.$alternateStyle = this.list.$skin + "-alt";
        }
        this.$columnsCount = $item.$layout.$items.length;
        if ($item.$preView) {
            this.$columnsCount++;
        }
        if (this.list.recordSelector.hasColumn) {
            this.$columnsCount++;
        }
        if ($item.$isRowIndexVisible) {
            this.$columnsCount++;
        }
        if ($item.$preView) {
            this._bindPreview();
        }
    },
    toggleDataList: function(show){
        if (this.$$table) {
            this.$$table[0].style.display = show ? "" : "none";
        }
        else {
            this._drawDataList();
        }
    },
    _drawDataList: function(){
        var self = this;
        var list = this.list;
        
        var table = document.createElement("table");
        table.style.display = "none";
        table.className = list.$skin;
        table.setAttribute("cellspacing", "0");
        table.setAttribute("cellpadding", "0");
        self.$$table = $(table);
        list._$$header = $(document.createElement("thead"));
        list._$$body = $(document.createElement("tbody"));
        self.$$table.append(list._$$header).append(list._$$body).appendTo(list.$$listSlot);
        
        list.appendSelector();
        self.drawOrientation();
        self.makeColGroup();
        if (!list.$item.$isTitleRowHidden) {
            self.makeTitleRow();
        }
        self.list.appendQuickFilter();
        self._bindSort();
        
        if (!self.list.$item.$isMenuRecordHidden) {
            self.$$table.delegate("tr[data-s-record]", "mouseenter mouseleave", function(event){
                var $uuid = this.getAttribute("data-s-record");
                list.toggleRecordMenu(event.type == "mouseenter", list.dataset[$uuid]);
                return false;
            });
        }
    },
    drawBuilder: function(){
        var self = this;
        var list = this.list;
        var $skin = list.$skin = list.$item.$skin || this.$defaultSkin;
        this.gridCss = {
            title: $skin + "-title-cell",
            cell: $skin + "-cell",
            rowIndex: $skin + "-cell " + $skin + "-row-index",
            menuRow: $skin + "-menu-row"
        };
        
        var div = document.createElement("div");
        div.className = "s-list";
        list.$$list = $(div).appendTo(list.$$dataValue);
        
        div = document.createElement("div");
        div.className = "s-list-topbar";
        list.$$topbar = $(div).appendTo(list.$$list);
        
        list.appendArticleMenus(list.$$topbar);
        if (!list.$item.$hidePager) {
            list.appendPager(list.$$topbar);
        }
        list._appendCore();
        /*if (list.$prototype.$cube) {
         list.applyGraphSettings();
         }*/
        list._appendAuthoringOpener(list.$$topbar);
        
        list.$item.$width = list.$item.$width || "100%";
        
        list.applyDesignMetaData(list.$item, false);
        list.applyHiddenState(list.$field);
        
        this._drawDataList();
        
        list.boxParent.getArticle().bind(list, list.$item.$bind);
        this.$$table.show();
    },
    
    onRedrawCore: function(){
        this.drawOrientation();
        if (!this.list.$item.$isTitleRowHidden) {
            this.makeTitleRow();
        }
        if (this.list.quickFilterBox) {
            this.list.quickFilterBox.drawBox();
        }
    },
    _bindPreview: function(){
        var self = this;
        self.list.$$item.delegate("a." + self.list.$skin + "-preview-opener", "click", function(){
            var $$opener = $(this);
            var show = $$opener.hasClass("s-close");
            var $uuid = $$opener.closest("[data-s-record]").attr("data-s-record");
            var $uuidList = ($uuid) ? [$uuid] : Object.keys(self.list.dataset);
            $uuidList.forEach(function($uuid){
                self.list.dataset[$uuid].togglePreview(show);
            });
            document.site.toggleClass($$opener, "s-close", !show);
        });
    },
    appendNoRecordRow: function(){
        $("<tr/>").append($("<td/>").attr("colspan", this.$columnsCount).append(this.list.appendEmptyInfo())).appendTo(this.list._$$body);
    },
    dispose: function(){
        if (this.$$table) {
            this.$$table.undelegate();
        }
        RawListBuilder.prototype.dispose.call(this);
    }
});
