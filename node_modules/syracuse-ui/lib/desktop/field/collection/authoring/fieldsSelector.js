"use strict";
var helpers = require('syracuse-core/lib/helpers');


function FieldsSelector(){

}

exports.FieldsSelector = helpers.defineClass(FieldsSelector, null, {
    load: function(list, $$container){
        var self = this;
        self.list = list;
        self.$$item = $("<table class='s-list-design-fields'/>").appendTo($$container);
        self.$$table = $("<table class='s-list-design-fields-table'/>");
        var $$rowHeader = $("<tr/>");
        var $rowBody = $("<tr/>");
        self.cols = [];
        [{
            $title: "Available",
            $css: "available",
            $btnCss: "s-list-design-fields-add",
            $isHiddenItem: true
        }, {
            $css: "arrows"
        }, {
            $title: "Display",
            $css: "available",
            $btnCss: "s-list-design-fields-del",
            $isHiddenItem: false
        }].forEach(function($col){
            var css = "s-list-design-fields-" + $col.$css;
            self.cols.push({
                $col: $col,
                $fullCss: css,
                $$th: $("<th class='s-list-design-fields-th'/>").addClass(css).appendTo($$rowHeader).text($col.$title || ""),
                $$td: $("<td class='s-list-design-fields-td'/>").addClass(css).appendTo($rowBody)
            });
        })
        self.$$table.append($("<thead/>").append($$rowHeader)).append($("<tbody/>").append($rowBody)).appendTo(self.$$item);
        self.appendArrows();
        self._fillList(self.cols[0]);
        self._fillList(self.cols[2]);
        self.$$item.delegate("a.s-list-design-fields-del,a.s-list-design-fields-add", "click", function(){
            var hideColumn = this.className.indexOf("s-list-design-fields-del") >= 0;
            var $bind = $(this).closest("[data-s-bind]").attr("data-s-bind");
            var metadata = {};
            metadata[$bind] = {
                $isHidden: hideColumn
            };
            self.list.applyDesignMetaData({
                $item: {
                    $: metadata
                }
            }, true);
            setTimeout(function(){
                self._moveItem($bind, hideColumn);
            });
            return false;
        });
    },
    _moveItem: function($bind, $isHidden){
        this.cols[$isHidden ? 2 : 0].$$ul.find("[data-s-bind='" + $bind + "']").remove();
        this._addItem(this.cols[$isHidden ? 0 : 2], $bind, this.list.$fields[$bind]);
    },
    _addItem: function(itemList, $bind, $field){
        $field = $field || this.$fields[$bind];
        var $$li = $("<li class='s-list-design-fields-li'/>").appendTo(itemList.$$ul).attr("data-s-bind", $bind).text($field.$title);
        var btn = document.createElement("a");
        btn.className = itemList.$col.$btnCss;
        $(btn).appendTo($$li)
    },
    _fillList: function(col){
        var self = this;
        col.$$tdBody = $("<div class='s-list-design-fields-td-body'/>").appendTo(col.$$td);
        col.$$ul = $("<ul class='s-list-design-fields-ul'/>").addClass(self.$fullCss).appendTo(col.$$tdBody);
        self.list.$item.$layout.$items.forEach(function($item){
            var $field = self.list.$fields[$item.$bind];
            if ($field && !$field.$isHidden) {
                debugger;
                if (col.$col.$isHiddenItem == ($item.$isHidden || false)) {
                    self._addItem(col, $item.$bind, $field);
                }
            }
        });
    },
    appendArrows: function(){
        var self = this;
        var link = document.createElement("a");
        link.className = "s-list-design-fields-select";
        self.$$select = $(link).bind("click", function(){
            return false;
        });
        
        link = document.createElement("a");
        link.className = "s-list-design-fields-unselect";
        self.$$unselect = $(link).bind("click", function(){
            return false;
        });
        
        self.cols[1].$$td.append(this.$$select).append(this.$$unselect);
    },
    dispose: function(){
        delete this.list;
        if (this.$$item) {
            this.$$item.undelegate();
        }
        if (this.$$select) {
            this.$$select.unbind();
            this.$$unselect.unbind();
        }
    }
});
