"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var FieldsSelector = require("./fieldsSelector").FieldsSelector;


var _localize = {
    itemsPerPage: "page size",
    cardListByRowCount: "Place",
    format: "Format",
    formatCardList: "Card list",
    formatHGrid: "Grid",
    formatVGrid: "Vertical Grid",
    isQuickFilter: "show filters",
    isRowIndexVisible: "show row index",
    graphIntegration: "Graph Integration",
    graphMode: "graph mode",
    graphModeList: "list only",
    graphModeGraphList: "graph and list",
    graphModeGraph: "graph only",
    linkOk: "Ok",
    linkCancel: "Cancel",
    addSection: "add a section",
    addBlock: "add a block",
    isBoxCollapsable: "collapsible",
    isMaximizable: "maximizable",
    isTitleHidden: "hide panel title",
    widthSmall: "small",
    widthMedium: "medium",
    widthLarge: "large",
    widthMaximum: "maximum",
    isHidden: "hide me",
    isTopLabelAlignment: "top aligned",
    isLabelHidden: "hidden",
    isRightTextLabelAlignment: "text",
    textLabelLeftAligned: "left aligned",
    textLabelRightAligned: "right aligned"
};

function ListAuthoring(){

}

exports.ListAuthoring = helpers.defineClass(ListAuthoring, Article, {
    onNotifyRecordChange: function(value, binding){
        var metaData = {};
        switch (binding) {
            case "$format":
                this.applyChange({
                    $format: value
                })
                break;
        }
        metaData[binding] = value;
        this.boxParent.applyDesignMetaData(metaData, true);
        return null; //cancel notify
    },
    applyChange: function(newData){
        if (newData) {
            if (newData.$format) {
                var delta = newData.$ = newData.$ || {};
                var isCardList = newData.$format == "cardList";
                delta.$cardsByRowCount = delta.$cardsByRowCount || {};
                delta.$cardsByRowCount.$isHidden = !isCardList;
                
                delta.$isQuickFilter = delta.$isQuickFilter || {};
                delta.$isQuickFilter.$isHidden = isCardList;
                delta.$isRowIndexVisible = delta.$isRowIndexVisible || {};
                delta.$isRowIndexVisible.$isHidden = isCardList;
            }
        }
        Article.prototype.applyChange.call(this, newData);
        
    },
    _initializeBox: function(){
        this.$prototype = {
            "$": {
                $itemsPerPage: {
                    $type: "application/x-choice",
                    $title: _localize.itemsPerPage,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: ["5", "10", "15", "20", "25", "50", "75", "100", "150", "200"].map(function(count){
                                return {
                                    $value: count,
                                    $title: count
                                };
                            })
                        }
                    }
                },
                $isQuickFilter: {
                    $type: "application/x-boolean",
                    $title: _localize.isQuickFilter
                },
                $isRowIndexVisible: {
                    $type: "application/x-boolean",
                    $title: _localize.isRowIndexVisible
                },
                $cardsByRowCount: {
                    $isHidden: true,
                    $type: "application/x-choice",
                    $title: _localize.cardListByRowCount,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: 0,
                                $title: "free"
                            }, {
                                $value: 1,
                                $title: "1 by row"
                            }, {
                                $value: 2,
                                $title: "2 by row"
                            }, {
                                $value: 3,
                                $title: "3 by row"
                            }, {
                                $value: 4,
                                $title: "4 by row"
                            }, {
                                $value: 5,
                                $title: "5 by row"
                            }]
                        }
                    }
                },
                $format: {
                    $type: "application/x-choice",
                    $title: _localize.format,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "cardList",
                                $title: _localize.formatCardList
                            }, {
                                $value: "grid",
                                $title: _localize.formatHGrid
                            }, {
                                $value: "vgrid",
                                $title: _localize.formatVGrid
                            }]
                        }
                    }
                },
                $graphMode: {
                    $type: "application/x-choice",
                    $title: _localize.graphMode,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "list",
                                $title: _localize.graphModeList
                            }, {
                                $value: "both",
                                $title: _localize.graphModeGraphList
                            }, {
                                $value: "graph",
                                $title: _localize.graphModeGraph
                            }]
                        }
                    }
                }
            },
            $links: {
                $addSection: {
                    $title: _localize.addSection
                },
                $addBlock: {
                    $title: _localize.addBlock
                }
            },
            $format: "grid",
            $graphMode: "both",
            $cardsByRowCount: 1,
            $isRowIndexVisible: false,
            $isQuickFilter: false,
            $itemsPerPage: 20
        };
        this.$item = {
            $category: "section",
            $id: this.$item.$id,
            $skin: "s-list-designer-item",
            $layout: {
                $items: [{
                    $layoutType: "columns",
                    $layoutSubType: "40,20,40",
                    $items: [{
                        $layoutType: "stack",
                        $items: [{
                            $category: "section",
                            $id: (self.$layoutSectionId = document.controller.generateUUID()),
                            $title: "Display",
                            $layout: {
                                $layoutType: "side",
                                $layoutCss: "s-list-designer-item-side",
                                $items: [{
                                    $category: "block",
                                    $title: _localize.format,
                                    $layout: {
                                        $items: [{
                                            $bind: "$format",
                                            $skin: "s-author-field",
                                            $isEditMode: true,
                                            $isTitleHidden: true,
                                            $labelWidth: "auto",
                                            $format: "$combo"
                                        }]
                                    }
                                }, {
                                    $bind: "$cardsByRowCount",
                                    $skin: "s-author-field",
                                    $isEditMode: true,
                                    $labelWidth: "auto"
                                }, {
                                    $layoutType: "stack",
                                    $items: [{
                                        $bind: "$itemsPerPage",
                                        $isEditMode: true,
										$skin: "s-author-field",
                                        $isLeftSpaceHidden: true
                                    }, {
                                        $bind: "$isRowIndexVisible",
                                        $isEditMode: true,
                                        $skin: "s-author-field",
                                        $isLeftSpaceHidden: true
                                    }, {
                                        $bind: "$isQuickFilter",
                                        $isEditMode: true,
                                        $skin: "s-author-field",
                                        $isLeftSpaceHidden: true
                                    }]
                                }]
                            }
                        }]
                    }, {
                        $layoutType: "stack",
                        $items: [{
                            $category: "section",
                            $title: _localize.graphIntegration,
                            $layout: {
                                $items: [{
                                    $bind: "$graphMode",
                                    $skin: "s-author-field",
                                    $isEditMode: true,
                                    $isTitleHidden: true,
                                    $labelWidth: "auto",
                                    $format: "$combo"
                                }]
                            }
                        }]
                    }, {
                        $layoutType: "stack",
                        $items: [{
                            $category: "section",
                            $title: "Actions",
                            $layout: {
                                $items: [{
                                    $bind: "$addSection",
                                    $skin: "s-author-designer-link",
                                    $category: "link"
                                }, {
                                    $bind: "$addBlock",
                                    $skin: "s-author-designer-link",
                                    $category: "link"
                                }]
                            }
                        }]
                    }]
                
                }, {
                    $category: "section",
                    $id: this.list.id + "FieldsSelector",
                    $title: "Columns",
                    $layout: {
                        $items: []
                    }
                }]
            }
        };
        Article.prototype._initializeBox.call(this);
        
    },
    appendFieldsSelector: function(){
        this.fieldsSelector = new FieldsSelector();
        this.fieldsSelector.load(this.list, this.idMap[this.list.id + "FieldsSelector"].$$body);
    },
    appendOkCancel: function(){
        var self = this;
        document.itemFactory.load(self.$$footer, {
            $category: "link",
            $skin: "s-list-designer-okcancel",
            $link: {
                $title: _localize.linkOk
            }
        }, self).onMenuClick = function(){
            setTimeout(function(){
                self.toggleQuick(false);
            }, 100);
            return false;
        };
        document.itemFactory.load(self.$$footer, {
            $category: "link",
            $skin: "s-list-designer-okcancel",
            $link: {
                $title: _localize.linkCancel
            }
        }, self).onMenuClick = function(){
            setTimeout(function(){
                self.toggleQuick(false);
            }, 100);
            return false;
        };
    },
    toggleQuick: function(show){
        var self = this;
        if (show) {
            var dom = document.createElement("div");
            dom.className = "s-list-designer";
            self.$$container = $(dom).draggable();
            
            dom = document.createElement("a");
            dom.className = "s-list-designer-close";
            self.$$quickClose = $(dom).bind("click", function(){
                self.toggleQuick(false);
                return false;
            }).appendTo(self.$$container);
            
            document.itemFactory.initializeItem(self, {}, self.list);
            
            self.loadBox(self.list.$item);
            self.appendFieldsSelector();
            dom = document.createElement("div");
            dom.className = "s-list-designer-footer";
            self.$$footer = $(dom).appendTo(self.$$container);
            self.appendOkCancel();
            self.popup = document.site.createPopup({
                page: self.list.getPage(),
                // $size: "content",
                //$isResizable: true,
                $$popup: self.$$container,
                position: {
                    my: "left top",
                    at: "left bottom",
                    of: self.list.$$designer
                },
                closeHandler: function(){
                    self.popup = null;
                    self.dispose();
                    return true;
                },
                boundarySelector: "#" + self.list.id
            });
        }
        else {
            if (self.popup) {
                self.popup.close();
            }
        }
    },
    dispose: function(){
        if (this.list) {
            delete this.list.quickDesigner;
            delete this.list;
        }
        if (this.$$quickClose) {
            this.$$quickClose.unbind();
        }
        Article.prototype.dispose.call(this);
    }
});
