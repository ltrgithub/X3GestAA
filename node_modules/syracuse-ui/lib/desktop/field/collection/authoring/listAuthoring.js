"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var FieldsSelector = require("./fieldsSelector").FieldsSelector;

var _localize = {
    itemsPerPage: "page size",
    cardListByRowCount: "Place",
    format: "Format",
    formatCardList: "Card list",
    formatHGrid: "Grid",
    formatVGrid: "Vertical Grid",
    isQuickFilter: "show filters",
    cardviewPosition: "card view",
    cardviewWidth: "width",
    cardviewPositionNo: "no",
    cardviewPositionInline: "inline",
    cardviewPositionTop: "top",
    cardviewPositionLeft: "left",
    cardviewPositionRight: "right",
    cardviewPositionBottom: "bottom",
    isRowIndexVisible: "show row index",
    graphIntegration: "Graph",
    graphMode: "graph mode",
    graphModeList: "list only",
    graphModeGraphList: "graph and list",
    graphModeGraph: "graph only",
    graphPosition: "position",
    graphPositionTop: "top",
    graphPositionLeft: "left",
    graphPositionRight: "right",
    graphPositionBottom: "bottom",
    graphPositionTab: "tab",
    linkOk: "Ok",
    linkCancel: "Cancel",
    addSection: "add a section",
    addBlock: "add a block",
    isTitleHidden: "hide my title",
    updateMessageTitle: "List design has been updated",
    cancelMessageText: "Save Update before quit",
    saveMessageText: "Leave authoring mode"
};

function ListAuthoring(){

}

exports.ListAuthoring = helpers.defineClass(ListAuthoring, Article, {
    onNotifyRecordChange: function(value, binding){
        var metaData = {};
        if (binding == "$cardviewPosition") {
            if (value == "no") {
                if (this.designedField.$item.$cardview) {
                    binding = "$cardview";
                    value = false;
                }
            }
            else {
                if (!this.designedField.$item.$cardview) {
                    metaData.$cardview = true;
                }
            }
        }
        metaData[binding] = value;
        this.applyChange(metaData);
        this.boxParent.applyDesignMetaData(metaData, true);
        this.notifyUpdate();
        return null; //cancel notify
    },
    notifyUpdate: function(){
        this.isUpdated = true;
    },
    _getGrapAuthoringBox: function(){
        return this.idMap[this.designedField.id + "GraphAuthoring"];
    },
    _onOpenGrapContainer: function(){
        var containerBox = this._getGrapAuthoringBox();
        if (containerBox && containerBox.$$body) {
            if (!this.chartAuthoring && this.designedField.chart && this.designedField.chart.getAuthoringWidget) {
                this.chartAuthoring = this.designedField.chart.getAuthoringWidget();
                var dom = document.createElement("div");
                dom.className = "s-author-designer-custom-field";
                this.chartAuthoring.$$container = $(dom).appendTo(containerBox.$$body);
                document.itemFactory.initializeItem(this.chartAuthoring, {}, this);
                this.chartAuthoring.$layoutOptions = this.designedField.$layoutOptions.authoring;
                this.chartAuthoring.$skin = this.$layoutOptions.section;
                this.chartAuthoring.designedField = this.designedField.chart;
                this.chartAuthoring.loadBox(this.designedField.chart.$item);
            }
        }
    },
    applyChange: function(newData){
        if (newData) {
            if (newData.$format) {
            
                var delta = newData.$ = newData.$ || {};
                var isCardList = newData.$format == "cardList";
                delta.$cardsByRowCount = delta.$cardsByRowCount || {};
                delta.$cardsByRowCount.$isHidden = !isCardList;
                
                delta.$isQuickFilter = delta.$isQuickFilter || {};
                delta.$isQuickFilter.$isHidden = isCardList;
                delta.$isRowIndexVisible = delta.$isRowIndexVisible || {};
                delta.$isRowIndexVisible.$isHidden = isCardList;
                
                delta.$cardviewPosition = delta.$cardviewPosition || {};
                delta.$cardviewPosition.$isHidden = newData.$format != "grid";
                
                delta.$cardviewWidth = delta.$cardviewWidth || {};
                var position = this.boundFields.$cardviewPosition[0].getDataValue();
                if (position == "no" && this.designedField.$item.$cardview) {
                    newData.$cardviewPosition = position = "inline";
                }
                delta.$cardviewWidth.$isHidden = delta.$cardviewPosition.$isHidden || (position == "no") || (position == "inline");
            }
            if (newData.$cardviewPosition) {
                var delta = newData.$ = newData.$ || {};
                delta.$cardviewWidth = delta.$cardviewWidth || {};
                delta.$cardviewWidth.$isHidden = (newData.$cardviewPosition == "no") || (newData.$cardviewPosition == "inline");
            }
            if (newData.$graphMode) {
                var delta = newData.$ = newData.$ || {};
                delta.$graphPosition = delta.$graphPosition || {};
                delta.$graphPosition.$isHidden = newData.$graphMode != "both";
                if (this.chartAuthoring) {
                    var box = this._getGrapAuthoringBox();
                    if (box) {
                        box.applyDesignMetaData({
                            $isHidden: delta.$graphPosition.$isHidden
                        });
                    }
                }
            }
            /*if (newData.$cardview) {
             newData.$cardviewPosition = newData.$cardviewPosition || "inline" ;
             }*/
        }
        Article.prototype.applyChange.call(this, newData);
        if (newData.$graphMode != "list") {
            this._onOpenGrapContainer();
        }
    },
    loadBox: function(opener){
        var self = this;
        self.isAuthoringDisabled = true;
        var dom = document.createElement("div");
        dom.className = "s-list-designer";
        
        self.$$container = $(dom);
        self.designedField = (self.opener = opener).designedField;
        document.itemFactory.initializeItem(self, {}, self.designedField);
        
        self.$prototype = {
            "$": {
                $itemsPerPage: {
                    $type: "application/x-choice",
                    $title: _localize.itemsPerPage,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: ["5", "10", "15", "20", "25", "50", "75", "100", "150", "200"].map(function(count){
                                return {
                                    $value: count,
                                    $title: count
                                };
                            })
                        }
                    }
                },
                $cardviewWidth: {
                    $type: "application/x-choice",
                    $title: _localize.cardviewWidth,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "15",
                                $title: "15 %"
                            }, {
                                $value: "25",
                                $title: "25 %"
                            }, {
                                $value: "40",
                                $title: "40 %"
                            }, {
                                $value: "50",
                                $title: "50 %"
                            }, {
                                $value: "60",
                                $title: "60 %"
                            }, {
                                $value: "75",
                                $title: "75 %"
                            }]
                        }
                    }
                },
                $cardviewPosition: {
                    $type: "application/x-choice",
                    $title: _localize.cardviewPosition,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "no",
                                $title: _localize.cardviewPositionNo
                            }, {
                                $value: "inline",
                                $title: _localize.cardviewPositionInline
                            }, {
                                $value: "top",
                                $title: _localize.cardviewPositionTop
                            }, {
                                $value: "left",
                                $title: _localize.cardviewPositionLeft
                            }, {
                                $value: "right",
                                $title: _localize.cardviewPositionRight
                            }, {
                                $value: "bottom",
                                $title: _localize.cardviewPositionBottom
                            }]
                        }
                    }
                },
                $isQuickFilter: {
                    $type: "application/x-boolean",
                    $title: _localize.isQuickFilter
                },
                $isRowIndexVisible: {
                    $type: "application/x-boolean",
                    $title: _localize.isRowIndexVisible
                },
                $cardsByRowCount: {
                    $isHidden: true,
                    $type: "application/x-choice",
                    $title: _localize.cardListByRowCount,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: 0,
                                $title: "free"
                            }, {
                                $value: 1,
                                $title: "1 by row"
                            }, {
                                $value: 2,
                                $title: "2 by row"
                            }, {
                                $value: 3,
                                $title: "3 by row"
                            }, {
                                $value: 4,
                                $title: "4 by row"
                            }, {
                                $value: 5,
                                $title: "5 by row"
                            }]
                        }
                    }
                },
                $format: {
                    $type: "application/x-choice",
                    $title: _localize.format,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "cardList",
                                $title: _localize.formatCardList
                            }, {
                                $value: "grid",
                                $title: _localize.formatHGrid
                            }, {
                                $value: "vgrid",
                                $title: _localize.formatVGrid
                            }]
                        }
                    }
                },
                $graphMode: {
                    $type: "application/x-choice",
                    $title: _localize.graphMode,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "list",
                                $title: _localize.graphModeList
                            }, {
                                $value: "both",
                                $title: _localize.graphModeGraphList
                            }, {
                                $value: "graph",
                                $title: _localize.graphModeGraph
                            }]
                        }
                    }
                },
                $graphPosition: {
                    $type: "application/x-choice",
                    $title: _localize.graphPosition,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "top",
                                $title: _localize.graphPositionTop
                            }, {
                                $value: "left",
                                $title: _localize.graphPositionLeft
                            }, {
                                $value: "right",
                                $title: _localize.graphPositionRight
                            }, {
                                $value: "bottom",
                                $title: _localize.graphPositionBottom
                            }, {
                                $value: "tab",
                                $title: _localize.graphPositionTab
                            }]
                        }
                    }
                }
            },
            $format: "grid",
            $graphMode: "both",
            $graphPosition: "bottom",
            $cardsByRowCount: 1,
            $isRowIndexVisible: false,
            $isQuickFilter: false,
            $itemsPerPage: 20,
            $cardviewPosition: "no",
            $cardviewWidth: "50",
        };
        self.$item = {
            $category: "section",
            $title: "List authoring",
            $id: self.$item.$id,
            $layout: {
                $layoutType: "tabs",
                $items: [{
                    $category: "section",
                    $id: (self.$layoutSectionId = document.controller.generateUUID()),
                    $title: "Display",
                    $layout: {
                        $layoutType: "side",
                        $layoutCss: "s-list-designer-item-side",
                        $items: [{
                            $category: "block",
                            $title: _localize.format,
                            $layout: {
                                $items: [{
                                    $bind: "$format",
                                    $skin: "s-author-field",
                                    $isEditMode: true,
                                    $isTitleHidden: true,
                                    $labelWidth: "auto",
                                    $format: "$combo"
                                }]
                            }
                        }, {
                            $bind: "$cardsByRowCount",
                            $skin: "s-author-field",
                            $isEditMode: true,
                            $labelWidth: "auto"
                        }, {
                            $layoutType: "stack",
                            $items: [{
                                $bind: "$itemsPerPage",
                                $isEditMode: true,
                                $skin: "s-author-field",
                                $choiceLayout: "2",
                                $isLeftSpaceHidden: true
                            }, {
                                $bind: "$isRowIndexVisible",
                                $isEditMode: true,
                                $skin: "s-author-field",
                                $isLeftSpaceHidden: true
                            }, {
                                $bind: "$isQuickFilter",
                                $isEditMode: true,
                                $skin: "s-author-field",
                                $isLeftSpaceHidden: true
                            }, {
                                $bind: "$cardviewPosition",
                                $isEditMode: true,
                                $skin: "s-author-field",
                                $isLeftSpaceHidden: true
                            }, {
                                $bind: "$cardviewWidth",
                                $isHidden: true,
                                $isEditMode: true,
                                $choiceLayout: "2",
                                $skin: "s-author-field",
                                $isLeftSpaceHidden: true
                            }]
                        }]
                    }
                }, {
                    $category: "section",
                    $isHidden: self.designedField.$prototype.$cube == null,
                    $title: _localize.graphIntegration,
                    $layout: {
                        $items: [{
                            $bind: "$graphMode",
                            $skin: "s-author-field",
                            $isEditMode: true,
                            $isTitleHidden: true,
                            $labelWidth: "auto",
                            $format: "$combo"
                        }, {
                            $bind: "$graphPosition",
                            $skin: "s-author-field",
                            $isEditMode: true,
                            $isTitleHidden: true,
                            $labelWidth: "auto",
                            $format: "$combo"
                        }, {
                            $category: "section",
                            $id: self.designedField.id + "GraphAuthoring",
                            onOpen: function(box){
                                self._onOpenGrapContainer(box);
                            },
                            $layout: {
                                $items: []
                            }
                        }]
                    }
                }, {
                    $category: "section",
                    $id: self.designedField.id + "FieldsSelector",
                    $title: "Columns",
                    $layout: {
                        $items: []
                    }
                }]
            
            }
        };
        self.$layoutOptions = self.designedField.$layoutOptions.authoring;
        self.$skin = self.$layoutOptions.$skin;
        
        if (self.opener.isQuickDesigner) {
            self.$sourceItem = helpers.object.clone(self.designedField.$item, true);
        }
        Article.prototype.loadBox.call(self, self.designedField.$item);
        document.site.setDraggable(self, self.$$header);
        
        self.appendFieldsSelector();
        dom = document.createElement("div");
        dom.className = "s-list-designer-footer";
        self.$$footer = $(dom).appendTo(self.$$container);
        
        self.appendOkCancel();
        
    },
    appendFieldsSelector: function(){
        this.fieldsSelector = new FieldsSelector();
        this.fieldsSelector.load(this.designedField, this.idMap[this.designedField.id + "FieldsSelector"].$$body);
    },
    appendOkCancel: function(){
        var self = this;
        var btn;
        if (self.opener.isQuickDesigner && !document.site.authoringView) {
            btn = document.createElement("a");
            btn.className = "s-list-designer-ok";
            btn.setAttribute("title", _localize.linkOk);
            self.$$item.append(btn);
        }
        btn = document.createElement("a");
        btn.className = "s-list-designer-cancel";
        btn.setAttribute("title", _localize.linkCancel);
        self.$$item.append(btn);
        
        self.$$item.delegate(".s-list-designer-cancel,.s-list-designer-ok", "click", function(){
            if (self.isUpdated && !document.site.authoringView) {
                if (this.className.indexOf("s-list-designer-cancel") >= 0) {
                    document.site.showMessage({
                        $title: _localize.updateMessageTitle,
                        $message: _localize.cancelMessageText,
                        $type: "question",
                        $buttons: "yesnocancel",
                        callback: function(response){
                            if (response.$id == "yes") {
                                self.$$item.children("a.s-list-designer-ok").click();
                            }
                            else {
                                if (response.$id == "no") {
                                    self.designedField.$item = self.$sourceItem;
                                    self.designedField.reloadBuilder();
                                    self.opener.toggleQuick();
                                }
                            }
                        }
                    });
                }
                else {
                    document.site.showMessage({
                        $title: _localize.updateMessageTitle,
                        $message: _localize.saveMessageText,
                        $type: "question",
                        $buttons: "yesno",
                        callback: function(response){
                            if (response.$id != "no") {
                                self.opener.toggleQuick();
                            }
                            self.isUpdated = false;
                        }
                    });
                }
            }
            else {
                setTimeout(function(){
                    self.opener.toggleQuick();
                }, 10);
            }
            return false;
        });
    },
    dispose: function(){
        delete this.opener;
        delete this.$sourceItem;
        delete this.designedField;
        Article.prototype.dispose.call(this);
    }
});
