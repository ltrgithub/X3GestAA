"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Pager = require("./pager").Pager;
var RawList = require("syracuse-ui/lib/common/field/collection/list").RawList;
var authoringOpener = require("./authoring/authoringOpener");
var RecordReorder = require('./recordReorder').RecordReorder;
var ListContextMenu = require('./builder/listMenusController').ListContextMenu;
var GraphDecorator = require("./graphDecorator").GraphDecorator;

var gridBuilder = require("./builder/hgridBuilder").Builder;

var _formatBuilders = {
    array: require("./builder/arrayBuilder").Builder,
    reference: require("./builder/referenceListBuilder").Builder,
    grid: gridBuilder,
    vgrid: gridBuilder,
    cards: require("./builder/cardListBuilder").Builder,
};

function DesktopList(){
}

exports.DesktopList = helpers.defineClass(DesktopList, RawList, {
    applyActionLinkChange: function(resources, record){
        RawList.prototype.applyActionLinkChange.call(this, resources, record);
        if (resources && (resources.$links !== undefined || resources.$actions !== undefined)) {
            if (!this._contextMenu) {
                (this._contextMenu = new ListContextMenu()).create(this);
            }
            if (resources.$links === null) {
                this._contextMenu.clearMenuItems();
            }
        }
    },
    _initilializeList: function(){
        this.$isLayoutContentSizeDisabled = true;
        RawList.prototype._initilializeList.call(this);
        if (this.$prototype.$cube) {
            if ((this.$item.$graphMode = this.$item.$graphMode || "both") == "both") {
                this.$item.$graphPosition = "top";
            }
        }
    },
    createBuilder: function(){
        if (this.$field.$item.$type == "application/x-reference") {
            //debugger;
        }
        if (this.$field.$item.$type == "application/x-reference" && !this.$field.$newControl) {
            this.builder = new _formatBuilders.reference();
        }
        else {
            if (!this.$field.$item.$properties || this.$field.$item.$type == "application/x-reference") {
                this.builder = new _formatBuilders.array();
            }
            else {
                this.$item.$format = this.$item.$format || "grid";
                this.builder = new _formatBuilders[this.$item.$format]();
                this.builder.$layoutOptions = this.$layoutOptions.builder[this.$item.$format] || null;
            }
        }
        this.builder.list = this;
        this.builder.initialize();
    },
    reloadBuilder: function(){
        var self = this;
        setTimeout(function(){
            document.controller.disposeObject(self.builder);
            $(self._core).empty();
            self.createBuilder();
            self.builder.drawBuilder();
        }, 20);
    },
    applyDesignMetaData: function(metadata, onAuthoring){
        if (onAuthoring) {
            if (metadata.$format !== undefined) {
                this.$item.$format = metadata.$format;
                this.reloadBuilder();
            }
            if (metadata.$isQuickFilter !== undefined) {
                this.$item.$isQuickFilter = metadata.$isQuickFilter;
                this.reloadBuilder();
            }
            if (metadata.$itemsPerPage !== undefined) {
                this.$item.$itemsPerPage = metadata.$itemsPerPage;
                this.onNotifyRecordChange(this.$item.$itemsPerPage = metadata.$itemsPerPage, "$itemsPerPage");
            }
        }
        if (this.$prototype.$cube) {
            if (!this.graphDecorator) {
                this.graphDecorator = new GraphDecorator();
            }
            this.graphDecorator.applyGraphSettings(this, metadata);
        }
        return RawList.prototype.applyDesignMetaData.call(this, metadata, onAuthoring);
    },
    getAuthoringWidget: function(){
        return new authoringOpener.WidgetAuthoring();
    },
    ensureDiagnoseSlot: function(){
        if (!this.$$diagnose && this.$$dataValue) {
            var div = document.createElement("div");
            div.className = "s-field-diagnose";
            this.$$diagnose = $(this.$$dataValue[0].appendChild(div));
        }
        else {
            this.$$diagnose.empty();
        }
    },
    _appendCore: function(){
        var list = this.$$fieldValue[0];
        list.className += " s-list";
        
        this._topbar = document.createElement("div");
        this._topbar.className = "s-list-topbar";
        list.appendChild(this._topbar);
        
        this._core = document.createElement("div");
        this._core.className = "s-list-core";
        list.appendChild(this._core);
        this._appendAuthoringOpener();
        
        this.appendArticleMenus();
        this.appendPager();
    },
    
    setState: function(state){
        RawList.prototype.setState.call(this, state);
        if (this.builder._records && this.$capability && state.$isDisabled !== undefined) {
            this.builder._records.forEach(function(record, index){
                record.setState(state);
            });
        }
    },
    onReorder: function(sourceRecord, targetRecord, $insert){
        var newRecords = [];
        this.builder._records.splice(sourceRecord.$recordIndex, 1);
        this.builder._records.forEach(function(record){
            if (record == targetRecord) {
                if ($insert == "insertAfter") {
                    record.$recordIndex = newRecords.length;
                    newRecords.push(record);
                    sourceRecord.$recordIndex = newRecords.length;
                    newRecords.push(sourceRecord);
                }
                else {
                    sourceRecord.$recordIndex = newRecords.length;
                    newRecords.push(sourceRecord);
                    record.$recordIndex = newRecords.length;
                    newRecords.push(record);
                }
            }
            else {
                record.$recordIndex = newRecords.length;
                newRecords.push(record);
            }
        });
        this.builder._records = newRecords;
        sourceRecord.notifyReorder(targetRecord, $insert);
    },
    parseCapabilities: function($capabilities){
        var self = this;
        self.$capability = self.$capability || {};
        if ($capabilities !== undefined) {
            $capabilities.split(",").forEach(function($prop){
                self.$capability[$prop] = true;
            });
            switch (self.getArticleParent().facet) {
                case "$lookup":
                case "$select":
                    delete self.$capability.reorder;
                    delete self.$capability.insert;
                    delete self.$capability["delete"];
                    break;
            }
            if (self.$capability.reorder !== undefined) {
                if (self.$capability.reorder) {
                    self.$item.$isRowIndexVisible = true;
                    if (!this.recordReorder) {
                        (this.recordReorder = new RecordReorder()).setDraggable(this);
                    }
                }
                else {
                    if (this.recordReorder) {
                        document.controller.disposeObject(this.recordReorder);
                        delete this.recordReorder;
                    }
                }
            }
        }
    },
    applyMetaData: function(metaData){
        RawList.prototype.applyMetaData.call(this, metaData);
        if (metaData && metaData.$capabilities !== undefined) {
            var self = this;
            self.parseCapabilities(metaData.$capabilities);
            if (self.$isEditMode && self.builder._records) {
                self.builder._records.forEach(function(record, index){
                    record.appendCapabilities();
                });
            }
        }
    },
    appendArticleMenus: function(){
        this._contextMenusSlot = document.createElement("div");
        this._contextMenusSlot.className = "s-list-menus-cell";
        this._topbar.appendChild(this._contextMenusSlot);
      
    },
    appendPager: function(){
        if (!this.$item.$isPagerHidden) {
            (this._pager = new Pager(this)).create(this, this._topbar);
        }
    },
    _appendAuthoringOpener: function(){
        if (this.$item.$isQuickDesignerEnabled !== false) {
            this.quickDesigner = new authoringOpener.QuickDesigner();
            this.quickDesigner.appendOpener(this)
        }
    },
    dispose: function(){
        delete this._menus;
        if (this._contextMenu) {
            document.controller.disposeObject(this._contextMenu);
            delete this._contextMenu;
        }
        RawList.prototype.dispose.call(this);
    }
});
