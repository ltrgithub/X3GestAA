"use strict";
var helpers = require('syracuse-core/lib/helpers');
var localize = require('syracuse-ui/lib/common/controller/localize').list;
var FilterRecord = require("./quickFilterArticle").FilterRecord;
var Pager = require("./pager").Pager;
var RawList = require("syracuse-ui/lib/common/field/collection/list").RawList;
var ListAuthoring = require("./authoring/listAuthoring").ListAuthoring;


var _formatBuilders = {
    singleField: require("./builder/singleFieldListBuilder").Builder,
    reference: require("./builder/referenceListBuilder").Builder,
    grid: require("./builder/hgridBuilder").Builder,
    vgrid: require("./builder/vgridBuilder").Builder,
    cardList: require("./builder/cardListBuilder").Builder,
};


function _doSpeedTest($speedTest, $resources){
    if ($resources) {
        var $mems = [];
        for (var ii = 0; ii < self.$item.$speedTest; ii++) {
            $resources.forEach(function(record, $recordIndex){
                record.$uuid = document.controller.generateUUID();
                $mems.push(record);
            });
        }
        $resources = $mems;
        alert("start display");
    }
}


function DesktopList(){
}

exports.DesktopList = helpers.defineClass(DesktopList, RawList, {
    createBuilder: function(){
        if (this.$field.$item.$type == "application/x-reference") {
            this.builder = new _formatBuilders.reference();
        }
        else {
            if (this.$field.$item.$type == "application/x-string") {
                this.builder = new _formatBuilders.singleField();
            }
            else {
                this.builder = new _formatBuilders[this.$item.$format || "grid"]();
            }
        }
        this.builder.list = this;
        if (!this.builder.initialize) {
            debugger;
        }
        this.builder.initialize();
    },
    reloadBuilder: function(){
        var self = this;
        setTimeout(function(){
            document.controller.disposeObject(self.builder);
            self.$$value.empty();
            self.createBuilder();
            self.builder.drawBuilder();
        }, 20);
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if (onAuthoring) {
            if (metaData.$format !== undefined) {
                this.$item.$format = metaData.$format;
                this.reloadBuilder();
            }
            if (metaData.$isQuickFilter !== undefined) {
                this.$item.$isQuickFilter = metaData.$isQuickFilter;
                this.reloadBuilder();
            }
            if (metaData.$itemsPerPage !== undefined) {
                this.$item.$itemsPerPage = metaData.$itemsPerPage;
                this.onNotifyRecordChange(this.$item.$itemsPerPage = metaData.$itemsPerPage, "$itemsPerPage");
            }
            
        }
        return RawList.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
    },
    _initializeBox: function(){
        this.createBuilder();
        RawList.prototype._initializeBox.call(this);
    },
    _appendCore: function(){
        var div = document.createElement("div");
        div.className = "s-list-core";
        this.$$core = $(div).appendTo(this.$$list);
        
        div = document.createElement("div");
        div.className = "s-list-core-left";
        div.style.display = "none";
        this.$$coreLeft = $(div).appendTo(this.$$core);
        
        div = document.createElement("div");
        div.className = "s-list-core-right";
        this.$$coreRight = $(div).appendTo(this.$$core);
    },
    appendToCoreLeft: function($$child){
        this.$$coreLeft.append($$child)[0].style.display = "";
        return $$child;
    },
    appendQuickFilter: function(){
        if (this.$item.$isQuickFilter && this.$facet != "$details") {
            (this.quickFilterBox = new FilterRecord()).loadRecord(this);
        }
    },
    appendGraph: function($bind){
        this.chart = document.itemFactory.load($("<div/>").appendTo(this.$$list), {
            $category: "tabularChart",
            $chartType: this.$item.$chartType,
            $bind: $bind || this.$item.$bind
        }, this.getArticleParent());
    },
    _appendAuthoringOpener: function($$container){
        var self = this;
        if (self.$item.$isQuickDesignerEnabled !== false) {
            var dom = document.createElement("a");
            dom.className = "s-list-designer-opener";
            self.$$designer = $(dom).bind("click", function(){
                if (!self.quickDesigner) {
                    self.quickDesigner = new ListAuthoring();
                    self.quickDesigner.list = self;
                    self.quickDesigner.toggleQuick(true);
                }
                else {
                    self.quickDesigner.toggleQuick(false);
                    delete self.quickDesigner;
                }
                return false;
            });
            dom = document.createElement("div");
            dom.className = "s-list-designer-opener-cell";
            $(dom).append(self.$$designer).prependTo($$container);
        }
    },
    toggleRecordMenu: function(show, record){
        if (show && !record.menus) {
            record.menus = document.itemFactory.load(record.$$menuContainer, {
                $category: "links",
                $skin: "s-list-record-menus",
                $moreLimit: 5
            }, record);
        }
        if (record.menus) {
            var $$item = record.menus.$$item;
            if (show) {
                if ($$item.parent().length == 0) {
                    $$item.appendTo(record.menus.$$container);
                }
                // $$item.style.visibility = "visible";
            }
            else {
                $$item.detach();
                //$$item.style.visibility = "hidden";
            }
        }
    },
    _drawSize: function(){
        var width = this.$item.$width || "100%";
        if (width == "auto") {
        
        }
        else {
            this.$$list[0].style.width = width;
            this.$$core[0].style.width = "100%";
        }
    },
    appendPager: function($$container){
        (this._pager = new Pager(this)).create(this, $$container);
    },
    dispose: function(){
        if (this.$$designer) {
            this.$$designer.unbind();
        }
        if (this.quickFilterBox) {
            this.removeItem(this.quickFilterBox);
            delete this.quickFilterBox;
        }
        RawList.prototype.dispose.call(this);
    }
});
