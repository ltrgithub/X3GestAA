"use strict";
var helpers = require('syracuse-core/lib/helpers');
var localize = require('syracuse-ui/lib/common/controller/localize').list;
var FilterRecord = require("./quickFilterArticle").FilterRecord;
var Pager = require("./pager").Pager;
var RawList = require("syracuse-ui/lib/common/field/collection/list").RawList;
var authoringOpener = require("./authoring/authoringOpener");
var RecordReorder = require('./recordReorder').RecordReorder;

var GraphDecorator = require("./graphDecorator").GraphDecorator;

var _formatBuilders = {
    array: require("./builder/arrayBuilder").Builder,
    reference: require("./builder/referenceListBuilder").Builder,
    grid: require("./builder/hgridBuilder").Builder,
    vgrid: require("./builder/vgridBuilder").Builder,
    cardList: require("./builder/cardListBuilder").Builder,
};


function _doSpeedTest($speedTest, $resources){
    if ($resources) {
        var $mems = [];
        for (var ii = 0; ii < self.$item.$speedTest; ii++) {
            $resources.forEach(function(record, $recordIndex){
                record.$uuid = document.controller.generateUUID();
                $mems.push(record);
            });
        }
        $resources = $mems;
        alert("start display");
    }
}


function DesktopList(){
}

exports.DesktopList = helpers.defineClass(DesktopList, RawList, {
    _initilializeList: function(){
        RawList.prototype._initilializeList.call(this);
        if (this.$prototype.$cube) {
            if ((this.$item.$graphMode = this.$item.$graphMode || "both") == "both") {
                this.$item.$graphPosition = "top";
            }
        }
    },
    createBuilder: function(){
        if (this.$field.$item.$type == "application/x-reference") {
            debugger;
        }
        if (this.$field.$item.$type == "application/x-reference" && !this.$field.$newControl) {
            this.builder = new _formatBuilders.reference();
        }
        else {
            if (!this.$field.$item.$ || this.$field.$item.$type == "application/x-reference") {
                this.builder = new _formatBuilders.array();
            }
            else {
                var $format = this.$item.$format || "grid";
                this.builder = new _formatBuilders[$format]();
                this.builder.$layoutOptions = this.$layoutOptions.builder[$format] || null;
            }
        }
        this.builder.list = this;
        this.builder.initialize();
    },
    reloadBuilder: function(){
        var self = this;
        setTimeout(function(){
            document.controller.disposeObject(self.builder);
            $(self._listSlot).empty();
            self.createBuilder();
            self.builder.drawBuilder();
        }, 20);
    },
    applyDesignMetaData: function(metadata, onAuthoring){
        if (onAuthoring) {
            if (metadata.$format !== undefined) {
                this.$item.$format = metadata.$format;
                this.reloadBuilder();
            }
            if (metadata.$isQuickFilter !== undefined) {
                this.$item.$isQuickFilter = metadata.$isQuickFilter;
                this.reloadBuilder();
            }
            if (metadata.$itemsPerPage !== undefined) {
                this.$item.$itemsPerPage = metadata.$itemsPerPage;
                this.onNotifyRecordChange(this.$item.$itemsPerPage = metadata.$itemsPerPage, "$itemsPerPage");
            }
        }
        if (this.$prototype.$cube) {
            if (!this.graphDecorator) {
                this.graphDecorator = new GraphDecorator();
            }
            this.graphDecorator.applyGraphSettings(this, metadata);
        }
        return RawList.prototype.applyDesignMetaData.call(this, metadata, onAuthoring);
    },
    getAuthoringWidget: function(){
        return new authoringOpener.WidgetAuthoring();
    },
    ensureDiagnoseSlot: function(){
        if (!this.$$diagnose && this.$$dataValue) {
            var div = document.createElement("div");
            div.className = "s-field-diagnose";
            this.$$diagnose = $(this.$$dataValue[0].appendChild(div));
        }
        else {
            this.$$diagnose.empty();
        }
    },
    _appendCore: function(){
        var list = document.createElement("div");
        list.className = "s-list";
        this.$$list = $(this.$$dataValue[0].appendChild(list));
        
        var div = document.createElement("div");
        div.className = "s-list-topbar";
        this.$$topbar = $(list.appendChild(div));
        
        this._core = document.createElement("div");
        this._core.className = "s-list-core";
        list.appendChild(this._core);
        
        this._coreLeft = document.createElement("div");
        this._coreLeft.className = "s-list-core-left";
        this._coreLeft.style.display = "none";
        this._core.appendChild(this._coreLeft);
        
        this._listSlot = document.createElement("div");
        this._listSlot.className = "s-list-core-right";
        this._coreRight = this._core.appendChild(this._listSlot);
        
        this._appendAuthoringOpener();
        
        this.appendArticleMenus();
        this.appendPager();
    },
    _bindRecordEvent: function(){
        var self = this;
        self.$$item.delegate("a[data-s-capability]", "click", function(){
            if (!self.$isDisabled) {
                self.builder.doCapabilities(self.findRecord($(this)), this.getAttribute("data-s-capability"));
            }
            return false;
        }).delegate("[data-s-record]", "mouseenter mouseleave", function(event){
            if (!self.$isDisabled) {
                var isEnter = event.type == "mouseenter";
                var record = self.findRecord($(this));
                if (!self.$item.$isMenuRecordHidden) {
                    self.toggleRecordMenu(isEnter, record);
                }
                self.setCapabilitiesVisible(record, isEnter);
            }
            return false;
        });
    },
    setState: function(state){
        RawList.prototype.setState.call(this, state);
        if (this._records && this.$capability && state.$isDisabled !== undefined) {
            this._records.forEach(function(record, index){
                if (record.capabilities) {
                    Object.keys(record.capabilities).forEach(function(capability){
                        document.site.disableItem(record.capabilities[capability], state.$isDisabled);
                    });
                }
            });
        }
    },
    setCapabilitiesVisible: function(record, isVisible){
        if (!this.$isDisabled && record.capabilities) {
            document.site.toggleClass(record.capabilities.slot, "s-hover", isVisible);
        }
    },
    _appendCapabilities: function(record){
        if (record.capabilities) {
            document.site.removeDomChild(record.capabilities.slot);
            delete record.capabilities;
        }
        if (this.$capability.reorder) {
            this._appendCapability(record, "reorder");
        }
        if (this.$capability.insert) {
            this._appendCapability(record, "insert");
        }
        if (this.$capability["delete"]) {
            this._appendCapability(record, "delete");
        }
    },    
    _appendCapability: function(record, $capability){
        if (!record.capabilities) {
            record.capabilities = {
                slot: document.createElement("div")
            };
            record.capabilities.slot.className = this.$skin + "-record-actions";
            $(record.capabilities.slot).prependTo(record.$$value);
        }
        var btn = record.capabilities[$capability] = document.createElement("a");
        btn.className = this.$skin + "-record-" + $capability;
        btn.setAttribute("data-s-capability", $capability);
        if (this.$isDisabled) {
            document.site.disableItem(btn, this.$isDisabled);
        }
        record.capabilities.slot.appendChild(btn);
    },
    applyCapabilities: function(metaData){
        RawList.prototype.applyCapabilities.call(this, metaData);
        if (this.$capability.reorder) {
            if (!this.recordReorder) {
                (this.recordReorder = new RecordReorder()).setDraggable(this);
            }
        }
        else {
            if (this.recordReorder) {
                document.controller.disposeObject(this.recordReorder);
                delete this.recordReorder;
            }
        }
    },
    appendToCoreLeft: function(child){
        this._coreLeft.appendChild(child);
        this._coreLeft.style.display = "";
    },
    appendQuickFilter: function(){
        if (this.$item.$isQuickFilter && this.$facet != "$details") {
            (this.quickFilterBox = new FilterRecord()).loadRecord(this);
        }
    },
    appendArticleMenus: function(){
        var div = document.createElement("div");
        div.className = "s-list-menus-cell";
        this._menus = document.itemFactory.load($(this.$$topbar[0].appendChild(div)), {
            $id: this.id + "menus",
            $category: "links",
            $skin: this.$layoutOptions.menus
        }, this);
    },
    appendPager: function(){
        if (!this.$item.$isPagerHidden) {
            (this._pager = new Pager(this)).create(this, this.$$topbar);
        }
    },
    _appendAuthoringOpener: function(){
        if (this.$item.$isQuickDesignerEnabled !== false) {
            this.quickDesigner = new authoringOpener.QuickDesigner();
            this.quickDesigner.appendOpener(this)
        }
    },
    toggleRecordMenu: function(show, record){
        if (show && record.$$menuContainer && !record.menus) {
            record.menus = document.itemFactory.load(record.$$menuContainer, {
                $category: "links",
                $skin: this.builder.$layoutOptions.recordMenus,
                $moreLimit: 5
            }, record);
        }
        if (record.menus) {
            record.menus.$$item[0].style.visibility = show ? "" : "hidden";
            /*var $$item = record.menus.$$item;
             if (show) {
             if ($$item.parent().length == 0) {
             $$item.appendTo(record.menus.$$container);
             }
             }
             else {
             $$item.detach();
             }*/
        }
    },
    
    dispose: function(){
        delete this._menus;
        if (this.quickFilterBox) {
            this.removeItem(this.quickFilterBox);
            delete this.quickFilterBox;
        }
        RawList.prototype.dispose.call(this);
    }
});
