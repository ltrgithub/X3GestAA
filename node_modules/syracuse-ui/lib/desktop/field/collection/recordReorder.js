"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _localize = {
    moveItem: "move '{0}'"
};

function RecordReorder(){
}

exports.RecordReorder = helpers.defineClass(RecordReorder, null, {
    setDraggable: function(list, $$hotspot){
        var self = this;
        self.list = list;
        self._eventNamespace = ".recordReorder" + self.list.id;
        list.$$item.delegate("." + list.$skin + "-record-reorder", "mousedown" + self._eventNamespace, function(event){
            debugger;
            self.start(self.list.findRecord($(this)));
            return false;
        }).delegate("." + list.$skin + "-record-item-edit", "mousemove" + self._eventNamespace, function(event){
            if (self.sourceRecord) {
                self.moveDragImage(event, self.list.findRecord($(this)));
            }
            return false;
        });
    },
    bindEvent: function(){
    
    },
    start: function(record, $$boundary){
        var self = this;
        self.sourceRecord = record;
        self.$$boundary = $$boundary || $(self.list._body);
        self.boundary = self.$$boundary.offset();
        self.boundary.right = self.boundary.left + self.$$boundary.width();
        self.boundary.bottom = self.boundary.top + self.$$boundary.height();
        $(document).bind("mouseup" + self._eventNamespace, function(){
            if (self.targetRecord) {
                self.list.builder.onReorder(self.sourceRecord, self.targetRecord, self.$drag.$insert);
            }
            self.stop();
        }).bind("mousemove" + self._eventNamespace, function(event){
            if (!event.target || event.target && event.target.className.indexOf("s-author-drop-cue") < 0) {
                self.moveDragImage(event, null, true);
            }
            event.preventDefault();
        });
    },
    getDropAction: function(event, targetRecord){
        var $action = null;
        if (this.sourceRecord && this.sourceRecord != targetRecord) {
            var text = _localize.moveItem;
            $action = {
                $move: true
            };
            if (text) {
                this._ensureDragImage();
                $(this._info).text(text.replace("{0}", "move record"));
            }
        }
        return $action;
    },
    _calculateDropCuePosition: function(event){
        var isVertical = false;
        var offset = this.targetRecord.$$item.offset();
        this.$drag = {
            left: offset.left,
            top: offset.top,
            width: this.targetRecord.$$item.outerWidth(),
            height: this.targetRecord.$$item.outerHeight()
        };
        //calculateDropBoundary
        var xmargin = (this.$drag.width * 0.25);
        var ymargin = (this.$drag.height * 0.25);
        var $dropBoundary = {
            left: this.$drag.left + xmargin,
            right: this.$drag.left + this.$drag.width - xmargin,
            top: this.$drag.top + ymargin,
            bottom: this.$drag.top + this.$drag.height - ymargin
        };
        var $position = {
            top: this.$drag.top,
            left: this.$drag.left
        };
        var isAfter = false;
        if (isVertical) {
            isAfter = event.pageY > $dropBoundary.bottom;
            $position.top = this.$drag.top + (isAfter ? this.$drag.height : 0);
            $position.height = "0.6em";
            $position.width = this.$drag.width + "px";
        }
        else {
            isAfter = event.pageX > $dropBoundary.right;
            $position.top -= 3;
            $position.left = this.$drag.left + (isAfter ? (this.$drag.width + 3) : (-3));
            $position.width = "0.6em";
            $position.height = this.$drag.height + 6 + "px";
        }
        this.$drag.$insert = isAfter ? "insertAfter" : "insertBefore";
        return $position;
    },
    moveDragCue: function(event){
        var $position = null;
        if (event && this.targetRecord) {
            $position = this._calculateDropCuePosition(event);
        }
        if (!this._dropCue) {
            this._dropCue = document.createElement("div");
            this._dropCue.className = "s-author-drop-cue";
            document.site.$$container[0].appendChild(this._dropCue);
        }
        this._dropCue.className = "s-author-drop-cue s-author-drop-cue-field";
        if ($position) {
            this._dropCue.style.display = "block";
            var style = this._dropCue.style;
            style.top = $position.top + "px";
            style.left = $position.left + "px";
            style.width = $position.width;
            style.height = $position.height;
            style.display = "block";
        }
        else {
            this._dropCue.style.display = "none";
        }
    },
    _ensureDragImage: function(){
        if (!this._info) {
            this._info = document.createElement("div");
            this._info.style.display = "none";
            this._info.className = "s-author-drag-image";
            document.site.$$container[0].appendChild(this._info);
            $(this._info).text("move record");
        }
    },
    moveDragImage: function(event, targetRecord, isOut){
        this.$action = null;
        if (targetRecord) {
            this.$action = this.getDropAction(event, targetRecord);
        }
        
        var top = Math.max(event.pageY, this.boundary.top);
        var left = Math.max(event.pageX, this.boundary.left);
        top = Math.min(top, this.boundary.bottom);
        left = Math.min(left, this.boundary.right);
        
        var inBoundary = (event.pageX == left && event.pageY == top);
        this._ensureDragImage();
        if (!isOut && this.$action) {
            document.site.toggleClass(this._info, "s-drag-ok", true);
            this.targetRecord = targetRecord;
        }
        else {
            if (isOut) {
                $(this._info).text(_localize.moveItem.replace("{0}", "move record"));
            }
            document.site.toggleClass(this._info, "s-drag-ok", false);
            this.targetRecord = null;
        }
        this.moveDragCue(event);
        this._info.style.display = "";
        this._info.style.top = top + 15 + "px";
        this._info.style.left = left + 15 + "px";
    },
    stop: function(){
		document.site.removeDomChild(this._info);
		document.site.removeDomChild(this._dropCue);
        delete this._info;
        delete this._dropCue;
        delete this.sourceRecord;
        delete this.targetRecord;
        if (this._eventNamespace) {
            $(document).unbind(this._eventNamespace);
        }
    },
    dispose: function(){
        this.stop();
        if (this._eventNamespace && this.list && this.list.$$item) {
            this.list.$$item.undelegate(this._eventNamespace);
        }
        delete this.list
    }
});
