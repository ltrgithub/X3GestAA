"use strict";
var helpers = require('syracuse-core/lib/helpers');

function Pager(){
}

exports.Pager = helpers.defineClass(Pager, null, {
    create: function(list, $$container){
        var self = this;
        self.list = list;
        self._$$item = $("<div/>").addClass("s-pager").hide().appendTo($$container);
        self._$$item.delegate("a[data-s-page]", "click", function(event){
            var page = parseInt($(this).attr("data-s-page"), 10);
            var pageTotal = Math.ceil(self.list.$totalResults / self.list.$itemsPerPage);
            var newPage = Math.max(1, Math.min(page, pageTotal));
            self.list.fetch({
                startIndex: ((newPage - 1) * list.$itemsPerPage) + 1
            });
            return false;
        });
    },
    _appendLink: function(value, text){
        var link = document.createElement("a");
        link.className = "s-pager-link";
        link.setAttribute("data-s-page", value);
        return $(link).text(text || value);
    },
    draw: function(){
        var localize = document.controller.localize.list.pager;
        var $$range = $("<label/>").addClass("s-pager-range");
        this._$$item.empty().append($$range);
        var show;
        if (this.itemsPerPage) {
            this.list.removeItem(this.itemsPerPage);
            delete this.itemsPerPage;
        }
        if (this.serverSteps) {
            var page = this.list.getPage();
            this.serverSteps.forEach(function(step){
                if (page.$menus) {
                    delete page.$menus[step.$bind];
                }
                page.removeItem(step, true);
            });
        }
        this.serverSteps = [];
        if (this.list.$totalResults) {
            this._appendItemsPerPage();
            var pageTotal = Math.ceil(this.list.$totalResults / this.list.$itemsPerPage);
            var currentPageIndex = Math.ceil(this.list.$startIndex / this.list.$itemsPerPage);
            if (pageTotal <= 1) {
                $$range.text(this.list.$totalResults + " " + localize.totalRecords);
            }
            else {
                var lastRecordIndex = Math.min((this.list.$startIndex + this.list.$itemsPerPage) - 1, this.list.$totalResults);
                $$range.text(this.list.$startIndex + " - " + lastRecordIndex + " " + localize.itemOf + " " + this.list.$totalResults);
                var $$group = $("<div/>").addClass("s-pager-nav");
                var start = 1;
                var numLinkMax = 5;
                if (currentPageIndex > numLinkMax) {
                    var reminder = (currentPageIndex % numLinkMax);
                    start = (reminder == 0) ? (currentPageIndex - numLinkMax) + 1 : (currentPageIndex - reminder) + 1;
                }
                
                var end = (start + numLinkMax) - 1;
                
                end = Math.min(end, pageTotal);
                
                if (start > 1) {
                    $$group.append(this._appendLink(1)).append(this._appendLink((start - 1), "..."));
                }
                for (var page = start; page <= end; page++) {
                    var $$button = this._appendLink(page);
                    if (page == currentPageIndex) {
                        $$button.toggleClass("s-pager-current", true);
                    }
                    $$group.append($$button);
                }
                if (end < pageTotal) {
                    $$group.append(this._appendLink(end + 1, "...")).append(this._appendLink(pageTotal));
                }
                this._$$item.append($$group);
                show = true;
                
                this._appendServerStep({
                    $bind: "$previous",
                    $title: "<" + localize.prev
                });
                this._appendServerStep({
                    $bind: "$next",
                    $title: localize.next + ">"
                });
            }
        }
        else {
            this._appendItemsPerPage();
            this._appendServerStep({
                $bind: "$first",
                $title: localize.first
            });
            this._appendServerStep({
                $bind: "$previous",
                $title: "<" + localize.prev
            });
            this._appendServerStep({
                $bind: "$next",
                $title: localize.next + ">"
            });
            this._appendServerStep({
                $bind: "$last",
                $title: localize.last
            });
        }
        this._$$item[0].style.display = (show !== false) ? "" : "none";
    },
    _appendItemsPerPage: function(){
        if (this.list.$itemsPerPage) {
            var $$size = $("<div/>").addClass("s-pager-size");
            $("<label/>").addClass("s-pager-size-label").appendTo($$size).text("Page size:");
            this.itemsPerPage = document.itemFactory.load($("<div/>").addClass("s-pager-size-value").appendTo($$size), {
                $bind: "$itemsPerPage",
                $category: "field",
                $isEditMode: true,
                $inplace: true,
                $field: {
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: ["5", "10", "15", "20", "25", "50", "75", "100", "150", "200"].map(function(count){
                                return {
                                    $value: count,
                                    $title: count
                                };
                            })
                        }
                    }
                }
            }, this.list);
            $$size.appendTo(this._$$item);
            this.itemsPerPage.setDataValue(this.list.$itemsPerPage);
        }
    },
    _appendServerStep: function($step){
        var self = this;
        var step = document.itemFactory.load($("<div style='display:inline-block'/>").appendTo(self._$$item), {
            $category: "link",
            $bind: $step.$bind,
            $title: $step.$title,
            $skin: "s-pager-link"
        }, self.list.$prototype.$isFieldPager ? self.list : self.list.getPage());
        self.serverSteps.push(step);
        step.onMenuClick = function(){
            var $url = this.$url;
            setTimeout(function(){
                self.list.fetch({}, {
                    $url: $url
                });
            }, 100);
            return false;
        };
    },
    dispose: function(){
        if (this._$$item) {
            this._$$item.undelegate();
        }
        delete this.itemsPerPage;
        delete this.list;
    }
});
