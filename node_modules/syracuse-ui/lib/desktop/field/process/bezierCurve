"use strict";

function BezierCurve() {};

exports.BezierCurve null helpers.defineClass(BezierCurve, null, {
	//determine la quadratic
	quadratic: function(t, a, b, c) {
		return (1 - t) * (1 - t) * a + 2 * (1 - t) * t * b + t * t * c;
	},

	//récupère les 3 points de la forme
	setPoints: function(x1, y1, x2, y2, x3, y3) {
		this.x1 = x1;
		this.y1 = y1;
		this.x2 = x2;
		this.y2 = y2;
		this.x3 = x3;
		this.y3 = y3;
	},

	//determine les points de controle
	bezierControl: function(t1, t2, a, b, c) {
		return a + (t1 + t2) * (b - a) + t1 * t2 * (c - 2 * b + a);
	},

	//determine les vecteurs
	bezierVertex: function() {
		this.vm = -(x2 - .5 * x3 - .5 * x1) / (y2 - .5 * y3 - .5 * y1);
		this.vt = (-vm * (x2 - x1) + (y2 - y1)) / (vm * (x1 - 2 * x2 + x3) - (y1 - 2 * y2 + y3));
		this.vx = bezierQuadratic(vt, x1, x2, x3);
		this.vy = bezierQuadratic(vt, y1, y2, y3);
		this.va = bezierAngle(vt);
	},

	//determine angle de rotation
	bezierAngle: function(t) {
		return (Math.atan2(bezierDerivative(t, y1, y2, y3), bezierDerivative(t, x1, x2, x3)));
	},

	//determine la dérivé
	bezierDerivative: function(t, a, b, c) {
		return 2 * a * (t - 1) + 2 * b * (1 - 2 * t) + 2 * c * t;
	},

	// determine la projection
	bezierProjection: function() {

		this.ra = distance(x1, y1, vx, vy);
		this.rb = distance(vx, vy, x3, y3);
		this.alfa = va - angle(x1, y1, vx, vy);
		this.beta = angle(vx, vy, x3, y3) - va;
		this.rax = ra * Math.cos(alfa);
		this.ray = ra * Math.sin(alfa);
		this.rbx = rb * Math.cos(beta);
		this.rby = rb * Math.sin(beta);
	},

	// determine la longueur de l'arc
	bezierArcLength: function() {
		this.l1 = .5 * parabolaArcLength(ray, 2 * Math.abs(rax));
		this.l2 = .5 * parabolaArcLength(rby, 2 * Math.abs(rbx));
		this.arc = rax < 0 || rbx < 0 ? Math.abs(l2 - l1) : l1 + l2;
	},

	// determine la distance
	distance: function(x1, y1, x2, y2) {
		return Math.sqrt(x2 * x2 + x1 * x1 - 2 * x1 * x2 + y2 * y2 + y1 * y1 - 2 * y1 * y2);
	},

	// determine l'angle
	angle: function(x1, y1, x2, y2) {
		return Math.atan2(y2 - y1, x2 - x1);
	},

	// determine la longueur de l'arc de la parabole
	parabolaArcLength: function(a, b) {
		return .5 * Math.sqrt(b * b + 16 * a * a) + ((b * b) / (8 * a)) * Math.log((4 * a + Math.sqrt(b * b + 16 * a * a)) / b);
		/*if (arc.toString() == "NaN")
			   {
							   return 0;
			   }
			   return arc;
			   */
	}
});