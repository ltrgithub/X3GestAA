"use strict";
//http://www.openweb.eu.org/articles/formulaire_accessible
var helpers = require('syracuse-core/lib/helpers');
var _dateApi = require('syracuse-core/lib/types/date');
var _timeApi = require('syracuse-core/lib/types/time');

function Calendar(){
}

exports.Calendar = helpers.defineClass(Calendar, null, {
    bindEvents: function(bind){
        var self = this;
        if (self.$$item) {
            if (bind) {
                self.$$item.delegate(".s-calendar-prev,.s-calendar-next", "click", function(){
                    var $$link = $(this);
                    self._changePeriode($$link.hasClass("s-calendar-prev"), $$link.attr("data-s-period"));
                    return false;
                }).delegate("td.s-calendar-day-link", "click", function(){
                    self.field.setPickerValue(_dateApi.fromInternalValue($(this).data("value")).toString(self.field.localFormat));
                    return false;
                });
                self._$$today.bind("click", function(){
                    self._currentDate = _dateApi.today();
                    self._drawBody();
                    return false;
                });
                self._$$quick.bind("click", function(){
                    if (!self.$$quickList) {
                        self.$$quickList = $("<nav class='s-calendar-quick-list'/>");
                        var localize = document.controller.localize.datePicker.quickMenu;
                        Object.keys(localize.interval).forEach(function(link){
                            self.$$quickList.append("<div class='s-calendar-quick'><a class='s-calendar-quick-link'>" + localize.begin + "</a>/<a class='s-calendar-quick-link'>" + localize.end + "</a>" + localize.interval[link] + "</div>");
                        });
                        self.$$quickList.appendTo(self.$$item).delegate(".s-calendar-quick", "click", function(event){
                            var isBegin = $(event.target).index() == 0;
                            var period = ["Year", "Quarter", "Month", "Week"][$(this).index()];
                            var param;
                            if (period == "Week") {
                                param = 1;
                            }
                            self._currentDate = self._currentDate[(isBegin ? "begOf" : "endOf") + period](param);
                            self._drawBody();
                            self.$$quickList.hide();
                            return false;
                        })
                    }
                    if (self.$$quickList.is(":visible")) {
                        self.$$quickList.hide();
                    }
                    else {
                        self.$$quickList.show().position({
                            my: "left bottom",
                            at: "right bottom",
                            of: self._$$quick
                        });
                    }
                    return false;
                });
                self._$$monthYearLink.bind("click", function(){
                    self._toggleMonthYear();
                    return false;
                });
            }
            else {
                self.$$item.undelegate();
                if (self.$$quickList) {
                    self.$$quickList.undelegate();
                }
                self._$$quick.unbind();
                self._$$today.unbind();
                self._$$monthYearLink.unbind();
            }
        }
    },
    create: function(field){
        this.$$item = $("<div class='s-calendar'/>").hide().appendTo(field.$$item);
        var value = field.$$input.val();
        this._selectedDate = value ? _dateApi.parse(value, field.localFormat) : _dateApi.today();
        this._currentDate = _dateApi.fromInternalValue(this._selectedDate._value);
        this.field = field;
        this._createCore();
        
        this._drawBody();
        this.bindEvents(true);
    },
    remove: function(){
        this.$$item.remove();
        this.dispose();
    },
    _createCore: function(){
        this._$$table = $("<table class='s-calendar-content' cellspacing='0'/>");
        
        var $$head = $("<thead/>");
        $$head.append("<tr><th colspan='8' class='s-calendar-month-year'><a class='s-calendar-prev' data-s-period='month'/><a class='s-calendar-month-year-link'/><a class='s-calendar-next' data-s-period='month'/></th></tr>");
        this._$$monthYearLink = $$head.find(".s-calendar-month-year-link");
        var $$row = $("<tr/>");
        $$row.html("<th class='s-calendar-week-day'/>");
        [1, 2, 3, 4, 5, 6, 0].forEach(function(day){
            $$row.append($("<th class='s-calendar-week-day'/>").attr("title", _dateApi.dayName(day)).text(_dateApi.dayName(day, true)));
        });
        $$head.append($$row);
        
        $$row = $("<tr/>");
        $$row.append("<td colspan='4' class='s-calendar-foot-week'><a class='s-calendar-prev' data-s-period='week'/><label/><a class='s-calendar-next' data-s-period='week'/></td>");
        this._$$weekNumber = $$row.find("label");
        var $$cell = $("<td colspan='4' class='s-calendar-foot-today'/>");
        $$cell.append(this._$$today = $("<a class='s-calendar-today-link'/>")).append(this._$$quick = $("<a class='s-calendar-quick-btn'/>")).appendTo($$row);
        this._$$today.text(document.controller.localize.datePicker.today);
        var $$foot = $("<tfoot/>").append($$row);
        
        this._$$table.append($$head).append("<tbody/>").append($$foot);
        this._$$table.appendTo(this.$$item);
    },
    
    _drawBody: function(){
        var curMonth = this._currentDate.month;
        var month = _dateApi.monthName(curMonth);
        this._$$monthYearLink.text(month + " " + this._currentDate.year);
        
        var $$body = this._$$table.children("tbody").empty();
        
        var curDate = _dateApi.fromInternalValue(this._currentDate._value);
        var begOfMonth = curDate = curDate.begOfMonth();
        curDate = curDate.begOfWeek(1);
        for (var weekRow = 0; weekRow < 6; weekRow++) {
            var $$row = $("<tr/>");
            var weekDay = (weekRow == 0) ? begOfMonth : curDate;
            $$row.append($("<td class='s-calendar-week-num'/>").text(weekDay.week));
            for (var day = 0; day < 7; day++) {
                var $$cell = $("<td  class='s-calendar-day-link'/>").append($("<a/>").text(curDate.day)).data("value", curDate._value);
                if (curMonth != curDate.month) {
                    $$cell.addClass("s-calendar-other-month");
                }
                if (this._currentDate.equals(curDate)) {
                    $$cell.addClass("s-calendar-select").children("a").toggleClass("s-calendar-select", true);
                }
                $$row.append($$cell);
                curDate = curDate.addDays(1);
            }
            $$body.append($$row);
        }
        this._$$weekNumber.text(document.controller.localize.datePicker.week + " " + this._currentDate.week);
    },
    _toggleMonthYear: function(){
        var self = this;
        if (!self._monthYear) {
            self._monthYear = new CalendarMontYear();
            self._monthYear.create(self.$$item, self._currentDate, function(newDate){
                self._currentDate = newDate;
                setTimeout(function(){
                    self._drawBody();
                    self._toggleMonthYear();
                }, 200);
                return true;
            });
            self._$$table.hide();
            self._monthYear.toggle(true);
        }
        else {
            self._$$table.show();
            self._monthYear.toggle(false);
            self._monthYear.dispose();
            delete self._monthYear;
        }
    },
    _showQuickMenu: function($$link){
    
    },
    _changePeriode: function(isPrev, period){
        if (period == "month") {
            this._currentDate = this._currentDate.addMonths(isPrev ? -1 : 1);
        }
        else {
            this._currentDate = this._currentDate.addDays(isPrev ? -7 : 7);
        }
        this._drawBody();
    },
    dispose: function(){
        this.bindEvents(false);
        this.field = null;
    }
});

function CalendarMontYear(){
    var self = this;
    var _$$item, _dateValue, _close;
    
    self.create = function($$parent, dateValue, close){
        _close = close;
        _dateValue = dateValue;
        _$$item = $("<table class='s-calendar-my-table'/>").append("<colgroup span='2' width='22,5%'/><colgroup span='2' width='5%'/><colgroup span='2' width='22,5%'/>");
        var $$tbody = $("<tbody/>");
        var year = _dateValue.year;
        for (var ii = 0; ii < 6; ii++) {
            var $$row = $("<tr/>");
            drawCell(ii + 1, _dateApi.monthName(ii + 1, true), _dateValue.month).appendTo($$row);
            drawCell(ii + 7, _dateApi.monthName(ii + 7, true), _dateValue.month).appendTo($$row);
            if (ii == 0) {
                $$row.append("<td rowspan='6'/><td  class='s-calendar-my-sep' rowspan='6'/>");
                $$row.append("<td class='s-calendar-my-link-cell'><a class='s-calendar-prev' data-s-period='year'/></td>");
                $$row.append("<td class='s-calendar-my-link-cell'><a class='s-calendar-next' data-s-period='year'/></td>");
            }
            else {
                var cuYear = _dateValue.year + ii - 1;
                drawCell(cuYear, cuYear, _dateValue.year).appendTo($$row);
                drawCell(cuYear + 5, cuYear + 5, _dateValue.year).appendTo($$row);
            }
            $$row.appendTo($$tbody);
        }
        var $$foot = $("<tfoot><tr><td colspan='6' class='s-calendar-my-btns'/></tr></tfoot>");
        var localize = document.controller.localize.datePicker;
        $$foot.find(".s-calendar-my-btns").append($("<a class='s-calendar-my-btn'/>").text(localize.ok)).append($("<a class='s-calendar-my-btn'/>").text(localize.cancel));
        _$$item.append($$tbody).append($$foot).hide().appendTo($$parent)
        bindEvents(true);
    };
    
    function drawCell(value, text, selValue){
        var $$cell = $("<td  class='s-calendar-my-item'>").append($("<a/>").text(text).data("value", value));
        if (value == selValue) {
            $$cell.addClass("s-calendar-select").children("a").toggleClass("s-calendar-select", true);
            
        }
        return $$cell;
    }
    self.toggle = function(show){
        _$$item.toggle(show);
    };
    function changeYear(isPrev){
        var $$rows = _$$item.find("tbody > tr");
        var step = isPrev ? (-10) : 10;
        for (var ii = 1; ii < $$rows.length; ii++) {
            $($$rows[ii]).children("td").slice(2).each(function(){
                var $$cell = $(this);
                var $$link = $$cell.children("a");
                var newVal = parseInt($$link.text()) + step;
                var isSelected = newVal == _dateValue.year;
                $$cell.toggleClass("s-calendar-select", isSelected).children("a").toggleClass("s-calendar-select", isSelected);
                $$link.text(newVal);
            });
        }
    }
    function clickCell($$cell){
        var isYear = $$cell.index() >= 2;
        _$$item.find(".s-calendar-select").each(function(){
            var $$selected = $(this);
            var isSelectedYear = $$selected.index() >= 2;
            if (isYear == isSelectedYear) {
                $$selected.removeClass("s-calendar-select").children("a").toggleClass("s-calendar-select", false);
            }
        });
        $$cell.toggleClass("s-calendar-select", true).children("a").toggleClass("s-calendar-select", true);
        return false;
    };
    function close($$link){
        if ($$link.index() == 0) { //ok
            var $$selected = _$$item.find(".s-calendar-select");
            var isFirstYear = $($$selected[0]).index() >= 2;
            var $$month = $($$selected[isFirstYear ? 1 : 0]);
            var month = $$month.parent().index() + 1;
            if ($$month.index() == 1) {
                month += 6;
            }
            var year = parseInt($($$selected[isFirstYear ? 0 : 1]).text());
            _dateValue = _dateApi.fromJsDate(new Date(year, month - 1, _dateValue.day));
        }
        _close(_dateValue);
    }
    
    function bindEvents(bind){
        if (bind) {
            _$$item.delegate(".s-calendar-prev,.s-calendar-next", "click", function(){
                changeYear($(this).hasClass("s-calendar-prev"));
                return false;
            }).delegate(".s-calendar-my-btn", "click", function(){
                close($(this));
                return false;
            }).delegate(".s-calendar-my-item", "click", function(){
                clickCell($(this));
                return false;
            });
        }
        else {
            _$$item.undelegate();
        }
    }
    
    self.dispose = function(){
        bindEvents(false);
        _$$item = _dateValue = _close = null;
    };
};

function TimeChoice(){

}

exports.TimeChoice = helpers.defineClass(TimeChoice, null, {

    create: function(field, options){
        var self = this;
        self.$$item = $("<div class='s-time-choice'/>").hide().appendTo(field.$$item);
        options = options || {};
        self.columns = options.columns || 3;
        self.interval = options.interval || 60;
        self.curTime = field.$$input.val() ? _timeApi.parse(field.$$input.val(), field.localFormat) : _timeApi.now();
        self.field = field;
        //var selectedDate = field.$$input.val() || _timeApi;
        //var curTime = _timeApi.now();
        self._createCore();
        self.bindEvents(true);
    },
    
    remove: function(){
        this.$$item.remove();
        this.dispose();
    },
    
    dispose: function(){
        this.bindEvents(false);
        this.field = null;
    },
    
    _createCore: function(){
        var self = this;
        
        var cellCount = (24 * 60) / self.interval;
        var rowCount = cellCount / self.columns;
        
        var $$core = $("<table class='s-time-choice-table' cellspacing='0' cellpadding='0'/>");
        $$core.append("<tr><th class='s-time-choice-th' colspan='" + self.columns + "'>" + document.controller.localize.timePicker.title + "</th></tr>");
        var cell = 0;
        var timeHour = _timeApi.parse("00:00:00");
        for (var rr = 0; rr < rowCount; rr++) {
            var $$row = $("<tr>");
            for (var col = 0; col < self.columns; col++) {
                var $$td = $("<td>").addClass('s-time-choice-td');
                var $$a = cell < cellCount ? $("<a>").addClass('s-time-choice-a').text(timeHour.toString(self.field.localFormat)).appendTo($$td) : "";
                if ($$a && timeHour.hour == self.curTime.hour) 
                    $$a.addClass('s-time-select');
                $$row.append($$td);
                timeHour = timeHour.addMinutes(self.interval);
                cell++;
            }
            $$core.append($$row);
        }
        self.$$item.append($$core);
    },
    
    bindEvents: function(bind){
        var self = this;
        if (self.$$item) {
            if (bind) { // bind and delegate
                self.$$item.delegate(".s-time-choice-a", "click", function(){
                
                    // remove previous select state
                    self.$$item.find('.s-time-select').each(function(){
                        $(this).removeClass('s-time-select');
                    });
                    
                    // set select state
                    $(this).addClass('s-time-select');
                    
                    // set input value
                    self.field.setPickerValue($(this).text());
                    
                    return false;
                });
            }
            else { // unbind and undelegate
                self.$$item.undelegate();
            }
        }
    }
});

exports.Calendar = Calendar;
exports.TimeChoice = TimeChoice;

