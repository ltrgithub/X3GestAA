"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ChoiceField = require('syracuse-ui/lib/common/field/choiceField').ChoiceField;
var DesktopChoiceFieldAuthoring = require('./choiceFieldAuthoring').DesktopChoiceFieldAuthoring;

var _formatAdpater = {
    $combo: {
        setDataValue: function(field, value){
            field.$selectedEnum = field.$listSelection = field._findEnum(value);
            var $title = field.$selectedEnum ? field.$selectedEnum.$title : "";
            if (field.$isEditMode) {
                field.currentValue = value;
                field.$$input.val($title);
            }
            else {
                field.$$dataValue.text($title);
            }
        },
        getInputValue: function(field){
            return field.$selectedEnum ? field.$selectedEnum.$value : null;
        },
        render: function(field){
            field.$enum = field.$field.$value.$constraints.$enum;
            if (field.$isEditMode) {
                field.$skinItem = field.$skin + "-choice-list-item";
                (field.$$input = $("<input type='text'/>"))[0].className = field.$skinInput;
                var btn = document.createElement("a");
                btn.className = field.$skin + "-choice-picker";
                field.$$pickerBtn = $(btn).bind("click", function(){
                    if (!field.$isDisabled) {
                        if (!field.$$list.is(":visible")) {
                            field.formatAdpater.fillList(field);
                        }
                        field.formatAdpater.toggleList(field);
                    }
                });
                var div = document.createElement("div");
                div.className = field.$skinInput + "-box";
                var $$box = $(div).append(field.$$input).append(field.$$pickerBtn);
                field.$$list = $("<div/>").addClass(field.$skin + "-choice-list").hide();
                field.$$dataValue.append($$box).append(field.$$list);
                
                field.bindEvents = function(){
                    field.$$list.delegate("a[data-s-index]", "click", function(){
                        field.$$list.children().toggleClass("s-choice-item-selected", false);
                        field.$selectedEnum = field.$listSelection = field.$enum[$(this).toggleClass("s-choice-item-selected", true).attr("data-s-index")];
                        field.$$input.val(field.$selectedEnum.$title).change();
                        field.formatAdpater.toggleList(field, false);
                        field.focus();
                        return false;
                    });
                };
                field.bindEvents();
            }
        },
        dispose: function(field){
            if (field.$$list) {
                field.$$list.undelegate();
            }
        },
        fillList: function(field, filter){
            field.$$list.empty();
            //var filterReg = filter ? new RegExp("(" + filter + ")", "ig") : null;
            var filterReg = filter ? new RegExp("(^" + filter + ")", "i") : null;
            
            field.$enum.forEach(function($enum, index){
                var html;
                if (filterReg) {
                    if (filterReg.test($enum.$title)) {
                        html = $enum.$title.replace(filterReg, "<strong class='s-auto-complete-filter'>$1</strong>");
                    }
                }
                else {
                    html = $enum.$title;
                }
                if (html) {
                    var $e$a = document.createElement("a");
                    $e$a.className = field.$skinItem;
                    $e$a.setAttribute("data-s-index", index);
                    var $$item = $($e$a).append(html);
                    if (field.currentValue == $enum.$value) {
                        $e$a.className += " s-choice-item-selected";
                    }
                    field.$$list.append($$item);
                }
            });
            if (filterReg && field.formatAdpater.getComboListItems(field).length == 0) {
                field.$$list.text(document.controller.localize.field.choiceFieldNoMatch);
            }
        },
        selectText: function(input, start, end){
            if (input.createTextRange) {
                var selRange = input.createTextRange();
                selRange.collapse(true);
                selRange.moveStart('character', start);
                selRange.moveEnd('character', end - start);
                selRange.select();
            }
            else 
                if (input.selectionStart) {
                    input.selectionStart = start;
                    input.selectionEnd = end;
                }
        },
        getComboListItems: function(field){
            return field.$$list.children("a");
        },
        toggleList: function(field, show){
            field.$$item.attr("id", field.id);
            field.$$list.css("min-width", field.$$input.parent().width());
            if (!field.listPopup) {
                field.focus();
                field.listPopup = document.site.createPopup({
                    page: field.boxParent.getPage(),
                    $$popup: field.$$list,
                    position: {
                        my: "left top",
                        at: "left bottom",
                        of: field.$$input
                    },
                    closeHandler: function(){
                        field.listPopup = null;
                        return true;
                    },
                    boundarySelector: "#" + field.id
                });
            }
            else {
                field.listPopup.close();
            }
        },
        onKeyUp: function(field, $$input, event){
            switch (event.keyCode) {
                case 27:
                    field.$$input.val(field.$selectedEnum ? field.$selectedEnum.$title : "");
                    field.formatAdpater.toggleList(field, false);
                    break;
                case 40:
                case 38:
                    var current = field.$listSelection ? field.$listSelection.$index : -1;
                    var newIndex = (event.keyCode == 40) ? Math.min(current + 1, field.$enum.length - 1) : Math.max(0, current - 1);
                    field.$$list.children().toggleClass("s-choice-item-selected", false).filter("[data-s-index=" + newIndex + "]").toggleClass("s-choice-item-selected", true);
                    field.$$input.val((field.$listSelection = field.$enum[newIndex]).$title);
                    break;
                case 37:
                case 39:
                    break;
                default:
                    var filter = field.$$input.val();
                    field.formatAdpater.fillList(field, filter);
                    var $$filtered = field.formatAdpater.getComboListItems(field);
                    if ($$filtered.length > 0) {
                        var $$first = $($$filtered[0]);
                        if (event.keyCode != 8) {
                            field.$listSelection = field.$enum[$$first.attr("data-s-index")];
                            field.formatAdpater.selectText(field.$$input.val(field.$listSelection.$title)[0], filter.length, field.$listSelection.$title.length);
                        }
                        if (event.keyCode == 13) {
                            $$first.click();
                            return;
                        }
                    }
                    field.formatAdpater.toggleList(field, true);
                    break;
            }
            return true;
        },
        applyDesignMetaData: function(){
        }
    },
    $radios: {
        setDataValue: function(field, value){
            field.$selectedEnum = field._findEnum(value);
            if (field.$isEditMode) {
                field.currentValue = value;
                if (field.$selectedEnum) {
                    field.$$dataValue.find("input[value='" + field.$selectedEnum.$index + "']").attr("checked", true);
                }
            }
            else {
                field.$$dataValue.text(field.$selectedEnum ? field.$selectedEnum.$title : "");
            }
        },
        getInputValue: function(field){
            var index = field.$$fieldset.find("input").filter(":checked").val();
            return (index == null) ? null : field.$enum[index].$value;
        },
        _initLayout: function(field){
            if ((field.$item.$radiosLayout = field.$item.$radiosLayout || "row") != "row") {
                field._curCol = 0;
                return "_renderColumns";
            }
            return "_renderRow";
        },
        _renderRow: function(field, $$choice){
            $$choice[0].style.display = "inline-block";
            field.$$fieldset.append($$choice);
        },
        _renderColumns: function(field, $$choice){
            if (!field._$$cols) {
                field._$$table = $("<div class='s-field-rd-table'/>").appendTo(field.$$fieldset);
                field._$$cols = [];
                for (var ii = 0, colCount = parseInt(field.$item.$radiosLayout); ii < colCount; ii++) {
                    field._$$cols[ii] = $("<div class='s-field-rd-col'/>").appendTo(field._$$table);
                }
            }
            field._$$cols[field._curCol].append($$choice);
            if (++field._curCol == field._$$cols.length) {
                field._curCol = 0;
            }
        },
        render: function(field){
            var self = this;
            field.$enum = field.getDataType().$constraints.$enum;
            if (field.$isEditMode) {
                var $skin = field.$skin + "-choice-rd";
                var $skinItem = $skin + "-item";
                var $skinTitle = $skin + "-title";
                var $skinInput = $skin + "-radio";
                var $groupName = document.controller.generateUUID();
                field.$$fieldset = $("<fieldset/>").addClass($skin).appendTo(field.$$dataValue);
                field._$$choices = [];
                var renderLayout = self._initLayout(field);
                field.$enum.forEach(function($enum, index){
                    var id = $groupName + index;
                    var $$input = $("<input type='radio'/>").addClass($skinInput).attr("id", id).attr("name", $groupName).val(index);
                    $$input[0].setAttribute("data-s-field", field.id);
                    var html = document.createElement("label");
                    html.className = $skinTitle;
                    html.setAttribute("for", id);
                    var $$title = $(html).text($enum.$title);
                    
                    html = document.createElement("div");
                    html.className = $skinItem;
                    var $$choice = $(html).append($$input);
                    self[renderLayout](field, $$choice);
                    field._$$choices.push($$choice.append($$title));
                });
            }
            else {
                field.$$dataValue.addClass("s-choice-combo");
            }
        },
        applyDesignMetaData: function(field, metadata, onAuthoring){
            if (metadata.$radiosLayout !== undefined) {
                var self = this;
                field._curCol = 0;
                field.$item.$radiosLayout = metadata.$radiosLayout;
                var renderLayout = self._initLayout(field);
                if (field._$$cols) {
                    field._$$choices.forEach(function($$choice){
                        $$choice.detach();
                    });
                    field.$$fieldset.empty();
                    delete field._$$cols;
                    delete field._$$table;
                }
                field._$$choices.forEach(function($$choice){
                    $$choice[0].style.display = "";
                    self[renderLayout](field, $$choice);
                });
            }
        },
        dispose: function(field){
            delete field._$$cols;
            delete field._$$table;
        }
    }
};


function DesktopChoiceField(){
}

exports.DesktopChoiceField = helpers.defineClass(DesktopChoiceField, ChoiceField, {
    applyDesignMetaData: function(metadata, onAuthoring){
        ChoiceField.prototype.applyDesignMetaData.call(this, metadata, onAuthoring);
        if (metadata.$format && metadata.$format != this.$item.$format) {
            this.formatAdpater.dispose(this);
            this.$item.$format = metadata.$format;
            this.$$dataValue.empty();
            this.render();
            this.applyMandatoryState(this.$field);
            this.applyHiddenState(this.$field);
            this.applyDisableState(this.$field);
            if (this.currentValue != null) {
                this.setDataValue(this.currentValue)
            }
        }
        this.formatAdpater.applyDesignMetaData(this, metadata, onAuthoring);
    },
    setDataValue: function(value){
        this.formatAdpater.setDataValue(this, value);
    },
    getAuthoringWidget: function(){
        return new DesktopChoiceFieldAuthoring();
    },
    getInputValue: function(){
        return this.formatAdpater.getInputValue(this);
    },
    render: function(){
        this.$item.$format = this.$item.$format || this.$field.$format;
        if (this.$item.$filterMode || this.$item.$format == undefined && (this.$field.$value.$constraints.$enum.length > (this.$item.$radiosMax || 4))) {
            this.$item.$format = "$combo";
        }
        (this.formatAdpater = _formatAdpater[this.$item.$format = (this.$item.$format || "$radios")]).render(this);
    },
    onKeyUp: function($$input, event){
        if (this.formatAdpater.onKeyUp) {
            return this.formatAdpater.onKeyUp(this, $$input, event);
        }
    },
    applyDisableState: function(state){
        if (state.$isDisabled !== undefined) {
            this.$isDisabled = state.$isDisabled;
            this.$$item.attr("disabled", state.$isDisabled);
            if (this.$$title) {
                this.$$title.toggleClass("s-disabled", state.$isDisabled);
            }
            this.$$dataValue.toggleClass("s-disabled", state.$isDisabled).find("input").attr("disabled", state.$isDisabled);
        }
    },
    dispose: function(){
        if (this.formatAdpater) {
            this.formatAdpater.dispose(this);
        }
        delete this.formatAdpater;
        ChoiceField.prototype.dispose.call(this);
    }
});
