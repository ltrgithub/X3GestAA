"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/common/field/field').Field;
var rtf = require("syracuse-rtf/lib/rtf");

// require('syracuse-ui/deps/cleditor/jquery.cleditor.min');
require('syracuse-ui/deps/cleditor/jquery.cleditor');

var ie = $.browser.msie, fontSizes = "8,9,10,11,12,14,16,18,20,22,24,26,28,36,48,72";

(function($){
    var $$popupContent = $('<div>'), $$list = $('<select>').attr('size', '8');
    $$popupContent.append($$list);
    $.each(fontSizes.split(","), function(i, size){
        $('<option>').append(size).appendTo($$list);
        // $('<div>').append($('<span>').prepend(size)).appendTo($$popupContent);
    });
    
    // font size button
    $.cleditor.buttons.size.popupContent = $$popupContent.html();
    $.cleditor.buttons.size.popupClass = "cleditorList";
    $.cleditor.buttons.size.popupClick = function(e, data){
        // TODO: fix text selection which is reset after inserting html contents. see createSelection
        // var editor = data.editor,
        //     text = editor.selectedText();
        // // var range = _getRange(editor);
        
        // var value = target.value || data.value;
        // var html = '<span style="font-size:' + e.target.value + 'pt">' + text + '</span>';
        // editor.execCommand("inserthtml", html, null, data.button);
        // editor.hidePopups();
        // editor.focus(editor);
        // range && range.select();
        // return false;
        data.command = "inserthtml";
        data.value = '<span style="font-size:' + e.target.value + 'pt; ">' + data.editor.selectedText() + '</span>';
        return true;
    };
    
    // // indent button
    // $.cleditor.buttons.indent.buttonClick = function(e, data) {
    //     var editor = data.editor,
    //         text = editor.selectedText();
    //     var html = '<div style="margin-left: 4em;">' + text + '</div>';
    //     editor.execCommand("inserthtml", html, null, data.button);
    //     editor.focus(editor);
    //     return false;
    // };
    // // outdent button
    // $.cleditor.buttons.outdent.buttonClick = function(e, data) {
    //     var editor = data.editor,
    //         text = editor.selectedText();
    //     var html = '<div style="margin-left: 4em;">' + text + '</div>';
    //     editor.execCommand("inserthtml", html, null, data.button);
    //     editor.focus(editor);
    //     return false;
    // };
})(jQuery);

// function _getRange(editor) {
//     if (ie) return _getSelection(editor).createRange();
//     return _getSelection(editor).getRangeAt(0);
// }
// function _getSelection(editor) {
//     if (ie) return editor.doc.selection;
//     return editor.$frame[0].contentWindow.getSelection();
// }
//
// temporary hack to change the value each time
// var _rtf;
// convert helpers

// function _rtf2Html(rtf) {
//     // _rtf = rtf;
//     var root = rtfParser.parse(rtf);
//     var rtfDom = rtfInterpreter.interpret(root);
//     return htmlBuilder.buildHtml(root, rtfDom);
// };

// function _html2Rtf(html) {
//     return rtfBuilder.buildRtf(html);
//     // temporary hack to change the value each time
//     //return _rtf.replace(/hellou?\s+([^\s]*\s+)?\bRTF\b/gi, "Hello " + _randomString(5) + " RTF");
// };

function _randomString(length){
    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');
    
    if (!length) {
        length = Math.floor(Math.random() * chars.length);
    }
    
    var str = '';
    for (var i = 0; i < length; i++) {
        str += chars[Math.floor(Math.random() * chars.length)];
    }
    return str;
}

function HtmlEditor(){
}

exports.HtmlEditor = helpers.defineClass(HtmlEditor, Field, {
    setDataValue: function(value){
        // console.log('htmlEditor.setDataValue');
        if (this.currentValue != value) {
            this.currentValue = value;
            // var styles = Array.isArray(value.$styles) ? styles = value.$styles.join("\n") : styles = value.$styles;
            // this._editor.options.headStyle = styles || this._editor.options.headStyle;
            this._setContents(value, true);
        }
    },
    render: function(){
        // console.log('htmlEditor.render');
        var self = this;
        var id = document.controller.generateUUID();
        self.$$dataValue.attr("id", "v" + id);
        if (this.$isEditMode) {
            self.standalone = this.boxParent && this.boxParent.$prototype && (this.boxParent.$prototype.$baseUrl === "/sdata/x3stb/erp/stubs");
            
            // var css = ((this.$item.$css) ? this.$item.$css + " " : "") + this.$skinInput;
            // this.$$input = $('<textarea>').attr('id', "i" + id).attr('name', "i" + id).addClass(css).appendTo(self.$$inputValue);
            var area = $('<textarea>').attr('id', "i" + id).attr('name', "i" + id).appendTo(self.$$inputValue);
            // self._editor = area.cleditor({
            self._editor = area.cleditor({
                // width not including margins, borders or padding
                width: self.$item.$textWidth || 600,
                // height not including margins, borders or padding
                height: self.$item.$textHeight || 480,
                controls: "bold italic underline strikethrough subscript superscript | font size style | color" + //
                " highlight removeformat | bullets" /*+" numbering"*/ +
                " | outdent indent alignleft center alignright justify |" + //
                " undo redo | rule image link unlink | cut copy paste pastetext | print source",
                // style to assign to document body contained within the editor
                // bodyStyle: "margin:4px; font:10pt Arial,Verdana; cursor:text"
                bodyStyle: "",
                // sizes in the font size popup
                sizes: fontSizes,
                useCSS: true,
                // Handlers
                updateTextArea: function(html){
                    // TODO: cleanup HTML if necessary
                    return html;
                }
            })[0];
            
            setTimeout(function(){
                self._editor.refresh();
            }, 100);
            
            self._editor.change(function(){
                // console.log('htmlEditor.change');
                var newHtml = self._getRawEditContents();
                if (!self.standalone && self.currentHtml !== newHtml) {
                    setTimeout(function(){
                        var popup = $('.cleditorPopup[style*="display: block;"]');
                        if (popup.length === 0) {
                            // console.log('htmlEditor.notifyChange');
                            var newValue = self._getEditContents();
                            document.fieldController.notifyChange(self, newValue, true);
                        }
                    }, 100);
                }
            });
        }
    },
    _setRawEditContents: function(contents){
        if (this.$isEditMode && this._editor && this._editor.$area) {
            this._editor.$area.val(contents || '');
            this.currentHtml = this._editor.$area.val();
        }
    },
    _getRawEditContents: function(){
        return (this.$isEditMode && this._editor && this._editor.$area && this._editor.$area.val()) || '';
    },
    _setContents: function(contents, saveStyles){
        if (contents && contents.indexOf('{') === 0) {
            this._isRtf = true;
            contents = rtf.toHtml(contents);
        }
        if (saveStyles && contents) {
            this.$$savedStyles = $(contents).find('style');
        }
        if (this.$isEditMode) {
            this._setRawEditContents(contents);
        }
        else {
            this.$$textValue.empty().append(contents);
        }
        // console.log('htmlEditor._setContents: $isEditMode=' + this.$isEditMode);
    },
    _getEditContents: function(){
        if (!this.$isEditMode) 
            return null;
        
        var contents = this._getRawEditContents();
        var $$contents = $('<div>').append(contents);
        if (this.$$savedStyles && $$contents.find('style').length === 0) {
            $$contents.prepend(this.$$savedStyles);
        }
        contents = $$contents.html();
        if (this._isRtf) {
            if (contents != this.currentHtml) {
                this.currentHtml = contents;
                return rtf.fromHtml(contents);
            }
            else {
                return this.currentValue;
            }
        }
        return contents;
    }
});


// var _rgbColors = ["FFF", "FCC", "FC9", "FF9", "FFC", "9F9", "9FF", "CFF", "CCF", "FCF", //
// "CCC", "F66", "F96", "FF6", "FF3", "6F9", "3FF", "6FF", "99F", "F9F", //
// "BBB", "F00", "F90", "FC6", "FF0", "3F3", "6CC", "3CF", "66C", "C6C", //
// "999", "C00", "F60", "FC3", "FC0", "3C0", "0CC", "36F", "63F", "C3C", //
// "666", "900", "C60", "C93", "990", "090", "399", "33F", "60C", "939", //
// "333", "600", "930", "963", "660", "060", "366", "009", "339", "636", //
// "000", "300", "630", "633", "330", "030", "033", "006", "309", "303"];
//
// var _controls = ["bold italic underline strikethrough subscript superscript", //
// "|", "font size style", //
// "|", "color highlight removeformat", //
// "|", "bullets numbering", //
// "|", "outdent indent", //
// "|", "alignleft center alignright justify", // 
// "|", "undo redo", //
// "|", "rule image link unlink", //
// "|", "cut copy paste pastetext", //
// "| print source"]
// ;
//
// var _options = {
//     // width not including margins, borders or padding
//     width: self.$item.$textWidth || 600,
//     // height not including margins, borders or padding
//     height: self.$item.$textHeight || 480,
//     // controls to add to the toolbar
//     // controls: _controls.join(" "),
//     // colors in the color popup
//     // colors: _rgbColors.join(" "),
//     // font names in the font popup
//     // fonts: "Arial,Arial Black,Comic Sans MS,Courier New,Narrow,Garamond," //
//     // +
//     // "Georgia,Impact,Sans Serif,Serif,Tahoma,Trebuchet MS,Verdana",
//     // sizes in the font size popup
//     // sizes: "1,2,3,4,5,6,7",
//     // styles in the style popup
//     // styles: [
//     //     ["Paragraph", "<p>"],
//     //     ["Header 1", "<h1>"],
//     //     ["Header 2", "<h2>"],
//     //     ["Header 3", "<h3>"],
//     //     ["Header 4", "<h4>"],
//     //     ["Header 5", "<h5>"],
//     //     ["Header 6", "<h6>"]
//     // ],
//     // use CSS to style HTML when possible (not supported in ie)
//     //useCSS: false,
//     // Document type contained within the editor
//     //docType: '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">',
//     // CSS file used to style the document contained within the editor
//     //docCSSFile: "",
//     // style to assign to document body contained within the editor
//     // bodyStyle: "margin:4px; font:10pt Arial,Verdana; cursor:text"
//     bodyStyle: "",
//     // Handlers
//     updateTextArea: function(html) {
//         // TODO: cleanup HTML if necessary
//         return html;
//     }
// };
//
// ============================================
// Sample code to create a user defined button
// ============================================
/*


 (function($) {


 // Define the hello button


 $.cleditor.buttons.hello = {


 name: "hello",


 image: "hello.gif",


 title: "Hello World",


 command: "inserthtml",


 popupName: "hello",


 popupClass: "cleditorPrompt",


 popupContent: "Enter your name:<br><input type=text size=10><br><input type=button value=Submit>",


 buttonClick: helloClick


 };


 // Add the button to the default controls before the bold button


 $.cleditor.defaultOptions.controls = $.cleditor.defaultOptions.controls.replace("bold", "hello bold");


 // Handle the hello button click event


 function helloClick(e, data) {


 // Wire up the submit button click event


 $(data.popup).children(":button").unbind("click").bind("click", function(e) {


 // Get the editor


 var editor = data.editor;


 // Get the entered name


 var name = $(data.popup).find(":text").val();


 // Insert some html into the document


 var html = "Hello " + name;


 editor.execCommand(data.command, html, null, data.button);


 // Hide the popup and set focus back to the editor


 editor.hidePopups();


 editor.focus();


 });


 }


 })(jQuery);


 */


// function createSelection(start, end, field) {
//     if ( field.createTextRange ) {
//         /* 
//         IE calculates the end of selection range based 
//         from the starting point.
//         Other browsers will calculate end of selection from
//         the beginning of given text node.
//         */
//         var newend = end - start;
//         var selRange = field.createTextRange();
//         selRange.collapse(true);
//         selRange.moveStart("character", start);
//         selRange.moveEnd("character", newend);
//         selRange.select();
//     } 
//     /* For the other browsers */
//     else if( field.setSelectionRange ){
//         field.setSelectionRange(start, end);
//     } 
//     field.focus();
// }
// /* 
// Usage 
// */
// var target = document.getElementById("target-input-or-textarea");
// createSelection(10, 20, target);
