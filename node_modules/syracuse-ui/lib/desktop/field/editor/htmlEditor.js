"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/common/field/field').Field;
var rtf = require("syracuse-rtf/lib/rtf");

// require('syracuse-ui/deps/cleditor/jquery.cleditor.min');
require('syracuse-ui/deps/cleditor/jquery.cleditor');

var ie = $.browser.msie, fontSizes = "8,9,10,11,12,14,16,18,20,22,24,26,28,36,48,72";
var textModes="rawtext,richtext" ;

(function($){
    // Define the hello button
  $.cleditor.buttons.txtmode = {
    name: "txtmode",
    image: "hello.png",
    title: "Show Text Mode",
    //command: "reformattext",
    popupName: "txtmode",
    popupClass: "cleditorList",
    state : "up"
    //popupContent: $$popupTxtModeContent,
    //buttonClick: helloClick
  };


   var $$popupTxtModeContent = $('<div>') ;
  
    /*$.each(textModes.split(","), function(i, mode){
        $('<div>').appendTo( $$popupTxtModeContent).html(mode);
        
    });*/

/*var  $$listTxtMode = $('<select>').attr('mode', function(){

    // pour l'instant ne peut pas être conditionné par le texte qui vient
    if ($.cleditor._isRaw)
     return 'rawtext' ;
        else return 'richtext'}) ;
    $$popupTxtModeContent.append($$listTxtMode);
    $.each(textModes.split(","), function(i, mode){
        $('<option>').append(mode).appendTo( $$listTxtMode);
        
    });*/



    /*else if (popupName == "font")
      $.each(options.fonts.split(","), function(idx, font) {
        $(DIV_TAG).appendTo($popup)
          .css("fontFamily", font)
          .html(font);
      });*/

 $.cleditor.buttons.txtmode.getEnabled = function( data){
        /*if (data.editor._isRaw){
            this.state="down" ;
            this.image="hello.gif" ;
        }
        else {
            this.state="up" ;
            this.image="hello.png" ;
        }*/
    

    return true ;
    }

$.cleditor.buttons.txtmode.popupContent = $$popupTxtModeContent.html();
$.cleditor.buttons.txtmode.buttonClick = function(e, data){




     


       
       //if($.cleditor.buttons.txtmode.state=="up" ){
      
        //if (e.target.textContent=="rawtext"){
            if (!data.editor._isRaw){
        data.editor._isRaw=true;
         var tmp = $('<div>') ;
         var htmlcontent=data.editor.$area.val() ;
         htmlcontent=htmlcontent.replace(/&nbsp;/g," ") ;
         htmlcontent=htmlcontent.replace(/<br\/>/g,"\r\n") ;
         htmlcontent=htmlcontent.replace(/<br>/g,"\r\n") ;
         htmlcontent=htmlcontent.replace(/<p>/g,"\r\n") ;
         tmp.html(htmlcontent) ;

           var rawtext=tmp.text() ; // textContent||tmp.innerText;
           var div=$('<div>')
            var pre=$('<pre>').appendTo(div).html(rawtext) ;
   
    

          data.editor.$area.val(div.html()); 
          $(data.editor.doc.body).html(div.html()) ;
          data.editor._isRaw=true ;
          $.cleditor.buttons.txtmode.state=="down" ;
          $.cleditor.buttons.txtmode.image="hello.gif" ;
          delete editor.range;
        /*editor.$area.hide();
        editor.$frame.show();*/
        $.cleditor.buttons.txtmode.title = "Show Raw Text ";

      }else if (data.editor._isRaw){
      //($.cleditor.buttons.txtmode.state=="down") {
      //else if(e.state=="down" ){
        data.editor._isRaw=false;
      //else if (e.target.textContent=="richtext"){
       // else if (e.target.value=="richtext"){
        var rawcontent=data.editor.$area.val() ;
        var htmlcont=rawcontent.replace(/\r\n/g, "<br/>");
        htmlcont=htmlcont.replace(/\n/g, "<br/>");
        htmlcont=htmlcont.replace(/\s/g, "&nbsp;");
        var dom=$(htmlcont) ;
        if (dom.is('pre')) ;
            htmlcont = dom.html() ;   
        data.editor.$area.val(htmlcont); 
        $(data.editor.doc.body).html(htmlcont) ;
        data.editor._isRaw=false;
        $.cleditor.buttons.txtmode.state=="up" ;
        $.cleditor.buttons.txtmode.image="hello.png" ;
        $.cleditor.buttons.txtmode.title ="Show Rich Text " ;
      }
        data.editor.updateTextArea() ;
        setTimeout(function() {refreshButtons(data.editor);}, 100);
       // data.editor.updateFrame() ; //refresh() ;
        return true;
    };

      
    /*$.each(textModes.split(","), function(idx, mode) {
        $('div').appendTo($.cleditor.buttons.hello.popupContent) //
          .html("gggg");
      });*/
 
  
    var $$popupContent = $('<div>'), $$list = $('<select>').attr('size', '8');
    $$popupContent.append($$list);
    $.each(fontSizes.split(","), function(i, size){
        $('<option>').append(size).appendTo($$list);
        // $('<div>').append($('<span>').prepend(size)).appendTo($$popupContent);
    });
  
    // font size button
    $.cleditor.buttons.size.popupContent = $$popupContent.html();
    $.cleditor.buttons.size.popupClass = "cleditorList";
    $.cleditor.buttons.size.popupClick = function(e, data){
        // TODO: fix text selection which is reset after inserting html contents. see createSelection
        // var editor = data.editor,
        //     text = editor.selectedText();
        // // var range = _getRange(editor);
        
        // var value = target.value || data.value;
        // var html = '<span style="font-size:' + e.target.value + 'pt">' + text + '</span>';
        // editor.execCommand("inserthtml", html, null, data.button);
        // editor.hidePopups();
        // editor.focus(editor);
        // range && range.select();
        // return false;
        data.command = "inserthtml";
        data.value = '<span style="font-size:' + e.target.value + 'pt; ">' + data.editor.selectedText() + '</span>';
        return true;
    };

//TODO: for all buttons
   /* $.cleditor.buttons.bold.getEnabled = function( data){
        if (data.editor._isRaw)
        return false ;
    else 
        return true ;
    }*/

    var formattingbuttons="bold italic underline strikethrough subscript superscript font size " //
    +"color highlight bullets numbering outdent indent alignleft center alignright " //
    +"justify image link unlink" ;
    $.each(formattingbuttons.split(" "), function(idx, buttonName) {
     
     $.cleditor.buttons[buttonName].getEnabled = function( data){
        if (data.editor._isRaw)
        return false ;
    else 
        return true ;
    }

});
    
    // // indent button
    // $.cleditor.buttons.indent.buttonClick = function(e, data) {
    //     var editor = data.editor,
    //         text = editor.selectedText();
    //     var html = '<div style="margin-left: 4em;">' + text + '</div>';
    //     editor.execCommand("inserthtml", html, null, data.button);
    //     editor.focus(editor);
    //     return false;
    // };
    // // outdent button
    // $.cleditor.buttons.outdent.buttonClick = function(e, data) {
    //     var editor = data.editor,
    //         text = editor.selectedText();
    //     var html = '<div style="margin-left: 4em;">' + text + '</div>';
    //     editor.execCommand("inserthtml", html, null, data.button);
    //     editor.focus(editor);
    //     return false;
    // };
})(jQuery);

// function _getRange(editor) {
//     if (ie) return _getSelection(editor).createRange();
//     return _getSelection(editor).getRangeAt(0);
// }
// function _getSelection(editor) {
//     if (ie) return editor.doc.selection;
//     return editor.$frame[0].contentWindow.getSelection();
// }
//
// temporary hack to change the value each time
// var _rtf;
// convert helpers

// function _rtf2Html(rtf) {
//     // _rtf = rtf;
//     var root = rtfParser.parse(rtf);
//     var rtfDom = rtfInterpreter.interpret(root);
//     return htmlBuilder.buildHtml(root, rtfDom);
// };

// function _html2Rtf(html) {
//     return rtfBuilder.buildRtf(html);
//     // temporary hack to change the value each time
//     //return _rtf.replace(/hellou?\s+([^\s]*\s+)?\bRTF\b/gi, "Hello " + _randomString(5) + " RTF");
// };

function _randomString(length){
    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');
    
    if (!length) {
        length = Math.floor(Math.random() * chars.length);
    }
    
    var str = '';
    for (var i = 0; i < length; i++) {
        str += chars[Math.floor(Math.random() * chars.length)];
    }
    return str;
}

function HtmlEditor(){
}

exports.HtmlEditor = helpers.defineClass(HtmlEditor, Field, {
    setDataValue: function(value){
        // console.log('htmlEditor.setDataValue');
        if (this.currentValue != value) {
            this.currentValue = value;
            // var styles = Array.isArray(value.$styles) ? styles = value.$styles.join("\n") : styles = value.$styles;
            // this._editor.options.headStyle = styles || this._editor.options.headStyle;
            this._setContents(value, true);
        }
        
        //if value contains raw text disable the formatting buttons
       //if( !this._editor._isRaw || value.length==0 || (value && value.indexOf('{')==0 )){
        //this._editor.disable(this._editor.disabled) ;
        //  disable the toolbar buttons
      // IE requires the timeout
      this._editor.buttons.txtmode.state=(this._editor._isRaw)?'down':'up' ;
      this._editor.buttons.txtmode.image=(this._editor._isRaw)?'hello.gif':'hello.png' ;

      setTimeout(function() {refreshButtons(this._editor);}, 100);
    },
    render: function(){
        // console.log('htmlEditor.render');
        var self = this;
        var id = document.controller.generateUUID();
        self.$$dataValue.attr("id", "v" + id);
        if (this.$isEditMode) {
            self.standalone = this.boxParent && this.boxParent.$prototype && (this.boxParent.$prototype.$baseUrl === "/sdata/x3stb/erp/stubs");
            
            // var css = ((this.$item.$css) ? this.$item.$css + " " : "") + this.$skinInput;
            // this.$$input = $('<textarea>').attr('id', "i" + id).attr('name', "i" + id).addClass(css).appendTo(self.$$inputValue);
            var area = $('<textarea>').attr('id', "i" + id).attr('name', "i" + id).appendTo(self.$$inputValue);
            // self._editor = area.cleditor({
            self._editor = area.cleditor({
                // width not including margins, borders or padding
                width: self.$item.$textWidth || 600,
                // height not including margins, borders or padding
                height: self.$item.$textHeight || 480,
                controls: "bold italic underline strikethrough subscript superscript | font size | color" + //
                " highlight removeformat | bullets" /*+" numbering"*/ +
                " | outdent indent alignleft center alignright justify |" + //
                " undo redo | rule image link unlink | cut copy paste pastetext | print source txtmode ",
                // style to assign to document body contained within the editor
                // bodyStyle: "margin:4px; font:10pt Arial,Verdana; cursor:text"
                bodyStyle: "",
                // sizes in the font size popup
                sizes: fontSizes,
                useCSS: true,
                // Handlers
                updateTextArea: function(html){
                    // TODO: cleanup HTML if necessary
                    return html;
                }
            })[0];
            
            setTimeout(function(){
                self._editor.refresh();
            }, 100);
            
            self._editor.change(function(){
                // console.log('htmlEditor.change');
                var newHtml = self._getRawEditContents();
                if (!self.standalone && self.currentHtml !== newHtml) {
                    setTimeout(function(){
                        var popup = $('.cleditorPopup[style*="display: block;"]');
                        if (popup.length === 0) {
                            // console.log('htmlEditor.notifyChange');
                            self._toBrut=true ;
                            var newValue = self._getEditContents();
                            document.fieldController.notifyChange(self, newValue, true);
                            self._toBrut=false ;
                        }
                    }, 100);
                }
            });
        }
    },
    _setRawEditContents: function(contents){
        if (this.$isEditMode && this._editor && this._editor.$area) {
            this._editor.$area.val(contents || '');
            this.currentHtml = this._editor.$area.val();
        }
    },
    _getRawEditContents: function(){
        return (this.$isEditMode && this._editor && this._editor.$area && this._editor.$area.val()) || '';
    },
    _setContents: function(contents, saveStyles){
        
        if (contents && contents.indexOf('{') === 0 ) {
            this._isRtf = true;
            this._isRaw = false;
            contents = rtf.toHtml(contents);
        }
        /*else if (contents && contents.indexOf('<') === 0) {
            this._isHtml = true;
        }*/
        else if (contents!=null && contents.length===0) 
        {
            this._isRtf = true;
            this._isRaw = false;
            contents = rtf.toHtml(contents);
        }
        else{
           // contents = rtf.rawTextToHtml(contents);
           this._isRaw = true;
            contents ="<pre>"+contents+"</pre>" ;

           //contents=contents.replace(/\r\n/g, "<br/>");
                

           //var button=$.cleditor.buttons[bold] ;

           // var buttons=this._editor.$toolbar.find(".cleditorButton"); //.filter("[title=bold]");
           // var test=buttons.filter("[title=Bold]");
            
//test.attr("disabled") == "disabled" ;
        }
        

        if (saveStyles && contents) {
            this.$$savedStyles = $(contents).find('style');
        }
        if (this.$isEditMode) {
            this._setRawEditContents(contents);
        }
        else {
            this.$$textValue.empty().append(contents);
        }

        // console.log('htmlEditor._setContents: $isEditMode=' + this.$isEditMode);
    },
    _getEditContents: function(){
        if (!this.$isEditMode) 
            return null;
        
        var contents = this._getRawEditContents();
        var $$contents = $('<div>').append(contents);
        if (this.$$savedStyles && $$contents.find('style').length === 0) {
            $$contents.prepend(this.$$savedStyles);
        }
        //contents = $$contents.clone().wrap('<div>').parent().html();
        contents = $$contents.html();
        if (this._isRtf) {
            if (contents != this.currentHtml) 
                this.currentHtml = contents;
            return rtf.fromHtml(contents);
                
        }
        
       /* else if (this._isHtml){
                return this.currentValue;
            }*/
        else{
                this.currentHtml = contents;
                var outer=$(contents);
                if (outer.is('pre'))
                    contents=outer.html() ;
                contents=contents.replace(/&nbsp;/g," ");
                contents=contents.replace(/<br\/>/g,"\r\n") ;
                contents=contents.replace(/<br>/g,"\r\n");
                return contents.replace(/<par>/g,"\r\n");

               // var zz=rtf.extractText(contents,this._toBrut) ;
               // return  rtf.extractText(contents,this._toBrut) ;
            }
        //return contents;
    },
    dispose: function() {
  if(this._editor) {
    this._editor.dispose() ;
    }
  Field.prototype.dispose.call(this) ;
 }

});


// var _rgbColors = ["FFF", "FCC", "FC9", "FF9", "FFC", "9F9", "9FF", "CFF", "CCF", "FCF", //
// "CCC", "F66", "F96", "FF6", "FF3", "6F9", "3FF", "6FF", "99F", "F9F", //
// "BBB", "F00", "F90", "FC6", "FF0", "3F3", "6CC", "3CF", "66C", "C6C", //
// "999", "C00", "F60", "FC3", "FC0", "3C0", "0CC", "36F", "63F", "C3C", //
// "666", "900", "C60", "C93", "990", "090", "399", "33F", "60C", "939", //
// "333", "600", "930", "963", "660", "060", "366", "009", "339", "636", //
// "000", "300", "630", "633", "330", "030", "033", "006", "309", "303"];
//
// var _controls = ["bold italic underline strikethrough subscript superscript", //
// "|", "font size style", //
// "|", "color highlight removeformat", //
// "|", "bullets numbering", //
// "|", "outdent indent", //
// "|", "alignleft center alignright justify", // 
// "|", "undo redo", //
// "|", "rule image link unlink", //
// "|", "cut copy paste pastetext", //
// "| print source"]
// ;
//
// var _options = {
//     // width not including margins, borders or padding
//     width: self.$item.$textWidth || 600,
//     // height not including margins, borders or padding
//     height: self.$item.$textHeight || 480,
//     // controls to add to the toolbar
//     // controls: _controls.join(" "),
//     // colors in the color popup
//     // colors: _rgbColors.join(" "),
//     // font names in the font popup
//     // fonts: "Arial,Arial Black,Comic Sans MS,Courier New,Narrow,Garamond," //
//     // +
//     // "Georgia,Impact,Sans Serif,Serif,Tahoma,Trebuchet MS,Verdana",
//     // sizes in the font size popup
//     // sizes: "1,2,3,4,5,6,7",
//     // styles in the style popup
//     // styles: [
//     //     ["Paragraph", "<p>"],
//     //     ["Header 1", "<h1>"],
//     //     ["Header 2", "<h2>"],
//     //     ["Header 3", "<h3>"],
//     //     ["Header 4", "<h4>"],
//     //     ["Header 5", "<h5>"],
//     //     ["Header 6", "<h6>"]
//     // ],
//     // use CSS to style HTML when possible (not supported in ie)
//     //useCSS: false,
//     // Document type contained within the editor
//     //docType: '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">',
//     // CSS file used to style the document contained within the editor
//     //docCSSFile: "",
//     // style to assign to document body contained within the editor
//     // bodyStyle: "margin:4px; font:10pt Arial,Verdana; cursor:text"
//     bodyStyle: "",
//     // Handlers
//     updateTextArea: function(html) {
//         // TODO: cleanup HTML if necessary
//         return html;
//     }
// };
//
