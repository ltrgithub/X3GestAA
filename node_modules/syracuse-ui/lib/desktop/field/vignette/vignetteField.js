"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require("syracuse-ui/lib/common/article/box").Box;

var _formatBuilder = {
    "$html": require('./htmlVignetteBuilder'),
    "$page": {
        load: function(field){
            document.controller.loadRepresentation(null, field.$field.$location.$url, function($itemPage){
                $itemPage.$$container = field.$$body;
                $itemPage.$category = "vignette";
                field.vignette = document.itemFactory.loadPage($itemPage);
            });
        },
        getAuthoringWidget: function(field){
            return null;
        },
        dispose: function(){
        }
    },
    "$item": {
        load: function(field){
            field.vignette = document.itemFactory.load(field.$$body, field.$field.$item, field);
        },
        getAuthoringWidget: function(field){
            return null;
        },
        dispose: function(){
        }
    },
    "$menu": require('./menusVignetteBuilder')
};
function _doActions(field, action){
    Box.prototype[action].call(field, function(){
        if (field.formatBuilder[action]) {
            field.formatBuilder[action](field);
        }
    });
}

function VignetteField(){
}

exports.VignetteField = helpers.defineClass(VignetteField, Box, {
    applyDesignMetaData: function(metadata, onAuthoring){
        Box.prototype.applyDesignMetaData.call(this, metadata, onAuthoring);
        if (this.formatBuilder.applyDesignMetaData) {
            this.formatBuilder.applyDesignMetaData(this, metadata, onAuthoring);
        }
    },
    loadBox: function(){
        this.$authoringLevel = "field";
        this.$skin = this.$item.$skin || "s-vignette-field";
        Box.prototype.loadBox.call(this);
    },
    refresh: function(){
        if (!this.authoringNode) {
            this._renderLayoutContent();
        }
    },
    getAuthoringWidget: function(){
        return this.formatBuilder.getAuthoringWidget(this);
    },
    maximize: function(){
        _doActions(this, "maximize");
    },
    minimize: function(){
        _doActions(this, "minimize");
    },
    close: function(){
        if (this.$isMaximized) {
            document.site.minimizeBox(this);
        }
        this.setState({
            $isHidden: true
        });
    },
    onWindowResize: function(){
        if (this.formatBuilder.onWindowResize) {
            this.formatBuilder.onWindowResize(this);
        }
    },
    drawBox: function(){
        var dashboard = this.getPage();
        var div = document.createElement("div");
        div.className = this.$skin;
        if (this.$item.$css) {
            div.className += " " + this.$item.$css;
        }
        this.$$item = $(div).appendTo(this.$$container);
        this.setState(this.$item);
        if (!this.$item.$isTitleHidden) {
            this.appendHeader();
        }
        
        div = document.createElement("div");
        div.className = this.$skin + "-body";
        this.$$body = $(div).appendTo(this.$$item);
        this.openBox(this.$item.$opened !== false);
        this._appendButton("refresh");
        this._appendButton("maximize");
        // this._appendButton("close");
    },
    _renderLayoutContent: function(){
        if (this.vignette) {
            this.$$body.empty();
            document.controller.disposeObject(this.vignette);
        }
        if (!this.$field.$format && this.$field.$location) {
            this.$field.$format = this.$field.$location.$type == "html" ? "$html" : "$page";
        }
        if (this.formatBuilder = _formatBuilder[this.$field.$format]) {
            this.formatBuilder.load(this);
        }
    },
    dispose: function(){
        this.formatBuilder.dispose(this);
        delete this.formatBuilder;
        Box.prototype.dispose.call(this);
    }
});
