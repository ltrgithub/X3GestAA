"use strict";
var helpers = require('syracuse-core/lib/helpers');
var NumericField = require('syracuse-ui/lib/common/field/numericField').NumericField;

function DesktopNumeric(){
}

exports.DesktopNumeric = helpers.defineClass(DesktopNumeric, NumericField, {
    _doClickPicker: function($$btn){
        if (!this.$isDisabled && !this.$isReadOnly) {
            this.focus();
            var step = this.formatApi.parse(this.$item.$step || "1"); // assuming $item.$step may be set in field object
            var numObj = this.formatApi.parse(this.$$input.val());
            this.currentValue = this.formatApi.numberValue(this.formatApi[($$btn.attr("data-s-picker") == "numeric-up") ? "add" : "subtract"](numObj, step));
            this.$$input.val(this.currentValue);
        }
    },
    render: function(){
        var self = this;
        if (self.$isEditMode) {
            var input = (self.$$input = $("<input type='text'/>"))[0];
            input.className = self.$skinInput + " " + self.$skinInput + "-num";
            self._appendLinksPicker();
            self.btnUp = self._appendPicker("numeric-up");
            self.btnDown = self._appendPicker("numeric-down", false);
            self.btnDown.style.right = (self._boxPickerPaddingRight - 20) + "px";
            return true;
        }
        return false;
    },
    /*setReadOnly: function($isReadOnly){
     NumericField.prototype.setReadOnly.call(this, $isReadOnly);
     if (this.btnUp) {
     this.btnUp.style.visibility = this.$isReadOnly ? "hidden" : "";
     }
     if (this.btnDown) {
     this.btnDown.style.visibility = this.$isReadOnly ? "hidden" : "";
     }
     },*/
    releaseMode: function(onDispose){
        if (this.$$inputValue) {
            this.$$inputValue.undelegate();
        }
        NumericField.prototype.releaseMode.call(this, onDispose);
    }
});
