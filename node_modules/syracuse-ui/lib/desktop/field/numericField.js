"use strict";
var helpers = require('syracuse-core/lib/helpers');
var NumericField = require('syracuse-ui/lib/common/field/numericField').NumericField;

function DesktopNumeric(){
}

exports.DesktopNumeric = helpers.defineClass(DesktopNumeric, NumericField, {
    _doClickPicker: function($$btn){
        if (!this.$isDisabled && !this.$isReadOnly) {
            this.focus();
            var step = this.formatApi.parse(this.$item.$step || "1"); // assuming $item.$step may be set in field object
            var numObj = this.formatApi.parse(this.$$input.val());
            this.currentValue = this.formatApi.numberValue(this.formatApi[($$btn.attr("data-s-picker") == "up") ? "add" : "subtract"](numObj, step));
            this.$$input.val(this.currentValue);
        }
    },
    render: function(){
        var self = this;
        if (self.$isEditMode) {
            var input = (self.$$input = $("<input type='text'/>"))[0];
            input.className = self.$skinInput + " " + self.$skinInput + "-num";
            
            self.btnUp = document.createElement("a");
            self.btnUp.className = self.$skin + "-num-up";
            self.btnUp.setAttribute("data-s-picker", "up");
            
            self.btnDown = document.createElement("a");
            self.btnDown.className = self.$skin + "-num-down";
            self.btnDown.setAttribute("data-s-picker", "down");
            
            var box = document.createElement("div");
            box.className = self.$skinInput + "-box";
            $(box).append(self.$$input).append(self.btnUp).append(self.btnDown).appendTo(self.$$inputValue);
            
            self.$$inputValue.delegate("a[data-s-picker]", "click", function(){
                self.onClickPicker($(this));
            });
            return true;
        }
        return false;
    },
    /*setReadOnly: function($isReadOnly){
     NumericField.prototype.setReadOnly.call(this, $isReadOnly);
     if (this.btnUp) {
     this.btnUp.style.visibility = this.$isReadOnly ? "hidden" : "";
     }
     if (this.btnDown) {
     this.btnDown.style.visibility = this.$isReadOnly ? "hidden" : "";
     }
     },*/
    releaseMode: function(onDispose){
        if (this.$$inputValue) {
            this.$$inputValue.undelegate();
        }
        NumericField.prototype.releaseMode.call(this, onDispose);
    }
});
