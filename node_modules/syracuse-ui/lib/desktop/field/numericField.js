"use strict";
var helpers = require('syracuse-core/lib/helpers');
var NumericField = require('syracuse-ui/lib/common/field/numericField').NumericField;

function DesktopNumeric(){
}

exports.DesktopNumeric = helpers.defineClass(DesktopNumeric, NumericField, {
    clickPicker: function($$btn){
        var self = this;
        if (!self.$isDisabled) {
            self.focus();
            var action = $$btn[0].className.indexOf("-num-up") > 0 ? "add" : "subtract";
            var step = self.formatApi.parse(self.$item.$step || "1"); // assuming $item.$step may be set in field object
            var numObj = self.formatApi.parse(self.$$input.val());
            self.currentValue = self.formatApi.numberValue(self.formatApi[action](numObj, step));
            self.$$input.val(self.currentValue);
        }
    },
    render: function(){
        var self = this;
        if (self.$isEditMode) {
            var input = (self.$$input = $("<input type='text'/>"))[0];
            input.className = self.$skinInput + " " + self.$skinInput + "-num";
            var btn = document.createElement("a");
            btn.className = self.$skin + "-num-up";
            self.$$pickerBtnUp = $(btn).bind("click", function(){
                self.clickPicker($(this));
            });
            var btn = document.createElement("a");
            btn.className = self.$skin + "-num-down";
            self.$$pickerBtnDn = $(btn).bind("click", function(){
                self.clickPicker($(this));
            });
            var box = document.createElement("div");
            box.className = self.$skinInput + "-box";
            $(box).append(self.$$input).append(self.$$pickerBtnUp).append(self.$$pickerBtnDn).appendTo(self.$$dataValue);
            return true;
        }
        return false;
    },
    releaseMode: function(onDispose){
        if (this.$isEditMode) {
            if (this.$$pickerBtnUp) {
                this.$$pickerBtnUp.unbind();
                delete this.$$pickerBtnUp;
            }
            if (this.$$pickerBtnDn) {
                this.$$pickerBtnDn.unbind();
                delete this.$$pickerBtnDn;
            }
        }
        NumericField.prototype.releaseMode.call(this, onDispose);
    }
});
