"use strict";
var helpers = require('syracuse-core/lib/helpers');
var FormatBuilder = require('./formatBuilder').FormatBuilder;
function RadiosFormat(){
}

exports.RadiosFormat = helpers.defineClass(RadiosFormat, FormatBuilder, {
    initialize: function(field){
        FormatBuilder.prototype.initialize.call(this, field, "row");
    },
    setDataValue: function(value){
        this._$selectedEnum = this.field.findEnum(value);
        if (this.field.$isEditMode) {
            this.field.currentValue = value;
            if (this._$selectedEnum) {
                this.field.$$dataValue.find("input[value='" + this._$selectedEnum.$index + "']").attr("checked", true);
            }
        }
        else {
            this.field.$$dataValue.text(this._$selectedEnum ? this._$selectedEnum.$title : "");
        }
    },
    getInputValue: function(){
        var index = this._$$list.find("input").filter(":checked").val();
        return (index == null) ? null : this.field.$enum[index].$value;
    },
    render: function(){
        this.field.$enum = this.field.getDataType().$constraints.$enum;
        if (this.field.$isEditMode) {
            this.$skin = this.field.$skin + "-choice-rd";
            this._$$list = $("<fieldset/>").addClass(this.$skin).appendTo(this.field.$$dataValue);
            this.renderLayout();
        }
        else {
            this.field.$$dataValue.addClass("s-choice-combo");
        }
    },
    renderLayout: function(){
        var self = this;
        FormatBuilder.prototype.renderLayout.call(this);
        var isRowLayout = self.field.$item.$choiceLayout == "row";
        var $groupName = document.controller.generateUUID();
        self.field.$enum.forEach(function($enum, index){
            var id = $groupName + index;
            var $$input = $("<input type='radio'/>").val(index);
            
            var input = $$input[0];
            input.className = self.$skin + "-radio";
            input.setAttribute("id", id);
            input.setAttribute("name", $groupName);
            input.setAttribute("data-s-field", self.field.id);
            
            var html = document.createElement("label");
            html.className = self.$skin + "-title";
            html.setAttribute("for", id);
            var $$title = $(html).text($enum.$title);
            
            html = document.createElement("div");
            html.className = self.$skin + "-item";
            var $$item = $(html).append($$input);
            if (isRowLayout) {
                self.renderRow($$item, index);
            }
            else {
                self.renderColumns($$item, index);
            }
            $$item.append($$title);
        });
    }
    /*,
     applyDesignMetaData: function(metadata, onAuthoring){
     if (metadata.$choiceLayout !== undefined) {
     var self = this;
     self._curCol = 0;
     self.field.$item.$choiceLayout = metadata.$choiceLayout;
     var renderLayout = self._initRenderLayout();
     if (self._$$cols) {
     self._$$choices.forEach(function($$choice){
     $$choice.detach();
     });
     self._$$list.empty();
     delete self._$$cols;
     delete self._$$table;
     }
     if (self._$$choices) {
     self._$$choices.forEach(function($$choice){
     $$choice[0].style.display = "";
     self[renderLayout]($$choice);
     });
     }
     }
     }*/
});
