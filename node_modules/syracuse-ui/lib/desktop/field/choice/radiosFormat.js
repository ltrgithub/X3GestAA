"use strict";
var helpers = require('syracuse-core/lib/helpers');

function RadiosFormat(){
    this.$defaultChoiceLayout = "row";
}

exports.RadiosFormat = helpers.defineClass(RadiosFormat, null, {
    onInputKeyup: function($$input, event){
        return true;
    },
    setDataValue: function(value){
        this._$selectedEnum = this.field.findEnum(value);
        if (this.field.$isEditMode) {
            this.field.currentValue = value;
            if (this._$selectedEnum) {
                this.field.$$dataValue.find("input[value='" + this._$selectedEnum.$index + "']").attr("checked", true);
            }
        }
        else {
            this.field.$$dataValue.text(this._$selectedEnum ? this._$selectedEnum.$title : "");
        }
    },
    getInputValue: function(){
        var index = this._$$fieldset.find("input").filter(":checked").val();
        return (index == null) ? null : this.field.$enum[index].$value;
    },
    render: function(){
        this.field.$enum = this.field.getDataType().$constraints.$enum;
        if (this.field.$isEditMode) {
            var div = document.createElement("fieldset");
            div.className = this.$skin = this.field.$skin + "-choice-rd";
            this._$$fieldset = $(div).appendTo(this.field.$$dataValue);
            this.renderLayout();
        }
        else {
            this.field.$$dataValue.addClass("s-choice-combo");
        }
    },
    renderLayout: function(){
        var self = this;
        this.releaseMode();
        this._choices = [];
        this._$$fieldset.empty();
        var isColLayout = self.field.$item.$choiceLayout != "row";
        var $$rows, curRow = 0, colCount, curCol = 0;
        if (isColLayout) {
            $$rows = [];
            colCount = self.field.$item.$choiceLayout;
            for (var ii = 0, max = Math.ceil(self.field.$enum.length / colCount); ii < max; ii++) {
                var div = document.createElement("div");
                div.className = "s-field-choice-rd-row";
                $$rows[ii] = $(div).appendTo(self._$$fieldset);
            }
        }
        var $skinItem = self.$skin + "-item";
        var $groupName = document.controller.generateUUID();
        self.field.$enum.forEach(function($enum, index){
            var id = $groupName + index;
            var $$input = $("<input type='radio'/>").val(index);
            
            var input = $$input[0];
            input.className = self.$skin + "-radio";
            input.setAttribute("id", id);
            input.setAttribute("name", $groupName);
            input.setAttribute("data-s-field", self.field.id);
            
            var html = document.createElement("label");
            html.className = self.$skin + "-title";
            html.setAttribute("for", id);
            var $$title = $(html).text($enum.$title);
            
            html = document.createElement("div");
            html.className = $skinItem;
            var $$item = $(html).append($$input);
            if (isColLayout) {
                $$rows[curRow].append($$item);
                if (++curCol == colCount) {
                    curRow++;
                    curCol = 0;
                }
            }
            else {
                self._$$fieldset.append($$item);
            }
            self._choices.push({
                $index: index,
                $$item: $$item
            });
            if (self.field.$item.$icon) {
                var image = self.$icon.$path + $enum.$value + ".png";
                var img = document.createElement("div");
                img.className = $skinItem + "-icon";
                img.style.width = self.$icon.$width;
                img.style.height = self.$icon.$height;
                img.style.backgroundImage = "url('" + image + "')";
                $$item.append(img);
            }
            $$item.append($$title);
        });
        if (isColLayout && curCol > 0) {
            while (curCol < colCount) {
                var html = document.createElement("div");
                html.className = self.$skin + "-item";
                $$rows[curRow].append($(html));
                curCol++;
            }
        }
    },
    releaseMode: function(){
        delete this._choices;
    },
    dispose: function(){
        if (this._$$fieldset) {
            this._$$fieldset.undelegate();
        }
        this.releaseMode(true);
        delete this.field;
    }
});
