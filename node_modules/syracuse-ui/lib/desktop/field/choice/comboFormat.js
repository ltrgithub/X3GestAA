"use strict";
var helpers = require('syracuse-core/lib/helpers');
var FormatBuilder = require('./formatBuilder').FormatBuilder;

function ComboFormat(){
}

exports.ComboFormat = helpers.defineClass(ComboFormat, FormatBuilder, {
    setDataValue: function(value){
        this._$selectedEnum = this._$listSelection = this.field.findEnum(value);
        var $title = this._$selectedEnum ? this._$selectedEnum.$title : "";
        if (this.field.$isEditMode) {
            this.field.currentValue = value;
            this.field.$$input.val($title);
        }
        else {
            this.field.$$dataValue.text($title);
        }
    },
    getInputValue: function(){
        return this._$selectedEnum ? this._$selectedEnum.$value : null;
    },
    render: function(){
        var self = this;
        self.field.$enum = self.field.$field.$value.$constraints.$enum;
        if (self.field.$isEditMode) {
            self._$skinItem = self.field.$skin + "-choice-list-item";
            if (self.field.$item.$iconMode) {
                self._$skinItem += "-icon";
            }
            (self.field.$$input = $("<input type='text'/>"))[0].className = self.field.$skinInput;
            var btn = document.createElement("a");
            btn.className = self.field.$skin + "-choice-picker";
            self.field.$$pickerBtn = $(btn).bind("click", function(){
                if (!self.field.$isDisabled) {
                    self.toggleList();
                }
            });
            var div = document.createElement("div");
            div.className = self.field.$skinInput + "-box";
            var $$box = $(div).append(self.field.$$input).append(self.field.$$pickerBtn);
            self._$$list = $("<div/>").addClass(self.field.$skin + "-choice-list").hide();
            self.field.$$dataValue.append($$box).append(self._$$list);
            
            self._bindEvents();
        }
    },
    _bindEvents: function(){
        var self = this;
        self._$$list.delegate("a[data-s-index]", "click", function(){
            self._selectItem($(this).attr("data-s-index"), true);
            self.field.$$input.val(self._$selectedEnum.$title).change();
            self.toggleList(false);
            self.field.focus();
            return false;
        });
    },
    _selectItem: function($index, select){
        if (this._choices) {
            if (this._$selectedEnum) {
                this._choices[this._$selectedEnum.$index].$$item.toggleClass("s-choice-item-selected", false);
                delete this._$selectedEnum;
            }
            if (select) {
                this._$selectedEnum = this._$listSelection = this.field.$enum[$index];
                this._choices[$index].$$item.toggleClass("s-choice-item-selected", true);
                this._$selectedEnum.$index = $index;
            }
        }
    },
    renderLayout: function(filter){
        var self = this;
        FormatBuilder.prototype.renderLayout.call(this);
        var isRowLayout = self.field.$item.$choiceLayout == "row";
        self.field.$enum.forEach(function($enum, index){
            var html;
            if (filter) {
                if ((new RegExp("(" + filter + ")", "ig")).test($enum.$title)) {
                    html = $enum.$title.replace(new RegExp("(" + filter + ")", "ig"), "<strong class='s-auto-complete-filter'>$1</strong>");
                }
            }
            else {
                html = $enum.$title;
            }
            if (html) {
                var link = document.createElement("a");
                link.className = self._$skinItem;
                if (self.field.$item.$iconMode) {
                    var image = self.$iconPath + $enum.$value + ".png";
                    link.style.backgroundImage = "url('" + image + "')";
                }
                link.setAttribute("data-s-index", index);
                var $$item = $(link).append(html);
                if (self.field.currentValue == $enum.$value) {
                    link.className += " s-choice-item-selected";
                }
                if (isRowLayout) {
                    self.renderRow($$item, index);
                }
                else {
                    self.renderColumns($$item, index);
                }
            }
        });
        if (self._$$table) {
            self._$$table[0].style.width = "100%";
        }
        if (filter && self._choices.length == 0) {
            self._$$list.text(document.controller.localize.field.choiceFieldNoMatch);
        }
    },
    selectText: function(input, start, end){
        if (input.createTextRange) {
            var selRange = input.createTextRange();
            selRange.collapse(true);
            selRange.moveStart('character', start);
            selRange.moveEnd('character', end - start);
            selRange.select();
        }
        else 
            if (input.selectionStart) {
                input.selectionStart = start;
                input.selectionEnd = end;
            }
    },
    toggleList: function(show){
        var self = this;
        if (!self._popup && show !== false) {
            self.field.$$item.attr("id", self.field.id);
            self._$$list.css("width", self.field.$$input.parent().width());
            if (self._choices.length == 0) {
                self.renderLayout();
            }
            if (self._$selectedEnum) {
                self._selectItem(self._$selectedEnum.$index, true);
            }
            self.field.focus();
            self._popup = document.site.openDialog({
                content: self.field,
				$dialogMode: "popup",
                $$dialog: self._$$list,
                position: {
                    my: "left top",
                    at: "left bottom",
                    of: self.field.$$input
                },
                closeHandler: function(){
                    if (self.onAuthoring) {
                        return false;
                    }
                    self._popup = null;
                    return true;
                },
                boundarySelector: "#" + self.field.id
            });
        }
        else {
            if (self._popup) {
                if (show) {
                    self._popup.resize();
                }
                else {
                    self._popup.close();
                }
            }
        }
    },
    onInputKeyup: function($$input, event){
        return true;
        switch (event.keyCode) {
            case 27: //esc
                field.$$input.val(this._$selectedEnum ? this._$selectedEnum.$title : "");
                this.toggleList(false);
                break;
            case 40: //down
            case 38: //up
                var current = this._$listSelection ? this._$listSelection.$index : -1;
                var newIndex = (event.keyCode == 40) ? Math.min(current + 1, this._choices.length - 1) : Math.max(0, current - 1);
                this._$$list.children().toggleClass("s-choice-item-selected", false).filter("[data-s-index=" + newIndex + "]").toggleClass("s-choice-item-selected", true);
                field.$$input.val((this._$listSelection = field.$enum[newIndex]).$title);
                break;
            case 37: //left
            case 39: //right
                break;
            default:
                var filter = field.$$input.val();
                this.renderLayout(filter);
                if (this._choices.length > 0) {
                    var firstChoice = this._choices[0];
                    if (event.keyCode != 8) {
                        this._$listSelection = field.$enum[firstChoice.$index];
                        this.selectText(field.$$input.val(this._$listSelection.$title)[0], filter.length, this._$listSelection.$title.length);
                    }
                    if (event.keyCode == 13) {
                        firstChoice.$$item.click();
                        return;
                    }
                }
                this.toggleList(true);
                break;
        }
        return true;
    }
});
