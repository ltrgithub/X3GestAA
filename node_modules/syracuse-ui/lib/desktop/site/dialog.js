"use strict";
var helpers = require('syracuse-core/lib/helpers');

function Dialog(){
}

exports.Dialog = helpers.defineClass(Dialog, null, {
    open: function(options){
        this.options = options;
        if (options.content) {
            this.$$dialog = (this._content = options.content).$$item;
            this._ensureMode();
            this.$$dialog.appendTo(document.site.$$container);
            this.appendOverlay();
            this.onWindowResize();
            document.site.addEventListener("resize", this);
        }
        else {
            this._openDialogPage(this.options);
        }
    },
    _ensureMode: function(){
        this.$skin = "s-" + (this._content.$dialogMode = this.options.$dialogMode || "modal");
    },
    _openDialogPage: function(){
        var self = this;
        document.controller.loadRepresentation(self.options.article, self.options.$url, function($itemPage){
            self.$$dialog = $itemPage.$$container = $(document.createElement("div"));
            self._content = document.itemFactory.loadPage($itemPage);
            self._ensureMode();
            self.$$dialog[0].className = self.$skin + "-page-container";
            self._content.dialog = self;
            self._appendCloseButton();
            self._content.$$header[0].className = self.$skin + "-page-head";
            self._content.$$dataSlot[0].className = self.$skin + "-page-data";
            self._content.$$item[0].className = self.$skin + "-page";
            self._content.$$item.hide();
            self._content.$$body.css({
                overflow: "auto",
                height: 0
            });
            if (self.options.onValidate) {
                self._appendOkButton();
            }
            if (self.options.onSelectRecord) {
                self._content.onSelectRecord = function(selectedRecords){
                    if (self.options.onSelectRecord(selectedRecords, self._content) !== false) {
                        self.close();
                    }
                };
            }
            self.$$dialog.appendTo(document.site.$$container);
            self._content.$$item.show();
            self.appendOverlay();
            self.onWindowResize();
            document.site.addEventListener("resize", self);
        });
    },
    appendOverlay: function(){
        if (this._content.$dialogMode == "modal") {
            this.$$overlay = $("<div class='s-overlay'/>").appendTo(document.site.$$container);
            this.$$overlay.css("z-index", parseInt(this._content.$$item.css("z-index") || "4000") - 10);
        }
    },
    close: function(){
        document.controller.disposeObject(this);
    },
    _appendOkButton: function(){
        var self = this;
        var btn = document.createElement("a");
        btn.className = self.$skin + "-page-ok";
        self.$$okBtn = $(btn).bind("click", function(){
            if (self.options.onValidate(self._content) !== false) {
                self.close();
            }
            return false;
        }).appendTo(self._content.$$header);
    },
    _appendCloseButton: function(){
        var self = this;
        var btn = document.createElement("a");
        btn.className = self.$skin + "-page-close";
        self.$$closeBtn = $(btn).bind("click", function(){
            self.close();
            return false;
        }).appendTo(self._content.$$header);
    },
    onWindowResize: function(){
        if (this.$$overlay) {
            this.$$overlay.css({
                width: 0,
                height: 0
            }).css({
                width: document.site.$$container.outerWidth(),
                height: document.site.$$container.outerHeight()
            });
            this.$$overlay.show();
        }
        this.center();
    },
    center: function(){
        var body = document.site.$$body[0];
        var style = this.$$dialog[0].style;
        var left, top;
        var bodyWidth = document.site.$$container.innerWidth();
        var bodyHeight = document.site.$$container.innerHeight();
        switch (this.options.$dialogSize) {
            case "content":
                left = (body.clientWidth - this.$$dialog.outerWidth()) / 2;
                top = (body.clientHeight - this.$$dialog.outerHeight()) / 2;
                break;
            default:
                var margin = {
                    left: 30,
                    top: 30
                };
                left = margin.left;
                top = document.site.$$body.offset().top + margin.top;
                var width = body.clientWidth - (margin.left * 2);
                if (width < 0) {
                    left = 0;
                    width = body.clientWidth;
                }
                style.width = width + "px";
                var height = body.clientHeight - (margin.top * 2);
                if (height < 0) {
                    top = 0;
                    height = body.clientHeight;
                }
                style.height = height + "px";
                break;
        }
        style.left = left + "px";
        style.top = top + "px";
        if (this.options.$dialogSize != "content") {
            this._resizeDialogPage();
        }
    },
    _resizeDialogPage: function(){
        var body = this._content.$$body[0];
        var root = this.$$dialog[0];
        var top = 0;
        var start = body;
        while (start && start != root) {
            top += start.offsetTop;
            start = start.offsetParent;
        }
        body.style.height = (this.$$dialog.height() - top) + "px";
    },
    dispose: function(){
        if (this.$$overlay) {
            this.$$overlay.remove();
        }
        document.site.removeEventListener("resize", this);
        if (this._content) {
            delete this._content.dialog;
        }
        if (this.$$closeBtn) {
            this.$$closeBtn.unbind();
            delete this.$$closeBtn;
        }
        if (this.$$okBtn) {
            this.$$okBtn.unbind();
            delete this.$$okBtn;
        }
        if (this.$$dialog) {
            this.$$dialog.empty().remove();
            delete this.$$dialog;
        }
        if (this.options) {
            if (this.options.content) {
                delete this.options.content;
            }
            else {
                document.controller.disposeObject(this._content);
            }
            delete this.options.article;
            delete this.options.onValidate;
            delete this.options.onSelectRecord;
        }
        delete this._content;
    }
});
