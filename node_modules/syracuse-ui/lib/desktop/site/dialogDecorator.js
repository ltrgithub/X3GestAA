"use strict";
var helpers = require('syracuse-core/lib/helpers');

function DialogDecorator(){
}

exports.DialogDecorator = helpers.defineClass(DialogDecorator, null, {
    wrap: function(page){
        this.page = page;
        document.site.dialogAdapter = this
        if (page.$displayTarget == "modal") {
            this._appendCloseButton();
            this.page.$$header[0].className += " s-dialog-page-head";
            this.page.$$dataSlot[0].className += " s-dialog-page";
            this.page.$$item.addClass("s-dialog-page").hide();
            this.page.$$body.css({
                overflow: "auto",
                height: 0
            });
        }
        this.$$overlay = $("<div class='s-overlay'/>").appendTo(document.site.$$container);
        if (page.$isItemDialog) {
            this.$$dialog = page.$$item;
        }
        else {
            this.$$dialog = $("<div/>").addClass("s-dialog-page-container").append(page.$$item);
        }
        this.$$dialog.appendTo(document.site.$$container);
        this.$$overlay.css("z-index", parseInt(page.$$item.css("z-index") || "4000") - 10);
        this.onDocumentResize();
        return this;
    },
    _appendCloseButton: function(){
        var self = this;
        var btn = document.createElement("a");
        btn.className = "s-dialog-page-close";
        self.$$closeBtn = $(btn).bind("click", function(){
            if (self.page.onClose ? self.page.onClose(self.page) : true) {
                if (self.page.boxParent) {
                    self.page.getArticleParent().removeItem(self.page, true);
                }
                else {
                    self.page.dispose();
                }
            }
            return false;
        }).appendTo(self.page.$$header);
    },
    onDocumentResize: function(){
        this.maximizeOverlay();
        this.$$overlay.show();
        this.center();
    },
    maximizeOverlay: function(){
        this.$$overlay.css({
            width: 0,
            height: 0
        }).css({
            width: document.site.$$container.outerWidth(),
            height: document.site.$$container.outerHeight()
        });
    },
    center: function(){
        var body = document.site.$$body[0];
        var style = this.$$dialog[0].style;
        var left, top;
        var bodyWidth = document.site.$$container.innerWidth();
        var bodyHeight = document.site.$$container.innerHeight();
        switch (this.page.$dialogSize) {
            case "content":
                left = (body.clientWidth - this.$$dialog.outerWidth()) / 2;
                top = (body.clientHeight - this.$$dialog.outerHeight()) / 2;
                break;
            default:
                var margin = {
                    left: 30,
                    top: 30
                };
                left = margin.left;
                top = document.site.$$body.offset().top + margin.top;
                var width = body.clientWidth - (margin.left * 2);
                if (width < 0) {
                    left = 0;
                    width = body.clientWidth;
                }
                style.width = width + "px";
                var height = body.clientHeight - (margin.top * 2);
                if (height < 0) {
                    top = 0;
                    height = body.clientHeight;
                }
                style.height = height + "px";
                break;
        }
        style.left = left + "px";
        style.top = top + "px";
        if (this.page.onDialogResize) {
            this.page.onDialogResize(this.$$dialog);
        }
    },
    dispose: function(){
        if (this.$$closeBtn) {
            this.$$closeBtn.unbind();
            delete this.$$closeBtn;
        }
        if (this.$$overlay) {
            this.$$overlay.remove();
        }
        if (this.$$dialog) {
            this.$$dialog.remove();
            delete this.$$dialog;
        }
        delete this.page;
    }
});
