"use strict";
var helpers = require('syracuse-core/lib/helpers');

function Group(severity){
    var group = document.createElement("div");
    group.className = 's-diag-view-group-' + (this.severity = severity);
    this.$$group = $(group);
}

helpers.defineClass(Group, null, {
    empty: function(field){
        if (field) {
            this.$$group.children().children("a[data-s-menu=" + field.id + "]").parent().remove();
        }
        else {
            this.$$group.empty();
        }
    },
    formatMessage: function($diagnose){
        return $diagnose.message.replace(/\n/g, "<BR/>");
    },
    drawFieldDiagnose: function($diagnose, field){
        var html = document.createElement("a");
        html.setAttribute("data-s-menu", field.id);
        html.setAttribute("data-s-article", field.boxParent.getArticle().id);
        html.className = "s-diag-view-msg-link";
        this.drawLabel($diagnose).prepend($(html).text(field.$field.$title + ":")).appendTo(this.$$group);
        
        html = document.createElement("label");
        html.className = "s-field-diagnose-msg-" + this.severity;
        field.$$diagnose.append($(html).append(this.formatMessage($diagnose)));
    },
    drawLabel: function($diagnose){
        var label = document.createElement("label");
        label.className = "s-diag-view-msg-" + this.severity;
        $(label).append(this.formatMessage($diagnose));
        return $(label);
    },
    drawDiagnose: function($diagnose){
        this.drawLabel($diagnose).appendTo(this.$$group);
    },
    appendToViewer: function($$body){
        this.$$group.appendTo($$body);
    },
    dispose: function(){
        this.$$count = this.$$group = null;
    }
});

function Groups(viewer){
    var self = this;
    self.severities = {};
    self._groups = (["error", "fatal", "warning", "info"]).map(function(severity){
        return self.severities[severity] = new Group(severity);
    });
    self.viewer = viewer;
}

helpers.defineClass(Groups, null, {
    getGroup: function(severity){
        return this.severities[severity || "error"];
    },
    drawFieldDiagnoses: function($diagnoses, field){
        var self = this;
        field.$$diagnose = (field.$$diagnose || $("<div class='s-field-diagnose'/>").appendTo(field.$$core)).empty();
        var group;
        $diagnoses.forEach(function($diagnose){
            (group = self.getGroup($diagnose.severity)).drawFieldDiagnose($diagnose, field);
            self.drawLinks($diagnose);
        });
        field.$$diagnose[0].style.visibility = "";
        if (group) {
            field.toggleDiagnose("s-" + group.severity, true);
        }
    },
    drawDiagnoses: function($diagnoses){
        var self = this;
        $diagnoses.forEach(function($diagnose){
            self.getGroup($diagnose.severity).drawDiagnose($diagnose);
            self.drawLinks($diagnose);
        });
    },
    drawLinks: function($diagnose){
        if ($diagnose.$links || $diagnose.$actions) {
            this.viewer.drawLinks($diagnose);
        }
    },
    empty: function(field){
        this._groups.forEach(function(group){
            group.empty(field);
        });
    },
    appendToViewer: function($$body){
        this._groups.forEach(function(group){
            group.appendToViewer($$body);
        });
    },
    dispose: function(){
        var self = this;
        self._groups.forEach(function(group){
            delete self.severities[group.severity];
            group.dispose();
        });
        delete self._groups;
        delete self.viewer;
    }
});


function DesktopDiagnoses(){
}

exports.DesktopDiagnoses = helpers.defineClass(DesktopDiagnoses, null, {
    _emptyViewer: function(){
        this.$$item.hide();
        if (this._links) {
            this._links.getArticle().removeItem(this._links, true);
            delete this._links;
        }
        this.groups.empty();
    },
    appenToPage: function(page, $$container){
        this.page = page;
        this.$$item = $("<aside class='s-diag-view'/>").appendTo($$container);
    },
    _refreshViewer: function(showAll){
        var total = 0;
        var countSeverity = 0;
        var self = this;
        var localize = document.controller.localize.diagnoseManager;
        self.$$header.empty();
        self.$$body.empty();
        self.groups._groups.forEach(function(group){
            var count = group.$$group.children().length;
            var html = document.createElement("a");
            html.className = "s-diag-view-count";
            html.setAttribute("id", 's-diag-view-count-' + group.severity);
            var $$count = $(html);
            if (count) {
                total += count;
                countSeverity++;
                group.$$group.appendTo(self.$$body);
                $$count.text(count + " " + localize[group.severity]).toggleClass("s-open", true).appendTo(self.$$header).bind("click", function(){
                    self.$$body.empty();
                    group.$$group.appendTo(self.$$body);
                    self.$$header.children().toggleClass("s-open", false);
                    $(this).toggleClass("s-open", true);
                });
            }
            $$count.toggle(count > 0);
        });
        if (total) {
            if (countSeverity > 1) {
                self.$$header.children().toggleClass("s-open", false);
                var html = document.createElement("a");
                html.className = "s-diag-view-count s-open";
                html.setAttribute("id", "s-diag-view-count-diagnoses");
                var $$all = $(html).text(total + " Diagnose(s)").appendTo(self.$$header);
                self.groups.appendToViewer(self.$$body);
                $$all.bind("click", function(){
                    self.$$body.empty();
                    self.groups.appendToViewer(self.$$body);
                    self.$$header.children().toggleClass("s-open", false);
                    $(this).toggleClass("s-open", true);
                });
            }
            
        }
        self.$$item.toggle(total > 0);
    },
    _initializeCore: function(){
        var self = this;
        
        var html = document.createElement("div");
        html.setAttribute("id", "s-diag-view-core");
        self.$$item.append(self.$$core = $(html)).draggable();
        
        html = document.createElement("a");
        html.className = "s-diag-view-close";
        self.$$item.append(html);
        
        html = document.createElement("header");
        html.className = "s-diag-view-header";
        self.$$header = $(html);
        
        html = document.createElement("div");
        html.className = "s-diag-view-msg-list";
        self.$$body = $(html);
        
        self.groups = new Groups(self)
        self.$$core.append(self.$$header).append(self.$$body);
        
        self.$$item.delegate("a.s-diag-view-msg-link", "click", function(){
            var field = document.controller.findItem($(this));
            if (field) {
                field.focus();
            }
            return false;
        }).delegate("a.s-diag-view-close", "click", function(){
            self._emptyViewer();
            return false;
        });
    },
    drawLinks: function(message, page){
        if (!this._links) {
            this._links = document.itemFactory.load(this.$$item, {
                $category: "links",
                $skin: "s-diag-view-links",
                $isBindDisabled: true,
                $links: message.$links,
                $actions: message.$actions
            }, page || this.page);
        }
        else {
            if (message.$links) {
                this._links.addMenuItems(message.$links);
            }
            if (message.$actions) {
                this._links.addMenuItems(message.$actions, true);
            }
        }
    },
    showDiagnoses: function(message, page){
        var self = this;
        if (!self.$$header) {
            self._initializeCore();
        }
        if (!message || (!message.field && !message.$diagnoses)) {
            self._emptyViewer();
        }
        if (message.$diagnoses && message.$diagnoses.length > 0) {
            if (message.field) {
                self.groups.drawFieldDiagnoses(message.$diagnoses, message.field);
            }
            else {
                self.groups.drawDiagnoses(message.$diagnoses);
            }
        }
        else {
            self.groups.empty(message.field);
            if (message.field && message.field.$$diagnose) {
                message.field.$$diagnose.empty()[0].style.visibility = "hidden";
            }
        }
        if (message.$links || message.$actions) {
            this.drawLinks(message, page);
        }
        self._refreshViewer();
        if (message.autoHide) {
            setTimeout(function(){
                self._emptyViewer();
            }, 4000);
        }
    },
    dispose: function(){
        if (this.groups) {
            this.groups.dispose();
            delete this.groups;
        }
        if (this.$$item) {
            this.$$item.undelegate();
        }
        delete this.page;
    }
});
