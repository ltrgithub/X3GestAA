"use strict";
var MenuItem = require('syracuse-ui/lib/common/article/menuItem').MenuItem;
var DesktopMenus = require('syracuse-ui/lib/desktop/article/desktopMenus').DesktopMenus;
var desktopSectionBlock = require('syracuse-ui/lib/desktop/article/desktopSectionBlock');
var SearchFacets = require('syracuse-ui/lib/desktop/article/searchFacets').SearchFacets;
var flashChart = require('../field/chart/flashChart');
var highCharts = require('../field/chart/highCharts');
//var fusionChartsXT = require('../field/chart/fusionChartsXT');
var testFactory = require('syracuse-ui/lib/common/tests/testFactory');
var alphaNumField = require('syracuse-ui/lib/common/field/alphaNumField');
var Field = require('syracuse-ui/lib/common/field/field').Field;
var Slot = require('syracuse-ui/lib/common/article/slot').Slot;

var datetimeField = require('../field/datetimeField');
var binaryField = require('syracuse-ui/lib/common/field/binaryField');
var DesktopNumeric = require('../field/numericField').DesktopNumeric;

exports.fieldTypes = {
    "application/x-choice": require('../field/choice/choiceField').DesktopChoiceField,
    "application/x-date": datetimeField.DesktopDateTime,
    "application/x-time": datetimeField.DesktopDateTime,
    "application/x-datetime": datetimeField.DesktopDateTime,
    "application/x-binary": binaryField.FileField,
    "image": binaryField.ImageField,
    "application/x-boolean": require('../field/booleanField').DesktopBoolean,
    "application/x-integer": DesktopNumeric,
    "application/x-decimal": DesktopNumeric,
    "application/x-real": DesktopNumeric,
    "application/x-password": require('../field/passwordField').DesktopPassword,
    "application/x-string$text": Field,
    "application/x-string$phone": alphaNumField.PhoneField,
    "application/x-string$email": alphaNumField.EmailField,
    "application/x-collection": require("../field/collection/list").DesktopList,
    "application/x-reference": require('syracuse-ui/lib/common/field/referenceField').ReferenceField,
    "application/x-cube": require('../field/cube/cubeField'),
    "application/x-portlet": require('../field/portlet/portletField').PortletField,
    "application/x-graph$d3": require('../field/chart/d3Graph'),
    "application/x-tag-cloud$d3": require('../field/chart/d3TagCloud'),
    "application/x-calendar": require('../field/schedule/calendar').Calendar,
    "application/x-gantt": require('../field/schedule/gantt').Gantt,
    "application/x-process": require('../field/process/visualProcess').VisualProcess,
    "text/rtf": require('../field/editor/htmlEditor').HtmlEditor
};


exports.layouts = {
    columns: require("syracuse-ui/lib/common/article/layouts/columnsLayout").ColumnsLayout,
    side: require("syracuse-ui/lib/common/article/layouts/sideLayout").SideLayout,
    stack: require("syracuse-ui/lib/common/article/layouts/stackLayout").StackLayout,
    tabs: require("syracuse-ui/lib/common/article/layouts/tabsLayout").TabsLayout,
    composite: require("syracuse-ui/lib/common/article/layouts/compositeLayout").CompositeLayout
};

exports.defaultPageCategory = require('syracuse-ui/lib/desktop/article/page').DesktopPage;
exports.pageCategories = {
    fusionpage: require('syracuse-ui/lib/fusion/article/page').FusionPage
};

exports.categories = {
    slot: {
        create: function(){
            return new Slot();
        }
    },
    tests: {
        create: function($item){
            return new testFactory[$item.$format]();
        }
    },
    searchFacets: {
        create: function(){
            return new SearchFacets();
        }
    },
    section: {
        create: function(){
            return new desktopSectionBlock.DesktopSection();
        }
    },
    block: {
        create: function(){
            return new desktopSectionBlock.DesktopBlock();
        }
    },
    links: {
        create: function(){
            return new DesktopMenus();
        }
    },
    fusionLink: {
        create: function(){
            return new MenuItem();
        }
    },
    link: {
        create: function(){
            return new MenuItem();
        }
    },
    fusionBar: {
        create: function($item, page){
            page.appendFusionBar($item);
            return null;
        }
    },
    tabularChart: {
        types: {
            x3flash: flashChart.TabularChart,
            highCharts: highCharts.TabularChart
            /*,
             fusionChartsXT: fusionChartsXT.TabularChart*/
        },
        create: function($item){
            var itemClass = this.types[$item.$chartType || "highCharts"];
            // var itemClass = this.types[$item.$chartType || "x3flash"];
            return new itemClass();
        }
    },
    field: {
        create: function($item, boxParent){
            var article = boxParent.getArticle();
            var $field = $item.$field || article.$prototype.$[$item.$bind];
            var field;
            if ($field) {
                var $class = $field.$type;
                var fieldClass;
                switch ($class) {
                    case "application/x-tag-cloud":
                        var $format = $field.$format || $item.$format || "d3.tagCloud";
                        var parts = $format.split(".");
                        fieldClass = exports.fieldTypes[$class + "$" + parts[0]][parts[1]];
                        break;
                    case "application/x-graph":
                        var $format = $field.$format || $item.$format || "d3.nodeChart";
                        var parts = $format.split(".");
                        fieldClass = exports.fieldTypes[$class + "$" + parts[0]][parts[1]];
                        break;
                    case "application/x-string":
                        $class += ($field.$format || "$text");
                        break;
                }
                field = article.getPage().externalAdapter.createField($field, $item, boxParent, $class);
                if (!field) {
                    fieldClass = fieldClass || exports.fieldTypes[$class];
                    if (fieldClass) {
                        (field = new fieldClass()).$field = $field;
                    }
                }
                
                if (!field) {
                    console.log("field type unknow:" + $item.$bind + ($field.$type || ""));
                }
            }
            else {
                console.log($item.$bind + " is defined in Layout but not in proto");
            }
            return field;
        }
    }
};
