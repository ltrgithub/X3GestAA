"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var LayoutChoice = require("./layoutChoice").LayoutChoice;
var layoutSettings = require('syracuse-ui/lib/common/article/layouts/authoring/layoutSettings');
var _localize = {
    newSection: "New Section",
    newBlock: "New Block",
    addSection: "add a section",
    addBlock: "add a block",
    lightMode: "(switch to light mode)",
    fullMode: "(switch to full mode)",
    isSeparatorsVisible: "show separators",
    isBoxCollapsable: "collapsible",
    isMaximizable: "maximizable",
    isTitleHidden: "hide panel title",
    widthSmall: "small",
    widthMedium: "medium",
    widthLarge: "large",
    widthMaximum: "maximum",
    isHidden: "hide me",
    isTopLabelAlignment: "top aligned",
    isLabelHidden: "hidden",
    isRightTextLabelAlignment: "text",
    textLabelLeftAligned: "left aligned",
    textLabelRightAligned: "right aligned",
    layoutColumns: "columns",
    layoutComposite: "composite"
};
function BoxPalette(){
}

exports.BoxPalette = helpers.defineClass(BoxPalette, Article, {
    addNewBox: function(parentBox, $category){
        var newItem = document.itemFactory.create({
            $category: $category,
            $title: _localize["new" + $category.slice(0, 1).toUpperCase() + $category.slice(1)],
            $layout: {
                $items: []
            }
        }, parentBox);
        parentBox.layoutContent.appendNewItem({
            newItem: newItem,
            load: true
        });
        newItem.authoringNode.tree.showTargetItem(newItem.authoringNode);
    },
    formatLayoutPrototype: function(){
        var $enums = layoutSettings.$columns.map(function($width){
            var $parts = $width.split(",");
            return {
                $value: $parts.join("-"),
                $title: $parts.length + " " + _localize.layoutColumns // + " ( " + $parts.join("% ") + ")"
            };
        });
        Object.keys(layoutSettings.$composite).forEach(function($key){
            $enums.push({
                $value: $key,
                $title: layoutSettings.$composite[$key].$title || _localize.layoutComposite
            });
        });
        return {
            $type: "application/x-choice",
            $title: "Layout",
            $value: {
                $type: "application/x-string",
                $constraints: {
                    $enum: $enums
                }
            }
        };
    },
    loadBox: function(palette, $boxItem){
        var self = this;
        self.$prototype = {
            "$": {
                $isHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isHidden
                },
                $isMaximizable: {
                    $type: "application/x-boolean",
                    $title: _localize.isMaximizable
                },
                $isBoxCollapsable: {
                    $type: "application/x-boolean",
                    $title: _localize.isBoxCollapsable
                },
                $isSeparatorsVisible: {
                    $type: "application/x-boolean",
                    $title: _localize.isSeparatorsVisible
                },
                $isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isTitleHidden
                },
                $layoutType: self.formatLayoutPrototype(),
                $field$width: {
                    $type: "application/x-choice",
                    $title: "Value Size",
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "small",
                                $title: _localize.widthSmall
                            }, {
                                $value: "medium",
                                $title: _localize.widthMedium
                            }, {
                                $value: "large",
                                $title: _localize.widthLarge
                            }, {
                                $value: "fit",
                                $title: _localize.widthMaximum
                            }]
                        }
                    }
                },
                $field$isTopLabelAlignment: {
                    $type: "application/x-boolean",
                    $title: _localize.isTopLabelAlignment
                },
                $field$isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isLabelHidden
                },
                $field$isRightTextLabelAlignment: {
                    $type: "application/x-choice",
                    $title: _localize.isRightTextLabelAlignment,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: false,
                                $title: _localize.textLabelLeftAligned
                            }, {
                                $value: true,
                                $title: _localize.textLabelRightAligned
                            }]
                        }
                    }
                }
            },
            $links: {
                $switchMode: {
                    $title: _localize.lightMode
                },
                $addSection: {
                    $title: _localize.addSection
                },
                $addBlock: {
                    $title: _localize.addBlock
                }
            },
            $isMaximizable: false,
            $isBoxCollapsable: false,
            $isSeparatorsVisible: false,
            $isTitleHidden: false,
            $field$width: "fit",
            $field$isTopLabelAlignment: false,
            $field$isTitleHidden: false,
            $field$isRightTextLabelAlignment: false
        };
        
        var isPage = palette.designedNode.isPageItem();
        var designedItem = palette.designedNode.item;
        document.itemFactory.initializeItem(self, {
            $category: "section",
            $bind: "$box",
            $isSeparatorsVisible: true,
            $skin: "s-author-designer-item",
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "50,50",
                $items: [{
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $id: (self.$layoutSectionId = document.controller.generateUUID()),
                        $title: "Layout",
                        $layout: {
                            $layoutType: "side",
                            $layoutCss: "s-author-designer-item-side",
                            $items: [{
                                $layoutType: "stack",
                                $items: [{
                                    $bind: "$layoutType",
                                    $iconMode: "iconText",
                                    //$format: "$radios",
                                    $iconPath: "authoring/s-layout-",
                                    $iconSize: {
                                        $width: "32px",
                                        $height: "32px"
                                    },
                                    $choiceLayout: "3",
                                    $isEditMode: true,
                                    $skin: "s-author-field",
                                    $isLeftSpaceHidden: true
                                }, {
                                    $bind: "$isSeparatorsVisible",
                                    $skin: "s-author-field",
                                    $isEditMode: true,
                                    $isLeftSpaceHidden: true
                                }]
                            }, {
                                $layoutType: "stack",
                                $items: ["$isHidden", "$isTitleHidden", "$isBoxCollapsable", "$isMaximizable"].map(function($bind){
                                    return {
                                        $bind: $bind,
                                        $skin: "s-author-field",
                                        $isHidden: isPage,
                                        $isEditMode: true,
                                        $isLeftSpaceHidden: true
                                    };
                                })
                            }, {
                                $layoutType: "stack",
                                $items: [{
                                    $bind: "$switchMode",
                                    $skin: "s-author-designer-link",
                                    $css: "s-author-designer-link-switch",
                                    $category: "link"
                                }, {
                                    $bind: "$addSection",
                                    $skin: "s-author-designer-link",
                                    $isHidden: !isPage,
                                    $category: "link"
                                }, {
                                    $bind: "$addBlock",
                                    $skin: "s-author-designer-link",
                                    $isHidden: !(isPage || designedItem.$item.$category == "section"),
                                    $category: "link"
                                }]
                            }]
                        }
                    }]
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $bind: "$field",
                        $title: "For all fields",
                        $layout: {
                            $layoutType: "side",
                            $layoutCss: "s-author-designer-item-side",
                            $items: [{
                                $category: "block",
                                $title: "Labels",
                                $layout: {
                                    $items: [{
                                        $bind: "$field$isTitleHidden",
                                        $skin: "s-author-field",
                                        $isEditMode: true,
                                        $isLeftSpaceHidden: true
                                    }, {
                                        $bind: "$field$isTopLabelAlignment",
                                        $skin: "s-author-field",
                                        $isEditMode: true,
                                        $isLeftSpaceHidden: true
                                    }, {
                                        $bind: "$field$isRightTextLabelAlignment",
                                        $skin: "s-author-field",
                                        $isEditMode: true,
                                        $labelWidth: "auto"
                                    }]
                                }
                            }, {
                                $category: "block",
                                $title: "Size",
                                $layout: {
                                    $items: [{
                                        $bind: "$field$width",
                                        $skin: "s-author-field",
                                        $isEditMode: true,
                                        $isTitleHidden: true,
                                        $labelWidth: "auto",
                                        $format: "$combo"
                                    }]
                                }
                            }]
                        }
                    }]
                }]
            
            }
        }, palette);
        self.$$container = palette.$$item;
        Article.prototype.loadBox.call(this, $boxItem);
        var switchMode = self.menuItems.$switchMode[0];
        var layoutSection = self.idMap[self.$layoutSectionId];
        (switchMode.$$container = layoutSection.$$header).append(switchMode.$$item);
        switchMode.onMenuClick = function(){
            var node = palette.designedNode;
            node.toggleLightMode();
            this.setTitle(node.$isLightMode ? _localize.fullMode : _localize.lightMode);
            return false;
        };
        self.menuItems.$addSection[0].onMenuClick = function(){
            self.addNewBox(designedItem, "section");
            return false;
        };
        self.menuItems.$addBlock[0].onMenuClick = function(){
            self.addNewBox(designedItem, "block");
            return false;
        };
        /* self.layoutChoice = new LayoutChoice();
         self.layoutChoice.render($("<div/>").prependTo(self.boundFields.$isSeparatorsVisible[0].$$container), {
         $showTitle: true
         }, palette);*/
    },
    dispose: function(){
        delete this.palette;
        Article.prototype.dispose.call(this);
    }
});
