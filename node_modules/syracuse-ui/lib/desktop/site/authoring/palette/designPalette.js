"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var FieldPalette = require("./fieldPalette").FieldPalette;
var BoxPalette = require("./boxPalette").BoxPalette;

function DesignPalette(){
}

exports.DesignPalette = helpers.defineClass(DesignPalette, Article, {
    onNotifyRecordChange: function(value, binding){
        var metaData = {};
        Object.keys(value).forEach(function(prop){
            if (prop.indexOf("$field$") == 0) {
                (metaData.$field = metaData.$field || {})[prop.slice("$field".length)] = value[prop];
                delete value[prop];
            }
        });
        if (!metaData.$field) {
            metaData[binding] = value;
        }
        this.designedNode.applyDesignMetaData(metaData);
        return metaData; //cancel notify
    },
    getPage: function(){
        return this;
    },
    drawBox: function(){
        this.externalAdapter = document.site.externalAdapter;
        this.$skin = "s-author-designer";
        this.$$item = $("<div class='s-author-panel'/>").appendTo(this.$$container).hide();
        var $authoringSubType = this.designedNode.item.$authoringSubType;
        if (!$authoringSubType && this.designedNode.item.getPage) {
            $authoringSubType = this.designedNode.item.getPage().$authoringSubType;
        }
        document.site.isAuthoring = false; //temp for layout
        var itemDesigner = (this.designedNode.$authoringLevel != "field") ? new BoxPalette() : new FieldPalette();
        itemDesigner.$layoutOptions = document.site.$item.$layoutOptions.authoring;
        itemDesigner.loadBox(this, this.designedNode.item.$item);
        document.site.isAuthoring = true;
        this.$$item.toggle(true);
    },
    dispose: function(){
        if (this.$$item) {
            this.$$item.remove();
        }
        delete this.designedNode;
        Article.prototype.dispose.call(this);
    }
});


