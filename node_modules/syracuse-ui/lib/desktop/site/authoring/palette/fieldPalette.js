"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var _localize = {
    newSection: "New Section",
    newBlock: "New Block",
    addSection: "add a section",
    addBlock: "add a block",
    lightMode: "(switch to light mode)",
    fullMode: "(switch to full mode)",
    isSeparatorsVisible: "show separators",
    isBoxCollapsable: "collapsible",
    isMaximizable: "maximizable",
    isTitleHidden: "hide panel title",
    widthSmall: "small",
    widthMedium: "medium",
    widthLarge: "large",
    widthMaximum: "maximum",
    isHidden: "hide me",
    isTopLabelAlignment: "top aligned",
    isLabelHidden: "hidden",
    isRightTextLabelAlignment: "text",
    textLabelLeftAligned: "left aligned",
    textLabelRightAligned: "right aligned"
};



function FieldPalette(){
}

exports.FieldPalette = helpers.defineClass(FieldPalette, Article, {
    loadBox: function(palette, $fieldItem){
        this.$prototype = {
            "$": {
                $isHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isHidden
                },
                $width: {
                    $type: "application/x-choice",
                    $title: "Value Size",
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "small",
                                $title: _localize.widthSmall
                            }, {
                                $value: "medium",
                                $title: _localize.widthMedium
                            }, {
                                $value: "large",
                                $title: _localize.widthLarge
                            }, {
                                $value: "fit",
                                $title: _localize.widthMaximum
                            }]
                        }
                    }
                },
                $isTopLabelAlignment: {
                    $type: "application/x-boolean",
                    $title: _localize.isTopLabelAlignment
                },
                $isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isLabelHidden
                },
                $isRightTextLabelAlignment: {
                    $type: "application/x-choice",
                    $title: _localize.isRightTextLabelAlignment,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: false,
                                $title: _localize.textLabelLeftAligned
                            }, {
                                $value: true,
                                $title: _localize.textLabelRightAligned
                            }]
                        }
                    }
                }
            },
            $width: "fit",
            $isTopLabelAlignment: false,
            $isTitleHidden: false,
            $isRightTextLabelAlignment: false
        };
        document.itemFactory.initializeItem(this, {
            $category: "section",
            $bind: "$field",
            $isSeparatorsVisible: true,
            $skin: "s-author-designer-item",
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "25,25,50",
                $items: [{
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $title: "Layout",
                        $layout: {
                            $items: [{
                                $skin: "s-author-field",
                                $bind: "$isHidden",
                                $isEditMode: true,
                                $isLeftSpaceHidden: true
                            }, {
                                $skin: "s-author-field",
                                $bind: "$width",
                                $isEditMode: true,
                                $isTitleHidden: true,
                                $labelWidth: "auto",
                                $format: "$combo"
                            }]
                        }
                    }]
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $title: "Labels",
                        $layout: {
                            $items: [{
                                $skin: "s-author-field",
                                $bind: "$isTitleHidden",
                                $isEditMode: true,
                                $isLeftSpaceHidden: true
                            }, {
                                $skin: "s-author-field",
                                $bind: "$isTopLabelAlignment",
                                $isEditMode: true,
                                $isLeftSpaceHidden: true
                            }, {
                                $skin: "s-author-field",
                                $bind: "$isRightTextLabelAlignment",
                                $isEditMode: true,
                                $labelWidth: "auto"
                            }]
                        }
                    }]
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $category: "slot",
                        $id: "s-author-designer-custom-field"
                    }]
                }]
            
            }
        }, palette);
        this.$$container = palette.$$item;
        Article.prototype.loadBox.call(this, $fieldItem);
        if (palette.designedNode.item.getAuthoringWidget) {
            if (this.fieldAuthoring = palette.designedNode.item.getAuthoringWidget()) {
                this.fieldAuthoring.$$container = $("#s-author-designer-custom-field");
                document.itemFactory.initializeItem(this.fieldAuthoring, {}, palette);
                this.fieldAuthoring.designedField = palette.designedNode.item;
                this.fieldAuthoring.$layoutOptions = document.site.$item.$layoutOptions.authoring;
                this.fieldAuthoring.$skin = this.fieldAuthoring.$layoutOptions.section;
                this.fieldAuthoring.loadBox($fieldItem);
            }
        }
    },
    dispose: function(){
        if (this.fieldAuthoring) {
            delete this.fieldAuthoring.designedField;
            delete this.fieldAuthoring;
        }
        delete this.palette;
        Article.prototype.dispose.call(this);
    }
});
