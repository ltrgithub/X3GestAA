"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var layoutSettings = require('syracuse-ui/lib/common/article/layouts/authoring/layoutSettings');
var _localize = {
    allFields: "All fields",
    allSections: "All sections",
    layoutStacked: "stacked",
    layoutInTab: "in tab",
    layoutSide: "side by side",
    addSection: "add a section",
    lightMode: "show light mode",
    fullMode: "show full mode",
    isSeparatorsVisible: "show separators",
    widthContent: "content",
    widthSmall: "small",
    widthMedium: "medium",
    widthLarge: "large",
    widthMaximum: "maximum",
    isHidden: "hide me",
    labelLeftAlignment: "at left",
    labelTopAlignment: "at top",
    textLabelAlignment: "text alignment",
    textLabelLeftAligned: "left",
    textLabelRightAligned: "right",
    layoutColumn: "1 column",
    layoutColumns: "columns",
    layoutComposite: "composite",
    isBoxCollapsable: "collapsible",
    isMaximizable: "maximizable",
    boxTitle: "title",
    isTitleHidden: "hide title",
    isTopLabelAlignment: "top aligned",
    isLabelHidden: "hide label",
    allBlocks: "All blocks",
    addBlock: "add a block",
    fieldsPosition: "Position",
    addField: "add a field",
    fieldSize: "Size",
    fieldLabel: "Label",
    fieldLabelPosition: "Label position",
    fieldLabelsPosition: "Labels position",
    layout: "Layout",
    appearance: "Appearance",
    structure: "Structure",
    selectTemplate: "apply template",
    defaultFieldTitle: "Field"
};

function ItemPalette(){

}

exports.ItemPalette = helpers.defineClass(ItemPalette, Article, {
    getLocalize: function(){
        return _localize;
    },
    getNode: function(){
        return this.authoringView.designedNode;
    },
    isFieldItem: function(){
        return this.getNode().$authoringLevel == "field";
    },
    getPage: function(){
        return this;
    },
    _notifyChildrenFields: function(children, value, binding){
        var self = this;
        children.forEach(function(child){
            if (child.$authoringLevel == "field") {
                self._notifyFieldItem(child.item, value, binding);
            }
            else {
                if (child.children) {
                    self._notifyChildrenFields(child.children, value, binding);
                }
            }
        });
    },
    _notifyFieldItem: function(item, value, binding){
        var metaData = {}
        metaData[binding] = value;
        item.applyDesignMetaData(metaData, true);
        if (item.authoringNode && metaData.$isHidden !== undefined) {
            item.authoringNode.applyHiddenState(metaData);
        }
    },
    onNotifyRecordChange: function(value, binding){
        var self = this;
        var metaData = {};
        var node = self.getNode();
        metaData[binding] = value;
        if (self.isFieldItem()) {
            self._notifyFieldItem(node.item, value, binding);
        }
        else {
            if (binding.indexOf("$fields") == 0) {
                var fieldBind = binding.slice("$fields".length);
                fieldBind = fieldBind.slice(0, 1).toLowerCase() + fieldBind.slice(1);
                self._notifyChildrenFields(node.children, value, "$" + fieldBind);
                node.item.applyDesignMetaData(metaData);
            }
            else {
                if (metaData.$boxLayoutType !== undefined) {
                    metaData.$layout = {};
                    if (metaData.$boxLayoutType == "100") {
                        metaData.$layout.$layoutType = self.boundFields.$allChildLayout[0].currentValue;
                    }
                    else {
                        metaData.$layout.$layoutType = "columns";
                        metaData.$layout.$layoutSubType = metaData.$boxLayoutType.replace(/-/g, ",");
                    }
                }
                if (metaData.$allChildLayout) {
                    if (metaData.$allChildLayout == "tabs") {
                        if (this.getNode().getChildrenLevel() == "field") {
                            var authoringView = this.authoringView;
                            var newBox = authoringView.addNewBox({
                                parentBox: node.item,
                                $category: node.$authoringLevel == "section" ? "block" : "section",
                                doSelectItem: false
                            });
                            authoringView.moveContent({
                                sourceNode: node,
                                targetItem: newBox
                            });
                            metaData.$layout = metaData.$layout || {};
                            metaData.$layout.$layoutType = metaData.$allChildLayout;
                            delete metaData.$allChildLayout;
                            node.item.applyDesignMetaData(metaData);
                            return null;
                        }
                    }
                    metaData.$layout = metaData.$layout || {};
                    metaData.$layout.$layoutType = metaData.$allChildLayout;
                    delete metaData.$allChildLayout;
                }
                node.item.applyDesignMetaData(metaData);
                if (metaData.$isHidden !== undefined) {
                    node.applyHiddenState(metaData);
                }
            }
        }
        self.authoringView.isUpdated = true;
        self.applyChange(metaData);
        return null;
    },
    applyChange: function(newData){
        var self = this;
        var metaData = {
            $: {}
        };
        if (newData) {
            Object.keys(newData).forEach(function($prop){
                var value = newData[$prop];
                if ($prop == "$layout") {
                    $prop = "$boxLayoutType";
                    switch (newData.$layout.$layoutType || "stack") {
                        case "stack":
                        case "side":
                        case "tabs":
                            value = "100";
                            metaData.$allChildLayout = newData.$layout.$layoutType;
                            break;
                        default:
                            value = (newData.$layout.$layoutSubType || "50,50").replace(/,/g, "-");
                            break;
                    }
                }
                switch ($prop) {
                    case "$boxLayoutType":
                        if (!newData.$allChildLayout && !metaData.$allChildLayout) {
                            metaData.$allChildLayout = "stack";
                        }
                        metaData.$.$allChildLayout = {
                            $isDisabled: value != "100"
                        };
                        break;
                    case "$isTopLabelAlignment":
                        metaData.$.$isRightTextLabelAlignment = {
                            $isDisabled: value
                        };
                        break;
                    case "$fieldsIsTopLabelAlignment":
                        metaData.$.$fieldsIsRightTextLabelAlignment = {
                            $isDisabled: value
                        };
                        break;
                    case "$isHidden":
                        var $isDisabled = {
                            $isDisabled: value
                        };
                        Object.keys(self.$prototype.$).forEach(function($key){
                            if ($key.indexOf("$isHidden") < 0) {
                                metaData.$[$key] = $isDisabled;
                            }
                        });
                        if (self.menuItems) {
                            ["$switchMode", "$addBlock", "$addSection", "$addField"].forEach(function(prop){
                                var menus = self.menuItems[prop];
                                if (menus) {
                                    menus.forEach(function(menu){
                                        menu.setMenu($isDisabled);
                                    });
                                }
                                
                            });
                        }
                        break;
                    case "$fieldsIsTitleHidden":
                        (metaData.$.$fieldsIsTopLabelAlignment = metaData.$.$fieldsIsTopLabelAlignment || {}).$isDisabled = value;
                        var isRightDisabled = !value ? (newData.$fieldsIsTopLabelAlignment || self.dataset.$fieldsIsTopLabelAlignment) : true;
                        (metaData.$.$fieldsIsRightTextLabelAlignment = metaData.$.$fieldsIsRightTextLabelAlignment || {}).$isDisabled = isRightDisabled;
                        break;
                    case "$isTitleHidden":
                        if (self.isFieldItem()) {
                            (metaData.$.$isTopLabelAlignment = metaData.$.$isTopLabelAlignment || {}).$isDisabled = value;
                            var isRightDisabled = !value ? (newData.$isTopLabelAlignment || self.dataset.$isTopLabelAlignment) : true;
                            (metaData.$.$isRightTextLabelAlignment = metaData.$.$isRightTextLabelAlignment || {}).$isDisabled = isRightDisabled;
                        }
                        else {
                            metaData.$.$title = metaData.$.$isBoxCollapsable = metaData.$.$isMaximizable = {
                                $isDisabled: value
                            };
                        }
                        break;
                }
                metaData[$prop] = value;
            });
        }
        Article.prototype.applyChange.call(this, metaData);
    },
    _setSwitchMode: function(){
        var self = this;
        this.menuItems.$switchMode.forEach(function(menu){
            menu.setTitle(self.authoringView.$isLightMode ? _localize.fullMode : _localize.lightMode);
            menu.setValue(self.authoringView.$isLightMode ? "switch-full" : "switch-light");
        });
    },
    onAddFields: function(menuItem){
        var self = this;
        if (!self._popupAdFields) {
            var $$cols = [];
            var targetItem, action;
            var div = document.createElement("div");
            div.className = "s-author-fields-pn";
            self.$$popupPanel = $(div).delegate("a.s-author-fields-field-value", "click", function(){
                var $bind = this.getAttribute("data-s-field");
                setTimeout(function(){
                    var node = self.getNode();
                    var layoutParent;
                    if (!self.isFieldItem()) {
                        var $childLevel = node.getChildrenLevel();
                        if ($childLevel == "section" || $childLevel == "block") {
                            layoutParent = self.authoringView.addNewBox({
                                parentBox: node.item,
                                $category: $childLevel || "section",
                                doSelectItem: false,
                                openBox: true
                            }).layoutContent;
                        }
                        else {
                            layoutParent = node.item.layoutContent;
                        }
                    }
                    else {
                        layoutParent = node.item.layoutParent;
                        targetItem = node.item;
                        action = "insertAfter";
                    }
                    layoutParent.appendNewItem({
                        load: true,
                        newItem: document.itemFactory.create({
                            $bind: $bind
                        }, layoutParent.box),
                        targetItem: targetItem,
                        action: action
                    });
                    if (self._popupAdFields) {
                        self._popupAdFields.close();
                    }
                }, 10);
                return false;
            });
            var div = document.createElement("div");
            div.className = "s-author-fields-table";
            var $$table = $(div).appendTo(self.$$popupPanel);
            
            var article = self.getNode().item.getArticle();
            if (!article.$prototype.$) {
                article = article.getArticleParent();
            }
            var $$col, colLength;
            var excludeBinds = ["$creUser", "$updUser", "$creDate", "$updDate"];
            var $localization = article.getLocalization() || {};
            
            Object.keys(article.$prototype.$).forEach(function($name){
                if (excludeBinds.indexOf($name) < 0) {
                    var $field = article.$prototype.$[$name];
                    if (!$$col) {
                        colLength = 0;
                        div = document.createElement("div");
                        div.className = "s-author-fields-col";
                        $$col = $(div).appendTo($$table);
                    }
                    var div = document.createElement("a");
                    div.className = "s-author-fields-field-value";
                    div.setAttribute("data-s-field", $name);
                    var $$value = $(div);
                    
                    var div = document.createElement("div");
                    div.className = "s-author-fields-field-type";
                    div.style.backgroundImage = "url('" + document.site.$item.$iconPath + "authoring/s-author-light-" + $field.$type.replace("application/x-", "").replace("/","-") + ".png')";
                    $$value.append(div);
                    
                    div = document.createElement("div");
                    div.className = "s-author-fields-field-title";
                    $$value.append($(div).text($field.$title ? ($localization[$field.$title] || $field.$title) : _localize.defaultFieldTitle));
                    var div = document.createElement("a");
                    div.className = "s-author-fields-field-item";
                    $$col.append($(div).append($$value));
                    if (++colLength == 10) {
                        $$col = null;
                    }
                }
            });
            
            menuItem.$$item[0].setAttribute("id", menuItem.id);
            self._popupAdFields = self.boxParent.openDialog({
                $dialogMode: "popup",
                content: self,
                $$dialog: self.$$popupPanel,
                position: {
                    my: "right top",
                    at: "right bottom",
                    of: menuItem.$$item
                },
                onClose: function(){
                    self.$$popupPanel.undelegate();
                    self._popupAdFields = null;
                },
                autocCloseBoundary: "#" + menuItem.id
            });
        }
        else {
            self._popupAdFields.close();
        }
    },
    loadBox: function(){
        var self = this;
        self.isAuthoringDisabled = true;
        var $isEditMode = self.getNode().item.getArticle().$isEditMode;
        if (self.isFieldItem()) {
            if (self.$prototype.$isTopLabelAlignment = $isEditMode) {
                self.$prototype.$.$isRightTextLabelAlignment.$isDisabled = true;
            }
        }
        else {
            if (self.$prototype.$fieldsIsTopLabelAlignment = $isEditMode) {
                self.$prototype.$.$fieldsIsRightTextLabelAlignment.$isDisabled = true;
            }
        }
        self.$prototype.$links = {
            $switchMode: {
                $title: _localize.lightMode
            },
            $addSection: {
                $title: _localize.addSection
            },
            $addBlock: {
                $title: _localize.addBlock
            },
            $addField: {
                $title: _localize.addField
            }
        };
        Article.prototype.loadBox.call(this, this.getNode().item.$item);
        self._addMenus();
        self._addLayoutsHeader();
        
        var formatLayoutLinks = self.idMap["formatLayoutLinks"];
        if (formatLayoutLinks) {
            formatLayoutLinks.onMenuClick = function(menuItem){
                self.getNode().item.applyDesignMetaData({
                    $layout: {
                        $layoutType: "composite",
                        $layoutSubType: menuItem.$bind
                    }
                });
                return false;
            };
        }
    },
    _formatFieldTextLabelAlign: function(isProto){
        var $bind = this.isFieldItem() ? "$isRightTextLabelAlignment" : "$fieldsIsRightTextLabelAlignment";
        if (isProto) {
            this.$prototype.$[$bind] = {
                $type: "application/x-choice",
                $title: _localize.textLabelAlignment,
                $value: {
                    $type: "application/x-string",
                    $constraints: {
                        $enum: [{
                            $value: false,
                            $title: _localize.textLabelLeftAligned
                        }, {
                            $value: true,
                            $title: _localize.textLabelRightAligned
                        }]
                    }
                }
            };
            this.$prototype[$bind] = false;
        }
        else {
            return {
                $bind: $bind,
                $skin: "s-author-field",
                $isEditMode: true,
                $isTopLabelAlignment: false,
                $labelWidth: "auto"
            };
        }
    },
    _formatFieldLabelAlign: function(isProto){
        var $bind = this.isFieldItem() ? "$isTopLabelAlignment" : "$fieldsIsTopLabelAlignment";
        if (isProto) {
            this.$prototype.$[$bind] = {
                $type: "application/x-choice",
                $value: {
                    $type: "application/x-string",
                    $constraints: {
                        $enum: [{
                            $value: false,
                            $title: _localize.labelLeftAlignment
                        }, {
                            $value: true,
                            $title: _localize.labelTopAlignment
                        }]
                    }
                }
            };
            this.$prototype[$bind] = false;
        }
        else {
            return {
                $bind: $bind,
                $skin: "s-author-field",
                $isEditMode: true,
                $isLeftSpaceHidden: true
            };
        }
    },
    _formatFieldWidth: function(isProto){
        var $bind = this.isFieldItem() ? "$width" : "$fieldsWidth";
        if (isProto) {
            this.$prototype.$[$bind] = {
                $type: "application/x-choice",
                $value: {
                    $type: "application/x-string",
                    $constraints: {
                        $enum: [{
                            $value: "content",
                            $title: _localize.widthContent
                        }, {
                            $value: "small",
                            $title: _localize.widthSmall
                        }, {
                            $value: "medium",
                            $title: _localize.widthMedium
                        }, {
                            $value: "large",
                            $title: _localize.widthLarge
                        }, {
                            $value: "fit",
                            $title: _localize.widthMaximum
                        }]
                    }
                }
            };
            this.$prototype[$bind] = "fit";
        }
        else {
            return {
                $bind: $bind,
                $skin: "s-author-field",
                $isEditMode: true,
                $title: _localize.fieldSize,
                $labelWidth: "auto",
                $format: "$combo"
            };
        }
    },
    _addLink: function($bind, $value, $$container){
        return document.itemFactory.load($$container, {
            $bind: $bind,
            $category: "link",
            $skin: "s-author-designer-link",
            $icon: {
                $mode: "icon",
                $path: "authoring/s-author-",
                $width: "25px",
                $height: "25px"
            },
            $value: $value,
        }, this);
    },
    _addMenus: function(){
        var self = this;
        self._addLink("$switchMode", "switch-full", this.authoringView.$$switchModeSlot.empty());
        self._setSwitchMode();
        self.authoringView.$$panelActions.empty();
        ["$addSection", "$addBlock", "$addField"].forEach(function($bind){
            self._addLink($bind, $bind.substr(1).toLowerCase(), self.authoringView.$$panelActions);
        });
        self.onMenuClick = function(menuItem){
            switch (menuItem.$item.$bind) {
                case "$addSection":
                case "$addBlock":
                    var parentNode = self.getNode();
                    var $category = (menuItem.$item.$bind == "$addBlock") ? "block" : "section";
                    var parentLevels = ($category == "block") ? ["article", "section", "block"] : ["article", "section"];
                    var isFieldChildren, newBox;
                    while (parentNode) {
                        if (parentLevels.indexOf(parentNode.$authoringLevel) >= 0) {
                            if (parentNode.$authoringLevel == $category) {
                                isFieldChildren = parentNode.parentNode.getChildrenLevel() == "field";
                                newBox = self.authoringView.addNewBox({
                                    parentBox: parentNode.parentNode.item,
                                    $category: $category,
                                    targetItem: parentNode.item,
                                    action: "insertAfter"
                                });
                            }
                            else {
                                isFieldChildren = parentNode.getChildrenLevel() == "field";
                                newBox = self.authoringView.addNewBox({
                                    parentBox: parentNode.item,
                                    $category: $category
                                });
                            }
                            break;
                        }
                        parentNode = parentNode.parentNode;
                    }
                    if (isFieldChildren) {
                        self.authoringView.moveContent({
                            sourceNode: newBox.authoringNode.parentNode,
                            targetItem: newBox
                        });
                    }
                    return false;
                case "$addField":
                    self.onAddFields(menuItem);
                    return false;
                case "$switchMode":
                    self.authoringView.targetPage.authoringNode.toggleLightMode(null, self.authoringView.$isLightMode = !self.authoringView.$isLightMode);
                    self._setSwitchMode();
                    return false;
            }
        };
    },
    _formatAllFieldsSection: function(){
        return {
            $category: "section",
            $bind: "$field",
            $title: _localize.allFields,
            $layout: {
                $layoutType: "side",
                $items: [{
                    $layoutType: "stack",
                    $items: [this._formatFieldWidth(false)]
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $bind: "$fieldsIsTitleHidden",
                        $skin: "s-author-field",
                        $isEditMode: true,
                        $isLeftSpaceHidden: true
                    }, {
                        $category: "block",
                        $title: _localize.fieldLabelsPosition,
                        $layout: {
                            $items: [this._formatFieldLabelAlign(false), this._formatFieldTextLabelAlign(false)]
                        }
                    }]
                }]
            }
        };
    },
    _formatSectionBlock: function(){
        var items = [{
            $category: "section",
            $title: _localize.appearance,
            $layout: {
                $items: ["$isHidden", "$isSeparatorsVisible", "$isTitleHidden"].map(function($bind){
                    return {
                        $bind: $bind,
                        $skin: "s-author-field",
                        $isEditMode: true,
                        $isLeftSpaceHidden: true
                    };
                })
            }
        }, {
            $category: "section",
            $title: _localize.structure,
            $layout: {
                $items: ["$isBoxCollapsable", "$isMaximizable", "$title"].map(function($bind){
                    return {
                        $bind: $bind,
                        $skin: "s-author-field",
                        $isEditMode: true,
                        $isLeftSpaceHidden: true
                    };
                })
            }
        }];
        items.push(this._formatAllFieldsSection());
        return {
            $category: "section",
            $bind: "$box",
            $isSeparatorsVisible: true,
            $skin: "s-author-designer-item",
            $layout: {
                $layoutType: "side",
                $items: items
            }
        };
    },
    _formatChildLayout: function($category){
        var $enum = [{
            $value: "stack",
            $title: _localize.layoutStacked
        }];
        if (this.$childCategory != "field") {
            $enum.push({
                $value: "tabs",
                $title: _localize.layoutInTab
            });
        }
        $enum.push({
            $value: "side",
            $title: _localize.layoutSide
        });
        this.$prototype.$.$allChildLayout = {
            $type: "application/x-choice",
            $value: {
                $type: "application/x-string",
                $constraints: {
                    $enum: $enum
                }
            }
        };
    },
    _addLayoutsHeader: function(){
        this.authoringView.$$layoutSlot.empty();
        if (this.$prototype.$.$boxLayoutType) {
            var div = document.createElement("div");
            div.className = "s-author-header-layouts-slot";
            document.itemFactory.load($(div).appendTo(this.authoringView.$$layoutSlot), {
                $bind: "$boxLayoutType",
                $isExternalContainer: true,
                $icon: {
                    $inputMode: "icon",
                    $mode: "iconText",
                    $path: "authoring/s-layout-",
                    $width: "25px",
                    $height: "25px"
                },
                $format: "$combo",
                $choiceLayout: "3",
                $isTopLabelAlignment: false,
                $isEditMode: true,
                $skin: "s-author-field",
                $isTitleHidden: true,
                $isLeftSpaceHidden: true
            }, this);
            
            div = document.createElement("div");
            div.className = "s-author-header-layouts-slot";
            document.itemFactory.load($(div).appendTo(this.authoringView.$$layoutSlot), {
                $bind: "$allChildLayout",
                $isExternalContainer: true,
                $skin: "s-author-field",
                $icon: {
                    $inputMode: "icon",
                    $mode: "iconText",
                    $path: "authoring/s-layout-",
                    $width: "25px",
                    $height: "25px"
                },
                $format: "$combo",
                $choiceLayout: "1",
                $isTopLabelAlignment: false,
                $isEditMode: true,
                $isTitleHidden: true,
                $isLeftSpaceHidden: true
            }, this);
            
            div = document.createElement("div");
            div.className = "s-author-header-layouts-slot";
            var $links = {};
            var $subMenus = [];
            Object.keys(layoutSettings.$composite).forEach(function($key){
                $subMenus.push({
                    $bind: $key
                });
                $links[$key] = {
                    $title: layoutSettings.$composite[$key].$title || _localize.layoutComposite
                };
            });
            
            document.itemFactory.load($(div).appendTo(this.authoringView.$$layoutSlot), {
                $category: "links",
                $id: "formatLayoutLinks",
                $skin: "s-author-designer-links",
                $isBindDisabled: true,
                $choiceLayout: "1",
                $links: $links,
                $menus: [{
                    $items: [{
                        $title: _localize.selectTemplate,
                        $icon: {
                            $mode: "icon",
                            $value: "template",
                            $path: "authoring/s-layout-",
                            $width: "25px",
                            $height: "25px"
                        },
                        $subMenus: {
                            $skin: "s-author-composites",
                            $isPopup: true,
                            $icon: {
                                $mode: "iconText",
                                $path: "authoring/s-layout-",
                                $width: "25px",
                                $height: "25px"
                            }
                        },
                        $items: $subMenus
                    }]
                }]
            }, this);
        }
    },
    _formatLayout: function(isProto){
        var $enums = layoutSettings.$columns.map(function($width){
            var $parts = $width.split(",");
            return {
                $value: $parts.join("-"),
                $title: $parts.length + " " + _localize.layoutColumns // + " ( " + $parts.join("% ") + ")"
            };
        });
        $enums.splice(0, 0, {
            $value: "100",
            $title: _localize.layoutColumn
        });
        this.$prototype.$.$boxLayoutType = {
            $type: "application/x-choice",
            $value: {
                $type: "application/x-string",
                $constraints: {
                    $enum: $enums
                }
            }
        };
        this.$prototype.$boxLayoutType = "100";
        return;
        
        var $links = {};
        var $subMenus = [];
        Object.keys(layoutSettings.$composite).forEach(function($key){
            $subMenus.push({
                $bind: $key
            });
            $links[$key] = {
                $title: layoutSettings.$composite[$key].$title || _localize.layoutComposite
            };
        });
        return {
            $category: "section",
            $title: _localize.layout,
            $layout: {
                $layoutType: "stack",
                $items: [{
                    $bind: "$boxLayoutType",
                    $icon: {
                        $mode: "iconText",
                        $path: "authoring/s-layout-",
                        $width: "25px",
                        $height: "25px"
                    },
                    $choiceLayout: "3",
                    $isEditMode: true,
                    $skin: "s-author-field",
                    $isLeftSpaceHidden: true
                }, {
                    $category: "links",
                    $id: "formatLayoutLinks",
                    $skin: "s-author-template-mn",
                    $isBindDisabled: true,
                    $choiceLayout: "1",
                    $links: $links,
                    $menus: [{
                        $items: [{
                            $title: _localize.selectTemplate,
                            $subMenus: {
                                $skin: "s-author-composites",
                                $isPopup: true,
                                $icon: {
                                    $mode: "iconText",
                                    $path: "authoring/s-layout-",
                                    $width: "32px",
                                    $height: "32px"
                                }
                            },
                            $items: $subMenus
                        }]
                    }]
                }]
            }
        };
    },
    
    dispose: function(){
        if (this.$$popupPanel) {
            this.$$popupPanel.undelegate();
        }
        delete this.authoringView;
        Article.prototype.dispose.call(this);
    }
});
