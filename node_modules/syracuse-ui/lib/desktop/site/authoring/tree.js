"use strict";
var helpers = require('syracuse-core/lib/helpers');
var AreaScroller = require('syracuse-ui/lib/desktop/tools/areaScroller').AreaScroller;
var TreeNode = require('./treeNode').TreeNode;

function Tree(){
}

exports.Tree = helpers.defineClass(Tree, null, {
    load: function(authoringView, $$container){
        this.nodes = {};
        this.authoringView = authoringView;
        this.scroller = new AreaScroller(document.site.$$body);
        this._$$tree = $("<div class='s-author-tree'/>").appendTo(this._$$container = $$container).hide();
    },
    addNodeId: function(target, node){
        target.setAttribute("data-s-node", node.id);
    },
    _findNode: function(target){
        return this.nodes[target.getAttribute("data-s-node")];
    },
    loadArticle: function(article){
        var self = this;
        self._$$tree.empty();
        self._rootNode = new TreeNode(null, null, self); //temp rename
        self._rootNode.$$children = $("<ul class='s-author-tree-level'/>").appendTo(self._$$tree);
        (self.rootNode = new TreeNode(article, self._rootNode, self)).load().click();
        self._$$popup = $("<div class='s-author-tree-host'/>").delegate("a[data-s-node]", "click", function(){
            self._findNode(this).expand();
            setTimeout(function(){
                document.site.resize()
            }, 10);
            return false;
        }).delegate("input.s-author-tree-item-check", "click", function(){
            var node = self._findNode(this);
            var state = {
                $isHidden: !$(this).is(":checked")
            };
            node.applyHiddenState(state);
            node.item.applyDesignMetaData(state);
        }).delegate("div.s-author-tree-item-title", "mouseenter mouseleave click", function(event){
            var node = self._findNode(this);
            switch (event.type) {
                case "mouseenter":
                    node.showOverItem(true);
                    if (self.showTargetTimer) {
                        window.clearTimeout(self.showTargetTimer);
                    }
                    self.showTargetTimer = window.setTimeout(function(){
                        delete self.showTargetTimer;
                        self.showTargetItem(node);
                    }, 100)
                    break;
                case "mouseleave":
                    node.showOverItem(false);
                    break;
                case "click":
                    node.click();
                    break;
            }
            return false;
        });
        
    },
    togglePopup: function(target){
        var self = this;
        if (target !== undefined) {
            var node = self._findNode(target);
            if (self._popupNode && self._popupNode != node) {
                self._popup.close();
                delete self._popup;
            }
            if (!self._popup) {
                self._popupNode = node;
                var dom = document.createElement("ul");
                dom.className = "s-author-tree-level";
                node.parentNode.$$children = $(dom).css("margin-left", "0px").appendTo(self._$$popup.hide())
                node.parentNode.drawChildNodes(true);
                self._popup = document.site.openDialog({
                    $$dialog: self._$$popup,
                    content: node,
                    $dialogMode: "popup",
                    position: {
                        my: "left top",
                        at: "left bottom",
                        of: node.$$stepLink
                    },
                    onClose: function(){
                        delete self._popup;
                        delete self._popupNode;
                        self._$$popup.empty();
                        node.parentNode.drawChildNodes(false);
                        delete node.parentNode.$$children;
                        self.showOverPathNodes();
                    },
                    autocCloseBoundary: "#" + node.$$stepLink.attr("id")
                });
                node.showOverItem(true);
                self.showTargetItem(node);
                return;
            }
        }
        if (self._popup) {
            self._popup.close();
        }
    },
    toggleStepLink: function(node, show){
        var self = this;
        if (show) {
            var dom = document.createElement("a");
            dom.className = "s-author-path-link s-author-path-" + node.$authoringLevel;
            dom.setAttribute("href", "#");
            dom.setAttribute("id", "s-author-" + node.item.id);
            self.addNodeId(dom, node);
            (node.$$stepLink = $(dom).appendTo(self.authoringView.$$path)).text(node.item.getTitle());
            
            dom = document.createElement("a");
            dom.className = "s-author-path-opener " + ((node.parentNode.children.length > 1) ? "s-open" : "");
            self.addNodeId(dom, node);
            node.$$stepLink.append(node.$$opener = $(dom)).toggle(true);
        }
        else {
            if (node.$$stepLink) {
                if (self._popup) {
                    self._popup.close();
                }
                if (self.authoringView.designedNode == node) {
                    self.authoringView.removeDesignedNode();
                }
                node.highlightDesignedItem(false);
                node.$$stepLink.remove();
                node.$$opener = node.$$stepLink = null;
            }
        }
        if (node.$$title) {
            node.$$title.toggleClass("s-author-tree-designed-" + node.$authoringLevel, show);
        }
    },
    showTargetItem: function(itemNode){
        var $$target;
        //ensure tabParent is opened
        var node = itemNode;
        while (node && node.item) {
            if (node.item.$isTabLayout && !node.item.$item.$opened) {
                node.item.openBox(true);
            }
            node = node.parentNode
        }
        var item = itemNode.item;
        if (item.$isTabLayout && !item.$item.$opened) {
            item.openBox(true);
            
        }
        var $$target = item[item.$isTabLayout ? "$$header" : "$$item"];
        if ($$target) {
            if (!item.$isTabLayout) {
                this.scroller.scrollToTarget($$target, true);
            }
        }
    },
    showOverPathNodes: function(overNode, show){
        if (!overNode) {
            overNode = this.overNode;
            show = false;
        }
        while (overNode) {
            overNode.toggleItemCss("over", show);
            overNode = overNode.parentNode;
        }
    },
    
    dispose: function(){
        this.showOverPathNodes();
        if (this._$$popup) {
            this._$$popup.remove();
        }
        delete this.overNode;
        delete this._$$container;
        delete this.authoringView;
    }
});

