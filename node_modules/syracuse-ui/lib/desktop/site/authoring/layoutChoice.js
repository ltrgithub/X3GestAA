"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _localize = {
    title: "Layout",
    stack: "stacked",
    columns: "in columns",
    side: "side by side",
    tabs: "in tabs",
    columnsChoice: "columns",
    composite: "composite"
};
var _types = {
    "stack": {
        $title: _localize.stack
    },
    "tabs": {
        $title: _localize.tabs
    },
    "side": {
        $title: _localize.side
    },
    "columns": {
        $title: _localize.columns,
        $default: "50,50",
        $values: [["50,50", "25,75", "75,25", "38,62", "62,38"], ["25,25,50", "25,50,25", "50,25,25", "33,33,33", "25,25,25,25"]],
        makeItem: function($item){
            var parts = $item.$value.split(",");
            $item.$title = parts.length + " " + _localize.columnsChoice + "(" + parts.join(" | ") + ")";
            $item.$css = "s-layout-" + parts.join("-");
        }
    },
    "composite": {
        $title: _localize.columns,
        $default: "composite-3-1",
        $values: [["composite-3-1", "composite-3-2", "composite-4-1", "composite-1-3"]],
        makeItem: function($item){
            $item.$css = "s-layout-" + $item.$value.replace(/,/g, "-");
        }
    }
};

function LayoutChoice(){
}

exports.LayoutChoice = helpers.defineClass(LayoutChoice, null, {
    render: function($container, $item, palette){
        var self = this;
        self.id = document.controller.generateUUID();
        self.$item = $item || {};
        self.selected = {};
        self.$$item = $("<div class='s-author-field'/>").appendTo($container).css("width", "auto");
        self.$$dataValue = $("<div class='s-author-field-value'/>").appendTo(self.$$item);
        self.$$input = $("<div class='s-layout-value'/>").appendTo(self.$$dataValue);
        (self.$$selected = $("<a/>")).appendTo(self.$$input).bind("click", function(){
            self.toggleList();
            return false;
        });
        self.$isTabEnabled = (self.palette = palette).designedNode.children.length > 0 ? (palette.designedNode.children[0].$authoringLevel != "field") : false;
        
        self.setDataValue(palette.designedNode.item.$item.$layout);
    },
    _renderItem: function($layoutType, $value, $$link){
        var $type = _types[$layoutType];
        var $item = {
            $layoutType: $layoutType,
            $title: $type.$title,
            $css: "s-layout-" + $layoutType
        };
        if ($type.$values && $value) {
            $item.$value = $value;
            $type.makeItem($item);
        }
        $$link = $$link || $("<a/>");
        $$link[0].className = "s-layout-item " + $item.$css;
        return $$link.attr('data-s-layout', $item.$layoutType).attr('data-s-value', $item.$value || "").attr("title", $item.$title);
    },
    _renderPlacement: function($layoutType, $$row){
        var self = this;
        var $type = _types[$layoutType];
        if ($type.$values) {
            $type.$values.forEach(function($group){
                var $$group = $("<div class='s-layout-group'/>");
                $group.forEach(function($value){
                    $$group.append(self._renderItem($layoutType, $value));
                });
                $$row.append($$group);
            });
        }
        else {
            $$row.append(self._renderItem($layoutType));
        }
        
    },
    _appendRow: function(){
        return $("<div class='s-layout-row'/>").appendTo(this.$$list);
    },
    _createList: function(){
        var self = this;
        self.$$list = $("<div class='s-layouts'/>").appendTo(self.$$input).hide().delegate("a.s-layout-item", "click", function(){
            var $$item = $(this);
            var $layout = {
                $layoutType: $$item.attr("data-s-layout")
            };
            var $type = _types[$layout.$layoutType];
            var $subType = $$item.attr('data-s-value');
            if ($subType) {
                $layout.$layoutSubType = $subType;
            }
            self.setDataValue($layout);
            document.controller.notifyChange(self.palette, "$box", {
                $layout: self.currentValue
            });
            self.toggleList(false);
        });
        var $$row = self._appendRow();
        self._renderPlacement("stack", $$row);
        if (self.$isTabEnabled) {
            self._renderPlacement("tabs", $$row);
        }
        self._renderPlacement("side", $$row);
        self._renderPlacement("columns", self._appendRow());
        self._renderPlacement("composite", self._appendRow());
    },
    setDataValue: function(value){
        this.currentValue = value || {};
        if (!this.currentValue.$layoutType) {
            this.currentValue.$layoutType = "stack";
        }
        var type = _types[this.currentValue.$layoutType];
        var $value;
        if (type.$values) {
            $value = this.currentValue.$layoutSubType = this.currentValue.$layoutSubType || type.$default;
        }
        this._renderItem(this.currentValue.$layoutType, $value, this.$$selected.empty());
        if (this.$$list) {
            var $$items = this.$$list.find("a.s-layout-item");
            $$items.filter(".s-selected").removeClass("s-selected");
            $$items.filter($value ? ("[data-s-value='" + $value + "']") : ("[data-s-layout='" + this.currentValue.$layoutType + "']")).toggleClass("s-selected", true);
        }
    },
    toggleList: function(show){
        var self = this;
        show = show !== false;
        if (show) {
            if (!self.$$list) {
                self._createList();
            }
            self.setDataValue(self.currentValue);
            self.popupList = document.site.createPopup({
                $$popup: self.$$list,
                position: {
                    my: "left top",
                    at: "left bottom",
                    of: self.$$selected
                },
                closeHandler: function(){
                    self.$$list.hide();
                    self.popupList = null;
                    return true;
                },
                boundarySelector: "#" + self.id
            });
        }
        else {
            if (self.popupList) {
                self.popupList.close();
            }
        }
    },
    dispose: function(){
        delete this.palette;
        if (this.$$selected) {
            this.$$selected.unbind();
            
        }
        if (this.$$list) {
            this.$$list.undelegate();
        }
    }
});
