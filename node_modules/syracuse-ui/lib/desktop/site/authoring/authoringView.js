"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var ItemsTree = require('./itemsTree').ItemsTree;
var itemPalette = require("./itemPalette");
var palettes = {
    article: itemPalette.PagePalette,
    section: itemPalette.SectionPalette,
    block: itemPalette.BlockPalette,
    field: itemPalette.FieldPalette
}
var _localize = {
    title: "Authoring mode",
    close: "Close",
    fullViewMode: "Full view"
};

function AuthoringView(){
}

exports.AuthoringView = helpers.defineClass(AuthoringView, Article, {
    open: function(){
        this.$sourceTargetPageItem = (this.targetPage = document.site.mainPage).$item;
        this.isPageAuthored = false;
        document.controller.loadWorkingCopy({
            menu: {
                $url: this.targetPage.$authorUrl
            },
            article: this,
            callback: function(){
                document.site.resize();
            }
        });
    },
    drawBox: function(){
        var self = this;
        self.$$container.empty().show();
        self.tree = new ItemsTree();
        self.tree.load(self, self.$$container);
        
        var $$header = $("<div id='s-author-header'/>").appendTo(self.$$container);
        var $$title = $("<div id='s-author-header-title'/>").text(_localize.title).appendTo($$header);
        $$title.bind("click", function(){
            self.$isCancelAuthoringDisabled = true;
            return false;
        });
        var $$body = $("<div id='s-author-header-body'/>").appendTo($$header);
        var $$actions = $("<div class='s-author-header-actions'/>");
        document.itemFactory.load($$actions, {
            $bind: "$save",
            $category: "link",
            $skin: "s-author-save"
        }, self);
        self.headerMenus = document.itemFactory.load($$actions, {
            $category: "links",
            $skin: "s-author-header-links",
            $excludeBind: ["$details", "$query", "$print"]
        }, self);
        $$actions.appendTo($$body);
        var close = document.itemFactory.load($$body, {
            $bind: "$close",
            $category: "link",
            $noText: true,
            $skin: "s-author-close"
        }, self);
        close.onMenuClick = function(){
            if (self.isPageAuthored && !self.$isCancelAuthoringDisabled) {
                var $sourceItem = self.$sourceTargetPageItem;
                document.site.showMessage({
                    $title: "Page layout has been updated",
                    $message: "Save Update before quit",
                    $type: "question",
                    $buttons: "yesnocancel",
                    callback: function(response){
                        if (response.$id == "yes") {
                            self.menuItems.$save[0].click();
                        }
                        else {
                            if (response.$id == "no") {
                                document.site.toggleAuthoring(false);
                                document.controller.reloadMainPage();
                            }
                        }
                    }
                });
            }
            else {
                document.site.toggleAuthoring(false);
            }
            return false;
        };
        close.setMenu({
            $title: _localize.close
        }, null);
        
        var $$body = $("<div id='s-author-body'/>").appendTo(self.$$container);
        self.$$path = $("<nav class='s-author-path'/>").appendTo($$body);
        self.$$panels = $("<div class='s-author-panels'/>").appendTo($$body);
        
        /*var palette;
         if (this.tree && this.tree.designedNode && (palette = this.tree.designedNode.palette)) {
         palette.$$container = this.$$panels;
         palette.$$item.appendTo(palette.$$container);
         }*/
        document.site.resize();
        
        self.tree.loadArticle(self.targetPage);
    },
    onNotifyRecordChange: function(value, binding){
        var data = {};
        /*if (!this.dataset.application) {
         var httpQuery = document.controller.parseUrl(this.targetPage.$prototype.$representationUrl);
         data.application = httpQuery.$urlParts.endpointParts.application;
         data.contract = httpQuery.$urlParts.endpointParts.contract;
         data.representation = httpQuery.$urlParts.representationRoot;
         data.facet = httpQuery.$urlParts.$facet;
         }*/
        data.content = {
            $article: this.targetPage.$item
        };
        data[binding] = value;
        return data;
    },
    createPalette: function(designedNode){
        var palette = designedNode.palette = new palettes[designedNode.$authoringLevel]();
        palette.designedNode = designedNode;
        palette.authoringView = this;
        palette.externalAdapter = document.site.externalAdapter;
        (palette.$$container = $("<div class='s-author-panel'/>").appendTo(this.$$panels.empty()))[0].style.display = "none ";
        palette.$layoutOptions = document.site.$item.$layoutOptions.authoring;
        palette.loadBox();
        palette.$$container[0].style.display = "";
        return palette;
    },
    dispose: function(){
        delete this.$sourceTargetPageItem;
        delete this.targetPage;
        if (this.$$path) {
            this.$$path.undelegate();
        }
        delete this.page;
        Article.prototype.dispose.call(this);
    }
});
