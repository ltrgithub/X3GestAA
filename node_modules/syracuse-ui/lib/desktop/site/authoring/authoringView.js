"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var Tree = require('./tree').Tree;
var itemPalette = require("./itemPalette");
var palettes = {
    article: itemPalette.PagePalette,
    section: itemPalette.SectionPalette,
    block: itemPalette.BlockPalette,
    field: itemPalette.FieldPalette
}
var _localize = {
    title: "Authoring mode",
    close: "Close",
    fullViewMode: "Full view",
    updateMessageTitle: "Page layout has been updated",
    cancelMessageText: "Save Update before quit",
    saveMessageText: "Leave authoring mode"
};

function AuthoringView(){
}

exports.AuthoringView = helpers.defineClass(AuthoringView, Article, {
    open: function(){
        this.$sourceTargetPageItem = (this.targetPage = document.site.mainPage).$item;
        this.isPageAuthored = false;
        document.controller.loadWorkingCopy({
            menu: {
                $url: this.targetPage.$authorUrl
            },
            article: this,
            callback: function(){
                document.site.resize();
            }
        });
    },
    drawBox: function(){
        var self = this;
        self.$$container.empty().show();
        self.tree = new Tree();
        self.tree.load(self, self.$$container);
        
        var $$header = $("<div id='s-author-header'/>").appendTo(self.$$container);
        var $$title = $("<div id='s-author-header-title'/>").text(_localize.title).appendTo($$header);
        
        var $$body = $("<div id='s-author-header-body'/>").appendTo($$header);
        var $$actions = $("<div class='s-author-header-actions'/>");
        document.itemFactory.load($$actions, {
            $bind: "$save",
            $category: "link",
            $skin: "s-author-save"
        }, self);
        self.headerMenus = document.itemFactory.load($$actions, {
            $category: "links",
            $skin: "s-author-header-links",
            $excludeBind: ["$details", "$query", "$print"]
        }, self);
        $$actions.appendTo($$body);
        var close = document.itemFactory.load($$body, {
            $bind: "$close",
            $category: "link",
            $noText: true,
            $skin: "s-author-close"
        }, self);
        close.onMenuClick = function(){
            if (self.isPageAuthored) {
                var $sourceItem = self.$sourceTargetPageItem;
                document.site.showMessage({
                    $title: _localize.updateMessageTitle,
                    $message: _localize.cancelMessageText,
                    $type: "question",
                    $buttons: "yesnocancel",
                    callback: function(response){
                        if (response.$id == "yes") {
                            self.menuItems.$save[0].click();
                        }
                        else {
                            if (response.$id == "no") {
                                document.site.toggleAuthoring(false);
                                document.controller.reloadMainPage();
                            }
                        }
                    }
                });
            }
            else {
                document.site.toggleAuthoring(false);
            }
            return false;
        };
        close.setMenu({
            $title: _localize.close
        }, null);
        
        var $$body = $("<div id='s-author-body'/>").appendTo(self.$$container);
        self.appendBreadcrumb($$body);
        self._$$panel = $("<div class='s-author-panel'/>").appendTo($$body);
        
        document.site.resize();
        
        self.tree.loadArticle(self.targetPage);
    },
    appendBreadcrumb: function($$body){
        var self = this;
        self.$$path = $("<nav class='s-author-path'/>").delegate("a.s-author-path-link", "click", function(){
            self.tree.togglePopup();
			var node = self.tree._findNode(this);
            if (self.designedNode) {
                if (self.designedNode == node) {
                    return false;
                }
                self.removeDesignedNode();
            }
            self.designedNode = node;
            self.tree.showTargetItem(node);
            
            node.$$stepLink.toggleClass("s-open", true);
            var palette = self.designedNode.palette = new palettes[self.designedNode.$authoringLevel]();
            palette.authoringView = self;
            palette.externalAdapter = document.site.externalAdapter;
            (palette.$$container = self._$$panel.empty())[0].style.display = "none ";
            palette.$layoutOptions = document.site.$item.$layoutOptions.authoring;
            palette.loadBox();
            palette.$$container[0].style.display = "";
            node.highlightDesignedItem(true);
            document.site.resize();
            return false;
        }).delegate("a.s-author-path-opener", "click", function(){
            self.tree.togglePopup(this);
            return false;
        }).appendTo($$body);
    },
    removeDesignedNode: function(){
        this.removeItem(this.designedNode.palette);
        this.designedNode.$$stepLink.toggleClass("s-open", false);
        this.designedNode.highlightDesignedItem(false);
        delete this.designedNode.palette;
        this.designedNode = null;
    },
    applyChange: function(newData){
        var $save;
        if (newData && newData.$actions && ($save = newData.$actions.$save)) {
            if ($save.$isDisabled && $save.$isRequested === false) {
                var isFailed;
                if ($save.$diagnoses) {
                    $save.$diagnoses.some(function($diagnoses){
                        return (isFailed = ($diagnoses.severity !== "info"));
                    });
                }
                if (!isFailed) {
                    delete newData.$actions.$save;
                    document.site.showMessage({
                        $title: _localize.updateMessageTitle,
                        $message: _localize.saveMessageText,
                        $type: "question",
                        $buttons: "yesno",
                        callback: function(response){
                            if (response.$id != "no") {
                                document.site.toggleAuthoring(false);
                                document.controller.reloadMainPage();
                            }
                        }
                    });
                }
            }
        }
        
        Article.prototype.applyChange.call(this, newData);
    },
    onNotifyRecordChange: function(value, binding){
        var data = {};
        /*if (!this.dataset.application) {
         var httpQuery = document.controller.parseUrl(this.targetPage.$prototype.$representationUrl);
         data.application = httpQuery.$urlParts.endpointParts.application;
         data.contract = httpQuery.$urlParts.endpointParts.contract;
         data.representation = httpQuery.$urlParts.representationRoot;
         data.facet = httpQuery.$urlParts.$facet;
         }*/
        data.content = {
            $article: this.targetPage.$item
        };
        data[binding] = value;
        return data;
    },
    
    dispose: function(){
        delete this.$sourceTargetPageItem;
        delete this.targetPage;
        delete this.designedNode;
        if (this.$$path) {
            this.$$path.undelegate();
        }
        delete this.page;
        Article.prototype.dispose.call(this);
    }
});
