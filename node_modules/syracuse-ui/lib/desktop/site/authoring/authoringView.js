"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var AreaScroller = require('syracuse-ui/lib/desktop/tools/areaScroller').AreaScroller;
var TreeNode = require('./treeNode').TreeNode;
var itemPalette = require("./itemPalette");
var palettes = {
    article: itemPalette.PagePalette,
    section: itemPalette.SectionPalette,
    block: itemPalette.BlockPalette,
    field: itemPalette.FieldPalette
}
var _localize = {
    title: "Authoring mode",
    close: "Close",
    fullViewMode: "Full view",
    updateMessageTitle: "Page layout has been updated",
    cancelMessageText: "Save Update before quit",
    saveMessageText: "Leave authoring mode"
};

function AuthoringView(){
}

exports.AuthoringView = helpers.defineClass(AuthoringView, Article, {
    open: function(){
        this.targetPage = document.site.mainPage;
        this.isUpdated = false;
        document.controller.loadWorkingCopy({
            menu: {
                $url: this.targetPage.$authorUrl
            },
            article: this,
            callback: function(){
                document.site.resize();
            }
        });
    },
    drawBox: function(){
        var self = this;
        self.$$pathSteps = {};
        self.$$container.empty().show();
        
        this.nodes = {};
        this.scroller = new AreaScroller(document.site.$$body);
        
        var $$header = $("<div id='s-author-header'/>").appendTo(self.$$container);
        var $$title = $("<div id='s-author-header-title'/>").text(_localize.title).appendTo($$header);
        
        var $$body = $("<div id='s-author-header-body'/>").appendTo($$header);
        var $$actions = $("<div class='s-author-header-actions'/>");
        document.itemFactory.load($$actions, {
            $bind: "$save",
            $category: "link",
            $skin: "s-author-save"
        }, self);
        self.headerMenus = document.itemFactory.load($$actions, {
            $category: "links",
            $skin: "s-author-header-links",
            $excludeBind: ["$details", "$query", "$print"]
        }, self);
        $$actions.appendTo($$body);
        var close = document.itemFactory.load($$body, {
            $bind: "$close",
            $category: "link",
            $noText: true,
            $skin: "s-author-close"
        }, self);
        close.onMenuClick = function(){
            if (self.isUpdated) {
                document.site.showMessage({
                    $title: _localize.updateMessageTitle,
                    $message: _localize.cancelMessageText,
                    $type: "question",
                    $buttons: "yesnocancel",
                    callback: function(response){
                        if (response.$id == "yes") {
                            self.menuItems.$save[0].click();
                        }
                        else {
                            if (response.$id == "no") {
                                document.site.toggleAuthoring(false);
                                document.controller.reloadMainPage();
                            }
                        }
                    }
                });
            }
            else {
                document.site.toggleAuthoring(false);
            }
            return false;
        };
        close.setMenu({
            $title: _localize.close
        }, null);
        
        self._appendPopupHost();
        
        var $$body = $("<div id='s-author-body'/>").appendTo(self.$$container);
        self.appendBreadcrumb($$body);
        self._$$panel = $("<div class='s-author-panel'/>").appendTo($$body);
        
        document.site.resize();
        
        (this.rootNode = new TreeNode(self.targetPage, null, self)).load().selectItem();
    },
    _appendPopupHost: function(){
        var self = this;
        self._$$popup = $("<div class='s-author-tree-host'/>").delegate("a[data-s-node]", "click", function(){
            self._findNode(this).expand();
            setTimeout(function(){
                document.site.resize()
            }, 10);
            return false;
        }).delegate("input.s-author-tree-item-check", "click", function(){
            var node = self._findNode(this);
            var state = {
                $isHidden: !$(this).is(":checked")
            };
            node.applyHiddenState(state);
            node.item.applyDesignMetaData(state);
        }).delegate("div.s-author-tree-item-title", "mouseenter mouseleave click", function(event){
            var node = self._findNode(this);
            switch (event.type) {
                case "mouseenter":
                    node.showOverItem(true);
                    if (self._showTargetTimer) {
                        window.clearTimeout(self._showTargetTimer);
                    }
                    self._showTargetTimer = window.setTimeout(function(){
                        delete self._showTargetTimer;
                        self.showTargetItem(node);
                    }, 100)
                    break;
                case "mouseleave":
                    node.showOverItem(false);
                    break;
                case "click":
                    self.selectItem(node);
                    break;
            }
            return false;
        });
    },
    appendBreadcrumb: function($$body){
        var self = this;
        self._$$path = $("<nav class='s-author-path'/>").delegate("a.s-author-path-link", "click", function(){
            self.togglePopup(false);
            var node = self._findNode(this);
            if (self.designedNode) {
                if (self.designedNode == node) {
                    return false;
                }
                self.removeItem(self.palette);
                if (self.$$pathSteps[self.designedNode.id]) {
                    self.$$pathSteps[self.designedNode.id].toggleClass("s-open", false);
                }
                self.designedNode.highlightDesignedItem(false);
            }
            self.designedNode = node;
            self.showTargetItem(node);
            
            $(this).toggleClass("s-open", true);
            self.palette = new palettes[self.designedNode.$authoringLevel]();
            self.palette.authoringView = self;
            self.palette.externalAdapter = document.site.externalAdapter;
            (self.palette.$$container = self._$$panel.empty())[0].style.display = "none ";
            self.palette.$layoutOptions = document.site.$item.$layoutOptions.authoring;
            self.palette.loadBox();
            self.palette.$$container[0].style.display = "";
            node.highlightDesignedItem(true);
            document.site.resize();
            return false;
        }).delegate("a.s-author-path-opener", "click", function(event){
            setTimeout(function(){
                self.togglePopup(event.target);
            }, 10);
            return false;
        }).appendTo($$body);
    },
    _drawStep: function(node){
        var dom = document.createElement("a");
        dom.className = "s-author-path-link s-author-path-" + node.$authoringLevel;
        dom.setAttribute("href", "#");
        node.addNodeId(dom);
        var title = node.item.getTitle();
        if (title.length > 15) {
            dom.setAttribute("title", title);
            title = title.slice(0, 15) + "...";
        }
        var $$step = $(dom);
        $$step.text(title);
        dom = document.createElement("a");
        dom.className = "s-author-path-opener" + ((node.parentNode && node.parentNode.children.length > 1) ? " s-open" : "");
        node.addNodeId(dom);
        return (this.$$pathSteps[node.id] = $$step.append(dom).toggle(true));
    },
    selectItem: function(selectNode){
        if (selectNode != this.designedNode) {
            this.$$pathSteps = {};
            this._$$path.empty();
            var curNode = selectNode;
            while (curNode.parentNode) {
                if (curNode.parentNode.item) { //test root
                    this._drawStep(curNode.parentNode).prependTo(this._$$path);
                }
                curNode = curNode.parentNode;
            }
            this._drawStep(selectNode).appendTo(this._$$path);
            curNode = selectNode
            while (curNode.children.length > 0) {
                this._drawStep(curNode = curNode.children[0]).appendTo(this._$$path);
            }
            this.$$pathSteps[selectNode.id].click();
        }
    },
    applyChange: function(newData){
        var self = this;
        var $save;
        if (newData && newData.$actions && ($save = newData.$actions.$save)) {
            if ($save.$isDisabled && $save.$isRequested === false) {
                var isFailed;
                if ($save.$diagnoses) {
                    $save.$diagnoses.some(function($diagnoses){
                        return (isFailed = ($diagnoses.severity !== "info"));
                    });
                }
                if (!isFailed) {
                    delete newData.$actions.$save;
                    document.site.showMessage({
                        $title: _localize.updateMessageTitle,
                        $message: _localize.saveMessageText,
                        $type: "question",
                        $buttons: "yesno",
                        callback: function(response){
                            if (response.$id != "no") {
                                document.site.toggleAuthoring(false);
                                document.controller.reloadMainPage();
                            }
                            self.isUpdated = false;
                        }
                    });
                }
            }
        }
        
        Article.prototype.applyChange.call(this, newData);
    },
    togglePopup: function(target){
        var self = this;
        if (target !== false) {
            var node = self._findNode(target);
            if (self._popupNode && self._popupNode != node) {
                self._popup.close();
                delete self._popup;
            }
            if (!self._popup) {
                if (node != self.designedNode) {
                    self.selectItem(node);
                }
                self._popupNode = node;
                var dom = document.createElement("ul");
                dom.className = "s-author-tree-root";
                node.parentNode.$$children = $(dom).appendTo(self._$$popup.hide())
                node.parentNode.drawChildNodes(true);
                var $$step = self.$$pathSteps[node.id];
                self._popup = document.site.openDialog({
                    $$dialog: self._$$popup,
                    content: node,
                    $dialogMode: "popup",
                    autocCloseBoundary: "#" + $$step.attr("id"),
                    position: {
                        my: "left top",
                        at: "left bottom",
                        of: $$step
                    },
                    onClose: function(){
                        delete self._popup;
                        delete self._popupNode;
                        self._$$popup.empty();
                        node.parentNode.drawChildNodes(false);
                        delete node.parentNode.$$children;
                        self.showOverPathNodes();
                    }
                });
                node.showOverItem(true);
                self.showTargetItem(node);
                return;
            }
        }
        if (self._popup) {
            self._popup.close();
        }
    },
    onNotifyRecordChange: function(value, binding){
        var data = {};
        /*if (!this.dataset.application) {
         var httpQuery = document.controller.parseUrl(this.targetPage.$prototype.$representationUrl);
         data.application = httpQuery.$urlParts.endpointParts.application;
         data.contract = httpQuery.$urlParts.endpointParts.contract;
         data.representation = httpQuery.$urlParts.representationRoot;
         data.facet = httpQuery.$urlParts.$facet;
         }*/
        data.content = {
            $article: this.targetPage.$item
        };
        data[binding] = value;
        return data;
    },
    _findNode: function(target){
        return this.nodes[target.getAttribute("data-s-node")];
    },
    showTargetItem: function(itemNode){
        var $$target;
        //ensure tabParent is opened
        var node = itemNode;
        while (node && node.item) {
            if (node.item.$isTabLayout && !node.item.$item.$opened) {
                node.item.openBox(true);
            }
            node = node.parentNode
        }
        var item = itemNode.item;
        if (item.$isTabLayout && !item.$item.$opened) {
            item.openBox(true);
            
        }
        var $$target = item[item.$isTabLayout ? "$$header" : "$$item"];
        if ($$target) {
            if (!item.$isTabLayout) {
                this.scroller.scrollToTarget($$target, true);
            }
        }
    },
    showOverPathNodes: function(overNode, show){
        if (!overNode) {
            overNode = this.overNode;
            show = false;
        }
        while (overNode) {
            overNode.toggleItemCss("over", show);
            overNode = overNode.parentNode;
        }
    },
    dispose: function(){
        this.showOverPathNodes();
        delete this.overNode;
        delete this.targetPage;
        delete this.designedNode;
        if (this._$$path) {
            this._$$path.undelegate();
        }
        if (this._$$popup) {
            this._$$popup.undelegate().remove();
        }
        delete this.page;
        Article.prototype.dispose.call(this);
    }
});
