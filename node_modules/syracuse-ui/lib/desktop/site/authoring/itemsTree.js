"use strict";
var helpers = require('syracuse-core/lib/helpers');
var AreaScroller = require('syracuse-ui/lib/desktop/tools/areaScroller').AreaScroller;


function ItemsTree(){
}

exports.ItemsTree = helpers.defineClass(ItemsTree, null, {
    load: function(authoringView, $$container){
        this.authoringView = authoringView;
        this.scroller = new AreaScroller(document.site.$$body);
        this._$$tree = $("<div class='s-author-tree'/>").appendTo(this._$$container = $$container).hide();
    },
    loadArticle: function(article){
        this._$$tree.empty();
        this._rootNode = new Node(null, null, this); //temp rename
        this._rootNode.$$children = $("<ul class='s-author-tree-level'/>").appendTo(this._$$tree);
        (this.rootNode = new Node(article, this._rootNode, this)).load().click();
    },
    removeDesignedNode: function(){
        this.authoringView.removeItem(this.designedNode.palette);
        this.designedNode.$$stepLink.toggleClass("s-open", false);
        this.designedNode.highlightDesignedItem(false);
        delete this.designedNode.palette;
        this.designedNode = null;
    },
    showTargetItem: function(itemNode){
        var $$target;
        //ensure tabParent is opened
        var node = itemNode;
        while (node && node.item) {
            if (node.item.$isTabLayout && !node.item.$item.$opened) {
                node.item.openBox(true);
            }
            node = node.parentNode
        }
        var item = itemNode.item;
        if (item.$isTabLayout && !item.$item.$opened) {
            item.openBox(true);
            
        }
        var $$target = item[item.$isTabLayout ? "$$header" : "$$item"];
        if ($$target) {
            if (!item.$isTabLayout) {
                this.scroller.scrollToTarget($$target, true);
            }
        }
    },
    showOverPathNodes: function(overNode, show){
        if (!overNode) {
            overNode = this.overNode;
            show = false;
        }
        while (overNode) {
            overNode.toggleItemCss("over", show);
            overNode = overNode.parentNode;
        }
    },
    dispose: function(){
        this.showOverPathNodes();
        delete this.designedNode;
        delete this.overNode;
        delete this._$$container;
        delete this.authoringView;
    }
});

function Node(item, parentNode, tree){
    this.item = item;
    this.$isExpanded = false;
    this.children = [];
    this.parentNode = parentNode;
    this.tree = tree;
}

helpers.defineClass(Node, null, {

    setDesignableItem: function(item, $$target){
        $$target = ($$target || (item.$isTabLayout ? item.$$header : item.$$item));
        $$target.attr("s-designable", "1").attr("data-s-item", item.id);
        if (item.boxParent) {
            $$target.attr("data-s-article", item.boxParent.getArticle().id);
        }
        $$target[0].style.border = "2px dashed transparent";
    },
    load: function(){
        var self = this;
        self.pound = {
            "article": 4,
            "section": 3,
            "block": 2,
            "field": 1
        }[self.$authoringLevel = (self.item.$authoringLevel || "field")];
        self.$$node = $("<li class='s-author-tree-item'/>").appendTo(self.parentNode.$$children);
        self.item.authoringNode = self;
        
        if (self.item.$$item) {
            self.setDesignableItem(self.item);
            if (self.item.layoutContent) {
                self.item.layoutContent.toggleAuthoring(true);
            }
        }
        
        self.$$data = $("<div class='s-author-tree-item-data'/>").appendTo(self.$$node);
        self.$$opener = $("<a class='s-author-tree-item-opener'/>").appendTo(self.$$data).bind("click", function(){
            self.expand();
            setTimeout(function(){
                document.site.resize()
            }, 10);
            return false;
        });
        self.$$check = $("<input  class='s-author-tree-item-check' type='checkbox'/>").appendTo(self.$$data);
        self.$$check.bind("click", function(){
            var state = {
                $isHidden: !$(this).is(":checked")
            };
            self.applyHiddenState(state);
            self.item.applyDesignMetaData(state);
        });
        self.applyHiddenState(self.item.$item);
        self.$$title = $("<div class='s-author-tree-item-title'/>").text(self.item.getTitle()).appendTo(self.$$data);
        self._bindNodeEvent();
        self.loadLayout(self.item.layoutContent);
        return self;
    },
    _bindNodeEvent: function(){
        var self = this;
        self.$$title.bind("mouseenter", function(event){
            self.showOverItem(true);
            if (self.tree.showTargetTimer) {
                window.clearTimeout(self.tree.showTargetTimer);
            }
            self.tree.showTargetTimer = window.setTimeout(function(){
                delete self.tree.showTargetTimer;
                self.tree.showTargetItem(self);
            }, 100)
            return false;
        }).bind("mouseleave", function(event){
            self.showOverItem(false);
            return false;
        }).bind("click", function(event){
            self.click();
            return false;
        });
    },
    loadLayout: function(layoutContent){
        if (layoutContent) {
            var self = this;
            layoutContent.items.forEach(function(item){
                if (item.$layout) {
                    self.loadLayout(item);
                }
                else {
                    self.appendChildItem({
                        newItem: item
                    });
                }
            });
        }
    },
    toggleLightMode: function(layoutContent, $isLightMode){
        var self = this;
        if (!layoutContent) {
            layoutContent = self.item.layoutContent;
        }
        self.$isLightMode = ($isLightMode !== undefined) ? $isLightMode : !self.$isLightMode;
        if (layoutContent) {
            layoutContent.items.forEach(function(child){
                if (child.$layout) {
                    self.toggleLightMode(child, self.$isLightMode);
                }
                else {
                    var node = child.authoringNode;
                    if (!node) {
                        debugger;
                    }
                    if (node.$authoringLevel == "field") {
                        if (self.$isLightMode) {
                            child.authoringLight = {
                                $$bag: $("<div/>").append(child.$$item.children()),
                                $className: child.$$item[0].className
                            }
                            child.$$item[0].className = "s-author-light-field s-authoring-designable"
                            child.$$item[0].setAttribute("s-designable", "1");
                            child.$$item.append($("<div class='s-author-light-field-type'/>").addClass("s-author-light-field-" + child.$field.$type.replace("application/x-", "")));
                            child.$$item.append($("<div class='s-author-light-field-title'/>").text(child.getTitle()));
                        }
                        else {
                            if (child.authoringLight) {
                                child.$$item.empty()[0].className = child.authoringLight.$className;
                                child.$$item.append(child.authoringLight.$$bag.children());
                                delete child.authoringLight;
                            }
                        }
                    }
                    node.toggleLightMode(null, self.$isLightMode);
                }
            });
        }
    },
    applyHiddenState: function(state){
        this.$$check.attr("checked", state.$isHidden !== true);
    },
    showOverItem: function(isOver){
        if (isOver) {
            if (this.tree.overNode != this) {
                this.tree.showOverPathNodes();
            }
            this.tree.showOverPathNodes(this.tree.overNode = this, isOver);
        }
        else {
            this.toggleItemCss("over", false);
        }
    },
    toggleItemCss: function(status, show, css){
        css = css || ("s-author-" + status + "-" + this.$authoringLevel);
        if (this.item && this.item.$$item) {
            this.item.$$item.toggleClass(css, show);
            this.item.$$item[0].style.borderColor = show ? "" : "transparent";
            if (this.item.$isTabLayout) {
                this.item.$$header[0].style.borderColor = show ? "" : "transparent";
                this.item.$$header.toggleClass(css, show);
            }
        }
    },
    highlightDesignedItem: function($designed){
        this.toggleItemCss("designed", $designed);
    },
    
    appendChildItem: function(options){
        this.ensureChildrenRoot();
        var child = options.newItem.authoringNode;
        if (!child) {
            child = options.newItem.authoringNode = new Node(options.newItem, this, this.tree);
        }
        else {
            if (child.parentNode != this) {
                child.parentNode.children.splice(child.parentNode.getNodeIndex(child), 1);
            }
        }
        this.children.splice(options.newIndex || this.children.length + 1, 0, child);
        child.parentNode = this;
        if (options.load !== false) {
            child.load();
        }
        else {
            if (options.action && child.$$node) {
                child.$$node[options.action](options.targetItem.authoringNode.$$node);
            }
            else {
                child.$$node.appendTo(this.$$children);
            }
        }
        
    },
    ensureChildrenRoot: function(){
        if (!this.$$children) {
            this.$$opener.removeClass("s-author-tree-item-opener").addClass("s-author-tree-item-opener-children");
            this.$$children = $("<ul class='s-author-tree-level'/>").appendTo(this.$$node);
            this.expand(false);
        }
    },
    getNodeIndex: function(node){
        for (var ii = 0; ii < this.children.length; ii++) {
            if (this.children[ii] == node) {
                return ii;
            }
        }
        return -1;
    },
    click: function(refresh){
        //click on selected node, no need to process selection
        if (!this.palette) {
            var curNode = this
            var childNode = this;
            //find first parent in breadcrumb
            while ((curNode = curNode.parentNode) && !curNode.$$stepLink) {
                curNode.childToSelect = childNode;
                childNode = curNode;
            };
            if (curNode && curNode != this) {
                curNode.childToSelect = childNode;
                var next = curNode;
                while (next = next.nextStepNode) {
                    next.toggleStepLink(false);
                    delete next.parentNode.nextStepNode;
                }
            }
            curNode = curNode || this;
            while (curNode) {
                if (curNode.parentNode) {
                    curNode.parentNode.nextStepNode = curNode;
                }
                if (!curNode.$$stepLink) {
                    curNode.toggleStepLink(true);
                }
                if (this.parentNode == curNode) {
                    curNode = this;
                }
                else {
                    if (curNode.children.length) {
                        var newNode = curNode.childToSelect ? curNode.childToSelect : curNode.children[0];
                        delete curNode.childToSelect;
                        curNode = newNode;
                    }
                    else {
                        curNode = null;
                    }
                }
            }
        }
        this.$$stepLink.click();
    },
    toggleStepLink: function(show){
        var self = this;
        if (show) {
            self.$$stepLink = $("<a/>").attr("href", "#").attr("id", "s-author-" + self.item.id).addClass("s-author-path-link s-author-path-" + self.$authoringLevel).appendTo(self.tree.authoringView.$$path);
            self.$$stepLink.bind("click", function(){
                if (self.tree.designedNode) {
                    if (self.tree.designedNode == self) {
                        return false;
                    }
                    self.tree.removeDesignedNode();
                }
                self.tree.designedNode = self;
                self.tree.showTargetItem(self);
                
                self.$$stepLink.toggleClass("s-open", true);
                self.tree.authoringView.createPalette(self);
                self.highlightDesignedItem(true);
                document.site.resize();
                return false;
            });
            self.$$stepLink.text(self.item.getTitle());
            self.$$opener = $("<a class='s-author-path-opener'/>").bind("click", function(){
                if (!self.popupTree) {
                    self.parentNode.$$children.css("margin-left", "0px").appendTo((self._$$treeHost = $("<div class='s-author-tree-host'/>")).appendTo(self.$$stepLink).hide()).show();
                    self.popupTree = document.site.openDialog({
                        //beurk
                        $$dialog: self._$$treeHost,
                        content: self,
                        $dialogMode: "popup",
                        position: {
                            my: "left top",
                            at: "left bottom",
                            of: self.$$stepLink
                        },
                        onClose: function(){
                            self.popupTree = null;
                            self.parentNode.$$children.css("margin-left", "").appendTo(self.parentNode.$$node);
                            self.parentNode.expand(self.parentNode.$isExpanded);
                            self._$$treeHost.remove();
                            delete self._$$treeHost;
                            self.tree.showTargetItem(self, true);
                            self.tree.showOverPathNodes();
                        },
                        autocCloseBoundary: "#" + self.$$stepLink.attr("id")
                    });
                    self.showOverItem(true);
                    self.tree.showTargetItem(self, true);
                }
                else {
                    self.popupTree.close();
                    self.tree.showTargetItem(self);
                }
            }).toggleClass("s-open", self.parentNode.children.length > 1);
            self.$$stepLink.append(self.$$opener);
            self.$$stepLink.toggle(show);
        }
        else {
            if (self.$$stepLink) {
                if (self.popupTree) {
                    self.popupTree.close();
                }
                if (self.tree.designedNode == self) {
                    self.tree.removeDesignedNode();
                }
                self.highlightDesignedItem(false);
                self.$$opener.unbind();
                self.$$stepLink.unbind().remove();
                self.$$opener = self.$$stepLink = null;
            }
        }
        self.$$title.toggleClass("s-author-tree-designed-" + self.$authoringLevel, show);
    },
    
    expand: function($isExpanded){
        this.$isExpanded = $isExpanded === undefined ? !this.$isExpanded : $isExpanded;
        if (this.$$opener) {
            this.$$opener.toggleClass("s-open", $isExpanded);
        }
        if (this.$$children) {
            this.$$children.toggle($isExpanded);
        }
    },
    isPageItem: function(){
        return this.item.getPage ? (this.item.getPage() == this.item) : false;
    },
    dispose: function(){
        delete this.childToSelect;
        if (this.item) {
            this.toggleLightMode(null, false);
            delete this.item.authoringNode;
            if (this.item.layoutContent) {
                this.item.layoutContent.toggleAuthoring(false);
            }
            this.highlightDesignedItem(false);
            delete this.item;
        }
        if (this.children) {
            this.children.forEach(function(child){
                child.dispose();
            });
        }
        if (this.$$title) {
            this.$$title.unbind();
        }
        this.nextStepNode = this.parentNode = this.tree = this.children = null;
    }
});
