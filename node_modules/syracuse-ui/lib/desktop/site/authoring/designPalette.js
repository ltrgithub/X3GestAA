"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var LayoutChoice = require("./layoutChoice").LayoutChoice;
var _localize = {
    newSection: "New Section",
    newBlock: "New Block",
    addSection: "add a section",
    addBlock: "add a block",
    lightMode: "(switch to light mode)",
    fullMode: "(switch to full mode)",
    isSeparatorsVisible: "show separators",
    isBoxCollapsable: "collapsible",
    isMaximizable: "maximizable",
    isTitleHidden: "hide panel title",
    widthSmall: "small",
    widthMedium: "medium",
    widthLarge: "large",
    widthMaximum: "maximum",
    isHidden: "hide me",
    isTopLabelAlignment: "top aligned",
    isLabelHidden: "hidden",
    isRightTextLabelAlignment: "text",
    textLabelLeftAligned: "left aligned",
    textLabelRightAligned: "right aligned"
};


function DesignPalette(){
}

exports.DesignPalette = helpers.defineClass(DesignPalette, Article, {
    onNotifyRecordChange: function(value, binding){
        var metaData = {};
        Object.keys(value).forEach(function(prop){
            if (prop.indexOf("$field$") == 0) {
                (metaData.$field = metaData.$field || {})[prop.slice("$field".length)] = value[prop];
                delete value[prop];
            }
        });
        if (!metaData.$field) {
            metaData[binding] = value;
        }
        this.designedNode.applyDesignMetaData(metaData);
        return metaData; //cancel notify
    },
    getPage: function(){
        return this;
    },
    drawBox: function(){
        this.externalAdapter = document.site.externalAdapter;
        this.$skin = "s-author-designer";
        this.$$item = $("<div class='s-author-panel'/>").appendTo(this.$$container).hide();
        var $authoringSubType = this.designedNode.item.$authoringSubType;
        if (!$authoringSubType && this.designedNode.item.getPage) {
            $authoringSubType = this.designedNode.item.getPage().$authoringSubType;
        }
        document.authoringSite.isAuthoringOn = false; //temp for layout
        var itemDesigner = (this.designedNode.$authoringLevel != "field") ? new BoxDesigner() : new FieldDesigner();
        itemDesigner.$layoutOptions = document.site.$item.$layoutOptions.authoring;
        itemDesigner.loadBox(this, this.designedNode.item.$item);
        document.authoringSite.isAuthoringOn = true;
        this.$$item.toggle(true);
    },
    dispose: function(){
        if (this.$$item) {
            this.$$item.remove();
        }
        delete this.designedNode;
        Article.prototype.dispose.call(this);
    }
});

function BoxDesigner(){
}

exports.BoxDesigner = helpers.defineClass(BoxDesigner, Article, {
    addNewBox: function(parentBox, $category){
        var newItem = document.itemFactory.create({
            $category: $category,
            $title: _localize["new" + $category.slice(0, 1).toUpperCase() + $category.slice(1)],
            $layout: {
                $items: []
            }
        }, parentBox);
        parentBox.layoutContent.appendNewItem({
            newItem: newItem,
            load: true
        });
        newItem.authoringNode.tree.showTargetItem(newItem.authoringNode);
    },
    loadBox: function(palette, $boxItem){
        var self = this;
        self.$prototype = {
            "$": {
                $isHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isHidden
                },
                $isMaximizable: {
                    $type: "application/x-boolean",
                    $title: _localize.isMaximizable
                },
                $isBoxCollapsable: {
                    $type: "application/x-boolean",
                    $title: _localize.isBoxCollapsable
                },
                $isSeparatorsVisible: {
                    $type: "application/x-boolean",
                    $title: _localize.isSeparatorsVisible
                },
                $isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isTitleHidden
                },
                $field$width: {
                    $type: "application/x-choice",
                    $title: "Value Size",
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "small",
                                $title: _localize.widthSmall
                            }, {
                                $value: "medium",
                                $title: _localize.widthMedium
                            }, {
                                $value: "large",
                                $title: _localize.widthLarge
                            }, {
                                $value: "fit",
                                $title: _localize.widthMaximum
                            }]
                        }
                    }
                },
                $field$isTopLabelAlignment: {
                    $type: "application/x-boolean",
                    $title: _localize.isTopLabelAlignment
                },
                $field$isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isLabelHidden
                },
                $field$isRightTextLabelAlignment: {
                    $type: "application/x-choice",
                    $title: _localize.isRightTextLabelAlignment,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: false,
                                $title: _localize.textLabelLeftAligned
                            }, {
                                $value: true,
                                $title: _localize.textLabelRightAligned
                            }]
                        }
                    }
                }
            },
            $links: {
                $switchMode: {
                    $title: _localize.lightMode
                },
                $addSection: {
                    $title: _localize.addSection
                },
                $addBlock: {
                    $title: _localize.addBlock
                }
            },
            $isMaximizable: false,
            $isBoxCollapsable: false,
            $isSeparatorsVisible: false,
            $isTitleHidden: false,
            $field$width: "fit",
            $field$isTopLabelAlignment: false,
            $field$isTitleHidden: false,
            $field$isRightTextLabelAlignment: false
        };
        
        var isPage = palette.designedNode.isPageItem();
        var designedItem = palette.designedNode.item;
        document.itemFactory.initializeItem(self, {
            $category: "section",
            $bind: "$box",
            $isSeparatorsVisible: true,
            $skin: "s-author-designer-item",
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "50,50",
                $items: [{
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $id: (self.$layoutSectionId = document.controller.generateUUID()),
                        $title: "Layout",
                        $layout: {
                            $layoutType: "side",
                            $layoutCss: "s-author-designer-item-side",
                            $items: [{
                                $layoutType: "stack",
                                $items: [{
                                    $bind: "$isSeparatorsVisible",
                                    $skin: "s-author-field",
                                    $isEditMode: true,
                                    $isLeftSpaceHidden: true
                                }]
                            }, {
                                $layoutType: "stack",
                                $items: ["$isHidden", "$isTitleHidden", "$isBoxCollapsable", "$isMaximizable"].map(function($bind){
                                    return {
                                        $bind: $bind,
                                        $skin: "s-author-field",
                                        $isHidden: isPage,
                                        $isEditMode: true,
                                        $isLeftSpaceHidden: true
                                    };
                                })
                            }, {
                                $layoutType: "stack",
                                $items: [{
                                    $bind: "$switchMode",
                                    $skin: "s-author-designer-link",
                                    $css: "s-author-designer-link-switch",
                                    $category: "link"
                                }, {
                                    $bind: "$addSection",
                                    $skin: "s-author-designer-link",
                                    $isHidden: !isPage,
                                    $category: "link"
                                }, {
                                    $bind: "$addBlock",
                                    $skin: "s-author-designer-link",
                                    $isHidden: !(isPage || designedItem.$item.$category == "section"),
                                    $category: "link"
                                }]
                            }]
                        }
                    }]
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $bind: "$field",
                        $title: "For all fields",
                        $layout: {
                            $layoutType: "side",
                            $layoutCss: "s-author-designer-item-side",
                            $items: [{
                                $category: "block",
                                $title: "Labels",
                                $layout: {
                                    $items: [{
                                        $bind: "$field$isTitleHidden",
                                        $skin: "s-author-field",
                                        $isEditMode: true,
                                        $isLeftSpaceHidden: true
                                    }, {
                                        $bind: "$field$isTopLabelAlignment",
                                        $skin: "s-author-field",
                                        $isEditMode: true,
                                        $isLeftSpaceHidden: true
                                    }, {
                                        $bind: "$field$isRightTextLabelAlignment",
                                        $skin: "s-author-field",
                                        $isEditMode: true,
                                        $labelWidth: "auto"
                                    }]
                                }
                            }, {
                                $category: "block",
                                $title: "Size",
                                $layout: {
                                    $items: [{
                                        $bind: "$field$width",
                                        $skin: "s-author-field",
                                        $isEditMode: true,
                                        $isTitleHidden: true,
                                        $labelWidth: "auto",
                                        $format: "$combo"
                                    }]
                                }
                            }]
                        }
                    }]
                }]
            
            }
        }, palette);
        self.$$container = palette.$$item;
        Article.prototype.loadBox.call(this, $boxItem);
        var switchMode = self.menuItems.$switchMode[0];
        var layoutSection = self.idMap[self.$layoutSectionId];
        (switchMode.$$container = layoutSection.$$header).append(switchMode.$$item);
        switchMode.onMenuClick = function(){
            var node = palette.designedNode;
            node.toggleLightMode();
            this.setTitle(node.$isLightMode ? _localize.fullMode : _localize.lightMode);
            return false;
        };
        self.menuItems.$addSection[0].onMenuClick = function(){
            self.addNewBox(designedItem, "section");
            return false;
        };
        self.menuItems.$addBlock[0].onMenuClick = function(){
            self.addNewBox(designedItem, "block");
            return false;
        };
        self.layoutChoice = new LayoutChoice();
        //self.layoutChoice.render($("<div/>").prependTo(self.boundFields.$isBoxCollapsable[0].boxParent.layoutContent.items[0].$$container), {
        self.layoutChoice.render($("<div/>").prependTo(self.boundFields.$isSeparatorsVisible[0].$$container), {
            $showTitle: true
        }, palette);
    },
    dispose: function(){
        delete this.palette;
        Article.prototype.dispose.call(this);
    }
});

function FieldDesigner(){
}

exports.FieldDesigner = helpers.defineClass(FieldDesigner, Article, {
    loadBox: function(palette, $fieldItem){
        this.$prototype = {
            "$": {
                $isHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isHidden
                },
                $width: {
                    $type: "application/x-choice",
                    $title: "Value Size",
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "small",
                                $title: _localize.widthSmall
                            }, {
                                $value: "medium",
                                $title: _localize.widthMedium
                            }, {
                                $value: "large",
                                $title: _localize.widthLarge
                            }, {
                                $value: "fit",
                                $title: _localize.widthMaximum
                            }]
                        }
                    }
                },
                $isTopLabelAlignment: {
                    $type: "application/x-boolean",
                    $title: _localize.isTopLabelAlignment
                },
                $isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isLabelHidden
                },
                $isRightTextLabelAlignment: {
                    $type: "application/x-choice",
                    $title: _localize.isRightTextLabelAlignment,
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: false,
                                $title: _localize.textLabelLeftAligned
                            }, {
                                $value: true,
                                $title: _localize.textLabelRightAligned
                            }]
                        }
                    }
                }
            },
            $width: "fit",
            $isTopLabelAlignment: false,
            $isTitleHidden: false,
            $isRightTextLabelAlignment: false
        };
        document.itemFactory.initializeItem(this, {
            $category: "section",
            $bind: "$field",
            $isSeparatorsVisible: true,
            $skin: "s-author-designer-item",
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "25,25,50",
                $items: [{
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $title: "Layout",
                        $layout: {
                            $items: [{
                                $skin: "s-author-field",
                                $bind: "$isHidden",
                                $isEditMode: true,
                                $isLeftSpaceHidden: true
                            }, {
                                $skin: "s-author-field",
                                $bind: "$width",
                                $isEditMode: true,
                                $isTitleHidden: true,
                                $labelWidth: "auto",
                                $format: "$combo"
                            }]
                        }
                    }]
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $title: "Labels",
                        $layout: {
                            $items: [{
                                $skin: "s-author-field",
                                $bind: "$isTitleHidden",
                                $isEditMode: true,
                                $isLeftSpaceHidden: true
                            }, {
                                $skin: "s-author-field",
                                $bind: "$isTopLabelAlignment",
                                $isEditMode: true,
                                $isLeftSpaceHidden: true
                            }, {
                                $skin: "s-author-field",
                                $bind: "$isRightTextLabelAlignment",
                                $isEditMode: true,
                                $labelWidth: "auto"
                            }]
                        }
                    }]
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $layout: {
                            $items: []
                        }
                    }]
                }]
            
            }
        }, palette);
        this.$$container = palette.$$item;
        Article.prototype.loadBox.call(this, $fieldItem);
        if (palette.designedNode.item.getAuthoringWidget) {
            if (this.fieldAuthoring = palette.designedNode.item.getAuthoringWidget()) {
                var dom = document.createElement("div");
                dom.className = "s-author-designer-custom-field";
                this.fieldAuthoring.$$container = $(dom).prependTo(this.layoutContent.items[2].$$container);
                document.itemFactory.initializeItem(this.fieldAuthoring, {}, palette);
                this.fieldAuthoring.designedField = palette.designedNode.item;
                this.fieldAuthoring.$layoutOptions = document.site.$item.$layoutOptions.authoring;
                this.fieldAuthoring.$skin = this.fieldAuthoring.$layoutOptions.section;
                this.fieldAuthoring.loadBox($fieldItem);
            }
        }
    },
    dispose: function(){
        if (this.fieldAuthoring) {
            delete this.fieldAuthoring.designedField;
            delete this.fieldAuthoring;
        }
        delete this.palette;
        Article.prototype.dispose.call(this);
    }
});


function CustomFieldDesigner(){
}

helpers.defineClass(CustomFieldDesigner, Article, {
    loadBox: function($$container, palette, $customArticle, $fieldItem){
        this.$layoutOptions = palette.$layoutOptions;
        this.$prototype = $customArticle.$prototype;
        document.itemFactory.initializeItem(this, $customArticle.$article, this.palette = palette);
        this.$item.$skin = this.$item.$skin || "s-author-designer-item-h1";
        this.$$container = $$container;
        Article.prototype.loadBox.call(this, $fieldItem);
    },
    dispose: function(){
        delete this.palette;
        Article.prototype.dispose.call(this);
    }
});
