"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var layoutSettings = require('syracuse-ui/lib/common/article/layouts/authoring/layoutSettings');
var _localize = {
    allFields: "All fields",
    allSections: "All sections",
    layoutStacked: "stacked",
    layoutInTab: "in tab",
    layoutSide: "side by side",
    addSection: "add a section",
    lightMode: "show light mode",
    fullMode: "show full mode",
    isSeparatorsVisible: "show separators",
    widthContent: "content",
    widthSmall: "small",
    widthMedium: "medium",
    widthLarge: "large",
    widthMaximum: "maximum",
    isHidden: "hide me",
    labelLeftAlignment: "at left",
    labelTopAlignment: "at top",
    textLabelAlignment: "text alignment",
    textLabelLeftAligned: "left",
    textLabelRightAligned: "right",
    layoutColumn: "1 column",
    layoutColumns: "columns",
    layoutComposite: "composite",
    isBoxCollapsable: "collapsible",
    isMaximizable: "maximizable",
    isTitleHidden: "hide title",
    isTopLabelAlignment: "top aligned",
    isLabelHidden: "hide label",
    allBlocks: "All blocks",
    addBlock: "add a block",
    fieldsPosition: "Position",
    addField: "add a field",
    fieldSize: "Size",
    fieldLabel: "Label",
    fieldLabelPosition: "position",
    fieldLabelsPosition: "Labels position",
    layout: "Layout",
    appearance: "Appearance",
    structure: "Structure",
    selectTemplate: "apply template"
};




function _formatDefaultItem($bind){
    return {
        $bind: $bind,
        $skin: "s-author-field",
        $isEditMode: true,
        $isLeftSpaceHidden: true
    };
}

function _formatLinks($protoAddItem){
    return $protoAddItem ? {
        $switchMode: {
            $title: _localize.lightMode
        },
        $addItem: {
            $title: $protoAddItem
        }
    } : {
        $layoutType: "columns",
        $layoutSubType: "50,50",
        $items: [{
            $layoutType: "stack",
            $layoutCss: "s-author-designer-link-stack",
            $items: [{
                $bind: "$switchMode",
                $skin: "s-author-designer-link s-author-switch-full",
                $category: "link"
            }]
        }, {
            $layoutType: "stack",
            $layoutCss: "s-author-designer-link-stack",
            $items: [{
                $bind: "$addItem",
                $skin: "s-author-designer-link s-author-add",
                $category: "link"
            }]
        }]
    };
}

function _formatBoxLayoutStack(){
    return {
        $layoutType: "stack",
        $items: [{
            $layoutType: "columns",
            $layoutSubType: "33,33,33",
            $items: [{
                $layoutType: "stack",
                $items: [_formatLayout(false)]
            }, _formatBoxAppearance(), {
                $layoutType: "stack",
                $items: [{
                    $category: "section",
                    $title: _localize.structure,
                    $layout: {
                        $items: ["$isBoxCollapsable", "$isMaximizable"].map(function($bind){
                            return _formatDefaultItem($bind);
                        })
                    }
                }]
            }]
        }, _formatLinks()]
    };
}

function _formatLayout(isProto){
    if (isProto) {
        var $enums = layoutSettings.$columns.map(function($width){
            var $parts = $width.split(",");
            return {
                $value: $parts.join("-"),
                $title: $parts.length + " " + _localize.layoutColumns // + " ( " + $parts.join("% ") + ")"
            };
        });
        $enums.splice(0, 0, {
            $value: "100",
            $title: _localize.layoutColumn
        });
        return {
            $type: "application/x-choice",
            $value: {
                $type: "application/x-string",
                $constraints: {
                    $enum: $enums
                }
            }
        };
    }
    var $links = {};
    var $subMenus = [];
    Object.keys(layoutSettings.$composite).forEach(function($key){
        $subMenus.push({
            $bind: $key
        });
        $links[$key] = {
            $title: layoutSettings.$composite[$key].$title || _localize.layoutComposite
        };
    });
    return {
        $category: "section",
        $title: _localize.layout,
        $layout: {
            $layoutType: "stack",
            $items: [{
                $bind: "$boxLayoutType",
                $icon: {
                    $mode: "iconText",
                    $path: "authoring/s-layout-",
                    $width: "34px",
                    $height: "34px"
                },
                $choiceLayout: "3",
                $isEditMode: true,
                $skin: "s-author-field",
                $isLeftSpaceHidden: true
            }, {
                $category: "links",
                $id: "formatLayoutLinks",
                $skin: "s-author-template-mn",
                $isBindDisabled: true,
                $choiceLayout: "1",
                $links: $links,
                $menus: [{
                    $items: [{
                        $title: _localize.selectTemplate,
                        $subMenus: {
                            $skin: "s-author-composites",
                            $isPopup: true,
                            $icon: {
                                $mode: "iconText",
                                $path: "authoring/s-layout-",
                                $width: "32px",
                                $height: "32px"
                            }
                        },
                        $items: $subMenus
                    }]
                }]
            }]
        }
    };
}


function _formatBoxAppearance(){
    return {
        $layoutType: "stack",
        $items: [{
            $category: "section",
            $title: _localize.appearance,
            $layout: {
                $items: ["$isHidden", "$isSeparatorsVisible", "$isTitleHidden"].map(function($bind){
                    return _formatDefaultItem($bind);
                })
            }
        }]
    };
}

function _formatChildLayout(isProto, $category){
    if (isProto) {
        var $enum = [{
            $value: "stack",
            $title: _localize.layoutStacked
        }];
        if ($category != "field") {
            $enum.push({
                $value: "tabs",
                $title: _localize.layoutInTab
            });
        }
        $enum.push({
            $value: "side",
            $title: _localize.layoutSide
        });
        return {
            $type: "application/x-choice",
            $value: {
                $type: "application/x-string",
                $constraints: {
                    $enum: $enum
                }
            }
        };
    }
    else {
        return {
            $category: $category == "field" ? "block" : "section",
            $bind: "$field",
            $title: {
                section: _localize.allSections,
                block: _localize.allBlocks,
                field: _localize.fieldsPosition
            }[$category],
            $layout: {
                $items: [{
                    $bind: "$allChildLayout",
                    $skin: "s-author-field",
                    $format: "$radios",
                    $choiceLayout: "1",
                    $icon: {
                        $mode: "iconText",
                        $path: "authoring/s-layout-",
                        $width: "32px",
                        $height: "32px"
                    },
                    $isEditMode: true,
                    $isTitleHidden: true,
                    $labelWidth: "auto"
                }]
            }
        };
    }
}


function _notifyChildrenFields(children, value, binding){
    children.forEach(function(child){
        if (child.$authoringLevel == "field") {
            _notifyFieldItem(child.item, value, binding);
        }
        else {
            if (child.children) {
                _notifyChildrenFields(child.children, value, binding);
            }
        }
    });
}

function _notifyFieldItem(item, value, binding){
    var metaData = {}
    metaData[binding] = value;
    item.applyDesignMetaData(metaData);
    if (item.authoringNode && metaData.$isHidden !== undefined) {
        item.authoringNode.applyHiddenState(metaData);
    }
}

function ItemPalette(){

}

helpers.defineClass(ItemPalette, Article, {
    getNode: function(){
        return this.authoringView.designedNode;
    },
    isFieldItem: function(){
        return this.getNode().$authoringLevel == "field";
    },
    getPage: function(){
        return this;
    },
    onNotifyRecordChange: function(value, binding){
        var self = this;
        var metaData = {};
        var node = self.getNode();
        metaData[binding] = value;
        if (self.isFieldItem()) {
            _notifyFieldItem(node.item, value, binding);
        }
        else {
            if (binding.indexOf("$fields") == 0) {
                var fieldBind = binding.slice("$fields".length);
                fieldBind = fieldBind.slice(0, 1).toLowerCase() + fieldBind.slice(1);
                _notifyChildrenFields(node.children, value, "$" + fieldBind);
                node.item.applyDesignMetaData(metaData);
            }
            else {
                if (metaData.$boxLayoutType !== undefined) {
                    metaData.$layout = {};
                    if (metaData.$boxLayoutType == "100") {
                        metaData.$layout.$layoutType = self.boundFields.$allChildLayout[0].currentValue;
                    }
                    else {
                        metaData.$layout.$layoutType = "columns";
                        metaData.$layout.$layoutSubType = metaData.$boxLayoutType.replace(/-/g, ",");
                    }
                }
                if (metaData.$allChildLayout) {
                    if (metaData.$allChildLayout == "tabs") {
                        if (this.getNode().getChildrenLevel() == "field") {
                            var authoringView = this.authoringView;
                            debugger;
                            var newBox = authoringView.addNewBox({
                                parentBox: node.item,
                                $category: node.$authoringLevel == "section" ? "block" : "section",
                                doSelectItem: false
                            });
                            authoringView.moveContent(node.item, newBox);
                            metaData.$layout = metaData.$layout || {};
                            metaData.$layout.$layoutType = metaData.$allChildLayout;
                            delete metaData.$allChildLayout;
                            node.item.applyDesignMetaData(metaData);
                            return null;
                        }
                    }
                    metaData.$layout = metaData.$layout || {};
                    metaData.$layout.$layoutType = metaData.$allChildLayout;
                    delete metaData.$allChildLayout;
                }
                node.item.applyDesignMetaData(metaData);
                if (metaData.$isHidden !== undefined) {
                    node.applyHiddenState(metaData);
                }
            }
        }
        self.authoringView.isUpdated = true;
        self.applyChange(metaData);
        return null;
    },
    applyChange: function(newData){
        var self = this;
        var metaData = {
            $: {}
        };
        if (newData) {
            Object.keys(newData).forEach(function($prop){
                var value = newData[$prop];
                if ($prop == "$layout") {
                    $prop = "$boxLayoutType";
                    switch (newData.$layout.$layoutType || "stack") {
                        case "stack":
                        case "side":
                        case "tabs":
                            value = "100";
                            metaData.$allChildLayout = newData.$layout.$layoutType;
                            break;
                        default:
                            value = (newData.$layout.$layoutSubType || "50,50").replace(/,/g, "-");
                            break;
                    }
                }
                switch ($prop) {
                    case "$boxLayoutType":
                        if (!newData.$allChildLayout && !metaData.$allChildLayout) {
                            metaData.$allChildLayout = "stack";
                        }
                        metaData.$.$allChildLayout = {
                            $isDisabled: value != "100"
                        };
                        break;
                    case "$isTopLabelAlignment":
                        metaData.$.$isRightTextLabelAlignment = {
                            $isDisabled: value
                        };
                        break;
                    case "$fieldsIsTopLabelAlignment":
                        metaData.$.$fieldsIsRightTextLabelAlignment = {
                            $isDisabled: value
                        };
                        break;
                    case "$isHidden":
                        var $isDisabled = {
                            $isDisabled: value
                        };
                        Object.keys(self.$prototype.$).forEach(function($key){
                            if ($key.indexOf("$isHidden") < 0) {
                                metaData.$[$key] = $isDisabled;
                            }
                        });
                        if (self.menuItems) {
                            if (self.menuItems.$switchMode) {
                                self.menuItems.$switchMode[0].setMenu($isDisabled);
                                if (self.menuItems.$addItem) {
                                    self.menuItems.$addItem[0].setMenu($isDisabled);
                                }
                            }
                        }
                        break;
                    case "$fieldsIsTitleHidden":
                        (metaData.$.$fieldsIsTopLabelAlignment = metaData.$.$fieldsIsTopLabelAlignment || {}).$isDisabled = value;
                        var isRightDisabled = !value ? (newData.$fieldsIsTopLabelAlignment || self.dataset.$fieldsIsTopLabelAlignment) : true;
                        (metaData.$.$fieldsIsRightTextLabelAlignment = metaData.$.$fieldsIsRightTextLabelAlignment || {}).$isDisabled = isRightDisabled;
                        break;
                    case "$isTitleHidden":
                        if (self.isFieldItem()) {
                            (metaData.$.$isTopLabelAlignment = metaData.$.$isTopLabelAlignment || {}).$isDisabled = value;
                            var isRightDisabled = !value ? (newData.$isTopLabelAlignment || self.dataset.$isTopLabelAlignment) : true;
                            (metaData.$.$isRightTextLabelAlignment = metaData.$.$isRightTextLabelAlignment || {}).$isDisabled = isRightDisabled;
                        }
                        else {
                            metaData.$.$isBoxCollapsable = metaData.$.$isMaximizable = {
                                $isDisabled: value
                            };
                        }
                        break;
                }
                metaData[$prop] = value;
            });
        }
        Article.prototype.applyChange.call(this, metaData);
    },
    setSwitchMode: function(switchMenu){
        switchMenu.setTitle(this.getNode().$isLightMode ? _localize.fullMode : _localize.lightMode);
        switchMenu.$$item[0].className = "s-author-designer-link s-author-switch-" + (this.getNode().$isLightMode ? "full" : "light");
    },
    loadBox: function(){
        var self = this;
        self.isAuthoringDisabled = true;
        var $isEditMode = self.getNode().item.getArticle().$isEditMode;
        if (self.isFieldItem()) {
            if (self.$prototype.$isTopLabelAlignment = $isEditMode) {
                self.$prototype.$.$isRightTextLabelAlignment.$isDisabled = true;
            }
        }
        else {
            if (self.$prototype.$fieldsIsTopLabelAlignment = $isEditMode) {
                self.$prototype.$.$fieldsIsRightTextLabelAlignment.$isDisabled = true;
            }
        }
        Article.prototype.loadBox.call(this, this.getNode().item.$item);
        if (self.menuItems.$switchMode) {
            self.setSwitchMode(self.menuItems.$switchMode[0]);
            self.menuItems.$switchMode[0].onMenuClick = function(){
                self.authoringView.targetPage.authoringNode.toggleLightMode();
                self.setSwitchMode(self.menuItems.$switchMode[0]);
                return false;
            };
            if (self.menuItems.$addItem) {
                self.menuItems.$addItem[0].onMenuClick = function(){
                    self.authoringView.addNewBox({
                        parentBox: self.getNode().item,
                        $category: self.$childCategory
                    });
                    return false;
                };
            }
        }
        var formatLayoutLinks = self.idMap["formatLayoutLinks"];
        if (formatLayoutLinks) {
            formatLayoutLinks.onMenuClick = function(menuItem){
                self.getNode().item.applyDesignMetaData({
                    $layout: {
                        $layoutType: "composite",
                        $layoutSubType: menuItem.$bind
                    }
                });
                return false;
            };
        }
    },
    _formatFieldTextLabelAlign: function(isProto){
        return isProto ? {
            $type: "application/x-choice",
            $title: _localize.textLabelAlignment,
            $value: {
                $type: "application/x-string",
                $constraints: {
                    $enum: [{
                        $value: false,
                        $title: _localize.textLabelLeftAligned
                    }, {
                        $value: true,
                        $title: _localize.textLabelRightAligned
                    }]
                }
            }
        } : {
            $bind: this.isFieldItem() ? "$isRightTextLabelAlignment" : "$fieldsIsRightTextLabelAlignment",
            $skin: "s-author-field",
            $isEditMode: true,
            $labelWidth: "auto"
        };
    },
    _formatFieldsLabelPositionBlock: function(){
        return {
            $category: "block",
            $title: _localize.fieldLabelsPosition,
            $layout: {
                $items: [this._formatFieldLabelAlign(false), this._formatFieldTextLabelAlign(false)]
            }
        };
    },
    _formatFieldLabelAlign: function(isProto){
        return isProto ? {
            $type: "application/x-choice",
            $title: this.isFieldItem() ? _localize.fieldLabelPosition : "",
            $value: {
                $type: "application/x-string",
                $constraints: {
                    $enum: [{
                        $value: false,
                        $title: _localize.labelLeftAlignment
                    }, {
                        $value: true,
                        $title: _localize.labelTopAlignment
                    }]
                }
            }
        
        } : _formatDefaultItem(this.isFieldItem() ? "$isTopLabelAlignment" : "$fieldsIsTopLabelAlignment");
    },
    _formatFieldWidth: function(isProto, itemPalette){
        return isProto ? {
            $type: "application/x-choice",
            $value: {
                $type: "application/x-string",
                $constraints: {
                    $enum: [{
                        $value: "content",
                        $title: _localize.widthContent
                    }, {
                        $value: "small",
                        $title: _localize.widthSmall
                    }, {
                        $value: "medium",
                        $title: _localize.widthMedium
                    }, {
                        $value: "large",
                        $title: _localize.widthLarge
                    }, {
                        $value: "fit",
                        $title: _localize.widthMaximum
                    }]
                }
            }
        } : {
            $category: "block",
            $title: _localize.fieldSize,
            $layout: {
                $items: [{
                    $bind: this.isFieldItem() ? "$width" : "$fieldsWidth",
                    $skin: "s-author-field",
                    $isEditMode: true,
                    $isTitleHidden: true,
                    $labelWidth: "auto",
                    $format: "$combo"
                }]
            }
        };
    },
    dispose: function(){
        /* if (this.$$item) {
         this.$$item.remove();
         }*/
        delete this.authoringView;
        Article.prototype.dispose.call(this);
    }
});

function FieldPalette(){
}

exports.FieldPalette = helpers.defineClass(FieldPalette, ItemPalette, {
    loadBox: function(){
        this.$prototype = {
            "$": {
                $isHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isHidden
                },
                $width: this._formatFieldWidth(true),
                $isTopLabelAlignment: this._formatFieldLabelAlign(true),
                $isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isLabelHidden
                },
                $isRightTextLabelAlignment: this._formatFieldTextLabelAlign(true)
            },
            $links: {
                $switchMode: {
                    $title: _localize.lightMode
                }
            },
            $width: "fit",
            $isTopLabelAlignment: false,
            $isTitleHidden: false,
            $isRightTextLabelAlignment: false
        };
        document.itemFactory.initializeItem(this, {
            $category: "section",
            $bind: "$field",
            $isSeparatorsVisible: true,
            $skin: "s-author-designer-item",
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "50,50",
                $items: [{
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $title: _localize.appearance,
                        $layout: {
                            $layoutType: "columns",
                            $layoutSubType: "50,50",
                            $items: [{
                                $layoutType: "stack",
                                $items: [{
                                    $category: "block",
                                    $layout: {
                                        $items: [_formatDefaultItem("$isHidden")]
                                    }
                                }, this._formatFieldWidth(false), {
                                    $bind: "$switchMode",
                                    $skin: "s-author-designer-link s-author-switch-full",
                                    $category: "link"
                                
                                }]
                            }, {
                                $layoutType: "stack",
                                $items: [{
                                    $category: "block",
                                    $title: _localize.fieldLabel,
                                    $layout: {
                                        $items: [_formatDefaultItem("$isTitleHidden"), this._formatFieldLabelAlign(false), this._formatFieldTextLabelAlign(false)]
                                    }
                                }]
                            }]
                        }
                    }]
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $category: "slot",
                        $id: "s-author-designer-custom-field"
                    }]
                }]
            
            }
        }, this.authoringView);
        ItemPalette.prototype.loadBox.call(this);
        if (this.getNode().item.getAuthoringWidget) {
            if (this.fieldAuthoring = this.getNode().item.getAuthoringWidget()) {
                this.fieldAuthoring.$$container = $("#s-author-designer-custom-field");
                document.itemFactory.initializeItem(this.fieldAuthoring, {}, this);
                this.fieldAuthoring.designedField = this.getNode().item;
                this.fieldAuthoring.$layoutOptions = document.site.$item.$layoutOptions.authoring;
                this.fieldAuthoring.$skin = this.fieldAuthoring.$layoutOptions.section;
                this.fieldAuthoring.loadBox(this.getNode().item.$item);
            }
        }
    },
    dispose: function(){
        if (this.fieldAuthoring) {
            delete this.fieldAuthoring.designedField;
            delete this.fieldAuthoring;
        }
        ItemPalette.prototype.dispose.call(this);
    }
});

function PagePalette(){
}

exports.PagePalette = helpers.defineClass(PagePalette, ItemPalette, {
    loadBox: function(){
        var self = this;
        self.$childCategory = "section";
        self.$prototype = {
            "$": {
                $isSeparatorsVisible: {
                    $type: "application/x-boolean",
                    $title: _localize.isSeparatorsVisible
                },
                $boxLayoutType: _formatLayout(true),
                $allChildLayout: _formatChildLayout(true, self.$childCategory),
                $fieldsWidth: self._formatFieldWidth(true),
                $fieldsIsTopLabelAlignment: self._formatFieldLabelAlign(true),
                $fieldsIsRightTextLabelAlignment: self._formatFieldTextLabelAlign(true)
            },
            $links: _formatLinks(_localize.addSection),
            $boxLayoutType: "100",
            $isSeparatorsVisible: false,
            $fieldsWidth: "fit",
            $fieldsIsTopLabelAlignment: false,
            $fieldsIsRightTextLabelAlignment: false
        };
        document.itemFactory.initializeItem(self, {
            $category: "section",
            $bind: "$box",
            $isSeparatorsVisible: true,
            $skin: "s-author-designer-item",
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "60,20,20",
                $items: [{
                    $layoutType: "stack",
                    $items: [{
                        $layoutType: "columns",
                        $layoutSubType: "50,50",
                        $items: [{
                            $layoutType: "stack",
                            $items: [_formatLayout(false)]
                        }, {
                            $layoutType: "stack",
                            $items: [{
                                $category: "section",
                                $title: _localize.appearance,
                                $layout: {
                                    $items: [{
                                        $bind: "$isSeparatorsVisible",
                                        $skin: "s-author-field",
                                        $isEditMode: true,
                                        $isLeftSpaceHidden: true
                                    }]
                                }
                            }]
                        }]
                    }, _formatLinks()]
                }, {
                    $layoutType: "stack",
                    $items: [_formatChildLayout(false, self.$childCategory)]
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $bind: "$field",
                        $title: _localize.allFields,
                        $layout: {
                            $items: [self._formatFieldWidth(false), self._formatFieldsLabelPositionBlock()]
                        }
                    }]
                }]
            
            }
        }, self.authoringView);
        ItemPalette.prototype.loadBox.call(self);
    }
    
});


function SectionPalette(){
}

exports.SectionPalette = helpers.defineClass(SectionPalette, ItemPalette, {
    loadBox: function(){
        this.$childCategory = "block";
        this.$prototype = {
            "$": {
                $isHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isHidden
                },
                $isMaximizable: {
                    $type: "application/x-boolean",
                    $title: _localize.isMaximizable
                },
                $isBoxCollapsable: {
                    $type: "application/x-boolean",
                    $title: _localize.isBoxCollapsable
                },
                $isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isTitleHidden
                },
                $isSeparatorsVisible: {
                    $type: "application/x-boolean",
                    $title: _localize.isSeparatorsVisible
                },
                $boxLayoutType: _formatLayout(true),
                $allChildLayout: _formatChildLayout(true, this.$childCategory),
                $fieldsWidth: this._formatFieldWidth(true),
                $fieldsIsTopLabelAlignment: this._formatFieldLabelAlign(true),
                $fieldsIsRightTextLabelAlignment: this._formatFieldTextLabelAlign(true)
            },
            $links: _formatLinks(_localize.addBlock),
            $isSeparatorsVisible: false,
            $boxLayoutType: "100",
            $fieldsWidth: "fit",
            $fieldsIsTopLabelAlignment: false,
            $fieldsIsRightTextLabelAlignment: false
        };
        
        document.itemFactory.initializeItem(this, {
            $category: "section",
            $bind: "$box",
            $isSeparatorsVisible: true,
            $skin: "s-author-designer-item",
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "60,15,25",
                $items: [_formatBoxLayoutStack(), {
                    $layoutType: "stack",
                    $items: [_formatChildLayout(false, this.$childCategory)]
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $bind: "$field",
                        $title: _localize.allFields,
                        $layout: {
                            $items: [this._formatFieldWidth(false), this._formatFieldsLabelPositionBlock()]
                        }
                    }]
                }]
            
            }
        }, this.authoringView);
        ItemPalette.prototype.loadBox.call(this);
    }
});
function BlockPalette(){
}

exports.BlockPalette = helpers.defineClass(BlockPalette, ItemPalette, {
    loadBox: function(){
        this.$childCategory = "field";
        this.$prototype = {
            "$": {
                $isHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isHidden
                },
                $isMaximizable: {
                    $type: "application/x-boolean",
                    $title: _localize.isMaximizable
                },
                $isBoxCollapsable: {
                    $type: "application/x-boolean",
                    $title: _localize.isBoxCollapsable
                },
                $isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isTitleHidden
                },
                $isSeparatorsVisible: {
                    $type: "application/x-boolean",
                    $title: _localize.isSeparatorsVisible
                },
                $boxLayoutType: _formatLayout(true),
                $allChildLayout: _formatChildLayout(true, this.$childCategory),
                $fieldsWidth: this._formatFieldWidth(true),
                $fieldsIsTitleHidden: {
                    $type: "application/x-boolean",
                    $title: _localize.isLabelHidden
                },
                $fieldsIsTopLabelAlignment: this._formatFieldLabelAlign(true),
                $fieldsIsRightTextLabelAlignment: this._formatFieldTextLabelAlign(true)
            },
            $links: _formatLinks(_localize.addField),
            $isSeparatorsVisible: false,
            $boxLayoutType: "100",
            $fieldsWidth: "fit",
            $fieldsIsTitleHidden: false,
            $fieldsIsTopLabelAlignment: false,
            $fieldsIsRightTextLabelAlignment: false
        };
        document.itemFactory.initializeItem(this, {
            $category: "section",
            $bind: "$box",
            $isSeparatorsVisible: true,
            $skin: "s-author-designer-item",
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "60,40",
                $items: [_formatBoxLayoutStack(), {
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $bind: "$field",
                        $title: _localize.allFields,
                        $layout: {
                            $layoutType: "columns",
                            $layoutSubType: "50,50",
                            $items: [{
                                $layoutType: "stack",
                                $items: [_formatChildLayout(false, this.$childCategory), this._formatFieldWidth(false)]
                            }, {
                                $layoutType: "stack",
                                $items: [_formatDefaultItem("$fieldsIsTitleHidden"), this._formatFieldsLabelPositionBlock()]
                            }]
                        }
                    }]
                }]
            
            }
        }, this.authoringView);
        ItemPalette.prototype.loadBox.call(this);
    }
});
