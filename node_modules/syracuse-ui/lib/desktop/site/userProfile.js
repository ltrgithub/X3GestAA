"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var date = require('syracuse-core/lib/types/date');
var locale = require('syracuse-core/lib/locale');
var globals = require('streamline/lib/globals');
var _resources = date.resources;
function UserProfile(){
    // localized has to be declared in the constructor for the locale to be taken into account instead of the default one
    this._localize = locale.resources(module)();
}

exports.UserProfile = helpers.defineClass(UserProfile, Article, {
    dispose: function(){
        delete this.externalAdapter;
        delete this.formBlock;
        Article.prototype.dispose.call(this);
    },
    drawBox: function(){
        var self = this;
        self.externalAdapter = document.site.externalAdapter;
        self.formBlock = document.itemFactory.load(self.$$item = $("<div id='s-user-profile'/>"), {
            $category: "block",
            $title: self._localize.up_welcome,
            $skin: "s-user-profile-form",
            $layout: {
                $items: [{
                    $bind: "$save",
                    $category: "link",
                    $isHidden: true,
                    onServerRequest: function(menu){
                        //this is item menu	
                        if (menu.$links && menu.$links.$location) {
                            var currentPage = menu.boxParent.getArticle();
                            self.decoratePrototype(self.$prototype);
                            //                            document.controller.openPage(self, menu.$links.$location);
                            var location = ((document.site.$prototype || {}).$links || {}).$home;
                            location && document.controller.openPage(self, location);
                        }
                        return false;
                    }
                }, {
                    $isEditMode: true,
                    $isReferenceTitleVisible: false,
                    $skin: "s-user-profile-ref",
                    $css: "s-user-profile-selectedRole",
                    $bind: "photo"
                }, {
                    $isEditMode: true,
                    $isTopLabelAlignment: false,
                    $title: self._localize.up_role,
                    $isReferenceTitleVisible: false,
                    $skin: "s-user-profile-ref",
                    $css: "s-user-profile-selectedRole",
                    $bind: "selectedRole"
                }, {
                    $isEditMode: true,
                    $isTopLabelAlignment: false,
                    $title: self._localize.up_endpoint,
                    $skin: "s-user-profile-ref",
                    $isReferenceTitleVisible: false,
                    $css: "s-user-profile-selectedEndpoint",
                    $bind: "selectedEndpoint"
                }, {
                    $isEditMode: true,
                    $isTopLabelAlignment: false,
                    $title: self._localize.up_locale,
                    $skin: "s-user-profile-ref",
                    $isReferenceTitleVisible: false,
                    $css: "s-user-profile-selectedLocale",
                    $bind: "selectedLocale"
                }, {
                    $bind: "$logout",
                    $category: "link",
                    $skin: "s-user-profile-logout"
                }]
            }
        }, self);
    },
    getPage: function(){
        return this;
    },
    showDiagnoses: function(message){
        //afficher erreur ds popup ???
    },
    onNotifyRecordChange: function(value, binding){
        var data = {
            $actions: {
                $save: {
                    $isRequested: true
                }
            }
        };
        data[binding] = value;
        return data;
    },
    decoratePrototype: function($prototype){
        if (this.dataset && this.dataset.selectedRole) {
            $prototype.$role = this.dataset.selectedRole.$uuid;
        }
    },
    wrapLoadSuccess: function(cb){
        return function(arg){
            globals.context = globals.context || {};
            var lp = globals.context.localePreferences, lang = lp && lp.code || "en", map = globals.context.localeMap = globals.context.localeMap || {};
            
            if (map[lang] == null) {
                map[lang] = lang;
                locale.setCurrent(function(err){
                    cb(arg);
                }, lang, lp);
            }
            else {
                cb(arg);
            }
        };
    },
    applyChange: function(newData){
        // refresh page when user changes locale
        var sl = this.getSelectedLocale();
        if (Object.keys(this.dataset).length > 0) {
            if (sl && newData.selectedLocale && JSON.stringify(sl) != JSON.stringify(newData.selectedLocale)) {
                location.reload();
            }
        }
        
        if (newData && newData.selectedRole) {
            document.site.$prototype.$role = newData.selectedRole.$uuid;
        }
        
        Article.prototype.applyChange.call(this, newData);
        
        // adding localePreferences to globals.context
        if (this.dataset && this.dataset.selectedLocale) {
            globals.context = {};
            globals.context.localePreferences = this.dataset.selectedLocale;
        }
        
        // setting flag picture
        var country = this.dataset && this.dataset.selectedLocale && this.dataset.selectedLocale.code.substring(3).toLowerCase();
        var $$lookupPicker = this.boundFields && this.boundFields.selectedLocale && this.boundFields.selectedLocale[0].$$lookupPicker;
        if (country && $$lookupPicker) {
            $$lookupPicker.addClass('s-user-profile-country-' + country);
        }
        if (this.$isTitleUpdateRequested) {
            if (document.site.updateDocumentTitle) {
                document.site.updateDocumentTitle();
            }
            this.$isTitleUpdateRequested = false;
        }
        
    },
    getSelectedEndpointString: function(){
        var endpoint = this.dataset ? this.dataset.selectedEndpoint : null;
        return endpoint ? (endpoint.application + "." + endpoint.contract + "." + endpoint.dataset) : null;
    },
    getDateFormat: function(displayFormat){
        return displayFormat == "DD" ? (this.dataset.selectedLocale ? this.dataset.selectedLocale.longDate : "dd MMMM yyyy") : (this.dataset.selectedLocale ? this.dataset.selectedLocale.shortDate : "yyyy-MM-dd");
    },
    getTimeFormat: function(displayFormat){
        return displayFormat == "TT" ? (this.dataset.selectedLocale ? this.dataset.selectedLocale.longTime : "HH:mm:ss") : (this.dataset.selectedLocale ? this.dataset.selectedLocale.shortTime : "HH:mm");
    },
    getDatetimeFormat: function(displayFormat){
        var format;
        var self = this;
        switch (displayFormat) {
            case "F": // sortable datetime format
                format = _resources().formatPatterns ? _resources().formatPatterns["sortableDateTime"] : "yyyy-MM-ddTHH:mm:ss";
                break;
            case "FF": // full datetime format
                format = self.dataset.selectedLocale ? self.dataset.selectedLocale.longDatetime : (_resources().formatPatterns ? _resources().formatPatterns["fullDateTime"] : "dd MMMM yyyy HH:mm:ss");
                break;
            case "U": // universal sortable datetime format 
                format = _resources().formatPatterns ? _resources().formatPatterns["universalSortableDateTime"] : "yyyy-MM-dd HH:mm:ssZ";
                break;
            default: // datetime default format is dateformat + space + timeformat
                var selectedLocale = self.dataset.selectedLocale;
                format = (selectedLocale && selectedLocale.shortDatetime) ? selectedLocale.shortDatetime : (this.getDateFormat() + " " + this.getTimeFormat());
        }
        return format;
    },
    getSelectedLocale: function(){
        return this.dataset.selectedLocale;
    },
    getNumberFormatObj: function(type){
        var formatObj = {};
        var f = "#,";
        var gs = this.dataset.selectedLocale ? this.dataset.selectedLocale.numberGroupSize : "3";
        for (var i = 0; i < gs; i++) {
            f += "#";
        }
        f += type == "application/x-integer" ? '' : '.##';
        formatObj.numFormat = f;
        formatObj.decimalSeparator = this.dataset.selectedLocale ? this.dataset.selectedLocale.numberDecimalSeparator : ".";
        formatObj.groupSeparator = this.dataset.selectedLocale ? this.dataset.selectedLocale.numberGroupSeparator : ".";
        formatObj.groupSize = gs;
        return formatObj;
        //		return {
        //            groupSeparator: this.dataset.selectedLocale ? this.dataset.selectedLocale.numberGroupSeparator : "",
        //            decimalSeparator: this.dataset.selectedLocale ? this.dataset.selectedLocale.numberDecimalSeparator : ".",
        //            groupSize: gs,
        //			displayFormat: f
        //        };
    },
    getNumberFormat: function(type){
        return this.getNumberFormatObj(type).numFormat;
    },
    getTwoDigitYearMax: function(){
        return (this.dataset.selectedLocale && this.dataset.selectedLocale.twoDigitYearMax) || 2029;
    }
});

