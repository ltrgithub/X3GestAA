"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Page = require('syracuse-ui/lib/common/article/page').Page;

function DesktopPage(){
}

exports.DesktopPage = helpers.defineClass(DesktopPage, Page, {
    _initializeBox: function(){
        switch (this.$pageCategory) {
            case "dashboard":
                this.$defaultSkin = "s-dashboard";
                this.$authoringSubType = "dashboard";
                this.$autoFetch = false;
                break;
            case "portlet":
                this.$defaultSkin = "s-portlet";
                if (this.$facet == "$demo") {
                    this.$autoFetch = false;
                }
                this.$item.$isTitleHidden = true;
                break;
        }
        Page.prototype._initializeBox.call(this);
    },
    appendArticleMenus: function(){
        switch (this.$pageCategory) {
            case "dashboard":
                break;
            case "portlet":
                var $menus = this._getFacetMenus();
                if ($menus) {
                    var $$menuRow = $("<div/>").addClass(this.$skin + "-menu-row").prependTo(this.$$item);
                    var $$menus = $("<div/>").addClass(this.$skin + "-menus").prependTo($$menuRow);
                    document.itemFactory.load($$menus, {
                        $skin: "s-h2-menus",
                        $category: "links",
                        $mainAction: $menus.$mainAction,
                        $excludeBind: $menus.$linkBox.$excludeBind
                    }, this);
                }
                break;
            default:
                Page.prototype.appendArticleMenus.call(this);
                break;
        }
    },
    drawUserProfile: function(userProfile){
        if (document.site.$item.$isUserProfileQuickViewEnabled !== false) {
            if (!this.$$headerUserProfile) {
                this.$$headerUserProfile = $("<div/>").addClass(this.$skin + "-head-user-profile").appendTo(this.$$header);
            }
            else {
                this.$$headerUserProfile.empty();
            }
            if (userProfile) {
                if (userProfile.selectedRole) {
                    this.$$headerUserProfile.append($("<label/>").addClass(this.$skin + "-head-user-role").text(userProfile.selectedRole.description || ""));
                }
                if (userProfile.selectedEndpoint) {
                    this.$$headerUserProfile.append($("<label/>").addClass(this.$skin + "-head-user-endpoint").text(userProfile.selectedEndpoint.description || ""));
                }
                userProfile.selectedRole && userProfile.selectedRole.description
            }
        }
    },
    appendHeader: function($$container){
        Page.prototype.appendHeader.call(this, $$container);
        if (this.$prototype.$description) {
            this.renderDescription(this.$prototype.$description);
        }
        this.$$header.append(this.$$headerLeft = $("<div/>").addClass(this.$skin + "-head-left").append(this.$$header.children()));
    },
    drawBox: function(){
        this.$item.$title = this.$item.$title || "{$title}";
        this.$skin = this.$item.$skin || this.$defaultSkin || "s-page";
        this.$$item = $("<article/>").addClass(this.$skin).appendTo(this.$$container);
        
        var $$data = $("<div/>").addClass(this.$skin + "-data").appendTo(this.$$item);
        if (!this.$item.$isTitleHidden) {
            this.appendHeader($$data);
        }
        this.$$body = $("<div/>").addClass(this.$skin + "-body").appendTo($$data);
        
        this._renderLayoutContent(this.$item);
        this.appendArticleMenus();
        if (this.$$menus) {
            document.itemFactory.load(this.$$menus, {
                $category: "searchFacets",
                $prototype: {},
                $bind: "$searchFacets"
            }, this);
        }
        if (this.$displayTarget == "modal") {
            this._appendButton("s-dialog-page-close", "onClose");
            this.$$header.addClass("s-dialog-page-head");
            $$data.addClass("s-dialog-page");
            this.$cssDialog = "s-dialog-page-container";
            this.$$item.addClass("s-dialog-page").hide();
            this.$$body.css({
                overflow: "auto",
                height: 0
            });
            document.site.applyDialogDecorator(this);
            this.$$item.show();
        }
    },
    onDialogResize: function(){
        var body = this.$$body[0];
        var $$dialog = document.site.dialogAdapter.$$dialog;
        var root = $$dialog.parent()[0];
        var top = 0;
        var start = body;
        while (start && start != root) {
            top += start.offsetTop;
            start = start.offsetParent;
        }
        body.style.height = ($$dialog.height() - top) + "px";
    },
    applyChange: function(newData){
        Page.prototype.applyChange.call(this, newData);
        if (document.site.dialogAdapter) {
            document.site.dialogAdapter.center();
        }
    },
    dispose: function(){
        if (document.site.dialogAdapter) {
            document.site.removeDialog();
        }
        Page.prototype.dispose.call(this);
    }
});
