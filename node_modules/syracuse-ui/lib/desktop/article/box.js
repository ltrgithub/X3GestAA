"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require('syracuse-ui/lib/common/article/box').Box;

function DesktopMenus(){

}

exports.DesktopMenus = helpers.defineClass(DesktopMenus, Box, {
    drawBox: function(){
        this.$skin = this.$item.$skin || (this.getArticle().$skin + "-" + this.$skinLevel); // this.$item.$category);
        var dom = document.createElement("ul");
        dom.style.display = "none";
        dom.className = this.$skin + "-body";
        this.$$body = $(dom);
        
        dom = document.createElement("nav");
        dom.className = this.$skin;
        this.$$item = $(dom).appendTo(this.$$container).append(this.$$body);
        this.applyDesignMetaData(this.$item, false);
        if (this.$item.$width) {
            dom.style.width = this.$item.$width;
        }
        if (this.$item.$css) {
            dom.className += " " + this.$item.$css;
        }
        this.menuItems = [];
        this.openBox(this.$item.$opened !== false);
    },
    toggleMore: function($$link){
        var self = this;
        if (!self.popupMore) {
            document.site.toggleClass(self.moreAddins.$$link, "s-close", false);
            self.popupMore = document.site.createPopup({
                page: self.getPage(),
                $$popup: self.moreAddins.$$body.toggle(true),
                position: {
                    my: "left top",
                    at: "left bottom",
                    of: self.moreAddins.$$linkLi
                    /*,
                     offset :"0 2"*/
                },
                closeHandler: function(){
                    document.site.toggleClass(self.moreAddins.$$link, "s-close", true);
                    self.popupMore = null;
                    return true;
                },
                boundarySelector: "#" + self.id
            });
        }
        else {
            self.popupMore.close();
        }
    },
    _appendMore: function($skinItem, $$root){
        var dom = document.createElement("a");
        this.moreAddins = {
            $$linkLi: $("<li/>").addClass($skinItem + "-li").appendTo(this.$$body),
            $$link: $(dom),
            $$body: $("<div/>").addClass($skinItem + "-more-body").appendTo(this.$$item).hide(),
            lastColCount: 0
        };
        dom.className = $skinItem + "-more-btn s-close";
        dom.setAttribute("data-s-more", "1");
        dom.setAttribute("data-s-menu", this.id);
        dom.setAttribute("data-s-article", this.getArticle().id);
        this.moreAddins.$$link.appendTo(this.moreAddins.$$linkLi).text("more");
    },
    addMenuItem: function($menu, record, $$root){
        if (!this.$item.$excludeBind || this.$item.$excludeBind.indexOf($menu.$bind) < 0) {
            $$root = $$root || this.$$body;
            var $skinItem = this.$skin;
            var action = "appendTo";
            if (this.$item.$mainAction == $menu.$bind) {
                action = "prependTo";
                $skinItem += "-main";
            }
            if (this.$moreLimit < ++this.menuItemsCount) {
                if (!this.moreAddins) {
                    this._appendMore($skinItem, $$root);
                }
                if (this.moreAddins.lastColCount == 2) {
                    this.moreAddins.lastColCount = 0;
                }
                if (this.moreAddins.lastColCount == 0) {
                    this.moreAddins.$$lastCol = $("<ul/>").addClass(this.$skin + "-more-nav").appendTo(this.moreAddins.$$body);
                }
                this.moreAddins.lastColCount++;
                $$root = this.moreAddins.$$lastCol;
                $skinItem += "-more";
            }
            var menuItem = document.itemFactory.create({
                $bind: $menu.$bind,
                $skin: $skinItem + "-link",
                $category: $menu.$category || "link"
            }, this);
            var li = document.createElement("li");
            li.className = $skinItem + "-li";
            if (menuItem.$item.$css) {
                li.className += (" " + (menuItem.$item.$css));
            }
            (menuItem.$$liParent = menuItem.$$container = $(li))[action]($$root);
            menuItem.loadBox();
            menuItem.loaded = true;
            menuItem.setMenu($menu, record);
            this.menuItems.push(menuItem);
            return menuItem;
        }
    },
    addMenuItems: function($menus, $isAction){
        var self = this;
        Object.keys($menus).forEach(function($bind){
            var $menu = $menus[$bind];
            $menu.$bind = $bind;
            $menu.$isAction = $isAction;
            self.addMenuItem($menu);
        });
    },
    _addGroup: function($group, $$root){
        var self = this;
        var $$group;
        if ($$root) {
            var dom = document.createElement("li");
            dom.className = self.$skin + "-li";
            var $$li = $(dom).appendTo($$root);
            dom = document.createElement("a");
            dom.className = self.$skin + ((self.$item.$css) ? (" " + self.$item.$css) : "");
            var $$link = $(dom).appendTo($$li);
            $$link.text($group.$title);
            dom = document.createElement("ul");
            //dom.style.display = "none";
            dom.className = self.$skin + "-body";
            $$group = $(dom).appendTo($$li);
        }
        else {
            $$group = self.$$body;
        }
        $group.$items.forEach(function($item){
            if ($item.$items) {
                self._addGroup($item, $$group);
            }
            else {
                self.addMenuItem($item, null, $$group);
            }
        });
    },
    _renderLayoutContent: function(){
        //this.$$item.hide()=> if hideen show if menu in menuItem
        //this.$isHidden = true;
        var self = this;
        self.menuItemsCount = 0;
        if (!self.$item.$columnLimit) {
            self.$moreLimit = self.$item.$moreLimit || 20;
        }
        if (self.$item.$menus) {
            self.$item.$menus.forEach(function($group){
                self._addGroup($group);
            });
        }
        if (!self.$item.$isBindDisabled) {
            self.getArticle().menusFacade.bindBox(self);
        }
        else {
            if (self.$item.$links) {
                self.addMenuItems(self.$item.$links);
            }
            if (self.$item.$actions) {
                self.addMenuItems(self.$item.$actions, true);
            }
        }
    },
    dispose: function(){
        if (this.menuItems) {
            var article = this.getArticle();
            if (article) {
                this.menuItems.forEach(function(menuItem){
                    article.removeItem(menuItem);
                });
                delete this.menuItems;
            }
        }
        delete this.onMenuClick;
        Box.prototype.dispose.call(this);
    }
});
