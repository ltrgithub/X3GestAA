"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require('syracuse-ui/lib/common/article/box').Box;
var DesktopSubMenu = require('./desktopSubMenu').DesktopSubMenu;

function DesktopMenus(){

}

exports.DesktopMenus = helpers.defineClass(DesktopMenus, Box, {
    loadBox: function(){
        //a revoir
        this.$authoringLevel = "block";
        Box.prototype.loadBox.call(this);
    },
    drawBox: function(){
        this.$skin = this.$item.$skin || "s-menus";
        var body = document.createElement("ul");
        body.style.display = "none";
        body.className = this.$skin + "-body";
        
        var dom = document.createElement("nav");
        dom.className = this.$skin;
        this.$$body = $(dom.appendChild(body));
        this.$$item = $(this.$$container[0].appendChild(dom));
        this.applyDesignMetaData(this.$item, false);
        if (this.$item.$width) {
            dom.style.width = this.$item.$width;
        }
        if (this.$item.$css) {
            dom.className += " " + this.$item.$css;
        }
        this.menuItems = [];
        this.openBox(this.$item.$opened !== false);
    },
    _appendMore: function($$opener){
        var self = this;
        var btn = document.createElement("a");
        btn.className = self.$skin + "-more-btn s-close";
        
        var body = document.createElement("div");
        body.className = self.$skin + "-more-body";
        body.style.display = "none";
        self.$$item[0].appendChild(body);
        var $$btn = $(btn);
        $$btn.bind("click", function(){
            if (!self._popupMenus) {
                document.site.toggleClass(btn, "s-close", false);
                body.style.display = "";
                self._popupMenus = self.boxParent.openDialog({
                    $dialogMode: "popup",
                    content: self,
                    $$dialog: $(body),
                    position: {
                        my: "left top",
                        at: "left bottom",
                        of: $$btn
                    },
                    onClose: function(){
                        document.site.toggleClass(btn, "s-close", true);
                        self._popupMenus = null;
                        self.$$item[0].appendChild(body);
                    }
                });
            }
            else {
                self._popupMenus.close();
            }
            return false;
        }).appendTo($$opener).text("more");
        
        var ul = document.createElement("ul");
        ul.className = self.$skin + "-more-nav";
        return $(body.appendChild(ul));
    },
    addMenuItem: function($menu, record, subMenuParent){
        if (!this.$item.$excludeBind || this.$item.$excludeBind.indexOf($menu.$bind) < 0) {
            var $$root = this.$$body;
            var $skinItem = this.$skin;
            var $icon = this.$item.$icon;
            if (subMenuParent) {
                $$root = subMenuParent.$$group;
                if (subMenuParent.$subMenus) {
                    $skinItem = subMenuParent.$subMenus.$skin || $skinItem;
                    $icon = subMenuParent.$subMenus.$icon || $icon;
                }
            }
            var action = "appendTo";
            if (this.$item.$mainAction == $menu.$bind) {
                action = "prependTo";
                $skinItem += "-main";
            }
            if (this.$moreLimit < ++this.menuItemsCount) {
                if (!this.$$moreRoot) {
                    var dom = document.createElement("li");
                    dom.className = $skinItem + "-li";
                    this.$$moreRoot = this._appendMore($(dom).appendTo(this.$$body));
                }
                $$root = this.$$moreRoot;
                $skinItem += "-more";
            }
            var menuItem = document.itemFactory.create({
                $bind: $menu.$bind,
                $skin: $skinItem + "-link",
                $category: $menu.$category || "link",
                $icon: $icon
            }, this);
            var li = document.createElement("li");
            li.className = $skinItem + "-li";
            if (menuItem.$item.$css) {
                li.className += (" " + (menuItem.$item.$css));
            }
            (menuItem.$$liParent = menuItem.$$container = $(li))[action]($$root);
            menuItem.loadBox(record);
            menuItem.loaded = true;
            menuItem.subMenuParent = subMenuParent;
            if (!menuItem.$isSetMenuOn) {
                menuItem.setMenu($menu, record);
            }
            this.menuItems.push(menuItem);
            return menuItem;
        }
    },
    setMenuItems: function($menus, $isAction){
        var article = this.getArticle();
        Object.keys($menus).forEach(function($bind){
            var $menu = $menus[$bind];
            $menu.$bind = $bind;
            $menu.$isAction = $isAction;
            var bounds = article.menuItems[$bind];
            if (bounds) {
                bounds.forEach(function(menu){
                    menu.setMenu($menu, null);
                });
            }
        });
    },
    addMenuItems: function($menus, $isAction){
        var self = this;
        Object.keys($menus).forEach(function($bind){
            var $menu = $menus[$bind];
            $menu.$bind = $bind;
            $menu.$isAction = $isAction;
            self.addMenuItem($menu);
        });
    },
    appendPopup: function(){
        var self = this;
        var btn = document.createElement("a");
        btn.className = self.$skin + "-more-btn s-close";
        var $$btn = $(btn);
        
        var body = document.createElement("div");
        body.className = self.$skin + "-more-body";
        body.style.display = "none";
        self.$$item[0].appendChild(body);
        
        $$btn.bind("click", function(){
            if (!self._popupMenus) {
                document.site.toggleClass(btn, "s-close", false);
                body.style.display = "";
                self._popupMenus = self.boxParent.openDialog({
                    $dialogMode: "popup",
                    content: self,
                    $$dialog: $(body),
                    position: {
                        my: "left top",
                        at: "left bottom",
                        of: $$btn
                    },
                    onClose: function(){
                        document.site.toggleClass(btn, "s-close", true);
                        self._popupMenus = null;
                    }
                });
            }
            else {
                self._popupMenus.close();
            }
            return false;
        }).appendTo($$opener);
    },
    _addSubMenu: function($group, subMenuParent){
        var self = this;
        var subMenuItem = new DesktopSubMenu();
        subMenuItem.load(self, $group, subMenuParent);
        self.menuItems.push(subMenuItem);
        $group.$items.forEach(function($item){
            if ($item.$items) {
                self._addSubMenu($item, subMenuItem);
            }
            else {
                self.addMenuItem($item, null, subMenuItem);
            }
        });
    },
    _renderLayoutContent: function(){
        //this.$$item.hide()=> if hideen show if menu in menuItem
        //this.$isHidden = true;
        var self = this;
        self.menuItemsCount = 0;
        if (!self.$item.$columnLimit) {
            self.$moreLimit = self.$item.$moreLimit || 20;
        }
        if (self.$item.$menus) {
            self.$item.$menus.forEach(function($group){
                $group.$items.forEach(function($item){
                    if ($item.$items) {
                        self._addSubMenu($item);
                    }
                    else {
                        self.addMenuItem($item);
                    }
                });
            });
        }
        if (!self.$item.$isBindDisabled) {
            self.getArticle().bindMenuBox(self);
        }
        else {
            var action = self.$item.$menus ? "setMenuItems" : "addMenuItems";
            if (self.$item.$links) {
                self[action](self.$item.$links);
            }
            if (self.$item.$actions) {
                self[action](self.$item.$actions, true);
            }
        }
    },
    
    dispose: function(){
        if (this.menuItems) {
            var article = this.getArticle();
            if (article) {
                this.menuItems.forEach(function(menuItem){
                    article.removeItem(menuItem);
                });
                delete this.menuItems;
            }
        }
        delete this.onMenuClick;
        Box.prototype.dispose.call(this);
    }
});
