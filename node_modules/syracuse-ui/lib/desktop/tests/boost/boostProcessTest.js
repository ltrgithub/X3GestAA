"use strict";
var helpers = require("syracuse-core/lib/helpers")
var Article = require("syracuse-ui/lib/desktop/article/article").Article;

var _processes = {
    "testVisualProcessActions": {
        "$title": "Test VP Actions",
        "$resource": require("./process/VisualProcessActions").$resources
    },
    "testVisualProcessActionsWithoutTextes": {
        "$title": "Test VP Actions Without Textes",
        "$resource": require("./process/VisualProcessActionsWithoutTextes").$resources
    },
    "testVisualProcessArrows": {
        "$title": "Test VP Arrows",
        "$resource": require("./process/VisualProcessArrows").$resources
    },
    "testVisualProcessBezier": {
        "$title": "Test VP Bezier",
        "$resource": require("./process/VisualProcessBezier").$resources
    },
    "testVisualProcessDashed": {
        "$title": "Test VP Dashed Borders",
        "$resource": require("./process/VisualProcessDashed").$resources
    },
    "testVisualProcessFilling": {
        "$title": "Test VP Filling",
        "$resource": require("./process/VisualProcessFilling").$resources
    },
    "testVisualProcessTextPositionning": {
        "$title": "Test VP Text Positionning ",
        "$resource": require("./process/VisualProcessTextPositionning").$resources
    },
    "testVisualProcessShadow": {
        "$title": "Test VP Shadow ",
        "$resource": require("./process/VisualProcessShadow").$resources
    },
    "testVisualProcessTextFormatting": {
        "$title": "Test VP Text Formatting ",
        "$resource": require("./process/VisualProcessTextFormatting").$resources
    },
    "testVisualProcessRotations": {
        "$title": "Test VP Rotations",
        "$resource": require("./process/VisualProcessRotations").$resources
    },
    "testVisualProcessDeformations": {
        "$title": "Test VP deformations",
        "$resource": require("./process/VisualProcessDeformations").$resources
    },
    "testVisualProcessLinks": {
        "$title": "Test VP Links",
        "$resource": require("./process/VisualProcessLinks").$resources
    },
    "demoVisualProcess": {
        "$title": "Visual Process Demo",
        "$resource": require("./process/VisualDemoProcess").$resources
    },
    "testVisualProcess": {
        "$title": "Test VP ",
        "$resource": require("./process/VisualProcess").$resources
    }
};


function ProcessTest(){
}

exports.ProcessTest = helpers.defineClass(ProcessTest, Article, {
    getTypes: function(){
        return Object.keys(_processes).map(function($type){
            return {
                $value: $type,
                $title: _processes[$type].$title
            };
        });
    },
    loadBox: function(){
        var self = this;
        self.$layoutOptions = document.site.$item.$layoutOptions.page["vignette"];
        self.$prototype = {
            $properties: {
                $field$type: {
                    $title: "select a Process type",
                    $isMetaData: true,
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-string",
                            $enum: this.getTypes()
                    }
                },
                description: {
                    $title: "Case description",
                    $type: "application/x-string"
                },
                process: {
                    $type: "application/x-process",
                    $title: "Visual Process Player test"
                }
            
            },
            $field$type: "testVisualProcessArrows",
            $actions: {
                $startMacro: {
                    $title: "Start"
                }
            }
        };
        self.$item = {
            $isSeparatorsVisible: true,
            $layout: {
                $items: [{
                    $bind: "$field$type",
                    $isEditMode: true,
                    $format: "$radios"
                }, {
                    $bind: "description",
                    $isTitleHidden: true,
                    $isEditMode: false
                }, {
                    $id: "flashImage",
                    $isTitleHidden: true,
                    $layout: {
                        $items: []
                    }
                }, {
                    $bind: "process",
                    $isTitleHidden: true,
                    $isEditMode: false,
                    $labelWidth: "auto"
                }]
            }
        };
        Article.prototype.loadBox.call(self);
    },
    onNotifyRecordChange: function(value, binding){
        var self = this;
        switch (binding) {
            case "$field$type":
                var $resource = _processes[value].$resource;
                var $$flasImage = this.idMap["flashImage"].$$body;
                $$flasImage.empty().hide();
                $$flasImage[0].style.overflow = "visible";	
                this.applyChange({
                    $: {
                        description: {
                            $isHidden: !$resource.description
                        }
                    }
                });
                this.applyChange($resource);
                if ($resource.flashImage) {
                    $("<img />").appendTo($$flasImage.empty()).attr("src", $resource.flashImage.$url);
                    $$flasImage.show();
                }
                break;
        }
        return null; //cancel notify
    }
});
