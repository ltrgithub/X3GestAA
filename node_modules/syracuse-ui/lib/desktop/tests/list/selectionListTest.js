"use strict";
var helpers = require("syracuse-core/lib/helpers")
var resources = require("../resources");
var Article = require("syracuse-ui/lib/desktop/article/article").Article;
function SelectionListTest(){
}

exports.SelectionListTest = helpers.defineClass(SelectionListTest, Article, {
    loadBox: function(initData){
        var self = this;
        self.$layoutOptions = document.site.$item.$layoutOptions.page["vignette"];
        self.$prototype = {
            "$properties": {
                "$field$type": {
                    $isHidden: true
                },
                "$field$isTopLabelAlignment": {
                    $isHidden: true
                },
                "$field$isRightTextLabelAlignment": {
                    $isHidden: true
                },
                "application/x-array": {
                    "$title": "application/x-array",
                    "$capabilities": "sort,filter,insert,append,delete,reorder",
                    "$type": "application/x-array",
                    "$itemsPerPage": 5,
                    "$item": {
                        "$descriptor": "prototype employee.$edit",
                        "$type": "application/json",
                        "$pluralType": "children",
                        "$representation": "employee",
                        "$properties": {
                            "application/x-string": {
                                "$title": "x-string",
                                "$type": "application/x-string",
                                
                                    "$maxLength": 30
                                ,
                                "$capabilities": "sort,alphaTab"
                            },
                            "application/x-choice": {
                                $title: "application/x-choice",
                                $type: "application/x-choice",
                                $value: {
                                    $type: "application/x-integer",
                                        $enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value){
                                            return {
                                                "$value": value,
                                                $title: "Value " + value
                                            };
                                        })
                                }
                            },
                            "application/x-date": {
                                $title: "x-date",
                                $type: "application/x-date"
                            },
                            "application/x-boolean": {
                                $title: "application/x-boolean",
                                $type: "application/x-boolean"
                            },
                            "application/x-decimal": {
                                $title: "application/x-decimal",
                                $type: "application/x-decimal",
                                
                                    "$isNullable": true
                                }
                        },
                        "$links": {},
                        "$actions": {
                            "$delete": {
                                "$title": "Supprimer",
                                "$method": "PUT"
                            }
                        }
                    },
                    "$actions": {
                        "$create": {
                            "$title": "Ajouter",
                            "$method": "PUT"
                        }
                    }
                }
            
            
            },
            "application/x-array": resources.getRecords(2)
        };
        self.$item = {
            $isSeparatorsVisible: true,
            $layout: {
                $layoutType: "stack",
                $items: ["grid", "vgrid", "cards"].map(function($format){
                    //$items: ["vgrid"].map(function($format){
                    return {
                        $category: "section",
                        $title: "Format " + $format,
                        $layout: {
                            $layoutType: "columns",
                            $layoutSubType: "50,50",
                            $items: [{
                                $layoutType: "stack",
                                $items: ["multi", "single"].map(function($selectMode){
                                    return self.makeField($selectMode, $format);
                                })
                            }, {
                                $layoutType: "stack",
                                $items: ["button", "row"].map(function($selectMode){
                                    return self.makeField($selectMode, $format);
                                })
                            }]
                        }
                    };
                })
            }
        };
        Article.prototype.loadBox.call(self, initData);
    },
    makeField: function($selectMode, $format){
        return {
            $title: "$selectMode = " + $selectMode,
            $format: $format,
            $bind: "application/x-array",
            $selectMode: $selectMode,
            $layout: {
                $items: [{
                    "$bind": "application/x-string"
                }, {
                    "$bind": "application/x-choice"
                }]
            }
        };
    }
    
});
