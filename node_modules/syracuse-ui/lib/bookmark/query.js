"use strict";
var _edit = require("syracuse-ui/lib/bookmark/edit");

var _aside, _ul, _fusion, _syracuse, _addBtn, _editBtn, _dataset, _buttons, _popup;

exports.open = function(picker) {
	if (!_aside) {
		_create();
	}
	if (!_popup) {
		_popup = syra_over.openPopup(syra_site, {
			slot: _aside,
			picker: picker.link,
			position: {
				my: "left top",
				at: "left bottom",
				of: picker.link
			},
			close: function() {
				setTimeout(function() {
					_popup = null;
				}, 200);
			}
		});
		if (!_dataset) {
			exports.fetch();
		} else {
			_validateDisplay();
		}
	} else {
		_popup.close();
	}
};

function _getActivePage() {
	return syra_fusion.getActivatedSheet() || syra_site.mainPage;
}

function _validateDisplay() {
	var page = _getActivePage();
	var found, btnOn;
	if (page && !page.disposed) {
		var urlSeg;
		if (page.isFusionPage) {
			var functionfusion = page.$fusionPageMeta && page.$fusionPageMeta.winModel.getFctName();
			if (functionfusion) {
				urlSeg = {
					isFusion: true,
					fusionParams: {
						fullCode: functionfusion.name,
						functionCode: functionfusion.name,
						transaction: functionfusion.transaction
					}
				};
				if (functionfusion.transaction) {
					urlSeg.fusionParams.fullCode += "~" + functionfusion.transaction;
				}
			}
		} else {
			urlSeg = syra_url.history.getUrlSegment(page.urlSeg.$url);
		}
		found = urlSeg && exports.find(urlSeg);
	}
	for (var ii = _buttons.length - 1; ii >= 0; ii--) {
		var btn = _buttons[ii];
		if (btn.menuItem) {
			btn.bookMarkOn = btn.menuItem == found;
			syra_dom.toggleClass(btn.link, "s-on", btn.bookMarkOn);
			syra_button.disable(btn, btn.$isDisabled || !btn.isBookmarkEnabled || ((page && page.isFusionPage) && !btn.menuItem.urlSeg.isFusion));
			if (btn.bookMarkOn) {
				btnOn = btn;
			}
		}
	}

	var isHidden = !btnOn && ((_buttons.length >= syra_config.bookmarksMax) || page.isBookmarkDisable || page.$facet == "$edit");
	syra_button.hide(_addBtn, isHidden);
	syra_button.setText(_addBtn, btnOn ? syra_local.bookmarks_switch_off : syra_local.bookmarks_switch_on);
	syra_dom.toggleClass(_addBtn.link, "s-bookmarks-switch-on", !btnOn);
	syra_dom.toggleClass(_addBtn.link, "s-bookmarks-switch-off", btnOn);
	btnOn && exports.focus(btnOn);
}

exports.dispose = function(btn) {
	_reset();
	syra_button.dispose(_addBtn);
	syra_button.dispose(_editBtn);
	this.admin && this.admin.dispose();
	//syra_site.disposeObject(this);
	_aside = _ul = _fusion = _syracuse = _addBtn = _editBtn = _dataset = _buttons = _popup = null;
};

function _create() {
	_aside = document.createElement("aside");
	_aside.className = "s-bookmarks s-over-popup";
	_fusion = {
		map: {},
		get: function(urlSeg) {
			return this.map[urlSeg.fusionParams.fullCode];
		}
	};
	_syracuse = {
		map: {},
		get: function(urlSeg) {
			var uri = urlSeg.uri;
			if (urlSeg.host) {
				uri = uri.slice(uri.indexOf(urlSeg.host) + urlSeg.host.length);
			}

			var menus = this.map[uri];
			if (menus) {
				for (var ii = menus.length - 1; ii >= 0; ii--) {
					var seg2 = menus[ii].urlSeg;
					if (!urlSeg.params && !seg2.params) {
						return menus[ii];
					} else {
						if (urlSeg.params && seg2.params) {
							var keys1 = Object.keys(urlSeg.params);
							var keys2 = Object.keys(seg2.params);
							if (keys1.length == keys2.length) {
								for (var mm = keys1.length - 1; mm >= 0; mm--) {
									if (urlSeg.params[keys1[mm]] != seg2.params[keys1[mm]]) {
										break;
									}
								}
								if (mm < 0) {
									return menus[ii];
								}
							}
						}
					}
				}
			}
		}
	};
}

exports.focus = function(button) {
	if (!button) {
		for (var ii = 0, jj = _buttons.length; ii < jj; ii++) {
			if (!_buttons[ii].$isDisabled) {
				button = _buttons[ii];
				break;
			}
		}
	}
	if (button) {
		_ul && syra_site.scrollToItem(button.link, _ul, true);
		button.link.focus();
	}
};

function _reset() {
	_fusion.map = {};
	_syracuse.map = {};
	if (_buttons) {
		for (var ii = 0, jj = _buttons.length; ii < jj; ii++) {
			syra_button.dispose(_buttons[ii]);
		}
	}
	_buttons = [];
};

function _addMenu() {
	var title, urlSeg, description;
	var page = syra_fusion.getActivatedSheet();
	if (page) {
		var fct = page.$fusionPageMeta.winModel.getFctName();
		if (fct.name && (page.$fusionPageMeta.winModel._mdata.type == 1 || page.$fusionPageMeta.winModel._mdata.type == 2)) {
			if (page.urlSeg.fusionParams.functionCode != fct.name) {
				urlSeg = syra_site.clone(page.urlSeg);
				syra_url.replaceFusionCode(urlSeg, fct.name);
				syra_url.build(urlSeg);
				title = page.getTitle();
			} else {
				urlSeg = page.urlSeg;
				title = fct.title;
			}
			description = syra_local.nvpFunction + ": " + page.urlSeg.fusionParams.functionCode;
		}
	} else {
		page = syra_site.mainPage;
		if (page && page.urlSeg) {
			urlSeg = page.urlSeg;
			title = page.getTitle();
			if (page.$prototype.$representation) {
				description = syra_local.nvpEntity + ": " + page.$prototype.$representation;
			}
		}
	}
	if (urlSeg) {
		var menuItem = exports.find(urlSeg);
		if (menuItem) {
			exports.deleteMenu(menuItem);
		} else {
			menuItem = {
				$url: urlSeg.$url,
				title: title
			};
			if (description) {
				menuItem.description = description;
			}
			_dataset.items.push({
				menuItem: menuItem
			});
		}
		exports.commit();
	}
}

exports.deleteMenu = function(deleted) {
	var count = 0;
	var items = _dataset.items;
	for (var ii = 0, jj = items.length; ii < jj; ii++) {
		var item = items[ii];
		if (item.menuItem == deleted) {
			items.splice(ii, 1);
			return true;
		}
	}
};


exports.onLinkClick = function(menuItem) {
	var workBook = syra_fusion && syra_fusion.activatedBook;
	var target;
	if (workBook) {
		if (menuItem.urlSeg.fusionParams) {
			//x3 fct : open via ackcall
			//how to get current field with best way ?
			var sapController = workBook.fusionSite.controller._sapController;
			if (sapController) {
				syra_site.mainPage.externalAdapter.onBlockExRpc({
					field: sapController.getBoundField(sapController._currCtx.ist),
					call: {
						proxy: "EXEFNC1",
						values: [menuItem.urlSeg.fusionParams.functionCode, menuItem.urlSeg.fusionParams.transaction],
						callback: function() {}
					}
				});
			}
		}
	} else {
		syra_router.executeMenu({
			$url: menuItem.urlSeg.$url,
			target: target
		}, syra_site);
	}
	_popup && _popup.close();
};

exports.fetch = function(success) {
	syra_ajax.get({
		page: syra_site.userProfile,
		url: syra_expression.parse(syra_site.userProfile, syra_site.userProfile.$menus.$bookmarks.$url),
		success: function(data, response, requestUrl) {
			if (!syra_site.userProfile.disposed) {
				_dataset = data.content || {};
				_dataset.items = _dataset.items || [];
				_fill();
				success && success();
			}
		}
	});
};
exports.resize = function() {
	if (_ul) {
		_ul.style.maxHeight = syra_site.size.popupMaxHeight + "px";
	}
	_popup && _popup.resize();
};

function _fill() {
	var page = _getActivePage();
	syra_dom.remove(_ul);
	_reset();
	var items = _dataset.items;
	if (items) {
		_ul = syra_dom.ul("s-bookmarks-items");
		_ul.style.maxHeight = syra_site.size.popupMaxHeight + "px";
		var selectedEndpoint = syra_site.userProfile.dataset.selectedEndpoint;
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			var item = items[ii];
			if (item.menuItem && item.menuItem.$url) {
				var btn = syra_button.add({
					parent: syra_site,
					slot: syra_dom.li("s-bookmarks-item", _ul),
					text: item.menuItem.title || item.menuItem.description || "???",
					title: item.menuItem.description,
					css: (item.menuItem.$hasSeparator ? "s-separator " : "") + "s-bookmarks-item-link",
					click: function() {
						!this.$isDisabled && exports.onLinkClick(this.menuItem);
					},
					menuItem: item.menuItem
				});
				var seg = item.menuItem.urlSeg = syra_url.parse(item.menuItem.$url, true);
				if (seg.host) {
					//set relative url
					seg.isSyracuse = true;
					seg.uri = seg.uri.slice(seg.uri.indexOf(seg.host) + seg.host.length);
					seg.$url = seg.$url.slice(seg.$url.indexOf(seg.host) + seg.host.length);
					seg.host = null;
				}
				if (syra_url.replaceSegmentEndpoint(seg, selectedEndpoint, true)) {
					item.menuItem.$url = syra_url.build(seg);
					btn.isBookmarkEnabled = true;
				} else {
					if (seg.endpointSeg && seg.endpointSeg.application == "syracuse" && seg.endpointSeg.contract == "collaboration") {
						btn.isBookmarkEnabled = true;
					}
				}
				if (seg.isFusion) {
					_fusion.map[seg.fusionParams.fullCode] = item.menuItem;
				} else {
					(_syracuse.map[seg.uri] = _syracuse.map[seg.uri] || []).push(item.menuItem);
				}
				syra_url.history.setHref({
					$url: item.menuItem.$url,
					domItem: btn.link
				});
				_buttons.push(btn);
			}
		}

		_aside.insertBefore(_ul, _aside.firstChild);
	}
	var isHidden = !items.length;
	if (!_editBtn) {
		_editBtn = syra_button.add({
			parent: syra_site,
			slot: _aside,
			isHidden: isHidden,
			text: syra_local.bookmarks_open_edit,
			css: "s-bookmarks-action s-bookmarks-edit",
			click: function() {
				var modal = _edit.open();
				modal.refresh(_dataset);
			}
		});
	}
	syra_button.hide(_editBtn, isHidden);

	if (!_addBtn) {
		_addBtn = syra_button.add({
			parent: syra_site,
			slot: _aside,
			text: syra_local.bookmarks_switch_on,
			css: "s-bookmarks-action",
			click: function() {
				_addMenu();
			}
		});
	}

	_validateDisplay();
};

exports.commit = function(dataset) {
	_dataset = dataset || _dataset;
	syra_ajax.put({
		page: syra_site.userProfile,
		url: syra_expression.parse(syra_site.userProfile, syra_site.userProfile.$menus.$bookmarks.$url),
		data: {
			$etag: _dataset.$etag,
			content: _dataset
		},
		$etag: _dataset.$etag,
		success: function(data, response, requestUrl) {
			_fill();
		}
	});
};
exports.find = function(urlSeg) {
	if (_buttons.length) {
		return (urlSeg.fusionParams ? _fusion : _syracuse).get(urlSeg);
	}
};

function _toggleButton(btn, isOn) {
	syra_button.setText(btn, isOn ? syra_local.bookmarks_switch_off : syra_local.bookmarks_switch_on, isOn ? "bookmark_on" : "bookmark_off");
}