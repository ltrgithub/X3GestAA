"use strict";
var helpers = require('syracuse-core').helpers;
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var SingleArrayField = require("syracuse-ui/lib/field/array/singleArrayField").SingleArrayField;
var NavigationItemBuilder = require('syracuse-ui/lib/page/navigation/admin/navigationItemBuilder').NavigationItemBuilder;
var ReferenceField = require('syracuse-ui/lib/field/referenceField').ReferenceField;

function BookmarkMenuField() {}

helpers.defineClass(BookmarkMenuField, ReferenceField, {
	load: function() {
		this.$item.$isMenusHidden = true;
		this.$item.$skin = "s-admin-field";
		ReferenceField.prototype.load.call(this);
		this.onReorderItem(this.articleParent);
		this.articleParent.domItem.className += " " + this.$item.$skin + "-item";
	},
	onReorderItem: function(record) {

	},
	addValueSlot: function() {
		this._core = this._dataValue = this.domItem;
	},
	render: function() {
		this.codeMenu = this.page.addItem(this._dataValue, {
			$subRecordKey: this.$item.$bind,
			$css: this.$item.$css,
			$category: "link",
			$skin: this.$skin + "-link"
		}, this.boxParent);
		this.codeMenu.referenceField = this;

		syra_fields.setDescription(this, this.$item.$description || this.$field.$item.$description);
		this.currentValue && this._renderCurrentValue();
	},
	_renderCurrentValue: function() {
		if (this.codeMenu) {
			if (this.$menus && this.$menus.$details) {
				syra_menus.applyChange(this, {
					$links: {
						$details: {
							$title: this.currentValue.$value || "",
							$description: this.currentValue.$title || ""
						}
					}
				});
			}
			var value = syra_dataset.getFieldValue(this);
			if (value) {
				if (value.$url) {
					value.$title = value.$title || this.currentValue.$value || "";
					if (value.convergenceFunction) {
						value.$description = syra_local.nvpFunction + ": " + value.convergenceFunction;
					} else {
						if (value.entity) {
							value.$description = syra_local.nvpEntity + ": " + value.entity;
							if (value.entity != helpers.string.pluralize(value.representation || "")) {
								value.$description += " (" + syra_local.nvpRepresentation + ": " + value.representation + ")";
							}
						}
					}
					if (!value.$description) {
						value.$description = value.$description;
					}
					this.codeMenu.isBookmarkMenuField = true;
					this.codeMenu.setMenu(value, this.currentValue, this.currentValue);
					if (value.$hasSeparator) {
						this.articleParent.domItem.className += " s-separator";
					}
				}
			}
		}
	}
});



function BookmarksPage() {}

helpers.defineClass(BookmarksPage, DesktopPage, {
	load: function() {
		this.mainPageDesignerAccess = "unknow";
		DesktopPage.prototype.load.call(this);
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "items":
				var list = new SingleArrayField();
				$field.$builderClass = NavigationItemBuilder;
				list.isBookMarkList = true;
				list.$isMenuBarAtTop = true;
				list.columnsCount = 1;
				$item.$isPickerMenuHidden = true;
				$item.$isTopLabelAlignment = true;
				$item.$skin = "s-admin-items";
				list.$itemRecordMenuSkin = "s-admin-item-btn";
				return list;
			case "$singleField":
				switch ($item.$variantItemKey) {
					case "menuItem":
						return new BookmarkMenuField();
				}
				return null;
		}
		return null;
	},
	updateWorkingCopy: function() {
		syra_bookmarks.commit(syra_dataset.cleanServerIndex(syra_site.clone(this.dataset)));
	},
	onFormUpdateDelta: function() {
		this.updateWorkingCopy();
		return false;
	},
	onMenuClick: function(options) {
		if (options.menu.isBookmarkMenuField) {
			if (exports.onLinkClick(options.menu)) {
				this.overPanel && this.overPanel.close();
			}
			return false;
		}
		return true;
	},
	switchBookmarkEditTitle: function(record, isEdit) {
		var cell = record.singleField.variantItem.domItem;
		if (isEdit) {
			syra_dom.hide(cell, true);
			var slot = document.createElement("div");
			slot.className = cell.className;
			cell.parentNode.insertBefore(slot, cell);
			record.editTitleField = this.addItem(slot, {
				$category: "field",
				$isTitleHidden: true,
				$isTopLabelAlignment: false,
				$contentEditable: true,
				$isEditMode: true,
				$inplace: true,
				$css: "s-nav-admin-menu-edit",
				$field: {
					$isMandatory: true,
					$type: "application/x-string",
					$displayLength: 25
				}
			}, record);
			record.editTitleField.focus();
			record.editTitleField.setValue(syra_dataset.getFieldValue(record.singleField.variantItem).title);
		} else {
			syra_dom.hide(cell, false);
			if (record.editTitleField) {
				syra_item.remove(record.editTitleField, true, true);
				record.editTitleField = null;
			}
		}
		record.applyChange({
			$actions: {
				$edit: {
					$isHidden: isEdit
				},
				"$canceledit": {
					$title: syra_local.bookmarks_edit_close,
					$isHidden: !isEdit
				}
			}
		});
		if (isEdit) {
			var $edit = record.menuItems.$edit;
			if (record.menuItems.$canceledit) {
				record.menuItems.$edit[0].domItem.parentNode.insertBefore(record.menuItems.$canceledit[0].domItem, record.menuItems.$edit[0].domItem);
			}
		}
	}
});

exports.open = function(query) {
	var modal = syra_over.openModal(syra_site, {
		$itemPage: {
			$pageCategoryClass: BookmarksPage,
			$category: "page",
			$facet: "$bookmarks",
			$representation: {
				$prototype: {
					$type: "application/json",
					$title: syra_local.bookmarks_edit_title,
					$properties: {
						items: {
							$type: "application/x-array",
							$capabilities: "reorder",
							$links: {
								$select: {
									$title: "Add",
									$variants: {
										menuItem: {
											$title: syra_local.bookmarks_edit_select,
											$url: "/sdata/syracuse/collaboration/syracuse/menuItems?representation=menuItem.$select"
										}
									}
								}
							},
							$item: {
								$type: "application/x-variant",
								$variants: {
									menuItem: {
										$type: "application/x-reference",
										$capabilities: "reorder,delete",
										$item: {
											$value: "{title}",
											$key: "{$uuid}",
											$properties: {
												title: {
													$type: "application/x-string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				$article: {
					$layout: {
						$items: [{
							$layout: {
								$items: [{
									$isEditMode: true,
									$bind: "items",
									$layout: {
										$items: [{
											$bind: "menuItem"
										}]
									}
								}]
							}
						}]
					}
				}
			}
		}
	});
	modal.refresh = function(dataset) {
		this.page.applyChange({
			items: syra_site.clone(dataset.items)
		});
		this.resize();
	};
	return modal;
};