"use strict";
var helpers = require('syracuse-core/lib/helpers');

function FieldController(){
}

exports.FieldController = helpers.defineClass(FieldController, null, {
    changeType: function($newType, oldField){
        var article = oldField.getArticle();
        if (typeof($newType) == "string") {
            article.$prototype.$[oldField.$item.$bind].$type = $newType;
        }
        else {
            article.$prototype.$[oldField.$item.$bind] = $newType;
        }
        var newField = document.itemFactory.create(oldField.$item, oldField.boxParent);
        oldField.layoutParent.appendNewItem({
            newItem: newField,
            load: oldField.$$item != null,
            targetItem: oldField,
            action: "insertAfter"
        });
        var boundFields = article.boundFields[newField.$item.$bind];
        boundFields.splice(boundFields.indexOf(newField), 1);
        boundFields.splice(boundFields.indexOf(oldField), 1, newField);
        article.removeItem(oldField, true);
    },
    toggleEditMode: function(field, $isEditMode){
        if ($isEditMode === undefined) {
            $isEditMode = !field.$isEditMode;
        }
        if (field.$isEditMode != $isEditMode) {
            field.$isEditMode = field.$item.$isEditMode = $isEditMode;
            var $$newItem;
            if (field.$item.$inplace) {
                field.$$container.empty();
            }
            else {
                field.$$item.replaceWith($$newItem = $(document.createElement("div")));
            }
            field.releaseMode();
            field.loadBox($$newItem);
            
            field.setTitle(field.titleText);
            field.setDescription(field.$description);
            //field.setMenus(field.$help);
            field.setHelp(field.$help);
            field.setState(field);
            
        }
    },
    notifyChange: function(field, newValue, validated){
        field.currentValue = newValue;
        if (validated || this.validate(field)) {
            field.getPage().externalAdapter.onFieldNotifyChange({
                field: field,
                doEvent: function(){
                    document.controller.notifyChange(field.getArticle(), field.$item.$bind, field.currentValue);
                }
            });
        }
    },
    // FDB - Remove event parameter - Not used 
    getDataValue: function(field){
        return field.getInputValue ? field.getInputValue() : field.$$input.val();
    },
    onInputValidate: function(field, event){
        var newValue = this.getDataValue(field, event);
        if (newValue != field.currentValue) {
            this.notifyChange(field, newValue);
        }
    },
    onInputChange: function(field, $$input, event){
        if (field.$item.$validationTrigger !== 'keyup') {
            field.onInputValidate(event);
        }
    },
    onInputKeyup: function(field, $$input, event){
        if (field.$item.$validationTrigger == 'keyup' && event.keyCode == 13) {
            field.onInputValidate(event);
        }
    },
    validate: function(field, newValue, errors){
        if (field.$item.$isFilterMode) {
            return true;
        }
        var value = (newValue || field.currentValue).toString();
        var dataType = field.getDataType();
        errors = errors || [];
        if (dataType.$isMandatory && value == '') {
            errors.push("value is mandatory (client)");
        }
        if (dataType.$constraints) {
            if (dataType.$constraints.$pattern && value) {
                var match = new RegExp(dataType.$constraints.$pattern).test(value);
                if (!match) { //(match && match.index == 0 && match[0].length == value.length)) {
                    errors.push("invalid value : " + value);
                }
            }
        }
        
        if (field.validateType) {
            field.validateType(errors, value);
        }
        
        if (errors.length > 0 || field.$displayedDiagnoses) {
            field.applyMetaData({
                $diagnoses: null
            });
            field.$displayedDiagnoses = errors.map(function(error){
                return {
                    message: error,
                    severity: "error"
                };
            });
            if (field.$displayedDiagnoses.length > 0) {
                field.applyMetaData({
                    $diagnoses: field.$displayedDiagnoses
                });
            }
            var saveLinks = field.getArticle().menuItems.$save;
            if (saveLinks && saveLinks.length > 0) {
                if (!saveLinks[0].$isDisabled) {
                    field.$isServerSaveEnabled = true;
                }
                else {
                    if (field.$isServerSaveEnabled) {
                        field.$isServerSaveEnabled = false;
                    }
                }
                if (field.$isServerSaveEnabled !== undefined) {
                    field.getArticle().applyChange({
                        $actions: {
                            $save: {
                                $isDisabled: field.$isServerSaveEnabled
                            }
                        }
                    });
                }
            }
        }
        return errors.length == 0;
    },
    clickLookUp: function(field){
        var article = field.getArticle();
        field.focus();
        field.boxParent.openDialog({
            article: article,
            $url: field.$field.$links.$lookup.$url,
            onSelectRecord: function(selectedRecords){
                if (!field.$isDisabled && !field.$isReadOnly) {
                    var $result = field.$field.$links.$lookup.$result;
                    var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
                    field.setDataValue($result ? record.dataset[$result] : record.dataset);
                    field.focus();
                    document.fieldController.notifyChange(field, field.currentValue);
                }
            }
        });
    }
});
