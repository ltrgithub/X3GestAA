"use strict";
var helpers = require('syracuse-core/lib/helpers');
var localize = require('./localize');

var _requestControllers = {
    http: require("./httpController"),
    excel: require("syracuse-ui/lib/office/excel/excelRequest")
};

function Controller(){
}

exports.Controller = helpers.defineClass(Controller, null, {
    initialize: function(){
        this._articles = {};
        this.localize = localize;
    },
    generateUUID: function(){
        return helpers.uuid.generate();
    },
    startNavigation: function(){
        var self = this;
        //load representation of url
        self._changeMainPage(document.location.href);
        //listen history change
        window[window.history.pushState ? "onpopstate" : "onhashchange"] = function(event){
            if (self.$updateHitory) {
                self.$updateHitory = false;
            }
            else {
                //if (document.location.href.indexOf("#&ui-state=dialog") < 0)
                self._changeMainPage(document.location.href);
            }
        };
    },
    _changeMainPage: function(url){
        var self = this;
        if (!window.history.pushState) {
            var hash = url.indexOf("#");
            if (hash >= 0) {
                var urlPath = url.slice(0, hash);
                if (urlPath.indexOf("?") >= 0) {
                    urlPath = urlPath.slice(0, urlPath.indexOf("?"));
                }
                url = urlPath + window.unescape(url.slice(hash + 1));
            }
            else {
                if (url.indexOf("?") < 0) {
                    //add default homepage
                }
            }
            
        }
        if (self._currentUrl != url) {
            var urlParam = url.search(/\?url=/i);
            if (urlParam >= 0) {
                url = decodeURIComponent(url).slice(urlParam + ("?url=").length);
            }
            self._currentUrl = url;
            var initData = self._preLoadedData;
            self._preLoadedData = null; //!important release buffer
            var httpQuery = self.parseUrl(self._currentUrl);
            if (httpQuery.$urlParts.isFusion) {
                //Temp mettre show diagnose dans site
                document.site.showDiagnoses({
                    $diagnoses: [{
                        message: "Can't display directly a Fusion page",
                        severity: "error"
                    }]
                });
                document.site.openHomeLink();
            }
            else {
                self.loadRepresentation(null, httpQuery, function($itemPage){
                    $itemPage.initData = initData;
                    document.site.onMainPageChange($itemPage);
                });
            }
        }
    },
    parseUrl: function($url){
        //        return httpController.parseUrl($url);
        var ctrl = _requestControllers[$url.split(":")[0]] || _requestControllers.http;
        return ctrl.parseUrl($url);
    },
    loadRepresentation: function(article, httpQuery, success, onError, onBeforeOpen){
        var self = this;
        var httpQuery, $representationUrl;
        if (typeof(httpQuery) == "string") {
            if (article) {
                httpQuery = article.parseExpression(httpQuery);
            }
            this.loadRepresentation(article, self.parseUrl(httpQuery), success, onError, onBeforeOpen);
        }
        else {
            $representationUrl = httpQuery.$url;
            //xhr.withCredentials = true;
            self.parseUrl((article || document.site).parseExpression(httpQuery.getPageTemplateUrl(), {
                representation: httpQuery.$urlParts.params.representation,
                endpoint: httpQuery.$urlParts.endpoint,
                target: httpQuery.$urlParts.target
            })).sendRequest(null, function($representation){
                self._openLoadedRepresentation($representation, success, $representationUrl, httpQuery, onError, onBeforeOpen);
            }, onError);
        }
    },
    _openLoadedRepresentation: function($representation, success, $representationUrl, httpQuery, onError, onBeforeOpen){
        var self = this;
        if (typeof($representation.$prototype) == "string") {
            self.parseUrl($representation.$prototype).sendRequest(null, function($prototype){
                $representation.$prototype = $prototype;
                self._openLoadedRepresentation($representation, success, $representationUrl, httpQuery, onError, onBeforeOpen);
            }, onError);
        }
        else {
            $representation.$prototype = $representation.$prototype || {};
            if (document.site.userProfile) {
                document.site.userProfile.decoratePrototype($representation.$prototype);
            }
            $representation.$prototype.$representationUrl = $representationUrl;
            if (onBeforeOpen) {
                onBeforeOpen($representation);
            }
            success({
                $urlParts: httpQuery.$urlParts,
                $representation: $representation
            });
        }
    },
    openPopup: function(article, menu){
        if (!menu.popup) {
            this.loadRepresentation(article, menu.$url, function($itemPage){
                var $$popup = $("<div/>");
                var css = menu.$item.$skin + "-popup";
                $$popup[0].className = css;
                var style = $$popup[0].style;
                style.display = "none";
                style.position = "absolute";
                var zIndex = menu.$$item.css("z-index");
                style.zIndex = ((!zIndex || zIndex == "auto") ? "1000" : zIndex) + 100;
                $itemPage.$$container = $$popup;
                $itemPage.$displayTarget = "popup";
                menu.popupPage = document.itemFactory.loadPage($itemPage);
                menu.$$item.toggleClass("s-open", true);
                $$popup.append($("<div/>").addClass(css + "-bubble"));
                menu.popup = document.site.createPopup({
                    page: article.getPage(),
                    $$popup: menu.popupPage.$$container,
                    position: {
                        my: "left top",
                        at: "left bottom",
                        of: menu.$$item
                    },
                    closeHandler: function(){
                        setTimeout(function(){
                            menu.$$item.toggleClass("s-open", false);
                            document.controller.disposeObject(menu.popupPage);
                            menu.popup = null;
                        }, 200);
                        return true;
                    },
                    boundarySelector: "#" + menu.id
                });
            });
        }
        else {
            menu.popup.close();
        }
    },
    sendRequest: function(page, options, onSuccess, onError){
        var self = this;
        options = options || {};
        if (options.$location = (options.$location ||
        {
            $url: page.$prototype.$representationUrl
        })) 
            if (options.$location.$url) {
                var httpQuery = self.parseUrl(options.$location.$url);
                if (options.$location.$type) {
                    options.$acceptType = options.$location.$type;
                }
                if (options.$location.$contentType) {
                    options.$contentType = options.$location.$contentType;
                }
                httpQuery.sendRequest(options, function(data, response, requestUrl){
                    if (onSuccess) {
                        onSuccess(data, response, requestUrl);
                    }
                    else {
                        page.applyChange(data, response, requestUrl);
                    }
                    if (options.$updateHitory) {
                        var httpQuery = self.parseUrl("?url=" + encodeURIComponent(requestUrl));
                        if (window.history.pushState) {
                            window.history.replaceState("$updateHitory", httpQuery.$url, httpQuery.$url);
                        }
                        else {
                            self.$updateHitory = true;
                            window.location.hash = "#" + window.escape(httpQuery.$url);
                        }
                    }
                }, onError);
            }
        
    },
    openPage: function(menuArticle, menu, record){
        switch (menu.$target) {
            case "popup":
                this.openPopup(menuArticle, menu);
                break;
            default:
                var httpQuery = this.parseUrl(menuArticle.parseExpression(menu.$url || null, record));
                httpQuery.$type = menu.$type;
                httpQuery.$target = menu.$target;
                if (httpQuery.isSyracuseURL()) {
                    if (menu.$type && menu.$type.indexOf("json") == -1) {
                        httpQuery.$target = "blank";
                    }
                    else {
                        if (menu.boxParent) {
                            var page = menu.boxParent.getArticle().getPage();
                            if (page && page.$displayTarget == "modal") {
                                httpQuery.$target = "blank";
                            }
                        }
                        
                        if (!httpQuery.$urlParts.isFusion && menu.$tags != "MOB") { //MOB=temp voir Bruno utilisï¿½ dans dashboard mobilehome
                            httpQuery.parse("?url=" + encodeURIComponent(httpQuery.$url));
                        }
                    }
                    
                }
                else {
                    httpQuery.$target = "blank";
                }
                this._openMainPage(httpQuery);
                break;
        }
    },
    _openMainPage: function(httpQuery){
        if (httpQuery.$target == "blank") {
            window.open(httpQuery.$url, "_blank");
        }
        else {
            if (httpQuery.$urlParts.isFusion) {
                this.fusionGateway.openMainPage(httpQuery)
            }
            else {
                if (window.history.pushState) {
                    window.history.pushState("", httpQuery.$url, httpQuery.$url);
                    this._changeMainPage(httpQuery.$url);
                }
                else {
                    window.location.hash = "#" + window.escape(httpQuery.$url);
                }
            }
        }
    },
    loadWorkingCopy: function(options){
        var self = this;
        self._postQuery(options.menu, options.record || null, null, function($location, data){
            if (options.menuArticle) {
                var httpQuery = self.parseUrl("?url=" + encodeURIComponent($location.$url = options.menuArticle.parseExpression($location.$url)));
                httpQuery.$type = options.menu.$type;
                self._preLoadedData = (options.menu.$method != "DELETE") ? data : null;
                self._openMainPage(httpQuery);
            }
            else {
                self.loadRepresentation(null, $location.$url, function($itemPage){
                    options.article.$prototype = $itemPage.$representation.$prototype;
                    document.itemFactory.initializeItem(options.article, {});
                    options.article.loadBox(data);
                    if (options.callback) {
                        options.callback($itemPage, $location, data);
                    }
                });
            }
        });
    },
    _postQuery: function(menu, record, article, callback){
        var menuArticle = article;
        if (!menuArticle && menu.getArticle) {
            menuArticle = menu.getArticle();
        }
        if (!menuArticle) {
            menuArticle = document.site; //a ameliorer
        }
        menu.$method = menu.$method || "POST";
        menu.$url = menuArticle.parseExpression(menu.$url, record);
        
        this.sendRequest(menuArticle, {
            $location: menu,
            params: {
                trackingId: this.generateUUID()
            },
            data: {},
            method: menu.$method
        }, function(data, response){
            var $location = {
                $url: response.headers.location,
                type: ""
            };
            if ($location.$url) {
                $location.$type = response.headers["content-type"];
            }
            else {
                $location.$url = response.data.$url || menu.$url;
                $location.$type = response.data.$type || menu.$type;
            }
            callback($location, response.data)
        });
    },
    /**** Menu management ****/
    bindMenuClick: function($$site){
        var self = this;
        $$site.delegate("a[data-s-menu]", "click", function(event){
            var $$menu = $(this);
            var menu = self.findItem($$menu);
            if (!menu) {
                throw new Error("menu not found"); // to manage by
                // diagnose
            }
            if (!menu.$isDisabled) {
                if ($$menu.attr("data-s-more")) {
                    menu.toggleMore($$menu);
                }
                else {
                    menu.click();
                }
            }
            return false;
        });
    },
    executeMenu: function(menu, record, article, confirmed){
        var self = this;
        var menuArticle = article || menu.getArticle();
        if (!confirmed && menu.$confirm) {
            document.site.showMessage({
                $title: menu.$title || "Confirm",
                $message: menuArticle.parseExpression(menu.$confirm),
                $type: "question",
                callback: function(response){
                    if (response.$id === "yes") {
                        self.executeMenu(menu, record, article, true);
                    }
                }
            });
            return;
        }
        if (menu.$isAction) {
            var toRequest = {};
            toRequest[menu.$item.$bind] = {
                $isRequested: true
            };
            if(menu.$properties && menu.$properties.$select) {
                document.controller.loadRepresentation(menuArticle, menu.$properties.$select.$url, function($itemPage){
                    $itemPage.$$container = $(document.createElement("div"));
                    $itemPage.$displayTarget = "modal";
                    self.lookupPage = document.itemFactory.loadPage($itemPage);
                    self.lookupPage.appendOkButton();
                    self.lookupPage.onClose = function(){
                        self.lookupPage.$$container.remove();
                        document.controller.disposeObject(self.lookupPage);
                        self.lookupPage = null;
                        return false;
                    };
                    self.lookupPage.onSelectRecord = function(selectedRecords){
                        toRequest[menu.$item.$bind].$properties = {
                        	$select: Object.keys(selectedRecords).map(function(rec) {
                        		var sel = menu.$properties.$select.$selectField;
								if(sel) {
									var res = {};
									res[sel] = selectedRecords[rec].dataset[sel];
									return res;
								} else		
									return { $uuid: rec };
                        	})
                        };
                    }, self.lookupPage.onValidate = function(page){
                    	if(toRequest[menu.$item.$bind].$properties && toRequest[menu.$item.$bind].$properties.$select && toRequest[menu.$item.$bind].$properties.$select.length)
                        	self.notifyChange(menuArticle, "$actions", toRequest);
                    	self.lookupPage.onClose();
                        return false;
                    };
                });
            } else
            	self.notifyChange(menuArticle, "$actions", toRequest);
        }
        else {
            if (menu.$method && (menu.$method != "GET")) {
                self.loadWorkingCopy({
                    menu: menu,
                    menuArticle: menuArticle,
                    record: record,
                    article: article
                });
            }
            else {
                self.openPage(menuArticle, menu, record);
            }
        }
    },
    notifyChange: function(article, binding, value){
        var self = this;
        var data = {};
        if (article.dataset && article.dataset.$uuid) {
            data.$uuid = article.dataset.$uuid;
        }
        if (article.onNotifyRecordChange) {
            data = article.onNotifyRecordChange(value, binding);
        }
        else {
            data[binding] = value;
        }
        if (data) { //data == null =>onNotifyRecordChange disable notify
            var articleParent = article.getArticleParent();
            if (articleParent) {
                self.notifyChange(articleParent, article.$item.$bind, data);
            }
            else {
                data.$url = article.$prototype.$representationUrl;
                if (article.$prototype.$representationUrl) {
                    data.$url = article.$prototype.$representationUrl;
                    data.$etag = article.dataset.$etag;
                    self.sendRequest(article, {
                        data: data,
                        method: "PUT",
                        $etag: data.$etag
                    });
                }
            }
        }
    },
    /**** File management ****/
    upload: function(file, url, article, requestCallback, progressCallback){
        _requestControllers.http.upload({
            file: file,
            url: article.parseExpression(url),
            //            contentType: "image"
            contentType: file.type
        }, requestCallback, progressCallback);
    },
    deleteFile: function(url, article, callback){
        var httpQuery = this.parseUrl(article.parseExpression(url));
        httpQuery.sendRequest({
            method: "DELETE"
        }, function(data, response){
            if (callback) {
                callback(data, response);
            }
            else {
                page.applyChange(data, response);
            }
        });
    },
    
    /**** Article management ****/
    registerArticle: function(article){
        this._articles[article.id] = article;
    },
    removeArticle: function(article){
        delete this._articles[article.id];
    },
    findItem: function($$item){
        var article = this._articles[$$item.attr("data-s-article")];
        return article ? article.idMap[$$item.attr("data-s-menu") || $$item.attr("data-s-item")] : null;
    },
    disposeObject: function(instance){
        var self = this;
        if (instance) {
            if (!instance.disposed) {
                if (instance.dispose) {
                    instance.dispose();
                    //ensure factory free to avoid recursive call
                    //delete instance.sourceDispose;
                    delete instance.layoutParent;
                    delete instance.authoringNode;
                    delete instance.boxParent;
                }
                Object.keys(instance).forEach(function(prop){
                    var field = instance[prop];
                    if (field && field.dispose) {
                        //field.sourceDispose = instance;
                        //field.sourceDisposeProp = prop;
                        self.disposeObject(field);
                    }
                    delete instance[prop];
                });
                instance.disposed = true;
            }
            else {
                //console.log("instance already disposed");
            }
        }
    },
    dispose: function(){
    
    }
});
