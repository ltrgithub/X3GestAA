"use strict";
var helpers = require("syracuse-core/lib/helpers")
var Article = require("syracuse-ui/lib/common/article/article").Article;

function JsonPageViewer(){
}

exports.JsonPageViewer = helpers.defineClass(JsonPageViewer, Article, {
    loadBox: function($fieldsPrototype, initData){
        var self = this;
        self.$prototype = {
            "$properties": {
                $data: {
                    $title: "json data",
                    $type: "application/x-string"
                },
                $facet: {
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-string",
                        
                            $enum: [{
                                $value: "$details",
                                $title: "$details"
                            }, {
                                $value: "$edit",
                                $title: "$edit"
                            }, {
                                $value: "$dashboard",
                                $title: "$dashboard"
                            }, {
                                $value: "$query",
                                $title: "$query"
                            }]
                        }
                },
            },
            $facet: "$edit",
            $actions: {
                $convert: {
                    $title: "load json page"
                }
            }
        };
        self.$item = {
            $isSeparatorsVisible: true,
            $layout: {
                $items: [{
                    $category: "section",
                    $isBoxCollapsable: true,
                    $title: "Fields ($isEditMode: true / $isEditMode: false)",
                    $layout: {
                        $items: [{
                            $isEditMode: true,
                            $bind: "$data",
                            $rows: 20
                        }, {
                            $isEditMode: true,
                            $bind: "$facet",
                            $rows: 20
                        }, {
                            $category: "link",
                            $bind: "$convert"
                        }]
                    }
                }, {
                    $category: "section",
                    $title: "Result Page",
                    $id: "resultPage",
                    $layout: {
                        $items: []
                    }
                }]
            }
        };
        Article.prototype.loadBox.call(self, initData);
    },
    
    onNotifyRecordChange: function(value, binding){
        var self = this;
        switch (binding) {
            case "$actions":
                if (value.$convert) {
                    var $representation = self.boundFields.$data[0].getDataValue();
                    if ($representation) {
                        var $representation = JSON.parse($representation);
                        if (!$representation.$prototype) {
                            $representation.$prototype = $representation;
                        }
                        document.itemFactory.loadPage({
                            $$container: self.idMap["resultPage"].$$body.empty(),
                            $representation: $representation,
                            $urlParts: {
                                $facet: self.boundFields.$facet[0].getDataValue()
                            },
                            $category: "page"
                        });
                    }
                    
                }
                break;
                
        }
        return null; //cancel notify
    },
    applyFieldMetaData: function(binding, value, $field){
        var self = this;
        $field = $field || self.get$Properties()[binding];
        binding = binding.replace("$field", "");
        var metaData = {};
        metaData[binding] = value;
        /*Object.keys(self.boundFields).forEach(function(bind){
         if (bind.indexOf("$field") != 0) {
         self.boundFields[bind].forEach(function(field){
         if ($field.$isMetaData) {
         field.applyMetaData(metaData);
         }
         else {
         field.applyDesignMetaData(metaData, true);
         }
         });
         }
         });*/
    }
});
