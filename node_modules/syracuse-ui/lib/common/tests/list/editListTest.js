"use strict";
var helpers = require("syracuse-core/lib/helpers")
var FieldsTest = require("../fieldsTest").FieldsTest;
var resources = require("./resources");
function EditListTest(){
}

exports.EditListTest = helpers.defineClass(EditListTest, FieldsTest, {
    loadBox: function(){
        var $prototype = {
            "$": {
                "application/x-collection": {
                    "$title": "application/x-collection",
                    "$capabilities": "sort,filter,insert,append,delete,reorder",
                    "$type": "application/x-collection",
                    "$itemsPerPage": 5,
                    "$item": {
                        "$descriptor": "prototype employee.$edit",
                        "$type": "application/json",
                        "$pluralType": "children",
                        "$representation": "employee",
                        "$": {
                            "application/x-string": {
                                "$title": "x-string",
                                "$type": "application/x-string",
                                "$constraints": {
                                    "$maxLength": 30
                                },
                                "$capabilities": "sort,alphaTab"
                            },
                            "application/x-choice": {
                                $title: "application/x-choice",
                                $type: "application/x-choice",
                                $value: {
                                    $type: "application/x-integer",
                                    $constraints: {
                                        $enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value){
                                            return {
                                                "$value": value,
                                                $title: "Value " + value
                                            };
                                        })
                                    }
                                }
                            },
                            "application/x-date": {
                                $title: "x-date",
                                $type: "application/x-date"
                            },
                            "application/x-boolean": {
                                $title: "application/x-boolean",
                                $type: "application/x-boolean"
                            },
                            "application/x-decimal": {
                                $title: "application/x-decimal",
                                $type: "application/x-decimal",
                                $constraints: {
                                    "$isNullable": true
                                }
                            }
                        },
                        "$links": {},
                        "$actions": {
                            "$delete": {
                                "$title": "Supprimer",
                                "$method": "PUT"
                            }
                        }
                    },
                    "$actions": {
                        "$create": {
                            "$title": "Ajouter",
                            "$method": "PUT"
                        }
                    }
                }
            
            }
        };
        this._appendCapabilities($prototype);
        FieldsTest.prototype.loadBox.call(this, $prototype, {
            "application/x-collection": resources.getRecords(8),
            "$field$capabilityInsert": true,
            "$field$capabilityDelete": true,
            "$field$capabilityAppend": true,
            "$field$capabilityReorder": true
        });
    },
    _makeBlock: function($isEditMode){
        return [this._makeEditReadBlock("application/x-collection", [{
            $bind: "application/x-collection"
        }, {
            $bind: "application/x-collection",
            $format: "vgrid",
        }, {
            $bind: "application/x-collection",
            $format: "cards",
            $cards: {
                $layout: {
                    $items: [{
                        $layoutType: "columns",
                        $layoutSubType: "50,50",
                        $items: [{
                            $layoutType: "stack",
                            $items: [{
                                $bind: "application/x-string"
                            }]
                        }, {
                            $layoutType: "stack",
                            $items: [{
                                $bind: "application/x-choice"
                            }]
                        }]
                    }, {
                        $layoutType: "tabs",
                        $items: [{
                            $category: "block",
                            $title: "tab1",
                            $layout: {
                                $items: [{
                                    $bind: "application/x-date"
                                }]
                            }
                        
                        }, {
                            $category: "block",
                            $title: "tab2",
                            $layout: {
                                $items: [{
                                    $bind: "application/x-boolean"
                                }, {
                                    $bind: "application/x-decimal"
                                }]
                            }
                        
                        }]
                    }]
                
                }
            
            }
        }])];
    },
    appendSettingsBar: function(){
        return {
            $layoutType: "tabs",
            $items: [this._appendCapabilities(), FieldsTest.prototype.appendSettingsBar.call(this)]
        };
    }
});
