"use strict";
var helpers = require("syracuse-core/lib/helpers")
var Article = require("syracuse-ui/lib/common/article/article").Article;

function LayoutTest(){
}

exports.LayoutTest = helpers.defineClass(LayoutTest, Article, {
    loadBox: function(){
        var self = this;
        self.$prototype = {
            "$": {
                $field$isHidden: {
                    $type: "application/x-boolean",
                    $title: "$isHidden",
                    $isMetaData: true
                },
                $field$isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: "$isTitleHidden",
                    $isMetaData: true
                },
                $field$isBoxCollapsable: {
                    $type: "application/x-boolean",
                    $title: "$isBoxCollapsable",
                    $isMetaData: true
                },
                $field$isMaximizable: {
                    $type: "application/x-boolean",
                    $title: "$isMaximizable ",
                    $isMetaData: true
                }
            },
            $actions: {
                $startMacro: {
                    $title: "Start"
                }
            },
        };
        
        self.$item = {
            $skin: "s-portlet",
            $isSeparatorsVisible: true,
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "70,30",
                $items: [{
                    $layoutType: "stack",
                    $items: ["Page", "Dashboard", "Portlet"].map(function($title){
                        var $layoutOptions = document.site.$item.$layoutOptions.page[$title.toLowerCase()];
                        return {
                            $layoutType: "columns",
                            $layoutSubType: "33,33,33",
                            $items: [["stack", null, null], ["stack", "columns", "tabs"], ["tabs", "tabs", null]].map(function($layouts){
                                return {
                                    $layoutType: $layouts[0],
                                    $items: [self._makeLevelPart($title, $layoutOptions, $layouts[1]), self._makeLevelPart($title, $layoutOptions, $layouts[2])]
                                };
                            })
                        };
                    })
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $category: "link",
                        $bind: "$startMacro"
                    }, {
                        $category: "section",
                        $title: "Status",
                        $layout: {
                            $items: [{
                                $category: "block",
                                $title: "Metadata",
                                $layout: {
                                    $items: [{
                                        $bind: "$field$isHidden",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$isTitleHidden",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$isBoxCollapsable",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$isMaximizable",
                                        $isEditMode: true
                                    }]
                                }
                            }]
                        }
                    }]
                }]
            }
        };
        Article.prototype.loadBox.call(self);
    },
    notifyField: function($bind, value){
        this.onNotifyRecordChange(value, $bind);
    },
    
    onNotifyRecordChange: function(value, binding){
        var self = this;
        if (binding == "$actions") {
            self.notifyField("$field$isHidden", true);
            setTimeout(function(){
                self.notifyField("$field$isHidden", false);
                self.notifyField("$field$isTitleHidden", true);
                setTimeout(function(){
                    self.notifyField("$field$isTitleHidden", false);
                    self.notifyField("$field$isBoxCollapsable", true);
                    setTimeout(function(){
                        self.notifyField("$field$isBoxCollapsable", false);
                        self.notifyField("$field$isMaximizable", true);
                    }, 2000);
                }, 2000);
            }, 2000);
        }
        else {
            if (binding.indexOf("$field") == 0) {
                var $field = self.$prototype.$[binding];
                binding = binding.replace("$field", "");
                var metaData = {};
                metaData[binding] = value;
                Object.keys(self.idMap).forEach(function(id){
                    var box = self.idMap[id];
                    if (box.$item.$test) {
                        box.applyDesignMetaData(metaData, true);
                    }
                });
            }
        }
        return null; //cancel notify
    },
    _makeLevelPart: function($title, $layoutOptions, $layoutType){
        var section = {
            $category: "section",
            $test: true,
            $skin: $layoutOptions.section,
            $title: "Section " + $title,
            $layout: {
                $layoutType: $layoutType || "stack",
                $items: [{
                    $category: "block",
                    $test: true,
                    $skin: $layoutOptions.block,
                    $title: "Block " + $title,
                    $layout: {
                        $items: []
                    }
                }, {
                    $category: "block",
                    $test: true,
                    $skin: $layoutOptions.block,
                    $title: "Block " + $title,
                    $layout: {
                        $items: []
                    }
                }]
            }
        };
        if ($layoutType == "columns") {
            var oldLayout = section.$layout;
            section.$layout = {
                $layoutType: "columns",
                $layoutSubType: "50,50",
                $items: [{
                    $layoutType: "stack",
                    $items: [oldLayout.$items[0]]
                }, {
                    $layoutType: "stack",
                    $items: [oldLayout.$items[1]]
                }]
            };
        }
        return section
    },
    _makeLevelTab: function($title, $items){
        return {
            $layoutType: "tabs",
            $items: [this._makeLevelPart(), this._makeLevelPart()]
        };
    }
});
