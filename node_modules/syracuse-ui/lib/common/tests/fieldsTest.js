"use strict";
var helpers = require("syracuse-core/lib/helpers")
var Article = require("syracuse-ui/lib/common/article/article").Article;

function FieldsTest(){
}

exports.FieldsTest = helpers.defineClass(FieldsTest, Article, {
    loadBox: function($fieldsPrototype, initData){
        var self = this;
        self.$layoutOptions = document.site.$item.$layoutOptions.page["vignette"];
        self.$prototype = {
            "$": {
                $field$type: {
                    $title: "$type",
                    $isMetaData: true,
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "application/x-string",
                                $title: "application/x-string"
                            }, {
                                $value: "$email",
                                $title: "$email"
                            }, {
                                $value: "$phone",
                                $title: "$phone"
                            }, {
                                $value: "application/x-date",
                                $title: "application/x-date"
                            }, {
                                $value: "application/x-time",
                                $title: "application/x-time"
                            }, {
                                $value: "application/x-datetime",
                                $title: "application/x-datetime"
                            }, {
                                $value: "application/x-integer",
                                $title: "application/x-integer"
                            }, {
                                $value: "application/x-decimal",
                                $title: "application/x-decimal"
                            }, {
                                $value: "application/x-boolean",
                                $title: "application/x-boolean"
                            }]
                        }
                    }
                },
                $field$isDiagnoses: {
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "full",
                                $title: "error, warning, info"
                            }, {
                                $value: "error",
                                $title: "default error"
                            }, {
                                $value: "clear",
                                $title: "clear"
                            }, ]
                        }
                    }
                },
                $field$isDiagnoseViewerHidden: {
                    $type: "application/x-boolean",
                    $title: "hide Diagnose Viewer",
                    $isMetaData: true
                },
                $field$description: {
                    $type: "application/x-boolean",
                    $title: "$description",
                    $isMetaData: true
                },
                $field$help: {
                    $type: "application/x-boolean",
                    $title: "$help",
                    $isMetaData: true
                },
                $field$isReadOnly: {
                    $type: "application/x-boolean",
                    $title: "$isReadOnly",
                    $isMetaData: true
                },
                $field$isEditMode: {
                    $type: "application/x-boolean",
                    $title: "$isEditMode",
                    $isMetaData: true
                },
                $field$isHidden: {
                    $type: "application/x-boolean",
                    $title: "$isHidden",
                    $isMetaData: true
                },
                $field$isDisabled: {
                    $type: "application/x-boolean",
                    $title: "$isDisabled",
                    $isMetaData: true
                },
                $field$isMandatory: {
                    $type: "application/x-boolean",
                    $title: "$isMandatory",
                    $isMetaData: true
                },
                $field$width: {
                    $type: "application/x-choice",
                    $title: "$width",
                    $value: {
                        $type: "application/x-string",
                        $constraints: {
                            $enum: [{
                                $value: "content",
                                $title: "content"
                            }, {
                                $value: "small",
                                $title: "small"
                            }, {
                                $value: "medium",
                                $title: "Medium"
                            }, {
                                $value: "large",
                                $title: "large"
                            }, {
                                $value: "fit",
                                $title: "fit"
                            }]
                        }
                    }
                },
                $field$isTopLabelAlignment: {
                    $type: "application/x-boolean",
                    $title: "$isTopLabelAlignment"
                },
                $field$isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: "$isTitleHidden"
                },
                $field$isRightTextLabelAlignment: {
                    $type: "application/x-boolean",
                    $title: "$isRightTextLabelAlignment"
                }
            
            },
            $actions: {
                $startMacro: {
                    $title: "Start"
                }
            },
        };
        Object.keys($fieldsPrototype).forEach(function($prop){
            if ($prop == "$") {
                Object.keys($fieldsPrototype.$).forEach(function($prop){
                    self.$prototype.$[$prop] = $fieldsPrototype.$[$prop];
                });
            }
            else {
                self.$prototype[$prop] = $fieldsPrototype[$prop];
            }
            
            
        });
        self.$item = {
            $isSeparatorsVisible: true,
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "70,30",
                $items: [{
                    $layoutType: "stack",
                    $items: [{
                        $category: "section",
                        $title: "Fields ($isEditMode: true / $isEditMode: false)",
                        $layout: {
                            $items: self._makeBlock(true)
                        }
                    }]
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $category: "link",
                        $bind: "$startMacro"
                    }, {
                        $category: "section",
                        $title: "Status",
                        $layout: {
                            $items: [{
                                $category: "block",
                                $title: "Metadata",
                                $layout: {
                                    $items: [{
                                        $bind: "$field$description",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$isHidden",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$isDisabled",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$isMandatory",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$help",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$isEditMode",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$isReadOnly",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$type",
                                        $isEditMode: true
                                    }]
                                }
                            }, {
                                $category: "block",
                                $title: "Design Propeties",
                                $layout: {
                                    $items: [{
                                        $bind: "$field$width",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$isTopLabelAlignment",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$isTitleHidden",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$isRightTextLabelAlignment",
                                        $isEditMode: true
                                    }]
                                }
                            }, {
                                $category: "block",
                                $title: "$diagnoses",
                                $layout: {
                                    $items: [{
                                        $bind: "$field$isDiagnoses",
                                        $choiceLayout: "1",
                                        $isEditMode: true
                                    }, {
                                        $bind: "$field$isDiagnoseViewerHidden",
                                        $isEditMode: true
                                    }]
                                }
                            }]
                        }
                    }]
                }]
            }
        };
        Article.prototype.loadBox.call(self, initData);
    },
    notifyField: function($bind, value){
        var field = this.boundFields[$bind][0];
        field.setDataBind(value);
        document.fieldController.notifyChange(field, value, true);
    },
    onNotifyRecordChange: function(value, binding){
        var self = this;
        switch (binding) {
            case "$actions":
                self.notifyField("$field$isHidden", true);
                setTimeout(function(){
                    self.notifyField("$field$isHidden", false);
                    self.notifyField("$field$isDisabled", true);
                    self.notifyField("$field$isMandatory", true);
                    setTimeout(function(){
                        self.notifyField("$field$isDisabled", false);
                        self.notifyField("$field$isTitleHidden", true);
                        setTimeout(function(){
                            self.notifyField("$field$isTitleHidden", false);
                            self.notifyField("$field$isRightTextLabelAlignment", true);
                            setTimeout(function(){
                                self.notifyField("$field$isRightTextLabelAlignment", false);
                                self.notifyField("$field$isTopLabelAlignment", true);
                                setTimeout(function(){
                                    self.notifyField("$field$isTopLabelAlignment", false);
                                    
                                }, 2000);
                            }, 2000);
                        }, 2000);
                    }, 2000);
                }, 2000);
                break;
            case "$field$type":
                switch (value) {
                    case "$email":
                        value = {
                            $title: "$format: $email",
                            $type: "application/x-string",
                            $format: "$email"
                        
                        };
                        break;
                    case "$phone":
                        value = {
                            $title: "$format: $phone",
                            $type: "application/x-string",
                            $format: "$phone"
                        };
                        break;
                    default:
                        value = {
                            $title: value,
                            $type: value
                        };
                        break;
                }
                self.applyFieldMetaData(binding, value);
                break;
            case "$field$help":
                self.applyFieldMetaData(binding, value ? "description dqdfsdhfdlsk fdqsmf,qsdmfmqsdj fmsdfmqsdf fmsdmdlsjgq" : null);
                break;
            case "$field$description":
                self.applyFieldMetaData(binding, value ? "description dqdfsdhfdlsk fdqsmf,qsdmfmqsdj fmsdfmqsdf fmsdmdlsjgq" : null);
                break;
            case "$field$isDiagnoseViewerHidden":
                if (self.isDiagnoseViewerHidden = value) {
                    if (document.site._diagnoseViewer && document.site._diagnoseViewer.$$item) {
                        document.site._diagnoseViewer.$$item.hide();
                    }
                }
                break;
            case "$field$isDiagnoses":
                Object.keys(self.boundFields).forEach(function(bind){
                    var metaData = {};
                    if (value == "clear") {
                        metaData.$diagnoses = null;
                    }
                    else {
                        metaData.$diagnoses = [{
                            severity: "error",
                            message: "Error test  blalfozf f;zeapfazfg fzefazeazertaze rzererzer rzerazerazerz Errror testfin"
                        }];
                        if (value == "full") {
                            metaData.$diagnoses.push({
                                severity: "warning",
                                message: "Warning test  blalfozf f;zeapfazfg fzefazeazertaze rzererzer rzerazerazerz Warning testfin"
                            });
                            metaData.$diagnoses.push({
                                severity: "info",
                                message: "Info test  blalfozf f;zeapfazfg fzefazeazertaze rzererzer rzerazerazerz Info testfin"
                            });
                        }
                    }
                    if (bind.indexOf("$field") != 0) {
                        self.boundFields[bind].forEach(function(field){
                            field.applyMetaData(metaData);
                        });
                    }
                });
                if (self.isDiagnoseViewerHidden) {
                    document.site._diagnoseViewer.$$item.hide();
                }
                break;
            default:
                if (binding.indexOf("$field") == 0) {
                    self.applyFieldMetaData(binding, value);
                }
                break;
        }
        return null; //cancel notify
    },
    applyFieldMetaData: function(binding, value){
        var self = this;
        var $field = self.$prototype.$[binding];
        binding = binding.replace("$field", "");
        var metaData = {};
        metaData[binding] = value;
        Object.keys(self.boundFields).forEach(function(bind){
            if (bind.indexOf("$field") != 0) {
                self.boundFields[bind].forEach(function(field){
                    if ($field.$isMetaData) {
                        field.applyMetaData(metaData);
                    }
                    else {
                        field.applyDesignMetaData(metaData, true);
                    }
                });
            }
        });
    },
    _makeEditReadBlock: function($title, $items){
        return {
            $category: "block",
            $title: $title,
            $isSeparatorsVisible: true,
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "50,50",
                $items: [this._makeEditReadStack($items, true), this._makeEditReadStack($items, false)]
            }
        };
    },
    _makeEditReadStack: function($items, $isEditMode){
        return {
            $layoutType: "stack",
            $items: $items.map(function($item){
                var newItem = {
                    $isEditMode: $isEditMode
                };
                Object.keys($item).forEach(function($prop){
                    newItem[$prop] = $item[$prop];
                });
                return newItem;
            })
        };
    }
});
