"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _localize = {
    moveItem: "move '{0}'",
    switchBlock: "swith '{0}' as block",
    switchSection: "swith '{0}' as section",
    moveBlock: "move '{0}' in new block",
    moveSection: "move '{0}' in new section",
    newSection: "New section",
    newBlock: "New block"
};

function DragDrop(){
}

exports.DragDrop = helpers.defineClass(DragDrop, null, {
    dropItem: function(){
        var targetItem = this.targetNode.item;
        if (this.$action.$appendNew) {
            var newBox = document.itemFactory.create({
                $category: this.$action.$appendNew,
                $title: _localize["new" + this.$action.$appendNew.slice(0, 1).toUpperCase() + this.$action.$appendNew.slice(1)],
                $layout: {
                    $items: []
                }
            }, targetItem.boxParent);
            targetItem.layoutParent.appendNewItem({
                newItem: newBox,
                load: true,
                targetItem: targetItem,
                action: this.$drag.$insert
            });
            newBox.layoutContent.appendNewItem({
                newItem: this.source.item
            });
        }
        else {
            if (this.$action.$switch) {
                this.source.item.switchCategory(this.$action.$switch);
            }
            targetItem.layoutParent.appendNewItem({
                newItem: this.source.item,
                targetItem: targetItem,
                action: this.$drag.$insert,
                doSelectItem: true
            });
            
        }
        document.site.authoringView.isUpdated = true;
    },
    start: function(source, $$boundary){
        var self = this;
        self.source = source;
        self.boundary = $$boundary.offset();
        self.boundary.right = self.boundary.left + $$boundary.width();
        self.boundary.bottom = self.boundary.top + $$boundary.height();
        $(document).bind("mouseup.syradragdrop", function(event){
            if (self.targetNode) {
                self.dropItem();
            }
            self.stop();
            delete document.site.DDAuthoring;
        }).bind("mousemove.syradragdrop", function(event){
            self.moveDragImage(event);
            event.preventDefault();
        });
    },
    getDropAction: function(targetNode){
        var $action = null;
        if (this.source != targetNode) {
            var text;
            switch (this.source.$authoringLevel) {
                case "section":
                    switch (targetNode.$authoringLevel) {
                        case "article":
                        case "section":
                            text = _localize.moveItem;
                            $action = {
                                $move: true
                            };
                            break;
                        case "block":
                            text = _localize.switchBlock;
                            $action = {
                                $switch: "block"
                            };
                            break;
                    }
                    break;
                case "block":
                    switch (targetNode.$authoringLevel) {
                        case "section":
                            text = _localize.switchSection;
                            $action = {
                                $switch: "section"
                            };
                            break;
                        case "block":
                            text = _localize.moveItem;
                            $action = {
                                $move: true
                            };
                            break;
                    }
                    break
                case "field":
                    $action = {
                        $move: true
                    };
                    switch (targetNode.$authoringLevel) {
                        case "section":
                            $action.$appendNew = targetNode.$authoringLevel;
                            text = _localize.moveSection;
                            break;
                        case "block":
                            $action.$appendNew = targetNode.$authoringLevel;
                            text = _localize.moveBlock;
                            break;
                        case "field":
                            text = _localize.moveItem;
                            break;
                        default:
                            debugger;
                            break;
                    }
                    break;
            }
            if (text) {
                this._ensureDragImage();
                this._$$info.text(text.replace("{0}", this.source.item.getTitle()));
            }
        }
        return $action;
    },
    _calculateDropCuePosition: function(event, targetNode){
        var $layoutType = targetNode.item.layoutParent.$layout.$layoutType;
        var $$target = ($layoutType == "tabs") ? targetNode.item.$$header : targetNode.item.$$item;
        var offset = $$target.offset();
        this.$drag = {
            left: offset.left,
            top: offset.top,
            width: $$target.outerWidth(),
            height: $$target.outerHeight()
        };
        //calculateDropBoundary
        var xmargin = (this.$drag.width * 0.25);
        var ymargin = (this.$drag.height * 0.25);
        var $dropBoundary = {
            left: this.$drag.left + xmargin,
            right: this.$drag.left + this.$drag.width - xmargin,
            top: this.$drag.top + ymargin,
            bottom: this.$drag.top + this.$drag.height - ymargin
        };
        var $position = {
            top: this.$drag.top,
            left: this.$drag.left
        };
        var isAfter = false;
        if ($layoutType == "stack") {
            isAfter = event.pageY > $dropBoundary.bottom;
            $position.top = this.$drag.top + (isAfter ? this.$drag.height : 0);
            $position.height = "0.6em";
            $position.width = this.$drag.width + "px";
        }
        else {
            isAfter = event.pageX > $dropBoundary.right;
            $position.top -= 3;
            $position.left = this.$drag.left + (isAfter ? (this.$drag.width + 3) : (-3));
            $position.width = "0.6em";
            $position.height = this.$drag.height + 6 + "px";
        }
        this.$drag.$insert = isAfter ? "insertAfter" : "insertBefore";
        return $position;
    },
    moveDragCue: function($position){
        if (!this.$$dropCue) {
            this.$$dropCue = $("<div class='s-author-drop-cue'/>").appendTo(document.site.$$container)
        }
        this.$$dropCue[0].className = "s-author-drop-cue s-author-drop-cue-" + this.source.$authoringLevel;
        if ($position) {
            this.$$dropCue[0].style.display = "block";
            this.$$dropCue.css($position);
        }
        else {
            this.$$dropCue[0].style.display = "none";
        }
    },
    _ensureDragImage: function(){
        if (!this._$$info) {
            this._$$info = $("<div class='s-author-drag-image'/>").appendTo(document.site.$$container);
            this._$$info.text(this.source.item.getTitle());
        }
    },
    moveDragImage: function(event, targetNode){
        this.$action = null;
        if (targetNode) {
            this.$action = this.getDropAction(targetNode);
            if (event.currentTarget.className.indexOf("s-author-empty") >= 0) {
                targetNode = null
            }
        }
        var top = Math.max(event.pageY, this.boundary.top);
        var left = Math.max(event.pageX, this.boundary.left);
        top = Math.min(top, this.boundary.bottom);
        left = Math.min(left, this.boundary.right);
        
        var inBoundary = (event.pageX == left && event.pageY == top);
        this._ensureDragImage();
        this._$$info.toggleClass("s-drag-ok", this.$action != null);
        this.moveDragCue((this.$action && targetNode) ? this._calculateDropCuePosition(event, targetNode) : null);
        this.targetNode = targetNode;
        
        this._$$info.show().css({
            top: top + 15 + "px",
            left: left + 15 + "px"
        });
    },
    stop: function(){
        document.controller.disposeObject(this);
    },
    dispose: function(){
        $(document).unbind('.syradragdrop');
        delete this.targetNode;
        if (this._$$info) {
            this._$$info.remove();
        }
        if (this.$$dropCue) {
            this.$$dropCue.remove();
        }
        delete this.source;
    }
});
