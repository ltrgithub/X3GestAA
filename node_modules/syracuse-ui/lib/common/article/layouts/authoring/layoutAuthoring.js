"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DragDrop = require("./dragDrop").DragDrop;
var layoutSettings = require('./layoutSettings');
var _localize = {
    emptyDropArea: "Drop area",
    emptyDropAreaOn: "You can drop it"
};


exports.convertLayout = function(newLayout, oldLayout){
    if (newLayout.$layout.$layoutType == "composite") {
        var $newLayout = newLayout.box.$item.$layout = helpers.object.clone(layoutSettings.$composite[newLayout.$layout.$layoutSubType || "composite-3-1"], true);
        var newLayout = newLayout.box.layoutContent = document.itemFactory.createLayout(newLayout.box, $newLayout);
        newLayout.$$container = newLayout.$$container || oldLayout.$$container;
        newLayout.render();
        newLayout.toggleAuthoring(true);
        var firstLayout = newLayout;
        while (firstLayout.items.length > 0) {
            firstLayout = firstLayout.items[0];
        }
        exports.convertLayout(firstLayout, oldLayout);
        var oldLayout = newLayout;
        setTimeout(function(){
            document.controller.disposeObject(oldLayout);
        }, 100);
    }
    else 
        if (newLayout.$layout.$layoutType == "columns") {
            var self = this;
            newLayout.colWidths = newLayout.$layout.$layoutSubType.split(",");
            newLayout.$layout.$items = newLayout.colWidths.map(function(){
                return {
                    $layoutType: "stack",
                    $items: []
                };
            });
            newLayout.items = [];
            newLayout.$$container = newLayout.$$container || oldLayout.$$container;
            var oldColumnCount = oldLayout.colWidths ? oldLayout.colWidths.length : 1;
            var isOldColumn = oldLayout.$layout.$layoutType == "columns";
            newLayout.$layout.$items.forEach(function($subLayout, index){
                var subLayout = newLayout._createChildLayout($subLayout, index);
                if (index < oldColumnCount) {
                    $subLayout.$items = oldLayout.$layout.$items;
                    var toConvert = oldLayout;
                    if (isOldColumn) {
                        $subLayout.$items = $subLayout.$items[index].$items;
                        toConvert = toConvert.items[index];
                    }
                    exports.convertLayout(subLayout, toConvert);
                }
                else {
                    subLayout.render();
                }
            });
            if (isOldColumn && newLayout.colWidths.length < oldColumnCount) {
                var lastCol = newLayout.items[newLayout.colWidths.length - 1];
                for (var ii = newLayout.colWidths.length; ii < oldColumnCount; ii++) {
                    oldLayout.$layout.$items[ii].$items.forEach(function($old){
                        lastCol.$layout.$items.push($old);
                    });
                    _convertChildItems(lastCol, oldLayout.items[ii]);
                }
            }
            newLayout.toggleAuthoring(true);
        }
        else {
            newLayout.$layout.$layoutType
            newLayout.$$container = newLayout.$$container || oldLayout.$$container;
            newLayout.items = [];
            newLayout.$layout.$items = [];
            _convertChildItems(newLayout, oldLayout);
            newLayout.toggleAuthoring(true);
            if (newLayout.$layout.$layoutType == "tabs") {
                delete newLayout.tabOpened;
                newLayout._ensureOneTabOpened();
            }
        }
};
function _convertChildItems(newLayout, oldLayout){
    if (oldLayout.items) {
        oldLayout.items.forEach(function(converted){
            if (converted.$layout) {
                _convertChildItems(newLayout, converted);
            }
            else {
                var $$prevContainer = converted.$$container;
                exports.onItemMovedOut(oldLayout, converted);
                newLayout._wrapInSlot(converted);
                if (converted.$layout) {
                    $$prevContainer.children().appendTo(converted.$$container);
                }
                else {
                    converted.$$item.appendTo(converted.$$container);
                }
                converted.layoutParent = newLayout;
                newLayout.$layout.$items.push(converted.$item);
                newLayout.items.push(converted);
            }
        });
    }
    newLayout.toggleEmptyLayout(true);
}

exports.onItemMovedOut = function(layout, item){
    switch (layout.$layout.$layoutType) {
        case "tabs":
            if (layout.tabOpened == item) {
                delete layout.tabOpened;
                if (onAppend) {
                    var $$tab = item.$$header.prev();
                    if ($$tab.length == 0) {
                        $$tab = item.$$header.next();
                    }
                    setTimeout(function(){
                        $$tab.click();
                    }, 200);
                }
            }
            item.$$body[0].className = "";
            delete item.$$title;
            delete item.$isTabLayout;
            item.$$header.remove();
            delete item.$$header;
            item.drawBox();
            item.authoringNode.setDesignableItem(item);
            break;
        case "stack":
            if (item.$layout) {
                var $$prev = item.$$container;
                (item.$$container = $$prev.parent()).append($$prev.children());
                $$prev.remove();
            }
            break;
            
        case "side":
            var $$prev = item.$$container;
            (item.$$container = $$prev.parent()).append($$prev.children());
            $$prev.remove();
            break;
    }
    layout.toggleEmptyLayout(true);
};

function _findChildIndex(childLayout){
    var index;
    var items = childLayout.layoutParent.items;
    for (index = 0; index < items.length && items[index] != childLayout; index++) {
    }
    return (index < items.length) ? index : -1;
}

function _disposeLayout(layout){
    if (layout.layoutParent) {
        var childIndex = _findChildIndex(layout);
        if (childIndex >= 0) {
            layout.layoutParent.$layout.$items.splice(childIndex, 1);
            layout.layoutParent.items.splice(childIndex, 1);
        }
    }
    document.controller.disposeObject(layout);
}

function _calculateDropBoundary(target){
    var xmargin = (target.$drag.width * 0.25);
    var ymargin = (target.$drag.height * 0.25);
    target.$dropBoundary = {
        left: target.$drag.left + xmargin,
        right: target.$drag.left + target.$drag.width - xmargin,
        top: target.$drag.top + ymargin,
        bottom: target.$drag.top + target.$drag.height - ymargin
    };
}

function _calculateDropCuePosition(layout, event, target){
    var $layoutType = layout.$layout.$layoutType;
    var offset = (($layoutType == "tabs") ? target.item.$$header : target.item.$$item).offset();
    target.$drag = {
        left: offset.left,
        top: offset.top,
        width: target.item.$$item.outerWidth(),
        height: target.item.$$item.outerHeight()
    };
    _calculateDropBoundary(target);
    var $position = {
        top: target.$drag.top,
        left: target.$drag.left
    };
    if ($layoutType == "stack") {
        target.$drag.isAfter = event.pageY > target.$dropBoundary.bottom;
        $position.top = target.$drag.top + (target.$drag.isAfter ? target.$drag.height : 0);
        $position.height = "2px";
        $position.width = target.$drag.width + "px";
    }
    else {
        target.$drag.isAfter = event.pageX > target.$dropBoundary.right;
        $position.left = target.$drag.left + (target.$drag.isAfter ? target.$drag.width : 0);
        $position.width = "2px";
        $position.height = target.$drag.height + "px";
    }
    
    return $position;
}

function LayoutAuthoring(){
}

exports.LayoutAuthoring = helpers.defineClass(LayoutAuthoring, null, {
    begin: function(layout, $$container, selector){
        var self = this;
        self.layout = layout;
        if (layout.$layout.$layoutType == "tabs") {
            self.$$container = layout._$$tabs;
            self.selector = "[s-designable=1]" || layout.$tabSkin;
        }
        else {
            self.$$container = self.layout.$$container;
            self.selector = "[s-designable=1]";
        }
        self.$$container.delegate(self.selector, "click.author", function(event){
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.stop(event);
                delete document.site.DDAuthoring;
            }
            else {
                var item = document.controller.findItem($(this));
                item.authoringNode.click();
            }
            return false;
        }).delegate(self.selector, "mouseleave.author mouseenter.author", function(event){
            if (!document.site.DDAuthoring) {
                var item = document.controller.findItem($(this));
                item.authoringNode.showOverItem(event.type == "mouseenter");
                return false;
            }
        }).delegate(self.selector, "mousedown.author", function(event){
            var item = document.controller.findItem($(this));
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.stop(event);
                delete document.site.DDAuthoring;
            }
            else {
                (document.site.DDAuthoring = new DragDrop()).start(self.layout, event, item.authoringNode, document.site.authoringView.targetPage.$$body);
                item.authoringNode.tree.showOverPathNodes();
            }
            return false;
        }).delegate(self.selector, "mouseup.author", function(event){
            var dragDrop = document.site.DDAuthoring;
            if (dragDrop) {
                var targetItem = document.controller.findItem($(this));
                if (dragDrop.isDropValidate(targetItem.authoringNode)) {
                    self.layout.appendNewItem({
                        newItem: dragDrop.source.item,
                        targetItem: targetItem,
                        action: targetItem.authoringNode.$drag.isAfter ? "insertAfter" : "insertBefore"
                    });
                    document.site.authoringView.isPageAuthored = true;
                }
                dragDrop.stop();
                delete document.site.DDAuthoring;
                return false;
            }
        }).delegate(self.selector, "mousemove.author", function(event){
            var dragDrop = document.site.DDAuthoring;
            if (dragDrop) {
                var item = document.controller.findItem($(this));
                var isValidate = dragDrop.isDropValidate(item.authoringNode);
                if (isValidate) {
                    dragDrop.moveDragCue(_calculateDropCuePosition(self.layout, event, item.authoringNode));
                }
                dragDrop._moveDragImage(event, isValidate);
            }
            return false;
        }).delegate(".s-author-empty", "mouseup.author mousemove.author mouseleave.author mouseenter.author", function(event){
            var dragDrop = document.site.DDAuthoring;
            if (dragDrop) {
                var isValidate = dragDrop.isDropValidate(self.layout.box.authoringNode);
                switch (event.type) {
                    case "mouseup":
                        if (isValidate) {
                            self.layout.appendNewItem({
                                newItem: dragDrop.source.item
                            });
                            document.site.authoringView.isPageAuthored = true;
                        }
                        dragDrop.stop();
                        delete document.site.DDAuthoring;
                        break;
                    case "mousemove":
                        if (isValidate) {
                            dragDrop._moveDragImage(event, isValidate);
                        }
                        break;
                    case "mouseleave":
                        self.layout.empty.$$delete[0].style.visibility = "";
                        self.layout.empty.$$drop.toggleClass("s-drop-over", false);
                        self.layout.empty.$$dropText.text(_localize.emptyDropArea);
                        break;
                    case "mouseenter":
                        self.layout.empty.$$delete[0].style.visibility = "hidden";
                        if (isValidate) {
                            self.layout.empty.$$drop.toggleClass("s-drop-over", true);
                            self.layout.empty.$$dropText.text(_localize.emptyDropAreaOn);
                            if (isValidate) {
                                dragDrop.moveDragCue(null); //hide
                            }
                        }
                        break;
                }
            }
            return false;
        }).delegate(".s-author-layout-delete", "click.author", function(){
            if (!document.site.DDAuthoring) {
                self.deleteLayout();
            }
            return false;
        });
        
        this.toggleChildAuthoring(true);
    },
    toggleChildAuthoring: function(isOn){
        var self = this;
        var $layoutType = this.layout.$layout.$layoutType;
        self.layout.toggleEmptyLayout(isOn);
        self.layout.items.forEach(function(child){
            if (child.$layout) {
                if ($layoutType != "tabs") {
                    var css = "s-author-layout-" + $layoutType;
                    if ($layoutType == "columns") {
                        self.layout._$$table.toggleClass("s-author-layout-table-on", isOn);
                    }
                    document.site.toggleClass(child.$$container, css, isOn);
                }
                child.toggleAuthoring(isOn);
            }
        });
    },
    deleteLayout: function(){
        var self = this;
        if (self.layout.$layout) {
            if (self.layout.layoutParent) {
                var columns = self.layout.layoutParent;
                if (columns.$layout.$layoutType == "columns") {
                    setTimeout(function(){
                        if (columns.items.length == 2) {
                            self.layout.$$container.remove();
                            _disposeLayout(self.layout);
                            columns.toggleAuthoring(false);
                            var newLayout = document.itemFactory.createLayout(columns.box, {
                                $layoutType: "stack",
                                $items: []
                            });
                            var childIndex;
                            if (columns.layoutParent) {
                                columns.layoutParent.items[childIndex = _findChildIndex(columns)] = newLayout;
                                columns.layoutParent.$layout.$items[childIndex] = newLayout.$layout;
                                newLayout.layoutParent = columns.layoutParent;
                            }
                            else {
                                columns.box.layoutContent = newLayout;
                            }
                            newLayout.$$container = columns.$$container;
                            newLayout.render();
                            exports.convertLayout(newLayout, columns);
                            newLayout.toggleAuthoring(true);
                            _disposeLayout(columns);
                        }
                        else {
                            self.layout.$$container.remove();
                            _disposeLayout(self.layout);
                            columns.colWidths = (columns.$layout.$layoutSubType = columns.items.length == 2 ? "50-50" : "33-33-33").split("-");
                            columns.items.forEach(function(item, index){
                                item.$$container[0].style.width = columns.colWidths[index] + "%";
                            });
                        }
                    });
                }
            }
            else {
                var layoutParent = self.layout.box.layoutParent;
                var boxIndex = layoutParent.getItemIndex(self.layout.box);
                layoutParent.$layout.$items.splice(boxIndex, 1);
                layoutParent.items.splice(boxIndex, 1);
                layoutParent.onItemMovedOut(self.layout.box, true);
                self.layout.box.getArticle().removeItem(self.layout.box, true);
            }
        }
    },
    
    end: function(){
        this.toggleChildAuthoring(false);
    },
    dispose: function(){
        if (this.$$container) {
            this.$$container.undelegate(".author");
        }
        delete this.layout;
    }
});
