"use strict";

exports.convert = function(newLayout, oldLayout){
    if (oldLayout.items) {
        oldLayout.items.forEach(function(converted){
            if (converted.$layout) {
                exports.convert(newLayout, converted);
            }
            else {
                var $$prevContainer = converted.$$container;
                oldLayout.onItemMovedOut(converted);
                newLayout._wrapInSlot(converted);
                if (converted.$layout) {
                    $$prevContainer.children().appendTo(converted.$$container);
                }
                else {
                    converted.$$item.appendTo(converted.$$container);
                }
                converted.layoutParent = newLayout;
                newLayout.$layout.$items.push(converted.$item);
                newLayout.items.push(converted);
            }
        });
    }
    newLayout.toggleEmptyLayout(true);
};

exports.findFirstLayout = function(rootLayout){
    var layout = rootLayout;
    while (layout.items.length > 0) {
        layout = layout.items[0];
    }
    return layout;
};

exports.calculateDropBoundary = function(target){
    var xmargin = (target.$drag.width * 0.25);
    var ymargin = (target.$drag.height * 0.25);
    target.$dropBoundary = {
        left: target.$drag.left + xmargin,
        right: target.$drag.left + target.$drag.width - xmargin,
        top: target.$drag.top + ymargin,
        bottom: target.$drag.top + target.$drag.height - ymargin
    };
};

exports.findChildIndex = function(childLayout){
    var index;
    var items = childLayout.layoutParent.items;
    for (index = 0; index < items.length && items[index] != childLayout; index++) 
        ;
    return (index < items.length) ? index : -1;
};

exports.disposeLayout = function(layout){
    if (layout.layoutParent) {
        var childIndex = exports.findChildIndex(layout);
        if (childIndex >= 0) {
            layout.layoutParent.$layout.$items.splice(childIndex, 1);
            layout.layoutParent.items.splice(childIndex, 1);
        }
    }
    document.controller.disposeObject(layout);
};
