"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Layout = require('./layout').Layout;
var layoutHelper = require('./layoutHelper');

function TabsLayout(){
}

exports.TabsLayout = helpers.defineClass(TabsLayout, Layout, {
    _wrapInSlot: function(item){
        if (item.$$header) {
            item.applyCollapsable(false);
            item.$$header.remove();
        }
        item.$isTabLayout = true;
        item.layoutParent = this;
        item.$$container = this.$$container;
        var $$prevItem = item.$$item;
        if ($$prevItem) {
            item.appendHeader();
            item.$$body.removeClass(item.$skin + "-body");
            this.wrapTabBody(item);
            item.$$item.toggle(this.tabOpened == item);
            this._setOpenSkin(item, this.tabOpened == item);
            $$prevItem.remove();
        }
    },
    toggleChildLayoutAuthoring: function(){
        //!important disable default toggleChildLayoutAuthoring
    },
    _ensureTabs: function(){
        if (!this._$$tabs) {
            this._$$tabs = $("<nav/>").prependTo(this.$$container);
        }
    },
    _initializeTabs: function(box){
        var self = this;
        self._isTabsInitialized = true;
        self._ensureTabs();
        self._$$tabs.addClass(box.$skin + "-tabs-nav").delegate("a." + (self.$tabSkin = box.$skin + "-tab"), "click", function(){
            if (!document.authoringSite.dragDrop) {
                var tabIdx = $(this).index(), tabItem = self.items[tabIdx];
                var isTabSelected = self.tabOpened == tabItem;
                var open = !tabItem.$item.$opened;
                tabItem.getPage().externalAdapter.onBoxToggle({
                    box: tabItem,
                    isTabSelected: isTabSelected,
                    open: open,
                    isFirstTime: !tabItem.loaded,
                    tabIdx: tabIdx,
                    doEvent: function(){
                        if (!isTabSelected) {
                            tabItem.openBox(open);
                        }
                    }
                });
                return tabItem.authoringNode ? true : false; //authoringNode => true hooked by layout
            }
        }).delegate("a." + box.$skin + "-tab" + "-open", "click", function(event){
            var tabIdx = $(this).index(), tabItem = self.items[tabIdx];
            tabItem.getPage().externalAdapter.onBoxClick({
                box: tabItem,
                event: event,
                tabIdx: tabIdx
            });
        });
    },
    appendChildTab: function(box){
        box.$$header = box.$$title = $("<a/>");
        box.$$header[0].className = box.$skinTab = box.$skin + "-tab";
        if (!this._isTabsInitialized) {
            this._initializeTabs(box);
        }
        box.$$header.appendTo(this._$$tabs);
        if (box.authoringNode) {
            box.authoringNode.setDesignableItem(box, box.$$title);
        }
    },
    onItemMovedOut: function(item, onAppend){
        if (this.tabOpened == item) {
            delete this.tabOpened;
            if (onAppend) {
                var $$tab = item.$$header.prev();
                if ($$tab.length == 0) {
                    $$tab = item.$$header.next();
                }
                setTimeout(function(){
                    $$tab.click();
                }, 200);
            }
        }
        item.$$body[0].className = "";
        delete item.$$title;
        delete item.$isTabLayout;
        item.$$header.remove();
        delete item.$$header;
        item.drawBox();
        item.authoringNode.setDesignableItem(item);
        Layout.prototype.onItemMovedOut.call(this, item);
    },
    openTab: function(item, open){
        if (open) {
            if (this.tabOpened !== undefined) {
                this.tabOpened.openBox(false);
            }
            this.tabOpened = item;
            item.$item.$opened = true;
        }
        else {
            delete item.$item.$opened;
        }
        this._setOpenSkin(item, open);
    },
    _setOpenSkin: function(item, open){
        item.$$header[0].className = item.$$header[0].className.replace(item.$skinTab + (open ? "" : "-open"), item.$skinTab + (open ? "-open" : ""));
    },
    toggleAuthoring: function(enable){
        Layout.prototype.toggleAuthoring.call(this, enable, this._$$tabs, this.$tabSkin);
    },
    wrapTabBody: function(box){
        box.$$item = box.$$body.appendTo(box.$$container).addClass(box.$skin + "-tab-body");
    },
    
    _ensureOneTabOpened: function(){
        if (this.items.length > 0) {
            (this.tabOpened = this.items[0]).openBox(true, true);
        }
    },
    convertLayout: function(oldLayout){
        Layout.prototype.convertLayout.call(this, oldLayout);
        delete this.tabOpened;
        this._ensureOneTabOpened();
    },
    appendNewItem: function(options){
        Layout.prototype.appendNewItem.call(this, options);
        if (options.action) {
            options.newItem.$$header[options.action](options.targetItem.$$header);
        }
        if (!this.tabOpened) {
            this._ensureOneTabOpened();
        }
    },
    renderChildItem: function(item){
        if (item.$item.$opened) {
            this.tabOpened = item;
        }
        item.$isTabLayout = true;
        Layout.prototype.renderChildItem.call(this, item);
    },
    render: function(){
        Layout.prototype.render.call(this);
        this._ensureTabs();
        this._ensureOneTabOpened();
    },
    toggleEmptyLayout: function(enable){
        Layout.prototype.toggleEmptyLayout.call(this, enable, this._$$tabs);
    },
    
    calculateDropCuePosition: function(event, target){
        var offset = target.item.$$header.offset();
        target.$drag = {
            left: offset.left,
            top: offset.top,
            width: target.item.$$header.outerWidth(),
            height: target.item.$$header.outerHeight()
        };
        layoutHelper.calculateDropBoundary(target);
        var $position = {
            top: target.$drag.top,
            left: target.$drag.left
        };
        target.$drag.isAfter = event.pageX > target.$dropBoundary.right;
        $position.left = target.$drag.left + (target.$drag.isAfter ? target.$drag.width : 0);
        $position.width = "2px";
        $position.height = target.$drag.height + "px";
        return $position;
    },
    dispose: function(){
        if (this._$$tabs) {
            this._$$tabs.undelegate().remove();
            delete this._$$tabs;
            delete this.tabOpened;
        }
        Layout.prototype.dispose.call(this);
    }
});
