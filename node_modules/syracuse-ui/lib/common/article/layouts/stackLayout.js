"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Layout = require('./layout').Layout;
var layoutHelper = require('./layoutHelper');

function StackLayout(){
}

exports.StackLayout = helpers.defineClass(StackLayout, Layout, {
    _wrapInSlot: function(item){
        if (item.$layout) {
            item.$$container = $("<div/>").appendTo(this.$$container);
            /* if (this.box.$item.$isSeparatorsVisible !== undefined) {
             item.$$container.toggleClass(this.box.$skin + "-border-top", this.box.$item.$isSeparatorsVisible);
             }*/
        }
        else {
            item.$$container = this.$$container;
        }
    },
    applySeparatorsVisibility: function(){
        var self = this;
        var visible = this.box.$item.$isSeparatorsVisible;
        var css = this.box.$skin + "-border-cell";
        this.items.forEach(function(item, index){
            if (item.$layout) {
                document.site.toggleClass(item.$$container, css, visible);
            }
        });
        if (this.authoringEnabled) {
            this.items.forEach(function(item, index){
                if (item.$layout) {
                    document.site.toggleClass(item.$$container, "s-author-layout-stack", !visible);
                }
            });
        }
    },
    toggleChildLayoutAuthoring: function(layoutChild, enable){
        Layout.prototype.toggleChildLayoutAuthoring.call(this, layoutChild, enable, "s-author-layout-stack");
    },
    onItemMovedOut: function(item){
        if (item.$layout) {
            var $$prev = item.$$container;
            (item.$$container = $$prev.parent()).append($$prev.children());
            $$prev.remove();
        }
        Layout.prototype.onItemMovedOut.call(this, item);
    },
    calculateDropCuePosition: function(event, target){
        var offset = target.item.$$item.offset();
        target.$drag = {
            left: offset.left,
            top: offset.top,
            width: target.item.$$item.outerWidth(),
            height: target.item.$$item.outerHeight()
        };
        layoutHelper.calculateDropBoundary(target);
        var $position = {
            top: target.$drag.top,
            left: target.$drag.left
        };
        target.$drag.isAfter = event.pageY > target.$dropBoundary.bottom;
        $position.top = target.$drag.top + (target.$drag.isAfter ? target.$drag.height : 0);
        $position.height = "2px";
        $position.width = target.$drag.width + "px";
        return $position;
    }
});
