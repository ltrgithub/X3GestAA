"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Layout = require('./layout').Layout;
var layoutHelper = require('./layoutHelper');

function ColumnsLayout(){
}

exports.ColumnsLayout = helpers.defineClass(ColumnsLayout, Layout, {
    toggleChildLayoutAuthoring: function(layoutChild, enable){
        this._$$table.toggleClass("s-author-layout-table-on", enable);
        Layout.prototype.toggleChildLayoutAuthoring.call(this, layoutChild, enable, "s-author-layout-col");
    },
    applySeparatorsVisibility: function(){
        var visible = this.box.$item.$isSeparatorsVisible;
        var css = this.box.$skin + "-border-cell";
        this.items.forEach(function(item, index){
            document.site.toggleClass(item.$$container, css, visible);
        });
        if (this.authoringEnabled) {
            if (this._$$table) {
                document.site.toggleClass(this._$$table, "s-author-layout-table-on", !visible);
            }
            this.items.forEach(function(item, index){
                document.site.toggleClass(item.$$container, "s-author-layout-col", !visible);
            });
        }
    },
    _wrapInSlot: function(item, columnIndex){
        var div = document.createElement("div");
        item.$$container = $(div);
        if (this.box.$item.$isSeparatorsVisible) {
            document.site.toggleClass(item.$$container, this.box.$skin + "-border-cell", true);
        }
        div.style.display = "table-cell";
        div.style.verticalAlign = "top";
        div.style.width = this.colWidths[columnIndex] + "%";
        if (!this._$$table) {
            var table = document.createElement("div");
            table.style.display = "table";
            if (!this.$layout.$fitToContent) {
                table.style.width = "100%";
            }
            table.style.tableLayout = "fixed";
            /* if (this.box.$item.$isSeparatorsVisible !== undefined) {
             this._$$table.toggleClass(this.box.$skin + "-border-table", this.box.$item.$isSeparatorsVisible);
             }*/
            (this._$$table = $(table)).appendTo(this.$$container);
        }
        item.$$container.appendTo(this._$$table);
        if (this.$layout.$layoutCss) {
            item.$$container[0].className = this.$layout.$layoutCss;
        }
    },
    appendNewItem: function(options){
        if (this.items.length) {
            this.items[0].appendNewItem(options);
        }
    },
    deleteChildLayout: function(childLayout){
        var self = this;
        setTimeout(function(){
            if (self.items.length == 2) {
                childLayout.$$container.remove();
                layoutHelper.disposeLayout(childLayout);
                self.toggleAuthoring(false);
                var newLayout = document.itemFactory.createLayout(self.box, {
                    $layoutType: "stack",
                    $items: []
                });
                var childIndex;
                if (self.layoutParent) {
                    self.layoutParent.items[childIndex = layoutHelper.findChildIndex(self)] = newLayout;
                    self.layoutParent.$layout.$items[childIndex] = newLayout.$layout;
                    newLayout.layoutParent = self.layoutParent;
                }
                else {
                    self.box.layoutContent = newLayout;
                }
                newLayout.$$container = self.$$container;
                newLayout.render();
                newLayout.convertLayout(self);
                newLayout.toggleAuthoring(true);
                layoutHelper.disposeLayout(self);
            }
            else {
                childLayout.$$container.remove();
                layoutHelper.disposeLayout(childLayout);
                self.colWidths = (self.$layout.$layoutSubType = self.items.length == 2 ? "50,50" : "33,33,33").split(",");
                self.items.forEach(function(item, index){
                    item.$$container[0].style.width = self.colWidths[index] + "%";
                });
            }
        });
    },
    convertLayout: function(oldLayout){
        var self = this;
        self.colWidths = self.$layout.$layoutSubType.split(",");
        self.$layout.$items = self.colWidths.map(function(){
            return {
                $layoutType: "stack",
                $items: []
            };
        });
        self.items = [];
        self.$$container = self.$$container || oldLayout.$$container;
        var oldColumnCount = oldLayout.colWidths ? oldLayout.colWidths.length : 1;
        var isOldColumn = oldLayout.$layout.$layoutType == "columns";
        self.$layout.$items.forEach(function($subLayout, index){
            var subLayout = self._createChildLayout($subLayout, index);
            if (index < oldColumnCount) {
                $subLayout.$items = oldLayout.$layout.$items;
                var toConvert = oldLayout;
                if (isOldColumn) {
                    $subLayout.$items = $subLayout.$items[index].$items;
                    toConvert = toConvert.items[index];
                }
                subLayout.convertLayout(toConvert);
            }
            else {
                subLayout.render();
            }
        });
        if (isOldColumn && self.colWidths.length < oldColumnCount) {
            var lastCol = self.items[self.colWidths.length - 1];
            for (var ii = self.colWidths.length; ii < oldColumnCount; ii++) {
                oldLayout.$layout.$items[ii].$items.forEach(function($old){
                    lastCol.$layout.$items.push($old);
                });
                layoutHelper.convert(lastCol, oldLayout.items[ii]);
            }
        }
        self.toggleAuthoring(true);
    },
    
    _createChildLayout: function($subLayout, index){
        var subLayout = document.itemFactory.createLayout(this.box, $subLayout);
        this._wrapInSlot(subLayout, index);
        this.items.push(subLayout);
        subLayout.layoutParent = this;
        return subLayout;
    },
    render: function(){
        var self = this;
        self.colWidths = this.$layout.$layoutSubType.split(",");
        self.items = [];
        self.$layout.$items.forEach(function($item, index){
            self._createChildLayout($item, index).render();
        });
        if (document.authoringSite.isAuthoringOn) {
            self.toggleAuthoring(true);
        }
    },
    dispose: function(){
        if (this._$$table) {
            this._$$table.remove();
            delete this._$$table;
        }
        Layout.prototype.dispose.call(this);
    }
});
