"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Layout = require('./layout').Layout;

function ColumnsLayout(){
}

exports.ColumnsLayout = helpers.defineClass(ColumnsLayout, Layout, {
    applySeparatorsVisibility: function(){
        var visible = this.box.$item.$isSeparatorsVisible;
        var css = this.box.$skin + "-border-cell";
        this.items.forEach(function(item, index){
            document.site.toggleClass(item.$$container, css, visible);
        });
        if (this.layoutAuthoring) {
            if (this._$$table) {
                document.site.toggleClass(this._$$table, "s-author-layout-table-on", !visible);
            }
            this.items.forEach(function(item, index){
                document.site.toggleClass(item.$$container, "s-author-layout-col", !visible);
            });
        }
    },
    _wrapInSlot: function(item, columnIndex){
        var div = document.createElement("div");
        item.$$container = $(div);
        if (this.box.$item.$isSeparatorsVisible) {
            document.site.toggleClass(item.$$container, this.box.$skin + "-border-cell", true);
        }
        div.style.display = "table-cell";
        div.style.verticalAlign = "top";
        div.style.width = this.colWidths[columnIndex] + "%";
        if (!this._$$table) {
            var table = document.createElement("div");
            table.style.display = "table";
            if (!this.$layout.$fitToContent) {
                table.style.width = "100%";
            }
            table.style.tableLayout = "fixed";
            /* if (this.box.$item.$isSeparatorsVisible !== undefined) {
             this._$$table.toggleClass(this.box.$skin + "-border-table", this.box.$item.$isSeparatorsVisible);
             }*/
            (this._$$table = $(table)).appendTo(this.$$container);
        }
        item.$$container.appendTo(this._$$table);
        var $layoutCss = item.$layout.$layoutCss || this.$layout.$layoutCss;
        if ($layoutCss) {
            item.$$container[0].className = $layoutCss;
        }
    },
    appendNewItem: function(options){
        if (this.items.length) {
            this.items[0].appendNewItem(options);
        }
    },
    _createChildLayout: function($subLayout, index){
        var subLayout = document.itemFactory.createLayout(this.box, $subLayout);
        this._wrapInSlot(subLayout, index);
        this.items.push(subLayout);
        subLayout.layoutParent = this;
        return subLayout;
    },
    render: function(){
        var self = this;
        self.colWidths = this.$layout.$layoutSubType.split(",");
        self.items = [];
        self.$layout.$items.forEach(function($item, index){
            self._createChildLayout($item, index).render();
        });
        if (document.site.authoringView) {
            self.toggleAuthoring(true);
        }
    },
    dispose: function(){
        if (this._$$table) {
            this._$$table.remove();
            delete this._$$table;
        }
        Layout.prototype.dispose.call(this);
    }
});
