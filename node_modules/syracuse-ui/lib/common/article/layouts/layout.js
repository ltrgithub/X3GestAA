"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DragDrop = require("./dragDrop").DragDrop;
var layoutHelper = require('./layoutHelper');

var _localize = {
    emptyDropArea: "Drop area",
    emptyDropAreaOn: "You can drop it",
    deleteLayout: "Delete layout"
};


function Layout(){
}

exports.Layout = helpers.defineClass(Layout, null, {
    toggleAuthoring: function(enable, $$container, selector){
        var self = this;
        if (self.authoringEnabled !== enable) {
            //$$container and selector set by tabslayout
            $$container = $$container || self.$$container;
            selector = "[s-designable=1]" || selector;
            if (self.authoringEnabled = enable) {
                $$container.delegate(selector, "click.author", function(event){
                    if (document.authoringSite.dragDrop) {
                        document.authoringSite.dragDrop.stop(event);
                        delete document.authoringSite.dragDrop;
                    }
                    else {
                        var item = document.controller.findItem($(this));
                        item.authoringNode.click();
                    }
                    return false;
                }).delegate(selector, "mouseleave.author mouseenter.author", function(event){
                    if (!document.authoringSite.dragDrop) {
                        var item = document.controller.findItem($(this));
                        item.authoringNode.showOverItem(event.type == "mouseenter");
                        return false;
                    }
                }).delegate(selector, "mousedown.author", function(event){
                    var item = document.controller.findItem($(this));
                    if (document.authoringSite.dragDrop) {
                        document.authoringSite.dragDrop.stop(event);
                        delete document.authoringSite.dragDrop;
                    }
                    else {
                        (document.authoringSite.dragDrop = new DragDrop()).start(self, event, item.authoringNode, document.authoringSite.updatedPage.$$body);
                        item.authoringNode.tree.showOverPathNodes();
                    }
                    return false;
                }).delegate(selector, "mouseup.author", function(event){
                    var dragDrop = document.authoringSite.dragDrop;
                    if (dragDrop) {
                        var targetItem = document.controller.findItem($(this));
                        if (dragDrop.isDropValidate(targetItem.authoringNode)) {
                            self.appendNewItem({
                                newItem: dragDrop.source.item,
                                targetItem: targetItem,
                                action: targetItem.authoringNode.$drag.isAfter ? "insertAfter" : "insertBefore"
                            });
                        }
                        dragDrop.stop();
                        delete document.authoringSite.dragDrop;
                        return false;
                    }
                }).delegate(selector, "mousemove.author", function(event){
                    var dragDrop = document.authoringSite.dragDrop;
                    if (dragDrop) {
                        var item = document.controller.findItem($(this));
                        var isValidate = dragDrop.isDropValidate(item.authoringNode);
                        if (isValidate) {
                            dragDrop.moveDragCue(self.calculateDropCuePosition(event, item.authoringNode));
                        }
                        dragDrop._moveDragImage(event, isValidate);
                    }
                    return false;
                }).delegate(".s-author-empty", "mouseup.author mousemove.author mouseleave.author mouseenter.author", function(event){
                    var dragDrop = document.authoringSite.dragDrop;
                    if (dragDrop) {
                        var isValidate = dragDrop.isDropValidate(self.box.authoringNode);
                        switch (event.type) {
                            case "mouseup":
                                if (isValidate) {
                                    self.appendNewItem({
                                        newItem: dragDrop.source.item
                                    });
                                }
                                dragDrop.stop();
                                delete document.authoringSite.dragDrop;
                                break;
                            case "mousemove":
                                if (isValidate) {
                                    dragDrop._moveDragImage(event, isValidate);
                                }
                                break;
                            case "mouseleave":
                                self.empty.$$delete[0].style.visibility = "";
                                self.empty.$$drop.toggleClass("s-drop-over", false);
                                self.empty.$$dropText.text(_localize.emptyDropArea);
                                break;
                            case "mouseenter":
                                self.empty.$$delete[0].style.visibility = "hidden";
                                if (isValidate) {
                                    self.empty.$$drop.toggleClass("s-drop-over", true);
                                    self.empty.$$dropText.text(_localize.emptyDropAreaOn);
                                    if (isValidate) {
                                        dragDrop.moveDragCue(null); //hide
                                    }
                                }
                                break;
                        }
                    }
                    return false;
                }).delegate(".s-author-layout-delete", "click.author", function(){
                    if (!document.authoringSite.dragDrop) {
                        self.deleteLayout();
                    }
                    return false;
                });
            }
            else {
                $$container.undelegate(".author");
            }
        }
        self.toggleEmptyLayout(enable);
        self.items.forEach(function(childItem){
            if (childItem.$layout) {
                self.toggleChildLayoutAuthoring(childItem, enable);
                childItem.toggleAuthoring(enable);
            }
        });
    },
    toggleChildLayoutAuthoring: function(layoutChild, enable, css){
        document.site.toggleClass(layoutChild.$$container, css, enable);
    },
    deleteLayout: function(){
        if (this.$layout) {
            if (this.layoutParent) {
                this.layoutParent.deleteChildLayout(this);
            }
            else {
                var layoutParent = this.box.layoutParent;
                var boxIndex = layoutParent.getItemIndex(this.box);
                layoutParent.$layout.$items.splice(boxIndex, 1);
                layoutParent.items.splice(boxIndex, 1);
                layoutParent.onItemMovedOut(this.box, true);
                this.box.getArticle().removeItem(this.box, true);
            }
        }
    },
    deleteChildLayout: function(childLayout){
        childLayout.$$container.remove();
        layoutHelper.disposeLayout(childLayout);
    },
    toggleEmptyLayout: function(enable, $$container){
        if (enable) {
            if (this.items.length != 0) {
                this.toggleEmptyLayout(false, $$container);
            }
            else {
                if (!this.empty) {
                    var $$drop = $("<div class='s-author-empty-drop'/>");
                    this.empty = {
                        $$item: $("<div class='s-author-empty'/>").appendTo($$container || this.$$container),
                        $$dropIcon: $("<div class='s-author-empty-drop-icon'/>").addClass("s-layout-" + this.$layout.$layoutType).appendTo($$drop),
                        $$dropText: $("<div class='s-author-empty-drop-text'/>").text(_localize.emptyDropArea).appendTo($$drop)
                    };
                    this.empty.$$item.append(this.empty.$$drop = $$drop).append(this.empty.$$delete = $("<a class='s-author-layout-delete'/>").text(_localize.deleteLayout));
                }
            }
        }
        else {
            if (this.empty) {
                this.empty.$$item.remove();
                delete this.empty;
            }
        }
    },
    
    convertLayout: function(oldLayout){
        this.$$container = this.$$container || oldLayout.$$container;
        this.items = [];
        this.$layout.$items = [];
        layoutHelper.convert(this, oldLayout);
        this.toggleAuthoring(true);
    },
    onItemMovedOut: function(item){
        this.toggleEmptyLayout(true);
    },
    appendNewItem: function(options){
        var oldLayout = options.newItem.layoutParent;
        if (oldLayout) {
            //oldlayout is null for item added by authoring
            var newItemIndex = oldLayout.getItemIndex(options.newItem);
            oldLayout.$layout.$items.splice(newItemIndex, 1);
            oldLayout.items.splice(newItemIndex, 1);
            if (this != oldLayout) {
                oldLayout.onItemMovedOut(options.newItem, true);
                
            }
        }
        this.toggleEmptyLayout(false);
        options.newIndex = this.$layout.$items.length + 1; //default push at end
        if (options.action) {
            options.newIndex = this.getItemIndex(options.targetItem);
            if (options.action == "insertAfter") {
                options.newIndex++;
            }
        }
        this.$layout.$items.splice(options.newIndex, 0, options.newItem.$item);
        this.items.splice(options.newIndex, 0, options.newItem);
        (options.newItem.boxParent = this.box).getArticle().idMap[options.newItem.id] = options.newItem;
        options.newItem.layoutParent = this;
        
        if (options.load) {
            this.renderChildItem(options.newItem);
        }
        else {
            this._wrapInSlot(options.newItem)
            options.newItem.$$item.appendTo(options.newItem.$$container);
        }
        if (options.action) {
            if (options.targetItem.$$container == options.newItem.$$container) {
                options.newItem.$$item[options.action](options.targetItem.$$item);
            }
            else {
                options.newItem.$$container[options.action](options.targetItem.$$container);
            }
            options.newItem.authoringNode.$$node[options.action](options.targetItem.authoringNode.$$node);
        }
        options.load = false;
        this.box.authoringNode.appendChildItem(options);
        if (options.newItem.authoringNode.$$stepLink) {
            options.newItem.authoringNode.toggleStepLink(false);
            options.newItem.authoringNode.click();
        }
        
    },
    getItemIndex: function(item){
        for (var ii = 0; ii < this.$layout.$items.length; ii++) {
            if (this.$layout.$items[ii] == item.$item) {
                return ii;
            }
        }
        return -1;
    },
    applySeparatorsVisibility: function(){
    
    },
    _wrapInSlot: function(child){
        child.$$container = this.$$container;
    },
    renderChildItem: function(item){
        item.layoutParent = this;
        this._wrapInSlot(item);
        if (item.$layout) {
            item.render();
            if (document.authoringSite.isAuthoringOn) {
                item.toggleAuthoring(true);
            }
        }
        else {
            item.loadBox();
            if (this.box.authoringNode) {
                this.box.authoringNode.appendChildItem({
                    newItem: item
                });
            }
        }
    },
    render: function(){
        var self = this;
        self.items = [];
        self.$layout.$items.forEach(function($item){
            var item;
            if ($item.$layoutType) {
                item = document.itemFactory.createLayout(self.box, $item); //a voir bug eccras $item$layout de la box???
            }
            else {
                item = document.itemFactory.create($item, self.box);
            }
            if (item) {
                self.items.push(item);
                self.renderChildItem(item);
            }
        });
    },
    dispose: function(){
        var self = this;
        if (self.items) {
            self.items.forEach(function(item){
                if (item && item.$layout) {
                    document.controller.disposeObject(item);
                }
            });
        }
        delete self.layoutParent;
        delete self.box;
    }
});
