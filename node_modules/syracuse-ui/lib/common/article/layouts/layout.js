"use strict";
var helpers = require('syracuse-core/lib/helpers');
var layoutAuthoring = require("./authoring/layoutAuthoring");
var _localize = {
    emptyDropArea: "Drop area",
    emptyDropAreaOn: "You can drop it",
    deleteLayout: "Delete layout"
};

var _widthSize = {
    fit: null,
    small: "75%",
    medium: "50%",
    large: "25%"
};

function Layout(){
}

exports.Layout = helpers.defineClass(Layout, null, {
    toggleAuthoring: function(isOn){
        var self = this;
        if (isOn) {
            if (!this.layoutAuthoring) {
                if (!this.box.getArticle().isAuthoringDisabled) {
                    (this.layoutAuthoring = new layoutAuthoring.LayoutAuthoring()).begin(this);
                }
            }
        }
        else {
            if (this.layoutAuthoring) {
                this.layoutAuthoring.end();
                document.controller.disposeObject(this.layoutAuthoring);
                delete this.layoutAuthoring;
            }
        }
    },
    convertLayout: function(oldLayout){
        layoutAuthoring.convertLayout(this, oldLayout);
    },
    toggleEmptyLayout: function(enable){
        var $$container = (this.$layout.$layoutType == "tabs") ? this._$$tabs : this.$$container;
        if (enable) {
            if (this.items.length != 0) {
                this.toggleEmptyLayout(false);
            }
            else {
                if (!this.empty) {
                    var $$drop = $("<div class='s-author-empty-drop'/>");
                    this.empty = {
                        $$item: $("<div class='s-author-empty'/>").appendTo($$container),
                        $$dropIcon: $("<div class='s-author-empty-drop-icon'/>").addClass("s-layout-" + this.$layout.$layoutType).appendTo($$drop),
                        $$dropText: $("<div class='s-author-empty-drop-text'/>").text(_localize.emptyDropArea).appendTo($$drop)
                    };
                    this.empty.$$item.append(this.empty.$$drop = $$drop).append(this.empty.$$delete = $("<a class='s-author-layout-delete'/>").text(_localize.deleteLayout));
                }
            }
        }
        else {
            if (this.empty) {
                this.empty.$$item.remove();
                delete this.empty;
            }
        }
    },
    appendNewItem: function(options){
        var oldLayout = options.newItem.layoutParent;
        if (oldLayout) {
            //oldlayout is null for item added by authoring
            var newItemIndex = oldLayout.getItemIndex(options.newItem);
            oldLayout.$layout.$items.splice(newItemIndex, 1);
            oldLayout.items.splice(newItemIndex, 1);
            if (this != oldLayout) {
                layoutAuthoring.onItemMovedOut(oldLayout, options.newItem, true);
            }
        }
        this.toggleEmptyLayout(false);
        options.newIndex = this.$layout.$items.length + 1; //default push at end
        if (options.action) {
            options.newIndex = this.getItemIndex(options.targetItem);
            if (options.action == "insertAfter") {
                options.newIndex++;
            }
        }
        this.$layout.$items.splice(options.newIndex, 0, options.newItem.$item);
        this.items.splice(options.newIndex, 0, options.newItem);
        (options.newItem.boxParent = this.box).getArticle().idMap[options.newItem.id] = options.newItem;
        options.newItem.layoutParent = this;
        
        if (options.load) {
            this.renderChildItem(options.newItem);
        }
        else {
            this._wrapInSlot(options.newItem)
            options.newItem.$$item.appendTo(options.newItem.$$container);
        }
        if (options.action) {
            if (options.targetItem.$$container == options.newItem.$$container) {
                options.newItem.$$item[options.action](options.targetItem.$$item);
            }
            else {
                options.newItem.$$container[options.action](options.targetItem.$$container);
            }
        }
        options.load = false;
        if (this.box.authoringNode) {
            if (options.newItem.authoringNode.parentNode != this.box.authoringNode) {
                this.box.authoringNode.appendChildItem(options);
            }
        }
        if (options.newItem.authoringNode) {
            options.newItem.authoringNode.selectItem(options.doSelectItem);
        }
    },
    getItemIndex: function(item){
        for (var ii = 0; ii < this.$layout.$items.length; ii++) {
            if (this.$layout.$items[ii] == item.$item) {
                return ii;
            }
        }
        return -1;
    },
    applySeparatorsVisibility: function(){
        if (this.$layout.$layoutType == "stack") {
            var visible = this.box.$item.$isSeparatorsVisible;
            var css = this.box.$skin + "-border-cell";
            this.items.forEach(function(item, index){
                if (item.$layout) {
                    document.site.toggleClass(item.$$container[0], css, visible);
                }
            });
            if (this.layoutAuthoring) {
                this.items.forEach(function(item, index){
                    if (item.$layout) {
                        document.site.toggleClass(item.$$container[0], "s-author-layout-stack", !visible);
                    }
                });
            }
        }
    },
    _wrapInSlot: function(item){
        /*if (!this.$layout.$layoutType || this.$layout.$layoutType == "stack") {
         this.$layout.$layoutType = "side";
         }*/
        if (this.$layout.$layoutType == "side") {
            var slot = document.createElement("div");
            slot.style.display = "inline-block";
            slot.style.verticalAlign = "top";
            slot.setAttribute("data-s-layout", "side");
            if (this.$layout.$layoutCss) {
                slot.className = this.$layout.$layoutCss;
            }
            item.$$container = $(this.$$container[0].appendChild(slot));
        }
        else {
            if (this.$layout.$layoutType == "row") {
                if (!this.sideRow) {
                    this.sideRow = document.createElement("div");
                    this.sideRow.style.display = "table";
                    this.sideRow.style.width = "100%";
                    this.$$container[0].appendChild(this.sideRow);
                }
                var slot = document.createElement("div");
                slot.style.display = "table-cell";
                slot.style.verticalAlign = "bottom";
              //  slot.style.width = (100 / (this.$layout.$items.length || 0)) + "%";
                slot.setAttribute("data-s-layout", "row");
                if (this.$layout.$layoutCss) {
                    slot.className = this.$layout.$layoutCss;
                }
                item.$$container = $(this.sideRow.appendChild(slot));
            }
            else {
                if (item.$layout) {
                    var slot = document.createElement("div");
                    if (item.$layout.$layoutCss) {
                        slot.className = item.$layout.$layoutCss;
                    }
                    item.$$container = $(this.$$container[0].appendChild(slot));
                    /* if (this.box.$item.$isSeparatorsVisible !== undefined) {
                     item.$$container.toggleClass(this.box.$skin + "-border-top", this.box.$item.$isSeparatorsVisible);
                     }*/
                    if (item.$layout.$id) {
                        slot.setAttribute("id", item.$layout.$id);
                    }
                }
                else {
                    item.$$container = this.$$container;
                }
            }
        }
    },
    renderChildItem: function(item){
        item.layoutParent = this;
        this._wrapInSlot(item);
        if (item.$layout) {
            item.render();
            if (document.site.authoringView) {
                item.toggleAuthoring(true);
            }
        }
        else {
            item.loadBox();
            if (this.box.authoringNode) {
                this.box.authoringNode.appendChildItem({
                    newItem: item
                });
            }
        }
    },
    setFieldWidth: function(field){
        var $width = this.box.$item.$fieldsWidth;
        if ($width && field.domValueSlot) {
            var style = field.domValueSlot.style;
            style.maxWidth = null;
            style.paddingRight = null;
            var sizeValue = _widthSize[field.$item.$width = $width];
            if (sizeValue !== undefined) {
                style.paddingRight = sizeValue;
            }
            else {
                if (!field.$isLayoutContentSizeDisabled) {
                    var $width = document.site.getFieldWidth(field.$field.$type, field.$field.$format);
                    var widthValue = $width.$width;
                    if ($width.$charWidth) {
                        widthValue = ($width.$charWidth * ((field.$field.$constraints ? field.$field.$constraints.$size : null) || $width.$size));
                    }
                    style.maxWidth = widthValue + "em";
                    if (field.layoutParent && widthValue > field.layoutParent.fieldMaxWidth) {
                        field.layoutParent.fieldMaxWidth = widthValue;
                    }
                }
            }
        }
    },
    render: function(refresh){
        var self = this;
        var isLargest = self.box.$item.$fieldsWidth == "largest";
        if (isLargest) {
            self.$$container[0].visibility = "hidden"
            self.fieldMaxWidth = 0;
        }
        if (refresh) {
            self.items.forEach(function(item){
                if (item) {
                    if (item.$layout) {
                        item.render(true);
                    }
                    else {
                        self.setFieldWidth(item);
                    }
                }
            });
        }
        else {
            self.items = [];
            self.$layout.$items.forEach(function($item){
                var item;
                if ($item.$layoutType) {
                    item = document.itemFactory.createLayout(self.box, $item);
                }
                else {
                    item = document.itemFactory.create($item, self.box);
                }
                if (item) {
                    self.items.push(item);
                    self.renderChildItem(item);
                }
            });
        }
        if (isLargest) {
            self.items.forEach(function(item){
                if (item.domValueSlot && !item.$isLayoutContentSizeDisabled) {
                    item.domValueSlot.style.maxWidth = self.fieldMaxWidth + "em";
                }
            });
            self.$$container[0].visibility = null;
        }
    },
    dispose: function(){
        var self = this;
        if (self.items) {
            self.items.forEach(function(item){
                if (item && item.$layout) {
                    document.controller.disposeObject(item);
                }
            });
        }
        delete self.layoutParent;
        delete self.box;
    }
});
