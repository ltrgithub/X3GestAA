"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _templatePattern = /(\{.*?\})/g;

function Box(){
}

exports.Box = helpers.defineClass(Box, null, {
    applyDesignMetaData: function(metadata, onAuthoring){
        var self = this;
        self.setState(metadata);
        
        if (!self.$isTabLayout) {
            if (metadata.$isTitleHidden !== undefined) {
                self.$item.$isTitleHidden = metadata.$isTitleHidden;
                if (self.$$header) {
                    self.$$header[0].style.display = metadata.$isTitleHidden ? "none" : "";
                }
            }
            if (metadata.$isBoxCollapsable !== undefined) {
                self.applyCollapsable(self.$item.$isBoxCollapsable = metadata.$isBoxCollapsable);
            }
            if (metadata.$isSeparatorsVisible !== undefined) {
                self.$item.$isSeparatorsVisible = metadata.$isSeparatorsVisible;
                if (self.layoutContent) {
                    self.layoutContent.applySeparatorsVisibility();
                }
            }
        }
        
        if (metadata.$isMaximizable !== undefined) {
            if (self.$item.$isMaximizable = metadata.$isMaximizable) {
                self._appendButton("maximize");
            }
            else {
                self._removeButton("maximize");
            }
        }
        if (onAuthoring !== false) {
            if (metadata.$field$width !== undefined) {
                self.$item.$field$width = metadata.$field$width;
            }
            if (metadata.$field$isTopLabelAlignment !== undefined) {
                self.$item.$field$isTopLabelAlignment = metadata.$field$isTopLabelAlignment;
            }
            if (metadata.$field$isRightTextLabelAlignment !== undefined) {
                self.$item.$field$isRightTextLabelAlignment = metadata.$field$isRightTextLabelAlignment;
            }
            if (metadata.$field !== undefined) {
                self.$item.$field = self.$item.$field || {};
                Object.keys(metadata.$field).forEach(function($prop){
                    self.$item.$field[$prop] = metadata.$field[$prop];
                });
            }
            if (metadata.$layout !== undefined) {
                var oldLayout = self.layoutContent;
                oldLayout.toggleAuthoring(false);
                //$newLayout.$items = oldLayout.$layout.$items;
                self.layoutContent = document.itemFactory.createLayout(self, metadata.$layout);
                self.$item.$layout = metadata.$layout;
                self.layoutContent.convertLayout(oldLayout);
                document.controller.disposeObject(oldLayout);
            }
        }
    },
    _collapse: function(show, isFirstTime){
        var self = this;
        self.getPage().externalAdapter.onBoxToggle({
            box: self,
            open: show,
            isFirstTime: isFirstTime,
            doEvent: function(){
                self.$$collapse.toggleClass("s-open", show);
                self.openBox(show);
            }
        });
    },
    _ensureAccordion: function(){
        var accordion = (this.boxParent.accordions = this.boxParent.accordions || {})[this.$item.$accordionId];
        if (!accordion) {
            accordion = (this.boxParent.accordions[this.$item.$accordionId] = {});
        }
        return accordion;
    },
    applyCollapsable: function($isBoxCollapsable){
        var self = this;
        if ($isBoxCollapsable) {
            if (!self.$$collapse) {
                var btn = document.createElement("a");
                btn.className = "s-open " + self.$skin + "-opener";
                self.$$collapse = $(btn).prependTo(self.$$header);
                if (self.$item.$opened === false) {
                    self.$$collapse.toggleClass("s-open", false);
                }
                else {
                    if (self.$item.$accordionId) {
                        self._ensureAccordion().openedId = self.id;
                    }
                }
                self.$$collapse.bind("click", function(event){
                    var show = !self.$$collapse.hasClass("s-open"), isFirstTime = !self.loaded || false;
                    if (self.$item.$accordionId) {
                        var accordion = self._ensureAccordion();
                        if (accordion.openedId) {
                            if (accordion.openedId == self.id) {
                                return false;
                            }
                            var opened = self.getArticle().idMap[accordion.openedId];
                            if (opened) {
                                opened._collapse(false, false);
                            }
                            accordion.openedId = self.id;
                        }
                    }
                    self._collapse(show, isFirstTime);
                    return false;
                });
            }
        }
        else {
            if (self.$$collapse) {
                self.$$collapse.unbind().remove();
                delete self.$$collapse;
            }
        }
    },
    _loadChildItem: function(item, layoutParent, $$container){
    
    },
    getArticle: function(){
        return this.boxParent ? this.boxParent.getArticle() : null;
    },
    getPage: function(){
        if (!this.page) {
            this.page = this.getArticle().getPage();
        }
        return this.page;
    },
    loadBox: function(){
        this.$authoringLevel = this.$authoringLevel || "block";
        this.drawBox();
    },
    getTitle: function(){
        return (this.$$title ? this.$$title.text() : null) || this.$item.$title || this.id;
    },
    renderTitle: function($title){
        if (this.$$title) {
            this.$$title.empty();
            if ($title.indexOf("{") < 0) {
                this.$$title.append($title);
            }
            else {
                this._renderExpression($title, this.$$title, this.$skin + "-title-field", false);
            }
        }
    },
    renderDescription: function($description){
        if (this.$isTabLayout) {
            this.$$title[0].title = $description; //to improve manage expression
        }
        else {
            if (!this.$$description) {
                var div = document.createElement("div");
                div.className = this.$skin + "-description";
                this.$$description = $(div).appendTo(this.$$header);
            }
            if ($description.indexOf("{") < 0) {
                this.$$description.append($description);
            }
            else {
                this._renderExpression($description, this.$$description, this.$skin + "-description-field", false);
            }
        }
    },
    _ensureSkin: function(blockType){
        this.$skin = this.$item.$skin;
        if (!this.$skin) {
            var $layoutOptions = this.getArticle().$layoutOptions || this.getPage().$layoutOptions;
            if ($layoutOptions) {
                this.$skin = $layoutOptions[blockType];
            }
            
        }
    },
    drawBox: function(){
        this.$skin = this.$skin || this.$item.$skin;
        if (this.$item.$expression) {
            var div = document.createElement("div");
            if (this.$item.$css) {
                div.className = this.$item.$css;
            }
            this.$$item = $(div).appendTo(this.$$container);
            this.$isEditMode = this.getArticle().$isEditMode;
            this._renderExpression(this.$item.$expression, this.$$item);
        }
        else {
            if (!this.$$body) {
                //this.$$body is set only if called from _convertTabToPanelLayout 
                var div = document.createElement("div");
                div.style.display = "none";
                this.$$body = $(div);
            }
            if (this.$isTabLayout) {
                this.layoutParent.wrapTabBody(this);
            }
            else {
                var div = document.createElement(this.$htmlTag || "div");
                div.className = this.$skin;
                this.$$item = $(div).appendTo(this.$$container);
                this.$$body.addClass(this.$skin + "-body").appendTo(this.$$item);
            }
            if (this.$item.$width) {
                this.$$item.css("width", this.$item.$width);
            }
            if (this.$item.$css) {
                this.$$item.addClass(this.$item.$css);
            }
            if (this.$isTabLayout || this.$item.$title) {
                this.appendHeader();
            }
            if (this.$item.$accordionId) {
                this.$item.$isBoxCollapsable = true;
                this.$item.$opened = this.$item.$opened === true;
            }
            this.applyDesignMetaData(this.$item, false);
            this.openBox(!this.$isTabLayout && this.$item.$opened !== false);
        }
    },
    appendHeader: function($$container, hideHeader){
        var self = this;
        if (self.$isTabLayout) {
            self.layoutParent.appendChildTab(self);
        }
        else {
            var div = document.createElement(self.$headerTag || "header");
            div.className = self.$skin + "-head";
            if (self.$item.$isTitleHidden || hideHeader) {
                div.style.display = "none"; //used by porletfield
            }
            self.$$header = $(div);
            
            div = document.createElement("div");
            div.className = self.$skin + "-title";
            self.$$title = $(div).appendTo(self.$$header);
            self.$$header.prependTo($$container || self.$$item);
        }
        self.renderTitle(self.$item.$title || (self.$field ? self.$field.$title : null) || self.id);
        if (self.$item.$description) {
            self.renderDescription(self.$item.$description);
        }
        if (self.$item.$css) {
            self.$$header.addClass(self.$item.$css);
        }
    },
    _appendButton: function($btnId){
        if (!this._$$buttonsSlot) {
            this._appendButtonsSlot();
        }
        var btn = document.createElement("a");
        btn.className = this.$skin + "-" + $btnId;
        this._$$buttonsSlot.append(this[$btnId + "Btn"] = btn);
    },
    _removeButton: function($btnId){
        if (this._$$buttonsSlot) {
            var name = $btnId + "Btn";
            if (this[name]) {
                $(this[name]).remove();
                delete this[name];
            }
            if (this._$$buttonsSlot.children().length == 0) {
                this.$$item.unbind(".buttons");
                this._$$buttonsSlot.undelegate().remove();
                delete this._$$buttonsSlot;
            }
            
        }
    },
    _appendButtonsSlot: function(){
        var self = this;
        var div = document.createElement("div");
        
        //div.style.visibility = "hidden";
        self._$$buttonsSlot = $(div);
        if (self.$isTabLayout || !self.$$header) {
            div.className = self.$skin + "-actions-body";
            self._$$buttonsSlot.prependTo(self.$$body);
        }
        else {
            div.className = self.$skin + "-actions";
            self._$$buttonsSlot.appendTo(self.$$header);
        }
        self._$$buttonsSlot.delegate("a", "click", function(event){
            event.stopPropagation();
            self[$(this).attr('class').replace(self.$skin, "").slice(1)]();
        });
        /* self.$$item.bind("mouseenter.buttons mouseleave.buttons", function(event){
         self._$$buttonsSlot[0].style.visibility = event.type == "mouseenter" ? "visible" : "hidden";
         });*/
    },
    _renderLayoutContent: function(){
        this.layoutContent = document.itemFactory.createLayout(this, this.$item.$layout);
        this.layoutContent.$$container = this.$$body;
        this.layoutContent.render();
        if (document.site.authoringView) {
            this.layoutContent.toggleAuthoring(true);
        }
    },
    _renderExpression: function(expression, $$container, $fieldCss, $isEditMode){
        var self = this;
        var article = self.getArticle();
        var html = expression;
        if (expression[1] == "@") {
            var text = article.parseExpression(expression);
            if ($$container) { //!important used by expression
                $$container.text(text);
            }
            return text;
        }
        var matches = expression.match(_templatePattern);
        matches.forEach(function(match){
            var field = match.substr(1, match.length - 2);
            html = html.replace(match, "<div data-s-match='" + field + "'>" + match + "</div>");
        });
        var artcleRecord = article.dataset;
        $$container.append(html).find("div").each(function(index, match){
            var $$match = $(match);
            var $name = $$match.attr("data-s-match");
            if ($name.charAt(0) == "$") {
                var value = article.matchProperty($name, artcleRecord);
                if (value != null) {
                    if (value.indexOf && value.indexOf("{") >= 0) {
                        self._renderExpression(value, $$match.empty(), $fieldCss, $isEditMode);
                    }
                    else {
                        $$match.text(value);
                    }
                }
            }
            else {
                document.itemFactory.load($$match.empty(), {
                    $isMenusDisabled: true,
                    $isExpressionChild: true,
                    $bind: $name,
                    $inplace: true,
                    $isEditMode: $isEditMode === undefined ? self.$isEditMode : $isEditMode,
                    $css: "s-expression " + $fieldCss,
                    $skin: "s-inplace"
                }, article);
            }
        });
    },
    openBox: function(open){
        if (open && !this.loaded) {
            this._renderLayoutContent();
            this.loaded = true;
        }
        if (this.$isTabLayout) {
            this.layoutParent.openTab(this, open);
        }
        this.$$body[0].style.display = open ? "" : "none";
        if (this.$item.onOpen) {
            this.$item.onOpen(this);
        }
    },
    setState: function(state){
        if (state.$isHidden !== undefined) {
            this.$$item.toggle(!(this.$item.$isHidden = state.$isHidden));
            if (this.$isTabLayout) {
                this.$$header.toggle(!this.$item.$isHidden);
            }
        }
    },
    maximize: function(callback){
        document.site.maximizeBox(this, callback);
    },
    minimize: function(callback){
        document.site.minimizeBox(this, callback);
    },
    openDialog: function(options){
        options.boxParent = this;
        var dialog = document.site.openDialog(options);
        (this._dialogs = this._dialogs || {})[dialog.id] = dialog;
        return dialog;
    },
    _closeChildrenDialogs: function(){
        var self = this;
        if (self._dialogs) {
            Object.keys(self._dialogs).forEach(function(dialogId){
                self._dialogs[dialogId].close();
                delete self._dialogs[dialogId];
            });
        }
    },
    dispose: function(){
        if (this.$$item) {
            this.$$item.unbind();
        }
        if (this._$$buttonsSlot) {
            this._$$buttonsSlot.undelegate();
            delete this._$$buttonsSlot;
        }
        this._closeChildrenDialogs();
        this.applyCollapsable(false);
        delete this.page;
        delete this.tabOpened;
    }
});
