"use strict";
var helpers = require('syracuse-core/lib/helpers');

function MenusFacade(parent, dataset){
    this.items = {};
    this.$menus = {};
    this.boxes = [];
    this.dataset = dataset;
}

exports.MenusFacade = helpers.defineClass(MenusFacade, null, {
    bindBox: function(box){
        var self = this;
        self.boxes.push(box);
        if (self.$menus) {
            Object.keys(self.$menus).forEach(function($bind){
                var item = self.items[$bind];
                if (!item || (item.length == 0)) {
                    box.addMenuItem(self.$menus[$bind], self.dataset);
                }
            });
        }
    },
    bindItem: function(item){
        item.menusFacade = this;
        var bounds = this.items[item.$item.$bind];
        if (!bounds) {
            bounds = this.items[item.$item.$bind] = [];
        }
        bounds.push(item);
        var $menu = this.$menus[item.$item.$bind];
        if ($menu) {
            item.setMenu($menu);
        }
    },
    unbindItem: function(item){
        if (this.items) {
            var bounds = this.items[item.$item.$bind];
            if (bounds) {
                for (var ii = 0; ii < bounds.length; ii++) {
                    if (bounds[ii] == item) {
                        bounds.splice(ii, 1);
                        break;
                    }
                }
            }
        }
        delete item.menusFacade;
    },
    applyActionLinkChange: function(resources, record){
        var self = this;
        if (record) {
            Object.keys(self.items).forEach(function($bind){
                self.items[$bind].forEach(function(menu){
                    menu.setMenu(null, record);
                });
            });
        }
        if (resources) {
            if (resources.$links) {
                self._applyMenuChange(resources.$links, record);
            }
            if (resources.$actions) {
                self._applyMenuChange(resources.$actions, record, true);
            }
        }
    },
    _applyMenuChange: function($deltaMenu, record, $isAction){
        var self = this;
        Object.keys($deltaMenu).forEach(function($bind){
            var $menu = $deltaMenu[$bind];
            $menu.$isAction = $isAction;
            $menu.$bind = $bind;
            var $memMenu = self.$menus[$bind];
            if ($memMenu) {
                Object.keys($menu).forEach(function($property){
                    switch ($property) {
                        case "$links":
                        case "$actions":
                            var $delta = $menu[$property];
                            var $mem = $memMenu[$property] = $memMenu[$property] || {};
                            Object.keys($delta).forEach(function($bind){
                                var $source = $delta[$bind];
                                var $target = $mem[$bind] || {};
                                Object.keys($source).forEach(function($prop){
                                    $target[$prop] = $source[$prop];
                                });
                            });
                            break;
                        default:
                            $memMenu[$property] = $menu[$property];
                            break;
                    }
                });
            }
            else {
                self.$menus[$bind] = $menu;
            }
            var bounds = self.items[$bind];
            if (bounds) {
                bounds.forEach(function(menu){
                    menu.setMenu($menu, record);
                });
            }
            else {
                self.boxes.forEach(function(box){
                    box.addMenuItem($menu, record);
                });
            }
        });
    },
    dispose: function(){
        delete this.items;
        delete this.$menus;
        delete this.boxes;
        delete this.dataset;
    }
});
