"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('./field').Field;
var _formatApi = require('syracuse-ui/lib/common/field/formatApi');

function NumericField(){
}

exports.NumericField = helpers.defineClass(NumericField, Field, {
    initialize: function(){
        this.formatApi = _formatApi.getApi(this.$field.$type);
        this.numFormatObj = _formatApi.getLocale().getNumberFormatObj(this.$field.$type);
        this.localFormat = this.$field.$format || this.numFormatObj.numFormat;
        //this.localFormat = _formatApi.getLocalFormat(this.$field.$type, this.$field.$format);
    
    },
    onInputFocusin: function($$input, event){
        var self = this;
        $$input.toggleClass('s-field-input-error', false);
        var gs = self.numFormatObj.groupSeparator;
        //var ds = self.numFormatObj.decimalSeparator;
        var gsRegExp = gs == " " ? new RegExp("\\s", "g") : new RegExp("[" + gs + "]", "g");
        //var dsRegExp = new RegExp("["+ds+"]","g");
        var editVal = $$input.val().split(gsRegExp).join('');
        this.$$input.val(editVal);
    },
    onInputFocusout: function($$input, event){
        var self = this;
        if (!self.valHasChanged) {
            var ds = self.numFormatObj.decimalSeparator;
            var rawNum = ds != '.' ? $$input.val().replace(new RegExp("[" + ds + "]"), '.') : $$input.val();
            var numObj = self.formatApi.parse(rawNum);
            // displaying formatted num
            self.$$input.val(self.formatApi.format(numObj, self.localFormat))
        }
        else {
            self.valHasChanged = false;
        }
    },
    setDataValue: function(value, record){
        var formattedNum = '';
        this.currentValue = value;
        if (value) {
            // building formatted value
            var numObj = this.formatApi.parse(value);
            formattedNum = this.formatApi.format(numObj, this.localFormat);
        }
        if (this.$isEditMode) {
            this.$$input.val(formattedNum);
        }
        else {
            this.$$dataValue.empty();
            if (formattedNum && this.$field.$links && this.$field.$links.$details && !this.$item.$isMenusDisabled) {
                this.appendDetailLink(this.$$dataValue, formattedNum, this.$field.$links.$details);
            }
            else {
                this.$$dataValue.text(formattedNum);
            }
        }
    },
    onInputChange: function($$input, event){
        /*
         var self = this;
         if (self.editController(self,$$input.val())) {
         self.onInputValidate(event);
         }
         var self = this;
         */
        // handle formatting
        var self = this;
        self.valHasChanged = true;
        var errors = [];
        if ($$input.val() != '') {
            var err = _formatApi.formatInput(self, $$input);
            if (err) 
                errors.push(err);
        }
        if (document.editFieldController.validate(self, $$input.val(), errors)) {
            self.onInputValidate(event);
        }
    },
    onInputValidate: function(event){
        var newValue = (this.formatApi.parse(this.$$input.val(), this.localFormat)).toString();
        if (newValue) {
            document.editFieldController.notifyChange(this, newValue);
        }
    },
    onInputKeypress: function($$input, event){
        /*
         var self = this;
         var type = self.$field.$type;
         
         // === building regexp ===
         var pattern = "0-9+-";
         var decimal = ".,";
         var regex;
         pattern += type == "application/x-decimal" ? decimal : '';
         regex = new RegExp("[" + pattern + "]");
         */
        /*
         // === blocking alphabetic characters ===
         var key = event.which;
         var c = String.fromCharCode(key);
         if (event.ctrlKey || event.altKey || event.metaKey || key < 32) {
         return true;
         }
         if (/[a-zA-Z]/g.test(c)) {
         event.preventDefault();
         return false;
         }*/
        var self = this;
        // format properties
        var numFormatObj = self.numFormatObj;
        var gs = numFormatObj.groupSeparator;
        
        // -- building regex pattern --
        var chars_ok = "0-9-+"; // digits and signs
        chars_ok += self.$field.$type == "application/x-integer" ? '' : '.,';
        chars_ok += gs == " " ? "\\s" : gs;
        
        var regex = new RegExp("[" + chars_ok + "]");
        
        // -- blocking forbidden characters --
        var key = event.which;
        var c = String.fromCharCode(key);
        if (event.ctrlKey || event.altKey || event.metaKey || key < 32) {
            return true;
        }
        if (!regex.test(c)) {
            // error color
            $$input.toggleClass('s-field-input-error', true);
            event.preventDefault();
            return false;
        }
        else {
            $$input.toggleClass('s-field-input-error', false);
        }
    },
    onInputKeydown: function($$input, event){
        // handling escape button
        /*
         var key = event.which;
         var self = this;
         var $$input = self.$$input;
         if (key == '27') {
         var numObj = self.formatApi.parse($$input.val());
         $$input.val(self.formatApi.format(numObj, self.localFormat));
         event.preventDefault();
         return false;
         }
         */
    },
    format: function(val, format){
        return this.formatApi.format(val, format);
    },
    validateType: function(errors, value){
        /*
         switch (this.$field.$type) {
         case 'application/x-integer':
         var regex = new RegExp("^[0-9-]+$", "g");
         if (!regex.test(value)) {
         errors.push("invalid value : " + value + " one or many forbidden characters");
         
         }
         else {
         // value has "-"
         if (value.indexOf("-") != -1) {
         // "-" can only be at the beginning
         if (value.indexOf('-') != 0) {
         errors.push("invalid value : " + value + " '-' can only be at the beginning");
         }
         // too many "-"
         if ((value.split("-").length - 1) > 1) {
         errors.push("invalid value : " + value + " too many '-'");
         }
         }
         
         }
         break;
         case 'application/x-decimal':
         case 'application/x-real':
         var regex = new RegExp("^[0-9-.]+$", "g");
         if (!regex.test(value)) {
         errors.push("invalid value : " + value + " one or many forbidden characters");
         }
         else {
         // value has "-"
         if (value.indexOf("-") != -1) {
         // "-" can only be at the beginning
         if (value.indexOf('-') != 0) {
         errors.push("invalid value : " + value + " '-' can only be at the beginning");
         }
         // too many "-"
         if ((value.split("-").length - 1) > 1) {
         errors.push("invalid value : " + value + " too many '-'");
         }
         }
         // value has "."
         if (value.indexOf(".") != -1) {
         // "." can't be at the beginning
         if (value.indexOf('.') == 0) {
         errors.push("invalid value : " + value + " '.' can't be at the beginning");
         
         }
         // too many "."
         if ((value.split(".").length - 1) > 1) {
         errors.push("invalid value : " + value + " too many '.' ");
         }
         }
         }
         break;
         }
         */
    }
});
