"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('./field').Field;
var _formatApi = require('syracuse-ui/lib/common/field/formatApi');

function _formatInput(field, $$input){
    var val = $$input.val();
    var type = field.$field.$type;
    var numFormatObj = field.numFormatObj;
    var ds = numFormatObj.decimalSeparator;
    var gs = numFormatObj.groupSeparator;
    
    var chars_ok = "0-9-+";
    
    // for decimal values, removing invalid chars and setting '.' as decimal separator (javascript float)
    if (type == "application/x-decimal" || type == "application/x-real") {
    
        chars_ok += ds;
        
        if (gs != ".") {
            var regexp = new RegExp("[^" + chars_ok + "." + "]", "g");
            val = val.replace(regexp, '');
        }
        else {
            var regexp = new RegExp("[^" + chars_ok + "]", "g");
            val = val.replace(regexp, '');
        }
        
        if (ds != ".") {
            var regexp = new RegExp(ds, "g");
            val = val.replace(regexp, '.');
        }
    }
    // for integer values, removing invalid chars
    else {
        var regexp = new RegExp("[^" + chars_ok + "]", "g");
        val = val.replace(regexp, '');
    }
    
    val = type == "application/x-decimal" ? parseFloat(val) : parseInt(val, 10);
    
    // control
    if (isNaN(val)) {
        throw new Error("invalid number : " + val);
    }
    
    // formatting
    $$input.val(field.formatApi.format(field.formatApi.parse(val), field.localFormat));
}


function NumericField(){
}

exports.NumericField = helpers.defineClass(NumericField, Field, {
    initialize: function(){
        this.formatApi = _formatApi.getApi(this.$field.$type);
        this.numFormatObj = _formatApi.getLocale().getNumberFormatObj(this.$field.$type);
        this.localFormat = this.$field.$format || this.numFormatObj.numFormat;
        //this.localFormat = _formatApi.getLocalFormat(this.$field.$type, this.$field.$format);
    
    },
    onInputFocusin: function($$input, event){
        var self = this;
        $$input.toggleClass('s-field-input-error', false);
        var gs = self.numFormatObj.groupSeparator;
        //var ds = self.numFormatObj.decimalSeparator;
        var gsRegExp = gs == " " ? new RegExp("\\s", "g") : new RegExp("[" + gs + "]", "g");
        //var dsRegExp = new RegExp("["+ds+"]","g");
        var editVal = $$input.val().split(gsRegExp).join('');
        this.$$input.val(editVal);
        Field.prototype.onInputFocusin.call(this, $$input, event);
    },
    onInputFocusout: function($$input, event){
        try {
            var self = this;
            if (!self.valHasChanged) {
                var ds = self.numFormatObj.decimalSeparator;
                var rawNum = ds != '.' ? $$input.val().replace(new RegExp("[" + ds + "]"), '.') : $$input.val();
                var numObj = self.formatApi.parse(rawNum);
                // displaying formatted num
                self.$$input.val(self.formatApi.format(numObj, self.localFormat))
            }
            else {
                self.valHasChanged = false;
            }
        } 
        catch (error) {
            this.showErrors([error.message]);
        }
        Field.prototype.onInputFocusout.call(this, $$input, event);
    },
    setDataValue: function(value, record){
        try {
            var formattedNum = '';
            this.currentValue = value;
            if (value) {
                // building formatted value
                var numObj = this.formatApi.parse(value);
                formattedNum = this.formatApi.format(numObj, this.localFormat);
            }
            if (this.$isEditMode) {
                this.$$input.val(formattedNum);
            }
            else {
                this.$$fieldValue.empty();
                if (formattedNum && this.$field.$links && this.$field.$links.$details && !this.$item.$isMenusDisabled) {
                    this.appendDetailLink(this.$$fieldValue, formattedNum, this.$field.$links.$details);
                }
                else {
                    this.$$fieldValue.text(formattedNum);
                }
            }
        } 
        catch (error) {
            this.showErrors([error.message]);
        }
    },
    getDataValue: function(){
        return this.formatApi.parse(this.$$input.val(), this.localFormat).toString();
    },
    onInputChange: function($$input, event){
        try {
            // handle formatting
            var self = this;
            self.valHasChanged = true;
            var errors = [];
            if ($$input.val() != '') {
                var err = _formatInput(self, $$input);
                if (err) 
                    errors.push(err);
            }
            if (document.fieldController.validate(self, $$input.val(), errors)) {
                self.onInputValidate(event);
            }
        } 
        catch (error) {
            this.showErrors([error.message]);
        }
    },
    onInputValidate: function(event){
        try {
            var newValue = this.getDataValue();
            if (newValue) {
                document.fieldController.notifyChange(this, newValue);
            }
        } 
        catch (error) {
            this.showErrors([error.message]);
        }
    },
    onInputKeypress: function($$input, event){
        /*
         var self = this;
         var type = self.$field.$type;
         
         // === building regexp ===
         var pattern = "0-9+-";
         var decimal = ".,";
         var regex;
         pattern += type == "application/x-decimal" ? decimal : '';
         regex = new RegExp("[" + pattern + "]");
         */
        /*
         // === blocking alphabetic characters ===
         var key = event.which;
         var c = String.fromCharCode(key);
         if (event.ctrlKey || event.altKey || event.metaKey || key < 32) {
         return true;
         }
         if (/[a-zA-Z]/g.test(c)) {
         event.preventDefault();
         return false;
         }*/
        var self = this;
        // format properties
        var numFormatObj = self.numFormatObj;
        var gs = numFormatObj.groupSeparator;
        
        // -- building regex pattern --
        var chars_ok = "0-9-+"; // digits and signs
        chars_ok += self.$field.$type == "application/x-integer" ? '' : '.,';
        chars_ok += gs == " " ? "\\s" : gs;
        
        var regex = new RegExp("[" + chars_ok + "]");
        
        // -- blocking forbidden characters --
        var key = event.which;
        var c = String.fromCharCode(key);
        if (event.ctrlKey || event.altKey || event.metaKey || key < 32) {
            return true;
        }
        if (!regex.test(c)) {
            // error color
            $$input.toggleClass('s-field-input-error', true);
            event.preventDefault();
            return false;
        }
        else {
            $$input.toggleClass('s-field-input-error', false);
        }
    },
    onInputKeydown: function($$input, event){
        // handling escape button
        /*
         var key = event.which;
         var self = this;
         var $$input = self.$$input;
         if (key == '27') {
         var numObj = self.formatApi.parse($$input.val());
         $$input.val(self.formatApi.format(numObj, self.localFormat));
         event.preventDefault();
         return false;
         }
         */
    },
    format: function(val, format){
        return this.formatApi.format(val, format);
    },
    validateType: function(errors, value){
    
    }
});
