"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var localize = require('syracuse-ui/lib/common/controller/localize').list;
var Pager = require("syracuse-ui/lib/desktop/field/collection/pager").Pager;
var Field = require('syracuse-ui/lib/common/field/field').Field;

var DEFAULT_RECORDS_COUNT = 20;

var _selector = {
    multi: {
        title: "<input class='s-list-selector-all' type='checkbox'/>",
        record: "<input class='s-list-selector' type='checkbox'/>",
        css: "-flag-cell",
        titleCss: "-flag-th",
        hasColumn: true
    },
    single: {
        title: "",
        record: "<input class='s-list-selector' type='radio'/>",
        css: "-flag-cell",
        titleCss: "-flag-th",
        hasColumn: true
    },
    button: {
        title: "",
        record: "<a class='s-list-selector'>" + localize.select + "</a>",
        css: "-selector-button",
        titleCss: "-flag-th",
        hasColumn: true
    },
    row: {
        isRowMode: true
    }
};


function RawList(){
}

exports.RawList = helpers.defineClass(RawList, Article, {
    _initilializeList: function(){
        var self = this;
        var isFilterCapability;
        
        self.selectedRecords = {};
        (self.$binds = Object.keys((self.$fields = self.$prototype.$item.$) || {})).forEach(function($bind){
            var $field = self.$fields[$bind];
            $field.$capability = {};
            if ($field.$capabilities) {
                $field.$capabilities.split(",").forEach(function($prop){
                    if ($prop == "filter") {
                        isFilterCapability = true;
                    }
                    $field.$capability[$prop] = true;
                });
            }
        });
        var articleParent = self.getArticleParent();
        self.$recordFacet = articleParent.$item.$recordFacet || self.$facet || "$details";
        switch (articleParent.$facet) {
            case "$lookup":
                self.$item.$selectMode = "button";
                break;
            case "$select":
                self.$item.$selectMode = "multi";
                break;
        }
        self.$isEditMode = self.$item.$isEditMode;
        if (self.$isEditMode === undefined) {
            self.$isEditMode = articleParent.$isEditMode;
        }
        self.applySettings(self.$prototype);
        self.$totalResults = 0;
        if (isFilterCapability && self.$item.$isQuickFilter !== false) {
            self.$item.$isQuickFilter = true;
        }
        
        if (!self.$item.$layout) {
            self.$item.$layout = {};
        }
        if (!self.$item.$layout.$items) {
            self.$item.$layout.$items = self.$binds.map(function($bind){
                return {
                    $bind: $bind
                };
            });
        }
    },
    createBuilder: function(){
    },
    drawBox: function(){
        if (!this.builder) {
            this.$layoutOptions = document.site.$item.$layoutOptions.list;
            this.createBuilder();
            this._initilializeList();
        }
        this.$skinField = this.$item.$inplace ? "s-inplace" : "s-field";
        this.fieldCss = (this.$item.$css) ? (this.$item.$css + " " + this.$skinField) : this.$skinField;
        if (this.$item.$isTopLabelAlignment) {
            this.fieldCss += "-top"
        }
        
        var div = document.createElement("div");
        div.className = this.fieldCss;
        this.$$item = $(div).appendTo(this.$$container);
        
        this.appendTitle();
        
        this._createValueContainer();
        
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        
        this.builder.drawBuilder();
    },
    setDescription: function($description){
        Field.prototype.setDescription.call(this, $description);
    },
    _createValueContainer: function(){
        Field.prototype._createValueContainer.call(this);
    },
    hideTitle: function($isTitleHidden){
        Field.prototype.hideTitle.call(this, $isTitleHidden);
    },
    getTitle: function(){
        return Field.prototype.getTitle.call(this);
    },
    setTitle: function($title){
        Field.prototype.setTitle.call(this, $title);
        if (this.$$title) {
            this.$$title[0].style.display = this.titleText.length == 0 ? "none" : "";
        }
    },
    getLocalizedTitle: function($title){
        if ($title && $title.length > 0 && $title[1] == "@") {
            return this.boxParent._renderExpression($title);
        }
        return $title;
    },
    appendTitle: function(){
        if (!this.$item.$inplace && !this.$item.$isTitleHidden) {
            var label = document.createElement("label");
            label.style.display = "none";
            label.className = this.fieldCss + "-title" + " s-field-title-complex";
            this.$$title = $(label).appendTo(this.$$item);
        }
    },
    appendArticleMenus: function($$container){
        var div = document.createElement("div");
        div.className = "s-list-menus-cell";
        return document.itemFactory.load($(div).appendTo($$container), {
            $category: "links",
            $skin: this.$layoutOptions.menus
        }, this);
    },
    appendSelector: function(){
        if (this.recordSelector = _selector[this.$item.$selectMode]) {
            this.recordSelector.$selectMode = this.$item.$selectMode;
            this._bindRecordSelectors();
        }
        else {
            this.recordSelector = {};
        }
        return this.recordSelector;
    },
    appendEmptyInfo: function(){
        return $("<div/>").addClass(this.$skin + "-no-record").text(localize.noRecords);
    },
    applySettings: function(newData){
        this.$itemsPerPage = newData.$itemsPerPage || this.$itemsPerPage; // || DEFAULT_RECORDS_COUNT;
        this.$startIndex = newData.$startIndex || this.$startIndex || 1;
        this.$orderBy = newData.$orderBy || this.$orderBy || null;
        this.$where = newData.$where || this.$where || null;
        this.$totalResults = newData.$totalResults;
    },
    onNotifyRecordChange: function(updatedRecord, $bind){
        var data;
        if ($bind == "$itemsPerPage") {
            this.fetch({
                $itemsPerPage: parseInt(updatedRecord)
            });
        }
        else {
        
            if (updatedRecord.$uuid) {
                updatedRecord.$index = this.dataset[updatedRecord.$uuid].$recordIndex;
                data = [updatedRecord];
            }
            else {
                data = {};
                data[$bind] = updatedRecord;
            }
        }
        return data;
    },
    applyMetaData: function(metaData){
        Field.prototype.applyMetaData.call(this, metaData);
        return this.applyFieldsMetaData(metaData);
    },
    applyFieldsMetaData: function(metaData){
        var self = this;
        var redraw = false;
        if (metaData.$item) {
            if (metaData.$item.$) {
                Object.keys(metaData.$item.$).forEach(function($bind){
                    var $metaField = metaData.$item.$[$bind];
                    var $field = self.$fields[$bind];
                    Object.keys($metaField).forEach(function($prop){
                        if ($field[$prop] != $metaField[$prop]) {
                            $field[$prop] = $metaField[$prop];
                            if ($prop == "$isHidden") {
                                redraw = true;
                            }
                        }
                    });
                });
            }
            ["$links", "$actions"].forEach(function($menuType){
                var $newMenus = metaData.$item[$menuType];
                if ($newMenus) {
                    var $menus = self.$prototype.$item[$menuType] = self.$prototype.$item[$menuType] || {};
                    Object.keys($newMenus).forEach(function($bind){
                        var $menu = $menus[$bind] = {};
                        var $newMenu = $newMenus[$bind];
                        Object.keys($newMenu).forEach(function($prop){
                            $menu[$prop] = $newMenu[$prop];
                        });
                    });
                }
            });
        }
        return redraw;
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if (metaData.$width) {
            /* this.$$valueSlot[0].style.paddingRight = {
             fit: null,
             small: "75%",
             medium: "50%",
             large: "25%"
             }[this.$item.$width = metaData.$width];*/
            this.$item.$width = metaData.$width;
            this._drawSize();
            delete metaData.$width;
        }
        Field.prototype.applyDesignMetaData.call(this, metaData, onAuthoring);
        this.builder.applyDesignMetaData(metaData, onAuthoring);
        return this.applyFieldsMetaData(metaData);
    },
    _drawSize: function(){
        var width = this.$item.$width || "100%";
        if (width == "auto") {
        
        }
        else {
            this.$$list[0].style.width = width;
            this.$$core[0].style.width = "100%";
        }
    },
    fetch: function(options, $location){
        var self = this;
        var params = {
            where: self.$where,
            select: self.$select
        };
        if (options) {
            params.startLetter = options.startLetter;
            params.startIndex = options.startIndex;
            params.count = self.$itemsPerPage = options.$itemsPerPage || self.$itemsPerPage;
            if (options.orderBy) {
                params.startIndex = 1;
                self.$orderBy = options.orderBy;
            }
            if (options.filter != null) {
                params.startIndex = 1;
                params.where = self.$where = options.filter != "" ? options.filter : null;
            }
            if (options.queryBindings) {
                if (options.queryBindings.length == 0) {
                    self.$binds.forEach(function($bind){
                        options.queryBindings.push(self.$fields.$bind || $bind);
                    });
                }
                self.select = options.queryBindings.map(function(binding){
                    return binding.replace(/\./g, '/');
                }).join(',');
            }
        }
        params.orderBy = self.$orderBy ? helpers.url.formatOrderBy(self.$orderBy) : null;
        var page = self.getPage();
        page.fetch({
            $updateHitory: page.isMainPage,
            params: params,
            $location: $location
        });
    },
    _selectRecord: function($uuid, selected){
        var recordArticle = this.dataset[$uuid];
        recordArticle.highlightSelection(selected);
        if (selected) {
            this.selectedRecords[$uuid] = recordArticle;
        }
        else {
            delete this.selectedRecords[$uuid];
        }
    },
    removeRecords: function(){
        var self = this;
        Object.keys(self.dataset).forEach(function($uuid){
            self.removeItem(self.dataset[$uuid]);
            delete self.dataset[$uuid];
        });
        self.dataset = {};
        delete self.selectedUiid;
        self.builder.emptyDataBody();
    },
	// FDB public - Called by fusion left list
	clickSelectRecords: function(records) {
        var self = this;
		$.each(records,function(i,r){
			self._selectRecord(r.id,r.sel);
		})
    },
    _bindRecordSelectors: function() {
        var self = this;
        if (self.recordSelector.$selectMode == "row") {
            self.$$item.delegate("tr[data-s-record]", "click", function(event) {
                var $uuid = this.getAttribute("data-s-record");
                var records = [];
                if (self.selectedUiid) {
                    records.push({
                        id: self.selectedUiid,
                        sel: false
                    });
                }
                if (self.selectedUiid == $uuid) {
                    delete self.selectedUiid;
                } else {
                    records.push({
                        id: self.selectedUiid = $uuid,
                        sel: true
                    });
                }
                self.clickSelectRecords(records);
                return false;
            });
        } else {
            self.$$item.delegate(".s-list-selector,.s-list-selector-all", "click", function(event) {
                event.stopPropagation();
                var records = [];
                var $$selector = $(this);
                var selected = self.recordSelector.$selectMode == "button" || $$selector.is(":checked");
                if ($$selector.hasClass("s-list-selector-all")) {
                    self.selectedRecords = {};
                    Object.keys(self.dataset).forEach(function($uuid) {
                        records.push({
                            id: $uuid,
                            sel: selected
                        });
                    });
                } else {
                    var $uuid = ($$selector.is("[data-s-record]") ? $$selector : $$selector.closest("[data-s-record]")).attr("data-s-record");
                    if (self.recordSelector.$selectMode != "multi" && self.selectedUiid) {
                        records.push({
                            id: self.selectedUiid,
                            sel: false
                        });
                    }
                    records.push({
                        id: self.selectedUiid = $uuid,
                        sel: selected
                    });
                }
                self.clickSelectRecords(records);
            });
        }
    },
   /* _bindRecordSelectors: function(){
        var self = this;
        if (self.recordSelector.$selectMode == "row") {
            self.$$item.delegate("tr[data-s-record]", "click", function(event){
                var $uuid = this.getAttribute("data-s-record");
                if (self.selectedUiid) {
                    self._selectRecord(self.selectedUiid, false);
                }
                if (self.selectedUiid == $uuid) {
                    delete self.selectedUiid;
                }
                else {
                    self._selectRecord(self.selectedUiid = $uuid, true);
                }
                var page = self.getPage();
                if (page.onSelectRecord) {
                    page.onSelectRecord(self.selectedRecords);
                }
                return false;
            });
        }
        else {
            self.$$item.delegate(".s-list-selector,.s-list-selector-all", "click", function(event){
                event.stopPropagation();
                var $$selector = $(this);
                var selected = self.recordSelector.$selectMode == "button" || $$selector.is(":checked");
                if ($$selector.hasClass("s-list-selector-all")) {
                    self.selectedRecords = {};
                    Object.keys(self.dataset).forEach(function($uuid){
                        self._selectRecord($uuid, selected);
                        
                    });
                }
                else {
                    var $uuid = ($$selector.is("[data-s-record]") ? $$selector : $$selector.closest("[data-s-record]")).attr("data-s-record");
                    if (self.recordSelector.$selectMode != "multi" && self.selectedUiid) {
                        self._selectRecord(self.selectedUiid, false);
                    }
                    self._selectRecord(self.selectedUiid = $uuid, selected);
                }
                var page = self.getPage();
                if (page.onSelectRecord) {
                    page.onSelectRecord(self.selectedRecords);
                }
            });
        }
    },*/
    setDataBind: function($resources, record, metaData){
        if (this.getPage().externalAdapter.setDataBind(this, $resources, record, metaData)) {
            var redraw = false;
            var self = this;
            if (metaData) {
                redraw = this.applyMetaData(metaData);
            }
            if ($resources !== undefined) {
                self.applySettings(record);
                var body = self._$$body[0];
                body.style.display = "none";
                self.builder.onBeforeDataBinding();
                if (record.$isDelta) {
                    if (self.$totalResults == 0) {
                        self.builder.emptyDataBody();
                    }
                    $resources.forEach(function(record, $recordIndex){
                        var recordArticle = self.dataset[record.$uuid];
                        if (record.$isDeleted) {
                            if (recordArticle) {
                                self.removeItem(recordArticle, true);
                                delete self.dataset[record.$uuid];
                            }
                        }
                        else {
                            if (recordArticle) {
                                recordArticle.applyChange(record);
                            }
                            else {
                                self.builder.appendRecord(record, $recordIndex, true);
                            }
                        }
                    });
                }
                else {
                    if (redraw) {
                        self.builder.onRedrawCore();
                    }
                    /*
                     if (self.$item.$speedTest) {
                     _doSpeedTest(self.$item.$speedTest, $resources);
                     }*/
                    self.removeRecords();
                    if ($resources) {
                        $resources.forEach(function(record, $recordIndex){
                            self.builder.appendRecord(record, $recordIndex);
                        });
                    }
                }
                /*   if ((self.$totalResults = self.$totalResults || Object.keys(self.dataset).length) == 0) {
                 self.builder.appendNoRecordRow();
                 }*/
                self.builder.onAfterDataBinding();
                body.style.display = "";
            }
        }
    },
    dispose: function(){
        if (this.$$item) {
            this.$$item.undelegate();
        }
        if (this.$$designer) {
            this.$$designer.unbind();
        }
        Article.prototype.dispose.call(this);
    }
});
