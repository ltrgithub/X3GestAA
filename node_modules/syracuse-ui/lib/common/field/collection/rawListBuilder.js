"use strict";
var helpers = require('syracuse-core/lib/helpers');

function RawListBuilder(){
}

exports.RawListBuilder = helpers.defineClass(RawListBuilder, null, {
    initialize: function(){
    
    },
    applyDesignMetaData: function(metaData, onAuthoring){
    },
    toggleDataList: function(show){
    },
    drawBuilder: function(){
    
    },
    doCapabilities: function(record, $capability){
    },
    appendRecord: function(options){
        options.record.$uuid = options.record.$uuid || options.$recordIndex;
        var recordArticle = (this.list.dataset[options.record.$uuid] = new this.RecordClass());
        recordArticle.$layoutOptions = this.$layoutOptions;
        recordArticle.$recordUuid = options.record.$uuid;
        recordArticle.$recordIndex = options.$recordIndex;
        recordArticle.$facet = this.list.$recordFacet;
        recordArticle.$isEditMode = this.list.$isEditMode;
        recordArticle.builder = (recordArticle.list = this.list).builder;
        recordArticle.$prototype = options.$prototype || this.list.$prototype.$item;
        recordArticle.isInsert = options.isInsert;
        if (recordArticle.initializeRecord) {
            recordArticle.initializeRecord(options);
        }
        document.itemFactory.initializeItem(recordArticle, options.$item || {}, this.list);
        recordArticle.loadBox(options.record);
        return recordArticle;
    },
    
    emptyDataBody: function(){
        $(this.list._body).empty();
    },
    renderOrderBy: function(){
    },
    onBeforeDataBinding: function(){
    },
    onAfterDataBinding: function(){
        if (this.list._pager) {
            this.list._pager.draw();
        }
        this.renderOrderBy();
    },
    onRedrawCore: function(){
    },
    
    dispose: function(){
        if (this.list) {
            if (this.list.$$item) {
                this.list.$$item.undelegate();
            }
        }
        delete this.menus;
        delete this.$layoutOptions;
        delete this.list;
    }
});
