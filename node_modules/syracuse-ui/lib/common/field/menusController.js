"use strict";
var helpers = require('syracuse-core/lib/helpers');

function MenusController(){
}

exports.MenusController = helpers.defineClass(MenusController, null, {
    load: function(field){
        this.field = field;
    },
    dispose: function(){
        document.controller.disposeObject(this._contextMenu);
        delete this._contextMenu;
        delete this.field;
    },
    _ensureContextMenu: function(){
        if (!this._contextMenu) {
            this._contextMenu = new ContextMenu();
            this._contextMenu.create(this.field, {
                $isBindDisabled: true
            });
        }
    },
    setMenus: function(metaData){
        this._applyChange(metaData.$links);
        this._applyChange(metaData.$actions, true);
    },
    _applyChange: function($menus, $isAction){
        if ($menus === null) {
            if (this._contextMenu) {
                this._contextMenu.remove();
                delete this._contextMenu;
            }
        }
        else {
            if ($menus) {
                var self = this;
                var article = self.field.getArticle();
                var menusKeys = Object.keys($menus);
                if (menusKeys.length == 0) {
                    self._ensureContextMenu();
                    
                }
                else {
                    menusKeys.forEach(function($bind){
                        switch ($bind) {
                            case "$tunnel":
                            case "$details":
                            case "$lookup":
                            case "$select":
                                break;
                            case "$lazyload":
                                self._ensureContextMenu();
                                break;
                            default:
                                var $menu = $menus[$bind];
                                $menu.$bind = ($menu.$sourceBind = $bind) + "-" + self.field.id;
                                self._ensureContextMenu();
                                var bound = article.menuItems[$menu.$bind];
                                if (bound) {
                                    bound[0].setMenu($menu);
                                }
                                else {
                                    $menu.$isAction = $isAction;
                                    self._contextMenu._menusBox.addMenuItem($menu);
                                }
                                break;
                        }
                    });
                }
            }
        }
    }
});

function ContextMenu(){
}

exports.ContextMenu = helpers.defineClass(ContextMenu, null, {
    dispose: function(){
        delete this.field;
        if (this._$$menusBtn) {
            this._$$menusBtn.unbind();
            delete this._$$menusBtn;
        }
        if (this._$$menusPopup) {
            this._$$menusPopup.remove();
        }
    },
    remove: function(){
        this.field.getArticle().removeItem(this._menusBox, true);
        delete this._menusBox;
        this.removeOpener();
        document.controller.disposeObject(this);
    },
    appendOpener: function(){
        var btn = document.createElement("a");
        btn.className = "s-field-menus-btn s-close";
        this.field._addButtonToValue(btn);
        return btn;
    },
    removeOpener: function(){
        this.field._removeButtonToValue(this._$$menusBtn[0])
    },
    loadMenuBox: function(){
        var slot = document.createElement("div");
        slot.className = "s-field-menus-popup";
        this.options.$category = "links";
        this.options.$skin = this.$skinMenus || (this.field.$skin + "-menus");
        if (this.options.$isBindDisabled) {
            this.options.$links = {};
            this.options.$actions = {};
        }
        this._menusBox = document.itemFactory.load(this._$$menusPopup = $(slot), this.options, this.field.getArticle());
    },
    create: function(field, options){
        var self = this;
        self.field = field;
        self.options = options || {};
        self._$$menusBtn = $(self.appendOpener());
        self.loadMenuBox();
        
        self._$$menusBtn.bind("click", function(){
            document.site.onBeforClick();
            if (!field.$isDisabled) {
                field.getPage().externalAdapter.onFieldClickPicker({
                    field: field,
                    pickerType: "contextMenu",
                    doEvent: function(){
                        if (!self._popupMenus) {
                            document.site.toggleClass(self._$$menusBtn[0], "s-close", false);
                            var popupContent = self.popupContent || field;
                            popupContent.$$item[0].setAttribute("id", popupContent.id);
                            self._popupMenus = field.boxParent.openDialog({
                                $dialogMode: "popup",
                                content: popupContent,
                                $$dialog: self._$$menusPopup,
                                position: {
                                    my: "right top",
                                    at: "right bottom",
                                    of: self._$$menusBtn
                                },
                                onClose: function(){
                                    document.site.toggleClass(self._$$menusBtn[0], "s-close", true);
                                    self._popupMenus = null;
                                },
                                autocCloseBoundary: "#" + popupContent.id
                            });
                        }
                        else {
                            self._popupMenus.close();
                        }
                    }
                });
            }
            return false;
        });
    }
});
