"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/common/field/field').Field;
var _formatApi = require('syracuse-ui/lib/common/field/formatApi');

function DateTimeField(){
}

exports.DateTimeField = helpers.defineClass(DateTimeField, Field, {
    initialize: function(){
        this.formatApi = _formatApi.getApi(this.$field.$type);
        this.localFormat = _formatApi.getLocalFormat(this.$field.$type);
        this.localFormatDisplay = _formatApi.getLocalFormat(this.$field.$type, this.$field.$format);
        // for application/x-date type only for now
        if (this.$field.$type == "application/x-date") 
            this.formatObj = _formatApi.processFormat(this.localFormat);
    },
    setDataValue: function(value, record){
        var self = this;
        var textValue = "";
        this.currentValue = value;
        if (value) {
            var dateObj = this.formatApi.parse(value);
            //            textValue = dateObj.toString(this.localFormat);
            
            if (this.$isEditMode) {
                this.$$input.val(dateObj.toString(this.localFormat));
                this.$$input.attr("placeholder", this.localFormat);
            }
            else {
                this.$$dataValue.empty();
                var formated = dateObj.toString(self.localFormatDisplay);
                if (formated && this.$field.$links && this.$field.$links.$details && !this.$item.$isMenusDisabled) {
                    this.appendDetailLink(this.$$dataValue, formated, this.$field.$links.$details);
                }
                else {
                    this.$$dataValue.text(formated);
                }
            }
        }
    },
    onInputValidate: function(event){
        //var newValue = (this.getInputValue ? this.getInputValue(event) : this.$$input.val());
        var self = this;
        var newValue = (self.formatApi.parse(self.$$input.val(), self.localFormat)).toString();
        if (newValue != self.currentValue) {
            self.notifyChange(newValue);
        }
    },
    onInputChange: function($$input, event){
        var self = this;
        var errors = [];
        // for application/x-date and application/x-time types only for now
        if ((self.$field.$type == "application/x-date" || self.$field.$type == "application/x-time") && $$input.val() != '') {
            // handle formatting
            var err = _formatApi.formatInput(self, $$input);
            if (err) 
                errors.push(err);
        }
        if (self.validate($$input.val(), errors)) {
            self.onInputValidate(event);
        }
    }
});

