"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/common/field/field').Field;

var _localize = {
    selectFile: "Select file",
    removeFile: "Remove"
};



function BinaryField(){
}


exports.BinaryField = helpers.defineClass(BinaryField, Field, {
    _saltUrl: function(url){
        if (!url) 
            return null;
        var sep = (url.indexOf("?") >= 0) ? "&" : "?";
        return url + sep + "salt=" + Math.round(Math.random() * 1000);
    },
    initialize: function(){
        this.$imageWidth = this.$item.$imageWidth || "50px";
        this.$imageHeight = this.$item.$imageHeight || "50px";
        this.$dataUrl = this.getDataType().$url;
    },
    _drawFiles: function(files){
        var self = this;
        if (!files.length) {
            this.$$fileName.text("No files selected!");
        }
        else {
            for (var ii = 0; ii < files.length; ii++) {
                var file = files[ii];
                if ((self.acceptFilter && file.type.match(self.acceptFilter)) || !self.acceptFilter) {
                    //
                    document.controller.upload(file, self.getDataType().$url, self.getArticle(), function(data, response){
                        self._onUploadSuccess(file);
                    }, function(progress, isLoaded){
                        if (!isLoaded) {
                            if (self.$$progress.css("display") == "none") 
                                self.$$progress.css("display", "block");
                            self.$$progress.text(progress + "%");
                        }
                        else 
                            self.$$progress.css("display", "none");
                    });
                }
            }
        }
        this.$$fileName.show();
    },
    bindEvents: function(){
    },
    render: function(){
        if (!this.$item.$isFilterMode) {
            var self = this;
            self.$$anchor = $("<a target='_blank'/>").appendTo(self.$$dataValue);
            self.$$image = $("<div/>").addClass(this.$skin + self.classSuffix).addClass("s-field-img-thumb-none").appendTo(self.$$anchor);
            self.$$image.css({
                width: self.$imageWidth,
                height: self.$imageHeight,
                backgroundSize: "contain",
                backgroundRepeat: "no-repeat",
                backgroundPosition: "center top",
                position: "relative"
            });
            if (self.$isEditMode) {
                self.$$image.bind("drop dragenter dragover", function(event){
                    if (event.type == "drop") {
                        self._drawFiles(event.originalEvent.dataTransfer.files);
                    }
                    event.stopPropagation();
                    event.preventDefault();
                });
                self.$$select = $("<a/>").addClass(this.$skin + "-img-select").text(_localize.selectFile).appendTo(self.$$dataValue).bind("click", function(){
                    self.$$file.click();
                    return false;
                });
                self.$$remove = $("<a/>").addClass(this.$skin + "-img-remove").text(_localize.removeFile).appendTo(self.$$dataValue).bind("click", function(){
                    document.controller.deleteFile(self.$dataUrl, self.getArticle(), function(data, response){
                        // callback if succes
                        self.setDataValue(null);
                    });
                    return false;
                });
                self.$$file = $("<input type='file' style='width:0px; height:0px; visibility:hidden'/>");
                if (self.acceptFilter) 
                    self.$$file.attr("accept", self.acceptFilter);
                if (self.$item.$enableMultiple) {
                    self.$$file.attr("multiple", true);
                }
                self.$$file.appendTo(self.$$dataValue).bind("change", function(){
                    self._drawFiles(this.files);
                });
                self.$$fileName = $("<div style='display:none'/>").appendTo(self.$$dataValue);
                self.$$progress = $("<div style='display:none'/>").addClass(this.$skin + "-img-progress").appendTo(self.$$image);
                document.site.setZIndex(self.$$progress);
            }
        }
    },
    releaseMode: function(onDispose){
        if (this.$isEditMode) {
            if (this.$$select) {
                this.$$select.unbind();
            }
            if (this.$$remove) {
                this.$$remove.unbind();
            }
            if (this.$$file) {
                this.$$file.unbind();
            }
            if (this.$$image) {
                this.$$image.unbind();
            }
        }
        Field.prototype.releaseMode.call(this, onDispose);
    }
});


// image field
function ImageField(){
    // split image/star in two to avoid regex catastrophy
    this.acceptFilter = "image/" + "*";
    this.classSuffix = "-img-thumb";
}

exports.ImageField = helpers.defineClass(ImageField, BinaryField, {
    _onUploadSuccess: function(data, response){
        var imageUrl = this._getImageUrl();
        this.$$image.css("background-image", "url(\"" + imageUrl + "\")");
        this.$$anchor.attr("href", imageUrl);
    },
    setDataValue: function(value){
        this.currentValue = value;
        if (this.$$image && value) 
            this.$$image.css("background-image", "url(\"" + this._getImageUrl() + "\")");
        else 
            this.$$image.css("background-image", "");
        this.$$anchor.attr("href", this._getAnchorUrl());
    },
    _getImageUrl: function(){
        // if value != null, get data url from prototype
        var value = this.currentValue;
        var dataUrl = (value && value.$url) || this.$dataUrl;
        return (dataUrl &&
        this._saltUrl(this.getArticle().parseExpression(dataUrl)));
    },
    _getAnchorUrl: function(){
        return this._getImageUrl();
    },
    onWindowResize: function(){
        //si this.$item.$isAutoSize = true ou this.applyAutoSize(true) 
    }
});


// file field
function FileField(){
    this.classSuffix = "-file-thumb";
}

function _contentTypeToClass(contentType){
    return "s-field-img-thumb-" + contentType.replace("application/", "");
}

exports.FileField = helpers.defineClass(FileField, BinaryField, {
    _toggleClasses: function(newFileType){
        // remove old class
        if (this.currentValue && this.currentValue.$contentType) 
            this.$$image.removeClass(_contentTypeToClass(this.currentValue.$contentType));
        if (newFileType) {
            this.$$image.removeClass("s-field-img-thumb-none");
            this.$$image.addClass(_contentTypeToClass(newFileType));
        }
        else 
            this.$$image.addClass("s-field-img-thumb-none");
    },
    _onUploadSuccess: function(file){
        this._toggleClasses(file && file.type);
        //
        this.$$anchor.attr("href", this._getAnchorUrl());
    },
    setDataValue: function(value){
        this._toggleClasses(value && value.$contentType);
        //
        this.currentValue = value;
        this.$$anchor.attr("href", this._getAnchorUrl());
    },
    _getAnchorUrl: function(){
        return this.getArticle().parseExpression(this.$dataUrl);
    }
});

