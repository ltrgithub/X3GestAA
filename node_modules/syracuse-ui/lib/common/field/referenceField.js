"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/common/field/field');

function ReferenceField(){
}

exports.ReferenceField = helpers.defineClass(ReferenceField, Field.Field, {
    dispose: function(){
        delete this.codeMenu;
        Field.Field.prototype.dispose.call(this);
    },
    getDataType: function(){
        return this.$field.$;
    },
    onInputChange: function($$input){
        var value = $$input.val();
        if (value == "") {
            this.notifyChange(null, true);
        }
        else {
            if (this.currentValue && this.currentValue.$value != value || !this.currentValue) {
                this.notifyChange({
                    $value: value
                });
            }
        }
    },
    render: function(){
        var self = this;
        if (self.$isEditMode) {
            var css = ((self.$item.$css) ? self.$item.$css + " " : "");
            (self.$$input = $("<input type='text'/>"))[0].className = css + self.$skinInput + " " + self.$skinInput + "-ref-picker";
            
            var box = document.createElement("div");
            box.className = css + self.$skinInput + "-box";
            var $$box = $(box).append(self.$$input);
            if (!self.$item.$inplace && self.$item.$isDescriptionVisible !== false) {
                var label = document.createElement("label");
                label.className = css + self.$skinInput + "-ref-desc";
                self.$$description = $(label);
            }
            
            var btn = document.createElement("a");
            btn.className = css + self.$skin + "-ref-picker";
            self.$$pickerBtn = $(btn).bind("click", function(){
                Field.clickLookUp(self);
            }).appendTo($$box);
            self.$$value.append($$box).append(self.$$description);
        }
        else {
            self.codeMenu = document.itemFactory.load(self.$$value, {
                $bind: "$detail",
                $isDescriptionVisible: self.$item.$isDescriptionVisible !== false,
                $css: self.$item.$css,
                $category: "link",
                $skin: self.$skin + "-ref-link"
            }, self.boxParent);
        }
    },
    setDataValue: function(value){
        if (this.currentValue && value) {
            if (this.currentValue.$uuid && this.currentValue.$uuid == value.$uuid) {
                return;
            }
        }
        if (value) {
            var article = this.getArticle();
            this.currentValue = {
                $uuid: value.$uuid,
                $title: value.$title || "" // || article.parseExpression(this.$field.$title || "", value) || "" //,
            };
            var $keyValue = this.$field.$key ? "$key" : "$value";
            this.currentValue.$value = value[$keyValue] || article.parseExpression(this.$field[$keyValue], value) || "";
        }
        else {
            this.currentValue = {
                $title: "",
                $value: ""
            };
        }
        if (this.$isEditMode) {
            //this.$$input.val(this.currentValue.$value);	// old code version
            this.$$input.attr("value", this.currentValue.$value); // hack to make it work on mobile
            if (this.$$description) {
                this.$$description.text(this.currentValue.$title);
            }
            else {
                this.$$input.attr("title", this.currentValue.$title);
            }
        }
        else {
            if (this.$field.$links) {
                var $details = this.$field.$links.$details;
                if ($details) {
                    $details.$title = this.currentValue.$value;
                    $details.$description = this.currentValue.$title;
                    //Temp hack
                    if (value && !value[$keyValue]) {
                        value[$keyValue] = this.currentValue.$value;
                    }
                    this.codeMenu.setMenu($details, value);
                }
            }
            
        }
    }
});
