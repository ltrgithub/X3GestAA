"use strict";
var helpers = require('syracuse-core/lib/helpers');

exports.clickLookUp = function(field){
    var article = field.getArticle();
    document.controller.loadRepresentation(article, field.$field.$links.$lookup.$url, function($itemPage){
        $itemPage.$$container = $("<div/>");
        $itemPage.$displayTarget = "modal";
        field.lookupPage = document.itemFactory.loadPage($itemPage);
        field.lookupPage.onClose = function(){
            field.lookupPage.$$container.remove();
            document.controller.disposeObject(field.lookupPage);
            field.lookupPage = null;
            return false;
        };
        field.lookupPage.onSelectRecord = function(selectedRecords){
            var $result = field.$field.$links.$lookup.$result;
            var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
            field.setDataValue($result ? record.dataset[$result] : record.dataset);
            field.focus();
            field.notifyChange(field.currentValue); //currentValue updated by setValue
            field.lookupPage.onClose();
            return false;
        };
    });
};


function _appendLookUp(field){
    var css = "-ref-picker";
    if (field.$item.$css) {
        css += " " + field.$item.$css;
    }
    field.$$input[0].className = field.$skinInput + " " + field.$skinInput + css;
    var btn = document.createElement("a");
    btn.className = field.$skin + css;
    return field.$$pickerBtn = $(btn).bind("click", function(){
        exports.clickLookUp(field);
    });
};


function Field(){
}

exports.Field = helpers.defineClass(Field, null, {
    applyDesignMetaData: function(metadata, onAuthoring){
        this.applyHiddenState(metadata);
        if (metadata.$width) {
            this.$$value[0].style.paddingRight = {
                fit: null,
                small: "75%",
                medium: "50%",
                large: "25%"
            }[this.$item.$width = metadata.$width];
        }
        if (onAuthoring !== false) {
            if (metadata.$isTopLabelAlignment !== undefined) {
                var itemCss = this.makeSkin();
                var titleCss = this.makeSkin("-title");
                var valueCss = this.makeSkin("-value");
                this.$item.$isTopLabelAlignment = metadata.$isTopLabelAlignment;
                this.$$item[0].className = this.$$item[0].className.replace(itemCss, this.makeSkin());
                if (this.$$title) {
                    this.$$title[0].className = this.$$title[0].className.replace(titleCss, this.makeSkin("-title"));
                }
                this.$$value[0].className = this.$$value[0].className.replace(valueCss, this.makeSkin("-value"));
            }
        }
        if (this.$$title) {
            if (metadata.$isRightTextLabelAlignment !== undefined) {
                this.$$title[0].style.textAlign = (this.$item.$isRightTextLabelAlignment = metadata.$isRightTextLabelAlignment) ? "right" : "left";
            }
            if (metadata.$isTitleHidden !== undefined) {
                this.hideTitle(this.$item.$isTitleHidden = metadata.$isTitleHidden);
            }
            if (metadata.$labelWidth !== undefined) {
                this.$$title[0].style.width = metadata.$labelWidth;
            }
        }
    },
    getArticle: function(){
        if (!this.articleParent) {
            this.articleParent = this.boxParent.getArticle();
        }
        return this.articleParent;
    },
    getPage: function(){
        if (!this.page) {
            this.page = this.getArticle().getPage();
        }
        return this.page;
    },
    appendFieldMenus: function(){
    
    },
    appendDetailLink: function($$value, value, $detailsLink){
        $detailsLink.$title = value;
        document.itemFactory.load($$value, {
            $bind: "$detail",
            $title: value,
            $category: "link",
            $skin: this.$skin + "-link"
        }, this.boxParent).setMenu($detailsLink);
    },
    hideTitle: function($isTitleHidden){
        this.$$title[0].style.display = $isTitleHidden ? "none" : "";
    },
    _createValueContainer: function(){
        var div = document.createElement("div");
        div.className = this.makeSkin("-value", true);
        this.$$value = $(div);
        if (this.$item.$inplace) {
            this.$$core = this.$$value.appendTo(this.$$item);
        }
        else {
            var div = document.createElement("div");
            div.className = this.makeSkin("-core", true);
            this.$$core = $(div).appendTo(this.$$item).append(this.$$value);
        }
    },
    ensureEditMode: function(){
        this.$isEditMode = this.$item.$isEditMode;
        if (this.$isEditMode === undefined) {
            this.$isEditMode = this.getArticle().$isEditMode;
        }
    },
    loadBox: function(){
        this.ensureEditMode();
        this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
        }
        
        this.$$item = this.$$container
        if (!this.$item.$inplace) {
            this.$$item = $(document.createElement("div")).appendTo(this.$$item);
        }
        this.$$item[0].className += " " + this.makeSkin(null, true);
        if (this.$isEditMode) {
            this.bindEvents();
        }
        if (this.initialize) {
            this.initialize();
        }
        
        if (!(this.$item.$inplace || this.$item.$isTitleHidden)) {
            if (this.$isEditMode) {
                this.inputId = this.id + "-input";
            }
            var label = document.createElement("label");
            label.className = this.makeSkin("-title", true);
            this.$$title = $(label);
            if (this.inputId) {
                label.setAttribute("for", this.inputId);
            }
            this.$$item.append(this.$$title);
            var $parentItem = this.boxParent.$item;
            if ($parentItem.$fieldLabelWidth) {
                this.$$title.width($parentItem.$fieldLabelWidth);
            }
        }
        this._createValueContainer();
        this.render();
        this.appendFieldMenus();
        if (this.$$input) {
            var input = this.$$input[0];
            if (this.$item.$isCellChild) {
                input.style.width = "100%";
            }
            if (this.inputId) {
                input.setAttribute("id", this.inputId);
            }
        }
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.applyDesignMetaData(this.$item, false);
        this.applyMandatoryState(this.$field);
        this.applyHiddenState(this.$field);
        this.applyDisableState(this.$field);
        this.getArticle().bind(this, this.$item.$bind);
        this.applyAutoSize(this.$item);
    },
    applyAutoSize: function(state){
        if (state.$isAutoSize !== undefined) {
            this._bindAutoSize(state.$isAutoSize);
            this.$item.$isAutoSize = state.$isAutoSize;
        }
    },
    _bindAutoSize: function(bind){
        document.site[bind ? "addEventListener" : "removeEventListener"]("resize", this);
    },
    render: function(){
        if (this.$isEditMode) {
            var css = ((this.$item.$css) ? this.$item.$css + " " : "") + this.$skinInput;
            var inputHtml = this.getHtmlInput ? this.getHtmlInput() : "<input type='text'/>";
            this.$$input = $(inputHtml).addClass(css);
            if (this.$field.$links && this.$field.$links.$lookup) {
                var box = document.createElement("div");
                box.className = css + "-box";
                $(box).append(this.$$input).append(_appendLookUp(this)).appendTo(this.$$value);
            }
            else {
                this.$$value.append(this.$$input);
            }
        }
    },
    getTitle: function(){
        return this.titleText || "";
    },
    setTitle: function($title){
        this.titleText = $title || "";
        if (this.titleText.length > 0 && this.titleText[1] == "@") {
            this.titleText = this.boxParent._renderExpression(this.titleText);
        }
        if (this.$$title) {
            this.$$title.text(this.titleText);
        }
        else {
            if (this.$$input && (this.$item.$inplace || this.$item.$isPlaceHolder)) {
                this.$$input[0].setAttribute("placeholder", this.titleText);
            }
        }
    },
    setDescription: function($description){
        this.descriptionText = $description || "";
        if (this.descriptionText.length > 0) {
            if (this.descriptionText[1] == "@") {
                this.descriptionText = this.boxParent._renderExpression(this.descriptionText);
            }
            if (!this.$item.$inplace) {
                if (!this.$$description) {
                    var div = document.createElement("div");
                    div.className = this.makeSkin("-desc", true);
                    this.$$value.after(this.$$description = $(div));
                }
                this.$$description.text(this.descriptionText)[0].style.display = "";
            }
        }
        else {
            if (this.$$description) {
                this.$$description[0].style.display = "none";
            }
        }
    },
    makeSkin: function(suffix, addCss){
        var css = this.$skin;
        if (suffix) {
            css += suffix;
        }
        if (this.$item.$isTopLabelAlignment) {
            css += "-top";
        }
        if (addCss && this.$item.$css) {
            css += " " + this.$item.$css;
        }
        return css;
    },
    applyMandatoryState: function(state){
        if (this.$isEditMode && state.$isMandatory !== undefined) {
            if (this.$$title && this.titleText.length > 0) {
                document.site.toggleClass(this.$$title, "s-mandatory", state.$isMandatory);
                if (state.$isMandatory) {
                    if (!this.$$mandatoryFlag) {
                        var div = document.createElement("div");
                        div.className = "s-field-mandatory-flag";
                        this.$$title.append(this.$$mandatoryFlag = $(div));
                    }
                }
                else {
                    if (this.$$mandatoryFlag) {
                        this.$$mandatoryFlag.remove();
                        delete this.$$mandatoryFlag
                    }
                }
            }
            document.site.toggleClass(this.$$value, "s-mandatory", state.$isMandatory);
        }
    },
    applyDisableState: function(state){
        if (state.$isDisabled !== undefined) {
            this.$isDisabled = state.$isDisabled;
            this.$$item.attr("disabled", state.$isDisabled);
            if (this.$$input) {
                this.$$input.attr("disabled", state.$isDisabled).toggleClass("s-disabled", state.$isDisabled);
            }
            if (this.$$title) {
                this.$$title.toggleClass("s-disabled", state.$isDisabled);
            }
            this.$$value.toggleClass("s-disabled", state.$isDisabled);
        }
    },
    applyHiddenState: function(state){
        if (state.$isHidden !== undefined) {
            if (this.$item.$inplace) {
                this.$$value.toggle(!state.$isHidden);
            }
            else {
                this.$$item.toggle(!state.$isHidden);
            }
        }
    },
    setDataBind: function(value, record, metaData){
        if (this.getPage().externalAdapter.setDataBind(this, value, record, metaData)) {
            if (value !== undefined) {
                this.setDataValue(value, record);
            }
            this.applyMetaData(metaData);
        }
    },
    setDataValue: function(value, record){
        this.currentValue = value;
        if (this.$isEditMode) {
            this.$$input.val(this.currentValue);
        }
        else {
            this.$$value.empty();
            this.$$value.text(value);
        }
    },
    applyMetaData: function(metaData){
        if (metaData) {
            this.applyHiddenState(metaData);
            this.applyDisableState(metaData);
            if (metaData.$title !== undefined) {
                this.setTitle(metaData.$title);
            }
            if (metaData.$description !== undefined) {
                this.setDescription(metaData.$description);
            }
            this.applyMandatoryState(metaData);
            if (metaData.$diagnoses !== undefined) {
                document.site.showDiagnoses({
                    field: this,
                    $diagnoses: metaData.$diagnoses
                }, this.boxParent);
            }
        }
    },
    focus: function(){
        if (this.$$input) {
            this.$$input.focus();
        }
    },
    isEmpty: function(){
        return !this.currentValue;
    },
    getDataType: function(){
        return this.$field;
    },
    toggleDiagnose: function(css, show){
        if (this.$$input) {
            document.site.toggleClass(this.$$input, css, show);
        }
        document.site.toggleClass(this.$$value, css, show);
    },
    notifyChange: function(newValue, validated){
        var self = this;
        self.currentValue = newValue;
        if (validated || self.validate()) {
            self.getPage().externalAdapter.onFieldNotifyChange({
                field: self,
                doEvent: function(){
                    document.controller.notifyChange(self.getArticle(), self.$item.$bind, self.currentValue);
                }
            });
        }
    },
    onInputValidate: function(event){
        var newValue = (this.getInputValue ? this.getInputValue(event) : this.$$input.val());
        if (newValue != this.currentValue) {
            this.notifyChange(newValue);
        }
    },
    onInputChange: function($$input, event){
        if (this.$item.$validationTrigger !== 'keyup') {
            this.onInputValidate(event);
        }
    },
    onInputKeyup: function($$input, event){
        if (this.$item.$validationTrigger == 'keyup' && event.keyCode == 13) {
            this.onInputValidate(event);
        }
    },
    onInputFocusin: function($$input, event){
    },
    onInputFocusout: function($$input, event){
    },
    onInputKeydown: function($$input, event){
    },
    onInputKeypress: function($$input, event){
    },
    bindEvents: function(){
        var self = this;
        self.$$item.delegate("input,select", "change keydown keypress keyup focusin focusout", function(event){
            self.getPage().externalAdapter.onFieldEvent({
                field: self,
                event: event,
                doEvent: function(){
                    self["onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1)]($(event.target), event);
                }
            });
        });
    },
    validate: function(newValue, errors){
        if (this.$item.$filterMode) {
            return true;
        }
        var value = (newValue || this.currentValue).toString();
        var dataType = this.getDataType();
        errors = errors || [];
        if (dataType.$isMandatory && value == '') {
            errors.push("value is mandatory (client)");
        }
        if (dataType.$constraints) {
            if (dataType.$constraints.$pattern && value) {
                var match = new RegExp(dataType.$constraints.$pattern).test(value);
                if (!match) { //(match && match.index == 0 && match[0].length == value.length)) {
                    errors.push("invalid value : " + value);
                }
            }
        }
        
        if (this.validateType) {
            this.validateType(errors, value);
        }
        
        if (errors.length > 0 || this.$displayedDiagnoses) {
            this.applyMetaData({
                $diagnoses: null
            });
            this.$displayedDiagnoses = errors.map(function(error){
                return {
                    message: error,
                    severity: "error"
                };
            });
            if (this.$displayedDiagnoses.length > 0) {
                this.applyMetaData({
                    $diagnoses: this.$displayedDiagnoses
                });
            }
            var saveLinks = this.getArticle().menusFacade.items.$save;
            if (saveLinks && saveLinks.length > 0) {
                if (!saveLinks[0].$isDisabled) {
                    this.$isServerSaveEnabled = true;
                }
                else {
                    if (this.$isServerSaveEnabled) {
                        this.$isServerSaveEnabled = false;
                    }
                }
                if (this.$isServerSaveEnabled !== undefined) {
                    this.getArticle().applyChange({
                        $actions: {
                            $save: {
                                $isDisabled: this.$isServerSaveEnabled
                            }
                        }
                    });
                }
            }
        }
        return errors.length == 0;
    },
    dispose: function(){
        if (this.$$pickerBtn) {
            this.$$pickerBtn.unbind();
        }
        if (this.$$item) {
            this.$$item.undelegate();
        }
        if (!this.$item) {
            debugger;
        }
        if (this.$item && this.$item.$isAutoSize) {
            this._bindAutoSize(false);
        }
        delete this.articleParent;
        delete this.page;
    }
    
});
