"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _localize = {
    defaultTitle: "Field"
};

function Field(){
}

exports.Field = helpers.defineClass(Field, null, {
    applyDesignMetaData: function(metadata, onAuthoring){
        if (metadata.$isHidden !== undefined) {
            this.setState(metadata);
        }
        if (onAuthoring !== false) {
            if (metadata.$isTopLabelAlignment !== undefined) {
                var curItemCss = this.$skin;
                if (this.$item.$isTopLabelAlignment) {
                    curItemCss += "-top";
                }
                this.$item.$isTopLabelAlignment = metadata.$isTopLabelAlignment;
                var newItemCss = this.$skinField;
                if (this.$item.$isTopLabelAlignment) {
                    newItemCss += "-top";
                }
                this.$$item[0].className = this.$$item[0].className.replace(curItemCss, newItemCss);
                if (this.$$title) {
                    this.$$title[0].className = this.$$title[0].className.replace(curItemCss + "-title", newItemCss + "-title");
                }
                this._core.className = this._core.className.replace(curItemCss + "-core", newItemCss + "-core");
            }
        }
        if (metadata.$isTitleHidden !== undefined) {
            this.$item.$isTitleHidden = metadata.$isTitleHidden;
            if (!metadata.$isTitleHidden && !this.$$title) {
                this.appendTitle();
                this.$$item.prepend(this.$$title);
                this.setTitle(this.titleText);
            }
        }
        if (this.$$title) {
            if (metadata.$isTitleHidden !== undefined) {
                this.hideTitle(metadata.$isTitleHidden);
            }
            if (metadata.$isRightTextLabelAlignment !== undefined) {
                this.$$title[0].style.textAlign = (this.$item.$isRightTextLabelAlignment = metadata.$isRightTextLabelAlignment) ? "right" : "left";
            }
            if (metadata.$labelWidth !== undefined) {
                this.$$title[0].style.width = metadata.$labelWidth;
            }
        }
    },
    ensureDiagnoseSlot: function(){
        if (!this.$$diagnose) {
            var div = document.createElement("div");
            div.className = "s-field-diagnose";
            this.$$diagnose = $(this._core.appendChild(div));
        }
        else {
            this.$$diagnose.empty();
        }
    },
    onInputFocusin: function($$input, event){
        if (this.getArticle().onInputFocusin) {
            this.getArticle().onInputFocusin(this);
        }
    },
    onInputFocusout: function($$input, event){
        if (this.getArticle().onInputFocusout) {
            this.getArticle().onInputFocusout(this);
        }
    },
    _bindInput: function(bind){
        var self = this;
        if (bind) {
            self.$$item.delegate("textarea[data-s-field],input[data-s-field],select[data-s-field]", "click change keydown keypress keyup focusin focusout", function(event){
                var $$target = $(event.target);
                //    onInputFocusin,onInputFocusout,onInputKeyup,onInputKeydown,onInputKeypress: function($$input, event){
                var fnct = "onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1);
                if (self[fnct]) {
                    self[fnct]($$target, event);
                }
                event.stopPropagation();
                return false;
            }).delegate("[data-s-picker]", "click", function(event){
                self.onClickPicker($(this));
                return false;
            });
        }
        else {
            self.$$item.undelegate();
        }
    },
    getArticle: function(){
        if (!this.articleParent) {
            this.articleParent = this.boxParent.getArticle();
        }
        return this.articleParent;
    },
    getPage: function(){
        if (!this.page) {
            this.page = this.getArticle().getPage();
        }
        return this.page;
    },
    appendDetailLink: function($$dataValue, value, $detailsLink){
        $detailsLink.$title = value;
        document.itemFactory.load($$dataValue, {
            $bind: "$detail",
            $title: value,
            $category: "link",
            $skin: this.$skin + "-link"
        }, this.boxParent).setMenu($detailsLink);
    },
    hideTitle: function($isTitleHidden){
        this.$$title[0].style.display = $isTitleHidden ? "none" : "";
    },
    _createValueContainer: function(){
        var div = document.createElement("div");
        div.className = this._$cssField + "-value";
        this.$$dataValue = $(div);
        if (this.$item.$inplace) {
            this.domValueSlot = this._core = (this.$$dataValue)[0];
            this.$$item[0].appendChild(this.domValueSlot);
        }
        else {
            this.domValueSlot = document.createElement("div");
            this.domValueSlot.className = this._$cssField + "-value-slot";
            $(this.domValueSlot).append(this.$$dataValue);
            
            this._core = document.createElement("div");
            this._core.className = this._$cssTopField + "-core";
            this._core.appendChild(this.domValueSlot);
            this.$$item[0].appendChild(this._core)
        }
        if (this.$isEditMode) {
            this.$$fieldValue = this.$$dataValue;
        }
        else {
            this.$$fieldValue = $(document.createElement("div")).appendTo(this.$$dataValue);
        }
    },
    _initCss: function(){
        this._$cssTopField = this._$cssField = (this.$item.$css) ? (this.$item.$css + " " + this.$skinField) : this.$skinField;
        if (this.$item.$isTopLabelAlignment) {
            this._$cssTopField += "-top";
        }
    },
    ensureEditMode: function(){
        this.$isEditMode = this.$item.$isEditMode;
        if (this.$isEditMode === undefined) {
            this.$isEditMode = this.getArticle().$isEditMode;
        }
    },
    loadBox: function($$item){
        this.ensureEditMode();
        this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
        }
        this._initCss();
        
        if (this.$isEditMode) {
            this.inputId = this.id + "-input";
        }
        this.$$item = $$item || this.$$container;
        if (!this.$item.$inplace) {
            this.$$item = $$item || $(document.createElement("div")).appendTo(this.$$item);
        }
        this.$$item[0].className += " " + this._$cssTopField;
        
        if (this.initialize) {
            this.initialize();
        }
        
        this.appendTitle();
        
        this._createValueContainer();
        this.render();
        
        this.$$item[0].setAttribute("data-s-field", this.id);
        this.$$item[0].setAttribute("data-s-name", this.$item.$bind || "");
        if (this.$$input) {
            var input = this.$$input[0];
            if (this.$item.$isCellChild) {
                input.style.width = "100%";
                this.$$dataValue[0].style.width = "100%";
            }
            input.setAttribute("data-s-field", this.id);
            input.setAttribute("id", this.inputId);
        }
        if (!this.$item.$inplace && !this.$isEditMode) {
            this.domValueSlot.style.display = 'inline-block';
        }
        if (this.$item.$isExternalContainer) {
            this._bindInput(true);
        }
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setHelp(this.$item.$help || this.$field.$help);
        this.applyDesignMetaData(this.$item, false);
        if (this.layoutParent) {
            this.layoutParent.setFieldWidth(this);
        }
        this.setState(this.$field);
        this.getArticle().bind(this, this.$item.$bind);
        this.setMenus(this.$field);
        this.applyAutoSize(this.$item);
        this._ensureButtonsVisible();
        if (document.site.developpementMode) {
            this._appendQualityAtt(this.$$dataValue[0]);
            if (this.$$input) {
                this._appendQualityAtt(this.$$input[0]);
            }
        }
    },
    _appendQualityAtt: function(dom){
        dom.setAttribute("data-s-q-bind", this.$item.$bind);
        dom.setAttribute("data-s-q-title", this.titleText);
        if (this.$field.$X3Name) {
            dom.setAttribute("data-s-q-x3Name", this.$field.$X3Name);
        }
    },
    applyAutoSize: function(state){
        if (state.$isAutoSize !== undefined) {
            this._bindAutoSize(state.$isAutoSize);
            this.$item.$isAutoSize = state.$isAutoSize;
        }
    },
    releaseMode: function(onDispose){
        delete this.$$title;
        delete this.$$mandatoryFlag;
        delete this.$$fieldValue;
        delete this.$$description;
        delete this._helpFlag;
        if (this.$$item) {
            this.$$item.undelegate();
        }
        if (onDispose) {
            delete this._$$buttons;
            if (this.$$menusBtn) {
                this.$$menusBtn.unbind();
                delete this.$$menusBtn;
            }
        }
    },
    _bindAutoSize: function(bind){
        document.site[bind ? "addResizeListener" : "removeResizeListener"](this);
    },
    getHtmlInput: function(){
        return "<input type='text'/>";
    },
    render: function(){
        if (this.$isEditMode) {
            var css = ((this.$item.$css) ? this.$item.$css + " " : "") + this.$skinInput;
            var inputHtml;
            if (this.$item.$rows) {
                inputHtml = "<textarea rows='" + this.$item.$rows + "'/>";
            }
            else {
                inputHtml = this.getHtmlInput();
            }
            var input = (this.$$input = $(inputHtml))[0];
            input.className = css;
            if (this.$field.$links && (this.$field.$links.$lookup || this.$field.$links.$tunnel)) {
                this._appendLinksPicker();
            }
            else {
                this.$$fieldValue[0].appendChild(input);
            }
            
        }
    },
    _appendLinksPicker: function(){
        if (this.$field.$links && (this.$field.$links.$lookup || this.$field.$links.$tunnel)) {
            if (this.$field.$links.$lookup) {
                this._appendPicker("lookup");
            }
            if (this.$field.$links.$tunnel) {
                this._appendPicker("tunnel");
            }
        }
    },
    _appendPicker: function(pickerType, increment){
        var input = this.$$input[0];
        if (!this._boxPicker) {
            this._boxPicker = document.createElement("div");
            this._boxPicker.className = this.$skinInput + "-box";
            this._boxPicker.appendChild(input);
            this._boxPickerPaddingRight = 0;
            this.$$fieldValue[0].appendChild(this._boxPicker);
        }
        var css = this.$skinInput + "-" + pickerType;
        if (this.$item.$css) {
            css = this.$item.$css + " " + css;
        }
        input.className = this.$skinInput + " " + css;
        var btn = document.createElement("a");
        btn.className = css + "-picker";
        btn.setAttribute("data-s-picker", pickerType);
        if (increment !== false) {
            btn.style.right = this._boxPickerPaddingRight + "px";
            input.style.paddingRight = (this._boxPickerPaddingRight += 20) + "px";
        }
        this._boxPicker.appendChild(btn);
        return btn;
    },
    _doClickPicker: function(){
    
    },
    onClickPicker: function($$btn){
        var self = this;
        document.site.onBeforClick();
        if (!self.authoringNode && !self.$isDisabled) {
            var pickerType = $$btn[0].getAttribute("data-s-picker");
            self.getPage().externalAdapter.onFieldClickPicker({
                field: self,
                pickerType: pickerType,
                doEvent: function(){
                    switch ($$btn[0].getAttribute("data-s-picker")) {
                        case "lookup":
                            document.fieldController.clickLookUp(self);
                            break;
                        case "tunnel":
                            break;
                        default:
                            self._doClickPicker($$btn);
                            break;
                    }
                }
            });
        }
    },
    getDefaultTitle: function(){
        return _localize.defaultTitle;
    },
    getTitle: function(){
        return this.titleText || "";
    },
    setTitle: function($title){
        this.titleText = $title || "";
        if (this.titleText.length > 0 && this.titleText[1] == "@") {
            this.titleText = this.boxParent._renderExpression(this.titleText);
        }
        if (this.$$title) {
            this.$$title.text(this.titleText);
        }
        else {
            if (this.$$input && this.$item.$isPlaceHolder) {
                this.$$input[0].setAttribute("placeholder", this.titleText);
            }
        }
    },
    appendTitle: function(){
        if (!(this.$item.$inplace || this.$item.$isTitleHidden)) {
            var label = document.createElement("label");
            label.className = this._$cssTopField + "-title";
            if (this.inputId) {
                label.setAttribute("for", this.inputId);
            }
            this.$$title = $(label);
            this.$$item.append(this.$$title);
            if (this.boxParent.$item.$fieldLabelWidth) {
                this.$$title.width(this.boxParent.$item.$fieldLabelWidth);
            }
        }
    },
    _ensureButtonsVisible: function(){
        if (this._$$buttons) {
            if (this.$isEditMode) {
                this._$$buttons[0].style.display = "";
            }
            else {
                this._$$buttons[0].style.display = this.currentValue ? "" : "none";
            }
        }
    },
    _addButtonToValue: function($$btn){
        if (!this._$$buttons) {
            var div = document.createElement("div");
            div.className = this._$cssField + "-value-btns";
            div.style.display = "none";
            this._$$buttons = $(div).appendTo(this.$$dataValue);
            this.valueBtnsChildren = 0;
        }
        this._$$buttons.append($$btn);
        this.$$dataValue[0].style.paddingRight = ((++this.valueBtnsChildren) * 17) + "px";
    },
    _restoreButtonValue: function(){
        if (this._$$buttons) {
            this._$$buttons.appendTo(this.$$dataValue);
            this.$$dataValue[0].style.paddingRight = (this.valueBtnsChildren * 17) + "px";
        }
    },
    setHelp: function($help){
        if ($help != undefined) {
            this.$help = $help;
            if (this.$$title && this.titleText.length > 0) {
                if (this.$help) {
                    if (!this._helpFlag) {
                        this._helpFlag = document.createElement("a");
                        this._helpFlag.className = "s-field-help-flag";
                        this._addButtonToValue($(this._helpFlag));
                    }
                }
                else {
                    if (this._helpFlag) {
                        document.site.removeDomChild(this._helpFlag);
                        delete this._helpFlag;
                        this.valueBtnsChildren--;
                    }
                }
            }
        }
    },
    setDescription: function($description){
        if ($description !== undefined) {
            var text = this.$description = $description || "";
            if (text.length > 0) {
                if (text[1] == "@") {
                    text = this.boxParent._renderExpression(text);
                }
                if (!this.$item.$inplace) {
                    if (!this.$$description) {
                        var div = document.createElement("div");
                        div.className = this.$skinField + "-desc";
                        $(this.domValueSlot).after(this.$$description = $(div));
                    }
                    this.$$description.text(text)[0].style.display = "";
                }
            }
            else {
                if (this.$$description) {
                    this.$$description[0].style.display = "none";
                }
            }
        }
    },
    setState: function(state){
        if (state.$isMandatory !== undefined) {
            this.$isMandatory = state.$isMandatory;
            if (this.$isEditMode) {
                if (this.$$title && this.titleText.length > 0) {
                    document.site.toggleClass(this.$$title[0], "s-mandatory", state.$isMandatory);
                    if (state.$isMandatory) {
                        if (!this._mandatoryFlag) {
                            this._mandatoryFlag = document.createElement("div");
                            this._mandatoryFlag.className = "s-field-mandatory-flag";
                            this.$$title[0].appendChild(this._mandatoryFlag);
                            if (document.site.developpementMode) {
                                this.$$dataValue[0].setAttribute("data-s-q-mandatory", true);
                                if (this.$$input) {
                                    this.$$input[0].setAttribute("data-s-q-mandatory", true);
                                }
                            }
                        }
                    }
                    else {
                        if (this._mandatoryFlag) {
                            document.site.removeDomChild(this._mandatoryFlag);
                            delete this._mandatoryFlag;
                            this.$$dataValue[0].removeAttribute("data-s-q-mandatory");
                            if (this.$$input) {
                                this.$$input[0].removeAttribute("data-s-q-mandatory");
                            }
                        }
                    }
                }
                document.site.toggleClass(this.$$dataValue[0], "s-mandatory", state.$isMandatory);
            }
        }
        if (state.$isDisabled !== undefined) {
            this.$isDisabled = state.$isDisabled;
            this.$$item.attr("disabled", state.$isDisabled);
            if (this.$$input) {
                document.site.disableItem(this.$$input[0], state.$isDisabled);
            }
            if (this.$$title) {
                document.site.disableItem(this.$$title[0], state.$isDisabled);
            }
            if (this.$$description) {
                document.site.disableItem(this.$$description[0], state.$isDisabled);
            }
            document.site.disableItem(this.$$dataValue[0], state.$isDisabled);
        }
        if (state.$isHidden !== undefined) {
            this.$item.$isHidden = state.$isHidden;
            if (this.$item.$inplace) {
                this.$$dataValue.toggle(!state.$isHidden);
            }
            else {
                this.$$item.toggle(!state.$isHidden);
            }
        }
        if (state.$isReadOnly !== undefined && this.setReadOnly) {
            this.setReadOnly(state.$isReadOnly);
        }
    },
    setReadOnly: function($isReadOnly){
        this.$isReadOnly = $isReadOnly;
        if (this.$$input) {
            if (this.$isReadOnly) {
                this.$$input.attr("readonly", "readonly");
            }
            else {
                this.$$input.removeAttr("readonly");
            }
            this.$$input.toggleClass("s-readonly", this.$isReadOnly);
        }
    },
    setDataBind: function(value, record, metaData){
        if (this.getPage().externalAdapter.setDataBind(this, value, record, metaData)) {
            if (value !== undefined) {
                this.setDataValue(value, record);
            }
            this.applyMetaData(metaData);
        }
    },
    setDataValue: function(value, record){
        this.currentValue = value;
        if (this.$isEditMode) {
            this.$$input.val(this.currentValue);
        }
        else {
            this.$$fieldValue.empty();
            if (value && this.$field.$links && this.$field.$links.$details && !this.$item.$isMenusDisabled) {
                this.appendDetailLink(this.$$fieldValue, value, this.$field.$links.$details);
            }
            else {
                this.$$fieldValue.text(value);
            }
        }
    },
    getDataValue: function(){
        return document.fieldController.getDataValue(this);
    },
    _applyMenuChange: function($menus, $isAction){
        if ($menus) {
            var self = this;
            var article = self.getArticle();
            var menusKeys = Object.keys($menus);
            if (menusKeys.length == 0) {
                if (!self._menus) {
                    self._appendPopupMenu();
                }
            }
            else {
                menusKeys.forEach(function($bind){
                    switch ($bind) {
                        case "$tunnel":
                        case "$details":
                        case "$lookup":
                        case "$select":
                            break;
                        case "$lazyload":
                            if (!self._menus) {
                                self._appendPopupMenu();
                            }
                            break;
                        default:
                            var $menu = $menus[$bind];
                            $menu.$bind = ($menu.$sourceBind = $bind) + "-" + self.id;
                            if (!self._menus) {
                                self._appendPopupMenu();
                            }
                            var bound = article.menuItems[$menu.$bind];
                            if (bound) {
                                bound[0].setMenu($menu);
                            }
                            else {
                                $menu.$isAction = $isAction;
                                self._menus.addMenuItem($menu);
                            }
                            break;
                    }
                });
            }
        }
    },
    _appendPopupMenu: function(){
        var self = this;
        
        var div = document.createElement("div");
        div.className = "s-field-menus-popup";
        self._menus = document.itemFactory.load(self._$$menusPopup = $(div), {
            $category: "links",
            $skin: self.$skin + "-menus",
            $isBindDisabled: true,
            $links: {},
            $actions: {}
        }, self.getArticle());
        
        var btn = document.createElement("a");
        btn.className = "s-field-menus-btn s-close";
        self._addButtonToValue(self.$$menusBtn = $(btn));
        self.$$menusBtn.bind("click", function(){
            document.site.onBeforClick();
            if (!self.$isDisabled) {
                self.getPage().externalAdapter.onFieldClickPicker({
                    field: self,
                    pickerType: "contextMenu",
                    doEvent: function(){
                        if (!self._popupMenus) {
                            document.site.toggleClass(self.$$menusBtn[0], "s-close", false);
                            self.$$item[0].setAttribute("id", self.id);
                            self._popupMenus = self.boxParent.openDialog({
                                $dialogMode: "popup",
                                content: self,
                                $$dialog: self._$$menusPopup,
                                position: {
                                    my: "right top",
                                    at: "right bottom",
                                    of: self.$$menusBtn
                                },
                                onClose: function(){
                                    document.site.toggleClass(self.$$menusBtn[0], "s-close", true);
                                    self._popupMenus = null;
                                },
                                autocCloseBoundary: "#" + self.id
                            });
                        }
                        else {
                            self._popupMenus.close();
                        }
                    }
                });
            }
            return false;
        });
    },
    setMenus: function(metaData){
        if (!this.$item.$isFilterMode && !this.$item.$isExpressionChild) {
            if (metaData.$links || metaData.$actions) {
                this._applyMenuChange(metaData.$links);
                this._applyMenuChange(metaData.$actions, true);
            }
        }
    },
    applyMetaData: function(metaData, options){
        if (metaData) {
            if (metaData.$isEditMode !== undefined) {
                document.fieldController.toggleEditMode(this, metaData.$isEditMode);
            }
            if (metaData.$title !== undefined) {
                this.setTitle(metaData.$title);
            }
            if (metaData.$description !== undefined) {
                this.setDescription(metaData.$description);
            }
            if (metaData.$help !== undefined) {
                this.setHelp(metaData.$help);
            }
            this.setState(metaData);
            if (metaData.$diagnoses !== undefined) {
                if (!this.$item.$isExpressionChild) {
                    document.site.showDiagnoses({
                        field: this,
                        $diagnoses: metaData.$diagnoses
                    }, this.boxParent, options);
                }
            }
            this.setMenus(metaData);
            
            if ((metaData.$type !== undefined) && (this.$field.$type != metaData.$type)) {
                document.fieldController.changeType(metaData.$type, this);
            }
        }
        this._ensureButtonsVisible();
    },
    focus: function(){
        if (this.$$input) {
            this.$$input.focus();
        }
    },
    isEmpty: function(){
        return !this.currentValue;
    },
    getDataType: function(){
        return this.$field;
    },
    toggleDiagnose: function(css, show){
        if (this.$$input) {
            document.site.toggleClass(this.$$input[0], css, show);
        }
        document.site.toggleClass(this.$$dataValue[0], css, show);
    },
    showErrors: function(errors, options){
        this.applyMetaData({
            $diagnoses: null
        }, options);
        if (errors.length > 0) {
            this.applyMetaData({
                $diagnoses: (this.$displayedDiagnoses = errors.map(function(error){
                    return {
                        message: error,
                        severity: "error"
                    };
                }))
            }, options);
        }
    },
    onInputValidate: function(event){
        document.fieldController.onInputValidate(this, event);
    },
    onInputChange: function($$input, event){
        document.fieldController.onInputChange(this, $$input, event);
    },
    onInputKeyup: function($$input, event){
        document.fieldController.onInputKeyup(this, $$input, event);
    },
    dispose: function(){
        this.releaseMode(true);
        if (this.$item) {
            if (this.$item.$isExternalContainer) {
                this._bindInput(false);
            }
            if (this.$item.$isAutoSize) {
                this._bindAutoSize(false);
            }
        }
        delete this.domValueSlot;
        delete this.articleParent;
        delete this.page;
    }
    
});
