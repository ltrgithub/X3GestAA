"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _localize = {
    defaultTitle: "Field"
};



function _appendLookUp(field){
    var css = "-ref-picker";
    if (field.$item.$css) {
        css += " " + field.$item.$css;
    }
    field.$$input[0].className = field.$skinInput + " " + field.$skinInput + css;
    var btn = document.createElement("a");
    btn.className = field.$skin + css;
    field.bindPickerBtn($(btn));
    return field.$$pickerBtn;
}

function Field(){
}

exports.Field = helpers.defineClass(Field, null, {
    applyDesignMetaData: function(metadata, onAuthoring){
        if (metadata.$isHidden !== undefined) {
            this.setState(metadata);
        }
        if (metadata.$width) {
            this.$$valueSlot[0].style.paddingRight = {
                fit: null,
                small: "75%",
                medium: "50%",
                large: "25%"
            }[this.$item.$width = metadata.$width];
        }
        if (onAuthoring !== false) {
            if (metadata.$isTopLabelAlignment !== undefined) {
                var curItemCss = this.$skin;
                if (this.$item.$isTopLabelAlignment) {
                    curItemCss += "-top";
                }
                this.$item.$isTopLabelAlignment = metadata.$isTopLabelAlignment;
                var newItemCss = this.$skinField;
                if (this.$item.$isTopLabelAlignment) {
                    newItemCss += "-top";
                }
                this.$$item[0].className = this.$$item[0].className.replace(curItemCss, newItemCss);
                if (this.$$title) {
                    this.$$title[0].className = this.$$title[0].className.replace(curItemCss + "-title", newItemCss + "-title");
                }
                this.$$core[0].className = this.$$core[0].className.replace(curItemCss + "-core", newItemCss + "-core");
            }
        }
        if (metadata.$isTitleHidden !== undefined) {
            this.$item.$isTitleHidden = metadata.$isTitleHidden;
            if (!metadata.$isTitleHidden && !this.$$title) {
                this.appendTitle();
                this.$$item.prepend(this.$$title);
                this.setTitle(this.titleText);
            }
        }
        if (this.$$title) {
            if (metadata.$isTitleHidden !== undefined) {
                this.hideTitle(metadata.$isTitleHidden);
            }
            if (metadata.$isRightTextLabelAlignment !== undefined) {
                this.$$title[0].style.textAlign = (this.$item.$isRightTextLabelAlignment = metadata.$isRightTextLabelAlignment) ? "right" : "left";
            }
            if (metadata.$labelWidth !== undefined) {
                this.$$title[0].style.width = metadata.$labelWidth;
            }
        }
    },
    _doClickPicker: function(){
        document.fieldController.clickLookUp(this);
    },
    onClickPicker: function($$btn){
        var self = this;
        if (!self.$isDisabled) {
            self.getPage().externalAdapter.onFieldClickPicker({
                field: self,
                doEvent: function(){
                    self._doClickPicker($$btn);
                }
            });
        }
    },
    bindPickerBtn: function($$pickerBtn){
        var self = this;
        (self.$$pickerBtn = $$pickerBtn).bind("click", function(){
            self.onClickPicker(self.$$pickerBtn);
            return false;
        });
    },
    getArticle: function(){
        if (!this.articleParent) {
            this.articleParent = this.boxParent.getArticle();
        }
        return this.articleParent;
    },
    getPage: function(){
        if (!this.page) {
            this.page = this.getArticle().getPage();
        }
        return this.page;
    },
    appendDetailLink: function($$dataValue, value, $detailsLink){
        $detailsLink.$title = value;
        document.itemFactory.load($$dataValue, {
            $bind: "$detail",
            $title: value,
            $category: "link",
            $skin: this.$skin + "-link"
        }, this.boxParent).setMenu($detailsLink);
    },
    hideTitle: function($isTitleHidden){
        this.$$title[0].style.display = $isTitleHidden ? "none" : "";
    },
    _createValueContainer: function(){
        var div = document.createElement("div");
        div.className = this._$cssField + "-value";
        this.$$dataValue = $(div);
        
        if (this.$item.$inplace) {
            this.$$valueSlot = this.$$dataValue;
            this.$$core = this.$$valueSlot.appendTo(this.$$item);
        }
        else {
            var div = document.createElement("div");
            div.className = this._$cssField + "-value-slot";
            this.$$valueSlot = $(div).append(this.$$dataValue);
            
            div = document.createElement("div");
            div.className = this._$cssTopField + "-core";
            this.$$core = $(div).appendTo(this.$$item).append(this.$$valueSlot);
        }
    },
    _initCss: function(){
        this._$cssTopField = this._$cssField = (this.$item.$css) ? (this.$item.$css + " " + this.$skinField) : this.$skinField;
        if (this.$item.$isTopLabelAlignment) {
            this._$cssTopField += "-top";
        }
    },
    ensureEditMode: function(){
        this.$isEditMode = this.$item.$isEditMode;
        if (this.$item.$bind == "FNAME") {
            this.$isEditMode = true;
        }
        if (this.$isEditMode === undefined) {
            this.$isEditMode = this.getArticle().$isEditMode;
        }
    },
    loadBox: function($$item){
    
        this.ensureEditMode();
        this.$skinField = this.$skin = this.$item.$skin || (this.$item.$inplace ? "s-inplace" : "s-field");
        if (this.$isEditMode) {
            this.$skinInput = this.$skin + "-input";
            if (this.$item.$isTopLabelAlignment == null) {
                this.$item.$isTopLabelAlignment = true;
            }
        }
        this._initCss();
        
        if (this.$isEditMode) {
            this.inputId = this.id + "-input";
        }
        this.$$item = $$item || this.$$container;
        if (!this.$item.$inplace) {
            this.$$item = $$item || $(document.createElement("div")).appendTo(this.$$item);
        }
        this.$$item[0].className += " " + this._$cssTopField;
        
        if (this.initialize) {
            this.initialize();
        }
        
        this.appendTitle();
        
        this._createValueContainer();
        this.render();
        
        this.$$item[0].setAttribute("data-s-field", this.id);
        if (this.$$input) {
        
            var input = this.$$input[0];
            if (this.$item.$isCellChild) {
                input.style.width = "100%";
            }
            input.setAttribute("data-s-field", this.id);
            input.setAttribute("id", this.inputId);
        }
        if (!this.$item.$inplace && !this.$isEditMode) {
            this.$$valueSlot[0].style.display = 'inline-block';
        }
        this.setTitle(this.$item.$title || this.$field.$title);
        this.setDescription(this.$item.$description || this.$field.$description);
        this.setHelp(this.$item.$help || this.$field.$help);
        this.applyDesignMetaData(this.$item, false);
        this.setState(this.$field);
        this.getArticle().bind(this, this.$item.$bind);
        this.setMenus(this.$field);
        this.applyAutoSize(this.$item);
        this._ensureButtonsVisible();
    },
    applyAutoSize: function(state){
        if (state.$isAutoSize !== undefined) {
            this._bindAutoSize(state.$isAutoSize);
            this.$item.$isAutoSize = state.$isAutoSize;
        }
    },
    releaseMode: function(onDispose){
        delete this.$$title;
        delete this._$$buttons;
        delete this.$$mandatoryFlag;
        if (this.$$menusBtn) {
            this.$$menusBtn.unbind();
            delete this.$$menusBtn;
        }
        delete this.$$description;
        delete this.$$helpFlag;
        if (this.$$pickerBtn) {
            this.$$pickerBtn.unbind();
            delete this.$$pickerBtn;
        }
        if (this.$$item) {
            this.$$item.undelegate();
        }
    },
    _bindAutoSize: function(bind){
        document.site[bind ? "addResizeListener" : "removeResizeListener"](this);
    },
    render: function(){
        if (this.$isEditMode) {
            var css = ((this.$item.$css) ? this.$item.$css + " " : "") + this.$skinInput;
            var inputHtml = this.getHtmlInput ? this.getHtmlInput() : "<input type='text'/>";
            this.$$input = $(inputHtml).addClass(css);
            if (this.$field.$links && this.$field.$links.$lookup) {
                var box = document.createElement("div");
                box.className = css + "-box";
                $(box).append(this.$$input).append(_appendLookUp(this)).appendTo(this.$$dataValue);
            }
            else {
                this.$$dataValue.append(this.$$input);
            }
        }
    },
    getDefaultTitle: function(){
        return _localize.defaultTitle;
    },
    getTitle: function(){
        return this.titleText || "";
    },
    setTitle: function($title){
        this.titleText = $title || "";
        if (this.titleText.length > 0 && this.titleText[1] == "@") {
            this.titleText = this.boxParent._renderExpression(this.titleText);
        }
        if (this.$$title) {
            this.$$title.text(this.titleText);
        }
        else {
            if (this.$$input && (this.$item.$inplace || this.$item.$isPlaceHolder)) {
                this.$$input[0].setAttribute("placeholder", this.titleText);
            }
        }
    },
    appendTitle: function(){
        if (!(this.$item.$inplace || this.$item.$isTitleHidden)) {
            var label = document.createElement("label");
            label.className = this._$cssTopField + "-title";
            if (this.inputId) {
                label.setAttribute("for", this.inputId);
            }
            this.$$title = $(label);
            this.$$item.append(this.$$title);
            if (this.boxParent.$item.$fieldLabelWidth) {
                this.$$title.width(this.boxParent.$item.$fieldLabelWidth);
            }
        }
    },
    _ensureButtonsVisible: function(){
        if (this._$$buttons) {
            if (this.$isEditMode) {
                this._$$buttons[0].style.display = "";
            }
            else {
                this._$$buttons[0].style.display = this.currentValue ? "" : "none";
            }
        }
    },
    _addButtonToValue: function($$btn){
        if (!this._$$buttons) {
            var div = document.createElement("div");
            div.className = this._$cssField + "-value-btns";
            div.style.display = "none";
            this._$$buttons = $(div).appendTo(this.$$dataValue);
            this.valueBtnsChildren = 0;
        }
        this._$$buttons.append($$btn);
        this.$$dataValue[0].style.paddingRight = ((++this.valueBtnsChildren) * 17) + "px";
    },
    setHelp: function($help){
        this.$help = $help;
        if (this.$$title && this.titleText.length > 0) {
            if (this.$help) {
                if (!this.$$helpFlag) {
                    var div = document.createElement("a");
                    div.className = "s-field-help-flag";
                    this._addButtonToValue(this.$$helpFlag = $(div));
                }
            }
            else {
                if (this.$$helpFlag) {
                    this.$$helpFlag.remove();
                    delete this.$$helpFlag;
                    this.valueBtnsChildren--;
                }
            }
        }
    },
    setDescription: function($description){
        if ($description !== undefined) {
            var text = this.$description = $description || "";
            if (text.length > 0) {
                if (text[1] == "@") {
                    text = this.boxParent._renderExpression(text);
                }
                if (!this.$item.$inplace) {
                    if (!this.$$description) {
                        var div = document.createElement("div");
                        div.className = this.$skinField + "-desc";
                        this.$$valueSlot.after(this.$$description = $(div));
                    }
                    this.$$description.text(text)[0].style.display = "";
                }
            }
            else {
                if (this.$$description) {
                    this.$$description[0].style.display = "none";
                }
            }
        }
        
    },
    setState: function(state){
        if (state.$isMandatory !== undefined) {
            this.$isMandatory = state.$isMandatory;
            if (this.$isEditMode) {
                if (this.$$title && this.titleText.length > 0) {
                    document.site.toggleClass(this.$$title, "s-mandatory", state.$isMandatory);
                    if (state.$isMandatory) {
                        if (!this.$$mandatoryFlag) {
                            var div = document.createElement("div");
                            div.className = "s-field-mandatory-flag";
                            this.$$title.append(this.$$mandatoryFlag = $(div));
                        }
                    }
                    else {
                        if (this.$$mandatoryFlag) {
                            this.$$mandatoryFlag.remove();
                            delete this.$$mandatoryFlag
                        }
                    }
                }
                document.site.toggleClass(this.$$dataValue, "s-mandatory", state.$isMandatory);
            }
        }
        if (state.$isDisabled !== undefined) {
            this.$isDisabled = state.$isDisabled;
            this.$$item.attr("disabled", state.$isDisabled);
            if (this.$$input) {
                this.$$input.attr("disabled", state.$isDisabled).toggleClass("s-disabled", state.$isDisabled);
            }
            if (this.$$title) {
                this.$$title.toggleClass("s-disabled", state.$isDisabled);
            }
            if (this.$$description) {
                this.$$description.toggleClass("s-disabled", state.$isDisabled);
            }
            this.$$dataValue.toggleClass("s-disabled", state.$isDisabled);
        }
        if (state.$isHidden !== undefined) {
            this.$item.$isHidden = state.$isHidden;
            if (this.$item.$inplace) {
                this.$$dataValue.toggle(!state.$isHidden);
            }
            else {
                this.$$item.toggle(!state.$isHidden);
            }
        }
        if (state.$isReadOnly !== undefined) {
            this.setReadOnly(state.$isReadOnly);
        }
    },
    setReadOnly: function($isReadOnly){
        this.$isReadOnly = $isReadOnly;
        if (this.$$input) {
            if (this.$isReadOnly) {
                this.$$input.attr("readonly", "readonly");
            }
            else {
                this.$$input.removeAttr("readonly");
            }
            this.$$input.toggleClass("s-readonly", this.$isReadOnly);
        }
        /*if (this.$$pickerBtn) {
         this.$$pickerBtn[0].style.visibility = this.$isReadOnly ? "hidden" : "";
         }*/
    },
    setDataBind: function(value, record, metaData){
        if (this.getPage().externalAdapter.setDataBind(this, value, record, metaData)) {
            if (value !== undefined) {
                this.setDataValue(value, record);
            }
            this.applyMetaData(metaData);
        }
    },
    setDataValue: function(value, record){
        this.currentValue = value;
        if (this.$isEditMode) {
            this.$$input.val(this.currentValue);
        }
        else {
            this.$$dataValue.empty();
            if (value && this.$field.$links && this.$field.$links.$details && !this.$item.$isMenusDisabled) {
                this.appendDetailLink(this.$$dataValue, value, this.$field.$links.$details);
            }
            else {
                this.$$dataValue.text(value);
            }
        }
    },
    getDataValue: function(){
        return document.fieldController.getDataValue(this);
    },
    _applyMenuChange: function($menus, $isAction){
        if ($menus) {
            var self = this;
            var article = self.getArticle();
            Object.keys($menus).forEach(function($bind){
                var $menu = $menus[$bind];
                if ($bind != "$details" && $bind != "$lookup" && $bind != "$select") {
                    if (!self._menus) {
                        self._appendPopupMenu();
                    }
                    
                    $menu.$bind = ($menu.$sourceBind = $bind) + "-" + self.id;
                    var bound = article.menuItems[$menu.$bind];
                    if (bound) {
                        bound[0].setMenu($menu);
                    }
                    else {
                        $menu.$isAction = $isAction;
                        self._menus.addMenuItem($menu);
                    }
                }
            });
        }
    },
    _appendPopupMenu: function(){
        var self = this;
        
        var div = document.createElement("div");
        div.className = "s-field-menus-popup";
        self._menus = document.itemFactory.load(self._$$menusPopup = $(div), {
            $category: "links",
            $skin: self.$skin + "-menus",
            $isBindDisabled: true,
            $links: {},
            $actions: {}
        }, self.getArticle());
        
        var btn = document.createElement("a");
        btn.className = "s-field-menus-btn s-close";
        self._addButtonToValue(self.$$menusBtn = $(btn));
        self.$$menusBtn.bind("click", function(){
            if (!self._popupMenus) {
                document.site.toggleClass(self.$$menusBtn, "s-close", false);
                self.$$item[0].setAttribute("id", self.id);
                self._popupMenus = self.boxParent.openDialog({
                    $dialogMode: "popup",
                    content: self,
                    $$dialog: self._$$menusPopup,
                    position: {
                        my: "right top",
                        at: "right bottom",
                        of: self.$$menusBtn
                        /*,
                         offset: "0 5"*/
                    },
                    onClose: function(){
                        document.site.toggleClass(self.$$menusBtn, "s-close", true);
                        self._popupMenus = null;
                    },
                    autocCloseBoundary: "#" + self.id
                });
            }
            else {
                self._popupMenus.close();
            }
        });
    },
    setMenus: function(metaData){
        if (!this.$item.$isFilterMode && !this.$item.$isExpressionChild) {
            if (metaData.$links || metaData.$actions) {
                this._applyMenuChange(metaData.$links);
                this._applyMenuChange(metaData.$actions, true);
            }
        }
    },
    applyMetaData: function(metaData){
        if (metaData) {
            if (metaData.$isEditMode !== undefined) {
                document.fieldController.toggleEditMode(this, metaData.$isEditMode);
            }
            if (metaData.$title !== undefined) {
                this.setTitle(metaData.$title);
            }
            if (metaData.$description !== undefined) {
                this.setDescription(metaData.$description);
            }
            if (metaData.$help !== undefined) {
                this.setHelp(metaData.$help);
            }
            this.setState(metaData);
            if (metaData.$diagnoses !== undefined) {
                if (!this.$item.$isExpressionChild) {
                    document.site.showDiagnoses({
                        field: this,
                        $diagnoses: metaData.$diagnoses
                    }, this.boxParent);
                }
            }
            this.setMenus(metaData);
            
            if (metaData.$type !== undefined) {
                document.fieldController.changeType(metaData.$type, this);
            }
        }
        this._ensureButtonsVisible();
    },
    focus: function(){
        if (this.$$input) {
            this.$$input.focus();
        }
    },
    isEmpty: function(){
        return !this.currentValue;
    },
    getDataType: function(){
        return this.$field;
    },
    toggleDiagnose: function(css, show){
        if (this.$$input) {
            document.site.toggleClass(this.$$input, css, show);
        }
        document.site.toggleClass(this.$$dataValue, css, show);
    },
    showErrors: function(errors){
        this.applyMetaData({
            $diagnoses: null
        });
        if (errors.length > 0) {
            this.applyMetaData({
                $diagnoses: (this.$displayedDiagnoses = errors.map(function(error){
                    return {
                        message: error,
                        severity: "error"
                    };
                }))
            });
        }
    },
    onInputValidate: function(event){
        document.fieldController.onInputValidate(this, event);
    },
    onInputChange: function($$input, event){
        document.fieldController.onInputChange(this, $$input, event);
    },
    onInputKeyup: function($$input, event){
        document.fieldController.onInputKeyup(this, $$input, event);
    },
    dispose: function(){
        this.releaseMode(true);
        if (this.$item && this.$item.$isAutoSize) {
            this._bindAutoSize(false);
        }
        delete this.articleParent;
        delete this.page;
    }
    
});
