"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var BinaryField = require('./binaryField').BinaryField;

function ImageField(){

}

exports.ImageField = helpers.defineClass(ImageField, BinaryField, {
    initialize: function(){
        // split image/star in two to avoid regex catastrophy
        this.acceptFilter = "image/" + "*";
        this.classSuffix = "-img-thumb";
        BinaryField.prototype.initialize.call(this);
    },
    _setImage: function(imageUrl){
        if (imageUrl) {
            this.$$drawArea.css("background-image", "url(\"" + imageUrl + "\")");
            this.$$drawArea[0].style.backgroundSize = "contain";
        }
        else {
            this.$$drawArea.css("background-image", "");
        }
        this.$$anchor.attr("href", imageUrl);
    },
    _onUploadSuccess: function(data, response){
        this._setImage(this._getAnchorUrl());
    },
    setDataValue: function(value){
        this.currentValue = value;
        this._setImage(this._getAnchorUrl());
    },
    _getImageUrl: function(){
        // if value != null, get data url from prototype
        var value = this.currentValue;
        var dataUrl = (value && value.$url) || this.$dataUrl;
        return (dataUrl &&
        this._saltUrl(this.getArticle().parseExpression(dataUrl)));
    },
    _getAnchorUrl: function(){
        return this._getImageUrl();
    },
    onWindowResize: function(){
        //si this.$item.$isAutoSize = true ou this.applyAutoSize(true) 
    },
    getAuthoringWidget: function(){
        return new ImageFieldAuthoring();
    },
    applyDesignMetaData: function(metadata, onAuthoring){
        BinaryField.prototype.applyDesignMetaData.call(this, metadata, onAuthoring);
        if (metadata.$imageWidth || metadata.$imageHeight) {
            if (metadata.$imageWidth) {
                this.$item.$imageWidth = metadata.$imageWidth;
            }
            if (metadata.$imageHeight) {
                this.$item.$imageHeight = metadata.$imageHeight;
            }
            if (this.$$drawArea) {
                this.$$drawArea[0].style.width = this.$item.$imageWidth;
                this.$$drawArea[0].style.height = this.$item.$imageHeight;
            }
        }
    }
});

function ImageFieldAuthoring(){

}

exports.ImageFieldAuthoring = helpers.defineClass(ImageFieldAuthoring, Article, {
    onNotifyRecordChange: function(value, binding){
        var metaData = {};
        metaData[binding] = value;
        this.designedField.applyDesignMetaData(metaData, true);
        this.applyChange(metaData);
        return null; //cancel notify
    },
    applyChange: function(newData){
        Article.prototype.applyChange.call(this, newData);
    },
    loadBox: function(initData){
        this.$prototype = {
            "$": {
                $imageWidth: {
                    $type: "application/x-string",
                    $title: "Width"
                },
                $imageHeight: {
                    $type: "application/x-string",
                    $title: "Height"
                }
            }
        };
        this.$item = {
            $category: "section",
            $title: "Image Type",
            $layout: {
                $items: [{
                    $bind: "$imageWidth",
                    $isEditMode: true,
                    $labelWidth: "auto",
                    $skin: "s-author-field"
                }, {
                    $bind: "$imageHeight",
                    $isEditMode: true,
                    $labelWidth: "auto",
                    $skin: "s-author-field"
                }]
            }
        };
        Article.prototype.loadBox.call(this, initData);
    },
    dispose: function(){
        Article.prototype.dispose.call(this);
    }
});
