"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var BinaryField = require('./binaryField').BinaryField;

function ImageField(){

}

exports.ImageField = helpers.defineClass(ImageField, BinaryField, {
    initialize: function(){
        // split image/star in two to avoid regex catastrophy
        this.acceptFilter = "image/" + "*";
        this.$item.$imageWidth = this.$item.$imageWidth || "50px";
        this.$item.$imageHeight = this.$item.$imageHeight || "50px";
        BinaryField.prototype.initialize.call(this);
    },
    _renderEditMode: function(){
        BinaryField.prototype._renderEditMode.call(this, this.$skin + "-img");
        this.$$anchor[0].style.minHeight = this.$item.$imageHeight;
    },
    _renderDetailMode: function($skin){
        BinaryField.prototype._renderDetailMode.call(this, this.$skin + "-img");
        this.$$anchor[0].style.minHeight = this.$item.$imageHeight;
    },
    _setFile: function(imageUrl){
        // if value != null, get data url from prototype
        var value = this.currentValue;
        var imageUrl = (value && value.$url) || this.$dataUrl;
        imageUrl = imageUrl &&
        this._saltUrl(this.getArticle().parseExpression(imageUrl));
        if (imageUrl) {
            if (!this._image) {
                this._image = document.createElement("div");
                this._image.className = this.$skin + "-img-img";
                this._image.style.width = this.$item.$imageWidth;
                this._image.style.height = this.$item.$imageHeight;
                $(this._image).appendTo(this.$$anchor);
            }
            if (this.remove) {
                this.remove.style.display = "";
            }
            this._image.style.backgroundImage = "url(\"" + imageUrl + "\")";
            this.$$anchor.attr("target", "_blank").attr("href", imageUrl).attr("disabled", false);
        }
        else {
            delete this._image;
            this.$$anchor.empty().toggleClass(this.$skin + "-file-default", false).attr("href", "#").attr("disabled", true);
            if (this.remove) {
                this.remove.style.display = "none";
            }
        }
    },
    onWindowResize: function(){
        //si this.$item.$isAutoSize = true ou this.applyAutoSize(true) 
    },
    getAuthoringWidget: function(){
        return new ImageFieldAuthoring();
    },
    applyDesignMetaData: function(metadata, onAuthoring){
        BinaryField.prototype.applyDesignMetaData.call(this, metadata, onAuthoring);
        if (metadata.$imageWidth || metadata.$imageHeight) {
            if (metadata.$imageWidth) {
                this.$item.$imageWidth = metadata.$imageWidth;
            }
            if (metadata.$imageHeight) {
                this.$item.$imageHeight = metadata.$imageHeight;
            }
            if (this._image) {
                this._image.style.width = this.$item.$imageWidth;
                this._image.style.height = this.$item.$imageHeight;
            }
        }
    }
});

function ImageFieldAuthoring(){

}

exports.ImageFieldAuthoring = helpers.defineClass(ImageFieldAuthoring, Article, {
    onNotifyRecordChange: function(value, binding){
        var metaData = {};
        metaData[binding] = value;
        this.designedField.applyDesignMetaData(metaData, true);
        this.applyChange(metaData);
        return null; //cancel notify
    },
    applyChange: function(newData){
        Article.prototype.applyChange.call(this, newData);
    },
    loadBox: function(initData){
        this.$prototype = {
            "$": {
                $imageWidth: {
                    $type: "application/x-string",
                    $title: "Width"
                },
                $imageHeight: {
                    $type: "application/x-string",
                    $title: "Height"
                }
            }
        };
        this.$item = {
            $category: "section",
            $title: "Image Type",
            $layout: {
                $items: [{
                    $bind: "$imageWidth",
                    $isEditMode: true,
                    $labelWidth: "auto",
                    $skin: "s-author-field"
                }, {
                    $bind: "$imageHeight",
                    $isEditMode: true,
                    $labelWidth: "auto",
                    $skin: "s-author-field"
                }]
            }
        };
        Article.prototype.loadBox.call(this, initData);
    },
    dispose: function(){
        Article.prototype.dispose.call(this);
    }
});
