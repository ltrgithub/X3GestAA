"use strict";
var helpers = require('syracuse-core/lib/helpers');
var BinaryField = require('./binaryField').BinaryField;

function ImageField(){

}

exports.ImageField = helpers.defineClass(ImageField, BinaryField, {
    initialize: function(){
        // split image/star in two to avoid regex catastrophy
        this.acceptFilter = "image/" + "*";
        this.classSuffix = "-img-thumb";
        BinaryField.prototype.initialize.call(this);
    },
    _setImage: function(imageUrl){
        if (imageUrl) {
            this.$$drawArea.css("background-image", "url(\"" + imageUrl + "\")");
            this.$$drawArea[0].style.backgroundSize = "contain";
        }
        else {
            this.$$drawArea.css("background-image", "");
        }
        this.$$anchor.attr("href", imageUrl);
    },
    _onUploadSuccess: function(data, response){
        this._setImage(this._getAnchorUrl());
    },
    setDataValue: function(value){
        this.currentValue = value;
        this._setImage(this._getAnchorUrl());
    },
    _getImageUrl: function(){
        // if value != null, get data url from prototype
        var value = this.currentValue;
        var dataUrl = (value && value.$url) || this.$dataUrl;
        return (dataUrl &&
        this._saltUrl(this.getArticle().parseExpression(dataUrl)));
    },
    _getAnchorUrl: function(){
        return this._getImageUrl();
    },
    onWindowResize: function(){
        //si this.$item.$isAutoSize = true ou this.applyAutoSize(true) 
    }
    /*,
     getAuthoringWidget: function(){
     return new ImageFieldAuthoring();
     },*/
});
