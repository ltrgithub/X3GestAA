"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/common/field/field').Field;

function IconField(){
}

exports.IconField = helpers.defineClass(IconField, Field, {
    setDataValue: function(value){
        this.currentValue = value;
        var $path = document.site.$item.$iconPath + (this.$icon.$path || "x3icons/");
        this.$$icon[0].style.backgroundImage = value ? "url('" + $path + this.currentValue + ".png')" : "";
        this._enableLink(this.currentValue != null);
    },
    _enableLink: function(isEnable){
        (this.$$inputValue || this.$$textValue).toggleClass(this.$skin + "-icon-on", isEnable);
    },
    loadBox: function($$item){
        this.$item.$isEditMode = this.$item.$isEditMode || false;
        if (this.$item.$isTitleHidden == undefined) {
            this.$item.$isTitleHidden = true;
        }
        Field.prototype.loadBox.call(this, $$item);
    },
    setState: function(state){
        Field.prototype.setState.call(this, state);
        if (state.$isDisabled !== undefined) {
            this._enableLink(!state.$isDisabled);
        }
    },
    render: function(){
        var self = this;
        self.$icon = self.$item.$icon || {};
        var icon = document.createElement("a");
        icon.setAttribute("href", "#");
        icon.className = self.$skin + "-value-icon";
        icon.style.width = self.$icon.$width || "16px";
        icon.style.height = self.$icon.$height || "16px";
        (self.$$icon = $(icon)).appendTo((self.$$inputValue || self.$$textValue).addClass(self.$skin + "-icon"));
        self.$$icon.bind("click", function(event){
            if (!self.$isDisabled) {
                self.getPage().externalAdapter.onFieldEvent({
                    field: self,
                    event: event,
                    doEvent: function(){
                        var article = self.getArticle();
                        if (article.onIconFieldClick) {
                            article.onIconFieldClick(self);
                        }
                    }
                });
            }
            return false;
        });
    },
    dispose: function(){
        if (this.$$icon) {
            this.$$icon.unbind();
        }
        Field.prototype.dispose.call(this);
    }
});
