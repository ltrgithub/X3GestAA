"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/common/article/article").Article;
var itemFactory = require('./itemFactory');
var Controller = require('syracuse-ui/lib/common/controller/controller').Controller;
var FieldController = require('syracuse-ui/lib/common/controller/fieldController').FieldController;


function ExternalAdapter(){
}

helpers.defineClass(ExternalAdapter, null, {
    onFieldNotifyChange: function(options){
        options.doEvent();
    },
    onFieldClickPicker: function(options){
        options.doEvent();
    },
    onSelectRecordEvent: function(options){
        options.doEvent();
    },
    onBoxToggle: function(options){
        options.doEvent();
    },
    onBoxClick: function(options){
        return true;
    },
    onFieldEvent: function(options){
        if (document.site.onFieldFocusIn && options.event.type == "focusin") {
            document.site.onFieldFocusIn(options.field);
        }
        options.doEvent();
    },
    releaseMainPage: function(options){
        options.doEvent();
    },
    onMenuItemClick: function(options){
        options.doEvent();
    },
    setDataBind: function(field, $resources, record, metaData){
        return true;
    },
    createField: function(){
        return null;
    }
});

var _fieldWidths = {
    "application/x-icon": {
        $width: "5em"
    },
    "application/x-choice": {
        $width: "10em"
    },
    "application/x-date": {
        $width: "12em"
    },
    "application/x-time": {
        $width: "8em"
    },
    "application/x-datetime": {
        $width: "17em"
    },
    "application/x-boolean": {
        $width: "5em"
    },
    "application/x-integer": {
        $width: "10em"
    },
    "application/x-decimal": {
        $width: "10em"
    },
    "application/x-real": {
        $width: "10em"
    },
    "application/x-password": {
        $charWidth: "1",
        $size: 10,
        $unit: "em"
    },
    "application/x-string": {
        $charWidth: "1",
        $size: 10,
        $unit: "em"
    },
    "application/x-string$phone": {
        $charWidth: "1",
        $size: 14,
        $unit: "em"
    },
    "application/x-string$email": {
        $charWidth: "1",
        $size: 20,
        $unit: "em"
    },
    "application/x-reference": {
        $charWidth: "1",
        $size: 20,
        $unit: "em"
    },
    "image": {
        $width: "4.0em"
    },
    $default: {
        $width: "10em"
    }
}
function RawSite(){
}

exports.RawSite = helpers.defineClass(RawSite, Article, {
    getFieldWidth: function($type, $format){
        return this._fieldWidths[($type || "$default") + ($format || "")] || this._fieldWidths.$default;
    },
    loadSite: function(siteOptions){
        document.site = this;
        this.siteOptions = siteOptions;
        this._fieldWidths = siteOptions._fieldWidths || _fieldWidths;
        document.itemFactory = itemFactory.create(this.siteOptions.widgetsLibrary);
        (document.controller = new (this.siteOptions.controllerClass || Controller)()).initialize();
        document.fieldController = new FieldController();
        
        if (this.siteOptions.fusionGatewayClass) {
            document.controller.fusionGateway = new this.siteOptions.fusionGatewayClass();
        }
        this.agents = {};
        this.resizeListeners = {};
        this.externalAdapter = new ExternalAdapter();
        this._zIndex = 100;
        $(window).unload = function(){
            if (document.site) {
                document.site.unload();
            }
        };
        document.controller.bindMenuClick(this.$$container = $("#s-site"));
        this.$prototype = this.siteOptions.$prototype;
        document.itemFactory.initializeItem(this, this.siteOptions.$item);
        this.$item.$layoutOptions = this.$item.$layoutOptions || {};
        this.loadBox();
        return this;
    },
    
    setZIndex: function($$item){
        $$item[0].style.zIndex = this._zIndex++;
    },
    toggleClass: function(dom, css, show){
        if (show) {
            if (dom.className.indexOf(css) < 0) {
                dom.className += (" " + css);
            }
        }
        else {
            dom.className = dom.className.replace(css, "");
        }
    },
    emptyDom: function(domNode){
        while (domNode.firstChild) {
            domNode.removeChild(domNode.firstChild);
        }
    },
    removeDomChild: function(child){
        if (child && child.parentNode) {
            child.parentNode.removeChild(child);
        }
    },
    disableItem: function(item, isDisabled){
        if (isDisabled) {
            item.setAttribute("disabled", isDisabled);
        }
        else {
            item.removeAttribute("disabled");
        }
        this.toggleClass(item, "s-disabled", isDisabled);
    },
    
    openHomeLink: function(){
        var self = this;
        setTimeout(function(){
            var homeLinks = self.menuItems.$home;
            if (homeLinks && homeLinks[0]) {
                homeLinks[0].click();
            }
        }, 20);
    },
    addResizeListener: function(listener){
        this.resizeListeners[listener.id] = listener;
    },
    removeResizeListener: function(listener){
        if (this.resizeListeners) {
            delete this.resizeListeners[listener.id];
        }
        
    },
    onBeforClick: function(){
        delete this.requestedDDAuthoringItem;
        if (this.DDAuthoring) {
            this.DDAuthoring.stop();
            delete this.DDAuthoring;
        }
    },
    getPage: function(){
        //hack ensure external adpater 
        return this;
    },
    maximizeBox: function(box, callback){
        setTimeout(function(){
            if (!box.$$memBody) {
                box.$$memBody = $("<div/>");
            }
            var page = box.getArticle().getPage();
            box.$$memBody.empty().append(page.$$body.children());
            page.$$body.append(box.$$item);
            if (callback) {
                callback(box, page);
            }
        }, 20);
        box.$isMaximized = true;
        box.maximizeBtn.className = box.maximizeBtn.className.replace("-maximize", "-minimize");
    },
    minimizeBox: function(box, callback){
        setTimeout(function(){
            var page = box.getArticle().getPage();
            box.$$item.appendTo(box.$$container);
            page.$$body.append(box.$$memBody.children());
            box.$$memBody.remove();
            delete box.$$memBody;
            if (callback) {
                callback(box, page);
            }
        }, 20);
        box.$isMaximized = false;
        box.maximizeBtn.className = box.maximizeBtn.className.replace("-minimize", "-maximize");
        
    },
    showDiagnoses: function(message, item, options){
        var page;
        if (item) {
            var article = item.getArticle();
            page = (article ? article.getPage() : null) || this.mainPage;
        }
        if (this._diagnoseViewer) {
            this._diagnoseViewer.showDiagnoses(message, page, options);
        }
    },
    appendDiagnoseViewer: function($$container, host, isTest){
        if (this.siteOptions.diagnoseViewerClass) {
            var diagnoseViewer = new this.siteOptions.diagnoseViewerClass();
            diagnoseViewer.appenToPage(host, $$container);
            if (!isTest) {
                host._diagnoseViewer = diagnoseViewer;
            }
            return diagnoseViewer;
        }
        
    },
    
    showMessage: function(options){
        if (this._msgBox) {
            document.controller.disposeObject(this._msgBox);
        }
        options.$type = options.$type || "alert";
        (this._msgBox = new this.siteOptions.messageBoxClass()).open(options);
    },
    _releaseMainPage: function(){
        var prev = this.mainPage;
        if (prev && prev.externalAdapter) {
            prev.externalAdapter.releaseMainPage({
                mainPage: prev,
                doEvent: function(){
                    setTimeout(function(){
                        document.controller.disposeObject(prev);
                    }, 10);
                }
            });
        }
        this.$$body.empty();
    },
    unload: function(){
        $(document).unbind();
        delete this.resizeListeners;
        document.controller.disposeObject(this);
        document.controller.disposeObject(document.controller);
        document.site = document.controller = document.fieldController = null;
    },
    logon: function(onAfterLogon){
        if (this.userProfile) {
            document.controller.disposeObject(this.userProfile);
            this.userProfile = null;
        }
        document.controller.loadWorkingCopy({
            menu: {
                $url: this.$item.$userProfileUrl
            },
            article: this.userProfile = new (this.siteOptions.userProfileClass)(),
            callback: function(){
                onAfterLogon();
            }
        });
    },
    getSessionId: function(){
        return helpers.http.parseCookie(document.cookie)["syracuse.sid"] || "";
    }
    
});
