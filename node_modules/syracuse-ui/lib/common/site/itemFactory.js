"use strict";
var helpers = require('syracuse-core/lib/helpers');

function WebPlugin(){
}

helpers.defineClass(WebPlugin, null, {
    _loadPlugin: function($plugin){
        // this.$$plugin = ((typeof this.$$container == 'object') ? this.$$item : $(this.$$container))[$plugin](this, this.$item);
        this.$$plugin = $(this.$$container)[$plugin](this, this.$item);
    },
    loadBox: function(){
        var self = this;
        if (self.$item.$path) {
            //var comps = self.$item.$path.split('.');
            //var $plugin =self.$item.$format;
            // temp hack: if no module, use tookit as default
            //var path = (comps.length > 0 ? comps.join('.').replace(".", "/", "g") : 'toolkit');
            var path = self.$item.$path.replace(".", "/", "g");
            require.async(path, function(err, module){
                if (err) {
                    return console.error(err.message);
                }
                try {
                    self._loadPlugin(self.$item.$format);
                } 
                catch (error) {
                    console.error(error.message)
                }
            });
        }
        else {
            self._loadPlugin(self.$item.$format);
        }
        
    },
    dispose: function(){
    }
});

function WebSelector(){
}

helpers.defineClass(WebSelector, null, {
    loadBox: function(){
        var $$selector = $(this.$item.$format);
        if ($$selector.length > 0 && $$selector.parent().length > 0) {
            $$selector = $$selector.clone(true);
        }
        $$selector.appendTo(this.$$container).show();
    },
    dispose: function(){
    }
});



function ItemFactory(){
}

helpers.defineClass(ItemFactory, null, {
    initializeItem: function(item, $item, boxParent){
        item.$item = $item;
        item.id = $item.$id || document.controller.generateUUID();
        if (boxParent) {
            item.boxParent = boxParent;
            boxParent.getArticle().idMap[item.id] = item;
        }
    },
    loadPage: function($itemPage){
        var $pageCategory = ($itemPage.$representation.$article ? $itemPage.$representation.$article.$category : null) || $itemPage.$category;
        $pageCategory = $pageCategory || ($itemPage.$urlParts.$facet == "$dashboard" ? "dashboard" : "page");
        var item = new (this._pageCategories[$pageCategory] || this._defaultPageCategory)();
        item.$pageCategory = $pageCategory;
        item.$authorUrl = $itemPage.$representation.$authorUrl;
        item.$urlParts = $itemPage.$urlParts;
        item.$isEditMode = (item.$facet = $itemPage.$urlParts.$facet) == "$edit";
        var hackFusion = item.$facet.split("_");
        if (hackFusion.length > 1 && hackFusion[0] == "$fusion") {
            //temp hack
            item.$isEditMode = true;
            item.$facet = hackFusion[1];
            item.$fusionPageMeta = $itemPage.$fusionPageMeta;
        }
        item.$displayTarget = $itemPage.$displayTarget;
        item.$$container = $itemPage.$$container;
        item.$prototype = $itemPage.$representation.$prototype;
        var $article = $itemPage.$representation.$article || $itemPage.$representation.$prototype.$article;
        this.initializeItem(item, $article ||
        {
            $layout: {
                $items: [{
                    $category: "section",
                    $layout: {
                        $items: Object.keys(item.$prototype.$).map(function($bind){
                            return {
                                $bind: $bind
                            };
                        })
                    }
                }]
            }
        }, $itemPage.boxParent);
       
        item.$item.externalAdapter = $itemPage.externalAdapter;
        item.$autoFetch = ($itemPage.$autoFetch !== false) && ($itemPage.initData == null);
        item.loadBox($itemPage.initData);
        $itemPage.boxParent = $itemPage.$$container = $itemPage.$representation = null;
        return item;
    },
    create: function($item, boxParent){
        var item = this._categories[$item.$category || ($item.$bind ? "field" : "section")].create($item, boxParent);
        if (item) {
            this.initializeItem(item, $item, boxParent);
        }
        return item;
    },
    load: function($$container, $item, boxParent, initData){
        var item = this.create($item, boxParent);
        if (item) {
            item.$$container = $$container;
            item.loadBox(initData);
        }
        return item;
    },
    createLayout: function(box, $layout){
        var layout = new this._layouts[$layout.$layoutType || "stack"]();
        layout.box = box;
        layout.$layout = $layout;
        return layout;
    }
});


exports.create = function(widgetsLibrary){
    var factory = new ItemFactory();
    factory._defaultPageCategory = widgetsLibrary.defaultPageCategory;
    factory._pageCategories = widgetsLibrary.pageCategories || {};
    factory._categories = widgetsLibrary.categories;
    factory._layouts = widgetsLibrary.layouts;
    factory._categories.plugin = {
        create: function(){
            return new WebPlugin();
        }
    };
    factory._categories.html = {
        create: function(){
            return new WebSelector();
        }
    };
    return factory;
    
}
