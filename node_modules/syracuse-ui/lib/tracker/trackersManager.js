"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var _formatApi = require('syracuse-ui/lib/field/formatApi');
var _date = require('syracuse-core/lib/types/date');
var _time = require('syracuse-core/lib/types/time');

var _severities = ["fatal", "error", "warning", "info", "success"];
var _$binds = {
	$links: ["$abort", "$suspend", "$resume", "$cancel", "$download", "$details"],
	$fields: ["title", "phase", "phaseDetail", "startDate", "startTime", "elapsedSeconds", "remainingSeconds"]
};

var _opener, _page, _popup;

var _trackers = {
	add: function(tracker) {
		if (!this.map) {
			this.map = {};
			this.list = [];
		}
		this.map[tracker.dataset.$uuid] = tracker;
		this.list.push(tracker);
		_opener.link.textContent = this.list.length;
		if (!_page) {
			_page = new TrackersPage();
			_page.loadBox();
		}
		syra_menus.button.hide(_opener, false);
		_page.toggle(true);
	},
	remove: function(tracker, removing) {
		if (tracker) {
			syra_site.dom.removeChild(tracker.domItem);
			delete this.map[tracker.dataset.$uuid];
			this.list.splice(this.list.indexOf(tracker), 1);
			syra_site.disposeObject(tracker);
			_opener.link.textContent = this.list.length;
			if (this.list.length == 0) {
				_page.domItem.style.display = "none";
				syra_menus.button.hide(_opener, true);
			} else {
				if (!removing) {
					_page.checkKindList();
					_page.resizeArticle();
				}
			}
		}
	}
};


function _onClearTracker() {
	_trackers.remove(_trackers.map[this.trackerId]);
}

function _onClear() {
	if (_page && _page.kindField) {
		var list = [];
		var selectedValue = _page.kindField.currentValue;
		var selectedTitle;
		for (var ii = 0, jj = _page.kindField.$enum.length; ii < jj; ii++) {
			if (_page.kindField.$enum[ii].$value == selectedValue) {
				selectedTitle = _page.kindField.$enum[ii].$title;
				break;
			}
		}
		for (var ii = 0, jj = _trackers.list.length; ii < jj; ii++) {
			var tracker = _trackers.list[ii];
			if (!tracker.isProcessing) {
				if (!(selectedTitle && (tracker.dataset.kind != selectedTitle) && (selectedTitle != syra_local.tracker_kind_default))) {
					list.push(tracker);
				}
			}
		}
		if (list) {
			while (list.length) {
				_trackers.remove(list.pop(), list.length); //check kind on last clean
			}
		}
	}
}

function _onTrackerActionClick() {
	var tracker = _trackers.map[this.trackerId];
	var $menu = tracker.dataset.$links[this.$bindValue];
	var $url = syra_url.formatMenuUrl(_page, $menu, tracker.dataset);
	switch (this.$bindValue) {
		case "$download":
			if ($menu.$verifyUrl) {
				var $verifyMenu = helpers.object.clone($menu, true);
				$verifyMenu.$sourceUrl = $verifyMenu.$url = $verifyMenu.$verifyUrl;
				delete $verifyMenu.$verifyUrl;
				var $verifyUrl = syra_url.formatMenuUrl(_page, $verifyMenu, tracker.dataset);
				syra_controller.callServer(null, {
					noDisplayErr: true,
					method: "GET",
					$location: {
						$url: $verifyUrl
					},
					$acceptType: tracker.dataset.mime
				}, function() {
					window.open($url, "_blank");
				}, function(error, httpquery) {
					tracker.onRequestError(error, true);
				});
				return;
			}
			window.open($url, "_blank");
			break;
		case "$cancel":
			_page._showMessage(this.$bindValue.slice(1), tracker.dataset, function() {
				tracker.onClientRelease();
			});
			break;
		case "$abort":
		case "$suspend":
		case "$resume":
			_page._showMessage(this.$bindValue.slice(1), tracker.dataset, function() {
				tracker.onClientRelease($url, $menu.$method);
			});
			break;
		default:
			var win = window.open($url, '_self');
			win.focus();
			break;
	}
}

function _onStackClick() {
	this.$opened = !this.$opened;
	var state = this.$opened ? "collapse" : "expand";
	syra_menus.button.setText(this, syra_local["trackers_stack_" + state], state);
	var diagnose = _trackers.map[this.trackerId].diagnoses.items[this.diagnoseIndex];
	if (this.$opened && !diagnose.stackSlot) {
		diagnose.stackSlot = document.createElement("div");
		diagnose.stackSlot.className = "s-tracker-stack";
		diagnose.stackSlot.innerHTML = syra_site.dom.textToHTML(diagnose.$diagnose.$stackTrace);
		this.link.parentNode.appendChild(diagnose.stackSlot);
	}
	syra_site.dom.hide(diagnose.stackSlot, !this.$opened);
}

function Tracker() {

}

helpers.defineClass(Tracker, null, {
	addRow: function(titleText) {
		var slot = document.createElement("div");
		slot.style.display = "none";
		slot.className = "s-tracker-row";
		var title = slot.appendChild(document.createElement("div"));
		title.textContent = titleText;
		title.className = "s-tracker-title";
		var value = slot.appendChild(document.createElement("div"));
		value.className = "s-tracker-value";
		return {
			slot: this.domItem.appendChild(slot),
			title: title,
			value: value
		};
	},
	draw: function() {
		this.domItem = _page.scrollview.appendChild(document.createElement("div"));
		this.domItem.className = "s-tracker-item";

		var row = document.createElement("div");
		row.className = "s-tracker-top";
		this.typeIcon = row.appendChild(document.createElement("div"));

		var slot = document.createElement("div");
		slot.className = "s-tracker-progress";
		this.progressSlide = slot.appendChild(document.createElement("div"));
		this.progressSlide.className = "s-tracker-progress-bar";
		this.progress = slot.appendChild(document.createElement("div"));
		this.progress.className = "s-tracker-progress-data";

		row.appendChild(slot);
		this.domItem.appendChild(row);

		var cell = document.createElement("div");
		cell.className = "s-tracker-action-cell";
		this.actionBtn = syra_menus.button.add({
			parent: _page,
			slot: cell,
			text: "",
			css: "s-tracker-action",
			fontIcon: "cancel",
			btnclick: _onTrackerActionClick,
			trackerId: this.dataset.$uuid
		});
		syra_menus.button.visibility(this.actionBtn, false);
		row.appendChild(cell);

		this.clearBtn = syra_menus.button.add({
			parent: _page,
			slot: row,
			text: syra_local.trackers_clear,
			css: "s-tracker-clear",
			iconOnly: true,
			fontIcon: "delete",
			btnclick: _onClearTracker,
			trackerId: this.dataset.$uuid
		});
		syra_menus.button.visibility(this.clearBtn, false);

		this.cells = {};
		this.domItem.appendChild(row);


		if (this.dataset.$links) {
			var $opener = this.dataset.$links.$opener;
			if ($opener && !this.openerLink) {
				var row = this.addRow(syra_local.trackers_opener);
				var id = helpers.uuid.generate();
				this.openerLink = _page.loadNewItem(row.value, {
					$category: "link",
					$bind: id,
					$skin: "s-tracker-opener-link"
				});
				var $links = {};
				$links[id] = helpers.object.clone($opener, true);
				_page.applyChange({
					$links: $links
				});
				row.slot.style.display = "";
			}
		}


		for (var ii = 0, jj = _$binds.$fields.length; ii < jj; ii++) {
			var $bind = _$binds.$fields[ii];
			this.cells[$bind] = this.addRow(syra_local["trackers_" + $bind]);
		}
	},
	applyChange: function(newData, success, $url) {
		this.isProcessing = !success;
		if (this.fusionContext) {
			if (success && $url && $url.indexOf("/print/$report") != -1) {
				newData = {
					$links: {
						$download: {
							$title: syra_local.trackers_download_label,
							$url: $url
						}
					}
				};
			}
			newData.$links = newData.$links || {};
			if (this.fusionContext.cancelSvcId && !success) {
				newData.$links.$cancel = {
					$title: syra_local.trackers_cancel_label
				};
			} else {
				newData.$links.$cancel = {
					$isHidden: true
				};
			}
		}
		syra_site.deltaManager.applyObjectDelta(this, this.dataset, newData);

		this.dataset.$uuid = this.dataset.uuid;
		this.dataset.$links = this.dataset.$links || {};
		if (newData.$state != undefined) {
			this.dataset.phase = newData.$state;
		}
		if (newData.startDate) {
			var startDate = new Date(newData.startDate);
			newData.startDate = this.dataset.startDate = _date.fromJsDate(startDate).toString();
			newData.startTime = this.dataset.startTime = _time.fromJsDate(startDate).toString();
		}

		if (newData.kind) {
			this.typeIcon.className = "s-tracker-kind-" + newData.kind;
		}
		if (newData.$links) {
			var visible;
			for (var mm = 0, pp = _$binds.$links.length; mm < pp; mm++) {
				var $bind = _$binds.$links[mm];
				var $link = newData.$links[$bind];
				if ($link && !$link.$isHidden) {
					var title = $link.$title || syra_local["trackers_" + $bind.replace("$", "") + "_label"];
					visible = true;
					syra_menus.button.setText(this.actionBtn, title, this.actionBtn.$bindValue = $bind);
				}
			}
			syra_menus.button.visibility(this.actionBtn, visible);
		}

		for (var ii = 0, jj = _$binds.$fields.length; ii < jj; ii++) {
			var $bind = _$binds.$fields[ii];
			var cell = this.cells[$bind];
			var show = (this.dataset[$bind] != undefined) ? "" : "none";
			if (newData[$bind] != undefined) {
				show = "";
				switch ($bind) {
					case "startTime":
						cell.value.textContent = _page.timeApi.parse(this.dataset.startTime).toString(_page.timeLocalFormat);
						break;
					case "startDate":
						cell.value.textContent = _page.datetApi.parse(this.dataset.startDate).toString(_page.dateLocalFormat);
						break;
					default:
						cell.value.textContent = newData[$bind] || "";
						break;
				}
			}
			if (cell.slot.style.display != show) {
				cell.slot.style.display = show;
			}
		}
		newData.$diagnoses && this.fillDiagnoses(newData.$diagnoses);
		if (this.isProcessing) {
			this.progressSlide.className = "s-tracker-progress-bar s-tracker-on";
		} else {
			this.progressSlide.className = "s-tracker-progress-bar s-tracker-" + _severities[this.severityIndex];
			if (this.actionBtn.$bindValue && ["$abort", "$suspend", "$resume", "$cancel"].indexOf(this.actionBtn.$bindValue) >= 0) {
				syra_menus.button.visibility(this.actionBtn, visible);
			}
			syra_menus.button.visibility(this.clearBtn, true);
		}
		this.progress.textContent = newData.progress ? (newData.progress + " %") : "";
		if (!this.isAdded) {
			_page.checkKindList();
			this.isAdded = true;
		}
		_page.resizeArticle();
	},
	fillDiagnoses: function($diagnoses) {
		this.severityIndex = _severities.indexOf("success");
		if (!this.diagnoses.slot) {
			this.diagnoses.slot = this.diagnosesSlot = document.createElement("div");
			this.diagnoses.slot.className = "s-tracker-diagnoses";
			this.domItem.appendChild(this.diagnoses.slot);
		}
		for (var ii = (this.fusionContext ? 0 : this.diagnoses.items.length), jj = $diagnoses.length; ii < jj; ii++) {
			var $diagnose = $diagnoses[ii];
			var $severity = $diagnose.$severity || "error";
			var diagnose = {
				$diagnose: $diagnose,
				item: syra_menus.button.addIndicator({
					parent: _page,
					text: $diagnose.$message,
					css: "s-diag-" + $severity + " s-tracker-diagnose",
					fontIcon: ($severity == "info") ? $severity : "diagnose"
				})
			};
			if ($diagnose.$stackTrace) {
				this.diagnoses.hasStack = true;
				diagnose.item.link.insertBefore(syra_menus.button.add({
					parent: _page,
					text: syra_local.trackers_stack_expand,
					css: "s-tracker-stack-opener",
					iconOnly: true,
					fontIcon: "expand",
					btnclick: _onStackClick,
					$opened: false,
					diagnoseIndex: ii,
					trackerId: this.dataset.$uuid
				}).link, diagnose.item.link.firstChild);
			}
			syra_site.dom.toggleClass(diagnose.item, "s-list-alt", ii % 2);
			this.diagnoses.slot.insertBefore(diagnose.item.link, this.diagnoses.slot.firstChild);
			if (!this.diagnoseHeight) {
				this.diagnoses.slot.style.maxHeight = this.diagnoseHeight = (5 * diagnose.item.link.getBoundingClientRect().height) + "px";
			}
			this.diagnoses.items.push(diagnose);
			var severityIndex = _severities.indexOf($severity);
			if (severityIndex < this.severityIndex) {
				this.severityIndex = severityIndex;
			}
		}
	},
	cancelAsynchRequest: function() {
		if (this.asynchReq && this.asynchReq.length > 0) {
			for (var ii = 0; ii < this.asynchReq.length; ii++) {
				clearTimeout(this.asynchReq[ii]);
			}
		}
	},
	callServer: function(reqOpt, cbck, onRelease) {
		var self = this;
		onRelease && self.cancelAsynchRequest();
		syra_controller.callServer(null, reqOpt, function(data, response, $url) {
			var reqOpt = {
				noDisplayErr: true,
				method: "GET",
				$location: {
					$url: response.headers.location
				}
			};
			if (self.fusionContext || (response.status != 204 && data != undefined)) {
				self.applyChange(data, response.status == 200, $url);
			}
			switch (response.status) {
				case 200:
					self.cancelAsynchRequest();
					if (self.fusionContext) {
						if ($url && $url.indexOf("/print/$report") != -1) {
							window.open($url, "_blank");
						}
						self.fusionContext && self.fusionContext.release();
					} else {
						// in case of asynch service operation, clean on success
						if ($url && $url.indexOf("/sdata/$trackers") != -1) {
							if (response.headers && response.headers['$do-not-delete']) {
								// Actually do not forward the final response to not erase async job data ($diagnoses...)
								// Do not DELETE tracker to be able to retrieve the final response throught $details link
								//self.callServer(this.buildReqOpt("GET", response.data.$links.$details.$url));
							} else {
								reqOpt.method = "DELETE";
								self.callServer(reqOpt);
							}
						}
					}
					break;
				case 201:
					if (self.fusionContext && response.headers.location.indexOf("/print/$report") != -1) {
						reqOpt.$acceptType = self.dataset.mime;
					}
					self.callServer(reqOpt);
					break;
				case 202:
					// 202 => server processes request asynchronously
					// do not send further request if a suspend request has been sent
					if ($url.indexOf("suspend=true") < 0) {
						self.asynchReq = self.asynchReq || [];
						self.asynchReq.push(setTimeout(function() {
							self.callServer(reqOpt);
						}, data.pollingMillis));
					}
					break;
				case 424:
					if ($url && $url.indexOf("/sdata/$trackers") != -1) {
						reqOpt.method = "DELETE";
						self.callServer(reqOpt);
					}
					break;
			}
		}, function(error, httpquery) {
			self.onRequestError(error);
		});
	},
	onRequestError: function(error, ignoreOpComplete) {
		var $diagnoses;
		if (error.data.indexOf("$diagnoses") != -1) {
			$diagnoses = JSON.parse(error.data).$diagnoses;
			if (!$diagnoses) {
				$diagnoses = [{
					$severity: "error",
					$message: syra_local.tracker_err_without_diag.replace("{status}", error.status)
				}];
			}
		} else {
			$diagnoses = [{
				$severity: "error",
				$message: error.data
			}];
		}
		this.applyChange({
			$diagnoses: $diagnoses
		}, true);
		syra_diagnose.box.close("no", _page.msgBoxId);
		!ignoreOpComplete && this.fusionContext && this.fusionContext.release();
	},
	onClientRelease: function($url, $method, cbck) {
		if (this.fusionContext) {
			if (this.fusionContext.cancelSvcId) {
				var $url = syra_site.expressionMaker.parse(this, this.dataset.$location, this.dataset.services[this.fusionContext.cancelSvcId]);
				this.callServer({
					noDisplayErr: true,
					method: "GET",
					$location: {
						$url: $url
					}
				}, cbck, true);
				this.fusionContext.release();
			}
		} else {
			$url &&
				this.callServer({
					noDisplayErr: true,
					method: $method,
					$location: {
						$url: $url
					}
				}, cbck, true);
		}
	}
});


function TrackersPage() {

}

helpers.defineClass(TrackersPage, DesktopPage, {
	loadBox: function() {
		this.diagnosePage = syra_site;
		this.datetApi = _formatApi.getApi("application/x-date");
		this.dateLocalFormat = _formatApi.getLocalFormat("application/x-date");
		this.timeApi = _formatApi.getApi("application/x-time");
		this.timeLocalFormat = _formatApi.getLocalFormat("application/x-time");

		var $skin = "s-trackers";
		this.$prototype = {
			$properties: {
				kind: {
					$type: "application/x-choice",
					$value: {
						$type: "application/x-integer",
						$enum: []
					}
				}
			}
		};
		this.$item = {
			$layout: {
				$items: []
			}
		};

		this.layoutSlot = document.createElement("div");
		this.layoutSlot.className = $skin;
		syra_site.layoutSlot.appendChild(this.layoutSlot);

		DesktopPage.prototype.loadBox.call(this);
		this.header = document.createElement("div");
		this.header.className = "s-trackers-header";
		this.header.style.display = "none";
		syra_site.dom.empty(this.domItem);
		this.domItem.appendChild(this.header);
		var div = document.createElement("div");
		div.className = "s-trackers-kind-slot";
		this.kindField = this.loadNewItem(this.header.appendChild(div), {
			$bind: "kind",
			$isEditMode: true,
			$format: "$combo",
			$inplace: true
		});

		this.clearAllBtn = syra_menus.button.add({
			parent: _page,
			slot: this.header,
			text: syra_local.trackers_clear_all,
			css: "s-trackers-clear",
			btnclick: _onClear
		});
		this.clearAllBtn.link.style.visibility = "hidden";

		this.scrollview = document.createElement("div");
		this.scrollview.className = "s-trackers-body";
		this.domItem.appendChild(this.scrollview);
	},
	checkKindList: function() {
		var kinds = {};
		var $enum = [{
			$value: syra_local.tracker_kind_default,
			$title: syra_local.tracker_kind_default
		}];
		var curValue = this.kindField.getDataValue() || $enum[0].$value;
		for (var ii = 0, jj = _trackers.list.length; ii < jj; ++ii) {
			var kind = _trackers.list[ii].dataset.kind;
			if (!kinds[kind]) {
				$enum.push({
					$value: kinds[kind] = kind,
					$title: kind
				});
			}
		}
		this.kindField.applyMetaData({
			$isHidden: $enum.length <= 2,
			$value: {
				$enum: $enum
			}
		});
		var newValue = kinds[curValue] || $enum[0].$value;
		this.kindField.setDataValue(newValue);
		this.notifyDataChange(this.kindField, newValue);
	},
	checkHeader: function() {
		var done = 0;
		for (var ii = 0, jj = _trackers.list.length; ii < jj; ++ii) {
			if (!_trackers.list[ii].isProcessing) {
				done++;
			}
		}
		var display = "none";
		var isClearVisible = done > 1 || (done == 1 && _trackers.list.length > 1);
		if (isClearVisible || !this.kindField.$isHidden) {
			syra_menus.button.visibility(this.clearBtn, isClearVisible);
			display = "";
		}
		if (this.header.style.display != display) {
			this.header.style.display = display;
		}
	},
	_showMessage: function($bind, dataset, cbck) {
		this.msgBoxId = syra_diagnose.box.show({
			$message: (syra_local['tracker_' + $bind + '_msg'].replace("{title}", dataset.title)).replace("{kind}", dataset.kind),
			$title: syra_local['tracker_' + $bind + '_title'],
			$type: "warning",
			$buttons: "yesno",
			$isAutoClose: 25000,
			$default: "no",
			callback: function(response, closedBy) {
				if (!(closedBy == "no" || closedBy == "auto")) {
					cbck();
				}
				return true;
			}
		}).id;
	},
	notifyDataChange: function(field, value) {
		for (var ii = 0, jj = field.$enum.length; ii < jj; ii++) {
			if (field.$enum[ii].$value == value) {
				var title = field.$enum[ii].$title;
				for (var mm = 0, pp = _trackers.list.length; mm < pp; mm++) {
					var tracker = _trackers.list[mm];
					tracker.domItem.style.display = ((tracker.dataset.kind == title) || (title == syra_local.tracker_kind_default)) ? "" : "none";
				}
				break;
			}
		}
	},
	toggle: function(show) {
		var self = this;
		show = show || !_popup;
		if (self.domItem) {
			if (show) {
				self.domItem.style.display = "";
				syra_site.dom.setZIndex(self.domItem);
				if (!_popup) {
					self.layoutSlot.style.display = "";
					_popup = syra_site.dialogManager.openPopup(self, {
						content: self,
						$isAutoClose: false,
						slot: self.layoutSlot,
						picker: _opener.link,
						position: {
							my: "right top",
							at: "right bottom",
							of: $(_opener.link)
						},
						onClose: function() {
							setTimeout(function() {
								syra_site.dom.hide(self.layoutSlot, true);
								_popup = null;
							}, 200);
						}
					});
					self.dialogWrapper = _popup;
					_popup.resizeDialog();
				}
			} else {
				_popup && _popup.close();
			}
		}
	},
	resizeArticle: function() {
		if (_popup) {
			this.checkHeader();
			var height = syra_site.body.getBoundingClientRect().height;
			height -= (syra_site.header && syra_site.headerTop.getBoundingClientRect().height) || 0;
			this.layoutSlot.style.height = "";
			this.layoutSlot.style.maxHeight = height + "px";
			var maxH = (height - this.header.getBoundingClientRect().height);
			this.scrollview.style.maxHeight = maxH + "px";
			var maxH;
			_popup.setPosition();
			for (var ii = 0, jj = _trackers.list.length; ii < jj; ++ii) {
				var tracker = _trackers.list[ii];
				if (tracker.diagnoses && tracker.diagnoses.slot) {
					if (tracker.diagnoses.showAll) {
						tracker.diagnoses.slot.style.maxHeight = maxH + "px";
					}

				}
			}
		}
	}
});


exports.addOpener = function(slot) {
	_opener = syra_menus.button.add({
		parent: syra_site,
		slot: slot,
		text: "",
		css: "s-trackers-opener",
		isHidden: true,
		iconOnly: true,
		btnclick: function() {
			_page && _page.toggle();
		}
	});

};

exports.dispose = function() {
	_page && _page.dispose();
	syra_menus.button.dispose(_opener);
	_opener = _page = _popup = null;
};

function _runTrackersViewer() {
	syra_controller.callServer(null, {
		method: "GET",
		$location: {
			$url: "/sdata/$trackers"
		}
	}, function(data, response, $url) {
		if (data.$resources && data.$resources.length > 0) {
			for (var ii = 0, jj = data.$resources.length; ii < jj; ii++) {
				var resource = data.$resources[ii];
				var params = {
					$location: resource.location || resource.$location,
					$state: resource.phase,
					$title: resource.title || "(Title not retrieved)",
					uuid: resource.uuid,
					kind: "operation"
				};
				syra_trackers.addTracker({
					$location: params.$location,
					$state: params.$state,
					title: params.$title,
					uuid: params.uuid
				});
			}
		}
	}, function(error, httpquery) {
		httpquery.showError(error);
	});
}

exports.addTracker = function(dataset, fusionContext) {
	var tracker = new Tracker();
	tracker.fusionContext = fusionContext;
	dataset.kind = dataset.kind || "operation";
	tracker.dataset = dataset;
	tracker.dataset.$uuid = dataset.$uuid || dataset.uuid;
	_trackers.add(tracker);
	tracker.diagnoses = {
		items: []
	};
	tracker.draw();
	tracker.applyChange(dataset);
	if (!dataset.isTestCase) {
		if (tracker.fusionContext) {
			tracker.fusionContext.onloaded(tracker, _page);
		} else {
			tracker.callServer({
				noDisplayErr: true,
				method: "GET",
				$location: {
					$url: tracker.dataset.$location
				}
			});
		}
	}
	return tracker;
};