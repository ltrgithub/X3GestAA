"use strict";
var _helpers = require('syracuse-core').helpers;
var _menuItem = require('syracuse-ui/lib/menus/menuItem');
var _section = require('syracuse-ui/lib/item/section');
var MenuGroup = require('syracuse-ui/lib/menus/menuGroup').MenuGroup;
var DateTimeField = require('syracuse-ui/lib/field/datetimeField').DateTimeField;
var NumericField = require('syracuse-ui/lib/field/numericField').NumericField;
var DocumentField = require('syracuse-ui/lib/field/documentField').DocumentField;
var UnknowField = require('syracuse-ui/lib/field/unknowField').UnknowField;
var _layout = require("syracuse-ui/lib/item/layout");
var MultiArrayField = require("syracuse-ui/lib/field/array/multiArrayField").MultiArrayField;
var SingleArrayField = require("syracuse-ui/lib/field/array/singleArrayField").SingleArrayField;

var _extendBuilder = require('syracuse-ui/lib/extend/extendBuilder');

var vignetteFormats = {
	"$html": require('syracuse-ui/lib/field/vignette/htmlVignetteField').HTMLVignetteField,
	"$webi": require('syracuse-ui/lib/field/vignette/boWebIVignetteField').BOWebIVignetteField,
	"$page": require('syracuse-ui/lib/field/vignette/pageVignetteField').PageVignetteField,
	"$item": require('syracuse-ui/lib/field/vignette/itemVignetteField').ItemVignetteField
};

exports.fieldTypes = {
	"application/x-variant": require('syracuse-ui/lib/field/variantField').VariantField,
	"application/x-icon": require('syracuse-ui/lib/field/iconField').IconField,
	"application/x-choice": require('syracuse-ui/lib/field/choice/choiceField').ChoiceField,
	"application/x-date": DateTimeField,
	"application/x-time": DateTimeField,
	"application/x-datetime": DateTimeField,
	"application/x-boolean": require('syracuse-ui/lib/field/booleanField').BooleanField,
	"application/x-integer": NumericField,
	"application/x-decimal": NumericField,
	"application/x-real": NumericField,
	"application/x-quantity": NumericField,
	"application/x-password": require('syracuse-ui/lib/field/passwordField').PasswordField,
	"application/x-string": require('syracuse-ui/lib/field/stringField').StringField,
	"application/x-reference": require('syracuse-ui/lib/field/referenceField').ReferenceField,
	"application/x-object": require('syracuse-ui/lib/field/child/childField').ChildField,
	"text/plain": require('syracuse-ui/lib/field/textPlainField').TextPlainField,
	"application/x-filter": require('syracuse-ui/lib/field/filter/filterWidget').FilterWidget,
	"application/wid": require('syracuse-ui/lib/field/vignette/boWebIVignetteField').BOWebIVignetteField,
};

var vignettePage = require('syracuse-ui/lib/page/vignettePage').VignettePage;
exports.pageCategories = {
	landing: require('syracuse-ui/lib/page/landing/landingPage').LandingPage,
	navigation: require('syracuse-ui/lib/page/navigation/admin/navigationPage').NavigationPage,
	portlet: vignettePage,
	vignette: vignettePage,
	fusion: require('syracuse-ui/lib/fusion/article/sheetPage').SheetPage,
	search: require('syracuse-ui/lib/search/searchPage').SearchPage,
	landingVignetteSelect: require('syracuse-ui/lib/page/landing/select/selectPage').SelectPage
};


var _categories = {
	space: {
		create: function() {
			return new _section.Space();
		}
	},
	section: {
		create: function() {
			return new _section.Section();
		}
	},
	block: {
		create: function() {
			return new _section.Section();
		}
	},
	menus: {
		create: function() {
			return new MenuGroup();
		}
	},
	link: {
		create: function() {
			return _menuItem.create();
		}
	},
	field: {
		create: function($item, boxParent) {
			var article = syra_article.getArticle(boxParent);
			var field;
			if ($item.$field && !$item.$fieldId) {
				$item.$fieldId = _helpers.uuid.generate(); //ensure id for vignette
			}
			if (article && article.reloadingFields) {
				var $key = $item.$bind || $item.$fieldId;
				if ($key) {
					field = article.reloadingFields[$key];
					if (field) {
						field.isReloading = true;
						delete article.reloadingFields[$key];
						if (field) {
							if (field.onReloading) {
								field = field.onReloading($item);
							} else {
								syra_item.initialize(article.page, field, $item, boxParent);
								if (field.applyDesignMeta) {
									field.applyDesignMeta($item, true);
								}
							}
							if (field) {
								return field;
							}
						}

					}
				}
			}
			var $field = $item.$field || article.$prototype.$properties[$item.$bind];
			if ($field && $field.$isExcluded) {
				if (!(article.isRecordArticle && article.list && article.list.$prototype && article.list.$prototype.$treeview)) {
					//if (article && article.page.isVignettePage) {
					$field = null;
				}
			}
			if ($field) {
				var $class = ($item.$isDecoratorType && $field.$decoratorType) || $field.$graphType || $field.$type;
				var fieldClass = $item.$class;
				if (!fieldClass) {
					switch ($class) {
						case "application/x-array":
							if (!$field.$item.$properties || $field.$item.$type == "application/x-reference") {
								fieldClass = SingleArrayField;
							} else {
								fieldClass = MultiArrayField;
							}
							break;
						case "application/x-portlet":
						case "application/x-vignette":
							if (!$field.$format && $field.$location) {
								$field.$format = $field.$location.$type == "html" ? "$html" : "$page";
							}
							$field.$format = $field.$format || "$html";
							fieldClass = vignetteFormats[$field.$format];
							break;
					}
				}

				var field = article.page.createField && article.page.createField($field, $item, boxParent, $class);
				if (!field) {
					fieldClass = fieldClass || exports.fieldTypes[$class];
					if (fieldClass) {
						field = new fieldClass();
					}
					if (!field) {
						field = _extendBuilder.create($field, $item, boxParent, $class);
					}
				}
				if (!field) {
					switch ($class) {
						case "application/x-binary":
						case "application/x-document":
						case "image":
							field = new DocumentField();
							break;
						default:
							if ($field.$url) {
								$field.$contentType = $field.$type;
								$field.$acceptedTypes = $field.$acceptedTypes || [];
								$field.$acceptedTypes.push($field.$contentType);
								field = new DocumentField();
							}
							break;
					}
				}
				if (!field) {
					field = new UnknowField();
					field.unknowMode = "nowidget";
				}
				if (field) {
					field.isField = true;
					field.$designLevel = "field";
					field.$field = $field;
				}
			} else {
				field = new UnknowField();
				field.unknowMode = "noproto";
				field.$field = {
					$type: "unknow"
				};
				field.isField = true;
				field.$designLevel = "field";
			}

			if ($item.attachedField) {
				field.attachedField = $item.attachedField;
				delete $item.attachedField;
			}
			return field;
		}
	}
};



var _map = {};

exports.getMap = function() {
	return _map;
};

exports.register = function(item) {
	_map[item.id] = item;
};

exports.get = function(id) {
	return _map[id];
};

exports.unregister = function(item) {
	delete _map[item.id];
};

exports.dispose = function() {
	_map = {};
};

exports.bind = function(item, $bind) {
	if (item && $bind) {
		var article = item.articleParent;
		(article.boundFields[$bind] = article.boundFields[$bind] || []).push(item);
		if (article.isFusionPage) {
			// Hack before to code a more suitable solution - SAM 113584 & #7858
			article.bind(item, $bind);
			return;
		}
		item.setValue(article.$prototype[$bind], undefined, article.$prototype);
		if (article.isArticleLoaded) {
			var dataset = article.dataset;
			item.setValue(dataset[$bind], dataset.$properties && dataset.$properties[$bind], dataset);
		}
	}
};

exports.unbind = function(item) {
	if (item && item.$item && item.$item.$bind) {
		var article = item.articleParent;
		var map = item.isMenuItem ? article.menuItems : article.boundFields;
		var bounds = map && map[item.$item.$bind];
		if (bounds) {
			for (var ii = 0; ii < bounds.length; ii++) {
				if (bounds[ii] == item) {
					bounds.splice(ii, 1);
					break;
				}
			}
		}
	}
};

exports.remove = function(item, removeDom, unbind) {
	if (item) {
		if (removeDom) {
			if (item.remove) {
				item.remove();
			} else {
				if (item.domItem && item.domItem.parentNode) {
					item.domItem.parentNode.removeChild(item.domItem);
				}
			}
		}
		var article = item.articleParent;
		if (article && !article.disposed) {
			unbind && exports.unbind(item);
			if (item.id) {
				delete article.idMap[item.id];
			}
		}
		item.dispose && !item.disposed && item.dispose();
	}
};

exports.findRecordByServerIndex = function(list, $serverIndex) {
	for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
		if (list.records[ii].$serverIndex == $serverIndex) {
			return list.records[ii];
		}
	}
	return null;
};

exports.findList = function(item) {
	var list = item.isArrayField && item;
	if (!list) {
		//walk up from field
		var article = item.articleParent;
		while (article) {
			if (article.isArrayField) {
				list = article;
				break;
			}
			article = article.articleParent;
		}
	}
	if (!list && item.page.boundFields) {
		//walk up from page
		var binds = Object.keys(item.page.boundFields);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var field = item.page.boundFields[binds[ii]];
			field = field && field[0];
			if (field && field.isArrayField) {
				list = field;
				break;
			}
		}
	}
	return list;
};

exports.getLists = function(page) {
	var lists = [];
	var $binds = page.boundFields ? Object.keys(page.boundFields) : [];
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var fields = page.boundFields[$binds[ii]];
		if (fields) {
			for (var mm = 0, kk = fields.length; mm < kk; mm++) {
				if (fields[mm] && fields[mm].isArrayField) {
					lists.push(fields[mm]);
				}
			}
		}
	}
	return lists;
};


exports.findRecord = function(list, dom) {
	var record;
	while (dom && dom != document) {
		if (dom.syraItem !== undefined) {
			record = _map[dom.syraItem];
			if (record && record.isRecordArticle && !record.isChildFieldRecord) {
				return record;
			}
		}
		dom = dom.parentNode;
	}
	return null;
};
exports.findField = function(dom) {
	var field;
	while (dom != null) {
		if (dom.syraItem) {
			field = _map[dom.syraItem];
			if (!field || (field && field.isField)) {
				break;
			}
		}
		dom = dom.parentNode;
	}
	return field;
};

exports.findItem = function(dom) {
	var item;
	while (dom != null) {
		if (dom.syraItem) {
			item = _map[dom.syraItem];
			if (item) {
				break;
			}
		}
		dom = dom.parentNode;
	}
	return item;
};


exports.initialize = function(page, item, $item, boxParent) {
	item.page = page;
	if ($item) {
		item.$item = $item;
		if (!item.id) {
			item.id = $item.$id || $item.$clientId;
		}
	}
	if (!item.id) {
		item.id = page.id + "-" + (++page._childItemOffset);
	}
	exports.register(item);
	if (boxParent) {
		item.boxParent = boxParent;
		(item.articleParent = syra_article.getArticle(boxParent)).idMap[item.id] = item;
		exports.registerBoxField(item);
	}
	return item;
};


exports.registerBoxField = function(item, check) {
	if (item.boxParent.boxChildItems && item.$item && item.$item.$bind) {
		if (check && item.boxParent.boxChildItems.indexOf(item) >= 0) {
			return;
		}
		item.boxParent.boxChildItems.push(item);
	}
};

exports.registerSection = function(section) {
	if (!section.boxParent.childrenSection) {
		section.boxParent.childrenSection = [];
	}
	var index = section.boxParent.childrenSection.indexOf(section);
	if (index < 0) {
		section.boxParent.childrenSection.push(section);
	}
};
exports.unregisterSection = function(section) {
	if (section.boxParent.childrenSection) {
		var index = section.boxParent.childrenSection.indexOf(section);
		if (index >= 0) {
			section.boxParent.childrenSection.splice(index, 1);
		}
	}
};

exports.addRecord = function(options) {
	var article = {
		$prototype: options.$prototype,
		datset: {},
		articleParent: options.articleParent,
		page: options.page
	};
	exports.initialize(article.page, article, {});
	syra_article.add(article);
	article.applyChange = function(newData) {
		syra_dataset.applyDelta(this.page, article.dataset, newData);
		syra_article.applyChange(this, newData);
	};
	options.dataset && article.applyChange(options.dataset);
	syra_menus.applyChange(article, article.$prototype);
	options.delta && article.applyChange(options.delta);
	return article;
};



exports.add = function(page, $item, boxParent, newItem) {
	var item = newItem;
	if ($item) {
		if ($item.$items && !$item.$layoutType && !$item.$bind && !$item.$category) {
			$item.$layoutType = "stack";
		}
		if ($item.$layoutType) {
			item = _layout.add($item, boxParent);
		} else {
			var $category = $item.$category;
			if (!$category) {
				$category = $item.$bind ? "field" : "section";
			}
			if (!item) {
				item = _categories[$category].create($item, boxParent);
			}
			if (item) {
				exports.initialize(page, item, $item, boxParent);
			}
		}
	}
	syra_log.add(item, $item);
	return item;
};

exports.ensureMediaTypes = function($prototype, finish) {
	_extendBuilder.ensureMediaTypes($prototype, finish);
};