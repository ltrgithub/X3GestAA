"use strict";

function _loadChildItems(layout, items, index) {
	if (layout.isRow && index != undefined) {
		var lastItem = layout.items[index];
		if (!lastItem && items.length > 1) {
			exports.wrapIntack(layout, items, index);
			return;
		} else {
			if (lastItem && !lastItem.isLayout) {
				var stack = exports.wrapIntack(layout, [lastItem], index);
				_loadChildItems(stack, items);
				return;
			}
		}
	}
	for (var ii = 0, jj = items.length; ii < jj; ii++) {
		var item = items[ii];
		layout.loadChildItem(item, null, index);
	}
}

exports.setChildAuhtoringLevel = function(layout) {
	if (layout.boxParent.$designLevel == "block") {
		layout.$chilAuthoringLevel = "field";
	} else {
		var children = layout.getItems();
		if (children.length > 0) {
			layout.$chilAuthoringLevel = children[0].$designLevel;
		} else {
			layout.$chilAuthoringLevel = layout.boxParent.$designLevel == "section" ? "block" : "section";
		}
	}
};

exports.extractItems = function(layout, children, addSpaceBox) {
	children = (children || layout.getItems()) || [];
	for (var ii = 0, jj = children.length; ii < jj; ii++) {
		var child = children[ii];
		if (child.layoutParent && !child.isSpaceBox) {
			exports.extractItem(child.layoutParent, child, addSpaceBox);
		}
	}
	return children;
};

exports.wrapIntack = function(layout, items, index) {
	var children = exports.extractItems(layout, items);
	var stack = layout.loadChildItem(null, {
		$layoutType: "stack",
		$items: []
	}, index);
	exports.newLoadChildItems(stack, children);
	return stack;
};


function _addNewItem(designedArticle, targetItem, $newAuthoringLevel, $bind, dropItem, $insertAt) {
	var newChild;
	var targetBoxParent = targetItem.boxParent;
	var targetItemIndex = targetItem.layoutParent ? targetItem.layoutParent.$layout.$items.indexOf(targetItem.$item) : undefined;
	var targetLayout;
	if ($insertAt !== "undefined") {
		if (targetItem.layoutParent) {
			switch (targetItem.layoutParent.$layout.$layoutType) {
				case "stack":
					switch ($insertAt) {
						case "bottom":
							targetItemIndex++;
							break;
						case "left":
						case "right":
							if (!(targetItem.isLayout && targetItem.$layout.$layoutType == "row")) {
								var rowLayout = targetItem.layoutParent.createChildItem({
									$layoutType: "row",
									$items: []
								}, null, targetItemIndex);
								_loadChildItems(rowLayout, [targetItem]);
								rowLayout.$layout.$widths = null;
								targetItemIndex = $insertAt == "left" ? 0 : 1;
							} else {
								targetItemIndex = $insertAt == "left" ? 0 : targetItem.items.length;
							}
							break;
					}
					break;
				case "row":
					switch ($insertAt) {
						case "top":
						case "bottom":
							if (targetItem.isSpaceBox) {
								//drop in an empty collumn
								targetLayout = targetItem.layoutParent;
								targetLayout.removeItem(targetItem, true);
								targetItem = targetLayout; //important 
							} else {
								//drop in row empty cell, wrap drop in stack
								exports.wrapIntack(targetItem.layoutParent, [targetItem], targetItemIndex);
								targetItemIndex = ($insertAt == "top") ? 0 : 1;
							}
							break;
						case "left":
						case "right":
							targetItem.layoutParent.$layout.$widths = null;
							if ($insertAt == "right") {
								targetItemIndex++;
							}
							break;
					}
					break;
				case "tabs":
					if ($insertAt == "right") {
						targetItemIndex++;
					}
					break;
			}
		}
	}
	targetLayout = targetLayout || targetItem.layoutParent;
	if (dropItem && dropItem.isLayout) {
		if (!targetLayout) {
			targetItemIndex = $insertAt == "top" ? 0 : 1;
			targetItem = exports.ensureHasParent(targetItem);
			targetLayout = targetItem.layoutParent;
		}
		newChild = targetLayout.loadChildItem(dropItem, null, targetItemIndex);
	} else {
		if (targetItem.isLayout) {
			exports.setChildAuhtoringLevel(targetItem);
		}
		var $targetAuthoringLevel = targetItem.$chilAuthoringLevel || targetItem.$designLevel;
		if (targetItem.isLayout) {
			$targetAuthoringLevel = targetItem.$chilAuthoringLevel;
			if (targetItem.isRow && ($insertAt == "left" || $insertAt == "right")) {
				targetLayout = targetItem;
			}
			if (!targetLayout) {
				targetItemIndex = $insertAt == "top" ? 0 : 1;
				targetItem = exports.ensureHasParent(targetItem);
				targetLayout = targetItem.layoutParent;
			}
		}
		if ($targetAuthoringLevel == "field") {
			if ($newAuthoringLevel == "field") {
				newChild = targetLayout.loadChildItem(dropItem, null, targetItemIndex);
			} else {
				//dragged section  
				if (dropItem.layoutContent) {
					_loadChildItems(targetLayout, dropItem.layoutContent.getFields(), targetItemIndex);
					if (dropItem.layoutParent) {
						dropItem.layoutParent.removeItem(dropItem, true);
					}
				} else {
					var $children = exports.getItemSettings(dropItem, null, true);
					for (var ii = 0, jj = $children.length; ii < jj; ii++) {
						targetLayout.createChildItem($children[ii], null, targetItemIndex);
					}
				}
				newChild = targetItem;
			}
		} else {
			if ($targetAuthoringLevel == "block" && $newAuthoringLevel == "section") {
				if (dropItem.layoutContent) {
					exports.setChildAuhtoringLevel(dropItem.layoutContent);
					if (dropItem.layoutContent.$chilAuthoringLevel == "block") {
						_loadChildItems(targetLayout, dropItem.layoutContent.getChildren(), targetItemIndex);
						newChild = targetItem.boxParent;
					} else {
						_loadChildItems(targetLayout, dropItem.layoutContent.getChildren(), targetItemIndex);
						if (dropItem.layoutParent) {
							dropItem.layoutParent.removeItem(dropItem, true);
						}
						newChild = targetLayout.boxParent;
					}
				} else {
					var $chilAuthoringLevel = "block";
					var $children = exports.getItemSettings(dropItem);
					if ($children.length > 0) {
						$chilAuthoringLevel = $children[0].$bind ? "field" : "block";
					}
					for (var ii = 0, jj = $children.length; ii < jj; ii++) {
						targetLayout.createChildItem($children[ii], null, targetItemIndex);
					}
					if ($chilAuthoringLevel == "block") {
						newChild = ($chilAuthoringLevel == "block") ? targetItem.boxParent : targetLayout.boxParent;
					}
				}
			} else {
				newChild = targetLayout.ensureSection(dropItem, targetItemIndex);
			}
		}
	}
	if (!newChild) {
		newChild = targetItem && targetItem.isSpaceBox;
		newChild = newChild || designedArticle;
	}
	if (targetItem && targetItem.isSpaceBox && targetItem.layoutParent) {
		targetItem.layoutParent.removeItem(targetItem, true, false);
	}
	if (dropItem && !dropItem.layoutParent && dropItem.articleParent) {
		syra_item.remove(dropItem, true);
	}
	return newChild;
}

function _appendNewSectionNode(article, sectionNode) {
	if (article.page.garbage) {
		for (var ii = 0, jj = sectionNode.garbage.length; ii < jj; ii++) {
			article.page.garbage.onAddField(sectionNode.garbage[ii]);
		}
		for (var ii = 0, jj = sectionNode.free.length; ii < jj; ii++) {
			article.page.garbage.onAddField(sectionNode.free[ii]);
		}
		if (sectionNode.children) {
			for (var ii = 0, jj = sectionNode.children.length; ii < jj; ii++) {
				var child = sectionNode.children[ii];
				if (child.garbage || child.free) {
					_appendNewSectionNode(article, child);
				}
			}
		}
	}
}

function _loadAddNewItem(article, newAddItem) {
	var $item;
	if (newAddItem.$fieldBind) {
		if (newAddItem.$isFreeField) {
			article.page.garbage && article.page.garbage.onAddField(newAddItem.$fieldBind);
		}
		$item = {
			$bind: newAddItem.$fieldBind,
			$category: newAddItem.$fieldCategory || "field",
			$skin: newAddItem.$fieldSkin
		};
	} else {
		if (newAddItem.$field) {
			$item = {
				$category: "field",
				$field: newAddItem.$field
			};
		} else {
			if (newAddItem.sectionNode) {
				_appendNewSectionNode(article, newAddItem.sectionNode);
				if (newAddItem.sectionNode.loadedFields.length) {
					article.reloadingFields = article.reloadingFields || {};
					for (var ii = 0, jj = newAddItem.sectionNode.loadedFields.length; ii < jj; ii++) {
						var field = newAddItem.sectionNode.loadedFields[ii];
						var $key = field && field.$item && (field.$item.$bind || field.$item.$fieldId);
						if ($key) {
							article.reloadingFields[$key] = field;
							exports.extractItem(field.layoutParent, field);
						}
					}
				}
			}
			$item = newAddItem.$item || {
				$category: "section"
			};
			if (article.page.isFusionPage && $item.$layout) {
				$item.$layout = exports.cleanConvergenceSetting($item.$layout);
			}
		}
	}
	var newItem = syra_item.add(article.page, $item, article.page);
	newItem.$newAddItem = true;
	return newItem;
}

exports.getWidthValues = function(layout) {
	var widths;
	if (layout.$layout.$widths) {
		widths = layout.$layout.$widths.split(",");
		for (var ii = 0, jj = widths.length; ii < jj; ii++) {
			widths[ii] = parseInt(widths[ii], 10);
		}
	}
	return widths || [];
};

exports.deleteRowColumn = function(layout, deletedIndex) {
	var widths = exports.getWidthValues(layout);
	var deletedWidth = widths[deletedIndex];
	var updatedIndex = Math.min(deletedIndex > 0 ? (deletedIndex - 1) : 1, widths.length - 1);
	widths[updatedIndex] += deletedWidth;
	widths.splice(deletedIndex, 1);
	layout.$layout.$widths = widths.join(",");
	if (layout.items.length == 1) {
		var updated;
		while (layout) {
			var children = layout.getChildren();
			var layoutParent = layout.layoutParent;
			if (layoutParent) {
				if (children.length == 1 && (layoutParent.isRow || layoutParent.items.length == 1)) {
					updated = layoutParent;
					var index = layoutParent.items.indexOf(layout);
					exports.extractItems(layout, children, false);
					layoutParent.removeItem(layout, true, false);
					layoutParent.loadChildItem(children[0], null, index);
					layout = layoutParent;
					continue;
				}
			}
			break;
		}
		if (!updated) {
			exports.convertToNewLayout(layout, {
				$layoutType: "stack",
				$width: "100"
			}, children);
			updated = layout;
		}
	}
};

function _clearRootStackChildren(children, obsoleteLayouts) {
	var newChildren = [];
	if (children) {
		for (var ii = 0, jj = children.length; ii < jj; ii++) {
			var child = children[ii];
			if (child && child.isLayout && child.$item.$layoutType == "stack") {
				newChildren = newChildren.concat(exports.extractItems(child, child.getChildren()));
				obsoleteLayouts.push(child);
			} else {
				newChildren.push(child);
			}
		}
	}
	return newChildren;
}


exports.ensureHasParent = function(layout) {
	var $layoutType = layout.$layout.$layoutType;
	var $widths = layout.$layout.$widths;
	var boxParent = layout.boxParent;
	var children = exports.extractItems(layout, layout.getChildren());
	syra_dom.remove(layout.domItem);
	layout.dispose();
	boxParent.$item.$layout = {
		$layoutType: "stack",
		$items: [{
			$layoutType: $layoutType,
			$widths: $widths,
			$items: []
		}]
	};
	boxParent.renderLayoutContent();
	var layoutContent = boxParent.layoutContent.items[0];
	exports.removeSpace(layoutContent, true);
	exports.newLoadChildItems(layoutContent, children);
	return layoutContent;
};

exports.removeSpace = function(layout, all) {
	var spaces = [];
	for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
		if (layout.items[ii].isSpaceBox) {
			spaces.push(layout.items[ii]);
		}
	}
	if (!all && spaces.length == layout.items.length) {
		spaces.shift();
	}
	for (var ii = 0, jj = spaces.length; ii < jj; ii++) {
		layout.removeItem(spaces[ii], true);
	}
};

exports.extractItem = function(layout, item, addSpaceBox) {
	if (layout.items && layout.$layout && layout.$layout.$items) {
		var index = layout.items.indexOf(item);
		if (index >= 0) {
			layout.items.splice(index, 1);
		}
		index = layout.$layout.$items.indexOf(item.$item);
		if (index >= 0) {
			layout.$layout.$items.splice(index, 1);
		}

		if (addSpaceBox && layout.isRow) {
			layout.addSpaceBox(index);
		}
		if (item.isTabLayout && item.isTabSection) {
			syra_dom.remove(item.header);
		}
		if (layout.isRow && item.layoutSlot) {
			item.layoutSlot.style.width = "";
		}
		item.layoutParent = null;
		if (item.boxParent && item.boxParent.boxChildItems) {
			index = item.boxParent.boxChildItems.indexOf(item);
			if (index >= 0) {
				item.boxParent.boxChildItems.splice(index, 1);
			}
		}
		if (item.isSection) {
			syra_item.unregisterSection(item);
		}
	} else {
		item.layoutParent = null;
		if (layout.isRow && item.layoutSlot) {
			item.layoutSlot.style.width = "";
		}
	}
	return item;
};


exports.onAddNewItem = function(article, targetItem, newItem, $insertAt) {
	var newChild = newItem;
	if (newItem.$awAddNewItem) {
		newChild = _loadAddNewItem(article, newItem);
	}
	newChild = _addNewItem(article, targetItem, newItem.$designLevel, newItem.$bind, newChild, $insertAt);
	if (newItem.$designLevel == "field") {
		article.page.garbage && article.page.garbage.onAddField(newItem.$fieldBind || newItem.$vignette);
	}
	var section = newChild.boxParent;
	if (section.$item.$fieldsIsTopLabelAlignment !== undefined ||
		section.$item.$fieldsIsRightTextLabelAlignment !== undefined ||
		section.$item.$fieldsIsTitleHidden !== undefined ||
		section.$item.$fieldsIsTitleEmpty !== undefined) {
		if (newChild.isField) {
			section.applyDesignMetaToField(newChild, section.$item);
		} else {
			if (newChild.isSection) {
				newChild.applyDesignMeta({
					$fieldsIsTopLabelAlignment: section.$item.$fieldsIsTopLabelAlignment,
					$fieldsIsRightTextLabelAlignment: section.$item.$fieldsIsRightTextLabelAlignment,
					$fieldsIsTitleHidden: section.$item.$fieldsIsTitleHidden,
					$fieldsIsTitleEmpty: section.$item.$fieldsIsTitleEmpty
				}, true);
			}
		}
	}
	delete article.reloadingFields;
	return newChild;
};

exports.newLoadChildItems = function(layout, children, start) {
	for (var ii = start || 0, jj = children.length; ii < jj; ii++) {
		var child = children[ii];
		if (child && child.articleParent && !child.disposed) {
			layout.loadChildItem(child);
		}
	}
};

exports.clearContent = function(layout) {
	if (layout._tabs) {
		syra_dom.remove(layout._tabs);
		delete layout._tabs;
	}
	while (layout.items.length > 0) {
		var item = layout.items[0];
		if (item.isLayout) {
			exports.clearContent(item);
		} else {
			if (item.layoutContent) {
				exports.clearContent(item.layoutContent);
			}
		}
		layout.removeItem(item, true);
	}
};

exports.convertToNewLayout = function(layout, $newLayout, children) {
	var children = children || layout.getChildren();
	exports.extractItems(layout, children); //, true);
	//Clear space old layout
	exports.clearContent(layout);

	var newChildren = [];
	if (children) {
		for (var ii = 0, jj = children.length; ii < jj; ii++) {
			var child = children[ii];
			if (child && child.articleParent && !child.disposed) {
				newChildren.push(child);
			}
		}
	}
	children = newChildren;
	delete layout.$layout.$widths;
	layout.$layout.$widths = $newLayout.$widths;
	layout.$layout.$layoutType = $newLayout.$layoutType;
	layout.ensureLayoutMode();
	var obsoleteLayouts = [];
	if (layout.isRow) {
		var widths = exports.getWidthValues(layout);
		if (children.length <= widths.length) {
			exports.newLoadChildItems(layout, children); //fill rows
		} else {
			for (var ii = 0, jj = widths.length - 1; ii < jj; ii++) {
				layout.loadChildItem(children.shift());
			}
			var stack = layout.loadChildItem(null, {
				$layoutType: "stack",
				$items: []
			});
			exports.newLoadChildItems(stack, _clearRootStackChildren(children, obsoleteLayouts)); //fill first row
		}
	} else {
		exports.newLoadChildItems(layout, _clearRootStackChildren(children, obsoleteLayouts));
	}
	for (var ii = 0, jj = obsoleteLayouts.length; ii < jj; ii++) {
		layout.removeItem(obsoleteLayouts[ii], true);
	}
};

exports.cleanConvergenceSetting = function($layout, $parentLayout) {
	if ($layout && $layout.$items) {
		if ($layout.$layoutType == "row") {
			if ($layout.$items && $layout.$items.length == 1) {
				$layout = $layout.$items[0];
				if ($layout.$layout) {
					$layout.$layout = exports.cleanConvergenceSetting($layout.$layout);
				} else {
					if ($layout.$layoutType) {
						$layout = exports.cleanConvergenceSetting($layout);
					}
				}
			}
		}
		if ($layout.$items) {
			for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
				var $child = $layout.$items[ii];
				if ($child.$layout) {
					$child.$layout = exports.cleanConvergenceSetting($child.$layout);
				} else {
					if ($child.$layoutType) {
						$layout.$items[ii] = exports.cleanConvergenceSetting($child);
					}
				}
			}
		}
	}
	return $layout;
};

exports.getItemSettings = function(box, $items, fieldOnly, found) {
	found = found || [];
	$items = $items || (box.$item && box.$item.$layout && box.$item.$layout.$items);
	if ($items) {
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			if ($item.$bind) {
				found.push($item);
			} else {
				if ($item.$layout) {
					if (fieldOnly) {
						if ($item.$layout.$items) {
							found = exports.getItemSettings(box, $item.$layout.$items, fieldOnly, found);
						}
					} else {
						found.push($item);
					}
				} else {
					if ($item.$items) {
						found = exports.getItemSettings(box, $item.$items, fieldOnly, found);
					}
				}
			}
		}
	}
	return found;
};

exports.getDefaultWidths = function(count) {
	var width = syra_site.roundDecimal(100 / count, 2);
	var widths = [];
	for (var ii = 0; ii < count; ii++) {
		widths.push(width);
	}
	return widths.join(",");
};

exports.toggleSeparator = function(item, sepType, skinSep) {
	if (sepType) {
		if (item.syraSeparator && item.syraSeparator != skinSep) {
			syra_dom.toggleClass(item.layoutSlot, item.syraSeparator, false);
		}
		item.syraSeparator = skinSep;
		item.layoutSlot.syraSeparatorType = item.syraSeparatorType = sepType;
		syra_dom.toggleClass(item.layoutSlot, item.syraSeparator, true);
	} else {
		if (item.layoutSlot && item.syraSeparator) {
			syra_dom.toggleClass(item.layoutSlot, item.syraSeparator, false);
			delete item.layoutSlot.syraSeparatorType;
			delete item.syraSeparator;
			delete item.syraSeparatorType;
		}
	}
};


function _setSeparators(layout) {
	if (layout.boxParent.$skin) {
		var prevItem, item, skinSep;
		var sepType = layout.$layout.$layoutType;
		skinSep = layout.boxParent.$skin + "-sep-" + sepType;
		for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
			item = layout.items[ii];
			if (ii > 0) {
				exports.toggleSeparator(prevItem, sepType, skinSep);
			}
			prevItem = item;
		}
		if (item && item.syraSeparator) {
			exports.toggleSeparator(item, false);
			layout.ensureItemVisibility(prevItem);
		}
	}
}


exports.setRowWidths = function(layout) {
	if (!layout.$layout.$widths) {
		layout.$layout.$widths = exports.getDefaultWidths(layout.items.length || 1);
	}
	var $widths = layout.$layout.$widths.split(",");
	var sum = 0,
		last = $widths.length - 1;
	for (var ii = 0; ii <= last; ii++) {
		sum += ($widths[ii] = parseFloat($widths[ii]));
	}
	sum = 100 - sum;
	$widths[last] += sum;
	for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
		var style = layout.items[ii].layoutSlot.style;
		style.width = $widths[ii] + "%";
		if (layout.$layout.$rowAlign) {
			style.verticalAlign = layout.$layout.$rowAlign;
		}
	}
};

var _validators = {
	stack: function(layout) {
		layout.isRow = false;
		if (layout.isDesigned) {
			if (layout.items.length == 0) {
				layout.addSpaceBox();
			} else {
				for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
					if (layout.items[ii].isSpaceBox && jj > 1) {
						exports.removeSpace(layout);
						return true;
					}
				}
			}
		}
		for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
			var item = layout.items[ii];
			item.layoutSlot.style.width = "";
		}
		_setSeparators(layout);
		delete layout.$layout.$tabIndex;
		layout.$layout.$widths = "100";
	},
	row: function(layout) {
		layout.isRow = true;
		var $widths;
		if (layout.$layout.$widths) {
			var $widths = layout.$layout.$widths.split(",");
			if ($widths.length > layout.items.length) {
				for (var ii = layout.items.length, jj = $widths.length; ii < jj; ii++) {
					layout.addSpaceBox();
				}
			}
			if ($widths.length != layout.items.length) {
				layout.$layout.$widths = exports.getDefaultWidths(layout.items.length);
			}
		} else {
			layout.$layout.$widths = exports.getDefaultWidths(layout.items.length);
		}
		exports.setRowWidths(layout);
		_setSeparators(layout);
		delete layout.$layout.$tabIndex;
	},
	tabs: function(layout) {
		layout.isRow = false;
		layout.$layout.$widths = "100";
		if (layout.items.length > 0) {
			//check visibility
			var firstVisible;
			var count = layout.items.length;
			if (layout.$layout.$tabIndex !== undefined && layout.$layout.$tabIndex >= count) {
				delete layout.$layout.$tabIndex;
			}
			for (var ii = count - 1; ii >= 0; ii--) {
				var item = layout.items[ii];
				if ((item.$opened && (ii != layout.$layout.$tabIndex)) || (item.isInvisible && !layout.isDesigned)) {
					item.openBox(false);
				}
				if (item.isInvisible && !layout.isDesigned) {
					if (layout.$layout.$tabIndex == ii) {
						delete layout.$layout.$tabIndex;
					}
				} else {
					firstVisible = ii;
				}
				exports.toggleSeparator(item, false);
			}
			if (layout.$layout.$tabIndex === undefined) {
				layout.$layout.$tabIndex = firstVisible;
			}
			if (layout.$layout.$tabIndex !== undefined && !layout.items[layout.$layout.$tabIndex].$opened) {
				layout.items[layout.$layout.$tabIndex].openBox(true);
			} else {
				if (layout.$layout.$tabIndex === undefined) {
					delete layout.$layout.$tabIndex;
				}
			}
		}
	}
};

exports.validate = function(layout, parseTree) {
	if (layout) {
		if (layout.isDesigned = layout.articleParent.isDesigned) {
			if (layout.boxParent && layout.boxParent.$isAuthoringEnabled === false) {
				layout.isDesigned = false;
			}
		}
		_validators[layout.$layout.$layoutType](layout);
		if (parseTree) {
			for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
				var item = layout.items[ii];
				exports.validate(item.isLayout ? item : item.layoutContent, parseTree);
			}
		}
		layout.isDesigned = false;
	}
};


exports.ensureSectionVisibility = function(section) {
	var isVisible = true;
	if (section.isSection && !section.isVignetteField) {
		isVisible = false;
		if (section.$item && section.$item.$isEmptyVisible) {
			isVisible = true;
		} else {
			if (section.childrenSection) {
				for (var ii = 0, jj = section.childrenSection.length; ii < jj; ii++) {
					if (exports.ensureSectionVisibility(section.childrenSection[ii])) {
						isVisible = true;
					}
				}
			}
			if (!isVisible && section.boxChildItems.length) {
				for (var ii = 0, jj = section.boxChildItems.length; !isVisible && ii < jj; ii++) {
					isVisible = !section.boxChildItems[ii].isInvisible;
				}
			}
		}
		if (isVisible == section.isInvisible || section.isInvisible === undefined) {
			section.isInvisible = !isVisible;
			if ((section.isInvisible !== section.$isHidden) || (!section.isInvisible && !section.$isHidden && section.isItemHidden)) {
				section.showSection(!(section.isInvisible || section.$isHidden));
			}
		}
	}
	return isVisible;
};
exports.ensureArticleVisibility = function(article, resizeIfNeed, boxParent) {
	if (article.page == article) {
		if (!article.isPageLoaded || article._isDataChanging) {
			return;
		}
		resizeIfNeed = true;
	}
	exports.validateLayoutContent(article, boxParent);
	resizeIfNeed && article.resizeItem && article.resizeItem(true, boxParent);
};

exports.validateLayoutContent = function(article, boxParent) {
	if (article.childrenSection) {
		for (var mm = 0, kk = article.childrenSection.length; mm < kk; mm++) {
			if (!boxParent || boxParent.isChild(article.childrenSection[mm])) {
				exports.ensureSectionVisibility(article.childrenSection[mm]);
			}
		}
	}
	var layoutContent = (boxParent || article).layoutContent;
	layoutContent && exports.validate(layoutContent, true);
};

exports.cleanBeforeSave = function($item, inLoop) {
	if ($item) {
		if (!inLoop) {
			$item = syra_site.clone($item);
		}
		delete $item.$tabIndex;
		if ($item.$layout) {
			exports.cleanBeforeSave($item.$layout, true);
		}
		if ($item.$items) {
			for (var ii = 0, jj = $item.$items.length; ii < jj; ii++) {
				var $child = $item.$items[ii];
				if (!$child.$layout && $child.$layoutType == "tabs") {
					if (!$child.$items || $child.$items.length == 0) {
						$item.$items.splice(ii, 1);
						ii--;
						jj--;
						continue;
					}
				}
				exports.cleanBeforeSave($child, true);
			}
		}
	}
	return $item;
};