"use strict";

exports.add = function($layout, boxParent) {
	return new Layout($layout, boxParent);
};

function Layout($layout, boxParent) {
	this.boxParent = boxParent;
	this.articleParent = syra_article.getArticle(boxParent);
	this.page = this.boxParent.page;
	this.$designLevel = "layout";
	this.id = this.boxParent.id + "-" + (++this.page._childItemOffset);
	syra_item.register(this);
	this.articleParent.idMap[this.id] = this;
	this.isLayout = true;
	this.$item = this.$layout = $layout;
	if (!$layout.$items) {
		$layout.$items = [];
	}
	if (!this.$layout.$layoutType) {
		this.$layout.$layoutType = "stack";
		this.$layout.$widths = "100";
	} else {
		switch (this.$layout.$layoutType) {
			case "side":
			case "columns":
				this.$layout.$layoutType = "row";
				break;
		}
		if (this.$layout.$layoutSubType) {
			this.$layout.$widths = this.$layout.$layoutSubType;
		}
	}
	this.isRow = this.$layout.$layoutType == "row";
	this.isTabLayout = this.$layout.$layoutType == "tabs";
}

Layout.prototype.getOpenedTab = function() {
	return (this.$layout.$tabIndex !== undefined && this.items[this.$layout.$tabIndex]);
};
Layout.prototype.getTitle = function() {
	return "";
};
Layout.prototype.applyDesignMeta = function(metaData, designing) {
	if (designing !== false) {
		if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
			this.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
		}
		if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
			this.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
		}
		if (metaData.$field !== undefined) {
			this.$item.$field = this.$item.$field || {};
			var $props = Object.keys(metaData.$field);
			for (var ii = 0, jj = $props.length; ii < jj; ii++) {
				var $prop = $props[ii];
				this.$item.$field[$prop] = metaData.$field[$prop];
			}
		}
	}
};
Layout.prototype.ensureSection = function(item, index) {
	var layoutParent = this;
	if (!item.isSection) {
		layoutParent = this.loadChildItem(null, {
			$category: "section",
			$layout: {
				$items: []
			}
		}, index).layoutContent;
		index = undefined;
	}
	layoutParent.loadChildItem(item, null, index);
	return item;
};
Layout.prototype.loadChildItem = function(childItem, $childItem, index) {
	if (childItem) {
		return this.appendChildItem(childItem, index, false);
	}
	return this.createChildItem($childItem, null, index);
};
Layout.prototype.appendChildItem = function(item, index, load) {
	if (item.layoutParent) {
		syra_layout.extractItem(item.layoutParent, item, true);
	}
	item.layoutParent = this;
	item.boxParent = this.boxParent;
	syra_item.registerBoxField(item, true);
	if (item.isSection) {
		syra_item.registerSection(item);
	}

	var append;
	if (!item.layoutSlot) {
		item.layoutSlot = document.createElement("div");
	}
	item.isTabLayout = this.$layout.$layoutType == "tabs";
	if (index === undefined) {
		if (this.isItemRegisterDisable == false) {
			this.$layout.$items.push(item.$item);
		}
		this.items.push(item);
		this.domItem.appendChild(item.layoutSlot);
	} else {
		if (this.isItemRegisterDisable == false) {
			this.$layout.$items.splice(index, 0, item.$item);
		}
		this.items.splice(index, 0, item);
		var sibling = this.items[index + 1];
		if (sibling) {
			sibling.layoutSlot.parentNode.insertBefore(item.layoutSlot, sibling.layoutSlot);
		} else {
			if (item.isTabLayout) {
				append = true;
			}
			this.domItem.appendChild(item.layoutSlot);
		}
	}
	if (this.$layout.$layoutType == "row") {
		if (this.$layout.$valign) {
			item.layoutSlot.style.verticalAlign = this.$layout.$valign;
		}
	}
	syra_fields.ensureLayoutMode(item);
	if (item.$newAddItem) {
		load = true;
		delete item.$newAddItem;
	}
	if (load) {
		if (item.isReloading) {
			item.applyDesignMeta(item.$item, true);
			delete item.isReloading;
		} else {
			item.load();
		}
	}
	if (item.isTabLayout) {
		if (sibling && sibling.isTabSection && item.isTabSection) {
			sibling.header.parentNode.insertBefore(item.header, sibling.header);
		} else {
			if (append) {
				this.ensureTabsSlot().appendChild(item.header);
			}
		}
	}
	return item;
};
Layout.prototype.createChildItem = function($item, item, index) {
	item = syra_item.add(this.page, $item, this.boxParent, item);
	if (item) {
		this.appendChildItem(item, index, true);
	}
	return item;
};

Layout.prototype.removeItem = function(item, removeSlot, addSpaceBox) {
	syra_layout.extractItem(this, item, addSpaceBox);
	if (removeSlot && item.layoutSlot) {
		syra_dom.remove(item.layoutSlot);
	}
	syra_item.remove(item, true);
};
Layout.prototype.addSpaceBox = function(index) {
	return this.createChildItem({
		$category: "space"
	}, null, index);
};

Layout.prototype.ensureLayoutSlot = function(item) {
	var css = "s-slot-" + this.$layout.$layoutType;
	if (item.layoutSlot.className != css) {
		item.layoutSlot.className = css;
	}
};
Layout.prototype.ensureLayoutMode = function() {
	if (this.layoutParent) {
		this.layoutParent.ensureLayoutSlot(this);
	}
	if (!this.domItem) {
		this.domItem = document.createElement("div");
		this.layoutSlot.appendChild(this.domItem);
	}
	var css = "s-layout-" + this.$layout.$layoutType;
	if (this.boxParent.$skin) {
		css = this.boxParent.$skin + "-layout " + css;
	}
	if (this.$item.$css) {
		css += " " + this.$item.$css;
	}
	this.domItem.className = css;
	this.isRow = this.$layout.$layoutType == "row";
	this.isTabLayout = this.$layout.$layoutType == "tabs";
};
Layout.prototype.ensureTabsSlot = function() {
	if (!this._tabs) {
		this._tabs = syra_dom.div("s-layout-tabs-nav");
		this.domItem.insertBefore(this._tabs, this.domItem.firstChild);
	}
	return this._tabs;
};
Layout.prototype.load = function() {
	this.ensureLayoutMode();
	this.items = [];
	this.isItemRegisterDisable = true;
	syra_log.startLoad(this);
	for (var ii = 0, jj = this.$layout.$items.length; ii < jj; ii++) {
		this.createChildItem(this.$layout.$items[ii]);
	}
	this.isItemRegisterDisable = false;
	syra_log.endLoad();
};
Layout.prototype.ensureItemVisibility = function(item, $isHidden) {
	var isHidden = !item.isDesigning && (!this.isRow && ($isHidden || item.$isHidden || item.isInvisible || item.isItemHidden));
	if (item.layoutSlot) {
		syra_dom.hide(item.layoutSlot, isHidden);
	}
	if (item.syraSeparator && item.layoutSlot) {
		item.layoutSlot.syraSeparatorType = item.syraSeparatorType;
		syra_dom.toggleClass(item.layoutSlot, item.syraSeparator, !isHidden);
	}
	if (item.isDesigning) {
		item.isDesigningVisibilityForced = true;
		if (item.layoutSlot) {
			syra_dom.toggleClass(item.layoutSlot, "s-aw-visibility-forced", item.$isHidden);
			syra_dom.toggleClass(item.layoutSlot, "s-aw-advanced-visibility-forced", item.$item.$isAdvanced);
		}
		if (item.domItem) {
			syra_dom.toggleClass(item.domItem, "s-aw-visibility-forced", item.$isHidden);
			syra_dom.toggleClass(item.domItem, "s-aw-advanced-visibility-forced", item.$item.$isAdvanced);
		}

	} else {
		if (item.isDesigningVisibilityForced) {
			if (item.layoutSlot) {
				syra_dom.toggleClass(item.layoutSlot, "s-aw-visibility-forced", false);
				syra_dom.toggleClass(item.layoutSlot, "s-aw-advanced-visibility-forced", false);
			}
			if (item.domItem) {
				syra_dom.toggleClass(item.domItem, "s-aw-visibility-forced", false);
				syra_dom.toggleClass(item.domItem, "s-aw-advanced-visibility-forced", false);
			}

		}
	}
};
Layout.prototype.getFields = function() {
	return this.getItems("field");
};
Layout.prototype.getItems = function($designLevel, children) {
	if (!children) {
		children = [];
	}
	for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
		var item = this.items[ii];
		if (item != this.boxParent && !item.isSpaceBox) {
			if (item.isLayout || ($designLevel && item.layoutContent)) {
				children = (item.isLayout ? item : item.layoutContent).getItems($designLevel, children);
			} else {
				if (!$designLevel || ($designLevel == item.$designLevel)) {
					children.push(item);
				}
			}
		}
	}
	return children;
};
Layout.prototype.getChildren = function() {
	var children = [];
	for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
		children.push(this.items[ii]);
	}
	return children;
};
Layout.prototype.getColumnsCount = function() {
	return (this.$item.$widths || "100").split(",").length;
};
Layout.prototype.dispose = function() {
	syra_site.disposeObject(this);
};