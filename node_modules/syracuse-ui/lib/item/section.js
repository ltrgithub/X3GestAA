"use strict";
var helpers = require('syracuse-core').helpers;

function _toggleCloseButton(section, show) {
	if (show) {
		if (!section.closeBtn) {
			section.closeBtn = syra_button.add({
				parent: section,
				slot: section.ensureButtonsSlot(),
				text: syra_local.box_close,
				css: section.$skin + "-btn",
				iconOnly: true,
				fontIcon: "close",
				click: function() {
					var articleParent = this.parent.articleParent;
					this.parent.isMaximized && this.parent.maximizeBtn.link.click();
					this.parent.layoutParent.removeItem(this.parent, true);
					syra_layout.ensureArticleVisibility(articleParent, true);
				}
			});
		}
	} else {
		syra_button.remove(section.closeBtn);
		delete section.closeBtn;
	}
}

function _applyDesignFieldsSettings(box, metaData) {
	if (metaData.$fieldsIsTopLabelAlignment !== undefined ||
		metaData.$fieldsIsRightTextLabelAlignment !== undefined ||
		metaData.$fieldsIsTitleHidden !== undefined ||
		metaData.$fieldsIsTitleEmpty !== undefined) {
		if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
			box.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
		}
		if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
			box.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
		}
		if (metaData.$fieldsIsTitleHidden !== undefined) {
			box.$item.$fieldsIsTitleHidden = metaData.$fieldsIsTitleHidden;
		}
		if (metaData.$fieldsIsTitleEmpty !== undefined) {
			box.$item.$fieldsIsTitleEmpty = metaData.$fieldsIsTitleEmpty;
		}
		var items = box.layoutContent.getItems();
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			var item = items[ii];
			if (item.isField) {
				box.applyDesignMetaToField(item, metaData);
			} else {
				if (!item.isLayout && item.layoutContent) {
					_applyDesignFieldsSettings(item, metaData);
				}
			}
		}
	}
}

function _expandBody(section, $opened, event) {
	if (!section.$isDisabled && event) {
		if (event && event.shiftKey) {
			if (section.page.isBoxesExpanded === undefined) {
				section.page.isBoxesExpanded = true;
			}
			section.page.isBoxesExpanded = !section.page.isBoxesExpanded;
			var siblings = section.boxParent && section.boxParent.childrenSection;
			if (siblings) {
				for (var ii = 0, jj = siblings.length; ii < jj; ii++) {
					(siblings[ii] != box) && _expandBody(siblings[ii], expand);
				}
			}
		}
		section.$opened = ($opened === undefined) ? !section.$opened : $opened;
		section.page.externalAdapter.onBoxToggle({
			box: section,
			open: section.$opened,
			isFirstTime: !section.loaded || false,
			doEvent: function() {
				if (section.isMenuGroup) {
					section.onBoxToggle();
				} else {
					section.openBox(section.$opened);
					syra_layout.ensureArticleVisibility(section.articleParent, true);
				}
			}
		});
		if (!section.$item.$isPopupContent) {
			section._setExpandIcon();
		}
	}
}

function _onOpenerClick(event) {
	var section = this.parent;
	if (section.isTabSection) {
		var tabIndex = section.layoutParent.items.indexOf(section);
		var isTabSelected = section.layoutParent.getOpenedTab() == section;
		if (isTabSelected) {
			section.page.externalAdapter.onBoxClick({
				box: section,
				event: event,
				tabIdx: tabIndex
			});
		} else {
			//if (!syra_dd.ddAgent) {
			var open = !section.$item.$opened;
			var isFirstTime = !section.loaded;
			section.page.externalAdapter.onBoxToggle({
				nativeEvent: event,
				nativeEvenData: section.syraOnEventData,
				box: section,
				isTabSelected: isTabSelected,
				open: open,
				isFirstTime: isFirstTime,
				tabIdx: tabIndex,
				doEvent: function() {
					!isTabSelected && section.openTab();
				}
			});
			delete section.syraOnEventData;
			return false;
			//}
		}
	} else {
		if (section.$item.$isBoxCollapsable) {
			syra_quality.logOpenSectionState(section);
			_expandBody(section, undefined, event);
			if (section.page && section.page.designer) {
				section.$item.$opened = section.$opened;
				section.page.designer.endArticleUpdate(section, true);
			}
		}
	}

}

function _addTitle(section, $title) {
	if (section.$field && (!$title || $title == "-")) {
		$title = section.$field.$title;
	}
	section.ensureSkin();
	section.titleBtn && syra_button.remove(section.titleBtn);

	var domItemCss = section.$skin;
	var headerCss = section.$skin + "-head";
	var domTitleCss = section.$skin + "-title";
	var bodyCss = section.$skin + "-body";
	var $style;
	if (section.$item.$style) {
		$style = " s-cst-sty-" + section.$item.$style;
	}
	if (section.isTabLayout) {
		domItemCss += " s-tab-section";
		headerCss += " s-tab-head";
		domTitleCss += " s-tab-title";
		bodyCss += " s-tab-body";
		if (section.$opened) {
			headerCss += " s-tab-open";
		}
	}
	if (section.$item.$css) {
		var $css = " " + section.$item.$css;
		domItemCss += $css;
		bodyCss += $css;
		headerCss += $css;
		domTitleCss += $css;
	}
	if ($style) {
		domItemCss += $style;
		headerCss += $style;
		domTitleCss += $style;
		bodyCss += $style;
	}
	section.domItem.className = domItemCss;
	section.header.className = headerCss;
	section.body.className = bodyCss;
	var $btn = {
		parent: section,
		css: domTitleCss,
		isIndicator: true
	};
	if (section.isTabLayout) {
		section.isTabSection = true;
		delete $btn.isIndicator;
		var tabs = section.layoutParent.ensureTabsSlot();
		tabs.appendChild(section.header);
		section.header.syraItem = section.header.syrainout = section.id;
		$btn.click = _onOpenerClick;
	} else {
		section.isTabSection = false;
		if (section.$item.$isBoxCollapsable) {
			delete $btn.isIndicator;
			if (section.$item.$isPopupContent) {
				$btn.fontIcon = "expand_m";
			} else {
				if (section.$opened === undefined) {
					section.$opened = section.$item.$opened !== false;
				}
				$btn.fontIcon = section.$opened ? "node_expanded" : "node_collapsed";
			}

			$btn.click = _onOpenerClick;
		}
		if (section.$item.$titleIcon) {
			$btn.titleImage = (section.$item.$titleIcon.$path || "") + section.$item.$titleIcon.$value + ".png";
		}
		section.domItem.insertBefore(section.header, section.domItem.firstChild);
	}
	section.titleBtn = syra_button.add($btn);
	section.domTitle = section.titleBtn.link;
	section.setTitle($title);
	section.header.insertBefore(section.titleBtn.link, section.header.firstChild);
	section.domItem.syraItem = section.domItem.syrainout = section.id;

}

function _ensureDisplay(section) {
	syra_dom.hide(section.domItem, section.isItemHidden);
	syra_dom.hide(section.header, section.isItemHidden || section.isTitleHidden);
	if (!section.isItemHidden && section.isBodyShow != section.$opened) {
		section.isBodyShow = section.$opened;
		if (section.hasFlashChildField && section.body.parentNode) {
			var style = section.body.style;
			style.visibility = section.isBodyShow ? "" : "hidden";
			style.height = section.isBodyShow ? "" : "0px";
			style.width = section.isBodyShow ? "" : "0px";
			style.borderWidth = section.isBodyShow ? "" : "0";
			style.padding = section.isBodyShow ? "" : "0";
			style.overflow = section.isBodyShow ? "" : "hidden";
		} else {
			if (section.isBodyShow) {
				!section.body.parentNode && section.domItem.appendChild(section.body);
			} else {
				syra_dom.remove(section.body);
			}
		}
	}
}

function Section() {}

exports.Section = helpers.defineClass(Section, null, {
	_setExpandIcon: function() {
		if (this.$item.$isBoxCollapsable) {
			var state = this.$opened ? "node_expanded" : "node_collapsed";
			syra_button.setText(this.titleBtn, undefined, state);
		}
	},
	setState: function(state) {
		if (state.$isHidden !== undefined) {
			if (this.$isHidden !== state.$isHidden) {
				this.showSection(!(this.$isHidden = state.$isHidden));
			}
		}
	},
	applyDesignMeta: function(metaData, designing) {
		this.setState(metaData);
		if (metaData.$isCloseable !== undefined) {
			_toggleCloseButton(this, this.$item.$isCloseable = metaData.$isCloseable);
		}
		if (metaData.$isMaximizable !== undefined) {
			this.toggleMaximizeButton(this.$item.$isMaximizable = metaData.$isMaximizable);
		}
		if (designing !== false) {
			var updateTitle;
			if (metaData.$isTitleHidden !== undefined) {
				this.$item.$isTitleHidden = metaData.$isTitleHidden;
				updateTitle = true;
			}
			if (metaData.$title !== undefined) {
				this.$item.$title = metaData.$title;
				updateTitle = true;
			}
			if (metaData.$isBoxCollapsable !== undefined) {
				this.$item.$isBoxCollapsable = metaData.$isBoxCollapsable;
				if (this.$item.$isBoxCollapsable) {
					this.$opened = this.$item.$opened !== false;
				}
				updateTitle = true;
				if (designing && !this.$item.$isBoxCollapsable && !this.$opened) {
					_expandBody(this, true);
				}
			}
			updateTitle && _addTitle(this, this.$item.$title);
			designing && _applyDesignFieldsSettings(this, metaData);

			if (metaData.$field !== undefined) {
				this.$item.$field = this.$item.$field || {};
				var $props = Object.keys(metaData.$field);
				for (var ii = 0, jj = $props.length; ii < jj; ii++) {
					var $prop = $props[ii];
					this.$item.$field[$prop] = metaData.$field[$prop];
				}
			}
		}
	},
	ensureOpened: function() {
		if (!this.$opened) {
			if (this.isTabSection) {
				this.openTab();
			} else {
				this.openBox(!this.$opened);
			}
		}
	},
	openBox: function(open) {
		this.loaded = true;
		this.$opened = open;
		if (this.isTabSection) {
			if (open) {
				this.$item.$opened = true;
			} else {
				delete this.$item.$opened;
			}
			syra_dom.toggleClass(this.header, "s-tab-open", open);
		}
		_ensureDisplay(this);
	},
	openTab: function() {
		this.layoutParent.$layout.$tabIndex = this.layoutParent.items.indexOf(this);
		syra_layout.ensureSectionVisibility(this);
		syra_layout.validate(this.layoutParent);
		this.page.resizeItem(true, this.articleParent != this.page ? this.articleParent : null);
		this.page.section_onAfterOpentTab && this.page.section_onAfterOpentTab(this);
	},
	showSection: function(show) {
		this.isItemHidden = !show;
		_ensureDisplay(this);
	},
	isChild: function(item) {
		var boxParent = item.boxParent;
		while (boxParent && boxParent != this) {
			boxParent = boxParent.boxParent;
		}
		return boxParent == this;
	},
	applyDesignMetaToField: function(field, metaData) {
		field.applyDesignMeta({
			$isTopLabelAlignment: metaData.$fieldsIsTopLabelAlignment,
			$isRightTextLabelAlignment: metaData.$fieldsIsRightTextLabelAlignment,
			$isTitleHidden: metaData.$fieldsIsTitleHidden,
			$isTitleEmpty: metaData.$fieldsIsTitleEmpty
		}, true);
	},
	ensureButtonsSlot: function() {
		if (!this.buttonsSlot) {
			this.buttonsSlot = syra_dom.div("s-section-btns", this.header);
		}
		return this.buttonsSlot;
	},
	renderLayoutContent: function() {
		this.layoutContent = this.page.addItem(this.body, this.$item.$layout, this);
	},
	toggleMaximizeButton: function(show) {
		syra_maximizer.toggleButton(this, show, this.ensureButtonsSlot(), this.$skin + "-btn");
	},
	load: function() {
		this.isSection = true;
		if (!this.$item.$layout) {
			this.$item.$layout = {};
		}
		if (!this.$item.$layout.$items) {
			this.$item.$layout.$items = [];
		}
		syra_item.registerSection(this);
		this.boxChildItems = [];
		this.$item.$name = this.$item.$name || this.$clientId; //used for authoring
		this.ensureDefaultTitle();
		this.ensureSkin();
		this.domItem = document.createElement("section");
		syra_log.startLoad(this);
		if (this.$item.$expression) {
			if (this.$item.$css) {
				this.domItem.className = this.$item.$css;
			}
			this.layoutSlot.appendChild(this.domItem);
			this.$isEditMode = this.articleParent.$isEditMode;
			syra_expression.render(this, this.$item.$expression, this.domItem);
		} else {
			this.body = document.createElement("div");
			//syra_dom.hide(this.body, true); //!!important to avoid unnecesary loading
			this.header = document.createElement("header");
			var $title = this.$item.$title;
			if (this.$item.$XID && this.page.dynamicTitles) {
				$title = this.page.dynamicTitles[this.$item.$XID] || $title;
			}
			if (this.$item.$style) {
				if (this.$item.$style == "header") {
					if ($title == "-") {
						$title = "";
						this.$item.$isTitleHidden = true;
					}
				}
				this.header.className += " s-cst-sty-" + this.$item.$style;
			}
			/*if (this.$field && (!$title || $title == "-")) {
			 $title = this.$field.$title;
			 }*/
			_addTitle(this, $title);

			if (this.isTabLayout) {
				delete this.$item.$opened;
			}
			this.ensureLayoutMode();
			if (this.$item.$width) {
				this.domItem.style.width = this.$item.$width;
			}

			this.layoutSlot && this.layoutSlot.appendChild(this.domItem);
			this.setDescription(this.$item.$description);
			this.applyDesignMeta(this.$item, false);

			this.renderLayoutContent();
			this.loaded = true;
			this.$opened = !this.isTabSection && this.$item.$opened !== false;

			this.openBox(this.$opened);
			syra_log.endLoad(this);
		}
	},

	setDescription: function($description) {
		if ($description != null && this.header) {
			if (!this.domDescription) {
				this.domDescription = syra_dom.div(this.$skin + "-description", this.header);
			}
			if ($description.indexOf("{") < 0) {
				this.domDescription.textContent = $description;
				if (this.isTabSection) {
					this.domTitle.title = $description;
				}
			} else {
				syra_expression.render(this, $description, this.domDescription, this.$skin + "-description-field", false);
			}
		}
	},
	getDefaultTitle: function() {
		return this.isMenuGroup ? syra_local.box_menusTitle : syra_local["box_" + this.$designLevel + "Title"];
	},
	getTitle: function(applyDefault) {
		var title = this.titleText === undefined ? ((this.$item && this.$item.$title) || "") : this.titleText;
		if ((title == "" || title == "-") && applyDefault !== false) {
			title = this.getDefaultTitle();
		}
		return title;
	},
	setTitle: function(title, isDynamic) {
		if (this.titleBtn) {
			if (isDynamic && this.$item.$XID) {
				//set only by convergence setDataContainer
				this.page.dynamicTitles = this.page.dynamicTitles || {};
				this.page.dynamicTitles[this.$item.$XID] = title;
			}
			if (this.isTabSection && (title == null || title == "")) {
				title = this.getDefaultTitle();
			}
			if (title != null && title != "") {
				this.titleText = title;
				if (this.titleText == "-") {
					this.titleText = "";
				}
				if (this.titleText.indexOf("{") >= 0) {
					var parsedText = syra_expression.parse(this.articleParent, this.titleText);
					if (parsedText && parsedText.charAt(0) == "@") {
						this.isTitleUnlocalized = this.titleText == ("{" + parsedText + "}");
						syra_button.visibility(this.titleBtn, !this.isTitleUnlocalized);
					} else {
						this.titleText = parsedText;
						if (this.isTitleUnlocalized) {
							this.isTitleUnlocalized = false;
							syra_button.visibility(this.titleBtn, true);
						}
					}
				}
				syra_button.setText(this.titleBtn, this.titleText);
				this.isTitleHidden = !this.isTabSection && this.$item.$isTitleHidden;
				if (isDynamic && !this.isItemHidden && this.loaded) {
					syra_dom.hide(this.header, this.isTitleHidden);
				}

			} else {
				this.isTitleHidden = true;
			}
		}
	},
	onItemInOut: function(onEnter, event, target) {
		this.page.diagnosePanel && this.page.diagnosePanel.onBoxItemInOut(this, onEnter);
	},
	ensureDefaultTitle: function() {
		if (!this.$item.$title && !this.isMenuGroup) {
			if (this.layoutParent && this.layoutParent.$layout && this.layoutParent.$layout.$items.length > 1) {
				//this.$item.$title = "-";
			}
		}
	},
	disable: function($isDisabled) {
		if ($isDisabled == false && this.$isDisabled === undefined) {
			this.$isDisabled = false;
		} else {
			this.$isDisabled = $isDisabled;
			syra_button.disable(this.header, $isDisabled);
			syra_dom.toggleClass(this.body, "s-disabled", $isDisabled);
			syra_button.disable(this.titleBtn, $isDisabled);
		}
	},
	ensureSkin: function() {
		this.$designLevel = this.boxParent.isSection ? "block" : "section";
		this.$skin = this.$item.$skin;
		if (!this.$skin) {
			if (this.boxParent.isSection) {
				this.$skin = this.articleParent.$defaultSkinBlock || this.page.$defaultSkinBlock || "s-h2";
			} else {
				this.$skin = this.articleParent.$defaultSkinSection || this.page.$defaultSkinSection || "s-h1";
			}
		}
	},
	ensureLayoutMode: function() {
		if (this.layoutParent) {
			this.layoutParent.ensureLayoutSlot(this);
			if (this.titleBtn && this.articleParent && this.articleParent.isDesigned) {
				var updateTitle;
				var $designLevel = "section";
				if (this.boxParent && this.boxParent.$designLevel == $designLevel) {
					$designLevel = "block";
				}
				if ($designLevel != this.$designLevel) {
					this.ensureSkin();
					updateTitle = true;
				}
				var isTabLayoutUpdated = (this.isTabLayout != this.isTabSection);
				if (updateTitle || isTabLayoutUpdated) {
					_addTitle(this, this.titleText || this.$item.$title);
					if (isTabLayoutUpdated && !this.isTabSection && !this.$opened && this.articleParent.isDesigned) {
						this.openBox(!this.$opened);
					}
				}
			}
		}
	},
	dispose: function() {
		syra_item.unregisterSection(this);
		this.layoutContent && this.layoutContent.dispose();
		syra_site.disposeObject(this);
	}
});

function Space() {}

exports.Space = helpers.defineClass(Space, null, {
	load: function() {
		this.isSpaceBox = true;
		this.$field = {};
		this.$designLevel = "field";
		this.domItem = this.header = this.body = syra_dom.div(this.$skin = "s-aw-empty", this.layoutSlot);
		this.loaded = true;
	},
	getTitle: function() {
		return "";
	},
	setTitle: function() {},
	openBox: function(open) {},
	dispose: function() {
		syra_site.disposeObject(this);
	}
});