"use strict";
var List = require('syracuse-ui/lib/scroll/list').List;
var _styleSheetPath = "/syracuse-ui/themes/desktop/";
var _styleSheets = {};
var _themeStyleSheet;
var _header;

function Theme(userProfile, slot) {
	this.page = userProfile;
	this.id = this.page.id + "-theme";
	syra_item.register(this);

	this.btn = syra_dom.anchor("s-list-primary-btn-default", slot);
	this.btn.syraItem = this.btn.syrainout = this.id;
	syra_dom.span("s-profile-theme-label", this.btn).textContent = syra_local.userProfile_theme;
	this.titleItem = syra_dom.span("s-profile-theme-value", this.btn);
	syra_dom.addFontIcon("s-profile-theme-flag", syra_icon.font.right_arrow, this.btn);
	syra_dom.hide(this.btn, !this.page.dataset.themes || !this.page.dataset.themes.length);

	this.dispose = function() {
		this.onItemInOut(false); // clear timeout
		this.list && this.list.dispose();
		this._popup && this._popup.close();
		syra_item.unregister(this);
		syra_site.disposeObject(this);
	};
	this.setValue = function(value) {
		var text = value ? value.description : syra_local.userProfile_defaultTheme;
		this.titleItem.textContent = "(" + text + ")";
	};

	this.setValue(this.page.dataset.selectedTheme);
	this.onItemInOut = function(onEnter, event) {
		var self = this;
		if (onEnter) {
			if (!self._popup) {
				self.timeout = setTimeout(function() {
					self.showPopup(true);
				}, 200);
			}
		} else {
			if (self.timeout) {
				clearTimeout(self.timeout);
				self.timeout = null;
			}
		}
	};
	this.clickItem = function(event, target) {
		if (target.syraTheme !== undefined) { //click on item
			syra_form.updateDelta({
				page: this.page,
				articleParent: this.page,
				$item: {
					$bind: "selectedTheme"
				}
			}, target.syraTheme == 0 ? null : {
				$uuid: target.syraTheme
			});
			this._popup.close();
		}
	};
	this.showPopup = function(show) {
		var self = this;
		if (show) {
			if (!self._popup) {
				self.list = new List({
					css: "s-list-primary"
				});
				var dataset = self.page.dataset;
				var selected = (dataset.selectedTheme && dataset.selectedTheme.$uuid) || 0;
				var themes = [{
					$uuid: 0,
					description: syra_local.userProfile_defaultTheme
				}].concat(dataset.themes);
				for (var ii = 0, jj = themes.length; ii < jj; ii++) {
					var theme = themes[ii];
					var link = self.list.addAnchor();
					link.syraTheme = theme.$uuid;
					link.textContent = theme.description;
					link.syraItem = self.id;
					link.syraOnClick = "clickItem";
					if (theme.$uuid == selected) {
						var li = link.parentNode;
						li.parentNode.insertBefore(li, li.parentNode.firstChild);
						syra_dom.toggleClass(link, "s-selected", true);
						syra_dom.toggleClass(li, "s-selected", true);
					}
				}
				self._popup = syra_over.openPopup(syra_site, {
					slot: self.list.ul,
					picker: self.btn,
					autoCloseBoundary: self.btn,
					position: {
						my: "left top",
						at: "right top",
						of: self.btn
					},
					close: function() {
						self.list && self.list.dispose();
						self._popup = null;
					}
				});
			}
		} else {
			self._popup && self._popup.close();
		}
	};
	/*this.click = function(){
    
	 
    
	 this.onItemInOut(false); // clear timeout
    
	 
    
	 this.showPopup(!this._popup)
    
	 
    
	 };*/

}

exports.Theme = Theme;


exports.applyTheme = function(theme) {
	if (theme && theme.cssFiles) {
		var name = theme.cssFiles[0].path.toLowerCase();
		if (name.indexOf(".css") < 0) {
			name = "custom/" + name + ".css";
			if (_themeStyleSheet) {
				if (_themeStyleSheet.syraName == name) {
					return;
				}
				_unloadStyleSheet(_themeStyleSheet.syraName);
			}
			_themeStyleSheet = null;
			_themeStyleSheet = exports.loadStyleSheet(name);
		}
	} else {
		_themeStyleSheet && _unloadStyleSheet(_themeStyleSheet.syraName);
		_themeStyleSheet = null;
	}
};


function _unloadStyleSheet(name) {
	var link = _styleSheets[name];
	link && _getHeader().removeChild(link);
	delete _styleSheets[name];
}

function _getHeader() {
	if (!_header) {
		_header = document.getElementsByTagName("head")[0];
	}
	return _header;
};
exports.loadStyleSheet = function(name, isExtended) {
	if (!isExtended) {
		name = _styleSheetPath + name;
	}
	if (!_styleSheets[name]) {
		var link = _styleSheets[name] = document.createElement("link");
		link.syraName = name;
		link.setAttribute("rel", "stylesheet");
		link.setAttribute("type", "text/css");
		link.setAttribute("href", name);
		if (_themeStyleSheet) {
			_getHeader().insertBefore(link, _themeStyleSheet);
		} else {
			_getHeader().appendChild(link);
		}
		return link;
	}
};

exports.dispose = function() {
	_header = _themeStyleSheet = _styleSheets = null;
};