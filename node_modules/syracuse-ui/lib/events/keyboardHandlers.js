"use strict";
var shortcutInvoker = require('syracuse-ui/lib/events/shortCutInvoker');

var _keyCodeMap = {
	"8": "backspace",
	"9": "tab",
	"13": "enter",
	"16": "shift",
	"17": "ctrl",
	"27": "esc",
	"32": "space",
	"33": "pageup",
	"34": "pagedown",
	"36": "home",
	"37": "left",
	"38": "up",
	"39": "right",
	"40": "down",
	"45": "insert",
	"46": "delete",
	"58": ",",
	"65": "a",
	"66": "b",
	"67": "c",
	"68": "d",
	"69": "e",
	"70": "f",
	"71": "g",
	"72": "h",
	"73": "i",
	"74": "j",
	"75": "k",
	"76": "l",
	"77": "m",
	"78": "n",
	"79": "o",
	"80": "p",
	"81": "q",
	"82": "r",
	"83": "s",
	"84": "t",
	"85": "u",
	"86": "v",
	"87": "w",
	"88": "x",
	"89": "y",
	"90": "z",
	"107": "+",
	"109": "-",
	"111": "divide",
	"112": "f1",
	"115": "f4",
	"116": "f5",
	"117": "f6",
	"118": "f7",
	"120": "f9",
	"122": "f11",
	"123": "f12",
	"188": "?",
	"190": "."
};

var _shortcuts = {};

function _neutralizeWhileUILocker(evt) {
	if (evt.target.syrUILockerBlackHole) {
		evt.returnValue = false;
		evt.preventDefault();
		evt.stopPropagation();
	}
}

function _findItem(target) {
	var dialog = syra_diagnose.getOpenedBox() || syra_site.dialogManager.getTopDialogPage();
	var topPage = dialog && dialog._content;
	var item = syra_store.findItem(target);
	if (topPage && item && !item.disposed && (item.page != topPage)) {
		item = null;
	}
	if (!item || item.disposed) {
		item = topPage || syra_site.mainPage;
	}
	if (!item || item.disposed) {
		item = syra_site;
	}
	return item;
}

exports.keydown = function(event) {
	var item = _findItem(event.target);
	var isEsc;
	event = event || window.event;
	if (event.target.syraOnClick && event.target.nodeName == "A") {
		if (!(_shortcuts && _shortcuts.esc) && _keyCodeMap[event.keyCode] == "enter") {
			return;
		}
	}
	if (event.keyCode == 27) {
		_shortcuts = {
			esc: isEsc = true
		};
		event.preventDefault();
		event.stopPropagation();
	} else {
		if (_shortcuts.esc) {
			_shortcuts.isEnabled = true;
		}
	}
	var isShorcutApplyed = false;
	_shortcuts[event.syraKeyMap = _keyCodeMap[event.keyCode]] = true;
	var targetItem = item;
	item.page.setActivateList(item);
	while (item && !isShorcutApplyed) {
		isShorcutApplyed = shortcutInvoker.apply(item, _shortcuts, event);
		item = item.articleParent;
	}
	if (!isShorcutApplyed && targetItem.page && targetItem.page.isFusionPage) {
		if (!isEsc && shortcutInvoker.applyFusionFieldShortcut(targetItem, _shortcuts, event)) {
			return;
		}
	}

	if (isShorcutApplyed && targetItem && targetItem.page && targetItem.page.isFusionPage) {
		syra_site.fusionGateway.onKeyDow(event);
	}
	if (isShorcutApplyed && (_shortcuts.tab || _shortcuts.esc)) {
		event.returnValue = false;
		event.preventDefault();
		event.stopPropagation();
		return false;
	}
	_neutralizeWhileUILocker(event);

};
exports.keypress = function(event) {
	event = event || window.event;
	var charCode;
	if (event.which == null) {
		charCode = String.fromCharCode(event.keyCode); // old IE
	} else {
		if (event.which != 0 && event.charCode != 0) {
			charCode = String.fromCharCode(event.which);
		}
		if (_shortcuts.esc) {
			var funcKey = charCode || event.keyCode;
			if (funcKey && funcKey >= 112 && funcKey <= 123) {
				return false;
			}
		}
	}
	if (charCode !== undefined && !(_shortcuts && _shortcuts.esc)) {
		var item = _findItem(event.target);
		if (item.validateKeyPress && !item.validateKeyPress(charCode, event, _shortcuts)) {
			event.returnValue = false;
			event.preventDefault();
			event.stopPropagation();
			return false;
		}
	}
	_neutralizeWhileUILocker(event);
};

exports.keyup = function(event) {
	event = event || window.event;
	var item = _findItem(event.target);
	if (_shortcuts) {
		if (event.keyCode == 27) { //esc
			!_shortcuts.isEnabled && shortcutInvoker.applyEscape(item, _shortcuts, event);
			_shortcuts = {};
		} else {
			delete _shortcuts[event.syraKeyMap = _keyCodeMap[event.keyCode]];
			if (!_shortcuts.esc) {
				if (item.isField) {
					if (item.onKeyUp) {
						item.onKeyUp(event);
					} else {
						if (item.page.isFusionPage && item.onFieldInputEvent) {
							item.onFieldInputEvent(event);
							event.stopPropagation();
							return;
						}
					}
				}
			}
		}
	}
	_neutralizeWhileUILocker(event);
};