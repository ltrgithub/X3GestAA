"use strict";

exports.applyToRecord = function(record, shortcuts, event) {
	if (shortcuts.esc) {
		if (shortcuts.m || shortcuts.f4) {
			syra_menus.clickContextualMenu(record);
			return true;
		}
		if (shortcuts.insert || shortcuts.n) {
			syra_menus.clickCreate(record);
			return true;
		}
	}
	return false;
};

exports.applyToField = function(field, shortcuts, event) {
	if (field.variantItem) {
		return _applyToField(field.variantItem, shortcuts, event);
	}
	var constructorName = field.constructor.name;
	if (shortcuts.esc) {
		if (shortcuts.f1) {
			syra_site.helpCenter.openByShortCut(field.page, event.shiftKey ? null : field);
			return true;
		}
		if (shortcuts.m || shortcuts.f4) {
			syra_menus.clickContextualMenu(event.shiftKey ? field.articleParent : field);
			return true;
		}
		if (shortcuts.f6) {
			syra_site.siteFunctions.showFieldProperty(field);
			return true;
		}
		if (shortcuts.f9) {
			syra_menus.clickTunnel(field);
			return true;
		}
		if ((!shortcuts.h && shortcuts.l) || shortcuts.f12) {
			syra_menus.clickSelectPicker(field);
			return true;
		}
		if (shortcuts.tab) {
			if (field.arrayLevel === "cell") {
				field.page.externalAdapter.onFieldClickPicker({
					field: field,
					pickerType: "cancelEdit"
				});
			}
			return true;
		}
		if (shortcuts["delete"]) {
			syra_menus.clickMenu(field.articleParent, "$delete");
			return true;
		}
		if (shortcuts.insert) {
			var article = field.articleParent;
			while (!article.disposed && (article != article.page) && !article.menuItems.$create) {
				article = article.articleParent;
			}
			article && syra_menus.clickMenu(article, "$create");
			return true;
		}

		if (constructorName == "NumericField") {
			var numObj = field.formatApi.parse(field.input.value || "");
			field.input.value = field.formatApi.format(numObj, field.localFormat);
			event.preventDefault();
		}
	}
	if (shortcuts.enter || shortcuts.tab) {
		if (field.page.constructor.name == "TranslationPage") {
			field.page.appendNewRow(shortcuts.enter, shortcuts.tab, field);
		}
	}

	if (shortcuts["delete"] || shortcuts.insert || shortcuts.right || shortcuts.left) {
		return field.onFieldInputEvent(event, shortcuts);
	} else {
		if (shortcuts.down || shortcuts.up) {
			if (constructorName == "ChoiceField") {
				var builder = field.builder;
				clearTimeout(builder._autoCompleteTimer);
				if (!builder.field.$isReadOnly) {
					builder.toggleList(true);
					var current = builder._$selectedListIndex !== undefined ? builder._$selectedListIndex : -1;
					shortcuts.down ? current++ : current--;
					builder._$selectedListIndex = Math.min(Math.max(current, 0), builder._choices.length - 1);
					builder._selectChoice(builder._choices[builder._$selectedListIndex].$index);
					builder.field.input.value = builder.field.$enum[builder._choices[builder._$selectedListIndex].$index].$title;
					builder._selectItem(builder._choices[builder._$selectedListIndex].$index, true);
					return true;
				}
			}
			if (shortcuts.down) {
				var picker = field.mnPickers && (field.mnPickers.date || field.mnPickers.time);
				if (picker) {
					picker.click();
					return true;
				}
			}
			if (!field.articleParent.popupCard) {
				return field.onFieldInputEvent(event, shortcuts);
			}
		} else {
			if (shortcuts.tab && field.$item.$contentEditable) {
				field.onInputChange(field.input, event);
			} else {
				if (shortcuts.enter) {
					if (constructorName == "ChoiceField") {
						var builder = field.builder;
						clearTimeout(builder._autoCompleteTimer);
						if (!shortcuts.esc) {
							if (builder.field.$field.$isAutoComplete === false) {
								var choices = builder._choices;
								if (choices && choices.length && builder._$selectedListIndex !== undefined && builder._$selectedListIndex >= 0 && builder._popup && builder._popup.isOpened) {
									builder.onChoiceItemClick(choices[builder._$selectedListIndex]);
									return true;
								}
							} else {
								return builder.validateKeyPress(undefined, shortcuts.enter);
							}
						}
					}
					// is ie7 or ie9 or ie10
					if (field.input && field.getDataValue() !== field.currentValue) {
						var bInfo = syra_site.browser.getIdentity().info;
						if ((bInfo[0].toLowerCase() == "msie") && ((bInfo[1].indexOf("7.0") != -1) || (bInfo[1].indexOf("9.0") != -1) || (bInfo[1].indexOf("10.0") != -1))) {
							field.onInputChange(field.input, event);
						}
					}
				}
			}
		}
	}
	return false;
};


exports.applyToMessageBox = function(page, shortcuts, event) {
	if (shortcuts.enter) {
		page.onMenuClick({
			$bind: page._focusBtnId
		});
		return true;
	}
	if (shortcuts.esc) {
		page.close("esc");
		return true;
	}
	if (shortcuts.tab) {
		if (page.$itemButtons.length > 1) {
			var ii, len;
			for (ii = 0, len = page.$itemButtons.length; ii < len; ii++) {
				if (page.$itemButtons[ii].$bind == page._focusBtnId) {
					break;
				}
			}
			if (ii < len) {
				ii = event.shiftKey ? (ii == 0 ? len - 1 : ii - 1) : (ii + 1 == len ? 0 : ii + 1);
				syra_site.dom.toggleClass(page.getMenuItem(page._focusBtnId).domItem, "s-msgbox-button-default", false);
				page._focusBtnId = page.$itemButtons[ii].$bind;
				syra_site.dom.toggleClass(page.getMenuItem(page._focusBtnId).domItem, "s-msgbox-button-default", true);
				setTimeout(function() {
					page.getMenuItem(page._focusBtnId).domItem.focus();
				}, 5);
			}
		}
		return true;
	}
	if (shortcuts.a && shortcuts.ctrl) {
		page.selectText();
		return true;
	}
	return false;
};

exports.applyToList = function(list, shortcuts, event, focusField) {
	if (shortcuts.esc) {
		if (shortcuts.f6) {
			syra_site.siteFunctions.showFieldProperty(field);
			return true;
		}
		if (shortcuts.a) {
			list.selectHTMLContent && list.selectHTMLContent();
			return true;
		}
		if (shortcuts.insert || shortcuts.n) {
			syra_menus.clickCreate(list);
			return true;
		}
		if (shortcuts.r) {
			list.columnFitter && list.columnFitter.reCalculate();
			return true;
		}
	}
	if (shortcuts.pagedown || shortcuts.pageup) {
		if (list.$item.$isNavigationList) {
			if (list.deferSelect) {
				clearTimeout(list.deferSelect);
				list.deferSelect = null;
			}
			if (record = list.getFocusedRecord(true)) {
				record.toggleFocus(false);
				recordIndex = record.getRecordIndex();
				if (list.treeDecorator) {
					recordIndex = list.treeDecorator.getPreviousNextServerIndexVisible(recordIndex, shortcuts.down);
				} else {
					if (shortcuts.down) {
						recordIndex = (recordIndex < list.clientDataset.length - 1) ? recordIndex + 1 : recordIndex;
					} else {
						recordIndex = recordIndex > 0 ? recordIndex - 1 : recordIndex;
					}
				}
			}
			if ((newSelect = list.findRecordByServerIndex(list.getClientDataSetServerIndex(recordIndex)))) {
				newSelect.toggleFocus(true);
				list.scroller.scrollToItem(newSelect.dataRow);
				if (newSelect.$facet && newSelect.$facet != "$lookup" && !list.treeDecorator) {
					list.deferSelect = setTimeout(function() {
						newSelect.domItem.click();
					}, 500);
				}
				event.preventDefault();
				return true;
			}
		}
		if (list.treeDecorator) {
			list.treeDecorator.expendCollapseAll(shortcuts.pagedown);
			return true;
		} else
		if (list.pagging && list.pagging.onShortKeyEvent) {
			list.pagging.onShortKeyEvent(shortcuts.pagedown, event.shiftKey);
			event.preventDefault();
			return true;
		}
	} else
	if (shortcuts.left || shortcuts.right) {
		if (list.treeDecorator) {
			var record = list.getFocusedRecord(!list.$item.$isNavigationList);
			if (record) {
				list.treeDecorator.expendCollapseNode(record.$uuid, shortcuts.right);
				return true;
			}
		}
		return false;
	} else {
		if (shortcuts.up || shortcuts.down) {
			if (list.treeDecorator) {
				var record, recordIndex, serverIndex, newSelect;
				if (record = list.getFocusedRecord(true)) {
					record.toggleFocus(false);
					recordIndex = record.getRecordIndex();
					recordIndex = list.treeDecorator.getPreviousNextServerIndexVisible(recordIndex, shortcuts.down);
				} else {
					recordIndex = 0;
				}
				serverIndex = list.getClientDataSetServerIndex(recordIndex);
				newSelect = list.findRecordByServerIndex(serverIndex);
				if (newSelect) {
					newSelect.toggleFocus(true);
				}
				return true;
			}
		} else {
			if (shortcuts.enter) {
				if (focusField) {
					if (focusField.$item.$bind === "$search") {
						list.searchCapability.onClick(list, "$searchNext", event);
						return true;
					}
				} else {
					if (list.$item.$isNavigationList) {
						record = list.getFocusedRecord(false);
						if (!record && list.selector && list.selector.uuid !== undefined) {
							record = list.selector.records[list.selector.uuid];
						}
						if (record && record.domItem) {
							record.domItem.click();
							event.preventDefault();
							return true;
						}
					}
				}
			}
		}
	}
	return false;
};

exports.applyToPage = function(page, shortcuts, event, focusField) {
	if (!focusField) {
		focusField = (page.focusField && !page.focusField.disposed) ? page.focusField : null;
	}
	if (shortcuts.esc) {
		if (shortcuts.f1) {
			syra_site.helpCenter.openByShortCut(page);
			return true;
		}
		if (shortcuts.f5) {
			syra_site.siteFunctions.refreshPageData(page);
			return true;
		}
		if (shortcuts.g) {
			shortcuts.h && syra_menus.gotoHome();
			return true;
		}
		if (shortcuts.f11 || shortcuts.h) {
			var switchLeft = shortcuts.f11 || (shortcuts.h && (shortcuts.a || shortcuts.l));
			var switchRight = shortcuts.f11 || (shortcuts.h && (shortcuts.a || shortcuts.r));
			if (switchLeft || switchRight) {
				syra_site.siteFunctions.togglePageSideBar(page, switchLeft, switchRight);
			}
			return true;
		}
		if (shortcuts.f6) {
			syra_site.siteFunctions.showFieldProperty(page);
			return true;
		}
		if (shortcuts.f7 || (shortcuts[":"] && event.shiftKey) || shortcuts.s || shortcuts.divide) {
			//gotofunction
			syra_menus.clickMenu(page, "1186");
			return true;
		}
		if (shortcuts.enter) {
			page.clickMainMenu();
			return true;
		}
		if (shortcuts.left || shortcuts.right) {
			page.openNextTab(shortcuts.right);
			return true;
		}

		if (shortcuts["delete"]) {
			syra_menus.clickMenu(page, "$delete");
			return true;
		}
		if (shortcuts.insert || shortcuts.n) {
			syra_menus.clickCreate(page);
			return true;
		}
		if (shortcuts.r) {
			var lists = page.getLists();
			if (lists) {
				for (var ii = 0, jj = lists.length; ii < jj; ii++) {
					var list = lists[ii];
					lists[ii].columnFitter && lists[ii].columnFitter.reCalculate();
				}
			}
			return true;
		}
		if (shortcuts.p) {
			syra_menus.clickMenu(page, "$print");
			return true;
		}
		if (shortcuts.k) {
			syra_menus.gotoNext(page, event.shiftKey);
			return true;
		}
		if (shortcuts.j) {
			syra_menus.gotoPrev(page, event.shiftKey);
			return true;
		}
		if ((shortcuts[":"] && event.shiftKey) || shortcuts.s || shortcuts.divide) {
			if (syra_site.searcher) {
				var $searchFields = syra_site.searcher.boundFields.$search;
				if ($searchFields && $searchFields.length) {
					$searchFields[0].focus();
				}
				return true;
			}

		}
	} else {
		if (shortcuts.enter || shortcuts.up || shortcuts.down) {
			if (!(focusField && focusField.$item && focusField.$item.$isFilterMode && shortcuts.enter)) {
				var list = page.getLastFocusGrid(focusField);
				if (list) {
					if (focusField && focusField.$item && focusField.$item.$isFilterMode) {
						list.domItem.focus();
						return true;
					} else
					if (focusField) {
						if (shortcuts.enter) {
							page.externalAdapter.onFieldEvent({
								field: focusField,
								event: event,
								doEvent: function() {
									var fnct = "onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1);
									focusField[fnct] && focusField[fnct](event.target, event);
								}
							});

						}
						return true;
					}
				}
			}
			return false;
		}
	}
	return false;
};