"use strict";

function _walkTabs(tab, shortcuts, focusedTab) {
	if (focusedTab && focusedTab.layoutParent == tab.layoutParent) {
		tab = focusedTab;
	}
	var items = tab.layoutParent.items;
	var max = items.length - 1;
	var ii = items.indexOf(tab);
	while (true) {
		if (shortcuts.right) {
			if (ii == max) {
				ii = 0;
			} else {
				ii++;
			}
		} else {
			if (ii == 0) {
				ii = max;
			} else {
				ii--;
			}
		}
		if (!items[ii].isInvisible) {
			tab.page.focusedTab = items[ii];
			items[ii].tabTitle.click();
			return;
		}
	}
}

function _walkPageTabs(item, shortcuts, event) {
	var section;
	var page = item.page;
	if (page == syra_site.landingPageMaster) {
		page = page.getSelectedChildPage() || page;
	}
	if (event.shiftKey || (page == item)) { //ESC + SHIFT + LEFT-RIGHT, or page level 
		for (var ii = 0, jj = page.childrenSection.length - 1; ii < jj; ii++) {
			section = page.childrenSection[ii];
			if (section.isTabLayout) {
				_walkTabs(section, shortcuts, page.focusedTab);
				return;
			}
		}
	}
	//tab not found at top level, walk from item level
	section = item.boxParent;
	while (section) {
		if (section.isTabLayout) {
			_walkTabs(section, shortcuts, page.focusedTab);
			return;
		}
		section = section.boxParent;
	}
	if (page.focusedTab) {
		_walkTabs(page.focusedTab, shortcuts);
	} else {
		(page != item) && _walkPageTabs(page, shortcuts, event); //test to avoid loop on page
	}
}

function _resizeGridColumns(item) {
	var hasFit;
	var lists = (item.page == item) ? syra_store.getLists(item) : [];
	item.isList && lists.push(item);
	if (lists.length) {
		for (var ii = 0, jj = lists.length; ii < jj; ii++) {
			var builder = lists[ii] && lists[ii].builder;
			if (builder && builder.toggleColWidthToContent) {
				hasFit = true;
				builder.toggleColWidthToContent();
			}
		}
	}
	return hasFit;
}

function _selectListHTMLContent(list) {
	var range = document.createRange();
	var scrollHeadTable = list.builder.scrollTable && list.builder.scrollTable.headTable;
	scrollHeadTable && range.selectNode(scrollHeadTable);
	list.body && range.selectNode(list.body);
	var select = document.getSelection();
	select.removeAllRanges();
	select.addRange(range);
}

function _togglePageSideBar(page, switchLeft, switchRight) {
	if (switchLeft) {
		page.fusionBar && page.fusionBar.collapse();
		syra_site.landingPageMaster && syra_site.landingPageMaster.bar && syra_site.landingPageMaster.bar.collapse();
		if (page.menuBar && page.menuBar.options.resizeDirection == "left") {
			page.menuBar.collapse();
		}
	}
	if (switchRight) {
		if (page.menuBar && page.menuBar.options.resizeDirection !== "left") {
			page.menuBar.collapse();
		}
	}
}

function _resetUserPreferences(page) {
	if (page == syra_site.landingPageMaster) {
		page = page.getSelectedChildPage() || page;
	}
	if (page) {
		syra_diagnose.showBox({
			$title: syra_local.aw_deleteMessageTitle,
			$message: syra_local.aw_deletePreferences,
			$type: "question",
			$buttons: "yesno",
			callback: function(response) {
				if (response && response.$clientId == "yes") {
					page.userPreferences && page.userPreferences.reset();
					if (page.isLandingPage) {
						var $binds = Object.keys(page.boundFields);
						for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
							var vignette = page.boundFields[$binds[ii]];
							vignette = vignette && vignette[0] && vignette[0].vignette;
							vignette && vignette.userPreferences && vignette.userPreferences.reset();
						}
					}
					page.menuBar && page.menuBar.clearPreferences();
					page.fusionBar && page.fusionBar.clearPreferences();
					var lists = syra_store.getLists(page);
					for (var ii = 0, jj = lists.length; ii < jj; ii++) {
						lists[ii].clearPreferences && lists[ii].clearPreferences();
					}
					page.resizeArticle(true);
				}
			}
		});
	}
}

exports.applyEscape = function(item, shortcuts, event) {
	var isApplyed;
	if (item.applyEscape && item.applyEscape(shortcuts, event)) { //close choice, date, time selectors
		return true;
	}
	if (item.isField) {
		if (item.popupPicker) {
			item.popupPicker.close();
			isApplyed = true;
		} else {
			if (item.page.externalAdapter && item.page.externalAdapter.applyEscape) {
				isApplyed = item.page.externalAdapter.applyEscape(item);
			}
		}
	}!isApplyed && item.page.dialogWrapper && item.page.dialogWrapper.close();
};

exports.apply = function(item, shortcuts, event) {
	if (item.variantItem) {
		return exports.apply(item.variantItem, shortcuts, event);
	}
	var isPage = item.page == item;
	if (shortcuts.esc) {
		if (shortcuts.f1) {
			//open help on item, SHIFT open help on page
			syra_site.helpCenter.openByShortCut(item.page, (event.shiftKey || isPage) ? null : item);
			return true;
		}
		if (shortcuts.f5) {
			//refresh page data with autofetch mode
			if (isPage) {
				syra_menus.click.refreshPageData(item, event);
				return true;
			}
		}
		if (shortcuts.f6) {
			//showProperty of field. Currently for fusion. Syracuse to do
			syra_menus.click.showFieldProperty(item);
			return true;
		}
		if (shortcuts.f9) {
			//open fusion tunnel
			return item.isField && syra_menus.click.tunnel(item);
		}
		if (shortcuts.f11 || (shortcuts.h && !shortcuts.g)) {
			//switch left /right side bar
			var switchLeft = shortcuts.f11 || (shortcuts.h && (shortcuts.a || shortcuts.l));
			var switchRight = shortcuts.f11 || (shortcuts.h && (shortcuts.a || shortcuts.r));
			if (switchLeft || switchRight) {
				_togglePageSideBar(item.page, switchLeft, switchRight);
			}
			return true;
		}
		if (shortcuts.m || shortcuts.f4) {
			//open contextual menu
			return syra_menus.click.contextualMenu(event.shiftKey ? item.articleParent : item);
		}
		if (shortcuts.insert || (shortcuts.n && !shortcuts.g)) {
			//trigger create action
			var page = item;
			if (page == syra_site.landingPageMaster) {
				page = page.getSelectedChildPage() || page;
			}
			if (page.isLandingPage) {
				if (event.shiftKey) {
					page.addVignetteBtn.click();
				} else {
					page.addTabBtn.click();
				}
				return true;
			}
			return syra_menus.click.create(item);
		}
		if (shortcuts["delete"]) {
			return syra_menus.click.deleteItem(item);
		}
		if (shortcuts.enter) {
			//trigger main action of page
			isPage && syra_menus.click.main(item);
			return true;
		}
		if (shortcuts.a) {
			if (isPage && event.ctrlKey) {
				item.selectText && item.selectText();
				return true;
			}
			if (item.isList && item.selectHTMLContent) {
				_selectListHTMLContent(item);
				return true;
			}
		}
		if (isPage) {
			if (shortcuts.p) {
				syra_menus.click.print(item);
				return true;
			}
			if (shortcuts.j) {
				shortcuts.j && syra_menus.click.prev(item, event.shiftKey);
				return true;
			}
			if (shortcuts.k) {
				syra_menus.click.next(item, event.shiftKey);
				return true;
			}
		}
		if (shortcuts.w) {
			shortcuts.z && _resetUserPreferences(item.page);
			return true;
		}
		if (shortcuts.g) {
			if (shortcuts.h) {
				if (syra_site.fusionGateway && syra_site.fusionGateway.activatedBook) {
					syra_site.fusionHeaderHomeLink.click();
				} else {
					syra_site.homeLink.click();
				}
			}
			if (shortcuts.n) {
				syra_menus.click.navigation();
			}
			return true;
		}
		if (item.isField && ((!shortcuts.h && shortcuts.l) || shortcuts.f12)) {
			syra_menus.click.selector(item);
			return true;
		}
		if (shortcuts.r) {
			return _resizeGridColumns(item);
		}

		if (item.isField && shortcuts.t) { //date=Today
			if (item.applyShortCut && item.applyShortCut(shortcuts, event)) {
				return true;
			}
		}
		if (shortcuts.f7 || shortcuts["?"] || shortcuts.s || shortcuts["."]) {
			syra_site.searcher && syra_site.searcher.gotoField(item.page);
			return true;
		}
		if (shortcuts.left || shortcuts.right) {
			_walkPageTabs(item, shortcuts, event);
			return true;
		}
		if (shortcuts.tab || shortcuts.i || shortcuts.d) {
			if (item.page.externalAdapter && item.page.externalAdapter.applyShortCut) {
				if (item.page.externalAdapter.applyShortCut(item, shortcuts)) {
					return true;
				};
			}
		}

	} else {
		if (shortcuts.enter) {
			if (isPage && item.isMessageBox) {
				item.onMenuClick({
					$bind: item.focusBtnId
				});
				event.returnValue = false;
				event.preventDefault();
				event.stopPropagation();
				return true;
			}
		}
		if (shortcuts.tab) {
			if (isPage && item.isMessageBox) {
				if (item.$itemButtons.length > 1) {
					var ii, len;
					for (ii = 0, len = item.$itemButtons.length; ii < len; ii++) {
						if (item.$itemButtons[ii].$bind == item.focusBtnId) {
							break;
						}
					}
					if (ii < len) {
						ii = event.shiftKey ? (ii == 0 ? len - 1 : ii - 1) : (ii + 1 == len ? 0 : ii + 1);
						syra_site.dom.toggleClass(item.getMenuItem(item.focusBtnId).domItem, "s-msgbox-button-default", false);
						item.focusBtnId = item.$itemButtons[ii].$bind;
						syra_site.dom.toggleClass(item.getMenuItem(item.focusBtnId).domItem, "s-msgbox-button-default", true);
						setTimeout(function() {
							item.getMenuItem(item.focusBtnId).domItem.focus();
						}, 5);
					}
				}
				event.returnValue = false;
				event.preventDefault();
				event.stopPropagation();
				return true;
			}
			if (item.isField && item.$item.$contentEditable) {
				item.onInputChange(item.input, event);
				return true;
			}
		}
		if (item.page && item.page.externalAdapter && item.page.externalAdapter.applyShortCut) {
			if (item.page.externalAdapter.applyShortCut(item, shortcuts, event)) {
				return true;
			};
		}
		if (item.isField || item.isList) {
			if (item.applyShortCut) {
				if (item.applyShortCut(shortcuts, event))
					return true;
			}
			if (shortcuts.enter) {
				if (item.$item.$contentEditable) {
					item.onInputChange(item.input, event);
					event.preventDefault();
					event.stopPropagation();
					return true;
				}
				if (item.$item.$bind === "$search" && item.articleParent.isList) {
					var list = item.articleParent;
					if (list.isList && list.searchCapability) {
						list.searchCapability.onClick(item.articleParent, "$searchNext", event);
					}
					return true;
				}
				if (item.page.isTranslationPage && item.page.appendNewRow) {
					item.page.appendNewRow(shortcuts.enter, shortcuts.tab, item);
				}
				// is ie10 the event on change is not sended on enter key when value change.
				var identity = syra_site.getBrowserIdentity();
				if (identity.isMSIE && item.input && identity.info.indexOf("10.0") != -1) {
					item.onInputChange(item.input, event);
				}
				if (!item.page.isFusionPage && item.$item.$isFilterMode) {
					item.input && item.onInputChange && item.onInputChange(item.input);
					return true;
				}
			}

		}
		if (item.isRecordArticle && !item.isFilterArticle) {
			if (shortcuts.insert) {
				return syra_menus.click.create(item);
			}
			if (shortcuts["delete"] && (shortcuts.shift || item.page.isFusionPage)) {
				//trigger delete action
				return syra_menus.click.deleteItem(item);
			}
		}

		if (shortcuts.space) {
			if (item.page.isNavigationPage && item.isMenuItem) {
				var record = item.articleParent;
				if (record && record.list && record.list.builder) {
					record.list.builder.clickBookmark(record);
				}
				event.preventDefault();
				event.stopPropagation();
				return true;
			}
		}
		if (isPage && item.shortcutSpyerList) {
			return item.shortcutSpyerList.applyShortCut(shortcuts, event);
		}
	}
};