"use strict";
var keyCodeMap = require('syracuse-ui/lib/events/keyboardHandlers').keyCodeMap;

var _menuStack = [];

exports.tip = {
	newTab: "ESC N",
	firstRecord: "ESC SHIFT J",
	prevRecord: "ESC J",
	nextRecord: "ESC K",
	lastRecor: "ESC SHIFT K",
	openNavigationPage: "ESC G N",
	openPicker: "ALT DOWN",
	goToDefaultHome: "ESG G H",
	goToNavigationPage: "ESG G N",
	resetUserPreferences: "ESC W then Z",
	help: "ESC F1",
	mainHelp: "ESC SHIFT F1",
	fullScreen: "ESC F11",
	hideLeftBar: "ESC H L",
	hideRightBar: "ESC H R",
	refresh: "ESC F5",
	nextTab: "ESC RIGHT",
	prevTab: "ESC LEFT",
	close: "ESC",
	escape: 'ESC',
	contextMenu: "ESC M, ESC F4",
	searchBox: "ESC F7, ESC S",
	tunnel: "ESC F9",
	openDatePick: "ALT DOWN",
	openTunnel: "ESC F9",
	openLookup: "ESC L, ESC F12",
	defaultAction: "ESC ENTER, ESC SPACE",
	openPickerDate: "ALT DOWN",
	moveNextTimeColumn: "ESC LEFT",
	moveToday: "ESC T",
	moveNextWeek: "DOWN",
	movePrevWeek: "UP",
	movePrevDay: "LEFT",
	moveNextDay: "RIGHT",
	movePrevMonth: "SHIFT UP",
	moveNextMonth: "SHIFT DOWN",
	movePrevYear: "CRTL UP, CTRL LEFT",
	moveNextYear: "CRTL DOWN, CRTL RIGHT",
	movePrevTimeColumn: "RIGHT",
	movePrevTime: "UP",
	hideFull: "ESC F11",
	moveNextTime: "DOWN",
	applyCalendar: "ENTER",
	today: "ESC T",
	create: "ESC SHIFT N",
	dropDownList: "SHIFT DOWN"
};

function _clearMenuStack(item) {
	item = item.page;
	if (item._lastItem) {
		_walkMenuItem(item._lastItem, false);
	}
	_menuStack = [];
	item._lastItem = "";
}

function _listChilds(menus) {
	var menuItem;

	if (menus && !menus.isMenuGroupRoot) {
		_menuStack.push(menus);
	}

	if (menus.boxChildItems) {
		for (var mm = 0, kk = menus.boxChildItems.length; mm < kk; mm++) {
			menuItem = menus.boxChildItems[mm];
			if (!menuItem.$isDisabled && !menuItem.$isHidden && (menus.$opened || menus.isMenuItem)) {
				_listChilds(menuItem);
			}
		}
	}
}

function _walkMenuItem(menuItem, show) {
	if (show) {
		var anchor = menuItem && menuItem.domTitle || menuItem && menuItem.domItem;
		anchor && anchor.focus();
	}
}

function _walkLeftList(item, shortcuts, event) {
	item = item.page;
	var title = item.fusionBar && item.fusionBar.openedBlock && item.fusionBar.openedBlock.title;
	if (title) {
		title.focus();
		title.click();
	}
}

function _walkLeftListSections(item, shortcuts, event) {
	var blocks = item.page.fusionBar.blocks;
	for (var ii = 0, jj = blocks.length; ii < jj; ii++) {
		if (item == blocks[ii].leftList) {
			if (ii < jj - 1) {
				ii++;
			} else {
				ii = 0;
			}
			var block = item.page.fusionBar.blocks[ii].title;
			block && block.click();
			return;
		}
	}
}

function _walkSections(item, shortcuts, event) {
	item = item.page;

	if (shortcuts.right) {
		_walkActionPanel(item, shortcuts, event);
	}
	if (shortcuts.left) {
		if (item.isFusionPage && item.fusionBar && !item.fusionBar.$isCollapsed) {
			_walkLeftList(item, shortcuts, event);
		} else {
			_walkActionPanel(item, shortcuts, event);
		}
	}
}

function _walkActionPanel(item, shortcuts, event) {
	_menuStack = [];
	item = item.page;

	if (item.menuBarLayout && item.menuBarLayout.items) {
		for (var ii = 0, jj = item.menuBarLayout.items.length; ii < jj; ii++) {
			var menus = item.menuBarLayout.items[ii];
			if (menus.boxChildItems && (menus.$opened || menus.isMenuItem)) {
				_listChilds(menus);
			}
		}
	}

	_walkMenuItem(_menuStack[0], true);
}

function _walkTabs(tab, shortcuts, focusedTab) {
	if (focusedTab && focusedTab.layoutParent == tab.layoutParent) {
		tab = focusedTab;
	}
	var items = tab.layoutParent.items;
	var max = items.length - 1;
	var ii = items.indexOf(tab);
	while (true) {
		if (shortcuts.right) {
			if (ii == max) {
				ii = 0;
			} else {
				ii++;
			}
		} else {
			if (ii == 0) {
				ii = max;
			} else {
				ii--;
			}
		}
		if (!items[ii].isInvisible) {
			tab.page.focusedTab = items[ii];
			items[ii].domTitle.click();
			return;
		}
	}
}

function _walkPageTabs(item, shortcuts, event) {
	var section;
	var page = item.page;
	for (var ii = 0, jj = page.childrenSection.length - 1; ii < jj; ii++) {
		section = page.childrenSection[ii];
		if (section.isTabLayout) {
			_walkTabs(section, shortcuts, page.focusedTab);
			return;
		}
	}
	//tab not found at top level, walk from item level
	section = item.boxParent;
	while (section) {
		if (section.isTabLayout) {
			_walkTabs(section, shortcuts, page.focusedTab);
			return;
		}
		section = section.boxParent;
	}
	if (page.focusedTab) {
		_walkTabs(page.focusedTab, shortcuts);
	} else {
		(page != item) && _walkPageTabs(page, shortcuts, event); //test to avoid loop on page
	}
}

function _resizeGridColumns(item) {
	var hasFit;
	var lists = (item.page == item) ? syra_item.getLists(item) : [];
	item.isArrayField && lists.push(item);
	if (lists.length) {
		for (var ii = 0, jj = lists.length; ii < jj; ii++) {
			var builder = lists[ii] && lists[ii].builder;
			if (builder && builder.toggleColWidthToContent) {
				hasFit = true;
				builder.toggleColWidthToContent();
			}
		}
	}
	return hasFit;
}

function _selectListHTMLContent(list) {
	var range = document.createRange();
	var scrollHeadTable = list.builder.scrollTable && list.builder.scrollTable.headTable;
	scrollHeadTable && range.selectNode(scrollHeadTable);
	list.body && range.selectNode(list.body);
	var select = document.getSelection();
	select.removeAllRanges();
	select.addRange(range);
}

function _togglePageSideBar(page, switchLeft, switchRight) {
	for (var ii = 0, jj = page.bars.length; ii < jj; ii++) {
		var bar = page.bars[ii];
		if ((switchLeft && bar.options.resizeDirection == "left") ||
			(switchRight && bar.options.resizeDirection != "left")) {
			bar.collapse();
		}
	}
}


var _dynRegisteredSC = [];

function _invokeShortCut(shortcutCbck) {
	var ret;
	if (shortcutCbck.bind) {
		ret = shortcutCbck.callback.call(shortcutCbck.bind, event, shortcutCbck.data);
	} else {
		ret = shortcutCbck.callback(event, shortcutCbck.data);
	}
	return ret === false || ret === null ? false : true;
}

function _isRegisteredShortCut(shortcutFired, item) {
	var i, j, leni, lenj, sc, gotIt = false;
	var scKeys = Object.keys(shortcutFired),
		exludedSCProps = {
			"isEnabled": true
		};
	var tot1 = 0,
		tot2, tot3;
	// Check the incoming shortcut object
	for (i = 0, leni = scKeys.length; i < leni; i++) {
		if (!exludedSCProps[scKeys[i]] && shortcutFired[scKeys[i]]) {
			tot1++;
		}
	}
	// Is the incoming shortcut has been registered for the target item?
	for (i = 0, leni = _dynRegisteredSC.length; i < leni; i++) {
		if ((sc = _dynRegisteredSC[i].scDef) && sc.item === item) {
			scKeys = Object.keys(sc);
			tot2 = scKeys.length;
			if (sc.hasOwnProperty("item")) {
				tot2--;
			}
			tot3 = 0;
			for (j = 0, lenj = scKeys.length; j < lenj; j++) {
				if (scKeys[j] != "item") {
					if (!shortcutFired[scKeys[j]]) {
						break;
					} else
						tot3++;
				}
			}
			if (tot1 == tot2 && tot1 == tot3) {
				gotIt = true;
				break;
			}
		}
	}
	return gotIt ? _dynRegisteredSC[i] : null;
}

exports.register = function(item, scDef, id, callback, callbackBind, callbackData) {
	scDef = syra_site.clone(scDef); //Quick correction to avoid blocking
	if (!scDef.item) {
		scDef.item = item;
	} else
	if (scDef.item === "page") {
		scDef.item = item.page;
	}
	_dynRegisteredSC.push({
		"scDef": scDef,
		"cbck": {
			"callback": callback,
			"bind": callbackBind,
			"data": callbackData
		},
		"key": id
	});
};
exports.unregister = function(item, id) {
	var i, len, sc;
	for (i = 0, len = _dynRegisteredSC.length; i < len; i++) {
		sc = _dynRegisteredSC[i];
		if (sc.key === id && sc.scDef && sc.scDef.item === item) {
			sc.cbck = null;
			sc.scDef.item = null;
			sc.scDef = null;
			_dynRegisteredSC.splice(i, 1);
			break;
		}
	}
};

exports.applyEscape = function(item, shortcuts, event) {
	var isApplyed;
	if (item.applyEscape && item.applyEscape(shortcuts, event)) { //close choice, date, time selectors
		return true;
	}
	if (item.isField) {
		if (item.popupPicker) {
			item.popupPicker.close();
			isApplyed = true;
		} else {
			if (item.page.externalAdapter && item.page.externalAdapter.applyEscape) {
				isApplyed = item.page.externalAdapter.applyEscape(item);
			}
		}
	}!isApplyed && item.page.overPanel && item.page.overPanel.close();
};

exports.apply = function(item, shortcuts, event) {
	if (item.variantItem) {
		return exports.apply(item.variantItem, shortcuts, event);
	}
	var isPage = item.page == item,
		dynSC;
	if (shortcuts.esc) {
		if (isPage) {
			// Just check if it's a dynamic registered shortcut (only for page today...)
			if ((dynSC = _isRegisteredShortCut(shortcuts, item)) && _invokeShortCut(dynSC.cbck)) {
				return true;
			}
			if (item.applyShortCut && item.applyShortCut(shortcuts, event)) {
				return true;
			}
			if (shortcuts.f5) {
				//refresh page data with autofetch mode
				syra_menus.click.refreshPageData(item, event);
				return true;
			}
		}
		if (shortcuts.f1) {
			//open help on item, SHIFT open help on page
			syra_help.openByShortCut(item.page, (event.shiftKey || isPage) ? null : item);
			return true;
		}
		if (shortcuts.f6) {
			//showProperty of field. Currently for fusion. Syracuse to do
			syra_menus.click.showFieldProperty(item);
			return true;
		}
		if (shortcuts.f9) {
			//open fusion tunnel
			return item.isField && syra_menus.click.tunnel(item);
		}
		if (shortcuts.f11 || (shortcuts.h && !shortcuts.g)) {
			//switch left /right side bar
			var switchLeft = shortcuts.f11 || (shortcuts.h && (shortcuts.a || shortcuts.l));
			var switchRight = shortcuts.f11 || (shortcuts.h && (shortcuts.a || shortcuts.r));
			if (switchLeft || switchRight) {
				_togglePageSideBar(item.page, switchLeft, switchRight);
			}
			return true;
		}
		if (shortcuts.q) {
			// put cursor into first editable field of filter row
			var list;
			if (isPage && (!item.isFusionPage || item.$facet === "$lookup")) {
				list = syra_item.findList(item.page);

			} else {
				list = item;
			}
			list && list.filter_row && list.filter_row.focus();
			return true;
		}
		if (shortcuts.m || shortcuts.f4) {
			//open contextual menu
			return syra_menus.click.contextualMenu(event.shiftKey ? item.articleParent : item);
		}
		if (shortcuts.insert || (shortcuts.n && !shortcuts.g)) {
			return syra_menus.click.create(item);
		}
		if (shortcuts["delete"]) {
			return syra_menus.click.deleteItem(item);
		}
		if (shortcuts.enter || shortcuts.space) {
			//trigger main action of page
			var main = isPage && item.getMainAction();
			main &&
				syra_menus.click.fire({
					menu: main,
					event: event
				});
			return true;
		}
		if (shortcuts.a) {
			if (isPage && event.ctrlKey) {
				item.selectText && item.selectText();
				return true;
			}
			if (item.isArrayField && item.selectHTMLContent) {
				_selectListHTMLContent(item);
				return true;
			}
		}
		if (isPage) {
			if (shortcuts.j) {
				shortcuts.j && syra_menus.click.prev(item, event.shiftKey);
				return true;
			}
			if (shortcuts.k) {
				syra_menus.click.next(item, event.shiftKey);
				return true;
			}
		}
		if (shortcuts.w) {
			shortcuts.z && syra_preference.page.reset(item.page);
			return true;
		}
		if (shortcuts.g) {
			shortcuts.h && syra_site.btns.home.click();
			shortcuts.n && syra_menus.click.site_sitemap();
			return true;
		}
		if (item.isField && ((!shortcuts.h && !event.ctrlKey && !event.altKey && shortcuts.l) || shortcuts.f12)) {
			syra_menus.click.selector(item);
			return true;
		}
		if (shortcuts.r) {
			return _resizeGridColumns(item);
		}

		if (item.isField && shortcuts.t) { //date=Today
			if (item.applyShortCut && item.applyShortCut(shortcuts, event)) {
				return true;
			}
		}

		if (shortcuts.f7 || shortcuts.s) {
			syra_site.searcher && syra_site.searcher.gotoField(item.page);
			return true;
		}
		if ((shortcuts.shift && shortcuts.left) || (shortcuts.shift && shortcuts.right)) {
			_walkSections(item, shortcuts, event);
			return true;
		}
		if (shortcuts.shift && shortcuts.down) {
			if (item.page.fusionBar && item.page.fusionBar.blocks) {
				return _walkLeftListSections(item, shortcuts, event);
			}
		}
		if (shortcuts.shift && shortcuts.up) {
			syra_bookmarks.focus();
			return true;
		}
		if (shortcuts.left || shortcuts.right) {
			_walkPageTabs(item, shortcuts, event);
			return true;
		}
		if (shortcuts.tab || shortcuts.i || shortcuts.d) {
			if (item.page.externalAdapter && item.page.externalAdapter.applyShortCut) {
				if (item.page.externalAdapter.applyShortCut(item, shortcuts)) {
					return true;
				};
			}
		}
		if (_menuStack.length > 0) {
			_clearMenuStack(item);
		}

	} else {
		if (shortcuts.enter || shortcuts.space) {
			if (isPage && item.isAlertModal) {
				item.onMenuClick({
					menu: {
						$bind: item.focusBtnId
					}
				});
				event.returnValue = false;
				event.preventDefault();
				event.stopPropagation();
				return true;
			}
		}
		if (item.isField && item.page.isTranslationPage) {
			item.page.applyShortCut(shortcuts, item);
		}
		if (shortcuts.tab || shortcuts.right || shortcuts.left) {
			if (isPage && item.isAlertModal) {
				if (item.$itemButtons.length > 1) {
					var ii, len;
					for (ii = 0, len = item.$itemButtons.length; ii < len; ii++) {
						if (item.$itemButtons[ii].$bind == item.focusBtnId) {
							break;
						}
					}
					if (ii < len) {
						ii = (shortcuts.tab && event.shiftKey) || shortcuts.left ? (ii == 0 ? len - 1 : ii - 1) : (ii + 1 == len ? 0 : ii + 1);
						syra_dom.toggleClass(item.getMenuItem(item.focusBtnId).domItem, "s-alert-md-button-default", false);
						item.focusBtnId = item.$itemButtons[ii].$bind;
						syra_dom.toggleClass(item.getMenuItem(item.focusBtnId).domItem, "s-alert-md-button-default", true);
						setTimeout(function() {
							item.getMenuItem(item.focusBtnId).domItem.focus();
						}, 5);
					}
				}
				event.returnValue = false;
				event.preventDefault();
				event.stopPropagation();
				return true;
			}
			if (item.isField && item.$item.$contentEditable && shortcuts.tab) {
				syra_form.onInputChange(item, event);
				return true;
			}
		}
		if (item.page && item.page.externalAdapter && item.page.externalAdapter.applyShortCut) {
			if (item.page.externalAdapter.applyShortCut(item, shortcuts, event)) {
				return true;
			}
		}
		if (item.isField || item.isArrayField || item.isMenuGroupRoot || item.editable) {
			if (item.isMenuGroupRoot && item.applyShortCut(shortcuts, event)) {
				return true;
			}
			if (item.applyShortCut) {
				if (item.applyShortCut(shortcuts, event))
					return true;
			}
			if (shortcuts.enter) {
				if (item.$item.$contentEditable) {
					syra_form.onInputChange(item, event);
					event.preventDefault();
					event.stopPropagation();
					return true;
				}
				// is ie10 the event on change is not sended on enter key when value change.
				if (syra_context.browser.isMSIE && item.input && syra_context.browser.info.indexOf("10.0") != -1) {
					syra_form.onInputChange(item, event);
				}
				if (!item.page.isFusionPage && item.$item.$isFilterMode && item.articleParent.list) {
					//is this a enter key on a highlighted record i.e no change in the filter value
					//to improve with isDirty management
					if ((item.getValue() == item.currentValue) || (item.currentValue == undefined && item.getValue() == "")) {
						item.articleParent.list.applyShortCut(shortcuts, event);
					} else {
						syra_form.onInputChange(item);
					}
					return true;
				}
			}

		}
		if (item.isRecordArticle && !item.isFilterArticle) {
			if (shortcuts.insert) {
				return syra_menus.click.create(item);
			}
			if (shortcuts["delete"] && (shortcuts.shift || item.page.isFusionPage)) {
				//trigger delete action
				return syra_menus.click.deleteItem(item);
			}
		}

		if (isPage && item.shortcutSpyerList) {
			return item.shortcutSpyerList.applyShortCut(shortcuts, event);
		}
	}
};