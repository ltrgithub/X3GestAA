"use strict";
var keyboardHandlers = require('syracuse-ui/lib/events/keyboardHandlers');
var _handlers = {
	free: function(handler, slot) {
		if (handler && slot) {
			var keys = Object.keys(handler);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				slot.removeEventListener(keys[ii], handler[keys[ii]]);
			}
		}
	}
};

var _resizeTimeout;
var _clickTarget, _isClickDisabled, _ignoreUnloadEvent;

function _fixWhichEvent(event) {
	if (!event.which && event.button) {
		if (event.button & 1)
			event.which = 1;
		else {
			event.which = (event.button & 4) ? 2 : 3;
		}
	}
}


function _emulateEvent(event) {
	var mainTouch = event.originalEvent && event.originalEvent.touches && event.originalEvent.touches[0];
	if (mainTouch) {
		event.pageX = mainTouch.pageX;
		event.pageY = mainTouch.pageY;
	}
	return event;
}

function _bindFieldEvents() {
	$(syra_site.layoutSlot).delegate("textarea,input,select,[contenteditable]", "mousedown change focusin focusout", function(event) {
		var item = this.syraOnInput ? syra_item.findItem(this) : syra_item.findField(this);
		item && item.onFieldInputEvent && item.onFieldInputEvent(event);
		event.stopPropagation();
	}).delegate("object.s-field-flash", "mousedown keydown", function(event) {
		var field = syra_item.findField(this);
		if (field && !field.page.isDesignFreeze) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		}
	}).delegate("a[data-s-field-extra]", "focusin focusout", function(event) {
		var field = syra_item.findField(this);
		if (field && field.onFieldInputEvent) {
			field.onFieldInputEvent(event);
		}
		event.stopPropagation();
		return false;
	}).delegate("textarea", "input", function(event) {
		var field = syra_item.findField(this);
		if (field) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		}
		return false;
	});
}

//onInputFieldMouseDown

function _onFocusInOut(root, event) {
	var onEnter = event.type == "focusin";
	var target = event.target;
	var related = event.relatedTarget;
	var item;
	while (target && target != root) {
		if (target.syrafocusinout) {
			if (!related || (related !== target && !target.contains(related))) {
				item = syra_item.get(target.syrafocusinout);
				item && item.onItemInOut(onEnter, event, target);
			}
		}
		target = target.parentNode;
	}
	if (item && onEnter) {
		syra_site.closePopups(null, event);
	}
}

function _onMouseItemInOut(root, event) {
	if (!syra_site.isInoutDisabled) {
		var onEnter = event.type == "mouseover";
		var target = event.target;
		syra_tip.utcTip.onInout(onEnter, event, target);
		var related = event.relatedTarget;
		var item;
		while (target && target != root) {
			if (target.syrainout || target.syraBtn) {
				if (!related || (related !== target && !target.contains(related))) {
					if (target.syraBtn) {
						syra_menus.button.onItemInOut(target.syraBtn, onEnter);
					}
					item = syra_item.get(target.syrainout);
					if (item) {
						var designer = item.articleParent && item.articleParent.designer;
						if (designer && designer.toggleOverItem) {
							designer.toggleOverItem(item, onEnter);
						}
						item.onItemInOut(onEnter, event, target);
					}
				}
			} else {
				if (onEnter && target.syraTip) {
					syra_tip.titleTip.show(target.title, target, true);
				}
			}
			target = target.parentNode;
		}
		syra_dlg.checkPopupDisplay(event.target, onEnter);
	}
}

function _bindMobile() {
	return;
	document.body.addEventListener('touchmove', function(event) {
		event.preventDefault();
	}, false);
}

function _clearWaitingResize() {
	if (_resizeTimeout) {
		clearTimeout(_resizeTimeout);
		_resizeTimeout = null;
	}
}

function _onSiteResizeEvent(event) {
	if (!_resizeTimeout) {
		_resizeTimeout = setTimeout(function() {
			syra_site.resizeArticle();
			_resizeTimeout = null;
		}, 200);
	}
}

function _onDown(event) {
	if (syra_dd.ddAgent) {
		syra_dd.stop();
	} else {
		if (event.target.syraNoDDSpot) {
			return;
		}
		if (event.type == "touchstart") {
			if (!event.target.syraDragSpot) {
				return;
			}
			event = _emulateEvent(event);
		}
		syra_dd.onDowEvent(event);
	}
}

function _onMove(event) {
	if (event.target.syraOnMouseId) {
		var item = syra_item.findItem(event.target);
		item && item.onMouseMove(event);
	}
	if (syra_dd.ddAgent || syra_dd.hasPageObserver()) {
		if (event.type == "touchmove") {
			if (!event.target.syraDragSpot) {
				return;
			}
			event = _emulateEvent(event);
		}
		syra_dd.onMoveEvent(event);
	}
}

function _onUp(event) {
	delete syra_dd.dropableItem;
	if (syra_dd.ddAgent) {
		syra_dd.ddAgent.onDragMouseUp(event.target, _emulateEvent(event));
		event.preventDefault();
		event.stopPropagation();
		//prevent immediate click
		if (syra_dd.ddAgent.isDragging !== false) {
			_isClickDisabled = true;
			setTimeout(function() {
				_isClickDisabled = false;
			}, 500);
		}
		syra_dd.stop();
		return false;
	}
}

function _ensureDesignItemSelection(target, item, article) {
	var item = item || syra_item.findItem(target);
	var article = article || (item && (item.articleParent || item.page));
	if (article && article.designer && article.designer.isTopPageDesigner) {
		var designer = article.designer;
		if (item.isDesigning && item.page != designer && item.page != designer.pageStorage) {
			if (designer.isTopPageDesigner()) {
				designer.selectItem(item, true);
				return true;
			}
		}
	}
}

function _onClick(currentTarget, event) {
	try {
		_fixWhichEvent(event);
		var target = event.target;
		if (target.syraIsOverlay) {
			event.preventDefault();
			event.stopPropagation();
			return false;
		}
		if (target.syraIsDefaultLink) {
			_ignoreUnloadEvent = true;
			return;
		}
		var article, item;
		var site = syra_site;
		var done, isDesignSelected;
		while (target && target != currentTarget) {
			if (target.syraBtnclick) {
				var btn = syra_menus.button.getButton(target.syraBtnclick);
				_ensureDesignItemSelection(target);
				item = syra_item.findItem(target);
				if (btn && !btn.$isDisabled) {
					if (btn.checkWorkingCopy) {
						syra_workingCopy.onBeforeUnloadPage(function() {
							btn.btnclick(event, target);
						}, btn.parent && btn.parent.page);
					} else {
						btn.btnclick(event, target);
					}
				}
				done = true;
				break;
			}

			if (target.syraOnClick && !event.syraOnClickTarget) {
				event.syraOnClickTarget = target;
			}
			if (target.syraItem) {
				var observer = item = syra_item.findItem(target);
				article = item && (item.articleParent || item.page);
				if (!isDesignSelected) {
					isDesignSelected = _ensureDesignItemSelection(target, item, article);
				}
				if (observer && observer.$isDisabled && observer.isMenuItem) {
					done = true; //important conitune loop to trigger possible selection
				} else {
					if (observer && event.syraOnClickTarget) {
						if (!observer.$isDisabled) {
							var maker = event.syraOnClickTarget.syraOnClickMaker;
							maker = maker ? observer[maker] : observer;
							if (maker && maker[event.syraOnClickTarget.syraOnClick]) {
								maker[event.syraOnClickTarget.syraOnClick](event, event.syraOnClickTarget);
								done = true;
							}
						}
						if (done) {
							delete event.syraOnClickTarget;
							break;
						}
					}
				}
				if (item && item.page == item) {
					break;
				}
			}
			target = target.parentNode;
		}
		syra_fields.ensureRecordUniqueSelection(item);
		if (!done) {
			syra_site.closePopups(undefined, event);
			var mainPage = syra_site.mainPage;
			if (mainPage && !mainPage.designer && mainPage.isFusionPage) {
				target = event.target;
				while (target) {
					if (target.syraItem) {
						return mainPage.externalAdapter.onGlobalClick(event);
					}
					target = target.parentNode;
				}
			}
		}

		if (!event.syraRetValue) {
			if (event.target.href) {
				if (event.target.target == "_blank") {
					return;
				}
			}
			if (event.target.tagName != "INPUT" && !event.target.getAttribute("for")) {
				event.preventDefault();
				event.stopPropagation();
			}
		}

	} catch (error) {
		syra_site.onError(error);
	} finally {
		syra_tip.titleTip.hide();
		var anchor = event.target;
		if (anchor.getAttribute("href") == "#" || (anchor.parentNode && anchor.parentNode.getAttribute("href") == "#")) {
			event.preventDefault();
			event.stopPropagation();
			return false;
		}
	}
}

function _enableMousEvents(enable) {
	if (syra_site && syra_site.layoutSlot) {
		if (enable) {
			if (!_handlers.mouse) {
				_handlers.mouse = {
					mousedown: syra_site.layoutSlot.addEventListener("mousedown", function(event) {
						_onDown(event);
					}, false),
					touchstart: syra_site.layoutSlot.addEventListener("touchstart", function(event) {
						_onDown(event);
					}, false),
					mousemove: syra_site.layoutSlot.addEventListener("mousemove", function(event) {
						_onMove(event);
					}, false),
					touchmove: syra_site.layoutSlot.addEventListener("touchmove", function(event) {
						_onMove(event);
					}, false),
					mouseup: syra_site.layoutSlot.addEventListener("mouseup", function(event) {
						_onUp(event);
					}, false),
					touchend: syra_site.layoutSlot.addEventListener("touchend", function(event) {
						_onUp(event);
					}, false),
					mouseover: syra_site.layoutSlot.addEventListener("mouseover", function(event) {
						_onMouseItemInOut(syra_site.layoutSlot, event);
					}, false),
					mouseout: syra_site.layoutSlot.addEventListener("mouseout", function(event) {
						_onMouseItemInOut(syra_site.layoutSlot, event);
					}, false)
				};

			}
		} else {
			_handlers.free(_handlers.mouse, syra_site.layoutSlot);
			delete _handlers.mouse;
		}
	}
};


exports.load = function() {
	_handlers.doc = {
		keydown: document.addEventListener("keydown", function(event) {
			keyboardHandlers[event.type](event);
		}, false),
		keypress: document.addEventListener("keypress", function(event) {
			keyboardHandlers[event.type](event);
		}, false),
		keyup: document.addEventListener("keyup", function(event) {
			keyboardHandlers[event.type](event);
		}, false)
	};

	_bindFieldEvents();

	if (syra_site.layoutSlot) {
		_handlers.layout = {
			ondrop: syra_site.layoutSlot.addEventListener("drop", function(event) {
				var target = event.target;
				if (target && target.tagName) {
					if (target.getAttribute("contenteditable") || ["INPUT", "SELECT", "TEXTAREA"].indexOf(target.tagName) >= 0) {
						event.preventDefault();
						event.stopPropagation();
						return false;
					}
				}
			}, false),
			focusin: syra_site.layoutSlot.addEventListener("focusin", function(event) {
				_onFocusInOut(syra_site.layoutSlot, event);
			}, false),
			focusout: syra_site.layoutSlot.addEventListener("focusout", function(event) {
				_onFocusInOut(syra_site.layoutSlot, event);
			}, false),
			click: syra_site.layoutSlot.addEventListener("click", function(event) {
				if (!_isClickDisabled && _clickTarget != event.target) {
					_clickTarget = event.target;
					var res = _onClick(this, event);
					setTimeout(function() {
						_clickTarget = null;
					}, 500);
					return res;
				} else {
					event.preventDefault();
					event.stopPropagation();
					return false;
				}
			}, false)
		};
		_enableMousEvents(true);
	}
	_handlers.win = {
		resize: window.addEventListener("resize", function(event) {
			_onSiteResizeEvent(event);
		}),
		orientationchange: window.addEventListener("orientationchange", function(event) {
			_onSiteResizeEvent(event);
		}),
		unload: window.addEventListener("unload", function(event) {
			syra_fusion && syra_fusion.detachAllBooksPanic();
			syra_site.dispose();
		})
	};

	window.onbeforeunload = function(event) {
		if (!_ignoreUnloadEvent && !syra_quality.enableTestRobot && !syra_site.hasDoneLogOut && !syra_site.hasLogonFailed && !syra_site.isOfficeSite) {
			var message = syra_fusion && syra_fusion.onWindowBeforeUnload();
			if (!message && !syra_site.isSiteReloading && !syra_site.developpementMode) {
				message = syra_local.disconnect_unload;
			}
			if (message) {
				if (["chrome", "safari", "msie"].indexOf(syra_site.getBrowserIdentity().name) < 0) {
					syra_diagnose.showDiagnoses({
						$diagnoses: [{
							$severity: "warning",
							$message: message
						}],
						autoHide: 2500
					}, syra_site.mainPage && !syra_site.mainPage.disposed && syra_site.mainPage);
				}
				var ee = event || window.event;
				if (ee) {
					ee.returnValue = message;
				}
				return message;
			}
		}
		_ignoreUnloadEvent = false;
		delete syra_site.hasDoneLogOut;
	};

	window.onerror = function(errorMsg, url, lineNumber, column, error) {
		syra_site.onUncaughtError(errorMsg, url, lineNumber, error);
	};
	_bindMobile();
};

exports.dispose = function() {
	_clearWaitingResize();
	_handlers.free(_handlers.win, window);
	window.onerror = window.onbeforeunload = null;
	_handlers.free(_handlers.doc, document);
	if (syra_site.layoutSlot) {
		_handlers.free(_handlers.layout, syra_site.layoutSlot);
		_enableMousEvents(false);
	}
	_clickTarget = _handlers = null;
};