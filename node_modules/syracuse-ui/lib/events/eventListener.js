"use strict";
var keyboardHandlers = require('syracuse-ui/lib/events/keyboardHandlers');
var _winHandlers = {};
var _layoutHandlers = {};
var _docHandlers = {};
var _resizeTimeout;
var _clickTarget, _isClickDisabled, _ignoreUnloadEvent;

function _fixWhichEvent(event) {
	if (!event.which && event.button) {
		if (event.button & 1)
			event.which = 1;
		else {
			event.which = (event.button & 4) ? 2 : 3;
		}
	}
}


function _emulateEvent(event) {
	var mainTouch = event.originalEvent && event.originalEvent.touches && event.originalEvent.touches[0];
	if (mainTouch) {
		event.pageX = mainTouch.pageX;
		event.pageY = mainTouch.pageY;
	}
	return event;
}

function _bindFieldEvents() {
	$(syra_site.layoutSlot).delegate("textarea,input,select,[contenteditable]", "mousedown change focusin focusout", function(event) {
		if (this.syraOnInput) {
			var item = syra_store.findItem(this);
			item[this.syraOnInput] && item[this.syraOnInput](this, event);
		} else {
			var field = syra_store.findField(this);
			if (field && field.onFieldInputEvent) {
				field.onFieldInputEvent(event);
			}
		}
		event.stopPropagation();
	}).delegate("object.s-field-flash", "mousedown keydown", function(event) {
		var field = syra_store.findArticle(this);
		if (field && !field.page.isDesignFreeze) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		}
	}).delegate("a[data-s-field-extra]", "focusin focusout", function(event) {
		var field = syra_store.findField(this);
		if (field && field.onFieldInputEvent) {
			field.onFieldInputEvent(event);
		}
		event.stopPropagation();
		return false;
	}).delegate("textarea", "input", function(event) {
		var field = syra_store.findField(this);
		if (field) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		}
		return false;
	});
}

//onInputFieldMouseDown

function _onFocusInOut(root, event) {
	var onEnter = event.type == "focusin";
	var target = event.target;
	var related = event.relatedTarget;
	var item;
	while (target && target != root) {
		if (target.syrafocusinout) {
			if (!related || (related !== target && !target.contains(related))) {
				item = syra_store.get(target.syrafocusinout);
				item && item.onFocusInOut(onEnter, event, target);
			}
		}
		target = target.parentNode;
	}
}

function _onMouseItemInOut(root, event) {
	if (!syra_site.isInoutDisabled) {
		var onEnter = event.type == "mouseover";
		var target = event.target;
		syra_tip.utcTip.onInout(onEnter, event, target);
		var related = event.relatedTarget;
		var item;
		while (target && target != root) {
			if (target.syrainout) {
				if (!related || (related !== target && !target.contains(related))) {
					if (target.syraIsSyraMenuHandler) {
						syra_menus.onItemInOut(onEnter, event, target);
					} else {
						item = syra_store.get(target.syrainout);
						item && item.onItemInOut(onEnter, event, target);
					}
				}
			} else {
				target.syraTip && syra_menus.onTipItemInOut(onEnter, event, target);
			}
			target = target.parentNode;
		}
	}
}

function _bindMobile() {
	return;
	document.body.addEventListener('touchmove', function(event) {
		event.preventDefault();
	}, false);
}

function _clearWaitingResize() {
	if (_resizeTimeout) {
		clearTimeout(_resizeTimeout);
		_resizeTimeout = null;
	}
}

function _onSiteResizeEvent(event) {
	if (!_resizeTimeout) {
		_resizeTimeout = setTimeout(function() {
			syra_site.resize();
			_resizeTimeout = null;
		}, 200);
	}
}

function _walkDDListener(listeners, target, event) {
	if (listeners) {
		for (var mm = 0, kk = listeners.length; mm < kk; mm++) {
			var item = listeners[mm].isDraggable(target, event);
			if (event.syraRetValue === false || item) {
				syra_dd.dropableItem = item;
				event.preventDefault();
				event.stopPropagation();
				return true;
			}
		}
	}
}

function _onDown(event) {
	if (!event.target.syraIsMouseEventDisabled) {
		if (syra_dd.ddAgent) {
			syra_dd.stop();
		} else {
			if (event.target.syraNoDDSpot) {
				return;
			}
			if (event.type == "touchstart") {
				if (!event.target.syraDragSpot) {
					return;
				}
				event = _emulateEvent(event);
			}
			var target = event.target;
			while (target) {
				if (target.syraDragSpot) {
					if (_walkDDListener(syra_dd.colResizer, target, event)) {
						return;
					}
					if (_walkDDListener(syra_dd.pageObservers, target, event)) {
						return;
					}
				}
				if (target.syraPage) {
					break; //boundary is page
				}
				target = target.parentNode;
			}
		}
	}
}

function _onMove(event) {
	if (event.target.syraOnMouseId) {
		var item = syra_store.findItem(event.target);
		if (item && !item.onMouseMove(event)) {
			return;
		}
	}
	if (!event.target.syraIsMouseEventDisabled && (syra_dd.ddAgent || syra_dd.pageObservers.length)) {
		if (event.type == "touchmove") {
			if (!event.target.syraDragSpot) {
				return;
			}
			event = _emulateEvent(event);
		}
		var target = event.target;
		var done;
		while (target) {
			if (target.syraDragSpot) {
				if (syra_dd.ddAgent) {
					for (var mm = 0, kk = syra_dd.colResizer.length; mm < kk; mm++) {
						var observer = syra_dd.colResizer[mm];
						if (observer.onDragMove) {
							var result = observer.onDragMove(target, event);
							done = true;
							if (result !== true) {
								event.preventDefault();
								result === false && event.stopPropagation();
								break;
							}
						}
					}
				}
				if (!done) {
					for (var mm = 0, kk = syra_dd.pageObservers.length; mm < kk; mm++) {
						var observer = syra_dd.pageObservers[mm];
						if (observer.onDragMove) {
							var result = observer.onDragMove(target, event);
							if (result !== true) {
								done = true;
								event.preventDefault();
								result === false && event.stopPropagation();
								break;
							}
						}
					}
				}
				event.preventDefault();
				break;
			}
			target = target.parentNode;
		}
		if (!done && syra_dd.ddAgent) {
			syra_dd.ddAgent.onDragMouseMove(event.target, event);
			event.preventDefault();
			event.stopPropagation();
		}

	}
}

function _onUp(event) {
	delete syra_dd.dropableItem;
	if (syra_dd.ddAgent) {
		syra_dd.ddAgent.onDragMouseUp(event.target, _emulateEvent(event));
		event.preventDefault();
		event.stopPropagation();
		//prevent immediate click
		if (syra_dd.ddAgent.isDragging !== false) {
			_isClickDisabled = true;
			setTimeout(function() {
				_isClickDisabled = false;
			}, 500);
		}
		syra_dd.stop();
		return false;
	}
}

function _isClickEnabled(target) {
	while (target) {
		if (target.syraAllClickDisabled) {
			return false;
		}
		target = target.parentNode;
	}
	return true;
}

function _ensureDesignItemSelection(target, item, article) {
	var item = item || syra_store.findItem(target);
	var article = article || (item && (item.articleParent || item.page));
	if (article && article.designer && article.designer.isTopPageDesigner) {
		var designer = article.designer;
		if (item.isDesigning && item.page != designer && item.page != designer.pageStorage) {
			if (designer.isTopPageDesigner()) {
				if (!item.isMenuItem) {
					designer.selectItem(item, true);
				}
				return true;
			}
		}
	}
}

function _onClick(currentTarget, event) {
	try {
		syra_site.siteFunctions.toggleTitleTip();
		if (event.target.syraIsDefaultLink) {
			_ignoreUnloadEvent = true;
			return;
		}
		if (!event.target.syraIsMouseEventDisabled) {
			_fixWhichEvent(event);
			var target = event.target;
			if (!_isClickEnabled(target)) {
				event.preventDefault();
				event.stopPropagation();
				return false;
			}
			var article;
			var site = syra_site;
			var done, isDesignSelected;
			while (target && target != currentTarget) {
				_ensureDesignItemSelection(target);
				if (target.syraSiteObserver) {
					var observer = site[target.syraSiteObserver];
					if (observer[target.syraOnClick]) {
						observer[target.syraOnClick](event, target);
						done = true;
						break;
					}
				}
				if (target.syraOnClick && !event.syraOnClickTarget) {
					event.syraOnClickTarget = target;
				}
				if (target.syraItem || target.syraTool) {
					var observer, item;
					if (target.syraTool) {
						observer = syra_store.get(target.syraTool);
						item = target;
						while (item && !item.syraItem) {
							item = item.parentNode;
						}
						item = item && syra_store.get(item);
					} else {
						observer = item = syra_store.findItem(target);
					}
					article = item && (item.articleParent || item.page);
					if (!isDesignSelected) {
						isDesignSelected = _ensureDesignItemSelection(target, item, article);
					}
					if (observer && observer.$isDisabled && observer.isMenuItem) {
						done = true;
						break;
					}
					if (observer && event.syraOnClickTarget) {
						if (event.syraOnClickTarget.syraIsSyraMenuHandler) {
							if (!observer.$isDisabled) {
								if (!isDesignSelected) {
									syra_menus[event.syraOnClickTarget.syraOnClick](event, event.syraOnClickTarget, observer);
								}
								done = true;
							}
						} else {
							if (!observer.$isDisabled) {
								var maker = event.syraOnClickTarget.syraOnClickMaker;
								maker = maker ? observer[maker] : observer;
								if (maker && maker[event.syraOnClickTarget.syraOnClick]) {
									maker[event.syraOnClickTarget.syraOnClick](event, event.syraOnClickTarget);
									done = true;
								}
							}
						}
						if (done) {
							delete event.syraOnClickTarget;
							break;
						}
					}
				}
				target = target.parentNode;
			}
			syra_site.checkUniqueSelection(item);
			if (!done) {
				syra_site.siteFunctions.onBeforeClick(undefined, event);
				var mainPage = syra_site.mainPage;
				if (mainPage && !mainPage.designer && mainPage.isFusionPage) {
					target = event.target;
					while (target) {
						if (target.syraItem) {
							return mainPage.externalAdapter.onGlobalClick(event);
						}
						target = target.parentNode;
					}
				}
			}
			if (!event.syraRetValue) {
				if (event.target.tagName != "INPUT" && !event.target.getAttribute("for")) {
					event.preventDefault();
					event.stopPropagation();
				}
			}
		} else {
			syra_site.siteFunctions.onBeforeClick(undefined, event);
		}
	} catch (error) {
		syra_site.onError(error);
	} finally {
		if (event.target.getAttribute("href") == "#") {
			event.preventDefault();
			event.stopPropagation();
			return false;
		}
	}
}

exports.load = function() {
	_docHandlers.keydown = document.addEventListener("keydown", function(event) {
		keyboardHandlers[event.type](event);
	}, false);
	_docHandlers.keypress = document.addEventListener("keypress", function(event) {
		keyboardHandlers[event.type](event);
	}, false);

	_docHandlers.keyup = document.addEventListener("keyup", function(event) {
		keyboardHandlers[event.type](event);
	}, false);

	_bindFieldEvents();

	if (syra_site.layoutSlot) {
		syra_site.layoutSlot.addEventListener("drop", _layoutHandlers.ondrop = function(event) {
			var target = event.target;
			if (target && target.tagName) {
				if (target.getAttribute("contenteditable") || ["INPUT", "SELECT", "TEXTAREA"].indexOf(target.tagName) >= 0) {
					event.preventDefault();
					event.stopPropagation();
					return false;
				}
			}
		}, false);
		syra_site.layoutSlot.addEventListener("mousedown", _layoutHandlers.mousedown = function(event) {
			_onDown(event);
		}, false);
		syra_site.layoutSlot.addEventListener("touchstart", _layoutHandlers.touchstart = function(event) {
			_onDown(event);
		}, false);
		syra_site.layoutSlot.addEventListener("mousemove", _layoutHandlers.mousemove = function(event) {
			_onMove(event);
		}, false);
		syra_site.layoutSlot.addEventListener("touchmove", _layoutHandlers.touchmove = function(event) {
			_onMove(event);
		}, false);
		syra_site.layoutSlot.addEventListener("mouseup", _layoutHandlers.mouseup = function(event) {
			_onUp(event);
		}, false);
		syra_site.layoutSlot.addEventListener("touchend", _layoutHandlers.touchend = function(event) {
			_onUp(event);
		}, false);
		syra_site.layoutSlot.addEventListener("focusin", _layoutHandlers.focusin = function(event) {
			_onFocusInOut(syra_site.layoutSlot, event);
		}, false);
		syra_site.layoutSlot.addEventListener("focusout", _layoutHandlers.focusout = function(event) {
			_onFocusInOut(syra_site.layoutSlot, event);
		}, false);

		syra_site.layoutSlot.addEventListener("mouseover", _layoutHandlers.mouseover = function(event) {
			_onMouseItemInOut(syra_site.layoutSlot, event);
		}, false);
		syra_site.layoutSlot.addEventListener("mouseout", _layoutHandlers.mouseout = function(event) {
			_onMouseItemInOut(syra_site.layoutSlot, event);
		}, false);
		syra_site.layoutSlot.addEventListener("click", _layoutHandlers.click = function(event) {
			if (!_isClickDisabled && _clickTarget != event.target) {
				_clickTarget = event.target;
				var res = _onClick(this, event);
				setTimeout(function() {
					_clickTarget = null;
				}, 500);
				return res;
			} else {
				event.preventDefault();
				event.stopPropagation();
				return false;
			}
		}, false);
	}
	_winHandlers.resize = window.addEventListener("resize", function(event) {
		_onSiteResizeEvent(event);
	});
	_winHandlers.orientationchange = window.addEventListener("orientationchange", function(event) {
		_onSiteResizeEvent(event);
	});
	window.onbeforeunload = function(event) {
		if (!_ignoreUnloadEvent && !syra_site.hasDoneLogOut && !syra_site.hasLogonFailed && !syra_site.siteOptions.isOffice) {
			var message = syra_site.fusionGateway && syra_site.fusionGateway.onWindowBeforeUnload();
			if (!message && !syra_site.isSiteReloading && !syra_site.developpementMode) {
				message = syra_local.disconnect_unload;
			}
			if (message) {
				if (["chrome", "safari", "msie"].indexOf(syra_site.browser.getIdentity().name) < 0) {
					syra_site.showDiagnoses({
						$diagnoses: [{
							$severity: "warning",
							$message: message
						}],
						autoHide: 2500
					}, syra_site.mainPage && !syra_site.mainPage.disposed && syra_site.mainPage);
				}
				var ee = event || window.event;
				if (ee) {
					ee.returnValue = message;
				}
				return message;
			}
		}
		_ignoreUnloadEvent = false;
		delete syra_site.hasDoneLogOut;
	};
	_winHandlers.unload = window.addEventListener("unload", function(event) {
		syra_site.fusionGateway && syra_site.fusionGateway.detachAllBooksPanic();
		syra_site.dispose();
	});
	window.onerror = function(errorMsg, url, lineNumber, error) {
		syra_site.onUncaughtError(errorMsg, url, lineNumber, error);
	};
	_bindMobile();
};

exports.dispose = function() {
	_clearWaitingResize();
	var keys = Object.keys(_winHandlers);
	for (var ii = 0, jj = keys.length; ii < jj; ii++) {
		window.removeEventListener(keys[ii], _winHandlers[keys[ii]]);
	}
	window.onerror = window.onbeforeunload = null;
	keys = Object.keys(_docHandlers);
	for (var ii = 0, jj = keys.length; ii < jj; ii++) {
		document.removeEventListener(keys[ii], _docHandlers[keys[ii]]);
	}
	if (syra_site.layoutSlot) {
		keys = Object.keys(_layoutHandlers);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			syra_site.layoutSlot.removeEventListener(keys[ii], _layoutHandlers[keys[ii]]);
		}
	}
	_clickTarget = _docHandlers = _layoutHandlers = _winHandlers = null;
};