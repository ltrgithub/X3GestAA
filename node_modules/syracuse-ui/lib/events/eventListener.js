"use strict";
var keyboardHandlers = require('syracuse-ui/lib/events/keyboardHandlers');
var utcTip = require('syracuse-ui/lib/field/helpers/utcTip');
var _winHandlers = {};
var _layoutHandlers = {};
var _docHandlers = {};
var _resizeTimeout;
var _clickTarget, _isClickDisabled;


function _fixWhichEvent(event) {
	if (!event.which && event.button) {
		if (event.button & 1)
			event.which = 1;
		else {
			event.which = (event.button & 4) ? 2 : 3;
		}
	}
}


function _emulateEvent(event) {
	var mainTouch = event.originalEvent && event.originalEvent.touches && event.originalEvent.touches[0];
	if (mainTouch) {
		event.pageX = mainTouch.pageX;
		event.pageY = mainTouch.pageY;
	}
	return event;
}

function _bindFieldEvents() {
	$(syra_site.layoutSlot).delegate("textarea,input,select,[contenteditable]", "mousedown change focusin focusout", function(event) {
		var item = this.syraOnInput ? syra_store.findItem(this) : syra_store.findField(this);
		item && item.onFieldInputEvent && item.onFieldInputEvent(event);
		event.stopPropagation();
	}).delegate("object.s-field-flash", "mousedown keydown", function(event) {
		var field = syra_store.findArticle(this);
		if (field && !field.page.isDesignFreeze) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		}
	}).delegate("a[data-s-field-extra]", "focusin focusout", function(event) {
		var field = syra_store.findField(this);
		if (field && field.onFieldInputEvent) {
			field.onFieldInputEvent(event);
		}
		event.stopPropagation();
		return false;
	}).delegate("textarea", "input", function(event) {
		var field = syra_store.findField(this);
		if (field) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		}
		return false;
	});
}

//onInputFieldMouseDown

function _onFocusInOut(root, event) {
	var onEnter = event.type == "focusin";
	var target = event.target;
	var related = event.relatedTarget;
	var item;
	while (target && target != root) {
		if (target.syrafocusinout) {
			if (!related || (related !== target && !target.contains(related))) {
				item = syra_store.get(target.syrafocusinout);
				item && item.onFocusInOut(onEnter, event, target);
			}
		}
		target = target.parentNode;
	}
	if (item && onEnter) {
		syra_site.closePopups(null, event);
	}
}

function _onMouseItemInOut(root, event) {
	if (!syra_site.isInoutDisabled) {
		var onEnter = event.type == "mouseover";
		var target = event.target;
		utcTip.onInout(onEnter, event, target);
		var related = event.relatedTarget;
		var item;
		while (target && target != root) {
			if (target.syrainout) {
				if (!related || (related !== target && !target.contains(related))) {
					if (target.syraIsSyraMenuHandler) {
						syra_menus.onItemInOut(onEnter, event, target);
					} else {
						item = syra_store.get(target.syrainout);
						item && item.onItemInOut(onEnter, event, target);
					}
				}
			} else {
				if (onEnter && target.syraTip) {
					syra_site.dialogManager.titleTip.show(target.title, target, true);
				}
			}
			target = target.parentNode;
		}
		syra_site.dialogManager.checkPopupDisplay(event.target, onEnter);
	}
}

function _bindMobile() {
	return;
	document.body.addEventListener('touchmove', function(event) {
		event.preventDefault();
	}, false);
}

function _clearWaitingResize() {
	if (_resizeTimeout) {
		clearTimeout(_resizeTimeout);
		_resizeTimeout = null;
	}
}

function _onSiteResizeEvent(event) {
	if (!_resizeTimeout) {
		_resizeTimeout = setTimeout(function() {
			syra_site.resize();
			_resizeTimeout = null;
		}, 200);
	}
}

function _onDown(event) {
	if (syra_dd.ddAgent) {
		syra_dd.stop();
	} else {
		if (event.target.syraNoDDSpot) {
			return;
		}
		if (event.type == "touchstart") {
			if (!event.target.syraDragSpot) {
				return;
			}
			event = _emulateEvent(event);
		}
		syra_dd.onDowEvent(event);
	}
}

function _onMove(event) {
	if (event.target.syraOnMouseId) {
		var item = syra_store.findItem(event.target);
		item && item.onMouseMove(event);
	}
	if (syra_dd.ddAgent || syra_dd.hasPageObserver()) {
		if (event.type == "touchmove") {
			if (!event.target.syraDragSpot) {
				return;
			}
			event = _emulateEvent(event);
		}
		syra_dd.onMoveEvent(event);
	}
}

function _onUp(event) {
	delete syra_dd.dropableItem;
	if (syra_dd.ddAgent) {
		syra_dd.ddAgent.onDragMouseUp(event.target, _emulateEvent(event));
		event.preventDefault();
		event.stopPropagation();
		//prevent immediate click
		if (syra_dd.ddAgent.isDragging !== false) {
			_isClickDisabled = true;
			setTimeout(function() {
				_isClickDisabled = false;
			}, 500);
		}
		syra_dd.stop();
		return false;
	}
}

function _isClickEnabled(target) {
	if (target.syraIsOverlay) {
		return false;
	}
	while (target) {
		if (target.syraAllClickDisabled) {
			return false;
		}
		target = target.parentNode;
	}
	return true;
}

function _onClick(currentTarget, event) {
	try {
		_fixWhichEvent(event);
		var target = event.target;
		if (!_isClickEnabled(target)) {
			event.preventDefault();
			event.stopPropagation();
			return false;
		}
		var article;
		var site = syra_site;
		var done, isDesignSelected;
		while (target && target != currentTarget) {
			if (target.syraOnClick && !event.syraOnClickTarget) {
				event.syraOnClickTarget = target;
			}
			if (target.syraItem || target.syraTool) {
				var observer, item;
				if (target.syraTool) {
					observer = syra_store.get(target.syraTool);
					item = target;
					while (item && !item.syraItem) {
						item = item.parentNode;
					}
					item = item && syra_store.get(item);
				} else {
					observer = item = syra_store.findItem(target);
				}
				article = item && (item.articleParent || item.page);
				if (!isDesignSelected && article && article.designer && article.designer.isTopPageDesigner) {
					var designer = article.designer;
					if (item.page != designer && item.page != designer.pageStorage) {
						if (designer.isTopPageDesigner()) {
							designer.selectItem(item, true);
							isDesignSelected = true;
						}
					}
				}
				if (observer && event.syraOnClickTarget) {
					if (event.syraOnClickTarget.syraIsSyraMenuHandler) {
						if (!observer.$isDisabled) {
							syra_menus[event.syraOnClickTarget.syraOnClick](event, event.syraOnClickTarget, observer);
						}
						done = true;
					} else {
						if (!observer.$isDisabled) {
							var maker = event.syraOnClickTarget.syraOnClickMaker;
							maker = maker ? observer[maker] : observer;
							if (maker && maker[event.syraOnClickTarget.syraOnClick]) {
								maker[event.syraOnClickTarget.syraOnClick](event, event.syraOnClickTarget);
								done = true;
							}
						}
					}
					if (done) {
						delete event.syraOnClickTarget;
						break;
					}
				}
				if (item && item.page == item) {
					break;
				}
			}
			target = target.parentNode;
		}
		if (!done) {
			syra_site.closePopups(undefined, event);
			var mainPage = syra_site.mainPage;
			if (mainPage && !mainPage.designer && mainPage.isFusionPage) {
				target = event.target;
				while (target) {
					if (target.syraItem) {
						return mainPage.externalAdapter.onGlobalClick(event);
					}
					target = target.parentNode;
				}
			}
		}
		if (!event.syraRetValue) {
			if (event.target.tagName != "INPUT" && !event.target.getAttribute("for")) {
				event.preventDefault();
				event.stopPropagation();
			}
		}

	} catch (error) {
		syra_site.onError(error);
	} finally {
		syra_site.dialogManager.titleTip.hide();
		var anchor = event.target;
		if (anchor.getAttribute("href") == "#" || (anchor.parentNode && anchor.parentNode.getAttribute("href") == "#")) {
			event.preventDefault();
			event.stopPropagation();
			return false;
		}
	}
}

exports.load = function() {
	_docHandlers.keydown = document.addEventListener("keydown", function(event) {
		keyboardHandlers[event.type](event);
	}, false);
	_docHandlers.keypress = document.addEventListener("keypress", function(event) {
		keyboardHandlers[event.type](event);
	}, false);

	_docHandlers.keyup = document.addEventListener("keyup", function(event) {
		keyboardHandlers[event.type](event);
	}, false);

	_bindFieldEvents();

	if (syra_site.layoutSlot) {
		_layoutHandlers.ondrop = syra_site.layoutSlot.addEventListener("drop", function(event) {
			var target = event.target;
			if (target && target.tagName) {
				if (target.getAttribute("contenteditable") || ["INPUT", "SELECT", "TEXTAREA"].indexOf(target.tagName) >= 0) {
					event.preventDefault();
					event.stopPropagation();
					return false;
				}
			}
		}, false);
		_layoutHandlers.mousedown = syra_site.layoutSlot.addEventListener("mousedown", function(event) {
			_onDown(event);
		}, false);
		_layoutHandlers.touchstart = syra_site.layoutSlot.addEventListener("touchstart", function(event) {
			_onDown(event);
		}, false);
		_layoutHandlers.mousemove = syra_site.layoutSlot.addEventListener("mousemove", function(event) {
			_onMove(event);
		}, false);
		_layoutHandlers.touchmove = syra_site.layoutSlot.addEventListener("touchmove", function(event) {
			_onMove(event);
		}, false);
		_layoutHandlers.mouseup = syra_site.layoutSlot.addEventListener("mouseup", function(event) {
			_onUp(event);
		}, false);
		_layoutHandlers.touchend = syra_site.layoutSlot.addEventListener("touchend", function(event) {
			_onUp(event);
		}, false);
		_layoutHandlers.focusin = syra_site.layoutSlot.addEventListener("focusin", function(event) {
			_onFocusInOut(syra_site.layoutSlot, event);
		}, false);
		_layoutHandlers.focusout = syra_site.layoutSlot.addEventListener("focusout", function(event) {
			_onFocusInOut(syra_site.layoutSlot, event);
		}, false);

		_layoutHandlers.mouseover = syra_site.layoutSlot.addEventListener("mouseover", function(event) {
			_onMouseItemInOut(syra_site.layoutSlot, event);
		}, false);
		_layoutHandlers.mouseout = syra_site.layoutSlot.addEventListener("mouseout", function(event) {
			_onMouseItemInOut(syra_site.layoutSlot, event);
		}, false);
		_layoutHandlers.click = syra_site.layoutSlot.addEventListener("click", function(event) {
			if (!_isClickDisabled && _clickTarget != event.target) {
				_clickTarget = event.target;
				var res = _onClick(this, event);
				setTimeout(function() {
					_clickTarget = null;
				}, 500);
				return res;
			} else {
				event.preventDefault();
				event.stopPropagation();
				return false;
			}
		}, false);
	}
	_winHandlers.resize = window.addEventListener("resize", function(event) {
		_onSiteResizeEvent(event);
	});
	_winHandlers.orientationchange = window.addEventListener("orientationchange", function(event) {
		_onSiteResizeEvent(event);
	});
	window.onbeforeunload = function(event) {
		if (!syra_site.hasDoneLogOut && !syra_site.hasLogonFailed && !syra_site.siteOptions.isOffice) {
			var message = syra_site.fusionGateway && syra_site.fusionGateway.onWindowBeforeUnload();
			if (!message && !syra_site.isSiteReloading && !syra_site.developpementMode) {
				message = syra_local.disconnect_unload;
			}
			if (message) {
				if (["chrome", "safari", "msie"].indexOf(syra_site.getBrowserIdentity().name) < 0) {
					syra_site.showDiagnoses({
						$diagnoses: [{
							$severity: "warning",
							$message: message
						}],
						autoHide: 2500
					}, syra_site.mainPage && !syra_site.mainPage.disposed && syra_site.mainPage);
				}
				var ee = event || window.event;
				if (ee) {
					ee.returnValue = message;
				}
				return message;
			}
		}
		delete syra_site.hasDoneLogOut;
	};
	_winHandlers.unload = window.addEventListener("unload", function(event) {
		syra_site.fusionGateway && syra_site.fusionGateway.detachAllBooksPanic();
		syra_site.dispose();
	});
	window.onerror = function(errorMsg, url, lineNumber, error) {
		syra_site.onUncaughtError(errorMsg, url, lineNumber, error);
	};
	_bindMobile();
};

exports.dispose = function() {
	_clearWaitingResize();
	var keys = Object.keys(_winHandlers);
	for (var ii = 0, jj = keys.length; ii < jj; ii++) {
		window.removeEventListener(keys[ii], _winHandlers[keys[ii]]);
	}
	window.onerror = window.onbeforeunload = null;
	keys = Object.keys(_docHandlers);
	for (var ii = 0, jj = keys.length; ii < jj; ii++) {
		document.removeEventListener(keys[ii], _docHandlers[keys[ii]]);
	}
	if (syra_site.layoutSlot) {
		keys = Object.keys(_layoutHandlers);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			syra_site.layoutSlot.removeEventListener(keys[ii], _layoutHandlers[keys[ii]]);
		}
	}
	_clickTarget = _docHandlers = _layoutHandlers = _winHandlers = null;
};