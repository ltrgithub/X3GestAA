"use strict";
var keyboardHandlers = require('syracuse-ui/lib/events/keyboardHandlers');
var _listeners = {};

function _removeListeners(listeners, slot) {
	if (listeners && slot) {
		var keys = Object.keys(listeners);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			slot.removeEventListener(keys[ii], listeners[keys[ii]]);
		}
	}
}

var _resizeTimeout;
var _clickTarget, _ignoreUnloadEvent;

function _fixWhichEvent(event) {
	if (!event.which && event.button) {
		if (event.button & 1)
			event.which = 1;
		else {
			event.which = (event.button & 4) ? 2 : 3;
		}
	}
}


function _emulateEvent(event) {
	var mainTouch = event.originalEvent && event.originalEvent.touches && event.originalEvent.touches[0];
	if (mainTouch) {
		event.pageX = mainTouch.pageX;
		event.pageY = mainTouch.pageY;
	}
	return event;
}

function _bindFieldEvents() {
	$(syra_site.layoutSlot).delegate("textarea,input,select,[contenteditable]", "mousedown change focusin focusout", function(event) {
		var item = this.syraOnInput ? syra_item.findItem(this) : syra_item.findField(this);
		item && item.onFieldInputEvent && item.onFieldInputEvent(event);
		event.stopPropagation();
	}).delegate("a[data-s-field-extra]", "focusin focusout", function(event) {
		var field = syra_item.findField(this);
		if (field && field.onFieldInputEvent) {
			field.onFieldInputEvent(event);
		}
		event.stopPropagation();
		return false;
	}).delegate("textarea", "input", function(event) {
		var field = syra_item.findField(this);
		if (field) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		}
		return false;
	});
}

//onInputFieldMouseDown

function _onFocusInOut(root, event) {
	var onEnter = event.type == "focusin";
	var target = event.target;
	var related = event.relatedTarget;
	var item;
	while (target && target != root) {
		if (target.syrafocusinout) {
			if (!related || (related !== target && !target.contains(related))) {
				item = syra_item.get(target.syrafocusinout);
				item && item.onItemInOut(onEnter, event, target);
			}
		}
		target = target.parentNode;
	}
	if (item && onEnter) {
		syra_site.closePopups(null, event);
	}
}

function _mouseover_out(root, event) {
	if (!syra_site.isInoutDisabled) {
		var onEnter = event.type == "mouseover";
		var target = event.target;
		syra_tip.utcTip.onInout(onEnter, event, target);
		var related = event.relatedTarget;
		var item;
		while (target && target != root) {
			if (target.syrainout || target.syraBtn) {
				if (!related || (related !== target && !target.contains(related))) {
					if (target.syraBtn) {
						syra_button.onItemInOut(target.syraBtn, onEnter);
					}
					item = syra_item.get(target.syrainout);
					if (item) {
						var designer = item.articleParent && item.articleParent.designer;
						if (designer && designer.toggleOverItem) {
							designer.toggleOverItem(item, onEnter);
						}
						item.onItemInOut(onEnter, event, target);
					}
				}
			} else {
				if (onEnter && target.syraTip) {
					syra_tip.titleTip.show(target.title, target, true);
				}
			}
			target = target.parentNode;
		}
		syra_over.checkPopupDisplay(event.target, onEnter);
	}
}

function _clearWaitingResize() {
	if (_resizeTimeout) {
		clearTimeout(_resizeTimeout);
		_resizeTimeout = null;
	}
}

function _resizeSite(event) {
	if (!_resizeTimeout) {
		_resizeTimeout = setTimeout(function() {
			syra_site.resizeItem();
			_resizeTimeout = null;
		}, 200);
	}
}

function _ensureDesignItemSelection(target, item, article) {
	var item = item || syra_item.findItem(target);
	var article = article || (item && (item.articleParent || item.page));
	if (article && article.designer && article.designer.isTopPageDesigner) {
		var designer = article.designer;
		if (item.isDesigning && item.page != designer && item.page != designer.pageStorage) {
			if (designer.isTopPageDesigner()) {
				if (!item.isMenuItem) {
					designer.selectItem(item, true);
				}
				return true;
			}
		}
	}
}

function _click(currentTarget, event) {
	try {
		if (syra_site.ignoreClick) {
			if (event.target && (syra_site.ignoreClick == event.target) || event.target.contains(syra_site.ignoreClick)) {
				delete syra_site.ignoreClick;
				event.preventDefault();
				event.stopPropagation();
				return false;
			}
			delete syra_site.ignoreClick;
		}
		_fixWhichEvent(event);
		var target = event.target;
		if (target.syraIsOverlay) {
			event.preventDefault();
			event.stopPropagation();
			return false;
		}

		var item;
		if (target.syraIsDefaultLink) {
			_ignoreUnloadEvent = true;
			var anchor = event.target;
			var href = anchor.getAttribute("href");
			syra_site.activeMenusPopup && /^tel:/.test(href) && syra_site.activeMenusPopup.close();
			item = syra_item.findItem(target);
			if (/^tel:/.test(href) && item && item.ctiCall === true) {
				event.preventDefault();
				event.stopPropagation();
				var url = syra_expression.parse(syra_site.userProfile, syra_site.userProfile.$menus.$ctiMakeCall.$url);
				url += "?ctiId=" + syra_site.userProfile.dataset.user.ctiId;
				url += "&tel=" + href.substring(4);
				syra_ajax.get({
					page: syra_site.userProfile,
					url: url,
					success: function(data, response, requestUrl) {
						// console.log("ctiMakeCall succeeded from '" + syra_site.userProfile.dataset.user.ctiId + "' to '" + href.substring(4) + "'")
					}
				});
				return false;
			}
			return;
		}
		var article;
		var site = syra_site;
		var done, isDesignSelected;
		while (target && target != currentTarget) {
			if (target.syraBtnclick) {
				var btn = syra_button.getButton(target.syraBtnclick);
				_ensureDesignItemSelection(target);
				item = syra_item.findItem(target);
				if (btn && !btn.$isDisabled) {
					if (!(btn.pickerId && item && item.page && item.page.designer)) {
						if (btn.checkWorkingCopy) {
							syra_form.onBeforeUnloadPage(function() {
								btn.click(event, target);
							}, btn.parent && btn.parent.page);
						} else {
							btn.click(event, target);
						}
					}
				}
				done = true;
				break;
			}

			if (target.syraOnClick && !event.syraOnClickTarget) {
				event.syraOnClickTarget = target;
			}
			if (target.syraItem) {
				var observer = item = syra_item.findItem(target);
				article = item && (item.articleParent || item.page);
				if (!isDesignSelected) {
					isDesignSelected = _ensureDesignItemSelection(target, item, article);
				}
				if (observer && observer.$isDisabled && observer.isMenuItem) {
					done = true; //important conitune loop to trigger possible selection
				} else {
					if (observer && event.syraOnClickTarget) {
						if (!observer.$isDisabled) {
							var maker = event.syraOnClickTarget.syraOnClickMaker;
							maker = maker ? observer[maker] : observer;
							if (maker && maker[event.syraOnClickTarget.syraOnClick]) {
								maker[event.syraOnClickTarget.syraOnClick](event, event.syraOnClickTarget);
								done = true;
							}
						}
						if (done) {
							delete event.syraOnClickTarget;
							break;
						}
					}
				}
				if (item && item.page == item) {
					break;
				}
			}
			target = target.parentNode;
		}
		syra_site.checkUniqueSelection(item);
		if (!done) {
			syra_site.closePopups(undefined, event);
			var mainPage = syra_site.mainPage;
			if (mainPage && !mainPage.designer && mainPage.isFusionPage) {
				target = event.target;
				while (target) {
					if (target.syraItem) {
						return mainPage.externalAdapter.onGlobalClick(event);
					}
					target = target.parentNode;
				}
			}
		}

		if (!event.syraRetValue) {
			if (event.target.href) {
				if (event.target.target == "_blank") {
					return;
				}
			}
			if (event.target.tagName != "INPUT" && !event.target.getAttribute("for")) {
				event.preventDefault();
				event.stopPropagation();
			}
		}

	} catch (error) {
		syra_alert.onUncaughtError({
			error: error,
			url: error.fileName,
			lineNumber: error.lineNumber
		});
	} finally {
		syra_tip.titleTip.hide();
		var anchor = event.target;
		if (anchor.getAttribute("href") === "#" || (anchor.parentNode && anchor.parentNode.getAttribute("href") == "#")) {
			event.preventDefault();
			event.stopPropagation();
			return false;
		}
	}
}

exports.load = function() {
	_listeners.doc = {};
	document.addEventListener("keydown", _listeners.doc.keydown = function(event) {
		keyboardHandlers[event.type](event);
	}, false);
	document.addEventListener("keypress", _listeners.doc.keypress = function(event) {
		keyboardHandlers[event.type](event);
	}, false);
	document.addEventListener("keyup", _listeners.doc.keyup = function(event) {
		keyboardHandlers[event.type](event);
	}, false);


	_bindFieldEvents();

	if (syra_site.layoutSlot) {
		_listeners.body = {};
		document.body.addEventListener("contextmenu", _listeners.body.contextmenu = function(event) {
			var target = event.target;
			var item = target.syraBtnclick ? syra_button.getButton(target.syraBtnclick) : syra_item.findItem(target);
			var isEmptyLink = (target.tagName == "A") && (target.getAttribute("href") == "#");
			var page = item && item.page;
			if (!page) {
				page = syra_site && syra_site.mainPage;
			}
			if (isEmptyLink || (page && page.isFusionPage && item.isMenuItem)) {
				event.preventDefault();
				return false;
			}
		}, false);

		_listeners.layout = {};
		syra_site.layoutSlot.addEventListener("drop", _listeners.layout.ondrop = function(event) {
			var target = event.target;
			if (target && target.tagName) {
				if (target.getAttribute("contenteditable") || ["INPUT", "SELECT", "TEXTAREA"].indexOf(target.tagName) >= 0) {
					event.preventDefault();
					event.stopPropagation();
					return false;
				}
			}
		}, false);
		syra_site.layoutSlot.addEventListener("focusin", _listeners.layout.focusin = function(event) {
			_onFocusInOut(syra_site.layoutSlot, event);
		}, false);
		syra_site.layoutSlot.addEventListener("focusout", _listeners.layout.focusout = function(event) {
			_onFocusInOut(syra_site.layoutSlot, event);
		}, false);
		syra_site.layoutSlot.addEventListener("click", _listeners.layout.click = function(event) {
			if (_clickTarget != event.target) {
				_clickTarget = event.target;
				var res = _click(this, event);
				setTimeout(function() {
					_clickTarget = null;
				}, 500);
				return res;
			} else {
				event.preventDefault();
				event.stopPropagation();
				return false;
			}
		}, false);
		if (!_listeners.mouse) {
			_listeners.mouse = {};
			syra_site.layoutSlot.addEventListener("mouseover", _listeners.mouse.mouseover = function(event) {
				_mouseover_out(syra_site.layoutSlot, event);
			}, false);
			syra_site.layoutSlot.addEventListener("mouseout", _listeners.mouse.mouseout = function(event) {
				_mouseover_out(syra_site.layoutSlot, event);
			}, false);
		}
	}
	_listeners.win = {};
	window.addEventListener("resize", _listeners.win.resize = function(event) {
		_resizeSite(event);
	});
	window.addEventListener("orientationchange", _listeners.win.orientationchange = function(event) {
		_resizeSite(event);
	});
	window.addEventListener("unload", _listeners.win.unload = function(event) {
		syra_fusion && syra_fusion.detachAllBooksPanic();
		syra_site.dispose();
	});


	window.onbeforeunload = function(event) {
		if (!_ignoreUnloadEvent && !syra_context.testRobot && !syra_site.hasDoneLogOut && !syra_site.hasLogonFailed && !syra_site.isOfficeSite) {
			var message = syra_fusion && syra_fusion.onWindowBeforeUnload();
			if (!message && !syra_site.isSiteReloading && !syra_context.developpementMode) {
				message = syra_local.disconnect_unload;
			}
			if (message) {
				if (["chrome", "safari", "msie"].indexOf(syra_context.browser.name) < 0) {
					syra_alert.warn(message, syra_site.mainPage && !syra_site.mainPage.disposed && syra_site.mainPage, {
						autoHide: 2500
					});
				}
				var ee = event || window.event;
				if (ee) {
					ee.returnValue = message;
				}
				return message;
			}
		}
		_ignoreUnloadEvent = false;
		delete syra_site.hasDoneLogOut;
	};

	window.onerror = function(errorMsg, url, lineNumber, column, error) {
		syra_alert.onUncaughtError({
			error: error,
			url: url,
			lineNumber: lineNumber
		});
	};
};

exports.dispose = function() {
	_clearWaitingResize();
	_removeListeners(_listeners.win, window);
	_removeListeners(_listeners.body, document.body);
	window.onerror = window.onbeforeunload = null;
	_removeListeners(_listeners.doc, document);
	if (syra_site.layoutSlot) {
		_removeListeners(_listeners.layout, syra_site.layoutSlot);
		_removeListeners(_listeners.mouse, syra_site.layoutSlot);
	}
	_clickTarget = _listeners = null;
};