"use strict";

var _map = {};

exports.getMap = function() {
	return _map;
};

exports.register = function(item) {
	_map[item.id] = item;
};

exports.get = function(id) {
	return _map[id];
};

exports.unregister = function(item) {
	delete _map[item.id];
};

exports.dispose = function() {
	_map = null;
};

exports.bind = function(item, $bind) {
	if (item && $bind) {
		var article = item.articleParent;
		(article.boundFields[$bind] = article.boundFields[$bind] || []).push(item);
		item.setDataBind(article.$prototype[$bind], article.$prototype, undefined, $bind);
		if (article.isArticleLoaded) {
			var dataset = article.dataset;
			item.setDataBind(dataset[$bind], dataset, dataset.$properties && dataset.$properties[$bind], $bind);
		}
	}
};

exports.unbind = function(item) {
	if (item && item.$item && item.$item.$bind) {
		var article = item.articleParent;
		var map = item.isMenuItem ? article.menuItems : article.boundFields;
		var bounds = map && map[item.$item.$bind];
		if (bounds) {
			for (var ii = 0; ii < bounds.length; ii++) {
				if (bounds[ii] == item) {
					bounds.splice(ii, 1);
					break;
				}
			}
		}
	}
};

exports.remove = function(item, removeDom, unbind) {
	if (item) {
		if (removeDom) {
			if (item.remove) {
				item.remove();
			} else {
				if (item.domItem && item.domItem.parentNode) {
					item.domItem.parentNode.removeChild(item.domItem);
				}
			}
		}
		var article = item.articleParent;
		if (article) {
			unbind && exports.unbind(item);
			if (item.id) {
				delete article.idMap[item.id];
			}
		}
		item.dispose && !item.disposed && item.dispose();
	}
};

exports.findRecordByServerIndex = function(list, $serverIndex) {
	for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
		if (list.records[ii].$serverIndex == $serverIndex) {
			return list.records[ii];
		}
	}
	return null;
};

exports.findList = function(item) {
	var list = item.isArrayField && item;
	if (!list) {
		//walk up from field
		var article = item.articleParent;
		while (article) {
			if (article.isArrayField) {
				list = article;
				break;
			}
			article = article.articleParent;
		}
	}
	if (!list && item.page.boundFields) {
		//walk up from page
		var binds = Object.keys(item.page.boundFields);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var field = item.page.boundFields[binds[ii]];
			field = field && field[0];
			if (field && field.isArrayField) {
				list = field;
				break;
			}
		}
	}
	return list;
};

exports.getLists = function(page) {
	var lists = [];
	var $binds = page.boundFields ? Object.keys(page.boundFields) : [];
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var fields = page.boundFields[$binds[ii]];
		if (fields) {
			for (var mm = 0, kk = fields.length; mm < kk; mm++) {
				if (fields[mm] && fields[mm].isArrayField) {
					lists.push(fields[mm]);
				}
			}
		}
	}
	return lists;
};


exports.findRecord = function(list, dom) {
	var record;
	while (dom && dom != document) {
		if (dom.syraItem !== undefined) {
			record = _map[dom.syraItem];
			if (record && record.isRecordArticle && !record.isChildFieldRecord) {
				return record;
			}
		}
		dom = dom.parentNode;
	}
	return null;
};
exports.findField = function(dom) {
	var field;
	while (dom != null) {
		if (dom.syraItem) {
			field = _map[dom.syraItem];
			if (!field || (field && field.isField)) {
				break;
			}
		}
		dom = dom.parentNode;
	}
	return field;
};

exports.findItem = function(dom) {
	var item;
	while (dom != null) {
		if (dom.syraItem) {
			item = _map[dom.syraItem];
			if (item) {
				break;
			}
		}
		dom = dom.parentNode;
	}
	return item;
};


exports.initializeNewItem = function(page, item, $item, boxParent) {
	item.page = page;
	if ($item) {
		item.$item = $item;
		if (!item.id) {
			item.id = $item.$clientId;
		}
	}
	if (!item.id) {
		item.id = page.id + "-" + (++page._childItemOffset);
	}
	syra_item.register(item);
	if (boxParent) {
		item.boxParent = boxParent;
		(item.articleParent = syra_article.getArticle(boxParent)).idMap[item.id] = item;
		syra_item.registerBoxField(item);
	}
	return item;
};


exports.registerBoxField = function(item, check) {
	if (item.boxParent.boxChildItems && item.$item && item.$item.$bind) {
		if (check && item.boxParent.boxChildItems.indexOf(item) >= 0) {
			return;
		}
		item.boxParent.boxChildItems.push(item);
	}
};