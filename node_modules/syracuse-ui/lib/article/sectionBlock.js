"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require("./box").Box;

var _ddTabEnter;

function _resetDDTimer() {
	if (_ddTabEnter) {
		clearTimeout(_ddTabEnter);
		_ddTabEnter = null;
	}
}

function SectionBlock() {}

exports.SectionBlock = helpers.defineClass(SectionBlock, Box, {
	loadBox: function() {
		this.page.registerSectionBlock(this);
		this.boxChildItems = [];
		this.$item.$name = this.$item.$name || this.$clientId; //used for authoring
		this.ensureDefaultTitle();
		this.domItem = document.createElement("section");
		this.drawBox();
	},
	_createBoxTitle: function() {
		var item = Box.prototype._createBoxTitle.call(this);
		this.domTitle.syrainout = this.id;
		if (this.titleText) {
			this.domTitle.title = "";
		}
		this.titleLabel.syraTip = 1;
		return item;
	},
	onItemInOut: function(onEnter, event, target) {
		if (target == this.tabTitle) {
			if (this.articleParent.designer && syra_dd.ddAgent) {
				if (onEnter) {
					var self = this;
					_ddTabEnter = setTimeout(function() {
						if (!self.disposed && !self.$opened) {
							self.layoutParent.openTab(self);
						}
					}, 500);
				} else {
					_resetDDTimer();
				}
			}
		}
		if (this.btns && this.btns.items.diagnoses) {
			syra_diagnose.onBoxItemInOut(this, onEnter);
		}
	},
	ensureDefaultTitle: function() {
		if (!this.$item.$title) {
			if (this.layoutParent && this.layoutParent.$layout && this.layoutParent.$layout.$items.length > 1) {
				this.$item.$title = "-";
			}
		}
	},
	disable: function($isDisabled) {
		if ($isDisabled == false && this.$isDisabled === undefined) {
			this.$isDisabled = false;
		} else {
			this.$isDisabled = $isDisabled;
			this.header && syra_site.dom.toggleClass(this.header, "s-disabled", $isDisabled);
			syra_site.dom.toggleClass(this.body, "s-disabled", $isDisabled);
			this.domTitle && syra_site.dom.toggleClass(this.domTitle, "s-disabled", $isDisabled);
			this.expandBtn && syra_site.dom.toggleClass(this.expandBtn, "s-disabled", $isDisabled);
		}
	},
	ensureOpened: function() {
		!this.$opened && this.openBox(!this.$opened);
	},
	expandBody: function($opened, event) {
		if (!this.$isDisabled && event) {
			Box.prototype.expandBody.call(this, $opened, event);
		}
	},

	dispose: function() {
		_resetDDTimer();
		this.page && this.page.unregisterSectionBlock(this);
		Box.prototype.dispose.call(this);
	},
	initializeSection: function($item) {
		this.isSection = true;
		if ($item) {
			if (!$item.$layout) {
				$item.$layout = {};
			}
			if (!$item.$layout.$items) {
				$item.$layout.$items = [];
			}
		}
	},
	ensureSkin: function() {
		this.$designLevel = this.boxParent.isSection ? "block" : "section";
		this.$skin = this.$item.$skin;
		if (!this.$skin) {
			if (this.boxParent.isSection) {
				this.$skin = this.articleParent.$defaultSkinBlock || this.page.$defaultSkinBlock || "s-h2";
			} else {
				this.$skin = this.articleParent.$defaultSkinSection || this.page.$defaultSkinSection || "s-h1";
			}
		}
	}
});