"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require("./box").Box;

var _ddTabEnter;

function _resetDDTimer() {
	if (_ddTabEnter) {
		clearTimeout(_ddTabEnter);
		_ddTabEnter = null;
	}
}


function _addTabTitle(box) {
	box.tabTitle = document.createElement("a");
	box.tabTitle.syraOnClick = "onOpenerClick";
	if (box.isSection) {
		box.tabTitle.setAttribute("href", "#");
	}
	box.tabTitle.className = box.$skin + "-tab";
	box.tabTitle.syraItem = box.id;
	box.tabTitleText = document.createElement("div");
	box.tabTitleText.className = box.$skin + "-tab-text";
	box.tabTitle.appendChild(box.tabTitleText);
	box.setTitle(box.getTitle());
	box.layoutParent.appendTab(box);
	box.header.style.display = "none";
}


function _setTitleIcon(box) {
	var icon = document.createElement("div");
	icon.className = box.$skin + "-title-icon";
	box.domTitle.appendChild(icon);
	var $path = syra_site.$iconPath + (box.$item.$titleIcon.$path || "");
	icon.style.backgroundImage = "url('" + $path + box.$item.$titleIcon.$value + ".png')";
	box.titleLabel = document.createElement("div");
	box.titleLabel.className = box.$skin + "-title-text s-icon";
	box.domTitle.appendChild(box.titleLabel);
	box.domTitle.syrainout = box.id;
	if (box.$item.$titleIcon.$mode === "icon") {
		box.domTitle.style.display = "";
		box.domTitle.syraTip = 2;
		box.titleLabel.style.display = "none";
	}
}

function _toggleCloseButton(section, show) {
	if (show) {
		if (!section.closeBtn) {
			section.closeBtn = syra_menus.button.add({
				parent: section,
				slot: section.ensureButtonsSlot(),
				text: syra_local.box_close,
				css: section.$skin + "-btn",
				iconOnly: true,
				fontIcon: "close",
				btnclick: function() {
					var section = this.parent;
					section.isMaximized && section.maximizeBtn.link.click();
					var layoutParent = section.layoutParent;
					layoutParent.removeItem(section, true);
					syra_site.ensureArticleVisibility(layoutParent.page);
				}

			});
		}
	} else {
		syra_menus.button.remove(section.closeBtn);
	}
}

function _applyDesignFieldsSettings(box, metaData) {
	if (metaData.$fieldsIsTopLabelAlignment !== undefined ||
		metaData.$fieldsIsRightTextLabelAlignment !== undefined ||
		metaData.$fieldsIsTitleHidden !== undefined ||
		metaData.$fieldsIsTitleEmpty !== undefined) {
		if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
			box.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
		}
		if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
			box.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
		}
		if (metaData.$fieldsIsTitleHidden !== undefined) {
			box.$item.$fieldsIsTitleHidden = metaData.$fieldsIsTitleHidden;
		}
		if (metaData.$fieldsIsTitleEmpty !== undefined) {
			box.$item.$fieldsIsTitleEmpty = metaData.$fieldsIsTitleEmpty;
		}
		var items = box.layoutContent.getItems();
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			var item = items[ii];
			if (item.isField) {
				box.applyDesignMetaDataToField(item, metaData);
			} else {
				if (!item.isLayout && item.layoutContent) {
					_applyDesignFieldsSettings(item, metaData);
				}
			}
		}
	}
}

function _expandSiblingBoxes(box, layout, expand) {
	for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
		var item = layout.items[ii];
		if (item.isLayout) {
			_expandSiblingBoxes(box, item, expand);
		} else {
			if (item.isSection && item != box) {
				_expandBody(item, expand);
			}
		}
	}
}

function _setExpandButtonState(box) {
	var state = box.$opened ? "node_expanded" : "node_collapsed"; //    "collapse" : "expand";
	syra_menus.button.setText(box.expandBtn, syra_local["box_" + state], state);
}

function _expandBody(section, $opened, event) {
	if (!section.$isDisabled && event) {
		if (event) {
			if (event.shiftKey) {
				if (section.page.isBoxesExpanded === undefined) {
					section.page.isBoxesExpanded = true;
				}
				section.page.isBoxesExpanded = !section.page.isBoxesExpanded;
				if (section.boxParent && section.boxParent.layoutContent) {
					_expandSiblingBoxes(section, section.boxParent.layoutContent, section.page.isBoxesExpanded);
				}

			}
		}
		section.$opened = ($opened === undefined) ? !section.$opened : $opened;
		section.page.externalAdapter.onBoxToggle({
			box: section,
			open: section.$opened,
			isFirstTime: !section.loaded || false,
			doEvent: function() {
				if (section.onOpenButtonClick) {
					section.onOpenButtonClick();
				} else {
					section.openBox(section.$opened);
					syra_site.ensureArticleVisibility(section.articleParent, true, section);
				}
			}
		});
		section.expandBtn && _setExpandButtonState(section);
		section.ensureButtonsVisibility();
	}
}

function SectionBlock() {}

exports.SectionBlock = helpers.defineClass(SectionBlock, Box, {
	setState: function(state) {
		if (state.$isHidden !== undefined) {
			if (this.$isHidden !== state.$isHidden) {
				this.showItem(!(this.$isHidden = state.$isHidden));
			}
		}
	},
	_applyButtonMetadata: function(metaData, designing) {
		if (metaData.$isBoxCollapsable !== undefined) {
			this.$item.$isBoxCollapsable = metaData.$isBoxCollapsable;
			if (this.$item.$isBoxCollapsable && !this.$item.$isTitlePicker) {
				if (!this.expandBtn) {
					var css = this.$skin + "-expand";
					this.expandBtn = syra_menus.button.add({
						parent: this,
						text: syra_local.box_collapse,
						css: css,
						iconOnly: true,
						fontIcon: "node_expanded",
						btnclick: function(event) {
							this.parent.onOpenerClick(event, this.link);
						}
					});
					this.header.insertBefore(this.expandBtn.link, this.header.firstChild);
				}
				this.$opened = this.$item.$opened !== false;
				_setExpandButtonState(this);
			} else {
				syra_menus.button.remove(this.expandBtn);
			}
			if (designing && !this.$item.$isBoxCollapsable && !this.$opened) {
				_expandBody(this, true);
			}
		}
		if (metaData.$isCloseable !== undefined) {
			_toggleCloseButton(this, this.$item.$isCloseable = metaData.$isCloseable);
		}
		if (metaData.$isMaximizable !== undefined) {
			this.toggleMaximizeButton(this.$item.$isMaximizable = metaData.$isMaximizable);
		}
		this.ensureButtonsVisibility();
	},

	applyDesignMetaData: function(metaData, designing) {
		this.setState(metaData);
		if (metaData.$isTitleHidden !== undefined) {
			this.$item.$isTitleHidden = metaData.$isTitleHidden;
			if (!this.tabTitle) {
				this.header.style.display = metaData.$isTitleHidden ? "none" : "";
			}
		}
		this._applyButtonMetadata(metaData, designing);
		if (designing !== false) {
			if (metaData.$title !== undefined) {
				this.setTitle(this.$item.$title = metaData.$title);
			}
			designing && _applyDesignFieldsSettings(this, metaData);

			if (metaData.$field !== undefined) {
				this.$item.$field = this.$item.$field || {};
				var $props = Object.keys(metaData.$field);
				for (var ii = 0, jj = $props.length; ii < jj; ii++) {
					var $prop = $props[ii];
					this.$item.$field[$prop] = metaData.$field[$prop];
				}
			}
		}
	},
	showItem: function(show) {
		this.isItemHidden = !show;
		var display = show ? "" : "none";
		if (this.domItem) {
			this.domItem.style.display = display;
		}
		if (this.tabTitle) {
			this.tabTitle.style.display = display;
		}
		if (this.layoutParent) {
			this.layoutParent.ensureItemVisibility(this, !show);
		}
	},
	ensureButtonsVisibility: function() {
		this.maximizeBtn && syra_menus.button.hide(this.maximizeBtn, !this.$opened);
	},
	applyDesignMetaDataToField: function(field, metaData) {
		field.applyDesignMetaData({
			$isTopLabelAlignment: metaData.$fieldsIsTopLabelAlignment,
			$isRightTextLabelAlignment: metaData.$fieldsIsRightTextLabelAlignment,
			$isTitleHidden: metaData.$fieldsIsTitleHidden,
			$isTitleEmpty: metaData.$fieldsIsTitleEmpty
		}, true);
	},
	ensureButtonsSlot: function() {
		if (!this.buttonsSlot) {
			this.buttonsSlot = document.createElement("div");
			this.buttonsSlot.syraItem = this.id;
			if (this.tabTitle) {
				this.buttonsSlot.className = "s-section-tab-btns";
				this.tabTitle.appendChild(this.buttonsSlot);
			} else {
				this.buttonsSlot.className = "s-section-btns";
				this.header.appendChild(this.buttonsSlot);
			}
		}
		return this.buttonsSlot;
	},
	onOpenerClick: function(event, btn) {
		var self = this;
		if (!self.page.onOpenerChildBoxClick || self.page.onOpenerChildBoxClick(self, btn)) {
			if (self.tabTitle) {
				var tabIndex = self.layoutParent.getChildIndex(self);
				var isTabSelected = self.layoutParent.getOpenedTab() == self;
				if (isTabSelected) {
					self.page.externalAdapter.onBoxClick({
						box: self,
						event: event,
						tabIdx: tabIndex
					});
				} else {
					if (!syra_dd.ddAgent) {
						var open = !self.$item.$opened;
						var isFirstTime = !self.loaded;
						self.page.externalAdapter.onBoxToggle({
							nativeEvent: event,
							nativeEvenData: btn.syraOnEventData,
							box: self,
							isTabSelected: isTabSelected,
							open: open,
							isFirstTime: isFirstTime,
							tabIdx: tabIndex,
							doEvent: function() {
								if (!isTabSelected) {
									self.layoutParent.openTab(self);
								}
							}
						});
						delete btn.syraOnEventData;
						return false;
					}
				}
			} else {
				if (self.$item.$isBoxCollapsable) {
					_expandBody(self, undefined, event);
					if (self.page && self.page.designer) {
						self.$item.$opened = self.$opened;
						self.page.designer.endArticleUpdate(self, true);
					}
				}
			}
		}
	},
	toggleMaximizeButton: function(show) {
		syra_site.maximizer.toggleButton(this, true, this.ensureButtonsSlot(), this.$skin + "-btn");
	},
	loadBox: function() {
		this.page.registerSectionBlock(this);
		this.boxChildItems = [];
		this.$item.$name = this.$item.$name || this.$clientId; //used for authoring
		this.ensureDefaultTitle();
		this.domItem = document.createElement("section");
		this.drawBox();
	},
	_createBoxTitle: function() {
		this.titleLabel = this.domTitle = this.domTitle || document.createElement("div");
		this.domTitle.style.display = "none";
		this.domTitle.className = this.$skin + "-title";
		this.domTitle.syraItem = this.id;
		this.$item.$titleIcon && _setTitleIcon(this);
		this.domTitle.syrainout = this.id;
		if (this.titleText) {
			this.domTitle.title = "";
		}
		this.titleLabel.syraTip = 1;
		return this.domTitle;
	},
	onItemInOut: function(onEnter, event, target) {
		if (target == this.tabTitle) {
			if (this.articleParent.designer && syra_dd.ddAgent) {
				if (onEnter) {
					var self = this;
					_ddTabEnter = setTimeout(function() {
						if (!self.disposed && !self.$opened) {
							self.layoutParent.openTab(self);
						}
					}, 500);
				} else {
					_resetDDTimer();
				}
			}
		}
		this.page.diagnosePanel && this.page.diagnosePanel.onBoxItemInOut(this, onEnter);
	},
	ensureDefaultTitle: function() {
		if (!this.$item.$title) {
			if (this.layoutParent && this.layoutParent.$layout && this.layoutParent.$layout.$items.length > 1) {
				this.$item.$title = "-";
			}
		}
	},
	disable: function($isDisabled) {
		if ($isDisabled == false && this.$isDisabled === undefined) {
			this.$isDisabled = false;
		} else {
			this.$isDisabled = $isDisabled;
			this.header && syra_site.dom.toggleClass(this.header, "s-disabled", $isDisabled);
			syra_site.dom.toggleClass(this.body, "s-disabled", $isDisabled);
			this.domTitle && syra_site.dom.toggleClass(this.domTitle, "s-disabled", $isDisabled);
			syra_menus.button.disable(this.expandBtn, $isDisabled);
		}
	},
	ensureOpened: function() {
		!this.$opened && this.openBox(!this.$opened);
	},
	openBox: function(open, load, drawing) {
		if ((open || load) && !this.loaded) {
			this.renderLayoutContent();
			this.loaded = true;
		}
		this.$opened = open;
		if (this.tabTitle) {
			open && this.ensureLayoutMode();
			if (!drawing) {
				if (open) {
					this.$item.$opened = true;
				} else {
					delete this.$item.$opened;
				}
			}
			syra_site.dom.toggleClass(this.tabTitle, "s-tab-open", open);
		}
		if (this.$item.$isBoxCollapsable) {
			this.expandBtn && _setExpandButtonState(this);
			this.domTitle.syraOnClick = "onOpenerClick";
			syra_site.dom.toggleClass(this.domTitle, "s-close", !open);
		}
		this.showBody(open);
		this.ensureButtonsVisibility();
	},

	dispose: function() {
		_resetDDTimer();
		this.page && this.page.unregisterSectionBlock(this);
		Box.prototype.dispose.call(this);
	},
	initializeSection: function($item) {
		this.isSection = true;
		if ($item) {
			if (!$item.$layout) {
				$item.$layout = {};
			}
			if (!$item.$layout.$items) {
				$item.$layout.$items = [];
			}
		}
	},
	ensureSkin: function() {
		this.$designLevel = this.boxParent.isSection ? "block" : "section";
		this.$skin = this.$item.$skin;
		if (!this.$skin) {
			if (this.boxParent.isSection) {
				this.$skin = this.articleParent.$defaultSkinBlock || this.page.$defaultSkinBlock || "s-h2";
			} else {
				this.$skin = this.articleParent.$defaultSkinSection || this.page.$defaultSkinSection || "s-h1";
			}
		}
	},
	ensureLayoutMode: function() {
		this.ensureSkin();
		if (this.domItem) {
			var domItemCss, bodyCss, domTitleCss, headerCss;
			var $style;
			if (this.$item.$style) {
				$style = " s-cst-sty-" + this.$item.$style;
			}
			if (this.isTabLayout) {
				if (!this.tabTitle || this.isTabTitleRemoved) {
					_addTabTitle(this);
					this.tabTitle.syraItem = this.tabTitle.syrainout = this.id;
					this.isTabTitleRemoved = null;
					if (this.btns) {
						if (this.buttonsSlot) {
							syra_site.dom.removeChild(this.buttonsSlot);
						}
						this.btns = null;
						this._applyButtonMetadata(this.$item);
					}

				}
				domItemCss = this.$skin + "-tab-box";
				bodyCss = this.$skin + "-tab-body";
				syra_site.dom.toggleClass(this.tabTitle, "s-tab-open", this.$opened);
				this.showBody(this.$opened);
				if ($style) {
					domItemCss += $style;
					bodyCss += $style;
					this.tabTitle.className += $style;
				}
			} else {
				if (this.tabTitle) {
					syra_site.dom.removeChild(this.tabTitle);
					delete this.tabTitle;
					delete this.tabTitleText;
					if (this.header) {
						this.header.style.display = "";
					}
					this.showBody(true);
					if (this.btns) {
						syra_site.dom.removeChild(this.buttonsSlot);
						this.btns = null;
						this._applyButtonMetadata(this.$item);
					}
				}
				domItemCss = this.$skin;
				headerCss = this.$skin + "-head";
				domTitleCss = this.$skin + "-title";
				bodyCss = this.$skin + "-body";
				if (this.$item.$css) {
					var $css = " " + this.$item.$css;
					domItemCss += $css;
					bodyCss += $css;
					headerCss += $css;
					domTitleCss += $css;
				}
				if (this.$item.$titleIcon) {
					if (this.$item.$titleIcon.$mode === "icon") {
						domTitleCss += " s-icon";
						headerCss += " s-icon";
					}
				}
				if ($style) {
					domItemCss += $style;
					headerCss += $style;
					domTitleCss += $style;
					bodyCss += $style;
				}
			}
			this.domItem.className = domItemCss;
			if (this.body) {
				this.body.className = bodyCss;
			}
			if (this.domTitle) {
				this.domTitle.className = domTitleCss;
			}
			if (this.header) {
				this.header.className = headerCss;
			}
			if (this.layoutParent) {
				this.layoutParent.ensureLayoutSlot(this);
			}
		}
	}
});




function SpaceBox() {}

exports.SpaceBox = helpers.defineClass(SpaceBox, Box, {
	drawBox: function() {
		this.isSpaceBox = true;
		this.$skin = "s-aw-empty";
		this.$field = {};
		this.$designLevel = "field";
		this.domItem = this.header = this.body = document.createElement("div");
		this.layoutSlot.appendChild(this.domItem);
		this.ensureLayoutMode();
		this.loaded = true;
	},
	getTitle: function() {
		return "";
	},
	setTitle: function() {},
	ensureLayoutMode: function() {
		if (this.domItem) {
			this.domItem.className = this.$skin;
			this.layoutParent && this.layoutParent.ensureLayoutSlot(this);
		}
	},
	openBox: function(open) {}
});