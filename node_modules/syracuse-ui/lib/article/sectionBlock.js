"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require("./box").Box;

var _ddTabEnter;

function _resetDDTimer() {
	if (_ddTabEnter) {
		clearTimeout(_ddTabEnter);
		_ddTabEnter = null;
	}
}

function _setTitleIcon(box) {
	var icon = document.createElement("div");
	icon.className = box.$skin + "-title-icon";
	box.domTitle.appendChild(icon);
	var $path = syra_site.$iconPath + (box.$item.$titleIcon.$path || "");
	icon.style.backgroundImage = "url('" + $path + box.$item.$titleIcon.$value + ".png')";
	box.domTitle.syrainout = box.id;
	box.domTitle.style.display = "";
	box.domTitle.syraTip = 2;
}

function _toggleCloseButton(section, show) {
	if (show) {
		if (!section.closeBtn) {
			section.closeBtn = syra_menus.button.add({
				parent: section,
				slot: section.ensureButtonsSlot(),
				text: syra_local.box_close,
				css: section.$skin + "-btn",
				iconOnly: true,
				fontIcon: "close",
				btnclick: function() {
					var section = this.parent;
					section.isMaximized && section.maximizeBtn.link.click();
					var layoutParent = section.layoutParent;
					layoutParent.removeItem(section, true);
					syra_site.ensureArticleVisibility(layoutParent.page);
				}
			});
		}
	} else {
		syra_menus.button.remove(section.closeBtn);
	}
}

function _applyDesignFieldsSettings(box, metaData) {
	if (metaData.$fieldsIsTopLabelAlignment !== undefined ||
		metaData.$fieldsIsRightTextLabelAlignment !== undefined ||
		metaData.$fieldsIsTitleHidden !== undefined ||
		metaData.$fieldsIsTitleEmpty !== undefined) {
		if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
			box.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
		}
		if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
			box.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
		}
		if (metaData.$fieldsIsTitleHidden !== undefined) {
			box.$item.$fieldsIsTitleHidden = metaData.$fieldsIsTitleHidden;
		}
		if (metaData.$fieldsIsTitleEmpty !== undefined) {
			box.$item.$fieldsIsTitleEmpty = metaData.$fieldsIsTitleEmpty;
		}
		var items = box.layoutContent.getItems();
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			var item = items[ii];
			if (item.isField) {
				box.applyDesignMetaDataToField(item, metaData);
			} else {
				if (!item.isLayout && item.layoutContent) {
					_applyDesignFieldsSettings(item, metaData);
				}
			}
		}
	}
}

var _expander = {
	_expandSiblingBoxes: function(box, layout, expand) {
		for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
			var item = layout.items[ii];
			if (item.isLayout) {
				this._expandSiblingBoxes(box, item, expand);
			} else {
				if (item.isSection && item != box) {
					this.expandBody(item, expand);
				}
			}
		}
	},
	_setExpandButtonState: function(box) {
		if (box.$item.$isBoxCollapsable) {
			var state = box.$opened ? "node_expanded" : "node_collapsed";
			//syra_menus.button.setText(box.titleBtn, syra_local["box_" + state], state);
			syra_menus.button.setText(box.titleBtn, undefined, state);
		}
	},
	expandBody: function(section, $opened, event) {
		if (!section.$isDisabled && event) {
			if (event) {
				if (event.shiftKey) {
					if (section.page.isBoxesExpanded === undefined) {
						section.page.isBoxesExpanded = true;
					}
					section.page.isBoxesExpanded = !section.page.isBoxesExpanded;
					if (section.boxParent && section.boxParent.layoutContent) {
						this._expandSiblingBoxes(section, section.boxParent.layoutContent, section.page.isBoxesExpanded);
					}
				}
			}
			section.$opened = ($opened === undefined) ? !section.$opened : $opened;
			section.page.externalAdapter.onBoxToggle({
				box: section,
				open: section.$opened,
				isFirstTime: !section.loaded || false,
				doEvent: function() {
					if (section.onOpenButtonClick) {
						section.onOpenButtonClick();
					} else {
						section.openBox(section.$opened);
						syra_site.ensureArticleVisibility(section.articleParent, true, section);
					}
				}
			});
			this._setExpandButtonState(section);
		}
	}
};

function _onOpenerClick(event) {
	var section = this.parent;
	if (!section.page.onOpenerChildBoxClick || section.page.onOpenerChildBoxClick(section)) {
		if (section.isTabSection) {
			var tabIndex = section.layoutParent.items.indexOf(section);
			var isTabSelected = section.layoutParent.getOpenedTab() == section;
			if (isTabSelected) {
				section.page.externalAdapter.onBoxClick({
					box: section,
					event: event,
					tabIdx: tabIndex
				});
			} else {
				if (!syra_dd.ddAgent) {
					var open = !section.$item.$opened;
					var isFirstTime = !section.loaded;
					section.page.externalAdapter.onBoxToggle({
						nativeEvent: event,
						nativeEvenData: section.syraOnEventData,
						box: section,
						isTabSelected: isTabSelected,
						open: open,
						isFirstTime: isFirstTime,
						tabIdx: tabIndex,
						doEvent: function() {
							!isTabSelected && section.layoutParent.openTab(section);
						}
					});
					delete section.syraOnEventData;
					return false;
				}
			}
		} else {
			if (section.$item.$isBoxCollapsable) {
				_expander.expandBody(section, undefined, event);
				if (section.page && section.page.designer) {
					section.$item.$opened = section.$opened;
					section.page.designer.endArticleUpdate(section, true);
				}
			}
		}
	}
}

function _addTitle(section, $title) {
	section.titleBtn && syra_menus.button.remove(section.titleBtn);
	var $btn = {
		parent: section,
		css: section.$skin + "-title",
		btnclick: _onOpenerClick
	};
	if (section.$item.$isBoxCollapsable) {
		$btn.fontIcon = section.$opened ? "node_expanded" : "node_collapsed";
	}
	section.titleBtn = syra_menus.button.add($btn);

	section.domTitle = section.titleBtn.link;
	section.$item.$titleIcon && _setTitleIcon(section);
	section.setTitle($title);

	section.header.insertBefore(section.titleBtn.link, section.header.firstChild);

}

function SectionBlock() {}

exports.SectionBlock = helpers.defineClass(SectionBlock, Box, {
	setState: function(state) {
		if (state.$isHidden !== undefined) {
			if (this.$isHidden !== state.$isHidden) {
				this.showItem(!(this.$isHidden = state.$isHidden));
			}
		}
	},
	applyDesignMetaData: function(metaData, designing) {
		this.setState(metaData);
		if (metaData.$isTitleHidden !== undefined) {
			this.$item.$isTitleHidden = metaData.$isTitleHidden;
			if (!this.isTabSection) {
				this.header.style.display = metaData.$isTitleHidden ? "none" : "";
			}
		}
		if (metaData.$isCloseable !== undefined) {
			_toggleCloseButton(this, this.$item.$isCloseable = metaData.$isCloseable);
		}
		if (metaData.$isMaximizable !== undefined) {
			this.toggleMaximizeButton(this.$item.$isMaximizable = metaData.$isMaximizable);
		}
		if (designing !== false) {
			if (metaData.$isBoxCollapsable !== undefined) {
				this.$item.$isBoxCollapsable = metaData.$isBoxCollapsable;
				if (this.$item.$isBoxCollapsable) {
					this.$opened = this.$item.$opened !== false;
					_addTitle(this, this.$item.$title);
				}

				if (designing && !this.$item.$isBoxCollapsable && !this.$opened) {
					_expander.expandBody(this, true);
				}
			}
			if (metaData.$title !== undefined) {
				this.setTitle(this.$item.$title = metaData.$title);
			}
			designing && _applyDesignFieldsSettings(this, metaData);

			if (metaData.$field !== undefined) {
				this.$item.$field = this.$item.$field || {};
				var $props = Object.keys(metaData.$field);
				for (var ii = 0, jj = $props.length; ii < jj; ii++) {
					var $prop = $props[ii];
					this.$item.$field[$prop] = metaData.$field[$prop];
				}
			}
		}
	},
	showItem: function(show) {
		this.isItemHidden = !show;
		syra_site.dom.display(this.domItem, show);
		syra_site.dom.display(this.header, show);
		this.layoutParent && this.layoutParent.ensureItemVisibility(this, !show);
	},
	applyDesignMetaDataToField: function(field, metaData) {
		field.applyDesignMetaData({
			$isTopLabelAlignment: metaData.$fieldsIsTopLabelAlignment,
			$isRightTextLabelAlignment: metaData.$fieldsIsRightTextLabelAlignment,
			$isTitleHidden: metaData.$fieldsIsTitleHidden,
			$isTitleEmpty: metaData.$fieldsIsTitleEmpty
		}, true);
	},
	ensureButtonsSlot: function() {
		if (!this.buttonsSlot) {
			this.buttonsSlot = document.createElement("div");
			this.buttonsSlot.className = "s-section-btns";
			this.header.appendChild(this.buttonsSlot);
		}
		return this.buttonsSlot;
	},

	toggleMaximizeButton: function(show) {
		syra_site.maximizer.toggleButton(this, true, this.ensureButtonsSlot(), this.$skin + "-btn");
	},
	loadBox: function() {
		this.page.registerSectionBlock(this);
		this.boxChildItems = [];
		this.$item.$name = this.$item.$name || this.$clientId; //used for authoring
		this.ensureDefaultTitle();
		this.domItem = document.createElement("section");
		this.drawBox();
	},
	appendHeader: function() {
		this.header = document.createElement("header");
		this.header.className = this.$skin + "-head";
		var $title = this.$item.$title;
		if (this.$item.$XID && this.page.dynamicTitles) {
			$title = this.page.dynamicTitles[this.$item.$XID] || $title;
		}
		if (this.$item.$style) {
			if (this.$item.$style == "header") {
				if ($title == "-") {
					$title = "";
					this.$item.$isTitleHidden = true;
				}
			}
			this.header.className += " s-cst-sty-" + this.$item.$style;
		}
		this.header.style.display = "none";
		this.domItem.appendChild(this.header);
		_addTitle(this, $title);
	},
	setTitle: function(title, isDynamic) {
		if (this.titleBtn) {
			if (isDynamic && this.$item.$XID) {
				//set only by convergence setDataContainer
				this.page.dynamicTitles = this.page.dynamicTitles || {};
				this.page.dynamicTitles[this.$item.$XID] = title;
			}
			if (this.isTabSection && title == null || title == "") {
				title = this.getDefaultTitle();
			}
			if (title != null && title != "") {
				this.titleText = title;
				syra_menus.button.hide(this.titleBtn, false);
				if (this.titleText == "-") {
					this.titleText = "";
				}
				if (this.titleText.indexOf("{") >= 0) {
					var parsedText = syra_site.expressionMaker.parse(this.articleParent, this.titleText);
					if (parsedText && parsedText.charAt(0) == "@") {
						this.isTitleUnlocalized = this.titleText == ("{" + parsedText + "}");
						syra_menus.button.visibility(this.titleBtn, !this.isTitleUnlocalized);
					} else {
						this.titleText = parsedText;
						if (this.isTitleUnlocalized) {
							this.isTitleUnlocalized = false;
							syra_menus.button.visibility(this.titleBtn, true);
						}
					}
				}
				syra_menus.button.setText(this.titleBtn, this.titleText);
				if (!this.isTabSection) {
					syra_site.dom.display(this.header, !(this.$isTitleHidden || this.$item.$isTitleHidden));
				}
			} else {
				syra_menus.button.hide(this.titleBtn, true);
				syra_site.dom.display(this.header, false);
			}
		}
	},
	onItemInOut: function(onEnter, event, target) {
		if (this.isTabSection && target == this.header) {
			if (this.articleParent.designer && syra_dd.ddAgent) {
				if (onEnter) {
					var self = this;
					_ddTabEnter = setTimeout(function() {
						if (!self.disposed && !self.$opened) {
							self.layoutParent.openTab(self);
						}
					}, 500);
				} else {
					_resetDDTimer();
				}
			}
		}
		this.page.diagnosePanel && this.page.diagnosePanel.onBoxItemInOut(this, onEnter);
	},
	ensureDefaultTitle: function() {
		if (!this.$item.$title) {
			if (this.layoutParent && this.layoutParent.$layout && this.layoutParent.$layout.$items.length > 1) {
				this.$item.$title = "-";
			}
		}
	},
	disable: function($isDisabled) {
		if ($isDisabled == false && this.$isDisabled === undefined) {
			this.$isDisabled = false;
		} else {
			this.$isDisabled = $isDisabled;
			syra_menus.button.disable(this.header, $isDisabled);
			syra_site.dom.toggleClass(this.body, "s-disabled", $isDisabled);
			syra_menus.button.disable(this.titleBtn, $isDisabled);
		}
	},
	ensureOpened: function() {
		!this.$opened && this.openBox(!this.$opened);
	},
	openBox: function(open, load, drawing) {
		if ((open || load) && !this.loaded) {
			this.renderLayoutContent();
			this.loaded = true;
		}
		this.$opened = open;
		if (this.isTabSection) {
			open && this.ensureLayoutMode();
			if (!drawing) {
				if (open) {
					this.$item.$opened = true;
				} else {
					delete this.$item.$opened;
				}
			}
			syra_site.dom.toggleClass(this.header, "s-tab-open", open);
		} else {
			if (this.$item.$isBoxCollapsable) {
				_expander._setExpandButtonState(this);
			}
		}
		this.showBody(open);
	},

	initializeSection: function($item) {
		this.isSection = true;
		if ($item) {
			if (!$item.$layout) {
				$item.$layout = {};
			}
			if (!$item.$layout.$items) {
				$item.$layout.$items = [];
			}
		}
	},
	ensureSkin: function() {
		this.$designLevel = this.boxParent.isSection ? "block" : "section";
		this.$skin = this.$item.$skin;
		if (!this.$skin) {
			if (this.boxParent.isSection) {
				this.$skin = this.articleParent.$defaultSkinBlock || this.page.$defaultSkinBlock || "s-h2";
			} else {
				this.$skin = this.articleParent.$defaultSkinSection || this.page.$defaultSkinSection || "s-h1";
			}
		}
	},
	ensureLayoutMode: function() {
		this.ensureSkin();
		if (this.domItem) {
			var domItemCss = this.$skin;
			var headerCss = this.$skin + "-head";
			var domTitleCss = this.$skin + "-title";
			var bodyCss = this.$skin + "-body";
			var $style;
			if (this.$item.$style) {
				$style = " s-cst-sty-" + this.$item.$style;
			}
			if (this.isTabLayout) {
				if (!this.isTabSection || this.isTabTitleRemoved) {
					//tabTitle
					this.isTabSection = true;
					this.header.syraOnClick = "onOpenerClick";
					this.header.setAttribute("href", "#");
					this.layoutParent.ensureTabsSlot();
					this.layoutParent._tabs.className = this.$skin + "-tabs-nav";
					this.layoutParent._tabs.insertBefore(this.header, this.layoutParent.tabStop || null);
					this.header.syraItem = this.header.syrainout = this.id;
					this.isTabTitleRemoved = null;
				}
				domItemCss += " s-tab-section";
				headerCss += " s-tab-head";
				domTitleCss += " s-tab-title";
				bodyCss += " s-tab-body";
				if (this.$opened) {
					headerCss += " s-tab-open";
				}
				this.showBody(this.$opened);
			} else {
				if (this.isTabSection) {
					this.isTabSection = false;
					this.body.parentNode.insertBefore(this.header, this.body);
					this.showBody(true);
				}

			}
			if (this.$item.$css) {
				var $css = " " + this.$item.$css;
				domItemCss += $css;
				bodyCss += $css;
				headerCss += $css;
				domTitleCss += $css;
			}
			if (this.$item.$titleIcon) {
				domTitleCss += " s-icon";
				headerCss += " s-icon";
			}
			if ($style) {
				domItemCss += $style;
				headerCss += $style;
				domTitleCss += $style;
				bodyCss += $style;
			}
			this.domItem.className = domItemCss;
			if (this.body) {
				this.body.className = bodyCss;
			}
			if (this.titleBtn) {
				this.titleBtn.link.className = domTitleCss;
			}
			if (this.header) {
				this.header.className = headerCss;
			}
			this.layoutParent && this.layoutParent.ensureLayoutSlot(this);
		}
	},
	dispose: function() {
		_resetDDTimer();
		this.page && this.page.unregisterSectionBlock(this);
		Box.prototype.dispose.call(this);
	}
});