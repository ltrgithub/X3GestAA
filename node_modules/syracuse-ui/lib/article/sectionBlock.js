"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require("./box").Box;

var _ddTabEnter;

function _resetDDTimer() {
	if (_ddTabEnter) {
		clearTimeout(_ddTabEnter);
		_ddTabEnter = null;
	}
}

function SectionBlock() {}

exports.SectionBlock = helpers.defineClass(SectionBlock, Box, {
	loadBox: function() {
		this.page.registerSectionBlock(this);
		this.boxChildItems = {};
		this.$item.$name = this.$item.$name || this.$clientId; //used for authoring
		this.ensureDefaultTitle();
		this.drawBox();
	},
	onItemEnterLeave: function(onEnter, event, target) {
		if (target == this.tabTitle) {
			if (this.articleParent.designer && document.site.ddManager.ddAgent) {
				if (onEnter) {
					var self = this;
					_ddTabEnter = setTimeout(function() {
						if (!self.disposed && !self.$opened) {
							self.layoutParent.openTab(self);
						}
					}, 500);
				} else {
					_resetDDTimer();
				}
			}
		}
		if (this.pickers && this.pickers.items.diagnoses) {
			document.site.diagnoseManager.onBoxItemEnterLeave(this, onEnter);
		}
	},
	ensureDefaultTitle: function() {
		if (!this.$item.$title) {
			if (this.layoutParent && this.layoutParent.$layout && this.layoutParent.$layout.$items.length > 1) {
				this.$item.$title = "-";
			}
		}
	},
	disable: function($isDisabled) {
		this.$isDisabled = $isDisabled;
		if (this.header) {
			document.site.dom.toggleClass(this.header, "s-disabled", $isDisabled);
		}
		document.site.dom.toggleClass(this.body, "s-disabled", $isDisabled);
		if (this.domTitle) {
			document.site.dom.toggleClass(this.domTitle, "s-disabled", $isDisabled);
		}
		if (this.expandPicker) {
			document.site.dom.toggleClass(this.expandPicker, "s-disabled", $isDisabled);
		}
	},
	expandBody: function($opened, event) {
		if (!this.$isDisabled && event) {
			Box.prototype.expandBody.call(this, $opened, event);
		}
	},
	ensureVisibility: function() {
		var isVisible = false;
		if (this.$item && this.$item.$isEmptyVisible) {
			isVisible = true;
		} else {
			if (this.childrenSection) {
				for (var ii = 0, jj = this.childrenSection.length; ii < jj; ii++) {
					if (this.childrenSection[ii].ensureVisibility()) {
						isVisible = true;
					}
				}
			}
			if (!isVisible && this.boxChildItems) {
				var $binds = Object.keys(this.boxChildItems);
				var $isDisabled = true;
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var child = this.boxChildItems[$binds[ii]];
					if (!child.isInvisible) {
						isVisible = true;
					}
					if (!child.$isDisabled) {
						$isDisabled = false;
					}
					if (isVisible && !$isDisabled) {
						break;
					}
				}
			}
			if (this.$isDisabled !== $isDisabled) {
				this.disable($isDisabled);
			}
		}
		if (isVisible == this.isInvisible || this.isInvisible === undefined) {
			this.isInvisible = !isVisible;
			if ((this.isInvisible !== this.$isHidden) || (!this.isInvisible && !this.$isHidden && this.isItemHidden)) {
				this.showItem(!(this.isInvisible || this.$isHidden));
			}
		}
		return isVisible;
	},
	dispose: function() {
		_resetDDTimer();
		this.disposed = true;
		this.boxChildItems = null;
		Box.prototype.dispose.call(this);
	},
	initializeSection: function($item) {
		this.localize = document.site.localize;
		this.isSection = true;
		if ($item) {
			if (!$item.$layout) {
				$item.$layout = {};
			}
			if (!$item.$layout.$items) {
				$item.$layout.$items = [];
			}
		}
	},
	ensureSkin: function() {
		this.$designLevel = this.boxParent.isSection ? "block" : "section";
		this.$skin = this.$item.$skin;
		if (!this.$skin) {
			if (this.boxParent.isSection) {
				this.$skin = this.getArticle().$defaultSkinBlock || this.page.$defaultSkinBlock || "s-h2";
			} else {
				this.$skin = this.getArticle().$defaultSkinSection || this.page.$defaultSkinSection || "s-h1";
			}
		}
	}
});