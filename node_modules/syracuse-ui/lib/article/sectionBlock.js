"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require("./box").Box;



function SectionBlock(){
}

exports.SectionBlock = helpers.defineClass(SectionBlock, Box, {
    loadBox: function(){
        this.page.registerSectionBlock(this);
        this.boxChildItems = {};
        this.$item.$name = this.$item.$name || this.$clientId; //used for authoring
        if (!this.$item.$title) {
            if (this.layoutParent && this.layoutParent.$layout && this.layoutParent.$layout.$items.length > 1) {
                this.$item.$title = "-";
            }
        }
        this.drawBox();
    },
    disable: function($isDisabled){
        this.$isDisabled = $isDisabled;
        if (this.header) {
            document.site.toggleClass(this.header, "s-disabled", $isDisabled);
        }
        document.site.toggleClass(this.body, "s-disabled", $isDisabled);
        if (this.domTitle) {
            document.site.toggleClass(this.domTitle, "s-disabled", $isDisabled);
        }
        if (this.expandPicker) {
            document.site.toggleClass(this.expandPicker, "s-disabled", $isDisabled);
        }
    },
    ensureVisibility: function(){
        var isVisible = false;
        if (this.$item.$isEmptyVisible) {
            isVisible = true;
        }
        else {
            if (this.childrenSection) {
                for (var ii = 0, jj = this.childrenSection.length; ii < jj; ii++) {
                    if (this.childrenSection[ii].ensureVisibility()) {
                        isVisible = true;
                    }
                }
            }
            if (this.isLazyLoad) {
                isVisible = true;
            }
            if (!isVisible && this.boxChildItems) {
                var $binds = Object.keys(this.boxChildItems);
                var $isDisabled = true;
                for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                    var child = this.boxChildItems[$binds[ii]];
                    if (!child.isInvisible) {
                        isVisible = true;
                    }
                    if (!child.$isDisabled) {
                        $isDisabled = false;
                    }
                    if (isVisible && !$isDisabled) {
                        break;
                    }
                }
            }
            if (this.$isDisabled !== $isDisabled) {
                this.disable($isDisabled)
            }
        }
        if (isVisible == this.isInvisible || this.isInvisible === undefined) {
            this.isInvisible = !isVisible;
            if ((this.isInvisible !== this.$isHidden) || (!this.isInvisible && !this.$isHidden && this.isItemHidden)) {
                this.hideBox(this.isInvisible || this.$isHidden);
            }
        }
        return isVisible;
    },
    dispose: function(){
        this.boxChildItems = null;
        Box.prototype.dispose.call(this);
    },
    _expandSiblingBoxes: function(layout, expand){
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            var item = layout.items[ii];
            if (item.isLayout) {
                this._expandSiblingBoxes(item, expand);
            }
            else {
                if (item.isSection && item != this) {
                    item.expandBody(expand);
                }
            }
        }
    },
    expandSiblingBoxes: function(expand){
        if (this.boxParent && this.boxParent.layoutContent) {
            this._expandSiblingBoxes(this.boxParent.layoutContent, expand);
        }
    },
    initializeSection: function($item){
        this.localize = document.site.localize;
        this.isSection = true;
        if ($item) {
            if (!$item.$layout) {
                $item.$layout = {};
            }
            if (!$item.$layout.$items) {
                $item.$layout.$items = [];
            }
        }
    },
    ensureSkin: function(){
        this.$designLevel = this.boxParent.isSection ? "block" : "section";
        this.$skin = this.$item.$skin;
        if (!this.$skin) {
            if (this.boxParent.isSection) {
                this.$skin = this.getArticle().$defaultSkinBlock || this.page.$defaultSkinBlock || "s-h2";
            }
            else {
                this.$skin = this.getArticle().$defaultSkinSection || this.page.$defaultSkinSection || "s-h1";
            }
        }
    },
    getItemSettings: function($items, fieldOnly, found){
        found = found || [];
        $items = $items || (this.$item && this.$item.$layout && this.$item.$layout.$items);
        if ($items) {
            for (var ii = 0, jj = $items.length; ii < jj; ii++) {
                var $item = $items[ii];
                if ($item.$bind) {
                    found.push($item);
                }
                else {
                    if ($item.$layout) {
                        if (fieldOnly) {
                            if ($item.$layout.$items) {
                                found = this.getItemSettings($item.$layout.$items, fieldOnly, found);
                            }
                        }
                        else {
                            found.push($item);
                        }
                    }
                    else {
                        if ($item.$items) {
                            found = this.getItemSettings($item.$items, fieldOnly, found);
                        }
                    }
                }
            }
        }
        return found;
    }
});
