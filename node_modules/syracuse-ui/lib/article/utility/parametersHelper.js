"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

function _openDialog(article, values, $parameters, record, callback){
    var localize = locale.resources(module)();
    var $itemPage;
    if (!$parameters.$url) {
        var $prototype = helpers.object.clone($parameters);
        if (values) {
            Object.keys(values).forEach(function(prop){
                $prototype[prop] = values[prop];
            });
        }
        if (article.$prototype && article.$prototype.$localization) {
            $prototype.$localization = article.$prototype.$localization;
        }
        $prototype.$title = $parameters.$title || localize.article_parameters_title;
        $itemPage = {
            $category: "page",
            $urlParts: {
                $facet: "$edit"
            },
            $representation: {
                $prototype: $prototype
            }
        };
    }
    article.openDialog({
        $dialogMode: "modal",
        $maxWidth: 600,
        article: article,
        initData: values,
        onOpened: function(dialogPage){
            if ($parameters && $parameters.$url) {
                Object.keys(values).forEach(function($prop){
                    var $defaultValue = values[$prop];
                    if (dialogPage.boundFields && dialogPage.boundFields[$prop] && dialogPage.boundFields[$prop][0]) {
                        var field = dialogPage.boundFields[$prop][0];
                        field.setDataValue($defaultValue);
                        field.notifyFieldChange(field.currentValue);
                    }
                });
            }
        },
        onValidate: function(dialogPage){
            Object.keys(dialogPage.dataset).forEach(function($prop){
                // if ($prop != "$syraLoaded") {
                values[$prop] = dialogPage.dataset[$prop];
                // }
            });
            callback(values);
        },
        onClose: function(isCanceled){
            if (isCanceled) {
                callback(null, true); //input propoerties was canceled 
            }
        },
        $itemPage: $itemPage,
        $url: $parameters.$url,
        $method: $parameters.$method || "GET"
    });
}

function _openSelectDialog(article, values, $parameters, record, callback){
    article.openDialog({
        article: article,
        $url: ($parameters.$actions.$select || $parameters.$actions.$lookup).$url,
        onValidate: function(page){
            if (page.selectedRecords) {
                values.$select = page.selectedRecords;
                callback(values);
                return;
            }
            callback(null, true); //input propoerties was canceled
        },
        onClose: function(isCanceled){
            if (isCanceled) {
                callback(null, true); //input propoerties was canceled 
            }
        },
        onSelectRecord: function(selectedRecords, page){
            page.selectedRecords = Object.keys(selectedRecords).map(function(rec){
                return selectedRecords[rec].dataset;
            });
            return false;
        }
    });
}

exports.parseParameters = function(article, $parameters, record, callback){
    var values = {};
    Object.keys($parameters).forEach(function(prop){
        switch (prop) {
            case "$properties":
            case "$":
            case "$links":
            case "$actions":
                break;
            default:
                var expression = $parameters[prop];
                if (expression && typeof(expression) == "string") {
                    expression = article.parseExpression(expression, record);
                }
                values[prop] = expression;
                break;
        }
    });
    if (callback) {
        if ($parameters.$actions) {
            _openSelectDialog(article, values, $parameters, record, callback);
            return;
        }
        if ($parameters.$properties) {
            _openDialog(article, values, $parameters, record, callback);
            return;
        }
        callback(values);
    }
    return values;
};

exports.formatCallBackMenuUrl = function(article, $menu, record, callback){
    $menu.$parameters.$title = $menu.getTitle ? $menu.getTitle() : null;
    exports.parseParameters(article, $menu.$parameters, record, function(values, isCanceled){
        if (isCanceled) {
            callback(null, isCanceled);
        }
        else {
            callback(article.parseExpression($menu.$url, record, values));
        }
    });
};

exports.notifyActionChange = function(article, menu, record, target, request){
    menu.$parameters.$title = menu.getTitle ? menu.getTitle() : null;
    exports.parseParameters(article, menu.$parameters, record, function(values, isCanceled){
        if (!isCanceled) {
            var $bindAction = request[Object.keys(request)[0]];
            $bindAction.$parameters = {};
            delete values.$title;
            Object.keys(values).forEach(function(prop){
                $bindAction.$parameters[prop] = values[prop];
            });
            article.page.notifyActionChange(target, request);
        }
    });
};
