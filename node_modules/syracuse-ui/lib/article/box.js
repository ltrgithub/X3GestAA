"use strict";
var helpers = require('syracuse-core/lib/helpers');

function Box(){
}

exports.Box = helpers.defineClass(Box, null, {
    getDefaultTitle: function(){
        return this.localize["box_" + this.$designLevel + "Title"];
    },
    applyDesignMetaDataToField: function(field, metaData){
        field.applyDesignMetaData({
            $isTopLabelAlignment: metaData.$fieldsIsTopLabelAlignment,
            $isRightTextLabelAlignment: metaData.$fieldsIsRightTextLabelAlignment,
            $isTitleHidden: metaData.$fieldsIsTitleHidden
        }, true);
    },
    applyDesignMetaData: function(metaData, designing){
        this.setState(metaData);
        if (metaData.$isTitleHidden !== undefined) {
            this.$item.$isTitleHidden = metaData.$isTitleHidden;
            if (!this.tabTitle) {
                this.header.style.display = metaData.$isTitleHidden ? "none" : "";
            }
        }
        this.applyPickerMetadata(metaData, designing);
        if (designing !== false) {
            if (metaData.$title !== undefined) {
                this.setTitle(this.$item.$title = metaData.$title);
            }
            if (designing) {
                this.applyDesignFieldsSettings(metaData);
            }
            if (metaData.$field !== undefined) {
                this.$item.$field = this.$item.$field || {};
                var $props = Object.keys(metaData.$field);
                for (var ii = 0, jj = $props.length; ii < jj; ii++) {
                    var $prop = $props[ii];
                    this.$item.$field[$prop] = metaData.$field[$prop];
                }
            }
        }
    },
    applyPickerMetadata: function(metaData, designing){
        if (metaData.$isBoxCollapsable !== undefined) {
            this.$item.$isBoxCollapsable = metaData.$isBoxCollapsable;
            this._toggleExpandPicker(designing);
        }
        if (metaData.$isCloseable !== undefined) {
            this.togglePicker("close", this.$item.$isCloseable = metaData.$isCloseable);
        }
        if (metaData.$isRefreshable !== undefined) {
            this.togglePicker("refresh", this.$item.$isRefreshable = metaData.$isRefreshable);
        }
        if (metaData.$isMaximizable !== undefined) {
            this.togglePicker("maximize", this.$item.$isMaximizable = metaData.$isMaximizable);
        }
        if (metaData.$hasMenus !== undefined) {
            this.togglePicker("menus", metaData.$hasMenus);
        }
        this._ensurePickersVisibiliy();
    },
    _toggleExpandPicker: function(designing){
        if (this.$item.$isBoxCollapsable && !this.$item.$isTitlePicker) {
            if (!this.expandPicker) {
                this.expandPicker = document.createElement("a");
                this.expandPicker.setAttribute("href", "#");
                this.expandPicker.setAttribute("data-s-box", this.id);
                this.expandPicker.syraIsDesignEnable = true;
                this.expandPicker.syraBoxId = this.id;
                this.expandPicker.syraBoxPickerId = "expand";
                this.expandPicker.className = this.$skin + "-expand";
                this.expandPicker.title = this.localize.box_collapse;
                if (this.$item.$css) {
                    this.expandPicker.className += " " + this.$item.$css;
                }
                this.header.insertBefore(this.expandPicker, this.header.firstChild);
            }
            this.$opened = this.$item.$opened !== false;
            this.expandPicker.title = this.$opened ? this.localize.box_collapse : this.localize.box_expand;
            document.site.toggleClass(this.expandPicker, "s-close", !this.$opened);
        }
        else {
            if (this.expandPicker) {
                document.site.removeDomChild(this.expandPicker);
                this.expandPicker = null;
            }
        }
        if (designing) {
            if (!this.$item.$isBoxCollapsable && !this.$opened) {
                this.expandBody(true);
            }
        }
    },
    toggleTabSiblings: function(show){
        var tab = this.tabTitle;
        var node = tab.parentNode.firstChild;
        while (node) {
            if (node != tab) {
                node.style.display = show ? "" : "none";
            }
            node = node.nextSibling;
        }
    },
    applyDesignFieldsSettings: function(metaData){
        if (metaData.$fieldsIsTopLabelAlignment !== undefined ||
        metaData.$fieldsIsRightTextLabelAlignment !== undefined ||
        metaData.$fieldsIsTitleHidden !== undefined) {
            if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
                this.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
            }
            if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
                this.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
            }
            if (metaData.$fieldsIsTitleHidden !== undefined) {
                this.$item.$fieldsIsTitleHidden = metaData.$fieldsIsTitleHidden;
            }
            var items = this.layoutContent.getItems();
            for (var ii = 0, jj = items.length; ii < jj; ii++) {
                var item = items[ii];
                if (item.isField) {
                    this.applyDesignMetaDataToField(item, metaData);
                }
                else {
                    if (!item.isLayout && item.layoutContent) {
                        item.applyDesignFieldsSettings(metaData);
                    }
                }
            }
        }
    },
    showAdvancedFields: function(show){
        this.$isAdvancedFieldsVisible = show;
        var advancedPicker;
        if (this.onShowAdvancedFields) {
            this.onShowAdvancedFields();
        }
        else {
            if (this.pickers && this.pickers.items) {
                var advancedPicker = this.pickers.items.advanced;
                if (advancedPicker) {
                    advancedPicker.title = (this.$isAdvancedFieldsVisible) ? this.localize.box_advanced_hide : this.localize.box_advanced_hide;
                    document.site.toggleClass(advancedPicker, "s-hide-advanced", this.$isAdvancedFieldsVisible);
                }
                
            }
        }
        if (this.layoutContent) {
            var children = this.layoutContent.getItems();
            for (var ii = 0, jj = children.length; ii < jj; ii++) {
                var child = children[ii];
                if (child.isSection || child.vignette) {
                    child.showAdvancedFields(this.$isAdvancedFieldsVisible);
                }
                else {
                    if (child.showAdvancedState && child.$item.$isAdvanced) {
                        child.showAdvancedState(true);
                    }
                }
            }
        }
    },
    toggleAdvancedFieldsMode: function(enable, designing){
        if (enable) {
            if (this.$isAdvancedModeEnabled) {
                return;
            }
        }
        else {
            var children = this.layoutContent.getItems();
            for (var ii = 0, jj = children.length; ii < jj; ii++) {
                var field = children[ii];
                if (field.$item.$isAdvanced) {
                    return;
                }
            }
        }
        this.$isAdvancedModeEnabled = enable;
        this.togglePicker("advanced", enable);
        if (this.pickers && this.pickers.items) {
            var advancedPicker = this.pickers.items.advanced;
            if (advancedPicker) {
                if (advancedPicker.parentNode.firstChild != advancedPicker) {
                    advancedPicker.parentNode.insertBefore(advancedPicker, advancedPicker.parentNode.firstChild);
                }
            }
        }
        if (this.boxParent) {
            this.boxParent.toggleAdvancedFieldsMode(enable, designing);
        }
    },
    _ensurePickersVisibiliy: function(){
        if (this.pickers && this.pickers.items) {
            var display = this.$opened ? "" : "none";
            if (this.pickers.items.maximize) {
                this.pickers.items.maximize.style.display = display;
            }
            if (this.pickers.items.refresh) {
                this.pickers.items.refresh.style.display = display;
            }
        }
    },
    getArticle: function(){
        return this.boxParent ? this.boxParent.getArticle() : null;
    },
    loadBox: function(){
        if (!this.localize) {
            this.localize = document.site.localize;
        }
        this.drawBox();
    },
    getTitle: function(applyDefault){
        var title = (this._textTitle && this._textTitle.textContent) || this.$item.$title || "";
        if ((title == "" || title == "-") && applyDefault !== false) {
            title = this.getDefaultTitle();
        }
        return title;
    },
    setTitle: function(title){
        if (this.domTitle) {
            if (title != null && title != "") {
                var displayTitle = title;
                this.domTitle.style.display = "";
                if (displayTitle == "-") {
                    displayTitle = "";
                }
                if (displayTitle.indexOf("{") < 0) {
                    this._textTitle.textContent = (this.$item.$noText) ? "" : displayTitle;
                    if (this.tabTitle) {
                        this.tabTitleText.textContent = displayTitle;
                        this.tabTitle.title = displayTitle;
                        if (this.isTitleUnlocalized !== undefined) {
                            this.tabTitleText.style.visibility = this.isTitleUnlocalized ? "hidden" : "";
                        }
                    }
                    this.domTitle.title = displayTitle;
                }
                else {
                    this._textTitle.textContent = "";
                    var parsedText = this.renderExpression(displayTitle, this._textTitle, this.$skin + "-title-field", false);
                    if (parsedText && parsedText.charAt(0) == "@") {
                        this.isTitleUnlocalized = displayTitle == ("{" + parsedText + "}");
                        this.domTitle.style.visibility = this.isTitleUnlocalized ? "hidden" : "";
                    }
                    else {
                        if (this.isTitleUnlocalized) {
                            this.isTitleUnlocalized = false;
                            this.domTitle.style.visibility = "";
                        }
                    }
                }
            }
            else {
                this.domTitle.style.display = "none";
                if (this.tabTitle) {
                    this.tabTitleText.textContent = title = this.getDefaultTitle();
                    this.tabTitle.title = title;
                }
            }
            if (!this.tabTitle) {
                this.header.style.display = (title != null && title != "") && !this.$item.$isTitleHidden ? "" : "none";
            }
        }
    },
    _setTitleIcon: function(){
        this._iconTitle = document.createElement("div");
        this._iconTitle.className = this.$skin + "-title-icon";
        this.domTitle.appendChild(this._iconTitle);
        if (this.$item.$titleIcon.$cssName) {
            this._iconTitle.className += " " + this.$item.$titleIcon.$cssValue;
        }
        else {
            var $path = document.site.$item.$iconPath + (this.$item.$titleIcon.$path || "");
            this._iconTitle.style.backgroundImage = "url('" + $path + this.$item.$titleIcon.$value + ".png')";
        }
        this._textTitle = document.createElement("div");
        this._textTitle.className = this.$skin + "-title-text s-icon";
        this.domTitle.appendChild(this._textTitle);
    },
    _createBoxTitle: function(){
        this._textTitle = this.domTitle = this.domTitle || document.createElement("a");
        this.domTitle.style.display = "none";
        this.domTitle.className = this.$skin + "-title";
        this.domTitle.setAttribute("data-s-box", this.id);
        if (this.$item.$titleIcon) {
            this._setTitleIcon();
            if (this.$item.$titleIcon.$mode === "icon") {
                this.domTitle.style.display = "";
                this._textTitle.style.display = "none";
            }
        }
        return this.domTitle;
    },
    setDescription: function($description){
        if ($description != null && this.header) {
            if (!this.domDescription) {
                this.domDescription = document.createElement("div");
                this.domDescription.className = this.$skin + "-description";
                this.header.appendChild(this.domDescription);
            }
            if ($description.indexOf("{") < 0) {
                this.domDescription.textContent = $description;
                if (this.tabTitle) {
                    this.tabTitle.title = $description;
                }
            }
            else {
                this.renderExpression($description, this.domDescription, this.$skin + "-description-field", false);
            }
        }
    },
    ensureSkin: function(){
        this.$skin = this.$skin || this.$item.$skin;
    },
    drawBox: function(){
        this.ensureSkin();
        this.domItem = document.createElement("div");
        this.$$item = $(this.domItem);
        
        if (this.$item.$expression) {
            if (this.$item.$css) {
                this.domItem.className = this.$item.$css;
            }
            this.layoutSlot.appendChild(this.domItem);
            this.$isEditMode = this.getArticle().$isEditMode;
            this.renderExpression(this.$item.$expression, this.domItem);
        }
        else {
            this.$$body = $(this.body = document.createElement("div"));
            this.body.style.display = "none";
            this.appendHeader();
            if (this.$item.$isPopupContent) {
                if (this.$item.$opened === undefined) {
                    this.$item.$opened = false;
                }
            }
            if (this.isTabLayout) {
                delete this.$item.$opened;
            }
            this.ensureLayoutMode();
            if (this.$item.$width) {
                this.domItem.style.width = this.$item.$width;
            }
            if (!this.$item.$isPopupContent) {
                this.domItem.appendChild(this.body);
            }
            if (this.layoutSlot) {
                this.layoutSlot.appendChild(this.domItem);
            }
            this.setDescription(this.$item.$description);
            
            this.applyDesignMetaData(this.$item, false);
            if (this.page.isDashBoard) {
                this.openBox(this.$item.$opened !== false, true, true);
            }
            else {
                this.openBox(!this.tabTitle && this.$item.$opened !== false, true, true);
            }
        }
    },
    appendHeader: function(){
        this.header = document.createElement("header");
        this.header.className = this.$skin + "-head";
        var $title = this.$item.$title;
        if (this.$item.$style) {
            if (this.$item.$style == "header") {
                if ($title == "-") {
                    $title = "";
                    this.$item.$isTitleHidden = true;
                }
            }
            this.header.className += " s-cst-sty-" + this.$item.$style;
        }
        this.header.style.display = "none";
        this.header.appendChild(this._createBoxTitle());
        this.domItem.appendChild(this.header);
        
        if (this.$field && (!$title || $title == "-")) {
            $title = this.$field.$title;
        }
        this.setTitle($title);
    },
    togglePicker: function(pickerId, show){
        var slotParent = this.tabTitleHead ? this.tabTitleHead : this.header;
        if (show) {
            if (!this.pickers) {
                this.pickers = {
                    items: {},
                    slot: document.createElement("div"),
                    width: 0
                };
                this.pickers.slot.setAttribute("data-s-box", this.id);
                this.pickers.slot.className = this.$skin + ((this.tabTitleHead) ? "-tab-pickers" : "-pickers");
                slotParent.appendChild(this.pickers.slot);
            }
            if (!this.pickers.items[pickerId]) {
                var picker = this.pickers.items[pickerId] = document.createElement("a");
                picker.className = this.$skin + "-" + pickerId;
                picker.setAttribute("data-s-picker", "box-picker");
                picker.syraBoxId = this.id;
                picker.syraBoxPickerId = pickerId;
                picker.title = this.localize["box_" + pickerId];
                this.pickers.width += 18;
                this.pickers.slot.style.width = this.pickers.width + "px";
                this.pickers.slot.appendChild(picker);
            }
        }
        else {
            if (this.pickers && this.pickers.items[pickerId]) {
                document.site.removeDomChild(this.pickers.items[pickerId]);
                delete this.pickers.items[pickerId];
                this.pickers.width = Math.max(0, this.pickers.width - 18);
                this.pickers.slot.style.width = this.pickers.width + "px";
            }
        }
    },
    doPicker: function(pickerId){
        switch (pickerId) {
            case "maximize":
                if (!this.$$memBody) {
                    this.$$memBody = $(document.createElement("div"));
                }
                this.$$memBody.empty().append(this.page.$$body.children());
                if (this.tabTitle) {
                    this.page.body.appendChild(this.layoutParent._tabs);
                    this.toggleTabSiblings(false);
                    if (!this.$item.$opened) {
                        this.openBox(true);
                    }
                }
                this.page.body.appendChild(this.domItem);
                this._$isMaximized = true;
                this.pickers.items.maximize.title = this.localize.box_minimize;
                this.pickers.items.maximize.className = this.$skin + "-maximize s-minimize";
                this.pickers.items.maximize.setAttribute("data-s-picker", "box-picker");
                this.pickers.items.maximize.syraBoxId = this.id;
                this.pickers.items.maximize.syraBoxPickerId = "minimize";
                break;
            case "minimize":
                if (this.tabTitle) {
                    if (this.layoutParent.domItem.firstChild) {
                        this.layoutParent.domItem.firstChild.parentNode.insertBefore(this.layoutParent._tabs, this.layoutParent.domItem.firstChild);
                    }
                    else {
                        this.layoutParent.domItem.appendChild(this.layoutParent._tabs);
                    }
                    this.toggleTabSiblings(true);
                }
                this.layoutSlot.appendChild(this.domItem);
                this.page.$$body.append(this.$$memBody.children());
                this.$$memBody.remove();
                delete this.$$memBody;
                this._$isMaximized = false;
                this.pickers.items.maximize.title = this.localize.box_maximize;
                this.pickers.items.maximize.className = this.$skin + "-maximize";
                this.pickers.items.maximize.setAttribute("data-s-picker", "box-picker");
                this.pickers.items.maximize.syraBoxId = this.id;
                this.pickers.items.maximize.syraBoxPickerId = "maximize";
                break;
            case "advanced":
                this.showAdvancedFields(!this.$isAdvancedFieldsVisible);
                break;
            case "close":
                if (this._$isMaximized) {
                    this.doPicker("minimize");
                }
                var layoutParent = this.layoutParent;
                layoutParent.removeItem(this, true);
                if (layoutParent._tabs) {
                    layoutParent.page.layoutValidator.validatetabs(layoutParent);
                }
                break;
        }
    },
    doOpenPicker: function($$ofPosition){
        var self = this;
        self.openBox(self.$opened);
        if (self.$item.$isPopupContent) {
            if (!self._popupMenus) {
                self._popupMenus = self.openDialog({
                    $dialogMode: "popup",
                    content: self,
                    $$dialog: self.$$body,
                    position: {
                        my: "right top",
                        at: "right bottom",
                        of: $$ofPosition || $(self.titleMenu ? self.header : self.domTitle)
                    },
                    onClose: function(){
                        if (self.domTitle) {
                            document.site.toggleClass(self.domTitle, "s-close", true);
                        }
                        self.$opened = false;
                        self._popupMenus = null;
                    }
                });
            }
            else {
                self._popupMenus.close();
            }
        }
    },
    expandBody: function($opened, event){
        var self = this;
        if (event) {
            if (event.shiftKey) {
                if (self.page.isBoxesExpanded === undefined) {
                    self.page.isBoxesExpanded = true;
                }
                self.expandSiblingBoxes(self.page.isBoxesExpanded = !self.page.isBoxesExpanded);
            }
        }
        self.$opened = ($opened === undefined) ? !self.$opened : $opened;
        var isFirstTime = !self.loaded || false;
        if (self.menuGroupRoot && self.menuGroupRoot.contextField) {
            if (!self.menuGroupRoot.contextField.$isDisabled) {
                self.menuGroupRoot.contextField.page.externalAdapter.onFieldClickPicker({
                    field: self.menuGroupRoot.contextField,
                    pickerType: "menus",
                    doEvent: function(){
                        self.doOpenPicker();
                    }
                });
            }
        }
        else {
            self.page.externalAdapter.onBoxToggle({
                box: self,
                open: self.$opened,
                isFirstTime: isFirstTime,
                doEvent: function(){
                    self.doOpenPicker();
                    if (!self.$item.$isPopupContent) {
                        document.site.resize(true);
                    }
                }
            });
        }
        if (self.expandPicker) {
            self.expandPicker.title = self.$opened ? self.localize.box_collapse : self.localize.box_expand;
            document.site.toggleClass(self.expandPicker, "s-close", !self.$opened);
        }
        self._ensurePickersVisibiliy();        
    },
    renderLayoutContent: function(){
        this.layoutContent = this.page.createNewItem(this.$item.$layout, this);
        this.layoutContent.layoutSlot = this.$$body[0];
        this.layoutContent.loadBox();
    },
    renderExpression: function(expression, layoutSlot, $fieldCss, $isEditMode){
        if (expression[1] == "@") {
            var text = this.getArticle().parseExpression(expression);
            if (layoutSlot) { //!important used by expression
                layoutSlot.textContent = text;
            }
            return text;
        }
        else {
            var article = this.getArticle();
            var html = expression;
            var matches = expression.match(/(\{.*?\})/g);
            for (var ii = 0, jj = matches.length; ii < jj; ii++) {
                var match = matches[ii];
                html = html.replace(match, "<div data-s-match='" + ii + "'>" + match + "</div>");
                matches[ii] = {
                    expression: match,
                    property: match.substr(1, match.length - 2)
                };
            }
            layoutSlot.innerHTML = html;
            var divs = layoutSlot.querySelectorAll("div");
            for (var ii = 0, jj = divs.length; ii < jj; ii++) {
                var domMatch = divs[ii];
                var match = matches[parseInt(domMatch.getAttribute("data-s-match"), 10)];
                if (match.property.charAt(0) == "$") {
                    var value = article.matchProperty(match.expression, match.property, article.dataset).value;
                    if (value != null) {
                        if (value.indexOf && value.indexOf("{") >= 0) {
                            document.site.emptyDom(domMatch);
                            this.renderExpression(value, domMatch, $fieldCss, $isEditMode);
                        }
                        else {
                            domMatch.textContent = value;
                        }
                    }
                }
                else {
                    document.site.emptyDom(domMatch);
                    this.page.loadNewItem(domMatch, {
                        $isMenusDisabled: true,
                        $isDetailLinkDisabled: true,
                        $isMenusHidden: true,
                        $isExpressionChild: true,
                        $bind: match.property,
                        $inplace: true,
                        $isEditMode: $isEditMode === undefined ? this.$isEditMode : $isEditMode,
                        $css: "s-expression " + $fieldCss,
                        $skin: "s-inplace"
                    }, article);
                }
            }
        }
    },
    openBox: function(open, load, drawing){
        if ((open || load) && !this.loaded) {
            this.renderLayoutContent();
            this.loaded = true;
        }
        this.$opened = open;
        if (this.tabTitle) {
            if (open) {
                this.ensureLayoutMode();
                if (this.layoutParent.tabOpened) {
                    this.layoutParent.tabOpened.openBox(false, false, drawing);
                }
                this.layoutParent.tabOpened = this;
            }
            if (!drawing) {
                if (open) {
                    this.$item.$opened = true;
                }
                else {
                    delete this.$item.$opened;
                }
            }
            document.site.toggleClass(this.tabTitle, "s-tab-open", open);
            this.layoutSlot.style.display = open ? "" : "none";
            this.domItem.style.display = open ? "" : "none";
        }
        if (this.$item.$isBoxCollapsable) {
            if (this.expandPicker) {
                document.site.toggleClass(this.expandPicker, "s-close", !open);
            }
            document.site.toggleClass(this.domTitle, "s-close", !open);
        }
        this.body.style.display = open ? "" : "none";
        if (this.$item.onOpen) {
            this.$item.onOpen(this);
        }
        this._ensurePickersVisibiliy();
    },
    appendTabTitle: function(){
        this.tabTitle = document.createElement("a");
        if (this.isSection) {
            this.tabTitle.setAttribute("href", "#");
        }
        this.tabTitle.className = this.$skin + "-tab";
        this.tabTitle.setAttribute("data-s-box", this.id);
        this.tabTitleHead = document.createElement("div");
        this.tabTitleHead.className = this.$skin + "-tab-head";
        this.tabTitleText = document.createElement("div");
        this.tabTitleText.className = this.$skin + "-tab-text";
        this.tabTitleHead.appendChild(this.tabTitleText);
        this.tabTitle.appendChild(this.tabTitleHead);
        this.setTitle(this.getTitle());
        this.layoutParent.appendTab(this);
        this.header.style.display = "none";
    },
    onBoxLayoutChange: function(){
        if (this.pickers) {
            document.site.removeDomChild(this.pickers);
            this.pickers = null;
            this.applyPickerMetadata(this.$item);
        }
    },
    ensureLayoutMode: function(){
        this.ensureSkin();
        if (this.domItem) {
            var $style;
            if (this.$item.$style) {
                $style = " s-cst-sty-" + this.$item.$style;
            }
            if (this.isTabLayout) {
                if (!this.tabTitle || this.isTabTitleRemoved) {
                    this.appendTabTitle();
                    this.isTabTitleRemoved = null;
                    this.onBoxLayoutChange();
                    
                }
                this.domItem.className = this.$skin + "-tab-box";
                this.body.className = this.$skin + "-tab-body";
                if (this.$item.$opened) {
                    document.site.toggleClass(this.tabTitle, "s-tab-open", true);
                    //this.body.style.display = "none";	
                }
                else {
                    document.site.toggleClass(this.tabTitle, "s-tab-open", false);
                    this.body.style.display = "none";
                }
                if ($style) {
                    this.domItem.className += $style;
                    this.body.className += $style;
                    this.tabTitle.className += $style;
                }
            }
            else {
                if (this.tabTitle) {
                    document.site.removeDomChild(this.tabTitle);
                    delete this.tabTitle;
                    delete this.tabTitleHead;
                    delete this.tabTitleText;
                    if (this.header) {
                        this.header.style.display = "";
                    }
                    this.domItem.style.display = "";
                    this.body.style.display = "";
                    this.layoutSlot.style.display = "";
                    this.onBoxLayoutChange();
                }
                this.domItem.className = this.$skin;
                if (this.header) {
                    this.header.className = this.$skin + "-head";
                }
                if (this.domTitle) {
                    this.domTitle.className = this.$skin + "-title";
                }
                this.body.className = this.$skin + "-body";
                if (this.$item.$css) {
                    var $css = " " + this.$item.$css;
                    this.domItem.className += $css;
                    this.body.className += $css;
                    if (this.header) {
                        this.header.className += $css;
                    }
                    if (this.domTitle) {
                        this.domTitle.className += $css;
                    }
                    
                }
                if (this.$item.$isPopupContent) {
                    if (this.header) {
                        this.header.className += " s-popup";
                    }
                    this.body.className += " s-popup";
                    if (this.domTitle) {
                        this.domTitle.className += " s-popup";
                    }
                    if (this.expandPicker) {
                        this.expandPicker.className += " s-popup";
                    }
                }
                if (this.$item.$titleIcon) {
                    if (this.$item.$titleIcon.$mode === "icon") {
                        this.domTitle.className += " s-icon";
                        if (this.header) {
                            this.header.className += " s-icon";
                        }
                    }
                }
                if ($style) {
                    this.domItem.className += $style;
                    if (this.header) {
                        this.header.className += $style;
                    }
                    this.domTitle.className += $style;
                    this.body.className += $style;
                }
            }
            if (this.layoutParent) {
                this.layoutParent.ensureLayoutSlot(this);
            }
            if (this.$item.$slotStyle && this.layoutSlot) {
                this.layoutSlot.className += " " + this.$item.$slotStyle;
            }
        }
    },
    hideBox: function(isHidden){
        this.isItemHidden = isHidden;
        var display = isHidden ? "none" : "";
        if (this.domItem) {
            this.domItem.style.display = display;
        }
        if (this.tabTitle) {
            this.tabTitle.style.display = display;
        }
        display = (!(this.layoutParent && this.layoutParent.isRow) && isHidden) ? "none" : "";
        if (this.layoutSlot && !this.$item.$isPopupContent) {
            //test $isPopupContent important for reference field
            this.layoutSlot.style.display = display;
        }
        if (this.rowSeparator) {
            this.rowSeparator.style.display = display;
        }
        this.articleParent.onBoxToggled(this, isHidden);
    },
    setState: function(state){
        if (state.$isHidden !== undefined) {
            var updated;
            if (this.$isHidden !== state.$isHidden) {
                updated = true;
                this.hideBox(this.$isHidden = state.$isHidden);
                if (updated) {
                    if (this.page && this.page.designer) {
                        this.page.designer.showHiddenItem(this, this.$isHidden);
                    }
                }
            }
        }
    },
    openDialog: function(options){
        options.boxParent = this;
        options.openerPage = this.page;
        var dialog = document.site.openDialog(options);
        if (!this._dialogs) {
            this._dialogs = [];
        }
        this._dialogs.push(dialog);
        return dialog;
    },
    closeDialog: function(dialog){
        if (this._dialogs) {
            for (var ii = 0, jj = this._dialogs.length; ii < jj; ii++) {
                if (this._dialogs[ii] == dialog) {
                    this._dialogs.splice(ii, 1);
                    break;
                }
            }
        }
    },
    closeDialogs: function(dispose){
        if (this._dialogs) {
            for (var ii = 0, jj = this._dialogs.length; ii < jj; ii++) {
                if (this._dialogs[ii] && !this._dialogs[ii].$hasCallback) {
                    this._dialogs[ii].close(undefined, dispose);
                    this._dialogs[ii] = null;
                }
            }
            this._dialogs = null;
        }
    },
    dispose: function(){
        this.closeDialogs();
        this.childrenSection = null;
        if (this.layoutContent) {
            this.layoutContent.dispose();
        }
        this.expandPicker = this.pickers = this.$item = this.layoutSlot = this.layoutContent = null;
        this.titleMenu = this.localize = this.domItem = this.$$item = this.body = this.$$body = this.header = null;
        this.tabTitleHead = this.tabTitleText = this.tabTitle = this.domTitle = this.domDescription = this._textTitle = this._iconTitle = null;
        this.rowSeparator = this.severitiesCount = this.diagnosesFields = this.$skin = this.id = null;
        this.childrenSection = this.layoutParent = this.boxParent = this.articleParent = this.page = this.dataStore = null;
        this.isDisposed = true;
    }
});
