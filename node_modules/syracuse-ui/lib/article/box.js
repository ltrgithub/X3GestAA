"use strict";
var helpers = require('syracuse-core/lib/helpers');

function Box() {}

exports.Box = helpers.defineClass(Box, null, {
	getDefaultTitle: function() {
		return syra_local["box_" + this.$designLevel + "Title"];
	},
	getArticle: function() {
		return this.boxParent ? this.boxParent.getArticle() : null;
	},
	loadBox: function() {
		this.drawBox();
	},
	getTitle: function(applyDefault) {
		var title = (this.domTitle && this.domTitle.textContent) || (this.$item && this.$item.$title) || "";
		if ((title == "" || title == "-") && applyDefault !== false) {
			title = this.getDefaultTitle();
		}
		return title;
	},
	isChild: function(item) {
		var boxParent = item.boxParent;
		while (boxParent && boxParent != this) {
			boxParent = boxParent.boxParent;
		}
		return boxParent == this;
	},
	setTitle: function(title, isDynamic) {
		if (this.domTitle) {
			if (isDynamic && this.$item.$XID) {
				//set only by convergence setDataContainer
				this.page.dynamicTitles = this.page.dynamicTitles || {};
				this.page.dynamicTitles[this.$item.$XID] = title;
			}
			if (title != null && title != "") {
				this.titleText = title;
				this.domTitle.style.display = "";
				if (this.titleText == "-") {
					this.titleText = "";
				}
				if (this.titleText.indexOf("{") < 0) {
					this.domTitle.textContent = this.titleText;
					if (!this.domTitle.syrainout) {
						this.domTitle.title = this.titleText;
					}
				} else {
					this.domTitle.textContent = "";
					var parsedText = syra_site.expressionMaker.render(this, this.titleText, this.domTitle, this.$skin + "-title-field", false);
					if (parsedText && parsedText.charAt(0) == "@") {
						this.isTitleUnlocalized = this.titleText == ("{" + parsedText + "}");
						this.domTitle.style.visibility = this.isTitleUnlocalized ? "hidden" : "";
					} else {
						this.titleText = parsedText;
						if (this.isTitleUnlocalized) {
							this.isTitleUnlocalized = false;
							this.domTitle.style.visibility = "";
						}
					}
				}
				this.header.style.display = !(this.$isTitleHidden || this.$item.$isTitleHidden) ? "" : "none";
			} else {
				this.domTitle.style.display = "none";
				this.header.style.display = "none";
			}
		}
	},

	_createBoxTitle: function() {
		this.domTitle = this.domTitle || document.createElement("div");
		this.domTitle.style.display = "none";
		this.domTitle.className = this.$skin + "-title";
		this.domTitle.syraItem = this.id;
		return this.domTitle;
	},
	setDescription: function($description) {
		if ($description != null && this.header) {
			if (!this.domDescription) {
				this.domDescription = document.createElement("div");
				this.domDescription.className = this.$skin + "-description";
				this.header.appendChild(this.domDescription);
			}
			if ($description.indexOf("{") < 0) {
				this.domDescription.textContent = $description;
				if (this.isTabSection) {
					this.domTitle.title = $description;
				}
			} else {
				syra_site.expressionMaker.render(this, $description, this.domDescription, this.$skin + "-description-field", false);
			}
		}
	},
	ensureSkin: function() {
		this.$skin = this.$skin || this.$item.$skin;
	},
	drawBox: function() {
		this.ensureSkin();
		this.domItem = this.domItem || document.createElement("div");

		if (this.$item.$expression) {
			if (this.$item.$css) {
				this.domItem.className = this.$item.$css;
			}
			this.layoutSlot.appendChild(this.domItem);
			this.$isEditMode = this.articleParent.$isEditMode;
			syra_site.expressionMaker.render(this, this.$item.$expression, this.domItem);
		} else {
			this.body = document.createElement("div");
			this.showBody(false);
			this.appendHeader();

			if (this.isTabLayout) {
				delete this.$item.$opened;
			}
			this.ensureLayoutMode();
			if (this.$item.$width) {
				this.domItem.style.width = this.$item.$width;
			}
			if (!this.$item.$isPopupContent) {
				this.domItem.appendChild(this.body);
			}
			if (this.layoutSlot) {
				this.layoutSlot.appendChild(this.domItem);
			}
			this.setDescription(this.$item.$description);

			this.applyDesignMetaData && this.applyDesignMetaData(this.$item, false);
			this.openBox(!this.isTabSection && this.$item.$opened !== false, true, true);
		}
	},
	appendHeader: function() {
		this.header = document.createElement("header");
		this.header.className = this.$skin + "-head";
		var $title = this.$item.$title;
		if (this.$item.$XID && this.page.dynamicTitles) {
			$title = this.page.dynamicTitles[this.$item.$XID] || $title;
		}
		if (this.$item.$style) {
			if (this.$item.$style == "header") {
				if ($title == "-") {
					$title = "";
					this.$item.$isTitleHidden = true;
				}
			}
			this.header.className += " s-cst-sty-" + this.$item.$style;
		}
		this.header.style.display = "none";
		this.header.appendChild(this._createBoxTitle());
		this.domItem.appendChild(this.header);

		if (this.$field && (!$title || $title == "-")) {
			$title = this.$field.$title;
		}
		this.setTitle($title);
	},
	renderLayoutContent: function() {
		this.layoutContent = this.page.createNewItem(this.$item.$layout, this);
		this.layoutContent.layoutSlot = this.body;
		this.layoutContent.loadBox();
	},
	openBox: function(open, load, drawing) {
		if ((open || load) && !this.loaded) {
			this.renderLayoutContent();
			this.loaded = true;
		}
		this.$opened = open;
		this.showBody(open);
	},
	showBody: function(show) {
		if (!(show && this.isBodyShow == undefined)) {
			this.isBodyShow = show;
			this.body.style.visibility = show ? "" : "hidden";
			this.body.style.height = show ? "" : "0px";
			this.body.style.width = show ? "" : "0px";
			this.body.style.borderWidth = show ? "" : "0";
			this.body.style.padding = show ? "" : "0";
			this.body.style.overflow = show ? "" : "hidden";
		}
		this.isBodyShow = show;
	},
	ensureLayoutMode: function() {
		this.ensureSkin();
		if (this.domItem) {
			var domItemCss = this.$skin;
			var headerCss = this.$skin + "-head";
			var domTitleCss = this.$skin + "-title";
			var bodyCss = this.$skin + "-body";
			if (this.$item.$css) {
				var $css = " " + this.$item.$css;
				domItemCss += $css;
				bodyCss += $css;
				headerCss += $css;
				domTitleCss += $css;
			}
			if (this.$item.$style) {
				var $style = " s-cst-sty-" + this.$item.$style;
				domItemCss += $style;
				headerCss += $style;
				domTitleCss += $style;
				bodyCss += $style;
			}

			this.domItem.className = domItemCss;
			if (this.body) {
				this.body.className = bodyCss;
			}
			if (this.domTitle) {
				this.domTitle.className = domTitleCss;
			}
			if (this.header) {
				this.header.className = headerCss;
			}
			this.layoutParent && this.layoutParent.ensureLayoutSlot(this);
		}
	},
	dispose: function() {
		syra_store.remove(this);
		this.childrenSection = null;
		this.layoutContent && this.layoutContent.dispose();
		syra_site.disposeObject(this);
	}
});