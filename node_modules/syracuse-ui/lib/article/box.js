"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var boxHelper = require("./boxHelper");


function Box(){
}

exports.Box = helpers.defineClass(Box, null, {
    getLocalize: function(){
        if (!this.localize) {
            this.localize = locale.resources(module)();
        }
        return this.localize;
    },
    getDefaultTitle: function(){
        return this.getLocalize()["box_" + this.$authoringLevel + "Title"];
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        this.setState(metaData);
        
        if (metaData.$isTitleHidden !== undefined) {
            this.$item.$isTitleHidden = metaData.$isTitleHidden;
            if (!this.tabTitle) {
                this._header.style.display = metaData.$isTitleHidden ? "none" : "";
            }
        }
        
        if (metaData.$isBoxCollapsable !== undefined ||
        metaData.$isCloseable !== undefined ||
        metaData.$isRefreshable !== undefined ||
        metaData.$isMaximizable !== undefined) {
            boxHelper.applyPickerMetadata(this, metaData, onAuthoring);
        }
        
        if (onAuthoring !== false) {
            if (metaData.$title !== undefined) {
                this.setTitle(this.$item.$title = metaData.$title);
            }
            if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
                this.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
            }
            if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
                this.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
            }
            if (metaData.$field !== undefined) {
                this.$item.$field = this.$item.$field || {};
                var $props = Object.keys(metaData.$field);
                for (var ii = 0, jj = $props.length; ii < jj; ii++) {
                    var $prop = $props[ii];
                    this.$item.$field[$prop] = metaData.$field[$prop];
                }
            }
        }
    },
    getArticle: function(){
        return this.boxParent ? this.boxParent.getArticle() : null;
    },
    loadBox: function(){
        this.drawBox();
    },
    getTitle: function(applyDefault){
        var title = this._textTitle.textContent || this.$item.$title || "";
        if ((title.trim() == "") && (applyDefault !== false)) {
            title = this.getDefaultTitle();
        }
        return title;
    },
    setTitle: function(title){
        if (this.domTitle) {
            if (title != null && title != "") {
                var displayTitle = title;
                this.domTitle.style.display = "";
                if (displayTitle == "-") {
                    displayTitle = "";
                }
                if (displayTitle.indexOf("{") < 0) {
                    this._textTitle.textContent = displayTitle;
                    if (this.tabTitle) {
                        this.tabTitleText.textContent = displayTitle;
                        this.tabTitle.setAttribute("title", displayTitle);
                    }
                    this.domTitle.setAttribute("title", displayTitle);
                }
                else {
                    this._textTitle.textContent = "";
                    this.renderExpression(displayTitle, this._textTitle, this.$skin + "-title-field", false);
                }
            }
            else {
                this.domTitle.style.display = "none";
                if (this.tabTitle) {
                    this.tabTitleText.textContent = title = this.getDefaultTitle();
                    this.tabTitle.setAttribute("title", title);
                }
            }
            if (!this.tabTitle) {
                this._header.style.display = (title != null && title != "") && !this.$item.$isTitleHidden ? "" : "none";
            }
        }
    },
    _setTitleIcon: function(){
        this._iconTitle = document.createElement("div");
        this._iconTitle.className = this.$skin + "-title-icon";
        this.domTitle.appendChild(this._iconTitle);
        if (this.$item.$titleIcon.$cssName) {
            this._iconTitle.className += " " + this.$item.$titleIcon.$cssValue;
        }
        else {
            var $path = document.site.$item.$iconPath + (this.$item.$titleIcon.$path || "");
            this._iconTitle.style.backgroundImage = "url('" + $path + this.$item.$titleIcon.$value + ".png')";
        }
        this._textTitle = document.createElement("div");
        this._textTitle.className = this.$skin + "-title-text s-icon";
        this.domTitle.appendChild(this._textTitle);
    },
    _createBoxTitle: function(){
        this._textTitle = this.domTitle = this.domTitle || document.createElement("a");
        this.domTitle.style.display = "none";
        this.domTitle.className = this.$skin + "-title";
        this.domTitle.setAttribute("data-s-box", this.id);
        if (this.$item.$titleIcon) {
            this._setTitleIcon();
            if (this.$item.$titleIcon.$mode === "icon") {
                this.domTitle.style.display = "";
            }
        }
        return this.domTitle;
    },
    setDescription: function($description){
        if ($description != null && this._header) {
            if (!this.domDescription) {
                this.domDescription = document.createElement("div");
                this.domDescription.className = this.$skin + "-description";
                this._header.appendChild(this.domDescription);
            }
            if ($description.indexOf("{") < 0) {
                this.domDescription.textContent = $description;
                if (this.tabTitle) {
                    this.tabTitle.title = $description;
                }
            }
            else {
                this.renderExpression($description, this.domDescription, this.$skin + "-description-field", false);
            }
        }
    },
    ensureSkin: function(){
        this.$skin = this.$skin || this.$item.$skin;
    },
    drawBox: function(){
        this.ensureSkin();
        this._item = document.createElement("div");
        this.$$item = $(this._item);
        
        if (this.$item.$expression) {
            if (this.$item.$css) {
                this._item.className = this.$item.$css;
            }
            this.layoutSlot.appendChild(this._item);
            this.$isEditMode = this.getArticle().$isEditMode;
            this.renderExpression(this.$item.$expression, this._item);
        }
        else {
            this.$$body = $(this._body = document.createElement("div"));
            this._body.style.display = "none";
            this.appendHeader();
            this.ensureLayoutMode();
            if (this.$item.$width) {
                this._item.style.width = this.$item.$width;
            }
            this._item.appendChild(this._body);
            if (this.layoutSlot) {
                this.layoutSlot.appendChild(this._item);
            }
            this.setDescription(this.$item.$description);
            if (this.$item.$isPopupContent) {
                if (this.$item.$opened === undefined) {
                    this.$item.$opened = false
                }
                this._body.className += " s-box-popup";
            }
            this.applyDesignMetaData(this.$item, false);
            
            this.openBox(!this.tabTitle && this.$item.$opened !== false);
            if (!this.loaded && (this.$item.$isContentLoaded || this.page.$isEditMode)) {
                this._renderLayoutContent();
                this.loaded = true;
            }
        }
    },
    appendHeader: function(){
        this._header = document.createElement("header");
        this._header.className = this.$skin + "-head";
        var $title = this.$item.$title;
        if (this.$item.$style) {
            if (this.$item.$style == "header") {
                if ($title == "-") {
                    $title = "";
                    this.$item.$isTitleHidden = true;
                }
            }
            this._header.className += " s-cst-sty-" + this.$item.$style;
        }
        this._header.style.display = "none";
        this._header.appendChild(this._createBoxTitle());
        this._item.appendChild(this._header);
        
        if (!$title || $title == "-") {
            if (this.$item.$applyDefaultTitle) {
                this.$item.$title = $title = this.getDefaultTitle();
                delete this.$item.$applyDefaultTitle;
            }
            else {
                if (this.$field) {
                    $title = this.$field.$title;
                }
            }
        }
        this.setTitle($title);
    },
    toggleDiagnoseIcon: function(fieldId, severity, add){
        boxHelper.toggleDiagnoseIcon(this, fieldId, severity, add);
    },
    doPicker: function(pickerId, callback){
        boxHelper.doPicker(this, pickerId, callback);
    },
    doOpenPicker: function(){
        boxHelper.doOpenPicker(this);
    },
    _expandBody: function(){
        boxHelper.expandBody(this);
    },
    _renderLayoutContent: function(){
        this.layoutContent = this.page.createNewItem(this.$item.$layout, this);
        this.layoutContent.layoutSlot = this.$$body[0];
        this.layoutContent.render();
    },
    renderExpression: function(expression, layoutSlot, $fieldCss, $isEditMode){
        if (expression[1] == "@") {
            var text = this.getArticle().parseExpression(expression);
            if (layoutSlot) { //!important used by expression
                layoutSlot.textContent = text;
            }
            return text;
        }
        else {
            boxHelper.renderHTMLExpression(this, expression, layoutSlot, $fieldCss, $isEditMode);
        }
        
    },
    openBox: function(open){
        if (open && !this.loaded) {
            this._renderLayoutContent();
            this.loaded = true;
        }
        if (this.tabTitle) {
            if (open) {
                this.ensureLayoutMode();
                if (this.layoutParent.tabOpened !== undefined) {
                    this.layoutParent.tabOpened.openBox(false);
                }
                this.layoutParent.tabOpened = this;
                this.$item.$opened = true;
            }
            else {
                delete this.$item.$opened;
            }
            document.site.toggleClass(this.tabTitle, "s-tab-open", open);
            this.layoutSlot.style.display = open ? "" : "none";
            this._item.style.display = open ? "" : "none";
        }
        if (this.$item.$isBoxCollapsable) {
            if (this._expandPicker) {
                document.site.toggleClass(this._expandPicker, "s-close", !open);
            }
            document.site.toggleClass(this.domTitle, "s-close", !open);
        }
        this._body.style.display = open ? "" : "none";
        if (this.$item.onOpen) {
            this.$item.onOpen(this);
        }
    },
    appendTabTitle: function(){
        this.tabTitle = document.createElement("a");
        this.tabTitle.className = this.$skin + "-tab";
        this.tabTitle.setAttribute("href", "#");
        this.tabTitle.setAttribute("data-s-box", this.id);
        this.tabTitleText = document.createElement("div");
        this.tabTitleText.className = this.$skin + "-tab-text";
        this.tabTitle.appendChild(this.tabTitleText);
        this.setTitle(this.getTitle());
        this.layoutParent.appendTab(this);
        this._header.style.display = "none";
    },
    ensureLayoutMode: function(){
        if (this._item) {
            this.ensureSkin();
            var $style;
            if (this.$item.$style) {
                $style = " s-cst-sty-" + this.$item.$style;
            }
            if (this.isTabLayout) {
                if (!this.tabTitle) {
                    this.appendTabTitle();
                    boxHelper.onBoxLayoutChange(this);
                    
                }
                this._item.className = this.$skin + "-tab-box";
                this._body.className = this.$skin + "-tab-body";
                if (this.$item.$opened) {
                    document.site.toggleClass(this.tabTitle, "s-tab-open", true);
                    //this._body.style.display = "none";	
                }
                else {
                    document.site.toggleClass(this.tabTitle, "s-tab-open", false);
                    this._body.style.display = "none";
                }
                if ($style) {
                    this._item.className += $style;
                    this._body.className += $style;
                    this.tabTitle.className += $style;
                }
            }
            else {
                if (this.tabTitle) {
                    document.site.removeDomChild(this.tabTitle);
                    delete this.tabTitle;
                    delete this.tabTitleText;
                    this._header.style.display = "";
                    this._item.style.display = "";
                    this._body.style.display = "";
                    this.layoutSlot.style.display = "";
                    boxHelper.onBoxLayoutChange(this);
                }
                this._item.className = this.$skin;
                this._header.className = this.$skin + "-head";
                this.domTitle.className = this.$skin + "-title";
                this._body.className = this.$skin + "-body";
                if (this.$item.$css) {
                    var $css = " " + this.$item.$css;
                    this._item.className += $css;
                    this._body.className += $css;
                    this._header.className += $css;
                    if (this.domTitle) {
                        this.domTitle.className += $css;
                    }
                    
                }
                if ($style) {
                    this._item.className += $style;
                    this._header.className += $style;
                    this.domTitle.className += $style;
                    this._body.className += $style;
                }
            }
            if (this.layoutParent) {
                this.layoutParent.ensureLayoutSlot(this);
            }
            if (this.$item.$slotStyle && this.layoutSlot) {
                this.layoutSlot.className += " " + this.$item.$slotStyle;
            }
            if (this.page.authoringPage) {
                this.page.authoringPage.toggleItemAuthoring(this, true);
            }
        }
    },
    setState: function(state){
        if (state.$isHidden !== undefined) {
            if (state.$isHidden !== undefined) {
                this.$isHidden = state.$isHidden;
            }
            var display = this.$isHidden ? "none" : "";
            this._item.style.display = display;
            if (this.tabTitle) {
                this.tabTitle.style.display = display;
            }
            if (this.layoutSlot && !this.$item.$isPopupContent) {
                //test $isPopupContent imortant for reference field
                this.layoutSlot.style.display = display;
            }
            if (this.rowSeparator) {
                this.rowSeparator.style.display = display;
            }
        }
    },
    openDialog: function(options){
        options.boxParent = this;
        var dialog = document.site.openDialog(options);
        if (!this._dialogs) {
            this._dialogs = [];
        }
        this._dialogs.push(dialog);
        return dialog;
    },
    closeDialog: function(dialog){
        if (this._dialogs) {
            for (var ii = 0, jj = this._dialogs.length; ii < jj; ii++) {
                if (this._dialogs[ii] == dialog) {
                    this._dialogs.splice(ii, 1);
                    break;
                }
            }
        }
    },
    closeDialogs: function(dispose){
        if (this._dialogs) {
            for (var ii = 0, jj = this._dialogs.length; ii < jj; ii++) {
                this._dialogs[ii].close(undefined, dispose);
                this._dialogs[ii] = null;
            }
            this._dialogs = null;
        }
    },
    dispose: function(){
        this.closeDialogs();
        this._expandPicker = this._pickers = null;
        this.titleMenu = this.localize = this._item = this.$$item = this._body = this.$$body = this._header = null;
        this.tabTitleText = this.tabTitle = this.domTitle = this.domDescription = this._textTitle = this._iconTitle = null;
        this.severitiesCount = this._diagnosesFields = null;
        this.page = null;
    }
});

