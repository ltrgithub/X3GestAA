"use strict";
var helpers = require('syracuse-core/lib/helpers');
var boxHelper = require("./boxHelper");
var fieldHelper = require('syracuse-ui/lib/field/helpers/fieldHelper');

function Box() {}

exports.Box = helpers.defineClass(Box, null, {
	getDefaultTitle: function() {
		return this.localize["box_" + this.$designLevel + "Title"];
	},
	applyDesignMetaDataToField: function(field, metaData) {
		field.applyDesignMetaData({
			$isTopLabelAlignment: metaData.$fieldsIsTopLabelAlignment,
			$isRightTextLabelAlignment: metaData.$fieldsIsRightTextLabelAlignment,
			$isTitleHidden: metaData.$fieldsIsTitleHidden
		}, true);
	},
	applyDesignMetaData: function(metaData, designing) {
		this.setState(metaData);
		if (metaData.$isTitleHidden !== undefined) {
			this.$item.$isTitleHidden = metaData.$isTitleHidden;
			if (!this.tabTitle) {
				this.header.style.display = metaData.$isTitleHidden ? "none" : "";
			}
		}
		boxHelper.applyPickerMetadata(this, metaData, designing);
		if (designing !== false) {
			if (metaData.$title !== undefined) {
				this.setTitle(this.$item.$title = metaData.$title);
			}
			if (designing) {
				boxHelper.applyDesignFieldsSettings(this, metaData);
			}
			if (metaData.$field !== undefined) {
				this.$item.$field = this.$item.$field || {};
				var $props = Object.keys(metaData.$field);
				for (var ii = 0, jj = $props.length; ii < jj; ii++) {
					var $prop = $props[ii];
					this.$item.$field[$prop] = metaData.$field[$prop];
				}
			}
		}
	},


	togglePicker: function(pickerId, show) {
		boxHelper.togglePicker(this, pickerId, show);
	},
	ensurePickersVisibiliy: function() {
		if (this.pickers && this.pickers.items) {
			var display = this.$opened ? "" : "none";
			if (this.pickers.items.maximize) {
				this.pickers.items.maximize.style.display = display;
			}
			if (this.pickers.items.refresh) {
				this.pickers.items.refresh.style.display = display;
			}
		}
	},
	getArticle: function() {
		return this.boxParent ? this.boxParent.getArticle() : null;
	},
	loadBox: function() {
		if (!this.localize) {
			this.localize = document.site.localize;
		}
		this.drawBox();
	},
	getTitle: function(applyDefault) {
		var title = (this.textTitle && this.textTitle.textContent) || (this.$item && this.$item.$title) || "";
		if ((title == "" || title == "-") && applyDefault !== false) {
			title = this.getDefaultTitle();
		}
		return title;
	},
	setTitle: function(title) {
		if (this.domTitle) {
			if (title != null && title != "") {
				var displayTitle = title;
				this.domTitle.style.display = "";
				if (displayTitle == "-") {
					displayTitle = "";
				}
				if (displayTitle.indexOf("{") < 0) {
					this.textTitle.textContent = (this.$item.$noText) ? "" : displayTitle;
					this.domTitle.title = displayTitle;
				} else {
					this.textTitle.textContent = "";
					var parsedText = document.site.expressionMaker.render(this, displayTitle, this.textTitle, this.$skin + "-title-field", false);
					if (parsedText && parsedText.charAt(0) == "@") {
						this.isTitleUnlocalized = displayTitle == ("{" + parsedText + "}");
						this.domTitle.style.visibility = this.isTitleUnlocalized ? "hidden" : "";
					} else {
						displayTitle = parsedText;
						if (this.isTitleUnlocalized) {
							this.isTitleUnlocalized = false;
							this.domTitle.style.visibility = "";
						}
					}
				}
				if (this.tabTitle) {
					this.tabTitleText.textContent = displayTitle;
					this.tabTitle.title = displayTitle;
					if (this.isTitleUnlocalized !== undefined) {
						this.tabTitleText.style.visibility = this.isTitleUnlocalized ? "hidden" : "";
					}
				}
			} else {
				this.domTitle.style.display = "none";
				if (this.tabTitle) {
					this.tabTitleText.textContent = title = this.getDefaultTitle();
					this.tabTitle.title = title;
				}
			}
			if (!this.tabTitle) {
				this.header.style.display = (title != null && title != "") && !this.$item.$isTitleHidden ? "" : "none";
			}
		}
	},

	_createBoxTitle: function() {
		this.textTitle = this.domTitle = this.domTitle || document.createElement("a");
		this.domTitle.style.display = "none";
		this.domTitle.className = this.$skin + "-title";
		this.domTitle.setAttribute("data-s-box", this.id);
		if (this.$item.$titleIcon) {
			boxHelper.setTitleIcon(this);
			if (this.$item.$titleIcon.$mode === "icon") {
				this.domTitle.style.display = "";
				this.textTitle.style.display = "none";
			}
		}
		return this.domTitle;
	},
	setDescription: function($description) {
		if ($description != null && this.header) {
			if (!this.domDescription) {
				this.domDescription = document.createElement("div");
				this.domDescription.className = this.$skin + "-description";
				this.header.appendChild(this.domDescription);
			}
			if ($description.indexOf("{") < 0) {
				this.domDescription.textContent = $description;
				if (this.tabTitle) {
					this.tabTitle.title = $description;
				}
			} else {
				document.site.expressionMaker.render(this, $description, this.domDescription, this.$skin + "-description-field", false);
			}
		}
	},
	ensureSkin: function() {
		this.$skin = this.$skin || this.$item.$skin;
	},
	drawBox: function() {
		this.ensureSkin();
		this.domItem = document.createElement("div");
		this.$$item = $(this.domItem);

		if (this.$item.$expression) {
			if (this.$item.$css) {
				this.domItem.className = this.$item.$css;
			}
			this.layoutSlot.appendChild(this.domItem);
			this.$isEditMode = this.getArticle().$isEditMode;
			document.site.expressionMaker.render(this, this.$item.$expression, this.domItem);
		} else {
			this.body = document.createElement("div");
			this.body.style.display = "none";
			this.appendHeader();
			if (this.$item.$isPopupContent) {
				if (this.$item.$opened === undefined) {
					this.$item.$opened = false;
				}
			}
			if (this.isTabLayout) {
				delete this.$item.$opened;
			}
			this.ensureLayoutMode();
			if (this.$item.$width) {
				this.domItem.style.width = this.$item.$width;
			}
			if (!this.$item.$isPopupContent) {
				this.domItem.appendChild(this.body);
			}
			if (this.layoutSlot) {
				this.layoutSlot.appendChild(this.domItem);
			}
			this.setDescription(this.$item.$description);

			this.applyDesignMetaData(this.$item, false);
			if (this.page.isDashBoard) {
				this.openBox(this.$item.$opened !== false, true, true);
			} else {
				this.openBox(!this.tabTitle && this.$item.$opened !== false, true, true);
			}
		}
	},
	appendHeader: function() {
		this.header = document.createElement("header");
		this.header.className = this.$skin + "-head";
		var $title = this.$item.$title;
		if (this.$item.$style) {
			if (this.$item.$style == "header") {
				if ($title == "-") {
					$title = "";
					this.$item.$isTitleHidden = true;
				}
			}
			this.header.className += " s-cst-sty-" + this.$item.$style;
		}
		this.header.style.display = "none";
		this.header.appendChild(this._createBoxTitle());
		this.domItem.appendChild(this.header);

		if (this.$field && (!$title || $title == "-")) {
			$title = this.$field.$title;
		}
		this.setTitle($title);
	},


	doPicker: function(pickerId) {
		var handler = boxHelper.onClickPicker[pickerId];
		if (handler) {
			handler(this);
		}
	},
	doOpenPicker: function($$ofPosition) {
		var self = this;
		self.openBox(self.$opened);
		if (self.$item.$isPopupContent) {
			if (!self._popupMenus) {
				self._popupMenus = document.site.dialogManager.openPopup(self, {
					content: self,
					slot: self.body,
					position: {
						my: "right top",
						at: "right bottom",
						of: $$ofPosition || $(self.titleMenu ? self.header : self.domTitle)
					},
					onClose: function() {
						if (self.domTitle) {
							document.site.toggleClass(self.domTitle, "s-close", true);
						}
						self.$opened = false;
						self._popupMenus = null;
					}
				});
			} else {
				self._popupMenus.close();
			}
		}
	},
	expandBody: function($opened, event) {
		var self = this;
		if (event) {
			if (event.shiftKey) {
				if (self.page.isBoxesExpanded === undefined) {
					self.page.isBoxesExpanded = true;
				}
				self.expandSiblingBoxes(self.page.isBoxesExpanded = !self.page.isBoxesExpanded);
			}
		}
		self.$opened = ($opened === undefined) ? !self.$opened : $opened;
		var isFirstTime = !self.loaded || false;
		if (self.menuGroupRoot && self.menuGroupRoot.contextField) {
			if (!self.menuGroupRoot.contextField.$isDisabled) {
				self.menuGroupRoot.contextField.page.externalAdapter.onFieldClickPicker({
					field: self.menuGroupRoot.contextField,
					pickerType: "menus",
					doEvent: function() {
						self.doOpenPicker();
					}
				});
			}
		} else {
			self.page.externalAdapter.onBoxToggle({
				box: self,
				open: self.$opened,
				isFirstTime: isFirstTime,
				doEvent: function() {
					self.doOpenPicker();
					if (!self.$item.$isPopupContent) {
						document.site.resize(true);
					}
				}
			});
		}
		if (self.expandPicker) {
			self.expandPicker.title = self.$opened ? self.localize.box_collapse : self.localize.box_expand;
			document.site.toggleClass(self.expandPicker, "s-close", !self.$opened);
		}
		self.ensurePickersVisibiliy();
	},
	renderLayoutContent: function() {
		this.layoutContent = this.page.createNewItem(this.$item.$layout, this);
		this.layoutContent.layoutSlot = this.body;
		this.layoutContent.loadBox();
	},

	openBox: function(open, load, drawing) {
		if ((open || load) && !this.loaded) {
			this.renderLayoutContent();
			this.loaded = true;
		}
		this.$opened = open;
		if (this.tabTitle) {
			if (open) {
				this.ensureLayoutMode();
				if (this.layoutParent.tabOpened) {
					this.layoutParent.tabOpened.openBox(false, false, drawing);
				}
				this.layoutParent.tabOpened = this;
			}
			if (!drawing) {
				if (open) {
					this.$item.$opened = true;
				} else {
					delete this.$item.$opened;
				}
			}
			document.site.toggleClass(this.tabTitle, "s-tab-open", open);
			this.domItem.style.display = this.layoutSlot.style.display = open ? "" : "none";
		}
		if (this.$item.$isBoxCollapsable) {
			if (this.expandPicker) {
				document.site.toggleClass(this.expandPicker, "s-close", !open);
			}
			document.site.toggleClass(this.domTitle, "s-close", !open);
		}
		this.body.style.display = open ? "" : "none";
		if (this.$item.onOpen) {
			this.$item.onOpen(this);
		}
		this.ensurePickersVisibiliy();
	},
	ensureLayoutMode: function() {
		this.ensureSkin();
		if (this.domItem) {
			var $style;
			if (this.$item.$style) {
				$style = " s-cst-sty-" + this.$item.$style;
			}
			if (this.isTabLayout) {
				if (!this.tabTitle || this.isTabTitleRemoved) {
					boxHelper.appendTabTitle(this);
					this.isTabTitleRemoved = null;
					if (this.pickers) {
						document.site.removeDomChild(this.pickers);
						this.pickers = null;
						boxHelper.applyPickerMetadata(this, this.$item);
					}

				}
				this.domItem.className = this.$skin + "-tab-box";
				this.body.className = this.$skin + "-tab-body";
				if (this.$item.$opened) {
					document.site.toggleClass(this.tabTitle, "s-tab-open", true);
					//this.body.style.display = "none";	
				} else {
					document.site.toggleClass(this.tabTitle, "s-tab-open", false);
					this.body.style.display = "none";
				}
				if ($style) {
					this.domItem.className += $style;
					this.body.className += $style;
					this.tabTitle.className += $style;
				}
			} else {
				if (this.tabTitle) {
					document.site.removeDomChild(this.tabTitle);
					delete this.tabTitle;
					delete this.tabTitleHead;
					delete this.tabTitleText;
					if (this.header) {
						this.header.style.display = "";
					}
					this.domItem.style.display = "";
					this.body.style.display = "";
					this.layoutSlot.style.display = "";
					if (this.pickers) {
						document.site.removeDomChild(this.pickers);
						this.pickers = null;
						boxHelper.applyPickerMetadata(this, this.$item);
					}
				}
				this.domItem.className = this.$skin;
				if (this.header) {
					this.header.className = this.$skin + "-head";
				}
				if (this.domTitle) {
					this.domTitle.className = this.$skin + "-title";
				}
				this.body.className = this.$skin + "-body";
				if (this.$item.$css) {
					var $css = " " + this.$item.$css;
					this.domItem.className += $css;
					this.body.className += $css;
					if (this.header) {
						this.header.className += $css;
					}
					if (this.domTitle) {
						this.domTitle.className += $css;
					}

				}
				if (this.$item.$isPopupContent) {
					if (this.header) {
						this.header.className += " s-popup";
					}
					this.body.className += " s-popup";
					if (this.domTitle) {
						this.domTitle.className += " s-popup";
					}
					if (this.expandPicker) {
						this.expandPicker.className += " s-popup";
					}
				}
				if (this.$item.$titleIcon) {
					if (this.$item.$titleIcon.$mode === "icon") {
						this.domTitle.className += " s-icon";
						if (this.header) {
							this.header.className += " s-icon";
						}
					}
				}
				if ($style) {
					this.domItem.className += $style;
					if (this.header) {
						this.header.className += $style;
					}
					this.domTitle.className += $style;
					this.body.className += $style;
				}
			}
			if (this.layoutParent) {
				this.layoutParent.ensureLayoutSlot(this);
			}
			if (this.$item.$slotStyle && this.layoutSlot) {
				this.layoutSlot.className += " " + this.$item.$slotStyle;
			}
		}
	},
	hideBox: function(isHidden) {
		this.isItemHidden = isHidden;
		var display = isHidden ? "none" : "";
		if (this.domItem) {
			this.domItem.style.display = display;
		}
		if (this.tabTitle) {
			this.tabTitle.style.display = display;
		}
		display = (!(this.layoutParent && this.layoutParent.isRow) && isHidden) ? "none" : "";
		if (this.layoutSlot && !this.$item.$isPopupContent) {
			//test $isPopupContent important for reference field
			this.layoutSlot.style.display = display;
		}
		if (this.rowSeparator) {
			this.rowSeparator.style.display = display;
		}
		if (this.articleParent) {
			this.articleParent.onBoxToggled(this, isHidden);
		}
	},
	setState: function(state) {
		if (state.$isHidden !== undefined) {
			var updated;
			if (this.$isHidden !== state.$isHidden) {
				updated = true;
				this.hideBox(this.$isHidden = state.$isHidden);
				if (updated) {
					if (this.page && this.page.designer) {
						this.page.designer.showHiddenItem(this, this.$isHidden);
					}
				}
			}
		}
	},
	dispose: function() {
		document.site.dialogManager.closeAll(this);
		this.childrenSection = null;
		if (this.layoutContent) {
			this.layoutContent.dispose();
		}
		this.expandPicker = this.pickers = this.$item = this.layoutSlot = this.layoutContent = null;
		this.titleMenu = this.localize = this.domItem = this.$$item = this.body = this.header = null;
		this.tabTitleHead = this.tabTitleText = this.tabTitle = this.domTitle = this.domDescription = this.textTitle = this._iconTitle = null;
		this.rowSeparator = this.severitiesCount = this.diagnosesFields = this.$skin = this.id = null;
		this.childrenSection = this.layoutParent = this.boxParent = this.articleParent = this.page = this.dataStore = null;
		this.isDisposed = true;
	}
});