"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _templatePattern = /(\{.*?\})/g;
var locale = require('syracuse-core/lib/locale');

function Box(){
}

exports.Box = helpers.defineClass(Box, null, {
    getDefaultTitle: function(){
        var localize = locale.resources(module)();
        return localize.box_blockTitle;
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        var self = this;
        self.setState(metaData);
        
        if (!self.$isTabLayout) {
            if (metaData.$isTitleHidden !== undefined) {
                self.$item.$isTitleHidden = metaData.$isTitleHidden;
                if (self._header) {
                    self._header.style.display = metaData.$isTitleHidden ? "none" : "";
                }
            }
            if (metaData.$isBoxCollapsable !== undefined) {
                self.applyCollapsable(self.$item.$isBoxCollapsable = metaData.$isBoxCollapsable);
            }
        }
        
        if (metaData.$isMaximizable !== undefined) {
            if (self.$item.$isMaximizable = metaData.$isMaximizable) {
                self._appendButton("maximize");
            }
            else {
                self._removeButton("maximize");
            }
        }
        if (onAuthoring !== false) {
            if (metaData.$title !== undefined) {
                self.$item.$title = metaData.$title;
                if (self.domTitle) {
                    self.renderTitle(self.$item.$title);
                }
                else {
                    self.appendHeader();
                }
            }
            if (metaData.$isSeparatorsVisible !== undefined) {
                self.$item.$isSeparatorsVisible = metaData.$isSeparatorsVisible;
                if (self.layoutContent) {
                    self.layoutContent.toggleSeparator(self.$item.$isSeparatorsVisible, true);
                }
            }
            if (metaData.$fieldsWidth !== undefined) {
                self.$item.$fieldsWidth = metaData.$fieldsWidth;
                self.layoutContent.render(true);
            }
            if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
                self.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
            }
            if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
                self.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
            }
            if (metaData.$field !== undefined) {
                self.$item.$field = self.$item.$field || {};
                Object.keys(metaData.$field).forEach(function($prop){
                    self.$item.$field[$prop] = metaData.$field[$prop];
                });
            }
            if (metaData.$layout !== undefined) {
                var oldLayout = self.layoutContent;
                oldLayout.toggleAuthoring(false);
                //$newLayout.$items = oldLayout.$layout.$items;
                self.layoutContent = document.site.createLayout(self, metaData.$layout);
                self.$item.$layout = metaData.$layout;
                self.layoutContent.convertLayout(oldLayout);
                document.controller.disposeObject(oldLayout);
            }
        }
    },
    _collapse: function(show, isFirstTime){
        var self = this;
        self.page.externalAdapter.onBoxToggle({
            box: self,
            open: show,
            isFirstTime: isFirstTime,
            doEvent: function(){
                document.site.toggleClass(self._collapsePicker, "s-open", show);
                self.openBox(show);
            }
        });
    },
    applyCollapsable: function($isBoxCollapsable){
        if ($isBoxCollapsable) {
            if (!this._collapsePicker) {
                this._collapsePicker = document.createElement("a");
                this._collapsePicker.setAttribute("data-s-box", this.id);
                this._collapsePicker.className = "s-open " + this.$skin + "-opener";
                $(this._collapsePicker).prependTo(this.$$header);
                if (this.$item.$opened === false) {
                    document.site.toggleClass(this._collapsePicker, "s-open", false);
                }
            }
        }
        else {
            if (this._collapsePicker) {
                document.site.removeDomChild(this._collapsePicker);
                delete this._collapsePicker;
            }
        }
    },
    _loadChildItem: function(item, layoutParent, $$container){
    
    },
    getArticle: function(){
        return this.boxParent ? this.boxParent.getArticle() : null;
    },
    loadBox: function(){
        this.$authoringLevel = this.$authoringLevel || "block";
        this.drawBox();
    },
    getTitle: function(){
        var title = (this.domTitle ? this.domTitle.textContent : null) || this.$item.$title || "";
        if (title.trim() == "") {
            title = this.getDefaultTitle();
        }
        return title;
    },
    renderTitle: function($title){
        if (this.domTitle) {
            var $$title = $(this.domTitle);
            $$title.empty();
            if ($title.indexOf("{") < 0) {
                $$title.append($title);
            }
            else {
                this._renderExpression($title, $$title, this.$skin + "-title-field", false);
            }
        }
    },
    renderDescription: function($description){
        if (this.$isTabLayout) {
            this.domTitle.title = $description; //to improve manage expression
        }
        else {
            if (!this.$$description) {
                var div = document.createElement("div");
                div.className = this.$skin + "-description";
                this.$$description = $(this._header.appendChild(div));
            }
            if (this.$$description) {
                if ($description.indexOf("{") < 0) {
                    this.$$description.append($description);
                }
                else {
                    this._renderExpression($description, this.$$description, this.$skin + "-description-field", false);
                }
            }
        }
    },
    _ensureSkin: function(blockType){
        this.$skin = this.$item.$skin;
        if (!this.$skin) {
            var $layoutOptions = this.getArticle().$layoutOptions || this.page.$layoutOptions;
            if ($layoutOptions) {
                this.$skin = $layoutOptions[blockType];
            }
        }
    },
    drawBox: function(){
        this.$skin = this.$skin || this.$item.$skin;
        if (this.$item.$expression) {
            var div = document.createElement("div");
            if (this.$item.$css) {
                div.className = this.$item.$css;
            }
            this.$$item = $(this.$$container[0].appendChild(div));
            this.$isEditMode = this.getArticle().$isEditMode;
            this._renderExpression(this.$item.$expression, this.$$item);
        }
        else {
            if (!this.$$body) {
                //this.$$body is set only if called from _convertTabToPanelLayout 
                var div = document.createElement("div");
                div.style.display = "none";
                this.$$body = $(div);
            }
            if (this.$isTabLayout) {
                this.layoutParent.wrapTabBody(this);
            }
            else {
                var div = document.createElement("div");
                div.className = this.$skin;
                this.$$item = $(this.$$container[0].appendChild(div));
                this.$$body.addClass(this.$skin + "-body").appendTo(this.$$item);
            }
            if (this.$item.$width) {
                this.$$item.css("width", this.$item.$width);
            }
            if (this.$item.$css) {
                this.$$item.addClass(this.$item.$css);
                this.$$body.addClass(this.$item.$css);
            }
            this.appendHeader();
            this.applyDesignMetaData(this.$item, false);
            this.openBox(!this.$isTabLayout && this.$item.$opened !== false);
        }
    },
    appendHeader: function($$container, hideHeader){
        var self = this;
        if (self.$isTabLayout) {
            self.layoutParent.appendChildTab(self);
        }
        else {
            self._header = document.createElement(self.$headerTag || "header");
            self._header.className = self.$skin + "-head";
            if (self.$item.$isTitleHidden || hideHeader) {
                self._header.style.display = "none"; //used by porletfield
            }
            self.$$header = $(self._header);
            
            self.domTitle = document.createElement("div");
            self.domTitle.className = self.$skin + "-title";
            self._header.appendChild(self.domTitle);
            
            self.$$header.prependTo($$container || self.$$item);
        }
        var title = self.$item.$title || (self.$field ? self.$field.$title : null);
        if (title) {
            self.renderTitle(title);
        }
        if (self.$item.$description) {
            self.renderDescription(self.$item.$description);
        }
        if (self.$item.$css) {
            self._header.className += " " + self.$item.$css;
        }
    },
    _appendButton: function($btnId){
        if (!this._$$buttonsSlot) {
            this._appendButtonsSlot();
        }
        var btn = document.createElement("a");
        btn.className = this.$skin + "-" + $btnId;
        this._$$buttonsSlot.append(this[$btnId + "Btn"] = btn);
    },
    _removeButton: function($btnId){
        if (this._$$buttonsSlot) {
            var name = $btnId + "Btn";
            if (this[name]) {
                $(this[name]).remove();
                delete this[name];
            }
            if (this._$$buttonsSlot.children().length == 0) {
                this.$$item.unbind(".buttons");
                this._$$buttonsSlot.undelegate().remove();
                delete this._$$buttonsSlot;
            }
            
        }
    },
    _appendButtonsSlot: function(){
        var self = this;
        var div = document.createElement("div");
        self._$$buttonsSlot = $(div);
        if (self.$isTabLayout) {
            div.className = self.$skin + "-actions-body";
            self._$$buttonsSlot.prependTo(self.$$body);
        }
        else {
            div.className = self.$skin + "-actions";
            self._$$buttonsSlot.appendTo(self.$$header);
        }
        self._$$buttonsSlot.delegate("a", "click", function(event){
            event.stopPropagation();
            self[$(this).attr('class').replace(self.$skin, "").slice(1)]();
        });
    },
    _renderLayoutContent: function(){
        this.layoutContent = document.site.createLayout(this, this.$item.$layout);
        this.layoutContent.$$container = this.$$body;
        this.layoutContent.render();
        if (document.site.authorPage) {
            this.layoutContent.toggleAuthoring(true);
        }
    },
    _renderExpression: function(expression, $$container, $fieldCss, $isEditMode){
        var self = this;
        var article = self.getArticle();
        var html = expression;
        if (expression[1] == "@") {
            var text = article.parseExpression(expression);
            if ($$container) { //!important used by expression
                $$container.text(text);
            }
            return text;
        }
        var matches = expression.match(_templatePattern).map(function(match, index){
            html = html.replace(match, "<div data-s-match='" + index + "'>" + match + "</div>");
            return {
                expression: match,
                property: match.substr(1, match.length - 2)
            };
        });
        $$container.append(html).find("div").each(function(index, domMatch){
            debugger;
            var $$match = $(domMatch);
            var match = matches[parseInt(domMatch.getAttribute("data-s-match"), 10)];
            if (match.property.charAt(0) == "$") {
                var value = article.matchProperty(match.expression, match.property, article.dataset);
                if (value != null) {
                    if (value.indexOf && value.indexOf("{") >= 0) {
                        self._renderExpression(value, $$match.empty(), $fieldCss, $isEditMode);
                    }
                    else {
                        $$match.text(value);
                    }
                }
            }
            else {
                self.page.loadNewItem($$match.empty(), {
                    $isMenusDisabled: true,
                    $isExpressionChild: true,
                    $bind: match.property,
                    $inplace: true,
                    $isEditMode: $isEditMode === undefined ? self.$isEditMode : $isEditMode,
                    $css: "s-expression " + $fieldCss,
                    $skin: "s-inplace"
                }, article);
            }
        });
    },
    openBox: function(open){
        if (open && !this.loaded) {
            this._renderLayoutContent();
            this.loaded = true;
        }
        if (this.$isTabLayout) {
            this.layoutParent.openTab(this, open);
        }
        this.$$body[0].style.display = open ? "" : "none";
        if (this.$item.onOpen) {
            this.$item.onOpen(this);
        }
    },
    setState: function(state){
        if (state.$isHidden !== undefined) {
            this.$$item.toggle(!(this.$item.$isHidden = state.$isHidden));
            if (this.$isTabLayout) {
                this.$$header.toggle(!this.$item.$isHidden);
            }
        }
    },
    maximize: function(callback){
        document.site.maximizeBox(this, callback);
    },
    minimize: function(callback){
        document.site.minimizeBox(this, callback);
    },
    openDialog: function(options){
        options.boxParent = this;
        var dialog = document.site.openDialog(options);
        (this._dialogs = this._dialogs || {})[dialog.id] = dialog;
        return dialog;
    },
    _closeChildrenDialogs: function(dispose){
        var self = this;
        if (self._dialogs) {
            Object.keys(self._dialogs).forEach(function(dialogId){
                self._dialogs[dialogId].close(undefined, dispose);
                delete self._dialogs[dialogId];
            });
        }
    },
    dispose: function(){
        if (this.$$item) {
            this.$$item.unbind();
        }
        if (this._$$buttonsSlot) {
            this._$$buttonsSlot.undelegate();
            delete this._$$buttonsSlot;
        }
        this._closeChildrenDialogs();
        delete this._header;
        delete this.page;
        delete this.tabOpened;
    }
});


function SectionBlock(){
}

exports.SectionBlock = helpers.defineClass(SectionBlock, Box, {
    getDefaultTitle: function(){
        var localize = locale.resources(module)();
        return localize["box_" + this.$authoringLevel + "Title"];
    },
    switchCategory: function($newCategory){
        var self = this;
        var $prevAuthoringLevel = self.$authoringLevel;
        self.$authoringLevel = self.$item.$category = $newCategory;
        self._ensureSkin(self.$authoringLevel);
        ["$$item", "$$body", "$$header", "$$title"].forEach(function(prop){
            if (self[prop]) {
                var dom = self[prop][0];
                dom.className = dom.className.replace(new RegExp($prevAuthoringLevel, "g"), self.$authoringLevel);
            }
        });
        if (self.authoringNode) {
            self.authoringNode.$authoringLevel = $newCategory;
        }
    },
    loadBox: function(){
        this._ensureSkin(this.$authoringLevel);
        Box.prototype.loadBox.call(this);
    }
});
