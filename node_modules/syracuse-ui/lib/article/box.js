"use strict";
var helpers = require('syracuse-core/lib/helpers');
var boxHelper = require("./boxHelper");
var fieldHelper = require('syracuse-ui/lib/field/helpers/fieldHelper');

function Box() {}

exports.Box = helpers.defineClass(Box, null, {
	onMaximizeBoxClick: function() {
		boxHelper.onMaximizeBoxClick(this);
	},
	onCloseClick: function() {
		boxHelper.onCloseClick(this);
	},
	advanced: function() {
		boxHelper.onAdvancedClick(this);
	},
	onOpenerClick: function(picker, event) {
		var self = this;
		syra_site.onBeforeClick(self, event);
		if (!self.page.onOpenerChildBoxClick || self.page.onOpenerChildBoxClick(self, picker)) {
			if (self.tabTitle) {
				var tabIndex = self.layoutParent.getChildIndex(self);
				var isTabSelected = self.layoutParent.getOpenedTab() == self;
				if (isTabSelected) {
					self.page.externalAdapter.onBoxClick({
						box: self,
						event: event,
						tabIdx: tabIndex
					});
				} else {
					if (!syra_dd.ddAgent) {
						var open = !self.$item.$opened;
						var isFirstTime = !self.loaded;
						self.page.externalAdapter.onBoxToggle({
							nativeEvent: event,
							nativeEvenData: picker.syraOnEventData,
							box: self,
							isTabSelected: isTabSelected,
							open: open,
							isFirstTime: isFirstTime,
							tabIdx: tabIndex,
							doEvent: function() {
								if (!isTabSelected) {
									self.layoutParent.openTab(syra_site.boxFocus = self);
								}
							}
						});
						delete picker.syraOnEventData;
						return false;
					}
				}
			} else {
				if (self.$item.$isBoxCollapsable) {
					self.expandBody(undefined, event);
				}
			}
		}
	},
	getDefaultTitle: function() {
		return this.localize["box_" + this.$designLevel + "Title"];
	},
	applyDesignMetaDataToField: function(field, metaData) {
		field.applyDesignMetaData({
			$isTopLabelAlignment: metaData.$fieldsIsTopLabelAlignment,
			$isRightTextLabelAlignment: metaData.$fieldsIsRightTextLabelAlignment,
			$isTitleHidden: metaData.$fieldsIsTitleHidden
		}, true);
	},
	applyDesignMetaData: function(metaData, designing) {
		this.setState(metaData);
		if (metaData.$isTitleHidden !== undefined) {
			this.$item.$isTitleHidden = metaData.$isTitleHidden;
			if (!this.tabTitle) {
				this.header.style.display = metaData.$isTitleHidden ? "none" : "";
			}
		}
		boxHelper.applyPickerMetadata(this, metaData, designing);
		if (designing !== false) {
			if (metaData.$title !== undefined) {
				this.setTitle(this.$item.$title = metaData.$title);
			}
			if (designing) {
				boxHelper.applyDesignFieldsSettings(this, metaData);
			}
			if (metaData.$field !== undefined) {
				this.$item.$field = this.$item.$field || {};
				var $props = Object.keys(metaData.$field);
				for (var ii = 0, jj = $props.length; ii < jj; ii++) {
					var $prop = $props[ii];
					this.$item.$field[$prop] = metaData.$field[$prop];
				}
			}
		}
	},
	togglePicker: function(pickerId, show, syraOnClick) {
		boxHelper.togglePicker(this, pickerId, show, syraOnClick);
	},
	ensurePickersVisibiliy: function() {
		if (this.pickers && this.pickers.items) {
			var display = this.$opened ? "" : "none";
			if (this.pickers.items.maximizebox) {
				this.pickers.items.maximizebox.style.display = display;
			}
			if (this.pickers.items.refresh) {
				this.pickers.items.refresh.style.display = display;
			}
		}
	},
	getArticle: function() {
		return this.boxParent ? this.boxParent.getArticle() : null;
	},
	loadBox: function() {
		if (!this.localize) {
			this.localize = syra_site.localize;
		}
		this.drawBox();
	},
	getTitle: function(applyDefault) {
		var title = (this.titleLabel && this.titleLabel.textContent) || (this.$item && this.$item.$title) || "";
		if ((title == "" || title == "-") && applyDefault !== false) {
			title = this.getDefaultTitle();
		}
		return title;
	},
	isChild: function(item) {
		var boxParent = item.boxParent;
		while (boxParent && boxParent != this) {
			boxParent = boxParent.boxParent;
		}
		return boxParent == this;
	},
	setTitle: function(title) {
		if (this.domTitle) {
			if (title != null && title != "") {
				this.titleText = title;
				this.domTitle.style.display = "";
				if (this.titleText == "-") {
					this.titleText = "";
				}
				if (this.titleText.indexOf("{") < 0) {
					this.titleLabel.textContent = (this.$item.$noText) ? "" : this.titleText;
					this.domTitle.title = this.titleText;
				} else {
					this.titleLabel.textContent = "";
					var parsedText = syra_site.expressionMaker.render(this, this.titleText, this.titleLabel, this.$skin + "-title-field", false);
					if (parsedText && parsedText.charAt(0) == "@") {
						this.isTitleUnlocalized = this.titleText == ("{" + parsedText + "}");
						this.domTitle.style.visibility = this.isTitleUnlocalized ? "hidden" : "";
					} else {
						this.titleText = parsedText;
						if (this.isTitleUnlocalized) {
							this.isTitleUnlocalized = false;
							this.domTitle.style.visibility = "";
						}
					}
				}
				if (this.tabTitle) {
					this.tabTitleText.textContent = this.titleText;
					this.tabTitle.title = this.titleText;
					if (this.isTitleUnlocalized !== undefined) {
						this.tabTitleText.style.visibility = this.isTitleUnlocalized ? "hidden" : "";
					}
				}
			} else {
				this.domTitle.style.display = "none";
				if (this.tabTitle) {
					this.tabTitleText.textContent = this.titleText = title = this.getDefaultTitle();
					this.tabTitle.title = title;
				}
			}
			if (!this.tabTitle) {
				this.header.style.display = (title != null && title != "") && !this.$item.$isTitleHidden ? "" : "none";
			}
		}
	},

	_createBoxTitle: function() {
		this.titleLabel = this.domTitle = this.domTitle || document.createElement("div");
		this.domTitle.style.display = "none";
		this.domTitle.className = this.$skin + "-title";
		this.domTitle.syraItem = this.domTitle.syrainout = this.id;
		if (this.$item.$titleIcon) {
			boxHelper.setTitleIcon(this);
			if (this.$item.$titleIcon.$mode === "icon") {
				this.domTitle.style.display = "";
				this.titleLabel.style.display = "none";
			}
		}
		return this.domTitle;
	},
	setDescription: function($description) {
		if ($description != null && this.header) {
			if (!this.domDescription) {
				this.domDescription = document.createElement("div");
				this.domDescription.className = this.$skin + "-description";
				this.header.appendChild(this.domDescription);
			}
			if ($description.indexOf("{") < 0) {
				this.domDescription.textContent = $description;
				if (this.tabTitle) {
					this.tabTitle.title = $description;
				}
			} else {
				syra_site.expressionMaker.render(this, $description, this.domDescription, this.$skin + "-description-field", false);
			}
		}
	},
	ensureSkin: function() {
		this.$skin = this.$skin || this.$item.$skin;
	},
	drawBox: function() {
		this.ensureSkin();
		this.domItem = document.createElement("div");

		if (this.$item.$expression) {
			if (this.$item.$css) {
				this.domItem.className = this.$item.$css;
			}
			this.layoutSlot.appendChild(this.domItem);
			this.$isEditMode = this.getArticle().$isEditMode;
			syra_site.expressionMaker.render(this, this.$item.$expression, this.domItem);
		} else {
			this.body = document.createElement("div");
			this.showBody(false);
			this.appendHeader();
			if (this.$item.$isPopupContent) {
				if (this.$item.$opened === undefined) {
					this.$item.$opened = false;
				}
			}
			if (this.isTabLayout) {
				delete this.$item.$opened;
			}
			this.ensureLayoutMode();
			if (this.$item.$width) {
				this.domItem.style.width = this.$item.$width;
			}
			if (!this.$item.$isPopupContent) {
				this.domItem.appendChild(this.body);
			}
			if (this.layoutSlot) {
				this.layoutSlot.appendChild(this.domItem);
			}
			this.setDescription(this.$item.$description);

			this.applyDesignMetaData(this.$item, false);
			this.openBox(!this.tabTitle && this.$item.$opened !== false, true, true);
		}
	},
	appendHeader: function() {
		this.header = document.createElement("header");
		this.header.className = this.$skin + "-head";
		var $title = this.$item.$title;
		if (this.$item.$style) {
			if (this.$item.$style == "header") {
				if ($title == "-") {
					$title = "";
					this.$item.$isTitleHidden = true;
				}
			}
			this.header.className += " s-cst-sty-" + this.$item.$style;
		}
		this.header.style.display = "none";
		this.header.appendChild(this._createBoxTitle());
		this.domItem.appendChild(this.header);

		if (this.$field && (!$title || $title == "-")) {
			$title = this.$field.$title;
		}
		this.setTitle($title);
	},
	doOpenPicker: function() {
		var self = this;
		self.openBox(self.$opened);
		if (self.$item.$isPopupContent) {
			if (!self._popupMenus) {
				self._popupMenus = syra_site.dialogManager.openPopup(self, {
					content: self,
					slot: self.body,
					position: {
						my: "right top",
						at: "right bottom",
						of: $(self.titleMenu ? self.header : self.domTitle)
					},
					onClose: function() {
						if (self.domTitle) {
							syra_site.dom.toggleClass(self.domTitle, "s-close", true);
						}
						self.$opened = false;
						self._popupMenus = null;
					}
				});
			} else {
				self._popupMenus.close();
			}
		}
	},
	expandBody: function($opened, event) {
		var self = this;
		if (event) {
			if (event.shiftKey) {
				if (self.page.isBoxesExpanded === undefined) {
					self.page.isBoxesExpanded = true;
				}
				boxHelper.expandSiblingBoxes(self, self.page.isBoxesExpanded = !self.page.isBoxesExpanded);
			}
		}
		self.$opened = ($opened === undefined) ? !self.$opened : $opened;
		var isFirstTime = !self.loaded || false;
		if (self.menuGroupRoot && self.menuGroupRoot.contextField) {
			if (!self.menuGroupRoot.contextField.$isDisabled) {
				self.menuGroupRoot.contextField.page.externalAdapter.onFieldClickPicker({
					field: self.menuGroupRoot.contextField,
					pickerType: "menus",
					doEvent: function() {
						self.doOpenPicker();
					}
				});
			}
		} else {
			self.page.externalAdapter.onBoxToggle({
				box: self,
				open: self.$opened,
				isFirstTime: isFirstTime,
				doEvent: function() {
					self.doOpenPicker();
					if (!self.$item.$isPopupContent) {
						self.articleParent.ensureArticleVisibility(true, self);
					}
				}
			});
		}
		if (self.expandPicker) {
			self.expandPicker.title = self.$opened ? self.localize.box_collapse : self.localize.box_expand;
			syra_site.dom.toggleClass(self.expandPicker, "s-close", !self.$opened);
		}
		self.ensurePickersVisibiliy();
	},
	renderLayoutContent: function() {
		this.layoutContent = this.page.createNewItem(this.$item.$layout, this);
		this.layoutContent.layoutSlot = this.body;
		this.layoutContent.loadBox();
	},

	openBox: function(open, load, drawing) {
		if ((open || load) && !this.loaded) {
			this.renderLayoutContent();
			this.loaded = true;
		}
		this.$opened = open;
		if (this.tabTitle) {
			if (open) {
				this.ensureLayoutMode();
			}
			if (!drawing) {
				if (open) {
					this.$item.$opened = true;
				} else {
					delete this.$item.$opened;
				}
			}
			syra_site.dom.toggleClass(this.tabTitle, "s-tab-open", open);
		}
		if (this.$item.$isBoxCollapsable) {
			if (this.expandPicker) {
				syra_site.dom.toggleClass(this.expandPicker, "s-close", !open);
				this.expandPicker.syraOnClick = "onOpenerClick";
			}
			this.domTitle.syraOnClick = "onOpenerClick";
			syra_site.dom.toggleClass(this.domTitle, "s-close", !open);
		}
		this.showBody(open);
		this.ensurePickersVisibiliy();
	},
	showBody: function(show) {
		this.body.style.height = this.body.style.width = show ? "" : "0px";
		this.body.style.borderWidth = this.body.style.padding = show ? "" : "0";
		this.body.style.overflow = show ? "" : "hidden";
	},
	ensureLayoutMode: function() {
		this.ensureSkin();
		if (this.domItem) {
			var domItemCss, bodyCss, domTitleCss, headerCss;
			var $style;
			if (this.$item.$style) {
				$style = " s-cst-sty-" + this.$item.$style;
			}
			if (this.isTabLayout) {
				if (!this.tabTitle || this.isTabTitleRemoved) {
					boxHelper.appendTabTitle(this);
					this.tabTitle.syraItem = this.tabTitle.syrainout = this.id;
					this.isTabTitleRemoved = null;
					if (this.pickers) {
						if (this.pickers.slot) {
							syra_site.dom.removeChild(this.pickers.slot);
						}
						this.pickers = null;
						boxHelper.applyPickerMetadata(this, this.$item);
					}

				}
				domItemCss = this.$skin + "-tab-box";
				bodyCss = this.$skin + "-tab-body";
				syra_site.dom.toggleClass(this.tabTitle, "s-tab-open", this.$opened);
				this.showBody(this.$opened);
				if ($style) {
					domItemCss += $style;
					bodyCss += $style;
					this.tabTitle.className += $style;
				}
			} else {
				if (this.tabTitle) {
					syra_site.dom.removeChild(this.tabTitle);
					delete this.tabTitle;
					delete this.tabTitleHead;
					delete this.tabTitleText;
					if (this.header) {
						this.header.style.display = "";
					}
					this.showBody(true);
					if (this.pickers) {
						if (this.pickers.slot) {
							syra_site.dom.removeChild(this.pickers.slot);
						}
						this.pickers = null;
						boxHelper.applyPickerMetadata(this, this.$item);
					}
				}
				domItemCss = this.$skin;
				headerCss = this.$skin + "-head";
				domTitleCss = this.$skin + "-title";
				bodyCss = this.$skin + "-body";
				if (this.$item.$css) {
					var $css = " " + this.$item.$css;
					domItemCss += $css;
					bodyCss += $css;
					headerCss += $css;
					domTitleCss += $css;
				}
				if (this.$item.$isPopupContent) {
					headerCss += " s-popup";
					bodyCss += " s-popup";
					domTitleCss += " s-popup";
					if (this.expandPicker) {
						this.expandPicker.className += " s-popup";
					}
				}
				if (this.$item.$titleIcon) {
					if (this.$item.$titleIcon.$mode === "icon") {
						domTitleCss += " s-icon";
						headerCss += " s-icon";
					}
				}
				if ($style) {
					domItemCss += $style;
					headerCss += $style;
					domTitleCss += $style;
					bodyCss += $style;
				}
			}
			this.domItem.className = domItemCss;
			this.body.className = bodyCss;
			if (this.domTitle) {
				this.domTitle.className = domTitleCss;
			}
			if (this.header) {
				this.header.className = headerCss;
			}
			if (this.layoutParent) {
				this.layoutParent.ensureLayoutSlot(this);
			}
			if (this.$item.$slotStyle && this.layoutSlot) {
				this.layoutSlot.className += " " + this.$item.$slotStyle;
			}
		}
	},
	showItem: function(show) {
		this.isItemHidden = !show;
		var display = show ? "" : "none";
		if (this.domItem) {
			this.domItem.style.display = display;
		}
		if (this.tabTitle) {
			this.tabTitle.style.display = display;
		}
		if (this.layoutParent) {
			this.layoutParent.ensureItemVisibility(this, !show);
		}

		if (this.articleParent) {
			this.articleParent.onBoxToggled(this, !show);
		}
	},
	setState: function(state) {
		if (state.$isHidden !== undefined) {
			if (this.$isHidden !== state.$isHidden) {
				this.showItem(!(this.$isHidden = state.$isHidden));
			}
		}
	},
	dispose: function() {
		delete repository[this.id];
		syra_site.dialogManager.closeAll(this);
		this.childrenSection = null;
		if (this.layoutContent) {
			this.layoutContent.dispose();
		}
		this.expandPicker = this.pickers = this.$item = this.layoutSlot = this.layoutContent = null;
		this.titleMenu = this.localize = this.domItem = this.body = this.header = null;
		this.tabTitleHead = this.tabTitleText = this.tabTitle = this.domTitle = this.domDescription = this.titleLabel = this._iconTitle = null;
		this.rowSeparator = null;
		this.childrenSection = this.layoutParent = this.boxParent = this.articleParent = this.page = this.dataStore = null;
		this.disposed = true;
	}
});