"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

var _templatePattern = /(\{.*?\})/g;

function Box(){
}

exports.Box = helpers.defineClass(Box, null, {
    getDefaultTitle: function(){
        if (!this.localize) {
            this.localize = locale.resources(module)();
        }
        return this.localize["box_" + this.$authoringLevel + "Title"];
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        this.setState(metaData);
        
        if (metaData.$isTitleHidden !== undefined) {
            this.$item.$isTitleHidden = metaData.$isTitleHidden;
            if (!this._tabTitle) {
                this._header.style.display = metaData.$isTitleHidden ? "none" : "";
            }
        }
        if (metaData.$isBoxCollapsable !== undefined) {
            this.$item.$isBoxCollapsable = metaData.$isBoxCollapsable;
            if (this.$item.$isBoxCollapsable) {
                document.site.toggleClass(this.domTitle, "s-picker", true);
                if (!(this.$opened = this.$item.$opened !== false)) {
                    document.site.toggleClass(this.domTitle, "s-close", true);
                }
            }
            else {
                document.site.toggleClass(this.domTitle, "s-close", false);
                document.site.toggleClass(this.domTitle, "s-picker", false);
            }
            if (onAuthoring) {
                if (!this.$item.$isBoxCollapsable && !this.$opened) {
                    this.expandBox(true);
                }
            }
        }
        if (metaData.$isRefreshable !== undefined) {
            this.togglePicker("refresh", this.$item.$isRefreshable = metaData.$isRefreshable);
        }
        if (metaData.$isMaximizable !== undefined) {
            this.togglePicker("maximize", this.$item.$isMaximizable = metaData.$isMaximizable);
        }
        
        if (onAuthoring !== false) {
            if (metaData.$title !== undefined) {
                this.setTitle(this.$item.$title = metaData.$title);
            }
            if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
                this.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
            }
            if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
                this.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
            }
            if (metaData.$field !== undefined) {
                this.$item.$field = this.$item.$field || {};
                var $props = Object.keys(metaData.$field);
                for (var ii = 0, jj = $props.length; ii < jj; ii++) {
                    var $prop = $props[ii];
                    this.$item.$field[$prop] = metaData.$field[$prop];
                }
            }
        }
    },
    getArticle: function(){
        return this.boxParent ? this.boxParent.getArticle() : null;
    },
    loadBox: function(){
        this.isVisible = true;
        this.drawBox();
    },
    getTitle: function(applyDefault){
        var title = this._textTitle.textContent || this.$item.$title || "";
        if ((title.trim() == "") && (applyDefault !== false)) {
            title = this.getDefaultTitle();
        }
        return title;
    },
    setTitle: function(title){
        if (this.domTitle) {
            if (title != null && title != "") {
                var displayTitle = title;
                this.domTitle.style.display = "";
                if (displayTitle == "-") {
                    displayTitle = "";
                }
                if (displayTitle.indexOf("{") < 0) {
                    this._textTitle.textContent = displayTitle;
                    if (this._tabTitle) {
                        this._tabTitle.textContent = displayTitle;
                        this._tabTitle.setAttribute("title", displayTitle);
                    }
                    this.domTitle.setAttribute("title", displayTitle);
                }
                else {
                    this._textTitle.textContent = "";
                    this._renderExpression(displayTitle, this._textTitle, this.$skin + "-title-field", false);
                }
            }
            else {
                this.domTitle.style.display = "none";
                if (this._tabTitle) {
                    this._tabTitle.textContent = title = this.getDefaultTitle();
                    this._tabTitle.setAttribute("title", title);
                }
            }
            if (!this._tabTitle) {
                this._header.style.display = (title != null && title != "") && !this.$item.$isTitleHidden ? "" : "none";
            }
        }
    },
    _setTitleIcon: function(){
        this._iconTitle = document.createElement("div");
        this._iconTitle.className = this.$skin + "-title-icon";
        this.domTitle.appendChild(this._iconTitle);
        if (this.$item.$titleIcon.$cssName) {
            this._iconTitle.className += " " + this.$item.$titleIcon.$cssValue;
        }
        else {
            var $path = document.site.$item.$iconPath + (this.$item.$titleIcon.$path || "");
            this._iconTitle.style.backgroundImage = "url('" + $path + this.$item.$titleIcon.$value + ".png')";
        }
        this._textTitle = document.createElement("div");
        this._textTitle.className = this.$skin + "-title-text s-icon";
        this.domTitle.appendChild(this._textTitle);
    },
    _createBoxTitle: function(){
        this._textTitle = this.domTitle = this.domTitle || document.createElement("a");
        this.domTitle.style.display = "none";
        this.domTitle.className = this.$skin + "-title";
        this.domTitle.setAttribute("data-s-box", this.id);
        if (this.$item.$titleIcon) {
            this._setTitleIcon();
            if (this.$item.$titleIcon.$mode === "icon") {
                this.domTitle.style.display = "";
            }
        }
        return this.domTitle;
    },
    setDescription: function($description){
        if ($description && this._header) {
            if (!this.domDescription) {
                this.domDescription = document.createElement("div");
                this.domDescription.className = this.$skin + "-description";
                this._header.appendChild(this.domDescription);
            }
            if ($description.indexOf("{") < 0) {
                this.domDescription.textContent = $description;
                if (this._tabTitle) {
                    this._tabTitle.title = $description; //to improve manage expression
                }
            }
            else {
                this._renderExpression($description, this.domDescription, this.$skin + "-description-field", false);
            }
        }
    },
    ensureSkin: function(){
        this.$skin = this.$skin || this.$item.$skin;
    },
    drawBox: function(){
        this.ensureSkin();
        this._item = document.createElement("div");
        this.$$item = $(this._item = document.createElement("div"));
        
        if (this.$item.$expression) {
            if (this.$item.$css) {
                this._item.className = this.$item.$css;
            }
            this.layoutSlot.appendChild(this._item);
            this.$isEditMode = this.getArticle().$isEditMode;
            this._renderExpression(this.$item.$expression, this._item);
        }
        else {
            this.$$body = $(this._body = document.createElement("div"));
            this._body.style.display = "none";
            this.appendHeader();
            this.ensureLayoutMode();
            if (this.$item.$width) {
                this._item.style.width = this.$item.$width;
            }
            this._item.appendChild(this._body);
            if (this.layoutSlot) {
                this.layoutSlot.appendChild(this._item);
            }
            this.setDescription(this.$item.$description);
            if (this.$item.$isPopupContent) {
                this.$item.$opened = false
                this._body.className += " s-box-popup";
            }
            this.applyDesignMetaData(this.$item, false);
            
            this.openBox(!this._tabTitle && this.$item.$opened !== false);
            if (!this.loaded && this.page.$facet == "$edit") {
                this._renderLayoutContent();
                this.loaded = true;
            }
        }
    },
    appendHeader: function(){
        this._header = document.createElement("header");
        this._header.className = this.$skin + "-head";
        var $title = this.$item.$title;
        if (this.$item.$style) {
            if (this.$item.$style == "header") {
                if ($title == "-") {
                    $title = "";
                    this.$item.$isTitleHidden = true;
                }
            }
            this._header.className += " s-cst-sty-" + this.$item.$style;
        }
        this._header.style.display = "none";
        this._header.appendChild(this._createBoxTitle());
        this._item.appendChild(this._header);
        
        if (!$title || $title == "-") {
            if (this.$item.$applyDefaultTitle) {
                this.$item.$title = $title = this.getDefaultTitle();
                delete this.$item.$applyDefaultTitle;
            }
            else {
                if (this.$field) {
                    $title = this.$field.$title;
                }
            }
        }
        this.setTitle($title);
    },
    togglePicker: function(pickerId, show){
        if (show) {
            if (!this._pickersSlot) {
                this._pickers = {};
                this._pickersSlot = document.createElement("div");
                this._pickersSlot.setAttribute("data-s-box", this.id);
                if (this._tabTitle) {
                    this._pickersSlot.className = this.$skin + "-pickers-body";
                    this.$$body.prepend(this._pickersSlot);
                }
                else {
                    this._pickersSlot.className = this.$skin + "-pickers";
                    this._header.appendChild(this._pickersSlot);
                }
            }
            var picker = this._pickers[pickerId] = document.createElement("a");
            picker.className = this.$skin + "-" + pickerId;
            picker.setAttribute("data-s-box-picker", pickerId);
            this._pickersSlot.appendChild(picker);
        }
        else {
            if (this._pickers && this._pickers[pickerId]) {
                document.site.removeDomChild(this._pickers[pickerId]);
                delete this._pickers[pickerId];
            }
        }
    },
    doPicker: function(pickerId, callback){
        var self = this;
        setTimeout(function(){
            switch (pickerId) {
                case "maximize":
                    if (!self.$$memBody) {
                        self.$$memBody = $(document.createElement("div"));
                    }
                    self.$$memBody.empty().append(self.page.$$body.children());
                    self.page.$$body.append(self.$$item);
                    if (callback) {
                        callback(self, self.page);
                    }
                    
                    self._$isMaximized = true;
                    self._pickers.maximize.className = self.$skin + "-maximize s-minimize";
                    self._pickers.maximize.setAttribute("data-s-box-picker", "minimize");
                    break;
                case "minimize":
                    self.layoutSlot.appendChild(self.$$item[0]);
                    self.page.$$body.append(self.$$memBody.children());
                    self.$$memBody.remove();
                    delete self.$$memBody;
                    if (callback) {
                        callback(self, self.page);
                    }
                    self._$isMaximized = false;
                    self._pickers.maximize.className = self.$skin + "-maximize";
                    self._pickers.maximize.setAttribute("data-s-box-picker", "maximize");
                    break;
            }
        }, 20);
    },
    
    doOpenPicker: function(){
        var self = this;
        self.openBox(self.$opened);
        if (self.$item.$isPopupContent) {
            if (!self._popupMenus) {
                self._popupMenus = self.openDialog({
                    $dialogMode: "popup",
                    content: self,
                    $$dialog: self.$$body,
                    position: {
                        my: "right top",
                        at: "right bottom",
                        of: $(self.domTitle)
                    },
                    onClose: function(){
                        setTimeout(function(){
                            if (self.domTitle) {
                                document.site.toggleClass(self.domTitle, "s-close", true);
                            }
                            self._popupMenus = null;
                        }, 200);
                    }
                });
            }
            else {
                self._popupMenus.close();
            }
        }
    },
    expandBox: function(expand){
        var self = this;
        if (expand === undefined) {
            self.$opened = !self.$opened;
        }
        else {
            self.$opened = expand;
        }
        var isFirstTime = !self.loaded || false;
        if (self.$opened) {
            document.site.resize(true);
        }
        if (self.menuGroupRoot && self.menuGroupRoot.contextField) {
            if (!self.menuGroupRoot.contextField.$isDisabled) {
                self.menuGroupRoot.contextField.page.externalAdapter.onFieldClickPicker({
                    field: self.menuGroupRoot.contextField,
                    pickerType: "menus",
                    doEvent: function(){
                        self.doOpenPicker();
                    }
                });
            }
        }
        else {
            self.page.externalAdapter.onBoxToggle({
                box: self,
                open: self.$opened,
                isFirstTime: isFirstTime,
                doEvent: function(){
                    self.doOpenPicker();
                }
            });
        }
    },
    _renderLayoutContent: function(){
        this.layoutContent = this.page.createNewItem(this.$item.$layout, this);
        this.layoutContent.layoutSlot = this.$$body[0];
        this.layoutContent.render();
    },
    _renderExpression: function(expression, layoutSlot, $fieldCss, $isEditMode){
        var self = this;
        var article = self.getArticle();
        var html = expression;
        if (expression[1] == "@") {
            var text = article.parseExpression(expression);
            if (layoutSlot) { //!important used by expression
                layoutSlot.textContent = text;
            }
            return text;
        }
        var matches = expression.match(_templatePattern).map(function(match, index){
            html = html.replace(match, "<div data-s-match='" + index + "'>" + match + "</div>");
            return {
                expression: match,
                property: match.substr(1, match.length - 2)
            };
        });
        $(layoutSlot).append(html).find("div").each(function(index, domMatch){
            var $$match = $(domMatch);
            var match = matches[parseInt(domMatch.getAttribute("data-s-match"), 10)];
            if (match.property.charAt(0) == "$") {
                var value = article.matchProperty(match.expression, match.property, article.dataset);
                if (value != null) {
                    if (value.indexOf && value.indexOf("{") >= 0) {
                        document.site.emptyDom(domMatch);
                        self._renderExpression(value, domMatch, $fieldCss, $isEditMode);
                    }
                    else {
                        domMatch.textContent = value;
                    }
                }
            }
            else {
                document.site.emptyDom(domMatch);
                self.page.loadNewItem(domMatch, {
                    $isMenusDisabled: true,
                    $isExpressionChild: true,
                    $bind: match.property,
                    $inplace: true,
                    $isEditMode: $isEditMode === undefined ? self.$isEditMode : $isEditMode,
                    $css: "s-expression " + $fieldCss,
                    $skin: "s-inplace"
                }, article);
            }
        });
    },
    _applyDiagnoseState: function(){
        if (this.boxDiagnose && this.boxDiagnose.diagClassName && this._tabTitle) {
            document.site.toggleClass(this._tabTitle, this.boxDiagnose.diagClassName, true);
        }
    },
    openBox: function(open){
        if (open && !this.loaded) {
            this._renderLayoutContent();
            this.loaded = true;
        }
        if (this._tabTitle) {
            if (open) {
                this.ensureLayoutMode();
                if (this.layoutParent.tabOpened !== undefined) {
                    this.layoutParent.tabOpened.openBox(false);
                }
                this.layoutParent.tabOpened = this;
                this.$item.$opened = true;
            }
            else {
                delete this.$item.$opened;
            }
            document.site.toggleClass(this._tabTitle, "s-tab-open", open);
            this.layoutSlot.style.display = open ? "" : "none";
            this._item.style.display = open ? "" : "none";
        }
        if (this.$item.$isBoxCollapsable) {
            document.site.toggleClass(this.domTitle, "s-close", !open);
        }
        this._applyDiagnoseState();
        this._body.style.display = open ? "" : "none";
        if (this.$item.onOpen) {
            this.$item.onOpen(this);
        }
    },
    ensureLayoutMode: function(){
        if (this._item) {
            this.ensureSkin();
            var $style;
            if (this.$item.$style) {
                $style = " s-cst-sty-" + this.$item.$style;
            }
            if (this.isTabLayout) {
                if (!this._tabTitle) {
                    this._tabTitle = document.createElement("a");
                    this._tabTitle.className = this.$skin + "-tab";
                    this._tabTitle.setAttribute("href", "#");
                    this._tabTitle.setAttribute("data-s-box", this.id);
                    this._tabTitle.textContent = this.getTitle();
                    this.layoutParent.appendTab(this);
                    this._header.style.display = "none";
                }
                this._item.className = this.$skin + "-tab-box";
                this._body.className = this.$skin + "-tab-body";
                if (this.$item.$opened) {
                    document.site.toggleClass(this._tabTitle, "s-tab-open", true);
                    //this._body.style.display = "none";	
                }
                else {
                    document.site.toggleClass(this._tabTitle, "s-tab-open", false);
                    this._body.style.display = "none";
                }
                if ($style) {
                    this._item.className += $style;
                    this._body.className += $style;
                    this._tabTitle.className += $style;
                }
            }
            else {
                if (this._tabTitle) {
                    document.site.removeDomChild(this._tabTitle);
                    delete this._tabTitle;
                    this._header.style.display = "";
                    this._item.style.display = "";
                    this._body.style.display = "";
                    this.layoutSlot.style.display = "";
                }
                this._item.className = this.$skin;
                this._header.className = this.$skin + "-head";
                this.domTitle.className = this.$skin + "-title";
                this._body.className = this.$skin + "-body";
                if (this.$item.$css) {
                    var $css = " " + this.$item.$css;
                    this._item.className += $css;
                    this._body.className += $css;
                    this._header.className += $css;
                    if (this.domTitle) {
                        this.domTitle.className += $css;
                    }
                    
                }
                if ($style) {
                    this._item.className += $style;
                    this._header.className += $style;
                    this.domTitle.className += $style;
                    this._body.className += $style;
                }
            }
            if (this.layoutParent) {
                this.layoutParent.ensureLayoutSlot(this);
            }
            if (this.$item.$slotStyle && this.layoutSlot) {
                this.layoutSlot.className += " " + this.$item.$slotStyle;
            }
            if (this.page.authoringPage) {
                this.page.authoringPage.toggleItemAuthoring(this, true);
            }
        }
    },
    setState: function(state){
        if (state.$isHidden !== undefined || state.$isExcluded !== undefined) {
            if (state.$isHidden !== undefined) {
                this.$isHidden = state.$isHidden;
            }
            if (state.$isExcluded !== undefined) {
                this.$item.$isExcluded = state.$isExcluded;
            }
            this.isVisible = !(this.$isHidden || this.$item.$isExcluded);
            var display = this.isVisible ? "" : "none";
            this._item.style.display = display;
            if (this._tabTitle) {
                this._tabTitle.style.display = display;
            }
            if (this.layoutSlot && !this.$item.$isPopupContent) {
                //test $isPopupContent imortant for reference field
                this.layoutSlot.style.display = display;
            }
            if (this.rowSeparator) {
                this.rowSeparator.style.display = display;
            }
        }
    },
    openDialog: function(options){
        options.boxParent = this;
        var dialog = document.site.openDialog(options);
        if (!this._dialogs) {
            this._dialogs = [];
        }
        this._dialogs.push(dialog);
        return dialog;
    },
    closeDialog: function(dialog){
        if (this._dialogs) {
            for (var ii = 0, jj = this._dialogs.length; ii < jj; ii++) {
                if (this._dialogs[ii] == dialog) {
                    this._dialogs.splice(ii, 1);
                    break;
                }
            }
        }
    },
    closeDialogs: function(dispose){
        if (this._dialogs) {
            for (var ii = 0, jj = this._dialogs.length; ii < jj; ii++) {
                this._dialogs[ii].close(undefined, dispose);
                this._dialogs[ii] = null;
            }
            this._dialogs = null;
        }
    },
    dispose: function(){
        if (this.boxDiagnose) {
            this.boxDiagnose.dispose();
            delete this.boxDiagnose;
        }
        if (this.articleDiagnose) {
            this.articleDiagnose.dispose();
            delete this.articleDiagnose;
        }
        this.closeDialogs();
        this.localize = this._item = this.$$item = this._body = this.$$body = this._header = null;
        this._tabTitle = this.domTitle = this.domDescription = this._textTitle = this._iconTitle = null;
        this.page = null;
    }
});

