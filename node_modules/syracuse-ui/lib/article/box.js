"use strict";
var helpers = require('syracuse-core/lib/helpers');

var Layout = require("syracuse-ui/lib/article/layouts/layout").Layout;
var locale = require('syracuse-core/lib/locale');
var boxHelper = require('./boxHelper');

function Box(){
}

exports.Box = helpers.defineClass(Box, null, {
    appendLayout: function($layout){
        $layout.$layoutType = $layout.$layoutType || "stack";
        var layout = new Layout();
        layout.box = this;
        var article = this.articleParent || this;
        layout.id = this.id + "-" + (++article._childLayoutOffset);
        article.layouts[layout.id] = layout;
        layout.$layout = $layout;
        return layout;
    },
    getDefaultTitle: function(){
        var localize = locale.resources(module)();
        return localize.box_blockTitle;
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        this.setState(metaData);
        
        if (metaData.$isTitleHidden !== undefined) {
            this.$item.$isTitleHidden = metaData.$isTitleHidden;
            if (!this._tabTitle) {
                this._header.style.display = metaData.$isTitleHidden ? "none" : "";
            }
        }
        if (metaData.$isBoxCollapsable !== undefined) {
            this.setCollapsable(this.$item.$isBoxCollapsable = metaData.$isBoxCollapsable);
        }
        if (metaData.$isRefreshable !== undefined) {
            boxHelper.togglePicker(this, "refresh", this.$item.$isRefreshable = metaData.$isRefreshable);
        }
        if (metaData.$isMaximizable !== undefined) {
            boxHelper.togglePicker(this, "maximize", this.$item.$isMaximizable = metaData.$isMaximizable);
        }
        
        if (onAuthoring !== false) {
            if (metaData.$title !== undefined) {
                this.setTitle(this.$item.$title = metaData.$title);
            }
            if (metaData.$isSeparatorsVisible !== undefined) {
                this.$item.$isSeparatorsVisible = metaData.$isSeparatorsVisible;
                if (this.layoutContent) {
                    this.layoutContent.toggleSeparator(this.$item.$isSeparatorsVisible, true);
                }
            }
            if (metaData.$fieldsWidth !== undefined) {
                this.$item.$fieldsWidth = metaData.$fieldsWidth;
                this.layoutContent.render(true);
            }
            if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
                this.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
            }
            if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
                this.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
            }
            if (metaData.$field !== undefined) {
                this.$item.$field = this.$item.$field || {};
                var $props = Object.keys(metaData.$field);
                for (var ii = 0, jj = $props.length; ii < jj; ii++) {
                    var $prop = $props[ii];
                    this.$item.$field[$prop] = metaData.$field[$prop];
                }
            }
            if (metaData.$layout !== undefined) {
                var oldLayout = this.layoutContent;
                oldLayout && oldLayout.toggleAuthoring(false);
                //$newLayout.$items = oldLayout.$layout.$items;
                this.layoutContent = this.appendLayout(metaData.$layout);
                this.$item.$layout = metaData.$layout;
                document.site.layoutAuthoring && document.site.layoutAuthoring.convertLayout(this.layoutContent, oldLayout);
                oldLayout && document.controller.disposeObject(oldLayout);
            }
        }
    },
    setCollapsable: function($isBoxCollapsable){
        boxHelper.setCollapsable(this, $isBoxCollapsable);
    },
    _loadChildItem: function(item, layoutParent, $$container){
    
    },
    getArticle: function(){
        return this.boxParent ? this.boxParent.getArticle() : null;
    },
    loadBox: function(){
        this.$authoringLevel = this.$authoringLevel || "block";
        this.drawBox();
    },
    getTitle: function(){
        var title = this.domTitle.textContent || this.$item.$title || "";
        if (title.trim() == "") {
            title = this.getDefaultTitle();
        }
        return title;
    },
    setTitle: function(title){
        if (this.domTitle) {
            if (title) {
                this.domTitle.style.display = "";
                if (title == "-") {
                    title = "";
                }
                if (title.indexOf("{") < 0) {
                    this.domTitle.textContent = title;
                    if (this._tabTitle) {
                        this._tabTitle.textContent = title;
                    }
                }
                else {
                    this._renderExpression(title, $(this.domTitle).empty(), this.$skin + "-title-field", false);
                }
            }
            else {
                this.domTitle.style.display = "none";
                if (this._tabTitle) {
                    this._tabTitle.textContent = title = this.getDefaultTitle();
                }
            }
            this._header.style.display = title && !this.$item.$isTitleHidden ? "" : "none";
        }
    },
    _createBoxTitle: function(){
        this.domTitle = this.domTitle || document.createElement("a");
        this.domTitle.style.display = "none";
        this.domTitle.className = this.$skin + "-title";
        this.domTitle.setAttribute("data-s-box", this.id);
        return this.domTitle;
    },
    renderDescription: function($description){
        if ($description) {
            if (!this.domDescription) {
                this.domDescription = document.createElement("div");
                this.domDescription.className = this.$skin + "-description";
                this._header.appendChild(this.domDescription);
            }
            if ($description.indexOf("{") < 0) {
                this.domDescription.textContent = $description;
                if (this._tabTitle) {
                    this._tabTitle.title = $description; //to improve manage expression
                }
            }
            else {
                this._renderExpression($description, $(this.domDescription), this.$skin + "-description-field", false);
            }
        }
    },
    _ensureSkin: function(blockType){
        this.$skin = this.$item.$skin;
        if (!this.$skin) {
            var $layoutOptions = this.getArticle().$layoutOptions || this.page.$layoutOptions;
            if ($layoutOptions) {
                this.$skin = $layoutOptions[blockType];
            }
        }
    },
    drawBox: function(){
        this.$skin = this.$skin || this.$item.$skin;
        this._item = document.createElement("div");
        this.$$item = $(this._item = document.createElement("div"));
        if (this.$item.$expression) {
            if (this.$item.$css) {
                this._item.className = this.$item.$css;
            }
            this.$$container[0].appendChild(this._item);
            this.$isEditMode = this.getArticle().$isEditMode;
            this._renderExpression(this.$item.$expression, this.$$item);
        }
        else {
            this.$$body = $(this._body = document.createElement("div"));
            this._body.style.display = "none";
            this.appendHeader();
            this.ensureLayoutMode();
            if (this.authoringNode) {
                this.authoringNode.setDesignableItem(this, true); //bonne place ??
            }
            if (this.$item.$width) {
                this._item.style.width = this.$item.$width;
            }
            this._item.appendChild(this._body);
            this.$$container[0].appendChild(this._item);
            this.renderDescription(this.$item.$description);
            this.applyDesignMetaData(this.$item, false);
            this.openBox(!this._tabTitle && this.$item.$opened !== false);
            if (!this.loaded && this.page.$facet == "$edit") {
                this._renderLayoutContent();
                this.loaded = true;
            }
        }
    },
    appendHeader: function(){
        this._header = document.createElement("header");
        this._header.className = this.$skin + "-head";
        this._header.style.display = "none";
        this.$$header = $(this._header);
        this._header.appendChild(this._createBoxTitle());
        this.$$item.prepend(this._header);
        this.setTitle(this.$item.$title || (this.$field ? this.$field.$title : null));
    },
    doPicker: function(pickerId, callback){
        boxHelper.doPicker(this, pickerId, callback);
    },
    _renderLayoutContent: function(){
        this.layoutContent = this.appendLayout(this.$item.$layout);
        this.layoutContent.$$container = this.$$body;
        this.layoutContent.render();
        if (document.site.authorPage) {
            this.layoutContent.toggleAuthoring(true);
        }
    },
    _renderExpression: function(expression, $$container, $fieldCss, $isEditMode){
        return boxHelper.renderExpression(this, expression, $$container, $fieldCss, $isEditMode);
    },
    _applyDiagnoseState: function(){
        if (this.boxDiagnose && this.boxDiagnose.diagClassName && this._tabTitle) {
            document.site.toggleClass(this._tabTitle, this.boxDiagnose.diagClassName, true);
        }
    },
    openBox: function(open){
        if (open && !this.loaded) {
            this._renderLayoutContent();
            this.loaded = true;
        }
        if (this._tabTitle) {
            if (open) {
                if (this.layoutParent.tabOpened !== undefined) {
                    this.layoutParent.tabOpened.openBox(false);
                }
                this.layoutParent.tabOpened = this;
                this.$item.$opened = true;
            }
            else {
                delete this.$item.$opened;
            }
            this._tabTitle.className = this.$skin + (open ? "-tab-open" : "-tab");
            if (this.authoringNode) {
                this.authoringNode.ensureItemCss(this,true);
            }
            this._item.style.display = open ? "" : "none";
        }
        if (this.$item.$isBoxCollapsable) {
            document.site.toggleClass(this.domTitle, "s-close", !open);
        }
        this._applyDiagnoseState();
        this._body.style.display = open ? "" : "none";
        if (this.$item.onOpen) {
            this.$item.onOpen(this);
        }
    },
    ensureLayoutMode: function(){
        if (this.$isTabLayout) {
            if (!this._tabTitle) {
                boxHelper.appendTabTitle(this);
                this._header.style.display = "none";
            }
            this._item.className = this.$skin + "-tab-box";
            this._body.className = this.$skin + "-tab-body";
            if (this.$item.$opened) {
                this._tabTitle.className = this.$skin + "-tab-open";
                //this._body.style.display = "none";	
            }
            else {
                this._tabTitle.className = this.$skin + "-tab";
                this._body.style.display = "none";
            }
        }
        else {
            if (this._tabTitle) {
                delete this._tabTitle;
                this._header.style.display = "";
                this._item.style.display = "";
                this._body.style.display = "";
            }
            this._item.className = this.$skin;
            this._header.className = this.$skin + "-head";
            this.domTitle.className = this.$skin + "-title";
            this._body.className = this.$skin + "-body";
            if (this.$item.$css) {
                var $css = " " + this.$item.$css;
                this._item.className += $css;
                this._body.className += $css;
                this._header.className += $css;
            }
        }
        
    },
    setState: function(state){
        if (state.$isHidden !== undefined) {
            var display = (this.$item.$isHidden = state.$isHidden) ? "none" : "";
            this._item.style.display = display;
            if (this._tabTitle) {
                this._tabTitle.style.display = display;
            }
        }
    },
    openDialog: function(options){
        return boxHelper.openDialog(this, options);
    },
    closeDialog: function(dialog){
        boxHelper.closeDialog(this, dialog);
    },
    closeDialogs: function(dispose){
        boxHelper.closeDialogs(this, dispose);
    },
    dispose: function(){
        if (this.$$item) {
            this.$$item.unbind();
        }
        if (this.boxDiagnose) {
            this.boxDiagnose.dispose();
            delete this.boxDiagnose;
        }
        this.closeDialogs();
        this._item = this.$$item = this._body = this.$$body = this._header = null;
        this._tabTitle = this.domTitle = this.domDescription = null;
        this.page = null;
    }
});


function SectionBlock(){
}

exports.SectionBlock = helpers.defineClass(SectionBlock, Box, {
    getDefaultTitle: function(){
        var localize = locale.resources(module)();
        return localize["box_" + this.$authoringLevel + "Title"];
    },
    loadBox: function(){
        this._ensureSkin(this.$authoringLevel);
        Box.prototype.loadBox.call(this);
    }
});
