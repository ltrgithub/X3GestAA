"use strict";
var helpers = require('syracuse-core/lib/helpers');

function DeltaManager(){
}

exports.DeltaManager = helpers.defineClass(DeltaManager, null, {
    applyObjectArrayDelta: function(targetList, sourceList){
        if (sourceList) {
            var self = this;
            if (targetList.length == sourceList.length) {
                sourceList.forEach(function(sourceRecord, index){
                    self.applyObjectDelta(targetList[index], sourceRecord);
                });
            }
            else {
                targetList.splice(0, targetList.length);
                sourceList.forEach(function(sourceRecord){
                    targetList.push(sourceRecord);
                });
            }
        }
        return targetList;
    },
    applyPageArrayDelta: function(targetList, sourceList){
        if (sourceList) {
            var self = this;
            var targetMap = {};
            if (self.page.$isPartialDelta || (sourceList.length == 1 && sourceList[0].$index !== undefined)) {
                sourceList.forEach(function(sourceRecord){
                    var found, foundIndex;
                    targetList.some(function(record, index){
                        if (record.$uuid == sourceRecord.$uuid) {
                            found = record;
                            foundIndex = index;
                            return true;
                        }
                        return false;
                    });
                    if (found) {
                        if (sourceRecord.$isDeleted) {
                            targetList.splice(foundIndex, 1);
                        }
                        else {
                            self.applyObjectDelta(found, sourceRecord);
                            if (sourceRecord.$index !== undefined && sourceRecord.$index != foundIndex) {
                                targetList.splice(foundIndex, 1);
                                targetList.splice(sourceRecord.$index, 0, found);
                                delete found.$index;
                            }
                        }
                    }
                    else {
                        if (!sourceRecord.$isDeleted) {
                            if (sourceRecord.$index !== undefined) {
                                targetList.splice(sourceRecord.$index, 0, sourceRecord);
                            }
                            else {
                                targetList.push(sourceRecord);
                            }
                        }
                        
                    }
                });
            }
            else {
                targetList.forEach(function(record){
                    targetMap[record.$uuid] = record;
                });
                targetList = sourceList.filter(function(record){
                    return !record.$isDeleted;
                }).map(function(record){
                    if ((record.$uuid !== undefined) && targetMap[record.$uuid]) {
                        return self.applyObjectDelta(targetMap[record.$uuid], record);
                    }
                    return record;
                });
            }
            
        }
        return targetList;
    },
    applyObjectDelta: function(target, source, isObjectDelta){
        if (source) {
            var self = this;
            Object.keys(source).forEach(function(property){
                var targetValue = target[property];
                var sourceValue = source[property];
                if (typeof(sourceValue) == 'object') {
                    if (!(targetValue == null || sourceValue === null)) {
                        if (Array.isArray(sourceValue)) {
                            if (isObjectDelta) {
                                sourceValue = self.applyObjectArrayDelta(targetValue, sourceValue);
                            }
                            else {
                                if (self.page.isDeltaMode || self.page.$isPartialDelta) {
                                    sourceValue = self.applyPageArrayDelta(targetValue, sourceValue);
                                }
                            }
                        }
                        else {
                            sourceValue = self.applyObjectDelta(targetValue, sourceValue, isObjectDelta);
                        }
                    }
                }
                target[property] = sourceValue;
            });
        }
        return target;
    }
});
