"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require('./article').Article;
var sendBagFactory = require('./sendBagFactory');
var notifyHelper = require('./notifyHelper');
var DeltaManager = require('./utility/deltaManager').DeltaManager;
var AreaScroller = require('syracuse-ui/lib/article/utility/areaScroller').AreaScroller;

var Layout = require("syracuse-ui/lib/article/layouts/layout").Layout;

var _$mainActions = {
    $cube: "$create",
    $query: "$create",
    $details: "$edit",
    $edit: "$save",
    $request: "$invoke"
};

function RawPage(){
}

exports.RawPage = helpers.defineClass(RawPage, Article, {
    scrollToItem: function(item){
        var parent = item;
        while (parent) {
            if (parent._tabTitle && !parent.$item.$opened) {
                parent.openBox(true);
            }
            parent = parent.boxParent;
        }
        var target = item._tabTitle || item.$$item[0];
        if (target) {
            if (!this.scroller) {
                this.scroller = new AreaScroller(document.site.$$body);
            }
            this.scroller.scrollToTarget(target, true);
        }
    },
    _createBoxTitle: function(){
        this.domTitle = document.createElement("div");
        return Article.prototype._createBoxTitle.call(this);
    },
    initializeNewItem: function(item, $item, boxParent){
        item.page = this;
        if ($item) {
            item.$item = $item;
            if (!item.id) {
                item.id = $item.$id;
            }
        }
        if (!item.id) {
            item.id = this.id + "-" + this._childItemOffset++;
        }
        if (boxParent) {
            item.boxParent = boxParent;
            (item.articleParent = boxParent.getArticle()).idMap[item.id] = item;
        }
        return item;
    },
    createNewLayout: function($layout, boxParent){
        $layout.$layoutType = $layout.$layoutType || "stack";
        var layout = new Layout();
        layout.box = boxParent;
        var article = boxParent.articleParent || boxParent;
        layout.id = boxParent.id + "-" + (++article._childLayoutOffset);
        article.layouts[layout.id] = layout;
        layout.$layout = $layout;
        return layout;
    },
    createNewItem: function($item, boxParent, newItem){
        var $category = $item.$category;
        if (!$category) {
            $category = $item.$bind ? "field" : "section";
        }
        var item = newItem;
        if (!item) {
            item = this._widgetCategories[$category].create($item, boxParent);
        }
        if (item) {
            this.initializeNewItem(item, $item, boxParent);
        }
        return item;
    },
    loadNewItem: function($$container, $item, boxParent, initData){
        var item = this.createNewItem($item, boxParent || this);
        if (item) {
            item.$$container = $$container;
            item.loadBox(initData);
        }
        return item;
    },
    ensureDeltaManager: function(){
        if (!this.deltaManager) {
            this.deltaManager = new DeltaManager();
            this.deltaManager.page = this;
        }
        return this.deltaManager;
    },
    dispose: function(){
        document.site.removeResizeListener(this);
        if (this.deltaManager) {
            delete this.deltaManager.page;
            delete this.deltaManager;
        }
        this.onAfterApplyPageDataChange = this.authoringPage = null;
        Article.prototype.dispose.call(this);
        this._widgetCategories = null;
    },
    applyChange: function(newData){
        if (newData && newData.$isPartialDelta) {
            this.$isPartialDelta = true;
            //delete newData.$isPartialDelta;
        }
        this.ensureDeltaManager().applyObjectDelta(this.dataset, newData);
        if (this.isPageSpyed) {
            document.site.spyGateway.spyDataset(this.dataset, newData);
        }
        Article.prototype.applyChange.call(this, newData);
        if (this.onAfterApplyPageDataChange) {
            this.onAfterApplyPageDataChange(this);
        }
        delete this.$isPartialDelta;
    },
    ensureSendBag: function(article){
        return sendBagFactory.ensureSendBag(this, article);
    },
    _initializePage: function(){
        this.page = this;
        this._widgetCategories = document.site.siteOptions.widgetsLibrary.categories;
        this._childItemOffset = this._childItemOffset || 1; //initialize for site
        if (!this.id) {
            this.id = document.site._childPageOffset++;
        }
    },
    loadBox: function(initData){
        this._initializePage();
        document.site.addResizeListener(this);
        this.isDeltaMode = this.$facet == "$edit";
        this.$skin = this.$item.$skin || this.$skin || "s-page";
        this.$authoringLevel = "article";
        this.externalAdapter = this.$item.externalAdapter || document.site.externalAdapter;
        delete this.$item.externalAdapter;
        Article.prototype.loadBox.call(this, initData);
        if (this.$autoFetch = this.$autoFetch !== false) {
            this.fetch();
        }
    },
    getMenuItem: function($bind){
        var bound = this.menuItems[$bind];
        return bound ? bound[0] : null;
    },
    appendArticleMenus: function($$slot){
        if (!$$slot) {
            this._slot = document.createElement("div");
            this._slot.className = this.$skin + "-menus-slot";
            this._slot.style.display = "none";
            var $$slot = $(this._slot);
            $$slot.prependTo(this.$$item);
        }
        if (this.$facet == "$details" || this.$facet == "$edit") {
            this.loadNewItem($$slot, {
                $skin: "s-page-menus-pager",
                $category: "menus",
                $itemIcon: {
                    $mode: "icon",
                    $path: "site/s-record-"
                },
                $layout: {
                    $layoutType: "row",
                    $items: [{
                        $bind: "$first"
                    }, {
                        $bind: "$previous"
                    }, {
                        $bind: "$lookup"
                    }, {
                        $bind: "$next"
                    }, {
                        $bind: "$last"
                    }]
                }
            });
        }
        if (!this.$item.$menus) {
            this.$item.$menus = {
                $layout: {
                    $items: []
                }
            };
            var $mainAction = _$mainActions[this.$facet];
            if ($mainAction) {
                this.$item.$menus.$layout.$items.push({
                    $style: "main",
                    $category: "menus",
                    $isBoxCollapsable: true,
                    $layout: {
                        $items: [{
                            $bind: $mainAction,
                            $style: "main"
                        }]
                    }
                }, {
                    $category: "menus",
                    $isMenusBag: true
                });
            }
            else {
                this.$item.$menus.$isMenusBag = true;
            }
        }
        else {
            if (this.$item.$menus.$isMenusBag === undefined) {
                this.$item.$menus.$isMenusBag = true;
            }
        }
        if (!this.$item.$menus.$skin) {
            this.$item.$menus.$skin = this.$defaultSkinMenu || "s-page-menus";
        }
        this.$item.$menus.$category = "menus";
        this.$item.$menus.$isCollapsable = true;
        this.loadNewItem($$slot, this.$item.$menus);
        
    },
    onMenuDataFilled: function(){
        if (this._slot) {
            this._slot.style.display = "";
        }
    },
    createField: function($field, $item, boxParent, $class){
        return null;
    },
    onWindowResize: function(){
    
    },
    notifyReorderRecords: function(list, sourceRecord, targetRecord, $insert){
        notifyHelper.notifyReorderRecords(this, list, sourceRecord, targetRecord, $insert);
    },
    notifyActionChange: function(target, value, notifyServer){
        notifyHelper.notifyActionChange(this, target, value, notifyServer);
    },
    notifyDataChange: function(field, value){
        notifyHelper.notifyDataChange(this, field, value);
    },
    notifyChangeToServer: function(sendBag){
        var self = this;
        if (!self.disposed) {
            if (self.isPageSpyed) {
                document.site.spyGateway.spyNotify(sendBag);
            }
            if (self.$prototype.$representationUrl) {
                sendBag.$url = self.$prototype.$representationUrl;
                sendBag.$etag = self.dataset.$etag;
                document.controller.sendRequest(self, {
                    data: sendBag,
                    method: "PUT",
                    $etag: sendBag.$etag
                }, function(data, response, requestUrl){
                    if (!self.disposed) {
                        self.applyChange(data, response, requestUrl);
                    }
                });
            }
        }
    },
    notifyChange: function($bind, value){
        var self = this;
        var data = self.ensureSendBag();
        if (self.dataset && self.dataset.$uuid) {
            data.$uuid = self.dataset.$uuid;
        }
        data[$bind] = value;
        data.$url = self.$prototype.$representationUrl;
        if (self.$prototype.$representationUrl) {
            data.$url = self.$prototype.$representationUrl;
            data.$etag = self.dataset.$etag;
            document.controller.sendRequest(self, {
                data: data,
                method: "PUT",
                $etag: data.$etag
            }, function(data, response, requestUrl){
                self.applyChange(data, response, requestUrl);
            });
        }
        else {
            delete data.$url;
            delete data.$etag;
            self.applyChange(data);
        }
    },
    findItemSetting: function($id, $layout){
        var found;
        for (var ii = 0, jj = $layout.$items.length; !found && ii < jj; ii++) {
            var $item = $layout.$items[ii];
            if ($item.$id == $id) {
                return $item;
            }
            else {
                if ($item.$layout) {
                    found = this.findItemSetting($id, $item.$layout);
                }
                else {
                    if ($item.$layoutType) {
                        found = this.findItemSetting($id, $item);
                    }
                }
            }
        }
        return found;
    },
    fetch: function(options, callback, error){
        if (options) {
            delete options.field;
        }
        document.controller.sendRequest(this, options, callback, error);
    }
});
