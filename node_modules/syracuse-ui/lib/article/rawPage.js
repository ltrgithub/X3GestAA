"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require('./article').Article;
var sendBagFactory = require('./sendBagFactory');
var notifyHelper = require('./notifyHelper');
var DeltaManager = require('./deltaManager').DeltaManager;

var _$menus = {
    $search: {
        $linkBox: {
            $excludeBind: ["$create", "$details", "$edit", "$prototype", "$first", "$previous", "$next", "$last"]
        }
    },
    $cube: {
        $mainAction: "$create",
        $linkBox: {
            $excludeBind: ["$details", "$edit", "$prototype", "$first", "$previous", "$next", "$last"]
        }
    },
    $query: {
        $mainAction: "$create",
        $linkBox: {
            $excludeBind: ["$details", "$edit", "$prototype", "$first", "$previous", "$next", "$last"]
        }
    },
    $details: {
        $mainAction: "$edit",
        $linkBox: {
            $excludeBind: ["$draft", "$stylesheet"]
        }
    },
    $edit: {
        $mainAction: "$save",
        $linkBox: {
            $excludeBind: ["$draft", "$stylesheet", "$prototype"]
        }
    },
    $request: {
        $mainAction: "$invoke",
        $linkBox: {}
    },
    $dashboard: {
        $linkBox: {}
    },
    $test: {
        $linkBox: {}
    }
};

function RawPage(){
}

exports.RawPage = helpers.defineClass(RawPage, Article, {
    getMenuSetting: function(){
        return _$menus[this.$facet];
    },
    initializeNewItem: function(item, $item, boxParent){
        item.page = this;
        if ($item) {
            item.$item = $item;
            item.id = item.id || $item.$id;
        }
        item.id = item.id || (this.id + "-" + this._childItemOffset++);
        if (boxParent) {
            item.boxParent = boxParent;
            boxParent.getArticle().idMap[item.id] = item;
        }
        return item;
    },
    createNewItem: function($item, boxParent){
        var item = document.site.siteOptions.widgetsLibrary.categories[$item.$category || ($item.$bind ? "field" : "section")].create($item, boxParent);
        if (item) {
            this.initializeNewItem(item, $item, boxParent);
        }
        return item;
    },
    loadNewItem: function($$container, $item, boxParent, initData){
        var item = this.createNewItem($item, boxParent || this);
        if (item) {
            item.$$container = $$container;
            item.loadBox(initData);
        }
        return item;
    },
    dispose: function(){
        document.site.removeResizeListener(this);
        if (this.deltaManager) {
            delete this.deltaManager.page;
            delete this.deltaManager;
        }
        delete this.onAfterApplyPageDataChange;
        Article.prototype.dispose.call(this);
    },
    applyChange: function(newData){
        if (newData && newData.$isPartialDelta) {
            this.$isPartialDelta = true;
            //delete newData.$isPartialDelta;
        }
        this.deltaManager.applyObjectDelta(this.dataset, newData);
        if (this.isPageSpyed) {
            document.site.spyGateway.spyDataset(this.dataset, newData);
        }
        Article.prototype.applyChange.call(this, newData);
        if (this.onAfterApplyPageDataChange) {
            this.onAfterApplyPageDataChange(this);
        }
        delete this.$isPartialDelta;
    },
    ensureSendBag: function(article){
        return sendBagFactory.ensureSendBag(this, article);
    },
    _initializePage: function(){
        this.page = this;
        this._childItemOffset = this._childItemOffset || 1; //initialize for site
        if (!this.id) {
            this.id = document.site._childPageOffset++;
        }
        if (!this.deltaManager) {
            this.deltaManager = new DeltaManager();
            this.deltaManager.page = this;
        }
    },
    loadBox: function(initData){
        this._initializePage();
        document.site.addResizeListener(this);
        this.isDeltaMode = this.$facet == "$edit";
        this.$layoutOptions = document.site.$item.$layoutOptions.page[this.$pageCategory];
        if (!this.$layoutOptions) {
            this.$layoutOptions = document.site.$item.$layoutOptions.page["page"];
        }
        this.$authoringLevel = "article";
        this.externalAdapter = this.$item.externalAdapter || document.site.externalAdapter;
        delete this.$item.externalAdapter;
        Article.prototype.loadBox.call(this, initData);
        if (this.$autoFetch = this.$autoFetch !== false) {
            this.fetch();
        }
        
    },
    appendArticleMenus: function(){
        var self = this;
        var $menus = self.getMenuSetting();
        if ($menus) {
            self._slot = document.createElement("div");
            self._slot.className = self.$skin + "-menus-slot";
            self._slot.style.display = "none";
            self.loadNewItem($(self._slot).prependTo(self.$$item), {
                $mainAction: $menus.$mainAction,
                $bind: "$linkBox",
                $skin: self.$layoutOptions.menus,
                $category: "links",
                $excludeBind: $menus.$linkBox.$excludeBind,
                onAddMenuItem: function(){
                    self._slot.style.display = "";
                }
            });
        }
    },
    onWindowResize: function(){
    
    },
    notifyReorderRecords: function(list, sourceRecord, targetRecord, $insert){
        notifyHelper.notifyReorderRecords(this, list, sourceRecord, targetRecord, $insert);
    },
    notifyActionChange: function(target, value, notifyServer){
        notifyHelper.notifyActionChange(this, target, value, notifyServer);
    },
    notifyDataChange: function(field, value){
        notifyHelper.notifyDataChange(this, field, value);
    },
    _notifyChangeToServer: function(sendBag){
        var self = this;
        if (this.isPageSpyed) {
            document.site.spyGateway.spyNotify(sendBag);
        }
        if (self.$prototype.$representationUrl) {
            sendBag.$url = self.$prototype.$representationUrl;
            sendBag.$etag = self.dataset.$etag;
            document.controller.sendRequest(self, {
                data: sendBag,
                method: "PUT",
                $etag: sendBag.$etag
            }, function(data, response, requestUrl){
                self.applyChange(data, response, requestUrl);
            });
        }
    },
    notifyChange: function($bind, value){
        var self = this;
        var data = self.ensureSendBag();
        if (self.dataset && self.dataset.$uuid) {
            data.$uuid = self.dataset.$uuid;
        }
        data[$bind] = value;
        data.$url = self.$prototype.$representationUrl;
        if (self.$prototype.$representationUrl) {
            data.$url = self.$prototype.$representationUrl;
            data.$etag = self.dataset.$etag;
            document.controller.sendRequest(self, {
                data: data,
                method: "PUT",
                $etag: data.$etag
            }, function(data, response, requestUrl){
                self.applyChange(data, response, requestUrl);
            });
        }
        else {
            delete data.$url;
            delete data.$etag;
            self.applyChange(data);
        }
    },
    
    reloadLayout: function($item){
        this.diposeContent();
        this.$item = $item;
        this.$$body.empty();
        this.loaded = false;
        this.boundFields = {};
        this.idMap = {};
        this.menuItems = {};
        this.$menus = {};
        this.menuBoxes = [];
        this.openBox(true);
    },
    fetch: function(options, callback){
        if (options) {
            delete options.field;
        }
        document.controller.sendRequest(this, options, callback);
    }
});
