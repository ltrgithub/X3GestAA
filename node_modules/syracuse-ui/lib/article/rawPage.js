"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require('./article').Article;
var sendBagFactory = require('./sendBagFactory');

var _$menus = {
    $search: {
        $linkBox: {
            $excludeBind: ["$create", "$details", "$edit", "$prototype", "$first", "$previous", "$next", "$last"]
        }
    },
    $cube: {
        $mainAction: "$create",
        $linkBox: {
            $excludeBind: ["$details", "$edit", "$prototype", "$first", "$previous", "$next", "$last"]
        }
    },
    $query: {
        $mainAction: "$create",
        $linkBox: {
            $excludeBind: ["$details", "$edit", "$prototype", "$first", "$previous", "$next", "$last"]
        }
    },
    $details: {
        $mainAction: "$edit",
        $linkBox: {
            $excludeBind: ["$draft", "$stylesheet"]
        }
    },
    $edit: {
        $mainAction: "$save",
        $linkBox: {
            $excludeBind: ["$draft", "$stylesheet", "$prototype"]
        }
    },
    $dashboard: {
        $linkBox: {}
    }
};

function RawPage(){
}

exports.RawPage = helpers.defineClass(RawPage, Article, {
    ensureSendBag: function(article){
        return sendBagFactory.ensureSendBag(this, article);
    },
    loadBox: function(initData){
        this.$layoutOptions = document.site.$item.$layoutOptions.page[this.$pageCategory];
		if(!this.$layoutOptions){
			this.$layoutOptions = document.site.$item.$layoutOptions.page["page"];
		}
        this.$authoringLevel = "article";
        this.externalAdapter = this.$item.externalAdapter || document.site.externalAdapter;
        delete this.$item.externalAdapter;
        Article.prototype.loadBox.call(this, initData);
        if (this.$autoFetch = this.$autoFetch !== false) {
            this.fetch();
        }
    },
    notifyChange: function($bind, value,isNotifyOnly){
        var self = this;
        var data = self.ensureSendBag();
        if (self.dataset && self.dataset.$uuid) {
            data.$uuid = self.dataset.$uuid;
        }
        data[$bind] = value;
        data.$url = self.$prototype.$representationUrl;
        if (self.$prototype.$representationUrl) {
            data.$url = self.$prototype.$representationUrl;
            data.$etag = self.dataset.$etag;
            document.controller.sendRequest(self, {
                data: data,
                method: "PUT",
                $etag: data.$etag
            }, function(data, response, requestUrl){
                self.applyChange(data, response, requestUrl);
            });
        }
        else {
            delete data.$url;
            delete data.$etag;
            self.applyChange(data);
        }
    },
    _getFacetMenus: function(){
        return _$menus[this.$facet];
    },
    appendArticleMenus: function(action){
        var self = this;
        var $facetMenus = self._getFacetMenus();
        if ($facetMenus) {
            var dom = document.createElement("div");
            dom.className = self.$skin + "-menus-slot";
            dom.style.display = "none";
            document.itemFactory.load(self.$$menus = $(dom)[action ? action : "appendTo"](self.$$item), {
                $mainAction: $facetMenus.$mainAction,
                $bind: "$linkBox",
                $skin: self.$layoutOptions.menus,
                $category: "links",
                $excludeBind: $facetMenus.$linkBox.$excludeBind,
                onAddMenuItem: function(){
                    self.$$menus[0].style.display = "";
                }
            }, self);
        }
    },
    getPage: function(){
        return this;
    },
    fetch: function(options, callback){
        if (options) {
            delete options.field;
        }
        document.controller.sendRequest(this, options, callback);
    }
});
