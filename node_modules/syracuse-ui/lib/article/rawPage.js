"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require('./article').Article;
var sendBagFactory = require('./sendBagFactory');

var _$menus = {
    $search: {
        $linkBox: {
            $excludeBind: ["$create", "$details", "$edit", "$prototype", "$first", "$previous", "$next", "$last"]
        }
    },
    $cube: {
        $mainAction: "$create",
        $linkBox: {
            $excludeBind: ["$details", "$edit", "$prototype", "$first", "$previous", "$next", "$last"]
        }
    },
    $query: {
        $mainAction: "$create",
        $linkBox: {
            $excludeBind: ["$details", "$edit", "$prototype", "$first", "$previous", "$next", "$last"]
        }
    },
    $details: {
        $mainAction: "$edit",
        $linkBox: {
            $excludeBind: ["$draft", "$stylesheet"]
        }
    },
    $edit: {
        $mainAction: "$save",
        $linkBox: {
            $excludeBind: ["$draft", "$stylesheet", "$prototype"]
        }
    },
    $request: {
        $mainAction: "$invoke",
        $linkBox: {}
    },
    $dashboard: {
        $linkBox: {}
    }
};

function RawPage(){
}

exports.RawPage = helpers.defineClass(RawPage, Article, {
    ensureSendBag: function(article){
        return sendBagFactory.ensureSendBag(this, article);
    },
    loadBox: function(initData){
        this.$layoutOptions = document.site.$item.$layoutOptions.page[this.$pageCategory];
        if (!this.$layoutOptions) {
            this.$layoutOptions = document.site.$item.$layoutOptions.page["page"];
        }
        this.$authoringLevel = "article";
        this.externalAdapter = this.$item.externalAdapter || document.site.externalAdapter;
        delete this.$item.externalAdapter;
        Article.prototype.loadBox.call(this, initData);
        if (this.$autoFetch = this.$autoFetch !== false) {
            this.fetch();
        }
    },
    _notifyDeleteRecord: function(listSendBag, list, record){
        var dataRecords = list.ensureDataRecords();
        if (record) {
            list._store._records.splice(record.$recordIndex, 1);
            if (list.builder.isSingleBuilder) {
                dataRecords.splice(record.$recordIndex, 1);
                listSendBag.dataRecords = dataRecords;
            }
            else {
                var found = list.findDataRecord(record.$uuid);
                if (found) {
                    dataRecords.splice(found.$index, 1);
                    record.$index = found.$index;
                }
                listSendBag.deleteRecord(record);
                delete record.$index;
            }
            list.removeItem(record, true);
        }
        else {
            dataRecords.splice(0, dataRecords.length);
            listSendBag.dataRecords = [];
            list._store.removeRecords();
        }
        list._store._ensureRecordsIndex();
        this.notifyDataChange(list, listSendBag.dataRecords);
    },
    _notifyCreateRecord: function(listSendBag, list, record){
        var dataRecords = list.ensureDataRecords();
        var options = {};
        if (record) {
            options.$recordIndex = record.$recordIndex;
            options.isInsert = true;
        }
        else {
            options.$recordIndex = list._store._records.length;
        }
        if (list.builder.isSingleBuilder) {
            (listSendBag.dataRecords = dataRecords).splice(options.$recordIndex, 0, null);
            list._store.appendRecord(options);
            list._store._ensureRecordsIndex();
        }
        else {
            options.dataRecord = {
                $uuid: document.controller.generateUUID()
            };
            if (record) {
                var found = list.findDataRecord(record.$uuid);
                dataRecords.splice(found.$index, 0, options.dataRecord);
            }
            else {
                dataRecords.push(options.dataRecord);
            }
            var newRecord = list._store.appendRecord(options);
            listSendBag.createRecord(newRecord, options.$recordIndex);
            list._store._ensureRecordsIndex();
            this.notifyDataChange(list, listSendBag.dataRecords);
        }
    },
    notifyActionChange: function(target, value, notifyServer){
        debugger;
        var self = this;
        var sendBag = self.ensureSendBag();
        var $properties;
        var $bind;
        if (target != self) {
            if (target.arrayLevel == "record") {
                var listSendBag = self.ensureSendBag(target.list);
                if (target.list.$prototype.$type == "application/x-array") {
                    if (value.$delete || value.$create) {
                        if (value.$delete) {
                            this._notifyDeleteRecord(listSendBag, target.list, target);
                        }
                        if (value.$create) {
                            this._notifyCreateRecord(listSendBag, target.list, target);
                        }
                    }
                }
            }
            else {
                if (target.$prototype && target.$prototype.$type == "application/x-array") {
                    var listSendBag = self.ensureSendBag(target);
                    if (value.$delete || value.$create) {
                        if (value.$delete) {
                            this._notifyDeleteRecord(listSendBag, target);
                        }
                        if (value.$create) {
                            this._notifyCreateRecord(listSendBag, target);
                        }
                        return;
                    }
                    else {
                        if (value.$select) {
                            debugger;
                        }
                        articleParent = list.getArticleParent();
                        $bind = list.$item.$bind;
                        //             $properties = listSendBag.$properties || {};
                        //			   [target.$item.$bind] = value;
                    }
                }
            }
            /*
             while (articleParent != this) {
             
             if (articleParent.arrayLevel == "record") {
             var listSendBag = self.ensureSendBag(articleParent);
             $bind = list.$item.$bind;
             articleParent = list.getArticleParent();
             }
             else {
             if (articleParent.dataset && articleParent.dataset.$uuid) {
             sendBag.$uuid = articleParent.dataset.$uuid;
             }
             sendBag[$bind] = value;
             articleParent = articleParent.getArticleParent();
             }
             }*/
        }
        var articleSendBag = self.ensureSendBag(articleSendBag);
        var $actions;
        if (target.$item && target.$item.$bind) {
            var  $properties = articleSendBag.$properties = articleSendBag.$properties || {};
			$properties = $properties[target.$item.$bind] = $properties[target.$item.$bind] || {};
            $actions = $properties.$actions = $properties.$actions || {};
        }
        else {
            $actions = articleSendBag.$actions = articleSendBag.$actions || {};
        }
        Object.keys(value).forEach(function($bind){
            $actions[$bind] = value[$bind];
        });
        
        if (notifyServer !== false) {
            if (self.dataset && self.dataset.$uuid) {
                sendBag.$uuid = self.dataset.$uuid;
            }
            this._notifyChangeToServer(sendBag);
        }
    },
    notifyDataChange: function(field, value){
        var sendBag = this.ensureSendBag();
        var articleParent = field.getArticle();
        var $bind = field.$item.$bind;
        while (articleParent != this) {
            if (articleParent.onBeforeNotifyDataChange && !articleParent.onBeforeNotifyDataChange()) {
                return;
            }
            if (articleParent.arrayLevel == "record") {
                var list = articleParent.list;
                var listSendBag = this.ensureSendBag(list);
                if (list.$prototype.$type == "application/x-array") {
                    var dataRecords = list.ensureDataRecords();
                    if (list.builder.isSingleBuilder) {
                        (listSendBag.dataRecords = dataRecords)[articleParent.$recordIndex] = value;
                    }
                    else {
                        var found = list.findDataRecord(articleParent.$uuid);
                        dataRecords[found.$index][$bind] = value;
                        listSendBag.saveRecordChange(articleParent, $bind, value, found.$index);
                    }
                    value = listSendBag.dataRecords;
                }
                else {
                    if (list.$prototype.$type == "application/x-object") {
                        (listSendBag.dataset = listSendBag.dataset || {})[$bind] = value;
                        value = listSendBag.dataset;
                    }
                }
                $bind = list.$item.$bind;
                list.onAfterNotifyDataChange(listSendBag);
                articleParent = list.getArticleParent();
            }
            else {
                if (articleParent.dataset && articleParent.dataset.$uuid) {
                    sendBag.$uuid = articleParent.dataset.$uuid;
                }
                sendBag[$bind] = value;
                articleParent = articleParent.getArticleParent();
            }
        }
        if (articleParent.dataset && articleParent.dataset.$uuid) {
            sendBag.$uuid = articleParent.dataset.$uuid;
        }
        sendBag[$bind] = value;
        this._notifyChangeToServer(sendBag);
    },
    _notifyChangeToServer: function(sendBag){
        var self = this;
        if (self.$prototype.$representationUrl) {
            sendBag.$url = self.$prototype.$representationUrl;
            sendBag.$etag = self.dataset.$etag;
            document.controller.sendRequest(self, {
                data: sendBag,
                method: "PUT",
                $etag: sendBag.$etag
            }, function(data, response, requestUrl){
                self.applyChange(data, response, requestUrl);
            });
        }
    },
    notifyChange: function($bind, value){
        var self = this;
        var data = self.ensureSendBag();
        if (self.dataset && self.dataset.$uuid) {
            data.$uuid = self.dataset.$uuid;
        }
        data[$bind] = value;
        data.$url = self.$prototype.$representationUrl;
        if (self.$prototype.$representationUrl) {
            data.$url = self.$prototype.$representationUrl;
            data.$etag = self.dataset.$etag;
            document.controller.sendRequest(self, {
                data: data,
                method: "PUT",
                $etag: data.$etag
            }, function(data, response, requestUrl){
                self.applyChange(data, response, requestUrl);
            });
        }
        else {
            delete data.$url;
            delete data.$etag;
            self.applyChange(data);
        }
    },
    _getFacetMenus: function(){
        return _$menus[this.$facet];
    },
    appendArticleMenus: function(action){
        var self = this;
        var $facetMenus = self._getFacetMenus();
        if ($facetMenus) {
            var dom = document.createElement("div");
            dom.className = self.$skin + "-menus-slot";
            dom.style.display = "none";
            document.itemFactory.load(self.$$menus = $(dom)[action ? action : "appendTo"](self.$$item), {
                $mainAction: $facetMenus.$mainAction,
                $bind: "$linkBox",
                $skin: self.$layoutOptions.menus,
                $category: "links",
                $excludeBind: $facetMenus.$linkBox.$excludeBind,
                onAddMenuItem: function(){
                    self.$$menus[0].style.display = "";
                }
            }, self);
        }
    },
    getPage: function(){
        return this;
    },
    fetch: function(options, callback){
        if (options) {
            delete options.field;
        }
        document.controller.sendRequest(this, options, callback);
    }
});
