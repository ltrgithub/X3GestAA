"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require('./article').Article;
var sendBagFactory = require('./sendBagFactory');
var notifyHelper = require('./notifyHelper');
var _$menus = {
    $search: {
        $linkBox: {
            $excludeBind: ["$create", "$details", "$edit", "$prototype", "$first", "$previous", "$next", "$last"]
        }
    },
    $cube: {
        $mainAction: "$create",
        $linkBox: {
            $excludeBind: ["$details", "$edit", "$prototype", "$first", "$previous", "$next", "$last"]
        }
    },
    $query: {
        $mainAction: "$create",
        $linkBox: {
            $excludeBind: ["$details", "$edit", "$prototype", "$first", "$previous", "$next", "$last"]
        }
    },
    $details: {
        $mainAction: "$edit",
        $linkBox: {
            $excludeBind: ["$draft", "$stylesheet"]
        }
    },
    $edit: {
        $mainAction: "$save",
        $linkBox: {
            $excludeBind: ["$draft", "$stylesheet", "$prototype"]
        }
    },
    $request: {
        $mainAction: "$invoke",
        $linkBox: {}
    },
    $dashboard: {
        $linkBox: {}
    }
};

function RawPage(){
}

exports.RawPage = helpers.defineClass(RawPage, Article, {
    dispose: function(){
        delete this.articleMap;
        delete this.onAfterApplyChange;
        Article.prototype.dispose.call(this);
    },
    
    _applyArrayDelta: function(targetList, sourceList, $isFullDelta){
        if (sourceList) {
            var self = this;
            var targetMap = {};
            if (sourceList.length == 1 || $isFullDelta) {
                sourceList.forEach(function(sourceRecord){
                    debugger;
                    var found, foundIndex;
                    targetList.some(function(record, index){
                        if (record.$uuid == sourceRecord.$uuid) {
                            found = record;
                            foundIndex = index;
                            return true;
                        }
                        return false;
                    });
                    if (found) {
                        self._applyObjectDelta(found, sourceRecord);
                        if (sourceRecord.$index !== undefined && sourceRecord.$index != foundIndex) {
                            targetList.splice(foundIndex, 1);
                            targetList.splice(sourceRecord.$index, 0, found);
                            delete found.$index;
                        }
                    }
                    else {
                        if (sourceRecord.$index !== undefined) {
                            targetList.splice(sourceRecord.$index, 0, sourceRecord);
                            delete sourceRecord.$index;
                        }
                        else {
                            targetList.push(sourceRecord);
                        }
                        
                    }
                });
            }
            else {
                targetList.forEach(function(record){
                    targetMap[record.$uuid] = record;
                });
                targetList = sourceList.filter(function(record){
                    return !record.$isDeleted;
                }).map(function(record){
                    if (targetMap[record.$uuid]) {
                        return self._applyObjectDelta(targetMap[record.$uuid], record);
                    }
                    return record;
                });
            }
            
        }
        return targetList;
    },
    _applyObjectDelta: function(target, source){
        if (source) {
            var self = this;
            Object.keys(source).forEach(function(property){
                var targetValue = target[property];
                var sourceValue = source[property];
                if (typeof(sourceValue) == 'object') {
                    if (!(targetValue == null || sourceValue === null)) {
                        if (Array.isArray(sourceValue)) {
                            if (self.isDeltaMode) {
                                sourceValue = self._applyArrayDelta(targetValue, sourceValue);
                            }
                        }
                        else {
                            sourceValue = self._applyObjectDelta(targetValue, sourceValue);
                        }
                    }
                }
                target[property] = sourceValue;
            });
        }
        return target;
    },
    applyChange: function(newData){
        Article.prototype.applyChange.call(this, newData);
        if (this.onAfterApplyChange) {
            this.onAfterApplyChange(this);
        }
    },
    ensureSendBag: function(article){
        return sendBagFactory.ensureSendBag(this, article);
    },
    loadBox: function(initData){
        this.page = this;
        this.isDeltaMode = this.$facet == "$edit";
        this.articleMap = {};
        this.$layoutOptions = document.site.$item.$layoutOptions.page[this.$pageCategory];
        if (!this.$layoutOptions) {
            this.$layoutOptions = document.site.$item.$layoutOptions.page["page"];
        }
        this.$authoringLevel = "article";
        this.externalAdapter = this.$item.externalAdapter || document.site.externalAdapter;
        delete this.$item.externalAdapter;
        Article.prototype.loadBox.call(this, initData);
        if (this.$autoFetch = this.$autoFetch !== false) {
            this.fetch();
        }
    },
    notifyReorderRecords: function(list, sourceRecord, targetRecord, $insert){
        notifyHelper.notifyReorderRecords(this, list, sourceRecord, targetRecord, $insert);
    },
    notifyActionChange: function(target, value, notifyServer){
        notifyHelper.notifyActionChange(this, target, value, notifyServer);
    },
    notifyDataChange: function(field, value){
        notifyHelper.notifyDataChange(this, field, value);
    },
    _notifyChangeToServer: function(sendBag){
        var self = this;
        if (self.$prototype.$representationUrl) {
            sendBag.$url = self.$prototype.$representationUrl;
            sendBag.$etag = self.dataset.$etag;
            document.controller.sendRequest(self, {
                data: sendBag,
                method: "PUT",
                $etag: sendBag.$etag
            }, function(data, response, requestUrl){
                self.applyChange(data, response, requestUrl);
            });
        }
    },
    notifyChange: function($bind, value){
        var self = this;
        var data = self.ensureSendBag();
        if (self.dataset && self.dataset.$uuid) {
            data.$uuid = self.dataset.$uuid;
        }
        data[$bind] = value;
        data.$url = self.$prototype.$representationUrl;
        if (self.$prototype.$representationUrl) {
            data.$url = self.$prototype.$representationUrl;
            data.$etag = self.dataset.$etag;
            document.controller.sendRequest(self, {
                data: data,
                method: "PUT",
                $etag: data.$etag
            }, function(data, response, requestUrl){
                self.applyChange(data, response, requestUrl);
            });
        }
        else {
            delete data.$url;
            delete data.$etag;
            self.applyChange(data);
        }
    },
    _getFacetMenus: function(){
        return _$menus[this.$facet];
    },
    appendArticleMenus: function(action){
        var self = this;
        var $facetMenus = self._getFacetMenus();
        if ($facetMenus) {
            var dom = document.createElement("div");
            dom.className = self.$skin + "-menus-slot";
            dom.style.display = "none";
            document.itemFactory.load(self.$$menus = $(dom)[action ? action : "appendTo"](self.$$item), {
                $mainAction: $facetMenus.$mainAction,
                $bind: "$linkBox",
                $skin: self.$layoutOptions.menus,
                $category: "links",
                $excludeBind: $facetMenus.$linkBox.$excludeBind,
                onAddMenuItem: function(){
                    self.$$menus[0].style.display = "";
                }
            }, self);
        }
    },
    getPage: function(){
        return this;
    },
    fetch: function(options, callback){
        if (options) {
            delete options.field;
        }
        document.controller.sendRequest(this, options, callback);
    }
});
