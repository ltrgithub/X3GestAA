"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _defaultWidths = {
    1: "100",
    2: "50,50",
    3: "33,33,33",
    4: "25,25,25,25",
    5: "20,20,20,20,20",
    6: "17,17,16,16,17,17"
};

function LayoutValidator(){
}

exports.LayoutValidator = helpers.defineClass(LayoutValidator, null, {
    getDefaultWidths: function(count){
        var widths = _defaultWidths[count];
        if (!widths) {
            var width = Math.ceil(count / 100);
            widths = [];
            for (var ii = 0; ii < count; ii++) {
                widths.push(width);
            }
            widths = widths.join(",");
        }
        return widths;
    },
    getWidthValues: function($widths){
        var values = $widths.split(",");
        for (var ii = 0, jj = values.length; ii < jj; ii++) {
            values[ii] = parseInt(values[ii], 10);
        }
        return values;
    },
    removeRowSeparator: function(item){
        if (item.rowSeparator) {
            document.site.removeDomChild(item.rowSeparator);
            delete item.rowSeparator;
        }
    },
    setSeparators: function(layout){
        var prevItem;
        var skinSep = "s-slot-sep-" + layout.$layout.$layoutType + " " + layout.boxParent.$skin + "-sep-" + layout.$layout.$layoutType;
        
        layout.rowSeparators = [];
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            var item = layout.items[ii];
            if (ii > 0) {
                if (!prevItem.rowSeparator) {
                    prevItem.rowSeparator = document.createElement("div");
                    prevItem.rowSeparator.setAttribute("data-s-index", ii);
                }
                prevItem.rowSeparator.className = skinSep;
                prevItem.rowSeparator.style.display = prevItem.$isHidden ? "none" : "";
                layout.rowSeparators.push(prevItem.rowSeparator);
                if (this.isOnAuthoring) {
                    document.site.toggleClass(prevItem.rowSeparator, "s-aw-slot-sep-" + layout.$layout.$layoutType, true);
                    prevItem.rowSeparator.setAttribute(prevItem.isLayout ? "data-s-layout" : "data-s-item", prevItem.id);
                }
                item.layoutSlot.parentNode.insertBefore(prevItem.rowSeparator, item.layoutSlot);
                this.removeRowSeparator(item);
            }
            else {
                this.removeRowSeparator(item);
            }
            prevItem = item;
        }
    },
    setRowWidths: function(layout){
        if (!layout.$layout.$widths) {
            layout.$layout.$widths = this.getDefaultWidths(layout.items.length || 1);
        }
        var $widths = layout.$layout.$widths.split(",");
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            layout.items[ii].layoutSlot.style.width = $widths[ii] + "%";
        }
    },
    validate: function(layout, parseTree){
        if (layout) {
            this.isOnAuthoring = layout.articleParent.isOnAuthoring;
            this["validate" + layout.$layout.$layoutType](layout);
            if (parseTree) {
                for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                    var item = layout.items[ii];
                    this.validate(item.isLayout ? item : item.layoutContent, parseTree);
                }
            }
            this.isOnAuthoring = false;
        }
    },
    hasSpaceBox: function(layout){
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            if (layout.items[ii].isSpaceBox) {
                return true;
            }
        }
        return false;
    },
    validatestack: function(layout){
        if (this.isOnAuthoring) {
            if (layout.items.length == 0) {
                layout.addSpaceBox();
            }
            else {
                if (this.hasSpaceBox(layout) && layout.items.length > 1) {
                    layout.removeSpaceBox();
                }
            }
        }
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            var item = layout.items[ii];
            item.layoutSlot.style.width = "";
            //this.removeRowSeparator(item);
        }
        this.setSeparators(layout);
        layout.tabOpened = null;
        layout.$layout.$widths = "100";
        layout._item.style.width = "";
    },
    validaterow: function(layout){
        if (!layout.$layout.$autoSize) {
            var $widths;
            layout._item.style.width = "100%";
            if (layout.$layout.$widths) {
                var $widths = layout.$layout.$widths.split(",");
                if ($widths.length > layout.items.length) {
                    for (var ii = layout.items.length, jj = $widths.length; ii < jj; ii++) {
                        layout.addSpaceBox();
                    }
                }
                if ($widths.length != layout.items.length) {
                    layout.$layout.$widths = this.getDefaultWidths(layout.items.length);
                }
            }
            else {
                layout.$layout.$widths = this.getDefaultWidths(layout.items.length);
            }
            var addLayout;
            for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                var child = layout.items[ii];
                if (child.isLayout) {
                    if (child.items.length > (this.hasSpaceBox(child) ? 2 : 1)) {
                        addLayout = true;
                        break;
                    }
                }
            }
            if (addLayout) {
                for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                    var child = layout.items[ii];
                    if (!child.isLayout && !child.isSpaceBox) {
                        layout.wrapIntack([child], ii);
                    }
                }
            }
            else {
                var items = layout.items.slice(0);
                for (var ii = 0, jj = items.length; ii < jj; ii++) {
                    var child = items[ii];
                    if (child.isLayout) {
                        if (this.hasSpaceBox(child) && child.items.length > 1) {
                            child.removeSpaceBox();
                        }
                        if (child.items.length == 0) {
                            layout.addSpaceBox(ii);
                        }
                        else {
                            child.moveItems(layout, [child.items[0]], ii);
                        }
                        layout.removeItem(child, true);
                    }
                }
            }
            this.setRowWidths(layout);
        }
        this.setSeparators(layout);
        layout.tabOpened = null;
    },
    validatetabs: function(layout){
        if (layout.items.length > 0) {
            var openedList = [];
            for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                var item = layout.items[ii];
                if (item.$item.$opened) {
                    openedList.push(item);
                }
                this.removeRowSeparator(item);
            }
			layout.tabOpened = null;
            if (openedList.length > 0) {
                if (openedList.length > 1) {
                    for (var ii = 0, jj = openedList.length; ii < jj; ii++) {
                        openedList[ii].openBox(false);
                    }
                }
                layout.tabOpened = openedList[0];
            }
            if (!layout.tabOpened) {
				for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
					var item = layout.items[ii];
					if (item.isTabLayout && !item.isLayout) {
						layout.tabOpened = item;
						break;
					}
				}
			}
            if (layout.tabOpened) {
                layout.tabOpened.openBox(true, true);
            }
        }
        else {
            layout.tabOpened = null;
        }
        layout.$layout.$widths = "100";
        layout._item.style.width = "";
    }
});
