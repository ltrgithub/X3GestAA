"use strict";
var helpers = require('syracuse-core/lib/helpers');

function LayoutValidator(){
}

exports.LayoutValidator = helpers.defineClass(LayoutValidator, null, {
    validate: function(layout, parseTree){
        if (layout) {
            this.isOnAuthoring = layout.articleParent.isOnAuthoring;
            this["validate" + layout.$layout.$layoutType](layout);
            if (parseTree) {
                for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                    var item = layout.items[ii];
                    this.validate(item.isLayout ? item : item.layoutContent, parseTree);
                }
            }
            this.isOnAuthoring = false;
        }
    },
    hasSpaceBox: function(layout){
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            if (layout.items[ii].isSpaceBox) {
                return true;
            }
        }
        return false;
    },
    validatestack: function(layout){
        if (this.isOnAuthoring) {
            if (layout.items.length == 0) {
                layout.addSpaceBox();
            }
            else {
                if (this.hasSpaceBox(layout) && layout.items.length > 1) {
                    layout.removeSpaceBox();
                }
            }
        }
        for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
            layout.items[ii].layoutSlot.style.width = "";
        }
        layout.tabOpened = null;
        layout.$layout.$widths = "100";
        layout._item.style.width = "";
        if (this.isOnAuthoring) {
            document.site.authorPage.ensureRowSeparators(layout);
        }
    },
    validaterow: function(layout){
        if (!layout.$layout.$fitToContent) {
            var $widths;
            layout._item.style.width = "100%";
            if (layout.$layout.$widths) {
                var $widths = layout.$layout.$widths.split(",");
                if ($widths.length > layout.items.length) {
                    for (var ii = layout.items.length, jj = $widths.length; ii < jj; ii++) {
                        layout.addSpaceBox();
                    }
                }
                if ($widths.length > layout.items.length) {
                    //hack for menugroup
                    var width = Math.floor(100 / length);
                    layout.$layout.$widths = "";
                    for (var ii = 0; ii < length; ii++) {
                        layout.items[ii].layoutSlot.style.width = width + "%";
                        layout.$layout.$widths += width + ",";
                    }
                }
                else {
                    for (var ii = 0, jj = $widths.length; ii < jj; ii++) {
                        layout.items[ii].layoutSlot.style.width = $widths[ii] + "%";
                    }
                }
            }
            else {
                var length = layout.items.length;
                var width = Math.floor(100 / length);
                layout.$layout.$widths = "";
                for (var ii = 0; ii < length; ii++) {
                    layout.items[ii].layoutSlot.style.width = width + "%";
                    layout.$layout.$widths += width + ",";
                }
                layout.$layout.$widths = layout.$layout.$widths.substr(0, layout.$layout.$widths.length - 1);
            }
            var addLayout;
            for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                var child = layout.items[ii];
                if (child.isLayout) {
                    if (child.items.length > (this.hasSpaceBox(child) ? 2 : 1)) {
                        addLayout = true;
                        break;
                    }
                }
            }
            if (addLayout) {
                for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                    var child = layout.items[ii];
                    if (!child.isLayout && !child.isSpaceBox) {
                        layout.wrapIntack([child], ii);
                    }
                }
            }
            else {
                var items = layout.items.slice(0);
                for (var ii = 0, jj = items.length; ii < jj; ii++) {
                    var child = items[ii];
                    if (child.isLayout) {
                        if (this.hasSpaceBox(child) && child.items.length > 1) {
                            child.removeSpaceBox();
                        }
                        if (child.items.length == 0) {
                            layout.addSpaceBox(ii);
                        }
                        else {
                            child.moveItems(layout, [child.items[0]], ii);
                        }
                        layout.removeItem(child, true);
                    }
                }
            }
        }
        if (this.isOnAuthoring) {
            document.site.authorPage.ensureRowSeparators(layout);
        }
        layout.tabOpened = null;
    },
    
    validatetabs: function(layout){
        if (layout.items.length > 0) {
            var opened = [];
            for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
                if (layout.items[ii].$item.$opened) {
                    opened.push(layout.items[ii])
                }
            }
            if (opened.length > 0) {
                if (opened.length > 1) {
                    for (var ii = 0, jj = opened.length; ii < jj; ii++) {
                        opened.openBox(false);
                    }
                    layout.tabOpened = layout.items[0];
                }
                else {
                    layout.tabOpened = opened[0];
                }
            }
            else {
                layout.tabOpened = layout.items[0];
            }
            if (layout.tabOpened) {
                layout.tabOpened.openBox(true, true);
            }
        }
        else {
            layout.tabOpened = null;
        }
        if (this.isOnAuthoring) {
            document.site.authorPage.ensureRowSeparators(layout);
        }
        layout.$layout.$widths = "100";
        layout._item.style.width = "";
    }
});
