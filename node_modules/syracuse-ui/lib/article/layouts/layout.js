"use strict";
var helpers = require('syracuse-core/lib/helpers');

function Layout(){
}

exports.Layout = helpers.defineClass(Layout, null, {
    create: function($layout, boxParent){
        this.boxParent = boxParent;
        this.page = this.boxParent.page;
        this.$authoringLevel = "layout";
        var article = this.boxParent.articleParent || this.boxParent;
        this.id = this.boxParent.id + "-" + (++article._childLayoutOffset);
        article.layouts[this.id] = this;
        this.isLayout = true;
        this.$item = this.$layout = $layout;
        if (!$layout.$items) {
            $layout.$items = [];
        }
        if (!this.$layout.$layoutType) {
            this.$layout.$layoutType = "stack";
        }
        else {
            if (this.$layout.$layoutType == "side") {
                this.$layout.$layoutType = "row";
                this.$layout.$fitToContent = true;
            }
            if (this.$layout.$layoutType == "columns") {
                this.$layout.$layoutType = "row";
            }
        }
    },
    getTitle: function(){
        return "";
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if (onAuthoring !== false) {
            if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
                this.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
            }
            if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
                this.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
            }
            if (metaData.$field !== undefined) {
                this.$item.$field = this.$item.$field || {};
                var $props = Object.keys(metaData.$field);
                for (var ii = 0, jj = $props.length; ii < jj; ii++) {
                    var $prop = $props[ii];
                    this.$item.$field[$prop] = metaData.$field[$prop];
                }
            }
        }
    },
    loadChildItem: function(childItem, $childItem, index){
        if (childItem) {
            if (childItem && childItem.layoutParent) {
                childItem.layoutParent.extractItem(childItem, this != childItem.layoutParent);
            }
            return this.appendChildItem(childItem, index, false);
        }
        return this.createChildItem($childItem, null, index);
    },
    appendChildItem: function(item, index, load){
        item.layoutParent = this;
        item.boxParent = this.boxParent;
        
        if (this.$layout.$layoutType == "tabs") {
            if (item.$item.$opened) {
                this.tabOpened = item;
            }
        }
        if (!item.layoutSlot) {
            item.layoutSlot = document.createElement("div");
        }
        if (index === undefined) {
            if (this.isItemRegisterDisable == false) {
                this.$layout.$items.push(item.$item);
            }
            this.items.push(item);
            this._item.appendChild(item.layoutSlot);
        }
        else {
            if (this.isItemRegisterDisable == false) {
                this.$layout.$items.splice(index, 0, item.$item);
            }
            this.items.splice(index, 0, item);
            var afterItem = this.items[index + 1];
            if (afterItem) {
                afterItem.layoutSlot.parentNode.insertBefore(item.layoutSlot, afterItem.layoutSlot);
            }
            else {
                this._item.appendChild(item.layoutSlot);
            }
        }
        
        item.isTabLayout = this.$layout.$layoutType == "tabs";
        if (this.$layout.$layoutType == "row") {
            if (this.$layout.$valign) {
                item.layoutSlot.style.verticalAlign = this.$layout.$valign;
            }
            else {
                if (item.$field) {
                    //  item.layoutSlot.style.verticalAlign = "bottom";
                }
            }
        }
        item.ensureLayoutMode();
        
        if (load) {
            if (item.isLayout) {
                item.render();
            }
            else {
                item.loadBox();
            }
        }
        if (afterItem && item._tabTitle) {
            afterItem._tabTitle.parentNode.insertBefore(item._tabTitle, afterItem._tabTitle);
        }
        return item;
    },
    createChildItem: function($item, item, index){
        item = this.page.createNewItem($item, this.boxParent, item);
        if (item) {
            this.appendChildItem(item, index, true);
        }
        return item;
    },
    extractItem: function(item, enableClean){
        var index = this.getItemIndex(item, true);
        if (index >= 0) {
            this.items.splice(index, 1);
        }
        index = this.getItemIndex(item.$item);
        if (index >= 0) {
            this.$layout.$items.splice(index, 1);
        }
        if (item.isTabLayout) {
            if (item._tabTitle) {
                document.site.removeDomChild(item._tabTitle);
            }
            if (this.tabOpened == item) {
                this.tabOpened = null;
                this._ensureOneTabOpened();
            }
        }
        if (item.layoutSlot && this.colWidths) {
            item.layoutSlot.style.width = "";
        }
        item.layoutParent = null; //mettre a null test
        this.ensureSpaceBox();
        if (enableClean !== false) {
            this.cleanUnnecessaryLayout();
        }
        return item;
    },
    cleanUnnecessaryLayout: function(){
        if (this.layoutParent && this.items.length == 1) {
            this.isSpaceBoxDisabled = true;
            this.layoutParent.grabItems(this, this.layoutParent.getItemIndex(this.$item), this);
            this.layoutParent.removeItem(this, true, false);
            this.isSpaceBoxDisabled = false;
        }
    },
    grabItems: function(sourceLayout, index, excludeItem){
        var lastMoved;
        for (var ii = sourceLayout.items.length - 1; ii >= 0; ii--) {
            if (!excludeItem || (sourceLayout.items[ii] != excludeItem)) {
                lastMoved = this.loadChildItem(sourceLayout.items[ii], null, index);
            }
        }
        return lastMoved;
    },
    removeItem: function(item, removeSlot, enableClean){
        this.extractItem(item, enableClean);
        if (removeSlot && item.layoutSlot) {
            document.site.removeDomChild(item.layoutSlot);
        }
        this.boxParent.getArticle().removeItem(item, true);
    },
    getItemIndex: function($item, byItems){
        var list = byItems ? this.items : this.$layout.$items;
        for (var ii = 0; ii < list.length; ii++) {
            if (list[ii] == $item) {
                return ii;
            }
        }
        return -1;
    },
    //clearSpaceBox
    ensureSpaceBox: function(add, index){
        if (!this.isSpaceBoxDisabled && (add || this.items.length == 0)) {
            return this.createChildItem({
                $category: "space"
            }, null, index);
        }
        return null;
    },
    ensureLayoutSlot: function(item){
        if (item.isField) {
            item.layoutSlot.className = item.$skin + "-slot s-field-layout-slot s-slot-" + this.$layout.$layoutType;
        }
        else {
            item.layoutSlot.className = (item.$skin || this.boxParent.$skin) + "-layout-slot s-slot-" + this.$layout.$layoutType;
        }
    },
    ensureColWidths: function(){
        if (this.colWidths) {
            if (this.colWidths.length != this.items.length) {
                if (this.colWidths.length > this.items.length) {
                    for (var ii = this.items.length, jj = this.colWidths.length; ii < jj; ii++) {
                        this.ensureSpaceBox(true);
                    }
                }
                else {
                    this.colWidths = null;
                    delete this.$layout.$layoutSubType;
                    if (this.items.length) {
                        var width = 100 / this.items.length;
                        this.colWidths = [];
                        for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
                            this.colWidths.push(width);
                            this.items[ii].layoutSlot.style.width = width + "px";
                        }
                    }
                    else {
                        for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
                            this.items[ii].layoutSlot.style.width = "";
                        }
                    }
                    
                }
            }
            if (this.colWidths) {
                for (var ii = 0, jj = this.colWidths.length; ii < jj; ii++) {
                    this.items[ii].layoutSlot.style.width = this.colWidths[ii] + "%";
                }
            }
        }
    },
    ensureLayoutMode: function(){
        if (this.layoutParent) {
            this.layoutParent.ensureLayoutSlot(this);
        }
        if (!this._item) {
            this._item = document.createElement("div");
            this._item.setAttribute("data-s-layout", this.id);
            this.layoutSlot.appendChild(this._item);
            this.$$item = $(this._item);
        }
        if (this.layoutParent && this.$layout.$layoutType == "stack") {
            this._item.className = "s-layout-" + this.$layout.$layoutType;
        }
        else {
            this._item.className = this.boxParent.$skin + "-layout s-layout-" + this.$layout.$layoutType;
        }
        
        if (this.$layout.$layoutType !== "tabs") {
            this.tabOpened = null;
        }
        if (this.$layout.$layoutType == "row") {
            if (!this.$layout.$fitToContent) {
                this._item.style.width = "100%";
            }
            if (this.$layout.$layoutSubType) {
                this.colWidths = this.$layout.$layoutSubType.split(",");
            }
        }
        else {
            this._item.style.width = "";
            this.colWidths = null;
        }
        if (this.page.authoringPage) {
            this.page.authoringPage.toggleItemAuthoring(this, true);
        }
    },
    render: function(){
        this.ensureLayoutMode();
        this.items = [];
        this.isItemRegisterDisable = true;
        for (var ii = 0, jj = this.$layout.$items.length; ii < jj; ii++) {
            this.createChildItem(this.$layout.$items[ii]);
        }
        this.isItemRegisterDisable = false;
        this.ensureColWidths();
        if (this.$layout.$layoutType == "tabs") {
            this._ensureOneTabOpened();
        }
        if (this.page.authoringPage) {
            this.page.authoringPage.toggleItemAuthoring(this, true);
        }
    },
    appendTab: function(box){
        if (!this._tabs) {
            this._tabs = document.createElement("nav");
            this._tabs.className = box.$skin + "-tabs-nav";
            $(this._item).prepend(this._tabs);
        }
        this._tabs.appendChild(box._tabTitle);
    },
    _ensureOneTabOpened: function(){
        if (this.items.length > 0) {
            if (!this.tabOpened || this.tabOpened.disposed) {
                this.tabOpened = this.items[0];
            }
            this.tabOpened.openBox(true, true);
        }
    },
    dispose: function(){
        this.$$item = this._item = this._tabs = this.items = this.layoutParent = this.boxParent = this.page = this.layoutSlot = this.$item = this.$layout = this.tabOpened = null;
    }
});
