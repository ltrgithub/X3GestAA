"use strict";
var helpers = require('syracuse-core/lib/helpers');

function Layout() {}

exports.Layout = helpers.defineClass(Layout, null, {
	openTab: function(box) {
		this.$layout.$tabIndex = this.getChildIndex(box);
		syra_site.layoutValidator.validate(box.layoutParent, true);
		box.articleParent.ensureArticleVisibility(true, box);
	},
	getOpenedTab: function() {
		return (this.$layout.$tabIndex !== undefined && this.items[this.$layout.$tabIndex]);
	},
	getChildIndex: function(item) {
		return this.items.indexOf(item);
	},
	create: function($layout, boxParent) {
		this.boxParent = boxParent;
		this.articleParent = boxParent.articleParent || boxParent;
		this.page = this.boxParent.page;
		this.$designLevel = "layout";
		this.id = this.boxParent.id + "-" + (++this.page._childItemOffset);
		syra_map[this.id] = this;
		this.articleParent.layouts[this.id] = this;
		this.isLayout = true;
		this.$item = this.$layout = $layout;
		if (!$layout.$items) {
			$layout.$items = [];
		}
		if (!this.$layout.$layoutType) {
			this.$layout.$layoutType = "stack";
			this.$layout.$widths = "100";
		} else {
			switch (this.$layout.$layoutType) {
				case "side":
					this.$layout.$layoutType = "row";
					this.$layout.$autoSize = true;
					break;
				case "columns":
					this.$layout.$layoutType = "row";
					break;
			}
			if (this.$layout.$layoutSubType) {
				this.$layout.$widths = this.$layout.$layoutSubType;
			}
		}
		this.isRow = this.$layout.$layoutType == "row";
		this.isTabLayout = this.$layout.$layoutType == "tabs";
	},
	getTitle: function() {
		return "";
	},
	applyDesignMetaData: function(metaData, designing) {
		if (designing !== false) {
			if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
				this.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
			}
			if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
				this.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
			}
			if (metaData.$field !== undefined) {
				this.$item.$field = this.$item.$field || {};
				var $props = Object.keys(metaData.$field);
				for (var ii = 0, jj = $props.length; ii < jj; ii++) {
					var $prop = $props[ii];
					this.$item.$field[$prop] = metaData.$field[$prop];
				}
			}
		}
	},
	ensureSection: function(item, index) {
		var layoutParent = this;
		if (!item.isSection) {
			layoutParent = this.loadChildItem(null, {
				$category: "section",
				$layout: {
					$items: []
				}
			}, index).layoutContent;
			index = undefined;
		}
		layoutParent.loadChildItem(item, null, index);
		return item;
	},
	loadChildItem: function(childItem, $childItem, index) {
		if (childItem) {
			return this.appendChildItem(childItem, index, false);
		}
		return this.createChildItem($childItem, null, index);
	},
	appendChildItem: function(item, index, load) {
		if (item.layoutParent) {
			item.layoutParent.extractItem(item, true);
		}
		item.layoutParent = this;
		item.boxParent = this.boxParent;
		this.page.registerBoxField(item, true);

		var append;
		if (!item.layoutSlot) {
			item.layoutSlot = document.createElement("div");
		}
		item.isTabLayout = this.$layout.$layoutType == "tabs";
		if (index === undefined) {
			if (this.isItemRegisterDisable == false) {
				this.$layout.$items.push(item.$item);
			}
			this.items.push(item);
			this.domItem.appendChild(item.layoutSlot);
		} else {
			if (this.isItemRegisterDisable == false) {
				this.$layout.$items.splice(index, 0, item.$item);
			}
			this.items.splice(index, 0, item);
			var sibling = this.items[index + 1];
			if (sibling) {
				sibling.layoutSlot.parentNode.insertBefore(item.layoutSlot, sibling.layoutSlot);
			} else {
				if (item.isTabLayout) {
					append = true;
				}
				this.domItem.appendChild(item.layoutSlot);
			}
		}
		if (this.$layout.$layoutType == "row") {
			if (this.$layout.$valign) {
				item.layoutSlot.style.verticalAlign = this.$layout.$valign;
			}
		}
		item.ensureLayoutMode();
		if (item.$newAddItem) {
			load = true;
			delete item.$newAddItem;
		}
		if (load) {
			if (item.isReloading) {
				item.applyDesignMetaData(item.$item, true);
				delete item.isReloading;
			} else {
				item.loadBox();
			}
		}
		if (item.isTabLayout) {
			if (sibling && sibling.tabTitle && item.tabTitle) {
				sibling.tabTitle.parentNode.insertBefore(item.tabTitle, sibling.tabTitle);
			} else {
				if (append) {
					this.ensureTabsSlot().insertBefore(item.tabTitle, this.tabStop || null);
				}
			}
		}
		return item;
	},
	createChildItem: function($item, item, index) {
		item = this.page.createNewItem($item, this.boxParent, item);
		if (item) {
			this.appendChildItem(item, index, true);
		}
		return item;
	},
	extractItem: function(item, addSpaceBox) {
		var index = this.items.indexOf(item);
		if (index >= 0) {
			this.items.splice(index, 1);
		}
		index = this.$layout.$items.indexOf(item.$item);
		if (index >= 0) {
			this.$layout.$items.splice(index, 1);
		}
		if (addSpaceBox && this.isRow) {
			this.addSpaceBox(index);
		}
		if (item.isTabLayout && item.tabTitle) {
			syra_site.dom.removeChild(item.tabTitle);
			item.isTabTitleRemoved = true;
		}
		if (this.isRow && item.layoutSlot) {
			item.layoutSlot.style.width = "";
		}
		item.layoutParent = null;
		if (item.boxParent && item.boxParent.boxChildItems) {
			index = item.boxParent.boxChildItems.indexOf(item);
			if (index >= 0) {
				item.boxParent.boxChildItems.splice(index, 1);
			}
		}
		if (item.isSection) {
			item.page.unregisterSectionBlock(item);
		}
		return item;
	},

	removeItem: function(item, removeSlot, addSpaceBox) {
		this.extractItem(item, addSpaceBox);
		if (removeSlot && item.layoutSlot) {
			syra_site.dom.removeChild(item.layoutSlot);
		}
		if (item.rowSeparator) {
			syra_site.layoutValidator.removeRowSeparator(item);
		}
		this.articleParent.removeItem(item, true);
	},
	addSpaceBox: function(index) {
		return this.createChildItem({
			$category: "space"
		}, null, index);
	},
	removeSpaceBox: function(all) {
		var spaces = [];
		for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
			if (this.items[ii].isSpaceBox) {
				spaces.push(this.items[ii]);
			}
		}
		if (!all && spaces.length == this.items.length) {
			spaces.shift();
		}
		for (var ii = 0, jj = spaces.length; ii < jj; ii++) {
			this.removeItem(spaces[ii], true);
		}
	},
	ensureLayoutSlot: function(item) {
		var css;
		if (item.$skin) {
			css = (item.isField ? (item.$skinSlot || "s-field") : item.$skin) + "-slot s-slot-" + this.$layout.$layoutType;
		} else {
			css = "s-slot-" + this.$layout.$layoutType;
			if (this.boxParent) {
				css += " " + this.boxParent.$skin + "-layout-parent";
			}
		}
		if (item.$item.$layoutCss) {
			css += " " + item.$item.$layoutCss;
		}
		item.layoutSlot.className = css;
	},
	ensureLayoutMode: function() {
		if (this.layoutParent) {
			this.layoutParent.ensureLayoutSlot(this);
		}
		if (!this.domItem) {
			this.domItem = document.createElement("div");
			this.domItem.syraDesignedLayout = this;
			this.layoutSlot.appendChild(this.domItem);
		}
		var css = "s-layout-" + this.$layout.$layoutType;
		if (this.boxParent.$skin) {
			css = this.boxParent.$skin + "-layout " + css;
		}
		if (this.$item.$css) {
			css += " " + this.$item.$css;
		}
		this.domItem.className = css;
		this.isRow = this.$layout.$layoutType == "row";
		this.isTabLayout = this.$layout.$layoutType == "tabs";
		if (this.isTabLayout) {
			this.ensureTabsSlot();
		}
	},
	ensureTabsSlot: function() {
		if (!this._tabs) {
			this._tabs = document.createElement("div");
			this.domItem.insertBefore(this._tabs, this.domItem.firstChild);
		}
		return this._tabs;
	},
	loadBox: function() {
		this.ensureLayoutMode();
		this.items = [];
		this.isItemRegisterDisable = true;
		for (var ii = 0, jj = this.$layout.$items.length; ii < jj; ii++) {
			this.createChildItem(this.$layout.$items[ii]);
		}
		this.isItemRegisterDisable = false;
	},
	appendTab: function(box) {
		this.ensureTabsSlot();
		this._tabs.className = box.$skin + "-tabs-nav";
		this._tabs.insertBefore(box.tabTitle, this.tabStop || null);
	},
	ensureItemVisibility: function(item, $isHidden) {
		var display = (!item.isDesigning && (!this.isRow && ($isHidden || item.$isHidden || item.isInvisible || item.isItemHidden))) ? "none" : "";
		if (item.layoutSlot && !item.$item.$isPopupContent) {
			//test $isPopupContent important for reference field
			item.layoutSlot.style.display = display;
		}
		if (item.rowSeparator) {
			item.rowSeparator.style.display = display;
		}
		if (item.isDesigning) {
			var site = syra_site;
			item.isDesigningVisibilityForced = true;
			if (item.layoutSlot) {
				site.dom.toggleClass(item.layoutSlot, "s-aw-visibility-forced", item.$isHidden);
				site.dom.toggleClass(item.layoutSlot, "s-aw-advanced-visibility-forced", item.$item.$isAdvanced);
			}
			if (item.domItem) {
				site.dom.toggleClass(item.domItem, "s-aw-visibility-forced", item.$isHidden);
				site.dom.toggleClass(item.domItem, "s-aw-advanced-visibility-forced", item.$item.$isAdvanced);
			}

		} else {
			if (item.isDesigningVisibilityForced) {
				var site = syra_site;
				if (item.layoutSlot) {
					site.dom.toggleClass(item.layoutSlot, "s-aw-visibility-forced", false);
					site.dom.toggleClass(item.layoutSlot, "s-aw-advanced-visibility-forced", false);
				}
				if (item.domItem) {
					site.dom.toggleClass(item.domItem, "s-aw-visibility-forced", false);
					site.dom.toggleClass(item.domItem, "s-aw-advanced-visibility-forced", false);
				}
			}
		}
	},
	getFields: function() {
		return this.getItems("field");
	},
	getItems: function($designLevel, children) {
		if (!children) {
			children = [];
		}
		for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
			var item = this.items[ii];
			if (item != this.boxParent && !item.isSpaceBox) {
				if (item.isLayout || ($designLevel && item.layoutContent)) {
					children = (item.isLayout ? item : item.layoutContent).getItems($designLevel, children);
				} else {
					if (!$designLevel || ($designLevel == item.$designLevel)) {
						children.push(item);
					}
				}
			}
		}
		return children;
	},
	getChildren: function() {
		var children = [];
		for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
			children.push(this.items[ii]);
		}
		return children;
	},
	getColumnsCount: function() {
		return (this.$item.$widths || "100").split(",").length;
	},
	dispose: function() {
		delete syra_map[this.id];
		if (this.domItem) {
			this.domItem = this.domItem.syraDesignedLayout = null;
		}
		this.rowSeparators = this.rowSeparator = this._tabs = this.items = this.layoutSlot = this.$item = this.$layout = null;
		this.layoutParent = this.boxParent = this.articleParent = this.page = null;
	}
});