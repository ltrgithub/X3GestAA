"use strict";
var helpers = require('syracuse-core/lib/helpers');
var EmptyBox = require('./emptyBox').EmptyBox;
var layoutHelper = require('syracuse-ui/lib/article/layouts/layoutHelper');

function Layout(){
}

exports.Layout = helpers.defineClass(Layout, null, {
    appendNewItem: function($item, newItem){
        newItem = this.box.page.createNewItem($item, this.box, newItem);
        this.$layout.$items.push(newItem.$item);
        this.items.push(newItem);
        this.renderChildItem(newItem, this.items.length - 1);
        return newItem;
    },
    removeItem: function(item){
        var index = this.getItemIndex(item.$item);
        this.items.splice(index, 1);
        this.$layout.$items.splice(index, 1);
        this.box.getArticle().removeItem(item, true);
    },
    getItemIndex: function($item){
        for (var ii = 0; ii < this.$layout.$items.length; ii++) {
            if (this.$layout.$items[ii] == $item) {
                return ii;
            }
        }
        return -1;
    },
    ensureEmptyBox: function(add){
        if (add || this.items.length == 0) {
            return this.appendNewItem({}, new EmptyBox());
        }
        return null;
    },
    toggleAuthoring: function(isOn){
        if (!this.box.page.isAuthoringDisabled) {
            var $layoutType = this.$layout.$layoutType;
            for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
                var child = this.items[ii];
                if (child.$layout) {
                    if ($layoutType != "tabs") {
                        var css = "s-aw-layout-" + $layoutType;
                        /*if ($layoutType == "columns") {
                         document.site.toggleClass(this._root, "s-aw-layout-table-on", isOn);
                         }*/
                        document.site.toggleClass(child.$$container[0], css, isOn);
                    }
                    child.toggleAuthoring(isOn);
                }
            }
        }
    },
    
    wrapInSlot: function(item, itemIndex){
        item.layoutParent = this;
        item.boxParent = this.box;
        if (this.$layout.$layoutType == "side") {
            this.$layout.$layoutType = "row";
            this.$layout.$fitToContent = true;
        }
        if (this.$layout.$layoutType == "columns") {
            this.$layout.$layoutType = "row";
        }
        item.$isTabLayout = this.$layout.$layoutType == "tabs";
        var $$slot, slot;
        if (this.$layout.$layoutType == "row") {
            if (this._childSlots.length <= itemIndex) {
                var slot = document.createElement("div");
                slot.className = this.box.$skin + "-layout-cell s-layout-cell";
                if (this.colWidths) {
                    slot.style.width = this.colWidths[itemIndex] + "%";
                }
                this._root.appendChild(slot);
                this._childSlots.push(slot);
            }
            else {
                slot = this._childSlots[itemIndex];
            }
            $$slot = $(slot);
            if (this.$layout.$valign) {
                slot.style.verticalAlign = this.$layout.$valign;
            }
            else {
                if (item.$field) {
                    slot.style.verticalAlign = "bottom";
                }
            }
        }
        else {
            if (item.$layout) {
                $$slot = $(slot = this._root.appendChild(document.createElement("div")));
                if (item.$layout.$id) {
                    slot.setAttribute("id", item.$layout.$id);
                }
            }
        }
        item.$$container = $$slot ? $$slot : $(this._root);
        if (item.$$item) {
            if (item.$$item.parent()[0] != item.$$container[0]) {
                item.$$container.append(item.$$item);
            }
            if (item.ensureLayoutMode) {
                item.ensureLayoutMode();
                if (item._tabTitle) {
                    item.openBox(this.tabOpened == item);
                }
            }
        }
    },
    renderChildItem: function(item, itemIndex){
        if (this.$layout.$layoutType == "tabs") {
            if (item.$item.$opened) {
                this.tabOpened = item;
            }
        }
        this.wrapInSlot(item, itemIndex);
        if (item.$layout) {
            item.render();
            if (item.box.page.authoringPage) {
                item.toggleAuthoring(true);
            }
        }
        else {
            item.loadBox();
        }
    },
    _ensureRoot: function(){
        if (this.$layout.$layoutType == "side") {
            this.$layout.$layoutType = "row";
            this.$layout.$fitToContent = true;
        }
        if (this.$layout.$layoutType == "columns") {
            this.$layout.$layoutType = "row";
        }
        if (!this._root) {
            this._root = document.createElement("div");
            this._root.setAttribute("data-s-layout", this.id);
            this.$$container[0].appendChild(this._root);
        }
        this._root.className = "s-layout-" + this.$layout.$layoutType;
        if (this.$layout.$layoutType == "row") {
            this._root.className += " " + this.box.$skin + "-layout-row";
            if (!this.$layout.$fitToContent) {
                this._root.style.width = "100%";
            }
            if (this.$layout.$layoutSubType) {
                this.colWidths = this.$layout.$layoutSubType.split(",");
            }
            this._childSlots = this._childSlots || [];
        }
        else {
            this._root.style.width = "";
            this._childSlots = [];
        }
    },
    render: function(){
        this._ensureRoot();
        this.items = [];
        for (var ii = 0, jj = this.$layout.$items.length; ii < jj; ii++) {
            var item = null;
            var $item = this.$layout.$items[ii];
            if ($item.$items && !$item.$layoutType && !$item.$bind && !$item.$category) {
                $item.$layoutType = "stack";
            }
            if ($item.$layoutType) {
                item = this.box.page.createNewLayout($item, this.box);
            }
            else {
                item = this.box.page.createNewItem($item, this.box);
            }
            if (item) {
                this.items.push(item);
                this.renderChildItem(item, ii);
            }
        }
        if (this.$layout.$layoutType == "tabs") {
            this._ensureOneTabOpened();
        }
        if (this.box.page.authoringPage) {
            this.toggleAuthoring(true);
        }
    },
    appendTab: function(box){
        if (!this._tabs) {
            this._tabs = document.createElement("nav");
            this._tabs.className = box.$skin + "-tabs-nav";
            $(this._root).prepend(this._tabs);
        }
        this._tabs.appendChild(box._tabTitle);
    },
    _ensureOneTabOpened: function(){
        if (this.items.length > 0) {
            (this.tabOpened = this.items[0]).openBox(true, true);
        }
    },
    dispose: function(){
        this._tabs = this.items = this.layoutParent = this.box = this.$$container = this.$layout;
    }
});
