"use strict";
var helpers = require('syracuse-core/lib/helpers');

function Layout(){
}

exports.Layout = helpers.defineClass(Layout, null, {
    create: function($layout, boxParent){
        this.boxParent = boxParent;
        this.articleParent = boxParent.getArticle();
        this.page = this.boxParent.page;
        this.$authoringLevel = "layout";
        this.id = this.boxParent.id + "-" + (++this.articleParent._childLayoutOffset);
        this.articleParent.layouts[this.id] = this;
        this.isLayout = true;
        this.$item = this.$layout = $layout;
        if (!$layout.$items) {
            $layout.$items = [];
        }
        if (!this.$layout.$layoutType) {
            this.$layout.$layoutType = "stack";
            this.$layout.$widths = "100";
        }
        else {
            if (this.$layout.$layoutType == "side") {
                this.$layout.$layoutType = "row";
                this.$layout.$autoSize = true;
            }
            if (this.$layout.$layoutType == "columns") {
                this.$layout.$layoutType = "row";
            }
            if (this.$layout.$layoutSubType) {
                this.$layout.$widths = this.$layout.$layoutSubType;
            }
        }
    },
    getTitle: function(){
        return "";
    },
    applyDesignMetaData: function(metaData, onAuthoring){
        if (onAuthoring !== false) {
            if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
                this.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
            }
            if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
                this.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
            }
            if (metaData.$field !== undefined) {
                this.$item.$field = this.$item.$field || {};
                var $props = Object.keys(metaData.$field);
                for (var ii = 0, jj = $props.length; ii < jj; ii++) {
                    var $prop = $props[ii];
                    this.$item.$field[$prop] = metaData.$field[$prop];
                }
            }
        }
    },
    loadChildItem: function(childItem, $childItem, index){
        if (childItem) {
            return this.appendChildItem(childItem, index, false);
        }
        return this.createChildItem($childItem, null, index);
    },
    appendChildItem: function(item, index, load){
        item.layoutParent = this;
        item.boxParent = this.boxParent;
        var append;
        if (!item.layoutSlot) {
            item.layoutSlot = document.createElement("div");
        }
        item.isTabLayout = this.$layout.$layoutType == "tabs";
        if (index === undefined) {
            if (this.isItemRegisterDisable == false) {
                this.$layout.$items.push(item.$item);
            }
            this.items.push(item);
            this._item.appendChild(item.layoutSlot);
        }
        else {
            if (this.isItemRegisterDisable == false) {
                this.$layout.$items.splice(index, 0, item.$item);
            }
            this.items.splice(index, 0, item);
            var sibling = this.items[index + 1];
            if (sibling) {
                sibling.layoutSlot.parentNode.insertBefore(item.layoutSlot, sibling.layoutSlot);
            }
            else {
                if (item.isTabLayout) {
                    append = true;
                }
                this._item.appendChild(item.layoutSlot);
            }
        }
        
        
        if (this.$layout.$layoutType == "row") {
            if (this.$layout.$valign) {
                item.layoutSlot.style.verticalAlign = this.$layout.$valign;
            }
            else {
                if (item.$field) {
                    //  item.layoutSlot.style.verticalAlign = "bottom";
                }
            }
        }
        item.ensureLayoutMode();
        if (load) {
            item.loadBox();
        }
        if (item.isTabLayout) {
            if (sibling && sibling.tabTitle && item.tabTitle) {
                sibling.tabTitle.parentNode.insertBefore(item.tabTitle, sibling.tabTitle);
            }
            else {
                if (append) {
                    this._tabs.appendChild(item.tabTitle);
                }
            }
        }
        return item;
    },
    createChildItem: function($item, item, index){
        item = this.page.createNewItem($item, this.boxParent, item);
        if (item) {
            this.appendChildItem(item, index, true);
        }
        return item;
    },
    extractItem: function(item){
        var index = this.getItemIndex(item, true);
        if (index >= 0) {
            this.items.splice(index, 1);
        }
        index = this.getItemIndex(item.$item);
        if (index >= 0) {
            this.$layout.$items.splice(index, 1);
        }
        if (item.isTabLayout) {
            if (item.tabTitle) {
                document.site.removeDomChild(item.tabTitle);
            }
        }
        item.layoutParent = null; //mettre a null test
        return item;
    },
    removeItem: function(item, removeSlot){
        this.extractItem(item);
        if (removeSlot && item.layoutSlot) {
            document.site.removeDomChild(item.layoutSlot);
        }
        if (item.rowSeparator) {
            if (this.page.layoutValidator) {
                this.page.layoutValidator.removeRowSeparator(item);
            }
        }
        this.articleParent.removeItem(item, true);
    },
    getItemIndex: function($item, byItems){
        var list = byItems ? this.items : this.$layout.$items;
        for (var ii = 0; ii < list.length; ii++) {
            if (list[ii] == $item) {
                return ii;
            }
        }
        return -1;
    },
    addSpaceBox: function(index){
        return this.createChildItem({
            $category: "space"
        }, null, index);
    },
    removeSpaceBox: function(all){
        var spaces = [];
        for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
            if (this.items[ii].isSpaceBox) {
                spaces.push(this.items[ii]);
            }
        }
        if (!all && spaces.length == this.items.length) {
            spaces.shift();
        }
        for (var ii = 0, jj = spaces.length; ii < jj; ii++) {
            this.removeItem(spaces[ii], true);
        }
    },
    ensureLayoutSlot: function(item){
        if (item.$skin) {
            item.layoutSlot.className = (item.isField ? "s-field" : item.$skin) + "-slot s-slot-" + this.$layout.$layoutType;
        }
        else {
            item.layoutSlot.className = "s-slot-" + this.$layout.$layoutType;
        }
        if (item.$item.$layoutCss) {
            item.layoutSlot.className += " " + item.$item.$layoutCss;
        }
    },
    ensureLayoutMode: function(){
        if (this.layoutParent) {
            this.layoutParent.ensureLayoutSlot(this);
        }
        if (!this._item) {
            this._item = document.createElement("div");
            this._item.setAttribute("data-s-layout", this.id);
            this.layoutSlot.appendChild(this._item);
            this.$$item = $(this._item);
        }
        if (this.layoutParent) {
            this._item.className = "s-layout-" + this.$layout.$layoutType;
        }
        else {
            this._item.className = this.boxParent.$skin + "-layout s-layout-" + this.$layout.$layoutType;
        }
        if (this.$item.$css) {
            this._item.className += " " + this.$item.$css;
        }
        if (this.page.authoringPage) {
            this.page.authoringPage.toggleItemAuthoring(this, true);
        }
    },
    moveItems: function(targetLayout, movedItems, index){
        if (!movedItems) {
            movedItems = this.items.slice(0); //extract all items
        }
        targetLayout.loadChildItems(movedItems, index);
    },
    loadChildItems: function(items, index){
        for (var ii = 0, jj = items.length; ii < jj; ii++) {
            var item = items[ii];
            this.loadChildItem(item.layoutParent ? item.layoutParent.extractItem(item) : item, null, index);
        }
    },
    wrapIntack: function(items, index){
        var stack = this.createChildItem({
            $layoutType: "stack",
            $items: []
        }, null, index);
        this.moveItems(stack, items);
        return stack;
    },
    loadBox: function(){
        this.ensureLayoutMode();
        this.items = [];
        this.isItemRegisterDisable = true;
        var titit = 1;
        for (var ii = 0, jj = this.$layout.$items.length; ii < jj; ii++) {
            this.createChildItem(this.$layout.$items[ii]);
            titit++;
            
        }
        this.isItemRegisterDisable = false;
        if (this.page.layoutValidator) {
            this.page.layoutValidator.validate(this, true);
        }
        if (this.page.authoringPage) {
            this.page.authoringPage.toggleItemAuthoring(this, true);
        }
    },
    appendTab: function(box){
        if (!this._tabs) {
            this._tabsZindex = document.site._zIndex++;
            this._tabs = document.createElement("nav");
            this._tabs.className = box.$skin + "-tabs-nav";
            $(this._item).prepend(this._tabs);
        }
        box.tabTitle.style.zIndex = this._tabsZindex;
        this._tabs.appendChild(box.tabTitle);
    },
    dispose: function(){
        if (this.id && this.articleParent && this.articleParent.layouts) {
            delete this.articleParent.layouts[this.id];
        }
        this.$$item = this._item = this.rowSeparator = this._tabs = this.items = this.layoutParent = this.articleParent = this.boxParent = this.page = this.layoutSlot = this.$item = this.$layout = this.tabOpened = null;
    }
});
