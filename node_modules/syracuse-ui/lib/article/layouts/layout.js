"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

var _widthSize = {
    fit: null,
    small: "75%",
    medium: "50%",
    large: "25%"
};



function Layout(){
}

exports.Layout = helpers.defineClass(Layout, null, {
    toggleAuthoring: function(isOn){
        //this.box.articleParent == null for page
        if (!(this.box.articleParent ? this.box.articleParent : this.box).isAuthoringDisabled) {
            if (isOn) {
                if (this.$layout.$layoutType == "tabs") {
                    this._tabs.setAttribute("data-s-layout", this.id);
                }
                else {
                    this.$$container[0].setAttribute("data-s-layout", this.id);
                }
            }
            var $layoutType = this.$layout.$layoutType;
            this.toggleEmptyLayout(isOn);
            for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
                var child = this.items[ii];
                if (child.$layout) {
                    if ($layoutType != "tabs") {
                        var css = "s-aw-layout-" + $layoutType;
                        if ($layoutType == "columns") {
                            document.site.toggleClass(this.tableSlot, "s-aw-layout-table-on", isOn);
                        }
                        document.site.toggleClass(child.$$container[0], css, isOn);
                    }
                    child.toggleAuthoring(isOn);
                }
            }
        }
    },
    toggleSeparator: function(show, propagate){
        for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
            var item = this.items[ii];
            if (item.$layout && item.$layout.$layoutType == "columns") {
                item.forEach(function(column){
                    document.site.toggleClass(column.$$container[0], "s-layout-col-sep", show);
                });
            }
        }
    },
    toggleEmptyLayout: function(enable){
        var localize = locale.resources(module)();
        var $$container = (this.$layout.$layoutType == "tabs") ? $(this._tabs) : this.$$container;
        if (enable) {
            if (this.items.length != 0) {
                this.toggleEmptyLayout(false);
            }
            else {
                if (!this.empty) {
                    var $$drop = $("<div class='s-aw-empty-drop'/>");
                    this.empty = {
                        $$item: $("<div class='s-aw-empty'/>").appendTo($$container),
                        $$dropIcon: $("<div class='s-aw-empty-drop-icon'/>").addClass("s-layout-" + this.$layout.$layoutType).appendTo($$drop),
                        $$dropText: $("<div class='s-aw-empty-drop-text'/>").text(localize.l_emptyDropArea).appendTo($$drop)
                    };
                    this.empty.$$item.append(this.empty.$$drop = $$drop).append(this.empty.$$delete = $("<a class='s-aw-layout-delete'/>").text(localize.l_deleteLayout));
                }
            }
        }
        else {
            if (this.empty) {
                this.empty.$$item.remove();
                delete this.empty;
            }
        }
    },
    createColumnLayout: function($subLayout, index){
        var subLayout = this.box.appendLayout($subLayout);
        this._wrapInSlot(subLayout, index);
        this.items.push(subLayout);
        subLayout.layoutParent = this;
        return subLayout;
    },
    appendNewItem: function(options){
        if (this.$layout.$layoutType == "columns") {
            if (this.items.length) {
                this.items[0].appendNewItem(options);
            }
        }
        else {
            var oldLayout = options.newItem.layoutParent;
            if (oldLayout) {
                //oldlayout is null for item added by authoring
                var newItemIndex = oldLayout.getItemIndex(options.newItem);
                oldLayout.$layout.$items.splice(newItemIndex, 1);
                oldLayout.items.splice(newItemIndex, 1);
                if (this != oldLayout) {
                    document.site.layoutAuthoring.onItemMovedOut(oldLayout, options.newItem, true);
                }
            }
            this.toggleEmptyLayout(false);
            options.newIndex = this.$layout.$items.length + 1; //default push at end
            if (options.action) {
                options.newIndex = this.getItemIndex(options.targetItem);
                if (options.action == "insertAfter") {
                    options.newIndex++;
                }
            }
            this.$layout.$items.splice(options.newIndex, 0, options.newItem.$item);
            this.items.splice(options.newIndex, 0, options.newItem);
            (options.newItem.boxParent = this.box).getArticle().idMap[options.newItem.id] = options.newItem;
            options.newItem.layoutParent = this;
            
            if (options.load) {
                this.renderChildItem(options.newItem);
            }
            else {
                this._wrapInSlot(options.newItem)
                options.newItem.$$item.appendTo(options.newItem.$$container);
            }
            if (options.action) {
                if (options.targetItem.$$container == options.newItem.$$container) {
                    options.newItem.$$item[options.action](options.targetItem.$$item);
                }
                else {
                    options.newItem.$$container[options.action](options.targetItem.$$container);
                }
            }
            options.load = false;
            if (this.box.authoringNode) {
                if (options.newItem.authoringNode.parentNode != this.box.authoringNode) {
                    this.box.authoringNode.appendChildItem(options);
                }
            }
            if (options.newItem.authoringNode) {
                options.newItem.authoringNode.selectItem(options.doSelectItem);
            }
            
            if (this.$layout.$layoutType == "tabs") {
                if (options.action) {
                    options.newItem.$$header[options.action](options.targetItem.$$header);
                }
                if (!this.tabOpened) {
                    this._ensureOneTabOpened();
                }
            }
        }
    },
    getItemIndex: function(item){
        for (var ii = 0; ii < this.$layout.$items.length; ii++) {
            if (this.$layout.$items[ii] == item.$item) {
                return ii;
            }
        }
        return -1;
    },
    _wrapInSlot: function(item, itemIndex){
        if (this.$layout.$layoutType == "side") {
            this.$layout.$layoutType = "row";
            this.$layout.$fitToContent = true;
        }
        item.$isTabLayout = false;
        switch (this.$layout.$layoutType) {
            case "tabs":
                item.$isTabLayout = true;
                item.layoutParent = this;
                item.$$container = this.$$container;
                break;
            case "row":
                if (!this.tableSlot) {
                    this.tableSlot = document.createElement("div");
                    this.tableSlot.className = "s-layout-table-row";
                    this.$$container[0].appendChild(this.tableSlot);
                    if (this.$layout.$fitToContent) {
                        this.tableSlot.style.width = "auto";
                    }
                }
                var slot = document.createElement("div");
                slot.className = this.box.$skin + "-layout-row s-layout-row";
                slot.setAttribute("data-s-layout", "row");
                
                if (this.$layout.$valign) {
                    slot.style.verticalAlign = this.$layout.$valign;
                }
                else {
                    if (!item.$field) {
                        slot.style.verticalAlign = "top";
                    }
                }
                item.$$container = $(this.tableSlot.appendChild(slot));
                break;
            case "columns":
                var cell = document.createElement("div");
                item.$$container = $(cell);
                cell.className = this.box.$skin + "-layout-col s-layout-col";
                if (this.box.$item.$isSeparatorsVisible) {
                    cell.className += " s-layout-col-sep";
                }
                cell.style.width = this.colWidths[itemIndex] + "%";
                if (!this.tableSlot) {
                    this.tableSlot = document.createElement("div");
                    this.tableSlot.className = "s-layout-table";
                    if (!this.$layout.$fitToContent) {
                        this.tableSlot.style.width = "100%";
                    }
                    this.$$container[0].appendChild(this.tableSlot);
                }
                this.tableSlot.appendChild(cell);
                break;
            default:
                if (item.$layout) {
                    var slot = document.createElement("div");
                    item.$$container = $(this.$$container[0].appendChild(slot));
                    if (item.$layout.$id) {
                        slot.setAttribute("id", item.$layout.$id);
                    }
                }
                else {
                    item.$$container = this.$$container;
                }
                break;
        }
        if (item.$$item) {
            if (item.ensureLayoutMode && item.$authoringLevel != "field") {
                item.ensureLayoutMode();
                item.authoringNode.setDesignableItem(item, true); //bonne place ??
                if (item._tabTitle) {
                    item.openBox(this.tabOpened == item);
                }
            }
        }
    },
    renderChildItem: function(item){
        if (this.$layout.$layoutType == "tabs") {
            if (item.$item.$opened) {
                this.tabOpened = item;
            }
        }
        item.layoutParent = this;
        this._wrapInSlot(item);
        if (item.$layout) {
            item.render();
            if (document.site.authorPage) {
                item.toggleAuthoring(true);
            }
        }
        else {
            item.loadBox();
            if (this.box.authoringNode) {
                this.box.authoringNode.appendChildItem({
                    newItem: item
                });
            }
        }
    },
    setFieldWidth: function(field){
        var $width = this.box.$item.$fieldsWidth;
        if ($width && field.domValueSlot) {
            var style = field.domValueSlot.style;
            style.maxWidth = null;
            style.paddingRight = null;
            var sizeValue = _widthSize[field.$item.$width = $width];
            if (sizeValue !== undefined) {
                style.paddingRight = sizeValue;
            }
            else {
                if (!field.$isLayoutContentSizeDisabled) {
                    document.site.setFieldWidth(field);
                }
            }
        }
    },
    render: function(refresh){
        this.box.$item.$fieldsWidth = this.box.$item.$fieldsWidth || "content";
        var isLargest = (this.box.$item.$fieldsWidth || "largest") == "largest";
        if (isLargest) {
            this.$$container[0].visibility = "hidden"
            this.fieldMaxWidth = 0;
        }
        if (refresh) {
            for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
                var item = this.items[ii];
                if (item) {
                    if (item.$layout) {
                        item.render(true);
                    }
                    else {
                        this.setFieldWidth(item);
                    }
                }
            }
        }
        else {
            var isColumns;
            if (isColumns = (this.$layout.$layoutType == "columns")) {
                this.colWidths = this.$layout.$layoutSubType.split(",");
            }
            this.items = [];
            for (var ii = 0, jj = this.$layout.$items.length; ii < jj; ii++) {
                var item = null;
                var $item = this.$layout.$items[ii];
                if (isColumns) {
                    this.createColumnLayout($item, ii).render();
                }
                else {
                    if ($item.$layoutType) {
                        item = this.box.appendLayout($item);
                    }
                    else {
                        item = this.box.page.createNewItem($item, this.box);
                    }
                    if (item) {
                        this.items.push(item);
                        this.renderChildItem(item);
                    }
                }
                
            }
        }
        if (isLargest) {
            for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
                var item = this.items[ii];
                if (item.domValueSlot && !item.$isLayoutContentSizeDisabled) {
                    item.domValueSlot.style.maxWidth = this.fieldMaxWidth + "em";
                }
            }
            this.$$container[0].visibility = null;
        }
        if (this.$layout.$layoutType == "tabs") {
            this._ensureOneTabOpened();
        }
        if (isColumns && document.site.authorPage) {
            this.toggleAuthoring(true);
        }
    },
    appendTab: function(box){
        if (!this._tabs) {
            this._tabs = document.createElement("nav");
            this._tabs.className = box.$skin + "-tabs-nav";
            this.$$container.prepend(this._tabs);
        }
        this._tabs.appendChild(box._tabTitle);
    },
    _ensureOneTabOpened: function(){
        if (this.items.length > 0) {
            (this.tabOpened = this.items[0]).openBox(true, true);
        }
    },
    dispose: function(){
        if (this._tabs) {
            document.site.removeDomChild(this._tabs);
        }
        if (this.tableSlot) {
            document.site.removeDomChild(this.tableSlot);
        }
        document.site.removeDomChild(this.tableSlot);
        if (this.items) {
            for (var ii = 0, jj = this.items.length; ii < jj; ii++) {
                var item = this.items[ii];
                if (item && item.$layout) {
                    document.controller.disposeObject(item);
                }
            }
        }
        this._tabs = this.tableSlot = this.items = this.layoutParent = this.box = this.$$container = this.$layout;
    },
    
    
    newAppendNewItem: function(options){
        options.newIndex = this.$layout.$items.length + 1; //default push at end
        this.$layout.$items.splice(options.newIndex, 0, options.newItem.$item);
        this.items.splice(options.newIndex, 0, options.newItem);
        (options.newItem.boxParent = this.box).getArticle().idMap[options.newItem.id] = options.newItem;
        options.newItem.layoutParent = this;
        if (options.load) {
            this.renderChildItem(options.newItem);
        }
        else {
            this._wrapInSlot(options.newItem)
            options.newItem.$$item.appendTo(options.newItem.$$container);
        }
        if (this.$layout.$layoutType == "tabs") {
            if (!this.tabOpened) {
                this._ensureOneTabOpened();
            }
        }
    },
    newFindItemIndex: function(item){
        var foundIndex = -1;
        for (var ii = 0, jj = this.items.length; jj < jj; ii++) {
            if (this.items[ii] == item) {
                foundIndex = ii;
            }
        }
        return foundIndex;
    },
    newRemoveItem: function(item){
        this.items.splice(this.newFindItemIndex(item), 1);
        this.$layout.$items.splice(this.newFindItemIndex(item), 1);
        this.box.getArticle().removeItem(item, true);
    }
});
