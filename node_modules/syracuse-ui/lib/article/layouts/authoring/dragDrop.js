"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');

function DragDrop(){

}

exports.DragDrop = helpers.defineClass(DragDrop, null, {
    onEmptyLayoutArea: function(event){
        this.moveDragImage(event, null, true);
    },
    getSourceNode: function(){
        return this.sourceNode;
    },
    _switchBoxCategory: function(box, $newCategory){
        var $prevAuthoringLevel = box.$authoringLevel;
        box.$authoringLevel = box.$item.$category = $newCategory;
        box._ensureSkin(box.$authoringLevel);
        box._header.className = box._header.className.replace(new RegExp($prevAuthoringLevel, "g"), box.$authoringLevel);
        box.domTitle.className = box.domTitle.className.replace(new RegExp($prevAuthoringLevel, "g"), box.$authoringLevel);
        if (box._tabTitle) {
            box._tabTitle.className = box._tabTitle.className.replace(new RegExp($prevAuthoringLevel, "g"), box.$authoringLevel);
        }
        box._item.className = box._item.className.replace(new RegExp($prevAuthoringLevel, "g"), box.$authoringLevel);
        box._body.className = box._body.className.replace(new RegExp($prevAuthoringLevel, "g"), box.$authoringLevel);
        if (box.authoringNode) {
            box.authoringNode.$authoringLevel = $newCategory;
        }
    },
    onEmptyEvent: function(event, layout){
        if (this.sourceNode) {
            switch (event.type) {
                case "mouseup":
                    var $action = this.getDropAction(event, layout.box.authoringNode);
                    if ($action) {
                        if ($action.$appendNew) {
                            var newBox = this.sourceNode.authorPage.addNewBox({
                                parentBox: layout.box.authoringNode.item.boxParent,
                                $category: $action.$appendNew,
                                layout: layout,
                                openBox: true
                            });
                            newBox.layoutContent.appendNewItem({
                                newItem: this.sourceNode.item
                            });
                        }
                        else {
                            if ($action.$switch) {
                                if ($action.$switch == "block" && this.sourceNode.getChildrenLevel() == "block") {
                                    this.sourceNode.authorPage.moveContent({
                                        sourceNode: this.sourceNode,
                                        levelMoved: "block",
                                        layout: layout,
                                        doSelectItem: false
                                    });
                                    layout = null;
                                    if (!document.site.layoutAuthoring) {
                                        debugger;
                                    }
                                    document.site.layoutAuthoring.deleteChilBox(this.sourceNode.item);
                                }
                                else {
                                    this._switchBoxCategory(this.sourceNode.item, $action.$switch);
                                }
                            }
                            if (layout) {
                                layout.appendNewItem({
                                    newItem: this.sourceNode.item
                                });
                            }
                        }
                        document.site.authorPage.notifyUpdate();
                    }
                    this.stop();
                    delete document.site.DDAuthoring;
                    break;
                case "mousemove":
                    this.moveDragImage(event, layout.box.authoringNode);
                    break;
                case "mouseleave":
                    layout.empty.$$delete[0].style.visibility = "";
                    layout.empty.$$drop.toggleClass("s-drop-over", false);
                    layout.empty.$$dropText.text(this._localize.dd_emptyDropArea);
                    break;
                case "mouseenter":
                    if (this.getDropAction(event, layout.box.authoringNode)) {
                        layout.empty.$$delete[0].style.visibility = "hidden";
                        layout.empty.$$drop.toggleClass("s-drop-over", true);
                        layout.empty.$$dropText.text(this._localize.dd_emptyDropAreaOn);
                        this.moveDragCue(null); //hide
                    }
                    break;
            }
        }
    },
    dropItem: function(){
        var targetItem = this.targetNode.item;
        this.toggleDraggedCss(false);
        if (this.$action.$appendNew) {
            var newBox = this.targetNode.authorPage.addNewBox({
                parentBox: targetItem.boxParent,
                $category: this.$action.$appendNew,
                targetItem: targetItem,
                action: this.$drag.$insert,
                layout: targetItem.layoutParent,
                openBox: true
            });
            newBox.layoutContent.appendNewItem({
                newItem: this.sourceNode.item
            });
        }
        else {
            if (this.$action.$moveContent) {
                this.sourceNode.authorPage.moveContent({
                    sourceNode: this.sourceNode,
                    targetItem: targetItem,
                    action: this.$drag.$insert
                });
            }
            else {
                if (this.$action.$switch) {
                    if (this.$action.$switch == "block" && this.sourceNode.getChildrenLevel() == "block") {
                        this.sourceNode.authorPage.moveContent({
                            sourceNode: this.sourceNode,
                            targetItem: targetItem,
                            action: this.$drag.$insert,
                            levelMoved: "block",
                            doSelectItem: false
                        });
                        if (!document.site.layoutAuthoring) {
                            debugger;
                        }
                        document.site.layoutAuthoring.deleteChilBox(this.sourceNode.item);
                        targetItem = null;
                    }
                    else {
                        this._switchBoxCategory(this.sourceNode.item, this.$action.$switch);
                    }
                }
                if (targetItem) {
                    targetItem.layoutParent.appendNewItem({
                        newItem: this.sourceNode.item,
                        targetItem: targetItem,
                        action: this.$drag.$insert,
                        doSelectItem: true
                    });
                }
                
            }
            
        }
        document.site.authorPage.notifyUpdate();
    },
    start: function($$boundary){
        var self = this;
        self._localize = locale.resources(module)();
        self.sourceNode = document.site.requestedDDAuthoringItem.authoringNode;
        self.toggleDraggedCss(true);
        delete document.site.requestedDDAuthoringItem;
        self.boundary = $$boundary.offset();
        self.boundary.right = self.boundary.left + $$boundary.width();
        self.boundary.bottom = self.boundary.top + $$boundary.height();
        $(document).bind("mouseup.syradragdrop", function(event){
            if (self.targetNode) {
                self.dropItem();
            }
            self.stop();
            delete document.site.DDAuthoring;
        }).bind("mousemove.syradragdrop", function(event){
            if (!event.target || event.target && event.target.className.indexOf("s-aw-drop-cue") < 0) {
                self.moveDragImage(event, null, true);
            }
            event.preventDefault();
        });
    },
    _validateMoveContent: function(sourceItem, targetItem){
        var sourceBox = sourceItem;
        while (sourceBox && sourceBox != targetItem.boxParent) {
            sourceBox = sourceBox.boxParent;
        }
        return !sourceBox;
    },
    getDropAction: function(event, targetNode){
        var $action = null;
        if (this.sourceNode) {
            if (this.sourceNode != targetNode) {
                var text;
                if (this.sourceNode.$authoringLevel != "field") {
                    var boxParent = targetNode.item.boxParent;
                    while (boxParent) {
                        if (this.sourceNode.item == boxParent) {
                            return null;
                        }
                        boxParent = boxParent.boxParent
                    }
                }
                switch (this.sourceNode.$authoringLevel) {
                    case "section":
                        switch (targetNode.$authoringLevel) {
                            case "article":
                                text = this._localize.dd_moveItem;
                                $action = {
                                    $move: true
                                };
                                break;
                            case "section":
                                if (this._isEventOnDropEmpty(event)) {
                                    text = this._localize.dd_switchBlock;
                                    $action = {
                                        $switch: "block"
                                    };
                                }
                                else {
                                    text = this._localize.dd_moveItem;
                                    $action = {
                                        $move: true
                                    };
                                }
                                break;
                            case "block":
                                text = this._localize.dd_switchBlock;
                                $action = {
                                    $switch: "block"
                                };
                                break;
                            case "field":
                                if (this._validateMoveContent(this.sourceNode.item, targetNode.item)) {
                                    text = this._localize.dd_moveFields;
                                    $action = {
                                        $moveContent: true
                                    };
                                }
                                break;
                        }
                        break;
                    case "block":
                        switch (targetNode.$authoringLevel) {
                            case "article":
                                if ((targetNode.getChildrenLevel() || "block") == "block") {
                                    text = this._localize.dd_moveItem;
                                    $action = {
                                        $move: true
                                    };
                                }
                                else {
                                    text = this._localize.dd_switchSection;
                                    $action = {
                                        $switch: "section"
                                    };
                                }
                                break;
                            case "section":
                                if (this._isEventOnDropEmpty(event)) {
                                    text = this._localize.dd_moveItem;
                                    $action = {
                                        $move: true
                                    };
                                }
                                else {
                                    text = this._localize.dd_switchSection;
                                    $action = {
                                        $switch: "section"
                                    };
                                }
                                break;
                            case "block":
                                text = this._localize.dd_moveItem;
                                $action = {
                                    $move: true
                                };
                                break;
                            case "field":
                                if (this._validateMoveContent(this.sourceNode.item, targetNode.item)) {
                                    text = this._localize.dd_moveFields;
                                    $action = {
                                        $moveContent: true
                                    };
                                }
                                break;
                        }
                        break
                    case "field":
                        $action = {
                            $move: true
                        };
                        var $authoringLevel = targetNode.$authoringLevel;
                        if (this._isEventOnDropEmpty(event)) {
                            $authoringLevel = targetNode.getChildrenLevel() || "field";
                        }
                        if ($authoringLevel != "field") {
                            $action.$appendNew = $authoringLevel;
                            text = ($authoringLevel == "section") ? this._localize.dd_moveSection : this._localize.dd_moveBlock;
                        }
                        text = text || this._localize.dd_moveItem;
                        break;
                }
                if (text) {
                    this._ensureDragImage();
                    $(this._info).text(text.replace("{0}", this.sourceNode.item.getTitle()));
                }
            }
        }
        return $action;
    },
    _calculateDropCuePosition: function(event, targetNode){
        var $layoutType = targetNode.item.layoutParent.$layout.$layoutType;
        var $$target = (targetNode.item._tabTitle) ? $(targetNode.item._tabTitle) : targetNode.item.$$item;
        var offset = $$target.offset();
        this.$drag = {
            left: offset.left,
            top: offset.top,
            width: $$target.outerWidth(),
            height: $$target.outerHeight()
        };
        //calculateDropBoundary
        var xmargin = (this.$drag.width * 0.25);
        var ymargin = (this.$drag.height * 0.25);
        var $dropBoundary = {
            left: this.$drag.left + xmargin,
            right: this.$drag.left + this.$drag.width - xmargin,
            top: this.$drag.top + ymargin,
            bottom: this.$drag.top + this.$drag.height - ymargin
        };
        var $position = {
            top: this.$drag.top,
            left: this.$drag.left
        };
        var isAfter = false;
        if ($layoutType == "stack") {
            isAfter = event.pageY > $dropBoundary.bottom;
            $position.top = this.$drag.top + (isAfter ? this.$drag.height : 0);
            $position.height = "0.6em";
            $position.width = this.$drag.width + "px";
        }
        else {
            isAfter = event.pageX > $dropBoundary.right;
            $position.top -= 3;
            $position.left = this.$drag.left + (isAfter ? (this.$drag.width + 3) : (-3));
            $position.width = "0.6em";
            $position.height = this.$drag.height + 6 + "px";
        }
        this.$drag.$insert = isAfter ? "insertAfter" : "insertBefore";
        return $position;
    },
    moveDragCue: function($position){
        if (!this._dropCue) {
            this._dropCue = document.createElement("div");
            this._dropCue.className = "s-aw-drop-cue";
            document.site.$$container[0].appendChild(this._dropCue);
        }
        this._dropCue.className = "s-aw-drop-cue s-aw-drop-cue-" + (this.targetNode ? this.targetNode.$authoringLevel : this.sourceNode.$authoringLevel);
        if ($position) {
            var style = this._dropCue.style;
            style.top = $position.top + "px";
            style.left = $position.left + "px";
            style.width = $position.width;
            style.height = $position.height;
            style.display = "block";
        }
        else {
            this._dropCue.style.display = "none";
        }
    },
    _ensureDragImage: function(){
        if (!this._info) {
            this._info = document.createElement("div");
            this._info.style.display = "none";
            this._info.className = "s-aw-drag-image";
            document.site.$$container[0].appendChild(this._info);
            $(this._info).text(this.sourceNode.item.getTitle());
        }
    },
    _isEventOnDropEmpty: function(event){
        return event.currentTarget.className.indexOf("s-aw-empty") >= 0;
    },
    moveDragImage: function(event, targetNode, isOut){
        this.$action = null;
        if (targetNode) {
            this.$action = this.getDropAction(event, targetNode);
            if (this._isEventOnDropEmpty(event)) {
                targetNode = null
            }
        }
        var top = Math.max(event.pageY, this.boundary.top);
        var left = Math.max(event.pageX, this.boundary.left);
        top = Math.min(top, this.boundary.bottom);
        left = Math.min(left, this.boundary.right);
        
        var inBoundary = (event.pageX == left && event.pageY == top);
        this._ensureDragImage();
        if (!isOut && this.$action) {
            document.site.toggleClass(this._info, "s-drag-ok", true);
            this.targetNode = targetNode;
        }
        else {
            if (isOut) {
                $(this._info).text(this._localize.dd_moveItem.replace("{0}", this.sourceNode.item.getTitle()));
            }
            document.site.toggleClass(this._info, "s-drag-ok", false);
            this.targetNode = null;
        }
        this.moveDragCue(this.targetNode ? this._calculateDropCuePosition(event, this.targetNode) : null);
        
        this._info.style.display = "";
        this._info.style.top = top + 15 + "px";
        this._info.style.left = left + 15 + "px";
    },
    stop: function(){
        delete document.site.requestedDDAuthoringItem;
        document.controller.disposeObject(this);
    },
    toggleDraggedCss: function(show){
        if (this.sourceNode && this.sourceNode.item && this.sourceNode.item.$$item) {
            document.site.toggleClass(this.sourceNode.item.$$item[0], "s-aw-dragged", show);
        }
    },
    dispose: function(){
        $(document).unbind('.syradragdrop');
        this.toggleDraggedCss(false);
        delete this.targetNode;
        document.site.removeDomChild(this._info);
        document.site.removeDomChild(this._dropCue);
        delete this.sourceNode;
    }
});
