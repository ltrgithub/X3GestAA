"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DragDrop = require("./dragDrop").DragDrop;
var layoutSettings = require('./layoutSettings');


function _extractItem(items, layout){
    layout.items.forEach(function(item){
        if (item.$layout) {
            _extractItem(items, item);
        }
        else {
            items.push(item);
        }
    });
}

function _findChildIndex(childLayout){
    var index;
    var items = childLayout.layoutParent.items;
    for (index = 0; index < items.length && items[index] != childLayout; index++) {
    }
    return (index < items.length) ? index : -1;
}

function _disposeLayout(layout){
    if (layout.layoutParent) {
        var childIndex = _findChildIndex(layout);
        if (childIndex >= 0) {
            layout.layoutParent.$layout.$items.splice(childIndex, 1);
            layout.layoutParent.items.splice(childIndex, 1);
        }
    }
    document.controller.disposeObject(layout);
}

function _findLayout($$item){
    var article = document.controller.findArticle($$item);
    var id = $$item.attr("data-s-layout");
    if (!id) {
        id = $$item.closest("[data-s-layout]").attr("data-s-layout");
    }
    return article ? article.layouts[id] : null;
}

function LayoutAuthoring(){
}


exports.LayoutAuthoring = helpers.defineClass(LayoutAuthoring, null, {
    onClickItem: function(item, target){
        if (!document.controller.findArticle($(target)).isAuthoringDisabled) {
            // if (target.className.indexOf("s-aw-item") >= 0) {
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.stop(event);
                delete document.site.DDAuthoring;
            }
            else {
                delete document.site.requestedDDAuthoringItem;
                var item = document.controller.findItem($(target));
                if (item) {
					item.authoringNode.selectItem();
                }
            }
            //  return false;
        }
        //}
        return true;
    },
    bindEvents: function(){
        var self = this;
        document.site.$$container.delegate(".s-aw-item", "click.author", function(event){
            self.onClickItem(document.controller.findItem($(this)), this);
            return false;
        }).delegate(".s-aw-item", "mousedown.author", function(event){
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.stop(event);
                delete document.site.DDAuthoring;
            }
            else {
                document.site.requestedDDAuthoringItem = document.controller.findItem($(this));
            }
            return false;
        }).delegate(".s-aw-item", "mousemove.author", function(event){
            var item = document.controller.findItem($(this));
            if (document.site.requestedDDAuthoringItem) {
                (document.site.DDAuthoring = new DragDrop()).start(document.site.authorPage.targetPage.$$body);
            }
            else {
                if (document.site.DDAuthoring) {
                    if (item.layoutParent) {
                        document.site.DDAuthoring.moveDragImage(event, item.authoringNode);
                    }
                }
            }
            if (item) {
				item.authoringNode.toggleOverItem(true);
            }
            return false;
        }).delegate(".s-aw-item", "mouseenter.author mouseleave.author", function(event){
            if (document.site.DDAuthoring) {
                var $$item = $(this);
                var layout = _findLayout($$item);
                if (layout && layout.$layout.$layoutType == "tabs") {
                    if (event.type == "mouseenter") {
                        var tabItem = document.controller.findItem($$item);
                        self._ddTabEnter = setTimeout(function(){
                            if (tabItem) {
                                if (!tabItem.$item.$opened) {
                                    tabItem.openBox(true);
                                }
                            }
                        }, 500);
                    }
                    else {
                        if (self._ddTabEnter) {
                            clearTimeout(self._ddTabEnter);
                            delete self._ddTabEnter;
                        }
                    }
                }
            }
            // return false;
        });
        document.site.$$container.delegate(".s-aw-empty", "mouseup.author mousemove.author mouseleave.author mouseenter.author", function(event){
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.onEmptyEvent(event, _findLayout($(this)));
            }
            return false;
        }).delegate(".s-aw-layout-delete", "click.author", function(){
            if (!document.site.DDAuthoring) {
                delete document.site.requestedDDAuthoringItem;
                self.deleteLayout(_findLayout($(this)));
            }
            return false;
        });
    },
    deleteLayout: function(layout){
        var self = this;
        if (layout.$layout) {
            if (layout.layoutParent) {
                var columns = layout.layoutParent;
                if (columns.$layout.$layoutType == "columns") {
                    setTimeout(function(){
                        if (columns.items.length == 2) {
                            layout.$$container.remove();
                            _disposeLayout(layout);
                            columns.toggleAuthoring(false);
                            var newLayout = columns.box.appendLayout({
                                $layoutType: "stack",
                                $items: []
                            });
                            var childIndex;
                            if (columns.layoutParent) {
                                columns.layoutParent.items[childIndex = _findChildIndex(columns)] = newLayout;
                                columns.layoutParent.$layout.$items[childIndex] = newLayout.$layout;
                                newLayout.layoutParent = columns.layoutParent;
                            }
                            else {
                                columns.box.layoutContent = newLayout;
                                columns.box.$item.$layout = newLayout.$layout;
                            }
                            newLayout.$$container = columns.$$container;
                            newLayout.render();
                            self.convertLayout(newLayout, columns);
                            newLayout.toggleAuthoring(true);
                            _disposeLayout(columns);
                            newLayout.box.authoringNode.authorPage.palette.applyChange({
                                $layout: {
                                    $layoutType: newLayout.$layout.$layoutType,
                                    $layoutSubType: null
                                }
                            });
                        }
                        else {
                            layout.$$container.remove();
                            _disposeLayout(layout);
                            columns.colWidths = (columns.$layout.$layoutSubType = columns.items.length == 2 ? "50-50" : "33-33-33").split("-");
                            columns.items.forEach(function(item, index){
                                item.$$container[0].style.width = columns.colWidths[index] + "%";
                            });
                            columns.box.authoringNode.authorPage.palette.applyChange({
                                $layout: {
                                    $layoutType: columns.$layout.$layoutType,
                                    $layoutSubType: columns.$layout.$layoutSubType
                                }
                            });
                        }
                    });
                }
                else {
                    layout.$$container.remove();
                    _disposeLayout(layout);
                }
            }
            else {
                this.deleteChilBox(layout.box);
            }
        }
    },
    deleteChilBox: function(box){
        var layoutParent = box.layoutParent
        var boxIndex = layoutParent.getItemIndex(box);
        layoutParent.$layout.$items.splice(boxIndex, 1);
        layoutParent.items.splice(boxIndex, 1);
        this.onItemMovedOut(layoutParent, box, true);
        if (box.authoringNode) {
            box.authoringNode.parentNode.removeChildNode(box.authoringNode);
        }
        box.getArticle().removeItem(box, true);
    },
    
    convertLayout: function(newLayout, oldLayout){
        var self = this;
        if (newLayout.$layout.$layoutType == "composite") {
            var $newLayout = newLayout.box.$item.$layout = helpers.object.clone(layoutSettings.getComposite(newLayout.$layout.$layoutSubType || "composite-3-1"), true);
            var rootLayout = newLayout.box.layoutContent = newLayout.box.appendLayout($newLayout);
            rootLayout.$$container = newLayout.$$container || oldLayout.$$container;
            rootLayout.render();
            rootLayout.toggleAuthoring(true);
            var items = [];
            _extractItem(items, oldLayout);
            self._fillLayout(items, rootLayout, true);
            var oldLayout = newLayout;
            setTimeout(function(){
                delete oldLayout.items;
                document.controller.disposeObject(oldLayout);
            }, 100);
        }
        else 
            if (newLayout.$layout.$layoutType == "columns") {
                var self = this;
                newLayout.colWidths = newLayout.$layout.$layoutSubType.split(",");
                newLayout.$layout.$items = newLayout.colWidths.map(function(){
                    return {
                        $layoutType: "stack",
                        $items: []
                    };
                });
                newLayout.items = [];
                newLayout.$$container = newLayout.$$container || oldLayout.$$container;
                var oldColumnCount = oldLayout.colWidths ? oldLayout.colWidths.length : 1;
                var isOldColumn = oldLayout.$layout.$layoutType == "columns";
                newLayout.$layout.$items.forEach(function($subLayout, index){
                    var subLayout = newLayout.createColumnLayout($subLayout, index);
                    if (index < oldColumnCount) {
                        $subLayout.$items = oldLayout.$layout.$items;
                        var toConvert = oldLayout;
                        if (isOldColumn) {
                            $subLayout.$items = $subLayout.$items[index].$items;
                            toConvert = toConvert.items[index];
                        }
                        self.convertLayout(subLayout, toConvert);
                    }
                    else {
                        subLayout.render();
                    }
                });
                if (isOldColumn && newLayout.colWidths.length < oldColumnCount) {
                    var lastCol = newLayout.items[newLayout.colWidths.length - 1];
                    for (var ii = newLayout.colWidths.length; ii < oldColumnCount; ii++) {
                        oldLayout.$layout.$items[ii].$items.forEach(function($old){
                            lastCol.$layout.$items.push($old);
                        });
                        self._convertChildItems(lastCol, oldLayout.items[ii]);
                    }
                }
                newLayout.toggleAuthoring(true);
            }
            else {
                newLayout.$$container = newLayout.$$container || oldLayout.$$container;
                newLayout.items = [];
                newLayout.$layout.$items = [];
                self._convertChildItems(newLayout, oldLayout);
                newLayout.toggleAuthoring(true);
                if (newLayout.$layout.$layoutType == "tabs") {
                    delete newLayout.tabOpened;
                    newLayout._ensureOneTabOpened();
                }
            }
    },
    onItemMovedOut: function(layout, item, onAppend){
        switch (layout.$layout.$layoutType) {
            case "tabs":
                if (item._tabTitle) {
                    document.site.removeDomChild(item._tabTitle);
                    delete item._tabTitle;
                }
                break;
            case "stack":
                if (item.$layout) {
                    var $$prev = item.$$container;
                    (item.$$container = $$prev.parent()).append($$prev.children());
                    $$prev.remove();
                }
                break;
            case "row":
                
                break;
            case "side":
                var $$prev = item.$$container;
                (item.$$container = $$prev.parent()).append($$prev.children());
                $$prev.remove();
                break;
        }
        layout.toggleEmptyLayout(true);
    },
    _moveItem: function(newLayout, oldLayout, converted){
        var $$prevContainer = converted.$$container;
        this.onItemMovedOut(oldLayout, converted);
        newLayout._wrapInSlot(converted);
        if (converted.$layout) {
            $$prevContainer.children().appendTo(converted.$$container);
        }
        else {
            converted.$$item.appendTo(converted.$$container);
        }
        converted.layoutParent = newLayout;
        newLayout.$layout.$items.push(converted.$item);
        newLayout.items.push(converted);
    },
    _convertChildItems: function(newLayout, oldLayout){
        if (oldLayout.items) {
            for (var ii = 0, jj = oldLayout.items.length; ii < jj; ii++) {
                var converted = oldLayout.items[ii];
                if (converted.$layout) {
                    this._convertChildItems(newLayout, converted);
                }
                else {
                    this._moveItem(newLayout, oldLayout, converted);
                }
            }
        }
        newLayout.toggleEmptyLayout(true);
    },
    _fillLayout: function(items, layout, isRoot){
        var lastLayout;
        for (var i = 0, jj = layout.items.length; ii < jj; ii++) {
            var newLayout = layout.items[ii];
            if (newLayout.$layout && items.length > 0) {
                if (newLayout.items.length == 0) {
                    var item = items.shift();
                    this._moveItem(newLayout, item.layoutParent, item);
                    newLayout.toggleAuthoring(true);
                    if (newLayout.$layout.$layoutType == "tabs") {
                        delete newLayout.tabOpened;
                        newLayout._ensureOneTabOpened();
                    }
                    newLayout.toggleEmptyLayout(false);
                    lastLayout = newLayout;
                }
                else {
                    lastLayout = this._fillLayout(items, newLayout);
                }
            }
        }
        if (isRoot && items.length > 0) {
            for (var i = 0, jj = items.length; ii < jj; ii++) {
                var item = items[ii];
                this._moveItem(lastLayout, item.layoutParent, item);
            }
        }
        return lastLayout;
    },
    
    dispose: function(){
        if (document.site.$$container) {
            document.site.$$container.undelegate(".author");
        }
        this._ddTabEnter = null;
    }
});
