"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DragDrop = require("./dragDrop").DragDrop;
var layoutSettings = require('./layoutSettings');

exports.convertLayout = function(newLayout, oldLayout){
    if (newLayout.$layout.$layoutType == "composite") {
        var $newLayout = newLayout.box.$item.$layout = helpers.object.clone(layoutSettings.getComposite(newLayout.$layout.$layoutSubType || "composite-3-1"), true);
        var rootLayout = newLayout.box.layoutContent = document.itemFactory.createLayout(newLayout.box, $newLayout);
        rootLayout.$$container = newLayout.$$container || oldLayout.$$container;
        rootLayout.render();
        rootLayout.toggleAuthoring(true);
        var firstLayout = rootLayout;
        while (firstLayout.items.length > 0) {
            firstLayout = firstLayout.items[0];
        }
        exports.convertLayout(firstLayout, oldLayout);
        var oldLayout = newLayout;
        setTimeout(function(){
            delete oldLayout.items;
            document.controller.disposeObject(oldLayout);
        }, 100);
    }
    else 
        if (newLayout.$layout.$layoutType == "columns") {
            var self = this;
            newLayout.colWidths = newLayout.$layout.$layoutSubType.split(",");
            newLayout.$layout.$items = newLayout.colWidths.map(function(){
                return {
                    $layoutType: "stack",
                    $items: []
                };
            });
            newLayout.items = [];
            newLayout.$$container = newLayout.$$container || oldLayout.$$container;
            var oldColumnCount = oldLayout.colWidths ? oldLayout.colWidths.length : 1;
            var isOldColumn = oldLayout.$layout.$layoutType == "columns";
            newLayout.$layout.$items.forEach(function($subLayout, index){
                var subLayout = newLayout._createChildLayout($subLayout, index);
                if (index < oldColumnCount) {
                    $subLayout.$items = oldLayout.$layout.$items;
                    var toConvert = oldLayout;
                    if (isOldColumn) {
                        $subLayout.$items = $subLayout.$items[index].$items;
                        toConvert = toConvert.items[index];
                    }
                    exports.convertLayout(subLayout, toConvert);
                }
                else {
                    subLayout.render();
                }
            });
            if (isOldColumn && newLayout.colWidths.length < oldColumnCount) {
                var lastCol = newLayout.items[newLayout.colWidths.length - 1];
                for (var ii = newLayout.colWidths.length; ii < oldColumnCount; ii++) {
                    oldLayout.$layout.$items[ii].$items.forEach(function($old){
                        lastCol.$layout.$items.push($old);
                    });
                    _convertChildItems(lastCol, oldLayout.items[ii]);
                }
            }
            newLayout.toggleAuthoring(true);
        }
        else {
            newLayout.$$container = newLayout.$$container || oldLayout.$$container;
            newLayout.items = [];
            newLayout.$layout.$items = [];
            _convertChildItems(newLayout, oldLayout);
            newLayout.toggleAuthoring(true);
            if (newLayout.$layout.$layoutType == "tabs") {
                delete newLayout.tabOpened;
                newLayout._ensureOneTabOpened();
            }
        }
};
function _convertChildItems(newLayout, oldLayout){
    if (oldLayout.items) {
        oldLayout.items.forEach(function(converted){
            if (converted.$layout) {
                _convertChildItems(newLayout, converted);
            }
            else {
                var $$prevContainer = converted.$$container;
                exports.onItemMovedOut(oldLayout, converted);
                newLayout._wrapInSlot(converted);
                if (converted.$layout) {
                    $$prevContainer.children().appendTo(converted.$$container);
                }
                else {
                    converted.$$item.appendTo(converted.$$container);
                }
                converted.layoutParent = newLayout;
                newLayout.$layout.$items.push(converted.$item);
                newLayout.items.push(converted);
            }
        });
    }
    newLayout.toggleEmptyLayout(true);
}

exports.onItemMovedOut = function(layout, item, onAppend){
    switch (layout.$layout.$layoutType) {
        case "tabs":
            if (layout.tabOpened == item) {
                delete layout.tabOpened;
                if (onAppend) {
                    var $$tab = item.$$header.prev();
                    if ($$tab.length == 0) {
                        $$tab = item.$$header.next();
                    }
                    setTimeout(function(){
                        $$tab.click();
                    }, 200);
                }
            }
            item.$$body[0].className = "";
            delete item.$$title;
            delete item.$isTabLayout;
            item.$$header.remove();
            delete item.$$header;
            item.drawBox();
            item.authoringNode.setDesignableItem(item);
            break;
        case "stack":
            if (item.$layout) {
                var $$prev = item.$$container;
                (item.$$container = $$prev.parent()).append($$prev.children());
                $$prev.remove();
            }
            break;
        case "row":
            debugger;
            break;
        case "side":
            var $$prev = item.$$container;
            (item.$$container = $$prev.parent()).append($$prev.children());
            $$prev.remove();
            break;
    }
    layout.toggleEmptyLayout(true);
};

function _findChildIndex(childLayout){
    var index;
    var items = childLayout.layoutParent.items;
    for (index = 0; index < items.length && items[index] != childLayout; index++) {
    }
    return (index < items.length) ? index : -1;
}

function _disposeLayout(layout){
    if (layout.layoutParent) {
        var childIndex = _findChildIndex(layout);
        if (childIndex >= 0) {
            layout.layoutParent.$layout.$items.splice(childIndex, 1);
            layout.layoutParent.items.splice(childIndex, 1);
        }
    }
    document.controller.disposeObject(layout);
}


function LayoutAuthoring(){
}

exports.LayoutAuthoring = helpers.defineClass(LayoutAuthoring, null, {
    begin: function(layout, $$container, selector){
        var self = this;
        self.layout = layout;
        if (layout.$layout.$layoutType == "tabs") {
            self.$$container = layout._$$tabs;
            self.selector = "[s-designable=1]" || layout.$tabSkin;
            self.$$container.delegate(self.selector, "mouseenter.author mouseleave.author", function(event){
                if (document.site.DDAuthoring) {
                    if (event.type == "mouseenter") {
                        var tabItem = document.controller.findItem($(this));
                        self._ddTabEnter = setTimeout(function(){
                            if (tabItem) {
                                if (!tabItem.$item.$opened) {
                                    tabItem.openBox(true);
                                }
                            }
                        }, 500);
                    }
                    else {
                        if (self._ddTabEnter) {
                            clearTimeout(self._ddTabEnter);
                            delete self._ddTabEnter;
                        }
                    }
                    return false;
                }
            });
        }
        else {
            self.$$container = self.layout.$$container;
            self.selector = "[s-designable=1]";
        }
        self.$$container.delegate(self.selector, "click.author", function(event){
            delete document.site.requestedDDAuthoringItem;
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.stop(event);
                delete document.site.DDAuthoring;
            }
            else {
                document.controller.findItem($(this)).authoringNode.selectItem();
            }
            return false;
        }).delegate(self.selector, "mousedown.author", function(event){
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.stop(event);
                delete document.site.DDAuthoring;
            }
            else {
                document.site.requestedDDAuthoringItem = document.controller.findItem($(this));
            }
            return false;
        }).delegate(self.selector, "mousemove.author", function(event){
            var item = document.controller.findItem($(this));
            if (document.site.requestedDDAuthoringItem) {
                (document.site.DDAuthoring = new DragDrop()).start(document.site.authoringView.targetPage.$$body);
            }
            else {
                if (document.site.DDAuthoring) {
                    document.site.DDAuthoring.moveDragImage(event, item.authoringNode);
                }
            }
            item.authoringNode.toggleOverItem(true);
            return false;
        });
        self.$$container.delegate(".s-author-empty", "mouseup.author mousemove.author mouseleave.author mouseenter.author", function(event){
            if (document.site.DDAuthoring) {
                document.site.DDAuthoring.onEmptyEvent(event, self.layout);
            }
            return false;
        }).delegate(".s-author-layout-delete", "click.author", function(){
            if (!document.site.DDAuthoring) {
                delete document.site.requestedDDAuthoringItem;
                self.deleteLayout();
            }
            return false;
        });
        this.toggleChildAuthoring(true);
    },
    toggleChildAuthoring: function(isOn){
        var self = this;
        var $layoutType = this.layout.$layout.$layoutType;
        self.layout.toggleEmptyLayout(isOn);
        self.layout.items.forEach(function(child){
            if (child.$layout) {
                if ($layoutType != "tabs") {
                    var css = "s-author-layout-" + $layoutType;
                    if ($layoutType == "columns") {
                        document.site.toggleClass(self.layout._domTable, "s-author-layout-table-on", isOn);
                    }
                    document.site.toggleClass(child.$$container[0], css, isOn);
                }
                child.toggleAuthoring(isOn);
            }
        });
    },
    deleteLayout: function(){
        var self = this;
        if (self.layout.$layout) {
            if (self.layout.layoutParent) {
                var columns = self.layout.layoutParent;
                if (columns.$layout.$layoutType == "columns") {
                    setTimeout(function(){
                        if (columns.items.length == 2) {
                            self.layout.$$container.remove();
                            _disposeLayout(self.layout);
                            columns.toggleAuthoring(false);
                            var newLayout = document.itemFactory.createLayout(columns.box, {
                                $layoutType: "stack",
                                $items: []
                            });
                            var childIndex;
                            if (columns.layoutParent) {
                                columns.layoutParent.items[childIndex = _findChildIndex(columns)] = newLayout;
                                columns.layoutParent.$layout.$items[childIndex] = newLayout.$layout;
                                newLayout.layoutParent = columns.layoutParent;
                            }
                            else {
                                columns.box.layoutContent = newLayout;
                                columns.box.$item.$layout = newLayout.$layout;
                            }
                            newLayout.$$container = columns.$$container;
                            newLayout.render();
                            exports.convertLayout(newLayout, columns);
                            newLayout.toggleAuthoring(true);
                            _disposeLayout(columns);
                            newLayout.box.authoringNode.authoringView.palette.applyChange({
                                $layout: {
                                    $layoutType: newLayout.$layout.$layoutType,
                                    $layoutSubType: null
                                }
                            });
                        }
                        else {
                            self.layout.$$container.remove();
                            _disposeLayout(self.layout);
                            columns.colWidths = (columns.$layout.$layoutSubType = columns.items.length == 2 ? "50-50" : "33-33-33").split("-");
                            columns.items.forEach(function(item, index){
                                item.$$container[0].style.width = columns.colWidths[index] + "%";
                            });
                            columns.box.authoringNode.authoringView.palette.applyChange({
                                $layout: {
                                    $layoutType: columns.$layout.$layoutType,
                                    $layoutSubType: columns.$layout.$layoutSubType
                                }
                            });
                        }
                    });
                }
                else {
                    self.layout.$$container.remove();
                    _disposeLayout(self.layout);
                }
            }
            else {
                self.deleteChilBox(self.layout.box);
            }
        }
    },
    deleteChilBox: function(box){
        var layoutParent = box.layoutParent
        var boxIndex = layoutParent.getItemIndex(box);
        layoutParent.$layout.$items.splice(boxIndex, 1);
        layoutParent.items.splice(boxIndex, 1);
        exports.onItemMovedOut(layoutParent, box, true);
        if (box.authoringNode) {
            box.authoringNode.parentNode.removeChildNode(box.authoringNode);
        }
        box.getArticle().removeItem(box, true);
    },
    end: function(){
        this.toggleChildAuthoring(false);
    },
    dispose: function(){
        if (this.$$container) {
            this.$$container.undelegate(".author");
        }
        delete this.layout;
    }
});
