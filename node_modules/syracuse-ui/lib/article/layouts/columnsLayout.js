"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Layout = require('./layout').Layout;

function ColumnsLayout(){
}

exports.ColumnsLayout = helpers.defineClass(ColumnsLayout, Layout, {
    _wrapInSlot: function(column, columnIndex){
        var cell = document.createElement("div");
        column.$$container = $(cell);
        cell.className = this.box.$skin + "-layout-col s-layout-col";
        if (this.box.$item.$isSeparatorsVisible) {
            cell.className += " s-layout-col-sep";
        }
        cell.style.width = this.colWidths[columnIndex] + "%";
        if (!this._domTable) {
            this._domTable = document.createElement("div");
            this._domTable.className = "s-layout-table";
            if (!this.$layout.$fitToContent) {
                this._domTable.style.width = "100%";
            }
            this.$$container[0].appendChild(this._domTable);
        }
        var $layoutCss = column.$layout.$layoutCss || this.$layout.$layoutCss;
        if ($layoutCss) {
            cell.className += " " + $layoutCss;
        }
        this._domTable.appendChild(cell);
    },
    toggleSeparator: function(show, propagate){
        var self = this;
        self.items.forEach(function(column){
            self.toggleColumnSeparator(column, show);
        });
    },
    
    toggleColumnSeparator: function(column, show){
        document.site.toggleClass(column.$$container[0], "s-layout-col-sep", show);
    },
    appendNewItem: function(options){
        if (this.items.length) {
            this.items[0].appendNewItem(options);
        }
    },
    _createChildLayout: function($subLayout, index){
        var subLayout = document.itemFactory.createLayout(this.box, $subLayout);
        this._wrapInSlot(subLayout, index);
        this.items.push(subLayout);
        subLayout.layoutParent = this;
        return subLayout;
    },
    render: function(refresh){
        var self = this;
        if (refresh) {
            self.items.forEach(function(item){
                if (item && item.$layout) {
                    item.render(refresh);
                }
            });
        }
        else {
            self.colWidths = this.$layout.$layoutSubType.split(",");
            self.items = [];
            self.$layout.$items.forEach(function($item, index){
                self._createChildLayout($item, index).render();
            });
            if (document.site.authorPage) {
                self.toggleAuthoring(true);
            }
        }
    },
    dispose: function(){
        document.site.removeDomChild(this._domTable);
        Layout.prototype.dispose.call(this);
    }
});
