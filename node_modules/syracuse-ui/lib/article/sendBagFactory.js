"use strict";
var helpers = require('syracuse-core/lib/helpers');

function SendBag(){
}

exports.SendBag = helpers.defineClass(SendBag, null, {
    _findDataRecord: function($uuid){
        var found;
        if (this.dataRecords) {
            this.dataRecords.some(function(dataRecord, $index){
                if (dataRecord.$uuid == $uuid) {
                    found = {
                        dataRecord: dataRecord,
                        $index: $index
                    };
                    return true;
                }
                return false;
            });
        }
        return found;
    },
    _ensureFullDataSet: function(list){
        var firstUpdated = this.dataRecords[0];
        this.dataRecords = list.ensureDataSet().map(function(dataRecord){
            var saved;
            if (firstUpdated && firstUpdated.$uuid == dataRecord.$uuid) {
                delete firstUpdated.$index;
                saved = firstUpdated;
                firstUpdated = null;
            }
            else {
                saved = {
                    $uuid: dataRecord.$uuid
                };
            }
            return saved;
        });
        if (firstUpdated && !firstUpdated.$isDeleted) {
            delete firstUpdated.$index;
            this.dataRecords.unshift(firstUpdated);
        }
    },
    _ensureRecord: function(record){
        var dataRecord = record.dataset;
        dataRecord = dataRecord.$singleField || dataRecord;
        var found = this._findDataRecord(dataRecord.$uuid);
        if (!found) {
            if (this.dataRecords.length > 0) {
                this._ensureFullDataSet(record.list);
                found = this._findDataRecord(dataRecord.$uuid);
                if (!found) {
                    found = {
                        dataRecord: {
                            $uuid: dataRecord.$uuid
                        },
                        $index: 0
                    };
                    this.dataRecords.unshift(found.dataRecord);
                }
            }
            else {
                found = {
                    dataRecord: {
                        $uuid: dataRecord.$uuid
                    },
                    $index: 0
                };
                if (record.$index) {
                    found.dataRecord.$index = record.$index;
                }
                this.dataRecords.push(found.dataRecord);
            }
        }
        return found;
    },
    reorderRecord: function(sourceRecord, targetRecord){
        this._ensureRecord(sourceRecord);
        this._ensureRecord(targetRecord);
    },
    createRecord: function(record, index){
        var saved = {
            $uuid: record.dataset.$uuid
        };
        if (this.dataRecords.length > 0) {
            this._ensureFullDataSet(record.list);
            if (!this._findDataRecord(saved.$uuid)) {
                this.dataRecords.splice(index, 0, saved);
            }
        }
        else {
            saved.$index = index;
            this.dataRecords.push(saved);
        }
    },
    deleteRecord: function(record){
        var found = this._ensureRecord(record);
        if (this.dataRecords.length == 1) {
            found.dataRecord.$isDeleted = true;
        }
        else {
            this.dataRecords.splice(found.$index, 1);
        }
    },
    saveRecordChange: function(record, $bind, value, $index){
        var found = this._ensureRecord(record);
        found.dataRecord[$bind] = value;
        if (this.dataRecords.length == 1) {
            found.dataRecord.$index = $index;
        }
    },
    dispose: function(){
        delete this.dataRecords;
    }
});


exports.ensureSendBag = function(page, article){
    var parent = article || page;
    if (parent.sendBag && page.dataset.$etag != parent.sendBag.$etag) {
        delete parent.sendBag;
    }
    if (!parent.sendBag) {
        parent.sendBag = new SendBag();
        parent.sendBag.$etag = page.dataset.$etag = page.dataset.$etag || 1;
        if (parent.isRecordDataset) {
            parent.sendBag.dataRecords = [];
        }
        
    }
    return parent.sendBag;
};
