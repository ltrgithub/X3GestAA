"use strict";
var helpers = require('syracuse-core/lib/helpers');

function SendBag(){
}

exports.SendBag = helpers.defineClass(SendBag, null, {
    findRecord: function($uuid){
        var self = this;
        var recordDataBag;
        if (self.recordDataset) {
            self.recordDataset.some(function(recordData){
                if (recordData.$uuid == $uuid) {
                    recordDataBag = recordData;
                    return true;
                }
                return false;
            });
        }
        return recordDataBag;
    },
    _ensureFullDataSet: function(list){
        var listDataSet = list.getDataSet();
        var firstUpdated = this.recordDataset[0];
        this.recordDataset = listDataSet.map(function(recordData){
            var saved;
            if (firstUpdated && firstUpdated.$uuid == recordData.$uuid) {
                delete firstUpdated.$index;
                saved = firstUpdated;
                firstUpdated = null;
            }
            else {
                saved = {
                    $uuid: recordData.$uuid
                };
            }
            return saved;
        });
        if (firstUpdated) {
            this.recordDataset.unshift(firstUpdated);
        }
    },
    _ensureRecord: function(record){
        var recorDataset = record.dataset;
        recorDataset = recorDataset.$singleField || recorDataset;
        var recordDataBag = this.findRecord(recorDataset.$uuid);
        if (!recordDataBag) {
            if (this.recordDataset.length > 0) {
                this._ensureFullDataSet(record.list);
                recordDataBag = this.findRecord(recorDataset.$uuid);
                if (!recordDataBag) {
                    this.recordDataset.unshift(recordDataBag = {
                        $uuid: recordData.$uuid
                    });
                }
            }
            else {
                recordDataBag = {
                    $uuid: recorDataset.$uuid
                };
                this.recordDataset.push(recordDataBag);
            }
        }
        return recordDataBag;
    },
    reorderRecord: function(sourceRecord, targetRecord){
        this._ensureRecord(sourceRecord);
        this._ensureRecord(targetRecord);
    },
    createRecord: function(record, index){
        var saved = {
            $uuid: record.dataset.$uuid
        };
        if (this.recordDataset.length > 0) {
            this._ensureFullDataSet(record.list);
            var recordDataBag = this.findRecord(saved.$uuid);
            if (!recordDataBag) {
                this.recordDataset.splice(index, 0, saved);
            }
        }
        else {
            saved.$index = index;
            this.recordDataset.push(saved);
        }
    },
    deleteRecord: function(record){
        this.saveRecordChange(record, "$isDeleted", true);
    },
    saveRecordChange: function(record, $bind, value){
        var recordDataBag = this._ensureRecord(record);
        recordDataBag[$bind] = value;
        return recordDataBag;
    },
    dispose: function(){
        delete this.recordDataset;
    }
});


exports.ensureSendBag = function(page, article){
    var parent = article || page;
    if (parent.sendBag && page.dataset.$etag != parent.sendBag.$etag) {
        delete parent.sendBag;
    }
    if (!parent.sendBag) {
        parent.sendBag = new SendBag();
        parent.sendBag.$etag = page.dataset.$etag = page.dataset.$etag || 1;
        if (parent.isRecordDataset) {
            parent.sendBag.recordDataset = [];
        }
        
    }
    return parent.sendBag;
};
