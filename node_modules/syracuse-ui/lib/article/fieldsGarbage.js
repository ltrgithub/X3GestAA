"use strict";
var helpers = require('syracuse-core/lib/helpers');
var AuthorWorkingCopy = require('./authorWorkingCopy').AuthorWorkingCopy;
var fieldsInsert = require('syracuse-ui/lib/article/fieldInsertion').fieldsInsert;
var util = require('syracuse-ui/lib/fusion/tools/util');

function FieldsGarbage() {}

exports.FieldsGarbage = helpers.defineClass(FieldsGarbage, null, {
	load: function(article, dontWarnForUpdates) {
		this.article = article;
		this._garbageFields = {};
		var $garbageFields = this.article.$item.$garbageFields;
		if ($garbageFields) {
			this._$properties = this._getProperties();
			for (var ii = 0, jj = $garbageFields.length; ii < jj; ii++) {
				this._garbageFields[$garbageFields[ii]] = this._$properties[$garbageFields[ii]];
			}
		}
		if (!dontWarnForUpdates) {
			this._warnAdministrationUpdates();
		}
	},
	_getProperties: function() {
		return (this.article.$prototype.$item ? this.article.$prototype.$item.$properties : this.article.$prototype.$properties) || {};
	},
	onAddField: function($bind) {
		if (this._$freeFieldBinds && this._$freeFieldBinds.indexOf($bind) >= 0) {
			this._$freeFieldBinds.splice(this._$freeFieldBinds.indexOf($bind), 1);
		}
		delete this._garbageFields[$bind];
		this._saveGarbageField();
	},
	onExcludeField: function($bind) {
		this._garbageFields[$bind] = 1;
		this._saveGarbageField();
	},
	garbageFreeItems: function() {
		if (this._$freeFieldBinds) {
			this._garbageFields = this._garbageFields || {};
			for (var ii = 0, jj = this._$freeFieldBinds.length; ii < jj; ii++) {
				this._garbageFields[this._$freeFieldBinds[ii]] = 1;
			}
			this._$freeFieldBinds = [];
			this._saveGarbageField();
		}
	},
	_saveGarbageField: function() {
		this.article.$item.$garbageFields = Object.keys(this._garbageFields);
	},
	loadFreeField: function(page, layoutMap) {
		this._isFusionPage = (page || this.article.page).$isFusionPage;
		this._$freeFieldBinds = [];
		if (!this._$properties) {
			this._$properties = this._getProperties();
		}
		var $fieldsBinds = Object.keys(this._$properties);
		var $definedBinds = {};
		this._getDefinedFieldsObject(this.article.$item, $definedBinds, layoutMap);
		for (var ii = 0, jj = $fieldsBinds.length; ii < jj; ii++) {
			var $bind = $fieldsBinds[ii];
			var $field = this._$properties[$bind];
			if ($field && !$field.$isExcluded) {
				if (!$definedBinds[$bind] && ($bind.charAt(0) != "$")) {
					if (!(this._isFusionPage && (page || this.article.page).isNavigationListItem($bind))) {
						if (!this._garbageFields[$bind]) {
							this._$freeFieldBinds.push($bind);
						}
					}
				}
			}
		}
		return this._$freeFieldBinds.length;
	},
	_warnAdministrationUpdates: function(showDiagnoses) {
		var $definedBinds = {}, page = this.article.page;
		if (!page.isDashBoard) {
			this.loadFreeField();
			if (this._$freeFieldBinds.length > 0) {
				return;
				if (showDiagnoses !== false) {
					if (document.site.userProfile.getAuthoringLevel() !== "none") {
						var $isFactory = (page.pageViewSelector && page.pageViewSelector.getSelected()).$isFactory;
						page.showDiagnoses({
							$diagnoses: [{
								$message: page.localize.dskpNewField.replace("{0}", this._$freeFieldBinds.length),
								$severity: "warning",
								$links: {
									"$forget_new_content": {
										$isHidden: (!document.site.developpementMode && $isFactory),
										$title: page.localize.dskpForgetNewContent
									},
									"$apply_default": {
										$title: page.localize.dskpNewApplyDefault
									},
									/*  "$add_new_items": {
                                     $title: page.localize.dskpNewBestPlace
                                     },*/
									"$open_authoring": {
										$title: page.localize.dskpOpenAuthoring
									}
								}
							}]
						});
					}
				}
			}
		}
	},
	onMenuClick: function(menuItem) {
		var page = this.article.page;
		switch (menuItem.$sourceBind || "") {
			case "$restorePage":
				page.reloadLayout(this._$sourceArticle);
				page.showDiagnoses({
					$diagnoses: null
				});
				return false;
			case "$open_authoring":
				page.designArticle(true);
				return false;
			case "$save_authoring":
			case "$saveAs_authoring":
				this._onQuickSaveAuthoring(menuItem.$sourceBind);
				return false;
			case "$forget_new_content":
				if (this._$sourceArticle) {
					page.reloadLayout(this._$sourceArticle);
				}
				page.showDiagnoses({
					$diagnoses: null
				});
				this._onQuickSaveAuthoring("$save_authoring");
				break;
			case "$apply_default":
				if (!this._$sourceArticle) {
					this._$sourceArticle = helpers.object.clone(this.article.$item, true);
				}
				var $article = helpers.object.clone(page.ensureDefaultArticle(this.article.$prototype.$article, this.article.$prototype), true);
				var $newFieldBinds = this._$freeFieldBinds;
				page.reloadLayout($article);
				this._flagNewItems($newFieldBinds);
				page.showDiagnoses({
					$diagnoses: null
				});
				var $isFactory = (page.pageViewSelector && page.pageViewSelector.getSelected()).$isFactory;
				page.showDiagnoses({
					$diagnoses: [{
						$message: page.localize.dskpDefaultApplied,
						$severity: "info",
						$links: {
							"$restorePage": {
								$title: page.localize.dskpRestorePage
							},
							"$save_authoring": {
								$isHidden: (!document.site.developpementMode && $isFactory),
								$title: page.localize.dskpSaveAuthoring
							},
							"$saveAs_authoring": {
								$title: page.localize.dskpSaveAsAuthoring
							},
							"$open_authoring": {
								$title: page.localize.dskpOpenAuthoring
							}
						}
					}]
				});
				return false;
			case "$add_new_items":
				if (!this._$sourceArticle) {
					this._$sourceArticle = helpers.object.clone(this.article.$item, true);
				}
				page.layoutContent.ensureContentIsLoaded();
				var $newFieldBinds = this._$freeFieldBinds;
				page.layoutValidator.validate(page.layoutContent, true);
				this._warnAdministrationUpdates();
				this._flagNewItems($newFieldBinds);
				page.showDiagnoses({
					$diagnoses: null
				});
				var $isFactory = (page.pageViewSelector && page.pageViewSelector.getSelected()).$isFactory;
				page.showDiagnoses({
					$diagnoses: [{
						$message: page.localize.dskpDefaultApplied,
						$severity: "info",
						$links: {
							"$restorePage": {
								$title: page.localize.dskpRestorePage
							},
							"$save_authoring": {
								$isHidden: (!document.site.developpementMode && $isFactory),
								$title: page.localize.dskpSaveAuthoring
							},
							"$saveAs_authoring": {
								$title: page.localize.dskpSaveAsAuthoring
							},
							"$open_authoring": {
								$title: page.localize.dskpOpenAuthoring
							}
						}
					}]
				});
				return false;
		}
		return true;
	},
	_flagNewItems: function($newFieldBinds) {
		if ($newFieldBinds.length > 0) {
			for (var ii = 0, jj = $newFieldBinds.length; ii < jj; ii++) {
				var fields = this.article.boundFields[$newFieldBinds[ii]];
				if (fields) {
					for (var mm = 0, kk = fields.length; mm < kk; mm++) {
						var field = fields[mm];
						if (field.$$item) {
							var flag = document.createElement("div");
							flag.className = "s-new-field-flag";
							field.$$item[0].appendChild(flag);
							document.site.setZIndex(flag);
							if (field.$isHidden && field.layoutSlot) {
								field.layoutSlot.style.display = "";
								if (field.rowSeparator) {
									field.rowSeparator.style.display = "";
								}
								field.$$item[0].style.display = "";
								document.site.toggleClass(field.layoutSlot, "s-aw-visibility-forced", true);
							}
						}
					}
				}
			}
		}
	},
	_onQuickSaveAuthoring: function($menuBind) {
		var self = this;
		if (self._authorWorkingCopy) {
			self._authorWorkingCopy.dispose();
		}
		self._authorWorkingCopy = new AuthorWorkingCopy();
		self._authorWorkingCopy.load(self.article.page, $menuBind, function() {
			setTimeout(function() {
				if (self._authorWorkingCopy) {
					self._authorWorkingCopy.dispose();
					self._authorWorkingCopy = null;
				}
			}, 100);
		});
	},
	_getDefinedFieldsObject: function($article, $object, layoutMap) {
		var secCount = -1,
			blockCount, cat, currSec = null,
			currBlock = null,
			deepMax = 9999,
			deep = 0,
			deepS = deepMax,
			deepB = deepMax;
		var parentLayout, $items = $article && $article.$layout && $article.$layout.$items;
		var parentLayoutB, parentLayoutS;
		if (layoutMap) {
			layoutMap.section = [];
			parentLayout = $items && $article.$layout.$layoutType ? $article.$layout : null;
			parentLayoutB = parentLayoutS = parentLayout, self = this;
		}

		function _walk(items) {
			if (items) {
				deep++;
				for (var ii = 0, jj = items.length; ii < jj; ii++) {
					var $item = items[ii];
					if ($item.$bind) {
						$object[$item.$bind] = true;
						if (currBlock && self._$properties[$item.$bind]) {
							currBlock.boundFields.push($item.$bind);
						}
					} else {
						if (layoutMap && $item.$category && ($item.$category == "section" || $item.$category == "block")) {
							cat = {
								"$title": $item.$title,
								"$XID": $item.$XID,
								"$name": $item.$name,
								"parent": items,
								"parentSlot": ii
							};
							if ($item.$category === "section" && deep <= deepS) {
								deepS = deep;
								cat.block = [];
								cat.boundBlocks = [];
								blockCount = -1;
								layoutMap[$item.$category].push(cat);
								currSec = layoutMap[$item.$category][++secCount];
								cat.parentLayout = parentLayoutS;
							} else if (currSec) {
								deepB = deep;
								cat.items = $item.$items || ($item.$layout && $item.$layout.$items);
								cat.boundFields = [];
								currSec.block.push(cat);
								currSec.boundBlocks.push(cat.$title);
								currBlock = currSec.block[++blockCount];
								cat.parentLayout = parentLayoutB;
							}
						}
						if ($item.$layoutType || $item.$layout && $item.$layout.$layoutType) {
							parentLayout = $item.$layoutType ? $item : $item.$layout;
							parentLayoutS = deep < deepS ? parentLayout : parentLayoutS;
							parentLayoutB = deep < deepB ? parentLayout : parentLayoutB;
						}
						if ($item.$items) {
							_walk($item.$items);
						}
						if ($item.$layout && $item.$layout.$items) {
							_walk($item.$layout.$items);
						}
					}
				}
				deep--;
				if (deep == deepS) {
					deepS = deepMax;
				} else if (deep == deepB) {
					deepB = deepMax;
				}
			}
		}
		_walk($items);
	},
	dispose: function() {
		if (this._authorWorkingCopy) {
			this._authorWorkingCopy.dispose();
		}
		this.article = this._garbageFields = this._$freeFieldBinds = this._$sourceArticle = this._authorWorkingCopy = this._$properties = null;
	}
});

function FieldsAutoInsert() {}

exports.FieldsAutoInsert = helpers.defineClass(FieldsAutoInsert, FieldsGarbage, {
	load: function(article, $designLevel) {
		var $definedBinds = {};
		this._elapse = {
			"elapseF": (new Date()).getTime(),
			"elapseI": 0
		};
		this.page = $designLevel == "article" ? article : article.page;
		if (!this.page.isAutoInsertFieldDisabled) {
			FieldsGarbage.prototype.load.call(this, article, true);
			if (this.loadFreeField(this.page, (this._$layoutMap = {}))) {
				this._elapse.elapseI = (new Date()).getTime();
				this._elapse.elapseF = this._elapse.elapseI - this._elapse.elapseF;
				this._getDefinedFieldsObject(this.article.$prototype.$article, $definedBinds, (this._$protoLayoutMap = {}));
				this._result = fieldsInsert($designLevel, this._isFusionPage, this);
				this._elapse.elapseI = (new Date()).getTime() - this._elapse.elapseI;
			} else {
				this._elapse.elapseF = (new Date()).getTime() - this._elapse.elapseF;
			}
		}
	},
	showDiagnoses: function() {
		var result, i, len, $diagKeys, diagField, $diagnoses = [],
			statsBlocks = null,
			self = this,
			statsFields = null,
			statsSections = null,
			failed, applyChange = false,
			change = {
				"$properties": {}
			};

		function _processDiagnoses(category) {
			var stats = null,
				res;
			if ((res = self._result[category]) && res.diagnoses) {
				// Deal with blocks diagnoses
				$diagKeys = Object.keys(res.diagnoses);
				for (i = 0, len = $diagKeys.length; i < len; i++) {
					$diagnoses.push(res.diagnoses[$diagKeys[i]]);
				}
				stats = self.insertStats(res);
			}
			return stats;
		}
		if (this._result) {
			// Deal with fields diagnoses
			if ((result = this._result.field) && result.diagnoses) {
				$diagKeys = Object.keys(result.diagnoses);
				for (i = 0, len = $diagKeys.length; i < len; i++) {
					diagField = result.diagnoses[$diagKeys[i]];
					if (!util.isErrDiagnosis(diagField.$severity)) {
						change.$properties[$diagKeys[i]] = {
							"$diagnoses": [result.diagnoses[$diagKeys[i]]]
						};
						applyChange = true;
					} else {
						$diagnoses.push(diagField);
					}
				}
				statsFields = this.insertStats(result);
			}
			// Others diagnoses...
			statsBlocks = _processDiagnoses("block");
			statsSections = _processDiagnoses("section");
			// General diagnoses
			if (statsBlocks || statsFields || statsSections) {
				failed = statsBlocks && statsBlocks.ko || (statsFields && statsFields.ko) || (statsSections && statsSections.ko);
				$diagnoses.splice(0, 0, this.makeDiagnosis(null, null, "detection duration : " + this._elapse.elapseF + " ms - insert duration : " + this._elapse.elapseI + " ms", "info"));
				$diagnoses.push(this.makeDiagnosis(failed ? "autoInsertResultError" : "autoInsertResultSuccess", null, null, failed ? "error" : "info"));
				if (applyChange) {
					this.page.applyChange(change);
				}
				document.site.showDiagnoses({
					"$diagnoses": $diagnoses
				}, this);
				//this._tracedDiagnoses($diagnoses.splice($diagnoses.length - 1, 1), {"f": statsFields, "b": statsBlocks, "s": statsSections}, $diagnoses.splice(0, 1), $diagnoses, change);
			}
		}
	},
	insertStats: function(result) {
		var i, len, $diagKeys = Object.keys(result),
			diag, ret = {
				"ok": 0,
				"ko": 0
			};
		for (i = 0, len = $diagKeys.length; i < len; i++) {
			diag = result[$diagKeys[i]];
			if (util.isKnownDiagnosisSeverity($diagKeys[i])) {
				if (diag && util.isErrDiagnosis($diagKeys[i])) {
					ret.ko += diag;
				} else if (diag) {
					ret.ok += diag;
				}
			}
		}
		return ret;
	},
	_tracedDiagnoses: function(status, stats, timing, containersDiag, fieldsDiag) {
		var logger = util.getLog(util.getDefaultLogSwitches(document.syraTrans, {})); // TODO : improve the way to retrieve logger
		var i, len, diag, fld;

		function _getLevel(severity) {
			return util.isErrDiagnosis(severity) ? "error" : (util.isWarnDiagnosis(severity) ? "warn" : "info");
		}
		logger.trace({
			"severety": "warn"
		}, "\t\t============= Entities insertion in authored representation : start reporting =============");
		logger.trace({
			"severety": _getLevel(status[0].$severity)
		}, status[0].$message);
		for (i = 0, len = containersDiag.length; i < len; i++) {
			diag = containersDiag[i];
			logger.trace({
				"severety": _getLevel(diag.$severity)
			}, diag.$message + (diag.$details ? (" - " + diag.$details) : ""));
		}
		fld = fieldsDiag ? Object.keys(fieldsDiag.$properties) : [];
		for (i = 0, len = fld.length; i < len; i++) {
			diag = fieldsDiag.$properties[fld[i]].$diagnoses[0];
			logger.trace({
				"severety": _getLevel(diag.$severity)
			}, diag.$message + (diag.$details ? (" - " + diag.$details) : ""));
		}
		logger.trace({
			"severety": "info"
		}, timing[0].$message);
		logger.trace({
			"severety": "warn"
		}, "\t\t============= Entities insertion in authored representation : stop reporting =============");
	},
	makeDiagnosis: function(labelCode, labelCodeArgs, labelString, severity, details, stack) {
		return util.makeDiagnosisLocale(this.page.localize, labelCode, labelCodeArgs, labelString, severity, details, stack, !this._isFusionPage ? "Client framework" : null);
	},
	dispose: function() {
		FieldsGarbage.prototype.dispose.call(this);
		this._$protoLayoutMap = this._$layoutMap = this.page = this._result = null;
	}
});