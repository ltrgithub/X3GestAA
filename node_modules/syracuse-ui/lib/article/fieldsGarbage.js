"use strict";
var helpers = require('syracuse-core/lib/helpers');
var AuthorWorkingCopy = require('syracuse-ui/lib/authoring/authorWorkingCopy').AuthorWorkingCopy;
var fieldsInsert = require('syracuse-ui/lib/article/fieldInsertion').fieldsInsert;

function FieldsGarbage() {}

exports.FieldsGarbage = helpers.defineClass(FieldsGarbage, null, {
	load: function(article) {
		this.article = article;
		this._garbageFields = {};
		var $garbageFields = this.article.$item.$garbageFields;
		if ($garbageFields) {
			this._$properties = this._getProperties();
			for (var ii = 0, jj = $garbageFields.length; ii < jj; ii++) {
				this._garbageFields[$garbageFields[ii]] = this._$properties[$garbageFields[ii]];
			}
		}
		this._warnAdministrationUpdates();
	},
	_getProperties: function() {
		return (this.article.$prototype.$item ? this.article.$prototype.$item.$properties : this.article.$prototype.$properties) || {};
	},
	onAddField: function($bind) {
		if (this._$freeFieldBinds && this._$freeFieldBinds.indexOf($bind) >= 0) {
			this._$freeFieldBinds.splice(this._$freeFieldBinds.indexOf($bind), 1);
		}
		delete this._garbageFields[$bind];
		this._saveGarbageField();
	},
	onExcludeField: function($bind) {
		this._garbageFields[$bind] = 1;
		this._saveGarbageField();
	},
	garbageFreeItems: function() {
		if (this._$freeFieldBinds) {
			this._garbageFields = this._garbageFields || {};
			for (var ii = 0, jj = this._$freeFieldBinds.length; ii < jj; ii++) {
				this._garbageFields[this._$freeFieldBinds[ii]] = 1;
			}
			this._$freeFieldBinds = [];
			this._saveGarbageField();
		}
	},
	_saveGarbageField: function() {
		this.article.$item.$garbageFields = Object.keys(this._garbageFields);
	},
	loadFreeField: function() {
		this._isFusionPage = this.article.page.$isFusionPage;
		this._$freeFieldBinds = [];
		if(!this._$properties) {
			this._$properties = this._getProperties();
		}
		var $fieldsBinds = Object.keys(this._$properties);
		var $definedBinds = {};
		this._getDefinedFieldsObject(this.article.$item, $definedBinds, (this._$layoutMap = {}));
		for (var ii = 0, jj = $fieldsBinds.length; ii < jj; ii++) {
			var $bind = $fieldsBinds[ii];
			var $field = this._$properties[$bind];
			if ($field && !$field.$isExcluded) {
				if (!$definedBinds[$bind] && ($bind.charAt(0) != "$")) {
					if (!(this._isFusionPage && this.article.page.isNavigationListItem($bind))) {
						if (!this._garbageFields[$bind]) {
							this._$freeFieldBinds.push($bind);
						}
					}
				}
			}
		}
		return this._$freeFieldBinds.length;
	},
	_warnAdministrationUpdates: function(showDiagnoses) {
		var $definedBinds = {}, page = this.article.page;
		if (!page.isDashBoard) {
			if(this.loadFreeField()) {
				this._getDefinedFieldsObject(this.article.$prototype.$article, $definedBinds, (this._$protoLayoutMap = {}));
				//fieldsInsert(this.article.$designLevel, this._isFusionPage, this);
			}
			if (this._$freeFieldBinds.length > 0) {	
				return;
				if (showDiagnoses !== false) {
					if (document.site.userProfile.getAuthoringLevel() !== "none") {
						var $isFactory = (page.pageViewSelector && page.pageViewSelector.getSelected()).$isFactory;
						page.showDiagnoses({
							$diagnoses: [{
								$message: page.localize.dskpNewField.replace("{0}", this._$freeFieldBinds.length),
								$severity: "warning",
								$links: {
									"$forget_new_content": {
										$isHidden: (!document.site.developpementMode && $isFactory),
										$title: page.localize.dskpForgetNewContent
									},
									"$apply_default": {
										$title: page.localize.dskpNewApplyDefault
									},
									/*  "$add_new_items": {
                                     $title: page.localize.dskpNewBestPlace
                                     },*/
									"$open_authoring": {
										$title: page.localize.dskpOpenAuthoring
									}
								}
							}]
						});
					}
				}
			}
		}
	},
	onMenuClick: function(menuItem) {
		var page = this.article.page;
		switch (menuItem.$sourceBind || "") {
			case "$restorePage":
				page.reloadLayout(this._$sourceArticle);
				page.showDiagnoses({
					$diagnoses: null
				});
				return false;
			case "$open_authoring":
				page.designItem(true);
				return false;
			case "$save_authoring":
			case "$saveAs_authoring":
				this._onQuickSaveAuthoring(menuItem.$sourceBind);
				return false;
			case "$forget_new_content":
				if (this._$sourceArticle) {
					page.reloadLayout(this._$sourceArticle);
				}
				page.showDiagnoses({
					$diagnoses: null
				});
				this._onQuickSaveAuthoring("$save_authoring");
				break;
			case "$apply_default":
				if (!this._$sourceArticle) {
					this._$sourceArticle = helpers.object.clone(this.article.$item, true);
				}
				var $article = helpers.object.clone(page.ensureDefaultArticle(this.article.$prototype.$article, this.article.$prototype), true);
				var $newFieldBinds = this._$freeFieldBinds;
				page.reloadLayout($article);
				this._flagNewItems($newFieldBinds);
				page.showDiagnoses({
					$diagnoses: null
				});
				var $isFactory = (page.pageViewSelector && page.pageViewSelector.getSelected()).$isFactory;
				page.showDiagnoses({
					$diagnoses: [{
						$message: page.localize.dskpDefaultApplied,
						$severity: "info",
						$links: {
							"$restorePage": {
								$title: page.localize.dskpRestorePage
							},
							"$save_authoring": {
								$isHidden: (!document.site.developpementMode && $isFactory),
								$title: page.localize.dskpSaveAuthoring
							},
							"$saveAs_authoring": {
								$title: page.localize.dskpSaveAsAuthoring
							},
							"$open_authoring": {
								$title: page.localize.dskpOpenAuthoring
							}
						}
					}]
				});
				return false;
			case "$add_new_items":
				if (!this._$sourceArticle) {
					this._$sourceArticle = helpers.object.clone(this.article.$item, true);
				}
				page.layoutContent.ensureContentIsLoaded();
				var $newFieldBinds = this._$freeFieldBinds;
				page.layoutValidator.validate(page.layoutContent, true);
				this._warnAdministrationUpdates();
				this._flagNewItems($newFieldBinds);
				page.showDiagnoses({
					$diagnoses: null
				});
				var $isFactory = (page.pageViewSelector && page.pageViewSelector.getSelected()).$isFactory;
				page.showDiagnoses({
					$diagnoses: [{
						$message: page.localize.dskpDefaultApplied,
						$severity: "info",
						$links: {
							"$restorePage": {
								$title: page.localize.dskpRestorePage
							},
							"$save_authoring": {
								$isHidden: (!document.site.developpementMode && $isFactory),
								$title: page.localize.dskpSaveAuthoring
							},
							"$saveAs_authoring": {
								$title: page.localize.dskpSaveAsAuthoring
							},
							"$open_authoring": {
								$title: page.localize.dskpOpenAuthoring
							}
						}
					}]
				});
				return false;
		}
		return true;
	},
	_flagNewItems: function($newFieldBinds) {
		if ($newFieldBinds.length > 0) {
			for (var ii = 0, jj = $newFieldBinds.length; ii < jj; ii++) {
				var fields = this.article.boundFields[$newFieldBinds[ii]];
				if (fields) {
					for (var mm = 0, kk = fields.length; mm < kk; mm++) {
						var field = fields[mm];
						if (field.$$item) {
							var flag = document.createElement("div");
							flag.className = "s-new-field-flag";
							field.$$item[0].appendChild(flag);
							document.site.setZIndex(flag);
							if (field.$isHidden && field.layoutSlot) {
								field.layoutSlot.style.display = "";
								if (field.rowSeparator) {
									field.rowSeparator.style.display = "";
								}
								field.$$item[0].style.display = "";
								document.site.toggleClass(field.layoutSlot, "s-aw-visibility-forced", true);
							}
						}
					}
				}
			}
		}
	},
	_onQuickSaveAuthoring: function($menuBind) {
		var self = this;
		if (self._authorWorkingCopy) {
			document.controller.disposeObject(self._authorWorkingCopy);
		}
		self._authorWorkingCopy = new AuthorWorkingCopy();
		self._authorWorkingCopy.load(self.article.page, $menuBind, function() {
			setTimeout(function() {
				if (self._authorWorkingCopy) {
					document.controller.disposeObject(self._authorWorkingCopy);
					self._authorWorkingCopy = null;
				}
			}, 100);
		});
	},
	_getDefinedFieldsObject: function($article, $object, layoutMap) {
		var secCount = -1, blockCount, cat, currSec = null, currBlock = null;
		var $items = $article && $article.$layout && $article.$layout.$items;
		if(layoutMap) {
			layoutMap.section = [];
		}
		function _walk (items) {
			if (items) {
				for (var ii = 0, jj = items.length; ii < jj; ii++) {
					var $item = items[ii];
					if ($item.$bind) {
						$object[$item.$bind] = true;
						if(currBlock) {
							currBlock.field.push($item.$bind);
						}
					} else {
						if (layoutMap && $item.$category) {
							cat = {"$title": $item.$title, "$XID": $item.$XID, "$name": $item.$name};
							if($item.$category === "section") {
								cat.block = [];
								blockCount = -1;
								layoutMap[$item.$category].push(cat);
								currSec = layoutMap[$item.$category][++secCount];
							}
							else {
								cat.items = $item.$items || ($item.$layout && $item.$layout.$items);
								cat.parentItems = $item || $item.$layout;
								cat.field = [];
								currSec.block.push(cat);
								currBlock = currSec.block[++blockCount];
							}
						}
						if($item.$items) {
							_walk($item.$items);
						}
						if ($item.$layout && $item.$layout.$items) {
							_walk($item.$layout.$items);
						}
					}
				}
			}
		}
		_walk($items);
	},
	dispose: function() {
		if (this._authorWorkingCopy) {
			document.controller.disposeObject(this._authorWorkingCopy);
		}
		this.article = this._garbageFields = this._$freeFieldBinds = this._$sourceArticle = this._authorWorkingCopy = null;
		this._$protoLayoutMap = this._$layoutMap = this._$properties = null;
	}
});