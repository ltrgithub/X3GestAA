"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('./rawPage').RawPage;
var locale = require('syracuse-core/lib/locale');


function DesktopPage(){
}

exports.DesktopPage = helpers.defineClass(DesktopPage, RawPage, {
    getDefaultTitle: function(){
        return this._defaultTitle;
    },
    
    loadBox: function(initData){
        var localize = locale.resources(module)();
        switch (this.$pageCategory) {
            case "dashboard":
                this._defaultTitle = localize.p_dashboardTitle;
                this.$authoringSubType = "dashboard";
                this.$isSearchFacetEnabled = false;
                this.$autoFetch = false;
                break;
            case "portlet":
            case "vignette":
                this.$pageCategory = "vignette";
                this._defaultTitle = localize.p_vignetteTitle;
                if (this.$facet == "$demo") {
                    this.$autoFetch = false;
                }
                this.$isSearchFacetEnabled = false;
                this.$item.$isTitleHidden = true;
                break;
            default:
                this._defaultTitle = localize.p_pageTitle;
                this.$isSearchFacetEnabled = true;
                break;
        }
        RawPage.prototype.loadBox.call(this, initData);
    },
    appendArticleMenus: function(){
        RawPage.prototype.appendArticleMenus.call(this, (this.$pageCategory == "vignette") ? "prependTo" : null);
    },
    drawUserProfile: function(userProfile){
        if (document.site.$item.$isUserProfileQuickViewEnabled !== false) {
            var dom;
            if (!this.$$headerUserProfile) {
                dom = document.createElement("div");
                dom.className = this.$skin + "-head-user-profile";
                this.$$headerUserProfile = $(dom).appendTo(this.$$header);
            }
            else {
                this.$$headerUserProfile.empty();
            }
            if (userProfile) {
                if (userProfile.selectedRole) {
                    dom = document.createElement("label");
                    dom.className = this.$skin + "-head-user-role";
                    this.$$headerUserProfile.append($(dom).text(userProfile.selectedRole.description || ""));
                }
                if (userProfile.selectedEndpoint) {
                    dom = document.createElement("label");
                    dom.className = this.$skin + "-head-user-endpoint";
                    this.$$headerUserProfile.append($(dom).text(userProfile.selectedEndpoint.description || ""));
                }
                userProfile.selectedRole && userProfile.selectedRole.description
            }
        }
    },
    appendHeader: function($$container){
        RawPage.prototype.appendHeader.call(this, $$container);
        if (this.$prototype.$description) {
            this.renderDescription(this.$prototype.$description);
        }
        this.$$header.append(this.$$headerLeft = $("<div/>").addClass(this.$skin + "-head-left").append(this.$$header.children()));
    },
    drawBox: function(){
        var dom;
        this.$item.$title = this.$item.$title || "{$title}";
        this.$skin = this.$item.$skin || this.$layoutOptions.$skin;
        dom = document.createElement("article");
        dom.className = this.$skin;
        this.$$item = $(dom).appendTo(this.$$container);
        
        dom = document.createElement("div");
        dom.className = this.$skin + "-data";
        this.$$dataSlot = $(dom).appendTo(this.$$item);
        if (!this.$item.$isTitleHidden) {
            this.appendHeader(this.$$dataSlot);
        }
        
        dom = document.createElement("div");
        dom.className = this.$skin + "-body";
        this.$$body = $(dom).appendTo(this.$$dataSlot);
        
        this._renderLayoutContent(this.$item);
        this.appendArticleMenus();
        if (this.$$menus && this.$isSearchFacetEnabled) {
            document.itemFactory.load(this.$$menus, {
                $category: "searchFacets",
                $prototype: {},
                $bind: "$searchFacets"
            }, this);
        }
    },
    
    applyChange: function(newData){
        RawPage.prototype.applyChange.call(this, newData);
        if (this.onAfterApplyChange) {
            this.onAfterApplyChange(this);
        }
    },
    dispose: function(){
        delete this.onAfterApplyChange;
        RawPage.prototype.dispose.call(this);
    }
});
