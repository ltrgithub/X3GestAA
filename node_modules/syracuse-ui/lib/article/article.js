"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require("./box").Box;
var parametersHelper = require('./utility/parametersHelper');
var _templatePattern = /(\{.*?\})/g;

function Article(){

}

exports.Article = helpers.defineClass(Article, Box, {
    fetch: function(options, callback){
        this.page.fetch(options, callback);
    },
    loadBox: function(initData){
        document.controller.registerArticle(this);
        
        this.articleParent = this.getArticleParent();
        if (this.articleParent) {
            this.$facet = this.$facet || this.articleParent.$facet;
            this.$isEditMode = this.$isEditMode === undefined ? this.articleParent.$isEditMode : this.$isEditMode;
            this.$prototype = this.$prototype || this.articleParent.$prototype.$properties[this.$item.$bind];
        }
        this.dataset = this.dataset || {};
        this.boundFields = {};
        this.layouts = {};
        this._childLayoutOffset = 0;
        this.idMap = {};
        this.menuItems = {};
        this.$menus = {};
        this.menuBoxes = [];
        this.drawBox();
        this.ensureArticleId();
        this.applyActionLinkChange(this.$prototype);
        //this.applyChange(this.$prototype);
        if (initData) {
            this.applyChange(initData);
        }
    },
    ensureArticleId: function(){
        if (this.$$item) {
            this.$$item[0].setAttribute("data-s-article", this.id);
        }
        else {
            //debugger;
        }
    },
    validateFields: function(){
        var self = this;
        var isValidated = true;
        Object.keys(self.boundFields).forEach(function($bind){
            self.boundFields[$bind].forEach(function(field){
                if (field.validate && field.$isEditMode && !field.validate()) {
                    isValidated = false;
                }
            });
        });
        return isValidated;
    },
    
    getArticleParent: function(){
        return this.boxParent ? this.boxParent.getArticle() : null;
    },
    getArticle: function(){
        return this;
    },
    bindMenuBox: function(box){
        var self = this;
        self.menuBoxes.push(box);
        if (self.$menus) {
            Object.keys(self.$menus).forEach(function($bind){
                var item = self.menuItems[$bind];
                if (!item || (item.length == 0)) {
                    box.addMenuItem(self.$menus[$bind], self.dataset);
                }
            });
        }
    },
    bindMenuItem: function(item, record){
        var bounds = this.menuItems[item.$item.$bind];
        if (!bounds) {
            bounds = this.menuItems[item.$item.$bind] = [];
        }
        bounds.push(item);
        var $menu = this.$menus[item.$item.$bind];
        if ($menu) {
            item.setMenu($menu, record);
        }
    },
    unbindMenuItem: function(item){
        if (this.menuItems) {
            var bounds = this.menuItems[item.$item.$bind];
            if (bounds) {
                for (var ii = 0; ii < bounds.length; ii++) {
                    if (bounds[ii] == item) {
                        bounds.splice(ii, 1);
                        break;
                    }
                }
            }
        }
    },
    applyActionLinkChange: function(resources, record){
        var self = this;
        if (record) {
            Object.keys(self.menuItems).forEach(function($bind){
                self.menuItems[$bind].forEach(function(menu){
                    menu.setMenu(null, record);
                });
            });
        }
        if (resources) {
            if (resources.$links === null) {
                Object.keys(self.menuItems).forEach(function($bind){
                    self.menuItems[$bind].forEach(function(menu){
                        document.controller.disposeObject(menu);
                    });
                    
                });
                self.menuItems = {}
                self.$menus = {};
                self.menuBoxes.forEach(function(box){
                    box.clearMenuItems();
                });
            }
            else {
                if (resources.$links) {
                    self._applyMenuChange(resources.$links, record);
                }
                if (resources.$actions) {
                    self._applyMenuChange(resources.$actions, record, true);
                }
            }
        }
    },
    _applyMenuChange: function($deltaMenu, record, $isAction){
        var binds = Object.keys($deltaMenu);
        for (var bindIndex = 0, bindCount = binds.length; bindIndex < bindCount; bindIndex++) {
            var $bind = binds[bindIndex];
            var $menu = $deltaMenu[$bind];
            $menu.$isAction = $isAction;
            $menu.$bind = $bind;
            var $memMenu = this.$menus[$bind];
            if ($memMenu) {
                Object.keys($menu).forEach(function($property){
                    switch ($property) {
                        case "$links":
                        case "$actions":
                            var $delta = $menu[$property];
                            var $mem = $memMenu[$property] = $memMenu[$property] || {};
                            Object.keys($delta).forEach(function($bind){
                                var $source = $delta[$bind];
                                var $target = $mem[$bind] || {};
                                Object.keys($source).forEach(function($prop){
                                    $target[$prop] = $source[$prop];
                                });
                            });
                            break;
                        default:
                            $memMenu[$property] = $menu[$property];
                            break;
                    }
                });
            }
            else {
                this.$menus[$bind] = $menu;
            }
            var bounds = this.menuItems[$bind];
            if (bounds) {
                for (var ii = 0, jj = bounds.length; ii < jj; ii++) {
                    bounds[ii].setMenu($menu, record);
                }
            }
            else {
                for (var ii = 0, jj = this.menuBoxes.length; ii < jj; ii++) {
                    this.menuBoxes[ii].addMenuItem($menu, record);
                }
            }
        }
    },
    ensureDataSet: function(){
        if (this.$item.$bind) {
            this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || {};
        }
        return this.dataset;
    },
    applyChange: function(newData){
        if (newData) {
            this.ensureDataSet();
            var actionsLinks;
            if ((newData.$links !== undefined) || (newData.$actions !== undefined)) {
                actionsLinks = {
                    $links: newData.$links,
                    $actions: newData.$actions
                };
                delete newData.$links;
                delete newData.$actions; //avoid copy of action links
            }
            var $properties = newData.$properties || {};
            
            if (newData.$title) {
                this.setTitle(newData.$title);
            }
            if (newData.$description) {
                this.renderDescription(newData.$description);
            }
            var newFieldMetaData, newFieldValue;
            var $binds = Object.keys(this.boundFields);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                var $bind = $binds[ii];
                newFieldValue = newData[$bind];
                newFieldMetaData = $properties[$bind]
                if (newFieldValue != null || newFieldMetaData != null) {
                    var fields = this.boundFields[$bind];
                    for (var kk = 0, mm = fields.length; kk < mm; kk++) {
                        fields[kk].setDataBind(newFieldValue, newData, newFieldMetaData);
                    }
                }
            }
            this.applyActionLinkChange(actionsLinks, this.dataset);
            if (newData.$diagnoses) {
                document.site.showDiagnoses({
                    $diagnoses: newData.$diagnoses
                }, this);
            }
            this.$syraLoaded = true;
            if (actionsLinks) {
                newData.$links = actionsLinks.$links;
                newData.$actions = actionsLinks.$actions;
            }
        }
    },
    bind: function(item, $bind){
        (this.boundFields[$bind] = this.boundFields[$bind] || []).push(item);
        var store = this.$syraLoaded ? this.dataset : this.$prototype; //set loaded value or default value
        item.setDataBind(store[$bind], store);
    },
    unbind: function(item){
        if (item.$item.$bind) {
            var boundFields = this.boundFields[item.$item.$bind];
            if (boundFields) {
                for (var ii = 0; ii < boundFields.length; ii++) {
                    if (boundFields[ii] == item) {
                        boundFields.splice(ii, 1);
                        break;
                    }
                }
            }
        }
    },
    matchProperty: function(expression, property, record, properties, resultObject){
        var value;
        if (properties) {
            value = properties[property];
        }
        if (value === undefined) {
            value = record[property];
            if (value === undefined || value == expression) {
                value = this.dataset[property];
                if (value === undefined || value == expression) {
                    value = this.$prototype[property];
                    if (value === undefined || value == expression) {
                        var articleParent = this.getArticleParent();
                        if (articleParent) {
                            return articleParent.matchProperty(expression, property, articleParent.dataset, properties, resultObject);
                        }
                    }
                }
            }
        }
        if (resultObject && value !== undefined) {
            resultObject.$value = value;
        }
        return value;
    },
    notifyParametersActionChange: function(menu, record, target, request){
        parametersHelper.notifyActionChange(this, menu, record, target, request);
    },
    formatMenuUrl: function($menu, record, callback){
        if (callback) {
            if ($menu.$parameters) {
                parametersHelper.formatCallBackMenuUrl(this, $menu, record, callback);
            }
            else {
                callback(this.parseExpression($menu.$url, record));
            }
            return;
        }
        else {
            var properties;
            if ($menu.$parameters) {
                properties = parametersHelper.parseParameters(this, $menu.$parameters, record);
            }
            return this.parseExpression($menu.$url, record, properties);
        }
    },
    getLocalization: function(){
        return this.$prototype.$localization || this.page.$prototype.$localization;
    },
    getLocalizeText: function(text){
        if (text.length > 0 && text[1] == "@") {
            text = this.parseExpression(text);
        }
        return text;
    },
    parseExpression: function(expression, record, properties, resultObject){
        var result = expression;
        resultObject = resultObject || {};
        record = record || this.dataset;
        if (result && result.indexOf("{") >= 0) {
            if (result[1] == "@") {
                var text = result.slice(1, result.length - 1);
                var $localization = this.getLocalization();
                if ($localization) {
                    return $localization[text] || text;
                }
                return text;
            }
            else {
                var matches = result.match(_templatePattern);
                for (var ii = 0, jj = matches.length; ii < jj; ii++) {
                    var match = matches[ii];
                    var property = match.substr(1, match.length - 2);
                    resultObject.$property = property;
                    var value = this.matchProperty(match, property, record, properties, resultObject);
                    if (value != null) {
                        if (value.indexOf && value.indexOf("{") >= 0) {
                            value = this.parseExpression(value, record, properties, resultObject);
                        }
                        else {
                            if (typeof(value) == "object") {
                                value = value.$uuid || value.$key || value[property] || null;
                                if (value == null) {
                                    console.log("can not match " + property + " in " + expression);
                                    value = "";
                                }
                            }
                        }
                        if (value != null) {
                            if (value !== undefined) {
                                resultObject.$value = value;
                            }
                            result = result.replace(match, value);
                        }
                    }
                }
            }
        }
        return result;
    },
    removeItem: function(item, removeDom, unbind){
        if (item) {
            if (removeDom) {
                if (item.remove) {
                    item.remove();
                }
                else {
                    if (item.$$item) {
                        item.$$item.remove();
                    }
                }
            }
            if (unbind) {
                this.unbind(item);
            }
            if (item.id) {
                delete this.idMap[item.id];
            }
            if (item.dispose) {
                document.controller.disposeObject(item);
            }
        }
    },
    diposeContent: function(){
        this.menuItems = this.$menus = this.menuBoxes = null;
        if (this.idMap) {
            var ids = Object.keys(this.idMap);
            for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                document.controller.disposeObject(this.idMap[ids[ii]]);
            }
        }
        if (this.layoutContent) {
            this.layoutContent.dispose();
        }
        this.idMap = this.boundFields = null;
    },
    dispose: function(){
        this.diposeContent();
        document.controller.unregisterArticle(this);
        this.$layoutOptions = this.$prototype = this.dataset = this.layouts = null;
        Box.prototype.dispose.call(this);
    }
});
