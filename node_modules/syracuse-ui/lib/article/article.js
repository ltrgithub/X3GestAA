"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require("./box").Box;
var parametersHelper = require('./parametersHelper');
var _templatePattern = /(\{.*?\})/g;

function Article(){

}

exports.Article = helpers.defineClass(Article, Box, {
    fetch: function(options, callback){
        this.page.fetch(options, callback);
    },
    loadBox: function(initData){
        document.controller.registerArticle(this);
        this.articleParent = this.getArticleParent();
        if (this.articleParent) {
            this.$facet = this.$facet || this.articleParent.$facet;
            this.$isEditMode = this.$isEditMode === undefined ? this.articleParent.$isEditMode : this.$isEditMode;
            this.$prototype = this.$prototype || this.articleParent.$prototype.$properties[this.$item.$bind];
            if (!this.$urlParams) {
                this.$urlParams = this.articleParent.$urlParams || {};
            }
        }
        else {
            this.$urlParams = this.$urlParams || {};
        }
        this.dataset = this.dataset || {};
        this.boundFields = {};
        this.layouts = {};
        this.idMap = {};
        this.garbageLinks = this.garbageLinks || {};
        this.menuItems = {};
        this.$menus = {};
        this.menuBoxes = [];
        this.drawBox();
        this.ensureArticleId();
        this.applyActionLinkChange(this.$prototype);
        if (initData) {
            this.applyChange(initData);
        }
    },
    ensureArticleId: function(){
        if (this.$$item) {
            this.$$item[0].setAttribute("data-s-article", this.id);
        }
    },
    validateFields: function(){
        var isValidated = true;
        var $binds = Object.keys(this.boundFields);
        for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
            var fields = this.boundFields[$binds[ii]];
            for (var kk = 0, mm = fields.length; kk < mm; kk++) {
                var field = fields[kk];
                if (!field.$isHidden) {
                    if (field.validate && field.$isEditMode) {
                        var newValue = field.getDataValue();
                        if (!field.validate(newValue)) {
                            isValidated = false;
                        }
                        else {
                            if (field.notifyFieldChange) {
                                field.notifyFieldChange(newValue);
                            }
                        }
                    }
                }
            }
        }
        return isValidated;
    },
    
    getArticleParent: function(){
        return this.boxParent ? this.boxParent.getArticle() : null;
    },
    getArticle: function(){
        return this;
    },
    onMenuDataFilled: function(){
    
    },
    _clearMenuItems: function(){
        var $binds = Object.keys(this.menuItems);
        for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
            var $bind = $binds[ii];
            var items = this.menuItems[$bind];
            for (var kk = 0, mm = items.length; kk < mm; kk++) {
                document.controller.disposeObject(items[kk]);
            }
        }
        this.menuItems = {}
        this.$menus = {};
    },
    applyActionLinkChange: function(resources){
        if (resources) {
            if (resources.$links === null) {
                this._clearMenuItems();
            }
            else {
                if (resources.$links) {
                    this._applyMenusChange(resources.$links);
                }
                if (resources.$actions) {
                    this._applyMenusChange(resources.$actions, true);
                }
            }
        }
    },
    _applyMenusChange: function($deltaMenu, $isAction){
        var binds = Object.keys($deltaMenu);
        for (var bindIndex = 0, bindCount = binds.length; bindIndex < bindCount; bindIndex++) {
            var $bind = binds[bindIndex];
            var $menu = $deltaMenu[$bind];
            if (this.$menus[$bind]) {
                this.page.ensureDeltaManager().applyObjectDelta(this.$menus[$bind], $menu);
            }
            else {
                $menu.$isAction = $isAction;
                $menu.$bind = $bind;
                this.$menus[$bind] = $menu;
            }
            var bounds = this.menuItems[$bind];
            if (bounds) {
                for (var ii = 0, jj = bounds.length; ii < jj; ii++) {
                    bounds[ii].setMenu($menu, this.dataset);
                }
            }
            else {
                if (!this.garbageLinks[$bind]) {
                    for (var ii = 0, jj = this.menuBoxes.length; ii < jj; ii++) {
                        this.menuBoxes[ii].addMenuItem($menu, this.dataset);
                    }
                }
            }
        }
    },
    ensureDataSet: function(){
        if (this.$item.$bind) {
            this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || {};
        }
        return this.dataset;
    },
    applyChange: function(newData){
        if (newData) {
            if (this.page && this.page.diagnosesPanel) {
                this.page.diagnosesPanel.cleanGlobalDiagnoses();
            }
            
            this.ensureDataSet();
            var $properties = newData.$properties || {};
            
            if (newData.$title) {
                this.setTitle(newData.$title);
            }
            if (newData.$description) {
                this.setDescription(newData.$description);
            }
            var newFieldMetaData, newFieldValue;
            var $binds = Object.keys(this.boundFields);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                var $bind = $binds[ii];
                newFieldValue = newData[$bind];
                newFieldMetaData = $properties[$bind]
                if (newFieldValue != null || newFieldMetaData != null) {
                    var fields = this.boundFields[$bind];
                    for (var kk = 0, mm = fields.length; kk < mm; kk++) {
                        fields[kk].setDataBind(newFieldValue, newData, newFieldMetaData, $bind);
                    }
                }
            }
            
            var $binds = Object.keys(this.menuItems);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                var $bind = $binds[ii];
                var items = this.menuItems[$bind];
                for (var kk = 0, mm = items.length; kk < mm; kk++) {
                    items[kk].setMenu(null, this.dataset);
                }
            }
            
            this.applyActionLinkChange(newData);
            if (newData.$diagnoses && !newData.noDispDiag) {
                document.site.showDiagnoses({
                    $diagnoses: newData.$diagnoses
                }, this);
            }
            this.$syraLoaded = true;
        }
    },
    bind: function(item, $bind){
        (this.boundFields[$bind] = this.boundFields[$bind] || []).push(item);
        var dataset, fieldMetadata;
        if (this.$syraLoaded) {
            dataset = this.dataset;
            if (dataset.$properties) 
                fieldMetadata = dataset.$properties[$bind];
        }
        else {
            dataset = this.$prototype; //default value
        }
        item.setDataBind(dataset[$bind], dataset, fieldMetadata, $bind);
    },
    unbind: function(item){
        if (item.$item.$bind) {
            var boundFields = this.boundFields[item.$item.$bind];
            if (boundFields) {
                for (var ii = 0; ii < boundFields.length; ii++) {
                    if (boundFields[ii] == item) {
                        boundFields.splice(ii, 1);
                        break;
                    }
                }
            }
        }
    },
    matchProperty: function(expression, property, record, properties, $subRecordKey){
        var value;
        if (properties) {
            value = properties[property];
        }
        if (value === undefined) {
            if ($subRecordKey) {
                var subRecord = record[$subRecordKey];
                if (subRecord) {
                    value = subRecord[property];
                }
            }
            if (value === undefined) {
                value = record[property];
                if (value === undefined || value == expression) {
                    value = this.dataset[property];
                    if (value === undefined || value == expression) {
                        value = this.$urlParams[property];
                        if (value === undefined || value == expression) {
                            value = this.$prototype[property];
                            if (value === undefined || value == expression) {
                                var articleParent = this.getArticleParent();
                                if (articleParent) {
                                    return articleParent.matchProperty(expression, property, articleParent.dataset, properties);
                                }
                            }
                        }
                    }
                }
            }
        }
        return value;
    },
    notifyParametersActionChange: function(menu, record, target, request){
        parametersHelper.notifyActionChange(this, menu, record, target, request);
    },
    formatMenuUrl: function($menu, record, callback){
        if (callback) {
            if ($menu.$parameters) {
                parametersHelper.formatCallBackMenuUrl(this, $menu, record, callback);
            }
            else {
                callback(this.parseExpression($menu.$sourceUrl || $menu.$url, record, undefined, $menu.$subRecordKey));
            }
            return;
        }
        else {
            var properties;
            if ($menu.$parameters) {
                properties = parametersHelper.parseParameters(this, $menu.$parameters, record);
            }
            return this.parseExpression($menu.$sourceUrl || $menu.$url, record, properties, $menu.$subRecordKey);
        }
    },
    getLocalization: function(){
        return this.$prototype.$localization || this.page.$prototype.$localization;
    },
    getLocalizeText: function(text){
        if (text.length > 0 && text[1] == "@") {
            text = this.parseExpression(text);
        }
        return text;
    },
    parseExpression: function(expression, record, properties, $subRecordKey){
        var result = expression;
        record = record || this.dataset;
        if (result && result.indexOf("{") >= 0) {
            if (result[1] == "@") {
                var text = result.slice(1, result.length - 1);
                var $localization = this.getLocalization();
                if ($localization) {
                    return $localization[text] || text;
                }
                return text;
            }
            else {
                var matches = result.match(_templatePattern);
                for (var ii = 0, jj = matches.length; ii < jj; ii++) {
                    var match = matches[ii];
                    var property = match.substr(1, match.length - 2);
                    var value = this.matchProperty(match, property, record, properties, $subRecordKey);
                    if (value != null) {
                        if (value.indexOf && value.indexOf("{") >= 0) {
                            value = this.parseExpression(value, record, properties, $subRecordKey);
                        }
                        else {
                            if (typeof(value) == "object") {
                                value = value.$uuid || value.$key || value[property] || null;
                                if (value == null) {
                                    console.log("can not match " + property + " in " + expression);
                                    value = "";
                                }
                            }
                        }
                        if (value != null) {
                            result = result.replace(match, value);
                        }
                        else {
                            result = result.replace(match, "");
                        }
                    }
                    else {
                        result = result.replace(match, "");
                    }
                }
            }
        }
        return result;
    },
    removeItem: function(item, removeDom, unbind){
        if (item) {
            if (removeDom) {
                if (item.remove) {
                    item.remove();
                }
                else {
                    if (item.$$item) {
                        item.$$item.remove();
                    }
                    if (item.rowSeparator) {
                        document.site.removeDomChild(item.rowSeparator);
                        delete item.rowSeparator;
                    }
                }
            }
            if (unbind) {
                this.unbind(item);
            }
            if (item.id) {
                delete this.idMap[item.id];
            }
            if (item.dispose) {
                document.controller.disposeObject(item);
            }
        }
    },
    diposeContent: function(){
        this.menuItems = this.menuBoxes = null;
        if (this.idMap) {
            var ids = Object.keys(this.idMap);
            for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                document.controller.disposeObject(this.idMap[ids[ii]]);
            }
        }
        if (this.layouts) {
            var ids = Object.keys(this.layouts);
            for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                document.controller.disposeObject(this.layouts[ids[ii]]);
            }
        }
        this.layouts = this.idMap = this.boundFields = this.layoutContent = null;
    },
    dispose: function(){
        this.diposeContent();
        document.controller.unregisterArticle(this);
        this.$prototype = this.$menus = this.dataset = this.layouts = null;
        Box.prototype.dispose.call(this);
    }
});
