"use strict";

function _findPrototypeFromRepository(page, $prototype) {
	if ($prototype) {
		if (!$prototype.$properties) {
			if ($prototype.$item) {
				$prototype.$item = _findPrototypeFromRepository(page, $prototype.$item);
			} else {
				if ($prototype.$type == "application/x-pointer" && $prototype.$prototype) {
					var index = $prototype.$prototype.indexOf("#");
					if (index >= 0) {
						$prototype = page.$prototypeRepository[$prototype.$prototype.slice(index + 1)];
					}
				}
			}
		}
	}
	return $prototype;
}

function _addPrototypeToRepository(page, $prototype) {
	if ($prototype) {
		if ($prototype.$id) {
			page.$prototypeRepository = page.$prototypeRepository || {};
			page.$prototypeRepository[$prototype.$id] = $prototype;
		}
		if ($prototype.$item && $prototype.$item.$id) {
			_addPrototypeToRepository(page, $prototype.$item);
		}
		return _findPrototypeFromRepository(page, $prototype);
	}
}

exports.beforeDraw = function(article) {
	article.isArticle = true;
	if (article.articleParent) {
		article.$facet = article.$facet || article.articleParent.$facet;
	}
	if (!article.$prototype && article.$item) {
		article.$prototype = article.articleParent.$prototype.$properties[article.$item.$bind];
		if (article.$prototype && article.$prototype.$variants && article.$item.$variantItemKey) {
			article.$prototype = article.$prototype.$variants[article.$item.$variantItemKey];
		}
		article.$prototype = _addPrototypeToRepository(article.page, article.$prototype);
	}

	if (article.$isEditMode === undefined) {
		if (article.$item) {
			article.$isEditMode = article.$item.$isEditMode;
		}
		if (article.$isEditMode === undefined && article.articleParent) {
			article.$isEditMode = article.articleParent.$isEditMode;
		}
	}
	article.dataset = article.dataset || {};
	article.boundFields = {};
	article.idMap = {};
	syra_menus.initializeScope(article);
};
exports.endDraw = function(article, initData) {
	syra_menus.applyChange(article, article.$prototype);
	initData && article.applyChange(initData);
};

exports.notifyClientSave = function(article, savedDelta) {
	if (savedDelta) {
		if (article.isArrayField) {
			if (savedDelta.$uuid) {
				var dataRecord = article.filler.findDataRecord(article, savedDelta.$uuid);
				var delta = {};
				var $binds = Object.keys(article.$prototype.$item.$properties);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					if (savedDelta[$bind] !== undefined) {
						delta[$bind] = savedDelta[$bind];
					}
				}
				delta.$uuid = savedDelta.$uuid;
				delta.$key = savedDelta.$key;
				if (dataRecord) {
					syra_dataset.applyDelta(article.page, dataRecord, delta);
					if (article.recordsMap[savedDelta.$uuid]) {
						article.recordsMap[savedDelta.$uuid].applyChange(delta);
					}
				} else {
					var dataset = syra_dataset.ensure(article);
					delta.$index = dataset.length;
					delta = [delta];
					syra_dataset.applyPageArrayDelta(article.page, dataset, delta);
					article.setValue(delta, undefined, syra_dataset.ensure(article.articleParent));
				}
			}
		} else {
			var delta = {};
			var $binds = Object.keys(article.$prototype.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				if (savedDelta[$bind] !== undefined) {
					delta[$bind] = savedDelta[$bind];
				}
			}
			syra_dataset.applyDelta(article.page, article.dataset, delta);
			article.applyChange(delta);
		}
	}
};

exports.getArticle = function(boxParent) {
	return boxParent.isSection ? boxParent.articleParent : boxParent;
};

exports.applyChange = function(article, newData) {
	if (newData) {
		syra_dataset.ensure(article);
		var $properties = newData.$properties || {};

		if (newData.$title) {
			article.setTitle && article.setTitle(newData.$title);
		}

		var newFieldMetaData, newFieldValue;
		var $binds = Object.keys(article.boundFields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			newFieldValue = newData[$bind];
			newFieldMetaData = $properties[$bind];
			if (newFieldValue !== undefined || newFieldMetaData !== undefined) {
				var fields = article.boundFields[$bind];
				for (var kk = 0, mm = fields.length; kk < mm; kk++) {
					fields[kk].setValue(newFieldValue, newFieldMetaData, newData);
					fields[kk].isWidgetUpated = true;
					article.isWidgetUpated = true;
				}
			}
		}

		var $binds = Object.keys($properties);
		if ($binds.length > 0) {
			for (var mm = 0, pp = $binds.length; mm < pp; mm++) {
				var $bind = $binds[mm];
				if (!article.boundFields[$bind]) {
					if ($properties[$bind].$diagnoses) {
						syra_alert.show({
							$bind: $bind,
							$diagnoses: $properties[$bind].$diagnoses
						}, article);
					}
				}
			}
		}
		$binds = Object.keys(article.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var items = article.menuItems[$bind];
			for (var kk = 0, mm = items.length; kk < mm; kk++) {
				items[kk].outOfDate = true;
			}
		}
		if (newData.$diagnoses && !newData.noDispDiag) {
			syra_alert.show(newData.$diagnoses, article);
		}

		syra_menus.applyChange(article, newData);

		article.masterChildRelations && syra_fields.embedded.applyChangeToDetailRelations(article);
		article.isArticleLoaded = true;
	}
};

exports.dispose = function(article) {
	if (article) {
		syra_menus.disposeScope(article);
		if (article.idMap) {
			var ids = Object.keys(article.idMap);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				var item = article.idMap[ids[ii]];
				item && item.dispose();
			}
		}
		article.layoutContent && article.layoutContent.dispose();
		syra_site.disposeObject(article);
	}
};



exports.add = function(article) {
	exports.beforeDraw(article);
	if (!article.applyChange) {
		article.applyChange = function(newData) {
			exports.applyChange(this, newData);
		};
	}
	if (!article.dispose) {
		article.dispose = function() {
			exports.dispose(this);
		};
	}
	return article;
};