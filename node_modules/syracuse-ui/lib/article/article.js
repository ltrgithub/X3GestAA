"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require("./box").Box;
var FieldsGarbage = require("./fieldsGarbage").FieldsGarbage;
var parametersHelper = require('./parametersHelper');
var _templatePattern = /(\{.*?\})/g;

function Article(){

}

exports.Article = helpers.defineClass(Article, Box, {
    fetch: function(options, callback){
        this.page.fetch(options, callback);
    },
    notifyClientSave: function(savedDelta){
        if (savedDelta) {
            var delta = {};
            var $binds = Object.keys(this.$prototype.$properties);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                var $bind = $binds[ii];
                if (savedDelta[$bind] !== undefined) {
                    delta[$bind] = savedDelta[$bind];
                }
            }
            this.page.ensureDeltaManager().applyObjectDelta(this.dataset, delta);
            this.applyChange(delta);
        }
    },
    getMetaData: function(){
        var $meta = this.articleParent.dataset.$properties;
        if ($meta) {
            $meta = $meta[this.$item.$bind];
        }
        if ($meta && this.$item.$variantItemKey) {
            return $meta[this.$item.$variantItemKey];
        }
        return $meta;
    },
    getPrototype: function(){
        if (!this.$prototype) {
            this.$prototype = this.articleParent.$prototype.$properties[this.$item.$bind];
            if (this.$prototype && this.$prototype.$variants && this.$item.$variantItemKey) {
                this.$prototype = this.$prototype.$variants[this.$item.$variantItemKey];
            }
            this.$prototype = this.page.addPrototypeToRepository(this.$prototype);
        }
        return this.$prototype;
    },
    loadBox: function(initData){
        document.controller.registerArticle(this);
        this.articleParent = this.getArticleParent();
        if (this.articleParent) {
            this.$facet = this.$facet || this.articleParent.$facet;
            if (!this.$urlParams) {
                this.$urlParams = this.articleParent.$urlParams || {};
            }
        }
        else {
            this.$urlParams = this.$urlParams || {};
        }
        this.$prototype = this.getPrototype();
        
        if (this.$isEditMode === undefined) {
            if (this.$item) {
                this.$isEditMode = this.$item.$isEditMode;
            }
            if (this.$isEditMode === undefined && this.articleParent) {
                this.$isEditMode = this.articleParent.$isEditMode;
            }
        }
        this.resizableChildren = {};
        this.dataset = this.dataset || {};
        this.boundFields = {};
        this.layouts = {};
        this.idMap = {};
        this.menuItems = {};
        this.$menus = {};
        this.menusBags = [];
        this.drawBox();
        this.ensureArticleId();
        this.applyActionLinkChange(this.$prototype);
        if (initData) {
            //try {
            this.applyChange(initData);
            /*	} catch (err) {
             document.site.onError(err);
             }*/
        }
    },
    clickMenu: function($bind){
        var menus = this.menuItems[$bind];
        if (menus && menus.length) {
            setTimeout(function(){
                //menus[0].mn.click();
                menus[0].click();
            }, 20);
        }
    },
    ensureArticleId: function(){
        if (this.$$item) {
            this.$$item[0].setAttribute("data-s-article", this.id);
            this.$$item[0].syraArticle = this.id;
        }
    },
    validateFields: function(){
        var isValidated = true;
        var $binds = Object.keys(this.boundFields);
        for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
            var fields = this.boundFields[$binds[ii]];
            for (var kk = 0, mm = fields.length; kk < mm; kk++) {
                var field = fields[kk];
                if (!field.$isHidden) {
                    if (field.validate && field.$isEditMode) {
                        var newValue = field.getDataValue();
                        if (!field.validate(newValue)) {
                            isValidated = false;
                        }
                        else {
                            if (field.notifyFieldChange) {
                                field.notifyFieldChange(newValue);
                            }
                        }
                    }
                }
            }
        }
        return isValidated;
    },
    
    getArticleParent: function(){
        return this.articleParent;
    },
    getArticle: function(){
        return this;
    },
    onMenuDataFilled: function(){
    
    },
    _clearMenuItems: function(){
        var $binds = Object.keys(this.menuItems);
        for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
            var $bind = $binds[ii];
            var mn, items = this.menuItems[$bind];
            for (var kk = 0, mm = items.length; kk < mm; kk++) {
                mn = items[kk];
                if (mn.detailField) {
                    mn.detailField.setDataValue(mn.detailField.currentValue);
                    mn.detailField = null;
                }
                (mn.layoutParent ? mn.layoutParent : this).removeItem(mn, true);
            }
        }
        this.menuItems = {};
        this.$menus = {};
        //menus are physically remode in derived class
    },
    applyActionLinkChange: function(resources){
        if (resources) {
            if (resources.$links === null) {
                this._clearMenuItems();
            }
            else {
                if (resources.$links) {
                    this._applyMenusChange(resources.$links);
                }
                if (resources.$actions) {
                    this._applyMenusChange(resources.$actions, true);
                }
            }
        }
    },
    removeMenuItem: function($bind, removeDom){
        var menuItems = this.menuItems[$bind];
        if (menuItems) {
            for (var ii = 0, jj = menuItems.length; ii < jj; ii++) {
                this.removeItem(menuItems[ii], removeDom);
            }
            delete this.menuItems[$bind];
        }
        delete this.$menus[$bind];
    },
    removeMenuBag: function(menuBag){
        if (this.menusBags) {
            var found = this.menusBags.indexOf(this.menusBox);
            if (found >= 0) {
                this.menusBags.splice(found, 1);
            }
        }
    },
    _addMenuToMenusBag: function($bind, $menu){
        for (var ii = 0, jj = this.menusBags.length; ii < jj; ii++) {
            this.menusBags[ii].addMenuItem($menu, this.dataset);
        }
    },
    _applyMenusChange: function($deltaMenu, $isAction){
        var binds = Object.keys($deltaMenu);
        for (var bindIndex = 0, bindCount = binds.length; bindIndex < bindCount; bindIndex++) {
            var $bind = binds[bindIndex];
            var $menu = $deltaMenu[$bind];
            if ($menu === null) {
                this.removeMenuItem($bind, true);
            }
            else {
                if (this.$menus[$bind]) {
                    this.page.ensureDeltaManager().applyObjectDelta(this.$menus[$bind], $menu);
                }
                else {
                    $menu.$isAction = $isAction;
                    $menu.$bind = $bind;
                    this.$menus[$bind] = $menu;
                }
                var bounds = this.menuItems[$bind];
                if (bounds) {
                    for (var ii = 0, jj = bounds.length; ii < jj; ii++) {
                        bounds[ii].setMenu($menu, this.dataset);
                    }
                }
                else {
                    this._addMenuToMenusBag($bind, $menu);
                }
            }
        }
    },
    ensureDataSet: function(){
        if (this.$item.$bind && this.articleParent) {
            this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || {};
        }
        return this.dataset;
    },
    applyChange: function(newData){
        if (newData) {
            this.ensureDataSet();
            var $properties = newData.$properties || {};
            
            if (newData.$title) {
                this.setTitle(newData.$title);
            }
            if (newData.$description) {
                this.setDescription(newData.$description);
            }
            var newFieldMetaData, newFieldValue;
            
            // used to save properties which have been processed in the upcoming for loop
            var boundMeta = {};
            var $binds = Object.keys(this.boundFields);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                var $bind = $binds[ii];
                newFieldValue = newData[$bind];
                newFieldMetaData = $properties[$bind];
                if (newFieldValue !== undefined || newFieldMetaData !== undefined) {
                    if (newFieldMetaData) {
                        boundMeta[$bind] = true;
                    }
                    var fields = this.boundFields[$bind];
                    for (var kk = 0, mm = fields.length; kk < mm; kk++) {
                        fields[kk].setDataBind(newFieldValue, newData, newFieldMetaData, $bind);
                    }
                }
            }
            
            // in order to handle cases in which some properties not part of the representation contains $diagnoses
            var $binds = Object.keys($properties);
            if ($binds.length > 0) {
                for (var mm = 0, pp = $binds.length; mm < pp; mm++) {
                    var $bind = $binds[mm];
                    if (!boundMeta[$bind]) {
                        var $diagnoses = $properties[$bind].$diagnoses;
                        if ($diagnoses && $diagnoses.length > 0) {
                            this.showUnbindFieldDiagnose($bind, $diagnoses);
                        }
                    }
                }
            }
            
            $binds = Object.keys(this.menuItems);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                var $bind = $binds[ii];
                var items = this.menuItems[$bind];
                for (var kk = 0, mm = items.length; kk < mm; kk++) {
                    items[kk].setMenu(null, this.dataset);
                }
            }
            
            this.applyActionLinkChange(newData);
            if (newData.$diagnoses && !newData.noDispDiag) {
                document.site.showDiagnoses({
                    $diagnoses: newData.$diagnoses
                }, this);
            }
            this.$syraLoaded = true;
        }
    },
    showUnbindFieldDiagnose: function($bind, $diagnoses){
        for (var aa = 0, bb = $diagnoses.length; aa < bb; aa++) {
            var $diagnose = $diagnoses[aa];
            $diagnose.$message = $bind.toUpperCase() + " : " + ($diagnose.$message || $diagnose.message);
            $diagnose.$severity = $diagnose.$severity || $diagnose.severity;
        }
        document.site.showDiagnoses({
            $diagnoses: $diagnoses
        }, this);
    },
    bind: function(item, $bind){
        (this.boundFields[$bind] = this.boundFields[$bind] || []).push(item);
        var dataset, fieldMetadata;
        if (this.$syraLoaded) {
            dataset = this.dataset;
            if (dataset.$properties) 
                fieldMetadata = dataset.$properties[$bind];
        }
        else {
            dataset = this.$prototype; //default value
        }
        item.setDataBind(dataset[$bind], dataset, fieldMetadata, $bind);
    },
    unbind: function(item){
        if (item.$item.$bind) {
            var map = item.isMenuItem ? this.menuItems : this.boundFields;
            var bounds = map[item.$item.$bind];
            if (bounds) {
                for (var ii = 0; ii < bounds.length; ii++) {
                    if (bounds[ii] == item) {
                        bounds.splice(ii, 1);
                        break;
                    }
                }
            }
        }
    },
    matchProperty: function(expression, property, record, properties, $subRecordKey){
        var instance = this;
        var value = undefined;
        while (instance && value === undefined) {
            value = undefined;
            if (properties) {
                value = properties[property];
            }
            if (value === undefined) {
                if ($subRecordKey) {
                    var subRecord = record[$subRecordKey];
                    if (subRecord) {
                        value = subRecord[property];
                    }
                }
                if (value === undefined) {
                    value = record[property];
                    if (value === undefined || value == expression) {
                        value = instance.dataset[property];
                        if (value === undefined || value == expression) {
                            value = instance.$urlParams[property];
                            if (value === undefined || value == expression) {
                                value = instance.$prototype[property];
                                if (value === undefined || value == expression) {
                                    instance = instance.isChildFieldRecord ? instance.articleParent.articleParent : instance = instance.articleParent;
                                    if (instance) {
                                        record = instance.dataset;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return {
            article: instance,
            value: value
        };
    },
    notifyParametersActionChange: function(menu, record, target, request){
        parametersHelper.notifyActionChange(this, menu, record, target, request);
    },
    formatMenuUrl: function($menu, record, callback){
        if (callback) {
            if ($menu.$parameters) {
                parametersHelper.formatCallBackMenuUrl(this, $menu, record, callback);
            }
            else {
                callback(this.parseExpression($menu.$sourceUrl || $menu.$url, record, undefined, $menu.$subRecordKey));
            }
            return;
        }
        else {
            var properties;
            if ($menu.$parameters) {
                properties = parametersHelper.parseParameters(this, $menu.$parameters, record);
            }
            return this.parseExpression($menu.$sourceUrl || $menu.$url, record, properties, $menu.$subRecordKey);
        }
    },
    getLocalization: function(){
        return this.$prototype.$localization || this.page.$prototype.$localization;
    },
    getLocalizeText: function(text){
        if (text.length > 0 && text[1] == "@") {
            text = this.parseExpression(text);
        }
        return text;
    },
    extractExpressionCode: function($expression){
        $expression = $expression + "";
        if ($expression.indexOf("{") >= 0) {
            return $expression.slice(1, $expression.length - 1);
        }
        return $expression;
    },
    parseExpression: function(expression, record, properties, $subRecordKey, ignoreCurrent){
        var result = expression;
        record = record || this.dataset;
        if (result && result.indexOf("{") >= 0) {
            if (result[1] == "@") {
                var text = result.slice(1, result.length - 1);
                var $localization = this.getLocalization();
                if ($localization) {
                    return $localization[text] || text;
                }
                return text;
            }
            else {
                var matches = result.match(_templatePattern);
                var match, property, value;
                for (var ii = 0, jj = matches.length; ii < jj; ii++) {
                    match = matches[ii];
                    property = match.substr(1, match.length - 2);
                    var matchResult;
                    if (ignoreCurrent && ignoreCurrent[match]) {
                        if (this.articleParent) {
                            var articleParent = this.isChildFieldRecord ? this.articleParent.articleParent : this.articleParent;
                            matchResult = articleParent.matchProperty(match, property, articleParent.dataset, properties, $subRecordKey);
                        }
                    }
                    else {
                        matchResult = this.matchProperty(match, property, record, properties, $subRecordKey);
                    }
                    if (matchResult && matchResult.value != null) {
                        if (matchResult.value.indexOf && matchResult.value.indexOf("{") >= 0) {
                            if (matchResult.value.indexOf(match) >= 0) {
                                (ignoreCurrent = ignoreCurrent || {})[match] = match;
                                //value = this.articleParent.parseExpression(value, this.articleParent.dataset, properties, $subRecordKey);
                            }
                            var startRecord = matchResult.article == this ? record : matchResult.article.dataset;
                            matchResult.value = matchResult.article.parseExpression(matchResult.value, record, properties, $subRecordKey, ignoreCurrent);
                        }
                        else {
                            if (typeof(matchResult.value) == "object") {
                                matchResult.value = matchResult.value.$uuid || matchResult.value.$key || matchResult.value[property] || null;
                                if (matchResult.value == null) {
                                    console.log("can not match " + property + " in " + expression);
                                    matchResult.value = "";
                                }
                            }
                        }
                        if (matchResult.value != null) {
                            result = result.replace(match, matchResult.value);
                        }
                        else {
                            result = result.replace(match, "");
                        }
                    }
                    else {
                        result = result.replace(match, "");
                    }
                }
            }
        }
        return result;
    },
    removeItem: function(item, removeDom, unbind){
        if (item) {
            if (removeDom) {
                if (item.remove) {
                    item.remove();
                }
                else {
                    if (item.$$item) {
                        document.site.removeDomChild(item.$$item[0]);
                    }
                    if (item.rowSeparator) {
                        document.site.removeDomChild(item.rowSeparator);
                        delete item.rowSeparator;
                    }
                }
            }
            if (unbind) {
                this.unbind(item);
            }
            if (item.id) {
                delete this.idMap[item.id];
                delete this.layouts[item.id];
            }
            if (item.dispose) {
                document.controller.disposeObject(item);
            }
        }
    },
    resizeResizableChildren: function(){
        if (this.resizableChildren) {
            var $binds = Object.keys(this.resizableChildren);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                this.resizableChildren[$binds[ii]].onWindowResize();
                
            }
        }
    },
    diposeContent: function(){
        this.menuItems = this.menusBags = null;
        if (this.idMap) {
            var ids = Object.keys(this.idMap);
            for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                this.idMap[ids[ii]].dispose();
            }
        }
        if (this.layouts) {
            var ids = Object.keys(this.layouts);
            for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                this.layouts[ids[ii]].dispose();
            }
        }
        this.resizableChildren = this.layouts = this.idMap = this.boundFields = this.layoutContent = null;
    },
    reloadField: function($item, boxParent){
        var field;
        if ($item.$bind) {
            if (this.reloadingFields[$item.$bind]) {
                field = this.reloadingFields[$item.$bind];
                field.isReloading = true;
                delete this.reloadingFields[$item.$bind];
            }
        }
        return field;
    },
    reloadLayout: function($item, layoutSlot){
        var prevLayout = this.layoutContent && this.layoutContent.domItem;
        var fields = this.layoutContent.getFields();
        if (fields && fields.length) {
            this.reloadingFields = {};
            for (var ii = 0, jj = fields.length; ii < jj; ii++) {
                var field = fields[ii];
                if (field && field.$item && field.$item.$bind) {
                    this.reloadingFields[field.$item.$bind] = field;
                }
            }
        }
        this.layoutContent.extractItems(fields);
        this.layoutContent.clearContent();
        this.$item = $item;
        this.ensureLayoutMode();
        this.renderLayoutContent(layoutSlot);
        this.reloadingFields = null;
        
        this.applyActionLinkChange(this.$prototype);
        this.applyActionLinkChange(this.dataset);
        if (prevLayout) {
            document.site.removeDomChild(prevLayout);
        }
    },
    onChildFieldShowDiagnoses: function(field, $diagnoses){
    
    },
    dispose: function(){
        this.diposeContent();
        document.controller.unregisterArticle(this);
        this.parentVariantField = this.$prototype = this.$menus = this.dataset = this.layouts = this.$urlParams = this.designer = null;
        Box.prototype.dispose.call(this);
    }
});
