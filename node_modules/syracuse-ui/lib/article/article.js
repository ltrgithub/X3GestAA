"use strict";
var _helpers = require('syracuse-core/lib/helpers');

function _findPrototypeFromRepository(page, $prototype) {
	if ($prototype) {
		if (!$prototype.$properties) {
			if ($prototype.$item) {
				$prototype.$item = _findPrototypeFromRepository(page, $prototype.$item);
			} else {
				if ($prototype.$type == "application/x-pointer" && $prototype.$prototype) {
					var index = $prototype.$prototype.indexOf("#");
					if (index >= 0) {
						$prototype = page.$prototypeRepository[$prototype.$prototype.slice(index + 1)];
					}
				}
			}
		}
	}
	return $prototype;
}

function _addPrototypeToRepository(page, $prototype) {
	if ($prototype) {
		if ($prototype.$id) {
			page.$prototypeRepository = page.$prototypeRepository || {};
			page.$prototypeRepository[$prototype.$id] = $prototype;
		}
		if ($prototype.$item && $prototype.$item.$id) {
			_addPrototypeToRepository(page, $prototype.$item);
		}
		return _findPrototypeFromRepository(page, $prototype);
	}
}

function Article() {}

exports.Article = _helpers.defineClass(Article, null, {
	notifyClientSave: function(savedDelta) {
		if (savedDelta) {
			var delta = {};
			var $binds = Object.keys(this.$prototype.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				if (savedDelta[$bind] !== undefined) {
					delta[$bind] = savedDelta[$bind];
				}
			}
			syra_delta.applyObjectDelta(this.page, this.dataset, delta);
			this.applyChange(delta);
		}
	},
	loadBox: function(initData) {
		this.isArticle = true;
		if (this.articleParent) {
			this.$facet = this.$facet || this.articleParent.$facet;
		}
		if (!this.$prototype) {
			this.$prototype = this.articleParent.$prototype.$properties[this.$item.$bind];
			if (this.$prototype && this.$prototype.$variants && this.$item.$variantItemKey) {
				this.$prototype = this.$prototype.$variants[this.$item.$variantItemKey];
			}
			this.$prototype = _addPrototypeToRepository(this.page, this.$prototype);
		}

		if (this.$isEditMode === undefined) {
			if (this.$item) {
				this.$isEditMode = this.$item.$isEditMode;
			}
			if (this.$isEditMode === undefined && this.articleParent) {
				this.$isEditMode = this.articleParent.$isEditMode;
			}
		}
		this.dataset = this.dataset || {};
		this.boundFields = {};
		this.idMap = {};
		syra_menus.menus.initialize(this);
		this.drawBox();
		syra_menus.menus.applyChange(this, this.$prototype);
		initData && this.applyChange(initData);
	},
	getArticle: function() {
		return this;
	},
	ensureDataSet: function() {
		if (this.$item.$bind && this.articleParent) {
			this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || {};
		}
		return this.dataset;
	}
});



exports.applyChange = function(article, newData) {
	if (newData) {
		article.ensureDataSet();
		var $properties = newData.$properties || {};

		if (newData.$title) {
			article.setTitle && article.setTitle(newData.$title);
		}

		var newFieldMetaData, newFieldValue;
		var $binds = Object.keys(article.boundFields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			newFieldValue = newData[$bind];
			newFieldMetaData = $properties[$bind];
			if (newFieldValue !== undefined || newFieldMetaData !== undefined) {
				var fields = article.boundFields[$bind];
				for (var kk = 0, mm = fields.length; kk < mm; kk++) {
					fields[kk].setDataBind(newFieldValue, newData, newFieldMetaData, $bind);
					fields[kk].isWidgetUpated = true;
					article.isWidgetUpated = true;
				}
			}
		}

		var $binds = Object.keys($properties);
		if ($binds.length > 0) {
			for (var mm = 0, pp = $binds.length; mm < pp; mm++) {
				var $bind = $binds[mm];
				if (!article.boundFields[$bind]) {
					if ($properties[$bind].$diagnoses) {
						syra_diagnose.showDiagnoses({
							$bind: $bind,
							$diagnoses: $properties[$bind].$diagnoses
						}, article);
					}
				}
			}
		}
		$binds = Object.keys(article.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var items = article.menuItems[$bind];
			for (var kk = 0, mm = items.length; kk < mm; kk++) {
				items[kk].outOfDate = true;
			}
		}
		if (newData.$diagnoses && !newData.noDispDiag) {
			syra_diagnose.showDiagnoses({
				$diagnoses: newData.$diagnoses
			}, article);
		}

		syra_menus.menus.applyChange(article, newData);

		article.masterChildRelations && syra_fields.embedded.applyChangeToDetailRelations(article);
		article.isArticleLoaded = true;
	}
};


exports.bindItem = function(item, $bind) {
	if (item && $bind) {
		var article = item.articleParent;
		(article.boundFields[$bind] = article.boundFields[$bind] || []).push(item);
		item.setDataBind(article.$prototype[$bind], article.$prototype, undefined, $bind);
		if (article.isArticleLoaded) {
			var dataset = article.dataset;
			item.setDataBind(dataset[$bind], dataset, dataset.$properties && dataset.$properties[$bind], $bind);
		}
	}
};

exports.unbindItem = function(item) {
	if (item && item.$item && item.$item.$bind) {
		var article = item.articleParent;
		var map = item.isMenuItem ? article.menuItems : article.boundFields;
		var bounds = map && map[item.$item.$bind];
		if (bounds) {
			for (var ii = 0; ii < bounds.length; ii++) {
				if (bounds[ii] == item) {
					bounds.splice(ii, 1);
					break;
				}
			}
		}
	}
};
exports.removeItem = function(item, removeDom, unbind) {
	if (item) {
		if (removeDom) {
			if (item.remove) {
				item.remove();
			} else {
				if (item.domItem && item.domItem.parentNode) {
					item.domItem.parentNode.removeChild(item.domItem);
				}
			}
		}
		var article = item.articleParent;
		if (article) {
			unbind && exports.unbindItem(item);
			if (item.id) {
				delete article.idMap[item.id];
			}
		}
		item.dispose && !item.disposed && item.dispose();
	}
};

exports.dispose = function(article) {
	if (article) {
		syra_menus.dispose(article);
		if (article.idMap) {
			var ids = Object.keys(article.idMap);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				var item = article.idMap[ids[ii]];
				item && item.dispose();
			}
		}
		article.layoutContent && article.layoutContent.dispose();
		syra_site.disposeObject(article);
	}
};