"use strict";
var _helpers = require('syracuse-core/lib/helpers');

function _findPrototypeFromRepository(page, $prototype) {
	if ($prototype) {
		if (!$prototype.$properties) {
			if ($prototype.$item) {
				$prototype.$item = _findPrototypeFromRepository(page, $prototype.$item);
			} else {
				if ($prototype.$type == "application/x-pointer" && $prototype.$prototype) {
					var index = $prototype.$prototype.indexOf("#");
					if (index >= 0) {
						$prototype = page.$prototypeRepository[$prototype.$prototype.slice(index + 1)];
					}
				}
			}
		}
	}
	return $prototype;
}

function _addPrototypeToRepository(page, $prototype) {
	if ($prototype) {
		if ($prototype.$id) {
			page.$prototypeRepository = page.$prototypeRepository || {};
			page.$prototypeRepository[$prototype.$id] = $prototype;
		}
		if ($prototype.$item && $prototype.$item.$id) {
			_addPrototypeToRepository(page, $prototype.$item);
		}
		return _findPrototypeFromRepository(page, $prototype);
	}
}

function Article() {}

exports.Article = _helpers.defineClass(Article, null, {
	setArticleId: function(dom) {
		this.isArticle = true;
		dom.syraarticle = this.id;
	},
	notifyClientSave: function(savedDelta) {
		if (savedDelta) {
			var delta = {};
			var $binds = Object.keys(this.$prototype.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				if (savedDelta[$bind] !== undefined) {
					delta[$bind] = savedDelta[$bind];
				}
			}
			syra_site.deltaManager.applyObjectDelta(this.page, this.dataset, delta);
			this.applyChange(delta);
		}
	},

	getPrototype: function() {
		if (!this.$prototype) {
			this.$prototype = this.articleParent.$prototype.$properties[this.$item.$bind];
			if (this.$prototype && this.$prototype.$variants && this.$item.$variantItemKey) {
				this.$prototype = this.$prototype.$variants[this.$item.$variantItemKey];
			}
			this.$prototype = _addPrototypeToRepository(this.page, this.$prototype);
		}
		return this.$prototype;
	},
	loadBox: function(initData) {
		if (this.articleParent) {
			this.$facet = this.$facet || this.articleParent.$facet;
		}
		this.$prototype = this.getPrototype();

		if (this.$isEditMode === undefined) {
			if (this.$item) {
				this.$isEditMode = this.$item.$isEditMode;
			}
			if (this.$isEditMode === undefined && this.articleParent) {
				this.$isEditMode = this.articleParent.$isEditMode;
			}
		}
		this.dataset = this.dataset || {};
		this.boundFields = {};
		this.layouts = {};
		this.idMap = {};
		syra_menus.menus.initialize(this);
		this.drawBox();
		this.domItem && this.setArticleId(this.domItem);
		syra_menus.menus.applyChange(this, this.$prototype);
		initData && this.applyChange(initData);
	},
	getArticle: function() {
		return this;
	},
	ensureDataSet: function() {
		if (this.$item.$bind && this.articleParent) {
			this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || {};
		}
		return this.dataset;
	},
	applyChange: function(newData) {
		if (newData) {
			this.ensureDataSet();
			var $properties = newData.$properties || {};

			if (newData.$title) {
				this.setTitle && this.setTitle(newData.$title);
			}
			if (newData.$description) {
				this.setDescription && this.setDescription(newData.$description);
			}
			var newFieldMetaData, newFieldValue;
			var $binds = Object.keys(this.boundFields);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				newFieldValue = newData[$bind];
				newFieldMetaData = $properties[$bind];
				if (newFieldValue !== undefined || newFieldMetaData !== undefined) {
					var fields = this.boundFields[$bind];
					for (var kk = 0, mm = fields.length; kk < mm; kk++) {
						fields[kk].setDataBind(newFieldValue, newData, newFieldMetaData, $bind);
						fields[kk].isWidgetUpated = true;
						this.isWidgetUpated = true;
					}
				}
			}

			var $binds = Object.keys($properties);
			if ($binds.length > 0) {
				for (var mm = 0, pp = $binds.length; mm < pp; mm++) {
					var $bind = $binds[mm];
					if (!this.boundFields[$bind]) {
						if ($properties[$bind].$diagnoses) {
							syra_diagnose.showDiagnoses({
								$bind: $bind,
								$diagnoses: $properties[$bind].$diagnoses
							}, this);
						}
					}
				}
			}
			$binds = Object.keys(this.menuItems);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var items = this.menuItems[$bind];
				for (var kk = 0, mm = items.length; kk < mm; kk++) {
					items[kk].outOfDate = true;
				}
			}
			//syra_menus.menus.applyChange(this, newData);

			if (newData.$diagnoses && !newData.noDispDiag) {
				syra_diagnose.showDiagnoses({
					$diagnoses: newData.$diagnoses
				}, this);
			}

			syra_menus.menus.applyChange(this, newData);

			this.masterChildRelations && syra_fields.embedded.applyChangeToDetailRelations(this);
			this.isArticleLoaded = true;
		}
	},
	bind: function(item, $bind) {
		if ($bind) {
			(this.boundFields[$bind] = this.boundFields[$bind] || []).push(item);
			item.setDataBind(this.$prototype[$bind], this.$prototype, undefined, $bind);
			if (this.isArticleLoaded) {
				item.setDataBind(this.dataset[$bind], this.dataset, this.dataset.$properties && this.dataset.$properties[$bind], $bind);
			}
		}
	},
	unbind: function(item) {
		if (item.$item && item.$item.$bind) {
			var map = item.isMenuItem ? this.menuItems : this.boundFields;
			var bounds = map && map[item.$item.$bind];
			if (bounds) {
				for (var ii = 0; ii < bounds.length; ii++) {
					if (bounds[ii] == item) {
						bounds.splice(ii, 1);
						break;
					}
				}
			}
		}
	},
	getLocalizeText: function(text) {
		if (text && text.length > 0 && text[1] == "@") {
			text = syra_site.expressionMaker.parse(this, text);
		}
		return text;
	},
	removeItem: function(item, removeDom, unbind) {
		if (item) {
			if (removeDom) {
				if (item.remove) {
					item.remove();
				} else {
					if (item.domItem && item.domItem.parentNode) {
						item.domItem.parentNode.removeChild(item.domItem);
					}
				}
			}
			if (unbind) {
				this.unbind(item);
			}
			if (item.id) {
				delete this.idMap[item.id];
				delete this.layouts[item.id];
			}
			item.dispose && !item.disposed && item.dispose();
		}
	},
	diposeContent: function() {
		this.menuItems = this.menusBag = null;
		if (this.idMap) {
			var ids = Object.keys(this.idMap);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				var item = this.idMap[ids[ii]];
				item && item.dispose(); //test manadatory because item could be remode by previous dispose
			}
		}
		if (this.layouts) {
			var ids = Object.keys(this.layouts);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				var item = this.layouts[ids[ii]];
				item && item.dispose();
			}
		}
		this.layouts = this.idMap = this.boundFields = this.layoutContent = null;
	},
	dispose: function() {
		syra_menus.dispose(this);
		this.diposeContent();
		syra_store.remove(this);
		this.childrenSection = null;
		this.layoutContent && this.layoutContent.dispose();
		syra_site.disposeObject(this);
	}
});