"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require("./box").Box;
var FieldsGarbage = require("./fieldsGarbage").FieldsGarbage;

function Article() {}

exports.Article = helpers.defineClass(Article, Box, {
	fetch: function(options, callback) {
		this.page.fetch(options, callback);
	},
	setArticleId: function(dom) {
		dom.setAttribute("data-s-article", dom.syraarticle = this.id);
	},
	notifyClientSave: function(savedDelta) {
		if (savedDelta) {
			var delta = {};
			var $binds = Object.keys(this.$prototype.$properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				if (savedDelta[$bind] !== undefined) {
					delta[$bind] = savedDelta[$bind];
				}
			}
			document.site.deltaManager.applyObjectDelta(this.page, this.dataset, delta);
			this.applyChange(delta);
		}
	},
	getMetaData: function() {
		var $meta = this.articleParent.dataset.$properties;
		if ($meta) {
			$meta = $meta[this.$item.$bind];
		}
		if ($meta && this.$item.$variantItemKey) {
			return $meta[this.$item.$variantItemKey];
		}
		return $meta;
	},
	getPrototype: function() {
		if (!this.$prototype) {
			this.$prototype = this.articleParent.$prototype.$properties[this.$item.$bind];
			if (this.$prototype && this.$prototype.$variants && this.$item.$variantItemKey) {
				this.$prototype = this.$prototype.$variants[this.$item.$variantItemKey];
			}
			this.$prototype = this.page.addPrototypeToRepository(this.$prototype);
		}
		return this.$prototype;
	},
	loadBox: function(initData) {
		document.site.itemHelper.registerArticle(this);
		this.autosizeFields = [];
		if (this.articleParent) {
			this.$facet = this.$facet || this.articleParent.$facet;
			if (!this.$urlParams) {
				this.$urlParams = this.articleParent.$urlParams || {};
			}
		} else {
			this.$urlParams = this.$urlParams || {};
		}
		this.$prototype = this.getPrototype();

		if (this.$isEditMode === undefined) {
			if (this.$item) {
				this.$isEditMode = this.$item.$isEditMode;
			}
			if (this.$isEditMode === undefined && this.articleParent) {
				this.$isEditMode = this.articleParent.$isEditMode;
			}
		}
		this.dataset = this.dataset || {};
		this.boundFields = {};
		this.layouts = {};
		this.idMap = {};
		this.menuItems = {};
		this.$menus = {};
		this.menusBags = [];
		this.drawBox();
		if (this.domItem) {
			this.setArticleId(this.domItem);
		}
		this.applyActionLinkChange(this.$prototype);
		if (initData) {
			this.applyChange(initData);
		}
	},
	clickMenu: function($bind) {
		var menus = this.menuItems[$bind];
		if (menus && menus.length) {
			setTimeout(function() {
				menus[0].click();
			}, 20);
		}
	},
	validateFields: function() {
		var isValidated = true;
		var $binds = Object.keys(this.boundFields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var fields = this.boundFields[$binds[ii]];
			for (var kk = 0, mm = fields.length; kk < mm; kk++) {
				var field = fields[kk];
				if (!field.$isHidden) {
					if (field.validate && field.$isEditMode) {
						var newValue = field.getDataValue();
						if (!field.validate(newValue)) {
							isValidated = false;
						} else {
							if (field.notifyFieldChange) {
								field.notifyFieldChange(newValue);
							}
						}
					}
				}
			}
		}
		return isValidated;
	},
	getArticle: function() {
		return this;
	},
	_clearMenuItems: function() {
		var $binds = Object.keys(this.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var mn, items = this.menuItems[$bind];
			for (var kk = 0, mm = items.length; kk < mm; kk++) {
				mn = items[kk];
				if (mn.detailField) {
					mn.detailField.setDataValue(mn.detailField.currentValue);
					mn.detailField = null;
				}
				(mn.layoutParent ? mn.layoutParent : this).removeItem(mn, true);
			}
		}
		this.menuItems = {};
		this.$menus = {};
	},
	applyActionLinkChange: function(resources) {
		if (resources) {
			if (resources.$links === null) {
				this._clearMenuItems();
			} else {
				if (resources.$links) {
					this._applyMenusChange(resources.$links);
				}
				if (resources.$actions) {
					this._applyMenusChange(resources.$actions, true);
				}
			}
		}
	},
	removeMenuItem: function($bind, removeDom) {
		var menuItems = this.menuItems[$bind];
		if (menuItems) {
			for (var ii = 0, jj = menuItems.length; ii < jj; ii++) {
				this.removeItem(menuItems[ii], removeDom);
			}
			delete this.menuItems[$bind];
		}
		delete this.$menus[$bind];
	},
	removeMenuBag: function(menuBag) {
		if (this.menusBags) {
			var found = this.menusBags.indexOf(this.menusBox);
			if (found >= 0) {
				this.menusBags.splice(found, 1);
			}
		}
	},
	_addMenuToMenusBag: function($bind, $menu) {
		for (var ii = 0, jj = this.menusBags.length; ii < jj; ii++) {
			this.menusBags[ii].addMenuItem($menu, this.dataset);
		}
	},
	onBoxToggled: function(box) {},
	_applyMenusChange: function($deltaMenu, $isAction) {
		var binds = Object.keys($deltaMenu);
		for (var bindIndex = 0, bindCount = binds.length; bindIndex < bindCount; bindIndex++) {
			var $bind = binds[bindIndex];
			var $menu = $deltaMenu[$bind];
			if ($menu === null) {
				this.removeMenuItem($bind, true);
			} else {
				if (this.$menus[$bind]) {
					document.site.deltaManager.applyObjectDelta(this.page, this.$menus[$bind], $menu);
				} else {
					$menu.$isAction = $isAction;
					$menu.$bind = $bind;
					this.$menus[$bind] = $menu;
				}
				var bounds = this.menuItems[$bind];
				if (bounds) {
					for (var ii = 0, jj = bounds.length; ii < jj; ii++) {
						bounds[ii].setMenu($menu, this.dataset);
					}
				} else {
					this._addMenuToMenusBag($bind, $menu);
				}
			}
			this.isWidgetUpated = true;
		}
	},
	ensureDataSet: function() {
		if (this.$item.$bind && this.articleParent) {
			this.dataset = this.articleParent.dataset[this.$item.$bind] = this.articleParent.dataset[this.$item.$bind] || {};
		}
		return this.dataset;
	},
	applyChange: function(newData) {
		if (newData) {
			this.ensureDataSet();
			var $properties = newData.$properties || {};

			if (newData.$title) {
				this.setTitle(newData.$title);
			}
			if (newData.$description) {
				this.setDescription(newData.$description);
			}
			var newFieldMetaData, newFieldValue;
			var $binds = Object.keys(this.boundFields);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				newFieldValue = newData[$bind];
				newFieldMetaData = $properties[$bind];
				if (newFieldValue !== undefined || newFieldMetaData !== undefined) {
					var fields = this.boundFields[$bind];
					for (var kk = 0, mm = fields.length; kk < mm; kk++) {
						fields[kk].setDataBind(newFieldValue, newData, newFieldMetaData, $bind);
						fields[kk].isWidgetUpated = true;
						this.isWidgetUpated = true;
					}
				}
			}

			var $binds = Object.keys($properties);
			if ($binds.length > 0) {
				for (var mm = 0, pp = $binds.length; mm < pp; mm++) {
					var $bind = $binds[mm];
					if (!this.boundFields[$bind]) {
						if ($properties[$bind].$diagnoses) {
							document.site.showDiagnoses({
								$bind: $bind,
								$diagnoses: $properties[$bind].$diagnoses
							}, this);
						}
					}
				}
			}

			$binds = Object.keys(this.menuItems);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var items = this.menuItems[$bind];
				for (var kk = 0, mm = items.length; kk < mm; kk++) {
					items[kk].setMenu(null, this.dataset);
				}
			}

			this.applyActionLinkChange(newData);
			if (newData.$diagnoses && !newData.noDispDiag) {
				document.site.showDiagnoses({
					$diagnoses: newData.$diagnoses
				}, this);
			}
			this.$syraLoaded = true;
		}
	},
	bind: function(item, $bind) {
		if ($bind) {
			(this.boundFields[$bind] = this.boundFields[$bind] || []).push(item);
			item.setDataBind(this.$prototype[$bind], this.$prototype, undefined, $bind);
			if (this.$syraLoaded) {
				item.setDataBind(this.dataset[$bind], this.dataset, this.dataset.$properties && this.dataset.$properties[$bind], $bind);
			}
		}
	},
	unbind: function(item) {
		if (item.$item.$bind) {
			var map = item.isMenuItem ? this.menuItems : this.boundFields;
			var bounds = map[item.$item.$bind];
			if (bounds) {
				for (var ii = 0; ii < bounds.length; ii++) {
					if (bounds[ii] == item) {
						bounds.splice(ii, 1);
						break;
					}
				}
			}
		}
	},

	getLocalizeText: function(text) {
		if (text.length > 0 && text[1] == "@") {
			text = document.site.expressionMaker.parse(this, text);
		}
		return text;
	},
	removeItem: function(item, removeDom, unbind) {
		if (item) {
			if (removeDom) {
				if (item.remove) {
					item.remove();
				} else {
					if (item.domItem) {
						document.site.dom.removeChild(item.domItem);
					}
					if (item.rowSeparator) {
						document.site.dom.removeChild(item.rowSeparator);
						delete item.rowSeparator;
					}
				}
			}
			if (unbind) {
				this.unbind(item);
			}
			if (item.id) {
				delete this.idMap[item.id];
				delete this.layouts[item.id];
			}
			if (item.dispose) {
				item.dispose();
				//document.controller.disposeObject(item);
			}
		}
	},
	diposeContent: function() {
		this.childLists = this.menuItems = this.menusBags = null;
		if (this.idMap) {
			var ids = Object.keys(this.idMap);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				this.idMap[ids[ii]].dispose();
			}
		}
		if (this.layouts) {
			var ids = Object.keys(this.layouts);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				this.layouts[ids[ii]].dispose();
			}
		}
		this.autosizeFields = this.childLists = this.layouts = this.idMap = this.boundFields = this.layoutContent = null;
	},
	registerAutoSizeFields: function(field, register) {
		var index = this.autosizeFields.indexOf(field);
		if (register && index < 0) {
			this.autosizeFields.push(field);
		}
		if (!register && index >= 0) {
			this.autosizeFields.splice(index, 1);
		}
	},
	resizeAutoSizeFields: function() {
		if (this.autosizeFields && this.autosizeFields.length) {
			for (var ii = 0, jj = this.autosizeFields.length; ii < jj; ii++) {
				this.autosizeFields[ii].resizeField();
			}
		}
	},
	resizeChildLists: function(resize) {
		if (this.childLists) {
			for (var ii = 0, jj = this.childLists.length; ii < jj; ii++) {
				this.childLists[ii].resizeList(resize);
			}
		}
	},
	ensureArticleVisibility: function() {
		if (this.childrenSection) {
			for (var mm = 0, kk = this.childrenSection.length; mm < kk; mm++) {
				this.childrenSection[mm].ensureVisibility();
			}
		}
		if (this.layoutContent) {
			document.site.layoutValidator.validate(this.layoutContent, true);
		}
	},
	dispose: function() {
		this.diposeContent();
		document.site.itemHelper.unregisterArticle(this);
		this.parentVariantField = this.$prototype = this.$menus = this.dataset = this.layouts = this.$urlParams = this.designer = null;
		Box.prototype.dispose.call(this);
	}
});