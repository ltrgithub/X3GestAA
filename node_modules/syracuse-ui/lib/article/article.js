"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require("./box").Box;
var locale = require('syracuse-core/lib/locale');
var _templatePattern = /(\{.*?\})/g;

function Article(){

}

exports.Article = helpers.defineClass(Article, Box, {
    get$Properties: function(){
        return this.$prototype.$properties || this.$prototype.$;
    },
    fetch: function(options, callback){
        this.getPage().fetch(options, callback);
    },
    loadBox: function(initData){
        document.controller.registerArticle(this);
        var articleParent = this.getArticleParent();
        if (articleParent) {
            this.$facet = this.$facet || articleParent.$facet;
            this.$isEditMode = this.$isEditMode === undefined ? articleParent.$isEditMode : this.$isEditMode;
            this.$prototype = this.$prototype || articleParent.get$Properties()[this.$item.$bind];
        }
        this.dataset = {};
        this.boundFields = {};
        this.idMap = {};
        this.menuItems = {};
        this.$menus = {};
        this.menuBoxes = [];
        this.drawBox();
        this.applyActionLinkChange(this.$prototype);
        if (initData) {
            this.applyChange(initData);
        }
        this.bindFieldEvents();
    },
    reloadArticle: function(){
        var dataset = this.dataset;
        document.controller.disposeObject(this._dispose());
        this.loadBox(dataset);
    },
    bindFieldEvents: function($$secondary){
        var self = this;
        var $$fieldsParent = $$secondary || self.$$item;
        if ($$fieldsParent) {
            if ($$secondary) {
                (self.$$fieldsParents = self.$$fieldsParents || []).push($$secondary);
            }
            $$fieldsParent.delegate("textarea[data-s-field],input[data-s-field],select[data-s-field]", "click change keydown keypress keyup focusin focusout", function(event){
                var field = self.idMap[$(event.target).attr("data-s-field")];
                if (field) {
                    field.onFieldInputEvent(event);
                    event.stopPropagation();
                }
            }).delegate("[data-s-picker]", "click", function(event){
                var $$target = $(event.target);
                var field = self.idMap[$$target.closest("[data-s-field]").attr("data-s-field")];
                if (field) {
                    field.onClickPicker($$target);
                }
                return false;
            });
            if (document.site.$isFieldEditOnflyEnabled || self.$item.$isFieldEditOnfly) {
                $$fieldsParent.delegate("[data-s-field]", "click", function(event){
                    var $$target = $(event.currentTarget);
                    var field = self.idMap[$$target.attr("data-s-field")];
                    if (field && !field.$isEditMode) {
                        setTimeout(function(){
                            document.fieldController.toggleEditMode(field);
                        }, 10);
                    }
                    event.stopPropagation();
                });
            }
        }
    },
    getArticleParent: function(){
        return this.boxParent ? this.boxParent.getArticle() : null;
    },
    getArticle: function(){
        return this;
    },
    getPage: function(){
        if (!this.page) {
            this.page = this.boxParent ? this.boxParent.getArticle().getPage() : null;
        }
        return this.page;
    },
    bindMenuBox: function(box){
        var self = this;
        self.menuBoxes.push(box);
        if (self.$menus) {
            Object.keys(self.$menus).forEach(function($bind){
                var item = self.menuItems[$bind];
                if (!item || (item.length == 0)) {
                    box.addMenuItem(self.$menus[$bind], self.dataset);
                }
            });
        }
    },
    bindMenuItem: function(item, record){
        var bounds = this.menuItems[item.$item.$bind];
        if (!bounds) {
            bounds = this.menuItems[item.$item.$bind] = [];
        }
        bounds.push(item);
        var $menu = this.$menus[item.$item.$bind];
        if ($menu) {
            item.setMenu($menu, record);
        }
    },
    unbindMenuItem: function(item){
        if (this.menuItems) {
            var bounds = this.menuItems[item.$item.$bind];
            if (bounds) {
                for (var ii = 0; ii < bounds.length; ii++) {
                    if (bounds[ii] == item) {
                        bounds.splice(ii, 1);
                        break;
                    }
                }
            }
        }
    },
    applyActionLinkChange: function(resources, record){
        var self = this;
        if (record) {
            Object.keys(self.menuItems).forEach(function($bind){
                self.menuItems[$bind].forEach(function(menu){
                    menu.setMenu(null, record);
                });
            });
        }
        if (resources) {
            if (resources.$links === null) {
                Object.keys(self.menuItems).forEach(function($bind){
                    self.menuItems[$bind].forEach(function(menu){
                        document.controller.disposeObject(menu);
                    });
                    
                });
                self.menuItems = {}
                self.$menus = {};
                self.menuBoxes.forEach(function(box){
                    box.clearMenuItems();
                });
            }
            else {
                if (resources.$links) {
                    self._applyMenuChange(resources.$links, record);
                }
                if (resources.$actions) {
                    self._applyMenuChange(resources.$actions, record, true);
                }
            }
        }
    },
    _applyMenuChange: function($deltaMenu, record, $isAction){
        var self = this;
        Object.keys($deltaMenu).forEach(function($bind){
            var $menu = $deltaMenu[$bind];
            $menu.$isAction = $isAction;
            $menu.$bind = $bind;
            var $memMenu = self.$menus[$bind];
            if ($memMenu) {
                Object.keys($menu).forEach(function($property){
                    switch ($property) {
                        case "$links":
                        case "$actions":
                            var $delta = $menu[$property];
                            var $mem = $memMenu[$property] = $memMenu[$property] || {};
                            Object.keys($delta).forEach(function($bind){
                                var $source = $delta[$bind];
                                var $target = $mem[$bind] || {};
                                Object.keys($source).forEach(function($prop){
                                    $target[$prop] = $source[$prop];
                                });
                            });
                            break;
                        default:
                            $memMenu[$property] = $menu[$property];
                            break;
                    }
                });
            }
            else {
                self.$menus[$bind] = $menu;
            }
            var bounds = self.menuItems[$bind];
            if (bounds) {
                bounds.forEach(function(menu){
                    menu.setMenu($menu, record);
                });
            }
            else {
                self.menuBoxes.forEach(function(box){
                    box.addMenuItem($menu, record);
                });
            }
        });
    },
    _applyDelta: function(target, source){
        if (source) {
            var self = this;
            Object.keys(source).forEach(function(property){
                var targetValue = target[property];
                var sourceValue = source[property];
                if (targetValue == null || sourceValue === null) {
                    target[property] = sourceValue;
                }
                else {
                    target[property] = typeof(sourceValue) != "object" ? sourceValue : self._applyDelta(targetValue, sourceValue);
                }
            });
        }
        return target;
    },
    applyChange: function(newData){
        if (newData) {
            var self = this;
            var actionsLinks;
            if ((newData.$links !== undefined) || (newData.$actions !== undefined)) {
                actionsLinks = {
                    $links: newData.$links,
                    $actions: newData.$actions
                };
                delete newData.$links;
                delete newData.$actions; //avoid copy of action links
            }
            var $properties, $propertiesBackup;
            if (newData.$properties) {
                $propertiesBackup = newData.$properties;
                $properties = newData.$properties;
                delete newData.$properties;
            }
            else {
                $properties = {};
            }
            if (newData.$title) {
                self.renderTitle(newData.$title);
            }
            if (newData.$description) {
                self.renderDescription(newData.$description);
            }
            Object.keys(newData).forEach(function($bind){
                var bounds = self.boundFields[$bind];
                var newValue = newData[$bind];
                if (bounds) {
                    var $property = $properties[$bind];
                    bounds.forEach(function(item){
                        item.setDataBind(newValue, newData, $property);
                    });
                    if ($property) {
                        delete $properties[$bind];
                    }
                }
                if (typeof(newValue) == 'object') {
                    var recordValue = self.dataset[$bind];
                    newValue = ((recordValue == null || newValue == null) || Array.isArray(newValue)) ? newValue : self._applyDelta(recordValue, newValue);
                }
                self.dataset[$bind] = newValue;
            });
            //apply rest of metaData
            var data;
            Object.keys($properties).forEach(function($bind){
                var bounds = self.boundFields[$bind];
                if (bounds) {
                    var $property = $properties[$bind];
                    bounds.forEach(function(item){
                        item.setDataBind(data, newData, $property);
                    });
                }
            });
            
            self.applyActionLinkChange(actionsLinks, self.dataset);
            if (newData.$diagnoses) {
                document.site.showDiagnoses({
                    $diagnoses: newData.$diagnoses
                }, self);
            }
            //self.dataset.$syraLoaded = true;
            self.$syraLoaded = true;
            if ($propertiesBackup) {
                newData.$properties = $propertiesBackup;
            }
            if (actionsLinks) {
                newData.$links = actionsLinks.$links;
                newData.$actions = actionsLinks.$actions;
            }
        }
    },
    bind: function(item, $bind){
        (this.boundFields[$bind] = this.boundFields[$bind] || []).push(item);
        //var store = this.dataset.$syraLoaded ? this.dataset : this.$prototype; //set loaded value or default value
		var store = this.$syraLoaded ? this.dataset : this.$prototype; //set loaded value or default value
        item.setDataBind(store[$bind], store);
    },
    matchProperty: function(property, record, properties){
        var value;
        if (properties) {
            value = properties[property];
        }
        if (value === undefined) {
            if ((value = record[property]) === undefined) {
                if ((value = this.$prototype[property]) === undefined) {
                    var articleParent = this.getArticleParent();
                    if (articleParent) {
                        value = articleParent.matchProperty(property, articleParent.dataset, properties);
                    }
                }
            }
        }
        return value;
    },
    formatMenuUrl: function($menu, record, callback){
        if (callback) {
            if ($menu.$parameters) {
                var self = this;
                $menu.$parameters.$title = $menu.getTitle ? $menu.getTitle() : null;
                self.parseParameters($menu.$parameters, record, function(values, isCanceled){
                    if (isCanceled) {
                        callback(null, isCanceled);
                    }
                    else {
                        callback(self.parseExpression($menu.$url, record, values));
                    }
                });
            }
            else {
                callback(this.parseExpression($menu.$url, record));
            }
            return;
        }
        else {
            var properties;
            if ($menu.$parameters) {
                properties = this.parseParameters($menu.$parameters, record);
            }
            return this.parseExpression($menu.$url, record, properties);
        }
    },
    _openSelectParametersDialog: function(values, $parameters, record, callback){
        this.openDialog({
            article: this,
            $url: ($parameters.$actions.$select || $parameters.$actions.$lookup).$url,
            onValidate: function(page){
                if (page.selectedRecords) {
                    values.$select = page.selectedRecords;
                    callback(values);
                    return;
                }
                callback(null, true); //input propoerties was canceled
            },
            onClose: function(isCanceled){
                if (isCanceled) {
                    callback(null, true); //input propoerties was canceled 
                }
            },
            onSelectRecord: function(selectedRecords, page){
                page.selectedRecords = Object.keys(selectedRecords).map(function(rec){
                    return selectedRecords[rec].dataset;
                });
                return false;
            }
        });
    },
    _openParametersDialog: function(values, $parameters, record, callback){
        var localize = locale.resources(module)();
        var $itemPage;
        if (!$parameters.$url) {
            var $prototype = helpers.object.clone($parameters);
            if (values) {
                Object.keys(values).forEach(function(prop){
                    $prototype[prop] = values[prop];
                });
            }
            if (this.$prototype && this.$prototype.$localization) {
                $prototype.$localization = this.$prototype.$localization;
            }
            $prototype.$title = $parameters.$title || localize.article_parameters_title;
            $itemPage = {
                $category: "page",
                $urlParts: {
                    $facet: "$edit"
                },
                $representation: {
                    $prototype: $prototype
                }
            };
        }
        this.openDialog({
            $dialogMode: "modal",
            article: this,
            initData: values,
            onValidate: function(dialogPage){
                Object.keys(dialogPage.dataset).forEach(function($prop){
                    // if ($prop != "$syraLoaded") {
                    values[$prop] = dialogPage.dataset[$prop];
                    // }
                });
                callback(values);
            },
            onClose: function(isCanceled){
                if (isCanceled) {
                    callback(null, true); //input propoerties was canceled 
                }
            },
            $isLocalControl: true,
            $itemPage: $itemPage,
            $url: $parameters.$url,
            $method: $parameters.$method || "GET"
        });
    },
    parseParameters: function($parameters, record, callback){
        var self = this;
        var values = {};
        Object.keys($parameters).forEach(function(prop){
            switch (prop) {
                case "$properties":
                case "$":
                case "$links":
                case "$actions":
                    break;
                default:
                    var expression = $parameters[prop];
                    if (expression && typeof(expression) == "string") {
                        expression = self.parseExpression(expression, record);
                    }
                    values[prop] = expression;
                    break;
            }
        });
        if (callback) {
            if ($parameters.$actions) {
                self._openSelectParametersDialog(values, $parameters, record, callback);
                return;
            }
            if ($parameters.$properties) {
                self._openParametersDialog(values, $parameters, record, callback);
                return;
            }
            callback(values);
        }
        return values;
    },
    getLocalization: function(){
        return this.$prototype.$localization || this.getPage().$prototype.$localization;
    },
    getLocalizeText: function(text){
        if (text.length > 0 && text[1] == "@") {
            text = this.parseExpression(text);
        }
        return text;
    },
    parseExpression: function(expression, record, properties){
        var result = expression;
        var self = this;
        record = record || self.dataset;
        if (result && result.indexOf("{") >= 0) {
            if (result[1] == "@") {
                var text = result.slice(1, result.length - 1);
                var $localization = self.getLocalization();
                if ($localization) {
                    return $localization[text] || text;
                }
                return text;
            }
            else {
                var matches = result.match(_templatePattern);
                matches.forEach(function(match){
                    var property = match.substr(1, match.length - 2);
                    var value = self.matchProperty(property, record, properties);
                    if (value != null) {
                        if (value.indexOf && value.indexOf("{") >= 0) {
                            value = self.parseExpression(value, record, properties);
                        }
                        else {
                            if (typeof(value) == "object") {
                                value = value.$uuid || value.$key || null;
                                if (value == null) {
                                    console.log("can not match " + property + " in " + expression);
                                }
                            }
                        }
                        if (value != null) {
                            result = result.replace(match, value);
                        }
                    }
                });
            }
        }
        return result;
    },
    removeItem: function(item, removeDom, unbind){
        if (removeDom) {
            if (item.remove) {
                item.remove();
            }
            else {
                if (item.$$item) {
                    item.$$item.remove();
                }
            }
        }
        if (unbind) {
            if (item.$item.$bind) {
                var boundFields = this.boundFields[item.$item.$bind];
                if (boundFields) {
                    for (var ii = 0; ii < boundFields.length; ii++) {
                        if (boundFields[ii] == item) {
                            boundFields.splice(ii, 1);
                            break;
                        }
                    }
                }
            }
            
            
        }
        if (item.id) {
            delete this.idMap[item.id];
        }
        if (item.dispose) {
            document.controller.disposeObject(item);
        }
    },
    _dispose: function(){
        if (this.$$item) {
            this.$$item.undelegate();
        }
        if (this.$$fieldsParents) {
            this.$$fieldsParents.forEach(function($$fieldsParent){
                $$fieldsParent.undelegate();
            });
        }
        delete this.menuItems;
        delete this.$menus;
        delete this.menuBoxes;
        if (this.idMap) {
            document.controller.disposeObject(this.idMap);
            delete this.idMap;
        }
        delete this.$layoutOptions;
    },
    dispose: function(){
        document.controller.removeArticle(this);
        this._dispose();
        Box.prototype.dispose.call(this);
    }
});
