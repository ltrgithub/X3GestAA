"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _templatePattern = /(\{.*?\})/g;

function _togglePicker(box, pickerId, show){
    var slotParent = box.tabTitle ? box.tabTitle : box._header;
    if (show) {
        if (!box._pickers) {
            box._pickers = {
                items: {},
                width: 0,
                slot: document.createElement("div")
            };
            box._pickers.slot.setAttribute("data-s-box", box.id);
            box._pickers.slot.className = box.$skin + ((box.tabTitle) ? "-tab-pickers" : "-pickers");
            slotParent.appendChild(box._pickers.slot);
        };
        var picker = box._pickers.items[pickerId] = document.createElement("a");
        picker.className = box.$skin + "-" + pickerId;
        picker.setAttribute("data-s-box-picker", pickerId);
        picker.title = box.getLocalize()["box_" + pickerId];
        
        box._pickers.width += 18;
        box._pickers.slot.appendChild(picker);
        box._pickers.slot.style.width = box._pickers.width + "px";
        slotParent.style.paddingRight = box._pickers.width + "px";
    }
    else {
        if (box._pickers.items[pickerId]) {
            document.site.removeDomChild(box._pickers.items[pickerId]);
            delete box._pickers.items[pickerId];
            box._pickers.width -= 18;
            slotParent.style.paddingRight = box._pickers.width + "px";
            box._pickers.slot.style.width = box._pickers.width + "px";
        }
    }
}

function _toggleExpandPicker(box, onAuthoring){
    if (box.$item.$isBoxCollapsable) {
        if (!box._expandPicker) {
            box._expandPicker = document.createElement("a");
            box._expandPicker.setAttribute("href", "#");
            box._expandPicker.setAttribute("data-s-box", box.id);
            box._expandPicker.className = box.$skin + "-expand";
            box._expandPicker.title = box.getLocalize().box_collapse;
            if (box.$item.$css) {
                box._expandPicker.className += " " + box.$item.$css;
            }
            box._header.appendChild(box._expandPicker);
        }
        box.domTitle.style.marginLeft = "16px";
        if (!(box.$opened = box.$item.$opened !== false)) {
            box._expandPicker.title = box.getLocalize().box_expand;
            document.site.toggleClass(box._expandPicker, "s-close", true);
        }
    }
    else {
        if (box._expandPicker) {
            document.site.removeDomChild(box._expandPicker);
            box._expandPicker = null;
        }
        box.domTitle.style.marginLeft = "0px";
    }
    if (onAuthoring) {
        if (!box.$item.$isBoxCollapsable && !box.$opened) {
            exports.expandBody(box, true);
        }
    }
}

exports.onBoxLayoutChange = function(box){
    if (box._pickers) {
        document.site.removeDomChild(box._pickers);
        box._pickers = null;
        exports.applyPickerMetadata(box, box.$item);
    }
};

exports.applyPickerMetadata = function(box, metaData, onAuthoring){
    if (metaData.$isBoxCollapsable !== undefined) {
        box.$item.$isBoxCollapsable = metaData.$isBoxCollapsable;
        _toggleExpandPicker(box, onAuthoring);
    }
    if (metaData.$isCloseable !== undefined) {
        _togglePicker(box, "close", box.$item.$isCloseable = metaData.$isCloseable);
    }
    if (metaData.$isRefreshable !== undefined) {
        _togglePicker(box, "refresh", box.$item.$isRefreshable = metaData.$isRefreshable);
    }
    if (metaData.$isMaximizable !== undefined) {
        _togglePicker(box, "maximize", box.$item.$isMaximizable = metaData.$isMaximizable);
    }
};

function _toggleTabSiblings(tab, show){
    var node = tab.parentNode.firstChild;
    while (node) {
        if (node != tab) {
            node.style.display = show ? "" : "none";
        }
        node = node.nextSibling;
    }
}

exports.doPicker = function(box, pickerId, callback){
    setTimeout(function(){
        switch (pickerId) {
            case "maximize":
                if (!box.$$memBody) {
                    box.$$memBody = $(document.createElement("div"));
                }
                box.$$memBody.empty().append(box.page.$$body.children());
                if (box.tabTitle) {
                    box.page._body.appendChild(box.layoutParent._tabs);
                    _toggleTabSiblings(box.tabTitle, false);
                    if (!box.$item.$opened) {
                        box.openBox(true);
                    }
                }
                box.page._body.appendChild(box._item);
                if (callback) {
                    callback(box, box.page);
                }
                
                box._$isMaximized = true;
                box._pickers.items.maximize.title = box.getLocalize().box_maximize;
                box._pickers.items.maximize.className = box.$skin + "-maximize s-minimize";
                box._pickers.items.maximize.setAttribute("data-s-box-picker", "minimize");
                break;
            case "minimize":
                if (box.tabTitle) {
                    if (box.layoutParent._item.firstChild) {
                        box.layoutParent._item.firstChild.parentNode.insertBefore(box.layoutParent._tabs, box.layoutParent._item.firstChild);
                    }
                    else {
                        box.layoutParent._item.appendChild(box.layoutParent._tabs);
                    }
                    _toggleTabSiblings(box.tabTitle, true);
                }
                box.layoutSlot.appendChild(box._item);
                box.page.$$body.append(box.$$memBody.children());
                box.$$memBody.remove();
                delete box.$$memBody;
                if (callback) {
                    callback(box, box.page);
                }
                box._$isMaximized = false;
                box._pickers.items.maximize.title = box.getLocalize().box_minimize;
                box._pickers.items.maximize.className = box.$skin + "-maximize";
                box._pickers.items.maximize.setAttribute("data-s-box-picker", "maximize");
                break;
            case "close":
                if (box._$isMaximized) {
                    exports.doPicker(box, "minimize");
                }
                var layoutParent = box.layoutParent;
                layoutParent.removeItem(box, true);
                if (layoutParent._tabs) {
                    layoutParent.page.layoutValidator.validatetabs(layoutParent);
                }
                break;
        }
    }, 20);
};

exports.expandBody = function(box, $opened){
    box.$opened = ($opened === undefined) ? !box.$opened : $opened;
    var isFirstTime = !box.loaded || false;
    if (box.$opened) {
        document.site.resize(true);
    }
    if (box.menuGroupRoot && box.menuGroupRoot.contextField) {
        if (!box.menuGroupRoot.contextField.$isDisabled) {
            box.menuGroupRoot.contextField.page.externalAdapter.onFieldClickPicker({
                field: box.menuGroupRoot.contextField,
                pickerType: "menus",
                doEvent: function(){
                    exports.doOpenPicker(box);
                }
            });
        }
    }
    else {
        box.page.externalAdapter.onBoxToggle({
            box: box,
            open: box.$opened,
            isFirstTime: isFirstTime,
            doEvent: function(){
                exports.doOpenPicker(box);
            }
        });
    }
};

exports.doOpenPicker = function(box){
    box.openBox(box.$opened);
    if (box.$item.$isPopupContent) {
        if (!box._popupMenus) {
            box._popupMenus = box.openDialog({
                $dialogMode: "popup",
                content: box,
                $$dialog: box.$$body,
                position: {
                    my: "right top",
                    at: "right bottom",
                    of: $(box.titleMenu ? box._header : box.domTitle)
                },
                onClose: function(){
                    setTimeout(function(){
                        if (box.domTitle) {
                            document.site.toggleClass(box.domTitle, "s-close", true);
                        }
                        box._popupMenus = null;
                    }, 200);
                }
            });
        }
        else {
            box._popupMenus.close();
        }
    }
};

exports.renderHTMLExpression = function(box, expression, layoutSlot, $fieldCss, $isEditMode){
    var article = box.getArticle();
    var html = expression;
    var matches = expression.match(_templatePattern);
    for (var ii = 0, jj = matches.length; ii < jj; ii++) {
        var match = matches[ii];
        html = html.replace(match, "<div data-s-match='" + ii + "'>" + match + "</div>");
        matches[ii] = {
            expression: match,
            property: match.substr(1, match.length - 2)
        };
    }
    var divs = $(layoutSlot).append(html).find("div");
    for (var ii = 0, jj = divs.length; ii < jj; ii++) {
        var domMatch = divs[ii];
        var match = matches[parseInt(domMatch.getAttribute("data-s-match"), 10)];
        if (match.property.charAt(0) == "$") {
            var value = article.matchProperty(match.expression, match.property, article.dataset);
            if (value != null) {
                if (value.indexOf && value.indexOf("{") >= 0) {
                    document.site.emptyDom(domMatch);
                    box.renderExpression(value, domMatch, $fieldCss, $isEditMode);
                }
                else {
                    domMatch.textContent = value;
                }
            }
        }
        else {
            document.site.emptyDom(domMatch);
            box.page.loadNewItem(domMatch, {
                $isMenusDisabled: true,
                $isExpressionChild: true,
                $bind: match.property,
                $inplace: true,
                $isEditMode: $isEditMode === undefined ? box.$isEditMode : $isEditMode,
                $css: "s-expression " + $fieldCss,
                $skin: "s-inplace"
            }, article);
        }
    }
};
