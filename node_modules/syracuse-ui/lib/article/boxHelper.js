"use strict";

function _setMaximizeBtn(box) {
	var state = box.isMaximized ? "minimize" : "maximize";
	syra_menus.updateButtonIcon(box.btns.items.maximize, syra_local["box_" + state], state);
}

function _toggleTabSiblings(box, show) {
	var tab = box.tabTitle;
	var node = tab.parentNode.firstChild;
	while (node) {
		if (node != tab) {
			node.style.display = show ? "" : "none";
		}
		node = node.nextSibling;
	}
}

exports.onMaximizeBoxClick = function(box) {
	box.isMaximized = !box.isMaximized;
	if (box.isMaximized) {
		if (!box.$$memBody) {
			box.$$memBody = $(document.createElement("div"));
		}
		box.$$memBody.empty().append($(box.page.body).children());
		if (box.tabTitle) {
			box.page.body.appendChild(box.layoutParent._tabs);
			_toggleTabSiblings(box, false);
			box.layoutParent.openTab(box);
		}
		_setMaximizeBtn(box);
		box.page.body.appendChild(box.domItem);
	} else {
		if (box.tabTitle) {
			if (box.layoutParent.domItem.firstChild) {
				box.layoutParent.domItem.firstChild.parentNode.insertBefore(box.layoutParent._tabs, box.layoutParent.domItem.firstChild);
			} else {
				box.layoutParent.domItem.appendChild(box.layoutParent._tabs);
			}
			_toggleTabSiblings(box, true);
		}
		box.layoutSlot.appendChild(box.domItem);
		$(box.page.body).append(box.$$memBody.children());
		box.$$memBody.remove();
		delete box.$$memBody;
		_setMaximizeBtn(box);
	}
	if (box.onSwitchMaximize) {
		box.onSwitchMaximize();
	}
};

exports.onCloseClick = function(box) {
	if (box.isMaximized) {
		exports.onMaximizeBoxClick(box);
	}
	var layoutParent = box.layoutParent;
	layoutParent.removeItem(box, true);
	layoutParent.page.ensurePageVisibility();
};


exports.applyButtonMetadata = function(box, metaData, designing) {
	if (metaData.$isBoxCollapsable !== undefined) {
		box.$item.$isBoxCollapsable = metaData.$isBoxCollapsable;
		_showExpandButton(box, designing);
	}
	if (metaData.$isCloseable !== undefined) {
		exports.showButton(box, "close", box.$item.$isCloseable = metaData.$isCloseable);
	}
	if (metaData.$isMaximizable !== undefined) {
		exports.showButton(box, "maximize", box.$item.$isMaximizable = metaData.$isMaximizable);
	}
	box.ensureButtonsVisibility();
};

var _onClickHandlers = {
	"maximize": "onMaximizeBoxClick",
	"design": "onDesignOpenerClick",
	"delete": "onDeleteClick",
	"refresh": "onRefreshClick",
	"close": "onCloseClick"
};

function _showExpandButton(box, designing) {
	if (box.$item.$isBoxCollapsable && !box.$item.$isTitlePicker) {
		if (!box.expandBtn) {
			var css = box.$skin + "-expand";
			box.expandBtn = syra_menus.addIconButton(syra_local.box_collapse, css, "onOpenerClick", null, "expand");
			box.expandBtn.syraItem = box.id;
			box.header.insertBefore(box.expandBtn, box.header.firstChild);
		}
		box.$opened = box.$item.$opened !== false;
		exports.setExpandButtonState(box);
	} else {
		box.expandBtn && syra_site.dom.removeChild(box.expandBtn);
	}
	if (designing) {
		if (!box.$item.$isBoxCollapsable && !box.$opened) {
			box.expandBody(true);
		}
	}
};

exports.setExpandButtonState = function(box) {
	var state = box.$opened ? "collapse" : "expand";
	syra_menus.updateButtonIcon(box.expandBtn, syra_local["box_" + state], state);
};

exports.showButton = function(box, btnId, show, syraOnClick, fontIcon) {
	var slotParent = box.tabTitleHead ? box.tabTitleHead : box.header;
	var btns = box.btns;
	if (show) {
		if (!btns) {
			box.btnWidth = box.btnWidth || 20;
			btns = box.btns = {
				items: {},
				slot: document.createElement("div"),
				width: 0
			};
			btns.slot.syraItem = box.id;
			btns.slot.className = "s-section-btns";
			if (slotParent) {
				slotParent.appendChild(btns.slot);
			}
		}
		if (!btns.items[btnId]) {
			var btn = syra_menus.addIconButton(syra_local["box_" + btnId], box.$skin + "-btn", _onClickHandlers[btnId] || syraOnClick, null, fontIcon || btnId);
			btns.items[btnId] = btn;
			btns.width += box.btnWidth;
			btns.slot.style.width = btns.width + "px";
			btns.slot.appendChild(btn);
		}
	} else {
		if (btns && btns.items[btnId]) {
			syra_site.dom.removeChild(btns.items[btnId]);
			delete btns.items[btnId];
			btns.width = Math.max(0, btns.width - box.btnWidth);
			btns.slot.style.width = btns.width + "px";
		}
	}
};


exports.setTitleIcon = function(box) {
	box._iconTitle = document.createElement("div");
	box._iconTitle.className = box.$skin + "-title-icon";
	box.domTitle.appendChild(box._iconTitle);
	var $path = syra_site.$item.$iconPath + (box.$item.$titleIcon.$path || "");
	box._iconTitle.style.backgroundImage = "url('" + $path + box.$item.$titleIcon.$value + ".png')";
	box.titleLabel = document.createElement("div");
	box.titleLabel.className = box.$skin + "-title-text s-icon";
	box.domTitle.appendChild(box.titleLabel);
};


exports.appendTabTitle = function(box) {
	box.tabTitle = document.createElement("a");
	box.tabTitle.syraOnClick = "onOpenerClick";
	if (box.isSection) {
		box.tabTitle.setAttribute("href", "#");
	}
	box.tabTitle.className = box.$skin + "-tab";
	box.tabTitle.syraItem = box.id;
	box.tabTitleHead = document.createElement("div");
	box.tabTitleHead.className = box.$skin + "-tab-head";
	box.tabTitleText = document.createElement("div");
	box.tabTitleText.className = box.$skin + "-tab-text";
	box.tabTitleHead.appendChild(box.tabTitleText);
	box.tabTitle.appendChild(box.tabTitleHead);
	box.setTitle(box.getTitle());
	box.layoutParent.appendTab(box);
	box.header.style.display = "none";
};


exports.applyDesignFieldsSettings = function(box, metaData) {
	if (metaData.$fieldsIsTopLabelAlignment !== undefined ||
		metaData.$fieldsIsRightTextLabelAlignment !== undefined ||
		metaData.$fieldsIsTitleHidden !== undefined) {
		if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
			box.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
		}
		if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
			box.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
		}
		if (metaData.$fieldsIsTitleHidden !== undefined) {
			box.$item.$fieldsIsTitleHidden = metaData.$fieldsIsTitleHidden;
		}
		var items = box.layoutContent.getItems();
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			var item = items[ii];
			if (item.isField) {
				box.applyDesignMetaDataToField(item, metaData);
			} else {
				if (!item.isLayout && item.layoutContent) {
					exports.applyDesignFieldsSettings(item, metaData);
				}
			}
		}
	}
};

function _expandSiblingBoxes(box, layout, expand) {
	for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
		var item = layout.items[ii];
		if (item.isLayout) {
			_expandSiblingBoxes(box, item, expand);
		} else {
			if (item.isSection && item != box) {
				item.expandBody(expand);
			}
		}
	}
}

exports.expandSiblingBoxes = function(box, expand) {
	if (box.boxParent && box.boxParent.layoutContent) {
		_expandSiblingBoxes(box, box.boxParent.layoutContent, expand);
	}
};