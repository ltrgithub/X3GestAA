"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _templatePattern = /(\{.*?\})/g;

function _togglePicker(box, pickerId, show) {
	var slotParent = box.tabTitleHead ? box.tabTitleHead : box._header;
	if (show) {
		if (!box._pickers) {
			box._pickers = {
				items: {},
				slot: document.createElement("div"),
				width: 0
			};
			box._pickers.slot.setAttribute("data-s-box", box.id);
			box._pickers.slot.className = box.$skin + ((box.tabTitleHead) ? "-tab-pickers" : "-pickers");
			slotParent.appendChild(box._pickers.slot);
		};
		if (!box._pickers.items[pickerId]) {
			var picker = box._pickers.items[pickerId] = document.createElement("a");
			picker.className = box.$skin + "-" + pickerId;
			picker.setAttribute("data-s-picker", "box-picker");
			picker.syraBoxId = box.id;
			picker.syraBoxPickerId = pickerId;
			picker.title = box.localize["box_" + pickerId];
			box._pickers.width += 18;
			box._pickers.slot.style.width = box._pickers.width + "px";
			box._pickers.slot.appendChild(picker);
		}
	} else {
		if (box._pickers && box._pickers.items[pickerId]) {
			document.site.removeDomChild(box._pickers.items[pickerId]);
			delete box._pickers.items[pickerId];
			box._pickers.width = Math.max(0, box._pickers.width - 18);
			box._pickers.slot.style.width = box._pickers.width + "px";
		}
	}
}

function _toggleExpandPicker(box, designing) {
	if (box.$item.$isBoxCollapsable && !box.$item.$isTitlePicker) {
		if (!box._expandPicker) {
			box._expandPicker = document.createElement("a");
			box._expandPicker.setAttribute("href", "#");
			box._expandPicker.setAttribute("data-s-box", box.id);
			box._expandPicker.syraBoxId = box.id;
			box._expandPicker.syraBoxPickerId = "expand";
			box._expandPicker.className = box.$skin + "-expand";
			box._expandPicker.title = box.localize.box_collapse;
			if (box.$item.$css) {
				box._expandPicker.className += " " + box.$item.$css;
			}
			box._header.insertBefore(box._expandPicker, box._header.firstChild);
		}
		if (!(box.$opened = box.$item.$opened !== false)) {
			box._expandPicker.title = box.localize.box_expand;
			document.site.toggleClass(box._expandPicker, "s-close", true);
		}
	} else {
		if (box._expandPicker) {
			document.site.removeDomChild(box._expandPicker);
			box._expandPicker = null;
		}
	}
	if (designing) {
		if (!box.$item.$isBoxCollapsable && !box.$opened) {
			exports.expandBody(box, true);
		}
	}
}

exports.onBoxLayoutChange = function(box) {
	if (box._pickers) {
		document.site.removeDomChild(box._pickers);
		box._pickers = null;
		exports.applyPickerMetadata(box, box.$item);
	}
};

exports.togglePicker = function(box, pickerId, show) {
	_togglePicker(box, pickerId, show);
};
exports.applyPickerMetadata = function(box, metaData, designing) {
	if (metaData.$isBoxCollapsable !== undefined) {
		box.$item.$isBoxCollapsable = metaData.$isBoxCollapsable;
		_toggleExpandPicker(box, designing);
	}
	if (metaData.$isCloseable !== undefined) {
		_togglePicker(box, "close", box.$item.$isCloseable = metaData.$isCloseable);
	}
	if (metaData.$isRefreshable !== undefined) {
		_togglePicker(box, "refresh", box.$item.$isRefreshable = metaData.$isRefreshable);
	}
	if (metaData.$isMaximizable !== undefined) {
		_togglePicker(box, "maximize", box.$item.$isMaximizable = metaData.$isMaximizable);
	}
	if (metaData.$hasMenus !== undefined) {
		_togglePicker(box, "menus", metaData.$hasMenus);
	}
	box._ensurePickersVisibiliy();
};

exports.toggleAdvancedFieldPicker = function(box, $isAdvancedMode) {
	_togglePicker(box, "advanced", $isAdvancedMode);
	if (box._pickers && box._pickers.items) {
		var advancedPicker = box._pickers.items.advanced;
		if (advancedPicker) {
			if (advancedPicker.parentNode.firstChild != advancedPicker) {
				advancedPicker.parentNode.insertBefore(advancedPicker, advancedPicker.parentNode.firstChild);
			}
		}
	}
};

function _toggleTabSiblings(tab, show) {
	var node = tab.parentNode.firstChild;
	while (node) {
		if (node != tab) {
			node.style.display = show ? "" : "none";
		}
		node = node.nextSibling;
	}
}

exports.doPicker = function(box, pickerId) {
	switch (pickerId) {
		case "maximize":
			if (!box.$$memBody) {
				box.$$memBody = $(document.createElement("div"));
			}
			box.$$memBody.empty().append(box.page.$$body.children());
			if (box.tabTitle) {
				box.page._body.appendChild(box.layoutParent._tabs);
				_toggleTabSiblings(box.tabTitle, false);
				if (!box.$item.$opened) {
					box.openBox(true);
				}
			}
			box.page._body.appendChild(box._item);
			box._$isMaximized = true;
			box._pickers.items.maximize.title = box.localize.box_maximize;
			box._pickers.items.maximize.className = box.$skin + "-maximize s-minimize";
			box._pickers.items.maximize.setAttribute("data-s-picker", "box-picker");
			box._pickers.items.maximize.syraBoxId = box.id;
			box._pickers.items.maximize.syraBoxPickerId = "minimize";
			break;
		case "minimize":
			if (box.tabTitle) {
				if (box.layoutParent._item.firstChild) {
					box.layoutParent._item.firstChild.parentNode.insertBefore(box.layoutParent._tabs, box.layoutParent._item.firstChild);
				} else {
					box.layoutParent._item.appendChild(box.layoutParent._tabs);
				}
				_toggleTabSiblings(box.tabTitle, true);
			}
			box.layoutSlot.appendChild(box._item);
			box.page.$$body.append(box.$$memBody.children());
			box.$$memBody.remove();
			delete box.$$memBody;
			box._$isMaximized = false;
			box._pickers.items.maximize.title = box.localize.box_minimize;
			box._pickers.items.maximize.className = box.$skin + "-maximize";
			box._pickers.items.maximize.setAttribute("data-s-picker", "box-picker");
			box._pickers.items.maximize.syraBoxId = box.id;
			box._pickers.items.maximize.syraBoxPickerId = "maximize";
			break;
		case "advanced":
			box.showAdvancedFields(!box.$isAdvancedFieldsVisible);
			break;
		case "close":
			if (box._$isMaximized) {
				exports.doPicker(box, "minimize");
			}
			var layoutParent = box.layoutParent;
			layoutParent.removeItem(box, true);
			if (layoutParent._tabs) {
				layoutParent.page.layoutValidator.validatetabs(layoutParent);
			}
			break;
	}
};

exports.expandBody = function(box, $opened, event) {
	if (event) {
		if (event.shiftKey) {
			if (box.page.isBoxesExpanded === undefined) {
				box.page.isBoxesExpanded = true;
			}
			box.expandSiblingBoxes(box.page.isBoxesExpanded = !box.page.isBoxesExpanded);
		}
	}
	box.$opened = ($opened === undefined) ? !box.$opened : $opened;
	var isFirstTime = !box.loaded || false;
	/*if (box.$opened && !box.$item.$isPopupContent) {
     document.site.resize(true);
     }*/
	if (box.menuGroupRoot && box.menuGroupRoot.contextField) {
		if (!box.menuGroupRoot.contextField.$isDisabled) {
			box.menuGroupRoot.contextField.page.externalAdapter.onFieldClickPicker({
				field: box.menuGroupRoot.contextField,
				pickerType: "menus",
				doEvent: function() {
					box.doOpenPicker();
				}
			});
		}
	} else {
		box.page.externalAdapter.onBoxToggle({
			box: box,
			open: box.$opened,
			isFirstTime: isFirstTime,
			doEvent: function() {
				box.doOpenPicker();
				if (!box.$item.$isPopupContent) {
					document.site.resize(true);
				}
			}
		});
	}
};

exports.renderHTMLExpression = function(box, expression, layoutSlot, $fieldCss, $isEditMode) {
	var article = box.getArticle();
	var html = expression;
	var matches = expression.match(_templatePattern);
	for (var ii = 0, jj = matches.length; ii < jj; ii++) {
		var match = matches[ii];
		html = html.replace(match, "<div data-s-match='" + ii + "'>" + match + "</div>");
		matches[ii] = {
			expression: match,
			property: match.substr(1, match.length - 2)
		};
	}
	layoutSlot.innerHTML = html;
	var divs = layoutSlot.querySelectorAll("div");
	for (var ii = 0, jj = divs.length; ii < jj; ii++) {
		var domMatch = divs[ii];
		var match = matches[parseInt(domMatch.getAttribute("data-s-match"), 10)];
		if (match.property.charAt(0) == "$") {
			var value = article.matchProperty(match.expression, match.property, article.dataset);
			if (value != null) {
				if (value.indexOf && value.indexOf("{") >= 0) {
					document.site.emptyDom(domMatch);
					box.renderExpression(value, domMatch, $fieldCss, $isEditMode);
				} else {
					domMatch.textContent = value;
				}
			}
		} else {
			document.site.emptyDom(domMatch);
			box.page.loadNewItem(domMatch, {
				$isMenusDisabled: true,
				$isExpressionChild: true,
				$bind: match.property,
				$inplace: true,
				$isEditMode: $isEditMode === undefined ? box.$isEditMode : $isEditMode,
				$css: "s-expression " + $fieldCss,
				$skin: "s-inplace"
			}, article);
		}
	}
};


exports.applyDesignFieldsSettings = function(box, metaData) {
	if (metaData.$fieldsIsTopLabelAlignment !== undefined ||
		metaData.$fieldsIsRightTextLabelAlignment !== undefined ||
		metaData.$fieldsIsTitleHidden !== undefined) {
		if (metaData.$fieldsIsTopLabelAlignment !== undefined) {
			box.$item.$fieldsIsTopLabelAlignment = metaData.$fieldsIsTopLabelAlignment;
		}
		if (metaData.$fieldsIsRightTextLabelAlignment !== undefined) {
			box.$item.$fieldsIsRightTextLabelAlignment = metaData.$fieldsIsRightTextLabelAlignment;
		}
		if (metaData.$fieldsIsTitleHidden !== undefined) {
			box.$item.$fieldsIsTitleHidden = metaData.$fieldsIsTitleHidden;
		}
		var items = box.layoutContent.getItems();
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			var item = items[ii];
			if (item.isField) {
				box.applyDesignMetaDataToField(item, metaData);
			} else
			if (!item.isLayout && item.layoutContent) {
				exports.applyDesignFieldsSettings(item, metaData);
			}
		}
	}
};