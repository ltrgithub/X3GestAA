"use strict";

var _templatePattern = /(\{.*?\})/g;

function _maximize(box, callback){
    if (!box.$$memBody) {
        box.$$memBody = $("<div/>");
    }
    box.$$memBody.empty().append(box.page.$$body.children());
    box.page.$$body.append(box.$$item);
    if (callback) {
        callback(box, box.page);
    }
    
    box._$isMaximized = true;
    box._pickers.maximize.className = box._pickers.maximize.className.replace("-maximize", "-minimize");
    box._pickers.maximize.setAttribute("data-s-box-picker", "minimize");
}

function _minimize(box, callback){
    box.$$item.appendTo(box.$$container);
    box.page.$$body.append(box.$$memBody.children());
    box.$$memBody.remove();
    delete box.$$memBody;
    if (callback) {
        callback(box, box.page);
    }
    box._$isMaximized = false;
    box._pickers.maximize.className = box._pickers.maximize.className.replace("-minimize", "-maximize");
    box._pickers.maximize.setAttribute("data-s-box-picker", "maximize");
}

exports.togglePicker = function(box, pickerId, show){
    if (show) {
        if (!box._pickersSlot) {
            box._pickers = {};
            box._pickersSlot = document.createElement("div");
            box._pickersSlot.setAttribute("data-s-box", box.id);
            if (box._tabTitle) {
                box._pickersSlot.className = box.$skin + "-pickers-body";
                box.$$body.prepend(box._pickersSlot);
            }
            else {
                box._pickersSlot.className = box.$skin + "-pickers";
                box._header.appendChild(box._pickersSlot);
            }
        }
        var picker = box._pickers[pickerId] = document.createElement("a");
        picker.className = box.$skin + "-" + pickerId;
        picker.setAttribute("data-s-box-picker", pickerId);
        box._pickersSlot.appendChild(picker);
    }
    else {
        if (box.pickers && box.pickers[pickerId]) {
            document.site.removeDomChild(box.pickers[pickerId]);
            delete box.pickers[pickerId];
        }
    }
};

exports.doPicker = function(box, pickerId, callback){
    setTimeout(function(){
        switch (pickerId) {
            case "maximize":
                _maximize(box, callback);
                break;
            case "minimize":
                _minimize(box, callback);
                break;
        }
    }, 20);
};


exports.setCollapsable = function(box, $isBoxCollapsable){
    if ($isBoxCollapsable) {
        document.site.toggleClass(box.domTitle, "s-picker", true);
        if (!(box.$opened = box.$item.$opened !== false)) {
            document.site.toggleClass(box.domTitle, "s-close", true);
        }
    }
    else {
        document.site.toggleClass(box.domTitle, "s-close", false);
        document.site.toggleClass(box.domTitle, "s-picker", false);
    }
};

exports.renderExpression = function(box, expression, $$container, $fieldCss, $isEditMode){
    var article = box.getArticle();
    var html = expression;
    if (expression[1] == "@") {
        var text = article.parseExpression(expression);
        if ($$container) { //!important used by expression
            $$container.text(text);
        }
        return text;
    }
    var matches = expression.match(_templatePattern).map(function(match, index){
        html = html.replace(match, "<div data-s-match='" + index + "'>" + match + "</div>");
        return {
            expression: match,
            property: match.substr(1, match.length - 2)
        };
    });
    $$container.append(html).find("div").each(function(index, domMatch){
        var $$match = $(domMatch);
        var match = matches[parseInt(domMatch.getAttribute("data-s-match"), 10)];
        if (match.property.charAt(0) == "$") {
            var value = article.matchProperty(match.expression, match.property, article.dataset);
            if (value != null) {
                if (value.indexOf && value.indexOf("{") >= 0) {
                    box._renderExpression(value, $$match.empty(), $fieldCss, $isEditMode);
                }
                else {
                    $$match.text(value);
                }
            }
        }
        else {
            box.page.loadNewItem($$match.empty(), {
                $isMenusDisabled: true,
                $isExpressionChild: true,
                $bind: match.property,
                $inplace: true,
                $isEditMode: $isEditMode === undefined ? box.$isEditMode : $isEditMode,
                $css: "s-expression " + $fieldCss,
                $skin: "s-inplace"
            }, article);
        }
    });
};
exports.appendTabTitle = function(box){
    box._tabTitle = document.createElement("a");
    box._tabTitle.className = box.$skin + "-tab";
    box._tabTitle.setAttribute("href", "#");
    box._tabTitle.setAttribute("data-s-box", box.id);
    box._tabTitle.textContent = box.getTitle();
    box.layoutParent.appendTab(box);
};

exports.openDialog = function(box, options){
    options.boxParent = box;
    var dialog = document.site.openDialog(options);
    if (!box._dialogs) {
        box._dialogs = [];
    }
    box._dialogs.push(dialog);
    return dialog;
};
exports.closeDialog = function(box, dialog){
    if (box._dialogs) {
        for (var ii = 0, jj = dialog.length; ii < jj; ii++) {
            if (box._dialogs[ii] == dialog) {
                box._dialogs.splice(ii, 1);
                break;
            }
        }
    }
};
exports.closeDialogs = function(box, dispose){
    if (box._dialogs) {
        for (var ii = 0, jj = box._dialogs.length; ii < jj; ii++) {
            box._dialogs[ii].close(undefined, dispose);
            box._dialogs[ii] = null;
        }
        box._dialogs = null;
    }
};


