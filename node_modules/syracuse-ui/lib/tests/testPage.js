"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var resources = require("./resources");

var _fieldsGroup = {
	dashboardConverter: require("syracuse-ui/lib/tests/newtest/dashboardConverter"),
	convergenceCleaner: require("syracuse-ui/lib/tests/newtest/convergenceCleaner"),
	selectPrinter: require("syracuse-ui/lib/tests/newtest/selectPrinter"),
	formula: require("syracuse-ui/lib/tests/newtest/formula"),
	parameters: require("syracuse-ui/lib/tests/newtest/parameters"),
	gantt: require("syracuse-ui/lib/tests/newtest/charts/gantt"),
	spider: require("syracuse-ui/lib/tests/newtest/charts/spider"),
	macros: require("syracuse-ui/lib/tests/newtest/macros/macros"),
	coreStyle: require("syracuse-ui/lib/tests/newtest/coreStyle"),
	diagnoseCenter: require("syracuse-ui/lib/tests/newtest/diagnoseCenter"),
	layout: require("syracuse-ui/lib/tests/newtest/layout"),
	process: require("syracuse-ui/lib/tests/newtest/process/process"),
};

function TestPage() {}

var TestPageClass = helpers.defineClass(TestPage, DesktopPage, {
	addMenus: function($menus, rootSlot) {
		for (var ii = 0, jj = $menus.length; ii < jj; ii++) {
			var $menu = $menus[ii];
			if ($menu.$menus) {
				var box = this.addBox($menu.$title, "mn");
				rootSlot.appendChild(box.slot);
				$menu.$menus && this.addMenus($menu.$menus, box.slot);
			} else {
				var btn = syra_menus.addTextButton($menu.$title, "s-uitest-mn", "onNavTestMenuClick");
				if ($menu.$url) {
					rootSlot.appendChild(btn).href = $menu.$url;
				}
			}
		}
	},
	addBox: function($title, css) {
		var box = {
			slot: document.createElement("div"),
			body: document.createElement("div")
		};
		box.slot.className = "s-uitest-group-" + css;
		if ($title) {
			box.head = document.createElement("h2");
			box.head.className = "s-uitest-group-head-" + css;
			box.slot.appendChild(box.head).textContent = $title;
		}
		box.slot.appendChild(box.body).className = "s-uitest-group-body-" + css;
		return box;
	},
	addCol: function(slot, width) {
		var col = slot.appendChild(document.createElement("div"));
		col.className = "s-uitest-col";
		if (width) {
			col.style.width = width;
		}
		return col;
	},
	getResources: function() {
		return resources;
	},
	onNavTestMenuClick: function(event, target) {
		if (target.syraValue && target.syraValue.indexOf("uilock") >= 0) {
			syra_site.uiLocker.lock(100, target.syraValue == "uilocklong");
		} else {
			syra_controller.executeMenu({
				$url: target.href
			}, this);
		}
		event.preventDefault();
		event.stopPropagation();
	},
	loadBox: function(initData) {
		syra_site.pageLoader.initialize(this);
		this.$prototype.$properties = this.$prototype.$properties || {};
		DesktopPage.prototype.loadBox.call(this, initData);
		this.menuBar.isSlotVisible = true;
		this.menuBar.toggleBar(true);
		this.menuBar.ensureState();

		syra_site.dom.toggleClass(this.menuBar.barBody, "s-uitest-menubar-body", true);
		this.addMenus(syra_site.uiTestController.$menus, this.menuBar.barBody);

		this.menuBar.barBody.appendChild(syra_menus.addTextButton("ui lock", "s-uitest-mn", "onNavTestMenuClick")).syraValue = "uilock";
		this.menuBar.barBody.appendChild(syra_menus.addTextButton("ui lock long", "s-uitest-mn", "onNavTestMenuClick")).syraValue = "uilocklong";

		if (this.$prototype.$screenGroup) {
			this._fieldsGroup = _fieldsGroup[this.$prototype.$screenGroup];
			this._fieldsGroup && this._fieldsGroup.load(this);
		}
	},
	notifyDataChange: function(field, value) {
		this._fieldsGroup && this._fieldsGroup.notifyDataChange && this._fieldsGroup.notifyDataChange(field, value);
		DesktopPage.prototype.notifyDataChange.call(this, field, value);
	},
	notifyActionChange: function(menuItem, target, value, notifyServer) {
		this._fieldsGroup && this._fieldsGroup.notifyActionChange && this._fieldsGroup.notifyActionChange(menuItem, target, value, notifyServer);
		DesktopPage.prototype.notifyActionChange.call(this, menuItem, target, value, notifyServer);
	},
	applyChange: function(newData) {
		this._fieldsGroup && this._fieldsGroup.applyChange && this._fieldsGroup.applyChange(this, newData);
		DesktopPage.prototype.applyChange.call(this, newData);
	}
});


exports.TestCase = TestPageClass;
exports.TestPage = TestPageClass;