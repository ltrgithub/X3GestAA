"use strict";
var helpers = require("syracuse-core/lib/helpers");
var FieldsTest = require("./fieldsTest").FieldsTest;

function TestCase() {}

exports.TestCase = helpers.defineClass(TestCase, FieldsTest, {
	_initiliazeTestPage: function() {
		FieldsTest.prototype._initiliazeTestPage.call(this);
		syra_site.deltaManager.applyObjectDelta(this, this.$prototype.$properties, {
			"$field$rows": {
				$title: "$rows",
				$type: "application/x-string",
			},
			"$field$output": {
				$title: "output",
				$type: "application/x-string",
			},
			"textrtf": {
				$title: "text-rtf",
				$type: "text/rtf",
				$maxLength: 500,
				$capabilities: "sort,filter,raw",
				$links: {
					$tunnel: {},
					$lookup: {}
				}
			},
			"texthtml": {
				$title: "text-html",
				$type: "text/html",
				$links: {
					$tunnel: {},
					$lookup: {}
				}
			},
			"textplain": {
				$title: "text-plain",
				$type: "text/plain",
				$links: {
					$tunnel: {},
					$lookup: {}
				}
			}
		}, true);
	},
	loadBox: function() {
		FieldsTest.prototype.loadBox.call(this, {
			"textplain": "Hello World!!!",
			"textrtf": "{\\rtf1\\ansi{\\fonttbl{\\f0 Bitstream Charter;}} {\\f0 \\fs24 Ceci est un texte accentu\\u233 }\\par \\par {\\f0 des \\fs18 petits}{\\f0  et des \\fs32 gros}\\f0 .}",
			"texthtml": "<h1>Hi</h1><p>This is very minimal \"hello world\" HTML document.</p>"
		});
	},
	appendSettingsBar: function() {
		var $items = FieldsTest.prototype.appendSettingsBar.call(this);
		$items.unshift({
			$category: "section",
			$title: "Html Editor Specific",
			$layout: {
				$items: [{
					$bind: "$field$rows",
					$isHidden: true
				}, {
					$bind: "$field$output",
					$isEditMode: false
				}]
			}
		});
		return $items;
	},
	notifyDataChange: function(field, value) {
		FieldsTest.prototype.notifyDataChange.call(this, field, value);
		var rtfField = this.boundFields["textrtf"][0],
			msg = "textrtf: caret=" + rtfField.getCaretPosition() + ", data=" + rtfField.getInputValue();

		this.boundFields["$field$output"][0].setDataValue(msg);
	},
	_makeBlock: function($isEditMode) {
		return [this._makeEditReadBlock("textplain", [{
			"$bind": "textplain"
		}]), this._makeEditReadBlock("textrtf", [{
			"$bind": "textrtf",
			"$rows": 5
		}]), this._makeEditReadBlock("texthtml", [{
			"$bind": "texthtml",
			"$rows": 5
		}])];
	}
});