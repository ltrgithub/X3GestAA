"use strict";
var helpers = require("syracuse-core/lib/helpers");
var TestPage = require("syracuse-ui/lib/tests/testPage").TestPage;

var _fieldsGroup = {
	child: require("./child"),
	editor: require("./editor"),
	binary: require("./binary"),
	icon: require("./icon"),
	simple: require("./simple")
};

function Fields() {}

var FieldsClass = helpers.defineClass(Fields, TestPage, {
	loadBox: function(initData) {
		var $props = this.$prototype.$properties;
		$props.$field$type = {
			$title: "$type",
			$isMetaData: true,
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",
				$enum: ["application/x-string", "$email", "$phone", "application/x-date", "application/x-time", "application/x-datetime", "application/x-integer", "application/x-decimal", "application/x-boolean"].map(function(type) {
					return {
						$value: type,
						$title: type
					};
				})
			}
		};
		$props.$field$isDiagnoses = {
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",

				$enum: [{
					$value: "full",
					$title: "error, warning, info"
				}, {
					$value: "error",
					$title: "default error"
				}, {
					$value: "clear",
					$title: "clear"
				}, ]
			}
		};
		$props.$field$description = {
			$type: "application/x-boolean",
			$title: "$description",
			$isMetaData: true
		};
		$props.$field$help = {
			$type: "application/x-boolean",
			$title: "$help",
			$isMetaData: true
		};
		$props.$field$isReadOnly = {
			$type: "application/x-boolean",
			$title: "$isReadOnly",
			$isMetaData: true
		};
		$props.$field$isEditMode = {
			$type: "application/x-boolean",
			$title: "$isEditMode",
			$isMetaData: true
		};
		$props.$field$isHidden = {
			$type: "application/x-boolean",
			$title: "$isHidden",
			$isMetaData: true
		};
		$props.$field$isDisabled = {
			$type: "application/x-boolean",
			$title: "$isDisabled",
			$isMetaData: true
		};
		$props.$field$isMandatory = {
			$type: "application/x-boolean",
			$title: "$isMandatory",
			$isMetaData: true
		};
		$props.$field$isTopLabelAlignment = {
			$type: "application/x-boolean",
			$title: "$isTopLabelAlignment"
		};
		$props.$field$isTitleHidden = {
			$type: "application/x-boolean",
			$title: "$isTitleHidden"
		};
		$props.$field$isRightTextLabelAlignment = {
			$type: "application/x-boolean",
			$title: "$isRightTextLabelAlignment"
		};
		$props.$field$setNull = {
			$type: "application/x-boolean",
			$title: "set Null"
		};
		$props.$field$LinksTypeMetaDataOnly = {
			$type: "application/x-boolean",
			$title: "use Meta Data Only",
			$isReadOnly: true,
			$isMetaData: true
		};
		$props.$field$LinksType = {
			$title: "$links $actions",
			$isMetaData: true,
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",

				$enum: [{
					$value: "$empty",
					$title: "$links = null"
				}, {
					$value: "$lazyload",
					$title: "$lazyload (transition)"
				}, {
					$value: "$links",
					$title: "$links"
				}, {
					$value: "$actions",
					$title: "$actions"
				}, {
					$value: "$linksParameters",
					$title: "$links with Parameters"
				}, {
					$value: "$actionsParameters",
					$title: "$actions with Parameters"
				}]
			}
		};
		this.$prototype.$field$LinksTypeMetaDataOnly = true;
		this._defineArticle();
		initData = initData || {};
		var $screenGroup = this.$prototype.$screenGroup;
		delete this.$prototype.$screenGroup;
		TestPage.prototype.loadBox.call(this, initData);
		this.addMetaDataBox();
		if ($screenGroup) {
			this._fieldsGroup = _fieldsGroup[$screenGroup];
			this._fieldsGroup && this._fieldsGroup.load(this);
		}
	},
	addMetaDataBox: function() {
		var root = this.layoutContent.items[1].domItem;
		this.metaDataBox = this.addBox("MetaData", "h2");
		root.appendChild(this.metaDataBox.slot);
		var metadataSection = ["$field$isHidden", "$field$isDisabled", "$field$isMandatory", "$field$isEditMode", "$field$isReadOnly", "$field$description", "$field$help", "$field$isTopLabelAlignment", "$field$isTitleHidden", "$field$isRightTextLabelAlignment", "$field$setNull"];
		metadataSection = metadataSection.concat(["$field$type", "$field$LinksTypeMetaDataOnly", "$field$LinksType", "$field$isDiagnoses"]);
		for (var ii = 0, jj = metadataSection.length; ii < jj; ii++) {
			this.addMetaSectionField(metadataSection[ii]);
		}
	},
	_defineArticle: function($item) {
		this.$item.$layout = {
			$layoutType: "row",
			$widths: "70,30",
			$items: [{
				$items: []
			}, {
				$items: []
			}]
		};
	},
	addMetaSectionField: function($bind) {
		return this.loadNewItem(this.metaDataBox.body, {
			$bind: $bind,
			$isEditMode: true,
			$isLeftSpaceHidden: true
		});
	},
	setFieldDataSet: function(data) {
		this.boundFields.$field$dataset[0].setDataValue(JSON.stringify(data, null, 2));
	},
	notifyDiagnoses: function(value, useMetaDataOnly) {
		var self = this;
		var dataRecordSet = {
			$properties: {}
		};
		Object.keys(self.boundFields).forEach(function(bind) {
			var metaData = self._fillDiagnoses(value, bind);
			if (bind.indexOf("$field") != 0) {
				var $fieldProperty = self.$prototype.$properties[bind];
				dataRecordSet.$properties[bind] = {
					$diagnoses: metaData.$diagnoses
				};
			}
		});
		self.applyChange(dataRecordSet);
	},
	notifyActionLinkChange: function(metaData, useMetaDataOnly) {
		var dataRecordSet = {
			$properties: {}
		};
		//for fields only in metadata
		Object.keys(this.boundFields).forEach(function(bind) {
			if (bind.indexOf("$field") != 0) {
				dataRecordSet.$properties[bind] = {
					$links: metaData.$links,
					$actions: metaData.$actions
				};
			}
		});
		this.applyChange(dataRecordSet);
	},
	notifyDataChange: function(field, value) {
		var self = this;
		this._fieldsGroup.notifyDataChange && this._fieldsGroup.notifyDataChange(field, value);
		switch (field.$item.$bind) {
			case "$field$setNull":
				Object.keys(self.boundFields).forEach(function(bind) {
					if (bind.indexOf("$field") != 0) {
						self.boundFields[bind].forEach(function(field) {
							field.setDataBind(null);
						});
					}
				});
				break;
			case "$field$LinksType":
				var metaData = self.getResources().getActionLinks(value);
				if (value == "$lazyload") {
					self.notifyDataChange(field, "$empty");
				}
				self.notifyActionLinkChange(metaData, self.boundFields.$field$LinksTypeMetaDataOnly[0].getDataValue());
				break;
			case "$field$type":
				switch (value) {
					case "$email":
						value = {
							$title: "$format: $email",
							$type: "application/x-string",
							$format: "$email"

						};
						break;
					case "$phone":
						value = {
							$title: "$format: $phone",
							$type: "application/x-string",
							$format: "$phone"
						};
						break;
					default:
						value = {
							$title: value,
							$type: value
						};
						break;
				}
				self.applyFieldMetaData(field.$item.$bind, value);
				break;
			case "$field$help":
				self.applyFieldMetaData(field.$item.$bind, value ? "description msdmdlsjgq" : null);
				break;
			case "$field$description":
				self.applyFieldMetaData(field.$item.$bind, value ? "description df fmsdmdlsjgq" : null);
				break;
			case "$field$isDiagnoses":
				self.notifyDiagnoses(value, self.boundFields.$field$LinksTypeMetaDataOnly[0].getDataValue());
				break;

			default:
				if (field.$item.$bind.indexOf("$field") == 0) {
					switch (field.$item.$bind) {
						case "":
							break;
						default:
							self.applyFieldMetaData(field.$item.$bind, value);
							break;
					}
				} else {
					TestPage.prototype.notifyDataChange.call(this, field, value);
				}
				break;
		}
	},
	notifyChangeToServer: function(sendBag) {
		var dataRecords = sendBag.dataRecords;
		delete sendBag.dataRecords;
		sendBag.dataRecords = dataRecords;
	},
	_fillDiagnoses: function(value, $bind) {
		var metaData = {};
		if (value == "clear") {
			metaData.$diagnoses = null;
		} else {
			metaData.$diagnoses = [{
				severity: "error",
				message: "Error test  blalfoz"
			}];
			if (value == "full") {
				metaData.$diagnoses.push({
					severity: "warning",
					message: "Warning test"
				});
				metaData.$diagnoses.push({
					severity: "info",
					message: "Info test"
				});
			}
		}
		return metaData;
	},
	applyFieldMetaData: function($bind, value, $field) {
		var self = this;
		$field = $field || self.$prototype.$properties[$bind];
		$bind = $bind.replace("$field", "");
		var metaData = {};
		metaData[$bind] = value;
		if ($field.$isMetaData) {
			var $properties = {};
			Object.keys(self.boundFields).forEach(function(bind) {
				if (bind.indexOf("$field") != 0) {
					$properties[bind] = metaData;
				}
			});
			self.applyChange({
				$properties: $properties
			});
		} else {
			Object.keys(self.boundFields).forEach(function(bind) {
				if (bind.indexOf("$field") != 0) {
					self.boundFields[bind].forEach(function(field) {
						field.applyDesignMetaData(metaData, true);
					});
				}
			});
		}
	},
	addFieldBlock: function(root, $title, $binds, callback) {
		var box = this.addBox($title, "h2");
		root.appendChild(box.slot);
		var left = this.addCol(box.body, "50%");
		var right = this.addCol(box.body, "50%");
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $edit = {
				$bind: $binds[ii],
				$isEditMode: true
			};
			var $read = {
				$bind: $binds[ii]
			};
			callback && callback($edit, $read);
			this.loadNewItem(left, $edit);
			this.loadNewItem(right, $read);
		}
	}

});



exports.Fields = FieldsClass;
exports.TestCase = FieldsClass;