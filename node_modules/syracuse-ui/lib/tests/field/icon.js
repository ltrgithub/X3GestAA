"use strict";
var helpers = require("syracuse-core/lib/helpers");
var FieldsTest = require("./fieldsTest").FieldsTest;

function TestCase() {}

exports.TestCase = helpers.defineClass(TestCase, FieldsTest, {
	notifyDataChange: function(field, value) {
		if (field.$item.$bind == "$field$links") {
			var self = this;
			Object.keys(self.boundFields).forEach(function($bind) {
				if ($bind.indexOf("icon-") == 0) {
					self.boundFields[$bind].forEach(function() {
						var metaData = {
							$properties: {}
						};
						metaData.$properties[$bind] = {
							$links: value ? {} : null
						};
						self.applyChange(metaData);
					});
				}
			});
		}
		return FieldsTest.prototype.notifyDataChange.call(this, field, value);
	},
	loadBox: function() {
		var $fields = this.$prototype.$properties;
		var $defaults = {};
		for (var ii = 0; ii <= 350; ii++) {
			$fields["icon-" + ii] = {
				$title: ii + "",
				$type: "application/x-icon"
			};
			$defaults["icon-" + ii] = ii;
		}
		$fields.$field$links = {
			$type: "application/x-boolean",
			$title: "$links",
			$isMetaData: true
		};
		FieldsTest.prototype.loadBox.call(this, $defaults);
	},
	onIconFieldClick: function(field) {
		alert(field.currentValue);
	},
	buildLayout: function($isEditMode) {
		var $layout = {
			$layoutType: "row",
			$items: [{
				$layoutType: "stack"
			}, {
				$layoutType: "stack"
			}, {
				$layoutType: "stack"
			}, {
				$layoutType: "stack"
			}, {
				$layoutType: "stack"
			}]
		};
		var lastColIndex = $layout.$items.length - 1;
		for (var ii = 0, colIndex = 0, colMax = 350 / $layout.$items.length, colCount = 0; ii <= 350; ii++) {
			if (!$layout.$items[colIndex].$items) {
				$layout.$items[colIndex].$items = [];
			}
			$layout.$items[colIndex].$items.push({
				$bind: "icon-" + ii,
				$isTitleHidden: false,
				$isEditMode: $isEditMode
			});
			if ((++colCount == colMax) && colIndex < lastColIndex) {
				colIndex++;
				colCount = 0;
			}

		}
		return $layout;
	},
	appendSettingsBar: function() {
		var settings = FieldsTest.prototype.appendSettingsBar.call(this);
		settings[1].$items.push({
			$bind: "$field$links",
			$isEditMode: true
		});
		return settings;
	},
	_defineArticle: function() {
		this.$item.$layout = {
			$layoutType: "row",
			$widths: "70,30",
			$items: [{
				$category: "section",
				$layout: {
					$layoutType: "row",
					$items: [this.buildLayout(true), this.buildLayout(false)]
				}
			}, {
				$layoutType: "stack",
				$items: this.appendSettingsBar()
			}]
		};
	}
});