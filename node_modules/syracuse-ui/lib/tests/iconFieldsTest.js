"use strict";
var helpers = require("syracuse-core/lib/helpers")
var FieldsTest = require("./fieldsTest").FieldsTest;

function IconFieldsTest(){
}

exports.IconFieldsTest = helpers.defineClass(IconFieldsTest, FieldsTest, {
    notifyDataChange: function(field, value){
        if (field.$item.$bind == "$field$links") {
            var self = this;
            Object.keys(self.boundFields).forEach(function($bind){
                if ($bind.indexOf("icon-") == 0) {
                    self.boundFields[$bind].forEach(function(){
                        var metaData = {
                            $properties: {}
                        };
                        metaData.$properties[$bind] = {
                            $links: value ? {} : null
                        };
                        self.applyChange(metaData);
                    });
                }
            });
        }
        return FieldsTest.prototype.notifyDataChange.call(this, field, value);
    },
    loadBox: function(){
        var $fields = {};
        var $defaults = {};
        for (var ii = 0; ii <= 350; ii++) {
            $fields["icon-" + ii] = {
                $title: ii + "",
                $type: "application/x-icon"
            };
            $defaults["icon-" + ii] = ii;
        }
        $fields.$field$links = {
            $type: "application/x-boolean",
            $title: "$links",
            $isMetaData: true
        };
        FieldsTest.prototype.loadBox.call(this, {
            $properties: $fields
        }, $defaults);
    },
    onIconFieldClick: function(field){
        alert(field.currentValue);
    },
    buildLayout: function($isEditMode){
        var $items = [];
        for (var ii = 0; ii <= 350; ii++) {
            $items.push({
                $bind: "icon-" + ii,
                $isTitleHidden: false,
                $isEditMode: $isEditMode
            });
        }
        return {
            $layoutType: "row",
            $fitToContent: true,
            $items: $items
        };
    },
    appendSettingsBar: function(){
        var settings = FieldsTest.prototype.appendSettingsBar.call(this);
        settings[1].$layout.$items[0].$items.push({
            $bind: "$field$links",
            $isEditMode: true
        });
        return settings;
    },
    _makeBlock: function($isEditMode){
        return [{
            $category: "block",
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "50,50",
                $items: [this.buildLayout(true), this.buildLayout(false)]
            }
        }];
    }
});
