"use strict";
var module = QUnit.module;
var helpers = require("syracuse-core/lib/helpers");
var http = require("syracuse-ui/lib/newAjax").httpRequest;

asyncTest("basic send", 3, function() {
	http.send({
		url: "/test/web.html"
	}, function(err, response) {
		start();
		notEqual(response.data, null || "", "should return data");
		equal(response.status, 200, "should return ok (200) status");
		equal(err, null, "shouldn't have an error");
	});

});

asyncTest("basic error returned", 3, function() {

	http.send({
		url: "/test/web.html2"
	}, function(err, response) {
		start();
		notEqual(err.data, null || "", "should return error message in data");
		equal(err.status, 404, "should return not found (404) status");
		equal(response, null, "shouldn't have a response");
	});

});

asyncTest("basic json Request", 4, function() {
	var body = {
		$uuid: "123456",
		firstName: 1,
		lastName: 2
	};

	var oldAjax = $.ajax;
	$.ajax = function(options) {
		start();
		oldAjax(options);
		equal(options.type, "POST", "should preserve method");
		equal(options.url, "/test/web234.html", "should preserve url");
		equal(options.dataType, "json", "should have set dataType to json");
		equal(options.data, body, "should have set data to body value");
		$.ajax = oldAjax;
	};

	http.jsonSend({
		url: "/test/web234.html",
		body: body,
		method: "POST"
	}, jQuery.noop);

});

asyncTest("should override when not using POST or GET method", 3, function() {
	var oldAjax;

	function setup() {
		oldAjax = $.ajax;
		$.ajax = function(options) {
			var oldBeforeSend = options.beforeSend;
			options.beforeSend = function(jqXHR, settings) {
				oldBeforeSend({
					setRequestHeader: function(key, value) {
						start();
						equal(options.type, "POST", "shoud have change the method to POST");
						equal(key, "X-HTTP-Method-Override", "should have add an header X-HTTP-Method-Override");
						equal(value, override, "the value of this header should be the original method");
						jqXHR.setRequestHeader(key, value);
						tearDown();
					}
				}, settings);
			};
			oldAjax(options);
		};
	}

	function tearDown() {
		$.ajax = oldAjax;
	}
	var override;
	setup();

	override = "PUT";
	http.jsonSend({
		url: "/test/web234.html",
		method: override
	}, jQuery.noop);
});

asyncTest("should infer the correct dataType from Accept header", 1, function() {
	var oldAjax = $.ajax;
	$.ajax = function(options) {
		start();
		equal(options.dataType, "json", "should have set dataType to json");
		oldAjax(options);
		$.ajax = oldAjax;
	};

	http.send({
		url: "/test/web.html2",
		headers: {
			Accept: "application/json;vnd=test"
		}
	}, jQuery.noop);
});

asyncTest("should infer the correct dataType from Content-Type header", 1, function() {
	var oldAjax = $.ajax;
	$.ajax = function(options) {
		start();
		equal(options.dataType, "json", "should have set dataType to json");
		oldAjax(options);
		$.ajax = oldAjax;
	};

	http.send({
		url: "/test/web.html2",
		headers: {
			"Content-Type": "application/json;vnd=test"
		}
	}, jQuery.noop);
});

asyncTest("should add proxy for absolute url on different server than current", 1, function() {
	var oldAjax = $.ajax;
	var originUrl = "http://x3/test/web234.html";
	$.ajax = function(options) {
		start();
		var proxifiedUrl = "/proxy?url=" + encodeURIComponent(originUrl);
		equal(options.url, proxifiedUrl, "should proxify url");
		$.ajax = oldAjax;
	};

	http.jsonSend({
		url: originUrl,
		method: "GET"
	}, jQuery.noop);
});

asyncTest("should not add proxy for relative url", 1, function() {
	var oldAjax = $.ajax;
	var originUrl = "/test/web234.html";
	$.ajax = function(options) {
		start();
		equal(options.url, originUrl, "should preserve url");
		$.ajax = oldAjax;
	};

	http.jsonSend({
		url: originUrl,
		method: "POST"
	}, jQuery.noop);
});

asyncTest("should not add proxy for absolute url on same server", 1, function() {
	var oldAjax = $.ajax;
	var originUrl = "http://localhost:8124/test/web234.html";
	$.ajax = function(options) {
		start();
		equal(options.url, originUrl, "should preserve url");
		$.ajax = oldAjax;
	};

	http.jsonSend({
		url: originUrl,
		method: "POST"
	}, jQuery.noop);
});