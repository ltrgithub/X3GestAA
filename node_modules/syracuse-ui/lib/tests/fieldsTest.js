"use strict";
var helpers = require("syracuse-core/lib/helpers")
var TestPage = require("syracuse-ui/lib/tests/testPage").TestPage;

function FieldsTest(){
}

exports.FieldsTest = helpers.defineClass(FieldsTest, TestPage, {
    _initiliazeTestPage: function(){
        this.ensureDeltaManager().applyObjectDelta(this.$prototype.$properties, {
        
            $field$type: {
                $title: "$type",
                $isMetaData: true,
                $type: "application/x-choice",
                $value: {
                    $type: "application/x-string",
                    
                    $enum: [{
                        $value: "application/x-string",
                        $title: "application/x-string"
                    }, {
                        $value: "$email",
                        $title: "$email"
                    }, {
                        $value: "$phone",
                        $title: "$phone"
                    }, {
                        $value: "application/x-date",
                        $title: "application/x-date"
                    }, {
                        $value: "application/x-time",
                        $title: "application/x-time"
                    }, {
                        $value: "application/x-datetime",
                        $title: "application/x-datetime"
                    }, {
                        $value: "application/x-integer",
                        $title: "application/x-integer"
                    }, {
                        $value: "application/x-decimal",
                        $title: "application/x-decimal"
                    }, {
                        $value: "application/x-boolean",
                        $title: "application/x-boolean"
                    }]
                }
            },
            $field$isDiagnoses: {
                $type: "application/x-choice",
                $value: {
                    $type: "application/x-string",
                    
                    $enum: [{
                        $value: "full",
                        $title: "error, warning, info"
                    }, {
                        $value: "error",
                        $title: "default error"
                    }, {
                        $value: "clear",
                        $title: "clear"
                    }, ]
                }
            },
            $field$description: {
                $type: "application/x-boolean",
                $title: "$description",
                $isMetaData: true
            },
            $field$help: {
                $type: "application/x-boolean",
                $title: "$help",
                $isMetaData: true
            },
            $field$isReadOnly: {
                $type: "application/x-boolean",
                $title: "$isReadOnly",
                $isMetaData: true
            },
            $field$isEditMode: {
                $type: "application/x-boolean",
                $title: "$isEditMode",
                $isMetaData: true
            },
            $field$isHidden: {
                $type: "application/x-boolean",
                $title: "$isHidden",
                $isMetaData: true
            },
            $field$isDisabled: {
                $type: "application/x-boolean",
                $title: "$isDisabled",
                $isMetaData: true
            },
            $field$isMandatory: {
                $type: "application/x-boolean",
                $title: "$isMandatory",
                $isMetaData: true
            },
            $field$isTopLabelAlignment: {
                $type: "application/x-boolean",
                $title: "$isTopLabelAlignment"
            },
            $field$isTitleHidden: {
                $type: "application/x-boolean",
                $title: "$isTitleHidden"
            },
            $field$isRightTextLabelAlignment: {
                $type: "application/x-boolean",
                $title: "$isRightTextLabelAlignment"
            },
            $field$LinksTypeMetaDataOnly: {
                $type: "application/x-boolean",
                $title: "use Meta Data Only",
                $isReadOnly: true,
                $isMetaData: true
            },
            $field$LinksType: {
                $title: "$links $actions",
                $isMetaData: true,
                $type: "application/x-choice",
                $value: {
                    $type: "application/x-string",
                    
                    $enum: [{
                        $value: "$empty",
                        $title: "$links = null"
                    }, {
                        $value: "$lazyload",
                        $title: "$lazyload (transition)"
                    }, {
                        $value: "$links",
                        $title: "$links"
                    }, {
                        $value: "$actions",
                        $title: "$actions"
                    }, {
                        $value: "$linksParameters",
                        $title: "$links with Parameters"
                    }, {
                        $value: "$actionsParameters",
                        $title: "$actions with Parameters"
                    }]
                }
            }
        }, true);
        
    },
    loadBox: function(initData){
        this.$prototype.$actions.$deleteItem = {
            $title: "delete"
        };
        this.$prototype.$actions.$insertItem = {
            $title: "insert"
        };
        this.$prototype.$actions.$reorderItem = {
            $title: "reorder"
        };
        this.$prototype.$field$LinksTypeMetaDataOnly = true;
        this._defineArticle();
        initData = initData || {};
        this.$item.$menus.$isMenusBag = false;
        TestPage.prototype.loadBox.call(this, initData);
        document.site.spyGateway.setSpyedPage(this);
    },
    _defineArticle: function(){
        this.$item.$layout = {
            $layoutType: "columns",
            $layoutSubType: "70,30",
            $items: [{
                $layoutType: "stack",
                $items: this._makeBlock(true)
            }, {
                $layoutType: "stack",
                $items: this.appendSettingsBar()
            }]
        };
    },
    applyChange: function(newData){
        TestPage.prototype.applyChange.call(this, newData);
    },
    appendSettingsBar: function(){
        return [{
            $category: "block",
            $title: "Metadata",
            $layout: {
                $items: [{
                    $layoutType: "row",
                    $items: [{
                        $layoutType: "stack",
                        $items: [{
                            $bind: "$field$isHidden",
                            $isEditMode: true
                        }, {
                            $bind: "$field$isDisabled",
                            $isEditMode: true
                        }, {
                            $bind: "$field$isMandatory",
                            $isEditMode: true
                        }, {
                            $bind: "$field$isEditMode",
                            $isEditMode: true
                        }, {
                            $bind: "$field$isReadOnly",
                            $isEditMode: true
                        }]
                    }, {
                        $layoutType: "stack",
                        $items: [{
                            $bind: "$field$description",
                            $isEditMode: true
                        }, {
                            $bind: "$field$help",
                            $isEditMode: true
                        }, {
                            $bind: "$field$isTopLabelAlignment",
                            $isEditMode: true
                        }, {
                            $bind: "$field$isTitleHidden",
                            $isEditMode: true
                        }, {
                            $bind: "$field$isRightTextLabelAlignment",
                            $isEditMode: true
                        }]
                    }],
                    $fitToContent: true
                
                }, {
                    $bind: "$field$type",
                    $isEditMode: true
                }]
            }
        }, {
            $layoutType: "row",
            $fitToContent: true,
            $items: [{
                $bind: "$field$LinksTypeMetaDataOnly",
                $isEditMode: true
            }, {
                $bind: "$field$LinksType",
                $isEditMode: true
            }]
        }, {
            $category: "block",
            $title: "$diagnoses",
            $layout: {
                $items: [{
                    $bind: "$field$isDiagnoses",
                    $choiceLayout: "row",
                    $isEditMode: true
                }]
            }
        }];
    },
    setFieldDataSet: function(data){
        this.boundFields.$field$dataset[0].setDataValue(JSON.stringify(data, null, 2));
    },
    notifyDiagnoses: function(value, useMetaDataOnly){
        var self = this;
        var dataRecordSet = {
            $properties: {}
        };
        Object.keys(self.boundFields).forEach(function(bind){
            var metaData = self._fillDiagnoses(value, bind);
            if (bind.indexOf("$field") != 0) {
                var $fieldProperty = self.$prototype.$properties[bind];
                dataRecordSet.$properties[bind] = {
                    $diagnoses: metaData.$diagnoses
                };
            }
        });
        self.applyChange(dataRecordSet);
    },
    notifyActionLinkChange: function(metaData, useMetaDataOnly){
        var dataRecordSet = {
            $properties: {}
        };
        //for fields only in metadata
        Object.keys(this.boundFields).forEach(function(bind){
            if (bind.indexOf("$field") != 0) {
                dataRecordSet.$properties[bind] = {
                    $links: metaData.$links,
                    $actions: metaData.$actions
                };
            }
        });
        this.applyChange(dataRecordSet);
    },
    notifyDataChange: function(field, value){
        var self = this;
        switch (field.$item.$bind) {
            case "$field$LinksType":
                var metaData = self.getResources().getActionLinks(value);
                if (value == "$lazyload") {
                    self.notifyDataChange(field, "$empty");
                }
                self.notifyActionLinkChange(metaData, self.boundFields.$field$LinksTypeMetaDataOnly[0].getDataValue());
                break;
            case "$field$type":
                switch (value) {
                    case "$email":
                        value = {
                            $title: "$format: $email",
                            $type: "application/x-string",
                            $format: "$email"
                        
                        };
                        break;
                    case "$phone":
                        value = {
                            $title: "$format: $phone",
                            $type: "application/x-string",
                            $format: "$phone"
                        };
                        break;
                    default:
                        value = {
                            $title: value,
                            $type: value
                        };
                        break;
                }
                self.applyFieldMetaData(field.$item.$bind, value);
                break;
            case "$field$help":
                self.applyFieldMetaData(field.$item.$bind, value ? "description msdmdlsjgq" : null);
                break;
            case "$field$description":
                self.applyFieldMetaData(field.$item.$bind, value ? "description df fmsdmdlsjgq" : null);
                break;
            case "$field$isDiagnoses":
                self.notifyDiagnoses(value, self.boundFields.$field$LinksTypeMetaDataOnly[0].getDataValue());
                break;
                
            default:
                if (field.$item.$bind.indexOf("$field") == 0) {
                    switch (field.$item.$bind) {
                        case "":
                            break;
                        default:
                            self.applyFieldMetaData(field.$item.$bind, value);
                            break;
                    }
                }
                else {
                    TestPage.prototype.notifyDataChange.call(this, field, value);
                }
                break;
        }
    },
    notifyChangeToServer: function(sendBag){
        var dataRecords = sendBag.dataRecords;
        delete sendBag.dataRecords;
        document.site.spyGateway.spyNotify(sendBag);
        sendBag.dataRecords = dataRecords;
    },
    _fillDiagnoses: function(value, $bind){
        var metaData = {};
        if (value == "clear") {
            metaData.$diagnoses = null;
        }
        else {
            metaData.$diagnoses = [{
                severity: "error",
                message: "Error test  blalfoz"
            }];
            if (value == "full") {
                metaData.$diagnoses.push({
                    severity: "warning",
                    message: "Warning test"
                });
                metaData.$diagnoses.push({
                    severity: "info",
                    message: "Info test"
                });
            }
        }
        return metaData;
    },
    applyFieldMetaData: function($bind, value, $field){
        var self = this;
        $field = $field || self.$prototype.$properties[$bind];
        $bind = $bind.replace("$field", "");
        var metaData = {};
        metaData[$bind] = value;
        if ($field.$isMetaData) {
            var $properties = {};
            Object.keys(self.boundFields).forEach(function(bind){
                if (bind.indexOf("$field") != 0) {
                    $properties[bind] = metaData;
                }
            });
            self.applyChange({
                $properties: $properties
            });
        }
        else {
            Object.keys(self.boundFields).forEach(function(bind){
                if (bind.indexOf("$field") != 0) {
                    self.boundFields[bind].forEach(function(field){
                        field.applyDesignMetaData(metaData, true);
                    });
                }
            });
        }
        
    },
    _makeEditReadBlock: function($title, $items){
        return {
            $category: "block",
            $title: $title,
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "50,50",
                $items: [this._makeEditReadStack($items, true), this._makeEditReadStack($items, false)]
            }
        };
    },
    _makeEditReadStack: function($items, $isEditMode){
        return {
            $layoutType: "stack",
            $items: $items.map(function($item){
                var newItem = {
                    $isEditMode: $isEditMode
                };
                Object.keys($item).forEach(function($prop){
                    newItem[$prop] = $item[$prop];
                });
                return newItem;
            })
        };
    }
});
