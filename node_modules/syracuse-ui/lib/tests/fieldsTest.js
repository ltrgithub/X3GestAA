"use strict";
var helpers = require("syracuse-core/lib/helpers")
var DesktopPage = require("syracuse-ui/lib/article/page").DesktopPage;
var resources = require("./resources");
function FieldsTest(){
}

exports.FieldsTest = helpers.defineClass(FieldsTest, DesktopPage, {
    sendServerData: function(sendBag){
        var recordDataset = sendBag.recordDataset;
        delete sendBag.recordDataset;
        this.boundFields.$fieldServerData[0].setDataValue(JSON.stringify(sendBag));
        sendBag.recordDataset = recordDataset
    },
    loadBox: function($fieldsPrototype, initData){
        var self = this;
        self.$prototype = {
            $properties: {
                $fieldServerData: {
                    "$title": "Server",
                    "$type": "application/x-string"
                },
                $field$dataset: {
                    "$title": "dataset",
                    "$type": "application/x-string"
                },
                "$field$capabilityInsert": {
                    $type: "application/x-boolean",
                    $title: "insert",
                    $isMetaData: true
                },
                "$field$capabilityDelete": {
                    $type: "application/x-boolean",
                    $title: "delete",
                    $isMetaData: true
                },
                "$field$capabilityAppend": {
                    $type: "application/x-boolean",
                    $title: "append",
                    $isMetaData: true
                },
                "$field$capabilityReorder": {
                    $type: "application/x-boolean",
                    $title: "reorder",
                    $isMetaData: true
                },
                $field$type: {
                    $title: "$type",
                    $isMetaData: true,
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-string",
                        
                        $enum: [{
                            $value: "application/x-string",
                            $title: "application/x-string"
                        }, {
                            $value: "$email",
                            $title: "$email"
                        }, {
                            $value: "$phone",
                            $title: "$phone"
                        }, {
                            $value: "application/x-date",
                            $title: "application/x-date"
                        }, {
                            $value: "application/x-time",
                            $title: "application/x-time"
                        }, {
                            $value: "application/x-datetime",
                            $title: "application/x-datetime"
                        }, {
                            $value: "application/x-integer",
                            $title: "application/x-integer"
                        }, {
                            $value: "application/x-decimal",
                            $title: "application/x-decimal"
                        }, {
                            $value: "application/x-boolean",
                            $title: "application/x-boolean"
                        }]
                    }
                },
                $field$isDiagnoses: {
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-string",
                        
                        $enum: [{
                            $value: "full",
                            $title: "error, warning, info"
                        }, {
                            $value: "error",
                            $title: "default error"
                        }, {
                            $value: "clear",
                            $title: "clear"
                        }, ]
                    }
                },
                $field$isDiagnosesPanelHidden: {
                    $type: "application/x-boolean",
                    $title: "hide Diagnose Viewer",
                    $isMetaData: true
                },
                $field$description: {
                    $type: "application/x-boolean",
                    $title: "$description",
                    $isMetaData: true
                },
                $field$help: {
                    $type: "application/x-boolean",
                    $title: "$help",
                    $isMetaData: true
                },
                $field$isReadOnly: {
                    $type: "application/x-boolean",
                    $title: "$isReadOnly",
                    $isMetaData: true
                },
                $field$isEditMode: {
                    $type: "application/x-boolean",
                    $title: "$isEditMode",
                    $isMetaData: true
                },
                $field$isHidden: {
                    $type: "application/x-boolean",
                    $title: "$isHidden",
                    $isMetaData: true
                },
                $field$isDisabled: {
                    $type: "application/x-boolean",
                    $title: "$isDisabled",
                    $isMetaData: true
                },
                $field$isMandatory: {
                    $type: "application/x-boolean",
                    $title: "$isMandatory",
                    $isMetaData: true
                },
                $field$isTopLabelAlignment: {
                    $type: "application/x-boolean",
                    $title: "$isTopLabelAlignment"
                },
                $field$isTitleHidden: {
                    $type: "application/x-boolean",
                    $title: "$isTitleHidden"
                },
                $field$isRightTextLabelAlignment: {
                    $type: "application/x-boolean",
                    $title: "$isRightTextLabelAlignment"
                },
                $field$LinksTypeMetaDataOnly: {
                    $type: "application/x-boolean",
                    $title: "use Meta Data Only",
                    $isReadOnly: true,
                    $isMetaData: true
                },
                $field$LinksType: {
                    $title: "$links $actions",
                    $isMetaData: true,
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-string",
                        
                        $enum: [{
                            $value: "$empty",
                            $title: "$links = null"
                        }, {
                            $value: "$lazyload",
                            $title: "$lazyload (transition)"
                        }, {
                            $value: "$links",
                            $title: "$links"
                        }, {
                            $value: "$actions",
                            $title: "$actions"
                        }, {
                            $value: "$linksParameters",
                            $title: "$links with Parameters"
                        }, {
                            $value: "$actionsParameters",
                            $title: "$actions with Parameters"
                        }]
                    }
                }
            
            },
            $actions: {
                $deleteItem: {
                    $title: "delete first item"
                },
                $insertItem: {
                    $title: "insert second item"
                },
                $reorderItem: {
                    $title: "reorder"
                }
            },
            $field$LinksTypeMetaDataOnly: true,
            "$field$isDiagnosesPanelHidden": true
        };
        Object.keys($fieldsPrototype).forEach(function($prop){
            if ($prop == "$" || $prop == "$properties" || $prop == "$actions") {
                self.$prototype[$prop] = self.$prototype[$prop] || {};
                Object.keys($fieldsPrototype[$prop]).forEach(function($prop2){
                    self.$prototype[$prop][$prop2] = $fieldsPrototype[$prop][$prop2];
                });
            }
            else {
                self.$prototype[$prop] = $fieldsPrototype[$prop];
            }
            
        });
        self.$item = {
            $layout: {
                $items: [{
                    $layoutType: "columns",
                    $layoutSubType: "50,50",
                    $items: [{
                        $layoutType: "stack",
                        $items: [{
                            $bind: "$fieldServerData",
                            $isEditMode: true,
                            $rows: 2
                        }]
                    }, {
                        $layoutType: "stack",
                        $items: [{
                            $bind: "$field$dataset",
                            $isEditMode: true,
                            $rows: 2
                        }]
                    
                    }]
                }, {
                    $layoutType: "columns",
                    $layoutSubType: "70,30",
                    $items: [{
                        $layoutType: "stack",
                        $items: self._makeBlock(true)
                    }, {
                        $layoutType: "stack",
                        $items: self.appendSettingsBar()
                    }]
                }]
            }
        };
        initData = initData || {};
        initData.$field$capabilityInsert = true;
        initData.$field$capabilityDelete = true;
        initData.$field$capabilityAppend = true;
        initData.$field$capabilityReorder = true;
        self.$autoFetch = false;
        self.$pageCategory = "vignette";
        DesktopPage.prototype.loadBox.call(self, initData);
    },
    applyChange: function(newData){
        this.setFieldDataSet(newData);
        DesktopPage.prototype.applyChange.call(this, newData);
    },
    appendSettingsBar: function(){
        return [{
            $category: "block",
            $id: "$capabilities",
            $title: "$capabilities",
            $isHidden: true,
            $layout: {
                $layoutType: "side",
                $items: [{
                    $bind: "$field$capabilityInsert",
                    $isEditMode: true
                }, {
                    $bind: "$field$capabilityDelete",
                    $isEditMode: true
                }, {
                    $bind: "$field$capabilityAppend",
                    $isEditMode: true
                }, {
                    $bind: "$field$capabilityReorder",
                    $isEditMode: true
                }]
            }
        }, {
            $category: "block",
            $title: "Metadata",
            $layout: {
                $items: [{
                    $layoutType: "side",
                    $items: [{
                        $bind: "$field$description",
                        $isEditMode: true
                    }, {
                        $bind: "$field$isHidden",
                        $isEditMode: true
                    }, {
                        $bind: "$field$isDisabled",
                        $isEditMode: true
                    }, {
                        $bind: "$field$isMandatory",
                        $isEditMode: true
                    }, {
                        $bind: "$field$help",
                        $isEditMode: true
                    }, {
                        $bind: "$field$isEditMode",
                        $isEditMode: true
                    }, {
                        $bind: "$field$isReadOnly",
                        $isEditMode: true
                    }]
                }, {
                    $bind: "$field$type",
                    $isEditMode: true
                }]
            }
        }, {
            $layoutType: "side",
            $items: [{
                $bind: "$field$LinksTypeMetaDataOnly",
                $isEditMode: true
            }, {
                $bind: "$field$LinksType",
                $isEditMode: true
            }]
        }, {
            $category: "block",
            $title: "Design Propeties",
            $layout: {
                "$layoutType": "side",
                $items: [{
                    $bind: "$field$isTopLabelAlignment",
                    $isEditMode: true
                }, {
                    $bind: "$field$isTitleHidden",
                    $isEditMode: true
                }, {
                    $bind: "$field$isRightTextLabelAlignment",
                    $isEditMode: true
                }]
            }
        }, {
            $category: "block",
            $title: "$diagnoses",
            $layout: {
                $items: [{
                    $bind: "$field$isDiagnoses",
                    $choiceLayout: "row",
                    $isEditMode: true
                }, {
                    $bind: "$field$isDiagnosesPanelHidden",
                    $isEditMode: true
                }]
            }
        }];
    },
    _showCapablities: function(){
        this.idMap["$capabilities"].applyDesignMetaData({
            $isHidden: false
        });
    },
    getResources: function(){
        return resources;
    },
    isDiagnosesPanelHidden: function(){
        return this.boundFields["$field$isDiagnosesPanelHidden"][0].getDataValue();
    },
    setFieldDataSet: function(data){
        this.boundFields.$field$dataset[0].setDataValue(JSON.stringify(data));
    },
    notifyDiagnoses: function(value, useMetaDataOnly){
        var self = this;
        var dataRecordSet = {
            $properties: {}
        };
        Object.keys(self.boundFields).forEach(function(bind){
            var metaData = self._fillDiagnoses(value, bind);
            if (bind.indexOf("$field") != 0) {
                var $fieldProperty = self.$prototype.$properties[bind];
                dataRecordSet.$properties[bind] = {
                    $diagnoses: metaData.$diagnoses
                };
            }
        });
        self.applyChange(dataRecordSet);
    },
    notifyActionLinkChange: function(metaData, useMetaDataOnly){
        var dataRecordSet = {
            $properties: {}
        };
        //for fields only in metadata
        Object.keys(this.boundFields).forEach(function(bind){
            if (bind.indexOf("$field") != 0) {
                dataRecordSet.$properties[bind] = {
                    $links: metaData.$links,
                    $actions: metaData.$actions
                };
            }
        });
        this.applyChange(dataRecordSet);
    },
    notifyChange: function($bind, value){
        var self = this;
        switch ($bind) {
            case "$field$LinksType":
                var metaData = self.getResources().getActionLinks(value);
                if (value == "$lazyload") {
                    self.notifyChange($bind, "$empty");
                }
                self.notifyActionLinkChange(metaData, self.boundFields.$field$LinksTypeMetaDataOnly[0].getDataValue());
                break;
            case "$field$type":
                switch (value) {
                    case "$email":
                        value = {
                            $title: "$format: $email",
                            $type: "application/x-string",
                            $format: "$email"
                        
                        };
                        break;
                    case "$phone":
                        value = {
                            $title: "$format: $phone",
                            $type: "application/x-string",
                            $format: "$phone"
                        };
                        break;
                    default:
                        value = {
                            $title: value,
                            $type: value
                        };
                        break;
                }
                self.applyFieldMetaData($bind, value);
                break;
            case "$field$help":
                self.applyFieldMetaData($bind, value ? "description msdmdlsjgq" : null);
                break;
            case "$field$description":
                self.applyFieldMetaData($bind, value ? "description df fmsdmdlsjgq" : null);
                break;
            case "$field$isDiagnoses":
                if (self.isDiagnosesPanelHidden()) {
                    document.site._diagnosesPanel.disableViewer = true;
                }
                self.notifyDiagnoses(value, self.boundFields.$field$LinksTypeMetaDataOnly[0].getDataValue());
                document.site._diagnosesPanel.disableViewer = false;
                break;
                
            default:
                if ($bind.indexOf("$field") == 0) {
                    if ($bind.indexOf("$field$capability") >= 0) {
                        var $capabilities = "";
                        ["$field$capabilityInsert", "$field$capabilityDelete", "$field$capabilityAppend", "$field$capabilityReorder"].forEach(function($capability){
                            if (self.boundFields[$capability][0].getDataValue()) {
                                $capabilities += $capability.replace("$field$capability", "").toLowerCase() + ",";
                            }
                        });
                        if ($capabilities.length > 0) {
                            $capabilities = $capabilities.slice(0, $capabilities.length - 1);
                        }
                        self.applyFieldMetaData("$capabilities", $capabilities, self.get$Properties()[$bind])
                    }
                    else {
                        switch ($bind) {
                            case "":
                                break;
                            default:
                                self.applyFieldMetaData($bind, value);
                                break;
                        }
                        
                    }
                }
                else {
                    var sendBag = self.ensureSendBag();
                    if (self.dataset && self.dataset.$uuid) {
                        sendBag.$uuid = self.dataset.$uuid;
                    }
                    sendBag[$bind] = value;
                    sendBag.$etag = sendBag.$etag || 1;
                    self.sendServerData(sendBag);
                }
                break;
        }
    },
    _fillDiagnoses: function(value, $bind){
        var metaData = {};
        if (value == "clear") {
            metaData.$diagnoses = null;
        }
        else {
            metaData.$diagnoses = [{
                severity: "error",
                message: "Error test  blalfozf f;zeapfazfg Errror testfin"
            }];
            if (value == "full") {
                metaData.$diagnoses.push({
                    severity: "warning",
                    message: "Warning test  blalfozf f;zeapfazfg  Warning testfin"
                });
                metaData.$diagnoses.push({
                    severity: "info",
                    message: "Info test  blalfozf f;zeapfazfg Info testfin"
                });
            }
        }
        return metaData;
    },
    applyFieldMetaData: function($bind, value, $field){
        var self = this;
        $field = $field || self.get$Properties()[$bind];
        $bind = $bind.replace("$field", "");
        var metaData = {};
        metaData[$bind] = value;
        if ($field.$isMetaData) {
            var $properties = {};
            Object.keys(self.boundFields).forEach(function(bind){
                if (bind.indexOf("$field") != 0) {
                    $properties[bind] = metaData;
                }
            });
            self.applyChange({
                $properties: $properties
            });
        }
        else {
            Object.keys(self.boundFields).forEach(function(bind){
                if (bind.indexOf("$field") != 0) {
                    self.boundFields[bind].forEach(function(field){
                        field.applyDesignMetaData(metaData, true);
                    });
                }
            });
        }
        
    },
    _makeEditReadBlock: function($title, $items){
        return {
            $category: "block",
            $title: $title,
            $layout: {
                $layoutType: "columns",
                $layoutSubType: "50,50",
                $items: [this._makeEditReadStack($items, true), this._makeEditReadStack($items, false)]
            }
        };
    },
    _makeEditReadStack: function($items, $isEditMode){
        return {
            $layoutType: "stack",
            $items: $items.map(function($item){
                var newItem = {
                    $isEditMode: $isEditMode
                };
                Object.keys($item).forEach(function($prop){
                    newItem[$prop] = $item[$prop];
                });
                return newItem;
            })
        };
    }
});
