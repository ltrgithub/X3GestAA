"use strict";
var helpers = require("syracuse-core/lib/helpers");
var _partialDeltaTests = require("syracuse-ui/lib/tests/array/delta/partialDeltaTests");
var _deltaTests = require("syracuse-ui/lib/tests/array/delta/deltaTests");
var utility = require("syracuse-ui/lib/tests/array/utility");

exports.grid = {
	load: function(page) {
		_setArrayTest(page);
		page.loadNewItem(page.leftCol, {
			$isEditMode: true,
			$bind: "xarray"
		});
		page.loadNewItem(page.leftCol, {
			$isEditMode: false,
			$bind: "xarray"
		});
		page.loadNewItem(page.leftCol, {
			$isEditMode: false,
			$bind: "xarray",
			$format: "cards",
			$cardsByRowCount: 2
		});

	}
};

exports.gridcards = {
	load: function(page) {
		_setArrayTest(page);
		var $positions = ["left", "right", "row", "top", "bottom", "popup"];
		for (var ii = 0, jj = $positions.length; ii < jj; ii++) {
			var $item = {
				$bind: "xarray",
				$title: "$position=" + $positions[ii],
				$format: "grid"
			};
			var $cardItem = {
				$layout: {
					$items: [{
						$layoutType: "row",
						$items: [{
							$bind: "xstring"
						}, {
							$bind: "xchoice"
						}]
					}, {
						$layoutType: "row",
						$items: [{
							$bind: "xdate"
						}, {
							$layoutType: "stack",
							$items: [{
								$bind: "xboolean"
							}, {
								$bind: "xdecimal"
							}]
						}]
					}]
				}
			};
			if ($positions[ii] == "popup") {
				$item.$popupCard = $cardItem;
			} else {
				$cardItem.$position = $positions[ii];
				$item.$cardItem = $cardItem;
			}
			page.loadNewItem(page.leftCol, $item);
		}

	}
};

exports.selection = {
	load: function(page) {
		_setArrayTest(page);
		["multi", "single", "button", "row"].forEach(function($selectMode) {
			page.loadNewItem(page.leftCol, {
				$title: "$selectMode = " + $selectMode,
				$format: "grid",
				$bind: "xarray",
				$selectMode: $selectMode
			});
		});
		["multi", "single", "button", "row"].forEach(function($selectMode) {
			page.loadNewItem(page.leftCol, {
				$title: "$selectMode = " + $selectMode,
				$format: "cards",
				$bind: "xarray",
				$selectMode: $selectMode,
				$layout: {
					$items: [{
						$category: "section",
						$layout: {
							$items: [{
								$bind: "xstring"
							}, {
								$bind: "xchoice"
							}]
						}
					}]
				}
			});
		});
		["multi", "single"].forEach(function($selectMode) {
			page.loadNewItem(page.leftCol, {
				$title: "$selectByRowIndex $selectMode = " + $selectMode,
				$format: "grid",
				$bind: "xarray",
				$selectMode: $selectMode,
				$selectByRowIndex: true
			});
			page.loadNewItem(page.leftCol, {
				$title: "$selectByRowIndex $useContiguousSelection $selectMode = " + $selectMode,
				$format: "grid",
				$bind: "xarray",
				$selectMode: $selectMode,
				$selectByRowIndex: true,
				$useContiguousSelection: true,
			});
		});
	}
};
exports.graph = {
	load: function(page) {
		_setArrayTest(page);
		page.$prototype.$properties.xarray = {
			$type: "application/x-array",
			$axes: [{
				$title: "Articles vendus",
				$hierarchies: [
					["article_h"]
				]
			}, {
				$title: "measures",
				$hierarchies: [
					["$measures"]
				]
			}],
			$cube: {
				$mode: "table",
				$style: "xy",
				$displaysOneMeasure: false,
				$title: "Coûts articles",
				$hierarchies: {
					"article_h": {
						$title: "Articles",
						"$properties": ["ARTICLE"],
						"$members": [],
						"$isDefault": true
					}
				},
				$measures: {
					"matiere_premiere": {
						$property: "matiere_premiere",
						$title: "Matière premiere",
						$mode: "sum",
						"$style": "line",
						"$isStacked": false,
						"$isNormalized": false,
						"$isDefault": true
					},
					"main_oeuvre": {
						$property: "main_oeuvre",
						$title: "Main d'oeuvre",
						$mode: "sum",
						$style: "stick",
						$isStacked: false,
						$isNormalized: false
					},
					"cout_machine": {
						$property: "cout_machine",
						$title: "Cout machine",
						$mode: "sum",
						$style: "spline",
						$isStacked: false,
						$isNormalized: false
					}
				}
			},
			$item: {
				$properties: {
					"ARTICLE": {
						$title: "Intitulé article",
						$type: "application/x-string"
					},
					"code": {
						$title: "Code article",
						$type: "application/x-string"
					},
					"matiere_premiere": {
						$title: "Matiere première",
						$type: "application/x-decimal"
					},
					"main_oeuvre": {
						$title: "Main d'oeuvre",
						$type: "application/x-decimal"
					},
					"cout_machine": {
						$title: "Coût machine",
						$type: "application/x-decimal"
					}
				},
				$links: {
					"$details": {
						$title: "Details",
						"$url": "{$baseUrl}/article('{$key}')"
					},
					"$edit": {
						$title: "Edit",
						"$url": "{$url}/$workingCopies",
						"$method": "POST"
					},
					"$delete": {
						$title: "Delete",
						"$url": "{$url}",
						$type: null,
						"$method": "DELETE"
					}
				}
			}
		};
		page.loadNewItem(page.leftCol, {
			$title: "bottom",
			$graphPosition: "bottom",
			$bind: "xarray",
			$renderer: "highCharts",
			$cube: {
				$measures: {
					matiere_premiere: {
						$style: "pie"
					},
					main_oeuvre: {
						$style: "areaspline"
					},
					cout_machine: {
						$style: "bar"
					}
				}
			}
		});
		page.loadNewItem(page.leftCol, {
			$title: "behind",
			$bind: "xarray",
			$renderer: "highCharts",
			$graphPosition: "behind"
		});
		page.loadNewItem(page.leftCol, {
			$title: "front",
			$bind: "xarray",
			$renderer: "highCharts",
			$graphPosition: "front"
		});
		page.loadNewItem(page.leftCol, {
			$title: "left",
			$graphPosition: "left",
			$bind: "xarray",
			$renderer: "highCharts",
			$cube: {
				$measures: {
					matiere_premiere: {
						$style: "column"
					},
					main_oeuvre: {
						$style: "line"
					},
					cout_machine: {
						$style: "scatter"
					}
				}
			}
		});
		page.loadNewItem(page.leftCol, {
			$title: "right",
			$graphPosition: "right",
			$bind: "xarray",
			$renderer: "highCharts",
			$cube: {
				$measures: {
					matiere_premiere: {
						$style: "column"
					},
					main_oeuvre: {
						$style: "line"
					},
					cout_machine: {
						$style: "scatter"
					}
				}
			}
		});
	},
	refreshList: function(page) {
		var records = page.getResources().getCube();
		page.applyChange({
			$properties: {
				"xarray": {
					$totalResults: records.length
				}
			},
			xarray: records
		});
	}
};


function _fillCol(section, $col) {
	var col = document.createElement("div");
	col.className = "s-test-menus-col";
	for (var ii = 0, jj = $col.length; ii < jj; ii++) {
		var $block = $col[ii];
		var block = document.createElement("div");
		block.className = "s-test-menus";
		var header = document.createElement("div");
		header.textContent = $block.$title || "";
		header.className = "s-test-menus-title";
		block.appendChild(header);
		for (var mm = 0, kk = $block.$items.length; mm < kk; mm++) {
			var $item = $block.$items[mm];
			var menu = syra_menus.addTextButton($item.$title || "", "s-uitest-mn", "onTestMenuClick");
			menu.syraItem = section.page.id;
			menu.syraTestMenusIndex = section.page.testMenus.length;
			section.page.testMenus.push($item);
			block.appendChild(menu);
		}
		col.appendChild(block);
	}
	return col;
}

function _fillBox(section, $content) {
	var body = section.layoutContent.domItem;
	body.appendChild(_fillCol(section, $content.col1));
	body.appendChild(_fillCol(section, $content.col2));
}


function _setArrayTest(page) {
	page.onTestMenuClick = function(event, btn) {
		var $menu = this.testMenus[btn.syraTestMenusIndex];
		var delta = helpers.object.clone($menu.delta, true);
		this.$isEditMode = false; //allow erase of all list ( data + metadata on record)
		//  this.refreshList();
		this.$isEditMode = true;
		if (delta.$isPartialDelta) {
			this.isFusionPage = true;
		}
		switch ($menu.$clientId) {
			case "reorder":
				if (delta.$isPartialDelta) {
					var count = this.dataset.xarray.length - 1;
					delta.xarray = this.dataset.xarray.map(function(record, index) {
						return {
							$uuid: record.$uuid,
							$index: count - index
						};
					}).reverse();
				} else {
					delta.xarray = this.dataset.xarray.map(function(record) {
						return {
							$uuid: record.$uuid
						};
					}).reverse();
				}
				break;
			case "deleteDefault":
				delta.xarray = this.dataset.xarray.filter(function(record) {
					return (record.$uuid != "record3") && (record.$uuid != "record6") && (record.$uuid != "record7");
				});
				break;
		}
		this.setJsonValue(delta);
		this.applyChange(delta, true);
		delete this.isFusionPage;
	};
	page.onFocusXStringClick = function() {
		var xarrays = this.boundFields.xarray;
		for (var ii = 0, jj = xarrays.length; ii < jj; ii++) {
			var xarray = xarrays[ii];
			xarray.records[1].boundFields.xstring[0].focus();
			break;
		}
	};
	page.onRefreshClick = function() {
		this.refreshList();
	};
	page.refreshList = function() {
		if (this.testCase.refreshList) {
			this.testCase.refreshList(this);
		} else {
			var $fieldRecordCount = this.boundFields.$fieldRecordCount[0].getDataValue();
			var records = this.getResources().getRecords($fieldRecordCount);
			records.forEach(function(record) {
				delete record.$index;
			});

			this.applyChange({
				$properties: {
					"xarray": {
						$isReadOnly: false,
						$isDisabled: false,
						$totalResults: records.length
					}
				},
				"xarray": records
			});
		}
	};
	page.notifyDataChangeHandlers.push(function(field, value) {
		var notify = true;
		switch (field.$item.$bind) {
			case "$fieldRecordCount":
				field.page.refreshList();
				notify = false;
				break;
			default:
				if (field.$item.$bind.indexOf("$field$capability") >= 0) {
					field.page.applyChange({
						$properties: {
							xarray: utility.applyCapabilityChange(field.page, field.$item.$bind)
						}
					});
					notify = false;
				}
				break;
		}
	});
	page.onFetchHandler = function(options) {
		if (options && options.params) {
			delete options.field;
			this.notifyChangeToServer(options);
		}
	};

	var $props = page.$prototype.$properties;
	$props.$fieldRecordCount = {
		$title: "Records",
		$type: "application/x-integer"
	};
	$props.xarray = {
		$title: "xarray",
		"$capabilities": "sort,filter,insert,append,delete,search,reorder",
		$type: "application/x-array",
		"$itemsPerPage": 200,
		"$item": {
			"$descriptor": "prototype employee.$edit",
			$type: "application/json",
			"$pluralType": "children",
			"$representation": "employee",
			"$properties": {
				"xstring": {
					$title: "xstring",
					$type: "application/x-string",

					"$maxLength": 30,
					"$capabilities": "sort,filter"
				},
				"xchoice": {
					$title: "xchoice",
					$type: "application/x-choice",
					$value: {
						$type: "application/x-integer",
						$enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value) {
							return {
								"$value": value,
								$title: "Value " + value
							};
						})
					}
				},
				"xdate": {
					$title: "xdate",
					$type: "application/x-date",
					"$capabilities": "sort,filter"
				},
				"xboolean": {
					$title: "xboolean",
					$type: "application/x-boolean",
					"$capabilities": "sort,filter"
				},
				"xdecimal": {
					$title: "xdecimal",
					$type: "application/x-decimal",
					"$capabilities": "sort,filter",

					"$isNullable": true
				},
				"xreference": {
					$title: "xreference",
					$capabilities: "sort,filter",
					$type: "application/x-reference",
					"$item": {
						$value: "{code}",
						$key: "{$uuid}",
						"$properties": {
							"code": {
								$type: "application/x-string"
							},
							"description": {
								$type: "application/x-string"
							}
						},
						$links: {
							"$details": {
								$type: "application/json;vnd.sage=syracuse",
								"$url": "/sdata/syracuse/collaboration/syracuse/users('{$uuid}')?representation=country.$details&role={$role}"
							},
							"$lookup": {
								$type: "application/json;vnd.sage=syracuse",
								"$url": "/sdata/syracuse/collaboration/syracuse/users?representation=country.$lookup&role={$role}&trackingId={$trackingId}&binding=country"
							}
						}
					}
				}
			},
			$links: {},
			$actions: {}
		},
		$actions: {}
	};


	page.rightCol.appendChild(syra_menus.addTextButton("Refresh list", "s-uitest-mn", "onRefreshClick"));
	page.rightCol.appendChild(syra_menus.addTextButton("Set focus Xtring Row2", "s-uitest-mn", "onFocusXStringClick"));
	page.loadNewItem(page.rightCol, {
		$bind: "$fieldRecordCount",
		$isEditMode: true
	});
	page.loadNewItem(page.rightCol, {
		"$layoutType": "tabs",
		$items: [{
			$category: "section",
			$title: "isDeltaMode",
			$isEmptyVisible: true,
			"$clientId": "$defaultDeltaModeLinks",
			$layout: {
				$items: []
			}
		}, {
			$category: "section",
			$title: "isPartialDelta",
			$isEmptyVisible: true,
			"$clientId": "$partialDeltaLinks",
			$layout: {
				$items: []
			}
		}]
	});
	page.testMenus = [];
	_fillBox(syra_store.get("$partialDeltaLinks"), _partialDeltaTests);
	var defaultTab = syra_store.get("$defaultDeltaModeLinks");
	_fillBox(defaultTab, _deltaTests);


	page.addJsonField(page.rightCol);
	defaultTab.tabTitle.click();
	page.applyChange({
		$fieldRecordCount: 10
	});
	page.refreshList();
	page.page.dataset.$etag = 1;


};