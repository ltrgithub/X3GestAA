"use strict";
var helpers = require("syracuse-core/lib/helpers");
var FieldsTest = require("syracuse-ui/lib/tests/fieldsTest").FieldsTest;
var convergenceStyle = require("syracuse-ui/lib/tests/array/convergenceStyle");
var partialDeltaTests = require("syracuse-ui/lib/tests/array/delta/partialDeltaTests");
var deltaTests = require("syracuse-ui/lib/tests/array/delta/deltaTests");
var multiSettings = require("./multiSettings");
var utility = require("syracuse-ui/lib/tests/array/utility");

function MultiArrayTest(){
}

exports.MultiArrayTest = helpers.defineClass(MultiArrayTest, FieldsTest, {
    fillDeltaMenuGroup: function($layout){
        for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
            var $item = $layout.$items[ii];
            if ($item.$id == "$defaultDeltaModeLinks") {
                $item.$category = "menus";
                $item.$layout = deltaTests.$menus.$layout;
            }
            else {
                if ($item.$id == "$partialDeltaLinks") {
                    $item.$category = "menus";
                    $item.$layout = partialDeltaTests.$menus.$layout;
                }
                else {
                    if ($item.$layout) {
                        this.fillDeltaMenuGroup($item.$layout);
                    }
                    if ($item.$layoutType) {
                        this.fillDeltaMenuGroup($item);
                    }
                }
            }
        }
    },
    _defineArticle: function($item){
        var bar = multiSettings.settingBar;
        this.fillDeltaMenuGroup(multiSettings.settingBar);
        this.$item.$layout = {
            $layoutType: "row",
            $widths: "60,40",
            $items: [$item, multiSettings.settingBar]
        };
    },
    onFetchHandler: function(options){
        if (options && options.params) {
            delete options.field;
            this.notifyChangeToServer(options);
        }
    },
    notifyActionChange: function(target, value){
        if (value.$empty || value.$refresh) {
            if (value.$empty) {
                this.refreshList([]);
            }
            if (value.$refresh) {
                this.refreshList();
            }
            return;
        }
        else {
            var action = this.$prototype.$actions[Object.keys(value)[0]];
            if (action) {
                this.applyEdit(action.$bind.replace("partial", ""), action.delta);
                return;
            }
        }
        FieldsTest.prototype.notifyActionChange.call(this, target, value);
    },
    notifyDataChange: function(field, value){
        var notify = true;
        switch (field.$item.$bind) {
            case "$field$fixedBodyHeight":
                var numValue = parseInt(value || 0, 10);
                if (numValue) {
                    var min = Math.max(35, numValue) + "";
                    if (min != value) {
                        field.setDataValue(min);
                        value = min;
                    }
                }
                break;
            case "$fieldRecordCount":
                this.refreshList();
                notify = false;
                break;
            default:
                if (field.$item.$bind.indexOf("$field$capability") >= 0) {
                    this.applyChange({
                        $properties: {
                            xarray: utility.applyCapabilityChange(this, field.$item.$bind)
                        }
                    });
                    notify = false;
                }
                break;
        }
        if (notify) {
            FieldsTest.prototype.notifyDataChange.call(this, field, value);
        }
    },
    applyEdit: function($actionId, delta){
        //insert one Record
        var self = this;
        delta = helpers.object.clone(delta, true);
        self.$isEditMode = false; //allow erase of all list ( data + metadata on record)
        //  self.refreshList();
        self.$isEditMode = true;
        if (delta.$isPartialDelta) {
            self.$isFusionPage = true;
        }
        switch ($actionId) {
            case "reorder":
                if (delta.$isPartialDelta) {
                    var count = self.dataset.xarray.length - 1;
                    delta.xarray = self.dataset.xarray.map(function(record, index){
                        return {
                            $uuid: record.$uuid,
                            $index: count - index
                        };
                    }).reverse();
                }
                else {
                    delta.xarray = self.dataset.xarray.map(function(record){
                        return {
                            $uuid: record.$uuid
                        };
                    }).reverse();
                }
                break;
            case "deleteDefault":
                delta.xarray = self.dataset.xarray.filter(function(record){
                    return (record.$uuid != "record3") && (record.$uuid != "record6") && (record.$uuid != "record7");
                });
                break;
        }
        //self.boundFields.$fieldJsonDelta[0].setDataValue(JSON.stringify(delta, null, 2));
        self.applyChange({
            $fieldJsonDelta: JSON.stringify(delta, null, 2)
        });
        self.applyChange(delta, true);
        delete self.$isFusionPage;
    },
    _initiliazeTestPage: function(){
        FieldsTest.prototype._initiliazeTestPage.call(this);
        this.ensureDeltaManager().applyObjectDelta(this.$prototype, this._makeArrayPrototype(), true);
    },
    loadBox: function(){
        var self = this;
        FieldsTest.prototype.loadBox.call(self, {
            $fieldRecordCount: 5,
            $field$fixedBodyHeight: 0,
            $field$fitContainer: false
        });
        //find first DeskttopKlist
        self.boundFields["xarray"].some(function(item){
            if (item.builder) {
                self.designedField = item;
            }
            return self.designedField != null;
        });
        self.refreshList();
        
        self.page.dataset.$etag = 1;
    },
    _makeArrayPrototype: function(){
        var $actions = {};
        Object.keys(deltaTests.$actions).forEach(function($key){
            $actions[$key] = deltaTests.$actions[$key];
        });
        Object.keys(partialDeltaTests.$actions).forEach(function($key){
            $actions[$key] = partialDeltaTests.$actions[$key];
        });
        $actions.$empty = {
            "$title": "Empty list",
            "$method": "PUT"
        };
        $actions.$refresh = {
            "$title": "Refresh list",
            "$method": "PUT"
        };
        return {
            "$properties": {
                $fieldJsonDelta: {
                    "$title": "delta",
                    "$type": "application/x-string"
                },
                $fieldRecordCount: {
                    $title: "Records",
                    "$type": "application/x-integer"
                },
                $field$fitContainer: {
                    $title: "$fitContainer",
                    "$type": "application/x-boolean"
                },
                $field$fixedBodyHeight: {
                    $title: "$fixedBodyHeight",
                    "$type": "application/x-integer"
                },
                "xarray": {
                    "$title": "xarray",
                    "$capabilities": "sort,filter,insert,append,delete",
                    "$type": "application/x-array",
                    "$itemsPerPage": 5,
                    "$item": {
                        "$descriptor": "prototype employee.$edit",
                        "$type": "application/json",
                        "$pluralType": "children",
                        "$representation": "employee",
                        "$properties": {
                            "xstring": {
                                "$title": "xstring",
                                "$type": "application/x-string",
                                
                                "$maxLength": 30,
                                "$capabilities": "sort,filter,alphaTab"
                            },
                            "xchoice": {
                                $title: "xchoice",
                                $type: "application/x-choice",
                                $value: {
                                    $type: "application/x-integer",
                                    $enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value){
                                        return {
                                            "$value": value,
                                            $title: "Value " + value
                                        };
                                    })
                                }
                            },
                            "xdate": {
                                $title: "xdate",
                                $type: "application/x-date",
                                "$capabilities": "sort,filter,alphaTab"
                            },
                            "xboolean": {
                                $title: "xboolean",
                                $type: "application/x-boolean",
                                "$capabilities": "sort,filter"
                            },
                            "xdecimal": {
                                $title: "xdecimal",
                                $type: "application/x-decimal",
                                "$capabilities": "sort,filter",
                                
                                "$isNullable": true
                            },
                            "xreference": {
                                $title: "xreference",
                                $capabilities: "sort,filter",
                                $type: "application/x-reference",
                                "$item": {
                                    $value: "{code}",
                                    $key: "{$uuid}",
                                    "$properties": {
                                        "code": {
                                            "$type": "application/x-string"
                                        },
                                        "description": {
                                            "$type": "application/x-string"
                                        }
                                    },
                                    $links: {
                                        "$details": {
                                            "$type": "application/json;vnd.sage=syracuse",
                                            "$url": "/sdata/sprint1/settings/sprint1/countries('{$uuid}')?representation=country.$details&role={$role}"
                                        },
                                        "$lookup": {
                                            "$type": "application/json;vnd.sage=syracuse",
                                            "$url": "/sdata/sprint1/settings/sprint1/countries?representation=country.$lookup&role={$role}&trackingId={$trackingId}&binding=country"
                                        }
                                    }
                                }
                            }
                        },
                        "$links": {},
                        "$actions": {}
                    },
                    "$actions": {}
                }
            },
            "$actions": $actions
        };
    },
    getDefaultRecords: function(){
        var $fieldRecordCount = this.boundFields.$fieldRecordCount[0].getDataValue();
        var records = this.getResources().getRecords($fieldRecordCount);
        records.forEach(function(record){
            delete record.$index;
        });
        //this.boundFields.$field$dataset[0].setDataValue(JSON.stringify(records, null, 2));
        return records;
    },
    refreshList: function(records){
        if (records === undefined) {
            records = this.getDefaultRecords();
        }
        this.applyChange({
            $properties: {
                "xarray": {
                    $isReadOnly: false,
                    $isDisabled: false,
                    $totalResults: records.length
                }
            },
            "xarray": records
        });
    }
});
