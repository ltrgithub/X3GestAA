"use strict";
var helpers = require("syracuse-core/lib/helpers");
var FieldsTest = require("syracuse-ui/lib/tests/fields/fieldsTest").FieldsTest;
var convergenceStyle = require("syracuse-ui/lib/tests/array/convergenceStyle");
var _partialDeltaTests = require("syracuse-ui/lib/tests/array/delta/partialDeltaTests");
var _deltaTests = require("syracuse-ui/lib/tests/array/delta/deltaTests");
var multiSettings = require("./multiSettings");
var utility = require("syracuse-ui/lib/tests/array/utility");


function _fillCol(section, $col) {
	var col = document.createElement("div");
	col.className = "s-test-menus-col";
	for (var ii = 0, jj = $col.length; ii < jj; ii++) {
		var $block = $col[ii];
		var block = document.createElement("div");
		block.className = "s-test-menus";
		var header = document.createElement("div");
		header.textContent = $block.$title || "";
		header.className = "s-test-menus-title";
		block.appendChild(header);
		for (var mm = 0, kk = $block.$items.length; mm < kk; mm++) {
			var $item = $block.$items[mm];
			var menu = syra_menus.addTextButton($item.$title || "", "s-mn-extra-link", "onTestMenuClick");
			menu.syraItem = section.page.id;
			menu.syraTestMenusIndex = section.page.testMenus.length;
			section.page.testMenus.push($item);
			block.appendChild(menu);
		}
		col.appendChild(block);
	}
	return col;
}

function _fillBox(section, $content) {
	var body = section.layoutContent.domItem;
	body.appendChild(_fillCol(section, $content.col1));
	body.appendChild(_fillCol(section, $content.col2));
}


function MultiArrayTest() {}

exports.MultiArrayTest = helpers.defineClass(MultiArrayTest, FieldsTest, {
	loadBox: function() {
		FieldsTest.prototype.loadBox.call(this, {
			$fieldRecordCount: 20
		});
		this.testMenus = [];
		_fillBox(syra_store.get("$partialDeltaLinks"), _partialDeltaTests);
		_fillBox(syra_store.get("$defaultDeltaModeLinks"), _deltaTests);
		this.refreshList();
		this.page.dataset.$etag = 1;
	},
	onTestMenuClick: function(event, btn) {
		var $menu = this.testMenus[btn.syraTestMenusIndex];
		var delta = helpers.object.clone($menu.delta, true);
		this.$isEditMode = false; //allow erase of all list ( data + metadata on record)
		//  this.refreshList();
		this.$isEditMode = true;
		if (delta.$isPartialDelta) {
			this.isFusionPage = true;
		}
		switch ($menu.$clientId) {
			case "reorder":
				if (delta.$isPartialDelta) {
					var count = this.dataset.xarray.length - 1;
					delta.xarray = this.dataset.xarray.map(function(record, index) {
						return {
							$uuid: record.$uuid,
							$index: count - index
						};
					}).reverse();
				} else {
					delta.xarray = this.dataset.xarray.map(function(record) {
						return {
							$uuid: record.$uuid
						};
					}).reverse();
				}
				break;
			case "deleteDefault":
				delta.xarray = this.dataset.xarray.filter(function(record) {
					return (record.$uuid != "record3") && (record.$uuid != "record6") && (record.$uuid != "record7");
				});
				break;
		}
		this.applyChange({
			$fieldJsonDelta: JSON.stringify(delta, null, 2)
		});
		this.applyChange(delta, true);
		delete this.isFusionPage;
	},
	_defineArticle: function($item) {
		var bar = multiSettings.settingBar;
		this.$item.$layout = {
			$layoutType: "row",
			$widths: "60,40",
			$items: [$item, multiSettings.settingBar]
		};
	},
	onFetchHandler: function(options) {
		if (options && options.params) {
			delete options.field;
			this.notifyChangeToServer(options);
		}
	},
	notifyActionChange: function(menuItem, target, value) {
		if (value.$empty || value.$refresh || value.$focusXString) {
			if (value.$empty) {
				this.refreshList([]);
			}
			if (value.$refresh) {
				this.refreshList();
			}
			if (value.$focusXString) {
				var xarrays = this.boundFields.xarray;
				for (var ii = 0, jj = xarrays.length; ii < jj; ii++) {
					var xarray = xarrays[ii];
					xarray.records[1].boundFields.xstring[0].focus();
					break;
				}
			}
			return;
		}
		FieldsTest.prototype.notifyActionChange.call(this, menuItem, target, value);
	},
	notifyDataChange: function(field, value) {
		var notify = true;
		switch (field.$item.$bind) {
			case "$fieldRecordCount":
				this.refreshList();
				notify = false;
				break;
			default:
				if (field.$item.$bind.indexOf("$field$capability") >= 0) {
					this.applyChange({
						$properties: {
							xarray: utility.applyCapabilityChange(this, field.$item.$bind)
						}
					});
					notify = false;
				}
				break;
		}
		if (notify) {
			FieldsTest.prototype.notifyDataChange.call(this, field, value);
		}
	},

	_initiliazeTestPage: function() {
		FieldsTest.prototype._initiliazeTestPage.call(this);
		syra_site.deltaManager.applyObjectDelta(this, this.$prototype, this._makeArrayPrototype(), true);
	},
	_makeArrayPrototype: function() {
		var $actions = {};
		$actions.$empty = {
			$title: "Empty list",
			"$method": "PUT"
		};
		$actions.$refresh = {
			$title: "Refresh list",
			"$method": "PUT"
		};
		$actions.$focusXString = {
			$title: "Set focus Xtring Row2",
			"$method": "PUT"
		};
		return {
			"$properties": {
				$fieldJsonDelta: {
					$title: "delta",
					$type: "application/x-string"
				},
				$fieldRecordCount: {
					$title: "Records",
					$type: "application/x-integer"
				},
				"xarray": {
					$title: "xarray",
					"$capabilities": "sort,filter,insert,append,delete,search,reorder",
					$type: "application/x-array",
					"$itemsPerPage": 200,
					"$item": {
						"$descriptor": "prototype employee.$edit",
						$type: "application/json",
						"$pluralType": "children",
						"$representation": "employee",
						"$properties": {
							"xstring": {
								$title: "xstring",
								$type: "application/x-string",

								"$maxLength": 30,
								"$capabilities": "sort,filter"
							},
							"xchoice": {
								$title: "xchoice",
								$type: "application/x-choice",
								$value: {
									$type: "application/x-integer",
									$enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value) {
										return {
											"$value": value,
											$title: "Value " + value
										};
									})
								}
							},
							"xdate": {
								$title: "xdate",
								$type: "application/x-date",
								"$capabilities": "sort,filter"
							},
							"xboolean": {
								$title: "xboolean",
								$type: "application/x-boolean",
								"$capabilities": "sort,filter"
							},
							"xdecimal": {
								$title: "xdecimal",
								$type: "application/x-decimal",
								"$capabilities": "sort,filter",

								"$isNullable": true
							},
							"xreference": {
								$title: "xreference",
								$capabilities: "sort,filter",
								$type: "application/x-reference",
								"$item": {
									$value: "{code}",
									$key: "{$uuid}",
									"$properties": {
										"code": {
											$type: "application/x-string"
										},
										"description": {
											$type: "application/x-string"
										}
									},
									$links: {
										"$details": {
											$type: "application/json;vnd.sage=syracuse",
											"$url": "/sdata/sprint1/settings/sprint1/countries('{$uuid}')?representation=country.$details&role={$role}"
										},
										"$lookup": {
											$type: "application/json;vnd.sage=syracuse",
											"$url": "/sdata/sprint1/settings/sprint1/countries?representation=country.$lookup&role={$role}&trackingId={$trackingId}&binding=country"
										}
									}
								}
							},
							"xarray2": {
								$title: "xarray2",
								"$capabilities": "sort,filter,insert,append,delete,reorder",
								$type: "application/x-array",
								"$itemsPerPage": 20,
								"$item": {
									"$descriptor": "prototype employee.$edit",
									$type: "application/json",
									"$pluralType": "children",
									"$representation": "employee",
									"$properties": {
										"xstring": {
											$title: "xstring",
											$type: "application/x-string",

											"$maxLength": 30,
											"$capabilities": "sort,filter"
										},
										"xchoice": {
											$title: "xchoice",
											$type: "application/x-choice",
											$value: {
												$type: "application/x-integer",
												$enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value) {
													return {
														"$value": value,
														$title: "Value " + value
													};
												})
											}
										},
										"xdate": {
											$title: "xdate",
											$type: "application/x-date",
											"$capabilities": "sort,filter"
										},
										"xboolean": {
											$title: "xboolean",
											$type: "application/x-boolean",
											"$capabilities": "sort,filter"
										},
										"xdecimal": {
											$title: "xdecimal",
											$type: "application/x-decimal",
											"$capabilities": "sort,filter",

											"$isNullable": true
										},
										"xreference": {
											$title: "xreference",
											$capabilities: "sort,filter",
											$type: "application/x-reference",
											"$item": {
												$value: "{code}",
												$key: "{$uuid}",
												"$properties": {
													"code": {
														$type: "application/x-string"
													},
													"description": {
														$type: "application/x-string"
													}
												},
												$links: {
													"$details": {
														$type: "application/json;vnd.sage=syracuse",
														"$url": "/sdata/sprint1/settings/sprint1/countries('{$uuid}')?representation=country.$details&role={$role}"
													},
													"$lookup": {
														$type: "application/json;vnd.sage=syracuse",
														"$url": "/sdata/sprint1/settings/sprint1/countries?representation=country.$lookup&role={$role}&trackingId={$trackingId}&binding=country"
													}
												}
											}
										}
									},
									$links: {},
									$actions: {}
								},
								$actions: {}
							}
						},
						$links: {},
						$actions: {}
					},
					$actions: {}
				}
			},
			$actions: $actions
		};
	},
	getDefaultRecords: function() {
		var $fieldRecordCount = this.boundFields.$fieldRecordCount[0].getDataValue();
		var records = this.getResources().getRecords($fieldRecordCount);
		records.forEach(function(record) {
			delete record.$index;
		});
		//this.boundFields.$field$dataset[0].setDataValue(JSON.stringify(records, null, 2));
		return records;
	},
	refreshList: function(records) {
		if (records === undefined) {
			records = this.getDefaultRecords();
		}
		this.applyChange({
			$properties: {
				"xarray": {
					$isReadOnly: false,
					$isDisabled: false,
					$totalResults: records.length
				}
			},
			"xarray": records
		});
	}
});