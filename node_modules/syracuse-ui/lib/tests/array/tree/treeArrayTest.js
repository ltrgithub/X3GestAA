"use strict";
var helpers = require("syracuse-core/lib/helpers")
var FieldsTest = require("syracuse-ui/lib/tests/fieldsTest").FieldsTest;
var samples = {
    xsl: {
        data: require("./xslData").data,
        $prototype: require("./xslPrototype").$prototype
    }
};
var multiSettings = require("./treeSettings");
var utility = require("syracuse-ui/lib/tests/array/utility");

function TreeArrayTest(){
}

exports.TreeArrayTest = helpers.defineClass(TreeArrayTest, FieldsTest, {
    _defineArticle: function(){
        var bar = multiSettings.settingBar;
        this.$item.$layout = {
            $layoutType: "row",
            $widths: "80,20",
            $items: [{
                "$layoutType": "tabs",
                "$items": [{
                    "$category": "section",
                    "$title": "XSL",
                    "$layout": {
                        "$items": [{
                            "$bind": "treexsl"
                        }]
                    }
                }]
            }, multiSettings.settingBar]
        };
    },
    onFetchHandler: function(options){
        if (options && options.params) {
            delete options.field;
            this.notifyChangeToServer(options);
        }
    },
    notifyActionChange: function(target, value){
        if (value.$empty || value.$refresh) {
            if (value.$empty) {
                this.refreshList([]);
            }
            if (value.$refresh) {
                this.refreshList();
            }
            return;
        }
        else {
            var action = this.$prototype.$actions[Object.keys(value)[0]];
            if (action) {
                this.applyEdit(action.$bind.replace("partial", ""), action.delta);
                return;
            }
        }
        FieldsTest.prototype.notifyActionChange.call(this, target, value);
    },
    notifyDataChange: function(field, value){
        var notify = true;
        switch (field.$item.$bind) {
            case "$fieldRecordCount":
                this.refreshList();
                notify = false;
                break;
            default:
                if (field.$item.$bind.indexOf("$field$capability") >= 0) {
                    this.applyChange({
                        $properties: {
                            treexsl: utility.applyCapabilityChange(this, field.$item.$bind)
                        }
                    });
                    notify = false;
                }
                break;
        }
        if (notify) {
            FieldsTest.prototype.notifyDataChange.call(this, field, value);
        }
    },
    applyEdit: function($actionId, delta){
        //insert one Record
        var self = this;
        self.isDeltaMode = false; //allow erase of all list ( data + metadata on record)
        self.refreshList();
        self.isDeltaMode = true;
        if (delta.$isPartialDelta) {
            self.$isFusionPage = true;
        }
        switch ($actionId) {
            case "deleteDefault":
                delta.treexsl = self.dataset.treexsl.filter(function(record){
                    return (record.$uuid != "record3") && (record.$uuid != "record6") && (record.$uuid != "record7");
                });
                break;
        }
        //self.boundFields.$fieldJsonDelta[0].setDataValue(JSON.stringify(delta, null, 2));
        self.applyChange({
            $fieldJsonDelta: JSON.stringify(delta, null, 2)
        });
        self.applyChange(delta, true);
        delete self.$isFusionPage;
    },
    _initiliazeTestPage: function(){
        FieldsTest.prototype._initiliazeTestPage.call(this);
        this.ensureDeltaManager().applyObjectDelta(this.$prototype, this._makeArrayPrototype(), true);
    },
    loadBox: function(){
        var self = this;
        FieldsTest.prototype.loadBox.call(self, {
            $fieldRecordCount: 8,
            $field$fitContainer: false
        });
        //find first DeskttopKlist
        self.boundFields["treexsl"].some(function(item){
            if (item.builder) {
                self.designedField = item;
            }
            return self.designedField != null;
        });
        self.refreshList();
        
        self.page.dataset.$etag = 1;
    },
    _makeArrayPrototype: function(){
        var $actions = {};
        $actions.$empty = {
            "$title": "Empty list",
            "$method": "PUT"
        };
        $actions.$refresh = {
            "$title": "Refresh list",
            "$method": "PUT"
        };
        return {
            $localization: samples.xsl.$prototype.$localization,
            "$properties": {
                $fieldJsonDelta: {
                    "$title": "delta",
                    "$type": "application/x-string"
                },
                "$field$editMode": {
                    $title: "$editMode",
                    $type: "application/x-choice",
                    $isHidden: true,
                    $value: {
                        $type: "application/x-integer",
                        $enum: [{
                            $value: "array",
                            $title: "array (default)"
                        }, {
                            $value: "record",
                            $title: "record"
                        }, {
                            $value: "cell",
                            $title: "cell"
                        }]
                    }
                },
                
                $fieldRecordCount: {
                    $title: "Records",
                    "$type": "application/x-integer"
                },
                $field$fitContainer: {
                    $title: "$fitContainer",
                    "$type": "application/x-boolean"
                },
                "treexsl": samples.xsl.$prototype.$properties.BA
            },
            "$actions": $actions
        };
    },
    refreshList: function(records){
        var records = samples.xsl.data.treexsl;
        this.applyChange({
            $properties: {
                "treexsl": {
                    $isReadOnly: false,
                    $isDisabled: false,
                    $totalResults: records.length
                }
            },
            $field$editMode: "array",
            "treexsl": records
        });
    }
});
