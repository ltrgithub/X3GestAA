"use strict";
var helpers = require("syracuse-core/lib/helpers");
var FieldsTest = require("syracuse-ui/lib/tests/fields/fieldsTest").FieldsTest;
var samples = {
	xsl: {
		$title: "XSL",
		data: require("./xslData").data,
		definition: require("./xslDefinition")
	},
	xsl2: {
		$title: "XSL2",
		data: require("./xsl2Data").data,
		definition: require("./xsl2Definition")
	},
	picking: {
		$title: "Picking",
		data: require("./pickingData").data,
		definition: require("./pickingDefinition")
	},
	single: {
		$title: "Standard",
		data: require("./singleData").data,
		definition: require("./singleDefinition")
	},
	recursive: {
		$title: "Recursive",
		data: require("./recursiveData").data,
		definition: require("./recursiveDefinition")
	},
	emptyId: {
		$title: "emptyId",
		data: require("./emptyIdData").data,
		definition: require("./emptyIdDefinition")
	},
	gesapn: {
		$title: "gesapn",
		data: require("./gesapnData").data,
		definition: require("./gesapnDefinition")
	}
};
var multiSettings = require("./treeSettings");
var utility = require("syracuse-ui/lib/tests/array/utility");

function TreeArrayTest() {}

exports.TreeArrayTest = helpers.defineClass(TreeArrayTest, FieldsTest, {
	_defineArticle: function() {
		var bar = multiSettings.settingBar;
		this.$item.$layout = {
			$layoutType: "row",
			$widths: "80,20",
			$items: [{
					$layoutType: "tabs",
					$items: []
				},
				multiSettings.settingBar
			]
		};
		var binds = Object.keys(samples);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			this.$item.$layout.$items[0].$items.push({
				$category: "section",
				"$title": samples[binds[ii]].$title,
				"$layout": {
					"$items": [samples[binds[ii]].definition.$item]
				}
			});
		}
	},
	onFetchHandler: function(options) {
		if (options && options.params) {
			delete options.field;
			this.notifyChangeToServer(options);
		}
	},
	notifyActionChange: function(menuItem, target, value) {
		if (value.$empty || value.$refresh) {
			if (value.$empty) {
				this.refreshList([]);
			}
			if (value.$refresh) {
				this.refreshList();
			}
			return;
		} else {
			var action = this.$prototype.$actions[Object.keys(value)[0]];
			if (action) {
				this.applyEdit(action.$bind.replace("partial", ""), action.delta);
				return;
			}
		}
		FieldsTest.prototype.notifyActionChange.call(this, menuItem, target, value);
	},
	notifyDataChange: function(field, value) {
		var notify = true;
		switch (field.$item.$bind) {
			case "$fieldRecordCount":
				this.refreshList();
				notify = false;
				break;
			default:
				if (field.$item.$bind.indexOf("$field$capability") >= 0) {
					this.applyChange({
						$properties: {
							xsl: utility.applyCapabilityChange(this, field.$item.$bind)
						}
					});
					notify = false;
				}
				break;
		}
		if (notify) {
			FieldsTest.prototype.notifyDataChange.call(this, field, value);
		}
	},
	applyEdit: function($actionId, delta) {
		//insert one Record
		var self = this;
		self.$isEditMode = false; //allow erase of all list ( data + metadata on record)
		self.refreshList();
		self.$isEditMode = true;
		if (delta.$isPartialDelta) {
			self.$isFusionPage = true;
		}
		switch ($actionId) {
			case "deleteDefault":
				delta.xsl = self.dataset.xsl.filter(function(record) {
					return (record.$uuid != "record3") && (record.$uuid != "record6") && (record.$uuid != "record7");
				});
				break;
		}
		//self.boundFields.$fieldJsonDelta[0].setDataValue(JSON.stringify(delta, null, 2));
		self.applyChange({
			$fieldJsonDelta: JSON.stringify(delta, null, 2)
		});
		self.applyChange(delta, true);
		delete self.$isFusionPage;
	},
	_initiliazeTestPage: function() {
		FieldsTest.prototype._initiliazeTestPage.call(this);
		this.ensureDeltaManager().applyObjectDelta(this.$prototype, this._makeArrayPrototype(), true);
	},
	loadBox: function() {
		var self = this;
		FieldsTest.prototype.loadBox.call(self, {
			$fieldRecordCount: 8,
			$field$fitContainer: false
		});
		self.boundFields["xsl"][0];
		self.refreshList();

		self.page.dataset.$etag = 1;
	},
	_makeArrayPrototype: function() {
		var $actions = {};
		$actions.$empty = {
			"$title": "Empty list",
			"$method": "PUT"
		};
		$actions.$refresh = {
			"$title": "Refresh list",
			"$method": "PUT"
		};
		var $prototype = {
			$localization: samples.xsl.definition.$prototype.$localization,
			$properties: {
				$fieldJsonDelta: {
					$title: "delta",
					$type: "application/x-string"
				},
				$fieldRecordCount: {
					$title: "Records",
					$type: "application/x-integer"
				},
				$field$fitContainer: {
					$title: "$fitContainer",
					$type: "application/x-boolean"
				}
			},
			$actions: $actions
		};
		var binds = Object.keys(samples);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var bind = binds[ii];
			$prototype.$properties[bind] = samples[bind].definition.$prototype.$properties.BA;
		}
		return $prototype;
	},
	refreshList: function(records) {
		var data = {
			$properties: {}
		};
		var binds = Object.keys(samples);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var bind = binds[ii];
			data.$properties[bind] = {
				$isReadOnly: false,
				$isDisabled: false,
				$totalResults: samples[bind].data[bind].length
			};
			data[bind] = samples[bind].data[bind];
		}
		this.applyChange(data);
	}
});