"use strict";
var helpers = require("syracuse-core/lib/helpers");
var TestPage = require("syracuse-ui/lib/tests/testPage").TestPage;
var coreStyleSettings = require("./coreStyleSettings");

function CoreStyleTest() {}

exports.CoreStyleTest = helpers.defineClass(CoreStyleTest, TestPage, {
	onFetchHandler: function(options) {
		if (options && options.params) {
			delete options.field;
			this.notifyChangeToServer(options);
		}
	},
	notifyDataChange: function(field, value) {
		if (field.$item.$bind == "$field$DefaultDeltaMode") {
			this.$isEditMode = true;
			var delta = coreStyleSettings.cases[value].delta;
			this.applyChange({
				$fieldJsonDelta: JSON.stringify(delta, null, 2)
			});
			this.applyChange(delta, true);
		}
		TestPage.prototype.notifyDataChange.call(this, field, value);
	},
	_initiliazeTestPage: function() {
		TestPage.prototype._initiliazeTestPage.call(this);
		syra_site.deltaManager.applyObjectDelta(this, this.$prototype, this._makeArrayPrototype(), true);
	},
	loadBox: function() {
		this.$item.$layout = coreStyleSettings.$item.$layout;
		TestPage.prototype.loadBox.call(this);
		this.refreshList();
		this.page.dataset.$etag = 1;
	},

	_makeArrayPrototype: function() {
		return {
			"$properties": {
				$fieldJsonDelta: {
					"$title": "delta",
					"$type": "application/x-string"
				},

				"$field$DefaultDeltaMode": {
					$title: "isDeltaMode",
					"$type": "application/x-choice",
					"$value": {
						$type: "application/x-integer",
						$enum: coreStyleSettings.cases.map(function($item, index) {
							return {
								$value: index,
								$title: $item.$title
							};
						})
					}
				},
				"xarray": {
					"$title": "xarray",
					"$capabilities": "sort,filter,insert,append,delete,reorder",
					"$type": "application/x-array",
					"$itemsPerPage": 5,
					"$item": {
						"$descriptor": "prototype employee.$edit",
						"$type": "application/json",
						"$pluralType": "children",
						"$representation": "employee",
						"$properties": {
							"xstring": {
								"$title": "xstring",
								"$type": "application/x-string",

								"$maxLength": 30,
								"$capabilities": "sort,filter"
							},
							"xchoice": {
								$title: "xchoice",
								$type: "application/x-choice",
								$value: {
									$type: "application/x-integer",
									$enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value) {
										return {
											"$value": value,
											$title: "Value " + value
										};
									})
								}
							},
							"xdate": {
								$title: "xdate",
								$type: "application/x-date",
								"$capabilities": "sort,filter"
							},
							"xboolean": {
								$title: "xboolean",
								$type: "application/x-boolean",
								"$capabilities": "sort,filter"
							},
							"xdecimal": {
								$title: "xdecimal",
								$type: "application/x-decimal",
								"$capabilities": "sort,filter",

								"$isNullable": true
							}
						},
						"$links": {},
						"$actions": {}
					},
					"$actions": {}
				}
			}
		};
	},
	refreshList: function(records) {
		if (records === undefined) {
			records = this.getResources().getRecords(3).map(function(record) {
				delete record.$index;
				return record;
			});
		}
		this.applyChange({
			$properties: {
				"xarray": {
					$isReadOnly: false,
					$isDisabled: false,
					$totalResults: records.length
				}
			},
			"xarray": records
		});
	}
});