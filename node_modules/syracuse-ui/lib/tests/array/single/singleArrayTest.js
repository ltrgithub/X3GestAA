"use strict";
var helpers = require("syracuse-core/lib/helpers")
var FieldsTest = require("syracuse-ui/lib/tests/fieldsTest").FieldsTest;
var singleSettings = require("./singleSettings");
var singleTestCases = require("./singleTestCases");
var utility = require("syracuse-ui/lib/tests/array/utility");

function SingleArrayTest(){
}

exports.SingleArrayTest = helpers.defineClass(SingleArrayTest, FieldsTest, {
    notifyActionChange: function(target, value){
        if (value.$deleteItem || value.$insertItem || value.$reorderItem) {
            var self = this;
            Object.keys(self.boundFields).forEach(function($bind){
                if ($bind.indexOf("array") == 0) {
                    self.boundFields[$bind].forEach(function(field, index){
                        if (index == 0) {
                            var data = {};
                            data[$bind] = field.records.map(function(row){
                                return row.boundFields.$singleField[0].getDataValue();
                            });
                            if (value.$deleteItem) {
                                data[$bind].shift();
                            }
                            if (value.$insertItem) {
                                var newValue;
                                switch ($bind) {
                                    case "arrayString":
                                        newValue = "new value";
                                        break;
                                    case "arrayEmail":
                                        newValue = "poupou@pidou.com";
                                        break;
                                    case "arrayChoice":
                                        newValue = 2;
                                        break;
                                    case "arrayDate":
                                        newValue = "2012-01-15"
                                        break;
                                    case "arrayBoolean":
                                        newValue = true;
                                        break;
                                    case "arrayDecimal":
                                        newValue = 454511.25;
                                        break;
                                    case "arrayDecimal":
                                        newValue = 454511.25;
                                        break;
                                    case "arrayQuantity":{
                                        newValue = 78.5;
                                    }
                                    case "arrayReference":
                                        newValue = {
                                            "$uuid": "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
                                            "$key": "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
                                            "code": "AD",
                                            "description": "Andorra"
                                        };
                                }
                                data[$bind].splice(data[$bind].length > 1 ? 1 : 0, 0, newValue);
                            }
                            if (value.$reorderItem) {
                                data[$bind].reverse();
                            }
                            self.applyChange(data);
                        }
                    });
                }
            });
        }
        else {
            FieldsTest.prototype.notifyActionChange.call(this, target, value);
        }
    },
    notifyDataChange: function(field, value){
        var self = this;
        var binds = ["arrayString", "arrayEmail", "arrayChoice", "arrayDate", "arrayBoolean", "arrayDecimal", "arrayQuantity", "YCUR", "CURRENCY", "arrayReference"];
        var notify = true;
        switch (field.$item.$bind) {
            case "$field$minItems":
            case "$field$maxItems":
                break;
            default:
                if (field.$item.$bind.indexOf("$field$capability") >= 0) {
                    var $properties = {};
                    binds.forEach(function($bind){
                        $properties[$bind] = utility.applyCapabilityChange(self, field.$item.$bind)
                    });
                    self.applyChange({
                        $properties: $properties
                    });
                    notify = false;
                }
                break;
        }
        if (notify) {
            FieldsTest.prototype.notifyDataChange.call(self, field, value);
        }
    },
    _fillDiagnoses: function(value, $bind){
        var metaData = FieldsTest.prototype._fillDiagnoses.call(this, value, $bind);
        if ($bind.indexOf("array") == 0) {
            var field = this.boundFields[$bind][0];
            metaData.$items = [];
            var $diagnoseItem;
            if (value == "clear") {
                $diagnoseItem = null;
            }
            else {
                $diagnoseItem = [{
                    severity: "error",
                    message: "Error test for value"
                }];
                if (value == "full") {
                    $diagnoseItem.push({
                        severity: "warning",
                        message: "Warning test for value"
                    });
                    $diagnoseItem.push({
                        severity: "info",
                        message: "Info test for value"
                    });
                }
            }
            field.ensureDataSet().forEach(function(dataValue){
                metaData.$items.push({
                    $diagnoses: $diagnoseItem
                });
            });
        }
        return metaData;
    },
    _initiliazeTestPage: function(){
        this.$maxItems = 4;
        this.$minItems = 1;
        FieldsTest.prototype._initiliazeTestPage.call(this);
        this.ensureDeltaManager().applyObjectDelta(this.$prototype.$properties, {
            $field$maxItems: {
                $title: "$maxItems",
                "$type": "application/x-integer"
            },
            $field$minItems: {
                $title: "$minItems",
                "$type": "application/x-integer"
            },
            arrayString: {
                "$type": "application/x-array",
                "$maxItems": this.$maxItems,
                "$minItems": this.$minItems,
                "$title": "Array string",
                "$capabilities": "insert,append,delete,reorder",
                "$item": {
                    "$type": "application/x-string",
                    
                    "$maxLength": 20
                }
            },
            arrayEmail: {
                "$type": "application/x-array",
                "$maxItems": this.$maxItems,
                "$minItems": this.$minItems,
                "$title": "Array Email",
                "$capabilities": "insert,append,delete,reorder",
                "$item": {
                    "$type": "application/x-string",
                    "$format": "$email",
                    
                    "$maxLength": 20
                }
            },
            arrayChoice: {
                "$type": "application/x-array",
                "$maxItems": this.$maxItems,
                "$minItems": this.$minItems,
                "$title": "Array Choice",
                "$capabilities": "insert,append,delete,reorder",
                "$item": {
                    "$type": "application/x-choice",
                    "$value": {
                        "$type": "application/x-integer",
                        
                        "$enum": [{
                            "$value": 1,
                            "$title": "Value 1"
                        }, {
                            "$value": 2,
                            "$title": "Value 2"
                        }, {
                            "$value": 3,
                            "$title": "Value 3"
                        }, {
                            "$value": 4,
                            "$title": "Value 4"
                        }, {
                            "$value": 5,
                            "$title": "Value 5"
                        }]
                    }
                }
            },
            arrayDate: {
                "$type": "application/x-array",
                "$maxItems": this.$maxItems,
                "$minItems": this.$minItems,
                "$title": "Array Date",
                "$capabilities": "insert,append,delete,reorder",
                "$item": {
                    "$type": "application/x-date",
                    
                    "$maxLength": 20
                }
            },
            arrayBoolean: {
                "$type": "application/x-array",
                "$maxItems": this.$maxItems,
                "$minItems": this.$minItems,
                "$title": "Array Boolean",
                "$capabilities": "insert,append,delete,reorder",
                "$item": {
                    "$type": "application/x-boolean",
                    
                    "$maxLength": 20
                }
            },
            arrayDecimal: {
                "$type": "application/x-array",
                "$maxItems": this.$maxItems,
                "$minItems": this.$minItems,
                "$capabilities": "insert,append,delete,reorder",
                "$title": "Array Decimal",
                "$item": {
                    "$type": "application/x-decimal",
                    
                    "$maxLength": 20
                }
            },
            arrayQuantity: {
                "$type": "application/x-array",
                "$maxItems": this.$maxItems,
                "$minItems": this.$minItems,
                "$capabilities": "insert,append,delete,reorder",
                "$title": "Array Quantity",
                "$item": {
                    $title: "xquantity with xreference",
                    $type: "application/x-quantity",
                    $value: {
                        $title: "{$value} {$unit}",
                        $type: "application/x-decimal",
                        $format: "0.00"
                    },
                    $unit: "CURRENCY"
                }
            },
            "YCUR": {
                "$type": "application/x-string",
                "$maxLength": 3,
                "$isHidden": true
            },
            "CURRENCY": {
                "$title": "{@323}",
                "$shortTitle": "{@323}",
                "$type": "application/x-reference",
                "$isMandatory": true,
                "$capabilities": "sort,filter",
                "$item": {
                    "$url": "{$baseUrl}/TABCUR('{$key}')?representation=TABCUR.$lookup",
                    "$value": "{CUR}",
                    "$key": "{CUR}",
                    "$properties": {
                        "CUR": {
                            "$type": "application/x-string"
                        }
                    },
                    "CUR": "{YCUR}",
                    "$links": {
                        "$details": {
                            "$title": "{@28123}",
                            "$target": "",
                            "$type": "application/json;vnd.sage=syracuse",
                            "$url": "{$baseUrl}/TABCUR('{YCUR}')?representation=TABCUR.$details"
                        },
                        "$lookup": {
                            "$title": "{@6109}",
                            "$type": "application/json;vnd.sage=syracuse",
                            "$url": "{$baseUrl}/TABCUR?representation=TABCUR.$lookup"
                        },
                        "$summary": {
                            "$title": "{@25036}",
                            "$target": "",
                            "$type": "application/json;vnd.sage=syracuse",
                            "$url": "{$baseUrl}/TABCUR('{YCUR}')?representation=TABCUR.$summary"
                        },
                        "$query": {
                            "$title": "{@27982}",
                            "$target": "",
                            "$type": "application/json;vnd.sage=syracuse",
                            "$url": "{$baseUrl}/TABCUR?representation=TABCUR.$query"
                        }
                    }
                }
            },
            arrayReference: {
                "$type": "application/x-array",
                "$maxItems": this.$maxItems,
                "$minItems": this.$minItems,
                "$capabilities": "insert,append,delete,reorder",
                "$title": "Array Reference",
                "$item": {
                    $representation: "employee",
                    $title: "xreference",
                    $isMandatory: false,
                    $capabilities: "sort,filter",
                    $type: "application/x-reference",
                    "$item": {
                        $value: "{code}",
                        $key: "{$uuid}",
                        "$properties": {
                            "code": {
                                "$type": "application/x-string"
                            },
                            "description": {
                                "$type": "application/x-string"
                            }
                        },
                        $links: {
                            "$details": {
                                "$type": "application/json;vnd.sage=syracuse",
                                "$url": "/sdata/sprint1/settings/sprint1/countries('{$uuid}')?representation=country.$details&role={$role}"
                            },
                            "$lookup": {
                                "$type": "application/json;vnd.sage=syracuse",
                                "$url": "/sdata/sprint1/settings/sprint1/countries?representation=country.$lookup&role={$role}&trackingId={$trackingId}&binding=country"
                            }
                        }
                    }
                }
            },
        }, true);
        utility.addCapabilitySetting(this);
    },
    loadBox: function(){
        FieldsTest.prototype.loadBox.call(this, {
            $field$maxItems: this.$maxItems,
            $field$minItems: this.$minItems,
            arrayString: ["dazhnda  d,aùe,dùe  daz dazed az", "deuxizem eada fa  ada", "troisième"],
            arrayEmail: ["toto@sage.com", "titi@sage.com", "tutu@sage.com"],
            arrayChoice: [2, 1, 5],
            arrayDate: ["2011-06-01", "2012-02-08", "2010-06-05"],
            arrayBoolean: [true, false, true],
            arrayDecimal: [2987111111111.4548, 248.8, 7635526.2],
            arrayQuantity: [78.5],
            "YCUR": "USD",
            "CURRENCY": {
                "$symbol": "$"
            },
            arrayReference: [{
                "$uuid": "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
                "$key": "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
                "code": "AD",
                "description": "Andorra"
            }]
        });
    },
    _defineArticle: function(){
        this.$item.$layout = {
            $layoutType: "row",
            $widths: "70,30",
            $items: [{
                $layoutType: "stack",
                $items: singleTestCases.cases
            }, {
                $layoutType: "stack",
                $items: singleSettings.settingBar
            }]
        };
    },
    notifyActionLinkChange: function(metaData, useMetaDataOnly){
        var self = this;
        var dataRecordSet = {
            $properties: {}
        }
        Object.keys(self.boundFields).forEach(function(bind){
            if (bind.indexOf("$field") != 0) {
                var $fieldProperty = self.$prototype.$properties[bind];
                dataRecordSet.$properties[bind] = helpers.object.clone(metaData, true);
                var $recordItem = self.$prototype.$properties[bind].$item;
                dataRecordSet.$properties[bind].$items = [];
                self.dataset[bind].forEach(function(dataRecord){
                    var $item = helpers.object.clone(metaData, true);
                    dataRecordSet.$properties[bind].$items.push($item);
                });
            }
        });
        self.applyChange(dataRecordSet);
    },
    notifyDiagnoses: function(value, useMetaDataOnly){
        var self = this;
        var dataRecordSet = {
            $properties: {}
        };
        Object.keys(self.boundFields).forEach(function(bind){
            if (bind == "arrayReference") {
                self._fillReferenceDiagnoses(value, bind);
            }
            else {
                var metaData = self._fillDiagnoses(value, bind);
                if (bind.indexOf("$field") != 0) {
                    var $fieldProperty = self.$prototype.$properties[bind];
                    dataRecordSet.$properties[bind] = {
                        $diagnoses: metaData.$diagnoses
                    };
                    var $recordItem = self.$prototype.$properties[bind].$item;
                    dataRecordSet.$properties[bind].$items = [];
                    self.dataset[bind].forEach(function(dataRecord){
                        var $item = {
                            $diagnoses: metaData.$diagnoses
                        };
                        dataRecordSet.$properties[bind].$items.push($item);
                    });
                }
            }
        });
        self.applyChange(dataRecordSet);
    },
    _fillReferenceDiagnoses: function(value, bind){
        var self = this;
        var dataSet = {
            $properties: {}
        };
        dataSet[bind] = [];
        var dataRecordSet = {
            "$uuid": "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
            "$key": "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
            "code": "AD",
            "description": "Andorra",
        };
        var $diagnoseItem;
        if (value == "clear") {
            $diagnoseItem = null;
        }
        else {
            $diagnoseItem = [{
                severity: "error",
                message: "Error test for value"
            }];
            if (value == "full") {
                $diagnoseItem.push({
                    severity: "warning",
                    message: "Warning test for value"
                });
                $diagnoseItem.push({
                    severity: "info",
                    message: "Info test for value"
                });
            }
        }
        // append record diagnoses
        dataRecordSet.$diagnoses = $diagnoseItem;
        dataSet[bind].push(dataRecordSet);
        
        // append global diagnoses
        dataSet.$properties[bind] = {
            $diagnoses: $diagnoseItem
        };
        
        self.applyChange(dataSet);
    }
    
});
