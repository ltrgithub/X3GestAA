"use strict";
var helpers = require("syracuse-core/lib/helpers");
var Fields = require("syracuse-ui/lib/tests/field/fields").Fields;
var multiSettings = require("./tree/treeSettings");
var utility = require("syracuse-ui/lib/tests/array/utility");
var samples = {
	xsl: {
		$title: "XSL",
		data: require("./tree/xslData").data,
		definition: require("./tree/xslDefinition")
	},
	xsl2: {
		$title: "XSL2",
		data: require("./tree/xsl2Data").data,
		definition: require("./tree/xsl2Definition")
	},
	picking: {
		$title: "Picking",
		data: require("./tree/pickingData").data,
		definition: require("./tree/pickingDefinition")
	},
	single: {
		$title: "Standard",
		data: require("./tree/singleData").data,
		definition: require("./tree/singleDefinition")
	},
	recursive: {
		$title: "Recursive",
		data: require("./tree/recursiveData").data,
		definition: require("./tree/recursiveDefinition")
	},
	emptyId: {
		$title: "emptyId",
		data: require("./tree/emptyIdData").data,
		definition: require("./tree/emptyIdDefinition")
	},
	gesapn: {
		$title: "gesapn",
		data: require("./tree/gesapnData").data,
		definition: require("./tree/gesapnDefinition")
	},
	treegrid: {
		$title: "treegrid",
		data: require("./tree/treegridData").data,
		definition: require("./tree/treegridDefinition")
	}
};

var samplesf = {
	xsl2: {
		$title: "XSL2",
		data: require("./tree/xsl2Data").data,
		definition: require("./tree/xsl2Definition")
	},
	xsl: {
		$title: "XSL",
		data: require("./tree/xslData").data,
		definition: require("./tree/xslDefinition")
	}

};

function TestCase() {}

exports.TestCase = helpers.defineClass(TestCase, Fields, {
	_defineArticle: function() {
		var bar = multiSettings.settingBar;
		this.$item.$layout = {
			$layoutType: "row",
			$widths: "80,20",
			$items: [{
					$layoutType: "tabs",
					$items: []
				},
				multiSettings.settingBar
			]
		};
		var binds = Object.keys(samples);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			this.$item.$layout.$items[0].$items.push({
				$category: "section",
				"$title": samples[binds[ii]].$title,
				"$layout": {
					"$items": [samples[binds[ii]].definition.$item]
				}
			});
		}
	},
	onFetchHandler: function(options) {
		if (options && options.params) {
			delete options.field;
			this.notifyChangeToServer(options);
		}
	},
	notifyActionChange: function(menuItem, target, value) {
		if (value.$empty || value.$refresh) {
			if (value.$empty) {
				this.refreshList([]);
			}
			if (value.$refresh) {
				this.refreshList();
			}
			return;
		} else {
			var action = this.$prototype.$actions[Object.keys(value)[0]];
			if (action) {
				this.applyEdit(action.$bind.replace("partial", ""), action.delta);
				return;
			}
		}
		Fields.prototype.notifyActionChange.call(this, menuItem, target, value);
	},
	notifyDataChange: function(field, value) {
		var notify = true;
		switch (field.$item.$bind) {
			case "$fieldRecordCount":
				this.refreshList();
				notify = false;
				break;
			default:
				if (field.$item.$bind.indexOf("$field$capability") >= 0) {
					this.applyChange({
						$properties: {
							xsl: utility.applyCapabilityChange(this, field.$item.$bind)
						}
					});
					notify = false;
				}
				break;
		}
		if (notify) {
			Fields.prototype.notifyDataChange.call(this, field, value);
		}
	},
	applyEdit: function($actionId, delta) {
		//insert one Record
		var self = this;
		self.$isEditMode = false; //allow erase of all list ( data + metadata on record)
		self.refreshList();
		self.$isEditMode = true;
		if (delta.$isPartialDelta) {
			self.isFusionPage = true;
		}
		switch ($actionId) {
			case "deleteDefault":
				delta.xsl = self.dataset.xsl.filter(function(record) {
					return (record.$uuid != "record3") && (record.$uuid != "record6") && (record.$uuid != "record7");
				});
				break;
		}
		//self.boundFields.$fieldJsonDelta[0].setDataValue(JSON.stringify(delta, null, 2));
		self.applyChange({
			$fieldJsonDelta: JSON.stringify(delta, null, 2)
		});
		self.applyChange(delta, true);
		delete self.isFusionPage;
	},
	loadBox: function() {
		this.$prototype.$localization = samples.xsl.definition.$prototype.$localization;
		this.$prototype.$properties.$fieldJsonDelta = {
			$title: "delta",
			$type: "application/x-string"
		};
		this.$prototype.$properties.$fieldRecordCount = {
			$title: "Records",
			$type: "application/x-integer"
		};
		this.$prototype.$actions = {
			$empty: {
				"$title": "Empty list",
				"$method": "PUT"
			},
			$refresh: {
				"$title": "Refresh list",
				"$method": "PUT"
			}
		};
		var binds = Object.keys(samples);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var bind = binds[ii];
			$prototype.$properties[bind] = samples[bind].definition.$prototype.$properties.BA;
		}
		return $prototype;
		Fields.prototype.loadBox.call(this, {
			$fieldRecordCount: 8
		});
		this.boundFields["xsl"][0];
		this.refreshList();
		this.page.dataset.$etag = 1;
	},
	refreshList: function(records) {
		var data = {
			$properties: {}
		};
		var binds = Object.keys(samples);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var bind = binds[ii];
			data.$properties[bind] = {
				$isReadOnly: false,
				$isDisabled: false,
				$totalResults: samples[bind].data[bind].length
			};
			data[bind] = samples[bind].data[bind];
		}
		this.applyChange(data);
	}
});