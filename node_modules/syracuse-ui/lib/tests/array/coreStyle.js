"use strict";
var helpers = require("syracuse-core/lib/helpers");
var TestPage = require("syracuse-ui/lib/tests/testPage").TestPage;

var _settings = {
	$layout: {
		$layoutType: "row",
		$widths: "60,40",
		$items: [{
			$layoutType: "stack",
			"$items": [{
				"$format": "grid",
				"$isEditMode": true,
				"$bind": "xarray",
				"$selectMode": "single"

			}, {
				"$format": "grid",
				"$bind": "xarray",
				"$selectMode": "single"

			}, {
				"$format": "cards",
				"$isEditMode": true,
				"$bind": "xarray",
				"$selectMode": "single",
				"$cardsByRowCount": 3,
				"$layout": {
					$items: [{
						$category: "section",
						"$layout": {
							"$items": [{
								"$bind": "xstring"
							}, {
								"$bind": "xchoice"
							}, {
								"$bind": "xdate"
							}, {
								"$bind": "xboolean"
							}, {
								"$bind": "xdecimal"
							}]
						}
					}]
				}
			}, {
				"$format": "cards",
				"$bind": "xarray",
				"$selectMode": "single",
				"$cardsByRowCount": 3,
				"$layout": {
					$items: [{
						$category: "section",
						"$layout": {
							"$items": [{
								"$bind": "xstring"
							}, {
								"$bind": "xchoice"
							}, {
								"$bind": "xdate"
							}, {
								"$bind": "xboolean"
							}, {
								"$bind": "xdecimal"
							}]
						}
					}]
				}
			}]
		}, {
			"$layoutType": "tabs",
			"$items": [{
				"$category": "section",
				"$clientId": "editSection",
				"$title": "Edit",
				"$layout": {
					"$items": [{
						"$bind": "$field$DefaultDeltaMode",
						"$isEditMode": true,
						"$format": "$radios",
						"$choiceLayout": 1
					}]
				}
			}, {
				"$category": "section",
				"$title": "Json Delta",
				"$layout": {
					"$items": [{
						"$bind": "$fieldJsonDelta",
						"$isTitleHidden": true,
						"$isEditMode": true,
						"$rows": 30,
						$isAutoSizeDisabled: true,
						"$skin": "s-json-field"
					}]
				}
			}]

		}]
	}
};

exports.cases = [{
	$title: "$isReadOnly true",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$isReadOnly": true
		}, {
			"$uuid": "record1",
			"$isReadOnly": true
		}, {
			"$uuid": "record2",
			"$isReadOnly": true
		}]
	}
}, {
	$title: "$isReadOnly false",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$isReadOnly": false
		}, {
			"$uuid": "record1",
			"$isReadOnly": false
		}, {
			"$uuid": "record2",
			"$isReadOnly": false
		}]
	}
}, {
	$title: "$isDisabled true",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$isDisabled": true
		}, {
			"$uuid": "record1",
			"$isDisabled": true
		}, {
			"$uuid": "record2",
			"$isDisabled": true
		}]
	}
}, {
	$title: "$isDisabled false",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$isDisabled": false
		}, {
			"$uuid": "record1",
			"$isDisabled": false
		}, {
			"$uuid": "record2",
			"$isDisabled": false
		}]
	}
}, {
	$title: "info warning error",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$fieldStyle": "cst_sty_info"
		}, {
			"$uuid": "record1",
			"$valueStyle": "cst_sty_warning"
		}, {
			"$uuid": "record2",
			"$valueStyle": "cst_sty_error"
		}]
	}
}, {
	$title: "highlight verylow low",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$fieldStyle": "cst_sty_highlight"
		}, {
			"$uuid": "record1",
			"$valueStyle": "cst_sty_verylow"
		}, {
			"$uuid": "record2",
			"$valueStyle": "cst_sty_low"
		}]
	}
}, {
	$title: "medium high veryhigh",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$fieldStyle": "cst_sty_medium"
		}, {
			"$uuid": "record1",
			"$valueStyle": "cst_sty_high"
		}, {
			"$uuid": "record2",
			"$valueStyle": "cst_sty_veryhigh"
		}]
	}
}, {
	$title: "strongdecreasing decreasing stable",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$fieldStyle": "cst_sty_strongdecreasing"
		}, {
			"$uuid": "record1",
			"$valueStyle": "cst_sty_decreasing"
		}, {
			"$uuid": "record2",
			"$valueStyle": "cst_sty_stable"
		}]
	}
}, {
	$title: "increasing strongincreasing",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$fieldStyle": "cst_sty_strongdecreasing"
		}, {
			"$uuid": "record1",
			"$valueStyle": "cst_sty_decreasing"
		}, {
			"$uuid": "record2"
		}]
	}
}, {
	$title: "default",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$fieldStyle": "cst_sty_default"
		}, {
			"$uuid": "record1",
			"$valueStyle": "cst_sty_default"
		}, {
			"$uuid": "record2",
			"$valueStyle": "cst_sty_default"
		}]
	}
}];

function TestCase() {}

exports.TestCase = helpers.defineClass(TestCase, TestPage, {
	onFetchHandler: function(options) {
		if (options && options.params) {
			delete options.field;
			this.notifyChangeToServer(options);
		}
	},
	notifyDataChange: function(field, value) {
		if (field.$item.$bind == "$field$DefaultDeltaMode") {
			this.$isEditMode = true;
			var delta = exports.cases[value].delta;
			this.applyChange({
				$fieldJsonDelta: JSON.stringify(delta, null, 2)
			});
			this.applyChange(delta, true);
		}
		TestPage.prototype.notifyDataChange.call(this, field, value);
	},
	loadBox: function() {
		var $props = this.$prototype.$properties;
		$props.$fieldJsonDelta = {
			"$title": "delta",
			"$type": "application/x-string"
		};

		$props.$field$DefaultDeltaMode = {
			$title: "isDeltaMode",
			"$type": "application/x-choice",
			"$value": {
				$type: "application/x-integer",
				$enum: exports.cases.map(function($item, index) {
					return {
						$value: index,
						$title: $item.$title
					};
				})
			}
		};
		$props.xarray = {
			"$title": "xarray",
			"$capabilities": "sort,filter,insert,append,delete,reorder",
			"$type": "application/x-array",
			"$itemsPerPage": 5,
			"$item": {
				"$descriptor": "prototype employee.$edit",
				"$type": "application/json",
				"$pluralType": "children",
				"$representation": "employee",
				"$properties": {
					"xstring": {
						"$title": "xstring",
						"$type": "application/x-string",

						"$maxLength": 30,
						"$capabilities": "sort,filter"
					},
					"xchoice": {
						$title: "xchoice",
						$type: "application/x-choice",
						$value: {
							$type: "application/x-integer",
							$enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value) {
								return {
									"$value": value,
									$title: "Value " + value
								};
							})
						}
					},
					"xdate": {
						$title: "xdate",
						$type: "application/x-date",
						"$capabilities": "sort,filter"
					},
					"xboolean": {
						$title: "xboolean",
						$type: "application/x-boolean",
						"$capabilities": "sort,filter"
					},
					"xdecimal": {
						$title: "xdecimal",
						$type: "application/x-decimal",
						"$capabilities": "sort,filter",

						"$isNullable": true
					}
				},
				"$links": {},
				"$actions": {}
			},
			"$actions": {}
		};
		this.$item.$layout = _settings.$layout;
		TestPage.prototype.loadBox.call(this);
		this.refreshList();
		this.page.dataset.$etag = 1;
	},
	refreshList: function(records) {
		if (records === undefined) {
			records = this.getResources().getRecords(3).map(function(record) {
				delete record.$index;
				return record;
			});
		}
		this.applyChange({
			$properties: {
				"xarray": {
					$isReadOnly: false,
					$isDisabled: false,
					$totalResults: records.length
				}
			},
			"xarray": records
		});
	}
});