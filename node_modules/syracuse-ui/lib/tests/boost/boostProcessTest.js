"use strict";
var helpers = require("syracuse-core/lib/helpers");
var TestPage = require("syracuse-ui/lib/tests/testPage").TestPage;

var _processes = {
    "VisualProcessACH05_002": "ACH05_002",
    "VisualProcessActions": "Actions",
    "VisualProcessLayers": "Layers",
    "VisualProcessLines": "Lines",
    "VisualProcessLineCapsJoints": "Linecaps & Linejoints",
    "VisualProcessArrows": "Arrows",
    "VisualProcessBezier": "Bezier",
    "VisualProcessApiDashed": "Apishapes Dashed Borders",
    "VisualProcessBzDashed": "Beziershapes Dashed Borders",
    "VisualProcessBezierFill": "Fill Bezier ",
    "VisualProcessPattern": "Fill with Pattern ",
    "VisualProcessPatternRotation": "Pattern+ Rotation of shapes",
    "VisualProcessRadialGradient": "Radial Gradient ",
    "VisualProcessLinearGradientTransition": "LinearGradient Transition Vector  ",
    "VisualProcessLinearGradientStops": "LinearGradient Stop Colors ",
    "VisualProcessLinearGradientRotation": "LinearGradient + Rotation of shapes",
    "VisualProcessTextRotation": "Text + Rotation of Shapes  ",
    "VisualProcessFilling": "Filling",
    "VisualProcessTextPositionning": "Text Positionning ",
    "VisualProcessShadow": "Shadow ",
    "VisualProcessTextFormatting": "Text Formatting ",
    "VisualProcessTextSplitting": "Text Splitting",
    "VisualProcessApiRotations": "Apishape Rotations",
    "VisualProcessImgRotations": "Image Rotations",
    "VisualProcessImgScaling": " Image scaling",
    "VisualProcessImgRotationsDeformations": "image rotations and deformations",
    "VisualProcessLinks": "Links",
    "VisualProcessLinks2": "Links2",
    "VisualDemoProcess": "Visual Process Demo",
    "VisualDemoProcess2": "Visual Process Demo2",
    "VisualProcess": "Test VP "
};

function ProcessTest(){
}

exports.ProcessTest = helpers.defineClass(ProcessTest, TestPage, {
    _initiliazeTestPage: function(){
        document.site.deltaManager.applyObjectDelta(this, this.$prototype.$properties, {
            $field$type: {
                $title: "select a Process type",
                $isMetaData: true,
                $type: "application/x-choice",
                $value: {
                    $type: "application/x-string",
                    $enum: Object.keys(_processes).map(function($type){
                        return {
                            $value: $type,
                            $title: _processes[$type]
                        };
                    })
                }
            },
            description: {
                $title: "Case description",
                $type: "application/x-string"
            },
            process: {
                $type: "application/x-process",
                $title: "Visual Process Player test"
            }
        
        }, true);
        this.$item.$layout = {
            $items: [{
                $bind: "$field$type",
                $isEditMode: true,
                $format: "$radios"
            }, {
                $bind: "description",
                $isTitleHidden: true,
                $isEditMode: false
            }, {
                $clientId: "flashImage",
                $isTitleHidden: true,
                $layout: {
                    $items: []
                }
            }, {
                $bind: "process",
                $isTitleHidden: true,
                $isEditMode: false
            }]
        };
    },
    loadBox: function(){
        TestPage.prototype.loadBox.call(this);
        this.notifyDataChange(this.boundFields.$field$type[0], "VisualProcessArrows");
    },
    notifyDataChange: function(field, value){
        var self = this;
        if (field.$item.$bind == "$field$type") {
            require.async("./process/" + value, function(err, module){
                try {
                    var $resource = helpers.object.clone(module.$resources, true);
                    
                    var flasImage = self.idMap["flashImage"].body;
                    document.site.dom.empty(flasImage);
                    flasImage.style.display = "none";
                    flasImage.style.overflow = "visible";
                    flasImage.style.padding = "0px";
                    self.applyChange({
                        $: {
                            description: {
                                $isHidden: !$resource.description
                            }
                        }
                    });
                    self.applyChange($resource);
                    if ($resource.flashImage) {
                        document.site.dom.empty(flasImage);
                        $("<img />").appendTo(flasImage).attr("src", $resource.flashImage.$url);
                        flasImage.style.display = "";
                    }
                } 
                catch (error) {
                    console.error(error.message);
                }
            });
        }
    }
});
