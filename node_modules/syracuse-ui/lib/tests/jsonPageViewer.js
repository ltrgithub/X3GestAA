"use strict";
var helpers = require("syracuse-core/lib/helpers")
var RawPage = require("syracuse-ui/lib/article/rawPage").RawPage;

function JsonPageViewer(){
}

exports.JsonPageViewer = helpers.defineClass(JsonPageViewer, RawPage, {
    loadBox: function($fieldsPrototype, initData){
        var self = this;
        self.$prototype = {
            "$properties": {
                $data: {
                    $title: "json data",
                    $type: "application/x-string"
                },
                $facet: {
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-string",
                        
                        $enum: [{
                            $value: "$details",
                            $title: "$details"
                        }, {
                            $value: "$edit",
                            $title: "$edit"
                        }, {
                            $value: "$dashboard",
                            $title: "$dashboard"
                        }, {
                            $value: "$query",
                            $title: "$query"
                        }]
                    }
                },
            },
            $facet: "$edit",
            $actions: {
                $convert: {
                    $title: "load json page"
                }
            }
        };
        self.$item = {
            $layout: {
                $items: [{
                    $category: "section",
                    $isBoxCollapsable: true,
                    $title: "Fields ($isEditMode: true / $isEditMode: false)",
                    $layout: {
                        $items: [{
                            $isEditMode: true,
                            $bind: "$data",
                            $rows: 20
                        }, {
                            $isEditMode: true,
                            $bind: "$facet",
                            $rows: 20
                        }, {
                            $category: "link",
                            $bind: "$convert"
                        }]
                    }
                }, {
                    $category: "section",
                    $title: "Result Page",
                    $id: "resultPage",
                    $layout: {
                        $items: []
                    }
                }]
            }
        };
        self.$autoFetch = false;
        self.$pageCategory = "vignette";
        RawPage.prototype.loadBox.call(self, initData);
    },
    notifyChange: function($bind, value){
        if ($bind == "$actions" && value.$convert) {
            var $representation = this.boundFields.$data[0].getDataValue();
            if ($representation) {
                var $representation = JSON.parse($representation);
                if (!$representation.$prototype) {
                    $representation.$prototype = $representation;
                }
                document.itemFactory.loadPage({
                    $$container: this.idMap["resultPage"].$$body.empty(),
                    $representation: $representation,
                    $urlParts: {
                        $facet: this.boundFields.$facet[0].getDataValue()
                    },
                    $category: "page"
                });
            }
        }
    },
    applyFieldMetaData: function($bind, value, $field){
    
    }
});
