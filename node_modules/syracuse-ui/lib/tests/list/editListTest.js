"use strict";
var helpers = require("syracuse-core/lib/helpers")
var FieldsTest = require("../fieldsTest").FieldsTest;
function EditListTest(){
}

exports.EditListTest = helpers.defineClass(EditListTest, FieldsTest, {
    fetch: function(options, callback){
        this.boundFields.$fieldServerData[0].setDataValue(JSON.stringify(options));
    },
    loadBox: function(){
        var $prototype = {
            "$properties": {
                "$field$type": {
                    $isHidden: true
                },
                "$field$isTopLabelAlignment": {
                    $isHidden: true
                },
                "$field$isRightTextLabelAlignment": {
                    $isHidden: true
                },
                
                "xarray": {
                    "$title": "xarray",
                    "$capabilities": "sort,filter,insert,append,delete,reorder",
                    "$type": "application/x-array",
                    "$itemsPerPage": 5,
                    "$item": {
                        "$descriptor": "prototype employee.$edit",
                        "$type": "application/json",
                        "$pluralType": "children",
                        "$representation": "employee",
                        "$properties": {
                            "xstring": {
                                "$title": "xstring",
                                "$type": "application/x-string",
                                
                                "$maxLength": 30,
                                "$capabilities": "sort,alphaTab"
                            },
                            "xchoice": {
                                $title: "xchoice",
                                $type: "application/x-choice",
                                $value: {
                                    $type: "application/x-integer",
                                    $enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value){
                                        return {
                                            "$value": value,
                                            $title: "Value " + value
                                        };
                                    })
                                }
                            },
                            "xdate": {
                                $title: "xdate",
                                $type: "application/x-date"
                            },
                            "xboolean": {
                                $title: "xboolean",
                                $type: "application/x-boolean"
                            },
                            "xdecimal": {
                                $title: "xdecimal",
                                $type: "application/x-decimal",
                                
                                "$isNullable": true
                            }
                        },
                        "$links": {},
                        "$actions": {
                            "$delete": {
                                "$title": "Supprimer",
                                "$method": "PUT"
                            }
                        }
                    },
                    "$actions": {
                        "$create": {
                            "$title": "Ajouter",
                            "$method": "PUT"
                        }
                    }
                }
            
            }
        };
        FieldsTest.prototype.loadBox.call(this, $prototype, {
            "xarray": this.getResources().getRecords(8)
        });
    },
    _makeBlock: function($isEditMode){
        return [this._makeEditReadBlock("xarray", [{
            $bind: "xarray"
        }, {
            $bind: "xarray",
            $format: "vgrid",
        }, {
            $bind: "xarray",
            $format: "cards",
            $cards: {
                $layout: {
                    $items: [{
                        $layoutType: "columns",
                        $layoutSubType: "50,50",
                        $items: [{
                            $layoutType: "stack",
                            $items: [{
                                $bind: "xstring"
                            }]
                        }, {
                            $layoutType: "stack",
                            $items: [{
                                $bind: "xchoice"
                            }]
                        }]
                    }, {
                        $layoutType: "tabs",
                        $items: [{
                            $category: "block",
                            $title: "tab1",
                            $layout: {
                                $items: [{
                                    $bind: "xdate"
                                }]
                            }
                        
                        }, {
                            $category: "block",
                            $title: "tab2",
                            $layout: {
                                $items: [{
                                    $bind: "xboolean"
                                }, {
                                    $bind: "xdecimal"
                                }]
                            }
                        
                        }]
                    }]
                
                }
            
            }
        }])];
    },
    appendSettingsBar: function(){
        var $items = FieldsTest.prototype.appendSettingsBar.call(this);
        $items.push({
            $category: "block",
            $title: "$actions",
            $layout: {
                $items: [{
                    $category: "link",
                    $bind: "$deleteItem",
                    $isEditMode: true
                }, {
                    $category: "link",
                    $bind: "$insertItem",
                    $isEditMode: true
                }, {
                    $category: "link",
                    $bind: "$reorderItem",
                    $isEditMode: true
                }]
            }
        });
        return $items;
    }
});
