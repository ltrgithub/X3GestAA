"use strict";
var helpers = require("syracuse-core/lib/helpers")
var FieldsTest = require("../fieldsTest").FieldsTest;
var ListAuthoring = require("syracuse-ui/lib/field/collection/authoring/listAuthoring").ListAuthoring;
function AuthoringListTest(){
}

exports.AuthoringListTest = helpers.defineClass(AuthoringListTest, FieldsTest, {
    loadBox: function(){
        var $prototype = {
            "$properties": {
                "$field$type": {
                    $isHidden: true
                },
                "$field$isTopLabelAlignment": {
                    $isHidden: true
                },
                "$field$isRightTextLabelAlignment": {
                    $isHidden: true
                },
                "application/x-array": {
                    "$title": "application/x-array",
                    "$capabilities": "sort,filter,insert,append,delete,reorder",
                    "$type": "application/x-array",
                    "$itemsPerPage": 5,
                    "$item": {
                        "$descriptor": "prototype employee.$edit",
                        "$type": "application/json",
                        "$pluralType": "children",
                        "$representation": "employee",
                        "$properties": {
                            "application/x-string": {
                                "$title": "x-string",
                                "$type": "application/x-string",
                                
                                    "$maxLength": 30
                                ,
                                "$capabilities": "sort,filter,alphaTab"
                            },
                            "application/x-choice": {
                                $title: "application/x-choice",
                                $type: "application/x-choice",
                                $value: {
                                    $type: "application/x-integer",
                                        $enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value){
                                            return {
                                                "$value": value,
                                                $title: "Value " + value
                                            };
                                        })
                                }
                            },
                            "application/x-date": {
                                $title: "x-date",
                                $type: "application/x-date",
                                "$capabilities": "sort,filter,alphaTab"
                            },
                            "application/x-boolean": {
                                $title: "application/x-boolean",
                                $type: "application/x-boolean",
                                "$capabilities": "sort,filter"
                            },
                            "application/x-decimal": {
                                $title: "application/x-decimal",
                                $type: "application/x-decimal",
                                "$capabilities": "sort,filter",
                                
                                    "$isNullable": true
                                }
                        },
                        "$links": {},
                        "$actions": {
                            "$delete": {
                                "$title": "Supprimer",
                                "$method": "PUT"
                            }
                        }
                    },
                    "$actions": {
                        "$create": {
                            "$title": "Ajouter",
                            "$method": "PUT"
                        }
                    }
                }
            
            }
        };
        this._appendAuthoringBar($prototype);
        FieldsTest.prototype.loadBox.call(this, $prototype, {
            "application/x-array": this.getResources().getRecords(8),
            "$field$capabilityInsert": true,
            "$field$capabilityDelete": true,
            "$field$capabilityAppend": true,
            "$field$capabilityReorder": true
        });
        this.designedField = this.boundFields["application/x-array"][0];
        
        (this.authoring = new ListAuthoring()).loadBox(this);
        this.authoring.designedTestFields = this.boundFields["application/x-array"];
        this.idMap.authoringTest.$$body.empty().append(this.authoring.layoutContent.$$container);
        this.authoring.bindFieldEvents(this.authoring.layoutContent.$$container);
    },
    onNotifyRecordChange: function(value, binding){
        var self = this;
        switch (binding) {
            case "$field$LinksType":
                var metaData = self.getResources().getActionLinks(value);
                if (value == "$lazyload") {
                    self.onNotifyRecordChange("$empty", binding);
                }
                self.boundFields.$field$LinksJson[0].setDataValue(JSON.stringify(metaData));
                Object.keys(self.boundFields).forEach(function(bind){
                    if (bind.indexOf("$field") != 0) {
                        self.boundFields[bind].forEach(function(field){
                            field.applyChange({
                                $links: metaData.$links,
                                $actions: metaData.$actions
                            });
                            field.builder._records.forEach(function(record){
                                var recordMetaData = {
                                    $links: metaData.$links,
                                    $actions: metaData.$actions
                                };
                                record.applyChange(recordMetaData);
                                Object.keys(record.boundFields).forEach(function($bind){
                                    record.boundFields[$bind].forEach(function(recordField){
                                        recordField.applyMetaData(metaData);
                                    });
                                });
                            });
                        });
                    }
                });
                break;
            default:
                FieldsTest.prototype.onNotifyRecordChange.call(this, value, binding);
                break;
        }
        return null; //cancel notify
    },
    _appendAuthoringBar: function($prototype){
        if ($prototype) {
            this._appendCapabilities($prototype);
        }
        else {
            return {
                $category: "section",
                $title: "Server",
                $layout: {
                    $items: [{
                        $category: "block",
                        $title: "Authoring",
                        $id: "authoringTest",
                        $css: "s-authoring-list-test",
                        $layout: {
                            $items: []
                        }
                    }, this._appendCapabilities()]
                }
            };
        }
    },
    appendSettingsBar: function(){
        return {
            $layoutType: "tabs",
            $items: [this._appendAuthoringBar(), FieldsTest.prototype.appendSettingsBar.call(this)]
        };
    }
});
