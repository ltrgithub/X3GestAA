"use strict";
var helpers = require("syracuse-core/lib/helpers")
var FieldsTest = require("../fieldsTest").FieldsTest;
var ListAuthoring = require("syracuse-ui/lib/field/array/authoring/listAuthoring").ListAuthoring;
function ArrayFieldTest(){
}

exports.ArrayFieldTest = helpers.defineClass(ArrayFieldTest, FieldsTest, {
    onFetchHandler: function(options){
        if (options && options.params) {
            delete options.field;
            this.sendServerData(options);
        }
    },
    notifyActionChange: function(target, value){
        if (value.$empty || value.$refresh) {
            if (value.$empty) {
                this.refreshList([]);
            }
            if (value.$refresh) {
                this.refreshList();
            }
            return;
        }
        FieldsTest.prototype.notifyActionChange.call(this, target, value);
    },
    notifyDataChange: function(field, value){
        switch (field.$item.$bind) {
            case "$fieldRecordCount":
                this.refreshList();
                break;
            default:
                FieldsTest.prototype.notifyDataChange.call(this, field, value);
                break;
        }
    },
    loadBox: function(){
        FieldsTest.prototype.loadBox.call(this, this._makeArrayPrototype(), {
            $fieldRecordCount: 8
        });
        this._showCapablities();
        this.designedField = this.boundFields["xarray"][0];
        
        this._appendAuthoring();
        this.refreshList();
        
        var page = this.getPage();
        page.dataset.$etag = 1;
    },
    _appendAuthoring: function(){
        (this.authoring = new ListAuthoring()).loadBox(this);
        this.authoring.designedTestFields = this.boundFields["xarray"];
        this.idMap.authoringTest.$$body.empty().append(this.authoring.layoutContent.$$container);
        this.authoring.bindFieldEvents(this.authoring.layoutContent.$$container);
    },
    _makeArrayPrototype: function(){
        return {
            "$properties": {
                "$field$editMode": {
                    $title: "$editMode",
                    $type: "application/x-choice",
                    $isHidden: true,
                    $value: {
                        $type: "application/x-integer",
                        $enum: [{
                            $value: "array",
                            $title: "array (default)"
                        }, {
                            $value: "record",
                            $title: "record"
                        }, {
                            $value: "cell",
                            $title: "cell"
                        }]
                    }
                },
                "$field$type": {
                    $isHidden: true
                },
                "$field$isTopLabelAlignment": {
                    $isHidden: true
                },
                "$field$isRightTextLabelAlignment": {
                    $isHidden: true
                },
                $fieldRecordCount: {
                    $title: "Record Count",
                    "$type": "application/x-integer"
                },
                "xarray": {
                    "$title": "xarray",
                    "$capabilities": "sort,filter,insert,append,delete,reorder",
                    "$type": "application/x-array",
                    "$itemsPerPage": 5,
                    "$item": {
                        "$descriptor": "prototype employee.$edit",
                        "$type": "application/json",
                        "$pluralType": "children",
                        "$representation": "employee",
                        "$properties": {
                            "xstring": {
                                "$title": "xstring",
                                "$type": "application/x-string",
                                
                                "$maxLength": 30,
                                "$capabilities": "sort,filter,alphaTab"
                            },
                            "xchoice": {
                                $title: "xchoice",
                                $type: "application/x-choice",
                                $value: {
                                    $type: "application/x-integer",
                                    $enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value){
                                        return {
                                            "$value": value,
                                            $title: "Value " + value
                                        };
                                    })
                                }
                            },
                            "xdate": {
                                $title: "xdate",
                                $type: "application/x-date",
                                "$capabilities": "sort,filter,alphaTab"
                            },
                            "xboolean": {
                                $title: "xboolean",
                                $type: "application/x-boolean",
                                "$capabilities": "sort,filter"
                            },
                            "xdecimal": {
                                $title: "xdecimal",
                                $type: "application/x-decimal",
                                "$capabilities": "sort,filter",
                                
                                "$isNullable": true
                            }
                        },
                        "$links": {},
                        "$actions": {}
                    },
                    "$actions": {}
                }
            },
            "$actions": {
            
                "$empty": {
                    "$title": "Empty list",
                    "$method": "PUT"
                },
                "$refresh": {
                    "$title": "Refresh list",
                    "$method": "PUT"
                }
            }
        };
    },
    refreshList: function(records){
        if (records === undefined) {
            var $fieldRecordCount = this.boundFields.$fieldRecordCount[0].getDataValue();
            records = this.getResources().getRecords($fieldRecordCount);
            records.forEach(function(record){
                delete record.$index;
            });
            this.boundFields.$field$dataset[0].setDataValue(JSON.stringify(records));
        }
        this.applyChange({
            $properties: {
                $field$LinksTypeMetaDataOnly: {
                    $isReadOnly: false
                },
                "xarray": {
                    $totalResults: records.length
                }
            },
            $field$editMode: "array",
            "xarray": records
        });
    },
    appendSettingsBar: function(){
        var $items = FieldsTest.prototype.appendSettingsBar.call(this);
        $items.unshift({
            $layoutType: "stack",
            $items: [{
                $layoutType: "row",
                $items: [{
                    $skin: "s-record-menus-link",
                    $category: "link",
                    $bind: "$empty"
                }, {
                    $skin: "s-record-menus-link",
                    $category: "link",
                    $bind: "$refresh"
                }]
            
            }, {
                $bind: "$fieldRecordCount",
                $isEditMode: true
            }, {
                $bind: "$field$editMode",
                $isEditMode: true
            }]
        });
        $items.push({
            $category: "block",
            $title: "Authoring",
            $id: "authoringTest",
            $layout: {
                $items: []
            }
        });
        return $items;
    },
    notifyActionLinkChange: function(metaData, useMetaDataOnly){
        var self = this;
        var dataRecordSet = {
            $properties: {}
        };
        Object.keys(self.boundFields).forEach(function(bind){
            if (bind.indexOf("$field") != 0) {
                var $fieldProperty = self.$prototype.$properties[bind];
                dataRecordSet.$properties[bind] = helpers.object.clone(metaData, true);
                if ($fieldProperty.$type == "application/x-object") {
                    dataRecordSet.$properties[bind] = {
                        $item: dataRecordSet.$properties[bind]
                    };
                }
                else {
                    var $recordItem = self.$prototype.$properties[bind].$item;
                    if ($recordItem) {
                        if (useMetaDataOnly) {
                            dataRecordSet.$properties[bind].$items = [];
                            self.dataset[bind].forEach(function(dataRecord){
                                var $item = helpers.object.clone(metaData, true);
                                //collection fields with multi - columns
                                $item.$uuid = dataRecord.$uuid;
                                $item.$properties = {};
                                Object.keys($recordItem.$properties).forEach(function($bind){
                                    $item.$properties[$bind] = helpers.object.clone(metaData, true);
                                });
                                dataRecordSet.$properties[bind].$items.push($item);
                            });
                        }
                        else {
                            dataRecordSet[bind] = [];
                            self.dataset[bind].forEach(function(dataRecord){
                                dataRecord.$links = helpers.object.clone(metaData.$links, true);
                                dataRecord.$actions = helpers.object.clone(metaData.$actions, true);
                                dataRecord.$properties = {};
                                Object.keys($recordItem.$properties).forEach(function($bind){
                                    dataRecord.$properties[$bind] = helpers.object.clone(metaData, true);
                                });
                                dataRecordSet[bind].push(dataRecord);
                            });
                        }
                    }
                }
            }
        });
        self.applyChange(dataRecordSet);
    },
    notifyDiagnoses: function(value, useMetaDataOnly){
        var self = this;
        var dataRecordSet = {
            $properties: {}
        };
        Object.keys(self.boundFields).forEach(function(bind){
            var metaData = self._fillDiagnoses(value, bind);
            if (bind.indexOf("$field") != 0) {
                var $fieldProperty = self.$prototype.$properties[bind];
                dataRecordSet.$properties[bind] = {
                    $diagnoses: metaData.$diagnoses
                };
                var $recordItem = self.$prototype.$properties[bind].$item;
                if (useMetaDataOnly) {
                    dataRecordSet.$properties[bind].$items = [];
                    self.dataset[bind].forEach(function(dataRecord){
                        var $item = {
                            $diagnoses: metaData.$diagnoses
                        };
                        $item.$uuid = dataRecord.$uuid;
                        $item.$properties = {};
                        Object.keys($recordItem.$properties).forEach(function($bind){
                            $item.$properties[$bind] = {
                                $diagnoses: metaData.$diagnoses
                            };
                        });
                        dataRecordSet.$properties[bind].$items.push($item);
                    });
                }
                else {
                    dataRecordSet[bind] = [];
                    self.dataset[bind].forEach(function(dataRecord){
                        if ($recordItem.$properties) {
                            dataRecord.$properties = {};
                            Object.keys($recordItem.$properties).forEach(function($bind){
                                dataRecord.$properties[$bind] = self._fillDiagnoses(value, bind);
                            });
                        }
                        dataRecordSet[bind].push(dataRecord);
                    });
                }
            }
        });
        self.applyChange(dataRecordSet);
    }
});
