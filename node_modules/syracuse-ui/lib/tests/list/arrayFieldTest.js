"use strict";
var helpers = require("syracuse-core/lib/helpers")
var FieldsTest = require("../fieldsTest").FieldsTest;
var ListAuthoring = require("syracuse-ui/lib/field/array/authoring/listAuthoring").ListAuthoring;
function ArrayFieldTest(){
}

exports.ArrayFieldTest = helpers.defineClass(ArrayFieldTest, FieldsTest, {
    fetch: function(options, callback){
        var self = this;
        if (options && options.params) {
            var list = options.field;
            var $orderBy;
            var resource = {
                dataRecordSet: self.dataset[list.$item.$bind]
            };
            if (options.params.orderBy) {
                $orderBy = list._store.sortCapability.parse(options.params.orderBy);
                if (options.params.startLetter) {
                    list._store.sortCapability.filterByStartLetter(resource, {
                        binding: $orderBy[0].binding,
                        startLetter: options.params.startLetter
                    });
                }
                list._store.sortCapability.syracuseSort(resource, $orderBy);
            }
            if (options.params.count || options.params.startIndex) {
                list._store.pagingCapability.goToPage(resource, {
                    $itemsPerPage: options.params.count,
                    $startIndex: options.params.startIndex
                });
            }
            //for Client
            var dataRecordSet = resource.dataRecordSet;
            delete resource.dataRecordSet;
            self.boundFields["xarray"].forEach(function(field){
                field.setDataBind(dataRecordSet, self.dataset, resource);
            });
            
            //simu server
            /* this.applyChange({
             $properties: {
             "xarray": {
             $startLetter: options.params.startLetter,
             $orderBy: $orderBy
             }
             },
             "xarray": resource.dataRecordSet
             })*/
        }
        delete options.field;
        this.boundFields.$fieldServerData[0].setDataValue(JSON.stringify(options));
    },
    loadBox: function(){
        var $prototype = {
            "$properties": {
                "$field$type": {
                    $isHidden: true
                },
                "$field$isTopLabelAlignment": {
                    $isHidden: true
                },
                "$field$isRightTextLabelAlignment": {
                    $isHidden: true
                },
                $fieldRecordCount: {
                    $title: "Record Count",
                    "$type": "application/x-integer"
                },
                "xarray": {
                    "$title": "xarray",
                    "$capabilities": "sort,filter,insert,append,delete,reorder",
                    "$type": "application/x-array",
                    "$itemsPerPage": 5,
                    "$item": {
                        "$descriptor": "prototype employee.$edit",
                        "$type": "application/json",
                        "$pluralType": "children",
                        "$representation": "employee",
                        "$properties": {
                            "xstring": {
                                "$title": "xstring",
                                "$type": "application/x-string",
                                
                                "$maxLength": 30,
                                "$capabilities": "sort,filter,alphaTab"
                            },
                            "xchoice": {
                                $title: "xchoice",
                                $type: "application/x-choice",
                                $value: {
                                    $type: "application/x-integer",
                                    $enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value){
                                        return {
                                            "$value": value,
                                            $title: "Value " + value
                                        };
                                    })
                                }
                            },
                            "xdate": {
                                $title: "xdate",
                                $type: "application/x-date",
                                "$capabilities": "sort,filter,alphaTab"
                            },
                            "xboolean": {
                                $title: "xboolean",
                                $type: "application/x-boolean",
                                "$capabilities": "sort,filter"
                            },
                            "xdecimal": {
                                $title: "xdecimal",
                                $type: "application/x-decimal",
                                "$capabilities": "sort,filter",
                                
                                "$isNullable": true
                            }
                        },
                        "$links": {},
                        "$actions": {
                            "$delete": {
                                "$title": "Supprimer",
                                "$method": "PUT"
                            }
                        }
                    },
                    "$actions": {
                        "$create": {
                            "$title": "Ajouter",
                            "$method": "PUT"
                        }
                    }
                }
            },
            "$actions": {
            
                "$empty": {
                    "$title": "Empty list",
                    "$method": "PUT"
                },
                "$refresh": {
                    "$title": "Refres list",
                    "$method": "PUT"
                }
            }
        };
        FieldsTest.prototype.loadBox.call(this, $prototype, {
            $fieldRecordCount: 8
            /*,
             "xarray": this.getResources().getRecords(8)*/
        });
        this.designedField = this.boundFields["xarray"][0];
        
        (this.authoring = new ListAuthoring()).loadBox(this);
        this.authoring.designedTestFields = this.boundFields["xarray"];
        this.idMap.authoringTest.$$body.empty().append(this.authoring.layoutContent.$$container);
        this.authoring.bindFieldEvents(this.authoring.layoutContent.$$container);
        this.refreshList();
    },
    refreshList: function(records){
        if (records === undefined) {
            var $fieldRecordCount = this.boundFields.$fieldRecordCount[0].getDataValue();
            this.boundFields.$field$dataset[0].setDataValue(JSON.stringify(records = this.getResources().getRecords($fieldRecordCount)));
        }
        this.applyChange({
            $properties: {
                "xarray": {
                    $totalResults: records.length
                }
            },
            "xarray": records
        });
    },
    onNotifyRecordChange: function(value, binding){
        if (binding == "$fieldRecordCount") {
            this.refreshList();
            return null
        }
        else {
            if (binding == "$actions" && (value.$empty || value.$refresh)) {
                if (value.$empty) {
                    this.refreshList([]);
                }
                else {
                    this.refreshList();
                }
                return null;
            }
        }
        FieldsTest.prototype.onNotifyRecordChange.call(this, value, binding);
        return null; //cancel notify
    },
    appendSettingsBar: function(){
        var $items = FieldsTest.prototype.appendSettingsBar.call(this);
        $items.unshift({
            $layoutType: "stack",
            $items: [{
                $layoutType: "row",
                $items: [{
                    $skin: "s-list-record-menus-link",
                    $category: "link",
                    $bind: "$empty"
                }, {
                    $skin: "s-list-record-menus-link",
                    $category: "link",
                    $bind: "$refresh"
                }]
            
            }, {
                $bind: "$fieldRecordCount",
                $isEditMode: true
            }]
        });
        $items.push({
            $category: "block",
            $title: "Authoring",
            $id: "authoringTest",
            $css: "s-authoring-list-test",
            $layout: {
                $items: []
            }
        });
        return $items;
    }
});
