"use strict";
var helpers = require("syracuse-core/lib/helpers")
var FieldsTest = require("../fieldsTest").FieldsTest;
var ListAuthoring = require("syracuse-ui/lib/field/array/authoring/listAuthoring").ListAuthoring;
var convergenceStyle = require("./convergenceStyle");
var deltaTests = require("./deltaTests");
function ArrayFieldTest(){
}

exports.ArrayFieldTest = helpers.defineClass(ArrayFieldTest, FieldsTest, {
    onFetchHandler: function(options){
        if (options && options.params) {
            delete options.field;
            this.sendServerData(options);
        }
    },
    _makeBlock: function($isEditMode){
        var self = this;
        return [{
            $layoutType: "tabs",
            $items: [{
                $category: "section",
                $title: "Scroll",
                $layout: {
                    $items: [{
                        $bind: "xarray",
                        $isEditMode: true
                    }]
                }
            }, {
                $category: "section",
                $title: "Edit",
                $layout: {
                    $items: [{
                        $bind: "xarray",
                        $isEditMode: true
                    }, {
                        $bind: "xarray",
                        $format: "vgrid",
                        $isEditMode: true
                    }, {
                        $bind: "xarray",
                        $isEditMode: true,
                        $format: "cards",
                        $cardsByRowCount: 2,
                        $cards: {
                            $layout: {
                                $items: [{
                                    $layoutType: "columns",
                                    $layoutSubType: "50,50",
                                    $items: [{
                                        $layoutType: "stack",
                                        $items: [{
                                            $bind: "xstring"
                                        }]
                                    }, {
                                        $layoutType: "stack",
                                        $items: [{
                                            $bind: "xchoice"
                                        }]
                                    }]
                                }, {
                                    $layoutType: "tabs",
                                    $items: [{
                                        $category: "block",
                                        $title: "tab1",
                                        $layout: {
                                            $items: [{
                                                $bind: "xdate"
                                            }]
                                        }
                                    
                                    }, {
                                        $category: "block",
                                        $title: "tab2",
                                        $layout: {
                                            $items: [{
                                                $bind: "xboolean"
                                            }, {
                                                $bind: "xdecimal"
                                            }]
                                        }
                                    
                                    }]
                                }]
                            
                            }
                        
                        }
                    }]
                }
            }, {
                $category: "section",
                $title: "Fill",
                $layout: {
                    $items: ["grid", "vgrid", "cards"].map(function($format){
                        return {
                            $format: $format,
                            $bind: "xarray",
                            $selectMode: "single",
                            $cardsByRowCount: 3,
                            $layout: {
                                $items: [{
                                    "$bind": "xstring"
                                }, {
                                    "$bind": "xchoice"
                                }, {
                                    "$bind": "xdate"
                                }, {
                                    "$bind": "xboolean"
                                }, {
                                    "$bind": "xdecimal"
                                }]
                            }
                        };
                    })
                }
            
            }, {
                $category: "section",
                $title: "Grid",
                $layout: {
                    $items: [self._makeEditReadBlock("xarray", [{
                        $bind: "xarray"
                    }]), {
                        $bind: "xarray"
                    }]
                }
            }, {
                $category: "section",
                $title: "VGrid",
                $layout: {
                    $items: [self._makeEditReadBlock("xarray", [{
                        $bind: "xarray",
                        $format: "vgrid",
                    }]), {
                        $bind: "xarray",
                        $format: "vgrid",
                    }]
                }
            }, {
                $category: "section",
                $title: "Cards",
                $layout: {
                    $items: [self._makeEditReadBlock("xarray", [self._getCard()]), self._getCard()]
                }
            }, {
                $category: "section",
                $title: "Selection",
                $layout: {
                    $items: ["grid", "vgrid", "cards"].map(function($format){
                        return {
                            $category: "section",
                            $title: "Format " + $format,
                            $layout: {
                                $layoutType: "columns",
                                $layoutSubType: "50,50",
                                $items: [{
                                    $layoutType: "stack",
                                    $items: ["multi", "single"].map(function($selectMode){
                                        return self._makeField($selectMode, $format);
                                    })
                                }, {
                                    $layoutType: "stack",
                                    $items: ["button", "row"].map(function($selectMode){
                                        return self._makeField($selectMode, $format);
                                    })
                                }]
                            }
                        };
                    })
                }
            }]
        
        }];
    },
    _makeField: function($selectMode, $format){
        return {
            $title: "$selectMode = " + $selectMode,
            $format: $format,
            $bind: "xarray",
            $selectMode: $selectMode,
            $cardsByRowCount: 2,
            $layout: {
                $items: [{
                    "$bind": "xstring"
                }, {
                    "$bind": "xchoice"
                }]
            }
        };
    },
    _getCard: function(){
        return {
            $bind: "xarray",
            $format: "cards",
            $cards: {
                $layout: {
                    $items: [{
                        $layoutType: "columns",
                        $layoutSubType: "50,50",
                        $items: [{
                            $layoutType: "stack",
                            $items: [{
                                $bind: "xstring"
                            }]
                        }, {
                            $layoutType: "stack",
                            $items: [{
                                $bind: "xchoice"
                            }]
                        }]
                    }, {
                        $layoutType: "tabs",
                        $items: [{
                            $category: "block",
                            $title: "tab1",
                            $layout: {
                                $items: [{
                                    $bind: "xdate"
                                }]
                            }
                        
                        }, {
                            $category: "block",
                            $title: "tab2",
                            $layout: {
                                $items: [{
                                    $bind: "xboolean"
                                }, {
                                    $bind: "xdecimal"
                                }]
                            }
                        
                        }]
                    }]
                
                }
            
            }
        };
    },
    notifyActionChange: function(target, value){
        if (value.$openSpy) {
            document.site.openSpy();
            return false;
        }
        if (value.$empty || value.$refresh) {
            if (value.$empty) {
                this.refreshList([]);
            }
            if (value.$refresh) {
                this.refreshList();
            }
            return;
        }
        if (value.$applyStyleToArray || value.$applyStyleToRecord || value.$applyStyleToField) {
            var level = value.$applyStyleToArray ? "array" : value.$applyStyleToRecord ? "record" : "field";
            this._notifyConvergenceStyle(convergenceStyle.$styles[this.dataset.$field$fieldStyle].$css, level);
        }
        if (value.$deleteItem || value.$insertItem || value.$reorderItem) {
            var self = this;
            var records = [];
            if (value.$deleteItem) {
                records.push({
                    "$uuid": "record1",
                    "$isDeleted": true
                });
            }
            if (value.$insertItem) {
                [{
                    "$uuid": helpers.uuid.generate(),
                    "$index": 1
                }                /*, {
                 "$uuid": helpers.uuid.generate(),
                 "$index": 3
                 }*/
                ].forEach(function(item){
                    item.xstring = item.$uuid;
                    records.push(item);
                });
            }
            if (value.$reorderItem) {
                records.push({
                    "$uuid": "record1",
                    "$index": 5
                });
                records.push({
                    "$uuid": "record5",
                    "$index": 2
                });
            }
            this.isDeltaMode = true;
            this.applyChange({
                //$isFullDelta: true,
                "xarray": records
            }, true);
            return;
        }
        FieldsTest.prototype.notifyActionChange.call(this, target, value);
    },
    notifyDataChange: function(field, value){
        var notify = true;
        switch (field.$item.$bind) {
            case "$field$PartialDelta":
                this.applyEdit(deltaTests.fullDelta[value], true);
                break;
            case "$field$DefaultDeltaMode":
                this.applyEdit(deltaTests.defaultDelta[value], false);
                break;
            case "$field$fixedBodyHeight":
                var numValue = parseInt(value || 0, 10);
                if (numValue) {
                    var min = Math.max(35, numValue) + "";
                    if (min != value) {
                        field.setDataValue(min);
                        value = min;
                    }
                }
                break;
            case "$fieldRecordCount":
                this.refreshList();
                notify = false;
                break;
            case "$field$fieldStyle":
                this.applyChange({
                    $field$fieldStyleDesc: convergenceStyle.$styles[value].$css
                });
                
                break;
        }
        if (notify) {
            FieldsTest.prototype.notifyDataChange.call(this, field, value);
        }
    },
    applyEdit: function($choice, isFullDelta){
        //insert one Record
        this.refreshList();
        this.isDeltaMode = true;
        var delta = {
            $isFullDelta: isFullDelta,
            "xarray": $choice.records
        };
        this.boundFields.$fieldJsonDelta[0].setDataValue(JSON.stringify(delta, null, 2));
        this.applyChange(delta, true);
    },
    _initiliazeTestPage: function(){
        FieldsTest.prototype._initiliazeTestPage.call(this);
        this.deltaManager.applyObjectDelta(this.$prototype, this._makeArrayPrototype(), true);
    },
    loadBox: function(){
        var self = this;
        FieldsTest.prototype.loadBox.call(self, {
            $fieldRecordCount: 8,
            $field$fixedBodyHeight: 0,
            $field$fitContainer: false,
            $field$fieldStyle: Object.keys(convergenceStyle.$styles)[0]
        });
        self._showCapablities();
        //find first DeskttopKlist
        self.boundFields["xarray"].some(function(item){
            if (item.builder) {
                self.designedField = item;
            }
            return self.designedField != null;
        });
        
        self._appendAuthoring();
        self.refreshList();
        
        self.page.dataset.$etag = 1;
    },
    _appendAuthoring: function(){
        (this.authoring = new ListAuthoring()).loadBox(this);
        this.authoring.designedTestFields = this.boundFields["xarray"].filter(function(item){
            return item.builder != null;
        });
        this.idMap.authoringTest.$$body.empty().append(this.authoring.layoutContent.$$container)[0].style.backgroundColor = "#222222";
        this.authoring.layoutContent.$$container.attr("data-s-article", this.authoring.id);
    },
    _makeArrayPrototype: function(){
        return {
            "$properties": {
                $fieldJsonDelta: {
                    "$title": "delta",
                    "$type": "application/x-string"
                },
                "$field$PartialDelta": {
                    $title: "isPartialDelta",
                    "$type": "application/x-choice",
                    "$value": {
                        $type: "application/x-integer",
                        $enum: deltaTests.fullDelta.map(function($item, index){
                            return {
                                $value: index,
                                $title: $item.$title
                            };
                        })
                    }
                },
                "$field$DefaultDeltaMode": {
                    $title: "isDeltaMode",
                    "$type": "application/x-choice",
                    "$value": {
                        $type: "application/x-integer",
                        $enum: deltaTests.defaultDelta.map(function($item, index){
                            return {
                                $value: index,
                                $title: $item.$title
                            };
                        })
                    }
                },
                "$field$editMode": {
                    $title: "$editMode",
                    $type: "application/x-choice",
                    $isHidden: true,
                    $value: {
                        $type: "application/x-integer",
                        $enum: [{
                            $value: "array",
                            $title: "array (default)"
                        }, {
                            $value: "record",
                            $title: "record"
                        }, {
                            $value: "cell",
                            $title: "cell"
                        }]
                    }
                },
                "$field$fieldStyle": {
                    $title: "$fieldStyle",
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-integer",
                        $enum: Object.keys(convergenceStyle.$styles).map(function($key){
                            return {
                                $value: $key,
                                $title: $key
                            }
                        })
                    }
                },
                "$field$fieldStyleDesc": {
                    $type: "application/x-string"
                },
                "$field$type": {
                    $isHidden: true
                },
                "$field$isTopLabelAlignment": {
                    $isHidden: true
                },
                "$field$isRightTextLabelAlignment": {
                    $isHidden: true
                },
                $fieldRecordCount: {
                    $title: "Records",
                    "$type": "application/x-integer"
                },
                $field$fitContainer: {
                    $title: "$fitContainer",
                    "$type": "application/x-boolean"
                },
                $field$fixedBodyHeight: {
                    $title: "$fixedBodyHeight",
                    "$type": "application/x-integer"
                },
                "xarray": {
                    "$title": "xarray",
                    "$capabilities": "sort,filter,insert,append,delete,reorder",
                    "$type": "application/x-array",
                    "$itemsPerPage": 5,
                    "$item": {
                        "$descriptor": "prototype employee.$edit",
                        "$type": "application/json",
                        "$pluralType": "children",
                        "$representation": "employee",
                        "$properties": {
                            "xstring": {
                                "$title": "xstring",
                                "$type": "application/x-string",
                                
                                "$maxLength": 30,
                                "$capabilities": "sort,filter,alphaTab"
                            },
                            "xchoice": {
                                $title: "xchoice",
                                $type: "application/x-choice",
                                $value: {
                                    $type: "application/x-integer",
                                    $enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value){
                                        return {
                                            "$value": value,
                                            $title: "Value " + value
                                        };
                                    })
                                }
                            },
                            "xdate": {
                                $title: "xdate",
                                $type: "application/x-date",
                                "$capabilities": "sort,filter,alphaTab"
                            },
                            "xboolean": {
                                $title: "xboolean",
                                $type: "application/x-boolean",
                                "$capabilities": "sort,filter"
                            },
                            "xdecimal": {
                                $title: "xdecimal",
                                $type: "application/x-decimal",
                                "$capabilities": "sort,filter",
                                
                                "$isNullable": true
                            }
                        },
                        "$links": {},
                        "$actions": {}
                    },
                    "$actions": {}
                }
            },
            "$actions": {
                "$empty": {
                    "$title": "Empty list",
                    "$method": "PUT"
                },
                "$refresh": {
                    "$title": "Refresh list",
                    "$method": "PUT"
                },
                "$applyStyleToArray": {
                    "$title": "apply to list"
                },
                "$applyStyleToRecord": {
                    "$title": "apply to record"
                },
                "$applyStyleToField": {
                    "$title": "apply to field"
                }
            }
        };
    },
    getDefaultRecords: function(){
        var $fieldRecordCount = this.boundFields.$fieldRecordCount[0].getDataValue();
        var records = this.getResources().getRecords($fieldRecordCount);
        records.forEach(function(record){
            delete record.$index;
        });
        //this.boundFields.$field$dataset[0].setDataValue(JSON.stringify(records, null, 2));
        return records;
    },
    refreshList: function(records){
        if (records === undefined) {
            records = this.getDefaultRecords();
        }
        this.applyChange({
            $properties: {
                $field$LinksTypeMetaDataOnly: {
                    $isReadOnly: false
                },
                "xarray": {
                    $totalResults: records.length
                }
            },
            $field$editMode: "array",
            "xarray": records
        });
    },
    _defineArticle: function(){
        FieldsTest.prototype._defineArticle.call(this);
        this.$item.$layout.$layoutSubType = "60,40";
    },
    appendEditMode: function($items){
        return [{
            $layout: {
                $layoutType: "tabs",
                $items: [{
                    $category: "section",
                    $title: "Settings",
                    $layout: {
                        $items: $items
                    }
                }, {
                    $category: "section",
                    $id: "editSection",
                    $title: "Edit",
                    $layout: {
                        $layoutType: "columns",
                        $layoutSubType: "40,60",
                        $items: [{
                            $layoutType: "stack",
                            $items: [{
                                $bind: "$field$PartialDelta",
                                $isEditMode: true,
                                $format: "$radios",
                                $choiceLayout: 1
                            }, {
                                $bind: "$field$DefaultDeltaMode",
                                $isEditMode: true,
                                $format: "$radios",
                                $choiceLayout: 1
                            }]
                        }, {
                            $layoutType: "stack",
                            $items: [{
                                $bind: "$fieldJsonDelta",
                                $isEditMode: true,
                                $rows: 30,
                                $skin: "s-json-field"
                            }]
                        }]
                    
                    }
                }]
            }
        }];
    },
    appendSettingsBar: function(){
        var $items = FieldsTest.prototype.appendSettingsBar.call(this);
        $items.push({
            $category: "block",
            $title: "$actions",
            $layout: {
                $layoutType: "row",
                $items: [{
                    $category: "link",
                    $bind: "$deleteItem",
                    $isEditMode: true
                }, {
                    $category: "link",
                    $bind: "$insertItem",
                    $isEditMode: true
                }, {
                    $category: "link",
                    $bind: "$reorderItem",
                    $isEditMode: true
                }]
            }
        });
        $items.unshift({
            $layoutType: "stack",
            $items: [{
                $layoutType: "row",
                $items: [{
                    $skin: "s-record-menus-link",
                    $category: "link",
                    $bind: "$empty"
                }, {
                    $skin: "s-record-menus-link",
                    $category: "link",
                    $bind: "$refresh"
                }]
            
            }, {
                $layoutType: "row",
                $items: [{
                    $bind: "$fieldRecordCount",
                    $isEditMode: true
                }, {
                    $bind: "$field$fixedBodyHeight",
                    $isEditMode: true
                }, {
                    $bind: "$field$fitContainer",
                    $isEditMode: true
                }]
            }, {
                $layoutType: "row",
                $items: [{
                    $bind: "$field$editMode",
                    $format: "$combo",
                    $isEditMode: true
                }]
            }, {
                $category: "block",
                $title: "$styles",
                $layout: {
                    $items: [{
                        $layoutType: "row",
                        $items: [{
                            $skin: "s-record-menus-link",
                            $category: "link",
                            $bind: "$applyStyleToArray"
                        }, {
                            $skin: "s-record-menus-link",
                            $category: "link",
                            $bind: "$applyStyleToRecord"
                        }, {
                            $skin: "s-record-menus-link",
                            $category: "link",
                            $bind: "$applyStyleToField"
                        }]
                    
                    }, {
                        $bind: "$field$fieldStyle",
                        $choiceLayout: 4,
                        $format: "$combo",
                        $isEditMode: true
                    }, {
                        $bind: "$field$fieldStyleDesc",
                        $isTitleHidden: true
                    }]
                }
            }]
        });
        $items.push({
            $category: "block",
            $title: "Authoring",
            $id: "authoringTest",
            $layout: {
                $items: []
            }
        });
        return this.appendEditMode($items);
    },
    _notifyConvergenceStyle: function($fieldStyle, level){
        var self = this;
        var dataRecordSet = {
            $properties: {}
        };
        switch (level) {
            case "array":
                dataRecordSet.$properties.xarray = {
                    $fieldStyle: $fieldStyle
                };
                break;
            case "record":
                break;
            case "field":
                var $recordItem = self.$prototype.$properties["xarray"].$item;
                self.dataset["xarray"].forEach(function(dataRecord, recordIndex){
                    if ($recordItem.$properties) {
                        dataRecord.$properties = {};
                        Object.keys($recordItem.$properties).forEach(function($bind, fieldIndex){
                            if ((recordIndex % 2 == 0 && fieldIndex % 2) || (recordIndex % 2 != 0 && fieldIndex % 2 == 0)) 
                                dataRecord.$properties[$bind] = {
                                    $fieldStyle: $fieldStyle
                                };
                        });
                    }
                    (dataRecordSet["xarray"] = dataRecordSet["xarray"] || []).push(dataRecord);
                });
                break;
                
        }
        self.applyChange(dataRecordSet);
    },
    notifyActionLinkChange: function(metaData, useMetaDataOnly){
        var self = this;
        var dataRecordSet = {
            $properties: {}
        };
        Object.keys(self.boundFields).forEach(function(bind){
            if (bind.indexOf("$field") != 0) {
                var $fieldProperty = self.$prototype.$properties[bind];
                dataRecordSet.$properties[bind] = helpers.object.clone(metaData, true);
                if ($fieldProperty.$type == "application/x-object") {
                    dataRecordSet.$properties[bind] = {
                        $item: dataRecordSet.$properties[bind]
                    };
                }
                else {
                    var $recordItem = self.$prototype.$properties[bind].$item;
                    if ($recordItem) {
                        if (useMetaDataOnly) {
                            dataRecordSet.$properties[bind].$items = [];
                            self.dataset[bind].forEach(function(dataRecord){
                                var $item = helpers.object.clone(metaData, true);
                                //collection fields with multi - columns
                                $item.$uuid = dataRecord.$uuid;
                                $item.$properties = {};
                                Object.keys($recordItem.$properties).forEach(function($bind){
                                    $item.$properties[$bind] = helpers.object.clone(metaData, true);
                                });
                                dataRecordSet.$properties[bind].$items.push($item);
                            });
                        }
                        else {
                            dataRecordSet[bind] = [];
                            self.dataset[bind].forEach(function(dataRecord){
                                dataRecord.$links = helpers.object.clone(metaData.$links, true);
                                dataRecord.$actions = helpers.object.clone(metaData.$actions, true);
                                dataRecord.$properties = {};
                                Object.keys($recordItem.$properties).forEach(function($bind){
                                    dataRecord.$properties[$bind] = helpers.object.clone(metaData, true);
                                });
                                dataRecordSet[bind].push(dataRecord);
                            });
                        }
                    }
                }
            }
        });
        self.applyChange(dataRecordSet);
    },
    notifyDiagnoses: function(value, useMetaDataOnly){
        var self = this;
        var dataRecordSet = {
            $properties: {}
        };
        Object.keys(self.boundFields).forEach(function(bind){
            var metaData = self._fillDiagnoses(value, bind);
            if (bind.indexOf("$field") != 0) {
                var $fieldProperty = self.$prototype.$properties[bind];
                dataRecordSet.$properties[bind] = {
                    $diagnoses: metaData.$diagnoses
                };
                var $recordItem = self.$prototype.$properties[bind].$item;
                if (useMetaDataOnly) {
                    dataRecordSet.$properties[bind].$items = [];
                    self.dataset[bind].forEach(function(dataRecord){
                        var $item = {
                            $diagnoses: metaData.$diagnoses
                        };
                        $item.$uuid = dataRecord.$uuid;
                        $item.$properties = {};
                        Object.keys($recordItem.$properties).forEach(function($bind){
                            $item.$properties[$bind] = {
                                $diagnoses: metaData.$diagnoses
                            };
                        });
                        dataRecordSet.$properties[bind].$items.push($item);
                    });
                }
                else {
                    dataRecordSet[bind] = [];
                    self.dataset[bind].forEach(function(dataRecord){
                        if ($recordItem.$properties) {
                            dataRecord.$properties = {};
                            Object.keys($recordItem.$properties).forEach(function($bind){
                                dataRecord.$properties[$bind] = self._fillDiagnoses(value, bind);
                            });
                        }
                        dataRecordSet[bind].push(dataRecord);
                    });
                }
            }
        });
        self.applyChange(dataRecordSet);
    }
    
});
