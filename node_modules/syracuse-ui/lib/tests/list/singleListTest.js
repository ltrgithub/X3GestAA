"use strict";
var helpers = require("syracuse-core/lib/helpers")
var FieldsTest = require("../fieldsTest").FieldsTest;

function SingleListTest(){
}

exports.SingleListTest = helpers.defineClass(SingleListTest, FieldsTest, {
    notifyChange: function($bind, value){
        var self = this;
        switch ($bind) {
            case "$field$minItems":
            case "$field$maxItems":
                
                break;
                
            case "$actions":
                if (value.$deleteItem || value.$insertItem || value.$reorderItem) {
                    var fieldServerData = self.boundFields.$fieldServerData[0];
                    fieldServerData.setDataValue("");
                    Object.keys(self.boundFields).forEach(function($bind){
                        if ($bind.indexOf("array") == 0) {
                            self.boundFields[$bind].forEach(function(field, index){
                                if (index == 0) {
                                    var data = {};
                                    data[$bind] = field._store._records.map(function(row){
                                        return row.boundFields.$singleField[0].getDataValue();
                                    });
                                    if (value.$deleteItem) {
                                        data[$bind].shift();
                                    }
                                    if (value.$insertItem) {
                                        var newValue;
                                        switch ($bind) {
                                            case "arrayString":
                                                newValue = "new value";
                                                break;
                                            case "arrayEmail":
                                                newValue = "poupou@pidou.com";
                                                break;
                                            case "arrayChoice":
                                                newValue = 2;
                                                break;
                                            case "arrayDate":
                                                newValue = "2012-01-15"
                                                break;
                                            case "arrayBoolean":
                                                newValue = true;
                                                break;
                                            case "arrayDecimal":
                                                newValue = 454511.25;
                                                break;
                                            case "arrayDecimal":
                                                newValue = 454511.25;
                                                break;
                                            case "arrayReference":
                                                newValue = {
                                                    "$uuid": "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
                                                    "$key": "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
                                                    "code": "AD",
                                                    "description": "Andorra"
                                                };
                                        }
                                        data[$bind].splice(data[$bind].length > 1 ? 1 : 0, 0, newValue);
                                    }
                                    if (value.$reorderItem) {
                                        data[$bind].reverse();
                                    }
                                    fieldServerData.setDataValue(fieldServerData.getDataValue() + "\r\n" + JSON.stringify(data));
                                    self.applyChange(data);
                                }
                            });
                        }
                    });
                }
                break;
            default:
                if ($bind.indexOf("array") == 0) {
                    var sendBag = self.ensureSendBag();
                    if (self.dataset && self.dataset.$uuid) {
                        sendBag.$uuid = self.dataset.$uuid;
                    }
                    sendBag[$bind] = value;
                    sendBag.$etag = sendBag.$etag || 1;
                    self.sendServerData(sendBag);
                    return null;
                }
                break;
        }
        return FieldsTest.prototype.notifyChange.call(this, $bind, value);
    },
    _fillDiagnoses: function(value, $bind){
        var metaData = FieldsTest.prototype._fillDiagnoses.call(this, value, $bind);
        if ($bind.indexOf("array") == 0) {
            var field = this.boundFields[$bind][0];
            metaData.$items = [];
            var $diagnoseItem;
            if (value == "clear") {
                $diagnoseItem = null;
            }
            else {
                $diagnoseItem = [{
                    severity: "error",
                    message: "Error test for value"
                }];
                if (value == "full") {
                    $diagnoseItem.push({
                        severity: "warning",
                        message: "Warning test for value"
                    });
                    $diagnoseItem.push({
                        severity: "info",
                        message: "Info test for value"
                    });
                }
            }
            field.getDataSet().forEach(function(dataValue){
                metaData.$items.push({
                    $diagnoses: $diagnoseItem
                });
            });
        }
        return metaData;
    },
    loadBox: function(){
        var $maxItems = 4;
        var $minItems = 1;
        var $prototype = {
            "$properties": {
                $field$maxItems: {
                    $title: "$maxItems",
                    "$type": "application/x-integer"
                },
                $field$minItems: {
                    $title: "$minItems",
                    "$type": "application/x-integer"
                },
                arrayString: {
                    "$type": "application/x-array",
                    "$maxItems": $maxItems,
                    "$minItems": $minItems,
                    "$title": "Array string",
                    "$capabilities": "insert,append,delete,reorder",
                    "$item": {
                        "$type": "application/x-string",
                        
                        "$maxLength": 20
                    }
                },
                arrayEmail: {
                    "$type": "application/x-array",
                    "$maxItems": $maxItems,
                    "$minItems": $minItems,
                    "$title": "Array Email",
                    "$capabilities": "insert,append,delete,reorder",
                    "$item": {
                        "$type": "application/x-string",
                        "$format": "$email",
                        
                        "$maxLength": 20
                    }
                },
                arrayChoice: {
                    "$type": "application/x-array",
                    "$maxItems": $maxItems,
                    "$minItems": $minItems,
                    "$title": "Array Choice",
                    "$capabilities": "insert,append,delete,reorder",
                    "$item": {
                        "$type": "application/x-choice",
                        "$value": {
                            "$type": "application/x-integer",
                            
                            "$enum": [{
                                "$value": 1,
                                "$title": "Value 1"
                            }, {
                                "$value": 2,
                                "$title": "Value 2"
                            }, {
                                "$value": 3,
                                "$title": "Value 3"
                            }, {
                                "$value": 4,
                                "$title": "Value 4"
                            }, {
                                "$value": 5,
                                "$title": "Value 5"
                            }]
                        }
                    }
                },
                arrayDate: {
                    "$type": "application/x-array",
                    "$maxItems": $maxItems,
                    "$minItems": $minItems,
                    "$title": "Array Date",
                    "$capabilities": "insert,append,delete,reorder",
                    "$item": {
                        "$type": "application/x-date",
                        
                        "$maxLength": 20
                    }
                },
                arrayBoolean: {
                    "$type": "application/x-array",
                    "$maxItems": $maxItems,
                    "$minItems": $minItems,
                    "$title": "Array Boolean",
                    "$capabilities": "insert,append,delete,reorder",
                    "$item": {
                        "$type": "application/x-boolean",
                        
                        "$maxLength": 20
                    }
                },
                arrayDecimal: {
                    "$type": "application/x-array",
                    "$maxItems": $maxItems,
                    "$minItems": $minItems,
                    "$capabilities": "insert,append,delete,reorder",
                    "$title": "Array Decimal",
                    "$item": {
                        "$type": "application/x-decimal",
                        
                        "$maxLength": 20
                    }
                },
                arrayReference: {
                    "$type": "application/x-array",
                    "$maxItems": $maxItems,
                    "$minItems": $minItems,
                    "$capabilities": "insert,append,delete,reorder",
                    "$title": "Array Reference",
                    "$item": {
                        $representation: "employee",
                        $title: "xreference",
                        $isMandatory: false,
                        $capabilities: "sort,filter",
                        $type: "application/x-reference",
                        $value: "{code}",
                        $key: "{$uuid}",
                        "$properties": {
                            "code": {
                                "$type": "application/x-string"
                            },
                            "description": {
                                "$type": "application/x-string"
                            }
                        },
                        $links: {
                            "$details": {
                                "$type": "application/json;vnd.sage=syracuse",
                                "$url": "/sdata/sprint1/settings/sprint1/countries('{$uuid}')?representation=country.$details&role={$role}"
                            },
                            "$lookup": {
                                "$type": "application/json;vnd.sage=syracuse",
                                "$url": "/sdata/sprint1/settings/sprint1/countries?representation=country.$lookup&role={$role}&trackingId={$trackingId}&binding=country"
                            }
                        }
                    }
                },
            }
        };
        FieldsTest.prototype.loadBox.call(this, $prototype, {
            $field$maxItems: $maxItems,
            $field$minItems: $minItems,
            arrayString: ["dazhnda  d,aùe,dùe  daz dazed az", "deuxizem eada fa  ada", "troisième"],
            arrayEmail: ["toto@sage.com", "titi@sage.com", "tutu@sage.com"],
            arrayChoice: [2, 1, 5],
            arrayDate: ["2011-06-01", "2012-02-08", "2010-06-05"],
            arrayBoolean: [true, false, true],
            arrayDecimal: [2987111111111.4548, 248.8, 7635526.2],
            arrayReference: [{
                "$uuid": "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
                "$key": "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
                "code": "AD",
                "description": "Andorra"
            }]
        });
        this._showCapablities();
    },
    appendSettingsBar: function(){
        var $items = FieldsTest.prototype.appendSettingsBar.call(this);
        $items.push({
            $category: "block",
            $title: "Max Min Items",
            $layout: {
                $layoutType: "row",
                $items: [{
                    $bind: "$field$minItems",
                    $isEditMode: true
                }, {
                    $bind: "$field$maxItems",
                    $isEditMode: true
                }]
            }
        });
        $items.push({
            $category: "block",
            $title: "$actions",
            $layout: {
                $items: [{
                    $category: "link",
                    $bind: "$deleteItem",
                    $isEditMode: true
                }, {
                    $category: "link",
                    $bind: "$insertItem",
                    $isEditMode: true
                }, {
                    $category: "link",
                    $bind: "$reorderItem",
                    $isEditMode: true
                }]
            }
        });
        return $items;
    },
    _makeBlock: function($isEditMode){
        return [this._makeEditReadBlock("arrayString", [{
            $bind: "arrayString"
        }]), this._makeEditReadBlock("arrayEmail", [{
            $bind: "arrayEmail"
        }]), this._makeEditReadBlock("arrayChoice", [{
            $bind: "arrayChoice"
        }]), this._makeEditReadBlock("arrayDate", [{
            $bind: "arrayDate"
        }]), this._makeEditReadBlock("arrayBoolean", [{
            $bind: "arrayBoolean"
        }]), this._makeEditReadBlock("arrayDecimal", [{
            $bind: "arrayDecimal"
        }]), this._makeEditReadBlock("arrayReference", [{
            $bind: "arrayReference"
        }])];
    }
});
