"use strict";
var helpers = require("syracuse-core/lib/helpers");
var FieldsTest = require("./fieldsTest").FieldsTest;

function ChildFieldTest() {}

exports.ChildFieldTest = helpers.defineClass(ChildFieldTest, FieldsTest, {
	_initiliazeTestPage: function() {
		FieldsTest.prototype._initiliazeTestPage.call(this);
		syra_site.deltaManager.applyObjectDelta(this, this.$prototype.$properties, {
			"$field$type": {
				$isHidden: true
			},
			"$field$isTopLabelAlignment": {
				$isHidden: true
			},
			"$field$isRightTextLabelAlignment": {
				$isHidden: true
			},
			"xobject": {
				$title: "xobject",
				$type: "application/x-object",
				$item: {
					"$properties": {
						"xstring": {
							$title: "xstring",
							$type: "application/x-string",

							$maxLength: 30,
							$capabilities: "sort,filter",
							$links: {
								$tunnel: {},
								$lookup: {}
							}
						},
						"xsubobject": {
							$title: "xsubobject",
							$type: "application/x-object",
							$item: {
								"$properties": {
									"xstring": {
										$title: "xstring",
										$type: "application/x-string",

										$maxLength: 30,
										$capabilities: "sort,filter",
										$links: {
											$tunnel: {},
											$lookup: {}
										}
									}
								}
							}
						},
						"xchoice": {
							$title: "xchoice",
							$type: "application/x-choice",
							$value: {
								$type: "application/x-integer",
								$enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value) {
									return {
										"$value": value,
										$title: "Value " + value
									};
								})
							},
							$links: {
								$tunnel: {},
								$lookup: {}
							}
						},
						"xdate": {
							$title: "xdate",
							$type: "application/x-date",
							$links: {
								$tunnel: {},
								$lookup: {}
							}
						},
						"xtime": {
							$title: "xtime",
							$type: "application/x-time"
						},
						"xdatetime": {
							$title: "xdatetime",
							$type: "application/x-datetime"
						},
						"xboolean": {
							$title: "xboolean",
							$type: "application/x-boolean"
						},
						"$email": {
							$title: "$format: $email",
							$type: "application/x-string",
							$format: "$email"

						},
						"$phone": {
							$title: "$format: $phone",
							$type: "application/x-string",
							$format: "$phone"
						},
						"xinteger": {
							$title: "xinteger",
							$type: "application/x-integer",

							"$isNullable": true,
							"$capabilities": "sort,filter",
							$links: {
								$tunnel: {}
							}
						},
						"xdecimal": {
							$title: "xdecimal",
							$type: "application/x-decimal",

							"$isNullable": true
						},
						"xreference": {
							$pluralType: "employees",
							$baseUrl: "http://localhost:8126/sdata/sprint1/settings/sprint1",
							$representation: "employee",
							$title: "xreference",
							$isMandatory: false,
							$capabilities: "sort,filter",
							$type: "application/x-reference",
							"$item": {
								$url: "{$baseUrl}/{$pluralType}('{$key}')?representation={$representation}.$thumb",
								$value: "{code}",
								$key: "{$uuid}",
								"$properties": {
									"code": {
										"$type": "application/x-string"
									},
									"description": {
										"$type": "application/x-string"
									}
								},
								$links: {
									"$details": {
										"$type": "application/json;vnd.sage=syracuse",
										"$url": "/sdata/sprint1/settings/sprint1/countries('{$uuid}')?representation=country.$details&role={$role}"
									},
									"$lookup": {
										"$type": "application/json;vnd.sage=syracuse",
										"$url": "/sdata/sprint1/settings/sprint1/countries?representation=country.$lookup&role={$role}&trackingId={$trackingId}&binding=country"
									}
								}
							}
						}
					}
				}
			}
		}, true);
	},
	loadBox: function() {
		FieldsTest.prototype.loadBox.call(this, {
			$properties: {
				$field$LinksTypeMetaDataOnly: {
					$isReadOnly: false
				}
			},
			"xobject": {
				"xstring": "ceci est du texte",
				"xsubobject": {
					"xstring": "ceci est du texte"
				},
				"$phone": "07.70.34.93.11",
				"$email": "daniel.coz@sage.com",
				//"$phone": "01.41.66.21.21",
				//"$email": "toto@sage.com",				
				"xinteger": 200,
				"xdecimal": 2987111111111.4548,
				"xboolean": true,
				"xdate": "2011-06-07",
				"xtime": "12:00:00",
				"xdatetime": "2012-03-16T12:40:50.957Z",
				"xchoice": 2,
				"xreference": {
					"$uuid": "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
					"$key": "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
					"$etag": 1,
					"$properties": {},
					"code": "AD",
					"description": "Andorra"
				}
			}
		});
	},
	notifyActionLinkChange: function(metaData, useMetaDataOnly) {
		var dataRecordSet = {};
		var xobject, $fields;
		var $xobjectItem = this.$prototype.$properties.xobject.$item;

		dataRecordSet.$properties = {
			xobject: xobject = {}
		};
		//actions for object
		xobject.$item = {
			$links: metaData.$links,
			$actions: metaData.$actions
		};
		if (useMetaDataOnly) {
			xobject.$item.$properties = $fields = {};
		} else {
			dataRecordSet.xobject = {
				$properties: $fields = {}
			};
		}
		Object.keys($xobjectItem.$properties).forEach(function($bind) {
			$fields[$bind] = {
				$links: metaData.$links,
				$actions: metaData.$actions
			};
		});
		this.applyChange(dataRecordSet);
	},
	notifyDiagnoses: function(value, useMetaDataOnly) {
		var dataRecordSet = {};
		var self = this;
		var xobject, $fields;
		var $xobjectItem = self.$prototype.$properties.xobject.$item;
		dataRecordSet.$properties = {
			xobject: xobject = {}
		};
		xobject.$item = {
			$diagnoses: self._fillDiagnoses(value, "xobject").$diagnoses
		};
		if (useMetaDataOnly) {
			xobject.$item.$properties = $fields = {};
		} else {
			dataRecordSet.xobject = {
				$properties: $fields = {}
			};
		}
		Object.keys($xobjectItem.$properties).forEach(function($bind) {
			$fields[$bind] = {
				$diagnoses: self._fillDiagnoses(value, "xobject").$diagnoses
			};
		});
		self.applyChange(dataRecordSet);
	},
	_makeBlock: function($isEditMode) {
		return [this._makeEditReadBlock("xobject", [{
			$bind: "xobject"
		}])];
	}
});