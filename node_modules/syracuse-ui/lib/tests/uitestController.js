"use strict";
var helpers = require('syracuse-core/lib/helpers');
var LazyWidget = require('syracuse-ui/lib/site/lazy/lazyWidget').LazyWidget;

var _pages = {
    layout: {
        $title: "Layout Test",
        $path: "syracuse-ui/lib/tests/layoutTest",
        $class: "LayoutTest"
    },
    convergenceCleaner: {
        $title: "Convergence Cleaner Test",
        $path: "syracuse-ui/lib/tests/convergence/convergenceCleanerTest",
        $class: "ConvergenceCleanerTest"
    },
    messagebox: {
        $title: "Message box Test",
        $path: "syracuse-ui/lib/tests/messageBoxTest",
        $class: "MessageBoxTestInline"
    },
    messageBoxPopup: {
        $title: "Message box Popup",
        $path: "syracuse-ui/lib/tests/messageBoxTest",
        $class: "MessageBoxTestPopup"
    },
    diagnoses: {
        $title: "Diagnoses Test",
        $path: "syracuse-ui/lib/tests/diagnosesTest",
        $class: "DiagnosesTest"
    },
    menus: {
        $title: "Menus Test",
        $path: "syracuse-ui/lib/tests/menus/menusTest",
        $class: "MenusTest"
    },
    menustree: {
        $title: "menu Tree Test",
        $path: "syracuse-ui/lib/tests/menus/menusTreeTest",
        $class: "MenusTreeTest"
    },
    json: {
        $title: "Json Test",
        $path: "syracuse-ui/lib/tests/jsonPageViewer",
        $class: "JsonPageViewer"
    },
    macro: {
        $title: "Macros Test",
        $path: "syracuse-ui/lib/tests/macroTest",
        $class: "MacroTest"
    },
    boost: {
        $title: "Process Test",
        $path: "syracuse-ui/lib/tests/boost/boostProcessTest",
        $class: "ProcessTest"
    },
    fields: {
        $title: "Fields Test",
        $path: "syracuse-ui/lib/tests/simpleFieldsTest",
        $class: "SimpleFieldsTest"
    
    },
    editorField: {
        $title: "Editor Field Test",
        $path: "syracuse-ui/lib/tests/editorFieldTest",
        $class: "EditorFieldTest"
    },
    childField: {
        $title: "Child Object Fields",
        $path: "syracuse-ui/lib/tests/childFieldTest",
        $class: "ChildFieldTest"
    },
    iconFields: {
        $title: "Icon Fields Test",
        $path: "syracuse-ui/lib/tests/iconFieldsTest",
        $class: "IconFieldsTest"
    },
    single: {
        $title: "Array Single Test",
        $path: "syracuse-ui/lib/tests/array/single/singleArrayTest",
        $class: "SingleArrayTest"
    },
    array: {
        $title: "Array Test",
        $path: "syracuse-ui/lib/tests/array/multi/multiArrayTest",
        $class: "MultiArrayTest"
    },
    tree: {
        $title: "Tree view  Test",
        $path: "syracuse-ui/lib/tests/array/tree/treeArrayTest",
        $class: "TreeArrayTest"
    },
    graph: {
        $title: "Array Graph Test",
        $path: "syracuse-ui/lib/tests/array/multi/graphTest",
        $class: "GraphTest"
    },
    param: {
        $title: "Dynamic Parameters Test",
        $path: "syracuse-ui/lib/tests/dynamicParametersTest",
        $class: "DynamicParametersTest"
    },
    coreStyleTest: {
        $title: "Core Style Test",
        $path: "syracuse-ui/lib/tests/array/coreStyleTest",
        $class: "CoreStyleTest"
    },
    jobs: {
        $title: "Jobs Tests",
        $path: "syracuse-ui/lib/tests/jobsTest",
        $class: "JobsTest"
    }
};

exports.isUiTestUrl = function($url){
    return $url && ($url.indexOf("s-uitest-") >= 0);
};

exports.openPage = function(httpQuery){
    var key = httpQuery.$urlParts.representationRoot.replace("s-uitest-", "");
    var $testPage;
    var $menus = null;
    if (key == "spy") {
        $testPage = {
            $title: "Survey Page",
            $path: "syracuse-ui/lib/site/aside/spyPage",
            $class: "SpyPage"
        };
    }
    else {
        $testPage = _pages[key];
        var $links = {};
        Object.keys(_pages).forEach(function(key){
            $links["testlink-" + key] = {
                $title: _pages[key].$title,
                $url: "?representation=s-uitest-" + key + ".$test"
            }
        });
        $links.testx3LinkAQFB = {
            $title: "X3 link --> AQFB : Test Tableaux",
            $url: "/trans/x3/erp/superv/$sessions?f=AQFB"
        };
        $links.JsonLint = {
            "$title": "JsonLint",
            "$url": "http://jsonlint.com/"
        };
        $links.jsonformatter = {
            "$title": "Jsonformatter Curiousconcept",
            "$url": "http://jsonformatter.curiousconcept.com/"
        };
        $menus = {
            $layout: {
                $items: [{
                    $bind: "$openSpy"
                }, {
                    $title: "Array",
                    $opened: false,
                    $layout: {
                        $items: [{
                            $bind: "testlink-array"
                        }, {
                            $bind: "testlink-tree"
                        }, {
                            $bind: "testlink-graph"
                        }, {
                            $bind: "testlink-single"
                        }]
                    }
                }, {
                    $title: "Fields",
                    $layout: {
                        $items: [{
                            $bind: "testlink-fields"
                        }, {
                            $bind: "testlink-editorField"
                        }, {
                            $bind: "testlink-childField"
                        }, {
                            $bind: "testlink-iconFields"
                        }]
                    }
                }, {
                    $title: "Jobs",
                    $layout: {
                        $items: [{
                            $bind: "testlink-jobs"
                        }]
                    }
                }, {
                    $title: "Messages",
                    $layout: {
                        $items: [{
                            $bind: "testlink-messagebox"
                        }, {
                            $bind: "testlink-messageBoxPopup"
                        }, {
                            $bind: "testlink-diagnoses"
                        }]
                    }
                }, {
                    $title: "Pages",
                    $layout: {
                        $items: [{
                            $bind: "testlink-json"
                        }, {
                            $bind: "testlink-macro"
                        }]
                    }
                }, {
                    $title: "Menus",
                    $layout: {
                        $items: [{
                            $bind: "testlink-menustree"
                        }, {
                            $bind: "testlink-menus"
                        }, {
                            $bind: "testlink-param"
                        }]
                    }
                }, {
                    $title: "Layout",
                    $layout: {
                        $items: [{
                            $bind: "testlink-layout"
                        }, {
                            $bind: "testlink-coreStyleTest"
                        }]
                    }
                }, {
                    $title: "Convergence",
                    $layout: {
                        $items: [{
                            $bind: "testlink-convergenceCleaner"
                        }, {
                            $bind: "testx3LinkAQFB"
                        }, {
                            $bind: "testx3LinkAQFB"
                        }]
                    }
                }, {
                    $title: "Boost",
                    $layout: {
                        $items: [{
                            $bind: "testlink-boost"
                        }]
                    }
                }, {
                    $title: "Json",
                    $layout: {
                        $items: [{
                            $bind: "JsonLint"
                        }, {
                            $bind: "jsonformatter"
                        }]
                    }
                }]
            }
        };
    }
    
    require.async($testPage.$path, function(err, module){
        try {
            var $itemPage = {
                $autoFetch: false,
                layoutSlot: document.createElement("div"),
                $category: "page",
                $isSearchFacetEnabled: false,
                $urlParts: httpQuery.$urlParts,
                $pageCategoryClass: module[$testPage.$class],
                $representation: {
                    $prototype: {
                        $properties: {},
                        $title: $testPage.$title,
                        $links: $links,
                        $actions: {
                            $openSpy: {
                                "$title": "Open Spy"
                            }
                        }
                    },
                    $article: {
                        $menus: $menus
                    }
                }
            };
            $itemPage.httpQuery = httpQuery;
            $itemPage.httpQuery.fullUrl = document.location.href;
            document.site.onMainPageChange($itemPage);
        } 
        catch (error) {
            console.error(error.message + "\n" + error.stack)
        }
    });
    
};
