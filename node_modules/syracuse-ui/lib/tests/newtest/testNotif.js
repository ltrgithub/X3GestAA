"use strict";
var SocketHandler = require('syracuse-ui/lib/notifications/socketHandler');

exports.load = function(page) {
	var socketHandler = SocketHandler.create();
	var col = page.addCol(page.layoutContent.layoutSlot);
	var slotConnected = col.appendChild(document.createElement("div"));
	var slotevent = col.appendChild(document.createElement("div"));
	var dynamicEvent = col.appendChild(document.createElement("div"));
	var socketDynamic;

	var socket = socketHandler.register("unit_test", "/unit_test", {
		eventClient1: function(data) {
			if (data === 'data') {
				slotevent.innerHTML = "string 'data' received";

			} else {
				slotevent.innerHTML = "string 'data' not received";

			}
		},
		eventClient2: function(data) {
			if (data && data.ok) {
				slotevent.innerHTML = "object '{ok : true}' received";
			} else {
				slotevent.innerHTML = "object '{ok : true}' not received";

			}
		},
		removeDynamicEvent: function(data) {
			// remove button
			dynamicEvent.innerHTML = "";
		},
		connectTest: function(data) {

			slotConnected.innerHTML = "socket connected to unit test event";
		}
	});

	page.layoutContent.domItem.appendChild(syra_menus.addTextButton("testEvent1", "s-uitest-mn", "onTestButtonClick2"));
	page.layoutContent.domItem.appendChild(syra_menus.addTextButton("testEvent2", "s-uitest-mn", "onTestButtonClick3"));
	page.layoutContent.domItem.appendChild(syra_menus.addTextButton("addDynamicEvent", "s-uitest-mn", "onTestButtonClick1"));
	page.layoutContent.domItem.appendChild(syra_menus.addTextButton("removeDynamicEvent", "s-uitest-mn", "onTestButtonClick4"));

	page.onTestButtonClick2 = function() {
		socket.emit("event1", 'data');
	};
	page.onTestButtonClick3 = function() {
		socket.emit("event2", {
			ok: true
		});
	};
	page.onTestButtonClick4 = function() {
		socket.emit("unregisterEvent");
		socket.emit('disconnect');
		if (socketDynamic) {
			socketDynamic.io.close();
			socketDynamic = null;
		}
	};

	page.onTestButtonClick1 = function() {
		// register event to be able to receive them
		socket.emit("registerEvent");
		socketDynamic = socketHandler.register("unit_test2", "/unit_test2", {
			eventDynamicClient1: function(data) {
				if (data === 'data') {
					slotevent.innerHTML = "dynamic event : string 'data' received";

				} else {
					slotevent.innerHTML = "dynamic event : string 'data' not received";
				}
			},
			eventDynamicClient2: function(data) {
				if (data && data.ok) {
					slotevent.innerHTML = "dynamic event : object '{ok : true}' received";
				} else {
					slotevent.innerHTML = "dynamic event : object '{ok : true}' not received";
				}
			},
			connectTest: function(data) {
				slotConnected.innerHTML = "socket connected to dynamic unit test event";
				dynamicEvent.innerHTML = "";
				dynamicEvent.appendChild(syra_menus.addTextButton("dynamicEvent1", "s-uitest-mn", "dynamic1"));
				dynamicEvent.appendChild(syra_menus.addTextButton("dynamicEvent2", "s-uitest-mn", "dynamic2"));
				dynamicEvent.dynamic1 = function() {
					socketDynamic.emit("dynamicEvent1", 'data');
				};
				dynamicEvent.dynamic2 = function() {
					socketDynamic.emit("dynamicEvent2", {
						ok: true
					});
				};
			}
		});

	};
};