"use strict";
var helpers = require("syracuse-core/lib/helpers");
var TestPage = require("syracuse-ui/lib/tests/testPage").TestPage;

function DiagnosesTest() {}

exports.DiagnosesTest = helpers.defineClass(DiagnosesTest, TestPage, {
	_initiliazeTestPage: function() {
		var self = this;
		self.diagnoseTypes = {
			fatal: {
				$title: "Fatal",
				$diagnose: {
					$message: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque nec lobortis magna. Mauris vitae erat pellentesque ipsum malesuada blandit. Donec pellentesque, massa eu auctor tincidunt, lorem mauris hendrerit ligula, a dapibus magna mauris vitae velit. Donec id diam eros. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Duis a ligula mi. Duis elementum iaculis dolor, eu interdum risus lobortis id. Vestibulum ac turpis a nunc convallis interdum in et diam. Praesent ac est velit, a cursus ligula.",
					$severity: "fatal"
				}
			},
			error1: {
				$title: "Error",
				$diagnose: {
					$message: "Something wrong happened",
					$severity: "error"
				}
			},
			error2: {
				$title: "Error (stack trace)",
				$diagnose: {
					$message: "this is an error message with a stacktrace",
					$severity: "error",
					$stackTrace: "class=[java.lang.RuntimeException]\nmess(1)=[java.lang.RuntimeException: java.lang.RuntimeException: java.lang.RuntimeException: java.lang.NullPointerException | RuntimeException | com.sage.x3.bundle.internal.fusion.syndication.sap.CSDataPayloadFusionWins(toJson:57)]\nmess(2)=[java.lang.RuntimeException: java.lang.RuntimeException: java.lang.NullPointerException | RuntimeException | com.sage.x3.bundle.internal.fusion.syndication.sap.CSDataPayloadFusionWin(toJson:151)]\nmess(3)=[java.lang.RuntimeException: java.lang.NullPointerException | RuntimeException | com.sage.x3.bundle.shared.adapi.CAdapiDataSrc(toJson:719)]\nmess(4)=[java.lang.NullPointerException | RuntimeException | com.sage.x3.bundle.shared.adapi.CAdapiDataSrcLine(toJson:233)]\nmess(5)=[NullPointerException | com.sage.x3.bundle.shared.adapi.CAdapiVariable(getValueForJson:199)]\nstack=[com.sage.x3.bundle.internal.fusion.syndication.sap.CSDataPayloadFusionWins(toJson:57)\ncom.sage.x3.bundle.internal.fusion.syndication.sap.CSDataPayloadFusionSAP(toJson:167)\ncom.sage.x3.bundle.internal.fusion.syndication.CSDataPayloadFusionResponse(toJson:78)\ncom.sage.x3.bundle.internal.fusion.syndication.CSDataPayloadFusionResponse(toJson:1)\ncom.sage.x3.bundle.internal.fusion.syndication.CSDataEntryFusion(toJSON:60)\ncom.sage.x3.shared.sdata.syndication.CSyndicationBase(writeToStream:449)\ncom.sage.x3.shared.sdata.syndication.CSyndicationBase(dumpInString:86)\ncom.sage.x3.bundle.internal.fusion.syndication.CSDataEntryFusion(dumpInString:28)\ncom.sage.x3.bundle.internal.fusion.x3.handlerRequest.RequestSvc(execHandler:114)\ncom.sage.x3.bundle.internal.fusion.x3.handlerRequest.AbsRequestSvc(start:44)\ncom.sage.x3.bundle.internal.fusion.x3.FusionClient(execRequest:426)\ncom.sage.x3.bundle.internal.fusion.sdata.adapter.FusionClientAdapter(_execSession:250)\ncom.sage.x3.bundle.internal.fusion.sdata.adapter.FusionClientAdapter(execSession:365)\ncom.sage.x3.bundle.sdata.handler.CContractHandler(putSession:741)\ncom.sage.x3.bundle.sdata.handler.CContractHandler(doPutTreatement:287)\ncom.sage.x3.shared.sdata.util.CSDataAbstractHandler(execute:87)\ncom.sage.x3.bundle.internal.sdata.CSDataContractServiceImpl(doExec:128)\ncom.sage.x3.bundle.internal.sdata.CSDataContractServiceImpl(execRequest:152)\ncom.sage.x3.bundle.internal.sdata.server.CSDataSrvServiceImpl(execRequest:188)\ncom.sage.x3.bundle.internal.sdata.server.CSDataSrvServiceImpl(execRequest:269)\ncom.sage.x3.bundle.internal.sdata.server.request.CHttpHandlerSDataRequest(doRequest:27)\ncom.sage.x3.bundle.http.core.utils.CHandlerRequestDefault(doPut:30)\ncom.sage.x3.bundle.http.core.utils.CHandlerRequest(handle:52)\norg.apache.http.protocol.HttpService(doService:369)\norg.apache.http.protocol.HttpService(handleRequest:290)\ncom.sage.x3.bundle.internal.http.core.CWorkerThread(run:40)]\n"
				}
			},
			error3: {
				$title: "Error with diagnose links",
				$diagnose: {
					$message: "An error occured. You may find help by clicking one of following links ",
					$severity: "error",
					$links: {
						$link1: {
							$title: "link1",
							$url: "?representation=s-uitest-diagnoses.$test"
						},
						$link2: {
							$title: "link2",
							$url: "?representation=s-uitest-diagnoses.$test"
						},
						$link3: {
							$title: "link3",
							$url: "?representation=s-uitest-diagnoses.$test"
						}
					}
				}
			},
			warning: {
				$title: "Warning",
				$diagnose: {
					$message: "oulalaldfdf fsd fqsdfsd \nfsdfqsd sdfqsdfqsdfqs fqsdqsdfg",
					$severity: "warning"
				}
			},
			info1: {
				$title: "Info",
				$diagnose: {
					$message: "oulalaldfdf fsd fqsdfsd fsdfqsd sdfqsdfqsdfqs fqsdqsdfg",
					$severity: "info"
				}
			},
			info2: {
				$title: "Info with message links",
				$diagnose: {
					$message: "oulalaldfdf fsd fqsdfsd fsdfqsd sdfqsdfqsdfqs fqsdqsdfg",
					$severity: "info"
				},
				$links: {
					$link1: {
						$title: "link1 bla bla bla"
					},
					$link2: {
						$title: "link2 bla bla bla"
					},
					$link3: {
						$title: "link3 bla bla bla"
					},
					$link4: {
						$title: "link4 bla bla bla"
					}
				}
			},
			multitest: {
				$title: "Multitest"
			},
			success: {
				$title: "Success with message links",
				$diagnose: {
					$message: "Resource has been saved",
					$severity: "success"
				},
				$links: {
					$link1: {
						$title: "Ok",
						$url: "?representation=s-uitest-diagnoses.$test"
					},
					$link2: {
						$title: "Home",
						$url: "?representation=home.$dashboard"
					}
				}
			},
			clean: {
				$title: "Clean"
			}
		};
		Object.keys(self.diagnoseTypes).forEach(function($type) {
			self.$prototype.$links[$type] = {
				$title: $type == "clean" ? "Clean diagnoses panel" : "Open popup"
			};
		});

		var cases = ["fatal", "error1", "error2", "error3", "info1", "info2", "warning", "multitest", "success", "clean"];

		self.$item.$layout = {
			$items: cases.map(function($type) {
				return {
					$category: "section",
					$id: "diagnoseSection-" + $type,
					$title: "$severity = '" + self.diagnoseTypes[$type].$title + "'",
					$layout: {
						$items: [{
							$category: "link",
							$bind: $type
						}]
					}
				};
			})
		};
	},
	onMenuClick: function(menu) {
		var diagnoseType = this.diagnoseTypes[menu.$bind];
		if (diagnoseType) {
			document.site.showDiagnoses(this.buildDiagnose(menu.$bind));
			return false;
		}
		return true;
	},

	buildDiagnose: function($type) {
		var self = this;
		var msg = {
			$diagnoses: []
		};
		switch ($type) {
			case "multitest":
				for (var ii = 0; ii < 3; ii++) {
					Object.keys(self.diagnoseTypes).forEach(function($type) {
						if ($type != "multitest" && $type != "clean") {
							msg.$diagnoses.push(self.diagnoseTypes[$type].$diagnose);
						}
					});
				}
				break;
			case "clean":
				msg = null;
				break;
			default:
				var diagnoseType = self.diagnoseTypes[$type];
				if (diagnoseType.$links) {
					msg.$links = diagnoseType.$links;
				}
				msg.$diagnoses.push(diagnoseType.$diagnose);
		}
		return msg;
	}
});