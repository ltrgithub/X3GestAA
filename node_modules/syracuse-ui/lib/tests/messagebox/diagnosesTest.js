"use strict";
var helpers = require("syracuse-core/lib/helpers");
var TestPage = require("syracuse-ui/lib/tests/testPage").TestPage;

function DiagnosesTest() {}

exports.DiagnosesTest = helpers.defineClass(DiagnosesTest, TestPage, {
	_initiliazeTestPage: function() {
		var self = this;
		self.diagnoseTypes = {
			fatal: {
				$title: "Fatal",
				$diagnose: {
					$message: "Isdem diebus Apollinaris Domitiani gener, paulo ante agens palatii Caesaris curam, ad Mesopotamiam missus a socero per militares numeros immodice scrutabatur, an quaedam altiora meditantis iam Galli secreta susceperint scripta, qui conpertis Antiochiae gestis per minorem Armeniam lapsus Constantinopolim petit exindeque per protectores retractus artissime tenebatur. Tempore quo primis auspiciis in mundanum fulgorem surgeret victura dum erunt homines Roma, ut augeretur sublimibus incrementis, foedere pacis aeternae Virtus convenit atque Fortuna plerumque dissidentes, quarum si altera defuisset, ad perfectam non venerat summitatem. Nam sole orto magnitudine angusti gurgitis sed profundi a transitu arcebantur et dum piscatorios quaerunt lenunculos vel innare temere contextis cratibus parant, effusae legiones, quae hiemabant tunc apud Siden, isdem impetu occurrere veloci. et signis prope ripam locatis ad manus comminus conserendas denseta scutorum conpage semet scientissime praestruebant, ausos quoque aliquos fiducia nandi vel cavatis arborum truncis amnem permeare latenter facillime trucidarunt. Fuerit toto in consulatu sine provincia, cui fuerit, antequam designatus est, decreta provincia. Sortietur an non? Nam et non sortiri absurdum est, et, quod sortitus sis, non habere. Proficiscetur paludatus? Quo? Quo pervenire ante certam diem non licebit. ianuario, Februario, provinciam non habebit; Kalendis ei denique Martiis nascetur repente provincia. Mox dicta finierat, multitudo omnis ad, quae imperator voluit, promptior laudato consilio consensit in pacem ea ratione maxime percita, quod norat expeditionibus crebris fortunam eius in malis tantum civilibus vigilasse, cum autem bella moverentur externa, accidisse plerumque luctuosa, icto post haec foedere gentium ritu perfectaque sollemnitate imperator Mediolanum ad hiberna discessit.",
					$severity: "fatal"
				}
			},
			error1: {
				$title: "Error",
				$diagnose: {
					$message: "Lorem ipsum dolor sit amet",
					$severity: "error"
				}
			},
			error2: {
				$title: "Error (stack trace)",
				$diagnose: {
					$message: "this is an error message with a stacktrace",
					$severity: "error",
					$stackTrace: "class=[java.lang.RuntimeException]\nmess(1)=[java.lang.RuntimeException: java.lang.RuntimeException: java.lang.RuntimeException: java.lang.NullPointerException | RuntimeException | com.sage.x3.bundle.internal.fusion.syndication.sap.CSDataPayloadFusionWins(toJson:57)]\nmess(2)=[java.lang.RuntimeException: java.lang.RuntimeException: java.lang.NullPointerException | RuntimeException | com.sage.x3.bundle.internal.fusion.syndication.sap.CSDataPayloadFusionWin(toJson:151)]\nmess(3)=[java.lang.RuntimeException: java.lang.NullPointerException | RuntimeException | com.sage.x3.bundle.shared.adapi.CAdapiDataSrc(toJson:719)]\nmess(4)=[java.lang.NullPointerException | RuntimeException | com.sage.x3.bundle.shared.adapi.CAdapiDataSrcLine(toJson:233)]\nmess(5)=[NullPointerException | com.sage.x3.bundle.shared.adapi.CAdapiVariable(getValueForJson:199)]\nstack=[com.sage.x3.bundle.internal.fusion.syndication.sap.CSDataPayloadFusionWins(toJson:57)\ncom.sage.x3.bundle.internal.fusion.syndication.sap.CSDataPayloadFusionSAP(toJson:167)\ncom.sage.x3.bundle.internal.fusion.syndication.CSDataPayloadFusionResponse(toJson:78)\ncom.sage.x3.bundle.internal.fusion.syndication.CSDataPayloadFusionResponse(toJson:1)\ncom.sage.x3.bundle.internal.fusion.syndication.CSDataEntryFusion(toJSON:60)\ncom.sage.x3.shared.sdata.syndication.CSyndicationBase(writeToStream:449)\ncom.sage.x3.shared.sdata.syndication.CSyndicationBase(dumpInString:86)\ncom.sage.x3.bundle.internal.fusion.syndication.CSDataEntryFusion(dumpInString:28)\ncom.sage.x3.bundle.internal.fusion.x3.handlerRequest.RequestSvc(execHandler:114)\ncom.sage.x3.bundle.internal.fusion.x3.handlerRequest.AbsRequestSvc(start:44)\ncom.sage.x3.bundle.internal.fusion.x3.FusionClient(execRequest:426)\ncom.sage.x3.bundle.internal.fusion.sdata.adapter.FusionClientAdapter(_execSession:250)\ncom.sage.x3.bundle.internal.fusion.sdata.adapter.FusionClientAdapter(execSession:365)\ncom.sage.x3.bundle.sdata.handler.CContractHandler(putSession:741)\ncom.sage.x3.bundle.sdata.handler.CContractHandler(doPutTreatement:287)\ncom.sage.x3.shared.sdata.util.CSDataAbstractHandler(execute:87)\ncom.sage.x3.bundle.internal.sdata.CSDataContractServiceImpl(doExec:128)\ncom.sage.x3.bundle.internal.sdata.CSDataContractServiceImpl(execRequest:152)\ncom.sage.x3.bundle.internal.sdata.server.CSDataSrvServiceImpl(execRequest:188)\ncom.sage.x3.bundle.internal.sdata.server.CSDataSrvServiceImpl(execRequest:269)\ncom.sage.x3.bundle.internal.sdata.server.request.CHttpHandlerSDataRequest(doRequest:27)\ncom.sage.x3.bundle.http.core.utils.CHandlerRequestDefault(doPut:30)\ncom.sage.x3.bundle.http.core.utils.CHandlerRequest(handle:52)\norg.apache.http.protocol.HttpService(doService:369)\norg.apache.http.protocol.HttpService(handleRequest:290)\ncom.sage.x3.bundle.internal.http.core.CWorkerThread(run:40)]\n"
				}
			},
			error3: {
				$title: "Error with diagnose links",
				$diagnose: {
					$message: "An error occured. You may find help by clicking one of following links ",
					$severity: "error",
					$links: {
						$link1: {
							$title: "link1",
							$url: "?representation=s-uitest-diagnoses.$test"
						},
						$link2: {
							$title: "link2",
							$url: "?representation=s-uitest-diagnoses.$test"
						},
						$link3: {
							$title: "link3",
							$url: "?representation=s-uitest-diagnoses.$test"
						}
					}
				}
			},
			warning: {
				$title: "Warning",
				$diagnose: {
					$message: "oulalaldfdf fsd fqsdfsd \nfsdfqsd sdfqsdfqsdfqs fqsdqsdfg",
					$severity: "warning"
				}
			},
			info1: {
				$title: "Info",
				$diagnose: {
					$message: "oulalaldfdf fsd fqsdfsd fsdfqsd sdfqsdfqsdfqs fqsdqsdfg",
					$severity: "info"
				}
			},
			info2: {
				$title: "Info with message links",
				$diagnose: {
					$message: "oulalaldfdf fsd fqsdfsd fsdfqsd sdfqsdfqsdfqs fqsdqsdfg",
					$severity: "info"
				},
				$links: {
					$link1: {
						$title: "link1 bla bla bla"
					},
					$link2: {
						$title: "link2 bla bla bla"
					},
					$link3: {
						$title: "link3 bla bla bla"
					},
					$link4: {
						$title: "link4 bla bla bla"
					}
				}
			},
			multitest: {
				$title: "Multitest"
			},
			success: {
				$title: "Success with message links",
				$diagnose: {
					$message: "Resource has been saved",
					$severity: "success"
				},
				$links: {
					$link1: {
						$title: "Ok",
						$url: "?representation=s-uitest-diagnoses.$test"
					},
					$link2: {
						$title: "Home",
						$url: "?representation=home.$landing"
					}
				}
			},
			clean: {
				$title: "Clean"
			}
		};
		Object.keys(self.diagnoseTypes).forEach(function($type) {
			self.$prototype.$links[$type] = {
				$title: $type == "clean" ? "Clean diagnoses panel" : "Open popup"
			};
		});

		var cases = ["fatal", "error1", "error2", "error3", "info1", "info2", "warning", "multitest", "success", "clean"];

		self.$item.$layout = {
			$items: cases.map(function($type) {
				return {
					$category: "section",
					$clientId: "diagnoseSection-" + $type,
					$title: "$severity = '" + self.diagnoseTypes[$type].$title + "'",
					$layout: {
						$items: [{
							$category: "link",
							$bind: $type
						}]
					}
				};
			})
		};
	},
	onMenuClick: function(menu) {
		var diagnoseType = this.diagnoseTypes[menu.$bind];
		if (diagnoseType) {
			syra_site.showDiagnoses(this.buildDiagnose(menu.$bind));
			return false;
		}
		return true;
	},

	buildDiagnose: function($type) {
		var self = this;
		var msg = {
			$diagnoses: []
		};
		switch ($type) {
			case "multitest":
				for (var ii = 0; ii < 3; ii++) {
					Object.keys(self.diagnoseTypes).forEach(function($type) {
						if ($type != "multitest" && $type != "clean") {
							msg.$diagnoses.push(self.diagnoseTypes[$type].$diagnose);
						}
					});
				}
				break;
			case "clean":
				msg = null;
				break;
			default:
				var diagnoseType = self.diagnoseTypes[$type];
				if (diagnoseType.$links) {
					msg.$links = diagnoseType.$links;
				}
				msg.$diagnoses.push(diagnoseType.$diagnose);
		}
		return msg;
	}
});