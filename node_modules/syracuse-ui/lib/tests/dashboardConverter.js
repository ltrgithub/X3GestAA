"use strict";
var helpers = require("syracuse-core/lib/helpers");
var TestPage = require("syracuse-ui/lib/tests/testPage").TestPage;

function TestCase() {}

exports.TestCase = helpers.defineClass(TestCase, TestPage, {
	loadBox: function() {
		this.$prototype = this.$prototype || {};
		this.$prototype.$properties = this.$prototype.$properties || {};
		this.$item.$layout = {
			$items: {}
		};
		TestPage.prototype.loadBox.call(this);
		this.layoutContent.layoutSlot.appendChild(syra_menus.addTextButton("Copy Old Dashboard and click", "s-mn-extra-link", "onConvertClick"));

		var col = this.layoutContent.layoutSlot.appendChild(document.createElement("div"));
		col.className = "s-uitest-msgbox-col";
		col.style.width = "50%";
		var label = col.appendChild(document.createElement("label"));
		label.className = "s-uitest-h1";
		label.textContent = "Old Dashboard";
		this.sourceJson = col.appendChild(document.createElement("textArea"));
		this.sourceJson.setAttribute("rows", 40);
		this.sourceJson.className = "s-json-field-input";

		col = this.layoutContent.layoutSlot.appendChild(document.createElement("div"));
		col.className = "s-uitest-msgbox-col";
		col.style.width = "50%";
		label = col.appendChild(document.createElement("label"));
		label.className = "s-uitest-h1";
		label.textContent = "New Dashboard";
		this.convertedJson = col.appendChild(document.createElement("textArea"));
		this.convertedJson.setAttribute("rows", 40);
		this.convertedJson.className = "s-json-field-input";
	},
	onConvertClick: function() {
		var json = JSON.parse(this.sourceJson.value);
		var $links = json.$prototype.$links;
		var keys = Object.keys($links);
		var $sections = {};
		Object.keys($links).forEach(function(key) {
			var $link = $links[key];
			if ($link.$vignettes) {
				var id = $link.$vignettes[0];
				delete $link.$vignettes;
				var $section = $sections[id];
				if (!$section) {
					$section = $sections[id] = {};
					var $vignette = json.$prototype.$properties[id];
					$section.$title = ($vignette && $vignette.$title) || id;
				}
				($section.$menus = $section.$menus || []).push($link);
			}
		});
		/*for (var ii = 0, jj = keys.length; ii < jj; ii++) {
         var $link = $links[keys[ii]];
         if ($link.$vignettes) {
         var id = $link.$vignettes[0];
         delete $link.$vignettes;
         var $section = $sections[id];
         if (!$section) {
         $section = $sections[id] = {};
         var $vignette = json.$prototype.$properties[id];
         $section.$title = ($vignette && $vignette.$title) || id;
         }
         ($section.$menus = $section.$menus || []).push($link);
         }
         }*/
		$sections = Object.keys($sections).map(function(id) {
			return $sections[id];
		});
		this.convertedJson.value = JSON.stringify($sections);
	},
	onFieldInputEvent: function(event, target) {

	}
});