"use strict";
var helpers = require("syracuse-core/lib/helpers");
var TestPage = require("syracuse-ui/lib/tests/testPage").TestPage;

var _deltas = [{
	$title: "$isReadOnly true",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$isReadOnly": true
		}, {
			"$uuid": "record1",
			"$isReadOnly": true
		}, {
			"$uuid": "record2",
			"$isReadOnly": true
		}]
	}
}, {
	$title: "$isReadOnly false",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$isReadOnly": false
		}, {
			"$uuid": "record1",
			"$isReadOnly": false
		}, {
			"$uuid": "record2",
			"$isReadOnly": false
		}]
	}
}, {
	$title: "$isDisabled true",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$isDisabled": true
		}, {
			"$uuid": "record1",
			"$isDisabled": true
		}, {
			"$uuid": "record2",
			"$isDisabled": true
		}]
	}
}, {
	$title: "$isDisabled false",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$isDisabled": false
		}, {
			"$uuid": "record1",
			"$isDisabled": false
		}, {
			"$uuid": "record2",
			"$isDisabled": false
		}]
	}
}, {
	$title: "info warning error",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$fieldStyle": "cst_sty_info"
		}, {
			"$uuid": "record1",
			"$valueStyle": "cst_sty_warning"
		}, {
			"$uuid": "record2",
			"$valueStyle": "cst_sty_error"
		}]
	}
}, {
	$title: "highlight verylow low",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$fieldStyle": "cst_sty_highlight"
		}, {
			"$uuid": "record1",
			"$valueStyle": "cst_sty_verylow"
		}, {
			"$uuid": "record2",
			"$valueStyle": "cst_sty_low"
		}]
	}
}, {
	$title: "medium high veryhigh",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$fieldStyle": "cst_sty_medium"
		}, {
			"$uuid": "record1",
			"$valueStyle": "cst_sty_high"
		}, {
			"$uuid": "record2",
			"$valueStyle": "cst_sty_veryhigh"
		}]
	}
}, {
	$title: "strongdecreasing decreasing stable",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$fieldStyle": "cst_sty_strongdecreasing"
		}, {
			"$uuid": "record1",
			"$valueStyle": "cst_sty_decreasing"
		}, {
			"$uuid": "record2",
			"$valueStyle": "cst_sty_stable"
		}]
	}
}, {
	$title: "increasing strongincreasing",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$fieldStyle": "cst_sty_strongdecreasing"
		}, {
			"$uuid": "record1",
			"$valueStyle": "cst_sty_decreasing"
		}, {
			"$uuid": "record2"
		}]
	}
}, {
	$title: "default",
	delta: {
		"xarray": [{
			"$uuid": "record0",
			"$fieldStyle": "cst_sty_default"
		}, {
			"$uuid": "record1",
			"$valueStyle": "cst_sty_default"
		}, {
			"$uuid": "record2",
			"$valueStyle": "cst_sty_default"
		}]
	}
}];

exports.load = function(page) {
	page.$prototype.$properties.$fieldJsonDelta = {
		$title: "delta",
		$type: "application/x-string"
	};
	page.$prototype.$properties.$field$DefaultDeltaMode = {
		$title: "isDeltaMode",
		$type: "application/x-choice",
		$value: {
			$type: "application/x-integer",
			$enum: _deltas.map(function($item, index) {
				return {
					$value: index,
					$title: $item.$title
				};
			})
		}
	};
	page.$prototype.$properties.xarray = {
		$title: "xarray",
		$capabilities: "sort,filter,insert,append,delete,reorder",
		$type: "application/x-array",
		$itemsPerPage: 5,
		$item: {
			$descriptor: "prototype employee.$edit",
			$type: "application/json",
			$pluralType: "children",
			$representation: "employee",
			$properties: {
				xstring: {
					$title: "xstring",
					$type: "application/x-string",

					$maxLength: 30,
					$capabilities: "sort,filter"
				},
				xchoice: {
					$title: "xchoice",
					$type: "application/x-choice",
					$value: {
						$type: "application/x-integer",
						$enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value) {
							return {
								"$value": value,
								$title: "Value " + value
							};
						})
					}
				},
				"xdate": {
					$title: "xdate",
					$type: "application/x-date",
					$capabilities: "sort,filter"
				},
				"xboolean": {
					$title: "xboolean",
					$type: "application/x-boolean",
					$capabilities: "sort,filter"
				},
				"xdecimal": {
					$title: "xdecimal",
					$type: "application/x-decimal",
					$capabilities: "sort,filter",

					$isNullable: true
				}
			},
			$links: {},
			$actions: {}
		},
		$actions: {}
	};
	var col = page.addCol(page.layoutContent.domItem, "60%");
	for (var ii = 0; ii < 2; ii++) {
		page.loadNewItem(col, {
			$format: "grid",
			$isEditMode: ii == 0,
			$bind: "xarray",
			$selectMode: "single"
		});
	}
	for (var ii = 0; ii < 2; ii++) {
		page.loadNewItem(col, {
			$format: "cards",
			$isEditMode: ii == 0,
			$bind: "xarray",
			$selectMode: "single",
			$cardsByRowCount: 3,
			$layout: {
				$items: [{
					$category: "section",
					$layout: {
						$items: [{
							$bind: "xstring"
						}, {
							$bind: "xchoice"
						}, {
							$bind: "xdate"
						}, {
							$bind: "xboolean"
						}, {
							$bind: "xdecimal"
						}]
					}
				}]
			}
		});
	}
	var col = page.addCol(page.layoutContent.domItem, "40%");
	page.loadNewItem(col, {
		$bind: "$field$DefaultDeltaMode",
		$isEditMode: true,
		$format: "$radios",
		$choiceLayout: 1
	});
	page.loadNewItem(col, {
		$bind: "$fieldJsonDelta",
		$isTitleHidden: true,
		$isEditMode: true,
		$rows: 20,
		$isAutoSizeDisabled: true,
		$skin: "s-json-field"
	});
	page.applyChange({
		$properties: {
			"xarray": {
				$isReadOnly: false,
				$isDisabled: false,
				$totalResults: 3
			}
		},
		"xarray": page.getResources().getRecords(3).map(function(record) {
			delete record.$index;
			return record;
		})
	});
};

exports.notifyDataChange = function(field, value) {
	if (field.$item.$bind == "$field$DefaultDeltaMode") {
		field.page.$isEditMode = true;
		var delta = _deltas[value].delta;
		field.page.applyChange({
			$fieldJsonDelta: JSON.stringify(delta, null, 2)
		});
		field.page.applyChange(delta, true);
	}
};