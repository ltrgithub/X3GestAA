"use strict";
var _domQuery = require("syracuse-ui/lib/tests/pages/domQuery");

function _addStatusScenario($status, options) {
	function _buildDelta(isPartialDelta, $status, value) {
		var xarray = [];

		function _setFieldsStatus(obj, $props) {
			obj.$properties = {};
			$data.xstring = "";
			for (var ii = 0; ii < $props.length; ii++) {
				(obj.$properties[$props[ii]] = {})[$status] = value;
				$data.xstring += $props[ii] + " " + $status;
			}
			$data.xstring += $status;
		}
		for (var ii = 1; ii <= 7; ii++) {
			var $data = {
				$uuid: "record" + ii
			};
			switch (ii) {
				case 1:
					$data[$status] = value;
					$data.xstring = "record " + $status;
					break;
				case 2:
					_setFieldsStatus($data, ["xstring", "xchoice"]);
					break;
				case 3:
					_setFieldsStatus($data, ["xdate", "xboolean", "xdecimal"]);
					break;
				default:
					if (isPartialDelta) {
						continue;
					}
			}
			if (isPartialDelta) {
				$data.$index = ii - 1;
			}
			xarray.push($data);
		}
		return {
			$isPartialDelta: isPartialDelta,
			xarray: xarray
		};
	}

	function _hasStatusFields(records, check, binds) {
		var fields = _domQuery.getFields(records, binds);
		var ok;
		for (var mm = 0; mm < fields.length; mm++) {
			ok = _domQuery.field[check](fields[mm], true);
			if (!ok) {
				break;
			}
		}
		return ok;
	}

	return [{
		$title: $status + " all array",
		run: function(page) {
			var $xarray = {};
			$xarray[$status] = true;
			this.applyChange({
				$properties: {
					xarray: $xarray
				}
			});
			var lists = _domQuery.field.findAll(page.domItem, "xarray");
			for (var ii = 1; ii <= lists.length; ii++) {
				var list = lists[ii - 1];
				var isEditMode = _domQuery.field.isEditMode(list);
				var records = _domQuery.list.getFilterRecord(list);
				records.length && this.assert(_hasStatusFields(records, options.isInputStatus) == false, "list " + ii + " has no filter fields " + options.msg);
				records = _domQuery.list.getRecords(list);
				if (isEditMode) {
					this.assert(_hasStatusFields(records, options.isInputStatus), "list " + ii + " has fields " + options.msg);
				}
			}
		}
	}, {
		$title: $status + " record 1 2 3",
		run: function(page) {
			var self = this;

			function _runTest(isPartialDelta) {
				self.applyChange(_buildDelta(isPartialDelta, $status, true));
				var lists = _domQuery.field.findAll(page.domItem, "xarray");
				var msg = isPartialDelta ? "partial delta " : "";
				for (var ii = 1; ii <= lists.length; ii++) {
					var list = lists[ii - 1];
					var isEditMode = _domQuery.field.isEditMode(list);
					if (isEditMode) {
						var assert = "";
						for (var mm = 1; mm <= 7; mm++) {
							var records = _domQuery.list.getRecordByUUID(list, "record" + mm);
							switch (mm) {
								case 1:
									self.assert(_hasStatusFields(records, options.isInputStatus), msg + "list " + ii + " record " + mm + " has fields " + options.msg);
									break;
								case 2:
									var checked = ["xstring", "xchoice"];
									self.assert(_hasStatusFields(records, options.isInputStatus, checked), msg + "list " + ii + " record " + mm + " has " + checked.join(",") + options.msg);
									break;
								case 3:
									var checked = ["xdate", "xboolean", "xdecimal"];
									self.assert(_hasStatusFields(records, options.isInputStatus, checked), msg + "list " + ii + " record " + mm + " has " + checked.join(",") + options.msg);
									break;
								default:
									self.assert(!_hasStatusFields(records, options.isInputStatus), msg + "list " + ii + " record " + mm + " has no fields " + options.msg);
									break;
							}
						}
					}
				}
			}
			_runTest(true);
			_runTest(false);
		}

	}];
}

exports.focus = function() {
	return [{
		$title: "Set focus string Row2",
		run: function(page) {
			page.refreshData();
			var first = page.boundFields.xarray[0].records[1];
			first.boundFields.xstring[0].focus();

			var list = _domQuery.field.find(page.domItem, "xarray");
			var records = _domQuery.list.getRecordByIndex(list, 1);
			var fields = _domQuery.getFields(records, ["xstring"]);
			this.assert(fields && fields.length == 1 && fields[0] == _domQuery.field.focus());
		}
	}];
};
exports.select = function() {
	return [{
		$title: "$isSelected record 2",
		run: function(page) {
			this.applyChange({
				xarray: [{
					$isSelected: true,
					$uuid: "record2",
					$index: 1
				}]
			});
			var lists = _domQuery.field.findAll(page.domItem, "xarray");
			var records = _domQuery.list.getRecordByUUID(lists[lists.length - 1], "record2");
			this.assert(_domQuery.list.record.isSelected(records), "record2 of last list is slected");
		}
	}];
};
exports.hide = function() {
	return [true, false].map(function(value) {
		return {
			$title: (value ? "hide" : "show") + " xarray",
			run: function(page) {
				this.applyChange({
					$properties: {
						xarray: {
							$isHidden: value
						}
					}
				});
				var lists = _domQuery.field.findAll(page.domItem, "xarray");
				for (var ii = 1; ii <= lists.length; ii++) {
					var list = lists[ii - 1];
					this.assert(_domQuery.field.isHidden(list) == value, "list " + ii + (value ? " is hidden" : " is visible"));
				}
			}

		};
	}).concat([true, false].map(function(value) {
		return {
			$title: (value ? "hide" : "show") + " xchoice",
			run: function(page) {
				this.applyChange({
					$properties: {
						xarray: {
							$item: {
								$properties: {
									xchoice: {
										$isHidden: value
									}
								}
							}
						}
					}
				});
				var lists = _domQuery.field.findAll(page.domItem, "xarray");
				for (var ii = 1; ii <= lists.length; ii++) {
					var ok;
					var list = lists[ii - 1];
					switch (_domQuery.list.getFormat(list)) {
						case "cards":
							var records = _domQuery.list.getRecords(list);
							var fields = _domQuery.getFields(records);
							for (var mm = 0; mm < fields.length; mm++) {
								var isHidden = _domQuery.field.isHidden(fields[mm]);
								ok = value == isHidden;
								if (value) {
									var isChoice = _domQuery.field.getBind(fields[mm]) == "xchoice";
									ok = isChoice ? isHidden : !isHidden;
								}
								if (!ok) {
									break;
								}
							}
							break;
						case "grid":
							var cols = _domQuery.list.getCols(list);
							for (var mm = 0; mm < cols.length; mm++) {
								var col = cols[mm];
								var isHidden = _domQuery.list.isColHidden(col);
								ok = value == isHidden;
								if (value) {
									var isChoice = _domQuery.list.getColBind(col) == "xchoice";
									ok = isChoice ? isHidden : !isHidden;
								}
								if (!ok) {
									break;
								}
							}
							break;
					}
					this.assert(ok, "list " + ii + (value ? "xchoice is hidden, other visible" : "xchoice is visible and other too"));
				}
			}
		};
	}));
};
exports.title = function() {
	return [{
		$title: "upadate title array",
		run: function(page) {
			var title = "new Title";
			this.applyChange({
				$properties: {
					xarray: {
						$title: title
					}
				}
			});
			var lists = _domQuery.field.findAll(page.domItem, "xarray");
			for (var ii = 1; ii <= lists.length; ii++) {
				var list = lists[ii - 1];
				this.assert(title == _domQuery.field.getTitle(list) && title == _domQuery.field.getTitleItem(list).innerText, "list " + ii + " has new title");
			}
		}

	}, {
		$title: "upadate xstring column Title",
		run: function(page) {
			var title = "new String Title";
			this.applyChange({
				$properties: {
					xarray: {
						$item: {
							$properties: {
								xstring: {
									$title: title
								}
							}
						}
					}
				}
			});
			var lists = _domQuery.field.findAll(page.domItem, "xarray");
			title = title.toUpperCase();
			for (var ii = 1; ii <= lists.length; ii++) {
				var list = lists[ii - 1];
				switch (_domQuery.list.getFormat(list)) {
					case "cards":
						var records = _domQuery.list.getRecords(list);
						var fields = _domQuery.getFields(records, ["xstring"]);
						var ok;
						for (var mm = 0; mm < fields.length; mm++) {
							ok = _domQuery.field.getTitle(fields[mm]).toUpperCase() == title;
							if (!ok) {
								break;
							}
						}
						this.assert(ok, "list " + ii + " each card has new columpn title");
						break;
					case "grid":
						this.assert(_domQuery.list.getColTitle(_domQuery.list.getFieldCol(list, "xstring")).toUpperCase() == title, "list " + ii + " has new column title");
						break;
				}
			}
		}
	}];
};
exports.$isReadOnly = function() {
	return _addStatusScenario("$isReadOnly", {
		isInputStatus: "isInputReadOnly",
		msg: " readonly"
	});
};
exports.$isDisabled = function() {
	return _addStatusScenario("$isDisabled", {
		isInputStatus: "isInputDisabled",
		msg: " disabled"
	});
};
exports.styles = function() {
	function _runFullStyle(page, unit, styles, clear) {
		unit.applyChange({
			xarray: styles.map(function(style, ii) {
				return {
					$uuid: "record" + ii,
					$valueStyle: style ? ("cst_sty_" + style) : style
				};
			})
		});
		var lists = _domQuery.field.findAll(page.domItem, "xarray");
		for (var ii = 1; ii <= lists.length; ii++) {
			var records = _domQuery.list.getRecords(lists[ii - 1]);
			var fields = _domQuery.getFields(records);
			var ok;
			for (var mm = 0; mm < fields.length; mm++) {
				var style = _domQuery.field.getValueStyle(fields[mm]) || "";
				if (clear) {
					ok = (style == "" || style.indexOf("-default") > 0);
				} else {
					ok = (style != "");
				}
				if (!ok) {
					break;
				}
			}
			unit.assert(ok, "list " + ii + "'" + unit.$title + "' is applyed");
		}
	}

	function _runFiedlStyle(page, unit, delta) {
		function _hasStyle(fields) {
			var ok;
			for (var mm = 0; mm < fields.length; mm++) {
				ok = (_domQuery.field.getValueStyle(fields[mm]) || "") != "";
				if (!ok) {
					break;
				}
			}
			return ok;
		}

		unit.applyChange(delta);
		var lists = _domQuery.field.findAll(page.domItem, "xarray");
		for (var ii = 1; ii <= lists.length; ii++) {
			var msg = (delta.$isPartialDelta ? "partial delta " : "") + "list " + ii + " ";
			var records = _domQuery.list.getRecords(lists[ii - 1]);
			var ok = _hasStyle(_domQuery.getFields(records, ["xstring", "xchoice"]));
			unit.assert(ok, msg + "all xstring and xchoice have style");

			["record2", "record3"].forEach(function(uuid) {
				var records = _domQuery.list.getRecordByUUID(lists[lists.length - 1], uuid);
				var ok = _hasStyle(_domQuery.getFields(records));
				unit.assert(ok, msg + uuid + " all fields have style");
			});
			var records = _domQuery.list.getRecordByUUID(lists[lists.length - 1], "record4");
			var ok = _hasStyle(_domQuery.getFields(records, ["xdate"]));
			unit.assert(ok, msg + "record4 xdate have style");
		}
	}
	return [{
		$title: "record styles 1",
		run: function(page) {
			_runFullStyle(page, this, ["info", "warning", "error", "strongdecreasing", "decreasing", "stable"]);
		}
	}, {
		$title: "record styles 2",
		run: function(page) {
			_runFullStyle(page, this, ["medium", "high", "veryhigh", "highlight", "verylow", "low"]);
		}

	}, {
		$title: "record styles clear",
		run: function(page) {
			_runFullStyle(page, this, ["", null, "default", "", null, "default"], true);
		}

	}, {
		$title: "$fieldStyle xchoice xstring column",
		run: function(page) {
			_runFiedlStyle(page, this, {
				$isPartialDelta: true,
				$properties: {
					xarray: {
						$item: {
							$properties: {
								xstring: {
									$fieldStyle: "font-style:bold; color: #FFFFFF;background-color:#FF80C0; background-color: #2E6AC2;background-image: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05) 49%, rgba(0, 0, 0, 0.05) 51%, rgba(0, 0, 0, 0.1));"
								},
								xchoice: {
									$fieldStyle: "font-style:italic;background-color:#EA4C89; color: #FFFFFF;"
								}
							}
						}
					}
				},
				xarray: [{
					$fieldStyle: "font-style:bold; color: #FFFFFF;background-color:#FF80C0; background-color: #2E6AC2;background-image: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05) 49%, rgba(0, 0, 0, 0.05) 51%, rgba(0, 0, 0, 0.1));",
					$uuid: "record2",
					$index: 1
				}, {
					$valueStyle: "font-style:italic;background-color:#EA4C89; color: #FFFFFF;",
					$uuid: "record3",
					$index: 2
				}, {
					$properties: {
						xdate: {
							$valueStyle: "font-style:bold;background-color:#FFAD1D; color: #030037;"
						}
					},
					$index: 3,
					$uuid: "record4"
				}]
			});
			_runFiedlStyle(page, this, {
				$properties: {
					xarray: {
						$item: {
							$properties: {
								xstring: {
									$fieldStyle: "cst_sty_info"
								},
								xchoice: {
									$fieldStyle: "cst_sty_error"
								}
							}
						}
					}
				},
				xarray: [{
					$uuid: "record1"
				}, {
					$fieldStyle: "cst_sty_info",
					$uuid: "record2"
				}, {
					$valueStyle: "cst_sty_error",
					$uuid: "record3"
				}, {
					$properties: {
						xdate: {
							$valueStyle: "cst_sty_warning"
						}
					},
					$uuid: "record4"
				}, {
					$uuid: "record5"
				}, {
					$uuid: "record6",
					xstring: "updated 6"
				}, {
					$uuid: "record7",
					xstring: "updated 7"
				}]
			});
		}
	}];
};
exports.diagnoses = function() {
	function _getError(clean) {
		return {
			$diagnoses: clean ? [] : [{
				severity: "error",
				message: "Error test  blalfoz"
			}]
		};
	}

	function _getWarning(clean) {
		return {
			$diagnoses: clean ? [] : [{
				severity: "warning",
				message: "Warning test"
			}]
		};
	}

	function _getInfo(clean) {
		return {
			$diagnoses: clean ? [] : [{
				severity: "info",
				message: "Info test"
			}]
		};
	}

	function _buildDelta(isPartialDelta, clean) {
		var xarray = [];
		for (var ii = 0; ii <= 7; ii++) {
			var $data = {
				$uuid: "record" + ii
			};
			switch (ii) {
				case 1:
					$data.$properties = {
						xstring: _getError(clean),
						xchoice: _getInfo(clean)
					};
					break;
				case 2:
					$data.$properties = {
						xstring: _getInfo(clean),
						xchoice: _getWarning(clean),
						xboolean: _getError(clean),
						xdecimal: _getError(clean)
					};
					break;
				default:
					if (isPartialDelta) {
						continue;
					}
			}
			if (isPartialDelta) {
				$data.$index = ii;
			}
			xarray.push($data);
		}
		return {
			$isPartialDelta: isPartialDelta,
			$properties: {
				xarray: _getError(clean)
			},
			xarray: xarray
		};
	}
	return [{
		$title: "single diagnose",
		run: function(page) {
			this.applyChange({
				xarray: [{
					$uuid: "record1",
					$index: 1,
					$properties: {
						xstring: _getError(),
						xdate: _getWarning(),
						xchoice: _getWarning(),
					}
				}]
			});
		}
	}, {
		$title: "multi diagnoses",
		run: function(page) {
			this.applyChange(_buildDelta(true));
			this.applyChange(_buildDelta(false));
		}
	}, {
		$title: "clean diagnoses",
		run: function(page) {
			this.applyChange(_buildDelta(true, true));
			this.applyChange(_buildDelta(false, true));
		}

	}];
};
exports.crud = function() {
	return [{
		$title: "insert 1",
		run: function(page) {
			this.applyChange({
				xarray: [{
					$uuid: "insert 1",
					$index: 1,
					xstring: "insert 1"
				}]
			});
		}
	}, {
		$title: "upadate record 2",
		run: function(page) {
			this.applyChange({
				xarray: [{
					$uuid: "record2",
					$index: 2,
					xstring: "updated 2"
				}]
			});
		}

	}, {
		$title: "upadate 2 7",
		run: function(page) {
			this.applyChange({
				$isPartialDelta: true,
				xarray: [{
					$uuid: "record2",
					$index: 1,
					xstring: "updated 2"
				}, {
					$uuid: "record7",
					$index: 6,
					xstring: "updated 7"
				}]
			});
			this.applyChange({
				xarray: [{
					$uuid: "record1"
				}, {
					$uuid: "record2",
					xstring: "updated 2"
				}, {
					$uuid: "record3"
				}, {
					$uuid: "record4"
				}, {
					$uuid: "record5"
				}, {
					$uuid: "record6"
				}, {
					$uuid: "record7",
					xstring: "updated 7"
				}]
			});
		}
	}, {
		$title: "reorder",
		run: function(page) {
			function _buildDelta($isPartialDelta) {
				var count = page.dataset.xarray.length - 1;
				return {
					xarray: page.dataset.xarray.map(function(record, index) {
						record = {
							$uuid: record.$uuid
						};
						if ($isPartialDelta) {
							record.$index = count - index;
						}
						return record;
					}).reverse()
				};
			}
			this.applyChange(_buildDelta(true));
			page.refreshData();
			this.applyChange(_buildDelta());
		}

	}, {
		$title: "delete record2",
		run: function(page) {
			this.applyChange({
				xarray: [{
					$uuid: "record2",
					$index: 2,
					"$isDeleted": true
				}]
			});
		}

	}, {
		$title: "delete record3 record6 record7",
		run: function(page) {
			this.applyChange({
				$isPartialDelta: true,
				xarray: [{
					$uuid: "record3",
					$index: 3,
					"$isDeleted": true
				}, {
					$uuid: "record6",
					$index: 6,
					"$isDeleted": true
				}, {
					$uuid: "record7",
					$index: 7,
					"$isDeleted": true
				}]
			});
			this.applyChange({
				xarray: [{
					$uuid: "record0"
				}, {
					$uuid: "record1"
				}, {
					$uuid: "record2"
				}, {
					$uuid: "record4"
				}, {
					$uuid: "record5"
				}]
			});
		}

	}];
};
exports.actionLinks = function() {
	function _getNull() {
		return {
			$links: null
		};
	}

	function _getLazyLoad() {
		return {
			$links: {
				$lazyload: {}
			}
		};
	}

	function _getLinksActions() {
		return {
			$actions: {
				"$save": {
					$title: "Save"
				}
			},
			$links: {
				"google": {
					$title: "Google",
					$url: "http://www.google.fr/"
				},
				"uioverview": {
					$title: "UI Overview",
					$url: "?representation=s-uitest-fields.$test"
				},
				"$details": {
					$type: "application/json;vnd.sage=syracuse",
					$title: "Detail",
					$url: "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')?representation=country.$details&role={$role}"
				},
				"$linksFormParameters": {
					$title: "Parameters",
					$url: "/sdata/syracuse/collaboration/syracuse/users?representation=employee.$query&par1={param1}&par2={param2}",
					"$parameters": {
						"param1": "xstring",
						"param2": "value"
					}
				}
			}
		};
	}

	function _getNullFormParametersLink() {
		return {
			$links: {
				$linksFormParameters: null
			}
		};
	}

	function _buildDelta(isPartialDelta, filler) {
		var xarray = [];
		for (var ii = 0; ii <= 7; ii++) {
			var $data = filler();
			$data.$uuid = "record" + ii;
			if (ii == 1 || ii == 3) {
				$data.$properties = {
					xstring: filler(),
					xchoice: filler(),
					xdate: filler(),
					xboolean: filler(),
					xdecimal: filler()
				};
				if (isPartialDelta) {
					$data.$index = ii;
				}
			} else {
				if (isPartialDelta) {
					continue;
				}
				//cancel filler
				delete $data.$links;
				delete $data.$actions;
			}
			xarray.push($data);
		}
		return {
			$isPartialDelta: isPartialDelta,
			$properties: {
				xarray: filler()
			},
			xarray: xarray
		};
	}

	return [{
		$title: "$links = null",
		run: function(page) {
			this.applyChange(_buildDelta(true, _getNull));
			this.applyChange(_buildDelta(false, _getNull));
		}
	}, {
		$title: "$lazyload",
		run: function(page) {
			this.applyChange(_buildDelta(true, _getLazyLoad));
			this.applyChange(_buildDelta(false, _getLazyLoad));
		}

	}, {
		$title: "$links ans $actions",
		run: function(page) {
			this.applyChange(_buildDelta(true, _getLinksActions));
			this.applyChange(_buildDelta(false, _getLinksActions));
		}

	}, {
		$title: "Parameter null",
		run: function(page) {
			this.applyChange(_buildDelta(true, _getNullFormParametersLink));
			this.applyChange(_buildDelta(false, _getNullFormParametersLink));
		}
	}];
};
exports.capabilities = function() {
	return ["insert,append,delete,reorder", "capabilities insert,delete,deleteAll", ""].map(function($capabilities) {
		return {
			$title: "capabilities " + ($capabilities || "none"),
			run: function(page) {
				this.applyChange({
					$properties: {
						xarray: {
							$capabilities: $capabilities
						}
					}
				});
			}

		};
	}).concat({
		$title: "alt undelete / delete",
		run: function(page) {
			this.applyChange({
				xarray: [0, 1, 2, 3, 4, 5, 6, 7].map(function(ii) {
					return {
						$uuid: "record" + ii,
						$capabilities: ii % 2 ? "delete" : ""
					};
				})
			});
		}
	});
};