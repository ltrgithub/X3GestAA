"use strict";

function _walkList(unit, delta, strictEqual) {
	unit.applyChange(delta);
	var lists = syra_quality.domQuery.field.findAll(unit.page.domItem, "xarray");
	for (var ii = 0; ii < lists.length; ii++) {
		var msg = (delta.$isPartialDelta ? "partial delta " : "") + "list " + (ii + 1) + " ";
		var result = strictEqual(lists[ii]);
		if (result !== undefined) {
			if (Array.isArray(result)) {
				result.forEach(function(res) {
					unit.assert(res.ok, msg + res.msg);
				});
			} else {
				unit.assert(result, msg + unit.$title);
			}
		}
	}
}

exports.diagnoses = function() {
	function _getError(clean) {
		return {
			$diagnoses: clean ? [] : [{
				severity: "error",
				message: "Error test  blalfoz"
			}]
		};
	}

	function _getWarning(clean) {
		return {
			$diagnoses: clean ? [] : [{
				severity: "warning",
				message: "Warning test"
			}]
		};
	}

	function _getInfo(clean) {
		return {
			$diagnoses: clean ? [] : [{
				severity: "info",
				message: "Info test"
			}]
		};
	}

	function _buildDelta(isPartialDelta, clean) {
		var xarray = [];
		for (var ii = 1; ii <= 5; ii++) {
			var $data = {
				$uuid: "record" + ii
			};
			switch (ii) {
				case 1:
					$data.$properties = {
						xstring: _getError(clean),
						xchoice: _getInfo(clean)
					};
					break;
				case 2:
					$data.$properties = {
						xstring: _getInfo(clean),
						xchoice: _getWarning(clean),
						xboolean: _getError(clean),
						xdecimal: _getError(clean)
					};
					break;
				default:
					if (isPartialDelta) {
						continue;
					}
			}
			if (isPartialDelta) {
				$data.$index = ii - 1;
			}
			xarray.push($data);
		}
		return {
			$isPartialDelta: isPartialDelta,
			$properties: {
				xarray: _getError(clean)
			},
			xarray: xarray
		};
	}
	return [{
		$title: "single diagnose",
		run: function() {
			_walkList(this, {
				xarray: [{
					$uuid: "record1",
					$index: 0,
					$properties: {
						xstring: _getError(),
						xdate: _getWarning(),
						xchoice: _getWarning(),
					}
				}]
			}, function(list) {});
		}
	}, {
		$title: "multi diagnoses",
		run: function() {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta), function(list) {});
			});
		}
	}, {
		$title: "clean diagnoses",
		run: function() {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta, true), function(list) {});
			});
		}
	}];
};

exports.focus = function() {
	return [{
		$title: "Set focus string Row2",
		run: function() {
			this.page.refreshData();
			var list = this.page.boundFields.xarray[0];
			if (list.$isEditMode) {
				var first = list.records[1];
				first.boundFields.xstring[0].focus();

				var list = syra_quality.domQuery.field.find(this.page.domItem, "xarray");
				var records = syra_quality.domQuery.list.getRecordByIndex(list, 1);
				var fields = syra_quality.domQuery.getFields(records, ["xstring"]);
				this.assert(fields && fields.length == 1 && fields[0] == syra_quality.domQuery.field.focus());
			}
		}
	}];
};
exports.select = function() {
	return [{
		$title: "$isSelected record 2",
		run: function() {
			this.applyChange({
				xarray: [{
					$isSelected: true,
					$uuid: "record2",
					$index: 1
				}]
			});
			var lists = syra_quality.domQuery.field.findAll(this.page.domItem, "xarray");
			var records = syra_quality.domQuery.list.getRecordByUUID(lists[lists.length - 1], "record2");
			this.assert(syra_quality.domQuery.list.record.isSelected(records), "record2 of last list is slected");
		}
	}];
};

exports.hide = function() {
	return [true, false].map(function($isHidden) {
		return {
			$title: ($isHidden ? "hide" : "show") + " xarray",
			run: function() {
				_walkList(this, {
					$properties: {
						xarray: {
							$isHidden: $isHidden
						}
					}
				}, function(list) {
					return syra_quality.domQuery.field.isHidden(list) == $isHidden;
				});
			}
		};
	}).concat([true, false].map(function($isHidden) {
		return {
			$title: $isHidden ? "xchoice is hidden, other visible" : "xchoice is visible and other too",
			run: function() {
				_walkList(this, {
					$properties: {
						xarray: {
							$item: {
								$properties: {
									xchoice: {
										$isHidden: $isHidden
									}
								}
							}
						}
					}
				}, function(list) {
					var ok;
					var records = syra_quality.domQuery.list.getRecords(list);
					var fields = syra_quality.domQuery.getFields(records);
					for (var mm = 0; mm < fields.length && ok !== false; mm++) {
						var state = syra_quality.domQuery.field.isHidden(fields[mm]);
						if ($isHidden) {
							ok = (syra_quality.domQuery.field.getBind(fields[mm]) == "xchoice") ? state : !state;
						} else {
							ok = $isHidden == state;
						}
					}
					if (ok !== false && syra_quality.domQuery.list.getFormat(list) == "grid") {
						var cols = syra_quality.domQuery.list.getCols(list);
						for (var mm = 0; mm < cols.length && ok !== false; mm++) {
							var col = cols[mm];
							var state = syra_quality.domQuery.list.isColHidden(col);
							ok = $isHidden == state;
							if ($isHidden) {
								ok = (syra_quality.domQuery.list.getColBind(col) == "xchoice") ? state : !state;
							} else {
								ok = $isHidden == state;
							}
						}
					}
					return ok;
				});
			}
		};
	}));
};
exports.title = function() {
	return [{
		$title: "upadate title array",
		run: function() {
			var title = "new Title";
			_walkList(this, {
				$properties: {
					xarray: {
						$title: title
					}
				}
			}, function(list) {
				title == syra_quality.domQuery.field.getTitle(list) && title == syra_quality.domQuery.field.getTitleItem(list).innerText;
			});
		}
	}, {
		$title: "update xstring field title",
		run: function() {
			var title = "new String Title";
			_walkList(this, {
				$properties: {
					xarray: {
						$item: {
							$properties: {
								xstring: {
									$title: title
								}
							}
						}
					}
				}
			}, function(list) {
				var ok;
				title = title.toUpperCase();
				if (syra_quality.domQuery.list.getFormat(list) == "cards") {
					var records = syra_quality.domQuery.list.getRecords(list);
					var fields = syra_quality.domQuery.getFields(records, ["xstring"]);
					for (var mm = 0; mm < fields.length && ok !== false; mm++) {
						ok = syra_quality.domQuery.field.getTitle(fields[mm]).toUpperCase() == title;
					}
				} else {
					ok = syra_quality.domQuery.list.getColTitle(syra_quality.domQuery.list.getFieldCol(list, "xstring")).toUpperCase() == title;
				}
				return ok;
			});
		}
	}];
};

function _addStatusScenario($status, options) {
	function _buildDelta(isPartialDelta, $status, value) {
		var xarray = [];

		function _setFieldsStatus(obj, $props) {
			obj.$properties = {};
			$data.xstring = "";
			for (var ii = 0; ii < $props.length; ii++) {
				(obj.$properties[$props[ii]] = {})[$status] = value;
				$data.xstring += $props[ii] + " " + $status;
			}
			$data.xstring += $status;
		}
		for (var ii = 1; ii <= 5; ii++) {
			var $data = {
				$uuid: "record" + ii
			};
			switch (ii) {
				case 1:
					$data[$status] = value;
					$data.xstring = "record " + $status;
					break;
				case 2:
					_setFieldsStatus($data, ["xstring", "xchoice"]);
					break;
				case 3:
					_setFieldsStatus($data, ["xdate", "xboolean", "xdecimal"]);
					break;
				default:
					if (isPartialDelta) {
						continue;
					}
			}
			if (isPartialDelta) {
				$data.$index = ii - 1;
			}
			xarray.push($data);
		}
		return {
			$isPartialDelta: isPartialDelta,
			xarray: xarray
		};
	}

	function _hasStatusFields(records, check, binds) {
		var fields = syra_quality.domQuery.getFields(records, binds);
		var ok;
		for (var mm = 0; mm < fields.length && ok !== false; mm++) {
			ok = syra_quality.domQuery.field[check](fields[mm], true);
		}
		return ok;
	}

	return [{
		$title: $status + " all array",
		run: function() {
			var $xarray = {};
			$xarray[$status] = true;
			_walkList(this, {
				$properties: {
					xarray: $xarray
				}
			}, function(list) {
				var res = [];
				var isEditMode = syra_quality.domQuery.field.isEditMode(list);
				var records = syra_quality.domQuery.list.getFilterRecord(list);
				if (records.length) {
					res.push({
						ok: _hasStatusFields(records, options.isInputStatus) == false,
						msg: " filter fields are not " + options.msg
					});
				};
				records = syra_quality.domQuery.list.getRecords(list);
				if (isEditMode) {
					res.push({
						ok: _hasStatusFields(records, options.isInputStatus),
						msg: " has all edit fields " + options.msg
					});
				}
				return res;
			});
		}
	}, {
		$title: $status + " record 1 2 3",
		run: function() {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta, $status, true), function(list) {
					var res = [];
					var isEditMode = syra_quality.domQuery.field.isEditMode(list);
					if (isEditMode) {
						for (var mm = 1; mm <= 5; mm++) {
							var records = syra_quality.domQuery.list.getRecordByUUID(list, "record" + mm);
							switch (mm) {
								case 1:
									res.push({
										ok: _hasStatusFields(records, options.isInputStatus),
										msg: "record " + mm + " has fields " + options.msg
									});
									break;
								case 2:
									var checked = ["xstring", "xchoice"];
									res.push({
										ok: _hasStatusFields(records, options.isInputStatus, checked),
										msg: "record " + mm + " has " + checked.join(",") + options.msg
									});
									break;
								case 3:
									var checked = ["xdate", "xboolean", "xdecimal"];
									res.push({
										ok: _hasStatusFields(records, options.isInputStatus, checked),
										msg: "record " + mm + " has " + checked.join(",") + options.msg
									});
									break;
								default:
									res.push({
										ok: !_hasStatusFields(records, options.isInputStatus),
										msg: "record " + mm + " has no fields " + options.msg
									});
									break;
							}
						}
					}
					return res;
				});
			});
		}
	}];
}

exports.$isReadOnly = function() {
	return _addStatusScenario("$isReadOnly", {
		isInputStatus: "isInputReadOnly",
		msg: " readonly"
	});
};
exports.$isDisabled = function() {
	return _addStatusScenario("$isDisabled", {
		isInputStatus: "isInputDisabled",
		msg: " disabled"
	});
};

function _runUpdate(unit, delta, updated) {
	_walkList(unit, delta, function(list) {
		var uiids = Object.keys(updated);
		var ok;
		for (var mm = 0; mm < uiids.length && ok != false; mm++) {
			var records = syra_quality.domQuery.list.getRecordByUUID(list, uiids[mm]);
			var fields = syra_quality.domQuery.getFields(records, ["xstring"]);
			ok = fields.length && syra_quality.domQuery.field.getDataValue(fields[0]) == updated[uiids[mm]];
		}
		return ok;
	});
}

function _runDelete(unit, delta, deleted) {
	_walkList(unit, delta, function(list) {
		var ok;
		for (var mm = 1; mm <= 5 && ok !== false; mm++) {
			var records = syra_quality.domQuery.list.getRecordByUUID(list, "record" + mm);
			ok = (deleted.indexOf(mm) >= 0) ? records.length == 0 : records.length > 0;
		}
		return ok;
	});
}


exports.crud = function() {
	return [{
		$title: "insert after record 1",
		run: function() {
			_walkList(this, {
				xarray: [{
					$uuid: "insert_after_1",
					$index: 1,
					xstring: "insert after record 1"
				}]
			}, function(list) {
				var ok;
				var uuids = ["record1", "insert_after_1", "record2", "record3", "record4", "record5"];
				for (var mm = 0; mm < uuids.length && ok !== false; mm++) {
					var records = syra_quality.domQuery.list.getRecordByIndex(list, mm);
					ok = records.length && records[0].getAttribute("data-s-record") == uuids[mm];
				}
				return ok;
			});
		}
	}, {
		$title: "upadate record 2",
		run: function() {
			_runUpdate(this, {
				xarray: [{
					$uuid: "record2",
					$index: 1,
					xstring: "record 2 updated"
				}]
			}, {
				"record2": "record 2 updated"
			});
		}
	}, {
		$title: "update 2 5",
		run: function() {
			var updated = {
				"record2": "record 2 updated",
				"record5": "record 5 updated"
			};
			_runUpdate(this, {
				$isPartialDelta: true,
				xarray: [{
					$uuid: "record2",
					$index: 1,
					xstring: updated["record2"]
				}, {
					$uuid: "record5",
					$index: 4,
					xstring: updated["record5"]
				}]
			}, updated);
			_runUpdate(this, {
				xarray: [{
					$uuid: "record1"
				}, {
					$uuid: "record2",
					xstring: updated["record2"]
				}, {
					$uuid: "record3"
				}, {
					$uuid: "record4"
				}, {
					$uuid: "record5",
					xstring: updated["record5"]
				}]
			}, updated);
		}
	}, {
		$title: "reorder",
		run: function() {
			function _runReorder(unit, delta) {
				_walkList(unit, delta, function(list) {
					var ok;
					for (var mm = 0; mm < 5 && ok != false; mm++) {
						var records = syra_quality.domQuery.list.getRecordByIndex(list, mm);
						ok = records.length && records[0].getAttribute("data-s-record") == ("record" + (5 - mm));
					}
					return ok;
				});
			}
			_runReorder(this, {
				$isPartialDelta: true,
				"xarray": [{
					$uuid: "record5",
					$index: 0
				}, {
					$uuid: "record4",
					$index: 1
				}, {
					$uuid: "record3",
					$index: 2
				}, {
					$uuid: "record2",
					$index: 3
				}, {
					$uuid: "record1",
					$index: 4
				}]
			});
			_runReorder(this, {
				"xarray": [{
					$uuid: "record5"
				}, {
					$uuid: "record4"
				}, {
					$uuid: "record3"
				}, {
					$uuid: "record2"
				}, {
					$uuid: "record1"
				}]
			});
		}

	}, {
		$title: "delete record2",
		run: function() {
			_runDelete(this, {
				xarray: [{
					$uuid: "record2",
					$index: 1,
					"$isDeleted": true
				}]
			}, [2]);
		}

	}, {
		$title: "delete record1 record3 record4",
		run: function() {
			_runDelete(this, {
				$isPartialDelta: true,
				xarray: [{
					$uuid: "record1",
					$index: 0,
					"$isDeleted": true
				}, {
					$uuid: "record3",
					$index: 2,
					"$isDeleted": true
				}, {
					$uuid: "record4",
					$index: 3,
					"$isDeleted": true
				}]
			}, [1, 3, 4]);
			_runDelete(this, {
				xarray: [{
					$uuid: "record2"
				}, {
					$uuid: "record5"
				}]
			}, [1, 3, 4]);
		}

	}];
};

exports.styles = function() {
	function _runFullStyle(unit, styles, clear) {
		_walkList(unit, {
			xarray: styles.map(function(style, ii) {
				return {
					$uuid: "record" + ii,
					$valueStyle: style ? ("cst_sty_" + style) : style
				};
			})
		}, function(list) {
			var records = syra_quality.domQuery.list.getRecords(list);
			var fields = syra_quality.domQuery.getFields(records);
			var ok;
			for (var mm = 0; mm < fields.length && ok !== false; mm++) {
				var style = syra_quality.domQuery.field.getValueStyle(fields[mm]) || "";
				if (clear) {
					ok = (style == "" || style.indexOf("-default") > 0);
				} else {
					ok = (style != "");
				}
			}
			return ok;
		});
	}

	function _runFiedlStyle(unit, delta) {
		function _hasStyle(fields) {
			var ok;
			for (var mm = 0; mm < fields.length; mm++) {
				ok = (syra_quality.domQuery.field.getValueStyle(fields[mm]) || "") != "";
				if (!ok) {
					break;
				}
			}
			return ok;
		}
		_walkList(unit, delta, function(list) {
			var res = [];
			var records = syra_quality.domQuery.list.getRecords(list);
			res.push({
				ok: _hasStyle(syra_quality.domQuery.getFields(records, ["xstring", "xchoice"])),
				msg: "all xstring and xchoice have style"
			});

			["record2", "record3"].forEach(function(uuid) {
				var records = syra_quality.domQuery.list.getRecordByUUID(list, uuid);
				res.push({
					ok: _hasStyle(syra_quality.domQuery.getFields(records)),
					msg: uuid + " all fields have style"
				});
			});
			var records = syra_quality.domQuery.list.getRecordByUUID(list, "record4");
			res.push({
				ok: _hasStyle(syra_quality.domQuery.getFields(records, ["xdate"])),
				msg: "record4 xdate have style"
			});
			return res;
		});

	}
	return [{
		$title: "record styles 1",
		run: function(page) {
			_runFullStyle(this, ["info", "warning", "error", "strongdecreasing", "decreasing", "stable"]);
		}
	}, {
		$title: "record styles 2",
		run: function(page) {
			_runFullStyle(this, ["medium", "high", "veryhigh", "highlight", "verylow", "low"]);
		}

	}, {
		$title: "record styles clear",
		run: function(page) {
			_runFullStyle(this, ["", null, "default", "", null, "default"], true);
		}

	}, {
		$title: "$fieldStyle xchoice xstring column",
		run: function() {
			_runFiedlStyle(this, {
				$isPartialDelta: true,
				$properties: {
					xarray: {
						$item: {
							$properties: {
								xstring: {
									$fieldStyle: "font-style:bold; color: #FFFFFF;background-color:#FF80C0; background-color: #2E6AC2;background-image: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05) 49%, rgba(0, 0, 0, 0.05) 51%, rgba(0, 0, 0, 0.1));"
								},
								xchoice: {
									$fieldStyle: "font-style:italic;background-color:#EA4C89; color: #FFFFFF;"
								}
							}
						}
					}
				},
				xarray: [{
					$fieldStyle: "font-style:bold; color: #FFFFFF;background-color:#FF80C0; background-color: #2E6AC2;background-image: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05) 49%, rgba(0, 0, 0, 0.05) 51%, rgba(0, 0, 0, 0.1));",
					$uuid: "record2",
					$index: 1
				}, {
					$valueStyle: "font-style:italic;background-color:#EA4C89; color: #FFFFFF;",
					$uuid: "record3",
					$index: 2
				}, {
					$properties: {
						xdate: {
							$valueStyle: "font-style:bold;background-color:#FFAD1D; color: #030037;"
						}
					},
					$index: 3,
					$uuid: "record4"
				}]
			});
			_runFiedlStyle(this, {
				$properties: {
					xarray: {
						$item: {
							$properties: {
								xstring: {
									$fieldStyle: "cst_sty_info"
								},
								xchoice: {
									$fieldStyle: "cst_sty_error"
								}
							}
						}
					}
				},
				xarray: [{
					$uuid: "record1"
				}, {
					$fieldStyle: "cst_sty_info",
					$uuid: "record2"
				}, {
					$valueStyle: "cst_sty_error",
					$uuid: "record3"
				}, {
					$properties: {
						xdate: {
							$valueStyle: "cst_sty_warning"
						}
					},
					$uuid: "record4"
				}, {
					$uuid: "record5"
				}]
			});
		}
	}];
};

exports.actionLinks = function() {
	function _getNull() {
		return {
			$links: null
		};
	}

	function _getLazyLoad() {
		return {
			$links: {
				$lazyload: {}
			}
		};
	}

	function _getLinksActions() {
		return {
			$actions: {
				"$save": {
					$title: "Save"
				}
			},
			$links: {
				"google": {
					$title: "Google",
					$url: "http://www.google.fr/"
				},
				"uioverview": {
					$title: "UI Overview",
					$url: "?representation=s-uitest-fields.$test"
				},
				"$details": {
					$type: "application/json;vnd.sage=syracuse",
					$title: "Detail",
					$url: "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')?representation=country.$details&role={$role}"
				},
				"$linksFormParameters": {
					$title: "Parameters",
					$url: "/sdata/syracuse/collaboration/syracuse/users?representation=employee.$query&par1={param1}&par2={param2}",
					"$parameters": {
						"param1": "xstring",
						"param2": "value"
					}
				}
			}
		};
	}

	function _getNullFormParametersLink() {
		return {
			$links: {
				$linksFormParameters: null
			}
		};
	}

	function _buildDelta(isPartialDelta, filler) {
		var xarray = [];
		for (var ii = 0; ii <= 7; ii++) {
			var $data = filler();
			$data.$uuid = "record" + ii;
			if (ii == 1 || ii == 3) {
				$data.$properties = {
					xstring: filler(),
					xchoice: filler(),
					xdate: filler(),
					xboolean: filler(),
					xdecimal: filler()
				};
				if (isPartialDelta) {
					$data.$index = ii;
				}
			} else {
				if (isPartialDelta) {
					continue;
				}
				//cancel filler
				delete $data.$links;
				delete $data.$actions;
			}
			xarray.push($data);
		}
		return {
			$isPartialDelta: isPartialDelta,
			$properties: {
				xarray: filler()
			},
			xarray: xarray
		};
	}

	return [{
		$title: "$links = null",
		run: function(page) {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta, _getNull), function(list) {});
			});
		}
	}, {
		$title: "$lazyload",
		run: function(page) {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta, _getLazyLoad), function(list) {});
			});
		}

	}, {
		$title: "$links ans $actions",
		run: function(page) {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta, _getLinksActions), function(list) {});
			});
		}

	}, {
		$title: "Parameter null",
		run: function(page) {
			var self = this;
			[true, false].forEach(function(isPartialDelta) {
				_walkList(self, _buildDelta(isPartialDelta, _getNullFormParametersLink), function(list) {});
			});
		}
	}];
};
exports.capabilities = function() {
	return ["insert,append,delete,reorder", "capabilities insert,delete,deleteAll", ""].map(function($capabilities) {
		return {
			$title: "capabilities " + ($capabilities || "none"),
			run: function(page) {
				_walkList(this, {
					$properties: {
						xarray: {
							$capabilities: $capabilities
						}
					}
				}, function(list) {});

			}

		};
	}).concat({
		$title: "alt undelete / delete",
		run: function(page) {
			_walkList(this, {
				xarray: [1, 2, 3, 4, 5].map(function(ii) {
					return {
						$uuid: "record" + ii,
						$capabilities: ii % 2 ? "delete" : ""
					};
				})
			}, function(list) {});
		}
	});
};