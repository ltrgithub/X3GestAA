"use strict";

function _statusScenario($status, options) {
	function _buildDelta(isPartialDelta, $status, value) {
		var xarray = [];

		function _setFieldsStatus(obj, $props) {
			obj.$properties = {};
			$data.xstring = "";
			for (var ii = 0; ii < $props.length; ii++) {
				(obj.$properties[$props[ii]] = {})[$status] = value;
				$data.xstring += $props[ii] + " " + $status;
			}
			$data.xstring += $status;
		}
		for (var ii = 1; ii <= 7; ii++) {
			var $data = {
				$uuid: "record" + ii
			};
			switch (ii) {
				case 1:
					$data[$status] = value;
					$data.xstring = "record " + $status;
					break;
				case 2:
					_setFieldsStatus($data, ["xstring", "xchoice"]);
					break;
				case 3:
					_setFieldsStatus($data, ["xdate", "xboolean", "xdecimal"]);
					break;
				default:
					if (isPartialDelta) {
						continue;
					}
			}
			if (isPartialDelta) {
				$data.$index = ii - 1;
			}
			xarray.push($data);
		}
		return {
			$isPartialDelta: isPartialDelta,
			xarray: xarray
		};
	}

	function _hasStatusFields(records, check, binds) {
		var fields = exports.list.record.getFields(records, binds);
		var ok;
		for (var mm = 0; mm < fields.length; mm++) {
			ok = exports.field[check](fields[mm], true);
		}
		return ok;
	}

	return [{
		$title: $status + " all array",
		run: function(page) {
			var $xarray = {};
			$xarray[$status] = true;
			this.applyChange({
				$properties: {
					xarray: $xarray
				}
			});
			var lists = exports.field.findAll(page.domItem, "xarray");
			for (var ii = 1; ii <= lists.length; ii++) {
				var list = lists[ii - 1];
				var isEditMode = exports.field.isEditMode(list);
				var records = exports.list.getFilterRecord(list);
				records.length && this.assert(_hasStatusFields(records, options.isInputStatus) == false, "list " + ii + " has no filter fields " + options.msg);
				records = exports.list.getRecords(list);
				if (isEditMode) {
					this.assert(_hasStatusFields(records, options.isInputStatus), "list " + ii + " has fields " + options.msg);
				}
			}
		}
	}, {
		$title: $status + " record 1 2 3",
		run: function(page) {
			var self = this;

			function _runTest(isPartialDelta) {
				self.applyChange(_buildDelta(isPartialDelta, $status, true));
				var lists = exports.field.findAll(page.domItem, "xarray");
				var msg = isPartialDelta ? "partial delta " : "";
				for (var ii = 1; ii <= lists.length; ii++) {
					var list = lists[ii - 1];
					var isEditMode = exports.field.isEditMode(list);
					var records = exports.list.getRecords(list);
					if (isEditMode) {
						var assert = "";
						for (var mm = 1; mm <= records.length; mm++) {
							var record = records[mm - 1];
							switch (mm) {
								case 1:
									self.assert(_hasStatusFields([record], options.isInputStatus), msg + "list " + ii + " record " + mm + " has fields " + options.msg);
									break;
								case 2:
									var checked = ["xstring", "xchoice"];
									self.assert(_hasStatusFields([record], options.isInputStatus, checked), msg + "list " + ii + " record " + mm + " has " + checked.join(",") + options.msg);
									break;
								case 3:
									var checked = ["xdate", "xboolean", "xdecimal"];
									self.assert(_hasStatusFields([record], options.isInputStatus, checked), msg + "list " + ii + " record " + mm + " has " + checked.join(",") + options.msg);
									break;
								default:
									self.assert(!_hasStatusFields([record], options.isInputStatus), msg + "list " + ii + " record " + mm + " has no fields " + options.msg);
									break;
							}
						}
					}
				}
			}
			_runTest(true);
			_runTest(false);
		}

	}];
}

function _getAside() {
	return document.getElementById("s-site-quality");
}

exports.field = {
	isEditMode: function(field) {
		return field.getAttribute("data-s-field-edit-mode") == "1";
	},
	findAll: function(root, bind) {
		return bind ? root.querySelectorAll("[data-s-q-bind='" + bind + "']") : root.querySelectorAll("[data-s-q-bind]");
	},
	find: function(root, bind) {
		return root.querySelector("[data-s-q-bind='" + bind + "']");
	},
	focus: function() {
		var id = _getAside().getAttribute("data-s-focus");
		return id && document.getElementById(id);
	},
	getTitle: function(field) {
		return field.getAttribute("data-s-q-title");
	},
	getTitleItem: function(field) {
		return field.querySelector("[data-s-field-title]");
	},
	isInputReadOnly: function(field, checkInput) {
		var ok = field.querySelectorAll(".s-readonly").length > 0;
		if (checkInput) {
			var inputs = field.querySelectorAll("input");
			for (var ii = 0; ii < inputs.lengtj; ii++) {
				ok = inputs[0].readonly;
			}
		}
		return ok;
	},
	isInputDisabled: function(field, checkInput) {
		var ok = field.querySelectorAll(".s-disabled").length > 0;
		if (checkInput) {
			var inputs = field.querySelectorAll("input");
			for (var ii = 0; ii < inputs.lengtj; ii++) {
				ok = inputs[0].disabled;
			}
		}
		return ok;
	}

};
exports.list = {
	getFormat: function(list) {
		return list.getAttribute("data-s-list-format");
	},
	getRecordSelected: function(list) {
		return list.querySelectorAll(".s-list-record-selected");
	},
	getRecordByIndex: function(list, index) {
		return list.querySelectorAll("[data-s-record-index='" + index + "']");
	},
	getRecordByUUID: function(list, uuid) {
		return list.querySelectorAll("[data-s-record='" + uuid + "']");
	},
	getCols: function(list) {
		return list.querySelectorAll("[data-s-list-col]");
	},
	getFieldCol: function(list, bind) {
		return list.querySelector("[data-s-list-col-bind='" + bind + "']");
	},
	getColTitle: function(col) {
		return col.getAttribute("data-s-list-col-title");
	},
	getRecords: function(list) {
		return list.querySelectorAll("[data-s-record]");
	},
	getFilterRecord: function(list) {
		return list.querySelectorAll("[data-s-filter-record]");
	},
	record: {
		isSelected: function(records, bind) {
			var selected;
			if (records) {
				for (var ii = 0; ii < records.length; ii++) {
					selected = records[ii].className.indexOf("s-list-record-selected") >= 0;
				}
			}
			return selected;
		},
		getFields: function(records, binds) {
			var fields = [];
			if (records) {
				for (var ii = 0; ii < records.length; ii++) {
					if (binds) {
						for (var mm = 0; mm < binds.length; mm++) {
							fields.push(exports.field.find(records[ii], binds[mm]));
						}
					} else {
						var all = exports.field.findAll(records[ii]);
						for (var mm = 0; mm < all.length; mm++) {
							fields.push(all[mm]);
						}
					}
				}
			}
			return fields;
		}
	}
};



exports.scenarios = {
	focus: function() {
		return [{
			$title: "Set focus string Row2",
			run: function(page) {
				page.refreshData();
				var first = page.boundFields.xarray[0].records[1];
				first.boundFields.xstring[0].focus();

				var list = exports.field.find(page.domItem, "xarray");
				var records = exports.list.getRecordByIndex(list, 1);
				var fields = exports.list.record.getFields(records, ["xstring"]);
				this.assert(fields && fields.length == 1 && fields[0] == exports.field.focus());
			}
		}];
	},
	select: function() {
		return [{
			$title: "$isSelected record 2",
			run: function(page) {
				this.applyChange({
					xarray: [{
						$isSelected: true,
						$uuid: "record2",
						$index: 1
					}]
				});
				var lists = exports.field.findAll(page.domItem, "xarray");
				var records = exports.list.getRecordByUUID(lists[lists.length - 1], "record2");
				this.assert(exports.list.record.isSelected(records), "record2 of last list is slected");
			}
		}];
	},
	title: function() {
		return [{
			$title: "upadate title array",
			run: function(page) {
				var title = "new Title";
				this.applyChange({
					$properties: {
						xarray: {
							$title: title
						}
					}
				});
				var lists = exports.field.findAll(page.domItem, "xarray");
				for (var ii = 1; ii <= lists.length; ii++) {
					var list = lists[ii - 1];
					this.assert(title == exports.field.getTitle(list) && title == exports.field.getTitleItem(list).innerText, "list " + ii + " has new title");
				}
			}

		}, {
			$title: "upadate xstring column Title",
			run: function(page) {
				var title = "new String Title";
				this.applyChange({
					$properties: {
						xarray: {
							$item: {
								$properties: {
									xstring: {
										$title: title
									}
								}
							}
						}
					}
				});
				var lists = exports.field.findAll(page.domItem, "xarray");
				title = title.toUpperCase();
				for (var ii = 1; ii <= lists.length; ii++) {
					var list = lists[ii - 1];
					switch (exports.list.getFormat(list)) {
						case "cards":
							var records = exports.list.getRecords(list);
							var fields = exports.list.record.getFields(records, ["xstring"]);
							var ok;
							for (var mm = 0; mm < fields.length; mm++) {
								ok = exports.field.getTitle(fields[mm]).toUpperCase() == title;
							}
							this.assert(ok, "list " + ii + " each card has new columpn title");
							break;
						case "grid":
							this.assert(exports.list.getColTitle(exports.list.getFieldCol(list, "xstring")).toUpperCase() == title, "list " + ii + " has new column title");
							break;
					}
				}
			}
		}];
	},
	$isReadOnly: function() {
		return _statusScenario("$isReadOnly", {
			isInputStatus: "isInputReadOnly",
			msg: " readonly"
		});
	},
	$isDisabled: function() {
		return _statusScenario("$isDisabled", {
			isInputStatus: "isInputDisabled",
			msg: " disabled"
		});
	},
	styles: function() {
		function _buildDelta(styles) {
			return {
				xarray: styles.map(function(style, ii) {
					return {
						$uuid: "record" + ii,
						$valueStyle: style ? ("cst_sty_" + style) : style
					};
				})
			};
		}
		return [{
			$title: "record styles 1",
			run: function(page) {
				this.applyChange(_buildDelta(["info", "warning", "error", "strongdecreasing", "decreasing", "stable"]));
			}
		}, {
			$title: "record styles 2",
			run: function(page) {
				this.applyChange(_buildDelta(["medium", "high", "veryhigh", "highlight", "verylow", "low"]));
			}

		}, {
			$title: "record styles clear",
			run: function(page) {
				this.applyChange(_buildDelta(["", null, "default", "", null, "default"]));
			}

		}, {
			$title: "$fieldStyle xchoice xstring column",
			run: function(page) {
				this.applyChange({
					$isPartialDelta: true,
					$properties: {
						xarray: {
							$item: {
								$properties: {
									xstring: {
										$fieldStyle: "font-style:bold; color: #FFFFFF;background-color:#FF80C0; background-color: #2E6AC2;background-image: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05) 49%, rgba(0, 0, 0, 0.05) 51%, rgba(0, 0, 0, 0.1));"
									},
									xchoice: {
										$fieldStyle: "font-style:italic;background-color:#EA4C89; color: #FFFFFF;"
									}
								}
							}
						}
					},
					xarray: [{
						$fieldStyle: "font-style:bold; color: #FFFFFF;background-color:#FF80C0; background-color: #2E6AC2;background-image: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05) 49%, rgba(0, 0, 0, 0.05) 51%, rgba(0, 0, 0, 0.1));",
						$uuid: "record2",
						$index: 2
					}, {
						$valueStyle: "font-style:italic;background-color:#EA4C89; color: #FFFFFF;",
						$uuid: "record3",
						$index: 3
					}, {
						$properties: {
							xstring: {
								$valueStyle: "font-style:bold;background-color:#FFAD1D; color: #030037;"
							},
							xchoice: {
								$valueStyle: "font-style:bold;background-color:#030037; color: #FFAD1D;"
							}
						},
						$index: 4,
						$uuid: "record4"
					}]
				});
				this.applyChange({
					$properties: {
						xarray: {
							$item: {
								$properties: {
									xstring: {
										$fieldStyle: "cst_sty_info"
									},
									xchoice: {
										$fieldStyle: "cst_sty_error"
									}
								}
							}
						}
					},
					xarray: [{
						$uuid: "record0"
					}, {
						$uuid: "record1"
					}, {
						$fieldStyle: "cst_sty_info",
						$uuid: "record2"
					}, {
						$valueStyle: "cst_sty_error",
						$uuid: "record3"
					}, {
						$properties: {
							xstring: {
								$valueStyle: "cst_sty_warning"
							},
							xchoice: {
								$valueStyle: "cst_sty_veryhigh"
							}
						},
						$uuid: "record4"
					}, {
						$uuid: "record5"
					}, {
						$uuid: "record6",
						xstring: "updated 6"
					}, {
						$uuid: "record7",
						xstring: "updated 7"
					}]
				});
			}
		}];
	},
	diagnoses: function() {
		function _getError(clean) {
			return {
				$diagnoses: clean ? [] : [{
					severity: "error",
					message: "Error test  blalfoz"
				}]
			};
		}

		function _getWarning(clean) {
			return {
				$diagnoses: clean ? [] : [{
					severity: "warning",
					message: "Warning test"
				}]
			};
		}

		function _getInfo(clean) {
			return {
				$diagnoses: clean ? [] : [{
					severity: "info",
					message: "Info test"
				}]
			};
		}

		function _buildDelta(isPartialDelta, clean) {
			var xarray = [];
			for (var ii = 0; ii <= 7; ii++) {
				var $data = {
					$uuid: "record" + ii
				};
				switch (ii) {
					case 1:
						$data.$properties = {
							xstring: _getError(clean),
							xchoice: _getInfo(clean)
						};
						break;
					case 2:
						$data.$properties = {
							xstring: _getInfo(clean),
							xchoice: _getWarning(clean),
							xboolean: _getError(clean),
							xdecimal: _getError(clean)
						};
						break;
					default:
						if (isPartialDelta) {
							continue;
						}
				}
				if (isPartialDelta) {
					$data.$index = ii;
				}
				xarray.push($data);
			}
			return {
				$isPartialDelta: isPartialDelta,
				$properties: {
					xarray: _getError(clean)
				},
				xarray: xarray
			};
		}
		return [{
			$title: "single diagnose",
			run: function(page) {
				this.applyChange({
					xarray: [{
						$uuid: "record1",
						$index: 1,
						$properties: {
							xstring: _getError(),
							xdate: _getWarning(),
							xchoice: _getWarning(),
						}
					}]
				});
			}
		}, {
			$title: "multi diagnoses",
			run: function(page) {
				this.applyChange(_buildDelta(true));
				this.applyChange(_buildDelta(false));
			}
		}, {
			$title: "clean diagnoses",
			run: function(page) {
				this.applyChange(_buildDelta(true, true));
				this.applyChange(_buildDelta(false, true));
			}

		}];
	},
	crud: function() {
		return [{
			$title: "insert 1",
			run: function(page) {
				this.applyChange({
					xarray: [{
						$uuid: "insert 1",
						$index: 1,
						xstring: "insert 1"
					}]
				});
			}
		}, {
			$title: "upadate record 2",
			run: function(page) {
				this.applyChange({
					xarray: [{
						$uuid: "record2",
						$index: 2,
						xstring: "updated 2"
					}]
				});
			}

		}, {
			$title: "upadate 2 7",
			run: function(page) {
				this.applyChange({
					$isPartialDelta: true,
					xarray: [{
						$uuid: "record2",
						$index: 1,
						xstring: "updated 2"
					}, {
						$uuid: "record7",
						$index: 6,
						xstring: "updated 7"
					}]
				});
				this.applyChange({
					xarray: [{
						$uuid: "record0"
					}, {
						$uuid: "record1"
					}, {
						$uuid: "record2",
						xstring: "updated 2"
					}, {
						$uuid: "record3"
					}, {
						$uuid: "record4"
					}, {
						$uuid: "record5"
					}, {
						$uuid: "record6"
					}, {
						$uuid: "record7",
						xstring: "updated 7"
					}]
				});
			}
		}, {
			$title: "reorder",
			run: function(page) {
				function _buildDelta($isPartialDelta) {
					var count = page.dataset.xarray.length - 1;
					return {
						xarray: page.dataset.xarray.map(function(record, index) {
							record = {
								$uuid: record.$uuid
							};
							if ($isPartialDelta) {
								record.$index = count - index;
							}
							return record;
						}).reverse()
					};
				}
				this.applyChange(_buildDelta(true));
				page.refreshData();
				this.applyChange(_buildDelta());
			}

		}, {
			$title: "delete record2",
			run: function(page) {
				this.applyChange({
					xarray: [{
						$uuid: "record2",
						$index: 2,
						"$isDeleted": true
					}]
				});
			}

		}, {
			$title: "delete record3 record6 record7",
			run: function(page) {
				this.applyChange({
					$isPartialDelta: true,
					xarray: [{
						$uuid: "record3",
						$index: 3,
						"$isDeleted": true
					}, {
						$uuid: "record6",
						$index: 6,
						"$isDeleted": true
					}, {
						$uuid: "record7",
						$index: 7,
						"$isDeleted": true
					}]
				});
				this.applyChange({
					xarray: [{
						$uuid: "record0"
					}, {
						$uuid: "record1"
					}, {
						$uuid: "record2"
					}, {
						$uuid: "record4"
					}, {
						$uuid: "record5"
					}]
				});
			}

		}];
	},
	actionLinks: function() {
		function _getNull() {
			return {
				$links: null
			};
		}

		function _getLazyLoad() {
			return {
				$links: {
					$lazyload: {}
				}
			};
		}

		function _getLinksActions() {
			return {
				$actions: {
					"$save": {
						$title: "Save"
					}
				},
				$links: {
					"google": {
						$title: "Google",
						$url: "http://www.google.fr/"
					},
					"uioverview": {
						$title: "UI Overview",
						$url: "?representation=s-uitest-fields.$test"
					},
					"$details": {
						$type: "application/json;vnd.sage=syracuse",
						$title: "Detail",
						$url: "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')?representation=country.$details&role={$role}"
					},
					"$linksFormParameters": {
						$title: "Parameters",
						$url: "/sdata/syracuse/collaboration/syracuse/users?representation=employee.$query&par1={param1}&par2={param2}",
						"$parameters": {
							"param1": "xstring",
							"param2": "value"
						}
					}
				}
			};
		}

		function _getNullFormParametersLink() {
			return {
				$links: {
					$linksFormParameters: null
				}
			};
		}

		function _buildDelta(isPartialDelta, filler) {
			var xarray = [];
			for (var ii = 0; ii <= 7; ii++) {
				var $data = filler();
				$data.$uuid = "record" + ii;
				if (ii == 1 || ii == 3) {
					$data.$properties = {
						xstring: filler(),
						xchoice: filler(),
						xdate: filler(),
						xboolean: filler(),
						xdecimal: filler()
					};
					if (isPartialDelta) {
						$data.$index = ii;
					}
				} else {
					if (isPartialDelta) {
						continue;
					}
					//cancel filler
					delete $data.$links;
					delete $data.$actions;
				}
				xarray.push($data);
			}
			return {
				$isPartialDelta: isPartialDelta,
				$properties: {
					xarray: filler()
				},
				xarray: xarray
			};
		}

		return [{
			$title: "$links = null",
			run: function(page) {
				this.applyChange(_buildDelta(true, _getNull));
				this.applyChange(_buildDelta(false, _getNull));
			}
		}, {
			$title: "$lazyload",
			run: function(page) {
				this.applyChange(_buildDelta(true, _getLazyLoad));
				this.applyChange(_buildDelta(false, _getLazyLoad));
			}

		}, {
			$title: "$links ans $actions",
			run: function(page) {
				this.applyChange(_buildDelta(true, _getLinksActions));
				this.applyChange(_buildDelta(false, _getLinksActions));
			}

		}, {
			$title: "Parameter null",
			run: function(page) {
				this.applyChange(_buildDelta(true, _getNullFormParametersLink));
				this.applyChange(_buildDelta(false, _getNullFormParametersLink));
			}
		}];
	},
	capabilities: function() {
		return ["insert,append,delete,reorder", "capabilities insert,delete,deleteAll", ""].map(function($capabilities) {
			return {
				$title: "capabilities " + ($capabilities || "none"),
				run: function(page) {
					this.applyChange({
						$properties: {
							xarray: {
								$capabilities: $capabilities
							}
						}
					});
				}

			};
		}).concat({
			$title: "alt undelete / delete",
			run: function(page) {
				this.applyChange({
					xarray: [0, 1, 2, 3, 4, 5, 6, 7].map(function(ii) {
						return {
							$uuid: "record" + ii,
							$capabilities: ii % 2 ? "delete" : ""
						};
					})
				});
			}
		});
	},
	hide: function() {
		return [true, false].map(function(value) {
			return {
				$title: (value ? "hide" : "show") + " xarray",
				run: function(page) {
					this.applyChange({
						$properties: {
							xarray: {
								$isHidden: value
							}
						}
					});
				}

			};
		}).concat([true, false].map(function(value) {
			return {
				$title: (value ? "hide" : "show") + " xchoice",
				run: function(page) {
					this.applyChange({
						$properties: {
							xarray: {
								$item: {
									$properties: {
										xchoice: {
											$isHidden: value
										}
									}
								}
							}
						}
					});
				}
			};
		}));
	}
};

exports.grid = {
	load: function(page) {
		_loadTestPage(page);
		page.loadNewItem(page.leftCol, {
			$isEditMode: true,
			$bind: "xarray",
			$selectByRowIndex: true,
			$selectMode: "single"
		});
		page.loadNewItem(page.leftCol, {
			$isEditMode: false,
			$bind: "xarray",
			$selectMode: "row"
		});
	}
};

exports.cards = {
	load: function(page) {
		_loadTestPage(page);
		page.loadNewItem(page.leftCol, {
			$isEditMode: true,
			$bind: "xarray",
			$format: "cards",
			$cardsByRowCount: 2
		});
		page.loadNewItem(page.leftCol, {
			$isEditMode: false,
			$bind: "xarray",
			$format: "cards",
			$cardsByRowCount: 2
		});

	}
};

exports.gridcards = {
	load: function(page) {
		_loadTestPage(page);
		var $positions = ["left", "right", "row", "top", "bottom", "popup"];
		for (var ii = 0, jj = $positions.length; ii < jj; ii++) {
			var $item = {
				$isEditMode: !(ii % 2),
				$bind: "xarray",
				$title: "$position=" + $positions[ii],
				$format: "grid"
			};
			var $cardItem = {
				$layout: {
					$items: [{
						$layoutType: "row",
						$items: [{
							$bind: "xstring"
						}, {
							$bind: "xchoice"
						}]
					}, {
						$layoutType: "row",
						$items: [{
							$bind: "xdate"
						}, {
							$layoutType: "stack",
							$items: [{
								$bind: "xboolean"
							}, {
								$bind: "xdecimal"
							}]
						}]
					}]
				}
			};
			if ($positions[ii] == "popup") {
				$item.$popupCard = $cardItem;
			} else {
				$cardItem.$position = $positions[ii];
				$item.$cardItem = $cardItem;
			}
			page.loadNewItem(page.leftCol, $item);
		}

	}
};

exports.selection = {
	load: function(page) {
		_loadTestPage(page);
		["multi", "single", "button", "row"].forEach(function($selectMode) {
			page.loadNewItem(page.leftCol, {
				$title: "$selectMode = " + $selectMode,
				$format: "grid",
				$bind: "xarray",
				$selectMode: $selectMode
			});
		});
		["multi", "single", "button", "row"].forEach(function($selectMode) {
			page.loadNewItem(page.leftCol, {
				$title: "$selectMode = " + $selectMode,
				$format: "cards",
				$bind: "xarray",
				$selectMode: $selectMode,
				$layout: {
					$items: [{
						$category: "section",
						$layout: {
							$items: [{
								$bind: "xstring"
							}, {
								$bind: "xchoice"
							}]
						}
					}]
				}
			});
		});
		["multi", "single"].forEach(function($selectMode) {
			page.loadNewItem(page.leftCol, {
				$title: "$selectByRowIndex $selectMode = " + $selectMode,
				$format: "grid",
				$bind: "xarray",
				$selectMode: $selectMode,
				$selectByRowIndex: true
			});
			page.loadNewItem(page.leftCol, {
				$title: "$selectByRowIndex $useContiguousSelection $selectMode = " + $selectMode,
				$format: "grid",
				$bind: "xarray",
				$selectMode: $selectMode,
				$selectByRowIndex: true,
				$useContiguousSelection: true,
			});
		});
	}
};

function _loadTestPage(page) {
	var $props = page.$prototype.$properties;
	$props.xarray = {
		$title: "xarray",
		$capabilities: "sort,filter,insert,append,delete,search,reorder",
		$type: "application/x-array",
		$itemsPerPage: 200,
		$item: {
			$type: "application/json",
			$properties: {
				xstring: {
					$title: "xstring",
					$type: "application/x-string",
					$maxLength: 30,
					$capabilities: "sort,filter"
				},
				xchoice: {
					$title: "xchoice",
					$type: "application/x-choice",
					$value: {
						$type: "application/x-integer",
						$enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value) {
							return {
								"$value": value,
								$title: "Value " + value
							};
						})
					}
				},
				xdate: {
					$title: "xdate",
					$type: "application/x-date",
					$capabilities: "sort,filter"
				},
				xboolean: {
					$title: "xboolean",
					$type: "application/x-boolean",
					$capabilities: "sort,filter"
				},
				xdecimal: {
					$title: "xdecimal",
					$type: "application/x-decimal",
					$capabilities: "sort,filter",
					$isNullable: true
				},
				xreference: {
					$title: "xreference",
					$capabilities: "sort,filter",
					$type: "application/x-reference",
					"$item": {
						$value: "{code}",
						$key: "{$uuid}",
						"$properties": {
							"code": {
								$type: "application/x-string"
							},
							"description": {
								$type: "application/x-string"
							}
						},
						$links: {
							"$details": {
								$type: "application/json;vnd.sage=syracuse",
								"$url": "/sdata/syracuse/collaboration/syracuse/users('{$uuid}')?representation=country.$details&role={$role}"
							},
							"$lookup": {
								$type: "application/json;vnd.sage=syracuse",
								"$url": "/sdata/syracuse/collaboration/syracuse/users?representation=country.$lookup&role={$role}&trackingId={$trackingId}&binding=country"
							}
						}
					}
				}
			}
		}
	};

	page.refreshData = function() {
		var records = [];
		for (var ii = 1; ii <= 7; ii++) {
			records.push({
				$uuid: "record" + ii,
				$etag: 1,
				$properties: {},
				//$index: ii-1,
				xstring: "record " + ii,
				xchoice: ii,
				xdate: "2011-0" + Math.max(Math.min(1, ii), 9) + "-07",
				xboolean: true,
				xdecimal: 45454.0 * ii,
				xreference: {
					$uuid: "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
					$key: "4e54a41e-5c7d-4926-ad57-6a5f882c24c4",
					code: "AD",
					description: "Andorradfd fsdqfsqdfsdq sdqf sdqfsdqf sdqqfsdq fsdqf sdqf sdfsdqf sdf sqdfsd qfsdq fsdqf sdqfsd qfsdq fsqd fs q fqsf",
					$title: "title"
				}
			});
		}
		delete(this.dataset.$properties = this.dataset.$properties || {}).xarray;
		delete this.dataset.xarray;
		this.applyChange({
			$properties: {
				xarray: {}
			},
			xarray: records
		});
	};
	page.onFetchHandler = function(options) {
		if (options && options.params) {
			delete options.field;
			this.notifyChangeToServer(options);
		}
	};
};