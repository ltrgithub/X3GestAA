"use strict";

function _runUnit(unit, page) {
	page.$prototype.$properties.tree = unit.$datasource.getPrototype();
	var $item = unit.$item || {};
	$item.$bind = "tree";
	if (page.treeField) {
		page.removeItem(page.treeField, true, true);
	}
	page.treeField = page.loadNewItem(page.leftCol, $item);
	unit.applyChange({
		tree: unit.$datasource.getData()
	});
}

exports.scenarios = {
	treegrid: function() {
		return [{
			$title: "treegrid",
			$datasource: require("./data/treegrid"),
			run: function(page) {
				_runUnit(this, page);
			}
		}];
	},
	emptyId: function() {
		return [{
			$item: {
				$selectMode: "multi"
			},
			$title: "emptyId",
			$datasource: require("./data/emptyId"),
			run: function(page) {
				_runUnit(this, page);
			}
		}];
	},
	recursive: function() {
		return [{
			$item: {
				$selectMode: "row",
				$isNodeLazyLoad: true
			},
			$title: "Recursive",
			$datasource: require("./data/recursive"),
			run: function(page) {
				_runUnit(this, page);
			}
		}];
	},
	xsl: function() {
		return [{
			$title: "XSL",
			$datasource: require("./data/xsl"),
			run: function(page) {
				_runUnit(this, page);
			}
		}];
	},
	picking: function() {
		return [{
			$item: {
				$selectMode: "multi"
			},
			$title: "Picking",
			$datasource: require("./data/picking"),
			run: function(page) {
				_runUnit(this, page);
			}
		}];
	},
	single: function() {
		return [{
			$item: {
				$selectMode: "single"
			},
			$title: "Standard",
			$datasource: require("./data/single"),
			run: function(page) {
				_runUnit(this, page);
			}
		}];
	}
};

exports.load = function(page, finish) {
	page.refreshData = function() {
		page.applyChange({
			tree: []
		});
	};
	finish(page);
};