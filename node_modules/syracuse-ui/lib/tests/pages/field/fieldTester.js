"use strict";

function _getActionLinks(value) {
	return {
		$empty: {
			$links: null
		},
		$lazyload: {
			$links: {
				"$lazyload": {}
			}
		},
		$links: {
			$links: {
				"$tunnel": {
					"$title": "$tunnel"
				},
				"$lookup": {
					"$title": "$lookup"
				},
				"google": {
					"$title": "Google",
					"$url": "http://www.google.fr/"
				},
				"uioverview": {
					"$title": "UI Overview",
					"$url": "?representation=s-uitest-fields.$test"
				},
				"uilist": {
					"$title": "UI List Overview",
					"$url": "?representation=uitestlist.$dashboard"
				},
				"transitionTest": {
					"$title": "Json Page test",
					"$url": "?representation=uitestpagetest.$dashboard"
				},
				"$create": {
					"$type": "application/json;vnd.sage=syracuse",
					"$title": "Cr√©er",
					"$url": "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users/$template/$workingCopies?representation=country.$edit&role={$role}",
					"$method": "POST"
				},
				"$details": {
					"$type": "application/json;vnd.sage=syracuse",
					"$title": "Detail",
					"$url": "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')?representation=country.$details&role={$role}"
				},
				"$edit": {
					"$type": "application/json;vnd.sage=syracuse",
					"$title": "Edit",
					"$url": "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')/$workingCopies?representation=country.$edit&role={$role}",
					"$method": "POST"
				},
				"$delete": {
					"$title": "Delete",
					"$confirm": "The record  will be deleted. Confirm ?",
					"$url": "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')?representation=country.$query&role={$role}",
					"$type": "application/json;vnd.sage=syracuse",
					"$method": "DELETE"
				}
			}
		},
		$actions: {
			$actions: {
				$save: {
					$title: "Save"
				}
			}
		},
		$linksParameters: {
			$links: {
				$linksExpressionParameters: {
					$title: "Expression parameters",
					$description: "param2 from xstring,param2 from json",
					$url: "/sdata/syracuse/collaboration/syracuse/users?representation=user.$query&param1={param1}&param2={param2}",
					$parameters: {
						param1: "xstring",
						param2: "value in json"
					}
				},
				$linksFormParameters: {
					$title: "Form parameters",
					$description: "param1 and param2 from default, param3,param4 and param5 from form",
					$url: "/sdata/syracuse/collaboration/syracuse/users?representation=user.$query&par1={param1}&par2={param2}&par3={param3}&par4={param4}&par4={param5}",
					$parameters: {
						"$properties": {
							param3: {
								$title: "mon param3",
								"$type": "application/x-string"
							},
							"param4": {
								"$title": "mon param4",
								"$type": "application/x-string"
							},
							"param5": {
								"$title": "mon param4",
								"$type": "application/x-string",
								"$isEditMode": false
							}
						},
						"param1": "xstring",
						"param2": "value"
					}
				}
			}

		},
		$actionsParameters: {
			$actions: {
				"actionEmployeesProperties": {
					"$title": "Action Employees Properties",
					"$url": "/sdata/syracuse/collaboration/syracuse/users?representation=user.$query",
					"$parameters": {
						"param1": "{lastName}",
						"param2": "value"
					}
				},
				"actionEmployeesPropertiesForm": {
					"$title": "Action Employees Properties Form",
					"$url": "/sdata/syracuse/collaboration/syracuse/users?representation=user.$query",
					"$parameters": {
						"$properties": {
							"param3": {
								"$title": "{@S-AOC0-125}",
								"$type": "application/x-string"
							},
							"param4": {
								"$title": "{@S-AOC0-8}",
								"$type": "application/x-string"
							},
							"param5": {
								"$title": "{@S-AOC1-1390}",
								"$type": "application/x-string",
								"$isEditMode": false
							}
						},
						"param1": "{lastName}",
						"param2": "value"
					}
				}
			}
		}

	}[value];
}


function _applyFieldMetaData(page, $bind, value, $field) {
	$field = $field || page.$prototype.$properties[$bind];
	$bind = $bind.replace("$field", "");
	var metaData = {};
	metaData[$bind] = value;
	if ($field.$isMetaData) {
		var $properties = {};
		Object.keys(page.boundFields).forEach(function(bind) {
			if (bind.indexOf("$field") != 0) {
				$properties[bind] = metaData;
			}
		});
		page.applyChange({
			$properties: $properties
		});
	} else {
		Object.keys(page.boundFields).forEach(function(bind) {
			if (bind.indexOf("$field") != 0) {
				page.boundFields[bind].forEach(function(field) {
					field.applyDesignMetaData(metaData, true);
				});
			}
		});
	}
}

exports.load = function(page) {
	page.notifyDiagnoses = function(value, useMetaDataOnly) {
		var self = this;
		var dataRecordSet = {
			$properties: {}
		};
		Object.keys(self.boundFields).forEach(function(bind) {
			var metaData = self.fillDiagnoses(value, bind);
			if (bind.indexOf("$field") != 0) {
				var $fieldProperty = self.$prototype.$properties[bind];
				dataRecordSet.$properties[bind] = {
					$diagnoses: metaData.$diagnoses
				};
			}
		});
		self.applyChange(dataRecordSet);
	};
	page.notifyActionLinkChange = function(metaData, useMetaDataOnly) {
		var dataRecordSet = {
			$properties: {}
		};
		Object.keys(this.boundFields).forEach(function(bind) {
			if (bind.indexOf("$field") != 0) {
				dataRecordSet.$properties[bind] = {
					$links: metaData.$links,
					$actions: metaData.$actions
				};
			}
		});
		this.applyChange(dataRecordSet);
	};
	page.fillDiagnoses = function(value, $bind) {
		var metaData = {};
		if (value == "clear") {
			metaData.$diagnoses = null;
		} else {
			metaData.$diagnoses = [{
				severity: "error",
				message: "Error test  blalfoz"
			}];
			if (value == "full") {
				metaData.$diagnoses.push({
					severity: "warning",
					message: "Warning test"
				});
				metaData.$diagnoses.push({
					severity: "info",
					message: "Info test"
				});
			}
		}
		return metaData;
	};
	page.notifyChangeToServer = function(sendBag) {
		var dataRecords = sendBag.dataRecords;
		delete sendBag.dataRecords;
		sendBag.dataRecords = dataRecords;
	};
	page.addMetaDataBox = function() {
		this.metaDataBox = this.addBox("MetaData", "h2");
		this.rightCol.appendChild(this.metaDataBox.slot);

		var $props = this.$prototype.$properties;
		$props.$field$isDiagnoses = {
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",

				$enum: [{
					$value: "full",
					$title: "error, warning, info"
				}, {
					$value: "error",
					$title: "default error"
				}, {
					$value: "clear",
					$title: "clear"
				}, ]
			}
		};
		$props.$field$description = {
			$type: "application/x-boolean",
			$title: "$description",
			$isMetaData: true
		};
		$props.$field$help = {
			$type: "application/x-boolean",
			$title: "$help",
			$isMetaData: true
		};
		$props.$field$isReadOnly = {
			$type: "application/x-boolean",
			$title: "$isReadOnly",
			$isMetaData: true
		};
		$props.$field$isEditMode = {
			$type: "application/x-boolean",
			$title: "$isEditMode",
			$isMetaData: true
		};
		$props.$field$isHidden = {
			$type: "application/x-boolean",
			$title: "$isHidden",
			$isMetaData: true
		};
		$props.$field$isDisabled = {
			$type: "application/x-boolean",
			$title: "$isDisabled",
			$isMetaData: true
		};
		$props.$field$isMandatory = {
			$type: "application/x-boolean",
			$title: "$isMandatory",
			$isMetaData: true
		};
		$props.$field$isTopLabelAlignment = {
			$type: "application/x-boolean",
			$title: "$isTopLabelAlignment"
		};
		$props.$field$isTitleHidden = {
			$type: "application/x-boolean",
			$title: "$isTitleHidden"
		};
		$props.$field$isRightTextLabelAlignment = {
			$type: "application/x-boolean",
			$title: "$isRightTextLabelAlignment"
		};
		$props.$field$setNull = {
			$type: "application/x-boolean",
			$title: "set Null"
		};
		$props.$field$LinksTypeMetaDataOnly = {
			$type: "application/x-boolean",
			$title: "use Meta Data Only",
			$isReadOnly: true,
			$isMetaData: true
		};
		$props.$field$LinksType = {
			$title: "$links $actions",
			$isMetaData: true,
			$type: "application/x-choice",
			$value: {
				$type: "application/x-string",

				$enum: [{
					$value: "$empty",
					$title: "$links = null"
				}, {
					$value: "$lazyload",
					$title: "$lazyload (transition)"
				}, {
					$value: "$links",
					$title: "$links"
				}, {
					$value: "$actions",
					$title: "$actions"
				}, {
					$value: "$linksParameters",
					$title: "$links with Parameters"
				}, {
					$value: "$actionsParameters",
					$title: "$actions with Parameters"
				}]
			}
		};
		this.$prototype.$field$LinksTypeMetaDataOnly = true;
		var metadataSection = ["$field$isHidden", "$field$isDisabled", "$field$isMandatory", "$field$isEditMode", "$field$isReadOnly", "$field$description", "$field$help", "$field$isTopLabelAlignment", "$field$isTitleHidden", "$field$isRightTextLabelAlignment", "$field$setNull"];
		metadataSection = metadataSection.concat(["$field$LinksTypeMetaDataOnly", "$field$LinksType", "$field$isDiagnoses"]);
		for (var ii = 0, jj = metadataSection.length; ii < jj; ii++) {
			this.addMetaSectionField(metadataSection[ii]);
		}
	};
	page.notifyDataChangeHandlers.push(function(field, value) {
		var page = field.page;
		switch (field.$item.$bind) {
			case "$field$setNull":
				Object.keys(page.boundFields).forEach(function(bind) {
					if (bind.indexOf("$field") != 0) {
						page.boundFields[bind].forEach(function(field) {
							field.setDataBind(null);
						});
					}
				});
				break;
			case "$field$LinksType":
				var metaData = _getActionLinks(value);
				if (value == "$lazyload") {
					page.notifyDataChange(field, "$empty");
				}
				page.notifyActionLinkChange(metaData, page.boundFields.$field$LinksTypeMetaDataOnly[0].getDataValue());
				break;
			case "$field$help":
				_applyFieldMetaData(page, field.$item.$bind, value ? "description msdmdlsjgq" : null);
				break;
			case "$field$description":
				_applyFieldMetaData(page, field.$item.$bind, value ? "description df fmsdmdlsjgq" : null);
				break;
			case "$field$isDiagnoses":
				page.notifyDiagnoses(value, page.boundFields.$field$LinksTypeMetaDataOnly[0].getDataValue());
				break;

			default:
				if (field.$item.$bind.indexOf("$field") == 0) {
					switch (field.$item.$bind) {
						case "":
							break;
						default:
							_applyFieldMetaData(page, field.$item.$bind, value);
							break;
					}
				} else {
					return true; //do default notify	
				}
		}
	});
};