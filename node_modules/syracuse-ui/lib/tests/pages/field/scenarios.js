"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _domQuery = require("syracuse-ui/lib/tests/pages/domQuery");
var _rtf = require("syracuse-rtf");

function _applyMetaToFields(page, unit, key, value) {
	var $properties = {};
	Object.keys(page.boundFields).forEach(function(bind) {
		($properties[bind] = {})[key] = value;
	});
	unit.applyChange({
		$properties: $properties
	});
}

function _applyDesignMetaToFields(page, key, value) {
	Object.keys(page.boundFields).forEach(function(bind) {
		page.boundFields[bind].forEach(function(field) {
			var metaData = {};
			metaData[key] = value;
			field.applyDesignMetaData(metaData, true);
		});
	});
}

function _notifyActionLinkChange(page, metaData) {
	var $properties = {};
	Object.keys(page.boundFields).forEach(function(bind) {
		$properties[bind] = {
			$links: metaData.$links,
			$actions: metaData.$actions
		};
	});
	page.applyChange({
		$properties: $properties
	});
}

function _notifyDiagnoses(page, metaData) {
	var $properties = {};
	Object.keys(page.boundFields).forEach(function($bind) {
		var metaData = {};
		var $fieldProperty = page.$prototype.$properties[$bind];
		$properties[$bind] = helpers.object.clone(metaData, true);
	});
	page.applyChange({
		$properties: $properties
	});
}

function _addStatusUnits(status) {
	return [true, false].map(function(value) {
		return {
			$title: status + " = " + value,
			run: function(page) {
				_applyMetaToFields(page, this, status, value);
				var fields = _domQuery.getFields([_domQuery.page.getBody(page.domItem)]);
				var ok;
				for (var mm = 0; mm < fields.length; mm++) {
					var field = fields[mm];
					var bind = _domQuery.field.getBind(field);
					var type = _domQuery.field.getType(field);
					if (type.indexOf("x-unknow") > 0) {
						continue;
					}
					var isEditMode = _domQuery.field.isEditMode(field);
					switch (status) {
						case "$isHidden":
							ok = (_domQuery.field.isHidden(field) == value);
							break;
						case "$isDisabled":
							if (isEditMode) {
								ok = (_domQuery.field.isInputDisabled(field, true) == value);
							} else {
								ok = true;
							}
							break;
						case "$isReadOnly":
							if (isEditMode) {
								ok = (_domQuery.field.isInputReadOnly(field, true) == value);
							} else {
								ok = true;
							}
							break;
						case "$isMandatory":
							if (isEditMode && type.indexOf("x-boolean") < 0) {
								ok = (_domQuery.field.isMandatory(field, true) == value);
							} else {
								ok = true;
							}
							break;
					}
					if (!ok) {
						break;
					}
				}
				this.assert(ok, "fieds " + (value ? " are " : " are not ") + status);
			}
		};
	});
}

exports.scenarios = {

	$isHidden: function() {
		return _addStatusUnits("$isHidden");
	},
	$isDisabled: function() {
		return _addStatusUnits("$isDisabled");
	},
	$isReadOnly: function() {
		return _addStatusUnits("$isReadOnly");
	},
	$isMandatory: function() {
		return _addStatusUnits("$isMandatory");
	},
	/*$isEditMode: function(){
     return _addStatusUnits("$isEditMode");
     },*/
	$description: function() {
		return [{
			$title: "$description = 'this is a description'",
			run: function(page) {
				//page.refreshData();
				_applyMetaToFields(page, this, "$description", "this is a description");
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "$description = null",
			run: function(page) {
				//page.refreshData();
				_applyMetaToFields(page, this, "$description", null);
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}];
	},
	$isTopLabelAlignment: function() {
		return [{
			$title: "$isTopLabelAlignment = true",
			run: function(page) {
				//page.refreshData();
				_applyDesignMetaToFields(page, "$isTopLabelAlignment", true);
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "$isTopLabelAlignment = false",
			run: function(page) {
				//page.refreshData();
				_applyDesignMetaToFields(page, "$isTopLabelAlignment", false);
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}];
	},
	$isTitleHidden: function() {
		return [{
			$title: "$isTitleHidden = true",
			run: function(page) {
				//page.refreshData();
				_applyDesignMetaToFields(page, "$isTitleHidden", true);
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "$isTitleHidden = false",
			run: function(page) {
				//page.refreshData();
				_applyDesignMetaToFields(page, "$isTitleHidden", false);
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}];
	},
	setNull: function() {
		return [{
			$title: "set null",
			run: function(page) {
				//page.refreshData();
				Object.keys(page.boundFields).forEach(function(bind) {
					page.boundFields[bind].forEach(function(field) {
						field.setDataBind(null);
					});
				});
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}];
	},
	actionLinks: function() {
		return [{
			$title: "$links = null",
			run: function(page) {
				//page.refreshData();
				_notifyActionLinkChange(page, {
					$links: null,
					$actions: null
				});
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "$lazyload (transition)",
			run: function(page) {
				//page.refreshData();
				_notifyActionLinkChange(page, {
					$links: {
						$lazyload: {}
					}
				});
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "links = {}",
			run: function(page) {
				//page.refreshData();
				_notifyActionLinkChange(page, {
					$links: {}
				});
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "$links and $actions",
			run: function(page) {
				//page.refreshData();
				_notifyActionLinkChange(page, {
					$links: {
						"$tunnel": {
							"$title": "$tunnel"
						},
						"$lookup": {
							"$title": "$lookup"
						},
						"google": {
							"$title": "Google",
							"$url": "http://www.google.fr/"
						},
						"uioverview": {
							"$title": "UI Overview",
							"$url": "?representation=s-uitest-fields.$test"
						},
						"$create": {
							"$type": "application/json;vnd.sage=syracuse",
							"$title": "CrÃ©er",
							"$url": "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users/$template/$workingCopies?representation=country.$edit&role={$role}",
							"$method": "POST"
						},
						"$details": {
							"$type": "application/json;vnd.sage=syracuse",
							"$title": "Detail",
							"$url": "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')?representation=country.$details&role={$role}"
						},
						"$edit": {
							"$type": "application/json;vnd.sage=syracuse",
							"$title": "Edit",
							"$url": "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')/$workingCopies?representation=country.$edit&role={$role}",
							"$method": "POST"
						},
						"$delete": {
							"$title": "Delete",
							"$confirm": "The record  will be deleted. Confirm ?",
							"$url": "http://localhost:8126/sdata/syracuse/collaboration/syracuse/users('{$uuid}')?representation=country.$query&role={$role}",
							"$type": "application/json;vnd.sage=syracuse",
							"$method": "DELETE"
						}
					},
					$actions: {
						actionEmployeesProperties: {
							"$title": "Action Employees Properties",
							"$url": "/sdata/syracuse/collaboration/syracuse/users?representation=user.$query",
							"$parameters": {
								"param1": "{lastName}",
								"param2": "value"
							}
						}
					}
				});
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}];
	},
	$diagnoses: function() {
		return [{
			$title: "$diagnoses show error, warning, info",
			run: function(page) {
				//page.refreshData();
				_notifyDiagnoses(page, {
					$diagnoses: [{
						severity: "error",
						message: "Error test  blalfoz"
					}]
				});
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "$diagnoses show error",
			run: function(page) {
				//page.refreshData();
				_notifyDiagnoses(page, {
					$diagnoses: [{
						severity: "error",
						message: "Error test  blalfoz"
					}, {
						severity: "warning",
						message: "Warning test"
					}, {
						severity: "info",
						message: "Info test"
					}]
				});
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}, {
			$title: "$diagnoses = null",
			run: function(page) {
				//page.refreshData();
				_notifyDiagnoses(page, {
					$diagnoses: null
				});
				//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
			}
		}];
	}
};


exports.editor = function() {
	return [{
		$title: "convert HTML to RTF",
		run: function(page) {
			//page.refreshData();
			page.boundFields["textplainRTF"][0].setDataValue(rtf.fromHtml($(page.boundFields["textrtf"][0]._editor.doc.body).html()));
			//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
		}
	}, {
		$title: "convert RTF to HTML",
		run: function(page) {
			//page.refreshData();
			$(page.boundFields["textrtf"][0]._editor.doc.body).html(rtf.toHtml(page.boundFields["textplainRTF"][0].getDataValue()));
			//this.assert(first.domItem.querySelector("[data-s-q-bind=xstring]").className.indexOf("s-focus") >= 0);
		}
	}];
};



exports.notifyDataChange = function(field, value) {
	var rtfField = field.page.boundFields["textrtf"][0],
		msg = "textrtf: caret=" + rtfField.getCaretPosition() + ", data=" + rtfField.getInputValue();
	field.page.boundFields["$field$output"][0].setDataValue(msg);
};