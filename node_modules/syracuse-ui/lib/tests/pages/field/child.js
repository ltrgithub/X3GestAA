"use strict";
exports.scenarios = require("./scenarios").scenarios;
exports.load = function(page, finish) {
	page.notifyActionLinkChange = function(metaData, useMetaDataOnly) {
		var dataRecordSet = {};
		var xobject, $fields;
		var $xobjectItem = this.$prototype.$properties.xobject.$item;

		dataRecordSet.$properties = {
			xobject: xobject = {}
		};
		//actions for object
		xobject.$item = {
			$links: metaData.$links,
			$actions: metaData.$actions
		};
		if (useMetaDataOnly) {
			xobject.$item.$properties = $fields = {};
		} else {
			dataRecordSet.xobject = {
				$properties: $fields = {}
			};
		}
		Object.keys($xobjectItem.$properties).forEach(function($bind) {
			$fields[$bind] = {
				$links: metaData.$links,
				$actions: metaData.$actions
			};
		});
		this.applyChange(dataRecordSet);
	};
	page.notifyDiagnoses = function(value, useMetaDataOnly) {
		var dataRecordSet = {}, xobject, $fields;
		var $xobjectItem = page.$prototype.$properties.xobject.$item;
		dataRecordSet.$properties = {
			xobject: xobject = {}
		};
		xobject.$item = {
			$diagnoses: page.fillDiagnoses(value, "xobject").$diagnoses
		};
		if (useMetaDataOnly) {
			xobject.$item.$properties = $fields = {};
		} else {
			dataRecordSet.xobject = {
				$properties: $fields = {}
			};
		}
		Object.keys($xobjectItem.$properties).forEach(function($bind) {
			$fields[$bind] = {
				$diagnoses: page.fillDiagnoses(value, "xobject").$diagnoses
			};
		});
		page.applyChange(dataRecordSet);
	};

	var $props = page.$prototype.$properties;
	$props.xobject = {
		$title: "xobject",
		$type: "application/x-object",
		$item: {
			"$properties": {
				"xstring": {
					$title: "xstring",
					$type: "application/x-string",

					$maxLength: 30,
					$capabilities: "sort,filter",
					$links: {
						$tunnel: {},
						$lookup: {}
					}
				},
				"xsubobject": {
					$title: "xsubobject",
					$type: "application/x-object",
					$item: {
						"$properties": {
							"xstring": {
								$title: "xstring",
								$type: "application/x-string",

								$maxLength: 30,
								$capabilities: "sort,filter",
								$links: {
									$tunnel: {},
									$lookup: {}
								}
							}
						}
					}
				},
				"xchoice": {
					$title: "xchoice",
					$type: "application/x-choice",
					$value: {
						$type: "application/x-integer",
						$enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(value) {
							return {
								"$value": value,
								$title: "Value " + value
							};
						})
					},
					$links: {
						$tunnel: {},
						$lookup: {}
					}
				},
				"xboolean": {
					$title: "xboolean",
					$type: "application/x-boolean"
				},
				"$email": {
					$title: "$format: $email",
					$type: "application/x-string",
					$format: "$email"

				},
				"xinteger": {
					$title: "xinteger",
					$type: "application/x-integer"
				}
			}
		}
	};
	syra_widgets.ensureMediaTypes(page.$prototype, function() {
		page.addFieldBlock(page.leftCol, "xobject", ["xobject"]);

		page.refreshData = function() {
			page.applyChange({
				xobject: {
					xstring: "ceci est du texte",
					xsubobject: {
						xstring: "ceci est du texte"
					},
					$email: "toto@sage.com",
					xinteger: 200,
					xboolean: true,
					xchoice: 2
				}
			});
		};

		finish(page);
	});
};