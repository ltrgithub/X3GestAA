"use strict";
var helpers = require("syracuse-core/lib/helpers");

var _macros = {
	stressArray: "Stress Array",
	oamk: "oamk",
	referenceQuery: "referenceQuery",
	referenceEdit: "referenceEdit"
};

exports.load = function(page) {
	var $props = page.$prototype.$properties;
	$props.$field$isEditMode = {
		$title: "$isEditMode",
		$isMetaData: true,
		$type: "application/x-boolean"
	};
	$props.$field$type = {
		$title: "select a Macro",
		$isMetaData: true,
		$type: "application/x-choice",
		$value: {
			$type: "application/x-string",
			$enum: Object.keys(_macros).map(function($type) {
				return {
					$value: $type,
					$title: _macros[$type]
				};
			})
		}
	};
	$props.description = {
		$title: "Case description",
		$type: "application/x-string"
	};

	page.loadNewItem(page.layoutContent.domItem, {
		$bind: "$field$type",
		$isEditMode: true,
		$format: "$radios"
	});
	page.loadNewItem(page.layoutContent.domItem, {
		$bind: "description",
		$isTitleHidden: true,
		$isEditMode: false
	});
	page.loadNewItem(page.layoutContent.domItem, {
		$category: "section",
		$isEmptyVisible: true,
		$title: "Result Page",
		$clientId: "resultPage",
		$layout: {
			$items: []
		}
	});


};

exports.notifyDataChange = function(field, value) {
	if (field.$item.$bind == "$field$type") {
		require.async("syracuse-ui/lib/tests/pages/macros/" + value, function(err, module) {
			try {
				var $representation = {
					$prototype: helpers.object.clone(module.$prototype, true)
				};
				var resultPage = field.page.idMap["resultPage"];
				syra_dom.empty(resultPage.body);
				var pageTest = syra_pageBuilder.load({
					$autoFetch: false,
					layoutSlot: resultPage.body,
					$representation: $representation,
					$facet: "$edit",
					$category: "page"
				});
				resultPage.showItem(true);
				pageTest.startChange();
				pageTest.applyChange(module.dataset);
				pageTest.endChange();
			} catch (error) {
				console.error(error.message);
			}
		});
	}
};