"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var _map = require("syracuse-ui/lib/tests/pages/map").map;
var rtf = require("syracuse-rtf");

function TestPage() {}

exports.TestPage = helpers.defineClass(TestPage, DesktopPage, {
	addMenus: function($menus, rootSlot) {
		for (var ii = 0, jj = $menus.length; ii < jj; ii++) {
			var $menu = $menus[ii];
			if ($menu.$menus) {
				var box = this.addBox($menu.$title, "mn");
				rootSlot.appendChild(box.slot);
				$menu.$menus && this.addMenus($menu.$menus, box.slot);
			} else {
				var btn = syra_menus.addTextButton($menu.$title, "s-uitest-mn", "onNavTestMenuClick");
				if ($menu.$url) {
					rootSlot.appendChild(btn).href = $menu.$url;
				}
			}
		}
	},
	addBox: function($title, css) {
		var box = {
			slot: document.createElement("div"),
			body: document.createElement("div")
		};
		box.slot.className = "s-uitest-group-" + css;
		if ($title) {
			box.head = document.createElement("h2");
			box.head.className = "s-uitest-group-head-" + css;
			box.slot.appendChild(box.head).textContent = $title;
		}
		box.slot.appendChild(box.body).className = "s-uitest-group-body-" + css;
		return box;
	},
	addCol: function(slot, width) {
		var col = slot.appendChild(document.createElement("div"));
		col.className = "s-uitest-col";
		if (width) {
			col.style.width = width;
		}
		return col;
	},
	addFieldBlock: function(root, $title, $binds, callback) {
		var box = this.addBox($title, "h2");
		root.appendChild(box.slot);
		var left = this.addCol(box.body, "50%");
		var right = this.addCol(box.body, "50%");
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $edit = {
				$bind: $binds[ii],
				$isEditMode: true
			};
			var $read = {
				$bind: $binds[ii]
			};
			callback && callback($edit, $read);
			this.loadNewItem(left, $edit);
			this.loadNewItem(right, $read);
		}
	},
	onNavTestMenuClick: function(event, target) {
		if (target.syraValue && target.syraValue.indexOf("uilock") >= 0) {
			syra_site.uiLocker.lock(100, target.syraValue == "uilocklong");
		} else {
			syra_controller.executeMenu({
				$url: target.href
			}, this);
		}
		event.preventDefault();
		event.stopPropagation();
	},
	onConvertToRTF: function() {
		this.boundFields["textplainRTF"][0].setDataValue(rtf.fromHtml($(this.boundFields["textrtf"][0]._editor.doc.body).html()));
	},
	onConvertToHTML: function() {
		$(this.boundFields["textrtf"][0]._editor.doc.body).html(rtf.toHtml(this.boundFields["textplainRTF"][0].getDataValue()));
	},
	loadBox: function(initData) {
		var self = this;

		syra_site.pageLoader.initialize(self);
		self.notifyDataChangeHandlers = [];
		self.$prototype.$properties = self.$prototype.$properties || {};
		DesktopPage.prototype.loadBox.call(self, initData);
		self.securityViewSlot.style.display = "none";
		self.menuBar.isSlotVisible = true;
		self.menuBar.toggleBar(true);
		self.menuBar.ensureState();

		syra_site.dom.toggleClass(self.menuBar.barBody, "s-uitest-menubar-body", true);
		self.addMenus(_map, self.menuBar.barBody);

		self.menuBar.barBody.appendChild(syra_menus.addTextButton("ui lock", "s-uitest-mn", "onNavTestMenuClick")).syraValue = "uilock";
		self.menuBar.barBody.appendChild(syra_menus.addTextButton("ui lock long", "s-uitest-mn", "onNavTestMenuClick")).syraValue = "uilocklong";

		self.leftCol = self.addCol(self.layoutContent.domItem, "60%");
		self.rightCol = self.addCol(self.layoutContent.domItem, "40%");

		require.async("syracuse-ui/lib/tests/pages/" + self.$prototype.$testName, function(err, module) {
			if (err && err.message) {
				syra_site.showDiagnoses({
					$diagnoses: [{
						$severity: "error",
						$message: err.message
					}]
				});
			} else {
				self.testCase = self.$prototype.$testCategory ? module[self.$prototype.$testCategory] : module;
				self.testCase.notifyDataChange && self.notifyDataChangeHandlers.push(self.testCase.notifyDataChange);
				self.testCase.load(self);
				self.resizeArticle(true);
				syra_quality.page_onAfterLoad(self);
			}
		});

	},
	notifyDataChange: function(field, value) {
		for (var ii = 0, jj = this.notifyDataChangeHandlers.length; ii < jj; ii++) {
			this.notifyDataChangeHandlers[ii](field, value);
		}
		DesktopPage.prototype.notifyDataChange.call(this, field, value);
	},
	notifyActionChange: function(menuItem, target, value, notifyServer) {
		this.testCase && this.testCase.notifyActionChange && this.testCase.notifyActionChange(menuItem, target, value, notifyServer);
		DesktopPage.prototype.notifyActionChange.call(this, menuItem, target, value, notifyServer);
	},
	setJsonValue: function(json) {
		this.applyChange({
			$fieldJsonDelta: JSON.stringify(json, null, 2)
		});
	},
	addJsonField: function(slot) {
		this.$prototype.$properties.$fieldJsonDelta = {
			$title: "delta",
			$type: "application/x-string"
		};
		var box = this.addBox("Json Delta", "h2");
		this.loadNewItem(box.body, {
			$bind: "$fieldJsonDelta",
			$isTitleHidden: true,
			$isEditMode: true,
			$rows: 40,
			$isAutoSizeDisabled: true,
			$skin: "s-json-field"
		});
		slot.appendChild(box.slot);
	},
	addMetaSectionField: function($bind) {
		return this.loadNewItem(this.metaDataBox.body, {
			$bind: $bind,
			$isEditMode: true,
			$isLeftSpaceHidden: true
		});
	},
	applyChange: function(newData) {
		this.testCase && this.testCase.applyChange && this.testCase.applyChange(this, newData);
		DesktopPage.prototype.applyChange.call(this, newData);
	}
});