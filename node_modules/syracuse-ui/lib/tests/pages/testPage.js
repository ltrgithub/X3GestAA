"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var _map = require("syracuse-ui/lib/tests/pages/map").map;

function _showDiagnosesSummary(page, show) {
	if (!page.unitDiagnosesSlot) {
		page.unitDiagnosesSlot = document.createElement("div");
		page.unitDiagnosesSlot.className = "s-uitest-unit-diags";
		page.rightCol.insertBefore(page.unitDiagnosesSlot, page.rightCol.firstChild);
	}
	if (show !== false) {
		syra_site.dom.empty(page.unitDiagnosesSlot);
		var summary = {
			success: {
				count: 0
			},
			error: {
				count: 0
			}
		};
		page.units.forEach(function(unit) {
			if (unit.assertResult) {
				unit.assertResult.forEach(function(assert) {
					if (assert) {
						if (assert.success) {
							summary.success.count++;
						} else {
							summary.error.count++;
						}
					}
				});
			}
		});
		if (summary.success.count) {
			page.unitDiagnosesSlot.appendChild(syra_menus.addFontIconText(summary.success.count + " success", "s-diag-field s-diag-info", "info"));
		}
		if (summary.error.count) {
			page.unitDiagnosesSlot.appendChild(syra_menus.addFontIconText(summary.error.count + " error(s)", "s-diag-field s-diag-error", "diagnose"));
		}
	}
	syra_site.dom.display(page.unitDiagnosesSlot, show !== false);
}

function _addUnitTests(page, scenarios) {
	page.runUnits = function() {
		var self = this;
		self.units.forEach(function(unit) {
			self.runUnit(unit);
		});
		_showDiagnosesSummary(self);
		return self.units;
	};
	page.clearDiagnoses = function() {
		_showDiagnosesSummary(this, false);
		this.units.forEach(function(unit) {
			unit.reset();
		});
	};
	page.runUnit = function(unit) {
		unit.reset();
		unit.run(this);
	};
	page.onUnitClick = function(event, btn) {
		_showDiagnosesSummary(this, false);
		setTimeout(function() {
			page.runUnit(page.units[btn.syraUnit]);
			_showDiagnosesSummary(page);
		}, 10);
	};

	page.units = [];
	var blockCss = "s-uitest-menus",
		menuCss = "s-uitest-unit-mn";
	if (page.$menuOrientation == "horizontal") {
		blockCss += "-horiz";
		menuCss += "-horiz";
	}

	page.refreshData && page.rightCol.appendChild(syra_menus.addTextButton("Refresh", menuCss + "-horiz", "refreshData"));
	page.rightCol.appendChild(syra_menus.addTextButton("Reset Units", menuCss + "-horiz", "clearDiagnoses"));
	page.rightCol.appendChild(syra_menus.addTextButton("Run Unit", menuCss + "-horiz", "runUnits"));


	var names = scenarios && Object.keys(scenarios);
	if (names && names.length) {
		if (!page.$isJsonFieldHidden) {
			page.rightCol.style.width = "20%";
			page.addJsonField(page.addCol(page.layoutContent.domItem, "20%"));
		}
		names.forEach(function($name) {
			var block = document.createElement("div");
			block.className = blockCss;
			var scenario = scenarios[$name]();
			scenario.forEach(function(unit) {
				unit.page = page;
				unit.$title = unit.$title || $name;
				unit._link = block.appendChild(syra_menus.addTextButton(unit.$title || "", menuCss, "onUnitClick"));
				unit._link.syraItem = page.id;
				unit._link.syraUnit = page.units.length;

				unit.applyChange = function(delta) {
					if (delta.$isPartialDelta) {
						page.isFusionPage = true;
					}
					page.refreshData();
					page.setJsonValue(delta);
					page.$isEditMode = true; //ensure delta
					page.applyChange(delta);
					page.$isEditMode = false;
					delete page.isFusionPage;
				};
				unit.reset = function() {
					delete this.assertResult;
					if (this._diagnosesSlot) {
						syra_site.dom.empty(this._diagnosesSlot);
						this._diagnosesSlot.style.display = "none";
					}
				};
				unit.assert = function(success, message) {
					this.assertResult = this.assertResult || [];
					this.assertResult.push({
						success: success,
						message: message = (message || this.$title)
					});
					var $severity = success ? "info" : "error";
					if (!this._diagnosesSlot) {
						this._diagnosesSlot = document.createElement("div");
						this._diagnosesSlot.className = "s-uitest-unit-diags";
						this._link.parentNode.insertBefore(this._diagnosesSlot, this._link.nextSibling);
					}
					this._diagnosesSlot.style.display = "";
					this._diagnosesSlot.appendChild(syra_menus.addFontIconText(message, "s-diag-field s-diag-" + $severity, $severity == "info" ? $severity : "diagnose"));
				};

				page.units.push(unit);
			});
			page.rightCol.appendChild(block);
		});
	}
};

function TestPage() {}

exports.TestPage = helpers.defineClass(TestPage, DesktopPage, {
	addMenus: function($menus, rootSlot) {
		for (var ii = 0, jj = $menus.length; ii < jj; ii++) {
			var $menu = $menus[ii];
			if ($menu.$menus) {
				var box = this.addBox($menu.$title, "mn");
				rootSlot.appendChild(box.slot);
				$menu.$menus && this.addMenus($menu.$menus, box.slot);
			} else {
				var btn = syra_menus.addTextButton($menu.$title, "s-uitest-mn", "onNavTestMenuClick");
				if ($menu.$url) {
					rootSlot.appendChild(btn).href = $menu.$url;
				}
			}
		}
	},
	addBox: function($title, css) {
		var box = {
			slot: document.createElement("div"),
			body: document.createElement("div")
		};
		box.slot.className = "s-uitest-group-" + css;
		if ($title) {
			box.head = document.createElement("h2");
			box.head.className = "s-uitest-group-head-" + css;
			box.slot.appendChild(box.head).textContent = $title;
		}
		box.slot.appendChild(box.body).className = "s-uitest-group-body-" + css;
		return box;
	},
	addCol: function(slot, width) {
		var col = slot.appendChild(document.createElement("div"));
		col.className = "s-uitest-col";
		if (width) {
			col.style.width = width;
		}
		return col;
	},
	addFieldBlock: function(root, $title, $binds, callback) {
		var box = this.addBox($title, "h2");
		root.appendChild(box.slot);
		var left = this.addCol(box.body, "50%");
		var right = this.addCol(box.body, "50%");
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $edit = {
				$bind: $binds[ii],
				$isEditMode: true
			};
			var $read = {
				$bind: $binds[ii]
			};
			callback && callback($edit, $read);
			this.loadNewItem(left, $edit);
			this.loadNewItem(right, $read);
		}
	},
	onNavTestMenuClick: function(event, target) {
		if (target.syraValue && target.syraValue.indexOf("uilock") >= 0) {
			syra_site.uiLocker.lock(100, target.syraValue == "uilocklong");
		} else {
			syra_controller.executeMenu({
				$url: target.href
			}, this);
		}
		event.preventDefault();
		event.stopPropagation();
	},
	loadBox: function(initData) {
		var self = this;

		syra_site.pageLoader.initialize(self);
		self.$prototype.$properties = self.$prototype.$properties || {};
		DesktopPage.prototype.loadBox.call(self, initData);
		self.securityViewSlot.style.display = "none";
		self.menuBar.isSlotVisible = true;
		self.menuBar.toggleBar(true);
		self.menuBar.ensureState();

		syra_site.dom.toggleClass(self.menuBar.barBody, "s-uitest-menubar-body", true);
		self.addMenus(_map, self.menuBar.barBody);

		self.menuBar.barBody.appendChild(syra_menus.addTextButton("ui lock", "s-uitest-mn", "onNavTestMenuClick")).syraValue = "uilock";
		self.menuBar.barBody.appendChild(syra_menus.addTextButton("ui lock long", "s-uitest-mn", "onNavTestMenuClick")).syraValue = "uilocklong";

		self.leftCol = self.addCol(self.layoutContent.domItem, "60%");
		self.rightCol = self.addCol(self.layoutContent.domItem, "40%");
		require.async("syracuse-ui/lib/tests/pages/" + self.$prototype.$testName, function(err, module) {
			if (err && err.message) {
				syra_site.showDiagnoses({
					$diagnoses: [{
						$severity: "error",
						$message: err.message
					}]
				});
			} else {
				self.testCase = self.$prototype.$testCategory ? module[self.$prototype.$testCategory] : module;
				self.testCase.load(self);
				_addUnitTests(self, module.scenarios);
				self.refreshData && self.refreshData();
				self.resizeArticle(true);
				syra_quality.page_onAfterLoad(self);
			}
		});

	},
	notifyActionChange: function(menuItem, target, value, notifyServer) {
		this.testCase && this.testCase.notifyActionChange && this.testCase.notifyActionChange(menuItem, target, value, notifyServer);
		DesktopPage.prototype.notifyActionChange.call(this, menuItem, target, value, notifyServer);
	},
	setJsonValue: function(json) {
		if (this.jsonField) {
			this.jsonField.value = JSON.stringify(json, null, 2);
		}
	},
	addJsonField: function(slot) {
		this.jsonField = slot.appendChild(document.createElement("textarea"));
		this.jsonField.className = "s-json-field-input";
		this.jsonField.rows = "40";
	},
	applyChange: function(newData) {
		this.testCase && this.testCase.applyChange && this.testCase.applyChange(this, newData);
		DesktopPage.prototype.applyChange.call(this, newData);
	}
});