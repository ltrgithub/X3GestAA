"use strict";

function _getAside() {
	return document.getElementById("s-site-quality");
}

exports.field = {
	isHidden: function(field) {
		return field.getAttribute("data-s-hidden") == "1";
	},
	isMandatory: function(field, checkFlag) {
		var ok = field.getAttribute("data-s-q-mandatory") == "1";
		if (checkFlag) {
			ok = field.querySelector(".s-btn-mandatory") != null;
		}
		return ok;
	},
	isEditMode: function(field) {
		return field.getAttribute("data-s-field-edit-mode") == "1";
	},
	findAll: function(root, bind) {
		return bind ? root.querySelectorAll("[data-s-q-bind='" + bind + "']") : root.querySelectorAll("[data-s-q-bind]");
	},
	find: function(root, bind) {
		return root.querySelector("[data-s-q-bind='" + bind + "']");
	},
	focus: function() {
		var id = _getAside().getAttribute("data-s-focus");
		return id && document.getElementById(id);
	},
	getBind: function(field) {
		return field.getAttribute("data-s-q-bind");
	},
	getType: function(field) {
		return field.getAttribute("data-s-type");
	},
	getTitle: function(field) {
		return field.getAttribute("data-s-q-title");
	},
	getTitleItem: function(field) {
		return field.querySelector("[data-s-field-title]");
	},
	isInputReadOnly: function(field, checkInput) {
		var ok = field.querySelectorAll(".s-readonly").length > 0;
		if (checkInput) {
			var inputs = field.querySelectorAll("input");
			for (var ii = 0; ii < inputs.lengtj; ii++) {
				ok = inputs[0].readonly;
			}
		}
		return ok;
	},
	isInputDisabled: function(field, checkInput) {
		var ok = field.querySelectorAll(".s-disabled").length > 0;
		if (checkInput) {
			var inputs = field.querySelectorAll("input");
			for (var ii = 0; ii < inputs.lengtj; ii++) {
				ok = inputs[0].disabled;
			}
		}
		return ok;
	},
	getValueStyle: function(field) {
		var target = field.querySelector("[data-s-value-style]");
		return target && target.getAttribute("data-s-value-style");
	}
};
exports.list = {
	getFormat: function(list) {
		return list.getAttribute("data-s-list-format");
	},
	getRecordSelected: function(list) {
		return list.querySelectorAll(".s-list-record-selected");
	},
	getRecordByIndex: function(list, index) {
		return list.querySelectorAll("[data-s-record-index='" + index + "']");
	},
	getRecordByUUID: function(list, uuid) {
		return list.querySelectorAll("[data-s-record='" + uuid + "']");
	},
	getCols: function(list) {
		return list.querySelectorAll("[data-s-list-col]");
	},
	getFieldCol: function(list, bind) {
		return list.querySelector("[data-s-list-col-bind='" + bind + "']");
	},
	getColBind: function(col) {
		return col.getAttribute("data-s-list-col-bind");
	},
	getColTitle: function(col) {
		return col.getAttribute("data-s-list-col-title");
	},
	isColHidden: function(col) {
		return col.getAttribute("data-s-hidden") == "1";
	},
	getRecords: function(list) {
		return list.querySelectorAll("[data-s-record]");
	},
	getFilterRecord: function(list) {
		return list.querySelectorAll("[data-s-filter-record]");
	},
	record: {
		isSelected: function(records, bind) {
			var selected;
			if (records) {
				for (var ii = 0; ii < records.length; ii++) {
					selected = records[ii].className.indexOf("s-list-record-selected") >= 0;
				}
			}
			return selected;
		}
	}
};

exports.page = {
	getBody: function(root) {
		return root.querySelector("[data-s-body]");
	}
};


exports.getFields = function(records, binds) {
	var fields = [];
	if (records) {
		for (var ii = 0; ii < records.length; ii++) {
			if (binds) {
				for (var mm = 0; mm < binds.length; mm++) {
					fields.push(exports.field.find(records[ii], binds[mm]));
				}
			} else {
				var all = exports.field.findAll(records[ii]);
				for (var mm = 0; mm < all.length; mm++) {
					fields.push(all[mm]);
				}
			}
		}
	}
	return fields;
};