"use strict";
var helpers = require("syracuse-core/lib/helpers")
var TestPage = require("syracuse-ui/lib/tests/testPage").TestPage;

function LayoutTest(){
}

exports.LayoutTest = helpers.defineClass(LayoutTest, TestPage, {
    _initiliazeTestPage: function(){
        var self = this;
        debugger;
        self.ensureDeltaManager().applyObjectDelta(self.$prototype.$properties, {
            $field$isHidden: {
                $type: "application/x-boolean",
                $title: "$isHidden",
                $isMetaData: true
            },
            $field$isTitleHidden: {
                $type: "application/x-boolean",
                $title: "$isTitleHidden",
                $isMetaData: true
            },
            $field$isBoxCollapsable: {
                $type: "application/x-boolean",
                $title: "$isBoxCollapsable",
                $isMetaData: true
            },
            $field$isMaximizable: {
                $type: "application/x-boolean",
                $title: "$isMaximizable ",
                $isMetaData: true
            }
        }, true);
        self.$item.$layout = {
            $layoutType: "row",
            $widths: "70,30",
            $items: [{
                $layoutType: "stack",
                $items: [{
                    section: "s-dash-h1",
                    block: "s-dash-h2"
                }, {
                    section: "s-h3",
                    block: "s-h3"
                }].map(function($layoutOptions){
                    return {
                        $layoutType: "row",
                        $widths: "33,33,33",
                        $items: [["stack", null, null], ["stack", "row", "tabs"], ["tabs", "tabs", null]].map(function($layouts){
                            return {
                                $layoutType: $layouts[0],
                                $items: [self._makeLevelPart($layoutOptions, $layouts[1]), self._makeLevelPart($layoutOptions, $layouts[2])]
                            };
                        })
                    };
                })
            }, {
                $category: "section",
                $title: "Status",
                $layout: {
                    $items: [{
                        $category: "section",
                        $title: "Metadata",
                        $layout: {
                            $items: [{
                                $bind: "$field$isHidden",
                                $isEditMode: true
                            }, {
                                $bind: "$field$isTitleHidden",
                                $isEditMode: true
                            }, {
                                $bind: "$field$isBoxCollapsable",
                                $isEditMode: true
                            }, {
                                $bind: "$field$isMaximizable",
                                $isEditMode: true
                            }]
                        }
                    }]
                }
            }]
        };
    },
    notifyDataChange: function(field, value){
        var self = this;
        if (field.$item.$bind.indexOf("$field") == 0) {
            var $bind = field.$item.$bind.replace("$field", "");
            var metaData = {};
            metaData[$bind] = value;
            Object.keys(self.idMap).forEach(function(id){
                var box = self.idMap[id];
                if (box.$item.$test) {
                    box.applyDesignMetaData(metaData, true);
                }
            });
        }
    },
    _makeLevelPart: function($layoutOptions, $layoutType){
        var section = {
            $category: "section",
            $test: true,
            $skin: $layoutOptions.section,
            $title: "Section",
            $layout: {
                $layoutType: $layoutType || "stack",
                $items: [{
                    $category: "section",
                    $test: true,
                    $skin: $layoutOptions.block,
                    $title: "Block"
                }, {
                    $category: "section",
                    $test: true,
                    $skin: $layoutOptions.block,
                    $title: "Block"
                }]
            }
        };
        if ($layoutType == "row") {
            var oldLayout = section.$layout;
            section.$layout = {
                $layoutType: "row",
                $items: [oldLayout.$items[0], oldLayout.$items[1]]
            };
        }
        return section
    }
});
