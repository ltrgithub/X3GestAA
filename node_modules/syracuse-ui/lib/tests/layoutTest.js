"use strict";
var helpers = require("syracuse-core/lib/helpers")
var TestPage = require("syracuse-ui/lib/tests/testPage").TestPage;

function LayoutTest(){
}

exports.LayoutTest = helpers.defineClass(LayoutTest, TestPage, {
    loadBox: function(initData){
        var self = this;
        self.ensureDeltaManager().applyObjectDelta(self.$prototype.$properties, {
            $field$isHidden: {
                $type: "application/x-boolean",
                $title: "$isHidden",
                $isMetaData: true
            },
            $field$isTitleHidden: {
                $type: "application/x-boolean",
                $title: "$isTitleHidden",
                $isMetaData: true
            },
            $field$isBoxCollapsable: {
                $type: "application/x-boolean",
                $title: "$isBoxCollapsable",
                $isMetaData: true
            },
            $field$isCloseable: {
                $type: "application/x-boolean",
                $title: "$isCloseable ",
                $isMetaData: true
            },
            $field$isMaximizable: {
                $type: "application/x-boolean",
                $title: "$isMaximizable ",
                $isMetaData: true
            }
        }, true);
        self.$item.$layout = {
            $items: [{
                $bind: "$field$isHidden",
                $isEditMode: true
            }, {
                $layoutType: "stack",
                $items: [{
                    section: "s-dash-h1",
                    block: "s-dash-h2"
                }, {
                    section: "s-h1",
                    block: "s-h2"
                }, {
                    section: "s-h3",
                    block: "s-h3"
                }].map(function($layoutOptions){
                    return {
                        $layoutType: "row",
                        $items: [self._makeLevelPart($layoutOptions, "stack"), self._makeLevelPart($layoutOptions, "tabs")]
                    };
                })
            }, {
                $layoutType: "row",
                $items: [{
                    $category: "block",
                    $test: true,
                    $skin: "s-vignette-field",
                    $title: "s-vignette-field",
                    $layout: {
                        $layoutType: "row",
                        $items: [{
                            $bind: "$field$isMaximizable",
                            $isEditMode: true
                        }, {
                            $bind: "$field$isCloseable",
                            $isEditMode: true
                        }]
                    }
                }, {
                    $category: "menus",
                    $test: true,
                    $title: "s-menus",
                    $layout: {
                        $layoutType: "row",
                        $items: [{
                            $bind: "$openSpy"
                        }]
                    }
                }]
            }]
        };
        TestPage.prototype.loadBox.call(this, initData);
        this.applyChange({
            $field$isBoxCollapsable: true,
            $field$isCloseable: true,
            $field$isMaximizable: true
        });
    },
    notifyDataChange: function(field, value){
        var self = this;
        if (field.$item.$bind.indexOf("$field") == 0) {
            var metaData = {};
            metaData[field.$item.$bind] = value;
            this.applyChange(metaData);
        }
    },
    applyChange: function(newData){
        if (newData) {
            var self = this;
            var $keys = Object.keys(newData);
            for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
                var $key = $keys[ii];
                if ($key.indexOf("$field") == 0) {
                    var $bind = $key.replace("$field", "");
                    var metaData = {};
                    metaData[$bind] = newData[$key];
                    Object.keys(self.idMap).forEach(function(id){
                        var box = self.idMap[id];
                        if (box.$item.$test) {
                            box.applyDesignMetaData(metaData, true);
                        }
                    });
                }
            }
        }
        TestPage.prototype.applyChange.call(this, newData);
    },
    _makeLevelPart: function($layoutOptions, $layoutType){
        var section = {
            $category: "section",
            $test: true,
            $skin: $layoutOptions.section,
            $title: $layoutOptions.section,
            $layout: {
                $layoutType: $layoutType || "stack",
                $items: [{
                    $category: "section",
                    $test: true,
                    $title: $layoutOptions.block,
                    $skin: $layoutOptions.block,
                    $layout: {
                        $layoutType: "row",
                        $items: [{
                            $bind: "$field$isMaximizable",
                            $isEditMode: true
                        }, {
                            $bind: "$field$isCloseable",
                            $isEditMode: true
                        }]
                    }
                }, {
                    $category: "section",
                    $test: true,
                    $title: $layoutOptions.block,
                    $skin: $layoutOptions.block,
                    $layout: {
                        $layoutType: "row",
                        $items: [{
                            $bind: "$field$isTitleHidden",
                            $isEditMode: true
                        }, {
                            $bind: "$field$isBoxCollapsable",
                            $isEditMode: true
                        }]
                    }
                }]
            }
        };
        if ($layoutType == "tabs") {
            section = {
                $layoutType: "tabs",
                $items: [section, helpers.object.clone(section, true)]
            };
        }
        return section;
    }
});
