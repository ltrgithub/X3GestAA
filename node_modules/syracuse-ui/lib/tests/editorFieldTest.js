"use strict";
var helpers = require("syracuse-core/lib/helpers")
var FieldsTest = require("./fieldsTest").FieldsTest;

function EditorFieldTest(){
}

exports.EditorFieldTest = helpers.defineClass(EditorFieldTest, FieldsTest, {
    loadBox: function(){
        FieldsTest.prototype.loadBox.call(this, {
            "$properties": {
                "$field$TestProperty": {
                    $title: "$editMode",
                    $type: "application/x-choice",
                    $value: {
                        $type: "application/x-integer",
                        $enum: [{
                            $value: "array",
                            $title: "array (default)"
                        }, {
                            $value: "record",
                            $title: "record"
                        }, {
                            $value: "cell",
                            $title: "cell"
                        }]
                    }
                },
                "$field$rows": {
                    $title: "$rows",
                    $type: "application/x-string",
                },
                "textrtf": {
                    $title: "text-rtf",
                    $type: "text/rtf",
                    $maxLength: 200,
                    $capabilities: "sort,filter,alphaTab,raw",
                    $links: {
                        $tunnel: {},
                        $lookup: {}
                    }
                }
            }
        }, {
            "$field$TestProperty": "record",
            "textrtf": "{\\rtf1\\ansi{\\fonttbl{\\f0 Bitstream Charter;}} {\\f0 \\fs24 Ceci est un texte accentu\\u233 }\\par \\par {\\f0 des \\fs18 petits}{\\f0  et des \\fs32 gros}\\f0 .}"
        });
    },
    appendSettingsBar: function(){
        var $items = FieldsTest.prototype.appendSettingsBar.call(this);
        $items.unshift({
            $category: "block",
            $title: "Html Editor Specific",
            $layout: {
                $items: [{
                    $bind: "$field$TestProperty",
                    $isEditMode: true
                }]
            }
        });
        return $items;
    },
    notifyDataChange: function(field, value){
        switch (field.$item.$bind) {
            case "$field$TestProperty":
                alert(value);
                break;
            default:
                FieldsTest.prototype.notifyDataChange.call(this, field, value);
                break;
        }
    },
    _makeBlock: function($isEditMode){
        return [this._makeEditReadBlock("textrtf", [{
            "$bind": "textrtf",
            "$labelWidth": "auto",
            "$rows": 5
        }])];
    }
});
