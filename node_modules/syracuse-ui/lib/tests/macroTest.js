"use strict";
var helpers = require("syracuse-core/lib/helpers");
var TestPage = require("syracuse-ui/lib/tests/testPage").TestPage;

var _macros = {
    "dynamicGridColumns": "Dynamic Grid Columns",
    "stressArray": "Stress Array",
    "oamk": "oamk",
    "octy": "octy",
    "oaus": "oaus",
    "referenceQuery": "referenceQuery",
    "referenceEdit": "referenceEdit",
    "coreCountriesDetails": "coreCountriesDetails",
    "coreCountriesQuery": "coreCountriesQuery",
    "coreCountriesEdit": "coreCountriesEdit"
};

function MacroTest(){
}

exports.MacroTest = helpers.defineClass(MacroTest, TestPage, {
    _initiliazeTestPage: function(){
        this.ensureDeltaManager().applyObjectDelta(this.$prototype.$properties, {
            $fieldJsonPrototype: {
                "$title": "$prototype",
                "$type": "application/x-string"
            },
            $fieldJsonDelta: {
                "$title": "delta",
                "$type": "application/x-string"
            },
            $field$isEditMode: {
                $title: "$isEditMode",
                $isMetaData: true,
                $type: "application/x-boolean"
            },
            $field$type: {
                $title: "select a Macro",
                $isMetaData: true,
                $type: "application/x-choice",
                $value: {
                    $type: "application/x-string",
                    $enum: Object.keys(_macros).map(function($type){
                        return {
                            $value: $type,
                            $title: _macros[$type]
                        };
                    })
                }
            },
            description: {
                $title: "Case description",
                $type: "application/x-string"
            }
        }, true);
        this.$item.$layout = {
            $layoutType: "tabs",
            $items: [{
                $category: "section",
                $title: "View",
                $layout: {
                    $items: [{
                        $bind: "$field$type",
                        $isEditMode: true,
                        $format: "$radios"
                    }, {
                        $bind: "description",
                        $isTitleHidden: true,
                        $isEditMode: false
                    }, {
                        $category: "section",
                        $title: "Result Page",
                        $id: "resultPage",
                        $layout: {
                            $items: []
                        }
                    }]
                
                }
            }, {
                $category: "section",
                $title: "Json",
                $layout: {
                    $layoutType: "row",
                    $items: [{
                        $bind: "$fieldJsonPrototype",
                        $isEditMode: true,
                        $rows: 50,
                        $isAutoSizeDisabled: true,
                        $skin: "s-json-field"
                    }, {
                        $bind: "$fieldJsonDelta",
                        $isEditMode: true,
                        $rows: 50,
                        $isAutoSizeDisabled: true,
                        $skin: "s-json-field"
                    }]
                
                }
            }]
        };
    },
    loadBox: function(){
        TestPage.prototype.loadBox.call(this);
        this.notifyDataChange(this.boundFields.$field$type[0], "referenceEdit");
    },
    notifyDataChange: function(field, value){
        var self = this;
        if (field.$item.$bind == "$field$type") {
            require.async("./macros/" + value, function(err, module){
                try {
                    var $representation = {
                        $prototype: helpers.object.clone(module.$prototype, true)
                    };
                    var pageTest = document.site.loadNewPage({
                        $autoFetch: false,
                        layoutSlot: self.idMap["resultPage"].$$body.empty()[0],
                        $representation: $representation,
                        $urlParts: {
                            $facet: "$edit"
                        },
                        $category: "page"
                    });
                    self.applyChange({
                        $fieldJsonPrototype: JSON.stringify(module.$prototype, null, 2),
                        $fieldJsonDelta: JSON.stringify(module.dataset, null, 2)
                    });
                    pageTest.applyChange(module.dataset);
                } 
                catch (error) {
                    console.error(error.message)
                }
            });
        }
    }
});
