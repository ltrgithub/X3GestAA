"use strict";

exports.get = function(key, defaultValues, target) {
	var values = syra_site.userProfile.dataset.sitePreferences;
	if (values) {
		values = (values[syra_site.$device] || {})[key];
	}
	if (values === undefined && syra_site.$preferences) {
		values = syra_site.$preferences[key];
	}
	values = values || {};
	if (defaultValues) {
		var keys = Object.keys(defaultValues);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			if (values[keys[ii]] === undefined) {
				values[keys[ii]] = defaultValues[keys[ii]];
			}
		}
	}
	target && exports.applyValues(target, values);
	return values;
};

exports.save = function(key, source, props) {
	var userProfile = syra_site.userProfile;
	var values = userProfile.dataset.sitePreferences = userProfile.dataset.sitePreferences || {};
	var preferences = values[syra_site.$device] = values[syra_site.$device] || {};
	if (source || props) {
		if (props) {
			exports.applyValues(preferences[key] = preferences[key] || {}, source, props);
		} else {
			preferences[key] = source;
		}
	} else {
		delete values[syra_site.$device][key];
	}
	if (!userProfile.saveSiteTimeout) {
		userProfile.saveSiteTimeout = setTimeout(function() {
			if (syra_site && !userProfile.disposed) {
				userProfile.saveSiteTimeout = null;
				syra_form.getSendBag(userProfile).sitePreferences = values;
				syra_form.postAction(userProfile, null, userProfile, {
					$save: {
						$isRequested: true
					}
				}, true);
			}
		}, 3000);
	}
};

exports.applyValues = function(target, values, keys) {
	if (target) {
		keys = keys || Object.keys(values);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			target[keys[ii]] = values[keys[ii]];
		}
	}
};