"use strict";

exports.get = function(page, $key) {
	return page.$newPreferences && page.$newPreferences.content[$key];
};

exports.save = function(page, $key, data) {
	if (page.$newPreferences && !page.isVignettePage) {
		page.$newPreferences.content[$key] = data;
		_save(page);
	}
};

exports.getField = function(field) {
	var $fields = field.page.$newPreferences && field.page.$newPreferences.content.$fields;
	return ($fields && $fields[field.$item.$bind]) || {};
};

exports.saveField = function(field, data) {
	if (!field.page.isVignettePage) {
		if (data) {
			field.$newPreferences = data;
		}
		(field.page.$newPreferences.content.$fields = field.page.$newPreferences.content.$fields || {})[field.$item.$bind] = field.$newPreferences;
		_save(field.page);
	}
};

exports.initializePage = function(page, $representation) {
	page.$newPreferences = {};
	if (!page.isVignettePage) {
		page.$newPreferences.$link = $representation.$links && $representation.$links.$userPreferences;
		page.$newPreferences.content = $representation.$newPreferences && $representation.$newPreferences.content;
	}
	page.$newPreferences.content = page.$newPreferences.content || {};
};

function _save(page) {
	if (page.$newPreferences.$link) {
		var sendBag = {
			$etag: 1,
			$url: syra_url.formatMenuUrl(page, page.$newPreferences.$link),
			content: page.$newPreferences.content
		};
		syra_http.put({
			page: page,
			$url: sendBag.$url,
			data: sendBag,
			$etag: sendBag.$etag,
			success: function(data, response, requestUrl) {}
		});
	}
}


exports.reset = function(page) {
	if (page) {
		syra_diagnose.box.show({
			$title: syra_local.aw_deleteMessageTitle,
			$message: syra_local.aw_deletePreferences,
			$type: "question",
			$buttons: "yesno",
			callback: function(response) {
				if (response && response.$clientId == "yes") {
					if (page.$newPreferences) {
						page.$newPreferences.content = {};
						_save(page);
					}
					if (page.isLandingPage) {
						var $binds = Object.keys(page.boundFields);
						for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
							var vignette = page.boundFields[$binds[ii]];
							vignette = vignette && vignette[0] && vignette[0].vignette;
							if (vignette && vignette.$newPreferences) {
								vignette.$newPreferences.content = {};
								_save(vignette);
							}
						}
					}
					for (var ii = 0, jj = page.bars.length; ii < jj; ii++) {
						page.bars[ii].clearPreferences();
					}
					var lists = syra_item.getLists(page);
					for (var ii = 0, jj = lists.length; ii < jj; ii++) {
						var list = lists[ii];
						list.paging && list.paging.clearPreferences();
						list.builder.clearPreferences && list.builder.clearPreferences();
					}
					page.resizeArticle(true);
				}
			}
		});
	}
};