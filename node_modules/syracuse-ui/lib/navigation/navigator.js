"use strict";
var helpers = require('syracuse-core').helpers;
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var _module = require('./items/module');

var _mode = {
	mega: require('./mega'),
	map: require('./sitemap'),
	edit: require('./edit')
};
exports.megaMenus = null;

function BreadCrumb(Navigator) {
	this.page = new Navigator();
	this.page.mode = _mode.mega;
	this.page.isBreadCrumb = true;

	this.onClosePopup = function() {
		if (this.saveListViewParent && this.saveListViewParent.parentNode) {
			this.saveListViewParent.parentNode.appendChild(this.saveListViewParent.listView.scrollSlot);
		}
		delete this.saveListViewParent;
	};
	this.click = function(btn) {
		if (!this.page.listView) { //not loaded
			this.page.mode.page.load(this.page);
		}
		var listView = btn.$breadCrumbItem.$uuid ? this.page.navMap[btn.$breadCrumbItem.$uuid].listView : this.page.listView;
		this.page.hideMegaPopup();
		this.saveListViewParent = {
			listView: listView,
			parentNode: listView.scrollSlot.parentNode
		};
		this.page.showMegaPopup(listView, btn.link);
		var $breadCrumb = btn.parent.$breadCrumb;
		var index = $breadCrumb.indexOf(btn.$breadCrumbItem);
		if (index >= 0 && index < ($breadCrumb.length - 1)) {
			var child = this.page.navMap[$breadCrumb[index + 1].$uuid];
			if (child) {
				syra_dom.toggleClass(child.slot, "s-selected", true);
				listView.scrollTo(child.slot);
			}
		}
	};

	this.addPath = function(page, parentNode) {
		if (!page.isAlertModal && page.$breadCrumb && page.$breadCrumb.length > 0) {
			var isReadOnly = (page.overPanel && page.overPanel.isModal) || syra_site.$device == "tablet" || page.$facet === "$modal2";
			var slot = syra_dom.div("s-page-head-breadcrumb", parentNode)
			for (var ii = 0, jj = page.$breadCrumb.length - 1; ii <= jj; ii++) {
				var $breadCrumbItem = page.$breadCrumb[ii];
				var btn = syra_button.add({
					parent: page,
					css: "s-page-breadcrumb-item" + (isReadOnly ? " s-readonly" : ""),
					slot: slot,
					text: $breadCrumbItem.title,
					fontIcon: "filter_gt",
					$breadCrumbItem: $breadCrumbItem,
					isIndicator: isReadOnly,
					$isDisabled: isReadOnly,
					click: function() {
						syra_nav.breadcrumb.click(this); //avoid using self
					}
				});
				if (ii === jj) {
					syra_dom.hide(btn.iconflag, true);
				} else {
					btn.iconflag.parentNode.appendChild(btn.iconflag);
				}
			}
		}
	};

	this.dispose = function() {
		syra_site.disposeObject(this);
	};
}


function Navigator() {}

helpers.defineClass(Navigator, DesktopPage, {
	load: function(initData) {
		this.navMap = {};
		var activePage = syra_site.getActivePage();
		this.isActivePageFusion = activePage && activePage.isFusionPage;

		(this.page = this).$item = {
			$layout: {
				$items: []
			}
		};

		syra_pageBuilder.initialize(this);
		this.externalAdapter = syra_site.externalAdapter;
		syra_article.beforeDraw(this);
		this.mode.page.draw && this.mode.page.draw(this, initData);
		syra_article.endDraw(this);

		this.addChildren();
		this.areModulesLoaded = true;
	},
	addChildren: function() {
		var modules = this.dataset && this.dataset.modules;
		this.children = [];
		if (modules) {
			for (var ii = 0, jj = modules.length; ii < jj; ii++) {
				this.addChild(modules[ii]);
			}
		}
	},
	addChild: function(record) {
		var child = new _module.Module(this, record);
		this.children.push(child);
		return child;
	},
	clear: function() {
		syra_dom.empty(this.mainPopup);
		syra_dom.empty(this.modulesSlot);
		this.lastSelected = null;
		if (this.children) {
			for (var ii = 0, jj = this.children.length; ii < jj; ii++) {
				this.disposeChild(this.children[ii]);
			}
		}
	},
	disposeChild: function(child) {
		if (child) {
			if (child.children) {
				for (var ii = 0, jj = child.children.length; ii < jj; ii++) {
					this.disposeChild(child.children[ii]);
				}
			}
			child.carousel && child.carousel.dispose();
			syra_item.unregister(child);
			syra_site.disposeObject(child);
		}
	},
	dispose: function() {
		this.clear();
		this.mode && this.mode.page.dispose(this);
		DesktopPage.prototype.dispose.call(this);
	}
});

exports.loadMegaMenus = function($representation) {
	var page = exports.megaMenus = new Navigator();

	exports.breadcrumb = new BreadCrumb(Navigator);

	exports.megaMenus.selectedEndpointUiid = syra_site.userProfile.selectedEndpointUiid;
	exports.megaMenus.selectedRoleUiid = syra_site.userProfile.selectedRoleUiid;
	page.$representation = $representation;
	(page.mode = _mode.mega).page.load(page);
	syra_site.layoutSlot.style.paddingTop = syra_site.header.getBoundingClientRect().height + "px";
};

exports.showMegaMenus = function(show) {
	var isShown = syra_dom.isDisplay(syra_site.megaMenusBar);
	if (show) {
		if (exports.megaMenus) {
			if ((syra_site.userProfile.selectedEndpointUiid !== exports.megaMenus.selectedEndpointUiid) || (syra_site.userProfile.selectedRoleUiid !== exports.megaMenus.selectedRoleUiid)) {
				exports.megaMenus.dispose();
				exports.megaMenus = null;
			}
		}
		if (!exports.megaMenus) {
			exports.loadMegaMenus();
		}
	}
	if (isShown != show) {
		syra_dom.hide(syra_site.megaMenusBar, !show);
		syra_site.layoutSlot.style.paddingTop = syra_site.header.getBoundingClientRect().height + "px";
		syra_site.resizeItem();
	}

};
exports.showSiteMap = function() {
	syra_bookmarks.open(function() {
		var page = new Navigator();
		page.mode = _mode.map;
		page.$prototype = exports.megaMenus.$prototype;
		page.dataset = exports.megaMenus.dataset;
		page.load();
		if (page.children.length) {
			page.children[0].activate(true);
		}
		page.isMapLoaded = true;
		page.resizeItem();
	});
};

exports.editSiteMap = function() {
	var page = new Navigator();
	page.mode = _mode.edit;
	return page;
};