"use strict";
var MenuItem = require('./menuItem').MenuItem;
var MenuBlock = require('./menuBlock').MenuBlock;

function SubModule(module, dataset) {
	syra_item.initialize(module.page, this);
	this.dataset = dataset || {};
	this.$prototype = module.$prototype.$properties.submodules.$item;
	this.navParent = this.articleParent = this.boxParent = module;

	this.mode = this.page.mode.subModule;
	this.mode.create(this);
	this.slot.syraItem = this.slot.syrainout = this.id;
	this.slot.syraOnClick = "click";
	this.page.navMap[this.dataset.$uuid] = this; //use for breadcrumb
}

SubModule.prototype.click = function() {
	if (this.navParent.lastSelected != this) {
		this.activate(true);
	}
};
SubModule.prototype.onItemInOut = function(onEnter) {
	var self = this;
	if (!self.page.activateOnOverDisabled) {
		if (onEnter) {
			self.navParent.onEnter = true;
			if (self.navParent.lastSelected === null) {
				self.navParent.onEnter && self.activate(true);
			} else {
				if (self.navParent.lastSelected === self) {
					if (self.navParent.moduleTimer) {
						clearTimeout(self.navParent.moduleTimer);
						delete self.navParent.moduleTimer;
					}
				} else {
					self.navParent.moduleTimer && clearTimeout(self.navParent.moduleTimer);
					self.navParent.moduleTimer = setTimeout(function() {
						self.navParent.onEnter && self.activate(true);
						delete self.navParent.moduleTimer;
					}, 150);
				}
			}
		} else {
			self.navParent.onEnter = false;
		}
	}
};

SubModule.prototype.activate = function(on, block) {
	block = block || this;
	if (on) {
		if (block.navParent.lastSelected) {
			block.navParent.lastSelected.activate(false);
		}
		this.mode.activate(on, block);
		var child = block.lastSelected || block.children[0];
		if (child && child.activate) {
			child.activate(true);
		}
	} else {
		if (block == block.navParent.lastSelected) {
			block.navParent.lastSelected = null;
		}
		this.mode.activate(on, block);
	}
};

SubModule.prototype.addChildren = function(items, parent) {
	parent = parent || this;
	parent.children = [];
	if (items.length) {
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			this.addChild(items[ii], parent);
		}
	}
};

SubModule.prototype.addChild = function(record, parent) {
	parent = parent || this;
	if (record.menuItem || record.menuBlock) {
		var child = new(record.menuItem ? MenuItem : MenuBlock)(parent, record);
		parent.children.push(child);
		return child;
	}
};
SubModule.prototype.getChild = function(uuid) {
	for (var ii = 0, jj = this.children.length; ii <= jj; ii++) {
		var item = this.children[ii];
		if (item.dataset.$uuid === uuid)
			return item;
	}
};

exports.SubModule = SubModule;