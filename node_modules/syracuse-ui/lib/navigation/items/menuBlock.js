"use strict";

function MenuBlock(navParent, variant_dataset) {
	this.variantKey = "menuBlock";
	syra_item.initialize(navParent.page, this);
	this.navParent = navParent;
	this.submodule = navParent.submodule || navParent;
	this.record = this.dataset = variant_dataset.menuBlock;
	this.variant_dataset = variant_dataset;
	(this.mode = this.page.mode.menuBlock).create(this);

	this.submodule.addChildren(this.dataset.items, this);
	this.page.navMap[this.record.$uuid] = this; //use for breadcrumb
}

MenuBlock.prototype.onItemInOut = function(onEnter) {
	var self = this;
	if (!self.page.activateOnOverDisabled) {
		if (onEnter) {
			self.navParent.onEnter = true;
			if (self.navParent.lastSelected === null) {
				self.navParent.onEnter && self.activate(true);
			} else {
				if (self.navParent.lastSelected === self) {
					if (self.navParent.moduleTimer) {
						clearTimeout(self.navParent.moduleTimer);
						delete self.navParent.moduleTimer;
					}
				} else {
					self.navParent.moduleTimer && clearTimeout(self.navParent.moduleTimer);
					self.navParent.moduleTimer = setTimeout(function() {
						self.navParent.onEnter && self.activate(true);
						delete self.navParent.moduleTimer;
					}, 150);
				}
			}
		} else {
			self.navParent.onEnter = false;
		}
	}
};
MenuBlock.prototype.activate = function(on) {
	this.mode.activate && this.mode.activate(on, this);
};
MenuBlock.prototype.getChild = function(uuid) {
	for (var ii = 0, jj = this.children.length; ii <= jj; ii++) {
		var item = this.children[ii];
		if (item.dataset.$uuid === uuid)
			return item;
	}
};

exports.MenuBlock = MenuBlock;