"use strict";
var _helpers = require('@sage/syracuse-core').helpers;
var Sortable = require('syracuse-ui/lib/scroll/sortable').Sortable;
var List = require('syracuse-ui/lib/scroll/list').List;
var _view;

function _editTitle(edit, item) {
	if (edit) {
		if (!item.titleField) {
			syra_dom.hide(item.link, true);
			item.page = syra_site;
			item.titleField = syra_dom.addEditable("s-bookmark-item-edit-field");
			item.actions.parentNode.insertBefore(item.titleField, item.actions);
			syra_item.getMap()[item.titleField.syraItem = "bookmark-edit-" + item.id] = item;
			item.titleField.textContent = item.link.textContent;
			item.onFieldInputEvent = function(event) {
				switch (event.type) {
					case "focusin":
					case "focusout":
						var focusin = event.type == "focusin";
						if (!focusin) {
							if (this.titleField.textContent != this.dataset.title) {
								item.applyShortCut({
									enter: true
								});
							}
						}
						syra_dom.toggleClass(this.titleField, "s-focus", focusin);
						if (!focusin) {
							_editTitle(false, this);
						}
						break;
				}
			};
			item.applyEscape = function() {
				this.titleField.textContent = this.dataset.title;
				_editTitle(false, this);
			};
			item.isField = true; // for findField
			item.$item = item.$item || {}; // field have always $item
			item.applyShortCut = function(shortcuts) {
				if (shortcuts.enter) {
					if (this.titleField.textContent) {
						this.dataset.title = this.link.textContent = this.titleField.textContent;
						_view.commit(_view.dataset, _view.buttons.indexOf(this));
					} else {
						this.titleField.textContent = this.dataset.title;
					}
					return true;
				}
			};
			item.titleField.focus();
		}
	} else {
		delete syra_item.getMap()["bookmark-edit-" + item.id];
		syra_dom.remove(item.titleField);
		delete item.titleField;
		syra_dom.hide(item.link, false);
		item.onFieldInputEvent = item.applyEscape = null;
	}
	syra_button.setText(item.edit.edit, edit ? syra_local.bookmarks_edit_cancel_edit : syra_local.bookmarks_edit_item, edit ? "abort" : "edit");
}

function View() {
	this.slot = document.createElement("aside");
	this.fusion = {
		map: {},
		get: function(urlSeg) {
			return this.map[urlSeg.fusionParams.fullCode];
		}
	};
	this.syracuse = {
		map: {},
		get: function(urlSeg) {
			var uri = urlSeg.uri;
			if (urlSeg.host) {
				uri = uri.slice(uri.indexOf(urlSeg.host) + urlSeg.host.length);
			}

			var menus = this.map[uri];
			if (menus) {
				for (var ii = menus.length - 1; ii >= 0; ii--) {
					var seg2 = menus[ii].urlSeg;
					if (!urlSeg.params && !seg2.params) {
						return menus[ii];
					} else {
						if (urlSeg.params && seg2.params) {
							var keys1 = Object.keys(urlSeg.params);
							var keys2 = Object.keys(seg2.params);
							if (keys1.length == keys2.length) {
								for (var mm = keys1.length - 1; mm >= 0; mm--) {
									if (urlSeg.params[keys1[mm]] != seg2.params[keys1[mm]]) {
										break;
									}
								}
								if (mm < 0) {
									return menus[ii];
								}
							}
						}
					}
				}
			}
		}
	};
}

View.prototype.hide = function() {
	this.popup && this.popup.close();
};

View.prototype.fetch = function(success) {
	var self = this;
	syra_ajax.get({
		page: syra_site.userProfile,
		url: syra_expression.parse(syra_site.userProfile, syra_site.userProfile.$menus.$bookmarks.$url),
		success: function(data, response, requestUrl) {
			if (!syra_site.userProfile.disposed) {
				self.dataset = data.content || {};
				self.fill();
				success && success();
			}
		}
	});
};

View.prototype.click_add = function() {
	var title, urlSeg, description;
	var page = syra_site.getActivePage();
	if (page) {
		if (page.isFusionPage) {
			var fct = page.$fusionPageMeta.winModel.getFctName();
			if (fct.name && (page.$fusionPageMeta.winModel._mdata.type == 1 || page.$fusionPageMeta.winModel._mdata.type == 2)) {
				if (page.urlSeg.fusionParams.functionCode != fct.name) {
					urlSeg = syra_site.clone(page.urlSeg);
					syra_url.replaceFusionCode(urlSeg, fct.name);
					syra_url.build(urlSeg);
					title = page.getTitle();
				} else {
					urlSeg = page.urlSeg;
					title = fct.title;
				}
				description = syra_local.nvpFunction + ": " + page.urlSeg.fusionParams.functionCode;
			}
		} else {
			if (page.urlSeg) {
				urlSeg = page.urlSeg;
				title = page.getTitle();
				if (page.$prototype.$representation) {
					description = syra_local.nvpEntity + ": " + page.$prototype.$representation;
				}
			}
		}
	}

	urlSeg && this.addItem(urlSeg, title, description);
};

View.prototype.addItem = function(urlSeg, title, description) {
	var menuItem = this.find(urlSeg);
	if (menuItem) {
		this.dataset.items.splice(this.dataset.items.indexOf(menuItem), 1);
	} else {
		menuItem = {
			$url: urlSeg.$url,
			title: title
		};
		if (description) {
			menuItem.description = description;
		}
		this.dataset.items.push(menuItem);
	}
	this.commit();
};

View.prototype.commit = function(dataset, selectedIndex) {
	var self = this;
	self.dataset = dataset || self.dataset;
	//add MenuItem for compatibility
	var content = _helpers.object.clone(self.dataset, true);
	for (var ii = 0, jj = content.items.length; ii < jj; ii++) {
		var item = content.items[ii];
		content.items[ii] = {
			menuItem: item
		};
		delete item.urlSeg;
		delete item.urlSegment;
	}
	syra_ajax.put({
		lock: true,
		page: syra_site.userProfile,
		url: syra_expression.parse(syra_site.userProfile, syra_site.userProfile.$menus.$bookmarks.$url),
		data: {
			$etag: self.dataset.$etag,
			content: content
		},
		success: function(data, response, requestUrl) {
			self.dataset = data.content || {};
			self.fill();
			if (selectedIndex != undefined && self.buttons[selectedIndex]) {
				self.list.scrollTo(self.buttons[selectedIndex].slot);
			}
		}
	});
};

View.prototype.onLinkClick = function(menuItem) {
	if (!syra_fusion.executeFusionFunc(menuItem, syra_fusion && syra_fusion.activatedBook)) {
		var target;
		syra_router.executeMenu({
			$url: menuItem.urlSeg.$url,
			target: target
		}, syra_site);
	}
	this.hide();
};

View.prototype.find = function(urlSeg) {
	if (this.buttons.length) {
		return (urlSeg.fusionParams ? this.fusion : this.syracuse).get(urlSeg);
	}
};

View.prototype.fill = function() {
	this.list && syra_dom.remove(this.list.ul);
	this.sortable && this.sortable.dispose();
	this.reset();
	if (!this.addBtn) {
		this.addBtn = syra_button.add({
			parent: syra_site,
			slot: this.slot,
			text: syra_local.bookmarks_switch_on,
			css: "s-list-primary-bottom-sep s-list-primary-btn-primary",
			click: function() {
				if (this.disableAddBookmarkText) {
					syra_alert.modal({
						$message: this.disableAddBookmarkText,
						$title: syra_local.site_btn_bookmark,
						$type: "warning"
					});
				} else {
					_view.click_add();
				}
			}
		});
	}
	this.dataset.items = this.dataset.items || [];
	//clean MenuItem
	var items = [];
	for (var ii = 0, jj = this.dataset.items.length; ii < jj; ii++) {
		var item = this.dataset.items[ii];
		if (item && item.menuItem) {
			items.push(item.menuItem);
		}
	}
	this.dataset.items = items;
	this.list = new List({
		css: "s-list-primary",
		scroll: true
	});
	this.sortable = new Sortable({
		root: this.list.ul,
		handle: "bookmarks",
		start: function(node) {
			this.moved = null;
			for (var ii = 0, jj = _view.buttons.length; ii < jj; ii++) {
				if (_view.buttons[ii].slot == node) {
					this.moved = _view.buttons[ii];
					break;
				}
			}
			return !!this.moved;
		},
		setDraggingText: function(node) {
			return this.moved.text;
		},
		end: function(node) {
			var index = syra_dom.getNodeIndex(node);
			syra_dataset.array.moveTo(_view.dataset.items, this.moved.dataset, index);
			syra_dataset.array.moveTo(_view.buttons, this.moved, index);
			_view.commit();

		}
	});

	var selectedEndpoint = syra_site.userProfile.dataset.selectedEndpoint;
	for (var ii = 0, jj = items.length; ii < jj; ii++) {
		var item = items[ii];
		if (item && item.$url) {
			var btn = this.list.addButton({
				text: item.title || item.description || "???",
				title: item.description,
				click: function() {
					!this.$isDisabled && exports.onLinkClick(this.dataset);
				},
				dataset: item
			}, item.$hasSeparator && "s-list-primary-bottom-sep");

			var seg = item.urlSeg = syra_url.parse(item.$url, true);
			if (seg.host) {
				//set relative url
				seg.isSyracuse = true;
				seg.uri = seg.uri.slice(seg.uri.indexOf(seg.host) + seg.host.length);
				seg.$url = seg.$url.slice(seg.$url.indexOf(seg.host) + seg.host.length);
				seg.host = null;
			}
			if (syra_url.replaceSegmentEndpoint(seg, selectedEndpoint, true)) {
				item.$url = syra_url.build(seg);
				btn.isBookmarkEnabled = true;
			} else {
				if (seg.endpointSeg && /^(syracuse\/collaboration|x3js\/studio)$/.test(seg.endpointSeg.application + '/' + seg.endpointSeg.contract)) {
					btn.isBookmarkEnabled = true;
				}
			}
			if (seg.isFusion) {
				this.fusion.map[seg.fusionParams.fullCode] = item;
			} else {
				(this.syracuse.map[seg.uri] = this.syracuse.map[seg.uri] || []).push(item);
			}
			syra_url.history.setHref({
				$url: item.$url,
				domItem: btn.link
			});
			this.buttons.push(btn);
		}
	}
	this.slot.insertBefore(this.list.scrollSlot, this.editBtn && this.editBtn.link);

	var isHidden = !items.length;
	if (!this.editBtn) {
		this.editBtn = syra_button.add({
			parent: syra_site,
			slot: this.slot,
			isHidden: isHidden,
			text: syra_local.bookmarks_edit_open,
			css: "s-bookmarks-edit s-list-primary-btn-primary",
			click: function() {
				_view.toggleEdit(!_view.isEditMode);
			}
		});
	}
	syra_button.hide(this.editBtn, isHidden);
	this.popup && this.popup.resize();
	this.validateDisplay();
	this.isEditMode && this.toggleEdit(true);
};


View.prototype.validateDisplay = function() {
	var page = syra_site.getActivePage();
	var found, btnOn;
	if (page && !page.disposed) {
		var urlSeg;
		if (page.isFusionPage) {
			var functionfusion = page.$fusionPageMeta && page.$fusionPageMeta.winModel.getFctName();
			if (functionfusion) {
				urlSeg = {
					isFusion: true,
					fusionParams: {
						fullCode: functionfusion.name,
						functionCode: functionfusion.name,
						transaction: functionfusion.transaction
					}
				};
				if (functionfusion.transaction) {
					urlSeg.fusionParams.fullCode += "~" + functionfusion.transaction;
				}
			}
		} else {
			urlSeg = syra_url.history.getUrlSegment(page.urlSeg.$url);
		}
		found = urlSeg && this.find(urlSeg);
	}
	for (var ii = this.buttons.length - 1; ii >= 0; ii--) {
		var btn = this.buttons[ii];
		btn.bookMarkOn = btn.dataset == found;
		syra_dom.toggleClass(btn.link, "s-selected", btn.bookMarkOn);
		syra_button.disable(btn, !btn.isBookmarkEnabled || ((page && page.isFusionPage) && !btn.dataset.urlSeg.isFusion));
		if (btn.bookMarkOn) {
			btnOn = btn;
		}
	}

	this.addBtn.disableAddBookmarkText = !btnOn && this._getDisableAddBookmarkText(page);
	syra_button.setText(this.addBtn, btnOn ? syra_local.bookmarks_switch_off : syra_local.bookmarks_switch_on);
	btnOn && this.focus(btnOn);
};


View.prototype._getDisableAddBookmarkText = function(page) {
	var text;
	if (this.buttons.length >= syra_config.bookmarksMax) {
		text = syra_local.bookmarks_max_items;
	} else {
		if (page) {
			if (page.isBookmarkDisable) {
				text = syra_local.bookmarks_page_disabled;
			} else
			if (page.$facet == "$edit" && !page.isFusionPage) {
				text = syra_local.bookmarks_facet_disabled;
			}
		}
	}
	return text;
};

View.prototype.toggleEdit = function(isEditMode) {
	this.isEditMode = isEditMode;
	if (isEditMode) {
		for (var ii = 0, jj = _view.buttons.length; ii < jj; ii++) {
			var btn = _view.buttons[ii];
			btn.actions = syra_dom.div("s-list-primary-line-actions", btn.slot);
			btn.link.className = btn.link.className.replace("s-list-primary-btn-default", "s-list-primary-btn-bookmark-edit");
			btn.edit = {
				slot: btn.actions,
				reorder: _view.sortable.setNodeHandle(this.list.addReorder(btn.slot)),
				edit: syra_button.add({
					parent: btn,
					slot: btn.actions,
					text: syra_local.bookmarks_edit_item,
					css: "s-list-primary-line-action",
					iconOnly: true,
					fontIcon: "edit",
					click: function() {
						_editTitle(!this.parent.titleField, this.parent);
					}
				}),
				remove: syra_button.add({
					parent: btn,
					slot: btn.actions,
					text: syra_local.flDelete,
					css: "s-list-primary-line-action",
					iconOnly: true,
					fontIcon: "delete",
					click: this.click_delete
				}),
				separator: syra_button.add({
					parent: btn,
					slot: btn.actions,
					text: btn.dataset.$hasSeparator ? syra_local.bookmarks_delete_separator : syra_local.bookmarks_add_separator,
					css: "s-list-primary-line-action",
					iconOnly: true,
					fontIcon: btn.dataset.$hasSeparator ? "remove_separator" : "add_separator",
					click: this.setSeparator
				})
			};
		}
	} else {
		for (var ii = 0, jj = _view.buttons.length; ii < jj; ii++) {
			var btn = _view.buttons[ii];
			if (btn.edit) {
				syra_dom.remove(btn.edit.reorder);
				syra_dom.remove(btn.edit.slot);
				syra_site.disposeObject(btn.edit);
				delete btn.edit;
				btn.link.className = btn.link.className.replace("s-list-primary-btn-bookmark-edit", "s-list-primary-btn-default");
			}

		}
	}
	syra_button.setText(_view.editBtn, _view.isEditMode ? syra_local.bookmarks_edit_end : syra_local.bookmarks_edit_open);
	_view.popup && _view.popup.resize();
};

View.prototype.deleteItem = function(item) {
	if (item) {
		var index = this.buttons.indexOf(item);
		this.dataset.items.splice(this.dataset.items.indexOf(item.dataset), 1);
		this.commit(this.dataset, Math.min(index, this.buttons.length - 1));
	}
};
View.prototype.click_delete = function() {
	var btn = this;
	var item = btn.parent;
	syra_alert.ask({
		$title: btn.text,
		$message: syra_expression.parse(syra_site, syra_local.bookmarks_delete_confirm, item.dataset),
		yes: function() {
			_view.deleteItem(item);
		}
	});
};
View.prototype.setSeparator = function() {
	var item = this.parent;
	item.dataset.$hasSeparator = !item.dataset.$hasSeparator;
	syra_button.setText(this, item.dataset.$hasSeparator, item.dataset.$hasSeparator ? "remove_separator" : "add_separator");
	syra_dom.toggleClass(item.slot, "s-list-primary-bottom-sep", item.dataset.$hasSeparator);
	_view.commit(_view.dataset, _view.buttons.indexOf(item));
};

View.prototype.focus = function(btn) {
	if (!btn) {
		for (var ii = 0, jj = this.buttons.length; ii < jj; ii++) {
			if (!this.buttons[ii].$isDisabled) {
				btn = this.buttons[ii];
				break;
			}
		}
	}
	if (btn) {
		this.list && this.list.scrollTo(btn.link);
		btn.link.focus();
	}
};
View.prototype.reset = function() {
	if (this.fusion) {
		this.fusion.map = {};
		this.syracuse.map = {};
		if (this.buttons) {
			for (var ii = 0, jj = this.buttons.length; ii < jj; ii++) {
				syra_button.dispose(this.buttons[ii]);
			}
		}
		this.buttons = [];
		this.list && this.list.dispose();
	}
};

View.prototype.dispose = function() {
	this.reset();
	this.sortable && this.sortable.dispose();
	syra_site.disposeObject(this);
};

exports.open = function(picker, success) {
	if (!_view || !_view.slot) {
		_view = new View();
	}
	success && _view.hide(); //ghost Mode
	if (!_view.popup) {
		syra_dom.hide(_view.slot, !!success);
		if (!success) {
			_view.popup = syra_over.openPopup(syra_site, {
				slot: _view.slot,
				picker: picker,
				position: {
					my: "left top",
					at: "left bottom",
					of: picker
				},
				onresize: function(maxHeight) {
					if (_view.addBtn) {
						var btnHeight = _view.addBtn.link.getBoundingClientRect().height;
						_view.list.resize(maxHeight - (2 * btnHeight));
					}
				},
				close: function() {
					setTimeout(function() {
						_view.popup = null;
					}, 200);
				}
			});
		}

		if (!_view.dataset) {
			_view.fetch(success);
		} else {
			_view.validateDisplay();
			success && success();
		}
	} else {
		_view.hide();
	}
};

exports.onLinkClick = function(menuItem) {
	_view && _view.onLinkClick(menuItem);
};

exports.focus = function(btn) {
	_view && _view.focus(btn);
};

exports.dispose = function(btn) {
	_view && _view.dispose();
};

exports.addButton = function(menuItem) {
	var isOn = !!_view.find(menuItem.urlSegment);
	menuItem.bookmarkBtn = syra_button.add({
		parent: menuItem,
		slot: menuItem.slot,
		text: isOn ? syra_local.bookmarks_switch_off : syra_local.bookmarks_switch_on,
		css: "s-sitemap-bookmark",
		iconOnly: true,
		fontIcon: isOn ? "bookmark_on" : "bookmark_off",
		isOn: isOn,
		click: _clickButton
	});
};

function _clickButton() {
	this.isOn = !this.isOn;
	var menuItem = this.parent;
	if (menuItem.urlSegment) {
		if (this.isOn) {
			_view.addItem(menuItem.urlSegment, menuItem.$title, menuItem.$description);
		} else {
			var menuUrl = _view.find(menuItem.urlSegment).$url;
			for (var ii = 0, jj = _view.buttons.length; ii < jj; ii++) {
				if (_view.buttons[ii].dataset && _view.buttons[ii].dataset.$url === menuUrl) {
					_view.deleteItem(_view.buttons[ii]);
					break;
				}
			}
		}
	}
	syra_button.setText(this, this.isOn ? syra_local.bookmarks_switch_off : syra_local.bookmarks_switch_on, this.isOn ? "bookmark_on" : "bookmark_off");
};