"use strict";
var List = require('syracuse-ui/lib/scroll/list').List;

function _endLoad(page, $representation) {
	if ($representation) {
		if ($representation.$diagnoses) {
			syra_alert.error($representation.$diagnoses);
		}

		page.$prototype = $representation.$prototype;
		if ($representation.dataset) {
			page.dataset = $representation.dataset;
		} else {
			page.dataset = {};
			var $keys = Object.keys($representation);
			for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
				if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
					page.dataset[$keys[ii]] = $representation[$keys[ii]];
				}
			}
		}
		page.load();
		if (!page.isBreadCrumb) {
			syra_nav.breadcrumb.page.$representation = {
				$prototype: page.$prototype,
				dataset: page.dataset
			};
			syra_menus.applyChange(syra_site, {
				$links: {
					site_sitemap: {
						$isDisabled: false
					}
				}
			});
		}
		page.resizeItem();
	}
}

exports.page = {
	load: function(page) {
		page.isHighRes = syra_site.layoutSlot.clientWidth >= 1260;
		page.$skin = "s-nav-mega";
		if (page.isBreadCrumb) {
			page.listView = new List({
				emptyText: syra_local.nvpNoModule,
				carousel: true,
				css: "s-list-nav"
			});
			syra_dom.toggleClass(page.listView.scrollSlot, "s-nav-mega-col-select", true);
		} else {
			page.listView = new List({
				more: true,
				css: "s-sitemap-mega-module",
				ul: page.body = syra_site.megaMenusBar
			});
		}

		page.listView.empty();
		page.onNavMenuClick = function() {
			var self = this;
			setTimeout(function() {
				self.hideMegaPopup();
			}, 200);
		};
		//adjustContainerHeight
		page.setMegaPopupHeight = function(listView) {
			var scrollHeight = (syra_site.size.popupMaxHeight * 0.65);
			if (listView.config.carousel) {
				var btnHeight = listView.scrollBar.up.link.clientHeight;
				scrollHeight = scrollHeight - (btnHeight * 2);
				!listView.scrollBar.increment && listView.scrollBar.setIncrement();
				scrollHeight = Math.floor(scrollHeight / listView.scrollBar.increment) * listView.scrollBar.increment + btnHeight * 2;
			}
			this.mainPopup.style.height = this.mainPopup.style.maxHeight = scrollHeight + "px";
		};
		page.hideMegaPopup = function() {
			this.mainPopupDlg && this.mainPopupDlg.close();
		};
		page.showMegaPopup = function(listView, picker) {
			var self = this;
			if (!self.mainPopup) {
				self.mainPopup = syra_dom.div("s-nav-mega-popup");
			}
			syra_dom.empty(self.mainPopup);
			self.mainPopup.appendChild(listView.scrollSlot);
			if (!self.mainPopupDlg) {
				self.mainPopupDlg = syra_over.openPopup(self.page, {
					content: {},
					slot: self.mainPopup,
					autoCloseBoundary: picker,
					autoCloseTimeout: 300,
					picker: picker,
					position: {
						my: "left top",
						at: "left bottom",
						of: picker
					},
					close: function() {
						syra_nav && syra_nav.breadcrumb.onClosePopup();
						self.lastSelected && self.lastSelected.activate(false);
						self.mainPopupDlg = null;
					}
				});

				self.setMegaPopupHeight(listView);
				if (self.isBreadCrumb) {
					listView.resize();
				} else {
					self.mainPopup.style.width = self.mainPopup.style.minWidth = (self.isHighRes ? 1200 : 960) + "px";
					self.mainPopup.style.left = (self.listView.ul.clientWidth - self.mainPopup.clientWidth) / 2 + "px";
					var more = self.listView.more;
					if (more) {
						more._popup && syra_dom.setZIndex(more._popup.overSlot, false, syra_dom.setZIndex(self.mainPopup, true) + 1);
					}
				}
			}
		};
		page.resizeItem = function() {
			if (this.areModulesLoaded) {
				this.listView && this.listView.resize();

				if (this.mainPopup && this.lastSelected) {
					this.setMegaPopupHeight(this.lastSelected.listView);
				}
				var lastSelected = this.lastSelected;
				while (lastSelected) {
					lastSelected.listView.resize();
					lastSelected = lastSelected.lastSelected;
				}
			}
		};
		if (page.$representation) {
			_endLoad(page, page.$representation);
		} else {
			syra_router.loadRepresentation({
				article: syra_site,
				segments: syra_config.$sitemapUrl,
				success: function($itemPage) {
					_endLoad(page, $itemPage && $itemPage.$representation);
				}
			});
		}
	},
	autoCloseBoundary: function() {
		return this.listView.ul;
	},
	dispose: function(page) {
		page.listView.empty();
		if (!page.isBreadCrumb) {
			syra_nav.megaMenus = null;
		}
	}
};

exports.module = {
	create: function(module) {
		if (module.page.isBreadCrumb) {
			syra_dom.toggleClass(module.title, "s-nav-mega-group-item", true);
		}
		module.listView = new List({
			emptyText: syra_local.nvpNoSubModule,
			carousel: true,
			css: "s-list-nav"
		});
		syra_dom.toggleClass(module.listView.scrollSlot, "s-nav-mega-col-select", true);
		module.addChildren();
	},
	activate: function(on, module) {
		if (on) {
			if (module.page.isBreadCrumb) {
				module.page.mainPopup.appendChild(module.listView.scrollSlot);
			} else {
				module.page.showMegaPopup(module.listView, module.page.listView.ul);
			}
			module.listView.resize();
		} else {
			syra_dom.empty(module.listView.scrollSlot.parentNode);
		}
	}
};

exports.subModule = {
	create: function(sub) {
		(sub.title = sub.navParent.listView.addAnchor()).textContent = sub.dataset.title;
		syra_dom.toggleClass(sub.title, "s-nav-mega-group-item", true);
		sub.slot = sub.title.parentNode;
		sub.listView = new List(this._useLargeMode(sub.dataset.items) ? {
			emptyText: syra_local.nvpNoMenuItem,
			useColSelect: true,
			carousel: true,
			css: "s-list-nav"
		} : {
			emptyText: syra_local.nvpNoMenuItem,
			autoColumns: sub.page.isHighRes ? 3 : 2,
			scroll: true,
			css: "s-sitemap-mega-item"
		});
		sub.addChildren(sub.dataset.items);
	},
	_useLargeMode: function(items, isLastLevel) {
		var count = 0;
		if (items) {
			for (var ii = 0, jj = items.length; ii < jj; ii++) {
				if (items[ii].menuBlock) {
					count++;
					if (isLastLevel) {
						return true;
					} else {
						return this._useLargeMode(items[ii].menuBlock.items, true);
					}
				}
			}
		}
		return count > 6;
	},
	activate: function(on, block) {
		if (block) {
			if (on) {
				if (block.listView.config.useColSelect) {
					syra_dom.toggleClass(block.listView.scrollSlot, "s-nav-mega-col-select", true);
					block.page.mainPopup.appendChild(block.mainPopupSlot = block.listView.scrollSlot);
				} else {
					if (!block.mainPopupSlot) {
						block.mainPopupSlot = syra_dom.div("s-nav-mega-col-detail");
						block.mainPopupSlot.appendChild(block.listView.scrollSlot);
					}
					var width = 0;
					for (var ii = 0, jj = block.page.mainPopup.childNodes.length; ii < jj; ii++) {
						width += block.page.mainPopup.childNodes[ii].clientWidth;
					}
					block.mainPopupSlot.style.width = (block.page.mainPopup.clientWidth - width - 16) + "px";
					block.page.mainPopup.appendChild(block.mainPopupSlot);
				}
				block.navParent.lastSelected = block;
				block.listView.resize();
			} else {
				if (block.mainPopupSlot && block.mainPopupSlot.parentNode) {
					while (block.page.mainPopup.lastChild != block.mainPopupSlot) {
						syra_dom.remove(block.page.mainPopup.lastChild);
					}
					syra_dom.remove(block.mainPopupSlot);
				}
			}
			syra_dom.toggleClass(block.title, "s-selected", on);
			syra_dom.toggleClass(block.title.parentNode, "s-selected", on);
		}
	}
};

exports.menuBlock = {
	create: function(block) {
		var parentListView = block.navParent.listView;
		var useColSelect = parentListView.config.useColSelect;
		(block.title = parentListView.addAnchor(parentListView.css + (useColSelect ? "-btn-default" : "-btn-block"))).textContent = block.dataset.title;
		block.listView = new List(useColSelect ? {
			emptyText: syra_local.nvpNoMenuItem,
			autoColumns: block.page.isHighRes ? 2 : 1,
			scroll: true,
			css: "s-sitemap-mega-item"
		} : {
			emptyText: syra_local.nvpNoMenuItem,
			parentNode: block.title.parentNode,
			css: "s-sitemap-mega-item",
			scroll: block.page.isBreadCrumb
		});

		if (useColSelect) {
			syra_dom.toggleClass(block.title, "s-nav-mega-group-item", true);
			block.activate = function(on) {
				this.submodule.activate(on, this);
			};
		}
		block.domItem = block.slot = block.title.parentNode;
		block.domItem.syrainout = block.id;
	}
};