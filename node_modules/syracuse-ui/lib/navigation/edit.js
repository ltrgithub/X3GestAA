"use strict";
var _helpers = require('syracuse-core').helpers;
var List = require('syracuse-ui/lib/scroll/list').List;
var _cols, _page, _groupBuilder, _itemBuilder;

function Column(level, skin) {
	this.level = level;
	this.slot = syra_dom.div("s-sitemap-edit-col-slot", _page.body);
	this.header = syra_dom.div("s-list-nav-header", this.slot);
	this.title = syra_dom.text("s-list-nav-title", syra_local["nav_edit_" + level], this.header);
	this.actions = syra_dom.div("s-list-nav-actions", this.header);

	this.tieListView = function(listView, tie) {
		if (tie) {
			this.listView = listView;
			this.slot.appendChild(listView.scrollSlot);
			this.resize();
		} else {
			if (this.listView == listView) {
				delete this.listView;
				syra_dom.remove(listView.scrollSlot);
			}
		}
	};
	this.resize = function(height) {
		if (height != undefined) {
			this.height = height;
		}
		if (this.listView && this.height != undefined) {
			this.listView.scrollSlot.style.height = this.height + "px";
			this.listView.resize(this.height);
		}
	};
	this.disable = function(disabled) {
		if (this.disabled != disabled) {
			this.disabled = disabled;
			for (var ii = 0, jj = this.buttons.length; ii < jj; ii++) {
				syra_button.disable(this.buttons[ii], disabled);
			}
			if (this.disabled) {
				this.resize(); //avoid scrollbar
			}
		}
	};
	this.getSortable = function() {
		return {
			handle: this.level,
			start: function(node) {
				this.moved = syra_item.findItem(node);
				if (this.moved.level == "modules" || this.moved.level == "submodules") {
					var lastSelected = (this.moved.level == "modules") ? _page.lastSelected : _page.lastSelected.lastSelected;
					if (this.moved !== lastSelected) {
						this.moved.activate(true);
					}
				}
			},
			setDraggingText: function(node) {
				return this.moved.dataset.title;
			},
			end: function(node) {
				var moved = this.moved;
				delete this.moved;
				var index = syra_dom.getNodeIndex(node);
				var navParent = moved.navParent;
				var items, articleParent;
				switch (moved.level) {
					case "modules":
					case "submodules":
						syra_dataset.array.moveTo(navParent.dataset[moved.level], moved.dataset, index);
						syra_dataset.array.moveTo(navParent.children, moved, index);
						items = syra_dataset.delta.array.$uuids(moved.articleParent.dataset[this.handle]);
						articleParent = moved.articleParent;
						break;
					case "items":
						navParent.dataset.items.splice(navParent.dataset.items.indexOf(moved.variant_dataset), 1);
						navParent.children.splice(navParent.children.indexOf(moved), 1);

						navParent = syra_item.findItem(moved.slot.parentNode);
						navParent.dataset.items.splice(index, 0, moved.variant_dataset);
						navParent.children.splice(index, 0, moved);
						articleParent = moved.submodule;
						items = articleParent.dataset.items;
						break;
				}
				var sending = {
					$uuid: articleParent.dataset.$uuid,
					$etag: 1
				};
				sending[moved.level] = items;
				syra_ajax.put({
					lock: true,
					page: _page,
					url: syra_expression.parse(articleParent, articleParent.dataset.$url || articleParent.$prototype.$url),
					data: sending,
					success: function(newData, response, requestUrl) {
						if (!_page.disposed) {
							syra_dataset.applyDelta(_page, articleParent.dataset, newData);
							if (newData.$diagnoses) {
								syra_alert.show(newData.$diagnoses, articleParent);
							}
							moved.activate(true);
						}
					}
				});
			}
		};
	};
}


function GroupBuilder() {

	function _create() {
		var btn = this;
		var articleParent = btn.level == "modules" ? _page : _page.lastSelected;
		syra_over.openModal(_page, {
			article: _page,
			$url: syra_expression.parse(articleParent, btn.$create.$url),
			$method: btn.$create.$method,
			onServerSaved: function(menuItem, modal) {
				if (!articleParent.dataset[btn.level]) {
					articleParent.dataset[btn.level] = [];
				}
				articleParent.dataset[btn.level].push(modal.page.dataset);
				articleParent.addChild(modal.page.dataset).activate(true);
				modal.close(true);
				return false;
			}
		});
	}

	function _select() {
		var btn = this;
		var articleParent = btn.level == "modules" ? _page : _page.lastSelected;
		var record = record = btn.record || articleParent;
		syra_over.openModal(_page, {
			article: _page,
			$url: syra_expression.parse(articleParent, btn.$select.$url, record.dataset),
			onValidate: function() {
				var selected = this.selected;
				if (selected && selected.length) {
					var delta = syra_dataset.delta.array.add(record.dataset[btn.level], selected);
					if (delta.length > 0) {
						var sending = {
							$uuid: articleParent.dataset.$uuid,
							$etag: 1
						};
						sending[btn.level] = delta;
						syra_ajax.put({
							lock: true,
							page: _page,
							url: syra_expression.parse(articleParent, articleParent.dataset.$url || articleParent.$prototype.$url),
							data: sending,
							success: function(newData, response, requestUrl) {
								if (!_page.disposed) {
									syra_dataset.applyDelta(_page, articleParent.dataset, newData);
									if (newData.$diagnoses) {
										syra_alert.show(newData.$diagnoses, articleParent);
									}
									var children = record.dataset[btn.level];
									if (children) {
										var child;
										for (var ii = 0, jj = selected.length; ii < jj; ii++) {
											child = syra_dataset.array.find(children, selected[ii].$uuid);
											if (child) {
												child = articleParent.addChild(child, record);
											}
										}
										child && child.activate(true);
									}
								}
							}
						});
					}
				}
			},
			onSelectRecord: function(selected) {
				this.selected = [];
				var $uuids = Object.keys(selected);
				for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
					this.selected.push(selected[$uuids[ii]].dataset);
				}
				return false;
			}
		});
	}

	function _edit() {
		var btn = this;
		var record = btn.parent;
		var articleParent = record.articleParent;
		record.activate(true);
		syra_over.openModal(_page, {
			article: _page,
			$url: syra_expression.parse(record, btn.$edit.$url),
			$method: btn.$edit.$method,
			onServerSaved: function(menuItem, modal) {
				var newData = modal.page.dataset;
				syra_dataset.applyDelta(_page, record.dataset, newData);
				if (newData.$diagnoses) {
					syra_alert.show(newData.$diagnoses, record);
				}
				record.title.textContent = record.dataset.title;
				record.slot.title = "";
				if (record.dataset.description && record.dataset.description != record.dataset.title) {
					record.slot.title = record.dataset.description;
				}
				record.activate(true);
				modal.close(true);
				return false;
			}
		});
	}

	function _delete() {
		var btn = this;
		var record = btn.parent;
		var navParent = record.navParent;
		var recordIndex = navParent.children.indexOf(record);
		record.activate(true);
		syra_alert.ask({
			$title: btn.text,
			$message: syra_expression.parse(record, syra_local["nav_edit_confirm_delete_" + btn.level]),
			yes: function() {
				var sending = {
					$uuid: navParent.dataset.$uuid,
					$etag: 1
				};
				sending[btn.level] = [{
					$index: recordIndex,
					$isDeleted: true,
					$uuid: record.dataset.$uuid
				}];
				syra_ajax.put({
					lock: true,
					page: _page,
					url: syra_expression.parse(navParent, navParent.dataset.$url || navParent.$prototype.$url),
					data: sending,
					success: function(newData, response, requestUrl) {
						if (!_page.disposed) {
							syra_dataset.applyDelta(_page, navParent.dataset, newData);
							if (newData.$diagnoses) {
								syra_alert.show(newData.$diagnoses, navParent);
							}
							if (navParent.lastSelected == record) {
								record.activate(false);
							}
							navParent.listView.remove(record.slot);
							navParent.children.splice(navParent.children.indexOf(record), 1);
							_page.disposeChild(record);
							if (navParent.children.length) {
								if (navParent.lastSelected == record || !navParent.lastSelected) {
									delete navParent.lastSelected;
									record = navParent.children[Math.min(recordIndex, navParent.children.length - 1)];
									record.activate(true);
								}
							} else {
								navParent.activate(true);
							}
						}
					}
				});
			}
		});
	}

	this.addColumn = function(level, $group) {
		var col = _cols[level] = new Column(level);
		var $links = $group.$links;
		if ($links) {
			$links.$create &&
				syra_button.add({
					parent: col,
					slot: col.actions,
					text: $links.$create.$title,
					css: "s-list-nav-action",
					$create: $links.$create,
					level: level,
					fontIcon: "create",
					click: _create
				});
			$links.$select &&
				syra_button.add({
					parent: col,
					slot: col.actions,
					css: "s-list-nav-action",
					$select: $links.$select,
					text: $links.$select.$title,
					level: level,
					fontIcon: "select",
					click: _select
				});
			col.$recordActions = {
				$edit: $group.$item.$links && $group.$item.$links.$edit,
				$delete: $group.$capabilities && $group.$capabilities.indexOf("delete") >= 0
			};
		}
		col.addRecordActions = function(record, level) {
			var actions = syra_dom.div("s-list-nav-line-actions", record.slot);
			if (this.$recordActions.$edit) {
				syra_button.add({
					parent: record,
					slot: actions,
					text: this.$recordActions.$edit.$title,
					css: "s-list-nav-line-action",
					$edit: this.$recordActions.$edit,
					fontIcon: "edit",
					iconOnly: true,
					level: this.level,
					click: _edit
				});
			}
			if (this.$recordActions.$delete) {
				syra_button.add({
					parent: record,
					slot: actions,
					text: syra_local.flDelete,
					fontIcon: "delete",
					css: "s-list-nav-line-action",
					iconOnly: true,
					level: this.level,
					click: _delete
				});
			}
		};
	};
}

function ItemBuilder() {
	function _createBlock() {
		var btn = this;
		var submodule = _page.lastSelected.lastSelected;
		var record = btn.record || submodule;
		record.dataset.items.push({
			menuBlock: {
				$uuid: _helpers.uuid.generate(),
				title: syra_local.nav_edit_edit_block
			}
		});
		syra_ajax.put({
			lock: true,
			page: _page,
			url: syra_expression.parse(submodule, submodule.dataset.$url || submodule.$prototype.$url),
			data: {
				$uuid: submodule.dataset.$uuid,
				$etag: 1,
				items: submodule.dataset.items
			},
			success: function(newData, response, requestUrl) {
				if (!_page.disposed) {
					syra_dataset.applyDelta(_page, submodule.dataset, newData);
					if (newData.$diagnoses) {
						syra_alert.show(newData.$diagnoses, submodule);
					}
					var child = submodule.addChild(record.dataset.items[record.dataset.items.length - 1], record);
					child.activate(true);
				}
			}
		});
	}

	function _selectItem(btn) {
		var btn = this;
		var submodule = _page.lastSelected.lastSelected;
		var record = btn.record || submodule;
		syra_over.openModal(_page, {
			article: _page,
			$url: syra_expression.parse(submodule, btn.$select.$url, record.dataset),
			onValidate: function() {
				var selected = this.selected;
				if (selected && selected.length) {
					var delta = syra_dataset.delta.array.add(record.dataset.items, selected);
					if (delta.length > 0) {
						var sending = {
							$uuid: submodule.dataset.$uuid,
							$etag: 1
						};
						if (record == submodule) {
							sending.items = delta;
						} else {
							//send all the article dataset. use for level == "items" for menublock(record) and submodule(article)
							record.dataset.items = delta;
							sending.items = submodule.dataset.items;
						}
						syra_ajax.put({
							lock: true,
							page: _page,
							url: syra_expression.parse(submodule, submodule.dataset.$url || submodule.$prototype.$url),
							data: sending,
							success: function(newData, response, requestUrl) {
								if (!_page.disposed) {
									syra_dataset.applyDelta(_page, submodule.dataset, newData);
									if (newData.$diagnoses) {
										syra_alert.show(newData.$diagnoses, submodule);
									}
									var children = record.dataset.items;
									if (children) {
										var child;
										for (var ii = 0, jj = selected.length; ii < jj; ii++) {
											child = syra_dataset.array.find(children, selected[ii].menuItem.$uuid, "menuItem");
											if (child) {
												child = submodule.addChild(child, record);
											}
										}
										child && child.activate(true);
									}
								}
							}
						});
					}
				}
			},
			onSelectRecord: function(selected) {
				this.selected = [];
				var $uuids = Object.keys(selected);
				for (var ii = 0, jj = $uuids.length; ii < jj; ii++) {
					this.selected.push({
						menuItem: selected[$uuids[ii]].dataset
					});
				}
				return false;
			}
		});
	}

	function _saveTitle(block) {
		var subModule = block.submodule;
		block.dataset.title = block.titleField.textContent;
		syra_ajax.put({
			lock: true,
			page: _page,
			url: syra_expression.parse(subModule, subModule.dataset.$url || subModule.$prototype.$url),
			data: {
				$uuid: subModule.dataset.$uuid,
				$etag: 1,
				items: subModule.dataset.items
			},
			success: function(newData, response, requestUrl) {
				if (!_page.disposed) {
					syra_dataset.applyDelta(_page, subModule.dataset, newData);
					if (newData.$diagnoses) {
						syra_alert.show(newData.$diagnoses, subModule);
					}
					block.titleField.textContent = block.dataset.title;
					_editTitle(false, block);
					block.activate(true);
				}
			}
		});
	}

	function _editTitle(edit, item) {
		if (edit) {
			if (!item.editable) {
				item.titleField.setAttribute("contenteditable", "true");
				item.titleField.className = "s-nav-edit-block-title  s-contenteditable";

				item.onFieldInputEvent = function(event) {
					switch (event.type) {
						case "focusin":
						case "focusout":
							var focusin = event.type == "focusin";
							if (!focusin) {
								if (this.titleField.textContent != this.dataset.title) {
									item.applyShortCut({
										enter: true
									});
								}
							}
							syra_dom.toggleClass(this.titleField, "s-focus", focusin);
							if (!focusin) {
								this.titleField.removeAttribute("contenteditable");
								this.titleField.className = "s-nav-edit-block-title";
							}
							break;
					}
				};
				item.applyEscape = function() {
					item.titleField.textContent = item.dataset.title;
					_editTitle(false, this);
				};
				item.isField = true; // for findField
				item.$item = item.$item || {}; // field have always $item
				item.editable = true;
				item.applyShortCut = function(shortcuts) {
					if (shortcuts.enter) {
						if (this.titleField.textContent) {
							_saveTitle(this);
						} else {
							this.titleField.textContent = syra_local.nav_edit_edit_block;
						}
						return true;
					}
				};
				item.titleField.focus();
			}
		} else {
			delete item.editable;
			item.titleField.removeAttribute("contenteditable");
			item.titleField.className = "s-nav-edit-block-title";
			item.onFieldInputEvent = item.applyEscape = null;
		}
	}

	function _localizeTitle() {
		var btn = this;
		var block = this.parent;
		syra_localizer.onMenuClick({
			scope: {
				page: block.page,
				articleParent: block,
				getValue: function() {
					return block.titleField.textContent;
				},
				onLocalizeField: function(newData, response, $url) {
					syra_dataset.applyDelta(_page, block.submodule.dataset, newData);
					if (newData.$diagnoses) {
						syra_alert.show(newData.$diagnoses, block.submodule);
					}
					block.titleField.textContent = block.dataset.title;
				}
			},
			menu: this.$localize
		});
	}

	function _deleteItem() {
		var btn = this;
		var record = btn.parent;
		var submodule = record.submodule;
		var navParent = record.navParent;
		syra_alert.ask({
			$title: btn.text,
			$message: syra_expression.parse(record, syra_local["nav_edit_confirm_delete_" + btn.variant]),
			yes: function() {
				for (var ii = 0, jj = navParent.dataset.items.length; ii < jj; ii++) {
					var menuUuid = null;
					if (navParent.dataset.items[ii].menuItem) {
						menuUuid = navParent.dataset.items[ii].menuItem.$uuid;
					} else if (navParent.dataset.items[ii].menuBlock) {
						menuUuid = navParent.dataset.items[ii].menuBlock.$uuid;
					}
					if (menuUuid && menuUuid === record.dataset.$uuid) {
						navParent.dataset.items.splice(ii, 1);
						break;
					}
				}
				syra_ajax.put({
					lock: true,
					page: _page,
					url: syra_expression.parse(submodule, submodule.dataset.$url || submodule.$prototype.$url),
					data: {
						$uuid: submodule.dataset.$uuid,
						$etag: 1,
						items: submodule.dataset.items
					},
					success: function(newData, response, requestUrl) {
						if (!_page.disposed) {
							syra_dataset.applyDelta(_page, submodule.dataset, newData);
							if (newData.$diagnoses) {
								syra_alert.show(newData.$diagnoses, submodule);
							}
							if (submodule.lastSelected == record) {
								record.activate(false);
							}
							var index = navParent.children.indexOf(record);
							navParent.listView.remove(record.slot);
							navParent.children.splice(navParent.children.indexOf(record), 1);
							_page.disposeChild(record);
							if (navParent.children.length) {
								if (submodule.lastSelected == record) {
									delete submodule.lastSelected;
									record = navParent.children[Math.min(index, navParent.children.length - 1)];
									record.activate(true);
								}
							} else {
								submodule.activate(true);
							}
						}
					},
					error: function(newData) {
						var data = newData && newData.data && ((typeof newData.data === 'object') ? newData.data : JSON.parse(newData.data));
						if (data) {
							navParent.dataset.items = data.items;
							syra_alert.error(data.$diagnoses);
						}
					}
				});
			}
		});
	}

	function _clickExpand(event) {
		var block = this.parent;
		block.dataset.isExpanded = !(block.dataset.isExpanded !== false);
		var children = event.shiftKey ? block.navParent.children : [block];
		for (var ii = 0, jj = children.length; ii < jj; ii++) {
			var child = children[ii];
			if (!child.isMenuItem) {
				child.dataset.isExpanded = block.dataset.isExpanded;
				var expanded = child.dataset.isExpanded;
				syra_dom.hide(child.listView.scrollSlot, !expanded);
				syra_button.setText(child.titleBtn, undefined, expanded ? "node_expanded" : "node_collapsed");
				child.titleBtn.link.syraTipTitle = expanded ? syra_local.nvpCollapseSubModule : syra_local.nvpExpandSubModule;
			}
		}
		_cols.items.resize();
	}
	this.addColumn = function(submodules) {
		var col = _cols.items = new Column("items");
		col.slot.className += " s-sitemap-edit-col-item-slot";
		var $items = submodules.$item.$properties.items;
		var $links = $items.$links;
		var menuBlock = $items.$item.$variants.menuBlock;
		if (menuBlock.$capabilities && menuBlock.$capabilities.indexOf("append") >= 0) {
			syra_button.add({
				parent: col,
				slot: col.actions,
				css: "s-list-nav-action",
				$create: $links.$creat,
				text: syra_local.nav_edit_new_block,
				fontIcon: "create",
				click: _createBlock
			});
		}
		var $select = $links.$select && $links.$select.$variants && $links.$select.$variants.menuItem;
		$select &&
			syra_button.add({
				parent: col,
				slot: col.actions,
				css: "s-list-nav-action",
				$select: $select,
				text: $select.$title,
				fontIcon: "select",
				click: _selectItem
			});

		var menuItem = $items.$item.$variants.menuItem;
		col.$recordActions = {
			menuBlock: {
				$create: menuBlock.$capabilities && menuBlock.$capabilities.indexOf("append") >= 0,
				$select: $select,
				$delete: menuBlock.$capabilities && menuBlock.$capabilities.indexOf("delete") >= 0,
				$localize: menuBlock.$item.$properties.title.$links.$localize
			},
			menuItem: {
				$delete: menuItem.$capabilities && menuItem.$capabilities.indexOf("delete") >= 0
			}
		};
	};
	this.createItem = function(item, variant) {
		item.level = "items";
		if (variant == "menuBlock") {
			item.articleParent = item.navParent;
			item.titleBtn = item.navParent.listView.addButton({
				parent: item,
				text: syra_local.nvpCollapseSubModule,
				css: "s-sitemap-edit-expand",
				fontIcon: "node_expanded",
				iconOnly: true,
				click: _clickExpand
			});
			item.domItem = item.slot = item.titleBtn.slot;
			item.navParent.listView.addReorder(item.slot, "items");
			item.slot.syraItem = item.id;
			item.titleField = syra_dom.text("s-sitemap-edit-item-btn-block", item.dataset.title, item.slot);
			item.titleField.syraOnClick = "onClick";
			item.titleField.syraItem = item.id;
			item.onClick = function(event) {
				_editTitle(true, this);
			};
			var actions = syra_dom.div("s-sitemap-edit-actions", item.slot);
			var $actions = _cols.items.$recordActions.menuBlock;
			if ($actions.$create) {
				syra_button.add({
					parent: item,
					slot: actions,
					css: "s-sitemap-edit-action",
					$create: $actions.$create,
					text: syra_local.nav_edit_new_block,
					iconOnly: true,
					record: item,
					fontIcon: "create",
					click: _createBlock
				});
			}
			if ($actions.$select) {
				syra_button.add({
					parent: item,
					slot: actions,
					css: "s-sitemap-edit-action",
					$select: $actions.$select,
					iconOnly: true,
					record: item,
					text: $actions.$select.$title,
					fontIcon: "select",
					click: _selectItem
				});
			}
			syra_button.add({
				parent: item,
				slot: actions,
				$localize: $actions.$localize,
				text: $actions.$localize.$title,
				css: "s-sitemap-edit-action",
				fontIcon: "localize",
				iconOnly: true,
				record: item,
				click: _localizeTitle
			});
			if ($actions.$delete) {
				syra_button.add({
					parent: item,
					slot: actions,
					text: syra_local.flDelete,
					css: "s-sitemap-edit-action",
					iconOnly: true,
					variant: variant,
					fontIcon: "delete",
					click: _deleteItem
				});
			}
			item.listView = new List({
				parentNode: item.slot,
				emptyText: syra_local.nvpNoMenuItem,
				css: "s-sitemap-edit-item"
			});
		} else {
			item.navParent.listView.addReorder(item.domItem.parentNode, "items");
			if (_cols.items.$recordActions.menuItem.$delete) {
				syra_button.add({
					parent: item,
					slot: item.slot,
					text: syra_local.flDelete,
					css: "s-sitemap-edit-action",
					iconOnly: true,
					variant: variant,
					fontIcon: "delete",
					click: _deleteItem
				});
			}
		}
	}
}

exports.page = {
	draw: function(page, $representation) {
		syra_nav.showMegaMenus(false);
		_page = page;
		page.activateOnOverDisabled = true;
		page.isBackButtonDisabled = true;
		page.isMenuBarDisabled = true;
		page.mainPageDesignerAccess = "disabled";
		page.isAutoInsertFieldDisabled = true;

		page.$prototype = $representation.$prototype;
		page.dataset = {};
		var $keys = Object.keys($representation);
		for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
			if ($keys[ii] != "$prototype" && $keys[ii] != "$article") {
				page.dataset[$keys[ii]] = $representation[$keys[ii]];
			}
		}
		page.$skin = "s-nav-edit";
		page.domItem = syra_dom.article("s-page");
		page.domItem.syraPage = page.domItem.syraItem = page.id;
		page.diagnoseSlot = syra_dom.div("", page.domItem);
		page.header = syra_dom.header("s-page-head", page.domItem);

		page.domTitle = syra_dom.div("s-page-title", page.header);
		page.domTitle.syraItem = page.id;
		page.setTitle(page.$prototype.$title);

		page.body = syra_dom.div("s-page-body", page.domItem);
		_cols = [];
		_groupBuilder = new GroupBuilder();
		var modules = _page.$prototype.$properties.modules;
		_groupBuilder.addColumn("modules", modules);
		_page.listView = new List({
			emptyText: syra_local.nvpNoModule,
			scroll: true,
			css: "s-list-nav",
			sortable: _cols.modules.getSortable()
		});
		_cols.modules.tieListView(_page.listView, true);

		var submodules = modules.$item.$properties.submodules;
		_groupBuilder.addColumn("submodules", submodules);

		_itemBuilder = new ItemBuilder(submodules);
		_itemBuilder.addColumn(submodules);

		page.resizeItem = function() {
			if (_page) { //resizeItem is called in dispose by showMegaMenus	
				if (!this.isMapLoaded) {
					this.isMapLoaded = true;
					if (this.children.length) {
						this.children[0].activate(true);
					}
				}
				if (this.isMapLoaded) {
					delete this.size;
					this.getPageSize();
					this.body.style.height = (this.size.height - this.size.headerHeight - this.diagnoseSlot.clientHeight) + "px";
					_cols.items.slot.style.maxWidth = (this.body.clientWidth - _cols.modules.slot.clientWidth - _cols.submodules.slot.clientWidth) + "px";

					var height = _cols.modules.slot.clientHeight - _cols.modules.header.clientHeight;
					_cols.modules.resize(height);
					_cols.submodules.resize(height);
					_cols.items.resize(height);
				}
			}
		};
		syra_menus.applyChange(syra_site, {
			$links: {
				site_sitemap: {
					$isDisabled: false
				}
			}
		});

		page.layoutSlot.appendChild(page.domItem);
	},
	dispose: function() {
		if (_cols) {
			syra_site.disposeObject(_cols.modules);
			syra_site.disposeObject(_cols.submodules);
			syra_site.disposeObject(_cols.items);
			_cols = null;
		}
		_groupBuilder = _itemBuilder = _page = null;
		syra_nav.showMegaMenus(true);
	}
};

exports.module = {
	create: function(module) {
		module.level = "modules";
		module.title.className = "s-list-nav-btn-edit";
		module.navParent.listView.addReorder(module.slot, "modules");
		_cols.modules.addRecordActions(module);
	},
	activate: function(on, module) {
		if (on) {
			if (!module.listView) {
				module.listView = new List({
					emptyText: syra_local.nvpNoSubModule,
					scroll: true,
					css: "s-list-nav",
					sortable: _cols.submodules.getSortable()
				});
				module.addChildren();
			}
			_cols.submodules.tieListView(module.listView, true);
			_cols.items.disable(!!module.noChild);
			module.navParent.listView.scrollTo(module.slot);
		} else {
			_cols.submodules.tieListView(module.listView, false);
			module.lastSelected && _cols.items.tieListView(module.lastSelected.listView, false);
		}
	}
};

exports.subModule = {
	create: function(sub) {
		sub.level = "submodules";
		(sub.title = sub.navParent.listView.addAnchor("s-list-nav-btn-edit")).textContent = sub.dataset.title;
		sub.slot = sub.title.parentNode;
		sub.navParent.listView.addReorder(sub.slot, "submodules");
		_cols.submodules.addRecordActions(sub);
		sub.listView = new List({
			emptyText: syra_local.nvpNoMenuItem,
			scroll: true,
			css: "s-sitemap-edit-item",
			sortable: _cols.items.getSortable()
		});
		sub.listView.ul.syraItem = sub.id; //!! important for sortable to find articleParent
		sub.addChildren(sub.dataset.items);
	},
	activate: function(on, block) {
		if (on) {
			_cols.items.tieListView(block.listView, true);
			block.navParent.lastSelected = block;
			_cols.items.disable(false);
			//_cols.items.resize();
			block.navParent.listView.scrollTo(block.slot);
		} else {
			_cols.items.tieListView(block.listView, false);
		}
		syra_dom.toggleClass(block.title, "s-selected", on);
		syra_dom.toggleClass(block.slot, "s-selected", on);
	}
};

exports.menuBlock = {
	create: function(item) {
		_itemBuilder.createItem(item, "menuBlock");
	},
	activate: function(on, item) {
		on && item.navParent.listView.scrollTo(item.slot);
	}
};

exports.menuItem = {
	create: function(item) {
		_itemBuilder.createItem(item, "menuItem");
	},
	activate: function(on, item) {
		on && item.navParent.listView.scrollTo(item.slot);
	}
};