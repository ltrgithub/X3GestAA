"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ReferenceField = require('syracuse-ui/lib/field/referenceField').ReferenceField;

function BookmarkMenuItem(){
}

exports.BookmarkMenuItem = helpers.defineClass(BookmarkMenuItem, ReferenceField, {
    dispose: function(){
        this.bookmarkPicker = null;
        ReferenceField.prototype.dispose.call(this);
    },
    loadBox: function(){
        this.$item.$isMenusHidden = true;
        this.$item.$skin = "s-nav-admin-menu";
        ReferenceField.prototype.loadBox.call(this);
        this.onReorderItem(this.articleParent);
        this.articleParent.domItem.className += " " + this.$item.$skin + "-item";
        this.setLevel();
    },
    _createMenusBox: function(){
        this.menusBox = this.page.loadNewItem(this.fieldValue, {
            $isMenusBag: true,
            $category: "menus",
            $clientId: this.id + "menus",
            $noText: true,
            $skin: this.list.$skinRecordMenusLink,
            $layout: {
                $items: [{
                    $skin: this.$skinMenus + "-link",
                    $bind: this.id + "menus" + "-" + "$details",
                    $category: "link",
                    $icon: {
                        $mode: "icon",
                        $value: "details",
                        $path: "list/s-list-"
                    }
                }]
            }
        }, this.articleParent);
        this.menusBox.contextField = this;
    },
    setLevel: function(level){
        if (this.level) {
            document.site.toggleClass(this.domItem, this.level, false);
        }
        document.site.toggleClass(this.domItem, this.level = level || this.articleParent.level, true);
    },
    onReorderItem: function(record){
    
    },
    onItemEnterLeave: function(event, record){
        if (record) {
            this.page.ensureReorderAndMenusVisibility(record, event);
            this.page.ensureReorderAndMenusVisibility(this, event);
            if (this.bookmarkPicker && !this.isBookmark) {
                this.bookmarkPicker.style.visibility = (event.type == "mouseenter") ? "visible" : "";
            }
        }
        ReferenceField.prototype.onItemEnterLeave.call(this, event);
    },
    _createValueContainer: function(){
        this.fieldValue = this._core = this._dataValue = this.domValueSlot = this.domItem;
    },
    render: function(){
        this.codeMenu = this.page.loadNewItem(this.fieldValue, {
            $isDescriptionVisible: false,
            $subRecordKey: this.$item.$bind,
            $css: this.$item.$css,
            $category: "link",
            $skin: this.$skin + "-link"
        }, this.boxParent);
        
        this.setDescription(this.$item.$description || this.$field.$item.$description);
        if (this.currentValue) {
            this._renderCurrentValue();
        }
    },
    _renderCurrentValue: function(){
        if (this.codeMenu) {
            if (this.$rootLinks.$links && this.$rootLinks.$links.$details) {
                this.setMenus({
                    $links: {
                        $details: {
                            $title: this.currentValue.$value || "",
                            $description: this.currentValue.$title || ""
                        }
                    }
                });
            }
            var value = this.getDatasetValue();
            if (value) {
                if (value.$isSeparator) {
                    this.codeMenu.isBookmarkMenuItem = true;
                    value.$title = "-";
                    this.codeMenu.setMenu(value, this.currentValue, this.currentValue);
                    if (this.articleParent.reorderPicker) {
                        this.fieldValue.parentNode.insertBefore(this.articleParent.reorderPicker, this.fieldValue);
                    }
                    if (this.articleParent.menusSlot) {
                        this.articleParent.menusSlot.className = "s-nav-menu-menus";
                        this.page.ensureReorderAndMenusVisibility(this.articleParent);
                        this.fieldValue.parentNode.appendChild(this.articleParent.menusSlot);
                    }
                }
                if (value.$url) {
                    value.$title = value.$title || this.currentValue.$value || "";
                    if (value.convergenceFunction) {
                        value.$description = this.page.localize.navigPageFunction + ": " + value.convergenceFunction;
                    }
                    else {
                        if (value.entity) {
                            value.$description = this.page.localize.navigPageEntity + ": " + value.entity;
                            if (value.entity != helpers.string.pluralize(value.representation || "")) {
                                value.$description += " (" + this.page.localize.navigPageRepresentation + ": " + value.representation + ")";
                            }
                        }
                    }
                    if (!value.$description) {
                        value.$description = value.$description;
                    }
                    this.codeMenu.isBookmarkMenuItem = true;
                    this.codeMenu.setMenu(value, this.currentValue, this.currentValue);
                    if (this.articleParent.reorderPicker) {
                        this.fieldValue.parentNode.insertBefore(this.articleParent.reorderPicker, this.fieldValue);
                    }
                    if (this.articleParent.menusSlot) {
                        this.articleParent.menusSlot.className = "s-nav-menu-menus";
                        this.page.ensureReorderAndMenusVisibility(this.articleParent);
                        this.fieldValue.parentNode.appendChild(this.articleParent.menusSlot);
                    }
                    
                }
            }
        }
    }
});
