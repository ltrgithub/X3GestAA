"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SingleList = require("syracuse-ui/lib/field/array/singleBuilder/singleList").SingleList;
var BookmarkItemRecord = require('./bookmarkItemRecord').BookmarkItemRecord;

function BookmarkItemList(){
}

exports.BookmarkItemList = helpers.defineClass(BookmarkItemList, SingleList, {
    loadBox: function(initData){
        this.RecordClass = BookmarkItemRecord;
        this.columnsCount = 1;
        this.emptyMessage = this.localize.bookmarksNoMenuItem;
        this.$item.$isTopLabelAlignment = true;
        this.$item.$iconPath = "page/s-nav-";
        this.$item.$skin = "s-nav-admin-items";
        this.$item.$skinMenus = "s-nav-list-menus";
        this.$isQuickDesignerEnabled = false;
        SingleList.prototype.loadBox.call(this, initData);
    },
    dispose: function(){
        SingleList.prototype.dispose.call(this);
    },
    _createMenusBox: function(){
        if (!this.isMenuLoaded) {
            this.isMenuLoaded = true;
            //this.page.ensureReorderAndMenusVisibility(this, null, this.articleParent.isSubModuleRecord);
            var iconOnly = this.articleParent.page != this.articleParent;
            var $itemBlock = this.defineNewIconMenu("$create", this.$skinMenus + "-link", iconOnly);
            $itemBlock.$icon.$value = "new-menus-block" + (iconOnly ? "-icon" : "");
            var $itemMenu = this.defineNewIconMenu("$select", this.$skinMenus + "-link", iconOnly);
            $itemMenu.$icon.$value = "new-menu" + (iconOnly ? "-icon" : "");
            var $itemSeparator = this.defineNewIconMenu("$select", this.$skinMenus + "-link", iconOnly);
            $itemSeparator.$icon.$value = "add-separator" + (iconOnly ? "-icon" : "");
            addSeparator
            this.page.loadNewItem(this.menusSlot, {
                $layoutType: "row",
                $autoSize: true,
                $items: [$itemBlock, $itemMenu, $itemSeparator]
            }, this);
        }
        this.topbar.style.display = "";
    },
    _initRows: function(){
        this.rows = [];
        this.currentCol = 0;
    },
    appendRow: function(){
        var row = {
            slot: document.createElement("div"),
            cols: [],
        };
        row.slot.className = this.$skin + "-row";
        this.body.appendChild(row.slot);
        for (var ii = 0; ii < this.columnsCount; ii++) {
            var slot = document.createElement("div");
            slot.className = this.$skin + "-col";
            row.slot.appendChild(slot);
            row.cols.push({
                slot: slot,
                items: []
            });
        }
        return row;
    },
    _appendMenusBar: function(){
        if (this.articleParent.page == this.articleParent) {
            this.body.insertBefore(this.menusbar, this.body.firstChild);
        }
        
    },
    emptyBody: function(addEmptySlot, onFetch){
        this._initRows();
        SingleList.prototype.emptyBody.call(this, addEmptySlot, onFetch);
    },
    onAppendRecord: function(newRecord){
        if (this.rows.length == 0) {
            this.rows = [this.appendRow()];
        }
        this.rows[0].cols[this.currentCol++].slot.appendChild(newRecord.domItem);
        newRecord.rowIndex = 0;
        newRecord.colIndex = this.currentCol;
        if (this.currentCol == this.columnsCount) {
            this.currentCol = 0;
        }
    }
});
