"use strict";
var helpers = require('syracuse-core/lib/helpers');

var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var BookmarkItemList = require('./bookmarkItem/bookmarkItemList').BookmarkItemList;
var BookmarkMenuItem = require('./bookmarkItem/bookmarkMenuItem').BookmarkMenuItem;
var BookmarkMenuBlock = require('./bookmarkItem/bookmarkMenuBlock').BookmarkMenuBlock;

function BookmarksPage(){
}

exports.BookmarksPage = helpers.defineClass(BookmarksPage, DesktopPage, {
    loadBox: function(){
        DesktopPage.prototype.loadBox.call(this);
    },
    createField: function($field, $item, boxParent, $class){
        switch ($item.$bind) {
            case "items":
                return new BookmarkItemList();
            case "$singleField":
                switch ($item.$variantItemKey) {
                    case "menuItem":
                        return new BookmarkMenuItem();
                    case "menuBlock":
                        return new BookmarkMenuBlock();
                }
                return null;
        }
        return null;
    },
    notifyChangeToServer: function(sendBag, articleSender){
        this.bar.notifyChangeToServer(this.ensureDeltaManager().cleanServerIndex(helpers.object.clone(this.dataset,true)));
    },
    notifyDataChange: function(field, value, notifyServerChange){
		this.notifyChangeToServer();
    },
    ensureReorderAndMenusVisibility: function(item, event, useCssForMenus){
        if (!event) {
            if (useCssForMenus) {
                this.toggleCssOnEnter(item.menusSlot);
            }
            else {
                this.showOnEnter(item.menusSlot);
            }
            this.showOnEnter(item.reorderPicker);
        }
        else {
            if (event) {
                if (useCssForMenus) {
                    this.toggleCssOnEnter(item.menusSlot, event);
                }
                else {
                    this.showOnEnter(item.menusSlot, event);
                }
                this.showOnEnter(item.reorderPicker, event);
            }
        }
    },
    getTreeLevel: function(item){
        var articleParent = item.articleParent;
        var level = 0;
        while (articleParent && articleParent != this) {
            if (articleParent.isMenuBlock) {
                level++
            }
            articleParent = articleParent.articleParent;
        }
        return ("s-level-" + level);
    },
    ensureDesignerOpenerVisibility: function(){
        document.site.enablePageDesign(false);
    },
    dispose: function(){
        this.bar = null;
        DesktopPage.prototype.dispose.call(this);
    }
});
