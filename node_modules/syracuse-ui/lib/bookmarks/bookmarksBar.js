"use strict";
var helpers = require('syracuse-core/lib/helpers');
var BookmarksPage = require("./bookmarksPage").BookmarksPage;

function BookmarksBar() {}

exports.BookmarksBar = helpers.defineClass(BookmarksBar, null, {
	addPicker: function(css, text, title) {
		var link = document.createElement("a");
		link.className = css;
		link.setAttribute("data-s-picker", css);
		link.syraSiteObserver = "bookmarksBar";
		link.setAttribute("href", "#");
		if (text) {
			link.textContent = text;
		}
		if (title) {
			link.title = title;
		}
		return link;
	},
	load: function(slot) {
		this.dataset = {
			items: []
		};
		var bar = document.createElement("div");
		bar.id = "s-bookmarks-bar";
		slot.appendChild(bar);

		bar.appendChild(this.addPicker("s-bookmarks-bar-add", null, document.site.localize.bookmarksAdd));

		this.linksSlot = document.createElement("div");
		this.linksSlot.id = "s-bookmarks-bar-links";
		bar.appendChild(this.linksSlot);

		bar.appendChild(this.morePicker = this.addPicker("s-bookmarks-bar-more", document.site.localize.bookmarksMore));

	},
	onMenuClick: function(menuItem) {
		if (menuItem.$bind.split("-")[0] === "bookmark") {
			this.onLinkLinkClick(menuItem);
			return false;
		}
		return true;
	},
	onClickPicker: function(picker, event) {
		var $bind = picker.getAttribute("data-s-picker");
		switch ($bind) {
			case "s-bookmarks-bar-link":
				this.onLinkLinkClick(this._findMenuItem(picker.syraLink), picker);
				return false;
			case "s-nav-menu-bookmark":
				this.onNavigationMenuItemPickerClick(document.site.findField(picker));
				return false;
			case "s-bookmarks-bar-add":
				this.onAddClick();
				return false;
			case "s-bookmarks-bar-more":
				this.openPage();
				return false;
		}
	},
	toggleNavigationMenuItemBookMark: function(navigationMenuItem) {
		document.site.toggleClass(navigationMenuItem.bookmarkPicker, "s-bookmark-on", navigationMenuItem.isBookmark);
	},
	checkNavigationMenuItemBookMark: function(navigationMenuItem) {
		if (this._findMenuItem(navigationMenuItem.codeMenu.$url)) {
			navigationMenuItem.isBookmark = true;
			this.toggleNavigationMenuItemBookMark(navigationMenuItem);
		}
	},
	onAddClick: function() {
		var params = null;
		var url = document.controller._currentUrl;
		var mainPage = document.site.mainPage;
		if (mainPage && mainPage.$isFusionPage) {
			var fct = mainPage.$urlParts.params.f;
			params = {
				f: fct.split("/")[0]
			};
			if (mainPage.$item.$transaction && mainPage.$item.$transaction !== "") {
				params.transaction = mainPage.$item.$transaction;
				var urlParse = helpers.url.parseUrl(url);
				var af = urlParse.query.f.split("/");
				af[0] = params.f + "~" + params.transaction;
				url = urlParse.path + "?f=" + af.join("/");
			}
		}
		var title = mainPage.getTitle();
		this.save(url, title, title, params);
		this.notifyChangeToServer();
	},
	onNavigationMenuItemPickerClick: function(navigationMenuItem) {
		if (!navigationMenuItem.isBookmark) {
			navigationMenuItem.isBookmark = this.save(navigationMenuItem.codeMenu.$url, navigationMenuItem.codeMenu.$title, navigationMenuItem.codeMenu.$description);
		} else {
			navigationMenuItem.isBookmark = false;
			this._deleteMenuItem(navigationMenuItem.codeMenu.$url);
		}
		this.toggleNavigationMenuItemBookMark(navigationMenuItem);
		this.notifyChangeToServer();
	},
	save: function($url, $title, $description, params) {
		if ($url) {
			if (!this._findMenuItem[$url]) {
				var item = {
					menuItem: {
						$url: $url,
						description: $description || "",
						title: $title || ""
					}
				};
				if (params) {
					item.menuItem.params = params;
				}
				this.dataset.items.push(item);
				return true;
			}
		} else {
			document.site.showDiagnoses({
				$diagnoses: [{
					$message: $title + " : no $url found",
					$severity: "warning"
				}]
			});
		}
		return false;
	},
	_getMenuItemCount: function(items) {
		var count = 0;
		items = items || this.dataset.items;
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			var item = items[ii];
			if (item.menuItem && !item.menuItem.$isSeparator) {
				count++;
			} else {
				if (item.menuBlock && item.menuBlock.items) {
					count += this._getMenuItemCount(item.menuBlock.items);
				}
			}
		}
		return count;
	},
	_deleteMenuItem: function(url, items) {
		var deleted;
		items = items || this.dataset.items;
		for (var ii = 0, jj = items.length; !deleted && ii < jj; ii++) {
			var item = items[ii];
			if (item.menuItem) {
				if (item.menuItem.$url === url) {
					items.splice(ii, 1);
					deleted = true;
				}
			} else {
				if (item.menuBlock && item.menuBlock.items) {
					deleted = this._findMenuItem(url, item.menuBlock.items);
				}
			}
		}
		return deleted;
	},
	_findMenuItem: function(url, items) {
		var menuItem;
		items = items || this.dataset.items;
		for (var ii = 0, jj = items.length; !menuItem && ii < jj; ii++) {
			var item = items[ii];
			if (item.menuItem) {
				if (item.menuItem.$url === url) {
					menuItem = item.menuItem;
				}
			} else {
				if (item.menuBlock && item.menuBlock.items) {
					menuItem = this._findMenuItem(url, item.menuBlock.items);
				}
			}
		}
		return menuItem;
	},
	onLinkLinkClick: function(menuItem, picker) {
		var httpQuery = document.controller.parseUrl(picker.syraEncodedUrl); // (menuItem.$url);
		var workBook = document.site.fusionGateway && document.site.fusionGateway.activatedBook;
		if (workBook) {
			var self = this;
			var item = (menuItem.$item || menuItem);
			if (item && item.params) { //x3 fct : open via ackcall
				//how to get current field with best way ?
				var sapController = workBook.fusionSite.controller._sapController;
				document.site.mainPage.externalAdapter.onBlockExRpc({
					field: sapController.getBoundField(sapController._currCtx.ist),
					call: {
						proxy: "EXEFNC1",
						values: [item.params.f, item.params.transaction],
						callback: function() {

						}
					}
				});
			} else {
				httpQuery.$target = "blank";
			}
		}
		if (httpQuery.isSyracuseURL()) {
			document.controller._openMainPage(httpQuery);
		}
	},
	loadBookmarks: function() {
		var self = this;
		document.site.userProfile.loadBookmarks(function(dataResult) {
			self.dataset = dataResult || {};
			self.dataset.items = self.dataset.items || [];
			self.refresh();
		});
	},
	notifyChangeToServer: function(dataset) {
		var self = this;
		document.site.userProfile.saveBookmarks(this.dataset = dataset || this.dataset, function(dataResult) {
			self.refresh();
		});
	},
	refresh: function() {
		document.site.emptyDom(this.linksSlot);
		this._addLineLinks(this.dataset.items);
		var count = this._getMenuItemCount();
		this.morePicker.style.visibility = count ? "visible" : "hidden";
		var $maxBookmarks = document.site.siteOptions.$item.$maxBookmarks || 25;
		if (count >= $maxBookmarks) {
			document.site.disableItem(this.mn, this.$isDisabled = $value || false);
		}
	},
	_addLineLinks: function(items) {
		if (items) {
			for (var ii = 0, jj = items.length; ii < jj; ii++) {
				var item = items[ii];
				if (item.menuItem && !item.menuItem.$isSeparator) {
					var link = this.addPicker("s-bookmarks-bar-link", item.menuItem.title || item.menuItem.description || "???", item.menuItem.description);
					link.setAttribute("href", link.syraEncodedUrl = "?url=" + encodeURIComponent(item.menuItem.$url));
					if (item.menuItem.$url.indexOf("http") >= 0 && item.menuItem.$url.indexOf(window.location.host) < 0) {
						link.setAttribute("target", "blank");
					}
					link.syraLink = item.menuItem.$url;
					this.linksSlot.appendChild(link);
					if (this.linksSlot.clientWidth != this.linksSlot.scrollWidth) {
						this.linksSlot.removeChild(link);
						return false;
					}
				} else {
					if (item.menuBlock && !this._addLineLinks(item.menuBlock.items)) {
						return false;
					}
				}
			}
		}
		return true;
	},
	_defineMenuItemLinks: function() {
		return {
			$select: {
				$title: "Add",
				$variants: {
					menuItem: {
						$title: document.site.localize.bookmarksSelectMenu,
						$url: "/sdata/syracuse/collaboration/syracuse/menuItems?representation=menuItem.$select"
					}
				}
			},
			addSeparator: {
				$title: "Add",
				$variants: {
					menuItem: {
						$title: document.site.localize.bookmarksAddSeparator
					}
				}
			}

		};
	},
	_defineMenuItem: function() {
		return {
			$type: "application/x-reference",
			$capabilities: "reorder,delete",
			$item: {
				$value: "{title}",
				$key: "{$uuid}",
				$properties: {
					title: {
						$type: "application/x-string"
					}
				}
			}
		};
	},
	openPage: function() {
		var pageSlot = document.createElement("div");
		pageSlot.className = "s-bookmarks-viewer";
		document.site.layoutSlot.appendChild(pageSlot);
		this.dialog = document.site.openDialog({
			$dialogMode: "modal",
			$itemPage: {
				$pageCategoryClass: BookmarksPage,
				layoutSlot: pageSlot,
				$category: "page",
				$urlParts: {
					$facet: "$bookmarks"
				},
				$representation: {
					$prototype: {
						$type: "application/json",
						$title: document.site.localize.bookmarksTitle,
						$properties: {
							items: {
								$type: "application/x-array",
								$capabilities: "reorder",
								$links: this._defineMenuItemLinks(),
								$item: {
									$type: "application/x-variant",
									$variants: {
										menuItem: this._defineMenuItem(),
										menuBlock: {
											$type: "application/x-object",
											$capabilities: "append,reorder,delete",
											$item: {
												$value: "{title}",
												$key: "{$uuid}",
												$id: "menuSubblock",
												$properties: {
													title: {
														$type: "application/x-string"
													},
													items: {
														$type: "application/x-array",
														$capabilities: "reorder",
														$links: this._defineMenuItemLinks(),
														$item: {
															$type: "application/x-variant",
															$variants: {
																menuItem: this._defineMenuItem(),
																menuBlock: {
																	$type: "application/x-object",
																	$capabilities: "append,reorder,delete",
																	$item: {
																		$prototype: "#menuSubblock",
																		$type: "application/x-pointer"
																	}
																}
															}

														}

													}
												}
											}
										}
									}
								}
							}
						}
					},
					$article: {
						$layout: {
							$items: [{
								$category: "section",
								$layout: {
									$items: [{
										$category: "block",
										$layout: {
											$items: [{
												$isEditMode: true,
												$bind: "items",
												$isQuickDesignerEnabled: false,
												$skin: "s-bookmarks",
												$layout: {
													$items: [{
														$bind: "menuItem"
													}]
												}
											}]
										}
									}]
								}
							}]
						}
					}
				}
			}
		});
		this.dialog._content.bar = this;
		this.dialog._content.applyChange({
			items: helpers.object.clone(this.dataset.items, true)
		});
	},
	_defaultData: function() {
		var items = [{
			"menuItem": {
				"$url": "?url=%2Ftrans%2Fx3%2Ferp%2FGX3APP%2F%24sessions%3Ff%3DGESPOH~AFF%2F2%2F%2FM%2F",
				"description": "Supplier orders AFF : Commandes std (tout affiché)",
				"title": "Supplier orders AFF : Commandes std (tout affiché)",
				"params": {
					"f": "GESPOH",
					"transaction": "AFF"
				},
				"$serverIndex": 1
			}
		}, {
			"menuItem": {
				"$url": "?url=%2Ftrans%2Fx3%2Ferp%2FGX3APP%2F%24sessions%3Ff%3DGESAMK%252F2%252F%252FM%252F",
				"description": "Screen dictionary",
				"title": "Screen dictionary",
				"params": {
					"f": "GESAMK"
				},
				"$serverIndex": 2
			}
		}, {
			"menuItem": {
				"$url": "?url=%2Fsdata%2Fsyracuse%2Fcollaboration%2Fsyracuse%2Fapplications%3Frepresentation%3Dapplication.%24query",
				"description": "Entity: applications",
				"title": "Applications"
			}
		}];
		return items;
	},
	dispose: function() {
		if (this.dialog) {
			this.dialog.dispose();
		}
		this.dialog = this.morePicker = this.linksSlot = this.dataset = null;
	}
});

//LV A quoi ça sert ?
/*if (this.bookmarksProvider && this.mainPage.openerHttpQuery) {

 this.bookmarksProvider.save(this.mainPage.openerHttpQuery.fullUrl, title);

 }*/