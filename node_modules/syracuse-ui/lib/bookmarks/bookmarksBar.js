"use strict";
var helpers = require('syracuse-core/lib/helpers');
var bookmarksManager = require("./bookmarksManager");

function BookmarksBar() {}

exports.BookmarksBar = helpers.defineClass(BookmarksBar, null, {
	appendPicker: function(css, text, title) {
		var link = document.createElement("a");
		link.className = css;
		link.setAttribute("data-s-picker", css);
		link.syraSiteObserver = "bookmarksBar";
		link.setAttribute("href", "#");
		if (text) {
			link.textContent = text;
		}
		if (title) {
			link.title = title;
		}
		return link;
	},
	addSeparator: function() {
		var link = document.createElement("div");
		link.syraIsSpearator = true;
		link.className = "s-bookmarks-bar-separator";
		return link;
	},
	load: function(slot) {
		this.dataset = {
			items: []
		};
		var bar = document.createElement("div");
		bar.id = "s-bookmarks-bar";
		slot.appendChild(bar);

		bar.appendChild(this.addPicker = this.appendPicker("s-bookmarks-bar-add", null, document.site.localize.bookmarksAdd));
		bar.appendChild(this.managePicker = this.appendPicker("s-bookmarks-bar-manage", null, document.site.localize.bookmarksManage));

		this.linksSlot = document.createElement("div");
		this.linksSlot.id = "s-bookmarks-bar-links";
		bar.appendChild(this.linksSlot);

		this.morePickerSlot = document.createElement("div");
		this.morePickerSlot.id = this.morePickerSlot.className = "s-bookmarks-more-picker-slot";
		bar.appendChild(this.morePickerSlot);

		this.morePicker = this.appendPicker("s-bookmarks-more-picker", document.site.localize.bookmarksMore, document.site.localize.bookmarksMoreTooltip);
		this.morePickerSlot.appendChild(this.morePicker);

		this.moreItemsSlot = document.createElement("div");
		this.moreItemsSlot.className = "s-bookmarks-more-items-slot";
		this._links = [];
	},
	onResize: function() {
		if (this.linksSlot.clientWidth <= (this.linksSlot.scrollWidth - 2)) {
			for (var ii = this._links.length - 1; ii >= 0; ii--) {
				var link = this._links[ii];
				if (!link.syraIsInMore) {
					link.syraIsInMore = true;
					link.className = link.syraIsSpearator ? "s-bookmarks-bar-separator-in-more" : "s-bookmarks-bar-link-in-more";
					if (link.syraIsDisabled) {
						document.site.disableItem(link, true);
					}
					this.moreItemsSlot.insertBefore(link, this.moreItemsSlot.firstChild);
				}
				if (this.linksSlot.clientWidth >= (this.linksSlot.scrollWidth - 2)) {
					break;
				}
			}
		} else {
			if (this.moreItemsSlot.children.length) {
				for (var ii = 0, jj = this._links.length; ii < jj; ii++) {
					var link = this._links[ii];
					if (link.syraIsInMore) {
						link.className = link.syraIsSpearator ? "s-bookmarks-bar-separator" : "s-bookmarks-bar-link";
						if (link.syraIsDisabled) {
							document.site.disableItem(link, true);
						}
						this.linksSlot.appendChild(link);
						if (this.linksSlot.clientWidth <= (this.linksSlot.scrollWidth - 2)) {
							link.className = link.syraIsSpearator ? "s-bookmarks-bar-separator-in-more" : "s-bookmarks-bar-link-in-more";
							this.moreItemsSlot.insertBefore(link, this.moreItemsSlot.firstChild);
							break;
						} else {
							link.syraIsInMore = false;
						}
					}
				}
			}
		}
		this.morePickerSlot.style.visibility = this.moreItemsSlot.children.length > 0 ? "visible" : "hidden";
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$bind.split("-")[0] === "bookmark") {
			this.onLinkLinkClick(menuItem);
			return false;
		}
		return true;
	},
	onClickPicker: function(picker, event) {
		var $bind = picker.getAttribute("data-s-picker");
		switch ($bind) {
			case "s-bookmarks-bar-link":
				this.onLinkLinkClick(this._findMenuItem(picker.href), picker);
				return false;
			case "s-nav-menu-bookmark":
				this.onNavigationMenuItemPickerClick(document.site.findField(picker));
				return false;
			case "s-bookmarks-bar-add":
				this.onAddClick(picker);
				return false;
			case "s-bookmarks-bar-manage":
				bookmarksManager.open(this);
				return false;
			case "s-bookmarks-more-picker":
				var self = this;
				if (!self.popupPicker) {
					self.popupPicker = document.site.dialogManager.openPopup(document.site, {
						content: self,
						slot: self.moreItemsSlot,
						position: {
							my: "left top",
							at: "left bottom",
							of: $(self.morePickerSlot)
						},
						onClose: function() {
							setTimeout(function() {
								self.popupPicker = null;
							}, 200);
						}
					});
				} else {
					self.popupPicker.close();
				}
				return false;
		}
	},
	toggleNavigationMenuItemBookMark: function(navigationMenuItem) {
		document.site.toggleClass(navigationMenuItem.bookmarkPicker, "s-bookmark-on", navigationMenuItem.isBookmark);
	},
	checkMainPage: function() {
		var menuItem = this._findMenuItem(document.site.history.getCurrentSdataUrl());
		document.site.toggleClass(this.addPicker, "s-bookmark-on", !! menuItem);
		//var sheet = document.site.fusionGateway.getActivatedSheet();
		var sheet = document.site.fusionGateway.activatedBook;
		for (var ii = this._links.length - 1; ii >= 0; ii--) {
			var link = this._links[ii];
			document.site.toggleClass(link, "s-bookmark-on", menuItem && (link.syraUrl == menuItem.$url));
			document.site.disableItem(link, sheet && !link.syraIsFusion);
		}
		this.onResize();
	},
	checkNavigationMenuItemBookMark: function(navigationMenuItem) {
		if (this._findMenuItem(navigationMenuItem.codeMenu.$url)) {
			navigationMenuItem.isBookmark = true;
			this.toggleNavigationMenuItemBookMark(navigationMenuItem);
		}
	},
	onAddClick: function() {
		var page = document.site.fusionGateway.getActivatedSheet();
		if (page) {
			var fct = page.$fusionPageMeta.winModel.getFctName();
			if (!(fct.name && (page.$fusionPageMeta.winModel._mdata.type == 1 || page.$fusionPageMeta.winModel._mdata.type == 2))) {
				page = null;
			}
		} else {
			page = document.site.mainPage;
		}
		if (page && page.openerUrlSegments) {
			if (!this._findMenuItem(page.openerUrlSegments.$url, null, true)) {
				this.dataset.items.push({
					menuItem: {
						$url: page.openerUrlSegments.$url,
						title: page.getTitle()
					}
				});
			}
			this.notifyChangeToServer();
		}
	},
	onNavigationMenuItemPickerClick: function(navigationMenuItem) {
		if (!navigationMenuItem.isBookmark) {
			var menuItem = navigationMenuItem.codeMenu;
			var sdataUrl = document.site.history.getSdataUrl(menuItem.$url || menuItem.href);
			var openerUrlSegments = document.site.urlMaker.parse(sdataUrl);
			if (!this._findMenuItem(openerUrlSegments.$url)) {
				navigationMenuItem.isBookmark = true;
				this.dataset.items.push({
					menuItem: {
						$url: openerUrlSegments.$url,
						description: menuItem.$description || "",
						title: menuItem.$title || ""
					}
				});
			}
		} else {
			navigationMenuItem.isBookmark = false;
			this._deleteMenuItem(navigationMenuItem.codeMenu.$url);
		}
		this.toggleNavigationMenuItemBookMark(navigationMenuItem);
		this.notifyChangeToServer();
	},
	_getMenuItemCount: function(items) {
		var count = 0;
		items = items || this.dataset.items;
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			var item = items[ii];
			if (item.menuItem && !item.menuItem.$isSeparator) {
				count++;
			} else {
				if (item.menuBlock && item.menuBlock.items) {
					count += this._getMenuItemCount(item.menuBlock.items);
				}
			}
		}
		return count;
	},
	_deleteMenuItem: function($url, items) {
		var deleted;
		items = items || this.dataset.items;
		for (var ii = 0, jj = items.length; !deleted && ii < jj; ii++) {
			var item = items[ii];
			if (item.menuItem) {
				if (item.menuItem.$url === $url) {
					items.splice(ii, 1);
					deleted = true;
				}
			} else {
				if (item.menuBlock && item.menuBlock.items) {
					deleted = this._findMenuItem($url, item.menuBlock.items);
				}
			}
		}
		return deleted;
	},
	_findMenuItem: function($url, items, deleteIfFound) {
		var menuItem;
		var sdataUrl = this.getCurrentEndpointSdataUrl($url);
		items = items || this.dataset.items;
		for (var ii = 0, jj = items.length; !menuItem && ii < jj; ii++) {
			var item = items[ii];
			if (item.menuItem) {
				if (!item.menuItem.$isSeparator) {
					if (this.getCurrentEndpointSdataUrl(item.menuItem.$url) === sdataUrl) {
						menuItem = item.menuItem;
						if (deleteIfFound) {
							items.splice(ii, 1);
							break;
						}
					}
				}
			} else {
				if (item.menuBlock && item.menuBlock.items) {
					menuItem = this._findMenuItem($url, item.menuBlock.items, deleteIfFound);
				}
			}
		}
		return menuItem;
	},
	onLinkLinkClick: function(menuItem, picker) {
		var self = this;
		var sdataUrl = this.getCurrentEndpointSdataUrl(picker ? picker.href : menuItem.href);
		var workBook = document.site.fusionGateway && document.site.fusionGateway.activatedBook;
		var target;
		if (workBook) {
			var segments = document.site.urlMaker.parse(sdataUrl);
			if (segments.fusionParams) {
				//x3 fct : open via ackcall
				//how to get current field with best way ?
				var sapController = workBook.fusionSite.controller._sapController;
				document.site.mainPage.externalAdapter.onBlockExRpc({
					field: sapController.getBoundField(sapController._currCtx.ist),
					call: {
						proxy: "EXEFNC1",
						values: [segments.fusionParams.functionCode, segments.fusionParams.transaction],
						callback: function() {

						}
					}
				});
			}
			return;
			//target = "blank";
		}
		document.site.history.load(sdataUrl, target);
	},
	getCurrentEndpointSdataUrl: function($url) {
		var selectedEndpoint = document.site.userProfile.dataset.selectedEndpoint;
		$url = document.site.history.getSdataUrl($url);
		return document.site.urlMaker.replaceEndpoint($url, selectedEndpoint, true);
	},
	loadBookmarks: function() {
		var self = this;
		document.site.userProfile.loadBookmarks(function(dataResult) {
			self.dataset = dataResult || {};
			self.dataset.items = self.dataset.items || [];
			self.refresh();
		});
	},
	notifyChangeToServer: function(dataset) {
		var self = this;
		document.site.userProfile.saveBookmarks(this.dataset = dataset || this.dataset, function(dataResult) {
			self.refresh();
		});
	},
	refresh: function() {
		document.site.emptyDom(this.linksSlot);
		document.site.emptyDom(this.moreItemsSlot);
		this.morePickerSlot.style.visibility = "hidden";
		this._links = [];
		this._addLineLinks(this.dataset.items);
		var count = this._getMenuItemCount();
		this.managePicker.style.visibility = count ? "visible" : "hidden";
		var $maxBookmarks = document.site.siteOptions.$item.$maxBookmarks || 25;
		if (count >= $maxBookmarks) {
			document.site.disableItem(this.mn, this.$isDisabled = $value || false);
		}
		this.checkMainPage();
	},
	_addLineLinks: function(items) {
		if (items) {
			for (var ii = 0, jj = items.length; ii < jj; ii++) {
				var item = items[ii];
				var link;
				if (item.menuItem) {
					if (item.menuItem.$isSeparator) {
						link = this.addSeparator();
					} else {
						link = this.appendPicker("s-bookmarks-bar-link", item.menuItem.title || item.menuItem.description || "???", item.menuItem.description);
						var menu = {
							$url: item.menuItem.$url,
							mn: link
						};
						document.site.history.setHref(menu);
						link.syraUrl = item.menuItem.$url;
						link.syraIsFusion = document.site.urlMaker.parse(menu.$url).isFusion;
					}
					this.linksSlot.appendChild(link);
					this._links.push(link);
				} else {
					if (item.menuBlock && !this._addLineLinks(item.menuBlock.items)) {
						return false;
					}
				}
			}
		}
		return true;
	},
	dispose: function() {
		bookmarksManager.dipose();
		this._links = this.addPicker = this.morePicker = this.linksSlot = this.dataset = null;
	}
});