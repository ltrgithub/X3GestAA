"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var keyHelper = require('syracuse-ui/lib/site/keyHelper');

function MessageBox(){
}

exports.MessageBox = helpers.defineClass(MessageBox, null, {
    open: function(options){
        var self = this;
        var localize = locale.resources(module)();
        document.site.addResizeListener(self);
        self.$$btns = {};
        var domItem = document.createElement("div");
        domItem.className = "s-msgbox";
        self.$$item = $(domItem);
        self.callback = options.callback;
        
        var div = document.createElement("div");
        div.className = "s-msgbox-header";
        self.$$header = $(div).appendTo(self.$$item);
        
        div = document.createElement("div");
        div.className = "s-msgbox-header-title s-msgbox-msg-" + options.$type;
        $(div).appendTo(self.$$header).text(options.$title)
        
        div = document.createElement("div");
        div.className = "s-msgbox-body";
        self.$$body = $(div).appendTo(self.$$item);
        
        // building body content
        var msg, stackTrace;
        
        msg = options.$message;
        stackTrace = options.$stackTrace;
        
        div = document.createElement("div");
        div.className = "s-msgbox-body-msg";
        $(div).html(msg.replace(/\n/g, '<br/>')).appendTo(self.$$body);
        
        if (stackTrace) {
            // adding stacktrace content
            div = document.createElement("div");
            div.className = "s-msgbox-body-stackTrace";
            self.$$stackTrace = $(div);
            self.$$stackTrace.html(self._preformat(self._detailToString(stackTrace))).appendTo(self.$$body).hide();
            
            // show/hide picker button
            self.$$bodyPicker = $(document.createElement("a")).addClass("s-msgbox-body-picker-closed");
            self.$$bodyPicker.text(localize.msgbox_body_picker_closed);
            self.$$bodyPicker.bind("click", function(){
                self.$$stackTrace.toggle();
                self.$$bodyPicker.toggleClass("s-msgbox-body-picker-closed").toggleClass("s-msgbox-body-picker-opened");
                var pickerTxt = self.$$bodyPicker.hasClass("s-msgbox-body-picker-closed") ? localize.msgbox_body_picker_closed : localize.msgbox_body_picker_opened;
                self.$$bodyPicker.text(pickerTxt);
                
                // copytoclipboard picker
                self._copyToClipboardHandler(self.$$bodyPicker.hasClass("s-msgbox-body-picker-opened"));
                self.onWindowResize();
                if (self.dialog) {
                    self.dialog.onWindowResize();
                }
            });
            div = document.createElement("div");
            div.className = "s-msgbox-body-picker";
            self.$$body.find("div.s-msgbox-body-msg").after($(div).append(self.$$bodyPicker));
        }
        
        
        // building footer
        div = document.createElement("div");
        div.className = "s-msgbox-foot";
        self.$$footer = $(div).appendTo(self.$$item).delegate("a.s-msgbox-button", "click", function(){
            var response = {
                $$button: $(this),
                $id: $(this).attr("data-s-id")
            };
            if (self.$$prompt) {
                response.prompt = self.$$prompt.val();
            }
            self.close(response.$id, response);
            return false;
        });
        
        // drawing buttons
        self.drawButtons(options);
        
        // handling window dimension 
        self._setMinimumDimensions();
        self.onWindowResize();
        
        // showing msgbox
        if (options.$$container) {
            (self.$$container = options.$$container).append(self.$$item);
            domItem.style.display = "inline-block";
        }
        else {
            domItem.style.position = "fixed";
            self.dialog = document.site.openDialog({
                id: document.controller.generateUUID(),
                content: self,
                $autoClose: false,
                $dialogSize: "content",
            });
        }
        
        // autoclose
        if (options.$autoClose) {
            var count = (typeof(options.$autoClose) == "number" ? options.$autoClose : 4000) / 1000;
            div = document.createElement("div");
            div.className = "s-msgbox-header-timer";
            var $$timer = $(div).appendTo(self.$$header).text("( " + count + " )")
            self.autoCloseTimeOut = setInterval(function(){
                $$timer.text("( " + (--count) + " )")
                if (count == 0) {
                    clearInterval(self.autoCloseTimeOut);
                    self.close("auto");
                }
            }, 1000);
        }
        
        // handling window close with ENTER or ESCAPE buttons
        $(document).bind("keypress.msgbox", function(evt){
            switch (evt.keyCode) {
                case keyHelper.keyCode.ENTER:
                    setTimeout(function(){
                        self.$$defaultBtn.click();
                    }, 100);
                    break;
                case keyHelper.keyCode.ESCAPE:
                    setTimeout(function(){
                        self.close("esc");
                    }, 100);
                    break;
            }
        });
    },
    _copyToClipboardHandler: function(isStackVisible){
        // copy to clipboard picker btn
        var self = this;
        var localize = locale.resources(module)();
        var div = document.createElement("div");
        div.className = "s-msgbox-msg";
        self.$$message = $(div);
        self.$$message.html(msg.replace(/\n/g, '<br/>')).appendTo(self.$$body);
    },
    _appendStackTrace: function(){
        var self = this;
        
        // navbar
		/*
        var nav = document.createElement("nav");
        nav.className = "s-msgbox-core-tabs-nav";
        self.$$coreTabsNav = $(nav);
        self.$$coreTabsNav.appendTo(self.$$body).hide();
        
        // core
        var div = document.createElement("div");
        div.className = "s-msgbox-core";
        self.$$core = $(div);
        self.$$core.appendTo(self.$$body).hide();
        
        // tabs
        var tab = document.createElement("a");
        tab.className = "s-msgbox-core-tab-open";
        tab.textContent = self.localize.msgbox_nav_title_formatted;
        self.$$coreTabsNav[0].appendChild(tab);
        tab = document.createElement("a");
        tab.className = "s-msgbox-core-tab";
        tab.textContent = self.localize.msgbox_nav_title_raw;
        self.$$coreTabsNav[0].appendChild(tab);
        
        self.$$coreTabsNav.delegate("a.s-msgbox-core-tab", "click", function(){
            $(this).parent().children("a.s-msgbox-core-tab-open")[0].className = "s-msgbox-core-tab";
            $(this)[0].className = "s-msgbox-core-tab-open";
			            
            // change content
            self.$$coreFormatted.toggle();
            self.$$coreRaw.toggle();
            return false;
        });
        
        // tabs content
        div = document.createElement("div");
        div.className = "s-msgbox-core-tab-formatted";
        self.$$coreFormatted = $(div).appendTo(self.$$core);
        
        div = document.createElement("div");
        div.className = "s-msgbox-core-tab-raw";
        self.$$coreRaw = $(div).appendTo(self.$$core).hide();
        
        // show/hide picker button
        self.$$bodyPicker = $(document.createElement("a")).addClass("s-msgbox-picker-closed");
        self.$$bodyPicker.text(self.localize.msgbox_body_picker_closed);
        self.$$bodyPicker.bind("click", function(){
            self.$$coreTabsNav.toggle();
            self.$$core.toggle();
            self.$$bodyPicker.toggleClass("s-msgbox-picker-closed").toggleClass("s-msgbox-picker-opened");
            var pickerTxt = self.$$bodyPicker.hasClass("s-msgbox-picker-closed") ? self.localize.msgbox_body_picker_closed : self.localize.msgbox_body_picker_opened;
            self.$$bodyPicker.text(pickerTxt);
            
            self.onWindowResize();
            if (self.dialog) {
                self.dialog.onWindowResize();
            }
            // other browsers
            else {
                if (self.$$openPicker) {
                    self.$$openPicker.show();
                }
                else {
                    self.$$openPicker = $(document.createElement("a")).addClass("s-msgbox-body-open-picker");
                    self.$$openPicker.text(localize.msgbox_body_open_picker);
                    self.$$openPicker.bind("click", function(){
                        // open new window
                        var txtMsg = self.$$body.find("div.s-msgbox-body-msg")[0].innerHTML;
                        var txtTrace = self.$$stackTrace.find("pre.s-msgbox-body-pre")[0].innerHTML;
                        var myWindow = window.open('', '_blank')
                        myWindow.document.write(self._preformat(txtMsg + "\n" + txtTrace));
                        
                    });
                    div = document.createElement("div");
                    div.className = "s-msgbox-body-picker";
                    self.$$body.find("div.s-msgbox-body-picker").after($(div).append(self.$$openPicker));
                }
            }
        }
        var origin = self.localize.msgbox_body_stackTrace_origin + $origin;
        
        // add to formatted tab content
        var div = document.createElement("div");
        div.className = "s-msgbox-origin";
		$(div).html(origin).appendTo(self.$$core);
        //$(div).html(origin).appendTo(self.$$coreFormatted);
        
        // add to raw tab content
        self.$$coreRaw[0].innerHTML += preformat($origin + "<br/>");
    },
    _appendDetails: function($details){
        var self = this;
        if (!self.$$core) {
            self._appendStackTrace();
        }
        // add to formatted tab content
        var div = document.createElement("div");
        div.className = "s-msgbox-details";
		$(div).html($details.replace(/\n/g, '<br/>')).appendTo(self.$$core);
        //$(div).html($details.replace(/\n/g, '<br/>')).appendTo(self.$$coreFormatted);
        
        // add to raw tab content
        self.$$coreRaw[0].innerHTML += preformat($details + "<br/>");
    },
    _appendDiagnoses: function($diagnoses){
        var self = this;
        if (!self.$$core) {
            self._appendStackTrace();
        }
        // add to formatted tab content
        var div = document.createElement("div");
        div.className = "s-msgbox-diagnoses";
		self.$$diagnoses = $(div).appendTo(self.$$core);
        //self.$$diagnoses = $(div).appendTo(self.$$coreFormatted);
        self.groups = new Groups(self);
        self.groups.drawDiagnoses($diagnoses);
        self.groups.appendToViewer(self.$$diagnoses);
        
        // add to raw tab content
        self.$$coreRaw[0].innerHTML += preformat(detailToString($diagnoses));
    },
    _detailToString: function(o){
        if (o == undefined) 
            return "";
        try {
            if (typeof(o) == 'string') {
                if (o.length == 0) 
                    return o;
                o = JSON.parse(o);
            }
            return JSON.stringify(o, null, "   ");
        } 
        catch (e) {
            return o.toString();
        }
    },
    _setMinimumDimensions: function(){
        this.$$item[0].style.minWidth = "350px"; // "400px" ? "100px" ?
        //this.$$body[0].style.minHeight = "30px";
        
        if (this.$$stackTrace) {
            this.$$stackTrace[0].style.minHeight = "180px";
        }
    },
    onWindowResize: function(setMinimumDimensions){
        var body = document.site.$$body[0];
        var computeItemMaxWidth = (body.clientWidth - 800);
        this.$$item[0].style.maxWidth = computeItemMaxWidth >= 620 ? "620px" : computeItemMaxWidth + "px";
        if (this.$$stackTrace) {
            var bodyMsgHeight = this.$$body.children(".s-msgbox-body-msg").outerHeight();
            var computeBodyStackMaxHeight = (body.clientHeight - this.$$header.outerHeight() - bodyMsgHeight - 150);
            this.$$stackTrace[0].style.maxHeight = computeBodyStackMaxHeight >= 500 ? "500px" : computeBodyStackMaxHeight + "px";
        }
    },
    drawButtons: function(options){
        var localize = locale.resources(module)();
        var self = this;
        var $buttons = options.$buttons;
        if (options.$type == "question") {
            $buttons = $buttons || "yesno";
        }
        if (options.$type == "prompt") {
            $buttons = $buttons || "okcancel";
            self.$$prompt = $("<input type='text'/>").addClass("s-msgbox-prompt").attr("size", "50").appendTo(self.$$body);
        }
        
        $buttons = $buttons || "ok";
        ["yes", "no", "ok", "cancel"].forEach(function($id){
            if ($buttons.indexOf($id) >= 0) {
                self.drawButton({
                    $id: $id,
                    $text: localize["msgbox_" + $id]
                });
            }
        });
        
        self.$$defaultBtn = self.$$btns[options.$default || "ok"];
        if (!self.$$defaultBtn) {
            self.$$defaultBtn = self.$$btns[Object.keys(self.$$btns)[0]];
        }
        self.$$defaultBtn.addClass("s-msgbox-button-default");
    },
    drawButton: function($btn){
        var btn = document.createElement("a");
        btn.className = "s-msgbox-button";
        btn.setAttribute("data-s-id", $btn.$id);
        this.$$btns[$btn.$id] = $(btn).text($btn.$text).appendTo(this.$$footer);
    },
    close: function(closedBy, response){
        if (this.callback ? (this.callback(response, closedBy) !== false) : true) {
            if (this.$$item) {
                this.$$item.remove();
            }
            document.controller.disposeObject(this);
        }
    },
    dispose: function(){
        document.site.removeResizeListener(this);
        if (this.autoCloseTimeOut) {
            clearInterval(this.autoCloseTimeOut);
            delete this.autoCloseTimeOut;
        }
        if (this.$$footer) {
            this.$$footer.undelegate();
        }
        $(document).unbind("keypress.msgbox");
        if (this.$$bodyPicker) {
            this.$$bodyPicker.unbind();
        }
        if (this.$$copyPicker) {
            this.$$copyPicker.unbind();
        }
        if (this.$$openPicker) {
            this.$$openPicker.unbind();
        }
        if (this.autoCloseConfirMsg) {
            clearTimeout(this.autoCloseConfirMsg);
            delete this.autoCloseConfirMsg;
        }
    }
});


function Group(){

}

helpers.defineClass(Group, null, {
    create: function(severity){
        var group = document.createElement("div");
        group.className = 's-diag-view-group-' + (this.severity = severity);
        this.localize = locale.resources(module)();
        this.$$group = $(group);
        this._messages = [];
        this.bindEvents(true);
    },
    bindEvents: function(bind){
        var self = this;
        if (bind) {
            self.$$group.delegate(".s-msgbox-diag-picker", "click", function(){
                var message = self._messages[this.getAttribute("data-s-index")];
                if (message.$$stackTraceView) {
                    message.$$stackTraceView.toggle();
                }
                else {
                    var stackTraceView = document.createElement("div");
                    stackTraceView.className = "s-msgbox-diag-stackTrace";
                    stackTraceView.innerHTML = preformat(message.stackTrace.replace(/\n/g, "<br/>"));
                    message.label.appendChild(stackTraceView).style.display = "none";
                    message.$$stackTraceView = $(stackTraceView);
                    message.$$stackTraceView.toggle();
                }
                return false;
            });
        }
        else {
            self.$$group.undelegate();
        }
    },
    empty: function(field){
        if (field) {
            this.$$group.children().children("a[data-s-menu=" + field.id + "]").parent().remove();
        }
        else {
            this.$$group.empty();
        }
    },
    drawLabel: function($diagnose){
        // adding appCode to stackTrace
        var localize = locale.resources(module)();
        if ($diagnose.appCode) {
            $diagnose.stackTrace = localize.msgbox_diag_appCode + $diagnose.appCode + "\n" + $diagnose.stackTrace;
        }
        
        // building label
        var message = {
            label: document.createElement("label"),
            stackTrace: $diagnose.stackTrace
        };
        this._messages.push(message);
        message.label.className = "s-diag-view-msg-" + this.severity;
        message.label.innerHTML = document.site.formatHTMLMessage($diagnose.message || this.localize.msgbox_diagnose_default_msg);
        if ($diagnose.stackTrace) {
            // picker
            var picker = document.createElement("a");
            picker.setAttribute("data-s-index", this._messages.length - 1);
            picker.className = "s-msgbox-diag-picker";
            message.label.appendChild(picker);
        }
        return message.label;
    },
    drawDiagnose: function($diagnose){
        this.$$group[0].appendChild(this.drawLabel($diagnose));
    },
    appendToViewer: function($$body){
        this.$$group.appendTo($$body);
    },
    dispose: function(){
        this.bindEvents(false);
        this.$$count = this.$$group = null;
    }
});

function Groups(viewer){
    var self = this;
    self.severities = {};
    self._groups = (["error", "fatal", "warning", "info"]).map(function(severity){
        (self.severities[severity] = new Group()).create(severity);
        return self.severities[severity];
    });
    self.viewer = viewer;
}

helpers.defineClass(Groups, null, {
    getGroup: function(severity){
        // FDB - Take into account bad severity values
        if (severity == null || severity.length == 0) {
            severity = "error";
        }
        else {
            severity = severity.toLowerCase();
        }
        var grp = this.severities[severity];
        return grp ? grp : this.severities["error"];
    },
    drawFieldDiagnoses: function($diagnoses, field){
        var self = this;
        field.ensureDiagnoseSlot();
        var group;
        $diagnoses.forEach(function($diagnose){
            field.drawDiagnose($diagnose, group = self.getGroup($diagnose.severity));
            self.drawLinks($diagnose);
        });
        field.domDiagnose.style.visibility = "";
        if (group) {
            field.toggleDiagnose("s-" + group.severity, true);
        }
    },
    drawDiagnoses: function($diagnoses){
        var self = this;
        $diagnoses.forEach(function($diagnose){
            self.getGroup($diagnose.severity).drawDiagnose($diagnose);
            self.drawLinks($diagnose);
        });
    },
    drawLinks: function($diagnose){
        if ($diagnose.$links || $diagnose.$actions) {
            this.viewer.drawLinks($diagnose);
        }
    },
    empty: function(field){
        this._groups.forEach(function(group){
            group.empty(field);
        });
    },
    appendToViewer: function($$body){
        this._groups.forEach(function(group){
            group.appendToViewer($$body);
        });
    },
    dispose: function(){
        var self = this;
        self._groups.forEach(function(group){
            delete self.severities[group.severity];
            group.dispose();
        });
        delete self._groups;
        delete self.viewer;
    }
});


function preformat(txt){
    return "<pre class='s-msgbox-pre'>" + txt + "</pre>";
}

function detailToString(o){
    if (o == undefined) 
        return "";
    try {
        if (typeof(o) == 'string') {
            if (o.length == 0) 
                return o;
            o = JSON.parse(o);
        }
        return JSON.stringify(o, null, "   ");
    } 
    catch (e) {
        return o.toString();
    }
}
