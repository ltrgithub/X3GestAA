"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var AreaScroller = require('syracuse-ui/lib/site/authoring/areaScroller').AreaScroller;

function Group(severity){
    var group = document.createElement("div");
    group.className = 's-diag-view-group-' + (this.severity = severity);
    this.$$group = $(group);
}

helpers.defineClass(Group, null, {
    empty: function(field){
        if (field) {
            this.$$group.children().children().children("a[data-s-menu=" + field.id + "]").parent().parent().remove();
        }
        else {
            this.$$group.empty();
        }
    },
    drawLabel: function($diagnose){
        var label = document.createElement("label");
        label.className = "s-diag-view-msg-label";
        var $$label = $(label);
        $$label.append(document.site.formatHTMLMessage($diagnose.message));
        return $$label;
    },
    drawDiagnose: function($diagnose, $$fieldLink){
        var html = document.createElement("div");
        html.className = "s-diag-view-msg s-diag-view-msg-" + this.severity;
        var $$diagView = $(html);
        
        var $$label = this.drawLabel($diagnose);
        $$diagView[0].appendChild($$label[0]);
        // add field link if any
        if ($$fieldLink) {
            $$label.prepend($$fieldLink);
        }
        // expand button if needed
        if ($$label.find("br")[0]) {//$diagnose.message.indexOf("\n") > 0
            var expandedTxt = $$label[0].innerHTML.substr($$label[0].innerHTML.indexOf("<br>") + "<br>".length);
            if (expandedTxt.match(/\S/g)) {
                $$label[0].innerHTML = $$label[0].innerHTML.replace(expandedTxt, "<span class='s-diag-view-msg-expanded-text'>" + expandedTxt + "</span>");
                var expander = document.createElement("a");
                expander.className = "s-diag-view-msg-expander";
                $$diagView.append($(expander));
            }
        }
        
        // close button
        html = document.createElement("a");
        html.className = "s-diag-view-msg-close";
        $$diagView[0].appendChild(html);
        
        this.$$group[0].appendChild($$diagView[0]);
        //this.drawLabel($diagnose).appendTo(this.$$group);
    },
    appendToViewer: function($$body){
        this.$$group.appendTo($$body);
    },
    dispose: function(){
        this.$$count = this.$$group = null;
    }
});

function Groups(viewer){
    var self = this;
    self.severities = {};
    self._groups = (["error", "fatal", "warning", "info"]).map(function(severity){
        return self.severities[severity] = new Group(severity);
    });
    self.viewer = viewer;
}

helpers.defineClass(Groups, null, {
    getGroup: function(severity){
        // FDB - Take into account bad severity values
        if (severity == null || severity.length == 0) {
            severity = "error";
        }
        else {
            severity = severity.toLowerCase();
        }
        var grp = this.severities[severity];
        return grp ? grp : this.severities["error"];
    },
    drawFieldDiagnoses: function($diagnoses, field){
        var self = this;
        field.ensureDiagnoseSlot();
        var group;
        $diagnoses.forEach(function($diagnose){
            field.drawDiagnose($diagnose, group = self.getGroup($diagnose.severity));
            self.drawLinks($diagnose);
            self.viewer._fieldDiagnoses.push(field);
        });
        field.domDiagnose.style.visibility = "";
        if (group) {
            field.toggleDiagnose("s-" + group.severity, true);
        }
    },
    drawDiagnoses: function($diagnoses){
        var self = this;
        $diagnoses.forEach(function($diagnose){
            self.getGroup($diagnose.severity).drawDiagnose($diagnose);
            self.drawLinks($diagnose);
        });
    },
    drawLinks: function($diagnose){
        if ($diagnose.$links || $diagnose.$actions) {
            this.viewer.drawLinks($diagnose);
        }
    },
    empty: function(field){
        this._groups.forEach(function(group){
            group.empty(field);
        });
    },
    appendToViewer: function($$body){
        this._groups.forEach(function(group){
            group.appendToViewer($$body);
        });
    },
    dispose: function(){
        var self = this;
        self._groups.forEach(function(group){
            delete self.severities[group.severity];
            group.dispose();
        });
        delete self._groups;
        delete self.viewer;
    }
});

function DiagnosesPanel(){
}

exports.DiagnosesPanel = helpers.defineClass(DiagnosesPanel, null, {
    _emptyViewer: function(){
        this._fieldDiagnoses = null;
        this.$$item.hide();
        //this.$$item.css("visibility", "hidden");
        this._emptyMenus();
        this._emptyGroups();
        this.wasDisplayed = null;
    },
    _emptyMenus: function(){
        if (this._menus) {
            this._menus.getArticle().removeItem(this._menus, true);
            delete this._menus;
        }
    },
    _emptyGroups: function(){
        if (this.groups) {
            this.groups.empty();
        }
    },
    appendToPage: function(page){
        this.page = page;
        var html = document.createElement("div");
        html.className = "s-diag-view";
        this.$$item = $(html).appendTo($(this.page.diagnoseSlot));
    },
    _refreshViewer: function(options, page){
        if (!this.disableViewer) {
            var self = this;
            
            self.total = 0;
            self.$$body.empty();
            self.groups._groups.forEach(function(group){
                var count = group.$$group.children().children("label").length;
                if (count) {
                    self.total += count;
                    group.$$group.appendTo(self.$$body);
                }
            });
            
            if (self.total > 0) {
                self.showDiagnosesPanel();
            }
            else {
                self.$$item.hide();
            }
            self.page.fitPageToContainer();
        }
    },
    showDiagnosesPanel: function(){
        var self = this;
        
        // show next nav button if necessary (field diagnoses > 0)
        var fieldDiag = [];
        fieldDiag = self.$$body.find("a.s-diag-view-msg-link");
        if (self._fieldDiagnoses.length > 0) {
            self.$$nextLink.show();
        }
        else {
            self.$$nextLink.hide();
        }
        
        
        // show expand (more/less) button if necessary (total > 1)
        if (self.total > 1) { //(self.$$body.find("label").length > 1)
            var moreText = (self.total) - 1 == 0 ? self.localize.diag_expand : (self.total - 1) + self.localize.diag_expand;
            var diagMsg = [];
            diagMsg = self.$$body.find("div.s-diag-view-msg");
            
            // for 1st display or display after clean, the pannel should be in collapsed mode
            if (!self.wasDisplayed) {
                self.$$expandLink[0].textContent = moreText;
                for (var i = 0; i < diagMsg.length; i++) {
                    if (i != 0) {
                        diagMsg[i].style.display = "none";
                    }
                }
                self.wasDisplayed = true;
            }
            
            // for further display
            else {
            
                self.$$expandLink[0].textContent = diagMsg[1].style.display == "none" ? moreText : self.localize.diag_collapse;
                
                // change diagnose display accordingly
                // case 1 : diagnose panel was closed before diag add -> hide all of them but the 1st one
                if (self.$$expandLink[0].textContent.indexOf(self.localize.diag_expand) > 0) {
                    for (var i = 0; i < diagMsg.length; i++) {
                        if (i != 0 && diagMsg[i].style.display != "none") {
                            diagMsg[i].style.display = "none";
                        }
                        if (i == 0) {
                            diagMsg[i].style.display = "block";
                        }
                    }
                }
                // case 2 : do nothing	
            }
            self.$$expandLink.show();
        }
        else {
            if (self.total == 1) {
                self.$$expandLink.hide();
            }
        }
        
        self.$$item.show();
        document.site.setZIndex(self.$$item[0]);
        document.site.setZIndex(self.$$diagNavBar[0]);
    },
    _hasScrollBar: function($$area){
        var _area = $$area[0]
        return (_area.clientHeight < _area.scrollHeight) || (_area.clientWidth < _area.scrollWidth);
    },
    _initializeCore: function(){
        this.localize = locale.resources(module)();
        var self = this;
        
        // navigation bar (more, next) 
        var html = document.createElement("div");
        html.className = "s-diag-view-navigation-bar";
        self.$$item.append(self.$$diagNavBar = $(html));
        
        // navigation links/buttons (more, next)
        html = document.createElement("a");
        html.className = "s-diag-view-nav-next";
        html.textContent = self.localize.diag_next;
        self.$$diagNavBar.append(self.$$nextLink = $(html));
        self.$$nextLink.hide();
        
        html = document.createElement("a");
        html.className = "s-diag-view-nav-expand";
        self.$$diagNavBar.append(self.$$expandLink = $(html));
        self.$$expandLink.hide();
        
        
        html = document.createElement("div");
        //html.setAttribute("id", "s-diag-view-core");
        html.className = "s-diag-view-core";
        
        self.$$item.append(self.$$core = $(html));
        
        html = document.createElement("div");
        html.className = "s-diag-view-msg-list";
        self.$$body = $(html);
        
        self.groups = new Groups(self);
        self.$$core.append(self.$$body);
        
        html = document.createElement("a");
        html.className = "s-diag-view-count";
        
        // bind actions to navigation links
        self.$$nextLink.bind("click", function(){
            self.numFocusedField = self.numFocusedField || 0;
            if (self._fieldDiagnoses.length) {
                self.focusField(self._fieldDiagnoses[self.numFocusedField++]);
                if (self._fieldDiagnoses.length == self.numFocusedField) {
                    self.numFocusedField = 0;
                }
            }
        });
        self.$$expandLink.bind("click", function(){
            var moreText = (self.total) - 1 == 0 ? self.localize.diag_expand : (self.total - 1) + self.localize.diag_expand;
            
            var diagMsg = [];
            diagMsg = self.$$body.find("div.s-diag-view-msg");
            for (var i = 0; i < diagMsg.length; i++) {
                if (i != 0) {
                    $(diagMsg[i]).toggle();
                }
            }
            
            self.$$expandLink[0].textContent = diagMsg[1].style.display == "none" ? moreText : self.localize.diag_collapse;
			
			self.page.fitPageToContainer();
        });
        
        
        // links area
        html = document.createElement("div");
        html.className = "s-diag-view-links-bar";
        self.$$item.append(self.$$diagViewLinks = $(html));
        
        self.$$item.delegate("a.s-diag-view-msg-link", "click", function(){
            var field = document.controller.findItem($(this));
            if (field) {
                self.focusField(field);
            }
            return false;
        }).delegate("a.s-diag-view-msg-expander", "click", function(){
            $(this).parent().find("span").toggle();
			self.page.fitPageToContainer();
            return false;
        }).delegate("a.s-diag-view-msg-close", "click", function(){
            //$(this).parent().remove();
            //TODO : update self.total, update expandLink text value
        });
        self.scroller = new AreaScroller(this.page.$$body);
    },
    focusField: function(field){
        if (!(field.focus && field.focus())) {
            this.scroller.scrollToTarget(field.$$item, true);
        }
    },
    drawLinks: function(message, page){
        page = page || this.page;
        var self = this;
        if (!self._menus) {
            self._menus = page.loadNewItem(self.$$diagViewLinks, {
                $category: "links",
                $skin: "s-diag-view-links",
                $isBindDisabled: true,
                $links: {},
                $actions: {}
            });
        }
        ["$links", "$actions"].forEach(function($type){
            var $menus = message[$type];
            if ($menus) {
                var $isAction = $type == "$actions";
                Object.keys($menus).forEach(function($bind){
                    var $menu = $menus[$bind];
                    var bound = page.menuItems[$menu.$bind || $bind];
                    if (bound && bound[0]) {
                        bound[0].setMenu($menu);
                    }
                    else {
                        $menu.$isAction = $isAction;
                        self._menus.addMenuItem($menu);
                    }
                });
            }
        });
    },
    showDiagnoses: function(message, page, options){
        var self = this;
        
        if (!message || (!message.field && !message.$diagnoses)) {
            self._emptyViewer();
            if (options) {
                // for further usage ?
            }
        }
        else {
            if (!self.$$core) {
                self._initializeCore();
            }
            self._fieldDiagnoses = self._fieldDiagnoses || [];
            if (message.$diagnoses && message.$diagnoses.length > 0) {
                if (message.field) {
                    self.groups.drawFieldDiagnoses(message.$diagnoses, message.field);
                }
                else {
                    self.groups.drawDiagnoses(message.$diagnoses);
                }
            }
            else {
                self.groups.empty(message.field);
                if (message.field && message.field.domDiagnose) {
                    message.field.emptyDiagnoseSlot();
                }
            }
            
            if (message.$links || message.$actions) {
                this.drawLinks(message, page);
            }
            
            if (options) {
                // for further usage ?
            }
            
            if (!options || !options.noViewer) {
                self._refreshViewer(options, page);
                if (message.autoHide) {
                    setTimeout(function(){
                        self._emptyViewer();
                    }, 4000);
                }
            }
        }
    },
    dispose: function(){
        if (this.groups) {
            this.groups.dispose();
            delete this.groups;
        }
        
        if (this.total) {
            delete this.total;
        }
        
        if (this.$$item) {
            this.$$item.undelegate();
        }
        if (this.$$nextLink) {
            this.$$nextLink.unbind();
        }
        if (this.$$expandLink) {
            this.$$expandLink.unbind();
        }
        if (this.scroller) {
            this.scroller.dispose();
            delete this.scroller;
        }
        if (this.wasDisplayed) {
            this.wasDisplayed = null;
        }
        delete this.page;
    }
});
