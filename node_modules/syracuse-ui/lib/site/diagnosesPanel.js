"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var AreaScroller = require('syracuse-ui/lib/site/authoring/areaScroller').AreaScroller;

function Group(severity){
    var group = document.createElement("div");
    group.className = 's-diag-view-group-' + (this.severity = severity);
    this.$$group = $(group);
}

helpers.defineClass(Group, null, {
    empty: function(field){
        if (field) {
            this.$$group.children().children("a[data-s-menu=" + field.id + "]").parent().remove();
        }
        else {
            this.$$group.empty();
        }
    },
    drawLabel: function($diagnose){
        var label = document.createElement("label");
        label.className = "s-diag-view-msg-" + this.severity;
        $(label).append(document.site.formatHTMLMessage($diagnose.message));
        return $(label);
    },
    drawDiagnose: function($diagnose){
        this.drawLabel($diagnose).appendTo(this.$$group);
    },
    appendToViewer: function($$body){
        this.$$group.appendTo($$body);
    },
    dispose: function(){
        this.$$count = this.$$group = null;
    }
});

function Groups(viewer){
    var self = this;
    self.severities = {};
    self._groups = (["error", "fatal", "warning", "info"]).map(function(severity){
        return self.severities[severity] = new Group(severity);
    });
    self.viewer = viewer;
}

helpers.defineClass(Groups, null, {
    getGroup: function(severity){
        // FDB - Take into account bad severity values
        if (severity == null || severity.length == 0) {
            severity = "error";
        }
        else {
            severity = severity.toLowerCase();
        }
        var grp = this.severities[severity];
        return grp ? grp : this.severities["error"];
    },
    drawFieldDiagnoses: function($diagnoses, field){
        var self = this;
        field.ensureDiagnoseSlot();
        var group;
        $diagnoses.forEach(function($diagnose){
            field.drawDiagnose($diagnose, group = self.getGroup($diagnose.severity));
            self.drawLinks($diagnose);
        });
        field.domDiagnose.style.visibility = "";
        if (group) {
            field.toggleDiagnose("s-" + group.severity, true);
        }
    },
    drawDiagnoses: function($diagnoses){
        var self = this;
        $diagnoses.forEach(function($diagnose){
            self.getGroup($diagnose.severity).drawDiagnose($diagnose);
            self.drawLinks($diagnose);
        });
    },
    drawLinks: function($diagnose){
        if ($diagnose.$links || $diagnose.$actions) {
            this.viewer.drawLinks($diagnose);
        }
    },
    empty: function(field){
        this._groups.forEach(function(group){
            group.empty(field);
        });
    },
    appendToViewer: function($$body){
        this._groups.forEach(function(group){
            group.appendToViewer($$body);
        });
    },
    dispose: function(){
        var self = this;
        self._groups.forEach(function(group){
            delete self.severities[group.severity];
            group.dispose();
        });
        delete self._groups;
        delete self.viewer;
    }
});


function MenuIcons(viewer){
    this.severityIcons = {};
    this.countIcons = {};
    this.viewer = viewer;
}

helpers.defineClass(MenuIcons, null, {
    load: function(menu){
        if (menu.$$menuIcons) {
            this.$$menuIcons = menu.$$menuIcons;
            this.$$menuIcons.empty();
        }
        else {
            this.appendMenuIcons(menu);
        }
        this.bindEvents();
    },
    appendMenuIcons: function(menu){
        var self = this;
        var div = document.createElement("div");
        div.className = "s-page-menus-icons";
        menu.$$container.append(menu.$$menuIcons = self.$$menuIcons = $(div));
    },
    empty: function(){
        if (this.$$menuIcons) {
            this.$$menuIcons.empty();
        }
    },
    setDiagnoseIcons: function(severity){
        if (this.$$menuIcons) {
            var self = this;
            var severityIcon = self.severityIcons[severity] = document.createElement("a");
            var countIcon = self.countIcons[severity] = document.createElement("a");
            severityIcon.className = "s-page-menus-icons-" + severity;
            countIcon.className = "s-page-menus-icons-count-" + severity;
        }
    },
    appendDiagnoseIcons: function(severity, count){
        var self = this;
        if (self.$$menuIcons) {
            self.$$menuIcons[0].appendChild(self.severityIcons[severity]);
            self.countIcons[severity].textContent = count;
            self.$$menuIcons[0].appendChild(self.countIcons[severity]);
        }
    },
    cleanDiagnoseIcons: function(severity){
        var self = this;
        if (self.$$menuIcons) {
            self.severityIcons[severity].style.display = "none";
            self.countIcons[severity].style.display = "none";
        }
    },
    bindEvents: function(){
        var self = this;
        self.viewer.page.menuBar.$$slot.delegate(".s-page-menus-icons-error,.s-page-menus-icons-fatal,.s-page-menus-icons-warning,.s-page-menus-icons-info", "click", function(){
            // go to next error field
            var errLinksArray = self.viewer.$$item.find("a.s-diag-view-msg-link");
            var len = errLinksArray.length;
            for (var i = 0; i < len; i++) {
            	var field = document.controller.findItem();
            }
            /*
             self.$$item.delegate("a.s-diag-view-msg-link", "click", function(){
             var field = document.controller.findItem($(this));
             if (field) {
             field.focus();
             }
             return false;
             });
             */
        }).delegate(".s-page-menus-icons-count-error,.s-page-menus-icons-count-fatal,.s-page-menus-icons-count-warning,.s-page-menus-icons-count-info", "click", function(){
            var scroller = new AreaScroller(document.site.$$body);
            scroller.scrollToTarget($("div.s-diag-view"), true);
        });
        
        //		bindEvents(bind){
        //        if (bind) {
        //            _$$item.delegate(".s-calendar-prev,.s-calendar-next", "click", function(){
        //                changeYear($(this).hasClass("s-calendar-prev"));
        //                return false;
        //            }).delegate(".s-calendar-my-item", "click", function(){
        //                clickCell($(this));
        //                close($(this));
        //                return false;
        //            });
        //        }
        //        else {
        //            _$$item.undelegate();
        //        }
        //    }
    }
});

function DiagnosesPanel(){
}

exports.DiagnosesPanel = helpers.defineClass(DiagnosesPanel, null, {
    _emptyViewer: function(){
        this.$$item.hide();
        if (this._menus) {
            this._menus.getArticle().removeItem(this._menus, true);
            delete this._menus;
        }
        if (this.groups) {
            this.groups.empty();
        }
        // TODO empty menu icons ?
    },
    appendToPage: function(page, $$container){
        this.page = page;
        this.$$item = $("<div class='s-diag-view'/>").prependTo($$container);
    },
    _refreshViewer: function(options, page){
        if (!this.disableViewer) {
        
            var menuIcons = new MenuIcons(this);
            
            if (options && options.menu) {
                menuIcons.load(options.menu)
            }
            else {
                if (page && page.menuBar) {
                    var menu;
                    page.menuBar._menusBox.menuItems.forEach(function(menuItem){
                        if (menuItem.$isAction) {
                            menu = menuItem;
                        }
                    });
                    if (menu) {
                        menuIcons.load(menu);
                    }
                }
            }
            
            var total = 0;
            var self = this;
            var localize = locale.resources(module)();
            self.$$diagCount.empty();
            self.$$body.empty();
            menuIcons.empty();
            self.groups._groups.forEach(function(group){
                var count = group.$$group.children().length;
                var domCount = document.createElement("div");
                domCount.setAttribute("id", 's-diag-view-count-' + group.severity);
                menuIcons.setDiagnoseIcons(group.severity);
                if (count) {
                    total += count;
                    group.$$group.appendTo(self.$$body);
                    self.$$diagCount[0].appendChild(domCount);
                    domCount.textContent = count;
                    // add diagnose icon and count icon + value to menu
                    menuIcons.appendDiagnoseIcons(group.severity, count);
                }
                if (count == 0) {
                    domCount.style.display = "none";
                    menuIcons.cleanDiagnoseIcons(group.severity);
                }
            });
            
            if (total > 0) {
                document.site.setZIndex(self.$$item.show()[0]);
            }
            else {
                self.$$item.hide();
            }
        }
    },
    /*
     onWindowResize: function(setMinimumDimensions){
     var style = this.$$body[0].style;
     var bodyHeight = document.site.$$body.height();
     var bodyWidth = document.site.$$body.width();
     if (setMinimumDimensions) {
     this.$$core[0].style.minWidth = "150px";
     this.$$body[0].style.minHeight = "30px";
     }
     this.$$core[0].style.maxWidth = (bodyWidth - 100) + "px";
     this.$$body[0].style.maxHeight = (bodyHeight - 200) + "px";
     
     // minHeight set to scrollbar height if any
     if (this._hasScrollBar(this.$$body)) {
     style.minHeight = this.$$body[0].scrollHeight;
     }
     },*/
    _hasScrollBar: function($$area){
        var _area = $$area[0]
        return (_area.clientHeight < _area.scrollHeight) || (_area.clientWidth < _area.scrollWidth);
    },
    _initializeCore: function(){
        var localize = locale.resources(module)();
        var self = this;
        //self.id = helpers.uuid.generate();
        //document.site.addResizeListener(self);
        
        var html = document.createElement("div");
        html.className = "s-diag-view-count";
        self.$$item.append(self.$$diagCount = $(html));
        
        html = document.createElement("div");
        html.setAttribute("id", "s-diag-view-core");
        
        self.$$item.append(self.$$core = $(html));
        
        html = document.createElement("div");
        html.className = "s-diag-view-msg-list";
        self.$$body = $(html);
        
        self.groups = new Groups(self);
        self.$$core.append(self.$$body);
        
        self.$$item.delegate("a.s-diag-view-msg-link", "click", function(){
            var field = document.controller.findItem($(this));
            if (field) {
                field.focus();
            }
            return false;
        });
        //self.onWindowResize(true);
    },
    drawLinks: function(message, page){
        page = page || this.page;
        var self = this;
        if (!self._menus) {
            self._menus = page.loadNewItem(self.$$item, {
                $category: "links",
                $skin: "s-diag-view-links",
                $isBindDisabled: true,
                $links: {},
                $actions: {}
            });
        }
        ["$links", "$actions"].forEach(function($type){
            var $menus = message[$type];
            if ($menus) {
                var $isAction = $type == "$actions";
                Object.keys($menus).forEach(function($bind){
                    var $menu = $menus[$bind];
                    var bound = page.menuItems[$menu.$bind || $bind];
                    if (bound) {
                        bound[0].setMenu($menu);
                    }
                    else {
                        $menu.$isAction = $isAction;
                        self._menus.addMenuItem($menu);
                    }
                });
            }
        });
    },
    showDiagnoses: function(message, page, options){
        var self = this;
        
        if (!page.diagnosesPanel) {
            page.showDiagnoses(message, options);
        }
        
        if (!page.diagnosesPanel.$$item) {
            self.appendToPage(page, $(page.dataSlot));
        }
        
        if (!self.$$core) {
            self._initializeCore();
        }
        if (!message || (!message.field && !message.$diagnoses)) {
            self._emptyViewer();
        }
        if (message.$diagnoses && message.$diagnoses.length > 0) {
            if (message.field) {
                self.groups.drawFieldDiagnoses(message.$diagnoses, message.field);
            }
            else {
                self.groups.drawDiagnoses(message.$diagnoses);
            }
        }
        else {
            self.groups.empty(message.field);
            if (message.field && message.field.domDiagnose) {
                message.field.emptyDiagnoseSlot();
            }
        }
        if (message.$links || message.$actions) {
            this.drawLinks(message, page);
        }
        
        if (!options || !options.noViewer) {
            self._refreshViewer(options, page);
            if (message.autoHide) {
                setTimeout(function(){
                    self._emptyViewer();
                }, 4000);
            }
        }
        
        //        if (options && options.menu) {
        //            self.appendMenuIcons(options.menu);
        //        }
        //        else 
        //            if (page && page.menuBar) {
        //                var menu;
        //                page.menuBar._menusBox.menuItems.forEach(function(menuItem){
        //                    if (menuItem.$isAction) {
        //                        menu = menuItem;
        //                    }
        //                });
        //                if (menu) {
        //                    self.appendMenuIcons(menu);
        //                }
        //            }
    },
    appendMenuIcons: function(menu){
        var self = this;
        if (!self.$hasMenuIcons) {
            var div = document.createElement("div");
            div.className = "s-page-menus-icons";
            menu.$$container.append(self.$$menuIcons = $(div));
            self.$hasMenuIcons = true;
        }
    },
    dispose: function(){
        //document.site.removeResizeListener(this);
        if (this.groups) {
            this.groups.dispose();
            delete this.groups;
        }
        if (this.$$item) {
            this.$$item.undelegate();
        }
        delete this.page;
    }
});
