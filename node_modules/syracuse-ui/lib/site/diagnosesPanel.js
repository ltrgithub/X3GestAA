"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var AreaScroller = require('syracuse-ui/lib/site/authoring/areaScroller').AreaScroller;

function Group(severity, viewer){
    var group = document.createElement("div");
    group.className = 's-diag-view-group-' + (this.severity = severity);
    this.$$group = $(group);
    this.viewer = viewer;
}

helpers.defineClass(Group, null, {
    empty: function(field){
        if (field) {
            this.$$group.children().children().children("a[data-s-menu=" + field.id + "]").parent().parent().remove();
        }
        else {
            this.$$group.empty();
        }
    },
    drawLabel: function($diagnose){
        var label = document.createElement("label");
        label.className = "s-diag-view-msg-label";
        var $$label = $(label);
        $$label.append(document.site.formatHTMLMessage($diagnose.message));
        return $$label;
    },
    drawDiagnose: function($diagnose, options){
        var self = this;
        var html = document.createElement("div");
        html.className = "s-diag-view-msg s-diag-view-msg-" + self.severity;
        var $$diagMsg = $(html);
        
        var $$label = self.drawLabel($diagnose);
        $$diagMsg[0].appendChild($$label[0]);
        // add field link if any
        if (options) {
            $$label.prepend(options.$$fieldLink);
            // push field and $$diagMsg into viewer _fieldDiagnoses array for focus purposes
            self.viewer.pushFieldDiagnose($$label[0], options.field);
        }
        // expand button if needed (line break or string max length)
        if ($$label.find("br")[0]) {//$diagnose.message.indexOf("\n") > 0
            var expandedText = $$label[0].innerHTML.substr($$label[0].innerHTML.indexOf("<br>") + "<br>".length);
            self._wrapTextToHide(expandedText, $$label, $$diagMsg);
        }
        else {
            var diagMaxLength = 130;
            if ($$label[0].textContent.length > diagMaxLength) {
                // getting understandable text from 100 first characters
                var maxLengthText = $$label[0].textContent.substr(0, diagMaxLength);
                var maxLengthTextWords = maxLengthText.split(/\s/);
                maxLengthTextWords.splice(maxLengthTextWords.length - 1);
                maxLengthText = maxLengthTextWords.join(" ");
                
                // wrap text to hide
                var expandedText = $$label[0].innerHTML.substr($$label[0].innerHTML.lastIndexOf(maxLengthText) + maxLengthText.length);
                self._wrapTextToHide(expandedText, $$label, $$diagMsg, true);
            }
        }
        
        // close button
        //self._appendDiagnoseCloseButton($$diagMsg);
        
        $$diagMsg[0].style.display = "none";
        self.$$group[0].appendChild($$diagMsg[0]);
    },
    _appendDiagnoseCloseButton: function($$diagMsg){
        var html = document.createElement("a");
        html.className = "s-diag-view-msg-close";
        $$diagMsg[0].appendChild(html);
    },
    _wrapTextToHide: function(textToHide, $$label, $$diagMsg, lineBreak){
        if (textToHide.match(/\S/g)) {
            $$label[0].innerHTML = $$label[0].innerHTML.replace(textToHide, (lineBreak ? "<br>" : "") + "<span class='s-diag-view-msg-expanded-text'>" + textToHide + "</span>");
            var expander = document.createElement("a");
            expander.className = "s-diag-view-msg-expand";
            $$diagMsg.append($(expander));
        }
    },
    appendToViewer: function($$body){
        this.$$group.appendTo($$body);
    },
    dispose: function(){
        this.$$count = this.$$group = null;
    }
});

function Groups(viewer){
    var self = this;
    self.severities = {};
    self._groups = (["fatal", "error", "warning", "info"]).map(function(severity){
        return self.severities[severity] = new Group(severity, viewer);
    });
    self.viewer = viewer;
}

helpers.defineClass(Groups, null, {
    getGroup: function(severity){
        // FDB - Take into account bad severity values
        if (severity == null || severity.length == 0) {
            severity = "error";
        }
        else {
            severity = severity.toLowerCase();
        }
        var grp = this.severities[severity];
        return grp ? grp : this.severities["error"];
    },
    drawFieldDiagnoses: function($diagnoses, field){
        var self = this;
        field.ensureDiagnoseSlot();
        var group;
        $diagnoses.forEach(function($diagnose){
            field.drawDiagnose($diagnose, group = self.getGroup($diagnose.severity));
            self.drawLinks($diagnose);
            //self.viewer.pushFieldDiagnose(field);
        });
        field.domDiagnose.style.visibility = "";
        if (group) {
            field.toggleDiagnose("s-" + group.severity, true);
        }
    },
    drawDiagnoses: function($diagnoses){
        var self = this;
        $diagnoses.forEach(function($diagnose){
            self.getGroup($diagnose.severity).drawDiagnose($diagnose);
            self.drawLinks($diagnose);
        });
    },
    drawLinks: function($diagnose){
        if ($diagnose.$links || $diagnose.$actions) {
            this.viewer.drawLinks($diagnose);
        }
    },
    empty: function(field){
        var self = this;
        self._groups.forEach(function(group){
            group.empty(field);
        });
    },
    appendToViewer: function($$body){
        this._groups.forEach(function(group){
            group.appendToViewer($$body);
        });
    },
    dispose: function(){
        var self = this;
        self._groups.forEach(function(group){
            delete self.severities[group.severity];
            group.dispose();
        });
        delete self._groups;
        delete self.viewer;
    }
});

function DiagnosesPanel(){
}

exports.DiagnosesPanel = helpers.defineClass(DiagnosesPanel, null, {
    _emptyViewer: function(){
        this._fieldDiagnoses = null;
        this.$$item.hide();
        this.$$expandLink.hide();
        this._hideDiagOpener();
        //this.$$item.css("visibility", "hidden");
        this._emptyMenus();
        this._emptyGroups();
        this._fitPageToContainer();
    },
    _emptyMenus: function(){
        if (this._menus) {
            this._menus.getArticle().removeItem(this._menus, true);
            delete this._menus;
        }
    },
    _emptyGroups: function(){
        if (this.groups) {
            this.groups.empty();
        }
    },
    appendToPage: function(page){
        this.page = page;
        var html = document.createElement("div");
        html.className = "s-diag-view";
        this.$$item = $(html).appendTo($(this.page.diagnoseSlot));
    },
    _refreshViewer: function(options, page){
        if (!this.disableViewer) {
            var self = this;
            
            self.total = 0;
            self.$$body.empty();
            self.groups._groups.forEach(function(group){
                var count = group.$$group.children().children("label").length;
                if (count) {
                    self.total += count;
                    group.$$group.appendTo(self.$$body);
                }
            });
            
            if (self.total > 0) {
                self.showDiagnosesPanel();
                //self._showDiagOpener();
            }
            else {
                self.$$item.hide();
                self._hideDiagOpener();
            }
            self._fitPageToContainer();
        }
    },
    _fitPageToContainer: function(){
        if (this.page.fitPageToContainer) {
            this.page.fitPageToContainer();
        }
    },
    showDiagnosesPanel: function(){
        var self = this;
        
        // show next nav button if necessary (field diagnoses > 0)
        var fieldDiag = [];
        fieldDiag = self.$$body.find("a.s-diag-view-msg-link");
        if (self._fieldDiagnoses.length > 0) {
            self.$$nextLink.show();
        }
        else {
            self.$$nextLink.hide();
        }
        
        
        var diagMsg = [];
        diagMsg = self.$$body.find("div.s-diag-view-msg");
        
        
        // show expand (more/less) button if necessary (total > 1)
        if (self.total > 1) { //(self.$$body.find("label").length > 1)
            // expand link text value for diagnose panel closed state
            var moreText = (self.total) - 1 == 0 ? self.localize.diag_expand : (self.total - 1) + self.localize.diag_expand;
            
            // if expand link already set
            if (self.$$expandLink[0].textContent) {
                // diagnoses panel is in opened mode
                if (self.$$expandLink[0].textContent.indexOf(self.localize.diag_collapse) != -1) {
                    for (var ii = 0; ii < diagMsg.length; ii++) {
                        diagMsg[ii].style.display = "block";
                    }
                }
                // diagnoses panel is in closed mode
                else {
                    for (var ii = 0; ii < diagMsg.length; ii++) {
                        diagMsg[ii].style.display = ii == 0 ? "block" : "none";
                    }
                    self.$$expandLink[0].textContent = moreText;
                }
            }
            // expand link not yet set
            else {
                for (var i = 0; i < diagMsg.length; i++) {
                    diagMsg[i].style.display = i == 0 ? "block" : "none";
                }
                self.$$expandLink[0].textContent = moreText;
            }
            self.$$expandLink.show();
        }
        else {
            if (self.total == 1) {
                diagMsg[0].style.display = "block";
                self.$$expandLink[0].textContent = "";
                self.$$expandLink.hide();
            }
        }
        
        self.$$item.show();
        self.$$diagCloser.show();
        document.site.setZIndex(self.$$item[0]);
        document.site.setZIndex(self.$$diagCloser[0]);
        document.site.setZIndex(self.$$diagNavBar[0]);
        document.site.setZIndex(self.$$expandLink.parent()[0]);
        self.$$diagOpener[0].style.display = "none";
    },
    updateExpandLinkText: function(newValue){
        this.$$expandLink[0].textContent = newValue;
    },
    _hasScrollBar: function($$area){
        var _area = $$area[0]
        return (_area.clientHeight < _area.scrollHeight) || (_area.clientWidth < _area.scrollWidth);
    },
    _initializeCore: function(){
        this.localize = locale.resources(module)();
        var self = this;
        
        var html = document.createElement("a");
        html.className = "s-diag-view-open";
        self.$$diagOpener = $(html);
        self.$$diagOpener[0].textContent = self.localize.diag_opener;
        self.$$diagOpener[0].style.display = "none";
        
        html = document.createElement("div");
        html.style.position = "relative";
        html.appendChild(self.$$diagOpener[0]);
        self.$$item.parent()[0].appendChild(html);
        
        self.$$diagOpener.bind("click", function(){
            self._onDiagOpenerClick();
        });
        
        var html = document.createElement("a");
        html.className = "s-diag-view-close";
        self.$$item.append(self.$$diagCloser = $(html));
        self.$$diagCloser.hide();
        
        self.$$diagCloser.bind("click", function(){
            if (self.$$item) {
                self.$$item[0].style.display = "none";
                self.$$expandLink[0].style.display = "none";
                self._showDiagOpener();
                self._fitPageToContainer();
            }
        });
        
        // navigation bar (more, next) 
        var html = document.createElement("div");
        html.className = "s-diag-view-navigation-bar";
        self.$$item.append(self.$$diagNavBar = $(html));
        
        // navigation links/buttons (next)
        
        html = document.createElement("a");
        html.className = "s-diag-view-nav-next";
        html.title = self.localize.diag_next_tooltip;
		html.textContent = self.localize.diag_next;
        self.$$diagNavBar.append(self.$$nextLink = $(html));
        self.$$nextLink.hide();
        
        html = document.createElement("div");
        //html.setAttribute("id", "s-diag-view-core");
        html.className = "s-diag-view-core";
        
        self.$$item.append(self.$$core = $(html));
        
        html = document.createElement("div");
        html.className = "s-diag-view-msg-list";
        self.$$body = $(html);
        
        self.groups = new Groups(self);
        self.$$core.append(self.$$body);
        
        html = document.createElement("a");
        html.className = "s-diag-view-count";
        
        // links area
        html = document.createElement("div");
        html.className = "s-diag-view-links-bar";
        self.$$item.append(self.$$diagViewLinks = $(html));
        
        html = document.createElement("a");
        html.className = "s-diag-view-nav-expand";
        self.$$expandLink = $(html);
        self.$$expandLink.hide();
        
        html = document.createElement("div");
        html.style.position = "relative";
        html.appendChild(self.$$expandLink[0]);
        self.$$item.parent()[0].appendChild(html);
        
        
        self.$$expandLink.bind("click", function(){
            // expand link text value for diagnose panel closed state
            var moreText = (self.total) - 1 == 0 ? self.localize.diag_expand : (self.total - 1) + self.localize.diag_expand;
            
            // getting all diagnoses in diagnose panel
            var diagMsg = [];
            diagMsg = self.$$body.find("div.s-diag-view-msg");
            
            // precondition 1 : is a diag focused ?
            var diagFocused;
            for (var ii = 0; ii < diagMsg.length; ii++) {
                if (diagMsg[ii].children[0].className.indexOf("s-diag-view-msg-focus") > -1) {
                    diagFocused = ii;
                }
            }
            
            // precondition 2 : was expand link on diagnose panel opened/closed state ?
            // expand link previously on diagnose panel opened state
            if (self.$$expandLink[0].textContent.indexOf(self.localize.diag_collapse) > -1) {
            
                // precondition 1 true
                if (diagFocused != undefined) {
                    for (var ii = 0; ii < diagMsg.length; ii++) {
                        diagMsg[ii].style.display = "none";
                    }
                    diagMsg[diagFocused].style.display = "block";
                }
                // precondition 1 false
                else {
                    for (var ii = 0; ii < diagMsg.length; ii++) {
                        diagMsg[ii].style.display = ii == 0 ? "block" : "none";
                    }
                }
                self.$$expandLink[0].textContent = moreText;
                
            }
            // expand link previously on diagnose panel closed state
            else {
                for (var ii = 0; ii < diagMsg.length; ii++) {
                    diagMsg[ii].style.display = "block";
                }
                self.$$expandLink[0].textContent = self.localize.diag_collapse;
            }
            self._fitPageToContainer();
        });
        
        self.$$item.delegate("a.s-diag-view-msg-link", "click", function(){
            var field = document.controller.findItem($(this));
            if (field) {
                self.focusField(field);
                self.onNavigationClick(0, field);
            }
            return false;
        }).delegate("a.s-diag-view-msg-expand, a.s-diag-view-msg-collapse", "click", function(){
            $(this).parent().find("span").toggle();
            $(this).toggleClass("s-diag-view-msg-expand").toggleClass("s-diag-view-msg-collapse");
            self._fitPageToContainer();
            return false;
        }).delegate("a.s-diag-view-msg-close", "click", function(){
            //self._onDiagnoseClose($(this));
        }).delegate("a.s-diag-view-nav-next", "click", function(){// bind actions for navigation link
            self.onNavigationClick($(this)[0]);
        });
        
        self.pageScroller = new AreaScroller(this.page.$$body);
        self.diagPanelScroller = new AreaScroller(this.$$core);
    },
    _showDiagOpener: function(){
        if (this.$$diagOpener) {
            document.site.setZIndex(this.$$diagOpener[0]);
            this.$$diagOpener[0].style.display = "inline-block";
        }
    },
    _hideDiagOpener: function(){
        if (this.$$diagOpener) {
            this.$$diagOpener.hide();
        }
    },
    onNavigationClick: function(navLink, field){
        var self = this;
        var index;
        
        for (var ii = 0; ii < self._fieldDiagnoses.length; ii++) {
            if (self._fieldDiagnoses[ii].label.className.indexOf("s-diag-view-msg-focus") > -1) {
                index = ii;
                break;
            }
        }
        if (!navLink && field) {
            for (var ii = 0; ii < self._fieldDiagnoses.length; ii++) {
                if (self._fieldDiagnoses[ii].field.id == field.id) {
                    index = ii;
                    break;
                }
            }
        }
        else {
        
            if (index != undefined) {
            
                if (index == (self._fieldDiagnoses.length - 1)) {
                    index = 0;
                }
                else {
                    index++;
                }
                
            }
            else {
                index = 0;
            }
        }
        self.focusField(self._fieldDiagnoses[index].field);
        self.focusDiag(index, self._fieldDiagnoses[index].label);
        
        // if in collapse mode, show focused diag
        if (self.$$expandLink[0].textContent.indexOf(self.localize.diag_expand) > -1) {
            var diagMsg = [];
            diagMsg = self.$$body.find("div.s-diag-view-msg");
            for (var ii = 0; ii < diagMsg.length; ii++) {
                diagMsg[ii].style.display = "none";
            }
            $(self._fieldDiagnoses[index].label).parent().show();
        }
    },
    _onDiagOpenerClick: function(){
        var self = this;
        if (self.$$diagOpener) {
            if (self.$$item) {
                self.$$item[0].style.display = "block";
                self.$$expandLink[0].style.display = self.$$expandLink[0].textContent ? "inline-block" : "none";
                self._hideDiagOpener();
                self._fitPageToContainer();
            }
        }
    },
    _onDiagnoseClose: function($$closeButton){
        var self = this;
        //TODO : update self.total, update expandLink text value, hide $$item if no diag left
        var diagMsg = [];
        diagMsg = self.$$body.find("div.s-diag-view-msg");
        var isLastDialog = diagMsg.length == 1 ? true : false;
        $$closeButton.parent().remove();
        if (isLastDialog) {
            self._emptyViewer();
        }
        else {
            self.total--;
            if (self.$$expandLink[0].textContent.indexOf(self.localize.diag_expand) != -1) {
                diagMsg[1].style.display = "block";
                if (self.total == 1) {
                    self.$$expandLink.hide();
                }
                else {
                    self.$$expandLink[0].textContent = (self.total - 1) + self.localize.diag_expand;
                }
            }
            else {
                if (self.total == 1) {
                    self.$$expandLink.hide();
                }
            }
        }
        self._fitPageToContainer();
        return false;
    },
    focusField: function(field){
        if (!(field.focus && field.focus())) {
            this.pageScroller.scrollToTarget(field.$$item, true);
        }
    },
    focusDiag: function(index, label){
        var self = this;
        for (var ii = 0; ii < self._fieldDiagnoses.length; ii++) {
            if (ii == index) {
                document.site.toggleClass(label, "s-diag-view-msg-focus", true);
            }
            else {
                document.site.toggleClass(self._fieldDiagnoses[ii].label, "s-diag-view-msg-focus");
            }
        }
        this.diagPanelScroller.scrollToTarget($(label).parent(), true);
    },
    pushFieldDiagnose: function(label, field){
        var self = this;
        if (self._fieldDiagnoses) {
            var diag = {};
            diag.label = label;
            diag.field = field;
            self._fieldDiagnoses.push(diag);
        }
    },
    _removeFieldDiagnose: function(field){
        var self = this;
        if (self._fieldDiagnoses) {
            var index;
            // getting index of field to remove
            for (var ii = 0; ii < self._fieldDiagnoses.length; ii++) {
                index = self._fieldDiagnoses[ii].field.id == field.id ? ii : index;
                if (index != undefined) {
                    break;
                }
            }
            // removing field from array
            if (index != undefined) {
                self._fieldDiagnoses.splice(index, 1);
            }
        }
    },
    _updateFieldFocusHandling: function(field){
        // remove field from viewer._fieldDiagnoses array
        this._removeFieldDiagnose(field);
        // reset viewer.numFocusedField value
        this.numFocusedField = 0;
    },
    drawLinks: function(message, page){
        page = page || this.page;
        var self = this;
        if (!self._menus) {
            self._menus = page.loadNewItem(self.$$diagViewLinks, {
                $category: "links",
                $skin: "s-diag-view-links",
                $isBindDisabled: true,
                $links: {},
                $actions: {}
            });
        }
        ["$links", "$actions"].forEach(function($type){
            var $menus = message[$type];
            if ($menus) {
                var $isAction = $type == "$actions";
                Object.keys($menus).forEach(function($bind){
                    var $menu = $menus[$bind];
                    var bound = page.menuItems[$menu.$bind || $bind];
                    if (bound && bound[0]) {
                        bound[0].setMenu($menu);
                    }
                    else {
                        $menu.$isAction = $isAction;
                        self._menus.addMenuItem($menu);
                    }
                });
            }
        });
    },
    showDiagnoses: function(message, page, options){
        var self = this;
        
        if (!message || (!message.field && !message.$diagnoses)) {
            self._emptyViewer();
            if (options) {
                // for further usage ?
            }
        }
        else {
            if (!self.$$core) {
                self._initializeCore();
            }
            self._fieldDiagnoses = self._fieldDiagnoses || [];
            if (message.$diagnoses && message.$diagnoses.length > 0) {
                if (message.field) {
                    self.groups.drawFieldDiagnoses(message.$diagnoses, message.field);
                }
                else {
                    self.groups.drawDiagnoses(message.$diagnoses);
                }
            }
            else {
                self.groups.empty(message.field);
                if (message.field && message.field.domDiagnose) {
                    message.field.emptyDiagnoseSlot();
                }
                self._updateFieldFocusHandling(message.field);
            }
            
            if (message.$links || message.$actions) {
                this.drawLinks(message, page);
            }
            
            if (options) {
                // for further usage ?
            }
            
            if (!options || !options.noViewer) {
                self._refreshViewer(options, page);
                if (message.autoHide) {
                    setTimeout(function(){
                        self._emptyViewer();
                    }, 4000);
                }
            }
        }
    },
    dispose: function(){
        if (this.groups) {
            this.groups.dispose();
            delete this.groups;
        }
        
        if (this.total) {
            delete this.total;
        }
        
        if (this.$$item) {
            this.$$item.undelegate();
        }
        if (this.$$nextLink) {
            this.$$nextLink.unbind();
        }
        
        if (this.$$diagCloser) {
            this.$$diagCloser.unbind();
        }
        if (this.$$diagOpener) {
            this.$$diagOpener.unbind();
        }
        if (this.$$expandLink) {
            this.$$expandLink.unbind();
        }
        if (this.pageScroller) {
            this.pageScroller.dispose();
            delete this.pageScroller;
        }
        if (this.diagPanelScroller) {
            this.diagPanelScroller.dispose();
            delete this.diagPanelScroller;
        }
        this._hideDiagOpener();
        
        delete this.page;
    }
});
