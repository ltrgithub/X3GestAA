"use strict";

var _listeners = {
	colResizers: [],
	pageObservers: [],
	barResizers: []
};

exports.ddAgent = null;
exports.dropableItem = null;


exports.cancel = function() {
	delete exports.dropableItem;
};
exports.start = function(observer, DragDropClass, boundary) {
	if (exports.dropableItem) {
		exports.ddAgent = new DragDropClass();
		exports.ddAgent.start(exports.dropableItem, observer, boundary);
		document.body.className += " s-unselectable";
		delete exports.dropableItem;
	}
};
exports.stop = function() {
	this.cancel();
	if (exports.ddAgent) {
		if (exports.ddAgent.stop) {
			exports.ddAgent.stop();
		}
		document.body.className = document.body.className.replace(" s-unselectable", "");
		exports.ddAgent.dispose();
		delete exports.ddAgent;
	}
	syra_site.layoutSlot.style.cursor = "default";
};

function _addToListeners(listeners, listener, add) {
	if (add) {
		listeners.push(listener);
	} else {
		var ii = listeners.indexOf(listener);
		if (ii >= 0) {
			listeners.splice(ii, 1);
		}
	}
}

exports.hasPageObserver = function() {
	return _listeners && _listeners.pageObservers.length > 0;
};

exports.addToPageObservers = function(listener, add) {
	_listeners && _addToListeners(_listeners.pageObservers, listener, add);
};
exports.addToColResizers = function(listener, add) {
	_listeners && _addToListeners(_listeners.colResizers, listener, add);
};

exports.addToBarResizers = function(listener, add) {
	_listeners && _addToListeners(_listeners.barResizers, listener, add);
};

function _walkOnDown(listeners, target, event) {
	if (listeners) {
		for (var ii = 0, jj = listeners.length; ii < jj; ii++) {
			var item = listeners[ii].isDraggable(target, event);
			if (event.syraRetValue === false || item) {
				syra_dd.dropableItem = item;
				event.preventDefault();
				event.stopPropagation();
				return true;
			}
		}
	}
}


exports.onDowEvent = function(event) {
	if (_listeners) {
		var target = event.target;
		while (target) {
			if (target.syraDragSpot) {
				if (_walkOnDown(_listeners.colResizers, target, event)) {
					return;
				}
				if (_walkOnDown(_listeners.barResizers, target, event)) {
					return;
				}
				if (_walkOnDown(_listeners.pageObservers, target, event)) {
					return;
				}
			}
			if (target.syraPage) {
				break; //boundary is page
			}
			target = target.parentNode;
		}
	}
};


function _walkOnMove(listeners, target, event) {
	var done;
	for (var mm = 0, kk = listeners.length; mm < kk; mm++) {
		var listener = listeners[mm];
		if (listener.onDragMove) {
			var result = listener.onDragMove(target, event);
			done = true;
			if (result !== true) {
				result === false && event.stopPropagation();
				break;
			}
		}
	}
	return done;
}

function _walkOnMove2(listeners, target, event) {
	var done;
	for (var mm = 0, kk = listeners.length; mm < kk; mm++) {
		var observer = listeners[mm];
		if (observer.onDragMove) {
			var result = observer.onDragMove(target, event);
			if (result !== true) {
				done = true; //diff avec move1
				result === false && event.stopPropagation();
				break;
			}
		}
	}
	return done;
}

exports.onMoveEvent = function(event) {
	if (_listeners) {
		var target = event.target;
		var done;
		while (target) {
			if (target.syraDragSpot) {
				if (syra_dd.ddAgent) {
					done = _walkOnMove(_listeners.colResizers, target, event);
					if (!done) {
						done = _walkOnMove2(_listeners.barResizers, target, event);
					}
				}
				if (!done) {
					done = _walkOnMove2(_listeners.pageObservers, target, event);
				}
				break;
			}
			target = target.parentNode;
		}
		if (!done && syra_dd.ddAgent) {
			syra_dd.ddAgent.onDragMouseMove(event.target, event);
			event.preventDefault();
			event.stopPropagation();
		}
	}
};

exports.dispose = function() {
	_listeners = exports.dropableItem = exports.ddAgent = null;
};