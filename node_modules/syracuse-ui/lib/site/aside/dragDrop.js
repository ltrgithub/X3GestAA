"use strict";
var helpers = require('syracuse-core/lib/helpers');
function DragDrop(){
}

exports.DragDrop = helpers.defineClass(DragDrop, null, {
    setDraggable: function(source, $$hotspot){
        var self = this;
        self.id = helpers.uuid.generate();
        self.source = source;
        (self.$$hotSpot = $$hotspot || self.source.$$container).bind("mousedown." + self.id, function(event){
            var offset = self.source.$$container.offset();
            self.startPosition = {
                top: offset.top - event.pageY,
                left: offset.left - event.pageX,
            };
            self.start(self.source.$$container);
            return false;
        });
    },
    start: function($$source, $$boundary){
        var self = this;
        self.$$source = $$source;
        
        $$boundary = $$boundary || document.site.$$body;
        self.boundary = $$boundary.offset();
        self.boundary.right = self.boundary.left + $$boundary.width();
        self.boundary.bottom = self.boundary.top + $$boundary.height();
        $(document).bind("mouseup." + self.id, function(){
            self.stop();
            delete document.site.DDAuthoring;
        }).bind("mousemove." + self.id, function(event){
            self._moveDragImage(event);
            event.preventDefault();
        });
    },
    _moveDragImage: function(event, isValidate){
        /* var top = Math.max(event.pageY, this.boundary.top);
         var left = Math.max(event.pageX, this.boundary.left);
         top = Math.min(top, this.boundary.bottom);
         left = Math.min(left, this.boundary.right);
         
         var inBoundary = (event.pageX == left && event.pageY == top);
         */
        var style = this.$$source[0].style;
        style.top = (this.startPosition.top + event.pageY) + "px";
        style.left = (this.startPosition.left + event.pageX) + "px";
        
    },
    stop: function(){
        $(document).unbind("." + this.id);
    },
    dispose: function(){
        if (this.$$hotSpot) {
            this.$$hotSpot.unbind("." + this.id);
        }
        delete this.source;
        this.stop();
        
        delete this.$$source;
    }
});
