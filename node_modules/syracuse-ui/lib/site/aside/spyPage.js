"use strict";
var helpers = require("syracuse-core/lib/helpers")
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;

function SpyPage() {}

exports.SpyPage = helpers.defineClass(SpyPage, DesktopPage, {
	loadBox: function($fieldsPrototype, initData, $initDiagnoses) {
		var self = this;
		self.$prototype = {
			$title: "Survey Page",
			$properties: {
				$fieldPrototype: {
					"$title": "Prototype",
					"$type": "application/x-string"
				},
				$fieldNotify: {
					"$type": "application/x-string"
				},
				$fieldDataset: {
					"$title": "Dataset",
					"$type": "application/x-string"
				},
				$fieldReceive: {

					"$type": "application/x-string"
				}
			},
			$actions: {
				$notifyData: {
					$title: "notify"
				},
				$receiveData: {
					$title: "receive"
				}
			}
		};
		self.$item = {
			$layout: {
				$items: [{
					$layoutType: "row",
					$items: [{
						$bind: "$fieldPrototype",
						$isEditMode: true,
						$rows: 50,
						$isAutoSizeDisabled: true,
						$skin: "s-json-field"
					}, {
						$bind: "$fieldDataset",
						$isEditMode: true,
						$rows: 50,
						$isAutoSizeDisabled: true,
						$skin: "s-json-field"
					}, {
						$layoutType: "stack",
						$items: [{
							$category: "section",
							"$title": "notify",
							$layout: {
								$items: [{
									$skin: "s-record-menus-link",
									$category: "link",
									$bind: "$notifyData"
								}, {
									$bind: "$fieldNotify",
									isTitleHidden: true,
									$isEditMode: true,
									$rows: 20,
									$isAutoSizeDisabled: true,
									$skin: "s-json-field"
								}]
							}

						}, {
							$category: "section",
							"$title": "receive",
							$layout: {
								$items: [{
									$skin: "s-record-menus-link",
									$category: "link",
									$bind: "$receiveData"
								}, {
									$bind: "$fieldReceive",
									isTitleHidden: true,
									$isEditMode: true,
									$rows: 20,
									$isAutoSizeDisabled: true,
									$skin: "s-json-field"
								}]
							}

						}]

					}]
				}]
			}
		};
		self.$autoFetch = false;
		DesktopPage.prototype.loadBox.call(self, initData, $initDiagnoses);
		if (window.opener && window.opener.document.site) {
			window.opener.document.site.spyGateway.onSpyPageLoaded(this);
		}
	},
	notifyActionChange: function(target, value) {
		if (value.$notifyData || value.$receiveData) {
			try {
				if (value.$receiveData) {
					window.opener.document.site.spyGateway.getSpyedPage().applyChange(JSON.parse(this.boundFields.$fieldReceive[0].getDataValue()));
				}
				if (value.$notifyData) {
					window.opener.document.site.spyGateway.getSpyedPage().notifyChangeToServer(JSON.parse(this.boundFields.$fieldNotify[0].getDataValue()));
				}
			} catch (error) {
				document.site.showDiagnoses({
					$diagnoses: [{
						$message: error.message
					}]
				});
			}
			return;
		}
		DesktopPage.prototype.notifyActionChange.call(this, target, value);
	},
	spyNotify: function($notify) {
		this.boundFields.$fieldNotify[0].setDataValue($notify ? JSON.stringify($notify, null, 2) : "");

	},
	spyPrototype: function($prototype) {
		this.boundFields.$fieldPrototype[0].setDataValue(JSON.stringify($prototype, null, 2));
		this.spyDataset(null);
		this.spyNotify(null);
	},
	spyDataset: function($dataset, $receive) {
		this.boundFields.$fieldDataset[0].setDataValue($dataset ? JSON.stringify($dataset, null, 2) : "");
		this.boundFields.$fieldReceive[0].setDataValue($receive ? JSON.stringify($receive, null, 2) : "");
	}
});