"use strict";
var List = require('syracuse-ui/lib/scroll/list').List;
var OverPanel = require('syracuse-ui/lib/over/overPanel');
var classicActions = require('syracuse-ui/lib/fusion/core/client/sap/srvactions');

var _list, _preferenceKey = "devToolsPanel";
var _classicFunctionLinks = ["GMAINT", "LCKSRC", "VERSYMB", "XXSEATRT", "ARECSRC", "RECHMESS", "LECTRACE", "EXETRT"];
var _classicPageLinks = ["SRV_ADXEXECUTE", "SRV_CALCULATRICE", "SRV_DEBUGGER", "LCL_TOGGLE_LOG"];
var _commonPageLinks = ["site_help_center"];
var _menuItemsClassicPage = {};
var _menuItemsClassicFunc = {};
var _menuItemsCommons = {};
var _panelTitle = "Dev tools for ";
var _linkCss = "s-list-primary-btn-devtool-default s-list-primary-btn-default";

exports.openByShortCut = function(page, field) {
	page.externalAdapter.onFieldClickPicker({
		field: field || page,
		pickerType: "devTools",
		doEvent: function() {
			exports.openPopup(syra_site.btns.devTools, page, field);
		}
	});
};

exports.openPopup = function(menuItem, page, item) {
	var ep, sty, i, j, len;
	if (menuItem && menuItem.$item && menuItem.$item.$classicFunction) {
		syra_fusion.executeFusionFunc({
			"urlSeg": {
				"fusionParams": {
					"functionCode": menuItem.$item.$classicFunction
				}
			}
		}, syra_fusion.activatedBook);
	} else {
		if (!syra_site.devTooslPanel) {
			ep = syra_site.userProfile.getSelectedEndpoint();
			syra_site.devToolsPanelonChangeEP = exports.devToolsPanelonChangeEP;
			_list = new List({
				css: "s-list-primary"
			});
			_list.collapseButton = _list.addButton({
				parent: _list,
				text: _panelTitle + ep.dataset,
				css: "s-list-primary-btn-devtool-header s-list-primary-btn-primary",
				fontIcon: "node_expanded",
				click: exports.collapse
			});
			_list._items = [];
			_list._currentItem = 0;
			_list.isExpanded = true;
			sty = "s-list-primary-bottom-sep";
			for (i = 0; i < 3; i++) {
				_menuItemsCommons[sty + i] = _list.addLine(sty);
			}
			for (j = 0, len = _commonPageLinks.length; j < len; j++) {
				_menuItemsCommons[_commonPageLinks[j]] = _list.addItem(syra_site, {
					$bind: _commonPageLinks[j],
					$category: "link",
					$skin: _linkCss
				});
				_list._items.push(_menuItemsCommons[_commonPageLinks[j]]);
			}
			_menuItemsCommons[sty + (++i)] = _list.addLine(sty);
			if (page && page.isFusionPage) {
				addClassicFunctionLinks(syra_site);
				addClassicPageLinks(page);
			}
			syra_site.devTooslPanel = syra_over.openPopup(syra_site, {
				content: syra_site,
				slot: _list.scrollSlot,
				picker: menuItem.domItem,
				$isAutoClose: false,
				resizable: null,
				closeButton: true,
				draggable: true,
				position: {
					my: "left top",
					at: "left bottom",
					of: menuItem.domItem
				},
				onresize: function(maxHeight, panel) {
					_applyPreferences(panel, _list);
					if (_list) {
						_list.resize(maxHeight);
						exports.setFocus();
					}
				},
				onOpened: function(panel) {
					_applyPreferences(panel, _list);
					exports.setFocus();
				},
				onEndDrag: function(panel) {
					_savePreferences(panel, _list);
				},
				close: function() {
					_savePreferences(syra_site.devTooslPanel, _list);
					if (_list) {
						_list.collapseButton && syra_button.dispose(_list.collapseButton);
						_list.dispose();
						_list._items = [];
						_list = null;
					}
					exports.cleanupLinks(true);
					syra_site.devTooslPanel = null;
				}
			});
		} else {
			exports.dispose();
		}
	}
	return true;
};

exports.scroll = function(direction) {
	var len;
	if (_list && _list.isExpanded && (len = _list._items.length) > 1) {
		_list._currentItem += (direction == "down" ? 1 : -1);
		_list._currentItem = _list._currentItem < 0 ? _list._items.length - 1 : (_list._currentItem == len ? 0 : _list._currentItem);
		exports.setFocus();
	}
};

exports.validate = function() {
	if (_list && _list.isExpanded && _list._currentItem >= 0) {
		_list._items[_list._currentItem].domItem.click();
	} else if (_list && !_list.isExpanded) {
		exports.collapse();
	}
};

exports.collapse = function(event) {
	if (_list) {
		_expand(!_list.isExpanded);
	}
};

exports.setFocus = function() {
	if (_list && _list.isExpanded) {
		_list._currentItem = _list._currentItem >= 0 && _list._currentItem < _list._items.length ? _list._currentItem : 0;
		_list._items[_list._currentItem].domItem.focus();
	}
};

exports.devToolsPanelonChangeEP = function(newEp) {
	if (syra_site.devTooslPanel && _list.collapseButton) {
		syra_button.setText(_list.collapseButton, _panelTitle + (newEp.dataset || ""));
	}
};

function addClassicPageLinks(page) {
	var i, len = _classicPageLinks.length;
	for (i = 0; i < len; i++) {
		_menuItemsClassicPage[_classicPageLinks[i]] = _list.addItem(page, {
			$bind: classicActions[_classicPageLinks[i].substr(0, 4) === "SRV_" ? "getSrvAction" : "getLocalAction"](_classicPageLinks[i]),
			$category: "link",
			$skin: _linkCss
		}, i != 0 ? null : "s-list-primary-top-sep");
		if (!_list.isExpanded) {
			syra_dom.hide(_menuItemsClassicPage[_classicPageLinks[i]].layoutSlot, true);
		}
		_list._items.push(_menuItemsClassicPage[_classicPageLinks[i]]);
	}
}

function addClassicFunctionLinks(page) {
	var i, len = _classicFunctionLinks.length;
	for (i = 0; i < len; i++) {
		_menuItemsClassicFunc[_classicFunctionLinks[i]] = _list.addItem(page, {
			$bind: "site_devTools",
			$category: "link",
			$title: _classicFunctionLinks[i],
			$classicFunction: _classicFunctionLinks[i],
			$skin: _linkCss
		});
		if (!_list.isExpanded) {
			syra_dom.hide(_menuItemsClassicFunc[_classicFunctionLinks[i]].layoutSlot, true);
		}
		_list._items.push(_menuItemsClassicFunc[_classicFunctionLinks[i]]);
	}
}

function _savePreferences(panel, list) {
	if (panel) {
		localStorage.setItem(_preferenceKey, JSON.stringify({
			$top: panel.overSlot.style.top,
			$left: panel.overSlot.style.left,
			$isCollapsed: !list.isExpanded,
			$currItem: list._currentItem
		}));
	}
}

function _applyPreferences(panel, list) {
	var pref = localStorage.getItem(_preferenceKey);
	pref = pref && JSON.parse(pref) || null;
	if (pref) {
		if (panel) {
			if (pref.$top != null) {
				panel.overSlot.style.top = pref.$top;
			}
			if (pref.$left != null) {
				panel.overSlot.style.left = pref.$left;
			}
		}
		if (list) {
			if (pref.$isCollapsed != null && pref.$isCollapsed == list.isExpanded) {
				_expand(!pref.$isCollapsed);
			}
			if (pref.$currItem != null) {
				list._currentItem = pref.$currItem != null && pref.$currItem >= 0 && pref.$currItem < _list._items.length ? pref.$currItem : 0;
				exports.setFocus();
			}
		}
	}
}

function _clearPreferences() {
	localStorage.removeItem(_preferenceKey);
}

function _expand(expand) {
	var item, i, j, leni, lenj, arr, coll = [_menuItemsCommons, _menuItemsClassicFunc, _menuItemsClassicPage];
	for (j = 0, lenj = coll.length; j < lenj; j++) {
		arr = Object.keys(coll[j]);
		for (i = 0, leni = arr.length; i < leni; i++) {
			if ((item = coll[j][arr[i]])) {
				syra_dom.hide(item.layoutSlot || item, !expand);
			}
		}
	}
	syra_button.setText(_list.collapseButton, undefined, expand ? "node_expanded" : "node_collapsed");
	_list.collapseButton.link.syraTipTitle = expand ? syra_local.nvpCollapseSubModule : syra_local.nvpExpandSubModule;
	_list.isExpanded = expand;
	exports.setFocus();
	_savePreferences(syra_site.devTooslPanel, _list);

}
exports.cleanupLinks = function(dispose) {
	var arr, i, len, item;
	if (syra_site.devTooslPanel || dispose) {
		arr = Object.keys(_menuItemsClassicPage);
		len = arr.length;
		for (i = 0; i < len; i++) {
			if ((item = _menuItemsClassicPage[arr[i]])) {
				syra_dom.remove(item.layoutSlot);
			}
		}
		if (len > 0 && _list) {
			_list._items.splice(_list._items.length - len, len);
		}
		_menuItemsClassicPage = {};
		arr = Object.keys(_menuItemsClassicFunc);
		len = arr.length;
		for (i = 0; i < len; i++) {
			if ((item = _menuItemsClassicFunc[arr[i]])) {
				if (!dispose) {
					item.disable(true);
				} else {
					item.dispose();
				}
			}
		}
		if (len > 0 && _list && dispose) {
			_list._items.splice(_list._items.length - len, len);
		}
		if (dispose) {
			arr = Object.keys(_menuItemsCommons);
			len = arr.length;
			for (i = 0; i < len; i++) {
				if ((item = _menuItemsCommons[arr[i]])) {
					if (item.dispose) {
						item.dispose();
					} else {
						syra_dom.remove(item);
					}
				}
			}
			_menuItemsClassicFunc = {};
			_menuItemsCommons = {};
		}
	}
};

exports.restoreLinks = function(page) {
	var arr, i, len, item;
	if (syra_site.devTooslPanel) {
		arr = Object.keys(_menuItemsClassicFunc);
		len = arr.length;
		if (len) {
			for (i = 0; i < len; i++) {
				if ((item = _menuItemsClassicFunc[arr[i]])) {
					item.disable(false);
				}
			}
		} else {
			addClassicFunctionLinks(syra_site);
		}
		arr = Object.keys(_menuItemsClassicPage);
		if (!arr.length) {
			addClassicPageLinks(page);
		}
	}
};

exports.dispose = function() {
	syra_site.devTooslPanel && syra_site.devTooslPanel.close();
};