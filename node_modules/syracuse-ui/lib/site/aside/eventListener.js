"use strict";
var helpers = require('syracuse-core/lib/helpers');
var keyboardShortCut = require('syracuse-ui/lib/site/aside/keyboardShortCut');

function EventListener() {}

exports.EventListener = helpers.defineClass(EventListener, null, {
	load: function() {
		this._bindGlobalEvent();
		this._bindShortCut();
		this._bindPageTitleClick();
		this._bindMenuClick();
		this._bindFieldEvents();
		this._bindSearchFacetEvents();
		this._bindResize();
		this._bindListEvents();
		this._bindChoiceFieldList();
		this._bindBox();
		this._bindDiagnoseEvents();
		this.tabKeyDownEvt = null;
		this.keysDown = [];
		this.keysOk = [];
	},
	_bindGlobalEvent: function() {
		document.site.$$layoutSlot.bind("click", function(event) {
			if (!document.site.authorPage) {
				var availableTarget = false;
				document.site.toggleTopPanel(false, event);
				if (document.site.mainPage && document.site.mainPage.isFusionPage) {
					var $$target = $(event.target);
					["data-s-menu", "data-s-field", "data-s-picker"].some(function(selector) {
						if ((event.target.getAttribute(selector) != null) || $$target.closest("[" + selector + "]").length > 0) return availableTarget;
					});
					if (!availableTarget) {
						if ($$target.closest("[data-s-fusion-page]").length > 0) {
							return document.site.mainPage.externalAdapter.onGlobalClick(event);
						}
					}
				}
			}

		});
	},
	_bindShortCut: function() {
		var self = this;
		document.site.$$layoutSlot.delegate("*", "keydown keyup", function(event) {
			var elem = document.site;
			if (event.type == "keydown") {
				self.applyShortCut = false;
				if (keyboardShortCut.getNoModShortcut().indexOf(event.keyCode) !== -1) { // no modifier needed we add it
					self.keysDown.push(event.keyCode);
					self.keysOk.push(event.keyCode);
				}
				if (event.keyCode === keyboardShortCut.getModifier() && self.keysDown.indexOf(event.keyCode) === -1) { // first keydown to add is modifier
					self.keysDown.push(event.keyCode);
					self.keysOk.push(event.keyCode);
				}
				if (self.keysDown.indexOf(keyboardShortCut.getModifier()) !== -1) { // if modifier exists add other keydown
					if (self.keysDown.indexOf(event.keyCode) === -1) {
						self.keysDown.push(event.keyCode);
					}
					if (self.keysOk.indexOf(event.keyCode) === -1) {
						self.keysOk.push(event.keyCode);
					}
					// save the time when keydown on modifier
				}
				if ((self.keysDown.length >= 0 || (self.keysDown.length === 3 && event.shiftKey)) && ((keyboardShortCut.getModifier() === event.keyCode) || (self.keysDown.length !== 0 && (self.keysDown.indexOf(keyboardShortCut.getModifier()) !== -1 || keyboardShortCut.getNoModShortcut().indexOf(self.keysDown[0]) !== -1) && event))) { // if modifier exists try perform shortcut
					self.applyShortCut = keyboardShortCut.applyKeyboardShortCut2({
						isFusion: elem.fusionGateway && elem.fusionGateway._books && elem.fusionGateway._books.length && elem.fusionGateway._books[0].selectedSheet != null,
						keysDown: self.keysOk,
						event: event,
						eventListener: self
					});

					if (keyboardShortCut.getNoModShortcut().indexOf(self.keysDown[0]) !== -1 || self.applyShortCut) {
						self.keysOk = [];
						self.keysDown = [];
					}
					return !self.applyShortCut;
				}
			}
			if (event.type == "keyup") {
				if (self.keysDown.indexOf(event.keyCode) !== -1) {
					self.keysDown.splice(self.keysDown.indexOf(event.keyCode), 1);
				}
				if (event.keyCode === keyboardShortCut.getModifier()) { // if keyup modifier , erase keysdown
					self.keysOk = [];
					self.keysDown = [];
					var field = document.site.lastFocusField;
					if (field && !self.applyShortCut) {
						event.type = 'keydown';
						event.keyCode = keyboardShortCut.getModifier();
						field.onFieldInputEvent(event);
					}
				} else {
					return false;
				}
			}
		});
	},
	_bindResize: function() {
		$(window).bind("resize", function(event) {
			document.site.resize();
		});
	},
	_bindPageTitleClick: function() {
		document.site.$$layoutSlot.delegate(".s-page-title", "click", function(event) {
			try {
				if (event.shiftKey && event.ctrlKey && event.altKey) {
					var page = document.controller.findArticle($(this));
					if (page && page.loadProtoArticle) {
						page.loadProtoArticle();
					}
				}
			} catch (error) {
				document.site.onError(error);
				return false;
			}
			return false;
		});
	},
	_bindMenuClick: function() {
		document.site.$$layoutSlot.delegate("a[data-s-menu]", "click", function(event) {
			try {
				var $$menu = $(this);
				var menu = document.controller.findItem($$menu);
				if (menu && !menu.$isDisabled) {
					menu.click();
				}
			} catch (error) {
				document.site.onError(error);
				return false;
			}
			return false;
		});
	},
	_setFocus: function(f) {
		if (f.parents(":hidden").length == 0 && !f.attr("disabled") && f.is(':visible') && (f[0].localName !== 'a' || f.attr("href"))) {
			f.focus();
			return true;
		}
		return false;
	},
	_bindFieldEvents: function() {
		var self = this; // manage key tab +
		document.site.$$layoutSlot.delegate("textarea[data-s-field],input[data-s-field],select[data-s-field]", "mousedown click change keydown keypress keyup focusin focusout", function(event) {
			var field = document.controller.findField($(event.target));
			if (field) {
				if (document.site.authorPage && !document.site.authorPage.authorizeEvent(field)) {
					return;
				}
				var doEvent = true;
				if (event.type == "focusin") {
					document.site.closePopups(null, event);
				}
				if (event.type == "click") {
					document.site.closePopups(null, event);
				}
				if (event.type == "click" && document.site.authorPage) {
					doEvent = document.site.authorPage.onClickItem(field, this);
				}

				if (event && event.keyCode === keyboardShortCut.getModifier()) {
					doEvent = false;
				}
				if (field.articleParent && field.articleParent.$$item[0].localName === 'tr' && field.articleParent.articleParent) {
					document.site.lastFocusGrid = field.articleParent.list;
				}

				if (doEvent) {
					field.onFieldInputEvent(event);
				}
				event.stopPropagation();
			}
		}).delegate("a[data-s-field-binary]", "click focusin focusout", function(event) {
			var field = document.controller.findField($(event.target));
			if (field) {
				if (document.site.authorPage && !document.site.authorPage.authorizeEvent(field)) {
					return;
				}
				field.onFieldInputEvent(event);
				if (event.type != "click") {
					event.stopPropagation();
					return false;
				}
			}
		}).delegate("a.s-icon-link", "click", function(event) {
			var field = document.controller.findField($(event.target));
			if (field) {
				if (document.site.authorPage && !document.site.authorPage.authorizeEvent(field)) {
					return;
				}
				field.onFieldInputEvent(event);
				event.stopPropagation();
			}
			return false;
		}).delegate("[data-s-picker]", "click", function(event) {
			var $$picker = $(event.currentTarget);
			var article = document.controller.findArticle($$picker);
			document.site.onBeforClick();
			if (article) {
				if (document.site.authorPage && !document.site.authorPage.authorizeEvent(article)) {
					return;
				}
				var pickerId = event.currentTarget.getAttribute("data-s-picker");
				if (!article.onClickPicker || article.onClickPicker(event.currentTarget, event)) {
					switch (pickerId) {
						case "s-bar-dockMode":
						case "s-bar-collapse":
						case "s-bar-title":
							var isFusionBar = event.currentTarget.className.indexOf("s-fusion-bar") >= 0;
							var bar;
							if (isFusionBar) {
								bar = article.fusionBar;
							} else {
								bar = (event.currentTarget.className.indexOf("s-aw-toolbar") >= 0) ? article.awPalette : article.menuBar;
							}
							bar.onClickPicker(event.currentTarget, event);
							break;
						default:
							var field = document.controller.findField($$picker);
							if (field) {
								field.onClickPicker(event.currentTarget);
							}
							break;
					}
				}
			}
			return false;
		}).delegate("[data-s-field-item]", "mouseenter mouseleave", function(event) {
			var field = document.controller.findField($(event.target));
			if (field) {
				field.onFieldMouseEvent(event);
				//event.stopPropagation();
			}
		});
	},
	_bindListEvents: function() {
		document.site.$$layoutSlot.delegate("div[data-s-sort]", "click", function(event) {
			document.site.onBeforClick();
			var $$link = $(this);
			var list = document.controller.findArticle($$link);
			if (!document.site.authorPage || document.site.authorPage.authorizeEvent(list)) {
				list.sortCapability.onSortClick(event, $$link.attr("data-s-sort"));
			}
			document.site.lastFocusGrid = list;
			return false;
		}).delegate("a.s-alphatab-link", "click", function() {
			document.site.onBeforClick();
			var list = document.controller.findArticle($(this));
			if (!document.site.authorPage || document.site.authorPage.authorizeEvent(list)) {
				list.sortCapability.onSortAlphaTab(this);
			}
			document.site.lastFocusGrid = list;
			return false;
		}).delegate("a.s-cardview-opener,a.s-cardview-opener-all", "click", function(event) {
			document.site.onBeforClick();
			var list = document.controller.findArticle($(this));
			list.builder.cardBuilder.onOpenerClick(this);
			document.site.lastFocusGrid = list;
			return false;
		}).delegate("a[data-s-page]", "click", function(event) {
			document.site.onBeforClick();
			var list = document.controller.findArticle($(this));
			if (!document.site.authorPage || document.site.authorPage.authorizeEvent(list)) {
				list.pagging.onPageClick(this);
			}
			document.site.lastFocusGrid = list;
			return false;
		}).delegate(".s-list-selector-row", "click mouseenter mouseleave", function(event) {
			var list = document.controller.findArticle($(this)).list;
			event.applyShortCut = list.applyShortCut;
			delete list.applyShortCut;
			if (event.type == "click") {
				document.site.onBeforClick();
				if (list) {
					list.selector.onSelectRecords(event);
				}
			} else {
				if (list) {
					list.selector.onSelectMouseEvent(event);
				}
			}
			document.site.lastFocusGrid = list;
			return false;
		}).delegate(".s-list-selector,.s-list-selector-all,.s-list-row-index-selector", "click", function(event) {
			var $$link = $(this);
			document.site.onBeforClick();
			var article = document.controller.findArticle($$link);
			event.stopPropagation();
			(article.list ? article.list : article).selector.onSelectRecords(event);
		}).delegate("a.s-field-diagnose-link", "click", function(event) {
			var $$link = $(event.currentTarget);
			document.site.onBeforClick();
			var field = document.controller.findField($$link);
			if (field) {
				field.focus();
			}
			event.stopPropagation();
		}).delegate("a.s-list-tree-node-picker", "click", function(event) {
			document.site.onBeforClick();
			var article = document.controller.findArticle($(this));
			event.stopPropagation();
			article.list.treeDecorator.onNodeEvent(event);
			return false;
		});
	},
	_bindSearchFacetEvents: function() {
		document.site.$$layoutSlot.delegate("input.s-search-facet-member-check", "change", function() {
			var $$input = $(this);
			document.controller.findArticle($$input).onInputMemberChange($$input);
			return false;
		});
	},
	_bindChoiceFieldList: function() {
		document.site.$$layoutSlot.delegate("a[data-s-choice]", "click", function() {
			var field = document.controller.findField($(this));
			if (field) {
				field.builder.onChoiceItemClick(parseInt(this.getAttribute("data-s-choice"), 10));
			}
			return false;
		});
	},
	_bindBox: function() {
		document.site.$$layoutSlot.delegate("a[data-s-box]", "click", function(event, data) {
			var $$link = $(this);
			var box = document.controller.findBox($$link);
			if (box) {
				var doEvent = true;
				if (document.site.authorPage) {
					doEvent = document.site.authorPage.onClickItem(box, this);
				}
				if (doEvent) {
					if (box.isTitleUrlLink) {
						return true;
					}
					if (box.tabTitle) {
						var isTabSelected = box.layoutParent.tabOpened == box;
						if (isTabSelected) {
							box.page.externalAdapter.onBoxClick({
								box: box,
								event: event,
								tabIdx: $$link.index()
							});
						} else {
							if (!document.site.dragDropInstance) {
								var open = !box.$item.$opened;
								var isFirstTime = !box.loaded;
								box.page.externalAdapter.onBoxToggle({
									nativeEvent: event,
									nativeEvenData: data,
									box: box,
									isTabSelected: isTabSelected,
									open: open,
									isFirstTime: isFirstTime,
									tabIdx: $$link.index(),
									doEvent: function() {
										if (!isTabSelected) {
											document.site.lastTabFocus = box;
											box.openBox(open);
										}
										document.site.resize(true);
									}
								});
								return false;
							}
						}
					} else {
						if (box.$item.$isBoxCollapsable) {
							document.site.onBeforClick(box);
							box._expandBody(undefined, event);
						}
					}
				} else {
					event.stopPropagation();
				}
			}
			return false;
		});
		document.site.$$layoutSlot.delegate("a[data-s-box-picker]", "click", function(event) {
			setTimeout(function() {
				document.controller.findBox($(event.target)).doPicker(event.target.getAttribute("data-s-box-picker"));
			}, 20);
			return false;
		});
	},
	_bindDiagnoseEvents: function(bind) {
		document.site.$$layoutSlot.delegate("[data-s-diag-picker]", "click", function() {
			var panel;
			var pageId = this.getAttribute("data-s-diag-page");
			if (pageId) {
				if (document.site.desktopPages[pageId]) {
					panel = document.site.desktopPages[pageId].diagnosesPanel;
				}
			}
			panel = panel || document.site.diagnosesPanel;
			if (panel) {
				panel.onClickPicker(this);
			}
			return false;
		});
	},
	dispose: function() {
		document.site.$$layoutSlot.unbind();
		document.site.$$layoutSlot.undelegate();
		$(window).unbind("resize");
	}
});