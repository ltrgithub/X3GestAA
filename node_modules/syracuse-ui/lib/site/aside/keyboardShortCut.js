"use strict";
var helpers = require('syracuse-core/lib/helpers');
var uiLocker = require('syracuse-ui/lib/site/uiLocker');

var _keyCodeArray = [
	["backspace", 8],
	["tab", 9],
	["enter", 13],
	["shift", 16],
	["ctrl", 17],
	["esc", 27],
	["home", 36],
	["space", 32],
	["pageup", 33],
	["pagedown", 34],
	["insert", 45],
	["delete", 46],
	[",", 58],
	["divide", 111],
	["f1", 112],
	["f4", 115],
	["f5", 116],
	["f6", 117],
	["f7", 118],
	["f9", 120],
	["f11", 122],
	["f12", 123],
	[":", 188],
	["right", 39],
	["left", 37],
	["up", 38],
	["down", 40],
	['a', 65],
	['b', 66],
	['c', 67],
	['d', 68],
	['e', 69],
	['f', 70],
	['g', 71],
	['h', 72],
	['i', 73],
	['j', 74],
	['k', 75],
	['l', 76],
	['m', 77],
	['n', 78],
	['o', 79],
	['p', 80],
	['q', 81],
	['r', 82],
	['s', 83],
	['t', 84],
	['u', 85],
	['v', 86],
	['w', 87],
	['x', 88],
	['y', 89],
	['z', 90]
];

var _letterMap = _keyCodeArray.reduce(function(key, desc) {
	key[desc[0]] = desc[1];
	return key;
}, {});

var _keyCodeMap = _keyCodeArray.reduce(function(key, desc) {
	key[desc[1]] = desc[0];
	return key;
}, {});


exports.getKeyCodeMap = function(code) {
	return _keyCodeMap[code];
};

exports.applyKeyboardShortCut2 = function(context) {
	try {
		if (mapShortCut[context.keysDown.length]) {
			var stop = false;
			var current = mapShortCut[context.keysDown.length];
			var init = 0;
			if (context.keysDown.length > 1) {
				init = 1;
			}
			var keyCodes = {};
			for (var i = 0; i < context.keysDown.length; i++) {
				keyCodes[_keyCodeMap[context.keysDown[i]]] = true;
			}
			for (var i = init; i < context.keysDown.length && !stop; i++) {
				if (current[_keyCodeMap[context.keysDown[i]]]) {
					current = current[_keyCodeMap[context.keysDown[i]]];
					if (current.handler) {
						stop = true;
					}
				}
			}
			var mainpage = document.site.mainPage;
			if (document.site.fusionGateway) {
				mainpage = document.site.fusionGateway.getFirstPage();
			}
			if (keyCodes.esc) {
				if (keyCodes.h) {
					var hideAll = keyCodes.a || keyCodes.f11;
					if (hideAll || keyCodes.l) {
						if (mainpage.fusionBar) {
							mainpage.fusionBar.collapse();
						}
						return true;
					}
					if (hideAll || keyCodes.r) {
						if (mainpage.menuBar) {
							mainpage.menuBar.collapse();
						}
						return true;
					}
				}
			}

			if (current && current.handler) {
				// execute handler 
				var param = current.parameter ? current.parameter : null;
				if (param) {
					param.isFusion = context.isFusion;
				} else {
					param = {
						isFusion: context.isFusion
					};
				}
				param.listener = context.eventListener;
				uiLocker.lock(500);
				var res = current.handler(param);
				uiLocker.unlock();
				return true;
			}
		}
		return false;
	} catch (e) {
		uiLocker.unlock();
		console.log(e.stack);
		return false;
	}
};

exports.getNoModShortcut = function() {
	return [_letterMap['enter'], _letterMap['up'], _letterMap['down']];
};