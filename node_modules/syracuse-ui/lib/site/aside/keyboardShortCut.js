"use strict";
var helpers = require('syracuse-core/lib/helpers');
var handler = require('./shortcutHandler');
var SectionBlock = require('syracuse-ui/lib/article/sectionBlock').SectionBlock;
var SheetPage = require('syracuse-ui/lib/fusion/article/sheetPage').SheetPage;
var _keyCodeMap = {
	"backspace" : 8,
	"tab":9,
	"enter" : 13,
	"esc" : 27,
	"home":36,
	"pageup" : 33,
	"pagedown":34,
	"insert":45,
	"delete":46,
	":":58,
	"divide" : 111,
	"f1" :112,
	"f5" :116,
	"f7":118,
	"f9":120,
	"f11" :122,
	"f12" : 123,
	",":188,
	"right":39,
	"left":37,
	a:65,
	b:66,
	c:67,
	d:68,
	e:69,
	f:70,
	g:71,
	h:72,
	i:73,
	j:74,
	k:75,
	l:76,
	m:77,
	n:78,
	o:79,
	p:80,
	q:81,
	r:82,
	s:83,
	t:84,
	u:85,
	v:86,
	w:87,
	x:88,
	y:89,
	z:90 
};

/*var letterMap = _keyCodeMap.reduce(function(key,desc,index){
	key[desc[2]] = desc[1];
});*/

var mapShortCut = {
	'modifier' : 'esc',
	'2' : { // shortcut with 2 key
		'p' : 'handler.actionPage("$print")',
	},
	'3' : { // shortcut with 3 key
	}
};

var modifier = "esc";
	
exports.applyKeyboardShortCut= function(context){
	// retrieve $prototype on menu 
	var isFusion = context.isFusion;
	var keysDown = context.keysDown;
	var event = context.event;
	try{
		if(keysDown.length>=2 && keysDown.indexOf(_keyCodeMap[modifier])!==-1){
			if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['p'])!==-1){// print 
				handler.actionPage('$print');
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['a'])!==-1){// selection all rows of page grid
				handler.selectAllGridLines();
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['right'])!==-1){// tab navigation
				handler.navTab(true);		
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['left'])!==-1){// tab navigation
				handler.navTab(false);		
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['delete'])!==-1){// delete current grid line
				handler.actionGridLine('$delete');
			}else if( keysDown.indexOf(_keyCodeMap['insert'])!==-1){// insert grid line
				handler.actionGridLine('$create');
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['n'])!==-1){// create new file
				// check if the focus field is in a table or not 
				handler.actionPage(isFusion?"1115":'$create');
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['pageup'])!== -1  ){// next page
				// check if we are in a grid
				handler.navGridFusion(true,event);	
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['pagedown'])!== -1  ){// prev page
				// check if we are in a grid
				handler.navGridFusion(false,event);	
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['enter'])!== -1  ){// main action
				handler.mainActionPage();
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['f1'])!==-1 ){// go to help

				handler.goToHelp();
			}else if(keysDown.length === 3 &&  keysDown.indexOf(_keyCodeMap['g'])!==-1 && keysDown.indexOf(_keyCodeMap['h'])!==-1){// go to home 
				handler.goToHome();
			}else if(keysDown.length === 3 &&  keysDown.indexOf(_keyCodeMap['m'])!==-1 && event.shiftKey ){ // contextual menu grid line
				actionContextMenu(true);
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['m'])!==-1 ){ // contextual menu
				handler.actionContextMenu(false);
			}else if( keysDown.length === 2 && keysDown.indexOf(_keyCodeMap['f5'])!==-1){ // refresh
				handler.refresh();
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['q'])!==-1 ){ // last record
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['k'])!==-1 && event.shiftKey){ // last record
				handler.navRecord('$last');
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['j'])!==-1 && event.shiftKey ){ // first record
				handler.navRecord('$first');
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['j'])!==-1){ // previous record
				handler.navRecord('$previous');
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['k'])!==-1){ // next record 
				handler.navRecord('$next');
			}else if( keysDown.length === 3 && keysDown.indexOf(_keyCodeMap['h'])!==-1 && keysDown.indexOf(_keyCodeMap['l'])!==-1){ // fullscreen mode
				handler.hideBar('l');
			}else if(keysDown.length === 3 &&  keysDown.indexOf(_keyCodeMap['h'])!==-1 && keysDown.indexOf(_keyCodeMap['r'])!==-1){ // fullscreen mode
				handler.hideBar('r');
			
			}else if((keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['f11'])!==-1) 
					|| ( keysDown.length === 3 &&  keysDown.indexOf(_keyCodeMap['h'])!==-1 && keysDown.indexOf(_keyCodeMap['a'])!==-1)){ // fullscreen mode
				handler.hideBar('a');
			}else if(isFusion && ( keysDown.length === 2 && keysDown.indexOf(_keyCodeMap['f7'])!==-1 ) || (keysDown.length === 3 && keysDown.indexOf(_keyCodeMap['g'])!==-1 &&  keysDown.indexOf(_keyCodeMap['f'])!==-1) ){ // got to function 
				handler.goToFunction();
			}else if( (keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['f9'])!==-1 )
					|| ( keysDown.length === 3 && keysDown.indexOf(_keyCodeMap['g'])!==-1 && keysDown.indexOf(_keyCodeMap['d'])!==-1) ){ // tunnel picker
				handler.goToDetailTunnel();
			}else if(keysDown.length === 2 && ( keysDown.indexOf(_keyCodeMap['l'])!==-1 ||Â  keysDown.indexOf(_keyCodeMap['f12'])!==-1)){ // lookup picker
				handler.actionLookup();
			}else if( (keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['s'])!==-1 )
					|| (keysDown.length === 2 && keysDown.indexOf(_keyCodeMap[':'])!==-1 && event.shiftKey ) 
					|| (keysDown.length === 2 && keysDown.indexOf(_keyCodeMap['divide'])!==-1) ){ // focus USB (universal search bar)
				handler.focusUSB();
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyCodeMap['tab'])!==-1 ){// next field on Grid Fusion
				handler.nextFieldConvGrid();
			}
		}else{
				//send escape
			var field = document.site.lastFocusField ;
			if( field ) {
				event.type ='keydown'
				event.keyCode= _keyCodeMap[modifier]
				field.onFieldInputEvent(event);
			}
				
		}

		return false;
	}catch(e){
		console.error(e);
		return false;
	}
}

exports.getModifier =  function(){
	return _keyCodeMap[modifier];
}



