"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _keyboardMap = {
	"backspace" : 8,
	"tab":9,
	"enter" : 13,
	"home":36,
	"pageup" : 33,
	"pagedown":34,
	"f5" :116,
	"f7":118,
	"f9":120,
	"f11" :122,
	"f12" : 123,
	"esc" : 27,
	",":188,
	"divide" : 111,
	":":58,
	"insert":45,
	"delete":46,
	a:65,
	b:66,
	c:67,
	d:68,
	e:69,
	f:70,
	g:71,
	h:72,
	i:73,
	j:74,
	k:75,
	l:76,
	m:77,
	n:78,
	o:79,
	p:80,
	q:81,
	r:82,
	s:83,
	t:84,
	u:85,
	v:86,
	w:87,
	x:88,
	y:89,
	z:90 
};

var modifier = "esc";
exports.applyKeyboardShortCut= function(targetField,isFusion,keysDown,event){
	// retrieve $prototype on menu 

	var bodypage = document.site;
	if(keysDown.length>=2 && keysDown.indexOf(_keyboardMap[modifier])!==-1){
		if( keysDown.indexOf(_keyboardMap['p'])!==-1){// print 
			if( bodypage.mainPage.menuItems.$print )
				bodypage.mainPage.menuItems.$print[0].click();

		}else if( keysDown.indexOf(_keyboardMap['delete'])!==-1){// delete current grid line
			var lastFocus = bodypage.lastFocusField;
			if( lastFocus.$$item[0].localName === 'td' ){
				if( lastFocus.articleParent.menuItems.$delete )
					lastFocus.articleParent.menuItems.$delete[0].click();
			}
		}else if( keysDown.indexOf(_keyboardMap['insert'])!==-1){// insert grid line
			var lastFocus = bodypage.lastFocusField;
			if( lastFocus.$$item[0].localName === 'td' ){
				if( lastFocus.articleParent.menuItems.$create )
					lastFocus.articleParent.menuItems.$create[0].click();
			}
		}else if( keysDown.indexOf(_keyboardMap['n'])!==-1){// create new file
			// check if the focus field is in a table or not 
				var menu = "$create";
				if( isFusion ){
					menu = "1115";// x3 action
				}
				if( bodypage.mainPage.menuItems[menu] )
					bodypage.mainPage.menuItems[menu][0].click();
		}else if( keysDown.indexOf(_keyboardMap['enter'])!== -1  ){// main action
			var found=null;
			var keys = Object.keys(bodypage.mainPage.menuItems);
			for(var i=0; i<keys.length && !found;i++){
				if( bodypage.mainPage.menuItems[keys[i]][0].$item.$style === "main" ){
					found = bodypage.mainPage.menuItems[keys[i]][0];
				}
			}
			if( found )
				found.click();

		}else if( keysDown.indexOf(_keyboardMap[','])!==-1 && event.shiftKey){// go to help

			$(bodypage._header.children["s-site-header-top-right"].children["s-site-help"].children[0]).click();

		}else if( keysDown.indexOf(_keyboardMap['g'])!==-1 && keysDown.indexOf(_keyboardMap['h'])!==-1){// go to home 

			$(bodypage._header.children["s-site-header-top-right"].children["s-site-home"].children[0]).click();

		}else if( keysDown.indexOf(_keyboardMap['m'])!==-1 && event.shiftKey ){ // contextual menu grid line
			var lastFocus = bodypage.lastFocusField;
			if( lastFocus.$$item[0].localName === 'td' ){
				$(lastFocus.articleParent.menusBox._textTitle).click();
			}

		}else if( keysDown.indexOf(_keyboardMap['m'])!==-1 ){ // contextual menu
			var lastFocus = bodypage.lastFocusField;
			
			if(lastFocus.menusBox && lastFocus.menusBox._textTitle){
				$(lastFocus.menusBox._textTitle).click();	
			}
		}else if( keysDown.indexOf(_keyboardMap['f5'])!==-1){ // fullscreen 
			if( isFusion ){
			 	var menu = "2823";// x3 action
				var found = null;
				var keys = Object.keys(bodypage.mainPage.menuItems);
				for(var i=0;i<keys.length && !found;i++){
					if( bodypage.mainPage.menuItems[keys[i]][0].$bind === menu ){
						found = bodypage.mainPage.menuItems[keys[i]][0];
					}
				}
				if( found )
					found.$$item.click();
			}

		}else if( keysDown.indexOf(_keyboardMap['f11'])!==-1){ // fullscreen 
			if( bodypage.mainPage.fusionBar ){
				$(bodypage.mainPage.fusionBar.openerPicker).click();
			}
			if( bodypage.mainPage.menuBar ){
				$(bodypage.mainPage.menuBar.openerPicker).click();
			}
		}else if(isFusion && keysDown.indexOf(_keyboardMap['f7'])!==-1){ // got to function 
				menu = "1186"; // x3 action 
				if( bodypage.mainPage.menuItems[menu] )
					bodypage.mainPage.menuItems[menu][0].click();

		}else if( keysDown.indexOf(_keyboardMap['f9'])!==-1 
				|| (keysDown.indexOf(_keyboardMap['g'])!==-1 && keysDown.indexOf(_keyboardMap['d'])!==-1) ){ // tunnel picker
			// get the lookup picker 
			var lastFocus = bodypage.lastFocusField;
			if( lastFocus.$$input && lastFocus.tunnelPicker  ){
					lastFocus.tunnelPicker.click();
			}
		}else if( keysDown.indexOf(_keyboardMap['l'])!==-1 ||Â  keysDown.indexOf(_keyboardMap['f12'])!==-1){ // lookup picker
			// get id of current field 
				// get the lookup picker 
			var lastFocus = bodypage.lastFocusField;
			if( lastFocus.$$input && lastFocus.boxPickers && lastFocus.boxPickers.children.length > 0 ){
				var lookup = null;
				for(var i=0;i<lastFocus.boxPickers.children.length && !lookup;i++){
					if( $(lastFocus.boxPickers.children[i]).attr('data-s-picker') === "lookup" ){
						lookup =  $(lastFocus.boxPickers.children[i]);
					}
				}
				if( lookup ){
					lookup.click();
				}
			}
		}else if( keysDown.indexOf(_keyboardMap['s'])!==-1 
				|| (keysDown.indexOf(_keyboardMap[':'])!==-1 && event.shiftKey ) 
				|| (keysDown.indexOf(_keyboardMap['divide'])!==-1) ){ // focus USB (universal search bar)
			// focus of search box
			var keys = Object.keys(bodypage.searchField.idMap);
			var items = bodypage.searchField.idMap;
			var input = null;
			for(var i=0;i<keys.length && !input;i++){
				if( items[keys[i]].$$input ){
					input = items[keys[i]].$$input;
				}
			}
			if( input ) {
				$(input[0]).focus();
			}
		}else if( keysDown.indexOf(_keyboardMap['tab'])!==-1 ){
			if(bodypage.lastFocusField && bodypage.lastFocusField.arrayLevel==="cell"){
				if(isFusion && bodypage.lastFocusField.page.externalAdapter.onFieldClickPicker){
					bodypage.lastFocusField.page.externalAdapter.onFieldClickPicker({"field":bodypage.lastFocusField,"pickerType":"cancelEdit"})
				}
			}
		}
	} 
	return false;
}

exports.getModifier =  function(){
	return _keyboardMap[modifier];
}



