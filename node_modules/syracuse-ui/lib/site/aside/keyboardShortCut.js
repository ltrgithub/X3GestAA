"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SectionBlock = require('syracuse-ui/lib/article/sectionBlock').SectionBlock;
var SheetPage = require('syracuse-ui/lib/fusion/article/sheetPage').SheetPage;
var _keyboardMap = {
	"backspace" : 8,
	"tab":9,
	"enter" : 13,
	"esc" : 27,
	"home":36,
	"pageup" : 33,
	"pagedown":34,
	"insert":45,
	"delete":46,
	":":58,
	"divide" : 111,
	"f1" :112,
	"f5" :116,
	"f7":118,
	"f9":120,
	"f11" :122,
	"f12" : 123,
	",":188,
	"right":39,
	"left":37,
	a:65,
	b:66,
	c:67,
	d:68,
	e:69,
	f:70,
	g:71,
	h:72,
	i:73,
	j:74,
	k:75,
	l:76,
	m:77,
	n:78,
	o:79,
	p:80,
	q:81,
	r:82,
	s:83,
	t:84,
	u:85,
	v:86,
	w:87,
	x:88,
	y:89,
	z:90 
};


function navTabFusion(right){
	// retrieve current sectionBlock 
	var bodypage = document.site;
	var focus =  bodypage.lastTabFocus ? bodypage.lastTabFocus : bodypage.boxFocus;
	var keys = Object.keys(bodypage.mainPage.idMap);
	var tab = []
	var found = null;
	var i=0;
	var move = +1;
	if( !right ){
		move = -1;
	}
	for(i=0;i<keys.length ;i++){
		if( bodypage.mainPage.idMap[keys[i]].tabTitle ){
			tab.push(bodypage.mainPage.idMap[keys[i]]);
			if(focus && bodypage.mainPage.idMap[keys[i]].id === focus.id ){
				found = focus;
			}else if( !focus.tabTitle && tab.length === 1  ){
				found = bodypage.mainPage.idMap[keys[i]];
			}
		}
	}
	if( tab.indexOf(found)+move < tab.length && tab.indexOf(found)+move >= 0 ){
		$(tab[tab.indexOf(found)+move].tabTitle).click();
		document.site.lastTabFocus = tab[tab.indexOf(found)+move];
	}

}
function navGridFusion(pageDown,lastFocus,event){
		// get the grid
	if( lastFocus.pagingCapability ){
		// looking for the next page 
		var pcap = lastFocus.pagingCapability ;
		var pageNumber = Math.floor(pcap.$startIndex / pcap._$itemsPerPage)+1;
		if( document.site.lastFocusField && document.site.lastFocusField.$$item&& document.site.lastFocusField.$$item[0].localName === 'td' ){
			event.keyCode = _keyboardMap['esc'];
			event.type = 'keydown';
			//document.site.lastFocusField.onFieldInputEvent(event);
			document.site.lastFocusField.$$item.blur();
		}
		if( pageDown ){
			if( 0 < pageNumber-1 ){
				$(pcap.pageLinks[pageNumber-1]).click();
			}
		}else{
			if( pcap.pageLinks.length >= pageNumber+1 ){
				$(pcap.pageLinks[pageNumber+1]).click();
			}
		}
		console.log("last focus "+JSON.stringify(document.site.lastFocusField));
	}
};

function navRecord(action){
	var keys = Object.keys(document.site.mainPage.idMap);
	var found = null;
	for(var i=0;i<keys.length && !found;i++){
		if( document.site.mainPage.idMap[keys[i]].$bind === action ){
			found = document.site.mainPage.idMap[keys[i]];
		}
	}
	if( found ){
		found.$$item.click();
	}
};

var modifier = "esc";
exports.applyKeyboardShortCut= function(targetField,isFusion,keysDown,event){
	// retrieve $prototype on menu 
	console.log("apply shortcut");
	try{
		var bodypage = document.site;
		if(keysDown.length>=2 && keysDown.indexOf(_keyboardMap[modifier])!==-1){
			if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['p'])!==-1){// print 
				if( bodypage.mainPage.menuItems.$print )
					bodypage.mainPage.menuItems.$print[0].click();

			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['a'])!==-1){// selection all rows of page grid
				// get current grid, we need to have focus at least of an element of the grid 
				var range = document.createRange();
				var lastFocus = bodypage.lastFocusGrid ;
				if( lastFocus ){
					range.selectNode(lastFocus.$$item[0]);
					window.getSelection().addRange(range);
				}
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['right'])!==-1){// tab navigation
				navTabFusion(true);		
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['left'])!==-1){// tab navigation
				navTabFusion(false);		
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['delete'])!==-1){// delete current grid line
				var lastFocus = bodypage.lastFocusField.articleParent;
				if( lastFocus.menuItems.$delete )
						lastFocus.menuItems.$delete[0].click();
			}else if( keysDown.indexOf(_keyboardMap['insert'])!==-1){// insert grid line
				var lastFocus = bodypage.lastFocusField.articleParent;
				if( lastFocus.menuItems.$create )
					lastFocus.menuItems.$create[0].click();
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['n'])!==-1){// create new file
				// check if the focus field is in a table or not 
					var menu = "$create";
					if( isFusion ){
						menu = "1115";// x3 action
					}
					if( bodypage.mainPage.menuItems[menu] )
						bodypage.mainPage.menuItems[menu][0].click();
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['pageup'])!== -1  ){// next page
				// check if we are in a grid
					var lastGrid = lastFocus;
				var lastFocus = bodypage.lastFocusField;
				if( isFusion ){
					var lastGrid = bodypage.lastFocusGrid && bodypage.lastFocusGrid.$$item ? bodypage.lastFocusGrid:null;
					if(!lastGrid && lastFocus.$$item && lastFocus.$$item[0].localName === 'td' ){
						lastGrid = lastFocus.articleParent.articleParent;
					}
					navGridFusion(true,lastGrid,event);	
				}

			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['pagedown'])!== -1  ){// prev page
				// check if we are in a grid
				var lastFocus = bodypage.lastFocusField;
				if( isFusion ){
					var lastGrid = bodypage.lastFocusGrid && bodypage.lastFocusGrid.$$item ? bodypage.lastFocusGrid:null;
					if( !lastGrid && lastFocus.$$item && lastFocus.$$item[0].localName === 'td' ){
						lastGrid = lastFocus.articleParent.articleParent;
					}
					navGridFusion(false,lastGrid,event);	
				}
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['enter'])!== -1  ){// main action
				var found=null;
				var keys = Object.keys(bodypage.mainPage.menuItems);
				for(var i=0; i<keys.length && !found;i++){
					if( bodypage.mainPage.menuItems[keys[i]][0].$item.$style === "main" ){
						found = bodypage.mainPage.menuItems[keys[i]][0];
					}
				}
				if( found )
					found.click();

			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['f1'])!==-1 ){// go to help

				$(bodypage._header.children["s-site-header-top-right"].children["s-site-help"].children[0]).click();

			}else if(keysDown.length === 3 &&  keysDown.indexOf(_keyboardMap['g'])!==-1 && keysDown.indexOf(_keyboardMap['h'])!==-1){// go to home 

				$(bodypage._header.children["s-site-header-top-right"].children["s-site-home"].children[0]).click();

			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['m'])!==-1 && event.shiftKey ){ // contextual menu grid line
				var lastFocus = bodypage.lastFocusGrid;
				$(lastFocus.menuPicker._textTitle).click();

			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['m'])!==-1 ){ // contextual menu
				var lastFocus = bodypage.lastFocusField;
				
				if(lastFocus.menuPicker && lastFocus.menuPicker._textTitle){
					$(lastFocus.menuPicker._textTitle).click();	
				}
			}else if( keysDown.length === 2 && keysDown.indexOf(_keyboardMap['f5'])!==-1){ // fullscreen 
				if( isFusion ){
					var menu = "2823";// x3 action
					var found = null;
					var keys = Object.keys(bodypage.mainPage.menuItems);
					for(var i=0;i<keys.length && !found;i++){
						if( bodypage.mainPage.menuItems[keys[i]][0].$bind === menu ){
							found = bodypage.mainPage.menuItems[keys[i]][0];
						}
					}
					if( found )
						found.$$item.click();
				}

			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['q'])!==-1 ){ // last record
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['k'])!==-1 && event.shiftKey){ // last record
				navRecord('$last');
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['j'])!==-1 && event.shiftKey ){ // first record
				navRecord('$first');
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['j'])!==-1){ // previous record
				navRecord('$previous');
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['k'])!==-1){ // next record 
				navRecord('$next');
			}else if( keysDown.length === 3 && keysDown.indexOf(_keyboardMap['h'])!==-1 && keysDown.indexOf(_keyboardMap['l'])!==-1){ // fullscreen mode
				if( bodypage.mainPage.fusionBar ){
					$(bodypage.mainPage.fusionBar.openerPicker).click();
				}

			}else if(keysDown.length === 3 &&  keysDown.indexOf(_keyboardMap['h'])!==-1 && keysDown.indexOf(_keyboardMap['r'])!==-1){ // fullscreen mode
				if( bodypage.mainPage.menuBar ){
					$(bodypage.mainPage.menuBar.openerPicker).click();
				}

			}else if((keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['f11'])!==-1) 
					|| ( keysDown.length === 3 &&  keysDown.indexOf(_keyboardMap['h'])!==-1 && keysDown.indexOf(_keyboardMap['a'])!==-1)){ // fullscreen mode
				if( bodypage.mainPage.fusionBar ){
					$(bodypage.mainPage.fusionBar.openerPicker).click();
				}
				if( bodypage.mainPage.menuBar ){
					$(bodypage.mainPage.menuBar.openerPicker).click();
				}
			}else if(isFusion && ( keysDown.length === 2 && keysDown.indexOf(_keyboardMap['f7'])!==-1 ) || (keysDown.length === 3 && keysDown.indexOf(_keyboardMap['g'])!==-1 &&  keysDown.indexOf(_keyboardMap['f'])!==-1) ){ // got to function 
					menu = "1186"; // x3 action 
					if( bodypage.mainPage.menuItems[menu] )
						bodypage.mainPage.menuItems[menu][0].click();

			}else if( (keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['f9'])!==-1 )
					|| ( keysDown.length === 3 && keysDown.indexOf(_keyboardMap['g'])!==-1 && keysDown.indexOf(_keyboardMap['d'])!==-1) ){ // tunnel picker
				// get the lookup picker 
				var lastFocus = bodypage.lastFocusField;
				if( lastFocus.$$input && lastFocus.tunnelPicker  ){
						lastFocus.tunnelPicker.click();
				}
			}else if(keysDown.length === 2 && ( keysDown.indexOf(_keyboardMap['l'])!==-1 ||Â  keysDown.indexOf(_keyboardMap['f12'])!==-1)){ // lookup picker
				// get id of current field 
					// get the lookup picker 
				var lastFocus = bodypage.lastFocusField;
				if( lastFocus.$$input && lastFocus.boxPickers && lastFocus.boxPickers.children.length > 0 ){
					var lookup = null;
					for(var i=0;i<lastFocus.boxPickers.children.length && !lookup;i++){
						if( $(lastFocus.boxPickers.children[i]).attr('data-s-picker') === "lookup" ){
							lookup =  $(lastFocus.boxPickers.children[i]);
						}
					}
					if( lookup ){
						lookup.click();
					}
				}
			}else if( (keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['s'])!==-1 )
					|| (keysDown.length === 2 && keysDown.indexOf(_keyboardMap[':'])!==-1 && event.shiftKey ) 
					|| (keysDown.length === 2 && keysDown.indexOf(_keyboardMap['divide'])!==-1) ){ // focus USB (universal search bar)
				// focus of search box
				var keys = Object.keys(bodypage.searchField.idMap);
				var items = bodypage.searchField.idMap;
				var input = null;
				for(var i=0;i<keys.length && !input;i++){
					if( items[keys[i]].$$input ){
						input = items[keys[i]].$$input;
					}
				}
				if( input ) {
					$(input[0]).focus();
				}
			}else if(keysDown.length === 2 &&  keysDown.indexOf(_keyboardMap['tab'])!==-1 ){
				if(bodypage.lastFocusField && bodypage.lastFocusField.arrayLevel==="cell"){
					if(isFusion && bodypage.lastFocusField.page.externalAdapter.onFieldClickPicker){
						bodypage.lastFocusField.page.externalAdapter.onFieldClickPicker({"field":bodypage.lastFocusField,"pickerType":"cancelEdit"})
					}
				}
			}	
		}

		return false;
	}catch(e){
		console.error(e);
		return false;
	}
}

exports.getModifier =  function(){
	return _keyboardMap[modifier];
}



