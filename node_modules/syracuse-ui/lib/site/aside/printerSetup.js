"use strict";

/*
 Copyright (c)2012 Sage.
 http://wwww.sage.com
 */
/**
 * @fileoverview Printer selection/configuration resources
 */
var _capSupported = ["collate", "copies", "orientation", "duplex"];
var _deviceMode = ["paperSource", "paperSize", "orientation", "duplex"];
var _devmodePrinters = {};

exports.helpers = {
	getSettings: function(boundFields, printerRcd) {
		var settings = {}, i, len, field, value, devmode;
		var deviceName = ["driver", "name", "port"];
		var copiesEx = ["copies", "collate", "startPage", "stopPage"];
		var cap = printerRcd.$capabilities ? printerRcd.$capabilities.split(",") : null,
			capOk;
		// Device name
		for (i = 0, len = deviceName.length; i < len; i++) {
			settings[deviceName[i]] = printerRcd[deviceName[i]];
		}
		// Device mode
		if ((devmode = _devmodePrinters[printerRcd.$uuid])) {
			for (i = 0, len = _deviceMode.length; i < len; i++) {
				capOk = _capSupported.indexOf(_deviceMode[i]) < 0 || !cap || cap.indexOf(_deviceMode[i]) >= 0;
				if (capOk && devmode.hasOwnProperty(_deviceMode[i]) && devmode[_deviceMode[i]] !== null && devmode[_deviceMode[i]] >= 0) {
					settings[_deviceMode[i]] = devmode[_deviceMode[i]];
				}
			}
		}
		// Page copy informations
		for (i = 0, len = copiesEx.length; i < len; i++) {
			if (_capSupported.indexOf(copiesEx[i]) < 0 || !cap || cap.indexOf(copiesEx[i]) >= 0) {
				field = boundFields[copiesEx[i]][0];
				settings[copiesEx[i]] = field.getDataValue();
				if (field.$field.$type == "application/x-boolean" && field.statusValues) {
					settings[copiesEx[i]] = settings[copiesEx[i]] == field.statusValues.on ? "1" : "0";
				} else
				if (field.$field.$type == "application/x-integer") {
					if ((value = typeof name == "string" ? parseInt(settings[copiesEx[i]], 10) : value) < 0) {
						settings[copiesEx[i]] = null;
					}
				}
			}
		}
		if ((field = boundFields["allPages"][0]) && field.getDataValue() == 0) {
			delete settings["startPage"];
			delete settings["stopPage"];
		}
		return settings;
	},
	applyCapabilities: function(boundFields, printerRcd) {
		var i, len, cap = printerRcd.$capabilities ? printerRcd.$capabilities.split(",") : null;
		if (boundFields && cap) {
			for (i = 0, len = _capSupported.length; i < len; i++) {
				if (boundFields[_capSupported[i]]) {
					boundFields[_capSupported[i]][0].setState({
						"$isDisabled": cap.indexOf(_capSupported[i]) >= 0 ? false : true
					});
				}
			}
		}
	},
	initDefaultPrinterRcd: function(boundFields) {
		var len, i, value, field;
		var prt, def = boundFields && (prt = boundFields["printers"]) && prt[0].dataset.length > 0 ? prt[0].dataset[0] : {
				"name": ""
			};
		_devmodePrinters = {};
		if (def && def.name) {
			_devmodePrinters[def.$uuid] = {};
			for (i = 0, len = _deviceMode.length; i < len; i++) {
				field = boundFields[_deviceMode[i]][0];
				if ((value = field.getDataValue()) != null) {
					_devmodePrinters[def.$uuid][_deviceMode[i]] = value;
				}
			}
		}
		return def;
	},
	getPrinterName: function(printerRcd) {
		return printerRcd.name;
	},
	initDevmode: function(boundFields, currentRecord) {
		var field, i, len, devmode = _devmodePrinters[currentRecord.$uuid];
		for (i = 0, len = _deviceMode.length; i < len; i++) {
			field = boundFields[_deviceMode[i]][0];
			field.setDataValue(devmode && devmode.hasOwnProperty(_deviceMode[i]) && devmode[_deviceMode[i]] !== null ? devmode[_deviceMode[i]] : -1);
		}
	},
	saveDevmode: function(boundFields, currentRecord) {
		var field, i, len, devmode = _devmodePrinters[currentRecord.$uuid],
			value;
		if (!devmode) {
			devmode = _devmodePrinters[currentRecord.$uuid] = {};
		}
		for (i = 0, len = _deviceMode.length; i < len; i++) {
			field = boundFields[_deviceMode[i]][0];
			value = field.getDataValue();
			devmode[_deviceMode[i]] = value == null ? -1 : value;
		}
	},
	shouldCheckOnchange: function(fieldBind) {
		var exclude = ["collate"];
		return !fieldBind || exclude.indexOf(fieldBind) >= 0 ? false : true;
	},
	checkSettings: function(boundFields, fromNotifyChange, fieldChanged) {
		var value1, value2, field, maxPages = 9999,
			disabled = false;

		function checkIntR1(fieldName) {
			var fld, val, failed = false;
			if (!(fld = boundFields[fieldName])) {
				return null;
			} else {
				fld = fld[0];
				val = fld.getDataValue(), failed = false;
				val = val ? (parseInt(val, 10) || 0) : 0;
				if (val <= 0) {
					fld.setDataValue(1);
					val = 1;
					failed = true;
				}
				return {
					"val": val,
					"failed": failed,
					"field": fld
				};
			}
		}

		function setState(state, fields) {
			var len, i;
			for (i = 0, len = fields.length; i < len; i++) {
				fields[i].setState(state);
			}
		}
		value1 = checkIntR1("startPage");
		value2 = checkIntR1("stopPage");
		field = boundFields.allPages && boundFields.allPages[0];
		if (fromNotifyChange && fieldChanged == "allPages") {
			// On radio "page" selection...
			setState({
				"$isDisabled": true
			}, [value1.field, value2.field]);
			if (field.getDataValue() == 0) {
				value1.field.setDataValue(1);
				value2.field.setDataValue(maxPages);
				disabled = true;
			}
			setState({
				"$isDisabled": disabled
			}, [value1.field, value2.field]);
		} else {
			// Check pages selection
			if (value1 && value2 && field) {
				if (value1.failed || value2.failed || value1.val > value2.val) {
					value1.field.setDataValue(1);
					value2.field.setDataValue(maxPages);
					field.setDataValue(0);
					setState({
						"$isDisabled": true
					}, [value1.field, value2.field]);
				} else {
					if (value1.val == 1 && value2.val >= maxPages) {
						field.setDataValue(0);
						setState({
							"$isDisabled": true
						}, [value1.field, value2.field]);
					} else {
						field.setDataValue(1);
						setState({
							"$isDisabled": false
						}, [value1.field, value2.field]);
					}
				}
			}
			if ((value1 = checkIntR1("copies")) && value1.failed) {
				// Check copies
				value1.field.setDataValue(value1.val);
			}
		}
	}
};

exports.getSetupPage = function() {
	return {
		$type: "application/json",
		$title: syra_local.printer_setup_page_title,
		$properties: {
			"printers": {
				$type: "application/x-array",
				"$capabilities": "sort",
				$item: {
					$properties: {
						"name": {
							$title: syra_local.printer_setup_fld_name,
							$type: "application/x-string",
							"$isFixed": true,
							$isReadOnly: true
						},
						"port": {
							$type: "application/x-string",
							$title: syra_local.printer_setup_fld_port,
							$isReadOnly: true
						},
						"driver": {
							$type: "application/x-string",
							$title: syra_local.printer_setup_fld_driver,
							$isReadOnly: true
						},
						"comment": {
							$type: "application/x-string",
							$title: syra_local.printer_setup_fld_comment,
							$isReadOnly: true
						},
						"location": {
							$type: "application/x-string",
							$title: syra_local.printer_setup_fld_location,
							$isReadOnly: true
						},
						"$capabilities": {
							$type: "application/x-string",
							$title: "",
							$isReadOnly: true,
							$isHidden: true
						}
					},
					$links: {
						$properties: {
							$title: syra_local.printer_setup_mnu_prop,
							$method: "POST"
						}
					}
				}
			},
			"duplex": {
				$type: "application/x-integer",
				$isHidden: true,
				$isEditMode: false,
				$displayLength: 1
			},
			"orientation": {
				$type: "application/x-integer",
				$isHidden: true,
				$isEditMode: false,
				$displayLength: 1
			},
			"paperSize": {
				$type: "application/x-integer",
				$isHidden: true,
				$isEditMode: false,
				$displayLength: 1
			},
			"paperSource": {
				$type: "application/x-integer",
				$displayLength: 1,
				$isEditMode: false,
				$isHidden: true
			},
			"collate": {
				$type: "application/x-boolean",
				$title: syra_local.printer_setup_fld_collate
			},
			"collateIco": {
				$type: "application/x-icon",
				"$url": "",
				$isReadOnly: true
			},
			"allPages": {
				$type: "application/x-choice",
				$format: "$radios",
				$value: {
					$type: "application/x-integer",
					$enum: [{
						$value: 1,
						$title: syra_local.printer_setup_fld_pg_pages
					}, {
						$value: 0,
						$title: syra_local.printer_setup_fld_pg_all
					}]
				},
				$title: syra_local.printer_setup_fld_pg
			},
			"copies": {
				$type: "application/x-integer",
				$title: syra_local.printer_setup_fld_copies
			},
			"startPage": {
				$type: "application/x-integer",
				$title: syra_local.printer_setup_fld_pgstart
			},
			"stopPage": {
				$type: "application/x-integer",
				$title: syra_local.printer_setup_fld_pgstop
			}
		},
		$links: {
			"$save": {
				$title: syra_local.printer_setup_link_ok,
				$method: "POST"
			},
			"$cancel": {
				$title: syra_local.printer_setup_link_cancel,
				$method: "POST"
			}
		},
		$article: {
			$category: "section",
			$layout: {
				$layoutType: "stack",
				$items: [{
					$category: "block",
					$title: syra_local.printer_setup_blck_printers,
					$layout: {
						$items: [{
							$layoutType: "stack",
							$items: [{
								$bind: "printers",
								"$isQuickDesignerDisabled": true,
								"$selectMode": "row",
								"$selectorCard": {
									"$selectorField": "name",
									$layout: {
										$items: [{
											$bind: "name"
										}, {
											$bind: "port"
										}, {
											$bind: "driver"
										}, {
											$bind: "comment"
										}, {
											$bind: "location"
										}, {
											$bind: "$capabilities"
										}]
									}
								}
							}]
						}]
					}
				}, {
					$layoutType: "row",
					$items: [{
						$category: "block",
						$title: syra_local.printer_setup_blck_pages,
						$layout: {
							$items: [{
								$layoutType: "row",
								$items: [{
									$bind: "allPages",
									"$choiceLayout": "row"
								}, {
									$bind: "startPage"
								}, {
									$bind: "stopPage"
								}]
							}]
						}
					}, {
						$category: "block",
						$title: syra_local.printer_setup_blck_copies,
						$layout: {
							$layoutType: "stack",
							$items: [{
								$layoutType: "row",
								$items: [{
									$bind: "copies"
								}, {
									$bind: "collateIco"
								}, {
									$bind: "collate"
								}]
							}, {
								$layoutType: "row",
								$items: [{
									$bind: "orientation"
								}, {
									$bind: "duplex"
								}, {
									$bind: "paperSize"
								}, {
									$bind: "paperSource"
								}]
							}]
						}
					}]
				}]
			}
		}
	};
};

exports.getPropertiesPage = function() {
	return {
		$type: "application/json",
		$title: syra_local.printer_properties_page_title,
		$properties: {
			"paperSize": {
				$type: "application/x-choice",
				$format: "$combo",
				$title: syra_local.printer_properties_fld_psize
			},
			"paperSource": {
				$title: syra_local.printer_properties_fld_psource,
				$type: "application/x-choice",
				$format: "$combo"
			},
			"orientation": {
				$type: "application/x-choice",
				$format: "$radios",
				$value: {
					$type: "application/x-integer",
					$enum: [{
						$value: 0,
						$title: syra_local.printer_properties_fld_ort_P
					}, {
						$value: 1,
						$title: syra_local.printer_properties_fld_ort_L
					}]
				}
				//$title: syra_local.printer_properties_fld_ort
			},
			"duplex": {
				$type: "application/x-choice",
				$value: {
					$type: "application/x-integer",
					$enum: [{
						$value: 1,
						$title: syra_local.printer_properties_fld_dplx_none
					}, {
						$value: 2,
						$title: syra_local.printer_properties_fld_dplx_short
					}, {
						$value: 3,
						$title: syra_local.printer_properties_fld_dplx_long
					}]
				},
				$format: "$radios"
				//$title: syra_local.printer_properties_fld_dplx
			}
		},
		$links: {
			"$save": {
				$title: syra_local.printer_properties_link_ok,
				$method: "POST"
			},
			"$cancel": {
				$title: syra_local.printer_properties_link_cancel,
				$method: "POST"
			}
		},
		$article: {
			$category: "section",
			$layout: {
				$layoutType: "stack",
				$items: [{
					$category: "block",
					$layout: {
						$items: [{
							$layoutType: "stack",
							$items: [{
								$bind: "paperSize"
							}, {
								$bind: "paperSource"
							}]
						}]
					}
				}, {
					$category: "block",
					$title: syra_local.printer_properties_blck_ort,
					$layout: {
						$items: [{
							$layoutType: "stack",
							$items: [{
								$bind: "orientation"
							}]
						}]
					}
				}, {
					$category: "block",
					$title: syra_local.printer_properties_blck_dpx,
					$layout: {
						$items: [{
							$layoutType: "stack",
							$items: [{
								$bind: "duplex"
							}]
						}]
					}
				}]
			}
		}
	};
};