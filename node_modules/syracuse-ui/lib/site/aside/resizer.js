"use strict";
var helpers = require('syracuse-core/lib/helpers');
function Resizer(){
}

exports.Resizer = helpers.defineClass(Resizer, null, {
    setResizable: function(options){
        var self = this;
        self.id = helpers.uuid.generate();
        self.options = options;
        self.$$slot = $(self.options.slot);
        self.isEnabled = true;
        if (self.options.dragSpot) {
            (self.$$dragSpot = $(self.options.dragSpot)).bind("mousedown." + self.id, function(event){
                var offset = self.$$slot.offset();
                self.startPosition = {
                    top: offset.top - event.pageY,
                    left: offset.left - event.pageX,
                };
                self.boundary = document.site.$$body.offset();
                self.boundary.right = self.boundary.left + document.site.$$body.width();
                self.boundary.bottom = self.boundary.top + document.site.$$body.height();
                self._startDrag();
                return false;
            });
            self.options.dragSpot.style.cursor = "move";
        }
        if (self.options.direction !== null) {
            if (self.options.direction === undefined) {
                self.options.direction = {
                    top: true,
                    left: true,
                    right: true,
                    bottom: true
                };
            }
            self.$$resizerSpot = self.options.resizerSpot ? $(self.options.resizerSpot) : self.$$slot;
            self.$$resizerSpot.bind("mousedown." + self.id, function(event){
                if (self.isEnabled) {
                    self._startResize();
                }
                return false;
            }).bind("mousemove." + self.id, function(event){
                if (self.isEnabled) {
                    if (self.resizing) {
                        self.onResize(event);
                        return false;
                    }
                    else {
                        var offset = self.$$slot.offset();
                        self.left = offset.left;
                        self.top = offset.top;
                        self.width = self.$$slot.outerWidth();
                        self.height = self.$$slot.outerHeight();
                        self.right = self.left + self.width;
                        self.bottom = self.top + self.height;
                        self.isLeft = self.options.direction.left && ((event.pageX >= self.left) && (event.pageX <= (self.left + 5)));
                        self.isRight = self.options.direction.right && ((event.pageX <= self.right) && (event.pageX >= (self.right - 5)));
                        self.isTop = self.options.direction.top && ((event.pageY >= self.top) && (event.pageY <= (self.top + 5)));
                        self.isBottom = self.options.direction.bottom && ((event.pageY <= self.bottom) && (event.pageY >= (self.bottom - 5)));
                        self.cursor = "default";
                        if (self.isLeft) {
                            self.cursor = (self.isTop) ? "nw-resize" : ((self.isBottom) ? "sw-resize" : "w-resize");
                        }
                        else 
                            if (self.isRight) {
                                self.cursor = (self.isTop) ? "ne-resize" : ((self.isBottom) ? "se-resize" : "e-resize");
                            }
                            else {
                                self.cursor = (self.isTop) ? "n-resize" : ((self.isBottom) ? "s-resize" : "default");
                            }
                        self.$$resizerSpot[0].style.cursor = self.cursor;
                    }
                }
                else {
                    self.$$resizerSpot[0].style.cursor = "default";
                }
            });
        }
        
    },
    _startDrag: function(){
        var self = this;
        $(document).bind("mouseup." + self.id, function(){
            $(document).unbind("." + self.id);
            delete document.site.DDAuthoring;
        }).bind("mousemove." + self.id, function(event){
            var position = {
                top: (self.startPosition.top + event.pageY),
                left: (self.startPosition.left + event.pageX)
            };
            self.options.slot.style.top = position.top + "px";
            self.options.slot.style.left = position.left + "px";
            if (self.options.source) {
                self.options.source.draggedPosition = position;
            }
            event.preventDefault();
            return false;
        });
    },
    _startResize: function(){
        var self = this;
        if (self.isLeft || self.isRight || self.isTop || self.isBottom) {
            self.resizing = true;
            self.prevDocumentCursor = document.site.body.style.cursor;
            document.site.body.style.cursor = self.cursor;
            if (self.options.onResize) {
                self.options.onResize(self);
            }
            self.minHeight = self.options.minHeight || Math.max(Math.ceil($(window).height()) * 0.2, 200);
            self.minWidth = self.options.minWidth || Math.max(Math.ceil($(window).width()) * 0.2, 200);
            $(document).bind("mouseup." + self.id, function(event){
                $(document).unbind("." + self.id);
                self.resizing = false;
                document.site.body.style.cursor = self.prevDocumentCursor;
                if (self.options.onResize) {
                    self.options.onResize(self);
                }
                event.preventDefault();
                return false;
            }).bind("mousemove." + self.id, function(event){
                self.onResize(event);
                event.preventDefault();
            });
        }
    },
    onResize: function(event){
        var width, height;
        var style = this.options.slot.style;
        if (this.isLeft) {
            width = this.right - event.pageX;
            if (width >= this.minWidth) {
                style.left = event.pageX + "px";
                style.width = width + "px";
            }
        }
        else {
            if (this.isRight) {
                width = event.pageX - this.left;
                if (width >= this.minWidth) {
                    style.width = width + "px";
                }
            }
        }
        if (this.isTop) {
            height = this.bottom - event.pageY;
            if (height >= this.minHeight) {
                style.top = event.pageY + "px";
                style.height = height + "px";
            }
        }
        else {
            if (this.isBottom) {
                height = event.pageY - this.top;
                if (height >= this.minHeight) {
                    style.height = height + "px";
                }
            }
        }
    },
    dispose: function(){
        if (this.$$dragSpot) {
            this.$$dragSpot.unbind("." + this.id);
        }
        $(document).unbind("." + this.id);
        if (this.$$resizerSpot) {
            this.$$resizerSpot.unbind("." + this.id);
        }
        if (this.options) {
            this.options.onResize = null;
        }
        this.$$slot = this.$$dragSpot = this.$$resizerSpot = this.options = null;
    }
});
