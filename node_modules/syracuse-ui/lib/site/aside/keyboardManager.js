"use strict";
var helpers = require('syracuse-core/lib/helpers');
var keyboardShortCut = require('syracuse-ui/lib/site/aside/keyboardShortCut');

function KeyboardManager() {}


exports.KeyboardManager = helpers.defineClass(KeyboardManager, null, {
	load: function() {
		var self = this;
		self.site = document.site;
		self.shortcurts = {};
		//var article = document.controller.findArticle($(this));
		self.keydown = document.addEventListener("keydown", function(event) {
			event = event || window.event;
			//ajouter ctrl + shifht key 
			if (event.keyCode == 27) {
				self.shortcurts = {
					esc: true
				};
			} else {
				if (self.shortcurts.esc) {
					self.shortcurts.isEnabled = true;
				}
			}
			var isShorcutApplyed = false;
			self.shortcurts[keyboardShortCut.getKeyCodeMap(event.keyCode)] = true;
			if (self.site.messageBox && !self.site.messageBox.disposed) {
				isShorcutApplyed = self.site.messageBox.applyShortCuts(self.shortcurts);
			} else {
				if (self.site.lastFocusField && self.site.lastFocusField.applyShortCuts) {
					isShorcutApplyed = self.site.lastFocusField.applyShortCuts(self.shortcurts, event);
				}
				if (!isShorcutApplyed) {
					var mainpage = ((self.site.fusionGateway) ? self.site.fusionGateway.getFirstPage() : null) || self.site.mainPage;
					isShorcutApplyed = mainpage.applyShortCuts(self.shortcurts);
				}
			}
			if (isShorcutApplyed) {
				event.returnValue = false;
				if (event.preventDefault) {
					event.preventDefault();
				}
				return false;
			}
		}, false);
		self.keypress = document.addEventListener("keypress", function(event) {
			event = event || window.event;
			if (!(self.shortcurts && self.shortcurts.esc)) {
				if (self.site.lastFocusField && self.site.lastFocusField.validateKeyPress) {
					if (!self.site.lastFocusField.validateKeyPress(String.fromCharCode(event.charCode || event.keyCode), self.shortcurts, event)) {
						event.returnValue = false;
						if (event.preventDefault) {
							event.preventDefault();
						}
						return false;
					}
				}
			}
		}, false);
		self.keyup = document.addEventListener("keyup", function(event) {
			event = event || window.event;
			if (self.shortcurts) {
				if (event.keyCode == 27) {
					if (self.shortcurts.isEnabled) {
						//dialog or close field
					}
					self.shortcurts = {};
				} else {
					if (!self.shortcurts.esc) {
						delete self.shortcurts[keyboardShortCut.getKeyCodeMap(event.keyCode)];
						if (self.site.lastFocusField && self.site.lastFocusField.onKeyUp) {
							self.site.lastFocusField.onKeyUp(event);
						}
					}
				}
			}
		}, false);
	},
	dispose: function() {
		if (this.keydow || this.keypress || this.keyup) {
			document.removeEventListener("keydown", this.keydown, false);
			document.removeEventListener("keypress", this.keypress, false);
			document.removeEventListener("keyup", this.keyup, false);
		}
		this.site = this.keydow = this.keypress = this.keyup = null;
	}
});





function oldBind() {
	document.site.$$layoutSlot.delegate("*", "keydowns keyups", function(event) {
		var elem = document.site;
		if (event.type == "keydown") {
			self.applyShortCut = false;
			if (keyboardShortCut.getNoModShortcut().indexOf(event.keyCode) !== -1) { // no modifier needed we add it
				self.keysDown.push(event.keyCode);
				self.keysOk.push(event.keyCode);
			}
			if (event.keyCode === keyboardShortCut.getModifier() && self.keysDown.indexOf(event.keyCode) === -1) { // first keydown to add is modifier
				self.keysDown.push(event.keyCode);
				self.keysOk.push(event.keyCode);
			}
			if (self.keysDown.indexOf(keyboardShortCut.getModifier()) !== -1) { // if modifier exists add other keydown
				if (self.keysDown.indexOf(event.keyCode) === -1) {
					self.keysDown.push(event.keyCode);
				}
				if (self.keysOk.indexOf(event.keyCode) === -1) {
					self.keysOk.push(event.keyCode);
				}
				// save the time when keydown on modifier
			}
			if ((self.keysDown.length >= 0 || (self.keysDown.length === 3 && event.shiftKey)) && ((keyboardShortCut.getModifier() === event.keyCode) || (self.keysDown.length !== 0 && (self.keysDown.indexOf(keyboardShortCut.getModifier()) !== -1 || keyboardShortCut.getNoModShortcut().indexOf(self.keysDown[0]) !== -1) && event))) { // if modifier exists try perform shortcut
				self.applyShortCut = keyboardShortCut.applyKeyboardShortCut2({
					isFusion: elem.fusionGateway && elem.fusionGateway._books && elem.fusionGateway._books.length && elem.fusionGateway._books[0].selectedSheet != null,
					keysDown: self.keysOk,
					event: event,
					eventListener: self
				});

				if (keyboardShortCut.getNoModShortcut().indexOf(self.keysDown[0]) !== -1 || self.applyShortCut) {
					self.keysOk = [];
					self.keysDown = [];
				}
				return !self.applyShortCut;
			}
		}
		if (event.type == "keyup") {
			if (self.keysDown.indexOf(event.keyCode) !== -1) {
				self.keysDown.splice(self.keysDown.indexOf(event.keyCode), 1);
			}
			if (event.keyCode === keyboardShortCut.getModifier()) { // if keyup modifier , erase keysdown
				self.keysOk = [];
				self.keysDown = [];
				var field = document.site.lastFocusField;
				if (field && !self.applyShortCut) {
					event.type = 'keydown';
					event.keyCode = keyboardShortCut.getModifier();
					field.onFieldInputEvent(event);
				}
			} else {
				if (self.keysDown.indexOf(keyboardShortCut.getModifier()) === -1) {
					return true;
				} else {
					return false;
				}
			}
		}
	});
}