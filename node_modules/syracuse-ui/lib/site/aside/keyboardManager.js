"use strict";
var helpers = require('syracuse-core/lib/helpers');
var uiLocker = require('syracuse-ui/lib/site/uiLocker');

var _keyCodeMap = {
	"8": "backspace",
	"9": "tab",
	"13": "enter",
	"16": "shift",
	"17": "ctrl",
	"27": "esc",
	"32": "space",
	"33": "pageup",
	"34": "pagedown",
	"36": "home",
	"37": "left",
	"38": "up",
	"39": "right",
	"40": "down",
	"45": "insert",
	"46": "delete",
	"58": ",",
	"65": "a",
	"66": "b",
	"67": "c",
	"68": "d",
	"69": "e",
	"70": "f",
	"71": "g",
	"72": "h",
	"73": "i",
	"74": "j",
	"75": "k",
	"76": "l",
	"77": "m",
	"78": "n",
	"79": "o",
	"80": "p",
	"81": "q",
	"82": "r",
	"83": "s",
	"84": "t",
	"85": "u",
	"86": "v",
	"87": "w",
	"88": "x",
	"89": "y",
	"90": "z",
	"111": "divide",
	"112": "f1",
	"115": "f4",
	"116": "f5",
	"117": "f6",
	"118": "f7",
	"120": "f9",
	"122": "f11",
	"123": "f12",
	"188": ":"
};


function KeyboardManager() {}


exports.KeyboardManager = helpers.defineClass(KeyboardManager, null, {
	load: function() {
		var self = this;
		self.shortcurts = {};
		//var article = document.controller.findArticle($(this));
		self.keydown = document.addEventListener("keydown", function(event) {
			var site = document.site;
			var lastFocusField = site.lastFocusField;
			event = event || window.event;
			if (event.keyCode == 27) {
				self.shortcurts = {
					esc: true
				};
			} else {
				if (self.shortcurts.esc) {
					self.shortcurts.isEnabled = true;
				}
			}
			var isShorcutApplyed = false;
			self.shortcurts[_keyCodeMap[event.keyCode]] = true;
			if (site.messageBox && !site.messageBox.disposed && !site.messageBox.displayDisabled) {
				isShorcutApplyed = site.messageBox.applyShortCuts(self.shortcurts);
			} else {
				if (lastFocusField && lastFocusField.applyShortCuts) {
					isShorcutApplyed = lastFocusField.applyShortCuts(self.shortcurts, event);
				}
				if (!isShorcutApplyed) {
					var mainpage = ((site.fusionGateway) ? site.fusionGateway.getFirstPage() : null) || site.mainPage;
					isShorcutApplyed = mainpage.applyShortCuts(self.shortcurts);
				}
			}
			if (isShorcutApplyed && self.shortcurts.esc) {
				self.shortcurts = {
					esc: true,
					isEnabled: true
				};
				event.returnValue = false;
				if (event.preventDefault) {
					event.preventDefault();
				}
				return false;
			}
		}, false);
		self.keypress = document.addEventListener("keypress", function(event) {
			event = event || window.event;
			var site = document.site;
			var charCode;
			if (event.which == null) {
				charCode = String.fromCharCode(event.keyCode); // old IE			 	
			} else if (event.which != 0 && event.charCode != 0) {
				charCode = event.which;
			}
			if (charCode !== undefined) {
				var lastFocusField = site.lastFocusField;
				if (!(self.shortcurts && self.shortcurts.esc)) {
					if (lastFocusField && lastFocusField.validateKeyPress) {
						if (!lastFocusField.validateKeyPress(String.fromCharCode(event.charCode || event.keyCode), self.shortcurts, event)) {
							event.returnValue = false;
							if (event.preventDefault) {
								event.preventDefault();
							}
							return false;
						}
					}
				}
			}
		}, false);
		self.keyup = document.addEventListener("keyup", function(event) {
			event = event || window.event;
			var site = document.site;
			var lastFocusField = site.lastFocusField;
			if (self.shortcurts) {
				if (event.keyCode == 27) {
					if (!self.shortcurts.isEnabled) {
						var isEscApplyed;
						if (lastFocusField && lastFocusField.applyEscape) {
							isEscApplyed = lastFocusField.applyEscape(event);
						}
						if (!isEscApplyed) {
							var mainpage = ((site.fusionGateway) ? site.fusionGateway.getFirstPage() : null) || site.mainPage;
							mainpage.applyEscape(self.shortcurts);
						}
					}
					self.shortcurts = {};
				} else {
					if (!self.shortcurts.esc) {
						delete self.shortcurts[_keyCodeMap[event.keyCode]];
						if (lastFocusField && lastFocusField.onKeyUp) {
							lastFocusField.onKeyUp(event);
						}
					}
				}
			}
		}, false);
	},
	dispose: function() {
		if (this.keydow || this.keypress || this.keyup) {
			document.removeEventListener("keydown", this.keydown, false);
			document.removeEventListener("keypress", this.keypress, false);
			document.removeEventListener("keyup", this.keyup, false);
		}
		this.keydow = this.keypress = this.keyup = null;
	}
});





function oldBind() {
	document.site.$$layoutSlot.delegate("*", "keydowns keyups", function(event) {
		var elem = document.site;
		if (event.type == "keydown") {
			self.applyShortCut = false;
			if (getNoModShortcut().indexOf(event.keyCode) !== -1) { // no modifier needed we add it
				self.keysDown.push(event.keyCode);
				self.keysOk.push(event.keyCode);
			}
			if (event.keyCode === keyboardShortCut.getModifier() && self.keysDown.indexOf(event.keyCode) === -1) { // first keydown to add is modifier
				self.keysDown.push(event.keyCode);
				self.keysOk.push(event.keyCode);
			}
			if (self.keysDown.indexOf(keyboardShortCut.getModifier()) !== -1) { // if modifier exists add other keydown
				if (self.keysDown.indexOf(event.keyCode) === -1) {
					self.keysDown.push(event.keyCode);
				}
				if (self.keysOk.indexOf(event.keyCode) === -1) {
					self.keysOk.push(event.keyCode);
				}
				// save the time when keydown on modifier
			}
			if ((self.keysDown.length >= 0 || (self.keysDown.length === 3 && event.shiftKey)) && ((keyboardShortCut.getModifier() === event.keyCode) || (self.keysDown.length !== 0 && (self.keysDown.indexOf(keyboardShortCut.getModifier()) !== -1 || getNoModShortcut().indexOf(self.keysDown[0]) !== -1) && event))) { // if modifier exists try perform shortcut
				self.applyShortCut = keyboardShortCut.applyKeyboardShortCut2({
					isFusion: elem.fusionGateway && elem.fusionGateway._books && elem.fusionGateway._books.length && elem.fusionGateway._books[0].selectedSheet != null,
					keysDown: self.keysOk,
					event: event,
					eventListener: self
				});

				if (getNoModShortcut().indexOf(self.keysDown[0]) !== -1 || self.applyShortCut) {
					self.keysOk = [];
					self.keysDown = [];
				}
				return !self.applyShortCut;
			}
		}
		if (event.type == "keyup") {
			if (self.keysDown.indexOf(event.keyCode) !== -1) {
				self.keysDown.splice(self.keysDown.indexOf(event.keyCode), 1);
			}
			if (event.keyCode === keyboardShortCut.getModifier()) { // if keyup modifier , erase keysdown
				self.keysOk = [];
				self.keysDown = [];
				var field = document.site.lastFocusField;
				if (field && !self.applyShortCut) {
					event.type = 'keydown';
					event.keyCode = keyboardShortCut.getModifier();
					field.onFieldInputEvent(event);
				}
			} else {
				if (self.keysDown.indexOf(keyboardShortCut.getModifier()) === -1) {
					return true;
				} else {
					return false;
				}
			}
		}
	});
}

function getNoModShortcut() {
	return [_letterMap['enter'], _letterMap['up'], _letterMap['down']];
};