"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var SingleArrayField = require("syracuse-ui/lib/field/array/singleArrayField").SingleArrayField;
var NavigationItemBuilder = require('syracuse-ui/lib/page/navigation/navigationItemBuilder').NavigationItemBuilder;
var ReferenceField = require('syracuse-ui/lib/field/referenceField').ReferenceField;
var _manager = {};

function BookmarkMenuField() {}

helpers.defineClass(BookmarkMenuField, ReferenceField, {
	loadBox: function() {
		this.$item.$isMenusHidden = true;
		this.$item.$skin = "s-admin-field";
		ReferenceField.prototype.loadBox.call(this);
		this.onReorderItem(this.articleParent);
		this.articleParent.domItem.className += " " + this.$item.$skin + "-item";
	},
	onReorderItem: function(record) {

	},
	_createValueContainer: function() {
		this._core = this._dataValue = this.domItem;
	},
	render: function() {
		this.codeMenu = this.page.loadNewItem(this._dataValue, {
			$subRecordKey: this.$item.$bind,
			$css: this.$item.$css,
			$category: "link",
			$skin: this.$skin + "-link"
		}, this.boxParent);
		this.codeMenu.referenceField = this;

		this.setDescription(this.$item.$description || this.$field.$item.$description);
		this.currentValue && this._renderCurrentValue();
	},
	_renderCurrentValue: function() {
		if (this.codeMenu) {
			if (this.$menus && this.$menus.$details) {
				syra_menus.menus.applyChange(this, {
					$links: {
						$details: {
							$title: this.currentValue.$value || "",
							$description: this.currentValue.$title || ""
						}
					}
				});
			}
			var value = this.getDatasetValue();
			if (value) {
				if (value.$url) {
					value.$title = value.$title || this.currentValue.$value || "";
					if (value.convergenceFunction) {
						value.$description = syra_local.nvpFunction + ": " + value.convergenceFunction;
					} else {
						if (value.entity) {
							value.$description = syra_local.nvpEntity + ": " + value.entity;
							if (value.entity != helpers.string.pluralize(value.representation || "")) {
								value.$description += " (" + syra_local.nvpRepresentation + ": " + value.representation + ")";
							}
						}
					}
					if (!value.$description) {
						value.$description = value.$description;
					}
					this.codeMenu.isBookmarkMenuField = true;
					this.codeMenu.setMenu(value, this.currentValue, this.currentValue);
					if (value.$hasSeparator) {
						this.articleParent.domItem.className += " s-separator";
					}
				}
			}
		}
	}
});


function BookmarksPage() {}

helpers.defineClass(BookmarksPage, DesktopPage, {
	loadBox: function() {
		this.mainPageDesignerAccess = "unknow";
		DesktopPage.prototype.loadBox.call(this);
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "items":
				var list = new SingleArrayField();
				$field.$builderClass = NavigationItemBuilder;
				list.isBookMarkList = true;
				list.$isMenuBarAtTop = true;
				list.columnsCount = 1;
				$item.$isPickerMenuHidden = true;
				$item.$isTopLabelAlignment = true;
				$item.$skin = "s-admin-items";
				list.$itemRecordMenuSkin = "s-admin-item-btn";
				return list;
			case "$singleField":
				switch ($item.$variantItemKey) {
					case "menuItem":
						return new BookmarkMenuField();
				}
				return null;
		}
		return null;
	},
	notifyChangeToServer: function() {
		_notifyChangeToServer(syra_delta.cleanServerIndex(helpers.object.clone(this.dataset, true)));
	},
	notifyDataChange: function() {
		this.notifyChangeToServer();
	},
	onMenuClick: function(menuItem) {
		if (menuItem.isBookmarkMenuField) {
			if (exports.onLinkClick(menuItem)) {
				this.dialogWrapper && this.dialogWrapper.close();
			}
			return false;
		}
		return true;
	},
	switchBookmarkEditTitle: function(record, isEdit) {
		var cell = record.singleField.variantItem.domItem;
		if (isEdit) {
			syra_dom.hide(cell, true);
			var slot = document.createElement("div");
			slot.className = cell.className;
			cell.parentNode.insertBefore(slot, cell);
			record.editTitleField = this.loadNewItem(slot, {
				$category: "field",
				$isTitleHidden: true,
				$isTopLabelAlignment: false,
				$contentEditable: true,
				$isEditMode: true,
				$inplace: true,
				$css: "s-nav-admin-menu-edit",
				$field: {
					$isMandatory: true,
					$type: "application/x-string",
					$displayLength: 25
				}
			}, record);
			record.editTitleField.focus();
			record.editTitleField.setDataValue(record.singleField.variantItem.getDatasetValue().title);
		} else {
			syra_dom.hide(cell, false);
			if (record.editTitleField) {
				record.removeItem(record.editTitleField, true, true);
				record.editTitleField = null;
			}
		}
		record.applyChange({
			$actions: {
				$edit: {
					$isHidden: isEdit
				},
				"$canceledit": {
					$title: syra_local.bookmarksCloseEdit,
					$isHidden: !isEdit
				}
			}
		});
		if (isEdit) {
			var $edit = record.menuItems.$edit;
			if (record.menuItems.$canceledit) {
				record.menuItems.$edit[0].domItem.parentNode.insertBefore(record.menuItems.$canceledit[0].domItem, record.menuItems.$edit[0].domItem);
			}
		}
	},
	dispose: function() {
		exports.checkMainPageStatus();
		_refreshNavigationPage();
		DesktopPage.prototype.dispose.call(this);
	}
});

exports.load = function() {
	_manager.dataset = {
		items: []
	};

	_manager.buttons = [];
	_manager.addBtn = syra_menus.button.add({
		parent: syra_site,
		slot: syra_site.headerBottom,
		text: syra_local.bookmarksAdd,
		css: "s-bookmarks-bar-btn",
		iconOnly: true,
		fontIcon: "bookmark_off",
		btnclick: _onAddClick
	});
	_manager.manageBtn = syra_menus.button.add({
		parent: syra_site,
		slot: syra_site.headerBottom,
		text: syra_local.bookmarksManage,
		css: "s-bookmarks-bar-btn",
		iconOnly: true,
		fontIcon: "expand_l",
		btnclick: _onManagerClick
	});
	syra_menus.button.visibility(_manager.manageBtn, false);

	_manager.buttonsSlot = document.createElement("div");
	_manager.buttonsSlot.id = "s-bookmarks-bar-links";
	syra_site.headerBottom.appendChild(_manager.buttonsSlot);

	_manager.moreBtn = syra_menus.button.add({
		parent: syra_site,
		slot: syra_site.headerBottom,
		text: syra_local.bookmarksMore,
		title: syra_local.bookmarksMoreTooltip,
		css: "s-bookmarks-more-btn",
		btnclick: function() {
			if (!_manager.morePopupDlg) {
				_manager.morePopupDlg = syra_dlg.openPopup(syra_site, {
					content: {
						id: ++syra_site._childItemOffset
					},
					slot: _manager.morePopupBody,
					picker: _manager.moreBtn.link,
					position: {
						my: "left top",
						at: "left bottom",
						of: $(_manager.moreBtn.link)
					},
					onClose: function() {
						setTimeout(function() {
							_manager.morePopupDlg = null;
						}, 200);
					}
				});

				for (var ii = 0, jj = _manager.buttons.length; ii < jj; ii++) {
					var button = _manager.buttons[ii];
					if (!button.$isDisabled && button.isInMore) {
						button.link.focus();
						break;
					}
				}
			} else {
				_manager.morePopupDlg.close();
			}
		}
	});
	syra_menus.button.visibility(_manager.moreBtn, false);
	_manager.morePopupBody = document.createElement("div");
	_manager.morePopupBody.className = "s-mn-popup-body";
};


exports.onLinkClick = function(menuItem) {
	var workBook = syra_fusion && syra_fusion.activatedBook;
	var target;
	if (workBook) {
		if (menuItem.urlSegment.fusionParams) {
			//x3 fct : open via ackcall
			//how to get current field with best way ?
			var sapController = workBook.fusionSite.controller._sapController;
			if (sapController) {
				syra_site.mainPage.externalAdapter.onBlockExRpc({
					field: sapController.getBoundField(sapController._currCtx.ist, {
						"noStrict": true
					}),
					call: {
						proxy: "EXEFNC1",
						values: [menuItem.urlSegment.fusionParams.functionCode, menuItem.urlSegment.fusionParams.transaction],
						callback: function() {}
					}
				});
			}
		}
		return;
		//target = "blank";
	}
	syra_controller.executeMenu({
		$url: menuItem.urlSegment.$url,
		target: target
	}, syra_site);

	//syra_url.history.load({});
};
exports.getFirstActiveButton = function() {
	var button, firstButton;
	for (var ii = 0, jj = _manager.buttons.length; ii < jj; ii++) {
		button = _manager.buttons[ii];
		if (!button.$isDisabled) {
			button.isInMore ? firstButton = _manager.moreBtn : firstButton = button;
			break;
		}
	}
	return firstButton;
};
exports.refresh = function() {
	syra_dom.empty(_manager.buttonsSlot);
	syra_dom.empty(_manager.morePopupBody);
	syra_menus.button.visibility(_manager.moreBtn, false);
	_resetLinks();
	_addLineLinks(_manager.dataset.items);
	exports.checkMainPageStatus();
};
exports.loadBookmarks = function() {
	syra_controller.callServer(syra_site.userProfile, {
		$location: {
			$url: syra_expression.parse(syra_site.userProfile, syra_site.userProfile.$menus.$bookmarks.$url)
		},
	}, function(data, response, requestUrl) {
		if (!syra_site.userProfile.disposed) {
			_manager.dataset = data.content || {};
			_manager.dataset.items = _manager.dataset.items || [];
			exports.refresh();
		}
	});
};

exports.onNavigationMenuItemAddClick = function() {
	var menuItem = this.parent;
	if (!menuItem.isBookmark) {
		if (!_findMenuItem(menuItem.urlSegment)) {
			menuItem.isBookmark = true;
			_manager.dataset.items.push({
				menuItem: {
					$url: menuItem.urlSegment.$url,
					description: menuItem.codeMenu.$description || "",
					title: menuItem.codeMenu.$title || ""
				}
			});
		}
	} else {
		menuItem.isBookmark = false;
		var mn = _findMenuItem(menuItem.urlSegment);
		mn && _deleteMenuItem(mn);
	}
	_toggleButton(menuItem.bookmarkBtn, menuItem.isBookmark);
	_notifyChangeToServer();
};

exports.checkNavigationMenuItemBookMark = function(menuItem) {
	menuItem.urlSegment = syra_url.parse(menuItem.codeMenu.$url);
	syra_url.replaceSegmentEndpoint(menuItem.urlSegment, syra_site.userProfile.dataset.selectedEndpoint, true);
	if (_findMenuItem(menuItem.urlSegment)) {
		menuItem.isBookmark = true;
		_toggleButton(menuItem.bookmarkBtn, menuItem.isBookmark);
	} else {
		if (menuItem.isBookmark) {
			menuItem.isBookmark = false;
			_toggleButton(menuItem.bookmarkBtn, menuItem.isBookmark);
		}
	}
};
exports.checkMainPageStatus = function() {
	var activePage = syra_fusion.getActivatedSheet() || syra_site.mainPage;
	if (activePage && !activePage.disposed && activePage != _manager.lastCheckedPage) {
		_manager.lastCheckedPage = activePage;
		var isBookmarkEnabled;
		if (activePage) {
			isBookmarkEnabled = activePage.isBookmarkEnabled;
			if (isBookmarkEnabled === undefined) {
				isBookmarkEnabled = activePage.$item.$isBookmarkEnabled;
			}
			if (isBookmarkEnabled === undefined) {
				isBookmarkEnabled = activePage.$facet != "$edit";
			}
		}
		var isOn = false;
		var functionfusion;
		var menuItem;
		if (activePage) {
			var urlSegment;
			if (activePage.isFusionPage) {
				functionfusion = activePage.$fusionPageMeta && activePage.$fusionPageMeta.winModel.getFctName();
				if (functionfusion) {
					urlSegment = {
						isFusion: true,
						fusionParams: {
							fullCode: functionfusion.name,
							functionCode: functionfusion.name,
							transaction: functionfusion.transaction
						}
					};
					if (functionfusion.transaction) {
						urlSegment.fusionParams.fullCode += "~" + functionfusion.transaction;
					}
					//(urlSegment.fusionParams.transaction == item.menuItem.urlSegment.transaction)) {
				}
			} else {
				urlSegment = syra_url.history.getUrlSegment(activePage.openerUrlSegments.$url);
			}
			menuItem = urlSegment && _findMenuItem(urlSegment);
		}
		isOn = !! menuItem;
		for (var ii = 0, jj = _manager.buttons.length; ii < jj; ii++) {
			var btn = _manager.buttons[ii];
			if (btn.menuItem) {
				syra_dom.toggleClass(btn.link, "s-on", btn.bookMarkOn = menuItem && btn.menuItem == menuItem);
				syra_menus.button.disable(btn, !btn.isBookmarkEnabled || ((activePage && activePage.isFusionPage) && !btn.menuItem.urlSegment.isFusion));
			}
		}
		syra_menus.button.visibility(_manager.manageBtn, _manager.count);
		if (_manager.count >= syra_site.$maxBookmarks) {
			isBookmarkEnabled = false;
		}
		syra_menus.button.disable(_manager.addBtn, !isBookmarkEnabled);
		_toggleButton(_manager.addBtn, isOn);
		exports.onResize();
	}
};

exports.onResize = function() {
	var maxW = syra_site.headerBottom.clientWidth;
	_manager.buttonsSlot.style.width = Math.max(0, Math.max(0, maxW - _manager.buttonsSlot.getBoundingClientRect().left) - _manager.moreBtn.link.clientWidth) + "px";
	if (_manager.buttonsSlot.clientWidth <= (_manager.buttonsSlot.scrollWidth - 2)) {
		for (var ii = _manager.buttons.length - 1; ii >= 0; ii--) {
			var btn = _manager.buttons[ii];
			if (!btn.isInMore) {
				btn.isInMore = true;
				var css = "s-bookmarks-bar-link-in-more";
				if (btn.hasSeparator) {
					css += " s-separator";
				}
				if (btn.bookMarkOn) {
					css += " s-on";
				}
				btn.link.className = css;
				if (btn.$isDisabled || !btn.isBookmarkEnabled) {
					syra_menus.button.disable(btn, true);
				}
				_manager.morePopupBody.insertBefore(btn.link, _manager.morePopupBody.firstChild);
			}
			if (_manager.buttonsSlot.clientWidth >= (_manager.buttonsSlot.scrollWidth - 2)) {
				break;
			}
		}
	} else {
		if (_manager.morePopupBody.children.length) {
			for (var ii = 0, jj = _manager.buttons.length; ii < jj; ii++) {
				var btn = _manager.buttons[ii];
				if (btn.isInMore) {
					btn.link.className = "s-bookmarks-bar-link";
					if (btn.$isDisabled || !btn.isBookmarkEnabled) {
						syra_menus.button.disable(btn, true);
					}
					if (btn.bookMarkOn) {
						btn.link.className += " s-on";
					}
					_manager.buttonsSlot.appendChild(btn.link);
					if (_manager.buttonsSlot.clientWidth <= (_manager.buttonsSlot.scrollWidth - 2)) {
						btn.link.className = "s-bookmarks-bar-link-in-more";
						if (btn.bookMarkOn) {
							btn.link.className += " s-on";
						}
						if (btn.$isDisabled || !btn.isBookmarkEnabled) {
							syra_menus.button.disable(btn, true);
						}
						_manager.morePopupBody.insertBefore(btn.link, _manager.morePopupBody.firstChild);
						break;
					} else {
						btn.isInMore = false;
					}
					if (btn.hasSeparator) {
						btn.link.className += " s-separator";
					}
				}
			}
		}
	}
	syra_menus.button.visibility(_manager.moreBtn, _manager.morePopupBody.children.length > 0);
};
exports.dispose = function() {
	_resetLinks();
	_manager.dialog && _manager.dialog.dispose();
	syra_menus.button.dispose(_manager.moreBtn);
	syra_menus.button.dispose(_manager.addBtn);
	syra_menus.button.dispose(_manager.manageBtn);
	syra_site.disposeObject(_manager);
};


function _refreshManager() {
	if (_manager.dialog) {
		var items = helpers.object.clone(_manager.dataset.items, true);
		_manager.dialog._content.applyChange({
			items: items
		});
		_manager.dialog.resizeDialog();
	}
}

function _onManagerClick() {
	_manager.dialog = syra_dlg.openPage(syra_site, {
		onClose: function(isCanceled, dispose) {
			_manager.dialog = null;
			return true;
		},
		$itemPage: {
			$pageCategoryClass: BookmarksPage,
			$category: "page",
			$facet: "$bookmarks",
			$representation: {
				$prototype: {
					$type: "application/json",
					$title: syra_local.bookmarksTitle,
					$properties: {
						items: {
							$type: "application/x-array",
							$capabilities: "reorder",
							$links: {
								$select: {
									$title: "Add",
									$variants: {
										menuItem: {
											$title: syra_local.bookmarksSelectMenu,
											$url: "/sdata/syracuse/collaboration/syracuse/menuItems?representation=menuItem.$select"
										}
									}
								}
							},
							$item: {
								$type: "application/x-variant",
								$variants: {
									menuItem: {
										$type: "application/x-reference",
										$capabilities: "reorder,delete",
										$item: {
											$value: "{title}",
											$key: "{$uuid}",
											$properties: {
												title: {
													$type: "application/x-string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				$article: {
					$layout: {
						$items: [{
							$layout: {
								$items: [{
									$isEditMode: true,
									$bind: "items",
									//$skin: "s-bookmarks",
									$layout: {
										$items: [{
											$bind: "menuItem"
										}]
									}
								}]
							}
						}]
					}
				}
			}
		}
	});
	_refreshManager();
}

function _onAddClick() {
	var title, urlSegment, description;
	var page = syra_fusion.getActivatedSheet();
	if (page) {
		var fct = page.$fusionPageMeta.winModel.getFctName();
		if (fct.name && (page.$fusionPageMeta.winModel._mdata.type == 1 || page.$fusionPageMeta.winModel._mdata.type == 2)) {
			if (page.openerUrlSegments.fusionParams.functionCode != fct.name) {
				urlSegment = helpers.object.clone(page.openerUrlSegments, true);
				syra_url.replaceFusionCode(urlSegment, fct.name);
				syra_url.build(urlSegment);
				title = page.getTitle();
			} else {
				urlSegment = page.openerUrlSegments;
				title = fct.title;
			}
			description = syra_local.nvpFunction + ": " + page.openerUrlSegments.fusionParams.functionCode;
		}
	} else {
		page = syra_site.mainPage;
		if (page && page.openerUrlSegments) {
			urlSegment = page.openerUrlSegments;
			title = page.getTitle();
			if (page.$prototype.$representation) {
				description = syra_local.nvpEntity + ": " + page.$prototype.$representation;
				/*if (page.$prototype.$representation != helpers.string.pluralize(page.$prototype.$representation || "")) {
                 description += " (" + syra_local.nvpRepresentation + ": " + page.$prototype.$representation + ")";
                 }*/
			}
		}
	}
	if (urlSegment) {
		var menuItem = _findMenuItem(urlSegment);
		if (menuItem) {
			_deleteMenuItem(menuItem);
		} else {
			menuItem = {
				$url: urlSegment.$url,
				title: title
			};
			if (description) {
				menuItem.description = description;
			}
			_manager.dataset.items.push({
				menuItem: menuItem
			});
		}
		_refreshNavigationPage();
		_notifyChangeToServer();
	}
}

function _refreshItems(items) {
	for (var ii = 0, jj = items.records.length; ii < jj; ii++) {
		var record = items.records[ii];
		if (record.singleField.$variantItemKey == "menuItem") {
			exports.checkNavigationMenuItemBookMark(record.singleField.variantItem);
		} else {
			_refreshItems(record.singleField.variantItem.record.itemsField);
		}
	}
}

function _refreshNavigationPage() {
	if (syra_site.mainPage && syra_site.mainPage.isNavigationPage) {
		var page = syra_site.mainPage;
		if (!page.isAdminMode) {
			var modules = page.boundFields && page.boundFields.modules;
			if (modules) {
				for (var ii = 0, jj = modules.length; ii < jj; ii++) {
					var module = modules[ii];
					for (var mm = 0, kk = module.records.length; mm < kk; mm++) {
						var subModules = module.records[mm].subModulesItem;
						if (subModules) {
							for (var pp = 0, nn = subModules.records.length; pp < nn; pp++) {
								_refreshItems(subModules.records[pp].itemsField);
							}
						}
					}
				}
			}
		}
	}
}

function _notifyChangeToServer(dataset) {
	var userProfile = syra_site.userProfile;
	_manager.dataset = dataset || _manager.dataset;
	syra_controller.callServer(userProfile, {
		$location: {
			$url: syra_expression.parse(userProfile, userProfile.$menus.$bookmarks.$url)
		},
		data: {
			$etag: _manager.dataset.$etag,
			content: _manager.dataset
		},
		method: "PUT",
		$etag: _manager.dataset.$etag
	}, function(data, response, requestUrl) {
		if (!userProfile.disposed) {
			exports.refresh();
			_refreshManager();
			_refreshNavigationPage();
		}
	});
}

function _addLineLinks(items) {
	if (items) {
		var selectedEndpoint = syra_site.userProfile.dataset.selectedEndpoint;
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			var item = items[ii];
			var btn;
			if (item.menuItem) {
				if (item.menuItem.$url) {
					btn = syra_menus.button.add({
						parent: syra_site,
						slot: _manager.buttonsSlot,
						text: item.menuItem.title || item.menuItem.description || "???",
						title: item.menuItem.description,
						css: "s-bookmarks-bar-link",
						btnclick: function() {
							!this.$isDisabled && exports.onLinkClick(this.menuItem);
						},
						menuItem: item.menuItem
					});
					if (item.menuItem.$hasSeparator) {
						btn.hasSeparator = true;
						btn.link.className += " s-separator";
					}
					var seg = item.menuItem.urlSegment = syra_url.parse(item.menuItem.$url, true);
					if (seg.host) {
						//set relative url
						seg.isSyracuse = true;
						seg.uri = seg.uri.slice(seg.uri.indexOf(seg.host) + seg.host.length);
						seg.$url = seg.$url.slice(seg.$url.indexOf(seg.host) + seg.host.length);
						seg.host = null;
					}
					if (syra_url.replaceSegmentEndpoint(seg, selectedEndpoint, true)) {
						item.menuItem.$url = syra_url.build(seg);
						btn.isBookmarkEnabled = true;
					} else {
						if (seg.endpointSeg && seg.endpointSeg.application == "syracuse" && seg.endpointSeg.contract == "collaboration") {
							btn.isBookmarkEnabled = true;
						}
					}
					if (seg.isFusion) {
						_manager.fusionMenuItems[seg.fusionParams.fullCode] = item.menuItem;
					} else {
						(_manager.syracuseMenuItems[item.menuItem.urlSegment.uri] = _manager.syracuseMenuItems[seg.uri] || []).push(item.menuItem);
					}

					syra_url.history.setHref({
						$url: item.menuItem.$url,
						domItem: btn.link
					});
					_manager.count++;

					_manager.buttons.push(btn);
				} else {
					items.splice(ii, 1); //remove old separator
					ii--;
					jj--;
				}
			}
		}
	}
	return true;
}

function _findMenuItem(urlSegment, items, deleteIfFound) {
	var menuItem;
	if (_manager.count) {
		if (urlSegment.fusionParams) {
			menuItem = _manager.fusionMenuItems[urlSegment.fusionParams.fullCode];
		} else {
			var menuItems = _manager.syracuseMenuItems[urlSegment.uri];
			if (menuItems) {
				for (var ii = menuItems.length - 1; !menuItem && ii >= 0; ii--) {
					var seg2 = menuItems[ii].urlSegment;
					if (!urlSegment.params && !seg2.params) {
						menuItem = menuItems[ii];
					} else {
						if (urlSegment.params && seg2.params) {
							var keys1 = Object.keys(urlSegment.params);
							var keys2 = Object.keys(seg2.params);
							if (keys1.length == keys2.length) {
								for (var mm = keys1.length - 1; mm >= 0; mm--) {
									if (urlSegment.params[keys1[mm]] != seg2.params[keys1[mm]]) {
										break;
									}
								}
								if (mm < 0) {
									menuItem = menuItems[ii];
								}
							}
						}
					}
				}
			}
		}
	}
	return menuItem;
}

function _resetLinks() {
	_manager.lastCheckedPage = null;
	_manager.count = 0;
	_manager.fusionMenuItems = {};
	_manager.syracuseMenuItems = {};
	for (var ii = 0, jj = _manager.buttons.length; ii < jj; ii++) {
		syra_menus.button.dispose(_manager.buttons[ii]);
	}
	_manager.buttons = [];
}

function _toggleButton(btn, isOn) {
	syra_menus.button.setText(btn, isOn ? syra_local.bookmarksRemove : syra_local.bookmarksAdd, isOn ? "bookmark_on" : "bookmark_off");
}

function _deleteMenuItem(deletedItem, items) {
	var count = 0;
	items = items || _manager.dataset.items;
	for (var ii = 0, jj = items.length; ii < jj; ii++) {
		var item = items[ii];
		if (item.menuItem == deletedItem) {
			items.splice(ii, 1);
			return true;
		} else {
			if (item.menuBlock && item.menuBlock.items && _deleteMenuItem(deletedItem, item.menuBlock.items)) {
				return true;
			}
		}
	}
}