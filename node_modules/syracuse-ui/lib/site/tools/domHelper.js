"use strict";
var escaper = require('html-escape').escaper({
	warn: (console.warn || console.log).bind(console)
});

var _zIndex = 110;

exports.toggleClass = function(item, css, show) {
	if (item) {
		var className = item.className;
		if (show) {
			if (className.indexOf(css) < 0) {
				item.className = className + (" " + css);
			}
		} else {
			item.className = className.replace(css, "");
		}
	}
};

exports.disableItem = function(item, isDisabled) {
	if (isDisabled) {
		item.setAttribute("disabled", item.syraIsDisabled = isDisabled);
	} else {
		delete item.syraIsDisabled;
		item.removeAttribute("disabled");
	}
	exports.toggleClass(item, "s-disabled", isDisabled);
};
exports.hideFlashContainer = function(parent, isHidden) {
	if (parent) {
		var style = parent.style;
		if (style.display === "none") {
			if (!isHidden) {
				style.display = "";
			}
		} else {
			style.visibility = isHidden ? "hidden" : "";
			style.height = isHidden ? "0" : "";
			style.width = isHidden ? "0" : "";
			style.borderWidth = isHidden ? "0" : "";
			style.padding = isHidden ? "0" : "";
			style.overflow = isHidden ? "hidden" : "";
		}
	}
};

exports.toggle = function(dom) {
	dom.style.display = exports.isDisplay(dom) ? "none" : "";
};
exports.display = function(dom, show) {
	if (dom) {
		dom.style.display = show ? "" : "none";
	}
};

exports.isDisplay = function(dom) {
	return dom.style.display != "none";
};
exports.empty = function(domNode) {
	if (domNode) {
		while (domNode.firstChild) {
			domNode.removeChild(domNode.firstChild);
		}
	}
};
exports.isParentNode = function(parent, child) {
	while (child && child != document) {
		if (child == parent) {
			return true;
		}
		child = child.parentNode;
	}
	return false;
};
exports.removeChild = function(child) {
	if (child && child.parentNode) {
		child.parentNode.removeChild(child);
	}
};
exports.moveChildNodes = function(source, target) {
	while (source.childNodes.length) {
		target.appendChild(source.childNodes[0]);
	}
};

exports.getIndex = function(node) {
	var parentNode = node && node.parentNode;
	if (parentNode) {
		var nodes = parentNode.childNodes;
		for (var ii = 0, jj = nodes.length; ii < jj; ii++) {
			if (nodes[ii] == node) {
				return ii;
			}
		}
	}
	return -1;
};
exports.getInnerSize = function(domItem) {
	var rect = domItem.getBoundingClientRect();
	var size = {
		height: rect.height, // domItem.clientHeight,
		width: rect.width //  domItem.clientWidth
	};
	var style = window.getComputedStyle(domItem, null);
	size.height -= parseFloat(style.getPropertyValue("padding-top"));
	size.height -= parseFloat(style.getPropertyValue("padding-bottom"));
	size.width -= parseFloat(style.getPropertyValue("padding-left"));
	size.width -= parseFloat(style.getPropertyValue("padding-right"));
	return size;
};
exports.isVisible = function(node) {
	var top = syra_site && syra_site.layoutSlot;
	if (top) {
		while (node && node != top) {
			if (node.syraIsHidden || (node.style && node.style.display == "none")) {
				return false;
			}
			node = node.parentNode;
		}
		return node == top;
	}
	return false;
};
exports.getBoundingClientRect = function(dom, area) {
	var rect = dom.getBoundingClientRect();
	area = area || {};
	area.top = Math.round(rect.top);
	area.bottom = Math.round(rect.bottom);
	area.left = Math.round(rect.left);
	area.right = Math.round(rect.right);
	area.width = Math.round(rect.width);
	area.height = Math.round(rect.height);
	return area;
};


exports.setZIndex = function(item, check, zIndex) {
	if (zIndex) {
		if (item) {
			item.style.zIndex = zIndex;
		}
		return zIndex;
	}
	if (check && item && item.style.zIndex == _zIndex) {
		return _zIndex;
	}
	_zIndex++;
	if (item) {
		item.style.zIndex = _zIndex;
	}
	return _zIndex;
};
exports.getTopZIndex = function() {
	return _zIndex;
};

exports.getChildIndex = function(child) {
	var ii = 0;
	while (child = child.previousElementSibling) {
		ii++;
	}
	return ii;
};


exports.formatHTMLText = function(message, br) {
	return escaper(br ? message.replace(/\n/g, "<BR/>") : message);
};

exports.addInput = function(type) {
	var input = document.createElement("input");
	input.setAttribute("type", type || "text");
	input.setAttribute("spellcheck", false);
	input.setAttribute("autocorrect", "off");
	return input;
};

exports.addTextArea = function() {
	var input = document.createElement("textarea");
	input.setAttribute("spellcheck", false);
	input.setAttribute("autocorrect", "off");
	return input;
};

exports.addDiv = function(css, parent) {
	var div = document.createElement("div");
	div.className = css;
	parent && parent.appendChild(div);
	return div;
};


exports.addTextInfo = function(css, text, parent) {
	var div = document.createElement("div");
	div.className = css;
	div.textContent = text;
	parent && parent.appendChild(div);
	return div;
};