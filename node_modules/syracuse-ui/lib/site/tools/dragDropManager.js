"use strict";
var helpers = require('syracuse-core/lib/helpers');

function DragDropManager() {}

exports.DragDropManager = helpers.defineClass(DragDropManager, null, {
	load: function() {
		this._observers = [];
		this.bindEvents();
	},
	setDragSpot: function(dom, enable) {
		if (enable) {
			dom.syraDragSpot = true;
			dom.setAttribute("data-s-drag-spot", "1");
		} else {
			delete dom.syraDragSpot;
			dom.removeAttribute("data-s-drag-spot");
		}
	},
	addListener: function(observer) {
		this._observers.push(observer);
	},
	removeListener: function(observer) {
		var ii = this._observers.indexOf(observer);
		if (ii >= 0) {
			this._observers.splice(ii, 1);
		}
	},
	cancel: function() {
		delete this.dropableItem;
	},
	start: function(observer, DragDropClass, $$boundary) {
		if (this.dropableItem) {
			this.ddAgent = new DragDropClass();
			this.ddAgent.start(this.dropableItem, observer, $$boundary);
			delete this.dropableItem;
		}
	},
	stop: function() {
		this.cancel();
		if (this.ddAgent) {
			if (this.ddAgent.stop) {
				this.ddAgent.stop();
			}
			this.ddAgent.dispose();
			delete this.ddAgent;
		}
		document.site.body.style.cursor = "default";
	},
	setddAgent: function(instance, ident) {
		if (instance) {
			this.ddAgent = instance;
		} else {
			delete this.ddAgent;
		}
	},
	bindEvents: function() {
		var self = this;
		$(document).bind("mouseup.syradragdrop", function(event) {
			delete self.dropableItem;
			if (self.ddAgent) {
				self.ddAgent.onDragMouseUp(this, event);
				self.stop();
			}
		});
		document.site.$$layoutSlot.delegate("[data-s-drag-spot]", "mousedown", function(event) {
			if (self.ddAgent) {
				self.stop();
			} else {
				for (var ii = 0, jj = self._observers.length; ii < jj; ii++) {
					var item = self._observers[ii].isDraggable(this, event);
					if (item) {
						self.dropableItem = item;
						return false;
					}
				}

			}
			// return false;
		}).delegate("[data-s-drag-spot]", "mousemove", function(event) {
			for (var ii = 0, jj = self._observers.length; ii < jj; ii++) {
				var observer = self._observers[ii];
				if (observer.onDragMove) {
					var result = self._observers[ii].onDragMove(this, event);
					if (result !== true) {
						return result;
					}
				}
			}
		}).bind("mousemove.author", function(event) {
			if (self.ddAgent) {
				self.ddAgent.onDragMouseMove(event.target, event);
				event.preventDefault();
				return false;
			}
			return true;
		});
	},
	dispose: function() {
		if (document.site.$$layoutSlot) {
			document.site.$$layoutSlot.undelegate(".author");
		}
		delete this._observers;
	}
});