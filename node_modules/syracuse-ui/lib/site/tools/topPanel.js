"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

function TopPanel(){
}

exports.TopPanel = helpers.defineClass(TopPanel, Article, {
    loadBox: function(){
        this._localize = document.site.localize;
        this.page.initializeNewItem(this, {});
        this.domItem = this.layoutSlot;
        document.site.dom.setZIndex(this.layoutSlot);
        Article.prototype.loadBox.call(this);
        if (document.site.userProfile) {
            document.site.userProfile.ensureFormBlock();
            document.site.userProfile.ensurePageVisibility();
            if (document.site.userProfile.domItem) {
                document.site.dom.empty(this.userProfileSlot);
                this.userProfileSlot.appendChild(document.site.userProfile.domItem);
            }
        }
       
    },
    _buildItems: function($links, addColumns){
        var ids = Object.keys($links);
        var $items = [];
        if (addColumns) {
            var $row;
            var $items;
            for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                if (!$row) {
                    $row = {
                        $layoutType: "row",
                        $items: []
                    };
                    $items.push($row);
                }
                this.$prototype.$links[ids[ii]] = $links[ids[ii]];
                $row.$items.push({
                    $bind: ids[ii]
                });
                if ($row.$items.length == 3) {
                    $row = null;
                }
            }
            if ($row) {
                while ($row.$items.length < 3) {
                    $row.$items.push({
                        $category: "space"
                    });
                }
            }
            return {
                $layoutType: "stack",
                $items: $items
            };
        }
        for (var ii = 0, jj = ids.length; ii < jj; ii++) {
            this.$prototype.$links[ids[ii]] = $links[ids[ii]];
            $items.push({
                $bind: ids[ii]
            });
        }
        return {
            $layoutType: "row",
            $autoSize: true,
            $items: $items
        };
    },
    onMenuClick: function(menuItem){
        if (menuItem.$item.$bind == "$help") {
            document.site.gotoHelp();
            return false;
        }
        return true;
    },
    addNavigationBar: function(){
        var $dashboard = this.$prototype.$navigation && this.$prototype.$navigation.$dashboard;
        if ($dashboard) {
            var ids = Object.keys($dashboard);
            for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                var key = ids[ii];
                switch (key) {
                    case "quickAdmin":
                    case "mobileDesktopAuthoring":
                        if (!document.site.developpementMode) {
                            var level = document.site.userProfile.getAuthoringLevel();
                            if (!(level == "admin" || level == "sage")) {
                                delete $dashboard[key];
                                continue;
                            }
                        }
                        break;
                    //case "tablethome":
                    //case "mobileHome":
                    case "perfmon":
                    case "devsos":
                    case "devsosqueries":
                    case "arrayTest":
                    case "changeLog":
                    case "office":
                        if (!document.site.developpementMode) {
                            delete $dashboard[key];
                            continue;
                        }
                        break;
                }
                $dashboard[key].$title = this._localize["siteNavigation_" + key] || $dashboard[key].$title;
            }
            var $menu = {
                $category: "menus",
                $skin: "s-site-nav-bar",
                $layout: {
                    $layoutType: "stack",
                    $items: [{
                        $category: "menus",
                        $title: this._localize.siteTopPanel_dashboards,
                        $slotStyle: "s-site-top-pn-dashboards",
                        $skin: "s-site-nav",
                        $layout: this._buildItems(this.$prototype.$navigation.$dashboard, true)
                    }]
                }
            };
            this.navigationBar = this.page.loadNewItem(this.body, $menu, this);
            document.site.layoutValidator.validate(this.navigationBar.layoutContent, true);
        }
    },
    drawBox: function(){
        this.body = document.createElement("div");
        this.body.className = "s-site-top-pn-body";
        this.domItem.appendChild(this.body);
        var bar = document.createElement("div");
        bar.className = "s-site-top-pn-top-bar";
        this.body.appendChild(bar);
        this.userProfileSlot = document.createElement("div");
        bar.appendChild(this.userProfileSlot).id = "s-site-top-pn-user-profile";
        
        if (!(this.page.fusionGateway && this.page.fusionGateway.activatedBook)) {
            this.addNavigationBar();
        }
    },
    closePanel: function(){
        var domItem = document.site.userProfile ? document.site.userProfile.domItem : null;
        if (domItem && domItem.parentNode) {
            domItem.parentNode.removeChild(domItem);
        }
        this.layoutSlot.style.display = "none";
        document.site.dom.empty(this.layoutSlot);
        this.dispose();
    },
    dispose: function(){
        this._localize = this.userProfileSlot = this.$urlParams = this.navigationBar = null;
        Article.prototype.dispose.call(this);
    }
});

