"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ReferenceField = require('syracuse-ui/lib/field/referenceField').ReferenceField;

function BookmarkMenuItem() {}

exports.BookmarkMenuItem = helpers.defineClass(BookmarkMenuItem, ReferenceField, {
	dispose: function() {
		this.bookmarkPicker = null;
		ReferenceField.prototype.dispose.call(this);
	},
	loadBox: function() {
		this.$item.$isMenusHidden = true;
		this.$item.$skin = "s-nav-admin-menu";
		ReferenceField.prototype.loadBox.call(this);
		this.onReorderItem(this.articleParent);
		this.articleParent.domItem.className += " " + this.$item.$skin + "-item";
	},
	onReorderItem: function(record) {

	},
	onItemInOut: function(onEnter, record) {
		if (record) {
			this.page.toggleCssOnEnter(record.menusSlot, onEnter);
			this.page.toggleCssOnEnter(record.reorderPicker, onEnter);
			if (this.bookmarkPicker && !this.isBookmark) {
				this.bookmarkPicker.style.visibility = onEnter ? "visible" : "";
			}
		}
		ReferenceField.prototype.onItemInOut.call(this, onEnter);
	},
	_createValueContainer: function() {
		this.fieldValue = this._core = this._dataValue = this.domValueSlot = this.domItem;
	},
	render: function() {
		this.codeMenu = this.page.loadNewItem(this.fieldValue, {
			$subRecordKey: this.$item.$bind,
			$css: this.$item.$css,
			$category: "link",
			$skin: this.$skin + "-link"
		}, this.boxParent);

		this.setDescription(this.$item.$description || this.$field.$item.$description);
		if (this.currentValue) {
			this._renderCurrentValue();
		}
	},
	_renderCurrentValue: function() {
		if (this.codeMenu) {
			if (this.$menus && this.$menus.$details) {
				syra_menus.setMenus(this, {
					$links: {
						$details: {
							$title: this.currentValue.$value || "",
							$description: this.currentValue.$title || ""
						}
					}
				});
			}
			var value = this.getDatasetValue();
			if (value) {
				if (value.$isSeparator) {
					this.codeMenu.isBookmarkMenuItem = true;
					value.$title = "-";
					syra_site.dom.toggleClass(this.articleParent.domItem, this.$item.$skin + "-item", false);
					this.articleParent.$isSeparator = true;
					this.articleParent.domItem.className += this.$item.$skin + "-item-separator";
					this.codeMenu.setMenu(value, this.currentValue, this.currentValue);
					if (this.articleParent.reorderPicker) {
						this.fieldValue.parentNode.insertBefore(this.articleParent.reorderPicker, this.fieldValue);
					}
					if (this.articleParent.menusSlot) {
						this.fieldValue.parentNode.appendChild(this.articleParent.menusSlot);
					}
				}
				if (value.$url) {
					value.$title = value.$title || this.currentValue.$value || "";
					if (value.convergenceFunction) {
						value.$description = syra_local.nvpFunction + ": " + value.convergenceFunction;
					} else {
						if (value.entity) {
							value.$description = syra_local.nvpEntity + ": " + value.entity;
							if (value.entity != helpers.string.pluralize(value.representation || "")) {
								value.$description += " (" + syra_local.nvpRepresentation + ": " + value.representation + ")";
							}
						}
					}
					if (!value.$description) {
						value.$description = value.$description;
					}
					this.codeMenu.isBookmarkMenuItem = true;
					this.codeMenu.setMenu(value, this.currentValue, this.currentValue);
					if (this.articleParent.reorderPicker) {
						this.fieldValue.parentNode.insertBefore(this.articleParent.reorderPicker, this.fieldValue);
					}
					if (this.articleParent.menusSlot) {
						this.fieldValue.parentNode.appendChild(this.articleParent.menusSlot);
					}

				}
			}
		}
	}
});