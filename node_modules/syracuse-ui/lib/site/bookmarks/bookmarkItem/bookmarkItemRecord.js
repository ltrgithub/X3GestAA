"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SingleRecord = require('syracuse-ui/lib/field/array/singleBuilder/singleRecord').SingleRecord;

function BookmarkItemRecord() {}

exports.BookmarkItemRecord = helpers.defineClass(BookmarkItemRecord, SingleRecord, {
	reorderItem: function(targetRecord, isAfter) {
		targetRecord.domItem.parentNode.insertBefore(this.domItem, isAfter ? targetRecord.domItem.nextSibling : targetRecord.domItem);
		this.singleField.variantItem.onReorderItem(this);
	},
	_createMenusBox: function() {
		if (!this.menusSlot) {
			this.menusSlot = document.createElement("div");
			this.page.loadNewItem(this.menusSlot, this.list.defineNewIconMenu("$edit", "s-nav-item-link", true), this);
			this.page.loadNewItem(this.menusSlot, this.list.defineNewIconMenu("$cancel-edit", "s-nav-item-link", true), this);
			this.page.loadNewItem(this.menusSlot, this.list.defineNewIconMenu("$delete", "s-nav-item-link", true), this);
		}
	},
	onMenuClick: function(menuItem) {
		switch (menuItem.$bind) {
			case "$delete":
				if (!this.$isSeparator) {
					var localizeKey = "nvpConfirmDelete" + (this.singleField.$variantItemKey == "menuItem" ? "Menu" : "Block");
					localizeKey = localizeKey != "nvpConfirmDeleteMenu" ? localizeKey : "nvpConfirmDeleteBookmark";

					if (localizeKey === "nvpConfirmDeleteBookmark") {
						this.localize[localizeKey] = document.site.expressionMaker.parse(menuItem.articleParent.dataset.$singleField.menuItem, this.localize[localizeKey], menuItem.articleParent.dataset.$singleField.menuItem);
					}

					menuItem.$confirm = this.localize[localizeKey];
				}
				break;
			case "$cancel-edit":
				this.switchEditTitle(false);
				return false;
			case "$edit":
				this.switchEditTitle(true);
				return false;
		}
		return true;
	},
	switchEditTitle: function(isEdit) {
		var cell = this.singleField.variantItem.domItem;
		if (isEdit) {
			cell.style.display = "none";
			this.editTitleSlot = document.createElement("div");
			this.editTitleSlot.className = cell.className;
			cell.parentNode.insertBefore(this.editTitleSlot, cell);
			this.editTitleField = this.page.loadNewItem(this.editTitleSlot, {
				$category: "field",
				$isTitleHidden: true,
				$isTopLabelAlignment: false,
				//$contentEditable: true,
				$isEditMode: true,
				$inplace: true,
				$css: "s-nav-admin-menu-edit",
				$field: {
					$isMandatory: true,
					$type: "application/x-string",
					$displayLength: 25
				}
			}, this);
			this.editTitleField.focus();
			this.editTitleField.setDataValue(this.singleField.variantItem.getDatasetValue().title);
		} else {
			cell.style.display = "";
			if (this.editTitleField) {
				this.removeItem(this.editTitleField, true, true);
				this.editTitleField = this.editTitleSlot = null;
			}
		}
		this.applyChange({
			$actions: {
				$edit: {
					$isHidden: isEdit
				},
				"$cancel-edit": {
					$title: this.localize.bookmarksCloseEdit,
					$isHidden: !isEdit
				}
			}
		});
	},
	onNotifyDataChange: function(field, value) {
		if (field == this.editTitleField) {
			var menuItem = this.dataset.$singleField.menuItem;
			menuItem.title = menuItem.$title = value;
			this.applyChange(this.dataset);
			return true;
		}
		return false;
	},
	drawBox: function() {
		this.$isVerticalDirection = true;
		this.reorderPickerParent = null; //!!important picker is inserted bu codemenu
		this.domItem = document.createElement("div");
		this.domItem.className = this.$skin = this.list.$skin + "-item";
		this.domItem.syrainout = this.id;
		this.domItem.setAttribute("data-s-record", this.$uuid);

		this.recordValue = document.createElement("div");
		this.recordValue.className = this.list.$skin + "-item-value";
		this.domItem.appendChild(this.recordValue);

		if (this.list.$capability && this.list.$capability.reorder) {
			this.applyReorderCapability(true);
		}
		this.singleField = this.page.loadNewItem(this.recordValue, {
			$isTitleRowHidden: true,
			//$isMenusHidden: true,
			$isDetailLinkDisabled: true,
			$bind: "$singleField",
			$isEditMode: this.$isEditMode,
			$inplace: true,
			$isDiagnoseInline: true
		}, this);
		this.list.onAppendRecord(this);
		this.applyRecordCapabilities();
		var menuItem = this.dataset.$singleField.menuItem;
		if (menuItem && !menuItem.$isSeparator) {
			this.applyChange({
				$actions: {
					$edit: {
						$title: this.localize.bookmarksEdit
					}
				}
			});
		}
	},
	dispose: function() {
		this.editTitleSlot = this.editTitleField = this.singleField = null;
		SingleRecord.prototype.dispose.call(this);
	}
});