"use strict";
var helpers = require('syracuse-core/lib/helpers');
var NavigationItemRecord = require('syracuse-ui/lib/page/navigation/navigationItem/navigationItemRecord').NavigationItemRecord;

function BookmarkItemRecord() {}

exports.BookmarkItemRecord = helpers.defineClass(BookmarkItemRecord, NavigationItemRecord, {
	onMenuClick: function(menuItem) {
		switch (menuItem.$bind) {
			case "$delete":
				if (!this.$isSeparator) {
					var localizeKey = "nvpConfirmDelete" + (this.singleField.$variantItemKey == "menuItem" ? "Menu" : "Block");
					localizeKey = localizeKey != "nvpConfirmDeleteMenu" ? localizeKey : "nvpConfirmDeleteBookmark";

					if (localizeKey === "nvpConfirmDeleteBookmark") {
						syra_local[localizeKey] = syra_site.expressionMaker.parse(menuItem.articleParent.dataset.$singleField.menuItem, syra_local[localizeKey], menuItem.articleParent.dataset.$singleField.menuItem);
					}

					menuItem.$confirm = syra_local[localizeKey];
				}
				break;
			case "$cancel-edit":
				this.switchEditTitle(false);
				return false;
			case "$edit":
				this.switchEditTitle(true);
				return false;
		}
		return true;
	},
	switchEditTitle: function(isEdit) {
		var cell = this.singleField.variantItem.domItem;
		if (isEdit) {
			cell.style.display = "none";
			var slot = document.createElement("div");
			slot.className = cell.className;
			cell.parentNode.insertBefore(slot, cell);
			this.editTitleField = this.page.loadNewItem(slot, {
				$category: "field",
				$isTitleHidden: true,
				$isTopLabelAlignment: false,
				//$contentEditable: true,
				$isEditMode: true,
				$inplace: true,
				$css: "s-nav-admin-menu-edit",
				$field: {
					$isMandatory: true,
					$type: "application/x-string",
					$displayLength: 25
				}
			}, this);
			this.editTitleField.focus();
			this.editTitleField.setDataValue(this.singleField.variantItem.getDatasetValue().title);
		} else {
			cell.style.display = "";
			if (this.editTitleField) {
				this.removeItem(this.editTitleField, true, true);
				this.editTitleField = null;
			}
		}
		this.applyChange({
			$actions: {
				$edit: {
					$isHidden: isEdit
				},
				"$cancel-edit": {
					$title: syra_local.bookmarksCloseEdit,
					$isHidden: !isEdit
				}
			}
		});
	},
	onNotifyDataChange: function(field, value) {
		if (field == this.editTitleField) {
			var menuItem = this.dataset.$singleField.menuItem;
			menuItem.title = menuItem.$title = value;
			this.applyChange(this.dataset);
			return true;
		}
		return false;
	},
	drawBox: function() {
		NavigationItemRecord.prototype.drawBox.call(this);
		var menuItem = this.dataset.$singleField.menuItem;
		if (menuItem && !menuItem.$isSeparator) {
			this.applyChange({
				$actions: {
					$edit: {
						$title: syra_local.bookmarksEdit
					}
				}
			});
		}
	},
	dispose: function() {
		this.editTitleField = null;
		NavigationItemRecord.prototype.dispose.call(this);
	}
});