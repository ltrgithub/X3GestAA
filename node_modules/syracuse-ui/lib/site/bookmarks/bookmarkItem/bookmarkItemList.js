"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SingleList = require("syracuse-ui/lib/field/array/singleBuilder/singleList").SingleList;
var BookmarkItemRecord = require('./bookmarkItemRecord').BookmarkItemRecord;

function BookmarkItemList() {}

exports.BookmarkItemList = helpers.defineClass(BookmarkItemList, SingleList, {
	loadBox: function(initData) {
		this.RecordClass = BookmarkItemRecord;
		this.columnsCount = 1;
		this.emptyMessage = syra_local.bookmarksNoMenuItem;
		this.$item.$isTopLabelAlignment = true;
		this.$item.$iconPath = "page/s-nav-";
		this.$item.$skin = "s-nav-admin-items";
		this.$item.$skinMenus = "s-nav-list-menus";
		SingleList.prototype.loadBox.call(this, initData);
	},
	dispose: function() {
		SingleList.prototype.dispose.call(this);
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$bind == "addSeparator") {
			this.ensureDataSet().push({
				menuItem: {
					$isSeparator: true
				}
			});
			this.setDataBind(this.dataset, this.articleParent.ensureDataSet());
			this.page.notifyDataChange();
			return false;
		}
		return SingleList.prototype.onMenuClick.call(this, menuItem);
	},
	_createMenusBox: function() {
		if (!this.isMenuLoaded) {
			this.isMenuLoaded = true;
			var iconOnly = this.articleParent.page != this.articleParent;
			var $itemSeparator = this.defineNewIconMenu("addSeparator", this.$skinMenus + "-link", iconOnly);
			$itemSeparator.$icon.$value = "add-separator" + (iconOnly ? "-icon" : "");
			this.page.loadNewItem(this.menusSlot, {
				$layoutType: "row",
				$autoSize: true,
				$items: [$itemSeparator]
			}, this);
		}
		this.menusbar.style.display = this.topbar.style.display = "";
	},
	_initRows: function() {
		this.rows = [];
		this.currentCol = 0;
	},
	appendRow: function() {
		var row = {
			slot: document.createElement("div"),
			cols: [],
		};
		row.slot.className = this.$skin + "-row";
		this.body.appendChild(row.slot);
		for (var ii = 0; ii < this.columnsCount; ii++) {
			var slot = document.createElement("div");
			slot.className = this.$skin + "-col";
			row.slot.appendChild(slot);
			row.cols.push({
				slot: slot,
				items: []
			});
		}
		return row;
	},
	_appendMenusBar: function() {
		if (this.articleParent.page == this.articleParent) {
			this.body.insertBefore(this.menusbar, this.body.firstChild);
		}

	},
	emptyBody: function(addEmptySlot, onFetch) {
		this._initRows();
		SingleList.prototype.emptyBody.call(this, addEmptySlot, onFetch);
	},
	onAppendRecord: function(newRecord) {
		if (this.rows.length == 0) {
			this.rows = [this.appendRow()];
		}
		this.rows[0].cols[this.currentCol++].slot.appendChild(newRecord.domItem);
		newRecord.rowIndex = 0;
		newRecord.colIndex = this.currentCol;
		if (this.currentCol == this.columnsCount) {
			this.currentCol = 0;
		}
	}
});