"use strict";
var helpers = require('syracuse-core/lib/helpers');
var ChildFieldRecord = require('syracuse-ui/lib/field/child/childFieldRecord').ChildFieldRecord;

function BookmarkMenuBlockRecord() {}

exports.BookmarkMenuBlockRecord = helpers.defineClass(BookmarkMenuBlockRecord, ChildFieldRecord, {
	drawBox: function() {
		var $skin = "s-nav-admin-block";
		this.$expanded = true;
		this.domItem = this.list._core;
		this.blockCard = this.domItem.appendChild(document.createElement("div"));
		this.blockCard.className = this.list.$skin + "-record";
		this.blockCardHeader = this.blockCard.appendChild(document.createElement("div"));
		this.blockCardHeader.className = this.list.$skin + "-record-head";
		this.$prototype.$properties.title.$isMandatory = true;
		if (this.articleParent.articleParent.menusSlot) {
			this.articleParent.articleParent.menusSlot.className = $skin + "-menus";
		}

		var prevTitleField = this.titleField;
		this.titleField = this.page.loadNewItem(this.blockCardHeader, {
			$bind: "title",
			$isEditMode: true,
			$isAutoSizeDisabled: true,
			$isTitlePlaceHolder: true,
			$title: syra_local.nvpEnterMenuBlock,
			$contentEditable: true,
			$skin: $skin + "-title-field",
			$isMenusHidden: false,
			$isDetailLinkDisabled: true,
			$useLocalizePicker: true,
			$isTitleHidden: true
		}, this);
		if (!this.itemsField) {
			this.itemsField = this.page.loadNewItem(this.blockCard, {
				$bind: "items",
				$isTitleHidden: true
			}, this);
			this.itemsField.body.className += " " + $skin + "-items-field";
			this.itemsField.menusSlot.className = "s-nav-admin-items-menus-slot";
		} else {
			this.blockCard.insertBefore(this.titleField.domItem, this.itemsField.domItem);
		}
		var itemRecord = this.articleParent.articleParent;
		this.titleField._dataValue.appendChild(this.itemsField.menusSlot);
		this.addExpandButton();
		if (itemRecord.reorderBtn) {
			this.expandBtn.parentNode.insertBefore(itemRecord.reorderBtn, this.expandBtn);
		}
		this.titleField._dataValue.appendChild(itemRecord.menusSlot);
		this.blockCardHeader.syrainout = this.id;
		if (prevTitleField) {
			this.removeItem(prevTitleField, true, true);
		}
	},
	onLocalizeField: function(field, data, response, $url) {
		this.articleParent.subModuleRecord.applyChange(data, response, $url);
		return false;
	},
	addExpandButton: function() {
		if (!this.expandBtn) {
			var css = "s-nav-admin-block-expand";
			if (this.$item.$css) {
				css += " " + this.$item.$css;
			}
			this.expandBtn = syra_menus.addIconButton(syra_local.box_collapse, css, "onExpandBlockClick");
			this.expandBtn.syraItem = this;
			this.titleField.domItem.insertBefore(this.expandBtn, this.titleField.domItem.firstChild);
		}
		this.ensureExpandedState();
	},
	onExpandBlockClick: function(event, btn) {
		this.expandMenuBlock(!this.$expanded);
	},
	expandMenuBlock: function(expanded) {
		this.$expanded = expanded;
		this.ensureExpandedState();
	},
	ensureExpandedState: function() {
		syra_menus.setButtonTitle(this.expandBtn, this.$expanded ? syra_local.box_collapse : syra_local.box_expand);
		syra_site.dom.toggleClass(this.expandBtn, "s-close", !this.$expanded);
		this.itemsField.domItem.style.display = this.$expanded ? "" : "none";
	},
	onItemInOut: function(on) {
		if (this.itemsField && this.itemsField.menusSlot) {
			syra_site.dom.toggleClass(this.itemsField.menusSlot, "s-enter", on);
		}
		syra_menus.highlight(this.titleField, on);
		syra_site.dom.toggleClass(this.articleParent.articleParent.menusSlot, "s-enter", on);
		syra_site.dom.toggleClass(this.articleParent.articleParent.reorderBtn, "s-enter", on);
	},
	dispose: function() {
		this.blockCard = this.titleField = this.itemsField = this.blockCardHeader = null;
		ChildFieldRecord.prototype.dispose.call(this);
	}
});