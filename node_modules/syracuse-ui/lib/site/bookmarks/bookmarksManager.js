"use strict";
var helpers = require('syracuse-core/lib/helpers');
var BookmarksPage = require("./bookmarksPage").BookmarksPage;
var _dialog;

var _barArea;
var _lastCheckedPage;

function _refreshManager() {
	if (_dialog) {
		_dialog._content.applyChange({
			items: helpers.object.clone(_barArea.dataset.items, true)
		});
	}
}

function _defineMenuItemLinks() {
	return {
		$select: {
			$title: "Add",
			$variants: {
				menuItem: {
					$title: document.site.localize.bookmarksSelectMenu,
					$url: "/sdata/syracuse/collaboration/syracuse/menuItems?representation=menuItem.$select"
				}
			}
		},
		addSeparator: {
			$title: "Add",
			$variants: {
				menuItem: {
					$title: document.site.localize.bookmarksAddSeparator
				}
			}
		}

	};
}

function _defineMenuItem() {
	return {
		$type: "application/x-reference",
		$capabilities: "reorder,delete",
		$item: {
			$value: "{title}",
			$key: "{$uuid}",
			$properties: {
				title: {
					$type: "application/x-string"
				}
			}
		}
	};
}

function _openManager() {
	var pageSlot = document.createElement("div");
	pageSlot.className = "s-bookmarks-viewer";
	document.site.layoutSlot.appendChild(pageSlot);
	_dialog = document.site.dialogManager.openModal(document.site, {
		onClose: function(isCanceled, dispose) {
			_dialog = null;
			return true;
		},
		$itemPage: {
			$pageCategoryClass: BookmarksPage,
			layoutSlot: pageSlot,
			$category: "page",
			$facet: "$bookmarks",
			$representation: {
				$prototype: {
					$type: "application/json",
					$title: document.site.localize.bookmarksTitle,
					$properties: {
						items: {
							$type: "application/x-array",
							$capabilities: "reorder",
							$links: _defineMenuItemLinks(),
							$item: {
								$type: "application/x-variant",
								$variants: {
									menuItem: _defineMenuItem(),
									menuBlock: {
										$type: "application/x-object",
										$capabilities: "append,reorder,delete",
										$item: {
											$value: "{title}",
											$key: "{$uuid}",
											$id: "menuSubblock",
											$properties: {
												title: {
													$type: "application/x-string"
												},
												items: {
													$type: "application/x-array",
													$capabilities: "reorder",
													$links: _defineMenuItemLinks(),
													$item: {
														$type: "application/x-variant",
														$variants: {
															menuItem: _defineMenuItem(),
															menuBlock: {
																$type: "application/x-object",
																$capabilities: "append,reorder,delete",
																$item: {
																	$prototype: "#menuSubblock",
																	$type: "application/x-pointer"
																}
															}
														}

													}

												}
											}
										}
									}
								}
							}
						}
					}
				},
				$article: {
					$layout: {
						$items: [{
							$category: "section",
							$layout: {
								$items: [{
									$category: "block",
									$layout: {
										$items: [{
											$isEditMode: true,
											$bind: "items",
											$skin: "s-bookmarks",
											$layout: {
												$items: [{
													$bind: "menuItem"
												}]
											}
										}]
									}
								}]
							}
						}]
					}
				}
			}
		}
	});
	_refreshManager();
}

exports.dispose = function() {
	_lastCheckedPage = null;
	_resetLinks();
	_barArea = null;
	if (_dialog) {
		_dialog.dispose();
	}
	_dialog = null;
};

function _appendPicker(css, text, title) {
	var link = document.createElement("a");
	link.className = css;
	link.setAttribute("data-s-picker", css);
	link.syraSiteObserver = "bookmarksManager";
	link.setAttribute("href", "#");
	if (text) {
		link.textContent = text;
	}
	if (title) {
		link.title = title;
	}
	return link;
}

function _getMenuItemCount(items) {
	var count = 0;
	items = items || _barArea.dataset.items;
	for (var ii = 0, jj = items.length; ii < jj; ii++) {
		var item = items[ii];
		if (item.menuItem && !item.menuItem.$isSeparator) {
			count++;
		} else {
			if (item.menuBlock && item.menuBlock.items) {
				count += _getMenuItemCount(item.menuBlock.items);
			}
		}
	}
	return count;
}

function _resetLinks() {
	for (var ii = 0, jj = _barArea.links.length; ii < jj; ii++) {
		delete _barArea.links[ii].menuItem;
	}
	_barArea.links = [];
}

function _addLineLinks(items) {
	if (items) {
		var urlMaker = document.site.urlMaker;
		var selectedEndpoint = document.site.userProfile.dataset.selectedEndpoint;
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			var item = items[ii];
			var link;
			if (item.menuItem) {
				if (item.menuItem.$isSeparator) {
					link = document.createElement("div");
					link.syraIsSpearator = true;
					link.className = "s-bookmarks-bar-separator";
				} else {
					link = _appendPicker("s-bookmarks-bar-link", item.menuItem.title || item.menuItem.description || "???", item.menuItem.description);
					item.menuItem.urlSegment = urlMaker.parse(item.menuItem.$url);
					if (urlMaker.replaceSegmentEndpoint(item.menuItem.urlSegment, selectedEndpoint, true)) {
						item.menuItem.$url = urlMaker.build(item.menuItem.urlSegment);
					}
					link.menuItem = item.menuItem;
					document.site.history.setHref({
						$url: item.menuItem.$url,
						mn: link
					});
				}
				_barArea.links.push(_barArea.linksSlot.appendChild(link));
			} else {
				if (item.menuBlock && !_addLineLinks(item.menuBlock.items)) {
					return false;
				}
			}
		}
	}
	return true;
}

exports.onMenuClick = function(menuItem) {
	if (menuItem.$bind && menuItem.$bind.split("-")[0] === "bookmark") {
		exports.onLinkLinkClick(menuItem);
		return false;
	}
	return true;
};

exports.onLinkLinkClick = function(menuItem) {
	var workBook = document.site.fusionGateway && document.site.fusionGateway.activatedBook;
	var target;
	if (workBook) {
		if (menuItem.urlSegment.fusionParams) {
			//x3 fct : open via ackcall
			//how to get current field with best way ?
			var sapController = workBook.fusionSite.controller._sapController;
			document.site.mainPage.externalAdapter.onBlockExRpc({
				field: sapController.getBoundField(sapController._currCtx.ist),
				call: {
					proxy: "EXEFNC1",
					values: [menuItem.urlSegment.fusionParams.functionCode, menuItem.urlSegment.fusionParams.transaction],
					callback: function() {

					}
				}
			});
		}
		return;
		//target = "blank";
	}
	document.site.history.load(menuItem.urlSegment.$url, target);
};


function _toggleNavigationMenuItemBookMark(navigationMenuItem) {
	document.site.toggleClass(navigationMenuItem.bookmarkPicker, "s-bookmark-on", navigationMenuItem.isBookmark);
}

function _onNavigationMenuItemPickerClick(navigationMenuItem) {
	if (!navigationMenuItem.isBookmark) {
		var menuItem = navigationMenuItem.codeMenu;
		var sdataUrl = document.site.history.getSdataUrl(menuItem.$url || menuItem.href);
		var urlSegment = document.site.urlMaker.parse(sdataUrl);
		document.site.urlMaker.replaceSegmentEndpoint(urlSegment, document.site.userProfile.dataset.selectedEndpoint, true);
		if (!_findMenuItem(urlSegment)) {
			navigationMenuItem.isBookmark = true;
			_barArea.dataset.items.push({
				menuItem: {
					$url: urlSegment.$url,
					description: menuItem.$description || "",
					title: menuItem.$title || ""
				}
			});
		}
	} else {
		navigationMenuItem.isBookmark = false;
		var urlSegment = document.site.urlMaker.parse(navigationMenuItem.codeMenu.$url);
		document.site.urlMaker.replaceSegmentEndpoint(urlSegment, document.site.userProfile.dataset.selectedEndpoint, true);
		_findMenuItem(urlSegment, null, true);
	}
	_toggleNavigationMenuItemBookMark(navigationMenuItem);
	exports.notifyChangeToServer();
};

function _findMenuItem(urlSegment, items, deleteIfFound) {
	var menuItem;
	var urlMaker = document.site.urlMaker;
	items = items || _barArea.dataset.items;
	for (var ii = 0, jj = items.length; !menuItem && ii < jj; ii++) {
		var item = items[ii];
		if (item.menuItem) {
			if (!item.menuItem.$isSeparator) {
				if (urlSegment.isFusion != item.menuItem.urlSegment.isFusion) {
					continue;
				}
				if (urlSegment.isFusion) {
					if ((urlSegment.fusionParams.functionCode == item.menuItem.urlSegment.fusionParams.functionCode) &&
						(urlSegment.fusionParams.transaction == item.menuItem.urlSegment.fusionParams.transaction)) {
						menuItem = item.menuItem;
					}
				} else {
					if (urlMaker.compareSegment(urlSegment, item.menuItem.urlSegment)) {
						menuItem = item.menuItem;
					}
				}
				if (menuItem && deleteIfFound) {
					items.splice(ii, 1);
					break;
				}
			}
		} else {
			if (item.menuBlock && item.menuBlock.items) {
				menuItem = _findMenuItem(urlSegment, item.menuBlock.items, deleteIfFound);
			}
		}
	}
	return menuItem;
}


exports.checkNavigationMenuItemBookMark = function(navigationMenuItem) {
	var urlSegment = document.site.urlMaker.parse(navigationMenuItem.codeMenu.$url);
	document.site.urlMaker.replaceSegmentEndpoint(urlSegment, document.site.userProfile.dataset.selectedEndpoint, true);
	if (_findMenuItem(urlSegment)) {
		navigationMenuItem.isBookmark = true;
		_toggleNavigationMenuItemBookMark(navigationMenuItem);
	}
};

exports.notifyChangeToServer = function(dataset) {
	var userProfile = document.site.userProfile;
	_barArea.dataset = dataset || _barArea.dataset;
	document.controller.sendRequest(userProfile, {
		$location: {
			$url: document.site.expressionMaker.parse(userProfile, userProfile.$menus.$bookmarks.$url)
		},
		data: {
			$etag: _barArea.dataset.$etag,
			content: _barArea.dataset
		},
		method: "PUT",
		$etag: _barArea.dataset.$etag
	}, function(data, response, requestUrl) {
		if (!userProfile.disposed) {
			exports.refresh();
			_refreshManager();
		}
	});
};

exports.loadBookmarks = function() {
	var userProfile = document.site.userProfile;
	document.controller.sendRequest(userProfile, {
		$location: {
			$url: document.site.expressionMaker.parse(userProfile, userProfile.$menus.$bookmarks.$url)
		},
	}, function(data, response, requestUrl) {
		if (!userProfile.disposed) {
			_barArea.dataset = data.content || {};
			_barArea.dataset.items = _barArea.dataset.items || [];
			exports.refresh();
		}
	});
};

exports.refresh = function() {
	document.site.emptyDom(_barArea.linksSlot);
	document.site.emptyDom(_barArea.moreItemsSlot);
	_barArea.morePickerSlot.style.visibility = "hidden";
	_resetLinks();
	_addLineLinks(_barArea.dataset.items);
	_lastCheckedPage = null;
	exports.checkMainPage();
};


function _onAddClick() {
	var $url, title;
	var page = document.site.fusionGateway.getActivatedSheet();
	if (page) {
		var fct = page.$fusionPageMeta.winModel.getFctName();
		if (fct.name && (page.$fusionPageMeta.winModel._mdata.type == 1 || page.$fusionPageMeta.winModel._mdata.type == 2)) {
			if (page.openerUrlSegments.fusionParams.functionCode != fct.name) {
				var newSeg = helpers.object.clone(page.openerUrlSegments, true);
				document.site.urlMaker.replaceFusionCode(newSeg, fct.name);
				$url = document.site.urlMaker.build(newSeg);
				title = page.getTitle();
			} else {
				$url = page.openerUrlSegments.$url;
				title = fct.title;
			}
		}
	} else {
		page = document.site.mainPage;
		if (page && page.openerUrlSegments) {
			$url = page.openerUrlSegments.$url;
			title = page.getTitle();
		}
	}
	if ($url) {
		var urlSegment = document.site.urlMaker.parse($url);
		document.site.urlMaker.replaceSegmentEndpoint(urlSegment, document.site.userProfile.dataset.selectedEndpoint, true);
		if (!_findMenuItem(urlSegment, null, true)) {
			_barArea.dataset.items.push({
				menuItem: {
					$url: $url,
					title: title
				}
			});
		}
		exports.notifyChangeToServer();
	}
}

exports.checkMainPage = function() {
	var activePage = document.site.fusionGateway.getActivatedSheet() || document.site.mainPage;
	if (activePage && !activePage.disposed && activePage != _lastCheckedPage) {
		_lastCheckedPage = activePage;
		var isBookmarkEnabled;
		if (activePage) {
			isBookmarkEnabled = activePage.isBookmarkEnabled;
			if (isBookmarkEnabled === undefined) {
				isBookmarkEnabled = activePage.$item.$isBookmarkEnabled;
			}
			if (isBookmarkEnabled === undefined) {
				isBookmarkEnabled = activePage.$facet != "$edit";
			}
		}
		var isOn = false;
		var functionfusion;
		var menuItem;
		if (activePage) {
			var urlSegment;
			if (activePage.isFusionPage) {
				functionfusion = activePage.$fusionPageMeta && activePage.$fusionPageMeta.winModel.getFctName();
				if (functionfusion) {
					urlSegment = {
						isFusion: true,
						fusionParams: {
							functionCode: functionfusion.name,
							transaction: functionfusion.transaction
						}
					};
					//(urlSegment.fusionParams.transaction == item.menuItem.urlSegment.transaction)) {
				}
			} else {
				urlSegment = document.site.urlMaker.parse(document.site.history.getSdataUrl(activePage.openerUrlSegments.$url));
			}
			menuItem = urlSegment && _findMenuItem(urlSegment);
		}
		isOn = !! menuItem;
		for (var ii = 0, jj = _barArea.links.length; ii < jj; ii++) {
			var link = _barArea.links[ii];
			if (link.menuItem) {
				document.site.toggleClass(link, "s-bookmark-on", link.syraBookMarkOn = menuItem && link.menuItem == menuItem);
				document.site.disableItem(link, (activePage && activePage.isFusionPage) && !link.menuItem.urlSegment.isFusion);
			}
		}
		var count = _getMenuItemCount();
		_barArea.managePicker.style.visibility = count ? "visible" : "hidden";
		var max = document.site.siteOptions.$item.$maxBookmarks || 25;
		if (count >= max) {
			isBookmarkEnabled = false;
		}
		document.site.disableItem(_barArea.addPicker, !isBookmarkEnabled);
		document.site.toggleClass(_barArea.addPicker, "s-bookmark-on", isOn);
		exports.onResize();
	}
};


exports.onResize = function() {
	if (_barArea.linksSlot.clientWidth <= (_barArea.linksSlot.scrollWidth - 2)) {
		for (var ii = _barArea.links.length - 1; ii >= 0; ii--) {
			var link = _barArea.links[ii];
			if (!link.syraIsInMore) {
				link.syraIsInMore = true;
				link.className = link.syraIsSpearator ? "s-bookmarks-bar-separator-in-more" : "s-bookmarks-bar-link-in-more";
				if (link.syraIsDisabled) {
					document.site.disableItem(link, true);
				}
				if (link.syraBookMarkOn) {
					link.className += " s-bookmark-on";
				}
				_barArea.moreItemsSlot.insertBefore(link, _barArea.moreItemsSlot.firstChild);
			}
			if (_barArea.linksSlot.clientWidth >= (_barArea.linksSlot.scrollWidth - 2)) {
				break;
			}
		}
	} else {
		if (_barArea.moreItemsSlot.children.length) {
			for (var ii = 0, jj = _barArea.links.length; ii < jj; ii++) {
				var link = _barArea.links[ii];
				if (link.syraIsInMore) {
					link.className = link.syraIsSpearator ? "s-bookmarks-bar-separator" : "s-bookmarks-bar-link";
					if (link.syraIsDisabled) {
						document.site.disableItem(link, true);
					}
					if (link.syraBookMarkOn) {
						link.className += " s-bookmark-on";
					}
					_barArea.linksSlot.appendChild(link);
					if (_barArea.linksSlot.clientWidth <= (_barArea.linksSlot.scrollWidth - 2)) {
						link.className = link.syraIsSpearator ? "s-bookmarks-bar-separator-in-more" : "s-bookmarks-bar-link-in-more";
						if (link.syraBookMarkOn) {
							link.className += " s-bookmark-on";
						}
						if (link.syraIsDisabled) {
							document.site.disableItem(link, true);
						}
						_barArea.moreItemsSlot.insertBefore(link, _barArea.moreItemsSlot.firstChild);
						break;
					} else {
						link.syraIsInMore = false;
					}
				}
			}
		}
	}
	_barArea.morePickerSlot.style.visibility = _barArea.moreItemsSlot.children.length > 0 ? "visible" : "hidden";
};



exports.onClickPicker = function(picker, event) {
	var $bind = picker.getAttribute("data-s-picker");
	switch ($bind) {
		case "s-bookmarks-bar-link":
			exports.onLinkLinkClick(picker.menuItem);
			return false;
		case "s-nav-menu-bookmark":
			_onNavigationMenuItemPickerClick(document.site.findField(picker));
			return false;
		case "s-bookmarks-bar-add":
			_onAddClick();
			return false;
		case "s-bookmarks-bar-manage":
			_openManager();
			return false;
		case "s-bookmarks-more-picker":
			if (!_barArea.popupPicker) {
				_barArea.popupPicker = document.site.dialogManager.openPopup(document.site, {
					content: _barArea,
					slot: _barArea.moreItemsSlot,
					position: {
						my: "left top",
						at: "left bottom",
						of: $(_barArea.morePickerSlot)
					},
					onClose: function() {
						setTimeout(function() {
							_barArea.popupPicker = null;
						}, 200);
					}
				});
			} else {
				_barArea.popupPicker.close();
			}
			return false;
	}
};



exports.load = function(slot) {
	_barArea = {
		dataset: {
			items: []
		},
		links: [],
		addPicker: _appendPicker("s-bookmarks-bar-add", null, document.site.localize.bookmarksAdd),
		managePicker: _appendPicker("s-bookmarks-bar-manage", null, document.site.localize.bookmarksManage)
	};
	var bar = document.createElement("div");
	bar.id = "s-bookmarks-bar";
	slot.appendChild(bar);

	bar.appendChild(_barArea.addPicker);
	bar.appendChild(_barArea.managePicker);
	_barArea.managePicker.style.visibility = "hidden";

	_barArea.linksSlot = document.createElement("div");
	_barArea.linksSlot.id = "s-bookmarks-bar-links";
	bar.appendChild(_barArea.linksSlot);

	_barArea.morePickerSlot = document.createElement("div");
	_barArea.morePickerSlot.id = _barArea.morePickerSlot.className = "s-bookmarks-more-picker-slot";
	_barArea.morePickerSlot.style.visibility = "hidden";
	bar.appendChild(_barArea.morePickerSlot);

	_barArea.morePickerSlot.appendChild(_appendPicker("s-bookmarks-more-picker", document.site.localize.bookmarksMore, document.site.localize.bookmarksMoreTooltip));

	_barArea.moreItemsSlot = document.createElement("div");
	_barArea.moreItemsSlot.className = "s-bookmarks-more-items-slot";
};