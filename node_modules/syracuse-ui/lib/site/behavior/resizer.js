"use strict";
var helpers = require('syracuse-core/lib/helpers');

function Resizer(){
}

exports.Resizer = helpers.defineClass(Resizer, null, {
    setResizable: function(source, $$hotspot){
        var self = this;
        self.id = source.id + "syraresizer";
        self.source = source;
        (self.$$hotSpot = $$hotspot).bind("mousedown." + self.id, function(event){
            self.start(this, event);
            return false;
        }).bind("mousemove." + self.id, function(event){
            var offset = self.$$hotSpot.offset();
            self.$drag = {
                left: offset.left,
                top: offset.top,
                width: self.$$hotSpot.outerWidth(),
                height: self.$$hotSpot.outerHeight()
            };
            self.$drag.right = self.$drag.left + self.$drag.width;
            var isLeft = ((event.pageX >= self.$drag.left) && (event.pageX <= (self.$drag.left + 5)));
            var isRight = ((event.pageX <= self.$drag.right) && (event.pageX >= (self.$drag.right - 5)));
            if (isLeft) {
                self.$$hotSpot[0].style.cursor = "w-resize";
            }
            else 
                if (isRight) {
                    self.$$hotSpot[0].style.cursor = "e-resize";
                }
                else {
                    self.$$hotSpot[0].style.cursor = "default";
                }
            
            /*var isLeft = ((event.pageX > this.$drag.left) && (event.pageX < (this.$drag.left + 50)));
             var isRight = ((event.pageX < this.$drag.right) && (event.pageX > (this.$drag.right - 50)));
             if (event.target.className.indexOf("s-aw-slot-sep-row") >= 0) {
             isRight = true;
             }
             if (isLeft || isRight) {
             this.$drag.$insertAt = isRight ? "right" : "left";
             $position.top -= 3;
             $position.left = this.$drag.left + (isRight ? (this.$drag.width) : (-3));
             $position.width = "0.3em";
             $position.height = this.$drag.height + 6 + "px";
             }
             else {
             var isBottom = event.pageY >= $dropBoundary.bottom;
             this.$drag.$insertAt = isBottom ? "bottom" : "top";
             $position.top = this.$drag.top + (isBottom ? this.$drag.height : 0);
             $position.height = "0.3em";
             $position.width = this.$drag.width + "px";
             }*/
            //debugger;
            return false;
        });
        self.$$hotSpot[0].style.cursor = "move";
    },
    _drawPercentSteps: function(){
        this.percentSteps = [];
        var max = this.maxWidth;
        var percentSteps = [max / 6, max / 5, max / 4, max / 3, 2 * (max / 5), max / 2, 3 * (max / 5), 2 * (max / 3), 3 * (max / 4), 4 * (max / 5), 5 * (max / 6)];
        var minWidth = 0, maxWidth = 0;
        for (var ii = 0, jj = this.widths.length; ii < jj; ii++) {
            if (ii < (this.index - 1)) {
                minWidth += this.widths[ii];
            }
            if (ii <= (this.index)) {
                maxWidth += this.widths[ii];
            }
        }
        var percents = [16, 20, 25, 33, 40, 50, 60, 66, 75, 80, 84];
        minWidth = Math.max(percents[0], minWidth);
        maxWidth = Math.min(percents[percents.length - 1], maxWidth);
        var lastX = 0;
        for (var ii = 0, jj = percentSteps.length; ii < jj; ii++) {
            var width = percentSteps[ii];
            var marker = document.createElement("div");
            marker.className = "s-aw-resizer-marker";
            var pageX = this.offset.left + width;
            marker.style.left = (pageX - this.margin.left) + "px";
            marker.style.top = (this.offset.top - this.margin.top - 12) + "px";
            marker.style.zIndex = this.markerzIndex;
            this.percentSteps.push({
                percent: percents[ii],
                pageXMin: lastX ? (pageX - ((pageX - lastX) / 2)) : 0,
                pageX: pageX,
                offsetX: width,
                width: width,
                marker: document.site.body.appendChild(marker)
            });
            lastX = pageX;
            if (ii > 0) {
                this.percentSteps[ii - 1].pageXMax = this.percentSteps[ii - 1].pageX + ((pageX - this.percentSteps[ii - 1].pageX) / 2);
            }
            var percent = percents[ii];
            if (((percent - 2) <= minWidth) && (minWidth <= (percent + 2))) {
                this.minPercentStep = ii;
            }
            if (((percent - 2) <= maxWidth) && (maxWidth <= (percent + 2))) {
                this.maxPercentStep = ii;
            }
        }
        this.percentSteps[percentSteps.length - 1].pageXMax = (this.percentSteps[percentSteps.length - 1].pageX * 100); //infini
        if (this.index > 1) {
            this.minPercentStep++;
        }
        if (this.index < (this.widths.length - 1)) {
            this.maxPercentStep--;
        }
        
    },
    start: function(domSeparator, event){
        var self = this;
        if (self.stopTimeout) {
            clearTimeout(self.stopTimeout);
            delete self.stopTimeout;
        }
        self.stop();
        self.onResizing = true;
        self.startX = event.pageX;
        
        self.index = parseInt(domSeparator.getAttribute("data-s-index"), 10);
        self.layout = document.site.authorPage.findTargetItemEvent(domSeparator.parentNode, true);
        self.widths = document.site.authorPage.layoutValidator.getWidthValues(self.layout.$layout.$widths)
        
        self.leftItem = self.layout.items[self.index - 1];
        self.leftWidth = $(self.leftItem.layoutSlot).width();
        self.rightItem = self.layout.items[self.index];
        self.rightWidth = $(self.rightItem.layoutSlot).width();
        self.offset = $(self.layout.$$item).offset();
        
        self.margin = document.site.$$body.offset();
        self.$$rowSeparator = $(domSeparator);
        self.maxWidth = $(self.layout.$$item).width();
        self.markerzIndex = document.site.setZIndex();
        self._drawPercentSteps();
        self._drawSmallSteps();
        
        document.site.body.style.cursor = "w-resize";
        $(document).bind("mouseup.syraauthorresizing", function(event){
            $(document).unbind(".syraauthorresizing");
            var widths = self.layout.$layout.$widths.split(",");
            var step = self._findSmallStep(self.$$rowSeparator);
            self.setLeftRightWidths(step.pageX);
            var limitPercent = 0;
            if (self.index > 1) {
                limitPercent = self._findSmallStep($(self.layout.rowSeparators[self.index - 2])).percent;
            }
            widths[self.index - 1] = step.percent - limitPercent;
            limitPercent = 100;
            if (self.index < self.layout.rowSeparators.length) {
                limitPercent = self._findSmallStep($(self.layout.rowSeparators[self.index])).percent;
            }
            widths[self.index] = limitPercent - step.percent;
            self.layout.$layout.$widths = widths.join(",");
            document.site.authorPage.notifyUpdate();
            self.stopTimeout = setTimeout(function(){
                self.stop();
            }, 300);
            event.preventDefault();
            return false;
        }).bind("mousemove.syraauthorresizing", function(event){
            self.onSeparatorMove(event)
            event.preventDefault();
        });
    },
    setLeftRightWidths: function(pageX){
        pageX -= this.startX;
        this.leftItem.layoutSlot.style.width = Math.max(this.leftWidth + pageX) + "px";
        this.rightItem.layoutSlot.style.width = this.rightWidth + (pageX * (-1)) + "px";
    },
    onSeparatorMove: function(event){
        var pageX;
        if (event.pageX >= this.smallSteps[this.minPercentStep].pageX && event.pageX <= this.smallSteps[this.maxPercentStep].pageX) {
            pageX = event.pageX;
        }
        else {
            pageX = this.smallSteps[(event.pageX < this.smallSteps[this.minPercentStep].pageX) ? this.minPercentStep : this.maxPercentStep].pageX;
        }
        if (pageX !== undefined) {
            this.setLeftRightWidths(pageX);
        }
        else {
            if (event.pageX >= this.percentSteps[this.minPercentStep].pageX && event.pageX <= this.percentSteps[this.maxPercentStep].pageX) {
                pageX = event.pageX;
            }
            else {
                pageX = this.percentSteps[(event.pageX < this.percentSteps[this.minPercentStep].pageX) ? this.minPercentStep : this.maxPercentStep].pageX;
            }
            if (pageX !== undefined) {
                this.setLeftRightWidths(pageX);
            }
        }
    },
    stop: function(){
        if (this.$$hotSpot) {
            this.$$hotSpot.unbind("." + this.id);
        }
        this.$$hotSpot = null;
        this.onResizing = false;
    },
    dispose: function(){
        this.stop();
    }
});
