"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;

function SelectorPopup() {

}

exports.SelectorPopup = helpers.defineClass(SelectorPopup, Article, {
	loadBox: function() {
		this.localize = document.site.localize;

		this.layoutSlot = document.createElement("div");
		this.layoutSlot.className = "s-selector-popup";

		this.opener.page.initializeNewItem(this, {}, this.opener);
		this.$options.$selectMode = this.$options.$selectMode || "multi";
		this.$prototype = {
			$properties: {
				$resources: this.$options.$properties.$resources
			},
		};
		this.$item = {
			$category: "section",
			$title: this.localize.selector_popup_title,
			$clientId: this.$item.$clientId,
			$layout: {
				$items: [{
					$bind: "$resources",
					$isEditMode: false,
					$isPagerHidden: true,
					$isMenuRecordHidden: true,
					$isQuickDesignerEnabled: false,
					$selectMode: this.$options.$selectMode,
					$isTitleHidden: true
				}]

			}
		};
		this.$skin = "s-selector-popup-item";
		Article.prototype.loadBox.call(this);
		this._widgetResizer = document.site.setWidgetResizable({
			source: this,
			slot: this.layoutSlot,
			dragSpot: this.header,
			direction: null
		});

		var dom = document.createElement("div");
		dom.className = "s-selector-popup-footer";
		this.$$footer = $(this.layoutSlot.appendChild(dom));

		this.appendOkCancel();

	},
	onSelectRecord: function(selectedRecords) {
		this.$options.onSelectRecord(selectedRecords);
	},
	appendOkCancel: function() {
		var self = this;
		var btn;
		if (self.$options.$selectMode == "multi") {
			btn = document.createElement("a");
			btn.className = "s-selector-popup-ok";
			btn.title = self.localize.selector_popup_linkOk;
			self.$$item.append(btn);
		}

		btn = document.createElement("a");
		btn.className = "s-selector-popup-cancel";
		btn.title = self.localize.selector_popup_linkCancel;
		self.$$item.append(btn);

		self.$$item.delegate(".s-selector-popup-cancel,.s-selector-popup-ok", "click", function() {
			if (this.className.indexOf("s-selector-popup-ok") >= 0) {
				self.$options.onValidate();
			}
			setTimeout(function() {
				self.close();
			}, 10);
			return false;
		});
	},
	open: function(opener, $options) {
		var self = this;
		self.opener = opener;
		self.$options = $options;
		self.loadBox($options);
		self.applyChange({
			$resources: self.$options.$resources
		});
		self.popup = self.opener.boxParent.openDialog({
			$dialogMode: "popup",
			content: self.opener,
			$$dialog: $(self.layoutSlot),
			position: {
				my: "left top",
				at: "left bottom",
				of: $options.$$position
			},
			onClose: function() {
				self.popup = null;
				self.articleParent.removeItem(self, true, true);
			}
		});
		return self.popup;
	},
	close: function() {
		if (this.popup) {
			if (this.$options.onClose) {
				this.$options.onClose();
			}
			this.popup.close();
		}
	},
	dispose: function() {
		if (this.$options) {
			delete this.$options.onClose;
			delete this.$options.onSelectRecord;
			delete this.$options.onValidate;
			delete this.$options;
		}
		if (this._widgetResizer) {
			this._widgetResizer.dispose();
			this._widgetResizer = null;
		}
		delete this.opener;
		Article.prototype.dispose.call(this);
	}
});