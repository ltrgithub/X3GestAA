"use strict";

exports.applyToField = function(field, shortcuts, event) {
	if (field.variantItem) {
		return _applyToField(field.variantItem, shortcuts, event);
	}
	var constructorName = field.constructor.name;
	if (shortcurts.esc) {
		if (shortcurts.f1) {
			field.page.externalAdapter.onFieldClickPicker({
				field: (event.shiftKey ? field.page : field),
				pickerType: "help",
				doEvent: function() {
					field.page.openHelp(event.shiftKey ? null : field);
				}
			});
			return true;
		}
		if (shortcurts.f9) {
			syra_menus.tunnel.click(field);
			return true;
		}
		if (shortcurts.tab) {
			if (field.arrayLevel === "cell") {
				field.page.externalAdapter.onFieldClickPicker({
					field: field,
					pickerType: "cancelEdit"
				});
			}
			return true;
		}
		if (shortcurts["delete"]) {
			syra_menus.clickMenu(field.articleParent, "$delete");
			return true;
		}
		if (shortcurts.insert) {
			var article = field.articleParent;
			while (!article.disposed && (article != article.page) && !article.menuItems.$create) {
				article = article.articleParent;
			}
			article && syra_menus.clickMenu(article, "$create");
			return true;
		}
		if ((!shortcurts.h && shortcurts.l) || shortcurts.f12) {
			field.mnPickers && field.mnPickers.$lookup && field.mnPickers.$lookup.click();
			return true;
		}
		if (shortcurts.m || shortcurts.f4) {
			if (shortcurts.shift) {
				field = field.articleParent;
			}
			if (field.menusBox && field.menusBox.domTitle) {
				setTimeout(function() {
					field.menusBox.domTitle.click();
				}, 10);
			}
			return true;
		}
		if (constructorName == "NumericField") {
			var numObj = field.formatApi.parse(field.input.value || "");
			field.input.value = field.formatApi.format(numObj, field.localFormat);
			event.preventDefault();
		}
	}
	if (shortcurts.enter || shortcurts.tab) {
		if (field.page.constructor.name == "TranslationPage") {
			field.page.appendNewRow(shortcurts.enter, shortcurts.tab, field);
		}
	}

	if (shortcuts["delete"] || shortcuts.insert || shortcuts.right || shortcuts.left) {
		return field.onFieldInputEvent(event, shortcuts);
	} else {
		if (shortcuts.down || shortcuts.up) {
			if (constructorName == "ChoiceField") {
				var builder = field.builder;
				clearTimeout(builder._autoCompleteTimer);
				if (!builder.field.$isReadOnly) {
					builder.toggleList(true);
					var current = builder._$selectedListIndex !== undefined ? builder._$selectedListIndex : -1;
					shortcurts.down ? current++ : current--;
					builder._$selectedListIndex = Math.min(Math.max(current, 0), builder._choices.length - 1);
					builder._selectChoice(builder._choices[builder._$selectedListIndex].$index);
					builder.field.input.value = builder.field.$enum[builder._choices[builder._$selectedListIndex].$index].$title;
					builder._selectItem(builder._choices[builder._$selectedListIndex].$index, true);
					return true;
				}
			}
			if (shortcurts.down) {
				var picker = field.mnPickers && (field.mnPickers.date || field.mnPickers.time);
				if (picker) {
					picker.click();
					return true;
				}
			}
			if (!field.articleParent.popupCard) {
				return field.onFieldInputEvent(event, shortcuts);
			}
		} else {
			if (shortcuts.tab && field.$item.$contentEditable) {
				field.onInputChange(field.input, event);
			} else {
				if (shortcuts.enter) {
					if (constructorName == "ChoiceField") {
						var builder = field.builder;
						clearTimeout(builder._autoCompleteTimer);
						if (!shortcurts.esc) {
							if (builder.field.$field.$isAutoComplete === false) {
								var choices = builder._choices;
								if (choices && choices.length && builder._$selectedListIndex !== undefined && builder._$selectedListIndex >= 0 && builder._popup && builder._popup.isOpened) {
									builder.onChoiceItemClick(choices[builder._$selectedListIndex]);
									return true;
								}
							} else {
								return builder.validateKeyPress(undefined, shortcurts.enter);
							}
						}
					}
					// is ie7 or ie9 or ie10
					if (field.input && field.getDataValue() !== field.currentValue) {
						var bInfo = syra_site.browser.getIdentity().info;
						if ((bInfo[0].toLowerCase() == "msie") && ((bInfo[1].indexOf("7.0") != -1) || (bInfo[1].indexOf("9.0") != -1) || (bInfo[1].indexOf("10.0") != -1))) {
							field.onInputChange(field.input, event);
						}
					}
				}
			}
		}
	}
	return false;
};


exports.applyToMessageBox = function(page, shortcuts, event) {
	if (shortcurts.enter) {
		page.onMenuClick({
			$bind: page._focusBtnId
		});
		return true;
	}
	if (shortcurts.esc) {
		page.close("esc");
		return true;
	}
	if (shortcurts.tab) {
		if (page.$itemButtons.length > 1) {
			var ii, len;
			for (ii = 0, len = page.$itemButtons.length; ii < len; ii++) {
				if (page.$itemButtons[ii].$bind == page._focusBtnId) {
					break;
				}
			}
			if (ii < len) {
				ii = shortcurts.shift ? (ii == 0 ? len - 1 : ii - 1) : (ii + 1 == len ? 0 : ii + 1);
				syra_site.dom.toggleClass(page.getMenuItem(page._focusBtnId).domItem, "s-msgbox-button-default", false);
				page._focusBtnId = page.$itemButtons[ii].$bind;
				syra_site.dom.toggleClass(page.getMenuItem(page._focusBtnId).domItem, "s-msgbox-button-default", true);
				setTimeout(function() {
					page.getMenuItem(page._focusBtnId).domItem.focus();
				}, 5);
			}
		}
		return true;
	}
	if (shortcurts.a && shortcurts.ctrl) {
		page.selectText();
		return true;
	}
	return false;
};

exports.applyToList = function(list, shortcuts, event, focusField) {
	if (shortcuts.pagedown || shortcuts.pageup) {
		if (list.$item.$isNavigationList) {
			if (list.deferSelect) {
				clearTimeout(list.deferSelect);
				list.deferSelect = null;
			}
			if (record = list.getFocusedRecord(true)) {
				record.toggleFocus(false);
				recordIndex = record.getRecordIndex();
				if (list.treeDecorator) {
					recordIndex = list.treeDecorator.getPreviousNextServerIndexVisible(recordIndex, shortcuts.down);
				} else {
					if (shortcuts.down) {
						recordIndex = (recordIndex < list.clientDataset.length - 1) ? recordIndex + 1 : recordIndex;
					} else {
						recordIndex = recordIndex > 0 ? recordIndex - 1 : recordIndex;
					}
				}
			}
			if ((newSelect = list.findRecordByServerIndex(list.getClientDataSetServerIndex(recordIndex)))) {
				newSelect.toggleFocus(true);
				list.scroller.scrollToItem(newSelect.dataRow);
				if (newSelect.$facet && newSelect.$facet != "$lookup" && !list.treeDecorator) {
					list.deferSelect = setTimeout(function() {
						newSelect.domItem.click();
					}, 500);
				}
				event.preventDefault();
				return true;
			}
		}
		if (list.treeDecorator) {
			list.treeDecorator.expendCollapseAll(shortcuts.pagedown);
			return true;
		} else
		if (list.pagging && list.pagging.onShortKeyEvent) {
			list.pagging.onShortKeyEvent(shortcuts.pagedown, shortcuts.shift);
			event.preventDefault();
			return true;
		}
	} else
	if (shortcuts.left || shortcuts.right) {
		if (list.treeDecorator) {
			var record = list.getFocusedRecord(!list.$item.$isNavigationList);
			if (record) {
				list.treeDecorator.expendCollapseNode(record.$uuid, shortcuts.right);
				return true;
			}
		}
		return false;
	} else {
		if (shortcuts.up || shortcuts.down) {
			if (list.treeDecorator) {
				var record, recordIndex, serverIndex, newSelect;
				if (record = list.getFocusedRecord(true)) {
					record.toggleFocus(false);
					recordIndex = record.getRecordIndex();
					recordIndex = list.treeDecorator.getPreviousNextServerIndexVisible(recordIndex, shortcuts.down);
				} else {
					recordIndex = 0;
				}
				serverIndex = list.getClientDataSetServerIndex(recordIndex);
				newSelect = list.findRecordByServerIndex(serverIndex);
				if (newSelect) {
					newSelect.toggleFocus(true);
				}
				return true;
			}
		} else {
			if (shortcuts.enter) {
				if (focusField) {
					if (focusField.$item.$bind === "$search") {
						list.searchCapability.onClick(list, "$searchNext", event);
						return true;
					}
				} else {
					if (list.$item.$isNavigationList) {
						record = list.getFocusedRecord(false);
						if (!record && list.selector && list.selector.uuid !== undefined) {
							record = list.selector.records[list.selector.uuid];
						}
						if (record && record.domItem) {
							record.domItem.click();
							event.preventDefault();
							return true;
						}
					}
				}
			}
		}
	}
	return false;
};

exports.applyToPage = function(page, shortcurts, event, focusField) {
	if (!focusField) {
		focusField = (page.focusField && !page.focusField.disposed) ? page.focusField : null;
	}
	if (shortcurts.esc) {
		if (shortcurts.g) {
			if (shortcurts.h) {
				syra_site.gotoHome();
			}
			return true;
		}
		if ((shortcurts.h && (shortcurts.a || shortcurts.l)) || shortcurts.f11) {
			if (page.fusionBar) {
				page.fusionBar.collapse();
			}
			if (shortcurts.l) {
				return true; // shortcut only for fusionbar
			}
			//not return to apply default hide
		}
		if (shortcurts.h || shortcurts.f11) {
			if ((shortcurts.h && (shortcurts.a || shortcurts.r)) || shortcurts.f11) {
				if (page.menuBar) {
					page.menuBar.collapse();
				}
				return true;
			}
			if (event.syraKeyMap == "h") {
				event.returnValue = false;
				if (event.preventDefault) {
					event.preventDefault();
				}
			}
		}
		if (shortcurts.f7 || (shortcurts[":"] && shortcurts.shift) || shortcurts.s || shortcurts.divide) {
			//gotofunction
			syra_menus.clickMenu(page, "1186");
			return true;
		}
		if (shortcurts.enter) {
			page.clickMainMenu();
			return true;
		}
		if (shortcurts.left || shortcurts.right) {
			page.openNextTab(shortcurts.right);
			return true;
		}
		if (shortcurts.f1) {
			page.openHelp();
			return true;
		}
		if (shortcurts.f5) {
			syra_menus.clickMenu(page, "2823");
			return true;
		}
		if (shortcurts.f6) {
			syra_menus.clickMenu(page, "1172");
			return true;
		}
		if (shortcurts["delete"]) {
			syra_menus.clickMenu(page, "$delete");
			return true;
		}
		if (shortcurts.insert || shortcurts.n) {
			syra_menus.clickMenu(page, page.isFusionPage ? "1115" : "$create");
			return true;
		}
		if (shortcurts.p) {
			syra_menus.clickMenu(page, "$print");
			return true;
		}
		if (shortcurts.r) {
			var list = page.getLastFocusGrid(focusField);
			var lists = list ? [list] : page.getLists();
			if (lists) {
				for (var ii = 0, jj = lists.length; ii < jj; ii++) {
					var list = lists[ii];
					if (list && list.columnFitter) {
						list.columnFitter.reset();
						list.resizeArticle(true);
					}
				}
			}
			return true;
		}
		/*if (shortcurts.pagedown || shortcurts.pageup) {
         var list = page.getLastFocusGrid(focusField);
         var lists = list ? [list] : page.getLists();
         if (lists.length == 1 && lists[0].pagging) {
         lists[0].pagging.onShortKeyEvent(shortcurts.pagedown, shortcurts.shift);
         }
         return true;
         }*/
		if (shortcurts.a) {
			//selectAllGridLines
			// get current grid, we need to have focus at least of an element of the grid
			var list = page.getLastFocusGrid(focusField);
			var lists = list ? [list] : page.getLists();
			if (lists.length == 1 && lists[0].pagging) {
				var range = document.createRange();
				range.selectNode(lists[0].domItem);
				window.getSelection().addRange(range);
			}
			return true;
		}
		if (shortcurts.k) {
			syra_menus.clickMenu(page, shortcurts.shift ? "$last" : "$next");
			return true;
		}
		if (shortcurts.j) {
			syra_menus.clickMenu(page, shortcurts.shift ? "$first" : "$previous");
			return true;
		}
		if ((shortcurts[":"] && shortcurts.shift) || shortcurts.s || shortcurts.divide) {
			if (syra_site.searcher) {
				var $searchFields = syra_site.searcher.boundFields.$search;
				if ($searchFields && $searchFields.length) {
					$searchFields[0].focus();
				}
				return true;
			}

		}
	} else {
		if (shortcurts.enter || shortcurts.up || shortcurts.down) {
			if (!(focusField && focusField.$item && focusField.$item.$isFilterMode && shortcurts.enter)) {
				var list = page.getLastFocusGrid(focusField);
				if (list) {
					if (focusField && focusField.$item && focusField.$item.$isFilterMode) {
						list.domItem.focus();
						return true;
					} else
					if (focusField) {
						if (shortcurts.enter) {
							page.externalAdapter.onFieldEvent({
								field: focusField,
								event: event,
								doEvent: function() {
									var fnct = "onInput" + event.type.charAt(0).toUpperCase() + event.type.slice(1);
									focusField[fnct] && focusField[fnct](event.target, event);
								}
							});

						}
						return true;
					}
				}
			}
			return false;
		}
	}
	return false;
};