"use strict";
var keyboardManager = require('syracuse-ui/lib/site/events/keyboardManager');

var _winHandlers = {};
var _layoutHandlers = {};


function _bindGlobalEvent() {
	document.site.$$layoutSlot.bind("click", function(event) {
		var availableTarget = false;
		document.site.onBeforClick(undefined, event);
		var mainPage = document.site.mainPage;
		if (mainPage && !mainPage.designer && mainPage.isFusionPage) {
			var $$target = $(event.target);
			["data-s-menu", "data-s-field", "data-s-picker"].some(function(selector) {
				if ((event.target.getAttribute(selector) != null) || $$target.closest("[" + selector + "]").length > 0)
					return availableTarget;
			});
			if (!availableTarget) {
				if ($$target.closest("[data-s-fusion-page]").length > 0) {
					return mainPage.externalAdapter.onGlobalClick(event);
				}
			}
		}
	});
}

function _bindFieldEvents() {
	document.site.$$layoutSlot.delegate("textarea,input,select,[contenteditable]", "mousedown click change focusin focusout", function(event) {
		if (this.syra_field_id) {
			var field = document.site.itemHelper.findField(this);
			if (field) {
				if (event.type == "focusin" || event.type == "click") {
					//document.site.onBeforClick(null, event);
				}
				if (field.page.designer && field.page.designer.itemTool) {
					if (!field.page.designer.itemTool.onClickItem(field, this, field.article)) {
						event.stopPropagation();
						return false;
					}
				}
				field.onFieldInputEvent(event);
				field.page.registerLastFocusGrid(field);
				event.stopPropagation();
			}
		}
	}).delegate("object.s-field-flash", "mousedown", function(event) {
		var field = document.site.itemHelper.findArticle(this);
		if (field && !field.page.isDesignFreeze) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		}
	}).delegate("a[data-s-field-binary]", "click focusin focusout", function(event) {
		var field = document.site.itemHelper.findField(this);
		if (field && !field.page.isDesignFreeze) {
			field.onFieldInputEvent(event);
			if (event.type != "click") {
				event.stopPropagation();
				return false;
			}
		}
	}).delegate("a.s-icon-link", "click", function(event) {
		var field = document.site.itemHelper.findField(this);
		if (field && !field.page.isDesignFreeze) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		}
		return false;
	}).delegate("textarea", "input", function(event) {
		var field = document.site.itemHelper.findField(this);
		if (field) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		}
		return false;
	});
}

function _bindSearchFacetEvents() {
	document.site.$$layoutSlot.delegate("input.s-search-facet-member-check,input.s-sv-search-facet-member-check", "change", function() {
		document.site.itemHelper.findArticle(this).onInputMemberChange(this);
		return false;
	});
}

function _bindListEvents() {
	document.site.$$layoutSlot.delegate("[data-s-menu],[data-s-picker],[data-s-box]", "click", function(event, data) {
		try {
			if (!this.syraIsDisabled) {
				var article = document.site.itemHelper.findArticle(this);
				var pickerId = event.currentTarget.getAttribute("data-s-picker");
				var menuId = this.getAttribute("data-s-menu");
				var boxId = this.getAttribute("data-s-box");
				var doEvent = true;
				if (article && pickerId == "diag-picker") {
					var panel = article.diagnosesPanel || document.site.diagnosesPanel;
					if (panel) {
						panel.onClickPicker(this);
						doEvent = false;
					}
				}
				if (doEvent) {
					if (article.page.designer && article.page.designer.itemTool) {
						doEvent = article.page.designer.itemTool.onClickItem(box, this, article);
					}
					if (doEvent) {
						if (boxId) {
							var box = document.site.itemHelper.findBox(this);
							if (box) {
								doEvent = !article.onBoxClickItem || article.onBoxClickItem(box, this);
								if (doEvent) {
									if (box.isTitleUrlLink && this.syraBoxPickerId != "expand") {
										return true;
									}
									if (box.tabTitle) {
										var tabIndex = box.layoutParent.getChildIndex(box);
										var isTabSelected = box.layoutParent.getOpenedTab() == box;
										if (isTabSelected) {
											box.page.externalAdapter.onBoxClick({
												box: box,
												event: event,
												tabIdx: tabIndex
											});
										} else {
											if (!document.site.ddManager.ddAgent) {
												var open = !box.$item.$opened;
												var isFirstTime = !box.loaded;
												box.page.externalAdapter.onBoxToggle({
													nativeEvent: event,
													nativeEvenData: data,
													box: box,
													isTabSelected: isTabSelected,
													open: open,
													isFirstTime: isFirstTime,
													tabIdx: tabIndex,
													doEvent: function() {
														if (!isTabSelected) {
															box.layoutParent.openTab(document.site.boxFocus = box);
														}
														// document.site.resize(true);
													}
												});
												return false;
											}
										}
									} else {
										if (box.$item.$isBoxCollapsable) {
											document.site.onBeforClick(box);
											box.expandBody(undefined, event);
										}
									}
								} else {
									event.stopPropagation();
								}
							}
						} else {
							document.site.onBeforClick(undefined, event);
							if (menuId) {
								var menu = document.site.itemHelper.findMenu(this);
								if (menu && !menu.$isDisabled) {
									menu.click(event);
								}
							} else {
								if (pickerId && article) {
									if (!article.onClickPicker || article.onClickPicker(event.currentTarget, event)) {
										if (event.currentTarget.syraSiteObserver) {
											document.site[event.currentTarget.syraSiteObserver].onClickPicker(event.currentTarget, event);
										} else {
											switch (pickerId) {
												case "s-dialog-close":
												case "s-dialog-ok":
													var content = article.page;
													if (this.syraBoxId) {
														content = document.site.itemHelper.findBox(this);
													}
													if (content && content.dialogWrapper) {
														content.dialogWrapper.onClickPicker(this);
													}
													break;
												case "field-choice":
													var field = document.site.itemHelper.findField(this);
													if (field) {
														field.builder.onChoiceItemClick(this.syraChoice);
													}
													break;
												case "box-picker":
													document.site.itemHelper.findBox(event.target).doPicker(event.target.syraBoxPickerId);
													break;
												case "s-bar-collapse":
												case "s-bar-title":
													article.page.onBarEvent(event.currentTarget, event);
													break;
												default:
													var field = document.site.itemHelper.findField(this);
													if (field) {
														field.onClickPicker(event.currentTarget, event);
													}
													break;
											}
										}
									}

								}

							}
						}
					} else {
						event.stopPropagation();
					}
				}
			}
		} catch (error) {
			document.site.onError(error);
		} finally {
			if (article && article.page) {
				article.page.registerLastFocusGrid(article);
			}
			return event.syraRetValue || false;
		}
	});
}

function _onMouseEnterLeave(root, event) {
	var onEnter = event.type == "mouseover";
	var target = event.target;
	var related = event.relatedTarget;
	while (target && target != root) {
		if (target.syrainout) {
			if (!related || (related !== target && !target.contains(related))) {
				target.syrainout.onItemEnterLeave(onEnter, event, target);
			}
		}
		target = target.parentNode;
	}
}

function _bindMouseEnterLeavedsd() {


	document.site.$$layoutSlot.delegate("[data-s-inout]", "mouseenter mouseleave", function(event) {
		if (event.currentTarget.syrainout) {
			event.currentTarget.syrainout.onItemEnterLeave(event.type == "mouseenter", event);
		} else {
			if (event.currentTarget.getAttribute("data-s-menu")) {
				var menuId = this.getAttribute("data-s-menu");
				if (menuId) {
					var menu = document.site.itemHelper.findMenu(this);
					if (menu) {
						menu.onItemEnterLeave(event.type == "mouseenter", event);
					}
				}
			} else {
				if (event.currentTarget.getAttribute("data-s-field")) {
					var field = document.site.itemHelper.findField(event.currentTarget);
					if (field && field.domItem == this) {
						field.onItemEnterLeave(event.type == "mouseenter", event);
					}
				} else {
					var box;
					if (event.currentTarget.syraBoxId) {
						box = document.site.itemHelper.findBox(event.currentTarget);
					}
					box = box || document.site.itemHelper.findArticle(event.currentTarget);
					if (box && box.onItemEnterLeave) {
						box.onItemEnterLeave(event.type == "mouseenter", event);
					}
				}
			}
		}
	});
}

function _bindMobile() {
	return;
	document.body.addEventListener('touchmove', function(event) {
		event.preventDefault();
	}, false);
}

exports.load = function() {
	_bindGlobalEvent();
	keyboardManager.load();
	_bindFieldEvents();
	_bindSearchFacetEvents();
	_bindListEvents();

	if (document.site.layoutSlot) {
		_layoutHandlers.mouseover = document.site.layoutSlot.addEventListener("mouseover", function(event) {
			_onMouseEnterLeave(document.site.layoutSlot, event);
		}, false);
		_layoutHandlers.mouseout = document.site.layoutSlot.addEventListener("mouseout", function(event) {
			_onMouseEnterLeave(document.site.layoutSlot, event);
		}, false);
	}


	_winHandlers.resize = window.addEventListener("resize", function(event) {
		document.site && document.site.onSiteResizeEvent();
	});
	_winHandlers.orientationchange = window.addEventListener("orientationchange", function(event) {
		document.site && document.site.onSiteResizeEvent();
	});

	_bindMobile();
};

exports.dispose = function() {
	keyboardManager.dispose();
	var keys = Object.keys(_winHandlers);
	for (var ii = 0, jj = keys.length; ii < jj; ii++) {
		window.removeEventListener(keys[ii], _winHandlers[keys[ii]]);
	}
	if (document.site.layoutSlot) {
		keys = Object.keys(_layoutHandlers);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			document.site.layoutSlot.removeEventListener(keys[ii], _layoutHandlers[keys[ii]]);
		}
	}
	_layoutHandlers = _winHandlers = null;
	document.site.$$layoutSlot.unbind();
	document.site.$$layoutSlot.undelegate();
};