"use strict";
var keyboard = require('syracuse-ui/lib/site/events/keyboard');

var _winHandlers = {};
var _layoutHandlers = {};
var _docHandlers = {};
var _resizeTimeout;


function _emulateEvent(event) {
	var mainTouch = event.originalEvent && event.originalEvent.touches && event.originalEvent.touches[0];
	if (mainTouch) {
		event.pageX = mainTouch.pageX;
		event.pageY = mainTouch.pageY;
	}
	return event;
}

function _bindFieldEvents() {
	$(syra_site.layoutSlot).delegate("textarea,input,select,[contenteditable]", "mousedown change focusin focusout", function(event) {
		//if (this.syra_field_id) {
		if (this.syraOnInput) {
			var item = syra_map[this.syraItem];
			item[this.syraOnInput] && item[this.syraOnInput](this, event);
		} else {
			var field = syra_site.findField(this);
			if (field && field.onFieldInputEvent) {
				field.onFieldInputEvent(event);
				field.page.registerLastFocusGrid(field);
			}
		}
		event.stopPropagation();
		//}
	}).delegate("object.s-field-flash", "mousedown", function(event) {
		var field = syra_site.findArticle(this);
		if (field && !field.page.isDesignFreeze) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		}
	}).delegate("a[data-s-field-binary]", "focusin focusout", function(event) {
		var field = syra_site.findField(this);
		if (field && field.onFieldInputEvent) {
			field.onFieldInputEvent(event);
		}
		event.stopPropagation();
		return false;
	}).delegate("textarea", "input", function(event) {
		var field = syra_site.findField(this);
		if (field) {
			field.onFieldInputEvent(event);
			event.stopPropagation();
		}
		return false;
	});
}

//onInputFieldMouseDown

function _onMouseItemInOut(root, event) {
	if (!syra_site.isInoutDisabled) {
		var onEnter = event.type == "mouseover";
		var target = event.target;
		var related = event.relatedTarget;
		var item;
		while (target && target != root) {
			if (target.syrainout) {
				if (!related || (related !== target && !target.contains(related))) {
					if (target.syraIsSyraMenuHandler) {
						syra_menus.onItemInOut(onEnter, event, target);
					} else {
						item = syra_map[target.syrainout];
						item && item.onItemInOut(onEnter, event, target);
					}
				}
			} else {
				target.syraTip && syra_menus.onTipItemInOut(onEnter, event, target);
			}
			target = target.parentNode;
		}
	}
}

function _bindMobile() {
	return;
	document.body.addEventListener('touchmove', function(event) {
		event.preventDefault();
	}, false);
}

function _clearWaitingResize() {
	if (_resizeTimeout) {
		clearTimeout(_resizeTimeout);
		_resizeTimeout = null;
	}
}

function _onSiteResizeEvent(event) {
	if (!_resizeTimeout) {
		_resizeTimeout = setTimeout(function() {
			syra_site.resize();
			_resizeTimeout = null;
		}, 100);
	}
}

function _onDown(event) {
	if (!event.target.syraIsMouseEventDisabled) {
		if (syra_dd.ddAgent) {
			syra_dd.stop();
		} else {
			if (event.target.syraNoDDSpot) {
				return;
			}
			if (event.type == "touchstart") {
				if (!event.target.syraDragSpot) {
					return;
				}
				event = _emulateEvent(event);
			}
			var target = event.target;
			while (target) {
				if (target.syraDragSpot) {
					for (var mm = 0, kk = syra_dd.colResizer.length; mm < kk; mm++) {
						var item = syra_dd.colResizer[mm].isDraggable(target, event);
						if (event.syraRetValue === false || item) {
							syra_dd.dropableItem = item;
							event.preventDefault();
							event.stopPropagation();
							return;
						}
					}
					for (var mm = 0, kk = syra_dd.barResizer.length; mm < kk; mm++) {
						var item = syra_dd.barResizer[mm].isDraggable(target, event);
						if (event.syraRetValue === false || item) {
							syra_dd.dropableItem = item;
							event.preventDefault();
							event.stopPropagation();
							return;
						}
					}
					for (var mm = 0, kk = syra_dd.pageObservers.length; mm < kk; mm++) {
						var item = syra_dd.pageObservers[mm].isDraggable(target, event);
						if (event.syraRetValue === false || item) {
							syra_dd.dropableItem = item;
							event.preventDefault();
							event.stopPropagation();
							return;
						}
					}
				}
				if (target.syraPage) {
					break; //boundary is page
				}
				target = target.parentNode;
			}
		}
	}
}

function _onMove(event) {
	if (!event.target.syraIsMouseEventDisabled && (syra_dd.ddAgent || syra_dd.pageObservers.length)) {
		if (event.type == "touchmove") {
			if (!event.target.syraDragSpot) {
				return;
			}
			event = _emulateEvent(event);
		}
		var target = event.target;
		var done;
		while (target) {
			if (target.syraDragSpot) {
				if (syra_dd.ddAgent) {
					for (var mm = 0, kk = syra_dd.colResizer.length; mm < kk; mm++) {
						var observer = syra_dd.colResizer[mm];
						if (observer.onDragMove) {
							var result = observer.onDragMove(target, event);
							done = true;
							if (result !== true) {
								event.preventDefault();
								result === false && event.stopPropagation();
								break;
							}
						}
					}
					if (!done) {
						for (var mm = 0, kk = syra_dd.barResizer.length; mm < kk; mm++) {
							var observer = syra_dd.barResizer[mm];
							if (observer.onDragMove) {
								var result = observer.onDragMove(target, event);
								if (result !== true) {
									done = true;
									event.preventDefault();
									result === false && event.stopPropagation();
									break;
								}
							}
						}
					}
				}
				if (!done) {
					for (var mm = 0, kk = syra_dd.pageObservers.length; mm < kk; mm++) {
						var observer = syra_dd.pageObservers[mm];
						if (observer.onDragMove) {
							var result = observer.onDragMove(target, event);
							if (result !== true) {
								done = true;
								event.preventDefault();
								result === false && event.stopPropagation();
								break;
							}
						}
					}
				}
				event.preventDefault();
				break;
			}
			target = target.parentNode;
		}
		if (!done && syra_dd.ddAgent) {
			syra_dd.ddAgent.onDragMouseMove(event.target, event);
			event.preventDefault();
			event.stopPropagation();
		}

	}

}

function _onUp(event) {
	delete syra_dd.dropableItem;
	if (syra_dd.ddAgent) {
		syra_dd.ddAgent.onDragMouseUp(event.target, _emulateEvent(event));
		syra_dd.stop();
	}
}

exports.load = function() {
	_docHandlers.keydown = document.addEventListener("keydown", function(event) {
		keyboard[event.type](event);
	}, false);
	_docHandlers.keypress = document.addEventListener("keypress", function(event) {
		keyboard[event.type](event);
	}, false);
	_docHandlers.keyup = document.addEventListener("keyup", function(event) {
		keyboard[event.type](event);
	}, false);

	_bindFieldEvents();

	if (syra_site.layoutSlot) {
		_layoutHandlers.mousedown = syra_site.layoutSlot.addEventListener("mousedown", function(event) {
			_onDown(event);
		}, false);
		_layoutHandlers.touchstart = syra_site.layoutSlot.addEventListener("touchstart", function(event) {
			_onDown(event);
		}, false);
		_layoutHandlers.mousemove = syra_site.layoutSlot.addEventListener("mousemove", function(event) {
			_onMove(event);
		}, false);
		_layoutHandlers.touchmove = syra_site.layoutSlot.addEventListener("touchmove", function(event) {
			_onMove(event);
		}, false);
		_layoutHandlers.mouseup = syra_site.layoutSlot.addEventListener("mouseup", function(event) {
			_onUp(event);
		}, false);
		_layoutHandlers.touchend = syra_site.layoutSlot.addEventListener("touchend", function(event) {
			_onUp(event);
		}, false);


		_layoutHandlers.mouseover = syra_site.layoutSlot.addEventListener("mouseover", function(event) {
			_onMouseItemInOut(syra_site.layoutSlot, event);
		}, false);
		_layoutHandlers.mouseout = syra_site.layoutSlot.addEventListener("mouseout", function(event) {
			_onMouseItemInOut(syra_site.layoutSlot, event);
		}, false);
		_layoutHandlers.click = syra_site.layoutSlot.addEventListener("click", function(event) {
			try {
				syra_site.siteFunctions.toggleTitleTip();
				if (!event.target.syraIsMouseEventDisabled) {
					var article;
					var target = event.target;
					var site = syra_site;
					var done, isDesignSelected;
					while (target && target != this) {
						if (target.syraSiteObserver) {
							var observer = site[target.syraSiteObserver];
							if (observer[target.syraOnClick]) {
								observer[target.syraOnClick](event, target);
								done = true;
								break;
							}
						}
						if (target.syraOnClick && !event.syraOnClickTarget) {
							event.syraOnClickTarget = target;
						}
						if (target.syraItem || target.syraTool) {
							if (!target.syraIsDisabled) {
								var observer, item;
								if (target.syraTool) {
									observer = syra_map[target.syraTool];
									item = target;
									while (item && !item.syraItem) {
										item = item.parentNode;
									}
									item = item && syra_map[item];
								} else {
									observer = item = syra_map[target.syraItem];
								}
								article = item && (item.articleParent || item.page);
								if (!isDesignSelected && article && article.designer && article.designer.selectItem) {
									if (article.designer.isDesignedItem(item)) {
										article.designer.selectItem(item, true);
										isDesignSelected = true;
									}
								}
								if (observer && event.syraOnClickTarget) {
									if (event.syraOnClickTarget.syraIsSyraMenuHandler) {
										if (!observer.$isDisabled) {
											syra_menus[event.syraOnClickTarget.syraOnClick](event, event.syraOnClickTarget, observer);
											done = true;
										}
									} else {
										if (observer[event.syraOnClickTarget.syraOnClick]) {
											if (!observer.$isDisabled) {
												observer[event.syraOnClickTarget.syraOnClick](event, event.syraOnClickTarget);
												done = true;
											}
										}
									}
									if (done) {
										delete event.syraOnClickTarget;
										break;
									}
								}
							}
						}
						target = target.parentNode;
					}
					if (!done) {
						syra_site.siteFunctions.onBeforeClick(undefined, event);
						var mainPage = syra_site.mainPage;
						if (mainPage && !mainPage.designer && mainPage.isFusionPage) {
							target = event.target;
							while (target) {
								if (target.syraItem) {
									return mainPage.externalAdapter.onGlobalClick(event);
								}
								target = target.parentNode;
							}
						}
					}
					if (!event.syraRetValue) {
						if (event.target.tagName != "INPUT" && !event.target.getAttribute("for")) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				} else {
					syra_site.siteFunctions.onBeforeClick(undefined, event);
				}
			} catch (error) {
				syra_site.onError(error);
			} finally {
				if (article && article.page) {
					article.page.registerLastFocusGrid(article);
				}
			}
		}, false);
	}

	_winHandlers.resize = window.addEventListener("resize", function(event) {
		_onSiteResizeEvent(event);
	});
	_winHandlers.orientationchange = window.addEventListener("orientationchange", function(event) {
		syra_site && syra_site.onSiteResizeEvent();
		_onSiteResizeEvent(event);
	});
	window.onbeforeunload = function(event) {
		if (!syra_site.hasDoneLogOut && !syra_site.siteOptions.isOffice) {
			var message = syra_site.fusionGateway && syra_site.fusionGateway.onWindowBeforeUnload();
			if (!message && !syra_site.isSiteReloading && !syra_site.developpementMode) {
				message = syra_local.disconnect_unload;
			}
			if (message) {
				switch (syra_site.browser.getIdentity().name) {
					case "firefox":
						// display alert text in diagnoses panel before browser alert box
						syra_site.showDiagnoses({
							$diagnoses: [{
								"severity": "error",
								"message": message
							}],
							autoHide: {
								"autoHide.autoHideTimeOut": 1000
							}
						});
						var ee = event || window.event;
						if (ee) {
							ee.returnValue = message;
						}
						return message;
					case "chrome":
						// display alert text in browser alert box
					case "safari":
					case "msie":
						var ee = event || window.event;
						if (ee) {
							ee.returnValue = message;
						}
						return message;
					default:
						// both alert display methods 
						syra_site.showDiagnoses({
							$diagnoses: [{
								"severity": "error",
								"message": message
							}]
						});
						var ee = event || window.event;
						if (ee) {
							ee.returnValue = message;
						}
						return message;
				}
			}
		}
		delete syra_site.hasDoneLogOut;
	};
	_winHandlers.unload = window.addEventListener("unload", function(event) {
		syra_site.fusionGateway && syra_site.fusionGateway.detachAllBooksPanic();
		syra_site.dispose();
	});
	window.onerror = function(errorMsg, url, lineNumber, error) {
		syra_site.onUncaughtError(errorMsg, url, lineNumber, error);
	};
	_bindMobile();
};

exports.dispose = function() {
	_clearWaitingResize();
	var keys = Object.keys(_winHandlers);
	for (var ii = 0, jj = keys.length; ii < jj; ii++) {
		window.removeEventListener(keys[ii], _winHandlers[keys[ii]]);
	}
	window.onerror = window.onbeforeunload = null;
	keys = Object.keys(_docHandlers);
	for (var ii = 0, jj = keys.length; ii < jj; ii++) {
		document.removeEventListener(keys[ii], _docHandlers[keys[ii]]);
	}
	if (syra_site.layoutSlot) {
		keys = Object.keys(_layoutHandlers);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			syra_site.layoutSlot.removeEventListener(keys[ii], _layoutHandlers[keys[ii]]);
		}
	}
	_docHandlers = _layoutHandlers = _winHandlers = null;
};