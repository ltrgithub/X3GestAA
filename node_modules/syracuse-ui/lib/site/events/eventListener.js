"use strict";
var keyboardManager = require('syracuse-ui/lib/site/events/keyboardManager');

var _winHandlers = {};
var _layoutHandlers = {};
var _resizeTimeout;


function _emulateEvent(event) {
	var mainTouch = event.originalEvent && event.originalEvent.touches && event.originalEvent.touches[0];
	if (mainTouch) {
		event.pageX = mainTouch.pageX;
		event.pageY = mainTouch.pageY;
	}
	return event;
}

function _bindFieldEvents() {
	document.site.$$layoutSlot.delegate("textarea,input,select,[contenteditable]", "mousedown change focusin focusout", function(event) {
		//if (this.syra_field_id) {
		if (this.syraOnInput) {
			var item = repository[this.syraItem];
			item[this.syraOnInput] && item[this.syraOnInput](this, event);
		} else {
			var field = document.site.findField(this);
			if (field && field.onFieldInputEvent) {
				field.onFieldInputEvent(event);
				field.page.registerLastFocusGrid(field);
			}
		}
		event.stopPropagation();
		//}
	}).delegate("a[data-s-field-binary]", "focusin focusout", function(event) {
		var field = document.site.findField(this);
		if (field && field.onFieldInputEvent) {
			field.onFieldInputEvent(event);
		}
		event.stopPropagation();
		return false;
	});
}

//onInputFieldMouseDown

function _onMouseItemInOut(root, event) {
	var onEnter = event.type == "mouseover";
	var target = event.target;
	var related = event.relatedTarget;
	while (target && target != root) {
		if (target.syrainout) {
			if (!related || (related !== target && !target.contains(related))) {
				repository[target.syrainout].onItemInOut(onEnter, event, target);
			}
		}
		target = target.parentNode;
	}
}

function _bindMobile() {
	return;
	document.body.addEventListener('touchmove', function(event) {
		event.preventDefault();
	}, false);
}

function _clearWaitingResize() {
	if (_resizeTimeout) {
		clearTimeout(_resizeTimeout);
		_resizeTimeout = null;
	}
}

function _onSiteResizeEvent(event) {
	if (!_resizeTimeout) {
		_resizeTimeout = setTimeout(function() {
			document.site.resize();
			_resizeTimeout = null;
		}, 100);
	}
}

function _onDown(event) {
	var ddManager = document.site.ddManager;
	if (ddManager._observers) {
		if (ddManager.ddAgent) {
			ddManager.stop();
		} else {
			if (event.target.syraNoDDSpot) {
				return;
			}
			if (event.type == "touchstart") {
				if (!event.target.syraDragSpot) {
					return;
				}
				event = _emulateEvent(event);
			}
			var target = event.target;
			while (target) {
				if (target.syraDragSpot) {
					var keys = ["colResizer", "barResizer", "page"];
					for (var ii = 0, jj = keys.length; ii < jj; ii++) {
						var observers = ddManager._observers[keys[ii]];
						for (var mm = 0, kk = observers.length; mm < kk; mm++) {
							var observer = observers[mm];
							var item = observers[mm].isDraggable(target, event);
							if (event.syraRetValue === false) {
								event.preventDefault();
								event.stopPropagation();
								return;

							}
							if (item) {
								ddManager.dropableItem = item;
								event.preventDefault();
								event.stopPropagation();
								return;
							}
						}
					}
				}
				target = target.parentNode;
			}
		}

	}
}

function _onMove(event) {
	var ddManager = document.site.ddManager;
	if (ddManager._observers) {

		if (event.type == "touchmove") {
			if (!event.target.syraDragSpot) {
				return;
			}
			event = _emulateEvent(event);
		}
		var target = event.target;
		var done;
		while (target) {
			if (target.syraDragSpot) {
				var keys = ["colResizer", "barResizer", "page"];
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					var observers = ddManager._observers[keys[ii]];
					for (var mm = 0, kk = observers.length; mm < kk; mm++) {
						var observer = observers[mm];
						if (observer.onDragMove) {
							var result = observer.onDragMove(target, event);
							done = true;
							if (result !== true) {
								event.preventDefault();
								if (result === false) {
									event.stopPropagation();
								}
								break;
							}
						}
					}
				}
				event.preventDefault();
				break;
			}
			target = target.parentNode;
		}
		if (!done && ddManager.ddAgent) {
			ddManager.ddAgent.onDragMouseMove(event.target, event);
			event.preventDefault();
			event.stopPropagation();
		}
	}

}

function _onUp(event) {
	var ddManager = document.site.ddManager;
	delete ddManager.dropableItem;
	if (ddManager.ddAgent) {
		ddManager.ddAgent.onDragMouseUp(event.target, _emulateEvent(event));
		ddManager.stop();
	}
}

exports.load = function() {
	keyboardManager.load();
	_bindFieldEvents();

	if (document.site.layoutSlot) {
		_layoutHandlers.mousedown = document.site.layoutSlot.addEventListener("mousedown", function(event) {
			_onDown(event);
		}, false);
		_layoutHandlers.touchstart = document.site.layoutSlot.addEventListener("touchstart", function(event) {
			_onDown(event);
		}, false);
		_layoutHandlers.mousemove = document.site.layoutSlot.addEventListener("mousemove", function(event) {
			_onMove(event);
		}, false);
		_layoutHandlers.touchmove = document.site.layoutSlot.addEventListener("touchmove", function(event) {
			_onMove(event);
		}, false);
		_layoutHandlers.mouseup = document.site.layoutSlot.addEventListener("mouseup", function(event) {
			_onUp(event);
		}, false);
		_layoutHandlers.touchend = document.site.layoutSlot.addEventListener("touchend", function(event) {
			_onUp(event);
		}, false);


		_layoutHandlers.mouseover = document.site.layoutSlot.addEventListener("mouseover", function(event) {
			_onMouseItemInOut(document.site.layoutSlot, event);
		}, false);
		_layoutHandlers.mouseout = document.site.layoutSlot.addEventListener("mouseout", function(event) {
			_onMouseItemInOut(document.site.layoutSlot, event);
		}, false);
		_layoutHandlers.click = document.site.layoutSlot.addEventListener("click", function(event, data) {
			try {
				var article;
				var target = event.target;
				var site = document.site;
				var done, isDesignSelected;
				while (target && target != this) {
					if (target.syraSiteObserver) {
						var observer = site[target.syraSiteObserver];
						if (observer[target.syraOnClick]) {
							observer[target.syraOnClick](target, event);
							done = true;
							break;
						}
					}
					if (target.syraOnClick && !event.syraOnClickTarget) {
						event.syraOnClickTarget = target;
					}
					if (target.syraItem || target.syraTool) {
						if (!target.syraIsDisabled) {
							var observer, item;
							if (target.syraTool) {
								observer = repository[target.syraTool];
								item = target;
								while (item && !item.syraItem) {
									item = item.parentNode;
								}
								item = item && repository[item];
							} else {
								observer = item = repository[target.syraItem];
							}
							article = item && (item.articleParent || item.page);
							if (!isDesignSelected && article && article.designer && article.designer.selectItem) {
								if (article.designer.isDesignedItem(item)) {
									article.designer.selectItem(item, true);
									isDesignSelected = true;
								}
							}
							if (observer && event.syraOnClickTarget) {
								if (observer[event.syraOnClickTarget.syraOnClick]) {
									if (!observer.$isDisabled) {
										observer[event.syraOnClickTarget.syraOnClick](event.syraOnClickTarget, event, data);
									}
									done = true;
								}
								if (done) {
									delete event.syraOnClickTarget;
									break;
								}
							}
						}
					}
					target = target.parentNode;
				}
				if (!done) {
					document.site.onBeforeClick(undefined, event);
					var mainPage = document.site.mainPage;
					if (mainPage && !mainPage.designer && mainPage.isFusionPage) {
						target = event.target;
						while (target) {
							if (target.syraItem) {
								return mainPage.externalAdapter.onGlobalClick(event);
							}
							target = target.parentNode;
						}
					}
				}
				if (!event.syraRetValue) {
					if (event.target.tagName != "INPUT") {
						event.preventDefault();
						event.stopPropagation();
					}
				}
			} catch (error) {
				document.site.onError(error);
			} finally {
				if (article && article.page) {
					article.page.registerLastFocusGrid(article);
				}
			}
		}, false);
	}

	_winHandlers.resize = window.addEventListener("resize", function(event) {
		_onSiteResizeEvent(event);
	});
	_winHandlers.orientationchange = window.addEventListener("orientationchange", function(event) {
		document.site && document.site.onSiteResizeEvent();
		_onSiteResizeEvent(event);
	});

	_bindMobile();
};

exports.dispose = function() {
	_clearWaitingResize();
	keyboardManager.dispose();
	var keys = Object.keys(_winHandlers);
	for (var ii = 0, jj = keys.length; ii < jj; ii++) {
		window.removeEventListener(keys[ii], _winHandlers[keys[ii]]);
	}
	if (document.site.layoutSlot) {
		keys = Object.keys(_layoutHandlers);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			document.site.layoutSlot.removeEventListener(keys[ii], _layoutHandlers[keys[ii]]);
		}
	}
	_layoutHandlers = _winHandlers = null;
	document.site.$$layoutSlot.unbind();
	document.site.$$layoutSlot.undelegate();
};