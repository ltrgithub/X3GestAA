"use strict";
var keyboardManager = require('syracuse-ui/lib/site/events/keyboardManager');

var _winHandlers = {};
var _layoutHandlers = {};
var _resizeTimeout;

function _bindFieldEvents() {
	document.site.$$layoutSlot.delegate("textarea,input,select,[contenteditable]", "mousedown change focusin focusout", function(event) {
		//if (this.syra_field_id) {
		var field = document.site.itemHelper.findField(this);
		if (field) {
			field.onFieldInputEvent(event);
			field.page.registerLastFocusGrid(field);
			event.stopPropagation();
		}
		//}
	}).delegate("a[data-s-field-binary]", "focusin focusout", function(event) {
		var field = document.site.itemHelper.findField(this);
		field.onFieldInputEvent(event);
		event.stopPropagation();
		return false;
	});
}

//onInputFieldMouseDown

function _bindSearchFacetEvents() {
	document.site.$$layoutSlot.delegate("input.s-search-facet-member-check,input.s-sv-search-facet-member-check", "change", function() {
		document.site.itemHelper.findArticle(this).onInputMemberChange(this);
		return false;
	});
}

function _onMouseItemInOut(root, event) {
	var onEnter = event.type == "mouseover";
	var target = event.target;
	var related = event.relatedTarget;
	while (target && target != root) {
		if (target.syrainout) {
			if (!related || (related !== target && !target.contains(related))) {
				repository[target.syrainout].onItemInOut(onEnter, event, target);
			}
		}
		target = target.parentNode;
	}
}

function _bindMobile() {
	return;
	document.body.addEventListener('touchmove', function(event) {
		event.preventDefault();
	}, false);
}

function _clearWaitingResize() {
	if (_resizeTimeout) {
		clearTimeout(_resizeTimeout);
		_resizeTimeout = null;
	}
}

function _onSiteResizeEvent(event) {
	if (!_resizeTimeout) {
		_resizeTimeout = setTimeout(function() {
			document.site.resize();
			_resizeTimeout = null;
		}, 100);
	}
}

function _onClick(target, event, data) {

}


exports.load = function() {
	keyboardManager.load();
	_bindFieldEvents();
	_bindSearchFacetEvents();

	if (document.site.layoutSlot) {
		_layoutHandlers.mouseover = document.site.layoutSlot.addEventListener("mouseover", function(event) {
			_onMouseItemInOut(document.site.layoutSlot, event);
		}, false);
		_layoutHandlers.mouseout = document.site.layoutSlot.addEventListener("mouseout", function(event) {
			_onMouseItemInOut(document.site.layoutSlot, event);
		}, false);
		_layoutHandlers.click = document.site.layoutSlot.addEventListener("click", function(event, data) {
			var target = event.target;
			var site = document.site;
			var done;
			while (target && target != this) {
				if (target.syraSiteObserver) {
					var observer = site[target.syraSiteObserver];
					if (observer[target.syraOnClick]) {
						observer[target.syraOnClick](target, event);
						break;
					}
				}
				if (target.syraOnClick && !event.syraOnClickTarget) {
					event.syraOnClickTarget = target;
				}
				if (target.syraItem || target.syraTool) {
					try {
						if (!target.syraIsDisabled) {
							var observer, item;
							if (target.syraTool) {
								observer = repository[target.syraTool];
								item = target;
								while (item && !item.syraItem) {
									item = item.parentNode;
								}
								item = item && repository[item];
							} else {
								observer = item = repository[target.syraItem];
							}
							var article = item && (item.articleParent || item.page);
							if (article && article.designer && article.designer.selectItem) {
								if (article.designer.isDesignedItem(item)) {
									article.designer.selectItem(item, true);
								}
							}
							if (event.syraOnClickTarget) {
								if (observer[event.syraOnClickTarget.syraOnClick]) {
									observer[event.syraOnClickTarget.syraOnClick](event.syraOnClickTarget, event, data);
									done = true;
								} else {
									observer.onClickPicker(event.syraOnClickTarget, event, data);
									done = true;
								}
								delete event.syraOnClickTarget;
							}
						}
					} catch (error) {
						document.site.onError(error);
					} finally {
						if (article && article.page) {
							article.page.registerLastFocusGrid(article);
						}
					}
					break;
				}
				target = target.parentNode;
			}
			if (!done) {
				document.site.onBeforClick(undefined, event);
				var mainPage = document.site.mainPage;
				if (mainPage && !mainPage.designer && mainPage.isFusionPage) {
					target = event.target;
					while (target) {
						if (target.syraItem) {
							return mainPage.externalAdapter.onGlobalClick(event);
						}
						target = target.parentNode;
					}
				}
			}
			if (!event.syraRetValue) {
				event.preventDefault();
				event.stopPropagation();
			}
		}, false);
	}

	_winHandlers.resize = window.addEventListener("resize", function(event) {
		_onSiteResizeEvent(event);
	});
	_winHandlers.orientationchange = window.addEventListener("orientationchange", function(event) {
		document.site && document.site.onSiteResizeEvent();
		_onSiteResizeEvent(event);
	});

	_bindMobile();
};

exports.dispose = function() {
	_clearWaitingResize();
	keyboardManager.dispose();
	var keys = Object.keys(_winHandlers);
	for (var ii = 0, jj = keys.length; ii < jj; ii++) {
		window.removeEventListener(keys[ii], _winHandlers[keys[ii]]);
	}
	if (document.site.layoutSlot) {
		keys = Object.keys(_layoutHandlers);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			document.site.layoutSlot.removeEventListener(keys[ii], _layoutHandlers[keys[ii]]);
		}
	}
	_layoutHandlers = _winHandlers = null;
	document.site.$$layoutSlot.unbind();
	document.site.$$layoutSlot.undelegate();
};