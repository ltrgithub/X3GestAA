"use strict";

function _loadChildItems(layout, items, index) {
	if (layout.isRow && index != undefined) {
		var lastItem = layout.items[index];
		if (!lastItem && items.length > 1) {
			exports.wrapIntack(layout, items, index);
			return;
		} else {
			if (lastItem && !lastItem.isLayout) {
				var stack = exports.wrapIntack(layout, [lastItem], index);
				_loadChildItems(stack, items);
				return;
			}
		}
	}
	for (var ii = 0, jj = items.length; ii < jj; ii++) {
		var item = items[ii];
		layout.loadChildItem(item, null, index);
	}
}

exports.setChildAuhtoringLevel = function(layout) {
	if (layout.boxParent.$designLevel == "block") {
		layout.$chilAuthoringLevel = "field";
	} else {
		var children = layout.getItems();
		if (children.length > 0) {
			layout.$chilAuthoringLevel = children[0].$designLevel;
		} else {
			layout.$chilAuthoringLevel = layout.boxParent.$designLevel == "section" ? "block" : "section";
		}
	}
};

exports.extractItems = function(layout, children, addSpaceBox) {
	children = (children || layout.getItems()) || [];
	for (var ii = 0, jj = children.length; ii < jj; ii++) {
		if (!children[ii].isSpaceBox) {
			children[ii].layoutParent.extractItem(children[ii], addSpaceBox);
		}
	}
	return children;
};

exports.wrapIntack = function(layout, items, index) {
	var children = exports.extractItems(layout, items);
	var stack = layout.loadChildItem(null, {
		$layoutType: "stack",
		$items: []
	}, index);
	exports.newLoadChildItems(stack, children);
	return stack;
};


function _addNewItem(designedArticle, targetItem, $newAuthoringLevel, $bind, dropItem, $insertAt) {
	var newChild;
	var targetBoxParent = targetItem.boxParent;
	var targetItemIndex = targetItem.layoutParent ? targetItem.layoutParent.$layout.$items.indexOf(targetItem.$item) : undefined;
	var targetLayout;
	if ($insertAt !== "undefined") {
		if (targetItem.layoutParent) {
			switch (targetItem.layoutParent.$layout.$layoutType) {
				case "stack":
					switch ($insertAt) {
						case "bottom":
							targetItemIndex++;
							break;
						case "left":
						case "right":
							if (!(targetItem.isLayout && targetItem.$layout.$layoutType == "row")) {
								var rowLayout = targetItem.layoutParent.createChildItem({
									$layoutType: "row",
									$items: []
								}, null, targetItemIndex);
								_loadChildItems(rowLayout, [targetItem]);
								rowLayout.$layout.$widths = null;
								targetItemIndex = $insertAt == "left" ? 0 : 1;
							} else {
								targetItemIndex = $insertAt == "left" ? 0 : targetItem.items.length;
							}
							break;
					}
					break;
				case "row":
					switch ($insertAt) {
						case "top":
						case "bottom":
							if (targetItem.isSpaceBox) {
								//drop in an empty collumn
								targetLayout = targetItem.layoutParent;
								targetLayout.removeItem(targetItem, true);
								targetItem = targetLayout; //important 
							} else {
								//drop in row empty cell, wrap drop in stack
								exports.wrapIntack(targetItem.layoutParent, [targetItem], targetItemIndex);
								targetItemIndex = ($insertAt == "top") ? 0 : 1;
							}
							break;
						case "left":
						case "right":
							targetItem.layoutParent.$layout.$widths = null;
							if ($insertAt == "right") {
								targetItemIndex++;
							}
							break;
					}
					break;
				case "tabs":
					if ($insertAt == "right") {
						targetItemIndex++;
					}
					break;
			}
		}
	}
	targetLayout = targetLayout || targetItem.layoutParent;
	if (dropItem && dropItem.isLayout) {
		if (!targetLayout) {
			targetItemIndex = $insertAt == "top" ? 0 : 1;
			targetItem = exports.ensureHasParent(targetItem);
			targetLayout = targetItem.layoutParent;
		}
		newChild = targetLayout.loadChildItem(dropItem, null, targetItemIndex);
	} else {
		if (targetItem.isLayout) {
			exports.setChildAuhtoringLevel(targetItem);
		}
		var $targetAuthoringLevel = targetItem.$chilAuthoringLevel || targetItem.$designLevel;
		if (targetItem.isLayout) {
			$targetAuthoringLevel = targetItem.$chilAuthoringLevel;
			if (targetItem.isRow && ($insertAt == "left" || $insertAt == "right")) {
				targetLayout = targetItem;
			}
			if (!targetLayout) {
				targetItemIndex = $insertAt == "top" ? 0 : 1;
				targetItem = exports.ensureHasParent(targetItem);
				targetLayout = targetItem.layoutParent;
			}
		}
		if ($targetAuthoringLevel == "field") {
			if ($newAuthoringLevel == "field") {
				newChild = targetLayout.loadChildItem(dropItem, null, targetItemIndex);
			} else {
				//dragged section  
				if (dropItem.layoutContent) {
					_loadChildItems(targetLayout, dropItem.layoutContent.getFields(), targetItemIndex);
					if (dropItem.layoutParent) {
						dropItem.layoutParent.removeItem(dropItem, true);
					}
				} else {
					var $children = exports.getItemSettings(dropItem, null, true);
					for (var ii = 0, jj = $children.length; ii < jj; ii++) {
						targetLayout.createChildItem($children[ii], null, targetItemIndex);
					}
				}
				newChild = targetItem;
			}
		} else {
			if ($targetAuthoringLevel == "block" && $newAuthoringLevel == "section") {
				if (dropItem.layoutContent) {
					exports.setChildAuhtoringLevel(dropItem.layoutContent);
					if (dropItem.layoutContent.$chilAuthoringLevel == "block") {
						_loadChildItems(targetLayout, dropItem.layoutContent.getChildren(), targetItemIndex);
						newChild = targetItem.boxParent;
					} else {
						_loadChildItems(targetLayout, dropItem.layoutContent.getChildren(), targetItemIndex);
						if (dropItem.layoutParent) {
							dropItem.layoutParent.removeItem(dropItem, true);
						}
						newChild = targetLayout.boxParent;
					}
				} else {
					var $chilAuthoringLevel = "block";
					var $children = exports.getItemSettings(dropItem);
					if ($children.length > 0) {
						$chilAuthoringLevel = $children[0].$bind ? "field" : "block";
					}
					for (var ii = 0, jj = $children.length; ii < jj; ii++) {
						targetLayout.createChildItem($children[ii], null, targetItemIndex);
					}
					if ($chilAuthoringLevel == "block") {
						newChild = ($chilAuthoringLevel == "block") ? targetItem.boxParent : targetLayout.boxParent;
					}
				}
			} else {
				newChild = targetLayout.ensureSection(dropItem, targetItemIndex);
			}
		}
	}
	if (!newChild) {
		newChild = targetItem && targetItem.isSpaceBox;
		newChild = newChild || designedArticle;
	}
	if (targetItem && targetItem.isSpaceBox && targetItem.layoutParent) {
		targetItem.layoutParent.removeItem(targetItem, true, false);
	}
	if (dropItem && !dropItem.layoutParent && dropItem.articleParent) {
		dropItem.articleParent.removeItem(dropItem, true);
	}
	return newChild;
}

function _appendNewSectionNode(article, sectionNode) {
	for (var ii = 0, jj = sectionNode.garbage.length; ii < jj; ii++) {
		article.page.garbage.onAddField(sectionNode.garbage[ii]);
	}
	for (var ii = 0, jj = sectionNode.free.length; ii < jj; ii++) {
		article.page.garbage.onAddField(sectionNode.free[ii]);
	}
	if (sectionNode.children) {
		for (var ii = 0, jj = sectionNode.children.length; ii < jj; ii++) {
			var child = sectionNode.children[ii];
			if (child.garbage || child.free) {
				_appendNewSectionNode(article, child);
			}
		}
	}
}

function _loadAddNewItem(article, newAddItem) {
	var $item;
	if (newAddItem.$fieldBind) {
		if (newAddItem.$isFreeField) {
			article.page.garbage.onAddField(newAddItem.$fieldBind);
		}
		$item = {
			$bind: newAddItem.$fieldBind,
			$category: newAddItem.$fieldCategory || "field",
			$skin: newAddItem.$fieldSkin
		};
	} else {
		if (newAddItem.$field) {
			$item = {
				$category: "field",
				$field: newAddItem.$field
			};
		} else {
			if (newAddItem.sectionNode) {
				_appendNewSectionNode(article, newAddItem.sectionNode);
				if (newAddItem.sectionNode.loadedFields.length) {
					article.reloadingFields = article.reloadingFields || {};
					for (var ii = 0, jj = newAddItem.sectionNode.loadedFields.length; ii < jj; ii++) {
						var field = newAddItem.sectionNode.loadedFields[ii];
						if (field && field.$item && field.$item.$bind) {
							article.reloadingFields[field.$item.$bind] = field;
							field.layoutParent.extractItem(field);
						}
					}
				}
			}
			$item = newAddItem.$item || {
				$category: "section"
			};
			if (article.page.isFusionPage && $item.$layout) {
				$item.$layout = exports.cleanConvergenceSetting($item.$layout);
			}
		}
	}
	var newItem = article.page.createNewItem($item, article.page);
	newItem.$newAddItem = true;
	return newItem;
}

exports.getWidthValues = function(layout) {
	var widths;
	if (layout.$layout.$widths) {
		widths = layout.$layout.$widths.split(",");
		for (var ii = 0, jj = widths.length; ii < jj; ii++) {
			widths[ii] = parseInt(widths[ii], 10);
		}
	}
	return widths || [];
};

function _deleteRowColumn(layout, deletedIndex) {
	var widths = exports.getWidthValues(layout);
	var deletedWidth = widths[deletedIndex];
	var updatedIndex = Math.min(deletedIndex > 0 ? (deletedIndex - 1) : 1, widths.length - 1);
	widths[updatedIndex] += deletedWidth;
	widths.splice(deletedIndex, 1);
	layout.$layout.$widths = widths.join(",");
	if (layout.items.length == 1) {
		var updated;
		while (layout) {
			var children = layout.getChildren();
			var layoutParent = layout.layoutParent;
			if (layoutParent) {
				if (children.length == 1 && (layoutParent.isRow || layoutParent.items.length == 1)) {
					updated = layoutParent;
					var index = layoutParent.getChildIndex(layout);
					exports.extractItems(layout, children, false);
					layoutParent.removeItem(layout, true, false);
					layoutParent.loadChildItem(children[0], null, index);
					layout = layoutParent;
					continue;
				}
			}
			break;
		}
		if (!updated) {
			exports.convertToNewLayout(layout, {
				$layoutType: "stack",
				$width: "100"
			}, children);
			updated = layout;
		}
		syra_site.layoutValidator.validateLayout(updated.layoutParent, true);
	}
}

function _clearRootStackChildren(children, obsoleteLayouts) {
	var newChildren = [];
	if (children) {
		for (var ii = 0, jj = children.length; ii < jj; ii++) {
			var child = children[ii];
			if (child && child.isLayout && child.$item.$layoutType == "stack") {
				newChildren = newChildren.concat(exports.extractItems(child, child.getChildren()));
				obsoleteLayouts.push(child);
			} else {
				newChildren.push(child);
			}
		}
	}
	return newChildren;
}


exports.ensureHasParent = function(layout) {
	var $layoutType = layout.$layout.$layoutType,
		$widths = layout.$layout.$widths,
		$autoSize = layout.$layout.$autoSize;
	var boxParent = layout.boxParent;
	var children = exports.extractItems(layout, layout.getChildren());
	syra_site.dom.removeChild(layout.domItem);
	layout.dispose();
	boxParent.$item.$layout = {
		$layoutType: "stack",
		$items: [{
			$layoutType: $layoutType,
			$widths: $widths,
			$autoSize: $autoSize,
			$items: []
		}]
	};
	boxParent.renderLayoutContent();
	var layoutContent = boxParent.layoutContent.items[0];
	layoutContent.removeSpaceBox(true);
	exports.newLoadChildItems(layoutContent, children);
	return layoutContent;
};


exports.onAddNewItem = function(article, targetItem, newItem, $insertAt) {
	var newChild = newItem;
	if (newItem.$awAddNewItem) {
		newChild = _loadAddNewItem(article, newItem);
	}
	newChild = _addNewItem(article, targetItem, newItem.$designLevel, newItem.$bind, newChild, $insertAt);
	if (newItem.$designLevel == "field") {
		article.page.garbage.onAddField(newItem.$fieldBind || newItem.$vignette);
	}
	var section = newChild.boxParent;
	if (section.$item.$fieldsIsTopLabelAlignment !== undefined ||
		section.$item.$fieldsIsRightTextLabelAlignment !== undefined ||
		section.$item.$fieldsIsTitleHidden !== undefined ||
		section.$item.$fieldsIsTitleEmpty !== undefined) {
		if (newChild.isField) {
			section.applyDesignMetaDataToField(newChild, section.$item);
		} else {
			if (newChild.isSection) {
				newChild.applyDesignMetaData({
					$fieldsIsTopLabelAlignment: section.$item.$fieldsIsTopLabelAlignment,
					$fieldsIsRightTextLabelAlignment: section.$item.$fieldsIsRightTextLabelAlignment,
					$fieldsIsTitleHidden: section.$item.$fieldsIsTitleHidden,
					$fieldsIsTitleEmpty: section.$item.$fieldsIsTitleEmpty
				}, true);
			}
		}
	}
	delete article.reloadingFields;
	return newChild;
};

exports.newLoadChildItems = function(layout, children, start) {
	for (var ii = start || 0, jj = children.length; ii < jj; ii++) {
		var child = children[ii];
		if (child && child.articleParent && !child.disposed) {
			layout.loadChildItem(child);
		}
	}
};

exports.clearContent = function(layout) {
	if (layout._tabs) {
		syra_site.dom.removeChild(layout._tabs);
		delete layout._tabs;
	}
	while (layout.items.length > 0) {
		var item = layout.items[0];
		if (item.isLayout) {
			exports.clearContent(item);
		} else {
			if (item.layoutContent) {
				exports.clearContent(item.layoutContent);
			}
		}
		layout.removeItem(item, true);
	}
};

exports.convertToNewLayout = function(layout, $newLayout, children) {
	var children = children || layout.getChildren();
	exports.extractItems(layout, children); //, true);
	//Clear space old layout
	exports.clearContent(layout);

	var newChildren = [];
	if (children) {
		for (var ii = 0, jj = children.length; ii < jj; ii++) {
			var child = children[ii];
			if (child && child.articleParent && !child.disposed) {
				newChildren.push(child);
			}
		}
	}
	children = newChildren;
	delete layout.$layout.$autoSize;
	delete layout.$layout.$widths;
	layout.$layout.$autoSize = $newLayout.$autoSize;
	layout.$layout.$widths = $newLayout.$widths;
	layout.$layout.$layoutType = $newLayout.$layoutType;
	layout.ensureLayoutMode();
	var obsoleteLayouts = [];
	if (layout.isRow) {
		var widths = exports.getWidthValues(layout);
		if (children.length <= widths.length) {
			exports.newLoadChildItems(layout, children); //fill rows
		} else {
			for (var ii = 0, jj = widths.length - 1; ii < jj; ii++) {
				layout.loadChildItem(children.shift());
			}
			var stack = layout.loadChildItem(null, {
				$layoutType: "stack",
				$items: []
			});
			exports.newLoadChildItems(stack, _clearRootStackChildren(children, obsoleteLayouts)); //fill first row
		}
	} else {
		exports.newLoadChildItems(layout, _clearRootStackChildren(children, obsoleteLayouts));
	}
	for (var ii = 0, jj = obsoleteLayouts.length; ii < jj; ii++) {
		layout.removeItem(obsoleteLayouts[ii], true);
	}
};

exports.cleanConvergenceSetting = function($layout, $parentLayout) {
	if ($layout && $layout.$items) {
		if ($layout.$layoutType == "row") {
			if ($layout.$items && $layout.$items.length == 1) {
				$layout = $layout.$items[0];
				if ($layout.$layout) {
					$layout.$layout = exports.cleanConvergenceSetting($layout.$layout);
				} else {
					if ($layout.$layoutType) {
						$layout = exports.cleanConvergenceSetting($layout);
					}
				}
			}
		}
		if ($layout.$items) {
			for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
				var $child = $layout.$items[ii];
				if ($child.$layout) {
					$child.$layout = exports.cleanConvergenceSetting($child.$layout);
				} else {
					if ($child.$layoutType) {
						$layout.$items[ii] = exports.cleanConvergenceSetting($child);
					}
				}
			}
		}
	}
	return $layout;
};

exports.getItemSettings = function(box, $items, fieldOnly, found) {
	found = found || [];
	$items = $items || (box.$item && box.$item.$layout && box.$item.$layout.$items);
	if ($items) {
		for (var ii = 0, jj = $items.length; ii < jj; ii++) {
			var $item = $items[ii];
			if ($item.$bind) {
				found.push($item);
			} else {
				if ($item.$layout) {
					if (fieldOnly) {
						if ($item.$layout.$items) {
							found = exports.getItemSettings(box, $item.$layout.$items, fieldOnly, found);
						}
					} else {
						found.push($item);
					}
				} else {
					if ($item.$items) {
						found = exports.getItemSettings(box, $item.$items, fieldOnly, found);
					}
				}
			}
		}
	}
	return found;
};

exports.cleanBeforeSave = function($item) {
	if ($item) {
		delete $item.$tabIndex;
		if ($item.$layout) {
			exports.cleanBeforeSave($item.$layout);
		}
		if ($item.$items) {
			for (var ii = 0, jj = $item.$items.length; ii < jj; ii++) {
				exports.cleanBeforeSave($item.$items[ii]);
			}
		}
	}
	return $item;
};