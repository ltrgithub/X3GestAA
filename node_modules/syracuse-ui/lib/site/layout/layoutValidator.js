"use strict";
var helpers = require('syracuse-core/lib/helpers');

var _defaultWidths = {
	1: "100",
	2: "50,50",
	3: "33,33,33",
	4: "25,25,25,25",
	5: "20,20,20,20,20",
	6: "17,17,16,16,17,17"
};

exports.getDefaultWidths = function(count) {
	var widths = _defaultWidths[count];
	if (!widths) {
		var width = Math.ceil(100 / count);
		widths = [];
		for (var ii = 0; ii < count; ii++) {
			widths.push(width);
		}
		widths = widths.join(",");
	}
	return widths;
};

exports.removeRowSeparator = function(item) {
	if (item.rowSeparator) {
		syra_site.dom.removeChild(item.rowSeparator);
		delete item.rowSeparator;
	}
};


function _setSeparators(layout) {
	var prevItem, item;
	var skinSep = "s-slot-sep-" + layout.$layout.$layoutType;
	if (layout.boxParent.$skin) {
		skinSep += " " + layout.boxParent.$skin + "-sep-" + layout.$layout.$layoutType;
	}
	layout.rowSeparators = [];
	for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
		item = layout.items[ii];
		if (ii > 0) {
			if (!prevItem.rowSeparator) {
				prevItem.rowSeparator = document.createElement("div");
				prevItem.rowSeparator.syraSeparatorIndex = ii;
			}
			prevItem.rowSeparator.syraSepType = layout.$layout.$layoutType;
			prevItem.rowSeparator.className = skinSep;
			layout.ensureItemVisibility(prevItem);
			layout.rowSeparators.push(prevItem.rowSeparator);
			if (layout.isDesigned) {
				syra_site.dom.toggleClass(prevItem.rowSeparator, "s-aw-slot-sep-" + layout.$layout.$layoutType, true);
				prevItem.rowSeparator.syraDragSpot = layout.isRow ? prevItem.id : null;
				if (prevItem.isLayout) {
					prevItem.rowSeparator.syraDesignedLayout = prevItem;
				} else {
					prevItem.rowSeparator.syraDesignedItem = prevItem;
				}
			}
			item.layoutSlot.parentNode.insertBefore(prevItem.rowSeparator, item.layoutSlot);
			//exports.removeRowSeparator(item);
		}
		/* else {
         exports.removeRowSeparator(item);
         }*/
		prevItem = item;
	}
	item && exports.removeRowSeparator(item);
}


exports.setRowWidths = function(layout) {
	if (!layout.$layout.$widths) {
		layout.$layout.$widths = exports.getDefaultWidths(layout.items.length || 1);
	}
	var $widths = layout.$layout.$widths.split(",");
	for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
		var style = layout.items[ii].layoutSlot.style;
		if (layout.$layout.$isFixedWidth) {
			if ($widths[ii] != "*") {
				style.width = $widths[ii] + "px";
			}
		} else {
			style.width = $widths[ii] + "%";
		}
		if (layout.$layout.$rowAlign) {
			style.verticalAlign = layout.$layout.$rowAlign;
		}
	}
};

var _validators = {
	stack: function(layout) {
		layout.isRow = false;
		if (layout.isDesigned) {
			if (layout.items.length == 0) {
				layout.addSpaceBox();
			} else {
				for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
					if (layout.items[ii].isSpaceBox && jj > 1) {
						layout.removeSpaceBox();
						return true;
					}
				}
			}
		}
		for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
			var item = layout.items[ii];
			item.layoutSlot.style.width = "";
		}
		_setSeparators(layout);
		delete layout.$layout.$tabIndex;
		layout.$layout.$widths = "100";
		layout.domItem.style.width = "";
	},
	row: function(layout) {
		layout.isRow = true;
		if (!layout.$layout.$autoSize) {
			var $widths;
			layout.domItem.style.width = "100%";
			if (layout.$layout.$widths) {
				var $widths = layout.$layout.$widths.split(",");
				if ($widths.length > layout.items.length) {
					for (var ii = layout.items.length, jj = $widths.length; ii < jj; ii++) {
						layout.addSpaceBox();
					}
				}
				if ($widths.length != layout.items.length) {
					layout.$layout.$widths = exports.getDefaultWidths(layout.items.length);
				}
			} else {
				layout.$layout.$widths = exports.getDefaultWidths(layout.items.length);
			}
			exports.setRowWidths(layout);
		}
		_setSeparators(layout);
		delete layout.$layout.$tabIndex;
	},
	tabs: function(layout) {
		layout.isRow = false;
		layout.$layout.$widths = "100";
		layout.domItem.style.width = "";
		if (layout.items.length > 0) {
			//check visibility
			var firstVisible;
			var count = layout.items.length;
			if (layout.$layout.$tabIndex !== undefined && layout.$layout.$tabIndex >= count) {
				delete layout.$layout.$tabIndex;
			}
			for (var ii = count - 1; ii >= 0; ii--) {
				var item = layout.items[ii];
				if ((item.$opened && (ii != layout.$layout.$tabIndex)) || (item.isInvisible && !layout.isDesigned)) {
					item.openBox(false);
				}
				if (item.isInvisible && !layout.isDesigned) {
					if (layout.$layout.$tabIndex == ii) {
						delete layout.$layout.$tabIndex;
					}
				} else {
					firstVisible = ii;
				}
				exports.removeRowSeparator(item);
			}
			if (layout.$layout.$tabIndex === undefined) {
				layout.$layout.$tabIndex = firstVisible;
			}
			if (layout.$layout.$tabIndex !== undefined && !layout.items[layout.$layout.$tabIndex].$opened) {
				layout.items[layout.$layout.$tabIndex].openBox(true, true);
			} else {
				if (layout.$layout.$tabIndex === undefined) {
					delete layout.$layout.$tabIndex;
				}
			}
		}
	}
};

exports.validate = function(layout, parseTree) {
	if (layout) {
		if (layout.isDesigned = layout.articleParent.isDesigned) {
			if (layout.boxParent && layout.boxParent.$item.$isAuthoringEnabled === false) {
				layout.isDesigned = false;
			}
		}
		_validators[layout.$layout.$layoutType](layout);
		if (parseTree) {
			for (var ii = 0, jj = layout.items.length; ii < jj; ii++) {
				var item = layout.items[ii];
				exports.validate(item.isLayout ? item : item.layoutContent, parseTree);
			}
		}
		layout.isDesigned = false;
	}
};