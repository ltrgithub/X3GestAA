"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Dialog = require('./dialog').Dialog;
var MessageBox = require('syracuse-ui/lib/diagnoses/messageBox').MessageBox;
var SiteTopPanel = require("./aside/siteTopPanel").SiteTopPanel;
var ExternalAdapter = require("./aside/externalAdapter").ExternalAdapter;
var DragDrop = require("./aside/dragDrop").DragDrop;
var AuthorPage = require("./authoring/authorPage").AuthorPage;
var DiagnosesPanel = require('syracuse-ui/lib/diagnoses/diagnosesPanel').DiagnosesPanel;
var RawPage = require("syracuse-ui/lib/article/rawPage").RawPage;
var Controller = require('syracuse-ui/lib/controller/controller').Controller;
var searchRequest = require('./search/searchRequest');
var EventListener = require('./aside/eventListener').EventListener;
var SpyGateway = require('./aside/spyGateway').SpyGateway;
var locale = require('syracuse-core/lib/locale');

var _fieldSmartWidth = {
    charWidth: 8,
    small: 15,
    medium: 30,
    large: 50
};

var _fieldWidths = {
    "application/x-icon": {
        $width: 50
    },
    "application/x-date": {
        $maxLength: 10
    },
    "application/x-time": {
        $maxLength: 8
    },
    "application/x-datetime": {
        $maxLength: 20
    },
    "application/x-boolean": {
        $maxLength: 5
    },
    "image": {
        $width: 40
    }
};
function Site(){
}

exports.Site = helpers.defineClass(Site, RawPage, {
    dispose: function(){
        if (this.spyGateway) {
            this.spyGateway.dispose();
            delete this.spyGateway;
        }
        if (this.$$spy) {
            this.$$spy.unbind();
            delete this.spy;
        }
        delete this.lastFocusField;
        $(window).unbind();
        if (this.$$topPanelOpener) {
            this.$$topPanelOpener.unbind();
        }
        RawPage.prototype.dispose.call(this);
    },
    _focusBox: function(box, hasFocus){
        if (box) {
            var target = box._body;
            if (!target && box.$$item) {
                target = box.$$item[0];
            }
            if (target) {
                this.toggleClass(target, "s-selected-box", hasFocus);
            }
        }
    },
    onChildFieldFocus: function(boxParent, hasFocus){
        var self = this;
        if (boxParent) {
            if (hasFocus) {
                clearTimeout(self.focusBoxTimeOut);
                if (self.boxFocus != boxParent) {
                    self._focusBox(self.boxFocus, false);
                }
                self._focusBox(self.boxFocus = boxParent, true);
                
            }
            else {
                self.focusBoxTimeOut = setTimeout(function(){
                    self._focusBox(self.boxFocus, false);
                }, 500);
            }
        }
    },
    ensurePreferences: function(){
        return (this._preferences = this._preferences || {});
    },
    addResizeListener: function(listener){
        this.resizeListeners[listener.id] = listener;
    },
    removeResizeListener: function(listener){
        if (this.resizeListeners) {
            delete this.resizeListeners[listener.id];
        }
        
    },
    onBeforClick: function(){
        delete this.requestedDDAuthoringItem;
        if (this.DDAuthoring) {
            this.DDAuthoring.stop();
            delete this.DDAuthoring;
        }
    },
    
    formatHTMLMessage: function(message){
        return message.replace(/\n/g, "<BR/>");
    },
    showDiagnoses: function(message, item, options){
        if (item && item.page && item.page.diagnosesPanel) {
            item.page.diagnosesPanel.showDiagnoses(message, item, options);
        }
        else {
        
            if (this.diagnosesPanel) {
                this.diagnosesPanel.showDiagnoses(message, item, options);
            }
            else {
                if (this.mainPage) {
                    this.mainPage.showDiagnoses(message, options);
                }
            }
        }
    },
    logon: function(onAfterLogon){
        var self = this;
        if (self.userProfile) {
            document.controller.disposeObject(self.userProfile);
            self.userProfile = null;
        }
        self.userProfile = new (self.siteOptions.userProfileClass)();
        self.userProfile._initializePage();
        document.controller.loadWorkingCopy({
            menu: {
                $url: self.$item.$userProfileUrl
            },
            article: self.userProfile,
            callback: function(){
                self.developpementMode = (self.userProfile.dataset && self.userProfile.dataset.developpementMode);
                onAfterLogon();
            }
        });
    },
    getSessionId: function(){
        return helpers.http.parseCookie(document.cookie)["syracuse.sid"] || "";
    },
    showMessage: function(options){
        if (this._msgBox) {
            document.controller.disposeObject(this._msgBox);
        }
        options.$type = options.$type || "alert";
        this._msgBox = new MessageBox();
        // this._msgBox.$$container = $itemPage.$$container;
        this._msgBox.$prototype = {};
        this.initializeNewItem(this._msgBox, options);
        this._msgBox.loadBox();
    },
    _releaseMainPage: function(){
        var prev = this.mainPage;
        if (prev && prev.externalAdapter) {
            prev.externalAdapter.releaseMainPage({
                mainPage: prev,
                doEvent: function(){
                    setTimeout(function(){
                        document.controller.disposeObject(prev);
                    }, 10);
                }
            });
        }
        this.$$body.empty();
    },
    unload: function(){
        $(document).unbind();
        delete this.resizeListeners;
        document.controller.disposeObject(this._eventListener);
        document.controller.disposeObject(this);
        document.controller.disposeObject(document.controller);
        document.site = document.controller = null;
    },
    
    
    setZIndex: function(item){
        item.style.zIndex = this._zIndex++;
    },
    toggleClass: function(dom, css, show){
        if (show) {
            if (dom.className.indexOf(css) < 0) {
                dom.className += (" " + css);
            }
        }
        else {
            dom.className = dom.className.replace(css, "");
        }
    },
    toggleDom: function(dom){
        dom.style.display = this.isDomDisplay(dom) ? "none" : "";
    },
    isDomDisplay: function(dom){
        return dom.style.display != "none";
    },
    emptyDom: function(domNode){
        while (domNode.firstChild) {
            domNode.removeChild(domNode.firstChild);
        }
    },
    removeDomChild: function(child){
        if (child && child.parentNode) {
            child.parentNode.removeChild(child);
        }
    },
    disableItem: function(item, isDisabled){
        if (isDisabled) {
            item.setAttribute("disabled", isDisabled);
        }
        else {
            item.removeAttribute("disabled");
        }
        this.toggleClass(item, "s-disabled", isDisabled);
    },
    
    openHomeLink: function(){
        var self = this;
        setTimeout(function(){
            var homeLinks = self.menuItems.$home;
            if (homeLinks && homeLinks[0]) {
                homeLinks[0].click();
            }
        }, 20);
    },
    getFieldWidth: function($field, useSmartMode){
        var $width;
        if ($field.$type) {
            if ($field.$format) {
                $width = this._fieldWidths[$field.$type + $field.$format];
            }
            if (!$width) {
                $width = this._fieldWidths[$field.$type];
            }
        }
        if (!$width) {
            $width = {};
        }
        var widthValue = $width.$width;
        var $maxLength = 0;
        if ($field.$scale) {
            $maxLength = $field.$scale + 2 * ($field.$scale / 3); //separator
        }
        if ($field.$precision) {
            $maxLength += $field.$precision + 1; //for separator
        }
        if (!$maxLength) {
            $maxLength = $field.$displayLength || $field.$maxLength || $width.$maxLength;
        }
        if (useSmartMode) {
            $maxLength = $maxLength || _fieldSmartWidth.large;
            if ($maxLength <= _fieldSmartWidth.small) {
                $maxLength = _fieldSmartWidth.small;
            }
            else {
                if ($maxLength <= _fieldSmartWidth.medium) {
                    $maxLength = _fieldSmartWidth.medium;
                }
                else {
                    $maxLength = _fieldSmartWidth.large;
                }
            }
            widthValue = (_fieldSmartWidth.charWidth * $maxLength);
        }
        else {
            if (!widthValue) {
                $maxLength = Math.min(_fieldSmartWidth.medium, $maxLength || _fieldSmartWidth.medium);
                widthValue = (_fieldSmartWidth.charWidth * $maxLength);
            }
            
        }
        return widthValue;
    },
    setDraggable: function(source, $$hotspot){
        (new DragDrop()).setDraggable(source, $$hotspot);
    },
    onFieldFocusIn: function(field){
        this.lastFocusField = field;
    },
    notifyRequestSurvey: function(pendingRequests){
        if (!this.requestSurvey) {
            this.requestSurvey = document.createElement("div");
            this.requestSurvey.setAttribute("id", "s-site-request");
            this.setZIndex(this.requestSurvey);
            
            this.$$container[0].appendChild(this.requestSurvey);
            this.requestSurveyCount = document.createElement("label");
            this.requestSurveyCount.setAttribute("id", "s-site-request-count");
            this.requestSurvey.appendChild(this.requestSurveyCount);
        }
        pendingRequests = pendingRequests || 0;
        this.requestSurveyCount.textContent = pendingRequests;
        if (pendingRequests > 0) {
            if (this.requestSurvey.style.right != "0px") {
                this.requestSurvey.style.right = "0px";
            }
        }
        else {
            this.requestSurvey.style.right = "-80px";
        }
    },
    onMainPageChange: function($itemPage){
        if (!this.body) {
            this.body = this.$$body[0]; //hack temp for office
        }
        this.body.style.display = "none";
        $itemPage.boxParent = null;
        $itemPage.$$container = this.$$body;
        this._releaseMainPage();
        if (this._diagnosesPanel) {
            this._diagnosesPanel._emptyViewer();
        }
        this.toggleTopPanel(false);
        
        this.mainPage = this.loadNewPage($itemPage);
        this.mainPage.openerHttpQuery = $itemPage.httpQuery;
        this.mainPage.isMainPage = true;
        this.updateDocumentTitle();
        this.body.style.display = "";
        this.resize();
        document.site.spyGateway.setSpyedPage(this.mainPage);
        return this.mainPage;
    },
    drawBox: function(){
        var self = this;
        self._renderHeader();
        self.$$item = self.$$body = $(self.body = document.createElement("div"));
        self.body.setAttribute("id", "s-site-body");
        self.$$container[0].appendChild(self.body)
        self.logon(function(){
            document.controller.startNavigation();
            self._onLogon();
            self.$$container.show();
            self.resize();
        });
    },
    _onLogon: function(){
        // for office compatibility
    },
    updateDocumentTitle: function(){
        var title = this.mainPage.getTitle();
        if (title) {
            var record = this.userProfile.dataset;
            if (record) {
                if (record.selectedRole) {
                    title += " (" + record.selectedRole.description + ")";
                }
                if (record.selectedEndpoint) {
                    title += " (" + record.selectedEndpoint.description + ")";
                }
            }
            else {
                this.userProfile.$isTitleUpdateRequested = true;
            }
            this.mainPage.drawUserProfile(record);
            document.title = title;
        }
    },
    openAuthoringPage: function(open){
        if (open) {
            this.toggleTopPanel(false);
            this._header.style.display = "none";
            this.authorPage = new AuthorPage();
            this.authorPage._initializePage();
            this.authorPage.$$container = $(document.getElementById("s-site-author")).empty().show();
            this.authorPage.open();
        }
        else {
            this._header.style.display = "";
            this.authorPage.$$container.hide().empty();
            document.controller.disposeObject(this.authorPage);
            delete this.authorPage;
            this.resize();
        }
    },
    openDialog: function(options){
        var dialog = new Dialog();
        dialog.open(options);
        return dialog;
    },
    resize: function(){
        if (this.$$body && this.body) {
            var newHeight = 0;
            if (this._header) {
                var $$header = (this.authorPage) ? this.authorPage.$$container : this._$$header;
                newHeight = $$header.outerHeight(true);
            }
            this.body.style.height = (this.$$container.height() - newHeight) + "px";
        }
        if (this.resizeListeners) {
            var ids = Object.keys(this.resizeListeners);
            for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                this.resizeListeners[ids[ii]].onWindowResize();
            }
        }
    },
    toggleTopPanel: function(){
        if (this.topPanel) {
            this.$$topPanelOpener.click(); //Close
        }
    },
    _appendTopPanelOpener: function($$container, topPanelClass){
        var self = this;
        self.$$topPanelOpener = $("<a id='s-site-top-pn-opener-link'/>").attr("href", "#").bind("click", function(event){
            if (!self.topPanel) {
                self.topPanel = new (topPanelClass || SiteTopPanel)();
                self.topPanel.$prototype = self.$prototype;
                self.topPanel.page = self;
                self.topPanel.$$container = $(document.getElementById("s-site-top-pn")).empty().show();
                self.topPanel.loadBox();
            }
            else {
                self.topPanel.closePanel();
                delete self.topPanel;
            }
            self.$$topPanelOpener.toggleClass("s-open", self.topPanel != null);
            return false;
        }).appendTo($$container);
    },
    openSpy: function(){
        this.spyGateway.open();
    },
    appendSpy: function(div){
        var self = this;
        (self.$$spy = $(div)).bind("click", function(event){
            if (event.ctrlKey) {
                self.openSpy();
            }
            return false;
        });
    },
    _renderHeader: function(){
        this._$$header = $(this._header = document.createElement("header"));
        this._header.setAttribute("id", "s-site-header");
        this.setZIndex(this._header);
        
        var topLeft = document.createElement("div");
        topLeft.setAttribute("id", "s-site-header-top-left");
        this._header.appendChild(topLeft);
        
        var div = document.createElement("div");
        div.setAttribute("id", "s-site-sage");
        topLeft.appendChild(div);
        
        div = document.createElement("div");
        div.setAttribute("id", "s-site-module");
        div.textContent = this.$item.$module;
        topLeft.appendChild(div);
        //if (document.site.developpementMode) {
        
        this.appendSpy(div);
        //   }
        div = document.createElement("div");
        div.setAttribute("id", "s-site-favorites");
        
        var link = document.createElement("a");
        link.setAttribute("id", "s-site-favorites-link");
        link.setAttribute("href", "#");
        div.appendChild(link);
        topLeft.appendChild(div);
        
        var topRight = document.createElement("div");
        topRight.setAttribute("id", "s-site-header-top-right");
        this._header.appendChild(topRight);
        
        searchRequest.loadRequest($(topRight));
        
        div = document.createElement("div");
        div.setAttribute("id", "s-site-home");
        this.loadNewItem($(topRight.appendChild(div)), {
            $bind: "$home",
            $category: "link",
            $noText: true,
            $skin: "s-site-home-link"
        });
        
        div = document.createElement("div");
        div.setAttribute("id", "s-site-help");
        this.loadNewItem($(topRight.appendChild(div)), {
            $bind: "$help",
            $category: "link",
            $noText: true,
            $skin: "s-site-help-link"
        });
        
        div = document.createElement("aside");
        div.setAttribute("id", "s-site-author");
        this.$$container[0].appendChild(div);
        
        div = document.createElement("div");
        div.setAttribute("id", "s-fusion-sessions-opener");
        div.style.visibility = "hidden";
        this._header.appendChild(div);
        
        this._appendTopPanelOpener($(this._header));
        this.$$container[0].appendChild(this._header);
        
        div = document.createElement("div");
        div.setAttribute("id", "s-site-top-pn");
        this.$$container[0].appendChild(div);
    },
    
    loadBox: function(siteOptions){
        this.siteOptions = siteOptions;
        document.site = this;
        this.$autoFetch = false;
        this._childPageOffset = 1;
        this._initializePage();
        this.spyGateway = new SpyGateway();
        this._fieldWidths = siteOptions._fieldWidths || _fieldWidths;
        (document.controller = new (this.siteOptions.controllerClass || Controller)()).initialize();
        
        if (this.siteOptions.fusionGatewayClass) {
            document.controller.fusionGateway = new this.siteOptions.fusionGatewayClass();
        }
        this.requestControllers = {
            http: require("syracuse-ui/lib/controller/httpController")
        }
        this.agents = {};
        this.resizeListeners = {};
        this.externalAdapter = new ExternalAdapter();
        this._zIndex = 100;
        $(window).unload = function(){
            if (document.site) {
                document.site.unload();
            }
        };
        this.$$container = $("#s-site");
        (this._eventListener = new EventListener()).load();
        this.$prototype = this.siteOptions.$prototype;
        this.initializeNewItem(this, this.siteOptions.$item);
        RawPage.prototype.loadBox.call(this);
        window.onerror = this.onUncaughtError; // uncaught exception handler
        window.onbeforeunload = this.onBeforeUnload; // handler for session closing in case of page leaving or refresh (triggered before unload, cancelable)
        window.onunload = this.onUnload; // handler in case of page leaving or refresh (triggered after onbeforeunload, not cancelable)
        return this;
    },
    onBeforeUnload: function(event, logout){
        var self = document.site;
        if (!logout) {
            var localize = locale.resources(module)();
            // if some convergence sessions opened, user is warned
            if (document.controller && document.controller.fusionGateway && document.controller.fusionGateway._books) {
                self.books = document.controller.fusionGateway._books;
                var booksNb = self.books.length;
                if (booksNb > 0) {
                    // alert message is shown according to the browser
                    var alertMsg = localize.s_unload_alert.replace("{booksNb}", booksNb);
                    switch (self.getBrowserName().toLowerCase()) {
                        case "firefox": // display alert text in diagnoses panel before browser alert box
                            self.showDiagnoses({
                                $diagnoses: [{
                                    "severity": "error",
                                    "message": alertMsg
                                }],
                                autoHide: {
                                    "autoHide.autoHideTimeOut": 1000
                                }
                            });
                            return alertMsg;
                        case "chrome": // display alert text in browser alert box
                        case "safari":
                        case "msie":
                            var ee = event || window.event;
                            if (ee) {
                                ee.returnValue = alertMsg;
                            }
                            return alertMsg;
                        default: // both alert display methods 
                            self.showDiagnoses({
                                $diagnoses: [{
                                    "severity": "error",
                                    "message": alertMsg
                                }]
                            });
                            var ee = event || window.event;
                            if (ee) {
                                ee.returnValue = alertMsg;
                            }
                            return alertMsg;
                    }
                }
            }
        }
        else {
            //TODO
            // send ACK_TERM. If OK --> keep login out. If NOK, stay in the page.     
        }
    },
    onUnload: function(){
        //TODO
        /*
         var self = document.site;
         if (self.books && self.books.length > 0) {
         // send ACK_TERM to all convergence sessions
         }*/
    },
    getBrowserName: function(){
        var N = navigator.appName, ua = navigator.userAgent;
        var M = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
        M = M ? M[1] : N;
        return M;
    },
    onUncaughtError: function(errorMsg, url, lineNumber, error){
        var options;
        if (document.site.mainPage) {
            options = {
                errorMsg: errorMsg,
                url: url,
                lineNumber: lineNumber,
                error: error,
                doEvent: function(){
                    // diagnose component will be improved, with specific msg and stack properties
                    var $diagnose = {};
                    $diagnose.message = options.errorMsg;
                    $diagnose.message += error ? "\nStack:\n" + error.stack : "";
                    $diagnose.severity = "alert";
                    document.site.showDiagnoses({
                        $diagnoses: [$diagnose]
                    });
                }
            }
            document.site.mainPage.externalAdapter.onUncaughtError(options);
        }
        else {
            //debugger; //TODO  
        }
    },
    onError: function(error){
        this.onUncaughtError(error.message, error.fileName, error.lineNumber, error);
    },
    loadNewPage: function($itemPage){
        var $pageCategory = ($itemPage.$representation.$article ? $itemPage.$representation.$article.$category : null) || $itemPage.$category;
        $pageCategory = $pageCategory || ($itemPage.$urlParts.$facet == "$dashboard" ? "dashboard" : "page");
        var item = new ($itemPage.$pageCategoryClass || this.siteOptions.widgetsLibrary.pageCategories[$pageCategory] || this.siteOptions.widgetsLibrary.defaultPageCategory)();
        item.id = this._childPageOffset++;
        item.$pageCategory = $pageCategory;
        item.$isResizeEnabled = $itemPage.$isResizeEnabled;
        item.$isSearchFacetEnabled = $itemPage.$isSearchFacetEnabled;
        item.$authorUrl = $itemPage.$representation.$authorUrl;
        item.$urlParts = $itemPage.$urlParts;
        item.$facet = $itemPage.$urlParts.$facet;
        item.$isEditMode = $itemPage.$isEditMode || item.$facet == "$edit";
        var hackFusion = item.$facet.split("_");
        if (hackFusion.length > 1 && hackFusion[0] == "$fusion") {
            //temp hack
            item.$isEditMode = true;
            item.$facet = hackFusion[1];
            item.$fusionPageMeta = $itemPage.$fusionPageMeta;
        }
        item.$$container = $itemPage.$$container;
        item.$prototype = $itemPage.$representation.$prototype;
        var $article = $itemPage.$representation.$article || $itemPage.$representation.$prototype.$article;
        this.initializeNewItem(item, this.ensureDefaultArticle($article, item.$prototype), $itemPage.boxParent);
        item.$item.externalAdapter = $itemPage.externalAdapter;
        item.$autoFetch = ($itemPage.$autoFetch !== false) && ($itemPage.initData == null);
        if ($itemPage.onBeforeLoadPage) {
            $itemPage.onBeforeLoadPage(item);
        }
        if ($itemPage.httpQuery && $itemPage.httpQuery.$urlParts) {
            item.$urlParams = $itemPage.httpQuery.$urlParts.params;
        }
        item.loadBox($itemPage.initData);
        $itemPage.$pageCategoryClass = $itemPage.boxParent = $itemPage.$$container = $itemPage.$representation = $itemPage.onBeforeLoadPage = null;
        return item;
    },
    ensureDefaultArticle: function($article, $prototype){
        if (!$article) {
            var $items = [];
            var binds = Object.keys($prototype.$properties);
            for (var ii = 0, jj = binds.length; ii < jj; ii++) {
                $items.push({
                    $bind: binds[ii]
                });
            }
            $article = {
                $layout: {
                    $items: [{
                        $category: "section",
                        $layout: {
                            $items: $items
                        }
                    }]
                }
            };
        }
        return $article;
    }
});

exports.load = function($item, $prototype){
    return (new Site()).loadBox({
        widgetsLibrary: require('./widgetsLibrary'),
        fusionGatewayClass: require('syracuse-ui/lib/fusion/fusionGateway').FusionGateway,
        userProfileClass: require('./userProfile').UserProfile,
        $item: $item,
        $prototype: $prototype
    });
};
