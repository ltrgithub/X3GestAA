"use strict";
var helpers = require('syracuse-core/lib/helpers');
var dialogManager = require('syracuse-ui/lib/dialog/dialogManager');
var MessageBox = require('syracuse-ui/lib/diagnoses/messageBox').MessageBox;

var ExternalAdapter = require("./aside/externalAdapter").ExternalAdapter;
var diagnoseManager = require('syracuse-ui/lib/diagnoses/diagnosesPanel');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var Controller = require('syracuse-ui/lib/controller/controller').Controller;
var searchRequest = require('./search/searchRequest');
var eventListener = require('./events/eventListener');

var locale = require('syracuse-core/lib/locale');
//var localizationConverter = require('syracuse-ui/lib/localization/localizationConverter');
var JobSyra = require('syracuse-ui/lib/jobs/jobHandlerSyra').JobHandlerSyra;
var siteFunctions = require("syracuse-ui/lib/site/tools/siteFunctions");
var pageLoader = require("syracuse-ui/lib/site/tools/pageLoader");

var deltaManager = require('syracuse-ui/lib/page/delta/deltaManager');
var fusionGatewayClass = require('syracuse-ui/lib/fusion/fusionGateway').FusionGateway;
var UserProfile = require('./userProfile').UserProfile;
var layoutValidator = require("syracuse-ui/lib/site/layout/layoutValidator");
var layoutUpdater = require("syracuse-ui/lib/site/layout/layoutUpdater");
var expressionMaker = require('./tools/expressionMaker');
var localizer = require('syracuse-ui/lib/localization/localizer');
var urlMaker = require('syracuse-ui/lib/site/url/urlMaker');
var history = require('syracuse-ui/lib/site/url/history');
var filterMaker = require('syracuse-ui/lib/site/filter/filterMaker');
var domHelper = require('syracuse-ui/lib/site/tools/domHelper');
var uiLocker = require('syracuse-ui/lib/site/tools/uiLocker');
var browser = require('syracuse-ui/lib/site/tools/browser');
var diagnosesPage = require('syracuse-ui/lib/diagnoses/diagnosesPage');

window.repository = {};

function Site() {}

exports.Site = helpers.defineClass(Site, RawPage, {
	findArticle: function(dom) {
		while (dom != null) {
			if (dom.syraarticle) {
				return repository[dom.syraarticle];
			}
			dom = dom.parentNode;
		}
	},
	findField: function(dom) {
		var field;
		while (dom != null) {
			if (dom.syraItem) {
				field = repository[dom.syraItem];
				if (!field || (field && field.isField)) {
					break;
				}
			}
			dom = dom.parentNode;
		}
		return field;
	},
	checkMainPageBookmarkStatus: function() {
		if (this.bookmarksManager) {
			this.bookmarksManager.checkMainPageStatus();
		}
	},
	designArticle: function(open, article, classDesigner) {
		if (open) {
			article.designer = new(classDesigner)();
			article.designer.openDesigner(article);
		} else {
			if (article.designer) {
				article.page.showDiagnoses({
					$diagnoses: null
				});
				article.designer.dispose();
			}
			article.designer = null;
		}
	},

	setSpecificAttributes: function(dom, specificity) {
		if (dom) {
			switch (specificity) {
				case "disableSpellCheck":
					dom.setAttribute("spellcheck", false);
					break;
				case "disableAutoCorrect":
					dom.setAttribute("autocorrect", "off");
					break;
				default:
					dom.setAttribute("spellcheck", false);
					dom.setAttribute("autocorrect", "off");
			}
		}
	},
	randomStr: function(m) {
		var m = m || 9,
			s = '',
			r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
		for (var i = 0; i < m; i++) {
			s += r.charAt(Math.floor(Math.random() * r.length));
		}
		return s;
	},
	logout: function() {
		var self = this;
		self.fusionGateway &&
			self.fusionGateway.onUserActionUnload(function() {
				syra_controller.postQuery({
					$title: self.localize.siteLogout,
					$method: "POST",
					$url: "/logout",
					httpHeaders: {
						authorization: "basic"
					}
				}, null, null, function($location, data) {
					// return to login page (or to the logout location)
					self.hasDoneLogOut = true;
					window.open($location.$url, "_self");
				});
			}, null, "logout");
	},

	onMenuClick: function(menuItem) {
		var res = true;
		if (this.bookmarksManager) {
			res = this.bookmarksManager.onMenuClick(menuItem);
		}
		if (menuItem.$bind && menuItem.$bind == '$help') {
			siteFunctions.openHelpPopup(menuItem);
			res = false;
		}
		if (menuItem.$bind == "$legal") {
			siteFunctions.openLegalPage(menuItem);
			res = false;
		}
		return res;
	},
	dispose: function() {
		eventListener.dispose();
		this.fusionGateway && this.fusionGateway.dispose();
		this.dialogManager && this.dialogManager.dispose();
		this.uiLocker && this.uiLocker.dispose();

		siteFunctions.dispose(this);

		syra_controller && syra_controller.dispose();
		RawPage.prototype.dispose.call(this);

		this.diagnosesPage = this.pageLoader = this.siteFunctions = this.browser = this.uiLocker = this.dom = this.layoutUpdater = this.layoutValidator = null;
		this.history = this.urlMaker = this.filterMaker = this.screenDesigners = this.fusionHeaderFunctionLink = this.homeLink = null;
		this._jobsViewerOpener = this.fusionHeader = this.fusionHeaderHomeLink = null;
		this.fusionGateway = null;
		this.headerLogo = this.headerTop = this.wcReqArray = this.bookmarks = null;

		this.expressionMaker = this.deltaManager = this.diagnoseManager = this.localizer = window.onerror = window.onbeforeunload = window.onunload = null;

		window.syra_site = window.syra_controller = null;
	},
	_focusBox: function(box, hasFocus) {
		if (box) {
			var target = box.layoutSlot || box.body;
			if (!target && box.domItem) {
				target = box.domItem;
			}
			if (target) {
				if (box != box.page) {
					this.dom.toggleClass(target, "s-selected-box", hasFocus);
				}
			}
		}
	},
	registerJobSyra: function($location, $state, $title, uuid) {
		var job = new JobSyra();
		var jobParams = {
			$location: $location,
			$state: $state,
			title: $title,
			uuid: uuid,
			kind: "operation"
		};
		job.register(jobParams);
	},
	onBeforeClick: function(box, event) {
		siteFunctions.toggleTopPanel(false, event, true);
		if (event && event.type != "scroll") {
			syra_dd.stop();
		}
		this.dialogManager.closePopups(box, event);
	},

	formatHTMLText: function(message) {
		return message.replace(/\n/g, "<BR/>");
	},
	showDiagnoses: function(message, item, options) {
		if (item && item.page) {
			var diagnosePage = item.page.diagnosePage || item.page;
			if (diagnosePage.diagnosesPanel) {
				diagnosePage.diagnosesPanel.showDiagnoses(message, item.page, options);
			} else {
				diagnosePage.showDiagnoses(message, options);
			}
		} else {
			if (this.diagnosesPanel) {
				this.diagnosesPanel.showDiagnoses(message, item, options);
			} else {
				if (this.mainPage) {
					this.mainPage.showDiagnoses(message, options);
				} else { // default: message box
					var options = {};
					var onlyOneDiagnose = message.$diagnoses.length == 1;
					options.$message = (onlyOneDiagnose && message.$diagnoses[0].$message) || this.localize.userProfile_siteMsgboxMsg;
					options.$type = "alert";
					options.$buttons = "ok";
					options.$title = this.localize.siteMsgboxTitle;
					options.$diagnoses = message.$diagnoses;
					options.$origin = onlyOneDiagnose ? message.$diagnoses[0].$origin : "";
					this.showMessage(options);
				}
			}
		}
	},
	logon: function(onAfterLogon) {
		var self = this;
		var prevdataset;
		if (self.userProfile) {
			prevdataset = self.userProfile.buildWCContent();
			self.userProfile.dispose(self.userProfile);
			self.userProfile = null;
		}
		self.userProfile = new UserProfile();
		self.userProfile.dataset = {}; //important
		self.userProfile.isSiteRegisterDisabled = true;
		self.pageLoader.initialize(self.userProfile);
		self.userProfile.onLogonProcessing = true;
		syra_controller.loadWorkingCopy({
			menu: {
				$url: self.userProfile.getLogonUrl(),
				sendData: prevdataset
			},
			article: self.userProfile,
			callback: function() {
				if (!self.userProfile.hasLogonFailed) {
					self.userProfile.onLogonSucees();
					locale.setCurrent(function(err) {
						self.localize = locale.resources(module)();
						self.dataset.language = self.dataset.helpLanguage = self.localizer.getLanguage() || "";
						var ids = ["documentation", "shortcuts", "legal", "help", "home", "navigation"];
						for (var ii = ids.length - 1; ii >= 0; ii--) {
							var $menu = self.$menus["$" + ids[ii]];
							if ($menu) {
								$menu.$title = self.localize["site_link_" + ids[ii]] || "";
							}
						}
						self._renderHeader();
						self.siteFunctions.showUserIdentity();
						onAfterLogon();
						delete self.userProfile.onLogonProcessing;
					}, self.userProfile.currentLangCode, self.userProfile.dataset.selectedLocale);
				}
			}
		});

	},


	getSessionId: function() {
		return helpers.http.parseCookie(document.cookie)["syracuse.sid." + window.location.port] || "";
	},
	showMessage: function(options, displayDisabled) {
		if (this.messageBox) {
			this.messageBox.dispose();
		}
		options.$type = options.$type || "alert";
		this.messageBox = new MessageBox();
		this.messageBox.$prototype = {};
		this.messageBox.displayDisabled = displayDisabled; // property necessary for htmleditor msgbox
		this.initializeNewItem(this.messageBox, options);
		this.messageBox.loadBox();
	},

	unload: function() {
		this.dispose();
	},
	_getHomeMenu: function() {
		if (this.menuItems && this.menuItems.$home) {
			return this.menuItems.$home[0];
		}
		return null;
	},
	gotoNavigationPage: function() {
		this.clickMenu("$navigation");
	},
	gotoHome: function() {
		this.clickMenu("$home");
	},
	gotoHelp: function() {
		this.clickMenu("$help");
	},
	notifyRequestSurvey: function(pendingRequests) {
		if (!this.requestSurvey) {
			this.requestSurvey = document.createElement("div");
			this.requestSurvey.id = "s-site-request";
			this.dom.setZIndex(this.requestSurvey);

			this.layoutSlot.appendChild(this.requestSurvey);
			this.requestSurveyCount = document.createElement("label");
			this.requestSurveyCount.id = "s-site-request-count";
			this.requestSurvey.appendChild(this.requestSurveyCount);
		}
		pendingRequests = pendingRequests || 0;
		this.requestSurveyCount.textContent = pendingRequests;
		if (pendingRequests > 0) {
			if (this.requestSurvey.style.right != "0px") {
				this.requestSurvey.style.right = "0px";
			}
		} else {
			this.requestSurvey.style.right = "-80px";
		}
	},
	resetMainPage: function() {
		siteFunctions.toggleTopPanel(false);
		var prev = this.mainPage;
		if (prev && prev.externalAdapter) {
			prev.externalAdapter.releaseMainPage({
				mainPage: prev,
				doEvent: function() {
					prev.dispose && prev.dispose();
				}
			});
		}
		this.dom.empty(this.body);
		this.diagnosesPanel && this.diagnosesPanel.clean();
	},
	onMainPageChange: function($itemPage) {
		this.body.style.display = "none";
		$itemPage.boxParent = null;
		$itemPage.layoutSlot = this.body;
		this.resetMainPage();

		this.mainPage = this.pageLoader.load($itemPage, true);
		this.mainPage.openerUrlSegments = $itemPage.openerUrlSegments;
		this.mainPage.isMainPage = true;
		this.spyer.setSpyedPage(this.mainPage);
		this.lastOpenedMainPageUrlSegments = this.mainPage.openerUrlSegments;
		return this.mainPage;
	},

	drawBox: function() {
		var self = this;
		siteFunctions.addDragDropManager();
		self.domItem = self.body = document.createElement("div");
		self.body.id = "s-site-body";
		self.body.setAttribute("tabindex", "1"); // add for receive keyboard event  for shortcut
		self.layoutSlot.appendChild(self.body);
		self.logon(function() {
			self._onAfterLogon();
		});
	},
	_onAfterLogon: function() {
		this.layoutSlot.style.display = "";
		this.resize();
		syra_site.history.start();
		if (this.bookmarksManager) {
			this.bookmarksManager.loadBookmarks();
		}
	},

	getPreferences: function(key, defaultValues, target) {
		var values = this.userProfile.dataset.sitePreferences;
		if (values) {
			values = (values[this.$item.$device] || {})[key];
		}
		if (values === undefined && this.$item.$preferences) {
			values = this.$item.$preferences[key];
		}
		values = values || {};
		if (defaultValues) {
			var keys = Object.keys(defaultValues);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				if (values[keys[ii]] === undefined) {
					values[keys[ii]] = defaultValues[keys[ii]];
				}
			}
		}
		if (target) {
			this.applyValues(target, values);
		}
		return values;
	},
	setPreferences: function(key, source, props) {
		var sitePreferences = this.userProfile.dataset.sitePreferences = this.userProfile.dataset.sitePreferences || {};
		var preferences = sitePreferences[this.$item.$device] = sitePreferences[this.$item.$device] || {};
		if (props) {
			this.applyValues(preferences[key] = preferences[key] || {}, source, props);
		} else {
			preferences[key] = source;
		}
		this.userProfile.saveSitePreferences();
	},
	applyValues: function(target, values, keys) {
		if (target) {
			keys = keys || Object.keys(values);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				target[keys[ii]] = values[keys[ii]];
			}
		}
	},

	registerScreenDesigner: function(add, designer) {
		if (add) {
			if (!this.screenDesigners) {
				this.screenDesigners = [];
			} else {
				var top = this.screenDesigners && this.screenDesigners.length && this.screenDesigners[this.screenDesigners.length - 1];
				if (top) {
					top.onTopScreenDesigner(false);
				}
			}
			this.header.style.display = "none";
			this.screenDesigners.push(designer);
		} else {
			if (this.screenDesigners) {
				var index = this.screenDesigners.indexOf(designer);
				if (index >= 0) {
					this.screenDesigners.splice(index, 1);
				}
				if (this.screenDesigners.length == 0) {
					delete this.screenDesigners;
					this.header.style.display = "";
				} else {
					var top = this.screenDesigners && this.screenDesigners.length && this.screenDesigners[this.screenDesigners.length - 1];
					if (top) {
						top.onTopScreenDesigner(true);
					}
				}
			}
		}
	},

	resize: function(onBoxToggle) {
		this.bodyRect = this.layoutRect = null;
		if (this.body) {
			var bodyRect = this.dom.getBoundingClientRect(this.body);
			this.body.style.height = (this.getLayoutSize().height - bodyRect.top) + "px";
		}
		this.pageLoader.resize();

		if (this.bookmarksManager) {
			this.bookmarksManager.onResize();
		}
		this.uiLocker.ensureLock();
	},

	closeSearchFieldPopup: function() {
		this.searchField.searchField && this.searchField.searchField._autoCompletePopup && this.searchField.searchField._autoCompletePopup.close();
	},
	_renderHeader: function() {
		this.header = document.createElement("header");
		this.header.id = "s-site-header";
		this.layoutSlot.insertBefore(this.header, this.layoutSlot.firstChild);

		// top right
		this.headerTop = document.createElement("div");
		this.headerTop.id = "s-site-header-top";

		this.siteHelpLink = this.loadNewItem(this.headerTop, {
			$clientId: "s-site-help-link",
			$bind: "$help",
			$category: "link",
			$noText: true,
			$skin: "s-site-help-link"
		});

		siteFunctions.addPageDesignerOpener();

		var middleCell = document.createElement("div");
		middleCell.id = "s-site-header-middle-cell";
		this.headerTop.appendChild(middleCell);

		siteFunctions.addJobsOpener(middleCell);

		this.setArticleId(this.layoutSlot);
		siteFunctions.appendTopPanelOpener(middleCell);

		siteFunctions.addLogoutButton(this);

		this.homeLink = this.loadNewItem(this.headerTop, {
			$bind: "$home",
			$category: "link",
			$noText: true,
			$skin: "s-site-home"
		});

		this.navigationLink = this.loadNewItem(this.headerTop, {
			$bind: "$navigation",
			$category: "link",
			$noText: true,
			$skin: "s-site-navigation"
		});

		this.searchField = searchRequest.loadRequest(this.headerTop);
		this.header.appendChild(this.headerTop);

		this.headerBottom = document.createElement("div");
		this.headerBottom.id = "s-site-header-bottom";

		siteFunctions.addLogo(this.headerBottom);

		siteFunctions.addBookmarkManager();

		this.header.appendChild(this.headerBottom);
	},
	loadBox: function(siteOptions) {
		this.isSiteRegisterDisabled = true;
		this.pageLoader = pageLoader;
		this.siteFunctions = siteFunctions;
		this.diagnosesPage = diagnosesPage;
		this.browser = browser;
		this.uiLocker = uiLocker;
		this.dom = domHelper;
		this.layoutUpdater = layoutUpdater;
		this.layoutValidator = layoutValidator;
		this.diagnoseManager = diagnoseManager;
		this.deltaManager = deltaManager;
		this.expressionMaker = expressionMaker;
		this.dialogManager = dialogManager;
		this.urlMaker = urlMaker;
		this.filterMaker = filterMaker;
		this.history = history;
		this.localizer = localizer;

		this.siteOptions = siteOptions;
		window.syra_site = this;
		this.localize = locale.resources(module)();
		this._childPageOffset = 1;
		this.pageLoader.initialize(this);
		siteFunctions.loadSpyer();
		window.syra_controller = new(this.siteOptions.controllerClass || Controller)();

		if (this.siteOptions.fusionGatewayClass) {
			this.fusionGateway = new this.siteOptions.fusionGatewayClass();
			this.fusionGateway.initialize();
		}
		this.requestControllers = {
			http: require("syracuse-ui/lib/controller/httpController")
		};
		this.agents = {};
		this.externalAdapter = new ExternalAdapter();

		this.layoutSlot = document.getElementById("s-site");
		this.layoutSlot.style.display = "none";
		eventListener.load();

		this.$prototype = this.siteOptions.$prototype;
		this.initializeNewItem(this, this.siteOptions.$item);
		this.isTabletDevice = this.$item.$device == "tablet";
		this.setArticleId(this.layoutSlot);
		RawPage.prototype.loadBox.call(this);
		if (this.headerLogo) {
			var homeMenu = this._getHomeMenu();
			if (homeMenu) {
				this.headerLogo.title = homeMenu.domItem.title;
				this.headerLogo.setAttribute("href", homeMenu.domItem.getAttribute("href"));
			}
		}
		return this;
	},
	onUncaughtError: function(errorMsg, url, lineNumber, error) {
		var self = this;
		if (self.mainPage) {
			var options = {
				errorMsg: errorMsg,
				url: url,
				lineNumber: lineNumber,
				error: error,
				doEvent: function() {
					// diagnose component will be improved, with specific msg and stack properties
					var $diagnose = {};
					$diagnose.$message = options.errorMsg;
					$diagnose.$message += error ? "\nStack:\n" + error.stack : "";
					$diagnose.$severity = "error"; //"alert";
					self.showDiagnoses({
						$diagnoses: [$diagnose]
					});
				}
			};
			if (self.mainPage.externalAdapter)
				self.mainPage.externalAdapter.onUncaughtError(options);
		} else {
			self.showDiagnoses({
				$diagnoses: [{
					$severity: "fatal",
					$message: errorMsg
				}]
			});
		}
	},
	onError: function(error) {
		this.onUncaughtError(error.message, error.fileName, error.lineNumber, error);
	},

	getBodySize: function() {
		if (!this.bodyRect) {
			this.bodyRect = this.dom.getBoundingClientRect(this.body);
		}
		return this.bodyRect;
	},
	getLayoutSize: function() {
		if (!this.layoutRect) {
			this.layoutRect = this.dom.getBoundingClientRect(this.layoutSlot);
		}
		return this.layoutRect;
	},
	scrollToField: function(field) {
		if (field.articleParent) {
			var parent = field.articleParent.isRecordArticle ? field.articleParent.articleParent : field.articleParent;
			if (parent.scroller) {
				parent.scroller.ensureFieldVisibility(field);
			} else {
				field.page.scrollToItem(field);
			}
		}
	},
	getPageTemplateUrl: function(url) {
		return this.$item.$pageTemplateUrl || ('/page?url=' + encodeURIComponent(url));
	}
});

exports.load = function($item, $prototype) {
	return (new Site()).loadBox({
		widgetsLibrary: require('./widgetsLibrary'),
		fusionGatewayClass: fusionGatewayClass,
		$item: $item,
		$prototype: $prototype
	});
};