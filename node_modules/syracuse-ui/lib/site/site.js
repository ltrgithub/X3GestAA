"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Dialog = require('./dialog').Dialog;
var MessageBox = require('syracuse-ui/lib/diagnoses/messageBox').MessageBox;
var SiteTopPanel = require("./aside/siteTopPanel").SiteTopPanel;
var ExternalAdapter = require("./aside/externalAdapter").ExternalAdapter;
var Resizer = require("./aside/resizer").Resizer;
var AuthorPage = require("syracuse-ui/lib/authoring/authorPage").AuthorPage;
var DiagnosesPanel = require('syracuse-ui/lib/diagnoses/diagnosesPanel').DiagnosesPanel;
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var Controller = require('syracuse-ui/lib/controller/controller').Controller;
var searchRequest = require('./search/searchRequest');
var EventListener = require('./aside/eventListener').EventListener;
var SpyGateway = require('./aside/spyGateway').SpyGateway;
var disconnectUtils = require('./disconnectUtils');
var locale = require('syracuse-core/lib/locale');
var cvgPageConverter = require('syracuse-x3/lib/cvgPageConverter');

var _fieldSmartWidth = {
    charWidth: 8,
    small: 15, //10
    medium: 30, //20
    large: 50
};

var _fieldWidths = {
    "application/x-icon": {
        $width: 50
    },
    "application/x-date": {
        $maxLength: 10
    },
    "application/x-time": {
        $maxLength: 8
    },
    "application/x-datetime": {
        $maxLength: 20
    },
    "application/x-boolean": {
        $maxLength: 5
    },
    "application/x-binary": {
        $width: 30
    },
    "image": {
        $width: 40
    }
};
function Site(){
}

exports.Site = helpers.defineClass(Site, RawPage, {
    dispose: function(){
        if (this.fusionGateway) {
            this.fusionGateway.dispose();
        }
        if (this.spyGateway) {
            this.spyGateway.dispose();
        }
        $(window).unbind();
        this._authoringLink = this._newTabLink = null;
        this.logoutSlot = this._pageDialogs = this.autoCloseDialogs = this.fusionGateway = this._topPanelClass = this._topPanel = this._topPanelContainer = this.awPageSlot = this.spyGateway = this.spy = this.lastFocusField = null;
        RawPage.prototype.dispose.call(this);
        window.onerror = window.onbeforeunload = window.onunload = null;
    },
    _focusBox: function(box, hasFocus){
        if (box) {
            var target = box.layoutSlot || box._body;
            if (!target && box.$$item) {
                target = box.$$item[0];
            }
            if (target) {
                if (box != box.page) {
                    this.toggleClass(target, "s-selected-box", hasFocus);
                }
            }
        }
    },
    onChildFieldFocus: function(boxParent, hasFocus){
        /*var self = this;
         if (boxParent) {
         if (hasFocus) {
         clearTimeout(self.focusBoxTimeOut);
         if (self.boxFocus != boxParent) {
         self._focusBox(self.boxFocus, false);
         }
         self._focusBox(self.boxFocus = boxParent, true);
         
         }
         else {
         self.focusBoxTimeOut = setTimeout(function(){
         self._focusBox(self.boxFocus, false);
         }, 500);
         }
         }*/
    },
    closePopups: function(box, event){
        if (this.autoCloseDialogs) {
            var ids = Object.keys(this.autoCloseDialogs);
            for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                var dlg = this.autoCloseDialogs[ids[ii]];
                if (dlg && !dlg.disposed) {
                    if (dlg._content && dlg._content == box) {
                        continue;
                    }
                    if (dlg._content && dlg._content.onBeforeAutoClose && !dlg._content.onBeforeAutoClose(box)) {
                        continue;
                    }
                    if (!event || !dlg.isTargetInBoundary(event)) {
                        dlg.close();
                        delete this.autoCloseDialogs[ids[ii]];
                    }
                }
            }
            // this.autoCloseDialogs = null;
        }
        
    },
    ensurePreferences: function(){
        return (this._preferences = this._preferences || {});
    },
    addResizeListener: function(listener){
        this.resizeListeners[listener.id] = listener;
    },
    removeResizeListener: function(listener){
        if (this.resizeListeners) {
            delete this.resizeListeners[listener.id];
        }
        
    },
    onBeforClick: function(box){
        delete this.requestedDDAuthoringItem;
        if (this.dragDropInstance) {
            if (this.dragDropInstance.stop) {
                this.dragDropInstance.stop();
            }
            else {
                document.controller.disposeObject(this.dragDropInstance);
            }
            this.setDragDropInstance();
        }
        this.closePopups(box);
    },
    
    formatHTMLMessage: function(message){
        return message.replace(/\n/g, "<BR/>");
    },
    setDragDropInstance: function(instance, ident){
        if (instance) {
            this.dragDropInstance = instance;
        }
        else {
            delete this.dragDropInstance;
        }
    },
    showDiagnoses: function(message, item, options){
        if (item && item.page) {
            var diagnosePage = item.page.diagnosePage || item.page;
            if (diagnosePage.diagnosesPanel) {
                diagnosePage.diagnosesPanel.showDiagnoses(message, item, options);
            }
            else {
                diagnosePage.showDiagnoses(message, options);
            }
        }
        else {
            if (this.diagnosesPanel) {
                this.diagnosesPanel.showDiagnoses(message, item, options);
            }
            else {
                if (this.mainPage) {
                    this.mainPage.showDiagnoses(message, options);
                }
                else { // default: message box
                    var options = {};
                    var onlyOneDiagnose = message.$diagnoses.length == 1;
                    options.$message = this._localize().s_msgbox_msg;
                    options.$type = "alert";
                    options.$buttons = "ok";
                    options.$title = this._localize().s_msgbox_title;
                    options.$diagnoses = message.$diagnoses;
                    options.$origin = onlyOneDiagnose ? message.$diagnoses[0].$origin : "";
                    this.showMessage(options);
                }
            }
        }
    },
    _localize: function(){
        return locale.resources(module)();
    },
    logon: function(onAfterLogon){
        var self = this;
        var prevdataset;
        if (self.userProfile) {
            prevdataset = self.userProfile.buildWCContent();
            document.controller.disposeObject(self.userProfile);
            self.userProfile = null;
        }
        self.userProfile = new (self.siteOptions.userProfileClass)();
        self.userProfile._initializePage();
        document.controller.loadWorkingCopy({
            menu: {
                $url: self.$item.$userProfileUrl,
                sendData: prevdataset
            },
            article: self.userProfile,
            callback: function(){
                self.developpementMode = (self.userProfile.dataset && self.userProfile.dataset.developpementMode);
                onAfterLogon();
            }
        });
    },
    getSessionId: function(){
        return helpers.http.parseCookie(document.cookie)["syracuse.sid"] || "";
    },
    showMessage: function(options){
        if (this._msgBox) {
            document.controller.disposeObject(this._msgBox);
        }
        options.$type = options.$type || "alert";
        this._msgBox = new MessageBox();
        this._msgBox.$prototype = {};
        this.initializeNewItem(this._msgBox, options);
        this._msgBox.loadBox();
    },
    _releaseMainPage: function(){
        var prev = this.mainPage;
        if (prev && prev.externalAdapter) {
            prev.externalAdapter.releaseMainPage({
                mainPage: prev,
                doEvent: function(){
                    setTimeout(function(){
                        document.controller.disposeObject(prev);
                    }, 10);
                }
            });
        }
        this.emptyDom(this.body);
    },
    unload: function(){
        $(document).unbind();
        delete this.resizeListeners;
        document.controller.disposeObject(this._eventListener);
        document.controller.disposeObject(this);
        document.controller.disposeObject(document.controller);
        document.site = document.controller = null;
    },
    trimString: function(ss){
        return typeof ss == 'string' || ss instanceof String ? ss.trim() : ss;
    },
    setZIndex: function(item){
        this._zIndex++;
        if (item) {
            item.style.zIndex = this._zIndex;
        }
        return this._zIndex;
    },
    toggleClass: function(dom, css, show){
        if (show) {
            if (dom.className.indexOf(css) < 0) {
                dom.className += (" " + css);
            }
        }
        else {
            dom.className = dom.className.replace(css, "");
        }
    },
    toggleDom: function(dom){
        dom.style.display = this.isDomDisplay(dom) ? "none" : "";
    },
    isDomDisplay: function(dom){
        return dom.style.display != "none";
    },
    emptyDom: function(domNode){
        if (domNode) {
            while (domNode.firstChild) {
                domNode.removeChild(domNode.firstChild);
            }
        }
    },
    removeDomChild: function(child){
        if (child && child.parentNode) {
            child.parentNode.removeChild(child);
        }
    },
    disableItem: function(item, isDisabled){
        if (isDisabled) {
            item.setAttribute("disabled", isDisabled);
        }
        else {
            item.removeAttribute("disabled");
        }
        this.toggleClass(item, "s-disabled", isDisabled);
    },
    
    openHomeLink: function(){
        var self = this;
        setTimeout(function(){
            var homeLinks = self.menuItems.$home;
            if (homeLinks && homeLinks[0]) {
                homeLinks[0].click();
            }
        }, 20);
    },
    getFieldWidth: function($field, useSmartMode, $titleLength, isSortable){
        var $width;
        if ($field.$type) {
            if ($field.$format) {
                $width = this._fieldWidths[$field.$type + $field.$format];
            }
            if (!$width) {
                $width = this._fieldWidths[$field.$type];
            }
        }
        if (!$width) {
            $width = {};
        }
        var widthValue = $width.$width;
        var $maxLength = 0;
        if ($field.$precision) {
            $maxLength = $field.$precision + 2 * ($field.$precision / 3); //separator
        }
        if ($field.$scale) {
            $maxLength += $field.$scale + 1; //for separator
        }
        if (!$maxLength) {
            $maxLength = $field.$displayLength || $field.$maxLength || $width.$maxLength;
        }
        if (useSmartMode) {
            $maxLength = $maxLength || _fieldSmartWidth.large;
            if ($maxLength <= _fieldSmartWidth.small) {
                $maxLength = _fieldSmartWidth.small;
            }
            else {
                if ($maxLength <= _fieldSmartWidth.medium) {
                    $maxLength = _fieldSmartWidth.medium;
                }
                else {
                    $maxLength = _fieldSmartWidth.large;
                }
            }
            widthValue = (_fieldSmartWidth.charWidth * $maxLength);
        }
        else {
            if (isSortable) {
                $titleLength += 2;
            }
            if ($titleLength > $maxLength) {
                if (($titleLength - $maxLength) <= 4) {
                    $maxLength = $titleLength;
                }
                else {
                    if (isSortable) {
                        $maxLength += 2;
                    }
                }
                $maxLength = Math.max(isSortable ? 7 : 5, $maxLength);
            }
            else {
                if (isSortable) {
                    $maxLength += 2;
                }
            }
            if (!widthValue) {
                $maxLength = Math.min(_fieldSmartWidth.medium, $maxLength || _fieldSmartWidth.medium);
                widthValue = (_fieldSmartWidth.charWidth * $maxLength);
            }
            
        }
        return widthValue;
    },
    setResizable: function(options){
        var resizer = new Resizer();
        resizer.setResizable(options);
        return resizer;
    },
    onFieldFocusIn: function(field){
        this.lastFocusField = field;
    },
    notifyRequestSurvey: function(pendingRequests){
        if (!this.requestSurvey) {
            this.requestSurvey = document.createElement("div");
            this.requestSurvey.setAttribute("id", "s-site-request");
            this.setZIndex(this.requestSurvey);
            
            this.layoutSlot.appendChild(this.requestSurvey);
            this.requestSurveyCount = document.createElement("label");
            this.requestSurveyCount.setAttribute("id", "s-site-request-count");
            this.requestSurvey.appendChild(this.requestSurveyCount);
        }
        pendingRequests = pendingRequests || 0;
        this.requestSurveyCount.textContent = pendingRequests;
        if (pendingRequests > 0) {
            if (this.requestSurvey.style.right != "0px") {
                this.requestSurvey.style.right = "0px";
            }
        }
        else {
            this.requestSurvey.style.right = "-80px";
        }
    },
    onMainPageChange: function($itemPage){
        if (!this.body) {
            this.body = this.$$body[0]; //hack temp for office
        }
        this.body.style.display = "none";
        $itemPage.boxParent = null;
        $itemPage.layoutSlot = this.$$body[0];
        this._releaseMainPage();
        if (this._diagnosesPanel) {
            this._diagnosesPanel.emptyViewer();
        }
        this.toggleTopPanel(false);
        
        this.mainPage = this.loadNewPage($itemPage);
        this.mainPage.openerHttpQuery = $itemPage.httpQuery;
        this.mainPage.isMainPage = true;
        this.updateDocumentTitle();
        this.body.style.display = "";
        this.resize();
        this.spyGateway.setSpyedPage(this.mainPage);
        return this.mainPage;
    },
    drawBox: function(){
        var self = this;
        self._renderHeader();
        self.$$item = self.$$body = $(self.body = document.createElement("div"));
        self._$$header = $(self._header);
        self.body.setAttribute("id", "s-site-body");
        self.body.setAttribute("tabindex", "1"); // add for receive keyboard event  for shortcut
        self.layoutSlot.appendChild(self.body);
        self.logon(function(){
            document.controller.startNavigation();
            self._onLogon();
            self.layoutSlot.style.display = "";
            self.resize();
        });
    },
    applyLocalize: function(){
        var localize = this._localize();
        this._authoringLink.title = localize.s_authoring_open_link;
        this._newTabLink.title = localize.s_site_tab_link;
    },
    _onLogon: function(){
        this.userProfile.ensureFormBlock();
        this.applyLocalize();
    },
    updateDocumentTitle: function(){
        var title = this.mainPage.getTitle();
        if (title) {
            if (this.$item.$isSecurityTitleVisible !== false) {
                if (this.userProfile.dataset) {
                    if (this.userProfile.dataset.selectedRole) {
                        title += " (" + this.userProfile.dataset.selectedRole.description + ")";
                    }
                    if (this.userProfile.dataset.selectedEndpoint) {
                        title += " (" + this.userProfile.dataset.selectedEndpoint.description + ")";
                    }
                }
                else {
                    this.userProfile.$isTitleUpdateRequested = true;
                }
            }
            this.userProfile.showPageSecurity(this.mainPage);
            document.title = title;
        }
    },
    openAuthoringPage: function(open){
        if (open) {
            this.toggleTopPanel(false);
            this._header.style.display = "none";
            this.authorPage = new AuthorPage();
            this.emptyDom(this.awPageSlot);
            this.awPageSlot.style.display = "";
            this.authorPage.beginAuthoring(this.awPageSlot);
        }
        else {
            this._header.style.display = "";
            this.awPageSlot.style.display = "none";
            this.emptyDom(this.awPageSlot);
            document.controller.disposeObject(this.authorPage);
            this.authorPage = null;
            this.resize();
        }
    },
    openDialog: function(options){
        var dialog = new Dialog();
        dialog.open(options);
        return dialog;
    },
    appendJobsViewer: function(jobsViewer){
        if (this.layoutSlot) {
            this.layoutSlot.appendChild(this.jobsViewer ? this.jobsViewer._item : (this.jobsViewer = jobsViewer)._item);
        }
    },
    resize: function(onBoxToggle){
        var self = this;
        self.resizeTimeOut = setTimeout(function(){
            if (self.$$body && self.body) {
                var newHeight = 0;
                if (self._header) {
                    if (!self._$$header) {
                        self._$$header = $(self._header);
                    }
                    var $$header = (self.authorPage) ? $(self.authorPage.layoutSlot) : self._$$header;
                    newHeight = $$header.outerHeight(true);
                }
                self.body.style.height = (self.$$layoutSlot.height() - newHeight) + "px";
            }
            if (self.resizeListeners) {
                var ids = Object.keys(self.resizeListeners);
                for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                    self.resizeListeners[ids[ii]].onWindowResize(onBoxToggle);
                }
            }
            clearTimeout(self.resizeTimeOut);
        }, 10);
    },
    onClickPicker: function(pickerId, event){
        switch (pickerId) {
            case "s-site-top-pn-opener-link":
                this.toggleTopPanel();
                return false;
            case "s-site-authoring-link":
                this.openAuthoringPage(true);
                return false;
            case "s-site-jobs-viewer-opener-link":
                this.jobsViewer && this.jobsViewer.toggle();
                return false;
            case "$spygateway":
                if (event.ctrlKey) {
                    this.openSpy();
                }
                return false;
        }
        return true;
    },
    toggleTopPanel: function(show, event){
        if (show !== false && !this._topPanel) {
            this._topPanelContainer.style.left = $(this._topPanelOpener).offset().left + "px"
            this._topPanel = new (this._topPanelClass || SiteTopPanel)();
            this._topPanel.$prototype = this.$prototype;
            this._topPanel.page = this;
            this.emptyDom(this._topPanelContainer);
            this._topPanelContainer.style.display = "";
            document.site.emptyDom(this._topPanelContainer);
            this._topPanelContainer.style.display = "";
            this._topPanel.layoutSlot = this._topPanelContainer;
            this._topPanel.loadBox();
        }
        else {
            if (this._topPanel) {
                if (event && $(event.target).closest(this._topPanel.$$item).length) {
                    return;
                }
                this._topPanel.closePanel();
            }
            delete this._topPanel;
        }
        if (this._topPanelOpener) {
            this.toggleClass(this._topPanelOpener, "s-open", this._topPanel != null);
        }
    },
    _appendTopPanelOpener: function(layoutSlot, topPanelClass){
        this.layoutSlot.setAttribute("data-s-article", this.id); //ensure for compatibility office
        this._topPanelOpener = document.createElement("a");
        this._topPanelOpener.className = "s-site-top-pn-opener-link";
        this._topPanelOpener.setAttribute("href", "#");
        this._topPanelOpener.setAttribute("data-s-picker", "s-site-top-pn-opener-link");
        this._topPanelClass = topPanelClass;
        layoutSlot.appendChild(this._topPanelOpener);
    },
    openSpy: function(){
        this.spyGateway.open();
    },
    _renderHeader: function(){
        this._header = document.createElement("header");
        this._header.setAttribute("id", "s-site-header");
        this.setZIndex(this._header);
        this.layoutSlot.appendChild(this._header);
        
        this.awPageSlot = document.createElement("aside");
        this.awPageSlot.setAttribute("id", "s-aw-page");
        this.awPageSlot.style.display = "none";
        this.layoutSlot.appendChild(this.awPageSlot);
        
        this._topPanelContainer = document.createElement("div");
        this._topPanelContainer.setAttribute("id", "s-site-top-pn");
        this.layoutSlot.appendChild(this._topPanelContainer);
        
        var topLeft = document.createElement("div");
        topLeft.setAttribute("id", "s-site-header-top-left");
        this._header.appendChild(topLeft);
        
        var div = document.createElement("div");
        div.setAttribute("id", "s-site-sage");
        topLeft.appendChild(div);
        //if (document.site.developpementMode) {
        div.setAttribute("data-s-picker", "$spygateway");
        //   }
        
        div = document.createElement("div");
        div.setAttribute("id", "s-site-help");
        this.loadNewItem(topLeft.appendChild(div), {
            $id: "s-site-help-link",
            $bind: "$help",
            $category: "link",
            $noText: true,
            $skin: "s-site-help-link"
        });
        
        this._appendTopPanelOpener(topLeft);
        
        this._authoringLink = document.createElement("a");
        this._authoringLink.className = "s-site-authoring-link";
        this._authoringLink.setAttribute("href", "#");
        this._authoringLink.setAttribute("data-s-picker", "s-site-authoring-link");
        topLeft.appendChild(this._authoringLink);
        
        this.logoutSlot = document.createElement("div");
        this.logoutSlot.setAttribute("id", "s-site-logout");
        topLeft.appendChild(this.logoutSlot);
        
        // top right
        var topRight = document.createElement("div");
        topRight.setAttribute("id", "s-site-header-top-right");
        this._header.appendChild(topRight);
        
        this.searchField = searchRequest.loadRequest(topRight);
        
        div = document.createElement("div");
        div.setAttribute("id", "s-site-home");
        this.loadNewItem(topRight.appendChild(div), {
            $bind: "$home",
            $category: "link",
            $noText: true,
            $skin: "s-site-home-link"
        });
        topRight = document.createElement("div");
        topRight.setAttribute("id", "s-site-header-top-right-fusion");
        topRight.style.display = "none";
        this._header.appendChild(topRight);
        
        div = document.createElement("div");
        div.setAttribute("id", "s-site-tab");
        this._newTabLink = document.createElement("a");
        this._newTabLink.className = "s-site-tab-link";
        this._newTabLink.setAttribute("href", "?representation=home.$dashboard");
        this._newTabLink.setAttribute("target", "_blank");
        div.appendChild(this._newTabLink);
        topRight.appendChild(div);
        // jobs viewer opener
        this._appendJobsViewerOpener(this._header);
    },
    _appendJobsViewerOpener: function(layoutSlot){
        var self = this;
        // jobs viewer opener
        this._jobsViewerOpener = document.createElement("a");
        this._jobsViewerOpener.className = "s-jobs-viewer-opener";
        this._jobsViewerOpener.setAttribute("href", "#");
        this._jobsViewerOpener.setAttribute("data-s-picker", "s-site-jobs-viewer-opener-link");
        this._jobsViewerOpener.style.display = "none";
        
        var div = document.createElement('div');
        div.className = 's-jobs-viewer-opener-area';
        div.appendChild(this._jobsViewerOpener);
        
        layoutSlot.appendChild(div);
    },
    loadBox: function(siteOptions){
        this.siteOptions = siteOptions;
        document.site = this;
        this.$autoFetch = false;
        this._childPageOffset = 1;
        this._initializePage();
        this.spyGateway = new SpyGateway();
        this._fieldWidths = siteOptions._fieldWidths || _fieldWidths;
        (document.controller = new (this.siteOptions.controllerClass || Controller)()).initialize();
        
        if (this.siteOptions.fusionGatewayClass) {
            this.fusionGateway = new this.siteOptions.fusionGatewayClass();
        }
        this.requestControllers = {
            http: require("syracuse-ui/lib/controller/httpController")
        }
        this.agents = {};
        this.resizeListeners = {};
        this.externalAdapter = new ExternalAdapter();
        this._zIndex = 100;
        $(window).unload = function(){
            if (document.site) {
                document.site.unload();
            }
        };
        this.layoutSlot = (this.$$layoutSlot = $("#s-site"))[0];
        this.layoutSlot.style.display = "none";
        (this._eventListener = new EventListener()).load();
        this.$prototype = this.siteOptions.$prototype;
        this.initializeNewItem(this, this.siteOptions.$item);
        this.layoutSlot.setAttribute("data-s-article", this.id);
        RawPage.prototype.loadBox.call(this);
        this.onWindowError();
        disconnectUtils.onWindowUnload(this);
        return this;
    },
    onWindowError: function(){
        var self = this;
        window.onerror = function(errorMsg, url, lineNumber, error){
            self.onUncaughtError(errorMsg, url, lineNumber, error);
        };
    },
    getBrowserName: function(){
        var N = navigator.appName, ua = navigator.userAgent;
        var M = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
        M = M ? M[1] : N;
        return M;
    },
    onUncaughtError: function(errorMsg, url, lineNumber, error){
        var options;
        var self = this;
        if (self.mainPage) {
            options = {
                errorMsg: errorMsg,
                url: url,
                lineNumber: lineNumber,
                error: error,
                doEvent: function(){
                    // diagnose component will be improved, with specific msg and stack properties
                    var $diagnose = {};
                    $diagnose.$message = options.errorMsg;
                    $diagnose.$message += error ? "\nStack:\n" + error.stack : "";
                    $diagnose.$severity = "alert";
                    self.showDiagnoses({
                        $diagnoses: [$diagnose]
                    });
                }
            }
            self.mainPage.externalAdapter.onUncaughtError(options);
        }
        else {
            //debugger; //TODO  
        }
    },
    onError: function(error){
        this.onUncaughtError(error.message, error.fileName, error.lineNumber, error);
    },
    loadNewPage: function($itemPage){
        var $pageCategory = ($itemPage.$representation.$article ? $itemPage.$representation.$article.$category : null) || $itemPage.$category;
        $pageCategory = $pageCategory || ($itemPage.$urlParts.$facet == "$dashboard" ? "dashboard" : "page");
        var item = new ($itemPage.$pageCategoryClass || this.siteOptions.widgetsLibrary.pageCategories[$pageCategory] || this.siteOptions.widgetsLibrary.defaultPageCategory)();
        item.id = this._childPageOffset++;
        item.$pageCategory = $pageCategory;
        item.dialogWrapper = $itemPage.dialogWrapper;
        item.$isSearchFacetEnabled = $itemPage.$isSearchFacetEnabled;
        item.$authorUrl = $itemPage.$representation.$authorUrl;
        item.$urlParts = $itemPage.$urlParts;
        item.$facet = $itemPage.$urlParts.$facet;
        item.$isEditMode = $itemPage.$isEditMode || item.$facet == "$edit";
        var hackFusion = item.$facet.split("_");
        if (hackFusion.length > 1 && hackFusion[0] == "$fusion") {
            item.$isEditMode = true;
            item.$facet = hackFusion[1];
            item.$fusionPageMeta = $itemPage.$fusionPageMeta;
        }
        item.layoutSlot = $itemPage.layoutSlot;
        item.$prototype = $itemPage.$representation.$prototype;
        var $protoArticle = item.$prototype.$article;
        var $article = $itemPage.$representation.$article || $protoArticle;
        if ($article && $article.$generatorVersion) {
            //debugger;
            //syracuse-collaboration/lib/entities/page/page._js
            //cvgPageConverter.makeVolatile(item.$prototype, $article);
            //debugger;
        }
        $article = this.ensureDefaultArticle($article, item.$prototype);
        
        if (item.$prototype && !item.$prototype.$fusionBar && $protoArticle) {
            item.$prototype.$fusionBar = $protoArticle.$fusionBar;
            delete $protoArticle.$fusionBar;
        }
        if (item.$prototype.$menus) {
            $article.$menus = item.$prototype.$menus;
        }
        else {
            if ($itemPage.$representation.$prototype.$article) {
                if ($protoArticle.$menus) {
                    $article.$menus = $protoArticle.$menus;
                }
            }
        }
        
        
        
        this.initializeNewItem(item, $article, $itemPage.boxParent);
        
        item.$item.externalAdapter = $itemPage.externalAdapter;
        item.$autoFetch = ($itemPage.$autoFetch !== false) && ($itemPage.initData == null);
        if ($itemPage.onBeforeLoadPage) {
            $itemPage.onBeforeLoadPage(item);
        }
        if ($itemPage.httpQuery && $itemPage.httpQuery.$urlParts) {
            item.$urlParams = $itemPage.httpQuery.$urlParts.params;
        }
        item.$views = $itemPage.$representation.$views;
        item.loadBox($itemPage.initData, $itemPage.$representation.$diagnoses);
        $itemPage.$pageCategoryClass = $itemPage.boxParent = $itemPage.layoutSlot = $itemPage.$representation = $itemPage.onBeforeLoadPage = $itemPage.dialogWrapper = null;
        
        return item;
    },
    ensureDefaultArticle: function($article, $prototype){
        if (!$article) {
            $article = {};
        }
        if (!$article.$layout) {
            $article.$layout = {};
        }
        if (!$article.$layout.$items) {
            var $items = [];
            var binds = Object.keys($prototype.$properties);
            for (var ii = 0, jj = binds.length; ii < jj; ii++) {
                $items.push({
                    $bind: binds[ii]
                });
            }
            $article.$layout = {
                $items: [{
                    $category: "section",
                    $layout: {
                        $items: [{
                            $category: "section",
                            $layout: {
                                $items: $items
                            }
                        }]
                    }
                }]
            };
        }
        return $article;
    },
    registerDialogPage: function(dialog, add){
        if (add) {
            if (!this._pageDialogs) {
                this._pageDialogs = [];
            }
            this._pageDialogs.push(dialog);
        }
        else {
            if (this._pageDialogs) {
                for (var ii = 0, jj = this._pageDialogs.length; ii < jj; ii++) {
                    if (this._pageDialogs[ii] == dialog) {
                        this._pageDialogs.splice(ii, 1);
                        break;
                    }
                }
            }
        }
    },
    getTopDialogPage: function(){
        if (this._pageDialogs && this._pageDialogs.length > 0) {
            return this._pageDialogs[this._pageDialogs.length - 1];
        }
        return null;
    }
});

exports.load = function($item, $prototype){
    return (new Site()).loadBox({
        widgetsLibrary: require('./widgetsLibrary'),
        fusionGatewayClass: require('syracuse-ui/lib/fusion/fusionGateway').FusionGateway,
        userProfileClass: require('./userProfile').UserProfile,
        $item: $item,
        $prototype: $prototype
    });
};

