"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Dialog = require('./dialog').Dialog;
var MessageBox = require('./messageBox').MessageBox;
var SiteTopPanel = require("./aside/siteTopPanel").SiteTopPanel;
var ExternalAdapter = require("./aside/externalAdapter").ExternalAdapter;
var DragDrop = require("./aside/dragDrop").DragDrop;
var AuthorPage = require("./authoring/authorPage").AuthorPage;
var DiagnosesPanel = require('./diagnosesPanel').DiagnosesPanel;
var Article = require("syracuse-ui/lib/article/article").Article;
var itemFactory = require('./itemFactory');
var Controller = require('syracuse-ui/lib/controller/controller').Controller;
var searchRequest = require('./search/searchRequest');
var EventListener = require('./aside/eventListener').EventListener;

var _fieldWidths = {
    "application/x-icon": {
        $width: 50
    },
    "application/x-choice": {
        $width: 100,
        $minWidth: 50
    },
    "application/x-date": {
        $width: 100
    },
    "application/x-time": {
        $width: 80,
        $minWidth: 80
    },
    "application/x-datetime": {
        $width: 170,
        $minWidth: 170
    },
    "application/x-boolean": {
        $width: 50,
        $minWidth: 50
    },
    "application/x-integer": {
        $width: 100,
        $minWidth: 50
    },
    "application/x-decimal": {
        $width: 100,
        $minWidth: 50
    },
    "application/x-real": {
        $width: 100,
        $minWidth: 50
    },
    "application/x-password": {
        $charWidth: 10,
        $maxLength: 10
    },
    "application/x-string": {
        $charWidth: 10,
        $maxLength: 10
    },
    "application/x-string$phone": {
        $charWidth: 10,
        $maxLength: 14,
        $minLength: 5
    },
    "application/x-string$email": {
        $charWidth: 10,
        $maxLength: 20,
    },
    "application/x-reference": {
        $charWidth: 10,
        $maxLength: 20,
        $minLength: 5
    },
    "image": {
        $width: 40,
        $minWidth: 40
    },
    $default: {
        $width: 100,
        $minWidth: 50
    }
};
function Site(){
}

exports.Site = helpers.defineClass(Site, Article, {
    dispose: function(){
        delete this.lastFocusField;
        $(window).unbind();
        if (this.$$topPanelOpener) {
            this.$$topPanelOpener.unbind();
        }
        Article.prototype.dispose.call(this);
    },
    
    addResizeListener: function(listener){
        this.resizeListeners[listener.id] = listener;
    },
    removeResizeListener: function(listener){
        if (this.resizeListeners) {
            delete this.resizeListeners[listener.id];
        }
        
    },
    onBeforClick: function(){
        delete this.requestedDDAuthoringItem;
        if (this.DDAuthoring) {
            this.DDAuthoring.stop();
            delete this.DDAuthoring;
        }
    },
    getPage: function(){
        //hack ensure external adpater 
        return this;
    },
    maximizeBox: function(box, callback){
        setTimeout(function(){
            if (!box.$$memBody) {
                box.$$memBody = $("<div/>");
            }
            var page = box.getArticle().getPage();
            box.$$memBody.empty().append(page.$$body.children());
            page.$$body.append(box.$$item);
            if (callback) {
                callback(box, page);
            }
        }, 20);
        box.$isMaximized = true;
        box.maximizeBtn.className = box.maximizeBtn.className.replace("-maximize", "-minimize");
    },
    minimizeBox: function(box, callback){
        setTimeout(function(){
            var page = box.getArticle().getPage();
            box.$$item.appendTo(box.$$container);
            page.$$body.append(box.$$memBody.children());
            box.$$memBody.remove();
            delete box.$$memBody;
            if (callback) {
                callback(box, page);
            }
        }, 20);
        box.$isMaximized = false;
        box.maximizeBtn.className = box.maximizeBtn.className.replace("-minimize", "-maximize");
        
    },
    formatHTMLMessage: function(message){
        return message.replace(/\n/g, "<BR/>");
    },
    showDiagnoses: function(message, item, options){
        var page;
        if (item) {
            var article = item.getArticle();
            page = (article ? article.getPage() : null) || this.mainPage;
        }
        if (this._diagnosesPanel) {
            this._diagnosesPanel.showDiagnoses(message, page, options);
        }
    },
    appendDiagnosesPanel: function($$container, host, isTest){
        var diagnosesPanel = new DiagnosesPanel();
        diagnosesPanel.appenToPage(host, $$container);
        if (!isTest) {
            host._diagnosesPanel = diagnosesPanel;
        }
        return diagnosesPanel;
        
    },
    logon: function(onAfterLogon){
        var self = this;
        if (self.userProfile) {
            document.controller.disposeObject(self.userProfile);
            self.userProfile = null;
        }
        document.controller.loadWorkingCopy({
            menu: {
                $url: self.$item.$userProfileUrl
            },
            article: self.userProfile = new (self.siteOptions.userProfileClass)(),
            callback: function(){
                self.developpementMode = (self.userProfile.dataset && self.userProfile.dataset.developpementMode);
                onAfterLogon();
            }
        });
    },
    getSessionId: function(){
        return helpers.http.parseCookie(document.cookie)["syracuse.sid"] || "";
    },
    showMessage: function(options){
        if (this._msgBox) {
            document.controller.disposeObject(this._msgBox);
        }
        options.$type = options.$type || "alert";
        (this._msgBox = new MessageBox).open(options);
    },
    _releaseMainPage: function(){
        var prev = this.mainPage;
        if (prev && prev.externalAdapter) {
            prev.externalAdapter.releaseMainPage({
                mainPage: prev,
                doEvent: function(){
                    setTimeout(function(){
                        document.controller.disposeObject(prev);
                    }, 10);
                }
            });
        }
        this.$$body.empty();
    },
    unload: function(){
        $(document).unbind();
        delete this.resizeListeners;
        document.controller.disposeObject(this);
        document.controller.disposeObject(document.controller);
        document.site = document.controller = null;
    },
    
    
    setZIndex: function($$item){
        $$item[0].style.zIndex = this._zIndex++;
    },
    toggleClass: function(dom, css, show){
        if (show) {
            if (dom.className.indexOf(css) < 0) {
                dom.className += (" " + css);
            }
        }
        else {
            dom.className = dom.className.replace(css, "");
        }
    },
    emptyDom: function(domNode){
        while (domNode.firstChild) {
            domNode.removeChild(domNode.firstChild);
        }
    },
    removeDomChild: function(child){
        if (child && child.parentNode) {
            child.parentNode.removeChild(child);
        }
    },
    disableItem: function(item, isDisabled){
        if (isDisabled) {
            item.setAttribute("disabled", isDisabled);
        }
        else {
            item.removeAttribute("disabled");
        }
        this.toggleClass(item, "s-disabled", isDisabled);
    },
    
    openHomeLink: function(){
        var self = this;
        setTimeout(function(){
            var homeLinks = self.menuItems.$home;
            if (homeLinks && homeLinks[0]) {
                homeLinks[0].click();
            }
        }, 20);
    },
    
    
    
    getFieldWidth: function($type, $format){
        return this._fieldWidths[($type || "$default") + ($format || "")] || this._fieldWidths.$default;
    },
    setFieldWidth: function(field){
        var $width = this.getFieldWidth(field.$field.$type, field.$field.$format);
        var widthValue = $width.$width;
        if ($width.$charWidth) {
            widthValue = ($width.$charWidth * (field.$field.$maxLength || $width.$maxLength));
            if ($width.$minLength) {
                field.domValueSlot.style.minWidth = ($width.$charWidth * $width.$minLength) + +"px";
            }
        }
        field.domValueSlot.style.maxWidth = widthValue + "px";
        if (field.layoutParent && widthValue > field.layoutParent.fieldMaxWidth) {
            field.layoutParent.fieldMaxWidth = widthValue;
        }
    },
    setDraggable: function(source, $$hotspot){
        (new DragDrop()).setDraggable(source, $$hotspot);
    },
    onFieldFocusIn: function(field){
        this.lastFocusField = field;
    },
    notifyRequestSurvey: function(pendingRequests){
        if (!this.$$requestSurvey) {
            this.$$requestSurvey = $("<div id='s-site-request'/>").appendTo(this.$$container);
            this.setZIndex(this.$$requestSurvey);
            this.$$requestSurveyCount = $("<label id='s-site-request-count'/>").appendTo(this.$$requestSurvey);
        }
        pendingRequests = pendingRequests || 0;
        this.$$requestSurveyCount.text(pendingRequests);
        if (pendingRequests > 0) {
            if (this.$$requestSurvey.css("right") != "0px") {
                this.$$requestSurvey.css("right", "0px");
            }
        }
        else {
            this.$$requestSurvey.css("right", "-80px");
        }
    },
    onMainPageChange: function($itemPage){
        this.$$body[0].style.display = "none";
        $itemPage.boxParent = null;
        $itemPage.$$container = this.$$body;
        this._releaseMainPage();
        if (this._diagnosesPanel) {
            this._diagnosesPanel._emptyViewer();
        }
        this.closeTopPanel();
        
        this.mainPage = document.itemFactory.loadPage($itemPage);
        this.mainPage.openerHttpQuery = $itemPage.httpQuery;
        this.mainPage.isMainPage = true;
        if (!$itemPage.$urlParts.isFusion) {
            this.updateDocumentTitle();
        }
        this.$$body[0].style.display = "";
        this.resize();
        return this.mainPage;
    },
    drawBox: function(){
        var self = this;
        
        self._renderHeader();
        self.$$item = self.$$body = $("<div id='s-site-body'/>").appendTo(self.$$container);
        
        document.site.logon(function(){
            document.controller.startNavigation();
            self.$$container.show();
            self.resize();
        });
    },
    updateDocumentTitle: function(){
        var title = this.mainPage.getTitle();
        if (title) {
            var record = this.userProfile.dataset;
            if (record) {
                if (record.selectedRole) {
                    title += " (" + record.selectedRole.description + ")";
                }
                if (record.selectedEndpoint) {
                    title += " (" + record.selectedEndpoint.description + ")";
                }
            }
            else {
                this.userProfile.$isTitleUpdateRequested = true;
            }
            this.mainPage.drawUserProfile(record);
            document.title = title;
        }
    },
    toggleAuthoring: function(open){
        if (open) {
            this.closeTopPanel();
            this._$$header.toggle(false);
            this.authorPage = new AuthorPage();
            this.authorPage.$$container = $(document.getElementById("s-site-author")).empty().show();
            this.authorPage.open();
        }
        else {
            this._$$header.toggle(true);
            this.authorPage.$$container.hide().empty();
            document.controller.disposeObject(this.authorPage);
            delete this.authorPage;
            this.resize();
        }
    },
    openDialog: function(options){
        var dialog = new Dialog();
        dialog.open(options);
        return dialog;
    },
    resize: function(){
        var self = this;
        if (self._$$header && self.$$body) {
            var $$header = (self.authorPage) ? self.authorPage.$$container : self._$$header;
            var newHeight = $$header.outerHeight(true);
            self.$$body[0].style.height = (self.$$container.height() - newHeight) + "px";
        }
        if (self.resizeListeners) {
            Object.keys(self.resizeListeners).forEach(function(id){
                self.resizeListeners[id].onWindowResize();
            });
        }
    },
    closeTopPanel: function(){
        if (this.topPanel) {
            this.$$topPanelOpener.click(); //Close
        }
    },
    _appendTopPanelOpener: function($$container, topPanelClass){
        var self = this;
        self.$$topPanelOpener = $("<a id='s-site-top-pn-opener-link'/>").attr("href", "#").bind("click", function(event){
            if (!self.topPanel) {
                self.topPanel = new (topPanelClass || SiteTopPanel)();
                self.topPanel.$prototype = self.$prototype;
                self.topPanel.$$container = $(document.getElementById("s-site-top-pn")).empty().show();
                self.topPanel.loadBox();
            }
            else {
                self.topPanel.closePanel();
                delete self.topPanel;
            }
            self.$$topPanelOpener.toggleClass("s-open", self.topPanel != null);
            return false;
        }).appendTo($$container);
    },
    _renderHeader: function(){
        var self = this;
        self.setZIndex(self._$$header = $("<header id='s-site-header'>/"));
        
        var $$topLeft = $("<div id='s-site-header-top-left'/>").appendTo(self._$$header);
        
        $$topLeft.append("<div id='s-site-sage'/>").append($("<div id='s-site-module'/>").text(self.$item.$module));
        $$topLeft.append("<div id='s-site-favorites'><a id='s-site-favorites-link' href='#'/></div>");
        
        var $$topRight = $("<div id='s-site-header-top-right'/>").appendTo(self._$$header);
        searchRequest.loadRequest($$topRight);
        
        document.itemFactory.load($("<div id='s-site-home'/>").appendTo($$topRight), {
            $bind: "$home",
            $category: "link",
            $noText: true,
            $skin: "s-site-home-link"
        }, this);
        
        document.itemFactory.load($("<div id='s-site-help'/>").appendTo($$topRight), {
            $bind: "$help",
            $category: "link",
            $noText: true,
            $skin: "s-site-help-link"
        }, this);
        
        self.$$container.append("<aside id='s-site-author'/>");
        $("<div id='s-fusion-sessions-opener'/>").css("visibility", "hidden").appendTo(self._$$header);
        self._appendTopPanelOpener(self._$$header);
        self.$$container.append(self._$$header).append("<div id='s-site-top-pn'/>");
        self.appendDiagnosesPanel(self.$$container, self);
    },
    
    loadSite: function(siteOptions){
        document.site = this;
        this.siteOptions = siteOptions;
        this._fieldWidths = siteOptions._fieldWidths || _fieldWidths;
        document.itemFactory = itemFactory.create(this.siteOptions.widgetsLibrary);
        (document.controller = new (this.siteOptions.controllerClass || Controller)()).initialize();
        
        if (this.siteOptions.fusionGatewayClass) {
            document.controller.fusionGateway = new this.siteOptions.fusionGatewayClass();
        }
        this.agents = {};
        this.resizeListeners = {};
        this.externalAdapter = new ExternalAdapter();
        this._zIndex = 100;
        $(window).unload = function(){
            if (document.site) {
                document.site.unload();
            }
        };
        this.$$container = $("#s-site");
        (this._eventListener = new EventListener()).load();
        this.$prototype = this.siteOptions.$prototype;
        document.itemFactory.initializeItem(this, this.siteOptions.$item);
        this.$item.$layoutOptions = this.$item.$layoutOptions || {};
        this.loadBox();
        return this;
    }
});

exports.load = function($item, $prototype){
    return (new Site()).loadSite({
        widgetsLibrary: require('./widgetsLibrary'),
        fusionGatewayClass: require('syracuse-ui/lib/fusion/fusionGateway').FusionGateway,
        userProfileClass: require('./userProfile').UserProfile,
        $item: $item,
        $prototype: $prototype
    });
};
