"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Dialog = require('./dialog').Dialog;
var MessageBox = require('syracuse-ui/lib/diagnoses/messageBox').MessageBox;
var SiteTopPanel = require("./aside/siteTopPanel").SiteTopPanel;
var ExternalAdapter = require("./aside/externalAdapter").ExternalAdapter;
var WidgetResizer = require("./resize/widgetResizer").WidgetResizer;
var ResizeListener = require("./resize/resizeListener").ResizeListener;
var DiagnosesPanel = require('syracuse-ui/lib/diagnoses/diagnosesPanel').DiagnosesPanel;
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var Controller = require('syracuse-ui/lib/controller/controller').Controller;
var searchRequest = require('./search/searchRequest');
var EventListener = require('./aside/eventListener').EventListener;
var SpyGateway = require('./spy/spyGateway').SpyGateway;
var disconnectUtils = require('./disconnectUtils');
var globals = require('streamline/lib/globals');
var locale = require('syracuse-core/lib/locale');
//var localizationConverter = require('./tools/localizationConverter');
var JobSyra = require('syracuse-ui/lib/jobs/jobHandlerSyra').JobHandlerSyra;
var DocCookies = require('./aside/docCookies').DocCookies;
var DragDropManager = require("syracuse-ui/lib/site/tools/dragDropManager").DragDropManager;
var BookmarksBar = require('syracuse-ui/lib/bookmarks/bookmarksBar').BookmarksBar;

var fusionGatewayClass = require('syracuse-ui/lib/fusion/fusionGateway').FusionGateway;
var userProfileClass = require('./userProfile').UserProfile;


var _fieldSmartWidth = {
	charWidth: 8,
	small: 15, //10
	medium: 30, //20
	large: 50
};

var _fieldWidths = {
	"application/x-icon": {
		$width: 50
	},
	"application/x-date": {
		$maxLength: 10
	},
	"application/x-time": {
		$maxLength: 8
	},
	"application/x-datetime": {
		$maxLength: 20
	},
	"application/x-boolean": {
		$maxLength: 5
	},
	"application/x-binary": {
		$width: 30
	},
	"image": {
		$width: 40
	}
};

var _iconFields = {
	"application/x-array": "a",
	"application/x-boolean": "b",
	"application/x-choice": "c",
	"application/x-date": "d",
	"application/x-time": "e",
	"application/x-datetime": "e",
	"application/x-decimal": "f",
	"application/x-integer": "f",
	"application/x-real": "f",
	"application/x-graph": "g",
	"application/x-cube": "g",
	"application/x-icon": "h",
	"application/x-binary": "h",
	"application/x-document": "h",
	"image": "h",
	"application/x-quantity": "j",
	"application/x-reference": "j",
	"text/rtf": "k",
	"text/plain": "k",
	"text/html": "k",
	"application/x-password": "l",
	"application/x-string": "l"

	/*"application/x-calendar": require('syracuse-ui/lib/field/schedule/calendar').Calendar,
     "application/x-gantt": require('syracuse-ui/lib/field/schedule/gantt').Gantt,
     "application/x-process": require('syracuse-ui/lib/field/process/visualProcess').VisualProcess,
     */
};



function Site() {}

exports.Site = helpers.defineClass(Site, RawPage, {
	designArticle: function(open, article, classDesigner) {
		if (open) {
			article.designer = new(classDesigner)();
			article.designer.openDesigner(article);
		} else {
			if (article.designer) {
				article.page.showDiagnoses({
					$diagnoses: null
				});
				article.designer.dispose();
			}
			article.designer = null;
			this.resize();
		}
	},
	getFieldIconType: function($type) {
		return _iconFields[$type] || "";
	},
	setSpecificAttributes: function(dom, specificity) {
		if (dom) {
			switch (specificity) {
				case "disableSpellCheck":
					dom.setAttribute("spellcheck", false);
					break;
				case "disableAutoCorrect":
					dom.setAttribute("autocorrect", "off");
					break;
				default:
					dom.setAttribute("spellcheck", false);
					dom.setAttribute("autocorrect", "off");
			}
		}
	},
	randomStr: function(m) {
		var m = m || 9,
			s = '',
			r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
		for (var i = 0; i < m; i++) {
			s += r.charAt(Math.floor(Math.random() * r.length));
		}
		return s;
	},
	logout: function() {
		var self = this;
		disconnectUtils.onUserActionUnload(function() {
			document.controller.postQuery({
				$title: self.localize.siteLogout,
				$method: "POST",
				$url: "/logout",
				httpHeaders: {
					authorization: "basic"
				}
			}, null, null, function($location, data) {
				// return to login page (or to the logout location)
				window.open($location.$url, "_self");
			});
		});
	},
	onMenuClick: function(menuItem) {
		if (this.bookmarksBar) {
			return this.bookmarksBar.onMenuClick(menuItem);
		}
		return true;
	},
	dispose: function() {
		if (this.bookmarksBar) {
			this.bookmarksBar.dipsose();
		}
		if (this._eventListener) {
			this._eventListener.dispsoe();
		}
		if (this.ddManager) {
			this.ddManager.dispose();
		}
		if (this.fusionGateway) {
			this.fusionGateway.dispose();
		}
		if (this.spyGateway) {
			this.spyGateway.dispose();
		}
		$(window).unbind();
		this.screenDesigners = this.fusionHeaderFunctionLink = this.fusionHeaderHomeLink = this.homeLink = null;
		this.bookmarksBar = this.dragDropManager = this._uiLocker = this._uiLockerOverlay = this._uiLockerTimeout = null;
		this._jobsViewerOpener = this.pagesMap = this.pageDesignerOpener = this.fusionHeader = this.fusionHeaderHomeLink = null;
		this._pageDialogs = this.autoCloseDialogs = this.fusionGateway = this._topPanelClass = this._topPanel = this._topPanelContainer = this.spyGateway = this.spy = null;
		this.headerLogo = this.headerTopRight = this.wcReqArray = this.bookmarks = null;
		RawPage.prototype.dispose.call(this);
		window.onerror = window.onbeforeunload = window.onunload = null;
	},
	_focusBox: function(box, hasFocus) {
		if (box) {
			var target = box.layoutSlot || box.body;
			if (!target && box.$$item) {
				target = box.$$item[0];
			}
			if (target) {
				if (box != box.page) {
					this.toggleClass(target, "s-selected-box", hasFocus);
				}
			}
		}
	},
	onChildFieldFocus: function(boxParent, hasFocus) {
		/*var self = this;
         if (boxParent) {
         if (hasFocus) {
         clearTimeout(self.focusBoxTimeOut);
         if (self.boxFocus != boxParent) {
         self._focusBox(self.boxFocus, false);
         }
         self._focusBox(self.boxFocus = boxParent, true);
         }
         else {
         self.focusBoxTimeOut = setTimeout(function(){
         self._focusBox(self.boxFocus, false);
         }, 500);
         }
         }*/
	},
	registerJobSyra: function($location, $state, $title, uuid) {
		var job = new JobSyra();
		var jobParams = {
			$location: $location,
			$state: $state,
			title: $title,
			uuid: uuid,
			kind: "operation"
		};
		job.register(jobParams);
	},
	closePopups: function(box, event) {
		if (this.autoCloseDialogs) {
			var ids = Object.keys(this.autoCloseDialogs);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				var dlg = this.autoCloseDialogs[ids[ii]];
				if (dlg && !dlg.disposed) {
					if (dlg._content && dlg._content == box) {
						continue;
					}
					if (dlg._content && dlg._content.onBeforeAutoClose && !dlg._content.onBeforeAutoClose(box)) {
						continue;
					}
					if (!event || !dlg.isTargetInBoundary(event)) {
						dlg.close();
						delete this.autoCloseDialogs[ids[ii]];
					}
				}
			}
			// this.autoCloseDialogs = null;
		}

	},
	onBeforClick: function(box, event) {
		this.ddManager.stop();
		this.closePopups(box, event);
	},

	formatHTMLMessage: function(message) {
		return message.replace(/\n/g, "<BR/>");
	},

	showDiagnoses: function(message, item, options) {
		if (item && item.page) {
			var diagnosePage = item.page.diagnosePage || item.page;
			if (diagnosePage.diagnosesPanel) {
				diagnosePage.diagnosesPanel.showDiagnoses(message, item.page, options);
			} else {
				diagnosePage.showDiagnoses(message, options);
			}
		} else {
			if (this.diagnosesPanel) {
				this.diagnosesPanel.showDiagnoses(message, item, options);
			} else {
				if (this.mainPage) {
					this.mainPage.showDiagnoses(message, options);
				} else { // default: message box
					var options = {};
					var onlyOneDiagnose = message.$diagnoses.length == 1;
					options.$message = (onlyOneDiagnose && message.$diagnoses[0].$message) || this.localize.userProfile_siteMsgboxMsg;
					options.$type = "alert";
					options.$buttons = "ok";
					options.$title = this.localize.siteMsgboxTitle;
					options.$diagnoses = message.$diagnoses;
					options.$origin = onlyOneDiagnose ? message.$diagnoses[0].$origin : "";
					this.showMessage(options);
				}
			}
		}
	},
	logon: function(onAfterLogon) {
		var self = this;
		var prevdataset;
		if (self.userProfile) {
			prevdataset = self.userProfile.buildWCContent();
			self.userProfile.dispose(self.userProfile);
			self.userProfile = null;
		}
		self.userProfile = new(self.siteOptions.userProfileClass)();
		self.localize = this.localize;
		self.userProfile._initializePage();
		self.userProfile.onLogonProcessing = true;
		document.controller.loadWorkingCopy({
			menu: {
				$url: self.$item.$userProfileUrl,
				sendData: prevdataset
			},
			article: self.userProfile,
			callback: function() {
				var dataset = self.userProfile.dataset;
				self.developpementMode = dataset && dataset.developpementMode;
				self.enableTestRobot = dataset && dataset.enableTestRobot;
				delete self.userProfile.onLogonProcessing;
				onAfterLogon();
			}
		});

	},
	_runJobsViewer: function() {
		// get trackers list in order to run jobs viewer if necessary
		var $trackersUrl = "/sdata/$trackers";
		document.controller.sendRequest(null, {
			method: "GET",
			$location: {
				$url: $trackersUrl
			}
		}, function(data, response, $url) {

			if (data.$resources && data.$resources.length > 0) {
				for (var ii = 0, jj = data.$resources.length; ii < jj; ii++) {
					var resource = data.$resources[ii];
					var params = {
						$location: resource.location || resource.$location,
						$state: resource.phase,
						$title: resource.title || "(Title not retrieved)",
						uuid: resource.uuid,
						kind: "operation"
					};
					document.site.registerJobSyra(params.$location, params.$state, params.$title, params.uuid);
				}
			}
		}, function(error, httpquery) {
			this.requestControllers.http._onResponseError(httpquery, error);
		});
	},

	getSessionId: function() {
		return helpers.http.parseCookie(document.cookie)["syracuse.sid"] || "";
	},
	showMessage: function(options, displayDisabled) {
		if (this.messageBox) {
			this.messageBox.dispose();
		}
		options.$type = options.$type || "alert";
		this.messageBox = new MessageBox();
		this.messageBox.$prototype = {};
		this.messageBox.displayDisabled = displayDisabled; // property necessary for htmleditor msgbox
		this.initializeNewItem(this.messageBox, options);
		this.messageBox.loadBox();
	},
	_releaseMainPage: function() {
		var prev = this.mainPage;
		if (prev && prev.externalAdapter) {
			prev.externalAdapter.releaseMainPage({
				mainPage: prev,
				doEvent: function() {
					setTimeout(function() {
						document.controller.disposeObject(prev);
					}, 10);
				}
			});
		}
		this.emptyDom(this.body);
	},
	unload: function() {
		$(document).unbind();
		this.dispose();
		if (document.controller) {
			document.controller.dispose();
		}
		document.site = document.controller = null;
	},
	trimString: function(ss) {
		return typeof ss == 'string' || ss instanceof String ? ss.trim() : ss;
	},
	setZIndex: function(item) {
		this._zIndex++;
		if (item) {
			item.style.zIndex = this._zIndex;
		}
		return this._zIndex;
	},
	toggleClass: function(dom, css, show) {
		if (dom) {
			if (show) {
				if (dom.className.indexOf(css) < 0) {
					dom.className += (" " + css);
				}
			} else {
				dom.className = dom.className.replace(css, "");
			}
		}
	},
	getInnerSize: function(domItem) {
		var size = {
			height: domItem.clientHeight,
			width: domItem.clientWidth
		};
		var style = window.getComputedStyle(domItem);
		size.height -= parseFloat(style.getPropertyValue("padding-top"));
		size.height -= parseFloat(style.getPropertyValue("padding-bottom"));
		size.width -= parseFloat(style.getPropertyValue("padding-left"));
		size.width -= parseFloat(style.getPropertyValue("padding-right"));
		return size;
	},
	getBoundingClientRect: function(dom, area) {
		var rect = dom.getBoundingClientRect();
		area = area || {};
		area.top = Math.round(rect.top);
		area.bottom = Math.round(rect.bottom);
		area.left = Math.round(rect.left);
		area.right = Math.round(rect.right);
		area.width = Math.round(rect.width);
		area.height = Math.round(rect.height);
		return area;
	},
	toggleDom: function(dom) {
		dom.style.display = this.isDomDisplay(dom) ? "none" : "";
	},
	isDomDisplay: function(dom) {
		return dom.style.display != "none";
	},
	emptyDom: function(domNode) {
		if (domNode) {
			while (domNode.firstChild) {
				domNode.removeChild(domNode.firstChild);
			}
		}
	},
	isParentNode: function(parent, child) {
		while (child && child != document) {
			if (child == parent) {
				return true;
			}
			child = child.parentNode;
		}
		return false;
	},
	removeDomChild: function(child) {
		if (child && child.parentNode) {
			child.parentNode.removeChild(child);
		}
	},
	moveChildNodes: function(source, target) {
		while (source.childNodes.length) {
			target.appendChild(source.childNodes[0]);
		}
	},
	isScrolledIntoView: function($$elem, $$view) {
		if ($$view) {
			var docViewTop = $$view.scrollTop();
			var docViewBottom = docViewTop + $$view.height();
			var elemTop = $$elem.position().top;
			var elemBottom = elemTop + $$elem.height();

			return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
		} else {
			return true;
		}
	},
	disableItem: function(item, isDisabled) {
		if (isDisabled) {
			item.setAttribute("disabled", item.syraIsDisabled = isDisabled);
		} else {
			delete item.syraIsDisabled;
			item.removeAttribute("disabled");
		}
		this.toggleClass(item, "s-disabled", isDisabled);
	},
	_getHomeMenu: function() {
		if (this.menuItems && this.menuItems.$home) {
			return this.menuItems.$home[0];
		}
		return null;
	},
	gotoHome: function() {
		this.clickMenu("$home");
	},
	gotoHelp: function() {
		this.clickMenu("$help");
	},
	gotoPage: function(btn) {
		if (this.mainPage.isDashBoard) {
			document.controller.changeMainPage(btn.syraLink);
			return;
		}
		if (this.mainPage.isFusionPage) {

			return;
		}
	},
	getFieldWidth: function($field, useSmartMode, $titleLength, isSortable) {
		var $width;
		if ($field.$type) {
			if ($field.$format) {
				$width = this._fieldWidths[$field.$type + $field.$format];
			}
			if (!$width) {
				$width = this._fieldWidths[$field.$type];
			}
		}
		if (!$width) {
			$width = {};
		}
		var widthValue = $width.$width;
		var $maxLength = 0;
		if ($field.$precision) {
			$maxLength = $field.$precision + 2 * ($field.$precision / 3); //separator
		}
		if ($field.$scale) {
			$maxLength += $field.$scale + 1; //for separator
		}
		if (!$maxLength) {
			$maxLength = $field.$displayLength || $field.$maxLength || $width.$maxLength;
		}
		if (useSmartMode) {
			$maxLength = $maxLength || _fieldSmartWidth.large;
			if ($maxLength <= _fieldSmartWidth.small) {
				$maxLength = _fieldSmartWidth.small;
			} else {
				if ($maxLength <= _fieldSmartWidth.medium) {
					$maxLength = _fieldSmartWidth.medium;
				} else {
					$maxLength = _fieldSmartWidth.large;
				}
			}
			widthValue = (_fieldSmartWidth.charWidth * $maxLength);
		} else {
			if (isSortable) {
				$titleLength += 2;
			}
			if ($titleLength > $maxLength) {
				if (($titleLength - $maxLength) <= 4) {
					$maxLength = $titleLength;
				} else {
					if (isSortable) {
						$maxLength += 2;
					}
				}
				$maxLength = Math.max(isSortable ? 7 : 5, $maxLength);
			} else {
				if (isSortable) {
					$maxLength += 2;
				}
			}
			if (!widthValue) {
				$maxLength = Math.min(_fieldSmartWidth.medium, $maxLength || _fieldSmartWidth.medium);
				widthValue = (_fieldSmartWidth.charWidth * $maxLength);
			}

		}
		return widthValue;
	},
	setWidgetResizable: function(options) {
		var widgetResizer = new WidgetResizer();
		widgetResizer.setResizable(options);
		return widgetResizer;
	},
	attachResizeListeners: function(attach, page) {
		if (page) {
			if (!page._unregisterResizer) {
				var parent = page.dialogWrapper || this;
				if (parent && parent.resizeListener) {
					if (attach) {
						parent.resizeListener.add(page);
					} else {
						parent.resizeListener.remove(page);
					}
				}
			}
		}
		if (attach) {
			(page.resizeListener = new ResizeListener()).load();
		} else {
			if (page.resizeListener) {
				page.resizeListener.dispose();
				page.resizeListener = null;
			}
		}

	},
	notifyRequestSurvey: function(pendingRequests) {
		if (!this.requestSurvey) {
			this.requestSurvey = document.createElement("div");
			this.requestSurvey.id = "s-site-request";
			this.setZIndex(this.requestSurvey);

			this.layoutSlot.appendChild(this.requestSurvey);
			this.requestSurveyCount = document.createElement("label");
			this.requestSurveyCount.id = "s-site-request-count";
			this.requestSurvey.appendChild(this.requestSurveyCount);
		}
		pendingRequests = pendingRequests || 0;
		this.requestSurveyCount.textContent = pendingRequests;
		if (pendingRequests > 0) {
			if (this.requestSurvey.style.right != "0px") {
				this.requestSurvey.style.right = "0px";
			}
		} else {
			this.requestSurvey.style.right = "-80px";
		}
	},
	onMainPageChange: function($itemPage) {
		this.body.style.display = "none";
		$itemPage.boxParent = null;
		$itemPage.layoutSlot = this.body;
		this._releaseMainPage();
		if (this.diagnosesPanel) {
			this.diagnosesPanel.clean();
		}
		this.toggleTopPanel(false);

		this.mainPage = this.loadNewPage($itemPage);
		this.mainPage.openerHttpQuery = $itemPage.httpQuery;
		this.mainPage.isMainPage = true;
		this.updateDocumentTitle();
		this.body.style.display = "";
		this.resize();
		this.spyGateway.setSpyedPage(this.mainPage);
		return this.mainPage;
	},
	addDragDropManager: function() {
		(this.ddManager = new DragDropManager()).load();
	},
	drawBox: function() {
		var self = this;
		self.addDragDropManager();
		self._renderHeader();
		self.$$item = $(self.body = document.createElement("div"));
		self.body.id = "s-site-body";
		self.body.setAttribute("tabindex", "1"); // add for receive keyboard event  for shortcut
		self.layoutSlot.appendChild(self.body);
		self.logon(function() {
			self._onLogon();
		});
	},
	_onLogon: function() {
		if (!this._isLocalChanging) {
			this.isUserLogonEnd = true;
			document.controller.startNavigation();
			if (this.mainPage) {
				this.mainPage.ensureDesignerOpenerVisibility();
			}
			this.layoutSlot.style.display = "";
			if (this.bookmarksBar) {
				this.bookmarksBar.loadBookmarks();
			}
			this.resize();
		}
	},
	getPreferences: function(key, defaultValues, target) {
		var values = this.userProfile.dataset.sitePreferences;
		if (values) {
			values = (values[this.$item.$device] || {})[key];
		}
		if (values === undefined && this.$item.$preferences) {
			values = this.$item.$preferences[key];
		}
		values = values || {};
		if (defaultValues) {
			var keys = Object.keys(defaultValues);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				if (values[keys[ii]] === undefined) {
					values[keys[ii]] = defaultValues[keys[ii]];
				}
			}
		}
		if (target) {
			this.applyValues(target, values);
		}
		return values;
	},
	setPreferences: function(key, source, props) {
		var sitePreferences = this.userProfile.dataset.sitePreferences = this.userProfile.dataset.sitePreferences || {};
		var preferences = sitePreferences[this.$item.$device] = sitePreferences[this.$item.$device] || {};
		if (props) {
			this.applyValues(preferences[key] = preferences[key] || {}, source, props);
		} else {
			preferences[key] = source;
		}
		this.userProfile.saveSitePreferences();
	},
	applyValues: function(target, values, keys) {
		if (target) {
			keys = keys || Object.keys(values);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				target[keys[ii]] = values[keys[ii]];
			}
		}
	},
	onUserProfileChange: function(reloadMainPage) {
		var self = this;
		// adding localePreferences to globals.context
		if (self.userProfile.dataset && self.userProfile.dataset.selectedLocale) {
			globals.context = globals.context || {};
			var localePreferences = globals.context.localePreferences = self.userProfile.dataset.selectedLocale;
			var map = globals.context.localeMap = globals.context.localeMap || {};
			var lang = localePreferences && localePreferences.code || "en";
			if (lang == locale.current) {
				map[lang] = lang;
			}
			if (map[lang] == null) {
				map[lang] = lang;
				self._isLocalChanging = true;
				locale.setCurrent(function(err) {
					self.loadSiteLocalize();
					delete self._isLocalChanging;
					if (self.isUserLogonEnd) {
						document.controller.reloadMainPage();
					} else {
						self._onLogon();
					}
				}, lang, localePreferences);
				return;
			}
		}
		if (reloadMainPage) {
			document.controller.reloadMainPage();
		} else {
			if (self.mainPage) {
				self.updateDocumentTitle();
				self.mainPage.ensureDesignerOpenerVisibility();
			}
		}
	},
	updateDocumentTitle: function() {
		if (this.mainPage) {
			var title = this.mainPage.getTitle();
			if (title) {
				if (this.$item.$isSecurityTitleVisible !== false) {
					if (this.userProfile.dataset) {
						if (this.userProfile.dataset.selectedRole) {
							title += " (" + this.userProfile.dataset.selectedRole.description + ")";
						}
						if (this.userProfile.dataset.selectedEndpoint) {
							title += " (" + this.userProfile.dataset.selectedEndpoint.description + ")";
						}
					}
				}
				this.userProfile.showPageSecurity(this.mainPage);
				document.title = title;
			}
		}
	},
	openDialog: function(options) {
		var dialog = new Dialog();
		dialog.open(options);
		return dialog;
	},
	appendJobsViewer: function(jobsViewer) {
		if (this.layoutSlot) {
			this.layoutSlot.appendChild(this.jobsViewer ? this.jobsViewer.domItem : (this.jobsViewer = jobsViewer).domItem);
		}
	},
	registerScreenDesigner: function(add, designer) {
		if (add) {
			if (!this.screenDesigners) {
				this.screenDesigners = [];
			} else {
				var top = this.screenDesigners && this.screenDesigners.length && this.screenDesigners[this.screenDesigners.length - 1];
				if (top) {
					top.onTopScreenDesigner(false);
				}
				designer._toggleFullScreenDesigner(false);
			}
			this.header.style.display = "none";
			this.screenDesigners.push(designer);
		} else {
			if (this.screenDesigners) {
				var index = this.screenDesigners.indexOf(designer);
				if (index >= 0) {
					this.screenDesigners.splice(index, 1);
				}
				if (this.screenDesigners.length == 0) {
					delete this.screenDesigners;
					this.header.style.display = "";
				} else {
					var top = this.screenDesigners && this.screenDesigners.length && this.screenDesigners[this.screenDesigners.length - 1];
					if (top) {
						top.onTopScreenDesigner(true);
					}
				}
			}
		}
	},
	resize: function(onBoxToggle) {
		if (this.body) {
			var siteRect = this.getBoundingClientRect(this.layoutSlot);
			var bodyRect = this.getBoundingClientRect(this.body);
			this.body.style.height = (siteRect.height - bodyRect.top) + "px";
		}
		this.isResizing = true;
		this.resizeListener.notifyObservers(onBoxToggle);
		this.isResizing = false;
		this.ensureUILocker();
	},
	onClickPicker: function(btn, event) {
		switch (btn.getAttribute("data-s-picker")) {
			case "s-site-top-pn-opener-link":
				this.toggleTopPanel();
				return false;
			case "s-page-designer-opener":
				var page;
				this.toggleTopPanel(false);
				if (this.mainPage.isFusionPage) {
					page = this.fusionGateway.activatedBook.selectedSheet;
				} else {
					page = this.getTopDialogPage();
					if (page) {
						page = page._content;
					}
				}
				page = page || this.mainPage;
				if (page) {
					page.designArticle(true);
				}
				return false;
			case "s-site-jobs-viewer-opener-link":
				this.jobsViewer && this.jobsViewer.toggle();
				return false;
			case "s-site-sage":
				this.gotoHome();
				return false;
			case "$spygateway":
				if (event.ctrlKey) {
					this.openSpy();
				}
				return false;
		}
		return true;
	},

	closeSearchFieldPopup: function() {
		this.searchField.searchField && this.searchField.searchField._autoCompletePopup && this.searchField.searchField._autoCompletePopup.close();
	},
	toggleTopPanel: function(show, event) {
		if (show !== false && !this._topPanel) {
			document.dir === 'rtl' ? 'left' : 'right';
			var rect = this.getBoundingClientRect(this._topPanelOpener);
			if (document.dir === 'rtl') {
				this._topPanelContainer.style.left = rect.left + "px";
			} else {
				this._topPanelContainer.style.right = (this.getBoundingClientRect(this.layoutSlot).right - rect.right) + "px";
			}
			this._topPanel = new(this._topPanelClass || SiteTopPanel)();
			this._topPanel.$prototype = this.$prototype;
			this._topPanel.page = this;
			this.emptyDom(this._topPanelContainer);
			this._topPanelContainer.style.display = "";
			this.emptyDom(this._topPanelContainer);
			this._topPanelContainer.style.display = "";
			this._topPanel.layoutSlot = this._topPanelContainer;
			this._topPanel.loadBox();
		} else {
			if (this._topPanel) {
				if (event && $(event.target).closest(this._topPanel.$$item).length) {
					return;
				}
				this._topPanel.closePanel();
			}
			delete this._topPanel;
		}
		if (this._topPanelOpener) {
			this.toggleClass(this._topPanelOpener, "s-open", this._topPanel != null);
		}
	},
	_appendTopPanelOpener: function(layoutSlot, topPanelClass) {
		this.setArticleId(this.layoutSlot);
		this._topPanelOpener = document.createElement("a");
		this._topPanelOpener.className = "s-site-top-pn-opener-link";
		this._topPanelOpener.setAttribute("href", "#");
		this._topPanelOpener.setAttribute("data-s-picker", "s-site-top-pn-opener-link");
		this._topPanelClass = topPanelClass;
		layoutSlot.appendChild(this._topPanelOpener);
	},
	openSpy: function() {
		this.spyGateway.open();
	},
	_renderHeader: function() {
		this.header = document.createElement("header");
		this.header.id = "s-site-header";
		this.layoutSlot.appendChild(this.header);

		this._topPanelContainer = document.createElement("div");
		this._topPanelContainer.id = "s-site-top-pn";
		this.layoutSlot.appendChild(this._topPanelContainer);

		// top right
		this.headerTopRight = document.createElement("div");
		this.headerTopRight.id = "s-site-header-top-right";


		var emptyCell = document.createElement("div");
		emptyCell.id = "s-site-header-empty-cell";
		this.headerTopRight.appendChild(emptyCell);

		this.pageDesignerOpener = document.createElement("a");
		this.pageDesignerOpener.className = "s-page-designer-opener";
		this.pageDesignerOpener.style.visibility = "hidden";
		this.pageDesignerOpener.setAttribute("href", "#");
		this.pageDesignerOpener.setAttribute("data-s-picker", "s-page-designer-opener");
		this.headerTopRight.appendChild(this.pageDesignerOpener);

		this._jobsViewerOpener = document.createElement("a");
		this._jobsViewerOpener.className = "s-jobs-viewer-opener";
		this._jobsViewerOpener.setAttribute("href", "#");
		this._jobsViewerOpener.setAttribute("data-s-picker", "s-site-jobs-viewer-opener-link");
		this._jobsViewerOpener.style.display = "none";
		this.headerTopRight.appendChild(this._jobsViewerOpener);

		this._appendTopPanelOpener(this.headerTopRight);

		this.loadNewItem(this.headerTopRight, {
			$clientId: "s-site-help-link",
			$bind: "$help",
			$category: "link",
			$noText: true,
			$skin: "s-site-help-link"
		});

		this.homeLink = this.loadNewItem(this.headerTopRight, {
			$bind: "$home",
			$category: "link",
			$noText: true,
			$skin: "s-site-home"
		});

		this.loadNewItem(this.headerTopRight, {
			$bind: "$navigation",
			$category: "link",
			$noText: true,
			$skin: "s-site-navigation"
		});

		this.searchField = searchRequest.loadRequest(this.headerTopRight);
		this.header.appendChild(this.headerTopRight);

		this.headerBottom = document.createElement("div");
		this.headerBottom.id = "s-site-header-bottom";

		this.appendLogo();

		var bookMarsSlot = document.createElement("div");
		bookMarsSlot.id = "s-site-header-bottom-bookmarks";
		this.headerBottom.appendChild(bookMarsSlot);

		this.bookmarksBar = new BookmarksBar();
		this.bookmarksBar.load(bookMarsSlot);

		this.header.appendChild(this.headerBottom);
	},
	appendLogo: function() {
		this.headerLogo = document.createElement("a");
		this.headerLogo.id = "s-site-header-logo";
		this.headerLogo.setAttribute("data-s-picker", "s-site-sage");
		this.headerBottom.appendChild(this.headerLogo);
	},
	enablePageDesign: function(enable) {
		if (this.pageDesignerOpener) {
			this.pageDesignerOpener.style.visibility = enable ? "" : "hidden";
		}
	},
	loadLocalizeData: function() {
		this.localize = locale.resources(module)();
	},
	loadSiteLocalize: function() {
		this.loadLocalizeData();
		if (this.pageDesignerOpener) {
			this.pageDesignerOpener.title = this.localize.userProfile_siteAuthoringOpen;
		}
		if (this.fusionHeaderHomeLink) {
			this.fusionHeaderHomeLink.title = this.localize.userProfile_siteTabLink;
		}
		if (this.userProfile) {
			var selectedLocale = this.userProfile.getSelectedLocale();
			this.dataset.language = selectedLocale.code || "";
			this.dataset.helpLanguage = selectedLocale.code || "";
		}
	},
	loadBox: function(siteOptions) {
		this.pagesMap = {};
		this._unregisterResizer = true;
		this.siteOptions = siteOptions;
		document.site = this;
		this.loadSiteLocalize();
		this.$autoFetch = false;
		this._childPageOffset = 1;
		this._initializePage();
		this.spyGateway = new SpyGateway();
		this._fieldWidths = siteOptions._fieldWidths || _fieldWidths;
		(document.controller = new(this.siteOptions.controllerClass || Controller)()).initialize();

		if (this.siteOptions.fusionGatewayClass) {
			this.fusionGateway = new this.siteOptions.fusionGatewayClass();
		}
		this.requestControllers = {
			http: require("syracuse-ui/lib/controller/httpController")
		};
		this.agents = {};
		this.externalAdapter = new ExternalAdapter();
		this._zIndex = 100;
		$(window).unload = function() {
			if (document.site) {
				document.site.unload();
			}
		};
		this.layoutSlot = (this.$$layoutSlot = $("#s-site"))[0];
		this.layoutSlot.style.display = "none";
		(this._eventListener = new EventListener()).load();

		this.$prototype = this.siteOptions.$prototype;
		this.initializeNewItem(this, this.siteOptions.$item);
		this.setArticleId(this.layoutSlot);
		RawPage.prototype.loadBox.call(this);
		this.onWindowError();
		disconnectUtils.onWindowUnload(this);
		if (this.headerLogo) {
			var homeMenu = this._getHomeMenu();
			if (homeMenu) {
				this.headerLogo.title = homeMenu.mn.title;
				this.headerLogo.setAttribute("href", homeMenu.mn.getAttribute("href"));
			}
		}
		return this;
	},
	onWindowError: function() {
		var self = this;
		window.onerror = function(errorMsg, url, lineNumber, error) {
			self.onUncaughtError(errorMsg, url, lineNumber, error);
		};
	},
	getBrowserName: function() {
		var N = navigator.appName,
			ua = navigator.userAgent;
		var M = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
		M = M ? M[1] : N;
		return M;
	},
	/**
	 * Get browser name and version in one two length array
	 * --> [browser name, browser version]
	 */
	getBrowserInformation: function() {
		var N = navigator.appName,
			ua = navigator.userAgent,
			tem;
		var M = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
		if (M && (tem = ua.match(/version\/([\.\d]+)/i)) != null) {
			M[2] = tem[1];
		}
		M = M ? [M[1], M[2]] : [N, navigator.appVersion, '-?'];
		return M;
	},
	getBrowserVersion: function() {
		var N = navigator.appName,
			ua = navigator.userAgent,
			tem;
		var M = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
		if (M && (tem = ua.match(/version\/([\.\d]+)/i)) != null) {
			M[2] = tem[1];
		}
		M = M ? [M[1], M[2]] : [N, navigator.appVersion, '-?'];
		return M[1];
	},
	onUncaughtError: function(errorMsg, url, lineNumber, error) {
		if (errorMsg && errorMsg.indexOf("s-is-reload-requested") >= 0) {
			var onSourceLoading = sessionStorage.getItem("onSourceLoading") || 0;
			if (onSourceLoading < 2) {
				sessionStorage.setItem("onSourceLoading", ++onSourceLoading);
				document.location.reload(true);
			} else {
				this.showDiagnoses({
					$diagnoses: [{
						$severity: "fatal",
						$message: this.localize.site_src_reload_fail
					}]
				});
			}
		} else {
			var options;
			var self = this;
			if (self.mainPage) {
				options = {
					errorMsg: errorMsg,
					url: url,
					lineNumber: lineNumber,
					error: error,
					doEvent: function() {
						// diagnose component will be improved, with specific msg and stack properties
						var $diagnose = {};
						$diagnose.$message = options.errorMsg;
						$diagnose.$message += error ? "\nStack:\n" + error.stack : "";
						$diagnose.$severity = "error"; //"alert";
						self.showDiagnoses({
							$diagnoses: [$diagnose]
						});
					}
				};
				if (self.mainPage.externalAdapter)
					self.mainPage.externalAdapter.onUncaughtError(options);
			} else {
				self.showDiagnoses({
					$diagnoses: [{
						$severity: "fatal",
						$message: errorMsg
					}]
				});
			}
		}
	},
	onError: function(error) {
		this.onUncaughtError(error.message, error.fileName, error.lineNumber, error);
	},

	loadNewPage: function($itemPage) {
		var $pageCategory = ($itemPage.$representation.$article ? $itemPage.$representation.$article.$category : null) || $itemPage.$category;
		if (!$pageCategory) {
			switch ($itemPage.$urlParts.representationRoot) {
				case "landingVignetteSelect":
					$pageCategory = "landingVignetteSelect";
					break;
				default:
					switch ($itemPage.$urlParts.$facet) {
						case "$dashboard":
							$pageCategory = "dashboard";
							break;
						case "$navigation_edit":
						case "$navigation":
							$pageCategory = "navigation";
							$itemPage.initData = $itemPage.$representation;
							break;
						case "$landing_edit":
						case "$landing":
							$pageCategory = "landing";
							$itemPage.initData = $itemPage.$representation;
							break;
						default:
							$pageCategory = "page";
							break;
					}
					break;
			}
		}
		var item = new($itemPage.$pageCategoryClass || this.siteOptions.widgetsLibrary.pageCategories[$pageCategory] || this.siteOptions.widgetsLibrary.defaultPageCategory)();
		item.id = this._childPageOffset++;
		item.localize = this.localize;
		item.$pageCategory = $pageCategory;
		item.dialogWrapper = $itemPage.dialogWrapper;
		item.$pageRepresentationURL = $itemPage.$representation.$pageRepresentationURL;
		item.$authorUrl = $itemPage.$representation.$authorUrl;
		item.$urlParts = $itemPage.$urlParts;
		item.$facet = $itemPage.$urlParts.$facet;
		item.$isEditMode = $itemPage.$isEditMode || item.$facet == "$edit";
		if ($itemPage.vignetteField) {
			item.vignetteField = $itemPage.vignetteField;
			delete $itemPage.vignetteField;
		}
		var hackFusion = item.$facet.split("_");
		if (hackFusion.length > 1 && hackFusion[0] == "$fusion") {
			item.$isEditMode = true;
			item.$facet = hackFusion[1];
			item.$fusionPageMeta = $itemPage.$fusionPageMeta;
		}
		item.layoutSlot = $itemPage.layoutSlot;
		item.$prototype = $itemPage.$representation.$prototype;
		var $protoArticle = item.$prototype.$article;
		var $article = (item.initializeArticle) ? item.initializeArticle($itemPage) : $itemPage.$representation.$article;
		if ($article) {
			delete $article.$menus;
		} else {
			$article = $protoArticle;
		}
		$article = item.ensureDefaultArticle($article, item.$prototype);
		if (item.$prototype.$menus) {
			$article.$menus = item.$prototype.$menus;
		} else {
			if ($protoArticle && $protoArticle.$menus) {
				$article.$menus = $protoArticle.$menus;
			}
		}
		/*if (item.$prototype && item.$prototype.$localization && item.$prototype.$hackLocalization) {
         localizationConverter.convertLocalization(item.$prototype, $article);
         }*/
		this.initializeNewItem(item, $article, $itemPage.boxParent);
		if (item.$urlParts && item.$urlParts.params) {
			if (item.$urlParts.params.where) {
				item.$prototype.$where = escape(item.$urlParts.params.where);
			}
			item.$prototype.$filter = item.$urlParts.params.filter;
		}
		item.$item.externalAdapter = $itemPage.externalAdapter;
		item.$autoFetch = ($itemPage.$autoFetch !== false) && ($itemPage.initData == null);
		if ($itemPage.httpQuery && $itemPage.httpQuery.$urlParts) {
			item.$urlParams = $itemPage.httpQuery.$urlParts.params;
		}
		item.$views = $itemPage.$representation.$views;
		item.loadBox($itemPage.initData, $itemPage.$representation.$diagnoses);
		if ($itemPage.onAfterLoadPage) {
			$itemPage.onAfterLoadPage(item);
		}
		$itemPage.$pageCategoryClass = $itemPage.boxParent = $itemPage.layoutSlot = $itemPage.$representation = $itemPage.onAfterLoadPage = $itemPage.dialogWrapper = null;
		item.isPageLoaded = true;
		item.ensurePageVisibility();
		return item;
	},

	registerDialogPage: function(dialog, add) {
		if (add) {
			if (!this._pageDialogs) {
				this._pageDialogs = [];
			}
			this._pageDialogs.push(dialog);
		} else {
			if (this._pageDialogs) {
				for (var ii = 0, jj = this._pageDialogs.length; ii < jj; ii++) {
					if (this._pageDialogs[ii] == dialog) {
						this._pageDialogs.splice(ii, 1);
						break;
					}
				}
			}
		}
	},
	getTopDialogPage: function() {
		if (this._pageDialogs && this._pageDialogs.length > 0) {
			return this._pageDialogs[this._pageDialogs.length - 1];
		}
		return null;
	},
	lockUI: function(delay, isLong, forceFocusLoss) {
		var self = this;
		if (!self._uiLocker) {
			self._uiLocker = document.createElement('div');
			self._uiLocker.className = "s-uilocker-loading";
			self._uiLockerDummyFld = document.createElement('a');
			self._uiLockerDummyFld.setAttribute("href", "#");
			self._uiLockerDummyFld.className = "s-uilocker-loading-blackhole";
			self._uiLocker.appendChild(self._uiLockerDummyFld);
			self.layoutSlot.appendChild(self._uiLocker);
		}
		self._uiLocker.style.display = "";
		if (forceFocusLoss) {
			self._uiLockerDummyFld.focus();
		}
		self._uiLockerTimeout = setTimeout(function() {
			if (isLong) {
				if (!self._uiLockerOverlay) {
					self._uiLockerOverlay = document.createElement('div');
					self._uiLockerOverlay.className = "s-uilocker-overlay";
					self.layoutSlot.appendChild(self._uiLockerOverlay);
				}
				self._uiLockerOverlay.style.display = "";
			}
			self.ensureUILocker();
		}, (delay || 0) > 0 ? delay : 0);
	},
	ensureUILocker: function() {
		if (this._uiLocker && this._uiLocker.style.display !== "none") {
			this.setZIndex(this._uiLocker);
			var width = this.layoutSlot.clientWidth,
				height = this.layoutSlot.clientHeight;
			var top = 0;
			if (this.header && this.header.clientHeight) {
				top = this.header.clientHeight;
				height -= top;
			}
			this._uiLocker.style.top = top + "px";
			this._uiLocker.style.width = width + "px";
			this._uiLocker.style.height = height + "px";
			if (this._uiLockerOverlay && this._uiLockerOverlay.style.display !== "none") {
				var style = this._uiLockerOverlay.style;
				style.top = top + "px";
				style.left = this._uiLocker.style.left;
				style.width = width + "px";
				style.height = height + "px";
				this.setZIndex(this._uiLockerOverlay);
			}
		}
	},
	unlockUI: function() {
		if (this._uiLocker) {
			this._uiLocker.style.display = "none";
			this._uiLocker.style.width = "0px";
			this._uiLocker.style.width = "0px";
		}
		if (this._uiLockerOverlay) {
			this._uiLockerOverlay.style.display = "none";
			this._uiLockerOverlay.style.width = "0px";
			this._uiLockerOverlay.style.width = "0px";
		}
		if (this._uiLockerTimeout) {
			clearTimeout(this._uiLockerTimeout);
			delete this._uiLockerTimeout;
		}
	},
	scrollToField: function(field) {
		var parent = field.articleParent.isRecordArticle ? field.articleParent.articleParent : field.articleParent;
		if (parent.scroller) {
			parent.scroller.ensureFieldVisibility(field);
		} else {
			field.page.scrollToItem(field);
		}
	},
	findArticle: function(item) {
		while (item != null && !item.syraArticle) {
			item = item.parentNode;
		};
		if (item && item.syraArticle) {
			var page = this.pagesMap[item.syraPageId];
			if (page) {
				return item.syraPageId == item.syraArticle ? page : page.findChildArticle(item.syraArticle);
			}
		}
		return null;
	},
	findField: function(target) {
		var article = this.findArticle(target);
		if (article && article.idMap) {
			while (target != null && !target.syra_field_id && !target.syraArticle) {
				target = target.parentNode;
			}
			if (target && target.syra_field_id) {
				return article.idMap[target.syra_field_id];
			}
		}
		return null;
	},
	findBox: function(item) {
		var article = this.findArticle(item);
		var id = item.syraBoxId || item.getAttribute("data-s-box");
		while (item != null && !id) {
			id = item.getAttribute("data-s-box");
			item = item.parentNode;
		}
		var box = null;
		if (article) {
			box = article.idMap[id];
		}
		if (!box && id == article.id) {
			box = article;
		}
		return box;
	},
	findMenu: function(item) {
		var article = this.findArticle(item);
		if (article) {
			var id = item.getAttribute("data-s-menu");
			return (article.id == id) ? article : (article.idMap[id] || null);
		}
		return null;
	},
	registerArticle: function(article) {
		if (article.page == article) {
			this.pagesMap[article.id] = article;
		} else {
			if (article && article.page) {
				article.page._articles.push(article);
			}
		}
	},
	unregisterArticle: function(article) {
		if (article.page) {
			if (article.page == article) {
				delete this.pagesMap[article.id];
			} else {
				if (article.page._articles) {
					article.page._articles.splice(article.page._articles.indexOf(article), 1);
				}
			}
		}
	}
});

exports.load = function($item, $prototype) {
	return (new Site()).loadBox({
		widgetsLibrary: require('./widgetsLibrary'),
		fusionGatewayClass: fusionGatewayClass,
		userProfileClass: userProfileClass,
		$item: $item,
		$prototype: $prototype
	});
};