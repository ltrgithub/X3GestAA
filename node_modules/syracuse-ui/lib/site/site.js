"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _article = require("syracuse-ui/lib/article/article");
var _item = require("syracuse-ui/lib/article/item");
var _tip = require('syracuse-ui/lib/dialog/tip');
var _dialogManager = require('syracuse-ui/lib/dialog/dialogManager');
var ExternalAdapter = require("./aside/externalAdapter").ExternalAdapter;

var _diagnoseCenter = require('syracuse-ui/lib/diagnoses/diagnoseCenter');
var _dragDropManager = require("syracuse-ui/lib/site/tools/dragDropManager");

var _shortCuts = require("syracuse-ui/lib/events/shortCutInvoker");
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var _controller = require('syracuse-ui/lib/controller/controller');
var _workingCopy = require('syracuse-ui/lib/controller/workingCopy');
var _dataset = require('syracuse-ui/lib/controller/dataset');
var _eventListener = require('syracuse-ui/lib/events/eventListener');
var _locale = require('syracuse-core/lib/locale');

var _pageBuilder = require("syracuse-ui/lib/page/pageBuilder");

var _trackersManager = require('syracuse-ui/lib/tracker/trackersManager');

var _fusion = require('syracuse-ui/lib/fusion/fusionGateway').gateway;
var UserProfile = require('./userProfile').UserProfile;
var _layoutValidator = require("syracuse-ui/lib/article/layout/layoutValidator");
var _layoutUpdater = require("syracuse-ui/lib/article/layout/layoutUpdater");
var _expressionMaker = require('./tools/expressionMaker');
var _localizer = require('syracuse-ui/lib/localization/localizer');
var _url = require('syracuse-ui/lib/site/tools/url');
var filterMaker = require('syracuse-ui/lib/site/filter/filterMaker');
var _domHelper = require('syracuse-ui/lib/site/tools/domHelper');
var _uiLocker = require('syracuse-ui/lib/site/tools/uiLocker');
var _maximizer = require('syracuse-ui/lib/site/tools/maximizer');
var _bookmarks = require("syracuse-ui/lib/site/aside/bookmarks");
var _helpCenter = require('syracuse-ui/lib/site/help/helpCenter');
var _menusHelper = require('syracuse-ui/lib/menus/menusHelper');
var _fieldHelper = require('syracuse-ui/lib/field/helpers/fieldHelper');
var _topPanel = require('syracuse-ui/lib/site/aside/topPanel');
var _searcher = require('syracuse-ui/lib/search/searcher');
var _qualityController = require('syracuse-ui/lib/site/quality/qualityController');
var jsurl = require('jsurl/lib/jsurl');
var SocketHandler = require('syracuse-ui/lib/notifications/socketHandler');
var _widgets = require('syracuse-ui/lib/site/widget/widgets');

var _styleSheetPath = "/syracuse-ui/themes/desktop/";
var _styleSheets = {};
var _themeStyleSheet;

function _unloadStyleSheet(name) {
	var link = _styleSheets[name];
	link && syra_site.documentHeader.removeChild(link);
	delete _styleSheets[name];
}

var _config = {
	size: {
		minWidth: 650,
		dlgResizeMinWidth: 400,
		dlgResizeMinHeight: 300
	}
};

function Site() {}

exports.Site = helpers.defineClass(Site, DesktopPage, {
	validateLayoutContent: function(article, boxParent) {
		if (article.childrenSection) {
			for (var mm = 0, kk = article.childrenSection.length; mm < kk; mm++) {
				if (!boxParent || boxParent.isChild(article.childrenSection[mm])) {
					this.ensureSectionVisibility(article.childrenSection[mm]);
				}
			}
		}
		var layoutContent = (boxParent || article).layoutContent;
		layoutContent && _layoutValidator.validate(layoutContent, true);
	},
	ensureSectionVisibility: function(section) {
		var isVisible = true;
		if (section.isSection && !section.isVignetteField) {
			isVisible = false;
			if (section.$item && section.$item.$isEmptyVisible) {
				isVisible = true;
			} else {
				if (section.childrenSection) {
					for (var ii = 0, jj = section.childrenSection.length; ii < jj; ii++) {
						if (this.ensureSectionVisibility(section.childrenSection[ii])) {
							isVisible = true;
						}
					}
				}
				if (!isVisible && section.boxChildItems.length) {
					for (var ii = 0, jj = section.boxChildItems.length; !isVisible && ii < jj; ii++) {
						isVisible = !section.boxChildItems[ii].isInvisible;
					}
				}
			}
			if (isVisible == section.isInvisible || section.isInvisible === undefined) {
				section.isInvisible = !isVisible;
				if ((section.isInvisible !== section.$isHidden) || (!section.isInvisible && !section.$isHidden && section.isItemHidden)) {
					section.showSection(!(section.isInvisible || section.$isHidden));
				}
			}
		}
		return isVisible;
	},
	ensureArticleVisibility: function(article, resizeIfNeed, boxParent) {
		if (article.page == article) {
			if (!article.isPageLoaded || article._isDataChanging) {
				return;
			}
			resizeIfNeed = true;
		}
		this.validateLayoutContent(article, boxParent);
		resizeIfNeed && article.resizeArticle && article.resizeArticle(true, boxParent);
	},
	loadStyleSheet: function(name, isExtended) {
		if (!isExtended) {
			name = _styleSheetPath + name;
		}
		if (!_styleSheets[name]) {
			var link = _styleSheets[name] = document.createElement("link");
			link.syraName = name;
			link.setAttribute("rel", "stylesheet");
			link.setAttribute("type", "text/css");
			link.setAttribute("href", name);
			if (_themeStyleSheet) {
				this.documentHeader.insertBefore(link, _themeStyleSheet);
			} else {
				this.documentHeader.appendChild(link);
			}
			return link;
		}
	},
	applyTheme: function(theme) {
		if (theme && theme.cssFiles) {
			var name = theme.cssFiles[0].path.toLowerCase();
			if (name.indexOf(".css") < 0) {
				name = "custom/" + name + ".css";
				if (_themeStyleSheet) {
					if (_themeStyleSheet.syraName == name) {
						return;
					}
					_unloadStyleSheet(_themeStyleSheet.syraName);
				}
				_themeStyleSheet = null;
				_themeStyleSheet = this.loadStyleSheet(name);
			}
		} else {
			_themeStyleSheet && _unloadStyleSheet(_themeStyleSheet.syraName);
			_themeStyleSheet = null;
		}
	},
	getBrowserIdentity: function() {
		if (!this._browserIdentity) {
			var M = navigator.userAgent.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
			this._browserIdentity = {
				name: (M ? M[1] : navigator.appName).toLowerCase()
			};
			var tem;
			if (M && (tem = navigator.userAgent.match(/version\/([\.\d]+)/i)) != null) {
				M[2] = tem[1];
			}
			this._browserIdentity.info = M ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
			this._browserIdentity.version = this._browserIdentity.info[1];
			this._browserIdentity.isFireFox = this._browserIdentity.name == "firefox";
			this._browserIdentity.isSafari = this._browserIdentity.name == "safari";
			this._browserIdentity.isMSIE = this._browserIdentity.name == "msie";
		}
		return this._browserIdentity;
	},
	checkMainPageBookmarkStatus: function() {
		this.bookmarks && this.bookmarks.checkMainPageStatus();
	},

	randomStr: function(m) {
		var m = m || 9,
			s = '',
			r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
		for (var i = 0; i < m; i++) {
			s += r.charAt(Math.floor(Math.random() * r.length));
		}
		return s;
	},
	logout: function(doPost) {
		if (!doPost && syra_fusion) {
			syra_fusion.onUserActionUnload(function() {
				syra_site.logout(true);
			}, null, "logout");
			return;
		}
		_controller.postQuery({
			$title: syra_local.siteLogout,
			$method: "POST",
			$url: "/logout",
			httpHeaders: {
				authorization: "basic"
			}
		}, null, null, function($location, data) {
			syra_site.hasDoneLogOut = true;
			window.open($location.$url, "_self");
		}, function($diagnoses) {
			syra_diagnose.showDiagnoses({
				$diagnoses: $diagnoses
			});
			if (!syra_site.mainPage || syra_site.mainPage.disposed) {
				syra_menus.click.home();
			}
		});
	},
	onMenuClick: function(menuItem) {
		switch (menuItem.$bind) {
			case "$designerDocumentation":
			case "$documentation":
				if (!menuItem.$documentationUrl) {
					menuItem.$documentationUrl = menuItem.$sourceUrl;
				}
				var edp = this.userProfile.getSelectedEndpoint();
				menuItem.$sourceUrl = menuItem.$documentationUrl + (edp ? ("&ep=" + edp.$uuid) : "");
				break;
			case "$help":
				_helpCenter.openPopup(menuItem);
				return false;
			case "$legal":
				_helpCenter.openLegalPage(menuItem);
				return false;
			default:
				if (this.bookmarks && menuItem.$bind && menuItem.$bind.split("-")[0] === "bookmark") {
					this.bookmarks.onLinkClick(menuItem);
					return false;
				}
				break;
		}
		return true;
	},
	dispose: function() {
		_eventListener.dispose();
		syra_fusion && syra_fusion.dispose();
		this.bookmarks && this.bookmarks.dispose();
		_trackersManager.dispose();
		_topPanel.dispose();
		_uiLocker.dispose();
		_helpCenter.dispose();
		DesktopPage.prototype.dispose.call(this);
		_dragDropManager.dispose();
		_diagnoseCenter.box.dispose();
		_dialogManager.dispose();
		_item.dispose();
		var keys = Object.keys(window);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			var key = keys[ii];
			if (key.indexOf("syra_") >= 0) {
				delete window[key];
			}
		}
		_themeStyleSheet = _styleSheets = null;
	},
	_focusBox: function(box, hasFocus) {
		if (box) {
			var target = box.layoutSlot || box.body;
			if (!target && box.domItem) {
				target = box.domItem;
			}
			if (target) {
				if (box != box.page) {
					_domHelper.toggleClass(target, "s-selected-box", hasFocus);
				}
			}
		}
	},

	logon: function(onAfterLogon) {
		var self = this;
		var prevdataset;
		if (self.userProfile) {
			prevdataset = self.userProfile.buildWCContent();
			self.userProfile.dispose(self.userProfile);
			self.userProfile = null;
		}
		self.userProfile = new UserProfile();
		self.userProfile.dataset = {}; //important
		self.userProfile.isSiteRegisterDisabled = true;
		_pageBuilder.initialize(self.userProfile);
		self.userProfile.onLogonProcessing = true;

		var $userProfileUrl = self.userProfile.getLogonUrl();

		if (!prevdataset) {
			var urlSeg = _url.history.getUrlSegment();
			var $userProfileSeg = _url.history.getUrlSegment($userProfileUrl);
			var profile = urlSeg.params && urlSeg.params.profile;
			var selectedEndpoint, selectedRole;
			if (profile) {
				if (profile == "{$userprofile}") {
					delete urlSeg.params.profile;
					window.history.replaceState(null, null, _url.build(urlSeg));
				} else {
					profile = jsurl.parse(profile);
					selectedEndpoint = "\'" + profile.ep + "\'";
					selectedRole = "\'" + profile.role + "\'";
				}
			}
			if (!selectedEndpoint) {
				if (!urlSeg.hasNoEndpoint) {
					if (urlSeg.endpointSeg.application != "syracuse" && ["collaboration", "search"].indexOf(urlSeg.endpointSeg.contract) < 0) {
						if (urlSeg.endpointSeg.dataset != $userProfileSeg.dataset) {
							selectedEndpoint = "dataset eq \'" + urlSeg.endpointSeg.dataset + "\'";
						}
					}
				}
			}
			if (selectedEndpoint || selectedRole) {
				var $baseUrl = _url.getBaseUrl($userProfileSeg);
				prevdataset = {
					$etag: 0
				};
				if (selectedRole) {
					prevdataset.selectedRole = {
						$url: $baseUrl + "/roles(" + selectedRole + ")"
					};
				}
				if (selectedEndpoint) {
					prevdataset.selectedEndpoint = {
						$url: $baseUrl + "/endPoints(" + selectedEndpoint + ")"
					};
				}
			}
		}
		syra_workingCopy.load({
			isLogon: true,
			menu: {
				$url: $userProfileUrl,
				sendData: prevdataset
			},
			article: self.userProfile,
			callback: function() {
				if (!self.hasLogonFailed) {
					self.userProfile.onLogonSucees();
					_locale.setCurrent(function(err) {
						window.syra_local = _locale.resources(module)();
						self.dataset.language = self.dataset.helpLanguage = _localizer.getLanguage() || "";
						var ids = ["designerDocumentation", "documentation", "shortcuts", "legal", "help", "home", "navigation"];
						for (var ii = ids.length - 1; ii >= 0; ii--) {
							var $menu = self.$menus["$" + ids[ii]];
							if ($menu) {
								$menu.$title = window.syra_local["site_link_" + ids[ii]] || "";
							}
						}
						self._renderHeader();
						_topPanel.showUserIdentity(self.userProfile);
						if (!self.$isSocketIODisabled) {
							_topPanel.showExtensions(self.userProfile);
						}
						syra_quality.onAfterLogon(onAfterLogon);
						delete self.userProfile.onLogonProcessing;
					}, self.userProfile.currentLangCode, self.userProfile.dataset.selectedLocale);
				}
			}
		});

	},
	getSessIdCookieName: function() {
		return "syracuse.sid." + window.location.port;
	},
	getSessionId: function() {
		return helpers.http.parseCookie(document.cookie)["syracuse.sid." + window.location.port] || "";
	},
	unload: function() {
		this.dispose();
	},
	disableRequestSurvey: function(disabled) {
		this._isdRequestSurveyDisabled = disabled;
		if (this.requestSurvey) {
			if (disabled) {
				_domHelper.toggleClass(this.requestSurvey, "s-on", false);
			} else {
				this.notifyRequestSurvey(this.requestSurvey.syraCount);
			}
		}
	},
	notifyRequestSurvey: function(count) {
		if (!this.requestSurvey) {
			this.requestSurvey = document.createElement("div");
			this.requestSurvey.id = "s-site-request";
			this.layoutSlot.appendChild(this.requestSurvey);
		}
		count = Math.max(count || 0, 0);
		syra_quality.logRequestCount(count);
		this.requestSurvey.textContent = count;
		if (!this._isdRequestSurveyDisabled) {
			if (this.requestSurvey.syraCount !== count) {
				if (count && !this.requestSurvey.syraCount) {
					_domHelper.toggleClass(this.requestSurvey, "s-on", true);
				}
				if (!count) {
					_domHelper.toggleClass(this.requestSurvey, "s-on", false);
				} else {
					_domHelper.setZIndex(this.requestSurvey, true);
				}
			}
		}
		this.requestSurvey.syraCount = count;
	},
	toggleMainPage: function(page, show) {
		_dialogManager.activateAll(page, show);
		if (show && page.domItem && page.displayed !== true) {
			page.displayed = show;
			this.refreshBrowserTitle(this.mainPage = page);
			(page.layoutSlot = this.body).appendChild(page.domItem);
			page.resizeArticle();
		} else {
			if (!show && page.displayed !== false) {
				page.displayed = show;
				_domHelper.removeChild(page.domItem);
			}
		}
	},
	resetMainPage: function() {
		_topPanel.toggle(false);
		var prev = this.mainPage;
		if (prev && prev.externalAdapter) {
			prev.externalAdapter.releaseMainPage({
				mainPage: prev,
				doEvent: function() {
					prev.dispose && prev.dispose();
				}
			});
		}
		_domHelper.empty(this.body);
		this.diagnosesPanel && this.diagnosesPanel.clean();
	},
	onMainPageChange: function($itemPage, onLoaded) {
		this.mainPage && _url.history.queryPageSession.save(this.mainPage);
		syra_dom.hide(this.body, true);
		$itemPage.boxParent = null;
		$itemPage.layoutSlot = this.body;
		this.resetMainPage();
		$itemPage.onMainPagechange = true;
		syra_pageBuilder.load($itemPage, function(page) {
			var site = syra_site;
			site.mainPage = page;
			site.mainPage.openerUrlSegments = $itemPage.openerUrlSegments;
			site.mainPage.isMainPage = true;
			site.refreshBrowserTitle(site.mainPage);
			site.lastOpenedMainPageUrlSegments = site.mainPage.openerUrlSegments;
			_url.history.addBackButton(site.mainPage);
			syra_workingCopy.showLastSavingDiagnoses(site.mainPage);
			onLoaded && onLoaded(page);
		});
	},
	addDragDropManager: function() {
		window.syra_dd = _dragDropManager;
	},
	roundDecimal: function(num, precision) {
		precision = precision || 2;
		var tmp = Math.pow(10, precision);
		return Math.round(num * tmp) / tmp;
	},
	drawPage: function() {
		var self = this;
		self.addDragDropManager();
		self.domItem = self.body = document.createElement("div");
		self.body.id = "s-site-body";
		self.body.setAttribute("tabindex", "1"); // add for receive keyboard event  for shortcut
		self.layoutSlot.appendChild(self.body);
		self.productName = document.createElement("div");
		self.productName.className = 's-m-product s-m-product-font';
		self.logon(function() {
			self._onAfterLogon();
		});
	},
	_onAfterLogon: function() {
		_domHelper.hide(this.layoutSlot, false);
		this.resizeArticle();
		_url.history.start();
		this.bookmarks && this.bookmarks.loadBookmarks();
	},
	getPreferences: function(key, defaultValues, target) {
		var values = this.userProfile.dataset.sitePreferences;
		if (values) {
			values = (values[this.$device] || {})[key];
		}
		if (values === undefined && this.$preferences) {
			values = this.$preferences[key];
		}
		values = values || {};
		if (defaultValues) {
			var keys = Object.keys(defaultValues);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				if (values[keys[ii]] === undefined) {
					values[keys[ii]] = defaultValues[keys[ii]];
				}
			}
		}
		if (target) {
			this.applyValues(target, values);
		}
		return values;
	},
	setPreferences: function(key, source, props) {
		var sitePreferences = this.userProfile.dataset.sitePreferences = this.userProfile.dataset.sitePreferences || {};
		var preferences = sitePreferences[this.$device] = sitePreferences[this.$device] || {};
		if (source || props) {
			if (props) {
				this.applyValues(preferences[key] = preferences[key] || {}, source, props);
			} else {
				preferences[key] = source;
			}
		} else {
			delete sitePreferences[this.$device][key];
		}
		this.userProfile.saveSitePreferences();
	},
	applyValues: function(target, values, keys) {
		if (target) {
			keys = keys || Object.keys(values);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				target[keys[ii]] = values[keys[ii]];
			}
		}
	},
	registerScreenDesigner: function(add, designer) {
		if (add) {
			if (!this.screenDesigners) {
				this.screenDesigners = [];
			} else {
				var top = this.screenDesigners && this.screenDesigners.length && this.screenDesigners[this.screenDesigners.length - 1];
				if (top) {
					top.onTopScreenDesigner(false);
				}
			}
			_domHelper.hide(this.header, true);
			this.screenDesigners.push(designer);
		} else {
			if (this.screenDesigners) {
				var index = this.screenDesigners.indexOf(designer);
				if (index >= 0) {
					this.screenDesigners.splice(index, 1);
				}
				if (this.screenDesigners.length == 0) {
					delete this.screenDesigners;
					_domHelper.hide(this.header, false);
				} else {
					var top = this.screenDesigners && this.screenDesigners.length && this.screenDesigners[this.screenDesigners.length - 1];
					if (top) {
						top.onTopScreenDesigner(true);
					}
				}
			}
		}
	},
	closePopups: function(box, event) {
		_topPanel.toggle(false, event, true);
		event && syra_dd.stop();
		_dialogManager.closePopups(box, event);
	},

	setProductName: function(name) {
		if (this.productName) {
			this.productName.textContent = name || "";
			this.bookmarks && this.bookmarks.onResize();
		}
	},
	getSize: function() {
		if (this.layoutSlot && this.size == undefined) {
			this.size = {
				isSmall: window.innerWidth < 900 || (window.innerHeight > window.innerWidth),
				minWidth: _config.size.minWidth,
				height: this.layoutSlot.clientHeight,
				width: this.layoutSlot.clientWidth
			};
			this.size.dlg = {
				maxHeight: Math.max(this.size.height - 50, 100),
				maxWidth: Math.max(Math.round(this.size.width * 0.9), 100),
				minWidth: Math.round(this.size.width * 0.75)
			};
			if (this.body) {
				this.size.body = {
					top: this.body.offsetTop
				};
				this.body.style.height = (this.size.height - this.size.body.top) + "px";
				this.size.body.height = this.body.clientHeight;
				this.size.body.width = this.body.clientWidth;
			}
		}
		return this.size;
	},
	resizeArticle: function() {
		this.isResizing = true;
		delete this.size;
		this.getSize();
		_pageBuilder.resize();
		this.bookmarks && this.bookmarks.onResize();
		_uiLocker.ensureLock();
		this.isResizing = false;
	},
	_renderHeader: function() {
		this.header = document.createElement("header");
		this.header.id = "s-site-header";
		this.header.style.minWidth = _config.size.minWidth + "px";
		this.layoutSlot.insertBefore(this.header, this.layoutSlot.firstChild);

		this.headerTop = document.createElement("div");
		this.headerTop.id = "s-site-header-top";

		this.siteHelpLink = this.loadNewItem(this.headerTop, {
			$clientId: "s-site-help-link",
			$bind: "$help",
			$category: "link",
			$noText: true,
			$skin: "s-site-help-link",
			$icon: {
				$value: "help"
			}
		});
		this.addPageDesignerOpener();

		var middleCell = document.createElement("div");
		middleCell.id = "s-site-header-middle-cell";
		this.headerTop.appendChild(middleCell);

		_trackersManager.addOpener(middleCell);

		_topPanel.addOpener(middleCell);

		this.addLogoutButton();

		this.homeLink = this.loadNewItem(this.headerTop, {
			$bind: "$home",
			$category: "link",
			$noText: true,
			$skin: "s-site-home",
			$shortCutTip: _shortCuts.tip.goToDefaultHome
		});

		this.navigationLink = this.loadNewItem(this.headerTop, {
			$bind: "$navigation",
			$category: "link",
			$noText: true,
			$skin: "s-site-navigation",
			$shortCutTip: _shortCuts.tip.goToNavigationPage
		});

		this.searcher = _searcher.load(this.headerTop);

		this.header.appendChild(this.headerTop);

		this.headerBottom = document.createElement("div");
		this.headerBottom.id = "s-site-header-bottom";

		this.addLogo(this.headerBottom);

		this.bookmarks = _bookmarks;
		this.bookmarks.load();

		if (this.$isLicenceTool) {
			_domHelper.hide(this.searcher && this.searcher.domItem, true);
			this.navigationLink.setMenu({
				$isHidden: true
			});
		}

		this.header.appendChild(this.headerBottom);
	},
	isLandscape: function() {
		return window.orientation && (window.orientation == 90 || window.orientation == -90);
	},
	addPageDesignerOpener: function() {
		this.pageDesignerBtn = syra_menus.button.add({
			parent: this,
			slot: this.headerTop,
			text: syra_local.userProfile_siteAuthoringOpen,
			css: "s-page-designer-opener",
			iconOnly: true,
			checkWorkingCopy: true,
			btnclick: function() {
				var page;
				var site = this.parent;
				site.topPanel.toggle(false);
				if (site.mainPage && site.mainPage.isFusionPage) {
					page = syra_fusion.activatedBook.selectedSheet;
				} else {
					page = _dialogManager.getTopDialogPage();
					if (page) {
						page = page._content;
					}
				}
				page = page || site.mainPage;
				page && site.switchItemDesigner(page, true);
			}
		});
		syra_menus.button.visibility(this.pageDesignerBtn, false);
	},
	switchItemDesigner: function(item, open) {
		if (item.switchDesigner) {
			if (open && !this._isCssLoaded) {
				this._isCssLoaded = true;
				this.loadStyleSheet("authoring.css");
			}
			item.switchDesigner(open);
		}
	},

	refreshMainPageSecurity: function(page) {
		if (page && !page.disposed) {
			var role = this.userProfile.getSelectedRole();
			var endpoint = this.userProfile.getSelectedEndpoint();
			if (role || endpoint) {
				role = role && role.description;
				endpoint = endpoint && endpoint.description;
				var pages = page ? [page] : _pageBuilder.getLoaded();
				for (var ii = 0, jj = pages.length; ii < jj; ii++) {
					page = pages[ii];
					if (!page.isSecurityViewHidden && page.securityBreadcrumbSlot) {
						if (!page.securityViewSlot) {
							page.securityViewSlot = document.createElement("div");
							page.securityViewSlot.className = "s-security-view-slot";
							page.securityBreadcrumbSlot.appendChild(page.securityViewSlot);
						}
						_domHelper.empty(page.securityViewSlot);
						syra_menus.button.remove(page.securityRoleFlag);
						syra_menus.button.remove(page.securityEndpointFlag);
						if (role) {
							page.securityRoleFlag = syra_menus.button.add({
								isIndicator: true,
								parent: page,
								slot: page.securityViewSlot,
								text: role,
								css: "s-security-user",
								fontIcon: "role"
							});
						}
						if (endpoint) {
							page.securityEndpointFlag = syra_menus.button.add({
								isIndicator: true,
								parent: page,
								slot: page.securityViewSlot,
								text: endpoint,
								css: "s-security-user",
								fontIcon: "endpoint"
							});
						}
						_domHelper.hide(page.securityBreadcrumbSlot, false);
					}
				}
			}
			if (this.pageDesignerBtn && page.mainPageDesignerAccess != "unknow") {
				var show = page.mainPageDesignerAccess != "disabled" && this.userProfile.hasDesignRight();
				this.pageDesignerBtn.link.style.visibility = show ? "" : "hidden";
			}
		}
	},
	loadBox: function() {
		this.isAutoInsertFieldDisabled = true;
		this.documentHeader = document.getElementsByTagName("head")[0];
		this.isRTL = document.dir === 'rtl';
		this.isSiteRegisterDisabled = true;
		this.helpCenter = _helpCenter;
		this.filterMaker = filterMaker;

		this.topPanel = _topPanel;
		if (!this.$isSocketIODisabled) {
			this.socketHandler = SocketHandler.create();
			//session event
			this.socketHandler.register("/session");
		}
		// send ip address to allow the server to detect drop failed session
		this.config = _config;
		window.syra_dom = _domHelper;
		window.syra_item = _item;
		window.syra_article = _article;
		window.syra_expression = _expressionMaker;
		window.syra_maximizer = _maximizer;
		window.syra_localizer = _localizer;
		window.syra_uiLocker = _uiLocker;
		window.syra_layoutValidator = _layoutValidator;
		window.syra_layoutUpdater = _layoutUpdater;
		window.syra_dlg = _dialogManager;
		window.syra_dataset = _dataset;
		window.syra_url = _url;
		window.syra_tip = _tip;
		window.syra_workingCopy = _workingCopy;
		window.syra_quality = _qualityController.create();
		window.syra_trackers = _trackersManager;
		window.syra_diagnose = _diagnoseCenter;
		window.syra_pageBuilder = _pageBuilder;
		window.syra_shortCuts = _shortCuts;
		window.syra_menus = _menusHelper;
		window.syra_fields = _fieldHelper;
		window.syra_site = this;
		window.syra_local = _locale.resources(module)();
		window.syra_widgets = _widgets;

		this.$device = this.$device || "desktop";
		if (this.isTabletDevice = document.location.pathname.indexOf("-tablet.html") >= 0) {
			this.$device = "tablet";
			this.$preferences = {
				convergenceBar: {
					$isFloating: true,
					$isCollapsed: true
				},
				menuBar: {
					$isCollapsed: !this.isLandscape
				},
				"dash-menubar": {
					$isCollapsed: false
				}
			};
		}
		this.$prototype = this.$prototype || {};
		this.$prototype.$properties = this.$prototype.$properties || {};
		this.$item = this.$item || {};
		var $links = this.$prototype.$links = this.$prototype.$links || {};

		$links.$navigation = {
			$url: "?representation=home.$navigation&profile={$userprofile}"
		};
		$links.$home = $links.$home || {
			$url: "?representation=home.$landing&profile={$userprofile}"
		};
		$links.$help = {
			$url: "",
			$type: "text/html",
			$target: "help"
		};
		$links.$designerDocumentation = {
			$url: "/help/{helpLanguage}/tutorial/central-page",
			$type: "text/html",
			$target: "help"
		};
		$links.$documentation = {
			$url: "/help/{helpLanguage}/index.htm",
			$type: "text/html",
			$target: "help"
		};
		$links.$shortcuts = {
			$url: "/help/{helpLanguage}/KEYS/index.htm",
			$type: "text/html",
			$target: "help"
		};
		$links.$legal = {
			$url: ""
		};
		$links.$support = {
			$url: "http://www.sage.com/support"
		};
		this.$navigation = {
			changeLog: {
				$title: "Change Log",
				$url: "/changelog.html",
				$type: "text/html",
				$target: "blank"
			},
			tablethome_v7: {
				$title: "Tablet Home",
				$url: "/syracuse-main/html/main-tablet.html?url=%3Frepresentation%3Dhome.%24landing"
			},
			mobileHome_v7: {
				"$title": "Mobile Home V7",
				"$description": "V7 Mobile application home page",
				"$url": "/syracuse-mobile/html/mobile.html#start"
			},
			mobileHome: {
				"$title": "Mobile Home",
				"$description": "Mobile application home page",
				"$url": "/syracuse-tablet/dist/index.html"
			},
			devsos: {
				$title: "Developer samples/SOS",
				$url: "?representation=devsos.$dev"
			},
			arrayTest: {
				$title: "UI test Pages",
				$url: "?representation=s-uitest.$test&name=array_array&category=grid"
			},
			perfmon: {
				$title: "Performance data",
				$url: "/syracuse-perfmon/public/render.html?dummy",
				$type: "text/html",
				$target: "blank"
			}
		};

		this.$maxBookmarks = 25;
		this.$legalDataUrl = "/sdata/syracuse/collaboration/syracuse/licenseDatas?representation=licenseData.$query";
		this.$legalPrototypeUrl = "/sdata/syracuse/collaboration/syracuse/$prototypes('licenseData.$query')";
		this.$iconPath = "/syracuse-ui/themes/desktop/images/";
		this.$userProfileUrl = this.$userProfileUrl || "/sdata/syracuse/collaboration/syracuse/userProfiles/$template/$workingCopies?representation=userProfile.$edit&role={$role}";
		this.$pageTemplateUrl = "/sdata/syracuse/collaboration/syracuse/pages('{endpoint}.{representation},{target},{pageview}')?role={$role}&profile={$userprofile}";
		if (this.$device == "mobile") {
			this.$pageTemplateUrl = "/sdata/syracuse/collaboration/syracuse/pages('{endpoint}.{representation},{target},{pageview},phone')?role={$role}&profile={$userprofile}";
			this.$userProfileUrl += "&device=phone";
		}
		if (this.$isLicenceTool) {
			delete this.$pageTemplateUrl;
		}

		this._childPageOffset = 1;
		_pageBuilder.initialize(this);
		window.syra_controller = _controller;

		if (!this.isOfficeSite) {
			window.syra_fusion = _fusion;
		}
		this.externalAdapter = new ExternalAdapter();

		this.layoutSlot = document.getElementById("s-site");
		_domHelper.hide(this.layoutSlot, true);

		_eventListener.load();

		syra_item.initialize(this, this, this.$item);
		DesktopPage.prototype.loadBox.call(this);
		return this;
	},
	addLogo: function(slot) {
		var title, href;
		var home = this.menuItems && this.menuItems.$home;
		home = home && home[0];
		if (home) {
			title = home.domItem.title;
			href = home.domItem.getAttribute("href");
		}
		var btn = syra_menus.button.add({
			parent: this,
			slot: slot,
			text: title || "",
			iconOnly: true,
			css: "s-site-header-logo",
			btnclick: function() {
				syra_menus.click.home();
			}
		});
		href && btn.link.setAttribute("href", href);

		this.brandName = document.createElement("div");
		this.brandName.className = 's-m-brand s-m-brand-font';
		this.brandName.textContent = "Sage";
		btn.link.appendChild(this.brandName);

		if (this.productName) {
			btn.link.appendChild(this.productName);
		}
	},
	addLogoutButton: function() {
		syra_menus.button.add({
			parent: this,
			slot: this.headerTop,
			text: syra_local.siteLogoutLink,
			iconOnly: true,
			css: "s-site-logout",
			btnclick: function() {
				syra_site.logout();
			}
		});
	},
	onUncaughtError: function(errorMsg, url, lineNumber, error) {
		var self = this;
		if (self.mainPage) {
			var options = {
				errorMsg: errorMsg,
				url: url,
				lineNumber: lineNumber,
				error: error,
				doEvent: function() {
					// diagnose component will be improved, with specific msg and stack properties
					var $diagnose = {};
					$diagnose.$message = options.errorMsg;
					$diagnose.$message += error ? "\nStack:\n" + error.stack : "";
					$diagnose.$severity = "error"; //"alert";
					syra_diagnose.showDiagnoses({
						$diagnoses: [$diagnose]
					});
				}
			};
			if (self.mainPage.externalAdapter)
				self.mainPage.externalAdapter.onUncaughtError(options);
		} else {
			syra_diagnose.showDiagnoses({
				$diagnoses: [{
					$severity: "fatal",
					$message: errorMsg
				}]
			});
		}
	},
	onError: function(error) {
		this.onUncaughtError(error.message, error.fileName, error.lineNumber, error);
	},
	refreshBrowserTitle: function(page) {
		if (page == this.mainPage) {
			var title = page.getTitle();
			if (title) {
				if (this.$isSecurityTitleVisible !== false) {
					var role = syra_site.userProfile.getSelectedRole();
					var endpoint = syra_site.userProfile.getSelectedEndpoint();
					if (!this.tabBrowserTitles) {
						this.tabBrowserTitles = {
							$edit: syra_local.tab_browser_facet_edit,
							$details: syra_local.tab_browser_facet_details,
						};
					}
					var facet = this.tabBrowserTitles[page.$facet];
					if (facet) {
						title += " - " + facet + " ";
					}
					if (role) {
						title += " (" + role.description + ")";
					}
					if (endpoint) {
						title += " (" + endpoint.description + ")";
					}
				}
				document.title = title;
			}
		}
	},
	onItemInOut: function(onEnter, event, target) {
		_topPanel.onItemInOut(onEnter, event, target);
	},
	disposeObject: function(obj) {
		if (obj) {
			syra_item.unregister(obj);
			if (obj.buttons && obj.buttons.length) {
				for (var ii = 0, jj = obj.buttons.length; ii < jj; ii++) {
					_menusHelper.button.dispose(obj.buttons[ii]);
				}
				delete obj.buttons;
			}
			var keys = Object.keys(obj);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				obj[keys[ii]] = null;
			}
			obj.disposed = true;
		}
	}
});