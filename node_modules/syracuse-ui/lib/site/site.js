"use strict";
var _helpers = require('syracuse-core').helpers;
var _externalAdapter = require("syracuse-ui/lib/utility/externalAdapter");
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var _eventListener = require('syracuse-ui/lib/events/eventListener');
var _locale = require('streamline-locale');
var _fusion = require('syracuse-ui/lib/fusion/fusionGateway').gateway;
var UserProfile = require('./userProfile').UserProfile;

var _searcher = require('syracuse-ui/lib/search/searcher');
var jsurl = require('jsurl/lib/jsurl');
var SocketHandler = require('syracuse-ui/lib/notifications/socketHandler');
var _quality = require('syracuse-ui/lib/quality/qualityController');
var _ext = require('syracuse-ui/lib/extend/extendGateway');

var _manager = {
	filter: require("syracuse-ui/lib/filter/manager"),
	bookmarks: require("syracuse-ui/lib/navigation/bookmarks"),
	config: require('syracuse-ui/lib/site/config'),
	nav: require('syracuse-ui/lib/navigation/navigator'),
	culture: require('syracuse-ui/lib/data/culture'),
	dataset: require('syracuse-ui/lib/data/dataset'),
	router: require('syracuse-ui/lib/controller/router'),
	devTools: require('syracuse-ui/lib/site/aside/devToolsPanel'),
	help: require('syracuse-ui/lib/help/helpCenter'),
	item: require("syracuse-ui/lib/item/itemManager"),
	localizer: require('syracuse-ui/lib/localization/localizer'),
	locker: require('syracuse-ui/lib/utility/locker'),
	url: require('syracuse-ui/lib/controller/url'),
	tip: require('syracuse-ui/lib/over/tip'),
	button: require('syracuse-ui/lib/links/button'),
	alert: require('syracuse-ui/lib/alert/manager'),
	shortCuts: require("syracuse-ui/lib/events/shortCutInvoker"),
	fields: require('syracuse-ui/lib/field/helpers/fieldHelper'),
	menus: require('syracuse-ui/lib/links/menusHelper'),
	pageBuilder: require("syracuse-ui/lib/page/pageBuilder"),
	trackers: require('syracuse-ui/lib/tracker/trackersManager'),
	form: require('syracuse-ui/lib/controller/form'),
	over: require('syracuse-ui/lib/over/manager'),
	layout: require("syracuse-ui/lib/item/layoutManager"),
	maximizer: require('syracuse-ui/lib/utility/maximizer'),
	expression: require('syracuse-ui/lib/utility/expression'),
	article: require("syracuse-ui/lib/item/article"),
	dom: require('syracuse-ui/lib/utility/dom'),
	icon: require("syracuse-ui/lib/utility/icon"),
	ajax: require('syracuse-ui/lib/controller/ajax'),
	preference: require('syracuse-ui/lib/controller/preference'),
	style: require("syracuse-ui/lib/item/style"),
	context: _ext.context = {}
};


function _getBrowser() {
	var M = navigator.userAgent.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
	var browser = {
		name: (M ? M[1] : navigator.appName).toLowerCase()
	};
	var tem;
	if (M && (tem = navigator.userAgent.match(/version\/([\.\d]+)/i)) != null) {
		M[2] = tem[1];
	}
	browser.info = M ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
	browser.version = browser.info[1];
	browser.isFireFox = browser.name == "firefox";
	browser.isSafari = browser.name == "safari";
	browser.isMSIE = browser.name == "msie";
	return browser;
}

exports.create = function() {
	var site = new Site();
	site.btns = {};
	window.syra_site = site;
	window.syra_ldp = null;
	var keys = Object.keys(_manager);
	for (var ii = 0, jj = keys.length; ii < jj; ii++) {
		window["syra_" + keys[ii]] = _manager[keys[ii]];
	}
	//syra_over.no = true;
	syra_context.browser = _getBrowser();
	return site;
};

function Site() {

}

exports.Site = _helpers.defineClass(Site, DesktopPage, {
	clone: function(obj) {
		return _helpers.object.clone(obj, true);
	},
	randomStr: function(m) {
		var m = m || 9,
			s = '',
			r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
		for (var i = 0; i < m; i++) {
			s += r.charAt(Math.floor(Math.random() * r.length));
		}
		return s;
	},
	logout: function(doPost) {
		if (!doPost && syra_fusion) {
			syra_fusion.onUserActionUnload(function() {
				syra_site.logout(true);
			}, null, "logout");
			return;
		}
		_manager.router.postQuery({
			menu: {
				$title: syra_local.siteLogout,
				$method: "POST",
				$url: "/logout",
				headers: {
					authorization: "basic"
				}
			},
			success: function($url, data) {
				syra_site.hasDoneLogOut = true;
				window.open($url, "_self");
			},
			error: function(raw, query, $diagnoses) {
				_manager.alert.error($diagnoses);
				if (!syra_site.mainPage || syra_site.mainPage.disposed) {
					_manager.menus.click.home();
				}
			}
		});
	},
	onMenuClick: function(options) {
		switch (options.menu.$bind) {
			case "site_help_designer":
			case "site_help_center":
				if (!options.menu.$documentationUrl) {
					options.menu.$documentationUrl = options.menu.$sourceUrl;
				}
				var edp = this.userProfile.getSelectedEndpoint();
				options.menu.$sourceUrl = options.menu.$documentationUrl + (edp ? ("&ep=" + edp.$uuid) : "");
				break;
			case "site_help":
				_manager.help.openPopup(options.menu.domItem);
				return false;
			case "site_devTools":
				_manager.devTools.openPopup(options.menu);
				return false;
			default:
				if (options.menu.$bind && options.menu.$bind.split("-")[0] === "bookmark") {
					_manager.bookmarks.onLinkClick(options.menu);
					return false;
				}
				break;
		}
		return true;
	},
	addEventListeners: function(root) {
		return _eventListener.addEventListeners(root);
	},
	dispose: function() {
		_eventListener.dispose();
		syra_fusion && syra_fusion.dispose();
		_manager.bookmarks.dispose();
		_manager.trackers.dispose();
		_manager.locker.dispose();
		_manager.help.dispose();
		DesktopPage.prototype.dispose.call(this);
		_manager.alert.dispose();
		_manager.over.dispose();
		_manager.item.dispose();
		_manager.style.dispose();
		var keys = Object.keys(window);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			var key = keys[ii];
			if (key.indexOf("syra_") >= 0) {
				delete window[key];
			}
		}
		this.disposeObject(_ext.context);
	},
	logon: function(initData, onAfterLogon) {
		var self = this;
		var prevdataset;
		self.userProfile = new UserProfile();
		self.userProfile.dataset = {};
		self.userProfile.$prototype = initData.$prototype;
		self.userProfile.isSiteRegisterDisabled = true;
		syra_pageBuilder.initialize(self.userProfile);
		self.userProfile.onLogonProcessing = true;
		syra_item.initialize(self.userProfile, self.userProfile, {});
		self.userProfile.load(initData.dataset);

		self.userProfile.setCurrentLangCode(self.userProfile.dataset);
		syra_context.enableUILog = self.userProfile.dataset.enableUILog;
		syra_context.developpementMode = self.userProfile.dataset.developpementMode;
		self.userProfile._applyNewSecurity();
		syra_culture.format.initialize(self.userProfile.dataset.selectedLocale);
		_locale.setCurrent(function(err) {
			window.syra_local = _locale.resources(module)();
			self.dataset.language = self.dataset.helpLanguage = syra_localizer.getLanguage() || "";
			self.$menus.$home.$title = syra_local.site_btn_home;
			self.$menus.site_help.$title = syra_local.site_btn_help;
			self.$menus.site_help_designer.$title = syra_local.site_btn_help_designer;
			self.$menus.site_help_center.$title = syra_local.site_btn_help_center;
			self.$menus.site_help_shortcuts.$title = syra_local.site_btn_help_shortcuts;
			self._renderHeader();
			self.userProfile.showIdentity();
			syra_quality.onAfterLogon(onAfterLogon);
			syra_quality.page_onAfterLoad(self.userProfile);
			delete self.userProfile.onLogonProcessing;
			self.userProfile.applicationConnection.applyChange(self.userProfile.dataset);
			!self.isOfficeSite && syra_nav.loadMegaMenus();
		}, self.userProfile.currentLangCode, self.userProfile.dataset.selectedLocale);
	},
	_focusBox: function(box, hasFocus) {
		if (box) {
			var target = box.layoutSlot || box.body;
			if (!target && box.domItem) {
				target = box.domItem;
			}
			if (target) {
				if (box != box.page) {
					_manager.dom.toggleClass(target, "s-selected-box", hasFocus);
				}
			}
		}
	},
	getSessIdCookieName: function() {
		return "syracuse.sid." + window.location.port;
	},
	getSessionId: function() {
		return _helpers.http.parseCookie(document.cookie)["syracuse.sid." + window.location.port] || "";
	},
	unload: function() {
		this.dispose();
	},
	toggleMainPage: function(page, show) {
		_manager.over.activateAll(page, show);
		if (show && page.domItem && page.displayed !== true) {
			page.displayed = show;
			this.refreshBrowserTitle(this.mainPage = page);
			page.layoutSlot = this.body;
			if (page.hasFlashChildField && page.domItem.parentNode) {
				syra_dom.hideFlashContainer(page.domItem, false);
			} else {
				this.body.appendChild(page.domItem);
			}
			page.resizeItem();
		} else {
			if (!show && page.displayed !== false) {
				page.displayed = show;
				if (page.hasFlashChildField) {
					syra_dom.hideFlashContainer(page.domItem, true);
				} else {
					syra_dom.remove(page.domItem);
				}
			}
		}
	},
	resetMainPage: function() {
		this.userProfile.toggle(false);
		var prev = this.mainPage;
		if (prev && prev.externalAdapter) {
			prev.externalAdapter.releaseMainPage({
				mainPage: prev,
				doEvent: function() {
					prev.dispose && prev.dispose();
				}
			});
		}
		_manager.dom.empty(this.body);
		this.alertPanel && this.alertPanel.clean();
	},
	onMainPageChange: function($itemPage, onLoaded) {
		this.mainPage && _manager.url.history.queryPageSession.save(this.mainPage);
		$itemPage.boxParent = null;
		$itemPage.layoutSlot = this.body;
		this.resetMainPage();
		$itemPage.onMainPagechange = true;
		_manager.pageBuilder.load({
			$itemPage: $itemPage,
			success: function(page) {
				syra_site.mainPage = page;
				page.urlSeg = $itemPage.urlSeg;
				page.isMainPage = true;
				syra_nav.showMegaMenus(!(page.$isEditMode && !page.isLandingPage));
				syra_site.refreshBrowserTitle(page);
				syra_site.lastOpenedMainPageUrlSegments = page.urlSeg;
				_manager.form.showLastSavingDiagnoses(page);
				onLoaded && onLoaded(page);
			}
		});
	},
	roundDecimal: function(num, precision) {
		precision = precision || 2;
		var tmp = Math.pow(10, precision);
		return Math.round(num * tmp) / tmp;
	},
	drawPage: function() {
		this.domItem = this.body = document.createElement("div");
		this.body.id = "s-site-body";
		this.body.setAttribute("tabindex", "1"); // add for receive keyboard event  for shortcut
		this.layoutSlot.appendChild(this.body);
	},
	registerScreenDesigner: function(add, designer) {
		if (add) {
			if (!this.screenDesigners) {
				this.screenDesigners = [];
			} else {
				var top = this.screenDesigners && this.screenDesigners.length && this.screenDesigners[this.screenDesigners.length - 1];
				if (top) {
					top.onTopScreenDesigner(false);
				}
			}
			_manager.dom.hide(this.header, true);
			this.screenDesigners.push(designer);
		} else {
			if (this.screenDesigners) {
				var index = this.screenDesigners.indexOf(designer);
				if (index >= 0) {
					this.screenDesigners.splice(index, 1);
				}
				if (this.screenDesigners.length == 0) {
					delete this.screenDesigners;
					_manager.dom.hide(this.header, false);
					//this.layoutSlot.style.paddingTop = this.header.getBoundingClientRect().height + "px";
				} else {
					var top = this.screenDesigners && this.screenDesigners.length && this.screenDesigners[this.screenDesigners.length - 1];
					if (top) {
						top.onTopScreenDesigner(true);
					}
				}
			}
		}
	},
	closePopups: function(box, event) {
		_manager.over.closePopups(box, event);
	},

	getSize: function() {
		if (this.size == undefined) {
			this.size = {
				isSmall: window.innerWidth < 900 || (window.innerHeight > window.innerWidth),
				minWidth: syra_config.size.minWidth,
				height: this.siteApp.clientHeight,
				width: this.siteApp.clientWidth
			};
			this.size.overPanel = {
				maxHeight: Math.max(this.size.height - 50, 100),
				maxWidth: Math.max(Math.round(this.size.width * 0.9), 100),
				minWidth: Math.round(this.size.width * 0.75)
			};
			var body = document.getElementById("s_site_body");
			if (body) {
				this.size.body = {
					top: body.offsetTop,
					height: body.clientHeight,
					width: body.clientWidth
				};
			}
		}
		return this.size;
	},
	resizeItem: function() {
		this.isResizing = true;
		delete this.size;
		this.getSize();
		_manager.pageBuilder.resize();
		syra_over.resizePositioned(this);
		syra_locker.ensureLock();
		this.isResizing = false;
	},
	refreshMainPageSecurity: function(page) {
		//Added refreshMainPageDesignerSecurity so that security added in future won't interfere
		this.refreshMainPageDesignerSecurity(page);
	},
	refreshMainPageDesignerSecurity: function(page) {
		if (this.btns.authoring && page.mainPageDesignerAccess != "unknow") {
			syra_button.disable(this.btns.authoring, page.mainPageDesignerAccess == "disabled" || !this.userProfile.hasDesignRight());
		}
	},
	_renderHeader: function() {
		this.header = document.createElement("header");
		this.header.id = "s-header";
		this.header.style.minWidth = syra_config.size.minWidth + "px";
		this.layoutSlot.insertBefore(this.header, this.layoutSlot.firstChild);

		this.headerBar = syra_dom.div("s-header-bar");

		if (!this.isOfficeSite) {
			this.btns.tracker = _manager.button.add({
				parent: this,
				slot: this.headerBar,
				text: "",
				css: "s-header-link s-header-tracker",
				isHidden: true,
				iconOnly: true,
				click: function() {
					_manager.trackers.toggle();
				}
			});
		}


		//		this.userProfile.addOpener(this.headerBar);

		if (!this.isOfficeSite) {
			this.btns.home = this.addItem(this.headerBar, {
				$bind: "$home",
				$noText: true,
				$category: "link",
				$skin: "s-header-link s-header-home",
				$shortCutTip: _manager.shortCuts.tip.goToDefaultHome
			});

			this.btns.bookmark = _manager.button.add({
				parent: this,
				slot: this.headerBar,
				iconOnly: true,
				text: syra_local.site_btn_bookmark,
				css: "s-header-link s-header-bookmark",
				click: function() {
					_manager.bookmarks.open();
				}
			});

			this.btns.authoring = _manager.button.add({
				parent: this,
				slot: this.headerBar,
				text: syra_local.site_btn_authoring,
				css: "s-header-link s-header-authoring",
				iconOnly: true,
				isDisabled: true,
				checkWorkingCopy: true,
				click: function() {
					var page;
					var site = this.parent;
					site.userProfile.toggle(false);
					if (site.mainPage && site.mainPage.isFusionPage) {
						page = syra_fusion.activatedBook.selectedSheet;
					} else {
						var over = _manager.over.getMostOverPage();
						page = over && over.page;
					}
					page = page || site.mainPage;
					page && site.switchItemDesigner(page, true);
				}
			});

			this.btns.help = this.addItem(this.headerBar, {
				$bind: "site_help",
				$noText: true,
				$category: "link",
				$skin: "s-header-link s-header-help"
			});

			this.btns.search = _manager.button.add({
				parent: this,
				slot: this.headerBar,
				text: syra_local.site_btn_search,
				css: "s-header-link s-header-search",
				iconOnly: true,
				click: function() {
					this.parent.searcher.toggle(true);
				}
			});
			this.searcher = _searcher.load();

			this.btns.devTools = this.addItem(this.headerBar, {
				$bind: "site_devTools",
				$noText: true,
				$category: "link",
				$skin: ""
			});
		}
		this.header.appendChild(this.headerBar);

		if (this.$isLicenceTool) {
			_manager.dom.hide(this.searcher && this.searcher.domItem, true);
			/*this.btns.site_sitemap.setMenu({
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 $isHidden: true
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 
            
			 });*/

		}

		this.megaMenusBar = syra_dom.ul("s-sitemap-mega-modules", (!this.isOfficeSite && this.$device == "desktop") ? this.header : undefined);
	},
	isLandscape: function() {
		return window.orientation && (window.orientation == 90 || window.orientation == -90);
	},
	switchItemDesigner: function(item, open) {
		if (item.switchDesigner) {
			if (open && !this._isCssLoaded) {
				this._isCssLoaded = true;
				syra_style.loadStyleSheet("authoring.css");
			}
			item.switchDesigner(open);
		}
	},

	load: function() {
		syra_culture.format.initialize();

		this.isAutoInsertFieldDisabled = true;
		syra_context.isRTL = document.dir === 'rtl';
		this.isSiteRegisterDisabled = true;
		this.$isSocketIODisabled = true;
		if (!this.$isSocketIODisabled) {
			this.socketHandler = SocketHandler.create();
			//session event
			this.socketHandler.register("/session");
		}
		// send ip address to allow the server to detect drop failed session
		window.syra_local = _locale.resources(module)();

		window.syra_quality = _quality.create();

		this.$device = this.$device || "desktop";
		if (this.isTabletDevice = document.location.pathname.indexOf("-tablet.html") >= 0) {
			this.$device = "tablet";
		}
		this.$prototype = this.$prototype || {};
		this.$prototype.$properties = this.$prototype.$properties || {};
		this.$item = this.$item || {};
		var $links = this.$prototype.$links = this.$prototype.$links || {};

		$links.$home = $links.$home || {
			$url: syra_config.$homeUrl
		};
		$links.site_help = {
			$url: "",
			$type: "text/html",
			$target: "help"
		};
		$links.site_devTools = {
			$url: "",
			$type: "text/html",
			$target: "help"
		};
		$links.site_help_designer = {
			$url: syra_config.$help_designer,
			$type: "text/html",
			$target: "help"
		};
		$links.site_help_center = {
			$url: syra_config.$help_center,
			$type: "text/html",
			$target: "help"
		};
		$links.site_help_shortcuts = {
			$url: syra_config.$help_shortcuts,
			$type: "text/html",
			$target: "help"
		};
		$links.$support = {
			$url: syra_config.$support
		};

		if (this.$device == "mobile") {
			syra_config.$pageTemplateUrl = "/sdata/syracuse/collaboration/syracuse/pages('{endpoint}.{representation},{target},{pageview},phone')?role={$role}&profile={$userprofile}";
			syra_config.$userProfileUrl += "&device=phone";
		}

		this._childPageOffset = 1;
		_manager.pageBuilder.initialize(this);

		window.syra_fusion = !this.isOfficeSite ? _fusion : null;

		this.externalAdapter = _externalAdapter;

		_eventListener.load();

		_manager.item.initialize(this, this, this.$item);
		DesktopPage.prototype.load.call(this);
		return this;
	},
	removeBookmarks: function() {
		_manager.bookmarks.dispose();
	},
	refreshBrowserTitle: function(page) {
		if (page == this.mainPage) {
			var title = page.getTitle();
			if (title) {
				if (this.$isSecurityTitleVisible !== false) {
					var role = syra_site.userProfile.getSelectedRole();
					var endpoint = syra_site.userProfile.getSelectedEndpoint();
					if (!this.tabBrowserTitles) {
						this.tabBrowserTitles = {
							$edit: syra_local.tab_browser_facet_edit,
							$details: syra_local.tab_browser_facet_details,
						};
					}
					var facet = this.tabBrowserTitles[page.$facet];
					if (facet) {
						title += " - " + facet + " ";
					}
					if (role) {
						title += " (" + role.description + ")";
					}
					if (endpoint) {
						title += " (" + endpoint.description + ")";
					}
				}
				document.title = title;
			}
		}
	},
	getActivePage: function() {
		return (syra_fusion && syra_fusion.activatedBook && syra_fusion.activatedBook.selectedSheet) || syra_site.mainPage;
	},
	onItemInOut: function(onEnter, event, target) {

	},
	checkUniqueSelection: function(hotspot) {
		if (this.selectedList) {
			if (this.selectedList.checkUniqueSelection === false) {
				delete this.selectedList.checkUniqueSelection;
			} else {
				if (this.selectedList.selector && !this.selectedList.$item.$isNavigationList) {
					var record;
					while (hotspot && !hotspot.isArrayField) {
						if (hotspot.isRecordArticle) {
							record = hotspot;
						}
						hotspot = hotspot.articleParent;
					}
					if (hotspot && !hotspot.isArrayField) {
						hotspot = null;
					}
					if (hotspot != this.selectedList || (record && !record.$isSelected && !this.selectedList.selector.isMulti)) {
						this.selectedList.selector.unSelectAll();
					}
				}
			}
		}
	},
	disposeObject: function(obj) {
		if (obj) {
			_manager.item.unregister(obj);
			if (obj.buttons && obj.buttons.length) {
				for (var ii = 0, jj = obj.buttons.length; ii < jj; ii++) {
					_manager.button.dispose(obj.buttons[ii]);
				}
				delete obj.buttons;
			}
			var keys = Object.keys(obj);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				obj[keys[ii]] = null;
			}
			obj.disposed = true;
		}
	}
});