"use strict";
var helpers = require('syracuse-core/lib/helpers');
var keyHelper = require('syracuse-ui/lib/site/aside/keyHelper');

function Dialog(){
}

exports.Dialog = helpers.defineClass(Dialog, null, {
    open: function(options){
        this.id = helpers.uuid.generate();
        if ((this.options = options).content) {
            this._content = this.options.content;
            this.$$layoutSlot = this.options.$$dialog || this.options.content.$$item;
            this.layoutSlot = this.$$layoutSlot[0];
            var dialog = this.layoutSlot;
            if (dialog.style.position != "fixed") {
                dialog.style.position = "absolute";
            }
            dialog.style.display = '';
            this._ensureMode();
            this._appendAutoClose(true);
            this._endOpen();
        }
        else {
            this._openDialogPage();
        }
        
        
    },
    _handleCloseOnEscape: function(){
        // handle events binding
        this._bindEvents(true);
        var cl;
        if (this.options.getCloseAnchor) {
            cl = this.options.getCloseAnchor();
        }
        else {
            cl = document.createElement("a");
            cl.className = "s-dialog-close-anchor";
            cl.setAttribute('href', '#');
            this.$$layoutSlot[0].appendChild(cl);
        }
        // in order for the bind to run, one element of the dom should be focused
        this._focusCloseAnchor(cl);
    },
    _focusCloseAnchor: function(close){
        if (close != "noclose") {
            $(close).focus();
        }
    },
    _bindEvents: function(bind){
        var self = this;
        var namespace = ".dialog" + this.id;
        if (bind) {
            $(document).bind("keypress" + namespace, function(event){
                switch (event.type) {
                    case "keypress":
                        switch (event.keyCode) {
                            case keyHelper.keyCode.ESCAPE:
                                self.close();
                                return false;
                        }
                }
            });
        }
        else {
            $(document).unbind(namespace);
        }
    },
    _appendAutoClose: function(append){
        var self = this;
        if ((self.options.$autoClose === undefined) ? true : self.options.$autoClose) {
            if (append) {
                self._autoCloseNamespace = self.$$layoutSlot.attr("id") || self.id;
                document.site.autoCloseDialogs = document.site.autoCloseDialogs || {};
                document.site.autoCloseDialogs[self.id] = self;
                self.$$layoutSlot.attr("id", self._autoCloseNamespace);
                self._autocCloseBoundary = "#" + self._autoCloseNamespace + "," + (self.options.autocCloseBoundary || ("#" + self._content.id));
                $(document).bind("click." + self._autoCloseNamespace, function(event){
                    var $$btn = $(event.target);
                    if (self.$$layoutSlot.is(":visible")) {
                        self.close();
                        /*if ($$btn.closest(self._autocCloseBoundary).length == 0) {
                         self.close();
                         }*/
                    }
                    return true;
                });
                
            }
            else {
                if (self._autoCloseNamespace) {
                    if (document.site.autoCloseDialogs) {
                        delete document.site.autoCloseDialogs[self.id];
                    }
                    $(document).unbind("click." + self._autoCloseNamespace);
                }
            }
        }
    },
    _endOpen: function(){
        this.$$layoutSlot.appendTo(document.site.layoutSlot);
        if (this._content.$dialogMode == "modal") {
			var overlay = document.createElement("div");
			overlay.className = "s-overlay";
			this.$$overlay = $(overlay);
			document.site.setZIndex(overlay);
			// retrieve just body and mask only body (fusion  modification to have access to menu 
			var body = document.getElementById("s-site-body");
			this.$$overlay.appendTo(body);
		}
        document.site.setZIndex(this.layoutSlot);
        this.onWindowResize();
        document.site.addResizeListener(this);
        if (this.options.position) {
            this._bindScrollEvent(true);
        }
        if (this.options.onOpened) {
            this.options.onOpened(this._content);
        }
        // handle dialog close on escape key
        this._handleCloseOnEscape();
    },
    _bindScrollEvent: function(bind){
        var self = this;
        if (bind) {
            if (self._content.page && self._content.page.scrollview) {
                self.$$scrollview = $(self._content.page.scrollview);
                self.$$scrollview.bind("scroll." + self.id, function(evt){
                    self._moveToPosition();
                });
            }
            
        }
        else {
            if (self.$$scrollview) {
                self.$$scrollview.unbind("scroll." + self.id);
            }
        }
    },
    _openDialogPage: function($itemPage){
        var self = this;
        if ($itemPage || self.options.page) {
            if (self.options.page) {
                self._content = self.options.page;
                self.layoutSlot = self.options.page.layoutSlot || document.createElement("div");
                self.$$layoutSlot = $(self.layoutSlot);
                self._ensureMode();
            }
            else {
                self.layoutSlot = $itemPage.layoutSlot = document.createElement("div");
                self.$$layoutSlot = $(self.layoutSlot);
                $itemPage.onBeforeLoadPage = self.options.onBeforeLoadPage;
                $itemPage.$isResizeEnabled = false;
                self._content = document.site.loadNewPage($itemPage);
                self._ensureMode();
                self.layoutSlot.className = self.$skin + "-page-container";
                self._content._header.className = self.$skin + "-page-head";
                self._content._body.className = self.$skin + "-page-body";
                self._content.dataSlot.className = self.$skin + "-page-data";
                self._content._item.className = self.$skin + "-page";
                self._content._item.style.display = "none";
            }
            //if (self._content.menuBar) {
			// ack for modal in fusion - TODO must manage with prototype information
            if (self._content.menuBar 
				&& self.options.$itemPage.$urlParts.$facet.indexOf("$modal2") ==-1
				&& self.options.$itemPage.$urlParts.$facet.indexOf("$modal3") ==-1 ) {
                self._content.menuBar.hideBar();
            }
            self._content.onAfterApplyPageDataChange = function(){
                self._moveToPosition();
            };
            self.options.$autoClose = self.options.$autoClose || false;
            self._appendAutoClose(true);
            self._appendCloseButton();
            
            if (self._content.$facet == "$lookup") {
                //dialog is adjust to list
                self._content._body.style.overflow = "hidden";
            }
            else {
                self._content._body.style.overflow = "auto";
            }
            self._content._body.style.height = "0px";
            if (self.options.onValidate) {
                self._appendOkButton();
            }
            if (self.options.onSelectRecord) {
                self._content.onSelectRecord = function(selectedRecords){
                    if (self.options.onSelectRecord(selectedRecords, self._content) !== false) {
                        self.close();
                    }
                };
            }
            self._content.$$item.show();
            self._endOpen();
            document.site.setDraggable(self, $(self._content._header));
        }
        else {
            if (self.options.$itemPage) {
                self._openDialogPage(self.options.$itemPage);
            }
            else {
                if (self.options.$method && (self.options.$method != "GET")) 
                    document.controller._postQuery(self.options, null, self.options.article, function($location, data){
                        document.controller.loadRepresentation(self.options.article, $location.$url, function($itemPage){
                            self._openDialogPage($itemPage);
                        });
                    });
                else 
                    document.controller.loadRepresentation(self.options.article, self.options.$url, function($itemPage){
                        self._openDialogPage($itemPage);
                    });
            }
        }
    },
    _ensureMode: function(){
        this._content.$dialogMode = this.options.$dialogMode || "modal";
        this.$skin = "s-" + (this._content.$dialogMode.indexOf("mod") >= 0 ? "modal" : this._content.$dialogMode);
    },
    close: function(validated, dispose){
        if (!this.disposed) {
            if (this.options && this.options.onClose ? (this.options.onClose(validated !== true, dispose) !== false) : true) {
                document.controller.disposeObject(this);
            }
        }
    },
    _appendOkButton: function(){
        var self = this;
        var btn = document.createElement("a");
        btn.className = self.$skin + "-page-ok";
        self._content._header.appendChild(btn);
        self.$$okBtn = $(btn).bind("click", function(){
            if (self.options.onValidate(self._content) !== false) {
                self.close(true);
            }
            return false;
        });
    },
    _appendCloseButton: function(){
        var self = this;
        var btn = document.createElement("a");
        btn.className = self.$skin + "-page-close";
        self._content._header.appendChild(btn);
        self.$$closeBtn = $(btn).bind("click", function(){
            self.close();
            return false;
        });
    },
    onWindowResize: function(onBoxToggle){
        if (this.$$overlay) {
            this.$$overlay.css({
                width: 0,
                height: 0
            }).css({
                width: document.site.$$layoutSlot.outerWidth(),
                height: document.site.$$layoutSlot.outerHeight()
            });
            if (!this.isDeactivated) {
				if( this._content.layoutSlot.style.display !== "none" ) // manage of multiple window under modal
					this.$$overlay.show(); //used by convergence shhet dialog
            }
        }
        // in case of too fast move, dialog can be disposed too quickly
        // for example, if user opens the combo and makes a tabulation very fast, 
        // the dialog is disposed before onwindowresize is called (hack to prevent javascript error)
        if (!this.disposed) {
            this._moveToPosition(onBoxToggle);
        }
        
    },
    
    _moveToPosition: function(onBoxToggle){
        if (this.options.position) {
            var newPosition = helpers.object.clone(this.options.position);
            this.options.$$dialog.position(newPosition);
        }
        else {
            var $$body = document.site.$$body;
            var left, top;
            if (!this.draggedPosition) {
                var bodyWidth = document.site.$$layoutSlot.innerWidth();
                var bodyHeight = document.site.$$layoutSlot.innerHeight();
                if (this.options.$dialogSize == "content") {
                    left = ($$body.width() - this.$$layoutSlot.outerWidth(true)) / 2;
                    top = ($$body.height() - this.$$layoutSlot.outerHeight(true)) / 2;
                }
                else {
                    var width = $$body.width();
                    if (this.options.$maxWidth) {
                        width = Math.min(width, this.options.$maxWidth);
                    }
                    var margin = {
                        left: (width * 0.2),
                        top: $$body.height() * 0.1
                    };
                    left = margin.left;
                    top = $$body.offset().top + margin.top;
                    var width = width - (margin.left * 2);
                    if (width < 0) {
                        left = 0;
                        width = $$body.width();
                    }
                    this.layoutSlot.style.width = width + "px";
                    var height = $$body.height() - (margin.top * 2);
                    if (height < 0) {
                        top = 0;
                        height = $$body.height();
                    }
                    this.layoutSlot.style.height = height + "px";
                }
                this.layoutSlot.style.left = left + "px";
                this.layoutSlot.style.top = top + "px";
            }
            if (this.options.$dialogSize != "content") {
                this._resizeDialogPage();
            }
        }
    },
    _resizeDialogPage: function(){
        var body = this._content.$$body[0];
        var top = 0;
        var start = body;
        while (start && start != this.layoutSlot) {
            top += start.offsetTop;
            start = start.offsetParent;
        }
        body.style.height = (this.$$layoutSlot.height() - top) + "px";
        if (this._content.onWindowResize) {
            this._content.onWindowResize();
        }
    },
	addOverlay : function(){
	},
    dispose: function(){
        this._bindEvents(false);
        if (this.$$overlay) {
            this.$$overlay.remove();
        }
        document.site.removeResizeListener(this);
        if (this.$$closeBtn) {
            this.$$closeBtn.unbind();
        }
        if (this.$$okBtn) {
            this.$$okBtn.unbind();
        }
        this._bindScrollEvent(false);
        if (this.options) {
            this.options.page = this.options.onBeforeLoadPage = null;
            
            if (this.options.boxParent) {
                this.options.boxParent.closeDialog(this);
            }
            this._appendAutoClose(false);
            if (this.options.content) {
                //feree external content
                delete this.options.content;
                if (this.$$layoutSlot) {
                    this.$$layoutSlot.detach();
                }
            }
            else {
                //content is internal
                document.controller.disposeObject(this._content);
                if (this.$$layoutSlot) {
                    this.$$layoutSlot.empty().remove();
                }
            }
            this.options.article = this.options.onValidate = this.options.onSelectRecord = null;
        }
        this.$$scrollview = this._content = null;
    }
});
