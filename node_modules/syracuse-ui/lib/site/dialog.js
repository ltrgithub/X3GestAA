"use strict";
var helpers = require('syracuse-core/lib/helpers');

function Dialog(){
}

exports.Dialog = helpers.defineClass(Dialog, null, {
    open: function(options){
        this.id = helpers.uuid.generate();
        if ((this.options = options).content) {
            this._content = this.options.content;
            this.$$dialog = this.options.$$dialog || this.options.content.$$item;
            var dialog = this.$$dialog[0];
            if (dialog.style.position != "fixed") {
                dialog.style.position = "absolute";
            }
            dialog.style.display = '';
            this._ensureMode();
            this._appendAutoClose(true);
            this._endOpen();
        }
        else {
            this._openDialogPage();
        }
    },
    _appendAutoClose: function(append){
        var self = this;
        if ((self.options.$autoClose === undefined) ? true : self.options.$autoClose) {
            if (append) {
                self._autoCloseNamespace = self.$$dialog.attr("id") || self.id;
                self.$$dialog.attr("id", self._autoCloseNamespace);
                self._autocCloseBoundary = "#" + self._autoCloseNamespace;
                self._autocCloseBoundary += "," + (self.options.autocCloseBoundary || ("#" + self._content.id));
                $(document).bind("click." + self._autoCloseNamespace, function(event){
                    var $$btn = $(event.target);
                    if (self.$$dialog.is(":visible")) {
                        if ($$btn.closest(self._autocCloseBoundary).length == 0) {
                            self.close();
                        }
                    }
                    return true;
                });
                
            }
            else {
                if (self._autoCloseNamespace) {
                    $(document).unbind("click." + self._autoCloseNamespace);
                }
            }
        }
    },
    _endOpen: function(){
        this.$$dialog.appendTo(document.site.$$container);
        if (this._content.$dialogMode == "modal") {
            var overlay = document.createElement("div");
            overlay.className = "s-overlay";
            this.$$overlay = $(overlay)
            document.site.setZIndex(overlay);
            this.$$overlay.appendTo(document.site.$$container);
        }
        document.site.setZIndex(this.$$dialog[0]);
        this.onWindowResize();
        document.site.addResizeListener(this);
        if (this.options.position) {
            this._bindScrollEvent(true);
        }
        if (this.options.onOpened) {
            this.options.onOpened(this._content);
        }
    },
    _bindScrollEvent: function(bind){
        if (bind) {
            var self = this;
            document.site.$$body.bind("scroll." + this.id, function(evt){
                self._moveToPosition();
            });
        }
        else {
            if (document.site.$$body) {
                document.site.$$body.unbind("scroll." + this.id);
            }
        }
    },
    _openDialogPage: function($itemPage){
        var self = this;
        if ($itemPage) {
            self.$$dialog = $itemPage.$$container = $(document.createElement("div"));
            $itemPage.onBeforeLoadPage = self.options.onBeforeLoadPage;
            self._content = document.site.loadNewPage($itemPage);
            self._content.onAfterApplyPageDataChange = function(){
                self._moveToPosition();
            };
            self._ensureMode();
            self.options.$autoClose = self.options.$autoClose || false;
            self._appendAutoClose(true);
            self.$$dialog[0].className = self.$skin + "-page-container";
            self._appendCloseButton();
            self._content._header.className = self.$skin + "-page-head";
            self._content.dataSlot.className = self.$skin + "-page-data";
            self._content.$$item[0].className = self.$skin + "-page";
            self._content.$$item.hide();
            self._content.$$body.css({
                overflow: "auto",
                height: 0
            });
            if (self.options.onValidate) {
                self._appendOkButton();
            }
            if (self.options.onSelectRecord) {
                self._content.onSelectRecord = function(selectedRecords){
                    if (self.options.onSelectRecord(selectedRecords, self._content) !== false) {
                        self.close();
                    }
                };
            }
            self._content.$$item.show();
            self._endOpen();
        }
        else {
            if (self.options.$itemPage) {
                self._openDialogPage(self.options.$itemPage);
            }
            else {
                if (self.options.$method && (self.options.$method != "GET")) 
                    document.controller._postQuery(self.options, null, self.options.article, function($location, data){
                        document.controller.loadRepresentation(self.options.article, $location.$url, function($itemPage){
                            self._openDialogPage($itemPage);
                        });
                    });
                else 
                    document.controller.loadRepresentation(self.options.article, self.options.$url, function($itemPage){
                        self._openDialogPage($itemPage);
                    });
            }
        }
    },
    _ensureMode: function(){
        this._content.$dialogMode = this.options.$dialogMode || "modal";
		this.$skin = "s-" + (this._content.$dialogMode.indexOf("mod") >= 0 ? "modal" : this._content.$dialogMode);
    },
    close: function(validated, dispose){
        if (this.options && this.options.onClose ? (this.options.onClose(validated !== true, dispose) !== false) : true) {
            document.controller.disposeObject(this);
        }
    },
    _appendOkButton: function(){
        var self = this;
        var btn = document.createElement("a");
        btn.className = self.$skin + "-page-ok";
        self.$$okBtn = $(btn).bind("click", function(){
            if (self.options.onValidate(self._content) !== false) {
                self.close(true);
            }
            return false;
        }).appendTo(self._content.$$header);
    },
    _appendCloseButton: function(){
        var self = this;
        var btn = document.createElement("a");
        btn.className = self.$skin + "-page-close";
        self.$$closeBtn = $(btn).bind("click", function(){
            self.close();
            return false;
        }).appendTo(self._content.$$header);
    },
    onWindowResize: function(){
        if (this.$$overlay) {
            this.$$overlay.css({
                width: 0,
                height: 0
            }).css({
                width: document.site.$$container.outerWidth(),
                height: document.site.$$container.outerHeight()
            });
            this.$$overlay.show();
        }
        this._moveToPosition();
    },
    _moveToPosition: function(){
        if (this.options.position) {
            /* if (this.options.$size = "content") {
             var popup = this.options.$$dialog[0];
             popup.style.width = popup.scrollWidth + "px";
             popup.style.height = popup.scrollHeight + "px";
             }*/
            this.options.$$dialog.position(helpers.object.clone(this.options.position));
        }
        else {
            var body = document.site.$$body[0];
            var style = this.$$dialog[0].style;
            var left, top;
            var bodyWidth = document.site.$$container.innerWidth();
            var bodyHeight = document.site.$$container.innerHeight();
            switch (this.options.$dialogSize) {
                case "content":
                    left = (body.clientWidth - this.$$dialog.outerWidth()) / 2;
                    top = (body.clientHeight - this.$$dialog.outerHeight()) / 2;
                    break;
                default:
                    var margin = {
                        left: (body.clientWidth * 0.15),
                        top: body.clientHeight * 0.1
                    };
                    left = margin.left;
                    top = document.site.$$body.offset().top + margin.top;
                    var width = body.clientWidth - (margin.left * 2);
                    if (width < 0) {
                        left = 0;
                        width = body.clientWidth;
                    }
                    style.width = width + "px";
                    var height = body.clientHeight - (margin.top * 2);
                    if (height < 0) {
                        top = 0;
                        height = body.clientHeight;
                    }
                    style.height = height + "px";
                    break;
            }
            style.left = left + "px";
            style.top = top + "px";
            if (this.options.$dialogSize != "content") {
                this._resizeDialogPage();
            }
        }
    },
    _resizeDialogPage: function(){
        var body = this._content.$$body[0];
        var root = this.$$dialog[0];
        var top = 0;
        var start = body;
        while (start && start != root) {
            top += start.offsetTop;
            start = start.offsetParent;
        }
        body.style.height = (this.$$dialog.height() - top) + "px";
    },
    dispose: function(){
        if (this.$$overlay) {
            this.$$overlay.remove();
        }
        document.site.removeResizeListener(this);
        if (this.$$closeBtn) {
            this.$$closeBtn.unbind();
        }
        if (this.$$okBtn) {
            this.$$okBtn.unbind();
        }
        if (this.options) {
            delete this.options.onBeforeLoadPage;
            if (this.options.position) {
                this._bindScrollEvent(false);
            }
            if (this.options.boxParent) {
                if (this.options.boxParent._dialogs) {
                    delete this.options.boxParent._dialogs[this.id];
                }
            }
            this._appendAutoClose(false);
            if (this.options.content) {
                //feree external content
                delete this.options.content;
                if (this.$$dialog) {
                    this.$$dialog.detach();
                }
            }
            else {
                //content is internal
                document.controller.disposeObject(this._content);
                if (this.$$dialog) {
                    this.$$dialog.empty().remove();
                }
            }
            delete this.options.article;
            delete this.options.onValidate;
            delete this.options.onSelectRecord;
        }
        delete this._content;
    }
});
