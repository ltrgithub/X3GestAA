"use strict";
var helpers = require('syracuse-core/lib/helpers');
//0 0 90px 5px #000000

function Dialog() {}

exports.Dialog = helpers.defineClass(Dialog, null, {
	open: function(options) {
		if ((this.options = options).content) {
			this._openContent();
		} else {
			this._openDialogPage();
		}
	},
	_openContent: function() {
		var self = this;
		self._content = self.options.content;
		self.$$dialogSlot = self.options.$$dialog || self.options.content.$$item;
		self.dialogSlot = self.$$dialogSlot[0];
		if (self.dialogSlot.style.position != "fixed") {
			self.dialogSlot.style.position = "absolute";
		}
		self.dialogSlot.style.display = '';
		self._ensureMode();
		if (self.options.isAutoClose !== false) {
			self._appendAutoClose(true);
		}
		if (self.options.dragSpot) {
			self._widgetResizer = document.site.setWidgetResizable({
				source: self,
				slot: self.dialogSlot,
				dragSpot: self.options.dragSpot,
				isResizingEnabled: self.options.isResizingEnabled,
				onResize: function(resizer, moving) {
					if (moving) {
						self.widgetResizing = true;
						self.onWindowResize(true);
						self.widgetResizing = false;
					}
				}
			});
		}
		self._endOpen();
	},
	isTargetInBoundary: function(event) {
		if (event && this._autoCloseBoundary) {
			if ($(event.target).closest(this._autoCloseBoundary).length > 0) {
				return true;
			}
		}
		return false;
	},
	_appendAutoClose: function(append) {
		var self = this;
		if ((self.options.$autoClose === undefined) ? true : self.options.$autoClose) {
			if (append) {
				self._autoCloseNamespace = self.dialogSlot.getAttribute("id") || self.id;
				document.site.autoCloseDialogs = document.site.autoCloseDialogs || {};
				document.site.autoCloseDialogs[self.id] = self;
				self.dialogSlot.id = self._autoCloseNamespace;
				self._autoCloseBoundary = "#" + self._autoCloseNamespace;
				if (self.options.autoCloseBoundaryId) {
					self._autoCloseBoundary += "," + "#" + self.options.autoCloseBoundaryId;
				}
				$(document).bind("click." + self._autoCloseNamespace, function(event) {
					if (self.$$dialogSlot) {
						if (self.$$dialogSlot.is(":visible")) {
							if (!self.isTargetInBoundary(event)) {
								self.close();
							}
						}
					}
					return true;
				});

			} else {
				if (self._autoCloseNamespace) {
					if (document.site.autoCloseDialogs) {
						delete document.site.autoCloseDialogs[self.id];
					}
					$(document).unbind("click." + self._autoCloseNamespace);
				}
			}
		}
	},
	_endOpen: function() {
		document.site.layoutSlot.appendChild(this.dialogSlot);
		if (this._content.$dialogMode == "modal") {
			this.overlay = document.createElement("div");
			this.overlay.className = "s-overlay";
			document.site.setZIndex(this.overlay);
			if (this._content.$isFusionPage) {
				document.site.body.appendChild(this.overlay);
			} else {
				document.site.layoutSlot.appendChild(this.overlay);
			}
		}
		document.site.setZIndex(this.dialogSlot);
		this.isOpened = true;
		this.onWindowResize();
		if (this.options.position) {
			if (this._content.page && this._content.page.registerPositionedDialog) {
				this._content.page.registerPositionedDialog(this, true);
			}
		}
		if (this.options.onOpened) {
			this.options.onOpened(this._content);
		}
		delete this._initWidth;

		// anchor to set focus on message box (fix issue #3243)
		if (this.options.$autoFocus) {
			var focusAnchor = document.createElement("a");
			focusAnchor.className = "s-dialog-focus-anchor";
			focusAnchor.setAttribute('href', '#');
			this.$$dialogSlot[0].appendChild(focusAnchor);
			$(focusAnchor).focus();
		}
	},
	_openDialogPage: function($itemPage) {
		var self = this;
		self.$isDialogWithMenu = self.options.$isDialogWithMenu;
		document.site.attachResizeListeners(true, this);
		if ($itemPage || self.options.page) {
			if (self.options.page) {
				self._content = self.options.page;
				self.dialogSlot = self.options.page.layoutSlot || document.createElement("div");
				self.$$dialogSlot = $(self.dialogSlot);
				self._ensureMode();
				self._content.dialogWrapper = self;
			} else {
				self.dialogSlot = $itemPage.layoutSlot = document.createElement("div");
				self.$$dialogSlot = $(self.dialogSlot);
				$itemPage.onBeforeLoadPage = self.options.onBeforeLoadPage;
				$itemPage.dialogWrapper = self;
				self._content = document.site.loadNewPage($itemPage);
				self._ensureMode();
				self.dialogSlot.className = self.$skin + "-page-container";
				self._content.header.className = self.$skin + "-page-head";
				self._content.body.className = self.$skin + "-page-body";
				self._content.dataSlot.className = self.$skin + "-page-data";
				self._content.domItem.className = self.$skin + "-page";
				self._content.domItem.style.display = "none";
			}
			if (self._content.menuBar && !self.$isDialogWithMenu) {
				if (!$itemPage || !$itemPage.externalAdapter || !$itemPage.externalAdapter.isDialogWithMenu || !$itemPage.externalAdapter.isDialogWithMenu($itemPage.$urlParts.$facet)) {
					self._content.menuBar.toggleBar(false);
				}
			}
			self.dialogSlot.setAttribute("tabindex", "2");
			self.options.$autoClose = self.options.$autoClose || false;
			self._appendAutoClose(true);
			self.appendCloseButton(self._content.header);
			if (self._content.$facet == "$lookup" || self._content.scrollview) {
				self._content.body.style.overflow = "hidden";
			} else {
				self._content.body.style.overflow = "auto";
			}
			self._initWidth = true;
			if (self.options.onValidate) {
				self._appendOkButton();
			}
			if (self.options.onSelectRecord) {
				self._content.onSelectRecord = function(selectedRecords) {
					if (self.options.onSelectRecord(selectedRecords, self._content) !== false) {
						self.close();
					}
				};
			}
			self._content.domItem.style.display = "";

			self._endOpen();

			self._widgetResizer = document.site.setWidgetResizable({
				source: self,
				slot: self.dialogSlot,
				dragSpot: self._content.header,
				onResize: function(resizer, moving) {
					if (moving) {
						self.widgetResizing = true;
						self.onWindowResize();
						self.widgetResizing = false;
					}
				}
			});

			document.site.registerDialogPage(self, true);
		} else {
			if (self.options.$itemPage) {
				self._openDialogPage(self.options.$itemPage);
			} else {
				if (self.options.$method && (self.options.$method != "GET"))
					document.controller.postQuery(self.options, null, self.options.article, function($location, data) {
						self.$hasCallback = true; // in order not to dispose the dialog before the callback
						document.controller.loadRepresentation(self.options.article, $location.$url, function($itemPage) {
							if (data && document.controller.isWorkingCopyUrl(self.options.$url)) {
								$itemPage.initData = data;
							}
							self._openDialogPage($itemPage);
							self.$hasCallback = null;
						});
					});
				else {
					self.$hasCallback = true; // in order not to dispose the dialog before the callback
					document.controller.loadRepresentation(self.options.article, self.options.$url, function($itemPage) {
						self._openDialogPage($itemPage);
						self.$hasCallback = null;
					});
				}
			}
		}
	},
	_ensureMode: function() {
		this._content.$dialogMode = this.options.$dialogMode || "modal";
		this.$skin = "s-" + (this._content.$dialogMode.indexOf("mod") >= 0 ? "modal" : this._content.$dialogMode);
	},
	close: function(validated, dispose) {
		if (!this.disposed) {
			if (this.options && this.options.onClose ? (this.options.onClose(validated !== true, dispose) !== false) : true) {
				document.controller.disposeObject(this);
			}
		}
	},
	_appendOkButton: function() {
		var self = this;
		var btn = document.createElement("a");
		btn.className = self.$skin + "-page-ok";
		btn.title = document.site.localize.dlgOk;
		self._content.header.appendChild(btn);
		self.$$okBtn = $(btn).bind("click", function() {
			if (self.options.onValidate(self._content) !== false) {
				self.close(true);
			}
			return false;
		});
	},
	appendCloseButton: function(header) {
		var self = this;
		var btn = document.createElement("a");
		btn.className = self.$skin + "-page-close";
		btn.title = document.site.localize.dlgClose;
		self.$$closeBtn = $(header.appendChild(btn)).bind("click", function() {
			self.close();
			return false;
		});
	},
	onContentPageInit: function() {
		var dialogInnerSize = document.site.getInnerSize(this.dialogSlot);
		var scrollviewRect = document.site.getBoundingClientRect(this._content.scrollview);
		var space = dialogInnerSize.height - scrollviewRect.height;
		if (space) {
			this.dialogSlot.style.height = (this.dialogSlot.clientHeight - space) + "px";
		}
	},
	onContentPageChange: function() {
		if (!this.isOnContentPageChange) {
			this.isOnContentPageChange = true;
			if (this._content) {
				switch (this._content.$facet) {
					case "$lookup":
					case "$select":
						var areaRect = this.getAreaRect(document.site.body);
						var dialogRect = document.site.getBoundingClientRect(this.dialogSlot);
						var scrollviewRect = document.site.getBoundingClientRect(this._content.scrollview);
						var scroller = this._content.lookupField && this._content.lookupField.builder.scroller;
						if (scroller && scroller.bodySlot) {
							if (this.widgetResizing) {
								if (dialogRect.right > areaRect.right) {
									this.dialogSlot.style.width = (dialogRect.width - (dialogRect.right - areaRect.right)) + "px";
								}
								if (dialogRect.bottom > areaRect.bottom) {
									this.dialogSlot.style.width = (dialogRect.height - (dialogRect.bottom - areaRect.bottom)) + "px";
								}
							}
							var dialogInnerSize = document.site.getInnerSize(this.dialogSlot);
							var space = dialogInnerSize.height - scrollviewRect.height;
							var diff = scroller.bodySlot.scrollHeight - scroller.bodySlot.clientHeight;
							if (diff > 0 || space < 0) {
								if (!this.widgetResizing) {
									if (space < 0) {
										if (areaRect.height > dialogRect.height) {
											space = diff > 0 ? diff : Math.abs(space);
											this.dialogSlot.style.height = (dialogRect.height + Math.min((areaRect.height - dialogRect.height), space)) + "px";
											dialogInnerSize = document.site.getInnerSize(this.dialogSlot);
											scrollviewRect = document.site.getBoundingClientRect(this._content.scrollview);
											space = dialogInnerSize.height - scrollviewRect.height;
										}
									}
								} else {
									if (scroller.bodySlot.clientHeight < 40) {
										this.dialogSlot.style.height = (dialogRect.height + Math.abs(space)) + "px";
										dialogInnerSize = document.site.getInnerSize(this.dialogSlot);
										scrollviewRect = document.site.getBoundingClientRect(this._content.scrollview);
										space = dialogInnerSize.height - scrollviewRect.height;
									}
								}
								scroller.bodySlot.style.height = (scroller.bodySlot.clientHeight + space) + "px";
								scroller.onWindowResize();
							}
						}
						break;
					default:
						var scrollview = this._content.scrollview;
						if (scrollview.style.maxHeight) {
							scrollview.style.maxHeight = "";
						}
						var areaRect = this.getAreaRect(document.site.body);
						var dialogRect = document.site.getBoundingClientRect(this.dialogSlot);
						var scrollviewRect = document.site.getBoundingClientRect(this._content.scrollview);

						var dialogInnerSize = document.site.getInnerSize(this.dialogSlot);
						var space = dialogInnerSize.height - scrollviewRect.height;
						var diff = scrollview.scrollHeight - scrollview.clientHeight;
						if (!this.widgetResizing) {
							if (diff > 0 || space < 0) {
								if (space < 0) {
									if (areaRect.height > dialogRect.height) {
										space = diff > 0 ? diff : Math.abs(space);
										this.dialogSlot.style.height = (dialogRect.height + Math.min((areaRect.height - dialogRect.height), space)) + "px";
										dialogInnerSize = document.site.getInnerSize(this.dialogSlot);
										space = dialogInnerSize.height - scrollviewRect.height;
									}
									if (space < 0) {
										scrollview.style.maxHeight = dialogInnerSize.height + "px";
										this._content.onWindowResize();
									}
								}
							}
						} else {
							if (dialogRect.right > areaRect.right) {
								this.dialogSlot.style.width = (dialogRect.width - (dialogRect.right - areaRect.right)) + "px";
							}
							if (dialogRect.bottom > areaRect.bottom) {
								this.dialogSlot.style.width = (dialogRect.height - (dialogRect.bottom - areaRect.bottom)) + "px";
							}
							dialogInnerSize = document.site.getInnerSize(this.dialogSlot);
							space = dialogInnerSize.height - scrollviewRect.height;
							if (scrollview.clientHeight > 40 && space < 0) {
								scrollview.style.maxHeight = dialogInnerSize.height + "px";
								this._content.onWindowResize();
							}
						}
				}
			}
			this.isOnContentPageChange = false;
		}
	},
	getAreaRect: function() {
		var areaRect = document.site.getBoundingClientRect(document.site.body);
		areaRect.bounding = {
			top: areaRect.top,
			bottom: areaRect.bottom,
			left: areaRect.left,
			right: areaRect.right,
			width: areaRect.width,
			height: areaRect.height
		};
		areaRect.left = areaRect.width * 0.05;
		areaRect.right -= areaRect.left;
		areaRect.width = areaRect.width - (areaRect.left * 2);

		areaRect.height = areaRect.height - (2 * areaRect.top);
		areaRect.bottom -= areaRect.top;
		return areaRect;
	},
	onWindowResize: function(resize, onScroll) {
		if (this._content) {
			if (!onScroll && this.overlay) {
				this.overlay.style.width = document.site.$$layoutSlot.outerWidth() + "px";
				this.overlay.style.height = document.site.$$layoutSlot.outerHeight() + "px";
				if (!this.isDeactivated) {
					if (this._content.layoutSlot.style.display !== "none") // manage of multiple window under modal
						this.overlay.style.display = "";
				}
			}
			// in case of too fast move, dialog can be disposed too quickly
			if (!this.disposed && document.site.$$body && document.site._$$header) {
				var area = this.options.isPageBoundary ? this._content.page.scrollview : document.site.body;
				var areaRect = document.site.getBoundingClientRect(area);
				var dialogRect = document.site.getBoundingClientRect(this.dialogSlot);
				var bodyWidth = areaRect.width;
				var xMargin = areaRect.width * 0.05;
				areaRect.width = areaRect.width - (xMargin * 2);
				this._maxHeight = areaRect.height - areaRect.top;
				if (this._widgetResizer) {
					this._widgetResizer.maxHeight = this._maxHeight;
				}
				if (this.options.position) {
					if (dialogRect.width > areaRect.width) {
						this.dialogSlot.style.width = (dialogRect.width = areaRect.width) + "px";
					}
					if (dialogRect.height > this._maxHeight / 2) {
						this.dialogSlot.style.height = (dialogRect.height = this._maxHeight / 2) + "px";
					}
					this.$$dialogSlot.position({
						my: this.options.position.my,
						at: this.options.position.at,
						of: this.options.position.of
					});
					if (this.options.onresize) {
						this.options.onresize(this);
					}
					return;
				} else {
					if (this._content) {
						if (this.options.$dialogSize == "content") {
							if (!this.widgetResizing) {
								var areaRect = this.getAreaRect(document.site.body);
								this.dialogSlot.style.height = this.dialogSlot.style.width = "";
								var dialogRect = document.site.getBoundingClientRect(this.dialogSlot);
								this.dialogSlot.style.width = (dialogRect.width = Math.min(dialogRect.width, areaRect.width)) + "px";
								this.dialogSlot.style.height = (dialogRect.height = Math.min(dialogRect.height, areaRect.height)) + "px";
								this.dialogSlot.style.top = (areaRect.bounding.height - dialogRect.height) / 2 + "px";
								this.dialogSlot.style.left = (areaRect.bounding.width - dialogRect.width) / 2 + "px";
							}
							if (this.options.onresize) {
								this.options.onresize(this);
							}
							return;
						} else {
							if (this._content.page && this._content.page.scrollview) {
								if (!this.widgetResizing) {
									this.dialogSlot.style.top = areaRect.top + "px";
									this.dialogSlot.style.left = xMargin + "px";
									this.dialogSlot.style.width = areaRect.width + "px";
									this.dialogSlot.style.height = this._maxHeight + "px";
									if (!document.site.isResizing) {
										this.onContentPageInit();
									}
								}
								this.onContentPageChange();
								return;
							}
						}
					}

					var moveDiag = true;
					if (!resize) {
						if (this.draggedPosition || this.widgetResizing) {
							moveDiag = (((dialogRect.top + dialogRect.height) >= areaRect.height) || ((dialogRect.left + dialogRect.width) >= bodyWidth));
						}
						if (moveDiag) {
							delete this.draggedPosition;
							if (dialogRect.width > areaRect.width) {
								this.dialogSlot.style.width = (dialogRect.width = areaRect.width) + "px";
							}
							if (dialogRect.height > this._maxHeight) {
								this.dialogSlot.style.height = (dialogRect.height = this._maxHeight) + "px";
							}
							if (this._initWidth || ((dialogRect.left + dialogRect.width) >= bodyWidth)) {
								this.dialogSlot.style.left = ((bodyWidth - dialogRect.width) / 2) + "px";
							}
							this.dialogSlot.style.top = areaRect.top + "px";
						}
					}
					if (this.resizeListener) {
						this.resizeListener.notifyObservers(true);
					}
				}

			} else {
				if (this.options.position) {
					if (this.options.position.left) {
						var position = this.draggedPosition ? this.draggedPosition : this.options.position;
						this.dialogSlot.style.left = position.left;
						this.dialogSlot.style.top = position.top;
					} else {
						this.$$dialogSlot.position({
							my: this.options.position.my,
							at: this.options.position.at,
							of: this.options.position.of
						});
					}
				}
				if (this.options.onresize) {
					this.options.onresize(this);
				}
			}
		}
	},
	onSave: function(menuItem) {
		if (this.options.onSave) {
			return this.options.onSave(menuItem, this);
		}
		return true;
	},
	dispose: function() {
		if (this.overlay) {
			document.site.removeDomChild(this.overlay);
		}
		document.site.attachResizeListeners(false, this);
		if (this._widgetResizer) {
			this._widgetResizer.dispose();
			this._widgetResizer = null;
		}
		if (this.$$closeBtn) {
			this.$$closeBtn.unbind();
		}
		if (this.$$okBtn) {
			this.$$okBtn.unbind();
		}
		document.site.registerDialogPage(this, false);
		if (this._content) {
			if (this._content.page && this._content.page.registerPositionedDialog) {
				this._content.page.registerPositionedDialog(this, false);
			}
			delete this._content.dialogWrapper;
		}
		if (this.options) {
			this.options.dragSpot = this.options.page = this.options.onBeforeLoadPage = null;
			if (this.options.boxParent) {
				this.options.boxParent.closeDialog(this);
			}
			this._appendAutoClose(false);
			if (this.options.content) {
				delete this.options.content;
				if (this.$$dialogSlot) {
					this.$$dialogSlot.detach();
				}
			} else {
				document.controller.disposeObject(this._content);
				if (this.$$dialogSlot) {
					this.$$dialogSlot.empty().remove();
				}
			}
			this.options.article = this.options.onValidate = this.options.onSelectRecord = this.options.onresize = null;
		}
		this.$$dialogSlot = this.dialogSlot = this.overlay = this._content = this.options = null;
	}
});