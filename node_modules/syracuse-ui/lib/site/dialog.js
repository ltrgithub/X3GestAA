"use strict";
var helpers = require('syracuse-core/lib/helpers');
var keyHelper = require('syracuse-ui/lib/site/aside/keyHelper');

function Dialog() {}

exports.Dialog = helpers.defineClass(Dialog, null, {
	open: function(options) {
		this.id = helpers.uuid.generate();
		if ((this.options = options).content) {
			this._openContent();
		} else {
			this._openDialogPage();
		}
	},
	_openContent: function() {
		var self = this;
		self._content = self.options.content;
		self.$$dialogSlot = self.options.$$dialog || self.options.content.$$item;
		self.dialogSlot = self.$$dialogSlot[0];
		if (self.dialogSlot.style.position != "fixed") {
			self.dialogSlot.style.position = "absolute";
		}
		self.dialogSlot.style.display = '';
		self._ensureMode();
		if (self.options.isAutoClose !== false) {
			self._appendAutoClose(true);
		}
		if (self.options.dragSpot) {
			self._resizer = document.site.setResizable({
				source: self,
				slot: self.dialogSlot,
				dragSpot: self.options.dragSpot,
				isResizingEnabled: self.options.isResizingEnabled,
				onResize: function(resizer, moving) {
					if (moving) {
						document.site.isResizing = true;
						self.onWindowResize();
						document.site.isResizing = false;
					}
				}
			});
		}
		self._endOpen();
		if (self._resizer) {
			// this._resizer.options.minHeight = this.$$dialogSlot.outerHeight(true);
		}
	},
	_handleCloseOnEscape: function() {
		this._bindEvents(true);
		var close;
		if (this.options.getCloseAnchor) {
			close = this.options.getCloseAnchor();
		} else {
			close = document.createElement("a");
			close.className = "s-dialog-close-anchor";
			close.setAttribute('href', '#');
			this.dialogSlot.appendChild(close);
		}
		// in order for the bind to run, one element of the dom should be focused
		if (close != "noclose") {
			//$(close).focus();
		}
	},
	_bindEvents: function(bind) {

		var self = this;
		var namespace = ".dialog" + this.id;
		if (bind) {
			$(document).bind("keypress" + namespace, function(event) {
				if (event.keyCode == keyHelper.keyCode.ESCAPE) {
					self.close();
					return false;
				}
			});
		} else {
			$(document).unbind(namespace);
		}
	},
	isTargetInBoundary: function(event) {
		if (event && this._autoCloseBoundary) {
			if ($(event.target).closest(this._autoCloseBoundary).length > 0) {
				return true;
			}
		}
		return false;
	},
	_appendAutoClose: function(append) {
		var self = this;
		if ((self.options.$autoClose === undefined) ? true : self.options.$autoClose) {
			if (append) {
				self._autoCloseNamespace = self.dialogSlot.getAttribute("id") || self.id;
				document.site.autoCloseDialogs = document.site.autoCloseDialogs || {};
				document.site.autoCloseDialogs[self.id] = self;
				self.dialogSlot.setAttribute("id", self._autoCloseNamespace);
				self._autoCloseBoundary = "#" + self._autoCloseNamespace;
				if (self.options.autoCloseBoundaryId) {
					self._autoCloseBoundary += "," + "#" + self.options.autoCloseBoundaryId;
				}
				$(document).bind("click." + self._autoCloseNamespace, function(event) {
					if (self.$$dialogSlot) {
						if (self.$$dialogSlot.is(":visible")) {
							if (!self.isTargetInBoundary(event)) {
								self.close();
							}
						}
					}
					return true;
				});

			} else {
				if (self._autoCloseNamespace) {
					if (document.site.autoCloseDialogs) {
						delete document.site.autoCloseDialogs[self.id];
					}
					$(document).unbind("click." + self._autoCloseNamespace);
				}
			}
		}
	},
	_endOpen: function() {
		document.site.layoutSlot.appendChild(this.dialogSlot);
		if (this._content.$dialogMode == "modal") {
			this.overlay = document.createElement("div");
			this.overlay.className = "s-overlay";
			document.site.setZIndex(this.overlay);
			document.site.body.appendChild(this.overlay);
		}
		document.site.setZIndex(this.dialogSlot);
		this.isOpened = true;
		this.onWindowResize();
		document.site.addResizeListener(this);
		if (this.options.position) {
			if (this.options.position.width) {
				this.dialogSlot.style.width = this.options.position.width;
			}
			if (this.options.position.height) {
				this.dialogSlot.style.height = this.options.position.height;
			}
			if (this._content.page && this._content.page.registerPositionedDialog) {
				this._content.page.registerPositionedDialog(this, true);
			}
			if (this.options.onresize) {
				this.options.onresize(this);
			}
		}
		if (this.options.onOpened) {
			this.options.onOpened(this._content);
		}

		if (this.options.isAutoClose !== false) {
			this._handleCloseOnEscape();
		}
		delete this._initWidth;
	},
	_openDialogPage: function($itemPage) {
		var self = this;
		if ($itemPage || self.options.page) {
			if (self.options.page) {
				self._content = self.options.page;
				self.dialogSlot = self.options.page.layoutSlot || document.createElement("div");
				self.$$dialogSlot = $(self.dialogSlot);
				self._ensureMode();
				self._content.dialogWrapper = self;
			} else {
				self.dialogSlot = $itemPage.layoutSlot = document.createElement("div");
				self.$$dialogSlot = $(self.dialogSlot);
				$itemPage.onBeforeLoadPage = self.options.onBeforeLoadPage;
				$itemPage.dialogWrapper = self;
				self._content = document.site.loadNewPage($itemPage);
				self._ensureMode();
				self.dialogSlot.className = self.$skin + "-page-container";
				self._content._header.className = self.$skin + "-page-head";
				self._content._body.className = self.$skin + "-page-body";
				self._content.dataSlot.className = self.$skin + "-page-data";
				self._content._item.className = self.$skin + "-page";
				self._content._item.style.display = "none";
			}
			if (self._content.menuBar) {
				if (!$itemPage.externalAdapter || !$itemPage.externalAdapter.isDialogWithMenu || !$itemPage.externalAdapter.isDialogWithMenu($itemPage.$urlParts.$facet)) {
					self._content.menuBar.hideBar();
				}
			}
			self.dialogSlot.setAttribute("tabindex", "2");
			self.options.$autoClose = self.options.$autoClose || false;
			self._appendAutoClose(true);
			self.appendCloseButton(self._content._header);
			if (self._content.$facet == "$lookup" || self._content.scrollview) {
				self._content._body.style.overflow = "hidden";
			} else {
				self._content._body.style.overflow = "auto";
			}
			self._initWidth = true;
			self._xMarginPercent = 0.1;
			if (self.options.onValidate) {
				self._appendOkButton();
			}
			if (self.options.onSelectRecord) {
				self._content.onSelectRecord = function(selectedRecords) {
					if (self.options.onSelectRecord(selectedRecords, self._content) !== false) {
						self.close();
					}
				};
			}
			self._content._item.style.display = "";

			self._endOpen();
			self._resizer = document.site.setResizable({
				source: self,
				slot: self.dialogSlot,
				dragSpot: self._content._header,
				onResize: function(resizer, moving) {
					if (moving) {
						document.site.isResizing = true;
						self.onWindowResize();
						document.site.isResizing = false;
					}
				}
			});
			document.site.registerDialogPage(self, true);
		} else {
			if (self.options.$itemPage) {
				self._openDialogPage(self.options.$itemPage);
			} else {
				if (self.options.$method && (self.options.$method != "GET")) document.controller._postQuery(self.options, null, self.options.article, function($location, data) {
					document.controller.loadRepresentation(self.options.article, $location.$url, function($itemPage) {
						self._openDialogPage($itemPage);
					});
				});
				else document.controller.loadRepresentation(self.options.article, self.options.$url, function($itemPage) {
					self._openDialogPage($itemPage);
				});
			}
		}
	},
	_ensureMode: function() {
		this._content.$dialogMode = this.options.$dialogMode || "modal";
		this.$skin = "s-" + (this._content.$dialogMode.indexOf("mod") >= 0 ? "modal" : this._content.$dialogMode);
	},
	close: function(validated, dispose) {
		if (!this.disposed) {
			if (this.options && this.options.onClose ? (this.options.onClose(validated !== true, dispose) !== false) : true) {
				document.controller.disposeObject(this);
			}
		}
	},
	_appendOkButton: function() {
		var self = this;
		var btn = document.createElement("a");
		btn.className = self.$skin + "-page-ok";
		self._content._header.appendChild(btn);
		self.$$okBtn = $(btn).bind("click", function() {
			if (self.options.onValidate(self._content) !== false) {
				self.close(true);
			}
			return false;
		});
	},
	appendCloseButton: function(header) {
		var self = this;
		var btn = document.createElement("a");
		btn.className = self.$skin + "-page-close";
		self.$$closeBtn = $(header.appendChild(btn)).bind("click", function() {
			self.close();
			return false;
		});
	},
	onWindowResize: function(resize, onScroll) {
		if (this._content) {

			if (!onScroll && this.overlay) {
				this.overlay.style.width = document.site.$$layoutSlot.outerWidth() + "px";
				this.overlay.style.height = document.site.$$layoutSlot.outerHeight() + "px";
				if (!this.isDeactivated) {
					if (this._content.layoutSlot.style.display !== "none") // manage of multiple window under modal
					this.overlay.style.display = "";
				}
			}
			// in case of too fast move, dialog can be disposed too quickly
			if (!this.disposed) {
				this._maxWidth = this._bodyWidth = document.site.$$body.width();
				this._xMargin = this._maxWidth * (this._xMarginPercent || 0.2);
				this._maxWidth = this._maxWidth - (this._xMargin * 2);
				this._yMargin = document.site._$$header.outerHeight(true) * 2;
				this._maxHeight = (this._bodyHeight = document.site.$$body.height()) - this._yMargin;
				this._diagWidth = this.$$dialogSlot.outerWidth(true);
				this._diagHeight = this.$$dialogSlot.outerHeight(true);
				if (this._resizer) {
					//  this._resizer.maxWidth = this._maxWidth;
					this._resizer.maxHeight = this._maxHeight;
				}
				if (this.options.position) {
					if (this._diagWidth > this._maxWidth) {
						this.dialogSlot.style.width = (this._diagWidth = this._maxWidth) + "px";
					}
					if (this._diagHeight > this._maxHeight / 2) {
						this.dialogSlot.style.height = (this._diagHeight = this._maxHeight / 2) + "px";
					}
					if (this.options.position.left) {
						var position = this.draggedPosition ? this.draggedPosition : this.options.position;
						this.dialogSlot.style.left = position.left;
						this.dialogSlot.style.top = position.top;
					} else {
						this.$$dialogSlot.position({
							my: this.options.position.my,
							at: this.options.position.at,
							of: this.options.position.of
						});
					}
				} else {
					var moveDiag = true;
					if (!resize) {
						var offset = this.$$dialogSlot.offset();
						if (this.draggedPosition || document.site.isResizing) {
							moveDiag = (((offset.top + this._diagHeight) >= this._bodyHeight) || ((offset.left + this._diagWidth) >= this._bodyWidth));
						}
						if (moveDiag) {
							delete this.draggedPosition;
							if (this._diagWidth > this._maxWidth) {
								this.dialogSlot.style.width = (this._diagWidth = this._maxWidth) + "px";
							}
							if (this._diagHeight > this._maxHeight) {
								this.dialogSlot.style.height = (this._diagHeight = this._maxHeight) + "px";
							}
							if (this.options.$dialogSize == "content") {
								this.dialogSlot.style.left = ((this._bodyWidth - this._diagWidth) / 2) + "px";
								this.dialogSlot.style.top = ((this._bodyHeight - this._diagHeight) / 2) + "px";
							} else {
								if (this._initWidth || ((offset.left + this._diagWidth) >= this._bodyWidth)) {
									this.dialogSlot.style.left = ((this._bodyWidth - this._diagWidth) / 2) + "px";
								}
								this.dialogSlot.style.top = this._yMargin + "px";
							}
						}
					}
					if (this._content.onWindowResize) {
						this._content.onWindowResize();
					}
				}
				if (this.options.onresize) {
					this.options.onresize(this);
				}
			}
		}
	},
	dispose: function() {
		this._bindEvents(false);
		if (this.overlay) {
			document.site.removeDomChild(this.overlay);
		}
		document.site.removeResizeListener(this);
		if (this._resizer) {
			this._resizer.dispose();
			this._resizer = null;
		}
		if (this.$$closeBtn) {
			this.$$closeBtn.unbind();
		}
		if (this.$$okBtn) {
			this.$$okBtn.unbind();
		}
		document.site.registerDialogPage(this, false);
		if (this._content) {
			if (this._content.page && this._content.page.registerPositionedDialog) {
				this._content.page.registerPositionedDialog(this, false);
			}
			delete this._content.dialogWrapper;
		}
		if (this.options) {
			this.options.dragSpot = this.options.page = this.options.onBeforeLoadPage = null;
			if (this.options.boxParent) {
				this.options.boxParent.closeDialog(this);
			}
			this._appendAutoClose(false);
			if (this.options.content) {
				delete this.options.content;
				if (this.$$dialogSlot) {
					this.$$dialogSlot.detach();
				}
			} else {
				document.controller.disposeObject(this._content);
				if (this.$$dialogSlot) {
					this.$$dialogSlot.empty().remove();
				}
			}
			this.options.article = this.options.onValidate = this.options.onSelectRecord = this.options.onresize = null;
		}
		this.$$dialogSlot = this.dialogSlot = this.overlay = this._content = this.options = null;
	}
});