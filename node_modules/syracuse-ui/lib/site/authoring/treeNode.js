"use strict";
var helpers = require('syracuse-core/lib/helpers');

function TreeNode(item, parentNode, authorPage){
    this.item = item;
    this.$isExpanded = false;
    this.children = [];
    this.parentNode = parentNode;
    this.authorPage = authorPage;
}

exports.TreeNode = helpers.defineClass(TreeNode, null, {
    getChildrenLevel: function(){
        return this.children.length > 0 ? this.children[0].$authoringLevel : null;
    },
    setDesignableItem: function(item){
        if (item.$isTabLayout) {
            document.site.toggleClass(item._header, "s-aw-item", true);
            item._header.setAttribute("data-s-item", item.id);
            if (item.boxParent) {
                item._header.setAttribute("data-s-article", item.boxParent.getArticle().id);
            }
        }
        document.site.toggleClass((item.dataSlot || item.$$item[0]), "s-aw-item", true);
        item.$$item[0].setAttribute("data-s-item", item.id);
        if (item.boxParent) {
            item.$$item[0].setAttribute("data-s-article", item.boxParent.getArticle().id);
        }
        if (this.authorPage.$isLightMode && this.$authoringLevel != "field") {
            this.toggleBoxLightMode(true);
        }
    },
    selectItem: function(doSelect){
        this.authorPage.selectItem(this, doSelect);
    },
    drawChildNodes: function(draw){
        this.children.forEach(function(child){
            child.drawNode(draw);
        });
    },
    addNodeId: function(target){
        target.setAttribute("data-s-node", this.id);
    },
    drawNode: function(draw){
        if (draw) {
            var dom;
            if (!this.parentNode.$$children) {
                this.parentNode.$$opener[0].className = "s-aw-tree-item-opener-children";
                dom = document.createElement("ul");
                dom.className = "s-aw-tree-level";
                this.parentNode.$$children = $(dom).appendTo(this.parentNode.$$node);
                this.parentNode.expand(false);
            }
            
            dom = document.createElement("li");
            dom.className = "s-aw-tree-item";
            this.$$node = $(dom).appendTo(this.parentNode.$$children);
            dom = document.createElement("div");
            dom.className = "s-aw-tree-item-data";
            this.$$data = $(dom).appendTo(this.$$node);
            
            dom = document.createElement("a");
            dom.className = "s-aw-tree-item-opener";
            this.addNodeId(dom);
            this.$$opener = $(dom).appendTo(this.$$data);
            
            var check = (this.$$check = $("<input type='checkbox'/>").appendTo(this.$$data))[0];
            check.className = "s-aw-tree-item-check";
            this.addNodeId(check);
            this.applyHiddenState(this);
            
            this.domTitle = document.createElement("div");
            this.domTitle.className = "s-aw-tree-item-title" + (this.authorPage.$$pathSteps[this.id] ? (" s-aw-tree-designed-" + this.$authoringLevel) : "");
            this.addNodeId(this.domTitle);
            this.$$data[0].appendChild(this.domTitle).textContent = this.item.getTitle();
        }
        else {
            delete this.$$node;
            delete this.$$data;
            delete this.$$opener;
            delete this.$$check;
            delete this.domTitle;
            delete this.$$children;
        }
        this.drawChildNodes(draw);
    },
    load: function(){
        var self = this;
        self.id =  self.item.id  + "-node";
        self.authorPage.nodes[self.id] = self;
        self.$authoringLevel = self.item.$authoringLevel || "field";
        
        self.item.authoringNode = self;
        if (self.item.$$item) {
            if (!self.parentNode) {
                self.dataSlot = self.item.dataSlot; //for page
                self.item.$$item.bind("click.treenoderoot", function(event){
                    if (!document.site.DDAuthoring) {
                        self.selectItem();
                    }
                    return false;
                });
            }
            self.setDesignableItem(self.item, true);
            if (self.item.layoutContent) {
                self.item.layoutContent.toggleAuthoring(true);
            }
        }
        self.applyHiddenState(self.item.$item);
        self._loadLayout(self.item.layoutContent);
        if (self.authorPage.$isLightMode) {
            self.toggleLightMode(null, true);
        }
        return self;
    },
    _loadLayout: function(layoutContent){
        if (layoutContent) {
            var self = this;
            layoutContent.items.forEach(function(item){
                if (item.$layout) {
                    self._loadLayout(item);
                }
                else {
                    self.appendChildItem({
                        newItem: item
                    });
                }
            });
        }
    },
    toggleFieldLightMode: function($isLightMode){
        if ($isLightMode) {
            if (!this.item.authoringLight) {
                this.item.authoringLight = {
                    $$bag: $(document.createElement("div")).append(this.item.$$item.children()),
                    $className: this.item.$$item[0].className
                }
                this.item.$$item[0].className = "s-aw-light-field"
                document.site.toggleClass(this.item.$$item[0], "s-aw-item", true);
                
                var div = document.createElement("div");
                div.className = "s-aw-light-field-value";
                var $$value = $(div);
                
                var div = document.createElement("div");
                div.className = "s-aw-light-field-type";
                div.style.backgroundImage = "url('" + document.site.$item.$iconPath + "authoring/s-aw-light-" + this.item.$field.$type.replace("application/x-", "") + ".png')";
                $$value.append(div);
                
                div = document.createElement("div");
                div.className = "s-aw-light-field-title";
                $$value.append($(div).text(this.item.getTitle()));
                $$value.appendTo(this.item.$$item);
            }
        }
        else {
            if (this.item.authoringLight) {
                this.item.$$item.empty()[0].className = this.item.authoringLight.$className;
                this.item.$$item.append(this.item.authoringLight.$$bag.children());
                delete this.item.authoringLight;
            }
        }
    },
    _toggleCss: function(item, oldSkin, newSkin){
        item.className = item.className.replace(new RegExp(oldSkin, "g"), newSkin);
    },
    toggleBoxLightMode: function($isLightMode){
        var dom;
        var skinLight = "s-aw-light-" + this.$authoringLevel;
        if ($isLightMode) {
            if (!this.fullSkin) {
                this.fullSkin = this.item.$skin;
            }
            this.item.$skin = skinLight;
            this._toggleCss(this.item._header, this.fullSkin, skinLight);
            
            if (this.item.$isTabLayout) {
                this.item.$skinTab = this.item.$skin + "-tab";
                this._toggleCss(this.item.$$body[0], this.fullSkin, skinLight);
                this._toggleCss(this.item.layoutParent._tabs, this.fullSkin, skinLight);
            }
            this._toggleCss(this.item.$$item[0], this.fullSkin, skinLight);
        }
        else {
            this.item.$skin = this.fullSkin;
            this._toggleCss(this.item._header, skinLight, this.item.$skin);
            if (this.item.$isTabLayout) {
                this.item.$skinTab = this.item.$skin + "-tab";
                this._toggleCss(this.item.$$body[0], skinLight, this.item.$skin);
                this._toggleCss(this.item.layoutParent._tabs, skinLight, this.item.$skin);
            }
            this._toggleCss(this.item.$$item[0], skinLight, this.item.$skin);
        }
    },
    toggleLightMode: function(layoutContent, $isLightMode){
        var self = this;
        if (!layoutContent) {
            layoutContent = self.item.layoutContent;
        }
        if (layoutContent) {
            layoutContent.items.forEach(function(child){
                if (child.$layout) {
                    self.toggleLightMode(child, $isLightMode);
                }
                else {
                    var node = child.authoringNode;
                    if (node.$authoringLevel == "field") {
                        node.toggleFieldLightMode($isLightMode);
                    }
                    else {
                        node.toggleBoxLightMode($isLightMode);
                        node.toggleLightMode(null, $isLightMode);
                    }
                }
            });
        }
        else {
            if (this.$authoringLevel == "field") {
                this.toggleFieldLightMode($isLightMode);
            }
        }
    },
    applyHiddenState: function(state){
        this.$isHidden = state.$isHidden;
        if (this.$$check) {
            this.$$check.attr("checked", this.$isHidden !== true);
        }
    },
    toggleOverItem: function(isOver){
        this.toggleItemCss("over", isOver);
        if (isOver && this.authorPage.overNode != this) {
            this.authorPage.showOverPathNodes(this, true);
        }
    },
    toggleItemCss: function(status, show, css){
        var css = "s-aw-" + status;
        if (this.item && this.item.$$item) {
            document.site.toggleClass(this.dataSlot || this.item.$$item[0], css, show);
            if (this.item.$isTabLayout) {
                document.site.toggleClass(this.item._header, css, show);
            }
        }
    },
    highlightDesignedItem: function($designed){
        this.toggleItemCss("designed", $designed);
    },
    appendChildItem: function(options){
        var child = options.newItem.authoringNode;
        if (!child) {
            child = options.newItem.authoringNode = new TreeNode(options.newItem, this, this.authorPage);
        }
        else {
            if (child.parentNode != this) {
                child.parentNode.removeChildNode(child);
                //child.parentNode.children.splice(child.parentNode.getNodeIndex(child), 1);
            }
        }
        this.children.splice(options.newIndex || this.children.length + 1, 0, child);
        child.parentNode = this;
        if (options.load !== false) {
            child.load();
        }
    },
    removeChildNode: function(child){
        this.children.splice(this.getNodeIndex(child), 1);
    },
    getNodeIndex: function(node){
        for (var ii = 0; ii < this.children.length; ii++) {
            if (this.children[ii] == node) {
                return ii;
            }
        }
        return -1;
    },
    
    expand: function($isExpanded){
        this.$isExpanded = $isExpanded === undefined ? !this.$isExpanded : $isExpanded;
        if (this.$$opener) {
            this.$$opener.toggleClass("s-open", this.$isExpanded);
        }
        if (this.$$children) {
            this.$$children.toggle(this.$isExpanded);
        }
    },
    dispose: function(){
        if (this.item) {
            if (this.item.$$item && !this.parentNode) {
                this.item.$$item.unbind("click.treenoderoot");
            }
            this.toggleLightMode(null, false);
            delete this.item.authoringNode;
            if (this.item.layoutContent) {
                this.item.layoutContent.toggleAuthoring(false);
            }
            this.highlightDesignedItem(false);
            delete this.item;
        }
        if (this.children) {
            this.children.forEach(function(child){
                child.dispose();
            });
        }
        this.parentNode = this.authorPage = this.children = null;
    }
});
