"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require("syracuse-ui/lib/article/article").Article;
var layoutSettings = require('syracuse-ui/lib/article/layouts/authoring/layoutSettings');

function ItemPalette(){

}

exports.ItemPalette = helpers.defineClass(ItemPalette, Article, {
    getNode: function(){
        return this.authorPage.designedNode;
    },
    isFieldItem: function(){
        return this.getNode().$authoringLevel == "field";
    },
    getPage: function(){
        return this;
    },
    _notifyChildrenFields: function(children, value, binding){
        var self = this;
        children.forEach(function(child){
            if (child.$authoringLevel == "field") {
                self._notifyFieldItem(child.item, value, binding);
            }
            else {
                if (child.children) {
                    self._notifyChildrenFields(child.children, value, binding);
                }
            }
        });
    },
    _notifyChildrenbox: function(node, metaData){
        var self = this;
        node.item.applyDesignMetaData(metaData);
        if (node.children) {
            node.children.forEach(function(child){
                if (child.$authoringLevel != "field") {
                    self._notifyChildrenbox(child, metaData);
                }
            });
        }
    },
    _notifyFieldItem: function(item, value, binding){
        var metaData = {}
        metaData[binding] = value;
        item.applyDesignMetaData(metaData, true);
        if (item.authoringNode && metaData.$isHidden !== undefined) {
            item.authoringNode.applyHiddenState(metaData);
        }
    },
    notifyDataChange: function(field, value){
        var self = this;
        var node = self.getNode();
        var fieldArticle = field.getArticle();
        if (fieldArticle.designedField) {
            var metaData = {};
            metaData[field.$item.$bind] = value;
            fieldArticle.designedField.applyDesignMetaData(metaData, true);
            fieldArticle.applyChange(metaData);
            if (fieldArticle.onNotifyAuthoringChange) {
                fieldArticle.onNotifyAuthoringChange(field, value, metaData);
            }
            self.authorPage.notifyUpdate();
        }
        else {
            var metaData = {};
            metaData[field.$item.$bind] = value;
            if (self.isFieldItem()) {
                self._notifyFieldItem(node.item, value, field.$item.$bind);
            }
            else {
                if (field.$item.$bind.indexOf("$fields") == 0) {
                    if (metaData.$fieldsWidth === undefined) {
                        var fieldBind = field.$item.$bind.slice("$fields".length);
                        fieldBind = fieldBind.slice(0, 1).toLowerCase() + fieldBind.slice(1);
                        self._notifyChildrenFields(node.children, value, "$" + fieldBind);
                        node.item.applyDesignMetaData(metaData);
                    }
                    else {
                        self._notifyChildrenbox(node, metaData);
                    }
                }
                else {
                    if (metaData.$boxLayoutType !== undefined) {
                        metaData.$layout = {};
                        if (metaData.$boxLayoutType == "100") {
                            metaData.$layout.$layoutType = self.boundFields.$allChildLayout[0].currentValue;
                        }
                        else {
                            metaData.$layout.$layoutType = "columns";
                            metaData.$layout.$layoutSubType = metaData.$boxLayoutType.replace(/-/g, ",");
                        }
                    }
                    if (metaData.$allChildLayout) {
                        if (metaData.$allChildLayout == "tabs") {
                            if (this.getNode().getChildrenLevel() == "field") {
                                var authorPage = this.authorPage;
                                var newBox = authorPage.addNewBox({
                                    parentBox: node.item,
                                    $category: node.$authoringLevel == "section" ? "block" : "section",
                                    doSelectItem: false
                                });
                                authorPage.moveContent({
                                    sourceNode: node,
                                    targetItem: newBox
                                });
                                metaData.$layout = metaData.$layout || {};
                                metaData.$layout.$layoutType = metaData.$allChildLayout;
                                delete metaData.$allChildLayout;
                                node.item.applyDesignMetaData(metaData);
                                return null;
                            }
                        }
                        metaData.$layout = metaData.$layout || {};
                        metaData.$layout.$layoutType = metaData.$allChildLayout;
                        delete metaData.$allChildLayout;
                    }
                    node.item.applyDesignMetaData(metaData);
                    if (metaData.$isHidden !== undefined) {
                        node.applyHiddenState(metaData);
                    }
                }
            }
            self.authorPage.notifyUpdate();
            self.applyChange(metaData);
        }
    },
    applyChange: function(newData){
        var self = this;
        var metaData = {
            $properties: {}
        };
        if (newData) {
            Object.keys(newData).forEach(function($prop){
                var value = newData[$prop];
                if ($prop == "$layout") {
                    $prop = "$boxLayoutType";
                    switch (newData.$layout.$layoutType || "stack") {
                        case "row":
                        case "stack":
                        case "side":
                        case "tabs":
                            value = "100";
                            metaData.$allChildLayout = newData.$layout.$layoutType;
                            break;
                        default:
                            value = (newData.$layout.$layoutSubType || "50,50").replace(/,/g, "-");
                            break;
                    }
                }
                switch ($prop) {
                    case "$boxLayoutType":
                        if (!newData.$allChildLayout && !metaData.$allChildLayout) {
                            metaData.$allChildLayout = "stack";
                        }
                        metaData.$properties.$allChildLayout = {
                            $isDisabled: value != "100"
                        };
                        break;
                    case "$isTopLabelAlignment":
                        metaData.$properties.$isRightTextLabelAlignment = {
                            $isDisabled: value
                        };
                        break;
                    case "$fieldsIsTopLabelAlignment":
                        metaData.$properties.$fieldsIsRightTextLabelAlignment = {
                            $isDisabled: value
                        };
                        break;
                    case "$isHidden":
                        var $isDisabled = {
                            $isDisabled: value
                        };
                        Object.keys(self.$prototype.$properties).forEach(function($key){
                            if ($key.indexOf("$isHidden") < 0) {
                                metaData.$properties[$key] = $isDisabled;
                            }
                        });
                        if (self.menuItems) {
                            ["$switchMode", "$addBlock", "$addSection", "$addField"].forEach(function(prop){
                                var menus = self.menuItems[prop];
                                if (menus) {
                                    menus.forEach(function(menu){
                                        menu.setMenu($isDisabled);
                                    });
                                }
                                
                            });
                        }
                        break;
                    case "$fieldsIsTitleHidden":
                        (metaData.$properties.$fieldsIsTopLabelAlignment = metaData.$properties.$fieldsIsTopLabelAlignment || {}).$isDisabled = value;
                        var isRightDisabled = !value ? (newData.$fieldsIsTopLabelAlignment || self.dataset.$fieldsIsTopLabelAlignment) : true;
                        (metaData.$properties.$fieldsIsRightTextLabelAlignment = metaData.$properties.$fieldsIsRightTextLabelAlignment || {}).$isDisabled = isRightDisabled;
                        break;
                    case "$isTitleHidden":
                        if (self.isFieldItem()) {
                            (metaData.$properties.$isTopLabelAlignment = metaData.$properties.$isTopLabelAlignment || {}).$isDisabled = value;
                            var isRightDisabled = !value ? (newData.$isTopLabelAlignment || self.dataset.$isTopLabelAlignment) : true;
                            (metaData.$properties.$isRightTextLabelAlignment = metaData.$properties.$isRightTextLabelAlignment || {}).$isDisabled = isRightDisabled;
                        }
                        else {
                            metaData.$properties.$title = metaData.$properties.$isBoxCollapsable = metaData.$properties.$isMaximizable = {
                                $isDisabled: value
                            };
                        }
                        break;
                }
                metaData[$prop] = value;
            });
        }
        Article.prototype.applyChange.call(this, metaData);
    },
    _setSwitchMode: function(){
        var self = this;
        this.menuItems.$switchMode.forEach(function(menu){
            menu.setTitle(self.authorPage.$isLightMode ? self.authorPage.localize.aw_fullMode : self.authorPage.localize.aw_lightMode);
            menu.setValue(self.authorPage.$isLightMode ? "switch-full" : "switch-light");
        });
    },
    onAddFields: function(menuItem){
        var self = this;
        if (!self._popupAdFields) {
            var targetItem, action;
            var div = document.createElement("div");
            div.className = "s-aw-fields-pn";
            self.$$popupPanel = $(div).delegate("a.s-aw-fields-field-value", "click", function(){
                var $bind = this.getAttribute("data-s-field");
                setTimeout(function(){
                    var node = self.getNode();
                    var layoutParent;
                    if (!self.isFieldItem()) {
                        var $childLevel = node.getChildrenLevel();
                        if ($childLevel == "section" || $childLevel == "block") {
                            layoutParent = self.authorPage.addNewBox({
                                parentBox: node.item,
                                $category: $childLevel || "section",
                                doSelectItem: false,
                                openBox: true
                            }).layoutContent;
                        }
                        else {
                            layoutParent = node.item.layoutContent;
                        }
                    }
                    else {
                        layoutParent = node.item.layoutParent;
                        targetItem = node.item;
                        action = "insertAfter";
                    }
                    layoutParent.appendNewItem({
                        load: true,
                        newItem: document.itemFactory.create({
                            $bind: $bind
                        }, layoutParent.box),
                        targetItem: targetItem,
                        action: action
                    });
                    if (self._popupAdFields) {
                        self._popupAdFields.close();
                    }
                    document.site.authorPage.notifyUpdate();
                    
                }, 10);
                return false;
            });
            var domTable = document.createElement("div");
            domTable.className = "s-aw-fields-table";
            self.$$popupPanel.append(domTable);
            
            var article = self.getNode().item.getArticle();
            if (!article.$prototype.$properties) {
                article = article.getArticleParent();
            }
            var domCol, colLength;
            var excludeBinds = ["$creUser", "$updUser", "$creDate", "$updDate"];
            var $properties = article.$prototype.$properties;
            Object.keys($properties).forEach(function($name){
                if (excludeBinds.indexOf($name) < 0) {
                    var $field = $properties[$name];
                    if ($field.$type) {
                        if (!domCol) {
                            colLength = 0;
                            domCol = document.createElement("div");
                            domCol.className = "s-aw-fields-col";
                            domTable.appendChild(domCol);
                        }
                        var domValue = document.createElement("a");
                        domValue.className = "s-aw-fields-field-value";
                        domValue.setAttribute("data-s-field", $name);
                        
                        var div = document.createElement("div");
                        div.className = "s-aw-fields-field-type";
                        div.style.backgroundImage = "url('" + document.site.$item.$iconPath + "authoring/s-aw-light-" + $field.$type.replace("application/x-", "").replace("/", "-") + ".png')";
                        domValue.appendChild(div);
                        
                        div = document.createElement("div");
                        div.className = "s-aw-fields-field-title";
                        $(domValue.appendChild(div)).text($field.$title ? article.getLocalizeText($field.$title) : self.authorPage.localize.aw_defaultFieldTitle);
                        
                        div = document.createElement("a");
                        div.className = "s-aw-fields-field-item";
                        div.appendChild(domValue);
                        domCol.appendChild(div);
                        if (++colLength == 10) {
                            domCol = null;
                        }
                    }
                    else {
                        console.log("field type not defined:" + $name);
                    }
                }
            });
            
            menuItem.$$item[0].setAttribute("id", menuItem.id);
            self._popupAdFields = self.boxParent.openDialog({
                $dialogMode: "popup",
                content: self,
                $$dialog: self.$$popupPanel,
                position: {
                    my: "right top",
                    at: "right bottom",
                    of: menuItem.$$item
                },
                onClose: function(){
                    self.$$popupPanel.undelegate();
                    self._popupAdFields = null;
                },
                autocCloseBoundary: "#" + menuItem.id
            });
        }
        else {
            self._popupAdFields.close();
        }
    },
    loadBox: function(){
        var self = this;
        self.isAuthoringDisabled = true;
        var $isEditMode = self.getNode().item.getArticle().$isEditMode;
        var $properties = self.$prototype.$properties;
        if (self.isFieldItem()) {
            if (self.$prototype.$isTopLabelAlignment = $isEditMode) {
                $properties.$isRightTextLabelAlignment.$isDisabled = true;
            }
        }
        else {
            if (self.$prototype.$fieldsIsTopLabelAlignment = $isEditMode) {
                $properties.$fieldsIsRightTextLabelAlignment.$isDisabled = true;
            }
        }
        self.$prototype.$links = {
            $switchMode: {
                $title: self.authorPage.localize.aw_lightMode
            },
            $addSection: {
                $title: self.authorPage.localize.aw_addSection
            },
            $addBlock: {
                $title: self.authorPage.localize.aw_addBlock
            },
            $addField: {
                $title: self.authorPage.localize.aw_addField
            }
        };
        Article.prototype.loadBox.call(this, this.getNode().item.$item);
        self._addMenus();
        self._addLayoutsHeader();
        
        var formatLayoutLinks = self.idMap["formatLayoutLinks"];
        if (formatLayoutLinks) {
            formatLayoutLinks.onMenuClick = function(menuItem){
                self.getNode().item.applyDesignMetaData({
                    $layout: {
                        $layoutType: "composite",
                        $layoutSubType: menuItem.$bind
                    }
                });
                return false;
            };
        }
    },
    _formatFieldTextLabelAlign: function(isProto){
        var $bind = this.isFieldItem() ? "$isRightTextLabelAlignment" : "$fieldsIsRightTextLabelAlignment";
        if (isProto) {
            this.$prototype.$properties[$bind] = {
                $type: "application/x-choice",
                $title: this.authorPage.localize.aw_textLabelAlignment,
                $value: {
                    $type: "application/x-string",
                    
                    $enum: [{
                        $value: false,
                        $title: this.authorPage.localize.aw_textLabelLeftAligned
                    }, {
                        $value: true,
                        $title: this.authorPage.localize.aw_textLabelRightAligned
                    }]
                }
            };
            this.$prototype[$bind] = false;
        }
        else {
            return {
                $bind: $bind,
                $skin: "s-aw-field",
                $isEditMode: true,
                $isTopLabelAlignment: false,
                $labelWidth: "auto"
            };
        }
    },
    _formatFieldLabelAlign: function(isProto){
        var $bind = this.isFieldItem() ? "$isTopLabelAlignment" : "$fieldsIsTopLabelAlignment";
        if (isProto) {
            this.$prototype.$properties[$bind] = {
                $type: "application/x-choice",
                $value: {
                    $type: "application/x-string",
                    
                    $enum: [{
                        $value: false,
                        $title: this.authorPage.localize.aw_labelLeftAlignment
                    }, {
                        $value: true,
                        $title: this.authorPage.localize.aw_labelTopAlignment
                    }]
                }
            };
            this.$prototype[$bind] = false;
        }
        else {
            return {
                $bind: $bind,
                $skin: "s-aw-field",
                $isEditMode: true,
                $isLeftSpaceHidden: true
            };
        }
    },
    _formatFieldWidth: function(isProto){
        var $bind = "$fieldsWidth";
        if (isProto) {
            this.$prototype.$properties[$bind] = {
                $type: "application/x-choice",
                $value: {
                    $type: "application/x-string",
                    
                    $enum: [{
                        $value: "largest",
                        $title: this.authorPage.localize.aw_widthLargest
                    }, {
                        $value: "content",
                        $title: this.authorPage.localize.aw_widthContent
                    }, {
                        $value: "fit",
                        $title: this.authorPage.localize.aw_widthMaximum
                    }, {
                        $value: "large",
                        $title: this.authorPage.localize.aw_widthLarge
                    }, {
                        $value: "medium",
                        $title: this.authorPage.localize.aw_widthMedium
                    }, {
                        $value: "small",
                        $title: this.authorPage.localize.aw_widthSmall
                    }]
                }
            };
            this.$prototype[$bind] = "fit";
        }
        else {
            return {
                $bind: $bind,
                $skin: "s-aw-field",
                $isEditMode: true,
                $title: this.authorPage.localize.aw_fieldSize,
                $labelWidth: "auto",
                $format: "$combo"
            };
        }
    },
    _addLink: function($bind, $value, $$container){
        return document.itemFactory.load($$container, {
            $bind: $bind,
            $category: "link",
            $skin: "s-aw-designer-link",
            $icon: {
                $mode: "icon",
                $path: "authoring/s-aw-"
            },
            $value: $value,
        }, this);
    },
    _addMenus: function(){
        var self = this;
        self._addLink("$switchMode", "switch-full", this.authorPage.$$switchModeSlot.empty());
        self._setSwitchMode();
        self.authorPage.$$panelActions.empty();
        ["$addSection", "$addBlock", "$addField"].forEach(function($bind){
            self._addLink($bind, $bind.substr(1).toLowerCase(), self.authorPage.$$panelActions);
        });
        self.onMenuClick = function(menuItem){
            switch (menuItem.$item.$bind) {
                case "$addSection":
                case "$addBlock":
                    var parentNode = self.getNode();
                    var $category = (menuItem.$item.$bind == "$addBlock") ? "block" : "section";
                    var parentLevels = ($category == "block") ? ["article", "section", "block"] : ["article", "section"];
                    var isFieldChildren, newBox;
                    while (parentNode) {
                        if (parentLevels.indexOf(parentNode.$authoringLevel) >= 0) {
                            if (parentNode.$authoringLevel == $category) {
                                isFieldChildren = parentNode.parentNode.getChildrenLevel() == "field";
                                newBox = self.authorPage.addNewBox({
                                    parentBox: parentNode.parentNode.item,
                                    $category: $category,
                                    targetItem: parentNode.item,
                                    action: "insertAfter"
                                });
                            }
                            else {
                                isFieldChildren = parentNode.getChildrenLevel() == "field";
                                newBox = self.authorPage.addNewBox({
                                    parentBox: parentNode.item,
                                    $category: $category
                                });
                            }
                            break;
                        }
                        parentNode = parentNode.parentNode;
                    }
                    if (isFieldChildren) {
                        self.authorPage.moveContent({
                            sourceNode: newBox.authoringNode.parentNode,
                            targetItem: newBox
                        });
                    }
                    document.site.authorPage.notifyUpdate();
                    return false;
                case "$addField":
                    self.onAddFields(menuItem);
                    return false;
                case "$switchMode":
                    self.authorPage.targetPage.authoringNode.toggleLightMode(null, self.authorPage.$isLightMode = !self.authorPage.$isLightMode);
                    self._setSwitchMode();
                    return false;
            }
        };
    },
    _formatAllFieldsSection: function(){
        return {
            $category: "section",
            $bind: "$field",
            $title: this.authorPage.localize.aw_allFields,
            $layout: {
                $layoutType: "side",
                $items: [{
                    $layoutType: "stack",
                    $items: [this._formatFieldWidth(false)]
                }, {
                    $layoutType: "stack",
                    $items: [{
                        $bind: "$fieldsIsTitleHidden",
                        $skin: "s-aw-field",
                        $isEditMode: true,
                        $isLeftSpaceHidden: true
                    }, {
                        $category: "block",
                        $title: this.authorPage.localize.aw_fieldLabelsPosition,
                        $layout: {
                            $items: [this._formatFieldLabelAlign(false), this._formatFieldTextLabelAlign(false)]
                        }
                    }]
                }]
            }
        };
    },
    _formatSectionBlock: function(){
        var items = [{
            $category: "section",
            $title: this.authorPage.localize.aw_appearance,
            $layout: {
                $items: ["$isHidden", "$isSeparatorsVisible", "$isTitleHidden"].map(function($bind){
                    return {
                        $bind: $bind,
                        $skin: "s-aw-field",
                        $isEditMode: true,
                        $isLeftSpaceHidden: true
                    };
                })
            }
        }, {
            $category: "section",
            $title: this.authorPage.localize.aw_structure,
            $layout: {
                $items: ["$isBoxCollapsable", "$isMaximizable", "$title"].map(function($bind){
                    return {
                        $bind: $bind,
                        $skin: "s-aw-field",
                        $isEditMode: true,
                        $isLeftSpaceHidden: true
                    };
                })
            }
        }];
        items.push(this._formatAllFieldsSection());
        return {
            $category: "section",
            $bind: "$box",
            $isSeparatorsVisible: true,
            $skin: "s-aw-designer-item",
            $layout: {
                $layoutType: "side",
                $items: items
            }
        };
    },
    _formatChildLayout: function($category){
        var $enum = [{
            $value: "stack",
            $title: this.authorPage.localize.aw_layoutStacked
        }];
        if (this.$childCategory != "field") {
            $enum.push({
                $value: "tabs",
                $title: this.authorPage.localize.aw_layoutInTab
            });
        }
        $enum.push({
            $value: "side",
            $title: this.authorPage.localize.aw_layoutSide
        });
        $enum.push({
            $value: "row",
            $title: this.authorPage.localize.aw_layoutRow
        });
        this.$prototype.$properties.$allChildLayout = {
            $type: "application/x-choice",
            $value: {
                $type: "application/x-string",
                
                $enum: $enum
            }
        };
    },
    _addLayoutsHeader: function(){
        var localize = this.authorPage.localize;
        this.authorPage.$$layoutSlot.empty();
        if (this.$prototype.$properties.$boxLayoutType) {
            var div = document.createElement("div");
            div.className = "s-aw-header-layouts-slot";
            var field = document.itemFactory.load($(div).appendTo(this.authorPage.$$layoutSlot), {
                $bind: "$boxLayoutType",
                $icon: {
                    $inputMode: "icon",
                    $mode: "iconText",
                    $path: "authoring/s-layout-",
                    $width: "25px",
                    $height: "25px"
                },
                $format: "$combo",
                $choiceLayout: "3",
                $isTopLabelAlignment: false,
                $isEditMode: true,
                $skin: "s-aw-field",
                $isTitleHidden: true,
                $isLeftSpaceHidden: true
            }, this);
            field.$$item.attr("data-s-article", this.id);
			
            div = document.createElement("div");
            div.className = "s-aw-header-layouts-slot";
            field = document.itemFactory.load($(div).appendTo(this.authorPage.$$layoutSlot), {
                $bind: "$allChildLayout",
                $skin: "s-aw-field",
                $icon: {
                    $inputMode: "icon",
                    $mode: "iconText",
                    $path: "authoring/s-layout-",
                    $width: "25px",
                    $height: "25px"
                },
                $format: "$combo",
                $choiceLayout: "1",
                $isTopLabelAlignment: false,
                $isEditMode: true,
                $isTitleHidden: true,
                $isLeftSpaceHidden: true
            }, this);
            field.$$item.attr("data-s-article", this.id);
			
            div = document.createElement("div");
            div.className = "s-aw-header-layouts-slot";
            var $links = {};
            var $subMenus = [];
            layoutSettings.getCompositeTypes().forEach(function($key){
                $subMenus.push({
                    $bind: $key
                });
                $links[$key] = {
                    $title: layoutSettings.getComposite($key).$title || localize.aw_layoutComposite
                };
            });
            
            document.itemFactory.load($(div).appendTo(this.authorPage.$$layoutSlot), {
                $category: "links",
                $id: "formatLayoutLinks",
                $skin: "s-aw-designer-links",
                $isBindDisabled: true,
                $choiceLayout: "1",
                $links: $links,
                $menus: [{
                    $items: [{
                        $title: localize.aw_selectTemplate,
                        $icon: {
                            $mode: "icon",
                            $value: "template",
                            $path: "authoring/s-layout-",
                            $width: "25px",
                            $height: "25px"
                        },
                        $subMenus: {
                            $skin: "s-aw-composites",
                            $isPopup: true,
                            $icon: {
                                $mode: "iconText",
                                $path: "authoring/s-layout-",
                                $width: "25px",
                                $height: "25px"
                            }
                        },
                        $items: $subMenus
                    }]
                }]
            }, this);
        }
    },
    _formatLayout: function(isProto){
        var localize = this.authorPage.localize;
        var $enums = layoutSettings.$columns.map(function($width){
            var $parts = $width.split(",");
            return {
                $value: $parts.join("-"),
                $title: $parts.length + " " + localize.aw_layoutColumns // + " ( " + $parts.join("% ") + ")"
            };
        });
        $enums.splice(0, 0, {
            $value: "100",
            $title: localize.aw_layoutColumn
        });
        this.$prototype.$properties.$boxLayoutType = {
            $type: "application/x-choice",
            $value: {
                $type: "application/x-string",
                
                $enum: $enums
            }
        };
        this.$prototype.$boxLayoutType = "100";
        return;
        
        var $links = {};
        var $subMenus = [];
        layoutSettings.getCompositeTypes().forEach(function($key){
            $subMenus.push({
                $bind: $key
            });
            $links[$key] = {
                $title: layoutSettings.getComposite($key).$title || localize.aw_layoutComposite
            };
        });
        return {
            $category: "section",
            $title: localize.layout,
            $layout: {
                $layoutType: "stack",
                $items: [{
                    $bind: "$boxLayoutType",
                    $icon: {
                        $mode: "iconText",
                        $path: "authoring/s-layout-",
                        $width: "25px",
                        $height: "25px"
                    },
                    $choiceLayout: "3",
                    $isEditMode: true,
                    $skin: "s-aw-field",
                    $isLeftSpaceHidden: true
                }, {
                    $category: "links",
                    $id: "formatLayoutLinks",
                    $skin: "s-aw-template-mn",
                    $isBindDisabled: true,
                    $choiceLayout: "1",
                    $links: $links,
                    $menus: [{
                        $items: [{
                            $title: localize.selectTemplate,
                            $subMenus: {
                                $skin: "s-aw-composites",
                                $isPopup: true,
                                $icon: {
                                    $mode: "iconText",
                                    $path: "authoring/s-layout-"
                                }
                            },
                            $items: $subMenus
                        }]
                    }]
                }]
            }
        };
    },
    
    dispose: function(){
        if (this.$$popupPanel) {
            this.$$popupPanel.undelegate();
        }
        delete this.authorPage;
        Article.prototype.dispose.call(this);
    }
});
