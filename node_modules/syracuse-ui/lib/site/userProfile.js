"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var date = require('syracuse-core/lib/types/date');
var locale = require('syracuse-core/lib/locale');
var globals = require('streamline/lib/globals');
var _resources = date.resources;
var disconnectUtils = require('./disconnectUtils');
function UserProfile(){

}

exports.UserProfile = helpers.defineClass(UserProfile, RawPage, {
    dispose: function(){
        this.externalAdapter = this.formBlock = null;
        RawPage.prototype.dispose.call(this);
    },
    onMenuClick: function(menuItem){
        var callback = function(){
            document.controller.executeMenu(menuItem);
        }
        
        if (menuItem.$bind == "$logout") {
            disconnectUtils.onUserActionUnload(callback);
        }
        else {
            return true;
        }
    },
    onNotifyDataChange: function(field, value){
        var self = this;
        
        // if action confirmed by user
        var callback = function(){
            self.notifyDataChange(field, value);
        }
        
        // if action cancelled by user
        var cancelCallback = function(){
            if (self.oldValue) {
                field.setDataValue(self.oldValue);
            }
            
        }
        
        if (field.$item.$bind == "selectedLocale") {
            disconnectUtils.onUserActionUnload(callback, cancelCallback);
            return false;
        }
        return true;
    },
    onClickPicker: function(pickerId, event){
        // save previous locale value in case 
        var self = this;
        var field = document.controller.findField($(event.target));
        if (field && field.$item && field.$item.$bind && field.$item.$bind == "selectedLocale") {
            self.oldValue = helpers.object.clone(field.currentValue);
        }
        return true;
    },
    ensureFormBlock: function(){
        var self = this;
        if (!self.formBlock) {
            self.formBlock = self.loadNewItem(self.$$item[0], {
                $category: "section",
                $id: "s-user-profile-form-block",
                $skin: "s-user-profile-form",
                $layout: {
                    $items: [{
                        $bind: "$save",
                        $category: "link",
                        $isExcluded: true,
                        onServerRequest: function(menu){
                            //this is item menu	
                            if (menu.$links && menu.$links.$location) {
                                var currentPage = menu.boxParent.getArticle();
                                self.decoratePrototype(self.$prototype);
                                //                            document.controller.openPage(self, menu.$links.$location);
                                var location = ((document.site.$prototype || {}).$links || {}).$home;
                                location && document.controller.openPage(self, location);
                            }
                            return false;
                        }
                    }, {
                        $isEditMode: true,
                        $isReferenceTitleVisible: false,
                        $skin: "s-user-profile-ref",
                        $css: "s-user-profile-selectedRole",
                        $bind: "photo"
                    }, {
                        $isEditMode: true,
                        $isTopLabelAlignment: false,
                        $isReferenceTitleVisible: false,
                        $skin: "s-user-profile-ref",
                        $css: "s-user-profile-selectedRole",
                        $bind: "selectedRole"
                    }, {
                        $isEditMode: true,
                        $isTopLabelAlignment: false,
                        $skin: "s-user-profile-ref",
                        $isReferenceTitleVisible: false,
                        $css: "s-user-profile-selectedEndpoint",
                        $bind: "selectedEndpoint"
                    }, {
                        $isEditMode: true,
                        $isTopLabelAlignment: false,
                        $skin: "s-user-profile-ref",
                        $isReferenceTitleVisible: false,
                        $css: "s-user-profile-selectedLocale",
                        $bind: "selectedLocale"
                    }, {
                        $bind: "$logout",
                        $category: "link",
                        $skin: "s-user-profile-logout"
                    }]
                }
            });
            self._localizeFields();
        }
    },
    loadBox: function(initData){
        // adding selectedLocale into dom for test purposes
        document.site.body.setAttribute('data-s-q-local', initData.selectedLocale.$value);
        
        RawPage.prototype.loadBox.call(this, initData);
    },
    _localizeFields: function(){
        var localize = locale.resources(module)();
        this.idMap["s-user-profile-form-block"].applyDesignMetaData({
            $title: localize.up_welcome
        }, true);
        this.boundFields.selectedRole[0].setTitle(localize.up_role);
        this.boundFields.selectedEndpoint[0].setTitle(localize.up_endpoint);
        this.boundFields.selectedLocale[0].setTitle(localize.up_locale);
    },
    drawBox: function(){
        this.externalAdapter = document.site.externalAdapter;
        this.$$item = $("<div id='s-user-profile'/>");
    },
    showDiagnoses: function(message){
        //afficher erreur ds popup ???
    },
    notifyDataChange: function(field, value){
        this.notifyActionChange(this, {
            $save: {
                $isRequested: true
            }
        }, false);
        RawPage.prototype.notifyDataChange.call(this, field, value);
    },
    decoratePrototype: function($prototype){
        if (this.dataset && this.dataset.selectedRole) {
            $prototype.$role = this.dataset.selectedRole.$uuid;
        }
    },
    wrapLoadSuccess: function(cb){
        var self = this;
        return function(arg){
            globals.context = globals.context || {};
            var lp = globals.context.localePreferences, lang = lp && lp.code || "en", map = globals.context.localeMap = globals.context.localeMap || {};
            
            if (map[lang] == null) {
                map[lang] = lang;
                locale.setCurrent(function(err){
                    cb(arg);
                }, lang, lp);
            }
            else {
                cb(arg);
            }
            if (self.formBlock) {
                self._localizeFields();
            }
        };
    },
    applyChange: function(newData){
        // refresh page when user changes locale
        var sl = this.getSelectedLocale();
        if (Object.keys(this.dataset).length > 0) {
            if (sl && newData.selectedLocale && JSON.stringify(sl) != JSON.stringify(newData.selectedLocale)) {
                location.reload();
            }
        }
        
        if (newData && newData.selectedRole) {
            document.site.$prototype.$role = newData.selectedRole.$uuid;
        }
        
        RawPage.prototype.applyChange.call(this, newData);
        
        // adding localePreferences to globals.context
        if (this.dataset && this.dataset.selectedLocale) {
            globals.context = {};
            globals.context.localePreferences = this.dataset.selectedLocale;
        }
        if (this.$isTitleUpdateRequested) {
            if (document.site.updateDocumentTitle) {
                document.site.updateDocumentTitle();
            }
            this.$isTitleUpdateRequested = false;
        }
    },
    getSelectedEndpointString: function(){
        var endpoint = this.dataset ? this.dataset.selectedEndpoint : null;
        return endpoint ? (endpoint.application + "." + endpoint.contract + "." + endpoint.dataset) : null;
    },
    getDateFormat: function(displayFormat){
        return displayFormat == "DD" ? (this.dataset.selectedLocale ? this.dataset.selectedLocale.longDate : "dd MMMM yyyy") : (this.dataset.selectedLocale ? this.dataset.selectedLocale.shortDate : "yyyy-MM-dd");
    },
    getTimeFormat: function(displayFormat){
        return displayFormat == "TT" ? (this.dataset.selectedLocale ? this.dataset.selectedLocale.longTime : "HH:mm:ss") : (this.dataset.selectedLocale ? this.dataset.selectedLocale.shortTime : "HH:mm");
    },
    getDatetimeFormat: function(displayFormat){
        var format;
        switch (displayFormat) {
            case "F": // sortable datetime format
                format = _resources().formatPatterns ? _resources().formatPatterns["sortableDateTime"] : "yyyy-MM-ddTHH:mm:ss";
                break;
            case "FF": // full datetime format
                format = this.dataset.selectedLocale ? this.dataset.selectedLocale.longDatetime : (_resources().formatPatterns ? _resources().formatPatterns["fullDateTime"] : "dd MMMM yyyy HH:mm:ss");
                break;
            case "U": // universal sortable datetime format 
                format = _resources().formatPatterns ? _resources().formatPatterns["universalSortableDateTime"] : "yyyy-MM-dd HH:mm:ssZ";
                break;
            default: // datetime default format is dateformat + space + timeformat
                var selectedLocale = this.dataset.selectedLocale;
                format = (selectedLocale && selectedLocale.shortDatetime) ? selectedLocale.shortDatetime : (this.getDateFormat() + " " + this.getTimeFormat());
        }
        return format;
    },
    getSelectedLocale: function(){
        return this.dataset && this.dataset.selectedLocale;
    },
    getNumberFormatObj: function(type){
        var formatObj = {};
        var f = "#,";
        var gs = this.dataset && this.dataset.selectedLocale && this.dataset.selectedLocale.numberGroupSize ? this.dataset.selectedLocale.numberGroupSize : "3";
        for (var i = 0; i < gs; i++) {
            f += (i == gs - 1) ? "0" : "#";
        }
        f += type == "application/x-integer" ? '' : '.##';
        // numFormat default -> #,##0 (integer) or #,##0.## (decimal)
        formatObj.numFormat = f;
        formatObj.decimalSeparator = this.dataset && this.dataset.selectedLocale && this.dataset.selectedLocale.numberDecimalSeparator ? this.dataset.selectedLocale.numberDecimalSeparator : ".";
        formatObj.groupSeparator = this.dataset && this.dataset.selectedLocale && this.dataset.selectedLocale.numberGroupSeparator ? this.dataset.selectedLocale.numberGroupSeparator : ",";
        formatObj.groupSize = gs;
        return formatObj;
    },
    getNumberFormat: function(type){
        return this.getNumberFormatObj(type).numFormat;
    },
    getTwoDigitYearMax: function(){
        return (this.dataset.selectedLocale && this.dataset.selectedLocale.twoDigitYearMax) || 2029;
    },
    getServerSessionTimeOut: function(){
        //return this.dataset.sessionTimeout * 60 * 1000; // converting minutes into milliseconds
        return 186000; // 3,1 minutes for test
    }
});

