"use strict";
var _helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var _globals = require('streamline/lib/globals');
var _date = require('syracuse-core/lib/types/date');
var _jsurl = require('jsurl/lib/jsurl');

function UserProfile() {

}

exports.UserProfile = _helpers.defineClass(UserProfile, DesktopPage, {
	hasDesignRight: function() {
		return !(this.getAuthoringLevel() === "none");
	},
	getLogonUrl: function() {
		var $url = syra_site.$userProfileUrl;
		var profile = syra_site.$prototype.$userprofile;
		if (!profile) {
			var seg = syra_url.history.getUrlSegment();
			profile = seg && seg.params && seg.params.profile;
			if (profile && profile != "{$userprofile}") {
				syra_site.$prototype.$userprofile = profile;
			} else {
				profile = null;
			}
		}
		if (profile) {
			$url += "&profile={$userprofile}";
		}
		return $url;
	},
	switchToNewSession: function(onsuccess) {
		var self = this;
		syra_controller.postQuery({
			$url: self.getLogonUrl()
		}, null, null, function($location, data) {
			self.applyChange(data);
			onsuccess();
		});
	},
	_setChoiceTheme: function(themes) {
		var enums = [];
		enums.push({
			$value: 0,
			$title: syra_local.userProfile_defaultTheme
		});
		for (var ii = 0, jj = themes.length; ii < jj; ii++) {
			var theme = themes[ii];
			enums.push({
				$value: theme.$uuid,
				$title: theme.description
			});
		}
		this.$prototype.$properties.choiceTheme.$value.$enum = enums;
		var field = this.boundFields.choiceTheme && this.boundFields.choiceTheme[0];
		field &&
			field.applyMetaData({
				$properties: {
					choiceTheme: {
						$value: {
							$enum: enums
						}
					}
				}
			});
	},
	getAuthoringLevel: function() {
		return (this.dataset ? this.dataset.authoringLevel : null) || "none";
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$subRecordKey == "user") {
			menuItem.$target = "blank";
		}
		return true;
	},
	getRegionalPreferences: function(success) {
		var $lookup = this.$prototype.$properties.selectedLocale.$item.$links.$lookup;
		syra_http.get({
			page: this,
			$url: syra_expression.parse(this, $lookup.$url),
			success: function(data) {
				success(data && data.$resources);
			}
		});
	},
	onAfterActionMenuExecute: function(menuItem, $menu) {
		if (menuItem.$links && menuItem.$links.$location) {
			delete menuItem.$links.$location;
		}
		if (this.dataset && this.dataset.selectedRole) {
			this.$prototype.$role = this.dataset.selectedRole.$uuid;
		}
		if (menuItem.$diagnoses && menuItem.$diagnoses.length) {
			if (menuItem.$diagnoses[0].$severity == "error") {
				syra_diagnose.showDiagnoses({
					$diagnoses: menuItem.$diagnoses
				});
			}
			delete $menu.$diagnoses;
			delete menuItem.$diagnoses;
		}

	},
	toggle: function(slot, addIn) {
		if (slot) {
			this.displayed = true;
			if (this.domItem) {
				this.loadFields();
				(this.layoutSlot = slot).appendChild(this.domItem);
				addIn && this.scrollview.appendChild(addIn);
				syra_quality.page_onAfterLoad(this);
				this.resizeItem(true);
			}
		} else {
			syra_dom.removeChild(this.domItem);
			delete this.layoutSlot;
			this.displayed = false;
		}
	},
	loadBox: function(initData) {
		this.diagnosePage = syra_site;
		this.isAutoInsertFieldDisabled = true;
		this.isMenuBarDisabled = true;
		this.isFooterDisabled = true;
		this.isBreadCrumbHidden = true;
		this.isSecurityViewHidden = true;
		if (this.$prototype && this.$prototype.$properties) {
			delete this.$prototype.$description;
			this.$prototype.$properties.choiceTheme = {
				$type: "application/x-choice",
				$value: {
					$type: "application/x-string",
					$enum: []
				}
			};
			this.$item = {
				$title: syra_local.userProfile_up_welcome,
				$layout: {
					$items: []
				}
			};
			DesktopPage.prototype.loadBox.call(this, initData);
			this.domItem.id = "s-user-profile";
			this.loadNewItem(this.body, {
				$bind: "$save",
				$category: "link",
				$isHidden: true
			});
			this.isPageLoaded = true;
		} else {
			syra_dom.hide(syra_site.layoutSlot, false);
			syra_diagnose.showDiagnoses(initData, this);
			syra_site.hasLogonFailed = true;
		}
	},
	loadFields: function() {
		if (!this._isFieldsloaded) {
			var $binds = ["selectedRole", "selectedEndpoint", "selectedLocale", "selectedTheme", "choiceTheme"];
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $isHidden;
				var $item = {
					$isEditMode: true,
					$isReferenceTitleVisible: false,
					$css: "s-user-profile-field",
					$bind: $bind,
					$title: syra_local["userProfile_" + $bind]
				};
				var icon = $bind.replace("selected", "").toLowerCase();
				switch ($bind) {
					case "selectedRole":
						icon = "role";
						$item.$isHidden = syra_site.$isUserEndpointChangeDisabled;
						break;
					case "selectedEndpoint":
						icon = "endpoint";
						break;
					case "selectedLocale":
						icon = "local_settings";
						break;
					case "selectedTheme":
						icon = "theme";
						$item.$isHidden = true;
						break;
					case "choiceTheme":
						icon = "theme";
						$item.$format = "$combo";
						$item.$isHidden = !(this.dataset.themes && this.dataset.themes.length > 0);
						break;
				}
				var field = this.loadNewItem(this.body, $item);
				field.domTitle.insertBefore(syra_button.add({
					isIndicator: true,
					parent: this,
					iconOnly: true,
					css: "s-mn-icontext",
					fontIcon: icon
				}).link, field.domTitle.firstChild);
			}
			this._isFieldsloaded = true;
		}
	},
	onFormUpdate: function(field, value) {
		var self = this;
		switch (field.$item.$bind) {
			case "choiceTheme":
				syra_form.update(this.page.boundFields.selectedTheme[0], value == 0 ? null : {
					$uuid: value
				});
				return false;
			case "donotuse":
			case "selectedLocale":
			case "selectedRole":
			case "selectedEndpoint":
				if (!self._isFusionHandlerDisabled && syra_fusion) {
					var oldValue = _helpers.object.clone(self.dataset[field.$item.$bind], true);
					syra_fusion.onUserActionUnload(function() {
						self._isFusionHandlerDisabled = true;
						syra_form.updateDelta(field, value);
						self._isFusionHandlerDisabled = false;
					}, function() {
						oldValue && field.setValue(oldValue);
					}, field.$item.$bind);
					return false;
				}
		}
		self.notifyActionChange(null, self, {
			$save: {
				$isRequested: true
			}
		}, false);
		return true;
	},
	setCurrentLangCode: function(dataset) {
		_globals.context.localePreferences = dataset.selectedLocale;
		this.currentLangCode = (dataset.selectedLocale && dataset.selectedLocale.code) || "en";
	},
	applyChange: function(newData) {
		var isRoleChanged, isEndpointChanged, isSelectedLocalChanged;
		var isFusionPage = syra_site.mainPage && syra_site.mainPage.isFusionPage;
		var selectedLocale = this.dataset.selectedLocale;

		syra_site.setProductName(newData.productName);

		newData.themes && this._setChoiceTheme(newData.themes);

		if (newData.selectedLocale && this.currentLangCode && (newData.selectedLocale.code != this.currentLangCode)) {
			isSelectedLocalChanged = true;
			this.currentLangCode = newData.selectedLocale.code;
		}
		if (!this.currentLangCode) {
			this.setCurrentLangCode(newData);
		}

		if (newData && newData.serverETag != null && module.etag != newData.serverETag) {
			isSelectedLocalChanged = true;
		}
		if (this._selectedEndpointUiid !== undefined && newData.selectedEndpoint) {
			isEndpointChanged = this._selectedEndpointUiid != newData.selectedEndpoint.$uuid;
		}
		if (this._selectedRoleUiid !== undefined && this._selectedRoleUiid && newData.selectedRole) {
			isRoleChanged = this._selectedRoleUiid != newData.selectedRole.$uuid;
		}
		if (newData.selectedTheme !== undefined) {
			syra_site.applyTheme(newData.selectedTheme);
			newData.choiceTheme = !newData.selectedTheme ? 0 : newData.selectedTheme.$uuid;
		}
		DesktopPage.prototype.applyChange.call(this, newData);
		var urlSegments;
		if (isSelectedLocalChanged || newData.selectedRole !== undefined || newData.selectedEndpoint !== undefined) {
			urlSegments = this._applyNewSecurity(isEndpointChanged && newData.selectedEndpoint);
		}
		if (isSelectedLocalChanged || isRoleChanged || isEndpointChanged) {
			syra_site.topPanel.toggle(false);
			if (isSelectedLocalChanged) {
				setTimeout(function() {
					syra_url.history.reloadSite();
				}, 10);
			} else {
				if (isRoleChanged) {
					syra_url.history.changeMainPage();
				} else {
					if (isEndpointChanged) {
						syra_site.bookmarks && syra_site.bookmarks.refresh();
						if (urlSegments && urlSegments.isFusion) {
							syra_url.history.load({
								$url: urlSegments.$url
							});
						} else {
							syra_menus.click.navigation();
						}
					}
				}
			}
		}

	},
	_applyNewSecurity: function(newEndpoint) {
		var urlSegments;
		syra_site.$prototype.$role = this._selectedRoleUiid = (this.dataset.selectedRole && this.dataset.selectedRole.$uuid) || null;
		this._selectedEndpointUiid = (this.dataset.selectedEndpoint && this.dataset.selectedEndpoint.$uuid) || null;
		this.setEncodedValue();
		syra_quality.logUserProfile();
		var page = syra_site.mainPage;
		if (page && !page.disposed) {
			urlSegments = page.openerUrlSegments;
			if (urlSegments) {
				(urlSegments.params = urlSegments.params || {}).profile = syra_site.$prototype.$userprofile;
				/*if (this.dataset.selectedEndpoint !== undefined) {
                 syra_url.replaceSegmentEndpoint(urlSegments, this.dataset.selectedEndpoint);
                 }*/
				if (newEndpoint) {
					//temp waiting good endpoint update
					if (this.dataset.selectedEndpoint !== undefined) {
						syra_url.replaceSegmentEndpoint(urlSegments, this.dataset.selectedEndpoint);
					}
				}
				syra_url.build(urlSegments);
				syra_url.history.update(page, urlSegments.$url);
			}
			syra_site.refreshMainPageSecurity(page);
		} else {
			if (newEndpoint) {
				urlSegments = syra_url.history.getUrlSegment();
				if (urlSegments.endpoint) {
					syra_url.replaceSegmentEndpoint(urlSegments, newEndpoint);
				}
			}
		}
		return urlSegments;
	},
	setSecurityToRepresentation: function($representation) {
		if (this.dataset.selectedRole) {
			$representation.$prototype.$role = this.dataset.selectedRole.$uuid; //important for url 
		}
		$representation.$prototype.$userprofile = this.getEncodedValue();
	},
	setEncodedValue: function() {
		var value = {
			loc: this.currentLangCode
		};
		if (this._selectedRoleUiid) {
			value.role = this._selectedRoleUiid;
		}
		if (this._selectedEndpointUiid) {
			value.ep = this._selectedEndpointUiid;
		}
		syra_site.$prototype.$userprofile = _jsurl.stringify(value);
	},
	getEncodedValue: function() {
		return syra_site.$prototype.$userprofile || "";
	},
	getSelectedRole: function() {
		return this.dataset.selectedRole;
	},
	getSelectedEndpoint: function() {
		return this.dataset.selectedEndpoint;
	},
	onLogonSucees: function() {
		syra_site.developpementMode = this.dataset.developpementMode;

		this._applyNewSecurity();
		var locale = this.dataset.selectedLocale || {};
		var formatPatterns = _date.resources().formatPatterns || {};
		this.format = {
			date_long: locale.longDate || "dd MMMM yyyy",
			date_short: locale.shortDate || "yyyy-MM-dd",
			time_long: locale.longTime || "HH:mm:ss",
			time_short: locale.shortTime || "HH:mm",
			datetime_sortable: formatPatterns.sortableDateTime || "yyyy-MM-ddTHH:mm:ss",
			datetime_full: locale.longDatetime || formatPatterns.fullDateTime || "dd MMMM yyyy HH:mm:ss",
			datetime_universal: locale.longDatetime || formatPatterns.universalSortableDateTime || "yyyy-MM-dd HH:mm:ssZ",
			datetime_default: locale.shortDatetime || formatPatterns.universalSortableDateTime || "yyyy-MM-dd HH:mm:ssZ",
			twoDigitYearMax: locale.twoDigitYearMax || 2029,
			numberFormat: {
				groupSize: locale.numberGroupSize || "3",
				decimalSeparator: locale.numberDecimalSeparator || ".",
				groupSeparator: locale.numberGroupSeparator || ","
			}
		};

		// numFormat default -> #,##0 (integer) or #,##0.## (decimal)
		var numFormat = "#,";
		var groupSize = this.format.numberFormat.groupSize;
		for (var ii = 0; ii < groupSize; ii++) {
			numFormat += (ii == groupSize - 1) ? "0" : "#";
		}
		this.format.numberFormat.numFormat = numFormat + '.##';
		this.format.numberFormat["application/x-integer"] = numFormat + '';
		this.format.datetime_default = locale.shortDatetime || (this.format.date_short + " " + this.format.time_short);
	},
	getDateFormat: function(code) {
		return code == "DD" ? this.format.date_long : this.format.date_short;
	},
	getTimeFormat: function(code) {
		return code == "TT" ? this.format.time_long : this.format.time_short;
	},
	getDatetimeFormat: function(code) {
		switch (code) {
			case "F":
				return this.format.datetime_sortable;
				break;
			case "FF":
				return this.format.datetime_full;
				break;
			case "U":
				return this.format.datetime_universal;
		}
		return this.format.datetime_default;
	},
	getNumberFormat: function(type) {
		return this.format.numberFormat[type] || this.format.numberFormat.numFormat;
	},
	getNumberFormatObj: function(type) {
		return {
			numFormat: this.getNumberFormat(type),
			decimalSeparator: this.format.numberFormat.decimalSeparator,
			groupSeparator: this.format.numberFormat.groupSeparator,
			groupSize: this.format.numberFormat.groupSize
		};
	},
	getTwoDigitYearMax: function() {
		return this.format.twoDigitYearMax;
	},
	getRetryOnError: function() {
		return this.dataset.retryOnError || 3;
	},
	getServerSessionTimeOut: function() {
		return (this.dataset.sessionTimeout || 2) * 60 * 1000; // converting minutes into milliseconds
		//return 186000; // 3.1 minutes for test
	},
	getCurrencyDisplay: function() {
		return this.dataset.currencyDisplay || "symbol";
	},
	getUnitDisplay: function() {
		return this.dataset.unitDisplay || "symbol";
	},
	getCurrencyPosition: function() {
		return this.dataset.currencyPosition || "right";
	},
	buildWCContent: function() {
		var dd = this.dataset || {};
		return ["selectedEndpoint", "selectedRole", "selectedLocale"].reduce(function(prev, item) {
			var val = dd[item];
			prev[item] = (val && val.$uuid) ? {
				$uuid: val.$uuid
			} : null;
			return prev;
		}, {
			$etag: dd.$etag
		});
	}
});