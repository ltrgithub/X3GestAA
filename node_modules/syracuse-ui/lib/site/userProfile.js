"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var date = require('syracuse-core/lib/types/date');
var locale = require('syracuse-core/lib/locale');
var globals = require('streamline/lib/globals');
var _resources = date.resources;
var disconnectUtils = require('./disconnectUtils');

function UserProfile() {

}

exports.UserProfile = helpers.defineClass(UserProfile, RawPage, {
	dispose: function() {
		this.externalAdapter = this.formBlock = null;
		RawPage.prototype.dispose.call(this);
	},
	getAuthoringLevel: function() {
		return (this.dataset ? this.dataset.authoringLevel : null) || "none";
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$bind == "$logout") {
			document.site.menuItems.$logout[0].click();
			return false;
		}
		return true;
	},
	onNotifyDataChange: function(field, value) {
		var self = this;
		if (field.$item.$bind == "selectedLocale") {
			disconnectUtils.onUserActionUnload(function() {
				self.notifyDataChange(field, value);
			}, function() {
				if (self.oldValue) {
					field.setDataValue(self.oldValue);
				}

			});
			return false;
		}
		return true;
	},
	onClickPicker: function(btn, event) {
		var field = document.controller.findField(event.target);
		if (field && field.$item && field.$item.$bind && field.$item.$bind == "selectedLocale") {
			this.oldValue = helpers.object.clone(field.currentValue);
		}
		return true;
	},
	ensureFormBlock: function() {
		var self = this;
		if (!self.formBlock) {
			self.formBlock = self.loadNewItem(self.$$item[0], {
				$category: "section",
				$id: "s-user-form-block",
				$skin: "s-user-form",
				$layout: {
					$items: [{
						$bind: "$save",
						$category: "link",
						$isHidden: true,
						onServerRequest: function(menu) {
							//this is item menu
							if (menu.$links && menu.$links.$location) {
								var currentPage = menu.boxParent.getArticle();
								self.decoratePrototype(self.$prototype);
								//                            document.controller.openPage(self, menu.$links.$location);
								//var location = ((document.site.$prototype || {}).$links || {}).$home;
								//location && document.controller.openPage(self, location);
							}
							return false;
						}
					}, {
						$isEditMode: true,
						$isReferenceTitleVisible: false,
						$skin: "s-user-profile-ref",
						$css: "s-user-profile-selectedRole",
						$bind: "photo"
					}, {
						$isEditMode: true,
						$isTopLabelAlignment: false,
						$isReferenceTitleVisible: false,
						$skin: "s-user-profile-ref",
						$css: "s-user-profile-selectedRole",
						$bind: "selectedRole"
					}, {
						$isEditMode: true,
						$isTopLabelAlignment: false,
						$skin: "s-user-profile-ref",
						$isReferenceTitleVisible: false,
						$css: "s-user-profile-selectedEndpoint",
						$bind: "selectedEndpoint"
					}, {
						$isEditMode: true,
						$isTopLabelAlignment: false,
						$skin: "s-user-profile-ref",
						$isReferenceTitleVisible: false,
						$css: "s-user-profile-selectedLocale",
						$bind: "selectedLocale"
					}, {
						$bind: "$logout",
						$category: "link",
						$skin: "s-user-profile-logout"
					}]
				}
			});
			self._localizeFields();
		}
	},

	showPageSecurity: function(page) {
		if (document.site.$item.$isPageSecurityView !== false) {
			page.security = {};
			document.site.emptyDom(page.securityViewSlot);
			if (this.dataset) {
				if (this.dataset.selectedRole) {
					page.security.roleItem = document.createElement("div");
					page.security.roleItem.className = this.$skin + "-head-user-role";
					page.security.roleItem.textContent = page.security.roleItem.title = this.dataset.selectedRole.description || "";
					page.securityViewSlot.appendChild(page.security.roleItem);
				}
				if (this.dataset.selectedEndpoint) {
					page.security.endpointItem = document.createElement("div");
					page.security.endpointItem.className = this.$skin + "-head-user-endpoint";
					page.security.endpointItem.textContent = page.security.endpointItem.title = this.dataset.selectedEndpoint.description || "";
					page.securityViewSlot.appendChild(page.security.endpointItem);
				}
			}
		}
	},
	loadBox: function(initData, $initDiagnoses) {
		this._unregisterResizer = true;
		// adding selectedLocale into dom for test purposes
		if (initData && initData.selectedLocale) {
			document.site.body.setAttribute('data-s-q-local', initData.selectedLocale.$value);
		}
		this.$prototype.$properties.$fieldSelectEndPoint = {
			$type: "application/x-choice",
			$value: {
				$type: "application/x-integer",
				$enum: []
			}
		};
		if (!this.$prototype.$links.$logout) {
			this.$prototype.$links.$logout = {
				$title: document.site.localize.siteLogout
			};
		}
		RawPage.prototype.loadBox.call(this, initData, $initDiagnoses);
	},
	_localizeFields: function() {
		if (this.formBlock) {
			var localize = locale.resources(module)();
			this.idMap["s-user-form-block"].applyDesignMetaData({
				$title: localize.up_welcome
			}, true);
			this.boundFields.selectedRole[0].setTitle(localize.up_role);
			this.boundFields.selectedEndpoint[0].setTitle(localize.up_endpoint);
			this.boundFields.selectedLocale[0].setTitle(localize.up_locale);
		}
		document.site.applyLocalize();
	},
	drawBox: function() {
		this.externalAdapter = document.site.externalAdapter;
		this._item = document.createElement("div");
		this._item.id = "s-user-profile";
		this.$$item = $(this._item);
	},
	showDiagnoses: function(message) {
		// display user profile errors in popup ???
		if (message.$diagnoses && Object.keys(message.$diagnoses).length > 0) {
			var options = {};
			var onlyOneDiagnose = message.$diagnoses.length == 1;
			options.$message = document.site.localize.siteMsgboxMsg;
			options.$type = "alert";
			options.$buttons = "ok";
			options.$title = document.site.localize.upDiagMsgboxTitle;
			options.$diagnoses = message.$diagnoses;
			options.$origin = onlyOneDiagnose ? message.$diagnoses[0].$origin : "";
			this.showMessage(options);
		}
	},
	notifyDataChange: function(field, value) {
		this.notifyActionChange(this, {
			$save: {
				$isRequested: true
			}
		}, false);
		RawPage.prototype.notifyDataChange.call(this, field, value);
	},
	decoratePrototype: function($prototype) {
		if (this.dataset && this.dataset.selectedRole) {
			$prototype.$role = this.dataset.selectedRole.$uuid;
		}
	},
	wrapLoadSuccess: function(cb) {
		var self = this;
		return function(arg) {
			globals.context = globals.context || {};
			var lp = globals.context.localePreferences;
			var lang = lp && lp.code || "en";
			var map = globals.context.localeMap = globals.context.localeMap || {};
			if (map[lang] == null) {
				map[lang] = lang;
				locale.setCurrent(function(err) {
					cb(arg);
					self._localizeFields();
				}, lang, lp);
			} else {
				cb(arg);
				self._localizeFields();
			}
		};
	},
	applyChange: function(newData) {
		// refresh page when user changes locale
		var selectedLocale = this.getSelectedLocale();
		if (newData && newData.serverETag !== null) {
			if (module.etag != newData.serverETag) {
				//document.location.reload(true);
				throw new Error("s-is-reload-requested");
			}
		}
		var reloadMainPage;
		if (Object.keys(this.dataset).length > 0) {
			if (selectedLocale && newData.selectedLocale && JSON.stringify(selectedLocale) != JSON.stringify(newData.selectedLocale)) {
				//location.reload();
				throw new Error("s-is-reload-requested");
			}
			if (this.selectedEndpointUiid && newData.selectedEndpoint) {
				reloadMainPage = this.selectedEndpointUiid != newData.selectedEndpoint.$uuid;

			} else {
				reloadMainPage = this.selectedEndpointUiid || newData.selectedEndpoint;
			}
			if (!reloadMainPage) {
				if (this.selectedRoleUiid && newData.selectedRole) {
					reloadMainPage = this.selectedRoleUiid != newData.selectedRole.$uuid;
				} else {
					reloadMainPage = this.selectedRoleUiid || newData.selectedRole;
				}
			}
		}
		if (newData.selectedRole !== undefined) {
			this.selectedRoleUiid = newData.selectedRole === null ? null : newData.selectedRole.$uuid;
		}
		if (newData.selectedEndpoint !== undefined) {
			this.selectedEndpointUiid = newData.selectedEndpoint === null ? null : newData.selectedEndpoint.$uuid;
		}

		if (newData && newData.selectedRole) {
			document.site.$prototype.$role = newData.selectedRole.$uuid;
		}

		RawPage.prototype.applyChange.call(this, newData);

		// adding localePreferences to globals.context
		if (this.dataset && this.dataset.selectedLocale) {
			globals.context = {};
			globals.context.localePreferences = this.dataset.selectedLocale;
		}
		if (this.$isTitleUpdateRequested) {
			if (document.site.updateDocumentTitle) {
				document.site.updateDocumentTitle();
			}
			this.$isTitleUpdateRequested = false;
		}
		if (reloadMainPage) {
			document.controller.reloadMainPage();
		}
		//important see in site.js
		sessionStorage.setItem("onSourceLoading", 0);
		if (document.site.mainPage) {
			document.site.mainPage.ensureDesignerOpenerVisibility();
		}
	},
	getSelectedEndpointString: function() {
		var endpoint = this.dataset ? this.dataset.selectedEndpoint : null;
		return endpoint ? (endpoint.application + "." + endpoint.contract + "." + endpoint.dataset) : null;
	},
	getDateFormat: function(displayFormat) {
		return displayFormat == "DD" ? (this.dataset.selectedLocale ? this.dataset.selectedLocale.longDate : "dd MMMM yyyy") : (this.dataset.selectedLocale ? this.dataset.selectedLocale.shortDate : "yyyy-MM-dd");
	},
	getTimeFormat: function(displayFormat) {
		return displayFormat == "TT" ? (this.dataset.selectedLocale ? this.dataset.selectedLocale.longTime : "HH:mm:ss") : (this.dataset.selectedLocale ? this.dataset.selectedLocale.shortTime : "HH:mm");
	},
	getDatetimeFormat: function(displayFormat) {
		var format;
		switch (displayFormat) {
			case "F":
				// sortable datetime format
				format = _resources().formatPatterns ? _resources().formatPatterns["sortableDateTime"] : "yyyy-MM-ddTHH:mm:ss";
				break;
			case "FF":
				// full datetime format
				format = this.dataset.selectedLocale ? this.dataset.selectedLocale.longDatetime : (_resources().formatPatterns ? _resources().formatPatterns["fullDateTime"] : "dd MMMM yyyy HH:mm:ss");
				break;
			case "U":
				// universal sortable datetime format
				format = _resources().formatPatterns ? _resources().formatPatterns["universalSortableDateTime"] : "yyyy-MM-dd HH:mm:ssZ";
				break;
			default:
				// datetime default format is dateformat + space + timeformat
				var selectedLocale = this.dataset.selectedLocale;
				format = (selectedLocale && selectedLocale.shortDatetime) ? selectedLocale.shortDatetime : (this.getDateFormat() + " " + this.getTimeFormat());
		}
		return format;
	},
	getSelectedLocale: function() {
		return this.dataset && this.dataset.selectedLocale;
	},
	getNumberFormatObj: function(type) {
		var formatObj = {};
		var f = "#,";
		var gs = this.dataset && this.dataset.selectedLocale && this.dataset.selectedLocale.numberGroupSize ? this.dataset.selectedLocale.numberGroupSize : "3";
		for (var i = 0; i < gs; i++) {
			f += (i == gs - 1) ? "0" : "#";
		}
		f += type == "application/x-integer" ? '' : '.##';
		// numFormat default -> #,##0 (integer) or #,##0.## (decimal)
		formatObj.numFormat = f;
		formatObj.decimalSeparator = this.dataset && this.dataset.selectedLocale && this.dataset.selectedLocale.numberDecimalSeparator ? this.dataset.selectedLocale.numberDecimalSeparator : ".";
		formatObj.groupSeparator = this.dataset && this.dataset.selectedLocale && this.dataset.selectedLocale.numberGroupSeparator ? this.dataset.selectedLocale.numberGroupSeparator : ",";
		formatObj.groupSize = gs;
		return formatObj;
	},
	getNumberFormat: function(type) {
		return this.getNumberFormatObj(type).numFormat;
	},
	getTwoDigitYearMax: function() {
		return (this.dataset.selectedLocale && this.dataset.selectedLocale.twoDigitYearMax) || 2029;
	},
	getServerSessionTimeOut: function() {
		return (this.dataset ? this.dataset.sessionTimeout : 2) * 60 * 1000; // converting minutes into milliseconds
		//return 186000; // 3.1 minutes for test
	},
	getCurrencyDisplay: function() {
		return this.dataset ? (this.dataset.currencyDisplay ? this.dataset.currencyDisplay : "symbol") : "symbol";
	},
	getUnitDisplay: function() {
		return this.dataset ? (this.dataset.unitDisplay ? this.dataset.unitDisplay : "symbol") : "symbol";
	},
	getCurrencyPosition: function() {
		return this.dataset ? (this.dataset.currencyPosition ? this.dataset.currencyPosition : "right") : "right";
	},
	buildWCContent: function() {
		var dd = this.dataset || {};
		return ["selectedEndpoint", "selectedRole", "selectedLocale"].reduce(function(prev, item) {
			var val = dd[item];
			prev[item] = (val && val.$uuid) ? {
				$uuid: val.$uuid
			} : null;
			return prev;
		}, {
			$etag: dd.$etag
		});
	}
});